uint64_t geom::arap_deformer<float>::arap_deformer(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5;

  v5 = geom::ddg_evaluator<float>::ddg_evaluator();
  geom::sparse_linear_solver<float>::sparse_linear_solver(v5 + 64, a3, a3);
  *(unsigned char *)(a1 + 320) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = a1 + 336;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 416) = 0;
  geom::ddg_evaluator<float>::set_clamp_cotan_weights(a1, 1);
  return a1;
}

uint64_t geom::arap_deformer<float>::arap_deformer(uint64_t a1, void *a2)
{
  uint64_t v4 = geom::ddg_evaluator<float>::ddg_evaluator();
  uint64_t v5 = (a2[1] - *a2) >> 4;
  geom::sparse_linear_solver<float>::sparse_linear_solver(v4 + 64, v5, v5);
  *(unsigned char *)(a1 + 320) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = a1 + 336;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 416) = 0;
  geom::ddg_evaluator<float>::set_clamp_cotan_weights(a1, 1);
  return a1;
}

uint64_t geom::arap_deformer<float>::is_initialized(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 320);
}

uint64_t **geom::arap_deformer<float>::add_constraints(uint64_t **result, void *a2, uint64_t *a3)
{
  v3 = result;
  uint64_t v4 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      long long v9 = *(_OWORD *)(*a2 + 16 * v8);
      v10 = (_DWORD *)(v4 + v7);
      result = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(v3 + 41, (unsigned int *)(v4 + v7), (uint64_t)&std::piecewise_construct, &v10);
      *((_OWORD *)result + 3) = v9;
      ++v8;
      uint64_t v4 = *a3;
      v7 += 4;
    }
    while (v8 < (a3[1] - *a3) >> 2);
  }
  *((unsigned char *)v3 + 320) = 0;
  return result;
}

uint64_t **geom::arap_deformer<float>::add_constraints(uint64_t **result, long long *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5 = result;
  if (a5)
  {
    uint64_t v6 = a5;
    do
    {
      long long v9 = *a2++;
      v10 = a4;
      result = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(v5 + 41, a4, (uint64_t)&std::piecewise_construct, &v10);
      *((_OWORD *)result + 3) = v9;
      ++a4;
      --v6;
    }
    while (v6);
  }
  *((unsigned char *)v5 + 320) = 0;
  return result;
}

uint64_t **geom::arap_deformer<float>::add_static_constraints(uint64_t a1, uint64_t *a2)
{
  result = (uint64_t **)geom::bvh<float,(unsigned char)2>::invariant_check();
  uint64_t v5 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      long long v9 = *(_OWORD *)&(*v6)[2 * *(unsigned int *)(v5 + v7)];
      v10 = (_DWORD *)(v5 + v7);
      result = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)(v5 + v7), (uint64_t)&std::piecewise_construct, &v10);
      *((_OWORD *)result + 3) = v9;
      ++v8;
      uint64_t v5 = *a2;
      v7 += 4;
    }
    while (v8 < (a2[1] - *a2) >> 2);
  }
  *(unsigned char *)(a1 + 320) = 0;
  return result;
}

uint64_t **geom::arap_deformer<float>::add_static_constraints(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  result = (uint64_t **)geom::bvh<float,(unsigned char)2>::invariant_check(a1);
  if (a3)
  {
    uint64_t v7 = result;
    do
    {
      long long v8 = *(_OWORD *)&(*v7)[2 * *a2];
      long long v9 = a2;
      result = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), a2, (uint64_t)&std::piecewise_construct, &v9);
      *((_OWORD *)result + 3) = v8;
      ++a2;
      --a3;
    }
    while (a3);
  }
  *(unsigned char *)(a1 + 320) = 0;
  return result;
}

void geom::arap_deformer<float>::clear_constraints(uint64_t a1)
{
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = a1 + 336;
  *(unsigned char *)(a1 + 320) = 0;
}

BOOL geom::arap_deformer<float>::initialize(uint64_t a1)
{
  geom::arap_deformer<float>::reset(a1);
  if (*(void *)(a1 + 400) == *(void *)(a1 + 408))
  {
    unint64_t v2 = geom::ddg_evaluator<float>::vertex_count(a1);
    std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::resize((uint64_t *)(a1 + 400), v2);
    if (geom::ddg_evaluator<float>::vertex_count(a1))
    {
      uint64_t v3 = 0;
      unsigned int v4 = 0;
      do
      {
        geom::ddg_evaluator<float>::compute_laplacian_stencil((uint64_t *)a1, v4, 1, (uint64_t)__p);
        uint64_t v5 = *(void *)(a1 + 400);
        uint64_t v6 = v5 + 48 * v3;
        uint64_t v7 = *(void **)v6;
        if (*(void *)v6)
        {
          *(void *)(v6 + 8) = v7;
          operator delete(v7);
          *(void *)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
        }
        *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
        *(void *)(v6 + 16) = v26;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v26 = 0;
        uint64_t v8 = v5 + 48 * v3;
        v11 = *(void **)(v8 + 24);
        v10 = (void *)(v8 + 24);
        long long v9 = v11;
        if (v11)
        {
          *(void *)(v5 + 48 * v3 + 32) = v9;
          operator delete(v9);
          void *v10 = 0;
          v10[1] = 0;
          v10[2] = 0;
        }
        *(_OWORD *)v10 = v27;
        *(void *)(v5 + 48 * v3 + 40) = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        uint64_t v3 = ++v4;
      }
      while (geom::ddg_evaluator<float>::vertex_count(a1) > (unint64_t)v4);
    }
  }
  uint64_t v12 = *(void *)(a1 + 400);
  if (*(void *)(a1 + 408) != v12)
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    do
    {
      for (i = *(uint64_t **)(a1 + 336); i; i = (uint64_t *)*i)
      {
        unsigned int v16 = *((_DWORD *)i + 8);
        if (v14 >= v16)
        {
          if (v16 >= v14)
          {
            geom::sparse_linear_solver<float>::add_entry(a1 + 64, v14, v14, 1.0);
            goto LABEL_29;
          }
          ++i;
        }
      }
      v17 = (uint64_t *)(v12 + 48 * v13);
      geom::sparse_linear_solver<float>::add_entry(a1 + 64, v14, v14, -*(float *)v17[3]);
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      if ((unint64_t)(v18 - *v17) >= 5)
      {
        unint64_t v20 = 1;
        do
        {
          v21 = *(uint64_t **)(a1 + 336);
          for (unsigned int j = *(_DWORD *)(v19 + 4 * v20); v21; v21 = (uint64_t *)*v21)
          {
            unsigned int v23 = *((_DWORD *)v21 + 8);
            if (j >= v23)
            {
              if (v23 >= j) {
                goto LABEL_26;
              }
              ++v21;
            }
          }
          geom::sparse_linear_solver<float>::add_entry(a1 + 64, v14, j, -*(float *)(v17[3] + 4 * v20));
          uint64_t v19 = *v17;
          uint64_t v18 = v17[1];
LABEL_26:
          unint64_t v20 = (v20 + 1);
        }
        while (v20 < (v18 - v19) >> 2);
      }
LABEL_29:
      uint64_t v12 = *(void *)(a1 + 400);
      uint64_t v13 = ++v14;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 408) - v12) >> 4) > v14);
  }
  BOOL result = geom::sparse_linear_solver<float>::factor((unsigned int *)(a1 + 64), 0);
  *(unsigned char *)(a1 + 320) = 1;
  return result;
}

void geom::arap_deformer<float>::reset(uint64_t a1)
{
  long long v4 = 0u;
  long long v5 = 0u;
  long long v6 = 0u;
  LODWORD(v4) = 1065353216;
  DWORD1(v5) = 1065353216;
  DWORD2(v6) = 1065353216;
  geom::sparse_linear_solver<float>::clear_enrties(a1 + 64);
  uint64_t v2 = geom::bvh<float,(unsigned char)2>::invariant_check(a1);
  if (a1 + 352 != v2) {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l((char *)(a1 + 352), *(char **)v2, *(void *)(v2 + 8), (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 4);
  }
  unint64_t v3 = geom::ddg_evaluator<float>::vertex_count(a1);
  std::vector<simd_float3x3>::resize(a1 + 376, v3, &v4);
  *(unsigned char *)(a1 + 320) = 0;
}

void std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::resize(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 4);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::__append(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 48 * a2;
    while (v3 != v7)
    {
      v3 -= 48;
      std::allocator<geom::ddg_evaluator<float>::stencil>::destroy[abi:nn180100]((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void geom::arap_deformer<float>::deform(void *a1, unsigned int a2, float a3)
{
  if (a2)
  {
    unsigned int v6 = 0;
    float v7 = 0.0;
    do
    {
      geom::arap_deformer<float>::deform_step((uint64_t)a1);
      if (a3 <= 0.0)
      {
        unsigned int v9 = v6 + 1;
        *(float *)&double v8 = v7;
      }
      else
      {
        double v8 = geom::arap_deformer<float>::energy(a1);
        unsigned int v9 = v6 + 1;
        if (v6 && v9 < a2 && (float)(vabds_f32(*(float *)&v8, v7) / (float)(*(float *)&v8 + a3)) < a3) {
          return;
        }
      }
      unsigned int v6 = v9;
      float v7 = *(float *)&v8;
    }
    while (v9 != a2);
  }
}

void geom::arap_deformer<float>::deform_step(uint64_t a1)
{
  BOOL v5 = (uint64_t *)geom::bvh<float,(unsigned char)2>::invariant_check(a1);
  uint64_t v82 = *(void *)(a1 + 376);
  uint64_t v83 = *(void *)(a1 + 384);
  unint64_t v91 = (v83 - v82) / 48;
  if (v83 != v82)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (v83 - v82) / 48;
    if (v91 <= 1) {
      uint64_t v7 = 1;
    }
    uint64_t v90 = v7;
    do
    {
      float32x4_t v111 = 0u;
      float32x4_t v112 = 0u;
      float32x4_t v110 = 0u;
      uint64_t v8 = *(void *)(a1 + 400);
      unsigned int v9 = (uint64_t *)(v8 + 48 * v6);
      uint64_t v10 = *v9;
      float32x4_t v11 = v96;
      float32x4_t v12 = v97;
      float32x4_t v13 = v95;
      if ((unint64_t)(v9[1] - *v9) >= 5)
      {
        uint64_t v14 = *(void *)(a1 + 352);
        v15 = (void *)(v8 + 48 * v6 + 24);
        unsigned int v16 = 2;
        uint64_t v17 = *v5;
        unint64_t v18 = 1;
        __int32 v19 = v96.i32[3];
        __int32 v20 = v97.i32[3];
        do
        {
          uint64_t v21 = *(unsigned int *)(v10 + 4 * v18);
          float32x4_t v22 = vsubq_f32(*(float32x4_t *)(v17 + 16 * v6), *(float32x4_t *)(v17 + 16 * v21));
          float32x4_t v23 = vsubq_f32(*(float32x4_t *)(v14 + 16 * v6), *(float32x4_t *)(v14 + 16 * v21));
          float v24 = *(float *)(*v15 + 4 * v18);
          float32x4_t v12 = vmulq_n_f32(vmulq_n_f32(v22, v23.f32[0]), v24);
          float32x4_t v11 = vmulq_n_f32(vmulq_lane_f32(v22, *(float32x2_t *)v23.f32, 1), v24);
          float32x4_t v13 = vmulq_n_f32(vmulq_laneq_f32(v22, v23, 2), v24);
          float32x4_t v25 = vaddq_f32(v110, v12);
          v12.i32[3] = v20;
          float32x4_t v26 = vaddq_f32(v111, v11);
          v11.i32[3] = v19;
          float32x4_t v27 = vaddq_f32(v112, v13);
          v13.i32[3] = v95.i32[3];
          v110.i32[2] = v25.i32[2];
          v111.i32[2] = v26.i32[2];
          v110.i64[0] = v25.i64[0];
          v111.i64[0] = v26.i64[0];
          v112.i32[2] = v27.i32[2];
          v112.i64[0] = v27.i64[0];
          unint64_t v18 = v16;
          uint64_t v10 = *v9;
          ++v16;
          __int32 v19 = v11.i32[3];
          __int32 v20 = v12.i32[3];
        }
        while (v18 < (v9[1] - *v9) >> 2);
      }
      float32x4_t v95 = v13;
      float32x4_t v96 = v11;
      float32x4_t v97 = v12;
      *(void *)((char *)&v109 + 4) = 0;
      LODWORD(v109) = 0;
      geom::compute_svd_3x3<float>((int8x16_t *)&v110, &v106, &v109, &v103, v2, v3, v4);
      uint64_t v28 = 0;
      float32x4_t v29 = (float32x4_t)vzip1q_s32(v103, v104);
      v29.i32[2] = v105.i32[0];
      float32x4_t v30 = (float32x4_t)vzip2q_s32(vzip1q_s32(v103, v105), vdupq_lane_s32(*(int32x2_t *)v104.i8, 1));
      float32x4_t v31 = (float32x4_t)vzip2q_s32(v103, v104);
      v31.i32[2] = v105.i32[2];
      int32x4_t v32 = vzip1q_s32(v106, v108);
      int32x4_t v33 = vzip1q_s32(v32, v107);
      int32x4_t v34 = vzip1q_s32(vzip2q_s32(v106, v108), vdupq_laneq_s32(v107, 2));
      int32x4_t v35 = v33;
      v35.i32[3] = v92;
      int32x4_t v36 = vzip2q_s32(v32, vdupq_lane_s32(*(int32x2_t *)v107.i8, 1));
      int32x4_t v37 = v36;
      v37.i32[3] = v93;
      int32x4_t v38 = v34;
      v38.i32[3] = v94;
      int32x4_t v113 = v35;
      int32x4_t v114 = v37;
      int32x4_t v115 = v38;
      do
      {
        *(float32x4_t *)((char *)&v98 + v28) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*(_OWORD *)((char *)&v113 + v28))), v30, *(float32x2_t *)&v113.i8[v28], 1), v31, *(float32x4_t *)((char *)&v113 + v28), 2);
        v28 += 16;
      }
      while (v28 != 48);
      float32x4_t v39 = v98;
      int32x4_t v40 = (int32x4_t)v99;
      int32x4_t v41 = (int32x4_t)v100;
      float32x4_t v42 = vmulq_f32(v98, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v41, (int8x16_t)v41, 0xCuLL), v100, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v40, v40), v99, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v41, v41), v100, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v40, (int8x16_t)v40, 0xCuLL), v99, 8uLL)));
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0] >= 0.0)
      {
        v39.i32[3] = 0;
        v40.i32[3] = 0;
        v41.i32[3] = 0;
      }
      else
      {
        uint64_t v43 = 0;
        v33.i32[3] = v84;
        v36.i32[3] = v85;
        v34.i32[3] = v86;
        int32x4_t v113 = v33;
        int32x4_t v114 = v36;
        int32x4_t v115 = v34;
        do
        {
          *(float32x4_t *)((char *)&v98 + v43) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_236F14120, COERCE_FLOAT(*(_OWORD *)((char *)&v113 + v43))), (float32x4_t)xmmword_236F14130, *(float32x2_t *)&v113.i8[v43], 1), (float32x4_t)xmmword_236F14140, *(float32x4_t *)((char *)&v113 + v43), 2);
          v43 += 16;
        }
        while (v43 != 48);
        uint64_t v44 = 0;
        float32x4_t v45 = v98;
        int8x16_t v46 = v99;
        v45.i32[3] = v87;
        v46.i32[3] = v88;
        int8x16_t v47 = v100;
        v47.i32[3] = v89;
        int32x4_t v113 = (int32x4_t)v45;
        int32x4_t v114 = (int32x4_t)v46;
        int32x4_t v115 = (int32x4_t)v47;
        do
        {
          *(float32x4_t *)((char *)&v98 + v44) = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v29, COERCE_FLOAT(*(_OWORD *)((char *)&v113 + v44))), v30, *(float32x2_t *)&v113.i8[v44], 1), v31, *(float32x4_t *)((char *)&v113 + v44), 2);
          v44 += 16;
        }
        while (v44 != 48);
        float32x4_t v39 = v98;
        int32x4_t v40 = (int32x4_t)v99;
        int32x4_t v41 = (int32x4_t)v100;
      }
      v48 = (float32x4_t *)(*(void *)(a1 + 376) + 48 * v6++);
      float32x4_t *v48 = v39;
      v48[1] = (float32x4_t)v40;
      v48[2] = (float32x4_t)v41;
    }
    while (v6 != v90);
  }
  uint64_t v102 = 0;
  int8x16_t v100 = 0u;
  long long v101 = 0u;
  float32x4_t v98 = 0u;
  int8x16_t v99 = 0u;
  v113.i32[0] = 0;
  std::vector<float>::resize((uint64_t)&v98, v91, &v113);
  v113.i32[0] = 0;
  std::vector<float>::resize((uint64_t)&v99.i64[1], v91, &v113);
  v113.i32[0] = 0;
  std::vector<float>::resize((uint64_t)&v101, v91, &v113);
  v110.i32[0] = 0;
  if (v83 == v82)
  {
    v79 = (unsigned int *)(a1 + 64);
    geom::sparse_linear_solver<float>::solve(v79, (uint64_t)&v98);
    geom::sparse_linear_solver<float>::solve(v79, (uint64_t)&v99.i64[1]);
    geom::sparse_linear_solver<float>::solve(v79, (uint64_t)&v101);
    goto LABEL_44;
  }
  uint64_t v49 = 0;
  unsigned __int32 v50 = 0;
  do
  {
    for (i = *(uint64_t **)(a1 + 336); i; i = (uint64_t *)*i)
    {
      unsigned __int32 v52 = *((_DWORD *)i + 8);
      if (v50 >= v52)
      {
        if (v52 >= v50)
        {
          v113.i64[0] = (uint64_t)&v110;
          v73 = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)&v110, (uint64_t)&std::piecewise_construct, &v113);
          *(_DWORD *)(v98.i64[0] + 4 * v110.u32[0]) = *((_DWORD *)v73 + 12);
          v113.i64[0] = (uint64_t)&v110;
          v74 = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)&v110, (uint64_t)&std::piecewise_construct, &v113);
          *(_DWORD *)(v99.i64[1] + 4 * v110.u32[0]) = *((_DWORD *)v74 + 13);
          v113.i64[0] = (uint64_t)&v110;
          v75 = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)&v110, (uint64_t)&std::piecewise_construct, &v113);
          unsigned __int32 v50 = v110.i32[0];
          *(_DWORD *)(v101 + 4 * v110.u32[0]) = *((_DWORD *)v75 + 14);
          goto LABEL_38;
        }
        ++i;
      }
    }
    uint64_t v53 = *(void *)(a1 + 400);
    v54 = (uint64_t *)(v53 + 48 * v49);
    uint64_t v55 = *v54;
    uint64_t v56 = v54[1];
    if ((unint64_t)(v56 - *v54) < 5) {
      goto LABEL_38;
    }
    v57 = (void *)(v53 + 48 * v49 + 24);
    unint64_t v58 = 1;
    do
    {
      v59 = *(uint64_t **)(a1 + 336);
      if (!v59) {
        goto LABEL_35;
      }
      v60 = (unsigned int *)(v55 + 4 * v58);
      unsigned int v61 = *v60;
      while (1)
      {
        unsigned int v62 = *((_DWORD *)v59 + 8);
        if (v61 >= v62) {
          break;
        }
LABEL_32:
        v59 = (uint64_t *)*v59;
        if (!v59) {
          goto LABEL_35;
        }
      }
      if (v62 < v61)
      {
        ++v59;
        goto LABEL_32;
      }
      float v63 = *(float *)(*v57 + 4 * v58);
      v113.i64[0] = v55 + 4 * v58;
      v64 = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), v60, (uint64_t)&std::piecewise_construct, &v113);
      *(float *)(v98.i64[0] + 4 * v110.u32[0]) = *(float *)(v98.i64[0] + 4 * v110.u32[0])
                                                 + (float)(v63 * *((float *)v64 + 12));
      float v65 = *(float *)(*v57 + 4 * v58);
      v113.i64[0] = *v54 + 4 * v58;
      v66 = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v113.i64[0], (uint64_t)&std::piecewise_construct, &v113);
      *(float *)(v99.i64[1] + 4 * v110.u32[0]) = *(float *)(v99.i64[1] + 4 * v110.u32[0])
                                                 + (float)(v65 * *((float *)v66 + 13));
      float v67 = *(float *)(*v57 + 4 * v58);
      v113.i64[0] = *v54 + 4 * v58;
      v68 = _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v113.i64[0], (uint64_t)&std::piecewise_construct, &v113);
      unsigned __int32 v50 = v110.i32[0];
      *(float *)(v101 + 4 * v110.u32[0]) = *(float *)(v101 + 4 * v110.u32[0]) + (float)(v67 * *((float *)v68 + 14));
      uint64_t v55 = *v54;
      uint64_t v56 = v54[1];
LABEL_35:
      uint64_t v69 = *(unsigned int *)(v55 + 4 * v58);
      float32x4_t v70 = vsubq_f32(*(float32x4_t *)(*v5 + 16 * v50), *(float32x4_t *)(*v5 + 16 * v69));
      uint64_t v71 = *(void *)(a1 + 376);
      float32x4_t v72 = vmulq_n_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(vaddq_f32(*(float32x4_t *)(v71 + 48 * v50), *(float32x4_t *)(v71 + 48 * v69)), v70.f32[0]), vaddq_f32(*(float32x4_t *)(v71 + 48 * v50 + 16), *(float32x4_t *)(v71 + 48 * v69 + 16)), *(float32x2_t *)v70.f32, 1), vaddq_f32(*(float32x4_t *)(v71 + 48 * v50 + 32), *(float32x4_t *)(v71 + 48 * v69 + 32)), v70, 2), *(float *)(*v57 + 4 * v58) * 0.5);
      *(float *)(v98.i64[0] + 4 * v50) = *(float *)(v98.i64[0] + 4 * v50) + v72.f32[0];
      *(float *)(v99.i64[1] + 4 * v50) = *(float *)(v99.i64[1] + 4 * v50) + v72.f32[1];
      *(float *)(v101 + 4 * v50) = v72.f32[2] + *(float *)(v101 + 4 * v50);
      unint64_t v58 = (v58 + 1);
    }
    while (v58 < (v56 - v55) >> 2);
LABEL_38:
    v110.i32[0] = ++v50;
    uint64_t v49 = v50;
  }
  while (v91 > v50);
  geom::sparse_linear_solver<float>::solve((unsigned int *)(a1 + 64), (uint64_t)&v98);
  geom::sparse_linear_solver<float>::solve((unsigned int *)(a1 + 64), (uint64_t)&v99.i64[1]);
  geom::sparse_linear_solver<float>::solve((unsigned int *)(a1 + 64), (uint64_t)&v101);
  uint64_t v77 = 0;
  uint64_t v78 = (v83 - v82) / 48;
  if (v91 <= 1) {
    uint64_t v78 = 1;
  }
  do
  {
    LODWORD(v76) = *(_DWORD *)(v98.i64[0] + 4 * v77);
    DWORD1(v76) = *(_DWORD *)(v99.i64[1] + 4 * v77);
    DWORD2(v76) = *(_DWORD *)(v101 + 4 * v77);
    *(_OWORD *)(*(void *)(a1 + 352) + 16 * v77++) = v76;
  }
  while (v78 != v77);
LABEL_44:
  for (uint64_t j = 0; j != -72; j -= 24)
  {
    v81 = *(void **)((char *)&v101 + j);
    if (v81)
    {
      *(void *)((char *)&v101 + j + 8) = v81;
      operator delete(v81);
    }
  }
}

double geom::arap_deformer<float>::energy(void *a1)
{
  uint64_t v2 = (uint64_t *)geom::bvh<float,(unsigned char)2>::invariant_check();
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = v4 - *v2;
  if (v4 == *v2) {
    return 0.0;
  }
  uint64_t v6 = 0;
  unint64_t v7 = v5 >> 4;
  uint64_t v8 = a1[50];
  if (v7 <= 1) {
    unint64_t v7 = 1;
  }
  double result = 0.0;
  do
  {
    uint64_t v10 = *(void *)(v8 + 48 * v6);
    uint64_t v11 = *(void *)(v8 + 48 * v6 + 8) - v10;
    if ((unint64_t)v11 >= 5)
    {
      unint64_t v12 = v11 >> 2;
      unsigned int v13 = 2;
      uint64_t v14 = 1;
      do
      {
        uint64_t v15 = *(unsigned int *)(v10 + 4 * v14);
        float32x4_t v16 = vsubq_f32(*(float32x4_t *)(v3 + 16 * v6), *(float32x4_t *)(v3 + 16 * v15));
        float32x4_t v17 = vsubq_f32(vsubq_f32(*(float32x4_t *)(a1[44] + 16 * v6), *(float32x4_t *)(a1[44] + 16 * v15)), vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)(a1[47] + 48 * v6), v16.f32[0]), *(float32x4_t *)(a1[47] + 48 * v6 + 16), *(float32x2_t *)v16.f32, 1), *(float32x4_t *)(a1[47] + 48 * v6 + 32), v16, 2));
        float32x4_t v18 = vmulq_f32(v17, v17);
        *(float *)&double result = vmlas_n_f32(*(float *)&result, *(float *)(*(void *)(v8 + 48 * v6 + 24) + 4 * v14), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
        uint64_t v14 = v13;
      }
      while (v12 > v13++);
    }
    ++v6;
  }
  while (v6 != v7);
  return result;
}

void std::vector<simd_float3x3>::resize(uint64_t a1, unint64_t a2, long long *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<simd_float3x3>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 48 * a2;
  }
}

uint64_t geom::arap_deformer<float>::deformed_vertices(uint64_t a1)
{
  return a1 + 352;
}

double geom::compute_svd_3x3<float>(int8x16_t *a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6, float *a7)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  int8x16_t v10 = *a1;
  v10.i32[3] = (__int32)a1[1];
  int8x16_t v11 = a1[2];
  int8x16_t v12 = vextq_s8(vextq_s8(a1[1], a1[1], 0xCuLL), v11, 8uLL);
  *(int8x16_t *)__a = v10;
  int8x16_t v25 = v12;
  __int32 v26 = v11.i32[2];
  if (geom::compute_svd((geom *)3, 3, __a, (__CLPK_real *)__u, (__CLPK_real *)&v18, (float *)v20, a7))
  {
    *(void *)&long long v13 = v18;
    DWORD2(v13) = v19;
    *a3 = v13;
    long long v15 = *(_OWORD *)&__u[12];
    *(void *)&long long v14 = *(void *)&__u[24];
    DWORD2(v14) = v23;
    *a2 = *(_OWORD *)__u;
    a2[1] = v15;
    a2[2] = v14;
    *(void *)&long long v13 = *(void *)v20;
    long long v16 = *(_OWORD *)&v20[12];
    *(void *)&long long v14 = *(void *)&v20[24];
    DWORD2(v14) = v21;
    *a4 = *(_OWORD *)v20;
    a4[1] = v16;
    a4[2] = v14;
  }
  return *(double *)&v13;
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2, _DWORD *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t geom::arap_deformer<double>::arap_deformer(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = geom::ddg_evaluator<double>::ddg_evaluator();
  geom::sparse_linear_solver<float>::sparse_linear_solver(v5 + 64, a3, a3);
  *(unsigned char *)(a1 + 320) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = a1 + 336;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 416) = 0;
  geom::ddg_evaluator<float>::set_clamp_cotan_weights(a1, 1);
  return a1;
}

uint64_t geom::arap_deformer<double>::arap_deformer(uint64_t a1, void *a2)
{
  uint64_t v4 = geom::ddg_evaluator<double>::ddg_evaluator();
  uint64_t v5 = (a2[1] - *a2) >> 5;
  geom::sparse_linear_solver<float>::sparse_linear_solver(v4 + 64, v5, v5);
  *(unsigned char *)(a1 + 320) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 0;
  *(void *)(a1 + 328) = a1 + 336;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 416) = 0;
  geom::ddg_evaluator<float>::set_clamp_cotan_weights(a1, 1);
  return a1;
}

uint64_t **geom::arap_deformer<double>::add_constraints(uint64_t **result, void *a2, uint64_t *a3)
{
  unint64_t v3 = result;
  uint64_t v4 = *a3;
  if (a3[1] != *a3)
  {
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      unsigned int v9 = (long long *)(*a2 + 32 * v8);
      long long v10 = v9[1];
      long long v11 = *v9;
      int8x16_t v12 = (_DWORD *)(v4 + v7);
      double result = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(v3 + 41, (unsigned int *)(v4 + v7), (uint64_t)&std::piecewise_construct, &v12);
      *((_OWORD *)result + 3) = v11;
      *((_OWORD *)result + 4) = v10;
      ++v8;
      uint64_t v4 = *a3;
      v7 += 4;
    }
    while (v8 < (a3[1] - *a3) >> 2);
  }
  *((unsigned char *)v3 + 320) = 0;
  return result;
}

uint64_t **geom::arap_deformer<double>::add_constraints(uint64_t **result, long long *a2, uint64_t a3, _DWORD *a4, uint64_t a5)
{
  uint64_t v5 = result;
  if (a5)
  {
    uint64_t v6 = a5;
    do
    {
      long long v9 = a2[1];
      long long v10 = *a2;
      long long v11 = a4;
      double result = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(v5 + 41, a4, (uint64_t)&std::piecewise_construct, &v11);
      *((_OWORD *)result + 3) = v10;
      *((_OWORD *)result + 4) = v9;
      a2 += 2;
      ++a4;
      --v6;
    }
    while (v6);
  }
  *((unsigned char *)v5 + 320) = 0;
  return result;
}

uint64_t **geom::arap_deformer<double>::add_static_constraints(uint64_t a1, uint64_t *a2)
{
  double result = (uint64_t **)geom::bvh<float,(unsigned char)2>::invariant_check();
  uint64_t v5 = *a2;
  if (a2[1] != *a2)
  {
    uint64_t v6 = result;
    uint64_t v7 = 0;
    unint64_t v8 = 0;
    do
    {
      long long v9 = (_DWORD *)(v5 + v7);
      long long v10 = &(*v6)[4 * *(unsigned int *)(v5 + v7)];
      long long v11 = *((_OWORD *)v10 + 1);
      long long v12 = *(_OWORD *)v10;
      long long v13 = v9;
      double result = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), v9, (uint64_t)&std::piecewise_construct, &v13);
      *((_OWORD *)result + 3) = v12;
      *((_OWORD *)result + 4) = v11;
      ++v8;
      uint64_t v5 = *a2;
      v7 += 4;
    }
    while (v8 < (a2[1] - *a2) >> 2);
  }
  *(unsigned char *)(a1 + 320) = 0;
  return result;
}

uint64_t **geom::arap_deformer<double>::add_static_constraints(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  double result = (uint64_t **)geom::bvh<float,(unsigned char)2>::invariant_check(a1);
  if (a3)
  {
    uint64_t v7 = result;
    do
    {
      unint64_t v8 = &(*v7)[4 * *a2];
      long long v9 = *((_OWORD *)v8 + 1);
      long long v10 = *(_OWORD *)v8;
      long long v11 = a2;
      double result = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), a2, (uint64_t)&std::piecewise_construct, &v11);
      *((_OWORD *)result + 3) = v10;
      *((_OWORD *)result + 4) = v9;
      ++a2;
      --a3;
    }
    while (a3);
  }
  *(unsigned char *)(a1 + 320) = 0;
  return result;
}

BOOL geom::arap_deformer<double>::initialize(uint64_t a1)
{
  geom::arap_deformer<double>::reset(a1);
  if (*(void *)(a1 + 400) == *(void *)(a1 + 408))
  {
    unint64_t v2 = geom::ddg_evaluator<float>::vertex_count(a1);
    std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::resize((uint64_t *)(a1 + 400), v2);
    if (geom::ddg_evaluator<float>::vertex_count(a1))
    {
      uint64_t v3 = 0;
      unsigned int v4 = 0;
      do
      {
        geom::ddg_evaluator<double>::compute_laplacian_stencil((uint64_t *)a1, v4, 1, (uint64_t)__p);
        uint64_t v5 = *(void *)(a1 + 400);
        uint64_t v6 = v5 + 48 * v3;
        uint64_t v7 = *(void **)v6;
        if (*(void *)v6)
        {
          *(void *)(v6 + 8) = v7;
          operator delete(v7);
          *(void *)uint64_t v6 = 0;
          *(void *)(v6 + 8) = 0;
          *(void *)(v6 + 16) = 0;
        }
        *(_OWORD *)uint64_t v6 = *(_OWORD *)__p;
        *(void *)(v6 + 16) = v26;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v26 = 0;
        uint64_t v8 = v5 + 48 * v3;
        long long v11 = *(void **)(v8 + 24);
        long long v10 = (void *)(v8 + 24);
        long long v9 = v11;
        if (v11)
        {
          *(void *)(v5 + 48 * v3 + 32) = v9;
          operator delete(v9);
          void *v10 = 0;
          v10[1] = 0;
          v10[2] = 0;
        }
        *(_OWORD *)long long v10 = v27;
        *(void *)(v5 + 48 * v3 + 40) = v28;
        long long v27 = 0uLL;
        uint64_t v28 = 0;
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        uint64_t v3 = ++v4;
      }
      while (geom::ddg_evaluator<float>::vertex_count(a1) > (unint64_t)v4);
    }
  }
  uint64_t v12 = *(void *)(a1 + 400);
  if (*(void *)(a1 + 408) != v12)
  {
    uint64_t v13 = 0;
    unsigned int v14 = 0;
    do
    {
      for (i = *(uint64_t **)(a1 + 336); i; i = (uint64_t *)*i)
      {
        unsigned int v16 = *((_DWORD *)i + 8);
        if (v14 >= v16)
        {
          if (v16 >= v14)
          {
            geom::sparse_linear_solver<double>::add_entry(a1 + 64, v14, v14, 1.0);
            goto LABEL_29;
          }
          ++i;
        }
      }
      float32x4_t v17 = (uint64_t *)(v12 + 48 * v13);
      geom::sparse_linear_solver<double>::add_entry(a1 + 64, v14, v14, -*(double *)v17[3]);
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      if ((unint64_t)(v18 - *v17) >= 5)
      {
        unint64_t v20 = 1;
        do
        {
          int v21 = *(uint64_t **)(a1 + 336);
          for (unsigned int j = *(_DWORD *)(v19 + 4 * v20); v21; v21 = (uint64_t *)*v21)
          {
            unsigned int v23 = *((_DWORD *)v21 + 8);
            if (j >= v23)
            {
              if (v23 >= j) {
                goto LABEL_26;
              }
              ++v21;
            }
          }
          geom::sparse_linear_solver<double>::add_entry(a1 + 64, v14, j, -*(double *)(v17[3] + 8 * v20));
          uint64_t v19 = *v17;
          uint64_t v18 = v17[1];
LABEL_26:
          unint64_t v20 = (v20 + 1);
        }
        while (v20 < (v18 - v19) >> 2);
      }
LABEL_29:
      uint64_t v12 = *(void *)(a1 + 400);
      uint64_t v13 = ++v14;
    }
    while (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 408) - v12) >> 4) > v14);
  }
  BOOL result = geom::sparse_linear_solver<double>::factor((unsigned int *)(a1 + 64), 0);
  *(unsigned char *)(a1 + 320) = 1;
  return result;
}

void geom::arap_deformer<double>::reset(uint64_t a1)
{
  long long v8 = 0u;
  uint64_t v5 = 0;
  long long v7 = 0u;
  v4[1] = 0u;
  v4[0] = 0x3FF0000000000000uLL;
  uint64_t v6 = 0x3FF0000000000000;
  long long v9 = 0x3FF0000000000000uLL;
  geom::sparse_linear_solver<float>::clear_enrties(a1 + 64);
  uint64_t v2 = geom::bvh<float,(unsigned char)2>::invariant_check(a1);
  if (a1 + 352 != v2) {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l((char *)(a1 + 352), *(char **)v2, *(void *)(v2 + 8), (uint64_t)(*(void *)(v2 + 8) - *(void *)v2) >> 5);
  }
  unint64_t v3 = geom::ddg_evaluator<float>::vertex_count(a1);
  std::vector<simd_double3x3>::resize(a1 + 376, v3, v4);
  *(unsigned char *)(a1 + 320) = 0;
}

void geom::arap_deformer<double>::deform(void *a1, unsigned int a2, double a3)
{
  if (a2)
  {
    unsigned int v6 = 0;
    double v7 = 0.0;
    do
    {
      geom::arap_deformer<double>::deform_step((uint64_t)a1);
      if (a3 <= 0.0)
      {
        unsigned int v9 = v6 + 1;
        double v8 = v7;
      }
      else
      {
        double v8 = geom::arap_deformer<double>::energy(a1);
        unsigned int v9 = v6 + 1;
        if (v6 && v9 < a2 && vabdd_f64(v8, v7) / (v8 + a3) < a3) {
          return;
        }
      }
      unsigned int v6 = v9;
      double v7 = v8;
    }
    while (v9 != a2);
  }
}

void geom::arap_deformer<double>::deform_step(uint64_t a1)
{
  uint64_t v5 = (uint64_t *)geom::bvh<float,(unsigned char)2>::invariant_check(a1);
  uint64_t v124 = *(void *)(a1 + 376);
  uint64_t v125 = *(void *)(a1 + 384);
  unint64_t v127 = (v125 - v124) / 96;
  if (v125 != v124)
  {
    uint64_t v6 = 0;
    uint64_t v7 = (v125 - v124) / 96;
    if (v127 <= 1) {
      uint64_t v7 = 1;
    }
    uint64_t v126 = v7;
    float64x2_t v8 = 0uLL;
    do
    {
      float64x2_t v153 = v8;
      float64x2_t v154 = v8;
      float64x2_t v151 = v8;
      float64x2_t v152 = v8;
      float64x2_t v149 = v8;
      float64x2_t v150 = v8;
      uint64_t v9 = *(void *)(a1 + 400);
      long long v10 = (uint64_t *)(v9 + 48 * v6);
      uint64_t v11 = *v10;
      if ((unint64_t)(v10[1] - *v10) >= 5)
      {
        uint64_t v12 = *(void *)(a1 + 352);
        uint64_t v13 = (void *)(v9 + 48 * v6 + 24);
        uint64_t v14 = *v5;
        float64x2_t v15 = 0uLL;
        unsigned int v16 = 2;
        float64x2_t v17 = 0uLL;
        float64x2_t v18 = 0uLL;
        float64x2_t v19 = 0uLL;
        float64x2_t v20 = 0uLL;
        float64x2_t v21 = 0uLL;
        unint64_t v22 = 1;
        do
        {
          unsigned int v23 = (float64x2_t *)(v14 + 32 * v6);
          float64x2_t v25 = *v23;
          float64x2_t v24 = v23[1];
          uint64_t v26 = *(unsigned int *)(v11 + 4 * v22);
          long long v27 = (float64x2_t *)(v14 + 32 * v26);
          float64x2_t v28 = vsubq_f64(v25, *v27);
          float64x2_t v29 = vsubq_f64(v24, v27[1]);
          float32x4_t v30 = (float64x2_t *)(v12 + 32 * v6);
          float32x4_t v31 = (float64x2_t *)(v12 + 32 * v26);
          float64x2_t v32 = *v31;
          float64x2_t v33 = vsubq_f64(v30[1], v31[1]);
          float64x2_t v34 = vsubq_f64(*v30, *v31);
          v32.f64[0] = *(float64_t *)(*v13 + 8 * v22);
          float64x2_t v21 = vaddq_f64(v21, vmulq_f64(vmulq_f64(v29, v34), v32));
          float64x2_t v20 = vaddq_f64(v20, vmulq_n_f64(vmulq_n_f64(v28, v34.f64[0]), v32.f64[0]));
          float64x2_t v19 = vaddq_f64(v19, vmulq_f64(vmulq_laneq_f64(v29, v34, 1), v32));
          float64x2_t v18 = vaddq_f64(v18, vmulq_n_f64(vmulq_laneq_f64(v28, v34, 1), v32.f64[0]));
          float64x2_t v17 = vaddq_f64(v17, vmulq_f64(vmulq_f64(v29, v33), v32));
          float64x2_t v15 = vaddq_f64(v15, vmulq_n_f64(vmulq_n_f64(v28, v33.f64[0]), v32.f64[0]));
          float64x2_t v149 = v20;
          float64x2_t v150 = v21;
          float64x2_t v151 = v18;
          float64x2_t v152 = v19;
          float64x2_t v153 = v15;
          float64x2_t v154 = v17;
          unint64_t v22 = v16;
          uint64_t v11 = *v10;
          ++v16;
        }
        while (v22 < (v10[1] - *v10) >> 2);
      }
      uint64_t v148 = 0;
      long long v147 = 0uLL;
      geom::compute_svd_3x3<double>((uint64_t)&v149, v142, &v147, (uint64_t)v137, v2, v3, v4);
      uint64_t v35 = 0;
      float64x2_t v8 = 0uLL;
      float64x2_t v135 = 0u;
      int8x16_t v136 = 0u;
      float64x2_t v133 = 0u;
      int8x16_t v134 = 0u;
      float64x2_t v131 = 0u;
      float64x2_t v132 = 0u;
      float64x2_t v37 = v140;
      float64x2_t v36 = v141;
      int8x16_t v38 = (int8x16_t)vzip1q_s64(v137[0], v138);
      int8x16_t v39 = (int8x16_t)vzip2q_s64(v137[0], v138);
      int8x16_t v40 = (int8x16_t)vzip1q_s64(v137[1], v139);
      int64x2_t v42 = v145;
      long long v41 = v146;
      int64x2_t v43 = vzip1q_s64(v142[0], v143);
      int64x2_t v44 = vzip2q_s64(v142[0], v143);
      int64x2_t v45 = vzip1q_s64(v142[1], v144);
      int64x2_t v46 = vdupq_laneq_s64(v145, 1);
      v130[0] = v43;
      v130[1] = v145;
      v130[2] = v44;
      v130[3] = v46;
      *(void *)&float64_t v47 = vextq_s8(v38, v38, 8uLL).u64[0];
      *(void *)&float64_t v48 = vextq_s8(v39, v39, 8uLL).u64[0];
      float64x2_t v49 = (float64x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL);
      unint64_t v50 = vextq_s8(v40, v40, 8uLL).u64[0];
      v130[4] = v45;
      v130[5] = v146;
      do
      {
        float64x2_t v52 = (float64x2_t)v130[v35];
        float64x2_t v51 = (float64x2_t)v130[v35 + 1];
        *(void *)&v53.f64[0] = v38.i64[0];
        v53.f64[1] = v47;
        *(void *)&v54.f64[0] = v39.i64[0];
        v54.f64[1] = v48;
        float64x2_t v55 = vmlaq_laneq_f64(vmulq_n_f64(v53, v52.f64[0]), v54, v52, 1);
        float64x2_t v56 = vmlaq_laneq_f64(vmulq_f64(v37, v52), v49, v52, 1);
        *(void *)&v52.f64[0] = v40.i64[0];
        *(void *)&v52.f64[1] = v50;
        v57 = (float64x2_t *)((char *)&v131 + v35 * 16);
        float64x2_t *v57 = vmlaq_n_f64(v55, v52, v51.f64[0]);
        v57[1] = vmlaq_f64(v56, v51, v36);
        v35 += 2;
      }
      while (v35 != 6);
      *(void *)&v58.f64[0] = v134.i64[0];
      *(void *)&v59.f64[0] = v136.i64[0];
      v58.f64[1] = v133.f64[0];
      v59.f64[1] = v135.f64[0];
      if (vmulq_f64(v132, vmlaq_laneq_f64(vmulq_f64(v135, vnegq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v133, 1))), v133, v135, 1)).f64[0]+ vaddvq_f64(vmulq_f64(v131, vmlaq_f64(vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v135, v136, 8uLL), vnegq_f64(v58)), v59, (float64x2_t)vextq_s8((int8x16_t)v133, v134, 8uLL)))) < 0.0)
      {
        uint64_t v60 = 0;
        v128[0] = v43;
        v128[1] = v42;
        v128[2] = v44;
        v128[3] = v46;
        v128[4] = v45;
        v128[5] = v41;
        do
        {
          float64x2_t v62 = (float64x2_t)v128[v60];
          float64x2_t v61 = (float64x2_t)v128[v60 + 1];
          float64x2_t v63 = vmlaq_laneq_f64(vmulq_f64(v62, (float64x2_t)0), (float64x2_t)0, v62, 1);
          float64x2_t v64 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)xmmword_236F14150, v62.f64[0]), (float64x2_t)xmmword_236F14160, v62, 1), (float64x2_t)0, v61.f64[0]);
          __asm { FMOV            V18.2D, #-1.0 }
          float32x4_t v70 = (float64x2_t *)&v128[v60 + 6];
          *float32x4_t v70 = v64;
          v70[1] = vmlaq_f64(v63, _Q18, v61);
          v60 += 2;
        }
        while (v60 != 6);
        for (uint64_t i = 0; i != 6; i += 2)
        {
          float64x2_t v73 = (float64x2_t)v128[i + 6];
          float64x2_t v72 = (float64x2_t)v128[i + 7];
          *(void *)&v74.f64[0] = v38.i64[0];
          v74.f64[1] = v47;
          *(void *)&v75.f64[0] = v39.i64[0];
          v75.f64[1] = v48;
          float64x2_t v76 = vmlaq_laneq_f64(vmulq_n_f64(v74, v73.f64[0]), v75, v73, 1);
          float64x2_t v77 = vmlaq_laneq_f64(vmulq_f64(v37, v73), v49, v73, 1);
          *(void *)&v73.f64[0] = v40.i64[0];
          *(void *)&v73.f64[1] = v50;
          uint64_t v78 = (float64x2_t *)&v129[i];
          *uint64_t v78 = vmlaq_n_f64(v76, v73, v72.f64[0]);
          v78[1] = vmlaq_f64(v77, v72, v36);
        }
        float64x2_t v133 = (float64x2_t)v129[2];
        int8x16_t v134 = (int8x16_t)v129[3];
        float64x2_t v135 = (float64x2_t)v129[4];
        int8x16_t v136 = (int8x16_t)v129[5];
        float64x2_t v131 = (float64x2_t)v129[0];
        float64x2_t v132 = (float64x2_t)v129[1];
      }
      uint64_t v79 = *(void *)(a1 + 376) + 96 * v6;
      *(float64x2_t *)(v79 + 32) = v133;
      *(int8x16_t *)(v79 + 48) = v134;
      *(float64x2_t *)(v79 + 64) = v135;
      *(int8x16_t *)(v79 + 80) = v136;
      *(float64x2_t *)uint64_t v79 = v131;
      *(float64x2_t *)(v79 + 16) = v132;
      ++v6;
    }
    while (v6 != v126);
  }
  v153.f64[0] = 0.0;
  float64x2_t v151 = 0u;
  float64x2_t v152 = 0u;
  float64x2_t v149 = 0u;
  float64x2_t v150 = 0u;
  v142[0].i64[0] = 0;
  std::vector<double>::resize((uint64_t)&v149, v127, v142);
  v142[0].i64[0] = 0;
  std::vector<double>::resize((uint64_t)&v150.f64[1], v127, v142);
  v142[0].i64[0] = 0;
  std::vector<double>::resize((uint64_t)&v152, v127, v142);
  v137[0].i32[0] = 0;
  if (v125 == v124)
  {
    v121 = (unsigned int *)(a1 + 64);
    geom::sparse_linear_solver<double>::solve(v121, (uint64_t)&v149);
    geom::sparse_linear_solver<double>::solve(v121, (uint64_t)&v150.f64[1]);
    geom::sparse_linear_solver<double>::solve(v121, (uint64_t)&v152);
    goto LABEL_43;
  }
  uint64_t v80 = 0;
  unsigned __int32 v81 = 0;
  do
  {
    for (unsigned int j = *(uint64_t **)(a1 + 336); j; unsigned int j = (uint64_t *)*j)
    {
      unsigned __int32 v83 = *((_DWORD *)j + 8);
      if (v81 >= v83)
      {
        if (v83 >= v81)
        {
          v142[0].i64[0] = (uint64_t)v137;
          int32x4_t v113 = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v137, (uint64_t)&std::piecewise_construct, v142);
          *(void *)(*(void *)&v149.f64[0] + 8 * v137[0].u32[0]) = v113[6];
          v142[0].i64[0] = (uint64_t)v137;
          int32x4_t v114 = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v137, (uint64_t)&std::piecewise_construct, v142);
          *(void *)(*(void *)&v150.f64[1] + 8 * v137[0].u32[0]) = v114[7];
          v142[0].i64[0] = (uint64_t)v137;
          int32x4_t v115 = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v137, (uint64_t)&std::piecewise_construct, v142);
          unsigned __int32 v81 = v137[0].i32[0];
          *(void *)(*(void *)&v152.f64[0] + 8 * v137[0].u32[0]) = v115[8];
          goto LABEL_37;
        }
        ++j;
      }
    }
    uint64_t v84 = *(void *)(a1 + 400);
    __int32 v85 = (uint64_t *)(v84 + 48 * v80);
    uint64_t v86 = *v85;
    uint64_t v87 = v85[1];
    if ((unint64_t)(v87 - *v85) < 5) {
      goto LABEL_37;
    }
    __int32 v88 = (void *)(v84 + 48 * v80 + 24);
    unint64_t v89 = 1;
    do
    {
      uint64_t v90 = *(uint64_t **)(a1 + 336);
      if (!v90) {
        goto LABEL_34;
      }
      unint64_t v91 = (unsigned int *)(v86 + 4 * v89);
      unsigned int v92 = *v91;
      while (1)
      {
        unsigned int v93 = *((_DWORD *)v90 + 8);
        if (v92 >= v93) {
          break;
        }
LABEL_31:
        uint64_t v90 = (uint64_t *)*v90;
        if (!v90) {
          goto LABEL_34;
        }
      }
      if (v93 < v92)
      {
        ++v90;
        goto LABEL_31;
      }
      double v94 = *(double *)(*v88 + 8 * v89);
      v142[0].i64[0] = v86 + 4 * v89;
      float32x4_t v95 = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), v91, (uint64_t)&std::piecewise_construct, v142);
      *(double *)(*(void *)&v149.f64[0] + 8 * v137[0].u32[0]) = *(double *)(*(void *)&v149.f64[0]
                                                                              + 8 * v137[0].u32[0])
                                                                  + v94 * *((double *)v95 + 6);
      double v96 = *(double *)(*v88 + 8 * v89);
      v142[0].i64[0] = *v85 + 4 * v89;
      float32x4_t v97 = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v142[0].i64[0], (uint64_t)&std::piecewise_construct, v142);
      *(double *)(*(void *)&v150.f64[1] + 8 * v137[0].u32[0]) = *(double *)(*(void *)&v150.f64[1]
                                                                              + 8 * v137[0].u32[0])
                                                                  + v96 * *((double *)v97 + 7);
      double v98 = *(double *)(*v88 + 8 * v89);
      v142[0].i64[0] = *v85 + 4 * v89;
      int8x16_t v99 = _ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_((uint64_t **)(a1 + 328), (unsigned int *)v142[0].i64[0], (uint64_t)&std::piecewise_construct, v142);
      unsigned __int32 v81 = v137[0].i32[0];
      *(double *)(*(void *)&v152.f64[0] + 8 * v137[0].u32[0]) = *(double *)(*(void *)&v152.f64[0]
                                                                              + 8 * v137[0].u32[0])
                                                                  + v98 * *((double *)v99 + 8);
      uint64_t v86 = *v85;
      uint64_t v87 = v85[1];
LABEL_34:
      int8x16_t v100 = (float64x2_t *)(*v5 + 32 * v81);
      float64x2_t v101 = *v100;
      float64x2_t v102 = v100[1];
      uint64_t v103 = *(unsigned int *)(v86 + 4 * v89);
      int32x4_t v104 = (float64x2_t *)(*v5 + 32 * v103);
      float64x2_t v105 = vsubq_f64(v102, v104[1]);
      float64x2_t v106 = vsubq_f64(v101, *v104);
      uint64_t v107 = *(void *)(a1 + 376);
      int32x4_t v108 = (float64x2_t *)(v107 + 96 * v81);
      long long v109 = (float64x2_t *)(v107 + 96 * v103);
      float64x2_t v110 = *v109;
      v110.f64[0] = *(double *)(*v88 + 8 * v89) * 0.5;
      float64x2_t v111 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(vaddq_f64(*v108, *v109), v106.f64[0]), vaddq_f64(v108[2], v109[2]), v106, 1), vaddq_f64(v108[4], v109[4]), v105.f64[0]);
      v106.f64[0] = vmulq_f64(vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v106, vaddq_f64(v108[1], v109[1])), vaddq_f64(v108[3], v109[3]), v106, 1), v105, vaddq_f64(v108[5], v109[5])), v110).f64[0];
      float64x2_t v112 = vmulq_n_f64(v111, v110.f64[0]);
      *(double *)(*(void *)&v149.f64[0] + 8 * v81) = *(double *)(*(void *)&v149.f64[0] + 8 * v81) + v112.f64[0];
      *(double *)(*(void *)&v150.f64[1] + 8 * v81) = *(double *)(*(void *)&v150.f64[1] + 8 * v81) + v112.f64[1];
      *(double *)(*(void *)&v152.f64[0] + 8 * v81) = v106.f64[0] + *(double *)(*(void *)&v152.f64[0] + 8 * v81);
      unint64_t v89 = (v89 + 1);
    }
    while (v89 < (v87 - v86) >> 2);
LABEL_37:
    v137[0].i32[0] = ++v81;
    uint64_t v80 = v81;
  }
  while (v127 > v81);
  geom::sparse_linear_solver<double>::solve((unsigned int *)(a1 + 64), (uint64_t)&v149);
  geom::sparse_linear_solver<double>::solve((unsigned int *)(a1 + 64), (uint64_t)&v150.f64[1]);
  geom::sparse_linear_solver<double>::solve((unsigned int *)(a1 + 64), (uint64_t)&v152);
  uint64_t v117 = 0;
  uint64_t v118 = (v125 - v124) / 96;
  if (v127 <= 1) {
    uint64_t v118 = 1;
  }
  do
  {
    *(void *)&long long v119 = *(void *)(*(void *)&v149.f64[0] + 8 * v117);
    *((void *)&v119 + 1) = *(void *)(*(void *)&v150.f64[1] + 8 * v117);
    *(void *)&long long v116 = *(void *)(*(void *)&v152.f64[0] + 8 * v117);
    v120 = (_OWORD *)(*(void *)(a1 + 352) + 32 * v117);
    _OWORD *v120 = v119;
    v120[1] = v116;
    ++v117;
  }
  while (v118 != v117);
LABEL_43:
  for (uint64_t k = 0; k != -9; k -= 3)
  {
    float64_t v123 = v152.f64[k];
    if (v123 != 0.0)
    {
      v152.f64[k + 1] = v123;
      operator delete(*(void **)&v123);
    }
  }
}

double geom::arap_deformer<double>::energy(void *a1)
{
  uint64_t v2 = (uint64_t *)geom::bvh<float,(unsigned char)2>::invariant_check();
  uint64_t v6 = *v2;
  uint64_t v7 = v2[1];
  uint64_t v8 = v7 - *v2;
  if (v7 == *v2) {
    return 0.0;
  }
  uint64_t v9 = 0;
  unint64_t v10 = v8 >> 5;
  uint64_t v11 = a1[50];
  if (v10 <= 1) {
    unint64_t v10 = 1;
  }
  double result = 0.0;
  do
  {
    uint64_t v13 = *(void *)(v11 + 48 * v9);
    uint64_t v14 = *(void *)(v11 + 48 * v9 + 8) - v13;
    if ((unint64_t)v14 >= 5)
    {
      unint64_t v15 = v14 >> 2;
      unsigned int v16 = (float64x2_t *)(v6 + 32 * v9);
      float64x2_t v18 = *v16;
      float64x2_t v17 = v16[1];
      uint64_t v19 = a1[44];
      float64x2_t v20 = (float64x2_t *)(v19 + 32 * v9);
      float64x2_t v22 = *v20;
      float64x2_t v21 = v20[1];
      unsigned int v23 = (int8x16_t *)(a1[47] + 96 * v9);
      unint64_t v24 = vextq_s8(*v23, *v23, 8uLL).u64[0];
      unint64_t v25 = vextq_s8(v23[2], v23[2], 8uLL).u64[0];
      unint64_t v26 = vextq_s8(v23[4], v23[4], 8uLL).u64[0];
      unsigned int v27 = 2;
      uint64_t v28 = 1;
      do
      {
        uint64_t v29 = *(unsigned int *)(v13 + 4 * v28);
        float32x4_t v30 = (float64x2_t *)(v6 + 32 * v29);
        float64x2_t v31 = vsubq_f64(v17, v30[1]);
        float64x2_t v32 = (float64x2_t *)(v19 + 32 * v29);
        float64x2_t v33 = vsubq_f64(v18, *v30);
        *(void *)&v34.f64[0] = v23->i64[0];
        *(void *)&v34.f64[1] = v24;
        *(void *)&v3.f64[0] = v23[1].i64[0];
        *(void *)&v35.f64[0] = v23[2].i64[0];
        *(void *)&v35.f64[1] = v25;
        float64x2_t v36 = vmlaq_laneq_f64(vmulq_n_f64(v34, v33.f64[0]), v35, v33, 1);
        *(void *)&v4.f64[0] = v23[3].i64[0];
        float64x2_t v37 = vmlaq_laneq_f64(vmulq_f64(v33, v3), v4, v33, 1);
        *(void *)&v33.f64[0] = v23[4].i64[0];
        *(void *)&v33.f64[1] = v26;
        *(void *)&v5.f64[0] = v23[5].i64[0];
        float64x2_t v38 = vsubq_f64(vsubq_f64(v22, *v32), vmlaq_n_f64(v36, v33, v31.f64[0]));
        float64x2_t v39 = vsubq_f64(vsubq_f64(v21, v32[1]), vmlaq_f64(v37, v31, v5));
        double result = result
               + *(double *)(*(void *)(v11 + 48 * v9 + 24) + 8 * v28)
               * (vmulq_f64(v39, v39).f64[0] + vaddvq_f64(vmulq_f64(v38, v38)));
        uint64_t v28 = v27;
      }
      while (v15 > v27++);
    }
    ++v9;
  }
  while (v9 != v10);
  return result;
}

void std::vector<simd_double3x3>::resize(uint64_t a1, unint64_t a2, _OWORD *a3)
{
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5);
  BOOL v4 = a2 >= v3;
  unint64_t v5 = a2 - v3;
  if (v5 != 0 && v4)
  {
    std::vector<simd_double3x3>::__append((void **)a1, v5, a3);
  }
  else if (!v4)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 96 * a2;
  }
}

__n128 geom::compute_svd_3x3<double>(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, double *a7)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  __CLPK_doublereal v10 = *(double *)(a1 + 16);
  *(_OWORD *)__a = *(_OWORD *)a1;
  long long v36 = *(_OWORD *)(a1 + 32);
  uint64_t v11 = *(void *)(a1 + 48);
  __a[2] = v10;
  uint64_t v37 = v11;
  uint64_t v12 = *(void *)(a1 + 80);
  long long v38 = *(_OWORD *)(a1 + 64);
  uint64_t v39 = v12;
  if (geom::compute_svd((geom *)3, 3, __a, (__CLPK_doublereal *)&__u, (__CLPK_doublereal *)&__s, v23.n128_f64, a7))
  {
    *(void *)&long long v14 = v22;
    *a3 = __s;
    a3[1] = v14;
    *(void *)&long long v14 = v30;
    long long v17 = v31;
    *(void *)&long long v15 = v32;
    long long v18 = v33;
    *(void *)&long long v16 = v34;
    *a2 = __u;
    a2[1] = v14;
    a2[2] = v17;
    a2[3] = v15;
    __n128 result = v23;
    *(void *)&long long v14 = v24;
    long long v19 = v25;
    a2[4] = v18;
    a2[5] = v16;
    *(void *)&long long v15 = v26;
    long long v20 = v27;
    *(void *)&long long v16 = v28;
    *(__n128 *)a4 = result;
    *(_OWORD *)(a4 + 16) = v14;
    *(_OWORD *)(a4 + 32) = v19;
    *(_OWORD *)(a4 + 48) = v15;
    *(_OWORD *)(a4 + 64) = v20;
    *(_OWORD *)(a4 + 80) = v16;
  }
  return result;
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2, void *a3)
{
  unint64_t v3 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v3)
  {
    if (a2 < v3) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((void **)a1, a2 - v3, a3);
  }
}

uint64_t **_ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    uint64_t v11 = operator new(0x40uLL);
    v11[8] = **a4;
    *((_OWORD *)v11 + 3) = 0u;
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

uint64_t *_ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_(uint64_t **a1, uint64_t a2, uint64_t **a3, uint64_t *a4)
{
  *a4 = 0;
  a4[1] = 0;
  a4[2] = a2;
  *a3 = a4;
  unint64_t v5 = (uint64_t *)**a1;
  if (v5)
  {
    *a1 = v5;
    a4 = *a3;
  }
  __n128 result = std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], a4);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void std::__throw_bad_array_new_length[abi:nn180100]()
{
}

uint64_t *std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  *((unsigned char *)a2 + 24) = a2 == result;
  if (a2 != result)
  {
    do
    {
      uint64_t v2 = (uint64_t *)a2[2];
      if (*((unsigned char *)v2 + 24)) {
        return result;
      }
      unint64_t v3 = (uint64_t *)v2[2];
      BOOL v4 = (uint64_t *)*v3;
      if ((uint64_t *)*v3 == v2)
      {
        uint64_t v7 = v3[1];
        if (!v7 || (v8 = *(unsigned __int8 *)(v7 + 24), unint64_t v5 = (unsigned char *)(v7 + 24), v8))
        {
          if ((uint64_t *)*v2 == a2)
          {
            uint64_t v9 = (uint64_t **)a2[2];
          }
          else
          {
            uint64_t v9 = (uint64_t **)v2[1];
            unsigned int v10 = *v9;
            v2[1] = (uint64_t)*v9;
            if (v10)
            {
              v10[2] = (uint64_t)v2;
              unint64_t v3 = (uint64_t *)v2[2];
            }
            v9[2] = v3;
            *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = v9;
            *uint64_t v9 = v2;
            v2[2] = (uint64_t)v9;
            unint64_t v3 = v9[2];
            uint64_t v2 = (uint64_t *)*v3;
          }
          *((unsigned char *)v9 + 24) = 1;
          *((unsigned char *)v3 + 24) = 0;
          uint64_t v13 = v2[1];
          *unint64_t v3 = v13;
          if (v13) {
            *(void *)(v13 + 16) = v3;
          }
          v2[2] = v3[2];
          *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
          v2[1] = (uint64_t)v3;
          goto LABEL_27;
        }
      }
      else if (!v4 || (v6 = *((unsigned __int8 *)v4 + 24), unint64_t v5 = v4 + 3, v6))
      {
        if ((uint64_t *)*v2 == a2)
        {
          uint64_t v11 = a2[1];
          *uint64_t v2 = v11;
          if (v11)
          {
            *(void *)(v11 + 16) = v2;
            unint64_t v3 = (uint64_t *)v2[2];
          }
          a2[2] = (uint64_t)v3;
          *(void *)(v2[2] + 8 * (*(void *)v2[2] != (void)v2)) = a2;
          a2[1] = (uint64_t)v2;
          v2[2] = (uint64_t)a2;
          unint64_t v3 = (uint64_t *)a2[2];
        }
        else
        {
          a2 = (uint64_t *)a2[2];
        }
        *((unsigned char *)a2 + 24) = 1;
        *((unsigned char *)v3 + 24) = 0;
        uint64_t v2 = (uint64_t *)v3[1];
        uint64_t v12 = *v2;
        v3[1] = *v2;
        if (v12) {
          *(void *)(v12 + 16) = v3;
        }
        v2[2] = v3[2];
        *(void *)(v3[2] + 8 * (*(void *)v3[2] != (void)v3)) = v2;
        *uint64_t v2 = (uint64_t)v3;
LABEL_27:
        v3[2] = (uint64_t)v2;
        return result;
      }
      *((unsigned char *)v2 + 24) = 1;
      a2 = v3;
      *((unsigned char *)v3 + 24) = v3 == result;
      *unint64_t v5 = 1;
    }
    while (v3 != result);
  }
  return result;
}

void _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(uint64_t a1, void *a2)
{
  if (a2)
  {
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(a1, *a2);
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE(a1, a2[1]);
    operator delete(a2);
  }
}

void std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 48 * ((48 * a2 - 48) / 0x30) + 48;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x555555555555555) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v11 = 0x555555555555555;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    long long v15 = v12;
    long long v16 = &v12[48 * v8];
    long long v18 = &v12[48 * v11];
    size_t v14 = 48 * ((48 * a2 - 48) / 0x30) + 48;
    bzero(v16, v14);
    long long v17 = &v16[v14];
    std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::__swap_out_circular_buffer(a1, &v15);
    std::__split_buffer<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil> &>::~__split_buffer(&v15);
  }
}

void std::vector<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>,std::reverse_iterator<geom::ddg_evaluator<float>::stencil*>,std::reverse_iterator<geom::ddg_evaluator<float>::stencil*>,std::reverse_iterator<geom::ddg_evaluator<float>::stencil*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(48 * a2);
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>,std::reverse_iterator<geom::ddg_evaluator<float>::stencil*>,std::reverse_iterator<geom::ddg_evaluator<float>::stencil*>,std::reverse_iterator<geom::ddg_evaluator<float>::stencil*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      uint64_t v9 = a3 + v7;
      *(void *)(v8 - 48) = 0;
      *(void *)(v8 - 40) = 0;
      *(void *)(v8 - 32) = 0;
      *(_OWORD *)(v8 - 48) = *(_OWORD *)(a3 + v7 - 48);
      *(void *)(v8 - 32) = *(void *)(a3 + v7 - 32);
      *(void *)(v9 - 48) = 0;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v8 - 24) = 0;
      *(void *)(v8 - 16) = 0;
      *(void *)(v8 - 8) = 0;
      __n128 result = *(__n128 *)(a3 + v7 - 24);
      *(__n128 *)(v8 - 24) = result;
      *(void *)(v8 - 8) = *(void *)(a3 + v7 - 8);
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      v7 -= 48;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

void **std::__split_buffer<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil> &>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<geom::ddg_evaluator<float>::stencil,std::allocator<geom::ddg_evaluator<float>::stencil> &>::clear[abi:nn180100](void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 48;
    std::allocator<geom::ddg_evaluator<float>::stencil>::destroy[abi:nn180100](v4, i - 48);
  }
}

void std::allocator<geom::ddg_evaluator<float>::stencil>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a2 + 24);
  if (v3)
  {
    *(void *)(a2 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
  }
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 60) {
      abort();
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(v7, v11);
    size_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  size_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 4;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  long long v16 = &__src[16 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(void *a1, unint64_t a2)
{
  if (a2 >> 60) {
    abort();
  }
  __n128 result = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[16 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(16 * a2);
}

void std::vector<simd_float3x3>::__append(void **a1, unint64_t a2, long long *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(_OWORD **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)v9) >> 4) >= a2)
  {
    if (a2)
    {
      unint64_t v15 = &v9[3 * a2];
      uint64_t v16 = 48 * a2;
      do
      {
        long long v17 = *a3;
        long long v18 = a3[2];
        v9[1] = a3[1];
        v9[2] = v18;
        *uint64_t v9 = v17;
        v9 += 3;
        v16 -= 48;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (unsigned char *)*a1) >> 4);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0x555555555555555) {
      abort();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 4);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      size_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>(v6, v13);
    }
    else {
      size_t v14 = 0;
    }
    uint64_t v19 = &v14[48 * v10];
    long long v20 = &v19[48 * a2];
    uint64_t v21 = 48 * a2;
    uint64_t v22 = v19;
    do
    {
      long long v23 = *a3;
      long long v24 = a3[2];
      *((_OWORD *)v22 + 1) = a3[1];
      *((_OWORD *)v22 + 2) = v24;
      *(_OWORD *)uint64_t v22 = v23;
      v22 += 48;
      v21 -= 48;
    }
    while (v21);
    long long v25 = &v14[48 * v13];
    long long v27 = (char *)*a1;
    uint64_t v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        long long v28 = *((_OWORD *)v26 - 3);
        long long v29 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v19 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v19 - 1) = v29;
        *((_OWORD *)v19 - 3) = v28;
        v19 -= 48;
        v26 -= 48;
      }
      while (v26 != v27);
      uint64_t v26 = (char *)*a1;
    }
    *a1 = v19;
    a1[1] = v20;
    a1[2] = v25;
    if (v26)
    {
      operator delete(v26);
    }
  }
}

void std::vector<float>::__append(void **a1, unint64_t a2, _DWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(_DWORD **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 2)
  {
    if (a2)
    {
      uint64_t v16 = 4 * a2;
      long long v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 4;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 2);
    if (v11 >> 62) {
      abort();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v6, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    long long v18 = &v15[4 * v12];
    uint64_t v19 = &v18[4 * a2];
    uint64_t v20 = 4 * a2;
    uint64_t v21 = v18;
    do
    {
      *(_DWORD *)uint64_t v21 = *a3;
      v21 += 4;
      v20 -= 4;
    }
    while (v20);
    uint64_t v22 = &v15[4 * v14];
    long long v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 4)
    {
      int v25 = *((_DWORD *)i - 1);
      *((_DWORD *)v18 - 1) = v25;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 62) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(4 * a2);
}

uint64_t **_ZNSt3__16__treeINS_12__value_typeIjDv3_dEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE25__emplace_unique_key_argsIjJRKNS_21piecewise_construct_tENS_5tupleIJRKjEEENSF_IJEEEEEENS_4pairINS_15__tree_iteratorIS3_PNS_11__tree_nodeIS3_PvEElEEbEERKT_DpOT0_(uint64_t **a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  uint64_t v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    unsigned int v8 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v9 = (uint64_t **)v6;
        unsigned int v10 = *((_DWORD *)v6 + 8);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        uint64_t v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        uint64_t v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v9 = a1 + 1;
LABEL_10:
    unint64_t v11 = operator new(0x50uLL);
    v11[8] = **a4;
    *((void *)v11 + 6) = 0;
    *((void *)v11 + 7) = 0;
    *((_OWORD *)v11 + 4) = 0u;
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_(a1, (uint64_t)v9, v7, (uint64_t *)v11);
    return (uint64_t **)v11;
  }
  return v9;
}

char *_ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 5)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 59) {
      abort();
    }
    uint64_t v10 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      long long v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 5;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[32 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    long long v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

char *_ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(void *a1, unint64_t a2)
{
  if (a2 >> 59) {
    abort();
  }
  __n128 result = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[32 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(uint64_t a1, unint64_t a2)
{
  if (a2 >> 59) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(32 * a2);
}

void std::vector<simd_double3x3>::__append(void **a1, unint64_t a2, _OWORD *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(_OWORD **)(v6 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (unsigned char *)v9) >> 5) >= a2)
  {
    if (a2)
    {
      unint64_t v15 = &v9[6 * a2];
      uint64_t v16 = 96 * a2;
      do
      {
        long long v17 = a3[1];
        *uint64_t v9 = *a3;
        v9[1] = v17;
        long long v18 = a3[2];
        long long v19 = a3[3];
        long long v20 = a3[5];
        v9[4] = a3[4];
        v9[5] = v20;
        v9[2] = v18;
        v9[3] = v19;
        v9 += 6;
        v16 -= 96;
      }
      while (v16);
      uint64_t v9 = v15;
    }
    a1[1] = v9;
  }
  else
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (unsigned char *)*a1) >> 5);
    unint64_t v11 = v10 + a2;
    if (v10 + a2 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (unsigned char *)*a1) >> 5);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0x155555555555555) {
      unint64_t v13 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(v6, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v21 = &v14[96 * v10];
    uint64_t v22 = &v21[96 * a2];
    uint64_t v23 = 96 * a2;
    long long v24 = v21;
    do
    {
      long long v25 = a3[1];
      *(_OWORD *)long long v24 = *a3;
      *((_OWORD *)v24 + 1) = v25;
      long long v26 = a3[2];
      long long v27 = a3[3];
      long long v28 = a3[5];
      *((_OWORD *)v24 + 4) = a3[4];
      *((_OWORD *)v24 + 5) = v28;
      *((_OWORD *)v24 + 2) = v26;
      *((_OWORD *)v24 + 3) = v27;
      v24 += 96;
      v23 -= 96;
    }
    while (v23);
    long long v29 = &v14[96 * v13];
    long long v31 = (char *)*a1;
    uint64_t v30 = (char *)a1[1];
    if (v30 != *a1)
    {
      do
      {
        long long v32 = *((_OWORD *)v30 - 5);
        *((_OWORD *)v21 - 6) = *((_OWORD *)v30 - 6);
        *((_OWORD *)v21 - 5) = v32;
        long long v33 = *((_OWORD *)v30 - 4);
        long long v34 = *((_OWORD *)v30 - 3);
        long long v35 = *((_OWORD *)v30 - 1);
        *((_OWORD *)v21 - 2) = *((_OWORD *)v30 - 2);
        *((_OWORD *)v21 - 1) = v35;
        *((_OWORD *)v21 - 4) = v33;
        *((_OWORD *)v21 - 3) = v34;
        v21 -= 96;
        v30 -= 96;
      }
      while (v30 != v31);
      uint64_t v30 = (char *)*a1;
    }
    *a1 = v21;
    a1[1] = v22;
    a1[2] = v29;
    if (v30)
    {
      operator delete(v30);
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(96 * a2);
}

void std::vector<double>::__append(void **a1, unint64_t a2, void *a3)
{
  uint64_t v8 = a1[2];
  uint64_t v6 = (uint64_t)(a1 + 2);
  uint64_t v7 = v8;
  uint64_t v9 = *(void **)(v6 - 8);
  if (a2 <= (v8 - (unsigned char *)v9) >> 3)
  {
    if (a2)
    {
      uint64_t v16 = 8 * a2;
      long long v17 = &v9[a2];
      do
      {
        *v9++ = *a3;
        v16 -= 8;
      }
      while (v16);
      uint64_t v9 = v17;
    }
    a1[1] = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (unsigned char *)*a1;
    unint64_t v11 = a2 + (v10 >> 3);
    if (v11 >> 61) {
      abort();
    }
    uint64_t v12 = v10 >> 3;
    uint64_t v13 = v7 - (unsigned char *)*a1;
    if (v13 >> 2 > v11) {
      unint64_t v11 = v13 >> 2;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v14 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v6, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    long long v18 = &v15[8 * v12];
    long long v19 = &v18[8 * a2];
    uint64_t v20 = 8 * a2;
    uint64_t v21 = v18;
    do
    {
      *(void *)uint64_t v21 = *a3;
      v21 += 8;
      v20 -= 8;
    }
    while (v20);
    uint64_t v22 = &v15[8 * v14];
    uint64_t v23 = (char *)*a1;
    for (uint64_t i = (char *)a1[1]; i != v23; i -= 8)
    {
      uint64_t v25 = *((void *)i - 1);
      *((void *)v18 - 1) = v25;
      v18 -= 8;
    }
    *a1 = v18;
    a1[1] = v19;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(8 * a2);
}

void *geom::acd<float>::acd(void *result)
{
  *__n128 result = 0;
  return result;
}

uint64_t *geom::acd<float>::~acd(uint64_t *a1)
{
  return a1;
}

void *geom::acd<float>::acd(void *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *a2 = 0;
  *__n128 result = v2;
  return result;
}

uint64_t *geom::acd<float>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  std::unique_ptr<geom::acd<float>::impl,std::default_delete<geom::acd<float>::impl>>::reset[abi:nn180100](a1, v3);
  return a1;
}

void geom::acd<float>::init()
{
}

{
  operator new();
}

void geom::acd<float>::split_clusters_automatically(void **a1, unsigned int *a2)
{
}

uint64_t geom::acd<float>::merge_clusters_automatically(uint64_t *a1, uint64_t a2)
{
  return geom::acd<float>::impl::merge_clusters_automatically(*a1, a2);
}

void geom::acd<float>::split_cluster_with_plane(float32x4_t **a1, unsigned int a2, float32x4_t *a3)
{
  uint64_t v3 = *a1;
  float32x4_t v4 = a3[1];
  v5[0] = *a3;
  v5[1] = v4;
  geom::acd<float>::impl::split_cluster_with_plane(v3, a2, v5);
}

uint64_t *geom::acd<float>::merge_clusters(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  return geom::acd<float>::impl::merge_clusters(*a1, a2, a3);
}

uint64_t geom::acd<float>::cluster_count(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 136);
}

uint64_t geom::acd<float>::impl::cluster_count(uint64_t a1)
{
  return *(void *)(a1 + 136);
}

void geom::acd<float>::cluster_indices(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(_DWORD **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  float32x4_t v4 = *(uint64_t **)(v2 + 128);
  if (v4)
  {
    uint64_t v6 = (void *)(a2 + 16);
    do
    {
      if ((unint64_t)v3 >= *v6)
      {
        uint64_t v8 = *(_DWORD **)a2;
        uint64_t v9 = ((uint64_t)v3 - *(void *)a2) >> 2;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62) {
          abort();
        }
        uint64_t v11 = *v6 - (void)v8;
        if (v11 >> 1 > v10) {
          unint64_t v10 = v11 >> 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v6, v12);
          uint64_t v8 = *(_DWORD **)a2;
          uint64_t v3 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          uint64_t v13 = 0;
        }
        unint64_t v14 = &v13[4 * v9];
        *(_DWORD *)unint64_t v14 = *((_DWORD *)v4 + 4);
        uint64_t v7 = v14 + 4;
        while (v3 != v8)
        {
          int v15 = *--v3;
          *((_DWORD *)v14 - 1) = v15;
          v14 -= 4;
        }
        *(void *)a2 = v14;
        *(void *)(a2 + 8) = v7;
        *(void *)(a2 + 16) = &v13[4 * v12];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *uint64_t v3 = *((_DWORD *)v4 + 4);
        uint64_t v7 = v3 + 1;
      }
      *(void *)(a2 + 8) = v7;
      float32x4_t v4 = (uint64_t *)*v4;
      uint64_t v3 = v7;
    }
    while (v4);
  }
}

void geom::acd<float>::impl::cluster_indices(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v3 = *(uint64_t **)(a1 + 128);
  if (v3)
  {
    uint64_t v5 = (void *)(a2 + 16);
    do
    {
      if ((unint64_t)v2 >= *v5)
      {
        uint64_t v7 = *(_DWORD **)a2;
        uint64_t v8 = ((uint64_t)v2 - *(void *)a2) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          abort();
        }
        uint64_t v10 = *v5 - (void)v7;
        if (v10 >> 1 > v9) {
          unint64_t v9 = v10 >> 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          unint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v5, v11);
          uint64_t v7 = *(_DWORD **)a2;
          uint64_t v2 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          unint64_t v12 = 0;
        }
        uint64_t v13 = &v12[4 * v8];
        *(_DWORD *)uint64_t v13 = *((_DWORD *)v3 + 4);
        uint64_t v6 = v13 + 4;
        while (v2 != v7)
        {
          int v14 = *--v2;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        *(void *)a2 = v13;
        *(void *)(a2 + 8) = v6;
        *(void *)(a2 + 16) = &v12[4 * v11];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *uint64_t v2 = *((_DWORD *)v3 + 4);
        uint64_t v6 = v2 + 1;
      }
      *(void *)(a2 + 8) = v6;
      uint64_t v3 = (uint64_t *)*v3;
      uint64_t v2 = v6;
    }
    while (v3);
  }
}

void geom::acd<float>::get_hull_of_cluster(float32x4_t **a1, unsigned int a2, char **a3, std::vector<unsigned int> *a4)
{
}

float32x4_t geom::acd<float>::impl::mesh_vertex_transform(float32x4_t *a1, float *a2, float32x4_t *a3)
{
  float32x4_t v3 = vsubq_f32(a1[2], a1[1]);
  *a2 = fmaxf(fmaxf(v3.f32[0], v3.f32[2]), v3.f32[1]) * 0.5;
  v4.i64[0] = 0x3F0000003F000000;
  v4.i64[1] = 0x3F0000003F000000;
  float32x4_t result = vmulq_f32(vaddq_f32(a1[1], a1[2]), v4);
  *a3 = result;
  return result;
}

uint64_t *geom::acd<double>::~acd(uint64_t *a1)
{
  return a1;
}

uint64_t *geom::acd<double>::operator=(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  std::unique_ptr<geom::acd<double>::impl,std::default_delete<geom::acd<double>::impl>>::reset[abi:nn180100](a1, v3);
  return a1;
}

void geom::acd<double>::init()
{
}

{
  operator new();
}

void geom::acd<double>::split_clusters_automatically(void **a1, unsigned int *a2)
{
}

uint64_t geom::acd<double>::merge_clusters_automatically(uint64_t *a1, uint64_t a2)
{
  return geom::acd<double>::impl::merge_clusters_automatically(*a1, a2);
}

void geom::acd<double>::split_cluster_with_plane(uint64_t *a1, unsigned int a2, float64x2_t *a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v3 = *a1;
  float64x2_t v4 = a3[1];
  v5[0] = *a3;
  v5[1] = v4;
  float32x4_t v5[2] = a3[2];
  geom::acd<double>::impl::split_cluster_with_plane(v3, a2, v5);
}

uint64_t *geom::acd<double>::merge_clusters(uint64_t *a1, unsigned int a2, unsigned int a3)
{
  return geom::acd<double>::impl::merge_clusters(*a1, a2, a3);
}

uint64_t geom::acd<double>::cluster_count(uint64_t a1)
{
  return *(void *)(*(void *)a1 + 168);
}

uint64_t geom::acd<double>::impl::cluster_count(uint64_t a1)
{
  return *(void *)(a1 + 168);
}

void geom::acd<double>::cluster_indices(uint64_t *a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(_DWORD **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  float64x2_t v4 = *(uint64_t **)(v2 + 160);
  if (v4)
  {
    uint64_t v6 = (void *)(a2 + 16);
    do
    {
      if ((unint64_t)v3 >= *v6)
      {
        uint64_t v8 = *(_DWORD **)a2;
        uint64_t v9 = ((uint64_t)v3 - *(void *)a2) >> 2;
        unint64_t v10 = v9 + 1;
        if ((unint64_t)(v9 + 1) >> 62) {
          abort();
        }
        uint64_t v11 = *v6 - (void)v8;
        if (v11 >> 1 > v10) {
          unint64_t v10 = v11 >> 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v12 = v10;
        }
        if (v12)
        {
          uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v6, v12);
          uint64_t v8 = *(_DWORD **)a2;
          uint64_t v3 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          uint64_t v13 = 0;
        }
        int v14 = &v13[4 * v9];
        *(_DWORD *)int v14 = *((_DWORD *)v4 + 4);
        uint64_t v7 = v14 + 4;
        while (v3 != v8)
        {
          int v15 = *--v3;
          *((_DWORD *)v14 - 1) = v15;
          v14 -= 4;
        }
        *(void *)a2 = v14;
        *(void *)(a2 + 8) = v7;
        *(void *)(a2 + 16) = &v13[4 * v12];
        if (v8) {
          operator delete(v8);
        }
      }
      else
      {
        *uint64_t v3 = *((_DWORD *)v4 + 4);
        uint64_t v7 = v3 + 1;
      }
      *(void *)(a2 + 8) = v7;
      float64x2_t v4 = (uint64_t *)*v4;
      uint64_t v3 = v7;
    }
    while (v4);
  }
}

void geom::acd<double>::impl::cluster_indices(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_DWORD **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v3 = *(uint64_t **)(a1 + 160);
  if (v3)
  {
    uint64_t v5 = (void *)(a2 + 16);
    do
    {
      if ((unint64_t)v2 >= *v5)
      {
        uint64_t v7 = *(_DWORD **)a2;
        uint64_t v8 = ((uint64_t)v2 - *(void *)a2) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          abort();
        }
        uint64_t v10 = *v5 - (void)v7;
        if (v10 >> 1 > v9) {
          unint64_t v9 = v10 >> 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          unint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v5, v11);
          uint64_t v7 = *(_DWORD **)a2;
          uint64_t v2 = *(_DWORD **)(a2 + 8);
        }
        else
        {
          unint64_t v12 = 0;
        }
        uint64_t v13 = &v12[4 * v8];
        *(_DWORD *)uint64_t v13 = *((_DWORD *)v3 + 4);
        uint64_t v6 = v13 + 4;
        while (v2 != v7)
        {
          int v14 = *--v2;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        *(void *)a2 = v13;
        *(void *)(a2 + 8) = v6;
        *(void *)(a2 + 16) = &v12[4 * v11];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *uint64_t v2 = *((_DWORD *)v3 + 4);
        uint64_t v6 = v2 + 1;
      }
      *(void *)(a2 + 8) = v6;
      uint64_t v3 = (uint64_t *)*v3;
      uint64_t v2 = v6;
    }
    while (v3);
  }
}

void geom::acd<double>::get_hull_of_cluster(uint64_t *a1, unsigned int a2, char **a3, std::vector<unsigned int> *a4)
{
}

float64x2_t geom::acd<double>::impl::mesh_vertex_transform(float64x2_t *a1, double *a2, float64x2_t *a3)
{
  float64x2_t v3 = vsubq_f64(a1[3], a1[1]);
  *a2 = fmax(fmax(v3.f64[0], vsubq_f64(a1[4], a1[2]).f64[0]), v3.f64[1]) * 0.5;
  __asm { FMOV            V2.2D, #0.5 }
  float64x2_t result = vmulq_f64(vaddq_f64(a1[1], a1[3]), _Q2);
  float64x2_t v10 = vmulq_f64(vaddq_f64(a1[2], a1[4]), _Q2);
  *a3 = result;
  a3[1] = v10;
  return result;
}

uint64_t std::unique_ptr<geom::acd<float>::impl,std::default_delete<geom::acd<float>::impl>>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    geom::acd<float>::impl::~impl(result);
    JUMPOUT(0x237E10720);
  }
  return result;
}

uint64_t geom::acd<float>::impl::~impl(uint64_t a1)
{
  uint64_t v8 = (void **)(a1 + 304);
  std::vector<geom::triangle_mesh_connectivity>::__destroy_vector::operator()[abi:nn180100](&v8);
  uint64_t v2 = *(void **)(a1 + 280);
  if (v2)
  {
    *(void *)(a1 + 288) = v2;
    operator delete(v2);
  }
  float64x2_t v3 = *(void **)(a1 + 256);
  if (v3)
  {
    *(void *)(a1 + 264) = v3;
    operator delete(v3);
  }
  geom::convex_mesh_cache<float>::~convex_mesh_cache(a1 + 224);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::~__hash_table(a1 + 112);
  uint64_t v4 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = 0;
  if (v4) {
    std::default_delete<geom::bvh<float,(unsigned char)3>>::operator()[abi:nn180100](a1 + 96, v4);
  }
  uint64_t v5 = *(void **)(a1 + 72);
  if (v5)
  {
    *(void *)(a1 + 80) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 48);
  if (v6)
  {
    *(void *)(a1 + 56) = v6;
    operator delete(v6);
  }
  return a1;
}

void std::vector<geom::triangle_mesh_connectivity>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    uint64_t v5 = v2;
    if (v4 != v2)
    {
      do
        geom::triangle_mesh_connectivity::~triangle_mesh_connectivity((geom::triangle_mesh_connectivity *)(v4 - 208));
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void geom::triangle_mesh_connectivity::~triangle_mesh_connectivity(geom::triangle_mesh_connectivity *this)
{
  uint64_t v2 = (void *)*((void *)this + 23);
  if (v2)
  {
    *((void *)this + 24) = v2;
    operator delete(v2);
  }
  float64x2_t v3 = (void *)*((void *)this + 20);
  if (v3)
  {
    *((void *)this + 21) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)*((void *)this + 17);
  if (v4)
  {
    *((void *)this + 18) = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)*((void *)this + 14);
  if (v5)
  {
    *((void *)this + 15) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 11);
  if (v6)
  {
    *((void *)this + 12) = v6;
    operator delete(v6);
  }
  uint64_t v7 = (void *)*((void *)this + 8);
  if (v7)
  {
    *((void *)this + 9) = v7;
    operator delete(v7);
  }
  uint64_t v8 = (void *)*((void *)this + 5);
  if (v8)
  {
    *((void *)this + 6) = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)*((void *)this + 2);
  if (v9)
  {
    *((void *)this + 3) = v9;
    operator delete(v9);
  }
}

uint64_t geom::convex_mesh_cache<float>::~convex_mesh_cache(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v3 = (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4;
  block[0] = (void **)MEMORY[0x263EF8330];
  block[1] = (void **)0x40000000;
  block[2] = (void **)___ZN4geom26dispatch_apply_with_strideIZNS_17convex_mesh_cacheIfED1EvEUlmE_EEmmmP16dispatch_queue_sT__block_invoke;
  block[3] = (void **)&__block_descriptor_tmp;
  block[4] = (void **)1024;
  block[5] = (void **)v3;
  block[6] = (void **)a1;
  dispatch_apply((unint64_t)(v3 + 1023) >> 10, 0, block);
  block[0] = v2;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](block);
  return a1;
}

void ___ZN4geom26dispatch_apply_with_strideIZNS_17convex_mesh_cacheIfED1EvEUlmE_EEmmmP16dispatch_queue_sT__block_invoke(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[4];
  unint64_t v3 = v2 * a2;
  unint64_t v4 = v2 * a2 + v2;
  if (a1[5] < v4) {
    unint64_t v4 = a1[5];
  }
  unint64_t v5 = v4 - v3;
  if (v4 > v3)
  {
    uint64_t v7 = 16 * v3;
    do
    {
      uint64_t v8 = (void *)(*(void *)(a1[6] + 8) + v7);
      unint64_t v9 = (std::__shared_weak_count *)v8[1];
      *uint64_t v8 = 0;
      v8[1] = 0;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v9);
      }
      v7 += 16;
      --v5;
    }
    while (v5);
  }
}

void std::__shared_weak_count::__release_shared[abi:nn180100](std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

void std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__clear[abi:nn180100]((uint64_t *)v2);
    unint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    unint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
  }
  a1[1] = v2;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      unint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      v2[3] = 0;
      if (v4) {
        std::default_delete<geom::cluster<float>>::operator()[abi:nn180100]((uint64_t)(v2 + 3), v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::default_delete<geom::cluster<float>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v5 = (void **)(a2 + 112);
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v5);
    unint64_t v3 = *(void **)(a2 + 88);
    if (v3)
    {
      *(void *)(a2 + 96) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
    MEMORY[0x237E10720](a2, 0x10F0C401673C24ALL);
  }
}

void std::default_delete<geom::bvh<float,(unsigned char)3>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2 + 80;
    if (*(unsigned char *)(a2 + 96) && *(void *)v3) {
      MEMORY[0x237E10700](*(void *)v3, 0x1000C80E0EAB150);
    }
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(unsigned char *)(v3 + 16) = 0;
    uint64_t v4 = (void *)(a2 + 56);
    if (*(unsigned char *)(a2 + 72) && *v4) {
      MEMORY[0x237E10700](*v4, 0x1000C80451B5BE8);
    }
    *uint64_t v4 = 0;
    *(void *)(a2 + 64) = 0;
    *(unsigned char *)(a2 + 72) = 0;
    unint64_t v5 = *(void **)(a2 + 32);
    if (v5)
    {
      *(void *)(a2 + 40) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(a2 + 8);
    if (v6)
    {
      *(void *)(a2 + 16) = v6;
      operator delete(v6);
    }
    JUMPOUT(0x237E10720);
  }
}

uint64_t std::unique_ptr<geom::acd<double>::impl,std::default_delete<geom::acd<double>::impl>>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  *a1 = a2;
  if (result)
  {
    geom::acd<double>::impl::~impl(result);
    JUMPOUT(0x237E10720);
  }
  return result;
}

uint64_t geom::acd<double>::impl::~impl(uint64_t a1)
{
  uint64_t v8 = (void **)(a1 + 384);
  std::vector<geom::triangle_mesh_connectivity>::__destroy_vector::operator()[abi:nn180100](&v8);
  uint64_t v2 = *(void **)(a1 + 360);
  if (v2)
  {
    *(void *)(a1 + 368) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 336);
  if (v3)
  {
    *(void *)(a1 + 344) = v3;
    operator delete(v3);
  }
  geom::convex_mesh_cache<double>::~convex_mesh_cache(a1 + 304);
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::~__hash_table(a1 + 144);
  uint64_t v4 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  if (v4) {
    std::default_delete<geom::bvh<double,(unsigned char)3>>::operator()[abi:nn180100](a1 + 128, v4);
  }
  unint64_t v5 = *(void **)(a1 + 104);
  if (v5)
  {
    *(void *)(a1 + 112) = v5;
    operator delete(v5);
  }
  uint64_t v6 = *(void **)(a1 + 80);
  if (v6)
  {
    *(void *)(a1 + 88) = v6;
    operator delete(v6);
  }
  return a1;
}

uint64_t geom::convex_mesh_cache<double>::~convex_mesh_cache(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v3 = (uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 4;
  block[0] = (void **)MEMORY[0x263EF8330];
  block[1] = (void **)0x40000000;
  block[2] = (void **)___ZN4geom26dispatch_apply_with_strideIZNS_17convex_mesh_cacheIdED1EvEUlmE_EEmmmP16dispatch_queue_sT__block_invoke;
  block[3] = (void **)&__block_descriptor_tmp_2;
  block[4] = (void **)1024;
  block[5] = (void **)v3;
  block[6] = (void **)a1;
  dispatch_apply((unint64_t)(v3 + 1023) >> 10, 0, block);
  block[0] = v2;
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](block);
  return a1;
}

void ___ZN4geom26dispatch_apply_with_strideIZNS_17convex_mesh_cacheIdED1EvEUlmE_EEmmmP16dispatch_queue_sT__block_invoke(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[4];
  unint64_t v3 = v2 * a2;
  unint64_t v4 = v2 * a2 + v2;
  if (a1[5] < v4) {
    unint64_t v4 = a1[5];
  }
  unint64_t v5 = v4 - v3;
  if (v4 > v3)
  {
    uint64_t v7 = 16 * v3;
    do
    {
      uint64_t v8 = (void *)(*(void *)(a1[6] + 8) + v7);
      unint64_t v9 = (std::__shared_weak_count *)v8[1];
      *uint64_t v8 = 0;
      v8[1] = 0;
      if (v9) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v9);
      }
      v7 += 16;
      --v5;
    }
    while (v5);
  }
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    uint64_t v2 = __p;
    do
    {
      unint64_t v3 = (void *)*v2;
      uint64_t v4 = v2[3];
      v2[3] = 0;
      if (v4) {
        std::default_delete<geom::cluster<double>>::operator()[abi:nn180100]((uint64_t)(v2 + 3), v4);
      }
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::default_delete<geom::cluster<double>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    unint64_t v5 = (void **)(a2 + 168);
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v5);
    unint64_t v3 = *(void **)(a2 + 144);
    if (v3)
    {
      *(void *)(a2 + 152) = v3;
      operator delete(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(a2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
    }
    MEMORY[0x237E10720](a2, 0x10F0C408DC99B65);
  }
}

void std::default_delete<geom::bvh<double,(unsigned char)3>>::operator()[abi:nn180100](uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v3 = a2 + 80;
    if (*(unsigned char *)(a2 + 96) && *(void *)v3) {
      MEMORY[0x237E10700](*(void *)v3, 0x1000C80FA0F61DDLL);
    }
    *(void *)uint64_t v3 = 0;
    *(void *)(v3 + 8) = 0;
    *(unsigned char *)(v3 + 16) = 0;
    uint64_t v4 = (void *)(a2 + 56);
    if (*(unsigned char *)(a2 + 72) && *v4) {
      MEMORY[0x237E10700](*v4, 0x1000C80E0EAB150);
    }
    *uint64_t v4 = 0;
    *(void *)(a2 + 64) = 0;
    *(unsigned char *)(a2 + 72) = 0;
    unint64_t v5 = *(void **)(a2 + 32);
    if (v5)
    {
      *(void *)(a2 + 40) = v5;
      operator delete(v5);
    }
    uint64_t v6 = *(void **)(a2 + 8);
    if (v6)
    {
      *(void *)(a2 + 16) = v6;
      operator delete(v6);
    }
    JUMPOUT(0x237E10720);
  }
}

void geom::create_exact_winding_number_3<float>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void geom::create_exact_winding_number_3<double>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void geom::query_exact_winding_number_3<float>()
{
}

void geom::query_exact_winding_number_3<double>()
{
}

void *geom::free_exact_winding_number_3<float>(void *result)
{
  if (result)
  {
    v1 = result;
    uint64_t v2 = (void *)result[29];
    if (v2)
    {
      v1[30] = v2;
      operator delete(v2);
    }
    uint64_t v3 = v1[26];
    if (v3)
    {
      uint64_t v4 = v1[27];
      unint64_t v5 = (void *)v1[26];
      if (v4 != v3)
      {
        uint64_t v6 = v1[27];
        do
        {
          uint64_t v8 = *(void **)(v6 - 24);
          v6 -= 24;
          uint64_t v7 = v8;
          if (v8)
          {
            *(void *)(v4 - 16) = v7;
            operator delete(v7);
          }
          uint64_t v4 = v6;
        }
        while (v6 != v3);
        unint64_t v5 = (void *)v1[26];
      }
      v1[27] = v3;
      operator delete(v5);
    }
    unint64_t v9 = (void *)v1[23];
    if (v9)
    {
      v1[24] = v9;
      operator delete(v9);
    }
    JUMPOUT(0x237E10720);
  }
  return result;
}

void *geom::free_exact_winding_number_3<double>(void *result)
{
  if (result)
  {
    v1 = result;
    uint64_t v2 = (void *)result[29];
    if (v2)
    {
      v1[30] = v2;
      operator delete(v2);
    }
    uint64_t v3 = v1[26];
    if (v3)
    {
      uint64_t v4 = v1[27];
      unint64_t v5 = (void *)v1[26];
      if (v4 != v3)
      {
        uint64_t v6 = v1[27];
        do
        {
          uint64_t v8 = *(void **)(v6 - 24);
          v6 -= 24;
          uint64_t v7 = v8;
          if (v8)
          {
            *(void *)(v4 - 16) = v7;
            operator delete(v7);
          }
          uint64_t v4 = v6;
        }
        while (v6 != v3);
        unint64_t v5 = (void *)v1[26];
      }
      v1[27] = v3;
      operator delete(v5);
    }
    unint64_t v9 = (void *)v1[23];
    if (v9)
    {
      v1[24] = v9;
      operator delete(v9);
    }
    JUMPOUT(0x237E10720);
  }
  return result;
}

void geom::create_approximate_winding_number_3<float>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void geom::create_approximate_winding_number_3<double>()
{
  uint64_t v0 = *MEMORY[0x263EF8340];
  operator new();
}

void geom::query_approximate_winding_number_3<float>()
{
}

void geom::query_approximate_winding_number_3<double>()
{
}

uint64_t geom::free_approximate_winding_number_3<float>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 192);
    if (v2)
    {
      *(void *)(v1 + 200) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x237E10720);
  }
  return result;
}

uint64_t geom::free_approximate_winding_number_3<double>(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = *(void **)(result + 192);
    if (v2)
    {
      *(void *)(v1 + 200) = v2;
      operator delete(v2);
    }
    JUMPOUT(0x237E10720);
  }
  return result;
}

uint64_t geom::anonymous namespace'::winding_number_base<float>::winding_number_base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = geom::bvh<float,(unsigned char)3>::bvh(a1, 0, 0, 0, 0, 0);
  *(_OWORD *)(v10 + 136) = 0u;
  unint64_t v11 = (uint64_t *)(v10 + 136);
  *(void *)(v10 + 104) = a2;
  *(void *)(v10 + 112) = a3;
  *(void *)(v10 + 120) = a4;
  *(void *)(v10 + 128) = a5;
  uint64_t v12 = v10 + 160;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(v10 + 136, a5 / 3);
  std::vector<geom::bbox<float,(unsigned char)3>>::resize(v12, *(v11 - 1) / 3uLL);
  uint64_t v13 = *v11;
  if (v11[1] == *v11)
  {
    unint64_t v35 = 0;
  }
  else
  {
    uint64_t v14 = 0;
    unsigned int v15 = 2;
    unsigned int v16 = 1;
    __asm { FMOV            V0.4S, #3.0 }
    do
    {
      uint64_t v22 = *(void *)(a1 + 120);
      uint64_t v23 = *(unsigned int *)(v22 + 4 * (v15 - 2));
      uint64_t v24 = *(unsigned int *)(v22 + 4 * (v15 - 1));
      uint64_t v25 = *(unsigned int *)(v22 + 4 * v15);
      uint64_t v26 = *(void *)(a1 + 104);
      *(float32x4_t *)(v13 + 16 * v14) = vdivq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v26 + 16 * v23), *(float32x4_t *)(v26 + 16 * v24)), *(float32x4_t *)(v26 + 16 * v25)), _Q0);
      float32x4_t v27 = *(float32x4_t *)(v26 + 16 * v23);
      float32x4_t v28 = *(float32x4_t *)(v26 + 16 * v24);
      float32x4_t v29 = *(float32x4_t *)(v26 + 16 * v25);
      v28.i32[3] = 0;
      v29.i32[3] = 0;
      v27.i32[3] = 0;
      float32x4_t v30 = vminnmq_f32(v28, v29);
      v30.i32[3] = 0;
      *(float32x4_t *)(*(void *)(a1 + 160) + 32 * v14) = vminnmq_f32(v27, v30);
      float32x4_t v31 = *(float32x4_t *)(v26 + 16 * v23);
      float32x4_t v32 = *(float32x4_t *)(v26 + 16 * v24);
      float32x4_t v33 = *(float32x4_t *)(v26 + 16 * v25);
      v32.i32[3] = 0;
      v33.i32[3] = 0;
      float32x4_t v34 = vmaxnmq_f32(v32, v33);
      v31.i32[3] = 0;
      v34.i32[3] = 0;
      *(float32x4_t *)(*(void *)(a1 + 160) + 32 * v14 + 16) = vmaxnmq_f32(v31, v34);
      uint64_t v14 = v16;
      uint64_t v13 = *(void *)(a1 + 136);
      unint64_t v35 = (*(void *)(a1 + 144) - v13) >> 4;
      v15 += 3;
    }
    while (v35 > v16++);
  }
  geom::bvh<float,(unsigned char)3>::bvh((uint64_t)v44, v13, v35, *(void *)(a1 + 160), (uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 5, 0);
  *(unsigned char *)a1 = v44[0];
  uint64_t v37 = *(void **)(a1 + 8);
  if (v37)
  {
    *(void *)(a1 + 16) = v37;
    operator delete(v37);
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v45;
  *(void *)(a1 + 24) = v46;
  v45[1] = 0;
  uint64_t v46 = 0;
  v45[0] = 0;
  long long v38 = *(void **)(a1 + 32);
  if (v38)
  {
    *(void *)(a1 + 40) = v38;
    operator delete(v38);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)__p;
  *(void *)(a1 + 48) = v48;
  __p[1] = 0;
  uint64_t v48 = 0;
  __p[0] = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v39 = *(void *)(a1 + 56);
    if (v39) {
      MEMORY[0x237E10700](v39, 0x1000C80451B5BE8);
    }
  }
  uint64_t v40 = v50;
  *(void *)(a1 + 56) = v49;
  *(void *)(a1 + 64) = v40;
  *(unsigned char *)(a1 + 72) = v51;
  char v51 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v41 = *(void *)(a1 + 80);
    if (v41) {
      MEMORY[0x237E10700](v41, 0x1000C80E0EAB150);
    }
  }
  uint64_t v42 = v53;
  *(void *)(a1 + 80) = v52;
  *(void *)(a1 + 88) = v42;
  *(unsigned char *)(a1 + 96) = v54;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  char v54 = 0;
  if (v51 && v49) {
    MEMORY[0x237E10700](v49, 0x1000C80451B5BE8);
  }
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  char v51 = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v45[0])
  {
    v45[1] = v45[0];
    operator delete(v45[0]);
  }
  return a1;
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void std::vector<geom::bbox<float,(unsigned char)3>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<geom::bbox<float,(unsigned char)3>>::__append((void **)a1, a2 - v2);
  }
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 4)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 16 * a2);
      v7 += 16 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      abort();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    uint64_t v14 = &v13[16 * v10];
    unsigned int v15 = &v13[16 * v12];
    bzero(v14, 16 * a2);
    unsigned int v16 = &v14[16 * a2];
    long long v18 = (char *)*a1;
    long long v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 1);
        v17 -= 16;
        *((_OWORD *)v14 - 1) = v19;
        v14 -= 16;
      }
      while (v17 != v18);
      long long v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::vector<geom::bbox<float,(unsigned char)3>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(int32x4_t **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = &v7[2 * a2];
      int32x4_t v15 = vdupq_n_s32(0x7F800000u);
      v16.i64[0] = 0x7F0000007FLL;
      v16.i64[1] = 0x7F0000007FLL;
      do
      {
        *uint64_t v7 = v15;
        v7[1] = v16;
        v7 += 2;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      abort();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    long long v17 = (int32x4_t *)&v13[32 * v10];
    long long v18 = &v17[2 * a2];
    int32x4_t v19 = vdupq_n_s32(0x7F800000u);
    v20.i64[0] = 0x7F0000007FLL;
    v20.i64[1] = 0x7F0000007FLL;
    uint64_t v21 = v17;
    do
    {
      int32x4_t *v21 = v19;
      v21[1] = v20;
      v21 += 2;
    }
    while (v21 != v18);
    uint64_t v22 = &v13[32 * v12];
    uint64_t v24 = (char *)*a1;
    uint64_t v23 = (int32x4_t *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        int32x4_t v25 = v23[-1];
        v17[-2] = v23[-2];
        v17[-1] = v25;
        v17 -= 2;
        v23 -= 2;
      }
      while (v23 != (int32x4_t *)v24);
      uint64_t v23 = (int32x4_t *)*a1;
    }
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

void _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA03A90;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEPNS0_6__baseISG_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA03A90;
  a2[1] = v2;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EEclESC_(uint64_t a1, unsigned int *a2, double a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(char **)(v4 + 232);
  uint64_t v6 = *(char **)(v4 + 240);
  unint64_t v7 = (v6 - v5) >> 3;
  unint64_t v8 = *a2;
  if (v7 > v8) {
    goto LABEL_19;
  }
  unint64_t v9 = (v8 + 1);
  unint64_t v10 = v9 - v7;
  if (v9 <= v7)
  {
    if (v9 >= v7) {
      goto LABEL_19;
    }
    int32x4_t v19 = &v5[8 * v9];
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(v4 + 248);
  if (v10 <= (v11 - (uint64_t)v6) >> 3)
  {
    memset(*(void **)(v4 + 240), 255, 8 * v10);
    int32x4_t v19 = &v6[8 * v10];
LABEL_18:
    *(void *)(v4 + 240) = v19;
    goto LABEL_19;
  }
  uint64_t v12 = v11 - (void)v5;
  if (v12 >> 2 > v9) {
    unint64_t v9 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v9;
  }
  if (v13 >> 61) {
    goto LABEL_95;
  }
  uint64_t v14 = (char *)operator new(8 * v13);
  int32x4_t v15 = &v14[8 * v7];
  int32x4_t v16 = &v14[8 * v13];
  memset(v15, 255, 8 * v10);
  long long v17 = &v15[8 * v10];
  if (v6 != v5)
  {
    do
    {
      uint64_t v18 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    while (v6 != v5);
    uint64_t v6 = v5;
  }
  *(void *)(v4 + 232) = v15;
  *(void *)(v4 + 240) = v17;
  *(void *)(v4 + 248) = v16;
  if (v6) {
    operator delete(v6);
  }
LABEL_19:
  LODWORD(a3) = a2[4];
  unsigned int v20 = sqrt((double)*(unint64_t *)&a3);
  if (v20 <= 8) {
    unint64_t v21 = 8;
  }
  else {
    unint64_t v21 = v20;
  }
  uint64_t v22 = *(void **)(v4 + 208);
  uint64_t v23 = *(void **)(v4 + 216);
  unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v23 - v22);
  unint64_t v88 = v21;
  unint64_t v25 = v21 - v24;
  if (v21 <= v24) {
    goto LABEL_42;
  }
  uint64_t v26 = *(void *)(v4 + 224);
  if (0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v23) >> 3) >= v25)
  {
    bzero(v23, 24 * ((24 * v25 - 24) / 0x18) + 24);
    *(void *)(v4 + 216) = &v23[3 * ((24 * v25 - 24) / 0x18) + 3];
    goto LABEL_42;
  }
  unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v22) >> 3);
  unint64_t v28 = 0x5555555555555556 * ((v26 - (uint64_t)v22) >> 3);
  if (v28 <= v21) {
    unint64_t v28 = v21;
  }
  if (v27 >= 0x555555555555555) {
    unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v29 = v28;
  }
  if (v29 > 0xAAAAAAAAAAAAAAALL) {
LABEL_95:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v30 = 3 * v29;
  float32x4_t v31 = (char *)operator new(24 * v29);
  float32x4_t v32 = &v31[8 * (v23 - v22)];
  float32x4_t v33 = &v31[8 * v30];
  size_t v34 = 24 * ((24 * v25 - 24) / 0x18) + 24;
  bzero(v32, v34);
  unint64_t v35 = &v32[v34];
  if (v23 == v22)
  {
    *(void *)(v4 + 208) = v32;
    *(void *)(v4 + 216) = v35;
    *(void *)(v4 + 224) = v33;
    if (!v23) {
      goto LABEL_42;
    }
LABEL_41:
    operator delete(v23);
    goto LABEL_42;
  }
  do
  {
    long long v36 = *(_OWORD *)(v23 - 3);
    v23 -= 3;
    *(_OWORD *)(v32 - 24) = v36;
    v32 -= 24;
    *((void *)v32 + 2) = v23[2];
    *uint64_t v23 = 0;
    v23[1] = 0;
    v23[2] = 0;
  }
  while (v23 != v22);
  uint64_t v23 = *(void **)(v4 + 208);
  uint64_t v37 = *(void **)(v4 + 216);
  *(void *)(v4 + 208) = v32;
  *(void *)(v4 + 216) = v35;
  *(void *)(v4 + 224) = v33;
  if (v37 != v23)
  {
    long long v38 = v37;
    do
    {
      uint64_t v40 = (void *)*(v38 - 3);
      v38 -= 3;
      uint64_t v39 = v40;
      if (v40)
      {
        *(v37 - 2) = v39;
        operator delete(v39);
      }
      uint64_t v37 = v38;
    }
    while (v38 != v23);
  }
  if (v23) {
    goto LABEL_41;
  }
LABEL_42:
  uint64_t v41 = (void *)(*(void *)(v4 + 208) + 8);
  unint64_t v42 = v88;
  do
  {
    *uint64_t v41 = *(v41 - 1);
    v41 += 3;
    --v42;
  }
  while (v42);
  unsigned int v43 = a2[4];
  if (v43)
  {
    uint64_t v44 = a2[3];
    int64x2_t v45 = (_DWORD *)(*(void *)(v4 + 32) + 4 * v44);
    for (uint64_t i = 4 * (v43 + v44) - 4 * v44; i; i -= 4)
    {
      uint64_t v47 = (3 * *v45);
      uint64_t v48 = *(void *)(v4 + 120);
      unsigned int v49 = *(_DWORD *)(v48 + 4 * v47);
      uint64_t v50 = (v47 + 1);
      unsigned int v51 = *(_DWORD *)(v48 + 4 * v50);
      if (v49 >= v51)
      {
        if (v51 >= v49) {
          goto LABEL_51;
        }
        unsigned int v89 = *(_DWORD *)(v48 + 4 * v50);
        unsigned int v90 = v49;
        int v53 = -1;
      }
      else
      {
        unsigned int v89 = *(_DWORD *)(v48 + 4 * v47);
        unsigned int v90 = v51;
        int v53 = 1;
      }
      *((_DWORD *)edge_count + 2) += v53;
      uint64_t v48 = *(void *)(v4 + 120);
      unsigned int v51 = *(_DWORD *)(v48 + 4 * v50);
LABEL_51:
      uint64_t v54 = (v47 + 2);
      unsigned int v55 = *(_DWORD *)(v48 + 4 * v54);
      if (v51 >= v55)
      {
        if (v55 >= v51) {
          goto LABEL_56;
        }
        unsigned int v89 = *(_DWORD *)(v48 + 4 * v54);
        unsigned int v90 = v51;
        int v57 = -1;
      }
      else
      {
        unsigned int v89 = v51;
        unsigned int v90 = v55;
        int v57 = 1;
      }
      *((_DWORD *)v56 + 2) += v57;
      uint64_t v48 = *(void *)(v4 + 120);
      unsigned int v55 = *(_DWORD *)(v48 + 4 * v54);
LABEL_56:
      unsigned int v58 = *(_DWORD *)(v48 + 4 * v47);
      if (v55 < v58)
      {
        unsigned int v89 = v55;
        unsigned int v90 = v58;
        int v60 = 1;
LABEL_60:
        *((_DWORD *)v59 + 2) += v60;
        goto LABEL_61;
      }
      if (v58 < v55)
      {
        unsigned int v89 = v58;
        unsigned int v90 = v55;
        int v60 = -1;
        goto LABEL_60;
      }
LABEL_61:
      ++v45;
    }
  }
  uint64_t v61 = 0;
  unsigned int v62 = 0;
  float64x2_t v63 = *(_DWORD **)(v4 + 192);
  uint64_t v86 = *(void *)(v4 + 184);
  uint64_t v87 = v63;
  do
  {
    float64x2_t v64 = (uint64_t **)(*(void *)(v4 + 208) + 24 * v61);
    float v65 = *v64;
    v66 = v64[1];
    while (v65 != v66)
    {
      if (*((_DWORD *)v65 + 2))
      {
        unint64_t v67 = *(void *)(v4 + 200);
        if ((unint64_t)v63 >= v67)
        {
          float32x4_t v70 = *(_DWORD **)(v4 + 184);
          unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * (v63 - v70) + 1;
          if (v71 > 0x1555555555555555) {
            abort();
          }
          unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - (void)v70) >> 2);
          if (2 * v72 > v71) {
            unint64_t v71 = 2 * v72;
          }
          if (v72 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v73 = 0x1555555555555555;
          }
          else {
            unint64_t v73 = v71;
          }
          if (v73)
          {
            if (v73 > 0x1555555555555555) {
              goto LABEL_95;
            }
            float64x2_t v74 = (char *)operator new(12 * v73);
          }
          else
          {
            float64x2_t v74 = 0;
          }
          uint64_t v75 = *v65;
          float64x2_t v76 = &v74[4 * (v63 - v70)];
          *((_DWORD *)v76 + 2) = *((_DWORD *)v65 + 2);
          *(void *)float64x2_t v76 = v75;
          float64x2_t v77 = v76;
          if (v63 != v70)
          {
            do
            {
              uint64_t v78 = *(void *)(v63 - 3);
              v63 -= 3;
              int v79 = v63[2];
              *(void *)(v77 - 12) = v78;
              v77 -= 12;
              *((_DWORD *)v77 + 2) = v79;
            }
            while (v63 != v70);
            float64x2_t v63 = *(_DWORD **)(v4 + 184);
          }
          uint64_t v69 = v76 + 12;
          *(void *)(v4 + 184) = v77;
          *(void *)(v4 + 192) = v76 + 12;
          *(void *)(v4 + 200) = &v74[12 * v73];
          if (v63) {
            operator delete(v63);
          }
        }
        else
        {
          uint64_t v68 = *v65;
          v63[2] = *((_DWORD *)v65 + 2);
          *(void *)float64x2_t v63 = v68;
          uint64_t v69 = v63 + 3;
        }
        *(void *)(v4 + 192) = v69;
        int v80 = *((_DWORD *)v65 + 2);
        if (v80 < 0) {
          int v80 = -v80;
        }
        v62 += v80;
        float64x2_t v63 = v69;
      }
      float v65 = (uint64_t *)((char *)v65 + 12);
    }
    ++v61;
  }
  while (v61 != v88);
  int v81 = 1431655765 * (((unint64_t)v87 - v86) >> 2)
      - 1431655765 * (((unint64_t)v63 - *(void *)(v4 + 184)) >> 2);
  uint64_t v82 = (_DWORD *)(*(void *)(v4 + 232) + 8 * *a2);
  *uint64_t v82 = -1431655765 * (((unint64_t)v87 - v86) >> 2);
  v82[1] = v81;
  unsigned int v83 = a2[4];
  return v83 < 0x64 || v62 >= v83;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS_5sliceIDv3_fEENS3_IjEEEUlRNS_8bvh_nodeIfLh3EEEE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE11target_typeEv()
{
  return &_ZTIZN4geom12_GLOBAL__N_120winding_number_exactIfEC1ENS_5sliceIDv3_fEENS3_IjEEEUlRNS_8bvh_nodeIfLh3EEEE_;
}

void *geom::anonymous namespace'::winding_number_exact<float>::find_edge_count(uint64_t a1, unsigned int *a2, unsigned int a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  unint64_t v5 = 0xBF58476D1CE4E5B9 * ((v4 | (v3 << 32)) ^ ((v4 | (unint64_t)(v3 << 32)) >> 30));
  unint64_t v6 = ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) ^ ((0x94D049BB133111EBLL * (v5 ^ (v5 >> 27))) >> 31)) % a3;
  uint64_t v7 = *(void *)(a1 + 208);
  unint64_t v8 = (char **)(v7 + 24 * v6);
  unint64_t v10 = v8 + 1;
  unint64_t v9 = v8[1];
  uint64_t v11 = *v8;
  unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *v8) >> 2);
  uint64_t v13 = -1431655765 * ((v9 - *v8) >> 2);
  if (-1431655765 * ((v9 - *v8) >> 2))
  {
    uint64_t result = *v8;
    while (*result != __PAIR64__(v4, v3))
    {
      uint64_t result = (void *)((char *)result + 12);
      if (!--v13) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    uint64_t v15 = *(void *)a2;
    uint64_t v16 = v7 + 24 * v6;
    unint64_t v19 = *(void *)(v16 + 16);
    uint64_t v18 = (void *)(v16 + 16);
    unint64_t v17 = v19;
    if ((unint64_t)v9 >= v19)
    {
      unint64_t v21 = v12 + 1;
      if (v12 + 1 > 0x1555555555555555) {
        abort();
      }
      unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v17 - (void)v11) >> 2);
      if (2 * v22 > v21) {
        unint64_t v21 = 2 * v22;
      }
      if (v22 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v23 = 0x1555555555555555;
      }
      else {
        unint64_t v23 = v21;
      }
      if (v23)
      {
        if (v23 > 0x1555555555555555) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v24 = (char *)operator new(12 * v23);
      }
      else
      {
        unint64_t v24 = 0;
      }
      unint64_t v25 = &v24[12 * v12];
      *(void *)unint64_t v25 = v15;
      *((_DWORD *)v25 + 2) = 0;
      unsigned int v20 = v25 + 12;
      if (v9 != v11)
      {
        do
        {
          uint64_t v26 = *(void *)(v9 - 12);
          v9 -= 12;
          int v27 = *((_DWORD *)v9 + 2);
          *(void *)(v25 - 12) = v26;
          v25 -= 12;
          *((_DWORD *)v25 + 2) = v27;
        }
        while (v9 != v11);
        unint64_t v9 = *v8;
      }
      *unint64_t v8 = v25;
      void *v10 = v20;
      *uint64_t v18 = &v24[12 * v23];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *(void *)unint64_t v9 = v15;
      *((_DWORD *)v9 + 2) = 0;
      unsigned int v20 = v9 + 12;
    }
    void *v10 = v20;
    return v20 - 3;
  }
  return result;
}

BOOL std::type_info::operator==[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a2 + 8);
  if (v2 == v3) {
    return 1;
  }
  if ((v3 & v2) < 0 != __OFSUB__(v2, v3)) {
    return strcmp((const char *)(v2 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL)) == 0;
  }
  return 0;
}

void *std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t geom::anonymous namespace'::winding_number_base<double>::winding_number_base(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v10 = geom::bvh<double,(unsigned char)3>::bvh(a1, 0, 0, 0, 0, 0);
  *(_OWORD *)(v10 + 136) = 0u;
  uint64_t v11 = (uint64_t *)(v10 + 136);
  *(void *)(v10 + 104) = a2;
  *(void *)(v10 + 112) = a3;
  *(void *)(v10 + 120) = a4;
  *(void *)(v10 + 128) = a5;
  uint64_t v12 = v10 + 160;
  *(_OWORD *)(v10 + 152) = 0u;
  *(_OWORD *)(v10 + 168) = 0u;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(v10 + 136, a5 / 3);
  std::vector<geom::bbox<double,(unsigned char)3>>::resize(v12, *(v11 - 1) / 3uLL, v13, v14, v15);
  uint64_t v16 = *v11;
  if (v11[1] == *v11)
  {
    unint64_t v36 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    unsigned int v18 = 2;
    unsigned int v19 = 1;
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      uint64_t v25 = *(void *)(a1 + 120);
      uint64_t v26 = *(void *)(a1 + 104);
      int v27 = (float64x2_t *)(v26 + 32 * *(unsigned int *)(v25 + 4 * (v18 - 2)));
      unint64_t v28 = (float64x2_t *)(v26 + 32 * *(unsigned int *)(v25 + 4 * (v18 - 1)));
      unint64_t v29 = (float64x2_t *)(v26 + 32 * *(unsigned int *)(v25 + 4 * v18));
      float64x2_t v30 = vdivq_f64(vaddq_f64(vaddq_f64(v27[1], v28[1]), v29[1]), _Q0);
      float32x4_t v31 = (float64x2_t *)(v16 + 32 * v17);
      *float32x4_t v31 = vdivq_f64(vaddq_f64(vaddq_f64(*v27, *v28), *v29), _Q0);
      v31[1] = v30;
      float64x2_t v32 = vminnmq_f64((float64x2_t)*(unint64_t *)&v27[1].f64[0], (float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v28[1].f64[0], (float64x2_t)*(unint64_t *)&v29[1].f64[0]));
      float32x4_t v33 = (float64x2_t *)(*(void *)(a1 + 160) + (v17 << 6));
      *float32x4_t v33 = vminnmq_f64(*v27, vminnmq_f64(*v28, *v29));
      v33[1] = v32;
      float64x2_t v34 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v27[1].f64[0], (float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)*(unint64_t *)&v28[1].f64[0], (float64x2_t)*(unint64_t *)&v29[1].f64[0]));
      unint64_t v35 = (float64x2_t *)(*(void *)(a1 + 160) + (v17 << 6));
      v35[2] = vmaxnmq_f64(*v27, vmaxnmq_f64(*v28, *v29));
      v35[3] = v34;
      uint64_t v17 = v19;
      uint64_t v16 = *(void *)(a1 + 136);
      unint64_t v36 = (*(void *)(a1 + 144) - v16) >> 5;
      v18 += 3;
    }
    while (v36 > v19++);
  }
  geom::bvh<double,(unsigned char)3>::bvh((uint64_t)v45, v16, v36, *(void *)(a1 + 160), (uint64_t)(*(void *)(a1 + 168) - *(void *)(a1 + 160)) >> 6, 0);
  *(unsigned char *)a1 = v45[0];
  long long v38 = *(void **)(a1 + 8);
  if (v38)
  {
    *(void *)(a1 + 16) = v38;
    operator delete(v38);
  }
  *(_OWORD *)(a1 + 8) = *(_OWORD *)v46;
  *(void *)(a1 + 24) = v47;
  v46[1] = 0;
  uint64_t v47 = 0;
  v46[0] = 0;
  uint64_t v39 = *(void **)(a1 + 32);
  if (v39)
  {
    *(void *)(a1 + 40) = v39;
    operator delete(v39);
  }
  *(_OWORD *)(a1 + 32) = *(_OWORD *)__p;
  *(void *)(a1 + 48) = v49;
  __p[1] = 0;
  uint64_t v49 = 0;
  __p[0] = 0;
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v40 = *(void *)(a1 + 56);
    if (v40) {
      MEMORY[0x237E10700](v40, 0x1000C80E0EAB150);
    }
  }
  uint64_t v41 = v51;
  *(void *)(a1 + 56) = v50;
  *(void *)(a1 + 64) = v41;
  *(unsigned char *)(a1 + 72) = v52;
  char v52 = 0;
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t v42 = *(void *)(a1 + 80);
    if (v42) {
      MEMORY[0x237E10700](v42, 0x1000C80FA0F61DDLL);
    }
  }
  uint64_t v43 = v54;
  *(void *)(a1 + 80) = v53;
  *(void *)(a1 + 88) = v43;
  *(unsigned char *)(a1 + 96) = v55;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  char v55 = 0;
  if (v52 && v50) {
    MEMORY[0x237E10700](v50, 0x1000C80E0EAB150);
  }
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  char v52 = 0;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (v46[0])
  {
    v46[1] = v46[0];
    operator delete(v46[0]);
  }
  return a1;
}

void _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void std::vector<geom::bbox<double,(unsigned char)3>>::resize(uint64_t a1, unint64_t a2, double a3, double a4, __n128 a5)
{
  unint64_t v5 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 6;
  if (a2 <= v5)
  {
    if (a2 < v5) {
      *(void *)(a1 + 8) = *(void *)a1 + (a2 << 6);
    }
  }
  else
  {
    std::vector<geom::bbox<double,(unsigned char)3>>::__append((void **)a1, a2 - v5, a3, a4, a5);
  }
}

void _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 5)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 32 * a2);
      v7 += 32 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      abort();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      double v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    }
    else {
      double v13 = 0;
    }
    double v14 = &v13[32 * v10];
    __n128 v15 = &v13[32 * v12];
    bzero(v14, 32 * a2);
    uint64_t v16 = &v14[32 * a2];
    unsigned int v18 = (char *)*a1;
    uint64_t v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        long long v19 = *((_OWORD *)v17 - 2);
        long long v20 = *((_OWORD *)v17 - 1);
        v17 -= 32;
        *((_OWORD *)v14 - 2) = v19;
        *((_OWORD *)v14 - 1) = v20;
        v14 -= 32;
      }
      while (v17 != v18);
      uint64_t v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

void std::vector<geom::bbox<double,(unsigned char)3>>::__append(void **a1, unint64_t a2, double a3, double a4, __n128 a5)
{
  unint64_t v9 = a1[2];
  uint64_t v7 = (uint64_t)(a1 + 2);
  uint64_t v8 = v9;
  uint64_t v10 = *(__n128 **)(v7 - 8);
  if (a2 <= (v9 - (unsigned char *)v10) >> 6)
  {
    if (a2)
    {
      uint64_t v17 = &v10[4 * a2];
      int64x2_t v18 = vdupq_n_s64(0x7FF0000000000000uLL);
      int64x2_t v19 = vdupq_n_s64(0xFFF0000000000000);
      do
      {
        a5.n128_u64[0] = 0x7FF0000000000000;
        __n128 *v10 = (__n128)v18;
        v10[1] = a5;
        a5.n128_u64[0] = 0xFFF0000000000000;
        v10[2] = (__n128)v19;
        v10[3] = a5;
        v10 += 4;
      }
      while (v10 != v17);
      uint64_t v10 = v17;
    }
    a1[1] = v10;
  }
  else
  {
    uint64_t v11 = (char *)v10 - (unsigned char *)*a1;
    unint64_t v12 = a2 + (v11 >> 6);
    if (v12 >> 58) {
      abort();
    }
    uint64_t v13 = v11 >> 6;
    uint64_t v14 = v8 - (unsigned char *)*a1;
    if (v14 >> 5 > v12) {
      unint64_t v12 = v14 >> 5;
    }
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v15 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v12;
    }
    if (v15) {
      uint64_t v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::bbox<double,(unsigned char)3>>>(v7, v15);
    }
    else {
      uint64_t v16 = 0;
    }
    long long v20 = &v16[64 * v13];
    unint64_t v21 = &v20[64 * a2];
    int64x2_t v22 = vdupq_n_s64(0x7FF0000000000000uLL);
    int64x2_t v23 = vdupq_n_s64(0xFFF0000000000000);
    unint64_t v24 = (__n128 *)v20;
    do
    {
      a5.n128_u64[0] = 0x7FF0000000000000;
      *unint64_t v24 = (__n128)v22;
      v24[1] = a5;
      a5.n128_u64[0] = 0xFFF0000000000000;
      v24[2] = (__n128)v23;
      v24[3] = a5;
      v24 += 4;
    }
    while (v24 != (__n128 *)v21);
    uint64_t v25 = &v16[64 * v15];
    int v27 = (char *)*a1;
    uint64_t v26 = (char *)a1[1];
    if (v26 != *a1)
    {
      do
      {
        long long v28 = *((_OWORD *)v26 - 4);
        long long v29 = *((_OWORD *)v26 - 3);
        long long v30 = *((_OWORD *)v26 - 1);
        *((_OWORD *)v20 - 2) = *((_OWORD *)v26 - 2);
        *((_OWORD *)v20 - 1) = v30;
        *((_OWORD *)v20 - 4) = v28;
        *((_OWORD *)v20 - 3) = v29;
        v20 -= 64;
        v26 -= 64;
      }
      while (v26 != v27);
      uint64_t v26 = (char *)*a1;
    }
    *a1 = v20;
    a1[1] = v21;
    a1[2] = v25;
    if (v26)
    {
      operator delete(v26);
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::bbox<double,(unsigned char)3>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >> 58) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(a2 << 6);
}

void _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA03B20;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEPNS0_6__baseISG_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA03B20;
  a2[1] = v2;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EEclESC_(uint64_t a1, unsigned int *a2, double a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(char **)(v4 + 232);
  unint64_t v6 = *(char **)(v4 + 240);
  unint64_t v7 = (v6 - v5) >> 3;
  unint64_t v8 = *a2;
  if (v7 > v8) {
    goto LABEL_19;
  }
  unint64_t v9 = (v8 + 1);
  unint64_t v10 = v9 - v7;
  if (v9 <= v7)
  {
    if (v9 >= v7) {
      goto LABEL_19;
    }
    int64x2_t v19 = &v5[8 * v9];
    goto LABEL_18;
  }
  uint64_t v11 = *(void *)(v4 + 248);
  if (v10 <= (v11 - (uint64_t)v6) >> 3)
  {
    memset(*(void **)(v4 + 240), 255, 8 * v10);
    int64x2_t v19 = &v6[8 * v10];
LABEL_18:
    *(void *)(v4 + 240) = v19;
    goto LABEL_19;
  }
  uint64_t v12 = v11 - (void)v5;
  if (v12 >> 2 > v9) {
    unint64_t v9 = v12 >> 2;
  }
  if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v13 = v9;
  }
  if (v13 >> 61) {
    goto LABEL_95;
  }
  uint64_t v14 = (char *)operator new(8 * v13);
  unint64_t v15 = &v14[8 * v7];
  uint64_t v16 = &v14[8 * v13];
  memset(v15, 255, 8 * v10);
  uint64_t v17 = &v15[8 * v10];
  if (v6 != v5)
  {
    do
    {
      uint64_t v18 = *((void *)v6 - 1);
      v6 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    while (v6 != v5);
    unint64_t v6 = v5;
  }
  *(void *)(v4 + 232) = v15;
  *(void *)(v4 + 240) = v17;
  *(void *)(v4 + 248) = v16;
  if (v6) {
    operator delete(v6);
  }
LABEL_19:
  LODWORD(a3) = a2[4];
  unsigned int v20 = sqrt((double)*(unint64_t *)&a3);
  if (v20 <= 8) {
    unint64_t v21 = 8;
  }
  else {
    unint64_t v21 = v20;
  }
  int64x2_t v22 = *(void **)(v4 + 208);
  int64x2_t v23 = *(void **)(v4 + 216);
  unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * (v23 - v22);
  unint64_t v88 = v21;
  unint64_t v25 = v21 - v24;
  if (v21 <= v24) {
    goto LABEL_42;
  }
  uint64_t v26 = *(void *)(v4 + 224);
  if (0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v23) >> 3) >= v25)
  {
    bzero(v23, 24 * ((24 * v25 - 24) / 0x18) + 24);
    *(void *)(v4 + 216) = &v23[3 * ((24 * v25 - 24) / 0x18) + 3];
    goto LABEL_42;
  }
  unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((v26 - (uint64_t)v22) >> 3);
  unint64_t v28 = 0x5555555555555556 * ((v26 - (uint64_t)v22) >> 3);
  if (v28 <= v21) {
    unint64_t v28 = v21;
  }
  if (v27 >= 0x555555555555555) {
    unint64_t v29 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v29 = v28;
  }
  if (v29 > 0xAAAAAAAAAAAAAAALL) {
LABEL_95:
  }
    std::__throw_bad_array_new_length[abi:nn180100]();
  uint64_t v30 = 3 * v29;
  float32x4_t v31 = (char *)operator new(24 * v29);
  float64x2_t v32 = &v31[8 * (v23 - v22)];
  float32x4_t v33 = &v31[8 * v30];
  size_t v34 = 24 * ((24 * v25 - 24) / 0x18) + 24;
  bzero(v32, v34);
  unint64_t v35 = &v32[v34];
  if (v23 == v22)
  {
    *(void *)(v4 + 208) = v32;
    *(void *)(v4 + 216) = v35;
    *(void *)(v4 + 224) = v33;
    if (!v23) {
      goto LABEL_42;
    }
LABEL_41:
    operator delete(v23);
    goto LABEL_42;
  }
  do
  {
    long long v36 = *(_OWORD *)(v23 - 3);
    v23 -= 3;
    *(_OWORD *)(v32 - 24) = v36;
    v32 -= 24;
    *((void *)v32 + 2) = v23[2];
    *int64x2_t v23 = 0;
    v23[1] = 0;
    v23[2] = 0;
  }
  while (v23 != v22);
  int64x2_t v23 = *(void **)(v4 + 208);
  uint64_t v37 = *(void **)(v4 + 216);
  *(void *)(v4 + 208) = v32;
  *(void *)(v4 + 216) = v35;
  *(void *)(v4 + 224) = v33;
  if (v37 != v23)
  {
    long long v38 = v37;
    do
    {
      uint64_t v40 = (void *)*(v38 - 3);
      v38 -= 3;
      uint64_t v39 = v40;
      if (v40)
      {
        *(v37 - 2) = v39;
        operator delete(v39);
      }
      uint64_t v37 = v38;
    }
    while (v38 != v23);
  }
  if (v23) {
    goto LABEL_41;
  }
LABEL_42:
  uint64_t v41 = (void *)(*(void *)(v4 + 208) + 8);
  unint64_t v42 = v88;
  do
  {
    *uint64_t v41 = *(v41 - 1);
    v41 += 3;
    --v42;
  }
  while (v42);
  unsigned int v43 = a2[4];
  if (v43)
  {
    uint64_t v44 = a2[3];
    int64x2_t v45 = (_DWORD *)(*(void *)(v4 + 32) + 4 * v44);
    for (uint64_t i = 4 * (v43 + v44) - 4 * v44; i; i -= 4)
    {
      uint64_t v47 = (3 * *v45);
      uint64_t v48 = *(void *)(v4 + 120);
      unsigned int v49 = *(_DWORD *)(v48 + 4 * v47);
      uint64_t v50 = (v47 + 1);
      unsigned int v51 = *(_DWORD *)(v48 + 4 * v50);
      if (v49 >= v51)
      {
        if (v51 >= v49) {
          goto LABEL_51;
        }
        unsigned int v89 = *(_DWORD *)(v48 + 4 * v50);
        unsigned int v90 = v49;
        int v53 = -1;
      }
      else
      {
        unsigned int v89 = *(_DWORD *)(v48 + 4 * v47);
        unsigned int v90 = v51;
        int v53 = 1;
      }
      *((_DWORD *)edge_count + 2) += v53;
      uint64_t v48 = *(void *)(v4 + 120);
      unsigned int v51 = *(_DWORD *)(v48 + 4 * v50);
LABEL_51:
      uint64_t v54 = (v47 + 2);
      unsigned int v55 = *(_DWORD *)(v48 + 4 * v54);
      if (v51 >= v55)
      {
        if (v55 >= v51) {
          goto LABEL_56;
        }
        unsigned int v89 = *(_DWORD *)(v48 + 4 * v54);
        unsigned int v90 = v51;
        int v57 = -1;
      }
      else
      {
        unsigned int v89 = v51;
        unsigned int v90 = v55;
        int v57 = 1;
      }
      *((_DWORD *)v56 + 2) += v57;
      uint64_t v48 = *(void *)(v4 + 120);
      unsigned int v55 = *(_DWORD *)(v48 + 4 * v54);
LABEL_56:
      unsigned int v58 = *(_DWORD *)(v48 + 4 * v47);
      if (v55 < v58)
      {
        unsigned int v89 = v55;
        unsigned int v90 = v58;
        int v60 = 1;
LABEL_60:
        *((_DWORD *)v59 + 2) += v60;
        goto LABEL_61;
      }
      if (v58 < v55)
      {
        unsigned int v89 = v58;
        unsigned int v90 = v55;
        int v60 = -1;
        goto LABEL_60;
      }
LABEL_61:
      ++v45;
    }
  }
  uint64_t v61 = 0;
  unsigned int v62 = 0;
  float64x2_t v63 = *(_DWORD **)(v4 + 192);
  uint64_t v86 = *(void *)(v4 + 184);
  uint64_t v87 = v63;
  do
  {
    float64x2_t v64 = (uint64_t **)(*(void *)(v4 + 208) + 24 * v61);
    float v65 = *v64;
    v66 = v64[1];
    while (v65 != v66)
    {
      if (*((_DWORD *)v65 + 2))
      {
        unint64_t v67 = *(void *)(v4 + 200);
        if ((unint64_t)v63 >= v67)
        {
          float32x4_t v70 = *(_DWORD **)(v4 + 184);
          unint64_t v71 = 0xAAAAAAAAAAAAAAABLL * (v63 - v70) + 1;
          if (v71 > 0x1555555555555555) {
            abort();
          }
          unint64_t v72 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - (void)v70) >> 2);
          if (2 * v72 > v71) {
            unint64_t v71 = 2 * v72;
          }
          if (v72 >= 0xAAAAAAAAAAAAAAALL) {
            unint64_t v73 = 0x1555555555555555;
          }
          else {
            unint64_t v73 = v71;
          }
          if (v73)
          {
            if (v73 > 0x1555555555555555) {
              goto LABEL_95;
            }
            float64x2_t v74 = (char *)operator new(12 * v73);
          }
          else
          {
            float64x2_t v74 = 0;
          }
          uint64_t v75 = *v65;
          float64x2_t v76 = &v74[4 * (v63 - v70)];
          *((_DWORD *)v76 + 2) = *((_DWORD *)v65 + 2);
          *(void *)float64x2_t v76 = v75;
          float64x2_t v77 = v76;
          if (v63 != v70)
          {
            do
            {
              uint64_t v78 = *(void *)(v63 - 3);
              v63 -= 3;
              int v79 = v63[2];
              *(void *)(v77 - 12) = v78;
              v77 -= 12;
              *((_DWORD *)v77 + 2) = v79;
            }
            while (v63 != v70);
            float64x2_t v63 = *(_DWORD **)(v4 + 184);
          }
          uint64_t v69 = v76 + 12;
          *(void *)(v4 + 184) = v77;
          *(void *)(v4 + 192) = v76 + 12;
          *(void *)(v4 + 200) = &v74[12 * v73];
          if (v63) {
            operator delete(v63);
          }
        }
        else
        {
          uint64_t v68 = *v65;
          v63[2] = *((_DWORD *)v65 + 2);
          *(void *)float64x2_t v63 = v68;
          uint64_t v69 = v63 + 3;
        }
        *(void *)(v4 + 192) = v69;
        int v80 = *((_DWORD *)v65 + 2);
        if (v80 < 0) {
          int v80 = -v80;
        }
        v62 += v80;
        float64x2_t v63 = v69;
      }
      float v65 = (uint64_t *)((char *)v65 + 12);
    }
    ++v61;
  }
  while (v61 != v88);
  int v81 = 1431655765 * (((unint64_t)v87 - v86) >> 2)
      - 1431655765 * (((unint64_t)v63 - *(void *)(v4 + 184)) >> 2);
  uint64_t v82 = (_DWORD *)(*(void *)(v4 + 232) + 8 * *a2);
  *uint64_t v82 = -1431655765 * (((unint64_t)v87 - v86) >> 2);
  v82[1] = v81;
  unsigned int v83 = a2[4];
  return v83 < 0x64 || v62 >= v83;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS_5sliceIDv3_dEENS3_IjEEEUlRNS_8bvh_nodeIdLh3EEEE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE11target_typeEv()
{
  return &_ZTIZN4geom12_GLOBAL__N_120winding_number_exactIdEC1ENS_5sliceIDv3_dEENS3_IjEEEUlRNS_8bvh_nodeIdLh3EEEE_;
}

void *std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

float geom::anonymous namespace'::winding_number_base<float>::naive_winding_number(void *a1, uint64_t a2, float32x4_t a3)
{
  int v3 = *(_DWORD *)(a2 + 16);
  if (v3)
  {
    float32x4_t v4 = a3;
    uint64_t v5 = *(unsigned int *)(a2 + 12);
    unint64_t v6 = (int *)(a1[4] + 4 * v5);
    uint64_t v7 = a1[15];
    uint64_t v8 = a1[13];
    uint64_t v9 = 4 * (v3 + v5) - 4 * v5;
    float v10 = 0.0;
    do
    {
      int v11 = *v6++;
      float32x4_t v12 = vsubq_f32(*(float32x4_t *)(v8 + 16 * *(unsigned int *)(v7 + 4 * (3 * v11))), v4);
      float32x4_t v13 = vsubq_f32(*(float32x4_t *)(v8 + 16 * *(unsigned int *)(v7 + 4 * (3 * v11 + 1))), v4);
      float32x4_t v14 = vmulq_f32(v12, v12);
      float32x4_t v15 = vsubq_f32(*(float32x4_t *)(v8 + 16 * *(unsigned int *)(v7 + 4 * (3 * v11 + 2))), v4);
      float32x4_t v16 = vmulq_f32(v13, v13);
      LODWORD(v17) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).u32[0];
      float32x4_t v18 = vmulq_f32(v15, v15);
      v14.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0]);
      float v19 = sqrtf(v17);
      v18.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]);
      float32x4_t v20 = vmulq_f32(v12, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8((int8x16_t)v15, (int8x16_t)v15, 0xCuLL), (int8x16_t)v15, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8((int8x16_t)v13, (int8x16_t)v13, 0xCuLL), (int8x16_t)v13, 8uLL)));
      float32x4_t v21 = vmulq_f32(v12, v13);
      float32x4_t v22 = vmulq_f32(v13, v15);
      float32x4_t v23 = vmulq_f32(v12, v15);
      float v24 = atan2f(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0], vmlas_n_f32(vmlas_n_f32((float)(v18.f32[0]* vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0])+ (float)((float)(v14.f32[0] * v19) * v18.f32[0]), v14.f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]), v19, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]));
      float32x4_t v4 = a3;
      float v10 = v10 + (float)(v24 + v24);
      v9 -= 4;
    }
    while (v9);
    double v25 = v10;
  }
  else
  {
    double v25 = 0.0;
  }
  return v25 / 12.5663706;
}

double geom::anonymous namespace'::winding_number_base<double>::naive_winding_number(void *a1, float64x2_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(a3 + 16);
  if (v3)
  {
    float64x2_t v30 = *a2;
    float64x2_t v31 = a2[1];
    uint64_t v4 = *(unsigned int *)(a3 + 12);
    uint64_t v5 = (int *)(a1[4] + 4 * v4);
    uint64_t v6 = a1[15];
    uint64_t v7 = a1[13];
    uint64_t v8 = 4 * (v3 + v4) - 4 * v4;
    double v9 = 0.0;
    do
    {
      int v10 = *v5++;
      int v11 = (float64x2_t *)(v7 + 32 * *(unsigned int *)(v6 + 4 * (3 * v10)));
      float64x2_t v12 = vsubq_f64(*v11, v30);
      float64x2_t v13 = vsubq_f64(v11[1], v31);
      float32x4_t v14 = (float64x2_t *)(v7 + 32 * *(unsigned int *)(v6 + 4 * (3 * v10 + 1)));
      float64x2_t v15 = vsubq_f64(*v14, v30);
      float32x4_t v16 = (float64x2_t *)(v7 + 32 * *(unsigned int *)(v6 + 4 * (3 * v10 + 2)));
      float64x2_t v17 = vsubq_f64(v14[1], v31);
      float64x2_t v18 = vsubq_f64(*v16, v30);
      float64x2_t v19 = vsubq_f64(v16[1], v31);
      double v20 = sqrt(vmulq_f64(v13, v13).f64[0] + vaddvq_f64(vmulq_f64(v12, v12)));
      double v21 = sqrt(vmulq_f64(v17, v17).f64[0] + vaddvq_f64(vmulq_f64(v15, v15)));
      double v22 = sqrt(vmulq_f64(v19, v19).f64[0] + vaddvq_f64(vmulq_f64(v18, v18)));
      float64x2_t v23 = (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v17, 8uLL);
      float64x2_t v24 = (float64x2_t)vextq_s8((int8x16_t)v18, (int8x16_t)v19, 8uLL);
      double v25 = vmulq_f64(v17, v19).f64[0];
      double v26 = vmulq_f64(v13, v19).f64[0];
      v19.f64[1] = v18.f64[0];
      double v27 = vmulq_f64(v13, v17).f64[0];
      v17.f64[1] = v15.f64[0];
      long double v28 = atan2(vmulq_f64(v13, vmlaq_laneq_f64(vmulq_f64(v18, vnegq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v15, 1))), v15, v18, 1)).f64[0]+ vaddvq_f64(vmulq_f64(v12, vmlaq_f64(vmulq_f64(v24, vnegq_f64(v17)), v19, v23))), (v27 + vaddvq_f64(vmulq_f64(v12, v15))) * v22+ v20 * v21 * v22+ (v25 + vaddvq_f64(vmulq_f64(v15, v18))) * v20+ (v26 + vaddvq_f64(vmulq_f64(v12, v18))) * v21);
      double v9 = v9 + v28 + v28;
      v8 -= 4;
    }
    while (v8);
  }
  else
  {
    double v9 = 0.0;
  }
  return v9 / 12.5663706;
}

uint64_t geom::anonymous namespace'::winding_number_base<float>::~winding_number_base(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(void *)(a1 + 168) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(void *)(a1 + 144) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 96) && *v4) {
    MEMORY[0x237E10700](*v4, 0x1000C80E0EAB150);
  }
  *uint64_t v4 = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  uint64_t v5 = (void *)(a1 + 56);
  if (*(unsigned char *)(a1 + 72) && *v5) {
    MEMORY[0x237E10700](*v5, 0x1000C80451B5BE8);
  }
  *uint64_t v5 = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *(void *)(a1 + 40) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(void *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

uint64_t geom::anonymous namespace'::winding_number_base<double>::~winding_number_base(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 160);
  if (v2)
  {
    *(void *)(a1 + 168) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 136);
  if (v3)
  {
    *(void *)(a1 + 144) = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)(a1 + 80);
  if (*(unsigned char *)(a1 + 96) && *v4) {
    MEMORY[0x237E10700](*v4, 0x1000C80FA0F61DDLL);
  }
  *uint64_t v4 = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  uint64_t v5 = (void *)(a1 + 56);
  if (*(unsigned char *)(a1 + 72) && *v5) {
    MEMORY[0x237E10700](*v5, 0x1000C80E0EAB150);
  }
  *uint64_t v5 = 0;
  *(void *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 72) = 0;
  uint64_t v6 = *(void **)(a1 + 32);
  if (v6)
  {
    *(void *)(a1 + 40) = v6;
    operator delete(v6);
  }
  uint64_t v7 = *(void **)(a1 + 8);
  if (v7)
  {
    *(void *)(a1 + 16) = v7;
    operator delete(v7);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEv(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA03BB0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEPNS0_6__baseISG_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA03BB0;
  a2[1] = v2;
  return result;
}

float _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EEclESC_(uint64_t a1, unsigned int *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v5 = *(char **)(v3 + 192);
  uint64_t v4 = *(char **)(v3 + 200);
  unint64_t v6 = 0xEEEEEEEEEEEEEEEFLL * ((v4 - v5) >> 4);
  unint64_t v7 = *a2;
  if (v6 > v7) {
    goto LABEL_18;
  }
  unint64_t v8 = (v7 + 1);
  unint64_t v9 = v8 - v6;
  if (v8 <= v6)
  {
    if (v8 >= v6) {
      goto LABEL_18;
    }
    long double v28 = &v5[240 * v8];
    goto LABEL_17;
  }
  uint64_t v10 = *(void *)(v3 + 208);
  if (0xEEEEEEEEEEEEEEEFLL * ((v10 - (uint64_t)v4) >> 4) >= v9)
  {
    bzero(*(void **)(v3 + 200), 240 * ((240 * v9 - 240) / 0xF0) + 240);
    long double v28 = &v4[240 * ((240 * v9 - 240) / 0xF0) + 240];
LABEL_17:
    *(void *)(v3 + 200) = v28;
    goto LABEL_18;
  }
  unint64_t v11 = 0xEEEEEEEEEEEEEEEFLL * ((v10 - (uint64_t)v5) >> 4);
  if (2 * v11 > v8) {
    unint64_t v8 = 2 * v11;
  }
  if (v11 >= 0x88888888888888) {
    unint64_t v8 = 0x111111111111111;
  }
  if (v8 > 0x111111111111111) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v12 = 240 * v8;
  float64x2_t v13 = (char *)operator new(240 * v8);
  float32x4_t v14 = &v13[16 * ((v4 - v5) >> 4)];
  float64x2_t v15 = &v13[v12];
  bzero(v14, 240 * ((240 * v9 - 240) / 0xF0) + 240);
  float32x4_t v16 = &v14[240 * ((240 * v9 - 240) / 0xF0) + 240];
  if (v4 != v5)
  {
    do
    {
      long long v17 = *((_OWORD *)v4 - 15);
      long long v18 = *((_OWORD *)v4 - 13);
      *((_OWORD *)v14 - 14) = *((_OWORD *)v4 - 14);
      *((_OWORD *)v14 - 13) = v18;
      *((_OWORD *)v14 - 15) = v17;
      long long v19 = *((_OWORD *)v4 - 12);
      long long v20 = *((_OWORD *)v4 - 11);
      long long v21 = *((_OWORD *)v4 - 9);
      *((_OWORD *)v14 - 10) = *((_OWORD *)v4 - 10);
      *((_OWORD *)v14 - 9) = v21;
      *((_OWORD *)v14 - 12) = v19;
      *((_OWORD *)v14 - 11) = v20;
      long long v22 = *((_OWORD *)v4 - 8);
      long long v23 = *((_OWORD *)v4 - 7);
      long long v24 = *((_OWORD *)v4 - 5);
      *((_OWORD *)v14 - 6) = *((_OWORD *)v4 - 6);
      *((_OWORD *)v14 - 5) = v24;
      *((_OWORD *)v14 - 8) = v22;
      *((_OWORD *)v14 - 7) = v23;
      long long v25 = *((_OWORD *)v4 - 4);
      long long v26 = *((_OWORD *)v4 - 3);
      long long v27 = *((_OWORD *)v4 - 1);
      *((_OWORD *)v14 - 2) = *((_OWORD *)v4 - 2);
      *((_OWORD *)v14 - 1) = v27;
      *((_OWORD *)v14 - 4) = v25;
      *((_OWORD *)v14 - 3) = v26;
      v14 -= 240;
      v4 -= 240;
    }
    while (v4 != v5);
    uint64_t v4 = v5;
  }
  *(void *)(v3 + 192) = v14;
  *(void *)(v3 + 200) = v16;
  *(void *)(v3 + 208) = v15;
  if (v4) {
    operator delete(v4);
  }
LABEL_18:
  unsigned int v29 = *a2;
  uint64_t v30 = *(void *)(v3 + 192);
  uint64_t v31 = v30 + 240 * *a2;
  *(void *)(v31 + 32) = 0;
  *(void *)(v31 + 48) = 0;
  float64x2_t v32 = (float32x4_t *)(v31 + 48);
  float32x4_t v33 = 0uLL;
  *(void *)(v31 + 64) = 0;
  size_t v34 = (float32x4_t *)(v31 + 64);
  *(_DWORD *)(v31 + 72) = 0;
  *(void *)(v31 + 80) = 0;
  unint64_t v35 = (float32x4_t *)(v31 + 80);
  *(_DWORD *)(v31 + 88) = 0;
  *(_DWORD *)(v31 + 200) = 0;
  *(void *)(v31 + 192) = 0;
  *(_DWORD *)(v31 + 216) = 0;
  *(void *)(v31 + 208) = 0;
  *(_DWORD *)(v31 + 232) = 0;
  *(void *)(v31 + 224) = 0;
  *(void *)(v31 + 40) = 0;
  *(_DWORD *)(v31 + 56) = 0;
  long long v36 = *(_OWORD *)(v31 + 192);
  float32x4_t v40 = *(float32x4_t *)(v31 + 208);
  long long v37 = *(_OWORD *)(v31 + 224);
  *(float32x4_t *)(v31 + 160) = v40;
  *(_OWORD *)(v31 + 176) = v37;
  *(_OWORD *)(v31 + 128) = v37;
  *(_OWORD *)(v31 + 144) = v36;
  *(_OWORD *)(v31 + 96) = v36;
  *(float32x4_t *)(v31 + 112) = v40;
  *(_OWORD *)uint64_t v31 = 0u;
  unsigned int v38 = a2[4];
  float v39 = 0.0;
  v40.i64[0] = 0;
  if (v38)
  {
    uint64_t v41 = a2[3];
    uint64_t v42 = v38 + v41;
    unsigned int v43 = (unsigned int *)(*(void *)(v3 + 32) + 4 * v41);
    uint64_t v44 = 4 * v42 - 4 * v41;
    do
    {
      unsigned int v45 = *v43++;
      float32x4_t v40 = *(float32x4_t *)(*(void *)(v3 + 136) + 16 * v45);
      float32x4_t v33 = vaddq_f32(v33, v40);
      *(float32x4_t *)uint64_t v31 = v33;
      v44 -= 4;
    }
    while (v44);
    v40.f32[0] = (float)a2[4];
  }
  *(float32x4_t *)uint64_t v31 = vdivq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 0));
  unsigned int v46 = a2[4];
  if (v46)
  {
    uint64_t v47 = (float32x4_t *)(v31 + 96);
    uint64_t v48 = a2[3];
    uint64_t v49 = v46 + v48;
    uint64_t v50 = (int *)(*(void *)(v3 + 32) + 4 * v48);
    unsigned int v51 = (float32x4_t *)(v30 + 240 * v29);
    char v52 = v51 + 9;
    int v53 = v51 + 10;
    uint64_t v54 = v51 + 11;
    unsigned int v55 = v51 + 12;
    float64x2_t v56 = v51 + 13;
    int v57 = v51 + 14;
    uint64_t v58 = 4 * v49 - 4 * v48;
    float v39 = 0.0;
    v59.i64[0] = 0x3F0000003F000000;
    v59.i64[1] = 0x3F0000003F000000;
    __asm { FMOV            V2.4S, #3.0 }
    float32x4_t v65 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    do
    {
      int v66 = *v50++;
      uint64_t v67 = *(void *)(v3 + 120);
      uint64_t v68 = *(unsigned int *)(v67 + 4 * (3 * v66));
      uint64_t v69 = *(unsigned int *)(v67 + 4 * (3 * v66 + 1));
      uint64_t v70 = *(void *)(v3 + 104);
      uint64_t v71 = *(unsigned int *)(v67 + 4 * (3 * v66 + 2));
      float32x4_t v72 = *(float32x4_t *)(v70 + 16 * v68);
      float32x4_t v73 = *(float32x4_t *)v31;
      float32x4_t v74 = vsubq_f32(v72, *(float32x4_t *)v31);
      float32x4_t v75 = vmulq_f32(v74, v74);
      float32x4_t v76 = *(float32x4_t *)(v70 + 16 * v69);
      float32x4_t v77 = vsubq_f32(v76, *(float32x4_t *)v31);
      float32x4_t v78 = vmulq_f32(v77, v77);
      float32x4_t v79 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2);
      float32x4_t v80 = vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1));
      float32x4_t v81 = *(float32x4_t *)(v70 + 16 * v71);
      float32x4_t v82 = vsubq_f32(v81, *(float32x4_t *)v31);
      float32x4_t v83 = vmulq_f32(v82, v82);
      float32x4_t v84 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1)));
      float32x4_t v85 = vaddq_f32(v79, v80);
      LODWORD(v86) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).u32[0];
      float32x4_t v87 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), (int8x16_t)v72, 0xCuLL);
      float32x4_t v88 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), (int8x16_t)v76, 0xCuLL);
      float32x4_t v89 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v81, (int32x4_t)v81), (int8x16_t)v81, 0xCuLL);
      float32x4_t v90 = vaddq_f32(vmlaq_f32(vmulq_f32(v87, vnegq_f32(v81)), v72, v89), vaddq_f32(vmlaq_f32(vmulq_f32(v88, vnegq_f32(v72)), v76, v87), vmlaq_f32(vmulq_f32(v89, vnegq_f32(v76)), v81, v88)));
      if (vmovn_s32(vcgtq_f32(v85, v84)).u8[0]) {
        v84.f32[0] = v85.f32[0];
      }
      float32x4_t v91 = vmulq_f32(v90, v59);
      *(float32x4_t *)(v31 + 32) = vaddq_f32(*(float32x4_t *)(v31 + 32), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v91, (int32x4_t)v91), (int8x16_t)v91, 0xCuLL));
      if (v86 >= v39) {
        float v39 = v86;
      }
      float32x4_t v92 = *v35;
      float32x4_t v93 = vsubq_f32(vdivq_f32(vaddq_f32(vaddq_f32(*(float32x4_t *)(v70 + 16 * v68), *(float32x4_t *)(v70 + 16 * v69)), *(float32x4_t *)(v70 + 16 * v71)), _Q2), v73);
      float32x4_t v94 = vaddq_f32(*v32, vmulq_laneq_f32(v93, v91, 2));
      float32x4_t v95 = vaddq_f32(*v34, vmulq_n_f32(v93, v91.f32[0]));
      *(_DWORD *)(v31 + 56) = v94.i32[2];
      float32x4_t v96 = vaddq_f32(v92, vmulq_lane_f32(v93, *(float32x2_t *)v91.f32, 1));
      v32->i64[0] = v94.i64[0];
      *(_DWORD *)(v31 + 72) = v95.i32[2];
      v34->i64[0] = v95.i64[0];
      *(_DWORD *)(v31 + 88) = v96.i32[2];
      v35->i64[0] = v96.i64[0];
      float32x4_t v97 = *(float32x4_t *)(v70 + 16 * v68);
      float32x4_t v98 = *(float32x4_t *)(v70 + 16 * v69);
      float32x4_t v99 = *(float32x4_t *)(v70 + 16 * v71);
      float32x4_t v100 = vsubq_f32(vmulq_f32(vaddq_f32(v97, v98), v59), v73);
      float32x4_t v101 = vsubq_f32(vmulq_f32(vaddq_f32(v98, v99), v59), v73);
      float32x4_t v102 = vaddq_f32(v97, v99);
      if (v84.f32[0] >= v39) {
        float v39 = v84.f32[0];
      }
      float32x4_t v103 = vsubq_f32(vmulq_f32(v102, v59), v73);
      float32x4_t v104 = vmlaq_f32(vmulq_f32(vmulq_lane_f32(v101, *(float32x2_t *)v101.f32, 1), v65), v65, vmulq_lane_f32(v100, *(float32x2_t *)v100.f32, 1));
      float32x4_t v105 = vmlaq_f32(vmulq_f32(vmulq_laneq_f32(v101, v101, 2), v65), v65, vmulq_laneq_f32(v100, v100, 2));
      float32x4_t v106 = vaddq_f32(vmulq_f32(vmulq_n_f32(v103, v103.f32[0]), v65), vmlaq_f32(vmulq_f32(vmulq_n_f32(v101, v101.f32[0]), v65), v65, vmulq_n_f32(v100, v100.f32[0])));
      float32x4_t v107 = vaddq_f32(vmulq_f32(vmulq_lane_f32(v103, *(float32x2_t *)v103.f32, 1), v65), v104);
      float32x4_t v108 = vaddq_f32(vmulq_f32(vmulq_laneq_f32(v103, v103, 2), v65), v105);
      float32x4_t v109 = vmulq_laneq_f32(v106, v91, 2);
      float32x4_t v110 = vmulq_laneq_f32(v107, v91, 2);
      float32x4_t v111 = vmulq_laneq_f32(v108, v91, 2);
      float32x4_t v112 = vmulq_n_f32(v106, v91.f32[0]);
      float32x4_t v113 = vmulq_n_f32(v107, v91.f32[0]);
      float32x4_t v114 = vmulq_n_f32(v108, v91.f32[0]);
      float32x4_t v115 = vmulq_lane_f32(v106, *(float32x2_t *)v91.f32, 1);
      float32x4_t v116 = vmulq_lane_f32(v107, *(float32x2_t *)v91.f32, 1);
      float32x4_t v117 = vmulq_lane_f32(v108, *(float32x2_t *)v91.f32, 1);
      float32x4_t v118 = vaddq_f32(*v47, v109);
      float32x4_t v119 = vaddq_f32(*(float32x4_t *)(v31 + 112), v110);
      *uint64_t v47 = v118;
      *(float32x4_t *)(v31 + 112) = v119;
      float32x4_t v120 = *v52;
      *(float32x4_t *)(v31 + 128) = vaddq_f32(*(float32x4_t *)(v31 + 128), v111);
      *char v52 = vaddq_f32(v120, v112);
      float32x4_t v121 = *v54;
      *int v53 = vaddq_f32(*v53, v113);
      float32x4_t *v54 = vaddq_f32(v114, v121);
      float32x4_t v122 = *v56;
      *unsigned int v55 = vaddq_f32(v115, *v55);
      *float64x2_t v56 = vaddq_f32(v116, v122);
      float32x4_t *v57 = vaddq_f32(v117, *v57);
      v58 -= 4;
    }
    while (v58);
  }
  float result = sqrtf(v39);
  *(float *)(v30 + 240 * v29 + 16) = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS_5sliceIDv3_fEENS3_IjEEEUlRNS_8bvh_nodeIfLh3EEEE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS2_5sliceIDv3_fEENS6_IjEEEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE11target_typeEv()
{
  return &_ZTIZN4geom12_GLOBAL__N_126winding_number_approximateIfEC1ENS_5sliceIDv3_fEENS3_IjEEEUlRNS_8bvh_nodeIfLh3EEEE_;
}

void _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEv(uint64_t a1)
{
  float result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *float result = &unk_26EA03C30;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEPNS0_6__baseISG_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA03C30;
  a2[1] = v2;
  return result;
}

double _ZNSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EEclESC_(uint64_t a1, unsigned int *a2, double a3, double a4, double a5, float64x2_t a6)
{
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v9 = *(char **)(v7 + 192);
  unint64_t v8 = *(char **)(v7 + 200);
  unint64_t v10 = 0x34F72C234F72C235 * ((v8 - v9) >> 4);
  unint64_t v11 = *a2;
  if (v10 > v11) {
    goto LABEL_18;
  }
  unint64_t v12 = (v11 + 1);
  unint64_t v13 = v12 - v10;
  if (v12 <= v10)
  {
    if (v12 >= v10) {
      goto LABEL_18;
    }
    long long v21 = &v9[464 * v12];
    goto LABEL_17;
  }
  uint64_t v14 = *(void *)(v7 + 208);
  if (0x34F72C234F72C235 * ((v14 - (uint64_t)v8) >> 4) >= v13)
  {
    bzero(*(void **)(v7 + 200), 464 * ((464 * v13 - 464) / 0x1D0) + 464);
    long long v21 = &v8[464 * ((464 * v13 - 464) / 0x1D0) + 464];
LABEL_17:
    *(void *)(v7 + 200) = v21;
    goto LABEL_18;
  }
  unint64_t v15 = 0x34F72C234F72C235 * ((v14 - (uint64_t)v9) >> 4);
  if (2 * v15 > v12) {
    unint64_t v12 = 2 * v15;
  }
  if (v15 >= 0x469EE58469EE58) {
    unint64_t v12 = 0x8D3DCB08D3DCB0;
  }
  if (v12 > 0x8D3DCB08D3DCB0) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  uint64_t v16 = 464 * v12;
  long long v17 = (char *)operator new(464 * v12);
  long long v18 = &v17[16 * ((v8 - v9) >> 4)];
  long long v19 = &v17[v16];
  bzero(v18, 464 * ((464 * v13 - 464) / 0x1D0) + 464);
  long long v20 = &v18[464 * ((464 * v13 - 464) / 0x1D0) + 464];
  if (v8 != v9)
  {
    do
    {
      v8 -= 464;
      v18 -= 464;
      memcpy(v18, v8, 0x1D0uLL);
    }
    while (v8 != v9);
    unint64_t v8 = v9;
  }
  *(void *)(v7 + 192) = v18;
  *(void *)(v7 + 200) = v20;
  *(void *)(v7 + 208) = v19;
  if (v8) {
    operator delete(v8);
  }
LABEL_18:
  unsigned int v22 = *a2;
  uint64_t v23 = *(void *)(v7 + 192);
  uint64_t v24 = v23 + 464 * *a2;
  float64x2_t v25 = 0uLL;
  *(_OWORD *)(v24 + 48) = 0u;
  *(_OWORD *)(v24 + 80) = 0u;
  *(_OWORD *)(v24 + 176) = 0u;
  *(_OWORD *)uint64_t v24 = 0u;
  *(_OWORD *)(v24 + 16) = 0u;
  *(_OWORD *)(v24 + 64) = 0u;
  *(_OWORD *)(v24 + 96) = 0u;
  *(_OWORD *)(v24 + 112) = 0u;
  *(_OWORD *)(v24 + 128) = 0u;
  *(_OWORD *)(v24 + 144) = 0u;
  *(_OWORD *)(v24 + 160) = 0u;
  *(_OWORD *)(v24 + 192) = 0u;
  *(_OWORD *)(v24 + 208) = 0u;
  *(_OWORD *)(v24 + 224) = 0u;
  *(_OWORD *)(v24 + 240) = 0u;
  *(_OWORD *)(v24 + 256) = 0u;
  *(_OWORD *)(v24 + 272) = 0u;
  *(_OWORD *)(v24 + 288) = 0u;
  *(_OWORD *)(v24 + 304) = 0u;
  *(_OWORD *)(v24 + 320) = 0u;
  *(_OWORD *)(v24 + 336) = 0u;
  *(_OWORD *)(v24 + 352) = 0u;
  *(_OWORD *)(v24 + 368) = 0u;
  *(_OWORD *)(v24 + 384) = 0u;
  *(_OWORD *)(v24 + 400) = 0u;
  *(_OWORD *)(v24 + 416) = 0u;
  *(_OWORD *)(v24 + 432) = 0u;
  *(_OWORD *)(v24 + 448) = 0u;
  double v26 = 0.0;
  unsigned int v27 = a2[4];
  if (v27)
  {
    uint64_t v28 = a2[3];
    uint64_t v29 = v27 + v28;
    uint64_t v30 = (unsigned int *)(*(void *)(v7 + 32) + 4 * v28);
    uint64_t v31 = 4 * v29 - 4 * v28;
    float64x2_t v32 = 0uLL;
    do
    {
      unsigned int v33 = *v30++;
      uint64_t v34 = *(void *)(v7 + 136) + 32 * v33;
      a6 = *(float64x2_t *)(v34 + 16);
      float64x2_t v25 = vaddq_f64(v25, *(float64x2_t *)v34);
      float64x2_t v32 = vaddq_f64(v32, a6);
      *(float64x2_t *)uint64_t v24 = v25;
      *(float64x2_t *)(v24 + 16) = v32;
      v31 -= 4;
    }
    while (v31);
    LODWORD(a6.f64[0]) = a2[4];
    a6.f64[0] = (double)*(unint64_t *)&a6.f64[0];
  }
  else
  {
    float64x2_t v32 = 0uLL;
    a6.f64[0] = 0.0;
  }
  *(float64x2_t *)uint64_t v24 = vdivq_f64(v25, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a6.f64[0], 0));
  *(float64x2_t *)(v24 + 16) = vdivq_f64(v32, a6);
  unsigned int v35 = a2[4];
  if (v35)
  {
    uint64_t v36 = a2[3];
    uint64_t v37 = v35 + v36;
    unsigned int v38 = (int *)(*(void *)(v7 + 32) + 4 * v36);
    float v39 = (float64x2_t *)(v23 + 464 * v22);
    float32x4_t v40 = v39 + 17;
    uint64_t v41 = v39 + 19;
    uint64_t v42 = v39 + 21;
    unsigned int v43 = v39 + 23;
    uint64_t v44 = v39 + 25;
    unsigned int v45 = v39 + 27;
    uint64_t v46 = 4 * v37 - 4 * v36;
    double v26 = 0.0;
    __asm
    {
      FMOV            V1.2D, #0.5
      FMOV            V2.2D, #3.0
    }
    a6.f64[0] = 0.333333333;
    float64x2_t v53 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
    do
    {
      int v54 = *v38++;
      uint64_t v55 = *(void *)(v7 + 120);
      uint64_t v56 = *(void *)(v7 + 104);
      int v57 = (float64x2_t *)(v56 + 32 * *(unsigned int *)(v55 + 4 * (3 * v54)));
      uint64_t v58 = (float64x2_t *)(v56 + 32 * *(unsigned int *)(v55 + 4 * (3 * v54 + 1)));
      float32x4_t v59 = (float64x2_t *)(v56 + 32 * *(unsigned int *)(v55 + 4 * (3 * v54 + 2)));
      float64x2_t v60 = v57[1];
      float64x2_t v62 = *(float64x2_t *)v24;
      float64x2_t v61 = *(float64x2_t *)(v24 + 16);
      float64x2_t v63 = vsubq_f64(*v57, *(float64x2_t *)v24);
      float64x2_t v64 = vsubq_f64(v60, v61);
      float64x2_t v65 = v58[1];
      float64x2_t v66 = vsubq_f64(*v58, *(float64x2_t *)v24);
      float64x2_t v67 = vsubq_f64(v65, v61);
      float64x2_t v68 = v59[1];
      float64x2_t v69 = vsubq_f64(*v59, *(float64x2_t *)v24);
      float64x2_t v70 = vsubq_f64(v68, v61);
      float64x2_t v71 = vnegq_f64(v60);
      double v72 = vmulq_f64(v64, v64).f64[0] + vaddvq_f64(vmulq_f64(v63, v63));
      float64x2_t v73 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v68), *v57, 1), v60, *v59, 1);
      v60.f64[1] = v57->f64[0];
      double v74 = vmulq_f64(v67, v67).f64[0] + vaddvq_f64(vmulq_f64(v66, v66));
      v67.f64[0] = vaddvq_f64(vmulq_f64(v69, v69));
      float64x2_t v75 = vmlaq_laneq_f64(vmulq_laneq_f64(v71, *v58, 1), v65, *v57, 1);
      float64x2_t v76 = vnegq_f64(v65);
      double v77 = vmulq_f64(v70, v70).f64[0] + v67.f64[0];
      v65.f64[1] = v58->f64[0];
      float64x2_t v78 = vmlaq_laneq_f64(vmulq_laneq_f64(v76, *v59, 1), v68, *v58, 1);
      v68.f64[1] = v59->f64[0];
      float64x2_t v79 = vmulq_f64(vaddq_f64(vmlaq_f64(vmulq_f64(v60, vnegq_f64(*v59)), *v57, v68), vaddq_f64(vmlaq_f64(vmulq_f64(v65, vnegq_f64(*v57)), *v58, v60), vmlaq_f64(vmulq_f64(v68, vnegq_f64(*v58)), *v59, v65))), _Q1);
      float64x2_t v80 = vmulq_f64(vaddq_f64(v73, vaddq_f64(v75, v78)), _Q1);
      if (v72 < v74) {
        double v72 = v74;
      }
      v81.f64[0] = v80.f64[0];
      v81.f64[1] = v79.f64[0];
      float64x2_t v82 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v79, 1);
      if (v77 >= v26) {
        double v26 = v77;
      }
      float64x2_t v83 = vaddq_f64(*(float64x2_t *)(v24 + 64), v82);
      *(float64x2_t *)(v24 + 48) = vaddq_f64(*(float64x2_t *)(v24 + 48), v81);
      *(float64x2_t *)(v24 + 64) = v83;
      if (v72 >= v26) {
        double v26 = v72;
      }
      float64x2_t v84 = vsubq_f64(vdivq_f64(vaddq_f64(vaddq_f64(*v57, *v58), *v59), _Q2), v62);
      float64x2_t v85 = vsubq_f64(vdivq_f64(vaddq_f64(vaddq_f64(v57[1], v58[1]), v59[1]), _Q2), v61);
      float64x2_t v86 = vaddq_f64(*(float64x2_t *)(v24 + 96), vmulq_f64(v80, v85));
      float64x2_t v87 = vaddq_f64(*(float64x2_t *)(v24 + 112), vmulq_n_f64(v84, v79.f64[0]));
      float64x2_t v88 = vaddq_f64(*(float64x2_t *)(v24 + 128), vmulq_f64(v79, v85));
      float64x2_t v89 = vaddq_f64(*(float64x2_t *)(v24 + 144), vmulq_laneq_f64(v84, v79, 1));
      float64x2_t v90 = vaddq_f64(*(float64x2_t *)(v24 + 160), vmulq_laneq_f64(v85, v79, 1));
      *(float64x2_t *)(v24 + 80) = vaddq_f64(*(float64x2_t *)(v24 + 80), vmulq_n_f64(v84, v80.f64[0]));
      *(float64x2_t *)(v24 + 96) = v86;
      *(float64x2_t *)(v24 + 112) = v87;
      *(float64x2_t *)(v24 + 128) = v88;
      *(float64x2_t *)(v24 + 144) = v89;
      *(float64x2_t *)(v24 + 160) = v90;
      float64x2_t v91 = v57[1];
      float64x2_t v92 = v58[1];
      float64x2_t v93 = vsubq_f64(vmulq_f64(vaddq_f64(*v57, *v58), _Q1), v62);
      float64x2_t v94 = v59[1];
      float64x2_t v95 = vsubq_f64(vmulq_f64(vaddq_f64(v91, v92), _Q1), v61);
      float64x2_t v96 = vsubq_f64(vmulq_f64(vaddq_f64(*v58, *v59), _Q1), v62);
      float64x2_t v97 = vsubq_f64(vmulq_f64(vaddq_f64(v92, v94), _Q1), v61);
      float64x2_t v98 = vsubq_f64(vmulq_f64(vaddq_f64(*v57, *v59), _Q1), v62);
      float64x2_t v99 = vsubq_f64(vmulq_f64(vaddq_f64(v91, v94), _Q1), v61);
      float64x2_t v100 = vmlaq_f64(vmulq_f64(vmulq_f64(v97, v96), a6), a6, vmulq_f64(v95, v93));
      float64x2_t v101 = vmlaq_f64(vmulq_f64(vmulq_n_f64(v96, v96.f64[0]), v53), v53, vmulq_n_f64(v93, v93.f64[0]));
      float64x2_t v102 = vmlaq_f64(vmulq_f64(vmulq_laneq_f64(v97, v96, 1), a6), a6, vmulq_laneq_f64(v95, v93, 1));
      float64x2_t v103 = vmlaq_f64(vmulq_f64(vmulq_laneq_f64(v96, v96, 1), v53), v53, vmulq_laneq_f64(v93, v93, 1));
      float64x2_t v104 = vmlaq_f64(vmulq_f64(vmulq_n_f64(v96, v97.f64[0]), v53), v53, vmulq_n_f64(v93, v95.f64[0]));
      float64x2_t v105 = vmlaq_f64(vmulq_f64(vmulq_f64(v97, v97), a6), a6, vmulq_f64(v95, v95));
      float64x2_t v106 = vaddq_f64(vmulq_f64(vmulq_f64(v99, v98), a6), v100);
      float64x2_t v107 = vaddq_f64(vmulq_f64(vmulq_n_f64(v98, v98.f64[0]), v53), v101);
      float64x2_t v108 = vaddq_f64(vmulq_f64(vmulq_laneq_f64(v99, v98, 1), a6), v102);
      float64x2_t v109 = vaddq_f64(vmulq_f64(vmulq_laneq_f64(v98, v98, 1), v53), v103);
      float64x2_t v111 = *(float64x2_t *)(v24 + 240);
      float64x2_t v110 = *(float64x2_t *)(v24 + 256);
      float64x2_t v112 = *v40;
      float64x2_t v113 = v40[1];
      float64x2_t v114 = vaddq_f64(vmulq_f64(vmulq_n_f64(v98, v99.f64[0]), v53), v104);
      float64x2_t v115 = vaddq_f64(vmulq_f64(vmulq_f64(v99, v99), a6), v105);
      float64x2_t v116 = vmulq_f64(v80, v106);
      float64x2_t v117 = vmulq_n_f64(v107, v80.f64[0]);
      float64x2_t v118 = vmulq_f64(v80, v108);
      float64x2_t v119 = vmulq_n_f64(v109, v80.f64[0]);
      float64x2_t v120 = vmulq_f64(v80, v115);
      float64x2_t v121 = vmulq_n_f64(v114, v80.f64[0]);
      float64x2_t v122 = vmulq_f64(v79, v106);
      float64x2_t v123 = vmulq_n_f64(v107, v79.f64[0]);
      float64x2_t v124 = vmulq_f64(v79, v108);
      float64x2_t v125 = vaddq_f64(*(float64x2_t *)(v24 + 192), v116);
      float64x2_t v126 = vaddq_f64(*(float64x2_t *)(v24 + 208), v119);
      float64x2_t v127 = vmulq_n_f64(v109, v79.f64[0]);
      float64x2_t v128 = vaddq_f64(*(float64x2_t *)(v24 + 224), v118);
      float64x2_t v129 = vmulq_n_f64(v114, v79.f64[0]);
      *(float64x2_t *)(v24 + 176) = vaddq_f64(*(float64x2_t *)(v24 + 176), v117);
      *(float64x2_t *)(v24 + 192) = v125;
      float64x2_t v130 = vmulq_f64(v79, v115);
      float64x2_t v131 = vmulq_laneq_f64(v106, v79, 1);
      float64x2_t v132 = vmulq_laneq_f64(v107, v79, 1);
      float64x2_t v133 = vmulq_laneq_f64(v108, v79, 1);
      *(float64x2_t *)(v24 + 208) = v126;
      *(float64x2_t *)(v24 + 224) = v128;
      float64x2_t v134 = vmulq_laneq_f64(v109, v79, 1);
      float64x2_t v135 = vmulq_laneq_f64(v114, v79, 1);
      *(float64x2_t *)(v24 + 240) = vaddq_f64(v111, v121);
      *(float64x2_t *)(v24 + 256) = vaddq_f64(v110, v120);
      float64x2_t v136 = vmulq_laneq_f64(v115, v79, 1);
      *float32x4_t v40 = vaddq_f64(v112, v123);
      v40[1] = vaddq_f64(v113, v122);
      float64x2_t v137 = vaddq_f64(v41[1], v124);
      *uint64_t v41 = vaddq_f64(*v41, v127);
      v41[1] = v137;
      float64x2_t v138 = vaddq_f64(v130, v42[1]);
      *uint64_t v42 = vaddq_f64(v129, *v42);
      v42[1] = v138;
      float64x2_t v139 = vaddq_f64(v131, v43[1]);
      *unsigned int v43 = vaddq_f64(v132, *v43);
      v43[1] = v139;
      float64x2_t v140 = vaddq_f64(v133, v44[1]);
      *uint64_t v44 = vaddq_f64(v134, *v44);
      v44[1] = v140;
      float64x2_t v141 = vaddq_f64(v136, v45[1]);
      *unsigned int v45 = vaddq_f64(v135, *v45);
      v45[1] = v141;
      v46 -= 4;
    }
    while (v46);
  }
  double result = sqrt(v26);
  *(double *)(v23 + 464 * v22 + 32) = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS_5sliceIDv3_dEENS3_IjEEEUlRNS_8bvh_nodeIdLh3EEEE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS2_5sliceIDv3_dEENS6_IjEEEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE11target_typeEv()
{
  return &_ZTIZN4geom12_GLOBAL__N_126winding_number_approximateIdEC1ENS_5sliceIDv3_dEENS3_IjEEEUlRNS_8bvh_nodeIdLh3EEEE_;
}

void *geom_exact_winding_number_3f_dispose(uint64_t a1)
{
  return geom::free_exact_winding_number_3<float>(*(void **)(a1 + 16));
}

void *geom_exact_winding_number_3d_dispose(uint64_t a1)
{
  return geom::free_exact_winding_number_3<double>(*(void **)(a1 + 16));
}

uint64_t geom_approximate_winding_number_3f_dispose(uint64_t a1)
{
  return geom::free_approximate_winding_number_3<float>(*(void *)(a1 + 16));
}

uint64_t geom_approximate_winding_number_3d_dispose(uint64_t a1)
{
  return geom::free_approximate_winding_number_3<double>(*(void *)(a1 + 16));
}

void geom_create_exact_winding_number_3f()
{
}

void geom_create_exact_winding_number_3d()
{
}

void geom_query_exact_winding_number_3f()
{
}

void geom_query_exact_winding_number_3d()
{
}

void geom_create_approximate_winding_number_3f()
{
}

void geom_create_approximate_winding_number_3d()
{
}

void geom_query_approximate_winding_number_3f()
{
}

void geom_query_approximate_winding_number_3d()
{
}

void geom_create_approximate_convex_decomposition_3f()
{
  uint64_t v0 = geom_approximate_convex_decomposition_3f_obj_alloc();
  geom::acd<float>::acd((void *)(v0 + 16));
  geom::acd<float>::init();
}

void geom_create_approximate_convex_decomposition_3d()
{
  uint64_t v0 = geom_approximate_convex_decomposition_3d_obj_alloc();
  geom::acd<float>::acd((void *)(v0 + 16));
  geom::acd<double>::init();
}

void geom_create_approximate_convex_decomposition_constrained_3f()
{
  uint64_t v0 = geom_approximate_convex_decomposition_3f_obj_alloc();
  geom::acd<float>::acd((void *)(v0 + 16));
  geom::acd<float>::init();
}

void geom_create_approximate_convex_decomposition_constrained_3d()
{
  uint64_t v0 = geom_approximate_convex_decomposition_3d_obj_alloc();
  geom::acd<float>::acd((void *)(v0 + 16));
  geom::acd<double>::init();
}

void geom_approximate_convex_decomposition_split_clusters_automatically_3f(uint64_t a1, uint64_t a2)
{
}

void geom_approximate_convex_decomposition_split_clusters_automatically_3d(uint64_t a1, uint64_t a2)
{
}

uint64_t geom_approximate_convex_decomposition_merge_clusters_automatically_3f(uint64_t a1, uint64_t a2)
{
  return geom::acd<float>::merge_clusters_automatically((uint64_t *)(a1 + 16), a2 + 16);
}

uint64_t geom_approximate_convex_decomposition_merge_clusters_automatically_3d(uint64_t a1, uint64_t a2)
{
  return geom::acd<double>::merge_clusters_automatically((uint64_t *)(a1 + 16), a2 + 16);
}

uint64_t geom_approximate_convex_decomposition_cluster_count_3f(uint64_t a1)
{
  return geom::acd<float>::cluster_count(a1 + 16);
}

uint64_t geom_approximate_convex_decomposition_cluster_count_3d(uint64_t a1)
{
  return geom::acd<double>::cluster_count(a1 + 16);
}

void geom_approximate_convex_decomposition_cluster_indices_3f(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 16);
  uint64_t v3 = geom::collection_to_vector<float>(a2);
  geom::acd<float>::cluster_indices(v2, v3);
}

void geom_approximate_convex_decomposition_cluster_indices_3d(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (uint64_t *)(a1 + 16);
  uint64_t v3 = geom::collection_to_vector<float>(a2);
  geom::acd<double>::cluster_indices(v2, v3);
}

void geom_approximate_convex_decomposition_hull_for_cluster_3f(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = (float32x4_t **)(a1 + 16);
  uint64_t v7 = (char **)geom::collection_to_vector<float>(a3);
  unint64_t v8 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a4);
  geom::acd<float>::get_hull_of_cluster(v6, a2, v7, v8);
}

void geom_approximate_convex_decomposition_hull_for_cluster_3d(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4)
{
  unint64_t v6 = (uint64_t *)(a1 + 16);
  uint64_t v7 = (char **)geom::collection_to_vector<float>(a3);
  unint64_t v8 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a4);
  geom::acd<double>::get_hull_of_cluster(v6, a2, v7, v8);
}

void geom_approximate_convex_decomposition_split_cluster_with_plane_3f(uint64_t a1, unsigned int a2, float32x4_t *a3)
{
  int v5 = 0;
  float32x4_t v3 = a3[1];
  v4[0] = *a3;
  v4[1] = v3;
  geom::acd<float>::split_cluster_with_plane((float32x4_t **)(a1 + 16), a2, v4);
}

void geom_approximate_convex_decomposition_split_cluster_with_plane_3d(uint64_t a1, unsigned int a2, float64x2_t *a3)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  float64x2_t v3 = a3[1];
  v4[0] = *a3;
  v4[1] = v3;
  float32x4_t v4[2] = a3[2];
  geom::acd<double>::split_cluster_with_plane((uint64_t *)(a1 + 16), a2, v4);
}

uint64_t *geom_approximate_convex_decomposition_merge_clusters_3f(uint64_t a1, unsigned int a2, unsigned int a3)
{
  return geom::acd<float>::merge_clusters((uint64_t *)(a1 + 16), a2, a3);
}

uint64_t *geom_approximate_convex_decomposition_merge_clusters_3d(uint64_t a1, unsigned int a2, unsigned int a3)
{
  return geom::acd<double>::merge_clusters((uint64_t *)(a1 + 16), a2, a3);
}

double geom_create_approximate_convex_decomposition_opt_3f()
{
  uint64_t v0 = geom_approximate_convex_decomposition_opt_3f_obj_alloc();
  *(void *)(v0 + 24) = 0x100000000;
  *(_DWORD *)(v0 + 16) = 20;
  double result = 5.37764279e-19;
  *(void *)(v0 + 20) = 0x3C23D70A3E800000;
  return result;
}

double geom_create_approximate_convex_decomposition_opt_3d()
{
  uint64_t v0 = geom_approximate_convex_decomposition_opt_3d_obj_alloc();
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_DWORD *)(v0 + 16) = 20;
  double result = 0.25;
  *(_OWORD *)(v0 + 24) = xmmword_236F14630;
  *(unsigned char *)(v0 + 40) = 1;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_get_max_cluster_count_3f(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t geom_approximate_convex_decomposition_opt_get_max_cluster_count_3d(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

float geom_approximate_convex_decomposition_opt_get_split_min_concavity_reduction_3f(uint64_t a1)
{
  return *(float *)(a1 + 20);
}

double geom_approximate_convex_decomposition_opt_get_split_min_concavity_reduction_3d(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

float geom_approximate_convex_decomposition_opt_get_merge_max_allowed_volume_increase_3f(uint64_t a1)
{
  return *(float *)(a1 + 24);
}

double geom_approximate_convex_decomposition_opt_get_merge_max_allowed_volume_increase_3d(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

uint64_t geom_approximate_convex_decomposition_opt_get_recursive_cut_search_enabled_3f(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 28);
}

uint64_t geom_approximate_convex_decomposition_opt_get_recursive_cut_search_enabled_3d(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 40);
}

uint64_t geom_approximate_convex_decomposition_opt_set_max_cluster_count_3f(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_max_cluster_count_3d(uint64_t result, int a2)
{
  *(_DWORD *)(result + 16) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_split_min_concavity_reduction_3f(uint64_t result, float a2)
{
  *(float *)(result + 20) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_split_min_concavity_reduction_3d(uint64_t result, double a2)
{
  *(double *)(result + 24) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_merge_max_allowed_volume_increase_3f(uint64_t result, float a2)
{
  *(float *)(result + 24) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_merge_max_allowed_volume_increase_3d(uint64_t result, double a2)
{
  *(double *)(result + 32) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_recursive_cut_search_enabled_3f(uint64_t result, char a2)
{
  *(unsigned char *)(result + 28) = a2;
  return result;
}

uint64_t geom_approximate_convex_decomposition_opt_set_recursive_cut_search_enabled_3d(uint64_t result, char a2)
{
  *(unsigned char *)(result + 40) = a2;
  return result;
}

void geom::interpolating_curve<float>::build(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(unsigned char *)(a2 + 192) = 0;
  geom::interpolating_curve<float>::build_helper(a2, a1, 0);
}

void geom::interpolating_curve<float>::build_helper(uint64_t a1, void *a2, char a3)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  unint64_t v9 = (uint64_t *)(a1 + 72);
  unint64_t v11 = v6;
  if (v8 != v10)
  {
    do
      uint64_t v8 = geom::interpolating_spline<float>::~interpolating_spline(v8 - 88);
    while (v8 != v10);
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2);
  }
  *(void *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<float>>::reserve(v9, v11 - 1);
  *(unsigned char *)(a1 + 192) = 0;
  if ((unsigned __int16)v6 < 2u)
  {
    __int16 v12 = 0;
    __int16 v13 = -1;
  }
  else
  {
    __int16 v12 = 0;
    __int16 v13 = -1;
    __int16 v14 = 1;
    do
    {
      if (*(_DWORD *)(*a2 + 20 * v14) != *(_DWORD *)(*a2 + 20 * v12))
      {
        __int16 v13 = v14 - 1;
        *(void *)&long long v108 = *a2 + 20 * v12;
        *((void *)&v108 + 1) = (__int16)(v14 - 1) - (uint64_t)v12 + 1;
        geom::interpolating_curve<float>::append_spline((void *)a1, &v108);
        __int16 v12 = v14;
      }
      ++v14;
    }
    while ((unsigned __int16)v6 > v14);
  }
  if ((unsigned __int16)v6 - 1 != v13)
  {
    *(void *)&long long v108 = *a2 + 20 * v12;
    *((void *)&v108 + 1) = (unsigned __int16)v6 - (uint64_t)v12;
    geom::interpolating_curve<float>::append_spline((void *)a1, &v108);
  }
  uint64_t v16 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0x2E8BA2E8BA2E8BA3 * ((v15 - v16) >> 3));
  if (v15 == v16)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    unsigned __int16 v17 = 0;
    uint64_t v18 = *v9;
    long long v19 = *(unsigned __int16 **)(a1 + 24);
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v15 - v16) >> 3)) <= 1) {
      uint64_t v20 = 1;
    }
    else {
      uint64_t v20 = 0x2E8BA2E8BA2E8BA3 * ((v15 - v16) >> 3);
    }
    long long v21 = (__int16 *)(v18 + 56);
    uint64_t v22 = v20;
    do
    {
      __int16 v23 = *v21;
      v21 += 44;
      *v19++ = v17;
      v17 += v23;
      --v22;
    }
    while (v22);
    std::vector<unsigned short>::resize(a1, v17);
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    uint64_t v32 = *(void *)(a1 + 72);
    do
    {
      int v33 = *(unsigned __int16 *)(v32 + 88 * v30 + 56);
      if (*(_WORD *)(v32 + 88 * v30 + 56))
      {
        uint64_t v34 = *(void *)a1;
        do
        {
          uint64_t v35 = (v31 + 1);
          *(_WORD *)(v34 + 2 * (unsigned __int16)v31) = v30;
          LODWORD(v31) = v31 + 1;
          --v33;
        }
        while (v33);
      }
      else
      {
        uint64_t v35 = v31;
      }
      ++v30;
      uint64_t v31 = v35;
    }
    while (v30 != v20);
  }
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(*a2 + 4);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2[1] - 16);
  if (a3)
  {
    LOWORD(v118[0]) = 512;
    v118[1] = 0.001;
    char v119 = 1;
    uint64_t v115 = 0;
    uint64_t v116 = 0;
    uint64_t v117 = 0;
    long long v108 = 0u;
    long long v109 = 0u;
    long long v110 = 0u;
    uint64_t v36 = *(void *)(a1 + 96);
    float64x2_t v106 = (void *)(a1 + 96);
    uint64_t v107 = a1;
    *(void *)(a1 + 104) = v36;
    uint64_t v37 = *(void *)(a1 + 120);
    float64x2_t v105 = (float **)(a1 + 120);
    *(_WORD *)(a1 + 152) = 0;
    *(unsigned char *)(a1 + 154) = 0;
    *(void *)(a1 + 128) = v37;
    uint64_t v38 = *a2;
    uint64_t v39 = a2[1] - *a2;
    if (v39) {
      float v40 = *(float *)(v38 + 4);
    }
    else {
      float v40 = 0.0;
    }
    unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * (v39 >> 2);
    if (v41 >= 2)
    {
      unint64_t v42 = 1;
      while (1)
      {
        int v43 = *(_DWORD *)(v38 + 20 * v42);
        if (v43 == *(_DWORD *)(v38 + 20 * (v42 - 1))) {
          break;
        }
LABEL_106:
        unint64_t v42 = (v42 + 1);
        uint64_t v38 = *a2;
        unint64_t v41 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 2);
        if (v41 <= v42) {
          goto LABEL_126;
        }
      }
      float v44 = *(float *)(v38 + 20 * v42 + 4);
      LOBYTE(v118[0]) = v43 != 0;
      unsigned __int16 v113 = 0;
      uint64_t v45 = v107;
      unsigned __int8 v114 = 0;
      *((void *)&v108 + 1) = v108;
      *(void *)&long long v110 = *((void *)&v109 + 1);
      double v46 = v44;
      *(double *)v24.i64 = (v44 + v40 * 2.0) * 0.333333333;
      float v47 = *(double *)v24.i64;
      double v48 = (v40 + v44 * 2.0) * 0.333333333;
      float v49 = v48;
      if (*(unsigned char *)(v107 + 192))
      {
        float v50 = v40;
      }
      else
      {
        uint64_t v51 = *(void *)(v107 + 72);
        uint64_t v52 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v107 + 80) - v51) >> 3);
        if ((v52 & 0xFFFE) != 0 && *(float *)(v107 + 184) < v40)
        {
          LOWORD(v52) = v52 - 1;
          if (*(float *)(v107 + 188) > v40)
          {
            for (unsigned __int16 i = 0; ; unsigned __int16 i = v55 + 1)
            {
              int v54 = i;
              while (1)
              {
                unsigned int v55 = (v54 + (unsigned __int16)v52) >> 1;
                if (*(float *)(v51 + 88 * v55 + 48) <= v40) {
                  break;
                }
                LOWORD(v52) = v55 - 1;
              }
              if (*(float *)(v51 + 88 * v55 + 52) > v40) {
                break;
              }
            }
            LODWORD(v52) = (v54 + (unsigned __int16)v52) >> 1;
          }
        }
        else
        {
          LOWORD(v52) = 0;
        }
        int v56 = (unsigned __int16)v52;
        int v57 = (unsigned __int16)v52;
        float v58 = geom::interpolating_spline<float>::evaluate_length_at(v51 + 88 * (unsigned __int16)v52, v40);
        if (v57) {
          double v46 = *(float *)(*(void *)(v45 + 48) + 4 * (v56 - 1));
        }
        else {
          double v46 = 0.0;
        }
        double v48 = v46 + v58;
        float v50 = v48;
        uint64_t v59 = v107;
        if (!*(unsigned char *)(v107 + 192))
        {
          uint64_t v60 = *(void *)(v107 + 72);
          uint64_t v61 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v107 + 80) - v60) >> 3);
          if ((v61 & 0xFFFE) != 0 && *(float *)(v107 + 184) < v47)
          {
            LOWORD(v61) = v61 - 1;
            if (*(float *)(v107 + 188) > v47)
            {
              for (unsigned __int16 j = 0; ; unsigned __int16 j = v64 + 1)
              {
                int v63 = j;
                while (1)
                {
                  unsigned int v64 = (v63 + (unsigned __int16)v61) >> 1;
                  if (*(float *)(v60 + 88 * v64 + 48) <= v47) {
                    break;
                  }
                  LOWORD(v61) = v64 - 1;
                }
                if (*(float *)(v60 + 88 * v64 + 52) > v47) {
                  break;
                }
              }
              LODWORD(v61) = (v63 + (unsigned __int16)v61) >> 1;
            }
          }
          else
          {
            LOWORD(v61) = 0;
          }
          int v65 = (unsigned __int16)v61;
          int v66 = (unsigned __int16)v61;
          float v67 = geom::interpolating_spline<float>::evaluate_length_at(v60 + 88 * (unsigned __int16)v61, v47);
          double v46 = v66 ? *(float *)(*(void *)(v59 + 48) + 4 * (v65 - 1)) : 0.0;
          double v48 = v46 + v67;
          float v47 = v48;
          uint64_t v68 = v107;
          if (!*(unsigned char *)(v107 + 192))
          {
            uint64_t v69 = *(void *)(v107 + 72);
            uint64_t v70 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v107 + 80) - v69) >> 3);
            if ((v70 & 0xFFFE) != 0 && *(float *)(v107 + 184) < v49)
            {
              LOWORD(v70) = v70 - 1;
              if (*(float *)(v107 + 188) > v49)
              {
                for (unsigned __int16 k = 0; ; unsigned __int16 k = v73 + 1)
                {
                  int v72 = k;
                  while (1)
                  {
                    unsigned int v73 = (v72 + (unsigned __int16)v70) >> 1;
                    if (*(float *)(v69 + 88 * v73 + 48) <= v49) {
                      break;
                    }
                    LOWORD(v70) = v73 - 1;
                  }
                  if (*(float *)(v69 + 88 * v73 + 52) > v49) {
                    break;
                  }
                }
                LODWORD(v70) = (v72 + (unsigned __int16)v70) >> 1;
              }
            }
            else
            {
              LOWORD(v70) = 0;
            }
            int v74 = (unsigned __int16)v70;
            int v75 = (unsigned __int16)v70;
            float v76 = geom::interpolating_spline<float>::evaluate_length_at(v69 + 88 * (unsigned __int16)v70, v49);
            double v46 = v75 ? *(float *)(*(void *)(v68 + 48) + 4 * (v74 - 1)) : 0.0;
            double v48 = v46 + v76;
            float v49 = v48;
            uint64_t v77 = v107;
            if (!*(unsigned char *)(v107 + 192))
            {
              uint64_t v97 = *(void *)(v107 + 72);
              uint64_t v98 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v107 + 80) - v97) >> 3);
              if ((v98 & 0xFFFE) != 0 && *(float *)(v107 + 184) < v44)
              {
                LOWORD(v98) = v98 - 1;
                if (*(float *)(v107 + 188) > v44)
                {
                  for (unsigned __int16 m = 0; ; unsigned __int16 m = v101 + 1)
                  {
                    int v100 = m;
                    while (1)
                    {
                      unsigned int v101 = (v100 + (unsigned __int16)v98) >> 1;
                      if (*(float *)(v97 + 88 * v101 + 48) <= v44) {
                        break;
                      }
                      LOWORD(v98) = v101 - 1;
                    }
                    if (*(float *)(v97 + 88 * v101 + 52) > v44) {
                      break;
                    }
                  }
                  LODWORD(v98) = (v100 + (unsigned __int16)v98) >> 1;
                }
              }
              else
              {
                LOWORD(v98) = 0;
              }
              int v102 = (unsigned __int16)v98;
              int v103 = (unsigned __int16)v98;
              float v104 = geom::interpolating_spline<float>::evaluate_length_at(v97 + 88 * (unsigned __int16)v98, v44);
              if (v103) {
                double v46 = *(float *)(*(void *)(v77 + 48) + 4 * (v102 - 1));
              }
              else {
                double v46 = 0.0;
              }
              double v48 = v46 + v104;
              *(float *)&double v48 = v48;
              goto LABEL_82;
            }
          }
        }
      }
      *(float *)&double v48 = v44;
LABEL_82:
      *(float *)float64x2_t v120 = v40;
      *(float *)&v120[1] = v44;
      *(float *)&v120[2] = v50;
      *(float *)&v120[3] = v47;
      *(float *)&v120[4] = v49;
      v120[5] = LODWORD(v48);
      char v121 = 0;
      uint64_t v78 = v113;
      int v79 = *(_DWORD *)(a1 + 104);
      uint64_t v80 = *(void *)(a1 + 96);
      __int16 v81 = *(_WORD *)(a1 + 152);
      if (v81) {
        unsigned __int16 v82 = v81 + 1;
      }
      else {
        unsigned __int16 v82 = 0;
      }
      unsigned __int16 v83 = v81 + v113;
      if (v81 + v113)
      {
        std::vector<float>::resize((uint64_t)v106, (unsigned __int16)(3 * v83 + 1));
        *(_WORD *)(a1 + 152) = v83;
        if (!*(unsigned char *)(a1 + 154))
        {
          std::vector<float>::resize((uint64_t)v105, v83 + 1);
          if (v78) {
            goto LABEL_91;
          }
          goto LABEL_105;
        }
LABEL_90:
        if (v78) {
          goto LABEL_91;
        }
        goto LABEL_105;
      }
      *(void *)(a1 + 104) = v80;
      *(_WORD *)(a1 + 152) = 0;
      if (*(unsigned char *)(a1 + 154)) {
        goto LABEL_90;
      }
      *(void *)(a1 + 128) = *(void *)(a1 + 120);
      if (!v78)
      {
LABEL_105:
        float v40 = v44;
        goto LABEL_106;
      }
LABEL_91:
      int v84 = (unsigned __int16)((v79 - v80) >> 2);
      int v85 = v82;
      int v86 = v114;
      uint64_t v87 = v113;
      float v88 = (float)v113;
      float64x2_t v89 = (float *)*((void *)&v109 + 1);
      float64x2_t v90 = (_DWORD *)v108;
      float64x2_t v91 = *v105;
      float64x2_t v92 = (_DWORD *)*v106;
      int v93 = 3;
      uint64_t v94 = 1;
      while (1)
      {
        if (v84)
        {
          if (v86) {
            goto LABEL_94;
          }
        }
        else
        {
          if (v86)
          {
            if (v87) {
              float v96 = v111 + (float)((float)((float)(v112 - v111) / v88) * 0.0);
            }
            else {
              float v96 = v112;
            }
          }
          else
          {
            float v96 = *v89;
          }
          *float64x2_t v91 = v96;
          *float64x2_t v92 = *v90;
          ++v85;
          int v84 = 1;
          if (v86)
          {
LABEL_94:
            if (v87 == v94)
            {
              float v95 = v112;
            }
            else
            {
              *(float *)&double v25 = (float)(v112 - v111) / v88;
              float v95 = v111 + (float)((float)(unsigned __int16)v94 * *(float *)&v25);
            }
            goto LABEL_104;
          }
        }
        float v95 = v89[v94];
LABEL_104:
        v91[v85] = v95;
        v92[(unsigned __int16)v84] = v90[(unsigned __int16)(v93 - 2)];
        v92[(unsigned __int16)(v84 + 1)] = v90[(unsigned __int16)(v93 - 1)];
        v92[(unsigned __int16)(v84 + 2)] = v90[(unsigned __int16)v93];
        ++v85;
        v84 += 3;
        ++v94;
        v93 += 3;
        if (v94 - v78 == 1) {
          goto LABEL_105;
        }
      }
    }
LABEL_126:
    *(unsigned char *)(a1 + 192) = 1;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(v38 + 4);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(v38 + 20 * v41 - 16);
    geom::interpolating_spline<float>::~interpolating_spline((uint64_t)&v108);
  }
}

void geom::interpolating_curve<float>::build_arc_length_parameterized(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(unsigned char *)(a2 + 192) = 0;
  geom::interpolating_curve<float>::build_helper(a2, a1, 1);
}

float geom::interpolating_curve<float>::evaluate_at(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 192))
  {
    unint64_t span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    int v4 = (unsigned __int16)(3 * span);
    uint64_t v5 = *(void *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
  }
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v6) >> 3);
  if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
  {
    LOWORD(v7) = v7 - 1;
    if (*(float *)(a1 + 188) > a2)
    {
      for (unsigned __int16 i = 0; ; unsigned __int16 i = v10 + 1)
      {
        int v9 = i;
        while (1)
        {
          unsigned int v10 = (v9 + (unsigned __int16)v7) >> 1;
          if (*(float *)(v6 + 88 * v10 + 48) <= a2) {
            break;
          }
          LOWORD(v7) = v10 - 1;
        }
        if (*(float *)(v6 + 88 * v10 + 52) > a2) {
          break;
        }
      }
      LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
    }
  }
  else
  {
    LOWORD(v7) = 0;
  }
  unint64_t v11 = (void *)(v6 + 88 * (unsigned __int16)v7);
  unint64_t v12 = geom::interpolating_spline<float>::find_span((uint64_t)v11, a2);
  int v13 = (unsigned __int16)(3 * v12);
  return (float)(*(float *)(*v11 + 4 * (unsigned __int16)(3 * v12))
               * (float)((float)(1.0 - *((float *)&v12 + 1))
                       * (float)((float)(1.0 - *((float *)&v12 + 1)) * (float)(1.0 - *((float *)&v12 + 1)))))
       + *(float *)(*v11 + 4 * (v13 + 1))
       * ((float)((float)(1.0 - *((float *)&v12 + 1)) * (float)(1.0 - *((float *)&v12 + 1)))
        * 3.0
        * *((float *)&v12 + 1))
       + *(float *)(*v11 + 4 * (v13 + 2))
       * ((float)(1.0 - *((float *)&v12 + 1))
        * 3.0
        * (float)(*((float *)&v12 + 1) * *((float *)&v12 + 1)))
       + (float)(*(float *)(*v11 + 4 * (v13 + 3))
               * (float)((float)(*((float *)&v12 + 1) * *((float *)&v12 + 1)) * *((float *)&v12 + 1)));
}

uint64_t geom::interpolating_curve<float>::find_spline_for_parameter(uint64_t a1, float a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v2) >> 3);
  if ((v3 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
  {
    LOWORD(v3) = v3 - 1;
    if (*(float *)(a1 + 188) > a2)
    {
      for (unsigned __int16 i = 0; ; unsigned __int16 i = v6 + 1)
      {
        int v5 = i;
        while (1)
        {
          unsigned int v6 = (v5 + (unsigned __int16)v3) >> 1;
          if (*(float *)(v2 + 88 * v6 + 48) <= a2) {
            break;
          }
          LOWORD(v3) = v6 - 1;
        }
        if (*(float *)(v2 + 88 * v6 + 52) > a2) {
          break;
        }
      }
      LODWORD(v3) = (v5 + (unsigned __int16)v3) >> 1;
    }
  }
  else
  {
    LOWORD(v3) = 0;
  }
  return v2 + 88 * (unsigned __int16)v3;
}

unint64_t geom::interpolating_curve<float>::evaluate_tangent_at(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 192))
  {
    unint64_t span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    int v4 = (unsigned __int16)(3 * span);
    uint64_t v5 = *(void *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v10 + 1)
        {
          int v9 = i;
          while (1)
          {
            unsigned int v10 = (v9 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v10 + 48) <= a2) {
              break;
            }
            LOWORD(v7) = v10 - 1;
          }
          if (*(float *)(v6 + 88 * v10 + 52) > a2) {
            break;
          }
        }
        LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (unsigned __int16 j = 0; ; unsigned __int16 j = v13 + 1)
        {
          int v12 = j;
          while (1)
          {
            unsigned int v13 = (v12 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v13 + 48) <= a2) {
              break;
            }
            LOWORD(v7) = v13 - 1;
          }
          if (*(float *)(v6 + 88 * v13 + 52) > a2) {
            break;
          }
        }
        LODWORD(v7) = (v12 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  return geom::interpolating_spline<float>::find_span(v6 + 88 * (unsigned __int16)v7, a2);
}

float geom::interpolating_curve<float>::evaluate_length_at(uint64_t a1, float result)
{
  if (!*(unsigned char *)(a1 + 192))
  {
    uint64_t v3 = *(void *)(a1 + 72);
    uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v3) >> 3);
    if ((v4 & 0xFFFE) != 0 && *(float *)(a1 + 184) < result)
    {
      LOWORD(v4) = v4 - 1;
      if (*(float *)(a1 + 188) > result)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v7 + 1)
        {
          int v6 = i;
          while (1)
          {
            unsigned int v7 = (v6 + (unsigned __int16)v4) >> 1;
            if (*(float *)(v3 + 88 * v7 + 48) <= result) {
              break;
            }
            LOWORD(v4) = v7 - 1;
          }
          if (*(float *)(v3 + 88 * v7 + 52) > result) {
            break;
          }
        }
        LODWORD(v4) = (v6 + (unsigned __int16)v4) >> 1;
      }
    }
    else
    {
      LOWORD(v4) = 0;
    }
    int v8 = (unsigned __int16)v4;
    int v9 = (unsigned __int16)v4;
    double v10 = geom::interpolating_spline<float>::evaluate_length_at(v3 + 88 * (unsigned __int16)v4, result);
    if (v9) {
      double v11 = *(float *)(*(void *)(a1 + 48) + 4 * (v8 - 1));
    }
    else {
      double v11 = 0.0;
    }
    return v11 + v10;
  }
  return result;
}

uint64_t geom::interpolating_curve<float>::find_spline_index_for_parameter(uint64_t a1, float a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  uint64_t v3 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v2) >> 3);
  if ((v3 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
  {
    LOWORD(v3) = v3 - 1;
    if (*(float *)(a1 + 188) > a2)
    {
      for (unsigned __int16 i = 0; ; unsigned __int16 i = v6 + 1)
      {
        int v5 = i;
        while (1)
        {
          unsigned int v6 = (v5 + (unsigned __int16)v3) >> 1;
          if (*(float *)(v2 + 88 * v6 + 48) <= a2) {
            break;
          }
          LOWORD(v3) = v6 - 1;
        }
        if (*(float *)(v2 + 88 * v6 + 52) > a2) {
          break;
        }
      }
      LODWORD(v3) = (v5 + (unsigned __int16)v3) >> 1;
    }
  }
  else
  {
    LOWORD(v3) = 0;
  }
  return (unsigned __int16)v3;
}

float geom::interpolating_spline<float>::evaluate_length_at(uint64_t a1, float a2)
{
  unsigned __int16 span = geom::interpolating_spline<float>::find_span(a1, a2);
  uint64_t v5 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v5)
  {
    if (span)
    {
      int v7 = 0;
      float v6 = 0.0;
      do
        float v6 = v6 + geom::interpolating_spline<float>::evaluate_span_length(a1, v7++);
      while (span != v7);
      goto LABEL_9;
    }
  }
  else if (span)
  {
    float v6 = *(float *)(v5 + 4 * (span - 1));
    goto LABEL_9;
  }
  float v6 = 0.0;
LABEL_9:
  if (*(unsigned char *)(a1 + 58))
  {
    unsigned int v8 = *(unsigned __int16 *)(a1 + 56);
    if (v8 == span) {
      float v9 = *(float *)(a1 + 52);
    }
    else {
      float v9 = *(float *)(a1 + 48)
    }
         + (float)((float)span * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v8));
  }
  else
  {
    float v9 = *(float *)(*(void *)(a1 + 24) + 4 * span);
  }
  return v6 + geom::interpolating_spline<float>::evaluate_length_betweeen((void *)a1, v9, a2);
}

double geom::interpolating_curve<float>::evaluate_total_length(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 192))
  {
    unsigned int v1 = *(unsigned __int16 *)(a1 + 152);
    if (*(_WORD *)(a1 + 152)) {
      unsigned __int16 v2 = *(_WORD *)(a1 + 152);
    }
    else {
      unsigned __int16 v2 = -1;
    }
    if (*(unsigned char *)(a1 + 154))
    {
      if (v1 == v2) {
        LODWORD(result) = *(_DWORD *)(a1 + 148);
      }
      else {
        *(float *)&double result = *(float *)(a1 + 144)
      }
                          + (float)((float)v2 * (float)((float)(*(float *)(a1 + 148) - *(float *)(a1 + 144)) / (float)v1));
    }
    else
    {
      LODWORD(result) = *(_DWORD *)(*(void *)(a1 + 120) + 4 * v2);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
    if (v4) {
      LODWORD(result) = *(_DWORD *)(*(void *)(a1 + 48) - 0x45D1745D1745D174 * (v4 >> 3) - 4);
    }
    else {
      return 0.0;
    }
  }
  return result;
}

float geom::interpolating_curve<float>::min_knot(uint64_t a1)
{
  return *(float *)(a1 + 184);
}

float geom::interpolating_curve<float>::max_knot(uint64_t a1)
{
  return *(float *)(a1 + 188);
}

uint64_t geom::interpolating_curve<float>::span_count(_DWORD *a1)
{
  return (unsigned __int16)((a1[2] - *a1) >> 1);
}

void geom::interpolating_curve<float>::span_knots(uint64_t a1, unsigned int a2, float *a3, float *a4, double a5, double a6, float a7)
{
  uint64_t v9 = *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
  unsigned __int16 v10 = a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9);
  if (*(unsigned char *)(a1 + 192))
  {
    if (*(_WORD *)(*(void *)a1 + 2 * a2)) {
      float v11 = *(float *)(*(void *)(a1 + 48) + 4 * (v9 - 1));
    }
    else {
      float v11 = 0.0;
    }
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v19 = v18 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    if (*(unsigned char *)(v19 + 58))
    {
      uint64_t v20 = v18 + 88 * v9;
      float v21 = *(float *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 56);
      float v22 = (float)(*(float *)(v20 + 52) - v21) / (float)LODWORD(a7);
      float v23 = v21 + (float)((float)v10 * v22);
      float v24 = v22 + v23;
    }
    else
    {
      double v25 = (float *)(*(void *)(v18 + 88 * v9 + 24) + 4 * v10);
      float v23 = *v25;
      float v24 = v25[1];
    }
    *a3 = v11 + geom::interpolating_spline<float>::evaluate_length_at(v19, v23);
    float v17 = v11
        + geom::interpolating_spline<float>::evaluate_length_at(*(void *)(a1 + 72) + 88 * v9, v24);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 72);
    if (*(unsigned char *)(v12 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 58))
    {
      uint64_t v13 = v12 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
      float v14 = *(float *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 56);
      float v15 = (float)(*(float *)(v13 + 52) - v14) / (float)LODWORD(a7);
      float v16 = v14 + (float)((float)(unsigned __int16)(a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9)) * v15);
      *a3 = v16;
      float v17 = v15 + v16;
    }
    else
    {
      uint64_t v26 = *(void *)(v12 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 24) + 4 * v10;
      *a3 = *(float *)v26;
      float v17 = *(float *)(v26 + 4);
    }
  }
  *a4 = v17;
}

uint64_t geom::interpolating_curve<float>::calculate_monomial_basis_for_span(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  int v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  uint64_t v5 = *(void *)(a1[9] + 88 * *(unsigned __int16 *)(*a1 + 2 * a2));
  *(_DWORD *)a3 = *(_DWORD *)(v5 + 4 * v4);
  *(float *)(a3 + 4) = (float)(*(float *)(v5 + 4 * (v3 + 1)) - *(float *)(v5 + 4 * v4)) * 3.0;
  float v6 = (*(float *)(v5 + 4 * v4)
      + *(float *)(v5 + 4 * (v3 + 1)) * -2.0
      + *(float *)(v5 + 4 * (v4 + 2)))
     * 3.0;
  *(float *)(a3 + 8) = v6;
  float v7 = *(float *)(v5 + 4 * (v4 + 3))
     + (float)(*(float *)(v5 + 4 * (v3 + 1)) - *(float *)(v5 + 4 * (v4 + 2))) * 3.0
     - *(float *)(v5 + 4 * v4);
  *(float *)(a3 + 12) = v7;
  float v8 = fabsf(v6);
  if (fabsf(v7) > 0.00001 || v8 > 0.00001) {
    return 4;
  }
  else {
    return 2;
  }
}

uint64_t geom::interpolating_curve<float>::calculate_bezier_basis_for_span(void *a1, unsigned int a2, float *a3)
{
  int v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  uint64_t v4 = *(void *)(a1[9] + 88 * *(unsigned __int16 *)(*a1 + 2 * a2));
  float v5 = *(float *)(v4
                + 4 * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  float v6 = *(float *)(v4 + 4 * (v3 + 1));
  float v7 = (float)(v6 - v5) * 3.0;
  float v8 = *(float *)(v4 + 4 * (v3 + 2));
  float v9 = (v5 + v6 * -2.0 + v8) * 3.0;
  float v10 = *(float *)(v4 + 4 * (v3 + 3)) + (float)(v6 - v8) * 3.0 - v5;
  if (fabsf(v9) > 0.00001 || fabsf(v10) > 0.00001)
  {
    float v11 = v5 + (float)(v7 * 0.33333);
    float v13 = (float)(v5 + (float)(v7 * 0.66667)) + (float)(v9 * 0.33333);
    float v14 = (float)((float)(v5 + v7) + v9) + v10;
    uint64_t result = 4;
  }
  else
  {
    float v11 = v5 + v7;
    uint64_t result = 2;
    float v13 = 0.0;
    float v14 = 0.0;
  }
  *a3 = v5;
  a3[1] = v11;
  a3[2] = v13;
  a3[3] = v14;
  return result;
}

uint64_t std::vector<geom::interpolating_spline<float>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0x2E8BA2E8BA2E8BA3 * ((v4 - *a1) >> 3) < a2)
  {
    if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
      abort();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_spline<float>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 88 * v6;
    std::vector<geom::interpolating_spline<float>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<geom::interpolating_spline<float>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

uint64_t geom::interpolating_curve<float>::append_spline(void *a1, _WORD *a2)
{
  memset(v26, 0, 24);
  memset(v24, 0, sizeof(v24));
  switch(**(_DWORD **)a2)
  {
    case 0:
      geom::interpolating_curve<float>::build_linear_spline(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      geom::interpolating_curve<float>::build_hermite_spline(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      geom::interpolating_curve<float>::build_catmull_rom_spline(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      geom::interpolating_curve<float>::build_natural_spline(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<float>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  uint64_t v3 = v25;
  std::vector<float>::resize((uint64_t)v26, v25);
  if (v3)
  {
    uint64_t v4 = 0;
    float v5 = 0.0;
    do
    {
      float v5 = v5 + geom::interpolating_spline<float>::evaluate_span_length((uint64_t)v24, v4);
      *(float *)(v26[0] + 4 * v4++) = v5;
    }
    while (v3 != v4);
  }
  float v6 = geom::interpolating_spline<float>::evaluate_total_length((uint64_t)v24);
  uint64_t v7 = a1[10] - a1[9];
  if (v7) {
    float v8 = *(float *)(a1[6] - 0x45D1745D1745D174 * (v7 >> 3) - 4);
  }
  else {
    float v8 = 0.0;
  }
  float v9 = v6 + v8;
  unint64_t v10 = a1[8];
  float v11 = (float *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    float v13 = (float *)a1[6];
    uint64_t v14 = v11 - v13;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62) {
      abort();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v15) {
      unint64_t v15 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 8), v17);
      float v13 = (float *)a1[6];
      float v11 = (float *)a1[7];
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (float *)&v18[4 * v14];
    uint64_t v20 = &v18[4 * v17];
    *uint64_t v19 = v9;
    uint64_t v12 = v19 + 1;
    while (v11 != v13)
    {
      int v21 = *((_DWORD *)v11-- - 1);
      *((_DWORD *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    float *v11 = v9;
    uint64_t v12 = v11 + 1;
  }
  a1[7] = v12;
  std::vector<geom::interpolating_spline<float>>::push_back[abi:nn180100](a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v24);
}

void std::vector<unsigned short>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 1;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 2 * a2;
    }
  }
  else
  {
    std::vector<unsigned short>::__append((char **)a1, a2 - v2);
  }
}

void geom::interpolating_curve<float>::build_linear_spline(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(unsigned char *)(a2 + 58)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    std::vector<float>::resize(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v5 + 1);
    }
  }
  __p = 0;
  int v21 = 0;
  uint64_t v22 = 0;
  uint64_t v6 = v5;
  std::vector<float>::resize((uint64_t)&__p, v5 + 1);
  uint64_t v7 = *(void *)a1;
  float v8 = (char *)__p;
  *(_DWORD *)__p = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v9 = *(void *)a2;
  if (v5)
  {
    LOWORD(v10) = 0;
    float v11 = (float *)(v8 + 4);
    uint64_t v12 = (float *)(v7 + 28);
    do
    {
      float v13 = *(v12 - 1);
      float *v11 = v13;
      float v14 = *(v12 - 5);
      float v15 = (float)(v13 - *(v11 - 1)) * (float)(*v12 - v14);
      *(float *)(v9 + 4 * (unsigned __int16)v10) = v14;
      double v16 = v15 / 3.0;
      float v17 = v16 + *(v12 - 5);
      *(float *)(v9 + 4 * (unsigned __int16)(v10 + 1)) = v17;
      unsigned __int16 v18 = v10 + 2;
      LOWORD(v10) = v10 + 3;
      float v19 = *v12;
      v12 += 5;
      *(float *)&double v16 = v19 - v16;
      *(_DWORD *)(v9 + 4 * v18) = LODWORD(v16);
      ++v11;
      --v6;
    }
    while (v6);
    uint64_t v10 = (unsigned __int16)v10;
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(_DWORD *)(v9 + 4 * v10) = *(_DWORD *)(v7 + 20 * *((void *)a1 + 1) - 12);
  *(unsigned char *)(a2 + 58) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v8, (uint64_t)v21, (v21 - v8) >> 2);
    float v8 = (char *)__p;
  }
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v8;
  *(_DWORD *)(a2 + 52) = *((_DWORD *)v21 - 1);
  int v21 = v8;
  operator delete(v8);
}

uint64_t geom::interpolating_spline<float>::operator=(uint64_t a1, uint64_t a2)
{
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1, (__n128 *)a2);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 24, (__n128 *)(a2 + 24));
  uint64_t v4 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(void *)(a1 + 48) = v4;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 64, (__n128 *)(a2 + 64));
  return a1;
}

void geom::interpolating_curve<float>::build_catmull_rom_spline(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  unsigned int v73 = 0;
  int v74 = 0;
  uint64_t v75 = 0;
  uint64_t v70 = 0;
  float64x2_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v4 = a1[1];
  __int16 v5 = v4 - 1;
  std::vector<float>::resize((uint64_t)&v73, (unsigned __int16)(v4 + 2));
  std::vector<float>::resize((uint64_t)&v70, (unsigned __int16)(v4 + 2));
  uint64_t v6 = *a1;
  float v7 = -(*(float *)(*a1 + 28) - *(float *)(*a1 + 8) * 2.0);
  float v8 = (char *)v73;
  *(float *)unsigned int v73 = v7;
  uint64_t v9 = (float *)v70;
  *(_DWORD *)uint64_t v70 = 0;
  v9[1] = sqrtf(vabds_f32(*(float *)(v6 + 28), *(float *)(v6 + 8)));
  if ((_WORD)v4 == 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = (unsigned __int16)(v4 - 1);
    float v11 = v9 + 2;
    uint64_t v12 = (float *)(v6 + 28);
    float v13 = v8 + 4;
    uint64_t v14 = v10;
    do
    {
      *v13++ = *((_DWORD *)v12 - 5);
      float *v11 = *(v11 - 1) + sqrtf(vabds_f32(*v12, *(v12 - 5)));
      ++v11;
      v12 += 5;
      --v14;
    }
    while (v14);
  }
  float v15 = *(float *)(v6 + 20 * v10 + 8);
  uint64_t v16 = 4 * (unsigned __int16)(v4 + 2);
  uint64_t v17 = v16 - 8;
  *(float *)&v8[v17] = v15;
  float v18 = -(*(float *)&v8[v16 - 12] - v15 * 2.0);
  v16 -= 4;
  *(float *)&v8[v16] = v18;
  v9[(unint64_t)v16 / 4] = *(float *)((char *)v9 + v17)
                                + sqrtf(vabds_f32(*(float *)(v6 + 20 * (unsigned __int16)(v4 - 2) + 28), *(float *)(v6 + 20 * (unsigned __int16)(v4 - 2) + 8)));
  if ((_WORD)v4 == 1)
  {
    uint64_t v20 = 0;
    *(void *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 56) = 0;
    if (!*(unsigned char *)(a2 + 58))
    {
      uint64_t v20 = 0;
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    std::vector<float>::resize(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v10 + 1);
    }
    uint64_t v19 = 0;
    LOWORD(v20) = 0;
    uint64_t v21 = *(void *)a2;
    uint64_t v22 = (float *)v70;
    float v23 = (float *)v73;
    do
    {
      float v24 = v22[v19];
      float v25 = v23[v19];
      int v26 = v19 + 2;
      uint64_t v27 = v19 + 1;
      float v28 = v22[(v19 + 1)];
      float v29 = v22[(v19 + 2)];
      int v30 = v19 + 3;
      float v31 = v29 - v28;
      float v32 = v22[v30];
      float v33 = 1.0 / (float)(v28 - v24);
      float v34 = 1.0 / (float)(v29 - v24);
      float v35 = 1.0 / (float)(v29 - v28);
      float v36 = v32 - v28;
      float v37 = 1.0 / (float)(v32 - v28);
      float v38 = v32 - v29;
      float v39 = v23[v27];
      float v40 = v33 * (float)((float)((float)(v28 - v28) * v25) - (float)((float)(v24 - v28) * v39));
      float v41 = v23[v26];
      float v42 = v35 * (float)((float)((float)(v29 - v28) * v39) - (float)((float)(v28 - v28) * v41));
      float v43 = v23[v30];
      float v44 = (float)(1.0 / v38) * (float)((float)(v36 * v41) - (float)((float)(v29 - v28) * v43));
      float v45 = v33 * (float)(v39 - v25);
      float v46 = v35 * (float)(v41 - v39);
      float v47 = (float)(1.0 / v38) * (float)(v43 - v41);
      float v48 = (float)(v29 - v28)
          * (float)(v35
                  * (float)((float)((float)((float)(v37 * (float)((float)(v36 * v42) - (float)((float)(v28 - v28) * v44)))
                                          - (float)(v34
                                                  * (float)((float)((float)(v29 - v28) * v40)
                                                          - (float)((float)(v24 - v28) * v42))))
                                  + (float)((float)(v29 - v28)
                                          * (float)(v34
                                                  * (float)((float)((float)(v42 - v40)
                                                                  + (float)((float)(v29 - v28) * v45))
                                                          - (float)((float)(v24 - v28) * v46)))))
                          - (float)((float)(v28 - v28)
                                  * (float)(v37
                                          * (float)((float)((float)(v44 - v42) + (float)(v36 * v46))
                                                  - (float)((float)(v28 - v28) * v47))))));
      float v49 = v24 - v29;
      float v50 = v28 - v29;
      float v51 = v29 - v29;
      float v52 = v33 * (float)((float)(v50 * v25) - (float)(v49 * v39));
      float v53 = v35 * (float)((float)(v51 * v39) - (float)(v50 * v41));
      float v54 = (float)(1.0 / v38) * (float)((float)(v38 * v41) - (float)(v51 * v43));
      float v55 = v31
          * (float)(v35
                  * (float)((float)((float)((float)(v37 * (float)((float)(v38 * v53) - (float)(v50 * v54)))
                                          - (float)(v34 * (float)((float)(v51 * v52) - (float)(v49 * v53))))
                                  + (float)(v51
                                          * (float)(v34
                                                  * (float)((float)((float)(v53 - v52) + (float)(v51 * v45))
                                                          - (float)(v49 * v46)))))
                          - (float)(v50
                                  * (float)(v37
                                          * (float)((float)((float)(v54 - v53) + (float)(v38 * v46)) - (float)(v50 * v47))))));
      *(float *)(v21 + 4 * (unsigned __int16)v20) = v39;
      unsigned __int16 v56 = v20 + 2;
      float v57 = v48 / 3.0 + v23[v27];
      *(float *)(v21 + 4 * (unsigned __int16)(v20 + 1)) = v57;
      LOWORD(v20) = v20 + 3;
      float v58 = v23[v26] - v55 / 3.0;
      *(float *)(v21 + 4 * v56) = v58;
      uint64_t v19 = v27;
    }
    while (v10 != v27);
    uint64_t v20 = (unsigned __int16)v20;
  }
  *(_DWORD *)(*(void *)a2 + 4 * v20) = *(_DWORD *)(*a1 + 20 * v10 + 8);
  unint64_t v59 = a1[1];
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  __p = 0;
  if (v59)
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, v59);
    uint64_t v60 = (char *)v68;
    bzero(v68, 4 * v59);
    uint64_t v61 = &v60[4 * v59];
    uint64_t v68 = v61;
    uint64_t v62 = a1[1];
    int v63 = (char *)__p;
    if (v62)
    {
      uint64_t v64 = 0;
      int v65 = (int *)(*a1 + 4);
      do
      {
        int v66 = *v65;
        v65 += 5;
        *(_DWORD *)&v63[4 * v64++] = v66;
      }
      while (v62 != v64);
    }
  }
  else
  {
    int v63 = 0;
    uint64_t v61 = 0;
  }
  *(unsigned char *)(a2 + 58) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v63, (uint64_t)v61, (v61 - v63) >> 2);
    int v63 = (char *)__p;
    uint64_t v61 = (char *)v68;
  }
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v63;
  *(_DWORD *)(a2 + 52) = *((_DWORD *)v61 - 1);
  uint64_t v68 = v63;
  operator delete(v63);
  if (v70)
  {
    float64x2_t v71 = v70;
    operator delete(v70);
  }
  if (v73)
  {
    int v74 = v73;
    operator delete(v73);
  }
}

void geom::interpolating_curve<float>::build_natural_spline(void *a1@<X1>, uint64_t a2@<X8>)
{
  float64x2_t v89 = 0;
  float64x2_t v90 = 0;
  uint64_t v91 = 0;
  int v86 = 0;
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  unsigned __int16 v83 = 0;
  int v84 = 0;
  uint64_t v85 = 0;
  __p = 0;
  __int16 v81 = 0;
  uint64_t v82 = 0;
  unint64_t v4 = a1[1];
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v77 = 0;
  if (v4)
  {
    std::vector<float>::__vallocate[abi:nn180100](&v77, v4);
    __int16 v5 = v78;
    bzero(v78, 4 * v4);
    unint64_t v4 = (unint64_t)v5 + 4 * v4;
    uint64_t v6 = a1[1];
    if (v6)
    {
      uint64_t v7 = 0;
      float v8 = v77;
      uint64_t v9 = (int *)(*a1 + 4);
      do
      {
        int v10 = *v9;
        v9 += 5;
        *(_DWORD *)&v8[4 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  float v11 = v77;
  unint64_t v12 = (unsigned __int16)v6;
  std::vector<float>::resize((uint64_t)&v89, (unsigned __int16)v6);
  std::vector<float>::resize((uint64_t)&v86, v12);
  std::vector<float>::resize((uint64_t)&v83, v12);
  std::vector<float>::resize((uint64_t)&__p, v12);
  unint64_t v13 = v12 - 1;
  uint64_t v14 = v89;
  v89[v12 - 1] = 0;
  *uint64_t v14 = 0;
  float v15 = __p;
  *((_DWORD *)__p + v12 - 1) = 1065353216;
  _DWORD *v15 = 1065353216;
  uint64_t v16 = (float *)v86;
  *((_DWORD *)v86 + v12 - 1) = 0;
  *uint64_t v16 = 0.0;
  uint64_t v17 = (float *)v83;
  *((_DWORD *)v83 + v12 - 1) = 0;
  float *v17 = 0.0;
  if (v12 - 1 >= 2)
  {
    unint64_t v18 = v12 - 2;
    uint64_t v19 = (float *)(*a1 + 28);
    uint64_t v20 = v17 + 1;
    uint64_t v21 = v16 + 1;
    uint64_t v22 = (float *)(v15 + 1);
    float v23 = (float *)(v11 + 4);
    float v24 = (float *)(v14 + 1);
    float v25 = v19;
    do
    {
      float v26 = *v23;
      float v27 = *v23 - *(v23 - 1);
      float v28 = v23[1];
      ++v23;
      float v29 = v28 - v26;
      *v24++ = v27;
      *v22++ = (float)(v27 + v29) + (float)(v27 + v29);
      *v21++ = v29;
      float v30 = v25[5];
      v25 += 5;
      float v31 = -3.0 / v27 * (float)(*v19 - *(v19 - 5)) + 3.0 / v29 * (float)(v30 - *v19);
      *v20++ = v31;
      uint64_t v19 = v25;
      --v18;
    }
    while (v18);
  }
  int64_t v32 = v81 - (unsigned char *)v15;
  unint64_t v33 = ((unint64_t)(v81 - (unsigned char *)v15) >> 2) - 1;
  *uint64_t v16 = *v16 / *(float *)v15;
  float *v17 = *v17 / *(float *)v15;
  if ((int)v33 > 1)
  {
    unint64_t v34 = v33 - 1;
    float v35 = (float *)(v15 + 1);
    float v36 = (float *)(v14 + 1);
    float v37 = v17 + 1;
    float v38 = v16 + 1;
    do
    {
      float v39 = *(v38 - 1);
      *float v38 = *v38 / (float)(*v35 - (float)(*v36 * v39));
      ++v38;
      float v40 = *v36++;
      float v41 = v40;
      float v42 = *v37 - (float)(v40 * *(v37 - 1));
      float v43 = *v35++;
      *v37++ = v42 / (float)(v43 - (float)(v41 * v39));
      --v34;
    }
    while (v34);
  }
  v17[(int)v33] = (float)(v17[(int)v33]
                        - (float)(*(float *)&v14[(int)v33]
                                * *(float *)((char *)v17 + (((v32 << 30) - 0x200000000) >> 30))))
                / (float)(*(float *)&v15[(int)v33]
                        - (float)(*(float *)&v14[(int)v33]
                                * *(float *)((char *)v16 + (((v32 << 30) - 0x200000000) >> 30))));
  if ((int)v33 >= 1)
  {
    do
    {
      float v44 = v17[v33];
      BOOL v45 = v33-- > 1;
      v17[v33] = v17[v33] - (float)(v16[v33] * v44);
    }
    while (v45);
  }
  if (v12 != 1)
  {
    float v46 = (float *)(*a1 + 28);
    float v47 = (float *)(v11 + 4);
    float v48 = v17 + 1;
    do
    {
      double v49 = (float)(*v47 - *(v47 - 1));
      float v50 = v49 / -3.0 * (*v48 + *(v48 - 1) * 2.0) + 1.0 / v49 * (float)(*v46 - *(v46 - 5));
      *v16++ = v50;
      *(float *)&double v49 = 1.0 / (v49 * 3.0) * (float)(*v48 - *(v48 - 1));
      *v15++ = LODWORD(v49);
      v46 += 5;
      ++v47;
      ++v48;
      --v13;
    }
    while (v13);
  }
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  __int16 v51 = *((_WORD *)a1 + 4);
  unsigned __int16 v52 = v51 - 1;
  if (v51 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(unsigned char *)(a2 + 58)) {
      *(void *)(a2 + 32) = 0;
    }
    unsigned int v58 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = *(void *)a2;
  }
  else
  {
    std::vector<float>::resize(a2, (unsigned __int16)(3 * v52 + 1));
    *(_WORD *)(a2 + 56) = v52;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v52 + 1);
    }
    LOWORD(v53) = 0;
    uint64_t v54 = *(void *)a2;
    float v55 = (float *)v86;
    unsigned __int16 v56 = (float *)v83;
    float v57 = (float *)__p;
    unsigned int v58 = v52;
    unint64_t v59 = (float *)(*a1 + 28);
    uint64_t v60 = (float *)(v11 + 4);
    uint64_t v61 = v52;
    do
    {
      float v62 = *(v60 - 1);
      float v63 = *(v59 - 5);
      float v64 = *v59;
      v59 += 5;
      float v65 = v64;
      float v66 = *v55++;
      double v67 = v66;
      float v68 = *v56++;
      double v69 = v68;
      float v70 = *v57++;
      double v71 = (float)(*v60 - v62);
      float v72 = (v67 + (float)(v62 - v62) * ((float)(v62 - v62) * 3.0 * v70 + v69 * 2.0)) * v71;
      *(float *)&double v71 = (v67 + v71 * (v71 * 3.0 * v70 + v69 * 2.0)) * v71;
      *(float *)(v54 + 4 * (unsigned __int16)v53) = v63;
      unsigned __int16 v73 = v53 + 2;
      uint64_t v74 = (unsigned __int16)(v53 + 1);
      LOWORD(v53) = v53 + 3;
      float v75 = v72 / 3.0 + v63;
      *(float *)(v54 + 4 * v74) = v75;
      float v76 = v65 - *(float *)&v71 / 3.0;
      *(float *)(v54 + 4 * v73) = v76;
      ++v60;
      --v61;
    }
    while (v61);
    uint64_t v53 = (unsigned __int16)v53;
  }
  *(_DWORD *)(v54 + 4 * v53) = *(_DWORD *)(*a1 + 20 * v58 + 8);
  *(unsigned char *)(a2 + 58) = 0;
  std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (void)v11) >> 2);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v11;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v4 - 4);
  operator delete(v11);
  if (__p)
  {
    __int16 v81 = __p;
    operator delete(__p);
  }
  if (v83)
  {
    int v84 = v83;
    operator delete(v83);
  }
  if (v86)
  {
    uint64_t v87 = v86;
    operator delete(v86);
  }
  if (v89)
  {
    float64x2_t v90 = v89;
    operator delete(v89);
  }
}

void geom::interpolating_curve<float>::build_hermite_spline(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(unsigned char *)(a2 + 58)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    std::vector<float>::resize(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v5 + 1);
    }
  }
  __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  uint64_t v6 = v5;
  std::vector<float>::resize((uint64_t)&__p, v5 + 1);
  uint64_t v7 = *(void *)a1;
  float v8 = (char *)__p;
  *(_DWORD *)__p = *(_DWORD *)(*(void *)a1 + 4);
  uint64_t v9 = *(void *)a2;
  if (v5)
  {
    LOWORD(v10) = 0;
    float v11 = (float *)(v8 + 4);
    unint64_t v12 = (float *)(v7 + 32);
    do
    {
      float v13 = *(v12 - 2);
      float *v11 = v13;
      float v14 = v13 - *(v11 - 1);
      float v15 = *(v12 - 4) * v14;
      float v16 = v14 * *v12;
      *(float *)(v9 + 4 * (unsigned __int16)v10) = *(v12 - 6);
      unsigned __int16 v17 = v10 + 2;
      float v18 = v15 / 3.0 + *(v12 - 6);
      *(float *)(v9 + 4 * (unsigned __int16)(v10 + 1)) = v18;
      LOWORD(v10) = v10 + 3;
      float v19 = *(v12 - 1) - v16 / 3.0;
      *(float *)(v9 + 4 * v17) = v19;
      ++v11;
      v12 += 5;
      --v6;
    }
    while (v6);
    uint64_t v10 = (unsigned __int16)v10;
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(_DWORD *)(v9 + 4 * v10) = *(_DWORD *)(v7 + 20 * *((void *)a1 + 1) - 12);
  *(unsigned char *)(a2 + 58) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v8, (uint64_t)v21, (v21 - v8) >> 2);
    float v8 = (char *)__p;
  }
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v8;
  *(_DWORD *)(a2 + 52) = *((_DWORD *)v21 - 1);
  uint64_t v21 = v8;
  operator delete(v8);
}

float geom::interpolating_spline<float>::evaluate_total_length(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 56);
  if (*(_WORD *)(a1 + 56)) {
    unsigned __int16 v2 = *(_WORD *)(a1 + 56);
  }
  else {
    unsigned __int16 v2 = -1;
  }
  if (*(unsigned char *)(a1 + 58))
  {
    if (v1 == v2) {
      float v3 = *(float *)(a1 + 52);
    }
    else {
      float v3 = *(float *)(a1 + 48)
    }
         + (float)((float)v2 * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v1));
  }
  else
  {
    float v3 = *(float *)(*(void *)(a1 + 24) + 4 * v2);
  }
  return geom::interpolating_spline<float>::evaluate_length_at(a1, v3);
}

uint64_t std::vector<geom::interpolating_spline<float>>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v10 + 1) > 0x2E8BA2E8BA2E8BALL) {
      abort();
    }
    unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x1745D1745D1745DLL) {
      unint64_t v13 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      float v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_spline<float>>>(v4, v13);
    }
    else {
      float v14 = 0;
    }
    float v15 = v14;
    float v16 = &v14[88 * v10];
    float v18 = &v14[88 * v13];
    geom::interpolating_spline<float>::interpolating_spline((uint64_t)v16, a2);
    unsigned __int16 v17 = v16 + 88;
    std::vector<geom::interpolating_spline<float>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<geom::interpolating_spline<float>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = geom::interpolating_spline<float>::interpolating_spline(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 88;
  }
  a1[1] = v9;
  return result;
}

void std::vector<float>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 2;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 4 * a2;
    }
  }
  else
  {
    std::vector<float>::__append((char **)a1, a2 - v2);
  }
}

void geom::interpolating_curve<double>::build(void *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  geom::interpolating_curve<double>::build_helper((uint64_t)a2, a1, 0);
}

void geom::interpolating_curve<double>::build_helper(uint64_t a1, void *a2, char a3)
{
  unint64_t v6 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = (uint64_t *)(a1 + 72);
  unint64_t v11 = v6;
  if (v8 != v10)
  {
    do
      uint64_t v8 = geom::interpolating_spline<double>::~interpolating_spline(v8 - 96);
    while (v8 != v10);
    unint64_t v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3);
  }
  *(void *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<double>>::reserve(v9, v11 - 1);
  *(unsigned char *)(a1 + 208) = 0;
  if ((unsigned __int16)v6 < 2u)
  {
    __int16 v12 = 0;
    __int16 v13 = -1;
  }
  else
  {
    __int16 v12 = 0;
    __int16 v13 = -1;
    __int16 v14 = 1;
    do
    {
      if (*(_DWORD *)(*a2 + 40 * v14) != *(_DWORD *)(*a2 + 40 * v12))
      {
        __int16 v13 = v14 - 1;
        *(void *)&long long v105 = *a2 + 40 * v12;
        *((void *)&v105 + 1) = (__int16)(v14 - 1) - (uint64_t)v12 + 1;
        geom::interpolating_curve<double>::append_spline((void *)a1, &v105);
        __int16 v12 = v14;
      }
      ++v14;
    }
    while ((unsigned __int16)v6 > v14);
  }
  if ((unsigned __int16)v6 - 1 != v13)
  {
    *(void *)&long long v105 = *a2 + 40 * v12;
    *((void *)&v105 + 1) = (unsigned __int16)v6 - (uint64_t)v12;
    geom::interpolating_curve<double>::append_spline((void *)a1, &v105);
  }
  uint64_t v16 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5));
  if (v15 == v16)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    unsigned __int16 v17 = 0;
    uint64_t v18 = *v9;
    uint64_t v19 = *(unsigned __int16 **)(a1 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5) <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5);
    }
    uint64_t v21 = (__int16 *)(v18 + 64);
    unint64_t v22 = v20;
    do
    {
      __int16 v23 = *v21;
      v21 += 48;
      *v19++ = v17;
      v17 += v23;
      --v22;
    }
    while (v22);
    std::vector<unsigned short>::resize(a1, v17);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = *(void *)(a1 + 72);
    do
    {
      int v27 = *(unsigned __int16 *)(v26 + 96 * v24 + 64);
      if (*(_WORD *)(v26 + 96 * v24 + 64))
      {
        uint64_t v28 = *(void *)a1;
        do
        {
          uint64_t v29 = (v25 + 1);
          *(_WORD *)(v28 + 2 * (unsigned __int16)v25) = v24;
          LODWORD(v25) = v25 + 1;
          --v27;
        }
        while (v27);
      }
      else
      {
        uint64_t v29 = v25;
      }
      ++v24;
      uint64_t v25 = v29;
    }
    while (v24 != v20);
  }
  *(void *)(a1 + 192) = *(void *)(*a2 + 8);
  *(void *)(a1 + 200) = *(void *)(a2[1] - 32);
  if (a3)
  {
    LOWORD(v115[0]) = 512;
    v115[1] = 0.001;
    char v116 = 1;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    uint64_t v30 = *(void *)(a1 + 96);
    int v103 = (void *)(a1 + 96);
    uint64_t v104 = a1;
    *(void *)(a1 + 104) = v30;
    uint64_t v31 = *(void *)(a1 + 120);
    int v102 = (double **)(a1 + 120);
    *(_WORD *)(a1 + 160) = 0;
    *(unsigned char *)(a1 + 162) = 0;
    *(void *)(a1 + 128) = v31;
    uint64_t v32 = *a2;
    uint64_t v33 = a2[1] - *a2;
    if (v33) {
      double v34 = *(double *)(v32 + 8);
    }
    else {
      double v34 = 0.0;
    }
    unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * (v33 >> 3);
    if (v35 >= 2)
    {
      unint64_t v36 = 1;
      while (1)
      {
        int v37 = *(_DWORD *)(v32 + 40 * v36);
        if (v37 == *(_DWORD *)(v32 + 40 * (v36 - 1))) {
          break;
        }
LABEL_101:
        unint64_t v36 = (v36 + 1);
        uint64_t v32 = *a2;
        unint64_t v35 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2[1] - *a2) >> 3);
        if (v35 <= v36) {
          goto LABEL_126;
        }
      }
      double v38 = *(double *)(v32 + 40 * v36 + 8);
      LOBYTE(v115[0]) = v37 != 0;
      unsigned __int16 v110 = 0;
      uint64_t v39 = v104;
      unsigned __int8 v111 = 0;
      *((void *)&v105 + 1) = v105;
      *(void *)&long long v107 = *((void *)&v106 + 1);
      double v40 = (v38 + v34 * 2.0) * 0.333333333;
      double v41 = (v34 + v38 * 2.0) * 0.333333333;
      if (*(unsigned char *)(v104 + 208))
      {
        double v42 = v34;
LABEL_76:
        double v69 = v38;
LABEL_77:
        *(double *)uint64_t v117 = v34;
        *(double *)&v117[1] = v38;
        *(double *)&v117[2] = v42;
        *(double *)&v117[3] = v40;
        *(double *)&v117[4] = v41;
        *(double *)&v117[5] = v69;
        char v118 = 0;
        uint64_t v70 = v110;
        int v71 = *(_DWORD *)(a1 + 104);
        uint64_t v72 = *(void *)(a1 + 96);
        __int16 v73 = *(_WORD *)(a1 + 160);
        if (v73) {
          unsigned __int16 v74 = v73 + 1;
        }
        else {
          unsigned __int16 v74 = 0;
        }
        unsigned __int16 v75 = v73 + v110;
        if (v73 + v110)
        {
          std::vector<double>::resize((uint64_t)v103, (unsigned __int16)(3 * v75 + 1));
          *(_WORD *)(a1 + 160) = v75;
          if (!*(unsigned char *)(a1 + 162))
          {
            std::vector<double>::resize((uint64_t)v102, v75 + 1);
            if (v70) {
              goto LABEL_86;
            }
            goto LABEL_100;
          }
LABEL_85:
          if (v70) {
            goto LABEL_86;
          }
          goto LABEL_100;
        }
        *(void *)(a1 + 104) = v72;
        *(_WORD *)(a1 + 160) = 0;
        if (*(unsigned char *)(a1 + 162)) {
          goto LABEL_85;
        }
        *(void *)(a1 + 128) = *(void *)(a1 + 120);
        if (!v70)
        {
LABEL_100:
          double v34 = v38;
          goto LABEL_101;
        }
LABEL_86:
        int v76 = (unsigned __int16)((v71 - v72) >> 3);
        int v77 = v74;
        int v78 = v111;
        uint64_t v79 = v110;
        double v80 = (double)v110;
        __int16 v81 = (double *)*((void *)&v106 + 1);
        uint64_t v82 = (void *)v105;
        unsigned __int16 v83 = *v102;
        int v84 = (void *)*v103;
        int v85 = 3;
        uint64_t v86 = 1;
        while (1)
        {
          if (v76)
          {
            if (v78) {
              goto LABEL_89;
            }
          }
          else
          {
            if (v78)
            {
              if (v79) {
                double v88 = v108 + (v109 - v108) / v80 * 0.0;
              }
              else {
                double v88 = v109;
              }
            }
            else
            {
              double v88 = *v81;
            }
            *unsigned __int16 v83 = v88;
            *int v84 = *v82;
            ++v77;
            int v76 = 1;
            if (v78)
            {
LABEL_89:
              if (v79 == v86) {
                double v87 = v109;
              }
              else {
                double v87 = v108 + (double)(unsigned __int16)v86 * ((v109 - v108) / v80);
              }
              goto LABEL_99;
            }
          }
          double v87 = v81[v86];
LABEL_99:
          v83[v77] = v87;
          v84[(unsigned __int16)v76] = v82[(unsigned __int16)(v85 - 2)];
          v84[(unsigned __int16)(v76 + 1)] = v82[(unsigned __int16)(v85 - 1)];
          v84[(unsigned __int16)(v76 + 2)] = v82[(unsigned __int16)v85];
          ++v77;
          v76 += 3;
          ++v86;
          v85 += 3;
          if (v86 - v70 == 1) {
            goto LABEL_100;
          }
        }
      }
      uint64_t v43 = *(void *)(v104 + 72);
      unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 80) - v43) >> 5);
      if ((v44 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v34)
      {
        LOWORD(v44) = v44 - 1;
        if (*(double *)(v104 + 200) > v34)
        {
          for (unsigned __int16 i = 0; ; unsigned __int16 i = v47 + 1)
          {
            int v46 = i;
            while (1)
            {
              unsigned int v47 = (v46 + (unsigned __int16)v44) >> 1;
              if (*(double *)(v43 + 96 * v47 + 48) <= v34) {
                break;
              }
              LOWORD(v44) = v47 - 1;
            }
            if (*(double *)(v43 + 96 * v47 + 56) > v34) {
              break;
            }
          }
          LODWORD(v44) = (v46 + (unsigned __int16)v44) >> 1;
        }
        int v64 = (unsigned __int16)v44;
        int v65 = (unsigned __int16)v44;
        double v48 = geom::interpolating_spline<double>::evaluate_length_at(v43 + 96 * (unsigned __int16)v44, v34);
        if (v65)
        {
          double v49 = *(double *)(*(void *)(v39 + 48) + 8 * (v64 - 1));
LABEL_48:
          double v42 = v48 + v49;
          uint64_t v50 = v104;
          if (*(unsigned char *)(v104 + 208)) {
            goto LABEL_76;
          }
          uint64_t v51 = *(void *)(v104 + 72);
          unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 80) - v51) >> 5);
          if ((v52 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v40)
          {
            LOWORD(v52) = v52 - 1;
            if (*(double *)(v104 + 200) > v40)
            {
              for (unsigned __int16 j = 0; ; unsigned __int16 j = v55 + 1)
              {
                int v54 = j;
                while (1)
                {
                  unsigned int v55 = (v54 + (unsigned __int16)v52) >> 1;
                  if (*(double *)(v51 + 96 * v55 + 48) <= v40) {
                    break;
                  }
                  LOWORD(v52) = v55 - 1;
                }
                if (*(double *)(v51 + 96 * v55 + 56) > v40) {
                  break;
                }
              }
              LODWORD(v52) = (v54 + (unsigned __int16)v52) >> 1;
            }
            int v89 = (unsigned __int16)v52;
            int v90 = (unsigned __int16)v52;
            double v56 = geom::interpolating_spline<double>::evaluate_length_at(v51 + 96 * (unsigned __int16)v52, (v38 + v34 * 2.0) * 0.333333333);
            if (v90)
            {
              double v57 = *(double *)(*(void *)(v50 + 48) + 8 * (v89 - 1));
LABEL_60:
              double v40 = v56 + v57;
              uint64_t v58 = v104;
              if (*(unsigned char *)(v104 + 208)) {
                goto LABEL_76;
              }
              uint64_t v59 = *(void *)(v104 + 72);
              unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 80) - v59) >> 5);
              if ((v60 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v41)
              {
                LOWORD(v60) = v60 - 1;
                if (*(double *)(v104 + 200) > v41)
                {
                  for (unsigned __int16 k = 0; ; unsigned __int16 k = v63 + 1)
                  {
                    int v62 = k;
                    while (1)
                    {
                      unsigned int v63 = (v62 + (unsigned __int16)v60) >> 1;
                      if (*(double *)(v59 + 96 * v63 + 48) <= v41) {
                        break;
                      }
                      LOWORD(v60) = v63 - 1;
                    }
                    if (*(double *)(v59 + 96 * v63 + 56) > v41) {
                      break;
                    }
                  }
                  LODWORD(v60) = (v62 + (unsigned __int16)v60) >> 1;
                }
                int v98 = (unsigned __int16)v60;
                int v99 = (unsigned __int16)v60;
                double v66 = geom::interpolating_spline<double>::evaluate_length_at(v59 + 96 * (unsigned __int16)v60, (v34 + v38 * 2.0) * 0.333333333);
                if (v99)
                {
                  double v67 = *(double *)(*(void *)(v58 + 48) + 8 * (v98 - 1));
LABEL_75:
                  double v41 = v66 + v67;
                  uint64_t v68 = v104;
                  if (*(unsigned char *)(v104 + 208)) {
                    goto LABEL_76;
                  }
                  uint64_t v91 = *(void *)(v104 + 72);
                  unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 80) - v91) >> 5);
                  if ((v92 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v38)
                  {
                    LOWORD(v92) = v92 - 1;
                    if (*(double *)(v104 + 200) > v38)
                    {
                      for (unsigned __int16 m = 0; ; unsigned __int16 m = v95 + 1)
                      {
                        int v94 = m;
                        while (1)
                        {
                          unsigned int v95 = (v94 + (unsigned __int16)v92) >> 1;
                          if (*(double *)(v91 + 96 * v95 + 48) <= v38) {
                            break;
                          }
                          LOWORD(v92) = v95 - 1;
                        }
                        if (*(double *)(v91 + 96 * v95 + 56) > v38) {
                          break;
                        }
                      }
                      LODWORD(v92) = (v94 + (unsigned __int16)v92) >> 1;
                    }
                    int v100 = (unsigned __int16)v92;
                    int v101 = (unsigned __int16)v92;
                    double v96 = geom::interpolating_spline<double>::evaluate_length_at(v91 + 96 * (unsigned __int16)v92, v38);
                    if (v101)
                    {
                      double v97 = *(double *)(*(void *)(v68 + 48) + 8 * (v100 - 1));
                      goto LABEL_119;
                    }
                  }
                  else
                  {
                    double v96 = geom::interpolating_spline<double>::evaluate_length_at(v91, v38);
                  }
                  double v97 = 0.0;
LABEL_119:
                  double v69 = v96 + v97;
                  goto LABEL_77;
                }
              }
              else
              {
                double v66 = geom::interpolating_spline<double>::evaluate_length_at(v59, (v34 + v38 * 2.0) * 0.333333333);
              }
              double v67 = 0.0;
              goto LABEL_75;
            }
          }
          else
          {
            double v56 = geom::interpolating_spline<double>::evaluate_length_at(v51, (v38 + v34 * 2.0) * 0.333333333);
          }
          double v57 = 0.0;
          goto LABEL_60;
        }
      }
      else
      {
        double v48 = geom::interpolating_spline<double>::evaluate_length_at(v43, v34);
      }
      double v49 = 0.0;
      goto LABEL_48;
    }
LABEL_126:
    *(unsigned char *)(a1 + 208) = 1;
    *(void *)(a1 + 192) = *(void *)(v32 + 8);
    *(void *)(a1 + 200) = *(void *)(v32 + 40 * v35 - 32);
    geom::interpolating_spline<double>::~interpolating_spline((uint64_t)&v105);
  }
}

void geom::interpolating_curve<double>::build_arc_length_parameterized(void *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  geom::interpolating_curve<double>::build_helper((uint64_t)a2, a1, 1);
}

double geom::interpolating_curve<double>::evaluate_at(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v15 = 0;
    double v16 = 0.0;
    uint64_t v17 = 0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v15, a2);
    int v3 = (unsigned __int16)(3 * v15);
    uint64_t v4 = *(void *)(a1 + 96);
    double v5 = 1.0 - v16;
    a2 = *(double *)(v4 + 8 * (v3 + 1)) * (v16 * (v5 * v5 * 3.0))
       + *(double *)(v4 + 8 * (unsigned __int16)(3 * v15)) * (v5 * (v5 * v5))
       + *(double *)(v4 + 8 * (v3 + 2)) * (v16 * v16 * ((1.0 - v16) * 3.0))
       + *(double *)(v4 + 8 * (v3 + 3)) * (v16 * (v16 * v16));
  }
  uint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v6) >> 5);
  if ((v7 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
  {
    LOWORD(v7) = v7 - 1;
    if (*(double *)(a1 + 200) > a2)
    {
      for (unsigned __int16 i = 0; ; unsigned __int16 i = v10 + 1)
      {
        int v9 = i;
        while (1)
        {
          unsigned int v10 = (v9 + (unsigned __int16)v7) >> 1;
          if (*(double *)(v6 + 96 * v10 + 48) <= a2) {
            break;
          }
          LOWORD(v7) = v10 - 1;
        }
        if (*(double *)(v6 + 96 * v10 + 56) > a2) {
          break;
        }
      }
      LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
    }
  }
  else
  {
    LOWORD(v7) = 0;
  }
  unint64_t v11 = (void *)(v6 + 96 * (unsigned __int16)v7);
  uint64_t v15 = 0;
  double v16 = 0.0;
  uint64_t v17 = 0;
  geom::interpolating_spline<double>::find_span((uint64_t)v11, (uint64_t)&v15, a2);
  int v12 = (unsigned __int16)(3 * v15);
  double v13 = 1.0 - v16;
  return *(double *)(*v11 + 8 * (v12 + 1)) * (v16 * (v13 * v13 * 3.0))
       + *(double *)(*v11 + 8 * (unsigned __int16)(3 * v15)) * (v13 * (v13 * v13))
       + *(double *)(*v11 + 8 * (v12 + 2)) * (v16 * v16 * ((1.0 - v16) * 3.0))
       + *(double *)(*v11 + 8 * (v12 + 3)) * (v16 * (v16 * v16));
}

uint64_t geom::interpolating_curve<double>::find_spline_for_parameter(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v2) >> 5);
  if ((v3 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
  {
    LOWORD(v3) = v3 - 1;
    if (*(double *)(a1 + 200) > a2)
    {
      for (unsigned __int16 i = 0; ; unsigned __int16 i = v6 + 1)
      {
        int v5 = i;
        while (1)
        {
          unsigned int v6 = (v5 + (unsigned __int16)v3) >> 1;
          if (*(double *)(v2 + 96 * v6 + 48) <= a2) {
            break;
          }
          LOWORD(v3) = v6 - 1;
        }
        if (*(double *)(v2 + 96 * v6 + 56) > a2) {
          break;
        }
      }
      LODWORD(v3) = (v5 + (unsigned __int16)v3) >> 1;
    }
  }
  else
  {
    LOWORD(v3) = 0;
  }
  return v2 + 96 * (unsigned __int16)v3;
}

uint64_t geom::interpolating_curve<double>::evaluate_tangent_at(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v15 = 0;
    double v16 = 0.0;
    uint64_t v17 = 0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v15, a2);
    int v3 = (unsigned __int16)(3 * v15);
    uint64_t v4 = *(void *)(a1 + 96);
    double v5 = 1.0 - v16;
    a2 = *(double *)(v4 + 8 * (v3 + 1)) * (v16 * (v5 * v5 * 3.0))
       + *(double *)(v4 + 8 * (unsigned __int16)(3 * v15)) * (v5 * (v5 * v5))
       + *(double *)(v4 + 8 * (v3 + 2)) * (v16 * v16 * ((1.0 - v16) * 3.0))
       + *(double *)(v4 + 8 * (v3 + 3)) * (v16 * (v16 * v16));
    uint64_t v6 = *(void *)(a1 + 72);
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v6) >> 5);
    if ((v7 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(double *)(a1 + 200) > a2)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v10 + 1)
        {
          int v9 = i;
          while (1)
          {
            unsigned int v10 = (v9 + (unsigned __int16)v7) >> 1;
            if (*(double *)(v6 + 96 * v10 + 48) <= a2) {
              break;
            }
            LOWORD(v7) = v10 - 1;
          }
          if (*(double *)(v6 + 96 * v10 + 56) > a2) {
            break;
          }
        }
        LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 72);
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v6) >> 5);
    if ((v7 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(double *)(a1 + 200) > a2)
      {
        for (unsigned __int16 j = 0; ; unsigned __int16 j = v13 + 1)
        {
          int v12 = j;
          while (1)
          {
            unsigned int v13 = (v12 + (unsigned __int16)v7) >> 1;
            if (*(double *)(v6 + 96 * v13 + 48) <= a2) {
              break;
            }
            LOWORD(v7) = v13 - 1;
          }
          if (*(double *)(v6 + 96 * v13 + 56) > a2) {
            break;
          }
        }
        LODWORD(v7) = (v12 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  uint64_t v15 = 0;
  double v16 = 0.0;
  uint64_t v17 = 0;
  return geom::interpolating_spline<double>::find_span(v6 + 96 * (unsigned __int16)v7, (uint64_t)&v15, a2);
}

double geom::interpolating_curve<double>::evaluate_length_at(uint64_t a1, double result)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    uint64_t v4 = a1 + 72;
    uint64_t v3 = *(void *)(a1 + 72);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v4 + 8) - v3) >> 5);
    if ((v5 & 0xFFFE) != 0 && *(double *)(a1 + 192) < result)
    {
      LOWORD(v5) = v5 - 1;
      if (*(double *)(a1 + 200) > result)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v8 + 1)
        {
          int v7 = i;
          while (1)
          {
            unsigned int v8 = (v7 + (unsigned __int16)v5) >> 1;
            if (*(double *)(v3 + 96 * v8 + 48) <= result) {
              break;
            }
            LOWORD(v5) = v8 - 1;
          }
          if (*(double *)(v3 + 96 * v8 + 56) > result) {
            break;
          }
        }
        LODWORD(v5) = (v7 + (unsigned __int16)v5) >> 1;
      }
      int v11 = (unsigned __int16)v5;
      int v12 = (unsigned __int16)v5;
      double v9 = geom::interpolating_spline<double>::evaluate_length_at(v3 + 96 * (unsigned __int16)v5, result);
      if (v12)
      {
        double v10 = *(double *)(*(void *)(a1 + 48) + 8 * (v11 - 1));
        return v9 + v10;
      }
    }
    else
    {
      double v9 = geom::interpolating_spline<double>::evaluate_length_at(v3, result);
    }
    double v10 = 0.0;
    return v9 + v10;
  }
  return result;
}

uint64_t geom::interpolating_curve<double>::find_spline_index_for_parameter(uint64_t a1, double a2)
{
  uint64_t v2 = *(void *)(a1 + 72);
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v2) >> 5);
  if ((v3 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
  {
    LOWORD(v3) = v3 - 1;
    if (*(double *)(a1 + 200) > a2)
    {
      for (unsigned __int16 i = 0; ; unsigned __int16 i = v6 + 1)
      {
        int v5 = i;
        while (1)
        {
          unsigned int v6 = (v5 + (unsigned __int16)v3) >> 1;
          if (*(double *)(v2 + 96 * v6 + 48) <= a2) {
            break;
          }
          LOWORD(v3) = v6 - 1;
        }
        if (*(double *)(v2 + 96 * v6 + 56) > a2) {
          break;
        }
      }
      LODWORD(v3) = (v5 + (unsigned __int16)v3) >> 1;
    }
  }
  else
  {
    LOWORD(v3) = 0;
  }
  return (unsigned __int16)v3;
}

double geom::interpolating_spline<double>::evaluate_length_at(uint64_t a1, double a2)
{
  geom::interpolating_spline<double>::find_span(a1, (uint64_t)v11, a2);
  uint64_t v4 = v11[0];
  uint64_t v5 = *(void *)(a1 + 72);
  if (*(void *)(a1 + 80) == v5)
  {
    if (v11[0])
    {
      int v7 = 0;
      double v6 = 0.0;
      do
        double v6 = v6 + geom::interpolating_spline<double>::evaluate_span_length(a1, v7++);
      while (v4 != v7);
      goto LABEL_9;
    }
  }
  else if (v11[0])
  {
    double v6 = *(double *)(v5 + 8 * (v11[0] - 1));
    goto LABEL_9;
  }
  double v6 = 0.0;
LABEL_9:
  if (*(unsigned char *)(a1 + 66))
  {
    unsigned int v8 = *(unsigned __int16 *)(a1 + 64);
    if (v8 == v4) {
      double v9 = *(double *)(a1 + 56);
    }
    else {
      double v9 = *(double *)(a1 + 48)
    }
         + (double)v4 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v8);
  }
  else
  {
    double v9 = *(double *)(*(void *)(a1 + 24) + 8 * v4);
  }
  return v6 + geom::interpolating_spline<double>::evaluate_length_betweeen((void *)a1, v9, a2);
}

double geom::interpolating_curve<double>::evaluate_total_length(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 208))
  {
    unsigned int v1 = *(unsigned __int16 *)(a1 + 160);
    if (*(_WORD *)(a1 + 160)) {
      unsigned __int16 v2 = *(_WORD *)(a1 + 160);
    }
    else {
      unsigned __int16 v2 = -1;
    }
    if (*(unsigned char *)(a1 + 162))
    {
      if (v1 == v2) {
        return *(double *)(a1 + 152);
      }
      else {
        return *(double *)(a1 + 144) + (double)v2 * ((*(double *)(a1 + 152) - *(double *)(a1 + 144)) / (double)v1);
      }
    }
    else
    {
      return *(double *)(*(void *)(a1 + 120) + 8 * v2);
    }
  }
  else
  {
    uint64_t v4 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
    if (v4) {
      return *(double *)(*(void *)(a1 + 48) + 0x5555555555555558 * (v4 >> 5) - 8);
    }
    else {
      return 0.0;
    }
  }
}

double geom::interpolating_curve<double>::min_knot(uint64_t a1)
{
  return *(double *)(a1 + 192);
}

double geom::interpolating_curve<double>::max_knot(uint64_t a1)
{
  return *(double *)(a1 + 200);
}

void geom::interpolating_curve<double>::span_knots(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  uint64_t v9 = *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
  unsigned __int16 v10 = a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9);
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(_WORD *)(*(void *)a1 + 2 * a2)) {
      double v11 = *(double *)(*(void *)(a1 + 48) + 8 * (v9 - 1));
    }
    else {
      double v11 = 0.0;
    }
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v19 = v18 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    if (*(unsigned char *)(v19 + 66))
    {
      uint64_t v20 = v18 + 96 * v9;
      double v21 = *(double *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 64);
      double v22 = (*(double *)(v20 + 56) - v21) / (double)*(unint64_t *)&a7;
      double v23 = v21 + (double)v10 * v22;
      double v24 = v22 + v23;
    }
    else
    {
      uint64_t v25 = (double *)(*(void *)(v18 + 96 * v9 + 24) + 8 * v10);
      double v23 = *v25;
      double v24 = v25[1];
    }
    *a3 = v11 + geom::interpolating_spline<double>::evaluate_length_at(v19, v23);
    double v17 = v11
        + geom::interpolating_spline<double>::evaluate_length_at(*(void *)(a1 + 72) + 96 * v9, v24);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 72);
    if (*(unsigned char *)(v12 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 66))
    {
      uint64_t v13 = v12 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
      double v14 = *(double *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 64);
      double v15 = (*(double *)(v13 + 56) - v14) / (double)*(unint64_t *)&a7;
      double v16 = v14 + (double)(unsigned __int16)(a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9)) * v15;
      *a3 = v16;
      double v17 = v15 + v16;
    }
    else
    {
      uint64_t v26 = *(void *)(v12 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 24) + 8 * v10;
      *a3 = *(double *)v26;
      double v17 = *(double *)(v26 + 8);
    }
  }
  *a4 = v17;
}

uint64_t geom::interpolating_curve<double>::calculate_monomial_basis_for_span(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  int v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  uint64_t v5 = *(void *)(a1[9] + 96 * *(unsigned __int16 *)(*a1 + 2 * a2));
  *(void *)a3 = *(void *)(v5 + 8 * v4);
  *(double *)(a3 + 8) = (*(double *)(v5 + 8 * (v3 + 1)) - *(double *)(v5 + 8 * v4)) * 3.0;
  double v6 = (*(double *)(v5 + 8 * v4)
      + *(double *)(v5 + 8 * (v3 + 1)) * -2.0
      + *(double *)(v5 + 8 * (v4 + 2)))
     * 3.0;
  *(double *)(a3 + 16) = v6;
  double v7 = *(double *)(v5 + 8 * (v4 + 3))
     + (*(double *)(v5 + 8 * (v3 + 1)) - *(double *)(v5 + 8 * (v4 + 2))) * 3.0;
  double v8 = *(double *)(v5 + 8 * v4);
  *(double *)(a3 + 24) = v7 - v8;
  double v9 = fabs(v6);
  if (vabdd_f64(v7, v8) > 0.000001 || v9 > 0.000001) {
    return 4;
  }
  else {
    return 2;
  }
}

uint64_t geom::interpolating_curve<double>::calculate_bezier_basis_for_span(void *a1, unsigned int a2, double *a3)
{
  int v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  uint64_t v4 = *(void *)(a1[9] + 96 * *(unsigned __int16 *)(*a1 + 2 * a2));
  double v5 = *(double *)(v4
                 + 8 * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  double v6 = *(double *)(v4 + 8 * (v3 + 1));
  double v7 = (v6 - v5) * 3.0;
  double v8 = *(double *)(v4 + 8 * (v3 + 2));
  double v9 = (v5 + v6 * -2.0 + v8) * 3.0;
  double v10 = *(double *)(v4 + 8 * (v3 + 3)) + (v6 - v8) * 3.0;
  if (fabs(v9) > 0.000001 || vabdd_f64(v10, v5) > 0.000001)
  {
    double v15 = v10 - v5;
    double v11 = v5 + v7 * 0.333333333;
    double v13 = v5 + v7 * 0.666666667 + v9 * 0.333333333;
    double v14 = v5 + v7 + v9 + v15;
    uint64_t result = 4;
  }
  else
  {
    double v11 = v5 + v7;
    uint64_t result = 2;
    double v13 = 0.0;
    double v14 = 0.0;
  }
  *a3 = v5;
  a3[1] = v11;
  a3[2] = v13;
  a3[3] = v14;
  return result;
}

uint64_t std::vector<geom::interpolating_spline<double>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t result = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - *a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL) {
      abort();
    }
    uint64_t v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 96 * v6;
    std::vector<geom::interpolating_spline<double>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<geom::interpolating_spline<double>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

uint64_t geom::interpolating_curve<double>::append_spline(void *a1, _WORD *a2)
{
  memset(v26, 0, sizeof(v26));
  memset(v24, 0, 48);
  switch(**(_DWORD **)a2)
  {
    case 0:
      geom::interpolating_curve<double>::build_linear_spline(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      geom::interpolating_curve<double>::build_hermite_spline(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      geom::interpolating_curve<double>::build_catmull_rom_spline(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      geom::interpolating_curve<double>::build_natural_spline(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<double>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  uint64_t v3 = v25;
  std::vector<double>::resize((uint64_t)v26, v25);
  if (v3)
  {
    uint64_t v4 = 0;
    double v5 = 0.0;
    do
    {
      double v5 = v5 + geom::interpolating_spline<double>::evaluate_span_length((uint64_t)v24, v4);
      *(double *)(v26[0] + 8 * v4++) = v5;
    }
    while (v3 != v4);
  }
  double v6 = geom::interpolating_spline<double>::evaluate_total_length((uint64_t)v24);
  uint64_t v7 = a1[10] - a1[9];
  if (v7) {
    double v8 = *(double *)(a1[6] + 0x5555555555555558 * (v7 >> 5) - 8);
  }
  else {
    double v8 = 0.0;
  }
  double v9 = v6 + v8;
  unint64_t v10 = a1[8];
  double v11 = (double *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    double v13 = (double *)a1[6];
    uint64_t v14 = v11 - v13;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      abort();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 8), v17);
      double v13 = (double *)a1[6];
      double v11 = (double *)a1[7];
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (double *)&v18[8 * v14];
    uint64_t v20 = &v18[8 * v17];
    *uint64_t v19 = v9;
    uint64_t v12 = v19 + 1;
    while (v11 != v13)
    {
      uint64_t v21 = *((void *)v11-- - 1);
      *((void *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    double *v11 = v9;
    uint64_t v12 = v11 + 1;
  }
  a1[7] = v12;
  std::vector<geom::interpolating_spline<double>>::push_back[abi:nn180100](a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v24);
}

void geom::interpolating_curve<double>::build_linear_spline(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(unsigned char *)(a2 + 66)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    std::vector<double>::resize(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v5 + 1);
    }
  }
  __p = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v6 = v5;
  std::vector<double>::resize((uint64_t)&__p, v5 + 1);
  uint64_t v7 = *(void *)a1;
  double v8 = (char *)__p;
  *(void *)__p = *(void *)(*(void *)a1 + 8);
  uint64_t v9 = *(void *)a2;
  if (v5)
  {
    LOWORD(v10) = 0;
    double v11 = (double *)(v8 + 8);
    uint64_t v12 = (double *)(v7 + 56);
    do
    {
      double v13 = *(v12 - 1);
      double *v11 = v13;
      double v14 = *(v12 - 5);
      double v15 = (v13 - *(v11 - 1)) * (*v12 - v14);
      *(double *)(v9 + 8 * (unsigned __int16)v10) = v14;
      unsigned __int16 v16 = v10 + 2;
      double v17 = v15 / 3.0;
      *(double *)(v9 + 8 * (unsigned __int16)(v10 + 1)) = *(v12 - 5) + v17;
      LOWORD(v10) = v10 + 3;
      double v18 = *v12;
      v12 += 5;
      *(double *)(v9 + 8 * v16) = v18 - v17;
      ++v11;
      --v6;
    }
    while (v6);
    uint64_t v10 = (unsigned __int16)v10;
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(void *)(v9 + 8 * v10) = *(void *)(v7 + 40 * *((void *)a1 + 1) - 24);
  *(unsigned char *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v8, (uint64_t)v20, (v20 - v8) >> 3);
    double v8 = (char *)__p;
  }
  *(void *)(a2 + 48) = *(void *)v8;
  *(void *)(a2 + 56) = *((void *)v20 - 1);
  uint64_t v20 = v8;
  operator delete(v8);
}

uint64_t geom::interpolating_spline<double>::operator=(uint64_t a1, uint64_t a2)
{
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1, (__n128 *)a2);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 24, (__n128 *)(a2 + 24));
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 48) = v4;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 72, (__n128 *)(a2 + 72));
  return a1;
}

void geom::interpolating_curve<double>::build_catmull_rom_spline(void *a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  uint64_t v68 = 0;
  double v69 = 0;
  uint64_t v70 = 0;
  int v65 = 0;
  double v66 = 0;
  uint64_t v67 = 0;
  uint64_t v4 = a1[1];
  __int16 v5 = v4 - 1;
  std::vector<double>::resize((uint64_t)&v68, (unsigned __int16)(v4 + 2));
  std::vector<double>::resize((uint64_t)&v65, (unsigned __int16)(v4 + 2));
  uint64_t v6 = *a1;
  uint64_t v7 = (char *)v68;
  *(double *)uint64_t v68 = -(*(double *)(*a1 + 56) - *(double *)(*a1 + 16) * 2.0);
  double v8 = (double *)v65;
  *(void *)int v65 = 0;
  v8[1] = sqrt(vabdd_f64(*(double *)(v6 + 56), *(double *)(v6 + 16)));
  if ((_WORD)v4 == 1)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v9 = (unsigned __int16)(v4 - 1);
    uint64_t v10 = v8 + 2;
    double v11 = (double *)(v6 + 56);
    uint64_t v12 = v7 + 8;
    uint64_t v13 = v9;
    do
    {
      *v12++ = *((void *)v11 - 5);
      double *v10 = *(v10 - 1) + sqrt(vabdd_f64(*v11, *(v11 - 5)));
      ++v10;
      v11 += 5;
      --v13;
    }
    while (v13);
  }
  double v14 = *(double *)(v6 + 40 * v9 + 16);
  uint64_t v15 = (unsigned __int16)(v4 + 2);
  uint64_t v16 = v15 * 8 - 16;
  *(double *)&v7[v16] = v14;
  *(double *)&v7[--v15 * 8] = -(*(double *)&v7[8 * (unsigned __int16)(v4 + 2) - 24] - v14 * 2.0);
  v8[v15] = *(double *)((char *)v8 + v16)
          + sqrt(vabdd_f64(*(double *)(v6 + 40 * (unsigned __int16)(v4 - 2) + 56), *(double *)(v6 + 40 * (unsigned __int16)(v4 - 2) + 16)));
  if ((_WORD)v4 == 1)
  {
    uint64_t v18 = 0;
    *(void *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 64) = 0;
    if (!*(unsigned char *)(a2 + 66))
    {
      uint64_t v18 = 0;
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    std::vector<double>::resize(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v9 + 1);
    }
    uint64_t v17 = 0;
    LOWORD(v18) = 0;
    uint64_t v19 = *(void *)a2;
    uint64_t v20 = (double *)v65;
    uint64_t v21 = (double *)v68;
    do
    {
      double v22 = v20[v17];
      double v23 = v21[v17];
      int v24 = v17 + 2;
      uint64_t v25 = v17 + 1;
      double v26 = v20[(v17 + 1)];
      double v27 = v20[(v17 + 2)];
      int v28 = v17 + 3;
      double v29 = v27 - v26;
      double v30 = v20[v28];
      double v31 = 1.0 / (v26 - v22);
      double v32 = 1.0 / (v27 - v22);
      double v33 = 1.0 / (v27 - v26);
      double v34 = v30 - v26;
      double v35 = 1.0 / (v30 - v26);
      double v36 = v30 - v27;
      double v37 = v21[v25];
      double v38 = v31 * ((v26 - v26) * v23 - (v22 - v26) * v37);
      double v39 = v21[v24];
      double v40 = v33 * ((v27 - v26) * v37 - (v26 - v26) * v39);
      double v41 = v21[v28];
      double v42 = 1.0 / v36 * (v34 * v39 - (v27 - v26) * v41);
      double v43 = v31 * (v37 - v23);
      double v44 = v33 * (v39 - v37);
      double v45 = 1.0 / v36 * (v41 - v39);
      double v46 = (v27 - v26)
          * (v33
           * (v35 * (v34 * v40 - (v26 - v26) * v42)
            - v32 * ((v27 - v26) * v38 - (v22 - v26) * v40)
            + (v27 - v26) * (v32 * (v40 - v38 + (v27 - v26) * v43 - (v22 - v26) * v44))
            - (v26 - v26) * (v35 * (v42 - v40 + v34 * v44 - (v26 - v26) * v45))));
      double v47 = v22 - v27;
      double v48 = v26 - v27;
      double v49 = v27 - v27;
      double v50 = v31 * (v48 * v23 - v47 * v37);
      double v51 = v33 * (v49 * v37 - v48 * v39);
      double v52 = 1.0 / v36 * (v36 * v39 - v49 * v41);
      *(double *)(v19 + 8 * (unsigned __int16)v18) = v37;
      unsigned __int16 v53 = v18 + 2;
      *(double *)(v19 + 8 * (unsigned __int16)(v18 + 1)) = v21[v25] + v46 / 3.0;
      LOWORD(v18) = v18 + 3;
      *(double *)(v19 + 8 * v53) = v21[v24]
                                   - v29
                                   * (v33
                                    * (v35 * (v36 * v51 - v48 * v52)
                                     - v32 * (v49 * v50 - v47 * v51)
                                     + v49 * (v32 * (v51 - v50 + v49 * v43 - v47 * v44))
                                     - v48 * (v35 * (v52 - v51 + v36 * v44 - v48 * v45))))
                                   / 3.0;
      uint64_t v17 = v25;
    }
    while (v9 != v25);
    uint64_t v18 = (unsigned __int16)v18;
  }
  *(void *)(*(void *)a2 + 8 * v18) = *(void *)(*a1 + 40 * v9 + 16);
  unint64_t v54 = a1[1];
  unsigned int v63 = 0;
  uint64_t v64 = 0;
  __p = 0;
  if (v54)
  {
    std::vector<double>::__vallocate[abi:nn180100](&__p, v54);
    unsigned int v55 = (char *)v63;
    bzero(v63, 8 * v54);
    double v56 = &v55[8 * v54];
    unsigned int v63 = v56;
    uint64_t v57 = a1[1];
    uint64_t v58 = (char *)__p;
    if (v57)
    {
      uint64_t v59 = 0;
      unint64_t v60 = (uint64_t *)(*a1 + 8);
      do
      {
        uint64_t v61 = *v60;
        v60 += 5;
        *(void *)&v58[8 * v59++] = v61;
      }
      while (v57 != v59);
    }
  }
  else
  {
    uint64_t v58 = 0;
    double v56 = 0;
  }
  *(unsigned char *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v58, (uint64_t)v56, (v56 - v58) >> 3);
    uint64_t v58 = (char *)__p;
    double v56 = (char *)v63;
  }
  *(void *)(a2 + 48) = *(void *)v58;
  *(void *)(a2 + 56) = *((void *)v56 - 1);
  unsigned int v63 = v58;
  operator delete(v58);
  if (v65)
  {
    double v66 = v65;
    operator delete(v65);
  }
  if (v68)
  {
    double v69 = v68;
    operator delete(v68);
  }
}

void geom::interpolating_curve<double>::build_natural_spline(void *a1@<X1>, uint64_t a2@<X8>)
{
  int v85 = 0;
  uint64_t v86 = 0;
  uint64_t v87 = 0;
  uint64_t v82 = 0;
  unsigned __int16 v83 = 0;
  uint64_t v84 = 0;
  uint64_t v79 = 0;
  double v80 = 0;
  uint64_t v81 = 0;
  __p = 0;
  int v77 = 0;
  uint64_t v78 = 0;
  unint64_t v4 = a1[1];
  unsigned __int16 v74 = 0;
  uint64_t v75 = 0;
  __int16 v73 = 0;
  if (v4)
  {
    std::vector<double>::__vallocate[abi:nn180100](&v73, v4);
    __int16 v5 = v74;
    bzero(v74, 8 * v4);
    unint64_t v4 = (unint64_t)v5 + 8 * v4;
    uint64_t v6 = a1[1];
    if (v6)
    {
      uint64_t v7 = 0;
      double v8 = v73;
      uint64_t v9 = (uint64_t *)(*a1 + 8);
      do
      {
        uint64_t v10 = *v9;
        v9 += 5;
        *(void *)&v8[8 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  double v11 = v73;
  unint64_t v12 = (unsigned __int16)v6;
  std::vector<double>::resize((uint64_t)&v85, (unsigned __int16)v6);
  std::vector<double>::resize((uint64_t)&v82, v12);
  std::vector<double>::resize((uint64_t)&v79, v12);
  std::vector<double>::resize((uint64_t)&__p, v12);
  unint64_t v13 = v12 - 1;
  double v14 = v85;
  v85[v12 - 1] = 0;
  *double v14 = 0;
  uint64_t v15 = (double *)__p;
  *((void *)__p + v12 - 1) = 0x3FF0000000000000;
  double *v15 = 1.0;
  uint64_t v16 = (double *)v82;
  *((void *)v82 + v12 - 1) = 0;
  *uint64_t v16 = 0.0;
  uint64_t v17 = (double *)v79;
  *((void *)v79 + v12 - 1) = 0;
  double *v17 = 0.0;
  if (v12 - 1 >= 2)
  {
    unint64_t v18 = v12 - 2;
    uint64_t v19 = (double *)(*a1 + 56);
    uint64_t v20 = v17 + 1;
    uint64_t v21 = v16 + 1;
    double v22 = v15 + 1;
    double v23 = (double *)(v11 + 8);
    int v24 = (double *)(v14 + 1);
    uint64_t v25 = v19;
    do
    {
      double v27 = *(v23 - 1);
      double v26 = *v23;
      double v28 = v23[1];
      ++v23;
      double v29 = v26 - v27;
      double v30 = v28 - v26;
      *v24++ = v29;
      *v22++ = v29 + v30 + v29 + v30;
      *v21++ = v30;
      double v31 = v25[5];
      v25 += 5;
      *v20++ = -3.0 / v29 * (*v19 - *(v19 - 5)) + 3.0 / v30 * (v31 - *v19);
      uint64_t v19 = v25;
      --v18;
    }
    while (v18);
  }
  int64_t v32 = v77 - (unsigned char *)v15;
  unint64_t v33 = ((unint64_t)(v77 - (unsigned char *)v15) >> 3) - 1;
  *uint64_t v16 = *v16 / *v15;
  double *v17 = *v17 / *v15;
  if ((int)v33 > 1)
  {
    unint64_t v34 = v33 - 1;
    double v35 = v15 + 1;
    double v36 = (double *)(v14 + 1);
    double v37 = v17 + 1;
    double v38 = v16 + 1;
    do
    {
      double v39 = *(v38 - 1);
      *double v38 = *v38 / (*v35 - *v36 * v39);
      ++v38;
      double v40 = *v36++;
      double v41 = v40;
      double v42 = *v37 - v40 * *(v37 - 1);
      double v43 = *v35++;
      *v37++ = v42 / (v43 - v41 * v39);
      --v34;
    }
    while (v34);
  }
  v17[(int)v33] = (v17[(int)v33]
                 - *(double *)&v14[(int)v33] * *(double *)((char *)v17 + (((v32 << 29) - 0x200000000) >> 29)))
                / (v15[(int)v33]
                 - *(double *)&v14[(int)v33] * *(double *)((char *)v16 + (((v32 << 29) - 0x200000000) >> 29)));
  if ((int)v33 >= 1)
  {
    do
    {
      double v44 = v17[v33];
      BOOL v45 = v33-- > 1;
      v17[v33] = v17[v33] - v16[v33] * v44;
    }
    while (v45);
  }
  if (v12 != 1)
  {
    double v46 = (double *)(*a1 + 56);
    double v47 = (double *)(v11 + 8);
    double v48 = v17 + 1;
    do
    {
      double v49 = *v47 - *(v47 - 1);
      *v16++ = v49 / -3.0 * (*v48 + *(v48 - 1) * 2.0) + 1.0 / v49 * (*v46 - *(v46 - 5));
      *v15++ = 1.0 / (v49 * 3.0) * (*v48 - *(v48 - 1));
      v46 += 5;
      ++v47;
      ++v48;
      --v13;
    }
    while (v13);
  }
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  __int16 v50 = *((_WORD *)a1 + 4);
  unsigned __int16 v51 = v50 - 1;
  if (v50 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(unsigned char *)(a2 + 66)) {
      *(void *)(a2 + 32) = 0;
    }
    unsigned int v57 = 0;
    uint64_t v52 = 0;
    uint64_t v53 = *(void *)a2;
  }
  else
  {
    std::vector<double>::resize(a2, (unsigned __int16)(3 * v51 + 1));
    *(_WORD *)(a2 + 64) = v51;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v51 + 1);
    }
    LOWORD(v52) = 0;
    uint64_t v53 = *(void *)a2;
    unint64_t v54 = (double *)v82;
    unsigned int v55 = (double *)v79;
    double v56 = (double *)__p;
    unsigned int v57 = v51;
    uint64_t v58 = (double *)(*a1 + 56);
    uint64_t v59 = (double *)(v11 + 8);
    uint64_t v60 = v51;
    do
    {
      double v61 = *(v59 - 1);
      double v62 = *(v58 - 5);
      double v63 = *v58;
      v58 += 5;
      double v64 = v63;
      double v65 = *v59 - v61;
      double v66 = *v54++;
      double v67 = v66;
      double v68 = *v55++;
      double v69 = v68;
      double v70 = *v56++;
      *(double *)(v53 + 8 * (unsigned __int16)v52) = v62;
      unsigned __int16 v71 = v52 + 2;
      uint64_t v72 = (unsigned __int16)(v52 + 1);
      LOWORD(v52) = v52 + 3;
      *(double *)(v53 + 8 * v72) = v62 + v65 * (v67 + (v61 - v61) * ((v61 - v61) * 3.0 * v70 + v69 * 2.0)) / 3.0;
      *(double *)(v53 + 8 * v71) = v64 - v65 * (v67 + v65 * (v65 * 3.0 * v70 + v69 * 2.0)) / 3.0;
      ++v59;
      --v60;
    }
    while (v60);
    uint64_t v52 = (unsigned __int16)v52;
  }
  *(void *)(v53 + 8 * v52) = *(void *)(*a1 + 40 * v57 + 16);
  *(unsigned char *)(a2 + 66) = 0;
  std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (void)v11) >> 3);
  *(void *)(a2 + 48) = *(void *)v11;
  *(void *)(a2 + 56) = *(void *)(v4 - 8);
  operator delete(v11);
  if (__p)
  {
    int v77 = __p;
    operator delete(__p);
  }
  if (v79)
  {
    double v80 = v79;
    operator delete(v79);
  }
  if (v82)
  {
    unsigned __int16 v83 = v82;
    operator delete(v82);
  }
  if (v85)
  {
    uint64_t v86 = v85;
    operator delete(v85);
  }
}

void geom::interpolating_curve<double>::build_hermite_spline(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(unsigned char *)(a2 + 66)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    std::vector<double>::resize(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v5 + 1);
    }
  }
  __p = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v6 = v5;
  std::vector<double>::resize((uint64_t)&__p, v5 + 1);
  uint64_t v7 = *(void *)a1;
  double v8 = (char *)__p;
  *(void *)__p = *(void *)(*(void *)a1 + 8);
  uint64_t v9 = *(void *)a2;
  if (v5)
  {
    LOWORD(v10) = 0;
    double v11 = (double *)(v8 + 8);
    unint64_t v12 = (double *)(v7 + 64);
    do
    {
      double v13 = *(v12 - 2);
      double *v11 = v13;
      double v14 = v13 - *(v11 - 1);
      double v15 = *(v12 - 4) * v14;
      double v16 = v14 * *v12;
      *(double *)(v9 + 8 * (unsigned __int16)v10) = *(v12 - 6);
      unsigned __int16 v17 = v10 + 2;
      *(double *)(v9 + 8 * (unsigned __int16)(v10 + 1)) = v15 / 3.0 + *(v12 - 6);
      LOWORD(v10) = v10 + 3;
      *(double *)(v9 + 8 * v17) = *(v12 - 1) - v16 / 3.0;
      ++v11;
      v12 += 5;
      --v6;
    }
    while (v6);
    uint64_t v10 = (unsigned __int16)v10;
  }
  else
  {
    uint64_t v10 = 0;
  }
  *(void *)(v9 + 8 * v10) = *(void *)(v7 + 40 * *((void *)a1 + 1) - 24);
  *(unsigned char *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v8, (uint64_t)v19, (v19 - v8) >> 3);
    double v8 = (char *)__p;
  }
  *(void *)(a2 + 48) = *(void *)v8;
  *(void *)(a2 + 56) = *((void *)v19 - 1);
  uint64_t v19 = v8;
  operator delete(v8);
}

double geom::interpolating_spline<double>::evaluate_total_length(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 64);
  if (*(_WORD *)(a1 + 64)) {
    unsigned __int16 v2 = *(_WORD *)(a1 + 64);
  }
  else {
    unsigned __int16 v2 = -1;
  }
  if (*(unsigned char *)(a1 + 66))
  {
    if (v1 == v2) {
      double v3 = *(double *)(a1 + 56);
    }
    else {
      double v3 = *(double *)(a1 + 48) + (double)v2 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v1);
    }
  }
  else
  {
    double v3 = *(double *)(*(void *)(a1 + 24) + 8 * v2);
  }
  return geom::interpolating_spline<double>::evaluate_length_at(a1, v3);
}

uint64_t std::vector<geom::interpolating_spline<double>>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 5);
    if (v10 + 1 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 5);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x155555555555555) {
      unint64_t v13 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      double v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(v4, v13);
    }
    else {
      double v14 = 0;
    }
    double v15 = v14;
    double v16 = &v14[96 * v10];
    unint64_t v18 = &v14[96 * v13];
    geom::interpolating_spline<double>::interpolating_spline((uint64_t)v16, a2);
    unsigned __int16 v17 = v16 + 96;
    std::vector<geom::interpolating_spline<double>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<geom::interpolating_spline<double>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = geom::interpolating_spline<double>::interpolating_spline(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 96;
  }
  a1[1] = v9;
  return result;
}

void std::vector<double>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<double>::__append((char **)a1, a2 - v2);
  }
}

void _ZN4geom19interpolating_curveIDv2_fE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(unsigned char *)(a2 + 192) = 0;
  _ZN4geom19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(a2, a1, 0);
}

void _ZN4geom19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = a2[1] - *a2;
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = (uint64_t *)(a1 + 72);
  if (v8 == v10)
  {
    uint64_t v11 = v6 >> 5;
  }
  else
  {
    do
      uint64_t v8 = geom::interpolating_spline<float>::~interpolating_spline(v8 - 88);
    while (v8 != v10);
    uint64_t v11 = (uint64_t)(a2[1] - *a2) >> 5;
  }
  *(void *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<float>>::reserve(v9, v11 - 1);
  *(unsigned char *)(a1 + 192) = 0;
  unsigned int v12 = (unsigned __int16)(v6 >> 5);
  if (v12 < 2)
  {
    __int16 v13 = 0;
    __int16 v14 = -1;
  }
  else
  {
    __int16 v13 = 0;
    __int16 v14 = -1;
    for (__int16 i = 1; i < (int)v12; ++i)
    {
      if (*(_DWORD *)(*a2 + 32 * i) != *(_DWORD *)(*a2 + 32 * v13))
      {
        __int16 v14 = i - 1;
        *(void *)&long long v107 = *a2 + 32 * v13;
        *((void *)&v107 + 1) = (__int16)(i - 1) - (uint64_t)v13 + 1;
        _ZN4geom19interpolating_curveIDv2_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((void *)a1, (float32x2_t **)&v107);
        __int16 v13 = i;
      }
    }
  }
  if (v12 - 1 != v14)
  {
    *(void *)&long long v107 = *a2 + 32 * v13;
    *((void *)&v107 + 1) = (unsigned __int16)((unint64_t)v6 >> 5) - (uint64_t)v13;
    _ZN4geom19interpolating_curveIDv2_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((void *)a1, (float32x2_t **)&v107);
  }
  uint64_t v17 = *(void *)(a1 + 72);
  uint64_t v16 = *(void *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3));
  if (v16 == v17)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    unsigned __int16 v18 = 0;
    uint64_t v19 = *v9;
    uint64_t v20 = *(unsigned __int16 **)(a1 + 24);
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3)) <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = 0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3);
    }
    double v22 = (__int16 *)(v19 + 56);
    uint64_t v23 = v21;
    do
    {
      __int16 v24 = *v22;
      v22 += 44;
      *v20++ = v18;
      v18 += v24;
      --v23;
    }
    while (v23);
    std::vector<unsigned short>::resize(a1, v18);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = *(void *)(a1 + 72);
    do
    {
      int v34 = *(unsigned __int16 *)(v33 + 88 * v31 + 56);
      if (*(_WORD *)(v33 + 88 * v31 + 56))
      {
        uint64_t v35 = *(void *)a1;
        do
        {
          uint64_t v36 = (v32 + 1);
          *(_WORD *)(v35 + 2 * (unsigned __int16)v32) = v31;
          LODWORD(v32) = v32 + 1;
          --v34;
        }
        while (v34);
      }
      else
      {
        uint64_t v36 = v32;
      }
      ++v31;
      uint64_t v32 = v36;
    }
    while (v31 != v21);
  }
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(*a2 + 4);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2[1] - 28);
  if (a3)
  {
    LOWORD(v117[0]) = 512;
    v117[1] = 0.001;
    char v118 = 1;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    uint64_t v116 = 0;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    *(void *)(a1 + 104) = *(void *)(a1 + 96);
    uint64_t v37 = *(void *)(a1 + 120);
    long long v105 = (float **)(a1 + 120);
    uint64_t v106 = a1;
    *(_WORD *)(a1 + 152) = 0;
    *(unsigned char *)(a1 + 154) = 0;
    *(void *)(a1 + 128) = v37;
    uint64_t v38 = *a2;
    unint64_t v39 = a2[1] - *a2;
    if (v39) {
      float v40 = *(float *)(v38 + 4);
    }
    else {
      float v40 = 0.0;
    }
    if (v39 >= 0x21)
    {
      unint64_t v41 = 1;
      while (1)
      {
        int v42 = *(_DWORD *)(v38 + 32 * v41);
        if (v42 == *(_DWORD *)(v38 + 32 * (v41 - 1))) {
          break;
        }
LABEL_107:
        unint64_t v41 = (v41 + 1);
        uint64_t v38 = *a2;
        unint64_t v96 = (uint64_t)(a2[1] - *a2) >> 5;
        if (v96 <= v41) {
          goto LABEL_128;
        }
      }
      float v43 = *(float *)(v38 + 32 * v41 + 4);
      LOBYTE(v117[0]) = v42 != 0;
      unsigned __int16 v112 = 0;
      uint64_t v44 = v106;
      unsigned __int8 v113 = 0;
      *((void *)&v107 + 1) = v107;
      *(void *)&long long v109 = *((void *)&v108 + 1);
      double v45 = v43;
      *(double *)v25.i64 = (v43 + v40 * 2.0) * 0.333333333;
      float v46 = *(double *)v25.i64;
      double v47 = (v40 + v43 * 2.0) * 0.333333333;
      float v48 = v47;
      if (*(unsigned char *)(v106 + 192))
      {
        float v49 = v40;
      }
      else
      {
        uint64_t v50 = *(void *)(v106 + 72);
        uint64_t v51 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v106 + 80) - v50) >> 3);
        if ((v51 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v40)
        {
          LOWORD(v51) = v51 - 1;
          if (*(float *)(v106 + 188) > v40)
          {
            for (unsigned __int16 j = 0; ; unsigned __int16 j = v54 + 1)
            {
              int v53 = j;
              while (1)
              {
                unsigned int v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(float *)(v50 + 88 * v54 + 48) <= v40) {
                  break;
                }
                LOWORD(v51) = v54 - 1;
              }
              if (*(float *)(v50 + 88 * v54 + 52) > v40) {
                break;
              }
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
        }
        else
        {
          LOWORD(v51) = 0;
        }
        int v55 = (unsigned __int16)v51;
        int v56 = (unsigned __int16)v51;
        float v57 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v50 + 88 * (unsigned __int16)v51, v40);
        if (v56) {
          double v45 = *(float *)(*(void *)(v44 + 48) + 4 * (v55 - 1));
        }
        else {
          double v45 = 0.0;
        }
        double v47 = v45 + v57;
        float v49 = v47;
        uint64_t v58 = v106;
        if (!*(unsigned char *)(v106 + 192))
        {
          uint64_t v59 = *(void *)(v106 + 72);
          uint64_t v60 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v106 + 80) - v59) >> 3);
          if ((v60 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v46)
          {
            LOWORD(v60) = v60 - 1;
            if (*(float *)(v106 + 188) > v46)
            {
              for (unsigned __int16 k = 0; ; unsigned __int16 k = v63 + 1)
              {
                int v62 = k;
                while (1)
                {
                  unsigned int v63 = (v62 + (unsigned __int16)v60) >> 1;
                  if (*(float *)(v59 + 88 * v63 + 48) <= v46) {
                    break;
                  }
                  LOWORD(v60) = v63 - 1;
                }
                if (*(float *)(v59 + 88 * v63 + 52) > v46) {
                  break;
                }
              }
              LODWORD(v60) = (v62 + (unsigned __int16)v60) >> 1;
            }
          }
          else
          {
            LOWORD(v60) = 0;
          }
          int v64 = (unsigned __int16)v60;
          int v65 = (unsigned __int16)v60;
          float v66 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v59 + 88 * (unsigned __int16)v60, v46);
          double v45 = v65 ? *(float *)(*(void *)(v58 + 48) + 4 * (v64 - 1)) : 0.0;
          double v47 = v45 + v66;
          float v46 = v47;
          uint64_t v67 = v106;
          if (!*(unsigned char *)(v106 + 192))
          {
            uint64_t v68 = *(void *)(v106 + 72);
            uint64_t v69 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v106 + 80) - v68) >> 3);
            if ((v69 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v48)
            {
              LOWORD(v69) = v69 - 1;
              if (*(float *)(v106 + 188) > v48)
              {
                for (unsigned __int16 m = 0; ; unsigned __int16 m = v72 + 1)
                {
                  int v71 = m;
                  while (1)
                  {
                    unsigned int v72 = (v71 + (unsigned __int16)v69) >> 1;
                    if (*(float *)(v68 + 88 * v72 + 48) <= v48) {
                      break;
                    }
                    LOWORD(v69) = v72 - 1;
                  }
                  if (*(float *)(v68 + 88 * v72 + 52) > v48) {
                    break;
                  }
                }
                LODWORD(v69) = (v71 + (unsigned __int16)v69) >> 1;
              }
            }
            else
            {
              LOWORD(v69) = 0;
            }
            int v73 = (unsigned __int16)v69;
            int v74 = (unsigned __int16)v69;
            float v75 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v68 + 88 * (unsigned __int16)v69, v48);
            double v45 = v74 ? *(float *)(*(void *)(v67 + 48) + 4 * (v73 - 1)) : 0.0;
            double v47 = v45 + v75;
            float v48 = v47;
            uint64_t v76 = v106;
            if (!*(unsigned char *)(v106 + 192))
            {
              uint64_t v97 = *(void *)(v106 + 72);
              uint64_t v98 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v106 + 80) - v97) >> 3);
              if ((v98 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v43)
              {
                LOWORD(v98) = v98 - 1;
                if (*(float *)(v106 + 188) > v43)
                {
                  for (unsigned __int16 n = 0; ; unsigned __int16 n = v101 + 1)
                  {
                    int v100 = n;
                    while (1)
                    {
                      unsigned int v101 = (v100 + (unsigned __int16)v98) >> 1;
                      if (*(float *)(v97 + 88 * v101 + 48) <= v43) {
                        break;
                      }
                      LOWORD(v98) = v101 - 1;
                    }
                    if (*(float *)(v97 + 88 * v101 + 52) > v43) {
                      break;
                    }
                  }
                  LODWORD(v98) = (v100 + (unsigned __int16)v98) >> 1;
                }
              }
              else
              {
                LOWORD(v98) = 0;
              }
              int v102 = (unsigned __int16)v98;
              int v103 = (unsigned __int16)v98;
              float v104 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v97 + 88 * (unsigned __int16)v98, v43);
              if (v103) {
                double v45 = *(float *)(*(void *)(v76 + 48) + 4 * (v102 - 1));
              }
              else {
                double v45 = 0.0;
              }
              double v47 = v45 + v104;
              *(float *)&double v47 = v47;
              goto LABEL_83;
            }
          }
        }
      }
      *(float *)&double v47 = v43;
LABEL_83:
      *(float *)char v119 = v40;
      *(float *)&v119[1] = v43;
      *(float *)&v119[2] = v49;
      *(float *)&v119[3] = v46;
      *(float *)&v119[4] = v48;
      v119[5] = LODWORD(v47);
      char v120 = 0;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(&v106, (uint64_t)v119, v117, (uint64_t)&v107, v47, v45, v25, v26, v27, v28, v29, v30);
      uint64_t v77 = v112;
      int v78 = *(_DWORD *)(a1 + 104);
      uint64_t v79 = *(void *)(a1 + 96);
      __int16 v80 = *(_WORD *)(a1 + 152);
      if (v80) {
        unsigned __int16 v81 = v80 + 1;
      }
      else {
        unsigned __int16 v81 = 0;
      }
      unsigned __int16 v82 = v80 + v112;
      if (v80 + v112)
      {
        std::vector<float>::resize(a1 + 96, (unsigned __int16)(3 * v82 + 1));
        *(_WORD *)(a1 + 152) = v82;
        if (!*(unsigned char *)(a1 + 154))
        {
          std::vector<float>::resize((uint64_t)v105, v82 + 1);
          if (v77) {
            goto LABEL_92;
          }
          goto LABEL_106;
        }
LABEL_91:
        if (v77) {
          goto LABEL_92;
        }
        goto LABEL_106;
      }
      *(void *)(a1 + 104) = v79;
      *(_WORD *)(a1 + 152) = 0;
      if (*(unsigned char *)(a1 + 154)) {
        goto LABEL_91;
      }
      *(void *)(a1 + 128) = *(void *)(a1 + 120);
      if (!v77)
      {
LABEL_106:
        float v40 = v43;
        goto LABEL_107;
      }
LABEL_92:
      int v83 = (unsigned __int16)((v78 - v79) >> 2);
      int v84 = v81;
      int v85 = v113;
      uint64_t v86 = v112;
      float v87 = (float)v112;
      double v88 = (float *)*((void *)&v108 + 1);
      int v89 = (_DWORD *)v107;
      int v90 = *v105;
      uint64_t v91 = *(_DWORD **)(a1 + 96);
      int v92 = 3;
      uint64_t v93 = 1;
      while (1)
      {
        if (v83)
        {
          if (v85) {
            goto LABEL_95;
          }
        }
        else
        {
          if (v85)
          {
            if (v86) {
              float v95 = v110 + (float)((float)((float)(v111 - v110) / v87) * 0.0);
            }
            else {
              float v95 = v111;
            }
          }
          else
          {
            float v95 = *v88;
          }
          *int v90 = v95;
          *uint64_t v91 = *v89;
          ++v84;
          int v83 = 1;
          if (v85)
          {
LABEL_95:
            if (v86 == v93)
            {
              float v94 = v111;
            }
            else
            {
              *(float *)&double v26 = (float)(v111 - v110) / v87;
              float v94 = v110 + (float)((float)(unsigned __int16)v93 * *(float *)&v26);
            }
            goto LABEL_105;
          }
        }
        float v94 = v88[v93];
LABEL_105:
        v90[v84] = v94;
        v91[(unsigned __int16)v83] = v89[(unsigned __int16)(v92 - 2)];
        v91[(unsigned __int16)(v83 + 1)] = v89[(unsigned __int16)(v92 - 1)];
        v91[(unsigned __int16)(v83 + 2)] = v89[(unsigned __int16)v92];
        ++v84;
        v83 += 3;
        ++v93;
        v92 += 3;
        if (v93 - v77 == 1) {
          goto LABEL_106;
        }
      }
    }
    unint64_t v96 = v39 >> 5;
LABEL_128:
    *(unsigned char *)(a1 + 192) = 1;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(v38 + 4);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(v38 + 32 * v96 - 28);
    geom::interpolating_spline<float>::~interpolating_spline((uint64_t)&v107);
  }
}

void _ZN4geom19interpolating_curveIDv2_fE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(unsigned char *)(a2 + 192) = 0;
  _ZN4geom19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(a2, a1, 1);
}

float32x2_t _ZNK4geom19interpolating_curveIDv2_fE11evaluate_atEf(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 192))
  {
    unint64_t span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    int v4 = (unsigned __int16)(3 * span);
    uint64_t v5 = *(void *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
  }
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v6) >> 3);
  if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
  {
    LOWORD(v7) = v7 - 1;
    if (*(float *)(a1 + 188) > a2)
    {
      for (unsigned __int16 i = 0; ; unsigned __int16 i = v10 + 1)
      {
        int v9 = i;
        while (1)
        {
          unsigned int v10 = (v9 + (unsigned __int16)v7) >> 1;
          if (*(float *)(v6 + 88 * v10 + 48) <= a2) {
            break;
          }
          LOWORD(v7) = v10 - 1;
        }
        if (*(float *)(v6 + 88 * v10 + 52) > a2) {
          break;
        }
      }
      LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
    }
  }
  else
  {
    LOWORD(v7) = 0;
  }
  uint64_t v11 = (void *)(v6 + 88 * (unsigned __int16)v7);
  unint64_t v12 = geom::interpolating_spline<float>::find_span((uint64_t)v11, a2);
  float v13 = *((float *)&v12 + 1);
  int v14 = (unsigned __int16)(3 * v12);
  float v15 = 1.0 - *((float *)&v12 + 1);
  float v16 = (float)(v15 * v15) * 3.0 * *((float *)&v12 + 1);
  float32x2_t v17 = vmla_n_f32(vmul_n_f32(*(float32x2_t *)(*v11 + 8 * (v14 + 1)), v16), *(float32x2_t *)(*v11 + 8 * (unsigned __int16)(3 * v12)), v15 * (float)(v15 * v15));
  float v18 = (float)(1.0 - *((float *)&v12 + 1)) * 3.0 * (float)(v13 * v13);
  return vmla_n_f32(vmla_n_f32(v17, *(float32x2_t *)(*v11 + 8 * (v14 + 2)), v18), *(float32x2_t *)(*v11 + 8 * (v14 + 3)), (float)(v13 * v13) * v13);
}

unint64_t _ZNK4geom19interpolating_curveIDv2_fE19evaluate_tangent_atEf(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 192))
  {
    unint64_t span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    int v4 = (unsigned __int16)(3 * span);
    uint64_t v5 = *(void *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v10 + 1)
        {
          int v9 = i;
          while (1)
          {
            unsigned int v10 = (v9 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v10 + 48) <= a2) {
              break;
            }
            LOWORD(v7) = v10 - 1;
          }
          if (*(float *)(v6 + 88 * v10 + 52) > a2) {
            break;
          }
        }
        LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (unsigned __int16 j = 0; ; unsigned __int16 j = v13 + 1)
        {
          int v12 = j;
          while (1)
          {
            unsigned int v13 = (v12 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v13 + 48) <= a2) {
              break;
            }
            LOWORD(v7) = v13 - 1;
          }
          if (*(float *)(v6 + 88 * v13 + 52) > a2) {
            break;
          }
        }
        LODWORD(v7) = (v12 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  return geom::interpolating_spline<float>::find_span(v6 + 88 * (unsigned __int16)v7, a2);
}

float _ZNK4geom19interpolating_curveIDv2_fE18evaluate_length_atEf(uint64_t a1, float result)
{
  if (!*(unsigned char *)(a1 + 192))
  {
    uint64_t v3 = *(void *)(a1 + 72);
    uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v3) >> 3);
    if ((v4 & 0xFFFE) != 0 && *(float *)(a1 + 184) < result)
    {
      LOWORD(v4) = v4 - 1;
      if (*(float *)(a1 + 188) > result)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v7 + 1)
        {
          int v6 = i;
          while (1)
          {
            unsigned int v7 = (v6 + (unsigned __int16)v4) >> 1;
            if (*(float *)(v3 + 88 * v7 + 48) <= result) {
              break;
            }
            LOWORD(v4) = v7 - 1;
          }
          if (*(float *)(v3 + 88 * v7 + 52) > result) {
            break;
          }
        }
        LODWORD(v4) = (v6 + (unsigned __int16)v4) >> 1;
      }
    }
    else
    {
      LOWORD(v4) = 0;
    }
    int v8 = (unsigned __int16)v4;
    int v9 = (unsigned __int16)v4;
    double v10 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v3 + 88 * (unsigned __int16)v4, result);
    if (v9) {
      double v11 = *(float *)(*(void *)(a1 + 48) + 4 * (v8 - 1));
    }
    else {
      double v11 = 0.0;
    }
    return v11 + v10;
  }
  return result;
}

float _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(uint64_t a1, float a2)
{
  unsigned __int16 span = geom::interpolating_spline<float>::find_span(a1, a2);
  uint64_t v5 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v5)
  {
    if (span)
    {
      int v7 = 0;
      float v6 = 0.0;
      do
        float v6 = v6 + _ZNK4geom20interpolating_splineIDv2_fE20evaluate_span_lengthEj(a1, v7++);
      while (span != v7);
      goto LABEL_9;
    }
  }
  else if (span)
  {
    float v6 = *(float *)(v5 + 4 * (span - 1));
    goto LABEL_9;
  }
  float v6 = 0.0;
LABEL_9:
  if (*(unsigned char *)(a1 + 58))
  {
    unsigned int v8 = *(unsigned __int16 *)(a1 + 56);
    if (v8 == span) {
      float v9 = *(float *)(a1 + 52);
    }
    else {
      float v9 = *(float *)(a1 + 48)
    }
         + (float)((float)span * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v8));
  }
  else
  {
    float v9 = *(float *)(*(void *)(a1 + 24) + 4 * span);
  }
  return v6 + _ZNK4geom20interpolating_splineIDv2_fE24evaluate_length_betweeenEff((void *)a1, v9, a2);
}

void _ZNK4geom19interpolating_curveIDv2_fE10span_knotsEtRfS3_(uint64_t a1, unsigned int a2, float *a3, float *a4, double a5, double a6, float a7)
{
  uint64_t v9 = *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
  unsigned __int16 v10 = a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9);
  if (*(unsigned char *)(a1 + 192))
  {
    if (*(_WORD *)(*(void *)a1 + 2 * a2)) {
      float v11 = *(float *)(*(void *)(a1 + 48) + 4 * (v9 - 1));
    }
    else {
      float v11 = 0.0;
    }
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v19 = v18 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    if (*(unsigned char *)(v19 + 58))
    {
      uint64_t v20 = v18 + 88 * v9;
      float v21 = *(float *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 56);
      float v22 = (float)(*(float *)(v20 + 52) - v21) / (float)LODWORD(a7);
      float v23 = v21 + (float)((float)v10 * v22);
      float v24 = v22 + v23;
    }
    else
    {
      int8x16_t v25 = (float *)(*(void *)(v18 + 88 * v9 + 24) + 4 * v10);
      float v23 = *v25;
      float v24 = v25[1];
    }
    *a3 = v11 + _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v19, v23);
    float v17 = v11
        + _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(*(void *)(a1 + 72) + 88 * v9, v24);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 72);
    if (*(unsigned char *)(v12 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 58))
    {
      uint64_t v13 = v12 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
      float v14 = *(float *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 56);
      float v15 = (float)(*(float *)(v13 + 52) - v14) / (float)LODWORD(a7);
      float v16 = v14 + (float)((float)(unsigned __int16)(a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9)) * v15);
      *a3 = v16;
      float v17 = v15 + v16;
    }
    else
    {
      uint64_t v26 = *(void *)(v12 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 24) + 4 * v10;
      *a3 = *(float *)v26;
      float v17 = *(float *)(v26 + 4);
    }
  }
  *a4 = v17;
}

uint64_t _ZNK4geom19interpolating_curveIDv2_fE33calculate_monomial_basis_for_spanEtPS1_(void *a1, unsigned int a2, float32x2_t *a3)
{
  uint64_t v3 = a1[9];
  uint64_t v4 = 88 * *(unsigned __int16 *)(*a1 + 2 * a2);
  uint64_t v6 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  int v5 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  *a3 = *(float32x2_t *)(*(void *)(v3 + v4) + 8 * v6);
  __asm { FMOV            V1.2S, #3.0 }
  a3[1] = vmul_f32(vsub_f32(*(float32x2_t *)(*(void *)(v3 + v4) + 8 * (v5 + 1)), *(float32x2_t *)(*(void *)(v3 + v4) + 8 * v6)), _D1);
  float32x2_t v12 = vmul_f32(vadd_f32(vmla_f32(*(float32x2_t *)(*(void *)(v3 + v4) + 8 * v6), (float32x2_t)0xC0000000C0000000, *(float32x2_t *)(*(void *)(v3 + v4) + 8 * (v5 + 1))), *(float32x2_t *)(*(void *)(v3 + v4) + 8 * (v6 + 2))), _D1);
  a3[2] = v12;
  float32x2_t v13 = vsub_f32(vmla_f32(*(float32x2_t *)(*(void *)(v3 + v4) + 8 * (v6 + 3)), _D1, vsub_f32(*(float32x2_t *)(*(void *)(v3 + v4) + 8 * (v5 + 1)), *(float32x2_t *)(*(void *)(v3 + v4) + 8 * (v6 + 2)))), *(float32x2_t *)(*(void *)(v3 + v4) + 8 * v6));
  a3[3] = v13;
  if (sqrtf(vaddv_f32(vmul_f32(v12, v12))) <= 0.00001 && sqrtf(vaddv_f32(vmul_f32(v13, v13))) <= 0.00001) {
    return 2;
  }
  else {
    return 4;
  }
}

uint64_t _ZNK4geom19interpolating_curveIDv2_fE31calculate_bezier_basis_for_spanEtPS1_(void *a1, unsigned int a2, float32x2_t *a3)
{
  int v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  uint64_t v4 = *(void *)(a1[9] + 88 * *(unsigned __int16 *)(*a1 + 2 * a2));
  float32x2_t v5 = *(float32x2_t *)(v4
                      + 8
                      * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  float32x2_t v6 = *(float32x2_t *)(v4 + 8 * (v3 + 1));
  __asm { FMOV            V4.2S, #3.0 }
  float32x2_t v12 = vmul_f32(vsub_f32(v6, v5), _D4);
  float32x2_t v13 = *(float32x2_t *)(v4 + 8 * (v3 + 2));
  float32x2_t v14 = vmul_f32(vadd_f32(vmla_f32(v5, (float32x2_t)0xC0000000C0000000, v6), v13), _D4);
  float32x2_t v15 = vsub_f32(vmla_f32(*(float32x2_t *)(v4 + 8 * (v3 + 3)), _D4, vsub_f32(v6, v13)), v5);
  if (sqrtf(vaddv_f32(vmul_f32(v14, v14))) <= 0.00001 && sqrtf(vaddv_f32(vmul_f32(v15, v15))) <= 0.00001)
  {
    *a3 = v5;
    a3[1] = vadd_f32(v5, v12);
    a3[2] = 0;
    a3[3] = 0;
    return 2;
  }
  else
  {
    float32x2_t v16 = (float32x2_t)vdup_n_s32(0x3EAAAAABu);
    *a3 = v5;
    a3[1] = vmla_f32(v5, v16, v12);
    a3[2] = vmla_f32(vmla_f32(v5, (float32x2_t)vdup_n_s32(0x3F2AAAABu), v12), v16, v14);
    a3[3] = vadd_f32(vadd_f32(vadd_f32(v5, v12), v14), v15);
    return 4;
  }
}

uint64_t _ZN4geom19interpolating_curveIDv2_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(void *a1, float32x2_t **a2)
{
  memset(v26, 0, 24);
  memset(v24, 0, sizeof(v24));
  switch((*a2)->i32[0])
  {
    case 0:
      _ZN4geom19interpolating_curveIDv2_fE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      _ZN4geom19interpolating_curveIDv2_fE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      _ZN4geom19interpolating_curveIDv2_fE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      _ZN4geom19interpolating_curveIDv2_fE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<float>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  uint64_t v3 = v25;
  std::vector<float>::resize((uint64_t)v26, v25);
  if (v3)
  {
    uint64_t v4 = 0;
    float v5 = 0.0;
    do
    {
      float v5 = v5 + _ZNK4geom20interpolating_splineIDv2_fE20evaluate_span_lengthEj((uint64_t)v24, v4);
      *(float *)(v26[0] + 4 * v4++) = v5;
    }
    while (v3 != v4);
  }
  float v6 = _ZNK4geom20interpolating_splineIDv2_fE21evaluate_total_lengthEv((uint64_t)v24);
  uint64_t v7 = a1[10] - a1[9];
  if (v7) {
    float v8 = *(float *)(a1[6] - 0x45D1745D1745D174 * (v7 >> 3) - 4);
  }
  else {
    float v8 = 0.0;
  }
  float v9 = v6 + v8;
  unint64_t v10 = a1[8];
  float v11 = (float *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    float32x2_t v13 = (float *)a1[6];
    uint64_t v14 = v11 - v13;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62) {
      abort();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v15) {
      unint64_t v15 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 8), v17);
      float32x2_t v13 = (float *)a1[6];
      float v11 = (float *)a1[7];
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (float *)&v18[4 * v14];
    uint64_t v20 = &v18[4 * v17];
    *uint64_t v19 = v9;
    float32x2_t v12 = v19 + 1;
    while (v11 != v13)
    {
      int v21 = *((_DWORD *)v11-- - 1);
      *((_DWORD *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    float *v11 = v9;
    float32x2_t v12 = v11 + 1;
  }
  a1[7] = v12;
  _ZNSt3__16vectorIN4geom20interpolating_splineIDv2_fEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v24);
}

void _ZN4geom19interpolating_curveIDv2_fE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(unsigned char *)(a2 + 58)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v5 + 1);
    }
  }
  uint64_t v26 = 0;
  double v27 = 0;
  uint64_t v28 = 0;
  std::vector<float>::resize((uint64_t)&v26, v5 + 1);
  uint64_t v6 = *(void *)a1;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)(*(void *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = 0;
    LOWORD(v8) = 0;
    uint64_t v9 = 36;
    __asm { FMOV            V0.2S, #3.0 }
    do
    {
      uint64_t v15 = *(void *)a1;
      float v16 = *(float *)(*(void *)a1 + v9);
      unint64_t v17 = (float *)&v26[v7];
      v17[1] = v16;
      float v18 = v16 - *v17;
      uint64_t v19 = (float32x2_t *)(v15 + 8 * v7);
      float32x2_t v20 = v19[1];
      float32x2_t v21 = vsub_f32(v19[5], v20);
      *(float32x2_t *)(*(void *)a2 + 8 * (unsigned __int16)v8) = v20;
      float32x2_t v22 = vdiv_f32(vmul_n_f32(v21, v18), _D0);
      unsigned __int16 v23 = v8 + 2;
      *(float32x2_t *)(*(void *)a2 + 8 * (unsigned __int16)(v8 + 1)) = vadd_f32(v19[1], v22);
      LOWORD(v8) = v8 + 3;
      *(float32x2_t *)(*(void *)a2 + 8 * v23) = vsub_f32(v19[5], v22);
      v7 += 4;
      v9 += 32;
    }
    while (4 * v5 != v7);
    uint64_t v6 = *(void *)a1;
    uint64_t v8 = (unsigned __int16)v8;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(void *)(*(void *)a2 + 8 * v8) = *(void *)(v6 + 32 * *((void *)a1 + 1) - 24);
  *(unsigned char *)(a2 + 58) = 0;
  if ((char **)(a2 + 24) != &v26) {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v26, (uint64_t)v27, (v27 - v26) >> 2);
  }
  float v24 = v26;
  uint64_t v25 = (uint64_t)v27;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v26;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v25 - 4);
  double v27 = v24;
  operator delete(v24);
}

void _ZN4geom19interpolating_curveIDv2_fE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(float32x2_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  float v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  unsigned int v72 = 0;
  int v73 = 0;
  uint64_t v74 = 0;
  __int16 v4 = a1[1];
  __int16 v5 = (_WORD)v4 - 1;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v75, (unsigned __int16)((_WORD)v4 + 2));
  std::vector<float>::resize((uint64_t)&v72, (unsigned __int16)((_WORD)v4 + 2));
  *(float32x2_t *)float v75 = vmla_f32(vneg_f32((*a1)[5]), (float32x2_t)0x4000000040000000, (*a1)[1]);
  uint64_t v6 = (float *)v72;
  *(_DWORD *)unsigned int v72 = 0;
  uint64_t v7 = *a1;
  float32x2_t v8 = vsub_f32((*a1)[5], (*a1)[1]);
  v6[1] = sqrtf(sqrtf(vaddv_f32(vmul_f32(v8, v8))));
  if ((_WORD)v4 == 1)
  {
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v10 = (unsigned __int16)((_WORD)v4 - 1);
    uint64_t v11 = 8;
    do
    {
      *(float32x2_t *)((char *)v75 + v11) = v7[v9 + 1];
      uint64_t v7 = *a1;
      float32x2_t v12 = vsub_f32((*a1)[v9 + 5], (*a1)[v9 + 1]);
      *(float *)((char *)v72 + v9 + 8) = *(float *)((char *)v72 + v9 + 4) + sqrtf(sqrtf(vaddv_f32(vmul_f32(v12, v12))));
      v9 += 4;
      v11 += 8;
    }
    while (4 * (unsigned __int16)((_WORD)v4 - 1) != v9);
  }
  uint64_t v13 = (unsigned __int16)((_WORD)v4 + 2) - 2;
  *((float32x2_t *)v75 + v13) = v7[4 * v10 + 1];
  uint64_t v14 = (unsigned __int16)((_WORD)v4 + 2) - 1;
  *((float32x2_t *)v75 + v14) = vmla_f32(vneg_f32(*(float32x2_t *)((char *)v75 + 8 * (unsigned __int16)((_WORD)v4 + 2) - 24)), (float32x2_t)0x4000000040000000, *(float32x2_t *)((char *)v75 + 8 * v13));
  float v15 = *((float *)v72 + v13);
  float v16 = &(*a1)[4 * (unsigned __int16)((_WORD)v4 - 2)];
  float32x2_t v17 = vsub_f32(v16[5], v16[1]);
  *((float *)v72 + v14) = v15 + sqrtf(sqrtf(vaddv_f32(vmul_f32(v17, v17))));
  if ((_WORD)v4 == 1)
  {
    uint64_t v25 = 0;
    *(void *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 56) = 0;
    if (!*(unsigned char *)(a2 + 58))
    {
      uint64_t v25 = 0;
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v10 + 1);
    }
    uint64_t v24 = 0;
    LOWORD(v25) = 0;
    __asm { FMOV            V1.2S, #3.0 }
    do
    {
      int v31 = v24 + 2;
      uint64_t v32 = (char *)v75;
      v19.i32[0] = *((_DWORD *)v72 + v24);
      float32x2_t v33 = *(float32x2_t *)((char *)v75 + 8 * v24);
      uint64_t v34 = v24 + 1;
      v21.i32[0] = *((_DWORD *)v72 + (v24 + 1));
      v20.i32[0] = *((_DWORD *)v72 + (v24 + 2));
      float v35 = *((float *)v72 + (v24 + 3));
      *(float *)v18.i32 = *(float *)v20.i32 - v21.f32[0];
      float v36 = 1.0 / (float)(v21.f32[0] - v19.f32[0]);
      float v37 = 1.0 / (float)(*(float *)v20.i32 - v19.f32[0]);
      float v38 = 1.0 / (float)(*(float *)v20.i32 - v21.f32[0]);
      float v39 = v35 - v21.f32[0];
      float v40 = 1.0 / (float)(v35 - v21.f32[0]);
      float v41 = v35 - *(float *)v20.i32;
      float v42 = 1.0 / (float)(v35 - *(float *)v20.i32);
      v22.f32[0] = v19.f32[0] - v21.f32[0];
      v23.f32[0] = v21.f32[0] - v21.f32[0];
      float32x2_t v43 = *(float32x2_t *)((char *)v75 + 8 * (v24 + 1));
      float32x2_t v44 = vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v22, 0));
      float32x2_t v45 = vmul_n_f32(vmla_n_f32(vmul_f32(v43, v44), v33, v21.f32[0] - v21.f32[0]), v36);
      float32x2_t v46 = *(float32x2_t *)((char *)v75 + 8 * (v24 + 2));
      float32x2_t v47 = vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v23, 0));
      float32x2_t v48 = vmul_n_f32(vmla_n_f32(vmul_f32(v46, v47), v43, *(float *)v20.i32 - v21.f32[0]), v38);
      float32x2_t v49 = *(float32x2_t *)((char *)v75 + 8 * (v24 + 3));
      float32x2_t v50 = vmul_n_f32(vmla_n_f32(vmul_f32(v49, vneg_f32((float32x2_t)vdup_lane_s32(v18, 0))), v46, v39), v42);
      float32x2_t v51 = vmul_n_f32(vmla_n_f32(vmul_f32(v48, v44), v45, *(float *)v20.i32 - v21.f32[0]), v37);
      float32x2_t v52 = vmul_n_f32(vmla_n_f32(vmul_f32(v50, v47), v48, v39), v40);
      float32x2_t v53 = vmul_n_f32(vsub_f32(v43, v33), v36);
      float32x2_t v54 = vmul_n_f32(vsub_f32(v46, v43), v38);
      float32x2_t v55 = vmul_n_f32(vsub_f32(v49, v46), v42);
      float32x2_t v56 = vmul_n_f32(vmul_n_f32(vmls_lane_f32(vmla_n_f32(vsub_f32(v52, v51), vmul_n_f32(vmls_lane_f32(vmla_n_f32(vsub_f32(v48, v45), v53, *(float *)v20.i32 - v21.f32[0]), v54, v22, 0), v37), *(float *)v20.i32 - v21.f32[0]), vmul_n_f32(vmls_lane_f32(vmla_n_f32(vsub_f32(v50, v48), v54, v39), v55, v23, 0), v40), v23, 0), v38), *(float *)v20.i32 - v21.f32[0]);
      v19.f32[0] = v19.f32[0] - *(float *)v20.i32;
      v21.f32[0] = v21.f32[0] - *(float *)v20.i32;
      *(float *)v20.i32 = *(float *)v20.i32 - *(float *)v20.i32;
      float32x2_t v23 = vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v19, 0));
      float32x2_t v57 = vmul_n_f32(vmla_n_f32(vmul_f32(v43, v23), v33, v21.f32[0]), v36);
      float32x2_t v22 = vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v21, 0));
      float32x2_t v58 = vmul_n_f32(vmla_n_f32(vmul_f32(v46, v22), v43, *(float *)v20.i32), v38);
      float32x2_t v59 = vmul_n_f32(vmla_n_f32(vmul_f32(v49, vneg_f32((float32x2_t)vdup_lane_s32(v20, 0))), v46, v41), v42);
      *(float32x2_t *)(*(void *)a2 + 8 * (unsigned __int16)v25) = v43;
      *(float32x2_t *)(*(void *)a2 + 8 * (unsigned __int16)(v25 + 1)) = vadd_f32(*(float32x2_t *)&v32[8* (v24 + 1)], vdiv_f32(v56, _D1));
      unsigned __int16 v60 = v25 + 2;
      LOWORD(v25) = v25 + 3;
      int32x2_t v18 = (int32x2_t)vsub_f32(*(float32x2_t *)&v32[8 * v31], vdiv_f32(vmul_n_f32(vmul_n_f32(vmls_lane_f32(vmla_n_f32(vsub_f32(vmul_n_f32(vmla_n_f32(vmul_f32(v59, v22), v58, v41), v40), vmul_n_f32(vmla_n_f32(vmul_f32(v58, v23), v57, *(float *)v20.i32), v37)), vmul_n_f32(vmls_lane_f32(vmla_n_f32(vsub_f32(v58, v57), v53, *(float *)v20.i32), v54, v19, 0), v37), *(float *)v20.i32), vmul_n_f32(vmls_lane_f32(vmla_n_f32(vsub_f32(v59, v58), v54, v41), v55, v21, 0), v40), v21, 0), v38), *(float *)v18.i32), _D1));
      *(int32x2_t *)(*(void *)a2 + 8 * v60) = v18;
      uint64_t v24 = v34;
    }
    while (v10 != v34);
    uint64_t v25 = (unsigned __int16)v25;
  }
  *(float32x2_t *)(*(void *)a2 + 8 * v25) = (*a1)[4 * v10 + 1];
  unint64_t v61 = (unint64_t)a1[1];
  double v70 = 0;
  uint64_t v71 = 0;
  __p = 0;
  if (v61)
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, v61);
    int v62 = (char *)v70;
    bzero(v70, 4 * v61);
    unsigned int v63 = &v62[4 * v61];
    double v70 = v63;
    int v64 = a1[1];
    int v65 = (char *)__p;
    if (v64)
    {
      float v66 = 0;
      uint64_t v67 = (int *)*a1 + 1;
      do
      {
        int v68 = *v67;
        v67 += 8;
        *(_DWORD *)&v65[4 * (void)v66] = v68;
        float v66 = (float32x2_t *)((char *)v66 + 1);
      }
      while (v64 != v66);
    }
  }
  else
  {
    int v65 = 0;
    unsigned int v63 = 0;
  }
  *(unsigned char *)(a2 + 58) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v65, (uint64_t)v63, (v63 - v65) >> 2);
    int v65 = (char *)__p;
    unsigned int v63 = (char *)v70;
  }
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v65;
  *(_DWORD *)(a2 + 52) = *((_DWORD *)v63 - 1);
  double v70 = v65;
  operator delete(v65);
  if (v72)
  {
    int v73 = v72;
    operator delete(v72);
  }
  if (v75)
  {
    uint64_t v76 = v75;
    operator delete(v75);
  }
}

void _ZN4geom19interpolating_curveIDv2_fE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v67 = 0;
  int v68 = 0;
  uint64_t v69 = 0;
  int v64 = 0;
  int v65 = 0;
  uint64_t v66 = 0;
  unint64_t v61 = 0;
  int v62 = 0;
  uint64_t v63 = 0;
  __p = 0;
  float32x2_t v59 = 0;
  uint64_t v60 = 0;
  unint64_t v4 = a1[1];
  float32x2_t v56 = 0;
  uint64_t v57 = 0;
  float32x2_t v55 = 0;
  if (v4)
  {
    std::vector<float>::__vallocate[abi:nn180100](&v55, v4);
    __int16 v5 = v56;
    bzero(v56, 4 * v4);
    unint64_t v4 = (unint64_t)v5 + 4 * v4;
    uint64_t v6 = a1[1];
    if (v6)
    {
      uint64_t v7 = 0;
      float32x2_t v8 = v55;
      uint64_t v9 = (int *)(*a1 + 4);
      do
      {
        int v10 = *v9;
        v9 += 8;
        *(_DWORD *)&v8[4 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  uint64_t v11 = v55;
  unint64_t v12 = (unsigned __int16)v6;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v67, (unsigned __int16)v6);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v64, v12);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v61, v12);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, v12);
  unint64_t v16 = v12 - 1;
  v67[v12 - 1] = 0;
  *uint64_t v67 = 0;
  __asm { FMOV            V1.2S, #1.0 }
  *((int32x2_t *)__p + v12 - 1) = _D1;
  *(int32x2_t *)__p = _D1;
  *((void *)v64 + v12 - 1) = 0;
  *(void *)int v64 = 0;
  *((void *)v61 + v12 - 1) = 0;
  *(void *)unint64_t v61 = 0;
  if (v12 - 1 >= 2)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v24 = v11 + 4;
    do
    {
      v13.i32[0] = *(_DWORD *)&v24[v22];
      *(float *)_D1.i32 = *(float *)v13.i32 - *(float *)&v11[v22];
      *(float *)v13.i32 = *(float *)&v24[v22 + 4] - *(float *)v13.i32;
      v14.f32[0] = (float)(*(float *)_D1.i32 + *(float *)v13.i32) + (float)(*(float *)_D1.i32 + *(float *)v13.i32);
      v67[v23 + 1] = vdup_lane_s32(_D1, 0);
      *((int32x2_t *)__p + v23 + 1) = vdup_lane_s32((int32x2_t)v14, 0);
      *((int32x2_t *)v64 + v23 + 1) = vdup_lane_s32(v13, 0);
      uint64_t v25 = (float32x2_t *)(*a1 + 8 * v22);
      float32x2_t v26 = v25[5];
      *(float *)_D1.i32 = 3.0 / *(float *)_D1.i32;
      float32x2_t v14 = vsub_f32(v25[9], v26);
      float32x2_t v15 = v25[1];
      _D1 = (int32x2_t)vmla_n_f32(vmul_f32(vsub_f32(v26, v15), vneg_f32((float32x2_t)vdup_lane_s32(_D1, 0))), v14, 3.0 / *(float *)v13.i32);
      *((int32x2_t *)v61 + ++v23) = _D1;
      v22 += 4;
    }
    while (v12 - 2 != v23);
  }
  int64_t v27 = v59 - (unsigned char *)__p;
  unint64_t v28 = ((unint64_t)(v59 - (unsigned char *)__p) >> 3) - 1;
  *(float32x2_t *)int v64 = vdiv_f32(*(float32x2_t *)v64, *(float32x2_t *)__p);
  *(float32x2_t *)unint64_t v61 = vdiv_f32(*(float32x2_t *)v61, *(float32x2_t *)__p);
  if ((int)v28 > 1)
  {
    unint64_t v29 = v28 - 1;
    uint64_t v30 = 8;
    do
    {
      *(float32x2_t *)((char *)v64 + v30) = vdiv_f32(*(float32x2_t *)((char *)v64 + v30), vmls_f32(*(float32x2_t *)((char *)__p + v30), *(float32x2_t *)((char *)v64 + v30 - 8), (float32x2_t)v67[(unint64_t)v30 / 8]));
      *(float32x2_t *)((char *)v61 + v30) = vdiv_f32(vmls_f32(*(float32x2_t *)((char *)v61 + v30), *(float32x2_t *)((char *)v61 + v30 - 8), (float32x2_t)v67[(unint64_t)v30 / 8]), vmls_f32(*(float32x2_t *)((char *)__p + v30), *(float32x2_t *)((char *)v64 + v30 - 8), (float32x2_t)v67[(unint64_t)v30 / 8]));
      v30 += 8;
      --v29;
    }
    while (v29);
  }
  *((float32x2_t *)v61 + (int)v28) = vdiv_f32(vmls_f32(*(float32x2_t *)((char *)v61 + 8 * (int)v28), *(float32x2_t *)((char *)v61 + (((v27 << 29) - 0x200000000) >> 29)), (float32x2_t)v67[(int)v28]), vmls_f32(*(float32x2_t *)((char *)__p + 8 * (int)v28), *(float32x2_t *)((char *)v64 + (((v27 << 29) - 0x200000000) >> 29)), (float32x2_t)v67[(int)v28]));
  if ((int)v28 >= 1)
  {
    do
    {
      float32x2_t v31 = *(float32x2_t *)((char *)v61 + 8 * v28);
      BOOL v32 = v28-- > 1;
      *((float32x2_t *)v61 + v28) = vmls_f32(*(float32x2_t *)((char *)v61 + 8 * v28), v31, *(float32x2_t *)((char *)v64 + 8 * v28));
    }
    while (v32);
  }
  if (v12 != 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    do
    {
      v15.f32[0] = *(float *)&v11[v34 + 4] - *(float *)&v11[v34];
      double v35 = v15.f32[0];
      float v36 = 1.0 / v15.f32[0];
      v15.f32[0] = v15.f32[0] / 3.0;
      *(float32x2_t *)((char *)v64 + v33) = vmla_n_f32(vmul_f32(vmla_f32(*(float32x2_t *)((char *)v61 + v33 + 8), (float32x2_t)0x4000000040000000, *(float32x2_t *)((char *)v61 + v33)), vneg_f32((float32x2_t)vdup_lane_s32((int32x2_t)v15, 0))), vsub_f32(*(float32x2_t *)(*a1 + 8 * v34 + 40), *(float32x2_t *)(*a1 + 8 * v34 + 8)), v36);
      float v37 = 1.0 / (v35 * 3.0);
      float32x2_t v15 = vmul_n_f32(vsub_f32(*(float32x2_t *)((char *)v61 + v33 + 8), *(float32x2_t *)((char *)v61 + v33)), v37);
      *(float32x2_t *)((char *)__p + v33) = v15;
      v34 += 4;
      v33 += 8;
      --v16;
    }
    while (v16);
  }
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  __int16 v38 = *((_WORD *)a1 + 4);
  unsigned __int16 v39 = v38 - 1;
  if (v38 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    uint64_t v43 = 0;
    uint64_t v42 = 0;
    if (!*(unsigned char *)(a2 + 58)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v39 + 1));
    *(_WORD *)(a2 + 56) = v39;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v39 + 1);
    }
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    LOWORD(v42) = 0;
    uint64_t v43 = v39;
    __asm { FMOV            V2.2S, #3.0 }
    do
    {
      float v45 = *(float *)&v11[v41];
      uint64_t v46 = *a1 + 8 * v41;
      float v47 = *(float *)&v11[v41 + 4] - v45;
      float32x2_t v48 = *(float32x2_t *)(v46 + 8);
      float32x2_t v49 = *(float32x2_t *)((char *)v61 + v40);
      float32x2_t v50 = *(float32x2_t *)(v46 + 40);
      float32x2_t v51 = *(float32x2_t *)((char *)__p + v40);
      float32x2_t v52 = vmla_n_f32(*(float32x2_t *)((char *)v64 + v40), vmla_f32(vmul_n_f32(v51, (float)(v45 - v45) * 3.0), (float32x2_t)0x4000000040000000, v49), v45 - v45);
      float32x2_t v53 = vmla_n_f32(*(float32x2_t *)((char *)v64 + v40), vmla_f32(vmul_n_f32(v51, v47 * 3.0), (float32x2_t)0x4000000040000000, v49), v47);
      *(float32x2_t *)(*(void *)a2 + 8 * (unsigned __int16)v42) = v48;
      unsigned __int16 v54 = v42 + 2;
      *(float32x2_t *)(*(void *)a2 + 8 * (unsigned __int16)(v42 + 1)) = vadd_f32(v48, vdiv_f32(vmul_n_f32(v52, v47), _D2));
      LOWORD(v42) = v42 + 3;
      *(float32x2_t *)(*(void *)a2 + 8 * v54) = vsub_f32(v50, vdiv_f32(vmul_n_f32(v53, v47), _D2));
      v41 += 4;
      v40 += 8;
    }
    while (4 * v39 != v41);
    uint64_t v42 = (unsigned __int16)v42;
  }
  *(void *)(*(void *)a2 + 8 * v42) = *(void *)(*a1 + 32 * v43 + 8);
  *(unsigned char *)(a2 + 58) = 0;
  std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (void)v11) >> 2);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v11;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v4 - 4);
  operator delete(v11);
  if (__p)
  {
    float32x2_t v59 = __p;
    operator delete(__p);
  }
  if (v61)
  {
    int v62 = v61;
    operator delete(v61);
  }
  if (v64)
  {
    int v65 = v64;
    operator delete(v64);
  }
  if (v67)
  {
    int v68 = v67;
    operator delete(v67);
  }
}

void _ZN4geom19interpolating_curveIDv2_fE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(unsigned char *)(a2 + 58)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v5 + 1);
    }
  }
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  std::vector<float>::resize((uint64_t)&v24, v5 + 1);
  uint64_t v6 = *(void *)a1;
  *(_DWORD *)uint64_t v24 = *(_DWORD *)(*(void *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = 0;
    LOWORD(v8) = 0;
    uint64_t v9 = 36;
    __asm { FMOV            V0.2S, #3.0 }
    do
    {
      uint64_t v15 = *(void *)a1;
      float v16 = *(float *)(*(void *)a1 + v9);
      float32x2_t v17 = (float *)&v24[v7];
      v17[1] = v16;
      float v18 = v16 - *v17;
      float32x2_t v19 = (float32x2_t *)(v15 + 8 * v7);
      float32x2_t v20 = vmul_n_f32(v19[3], v18);
      float32x2_t v21 = vmul_n_f32(v19[6], v18);
      *(float32x2_t *)(*(void *)a2 + 8 * (unsigned __int16)v8) = v19[1];
      *(float32x2_t *)(*(void *)a2 + 8 * (unsigned __int16)(v8 + 1)) = vadd_f32(vdiv_f32(v20, _D0), v19[1]);
      LOWORD(v17) = v8 + 2;
      LOWORD(v8) = v8 + 3;
      *(float32x2_t *)(*(void *)a2 + 8 * (unsigned __int16)v17) = vsub_f32(v19[5], vdiv_f32(v21, _D0));
      v7 += 4;
      v9 += 32;
    }
    while (4 * v5 != v7);
    uint64_t v6 = *(void *)a1;
    uint64_t v8 = (unsigned __int16)v8;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(void *)(*(void *)a2 + 8 * v8) = *(void *)(v6 + 32 * *((void *)a1 + 1) - 24);
  *(unsigned char *)(a2 + 58) = 0;
  if ((char **)(a2 + 24) != &v24) {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v24, (uint64_t)v25, (v25 - v24) >> 2);
  }
  uint64_t v22 = v24;
  uint64_t v23 = (uint64_t)v25;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v24;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v23 - 4);
  uint64_t v25 = v22;
  operator delete(v22);
}

float _ZNK4geom20interpolating_splineIDv2_fE21evaluate_total_lengthEv(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 56);
  if (*(_WORD *)(a1 + 56)) {
    unsigned __int16 v2 = *(_WORD *)(a1 + 56);
  }
  else {
    unsigned __int16 v2 = -1;
  }
  if (*(unsigned char *)(a1 + 58))
  {
    if (v1 == v2) {
      float v3 = *(float *)(a1 + 52);
    }
    else {
      float v3 = *(float *)(a1 + 48)
    }
         + (float)((float)v2 * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v1));
  }
  else
  {
    float v3 = *(float *)(*(void *)(a1 + 24) + 4 * v2);
  }
  return _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(a1, v3);
}

uint64_t _ZNSt3__16vectorIN4geom20interpolating_splineIDv2_fEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v10 + 1) > 0x2E8BA2E8BA2E8BALL) {
      abort();
    }
    unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x1745D1745D1745DLL) {
      unint64_t v13 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      float32x2_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_spline<float>>>(v4, v13);
    }
    else {
      float32x2_t v14 = 0;
    }
    uint64_t v15 = v14;
    float v16 = &v14[88 * v10];
    float v18 = &v14[88 * v13];
    _ZN4geom20interpolating_splineIDv2_fEC2ERKS2_((uint64_t)v16, a2);
    float32x2_t v17 = v16 + 88;
    std::vector<geom::interpolating_spline<float>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<geom::interpolating_spline<float>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = _ZN4geom20interpolating_splineIDv2_fEC2ERKS2_(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 88;
  }
  a1[1] = v9;
  return result;
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm((void **)a1, a2 - v2);
  }
}

void _ZN4geom19interpolating_curveIDv3_fE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(unsigned char *)(a2 + 192) = 0;
  _ZN4geom19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(a2, a1, 0);
}

void _ZN4geom19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = a2[1] - *a2;
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = (uint64_t *)(a1 + 72);
  if (v8 == v10)
  {
    uint64_t v11 = v6 >> 6;
  }
  else
  {
    do
      uint64_t v8 = geom::interpolating_spline<float>::~interpolating_spline(v8 - 88);
    while (v8 != v10);
    uint64_t v11 = (uint64_t)(a2[1] - *a2) >> 6;
  }
  *(void *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<float>>::reserve(v9, v11 - 1);
  *(unsigned char *)(a1 + 192) = 0;
  unsigned int v12 = (unsigned __int16)(v6 >> 6);
  if (v12 < 2)
  {
    __int16 v13 = 0;
    __int16 v14 = -1;
  }
  else
  {
    __int16 v13 = 0;
    __int16 v14 = -1;
    for (__int16 i = 1; i < (int)v12; ++i)
    {
      if (*(_DWORD *)(*a2 + ((uint64_t)i << 6)) != *(_DWORD *)(*a2 + ((uint64_t)v13 << 6)))
      {
        __int16 v14 = i - 1;
        *(void *)&long long v107 = *a2 + ((uint64_t)v13 << 6);
        *((void *)&v107 + 1) = (__int16)(i - 1) - (uint64_t)v13 + 1;
        _ZN4geom19interpolating_curveIDv3_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((void *)a1, (float32x4_t **)&v107);
        __int16 v13 = i;
      }
    }
  }
  if (v12 - 1 != v14)
  {
    *(void *)&long long v107 = *a2 + ((uint64_t)v13 << 6);
    *((void *)&v107 + 1) = (unsigned __int16)((unint64_t)v6 >> 6) - (uint64_t)v13;
    _ZN4geom19interpolating_curveIDv3_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((void *)a1, (float32x4_t **)&v107);
  }
  uint64_t v17 = *(void *)(a1 + 72);
  uint64_t v16 = *(void *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3));
  if (v16 == v17)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    unsigned __int16 v18 = 0;
    uint64_t v19 = *v9;
    float32x2_t v20 = *(unsigned __int16 **)(a1 + 24);
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3)) <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = 0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3);
    }
    uint64_t v22 = (__int16 *)(v19 + 56);
    uint64_t v23 = v21;
    do
    {
      __int16 v24 = *v22;
      v22 += 44;
      *v20++ = v18;
      v18 += v24;
      --v23;
    }
    while (v23);
    std::vector<unsigned short>::resize(a1, v18);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = *(void *)(a1 + 72);
    do
    {
      int v34 = *(unsigned __int16 *)(v33 + 88 * v31 + 56);
      if (*(_WORD *)(v33 + 88 * v31 + 56))
      {
        uint64_t v35 = *(void *)a1;
        do
        {
          uint64_t v36 = (v32 + 1);
          *(_WORD *)(v35 + 2 * (unsigned __int16)v32) = v31;
          LODWORD(v32) = v32 + 1;
          --v34;
        }
        while (v34);
      }
      else
      {
        uint64_t v36 = v32;
      }
      ++v31;
      uint64_t v32 = v36;
    }
    while (v31 != v21);
  }
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(*a2 + 4);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2[1] - 60);
  if (a3)
  {
    LOWORD(v117[0]) = 512;
    v117[1] = 0.001;
    char v118 = 1;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    uint64_t v116 = 0;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    *(void *)(a1 + 104) = *(void *)(a1 + 96);
    uint64_t v37 = *(void *)(a1 + 120);
    long long v105 = (float **)(a1 + 120);
    uint64_t v106 = a1;
    *(_WORD *)(a1 + 152) = 0;
    *(unsigned char *)(a1 + 154) = 0;
    *(void *)(a1 + 128) = v37;
    uint64_t v38 = *a2;
    unint64_t v39 = a2[1] - *a2;
    if (v39) {
      float v40 = *(float *)(v38 + 4);
    }
    else {
      float v40 = 0.0;
    }
    if (v39 >= 0x41)
    {
      unint64_t v41 = 1;
      while (1)
      {
        int v42 = *(_DWORD *)(v38 + (v41 << 6));
        if (v42 == *(_DWORD *)(v38 + ((unint64_t)(v41 - 1) << 6))) {
          break;
        }
LABEL_107:
        unint64_t v41 = (v41 + 1);
        uint64_t v38 = *a2;
        unint64_t v96 = (uint64_t)(a2[1] - *a2) >> 6;
        if (v96 <= v41) {
          goto LABEL_128;
        }
      }
      float v43 = *(float *)(v38 + (v41 << 6) + 4);
      LOBYTE(v117[0]) = v42 != 0;
      unsigned __int16 v112 = 0;
      uint64_t v44 = v106;
      unsigned __int8 v113 = 0;
      *((void *)&v107 + 1) = v107;
      *(void *)&long long v109 = *((void *)&v108 + 1);
      double v45 = v43;
      *(double *)v25.i64 = (v43 + v40 * 2.0) * 0.333333333;
      float v46 = *(double *)v25.i64;
      double v47 = (v40 + v43 * 2.0) * 0.333333333;
      float v48 = v47;
      if (*(unsigned char *)(v106 + 192))
      {
        float v49 = v40;
      }
      else
      {
        uint64_t v50 = *(void *)(v106 + 72);
        uint64_t v51 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v106 + 80) - v50) >> 3);
        if ((v51 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v40)
        {
          LOWORD(v51) = v51 - 1;
          if (*(float *)(v106 + 188) > v40)
          {
            for (unsigned __int16 j = 0; ; unsigned __int16 j = v54 + 1)
            {
              int v53 = j;
              while (1)
              {
                unsigned int v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(float *)(v50 + 88 * v54 + 48) <= v40) {
                  break;
                }
                LOWORD(v51) = v54 - 1;
              }
              if (*(float *)(v50 + 88 * v54 + 52) > v40) {
                break;
              }
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
        }
        else
        {
          LOWORD(v51) = 0;
        }
        int v55 = (unsigned __int16)v51;
        int v56 = (unsigned __int16)v51;
        float v57 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v50 + 88 * (unsigned __int16)v51, v40);
        if (v56) {
          double v45 = *(float *)(*(void *)(v44 + 48) + 4 * (v55 - 1));
        }
        else {
          double v45 = 0.0;
        }
        double v47 = v45 + v57;
        float v49 = v47;
        uint64_t v58 = v106;
        if (!*(unsigned char *)(v106 + 192))
        {
          uint64_t v59 = *(void *)(v106 + 72);
          uint64_t v60 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v106 + 80) - v59) >> 3);
          if ((v60 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v46)
          {
            LOWORD(v60) = v60 - 1;
            if (*(float *)(v106 + 188) > v46)
            {
              for (unsigned __int16 k = 0; ; unsigned __int16 k = v63 + 1)
              {
                int v62 = k;
                while (1)
                {
                  unsigned int v63 = (v62 + (unsigned __int16)v60) >> 1;
                  if (*(float *)(v59 + 88 * v63 + 48) <= v46) {
                    break;
                  }
                  LOWORD(v60) = v63 - 1;
                }
                if (*(float *)(v59 + 88 * v63 + 52) > v46) {
                  break;
                }
              }
              LODWORD(v60) = (v62 + (unsigned __int16)v60) >> 1;
            }
          }
          else
          {
            LOWORD(v60) = 0;
          }
          int v64 = (unsigned __int16)v60;
          int v65 = (unsigned __int16)v60;
          float v66 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v59 + 88 * (unsigned __int16)v60, v46);
          double v45 = v65 ? *(float *)(*(void *)(v58 + 48) + 4 * (v64 - 1)) : 0.0;
          double v47 = v45 + v66;
          float v46 = v47;
          uint64_t v67 = v106;
          if (!*(unsigned char *)(v106 + 192))
          {
            uint64_t v68 = *(void *)(v106 + 72);
            uint64_t v69 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v106 + 80) - v68) >> 3);
            if ((v69 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v48)
            {
              LOWORD(v69) = v69 - 1;
              if (*(float *)(v106 + 188) > v48)
              {
                for (unsigned __int16 m = 0; ; unsigned __int16 m = v72 + 1)
                {
                  int v71 = m;
                  while (1)
                  {
                    unsigned int v72 = (v71 + (unsigned __int16)v69) >> 1;
                    if (*(float *)(v68 + 88 * v72 + 48) <= v48) {
                      break;
                    }
                    LOWORD(v69) = v72 - 1;
                  }
                  if (*(float *)(v68 + 88 * v72 + 52) > v48) {
                    break;
                  }
                }
                LODWORD(v69) = (v71 + (unsigned __int16)v69) >> 1;
              }
            }
            else
            {
              LOWORD(v69) = 0;
            }
            int v73 = (unsigned __int16)v69;
            int v74 = (unsigned __int16)v69;
            float v75 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v68 + 88 * (unsigned __int16)v69, v48);
            double v45 = v74 ? *(float *)(*(void *)(v67 + 48) + 4 * (v73 - 1)) : 0.0;
            double v47 = v45 + v75;
            float v48 = v47;
            uint64_t v76 = v106;
            if (!*(unsigned char *)(v106 + 192))
            {
              uint64_t v97 = *(void *)(v106 + 72);
              uint64_t v98 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v106 + 80) - v97) >> 3);
              if ((v98 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v43)
              {
                LOWORD(v98) = v98 - 1;
                if (*(float *)(v106 + 188) > v43)
                {
                  for (unsigned __int16 n = 0; ; unsigned __int16 n = v101 + 1)
                  {
                    int v100 = n;
                    while (1)
                    {
                      unsigned int v101 = (v100 + (unsigned __int16)v98) >> 1;
                      if (*(float *)(v97 + 88 * v101 + 48) <= v43) {
                        break;
                      }
                      LOWORD(v98) = v101 - 1;
                    }
                    if (*(float *)(v97 + 88 * v101 + 52) > v43) {
                      break;
                    }
                  }
                  LODWORD(v98) = (v100 + (unsigned __int16)v98) >> 1;
                }
              }
              else
              {
                LOWORD(v98) = 0;
              }
              int v102 = (unsigned __int16)v98;
              int v103 = (unsigned __int16)v98;
              float v104 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v97 + 88 * (unsigned __int16)v98, v43);
              if (v103) {
                double v45 = *(float *)(*(void *)(v76 + 48) + 4 * (v102 - 1));
              }
              else {
                double v45 = 0.0;
              }
              double v47 = v45 + v104;
              *(float *)&double v47 = v47;
              goto LABEL_83;
            }
          }
        }
      }
      *(float *)&double v47 = v43;
LABEL_83:
      *(float *)char v119 = v40;
      *(float *)&v119[1] = v43;
      *(float *)&v119[2] = v49;
      *(float *)&v119[3] = v46;
      *(float *)&v119[4] = v48;
      v119[5] = LODWORD(v47);
      char v120 = 0;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(&v106, (uint64_t)v119, v117, (uint64_t)&v107, v47, v45, v25, v26, v27, v28, v29, v30);
      uint64_t v77 = v112;
      int v78 = *(_DWORD *)(a1 + 104);
      uint64_t v79 = *(void *)(a1 + 96);
      __int16 v80 = *(_WORD *)(a1 + 152);
      if (v80) {
        unsigned __int16 v81 = v80 + 1;
      }
      else {
        unsigned __int16 v81 = 0;
      }
      unsigned __int16 v82 = v80 + v112;
      if (v80 + v112)
      {
        std::vector<float>::resize(a1 + 96, (unsigned __int16)(3 * v82 + 1));
        *(_WORD *)(a1 + 152) = v82;
        if (!*(unsigned char *)(a1 + 154))
        {
          std::vector<float>::resize((uint64_t)v105, v82 + 1);
          if (v77) {
            goto LABEL_92;
          }
          goto LABEL_106;
        }
LABEL_91:
        if (v77) {
          goto LABEL_92;
        }
        goto LABEL_106;
      }
      *(void *)(a1 + 104) = v79;
      *(_WORD *)(a1 + 152) = 0;
      if (*(unsigned char *)(a1 + 154)) {
        goto LABEL_91;
      }
      *(void *)(a1 + 128) = *(void *)(a1 + 120);
      if (!v77)
      {
LABEL_106:
        float v40 = v43;
        goto LABEL_107;
      }
LABEL_92:
      int v83 = (unsigned __int16)((v78 - v79) >> 2);
      int v84 = v81;
      int v85 = v113;
      uint64_t v86 = v112;
      float v87 = (float)v112;
      double v88 = (float *)*((void *)&v108 + 1);
      int v89 = (_DWORD *)v107;
      int v90 = *v105;
      uint64_t v91 = *(_DWORD **)(a1 + 96);
      int v92 = 3;
      uint64_t v93 = 1;
      while (1)
      {
        if (v83)
        {
          if (v85) {
            goto LABEL_95;
          }
        }
        else
        {
          if (v85)
          {
            if (v86) {
              float v95 = v110 + (float)((float)((float)(v111 - v110) / v87) * 0.0);
            }
            else {
              float v95 = v111;
            }
          }
          else
          {
            float v95 = *v88;
          }
          *int v90 = v95;
          *uint64_t v91 = *v89;
          ++v84;
          int v83 = 1;
          if (v85)
          {
LABEL_95:
            if (v86 == v93)
            {
              float v94 = v111;
            }
            else
            {
              *(float *)&double v26 = (float)(v111 - v110) / v87;
              float v94 = v110 + (float)((float)(unsigned __int16)v93 * *(float *)&v26);
            }
            goto LABEL_105;
          }
        }
        float v94 = v88[v93];
LABEL_105:
        v90[v84] = v94;
        v91[(unsigned __int16)v83] = v89[(unsigned __int16)(v92 - 2)];
        v91[(unsigned __int16)(v83 + 1)] = v89[(unsigned __int16)(v92 - 1)];
        v91[(unsigned __int16)(v83 + 2)] = v89[(unsigned __int16)v92];
        ++v84;
        v83 += 3;
        ++v93;
        v92 += 3;
        if (v93 - v77 == 1) {
          goto LABEL_106;
        }
      }
    }
    unint64_t v96 = v39 >> 6;
LABEL_128:
    *(unsigned char *)(a1 + 192) = 1;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(v38 + 4);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(v38 + (v96 << 6) - 60);
    geom::interpolating_spline<float>::~interpolating_spline((uint64_t)&v107);
  }
}

void _ZN4geom19interpolating_curveIDv3_fE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(unsigned char *)(a2 + 192) = 0;
  _ZN4geom19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(a2, a1, 1);
}

double _ZNK4geom19interpolating_curveIDv3_fE11evaluate_atEf(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 192))
  {
    unint64_t span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    int v4 = (unsigned __int16)(3 * span);
    uint64_t v5 = *(void *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
  }
  uint64_t v6 = *(void *)(a1 + 72);
  uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v6) >> 3);
  if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
  {
    LOWORD(v7) = v7 - 1;
    if (*(float *)(a1 + 188) > a2)
    {
      for (unsigned __int16 i = 0; ; unsigned __int16 i = v10 + 1)
      {
        int v9 = i;
        while (1)
        {
          unsigned int v10 = (v9 + (unsigned __int16)v7) >> 1;
          if (*(float *)(v6 + 88 * v10 + 48) <= a2) {
            break;
          }
          LOWORD(v7) = v10 - 1;
        }
        if (*(float *)(v6 + 88 * v10 + 52) > a2) {
          break;
        }
      }
      LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
    }
  }
  else
  {
    LOWORD(v7) = 0;
  }
  uint64_t v11 = (void *)(v6 + 88 * (unsigned __int16)v7);
  unint64_t v12 = geom::interpolating_spline<float>::find_span((uint64_t)v11, a2);
  float v13 = *((float *)&v12 + 1);
  int v14 = (unsigned __int16)(3 * v12);
  float v15 = 1.0 - *((float *)&v12 + 1);
  float v16 = (float)(v15 * v15) * 3.0 * *((float *)&v12 + 1);
  float32x4_t v17 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(*v11 + 16 * (v14 + 1)), v16), *(float32x4_t *)(*v11 + 16 * (unsigned __int16)(3 * v12)), v15 * (float)(v15 * v15));
  float v18 = (float)(1.0 - *((float *)&v12 + 1)) * 3.0 * (float)(v13 * v13);
  *(void *)&double result = vmlaq_n_f32(vmlaq_n_f32(v17, *(float32x4_t *)(*v11 + 16 * (v14 + 2)), v18), *(float32x4_t *)(*v11 + 16 * (v14 + 3)), (float)(v13 * v13) * v13).u64[0];
  return result;
}

unint64_t _ZNK4geom19interpolating_curveIDv3_fE19evaluate_tangent_atEf(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 192))
  {
    unint64_t span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    int v4 = (unsigned __int16)(3 * span);
    uint64_t v5 = *(void *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v10 + 1)
        {
          int v9 = i;
          while (1)
          {
            unsigned int v10 = (v9 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v10 + 48) <= a2) {
              break;
            }
            LOWORD(v7) = v10 - 1;
          }
          if (*(float *)(v6 + 88 * v10 + 52) > a2) {
            break;
          }
        }
        LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (unsigned __int16 j = 0; ; unsigned __int16 j = v13 + 1)
        {
          int v12 = j;
          while (1)
          {
            unsigned int v13 = (v12 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v13 + 48) <= a2) {
              break;
            }
            LOWORD(v7) = v13 - 1;
          }
          if (*(float *)(v6 + 88 * v13 + 52) > a2) {
            break;
          }
        }
        LODWORD(v7) = (v12 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  return geom::interpolating_spline<float>::find_span(v6 + 88 * (unsigned __int16)v7, a2);
}

float _ZNK4geom19interpolating_curveIDv3_fE18evaluate_length_atEf(uint64_t a1, float result)
{
  if (!*(unsigned char *)(a1 + 192))
  {
    uint64_t v3 = *(void *)(a1 + 72);
    uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v3) >> 3);
    if ((v4 & 0xFFFE) != 0 && *(float *)(a1 + 184) < result)
    {
      LOWORD(v4) = v4 - 1;
      if (*(float *)(a1 + 188) > result)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v7 + 1)
        {
          int v6 = i;
          while (1)
          {
            unsigned int v7 = (v6 + (unsigned __int16)v4) >> 1;
            if (*(float *)(v3 + 88 * v7 + 48) <= result) {
              break;
            }
            LOWORD(v4) = v7 - 1;
          }
          if (*(float *)(v3 + 88 * v7 + 52) > result) {
            break;
          }
        }
        LODWORD(v4) = (v6 + (unsigned __int16)v4) >> 1;
      }
    }
    else
    {
      LOWORD(v4) = 0;
    }
    int v8 = (unsigned __int16)v4;
    int v9 = (unsigned __int16)v4;
    double v10 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v3 + 88 * (unsigned __int16)v4, result);
    if (v9) {
      double v11 = *(float *)(*(void *)(a1 + 48) + 4 * (v8 - 1));
    }
    else {
      double v11 = 0.0;
    }
    return v11 + v10;
  }
  return result;
}

float _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(uint64_t a1, float a2)
{
  unsigned __int16 span = geom::interpolating_spline<float>::find_span(a1, a2);
  uint64_t v5 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v5)
  {
    if (span)
    {
      int v7 = 0;
      float v6 = 0.0;
      do
        float v6 = v6 + _ZNK4geom20interpolating_splineIDv3_fE20evaluate_span_lengthEj(a1, v7++);
      while (span != v7);
      goto LABEL_9;
    }
  }
  else if (span)
  {
    float v6 = *(float *)(v5 + 4 * (span - 1));
    goto LABEL_9;
  }
  float v6 = 0.0;
LABEL_9:
  if (*(unsigned char *)(a1 + 58))
  {
    unsigned int v8 = *(unsigned __int16 *)(a1 + 56);
    if (v8 == span) {
      float v9 = *(float *)(a1 + 52);
    }
    else {
      float v9 = *(float *)(a1 + 48)
    }
         + (float)((float)span * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v8));
  }
  else
  {
    float v9 = *(float *)(*(void *)(a1 + 24) + 4 * span);
  }
  return v6 + _ZNK4geom20interpolating_splineIDv3_fE24evaluate_length_betweeenEff((void *)a1, v9, a2);
}

void _ZNK4geom19interpolating_curveIDv3_fE10span_knotsEtRfS3_(uint64_t a1, unsigned int a2, float *a3, float *a4, double a5, double a6, float a7)
{
  uint64_t v9 = *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
  unsigned __int16 v10 = a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9);
  if (*(unsigned char *)(a1 + 192))
  {
    if (*(_WORD *)(*(void *)a1 + 2 * a2)) {
      float v11 = *(float *)(*(void *)(a1 + 48) + 4 * (v9 - 1));
    }
    else {
      float v11 = 0.0;
    }
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v19 = v18 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    if (*(unsigned char *)(v19 + 58))
    {
      uint64_t v20 = v18 + 88 * v9;
      float v21 = *(float *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 56);
      float v22 = (float)(*(float *)(v20 + 52) - v21) / (float)LODWORD(a7);
      float v23 = v21 + (float)((float)v10 * v22);
      float v24 = v22 + v23;
    }
    else
    {
      int8x16_t v25 = (float *)(*(void *)(v18 + 88 * v9 + 24) + 4 * v10);
      float v23 = *v25;
      float v24 = v25[1];
    }
    *a3 = v11 + _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v19, v23);
    float v17 = v11
        + _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(*(void *)(a1 + 72) + 88 * v9, v24);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 72);
    if (*(unsigned char *)(v12 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 58))
    {
      uint64_t v13 = v12 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
      float v14 = *(float *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 56);
      float v15 = (float)(*(float *)(v13 + 52) - v14) / (float)LODWORD(a7);
      float v16 = v14 + (float)((float)(unsigned __int16)(a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9)) * v15);
      *a3 = v16;
      float v17 = v15 + v16;
    }
    else
    {
      uint64_t v26 = *(void *)(v12 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 24) + 4 * v10;
      *a3 = *(float *)v26;
      float v17 = *(float *)(v26 + 4);
    }
  }
  *a4 = v17;
}

uint64_t _ZNK4geom19interpolating_curveIDv3_fE33calculate_monomial_basis_for_spanEtPS1_(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a1[9];
  uint64_t v4 = 88 * *(unsigned __int16 *)(*a1 + 2 * a2);
  uint64_t v6 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  int v5 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v3 + v4) + 16 * v6);
  __asm { FMOV            V1.4S, #3.0 }
  *(float32x4_t *)(a3 + 16) = vmulq_f32(vsubq_f32(*(float32x4_t *)(*(void *)(v3 + v4) + 16 * (v5 + 1)), *(float32x4_t *)(*(void *)(v3 + v4) + 16 * v6)), _Q1);
  v12.i64[0] = 0xC0000000C0000000;
  v12.i64[1] = 0xC0000000C0000000;
  float32x4_t v13 = vmulq_f32(vaddq_f32(vmlaq_f32(*(float32x4_t *)(*(void *)(v3 + v4) + 16 * v6), v12, *(float32x4_t *)(*(void *)(v3 + v4) + 16 * (v5 + 1))), *(float32x4_t *)(*(void *)(v3 + v4) + 16 * (v6 + 2))), _Q1);
  *(float32x4_t *)(a3 + 32) = v13;
  float32x4_t v14 = vsubq_f32(vmlaq_f32(*(float32x4_t *)(*(void *)(v3 + v4) + 16 * (v6 + 3)), _Q1, vsubq_f32(*(float32x4_t *)(*(void *)(v3 + v4) + 16 * (v5 + 1)), *(float32x4_t *)(*(void *)(v3 + v4) + 16 * (v6 + 2)))), *(float32x4_t *)(*(void *)(v3 + v4) + 16 * v6));
  *(float32x4_t *)(a3 + 48) = v14;
  float32x4_t v15 = vmulq_f32(v13, v13);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]) <= 0.00001&& (float32x4_t v16 = vmulq_f32(v14, v14), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]) <= 0.00001))
  {
    return 2;
  }
  else
  {
    return 4;
  }
}

uint64_t _ZNK4geom19interpolating_curveIDv3_fE31calculate_bezier_basis_for_spanEtPS1_(void *a1, unsigned int a2, uint64_t a3)
{
  int v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  uint64_t v4 = *(void *)(a1[9] + 88 * *(unsigned __int16 *)(*a1 + 2 * a2));
  float32x4_t v5 = *(float32x4_t *)(v4
                      + 16
                      * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  float32x4_t v6 = *(float32x4_t *)(v4 + 16 * (v3 + 1));
  __asm { FMOV            V4.4S, #3.0 }
  float32x4_t v12 = vmulq_f32(vsubq_f32(v6, v5), _Q4);
  v13.i64[0] = 0xC0000000C0000000;
  v13.i64[1] = 0xC0000000C0000000;
  float32x4_t v14 = *(float32x4_t *)(v4 + 16 * (v3 + 2));
  float32x4_t v15 = vmulq_f32(vaddq_f32(vmlaq_f32(v5, v13, v6), v14), _Q4);
  float32x4_t v16 = vsubq_f32(vmlaq_f32(*(float32x4_t *)(v4 + 16 * (v3 + 3)), _Q4, vsubq_f32(v6, v14)), v5);
  float32x4_t v17 = vmulq_f32(v15, v15);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0]) <= 0.00001&& (float32x4_t v18 = vmulq_f32(v16, v16), sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0]) <= 0.00001))
  {
    *(float32x4_t *)a3 = v5;
    *(float32x4_t *)(a3 + 16) = vaddq_f32(v5, v12);
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    return 2;
  }
  else
  {
    float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    *(float32x4_t *)a3 = v5;
    *(float32x4_t *)(a3 + 16) = vmlaq_f32(v5, v19, v12);
    *(float32x4_t *)(a3 + 32) = vmlaq_f32(vmlaq_f32(v5, (float32x4_t)vdupq_n_s32(0x3F2AAAABu), v12), v19, v15);
    *(float32x4_t *)(a3 + 48) = vaddq_f32(vaddq_f32(vaddq_f32(v5, v12), v15), v16);
    return 4;
  }
}

uint64_t _ZN4geom19interpolating_curveIDv3_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(void *a1, float32x4_t **a2)
{
  memset(v26, 0, 24);
  memset(v24, 0, sizeof(v24));
  switch((*a2)->i32[0])
  {
    case 0:
      _ZN4geom19interpolating_curveIDv3_fE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      _ZN4geom19interpolating_curveIDv3_fE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      _ZN4geom19interpolating_curveIDv3_fE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      _ZN4geom19interpolating_curveIDv3_fE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<float>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  uint64_t v3 = v25;
  std::vector<float>::resize((uint64_t)v26, v25);
  if (v3)
  {
    uint64_t v4 = 0;
    float v5 = 0.0;
    do
    {
      float v5 = v5 + _ZNK4geom20interpolating_splineIDv3_fE20evaluate_span_lengthEj((uint64_t)v24, v4);
      *(float *)(v26[0] + 4 * v4++) = v5;
    }
    while (v3 != v4);
  }
  float v6 = _ZNK4geom20interpolating_splineIDv3_fE21evaluate_total_lengthEv((uint64_t)v24);
  uint64_t v7 = a1[10] - a1[9];
  if (v7) {
    float v8 = *(float *)(a1[6] - 0x45D1745D1745D174 * (v7 >> 3) - 4);
  }
  else {
    float v8 = 0.0;
  }
  float v9 = v6 + v8;
  unint64_t v10 = a1[8];
  float v11 = (float *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    float32x4_t v13 = (float *)a1[6];
    uint64_t v14 = v11 - v13;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62) {
      abort();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v15) {
      unint64_t v15 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      float32x4_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 8), v17);
      float32x4_t v13 = (float *)a1[6];
      float v11 = (float *)a1[7];
    }
    else
    {
      float32x4_t v18 = 0;
    }
    float32x4_t v19 = (float *)&v18[4 * v14];
    uint64_t v20 = &v18[4 * v17];
    *float32x4_t v19 = v9;
    float32x4_t v12 = v19 + 1;
    while (v11 != v13)
    {
      int v21 = *((_DWORD *)v11-- - 1);
      *((_DWORD *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    float *v11 = v9;
    float32x4_t v12 = v11 + 1;
  }
  a1[7] = v12;
  _ZNSt3__16vectorIN4geom20interpolating_splineIDv3_fEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v24);
}

void _ZN4geom19interpolating_curveIDv3_fE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(unsigned char *)(a2 + 58)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v5 + 1);
    }
  }
  uint64_t v26 = 0;
  double v27 = 0;
  uint64_t v28 = 0;
  std::vector<float>::resize((uint64_t)&v26, v5 + 1);
  uint64_t v6 = *(void *)a1;
  *(_DWORD *)uint64_t v26 = *(_DWORD *)(*(void *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = 0;
    LOWORD(v8) = 0;
    uint64_t v9 = 68;
    __asm { FMOV            V0.4S, #3.0 }
    do
    {
      uint64_t v15 = *(void *)a1;
      float v16 = *(float *)(*(void *)a1 + v9);
      unint64_t v17 = (float *)&v26[v7];
      v17[1] = v16;
      float v18 = v16 - *v17;
      float32x4_t v19 = (float32x4_t *)(v15 + 16 * v7);
      float32x4_t v20 = v19[1];
      float32x4_t v21 = vsubq_f32(v19[5], v20);
      *(float32x4_t *)(*(void *)a2 + 16 * (unsigned __int16)v8) = v20;
      float32x4_t v22 = vdivq_f32(vmulq_n_f32(v21, v18), _Q0);
      unsigned __int16 v23 = v8 + 2;
      *(float32x4_t *)(*(void *)a2 + 16 * (unsigned __int16)(v8 + 1)) = vaddq_f32(v19[1], v22);
      LOWORD(v8) = v8 + 3;
      *(float32x4_t *)(*(void *)a2 + 16 * v23) = vsubq_f32(v19[5], v22);
      v7 += 4;
      v9 += 64;
    }
    while (4 * v5 != v7);
    uint64_t v6 = *(void *)a1;
    uint64_t v8 = (unsigned __int16)v8;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_OWORD *)(*(void *)a2 + 16 * v8) = *(_OWORD *)(v6 + (*((void *)a1 + 1) << 6) - 48);
  *(unsigned char *)(a2 + 58) = 0;
  if ((char **)(a2 + 24) != &v26) {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v26, (uint64_t)v27, (v27 - v26) >> 2);
  }
  float v24 = v26;
  uint64_t v25 = (uint64_t)v27;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v26;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v25 - 4);
  double v27 = v24;
  operator delete(v24);
}

void _ZN4geom19interpolating_curveIDv3_fE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(float32x4_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  uint64_t v79 = 0;
  __int16 v80 = 0;
  uint64_t v81 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  __int16 v4 = a1[1];
  __int16 v5 = (_WORD)v4 - 1;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v79, (unsigned __int16)((_WORD)v4 + 2));
  std::vector<float>::resize((uint64_t)&v76, (unsigned __int16)((_WORD)v4 + 2));
  v6.i64[0] = 0x4000000040000000;
  v6.i64[1] = 0x4000000040000000;
  *(float32x4_t *)uint64_t v79 = vmlaq_f32(vnegq_f32((*a1)[5]), v6, (*a1)[1]);
  uint64_t v7 = (float *)v76;
  *(_DWORD *)uint64_t v76 = 0;
  uint64_t v8 = *a1;
  float32x4_t v9 = vsubq_f32((*a1)[5], (*a1)[1]);
  float32x4_t v10 = vmulq_f32(v9, v9);
  v7[1] = sqrtf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0]));
  if ((_WORD)v4 == 1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = (unsigned __int16)((_WORD)v4 - 1);
    uint64_t v13 = 16;
    do
    {
      *(float32x4_t *)((char *)v79 + v13) = v8[v11 + 1];
      uint64_t v8 = *a1;
      float32x4_t v14 = vsubq_f32((*a1)[v11 + 5], (*a1)[v11 + 1]);
      float32x4_t v15 = vmulq_f32(v14, v14);
      *(float *)((char *)v76 + v11 + 8) = *(float *)((char *)v76 + v11 + 4)
                                        + sqrtf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1))).f32[0]));
      v11 += 4;
      v13 += 16;
    }
    while (4 * (unsigned __int16)((_WORD)v4 - 1) != v11);
  }
  uint64_t v16 = (unsigned __int16)((_WORD)v4 + 2) - 2;
  *((float32x4_t *)v79 + v16) = v8[4 * v12 + 1];
  uint64_t v17 = (unsigned __int16)((_WORD)v4 + 2) - 1;
  *((float32x4_t *)v79 + v17) = vmlaq_f32(vnegq_f32(*((float32x4_t *)v79 + (unsigned __int16)((_WORD)v4 + 2) - 3)), v6, *((float32x4_t *)v79 + v16));
  float v18 = *((float *)v76 + v16);
  float32x4_t v19 = &(*a1)[4 * (unint64_t)(unsigned __int16)((_WORD)v4 - 2)];
  float32x4_t v20 = vsubq_f32(v19[5], v19[1]);
  float32x4_t v21 = vmulq_f32(v20, v20);
  *((float *)v76 + v17) = v18
                        + sqrtf(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]));
  if ((_WORD)v4 == 1)
  {
    uint64_t v29 = 0;
    *(void *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 56) = 0;
    if (!*(unsigned char *)(a2 + 58))
    {
      uint64_t v29 = 0;
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v12 + 1);
    }
    uint64_t v28 = 0;
    LOWORD(v29) = 0;
    __asm { FMOV            V1.4S, #3.0 }
    do
    {
      int v35 = v28 + 2;
      uint64_t v36 = (float32x4_t *)v79;
      v23.i32[0] = *((_DWORD *)v76 + v28);
      float32x4_t v37 = *((float32x4_t *)v79 + v28);
      uint64_t v38 = v28 + 1;
      v25.i32[0] = *((_DWORD *)v76 + (v28 + 1));
      v24.i32[0] = *((_DWORD *)v76 + (v28 + 2));
      float v39 = *((float *)v76 + (v28 + 3));
      v22.f32[0] = *(float *)v24.i32 - v25.f32[0];
      float v40 = 1.0 / (float)(v25.f32[0] - v23.f32[0]);
      float v41 = 1.0 / (float)(*(float *)v24.i32 - v23.f32[0]);
      float v42 = 1.0 / (float)(*(float *)v24.i32 - v25.f32[0]);
      float v43 = v39 - v25.f32[0];
      float v44 = 1.0 / (float)(v39 - v25.f32[0]);
      float v45 = v39 - *(float *)v24.i32;
      float v46 = 1.0 / (float)(v39 - *(float *)v24.i32);
      v26.f32[0] = v23.f32[0] - v25.f32[0];
      v27.f32[0] = v25.f32[0] - v25.f32[0];
      float32x4_t v47 = *((float32x4_t *)v79 + (v28 + 1));
      float32x4_t v48 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 0));
      float32x4_t v49 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v47, v48), v37, v25.f32[0] - v25.f32[0]), v40);
      float32x4_t v50 = *((float32x4_t *)v79 + (v28 + 2));
      float32x4_t v51 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0));
      float32x4_t v52 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v50, v51), v47, *(float *)v24.i32 - v25.f32[0]), v42);
      float32x4_t v53 = *((float32x4_t *)v79 + (v28 + 3));
      float32x4_t v54 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v53, vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 0))), v50, v43), v46);
      float32x4_t v55 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v52, v48), v49, *(float *)v24.i32 - v25.f32[0]), v41);
      float32x4_t v56 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v54, v51), v52, v43), v44);
      float32x4_t v57 = vmulq_n_f32(vsubq_f32(v47, v37), v40);
      float32x4_t v58 = vmulq_n_f32(vsubq_f32(v50, v47), v42);
      float32x4_t v59 = vmulq_n_f32(vsubq_f32(v53, v50), v46);
      float32x4_t v60 = vmulq_n_f32(vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v56, v55), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v52, v49), v57, *(float *)v24.i32 - v25.f32[0]), v58, *(float32x2_t *)v26.f32, 0), v41), *(float *)v24.i32 - v25.f32[0]), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v54, v52), v58, v43), v59, *(float32x2_t *)v27.f32, 0), v44), *(float32x2_t *)v27.f32, 0), v42), *(float *)v24.i32 - v25.f32[0]);
      v23.f32[0] = v23.f32[0] - *(float *)v24.i32;
      v25.f32[0] = v25.f32[0] - *(float *)v24.i32;
      *(float *)v24.i32 = *(float *)v24.i32 - *(float *)v24.i32;
      float32x4_t v27 = vnegq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v23, 0));
      float32x4_t v61 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v47, v27), v37, v25.f32[0]), v40);
      float32x4_t v26 = vnegq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v25, 0));
      float32x4_t v62 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v50, v26), v47, *(float *)v24.i32), v42);
      float32x4_t v63 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v53, vnegq_f32((float32x4_t)vdupq_lane_s32(v24, 0))), v50, v45), v46);
      *(float32x4_t *)(*(void *)a2 + 16 * (unsigned __int16)v29) = v47;
      *(float32x4_t *)(*(void *)a2 + 16 * (unsigned __int16)(v29 + 1)) = vaddq_f32(v36[(v28 + 1)], vdivq_f32(v60, _Q1));
      unsigned __int16 v64 = v29 + 2;
      LOWORD(v29) = v29 + 3;
      float32x4_t v22 = vsubq_f32(v36[v35], vdivq_f32(vmulq_n_f32(vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v63, v26), v62, v45), v44), vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v62, v27), v61, *(float *)v24.i32), v41)), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v62, v61), v57, *(float *)v24.i32), v58, v23, 0), v41), *(float *)v24.i32), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v63, v62), v58, v45), v59, v25, 0), v44), v25, 0), v42), v22.f32[0]), _Q1));
      *(float32x4_t *)(*(void *)a2 + 16 * v64) = v22;
      uint64_t v28 = v38;
    }
    while (v12 != v38);
    uint64_t v29 = (unsigned __int16)v29;
  }
  *(float32x4_t *)(*(void *)a2 + 16 * v29) = (*a1)[4 * v12 + 1];
  unint64_t v65 = (unint64_t)a1[1];
  int v74 = 0;
  uint64_t v75 = 0;
  __p = 0;
  if (v65)
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, v65);
    float v66 = (char *)v74;
    bzero(v74, 4 * v65);
    uint64_t v67 = &v66[4 * v65];
    int v74 = v67;
    uint64_t v68 = a1[1];
    uint64_t v69 = (char *)__p;
    if (v68)
    {
      double v70 = 0;
      int v71 = &(*a1)->i32[1];
      do
      {
        __int32 v72 = *v71;
        v71 += 16;
        *(_DWORD *)&v69[4 * (void)v70] = v72;
        double v70 = (float32x4_t *)((char *)v70 + 1);
      }
      while (v68 != v70);
    }
  }
  else
  {
    uint64_t v69 = 0;
    uint64_t v67 = 0;
  }
  *(unsigned char *)(a2 + 58) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v69, (uint64_t)v67, (v67 - v69) >> 2);
    uint64_t v69 = (char *)__p;
    uint64_t v67 = (char *)v74;
  }
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v69;
  *(_DWORD *)(a2 + 52) = *((_DWORD *)v67 - 1);
  int v74 = v69;
  operator delete(v69);
  if (v76)
  {
    uint64_t v77 = v76;
    operator delete(v76);
  }
  if (v79)
  {
    __int16 v80 = v79;
    operator delete(v79);
  }
}

void _ZN4geom19interpolating_curveIDv3_fE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(void *a1@<X1>, uint64_t a2@<X8>)
{
  double v70 = 0;
  int v71 = 0;
  uint64_t v72 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  unsigned __int16 v64 = 0;
  unint64_t v65 = 0;
  uint64_t v66 = 0;
  __p = 0;
  float32x4_t v62 = 0;
  uint64_t v63 = 0;
  unint64_t v4 = a1[1];
  float32x4_t v59 = 0;
  uint64_t v60 = 0;
  float32x4_t v58 = 0;
  if (v4)
  {
    std::vector<float>::__vallocate[abi:nn180100](&v58, v4);
    __int16 v5 = v59;
    bzero(v59, 4 * v4);
    unint64_t v4 = (unint64_t)v5 + 4 * v4;
    uint64_t v6 = a1[1];
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v58;
      float32x4_t v9 = (int *)(*a1 + 4);
      do
      {
        int v10 = *v9;
        v9 += 16;
        *(_DWORD *)&v8[4 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  uint64_t v11 = v58;
  unint64_t v12 = (unsigned __int16)v6;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v70, (unsigned __int16)v6);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v67, v12);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v64, v12);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, v12);
  unint64_t v16 = v12 - 1;
  v70[v12 - 1] = 0u;
  *double v70 = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *((float32x4_t *)__p + v12 - 1) = _Q1;
  *(float32x4_t *)__p = _Q1;
  *((_OWORD *)v67 + v12 - 1) = 0u;
  *(_OWORD *)uint64_t v67 = 0u;
  *((_OWORD *)v64 + v12 - 1) = 0u;
  *(_OWORD *)unsigned __int16 v64 = 0u;
  if (v12 - 1 >= 2)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int32x2_t v24 = v11 + 4;
    do
    {
      v13.i32[0] = *(_DWORD *)&v24[v22];
      _Q1.f32[0] = *(float *)v13.i32 - *(float *)&v11[v22];
      *(float *)v13.i32 = *(float *)&v24[v22 + 4] - *(float *)v13.i32;
      v14.f32[0] = (float)(_Q1.f32[0] + *(float *)v13.i32) + (float)(_Q1.f32[0] + *(float *)v13.i32);
      v70[v23 + 1] = vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0);
      *((int32x4_t *)__p + v23 + 1) = vdupq_lane_s32(*(int32x2_t *)v14.f32, 0);
      *((int32x4_t *)v67 + v23 + 1) = vdupq_lane_s32(v13, 0);
      uint64_t v25 = *a1 + 16 * v22;
      float32x4_t v26 = *(float32x4_t *)(v25 + 80);
      _Q1.f32[0] = 3.0 / _Q1.f32[0];
      float32x4_t v14 = vsubq_f32(*(float32x4_t *)(v25 + 144), v26);
      float32x4_t v15 = *(float32x4_t *)(v25 + 16);
      _Q1 = vmlaq_n_f32(vmulq_f32(vsubq_f32(v26, v15), vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0))), v14, 3.0 / *(float *)v13.i32);
      *((float32x4_t *)v64 + ++v23) = _Q1;
      v22 += 4;
    }
    while (v12 - 2 != v23);
  }
  int64_t v27 = v62 - (unsigned char *)__p;
  unint64_t v28 = ((unint64_t)(v62 - (unsigned char *)__p) >> 4) - 1;
  *(float32x4_t *)uint64_t v67 = vdivq_f32(*(float32x4_t *)v67, *(float32x4_t *)__p);
  *(float32x4_t *)unsigned __int16 v64 = vdivq_f32(*(float32x4_t *)v64, *(float32x4_t *)__p);
  if ((int)v28 > 1)
  {
    unint64_t v29 = v28 - 1;
    uint64_t v30 = 16;
    do
    {
      *(float32x4_t *)((char *)v67 + v30) = vdivq_f32(*(float32x4_t *)((char *)v67 + v30), vmlsq_f32(*(float32x4_t *)((char *)__p + v30), *(float32x4_t *)((char *)v67 + v30 - 16), (float32x4_t)v70[(unint64_t)v30 / 0x10]));
      *(float32x4_t *)((char *)v64 + v30) = vdivq_f32(vmlsq_f32(*(float32x4_t *)((char *)v64 + v30), *(float32x4_t *)((char *)v64 + v30 - 16), (float32x4_t)v70[(unint64_t)v30 / 0x10]), vmlsq_f32(*(float32x4_t *)((char *)__p + v30), *(float32x4_t *)((char *)v67 + v30 - 16), (float32x4_t)v70[(unint64_t)v30 / 0x10]));
      v30 += 16;
      --v29;
    }
    while (v29);
  }
  *((float32x4_t *)v64 + (int)v28) = vdivq_f32(vmlsq_f32(*((float32x4_t *)v64 + (int)v28), *(float32x4_t *)((char *)v64 + (((v27 << 28) - 0x200000000) >> 28)), (float32x4_t)v70[(int)v28]), vmlsq_f32(*((float32x4_t *)__p + (int)v28), *(float32x4_t *)((char *)v67 + (((v27 << 28) - 0x200000000) >> 28)), (float32x4_t)v70[(int)v28]));
  if ((int)v28 >= 1)
  {
    do
    {
      float32x4_t v31 = *((float32x4_t *)v64 + v28);
      BOOL v32 = v28-- > 1;
      *((float32x4_t *)v64 + v28) = vmlsq_f32(*((float32x4_t *)v64 + v28), v31, *((float32x4_t *)v67 + v28));
    }
    while (v32);
  }
  if (v12 != 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    v35.i64[0] = 0x4000000040000000;
    v35.i64[1] = 0x4000000040000000;
    do
    {
      v15.f32[0] = *(float *)&v11[v34 + 4] - *(float *)&v11[v34];
      double v36 = v15.f32[0];
      float v37 = 1.0 / v15.f32[0];
      v15.f32[0] = v15.f32[0] / 3.0;
      *(float32x4_t *)((char *)v67 + v33) = vmlaq_n_f32(vmulq_f32(vmlaq_f32(*(float32x4_t *)((char *)v64 + v33 + 16), v35, *(float32x4_t *)((char *)v64 + v33)), vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 0))), vsubq_f32(*(float32x4_t *)(*a1 + 16 * v34 + 80), *(float32x4_t *)(*a1 + 16 * v34 + 16)), v37);
      float v38 = 1.0 / (v36 * 3.0);
      float32x4_t v15 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)((char *)v64 + v33 + 16), *(float32x4_t *)((char *)v64 + v33)), v38);
      *(float32x4_t *)((char *)__p + v33) = v15;
      v34 += 4;
      v33 += 16;
      --v16;
    }
    while (v16);
  }
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  __int16 v39 = *((_WORD *)a1 + 4);
  unsigned __int16 v40 = v39 - 1;
  if (v39 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    uint64_t v44 = 0;
    uint64_t v43 = 0;
    if (!*(unsigned char *)(a2 + 58)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v40 + 1));
    *(_WORD *)(a2 + 56) = v40;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v40 + 1);
    }
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    LOWORD(v43) = 0;
    uint64_t v44 = v40;
    v45.i64[0] = 0x4000000040000000;
    v45.i64[1] = 0x4000000040000000;
    __asm { FMOV            V2.4S, #3.0 }
    do
    {
      float v47 = *(float *)&v11[v42];
      uint64_t v48 = *a1 + 16 * v42;
      float v49 = *(float *)&v11[v42 + 4] - v47;
      float32x4_t v50 = *(float32x4_t *)(v48 + 16);
      float32x4_t v51 = *(float32x4_t *)((char *)v64 + v41);
      float32x4_t v52 = *(float32x4_t *)((char *)__p + v41);
      float32x4_t v53 = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)((char *)v67 + v41), vmlaq_f32(vmulq_n_f32(v52, (float)(v47 - v47) * 3.0), v45, v51), v47 - v47), v49);
      float32x4_t v54 = vmlaq_f32(vmulq_n_f32(v52, v49 * 3.0), v45, v51);
      float32x4_t v55 = *(float32x4_t *)(v48 + 80);
      float32x4_t v56 = vmlaq_n_f32(*(float32x4_t *)((char *)v67 + v41), v54, v49);
      *(float32x4_t *)(*(void *)a2 + 16 * (unsigned __int16)v43) = v50;
      unsigned __int16 v57 = v43 + 2;
      *(float32x4_t *)(*(void *)a2 + 16 * (unsigned __int16)(v43 + 1)) = vaddq_f32(v50, vdivq_f32(v53, _Q2));
      LOWORD(v43) = v43 + 3;
      *(float32x4_t *)(*(void *)a2 + 16 * v57) = vsubq_f32(v55, vdivq_f32(vmulq_n_f32(v56, v49), _Q2));
      v42 += 4;
      v41 += 16;
    }
    while (4 * v40 != v42);
    uint64_t v43 = (unsigned __int16)v43;
  }
  *(_OWORD *)(*(void *)a2 + 16 * v43) = *(_OWORD *)(*a1 + (v44 << 6) + 16);
  *(unsigned char *)(a2 + 58) = 0;
  std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (void)v11) >> 2);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v11;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v4 - 4);
  operator delete(v11);
  if (__p)
  {
    float32x4_t v62 = __p;
    operator delete(__p);
  }
  if (v64)
  {
    unint64_t v65 = v64;
    operator delete(v64);
  }
  if (v67)
  {
    uint64_t v68 = v67;
    operator delete(v67);
  }
  if (v70)
  {
    int v71 = v70;
    operator delete(v70);
  }
}

void _ZN4geom19interpolating_curveIDv3_fE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 64) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    if (!*(unsigned char *)(a2 + 58)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v5 + 1);
    }
  }
  int32x2_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  std::vector<float>::resize((uint64_t)&v24, v5 + 1);
  uint64_t v6 = *(void *)a1;
  *(_DWORD *)int32x2_t v24 = *(_DWORD *)(*(void *)a1 + 4);
  if (v5)
  {
    uint64_t v7 = 0;
    LOWORD(v8) = 0;
    uint64_t v9 = 68;
    __asm { FMOV            V0.4S, #3.0 }
    do
    {
      uint64_t v15 = *(void *)a1;
      float v16 = *(float *)(*(void *)a1 + v9);
      uint64_t v17 = (float *)&v24[v7];
      v17[1] = v16;
      float v18 = v16 - *v17;
      float32x4_t v19 = (float32x4_t *)(v15 + 16 * v7);
      float32x4_t v20 = vmulq_n_f32(v19[3], v18);
      float32x4_t v21 = vmulq_n_f32(v19[6], v18);
      *(float32x4_t *)(*(void *)a2 + 16 * (unsigned __int16)v8) = v19[1];
      *(float32x4_t *)(*(void *)a2 + 16 * (unsigned __int16)(v8 + 1)) = vaddq_f32(vdivq_f32(v20, _Q0), v19[1]);
      LOWORD(v17) = v8 + 2;
      LOWORD(v8) = v8 + 3;
      *(float32x4_t *)(*(void *)a2 + 16 * (unsigned __int16)v17) = vsubq_f32(v19[5], vdivq_f32(v21, _Q0));
      v7 += 4;
      v9 += 64;
    }
    while (4 * v5 != v7);
    uint64_t v6 = *(void *)a1;
    uint64_t v8 = (unsigned __int16)v8;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_OWORD *)(*(void *)a2 + 16 * v8) = *(_OWORD *)(v6 + (*((void *)a1 + 1) << 6) - 48);
  *(unsigned char *)(a2 + 58) = 0;
  if ((char **)(a2 + 24) != &v24) {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v24, (uint64_t)v25, (v25 - v24) >> 2);
  }
  uint64_t v22 = v24;
  uint64_t v23 = (uint64_t)v25;
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v24;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v23 - 4);
  uint64_t v25 = v22;
  operator delete(v22);
}

float _ZNK4geom20interpolating_splineIDv3_fE21evaluate_total_lengthEv(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 56);
  if (*(_WORD *)(a1 + 56)) {
    unsigned __int16 v2 = *(_WORD *)(a1 + 56);
  }
  else {
    unsigned __int16 v2 = -1;
  }
  if (*(unsigned char *)(a1 + 58))
  {
    if (v1 == v2) {
      float v3 = *(float *)(a1 + 52);
    }
    else {
      float v3 = *(float *)(a1 + 48)
    }
         + (float)((float)v2 * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v1));
  }
  else
  {
    float v3 = *(float *)(*(void *)(a1 + 24) + 4 * v2);
  }
  return _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(a1, v3);
}

uint64_t _ZNSt3__16vectorIN4geom20interpolating_splineIDv3_fEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    uint64_t v10 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v7 - *a1) >> 3);
    if ((unint64_t)(v10 + 1) > 0x2E8BA2E8BA2E8BALL) {
      abort();
    }
    unint64_t v11 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v5 - *a1) >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x1745D1745D1745DLL) {
      unint64_t v13 = 0x2E8BA2E8BA2E8BALL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      float32x4_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_spline<float>>>(v4, v13);
    }
    else {
      float32x4_t v14 = 0;
    }
    uint64_t v15 = v14;
    float v16 = &v14[88 * v10];
    float v18 = &v14[88 * v13];
    _ZN4geom20interpolating_splineIDv3_fEC2ERKS2_((uint64_t)v16, a2);
    uint64_t v17 = v16 + 88;
    std::vector<geom::interpolating_spline<float>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<geom::interpolating_spline<float>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = _ZN4geom20interpolating_splineIDv3_fEC2ERKS2_(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 88;
  }
  a1[1] = v9;
  return result;
}

void _ZN4geom19interpolating_curveIDv4_fE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(unsigned char *)(a2 + 192) = 0;
  _ZN4geom19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(a2, a1, 0);
}

void _ZN4geom19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = a2[1] - *a2;
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = (uint64_t *)(a1 + 72);
  if (v8 == v10)
  {
    uint64_t v11 = v6 >> 6;
  }
  else
  {
    do
      uint64_t v8 = geom::interpolating_spline<float>::~interpolating_spline(v8 - 88);
    while (v8 != v10);
    uint64_t v11 = (uint64_t)(a2[1] - *a2) >> 6;
  }
  *(void *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<float>>::reserve(v9, v11 - 1);
  *(unsigned char *)(a1 + 192) = 0;
  unsigned int v12 = (unsigned __int16)(v6 >> 6);
  if (v12 < 2)
  {
    __int16 v13 = 0;
    __int16 v14 = -1;
  }
  else
  {
    __int16 v13 = 0;
    __int16 v14 = -1;
    for (__int16 i = 1; i < (int)v12; ++i)
    {
      if (*(_DWORD *)(*a2 + ((uint64_t)i << 6)) != *(_DWORD *)(*a2 + ((uint64_t)v13 << 6)))
      {
        __int16 v14 = i - 1;
        *(void *)&long long v107 = *a2 + ((uint64_t)v13 << 6);
        *((void *)&v107 + 1) = (__int16)(i - 1) - (uint64_t)v13 + 1;
        _ZN4geom19interpolating_curveIDv4_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((void *)a1, (float32x4_t **)&v107);
        __int16 v13 = i;
      }
    }
  }
  if (v12 - 1 != v14)
  {
    *(void *)&long long v107 = *a2 + ((uint64_t)v13 << 6);
    *((void *)&v107 + 1) = (unsigned __int16)((unint64_t)v6 >> 6) - (uint64_t)v13;
    _ZN4geom19interpolating_curveIDv4_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((void *)a1, (float32x4_t **)&v107);
  }
  uint64_t v17 = *(void *)(a1 + 72);
  uint64_t v16 = *(void *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3));
  if (v16 == v17)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    unsigned __int16 v18 = 0;
    uint64_t v19 = *v9;
    float32x4_t v20 = *(unsigned __int16 **)(a1 + 24);
    if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3)) <= 1) {
      uint64_t v21 = 1;
    }
    else {
      uint64_t v21 = 0x2E8BA2E8BA2E8BA3 * ((v16 - v17) >> 3);
    }
    uint64_t v22 = (__int16 *)(v19 + 56);
    uint64_t v23 = v21;
    do
    {
      __int16 v24 = *v22;
      v22 += 44;
      *v20++ = v18;
      v18 += v24;
      --v23;
    }
    while (v23);
    std::vector<unsigned short>::resize(a1, v18);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = *(void *)(a1 + 72);
    do
    {
      int v34 = *(unsigned __int16 *)(v33 + 88 * v31 + 56);
      if (*(_WORD *)(v33 + 88 * v31 + 56))
      {
        uint64_t v35 = *(void *)a1;
        do
        {
          uint64_t v36 = (v32 + 1);
          *(_WORD *)(v35 + 2 * (unsigned __int16)v32) = v31;
          LODWORD(v32) = v32 + 1;
          --v34;
        }
        while (v34);
      }
      else
      {
        uint64_t v36 = v32;
      }
      ++v31;
      uint64_t v32 = v36;
    }
    while (v31 != v21);
  }
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(*a2 + 4);
  *(_DWORD *)(a1 + 188) = *(_DWORD *)(a2[1] - 60);
  if (a3)
  {
    LOWORD(v117[0]) = 512;
    v117[1] = 0.001;
    char v118 = 1;
    uint64_t v114 = 0;
    uint64_t v115 = 0;
    uint64_t v116 = 0;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v109 = 0u;
    *(void *)(a1 + 104) = *(void *)(a1 + 96);
    uint64_t v37 = *(void *)(a1 + 120);
    long long v105 = (float **)(a1 + 120);
    uint64_t v106 = a1;
    *(_WORD *)(a1 + 152) = 0;
    *(unsigned char *)(a1 + 154) = 0;
    *(void *)(a1 + 128) = v37;
    uint64_t v38 = *a2;
    unint64_t v39 = a2[1] - *a2;
    if (v39) {
      float v40 = *(float *)(v38 + 4);
    }
    else {
      float v40 = 0.0;
    }
    if (v39 >= 0x41)
    {
      unint64_t v41 = 1;
      while (1)
      {
        int v42 = *(_DWORD *)(v38 + (v41 << 6));
        if (v42 == *(_DWORD *)(v38 + ((unint64_t)(v41 - 1) << 6))) {
          break;
        }
LABEL_107:
        unint64_t v41 = (v41 + 1);
        uint64_t v38 = *a2;
        unint64_t v96 = (uint64_t)(a2[1] - *a2) >> 6;
        if (v96 <= v41) {
          goto LABEL_128;
        }
      }
      float v43 = *(float *)(v38 + (v41 << 6) + 4);
      LOBYTE(v117[0]) = v42 != 0;
      unsigned __int16 v112 = 0;
      uint64_t v44 = v106;
      unsigned __int8 v113 = 0;
      *((void *)&v107 + 1) = v107;
      *(void *)&long long v109 = *((void *)&v108 + 1);
      double v45 = v43;
      *(double *)v25.i64 = (v43 + v40 * 2.0) * 0.333333333;
      float v46 = *(double *)v25.i64;
      double v47 = (v40 + v43 * 2.0) * 0.333333333;
      float v48 = v47;
      if (*(unsigned char *)(v106 + 192))
      {
        float v49 = v40;
      }
      else
      {
        uint64_t v50 = *(void *)(v106 + 72);
        uint64_t v51 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v106 + 80) - v50) >> 3);
        if ((v51 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v40)
        {
          LOWORD(v51) = v51 - 1;
          if (*(float *)(v106 + 188) > v40)
          {
            for (unsigned __int16 j = 0; ; unsigned __int16 j = v54 + 1)
            {
              int v53 = j;
              while (1)
              {
                unsigned int v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(float *)(v50 + 88 * v54 + 48) <= v40) {
                  break;
                }
                LOWORD(v51) = v54 - 1;
              }
              if (*(float *)(v50 + 88 * v54 + 52) > v40) {
                break;
              }
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
        }
        else
        {
          LOWORD(v51) = 0;
        }
        int v55 = (unsigned __int16)v51;
        int v56 = (unsigned __int16)v51;
        float v57 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v50 + 88 * (unsigned __int16)v51, v40);
        if (v56) {
          double v45 = *(float *)(*(void *)(v44 + 48) + 4 * (v55 - 1));
        }
        else {
          double v45 = 0.0;
        }
        double v47 = v45 + v57;
        float v49 = v47;
        uint64_t v58 = v106;
        if (!*(unsigned char *)(v106 + 192))
        {
          uint64_t v59 = *(void *)(v106 + 72);
          uint64_t v60 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v106 + 80) - v59) >> 3);
          if ((v60 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v46)
          {
            LOWORD(v60) = v60 - 1;
            if (*(float *)(v106 + 188) > v46)
            {
              for (unsigned __int16 k = 0; ; unsigned __int16 k = v63 + 1)
              {
                int v62 = k;
                while (1)
                {
                  unsigned int v63 = (v62 + (unsigned __int16)v60) >> 1;
                  if (*(float *)(v59 + 88 * v63 + 48) <= v46) {
                    break;
                  }
                  LOWORD(v60) = v63 - 1;
                }
                if (*(float *)(v59 + 88 * v63 + 52) > v46) {
                  break;
                }
              }
              LODWORD(v60) = (v62 + (unsigned __int16)v60) >> 1;
            }
          }
          else
          {
            LOWORD(v60) = 0;
          }
          int v64 = (unsigned __int16)v60;
          int v65 = (unsigned __int16)v60;
          float v66 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v59 + 88 * (unsigned __int16)v60, v46);
          double v45 = v65 ? *(float *)(*(void *)(v58 + 48) + 4 * (v64 - 1)) : 0.0;
          double v47 = v45 + v66;
          float v46 = v47;
          uint64_t v67 = v106;
          if (!*(unsigned char *)(v106 + 192))
          {
            uint64_t v68 = *(void *)(v106 + 72);
            uint64_t v69 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v106 + 80) - v68) >> 3);
            if ((v69 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v48)
            {
              LOWORD(v69) = v69 - 1;
              if (*(float *)(v106 + 188) > v48)
              {
                for (unsigned __int16 m = 0; ; unsigned __int16 m = v72 + 1)
                {
                  int v71 = m;
                  while (1)
                  {
                    unsigned int v72 = (v71 + (unsigned __int16)v69) >> 1;
                    if (*(float *)(v68 + 88 * v72 + 48) <= v48) {
                      break;
                    }
                    LOWORD(v69) = v72 - 1;
                  }
                  if (*(float *)(v68 + 88 * v72 + 52) > v48) {
                    break;
                  }
                }
                LODWORD(v69) = (v71 + (unsigned __int16)v69) >> 1;
              }
            }
            else
            {
              LOWORD(v69) = 0;
            }
            int v73 = (unsigned __int16)v69;
            int v74 = (unsigned __int16)v69;
            float v75 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v68 + 88 * (unsigned __int16)v69, v48);
            double v45 = v74 ? *(float *)(*(void *)(v67 + 48) + 4 * (v73 - 1)) : 0.0;
            double v47 = v45 + v75;
            float v48 = v47;
            uint64_t v76 = v106;
            if (!*(unsigned char *)(v106 + 192))
            {
              uint64_t v97 = *(void *)(v106 + 72);
              uint64_t v98 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v106 + 80) - v97) >> 3);
              if ((v98 & 0xFFFE) != 0 && *(float *)(v106 + 184) < v43)
              {
                LOWORD(v98) = v98 - 1;
                if (*(float *)(v106 + 188) > v43)
                {
                  for (unsigned __int16 n = 0; ; unsigned __int16 n = v101 + 1)
                  {
                    int v100 = n;
                    while (1)
                    {
                      unsigned int v101 = (v100 + (unsigned __int16)v98) >> 1;
                      if (*(float *)(v97 + 88 * v101 + 48) <= v43) {
                        break;
                      }
                      LOWORD(v98) = v101 - 1;
                    }
                    if (*(float *)(v97 + 88 * v101 + 52) > v43) {
                      break;
                    }
                  }
                  LODWORD(v98) = (v100 + (unsigned __int16)v98) >> 1;
                }
              }
              else
              {
                LOWORD(v98) = 0;
              }
              int v102 = (unsigned __int16)v98;
              int v103 = (unsigned __int16)v98;
              float v104 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v97 + 88 * (unsigned __int16)v98, v43);
              if (v103) {
                double v45 = *(float *)(*(void *)(v76 + 48) + 4 * (v102 - 1));
              }
              else {
                double v45 = 0.0;
              }
              double v47 = v45 + v104;
              *(float *)&double v47 = v47;
              goto LABEL_83;
            }
          }
        }
      }
      *(float *)&double v47 = v43;
LABEL_83:
      *(float *)char v119 = v40;
      *(float *)&v119[1] = v43;
      *(float *)&v119[2] = v49;
      *(float *)&v119[3] = v46;
      *(float *)&v119[4] = v48;
      v119[5] = LODWORD(v47);
      char v120 = 0;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(&v106, (uint64_t)v119, v117, (uint64_t)&v107, v47, v45, v25, v26, v27, v28, v29, v30);
      uint64_t v77 = v112;
      int v78 = *(_DWORD *)(a1 + 104);
      uint64_t v79 = *(void *)(a1 + 96);
      __int16 v80 = *(_WORD *)(a1 + 152);
      if (v80) {
        unsigned __int16 v81 = v80 + 1;
      }
      else {
        unsigned __int16 v81 = 0;
      }
      unsigned __int16 v82 = v80 + v112;
      if (v80 + v112)
      {
        std::vector<float>::resize(a1 + 96, (unsigned __int16)(3 * v82 + 1));
        *(_WORD *)(a1 + 152) = v82;
        if (!*(unsigned char *)(a1 + 154))
        {
          std::vector<float>::resize((uint64_t)v105, v82 + 1);
          if (v77) {
            goto LABEL_92;
          }
          goto LABEL_106;
        }
LABEL_91:
        if (v77) {
          goto LABEL_92;
        }
        goto LABEL_106;
      }
      *(void *)(a1 + 104) = v79;
      *(_WORD *)(a1 + 152) = 0;
      if (*(unsigned char *)(a1 + 154)) {
        goto LABEL_91;
      }
      *(void *)(a1 + 128) = *(void *)(a1 + 120);
      if (!v77)
      {
LABEL_106:
        float v40 = v43;
        goto LABEL_107;
      }
LABEL_92:
      int v83 = (unsigned __int16)((v78 - v79) >> 2);
      int v84 = v81;
      int v85 = v113;
      uint64_t v86 = v112;
      float v87 = (float)v112;
      double v88 = (float *)*((void *)&v108 + 1);
      int v89 = (_DWORD *)v107;
      int v90 = *v105;
      uint64_t v91 = *(_DWORD **)(a1 + 96);
      int v92 = 3;
      uint64_t v93 = 1;
      while (1)
      {
        if (v83)
        {
          if (v85) {
            goto LABEL_95;
          }
        }
        else
        {
          if (v85)
          {
            if (v86) {
              float v95 = v110 + (float)((float)((float)(v111 - v110) / v87) * 0.0);
            }
            else {
              float v95 = v111;
            }
          }
          else
          {
            float v95 = *v88;
          }
          *int v90 = v95;
          *uint64_t v91 = *v89;
          ++v84;
          int v83 = 1;
          if (v85)
          {
LABEL_95:
            if (v86 == v93)
            {
              float v94 = v111;
            }
            else
            {
              *(float *)&double v26 = (float)(v111 - v110) / v87;
              float v94 = v110 + (float)((float)(unsigned __int16)v93 * *(float *)&v26);
            }
            goto LABEL_105;
          }
        }
        float v94 = v88[v93];
LABEL_105:
        v90[v84] = v94;
        v91[(unsigned __int16)v83] = v89[(unsigned __int16)(v92 - 2)];
        v91[(unsigned __int16)(v83 + 1)] = v89[(unsigned __int16)(v92 - 1)];
        v91[(unsigned __int16)(v83 + 2)] = v89[(unsigned __int16)v92];
        ++v84;
        v83 += 3;
        ++v93;
        v92 += 3;
        if (v93 - v77 == 1) {
          goto LABEL_106;
        }
      }
    }
    unint64_t v96 = v39 >> 6;
LABEL_128:
    *(unsigned char *)(a1 + 192) = 1;
    *(_DWORD *)(a1 + 184) = *(_DWORD *)(v38 + 4);
    *(_DWORD *)(a1 + 188) = *(_DWORD *)(v38 + (v96 << 6) - 60);
    geom::interpolating_spline<float>::~interpolating_spline((uint64_t)&v107);
  }
}

void _ZN4geom19interpolating_curveIDv4_fE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 176) = 0u;
  *(unsigned char *)(a2 + 192) = 0;
  _ZN4geom19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(a2, a1, 1);
}

unint64_t _ZNK4geom19interpolating_curveIDv4_fE19evaluate_tangent_atEf(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 192))
  {
    unint64_t span = geom::interpolating_spline<float>::find_span(a1 + 96, a2);
    int v4 = (unsigned __int16)(3 * span);
    uint64_t v5 = *(void *)(a1 + 96);
    a2 = (float)(*(float *)(v5 + 4 * (unsigned __int16)(3 * span))
               * (float)((float)(1.0 - *((float *)&span + 1))
                       * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))))
       + *(float *)(v5 + 4 * (v4 + 1))
       * ((float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1)))
        * 3.0
        * *((float *)&span + 1))
       + *(float *)(v5 + 4 * (v4 + 2))
       * ((float)(1.0 - *((float *)&span + 1))
        * 3.0
        * (float)(*((float *)&span + 1) * *((float *)&span + 1)))
       + (float)(*(float *)(v5 + 4 * (v4 + 3))
               * (float)((float)(*((float *)&span + 1) * *((float *)&span + 1)) * *((float *)&span + 1)));
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v10 + 1)
        {
          int v9 = i;
          while (1)
          {
            unsigned int v10 = (v9 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v10 + 48) <= a2) {
              break;
            }
            LOWORD(v7) = v10 - 1;
          }
          if (*(float *)(v6 + 88 * v10 + 52) > a2) {
            break;
          }
        }
        LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 72);
    uint64_t v7 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v6) >> 3);
    if ((v7 & 0xFFFE) != 0 && *(float *)(a1 + 184) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(float *)(a1 + 188) > a2)
      {
        for (unsigned __int16 j = 0; ; unsigned __int16 j = v13 + 1)
        {
          int v12 = j;
          while (1)
          {
            unsigned int v13 = (v12 + (unsigned __int16)v7) >> 1;
            if (*(float *)(v6 + 88 * v13 + 48) <= a2) {
              break;
            }
            LOWORD(v7) = v13 - 1;
          }
          if (*(float *)(v6 + 88 * v13 + 52) > a2) {
            break;
          }
        }
        LODWORD(v7) = (v12 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  return geom::interpolating_spline<float>::find_span(v6 + 88 * (unsigned __int16)v7, a2);
}

float _ZNK4geom19interpolating_curveIDv4_fE18evaluate_length_atEf(uint64_t a1, float result)
{
  if (!*(unsigned char *)(a1 + 192))
  {
    uint64_t v3 = *(void *)(a1 + 72);
    uint64_t v4 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(a1 + 80) - v3) >> 3);
    if ((v4 & 0xFFFE) != 0 && *(float *)(a1 + 184) < result)
    {
      LOWORD(v4) = v4 - 1;
      if (*(float *)(a1 + 188) > result)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v7 + 1)
        {
          int v6 = i;
          while (1)
          {
            unsigned int v7 = (v6 + (unsigned __int16)v4) >> 1;
            if (*(float *)(v3 + 88 * v7 + 48) <= result) {
              break;
            }
            LOWORD(v4) = v7 - 1;
          }
          if (*(float *)(v3 + 88 * v7 + 52) > result) {
            break;
          }
        }
        LODWORD(v4) = (v6 + (unsigned __int16)v4) >> 1;
      }
    }
    else
    {
      LOWORD(v4) = 0;
    }
    int v8 = (unsigned __int16)v4;
    int v9 = (unsigned __int16)v4;
    double v10 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v3 + 88 * (unsigned __int16)v4, result);
    if (v9) {
      double v11 = *(float *)(*(void *)(a1 + 48) + 4 * (v8 - 1));
    }
    else {
      double v11 = 0.0;
    }
    return v11 + v10;
  }
  return result;
}

float _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(uint64_t a1, float a2)
{
  unsigned __int16 span = geom::interpolating_spline<float>::find_span(a1, a2);
  uint64_t v5 = *(void *)(a1 + 64);
  if (*(void *)(a1 + 72) == v5)
  {
    if (span)
    {
      int v7 = 0;
      float v6 = 0.0;
      do
        float v6 = v6 + _ZNK4geom20interpolating_splineIDv4_fE20evaluate_span_lengthEj(a1, v7++);
      while (span != v7);
      goto LABEL_9;
    }
  }
  else if (span)
  {
    float v6 = *(float *)(v5 + 4 * (span - 1));
    goto LABEL_9;
  }
  float v6 = 0.0;
LABEL_9:
  if (*(unsigned char *)(a1 + 58))
  {
    unsigned int v8 = *(unsigned __int16 *)(a1 + 56);
    if (v8 == span) {
      float v9 = *(float *)(a1 + 52);
    }
    else {
      float v9 = *(float *)(a1 + 48)
    }
         + (float)((float)span * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v8));
  }
  else
  {
    float v9 = *(float *)(*(void *)(a1 + 24) + 4 * span);
  }
  return v6 + _ZNK4geom20interpolating_splineIDv4_fE24evaluate_length_betweeenEff((void *)a1, v9, a2);
}

void _ZNK4geom19interpolating_curveIDv4_fE10span_knotsEtRfS3_(uint64_t a1, unsigned int a2, float *a3, float *a4, double a5, double a6, float a7)
{
  uint64_t v9 = *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
  unsigned __int16 v10 = a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9);
  if (*(unsigned char *)(a1 + 192))
  {
    if (*(_WORD *)(*(void *)a1 + 2 * a2)) {
      float v11 = *(float *)(*(void *)(a1 + 48) + 4 * (v9 - 1));
    }
    else {
      float v11 = 0.0;
    }
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v19 = v18 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    if (*(unsigned char *)(v19 + 58))
    {
      uint64_t v20 = v18 + 88 * v9;
      float v21 = *(float *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 56);
      float v22 = (float)(*(float *)(v20 + 52) - v21) / (float)LODWORD(a7);
      float v23 = v21 + (float)((float)v10 * v22);
      float v24 = v22 + v23;
    }
    else
    {
      int8x16_t v25 = (float *)(*(void *)(v18 + 88 * v9 + 24) + 4 * v10);
      float v23 = *v25;
      float v24 = v25[1];
    }
    *a3 = v11 + _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v19, v23);
    float v17 = v11
        + _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(*(void *)(a1 + 72) + 88 * v9, v24);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 72);
    if (*(unsigned char *)(v12 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 58))
    {
      uint64_t v13 = v12 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
      float v14 = *(float *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 56);
      float v15 = (float)(*(float *)(v13 + 52) - v14) / (float)LODWORD(a7);
      float v16 = v14 + (float)((float)(unsigned __int16)(a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9)) * v15);
      *a3 = v16;
      float v17 = v15 + v16;
    }
    else
    {
      uint64_t v26 = *(void *)(v12 + 88 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 24) + 4 * v10;
      *a3 = *(float *)v26;
      float v17 = *(float *)(v26 + 4);
    }
  }
  *a4 = v17;
}

uint64_t _ZNK4geom19interpolating_curveIDv4_fE33calculate_monomial_basis_for_spanEtPS1_(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a1[9];
  uint64_t v4 = 88 * *(unsigned __int16 *)(*a1 + 2 * a2);
  uint64_t v6 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  int v5 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v3 + v4) + 16 * v6);
  __asm { FMOV            V1.4S, #3.0 }
  *(float32x4_t *)(a3 + 16) = vmulq_f32(vsubq_f32(*(float32x4_t *)(*(void *)(v3 + v4) + 16 * (v5 + 1)), *(float32x4_t *)(*(void *)(v3 + v4) + 16 * v6)), _Q1);
  v12.i64[0] = 0xC0000000C0000000;
  v12.i64[1] = 0xC0000000C0000000;
  float32x4_t v13 = vmulq_f32(vaddq_f32(vmlaq_f32(*(float32x4_t *)(*(void *)(v3 + v4) + 16 * v6), v12, *(float32x4_t *)(*(void *)(v3 + v4) + 16 * (v5 + 1))), *(float32x4_t *)(*(void *)(v3 + v4) + 16 * (v6 + 2))), _Q1);
  *(float32x4_t *)(a3 + 32) = v13;
  float32x4_t v14 = vsubq_f32(vmlaq_f32(*(float32x4_t *)(*(void *)(v3 + v4) + 16 * (v6 + 3)), _Q1, vsubq_f32(*(float32x4_t *)(*(void *)(v3 + v4) + 16 * (v5 + 1)), *(float32x4_t *)(*(void *)(v3 + v4) + 16 * (v6 + 2)))), *(float32x4_t *)(*(void *)(v3 + v4) + 16 * v6));
  *(float32x4_t *)(a3 + 48) = v14;
  int8x16_t v15 = (int8x16_t)vmulq_f32(v13, v13);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)))) <= 0.00001
    && (int8x16_t v16 = (int8x16_t)vmulq_f32(v14, v14),
        sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)))) <= 0.00001))
  {
    return 2;
  }
  else
  {
    return 4;
  }
}

uint64_t _ZNK4geom19interpolating_curveIDv4_fE31calculate_bezier_basis_for_spanEtPS1_(void *a1, unsigned int a2, uint64_t a3)
{
  int v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  uint64_t v4 = *(void *)(a1[9] + 88 * *(unsigned __int16 *)(*a1 + 2 * a2));
  float32x4_t v5 = *(float32x4_t *)(v4
                      + 16
                      * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  float32x4_t v6 = *(float32x4_t *)(v4 + 16 * (v3 + 1));
  __asm { FMOV            V4.4S, #3.0 }
  float32x4_t v12 = vmulq_f32(vsubq_f32(v6, v5), _Q4);
  v13.i64[0] = 0xC0000000C0000000;
  v13.i64[1] = 0xC0000000C0000000;
  float32x4_t v14 = *(float32x4_t *)(v4 + 16 * (v3 + 2));
  float32x4_t v15 = vmulq_f32(vaddq_f32(vmlaq_f32(v5, v13, v6), v14), _Q4);
  float32x4_t v16 = vsubq_f32(vmlaq_f32(*(float32x4_t *)(v4 + 16 * (v3 + 3)), _Q4, vsubq_f32(v6, v14)), v5);
  int8x16_t v17 = (int8x16_t)vmulq_f32(v15, v15);
  if (sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v17, v17, 8uLL)))) <= 0.00001
    && (int8x16_t v18 = (int8x16_t)vmulq_f32(v16, v16),
        sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v18.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v18, v18, 8uLL)))) <= 0.00001))
  {
    *(float32x4_t *)a3 = v5;
    *(float32x4_t *)(a3 + 16) = vaddq_f32(v5, v12);
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    return 2;
  }
  else
  {
    float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x3EAAAAABu);
    *(float32x4_t *)a3 = v5;
    *(float32x4_t *)(a3 + 16) = vmlaq_f32(v5, v19, v12);
    *(float32x4_t *)(a3 + 32) = vmlaq_f32(vmlaq_f32(v5, (float32x4_t)vdupq_n_s32(0x3F2AAAABu), v12), v19, v15);
    *(float32x4_t *)(a3 + 48) = vaddq_f32(vaddq_f32(vaddq_f32(v5, v12), v15), v16);
    return 4;
  }
}

uint64_t _ZN4geom19interpolating_curveIDv4_fE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(void *a1, float32x4_t **a2)
{
  memset(v26, 0, 24);
  memset(v24, 0, sizeof(v24));
  switch((*a2)->i32[0])
  {
    case 0:
      _ZN4geom19interpolating_curveIDv3_fE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      _ZN4geom19interpolating_curveIDv3_fE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      _ZN4geom19interpolating_curveIDv4_fE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      _ZN4geom19interpolating_curveIDv4_fE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<float>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  uint64_t v3 = v25;
  std::vector<float>::resize((uint64_t)v26, v25);
  if (v3)
  {
    uint64_t v4 = 0;
    float v5 = 0.0;
    do
    {
      float v5 = v5 + _ZNK4geom20interpolating_splineIDv4_fE20evaluate_span_lengthEj((uint64_t)v24, v4);
      *(float *)(v26[0] + 4 * v4++) = v5;
    }
    while (v3 != v4);
  }
  float v6 = _ZNK4geom20interpolating_splineIDv4_fE21evaluate_total_lengthEv((uint64_t)v24);
  uint64_t v7 = a1[10] - a1[9];
  if (v7) {
    float v8 = *(float *)(a1[6] - 0x45D1745D1745D174 * (v7 >> 3) - 4);
  }
  else {
    float v8 = 0.0;
  }
  float v9 = v6 + v8;
  unint64_t v10 = a1[8];
  float v11 = (float *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    float32x4_t v13 = (float *)a1[6];
    uint64_t v14 = v11 - v13;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 62) {
      abort();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 1 > v15) {
      unint64_t v15 = v16 >> 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      int8x16_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 8), v17);
      float32x4_t v13 = (float *)a1[6];
      float v11 = (float *)a1[7];
    }
    else
    {
      int8x16_t v18 = 0;
    }
    float32x4_t v19 = (float *)&v18[4 * v14];
    uint64_t v20 = &v18[4 * v17];
    *float32x4_t v19 = v9;
    float32x4_t v12 = v19 + 1;
    while (v11 != v13)
    {
      int v21 = *((_DWORD *)v11-- - 1);
      *((_DWORD *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    float *v11 = v9;
    float32x4_t v12 = v11 + 1;
  }
  a1[7] = v12;
  _ZNSt3__16vectorIN4geom20interpolating_splineIDv3_fEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<float>::~interpolating_spline((uint64_t)v24);
}

void _ZN4geom19interpolating_curveIDv4_fE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(float32x4_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  uint64_t v79 = 0;
  __int16 v80 = 0;
  uint64_t v81 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v4 = a1[1];
  __int16 v5 = (_WORD)v4 - 1;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v79, (unsigned __int16)((_WORD)v4 + 2));
  std::vector<float>::resize((uint64_t)&v76, (unsigned __int16)((_WORD)v4 + 2));
  v6.i64[0] = 0x4000000040000000;
  v6.i64[1] = 0x4000000040000000;
  *(float32x4_t *)uint64_t v79 = vmlaq_f32(vnegq_f32((*a1)[5]), v6, (*a1)[1]);
  uint64_t v7 = (float *)v76;
  *(_DWORD *)uint64_t v76 = 0;
  float v8 = *a1;
  float32x4_t v9 = vsubq_f32((*a1)[5], (*a1)[1]);
  int8x16_t v10 = (int8x16_t)vmulq_f32(v9, v9);
  v7[1] = sqrtf(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v10.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v10, v10, 8uLL)))));
  if ((_WORD)v4 == 1)
  {
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = (unsigned __int16)((_WORD)v4 - 1);
    uint64_t v13 = 16;
    do
    {
      *(float32x4_t *)((char *)v79 + v13) = v8[v11 + 1];
      float v8 = *a1;
      float32x4_t v14 = vsubq_f32((*a1)[v11 + 5], (*a1)[v11 + 1]);
      int8x16_t v15 = (int8x16_t)vmulq_f32(v14, v14);
      *(float *)((char *)v76 + v11 + 8) = *(float *)((char *)v76 + v11 + 4)
                                        + sqrtf(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v15.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL)))));
      v11 += 4;
      v13 += 16;
    }
    while (4 * (unsigned __int16)((_WORD)v4 - 1) != v11);
  }
  uint64_t v16 = (unsigned __int16)((_WORD)v4 + 2) - 2;
  *((float32x4_t *)v79 + v16) = v8[4 * v12 + 1];
  uint64_t v17 = (unsigned __int16)((_WORD)v4 + 2) - 1;
  *((float32x4_t *)v79 + v17) = vmlaq_f32(vnegq_f32(*((float32x4_t *)v79 + (unsigned __int16)((_WORD)v4 + 2) - 3)), v6, *((float32x4_t *)v79 + v16));
  float v18 = *((float *)v76 + v16);
  float32x4_t v19 = &(*a1)[4 * (unint64_t)(unsigned __int16)((_WORD)v4 - 2)];
  float32x4_t v20 = vsubq_f32(v19[5], v19[1]);
  int8x16_t v21 = (int8x16_t)vmulq_f32(v20, v20);
  *((float *)v76 + v17) = v18
                        + sqrtf(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v21, v21, 8uLL)))));
  if ((_WORD)v4 == 1)
  {
    uint64_t v29 = 0;
    *(void *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 56) = 0;
    if (!*(unsigned char *)(a2 + 58))
    {
      uint64_t v29 = 0;
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 56) = v5;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v12 + 1);
    }
    uint64_t v28 = 0;
    LOWORD(v29) = 0;
    __asm { FMOV            V1.4S, #3.0 }
    do
    {
      int v35 = v28 + 2;
      uint64_t v36 = (float32x4_t *)v79;
      v23.i32[0] = *((_DWORD *)v76 + v28);
      float32x4_t v37 = *((float32x4_t *)v79 + v28);
      uint64_t v38 = v28 + 1;
      v25.i32[0] = *((_DWORD *)v76 + (v28 + 1));
      v24.i32[0] = *((_DWORD *)v76 + (v28 + 2));
      float v39 = *((float *)v76 + (v28 + 3));
      v22.f32[0] = *(float *)v24.i32 - v25.f32[0];
      float v40 = 1.0 / (float)(v25.f32[0] - v23.f32[0]);
      float v41 = 1.0 / (float)(*(float *)v24.i32 - v23.f32[0]);
      float v42 = 1.0 / (float)(*(float *)v24.i32 - v25.f32[0]);
      float v43 = v39 - v25.f32[0];
      float v44 = 1.0 / (float)(v39 - v25.f32[0]);
      float v45 = v39 - *(float *)v24.i32;
      float v46 = 1.0 / (float)(v39 - *(float *)v24.i32);
      v26.f32[0] = v23.f32[0] - v25.f32[0];
      v27.f32[0] = v25.f32[0] - v25.f32[0];
      float32x4_t v47 = *((float32x4_t *)v79 + (v28 + 1));
      float32x4_t v48 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 0));
      float32x4_t v49 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v47, v48), v37, v25.f32[0] - v25.f32[0]), v40);
      float32x4_t v50 = *((float32x4_t *)v79 + (v28 + 2));
      float32x4_t v51 = vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0));
      float32x4_t v52 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v50, v51), v47, *(float *)v24.i32 - v25.f32[0]), v42);
      float32x4_t v53 = *((float32x4_t *)v79 + (v28 + 3));
      float32x4_t v54 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v53, vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 0))), v50, v43), v46);
      float32x4_t v55 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v52, v48), v49, *(float *)v24.i32 - v25.f32[0]), v41);
      float32x4_t v56 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v54, v51), v52, v43), v44);
      float32x4_t v57 = vmulq_n_f32(vsubq_f32(v47, v37), v40);
      float32x4_t v58 = vmulq_n_f32(vsubq_f32(v50, v47), v42);
      float32x4_t v59 = vmulq_n_f32(vsubq_f32(v53, v50), v46);
      float32x4_t v60 = vmulq_n_f32(vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v56, v55), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v52, v49), v57, *(float *)v24.i32 - v25.f32[0]), v58, *(float32x2_t *)v26.f32, 0), v41), *(float *)v24.i32 - v25.f32[0]), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v54, v52), v58, v43), v59, *(float32x2_t *)v27.f32, 0), v44), *(float32x2_t *)v27.f32, 0), v42), *(float *)v24.i32 - v25.f32[0]);
      v23.f32[0] = v23.f32[0] - *(float *)v24.i32;
      v25.f32[0] = v25.f32[0] - *(float *)v24.i32;
      *(float *)v24.i32 = *(float *)v24.i32 - *(float *)v24.i32;
      float32x4_t v27 = vnegq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v23, 0));
      float32x4_t v61 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v47, v27), v37, v25.f32[0]), v40);
      float32x4_t v26 = vnegq_f32((float32x4_t)vdupq_lane_s32((int32x2_t)v25, 0));
      float32x4_t v62 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v50, v26), v47, *(float *)v24.i32), v42);
      float32x4_t v63 = vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v53, vnegq_f32((float32x4_t)vdupq_lane_s32(v24, 0))), v50, v45), v46);
      *(float32x4_t *)(*(void *)a2 + 16 * (unsigned __int16)v29) = v47;
      *(float32x4_t *)(*(void *)a2 + 16 * (unsigned __int16)(v29 + 1)) = vaddq_f32(v36[(v28 + 1)], vdivq_f32(v60, _Q1));
      unsigned __int16 v64 = v29 + 2;
      LOWORD(v29) = v29 + 3;
      float32x4_t v22 = vsubq_f32(v36[v35], vdivq_f32(vmulq_n_f32(vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v63, v26), v62, v45), v44), vmulq_n_f32(vmlaq_n_f32(vmulq_f32(v62, v27), v61, *(float *)v24.i32), v41)), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v62, v61), v57, *(float *)v24.i32), v58, v23, 0), v41), *(float *)v24.i32), vmulq_n_f32(vmlsq_lane_f32(vmlaq_n_f32(vsubq_f32(v63, v62), v58, v45), v59, v25, 0), v44), v25, 0), v42), v22.f32[0]), _Q1));
      *(float32x4_t *)(*(void *)a2 + 16 * v64) = v22;
      uint64_t v28 = v38;
    }
    while (v12 != v38);
    uint64_t v29 = (unsigned __int16)v29;
  }
  *(float32x4_t *)(*(void *)a2 + 16 * v29) = (*a1)[4 * v12 + 1];
  unint64_t v65 = (unint64_t)a1[1];
  int v74 = 0;
  uint64_t v75 = 0;
  __p = 0;
  if (v65)
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, v65);
    float v66 = (char *)v74;
    bzero(v74, 4 * v65);
    uint64_t v67 = &v66[4 * v65];
    int v74 = v67;
    uint64_t v68 = a1[1];
    uint64_t v69 = (char *)__p;
    if (v68)
    {
      double v70 = 0;
      int v71 = &(*a1)->i32[1];
      do
      {
        __int32 v72 = *v71;
        v71 += 16;
        *(_DWORD *)&v69[4 * (void)v70] = v72;
        double v70 = (float32x4_t *)((char *)v70 + 1);
      }
      while (v68 != v70);
    }
  }
  else
  {
    uint64_t v69 = 0;
    uint64_t v67 = 0;
  }
  *(unsigned char *)(a2 + 58) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v69, (uint64_t)v67, (v67 - v69) >> 2);
    uint64_t v69 = (char *)__p;
    uint64_t v67 = (char *)v74;
  }
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v69;
  *(_DWORD *)(a2 + 52) = *((_DWORD *)v67 - 1);
  int v74 = v69;
  operator delete(v69);
  if (v76)
  {
    uint64_t v77 = v76;
    operator delete(v76);
  }
  if (v79)
  {
    __int16 v80 = v79;
    operator delete(v79);
  }
}

void _ZN4geom19interpolating_curveIDv4_fE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(void *a1@<X1>, uint64_t a2@<X8>)
{
  double v70 = 0;
  int v71 = 0;
  uint64_t v72 = 0;
  uint64_t v67 = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  unsigned __int16 v64 = 0;
  unint64_t v65 = 0;
  uint64_t v66 = 0;
  __p = 0;
  float32x4_t v62 = 0;
  uint64_t v63 = 0;
  unint64_t v4 = a1[1];
  float32x4_t v59 = 0;
  uint64_t v60 = 0;
  float32x4_t v58 = 0;
  if (v4)
  {
    std::vector<float>::__vallocate[abi:nn180100](&v58, v4);
    __int16 v5 = v59;
    bzero(v59, 4 * v4);
    unint64_t v4 = (unint64_t)v5 + 4 * v4;
    uint64_t v6 = a1[1];
    if (v6)
    {
      uint64_t v7 = 0;
      float v8 = v58;
      float32x4_t v9 = (int *)(*a1 + 4);
      do
      {
        int v10 = *v9;
        v9 += 16;
        *(_DWORD *)&v8[4 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  uint64_t v11 = v58;
  unint64_t v12 = (unsigned __int16)v6;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v70, (unsigned __int16)v6);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v67, v12);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v64, v12);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, v12);
  unint64_t v16 = v12 - 1;
  v70[v12 - 1] = 0u;
  *double v70 = 0u;
  __asm { FMOV            V1.4S, #1.0 }
  *((float32x4_t *)__p + v12 - 1) = _Q1;
  *(float32x4_t *)__p = _Q1;
  *((_OWORD *)v67 + v12 - 1) = 0u;
  *(_OWORD *)uint64_t v67 = 0u;
  *((_OWORD *)v64 + v12 - 1) = 0u;
  *(_OWORD *)unsigned __int16 v64 = 0u;
  if (v12 - 1 >= 2)
  {
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    int32x2_t v24 = v11 + 4;
    do
    {
      v13.i32[0] = *(_DWORD *)&v24[v22];
      _Q1.f32[0] = *(float *)v13.i32 - *(float *)&v11[v22];
      *(float *)v13.i32 = *(float *)&v24[v22 + 4] - *(float *)v13.i32;
      v14.f32[0] = (float)(_Q1.f32[0] + *(float *)v13.i32) + (float)(_Q1.f32[0] + *(float *)v13.i32);
      v70[v23 + 1] = vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0);
      *((int32x4_t *)__p + v23 + 1) = vdupq_lane_s32(*(int32x2_t *)v14.f32, 0);
      *((int32x4_t *)v67 + v23 + 1) = vdupq_lane_s32(v13, 0);
      uint64_t v25 = *a1 + 16 * v22;
      float32x4_t v26 = *(float32x4_t *)(v25 + 80);
      _Q1.f32[0] = 3.0 / _Q1.f32[0];
      float32x4_t v14 = vsubq_f32(*(float32x4_t *)(v25 + 144), v26);
      float32x4_t v15 = *(float32x4_t *)(v25 + 16);
      _Q1 = vmlaq_n_f32(vmulq_f32(vsubq_f32(v26, v15), vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q1.f32, 0))), v14, 3.0 / *(float *)v13.i32);
      *((float32x4_t *)v64 + ++v23) = _Q1;
      v22 += 4;
    }
    while (v12 - 2 != v23);
  }
  int64_t v27 = v62 - (unsigned char *)__p;
  unint64_t v28 = ((unint64_t)(v62 - (unsigned char *)__p) >> 4) - 1;
  *(float32x4_t *)uint64_t v67 = vdivq_f32(*(float32x4_t *)v67, *(float32x4_t *)__p);
  *(float32x4_t *)unsigned __int16 v64 = vdivq_f32(*(float32x4_t *)v64, *(float32x4_t *)__p);
  if ((int)v28 > 1)
  {
    unint64_t v29 = v28 - 1;
    uint64_t v30 = 16;
    do
    {
      *(float32x4_t *)((char *)v67 + v30) = vdivq_f32(*(float32x4_t *)((char *)v67 + v30), vmlsq_f32(*(float32x4_t *)((char *)__p + v30), *(float32x4_t *)((char *)v67 + v30 - 16), (float32x4_t)v70[(unint64_t)v30 / 0x10]));
      *(float32x4_t *)((char *)v64 + v30) = vdivq_f32(vmlsq_f32(*(float32x4_t *)((char *)v64 + v30), *(float32x4_t *)((char *)v64 + v30 - 16), (float32x4_t)v70[(unint64_t)v30 / 0x10]), vmlsq_f32(*(float32x4_t *)((char *)__p + v30), *(float32x4_t *)((char *)v67 + v30 - 16), (float32x4_t)v70[(unint64_t)v30 / 0x10]));
      v30 += 16;
      --v29;
    }
    while (v29);
  }
  *((float32x4_t *)v64 + (int)v28) = vdivq_f32(vmlsq_f32(*((float32x4_t *)v64 + (int)v28), *(float32x4_t *)((char *)v64 + (((v27 << 28) - 0x200000000) >> 28)), (float32x4_t)v70[(int)v28]), vmlsq_f32(*((float32x4_t *)__p + (int)v28), *(float32x4_t *)((char *)v67 + (((v27 << 28) - 0x200000000) >> 28)), (float32x4_t)v70[(int)v28]));
  if ((int)v28 >= 1)
  {
    do
    {
      float32x4_t v31 = *((float32x4_t *)v64 + v28);
      BOOL v32 = v28-- > 1;
      *((float32x4_t *)v64 + v28) = vmlsq_f32(*((float32x4_t *)v64 + v28), v31, *((float32x4_t *)v67 + v28));
    }
    while (v32);
  }
  if (v12 != 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    v35.i64[0] = 0x4000000040000000;
    v35.i64[1] = 0x4000000040000000;
    do
    {
      v15.f32[0] = *(float *)&v11[v34 + 4] - *(float *)&v11[v34];
      double v36 = v15.f32[0];
      float v37 = 1.0 / v15.f32[0];
      v15.f32[0] = v15.f32[0] / 3.0;
      *(float32x4_t *)((char *)v67 + v33) = vmlaq_n_f32(vmulq_f32(vmlaq_f32(*(float32x4_t *)((char *)v64 + v33 + 16), v35, *(float32x4_t *)((char *)v64 + v33)), vnegq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 0))), vsubq_f32(*(float32x4_t *)(*a1 + 16 * v34 + 80), *(float32x4_t *)(*a1 + 16 * v34 + 16)), v37);
      float v38 = 1.0 / (v36 * 3.0);
      float32x4_t v15 = vmulq_n_f32(vsubq_f32(*(float32x4_t *)((char *)v64 + v33 + 16), *(float32x4_t *)((char *)v64 + v33)), v38);
      *(float32x4_t *)((char *)__p + v33) = v15;
      v34 += 4;
      v33 += 16;
      --v16;
    }
    while (v16);
  }
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  __int16 v39 = *((_WORD *)a1 + 4);
  unsigned __int16 v40 = v39 - 1;
  if (v39 == 1)
  {
    *(_WORD *)(a2 + 56) = 0;
    uint64_t v44 = 0;
    uint64_t v43 = 0;
    if (!*(unsigned char *)(a2 + 58)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v40 + 1));
    *(_WORD *)(a2 + 56) = v40;
    if (!*(unsigned char *)(a2 + 58)) {
      std::vector<float>::resize(a2 + 24, v40 + 1);
    }
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    LOWORD(v43) = 0;
    uint64_t v44 = v40;
    v45.i64[0] = 0x4000000040000000;
    v45.i64[1] = 0x4000000040000000;
    __asm { FMOV            V2.4S, #3.0 }
    do
    {
      float v47 = *(float *)&v11[v42];
      uint64_t v48 = *a1 + 16 * v42;
      float v49 = *(float *)&v11[v42 + 4] - v47;
      float32x4_t v50 = *(float32x4_t *)(v48 + 16);
      float32x4_t v51 = *(float32x4_t *)((char *)v64 + v41);
      float32x4_t v52 = *(float32x4_t *)((char *)__p + v41);
      float32x4_t v53 = vmulq_n_f32(vmlaq_n_f32(*(float32x4_t *)((char *)v67 + v41), vmlaq_f32(vmulq_n_f32(v52, (float)(v47 - v47) * 3.0), v45, v51), v47 - v47), v49);
      float32x4_t v54 = vmlaq_f32(vmulq_n_f32(v52, v49 * 3.0), v45, v51);
      float32x4_t v55 = *(float32x4_t *)(v48 + 80);
      float32x4_t v56 = vmlaq_n_f32(*(float32x4_t *)((char *)v67 + v41), v54, v49);
      *(float32x4_t *)(*(void *)a2 + 16 * (unsigned __int16)v43) = v50;
      unsigned __int16 v57 = v43 + 2;
      *(float32x4_t *)(*(void *)a2 + 16 * (unsigned __int16)(v43 + 1)) = vaddq_f32(v50, vdivq_f32(v53, _Q2));
      LOWORD(v43) = v43 + 3;
      *(float32x4_t *)(*(void *)a2 + 16 * v57) = vsubq_f32(v55, vdivq_f32(vmulq_n_f32(v56, v49), _Q2));
      v42 += 4;
      v41 += 16;
    }
    while (4 * v40 != v42);
    uint64_t v43 = (unsigned __int16)v43;
  }
  *(_OWORD *)(*(void *)a2 + 16 * v43) = *(_OWORD *)(*a1 + (v44 << 6) + 16);
  *(unsigned char *)(a2 + 58) = 0;
  std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (void)v11) >> 2);
  *(_DWORD *)(a2 + 48) = *(_DWORD *)v11;
  *(_DWORD *)(a2 + 52) = *(_DWORD *)(v4 - 4);
  operator delete(v11);
  if (__p)
  {
    float32x4_t v62 = __p;
    operator delete(__p);
  }
  if (v64)
  {
    unint64_t v65 = v64;
    operator delete(v64);
  }
  if (v67)
  {
    uint64_t v68 = v67;
    operator delete(v67);
  }
  if (v70)
  {
    int v71 = v70;
    operator delete(v70);
  }
}

float _ZNK4geom20interpolating_splineIDv4_fE21evaluate_total_lengthEv(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 56);
  if (*(_WORD *)(a1 + 56)) {
    unsigned __int16 v2 = *(_WORD *)(a1 + 56);
  }
  else {
    unsigned __int16 v2 = -1;
  }
  if (*(unsigned char *)(a1 + 58))
  {
    if (v1 == v2) {
      float v3 = *(float *)(a1 + 52);
    }
    else {
      float v3 = *(float *)(a1 + 48)
    }
         + (float)((float)v2 * (float)((float)(*(float *)(a1 + 52) - *(float *)(a1 + 48)) / (float)v1));
  }
  else
  {
    float v3 = *(float *)(*(void *)(a1 + 24) + 4 * v2);
  }
  return _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(a1, v3);
}

void _ZN4geom19interpolating_curveIDv2_dE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(void *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  _ZN4geom19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb((uint64_t)a2, a1, 0);
}

void _ZN4geom19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = a2[1] - *a2;
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  float32x4_t v9 = (uint64_t *)(a1 + 72);
  if (v8 == v10)
  {
    uint64_t v11 = v6 >> 6;
  }
  else
  {
    do
      uint64_t v8 = geom::interpolating_spline<double>::~interpolating_spline(v8 - 96);
    while (v8 != v10);
    uint64_t v11 = (uint64_t)(a2[1] - *a2) >> 6;
  }
  *(void *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<double>>::reserve(v9, v11 - 1);
  *(unsigned char *)(a1 + 208) = 0;
  unsigned int v12 = (unsigned __int16)(v6 >> 6);
  if (v12 < 2)
  {
    __int16 v13 = 0;
    __int16 v14 = -1;
  }
  else
  {
    __int16 v13 = 0;
    __int16 v14 = -1;
    for (__int16 i = 1; i < (int)v12; ++i)
    {
      if (*(_DWORD *)(*a2 + ((uint64_t)i << 6)) != *(_DWORD *)(*a2 + ((uint64_t)v13 << 6)))
      {
        __int16 v14 = i - 1;
        *(void *)&long long v104 = *a2 + ((uint64_t)v13 << 6);
        *((void *)&v104 + 1) = (__int16)(i - 1) - (uint64_t)v13 + 1;
        _ZN4geom19interpolating_curveIDv2_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((void *)a1, (float64x2_t **)&v104);
        __int16 v13 = i;
      }
    }
  }
  if (v12 - 1 != v14)
  {
    *(void *)&long long v104 = *a2 + ((uint64_t)v13 << 6);
    *((void *)&v104 + 1) = (unsigned __int16)((unint64_t)v6 >> 6) - (uint64_t)v13;
    _ZN4geom19interpolating_curveIDv2_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((void *)a1, (float64x2_t **)&v104);
  }
  uint64_t v17 = *(void *)(a1 + 72);
  uint64_t v16 = *(void *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 5));
  if (v16 == v17)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    unsigned __int16 v18 = 0;
    uint64_t v19 = *v9;
    float32x4_t v20 = *(unsigned __int16 **)(a1 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 5) <= 1) {
      unint64_t v21 = 1;
    }
    else {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v16 - v17) >> 5);
    }
    uint64_t v22 = (__int16 *)(v19 + 64);
    unint64_t v23 = v21;
    do
    {
      __int16 v24 = *v22;
      v22 += 48;
      *v20++ = v18;
      v18 += v24;
      --v23;
    }
    while (v23);
    std::vector<unsigned short>::resize(a1, v18);
    uint64_t v25 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = *(void *)(a1 + 72);
    do
    {
      int v28 = *(unsigned __int16 *)(v27 + 96 * v25 + 64);
      if (*(_WORD *)(v27 + 96 * v25 + 64))
      {
        uint64_t v29 = *(void *)a1;
        do
        {
          uint64_t v30 = (v26 + 1);
          *(_WORD *)(v29 + 2 * (unsigned __int16)v26) = v25;
          LODWORD(v26) = v26 + 1;
          --v28;
        }
        while (v28);
      }
      else
      {
        uint64_t v30 = v26;
      }
      ++v25;
      uint64_t v26 = v30;
    }
    while (v25 != v21);
  }
  *(void *)(a1 + 192) = *(void *)(*a2 + 8);
  *(void *)(a1 + 200) = *(void *)(a2[1] - 56);
  if (a3)
  {
    LOWORD(v114[0]) = 512;
    v114[1] = 0.001;
    char v115 = 1;
    uint64_t v111 = 0;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    *(void *)(a1 + 104) = *(void *)(a1 + 96);
    uint64_t v31 = *(void *)(a1 + 120);
    int v102 = (double **)(a1 + 120);
    uint64_t v103 = a1;
    *(_WORD *)(a1 + 160) = 0;
    *(unsigned char *)(a1 + 162) = 0;
    *(void *)(a1 + 128) = v31;
    uint64_t v32 = *a2;
    unint64_t v33 = a2[1] - *a2;
    if (v33) {
      double v34 = *(double *)(v32 + 8);
    }
    else {
      double v34 = 0.0;
    }
    if (v33 >= 0x41)
    {
      unint64_t v35 = 1;
      while (1)
      {
        int v36 = *(_DWORD *)(v32 + (v35 << 6));
        if (v36 == *(_DWORD *)(v32 + ((unint64_t)(v35 - 1) << 6))) {
          break;
        }
LABEL_102:
        unint64_t v35 = (v35 + 1);
        uint64_t v32 = *a2;
        unint64_t v88 = (uint64_t)(a2[1] - *a2) >> 6;
        if (v88 <= v35) {
          goto LABEL_128;
        }
      }
      double v37 = *(double *)(v32 + (v35 << 6) + 8);
      LOBYTE(v114[0]) = v36 != 0;
      unsigned __int16 v109 = 0;
      uint64_t v38 = v103;
      unsigned __int8 v110 = 0;
      *((void *)&v104 + 1) = v104;
      *(void *)&long long v106 = *((void *)&v105 + 1);
      double v39 = (v37 + v34 * 2.0) * 0.333333333;
      double v40 = (v34 + v37 * 2.0) * 0.333333333;
      if (*(unsigned char *)(v103 + 208))
      {
        double v41 = v34;
LABEL_77:
        double v68 = v37;
LABEL_78:
        *(double *)uint64_t v116 = v34;
        *(double *)&v116[1] = v37;
        *(double *)&v116[2] = v41;
        *(double *)&v116[3] = v39;
        *(double *)&v116[4] = v40;
        *(double *)&v116[5] = v68;
        char v117 = 0;
        _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(&v103, (uint64_t)v116, v114, (uint64_t)&v104);
        uint64_t v69 = v109;
        int v70 = *(_DWORD *)(a1 + 104);
        uint64_t v71 = *(void *)(a1 + 96);
        __int16 v72 = *(_WORD *)(a1 + 160);
        if (v72) {
          unsigned __int16 v73 = v72 + 1;
        }
        else {
          unsigned __int16 v73 = 0;
        }
        unsigned __int16 v74 = v72 + v109;
        if (v72 + v109)
        {
          std::vector<double>::resize(a1 + 96, (unsigned __int16)(3 * v74 + 1));
          *(_WORD *)(a1 + 160) = v74;
          if (!*(unsigned char *)(a1 + 162))
          {
            std::vector<double>::resize((uint64_t)v102, v74 + 1);
            if (v69) {
              goto LABEL_87;
            }
            goto LABEL_101;
          }
LABEL_86:
          if (v69) {
            goto LABEL_87;
          }
          goto LABEL_101;
        }
        *(void *)(a1 + 104) = v71;
        *(_WORD *)(a1 + 160) = 0;
        if (*(unsigned char *)(a1 + 162)) {
          goto LABEL_86;
        }
        *(void *)(a1 + 128) = *(void *)(a1 + 120);
        if (!v69)
        {
LABEL_101:
          double v34 = v37;
          goto LABEL_102;
        }
LABEL_87:
        int v75 = (unsigned __int16)((v70 - v71) >> 3);
        int v76 = v73;
        int v77 = v110;
        uint64_t v78 = v109;
        double v79 = (double)v109;
        __int16 v80 = (double *)*((void *)&v105 + 1);
        uint64_t v81 = (void *)v104;
        unsigned __int16 v82 = *v102;
        int v83 = *(void **)(a1 + 96);
        int v84 = 3;
        uint64_t v85 = 1;
        while (1)
        {
          if (v75)
          {
            if (v77) {
              goto LABEL_90;
            }
          }
          else
          {
            if (v77)
            {
              if (v78) {
                double v87 = v107 + (v108 - v107) / v79 * 0.0;
              }
              else {
                double v87 = v108;
              }
            }
            else
            {
              double v87 = *v80;
            }
            *unsigned __int16 v82 = v87;
            *int v83 = *v81;
            ++v76;
            int v75 = 1;
            if (v77)
            {
LABEL_90:
              if (v78 == v85) {
                double v86 = v108;
              }
              else {
                double v86 = v107 + (double)(unsigned __int16)v85 * ((v108 - v107) / v79);
              }
              goto LABEL_100;
            }
          }
          double v86 = v80[v85];
LABEL_100:
          v82[v76] = v86;
          v83[(unsigned __int16)v75] = v81[(unsigned __int16)(v84 - 2)];
          v83[(unsigned __int16)(v75 + 1)] = v81[(unsigned __int16)(v84 - 1)];
          v83[(unsigned __int16)(v75 + 2)] = v81[(unsigned __int16)v84];
          ++v76;
          v75 += 3;
          ++v85;
          v84 += 3;
          if (v85 - v69 == 1) {
            goto LABEL_101;
          }
        }
      }
      uint64_t v42 = *(void *)(v103 + 72);
      unint64_t v43 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v103 + 80) - v42) >> 5);
      if ((v43 & 0xFFFE) != 0 && *(double *)(v103 + 192) < v34)
      {
        LOWORD(v43) = v43 - 1;
        if (*(double *)(v103 + 200) > v34)
        {
          for (unsigned __int16 j = 0; ; unsigned __int16 j = v46 + 1)
          {
            int v45 = j;
            while (1)
            {
              unsigned int v46 = (v45 + (unsigned __int16)v43) >> 1;
              if (*(double *)(v42 + 96 * v46 + 48) <= v34) {
                break;
              }
              LOWORD(v43) = v46 - 1;
            }
            if (*(double *)(v42 + 96 * v46 + 56) > v34) {
              break;
            }
          }
          LODWORD(v43) = (v45 + (unsigned __int16)v43) >> 1;
        }
        int v63 = (unsigned __int16)v43;
        int v64 = (unsigned __int16)v43;
        double v47 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v42 + 96 * (unsigned __int16)v43, v34);
        if (v64)
        {
          double v48 = *(double *)(*(void *)(v38 + 48) + 8 * (v63 - 1));
LABEL_49:
          double v41 = v47 + v48;
          uint64_t v49 = v103;
          if (*(unsigned char *)(v103 + 208)) {
            goto LABEL_77;
          }
          uint64_t v50 = *(void *)(v103 + 72);
          unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v103 + 80) - v50) >> 5);
          if ((v51 & 0xFFFE) != 0 && *(double *)(v103 + 192) < v39)
          {
            LOWORD(v51) = v51 - 1;
            if (*(double *)(v103 + 200) > v39)
            {
              for (unsigned __int16 k = 0; ; unsigned __int16 k = v54 + 1)
              {
                int v53 = k;
                while (1)
                {
                  unsigned int v54 = (v53 + (unsigned __int16)v51) >> 1;
                  if (*(double *)(v50 + 96 * v54 + 48) <= v39) {
                    break;
                  }
                  LOWORD(v51) = v54 - 1;
                }
                if (*(double *)(v50 + 96 * v54 + 56) > v39) {
                  break;
                }
              }
              LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
            }
            int v89 = (unsigned __int16)v51;
            int v90 = (unsigned __int16)v51;
            double v55 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v50 + 96 * (unsigned __int16)v51, (v37 + v34 * 2.0) * 0.333333333);
            if (v90)
            {
              double v56 = *(double *)(*(void *)(v49 + 48) + 8 * (v89 - 1));
LABEL_61:
              double v39 = v55 + v56;
              uint64_t v57 = v103;
              if (*(unsigned char *)(v103 + 208)) {
                goto LABEL_77;
              }
              uint64_t v58 = *(void *)(v103 + 72);
              unint64_t v59 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v103 + 80) - v58) >> 5);
              if ((v59 & 0xFFFE) != 0 && *(double *)(v103 + 192) < v40)
              {
                LOWORD(v59) = v59 - 1;
                if (*(double *)(v103 + 200) > v40)
                {
                  for (unsigned __int16 m = 0; ; unsigned __int16 m = v62 + 1)
                  {
                    int v61 = m;
                    while (1)
                    {
                      unsigned int v62 = (v61 + (unsigned __int16)v59) >> 1;
                      if (*(double *)(v58 + 96 * v62 + 48) <= v40) {
                        break;
                      }
                      LOWORD(v59) = v62 - 1;
                    }
                    if (*(double *)(v58 + 96 * v62 + 56) > v40) {
                      break;
                    }
                  }
                  LODWORD(v59) = (v61 + (unsigned __int16)v59) >> 1;
                }
                int v98 = (unsigned __int16)v59;
                int v99 = (unsigned __int16)v59;
                double v65 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v58 + 96 * (unsigned __int16)v59, (v34 + v37 * 2.0) * 0.333333333);
                if (v99)
                {
                  double v66 = *(double *)(*(void *)(v57 + 48) + 8 * (v98 - 1));
LABEL_76:
                  double v40 = v65 + v66;
                  uint64_t v67 = v103;
                  if (*(unsigned char *)(v103 + 208)) {
                    goto LABEL_77;
                  }
                  uint64_t v91 = *(void *)(v103 + 72);
                  unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v103 + 80) - v91) >> 5);
                  if ((v92 & 0xFFFE) != 0 && *(double *)(v103 + 192) < v37)
                  {
                    LOWORD(v92) = v92 - 1;
                    if (*(double *)(v103 + 200) > v37)
                    {
                      for (unsigned __int16 n = 0; ; unsigned __int16 n = v95 + 1)
                      {
                        int v94 = n;
                        while (1)
                        {
                          unsigned int v95 = (v94 + (unsigned __int16)v92) >> 1;
                          if (*(double *)(v91 + 96 * v95 + 48) <= v37) {
                            break;
                          }
                          LOWORD(v92) = v95 - 1;
                        }
                        if (*(double *)(v91 + 96 * v95 + 56) > v37) {
                          break;
                        }
                      }
                      LODWORD(v92) = (v94 + (unsigned __int16)v92) >> 1;
                    }
                    int v100 = (unsigned __int16)v92;
                    int v101 = (unsigned __int16)v92;
                    double v96 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v91 + 96 * (unsigned __int16)v92, v37);
                    if (v101)
                    {
                      double v97 = *(double *)(*(void *)(v67 + 48) + 8 * (v100 - 1));
                      goto LABEL_120;
                    }
                  }
                  else
                  {
                    double v96 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v91, v37);
                  }
                  double v97 = 0.0;
LABEL_120:
                  double v68 = v96 + v97;
                  goto LABEL_78;
                }
              }
              else
              {
                double v65 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v58, (v34 + v37 * 2.0) * 0.333333333);
              }
              double v66 = 0.0;
              goto LABEL_76;
            }
          }
          else
          {
            double v55 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v50, (v37 + v34 * 2.0) * 0.333333333);
          }
          double v56 = 0.0;
          goto LABEL_61;
        }
      }
      else
      {
        double v47 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v42, v34);
      }
      double v48 = 0.0;
      goto LABEL_49;
    }
    unint64_t v88 = v33 >> 6;
LABEL_128:
    *(unsigned char *)(a1 + 208) = 1;
    *(void *)(a1 + 192) = *(void *)(v32 + 8);
    *(void *)(a1 + 200) = *(void *)(v32 + (v88 << 6) - 56);
    geom::interpolating_spline<double>::~interpolating_spline((uint64_t)&v104);
  }
}

void _ZN4geom19interpolating_curveIDv2_dE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(void *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  _ZN4geom19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb((uint64_t)a2, a1, 1);
}

double _ZNK4geom19interpolating_curveIDv2_dE11evaluate_atEd(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v14 = 0;
    double v15 = 0.0;
    uint64_t v16 = 0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v14, a2);
    int v3 = (unsigned __int16)(3 * v14);
    uint64_t v4 = *(void *)(a1 + 96);
    double v5 = 1.0 - v15;
    a2 = *(double *)(v4 + 8 * (v3 + 1)) * (v15 * (v5 * v5 * 3.0))
       + *(double *)(v4 + 8 * (unsigned __int16)(3 * v14)) * (v5 * (v5 * v5))
       + *(double *)(v4 + 8 * (v3 + 2)) * (v15 * v15 * ((1.0 - v15) * 3.0))
       + *(double *)(v4 + 8 * (v3 + 3)) * (v15 * (v15 * v15));
  }
  uint64_t v6 = *(void *)(a1 + 72);
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v6) >> 5);
  if ((v7 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
  {
    LOWORD(v7) = v7 - 1;
    if (*(double *)(a1 + 200) > a2)
    {
      for (unsigned __int16 i = 0; ; unsigned __int16 i = v10 + 1)
      {
        int v9 = i;
        while (1)
        {
          unsigned int v10 = (v9 + (unsigned __int16)v7) >> 1;
          if (*(double *)(v6 + 96 * v10 + 48) <= a2) {
            break;
          }
          LOWORD(v7) = v10 - 1;
        }
        if (*(double *)(v6 + 96 * v10 + 56) > a2) {
          break;
        }
      }
      LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
    }
  }
  else
  {
    LOWORD(v7) = 0;
  }
  uint64_t v11 = (void *)(v6 + 96 * (unsigned __int16)v7);
  uint64_t v14 = 0;
  double v15 = 0.0;
  uint64_t v16 = 0;
  geom::interpolating_spline<double>::find_span((uint64_t)v11, (uint64_t)&v14, a2);
  int v12 = (unsigned __int16)(3 * v14);
  *(void *)&double result = *(_OWORD *)&vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*(float64x2_t *)(*v11 + 16 * (v12 + 1)), v15 * ((1.0 - v15) * (1.0 - v15) * 3.0)), *(float64x2_t *)(*v11 + 16 * (unsigned __int16)(3 * v14)), (1.0 - v15) * ((1.0 - v15) * (1.0 - v15))), *(float64x2_t *)(*v11 + 16 * (v12 + 2)), v15 * v15 * ((1.0 - v15) * 3.0)), *(float64x2_t *)(*v11 + 16 * (v12 + 3)), v15 * (v15 * v15));
  return result;
}

uint64_t _ZNK4geom19interpolating_curveIDv2_dE19evaluate_tangent_atEd(uint64_t a1, double a2)
{
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v15 = 0;
    double v16 = 0.0;
    uint64_t v17 = 0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v15, a2);
    int v3 = (unsigned __int16)(3 * v15);
    uint64_t v4 = *(void *)(a1 + 96);
    double v5 = 1.0 - v16;
    a2 = *(double *)(v4 + 8 * (v3 + 1)) * (v16 * (v5 * v5 * 3.0))
       + *(double *)(v4 + 8 * (unsigned __int16)(3 * v15)) * (v5 * (v5 * v5))
       + *(double *)(v4 + 8 * (v3 + 2)) * (v16 * v16 * ((1.0 - v16) * 3.0))
       + *(double *)(v4 + 8 * (v3 + 3)) * (v16 * (v16 * v16));
    uint64_t v6 = *(void *)(a1 + 72);
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v6) >> 5);
    if ((v7 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(double *)(a1 + 200) > a2)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v10 + 1)
        {
          int v9 = i;
          while (1)
          {
            unsigned int v10 = (v9 + (unsigned __int16)v7) >> 1;
            if (*(double *)(v6 + 96 * v10 + 48) <= a2) {
              break;
            }
            LOWORD(v7) = v10 - 1;
          }
          if (*(double *)(v6 + 96 * v10 + 56) > a2) {
            break;
          }
        }
        LODWORD(v7) = (v9 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 72);
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v6) >> 5);
    if ((v7 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a2)
    {
      LOWORD(v7) = v7 - 1;
      if (*(double *)(a1 + 200) > a2)
      {
        for (unsigned __int16 j = 0; ; unsigned __int16 j = v13 + 1)
        {
          int v12 = j;
          while (1)
          {
            unsigned int v13 = (v12 + (unsigned __int16)v7) >> 1;
            if (*(double *)(v6 + 96 * v13 + 48) <= a2) {
              break;
            }
            LOWORD(v7) = v13 - 1;
          }
          if (*(double *)(v6 + 96 * v13 + 56) > a2) {
            break;
          }
        }
        LODWORD(v7) = (v12 + (unsigned __int16)v7) >> 1;
      }
    }
    else
    {
      LOWORD(v7) = 0;
    }
  }
  uint64_t v15 = 0;
  double v16 = 0.0;
  uint64_t v17 = 0;
  return geom::interpolating_spline<double>::find_span(v6 + 96 * (unsigned __int16)v7, (uint64_t)&v15, a2);
}

double _ZNK4geom19interpolating_curveIDv2_dE18evaluate_length_atEd(uint64_t a1, double result)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    uint64_t v4 = a1 + 72;
    uint64_t v3 = *(void *)(a1 + 72);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v4 + 8) - v3) >> 5);
    if ((v5 & 0xFFFE) != 0 && *(double *)(a1 + 192) < result)
    {
      LOWORD(v5) = v5 - 1;
      if (*(double *)(a1 + 200) > result)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v8 + 1)
        {
          int v7 = i;
          while (1)
          {
            unsigned int v8 = (v7 + (unsigned __int16)v5) >> 1;
            if (*(double *)(v3 + 96 * v8 + 48) <= result) {
              break;
            }
            LOWORD(v5) = v8 - 1;
          }
          if (*(double *)(v3 + 96 * v8 + 56) > result) {
            break;
          }
        }
        LODWORD(v5) = (v7 + (unsigned __int16)v5) >> 1;
      }
      int v11 = (unsigned __int16)v5;
      int v12 = (unsigned __int16)v5;
      double v9 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v3 + 96 * (unsigned __int16)v5, result);
      if (v12)
      {
        double v10 = *(double *)(*(void *)(a1 + 48) + 8 * (v11 - 1));
        return v9 + v10;
      }
    }
    else
    {
      double v9 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v3, result);
    }
    double v10 = 0.0;
    return v9 + v10;
  }
  return result;
}

double _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(uint64_t a1, double a2)
{
  geom::interpolating_spline<double>::find_span(a1, (uint64_t)v11, a2);
  uint64_t v4 = v11[0];
  uint64_t v5 = *(void *)(a1 + 72);
  if (*(void *)(a1 + 80) == v5)
  {
    if (v11[0])
    {
      int v7 = 0;
      double v6 = 0.0;
      do
        double v6 = v6 + _ZNK4geom20interpolating_splineIDv2_dE20evaluate_span_lengthEj(a1, v7++);
      while (v4 != v7);
      goto LABEL_9;
    }
  }
  else if (v11[0])
  {
    double v6 = *(double *)(v5 + 8 * (v11[0] - 1));
    goto LABEL_9;
  }
  double v6 = 0.0;
LABEL_9:
  if (*(unsigned char *)(a1 + 66))
  {
    unsigned int v8 = *(unsigned __int16 *)(a1 + 64);
    if (v8 == v4) {
      double v9 = *(double *)(a1 + 56);
    }
    else {
      double v9 = *(double *)(a1 + 48)
    }
         + (double)v4 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v8);
  }
  else
  {
    double v9 = *(double *)(*(void *)(a1 + 24) + 8 * v4);
  }
  return v6 + _ZNK4geom20interpolating_splineIDv2_dE24evaluate_length_betweeenEdd((void *)a1, v9, a2);
}

void _ZNK4geom19interpolating_curveIDv2_dE10span_knotsEtRdS3_(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  uint64_t v9 = *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
  unsigned __int16 v10 = a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9);
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(_WORD *)(*(void *)a1 + 2 * a2)) {
      double v11 = *(double *)(*(void *)(a1 + 48) + 8 * (v9 - 1));
    }
    else {
      double v11 = 0.0;
    }
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v19 = v18 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    if (*(unsigned char *)(v19 + 66))
    {
      uint64_t v20 = v18 + 96 * v9;
      double v21 = *(double *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 64);
      double v22 = (*(double *)(v20 + 56) - v21) / (double)*(unint64_t *)&a7;
      double v23 = v21 + (double)v10 * v22;
      double v24 = v22 + v23;
    }
    else
    {
      uint64_t v25 = (double *)(*(void *)(v18 + 96 * v9 + 24) + 8 * v10);
      double v23 = *v25;
      double v24 = v25[1];
    }
    *a3 = v11 + _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v19, v23);
    double v17 = v11
        + _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(*(void *)(a1 + 72) + 96 * v9, v24);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 72);
    if (*(unsigned char *)(v12 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 66))
    {
      uint64_t v13 = v12 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
      double v14 = *(double *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 64);
      double v15 = (*(double *)(v13 + 56) - v14) / (double)*(unint64_t *)&a7;
      double v16 = v14 + (double)(unsigned __int16)(a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9)) * v15;
      *a3 = v16;
      double v17 = v15 + v16;
    }
    else
    {
      uint64_t v26 = *(void *)(v12 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 24) + 8 * v10;
      *a3 = *(double *)v26;
      double v17 = *(double *)(v26 + 8);
    }
  }
  *a4 = v17;
}

uint64_t _ZNK4geom19interpolating_curveIDv2_dE33calculate_monomial_basis_for_spanEtPS1_(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a1[9];
  uint64_t v4 = 96 * *(unsigned __int16 *)(*a1 + 2 * a2);
  uint64_t v6 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  int v5 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  *(_OWORD *)a3 = *(_OWORD *)(*(void *)(v3 + v4) + 16 * v6);
  __asm { FMOV            V1.2D, #3.0 }
  *(float64x2_t *)(a3 + 16) = vmulq_f64(vsubq_f64(*(float64x2_t *)(*(void *)(v3 + v4) + 16 * (v5 + 1)), *(float64x2_t *)(*(void *)(v3 + v4) + 16 * v6)), _Q1);
  __asm { FMOV            V3.2D, #-2.0 }
  float64x2_t v13 = vmulq_f64(vaddq_f64(vmlaq_f64(*(float64x2_t *)(*(void *)(v3 + v4) + 16 * v6), _Q3, *(float64x2_t *)(*(void *)(v3 + v4) + 16 * (v5 + 1))), *(float64x2_t *)(*(void *)(v3 + v4) + 16 * (v6 + 2))), _Q1);
  *(float64x2_t *)(a3 + 32) = v13;
  float64x2_t v14 = vsubq_f64(vmlaq_f64(*(float64x2_t *)(*(void *)(v3 + v4) + 16 * (v6 + 3)), _Q1, vsubq_f64(*(float64x2_t *)(*(void *)(v3 + v4) + 16 * (v5 + 1)), *(float64x2_t *)(*(void *)(v3 + v4) + 16 * (v6 + 2)))), *(float64x2_t *)(*(void *)(v3 + v4) + 16 * v6));
  *(float64x2_t *)(a3 + 48) = v14;
  if (sqrt(vaddvq_f64(vmulq_f64(v13, v13))) <= 0.000001 && sqrt(vaddvq_f64(vmulq_f64(v14, v14))) <= 0.000001) {
    return 2;
  }
  else {
    return 4;
  }
}

uint64_t _ZNK4geom19interpolating_curveIDv2_dE31calculate_bezier_basis_for_spanEtPS1_(void *a1, unsigned int a2, uint64_t a3)
{
  int v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  uint64_t v4 = *(void *)(a1[9] + 96 * *(unsigned __int16 *)(*a1 + 2 * a2));
  float64x2_t v5 = *(float64x2_t *)(v4
                      + 16
                      * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  float64x2_t v6 = *(float64x2_t *)(v4 + 16 * (v3 + 1));
  __asm { FMOV            V4.2D, #3.0 }
  float64x2_t v12 = vmulq_f64(vsubq_f64(v6, v5), _Q4);
  __asm { FMOV            V2.2D, #-2.0 }
  float64x2_t v14 = *(float64x2_t *)(v4 + 16 * (v3 + 2));
  float64x2_t v15 = vmulq_f64(vaddq_f64(vmlaq_f64(v5, _Q2, v6), v14), _Q4);
  float64x2_t v16 = vsubq_f64(vmlaq_f64(*(float64x2_t *)(v4 + 16 * (v3 + 3)), _Q4, vsubq_f64(v6, v14)), v5);
  if (sqrt(vaddvq_f64(vmulq_f64(v15, v15))) <= 0.000001 && sqrt(vaddvq_f64(vmulq_f64(v16, v16))) <= 0.000001)
  {
    *(float64x2_t *)a3 = v5;
    *(float64x2_t *)(a3 + 16) = vaddq_f64(v5, v12);
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    return 2;
  }
  else
  {
    float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
    *(float64x2_t *)a3 = v5;
    *(float64x2_t *)(a3 + 16) = vmlaq_f64(v5, v17, v12);
    *(float64x2_t *)(a3 + 32) = vmlaq_f64(vmlaq_f64(v5, (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL), v12), v17, v15);
    *(float64x2_t *)(a3 + 48) = vaddq_f64(vaddq_f64(vaddq_f64(v5, v12), v15), v16);
    return 4;
  }
}

uint64_t _ZN4geom19interpolating_curveIDv2_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(void *a1, float64x2_t **a2)
{
  memset(v26, 0, sizeof(v26));
  memset(v24, 0, 48);
  switch(LODWORD((*a2)->f64[0]))
  {
    case 0:
      _ZN4geom19interpolating_curveIDv2_dE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      _ZN4geom19interpolating_curveIDv2_dE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      _ZN4geom19interpolating_curveIDv2_dE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      _ZN4geom19interpolating_curveIDv2_dE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<double>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  uint64_t v3 = v25;
  std::vector<double>::resize((uint64_t)v26, v25);
  if (v3)
  {
    uint64_t v4 = 0;
    double v5 = 0.0;
    do
    {
      double v5 = v5 + _ZNK4geom20interpolating_splineIDv2_dE20evaluate_span_lengthEj((uint64_t)v24, v4);
      *(double *)(v26[0] + 8 * v4++) = v5;
    }
    while (v3 != v4);
  }
  double v6 = _ZNK4geom20interpolating_splineIDv2_dE21evaluate_total_lengthEv((uint64_t)v24);
  uint64_t v7 = a1[10] - a1[9];
  if (v7) {
    double v8 = *(double *)(a1[6] + 0x5555555555555558 * (v7 >> 5) - 8);
  }
  else {
    double v8 = 0.0;
  }
  double v9 = v6 + v8;
  unint64_t v10 = a1[8];
  double v11 = (double *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    float64x2_t v13 = (double *)a1[6];
    uint64_t v14 = v11 - v13;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      abort();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      uint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 8), v17);
      float64x2_t v13 = (double *)a1[6];
      double v11 = (double *)a1[7];
    }
    else
    {
      uint64_t v18 = 0;
    }
    uint64_t v19 = (double *)&v18[8 * v14];
    uint64_t v20 = &v18[8 * v17];
    *uint64_t v19 = v9;
    float64x2_t v12 = v19 + 1;
    while (v11 != v13)
    {
      uint64_t v21 = *((void *)v11-- - 1);
      *((void *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    double *v11 = v9;
    float64x2_t v12 = v11 + 1;
  }
  a1[7] = v12;
  _ZNSt3__16vectorIN4geom20interpolating_splineIDv2_dEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v24);
}

void _ZN4geom19interpolating_curveIDv2_dE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(unsigned char *)(a2 + 66)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v5 + 1);
    }
  }
  double v24 = 0;
  unsigned __int16 v25 = 0;
  uint64_t v26 = 0;
  std::vector<double>::resize((uint64_t)&v24, v5 + 1);
  uint64_t v6 = *(void *)a1;
  *(void *)double v24 = *(void *)(*(void *)a1 + 8);
  if (v5)
  {
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    LOWORD(v9) = 0;
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      unint64_t v15 = (float64x2_t *)(*(void *)a1 + v7);
      double v16 = v15[4].f64[1];
      unint64_t v17 = (double *)&v24[v8];
      v17[1] = v16;
      float64x2_t v18 = v15[1];
      float64x2_t v19 = vmulq_n_f64(vsubq_f64(v15[5], v18), v16 - *v17);
      *(float64x2_t *)(*(void *)a2 + 16 * (unsigned __int16)v9) = v18;
      float64x2_t v20 = vdivq_f64(v19, _Q0);
      unsigned __int16 v21 = v9 + 2;
      *(float64x2_t *)(*(void *)a2 + 16 * (unsigned __int16)(v9 + 1)) = vaddq_f64(v15[1], v20);
      LOWORD(v9) = v9 + 3;
      *(float64x2_t *)(*(void *)a2 + 16 * v21) = vsubq_f64(v15[5], v20);
      v8 += 8;
      v7 += 64;
    }
    while (8 * v5 != v8);
    uint64_t v6 = *(void *)a1;
    uint64_t v9 = (unsigned __int16)v9;
  }
  else
  {
    uint64_t v9 = 0;
  }
  *(_OWORD *)(*(void *)a2 + 16 * v9) = *(_OWORD *)(v6 + (*((void *)a1 + 1) << 6) - 48);
  *(unsigned char *)(a2 + 66) = 0;
  if ((char **)(a2 + 24) != &v24) {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v24, (uint64_t)v25, (v25 - v24) >> 3);
  }
  double v22 = v24;
  uint64_t v23 = (uint64_t)v25;
  *(void *)(a2 + 48) = *(void *)v24;
  *(void *)(a2 + 56) = *(void *)(v23 - 8);
  unsigned __int16 v25 = v22;
  operator delete(v22);
}

void _ZN4geom19interpolating_curveIDv2_dE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(float64x2_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  double v79 = 0;
  __int16 v80 = 0;
  uint64_t v81 = 0;
  int v76 = 0;
  int v77 = 0;
  uint64_t v78 = 0;
  __int16 v4 = a1[1];
  __int16 v5 = (_WORD)v4 - 1;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v79, (unsigned __int16)((_WORD)v4 + 2));
  std::vector<double>::resize((uint64_t)&v76, (unsigned __int16)((_WORD)v4 + 2));
  __asm { FMOV            V0.2D, #2.0 }
  *(float64x2_t *)double v79 = vmlaq_f64(vnegq_f64((*a1)[5]), _Q0, (*a1)[1]);
  double v11 = (double *)v76;
  *(void *)int v76 = 0;
  float64x2_t v12 = *a1;
  float64x2_t v13 = vsubq_f64((*a1)[5], (*a1)[1]);
  v11[1] = sqrt(sqrt(vaddvq_f64(vmulq_f64(v13, v13))));
  if ((_WORD)v4 == 1)
  {
    uint64_t v16 = 0;
  }
  else
  {
    unint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = (unsigned __int16)((_WORD)v4 - 1);
    do
    {
      *((float64x2_t *)v79 + v15 + 1) = v12[v14 / 0x10 + 1];
      unint64_t v17 = (double *)((char *)v76 + 8 * v15++);
      float64x2_t v12 = *a1;
      float64x2_t v18 = vsubq_f64((*a1)[v14 / 0x10 + 5], (*a1)[v14 / 0x10 + 1]);
      v17[2] = v17[1] + sqrt(sqrt(vaddvq_f64(vmulq_f64(v18, v18))));
      v14 += 64;
    }
    while ((unint64_t)(unsigned __int16)((_WORD)v4 - 1) << 6 != v14);
  }
  uint64_t v19 = (unsigned __int16)((_WORD)v4 + 2) - 2;
  *((float64x2_t *)v79 + v19) = v12[4 * v16 + 1];
  uint64_t v20 = (unsigned __int16)((_WORD)v4 + 2) - 1;
  *((float64x2_t *)v79 + v20) = vmlaq_f64(vnegq_f64(*((float64x2_t *)v79 + (unsigned __int16)((_WORD)v4 + 2) - 3)), _Q0, *((float64x2_t *)v79 + v19));
  double v21 = *((double *)v76 + v19);
  double v22 = &(*a1)[4 * (unint64_t)(unsigned __int16)((_WORD)v4 - 2)];
  float64x2_t v23 = vsubq_f64(v22[5], v22[1]);
  *((double *)v76 + v20) = v21 + sqrt(sqrt(vaddvq_f64(vmulq_f64(v23, v23))));
  if ((_WORD)v4 == 1)
  {
    uint64_t v25 = 0;
    *(void *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 64) = 0;
    if (!*(unsigned char *)(a2 + 66))
    {
      uint64_t v25 = 0;
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v16 + 1);
    }
    uint64_t v24 = 0;
    LOWORD(v25) = 0;
    __asm { FMOV            V1.2D, #3.0 }
    do
    {
      int v27 = v24 + 2;
      int v28 = (float64x2_t *)v79;
      double v29 = *((double *)v76 + v24);
      float64x2_t v30 = *((float64x2_t *)v79 + v24);
      uint64_t v31 = v24 + 1;
      double v32 = *((double *)v76 + (v24 + 1));
      double v33 = *((double *)v76 + (v24 + 2));
      double v34 = *((double *)v76 + (v24 + 3));
      double v35 = v33 - v32;
      double v36 = 1.0 / (v32 - v29);
      double v37 = 1.0 / (v33 - v29);
      double v38 = 1.0 / (v33 - v32);
      double v39 = v34 - v32;
      double v40 = 1.0 / (v34 - v32);
      double v41 = v34 - v33;
      double v42 = 1.0 / (v34 - v33);
      float64x2_t v43 = *((float64x2_t *)v79 + (v24 + 1));
      float64x2_t v44 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v29 - v32), 0));
      float64x2_t v45 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v43, v44), v30, v32 - v32), v36);
      float64x2_t v46 = *((float64x2_t *)v79 + (v24 + 2));
      float64x2_t v47 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v32 - v32), 0));
      float64x2_t v48 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v46, v47), v43, v33 - v32), v38);
      float64x2_t v49 = *((float64x2_t *)v79 + (v24 + 3));
      float64x2_t v50 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v49, vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v33 - v32), 0))), v46, v39), v42);
      float64x2_t v51 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v48, v44), v45, v33 - v32), v37);
      float64x2_t v52 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v50, v47), v48, v39), v40);
      float64x2_t v53 = vmulq_n_f64(vsubq_f64(v43, v30), v36);
      float64x2_t v54 = vmulq_n_f64(vsubq_f64(v46, v43), v38);
      float64x2_t v55 = vmulq_n_f64(vsubq_f64(v49, v46), v42);
      float64x2_t v56 = vmulq_n_f64(vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v52, v51), vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v48, v45), v53, v33 - v32), v54, v29 - v32, 0), v37), v33 - v32), vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v50, v48), v54, v39), v55, v32 - v32, 0), v40), v32 - v32, 0), v38), v33 - v32);
      double v57 = v29 - v33;
      double v58 = v32 - v33;
      double v59 = v33 - v33;
      float64x2_t v60 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v57, 0));
      float64x2_t v61 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v43, v60), v30, v58), v36);
      float64x2_t v62 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v58, 0));
      float64x2_t v63 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v46, v62), v43, v59), v38);
      float64x2_t v64 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v49, vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v59, 0))), v46, v41), v42);
      *(float64x2_t *)(*(void *)a2 + 16 * (unsigned __int16)v25) = v43;
      *(float64x2_t *)(*(void *)a2 + 16 * (unsigned __int16)(v25 + 1)) = vaddq_f64(v28[(v24 + 1)], vdivq_f64(v56, _Q1));
      unsigned __int16 v65 = v25 + 2;
      LOWORD(v25) = v25 + 3;
      *(float64x2_t *)(*(void *)a2 + 16 * v65) = vsubq_f64(v28[v27], vdivq_f64(vmulq_n_f64(vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v64, v62), v63, v41), v40), vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v63, v60), v61, v59), v37)), vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v63, v61), v53, v59), v54, v57, 0),
                                                                   v37),
                                                                 v59),
                                                               vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v64, v63), v54, v41), v55, v58, 0), v40), v58, 0), v38), v35), _Q1));
      uint64_t v24 = v31;
    }
    while (v16 != v31);
    uint64_t v25 = (unsigned __int16)v25;
  }
  *(float64x2_t *)(*(void *)a2 + 16 * v25) = (*a1)[4 * v16 + 1];
  unint64_t v66 = (unint64_t)a1[1];
  unsigned __int16 v74 = 0;
  uint64_t v75 = 0;
  __p = 0;
  if (v66)
  {
    std::vector<double>::__vallocate[abi:nn180100](&__p, v66);
    uint64_t v67 = (char *)v74;
    bzero(v74, 8 * v66);
    double v68 = &v67[8 * v66];
    unsigned __int16 v74 = v68;
    uint64_t v69 = a1[1];
    int v70 = (char *)__p;
    if (v69)
    {
      uint64_t v71 = 0;
      uint64_t v72 = (uint64_t)&(*a1)->f64[1];
      do
      {
        *(void *)&v70[v71] = *(void *)(v72 + 8 * v71);
        v71 += 8;
        uint64_t v69 = (float64x2_t *)((char *)v69 - 1);
      }
      while (v69);
    }
  }
  else
  {
    int v70 = 0;
    double v68 = 0;
  }
  *(unsigned char *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v70, (uint64_t)v68, (v68 - v70) >> 3);
    int v70 = (char *)__p;
    double v68 = (char *)v74;
  }
  *(void *)(a2 + 48) = *(void *)v70;
  *(void *)(a2 + 56) = *((void *)v68 - 1);
  unsigned __int16 v74 = v70;
  operator delete(v70);
  if (v76)
  {
    int v77 = v76;
    operator delete(v76);
  }
  if (v79)
  {
    __int16 v80 = v79;
    operator delete(v79);
  }
}

void _ZN4geom19interpolating_curveIDv2_dE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v67 = 0;
  double v68 = 0;
  uint64_t v69 = 0;
  float64x2_t v64 = 0;
  unsigned __int16 v65 = 0;
  uint64_t v66 = 0;
  float64x2_t v61 = 0;
  float64x2_t v62 = 0;
  uint64_t v63 = 0;
  __p = 0;
  double v59 = 0;
  uint64_t v60 = 0;
  unint64_t v4 = a1[1];
  float64x2_t v56 = 0;
  uint64_t v57 = 0;
  float64x2_t v55 = 0;
  if (v4)
  {
    std::vector<double>::__vallocate[abi:nn180100](&v55, v4);
    __int16 v5 = v56;
    bzero(v56, 8 * v4);
    unint64_t v4 = (unint64_t)v5 + 8 * v4;
    uint64_t v6 = a1[1];
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v55;
      uint64_t v9 = (uint64_t *)(*a1 + 8);
      do
      {
        uint64_t v10 = *v9;
        v9 += 8;
        *(void *)&v8[8 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  double v11 = v55;
  unint64_t v12 = (unsigned __int16)v6;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v67, (unsigned __int16)v6);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v64, v12);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v61, v12);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, v12);
  unint64_t v13 = v12 - 1;
  v67[v12 - 1] = 0u;
  *uint64_t v67 = 0u;
  __asm { FMOV            V1.2D, #1.0 }
  *((_OWORD *)__p + v12 - 1) = _Q1;
  *(_OWORD *)__p = _Q1;
  *((_OWORD *)v64 + v12 - 1) = 0u;
  *(_OWORD *)float64x2_t v64 = 0u;
  *((_OWORD *)v61 + v12 - 1) = 0u;
  *(_OWORD *)float64x2_t v61 = 0u;
  if (v12 - 1 >= 2)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    double v21 = (double *)(v11 + 8);
    do
    {
      double v22 = *v21;
      *(double *)&uint64_t v23 = *v21 - *(v21 - 1);
      double v24 = v21[1];
      ++v21;
      *(double *)&uint64_t v25 = v24 - v22;
      v67[v20 + 1] = vdupq_lane_s64(v23, 0);
      *((int64x2_t *)__p + v20 + 1) = vdupq_lane_s64(COERCE__INT64(*(double *)&v23 + *(double *)&v25 + *(double *)&v23+ *(double *)&v25), 0);
      *((int64x2_t *)v64 + v20 + 1) = vdupq_lane_s64(v25, 0);
      *((float64x2_t *)v61 + ++v20) = vmlaq_n_f64(vmulq_f64(vsubq_f64(*(float64x2_t *)(*a1 + v19 + 80), *(float64x2_t *)(*a1 + v19 + 16)), vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(3.0 / *(double *)&v23), 0))), vsubq_f64(*(float64x2_t *)(*a1 + v19 + 144), *(float64x2_t *)(*a1 + v19 + 80)), 3.0 / *(double *)&v25);
      v19 += 64;
    }
    while (v12 - 2 != v20);
  }
  int64_t v26 = v59 - (unsigned char *)__p;
  unint64_t v27 = ((unint64_t)(v59 - (unsigned char *)__p) >> 4) - 1;
  *(float64x2_t *)float64x2_t v64 = vdivq_f64(*(float64x2_t *)v64, *(float64x2_t *)__p);
  *(float64x2_t *)float64x2_t v61 = vdivq_f64(*(float64x2_t *)v61, *(float64x2_t *)__p);
  if ((int)v27 > 1)
  {
    unint64_t v28 = v27 - 1;
    uint64_t v29 = 16;
    do
    {
      *(float64x2_t *)((char *)v64 + v29) = vdivq_f64(*(float64x2_t *)((char *)v64 + v29), vmlsq_f64(*(float64x2_t *)((char *)__p + v29), *(float64x2_t *)((char *)v64 + v29 - 16), (float64x2_t)v67[(unint64_t)v29 / 0x10]));
      *(float64x2_t *)((char *)v61 + v29) = vdivq_f64(vmlsq_f64(*(float64x2_t *)((char *)v61 + v29), *(float64x2_t *)((char *)v61 + v29 - 16), (float64x2_t)v67[(unint64_t)v29 / 0x10]), vmlsq_f64(*(float64x2_t *)((char *)__p + v29), *(float64x2_t *)((char *)v64 + v29 - 16), (float64x2_t)v67[(unint64_t)v29 / 0x10]));
      v29 += 16;
      --v28;
    }
    while (v28);
  }
  *((float64x2_t *)v61 + (int)v27) = vdivq_f64(vmlsq_f64(*((float64x2_t *)v61 + (int)v27), *(float64x2_t *)((char *)v61 + (((v26 << 28) - 0x200000000) >> 28)), (float64x2_t)v67[(int)v27]), vmlsq_f64(*((float64x2_t *)__p + (int)v27), *(float64x2_t *)((char *)v64 + (((v26 << 28) - 0x200000000) >> 28)), (float64x2_t)v67[(int)v27]));
  if ((int)v27 >= 1)
  {
    do
    {
      float64x2_t v30 = *((float64x2_t *)v61 + v27);
      BOOL v31 = v27-- > 1;
      *((float64x2_t *)v61 + v27) = vmlsq_f64(*((float64x2_t *)v61 + v27), v30, *((float64x2_t *)v64 + v27));
    }
    while (v31);
  }
  __asm { FMOV            V16.2D, #2.0 }
  if (v12 != 1)
  {
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    double v35 = (double *)(v11 + 8);
    do
    {
      double v36 = *v35 - *(v35 - 1);
      *(float64x2_t *)((char *)v64 + v33) = vmlaq_n_f64(vmulq_f64(vmlaq_f64(*(float64x2_t *)((char *)v61 + v33 + 16), _Q16, *(float64x2_t *)((char *)v61 + v33)), vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v36 / 3.0), 0))), vsubq_f64(*(float64x2_t *)(*a1 + v34 + 80), *(float64x2_t *)(*a1 + v34 + 16)), 1.0 / v36);
      *(float64x2_t *)((char *)__p + v33) = vmulq_n_f64(vsubq_f64(*(float64x2_t *)((char *)v61 + v33 + 16), *(float64x2_t *)((char *)v61 + v33)), 1.0 / (v36 * 3.0));
      v34 += 64;
      v33 += 16;
      ++v35;
      --v13;
    }
    while (v13);
  }
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  __int16 v37 = *((_WORD *)a1 + 4);
  unsigned __int16 v38 = v37 - 1;
  if (v37 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    uint64_t v42 = 0;
    uint64_t v41 = 0;
    if (!*(unsigned char *)(a2 + 66)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    float64x2_t v54 = _Q16;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v38 + 1));
    *(_WORD *)(a2 + 64) = v38;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v38 + 1);
    }
    uint64_t v39 = 0;
    uint64_t v40 = 0;
    LOWORD(v41) = 0;
    uint64_t v42 = v38;
    __asm { FMOV            V1.2D, #3.0 }
    do
    {
      float64x2_t v44 = (double *)&v11[8 * v40];
      float64x2_t v45 = *((float64x2_t *)v64 + v40);
      float64x2_t v46 = *((float64x2_t *)v61 + v40);
      float64x2_t v47 = *((float64x2_t *)__p + v40);
      uint64_t v48 = v40 + 1;
      float64x2_t v49 = (float64x2_t *)(*a1 + v39);
      float64x2_t v50 = v49[1];
      float64x2_t v51 = v49[5];
      double v52 = v44[1] - *v44;
      float64x2_t v53 = vmulq_n_f64(vmlaq_n_f64(v45, vmlaq_f64(vmulq_n_f64(v47, (*v44 - *v44) * 3.0), v54, v46), *v44 - *v44), v52);
      *(float64x2_t *)(*(void *)a2 + 16 * (unsigned __int16)v41) = v50;
      LOWORD(v44) = v41 + 2;
      *(float64x2_t *)(*(void *)a2 + 16 * (unsigned __int16)(v41 + 1)) = vaddq_f64(v50, vdivq_f64(v53, _Q1));
      LOWORD(v41) = v41 + 3;
      *(float64x2_t *)(*(void *)a2 + 16 * (unsigned __int16)v44) = vsubq_f64(v51, vdivq_f64(vmulq_n_f64(vmlaq_n_f64(v45, vmlaq_f64(vmulq_n_f64(v47, v52 * 3.0), v54, v46), v52), v52), _Q1));
      v39 += 64;
      uint64_t v40 = v48;
    }
    while (v38 != v48);
    uint64_t v41 = (unsigned __int16)v41;
  }
  *(_OWORD *)(*(void *)a2 + 16 * v41) = *(_OWORD *)(*a1 + (v42 << 6) + 16);
  *(unsigned char *)(a2 + 66) = 0;
  std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (void)v11) >> 3);
  *(void *)(a2 + 48) = *(void *)v11;
  *(void *)(a2 + 56) = *(void *)(v4 - 8);
  operator delete(v11);
  if (__p)
  {
    double v59 = __p;
    operator delete(__p);
  }
  if (v61)
  {
    float64x2_t v62 = v61;
    operator delete(v61);
  }
  if (v64)
  {
    unsigned __int16 v65 = v64;
    operator delete(v64);
  }
  if (v67)
  {
    double v68 = v67;
    operator delete(v67);
  }
}

void _ZN4geom19interpolating_curveIDv2_dE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(unsigned char *)(a2 + 66)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v5 + 1);
    }
  }
  double v24 = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  std::vector<double>::resize((uint64_t)&v24, v5 + 1);
  uint64_t v6 = *(void *)a1;
  *(void *)double v24 = *(void *)(*(void *)a1 + 8);
  if (v5)
  {
    uint64_t v7 = 0;
    LOWORD(v8) = 0;
    uint64_t v9 = 8;
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      uint64_t v15 = (float64x2_t *)(*(void *)a1 + v7);
      double v16 = v15[4].f64[1];
      double v17 = *(double *)&v24[v9 - 8];
      *(double *)&v24[v9] = v16;
      double v18 = v16 - v17;
      float64x2_t v19 = v15[6];
      float64x2_t v20 = vmulq_n_f64(v15[3], v18);
      *(float64x2_t *)(*(void *)a2 + 16 * (unsigned __int16)v8) = v15[1];
      *(float64x2_t *)(*(void *)a2 + 16 * (unsigned __int16)(v8 + 1)) = vaddq_f64(vdivq_f64(v20, _Q0), v15[1]);
      unsigned __int16 v21 = v8 + 2;
      LOWORD(v8) = v8 + 3;
      *(float64x2_t *)(*(void *)a2 + 16 * v21) = vsubq_f64(v15[5], vdivq_f64(vmulq_n_f64(v19, v18), _Q0));
      v7 += 64;
      v9 += 8;
    }
    while ((unint64_t)v5 << 6 != v7);
    uint64_t v6 = *(void *)a1;
    uint64_t v8 = (unsigned __int16)v8;
  }
  else
  {
    uint64_t v8 = 0;
  }
  *(_OWORD *)(*(void *)a2 + 16 * v8) = *(_OWORD *)(v6 + (*((void *)a1 + 1) << 6) - 48);
  *(unsigned char *)(a2 + 66) = 0;
  if ((char **)(a2 + 24) != &v24) {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v24, (uint64_t)v25, (v25 - v24) >> 3);
  }
  double v22 = v24;
  uint64_t v23 = (uint64_t)v25;
  *(void *)(a2 + 48) = *(void *)v24;
  *(void *)(a2 + 56) = *(void *)(v23 - 8);
  uint64_t v25 = v22;
  operator delete(v22);
}

double _ZNK4geom20interpolating_splineIDv2_dE21evaluate_total_lengthEv(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 64);
  if (*(_WORD *)(a1 + 64)) {
    unsigned __int16 v2 = *(_WORD *)(a1 + 64);
  }
  else {
    unsigned __int16 v2 = -1;
  }
  if (*(unsigned char *)(a1 + 66))
  {
    if (v1 == v2) {
      double v3 = *(double *)(a1 + 56);
    }
    else {
      double v3 = *(double *)(a1 + 48) + (double)v2 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v1);
    }
  }
  else
  {
    double v3 = *(double *)(*(void *)(a1 + 24) + 8 * v2);
  }
  return _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(a1, v3);
}

uint64_t _ZNSt3__16vectorIN4geom20interpolating_splineIDv2_dEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 5);
    if (v10 + 1 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 5);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x155555555555555) {
      unint64_t v13 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      unint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(v4, v13);
    }
    else {
      unint64_t v14 = 0;
    }
    uint64_t v15 = v14;
    double v16 = &v14[96 * v10];
    double v18 = &v14[96 * v13];
    _ZN4geom20interpolating_splineIDv2_dEC2ERKS2_((uint64_t)v16, a2);
    double v17 = v16 + 96;
    std::vector<geom::interpolating_spline<double>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<geom::interpolating_spline<double>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = _ZN4geom20interpolating_splineIDv2_dEC2ERKS2_(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 96;
  }
  a1[1] = v9;
  return result;
}

void _ZN4geom19interpolating_curveIDv3_dE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(void *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  _ZN4geom19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb((uint64_t)a2, a1, 0);
}

void _ZN4geom19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = (uint64_t *)(a1 + 72);
  uint64_t v11 = v6;
  if (v8 != v10)
  {
    do
      uint64_t v8 = geom::interpolating_spline<double>::~interpolating_spline(v8 - 96);
    while (v8 != v10);
    uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
  }
  *(void *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<double>>::reserve(v9, v11 - 1);
  *(unsigned char *)(a1 + 208) = 0;
  if ((unsigned __int16)v6 < 2u)
  {
    __int16 v12 = 0;
    __int16 v13 = -1;
  }
  else
  {
    __int16 v12 = 0;
    __int16 v13 = -1;
    __int16 v14 = 1;
    do
    {
      if (*(_DWORD *)(*a2 + 112 * v14) != *(_DWORD *)(*a2 + 112 * v12))
      {
        __int16 v13 = v14 - 1;
        *(void *)&long long v105 = *a2 + 112 * v12;
        *((void *)&v105 + 1) = (__int16)(v14 - 1) - (uint64_t)v12 + 1;
        _ZN4geom19interpolating_curveIDv3_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((void *)a1, (float64x2_t **)&v105);
        __int16 v12 = v14;
      }
      ++v14;
    }
    while ((unsigned __int16)v6 > v14);
  }
  if ((unsigned __int16)v6 - 1 != v13)
  {
    *(void *)&long long v105 = *a2 + 112 * v12;
    *((void *)&v105 + 1) = (unsigned __int16)v6 - (uint64_t)v12;
    _ZN4geom19interpolating_curveIDv3_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((void *)a1, (float64x2_t **)&v105);
  }
  uint64_t v16 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5));
  if (v15 == v16)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    unsigned __int16 v17 = 0;
    uint64_t v18 = *v9;
    uint64_t v19 = *(unsigned __int16 **)(a1 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5) <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5);
    }
    unsigned __int16 v21 = (__int16 *)(v18 + 64);
    unint64_t v22 = v20;
    do
    {
      __int16 v23 = *v21;
      v21 += 48;
      *v19++ = v17;
      v17 += v23;
      --v22;
    }
    while (v22);
    std::vector<unsigned short>::resize(a1, v17);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = *(void *)(a1 + 72);
    do
    {
      int v27 = *(unsigned __int16 *)(v26 + 96 * v24 + 64);
      if (*(_WORD *)(v26 + 96 * v24 + 64))
      {
        uint64_t v28 = *(void *)a1;
        do
        {
          uint64_t v29 = (v25 + 1);
          *(_WORD *)(v28 + 2 * (unsigned __int16)v25) = v24;
          LODWORD(v25) = v25 + 1;
          --v27;
        }
        while (v27);
      }
      else
      {
        uint64_t v29 = v25;
      }
      ++v24;
      uint64_t v25 = v29;
    }
    while (v24 != v20);
  }
  *(void *)(a1 + 192) = *(void *)(*a2 + 8);
  *(void *)(a1 + 200) = *(void *)(a2[1] - 104);
  if (a3)
  {
    LOWORD(v115[0]) = 512;
    v115[1] = 0.001;
    char v116 = 1;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    uint64_t v30 = *(void *)(a1 + 96);
    uint64_t v103 = (void *)(a1 + 96);
    uint64_t v104 = a1;
    *(void *)(a1 + 104) = v30;
    uint64_t v31 = *(void *)(a1 + 120);
    int v102 = (double **)(a1 + 120);
    *(_WORD *)(a1 + 160) = 0;
    *(unsigned char *)(a1 + 162) = 0;
    *(void *)(a1 + 128) = v31;
    uint64_t v32 = *a2;
    uint64_t v33 = a2[1] - *a2;
    if (v33) {
      double v34 = *(double *)(v32 + 8);
    }
    else {
      double v34 = 0.0;
    }
    unint64_t v35 = 0x6DB6DB6DB6DB6DB7 * (v33 >> 4);
    if (v35 >= 2)
    {
      unint64_t v36 = 1;
      while (1)
      {
        int v37 = *(_DWORD *)(v32 + 112 * v36);
        if (v37 == *(_DWORD *)(v32 + 112 * (v36 - 1))) {
          break;
        }
LABEL_101:
        unint64_t v36 = (v36 + 1);
        uint64_t v32 = *a2;
        unint64_t v35 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
        if (v35 <= v36) {
          goto LABEL_126;
        }
      }
      double v38 = *(double *)(v32 + 112 * v36 + 8);
      LOBYTE(v115[0]) = v37 != 0;
      unsigned __int16 v110 = 0;
      uint64_t v39 = v104;
      unsigned __int8 v111 = 0;
      *((void *)&v105 + 1) = v105;
      *(void *)&long long v107 = *((void *)&v106 + 1);
      double v40 = (v38 + v34 * 2.0) * 0.333333333;
      double v41 = (v34 + v38 * 2.0) * 0.333333333;
      if (*(unsigned char *)(v104 + 208))
      {
        double v42 = v34;
LABEL_76:
        double v69 = v38;
LABEL_77:
        *(double *)char v117 = v34;
        *(double *)&v117[1] = v38;
        *(double *)&float v117[2] = v42;
        *(double *)&v117[3] = v40;
        *(double *)&v117[4] = v41;
        *(double *)&v117[5] = v69;
        char v118 = 0;
        _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(&v104, (uint64_t)v117, v115, (uint64_t)&v105);
        uint64_t v70 = v110;
        int v71 = *(_DWORD *)(a1 + 104);
        uint64_t v72 = *(void *)(a1 + 96);
        __int16 v73 = *(_WORD *)(a1 + 160);
        if (v73) {
          unsigned __int16 v74 = v73 + 1;
        }
        else {
          unsigned __int16 v74 = 0;
        }
        unsigned __int16 v75 = v73 + v110;
        if (v73 + v110)
        {
          std::vector<double>::resize((uint64_t)v103, (unsigned __int16)(3 * v75 + 1));
          *(_WORD *)(a1 + 160) = v75;
          if (!*(unsigned char *)(a1 + 162))
          {
            std::vector<double>::resize((uint64_t)v102, v75 + 1);
            if (v70) {
              goto LABEL_86;
            }
            goto LABEL_100;
          }
LABEL_85:
          if (v70) {
            goto LABEL_86;
          }
          goto LABEL_100;
        }
        *(void *)(a1 + 104) = v72;
        *(_WORD *)(a1 + 160) = 0;
        if (*(unsigned char *)(a1 + 162)) {
          goto LABEL_85;
        }
        *(void *)(a1 + 128) = *(void *)(a1 + 120);
        if (!v70)
        {
LABEL_100:
          double v34 = v38;
          goto LABEL_101;
        }
LABEL_86:
        int v76 = (unsigned __int16)((v71 - v72) >> 3);
        int v77 = v74;
        int v78 = v111;
        uint64_t v79 = v110;
        double v80 = (double)v110;
        uint64_t v81 = (double *)*((void *)&v106 + 1);
        unsigned __int16 v82 = (void *)v105;
        int v83 = *v102;
        int v84 = (void *)*v103;
        int v85 = 3;
        uint64_t v86 = 1;
        while (1)
        {
          if (v76)
          {
            if (v78) {
              goto LABEL_89;
            }
          }
          else
          {
            if (v78)
            {
              if (v79) {
                double v88 = v108 + (v109 - v108) / v80 * 0.0;
              }
              else {
                double v88 = v109;
              }
            }
            else
            {
              double v88 = *v81;
            }
            *int v83 = v88;
            *int v84 = *v82;
            ++v77;
            int v76 = 1;
            if (v78)
            {
LABEL_89:
              if (v79 == v86) {
                double v87 = v109;
              }
              else {
                double v87 = v108 + (double)(unsigned __int16)v86 * ((v109 - v108) / v80);
              }
              goto LABEL_99;
            }
          }
          double v87 = v81[v86];
LABEL_99:
          v83[v77] = v87;
          v84[(unsigned __int16)v76] = v82[(unsigned __int16)(v85 - 2)];
          v84[(unsigned __int16)(v76 + 1)] = v82[(unsigned __int16)(v85 - 1)];
          v84[(unsigned __int16)(v76 + 2)] = v82[(unsigned __int16)v85];
          ++v77;
          v76 += 3;
          ++v86;
          v85 += 3;
          if (v86 - v70 == 1) {
            goto LABEL_100;
          }
        }
      }
      uint64_t v43 = *(void *)(v104 + 72);
      unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 80) - v43) >> 5);
      if ((v44 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v34)
      {
        LOWORD(v44) = v44 - 1;
        if (*(double *)(v104 + 200) > v34)
        {
          for (unsigned __int16 i = 0; ; unsigned __int16 i = v47 + 1)
          {
            int v46 = i;
            while (1)
            {
              unsigned int v47 = (v46 + (unsigned __int16)v44) >> 1;
              if (*(double *)(v43 + 96 * v47 + 48) <= v34) {
                break;
              }
              LOWORD(v44) = v47 - 1;
            }
            if (*(double *)(v43 + 96 * v47 + 56) > v34) {
              break;
            }
          }
          LODWORD(v44) = (v46 + (unsigned __int16)v44) >> 1;
        }
        int v64 = (unsigned __int16)v44;
        int v65 = (unsigned __int16)v44;
        double v48 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v43 + 96 * (unsigned __int16)v44, v34);
        if (v65)
        {
          double v49 = *(double *)(*(void *)(v39 + 48) + 8 * (v64 - 1));
LABEL_48:
          double v42 = v48 + v49;
          uint64_t v50 = v104;
          if (*(unsigned char *)(v104 + 208)) {
            goto LABEL_76;
          }
          uint64_t v51 = *(void *)(v104 + 72);
          unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 80) - v51) >> 5);
          if ((v52 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v40)
          {
            LOWORD(v52) = v52 - 1;
            if (*(double *)(v104 + 200) > v40)
            {
              for (unsigned __int16 j = 0; ; unsigned __int16 j = v55 + 1)
              {
                int v54 = j;
                while (1)
                {
                  unsigned int v55 = (v54 + (unsigned __int16)v52) >> 1;
                  if (*(double *)(v51 + 96 * v55 + 48) <= v40) {
                    break;
                  }
                  LOWORD(v52) = v55 - 1;
                }
                if (*(double *)(v51 + 96 * v55 + 56) > v40) {
                  break;
                }
              }
              LODWORD(v52) = (v54 + (unsigned __int16)v52) >> 1;
            }
            int v89 = (unsigned __int16)v52;
            int v90 = (unsigned __int16)v52;
            double v56 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v51 + 96 * (unsigned __int16)v52, (v38 + v34 * 2.0) * 0.333333333);
            if (v90)
            {
              double v57 = *(double *)(*(void *)(v50 + 48) + 8 * (v89 - 1));
LABEL_60:
              double v40 = v56 + v57;
              uint64_t v58 = v104;
              if (*(unsigned char *)(v104 + 208)) {
                goto LABEL_76;
              }
              uint64_t v59 = *(void *)(v104 + 72);
              unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 80) - v59) >> 5);
              if ((v60 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v41)
              {
                LOWORD(v60) = v60 - 1;
                if (*(double *)(v104 + 200) > v41)
                {
                  for (unsigned __int16 k = 0; ; unsigned __int16 k = v63 + 1)
                  {
                    int v62 = k;
                    while (1)
                    {
                      unsigned int v63 = (v62 + (unsigned __int16)v60) >> 1;
                      if (*(double *)(v59 + 96 * v63 + 48) <= v41) {
                        break;
                      }
                      LOWORD(v60) = v63 - 1;
                    }
                    if (*(double *)(v59 + 96 * v63 + 56) > v41) {
                      break;
                    }
                  }
                  LODWORD(v60) = (v62 + (unsigned __int16)v60) >> 1;
                }
                int v98 = (unsigned __int16)v60;
                int v99 = (unsigned __int16)v60;
                double v66 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v59 + 96 * (unsigned __int16)v60, (v34 + v38 * 2.0) * 0.333333333);
                if (v99)
                {
                  double v67 = *(double *)(*(void *)(v58 + 48) + 8 * (v98 - 1));
LABEL_75:
                  double v41 = v66 + v67;
                  uint64_t v68 = v104;
                  if (*(unsigned char *)(v104 + 208)) {
                    goto LABEL_76;
                  }
                  uint64_t v91 = *(void *)(v104 + 72);
                  unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 80) - v91) >> 5);
                  if ((v92 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v38)
                  {
                    LOWORD(v92) = v92 - 1;
                    if (*(double *)(v104 + 200) > v38)
                    {
                      for (unsigned __int16 m = 0; ; unsigned __int16 m = v95 + 1)
                      {
                        int v94 = m;
                        while (1)
                        {
                          unsigned int v95 = (v94 + (unsigned __int16)v92) >> 1;
                          if (*(double *)(v91 + 96 * v95 + 48) <= v38) {
                            break;
                          }
                          LOWORD(v92) = v95 - 1;
                        }
                        if (*(double *)(v91 + 96 * v95 + 56) > v38) {
                          break;
                        }
                      }
                      LODWORD(v92) = (v94 + (unsigned __int16)v92) >> 1;
                    }
                    int v100 = (unsigned __int16)v92;
                    int v101 = (unsigned __int16)v92;
                    double v96 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v91 + 96 * (unsigned __int16)v92, v38);
                    if (v101)
                    {
                      double v97 = *(double *)(*(void *)(v68 + 48) + 8 * (v100 - 1));
                      goto LABEL_119;
                    }
                  }
                  else
                  {
                    double v96 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v91, v38);
                  }
                  double v97 = 0.0;
LABEL_119:
                  double v69 = v96 + v97;
                  goto LABEL_77;
                }
              }
              else
              {
                double v66 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v59, (v34 + v38 * 2.0) * 0.333333333);
              }
              double v67 = 0.0;
              goto LABEL_75;
            }
          }
          else
          {
            double v56 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v51, (v38 + v34 * 2.0) * 0.333333333);
          }
          double v57 = 0.0;
          goto LABEL_60;
        }
      }
      else
      {
        double v48 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v43, v34);
      }
      double v49 = 0.0;
      goto LABEL_48;
    }
LABEL_126:
    *(unsigned char *)(a1 + 208) = 1;
    *(void *)(a1 + 192) = *(void *)(v32 + 8);
    *(void *)(a1 + 200) = *(void *)(v32 + 112 * v35 - 104);
    geom::interpolating_spline<double>::~interpolating_spline((uint64_t)&v105);
  }
}

void _ZN4geom19interpolating_curveIDv3_dE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(void *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  _ZN4geom19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb((uint64_t)a2, a1, 1);
}

float64_t _ZNK4geom19interpolating_curveIDv3_dE11evaluate_atEd@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v26 = 0;
    double v27 = 0.0;
    uint64_t v28 = 0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v26, a3);
    int v5 = (unsigned __int16)(3 * v26);
    uint64_t v6 = *(void *)(a1 + 96);
    double v7 = 1.0 - v27;
    a3 = *(double *)(v6 + 8 * (v5 + 1)) * (v27 * (v7 * v7 * 3.0))
       + *(double *)(v6 + 8 * (unsigned __int16)(3 * v26)) * (v7 * (v7 * v7))
       + *(double *)(v6 + 8 * (v5 + 2)) * (v27 * v27 * ((1.0 - v27) * 3.0))
       + *(double *)(v6 + 8 * (v5 + 3)) * (v27 * (v27 * v27));
  }
  uint64_t v8 = *(void *)(a1 + 72);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v8) >> 5);
  if ((v9 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a3)
  {
    LOWORD(v9) = v9 - 1;
    if (*(double *)(a1 + 200) > a3)
    {
      for (unsigned __int16 i = 0; ; unsigned __int16 i = v12 + 1)
      {
        int v11 = i;
        while (1)
        {
          unsigned int v12 = (v11 + (unsigned __int16)v9) >> 1;
          if (*(double *)(v8 + 96 * v12 + 48) <= a3) {
            break;
          }
          LOWORD(v9) = v12 - 1;
        }
        if (*(double *)(v8 + 96 * v12 + 56) > a3) {
          break;
        }
      }
      LODWORD(v9) = (v11 + (unsigned __int16)v9) >> 1;
    }
  }
  else
  {
    LOWORD(v9) = 0;
  }
  __int16 v13 = (void *)(v8 + 96 * (unsigned __int16)v9);
  uint64_t v26 = 0;
  double v27 = 0.0;
  uint64_t v28 = 0;
  geom::interpolating_spline<double>::find_span((uint64_t)v13, (uint64_t)&v26, a3);
  v23.f64[0] = v27;
  int v14 = (unsigned __int16)(3 * v26);
  uint64_t v15 = (float64x2_t *)(*v13 + 32 * (unsigned __int16)(3 * v26));
  uint64_t v16 = (float64x2_t *)(*v13 + 32 * (v14 + 1));
  unsigned __int16 v17 = (float64x2_t *)(*v13 + 32 * (v14 + 2));
  uint64_t v18 = (float64x2_t *)(*v13 + 32 * (v14 + 3));
  double v19 = 1.0 - v27;
  v20.f64[0] = v19 * (v19 * v19);
  v21.f64[0] = v27 * (v19 * v19 * 3.0);
  v22.f64[0] = v23.f64[0] * v23.f64[0] * ((1.0 - v27) * 3.0);
  v23.f64[0] = v23.f64[0] * (v23.f64[0] * v23.f64[0]);
  float64x2_t v24 = vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(v16[1], v21), v20, v15[1]), v22, v17[1]), v23, v18[1]);
  *a2 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v16, v21.f64[0]), *v15, v20.f64[0]), *v17, v22.f64[0]), *v18, v23.f64[0]);
  a2[1] = v24;
  return v23.f64[0];
}

uint64_t _ZNK4geom19interpolating_curveIDv3_dE19evaluate_tangent_atEd@<X0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v59 = 0;
    double v60 = 0.0;
    double v61 = 0.0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v59, a3);
    int v5 = (unsigned __int16)(3 * v59);
    uint64_t v6 = *(void *)(a1 + 96);
    double v7 = 1.0 - v60;
    double v8 = *(double *)(v6 + 8 * (v5 + 1)) * (v60 * (v7 * v7 * 3.0))
       + *(double *)(v6 + 8 * (unsigned __int16)(3 * v59)) * (v7 * (v7 * v7))
       + *(double *)(v6 + 8 * (v5 + 2)) * (v60 * v60 * ((1.0 - v60) * 3.0))
       + *(double *)(v6 + 8 * (v5 + 3)) * (v60 * (v60 * v60));
    uint64_t v9 = *(void *)(a1 + 72);
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v9) >> 5);
    if ((v10 & 0xFFFE) != 0 && *(double *)(a1 + 192) < v8)
    {
      LOWORD(v10) = v10 - 1;
      if (*(double *)(a1 + 200) > v8)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v13 + 1)
        {
          int v12 = i;
          while (1)
          {
            unsigned int v13 = (v12 + (unsigned __int16)v10) >> 1;
            if (*(double *)(v9 + 96 * v13 + 48) <= v8) {
              break;
            }
            LOWORD(v10) = v13 - 1;
          }
          if (*(double *)(v9 + 96 * v13 + 56) > v8) {
            break;
          }
        }
        LODWORD(v10) = (v12 + (unsigned __int16)v10) >> 1;
      }
    }
    else
    {
      LOWORD(v10) = 0;
    }
    int v14 = (void *)(v9 + 96 * (unsigned __int16)v10);
    uint64_t v59 = 0;
    double v60 = 0.0;
    double v61 = 0.0;
    uint64_t result = geom::interpolating_spline<double>::find_span((uint64_t)v14, (uint64_t)&v59, v8);
    v16.f64[0] = v61 * 3.0;
    int v17 = (unsigned __int16)(3 * v59);
    uint64_t v18 = *v14 + 32 * (v17 + 1);
    float64x2_t v19 = *(float64x2_t *)(v18 + 16);
    float64x2_t v20 = (float64x2_t *)(*v14 + 32 * (unsigned __int16)(3 * v59));
    float64x2_t v21 = vsubq_f64(*(float64x2_t *)v18, *v20);
    float64x2_t v22 = vsubq_f64(v19, v20[1]);
    uint64_t v23 = *v14 + 32 * (v17 + 2);
    float64x2_t v24 = *(float64x2_t *)v23;
    float64x2_t v25 = *(float64x2_t *)(v23 + 16);
    float64x2_t v26 = vsubq_f64(v25, v19);
    float64x2_t v27 = vsubq_f64(*(float64x2_t *)v23, *(float64x2_t *)v18);
    uint64_t v28 = *v14 + 32 * (v17 + 3);
    float64x2_t v29 = *(float64x2_t *)v28;
    float64x2_t v30 = *(float64x2_t *)(v28 + 16);
    float64x2_t v31 = vsubq_f64(v30, v25);
    v29.f64[0] = 1.0 - v60;
    v30.f64[0] = v29.f64[0] * v29.f64[0];
    v29.f64[0] = v60 * (v29.f64[0] + v29.f64[0]);
    v32.f64[0] = v60 * v60;
    float64x2_t v33 = vmulq_f64(v16, vmlaq_f64(vmlaq_f64(vmulq_f64(v29, v26), v30, v22), v32, v31));
    float64x2_t v34 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v27, v29.f64[0]), v21, v30.f64[0]), vsubq_f64(*(float64x2_t *)v28, v24), v60 * v60), v61 * 3.0);
    float64x2_t v35 = vmulq_f64(v33, v33);
    *(float *)v35.f64 = sqrt(v35.f64[0] + vaddvq_f64(vmulq_f64(v34, v34)));
    if (*(float *)v35.f64 > 0.0)
    {
      v35.f64[0] = 1.0 / *(float *)v35.f64;
      float64x2_t v33 = vmulq_f64(v33, v35);
      *(void *)&v34.f64[1] = vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
      float64x2_t v34 = vmulq_n_f64(v34, v35.f64[0]);
    }
  }
  else
  {
    uint64_t v36 = *(void *)(a1 + 72);
    unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v36) >> 5);
    if ((v37 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a3)
    {
      LOWORD(v37) = v37 - 1;
      if (*(double *)(a1 + 200) > a3)
      {
        for (unsigned __int16 j = 0; ; unsigned __int16 j = v40 + 1)
        {
          int v39 = j;
          while (1)
          {
            unsigned int v40 = (v39 + (unsigned __int16)v37) >> 1;
            if (*(double *)(v36 + 96 * v40 + 48) <= a3) {
              break;
            }
            LOWORD(v37) = v40 - 1;
          }
          if (*(double *)(v36 + 96 * v40 + 56) > a3) {
            break;
          }
        }
        LODWORD(v37) = (v39 + (unsigned __int16)v37) >> 1;
      }
    }
    else
    {
      LOWORD(v37) = 0;
    }
    double v41 = (void *)(v36 + 96 * (unsigned __int16)v37);
    uint64_t v59 = 0;
    double v60 = 0.0;
    double v61 = 0.0;
    uint64_t result = geom::interpolating_spline<double>::find_span((uint64_t)v41, (uint64_t)&v59, a3);
    v42.f64[0] = v61 * 3.0;
    int v43 = (unsigned __int16)(3 * v59);
    uint64_t v44 = *v41 + 32 * (v43 + 1);
    float64x2_t v45 = *(float64x2_t *)(v44 + 16);
    int v46 = (float64x2_t *)(*v41 + 32 * (unsigned __int16)(3 * v59));
    float64x2_t v47 = vsubq_f64(*(float64x2_t *)v44, *v46);
    float64x2_t v48 = vsubq_f64(v45, v46[1]);
    uint64_t v49 = *v41 + 32 * (v43 + 2);
    float64x2_t v50 = *(float64x2_t *)v49;
    float64x2_t v51 = *(float64x2_t *)(v49 + 16);
    float64x2_t v52 = vsubq_f64(v51, v45);
    float64x2_t v53 = vsubq_f64(*(float64x2_t *)v49, *(float64x2_t *)v44);
    uint64_t v54 = *v41 + 32 * (v43 + 3);
    float64x2_t v55 = *(float64x2_t *)v54;
    float64x2_t v56 = *(float64x2_t *)(v54 + 16);
    float64x2_t v57 = vsubq_f64(v56, v51);
    v55.f64[0] = 1.0 - v60;
    v56.f64[0] = v55.f64[0] * v55.f64[0];
    v55.f64[0] = v60 * (v55.f64[0] + v55.f64[0]);
    v58.f64[0] = v60 * v60;
    float64x2_t v33 = vmulq_f64(v42, vmlaq_f64(vmlaq_f64(vmulq_f64(v55, v52), v56, v48), v58, v57));
    float64x2_t v34 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v53, v55.f64[0]), v47, v56.f64[0]), vsubq_f64(*(float64x2_t *)v54, v50), v60 * v60), v61 * 3.0);
  }
  *a2 = v34;
  a2[1] = v33;
  return result;
}

double _ZNK4geom19interpolating_curveIDv3_dE18evaluate_length_atEd(uint64_t a1, double result)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    uint64_t v4 = a1 + 72;
    uint64_t v3 = *(void *)(a1 + 72);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v4 + 8) - v3) >> 5);
    if ((v5 & 0xFFFE) != 0 && *(double *)(a1 + 192) < result)
    {
      LOWORD(v5) = v5 - 1;
      if (*(double *)(a1 + 200) > result)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v8 + 1)
        {
          int v7 = i;
          while (1)
          {
            unsigned int v8 = (v7 + (unsigned __int16)v5) >> 1;
            if (*(double *)(v3 + 96 * v8 + 48) <= result) {
              break;
            }
            LOWORD(v5) = v8 - 1;
          }
          if (*(double *)(v3 + 96 * v8 + 56) > result) {
            break;
          }
        }
        LODWORD(v5) = (v7 + (unsigned __int16)v5) >> 1;
      }
      int v11 = (unsigned __int16)v5;
      int v12 = (unsigned __int16)v5;
      double v9 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v3 + 96 * (unsigned __int16)v5, result);
      if (v12)
      {
        double v10 = *(double *)(*(void *)(a1 + 48) + 8 * (v11 - 1));
        return v9 + v10;
      }
    }
    else
    {
      double v9 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v3, result);
    }
    double v10 = 0.0;
    return v9 + v10;
  }
  return result;
}

double _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(uint64_t a1, double a2)
{
  geom::interpolating_spline<double>::find_span(a1, (uint64_t)v11, a2);
  uint64_t v4 = v11[0];
  uint64_t v5 = *(void *)(a1 + 72);
  if (*(void *)(a1 + 80) == v5)
  {
    if (v11[0])
    {
      int v7 = 0;
      double v6 = 0.0;
      do
        double v6 = v6 + _ZNK4geom20interpolating_splineIDv3_dE20evaluate_span_lengthEj(a1, v7++);
      while (v4 != v7);
      goto LABEL_9;
    }
  }
  else if (v11[0])
  {
    double v6 = *(double *)(v5 + 8 * (v11[0] - 1));
    goto LABEL_9;
  }
  double v6 = 0.0;
LABEL_9:
  if (*(unsigned char *)(a1 + 66))
  {
    unsigned int v8 = *(unsigned __int16 *)(a1 + 64);
    if (v8 == v4) {
      double v9 = *(double *)(a1 + 56);
    }
    else {
      double v9 = *(double *)(a1 + 48)
    }
         + (double)v4 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v8);
  }
  else
  {
    double v9 = *(double *)(*(void *)(a1 + 24) + 8 * v4);
  }
  return v6 + _ZNK4geom20interpolating_splineIDv3_dE24evaluate_length_betweeenEdd((void *)a1, v9, a2);
}

void _ZNK4geom19interpolating_curveIDv3_dE10span_knotsEtRdS3_(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  uint64_t v9 = *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
  unsigned __int16 v10 = a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9);
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(_WORD *)(*(void *)a1 + 2 * a2)) {
      double v11 = *(double *)(*(void *)(a1 + 48) + 8 * (v9 - 1));
    }
    else {
      double v11 = 0.0;
    }
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v19 = v18 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    if (*(unsigned char *)(v19 + 66))
    {
      uint64_t v20 = v18 + 96 * v9;
      double v21 = *(double *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 64);
      double v22 = (*(double *)(v20 + 56) - v21) / (double)*(unint64_t *)&a7;
      double v23 = v21 + (double)v10 * v22;
      double v24 = v22 + v23;
    }
    else
    {
      float64x2_t v25 = (double *)(*(void *)(v18 + 96 * v9 + 24) + 8 * v10);
      double v23 = *v25;
      double v24 = v25[1];
    }
    *a3 = v11 + _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v19, v23);
    double v17 = v11
        + _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(*(void *)(a1 + 72) + 96 * v9, v24);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 72);
    if (*(unsigned char *)(v12 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 66))
    {
      uint64_t v13 = v12 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
      double v14 = *(double *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 64);
      double v15 = (*(double *)(v13 + 56) - v14) / (double)*(unint64_t *)&a7;
      double v16 = v14 + (double)(unsigned __int16)(a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9)) * v15;
      *a3 = v16;
      double v17 = v15 + v16;
    }
    else
    {
      uint64_t v26 = *(void *)(v12 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 24) + 8 * v10;
      *a3 = *(double *)v26;
      double v17 = *(double *)(v26 + 8);
    }
  }
  *a4 = v17;
}

uint64_t _ZNK4geom19interpolating_curveIDv3_dE33calculate_monomial_basis_for_spanEtPS1_(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a1[9];
  uint64_t v4 = 96 * *(unsigned __int16 *)(*a1 + 2 * a2);
  int v5 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  uint64_t v6 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  int v7 = (_OWORD *)(*(void *)(v3 + v4) + 32 * v6);
  long long v8 = v7[1];
  *(_OWORD *)a3 = *v7;
  *(_OWORD *)(a3 + 16) = v8;
  uint64_t v9 = *(void *)(v3 + v4);
  uint64_t v10 = (v5 + 1);
  double v11 = (float64x2_t *)(v9 + 32 * v10);
  uint64_t v12 = (float64x2_t *)(v9 + 32 * v6);
  __asm { FMOV            V2.2D, #3.0 }
  float64x2_t v18 = vmulq_f64(vsubq_f64(v11[1], v12[1]), _Q2);
  *(float64x2_t *)(a3 + 32) = vmulq_f64(vsubq_f64(*v11, *v12), _Q2);
  *(float64x2_t *)(a3 + 48) = v18;
  uint64_t v19 = *(void *)(v3 + v4);
  uint64_t v20 = (float64x2_t *)(v19 + 32 * v6);
  float64x2_t v22 = *v20;
  float64x2_t v21 = v20[1];
  double v23 = (float64x2_t *)(v19 + 32 * v10);
  __asm { FMOV            V5.2D, #-2.0 }
  float64x2_t v25 = vmlaq_f64(v22, _Q5, *v23);
  float64x2_t v26 = vmlaq_f64(v21, _Q5, v23[1]);
  uint64_t v27 = (v5 + 2);
  uint64_t v28 = (float64x2_t *)(v19 + 32 * v27);
  float64x2_t v29 = vmulq_f64(vaddq_f64(v25, *v28), _Q2);
  float64x2_t v30 = vmulq_f64(vaddq_f64(v26, v28[1]), _Q2);
  *(float64x2_t *)(a3 + 64) = v29;
  *(float64x2_t *)(a3 + 80) = v30;
  uint64_t v31 = *(void *)(v3 + v4);
  float64x2_t v32 = (float64x2_t *)(v31 + 32 * (v5 + 3));
  float64x2_t v34 = *v32;
  float64x2_t v33 = v32[1];
  float64x2_t v35 = (float64x2_t *)(v31 + 32 * v10);
  float64x2_t v36 = *v35;
  float64x2_t v37 = v35[1];
  double v38 = (float64x2_t *)(v31 + 32 * v27);
  int v39 = (float64x2_t *)(v31 + 32 * v6);
  float64x2_t v40 = vsubq_f64(vmlaq_f64(v33, _Q2, vsubq_f64(v37, v38[1])), v39[1]);
  float64x2_t v41 = vsubq_f64(vmlaq_f64(v34, _Q2, vsubq_f64(v36, *v38)), *v39);
  *(float64x2_t *)(a3 + 96) = v41;
  *(float64x2_t *)(a3 + 112) = v40;
  if (sqrt(vmulq_f64(v30, v30).f64[0] + vaddvq_f64(vmulq_f64(v29, v29))) <= 0.000001
    && (*(void *)&v41.f64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0],
        sqrt(vmulq_f64(v40, v40).f64[0] + vaddvq_f64(vmulq_f64(v41, v41))) <= 0.000001))
  {
    return 2;
  }
  else
  {
    return 4;
  }
}

uint64_t _ZNK4geom19interpolating_curveIDv3_dE31calculate_bezier_basis_for_spanEtPS1_(void *a1, unsigned int a2, uint64_t a3)
{
  int v4 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  uint64_t v5 = *(void *)(a1[9] + 96 * *(unsigned __int16 *)(*a1 + 2 * a2));
  uint64_t v6 = (float64x2_t *)(v5
                     + 32
                     * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  float64x2_t v7 = *v6;
  float64x2_t v8 = v6[1];
  uint64_t v9 = (float64x2_t *)(v5 + 32 * (v4 + 1));
  float64x2_t v11 = *v9;
  float64x2_t v10 = v9[1];
  __asm { FMOV            V16.2D, #3.0 }
  float64x2_t v17 = vmulq_f64(vsubq_f64(v10, v8), _Q16);
  float64x2_t v18 = vmulq_f64(vsubq_f64(*v9, v7), _Q16);
  __asm { FMOV            V4.2D, #-2.0 }
  float64x2_t v20 = vmlaq_f64(v7, _Q4, *v9);
  float64x2_t v21 = (float64x2_t *)(v5 + 32 * (v4 + 2));
  float64x2_t v22 = v21[1];
  float64x2_t v23 = vmulq_f64(vaddq_f64(vmlaq_f64(v8, _Q4, v10), v22), _Q16);
  float64x2_t v24 = vmulq_f64(vaddq_f64(v20, *v21), _Q16);
  float64x2_t v25 = (float64x2_t *)(v5 + 32 * (v4 + 3));
  float64x2_t v26 = vmlaq_f64(*v25, _Q16, vsubq_f64(v11, *v21));
  float64x2_t v27 = vsubq_f64(vmlaq_f64(v25[1], _Q16, vsubq_f64(v10, v22)), v8);
  float64x2_t v28 = vsubq_f64(v26, v7);
  if (sqrt(vmulq_f64(v23, v23).f64[0] + vaddvq_f64(vmulq_f64(v24, v24))) <= 0.000001
    && (v29.f64[0] = v28.f64[0],
        *(void *)&v29.f64[1] = vextq_s8((int8x16_t)v28, (int8x16_t)v28, 8uLL).u64[0],
        sqrt(vmulq_f64(v27, v27).f64[0] + vaddvq_f64(vmulq_f64(v29, v29))) <= 0.000001))
  {
    *(float64x2_t *)a3 = v7;
    *(float64x2_t *)(a3 + 16) = v8;
    *(float64x2_t *)(a3 + 32) = vaddq_f64(v7, v18);
    *(float64x2_t *)(a3 + 48) = vaddq_f64(v8, v17);
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    return 2;
  }
  else
  {
    v30.f64[0] = v18.f64[0];
    *(void *)&v30.f64[1] = vextq_s8((int8x16_t)v18, (int8x16_t)v18, 8uLL).u64[0];
    v31.f64[0] = v7.f64[0];
    *(void *)&v31.f64[1] = vextq_s8((int8x16_t)v7, (int8x16_t)v7, 8uLL).u64[0];
    float64x2_t v32 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
    float64x2_t v33 = vmlaq_f64(v31, v32, v30);
    v3.f64[0] = 0.333333333;
    *(float64x2_t *)(a3 + 32) = v33;
    *(float64x2_t *)(a3 + 48) = vmlaq_f64(v8, v3, v17);
    v33.f64[0] = 0.666666667;
    *(float64x2_t *)a3 = v7;
    *(float64x2_t *)(a3 + 16) = v8;
    float64x2_t v34 = vmlaq_f64(v31, (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL), v30);
    v30.f64[0] = v24.f64[0];
    *(void *)&v30.f64[1] = vextq_s8((int8x16_t)v24, (int8x16_t)v24, 8uLL).u64[0];
    *(float64x2_t *)(a3 + 64) = vmlaq_f64(v34, v32, v30);
    *(float64x2_t *)(a3 + 80) = vmlaq_f64(vmlaq_f64(v8, v33, v17), v3, v23);
    *(float64x2_t *)(a3 + 96) = vaddq_f64(vaddq_f64(vaddq_f64(v7, v18), v24), v28);
    *(float64x2_t *)(a3 + 112) = vaddq_f64(vaddq_f64(vaddq_f64(v8, v17), v23), v27);
    return 4;
  }
}

uint64_t _ZN4geom19interpolating_curveIDv3_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(void *a1, float64x2_t **a2)
{
  memset(v26, 0, sizeof(v26));
  memset(v24, 0, 48);
  switch(LODWORD((*a2)->f64[0]))
  {
    case 0:
      _ZN4geom19interpolating_curveIDv3_dE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      _ZN4geom19interpolating_curveIDv3_dE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      _ZN4geom19interpolating_curveIDv3_dE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      _ZN4geom19interpolating_curveIDv3_dE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<double>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  uint64_t v3 = v25;
  std::vector<double>::resize((uint64_t)v26, v25);
  if (v3)
  {
    uint64_t v4 = 0;
    double v5 = 0.0;
    do
    {
      double v5 = v5 + _ZNK4geom20interpolating_splineIDv3_dE20evaluate_span_lengthEj((uint64_t)v24, v4);
      *(double *)(v26[0] + 8 * v4++) = v5;
    }
    while (v3 != v4);
  }
  double v6 = _ZNK4geom20interpolating_splineIDv3_dE21evaluate_total_lengthEv((uint64_t)v24);
  uint64_t v7 = a1[10] - a1[9];
  if (v7) {
    double v8 = *(double *)(a1[6] + 0x5555555555555558 * (v7 >> 5) - 8);
  }
  else {
    double v8 = 0.0;
  }
  double v9 = v6 + v8;
  unint64_t v10 = a1[8];
  float64x2_t v11 = (double *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = (double *)a1[6];
    uint64_t v14 = v11 - v13;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      abort();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      float64x2_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 8), v17);
      uint64_t v13 = (double *)a1[6];
      float64x2_t v11 = (double *)a1[7];
    }
    else
    {
      float64x2_t v18 = 0;
    }
    uint64_t v19 = (double *)&v18[8 * v14];
    float64x2_t v20 = &v18[8 * v17];
    *uint64_t v19 = v9;
    uint64_t v12 = v19 + 1;
    while (v11 != v13)
    {
      uint64_t v21 = *((void *)v11-- - 1);
      *((void *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    double *v11 = v9;
    uint64_t v12 = v11 + 1;
  }
  a1[7] = v12;
  _ZNSt3__16vectorIN4geom20interpolating_splineIDv3_dEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v24);
}

void _ZN4geom19interpolating_curveIDv3_dE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(unsigned char *)(a2 + 66)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v5 + 1);
    }
  }
  __p = 0;
  float64x2_t v33 = 0;
  uint64_t v34 = 0;
  std::vector<double>::resize((uint64_t)&__p, v5 + 1);
  uint64_t v7 = *(void *)a1;
  double v8 = (char *)__p;
  *(void *)__p = *(void *)(*(void *)a1 + 8);
  if (v5)
  {
    uint64_t v9 = 0;
    LOWORD(v10) = 0;
    float64x2_t v11 = (double *)(v8 + 8);
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      unint64_t v17 = (float64x2_t *)(*(void *)a1 + v9);
      v6.f64[0] = v17[7].f64[1];
      double *v11 = v6.f64[0];
      v6.f64[0] = v6.f64[0] - *(v11 - 1);
      float64x2_t v18 = v17[1];
      float64x2_t v19 = v17[2];
      float64x2_t v20 = vmulq_n_f64(vsubq_f64(v17[8], v18), v6.f64[0]);
      float64x2_t v21 = vmulq_f64(v6, vsubq_f64(v17[9], v19));
      float64x2_t v22 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)v10);
      *float64x2_t v22 = v18;
      v22[1] = v19;
      LOWORD(v22) = v10 + 2;
      float64x2_t v23 = vdivq_f64(v21, _Q0);
      float64x2_t v24 = vdivq_f64(v20, _Q0);
      float64x2_t v25 = vaddq_f64(v17[2], v23);
      uint64_t v26 = *(void *)a2 + 32 * (unsigned __int16)(v10 + 1);
      *(float64x2_t *)uint64_t v26 = vaddq_f64(v17[1], v24);
      *(float64x2_t *)(v26 + 16) = v25;
      LOWORD(v10) = v10 + 3;
      float64x2_t v27 = vsubq_f64(v17[8], v24);
      float64x2_t v6 = vsubq_f64(v17[9], v23);
      float64x2_t v28 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)v22);
      *float64x2_t v28 = v27;
      v28[1] = v6;
      v9 += 112;
      ++v11;
    }
    while (112 * v5 != v9);
    uint64_t v7 = *(void *)a1;
    uint64_t v10 = (unsigned __int16)v10;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v29 = v7 + 112 * *((void *)a1 + 1);
  long long v30 = *(_OWORD *)(v29 - 80);
  float64x2_t v31 = (_OWORD *)(*(void *)a2 + 32 * v10);
  *float64x2_t v31 = *(_OWORD *)(v29 - 96);
  v31[1] = v30;
  *(unsigned char *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v8, (uint64_t)v33, (v33 - v8) >> 3);
    double v8 = (char *)__p;
  }
  *(void *)(a2 + 48) = *(void *)v8;
  *(void *)(a2 + 56) = *((void *)v33 - 1);
  float64x2_t v33 = v8;
  operator delete(v8);
}

void _ZN4geom19interpolating_curveIDv3_dE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(float64x2_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  float64x2_t v137 = 0;
  float64x2_t v138 = 0;
  uint64_t v139 = 0;
  float64x2_t v134 = 0;
  float64x2_t v135 = 0;
  uint64_t v136 = 0;
  __int16 v4 = a1[1];
  __int16 v5 = (_WORD)v4 - 1;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v137, (unsigned __int16)((_WORD)v4 + 2));
  std::vector<double>::resize((uint64_t)&v134, (unsigned __int16)((_WORD)v4 + 2));
  __asm { FMOV            V0.2D, #2.0 }
  float64x2_t v11 = vmlaq_f64(vnegq_f64((*a1)[9]), _Q0, (*a1)[2]);
  uint64_t v12 = (char *)v137;
  *(float64x2_t *)float64x2_t v137 = vmlaq_f64(vnegq_f64((*a1)[8]), _Q0, (*a1)[1]);
  *((float64x2_t *)v12 + 1) = v11;
  uint64_t v13 = (double *)v134;
  *(void *)float64x2_t v134 = 0;
  uint64_t v14 = *a1;
  float64x2_t v15 = vsubq_f64((*a1)[8], (*a1)[1]);
  float64x2_t v16 = vsubq_f64((*a1)[9], (*a1)[2]);
  v13[1] = sqrt(sqrt(vmulq_f64(v16, v16).f64[0] + vaddvq_f64(vmulq_f64(v15, v15))));
  if ((_WORD)v4 == 1)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = (unsigned __int16)((_WORD)v4 - 1);
    float64x2_t v19 = v13 + 2;
    float64x2_t v20 = v12 + 32;
    do
    {
      float64x2_t v21 = &v14[v17];
      float64x2_t v22 = v21[2];
      *float64x2_t v20 = v21[1];
      v20[1] = v22;
      v20 += 2;
      uint64_t v14 = *a1;
      float64x2_t v23 = &(*a1)[v17];
      float64x2_t v24 = vsubq_f64(v23[8], v23[1]);
      float64x2_t v25 = vsubq_f64(v23[9], v23[2]);
      *float64x2_t v19 = *(v19 - 1) + sqrt(sqrt(vmulq_f64(v25, v25).f64[0] + vaddvq_f64(vmulq_f64(v24, v24))));
      ++v19;
      v17 += 7;
    }
    while (7 * (unsigned __int16)((_WORD)v4 - 1) != v17);
  }
  uint64_t v26 = &v14[7 * v18];
  float64x2_t v27 = v26[1];
  float64x2_t v28 = v26[2];
  uint64_t v29 = (unsigned __int16)((_WORD)v4 + 2) - 2;
  long long v30 = (float64x2_t *)&v12[32 * v29];
  *long long v30 = v27;
  v30[1] = v28;
  float64x2_t v31 = (float64x2_t *)&v12[32 * (unsigned __int16)((_WORD)v4 + 2)];
  float64x2_t v32 = vmlaq_f64(vnegq_f64(v31[-5]), _Q0, v28);
  uint64_t v33 = (unsigned __int16)((_WORD)v4 + 2) - 1;
  uint64_t v34 = (float64x2_t *)&v12[32 * v33];
  *uint64_t v34 = vmlaq_f64(vnegq_f64(v31[-6]), _Q0, v27);
  v34[1] = v32;
  float64x2_t v35 = &(*a1)[7 * (unsigned __int16)((_WORD)v4 - 2)];
  float64x2_t v36 = vsubq_f64(v35[8], v35[1]);
  float64x2_t v37 = vsubq_f64(v35[9], v35[2]);
  v13[v33] = v13[v29] + sqrt(sqrt(vmulq_f64(v37, v37).f64[0] + vaddvq_f64(vmulq_f64(v36, v36))));
  if ((_WORD)v4 == 1)
  {
    uint64_t v49 = 0;
    *(void *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 64) = 0;
    if (!*(unsigned char *)(a2 + 66))
    {
      uint64_t v49 = 0;
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v18 + 1);
    }
    uint64_t v48 = 0;
    LOWORD(v49) = 0;
    float64x2_t v50 = (float64_t *)v134;
    float64x2_t v51 = (char *)v137;
    __asm { FMOV            V0.2D, #3.0 }
    float64x2_t v129 = _Q0;
    do
    {
      uint64_t v53 = (v48 + 2);
      v42.f64[0] = v50[v48];
      uint64_t v54 = (v48 + 3);
      float64x2_t v55 = (float64x2_t *)&v51[32 * v48];
      uint64_t v56 = v48 + 1;
      double v57 = v50[(v48 + 1)];
      v44.f64[0] = v50[v53];
      float64x2_t v58 = (float64x2_t *)&v51[32 * (v48 + 1)];
      uint64_t v59 = (float64x2_t *)&v51[32 * v53];
      double v60 = v50[v54];
      v38.f64[0] = v44.f64[0] - v57;
      v43.f64[0] = 1.0 / (v57 - v42.f64[0]);
      v39.f64[0] = 1.0 / (v44.f64[0] - v57);
      v46.f64[0] = v60 - v57;
      v40.f64[0] = v60 - v44.f64[0];
      v41.f64[0] = 1.0 / (v60 - v44.f64[0]);
      v47.f64[0] = v42.f64[0] - v57;
      v45.f64[0] = v57 - v57;
      double v61 = (float64x2_t *)&v51[32 * v54];
      float64x2_t v62 = v55[1];
      float64x2_t v63 = v58[1];
      float64x2_t v64 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v42.f64[0] - v57), 0));
      float64x2_t v65 = vnegq_f64(v47);
      float64x2_t v66 = vmulq_f64(v43, vmlaq_f64(vmulq_f64(v63, v65), v62, v45));
      float64x2_t v67 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v58, v64), *v55, v57 - v57), v43.f64[0]);
      float64x2_t v68 = (float64x2_t)vdupq_lane_s64(COERCE__INT64(v44.f64[0] - v57), 0);
      float64x2_t v69 = v59[1];
      float64x2_t v70 = vnegq_f64(v45);
      float64x2_t v71 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v57 - v57), 0));
      float64x2_t v72 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v59, v71), *v58, v44.f64[0] - v57), v39.f64[0]);
      float64x2_t v73 = vmulq_f64(v39, vmlaq_f64(vmulq_f64(v69, v70), v63, v38));
      float64x2_t v74 = vmlaq_n_f64(vmulq_f64(v72, v64), v67, v44.f64[0] - v57);
      float64x2_t v75 = vmlaq_f64(vmulq_f64(v73, v65), v66, v38);
      float64x2_t v130 = vmulq_f64(v43, vsubq_f64(v63, v62));
      float64x2_t v76 = vmulq_n_f64(vsubq_f64(*v58, *v55), v43.f64[0]);
      float64x2_t v77 = vmulq_n_f64(vsubq_f64(*v59, *v58), v39.f64[0]);
      float64x2_t v78 = vmulq_f64(v39, vsubq_f64(v69, v63));
      float64x2_t v79 = vmlsq_f64(vmlaq_f64(vsubq_f64(v73, v66), v130, v38), v78, v47);
      float64x2_t v80 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v72, v67), v76, v44.f64[0] - v57), v77, v42.f64[0] - v57, 0);
      float64x2_t v81 = v61[1];
      float64x2_t v82 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v61, vnegq_f64(v68)), *v59, v46.f64[0]), v41.f64[0]);
      float64x2_t v83 = vmlaq_n_f64(vmulq_f64(v82, v71), v72, v46.f64[0]);
      float64x2_t v84 = vsubq_f64(v82, v72);
      float64x2_t v85 = vmulq_f64(v41, vmlaq_f64(vmulq_f64(v81, vnegq_f64(v38)), v69, v46));
      float64x2_t v86 = vmlaq_f64(vmulq_f64(v85, v70), v73, v46);
      v68.f64[0] = 1.0 / (v44.f64[0] - v42.f64[0]);
      float64x2_t v87 = vmlaq_f64(vsubq_f64(v85, v73), v78, v46);
      float64x2_t v88 = vmlaq_n_f64(v84, v77, v46.f64[0]);
      v46.f64[0] = 1.0 / v46.f64[0];
      float64x2_t v89 = vmlaq_f64(vsubq_f64(vmulq_f64(v46, v86), vmulq_f64(v68, v75)), vmulq_f64(v68, v79), v38);
      float64x2_t v90 = vmlaq_n_f64(vsubq_f64(vmulq_n_f64(v83, v46.f64[0]), vmulq_n_f64(v74, v68.f64[0])), vmulq_n_f64(v80, v68.f64[0]), v44.f64[0] - v57);
      float64x2_t v91 = vmulq_f64(v41, vsubq_f64(v81, v69));
      float64x2_t v92 = vmulq_n_f64(vsubq_f64(*v61, *v59), v41.f64[0]);
      float64x2_t v47 = vmlsq_lane_f64(v90, vmulq_n_f64(vmlsq_lane_f64(v88, v92, v57 - v57, 0), v46.f64[0]), v57 - v57, 0);
      float64x2_t v93 = vmlsq_f64(v89, vmulq_f64(v46, vmlsq_f64(v87, v91, v45)), v45);
      v45.f64[0] = v42.f64[0] - v44.f64[0];
      v42.f64[0] = v57 - v44.f64[0];
      v44.f64[0] = v44.f64[0] - v44.f64[0];
      float64x2_t v94 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v45.f64[0], 0));
      float64x2_t v95 = vnegq_f64(v45);
      float64x2_t v96 = vmulq_f64(v43, vmlaq_f64(vmulq_f64(v63, v95), v62, v42));
      float64x2_t v97 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v58, v94), *v55, v42.f64[0]), v43.f64[0]);
      float64x2_t v98 = vnegq_f64(v42);
      float64x2_t v99 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v42.f64[0], 0));
      float64x2_t v100 = vmlaq_f64(vmulq_f64(v81, vnegq_f64(v44)), v69, v40);
      float64x2_t v101 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v59, v99), *v58, v44.f64[0]), v39.f64[0]);
      float64x2_t v102 = vmulq_f64(v39, vmlaq_f64(vmulq_f64(v69, v98), v63, v44));
      float64x2_t v103 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v61, vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v44.f64[0], 0))), *v59, v40.f64[0]), v41.f64[0]);
      float64x2_t v104 = vmulq_f64(v41, v100);
      float64x2_t v105 = vmlaq_n_f64(vsubq_f64(v101, v97), v76, v44.f64[0]);
      float64x2_t v106 = vmlsq_f64(vmlaq_f64(vsubq_f64(v102, v96), v130, v44), v78, v45);
      float64x2_t v107 = vmlsq_lane_f64(v105, v77, v45.f64[0], 0);
      float64x2_t v45 = vmlaq_f64(vmulq_f64(v104, v98), v102, v40);
      float64x2_t v108 = vmlaq_n_f64(vsubq_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v103, v99), v101, v40.f64[0]), v46.f64[0]), vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v101, v94), v97, v44.f64[0]), v68.f64[0])), vmulq_n_f64(v107, v68.f64[0]), v44.f64[0]);
      float64x2_t v43 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v103, v101), v77, v40.f64[0]), v92, v42.f64[0], 0);
      float64x2_t v109 = vmlsq_f64(vmlaq_f64(vsubq_f64(vmulq_f64(v46, v45), vmulq_f64(v68, vmlaq_f64(vmulq_f64(v102, v95), v96, v44))), vmulq_f64(v68, v106), v44), vmulq_f64(v46, vmlsq_f64(vmlaq_f64(vsubq_f64(v104, v102), v78, v40), v91, v42)), v42);
      float64x2_t v41 = vmulq_n_f64(v47, v39.f64[0]);
      float64x2_t v40 = vmulq_f64(v38, vmulq_f64(v39, v93));
      float64x2_t v110 = vmulq_n_f64(vmulq_n_f64(vmlsq_lane_f64(v108, vmulq_n_f64(v43, v46.f64[0]), v42.f64[0], 0), v39.f64[0]), v38.f64[0]);
      float64x2_t v111 = vmulq_f64(v38, vmulq_f64(v39, v109));
      uint64_t v112 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)v49);
      *uint64_t v112 = *v58;
      v112[1] = v63;
      float64x2_t v113 = vaddq_f64(*v58, vdivq_f64(vmulq_n_f64(v41, v38.f64[0]), v129));
      float64x2_t v39 = vdivq_f64(v40, v129);
      float64x2_t v114 = vaddq_f64(v58[1], v39);
      char v115 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)(v49 + 1));
      *char v115 = v113;
      v115[1] = v114;
      float64x2_t v116 = vsubq_f64(*v59, vdivq_f64(v110, v129));
      float64x2_t v38 = v59[1];
      uint64_t v117 = *(void *)a2 + 32 * (unsigned __int16)(v49 + 2);
      *(float64x2_t *)uint64_t v117 = v116;
      *(float64x2_t *)(v117 + 16) = vsubq_f64(v38, vdivq_f64(v111, v129));
      LOWORD(v49) = v49 + 3;
      uint64_t v48 = v56;
    }
    while (v18 != v56);
    uint64_t v49 = (unsigned __int16)v49;
  }
  uint64_t v118 = (uint64_t)&(*a1)[7 * v18];
  long long v119 = *(_OWORD *)(v118 + 32);
  char v120 = (_OWORD *)(*(void *)a2 + 32 * v49);
  _OWORD *v120 = *(_OWORD *)(v118 + 16);
  v120[1] = v119;
  unint64_t v121 = (unint64_t)a1[1];
  float64x2_t v132 = 0;
  uint64_t v133 = 0;
  __p = 0;
  if (v121)
  {
    std::vector<double>::__vallocate[abi:nn180100](&__p, v121);
    float64x2_t v122 = (char *)v132;
    bzero(v132, 8 * v121);
    float64x2_t v123 = &v122[8 * v121];
    float64x2_t v132 = v123;
    float64x2_t v124 = a1[1];
    float64x2_t v125 = (char *)__p;
    if (v124)
    {
      float64x2_t v126 = 0;
      float64x2_t v127 = (uint64_t *)&(*a1)->f64[1];
      do
      {
        uint64_t v128 = *v127;
        v127 += 14;
        *(void *)&v125[8 * (void)v126] = v128;
        float64x2_t v126 = (float64x2_t *)((char *)v126 + 1);
      }
      while (v124 != v126);
    }
  }
  else
  {
    float64x2_t v125 = 0;
    float64x2_t v123 = 0;
  }
  *(unsigned char *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v125, (uint64_t)v123, (v123 - v125) >> 3);
    float64x2_t v125 = (char *)__p;
    float64x2_t v123 = (char *)v132;
  }
  *(void *)(a2 + 48) = *(void *)v125;
  *(void *)(a2 + 56) = *((void *)v123 - 1);
  float64x2_t v132 = v125;
  operator delete(v125);
  if (v134)
  {
    float64x2_t v135 = v134;
    operator delete(v134);
  }
  if (v137)
  {
    float64x2_t v138 = v137;
    operator delete(v137);
  }
}

void _ZN4geom19interpolating_curveIDv3_dE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(void *a1@<X1>, uint64_t a2@<X8>)
{
  float64x2_t v132 = 0;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  float64x2_t v129 = 0;
  float64x2_t v130 = 0;
  uint64_t v131 = 0;
  float64x2_t v126 = 0;
  float64x2_t v127 = 0;
  uint64_t v128 = 0;
  __p = 0;
  float64x2_t v124 = 0;
  uint64_t v125 = 0;
  unint64_t v4 = a1[1];
  unint64_t v121 = 0;
  uint64_t v122 = 0;
  char v120 = 0;
  if (v4)
  {
    std::vector<double>::__vallocate[abi:nn180100](&v120, v4);
    __int16 v5 = v121;
    bzero(v121, 8 * v4);
    unint64_t v4 = (unint64_t)v5 + 8 * v4;
    uint64_t v6 = a1[1];
    if (v6)
    {
      uint64_t v7 = 0;
      double v8 = v120;
      uint64_t v9 = (uint64_t *)(*a1 + 8);
      do
      {
        uint64_t v10 = *v9;
        v9 += 14;
        *(void *)&v8[8 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  float64x2_t v11 = v120;
  unint64_t v12 = (unsigned __int16)v6;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v132, (unsigned __int16)v6);
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v129, v12);
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v126, v12);
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, v12);
  unint64_t v15 = v12 - 1;
  float64x2_t v16 = v132;
  uint64_t v17 = (char *)&v132[2 * v12 - 2];
  *(_OWORD *)uint64_t v17 = 0u;
  *((_OWORD *)v17 + 1) = 0u;
  *float64x2_t v16 = 0u;
  v16[1] = 0u;
  uint64_t v18 = (float64x2_t *)__p;
  float64x2_t v19 = (float64x2_t *)((char *)__p + 32 * v12 - 32);
  __asm { FMOV            V1.2D, #1.0 }
  *float64x2_t v19 = _Q1;
  v19[1] = _Q1;
  *uint64_t v18 = _Q1;
  v18[1] = _Q1;
  float64x2_t v25 = (float64x2_t *)v129;
  uint64_t v26 = (char *)v129 + 32 * v12 - 32;
  *uint64_t v26 = 0u;
  v26[1] = 0u;
  *float64x2_t v25 = 0u;
  v25[1] = 0u;
  float64x2_t v27 = (float64x2_t *)v126;
  float64x2_t v28 = (char *)v126 + 32 * v12 - 32;
  *float64x2_t v28 = 0u;
  v28[1] = 0u;
  *float64x2_t v27 = 0u;
  v27[1] = 0u;
  if (v12 - 1 >= 2)
  {
    uint64_t v29 = 0;
    uint64_t v30 = 0;
    float64x2_t v31 = (float64_t *)(v11 + 8);
    do
    {
      _Q1.f64[0] = *v31;
      v13.f64[0] = *v31 - *(v31 - 1);
      double v32 = v31[1];
      ++v31;
      _Q1.f64[0] = v32 - _Q1.f64[0];
      v14.f64[0] = v13.f64[0] + _Q1.f64[0] + v13.f64[0] + _Q1.f64[0];
      uint64_t v33 = (uint64_t)&v16[2 * v30 + 2];
      *(int64x2_t *)uint64_t v33 = vdupq_lane_s64(*(uint64_t *)&v13.f64[0], 0);
      *(float64x2_t *)(v33 + 16) = v13;
      uint64_t v34 = (uint64_t)&v18[2 * v30 + 2];
      uint64_t v35 = (uint64_t)&v25[2 * v30 + 2];
      *(int64x2_t *)uint64_t v34 = vdupq_lane_s64(*(uint64_t *)&v14.f64[0], 0);
      *(float64x2_t *)(v34 + 16) = v14;
      *(int64x2_t *)uint64_t v35 = vdupq_lane_s64(*(uint64_t *)&_Q1.f64[0], 0);
      *(float64x2_t *)(v35 + 16) = _Q1;
      _Q1.f64[0] = 3.0 / _Q1.f64[0];
      float64x2_t v36 = (float64x2_t *)(*a1 + v29);
      v13.f64[0] = 3.0 / v13.f64[0];
      float64x2_t v37 = v36[8];
      float64x2_t v14 = vsubq_f64(v36[15], v37);
      float64x2_t v38 = vmlaq_n_f64(vmulq_f64(vsubq_f64(v37, v36[1]), vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13.f64[0], 0))), v14, _Q1.f64[0]);
      float64x2_t v13 = vmlaq_f64(vmulq_f64(vsubq_f64(v36[9], v36[2]), vnegq_f64(v13)), vsubq_f64(v36[16], v36[9]), _Q1);
      float64x2_t v39 = &v27[2 * v30 + 2];
      *float64x2_t v39 = v38;
      v39[1] = v13;
      ++v30;
      v29 += 112;
    }
    while (v12 - 2 != v30);
  }
  int64_t v40 = v124 - (unsigned char *)v18;
  unint64_t v41 = ((unint64_t)(v124 - (unsigned char *)v18) >> 5) - 1;
  float64x2_t v42 = vdivq_f64(v25[1], v18[1]);
  *float64x2_t v25 = vdivq_f64(*v25, *v18);
  v25[1] = v42;
  float64x2_t v43 = vdivq_f64(v27[1], v18[1]);
  *float64x2_t v27 = vdivq_f64(*v27, *v18);
  v27[1] = v43;
  if ((int)v41 > 1)
  {
    unint64_t v44 = v41 - 1;
    float64x2_t v45 = v18 + 2;
    float64x2_t v46 = v16 + 2;
    float64x2_t v47 = v27 + 2;
    uint64_t v48 = v25 + 2;
    do
    {
      float64x2_t v50 = v48[-2];
      float64x2_t v49 = v48[-1];
      float64x2_t v51 = vdivq_f64(v48[1], vmlsq_f64(v45[1], v49, v46[1]));
      float64x2_t *v48 = vdivq_f64(*v48, vmlsq_f64(*v45, v50, *v46));
      v48[1] = v51;
      v48 += 2;
      float64x2_t v53 = *v46;
      float64x2_t v52 = v46[1];
      v46 += 2;
      float64x2_t v55 = *v45;
      float64x2_t v54 = v45[1];
      v45 += 2;
      float64x2_t v56 = vdivq_f64(vmlsq_f64(v47[1], v47[-1], v52), vmlsq_f64(v54, v49, v52));
      *float64x2_t v47 = vdivq_f64(vmlsq_f64(*v47, v47[-2], v53), vmlsq_f64(v55, v50, v53));
      v47[1] = v56;
      v47 += 2;
      --v44;
    }
    while (v44);
  }
  double v57 = &v27[2 * (int)v41];
  float64x2_t v58 = &v16[2 * (int)v41];
  float64x2_t v60 = *v58;
  float64x2_t v59 = v58[1];
  uint64_t v61 = (v40 << 27) - 0x200000000;
  float64x2_t v62 = (float64x2_t *)((char *)v27 + (v61 >> 27));
  float64x2_t v63 = vmlsq_f64(*v57, *v62, v60);
  float64x2_t v64 = vmlsq_f64(v57[1], v62[1], v59);
  float64x2_t v65 = &v18[2 * (int)v41];
  float64x2_t v66 = (float64x2_t *)((char *)v25 + (v61 >> 27));
  float64x2_t v67 = vdivq_f64(v64, vmlsq_f64(v65[1], v66[1], v59));
  float64x2_t *v57 = vdivq_f64(v63, vmlsq_f64(*v65, *v66, v60));
  v57[1] = v67;
  if ((int)v41 >= 1)
  {
    do
    {
      float64x2_t v68 = &v27[2 * v41];
      BOOL v69 = v41-- > 1;
      float64x2_t v70 = &v25[2 * v41];
      float64x2_t v59 = *v68;
      float64x2_t v60 = v68[1];
      float64x2_t v71 = &v27[2 * v41];
      float64x2_t v72 = vmlsq_f64(v71[1], v60, v70[1]);
      *float64x2_t v71 = vmlsq_f64(*v71, v59, *v70);
      v71[1] = v72;
    }
    while (v69);
  }
  __asm { FMOV            V20.2D, #2.0 }
  if (v12 != 1)
  {
    uint64_t v74 = 0;
    float64x2_t v75 = (double *)(v11 + 8);
    float64x2_t v76 = v27 + 2;
    do
    {
      v59.f64[0] = *v75 - *(v75 - 1);
      v60.f64[0] = 1.0 / v59.f64[0];
      float64x2_t v77 = (float64x2_t *)(*a1 + v74);
      float64x2_t v78 = v77[1];
      float64x2_t v79 = vsubq_f64(v77[8], v78);
      v78.f64[0] = v59.f64[0] / 3.0;
      float64x2_t v80 = vmlaq_f64(vmulq_f64(vmlaq_f64(v76[1], _Q20, v76[-1]), vnegq_f64(v78)), vsubq_f64(v77[9], v77[2]), v60);
      *float64x2_t v25 = vmlaq_n_f64(vmulq_f64(vmlaq_f64(*v76, _Q20, v76[-2]), vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v59.f64[0] / 3.0), 0))), v79, 1.0 / v59.f64[0]);
      v25[1] = v80;
      v25 += 2;
      v59.f64[0] = 1.0 / (v59.f64[0] * 3.0);
      float64x2_t v60 = vmulq_n_f64(vsubq_f64(*v76, v76[-2]), v59.f64[0]);
      float64x2_t v59 = vmulq_f64(v59, vsubq_f64(v76[1], v76[-1]));
      v74 += 112;
      *uint64_t v18 = v60;
      v18[1] = v59;
      v18 += 2;
      ++v75;
      v76 += 2;
      --v15;
    }
    while (v15);
  }
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  __int16 v81 = *((_WORD *)a1 + 4);
  unsigned __int16 v82 = v81 - 1;
  if (v81 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    unsigned int v91 = 0;
    uint64_t v87 = 0;
    if (!*(unsigned char *)(a2 + 66)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    float64x2_t v119 = _Q20;
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v82 + 1));
    *(_WORD *)(a2 + 64) = v82;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v82 + 1);
    }
    uint64_t v86 = 0;
    LOWORD(v87) = 0;
    float64x2_t v88 = (float64x2_t *)v129;
    float64x2_t v89 = (float64x2_t *)v126;
    float64x2_t v90 = (float64x2_t *)__p;
    unsigned int v91 = v82;
    float64x2_t v92 = (double *)(v11 + 8);
    __asm { FMOV            V1.2D, #3.0 }
    uint64_t v94 = v82;
    do
    {
      v83.f64[0] = *(v92 - 1);
      float64x2_t v95 = (float64x2_t *)(*a1 + v86);
      v84.f64[0] = *v92 - v83.f64[0];
      v83.f64[0] = v83.f64[0] - v83.f64[0];
      float64x2_t v96 = v95[1];
      float64x2_t v97 = v95[2];
      float64x2_t v98 = *v88;
      float64x2_t v99 = v88[1];
      v88 += 2;
      float64x2_t v101 = *v89;
      float64x2_t v100 = v89[1];
      v89 += 2;
      float64x2_t v103 = v95[8];
      float64x2_t v102 = v95[9];
      v85.f64[0] = v83.f64[0] * 3.0;
      float64x2_t v104 = *v90;
      float64x2_t v105 = v90[1];
      v90 += 2;
      float64x2_t v106 = vmulq_f64(v85, v105);
      float64x2_t v107 = vmlaq_f64(vmulq_n_f64(v104, v83.f64[0] * 3.0), v119, v101);
      float64x2_t v108 = vmlaq_f64(v99, vmlaq_f64(v106, v119, v100), v83);
      float64x2_t v109 = vmulq_n_f64(vmlaq_n_f64(v98, v107, v83.f64[0]), v84.f64[0]);
      v107.f64[0] = v84.f64[0] * 3.0;
      float64x2_t v110 = vmulq_f64(v107, v105);
      float64x2_t v85 = vmlaq_f64(vmulq_n_f64(v104, v84.f64[0] * 3.0), v119, v101);
      float64x2_t v111 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)v87);
      *float64x2_t v111 = v96;
      v111[1] = v97;
      uint64_t v112 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)(v87 + 1));
      LOWORD(v111) = v87 + 2;
      *uint64_t v112 = vaddq_f64(v96, vdivq_f64(v109, _Q1));
      v112[1] = vaddq_f64(v97, vdivq_f64(vmulq_f64(v84, v108), _Q1));
      LOWORD(v87) = v87 + 3;
      float64x2_t v113 = vdivq_f64(vmulq_f64(v84, vmlaq_f64(v99, vmlaq_f64(v110, v119, v100), v84)), _Q1);
      float64x2_t v84 = vsubq_f64(v103, vdivq_f64(vmulq_n_f64(vmlaq_n_f64(v98, v85, v84.f64[0]), v84.f64[0]), _Q1));
      float64x2_t v83 = vsubq_f64(v102, v113);
      float64x2_t v114 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)v111);
      ++v92;
      v86 += 112;
      *float64x2_t v114 = v84;
      v114[1] = v83;
      --v94;
    }
    while (v94);
    uint64_t v87 = (unsigned __int16)v87;
  }
  uint64_t v115 = *a1 + 112 * v91;
  long long v116 = *(_OWORD *)(v115 + 16);
  long long v117 = *(_OWORD *)(v115 + 32);
  uint64_t v118 = (_OWORD *)(*(void *)a2 + 32 * v87);
  *uint64_t v118 = v116;
  v118[1] = v117;
  *(unsigned char *)(a2 + 66) = 0;
  std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (void)v11) >> 3);
  *(void *)(a2 + 48) = *(void *)v11;
  *(void *)(a2 + 56) = *(void *)(v4 - 8);
  operator delete(v11);
  if (__p)
  {
    float64x2_t v124 = __p;
    operator delete(__p);
  }
  if (v126)
  {
    float64x2_t v127 = v126;
    operator delete(v126);
  }
  if (v129)
  {
    float64x2_t v130 = v129;
    operator delete(v129);
  }
  if (v132)
  {
    uint64_t v133 = v132;
    operator delete(v132);
  }
}

void _ZN4geom19interpolating_curveIDv3_dE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(unsigned char *)(a2 + 66)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v5 + 1);
    }
  }
  __p = 0;
  double v32 = 0;
  uint64_t v33 = 0;
  std::vector<double>::resize((uint64_t)&__p, v5 + 1);
  uint64_t v7 = *(void *)a1;
  double v8 = (char *)__p;
  *(void *)__p = *(void *)(*(void *)a1 + 8);
  if (v5)
  {
    uint64_t v9 = 0;
    LOWORD(v10) = 0;
    float64x2_t v11 = (double *)(v8 + 8);
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      uint64_t v17 = (float64x2_t *)(*(void *)a1 + v9);
      v6.f64[0] = v17[7].f64[1];
      double *v11 = v6.f64[0];
      v6.f64[0] = v6.f64[0] - *(v11 - 1);
      float64x2_t v18 = vmulq_n_f64(v17[5], v6.f64[0]);
      float64x2_t v19 = vmulq_f64(v17[6], v6);
      float64x2_t v20 = vmulq_n_f64(v17[10], v6.f64[0]);
      float64x2_t v21 = vmulq_f64(v17[11], v6);
      float64x2_t v22 = v17[2];
      float64x2_t v23 = (_OWORD *)(*(void *)a2 + 32 * (unsigned __int16)v10);
      *float64x2_t v23 = v17[1];
      v23[1] = v22;
      LOWORD(v23) = v10 + 2;
      float64x2_t v24 = vaddq_f64(vdivq_f64(v19, _Q0), v17[2]);
      uint64_t v25 = *(void *)a2 + 32 * (unsigned __int16)(v10 + 1);
      *(float64x2_t *)uint64_t v25 = vaddq_f64(vdivq_f64(v18, _Q0), v17[1]);
      *(float64x2_t *)(v25 + 16) = v24;
      LOWORD(v10) = v10 + 3;
      float64x2_t v26 = vsubq_f64(v17[8], vdivq_f64(v20, _Q0));
      float64x2_t v6 = vsubq_f64(v17[9], vdivq_f64(v21, _Q0));
      float64x2_t v27 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)v23);
      *float64x2_t v27 = v26;
      v27[1] = v6;
      v9 += 112;
      ++v11;
    }
    while (112 * v5 != v9);
    uint64_t v7 = *(void *)a1;
    uint64_t v10 = (unsigned __int16)v10;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v28 = v7 + 112 * *((void *)a1 + 1);
  long long v29 = *(_OWORD *)(v28 - 80);
  uint64_t v30 = (_OWORD *)(*(void *)a2 + 32 * v10);
  *uint64_t v30 = *(_OWORD *)(v28 - 96);
  v30[1] = v29;
  *(unsigned char *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v8, (uint64_t)v32, (v32 - v8) >> 3);
    double v8 = (char *)__p;
  }
  *(void *)(a2 + 48) = *(void *)v8;
  *(void *)(a2 + 56) = *((void *)v32 - 1);
  double v32 = v8;
  operator delete(v8);
}

double _ZNK4geom20interpolating_splineIDv3_dE21evaluate_total_lengthEv(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 64);
  if (*(_WORD *)(a1 + 64)) {
    unsigned __int16 v2 = *(_WORD *)(a1 + 64);
  }
  else {
    unsigned __int16 v2 = -1;
  }
  if (*(unsigned char *)(a1 + 66))
  {
    if (v1 == v2) {
      double v3 = *(double *)(a1 + 56);
    }
    else {
      double v3 = *(double *)(a1 + 48) + (double)v2 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v1);
    }
  }
  else
  {
    double v3 = *(double *)(*(void *)(a1 + 24) + 8 * v2);
  }
  return _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(a1, v3);
}

uint64_t _ZNSt3__16vectorIN4geom20interpolating_splineIDv3_dEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(uint64_t *a1, uint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *a1) >> 5);
    if (v10 + 1 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *a1) >> 5);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= v10 + 1) {
      uint64_t v12 = v10 + 1;
    }
    if (v11 >= 0x155555555555555) {
      unint64_t v13 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v19 = v4;
    if (v13) {
      float64x2_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(v4, v13);
    }
    else {
      float64x2_t v14 = 0;
    }
    unint64_t v15 = v14;
    float64x2_t v16 = &v14[96 * v10];
    float64x2_t v18 = &v14[96 * v13];
    _ZN4geom20interpolating_splineIDv3_dEC2ERKS2_((uint64_t)v16, a2);
    uint64_t v17 = v16 + 96;
    std::vector<geom::interpolating_spline<double>>::__swap_out_circular_buffer(a1, &v15);
    uint64_t v9 = a1[1];
    uint64_t result = std::__split_buffer<geom::interpolating_spline<double>>::~__split_buffer((uint64_t)&v15);
  }
  else
  {
    uint64_t result = _ZN4geom20interpolating_splineIDv3_dEC2ERKS2_(*(void *)(v4 - 8), a2);
    uint64_t v9 = v7 + 96;
  }
  a1[1] = v9;
  return result;
}

void _ZN4geom19interpolating_curveIDv4_dE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(void *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  _ZN4geom19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb((uint64_t)a2, a1, 0);
}

void _ZN4geom19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb(uint64_t a1, void *a2, char a3)
{
  uint64_t v6 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
  uint64_t v10 = *(void *)(a1 + 72);
  uint64_t v8 = *(void *)(a1 + 80);
  uint64_t v9 = (uint64_t *)(a1 + 72);
  uint64_t v11 = v6;
  if (v8 != v10)
  {
    do
      uint64_t v8 = geom::interpolating_spline<double>::~interpolating_spline(v8 - 96);
    while (v8 != v10);
    uint64_t v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
  }
  *(void *)(a1 + 80) = v10;
  std::vector<geom::interpolating_spline<double>>::reserve(v9, v11 - 1);
  *(unsigned char *)(a1 + 208) = 0;
  if ((unsigned __int16)v6 < 2u)
  {
    __int16 v12 = 0;
    __int16 v13 = -1;
  }
  else
  {
    __int16 v12 = 0;
    __int16 v13 = -1;
    __int16 v14 = 1;
    do
    {
      if (*(_DWORD *)(*a2 + 112 * v14) != *(_DWORD *)(*a2 + 112 * v12))
      {
        __int16 v13 = v14 - 1;
        *(void *)&long long v105 = *a2 + 112 * v12;
        *((void *)&v105 + 1) = (__int16)(v14 - 1) - (uint64_t)v12 + 1;
        _ZN4geom19interpolating_curveIDv4_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((void *)a1, (float64x2_t **)&v105);
        __int16 v12 = v14;
      }
      ++v14;
    }
    while ((unsigned __int16)v6 > v14);
  }
  if ((unsigned __int16)v6 - 1 != v13)
  {
    *(void *)&long long v105 = *a2 + 112 * v12;
    *((void *)&v105 + 1) = (unsigned __int16)v6 - (uint64_t)v12;
    _ZN4geom19interpolating_curveIDv4_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE((void *)a1, (float64x2_t **)&v105);
  }
  uint64_t v16 = *(void *)(a1 + 72);
  uint64_t v15 = *(void *)(a1 + 80);
  std::vector<unsigned short>::resize(a1 + 24, 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5));
  if (v15 == v16)
  {
    std::vector<unsigned short>::resize(a1, 0);
  }
  else
  {
    unsigned __int16 v17 = 0;
    uint64_t v18 = *v9;
    uint64_t v19 = *(unsigned __int16 **)(a1 + 24);
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5) <= 1) {
      unint64_t v20 = 1;
    }
    else {
      unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 5);
    }
    float64x2_t v21 = (__int16 *)(v18 + 64);
    unint64_t v22 = v20;
    do
    {
      __int16 v23 = *v21;
      v21 += 48;
      *v19++ = v17;
      v17 += v23;
      --v22;
    }
    while (v22);
    std::vector<unsigned short>::resize(a1, v17);
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v26 = *(void *)(a1 + 72);
    do
    {
      int v27 = *(unsigned __int16 *)(v26 + 96 * v24 + 64);
      if (*(_WORD *)(v26 + 96 * v24 + 64))
      {
        uint64_t v28 = *(void *)a1;
        do
        {
          uint64_t v29 = (v25 + 1);
          *(_WORD *)(v28 + 2 * (unsigned __int16)v25) = v24;
          LODWORD(v25) = v25 + 1;
          --v27;
        }
        while (v27);
      }
      else
      {
        uint64_t v29 = v25;
      }
      ++v24;
      uint64_t v25 = v29;
    }
    while (v24 != v20);
  }
  *(void *)(a1 + 192) = *(void *)(*a2 + 8);
  *(void *)(a1 + 200) = *(void *)(a2[1] - 104);
  if (a3)
  {
    LOWORD(v115[0]) = 512;
    v115[1] = 0.001;
    char v116 = 1;
    uint64_t v112 = 0;
    uint64_t v113 = 0;
    uint64_t v114 = 0;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    uint64_t v30 = *(void *)(a1 + 96);
    float64x2_t v103 = (void *)(a1 + 96);
    uint64_t v104 = a1;
    *(void *)(a1 + 104) = v30;
    uint64_t v31 = *(void *)(a1 + 120);
    float64x2_t v102 = (double **)(a1 + 120);
    *(_WORD *)(a1 + 160) = 0;
    *(unsigned char *)(a1 + 162) = 0;
    *(void *)(a1 + 128) = v31;
    uint64_t v32 = *a2;
    uint64_t v33 = a2[1] - *a2;
    if (v33) {
      double v34 = *(double *)(v32 + 8);
    }
    else {
      double v34 = 0.0;
    }
    unint64_t v35 = 0x6DB6DB6DB6DB6DB7 * (v33 >> 4);
    if (v35 >= 2)
    {
      unint64_t v36 = 1;
      while (1)
      {
        int v37 = *(_DWORD *)(v32 + 112 * v36);
        if (v37 == *(_DWORD *)(v32 + 112 * (v36 - 1))) {
          break;
        }
LABEL_101:
        unint64_t v36 = (v36 + 1);
        uint64_t v32 = *a2;
        unint64_t v35 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2[1] - *a2) >> 4);
        if (v35 <= v36) {
          goto LABEL_126;
        }
      }
      double v38 = *(double *)(v32 + 112 * v36 + 8);
      LOBYTE(v115[0]) = v37 != 0;
      unsigned __int16 v110 = 0;
      uint64_t v39 = v104;
      unsigned __int8 v111 = 0;
      *((void *)&v105 + 1) = v105;
      *(void *)&long long v107 = *((void *)&v106 + 1);
      double v40 = (v38 + v34 * 2.0) * 0.333333333;
      double v41 = (v34 + v38 * 2.0) * 0.333333333;
      if (*(unsigned char *)(v104 + 208))
      {
        double v42 = v34;
LABEL_76:
        double v69 = v38;
LABEL_77:
        *(double *)long long v117 = v34;
        *(double *)&v117[1] = v38;
        *(double *)&float v117[2] = v42;
        *(double *)&v117[3] = v40;
        *(double *)&v117[4] = v41;
        *(double *)&v117[5] = v69;
        char v118 = 0;
        _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(&v104, (uint64_t)v117, v115, (uint64_t)&v105);
        uint64_t v70 = v110;
        int v71 = *(_DWORD *)(a1 + 104);
        uint64_t v72 = *(void *)(a1 + 96);
        __int16 v73 = *(_WORD *)(a1 + 160);
        if (v73) {
          unsigned __int16 v74 = v73 + 1;
        }
        else {
          unsigned __int16 v74 = 0;
        }
        unsigned __int16 v75 = v73 + v110;
        if (v73 + v110)
        {
          std::vector<double>::resize((uint64_t)v103, (unsigned __int16)(3 * v75 + 1));
          *(_WORD *)(a1 + 160) = v75;
          if (!*(unsigned char *)(a1 + 162))
          {
            std::vector<double>::resize((uint64_t)v102, v75 + 1);
            if (v70) {
              goto LABEL_86;
            }
            goto LABEL_100;
          }
LABEL_85:
          if (v70) {
            goto LABEL_86;
          }
          goto LABEL_100;
        }
        *(void *)(a1 + 104) = v72;
        *(_WORD *)(a1 + 160) = 0;
        if (*(unsigned char *)(a1 + 162)) {
          goto LABEL_85;
        }
        *(void *)(a1 + 128) = *(void *)(a1 + 120);
        if (!v70)
        {
LABEL_100:
          double v34 = v38;
          goto LABEL_101;
        }
LABEL_86:
        int v76 = (unsigned __int16)((v71 - v72) >> 3);
        int v77 = v74;
        int v78 = v111;
        uint64_t v79 = v110;
        double v80 = (double)v110;
        __int16 v81 = (double *)*((void *)&v106 + 1);
        unsigned __int16 v82 = (void *)v105;
        float64x2_t v83 = *v102;
        float64x2_t v84 = (void *)*v103;
        int v85 = 3;
        uint64_t v86 = 1;
        while (1)
        {
          if (v76)
          {
            if (v78) {
              goto LABEL_89;
            }
          }
          else
          {
            if (v78)
            {
              if (v79) {
                double v88 = v108 + (v109 - v108) / v80 * 0.0;
              }
              else {
                double v88 = v109;
              }
            }
            else
            {
              double v88 = *v81;
            }
            *float64x2_t v83 = v88;
            *float64x2_t v84 = *v82;
            ++v77;
            int v76 = 1;
            if (v78)
            {
LABEL_89:
              if (v79 == v86) {
                double v87 = v109;
              }
              else {
                double v87 = v108 + (double)(unsigned __int16)v86 * ((v109 - v108) / v80);
              }
              goto LABEL_99;
            }
          }
          double v87 = v81[v86];
LABEL_99:
          v83[v77] = v87;
          v84[(unsigned __int16)v76] = v82[(unsigned __int16)(v85 - 2)];
          v84[(unsigned __int16)(v76 + 1)] = v82[(unsigned __int16)(v85 - 1)];
          v84[(unsigned __int16)(v76 + 2)] = v82[(unsigned __int16)v85];
          ++v77;
          v76 += 3;
          ++v86;
          v85 += 3;
          if (v86 - v70 == 1) {
            goto LABEL_100;
          }
        }
      }
      uint64_t v43 = *(void *)(v104 + 72);
      unint64_t v44 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 80) - v43) >> 5);
      if ((v44 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v34)
      {
        LOWORD(v44) = v44 - 1;
        if (*(double *)(v104 + 200) > v34)
        {
          for (unsigned __int16 i = 0; ; unsigned __int16 i = v47 + 1)
          {
            int v46 = i;
            while (1)
            {
              unsigned int v47 = (v46 + (unsigned __int16)v44) >> 1;
              if (*(double *)(v43 + 96 * v47 + 48) <= v34) {
                break;
              }
              LOWORD(v44) = v47 - 1;
            }
            if (*(double *)(v43 + 96 * v47 + 56) > v34) {
              break;
            }
          }
          LODWORD(v44) = (v46 + (unsigned __int16)v44) >> 1;
        }
        int v64 = (unsigned __int16)v44;
        int v65 = (unsigned __int16)v44;
        double v48 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v43 + 96 * (unsigned __int16)v44, v34);
        if (v65)
        {
          double v49 = *(double *)(*(void *)(v39 + 48) + 8 * (v64 - 1));
LABEL_48:
          double v42 = v48 + v49;
          uint64_t v50 = v104;
          if (*(unsigned char *)(v104 + 208)) {
            goto LABEL_76;
          }
          uint64_t v51 = *(void *)(v104 + 72);
          unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 80) - v51) >> 5);
          if ((v52 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v40)
          {
            LOWORD(v52) = v52 - 1;
            if (*(double *)(v104 + 200) > v40)
            {
              for (unsigned __int16 j = 0; ; unsigned __int16 j = v55 + 1)
              {
                int v54 = j;
                while (1)
                {
                  unsigned int v55 = (v54 + (unsigned __int16)v52) >> 1;
                  if (*(double *)(v51 + 96 * v55 + 48) <= v40) {
                    break;
                  }
                  LOWORD(v52) = v55 - 1;
                }
                if (*(double *)(v51 + 96 * v55 + 56) > v40) {
                  break;
                }
              }
              LODWORD(v52) = (v54 + (unsigned __int16)v52) >> 1;
            }
            int v89 = (unsigned __int16)v52;
            int v90 = (unsigned __int16)v52;
            double v56 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v51 + 96 * (unsigned __int16)v52, (v38 + v34 * 2.0) * 0.333333333);
            if (v90)
            {
              double v57 = *(double *)(*(void *)(v50 + 48) + 8 * (v89 - 1));
LABEL_60:
              double v40 = v56 + v57;
              uint64_t v58 = v104;
              if (*(unsigned char *)(v104 + 208)) {
                goto LABEL_76;
              }
              uint64_t v59 = *(void *)(v104 + 72);
              unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 80) - v59) >> 5);
              if ((v60 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v41)
              {
                LOWORD(v60) = v60 - 1;
                if (*(double *)(v104 + 200) > v41)
                {
                  for (unsigned __int16 k = 0; ; unsigned __int16 k = v63 + 1)
                  {
                    int v62 = k;
                    while (1)
                    {
                      unsigned int v63 = (v62 + (unsigned __int16)v60) >> 1;
                      if (*(double *)(v59 + 96 * v63 + 48) <= v41) {
                        break;
                      }
                      LOWORD(v60) = v63 - 1;
                    }
                    if (*(double *)(v59 + 96 * v63 + 56) > v41) {
                      break;
                    }
                  }
                  LODWORD(v60) = (v62 + (unsigned __int16)v60) >> 1;
                }
                int v98 = (unsigned __int16)v60;
                int v99 = (unsigned __int16)v60;
                double v66 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v59 + 96 * (unsigned __int16)v60, (v34 + v38 * 2.0) * 0.333333333);
                if (v99)
                {
                  double v67 = *(double *)(*(void *)(v58 + 48) + 8 * (v98 - 1));
LABEL_75:
                  double v41 = v66 + v67;
                  uint64_t v68 = v104;
                  if (*(unsigned char *)(v104 + 208)) {
                    goto LABEL_76;
                  }
                  uint64_t v91 = *(void *)(v104 + 72);
                  unint64_t v92 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v104 + 80) - v91) >> 5);
                  if ((v92 & 0xFFFE) != 0 && *(double *)(v104 + 192) < v38)
                  {
                    LOWORD(v92) = v92 - 1;
                    if (*(double *)(v104 + 200) > v38)
                    {
                      for (unsigned __int16 m = 0; ; unsigned __int16 m = v95 + 1)
                      {
                        int v94 = m;
                        while (1)
                        {
                          unsigned int v95 = (v94 + (unsigned __int16)v92) >> 1;
                          if (*(double *)(v91 + 96 * v95 + 48) <= v38) {
                            break;
                          }
                          LOWORD(v92) = v95 - 1;
                        }
                        if (*(double *)(v91 + 96 * v95 + 56) > v38) {
                          break;
                        }
                      }
                      LODWORD(v92) = (v94 + (unsigned __int16)v92) >> 1;
                    }
                    int v100 = (unsigned __int16)v92;
                    int v101 = (unsigned __int16)v92;
                    double v96 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v91 + 96 * (unsigned __int16)v92, v38);
                    if (v101)
                    {
                      double v97 = *(double *)(*(void *)(v68 + 48) + 8 * (v100 - 1));
                      goto LABEL_119;
                    }
                  }
                  else
                  {
                    double v96 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v91, v38);
                  }
                  double v97 = 0.0;
LABEL_119:
                  double v69 = v96 + v97;
                  goto LABEL_77;
                }
              }
              else
              {
                double v66 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v59, (v34 + v38 * 2.0) * 0.333333333);
              }
              double v67 = 0.0;
              goto LABEL_75;
            }
          }
          else
          {
            double v56 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v51, (v38 + v34 * 2.0) * 0.333333333);
          }
          double v57 = 0.0;
          goto LABEL_60;
        }
      }
      else
      {
        double v48 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v43, v34);
      }
      double v49 = 0.0;
      goto LABEL_48;
    }
LABEL_126:
    *(unsigned char *)(a1 + 208) = 1;
    *(void *)(a1 + 192) = *(void *)(v32 + 8);
    *(void *)(a1 + 200) = *(void *)(v32 + 112 * v35 - 104);
    geom::interpolating_spline<double>::~interpolating_spline((uint64_t)&v105);
  }
}

void _ZN4geom19interpolating_curveIDv4_dE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(void *a1@<X0>, _OWORD *a2@<X8>)
{
  a2[7] = 0u;
  a2[8] = 0u;
  a2[5] = 0u;
  a2[6] = 0u;
  a2[3] = 0u;
  a2[4] = 0u;
  a2[1] = 0u;
  a2[2] = 0u;
  *a2 = 0u;
  *(_OWORD *)((char *)a2 + 168) = 0u;
  *(_OWORD *)((char *)a2 + 184) = 0u;
  *(_OWORD *)((char *)a2 + 193) = 0u;
  _ZN4geom19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEEb((uint64_t)a2, a1, 1);
}

double _ZNK4geom19interpolating_curveIDv4_dE11evaluate_atEd@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v26 = 0;
    double v27 = 0.0;
    uint64_t v28 = 0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v26, a3);
    int v5 = (unsigned __int16)(3 * v26);
    uint64_t v6 = *(void *)(a1 + 96);
    double v7 = 1.0 - v27;
    a3 = *(double *)(v6 + 8 * (v5 + 1)) * (v27 * (v7 * v7 * 3.0))
       + *(double *)(v6 + 8 * (unsigned __int16)(3 * v26)) * (v7 * (v7 * v7))
       + *(double *)(v6 + 8 * (v5 + 2)) * (v27 * v27 * ((1.0 - v27) * 3.0))
       + *(double *)(v6 + 8 * (v5 + 3)) * (v27 * (v27 * v27));
  }
  uint64_t v8 = *(void *)(a1 + 72);
  unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v8) >> 5);
  if ((v9 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a3)
  {
    LOWORD(v9) = v9 - 1;
    if (*(double *)(a1 + 200) > a3)
    {
      for (unsigned __int16 i = 0; ; unsigned __int16 i = v12 + 1)
      {
        int v11 = i;
        while (1)
        {
          unsigned int v12 = (v11 + (unsigned __int16)v9) >> 1;
          if (*(double *)(v8 + 96 * v12 + 48) <= a3) {
            break;
          }
          LOWORD(v9) = v12 - 1;
        }
        if (*(double *)(v8 + 96 * v12 + 56) > a3) {
          break;
        }
      }
      LODWORD(v9) = (v11 + (unsigned __int16)v9) >> 1;
    }
  }
  else
  {
    LOWORD(v9) = 0;
  }
  __int16 v13 = (void *)(v8 + 96 * (unsigned __int16)v9);
  uint64_t v26 = 0;
  double v27 = 0.0;
  uint64_t v28 = 0;
  geom::interpolating_spline<double>::find_span((uint64_t)v13, (uint64_t)&v26, a3);
  double v14 = v27;
  int v15 = (unsigned __int16)(3 * v26);
  uint64_t v16 = (float64x2_t *)(*v13 + 32 * (unsigned __int16)(3 * v26));
  unsigned __int16 v17 = (float64x2_t *)(*v13 + 32 * (v15 + 1));
  uint64_t v18 = (float64x2_t *)(*v13 + 32 * (v15 + 2));
  uint64_t v19 = (float64x2_t *)(*v13 + 32 * (v15 + 3));
  double v20 = 1.0 - v27;
  double v21 = v20 * (v20 * v20);
  double v22 = v27 * (v20 * v20 * 3.0);
  double v23 = v14 * v14 * ((1.0 - v27) * 3.0);
  double result = v14 * (v14 * v14);
  float64x2_t v25 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v17[1], v22), v16[1], v21), v18[1], v23), v19[1], result);
  *a2 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*v17, v22), *v16, v21), *v18, v23), *v19, result);
  a2[1] = v25;
  return result;
}

uint64_t _ZNK4geom19interpolating_curveIDv4_dE19evaluate_tangent_atEd@<X0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  if (*(unsigned char *)(a1 + 208))
  {
    uint64_t v54 = 0;
    double v55 = 0.0;
    double v56 = 0.0;
    geom::interpolating_spline<double>::find_span(a1 + 96, (uint64_t)&v54, a3);
    int v5 = (unsigned __int16)(3 * v54);
    uint64_t v6 = *(void *)(a1 + 96);
    double v7 = 1.0 - v55;
    double v8 = *(double *)(v6 + 8 * (v5 + 1)) * (v55 * (v7 * v7 * 3.0))
       + *(double *)(v6 + 8 * (unsigned __int16)(3 * v54)) * (v7 * (v7 * v7))
       + *(double *)(v6 + 8 * (v5 + 2)) * (v55 * v55 * ((1.0 - v55) * 3.0))
       + *(double *)(v6 + 8 * (v5 + 3)) * (v55 * (v55 * v55));
    uint64_t v9 = *(void *)(a1 + 72);
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v9) >> 5);
    if ((v10 & 0xFFFE) != 0 && *(double *)(a1 + 192) < v8)
    {
      LOWORD(v10) = v10 - 1;
      if (*(double *)(a1 + 200) > v8)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v13 + 1)
        {
          int v12 = i;
          while (1)
          {
            unsigned int v13 = (v12 + (unsigned __int16)v10) >> 1;
            if (*(double *)(v9 + 96 * v13 + 48) <= v8) {
              break;
            }
            LOWORD(v10) = v13 - 1;
          }
          if (*(double *)(v9 + 96 * v13 + 56) > v8) {
            break;
          }
        }
        LODWORD(v10) = (v12 + (unsigned __int16)v10) >> 1;
      }
    }
    else
    {
      LOWORD(v10) = 0;
    }
    double v14 = (void *)(v9 + 96 * (unsigned __int16)v10);
    uint64_t v54 = 0;
    double v55 = 0.0;
    double v56 = 0.0;
    uint64_t result = geom::interpolating_spline<double>::find_span((uint64_t)v14, (uint64_t)&v54, v8);
    int v16 = (unsigned __int16)(3 * v54);
    uint64_t v17 = *v14 + 32 * (v16 + 1);
    float64x2_t v18 = *(float64x2_t *)(v17 + 16);
    uint64_t v19 = (float64x2_t *)(*v14 + 32 * (unsigned __int16)(3 * v54));
    float64x2_t v20 = vsubq_f64(v18, v19[1]);
    float64x2_t v21 = vsubq_f64(*(float64x2_t *)v17, *v19);
    uint64_t v22 = *v14 + 32 * (v16 + 2);
    float64x2_t v24 = *(float64x2_t *)v22;
    float64x2_t v23 = *(float64x2_t *)(v22 + 16);
    float64x2_t v25 = vsubq_f64(*(float64x2_t *)v22, *(float64x2_t *)v17);
    uint64_t v26 = (float64x2_t *)(*v14 + 32 * (v16 + 3));
    double v27 = 1.0 - v55;
    double v28 = v27 * v27;
    double v29 = v55 * (v27 + v27);
    float64x2_t v30 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v25, v29), v21, v28), vsubq_f64(*v26, v24), v55 * v55), v56 * 3.0);
    float64x2_t v31 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vsubq_f64(v23, v18), v29), v20, v28), vsubq_f64(v26[1], v23), v55 * v55), v56 * 3.0);
    float v32 = sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v30, v30), vmulq_f64(v31, v31))));
    if (v32 > 0.0)
    {
      double v33 = 1.0 / v32;
      float64x2_t v31 = vmulq_n_f64(v31, v33);
      float64x2_t v30 = vmulq_n_f64(v30, v33);
    }
  }
  else
  {
    uint64_t v34 = *(void *)(a1 + 72);
    unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 80) - v34) >> 5);
    if ((v35 & 0xFFFE) != 0 && *(double *)(a1 + 192) < a3)
    {
      LOWORD(v35) = v35 - 1;
      if (*(double *)(a1 + 200) > a3)
      {
        for (unsigned __int16 j = 0; ; unsigned __int16 j = v38 + 1)
        {
          int v37 = j;
          while (1)
          {
            unsigned int v38 = (v37 + (unsigned __int16)v35) >> 1;
            if (*(double *)(v34 + 96 * v38 + 48) <= a3) {
              break;
            }
            LOWORD(v35) = v38 - 1;
          }
          if (*(double *)(v34 + 96 * v38 + 56) > a3) {
            break;
          }
        }
        LODWORD(v35) = (v37 + (unsigned __int16)v35) >> 1;
      }
    }
    else
    {
      LOWORD(v35) = 0;
    }
    uint64_t v39 = (void *)(v34 + 96 * (unsigned __int16)v35);
    uint64_t v54 = 0;
    double v55 = 0.0;
    double v56 = 0.0;
    uint64_t result = geom::interpolating_spline<double>::find_span((uint64_t)v39, (uint64_t)&v54, a3);
    int v40 = (unsigned __int16)(3 * v54);
    uint64_t v41 = *v39 + 32 * (v40 + 1);
    float64x2_t v42 = *(float64x2_t *)(v41 + 16);
    uint64_t v43 = (float64x2_t *)(*v39 + 32 * (unsigned __int16)(3 * v54));
    float64x2_t v44 = vsubq_f64(*(float64x2_t *)v41, *v43);
    float64x2_t v45 = vsubq_f64(v42, v43[1]);
    uint64_t v46 = *v39 + 32 * (v40 + 2);
    float64x2_t v47 = *(float64x2_t *)v46;
    float64x2_t v48 = *(float64x2_t *)(v46 + 16);
    float64x2_t v49 = vsubq_f64(*(float64x2_t *)v46, *(float64x2_t *)v41);
    uint64_t v50 = (float64x2_t *)(*v39 + 32 * (v40 + 3));
    double v51 = 1.0 - v55;
    double v52 = v51 * v51;
    double v53 = v55 * (v51 + v51);
    float64x2_t v31 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vsubq_f64(v48, v42), v53), v45, v52), vsubq_f64(v50[1], v48), v55 * v55), v56 * 3.0);
    float64x2_t v30 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v49, v53), v44, v52), vsubq_f64(*v50, v47), v55 * v55), v56 * 3.0);
  }
  *a2 = v30;
  a2[1] = v31;
  return result;
}

double _ZNK4geom19interpolating_curveIDv4_dE18evaluate_length_atEd(uint64_t a1, double result)
{
  if (!*(unsigned char *)(a1 + 208))
  {
    uint64_t v4 = a1 + 72;
    uint64_t v3 = *(void *)(a1 + 72);
    unint64_t v5 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v4 + 8) - v3) >> 5);
    if ((v5 & 0xFFFE) != 0 && *(double *)(a1 + 192) < result)
    {
      LOWORD(v5) = v5 - 1;
      if (*(double *)(a1 + 200) > result)
      {
        for (unsigned __int16 i = 0; ; unsigned __int16 i = v8 + 1)
        {
          int v7 = i;
          while (1)
          {
            unsigned int v8 = (v7 + (unsigned __int16)v5) >> 1;
            if (*(double *)(v3 + 96 * v8 + 48) <= result) {
              break;
            }
            LOWORD(v5) = v8 - 1;
          }
          if (*(double *)(v3 + 96 * v8 + 56) > result) {
            break;
          }
        }
        LODWORD(v5) = (v7 + (unsigned __int16)v5) >> 1;
      }
      int v11 = (unsigned __int16)v5;
      int v12 = (unsigned __int16)v5;
      double v9 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v3 + 96 * (unsigned __int16)v5, result);
      if (v12)
      {
        double v10 = *(double *)(*(void *)(a1 + 48) + 8 * (v11 - 1));
        return v9 + v10;
      }
    }
    else
    {
      double v9 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v3, result);
    }
    double v10 = 0.0;
    return v9 + v10;
  }
  return result;
}

double _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(uint64_t a1, double a2)
{
  geom::interpolating_spline<double>::find_span(a1, (uint64_t)v11, a2);
  uint64_t v4 = v11[0];
  uint64_t v5 = *(void *)(a1 + 72);
  if (*(void *)(a1 + 80) == v5)
  {
    if (v11[0])
    {
      int v7 = 0;
      double v6 = 0.0;
      do
        double v6 = v6 + _ZNK4geom20interpolating_splineIDv4_dE20evaluate_span_lengthEj(a1, v7++);
      while (v4 != v7);
      goto LABEL_9;
    }
  }
  else if (v11[0])
  {
    double v6 = *(double *)(v5 + 8 * (v11[0] - 1));
    goto LABEL_9;
  }
  double v6 = 0.0;
LABEL_9:
  if (*(unsigned char *)(a1 + 66))
  {
    unsigned int v8 = *(unsigned __int16 *)(a1 + 64);
    if (v8 == v4) {
      double v9 = *(double *)(a1 + 56);
    }
    else {
      double v9 = *(double *)(a1 + 48)
    }
         + (double)v4 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v8);
  }
  else
  {
    double v9 = *(double *)(*(void *)(a1 + 24) + 8 * v4);
  }
  return v6 + _ZNK4geom20interpolating_splineIDv4_dE24evaluate_length_betweeenEdd((void *)a1, v9, a2);
}

void _ZNK4geom19interpolating_curveIDv4_dE10span_knotsEtRdS3_(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  uint64_t v9 = *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
  unsigned __int16 v10 = a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9);
  if (*(unsigned char *)(a1 + 208))
  {
    if (*(_WORD *)(*(void *)a1 + 2 * a2)) {
      double v11 = *(double *)(*(void *)(a1 + 48) + 8 * (v9 - 1));
    }
    else {
      double v11 = 0.0;
    }
    uint64_t v18 = *(void *)(a1 + 72);
    uint64_t v19 = v18 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
    if (*(unsigned char *)(v19 + 66))
    {
      uint64_t v20 = v18 + 96 * v9;
      double v21 = *(double *)(v20 + 48);
      LOWORD(a7) = *(_WORD *)(v20 + 64);
      double v22 = (*(double *)(v20 + 56) - v21) / (double)*(unint64_t *)&a7;
      double v23 = v21 + (double)v10 * v22;
      double v24 = v22 + v23;
    }
    else
    {
      float64x2_t v25 = (double *)(*(void *)(v18 + 96 * v9 + 24) + 8 * v10);
      double v23 = *v25;
      double v24 = v25[1];
    }
    *a3 = v11 + _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v19, v23);
    double v17 = v11
        + _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(*(void *)(a1 + 72) + 96 * v9, v24);
  }
  else
  {
    uint64_t v12 = *(void *)(a1 + 72);
    if (*(unsigned char *)(v12 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 66))
    {
      uint64_t v13 = v12 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2);
      double v14 = *(double *)(v13 + 48);
      LOWORD(a7) = *(_WORD *)(v13 + 64);
      double v15 = (*(double *)(v13 + 56) - v14) / (double)*(unint64_t *)&a7;
      double v16 = v14 + (double)(unsigned __int16)(a2 - *(_WORD *)(*(void *)(a1 + 24) + 2 * v9)) * v15;
      *a3 = v16;
      double v17 = v15 + v16;
    }
    else
    {
      uint64_t v26 = *(void *)(v12 + 96 * *(unsigned __int16 *)(*(void *)a1 + 2 * a2) + 24) + 8 * v10;
      *a3 = *(double *)v26;
      double v17 = *(double *)(v26 + 8);
    }
  }
  *a4 = v17;
}

uint64_t _ZNK4geom19interpolating_curveIDv4_dE33calculate_monomial_basis_for_spanEtPS1_(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v3 = a1[9];
  uint64_t v4 = 96 * *(unsigned __int16 *)(*a1 + 2 * a2);
  int v5 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  uint64_t v6 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  int v7 = (_OWORD *)(*(void *)(v3 + v4) + 32 * v6);
  long long v8 = v7[1];
  *(_OWORD *)a3 = *v7;
  *(_OWORD *)(a3 + 16) = v8;
  uint64_t v9 = *(void *)(v3 + v4);
  uint64_t v10 = (v5 + 1);
  double v11 = (float64x2_t *)(v9 + 32 * v10);
  uint64_t v12 = (float64x2_t *)(v9 + 32 * v6);
  __asm { FMOV            V2.2D, #3.0 }
  float64x2_t v18 = vmulq_f64(vsubq_f64(v11[1], v12[1]), _Q2);
  *(float64x2_t *)(a3 + 32) = vmulq_f64(vsubq_f64(*v11, *v12), _Q2);
  *(float64x2_t *)(a3 + 48) = v18;
  uint64_t v19 = *(void *)(v3 + v4);
  uint64_t v20 = (float64x2_t *)(v19 + 32 * v6);
  float64x2_t v22 = *v20;
  float64x2_t v21 = v20[1];
  double v23 = (float64x2_t *)(v19 + 32 * v10);
  __asm { FMOV            V5.2D, #-2.0 }
  float64x2_t v25 = vmlaq_f64(v22, _Q5, *v23);
  float64x2_t v26 = vmlaq_f64(v21, _Q5, v23[1]);
  uint64_t v27 = (v5 + 2);
  double v28 = (float64x2_t *)(v19 + 32 * v27);
  float64x2_t v29 = vmulq_f64(vaddq_f64(v25, *v28), _Q2);
  float64x2_t v30 = vmulq_f64(vaddq_f64(v26, v28[1]), _Q2);
  *(float64x2_t *)(a3 + 64) = v29;
  *(float64x2_t *)(a3 + 80) = v30;
  uint64_t v31 = *(void *)(v3 + v4);
  float v32 = (float64x2_t *)(v31 + 32 * (v5 + 3));
  float64x2_t v33 = *v32;
  float64x2_t v34 = v32[1];
  unint64_t v35 = (float64x2_t *)(v31 + 32 * v10);
  float64x2_t v37 = *v35;
  float64x2_t v36 = v35[1];
  unsigned int v38 = (float64x2_t *)(v31 + 32 * v27);
  uint64_t v39 = (float64x2_t *)(v31 + 32 * v6);
  float64x2_t v40 = vsubq_f64(vmlaq_f64(v33, _Q2, vsubq_f64(v37, *v38)), *v39);
  float64x2_t v41 = vsubq_f64(vmlaq_f64(v34, _Q2, vsubq_f64(v36, v38[1])), v39[1]);
  *(float64x2_t *)(a3 + 96) = v40;
  *(float64x2_t *)(a3 + 112) = v41;
  if (sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v29, v29), vmulq_f64(v30, v30)))) <= 0.000001
    && sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v40, v40), vmulq_f64(v41, v41)))) <= 0.000001)
  {
    return 2;
  }
  else
  {
    return 4;
  }
}

uint64_t _ZNK4geom19interpolating_curveIDv4_dE31calculate_bezier_basis_for_spanEtPS1_(void *a1, unsigned int a2, uint64_t a3)
{
  int v3 = (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2))));
  uint64_t v4 = *(void *)(a1[9] + 96 * *(unsigned __int16 *)(*a1 + 2 * a2));
  int v5 = (float64x2_t *)(v4
                     + 32
                     * (unsigned __int16)(3 * (a2 - *(_WORD *)(a1[3] + 2 * *(unsigned __int16 *)(*a1 + 2 * a2)))));
  float64x2_t v6 = *v5;
  float64x2_t v7 = v5[1];
  long long v8 = (float64x2_t *)(v4 + 32 * (v3 + 1));
  float64x2_t v10 = *v8;
  float64x2_t v9 = v8[1];
  __asm { FMOV            V16.2D, #3.0 }
  float64x2_t v16 = vmulq_f64(vsubq_f64(v9, v7), _Q16);
  float64x2_t v17 = vmulq_f64(vsubq_f64(*v8, v6), _Q16);
  __asm { FMOV            V4.2D, #-2.0 }
  float64x2_t v19 = vmlaq_f64(v6, _Q4, *v8);
  uint64_t v20 = (float64x2_t *)(v4 + 32 * (v3 + 2));
  float64x2_t v21 = v20[1];
  float64x2_t v22 = vaddq_f64(vmlaq_f64(v7, _Q4, v9), v21);
  float64x2_t v23 = vmulq_f64(vaddq_f64(v19, *v20), _Q16);
  float64x2_t v24 = vmulq_f64(v22, _Q16);
  float64x2_t v25 = (float64x2_t *)(v4 + 32 * (v3 + 3));
  float64x2_t v26 = vmlaq_f64(*v25, _Q16, vsubq_f64(v10, *v20));
  float64x2_t v27 = vsubq_f64(vmlaq_f64(v25[1], _Q16, vsubq_f64(v9, v21)), v7);
  float64x2_t v28 = vsubq_f64(v26, v6);
  if (sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v23, v23), vmulq_f64(v24, v24)))) <= 0.000001
    && sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v28, v28), vmulq_f64(v27, v27)))) <= 0.000001)
  {
    *(float64x2_t *)a3 = v6;
    *(float64x2_t *)(a3 + 16) = v7;
    *(float64x2_t *)(a3 + 32) = vaddq_f64(v6, v17);
    *(float64x2_t *)(a3 + 48) = vaddq_f64(v7, v16);
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 96) = 0u;
    *(_OWORD *)(a3 + 112) = 0u;
    return 2;
  }
  else
  {
    *(float64x2_t *)a3 = v6;
    *(float64x2_t *)(a3 + 16) = v7;
    float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL);
    float64x2_t v30 = (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL);
    *(float64x2_t *)(a3 + 32) = vmlaq_f64(v6, v29, v17);
    *(float64x2_t *)(a3 + 48) = vmlaq_f64(v7, v29, v16);
    *(float64x2_t *)(a3 + 64) = vmlaq_f64(vmlaq_f64(v6, v30, v17), v29, v23);
    *(float64x2_t *)(a3 + 80) = vmlaq_f64(vmlaq_f64(v7, v30, v16), v29, v24);
    *(float64x2_t *)(a3 + 96) = vaddq_f64(vaddq_f64(vaddq_f64(v6, v17), v23), v28);
    *(float64x2_t *)(a3 + 112) = vaddq_f64(vaddq_f64(vaddq_f64(v7, v16), v24), v27);
    return 4;
  }
}

uint64_t _ZN4geom19interpolating_curveIDv4_dE13append_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(void *a1, float64x2_t **a2)
{
  memset(v26, 0, sizeof(v26));
  memset(v24, 0, 48);
  switch(LODWORD((*a2)->f64[0]))
  {
    case 0:
      _ZN4geom19interpolating_curveIDv4_dE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 1:
      _ZN4geom19interpolating_curveIDv4_dE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 2:
      _ZN4geom19interpolating_curveIDv4_dE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
      goto LABEL_6;
    case 3:
      _ZN4geom19interpolating_curveIDv4_dE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(a2, (uint64_t)v23);
LABEL_6:
      geom::interpolating_spline<double>::operator=((uint64_t)v24, (uint64_t)v23);
      geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v23);
      break;
    default:
      break;
  }
  uint64_t v3 = v25;
  std::vector<double>::resize((uint64_t)v26, v25);
  if (v3)
  {
    uint64_t v4 = 0;
    double v5 = 0.0;
    do
    {
      double v5 = v5 + _ZNK4geom20interpolating_splineIDv4_dE20evaluate_span_lengthEj((uint64_t)v24, v4);
      *(double *)(v26[0] + 8 * v4++) = v5;
    }
    while (v3 != v4);
  }
  double v6 = _ZNK4geom20interpolating_splineIDv4_dE21evaluate_total_lengthEv((uint64_t)v24);
  uint64_t v7 = a1[10] - a1[9];
  if (v7) {
    double v8 = *(double *)(a1[6] + 0x5555555555555558 * (v7 >> 5) - 8);
  }
  else {
    double v8 = 0.0;
  }
  double v9 = v6 + v8;
  unint64_t v10 = a1[8];
  double v11 = (double *)a1[7];
  if ((unint64_t)v11 >= v10)
  {
    uint64_t v13 = (double *)a1[6];
    uint64_t v14 = v11 - v13;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 61) {
      abort();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 2 > v15) {
      unint64_t v15 = v16 >> 2;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17)
    {
      float64x2_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 8), v17);
      uint64_t v13 = (double *)a1[6];
      double v11 = (double *)a1[7];
    }
    else
    {
      float64x2_t v18 = 0;
    }
    float64x2_t v19 = (double *)&v18[8 * v14];
    uint64_t v20 = &v18[8 * v17];
    *float64x2_t v19 = v9;
    uint64_t v12 = v19 + 1;
    while (v11 != v13)
    {
      uint64_t v21 = *((void *)v11-- - 1);
      *((void *)v19-- - 1) = v21;
    }
    a1[6] = v19;
    a1[7] = v12;
    a1[8] = v20;
    if (v13) {
      operator delete(v13);
    }
  }
  else
  {
    double *v11 = v9;
    uint64_t v12 = v11 + 1;
  }
  a1[7] = v12;
  _ZNSt3__16vectorIN4geom20interpolating_splineIDv3_dEENS_9allocatorIS4_EEE9push_backB8nn180100ERKS4_(a1 + 9, (uint64_t)v24);
  return geom::interpolating_spline<double>::~interpolating_spline((uint64_t)v24);
}

void _ZN4geom19interpolating_curveIDv4_dE19build_linear_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(unsigned char *)(a2 + 66)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v5 + 1);
    }
  }
  __p = 0;
  unint64_t v35 = 0;
  uint64_t v36 = 0;
  std::vector<double>::resize((uint64_t)&__p, v5 + 1);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = (char *)__p;
  *(void *)__p = *(void *)(*(void *)a1 + 8);
  if (v5)
  {
    uint64_t v8 = 0;
    LOWORD(v9) = 0;
    unint64_t v10 = (double *)(v7 + 8);
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      uint64_t v16 = (float64x2_t *)(*(void *)a1 + v8);
      double v17 = v16[7].f64[1];
      double *v10 = v17;
      double v18 = v17 - *(v10 - 1);
      float64x2_t v19 = v16[1];
      float64x2_t v20 = v16[2];
      float64x2_t v21 = vmulq_n_f64(vsubq_f64(v16[8], v19), v18);
      float64x2_t v22 = vmulq_n_f64(vsubq_f64(v16[9], v20), v18);
      float64x2_t v23 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)v9);
      *float64x2_t v23 = v19;
      v23[1] = v20;
      LOWORD(v23) = v9 + 2;
      float64x2_t v24 = vdivq_f64(v22, _Q0);
      float64x2_t v25 = vdivq_f64(v21, _Q0);
      float64x2_t v26 = vaddq_f64(v16[2], v24);
      uint64_t v27 = *(void *)a2 + 32 * (unsigned __int16)(v9 + 1);
      *(float64x2_t *)uint64_t v27 = vaddq_f64(v16[1], v25);
      *(float64x2_t *)(v27 + 16) = v26;
      LOWORD(v9) = v9 + 3;
      float64x2_t v28 = vsubq_f64(v16[8], v25);
      float64x2_t v29 = vsubq_f64(v16[9], v24);
      float64x2_t v30 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)v23);
      *float64x2_t v30 = v28;
      v30[1] = v29;
      v8 += 112;
      ++v10;
    }
    while (112 * v5 != v8);
    uint64_t v6 = *(void *)a1;
    uint64_t v9 = (unsigned __int16)v9;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v31 = v6 + 112 * *((void *)a1 + 1);
  long long v32 = *(_OWORD *)(v31 - 80);
  float64x2_t v33 = (_OWORD *)(*(void *)a2 + 32 * v9);
  *float64x2_t v33 = *(_OWORD *)(v31 - 96);
  v33[1] = v32;
  *(unsigned char *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v7, (uint64_t)v35, (v35 - v7) >> 3);
    uint64_t v7 = (char *)__p;
  }
  *(void *)(a2 + 48) = *(void *)v7;
  *(void *)(a2 + 56) = *((void *)v35 - 1);
  unint64_t v35 = v7;
  operator delete(v7);
}

void _ZN4geom19interpolating_curveIDv4_dE24build_catmull_rom_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(float64x2_t **a1@<X1>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  int64x2_t v143 = 0;
  int64x2_t v144 = 0;
  uint64_t v145 = 0;
  float64x2_t v140 = 0;
  float64x2_t v141 = 0;
  uint64_t v142 = 0;
  __int16 v4 = a1[1];
  __int16 v5 = (_WORD)v4 - 1;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v143, (unsigned __int16)((_WORD)v4 + 2));
  std::vector<double>::resize((uint64_t)&v140, (unsigned __int16)((_WORD)v4 + 2));
  __asm { FMOV            V0.2D, #2.0 }
  float64x2_t v11 = vmlaq_f64(vnegq_f64((*a1)[9]), _Q0, (*a1)[2]);
  uint64_t v12 = (char *)v143;
  *(float64x2_t *)int64x2_t v143 = vmlaq_f64(vnegq_f64((*a1)[8]), _Q0, (*a1)[1]);
  *((float64x2_t *)v12 + 1) = v11;
  uint64_t v13 = (double *)v140;
  *(void *)float64x2_t v140 = 0;
  uint64_t v14 = *a1;
  float64x2_t v15 = vsubq_f64((*a1)[8], (*a1)[1]);
  float64x2_t v16 = vsubq_f64((*a1)[9], (*a1)[2]);
  v13[1] = sqrt(sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v15, v15), vmulq_f64(v16, v16)))));
  if ((_WORD)v4 == 1)
  {
    uint64_t v18 = 0;
  }
  else
  {
    uint64_t v17 = 0;
    uint64_t v18 = (unsigned __int16)((_WORD)v4 - 1);
    float64x2_t v19 = v13 + 2;
    float64x2_t v20 = v12 + 32;
    do
    {
      float64x2_t v21 = &v14[v17];
      float64x2_t v22 = v21[2];
      *float64x2_t v20 = v21[1];
      v20[1] = v22;
      v20 += 2;
      uint64_t v14 = *a1;
      float64x2_t v23 = &(*a1)[v17];
      float64x2_t v24 = vsubq_f64(v23[8], v23[1]);
      float64x2_t v25 = vsubq_f64(v23[9], v23[2]);
      *float64x2_t v19 = *(v19 - 1) + sqrt(sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v24, v24), vmulq_f64(v25, v25)))));
      ++v19;
      v17 += 7;
    }
    while (7 * (unsigned __int16)((_WORD)v4 - 1) != v17);
  }
  float64x2_t v26 = &v14[7 * v18];
  float64x2_t v27 = v26[1];
  float64x2_t v28 = v26[2];
  uint64_t v29 = (unsigned __int16)((_WORD)v4 + 2) - 2;
  float64x2_t v30 = (float64x2_t *)&v12[32 * v29];
  *float64x2_t v30 = v27;
  v30[1] = v28;
  uint64_t v31 = (float64x2_t *)&v12[32 * (unsigned __int16)((_WORD)v4 + 2)];
  float64x2_t v32 = vmlaq_f64(vnegq_f64(v31[-5]), _Q0, v28);
  uint64_t v33 = (unsigned __int16)((_WORD)v4 + 2) - 1;
  float64x2_t v34 = (float64x2_t *)&v12[32 * v33];
  *float64x2_t v34 = vmlaq_f64(vnegq_f64(v31[-6]), _Q0, v27);
  v34[1] = v32;
  unint64_t v35 = &(*a1)[7 * (unsigned __int16)((_WORD)v4 - 2)];
  float64x2_t v36 = vsubq_f64(v35[8], v35[1]);
  float64x2_t v37 = vsubq_f64(v35[9], v35[2]);
  v13[v33] = v13[v29] + sqrt(sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v36, v36), vmulq_f64(v37, v37)))));
  if ((_WORD)v4 == 1)
  {
    uint64_t v39 = 0;
    *(void *)(a2 + 8) = 0;
    *(_WORD *)(a2 + 64) = 0;
    if (!*(unsigned char *)(a2 + 66))
    {
      uint64_t v39 = 0;
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v18 + 1);
    }
    uint64_t v38 = 0;
    LOWORD(v39) = 0;
    float64x2_t v40 = (double *)v140;
    float64x2_t v41 = (char *)v143;
    __asm { FMOV            V0.2D, #3.0 }
    float64x2_t v135 = _Q0;
    do
    {
      uint64_t v43 = (v38 + 2);
      double v44 = v40[v38];
      uint64_t v45 = (v38 + 3);
      uint64_t v46 = (float64x2_t *)&v41[32 * v38];
      uint64_t v47 = v38 + 1;
      double v48 = v40[(v38 + 1)];
      double v49 = v40[v43];
      uint64_t v50 = (float64x2_t *)&v41[32 * (v38 + 1)];
      double v51 = (float64x2_t *)&v41[32 * v43];
      double v52 = v40[v45];
      double v53 = v49 - v48;
      double v54 = 1.0 / (v48 - v44);
      double v55 = 1.0 / (v49 - v48);
      double v56 = v52 - v49;
      double v57 = 1.0 / (v52 - v49);
      uint64_t v58 = (float64x2_t *)&v41[32 * v45];
      float64x2_t v59 = v46[1];
      float64x2_t v60 = v50[1];
      float64x2_t v61 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v44 - v48), 0));
      float64x2_t v62 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v60, v61), v59, v48 - v48), v54);
      float64x2_t v63 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v50, v61), *v46, v48 - v48), v54);
      float64x2_t v64 = v51[1];
      float64x2_t v65 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v48 - v48), 0));
      float64x2_t v66 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v51, v65), *v50, v49 - v48), v55);
      float64x2_t v67 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v64, v65), v60, v49 - v48), v55);
      float64x2_t v68 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v49 - v48), 0));
      float64x2_t v69 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v58, v68), *v51, v52 - v48), v57);
      float64x2_t v70 = vmlaq_n_f64(vmulq_f64(v66, v61), v63, v49 - v48);
      float64x2_t v71 = vmlaq_n_f64(vmulq_f64(v67, v61), v62, v49 - v48);
      float64x2_t v136 = vmulq_n_f64(vsubq_f64(v60, v59), v54);
      float64x2_t v72 = vmulq_n_f64(vsubq_f64(*v50, *v46), v54);
      float64x2_t v73 = vmulq_n_f64(vsubq_f64(*v51, *v50), v55);
      float64x2_t v74 = vmulq_n_f64(vsubq_f64(v64, v60), v55);
      float64x2_t v75 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v67, v62), v136, v49 - v48), v74, v44 - v48, 0);
      float64x2_t v76 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v66, v63), v72, v49 - v48), v73, v44 - v48, 0);
      float64x2_t v77 = vmlaq_n_f64(vmulq_f64(v69, v65), v66, v52 - v48);
      float64x2_t v78 = vsubq_f64(v69, v66);
      float64x2_t v79 = v58[1];
      float64x2_t v80 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v79, v68), v64, v52 - v48), v57);
      float64x2_t v81 = vmlaq_n_f64(vmulq_f64(v80, v65), v67, v52 - v48);
      float64x2_t v82 = vsubq_f64(v80, v67);
      v80.f64[0] = 1.0 / (v49 - v44);
      double v83 = 1.0 / (v52 - v48);
      float64x2_t v84 = vmlaq_n_f64(vsubq_f64(vmulq_n_f64(v77, v83), vmulq_n_f64(v70, v80.f64[0])), vmulq_n_f64(v76, v80.f64[0]), v49 - v48);
      float64x2_t v85 = vmulq_n_f64(vsubq_f64(*v58, *v51), v57);
      float64x2_t v86 = vmlsq_lane_f64(v84, vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(v78, v73, v52 - v48), v85, v48 - v48, 0), v83), v48 - v48, 0);
      float64x2_t v87 = vmulq_n_f64(vsubq_f64(v79, v64), v57);
      float64x2_t v88 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(vmulq_n_f64(v81, v83), vmulq_n_f64(v71, v80.f64[0])), vmulq_n_f64(v75, v80.f64[0]), v49 - v48), vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(v82, v74, v52 - v48), v87, v48 - v48, 0), v83), v48 - v48, 0);
      double v89 = v44 - v49;
      double v90 = v48 - v49;
      float64x2_t v91 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v89, 0));
      double v92 = v49 - v49;
      float64x2_t v93 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v60, v91), v59, v90), v54);
      float64x2_t v94 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v50, v91), *v46, v90), v54);
      float64x2_t v95 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v92, 0));
      float64x2_t v96 = vmulq_f64(*v58, v95);
      float64x2_t v97 = vnegq_f64((float64x2_t)vdupq_lane_s64(*(uint64_t *)&v90, 0));
      float64x2_t v98 = vmlaq_n_f64(vmulq_f64(v79, v95), v64, v56);
      float64x2_t v99 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(*v51, v97), *v50, v92), v55);
      float64x2_t v100 = vmulq_n_f64(vmlaq_n_f64(vmulq_f64(v64, v97), v60, v92), v55);
      float64x2_t v101 = vmulq_n_f64(vmlaq_n_f64(v96, *v51, v56), v57);
      float64x2_t v102 = vmulq_n_f64(v98, v57);
      float64x2_t v103 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v100, v93), v136, v92), v74, v89, 0);
      float64x2_t v104 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(v99, v94), v72, v92), v73, v89, 0);
      float64x2_t v105 = vmlaq_n_f64(vsubq_f64(v102, v100), v74, v56);
      float64x2_t v106 = vmulq_f64(v102, v97);
      float64x2_t v107 = vmulq_f64(v101, v97);
      float64x2_t v108 = vmlaq_n_f64(vsubq_f64(v101, v99), v73, v56);
      float64x2_t v109 = vmlaq_n_f64(v107, v99, v56);
      float64x2_t v110 = vmlaq_n_f64(v106, v100, v56);
      float64x2_t v111 = vmulq_f64(v100, v91);
      float64x2_t v112 = vmlaq_n_f64(vmulq_f64(v99, v91), v94, v92);
      float64x2_t v113 = vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(vmulq_n_f64(v110, v83), vmulq_n_f64(vmlaq_n_f64(v111, v93, v92), v80.f64[0])), vmulq_n_f64(v103, v80.f64[0]), v92), vmulq_n_f64(vmlsq_lane_f64(v105, v87, v90, 0), v83), v90, 0);
      float64x2_t v114 = vmulq_n_f64(vmulq_n_f64(v88, v55), v53);
      float64x2_t v115 = vmulq_n_f64(vmulq_n_f64(vmlsq_lane_f64(vmlaq_n_f64(vsubq_f64(vmulq_n_f64(v109, v83), vmulq_n_f64(v112, v80.f64[0])), vmulq_n_f64(v104, v80.f64[0]), v92), vmulq_n_f64(vmlsq_lane_f64(v108, v85, v90, 0), v83), v90, 0), v55), v53);
      float64x2_t v116 = vmulq_n_f64(vmulq_n_f64(v113, v55), v53);
      long long v117 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)v39);
      *long long v117 = *v50;
      v117[1] = v60;
      float64x2_t v118 = vaddq_f64(*v50, vdivq_f64(vmulq_n_f64(vmulq_n_f64(v86, v55), v53), v135));
      float64x2_t v119 = vaddq_f64(v50[1], vdivq_f64(v114, v135));
      char v120 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)(v39 + 1));
      float64x2_t *v120 = v118;
      v120[1] = v119;
      float64x2_t v121 = vsubq_f64(*v51, vdivq_f64(v115, v135));
      float64x2_t v122 = vsubq_f64(v51[1], vdivq_f64(v116, v135));
      float64x2_t v123 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)(v39 + 2));
      *float64x2_t v123 = v121;
      v123[1] = v122;
      LOWORD(v39) = v39 + 3;
      uint64_t v38 = v47;
    }
    while (v18 != v47);
    uint64_t v39 = (unsigned __int16)v39;
  }
  uint64_t v124 = (uint64_t)&(*a1)[7 * v18];
  long long v125 = *(_OWORD *)(v124 + 32);
  float64x2_t v126 = (_OWORD *)(*(void *)a2 + 32 * v39);
  *float64x2_t v126 = *(_OWORD *)(v124 + 16);
  v126[1] = v125;
  unint64_t v127 = (unint64_t)a1[1];
  float64x2_t v138 = 0;
  uint64_t v139 = 0;
  __p = 0;
  if (v127)
  {
    std::vector<double>::__vallocate[abi:nn180100](&__p, v127);
    uint64_t v128 = (char *)v138;
    bzero(v138, 8 * v127);
    float64x2_t v129 = &v128[8 * v127];
    float64x2_t v138 = v129;
    float64x2_t v130 = a1[1];
    uint64_t v131 = (char *)__p;
    if (v130)
    {
      float64x2_t v132 = 0;
      uint64_t v133 = (uint64_t *)&(*a1)->f64[1];
      do
      {
        uint64_t v134 = *v133;
        v133 += 14;
        *(void *)&v131[8 * (void)v132] = v134;
        float64x2_t v132 = (float64x2_t *)((char *)v132 + 1);
      }
      while (v130 != v132);
    }
  }
  else
  {
    uint64_t v131 = 0;
    float64x2_t v129 = 0;
  }
  *(unsigned char *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v131, (uint64_t)v129, (v129 - v131) >> 3);
    uint64_t v131 = (char *)__p;
    float64x2_t v129 = (char *)v138;
  }
  *(void *)(a2 + 48) = *(void *)v131;
  *(void *)(a2 + 56) = *((void *)v129 - 1);
  float64x2_t v138 = v131;
  operator delete(v131);
  if (v140)
  {
    float64x2_t v141 = v140;
    operator delete(v140);
  }
  if (v143)
  {
    int64x2_t v144 = v143;
    operator delete(v143);
  }
}

void _ZN4geom19interpolating_curveIDv4_dE20build_natural_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(void *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v139 = 0;
  float64x2_t v140 = 0;
  uint64_t v141 = 0;
  float64x2_t v136 = 0;
  float64x2_t v137 = 0;
  uint64_t v138 = 0;
  uint64_t v133 = 0;
  uint64_t v134 = 0;
  uint64_t v135 = 0;
  __p = 0;
  uint64_t v131 = 0;
  uint64_t v132 = 0;
  unint64_t v4 = a1[1];
  uint64_t v128 = 0;
  uint64_t v129 = 0;
  unint64_t v127 = 0;
  if (v4)
  {
    std::vector<double>::__vallocate[abi:nn180100](&v127, v4);
    __int16 v5 = v128;
    bzero(v128, 8 * v4);
    unint64_t v4 = (unint64_t)v5 + 8 * v4;
    uint64_t v6 = a1[1];
    if (v6)
    {
      uint64_t v7 = 0;
      uint64_t v8 = v127;
      uint64_t v9 = (uint64_t *)(*a1 + 8);
      do
      {
        uint64_t v10 = *v9;
        v9 += 14;
        *(void *)&v8[8 * v7++] = v10;
      }
      while (v6 != v7);
    }
  }
  else
  {
    LOWORD(v6) = 0;
  }
  float64x2_t v11 = v127;
  unint64_t v12 = (unsigned __int16)v6;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v139, (unsigned __int16)v6);
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v136, v12);
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v133, v12);
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, v12);
  unint64_t v13 = v12 - 1;
  uint64_t v14 = v139;
  float64x2_t v15 = (char *)&v139[2 * v12 - 2];
  *(_OWORD *)float64x2_t v15 = 0u;
  *((_OWORD *)v15 + 1) = 0u;
  *uint64_t v14 = 0u;
  v14[1] = 0u;
  float64x2_t v16 = (float64x2_t *)__p;
  uint64_t v17 = (float64x2_t *)((char *)__p + 32 * v12 - 32);
  __asm { FMOV            V1.2D, #1.0 }
  float64x2_t *v17 = _Q1;
  v17[1] = _Q1;
  *float64x2_t v16 = _Q1;
  v16[1] = _Q1;
  float64x2_t v23 = (float64x2_t *)v136;
  float64x2_t v24 = (char *)v136 + 32 * v12 - 32;
  *float64x2_t v24 = 0u;
  v24[1] = 0u;
  *float64x2_t v23 = 0u;
  v23[1] = 0u;
  float64x2_t v25 = (float64x2_t *)v133;
  float64x2_t v26 = (char *)v133 + 32 * v12 - 32;
  *float64x2_t v26 = 0u;
  v26[1] = 0u;
  *float64x2_t v25 = 0u;
  v25[1] = 0u;
  if (v12 - 1 >= 2)
  {
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = (double *)(v11 + 8);
    do
    {
      double v30 = *v29;
      *(double *)&uint64_t v31 = *v29 - *(v29 - 1);
      double v32 = v29[1];
      ++v29;
      *(double *)&uint64_t v33 = v32 - v30;
      int64x2_t v34 = vdupq_lane_s64(v31, 0);
      unint64_t v35 = (int64x2_t *)&v14[2 * v28 + 2];
      *unint64_t v35 = v34;
      v35[1] = v34;
      int64x2_t v36 = vdupq_lane_s64(COERCE__INT64(*(double *)&v31 + *(double *)&v33 + *(double *)&v31 + *(double *)&v33), 0);
      float64x2_t v37 = (int64x2_t *)&v16[2 * v28 + 2];
      int64x2_t v38 = vdupq_lane_s64(v33, 0);
      *float64x2_t v37 = v36;
      v37[1] = v36;
      uint64_t v39 = (int64x2_t *)&v23[2 * v28 + 2];
      *uint64_t v39 = v38;
      v39[1] = v38;
      double v40 = 3.0 / *(double *)&v33;
      float64x2_t v41 = (float64x2_t *)(*a1 + v27);
      float64x2_t v42 = v41[9];
      float64x2_t v43 = vsubq_f64(v41[16], v42);
      float64x2_t v44 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(3.0 / *(double *)&v31), 0));
      float64x2_t v45 = vmulq_f64(vsubq_f64(v42, v41[2]), v44);
      float64x2_t v46 = vmlaq_n_f64(vmulq_f64(vsubq_f64(v41[8], v41[1]), v44), vsubq_f64(v41[15], v41[8]), v40);
      uint64_t v47 = (uint64_t)&v25[2 * v28 + 2];
      *(float64x2_t *)uint64_t v47 = v46;
      *(float64x2_t *)(v47 + 16) = vmlaq_n_f64(v45, v43, v40);
      ++v28;
      v27 += 112;
    }
    while (v12 - 2 != v28);
  }
  int64_t v48 = v131 - (unsigned char *)v16;
  unint64_t v49 = ((unint64_t)(v131 - (unsigned char *)v16) >> 5) - 1;
  float64x2_t v50 = vdivq_f64(v23[1], v16[1]);
  *float64x2_t v23 = vdivq_f64(*v23, *v16);
  v23[1] = v50;
  float64x2_t v51 = vdivq_f64(v25[1], v16[1]);
  *float64x2_t v25 = vdivq_f64(*v25, *v16);
  v25[1] = v51;
  if ((int)v49 > 1)
  {
    unint64_t v52 = v49 - 1;
    double v53 = v16 + 2;
    double v54 = v14 + 2;
    double v55 = v25 + 2;
    double v56 = v23 + 2;
    do
    {
      float64x2_t v58 = v56[-2];
      float64x2_t v57 = v56[-1];
      float64x2_t v59 = vdivq_f64(v56[1], vmlsq_f64(v53[1], v57, v54[1]));
      *double v56 = vdivq_f64(*v56, vmlsq_f64(*v53, v58, *v54));
      v56[1] = v59;
      v56 += 2;
      float64x2_t v61 = *v54;
      float64x2_t v60 = v54[1];
      v54 += 2;
      float64x2_t v63 = *v53;
      float64x2_t v62 = v53[1];
      v53 += 2;
      float64x2_t v64 = vdivq_f64(vmlsq_f64(v55[1], v55[-1], v60), vmlsq_f64(v62, v57, v60));
      *double v55 = vdivq_f64(vmlsq_f64(*v55, v55[-2], v61), vmlsq_f64(v63, v58, v61));
      v55[1] = v64;
      v55 += 2;
      --v52;
    }
    while (v52);
  }
  float64x2_t v65 = &v25[2 * (int)v49];
  float64x2_t v66 = &v14[2 * (int)v49];
  float64x2_t v68 = *v66;
  float64x2_t v67 = v66[1];
  uint64_t v69 = (v48 << 27) - 0x200000000;
  float64x2_t v70 = (float64x2_t *)((char *)v25 + (v69 >> 27));
  float64x2_t v71 = vmlsq_f64(*v65, *v70, v68);
  float64x2_t v72 = vmlsq_f64(v65[1], v70[1], v67);
  float64x2_t v73 = &v16[2 * (int)v49];
  float64x2_t v74 = (float64x2_t *)((char *)v23 + (v69 >> 27));
  float64x2_t v75 = vdivq_f64(v72, vmlsq_f64(v73[1], v74[1], v67));
  *float64x2_t v65 = vdivq_f64(v71, vmlsq_f64(*v73, *v74, v68));
  v65[1] = v75;
  if ((int)v49 >= 1)
  {
    do
    {
      float64x2_t v76 = &v25[2 * v49];
      BOOL v77 = v49-- > 1;
      float64x2_t v78 = &v23[2 * v49];
      float64x2_t v79 = *v76;
      float64x2_t v80 = v76[1];
      float64x2_t v81 = &v25[2 * v49];
      float64x2_t v82 = vmlsq_f64(v81[1], v80, v78[1]);
      float64x2_t *v81 = vmlsq_f64(*v81, v79, *v78);
      v81[1] = v82;
    }
    while (v77);
  }
  __asm { FMOV            V19.2D, #2.0 }
  if (v12 != 1)
  {
    uint64_t v84 = 0;
    float64x2_t v85 = (double *)(v11 + 8);
    float64x2_t v86 = v25 + 2;
    do
    {
      double v87 = *v85 - *(v85 - 1);
      float64x2_t v88 = (float64x2_t *)(*a1 + v84);
      float64x2_t v89 = vnegq_f64((float64x2_t)vdupq_lane_s64(COERCE__INT64(v87 / 3.0), 0));
      float64x2_t v90 = vmlaq_n_f64(vmulq_f64(vmlaq_f64(v86[1], _Q19, v86[-1]), v89), vsubq_f64(v88[9], v88[2]), 1.0 / v87);
      *float64x2_t v23 = vmlaq_n_f64(vmulq_f64(vmlaq_f64(*v86, _Q19, v86[-2]), v89), vsubq_f64(v88[8], v88[1]), 1.0 / v87);
      v23[1] = v90;
      v23 += 2;
      double v91 = 1.0 / (v87 * 3.0);
      float64x2_t v92 = vmulq_n_f64(vsubq_f64(*v86, v86[-2]), v91);
      float64x2_t v93 = vmulq_n_f64(vsubq_f64(v86[1], v86[-1]), v91);
      v84 += 112;
      *float64x2_t v16 = v92;
      v16[1] = v93;
      v16 += 2;
      ++v85;
      v86 += 2;
      --v13;
    }
    while (v13);
  }
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  __int16 v94 = *((_WORD *)a1 + 4);
  unsigned __int16 v95 = v94 - 1;
  if (v94 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    unsigned int v101 = 0;
    uint64_t v97 = 0;
    if (!*(unsigned char *)(a2 + 66)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    float64x2_t v126 = _Q19;
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v95 + 1));
    *(_WORD *)(a2 + 64) = v95;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v95 + 1);
    }
    uint64_t v96 = 0;
    LOWORD(v97) = 0;
    float64x2_t v98 = (float64x2_t *)v136;
    float64x2_t v99 = (float64x2_t *)v133;
    float64x2_t v100 = (float64x2_t *)__p;
    unsigned int v101 = v95;
    float64x2_t v102 = (double *)(v11 + 8);
    __asm { FMOV            V1.2D, #3.0 }
    uint64_t v104 = v95;
    do
    {
      double v105 = *(v102 - 1);
      float64x2_t v106 = (float64x2_t *)(*a1 + v96);
      double v107 = *v102 - v105;
      double v108 = v105 - v105;
      float64x2_t v109 = v106[1];
      float64x2_t v110 = v106[2];
      float64x2_t v111 = *v98;
      float64x2_t v112 = v98[1];
      v98 += 2;
      float64x2_t v114 = *v99;
      float64x2_t v113 = v99[1];
      v99 += 2;
      float64x2_t v116 = v106[8];
      float64x2_t v115 = v106[9];
      float64x2_t v117 = *v100;
      float64x2_t v118 = v100[1];
      v100 += 2;
      float64x2_t v119 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)v97);
      *float64x2_t v119 = v109;
      v119[1] = v110;
      char v120 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)(v97 + 1));
      LOWORD(v119) = v97 + 2;
      float64x2_t *v120 = vaddq_f64(v109, vdivq_f64(vmulq_n_f64(vmlaq_n_f64(v111, vmlaq_f64(vmulq_n_f64(v117, v108 * 3.0), v126, v114), v108), v107), _Q1));
      v120[1] = vaddq_f64(v110, vdivq_f64(vmulq_n_f64(vmlaq_n_f64(v112, vmlaq_f64(vmulq_n_f64(v118, v108 * 3.0), v126, v113), v108), v107), _Q1));
      LOWORD(v97) = v97 + 3;
      float64x2_t v121 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)v119);
      ++v102;
      v96 += 112;
      float64x2_t *v121 = vsubq_f64(v116, vdivq_f64(vmulq_n_f64(vmlaq_n_f64(v111, vmlaq_f64(vmulq_n_f64(v117, v107 * 3.0), v126, v114), v107), v107), _Q1));
      v121[1] = vsubq_f64(v115, vdivq_f64(vmulq_n_f64(vmlaq_n_f64(v112, vmlaq_f64(vmulq_n_f64(v118, v107 * 3.0), v126, v113), v107), v107), _Q1));
      --v104;
    }
    while (v104);
    uint64_t v97 = (unsigned __int16)v97;
  }
  uint64_t v122 = *a1 + 112 * v101;
  long long v123 = *(_OWORD *)(v122 + 16);
  long long v124 = *(_OWORD *)(v122 + 32);
  long long v125 = (_OWORD *)(*(void *)a2 + 32 * v97);
  *long long v125 = v123;
  v125[1] = v124;
  *(unsigned char *)(a2 + 66) = 0;
  std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v11, v4, (uint64_t)(v4 - (void)v11) >> 3);
  *(void *)(a2 + 48) = *(void *)v11;
  *(void *)(a2 + 56) = *(void *)(v4 - 8);
  operator delete(v11);
  if (__p)
  {
    uint64_t v131 = __p;
    operator delete(__p);
  }
  if (v133)
  {
    uint64_t v134 = v133;
    operator delete(v133);
  }
  if (v136)
  {
    float64x2_t v137 = v136;
    operator delete(v136);
  }
  if (v139)
  {
    float64x2_t v140 = v139;
    operator delete(v139);
  }
}

void _ZN4geom19interpolating_curveIDv4_dE20build_hermite_splineERKNS_5sliceINS_17interpolating_keyIS1_EEEE(_WORD *a1@<X1>, uint64_t a2@<X8>)
{
  __int16 v4 = a1[4];
  unsigned __int16 v5 = v4 - 1;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  *(void *)(a2 + 72) = 0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  if (v4 == 1)
  {
    *(_WORD *)(a2 + 64) = 0;
    if (!*(unsigned char *)(a2 + 66)) {
      *(void *)(a2 + 32) = 0;
    }
  }
  else
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm(a2, (unsigned __int16)(3 * v5 + 1));
    *(_WORD *)(a2 + 64) = v5;
    if (!*(unsigned char *)(a2 + 66)) {
      std::vector<double>::resize(a2 + 24, v5 + 1);
    }
  }
  __p = 0;
  int64x2_t v34 = 0;
  uint64_t v35 = 0;
  std::vector<double>::resize((uint64_t)&__p, v5 + 1);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = (char *)__p;
  *(void *)__p = *(void *)(*(void *)a1 + 8);
  if (v5)
  {
    uint64_t v8 = 0;
    LOWORD(v9) = 0;
    uint64_t v10 = (double *)(v7 + 8);
    __asm { FMOV            V0.2D, #3.0 }
    do
    {
      float64x2_t v16 = (float64x2_t *)(*(void *)a1 + v8);
      double v17 = v16[7].f64[1];
      double *v10 = v17;
      double v18 = v17 - *(v10 - 1);
      float64x2_t v19 = vmulq_n_f64(v16[5], v18);
      float64x2_t v20 = vmulq_n_f64(v16[6], v18);
      float64x2_t v21 = vmulq_n_f64(v16[10], v18);
      float64x2_t v22 = vmulq_n_f64(v16[11], v18);
      float64x2_t v23 = v16[2];
      float64x2_t v24 = (_OWORD *)(*(void *)a2 + 32 * (unsigned __int16)v9);
      *float64x2_t v24 = v16[1];
      v24[1] = v23;
      LOWORD(v24) = v9 + 2;
      float64x2_t v25 = vaddq_f64(vdivq_f64(v20, _Q0), v16[2]);
      uint64_t v26 = *(void *)a2 + 32 * (unsigned __int16)(v9 + 1);
      *(float64x2_t *)uint64_t v26 = vaddq_f64(vdivq_f64(v19, _Q0), v16[1]);
      *(float64x2_t *)(v26 + 16) = v25;
      LOWORD(v9) = v9 + 3;
      float64x2_t v27 = vsubq_f64(v16[8], vdivq_f64(v21, _Q0));
      float64x2_t v28 = vsubq_f64(v16[9], vdivq_f64(v22, _Q0));
      uint64_t v29 = (float64x2_t *)(*(void *)a2 + 32 * (unsigned __int16)v24);
      *uint64_t v29 = v27;
      v29[1] = v28;
      v8 += 112;
      ++v10;
    }
    while (112 * v5 != v8);
    uint64_t v6 = *(void *)a1;
    uint64_t v9 = (unsigned __int16)v9;
  }
  else
  {
    uint64_t v9 = 0;
  }
  uint64_t v30 = v6 + 112 * *((void *)a1 + 1);
  long long v31 = *(_OWORD *)(v30 - 80);
  double v32 = (_OWORD *)(*(void *)a2 + 32 * v9);
  *double v32 = *(_OWORD *)(v30 - 96);
  v32[1] = v31;
  *(unsigned char *)(a2 + 66) = 0;
  if ((void **)(a2 + 24) != &__p)
  {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>((char *)(a2 + 24), v7, (uint64_t)v34, (v34 - v7) >> 3);
    uint64_t v7 = (char *)__p;
  }
  *(void *)(a2 + 48) = *(void *)v7;
  *(void *)(a2 + 56) = *((void *)v34 - 1);
  int64x2_t v34 = v7;
  operator delete(v7);
}

double _ZNK4geom20interpolating_splineIDv4_dE21evaluate_total_lengthEv(uint64_t a1)
{
  unsigned int v1 = *(unsigned __int16 *)(a1 + 64);
  if (*(_WORD *)(a1 + 64)) {
    unsigned __int16 v2 = *(_WORD *)(a1 + 64);
  }
  else {
    unsigned __int16 v2 = -1;
  }
  if (*(unsigned char *)(a1 + 66))
  {
    if (v1 == v2) {
      double v3 = *(double *)(a1 + 56);
    }
    else {
      double v3 = *(double *)(a1 + 48) + (double)v2 * ((*(double *)(a1 + 56) - *(double *)(a1 + 48)) / (double)v1);
    }
  }
  else
  {
    double v3 = *(double *)(*(void *)(a1 + 24) + 8 * v2);
  }
  return _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(a1, v3);
}

uint64_t geom::interpolating_spline<float>::~interpolating_spline(uint64_t a1)
{
  unsigned __int16 v2 = *(void **)(a1 + 64);
  if (v2)
  {
    *(void *)(a1 + 72) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  __int16 v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t geom::interpolating_spline<double>::~interpolating_spline(uint64_t a1)
{
  unsigned __int16 v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  __int16 v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

__n128 _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(uint64_t a1, __n128 *a2)
{
  __int16 v4 = *(void **)a1;
  if (v4)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
  }
  __n128 result = *a2;
  *(__n128 *)a1 = *a2;
  *(void *)(a1 + 16) = a2[1].n128_u64[0];
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

unint64_t geom::interpolating_spline<float>::find_span(uint64_t a1, float a2)
{
  if (*(unsigned char *)(a1 + 58))
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 56);
    float v3 = *(float *)(a1 + 48);
    float v4 = *(float *)(a1 + 52);
    if (v3 >= a2)
    {
      LOWORD(v6) = 0;
      unint64_t v7 = 0;
    }
    else if (v4 <= a2)
    {
      LOWORD(v6) = v2 - 1;
      unint64_t v7 = 0x3F80000000000000;
    }
    else
    {
      float v5 = (float)((float)(a2 - v3) / (float)(v4 - v3)) * (float)v2;
      int v6 = (int)v5;
      unint64_t v7 = (unint64_t)COERCE_UNSIGNED_INT(v5 - (float)(int)v5) << 32;
    }
    return v7 | (unsigned __int16)v6;
  }
  else
  {
    uint64_t v8 = *(float **)(a1 + 24);
    float v9 = *v8;
    if (*v8 >= a2)
    {
      uint64_t v16 = 0;
      float v19 = 1.0 / (float)(v8[1] - v9);
      float v20 = v9 - v9;
    }
    else
    {
      uint64_t v10 = (*(void *)(a1 + 32) - (void)v8) >> 2;
      unsigned __int16 v11 = v10 - 1;
      float v12 = v8[(unsigned __int16)(v10 - 1)];
      if (v12 <= a2)
      {
        unsigned __int16 v22 = v10 - 2;
        uint64_t v16 = (unsigned __int16)(v10 - 2);
        float64x2_t v23 = &v8[v22];
        float v19 = 1.0 / (float)(v23[1] - *v23);
        float v20 = v12 - *v23;
      }
      else
      {
        int v13 = 0;
        unsigned __int16 v14 = v10 - 1;
LABEL_8:
        int v15 = v14;
        while (1)
        {
          uint64_t v16 = (v13 + v15) >> 1;
          float v17 = v8[v16];
          if (v17 > a2)
          {
            unsigned __int16 v14 = v16 - 1;
            goto LABEL_8;
          }
          float v18 = v8[(v16 + 1)];
          if (v18 >= a2) {
            break;
          }
          int v13 = (unsigned __int16)(v16 + 1);
        }
        if (v16 == v11 - 1 || v18 > a2)
        {
          float v19 = 1.0 / (float)(v18 - v17);
          float v20 = a2 - v17;
        }
        else
        {
          uint64_t v16 = (unsigned __int16)(v16 + 1);
          float64x2_t v25 = &v8[v16];
          float v19 = 1.0 / (float)(v25[1] - *v25);
          float v20 = v18 - *v25;
        }
      }
    }
    return v16 | ((unint64_t)COERCE_UNSIGNED_INT(v20 * v19) << 32);
  }
}

float geom::interpolating_spline<float>::evaluate_span_length(uint64_t a1, unsigned __int16 a2)
{
  if (*(unsigned char *)(a1 + 58))
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 56);
    float v3 = *(float *)(a1 + 52);
    if (v2 == a2) {
      float v4 = *(float *)(a1 + 52);
    }
    else {
      float v4 = *(float *)(a1 + 48) + (float)((float)a2 * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
    }
    if (v2 != (unsigned __int16)(a2 + 1)) {
      float v3 = *(float *)(a1 + 48)
    }
         + (float)((float)(unsigned __int16)(a2 + 1) * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    float v4 = *(float *)(v5 + 4 * a2);
    float v3 = *(float *)(v5 + 4 * (unsigned __int16)(a2 + 1));
  }
  return geom::interpolating_spline<float>::evaluate_length_betweeen((void *)a1, v4, v3);
}

float geom::interpolating_spline<float>::evaluate_length_betweeen(void *a1, float a2, float a3)
{
  uint64_t v4 = 0;
  float v5 = (float)(a2 + a3) * 0.5;
  float v6 = (float)(a3 - a2) * 0.5;
  float v7 = 0.0;
  do
  {
    float v8 = *(float *)((char *)&geom::interpolating_spline<float>::evaluate_length_betweeen(float,float)const::table
                  + v4
                  + 4);
    unint64_t span = geom::interpolating_spline<float>::find_span((uint64_t)a1, v5+ (float)(v6* *(float *)((char *)&geom::interpolating_spline<float>::evaluate_length_betweeen(float,float)const::table+ v4)));
    int v11 = (unsigned __int16)(3 * span);
    float v12 = *(float *)(*a1 + 4 * (v11 + 1));
    float v13 = *(float *)(*a1 + 4 * (v11 + 2));
    float v14 = (float)((float)(v12 - *(float *)(*a1 + 4 * (unsigned __int16)(3 * span)))
                * (float)((float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1))))
        + (float)(v13 - v12)
        * (((float)(1.0 - *((float *)&span + 1)) + (float)(1.0 - *((float *)&span + 1)))
         * *((float *)&span + 1))
        + (float)((float)(*((float *)&span + 1) * *((float *)&span + 1))
                * (float)(*(float *)(*a1 + 4 * (v11 + 3)) - v13));
    float v15 = v10 * 3.0 * v14;
    float v7 = v7 + (float)(v8 * fabsf(v15));
    v4 += 8;
  }
  while (v4 != 128);
  return v6 * v7;
}

void std::vector<geom::interpolating_spline<float>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 88;
    geom::interpolating_spline<float>::interpolating_spline(v6 - 88, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_spline<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(88 * a2);
}

__n128 geom::interpolating_spline<float>::interpolating_spline(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  uint64_t v2 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(void *)(a1 + 48) = v2;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 64) = 0;
  __n128 result = *(__n128 *)(a2 + 64);
  *(__n128 *)(a1 + 64) = result;
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  return result;
}

uint64_t std::__split_buffer<geom::interpolating_spline<float>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    geom::interpolating_spline<float>::~interpolating_spline(i - 88);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<unsigned short>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 1)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 2 * a2);
      v7 += 2 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    uint64_t v10 = a2 + (v9 >> 1);
    if (v10 < 0) {
      abort();
    }
    uint64_t v11 = v9 >> 1;
    unint64_t v12 = v5 - v8;
    if (v12 > v10) {
      uint64_t v10 = v12;
    }
    if (v12 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v13 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v13 = v10;
    }
    if (v13)
    {
      float v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      float v14 = 0;
    }
    float v15 = &v14[2 * v11];
    uint64_t v16 = &v14[2 * v13];
    bzero(v15, 2 * a2);
    float v17 = &v15[2 * a2];
    while (v7 != v8)
    {
      __int16 v18 = *((_WORD *)v7 - 1);
      v7 -= 2;
      *((_WORD *)v15 - 1) = v18;
      v15 -= 2;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<unsigned short>>(uint64_t a1, uint64_t a2)
{
  if (a2 < 0) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(2 * a2);
}

void geom::anonymous namespace'::fit_function_with_spline_recursively<geom::interpolating_curve<float>::build_helper(std::vector<geom::interpolating_key<float>> const&,BOOL)::{lambda(float)#1},float>(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4, double a5, double a6, int8x16_t a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  float v15 = *(float *)(a2 + 8);
  float v16 = *(float *)(a2 + 12);
  float v18 = *(float *)(a2 + 16);
  float v17 = *(float *)(a2 + 20);
  float v20 = *(float *)a2;
  float v19 = *(float *)(a2 + 4);
  double v21 = *(float *)a2;
  double v22 = v19;
  if (*((unsigned char *)a3 + 8))
  {
    float v23 = (v21 + v22 * 2.0) * 0.333333333;
    *(float *)a7.i32 = (v22 + v21 * 2.0) * 0.333333333;
    float v24 = (float)(v16 - v15) / (float)(v17 - v15);
    float v25 = (float)(v18 - v15) / (float)(v17 - v15);
    double v26 = v24;
    float v27 = 1.0 - v24;
    float v28 = 1.0 - v25;
    float v29 = -(float)(v24 * v24);
    *(float *)a7.i32 = (float)(*(float *)a7.i32 + (float)((float)-(float)((float)(v27 * v27) * v27) * v20))
                     + (float)((float)(v24 * v29) * v19);
    *(float *)&a7.i32[1] = (float)(v23 + (float)((float)(v28 * (float)-(float)(v28 * v28)) * v20))
                         + (float)((float)-(float)((float)(v25 * v25) * v25) * v19);
    v30.f32[0] = (float)(v25 * v25) * (float)(1.0 - v25);
    v30.f32[1] = v29 * (float)(1.0 - v24);
    v31.f32[0] = (float)(1.0 - v25) * (float)-(float)(v25 * (float)(1.0 - v25));
    float v32 = v24 * (float)(1.0 - v24);
    v31.f32[1] = v27 * v32;
    float v33 = 1.0
        / (v26
         * 3.0
         * v25
         * (float)((float)(v28 * (float)-(float)(v32 * v28)) + (float)((float)(v25 * (float)(v27 * v27)) * v28)));
    int32x2_t v34 = (int32x2_t)vmul_f32(v30, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vmul_f32(v31, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vadd_f32((float32x2_t)vzip1_s32(v34, *(int32x2_t *)a7.i8), (float32x2_t)vzip2_s32(v34, *(int32x2_t *)a7.i8));
    *(float32x2_t *)a12.i8 = vmul_n_f32(*(float32x2_t *)a7.i8, v33);
    a7.i32[0] = *(_DWORD *)a2;
    int8x16_t v99 = a7;
    __int32 v35 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    float64x2_t v36 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_236F14680, v17), (float64x2_t)xmmword_236F14690, v15), (float64x2_t)xmmword_236F146A0, v16), (float64x2_t)xmmword_236F146B0, v18), (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    *(float32x2_t *)a12.i8 = vcvt_f32_f64(v36);
    LODWORD(v36.f64[0]) = *(_DWORD *)(a2 + 8);
    int8x16_t v99 = (int8x16_t)v36;
    __int32 v35 = *(_DWORD *)(a2 + 20);
  }
  unsigned int v37 = *(unsigned __int8 *)(a2 + 24);
  if (v37 < *((unsigned __int8 *)a3 + 1))
  {
    float v38 = (v22 + v21 * 5.0) * 0.166666667;
    float v39 = (float)(v20 + v19) * 0.5;
    float v40 = (v21 + v22 * 5.0) * 0.166666667;
    uint64_t v41 = *a1;
    float v42 = v39;
    float v43 = v38;
    float v44 = v40;
    if (!*(unsigned char *)(*a1 + 192))
    {
      uint64_t v45 = *(void *)(v41 + 72);
      uint64_t v46 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v41 + 80) - v45) >> 3);
      float v91 = *(float *)(a2 + 12);
      float v92 = *(float *)(a2 + 16);
      int8x16_t v93 = a12;
      __int32 v96 = v35;
      if ((v46 & 0xFFFE) != 0 && *(float *)(v41 + 184) < v38)
      {
        LOWORD(v46) = v46 - 1;
        if (*(float *)(v41 + 188) > v38)
        {
          for (unsigned __int16 i = 0; ; unsigned __int16 i = v49 + 1)
          {
            int v48 = i;
            while (1)
            {
              unsigned int v49 = (v48 + (unsigned __int16)v46) >> 1;
              if (*(float *)(v45 + 88 * v49 + 48) <= v38) {
                break;
              }
              LOWORD(v46) = v49 - 1;
            }
            if (*(float *)(v45 + 88 * v49 + 52) > v38) {
              break;
            }
          }
          LODWORD(v46) = (v48 + (unsigned __int16)v46) >> 1;
        }
      }
      else
      {
        LOWORD(v46) = 0;
      }
      int v52 = (unsigned __int16)v46;
      int v53 = (unsigned __int16)v46;
      double v54 = geom::interpolating_spline<float>::evaluate_length_at(v45 + 88 * (unsigned __int16)v46, v38);
      if (v53) {
        double v55 = *(float *)(*(void *)(v41 + 48) + 4 * (v52 - 1));
      }
      else {
        double v55 = 0.0;
      }
      a12 = v93;
      __int32 v35 = v96;
      float v16 = v91;
      float v18 = v92;
      float v43 = v55 + v54;
      uint64_t v58 = *a1;
      if (*(unsigned char *)(*a1 + 192))
      {
        float v42 = (float)(v20 + v19) * 0.5;
      }
      else
      {
        uint64_t v59 = *(void *)(v58 + 72);
        uint64_t v60 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v58 + 80) - v59) >> 3);
        if ((v60 & 0xFFFE) != 0 && *(float *)(v58 + 184) < v39)
        {
          LOWORD(v60) = v60 - 1;
          float v61 = v55 + v54;
          if (*(float *)(v58 + 188) > v39)
          {
            for (unsigned __int16 j = 0; ; unsigned __int16 j = v64 + 1)
            {
              int v63 = j;
              while (1)
              {
                unsigned int v64 = (v63 + (unsigned __int16)v60) >> 1;
                if (*(float *)(v59 + 88 * v64 + 48) <= v39) {
                  break;
                }
                LOWORD(v60) = v64 - 1;
              }
              if (*(float *)(v59 + 88 * v64 + 52) > v39) {
                break;
              }
            }
            LODWORD(v60) = (v63 + (unsigned __int16)v60) >> 1;
          }
        }
        else
        {
          float v61 = v55 + v54;
          LOWORD(v60) = 0;
        }
        int v65 = (unsigned __int16)v60;
        int v66 = (unsigned __int16)v60;
        double v67 = geom::interpolating_spline<float>::evaluate_length_at(v59 + 88 * (unsigned __int16)v60, (float)(v20 + v19) * 0.5);
        if (v66) {
          double v68 = *(float *)(*(void *)(v58 + 48) + 4 * (v65 - 1));
        }
        else {
          double v68 = 0.0;
        }
        a12 = v93;
        __int32 v35 = v96;
        float v16 = v91;
        float v18 = v92;
        float v43 = v61;
        float v42 = v68 + v67;
        uint64_t v69 = *a1;
        if (!*(unsigned char *)(*a1 + 192))
        {
          uint64_t v77 = *(void *)(v69 + 72);
          uint64_t v78 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v69 + 80) - v77) >> 3);
          float v90 = v43;
          if ((v78 & 0xFFFE) != 0 && *(float *)(v69 + 184) < v40)
          {
            LOWORD(v78) = v78 - 1;
            if (*(float *)(v69 + 188) > v40)
            {
              for (unsigned __int16 k = 0; ; unsigned __int16 k = v81 + 1)
              {
                int v80 = k;
                while (1)
                {
                  unsigned int v81 = (v80 + (unsigned __int16)v78) >> 1;
                  if (*(float *)(v77 + 88 * v81 + 48) <= v40) {
                    break;
                  }
                  LOWORD(v78) = v81 - 1;
                }
                if (*(float *)(v77 + 88 * v81 + 52) > v40) {
                  break;
                }
              }
              LODWORD(v78) = (v80 + (unsigned __int16)v78) >> 1;
            }
          }
          else
          {
            LOWORD(v78) = 0;
          }
          int v82 = (unsigned __int16)v78;
          int v83 = (unsigned __int16)v78;
          double v84 = geom::interpolating_spline<float>::evaluate_length_at(v77 + 88 * (unsigned __int16)v78, v40);
          if (v83) {
            double v85 = *(float *)(*(void *)(v69 + 48) + 4 * (v82 - 1));
          }
          else {
            double v85 = 0.0;
          }
          a12 = v93;
          __int32 v35 = v96;
          float v16 = v91;
          float v18 = v92;
          float v43 = v90;
          float v44 = v85 + v84;
          goto LABEL_47;
        }
      }
      float v44 = v40;
    }
LABEL_47:
    if (v37 < *(unsigned __int8 *)a3)
    {
LABEL_48:
      float v102 = v20;
      float v103 = (float)(v20 + v19) * 0.5;
      float v104 = v15;
      float v105 = v43;
      float v106 = v16;
      float v107 = v42;
      char v108 = v37 + 1;
      v100[0] = v103;
      v100[1] = v19;
      v100[2] = v42;
      v100[3] = v18;
      v100[4] = v44;
      v100[5] = v17;
      char v101 = v37 + 1;
      return;
    }
    float32x4_t v70 = (float32x4_t)vextq_s8(vextq_s8(v99, v99, 4uLL), a12, 0xCuLL);
    v70.i32[3] = v35;
    int8x16_t v71 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_236F146C0);
    float v72 = vaddv_f32(vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)));
    int8x16_t v73 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_236F146D0);
    float v74 = vaddv_f32(vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
    int8x16_t v75 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_236F146E0);
    float v76 = vaddv_f32(vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)));
    if (*((unsigned char *)a3 + 8))
    {
      if (fabsf(v38) <= 0.00001)
      {
        if (fabsf(v72) > 0.00001) {
          goto LABEL_48;
        }
      }
      else if (fabsf((float)(v38 - v72) / v38) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v39) <= 0.00001)
      {
        if (fabsf(v74) > 0.00001) {
          goto LABEL_48;
        }
      }
      else if (fabsf((float)(v39 - v74) / v39) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v40) <= 0.00001)
      {
        if (fabsf(v76) > 0.00001) {
          goto LABEL_48;
        }
      }
      else if (fabsf((float)(v40 - v76) / v40) > a3[1])
      {
        goto LABEL_48;
      }
      goto LABEL_16;
    }
    if (fabsf(v43) <= 0.00001)
    {
      if (fabsf(v72) > 0.00001) {
        goto LABEL_48;
      }
    }
    else if (fabsf((float)(v43 - v72) / v43) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v42) <= 0.00001)
    {
      if (fabsf(v74) > 0.00001) {
        goto LABEL_48;
      }
    }
    else if (fabsf((float)(v42 - v74) / v42) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v44) <= 0.00001)
    {
      if (fabsf(v76) > 0.00001) {
        goto LABEL_48;
      }
    }
    else if (fabsf((float)(v44 - v76) / v44) > a3[1])
    {
      goto LABEL_48;
    }
    goto LABEL_87;
  }
  if (*((unsigned char *)a3 + 8))
  {
LABEL_16:
    int v50 = *(unsigned __int16 *)(a4 + 56);
    int v51 = v50 + 1;
    if ((_WORD)v50 == 0xFFFF)
    {
      *(void *)(a4 + 8) = *(void *)a4;
      *(_WORD *)(a4 + 56) = 0;
      if (!*(unsigned char *)(a4 + 58)) {
        *(void *)(a4 + 32) = *(void *)(a4 + 24);
      }
    }
    else
    {
      unint64_t v94 = a12.i64[0];
      __int32 v97 = v35;
      std::vector<float>::resize(a4, (unsigned __int16)(3 * v51 + 1));
      a12.i64[0] = v94;
      __int32 v35 = v97;
      *(_WORD *)(a4 + 56) = v51;
      if (!*(unsigned char *)(a4 + 58))
      {
        std::vector<float>::resize(a4 + 24, (unsigned __int16)(v50 + 1) + 1);
        a12.i64[0] = v94;
        __int32 v35 = v97;
      }
    }
    double v56 = *(_DWORD **)a4;
    if (v50)
    {
      float64x2_t v57 = *(float **)(a4 + 24);
    }
    else
    {
      *double v56 = v99.i32[0];
      float64x2_t v57 = *(float **)(a4 + 24);
      float *v57 = v15;
    }
    v56[(unsigned __int16)(3 * v50 + 1)] = a12.i32[0];
    v56[(unsigned __int16)(3 * v50 + 2)] = a12.i32[1];
    v56[(unsigned __int16)(3 * v50 + 3)] = v35;
    v57[v51] = v17;
    return;
  }
LABEL_87:
  int v86 = *(unsigned __int16 *)(a4 + 56);
  int v87 = v86 + 1;
  if ((_WORD)v86 == 0xFFFF)
  {
    *(void *)(a4 + 8) = *(void *)a4;
    *(_WORD *)(a4 + 56) = 0;
    if (!*(unsigned char *)(a4 + 58)) {
      *(void *)(a4 + 32) = *(void *)(a4 + 24);
    }
  }
  else
  {
    unint64_t v95 = a12.i64[0];
    __int32 v98 = v35;
    std::vector<float>::resize(a4, (unsigned __int16)(3 * v87 + 1));
    a12.i64[0] = v95;
    __int32 v35 = v98;
    *(_WORD *)(a4 + 56) = v87;
    if (!*(unsigned char *)(a4 + 58))
    {
      std::vector<float>::resize(a4 + 24, (unsigned __int16)(v86 + 1) + 1);
      a12.i64[0] = v95;
      __int32 v35 = v98;
    }
  }
  float64x2_t v88 = *(_DWORD **)a4;
  if (v86)
  {
    float64x2_t v89 = *(float **)(a4 + 24);
  }
  else
  {
    *float64x2_t v88 = v99.i32[0];
    float64x2_t v89 = *(float **)(a4 + 24);
    *float64x2_t v89 = v20;
  }
  v88[(unsigned __int16)(3 * v86 + 1)] = a12.i32[0];
  v88[(unsigned __int16)(3 * v86 + 2)] = a12.i32[1];
  v88[(unsigned __int16)(3 * v86 + 3)] = v35;
  v89[v87] = v19;
}

uint64_t geom::interpolating_spline<float>::interpolating_spline(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::vector<float>::vector((std::vector<unsigned int> *)a1, (const std::vector<unsigned int> *)a2);
  std::vector<float>::vector(v4 + 1, (const std::vector<unsigned int> *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(void *)(a1 + 48) = v5;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 64), (const std::vector<unsigned int> *)(a2 + 64));
  return a1;
}

std::vector<unsigned int> *__cdecl std::vector<float>::vector(std::vector<unsigned int> *this, const std::vector<unsigned int> *__x)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  begiunsigned __int16 n = __x->__begin_;
  end = __x->__end_;
  int64_t v5 = (char *)end - (char *)__x->__begin_;
  if (end != __x->__begin_)
  {
    std::vector<float>::__vallocate[abi:nn180100](this, v5 >> 2);
    std::vector<unsigned int>::pointer v6 = this->__end_;
    memmove(v6, begin, v5);
    this->__end_ = (std::vector<unsigned int>::pointer)((char *)v6 + v5);
  }
  return this;
}

char *std::vector<float>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 62) {
    abort();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[4 * v4];
  return result;
}

void std::vector<float>::__append(char **a1, unint64_t a2)
{
  std::vector<unsigned int>::pointer v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 2)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 4 * a2);
      v7 += 4 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 2);
    if (v10 >> 62) {
      abort();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = v5 - v8;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      float v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      float v14 = 0;
    }
    float v15 = &v14[4 * v11];
    float v16 = &v14[4 * v13];
    bzero(v15, 4 * a2);
    float v17 = &v15[4 * a2];
    while (v7 != v8)
    {
      int v18 = *((_DWORD *)v7 - 1);
      v7 -= 4;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

char *std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 62) {
      abort();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<float>::__vallocate[abi:nn180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      int v18 = v9;
      float v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  float v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  float v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    int v18 = v9;
    float v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t geom::interpolating_spline<double>::find_span@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>, double a3@<D0>)
{
  if (!*(unsigned char *)(result + 66))
  {
    uint64_t v8 = *(double **)(result + 24);
    double v9 = *v8;
    if (*v8 >= a3)
    {
      *(_WORD *)a2 = 0;
      double v19 = 1.0 / (v8[1] - v9);
      *(double *)(a2 + 16) = v19;
      double v20 = v9 - v9;
    }
    else
    {
      uint64_t v10 = (*(void *)(result + 32) - (void)v8) >> 3;
      unsigned __int16 v11 = v10 - 1;
      double v12 = v8[(unsigned __int16)(v10 - 1)];
      if (v12 <= a3)
      {
        *(_WORD *)a2 = v10 - 2;
        double v21 = &v8[(unsigned __int16)(v10 - 2)];
        double v22 = *v21;
        double v19 = 1.0 / (v21[1] - *v21);
        *(double *)(a2 + 16) = v19;
        double v20 = v12 - v22;
      }
      else
      {
        int v13 = 0;
        unsigned __int16 v14 = v11;
LABEL_8:
        int v15 = v14;
        while (1)
        {
          unsigned int v16 = (v13 + v15) >> 1;
          double v17 = v8[v16];
          if (v17 > a3)
          {
            unsigned __int16 v14 = v16 - 1;
            goto LABEL_8;
          }
          double v18 = v8[v16 + 1];
          if (v18 >= a3) {
            break;
          }
          int v13 = (unsigned __int16)(v16 + 1);
        }
        if (v16 == v11 - 1 || v18 > a3)
        {
          *(_WORD *)a2 = v16;
          double v26 = 1.0 / (v18 - v17);
          *(double *)(a2 + 16) = v26;
          double v25 = (a3 - v17) * v26;
          goto LABEL_22;
        }
        *(_WORD *)a2 = v16 + 1;
        float v23 = &v8[(unsigned __int16)(v16 + 1)];
        double v24 = *v23;
        double v19 = 1.0 / (v23[1] - *v23);
        *(double *)(a2 + 16) = v19;
        double v20 = v18 - v24;
      }
    }
    double v25 = v20 * v19;
LABEL_22:
    *(double *)(a2 + 8) = v25;
    return result;
  }
  unsigned int v3 = *(unsigned __int16 *)(result + 64);
  double v4 = *(double *)(result + 48);
  double v5 = *(double *)(result + 56);
  if (v4 >= a3)
  {
    *(_WORD *)a2 = 0;
    double v7 = 0.0;
  }
  else if (v5 <= a3)
  {
    *(_WORD *)a2 = v3 - 1;
    double v7 = 1.0;
  }
  else
  {
    double v6 = (a3 - v4) / (v5 - v4) * (double)v3;
    *(_WORD *)a2 = (int)v6;
    double v7 = v6 - (double)(int)v6;
  }
  *(double *)(a2 + 8) = v7;
  *(double *)(a2 + 16) = (double)v3 / (v5 - v4);
  return result;
}

double geom::interpolating_spline<double>::evaluate_span_length(uint64_t a1, unsigned __int16 a2)
{
  if (*(unsigned char *)(a1 + 66))
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 64);
    double v3 = *(double *)(a1 + 56);
    if (v2 == a2) {
      double v4 = *(double *)(a1 + 56);
    }
    else {
      double v4 = *(double *)(a1 + 48) + (double)a2 * ((v3 - *(double *)(a1 + 48)) / (double)v2);
    }
    if (v2 != (unsigned __int16)(a2 + 1)) {
      double v3 = *(double *)(a1 + 48) + (double)(unsigned __int16)(a2 + 1) * ((v3 - *(double *)(a1 + 48)) / (double)v2);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    double v4 = *(double *)(v5 + 8 * a2);
    double v3 = *(double *)(v5 + 8 * (unsigned __int16)(a2 + 1));
  }
  return geom::interpolating_spline<double>::evaluate_length_betweeen((void *)a1, v4, v3);
}

double geom::interpolating_spline<double>::evaluate_length_betweeen(void *a1, double a2, double a3)
{
  uint64_t v4 = 0;
  double v5 = (a2 + a3) * 0.5;
  double v6 = (a3 - a2) * 0.5;
  double v7 = 0.0;
  do
  {
    double v8 = *(double *)((char *)&geom::interpolating_spline<double>::evaluate_length_betweeen(double,double)const::table
                   + v4
                   + 8);
    double v9 = v5
       + v6
       * *(double *)((char *)&geom::interpolating_spline<double>::evaluate_length_betweeen(double,double)const::table
                   + v4);
    uint64_t v14 = 0;
    double v15 = 0.0;
    double v16 = 0.0;
    geom::interpolating_spline<double>::find_span((uint64_t)a1, (uint64_t)&v14, v9);
    int v10 = (unsigned __int16)(3 * v14);
    double v11 = *(double *)(*a1 + 8 * (v10 + 1));
    double v12 = *(double *)(*a1 + 8 * (v10 + 2));
    double v7 = v7
       + v8
       * fabs(v16* 3.0* (v15 * (1.0 - v15 + 1.0 - v15) * (v12 - v11)+ (v11 - *(double *)(*a1 + 8 * (unsigned __int16)(3 * v14))) * ((1.0 - v15) * (1.0 - v15))+ (*(double *)(*a1 + 8 * (v10 + 3)) - v12) * (v15 * v15)));
    v4 += 16;
  }
  while (v4 != 256);
  return v6 * v7;
}

void std::vector<geom::interpolating_spline<double>>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  while (v4 != v5)
  {
    v4 -= 96;
    geom::interpolating_spline<double>::interpolating_spline(v6 - 96, v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 geom::interpolating_spline<double>::interpolating_spline(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  long long v2 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 48) = v2;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 72) = 0;
  __n128 result = *(__n128 *)(a2 + 72);
  *(__n128 *)(a1 + 72) = result;
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  return result;
}

uint64_t std::__split_buffer<geom::interpolating_spline<double>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    geom::interpolating_spline<double>::~interpolating_spline(i - 96);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void geom::anonymous namespace'::fit_function_with_spline_recursively<geom::interpolating_curve<double>::build_helper(std::vector<geom::interpolating_key<double>> const&,BOOL)::{lambda(double)#1},double>(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4)
{
  double v7 = *(double *)(a2 + 16);
  double v8 = *(double *)(a2 + 24);
  double v10 = *(double *)(a2 + 32);
  double v9 = *(double *)(a2 + 40);
  double v12 = *(double *)a2;
  double v11 = *(double *)(a2 + 8);
  if (*((unsigned char *)a3 + 8))
  {
    double v13 = (v8 - v7) / (v9 - v7);
    double v14 = (v10 - v7) / (v9 - v7);
    double v15 = 1.0 - v13;
    double v16 = 1.0 - v14;
    double v17 = -(v13 * v13);
    v18.f64[0] = (v11 + v12 * 2.0) * 0.333333333 + -(v15 * v15 * v15) * v12 + v13 * v17 * v11;
    v18.f64[1] = (v12 + v11 * 2.0) * 0.333333333 + v16 * -(v16 * v16) * v12 + -(v14 * v14 * v14) * v11;
    v19.f64[0] = v14 * v14 * (1.0 - v14);
    v19.f64[1] = v17 * (1.0 - v13);
    v20.f64[0] = (1.0 - v14) * -(v14 * (1.0 - v14));
    double v21 = v13 * (1.0 - v13);
    v20.f64[1] = (1.0 - v13) * v21;
    int64x2_t v22 = (int64x2_t)vmulq_f64(v19, v18);
    int64x2_t v23 = (int64x2_t)vmulq_f64(v20, v18);
    float64x2_t v24 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v23), (float64x2_t)vzip2q_s64(v22, v23));
    int64x2_t v25 = (int64x2_t)vmulq_n_f64(v24, 1.0 / (v13 * 3.0 * v14 * (v16 * -(v21 * v16) + v14 * (v15 * v15) * v16)));
    v24.f64[0] = *(float64_t *)a2;
    int64x2_t v90 = (int64x2_t)v24;
    float64_t v26 = *(double *)(a2 + 8);
  }
  else
  {
    float64x2_t v27 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_236F14680, v9), (float64x2_t)xmmword_236F14690, v7), (float64x2_t)xmmword_236F146A0, v8), (float64x2_t)xmmword_236F146B0, v10);
    int64x2_t v25 = (int64x2_t)vmulq_f64(v27, (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    v27.f64[0] = *(float64_t *)(a2 + 16);
    int64x2_t v90 = (int64x2_t)v27;
    float64_t v26 = *(double *)(a2 + 40);
  }
  unsigned int v28 = *(unsigned __int8 *)(a2 + 48);
  if (v28 < *((unsigned __int8 *)a3 + 1))
  {
    double v29 = (v11 + v12 * 5.0) * 0.166666667;
    double v30 = (v12 + v11) * 0.5;
    double v31 = (v12 + v11 * 5.0) * 0.166666667;
    uint64_t v32 = *a1;
    double v33 = v30;
    double v34 = v29;
    double v35 = v31;
    if (!*(unsigned char *)(*a1 + 208))
    {
      uint64_t v36 = *(void *)(v32 + 72);
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v32 + 80) - v36) >> 5);
      double v78 = *(double *)(a2 + 24);
      double v79 = *(double *)(a2 + 32);
      double v80 = *(double *)(a2 + 16);
      double v82 = *(double *)(a2 + 40);
      int64x2_t v84 = v25;
      double v87 = v26;
      if ((v37 & 0xFFFE) != 0 && *(double *)(v32 + 192) < v29)
      {
        LOWORD(v37) = v37 - 1;
        if (*(double *)(v32 + 200) > v29)
        {
          for (unsigned __int16 i = 0; ; unsigned __int16 i = v40 + 1)
          {
            int v39 = i;
            while (1)
            {
              unsigned int v40 = (v39 + (unsigned __int16)v37) >> 1;
              if (*(double *)(v36 + 96 * v40 + 48) <= v29) {
                break;
              }
              LOWORD(v37) = v40 - 1;
            }
            if (*(double *)(v36 + 96 * v40 + 56) > v29) {
              break;
            }
          }
          LODWORD(v37) = (v39 + (unsigned __int16)v37) >> 1;
        }
        int v47 = (unsigned __int16)v37;
        int v48 = (unsigned __int16)v37;
        double v43 = geom::interpolating_spline<double>::evaluate_length_at(v36 + 96 * (unsigned __int16)v37, (v11 + v12 * 5.0) * 0.166666667);
        if (v48) {
          double v44 = *(double *)(*(void *)(v32 + 48) + 8 * (v47 - 1));
        }
        else {
          double v44 = 0.0;
        }
        double v7 = v80;
        double v9 = v82;
        int64x2_t v25 = v84;
        float64_t v26 = v87;
        double v8 = v78;
        double v10 = v79;
      }
      else
      {
        double v43 = geom::interpolating_spline<double>::evaluate_length_at(v36, (v11 + v12 * 5.0) * 0.166666667);
        double v8 = v78;
        double v10 = v79;
        int64x2_t v25 = v84;
        float64_t v26 = v87;
        double v7 = v80;
        double v9 = v82;
        double v44 = 0.0;
      }
      double v34 = v43 + v44;
      uint64_t v49 = *a1;
      if (*(unsigned char *)(*a1 + 208))
      {
        double v33 = (v12 + v11) * 0.5;
      }
      else
      {
        uint64_t v50 = *(void *)(v49 + 72);
        unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v49 + 80) - v50) >> 5);
        if ((v51 & 0xFFFE) != 0 && *(double *)(v49 + 192) < v30)
        {
          LOWORD(v51) = v51 - 1;
          if (*(double *)(v49 + 200) > v30)
          {
            for (unsigned __int16 j = 0; ; unsigned __int16 j = v54 + 1)
            {
              int v53 = j;
              while (1)
              {
                unsigned int v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(double *)(v50 + 96 * v54 + 48) <= v30) {
                  break;
                }
                LOWORD(v51) = v54 - 1;
              }
              if (*(double *)(v50 + 96 * v54 + 56) > v30) {
                break;
              }
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
          int v57 = (unsigned __int16)v51;
          int v58 = (unsigned __int16)v51;
          double v55 = geom::interpolating_spline<double>::evaluate_length_at(v50 + 96 * (unsigned __int16)v51, (v12 + v11) * 0.5);
          if (v58) {
            double v56 = *(double *)(*(void *)(v49 + 48) + 8 * (v57 - 1));
          }
          else {
            double v56 = 0.0;
          }
          double v7 = v80;
          double v9 = v82;
          int64x2_t v25 = v84;
          float64_t v26 = v87;
          double v8 = v78;
          double v10 = v79;
        }
        else
        {
          double v55 = geom::interpolating_spline<double>::evaluate_length_at(v50, (v12 + v11) * 0.5);
          double v8 = v78;
          double v10 = v79;
          int64x2_t v25 = v84;
          float64_t v26 = v87;
          double v7 = v80;
          double v9 = v82;
          double v56 = 0.0;
        }
        double v33 = v55 + v56;
        uint64_t v59 = *a1;
        if (!*(unsigned char *)(*a1 + 208))
        {
          uint64_t v65 = *(void *)(v59 + 72);
          unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v59 + 80) - v65) >> 5);
          if ((v66 & 0xFFFE) != 0 && *(double *)(v59 + 192) < v31)
          {
            LOWORD(v66) = v66 - 1;
            if (*(double *)(v59 + 200) > v31)
            {
              for (unsigned __int16 k = 0; ; unsigned __int16 k = v69 + 1)
              {
                int v68 = k;
                while (1)
                {
                  unsigned int v69 = (v68 + (unsigned __int16)v66) >> 1;
                  if (*(double *)(v65 + 96 * v69 + 48) <= v31) {
                    break;
                  }
                  LOWORD(v66) = v69 - 1;
                }
                if (*(double *)(v65 + 96 * v69 + 56) > v31) {
                  break;
                }
              }
              LODWORD(v66) = (v68 + (unsigned __int16)v66) >> 1;
            }
            int v76 = (unsigned __int16)v66;
            int v77 = (unsigned __int16)v66;
            double v70 = geom::interpolating_spline<double>::evaluate_length_at(v65 + 96 * (unsigned __int16)v66, (v12 + v11 * 5.0) * 0.166666667);
            if (v77) {
              double v71 = *(double *)(*(void *)(v59 + 48) + 8 * (v76 - 1));
            }
            else {
              double v71 = 0.0;
            }
            double v7 = v80;
            double v9 = v82;
            int64x2_t v25 = v84;
            float64_t v26 = v87;
            double v8 = v78;
            double v10 = v79;
          }
          else
          {
            double v70 = geom::interpolating_spline<double>::evaluate_length_at(v65, (v12 + v11 * 5.0) * 0.166666667);
            double v8 = v78;
            double v10 = v79;
            int64x2_t v25 = v84;
            float64_t v26 = v87;
            double v7 = v80;
            double v9 = v82;
            double v71 = 0.0;
          }
          double v35 = v70 + v71;
          goto LABEL_50;
        }
      }
      double v35 = (v12 + v11 * 5.0) * 0.166666667;
    }
LABEL_50:
    if (v28 < *(unsigned __int8 *)a3)
    {
LABEL_51:
      double v93 = v12;
      double v94 = (v12 + v11) * 0.5;
      double v95 = v7;
      double v96 = v34;
      double v97 = v8;
      double v98 = v33;
      char v99 = v28 + 1;
      v91[0] = v94;
      v91[1] = v11;
      v91[2] = v33;
      v91[3] = v10;
      v91[4] = v35;
      v91[5] = v9;
      char v92 = v28 + 1;
      return;
    }
    float64x2_t v60 = (float64x2_t)vzip1q_s64(v90, v25);
    *(void *)&v61.f64[0] = vdupq_laneq_s64(v25, 1).u64[0];
    v61.f64[1] = v26;
    double v62 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_236F14700), vmulq_f64(v61, (float64x2_t)xmmword_236F146F0)));
    double v63 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_236F14720), vmulq_f64(v61, (float64x2_t)xmmword_236F14710)));
    double v64 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_236F14740), vmulq_f64(v61, (float64x2_t)xmmword_236F14730)));
    if (*((unsigned char *)a3 + 8))
    {
      if (fabs(v29) <= 0.000001)
      {
        if (fabs(v62) > 0.000001) {
          goto LABEL_51;
        }
      }
      else if (fabs((v29 - v62) / v29) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v30) <= 0.000001)
      {
        if (fabs(v63) > 0.000001) {
          goto LABEL_51;
        }
      }
      else if (fabs((v30 - v63) / v30) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v31) <= 0.000001)
      {
        if (fabs(v64) > 0.000001) {
          goto LABEL_51;
        }
      }
      else if (fabs((v31 - v64) / v31) > a3[1])
      {
        goto LABEL_51;
      }
      goto LABEL_16;
    }
    if (fabs(v34) <= 0.000001)
    {
      if (fabs(v62) > 0.000001) {
        goto LABEL_51;
      }
    }
    else if (fabs((v34 - v62) / v34) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v33) <= 0.000001)
    {
      if (fabs(v63) > 0.000001) {
        goto LABEL_51;
      }
    }
    else if (fabs((v33 - v63) / v33) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v35) <= 0.000001)
    {
      if (fabs(v64) > 0.000001) {
        goto LABEL_51;
      }
    }
    else if (fabs((v35 - v64) / v35) > a3[1])
    {
      goto LABEL_51;
    }
    goto LABEL_88;
  }
  if (*((unsigned char *)a3 + 8))
  {
LABEL_16:
    int v41 = *(unsigned __int16 *)(a4 + 64);
    int v42 = v41 + 1;
    if ((_WORD)v41 == 0xFFFF)
    {
      *(void *)(a4 + 8) = *(void *)a4;
      *(_WORD *)(a4 + 64) = 0;
      if (!*(unsigned char *)(a4 + 66)) {
        *(void *)(a4 + 32) = *(void *)(a4 + 24);
      }
    }
    else
    {
      double v81 = v7;
      double v83 = v9;
      int64x2_t v85 = v25;
      double v88 = v26;
      std::vector<double>::resize(a4, (unsigned __int16)(3 * v42 + 1));
      int64x2_t v25 = v85;
      float64_t v26 = v88;
      double v7 = v81;
      double v9 = v83;
      *(_WORD *)(a4 + 64) = v42;
      if (!*(unsigned char *)(a4 + 66))
      {
        std::vector<double>::resize(a4 + 24, (unsigned __int16)(v41 + 1) + 1);
        int64x2_t v25 = v85;
        float64_t v26 = v88;
        double v7 = v81;
        double v9 = v83;
      }
    }
    uint64_t v45 = *(void **)a4;
    if (v41)
    {
      uint64_t v46 = *(double **)(a4 + 24);
    }
    else
    {
      *uint64_t v45 = v90.i64[0];
      uint64_t v46 = *(double **)(a4 + 24);
      *uint64_t v46 = v7;
    }
    v45[(unsigned __int16)(3 * v41 + 1)] = v25.i64[0];
    v45[(unsigned __int16)(3 * v41 + 2)] = v25.i64[1];
    *(float64_t *)&v45[(unsigned __int16)(3 * v41 + 3)] = v26;
    v46[v42] = v9;
    return;
  }
LABEL_88:
  int v72 = *(unsigned __int16 *)(a4 + 64);
  int v73 = v72 + 1;
  if ((_WORD)v72 == 0xFFFF)
  {
    *(void *)(a4 + 8) = *(void *)a4;
    *(_WORD *)(a4 + 64) = 0;
    if (!*(unsigned char *)(a4 + 66)) {
      *(void *)(a4 + 32) = *(void *)(a4 + 24);
    }
  }
  else
  {
    int64x2_t v86 = v25;
    double v89 = v26;
    std::vector<double>::resize(a4, (unsigned __int16)(3 * v73 + 1));
    int64x2_t v25 = v86;
    float64_t v26 = v89;
    *(_WORD *)(a4 + 64) = v73;
    if (!*(unsigned char *)(a4 + 66))
    {
      std::vector<double>::resize(a4 + 24, (unsigned __int16)(v72 + 1) + 1);
      int64x2_t v25 = v86;
      float64_t v26 = v89;
    }
  }
  float v74 = *(void **)a4;
  if (v72)
  {
    int8x16_t v75 = *(double **)(a4 + 24);
  }
  else
  {
    *float v74 = v90.i64[0];
    int8x16_t v75 = *(double **)(a4 + 24);
    *int8x16_t v75 = v12;
  }
  v74[(unsigned __int16)(3 * v72 + 1)] = v25.i64[0];
  v74[(unsigned __int16)(3 * v72 + 2)] = v25.i64[1];
  *(float64_t *)&v74[(unsigned __int16)(3 * v72 + 3)] = v26;
  v75[v73] = v11;
}

uint64_t geom::interpolating_spline<double>::interpolating_spline(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = std::vector<double>::vector((void *)a1, a2);
  std::vector<double>::vector(v4 + 3, a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 48) = v5;
  std::vector<double>::vector((void *)(a1 + 72), a2 + 72);
  return a1;
}

void *std::vector<double>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<double>::__vallocate[abi:nn180100](a1, v5 >> 3);
    uint64_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<double>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    abort();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void std::vector<double>::__append(char **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int64_t v5 = v6;
  double v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    double v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      abort();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      double v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v4, v13);
      double v8 = *a1;
      double v7 = a1[1];
    }
    else
    {
      double v14 = 0;
    }
    double v15 = &v14[8 * v11];
    double v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    double v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

char *std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  double v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *double v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    __n128 result = std::vector<double>::__vallocate[abi:nn180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      float64x2_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  double v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  double v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    float64x2_t v19 = v16;
LABEL_18:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

float _ZNK4geom20interpolating_splineIDv2_fE20evaluate_span_lengthEj(uint64_t a1, unsigned __int16 a2)
{
  if (*(unsigned char *)(a1 + 58))
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 56);
    float v3 = *(float *)(a1 + 52);
    if (v2 == a2) {
      float v4 = *(float *)(a1 + 52);
    }
    else {
      float v4 = *(float *)(a1 + 48) + (float)((float)a2 * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
    }
    if (v2 != (unsigned __int16)(a2 + 1)) {
      float v3 = *(float *)(a1 + 48)
    }
         + (float)((float)(unsigned __int16)(a2 + 1) * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    float v4 = *(float *)(v5 + 4 * a2);
    float v3 = *(float *)(v5 + 4 * (unsigned __int16)(a2 + 1));
  }
  return _ZNK4geom20interpolating_splineIDv2_fE24evaluate_length_betweeenEff((void *)a1, v4, v3);
}

float _ZNK4geom20interpolating_splineIDv2_fE24evaluate_length_betweeenEff(void *a1, float a2, float a3)
{
  uint64_t v4 = 0;
  float v5 = (float)(a2 + a3) * 0.5;
  float v6 = (float)(a3 - a2) * 0.5;
  float v7 = 0.0;
  do
  {
    float v8 = *(float *)((char *)&_ZZNK4geom20interpolating_splineIDv2_fE24evaluate_length_betweeenEffE5table + v4 + 4);
    unint64_t span = geom::interpolating_spline<float>::find_span((uint64_t)a1, v5+ (float)(v6* *(float *)((char *)&_ZZNK4geom20interpolating_splineIDv2_fE24evaluate_length_betweeenEffE5table + v4)));
    int v11 = (unsigned __int16)(3 * span);
    float32x2_t v12 = *(float32x2_t *)(*a1 + 8 * (v11 + 1));
    float32x2_t v13 = *(float32x2_t *)(*a1 + 8 * (v11 + 2));
    float v14 = ((float)(1.0 - *((float *)&span + 1)) + (float)(1.0 - *((float *)&span + 1))) * *((float *)&span + 1);
    float32x2_t v15 = vmul_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(vsub_f32(v13, v12), v14), vsub_f32(v12, *(float32x2_t *)(*a1 + 8 * (unsigned __int16)(3 * span))), (float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1))), vsub_f32(*(float32x2_t *)(*a1 + 8 * (v11 + 3)), v13), *((float *)&span + 1) * *((float *)&span + 1)), v10 * 3.0);
    float v7 = v7 + (float)(v8 * sqrtf(vaddv_f32(vmul_f32(v15, v15))));
    v4 += 8;
  }
  while (v4 != 128);
  return v6 * v7;
}

void _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4, double a5, double a6, int8x16_t a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  float v15 = *(float *)(a2 + 8);
  float v16 = *(float *)(a2 + 12);
  float v18 = *(float *)(a2 + 16);
  float v17 = *(float *)(a2 + 20);
  float v20 = *(float *)a2;
  float v19 = *(float *)(a2 + 4);
  double v21 = *(float *)a2;
  double v22 = v19;
  if (*((unsigned char *)a3 + 8))
  {
    float v23 = (v21 + v22 * 2.0) * 0.333333333;
    *(float *)a7.i32 = (v22 + v21 * 2.0) * 0.333333333;
    float v24 = (float)(v16 - v15) / (float)(v17 - v15);
    float v25 = (float)(v18 - v15) / (float)(v17 - v15);
    double v26 = v24;
    float v27 = 1.0 - v24;
    float v28 = 1.0 - v25;
    float v29 = -(float)(v24 * v24);
    *(float *)a7.i32 = (float)(*(float *)a7.i32 + (float)((float)-(float)((float)(v27 * v27) * v27) * v20))
                     + (float)((float)(v24 * v29) * v19);
    *(float *)&a7.i32[1] = (float)(v23 + (float)((float)(v28 * (float)-(float)(v28 * v28)) * v20))
                         + (float)((float)-(float)((float)(v25 * v25) * v25) * v19);
    v30.f32[0] = (float)(v25 * v25) * (float)(1.0 - v25);
    v30.f32[1] = v29 * (float)(1.0 - v24);
    v31.f32[0] = (float)(1.0 - v25) * (float)-(float)(v25 * (float)(1.0 - v25));
    float v32 = v24 * (float)(1.0 - v24);
    v31.f32[1] = v27 * v32;
    float v33 = 1.0
        / (v26
         * 3.0
         * v25
         * (float)((float)(v28 * (float)-(float)(v32 * v28)) + (float)((float)(v25 * (float)(v27 * v27)) * v28)));
    int32x2_t v34 = (int32x2_t)vmul_f32(v30, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vmul_f32(v31, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vadd_f32((float32x2_t)vzip1_s32(v34, *(int32x2_t *)a7.i8), (float32x2_t)vzip2_s32(v34, *(int32x2_t *)a7.i8));
    *(float32x2_t *)a12.i8 = vmul_n_f32(*(float32x2_t *)a7.i8, v33);
    a7.i32[0] = *(_DWORD *)a2;
    int8x16_t v99 = a7;
    __int32 v35 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    float64x2_t v36 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_236F14680, v17), (float64x2_t)xmmword_236F14690, v15), (float64x2_t)xmmword_236F146A0, v16), (float64x2_t)xmmword_236F146B0, v18), (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    *(float32x2_t *)a12.i8 = vcvt_f32_f64(v36);
    LODWORD(v36.f64[0]) = *(_DWORD *)(a2 + 8);
    int8x16_t v99 = (int8x16_t)v36;
    __int32 v35 = *(_DWORD *)(a2 + 20);
  }
  unsigned int v37 = *(unsigned __int8 *)(a2 + 24);
  if (v37 < *((unsigned __int8 *)a3 + 1))
  {
    float v38 = (v22 + v21 * 5.0) * 0.166666667;
    float v39 = (float)(v20 + v19) * 0.5;
    float v40 = (v21 + v22 * 5.0) * 0.166666667;
    uint64_t v41 = *a1;
    float v42 = v39;
    float v43 = v38;
    float v44 = v40;
    if (!*(unsigned char *)(*a1 + 192))
    {
      uint64_t v45 = *(void *)(v41 + 72);
      uint64_t v46 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v41 + 80) - v45) >> 3);
      float v91 = *(float *)(a2 + 12);
      float v92 = *(float *)(a2 + 16);
      int8x16_t v93 = a12;
      __int32 v96 = v35;
      if ((v46 & 0xFFFE) != 0 && *(float *)(v41 + 184) < v38)
      {
        LOWORD(v46) = v46 - 1;
        if (*(float *)(v41 + 188) > v38)
        {
          for (unsigned __int16 i = 0; ; unsigned __int16 i = v49 + 1)
          {
            int v48 = i;
            while (1)
            {
              unsigned int v49 = (v48 + (unsigned __int16)v46) >> 1;
              if (*(float *)(v45 + 88 * v49 + 48) <= v38) {
                break;
              }
              LOWORD(v46) = v49 - 1;
            }
            if (*(float *)(v45 + 88 * v49 + 52) > v38) {
              break;
            }
          }
          LODWORD(v46) = (v48 + (unsigned __int16)v46) >> 1;
        }
      }
      else
      {
        LOWORD(v46) = 0;
      }
      int v52 = (unsigned __int16)v46;
      int v53 = (unsigned __int16)v46;
      double v54 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v45 + 88 * (unsigned __int16)v46, v38);
      if (v53) {
        double v55 = *(float *)(*(void *)(v41 + 48) + 4 * (v52 - 1));
      }
      else {
        double v55 = 0.0;
      }
      a12 = v93;
      __int32 v35 = v96;
      float v16 = v91;
      float v18 = v92;
      float v43 = v55 + v54;
      uint64_t v58 = *a1;
      if (*(unsigned char *)(*a1 + 192))
      {
        float v42 = (float)(v20 + v19) * 0.5;
      }
      else
      {
        uint64_t v59 = *(void *)(v58 + 72);
        uint64_t v60 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v58 + 80) - v59) >> 3);
        if ((v60 & 0xFFFE) != 0 && *(float *)(v58 + 184) < v39)
        {
          LOWORD(v60) = v60 - 1;
          float v61 = v55 + v54;
          if (*(float *)(v58 + 188) > v39)
          {
            for (unsigned __int16 j = 0; ; unsigned __int16 j = v64 + 1)
            {
              int v63 = j;
              while (1)
              {
                unsigned int v64 = (v63 + (unsigned __int16)v60) >> 1;
                if (*(float *)(v59 + 88 * v64 + 48) <= v39) {
                  break;
                }
                LOWORD(v60) = v64 - 1;
              }
              if (*(float *)(v59 + 88 * v64 + 52) > v39) {
                break;
              }
            }
            LODWORD(v60) = (v63 + (unsigned __int16)v60) >> 1;
          }
        }
        else
        {
          float v61 = v55 + v54;
          LOWORD(v60) = 0;
        }
        int v65 = (unsigned __int16)v60;
        int v66 = (unsigned __int16)v60;
        double v67 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v59 + 88 * (unsigned __int16)v60, (float)(v20 + v19) * 0.5);
        if (v66) {
          double v68 = *(float *)(*(void *)(v58 + 48) + 4 * (v65 - 1));
        }
        else {
          double v68 = 0.0;
        }
        a12 = v93;
        __int32 v35 = v96;
        float v16 = v91;
        float v18 = v92;
        float v43 = v61;
        float v42 = v68 + v67;
        uint64_t v69 = *a1;
        if (!*(unsigned char *)(*a1 + 192))
        {
          uint64_t v77 = *(void *)(v69 + 72);
          uint64_t v78 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v69 + 80) - v77) >> 3);
          float v90 = v43;
          if ((v78 & 0xFFFE) != 0 && *(float *)(v69 + 184) < v40)
          {
            LOWORD(v78) = v78 - 1;
            if (*(float *)(v69 + 188) > v40)
            {
              for (unsigned __int16 k = 0; ; unsigned __int16 k = v81 + 1)
              {
                int v80 = k;
                while (1)
                {
                  unsigned int v81 = (v80 + (unsigned __int16)v78) >> 1;
                  if (*(float *)(v77 + 88 * v81 + 48) <= v40) {
                    break;
                  }
                  LOWORD(v78) = v81 - 1;
                }
                if (*(float *)(v77 + 88 * v81 + 52) > v40) {
                  break;
                }
              }
              LODWORD(v78) = (v80 + (unsigned __int16)v78) >> 1;
            }
          }
          else
          {
            LOWORD(v78) = 0;
          }
          int v82 = (unsigned __int16)v78;
          int v83 = (unsigned __int16)v78;
          double v84 = _ZNK4geom20interpolating_splineIDv2_fE18evaluate_length_atEf(v77 + 88 * (unsigned __int16)v78, v40);
          if (v83) {
            double v85 = *(float *)(*(void *)(v69 + 48) + 4 * (v82 - 1));
          }
          else {
            double v85 = 0.0;
          }
          a12 = v93;
          __int32 v35 = v96;
          float v16 = v91;
          float v18 = v92;
          float v43 = v90;
          float v44 = v85 + v84;
          goto LABEL_47;
        }
      }
      float v44 = v40;
    }
LABEL_47:
    if (v37 < *(unsigned __int8 *)a3)
    {
LABEL_48:
      float v102 = v20;
      float v103 = (float)(v20 + v19) * 0.5;
      float v104 = v15;
      float v105 = v43;
      float v106 = v16;
      float v107 = v42;
      char v108 = v37 + 1;
      v100[0] = v103;
      v100[1] = v19;
      v100[2] = v42;
      v100[3] = v18;
      v100[4] = v44;
      v100[5] = v17;
      char v101 = v37 + 1;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, &v102, a3, a4);
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, v100, a3, a4);
      return;
    }
    float32x4_t v70 = (float32x4_t)vextq_s8(vextq_s8(v99, v99, 4uLL), a12, 0xCuLL);
    v70.i32[3] = v35;
    int8x16_t v71 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_236F146C0);
    float v72 = vaddv_f32(vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)));
    int8x16_t v73 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_236F146D0);
    float v74 = vaddv_f32(vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
    int8x16_t v75 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_236F146E0);
    float v76 = vaddv_f32(vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)));
    if (*((unsigned char *)a3 + 8))
    {
      if (fabsf(v38) <= 0.00001)
      {
        if (fabsf(v72) > 0.00001) {
          goto LABEL_48;
        }
      }
      else if (fabsf((float)(v38 - v72) / v38) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v39) <= 0.00001)
      {
        if (fabsf(v74) > 0.00001) {
          goto LABEL_48;
        }
      }
      else if (fabsf((float)(v39 - v74) / v39) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v40) <= 0.00001)
      {
        if (fabsf(v76) > 0.00001) {
          goto LABEL_48;
        }
      }
      else if (fabsf((float)(v40 - v76) / v40) > a3[1])
      {
        goto LABEL_48;
      }
      goto LABEL_16;
    }
    if (fabsf(v43) <= 0.00001)
    {
      if (fabsf(v72) > 0.00001) {
        goto LABEL_48;
      }
    }
    else if (fabsf((float)(v43 - v72) / v43) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v42) <= 0.00001)
    {
      if (fabsf(v74) > 0.00001) {
        goto LABEL_48;
      }
    }
    else if (fabsf((float)(v42 - v74) / v42) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v44) <= 0.00001)
    {
      if (fabsf(v76) > 0.00001) {
        goto LABEL_48;
      }
    }
    else if (fabsf((float)(v44 - v76) / v44) > a3[1])
    {
      goto LABEL_48;
    }
    goto LABEL_87;
  }
  if (*((unsigned char *)a3 + 8))
  {
LABEL_16:
    int v50 = *(unsigned __int16 *)(a4 + 56);
    int v51 = v50 + 1;
    if ((_WORD)v50 == 0xFFFF)
    {
      *(void *)(a4 + 8) = *(void *)a4;
      *(_WORD *)(a4 + 56) = 0;
      if (!*(unsigned char *)(a4 + 58)) {
        *(void *)(a4 + 32) = *(void *)(a4 + 24);
      }
    }
    else
    {
      unint64_t v94 = a12.i64[0];
      __int32 v97 = v35;
      std::vector<float>::resize(a4, (unsigned __int16)(3 * v51 + 1));
      a12.i64[0] = v94;
      __int32 v35 = v97;
      *(_WORD *)(a4 + 56) = v51;
      if (!*(unsigned char *)(a4 + 58))
      {
        std::vector<float>::resize(a4 + 24, (unsigned __int16)(v50 + 1) + 1);
        a12.i64[0] = v94;
        __int32 v35 = v97;
      }
    }
    double v56 = *(_DWORD **)a4;
    if (v50)
    {
      int v57 = *(float **)(a4 + 24);
    }
    else
    {
      *double v56 = v99.i32[0];
      int v57 = *(float **)(a4 + 24);
      float *v57 = v15;
    }
    v56[(unsigned __int16)(3 * v50 + 1)] = a12.i32[0];
    v56[(unsigned __int16)(3 * v50 + 2)] = a12.i32[1];
    v56[(unsigned __int16)(3 * v50 + 3)] = v35;
    v57[v51] = v17;
    return;
  }
LABEL_87:
  int v86 = *(unsigned __int16 *)(a4 + 56);
  int v87 = v86 + 1;
  if ((_WORD)v86 == 0xFFFF)
  {
    *(void *)(a4 + 8) = *(void *)a4;
    *(_WORD *)(a4 + 56) = 0;
    if (!*(unsigned char *)(a4 + 58)) {
      *(void *)(a4 + 32) = *(void *)(a4 + 24);
    }
  }
  else
  {
    unint64_t v95 = a12.i64[0];
    __int32 v98 = v35;
    std::vector<float>::resize(a4, (unsigned __int16)(3 * v87 + 1));
    a12.i64[0] = v95;
    __int32 v35 = v98;
    *(_WORD *)(a4 + 56) = v87;
    if (!*(unsigned char *)(a4 + 58))
    {
      std::vector<float>::resize(a4 + 24, (unsigned __int16)(v86 + 1) + 1);
      a12.i64[0] = v95;
      __int32 v35 = v98;
    }
  }
  double v88 = *(_DWORD **)a4;
  if (v86)
  {
    double v89 = *(float **)(a4 + 24);
  }
  else
  {
    *double v88 = v99.i32[0];
    double v89 = *(float **)(a4 + 24);
    *double v89 = v20;
  }
  v88[(unsigned __int16)(3 * v86 + 1)] = a12.i32[0];
  v88[(unsigned __int16)(3 * v86 + 2)] = a12.i32[1];
  v88[(unsigned __int16)(3 * v86 + 3)] = v35;
  v89[v87] = v19;
}

uint64_t _ZN4geom20interpolating_splineIDv2_fEC2ERKS2_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::vector<unsigned int> *)std::vector<double>::vector((void *)a1, a2);
  std::vector<float>::vector(v4 + 1, (const std::vector<unsigned int> *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(void *)(a1 + 48) = v5;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 64), (const std::vector<unsigned int> *)(a2 + 64));
  return a1;
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE8__appendEm(void **a1, unint64_t a2)
{
  float v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  float v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 3);
    if (v9 >> 61) {
      abort();
    }
    uint64_t v10 = v8 >> 3;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 2 > v9) {
      unint64_t v9 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      float32x2_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v4, v12);
    }
    else {
      float32x2_t v13 = 0;
    }
    float v14 = &v13[8 * v10];
    float v15 = &v13[8 * v12];
    bzero(v14, 8 * a2);
    float v16 = &v14[8 * a2];
    float v18 = (char *)*a1;
    float v17 = (char *)a1[1];
    if (v17 != *a1)
    {
      do
      {
        uint64_t v19 = *((void *)v17 - 1);
        v17 -= 8;
        *((void *)v14 - 1) = v19;
        v14 -= 8;
      }
      while (v17 != v18);
      float v17 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v16;
    a1[2] = v15;
    if (v17)
    {
      operator delete(v17);
    }
  }
}

float _ZNK4geom20interpolating_splineIDv3_fE20evaluate_span_lengthEj(uint64_t a1, unsigned __int16 a2)
{
  if (*(unsigned char *)(a1 + 58))
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 56);
    float v3 = *(float *)(a1 + 52);
    if (v2 == a2) {
      float v4 = *(float *)(a1 + 52);
    }
    else {
      float v4 = *(float *)(a1 + 48) + (float)((float)a2 * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
    }
    if (v2 != (unsigned __int16)(a2 + 1)) {
      float v3 = *(float *)(a1 + 48)
    }
         + (float)((float)(unsigned __int16)(a2 + 1) * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    float v4 = *(float *)(v5 + 4 * a2);
    float v3 = *(float *)(v5 + 4 * (unsigned __int16)(a2 + 1));
  }
  return _ZNK4geom20interpolating_splineIDv3_fE24evaluate_length_betweeenEff((void *)a1, v4, v3);
}

float _ZNK4geom20interpolating_splineIDv3_fE24evaluate_length_betweeenEff(void *a1, float a2, float a3)
{
  uint64_t v4 = 0;
  float v5 = (float)(a2 + a3) * 0.5;
  float v6 = (float)(a3 - a2) * 0.5;
  float v7 = 0.0;
  do
  {
    float v8 = *(float *)((char *)&_ZZNK4geom20interpolating_splineIDv3_fE24evaluate_length_betweeenEffE5table + v4 + 4);
    unint64_t span = geom::interpolating_spline<float>::find_span((uint64_t)a1, v5+ (float)(v6* *(float *)((char *)&_ZZNK4geom20interpolating_splineIDv3_fE24evaluate_length_betweeenEffE5table + v4)));
    int v10 = (unsigned __int16)(3 * span);
    float32x4_t v11 = *(float32x4_t *)(*a1 + 16 * (v10 + 1));
    float32x4_t v13 = *(float32x4_t *)(*a1 + 16 * (v10 + 2));
    float v14 = ((float)(1.0 - *((float *)&span + 1)) + (float)(1.0 - *((float *)&span + 1))) * *((float *)&span + 1);
    float32x4_t v15 = vmulq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(vsubq_f32(v13, v11), v14), vsubq_f32(v11, *(float32x4_t *)(*a1 + 16 * (unsigned __int16)(3 * span))), (float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1))), vsubq_f32(*(float32x4_t *)(*a1 + 16 * (v10 + 3)), v13), *((float *)&span + 1) * *((float *)&span + 1)), v12 * 3.0);
    float32x4_t v16 = vmulq_f32(v15, v15);
    float v7 = v7
       + (float)(v8
               * sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0]));
    v4 += 8;
  }
  while (v4 != 128);
  return v6 * v7;
}

void _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4, double a5, double a6, int8x16_t a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  float v15 = *(float *)(a2 + 8);
  float v16 = *(float *)(a2 + 12);
  float v18 = *(float *)(a2 + 16);
  float v17 = *(float *)(a2 + 20);
  float v20 = *(float *)a2;
  float v19 = *(float *)(a2 + 4);
  double v21 = *(float *)a2;
  double v22 = v19;
  if (*((unsigned char *)a3 + 8))
  {
    float v23 = (v21 + v22 * 2.0) * 0.333333333;
    *(float *)a7.i32 = (v22 + v21 * 2.0) * 0.333333333;
    float v24 = (float)(v16 - v15) / (float)(v17 - v15);
    float v25 = (float)(v18 - v15) / (float)(v17 - v15);
    double v26 = v24;
    float v27 = 1.0 - v24;
    float v28 = 1.0 - v25;
    float v29 = -(float)(v24 * v24);
    *(float *)a7.i32 = (float)(*(float *)a7.i32 + (float)((float)-(float)((float)(v27 * v27) * v27) * v20))
                     + (float)((float)(v24 * v29) * v19);
    *(float *)&a7.i32[1] = (float)(v23 + (float)((float)(v28 * (float)-(float)(v28 * v28)) * v20))
                         + (float)((float)-(float)((float)(v25 * v25) * v25) * v19);
    v30.f32[0] = (float)(v25 * v25) * (float)(1.0 - v25);
    v30.f32[1] = v29 * (float)(1.0 - v24);
    v31.f32[0] = (float)(1.0 - v25) * (float)-(float)(v25 * (float)(1.0 - v25));
    float v32 = v24 * (float)(1.0 - v24);
    v31.f32[1] = v27 * v32;
    float v33 = 1.0
        / (v26
         * 3.0
         * v25
         * (float)((float)(v28 * (float)-(float)(v32 * v28)) + (float)((float)(v25 * (float)(v27 * v27)) * v28)));
    int32x2_t v34 = (int32x2_t)vmul_f32(v30, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vmul_f32(v31, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vadd_f32((float32x2_t)vzip1_s32(v34, *(int32x2_t *)a7.i8), (float32x2_t)vzip2_s32(v34, *(int32x2_t *)a7.i8));
    *(float32x2_t *)a12.i8 = vmul_n_f32(*(float32x2_t *)a7.i8, v33);
    a7.i32[0] = *(_DWORD *)a2;
    int8x16_t v99 = a7;
    __int32 v35 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    float64x2_t v36 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_236F14680, v17), (float64x2_t)xmmword_236F14690, v15), (float64x2_t)xmmword_236F146A0, v16), (float64x2_t)xmmword_236F146B0, v18), (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    *(float32x2_t *)a12.i8 = vcvt_f32_f64(v36);
    LODWORD(v36.f64[0]) = *(_DWORD *)(a2 + 8);
    int8x16_t v99 = (int8x16_t)v36;
    __int32 v35 = *(_DWORD *)(a2 + 20);
  }
  unsigned int v37 = *(unsigned __int8 *)(a2 + 24);
  if (v37 < *((unsigned __int8 *)a3 + 1))
  {
    float v38 = (v22 + v21 * 5.0) * 0.166666667;
    float v39 = (float)(v20 + v19) * 0.5;
    float v40 = (v21 + v22 * 5.0) * 0.166666667;
    uint64_t v41 = *a1;
    float v42 = v39;
    float v43 = v38;
    float v44 = v40;
    if (!*(unsigned char *)(*a1 + 192))
    {
      uint64_t v45 = *(void *)(v41 + 72);
      uint64_t v46 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v41 + 80) - v45) >> 3);
      float v91 = *(float *)(a2 + 12);
      float v92 = *(float *)(a2 + 16);
      int8x16_t v93 = a12;
      __int32 v96 = v35;
      if ((v46 & 0xFFFE) != 0 && *(float *)(v41 + 184) < v38)
      {
        LOWORD(v46) = v46 - 1;
        if (*(float *)(v41 + 188) > v38)
        {
          for (unsigned __int16 i = 0; ; unsigned __int16 i = v49 + 1)
          {
            int v48 = i;
            while (1)
            {
              unsigned int v49 = (v48 + (unsigned __int16)v46) >> 1;
              if (*(float *)(v45 + 88 * v49 + 48) <= v38) {
                break;
              }
              LOWORD(v46) = v49 - 1;
            }
            if (*(float *)(v45 + 88 * v49 + 52) > v38) {
              break;
            }
          }
          LODWORD(v46) = (v48 + (unsigned __int16)v46) >> 1;
        }
      }
      else
      {
        LOWORD(v46) = 0;
      }
      int v52 = (unsigned __int16)v46;
      int v53 = (unsigned __int16)v46;
      double v54 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v45 + 88 * (unsigned __int16)v46, v38);
      if (v53) {
        double v55 = *(float *)(*(void *)(v41 + 48) + 4 * (v52 - 1));
      }
      else {
        double v55 = 0.0;
      }
      a12 = v93;
      __int32 v35 = v96;
      float v16 = v91;
      float v18 = v92;
      float v43 = v55 + v54;
      uint64_t v58 = *a1;
      if (*(unsigned char *)(*a1 + 192))
      {
        float v42 = (float)(v20 + v19) * 0.5;
      }
      else
      {
        uint64_t v59 = *(void *)(v58 + 72);
        uint64_t v60 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v58 + 80) - v59) >> 3);
        if ((v60 & 0xFFFE) != 0 && *(float *)(v58 + 184) < v39)
        {
          LOWORD(v60) = v60 - 1;
          float v61 = v55 + v54;
          if (*(float *)(v58 + 188) > v39)
          {
            for (unsigned __int16 j = 0; ; unsigned __int16 j = v64 + 1)
            {
              int v63 = j;
              while (1)
              {
                unsigned int v64 = (v63 + (unsigned __int16)v60) >> 1;
                if (*(float *)(v59 + 88 * v64 + 48) <= v39) {
                  break;
                }
                LOWORD(v60) = v64 - 1;
              }
              if (*(float *)(v59 + 88 * v64 + 52) > v39) {
                break;
              }
            }
            LODWORD(v60) = (v63 + (unsigned __int16)v60) >> 1;
          }
        }
        else
        {
          float v61 = v55 + v54;
          LOWORD(v60) = 0;
        }
        int v65 = (unsigned __int16)v60;
        int v66 = (unsigned __int16)v60;
        double v67 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v59 + 88 * (unsigned __int16)v60, (float)(v20 + v19) * 0.5);
        if (v66) {
          double v68 = *(float *)(*(void *)(v58 + 48) + 4 * (v65 - 1));
        }
        else {
          double v68 = 0.0;
        }
        a12 = v93;
        __int32 v35 = v96;
        float v16 = v91;
        float v18 = v92;
        float v43 = v61;
        float v42 = v68 + v67;
        uint64_t v69 = *a1;
        if (!*(unsigned char *)(*a1 + 192))
        {
          uint64_t v77 = *(void *)(v69 + 72);
          uint64_t v78 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v69 + 80) - v77) >> 3);
          float v90 = v43;
          if ((v78 & 0xFFFE) != 0 && *(float *)(v69 + 184) < v40)
          {
            LOWORD(v78) = v78 - 1;
            if (*(float *)(v69 + 188) > v40)
            {
              for (unsigned __int16 k = 0; ; unsigned __int16 k = v81 + 1)
              {
                int v80 = k;
                while (1)
                {
                  unsigned int v81 = (v80 + (unsigned __int16)v78) >> 1;
                  if (*(float *)(v77 + 88 * v81 + 48) <= v40) {
                    break;
                  }
                  LOWORD(v78) = v81 - 1;
                }
                if (*(float *)(v77 + 88 * v81 + 52) > v40) {
                  break;
                }
              }
              LODWORD(v78) = (v80 + (unsigned __int16)v78) >> 1;
            }
          }
          else
          {
            LOWORD(v78) = 0;
          }
          int v82 = (unsigned __int16)v78;
          int v83 = (unsigned __int16)v78;
          double v84 = _ZNK4geom20interpolating_splineIDv3_fE18evaluate_length_atEf(v77 + 88 * (unsigned __int16)v78, v40);
          if (v83) {
            double v85 = *(float *)(*(void *)(v69 + 48) + 4 * (v82 - 1));
          }
          else {
            double v85 = 0.0;
          }
          a12 = v93;
          __int32 v35 = v96;
          float v16 = v91;
          float v18 = v92;
          float v43 = v90;
          float v44 = v85 + v84;
          goto LABEL_47;
        }
      }
      float v44 = v40;
    }
LABEL_47:
    if (v37 < *(unsigned __int8 *)a3)
    {
LABEL_48:
      float v102 = v20;
      float v103 = (float)(v20 + v19) * 0.5;
      float v104 = v15;
      float v105 = v43;
      float v106 = v16;
      float v107 = v42;
      char v108 = v37 + 1;
      v100[0] = v103;
      v100[1] = v19;
      v100[2] = v42;
      v100[3] = v18;
      v100[4] = v44;
      v100[5] = v17;
      char v101 = v37 + 1;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, &v102, a3, a4);
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, v100, a3, a4);
      return;
    }
    float32x4_t v70 = (float32x4_t)vextq_s8(vextq_s8(v99, v99, 4uLL), a12, 0xCuLL);
    v70.i32[3] = v35;
    int8x16_t v71 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_236F146C0);
    float v72 = vaddv_f32(vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)));
    int8x16_t v73 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_236F146D0);
    float v74 = vaddv_f32(vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
    int8x16_t v75 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_236F146E0);
    float v76 = vaddv_f32(vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)));
    if (*((unsigned char *)a3 + 8))
    {
      if (fabsf(v38) <= 0.00001)
      {
        if (fabsf(v72) > 0.00001) {
          goto LABEL_48;
        }
      }
      else if (fabsf((float)(v38 - v72) / v38) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v39) <= 0.00001)
      {
        if (fabsf(v74) > 0.00001) {
          goto LABEL_48;
        }
      }
      else if (fabsf((float)(v39 - v74) / v39) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v40) <= 0.00001)
      {
        if (fabsf(v76) > 0.00001) {
          goto LABEL_48;
        }
      }
      else if (fabsf((float)(v40 - v76) / v40) > a3[1])
      {
        goto LABEL_48;
      }
      goto LABEL_16;
    }
    if (fabsf(v43) <= 0.00001)
    {
      if (fabsf(v72) > 0.00001) {
        goto LABEL_48;
      }
    }
    else if (fabsf((float)(v43 - v72) / v43) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v42) <= 0.00001)
    {
      if (fabsf(v74) > 0.00001) {
        goto LABEL_48;
      }
    }
    else if (fabsf((float)(v42 - v74) / v42) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v44) <= 0.00001)
    {
      if (fabsf(v76) > 0.00001) {
        goto LABEL_48;
      }
    }
    else if (fabsf((float)(v44 - v76) / v44) > a3[1])
    {
      goto LABEL_48;
    }
    goto LABEL_87;
  }
  if (*((unsigned char *)a3 + 8))
  {
LABEL_16:
    int v50 = *(unsigned __int16 *)(a4 + 56);
    int v51 = v50 + 1;
    if ((_WORD)v50 == 0xFFFF)
    {
      *(void *)(a4 + 8) = *(void *)a4;
      *(_WORD *)(a4 + 56) = 0;
      if (!*(unsigned char *)(a4 + 58)) {
        *(void *)(a4 + 32) = *(void *)(a4 + 24);
      }
    }
    else
    {
      unint64_t v94 = a12.i64[0];
      __int32 v97 = v35;
      std::vector<float>::resize(a4, (unsigned __int16)(3 * v51 + 1));
      a12.i64[0] = v94;
      __int32 v35 = v97;
      *(_WORD *)(a4 + 56) = v51;
      if (!*(unsigned char *)(a4 + 58))
      {
        std::vector<float>::resize(a4 + 24, (unsigned __int16)(v50 + 1) + 1);
        a12.i64[0] = v94;
        __int32 v35 = v97;
      }
    }
    double v56 = *(_DWORD **)a4;
    if (v50)
    {
      int v57 = *(float **)(a4 + 24);
    }
    else
    {
      *double v56 = v99.i32[0];
      int v57 = *(float **)(a4 + 24);
      float *v57 = v15;
    }
    v56[(unsigned __int16)(3 * v50 + 1)] = a12.i32[0];
    v56[(unsigned __int16)(3 * v50 + 2)] = a12.i32[1];
    v56[(unsigned __int16)(3 * v50 + 3)] = v35;
    v57[v51] = v17;
    return;
  }
LABEL_87:
  int v86 = *(unsigned __int16 *)(a4 + 56);
  int v87 = v86 + 1;
  if ((_WORD)v86 == 0xFFFF)
  {
    *(void *)(a4 + 8) = *(void *)a4;
    *(_WORD *)(a4 + 56) = 0;
    if (!*(unsigned char *)(a4 + 58)) {
      *(void *)(a4 + 32) = *(void *)(a4 + 24);
    }
  }
  else
  {
    unint64_t v95 = a12.i64[0];
    __int32 v98 = v35;
    std::vector<float>::resize(a4, (unsigned __int16)(3 * v87 + 1));
    a12.i64[0] = v95;
    __int32 v35 = v98;
    *(_WORD *)(a4 + 56) = v87;
    if (!*(unsigned char *)(a4 + 58))
    {
      std::vector<float>::resize(a4 + 24, (unsigned __int16)(v86 + 1) + 1);
      a12.i64[0] = v95;
      __int32 v35 = v98;
    }
  }
  double v88 = *(_DWORD **)a4;
  if (v86)
  {
    double v89 = *(float **)(a4 + 24);
  }
  else
  {
    *double v88 = v99.i32[0];
    double v89 = *(float **)(a4 + 24);
    *double v89 = v20;
  }
  v88[(unsigned __int16)(3 * v86 + 1)] = a12.i32[0];
  v88[(unsigned __int16)(3 * v86 + 2)] = a12.i32[1];
  v88[(unsigned __int16)(3 * v86 + 3)] = v35;
  v89[v87] = v19;
}

uint64_t _ZN4geom20interpolating_splineIDv3_fEC2ERKS2_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (std::vector<unsigned int> *)_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_((void *)a1, a2);
  std::vector<float>::vector(v4 + 1, (const std::vector<unsigned int> *)(a2 + 24));
  uint64_t v5 = *(void *)(a2 + 48);
  *(_DWORD *)(a1 + 55) = *(_DWORD *)(a2 + 55);
  *(void *)(a1 + 48) = v5;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 64), (const std::vector<unsigned int> *)(a2 + 64));
  return a1;
}

void *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(a1, v5 >> 4);
    float v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

float _ZNK4geom20interpolating_splineIDv4_fE20evaluate_span_lengthEj(uint64_t a1, unsigned __int16 a2)
{
  if (*(unsigned char *)(a1 + 58))
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 56);
    float v3 = *(float *)(a1 + 52);
    if (v2 == a2) {
      float v4 = *(float *)(a1 + 52);
    }
    else {
      float v4 = *(float *)(a1 + 48) + (float)((float)a2 * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
    }
    if (v2 != (unsigned __int16)(a2 + 1)) {
      float v3 = *(float *)(a1 + 48)
    }
         + (float)((float)(unsigned __int16)(a2 + 1) * (float)((float)(v3 - *(float *)(a1 + 48)) / (float)v2));
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    float v4 = *(float *)(v5 + 4 * a2);
    float v3 = *(float *)(v5 + 4 * (unsigned __int16)(a2 + 1));
  }
  return _ZNK4geom20interpolating_splineIDv4_fE24evaluate_length_betweeenEff((void *)a1, v4, v3);
}

float _ZNK4geom20interpolating_splineIDv4_fE24evaluate_length_betweeenEff(void *a1, float a2, float a3)
{
  uint64_t v4 = 0;
  float v5 = (float)(a2 + a3) * 0.5;
  float v6 = (float)(a3 - a2) * 0.5;
  float v7 = 0.0;
  do
  {
    float v8 = *(float *)((char *)&_ZZNK4geom20interpolating_splineIDv4_fE24evaluate_length_betweeenEffE5table + v4 + 4);
    unint64_t span = geom::interpolating_spline<float>::find_span((uint64_t)a1, v5+ (float)(v6* *(float *)((char *)&_ZZNK4geom20interpolating_splineIDv4_fE24evaluate_length_betweeenEffE5table + v4)));
    int v10 = (unsigned __int16)(3 * span);
    float32x4_t v11 = *(float32x4_t *)(*a1 + 16 * (v10 + 1));
    float32x4_t v13 = *(float32x4_t *)(*a1 + 16 * (v10 + 2));
    float v14 = ((float)(1.0 - *((float *)&span + 1)) + (float)(1.0 - *((float *)&span + 1))) * *((float *)&span + 1);
    float32x4_t v15 = vmulq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(vsubq_f32(v13, v11), v14), vsubq_f32(v11, *(float32x4_t *)(*a1 + 16 * (unsigned __int16)(3 * span))), (float)(1.0 - *((float *)&span + 1)) * (float)(1.0 - *((float *)&span + 1))), vsubq_f32(*(float32x4_t *)(*a1 + 16 * (v10 + 3)), v13), *((float *)&span + 1) * *((float *)&span + 1)), v12 * 3.0);
    int8x16_t v16 = (int8x16_t)vmulq_f32(v15, v15);
    float v7 = v7
       + (float)(v8
               * sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v16.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)))));
    v4 += 8;
  }
  while (v4 != 128);
  return v6 * v7;
}

void _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4, double a5, double a6, int8x16_t a7, double a8, double a9, double a10, double a11, int8x16_t a12)
{
  float v15 = *(float *)(a2 + 8);
  float v16 = *(float *)(a2 + 12);
  float v18 = *(float *)(a2 + 16);
  float v17 = *(float *)(a2 + 20);
  float v20 = *(float *)a2;
  float v19 = *(float *)(a2 + 4);
  double v21 = *(float *)a2;
  double v22 = v19;
  if (*((unsigned char *)a3 + 8))
  {
    float v23 = (v21 + v22 * 2.0) * 0.333333333;
    *(float *)a7.i32 = (v22 + v21 * 2.0) * 0.333333333;
    float v24 = (float)(v16 - v15) / (float)(v17 - v15);
    float v25 = (float)(v18 - v15) / (float)(v17 - v15);
    double v26 = v24;
    float v27 = 1.0 - v24;
    float v28 = 1.0 - v25;
    float v29 = -(float)(v24 * v24);
    *(float *)a7.i32 = (float)(*(float *)a7.i32 + (float)((float)-(float)((float)(v27 * v27) * v27) * v20))
                     + (float)((float)(v24 * v29) * v19);
    *(float *)&a7.i32[1] = (float)(v23 + (float)((float)(v28 * (float)-(float)(v28 * v28)) * v20))
                         + (float)((float)-(float)((float)(v25 * v25) * v25) * v19);
    v30.f32[0] = (float)(v25 * v25) * (float)(1.0 - v25);
    v30.f32[1] = v29 * (float)(1.0 - v24);
    v31.f32[0] = (float)(1.0 - v25) * (float)-(float)(v25 * (float)(1.0 - v25));
    float v32 = v24 * (float)(1.0 - v24);
    v31.f32[1] = v27 * v32;
    float v33 = 1.0
        / (v26
         * 3.0
         * v25
         * (float)((float)(v28 * (float)-(float)(v32 * v28)) + (float)((float)(v25 * (float)(v27 * v27)) * v28)));
    int32x2_t v34 = (int32x2_t)vmul_f32(v30, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vmul_f32(v31, *(float32x2_t *)a7.i8);
    *(float32x2_t *)a7.i8 = vadd_f32((float32x2_t)vzip1_s32(v34, *(int32x2_t *)a7.i8), (float32x2_t)vzip2_s32(v34, *(int32x2_t *)a7.i8));
    *(float32x2_t *)a12.i8 = vmul_n_f32(*(float32x2_t *)a7.i8, v33);
    a7.i32[0] = *(_DWORD *)a2;
    int8x16_t v99 = a7;
    __int32 v35 = *(_DWORD *)(a2 + 4);
  }
  else
  {
    float64x2_t v36 = vmulq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_236F14680, v17), (float64x2_t)xmmword_236F14690, v15), (float64x2_t)xmmword_236F146A0, v16), (float64x2_t)xmmword_236F146B0, v18), (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    *(float32x2_t *)a12.i8 = vcvt_f32_f64(v36);
    LODWORD(v36.f64[0]) = *(_DWORD *)(a2 + 8);
    int8x16_t v99 = (int8x16_t)v36;
    __int32 v35 = *(_DWORD *)(a2 + 20);
  }
  unsigned int v37 = *(unsigned __int8 *)(a2 + 24);
  if (v37 < *((unsigned __int8 *)a3 + 1))
  {
    float v38 = (v22 + v21 * 5.0) * 0.166666667;
    float v39 = (float)(v20 + v19) * 0.5;
    float v40 = (v21 + v22 * 5.0) * 0.166666667;
    uint64_t v41 = *a1;
    float v42 = v39;
    float v43 = v38;
    float v44 = v40;
    if (!*(unsigned char *)(*a1 + 192))
    {
      uint64_t v45 = *(void *)(v41 + 72);
      uint64_t v46 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v41 + 80) - v45) >> 3);
      float v91 = *(float *)(a2 + 12);
      float v92 = *(float *)(a2 + 16);
      int8x16_t v93 = a12;
      __int32 v96 = v35;
      if ((v46 & 0xFFFE) != 0 && *(float *)(v41 + 184) < v38)
      {
        LOWORD(v46) = v46 - 1;
        if (*(float *)(v41 + 188) > v38)
        {
          for (unsigned __int16 i = 0; ; unsigned __int16 i = v49 + 1)
          {
            int v48 = i;
            while (1)
            {
              unsigned int v49 = (v48 + (unsigned __int16)v46) >> 1;
              if (*(float *)(v45 + 88 * v49 + 48) <= v38) {
                break;
              }
              LOWORD(v46) = v49 - 1;
            }
            if (*(float *)(v45 + 88 * v49 + 52) > v38) {
              break;
            }
          }
          LODWORD(v46) = (v48 + (unsigned __int16)v46) >> 1;
        }
      }
      else
      {
        LOWORD(v46) = 0;
      }
      int v52 = (unsigned __int16)v46;
      int v53 = (unsigned __int16)v46;
      double v54 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v45 + 88 * (unsigned __int16)v46, v38);
      if (v53) {
        double v55 = *(float *)(*(void *)(v41 + 48) + 4 * (v52 - 1));
      }
      else {
        double v55 = 0.0;
      }
      a12 = v93;
      __int32 v35 = v96;
      float v16 = v91;
      float v18 = v92;
      float v43 = v55 + v54;
      uint64_t v58 = *a1;
      if (*(unsigned char *)(*a1 + 192))
      {
        float v42 = (float)(v20 + v19) * 0.5;
      }
      else
      {
        uint64_t v59 = *(void *)(v58 + 72);
        uint64_t v60 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v58 + 80) - v59) >> 3);
        if ((v60 & 0xFFFE) != 0 && *(float *)(v58 + 184) < v39)
        {
          LOWORD(v60) = v60 - 1;
          float v61 = v55 + v54;
          if (*(float *)(v58 + 188) > v39)
          {
            for (unsigned __int16 j = 0; ; unsigned __int16 j = v64 + 1)
            {
              int v63 = j;
              while (1)
              {
                unsigned int v64 = (v63 + (unsigned __int16)v60) >> 1;
                if (*(float *)(v59 + 88 * v64 + 48) <= v39) {
                  break;
                }
                LOWORD(v60) = v64 - 1;
              }
              if (*(float *)(v59 + 88 * v64 + 52) > v39) {
                break;
              }
            }
            LODWORD(v60) = (v63 + (unsigned __int16)v60) >> 1;
          }
        }
        else
        {
          float v61 = v55 + v54;
          LOWORD(v60) = 0;
        }
        int v65 = (unsigned __int16)v60;
        int v66 = (unsigned __int16)v60;
        double v67 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v59 + 88 * (unsigned __int16)v60, (float)(v20 + v19) * 0.5);
        if (v66) {
          double v68 = *(float *)(*(void *)(v58 + 48) + 4 * (v65 - 1));
        }
        else {
          double v68 = 0.0;
        }
        a12 = v93;
        __int32 v35 = v96;
        float v16 = v91;
        float v18 = v92;
        float v43 = v61;
        float v42 = v68 + v67;
        uint64_t v69 = *a1;
        if (!*(unsigned char *)(*a1 + 192))
        {
          uint64_t v77 = *(void *)(v69 + 72);
          uint64_t v78 = 0x2E8BA2E8BA2E8BA3 * ((*(void *)(v69 + 80) - v77) >> 3);
          float v90 = v43;
          if ((v78 & 0xFFFE) != 0 && *(float *)(v69 + 184) < v40)
          {
            LOWORD(v78) = v78 - 1;
            if (*(float *)(v69 + 188) > v40)
            {
              for (unsigned __int16 k = 0; ; unsigned __int16 k = v81 + 1)
              {
                int v80 = k;
                while (1)
                {
                  unsigned int v81 = (v80 + (unsigned __int16)v78) >> 1;
                  if (*(float *)(v77 + 88 * v81 + 48) <= v40) {
                    break;
                  }
                  LOWORD(v78) = v81 - 1;
                }
                if (*(float *)(v77 + 88 * v81 + 52) > v40) {
                  break;
                }
              }
              LODWORD(v78) = (v80 + (unsigned __int16)v78) >> 1;
            }
          }
          else
          {
            LOWORD(v78) = 0;
          }
          int v82 = (unsigned __int16)v78;
          int v83 = (unsigned __int16)v78;
          double v84 = _ZNK4geom20interpolating_splineIDv4_fE18evaluate_length_atEf(v77 + 88 * (unsigned __int16)v78, v40);
          if (v83) {
            double v85 = *(float *)(*(void *)(v69 + 48) + 4 * (v82 - 1));
          }
          else {
            double v85 = 0.0;
          }
          a12 = v93;
          __int32 v35 = v96;
          float v16 = v91;
          float v18 = v92;
          float v43 = v90;
          float v44 = v85 + v84;
          goto LABEL_47;
        }
      }
      float v44 = v40;
    }
LABEL_47:
    if (v37 < *(unsigned __int8 *)a3)
    {
LABEL_48:
      float v102 = v20;
      float v103 = (float)(v20 + v19) * 0.5;
      float v104 = v15;
      float v105 = v43;
      float v106 = v16;
      float v107 = v42;
      char v108 = v37 + 1;
      v100[0] = v103;
      v100[1] = v19;
      v100[2] = v42;
      v100[3] = v18;
      v100[4] = v44;
      v100[5] = v17;
      char v101 = v37 + 1;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, &v102, a3, a4);
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_fE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUlfE_fEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, v100, a3, a4);
      return;
    }
    float32x4_t v70 = (float32x4_t)vextq_s8(vextq_s8(v99, v99, 4uLL), a12, 0xCuLL);
    v70.i32[3] = v35;
    int8x16_t v71 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_236F146C0);
    float v72 = vaddv_f32(vadd_f32(*(float32x2_t *)v71.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v71, v71, 8uLL)));
    int8x16_t v73 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_236F146D0);
    float v74 = vaddv_f32(vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v73, v73, 8uLL)));
    int8x16_t v75 = (int8x16_t)vmulq_f32(v70, (float32x4_t)xmmword_236F146E0);
    float v76 = vaddv_f32(vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)));
    if (*((unsigned char *)a3 + 8))
    {
      if (fabsf(v38) <= 0.00001)
      {
        if (fabsf(v72) > 0.00001) {
          goto LABEL_48;
        }
      }
      else if (fabsf((float)(v38 - v72) / v38) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v39) <= 0.00001)
      {
        if (fabsf(v74) > 0.00001) {
          goto LABEL_48;
        }
      }
      else if (fabsf((float)(v39 - v74) / v39) > a3[1])
      {
        goto LABEL_48;
      }
      if (fabsf(v40) <= 0.00001)
      {
        if (fabsf(v76) > 0.00001) {
          goto LABEL_48;
        }
      }
      else if (fabsf((float)(v40 - v76) / v40) > a3[1])
      {
        goto LABEL_48;
      }
      goto LABEL_16;
    }
    if (fabsf(v43) <= 0.00001)
    {
      if (fabsf(v72) > 0.00001) {
        goto LABEL_48;
      }
    }
    else if (fabsf((float)(v43 - v72) / v43) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v42) <= 0.00001)
    {
      if (fabsf(v74) > 0.00001) {
        goto LABEL_48;
      }
    }
    else if (fabsf((float)(v42 - v74) / v42) > a3[1])
    {
      goto LABEL_48;
    }
    if (fabsf(v44) <= 0.00001)
    {
      if (fabsf(v76) > 0.00001) {
        goto LABEL_48;
      }
    }
    else if (fabsf((float)(v44 - v76) / v44) > a3[1])
    {
      goto LABEL_48;
    }
    goto LABEL_87;
  }
  if (*((unsigned char *)a3 + 8))
  {
LABEL_16:
    int v50 = *(unsigned __int16 *)(a4 + 56);
    int v51 = v50 + 1;
    if ((_WORD)v50 == 0xFFFF)
    {
      *(void *)(a4 + 8) = *(void *)a4;
      *(_WORD *)(a4 + 56) = 0;
      if (!*(unsigned char *)(a4 + 58)) {
        *(void *)(a4 + 32) = *(void *)(a4 + 24);
      }
    }
    else
    {
      unint64_t v94 = a12.i64[0];
      __int32 v97 = v35;
      std::vector<float>::resize(a4, (unsigned __int16)(3 * v51 + 1));
      a12.i64[0] = v94;
      __int32 v35 = v97;
      *(_WORD *)(a4 + 56) = v51;
      if (!*(unsigned char *)(a4 + 58))
      {
        std::vector<float>::resize(a4 + 24, (unsigned __int16)(v50 + 1) + 1);
        a12.i64[0] = v94;
        __int32 v35 = v97;
      }
    }
    double v56 = *(_DWORD **)a4;
    if (v50)
    {
      int v57 = *(float **)(a4 + 24);
    }
    else
    {
      *double v56 = v99.i32[0];
      int v57 = *(float **)(a4 + 24);
      float *v57 = v15;
    }
    v56[(unsigned __int16)(3 * v50 + 1)] = a12.i32[0];
    v56[(unsigned __int16)(3 * v50 + 2)] = a12.i32[1];
    v56[(unsigned __int16)(3 * v50 + 3)] = v35;
    v57[v51] = v17;
    return;
  }
LABEL_87:
  int v86 = *(unsigned __int16 *)(a4 + 56);
  int v87 = v86 + 1;
  if ((_WORD)v86 == 0xFFFF)
  {
    *(void *)(a4 + 8) = *(void *)a4;
    *(_WORD *)(a4 + 56) = 0;
    if (!*(unsigned char *)(a4 + 58)) {
      *(void *)(a4 + 32) = *(void *)(a4 + 24);
    }
  }
  else
  {
    unint64_t v95 = a12.i64[0];
    __int32 v98 = v35;
    std::vector<float>::resize(a4, (unsigned __int16)(3 * v87 + 1));
    a12.i64[0] = v95;
    __int32 v35 = v98;
    *(_WORD *)(a4 + 56) = v87;
    if (!*(unsigned char *)(a4 + 58))
    {
      std::vector<float>::resize(a4 + 24, (unsigned __int16)(v86 + 1) + 1);
      a12.i64[0] = v95;
      __int32 v35 = v98;
    }
  }
  double v88 = *(_DWORD **)a4;
  if (v86)
  {
    double v89 = *(float **)(a4 + 24);
  }
  else
  {
    *double v88 = v99.i32[0];
    double v89 = *(float **)(a4 + 24);
    *double v89 = v20;
  }
  v88[(unsigned __int16)(3 * v86 + 1)] = a12.i32[0];
  v88[(unsigned __int16)(3 * v86 + 2)] = a12.i32[1];
  v88[(unsigned __int16)(3 * v86 + 3)] = v35;
  v89[v87] = v19;
}

double _ZNK4geom20interpolating_splineIDv2_dE20evaluate_span_lengthEj(uint64_t a1, unsigned __int16 a2)
{
  if (*(unsigned char *)(a1 + 66))
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 64);
    double v3 = *(double *)(a1 + 56);
    if (v2 == a2) {
      double v4 = *(double *)(a1 + 56);
    }
    else {
      double v4 = *(double *)(a1 + 48) + (double)a2 * ((v3 - *(double *)(a1 + 48)) / (double)v2);
    }
    if (v2 != (unsigned __int16)(a2 + 1)) {
      double v3 = *(double *)(a1 + 48) + (double)(unsigned __int16)(a2 + 1) * ((v3 - *(double *)(a1 + 48)) / (double)v2);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    double v4 = *(double *)(v5 + 8 * a2);
    double v3 = *(double *)(v5 + 8 * (unsigned __int16)(a2 + 1));
  }
  return _ZNK4geom20interpolating_splineIDv2_dE24evaluate_length_betweeenEdd((void *)a1, v4, v3);
}

double _ZNK4geom20interpolating_splineIDv2_dE24evaluate_length_betweeenEdd(void *a1, double a2, double a3)
{
  uint64_t v4 = 0;
  double v5 = (a2 + a3) * 0.5;
  double v6 = (a3 - a2) * 0.5;
  double v7 = 0.0;
  do
  {
    double v8 = *(double *)((char *)&_ZZNK4geom20interpolating_splineIDv2_dE24evaluate_length_betweeenEddE5table + v4 + 8);
    double v9 = v5
       + v6 * *(double *)((char *)&_ZZNK4geom20interpolating_splineIDv2_dE24evaluate_length_betweeenEddE5table + v4);
    uint64_t v15 = 0;
    double v16 = 0.0;
    double v17 = 0.0;
    geom::interpolating_spline<double>::find_span((uint64_t)a1, (uint64_t)&v15, v9);
    int v10 = (unsigned __int16)(3 * v15);
    float64x2_t v11 = *(float64x2_t *)(*a1 + 16 * (v10 + 1));
    float64x2_t v12 = *(float64x2_t *)(*a1 + 16 * (v10 + 2));
    float64x2_t v13 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vsubq_f64(v12, v11), v16 * (1.0 - v16 + 1.0 - v16)), vsubq_f64(v11, *(float64x2_t *)(*a1 + 16 * (unsigned __int16)(3 * v15))), (1.0 - v16) * (1.0 - v16)), vsubq_f64(*(float64x2_t *)(*a1 + 16 * (v10 + 3)), v12), v16 * v16), v17 * 3.0);
    double v7 = v7 + v8 * sqrt(vaddvq_f64(vmulq_f64(v13, v13)));
    v4 += 16;
  }
  while (v4 != 256);
  return v6 * v7;
}

void _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4)
{
  double v7 = *(double *)(a2 + 16);
  double v8 = *(double *)(a2 + 24);
  double v10 = *(double *)(a2 + 32);
  double v9 = *(double *)(a2 + 40);
  double v12 = *(double *)a2;
  double v11 = *(double *)(a2 + 8);
  if (*((unsigned char *)a3 + 8))
  {
    double v13 = (v8 - v7) / (v9 - v7);
    double v14 = (v10 - v7) / (v9 - v7);
    double v15 = 1.0 - v13;
    double v16 = 1.0 - v14;
    double v17 = -(v13 * v13);
    v18.f64[0] = (v11 + v12 * 2.0) * 0.333333333 + -(v15 * v15 * v15) * v12 + v13 * v17 * v11;
    v18.f64[1] = (v12 + v11 * 2.0) * 0.333333333 + v16 * -(v16 * v16) * v12 + -(v14 * v14 * v14) * v11;
    v19.f64[0] = v14 * v14 * (1.0 - v14);
    v19.f64[1] = v17 * (1.0 - v13);
    v20.f64[0] = (1.0 - v14) * -(v14 * (1.0 - v14));
    double v21 = v13 * (1.0 - v13);
    v20.f64[1] = (1.0 - v13) * v21;
    int64x2_t v22 = (int64x2_t)vmulq_f64(v19, v18);
    int64x2_t v23 = (int64x2_t)vmulq_f64(v20, v18);
    float64x2_t v24 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v23), (float64x2_t)vzip2q_s64(v22, v23));
    int64x2_t v25 = (int64x2_t)vmulq_n_f64(v24, 1.0 / (v13 * 3.0 * v14 * (v16 * -(v21 * v16) + v14 * (v15 * v15) * v16)));
    v24.f64[0] = *(float64_t *)a2;
    int64x2_t v90 = (int64x2_t)v24;
    float64_t v26 = *(double *)(a2 + 8);
  }
  else
  {
    float64x2_t v27 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_236F14680, v9), (float64x2_t)xmmword_236F14690, v7), (float64x2_t)xmmword_236F146A0, v8), (float64x2_t)xmmword_236F146B0, v10);
    int64x2_t v25 = (int64x2_t)vmulq_f64(v27, (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    v27.f64[0] = *(float64_t *)(a2 + 16);
    int64x2_t v90 = (int64x2_t)v27;
    float64_t v26 = *(double *)(a2 + 40);
  }
  unsigned int v28 = *(unsigned __int8 *)(a2 + 48);
  if (v28 < *((unsigned __int8 *)a3 + 1))
  {
    double v29 = (v11 + v12 * 5.0) * 0.166666667;
    double v30 = (v12 + v11) * 0.5;
    double v31 = (v12 + v11 * 5.0) * 0.166666667;
    uint64_t v32 = *a1;
    double v33 = v30;
    double v34 = v29;
    double v35 = v31;
    if (!*(unsigned char *)(*a1 + 208))
    {
      uint64_t v36 = *(void *)(v32 + 72);
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v32 + 80) - v36) >> 5);
      double v78 = *(double *)(a2 + 24);
      double v79 = *(double *)(a2 + 32);
      double v80 = *(double *)(a2 + 16);
      double v82 = *(double *)(a2 + 40);
      int64x2_t v84 = v25;
      double v87 = v26;
      if ((v37 & 0xFFFE) != 0 && *(double *)(v32 + 192) < v29)
      {
        LOWORD(v37) = v37 - 1;
        if (*(double *)(v32 + 200) > v29)
        {
          for (unsigned __int16 i = 0; ; unsigned __int16 i = v40 + 1)
          {
            int v39 = i;
            while (1)
            {
              unsigned int v40 = (v39 + (unsigned __int16)v37) >> 1;
              if (*(double *)(v36 + 96 * v40 + 48) <= v29) {
                break;
              }
              LOWORD(v37) = v40 - 1;
            }
            if (*(double *)(v36 + 96 * v40 + 56) > v29) {
              break;
            }
          }
          LODWORD(v37) = (v39 + (unsigned __int16)v37) >> 1;
        }
        int v47 = (unsigned __int16)v37;
        int v48 = (unsigned __int16)v37;
        double v43 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v36 + 96 * (unsigned __int16)v37, (v11 + v12 * 5.0) * 0.166666667);
        if (v48) {
          double v44 = *(double *)(*(void *)(v32 + 48) + 8 * (v47 - 1));
        }
        else {
          double v44 = 0.0;
        }
        double v7 = v80;
        double v9 = v82;
        int64x2_t v25 = v84;
        float64_t v26 = v87;
        double v8 = v78;
        double v10 = v79;
      }
      else
      {
        double v43 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v36, (v11 + v12 * 5.0) * 0.166666667);
        double v8 = v78;
        double v10 = v79;
        int64x2_t v25 = v84;
        float64_t v26 = v87;
        double v7 = v80;
        double v9 = v82;
        double v44 = 0.0;
      }
      double v34 = v43 + v44;
      uint64_t v49 = *a1;
      if (*(unsigned char *)(*a1 + 208))
      {
        double v33 = (v12 + v11) * 0.5;
      }
      else
      {
        uint64_t v50 = *(void *)(v49 + 72);
        unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v49 + 80) - v50) >> 5);
        if ((v51 & 0xFFFE) != 0 && *(double *)(v49 + 192) < v30)
        {
          LOWORD(v51) = v51 - 1;
          if (*(double *)(v49 + 200) > v30)
          {
            for (unsigned __int16 j = 0; ; unsigned __int16 j = v54 + 1)
            {
              int v53 = j;
              while (1)
              {
                unsigned int v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(double *)(v50 + 96 * v54 + 48) <= v30) {
                  break;
                }
                LOWORD(v51) = v54 - 1;
              }
              if (*(double *)(v50 + 96 * v54 + 56) > v30) {
                break;
              }
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
          int v57 = (unsigned __int16)v51;
          int v58 = (unsigned __int16)v51;
          double v55 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v50 + 96 * (unsigned __int16)v51, (v12 + v11) * 0.5);
          if (v58) {
            double v56 = *(double *)(*(void *)(v49 + 48) + 8 * (v57 - 1));
          }
          else {
            double v56 = 0.0;
          }
          double v7 = v80;
          double v9 = v82;
          int64x2_t v25 = v84;
          float64_t v26 = v87;
          double v8 = v78;
          double v10 = v79;
        }
        else
        {
          double v55 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v50, (v12 + v11) * 0.5);
          double v8 = v78;
          double v10 = v79;
          int64x2_t v25 = v84;
          float64_t v26 = v87;
          double v7 = v80;
          double v9 = v82;
          double v56 = 0.0;
        }
        double v33 = v55 + v56;
        uint64_t v59 = *a1;
        if (!*(unsigned char *)(*a1 + 208))
        {
          uint64_t v65 = *(void *)(v59 + 72);
          unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v59 + 80) - v65) >> 5);
          if ((v66 & 0xFFFE) != 0 && *(double *)(v59 + 192) < v31)
          {
            LOWORD(v66) = v66 - 1;
            if (*(double *)(v59 + 200) > v31)
            {
              for (unsigned __int16 k = 0; ; unsigned __int16 k = v69 + 1)
              {
                int v68 = k;
                while (1)
                {
                  unsigned int v69 = (v68 + (unsigned __int16)v66) >> 1;
                  if (*(double *)(v65 + 96 * v69 + 48) <= v31) {
                    break;
                  }
                  LOWORD(v66) = v69 - 1;
                }
                if (*(double *)(v65 + 96 * v69 + 56) > v31) {
                  break;
                }
              }
              LODWORD(v66) = (v68 + (unsigned __int16)v66) >> 1;
            }
            int v76 = (unsigned __int16)v66;
            int v77 = (unsigned __int16)v66;
            double v70 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v65 + 96 * (unsigned __int16)v66, (v12 + v11 * 5.0) * 0.166666667);
            if (v77) {
              double v71 = *(double *)(*(void *)(v59 + 48) + 8 * (v76 - 1));
            }
            else {
              double v71 = 0.0;
            }
            double v7 = v80;
            double v9 = v82;
            int64x2_t v25 = v84;
            float64_t v26 = v87;
            double v8 = v78;
            double v10 = v79;
          }
          else
          {
            double v70 = _ZNK4geom20interpolating_splineIDv2_dE18evaluate_length_atEd(v65, (v12 + v11 * 5.0) * 0.166666667);
            double v8 = v78;
            double v10 = v79;
            int64x2_t v25 = v84;
            float64_t v26 = v87;
            double v7 = v80;
            double v9 = v82;
            double v71 = 0.0;
          }
          double v35 = v70 + v71;
          goto LABEL_50;
        }
      }
      double v35 = (v12 + v11 * 5.0) * 0.166666667;
    }
LABEL_50:
    if (v28 < *(unsigned __int8 *)a3)
    {
LABEL_51:
      double v93 = v12;
      double v94 = (v12 + v11) * 0.5;
      double v95 = v7;
      double v96 = v34;
      double v97 = v8;
      double v98 = v33;
      char v99 = v28 + 1;
      v91[0] = v94;
      v91[1] = v11;
      v91[2] = v33;
      v91[3] = v10;
      v91[4] = v35;
      v91[5] = v9;
      char v92 = v28 + 1;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, &v93, a3, a4);
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv2_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, v91, a3, a4);
      return;
    }
    float64x2_t v60 = (float64x2_t)vzip1q_s64(v90, v25);
    *(void *)&v61.f64[0] = vdupq_laneq_s64(v25, 1).u64[0];
    v61.f64[1] = v26;
    double v62 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_236F14700), vmulq_f64(v61, (float64x2_t)xmmword_236F146F0)));
    double v63 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_236F14720), vmulq_f64(v61, (float64x2_t)xmmword_236F14710)));
    double v64 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_236F14740), vmulq_f64(v61, (float64x2_t)xmmword_236F14730)));
    if (*((unsigned char *)a3 + 8))
    {
      if (fabs(v29) <= 0.000001)
      {
        if (fabs(v62) > 0.000001) {
          goto LABEL_51;
        }
      }
      else if (fabs((v29 - v62) / v29) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v30) <= 0.000001)
      {
        if (fabs(v63) > 0.000001) {
          goto LABEL_51;
        }
      }
      else if (fabs((v30 - v63) / v30) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v31) <= 0.000001)
      {
        if (fabs(v64) > 0.000001) {
          goto LABEL_51;
        }
      }
      else if (fabs((v31 - v64) / v31) > a3[1])
      {
        goto LABEL_51;
      }
      goto LABEL_16;
    }
    if (fabs(v34) <= 0.000001)
    {
      if (fabs(v62) > 0.000001) {
        goto LABEL_51;
      }
    }
    else if (fabs((v34 - v62) / v34) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v33) <= 0.000001)
    {
      if (fabs(v63) > 0.000001) {
        goto LABEL_51;
      }
    }
    else if (fabs((v33 - v63) / v33) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v35) <= 0.000001)
    {
      if (fabs(v64) > 0.000001) {
        goto LABEL_51;
      }
    }
    else if (fabs((v35 - v64) / v35) > a3[1])
    {
      goto LABEL_51;
    }
    goto LABEL_88;
  }
  if (*((unsigned char *)a3 + 8))
  {
LABEL_16:
    int v41 = *(unsigned __int16 *)(a4 + 64);
    int v42 = v41 + 1;
    if ((_WORD)v41 == 0xFFFF)
    {
      *(void *)(a4 + 8) = *(void *)a4;
      *(_WORD *)(a4 + 64) = 0;
      if (!*(unsigned char *)(a4 + 66)) {
        *(void *)(a4 + 32) = *(void *)(a4 + 24);
      }
    }
    else
    {
      double v81 = v7;
      double v83 = v9;
      int64x2_t v85 = v25;
      double v88 = v26;
      std::vector<double>::resize(a4, (unsigned __int16)(3 * v42 + 1));
      int64x2_t v25 = v85;
      float64_t v26 = v88;
      double v7 = v81;
      double v9 = v83;
      *(_WORD *)(a4 + 64) = v42;
      if (!*(unsigned char *)(a4 + 66))
      {
        std::vector<double>::resize(a4 + 24, (unsigned __int16)(v41 + 1) + 1);
        int64x2_t v25 = v85;
        float64_t v26 = v88;
        double v7 = v81;
        double v9 = v83;
      }
    }
    uint64_t v45 = *(void **)a4;
    if (v41)
    {
      uint64_t v46 = *(double **)(a4 + 24);
    }
    else
    {
      *uint64_t v45 = v90.i64[0];
      uint64_t v46 = *(double **)(a4 + 24);
      *uint64_t v46 = v7;
    }
    v45[(unsigned __int16)(3 * v41 + 1)] = v25.i64[0];
    v45[(unsigned __int16)(3 * v41 + 2)] = v25.i64[1];
    *(float64_t *)&v45[(unsigned __int16)(3 * v41 + 3)] = v26;
    v46[v42] = v9;
    return;
  }
LABEL_88:
  int v72 = *(unsigned __int16 *)(a4 + 64);
  int v73 = v72 + 1;
  if ((_WORD)v72 == 0xFFFF)
  {
    *(void *)(a4 + 8) = *(void *)a4;
    *(_WORD *)(a4 + 64) = 0;
    if (!*(unsigned char *)(a4 + 66)) {
      *(void *)(a4 + 32) = *(void *)(a4 + 24);
    }
  }
  else
  {
    int64x2_t v86 = v25;
    double v89 = v26;
    std::vector<double>::resize(a4, (unsigned __int16)(3 * v73 + 1));
    int64x2_t v25 = v86;
    float64_t v26 = v89;
    *(_WORD *)(a4 + 64) = v73;
    if (!*(unsigned char *)(a4 + 66))
    {
      std::vector<double>::resize(a4 + 24, (unsigned __int16)(v72 + 1) + 1);
      int64x2_t v25 = v86;
      float64_t v26 = v89;
    }
  }
  float v74 = *(void **)a4;
  if (v72)
  {
    int8x16_t v75 = *(double **)(a4 + 24);
  }
  else
  {
    *float v74 = v90.i64[0];
    int8x16_t v75 = *(double **)(a4 + 24);
    *int8x16_t v75 = v12;
  }
  v74[(unsigned __int16)(3 * v72 + 1)] = v25.i64[0];
  v74[(unsigned __int16)(3 * v72 + 2)] = v25.i64[1];
  *(float64_t *)&v74[(unsigned __int16)(3 * v72 + 3)] = v26;
  v75[v73] = v11;
}

uint64_t _ZN4geom20interpolating_splineIDv2_dEC2ERKS2_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_((void *)a1, a2);
  std::vector<double>::vector(v4 + 3, a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 48) = v5;
  std::vector<double>::vector((void *)(a1 + 72), a2 + 72);
  return a1;
}

double _ZNK4geom20interpolating_splineIDv3_dE20evaluate_span_lengthEj(uint64_t a1, unsigned __int16 a2)
{
  if (*(unsigned char *)(a1 + 66))
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 64);
    double v3 = *(double *)(a1 + 56);
    if (v2 == a2) {
      double v4 = *(double *)(a1 + 56);
    }
    else {
      double v4 = *(double *)(a1 + 48) + (double)a2 * ((v3 - *(double *)(a1 + 48)) / (double)v2);
    }
    if (v2 != (unsigned __int16)(a2 + 1)) {
      double v3 = *(double *)(a1 + 48) + (double)(unsigned __int16)(a2 + 1) * ((v3 - *(double *)(a1 + 48)) / (double)v2);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    double v4 = *(double *)(v5 + 8 * a2);
    double v3 = *(double *)(v5 + 8 * (unsigned __int16)(a2 + 1));
  }
  return _ZNK4geom20interpolating_splineIDv3_dE24evaluate_length_betweeenEdd((void *)a1, v4, v3);
}

double _ZNK4geom20interpolating_splineIDv3_dE24evaluate_length_betweeenEdd(void *a1, double a2, double a3)
{
  uint64_t v4 = 0;
  double v5 = (a2 + a3) * 0.5;
  double v6 = (a3 - a2) * 0.5;
  double v7 = 0.0;
  do
  {
    double v8 = *(double *)((char *)&_ZZNK4geom20interpolating_splineIDv3_dE24evaluate_length_betweeenEddE5table + v4 + 8);
    double v9 = v5
       + v6 * *(double *)((char *)&_ZZNK4geom20interpolating_splineIDv3_dE24evaluate_length_betweeenEddE5table + v4);
    uint64_t v32 = 0;
    double v33 = 0.0;
    double v34 = 0.0;
    geom::interpolating_spline<double>::find_span((uint64_t)a1, (uint64_t)&v32, v9);
    v10.f64[0] = v34 * 3.0;
    int v11 = (unsigned __int16)(3 * v32);
    uint64_t v12 = *a1 + 32 * (v11 + 1);
    uint64_t v13 = *a1 + 32 * (unsigned __int16)(3 * v32);
    float64x2_t v14 = *(float64x2_t *)v13;
    float64x2_t v15 = *(float64x2_t *)(v12 + 16);
    float64x2_t v16 = vsubq_f64(v15, *(float64x2_t *)(v13 + 16));
    uint64_t v17 = *a1 + 32 * (v11 + 2);
    float64x2_t v19 = *(float64x2_t *)v17;
    float64x2_t v18 = *(float64x2_t *)(v17 + 16);
    float64x2_t v20 = vsubq_f64(*(float64x2_t *)v17, *(float64x2_t *)v12);
    uint64_t v21 = *a1 + 32 * (v11 + 3);
    float64x2_t v22 = *(float64x2_t *)(v21 + 16);
    float64x2_t v23 = vsubq_f64(v18, v15);
    double v24 = 1.0 - v33;
    v25.f64[0] = v24 * v24;
    float64x2_t v26 = vsubq_f64(v22, v18);
    v22.f64[0] = v33 * (v24 + v24);
    v27.f64[0] = v33 * v33;
    float64x2_t v28 = vmlaq_f64(vmlaq_f64(vmulq_f64(v22, v23), v25, v16), v27, v26);
    float64x2_t v29 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v20, v22.f64[0]), vsubq_f64(*(float64x2_t *)v12, v14), v24 * v24), vsubq_f64(*(float64x2_t *)v21, v19), v33 * v33), v34 * 3.0);
    float64x2_t v30 = vmulq_f64(v10, v28);
    double v7 = v7 + v8 * sqrt(vmulq_f64(v30, v30).f64[0] + vaddvq_f64(vmulq_f64(v29, v29)));
    v4 += 16;
  }
  while (v4 != 256);
  return v6 * v7;
}

void _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4)
{
  double v7 = *(double *)(a2 + 16);
  double v8 = *(double *)(a2 + 24);
  double v10 = *(double *)(a2 + 32);
  double v9 = *(double *)(a2 + 40);
  double v12 = *(double *)a2;
  double v11 = *(double *)(a2 + 8);
  if (*((unsigned char *)a3 + 8))
  {
    double v13 = (v8 - v7) / (v9 - v7);
    double v14 = (v10 - v7) / (v9 - v7);
    double v15 = 1.0 - v13;
    double v16 = 1.0 - v14;
    double v17 = -(v13 * v13);
    v18.f64[0] = (v11 + v12 * 2.0) * 0.333333333 + -(v15 * v15 * v15) * v12 + v13 * v17 * v11;
    v18.f64[1] = (v12 + v11 * 2.0) * 0.333333333 + v16 * -(v16 * v16) * v12 + -(v14 * v14 * v14) * v11;
    v19.f64[0] = v14 * v14 * (1.0 - v14);
    v19.f64[1] = v17 * (1.0 - v13);
    v20.f64[0] = (1.0 - v14) * -(v14 * (1.0 - v14));
    double v21 = v13 * (1.0 - v13);
    v20.f64[1] = (1.0 - v13) * v21;
    int64x2_t v22 = (int64x2_t)vmulq_f64(v19, v18);
    int64x2_t v23 = (int64x2_t)vmulq_f64(v20, v18);
    float64x2_t v24 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v23), (float64x2_t)vzip2q_s64(v22, v23));
    int64x2_t v25 = (int64x2_t)vmulq_n_f64(v24, 1.0 / (v13 * 3.0 * v14 * (v16 * -(v21 * v16) + v14 * (v15 * v15) * v16)));
    v24.f64[0] = *(float64_t *)a2;
    int64x2_t v90 = (int64x2_t)v24;
    float64_t v26 = *(double *)(a2 + 8);
  }
  else
  {
    float64x2_t v27 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_236F14680, v9), (float64x2_t)xmmword_236F14690, v7), (float64x2_t)xmmword_236F146A0, v8), (float64x2_t)xmmword_236F146B0, v10);
    int64x2_t v25 = (int64x2_t)vmulq_f64(v27, (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    v27.f64[0] = *(float64_t *)(a2 + 16);
    int64x2_t v90 = (int64x2_t)v27;
    float64_t v26 = *(double *)(a2 + 40);
  }
  unsigned int v28 = *(unsigned __int8 *)(a2 + 48);
  if (v28 < *((unsigned __int8 *)a3 + 1))
  {
    double v29 = (v11 + v12 * 5.0) * 0.166666667;
    double v30 = (v12 + v11) * 0.5;
    double v31 = (v12 + v11 * 5.0) * 0.166666667;
    uint64_t v32 = *a1;
    double v33 = v30;
    double v34 = v29;
    double v35 = v31;
    if (!*(unsigned char *)(*a1 + 208))
    {
      uint64_t v36 = *(void *)(v32 + 72);
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v32 + 80) - v36) >> 5);
      double v78 = *(double *)(a2 + 24);
      double v79 = *(double *)(a2 + 32);
      double v80 = *(double *)(a2 + 16);
      double v82 = *(double *)(a2 + 40);
      int64x2_t v84 = v25;
      double v87 = v26;
      if ((v37 & 0xFFFE) != 0 && *(double *)(v32 + 192) < v29)
      {
        LOWORD(v37) = v37 - 1;
        if (*(double *)(v32 + 200) > v29)
        {
          for (unsigned __int16 i = 0; ; unsigned __int16 i = v40 + 1)
          {
            int v39 = i;
            while (1)
            {
              unsigned int v40 = (v39 + (unsigned __int16)v37) >> 1;
              if (*(double *)(v36 + 96 * v40 + 48) <= v29) {
                break;
              }
              LOWORD(v37) = v40 - 1;
            }
            if (*(double *)(v36 + 96 * v40 + 56) > v29) {
              break;
            }
          }
          LODWORD(v37) = (v39 + (unsigned __int16)v37) >> 1;
        }
        int v47 = (unsigned __int16)v37;
        int v48 = (unsigned __int16)v37;
        double v43 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v36 + 96 * (unsigned __int16)v37, (v11 + v12 * 5.0) * 0.166666667);
        if (v48) {
          double v44 = *(double *)(*(void *)(v32 + 48) + 8 * (v47 - 1));
        }
        else {
          double v44 = 0.0;
        }
        double v7 = v80;
        double v9 = v82;
        int64x2_t v25 = v84;
        float64_t v26 = v87;
        double v8 = v78;
        double v10 = v79;
      }
      else
      {
        double v43 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v36, (v11 + v12 * 5.0) * 0.166666667);
        double v8 = v78;
        double v10 = v79;
        int64x2_t v25 = v84;
        float64_t v26 = v87;
        double v7 = v80;
        double v9 = v82;
        double v44 = 0.0;
      }
      double v34 = v43 + v44;
      uint64_t v49 = *a1;
      if (*(unsigned char *)(*a1 + 208))
      {
        double v33 = (v12 + v11) * 0.5;
      }
      else
      {
        uint64_t v50 = *(void *)(v49 + 72);
        unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v49 + 80) - v50) >> 5);
        if ((v51 & 0xFFFE) != 0 && *(double *)(v49 + 192) < v30)
        {
          LOWORD(v51) = v51 - 1;
          if (*(double *)(v49 + 200) > v30)
          {
            for (unsigned __int16 j = 0; ; unsigned __int16 j = v54 + 1)
            {
              int v53 = j;
              while (1)
              {
                unsigned int v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(double *)(v50 + 96 * v54 + 48) <= v30) {
                  break;
                }
                LOWORD(v51) = v54 - 1;
              }
              if (*(double *)(v50 + 96 * v54 + 56) > v30) {
                break;
              }
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
          int v57 = (unsigned __int16)v51;
          int v58 = (unsigned __int16)v51;
          double v55 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v50 + 96 * (unsigned __int16)v51, (v12 + v11) * 0.5);
          if (v58) {
            double v56 = *(double *)(*(void *)(v49 + 48) + 8 * (v57 - 1));
          }
          else {
            double v56 = 0.0;
          }
          double v7 = v80;
          double v9 = v82;
          int64x2_t v25 = v84;
          float64_t v26 = v87;
          double v8 = v78;
          double v10 = v79;
        }
        else
        {
          double v55 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v50, (v12 + v11) * 0.5);
          double v8 = v78;
          double v10 = v79;
          int64x2_t v25 = v84;
          float64_t v26 = v87;
          double v7 = v80;
          double v9 = v82;
          double v56 = 0.0;
        }
        double v33 = v55 + v56;
        uint64_t v59 = *a1;
        if (!*(unsigned char *)(*a1 + 208))
        {
          uint64_t v65 = *(void *)(v59 + 72);
          unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v59 + 80) - v65) >> 5);
          if ((v66 & 0xFFFE) != 0 && *(double *)(v59 + 192) < v31)
          {
            LOWORD(v66) = v66 - 1;
            if (*(double *)(v59 + 200) > v31)
            {
              for (unsigned __int16 k = 0; ; unsigned __int16 k = v69 + 1)
              {
                int v68 = k;
                while (1)
                {
                  unsigned int v69 = (v68 + (unsigned __int16)v66) >> 1;
                  if (*(double *)(v65 + 96 * v69 + 48) <= v31) {
                    break;
                  }
                  LOWORD(v66) = v69 - 1;
                }
                if (*(double *)(v65 + 96 * v69 + 56) > v31) {
                  break;
                }
              }
              LODWORD(v66) = (v68 + (unsigned __int16)v66) >> 1;
            }
            int v76 = (unsigned __int16)v66;
            int v77 = (unsigned __int16)v66;
            double v70 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v65 + 96 * (unsigned __int16)v66, (v12 + v11 * 5.0) * 0.166666667);
            if (v77) {
              double v71 = *(double *)(*(void *)(v59 + 48) + 8 * (v76 - 1));
            }
            else {
              double v71 = 0.0;
            }
            double v7 = v80;
            double v9 = v82;
            int64x2_t v25 = v84;
            float64_t v26 = v87;
            double v8 = v78;
            double v10 = v79;
          }
          else
          {
            double v70 = _ZNK4geom20interpolating_splineIDv3_dE18evaluate_length_atEd(v65, (v12 + v11 * 5.0) * 0.166666667);
            double v8 = v78;
            double v10 = v79;
            int64x2_t v25 = v84;
            float64_t v26 = v87;
            double v7 = v80;
            double v9 = v82;
            double v71 = 0.0;
          }
          double v35 = v70 + v71;
          goto LABEL_50;
        }
      }
      double v35 = (v12 + v11 * 5.0) * 0.166666667;
    }
LABEL_50:
    if (v28 < *(unsigned __int8 *)a3)
    {
LABEL_51:
      double v93 = v12;
      double v94 = (v12 + v11) * 0.5;
      double v95 = v7;
      double v96 = v34;
      double v97 = v8;
      double v98 = v33;
      char v99 = v28 + 1;
      v91[0] = v94;
      v91[1] = v11;
      v91[2] = v33;
      v91[3] = v10;
      v91[4] = v35;
      v91[5] = v9;
      char v92 = v28 + 1;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, &v93, a3, a4);
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv3_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, v91, a3, a4);
      return;
    }
    float64x2_t v60 = (float64x2_t)vzip1q_s64(v90, v25);
    *(void *)&v61.f64[0] = vdupq_laneq_s64(v25, 1).u64[0];
    v61.f64[1] = v26;
    double v62 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_236F14700), vmulq_f64(v61, (float64x2_t)xmmword_236F146F0)));
    double v63 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_236F14720), vmulq_f64(v61, (float64x2_t)xmmword_236F14710)));
    double v64 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_236F14740), vmulq_f64(v61, (float64x2_t)xmmword_236F14730)));
    if (*((unsigned char *)a3 + 8))
    {
      if (fabs(v29) <= 0.000001)
      {
        if (fabs(v62) > 0.000001) {
          goto LABEL_51;
        }
      }
      else if (fabs((v29 - v62) / v29) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v30) <= 0.000001)
      {
        if (fabs(v63) > 0.000001) {
          goto LABEL_51;
        }
      }
      else if (fabs((v30 - v63) / v30) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v31) <= 0.000001)
      {
        if (fabs(v64) > 0.000001) {
          goto LABEL_51;
        }
      }
      else if (fabs((v31 - v64) / v31) > a3[1])
      {
        goto LABEL_51;
      }
      goto LABEL_16;
    }
    if (fabs(v34) <= 0.000001)
    {
      if (fabs(v62) > 0.000001) {
        goto LABEL_51;
      }
    }
    else if (fabs((v34 - v62) / v34) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v33) <= 0.000001)
    {
      if (fabs(v63) > 0.000001) {
        goto LABEL_51;
      }
    }
    else if (fabs((v33 - v63) / v33) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v35) <= 0.000001)
    {
      if (fabs(v64) > 0.000001) {
        goto LABEL_51;
      }
    }
    else if (fabs((v35 - v64) / v35) > a3[1])
    {
      goto LABEL_51;
    }
    goto LABEL_88;
  }
  if (*((unsigned char *)a3 + 8))
  {
LABEL_16:
    int v41 = *(unsigned __int16 *)(a4 + 64);
    int v42 = v41 + 1;
    if ((_WORD)v41 == 0xFFFF)
    {
      *(void *)(a4 + 8) = *(void *)a4;
      *(_WORD *)(a4 + 64) = 0;
      if (!*(unsigned char *)(a4 + 66)) {
        *(void *)(a4 + 32) = *(void *)(a4 + 24);
      }
    }
    else
    {
      double v81 = v7;
      double v83 = v9;
      int64x2_t v85 = v25;
      double v88 = v26;
      std::vector<double>::resize(a4, (unsigned __int16)(3 * v42 + 1));
      int64x2_t v25 = v85;
      float64_t v26 = v88;
      double v7 = v81;
      double v9 = v83;
      *(_WORD *)(a4 + 64) = v42;
      if (!*(unsigned char *)(a4 + 66))
      {
        std::vector<double>::resize(a4 + 24, (unsigned __int16)(v41 + 1) + 1);
        int64x2_t v25 = v85;
        float64_t v26 = v88;
        double v7 = v81;
        double v9 = v83;
      }
    }
    uint64_t v45 = *(void **)a4;
    if (v41)
    {
      uint64_t v46 = *(double **)(a4 + 24);
    }
    else
    {
      *uint64_t v45 = v90.i64[0];
      uint64_t v46 = *(double **)(a4 + 24);
      *uint64_t v46 = v7;
    }
    v45[(unsigned __int16)(3 * v41 + 1)] = v25.i64[0];
    v45[(unsigned __int16)(3 * v41 + 2)] = v25.i64[1];
    *(float64_t *)&v45[(unsigned __int16)(3 * v41 + 3)] = v26;
    v46[v42] = v9;
    return;
  }
LABEL_88:
  int v72 = *(unsigned __int16 *)(a4 + 64);
  int v73 = v72 + 1;
  if ((_WORD)v72 == 0xFFFF)
  {
    *(void *)(a4 + 8) = *(void *)a4;
    *(_WORD *)(a4 + 64) = 0;
    if (!*(unsigned char *)(a4 + 66)) {
      *(void *)(a4 + 32) = *(void *)(a4 + 24);
    }
  }
  else
  {
    int64x2_t v86 = v25;
    double v89 = v26;
    std::vector<double>::resize(a4, (unsigned __int16)(3 * v73 + 1));
    int64x2_t v25 = v86;
    float64_t v26 = v89;
    *(_WORD *)(a4 + 64) = v73;
    if (!*(unsigned char *)(a4 + 66))
    {
      std::vector<double>::resize(a4 + 24, (unsigned __int16)(v72 + 1) + 1);
      int64x2_t v25 = v86;
      float64_t v26 = v89;
    }
  }
  float v74 = *(void **)a4;
  if (v72)
  {
    int8x16_t v75 = *(double **)(a4 + 24);
  }
  else
  {
    *float v74 = v90.i64[0];
    int8x16_t v75 = *(double **)(a4 + 24);
    *int8x16_t v75 = v12;
  }
  v74[(unsigned __int16)(3 * v72 + 1)] = v25.i64[0];
  v74[(unsigned __int16)(3 * v72 + 2)] = v25.i64[1];
  *(float64_t *)&v74[(unsigned __int16)(3 * v72 + 3)] = v26;
  v75[v73] = v11;
}

uint64_t _ZN4geom20interpolating_splineIDv3_dEC2ERKS2_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2ERKS4_((void *)a1, a2);
  std::vector<double>::vector(v4 + 3, a2 + 24);
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 63) = *(_DWORD *)(a2 + 63);
  *(_OWORD *)(a1 + 48) = v5;
  std::vector<double>::vector((void *)(a1 + 72), a2 + 72);
  return a1;
}

void *_ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2ERKS4_(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(a1, v5 >> 5);
    double v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

double _ZNK4geom20interpolating_splineIDv4_dE20evaluate_span_lengthEj(uint64_t a1, unsigned __int16 a2)
{
  if (*(unsigned char *)(a1 + 66))
  {
    unsigned int v2 = *(unsigned __int16 *)(a1 + 64);
    double v3 = *(double *)(a1 + 56);
    if (v2 == a2) {
      double v4 = *(double *)(a1 + 56);
    }
    else {
      double v4 = *(double *)(a1 + 48) + (double)a2 * ((v3 - *(double *)(a1 + 48)) / (double)v2);
    }
    if (v2 != (unsigned __int16)(a2 + 1)) {
      double v3 = *(double *)(a1 + 48) + (double)(unsigned __int16)(a2 + 1) * ((v3 - *(double *)(a1 + 48)) / (double)v2);
    }
  }
  else
  {
    uint64_t v5 = *(void *)(a1 + 24);
    double v4 = *(double *)(v5 + 8 * a2);
    double v3 = *(double *)(v5 + 8 * (unsigned __int16)(a2 + 1));
  }
  return _ZNK4geom20interpolating_splineIDv4_dE24evaluate_length_betweeenEdd((void *)a1, v4, v3);
}

double _ZNK4geom20interpolating_splineIDv4_dE24evaluate_length_betweeenEdd(void *a1, double a2, double a3)
{
  uint64_t v4 = 0;
  double v5 = (a2 + a3) * 0.5;
  double v6 = (a3 - a2) * 0.5;
  double v7 = 0.0;
  do
  {
    double v8 = *(double *)((char *)&_ZZNK4geom20interpolating_splineIDv4_dE24evaluate_length_betweeenEddE5table + v4 + 8);
    double v9 = v5
       + v6 * *(double *)((char *)&_ZZNK4geom20interpolating_splineIDv4_dE24evaluate_length_betweeenEddE5table + v4);
    uint64_t v27 = 0;
    double v28 = 0.0;
    double v29 = 0.0;
    geom::interpolating_spline<double>::find_span((uint64_t)a1, (uint64_t)&v27, v9);
    int v10 = (unsigned __int16)(3 * v27);
    uint64_t v11 = *a1 + 32 * (v10 + 1);
    uint64_t v12 = *a1 + 32 * (unsigned __int16)(3 * v27);
    float64x2_t v13 = *(float64x2_t *)v12;
    float64x2_t v14 = *(float64x2_t *)(v11 + 16);
    float64x2_t v15 = vsubq_f64(v14, *(float64x2_t *)(v12 + 16));
    uint64_t v16 = *a1 + 32 * (v10 + 2);
    float64x2_t v18 = *(float64x2_t *)v16;
    float64x2_t v17 = *(float64x2_t *)(v16 + 16);
    float64x2_t v19 = vsubq_f64(*(float64x2_t *)v16, *(float64x2_t *)v11);
    float64x2_t v20 = (float64x2_t *)(*a1 + 32 * (v10 + 3));
    double v21 = 1.0 - v28;
    double v22 = v21 * v21;
    double v23 = v28 * (v21 + v21);
    float64x2_t v24 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v19, v23), vsubq_f64(*(float64x2_t *)v11, v13), v22), vsubq_f64(*v20, v18), v28 * v28), v29 * 3.0);
    float64x2_t v25 = vmulq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vsubq_f64(v17, v14), v23), v15, v22), vsubq_f64(v20[1], v17), v28 * v28), v29 * 3.0);
    double v7 = v7 + v8 * sqrt(vaddvq_f64(vaddq_f64(vmulq_f64(v24, v24), vmulq_f64(v25, v25))));
    v4 += 16;
  }
  while (v4 != 256);
  return v6 * v7;
}

void _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(uint64_t *a1, uint64_t a2, float *a3, uint64_t a4)
{
  double v7 = *(double *)(a2 + 16);
  double v8 = *(double *)(a2 + 24);
  double v10 = *(double *)(a2 + 32);
  double v9 = *(double *)(a2 + 40);
  double v12 = *(double *)a2;
  double v11 = *(double *)(a2 + 8);
  if (*((unsigned char *)a3 + 8))
  {
    double v13 = (v8 - v7) / (v9 - v7);
    double v14 = (v10 - v7) / (v9 - v7);
    double v15 = 1.0 - v13;
    double v16 = 1.0 - v14;
    double v17 = -(v13 * v13);
    v18.f64[0] = (v11 + v12 * 2.0) * 0.333333333 + -(v15 * v15 * v15) * v12 + v13 * v17 * v11;
    v18.f64[1] = (v12 + v11 * 2.0) * 0.333333333 + v16 * -(v16 * v16) * v12 + -(v14 * v14 * v14) * v11;
    v19.f64[0] = v14 * v14 * (1.0 - v14);
    v19.f64[1] = v17 * (1.0 - v13);
    v20.f64[0] = (1.0 - v14) * -(v14 * (1.0 - v14));
    double v21 = v13 * (1.0 - v13);
    v20.f64[1] = (1.0 - v13) * v21;
    int64x2_t v22 = (int64x2_t)vmulq_f64(v19, v18);
    int64x2_t v23 = (int64x2_t)vmulq_f64(v20, v18);
    float64x2_t v24 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v23), (float64x2_t)vzip2q_s64(v22, v23));
    int64x2_t v25 = (int64x2_t)vmulq_n_f64(v24, 1.0 / (v13 * 3.0 * v14 * (v16 * -(v21 * v16) + v14 * (v15 * v15) * v16)));
    v24.f64[0] = *(float64_t *)a2;
    int64x2_t v90 = (int64x2_t)v24;
    float64_t v26 = *(double *)(a2 + 8);
  }
  else
  {
    float64x2_t v27 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)xmmword_236F14680, v9), (float64x2_t)xmmword_236F14690, v7), (float64x2_t)xmmword_236F146A0, v8), (float64x2_t)xmmword_236F146B0, v10);
    int64x2_t v25 = (int64x2_t)vmulq_f64(v27, (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL));
    v27.f64[0] = *(float64_t *)(a2 + 16);
    int64x2_t v90 = (int64x2_t)v27;
    float64_t v26 = *(double *)(a2 + 40);
  }
  unsigned int v28 = *(unsigned __int8 *)(a2 + 48);
  if (v28 < *((unsigned __int8 *)a3 + 1))
  {
    double v29 = (v11 + v12 * 5.0) * 0.166666667;
    double v30 = (v12 + v11) * 0.5;
    double v31 = (v12 + v11 * 5.0) * 0.166666667;
    uint64_t v32 = *a1;
    double v33 = v30;
    double v34 = v29;
    double v35 = v31;
    if (!*(unsigned char *)(*a1 + 208))
    {
      uint64_t v36 = *(void *)(v32 + 72);
      unint64_t v37 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v32 + 80) - v36) >> 5);
      double v78 = *(double *)(a2 + 24);
      double v79 = *(double *)(a2 + 32);
      double v80 = *(double *)(a2 + 16);
      double v82 = *(double *)(a2 + 40);
      int64x2_t v84 = v25;
      double v87 = v26;
      if ((v37 & 0xFFFE) != 0 && *(double *)(v32 + 192) < v29)
      {
        LOWORD(v37) = v37 - 1;
        if (*(double *)(v32 + 200) > v29)
        {
          for (unsigned __int16 i = 0; ; unsigned __int16 i = v40 + 1)
          {
            int v39 = i;
            while (1)
            {
              unsigned int v40 = (v39 + (unsigned __int16)v37) >> 1;
              if (*(double *)(v36 + 96 * v40 + 48) <= v29) {
                break;
              }
              LOWORD(v37) = v40 - 1;
            }
            if (*(double *)(v36 + 96 * v40 + 56) > v29) {
              break;
            }
          }
          LODWORD(v37) = (v39 + (unsigned __int16)v37) >> 1;
        }
        int v47 = (unsigned __int16)v37;
        int v48 = (unsigned __int16)v37;
        double v43 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v36 + 96 * (unsigned __int16)v37, (v11 + v12 * 5.0) * 0.166666667);
        if (v48) {
          double v44 = *(double *)(*(void *)(v32 + 48) + 8 * (v47 - 1));
        }
        else {
          double v44 = 0.0;
        }
        double v7 = v80;
        double v9 = v82;
        int64x2_t v25 = v84;
        float64_t v26 = v87;
        double v8 = v78;
        double v10 = v79;
      }
      else
      {
        double v43 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v36, (v11 + v12 * 5.0) * 0.166666667);
        double v8 = v78;
        double v10 = v79;
        int64x2_t v25 = v84;
        float64_t v26 = v87;
        double v7 = v80;
        double v9 = v82;
        double v44 = 0.0;
      }
      double v34 = v43 + v44;
      uint64_t v49 = *a1;
      if (*(unsigned char *)(*a1 + 208))
      {
        double v33 = (v12 + v11) * 0.5;
      }
      else
      {
        uint64_t v50 = *(void *)(v49 + 72);
        unint64_t v51 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v49 + 80) - v50) >> 5);
        if ((v51 & 0xFFFE) != 0 && *(double *)(v49 + 192) < v30)
        {
          LOWORD(v51) = v51 - 1;
          if (*(double *)(v49 + 200) > v30)
          {
            for (unsigned __int16 j = 0; ; unsigned __int16 j = v54 + 1)
            {
              int v53 = j;
              while (1)
              {
                unsigned int v54 = (v53 + (unsigned __int16)v51) >> 1;
                if (*(double *)(v50 + 96 * v54 + 48) <= v30) {
                  break;
                }
                LOWORD(v51) = v54 - 1;
              }
              if (*(double *)(v50 + 96 * v54 + 56) > v30) {
                break;
              }
            }
            LODWORD(v51) = (v53 + (unsigned __int16)v51) >> 1;
          }
          int v57 = (unsigned __int16)v51;
          int v58 = (unsigned __int16)v51;
          double v55 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v50 + 96 * (unsigned __int16)v51, (v12 + v11) * 0.5);
          if (v58) {
            double v56 = *(double *)(*(void *)(v49 + 48) + 8 * (v57 - 1));
          }
          else {
            double v56 = 0.0;
          }
          double v7 = v80;
          double v9 = v82;
          int64x2_t v25 = v84;
          float64_t v26 = v87;
          double v8 = v78;
          double v10 = v79;
        }
        else
        {
          double v55 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v50, (v12 + v11) * 0.5);
          double v8 = v78;
          double v10 = v79;
          int64x2_t v25 = v84;
          float64_t v26 = v87;
          double v7 = v80;
          double v9 = v82;
          double v56 = 0.0;
        }
        double v33 = v55 + v56;
        uint64_t v59 = *a1;
        if (!*(unsigned char *)(*a1 + 208))
        {
          uint64_t v65 = *(void *)(v59 + 72);
          unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(v59 + 80) - v65) >> 5);
          if ((v66 & 0xFFFE) != 0 && *(double *)(v59 + 192) < v31)
          {
            LOWORD(v66) = v66 - 1;
            if (*(double *)(v59 + 200) > v31)
            {
              for (unsigned __int16 k = 0; ; unsigned __int16 k = v69 + 1)
              {
                int v68 = k;
                while (1)
                {
                  unsigned int v69 = (v68 + (unsigned __int16)v66) >> 1;
                  if (*(double *)(v65 + 96 * v69 + 48) <= v31) {
                    break;
                  }
                  LOWORD(v66) = v69 - 1;
                }
                if (*(double *)(v65 + 96 * v69 + 56) > v31) {
                  break;
                }
              }
              LODWORD(v66) = (v68 + (unsigned __int16)v66) >> 1;
            }
            int v76 = (unsigned __int16)v66;
            int v77 = (unsigned __int16)v66;
            double v70 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v65 + 96 * (unsigned __int16)v66, (v12 + v11 * 5.0) * 0.166666667);
            if (v77) {
              double v71 = *(double *)(*(void *)(v59 + 48) + 8 * (v76 - 1));
            }
            else {
              double v71 = 0.0;
            }
            double v7 = v80;
            double v9 = v82;
            int64x2_t v25 = v84;
            float64_t v26 = v87;
            double v8 = v78;
            double v10 = v79;
          }
          else
          {
            double v70 = _ZNK4geom20interpolating_splineIDv4_dE18evaluate_length_atEd(v65, (v12 + v11 * 5.0) * 0.166666667);
            double v8 = v78;
            double v10 = v79;
            int64x2_t v25 = v84;
            float64_t v26 = v87;
            double v7 = v80;
            double v9 = v82;
            double v71 = 0.0;
          }
          double v35 = v70 + v71;
          goto LABEL_50;
        }
      }
      double v35 = (v12 + v11 * 5.0) * 0.166666667;
    }
LABEL_50:
    if (v28 < *(unsigned __int8 *)a3)
    {
LABEL_51:
      double v93 = v12;
      double v94 = (v12 + v11) * 0.5;
      double v95 = v7;
      double v96 = v34;
      double v97 = v8;
      double v98 = v33;
      char v99 = v28 + 1;
      v91[0] = v94;
      v91[1] = v11;
      v91[2] = v33;
      v91[3] = v10;
      v91[4] = v35;
      v91[5] = v9;
      char v92 = v28 + 1;
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, &v93, a3, a4);
      _ZN4geom12_GLOBAL__N_136fit_function_with_spline_recursivelyIZNS_19interpolating_curveIDv4_dE12build_helperERKNSt3__16vectorINS_17interpolating_keyIS3_EENS5_9allocatorIS8_EEEEbEUldE_dEEvRKT_RKNS0_17fit_function_dataIT0_EERKNS0_20fit_function_optionsERNS_20interpolating_splineISJ_EE(a1, v91, a3, a4);
      return;
    }
    float64x2_t v60 = (float64x2_t)vzip1q_s64(v90, v25);
    *(void *)&v61.f64[0] = vdupq_laneq_s64(v25, 1).u64[0];
    v61.f64[1] = v26;
    double v62 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_236F14700), vmulq_f64(v61, (float64x2_t)xmmword_236F146F0)));
    double v63 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_236F14720), vmulq_f64(v61, (float64x2_t)xmmword_236F14710)));
    double v64 = vaddvq_f64(vaddq_f64(vmulq_f64(v60, (float64x2_t)xmmword_236F14740), vmulq_f64(v61, (float64x2_t)xmmword_236F14730)));
    if (*((unsigned char *)a3 + 8))
    {
      if (fabs(v29) <= 0.000001)
      {
        if (fabs(v62) > 0.000001) {
          goto LABEL_51;
        }
      }
      else if (fabs((v29 - v62) / v29) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v30) <= 0.000001)
      {
        if (fabs(v63) > 0.000001) {
          goto LABEL_51;
        }
      }
      else if (fabs((v30 - v63) / v30) > a3[1])
      {
        goto LABEL_51;
      }
      if (fabs(v31) <= 0.000001)
      {
        if (fabs(v64) > 0.000001) {
          goto LABEL_51;
        }
      }
      else if (fabs((v31 - v64) / v31) > a3[1])
      {
        goto LABEL_51;
      }
      goto LABEL_16;
    }
    if (fabs(v34) <= 0.000001)
    {
      if (fabs(v62) > 0.000001) {
        goto LABEL_51;
      }
    }
    else if (fabs((v34 - v62) / v34) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v33) <= 0.000001)
    {
      if (fabs(v63) > 0.000001) {
        goto LABEL_51;
      }
    }
    else if (fabs((v33 - v63) / v33) > a3[1])
    {
      goto LABEL_51;
    }
    if (fabs(v35) <= 0.000001)
    {
      if (fabs(v64) > 0.000001) {
        goto LABEL_51;
      }
    }
    else if (fabs((v35 - v64) / v35) > a3[1])
    {
      goto LABEL_51;
    }
    goto LABEL_88;
  }
  if (*((unsigned char *)a3 + 8))
  {
LABEL_16:
    int v41 = *(unsigned __int16 *)(a4 + 64);
    int v42 = v41 + 1;
    if ((_WORD)v41 == 0xFFFF)
    {
      *(void *)(a4 + 8) = *(void *)a4;
      *(_WORD *)(a4 + 64) = 0;
      if (!*(unsigned char *)(a4 + 66)) {
        *(void *)(a4 + 32) = *(void *)(a4 + 24);
      }
    }
    else
    {
      double v81 = v7;
      double v83 = v9;
      int64x2_t v85 = v25;
      double v88 = v26;
      std::vector<double>::resize(a4, (unsigned __int16)(3 * v42 + 1));
      int64x2_t v25 = v85;
      float64_t v26 = v88;
      double v7 = v81;
      double v9 = v83;
      *(_WORD *)(a4 + 64) = v42;
      if (!*(unsigned char *)(a4 + 66))
      {
        std::vector<double>::resize(a4 + 24, (unsigned __int16)(v41 + 1) + 1);
        int64x2_t v25 = v85;
        float64_t v26 = v88;
        double v7 = v81;
        double v9 = v83;
      }
    }
    uint64_t v45 = *(void **)a4;
    if (v41)
    {
      uint64_t v46 = *(double **)(a4 + 24);
    }
    else
    {
      *uint64_t v45 = v90.i64[0];
      uint64_t v46 = *(double **)(a4 + 24);
      *uint64_t v46 = v7;
    }
    v45[(unsigned __int16)(3 * v41 + 1)] = v25.i64[0];
    v45[(unsigned __int16)(3 * v41 + 2)] = v25.i64[1];
    *(float64_t *)&v45[(unsigned __int16)(3 * v41 + 3)] = v26;
    v46[v42] = v9;
    return;
  }
LABEL_88:
  int v72 = *(unsigned __int16 *)(a4 + 64);
  int v73 = v72 + 1;
  if ((_WORD)v72 == 0xFFFF)
  {
    *(void *)(a4 + 8) = *(void *)a4;
    *(_WORD *)(a4 + 64) = 0;
    if (!*(unsigned char *)(a4 + 66)) {
      *(void *)(a4 + 32) = *(void *)(a4 + 24);
    }
  }
  else
  {
    int64x2_t v86 = v25;
    double v89 = v26;
    std::vector<double>::resize(a4, (unsigned __int16)(3 * v73 + 1));
    int64x2_t v25 = v86;
    float64_t v26 = v89;
    *(_WORD *)(a4 + 64) = v73;
    if (!*(unsigned char *)(a4 + 66))
    {
      std::vector<double>::resize(a4 + 24, (unsigned __int16)(v72 + 1) + 1);
      int64x2_t v25 = v86;
      float64_t v26 = v89;
    }
  }
  float v74 = *(void **)a4;
  if (v72)
  {
    int8x16_t v75 = *(double **)(a4 + 24);
  }
  else
  {
    *float v74 = v90.i64[0];
    int8x16_t v75 = *(double **)(a4 + 24);
    *int8x16_t v75 = v12;
  }
  v74[(unsigned __int16)(3 * v72 + 1)] = v25.i64[0];
  v74[(unsigned __int16)(3 * v72 + 2)] = v25.i64[1];
  *(float64_t *)&v74[(unsigned __int16)(3 * v72 + 3)] = v26;
  v75[v73] = v11;
}

float geom::convex_hull_triangulated_3<float>(unint64_t a1, float32x4_t *a2, void *a3, unsigned int a4, float a5)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  a3[1] = *a3;
  if (!a1) {
    return 0.0;
  }
  if (a1 > 3)
  {
    unint64_t v10 = a1;
  }
  else
  {
    memcpy(__dst, a2, 16 * a1);
    long long v9 = __dst[0];
    unint64_t v10 = 4;
    unint64_t v11 = a1;
    do
      __dst[v11++] = v9;
    while (v11 != 4);
    a2 = (float32x4_t *)__dst;
  }
  unint64_t v55 = v10;
  double v13 = (char *)*a3;
  a3[1] = *a3;
  double v14 = v60;
  int v57 = v61;
  if (v60 != v61)
  {
    double v15 = (char **)(a3 + 2);
    do
    {
      uint64_t v16 = *v14;
      if (v16 != -1)
      {
        int v17 = *(_DWORD *)(v59 + 16 * v16 + 12);
        uint64_t v18 = *v14;
        do
        {
          uint64_t v19 = v59;
          uint64_t v20 = v59 + 16 * v18;
          unsigned int v23 = *(_DWORD *)(v20 + 8);
          int64x2_t v22 = (unsigned int *)(v20 + 8);
          uint64_t v21 = v23;
          if (v18 != v16 && v21 != v16)
          {
            float64x2_t v24 = *v15;
            if (v13 >= *v15)
            {
              float64_t v26 = (char *)*a3;
              uint64_t v27 = (uint64_t)&v13[-*a3] >> 2;
              unint64_t v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 62) {
                goto LABEL_73;
              }
              uint64_t v29 = v24 - v26;
              if (v29 >> 1 > v28) {
                unint64_t v28 = v29 >> 1;
              }
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v28;
              }
              if (v30)
              {
                double v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v30);
                float64_t v26 = (char *)*a3;
                double v13 = (char *)a3[1];
              }
              else
              {
                double v31 = 0;
              }
              uint64_t v32 = &v31[4 * v27];
              *(_DWORD *)uint64_t v32 = v17;
              int64x2_t v25 = v32 + 4;
              while (v13 != v26)
              {
                int v33 = *((_DWORD *)v13 - 1);
                v13 -= 4;
                *((_DWORD *)v32 - 1) = v33;
                v32 -= 4;
              }
              float64x2_t v24 = &v31[4 * v30];
              *a3 = v32;
              a3[1] = v25;
              a3[2] = v24;
              if (v26)
              {
                operator delete(v26);
                float64x2_t v24 = *v15;
              }
            }
            else
            {
              *(_DWORD *)double v13 = v17;
              int64x2_t v25 = v13 + 4;
            }
            a3[1] = v25;
            double v34 = (_DWORD *)(v19 + 16 * v18 + 12);
            if (v25 >= v24)
            {
              uint64_t v36 = (char *)*a3;
              uint64_t v37 = (uint64_t)&v25[-*a3] >> 2;
              unint64_t v38 = v37 + 1;
              if ((unint64_t)(v37 + 1) >> 62) {
                goto LABEL_73;
              }
              uint64_t v39 = v24 - v36;
              if (v39 >> 1 > v38) {
                unint64_t v38 = v39 >> 1;
              }
              if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v40 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v40 = v38;
              }
              if (v40)
              {
                int v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v40);
                uint64_t v36 = (char *)*a3;
                int64x2_t v25 = (char *)a3[1];
              }
              else
              {
                int v41 = 0;
              }
              int v42 = &v41[4 * v37];
              *(_DWORD *)int v42 = *v34;
              double v35 = v42 + 4;
              while (v25 != v36)
              {
                int v43 = *((_DWORD *)v25 - 1);
                v25 -= 4;
                *((_DWORD *)v42 - 1) = v43;
                v42 -= 4;
              }
              float64x2_t v24 = &v41[4 * v40];
              *a3 = v42;
              a3[1] = v35;
              a3[2] = v24;
              if (v36)
              {
                operator delete(v36);
                float64x2_t v24 = *v15;
              }
            }
            else
            {
              *(_DWORD *)int64x2_t v25 = *v34;
              double v35 = v25 + 4;
            }
            a3[1] = v35;
            double v44 = (_DWORD *)(v19 + 16 * v21 + 12);
            if (v35 >= v24)
            {
              uint64_t v45 = (char *)*a3;
              uint64_t v46 = (uint64_t)&v35[-*a3] >> 2;
              unint64_t v47 = v46 + 1;
              if ((unint64_t)(v46 + 1) >> 62) {
LABEL_73:
              }
                abort();
              uint64_t v48 = v24 - v45;
              if (v48 >> 1 > v47) {
                unint64_t v47 = v48 >> 1;
              }
              if ((unint64_t)v48 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v49 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v49 = v47;
              }
              if (v49)
              {
                uint64_t v50 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v49);
                uint64_t v45 = (char *)*a3;
                double v35 = (char *)a3[1];
              }
              else
              {
                uint64_t v50 = 0;
              }
              unint64_t v51 = &v50[4 * v46];
              *(_DWORD *)unint64_t v51 = *v44;
              double v13 = v51 + 4;
              while (v35 != v45)
              {
                int v52 = *((_DWORD *)v35 - 1);
                v35 -= 4;
                *((_DWORD *)v51 - 1) = v52;
                v51 -= 4;
              }
              *a3 = v51;
              a3[1] = v13;
              a3[2] = &v50[4 * v49];
              if (v45) {
                operator delete(v45);
              }
            }
            else
            {
              *(_DWORD *)double v35 = *v44;
              double v13 = v35 + 4;
            }
            a3[1] = v13;
            uint64_t v21 = *v22;
            uint64_t v16 = *v14;
          }
          uint64_t v18 = v21;
        }
        while (v21 != v16);
      }
      v14 += 20;
    }
    while (v14 != v57);
  }
  if (v55 != a1)
  {
    for (unsigned __int16 i = (char *)*a3; i != v13; i += 4)
    {
      if (*(unsigned int *)i >= a1) {
        *(_DWORD *)unsigned __int16 i = 0;
      }
    }
  }
  return v12;
}

uint64_t geom::anonymous namespace'::hull_mesh<float>::hull_mesh(uint64_t a1, float32x4_t *a2, unint64_t a3, float a4)
{
  *(_OWORD *)(a1 + 96) = 0u;
  double v8 = (void **)(a1 + 96);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  long long v9 = (std::vector<int> *)(a1 + 168);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  unint64_t v10 = (char *)operator new(0xCuLL);
  *(_DWORD *)unint64_t v10 = 0;
  *(void *)(v10 + 4) = 0;
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 152) = v10 + 12;
  *(void *)(a1 + 160) = v10 + 12;
  std::vector<int>::value_type __x = 0;
  std::vector<unsigned int>::resize(v9, a3, &__x);
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 336) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 344) = -1;
  *(void *)(a1 + 456) = 0;
  *(void *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_DWORD *)(a1 + 448) = 0;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0x3FE0000000000000;
  *(_DWORD *)(a1 + 448) = 0;
  *(_DWORD *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0x3FE0000000000000;
  *(_DWORD *)(a1 + 488) = 0;
  float v11 = 0.00000011921;
  if (a4 >= 0.00000011921) {
    float v11 = a4;
  }
  *(float *)(a1 + 528) = v11;
  float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  if (a3)
  {
    uint64_t v13 = 16 * a3;
    v14.i64[0] = 0x7F0000007FLL;
    v14.i32[2] = 127;
    double v15 = a2;
    do
    {
      float32x4_t v16 = *v15++;
      float32x4_t v17 = v16;
      v17.i32[3] = 0;
      v12.i32[3] = 0;
      float32x4_t v12 = vminnmq_f32(v17, v12);
      v14.i32[3] = 0;
      float32x4_t v14 = vmaxnmq_f32(v17, v14);
      v13 -= 16;
    }
    while (v13);
  }
  else
  {
    v14.i64[0] = 0x7F0000007FLL;
    v14.i64[1] = 0x7F0000007FLL;
  }
  float32x4_t v47 = v14;
  float32x4_t v49 = v12;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(v8, a3);
  if (a3)
  {
    v19.i64[0] = 0x3F0000003F000000;
    v19.i64[1] = 0x3F0000003F000000;
    float32x4_t v20 = vmulq_f32(vsubq_f32(v47, v49), v19);
    v18.i64[0] = 0x3400000034000000;
    __asm { FMOV            V4.4S, #1.0 }
    int8x16_t v26 = _Q4;
    v26.i32[1] = v20.i32[1];
    v26.i32[2] = v20.i32[2];
    int8x16_t v27 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v18, v20)), 0), (int8x16_t)v20, v26);
    int8x16_t v28 = _Q4;
    v28.i32[0] = v27.i32[0];
    v28.i32[2] = v27.i32[2];
    v27.i32[3] = v20.i32[3];
    uint64_t v29 = &a2[a3];
    int32x4_t v30 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.i8, 1))), 0), v27, v28);
    _Q4.i64[0] = v30.i64[0];
    float32x4_t v31 = vmulq_f32(vaddq_f32(v47, v49), v19);
    float32x4_t v32 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vcgeq_f32(v18, (float32x4_t)vdupq_laneq_s32(v30, 2))), 0), (int8x16_t)v30, _Q4);
    int v33 = (void *)(a1 + 112);
    double v34 = *(float32x4_t **)(a1 + 104);
    float32x4_t v46 = v32;
    float32x4_t v48 = v31;
    do
    {
      float32x4_t v35 = vdivq_f32(vsubq_f32(*a2, v31), v32);
      if ((unint64_t)v34 >= *v33)
      {
        uint64_t v36 = ((char *)v34 - (unsigned char *)*v8) >> 4;
        if ((unint64_t)(v36 + 1) >> 60) {
          abort();
        }
        uint64_t v37 = *v33 - (void)*v8;
        uint64_t v38 = v37 >> 3;
        if (v37 >> 3 <= (unint64_t)(v36 + 1)) {
          uint64_t v38 = v36 + 1;
        }
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v39 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39)
        {
          float32x4_t v50 = v35;
          unint64_t v40 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1 + 112, v39);
          float32x4_t v35 = v50;
        }
        else
        {
          unint64_t v40 = 0;
        }
        int v41 = (float32x4_t *)&v40[16 * v36];
        *int v41 = v35;
        double v34 = v41 + 1;
        int v43 = *(float32x4_t **)(a1 + 96);
        int v42 = *(float32x4_t **)(a1 + 104);
        if (v42 != v43)
        {
          do
          {
            float32x4_t v44 = v42[-1];
            --v42;
            v41[-1] = v44;
            --v41;
          }
          while (v42 != v43);
          int v42 = (float32x4_t *)*v8;
        }
        *(void *)(a1 + 96) = v41;
        *(void *)(a1 + 104) = v34;
        *(void *)(a1 + 112) = &v40[16 * v39];
        if (v42) {
          operator delete(v42);
        }
        float32x4_t v32 = v46;
        float32x4_t v31 = v48;
      }
      else
      {
        *v34++ = v35;
      }
      *(void *)(a1 + 104) = v34;
      ++a2;
    }
    while (a2 != v29);
  }
  return a1;
}

float geom::anonymous namespace'::hull_mesh<float>::compute_hull(uint64_t a1, unsigned int a2)
{
  uint64_t v476 = *MEMORY[0x263EF8340];
  double v3 = *(float32x4_t **)(a1 + 96);
  uint64_t v4 = *(float32x4_t **)(a1 + 104);
  float32x4_t v5 = *v3;
  unint64_t v6 = v4 - v3;
  if ((unint64_t)((char *)v4 - (char *)v3) < 0x11)
  {
    unsigned int v12 = 0;
    unsigned int v11 = 0;
    unsigned int v10 = 0;
    unsigned int v9 = 0;
    unsigned int v8 = 0;
    unsigned int v7 = 0;
    float32x4_t v19 = *v3;
    float32x4_t v18 = *v3;
    float32x4_t v17 = *v3;
    float32x4_t v16 = *v3;
    float32x4_t v15 = *v3;
  }
  else
  {
    unsigned int v7 = 0;
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 2;
    uint64_t v14 = 1;
    float32x4_t v15 = *v3;
    float32x4_t v16 = *v3;
    float32x4_t v17 = *v3;
    float32x4_t v18 = *v3;
    float32x4_t v19 = *v3;
    do
    {
      float32x4_t v20 = v3[v14];
      if (vmovn_s32(vcgtq_f32(v15, v20)).u8[0])
      {
        unsigned int v12 = v13 - 1;
        unsigned int v21 = -1;
      }
      else
      {
        unsigned int v21 = 0;
      }
      float32x4_t v15 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v21), (int8x16_t)v20, (int8x16_t)v15);
      unsigned __int8 v22 = vmovn_s32(vcgtq_f32(v20, v5)).u8[0];
      if (v22) {
        unsigned int v23 = -1;
      }
      else {
        unsigned int v23 = 0;
      }
      float32x4_t v5 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v23), (int8x16_t)v20, (int8x16_t)v5);
      if (v22) {
        unsigned int v11 = v13 - 1;
      }
      int16x4_t v24 = vmovn_s32(vcgtq_f32(v19, v20));
      if (v24.i8[2]) {
        unsigned int v25 = -1;
      }
      else {
        unsigned int v25 = 0;
      }
      float32x4_t v19 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v25), (int8x16_t)v20, (int8x16_t)v19);
      if (v24.i8[2]) {
        unsigned int v10 = v13 - 1;
      }
      int16x4_t v26 = vmovn_s32(vcgtq_f32(v20, v18));
      if (v26.i8[2]) {
        unsigned int v27 = -1;
      }
      else {
        unsigned int v27 = 0;
      }
      float32x4_t v18 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v27), (int8x16_t)v20, (int8x16_t)v18);
      if (v26.i8[2]) {
        unsigned int v9 = v13 - 1;
      }
      int16x4_t v28 = vmovn_s32(vcgtq_f32(v17, v20));
      if (v28.i8[4]) {
        unsigned int v29 = -1;
      }
      else {
        unsigned int v29 = 0;
      }
      float32x4_t v17 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v29), (int8x16_t)v20, (int8x16_t)v17);
      if (v28.i8[4]) {
        unsigned int v8 = v13 - 1;
      }
      int16x4_t v30 = vmovn_s32(vcgtq_f32(v20, v16));
      if (v30.i8[4]) {
        unsigned int v31 = -1;
      }
      else {
        unsigned int v31 = 0;
      }
      float32x4_t v16 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_n_s32(v31), (int8x16_t)v20, (int8x16_t)v16);
      if (v30.i8[4]) {
        unsigned int v7 = v13 - 1;
      }
      uint64_t v14 = v13;
      BOOL v418 = v6 > v13++;
    }
    while (v418);
  }
  unsigned int v32 = 0;
  unsigned int v33 = 0;
  unsigned int v34 = 0;
  unint64_t v35 = 0;
  float32x4_t v471 = v15;
  float32x4_t v472 = v5;
  uint64_t v36 = v473;
  v473[0] = v19;
  v473[1] = v18;
  v474.__begin_ = (std::vector<int>::pointer)__PAIR64__(v11, v12);
  v474.__end_ = (std::vector<int>::pointer)__PAIR64__(v9, v10);
  p_std::vector<int>::pointer end = &v474.__end_;
  v474.__end_cap_.__value_ = (int *)__PAIR64__(v7, v8);
  float v38 = -1.0;
  uint64_t v39 = 1;
  v473[2] = v17;
  v473[3] = v16;
  do
  {
    if (v35 <= 4)
    {
      float32x4_t v40 = *(&v471 + v35);
      int v41 = v36;
      int v42 = p_end;
      unint64_t v43 = v39;
      do
      {
        if (v43 <= 4)
        {
          uint64_t v44 = 0;
          float32x4_t v45 = vsubq_f32(*(&v471 + v43), v40);
          float32x4_t v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
          float32x4_t v47 = vnegq_f32(v45);
          do
          {
            float32x4_t v48 = vsubq_f32((float32x4_t)v41[v44], v40);
            float32x4_t v49 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL), v47), v48, v46);
            float32x4_t v50 = vmulq_f32(v49, v49);
            float v51 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), v50)).f32[0];
            if (v51 > v38)
            {
              unsigned int v34 = *((_DWORD *)&v474.__begin_ + v35);
              unsigned int v33 = *((_DWORD *)&v474.__begin_ + v43);
              float v38 = v51;
              unsigned int v32 = *((_DWORD *)v42 + v44);
            }
            ++v44;
          }
          while (v43 + v44 < 5);
        }
        ++v43;
        int v42 = (std::vector<int>::pointer *)((char *)v42 + 4);
        ++v41;
      }
      while (v43 != 6);
    }
    ++v35;
    ++v39;
    p_std::vector<int>::pointer end = (std::vector<int>::pointer *)((char *)p_end + 4);
    ++v36;
  }
  while (v35 != 6);
  if (v34 == v33 || v33 == v32 || v34 == v32)
  {
    unint64_t v52 = 0;
    float v53 = -1.0;
    uint64_t v54 = 1;
    do
    {
      if (v52 <= 4)
      {
        uint64_t v55 = v54;
        do
        {
          float32x4_t v56 = vsubq_f32(*(&v471 + v52), *(&v471 + v55));
          float32x4_t v57 = vmulq_f32(v56, v56);
          float v58 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))).f32[0]);
          if (v58 > v53)
          {
            unsigned int v34 = *((_DWORD *)&v474.__begin_ + v52);
            unsigned int v33 = *((_DWORD *)&v474.__begin_ + v55);
            float v53 = v58;
          }
          ++v55;
        }
        while (v55 != 6);
      }
      ++v52;
      ++v54;
    }
    while (v52 != 6);
    uint64_t v455 = v34;
    if (v4 == v3)
    {
      float v66 = 0.0;
LABEL_70:
      if (fabsf(v66) <= 0.00001) {
        unsigned int v32 = v34;
      }
      goto LABEL_72;
    }
    uint64_t v59 = 0;
    float32x4_t v60 = vsubq_f32(v3[v33], v3[v34]);
    int32x4_t v61 = (int32x4_t)vmulq_f32(v60, v60);
    v61.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v61, 2), vadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1))).u32[0];
    float32x2_t v62 = vrsqrte_f32((float32x2_t)v61.u32[0]);
    float32x2_t v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v62, v62)));
    float32x4_t v64 = vmulq_n_f32(v60, vmul_f32(v63, vrsqrts_f32((float32x2_t)v61.u32[0], vmul_f32(v63, v63))).f32[0]);
    v60.f32[0] = (float)v34;
    float32x4_t v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 0);
    float v66 = 0.0;
    while (1)
    {
      float32x4_t v67 = vsubq_f32(v3[v59], v65);
      float32x4_t v68 = vmulq_f32(v64, v67);
      float32x4_t v69 = vmlsq_lane_f32(v67, v64, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))), 0);
      float32x4_t v70 = vmulq_f32(v69, v69);
      float v71 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v70, 2), vaddq_f32(v70, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v70.f32, 1))).f32[0]);
      if (v71 != v66)
      {
        float v72 = fabsf(v66);
        if (v71 != INFINITY && v72 != INFINITY)
        {
          if ((float)(v66 + (float)((float)((float)(v72 + fabsf(v71)) + 1.0) * 0.00001)) > v71) {
            goto LABEL_65;
          }
LABEL_64:
          unsigned int v32 = v59;
          float v66 = v71;
          goto LABEL_65;
        }
        if (v71 > v66) {
          goto LABEL_64;
        }
      }
LABEL_65:
      if (v6 <= ++v59) {
        goto LABEL_70;
      }
    }
  }
  uint64_t v455 = v34;
LABEL_72:
  *(float *)(a1 + 528) = fmaxf(*(float *)(a1 + 528), 0.0000011921);
  LODWORD(v463.__begin_) = v79;
  LODWORD(v460) = v80;
  uint64_t v81 = *(void *)(a1 + 48);
  double v82 = (unsigned int *)(v81 + 16 * v450);
  unsigned int v83 = v74;
  int64x2_t v84 = (unsigned int *)(v81 + 16 * v74);
  unsigned int v85 = v75;
  int64x2_t v86 = (unsigned int *)(v81 + 16 * v75);
  double v87 = (unsigned int *)(v81 + 16 * v76);
  double v88 = (unsigned int *)(v81 + 16 * v77);
  double v89 = (unsigned int *)(v81 + 16 * v78);
  uint64_t v90 = *(void *)(a1 + 72);
  float v91 = (float32x4_t *)(v90 + 80 * v79);
  char v92 = (float32x4_t *)(v90 + 80 * v80);
  v82[2] = v83;
  v82[3] = v34;
  v84[2] = v85;
  v84[3] = v33;
  v86[2] = v450;
  v86[3] = v32;
  v87[2] = v78;
  v87[3] = v33;
  v88[2] = v76;
  v88[3] = v32;
  v89[2] = v77;
  v89[3] = v34;
  *double v82 = v79;
  v82[1] = v76;
  *int64x2_t v84 = v79;
  v84[1] = v77;
  *int64x2_t v86 = v79;
  v86[1] = v78;
  *double v87 = v80;
  v87[1] = v450;
  *double v88 = v80;
  v88[1] = v83;
  unsigned int v446 = v80;
  *double v89 = v80;
  v89[1] = v85;
  v91->i32[0] = v450;
  v92->i32[0] = v76;
  uint64_t v93 = *(void *)(a1 + 96);
  float32x4_t v94 = *(float32x4_t *)(v93 + 16 * v455);
  float32x4_t v95 = *(float32x4_t *)(v93 + 16 * v33);
  float32x4_t v96 = *(float32x4_t *)(v93 + 16 * v32);
  float32x4_t v97 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v94, (int32x4_t)v94), (int8x16_t)v94, 0xCuLL);
  float32x4_t v98 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), (int8x16_t)v95, 0xCuLL);
  float32x4_t v99 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v96, (int32x4_t)v96), (int8x16_t)v96, 0xCuLL);
  float32x4_t v100 = vaddq_f32(vmlaq_f32(vmulq_f32(v97, vnegq_f32(v96)), v94, v99), vaddq_f32(vmlaq_f32(vmulq_f32(v98, vnegq_f32(v94)), v95, v97), vmlaq_f32(vmulq_f32(v99, vnegq_f32(v95)), v96, v98)));
  float32x4_t v101 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v100, (int32x4_t)v100), (int8x16_t)v100, 0xCuLL);
  float32x4_t v102 = vmulq_f32(v100, v100);
  v91[1] = v101;
  v102.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v102.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v102, 2), v102)).f32[0]);
  v91[2].i32[0] = v102.i32[0];
  v91[2].i8[4] = v102.f32[0] <= 0.00000011921;
  v92[1] = vnegq_f32(v101);
  v92[2].i32[0] = v102.i32[0];
  v92[2].i8[4] = v102.f32[0] <= 0.00000011921;
  float32x4_t v103 = vaddq_f32(vaddq_f32(v94, v95), v96);
  v91[3] = v103;
  v91[4].i32[0] = 3;
  v92[3] = v103;
  v92[4].i32[0] = 3;
  __asm { FMOV            V1.4S, #3.0 }
  float32x4_t v438 = _Q1;
  *(float32x4_t *)(a1 + 320) = vdivq_f32(v103, _Q1);
  int v108 = v91[2].u8[4] | v92[2].u8[4];
  float64x2_t v109 = operator new(0x28uLL);
  *(void *)float64x2_t v109 = &unk_26EA03CB0;
  v109[2] = v34;
  v109[3] = v33;
  v109[4] = v32;
  v109[5] = v79;
  *((unsigned char *)v109 + 24) = v108 != 0;
  *((void *)v109 + 4) = a1;
  v472.i64[1] = (uint64_t)v109;
  LODWORD(v467) = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 4;
  geom::partitioned_set::init((std::vector<int> *)(a1 + 200), v467, (uint64_t)&v467, 1uLL);
  memset(&__p, 0, sizeof(__p));
  v466.i32[0] = 0;
  std::__function::__value_func<unsigned int ()(unsigned int const&)>::__value_func[abi:nn180100]((uint64_t)&v468, (uint64_t)&v471);
  std::__function::__value_func<unsigned int ()>::__value_func[abi:nn180100]<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>>((uint64_t)&v474, (uint64_t)&v468);
  v440 = (geom::partitioned_set *)(a1 + 200);
  geom::partitioned_set::split((uint64_t *)(a1 + 200), &v466, 3u, &__p, (uint64_t)&v474);
  std::__function::__value_func<unsigned int ()>::~__value_func[abi:nn180100](&v474);
  std::__function::__value_func<unsigned int ()(unsigned int const&)>::~__value_func[abi:nn180100](&v468);
  begiunsigned __int16 n = __p.__begin_;
  *(_DWORD *)(a1 + 340) = *__p.__begin_;
  v91[4].i32[1] = begin[1];
  float64x2_t v111 = &v91[4].u32[1];
  v92[4].i32[1] = begin[2];
  float64x2_t v112 = &v92[4].u32[1];
  __p.__end_ = begin;
  operator delete(begin);
  v439 = (uint64_t *)(a1 + 120);
  std::vector<float>::resize(a1 + 120, (uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 4);
  if (v108)
  {
    std::__function::__value_func<unsigned int ()(unsigned int const&)>::~__value_func[abi:nn180100](&v471);
    *(_DWORD *)(a1 + 336) = 3;
    memset(&v474, 0, sizeof(v474));
    v468 = 0;
    v469 = 0;
    v470[0] = 0;
    float64x2_t v114 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v470, 1uLL);
    float64x2_t v115 = (char *)v468;
    float64x2_t v116 = v469;
    float64x2_t v118 = &v114[4 * v117];
    *(_DWORD *)float64x2_t v114 = 0;
    float64x2_t v119 = v114 + 4;
    while (v116 != v115)
    {
      int v120 = *((_DWORD *)v116 - 1);
      v116 -= 4;
      *((_DWORD *)v114 - 1) = v120;
      v114 -= 4;
    }
    v468 = v114;
    v469 = v119;
    v470[0] = v118;
    if (v115) {
      operator delete(v115);
    }
    v469 = v119;
    uint64_t v126 = *(void *)(a1 + 72);
    std::vector<int>::pointer end = v474.__end_;
    value = v474.__end_cap_.__value_;
    if (v474.__end_ >= v474.__end_cap_.__value_)
    {
      std::vector<int>::pointer v130 = v474.__begin_;
      int64_t v131 = v474.__end_ - v474.__begin_;
      unint64_t v132 = v131 + 1;
      if ((unint64_t)(v131 + 1) >> 62) {
        goto LABEL_447;
      }
      int64_t v133 = (char *)v474.__end_cap_.__value_ - (char *)v474.__begin_;
      if (((char *)v474.__end_cap_.__value_ - (char *)v474.__begin_) >> 1 > v132) {
        unint64_t v132 = v133 >> 1;
      }
      if ((unint64_t)v133 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v134 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v134 = v132;
      }
      if (v134)
      {
        uint64_t v135 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v474.__end_cap_, v134);
        std::vector<int>::pointer v130 = v474.__begin_;
        std::vector<int>::pointer end = v474.__end_;
      }
      else
      {
        uint64_t v135 = 0;
      }
      v395 = (int *)&v135[4 * v131];
      value = (int *)&v135[4 * v134];
      int *v395 = *(_DWORD *)(v126 + 80);
      uint64_t v129 = v395 + 1;
      while (end != v130)
      {
        int v396 = *--end;
        *--v395 = v396;
      }
      v474.__begin_ = v395;
      v474.__end_ = v129;
      v474.__end_cap_.__value_ = value;
      if (v130)
      {
        operator delete(v130);
        value = v474.__end_cap_.__value_;
      }
    }
    else
    {
      *v474.__end_ = *(_DWORD *)(v126 + 80);
      uint64_t v129 = end + 1;
    }
    v474.__end_ = v129;
    v397 = (unsigned int *)v474.__begin_;
    v398 = (int *)(*(void *)(a1 + 48) + 16 * *v474.__begin_ + 8);
    if (v129 >= value)
    {
      uint64_t v400 = v129 - v474.__begin_;
      unint64_t v401 = v400 + 1;
      if ((unint64_t)(v400 + 1) >> 62) {
        goto LABEL_447;
      }
      uint64_t v402 = (char *)value - (char *)v474.__begin_;
      if (v402 >> 1 > v401) {
        unint64_t v401 = v402 >> 1;
      }
      if ((unint64_t)v402 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v403 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v403 = v401;
      }
      if (v403)
      {
        v404 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v474.__end_cap_, v403);
        v397 = (unsigned int *)v474.__begin_;
        uint64_t v129 = v474.__end_;
      }
      else
      {
        v404 = 0;
      }
      v405 = (int *)&v404[4 * v400];
      value = (int *)&v404[4 * v403];
      int *v405 = *v398;
      v399 = v405 + 1;
      while (v129 != (int *)v397)
      {
        int v406 = *--v129;
        *--v405 = v406;
      }
      v474.__begin_ = v405;
      v474.__end_ = v399;
      v474.__end_cap_.__value_ = value;
      if (v397)
      {
        operator delete(v397);
        v397 = (unsigned int *)v474.__begin_;
        value = v474.__end_cap_.__value_;
      }
      else
      {
        v397 = (unsigned int *)v405;
      }
    }
    else
    {
      *uint64_t v129 = *v398;
      v399 = v129 + 1;
    }
    v474.__end_ = v399;
    v407 = (int *)(*(void *)(a1 + 48) + 16 * v397[1] + 8);
    if (v399 < value)
    {
      int *v399 = *v407;
      v408 = v399 + 1;
LABEL_415:
      v474.__end_ = v408;
      v417 = (unsigned int *)(v408 - 1);
      BOOL v418 = v397 != (unsigned int *)v408 && v417 > v397;
      if (v418)
      {
        v419 = v397 + 1;
        do
        {
          unsigned int v420 = *(v419 - 1);
          *(v419 - 1) = *v417;
          *v417-- = v420;
        }
        while (v419++ < v417);
      }
      uint64_t v421 = *(void *)(a1 + 272);
      unint64_t v422 = (*(void *)(a1 + 280) - v421) >> 3;
      if (*(void *)(a1 + 280) == v421)
      {
LABEL_427:
        unsigned int v424 = -1;
      }
      else
      {
        uint64_t v423 = 0;
        unsigned int v424 = 0;
        while (*(_DWORD *)(v421 + 8 * v423) == -1)
        {
          uint64_t v423 = ++v424;
          if (v422 <= v424) {
            goto LABEL_427;
          }
        }
      }
      BOOL v418 = v422 > v424;
      int v425 = -1;
      if (v418) {
        int v425 = *(_DWORD *)(v421 + 8 * v424);
      }
      LODWORD(v463.__begin_) = v425;
      *(_DWORD *)(*(void *)(a1 + 72) + 68) = -1;
      v471.i32[0] = 0;
      v471.i64[1] = 0;
      float32x4_t v472 = 0uLL;
      *(void *)&v473[0] = 0x3FE0000000000000;
      v471.i32[0] = 0;
      memset(&__p, 0, sizeof(__p));
      if (__p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      if (v471.i64[1])
      {
        v472.i64[0] = v471.i64[1];
        operator delete((void *)v471.i64[1]);
      }
      if (v468)
      {
        v469 = (char *)v468;
        operator delete(v468);
      }
      std::vector<int>::pointer v426 = v474.__begin_;
      if (!v474.__begin_) {
        return 0.0;
      }
      v474.__end_ = v474.__begin_;
LABEL_444:
      operator delete(v426);
      return 0.0;
    }
    uint64_t v409 = ((char *)v399 - (char *)v397) >> 2;
    unint64_t v410 = v409 + 1;
    if (!((unint64_t)(v409 + 1) >> 62))
    {
      uint64_t v411 = (char *)value - (char *)v397;
      if (v411 >> 1 > v410) {
        unint64_t v410 = v411 >> 1;
      }
      if ((unint64_t)v411 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v412 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v412 = v410;
      }
      if (v412)
      {
        v413 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v474.__end_cap_, v412);
        v397 = (unsigned int *)v474.__begin_;
        v399 = v474.__end_;
      }
      else
      {
        v413 = 0;
      }
      v414 = (int *)&v413[4 * v409];
      v415 = (int *)&v413[4 * v412];
      int *v414 = *v407;
      v408 = v414 + 1;
      while (v399 != (int *)v397)
      {
        int v416 = *--v399;
        *--v414 = v416;
      }
      v474.__begin_ = v414;
      v474.__end_ = v408;
      v474.__end_cap_.__value_ = v415;
      if (v397)
      {
        operator delete(v397);
        v397 = (unsigned int *)v474.__begin_;
      }
      else
      {
        v397 = (unsigned int *)v414;
      }
      goto LABEL_415;
    }
LABEL_447:
    abort();
  }
  unint64_t v121 = *v111;
  uint64_t v122 = *(void *)(a1 + 272);
  unint64_t v123 = (*(void *)(a1 + 280) - v122) >> 3;
  if (v123 <= v121 || (uint64_t v124 = *(unsigned int *)(v122 + 8 * v121), v124 == -1))
  {
    uint64_t v125 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v136 = *(void *)(a1 + 96);
    uint64_t v137 = *(void *)(a1 + 72) + 80 * v79;
    uint64_t v138 = (float32x4_t *)(v137 + 48);
    v113.f32[0] = (float)*(unsigned int *)(v137 + 64);
    float32x4_t v113 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 0);
    uint64_t v139 = (float32x4_t *)(v137 + 16);
    float64x2_t v140 = (const float *)(v137 + 32);
    uint64_t v141 = *(void *)(a1 + 120);
    uint64_t v142 = *(void *)(a1 + 200);
    uint64_t v125 = 0xFFFFFFFFLL;
    do
    {
      float32x4_t v143 = vld1q_dup_f32(v140);
      float32x4_t v144 = vmulq_f32(vsubq_f32(*(float32x4_t *)(v136 + 16 * v124), vdivq_f32(*v138, v113)), vdivq_f32(*v139, v143));
      float v145 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 2), vaddq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.f32, 1))).f32[0];
      *(float *)(v141 + 4 * v124) = v145;
      if (v145 > *(float *)(a1 + 528) && (v125 == 0xFFFFFFFFLL || v145 > *(float *)(v141 + 4 * v125))) {
        uint64_t v125 = v124;
      }
      uint64_t v124 = *(unsigned int *)(v142 + 4 * v124);
    }
    while (v124 != -1);
  }
  unint64_t v146 = *v112;
  if (v123 <= v146 || (uint64_t v147 = *(unsigned int *)(v122 + 8 * v146), v147 == -1))
  {
    uint64_t v148 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v149 = *(void *)(a1 + 96);
    uint64_t v150 = *(void *)(a1 + 72) + 80 * v446;
    float64x2_t v151 = (float32x4_t *)(v150 + 48);
    v113.f32[0] = (float)*(unsigned int *)(v150 + 64);
    float32x4_t v152 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 0);
    float64x2_t v153 = (float32x4_t *)(v150 + 16);
    float64x2_t v154 = (const float *)(v150 + 32);
    uint64_t v155 = *(void *)(a1 + 120);
    uint64_t v156 = *(void *)(a1 + 200);
    uint64_t v148 = 0xFFFFFFFFLL;
    do
    {
      float32x4_t v157 = vld1q_dup_f32(v154);
      float32x4_t v158 = vmulq_f32(vsubq_f32(*(float32x4_t *)(v149 + 16 * v147), vdivq_f32(*v151, v152)), vdivq_f32(*v153, v157));
      float v159 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v158, 2), vaddq_f32(v158, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v158.f32, 1))).f32[0];
      *(float *)(v155 + 4 * v147) = v159;
      if (v159 > *(float *)(a1 + 528) && (v148 == 0xFFFFFFFFLL || v159 > *(float *)(v155 + 4 * v148))) {
        uint64_t v148 = v147;
      }
      uint64_t v147 = *(unsigned int *)(v156 + 4 * v147);
    }
    while (v147 != -1);
  }
  if (v125 != 0xFFFFFFFFLL)
  {
    LODWORD(v474.__begin_) = v125;
    HIDWORD(v474.__begin_) = *(_DWORD *)(*(void *)(a1 + 120) + 4 * v125);
  }
  if (v148 != 0xFFFFFFFFLL)
  {
    LODWORD(v474.__begin_) = v148;
    HIDWORD(v474.__begin_) = *(_DWORD *)(*(void *)(a1 + 120) + 4 * v148);
  }
  float v160 = 0.0;
  float v161 = 0.0;
  if (v125 != 0xFFFFFFFFLL) {
    float v161 = *(float *)(*v439 + 4 * v125);
  }
  if (v148 != 0xFFFFFFFFLL) {
    float v160 = *(float *)(*v439 + 4 * v148);
  }
  if (v161 >= v160) {
    float v162 = v161;
  }
  else {
    float v162 = v160;
  }
  v163 = (void **)std::__function::__value_func<unsigned int ()(unsigned int const&)>::~__value_func[abi:nn180100](&v471);
  if (v162 > 0.00001) {
    int v164 = 1;
  }
  else {
    int v164 = 2;
  }
  *(_DWORD *)(a1 + 336) = v164;
  if (v162 <= 0.00001)
  {
    v165 = *(float32x4_t **)(a1 + 72);
    float32x4_t v166 = v165[1];
    v165 += 2;
    float32x4_t v167 = vld1q_dup_f32(v165->f32);
    int32x4_t v168 = (int32x4_t)vdivq_f32(v166, v167);
    float v169 = fabsf(*(float *)&v168.i32[2]);
    if (v169 <= 0.00000011921)
    {
      int32x4_t v170 = vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-*(float *)&v168.i32[1]), v168);
    }
    else
    {
      v170.i32[0] = 0;
      *(float *)&v170.i32[1] = -*(float *)&v168.i32[2];
      v170.i64[1] = v168.u32[1];
    }
    float32x4_t v451 = (float32x4_t)v168;
    *(int32x4_t *)v456 = v170;
    if (v169 <= 0.00000011921)
    {
      float32x4_t v447 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-*(float *)&v168.i32[1]), v168);
    }
    else
    {
      v172.i32[0] = 0;
      v172.f32[1] = -*(float *)&v168.i32[2];
      v172.i64[1] = v168.u32[1];
      float32x4_t v447 = v172;
    }
    float32x4_t v471 = 0uLL;
    v472.i64[0] = 0;
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(v163, (uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 4);
    v341 = *(float32x4_t **)(a1 + 96);
    v342 = *(float32x4_t **)(a1 + 104);
    if (v341 == v342)
    {
      v355 = (int32x2_t *)v471.i64[1];
    }
    else
    {
      int32x4_t v343 = (int32x4_t)vmulq_f32(*(float32x4_t *)v456, *(float32x4_t *)v456);
      v343.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v343, 2), vadd_f32(*(float32x2_t *)v343.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v343.i8, 1))).u32[0];
      float32x2_t v344 = vrsqrte_f32((float32x2_t)v343.u32[0]);
      float32x2_t v345 = vmul_f32(v344, vrsqrts_f32((float32x2_t)v343.u32[0], vmul_f32(v344, v344)));
      float32x4_t v346 = vmulq_n_f32(*(float32x4_t *)v456, vmul_f32(v345, vrsqrts_f32((float32x2_t)v343.u32[0], vmul_f32(v345, v345))).f32[0]);
      int32x4_t v347 = (int32x4_t)vmulq_f32(v447, v447);
      v347.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v347, 2), vadd_f32(*(float32x2_t *)v347.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v347.i8, 1))).u32[0];
      float32x2_t v348 = vrsqrte_f32((float32x2_t)v347.u32[0]);
      float32x2_t v349 = vmul_f32(v348, vrsqrts_f32((float32x2_t)v347.u32[0], vmul_f32(v348, v348)));
      float32x4_t v350 = vmulq_n_f32(v447, vmul_f32(v349, vrsqrts_f32((float32x2_t)v347.u32[0], vmul_f32(v349, v349))).f32[0]);
      float32x4_t v351 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v350, (int32x4_t)v350), (int8x16_t)v350, 0xCuLL), vnegq_f32(v451)), v350, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v451, (int32x4_t)v451), (int8x16_t)v451, 0xCuLL));
      float32x4_t v352 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v351, (int32x4_t)v351), (int8x16_t)v351, 0xCuLL);
      int32x4_t v353 = (int32x4_t)vmulq_f32(v351, v351);
      v353.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v353.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v353, 2), *(float32x2_t *)v353.i8)).u32[0];
      *(float32x2_t *)v351.f32 = vrsqrte_f32((float32x2_t)v353.u32[0]);
      *(float32x2_t *)v351.f32 = vmul_f32(*(float32x2_t *)v351.f32, vrsqrts_f32((float32x2_t)v353.u32[0], vmul_f32(*(float32x2_t *)v351.f32, *(float32x2_t *)v351.f32)));
      float32x4_t v354 = vmulq_n_f32(v352, vmul_f32(*(float32x2_t *)v351.f32, vrsqrts_f32((float32x2_t)v353.u32[0], vmul_f32(*(float32x2_t *)v351.f32, *(float32x2_t *)v351.f32))).f32[0]);
      v355 = (int32x2_t *)v471.i64[1];
      *(float32x4_t *)v453 = v354;
      *(float32x4_t *)v458 = v346;
      do
      {
        int32x4_t v356 = (int32x4_t)vmulq_f32(v346, *v341);
        int32x4_t v357 = (int32x4_t)vmulq_f32(v354, *v341);
        int32x2_t v358 = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v356, 2), vadd_f32(*(float32x2_t *)v356.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v356.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v357, 2), vadd_f32(*(float32x2_t *)v357.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v357.i8, 1))));
        if ((unint64_t)v355 >= v472.i64[0])
        {
          uint64_t v359 = ((uint64_t)v355 - v471.i64[0]) >> 3;
          if ((unint64_t)(v359 + 1) >> 61) {
            goto LABEL_447;
          }
          unint64_t v360 = (v472.i64[0] - v471.i64[0]) >> 2;
          if (v360 <= v359 + 1) {
            unint64_t v360 = v359 + 1;
          }
          if (v472.i64[0] - v471.i64[0] >= 0x7FFFFFFFFFFFFFF8uLL) {
            unint64_t v361 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v361 = v360;
          }
          if (v361) {
            v362 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v472, v361);
          }
          else {
            v362 = 0;
          }
          v363 = (int32x2_t *)&v362[8 * v359];
          int32x2_t *v363 = v358;
          v355 = v363 + 1;
          v364 = (char *)v471.i64[1];
          v365 = (char *)v471.i64[0];
          if (v471.i64[1] != v471.i64[0])
          {
            do
            {
              int32x2_t v366 = *(int32x2_t *)(v364 - 8);
              v364 -= 8;
              v363[-1] = v366;
              --v363;
            }
            while (v364 != v365);
            v364 = (char *)v471.i64[0];
          }
          v471.i64[0] = (uint64_t)v363;
          v471.i64[1] = (uint64_t)v355;
          v472.i64[0] = (uint64_t)&v362[8 * v361];
          if (v364) {
            operator delete(v364);
          }
          float32x4_t v354 = *(float32x4_t *)v453;
          float32x4_t v346 = *(float32x4_t *)v458;
        }
        else
        {
          *v355++ = v358;
        }
        v471.i64[1] = (uint64_t)v355;
        ++v341;
      }
      while (v341 != v342);
    }
    memset(&v474, 0, sizeof(v474));
    geom::convex_hull_2<float>(((uint64_t)v355 - v471.i64[0]) >> 3, v471.i64[0], &v474);
    *(void *)(a1 + 80) = *(void *)(a1 + 72);
    *(void *)(a1 + 32) = *(void *)(a1 + 24);
    *(void *)(a1 + 56) = *(void *)(a1 + 48);
    *(void *)(a1 + 8) = *(void *)a1;
    unsigned int v369 = v368;
    if (v474.__end_ == v474.__begin_)
    {
      unsigned int v379 = 0;
      uint64_t v382 = 0;
      unsigned int v394 = 0;
      unsigned int v393 = 0;
      uint64_t v380 = *(void *)(a1 + 48);
      float32x4_t v374 = 0uLL;
      float32x4_t v373 = 0uLL;
      uint64_t v376 = v367;
      uint64_t v377 = v369;
    }
    else
    {
      uint64_t v370 = 0;
      unsigned int v449 = 0;
      unsigned int v445 = 0;
      unsigned int v371 = 0;
      unsigned int v372 = 0;
      float32x4_t v373 = 0uLL;
      float32x4_t v374 = 0uLL;
      unsigned int v375 = 1;
      uint64_t v376 = v367;
      uint64_t v377 = v368;
      do
      {
        *(float32x4_t *)v454 = v373;
        *(float32x4_t *)v459 = v374;
        uint64_t v380 = *(void *)(a1 + 48);
        if (v375 == 1)
        {
          uint64_t v381 = *(void *)(a1 + 72);
          *(_DWORD *)(v381 + 80 * v367) = v378;
          *(_DWORD *)(v381 + 80 * v377) = v379;
          unsigned int v445 = v379;
          unsigned int v449 = v378;
        }
        else
        {
          *(_DWORD *)(v380 + 16 * v371 + 8) = v378;
          *(_DWORD *)(v380 + 16 * v379 + 8) = v372;
        }
        uint64_t v382 = v378;
        *(_DWORD *)(v380 + 16 * v378) = v367;
        *(_DWORD *)(v380 + 16 * v379) = v369;
        uint64_t v383 = v380 + 16 * v378;
        *(_DWORD *)(v383 + 4) = v379;
        uint64_t v384 = v380 + 16 * v379;
        *(_DWORD *)(v384 + 4) = v378;
        std::vector<int>::pointer v385 = v474.__begin_;
        *(_DWORD *)(v383 + 12) = v474.__begin_[v370];
        uint64_t v386 = v375;
        unint64_t v387 = v474.__end_ - v385;
        unint64_t v388 = v375 % v387;
        *(_DWORD *)(v384 + 12) = v385[v388];
        uint64_t v389 = *(void *)(a1 + 96);
        float32x4_t v390 = *(float32x4_t *)(v389 + 16 * v385[v370]);
        float32x4_t v374 = vaddq_f32(*(float32x4_t *)v459, v390);
        float32x4_t v391 = *(float32x4_t *)(v389 + 16 * v385[v388]);
        int32x4_t v392 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v391, (int32x4_t)v391), (int8x16_t)v391, 0xCuLL), vnegq_f32(v390)), v391, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v390, (int32x4_t)v390), (int8x16_t)v390, 0xCuLL));
        BOOL v418 = v387 > v375++;
        float32x4_t v373 = vaddq_f32(*(float32x4_t *)v454, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v392, v392), (int8x16_t)v392, 0xCuLL));
        uint64_t v370 = v386;
        unsigned int v371 = v378;
        unsigned int v372 = v379;
      }
      while (v418);
      unsigned int v393 = v449;
      unsigned int v394 = v445;
    }
    *(_DWORD *)(v380 + 16 * v394 + 8) = v379;
    *(_DWORD *)(v380 + 16 * v382 + 8) = v393;
    *(float32x4_t *)(*(void *)(a1 + 72) + 80 * v376 + 16) = v373;
    *(float32x4_t *)(*(void *)(a1 + 72) + 80 * v377 + 16) = vnegq_f32(v373);
    float32x4_t v427 = vmulq_f32(v373, v373);
    v427.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v427, 2), vaddq_f32(v427, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v427.f32, 1))).f32[0]);
    uint64_t v428 = *(void *)(a1 + 72);
    uint64_t v429 = v428 + 80 * v377;
    *(_DWORD *)(v429 + 32) = v427.i32[0];
    v430 = (float32x4_t *)(v428 + 80 * v376);
    v430[2].i32[0] = v427.i32[0];
    *(unsigned char *)(v429 + 36) = v427.f32[0] <= 0.00000011921;
    v430[2].i8[4] = v427.f32[0] <= 0.00000011921;
    v430[3] = v374;
    *(float32x4_t *)(*(void *)(a1 + 72) + 80 * v377 + 48) = v374;
    v431 = v474.__begin_;
    unint64_t v432 = (unint64_t)((char *)v474.__end_ - (char *)v474.__begin_) >> 2;
    uint64_t v433 = *(void *)(a1 + 72);
    *(_DWORD *)(v433 + 80 * v377 + 64) = v432;
    *(_DWORD *)(v433 + 80 * v376 + 64) = v432;
    if (v431)
    {
      v474.__end_ = v431;
      operator delete(v431);
    }
    std::vector<int>::pointer v426 = (std::vector<int>::pointer)v471.i64[0];
    if (!v471.i64[0]) {
      return 0.0;
    }
    v471.i64[1] = v471.i64[0];
    goto LABEL_444;
  }
  v468 = 0;
  v469 = 0;
  v470[0] = 0;
  memset(&__p, 0, sizeof(__p));
  v471.i32[0] = 0;
  v471.i64[1] = 0;
  float32x4_t v472 = 0uLL;
  *(void *)&v473[0] = 0x3FE0000000000000;
  v471.i32[0] = 0;
  memset(&v463, 0, sizeof(v463));
  v460 = 0;
  v461 = 0;
  v462 = 0;
  uint64_t v171 = *(void *)(a1 + 144);
  v469 = (char *)v468;
  __p.__end_ = __p.__begin_;
  v437 = (std::vector<int> *)(a1 + 144);
  if (*(void *)(a1 + 152) - v171 == 12)
  {
    unsigned int v436 = 3;
    goto LABEL_332;
  }
  v452 = (std::vector<int> *)(a1 + 352);
  v457 = (std::vector<int> *)(a1 + 496);
  v444 = (void **)(a1 + 376);
  v448 = (int **)(a1 + 368);
  uint64_t v443 = a1 + 392;
  unsigned int v436 = 3;
  do
  {
    unint64_t v173 = *(void *)(v171 + 12);
    unsigned int v464 = HIDWORD(v173);
    long long v467 = *(_OWORD *)(*(void *)(a1 + 96) + 16 * HIDWORD(v173));
    v174 = (float32x4_t *)(*(void *)(a1 + 72) + 80 * v173);
    f32 = v174[2].f32;
    float32x4_t v176 = vld1q_dup_f32(f32);
    float32x4_t v466 = vdivq_f32(v174[1], v176);
    v177 = (std::vector<int> *)operator new(0x20uLL);
    v177->__begin_ = (std::vector<int>::pointer)&unk_26EA03E30;
    v177->__end_ = (std::vector<int>::pointer)a1;
    v177->__end_cap_.__value_ = (int *)&v467;
    v177[1].__begin_ = (std::vector<int>::pointer)&v466;
    v475 = v177;
    v178 = *(_DWORD **)(a1 + 352);
    *(void *)(a1 + 360) = v178;
    unint64_t v179 = *(void *)(a1 + 368);
    if ((unint64_t)v178 >= v179)
    {
      uint64_t v181 = v179 - (void)v178;
      uint64_t v182 = v181 >> 1;
      if ((unint64_t)(v181 >> 1) <= 1) {
        uint64_t v182 = 1;
      }
      if ((unint64_t)v181 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v183 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v183 = v182;
      }
      v185 = std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v448, v183);
      v186 = *(char **)(a1 + 352);
      v187 = *(char **)(a1 + 360);
      _DWORD *v185 = v174->i32[0];
      v180 = v185 + 1;
      v188 = v185;
      while (v187 != v186)
      {
        int v189 = *((_DWORD *)v187 - 1);
        v187 -= 4;
        *--v188 = v189;
      }
      *(void *)(a1 + 352) = v188;
      *(void *)(a1 + 360) = v180;
      *(void *)(a1 + 368) = &v185[v184];
      if (v186) {
        operator delete(v186);
      }
    }
    else
    {
      _DWORD *v178 = v174->i32[0];
      v180 = v178 + 1;
    }
    for (*(void *)(a1 + 360) = v180; *(_DWORD **)(a1 + 352) != v180; v180 = *(_DWORD **)(a1 + 360))
    {
      uint64_t v190 = *(v180 - 1);
      unsigned int v191 = *(_DWORD *)(*(void *)(a1 + 48) + 16 * v190);
      *(void *)(a1 + 360) = v180 - 1;
      if (*(_DWORD *)(*(void *)(a1 + 456) {
                     + 4
      }
      {
        std::vector<int>::pointer v192 = __p.__end_;
        if (__p.__end_ >= __p.__end_cap_.__value_)
        {
          std::vector<int>::pointer v194 = __p.__begin_;
          int64_t v195 = __p.__end_ - __p.__begin_;
          unint64_t v196 = v195 + 1;
          if ((unint64_t)(v195 + 1) >> 62) {
            goto LABEL_447;
          }
          int64_t v197 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
          if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v196) {
            unint64_t v196 = v197 >> 1;
          }
          if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v198 = v196;
          }
          if (v198)
          {
            v199 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v198);
            std::vector<int>::pointer v194 = __p.__begin_;
            std::vector<int>::pointer v192 = __p.__end_;
          }
          else
          {
            v199 = 0;
          }
          v200 = (int *)&v199[4 * v195];
          int *v200 = v191;
          v193 = v200 + 1;
          while (v192 != v194)
          {
            int v201 = *--v192;
            *--v200 = v201;
          }
          __p.__begin_ = v200;
          __p.__end_ = v193;
          __p.__end_cap_.__value_ = (int *)&v199[4 * v198];
          if (v194) {
            operator delete(v194);
          }
        }
        else
        {
          *__p.__end_ = v191;
          v193 = v192 + 1;
        }
        __p.__end_ = v193;
      }
      uint64_t v202 = v190;
      do
      {
        uint64_t v203 = *(void *)(a1 + 48);
        uint64_t v204 = v203 + 16 * v202;
        v205 = (unsigned int *)(v204 + 4);
        unsigned int v206 = *(_DWORD *)(v203 + 16 * *(unsigned int *)(v204 + 4));
        if (*(_DWORD *)(*(void *)(a1 + 456) {
                       + 4
        }
        {
LABEL_207:
          int v237 = 0;
          uint64_t v202 = *(unsigned int *)(v204 + 8);
          continue;
        }
        char v207 = std::function<BOOL ()>::operator()((uint64_t)&v474, v206);
        if (v207)
        {
          std::vector<int>::pointer v209 = *(std::vector<int>::pointer *)(a1 + 360);
          v208 = *(int **)(a1 + 368);
          if (v209 >= v208)
          {
            std::vector<int>::pointer v214 = v452->__begin_;
            uint64_t v215 = v209 - v452->__begin_;
            unint64_t v216 = v215 + 1;
            if ((unint64_t)(v215 + 1) >> 62) {
              goto LABEL_447;
            }
            uint64_t v217 = (char *)v208 - (char *)v214;
            if (v217 >> 1 > v216) {
              unint64_t v216 = v217 >> 1;
            }
            if ((unint64_t)v217 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v218 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v218 = v216;
            }
            if (v218)
            {
              v219 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v448, v218);
              std::vector<int>::pointer v214 = *(std::vector<int>::pointer *)(a1 + 352);
              std::vector<int>::pointer v209 = *(std::vector<int>::pointer *)(a1 + 360);
            }
            else
            {
              v219 = 0;
            }
            v226 = &v219[4 * v215];
            *(_DWORD *)v226 = v202;
            v210 = (unsigned int *)(v226 + 4);
            while (v209 != v214)
            {
              int v227 = *--v209;
              *((_DWORD *)v226 - 1) = v227;
              v226 -= 4;
            }
            v208 = (int *)&v219[4 * v218];
            *(void *)(a1 + 352) = v226;
            *(void *)(a1 + 360) = v210;
            *(void *)(a1 + 368) = v208;
            if (v214)
            {
              operator delete(v214);
              v208 = *v448;
            }
          }
          else
          {
            *std::vector<int>::pointer v209 = v202;
            v210 = (unsigned int *)(v209 + 1);
          }
          *(void *)(a1 + 360) = v210;
          if (v210 >= (unsigned int *)v208)
          {
            std::vector<int>::pointer v229 = v452->__begin_;
            uint64_t v230 = ((char *)v210 - (char *)v452->__begin_) >> 2;
            unint64_t v231 = v230 + 1;
            if ((unint64_t)(v230 + 1) >> 62) {
              goto LABEL_447;
            }
            uint64_t v232 = (char *)v208 - (char *)v229;
            if (v232 >> 1 > v231) {
              unint64_t v231 = v232 >> 1;
            }
            if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v233 = v231;
            }
            if (v233)
            {
              v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v448, v233);
              std::vector<int>::pointer v229 = *(std::vector<int>::pointer *)(a1 + 352);
              v210 = *(unsigned int **)(a1 + 360);
            }
            else
            {
              v234 = 0;
            }
            v235 = (unsigned int *)&v234[4 * v230];
            unsigned int *v235 = *v205;
            v228 = v235 + 1;
            while (v210 != (unsigned int *)v229)
            {
              unsigned int v236 = *--v210;
              *--v235 = v236;
            }
            *(void *)(a1 + 352) = v235;
            *(void *)(a1 + 360) = v228;
            *(void *)(a1 + 368) = &v234[4 * v233];
            if (v229) {
              operator delete(v229);
            }
          }
          else
          {
            unsigned int *v210 = *v205;
            v228 = v210 + 1;
          }
          *(void *)(a1 + 360) = v228;
          int v237 = 4;
          if ((v207 & 1) == 0) {
            goto LABEL_207;
          }
        }
        else
        {
          unsigned int v211 = *v205;
          v212 = v469;
          if ((unint64_t)v469 >= v470[0])
          {
            v220 = (char *)v468;
            uint64_t v221 = (v469 - (unsigned char *)v468) >> 2;
            unint64_t v222 = v221 + 1;
            if ((unint64_t)(v221 + 1) >> 62) {
              goto LABEL_447;
            }
            uint64_t v223 = v470[0] - (void)v468;
            if ((uint64_t)(v470[0] - (void)v468) >> 1 > v222) {
              unint64_t v222 = v223 >> 1;
            }
            if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v224 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v224 = v222;
            }
            if (v224)
            {
              v225 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v470, v224);
              v220 = (char *)v468;
              v212 = v469;
              unsigned int v211 = *v205;
            }
            else
            {
              v225 = 0;
            }
            v238 = (unsigned int *)&v225[4 * v221];
            unsigned int *v238 = v211;
            v213 = (char *)(v238 + 1);
            while (v212 != v220)
            {
              unsigned int v239 = *((_DWORD *)v212 - 1);
              v212 -= 4;
              *--v238 = v239;
            }
            v468 = v238;
            v469 = v213;
            v470[0] = &v225[4 * v224];
            if (v220) {
              operator delete(v220);
            }
          }
          else
          {
            *(_DWORD *)v469 = v211;
            v213 = v212 + 4;
          }
          v469 = v213;
          int v237 = 0;
          if ((v207 & 1) == 0) {
            goto LABEL_207;
          }
        }
      }
      while (!v237 && v202 != v190);
    }
    *(_DWORD *)(a1 + 448) = 0;
    *(void *)(a1 + 464) = *(void *)(a1 + 456);
    *(_DWORD *)(a1 + 488) = 0;
    *(void *)(a1 + 504) = *(void *)(a1 + 496);
    *(void *)(a1 + 360) = *(void *)(a1 + 352);
    std::__function::__value_func<BOOL ()>::~__value_func[abi:nn180100](&v474);
    if (v436 >= a2) {
      break;
    }
    uint64_t v240 = *(void *)(a1 + 72);
    if (0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 80) - v240) >> 4)
       - ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2) < 3
      || (v241 = (unsigned int *)v468, v468 == v469))
    {
LABEL_231:
      v258 = (char *)v460;
      v461 = (char *)v460;
      std::vector<int>::pointer v259 = __p.__begin_;
      std::vector<int>::pointer v260 = __p.__end_;
      while (v259 != v260)
      {
        uint64_t v261 = v240 + 80 * *v259;
        int v264 = *(_DWORD *)(v261 + 68);
        v263 = (int *)(v261 + 68);
        int v262 = v264;
        if (v264 != -1)
        {
          if (v258 >= v462)
          {
            v266 = (char *)v460;
            uint64_t v267 = (v258 - (unsigned char *)v460) >> 2;
            unint64_t v268 = v267 + 1;
            if ((unint64_t)(v267 + 1) >> 62) {
              goto LABEL_447;
            }
            uint64_t v269 = v462 - (unsigned char *)v460;
            if ((v462 - (unsigned char *)v460) >> 1 > v268) {
              unint64_t v268 = v269 >> 1;
            }
            if ((unint64_t)v269 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v270 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v270 = v268;
            }
            if (v270)
            {
              v271 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v462, v270);
              v266 = (char *)v460;
              v258 = v461;
              int v262 = *v263;
            }
            else
            {
              v271 = 0;
            }
            v272 = &v271[4 * v267];
            *(_DWORD *)v272 = v262;
            v265 = v272 + 4;
            while (v258 != v266)
            {
              int v273 = *((_DWORD *)v258 - 1);
              v258 -= 4;
              *((_DWORD *)v272 - 1) = v273;
              v272 -= 4;
            }
            v460 = v272;
            v461 = v265;
            v462 = &v271[4 * v270];
            if (v266) {
              operator delete(v266);
            }
          }
          else
          {
            *(_DWORD *)v258 = v262;
            v265 = v258 + 4;
          }
          v461 = v265;
          uint64_t v240 = *(void *)(a1 + 72);
          *(_DWORD *)(v240 + 80 * *v259 + 68) = -1;
          v258 = v265;
        }
        ++v259;
      }
      v471.i32[0] = 0;
      v472.i64[0] = v471.i64[1];
      v274 = (unsigned int *)v468;
      v275 = (unsigned int *)v469;
      while (v274 != v275)
      {
        uint64_t v276 = *v274;
        if (*(_DWORD *)(*(void *)(a1 + 48) + 16 * v276) != -1) {
        ++v274;
        }
      }
      std::vector<int>::pointer v277 = v463.__begin_;
      std::vector<int>::pointer v278 = v463.__end_;
      while (v277 != v278)
      {
        uint64_t v279 = *v277;
        if (*(_DWORD *)(*(void *)(a1 + 48) + 16 * v279) != -1) {
        ++v277;
        }
      }
      v466.i32[0] = 0;
      v466.i32[0] = geom::partitioned_set::merge(v440, (unsigned int *)v460, (v461 - (unsigned char *)v460) >> 2);
      __p.__end_ = __p.__begin_;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v444, 0);
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(v444, ((char *)__p.__end_ - (char *)__p.__begin_) >> 1);
      std::vector<int>::pointer v281 = __p.__begin_;
      if (__p.__end_ == __p.__begin_)
      {
        int64_t v313 = 0;
      }
      else
      {
        uint64_t v282 = 0;
        unsigned int v283 = 0;
        v284 = *(float32x4_t **)(a1 + 384);
        do
        {
          unsigned int v285 = v281[v282];
          uint64_t v286 = *(void *)(a1 + 72);
          v287 = (float32x4_t *)(v286 + 80 * v285);
          v280.f32[0] = (float)v287[4].u32[0];
          float32x4_t v288 = vdivq_f32(v287[3], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v280.f32, 0));
          unint64_t v289 = *(void *)(a1 + 392);
          if ((unint64_t)v284 >= v289)
          {
            uint64_t v291 = ((char *)v284 - (unsigned char *)*v444) >> 4;
            if ((unint64_t)(v291 + 1) >> 60) {
              goto LABEL_447;
            }
            uint64_t v292 = v289 - (void)*v444;
            uint64_t v293 = v292 >> 3;
            if (v292 >> 3 <= (unint64_t)(v291 + 1)) {
              uint64_t v293 = v291 + 1;
            }
            if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v294 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v294 = v293;
            }
            if (v294)
            {
              float32x4_t v441 = v288;
              v295 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v443, v294);
              float32x4_t v288 = v441;
            }
            else
            {
              v295 = 0;
            }
            v296 = (float32x4_t *)&v295[16 * v291];
            float32x4_t *v296 = v288;
            v290 = v296 + 1;
            v298 = *(float32x4_t **)(a1 + 376);
            v297 = *(float32x4_t **)(a1 + 384);
            if (v297 != v298)
            {
              do
              {
                float32x4_t v299 = v297[-1];
                --v297;
                v296[-1] = v299;
                --v296;
              }
              while (v297 != v298);
              v297 = (float32x4_t *)*v444;
            }
            *(void *)(a1 + 376) = v296;
            *(void *)(a1 + 384) = v290;
            *(void *)(a1 + 392) = &v295[16 * v294];
            if (v297) {
              operator delete(v297);
            }
          }
          else
          {
            float32x4_t *v284 = v288;
            v290 = v284 + 1;
          }
          *(void *)(a1 + 384) = v290;
          v300 = (float32x4_t *)(v286 + 80 * v285);
          float32x4_t v301 = v300[1];
          v300 += 2;
          float32x4_t v280 = vld1q_dup_f32(v300->f32);
          float32x4_t v302 = vdivq_f32(v301, v280);
          unint64_t v303 = *(void *)(a1 + 392);
          if ((unint64_t)v290 >= v303)
          {
            uint64_t v304 = ((char *)v290 - (unsigned char *)*v444) >> 4;
            if ((unint64_t)(v304 + 1) >> 60) {
              goto LABEL_447;
            }
            uint64_t v305 = v303 - (void)*v444;
            uint64_t v306 = v305 >> 3;
            if (v305 >> 3 <= (unint64_t)(v304 + 1)) {
              uint64_t v306 = v304 + 1;
            }
            if ((unint64_t)v305 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v307 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v307 = v306;
            }
            if (v307)
            {
              float32x4_t v442 = v302;
              v308 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v443, v307);
              float32x4_t v302 = v442;
            }
            else
            {
              v308 = 0;
            }
            v309 = (float32x4_t *)&v308[16 * v304];
            float32x4_t *v309 = v302;
            v284 = v309 + 1;
            v311 = *(float32x4_t **)(a1 + 376);
            v310 = *(float32x4_t **)(a1 + 384);
            if (v310 != v311)
            {
              do
              {
                float32x4_t v312 = v310[-1];
                --v310;
                v309[-1] = v312;
                --v309;
              }
              while (v310 != v311);
              v310 = (float32x4_t *)*v444;
            }
            *(void *)(a1 + 376) = v309;
            *(void *)(a1 + 384) = v284;
            *(void *)(a1 + 392) = &v308[16 * v307];
            if (v310) {
              operator delete(v310);
            }
          }
          else
          {
            float32x4_t *v290 = v302;
            v284 = v290 + 1;
          }
          *(void *)(a1 + 384) = v284;
          std::vector<int>::pointer v281 = __p.__begin_;
          uint64_t v282 = ++v283;
        }
        while (v283 < (unint64_t)(__p.__end_ - __p.__begin_));
        int64_t v313 = ((char *)__p.__end_ - (char *)__p.__begin_) << 30;
      }
      uint64_t v314 = v464;
      unsigned int v315 = *(_DWORD *)(a1 + 340);
      if (v315 == -1) {
        *(_DWORD *)(a1 + 340) = geom::partitioned_set::extract(v440, v464);
      }
      else {
        geom::partitioned_set::extract(v440, v464, v315);
      }
      v474.__begin_ = (std::vector<int>::pointer)&unk_26EA03EC0;
      v474.__end_ = (std::vector<int>::pointer)a1;
      v474.__end_cap_.__value_ = (int *)(v313 | v314);
      v475 = &v474;
      geom::partitioned_set::split((uint64_t *)v440, &v466, ((unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2) + 1, v452, (uint64_t)&v474);
      std::__function::__value_func<unsigned int ()>::~__value_func[abi:nn180100](&v474);
      std::vector<int>::pointer v316 = __p.__begin_;
      if (__p.__end_ != __p.__begin_)
      {
        uint64_t v317 = 0;
        unint64_t v318 = __p.__end_ - __p.__begin_;
        uint64_t v319 = *(void *)(a1 + 72);
        uint64_t v320 = *(void *)(a1 + 352);
        do
        {
          *(_DWORD *)(v319 + 80 * v316[v317] + 68) = *(_DWORD *)(v320 + 4 * v317);
          ++v317;
        }
        while (v318 > v317);
      }
      LODWORD(v474.__begin_) = *(_DWORD *)(a1 + 340);
      HIDWORD(v474.__begin_) = *(_DWORD *)(*(void *)(a1 + 360) - 4);
      int v321 = geom::partitioned_set::merge(v440, (unsigned int *)&v474, 2);
      *(_DWORD *)(*(void *)(a1 + 360) - 4) = v321;
      *(_DWORD *)(a1 + 340) = v321;
      v323 = (unsigned int *)__p.__begin_;
      std::vector<int>::pointer v322 = __p.__end_;
      while (v323 != (unsigned int *)v322)
      {
        unint64_t v324 = *(unsigned int *)(*(void *)(a1 + 72) + 80 * *v323 + 68);
        uint64_t v325 = *(void *)(a1 + 272);
        if (v324 < (*(void *)(a1 + 280) - v325) >> 3)
        {
          unsigned int v326 = *(_DWORD *)(v325 + 8 * v324);
          if (v326 != -1)
          {
            float v327 = *(float *)(a1 + 528);
            uint64_t v328 = *v439;
            unsigned int v329 = -1;
            do
            {
              if (*(float *)(v328 + 4 * v326) > v327)
              {
                unsigned int v329 = v326;
                float v327 = *(float *)(v328 + 4 * v326);
              }
              unsigned int v326 = *(_DWORD *)(*(void *)v440 + 4 * v326);
            }
            while (v326 != -1);
            if (v329 != -1)
            {
              LODWORD(v467) = v329;
              DWORD1(v467) = *(_DWORD *)(v328 + 4 * v329);
            }
          }
        }
        ++v323;
      }
      goto LABEL_331;
    }
    uint64_t v242 = *(void *)(a1 + 48);
    uint64_t v243 = *(void *)(a1 + 96);
    float32x4_t v244 = *(float32x4_t *)(v243 + 16 * v464);
    float32x4_t v245 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v244, (int32x4_t)v244), (int8x16_t)v244, 0xCuLL);
    float32x4_t v246 = vnegq_f32(v244);
    while (1)
    {
      uint64_t v247 = v242 + 16 * *v241;
      float32x4_t v248 = *(float32x4_t *)(v243 + 16 * *(unsigned int *)(v242 + 16 * *(unsigned int *)(v247 + 8) + 12));
      float32x4_t v249 = *(float32x4_t *)(v243 + 16 * *(unsigned int *)(v247 + 12));
      float32x4_t v250 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v248, (int32x4_t)v248), (int8x16_t)v248, 0xCuLL);
      float32x4_t v251 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v249, (int32x4_t)v249), (int8x16_t)v249, 0xCuLL);
      float32x4_t v252 = vaddq_f32(vmlaq_f32(vmulq_f32(v250, v246), v248, v245), vaddq_f32(vmlaq_f32(vmulq_f32(v251, vnegq_f32(v248)), v249, v250), vmlaq_f32(vmulq_f32(v245, vnegq_f32(v249)), v244, v251)));
      float32x4_t v253 = vmulq_f32(v252, v252);
      int32x2_t v254 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v253.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v253, 2), v253)).u64[0];
      *(float *)v254.i32 = sqrtf(*(float *)v254.i32);
      if (*(float *)v254.i32 <= 0.00000011921) {
        goto LABEL_230;
      }
      float32x4_t v255 = vmulq_f32(vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v252, (int32x4_t)v252), (int8x16_t)v252, 0xCuLL), (float32x4_t)vdupq_lane_s32(v254, 0)), vsubq_f32(vdivq_f32(vaddq_f32(v244, vaddq_f32(v248, v249)), v438), *(float32x4_t *)(a1 + 320)));
      float v256 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v255, 2), vaddq_f32(v255, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v255.f32, 1))).f32[0];
      if (v256 == 0.0) {
        goto LABEL_230;
      }
      float v257 = fabsf(v256);
      if (v257 != INFINITY) {
        break;
      }
      if (v256 < 0.0) {
        goto LABEL_316;
      }
LABEL_230:
      if (++v241 == (unsigned int *)v469) {
        goto LABEL_231;
      }
    }
    if ((float)(0.0 - (float)(*(float *)(a1 + 528) * (float)(v257 + 1.0))) < v256) {
      goto LABEL_230;
    }
LABEL_316:
    v330 = (_DWORD *)(v240 + 80 * *__p.__begin_ + 68);
    unsigned int v331 = *(_DWORD *)(a1 + 344);
    if (v331 == -1)
    {
      int v334 = geom::partitioned_set::extract(v440, v464);
      *(_DWORD *)(a1 + 344) = v334;
      LODWORD(v332) = *v330;
      if (*v330 == v334) {
        goto LABEL_321;
      }
    }
    else
    {
      geom::partitioned_set::extract(v440, v464, v331);
      unint64_t v332 = *v330;
      uint64_t v333 = *(void *)(a1 + 272);
      if (v332 >= (*(void *)(a1 + 280) - v333) >> 3 || *(_DWORD *)(v333 + 8 * v332) == -1)
      {
LABEL_321:
        LODWORD(v332) = -1;
        _DWORD *v330 = -1;
      }
    }
    uint64_t v335 = *(void *)(a1 + 272);
    if (v332 >= (unint64_t)((*(void *)(a1 + 280) - v335) >> 3)
      || (unsigned int v336 = *(_DWORD *)(v335 + 8 * v332), v336 == -1))
    {
    }
    else
    {
      float v337 = *(float *)(a1 + 528);
      unsigned int v338 = -1;
      do
      {
        if (*(float *)(*v439 + 4 * v336) > v337)
        {
          unsigned int v338 = v336;
          float v337 = *(float *)(*v439 + 4 * v336);
        }
        unsigned int v336 = *(_DWORD *)(*(void *)v440 + 4 * v336);
      }
      while (v336 != -1);
      if (v338 != -1)
      {
        LODWORD(v474.__begin_) = v338;
        HIDWORD(v474.__begin_) = *(_DWORD *)(*v439 + 4 * v338);
      }
    }
LABEL_331:
    ++v436;
    v469 = (char *)v468;
    __p.__end_ = __p.__begin_;
    uint64_t v171 = *(void *)(a1 + 144);
  }
  while (*(void *)(a1 + 152) - v171 != 12);
LABEL_332:
  float v339 = 0.0;
  if (v436 == a2)
  {
    uint64_t v340 = *(void *)(a1 + 144);
    float v339 = -1.0;
    if (*(void *)(a1 + 152) - v340 != 12) {
      float v339 = *(float *)(v340 + 20);
    }
  }
  if (v460)
  {
    v461 = (char *)v460;
    operator delete(v460);
  }
  if (v463.__begin_)
  {
    v463.__end_ = v463.__begin_;
    operator delete(v463.__begin_);
  }
  if (v471.i64[1])
  {
    v472.i64[0] = v471.i64[1];
    operator delete((void *)v471.i64[1]);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v468)
  {
    v469 = (char *)v468;
    operator delete(v468);
  }
  return v339;
}

uint64_t geom::anonymous namespace'::hull_mesh<float>::~hull_mesh(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 496);
  if (v2)
  {
    *(void *)(a1 + 504) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)(a1 + 456);
  if (v3)
  {
    *(void *)(a1 + 464) = v3;
    operator delete(v3);
  }
  std::deque<unsigned int>::~deque[abi:nn180100]((void *)(a1 + 400));
  uint64_t v4 = *(void **)(a1 + 376);
  if (v4)
  {
    *(void *)(a1 + 384) = v4;
    operator delete(v4);
  }
  float32x4_t v5 = *(void **)(a1 + 352);
  if (v5)
  {
    *(void *)(a1 + 360) = v5;
    operator delete(v5);
  }
  unint64_t v6 = *(void **)(a1 + 296);
  if (v6)
  {
    *(void *)(a1 + 304) = v6;
    operator delete(v6);
  }
  unsigned int v7 = *(void **)(a1 + 272);
  if (v7)
  {
    *(void *)(a1 + 280) = v7;
    operator delete(v7);
  }
  unsigned int v8 = *(void **)(a1 + 248);
  if (v8)
  {
    *(void *)(a1 + 256) = v8;
    operator delete(v8);
  }
  unsigned int v9 = *(void **)(a1 + 224);
  if (v9)
  {
    *(void *)(a1 + 232) = v9;
    operator delete(v9);
  }
  unsigned int v10 = *(void **)(a1 + 200);
  if (v10)
  {
    *(void *)(a1 + 208) = v10;
    operator delete(v10);
  }
  unsigned int v11 = *(void **)(a1 + 168);
  if (v11)
  {
    *(void *)(a1 + 176) = v11;
    operator delete(v11);
  }
  unsigned int v12 = *(void **)(a1 + 144);
  if (v12)
  {
    *(void *)(a1 + 152) = v12;
    operator delete(v12);
  }
  unsigned int v13 = *(void **)(a1 + 120);
  if (v13)
  {
    *(void *)(a1 + 128) = v13;
    operator delete(v13);
  }
  uint64_t v14 = *(void **)(a1 + 96);
  if (v14)
  {
    *(void *)(a1 + 104) = v14;
    operator delete(v14);
  }
  float32x4_t v15 = *(void **)(a1 + 72);
  if (v15)
  {
    *(void *)(a1 + 80) = v15;
    operator delete(v15);
  }
  float32x4_t v16 = *(void **)(a1 + 48);
  if (v16)
  {
    *(void *)(a1 + 56) = v16;
    operator delete(v16);
  }
  float32x4_t v17 = *(void **)(a1 + 24);
  if (v17)
  {
    *(void *)(a1 + 32) = v17;
    operator delete(v17);
  }
  float32x4_t v18 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v18;
    operator delete(v18);
  }
  return a1;
}

double geom::convex_hull_triangulated_3<double>(unint64_t a1, float64x2_t *a2, void *a3, unsigned int a4, double a5)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  a3[1] = *a3;
  if (!a1) {
    return 0.0;
  }
  if (a1 > 3)
  {
    unint64_t v11 = a1;
  }
  else
  {
    memcpy(__dst, a2, 32 * a1);
    long long v10 = __dst[0];
    long long v9 = __dst[1];
    unint64_t v11 = 4;
    unint64_t v12 = a1;
    do
    {
      unsigned int v13 = &__dst[2 * v12];
      *unsigned int v13 = v10;
      v13[1] = v9;
      ++v12;
    }
    while (v12 != 4);
    a2 = (float64x2_t *)__dst;
  }
  unint64_t v57 = v11;
  float32x4_t v15 = (char *)*a3;
  a3[1] = *a3;
  float32x4_t v16 = v62;
  uint64_t v59 = v63;
  if (v62 != v63)
  {
    float32x4_t v17 = (char **)(a3 + 2);
    do
    {
      uint64_t v18 = *v16;
      if (v18 != -1)
      {
        int v19 = *(_DWORD *)(v61 + 16 * v18 + 12);
        uint64_t v20 = *v16;
        do
        {
          uint64_t v21 = v61;
          uint64_t v22 = v61 + 16 * v20;
          unsigned int v25 = *(_DWORD *)(v22 + 8);
          int16x4_t v24 = (unsigned int *)(v22 + 8);
          uint64_t v23 = v25;
          if (v20 != v18 && v23 != v18)
          {
            int16x4_t v26 = *v17;
            if (v15 >= *v17)
            {
              int16x4_t v28 = (char *)*a3;
              uint64_t v29 = (uint64_t)&v15[-*a3] >> 2;
              unint64_t v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 62) {
                goto LABEL_73;
              }
              uint64_t v31 = v26 - v28;
              if (v31 >> 1 > v30) {
                unint64_t v30 = v31 >> 1;
              }
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v32 = v30;
              }
              if (v32)
              {
                unsigned int v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v32);
                int16x4_t v28 = (char *)*a3;
                float32x4_t v15 = (char *)a3[1];
              }
              else
              {
                unsigned int v33 = 0;
              }
              unsigned int v34 = &v33[4 * v29];
              *(_DWORD *)unsigned int v34 = v19;
              unsigned int v27 = v34 + 4;
              while (v15 != v28)
              {
                int v35 = *((_DWORD *)v15 - 1);
                v15 -= 4;
                *((_DWORD *)v34 - 1) = v35;
                v34 -= 4;
              }
              int16x4_t v26 = &v33[4 * v32];
              *a3 = v34;
              a3[1] = v27;
              a3[2] = v26;
              if (v28)
              {
                operator delete(v28);
                int16x4_t v26 = *v17;
              }
            }
            else
            {
              *(_DWORD *)float32x4_t v15 = v19;
              unsigned int v27 = v15 + 4;
            }
            a3[1] = v27;
            uint64_t v36 = (_DWORD *)(v21 + 16 * v20 + 12);
            if (v27 >= v26)
            {
              float v38 = (char *)*a3;
              uint64_t v39 = (uint64_t)&v27[-*a3] >> 2;
              unint64_t v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 62) {
                goto LABEL_73;
              }
              uint64_t v41 = v26 - v38;
              if (v41 >> 1 > v40) {
                unint64_t v40 = v41 >> 1;
              }
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v42 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v40;
              }
              if (v42)
              {
                unint64_t v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v42);
                float v38 = (char *)*a3;
                unsigned int v27 = (char *)a3[1];
              }
              else
              {
                unint64_t v43 = 0;
              }
              uint64_t v44 = &v43[4 * v39];
              *(_DWORD *)uint64_t v44 = *v36;
              uint64_t v37 = v44 + 4;
              while (v27 != v38)
              {
                int v45 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *((_DWORD *)v44 - 1) = v45;
                v44 -= 4;
              }
              int16x4_t v26 = &v43[4 * v42];
              *a3 = v44;
              a3[1] = v37;
              a3[2] = v26;
              if (v38)
              {
                operator delete(v38);
                int16x4_t v26 = *v17;
              }
            }
            else
            {
              *(_DWORD *)unsigned int v27 = *v36;
              uint64_t v37 = v27 + 4;
            }
            a3[1] = v37;
            float32x4_t v46 = (_DWORD *)(v21 + 16 * v23 + 12);
            if (v37 >= v26)
            {
              float32x4_t v47 = (char *)*a3;
              uint64_t v48 = (uint64_t)&v37[-*a3] >> 2;
              unint64_t v49 = v48 + 1;
              if ((unint64_t)(v48 + 1) >> 62) {
LABEL_73:
              }
                abort();
              uint64_t v50 = v26 - v47;
              if (v50 >> 1 > v49) {
                unint64_t v49 = v50 >> 1;
              }
              if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v51 = v49;
              }
              if (v51)
              {
                unint64_t v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v51);
                float32x4_t v47 = (char *)*a3;
                uint64_t v37 = (char *)a3[1];
              }
              else
              {
                unint64_t v52 = 0;
              }
              float v53 = &v52[4 * v48];
              *(_DWORD *)float v53 = *v46;
              float32x4_t v15 = v53 + 4;
              while (v37 != v47)
              {
                int v54 = *((_DWORD *)v37 - 1);
                v37 -= 4;
                *((_DWORD *)v53 - 1) = v54;
                v53 -= 4;
              }
              *a3 = v53;
              a3[1] = v15;
              a3[2] = &v52[4 * v51];
              if (v47) {
                operator delete(v47);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v37 = *v46;
              float32x4_t v15 = v37 + 4;
            }
            a3[1] = v15;
            uint64_t v23 = *v24;
            uint64_t v18 = *v16;
          }
          uint64_t v20 = v23;
        }
        while (v23 != v18);
      }
      v16 += 28;
    }
    while (v16 != v59);
  }
  if (v57 != a1)
  {
    for (unsigned __int16 i = (char *)*a3; i != v15; i += 4)
    {
      if (*(unsigned int *)i >= a1) {
        *(_DWORD *)unsigned __int16 i = 0;
      }
    }
  }
  return v14;
}

uint64_t geom::anonymous namespace'::hull_mesh<double>::hull_mesh(uint64_t a1, float64x2_t *a2, unint64_t a3, double a4)
{
  *(_OWORD *)(a1 + 96) = 0u;
  unsigned int v8 = (void **)(a1 + 96);
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 168) = 0;
  long long v9 = (std::vector<int> *)(a1 + 168);
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  long long v10 = operator new(0x18uLL);
  *(_DWORD *)long long v10 = 0;
  v10[1] = 0;
  v10[2] = 0;
  *(void *)(a1 + 144) = v10;
  *(void *)(a1 + 152) = v10 + 3;
  *(void *)(a1 + 160) = v10 + 3;
  std::vector<int>::value_type __x = 0;
  std::vector<unsigned int>::resize(v9, a3, &__x);
  *(_OWORD *)(a1 + 200) = 0u;
  *(void *)(a1 + 312) = 0;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(void *)(a1 + 352) = 0xFFFFFFFF00000000;
  *(_DWORD *)(a1 + 360) = -1;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_DWORD *)(a1 + 464) = 0;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0x3FE0000000000000;
  *(_DWORD *)(a1 + 464) = 0;
  *(_DWORD *)(a1 + 504) = 0;
  *(void *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 0;
  *(void *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 0x3FE0000000000000;
  *(_DWORD *)(a1 + 504) = 0;
  double v13 = 2.22044605e-16;
  if (a4 >= 2.22044605e-16) {
    double v13 = a4;
  }
  *(double *)(a1 + 544) = v13;
  if (a3)
  {
    v12.f64[0] = -INFINITY;
    v11.f64[0] = INFINITY;
    float64x2_t v14 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v15 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    uint64_t v16 = 32 * a3;
    float32x4_t v17 = a2;
    do
    {
      float64x2_t v18 = *v17;
      float64x2_t v19 = v17[1];
      v17 += 2;
      float64x2_t v15 = vminnmq_f64(v18, v15);
      float64x2_t v11 = vminnmq_f64((float64x2_t)*(unint64_t *)&v19.f64[0], (float64x2_t)*(unint64_t *)&v11.f64[0]);
      float64x2_t v14 = vmaxnmq_f64(v18, v14);
      float64x2_t v12 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v19.f64[0], (float64x2_t)*(unint64_t *)&v12.f64[0]);
      v16 -= 32;
    }
    while (v16);
  }
  else
  {
    v11.f64[0] = INFINITY;
    v12.f64[0] = -INFINITY;
    float64x2_t v15 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v14 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  }
  float64x2_t v73 = v11;
  float64x2_t v69 = v15;
  float64x2_t v71 = v12;
  float64x2_t v20 = vsubq_f64(v12, v11);
  __asm { FMOV            V2.2D, #0.5 }
  int8x16_t v26 = (int8x16_t)vmulq_f64(v20, _Q2);
  float64x2_t v65 = _Q2;
  float64x2_t v67 = v14;
  float64x2_t v27 = vmulq_f64(vsubq_f64(v14, v15), _Q2);
  v20.f64[0] = 2.22044605e-16;
  __asm { FMOV            V7.2D, #1.0 }
  v29.i64[0] = _Q7.i64[0];
  v29.i64[1] = *(void *)&v27.f64[1];
  int8x16_t v30 = vbslq_s8((int8x16_t)vdupq_lane_s64(vmvnq_s8((int8x16_t)vcgeq_f64(v20, v27)).i64[0], 0), (int8x16_t)v27, v29);
  float64x2_t v63 = (float64x2_t)v26;
  if (*(double *)&v30.i64[1] <= 2.22044605e-16)
  {
    _Q7.i64[0] = v30.i64[0];
    v30.i64[1] = 1.0;
    int8x16_t v60 = _Q7;
    uint64_t v61 = v30.i64[0];
    uint64_t v59 = vextq_s8(v30, v30, 8uLL).u64[0];
    v26.i64[1] = vextq_s8(v26, v26, 8uLL).u64[0];
  }
  else
  {
    uint64_t v59 = vextq_s8(v30, v30, 8uLL).u64[0];
    int8x16_t v60 = v30;
    uint64_t v61 = v30.i64[0];
  }
  int8x16_t v58 = v26;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm(v8, a3);
  if (a3)
  {
    float64x2_t v32 = v67;
    float64x2_t v31 = v69;
    unsigned int v33 = &a2[2 * a3];
    *(void *)&v31.f64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
    *(void *)&v32.f64[1] = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
    float64x2_t v34 = vaddq_f64(v32, v31);
    v31.f64[1] = v71.f64[1];
    float64x2_t v41 = vmulq_f64(v34, v65);
    v31.f64[0] = 2.22044605e-16;
    int8x16_t v35 = (int8x16_t)vcgeq_f64(v31, v63);
    *(void *)&v32.f64[0] = vmvnq_s8(v35).u64[0];
    float64x2_t v36 = vmulq_f64(vaddq_f64(v71, v73), v65);
    v37.i64[0] = v61;
    v37.i64[1] = v59;
    float64x2_t v42 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(*(uint64_t *)&v32.f64[0], 0), v60, v37);
    *(void *)&v38.f64[1] = v58.i64[1];
    *(int8x8_t *)&v38.f64[0] = vorr_s8(vand_s8(*(int8x8_t *)v58.i8, *(int8x8_t *)&v32.f64[0]), vand_s8(*(int8x8_t *)v35.i8, (int8x8_t)0x3FF0000000000000));
    uint64_t v39 = (void *)(a1 + 112);
    unint64_t v40 = *(int8x16_t **)(a1 + 104);
    *(void *)&v41.f64[1] = vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL).u64[0];
    *(void *)&v42.f64[1] = vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
    float64x2_t v66 = v36;
    float64x2_t v68 = v41;
    float64x2_t v62 = v38;
    float64x2_t v64 = v42;
    do
    {
      int8x16_t v43 = (int8x16_t)vdivq_f64(vsubq_f64(*a2, v41), v42);
      unint64_t v44 = vextq_s8(v43, v43, 8uLL).u64[0];
      float64x2_t v45 = vdivq_f64(vsubq_f64(a2[1], v36), v38);
      if ((unint64_t)v40 >= *v39)
      {
        uint64_t v46 = ((char *)v40 - (unsigned char *)*v8) >> 5;
        if ((unint64_t)(v46 + 1) >> 59) {
          abort();
        }
        uint64_t v47 = *v39 - (void)*v8;
        uint64_t v48 = v47 >> 4;
        if (v47 >> 4 <= (unint64_t)(v46 + 1)) {
          uint64_t v48 = v46 + 1;
        }
        if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v49 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v49 = v48;
        }
        if (v49)
        {
          uint64_t v74 = v43.i64[0];
          unint64_t v70 = v44;
          float64x2_t v72 = v45;
          uint64_t v50 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1 + 112, v49);
          unint64_t v44 = v70;
          float64x2_t v45 = v72;
          v43.i64[0] = v74;
        }
        else
        {
          uint64_t v50 = 0;
        }
        v43.i64[1] = v44;
        unint64_t v51 = (int8x16_t *)&v50[32 * v46];
        *unint64_t v51 = v43;
        v51[1] = (int8x16_t)v45;
        float v53 = *(int8x16_t **)(a1 + 96);
        unint64_t v52 = *(int8x16_t **)(a1 + 104);
        int v54 = v51;
        if (v52 != v53)
        {
          do
          {
            int8x16_t v55 = v52[-2];
            int8x16_t v56 = v52[-1];
            v52 -= 2;
            v54[-2] = v55;
            v54[-1] = v56;
            v54 -= 2;
          }
          while (v52 != v53);
          unint64_t v52 = (int8x16_t *)*v8;
        }
        unint64_t v40 = v51 + 2;
        *(void *)(a1 + 96) = v54;
        *(void *)(a1 + 104) = v51 + 2;
        *(void *)(a1 + 112) = &v50[32 * v49];
        if (v52) {
          operator delete(v52);
        }
        float64x2_t v36 = v66;
        float64x2_t v41 = v68;
        float64x2_t v38 = v62;
        float64x2_t v42 = v64;
      }
      else
      {
        v43.i64[1] = v44;
        *unint64_t v40 = v43;
        v40[1] = (int8x16_t)v45;
        v40 += 2;
      }
      *(void *)(a1 + 104) = v40;
      a2 += 2;
    }
    while (a2 != v33);
  }
  return a1;
}

double geom::anonymous namespace'::hull_mesh<double>::compute_hull(uint64_t a1, unsigned int a2)
{
  uint64_t v564 = *MEMORY[0x263EF8340];
  double v3 = *(int8x16_t **)(a1 + 96);
  uint64_t v4 = *(int8x16_t **)(a1 + 104);
  int8x16_t v6 = *v3;
  int8x16_t v5 = v3[1];
  unint64_t v7 = ((char *)v4 - (char *)v3) >> 5;
  if ((unint64_t)((char *)v4 - (char *)v3) < 0x21)
  {
    unsigned int v13 = 0;
    unsigned int v12 = 0;
    unsigned int v11 = 0;
    unsigned int v10 = 0;
    unsigned int v9 = 0;
    unsigned int v8 = 0;
    int64x2_t v24 = *(int64x2_t *)v3;
    int8x16_t v25 = v3[1];
    int64x2_t v22 = *(int64x2_t *)v3;
    int8x16_t v23 = v25;
    int8x16_t v20 = *v3;
    int8x16_t v39 = v25;
    int8x16_t v18 = *v3;
    int8x16_t v41 = v25;
    int8x16_t v31 = *v3;
    int8x16_t v17 = v25;
  }
  else
  {
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    unsigned int v10 = 0;
    unsigned int v11 = 0;
    unsigned int v12 = 0;
    unsigned int v13 = 0;
    unsigned int v14 = 2;
    uint64_t v15 = 1;
    float64x2_t v16 = *(float64x2_t *)v3;
    int8x16_t v17 = v3[1];
    int8x16_t v18 = *v3;
    float64x2_t v19 = (float64x2_t)v17;
    int8x16_t v20 = *v3;
    float64x2_t v21 = (float64x2_t)v17;
    int64x2_t v22 = *(int64x2_t *)v3;
    int8x16_t v23 = v17;
    int64x2_t v24 = *(int64x2_t *)v3;
    int8x16_t v25 = v17;
    float64x2_t v26 = *(float64x2_t *)v3;
    do
    {
      float64x2_t v27 = (float64x2_t *)&v3[2 * v15];
      float64x2_t v29 = *v27;
      float64x2_t v28 = v27[1];
      int8x16_t v30 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v16, *v27).i64[0], 0);
      int8x16_t v17 = vbslq_s8(v30, (int8x16_t)v28, v17);
      int8x16_t v31 = vbslq_s8(v30, *(int8x16_t *)v27, (int8x16_t)v16);
      if (v27->f64[0] < v16.f64[0]) {
        unsigned int v13 = v14 - 1;
      }
      int8x16_t v32 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v29, v26).i64[0], 0);
      int8x16_t v5 = vbslq_s8(v32, (int8x16_t)v28, v5);
      int8x16_t v6 = vbslq_s8(v32, (int8x16_t)v29, (int8x16_t)v26);
      if (v29.f64[0] > v26.f64[0]) {
        unsigned int v12 = v14 - 1;
      }
      double v33 = *(double *)&v24.i64[1];
      float64x2_t v34 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1);
      int8x16_t v35 = (int8x16_t)vdupq_lane_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64(v24, 1), v34).i64[0], 0);
      int8x16_t v25 = vbslq_s8(v35, (int8x16_t)v28, v25);
      int64x2_t v24 = (int64x2_t)vbslq_s8(v35, (int8x16_t)v29, (int8x16_t)v24);
      if (v29.f64[1] < v33) {
        unsigned int v11 = v14 - 1;
      }
      double v36 = *(double *)&v22.i64[1];
      int8x16_t v37 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v34, (float64x2_t)vdupq_laneq_s64(v22, 1)).i64[0], 0);
      int8x16_t v23 = vbslq_s8(v37, (int8x16_t)v28, v23);
      int64x2_t v22 = (int64x2_t)vbslq_s8(v37, (int8x16_t)v29, (int8x16_t)v22);
      if (v29.f64[1] > v36) {
        unsigned int v10 = v14 - 1;
      }
      int8x16_t v38 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v21, v28).i64[0], 0);
      int8x16_t v39 = vbslq_s8(v38, (int8x16_t)v28, (int8x16_t)v21);
      int8x16_t v20 = vbslq_s8(v38, (int8x16_t)v29, v20);
      if (v28.f64[0] < v21.f64[0]) {
        unsigned int v9 = v14 - 1;
      }
      int8x16_t v40 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v28, v19).i64[0], 0);
      if (v28.f64[0] > v19.f64[0]) {
        unsigned int v8 = v14 - 1;
      }
      uint64_t v15 = v14;
      int8x16_t v41 = vbslq_s8(v40, (int8x16_t)v28, (int8x16_t)v19);
      BOOL v318 = v7 > v14++;
      int8x16_t v18 = vbslq_s8(v40, (int8x16_t)v29, v18);
      float64x2_t v16 = (float64x2_t)v31;
      float64x2_t v19 = (float64x2_t)v41;
      float64x2_t v21 = (float64x2_t)v39;
      float64x2_t v26 = (float64x2_t)v6;
    }
    while (v318);
  }
  unsigned int v42 = 0;
  unsigned int v43 = 0;
  unsigned int v44 = 0;
  unint64_t v45 = 0;
  *(int8x16_t *)v553 = v31;
  int8x16_t v554 = v17;
  int8x16_t v555 = v6;
  int8x16_t v556 = v5;
  uint64_t v46 = v557;
  v557[0] = v24;
  v557[1] = v25;
  v557[2] = v22;
  v557[3] = v23;
  v557[4] = v20;
  v557[5] = v39;
  *(void *)&long long v562 = __PAIR64__(v12, v13);
  *((void *)&v562 + 1) = __PAIR64__(v10, v11);
  uint64_t v47 = (char *)&v562 + 8;
  *(void *)&long long v563 = __PAIR64__(v8, v9);
  double v48 = -1.0;
  uint64_t v49 = 1;
  v557[6] = v18;
  v557[7] = v41;
  do
  {
    if (v45 <= 4)
    {
      uint64_t v50 = &v553[4 * v45];
      float64x2_t v52 = *(float64x2_t *)v50;
      float64x2_t v51 = *((float64x2_t *)v50 + 1);
      float v53 = v46;
      int v54 = v47;
      unint64_t v55 = v49;
      do
      {
        if (v55 <= 4)
        {
          uint64_t v56 = 0;
          unint64_t v57 = (float64x2_t *)&v553[4 * v55];
          float64x2_t v58 = vsubq_f64(*v57, v52);
          float64x2_t v60 = vsubq_f64(v57[1], v51);
          float64x2_t v59 = vnegq_f64(v60);
          v60.f64[1] = v58.f64[0];
          unint64_t v61 = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
          float64x2_t v62 = (float64x2_t)vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL);
          int8x16_t v63 = (int8x16_t)vnegq_f64(v58);
          unint64_t v64 = vextq_s8(v63, v63, 8uLL).u64[0];
          do
          {
            float64x2_t v65 = (float64x2_t *)&v53[2 * v56];
            float64x2_t v66 = vsubq_f64(*v65, v52);
            float64x2_t v67 = vsubq_f64(v65[1], v51);
            v68.f64[0] = v67.f64[0];
            v68.f64[1] = v66.f64[0];
            *(void *)&v69.f64[0] = v63.i64[0];
            *(void *)&v69.f64[1] = v64;
            float64x2_t v70 = vmlaq_f64(vmulq_laneq_f64(v59, v66, 1), v67, v62);
            float64x2_t v71 = vmulq_f64(v68, v69);
            v68.f64[0] = v60.f64[0];
            *(void *)&v68.f64[1] = v61;
            float64x2_t v72 = vmlaq_f64(v71, v66, v68);
            float64x2_t v73 = vmulq_f64(v72, v72);
            double v74 = v73.f64[1] + vmulq_f64(v70, v70).f64[0] + v73.f64[0];
            if (v74 > v48)
            {
              unsigned int v44 = *((_DWORD *)&v562 + v45);
              unsigned int v43 = *((_DWORD *)&v562 + v55);
              double v48 = v74;
              unsigned int v42 = *(_DWORD *)&v54[4 * v56];
            }
            ++v56;
          }
          while (v55 + v56 < 5);
        }
        ++v55;
        v54 += 4;
        v53 += 2;
      }
      while (v55 != 6);
    }
    ++v45;
    ++v49;
    v47 += 4;
    v46 += 2;
  }
  while (v45 != 6);
  if (v44 == v43 || v43 == v42 || v44 == v42)
  {
    unint64_t v75 = 0;
    double v76 = -1.0;
    uint64_t v77 = 1;
    do
    {
      if (v75 <= 4)
      {
        unsigned int v78 = &v553[4 * v75];
        float64x2_t v80 = *(float64x2_t *)v78;
        float64x2_t v79 = *((float64x2_t *)v78 + 1);
        uint64_t v81 = v77;
        do
        {
          double v82 = (float64x2_t *)&v553[4 * v81];
          float64x2_t v83 = vsubq_f64(v80, *v82);
          float64x2_t v84 = vsubq_f64(v79, v82[1]);
          double v85 = sqrt(vmulq_f64(v84, v84).f64[0] + vaddvq_f64(vmulq_f64(v83, v83)));
          if (v85 > v76)
          {
            unsigned int v44 = *((_DWORD *)&v562 + v75);
            unsigned int v43 = *((_DWORD *)&v562 + v81);
            double v76 = v85;
          }
          ++v81;
        }
        while (v81 != 6);
      }
      ++v75;
      ++v77;
    }
    while (v75 != 6);
    uint64_t v539 = v44;
    if (v4 == v3)
    {
      double v96 = 0.0;
    }
    else
    {
      uint64_t v86 = 0;
      double v87 = (float64x2_t *)&v3[2 * v43];
      float64x2_t v89 = *v87;
      float64x2_t v88 = v87[1];
      uint64_t v90 = (float64x2_t *)&v3[2 * v44];
      float64x2_t v91 = vsubq_f64(v89, *v90);
      float64x2_t v92 = vsubq_f64(v88, v90[1]);
      float64x2_t v93 = vmulq_f64(v92, v92);
      float64x2_t v94 = vmulq_f64(v91, v91);
      v93.f64[0] = 1.0 / sqrt(v93.f64[0] + vaddvq_f64(v94));
      float64x2_t v95 = vmulq_f64(v92, v93);
      float64x2_t v98 = vmulq_n_f64(v91, v93.f64[0]);
      double v96 = 0.0;
      *(void *)&v98.f64[1] = vextq_s8((int8x16_t)v98, (int8x16_t)v98, 8uLL).u64[0];
      do
      {
        float32x4_t v99 = (float64x2_t *)&v3[2 * v86];
        v94.f64[0] = (double)v44;
        float64x2_t v100 = vsubq_f64(v99[1], v94);
        v97.f64[1] = (double)v44;
        v97.f64[0] = (double)v44;
        float64x2_t v101 = vsubq_f64(*v99, v97);
        float64x2_t v102 = vmulq_f64(v98, v101);
        v102.f64[0] = vmulq_f64(v95, v100).f64[0] + vaddvq_f64(v102);
        float64x2_t v103 = vmlsq_lane_f64(v101, v98, v102.f64[0], 0);
        float64x2_t v104 = vmlsq_f64(v100, v95, v102);
        double v105 = sqrt(vmulq_f64(v104, v104).f64[0] + vaddvq_f64(vmulq_f64(v103, v103)));
        if (v105 != v96 && v96 + 0.000001 <= v105)
        {
          unsigned int v42 = v86;
          double v96 = v105;
        }
        ++v86;
      }
      while (v7 > v86);
    }
    if (fabs(v96) <= 0.000001) {
      unsigned int v42 = v44;
    }
  }
  else
  {
    uint64_t v539 = v44;
  }
  *(double *)(a1 + 544) = fmax(*(double *)(a1 + 544), 2.22044605e-15);
  LODWORD(v550) = v111;
  LODWORD(__p.__begin_) = v112;
  uint64_t v113 = *(void *)(a1 + 48);
  float64x2_t v114 = (unsigned int *)(v113 + 16 * v534);
  unsigned int v115 = v106;
  float64x2_t v116 = (unsigned int *)(v113 + 16 * v106);
  unsigned int v117 = v107;
  float64x2_t v118 = (unsigned int *)(v113 + 16 * v107);
  float64x2_t v119 = (unsigned int *)(v113 + 16 * v108);
  int v120 = (unsigned int *)(v113 + 16 * v109);
  unint64_t v121 = (unsigned int *)(v113 + 16 * v110);
  uint64_t v122 = *(void *)(a1 + 72);
  uint64_t v123 = v122 + 112 * v111;
  uint64_t v124 = v122 + 112 * v112;
  float v114[2] = v115;
  v114[3] = v44;
  v116[2] = v117;
  v116[3] = v43;
  float v118[2] = v534;
  v118[3] = v42;
  v119[2] = v110;
  v119[3] = v43;
  v120[2] = v108;
  v120[3] = v42;
  v121[2] = v109;
  v121[3] = v44;
  *float64x2_t v114 = v111;
  v114[1] = v108;
  *float64x2_t v116 = v111;
  v116[1] = v109;
  *float64x2_t v118 = v111;
  v118[1] = v110;
  *float64x2_t v119 = v112;
  v119[1] = v534;
  unsigned int *v120 = v112;
  v120[1] = v115;
  unsigned int v529 = v112;
  unsigned int *v121 = v112;
  v121[1] = v117;
  *(_DWORD *)uint64_t v123 = v534;
  *(_DWORD *)uint64_t v124 = v108;
  uint64_t v125 = *(void *)(a1 + 96);
  uint64_t v126 = (float64x2_t *)(v125 + 32 * v539);
  float64x2_t v127 = *v126;
  float64x2_t v128 = v126[1];
  uint64_t v129 = (float64x2_t *)(v125 + 32 * v43);
  float64x2_t v130 = *v129;
  float64x2_t v131 = v129[1];
  unint64_t v132 = (float64x2_t *)(v125 + 32 * v42);
  float64x2_t v133 = *v132;
  float64x2_t v134 = v132[1];
  float64x2_t v135 = vnegq_f64(v128);
  float64x2_t v136 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v134), v127, 1), v128, *v132, 1);
  float64x2_t v137 = vaddq_f64(v128, v131);
  v128.f64[1] = v127.f64[0];
  float64x2_t v138 = vmlaq_laneq_f64(vmulq_laneq_f64(v135, *v129, 1), v131, v127, 1);
  float64x2_t v139 = vnegq_f64(v131);
  v131.f64[1] = v129->f64[0];
  float64x2_t v140 = vmlaq_laneq_f64(vmulq_laneq_f64(v139, *v132, 1), v134, *v129, 1);
  float64x2_t v141 = vaddq_f64(v137, v134);
  v134.f64[1] = v132->f64[0];
  float64x2_t v142 = vaddq_f64(vmlaq_f64(vmulq_f64(v128, vnegq_f64(*v132)), v127, v134), vaddq_f64(vmlaq_f64(vmulq_f64(v131, vnegq_f64(v127)), v130, v128), vmlaq_f64(vmulq_f64(v134, vnegq_f64(v130)), *v132, v131)));
  float64x2_t v143 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v142, 1);
  float64x2_t v144 = vaddq_f64(v136, vaddq_f64(v138, v140));
  v138.f64[0] = vmulq_f64(v144, v144).f64[0];
  v144.f64[1] = v142.f64[0];
  *(float64x2_t *)(v123 + 16) = v144;
  *(float64x2_t *)(v123 + 32) = v143;
  float64x2_t v145 = vmulq_f64(v142, v142);
  v145.f64[0] = sqrt(v145.f64[1] + v138.f64[0] + v145.f64[0]);
  *(float64_t *)(v123 + 48) = v145.f64[0];
  *(unsigned char *)(v123 + 56) = v145.f64[0] <= 2.22044605e-16;
  *(float64x2_t *)(v124 + 16) = vnegq_f64(v144);
  *(float64x2_t *)(v124 + 32) = vnegq_f64(v143);
  *(float64_t *)(v124 + 48) = v145.f64[0];
  *(unsigned char *)(v124 + 56) = v145.f64[0] <= 2.22044605e-16;
  float64x2_t v146 = vaddq_f64(vaddq_f64(v127, v130), v133);
  *(float64x2_t *)(v123 + 64) = v146;
  *(float64x2_t *)(v123 + 80) = v141;
  *(_DWORD *)(v123 + 96) = 3;
  *(float64x2_t *)(v124 + 64) = v146;
  *(float64x2_t *)(v124 + 80) = v141;
  *(_DWORD *)(v124 + 96) = 3;
  __asm { FMOV            V1.2D, #3.0 }
  float64x2_t v510 = _Q1;
  *(float64x2_t *)(a1 + 320) = vdivq_f64(v146, _Q1);
  *(float64x2_t *)(a1 + 336) = vdivq_f64(v141, _Q1);
  int v152 = *(unsigned __int8 *)(v123 + 56) | *(unsigned __int8 *)(v124 + 56);
  float64x2_t v153 = operator new(0x28uLL);
  *(void *)float64x2_t v153 = &unk_26EA03F40;
  v153[2] = v44;
  v153[3] = v43;
  v153[4] = v42;
  v153[5] = v111;
  *((unsigned char *)v153 + 24) = v152 != 0;
  *((void *)v153 + 4) = a1;
  v554.i64[1] = (uint64_t)v153;
  LODWORD(v547.__begin_) = (*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 5;
  geom::partitioned_set::init((std::vector<int> *)(a1 + 200), v547.__begin_, (uint64_t)&v547, 1uLL);
  memset(&v558, 0, sizeof(v558));
  LODWORD(v544) = 0;
  std::__function::__value_func<unsigned int ()(unsigned int const&)>::__value_func[abi:nn180100]((uint64_t)&v560, (uint64_t)v553);
  std::__function::__value_func<unsigned int ()>::__value_func[abi:nn180100]<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>>((uint64_t)&v562, (uint64_t)&v560);
  v507 = (geom::partitioned_set *)(a1 + 200);
  geom::partitioned_set::split((uint64_t *)(a1 + 200), &v544, 3u, &v558, (uint64_t)&v562);
  std::__function::__value_func<unsigned int ()>::~__value_func[abi:nn180100](&v562);
  std::__function::__value_func<unsigned int ()(unsigned int const&)>::~__value_func[abi:nn180100](&v560);
  begiunsigned __int16 n = v558.__begin_;
  *(_DWORD *)(a1 + 356) = *v558.__begin_;
  *(_DWORD *)(v123 + 100) = begin[1];
  uint64_t v155 = (unsigned int *)(v123 + 100);
  *(_DWORD *)(v124 + 100) = begin[2];
  uint64_t v156 = (unsigned int *)(v124 + 100);
  v558.__end_ = begin;
  operator delete(begin);
  v511 = (uint64_t *)(a1 + 120);
  std::vector<double>::resize(a1 + 120, (uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 5);
  if (v152)
  {
    std::__function::__value_func<unsigned int ()(unsigned int const&)>::~__value_func[abi:nn180100](v553);
    *(_DWORD *)(a1 + 352) = 3;
    long long v562 = 0uLL;
    *(void *)&long long v563 = 0;
    float64x2_t v560 = 0uLL;
    v561.f64[0] = 0.0;
    float v159 = std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v561, 1uLL);
    float64_t v161 = v560.f64[1];
    float64_t v160 = v560.f64[0];
    v163 = &v159[v162];
    *float v159 = 0;
    int v164 = v159 + 1;
    while (*(void *)&v161 != *(void *)&v160)
    {
      int v165 = *(_DWORD *)(*(void *)&v161 - 4);
      *(void *)&v161 -= 4;
      *--float v159 = v165;
    }
    *(void *)&v560.f64[0] = v159;
    *(void *)&v560.f64[1] = v164;
    *(void *)&v561.f64[0] = v163;
    if (v160 != 0.0) {
      operator delete(*(void **)&v160);
    }
    *(void *)&v560.f64[1] = v164;
    uint64_t v171 = *(void *)(a1 + 72);
    unint64_t v173 = (_DWORD *)*((void *)&v562 + 1);
    float32x4_t v172 = (char *)v563;
    if (*((void *)&v562 + 1) >= (unint64_t)v563)
    {
      v175 = (_DWORD *)v562;
      uint64_t v176 = (uint64_t)(*((void *)&v562 + 1) - v562) >> 2;
      unint64_t v177 = v176 + 1;
      if ((unint64_t)(v176 + 1) >> 62) {
        goto LABEL_423;
      }
      uint64_t v178 = v563 - v562;
      if ((uint64_t)(v563 - v562) >> 1 > v177) {
        unint64_t v177 = v178 >> 1;
      }
      if ((unint64_t)v178 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v179 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v179 = v177;
      }
      if (v179)
      {
        v180 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v563, v179);
        unint64_t v173 = (_DWORD *)*((void *)&v562 + 1);
        v175 = (_DWORD *)v562;
      }
      else
      {
        v180 = 0;
      }
      v465 = &v180[4 * v176];
      float32x4_t v172 = &v180[4 * v179];
      *(_DWORD *)v465 = *(_DWORD *)(v171 + 112);
      v174 = (unsigned int *)(v465 + 4);
      while (v173 != v175)
      {
        int v466 = *--v173;
        *((_DWORD *)v465 - 1) = v466;
        v465 -= 4;
      }
      *(void *)&long long v562 = v465;
      *((void *)&v562 + 1) = v174;
      *(void *)&long long v563 = v172;
      if (v175)
      {
        operator delete(v175);
        float32x4_t v172 = (char *)v563;
      }
    }
    else
    {
      **((_DWORD **)&v562 + 1) = *(_DWORD *)(v171 + 112);
      v174 = v173 + 1;
    }
    *((void *)&v562 + 1) = v174;
    long long v467 = (unsigned int *)v562;
    v468 = (unsigned int *)(*(void *)(a1 + 48) + 16 * *(unsigned int *)v562 + 8);
    if (v174 >= (unsigned int *)v172)
    {
      uint64_t v470 = (uint64_t)((uint64_t)v174 - v562) >> 2;
      unint64_t v471 = v470 + 1;
      if ((unint64_t)(v470 + 1) >> 62) {
        goto LABEL_423;
      }
      uint64_t v472 = (uint64_t)&v172[-v562];
      if (v472 >> 1 > v471) {
        unint64_t v471 = v472 >> 1;
      }
      if ((unint64_t)v472 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v473 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v473 = v471;
      }
      if (v473)
      {
        std::vector<int> v474 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v563, v473);
        v174 = (unsigned int *)*((void *)&v562 + 1);
        long long v467 = (unsigned int *)v562;
      }
      else
      {
        std::vector<int> v474 = 0;
      }
      v475 = (unsigned int *)&v474[4 * v470];
      float32x4_t v172 = &v474[4 * v473];
      unsigned int *v475 = *v468;
      v469 = v475 + 1;
      while (v174 != v467)
      {
        unsigned int v476 = *--v174;
        *--v475 = v476;
      }
      *(void *)&long long v562 = v475;
      *((void *)&v562 + 1) = v469;
      *(void *)&long long v563 = v172;
      if (v467)
      {
        operator delete(v467);
        long long v467 = (unsigned int *)v562;
        float32x4_t v172 = (char *)v563;
      }
      else
      {
        long long v467 = v475;
      }
    }
    else
    {
      unsigned int *v174 = *v468;
      v469 = v174 + 1;
    }
    *((void *)&v562 + 1) = v469;
    v477 = (unsigned int *)(*(void *)(a1 + 48) + 16 * v467[1] + 8);
    if (v469 < (unsigned int *)v172)
    {
      unsigned int *v469 = *v477;
      v478 = v469 + 1;
LABEL_391:
      *((void *)&v562 + 1) = v478;
      v487 = v478 - 1;
      if (v467 != v478 && v487 > v467)
      {
        v489 = v467 + 1;
        do
        {
          unsigned int v490 = *(v489 - 1);
          *(v489 - 1) = *v487;
          *v487-- = v490;
        }
        while (v489++ < v487);
      }
      uint64_t v491 = *(void *)(a1 + 272);
      unint64_t v492 = (*(void *)(a1 + 280) - v491) >> 3;
      if (*(void *)(a1 + 280) == v491)
      {
LABEL_403:
        unsigned int v494 = -1;
      }
      else
      {
        uint64_t v493 = 0;
        unsigned int v494 = 0;
        while (*(_DWORD *)(v491 + 8 * v493) == -1)
        {
          uint64_t v493 = ++v494;
          if (v492 <= v494) {
            goto LABEL_403;
          }
        }
      }
      BOOL v318 = v492 > v494;
      int v495 = -1;
      if (v318) {
        int v495 = *(_DWORD *)(v491 + 8 * v494);
      }
      LODWORD(v550) = v495;
      *(_DWORD *)(*(void *)(a1 + 72) + 100) = -1;
      LODWORD(v553[0]) = 0;
      v553[1] = 0;
      int8x16_t v554 = 0uLL;
      v555.i64[0] = 0x3FE0000000000000;
      LODWORD(v553[0]) = 0;
      memset(&v558, 0, sizeof(v558));
      if (v558.__begin_)
      {
        v558.__end_ = v558.__begin_;
        operator delete(v558.__begin_);
      }
      if (v553[1])
      {
        v554.i64[0] = (uint64_t)v553[1];
        operator delete(v553[1]);
      }
      if (*(void *)&v560.f64[0])
      {
        v560.f64[1] = v560.f64[0];
        operator delete(*(void **)&v560.f64[0]);
      }
      v496 = (void *)v562;
      if (!(void)v562) {
        return 0.0;
      }
      *((void *)&v562 + 1) = v562;
LABEL_420:
      operator delete(v496);
      return 0.0;
    }
    uint64_t v479 = v469 - v467;
    unint64_t v480 = v479 + 1;
    if (!((unint64_t)(v479 + 1) >> 62))
    {
      uint64_t v481 = v172 - (char *)v467;
      if (v481 >> 1 > v480) {
        unint64_t v480 = v481 >> 1;
      }
      if ((unint64_t)v481 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v482 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v482 = v480;
      }
      if (v482)
      {
        v483 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v563, v482);
        v469 = (unsigned int *)*((void *)&v562 + 1);
        long long v467 = (unsigned int *)v562;
      }
      else
      {
        v483 = 0;
      }
      v484 = (unsigned int *)&v483[4 * v479];
      v485 = &v483[4 * v482];
      unsigned int *v484 = *v477;
      v478 = v484 + 1;
      while (v469 != v467)
      {
        unsigned int v486 = *--v469;
        *--v484 = v486;
      }
      *(void *)&long long v562 = v484;
      *((void *)&v562 + 1) = v478;
      *(void *)&long long v563 = v485;
      if (v467)
      {
        operator delete(v467);
        long long v467 = (unsigned int *)v562;
      }
      else
      {
        long long v467 = v484;
      }
      goto LABEL_391;
    }
LABEL_423:
    abort();
  }
  unint64_t v166 = *v155;
  uint64_t v167 = *(void *)(a1 + 272);
  unint64_t v168 = (*(void *)(a1 + 280) - v167) >> 3;
  if (v168 <= v166 || (uint64_t v169 = *(unsigned int *)(v167 + 8 * v166), v169 == -1))
  {
    uint64_t v170 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v181 = *(void *)(a1 + 96);
    uint64_t v182 = *(void *)(a1 + 72) + 112 * v111;
    unint64_t v183 = (float64x2_t *)(v182 + 64);
    LODWORD(v157.f64[0]) = *(_DWORD *)(v182 + 96);
    v157.f64[0] = (double)*(unint64_t *)&v157.f64[0];
    uint64_t v184 = (float64x2_t *)(v182 + 16);
    v185 = (uint64_t *)(v182 + 48);
    uint64_t v186 = *(void *)(a1 + 120);
    uint64_t v187 = *(void *)(a1 + 200);
    v188.f64[0] = v157.f64[0];
    v188.f64[1] = v157.f64[0];
    uint64_t v170 = 0xFFFFFFFFLL;
    do
    {
      int v189 = (float64x2_t *)(v181 + 32 * v169);
      *(void *)&v158.f64[0] = *v185;
      float64x2_t v190 = vdivq_f64(v184[1], v158);
      float64x2_t v158 = v189[1];
      double v191 = vmulq_f64(vsubq_f64(v158, vdivq_f64(v183[1], v157)), v190).f64[0]
           + vaddvq_f64(vmulq_f64(vsubq_f64(*v189, vdivq_f64(*v183, v188)), vdivq_f64(*v184, (float64x2_t)vdupq_lane_s64(*v185, 0))));
      *(double *)(v186 + 8 * v169) = v191;
      if (v191 > *(double *)(a1 + 544) && (v170 == 0xFFFFFFFFLL || v191 > *(double *)(v186 + 8 * v170))) {
        uint64_t v170 = v169;
      }
      uint64_t v169 = *(unsigned int *)(v187 + 4 * v169);
    }
    while (v169 != -1);
  }
  unint64_t v192 = *v156;
  if (v168 <= v192 || (uint64_t v193 = *(unsigned int *)(v167 + 8 * v192), v193 == -1))
  {
    uint64_t v194 = 0xFFFFFFFFLL;
  }
  else
  {
    uint64_t v195 = *(void *)(a1 + 96);
    uint64_t v196 = *(void *)(a1 + 72) + 112 * v529;
    int64_t v197 = (float64x2_t *)(v196 + 64);
    LODWORD(v157.f64[0]) = *(_DWORD *)(v196 + 96);
    v157.f64[0] = (double)*(unint64_t *)&v157.f64[0];
    unint64_t v198 = (float64x2_t *)(v196 + 16);
    v199 = (uint64_t *)(v196 + 48);
    uint64_t v200 = *(void *)(a1 + 120);
    uint64_t v201 = *(void *)(a1 + 200);
    v202.f64[0] = v157.f64[0];
    v202.f64[1] = v157.f64[0];
    uint64_t v194 = 0xFFFFFFFFLL;
    do
    {
      uint64_t v203 = (float64x2_t *)(v195 + 32 * v193);
      *(void *)&v158.f64[0] = *v199;
      float64x2_t v204 = vdivq_f64(v198[1], v158);
      float64x2_t v158 = v203[1];
      double v205 = vmulq_f64(vsubq_f64(v158, vdivq_f64(v197[1], v157)), v204).f64[0]
           + vaddvq_f64(vmulq_f64(vsubq_f64(*v203, vdivq_f64(*v197, v202)), vdivq_f64(*v198, (float64x2_t)vdupq_lane_s64(*v199, 0))));
      *(double *)(v200 + 8 * v193) = v205;
      if (v205 > *(double *)(a1 + 544) && (v194 == 0xFFFFFFFFLL || v205 > *(double *)(v200 + 8 * v194))) {
        uint64_t v194 = v193;
      }
      uint64_t v193 = *(unsigned int *)(v201 + 4 * v193);
    }
    while (v193 != -1);
  }
  if (v170 != 0xFFFFFFFFLL)
  {
    LODWORD(v562) = v170;
    *((void *)&v562 + 1) = *(void *)(*(void *)(a1 + 120) + 8 * v170);
  }
  if (v194 != 0xFFFFFFFFLL)
  {
    LODWORD(v562) = v194;
    *((void *)&v562 + 1) = *(void *)(*(void *)(a1 + 120) + 8 * v194);
  }
  double v206 = 0.0;
  double v207 = 0.0;
  if (v170 != 0xFFFFFFFFLL) {
    double v207 = *(double *)(*v511 + 8 * v170);
  }
  if (v194 != 0xFFFFFFFFLL) {
    double v206 = *(double *)(*v511 + 8 * v194);
  }
  if (v207 >= v206) {
    double v208 = v207;
  }
  else {
    double v208 = v206;
  }
  std::__function::__value_func<unsigned int ()(unsigned int const&)>::~__value_func[abi:nn180100](v553);
  if (v208 > 0.000001) {
    int v210 = 1;
  }
  else {
    int v210 = 2;
  }
  *(_DWORD *)(a1 + 352) = v210;
  if (v208 <= 0.000001)
  {
    unsigned int v211 = *(float64x2_t **)(a1 + 72);
    v209.f64[0] = v211[3].f64[0];
    float64x2_t v212 = vdivq_f64(v211[2], v209);
    int64x2_t v213 = (int64x2_t)vdivq_f64(v211[1], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v209.f64[0], 0));
    int64x2_t v215 = (int64x2_t)vextq_s8((int8x16_t)v213, (int8x16_t)v213, 8uLL);
    double v214 = fabs(v212.f64[0]);
    *(int64x2_t *)v535 = v215;
    *(double *)v215.i64 = -*(double *)v215.i64;
    float64x2_t v525 = v212;
    float64x2_t v216 = 0uLL;
    if (v214 <= 2.22044605e-16)
    {
      float64x2_t v516 = 0uLL;
      float64x2_t v530 = (float64x2_t)vzip1q_s64(v215, v213);
    }
    else
    {
      v216.f64[1] = -v212.f64[0];
      float64x2_t v530 = v216;
      float64x2_t v516 = (float64x2_t)vdupq_laneq_s64(v213, 1);
    }
    float64_t v540 = *(double *)v213.i64;
    if (v214 <= 2.22044605e-16)
    {
      float64x2_t v519 = (float64x2_t)vzip1q_s64(v215, v213);
      float64x2_t v522 = 0u;
    }
    else
    {
      v219.f64[0] = 0.0;
      v219.f64[1] = -v212.f64[0];
      float64x2_t v519 = v219;
      float64x2_t v522 = (float64x2_t)vdupq_laneq_s64(v213, 1);
    }
    v553[0] = 0;
    v553[1] = 0;
    v554.i64[0] = 0;
    _ZNSt3__16vectorIDv2_dNS_9allocatorIS1_EEE7reserveEm(v553, (uint64_t)(*(void *)(a1 + 104) - *(void *)(a1 + 96)) >> 5);
    int v406 = *(float64x2_t **)(a1 + 96);
    v407 = *(float64x2_t **)(a1 + 104);
    if (v406 == v407)
    {
      unsigned int v420 = (char *)v553[1];
    }
    else
    {
      float64x2_t v408 = vmulq_f64(v516, v516);
      v408.f64[0] = 1.0 / sqrt(v408.f64[0] + vaddvq_f64(vmulq_f64(v530, v530)));
      float64x2_t v419 = vmulq_n_f64(v530, v408.f64[0]);
      float64x2_t v409 = vmulq_f64(v516, v408);
      v408.f64[0] = v525.f64[0];
      v410.f64[0] = v540;
      v408.f64[1] = v540;
      *(std::vector<int> **)&v410.f64[1] = v535[0];
      float64x2_t v411 = vmulq_f64(v519, v519);
      v411.f64[0] = 1.0 / sqrt(vmulq_f64(v522, v522).f64[0] + vaddvq_f64(v411));
      float64x2_t v412 = vmulq_n_f64(v519, v411.f64[0]);
      float64x2_t v413 = vmulq_f64(v522, v411);
      float64x2_t v414 = vmlaq_f64(vmulq_laneq_f64(vnegq_f64(v525), v412, 1), v413, *(float64x2_t *)v535);
      v413.f64[1] = v412.f64[0];
      float64x2_t v415 = vmlaq_f64(vmulq_f64(v413, vnegq_f64(v410)), v412, v408);
      float64x2_t v416 = vmulq_f64(v415, v415);
      v412.f64[0] = vmulq_f64(v414, v414).f64[0];
      v414.f64[1] = v415.f64[0];
      v416.f64[0] = 1.0 / sqrt(v416.f64[1] + v412.f64[0] + v416.f64[0]);
      float64x2_t v417 = vmulq_laneq_f64(v416, v415, 1);
      float64x2_t v418 = vmulq_n_f64(v414, v416.f64[0]);
      *(void *)&v419.f64[1] = vextq_s8((int8x16_t)v419, (int8x16_t)v419, 8uLL).u64[0];
      unsigned int v420 = (char *)v553[1];
      float64x2_t v532 = v409;
      *(float64x2_t *)v537 = v419;
      float64x2_t v523 = v418;
      float64x2_t v527 = v417;
      do
      {
        float64x2_t v421 = v406[1];
        *(double *)&long long v422 = vmulq_f64(v409, v421).f64[0] + vaddvq_f64(vmulq_f64(v419, *v406));
        *((double *)&v422 + 1) = vmulq_f64(v417, v421).f64[0] + vaddvq_f64(vmulq_f64(v418, *v406));
        if ((unint64_t)v420 >= v554.i64[0])
        {
          uint64_t v423 = (v420 - (char *)v553[0]) >> 4;
          if ((unint64_t)(v423 + 1) >> 60) {
            goto LABEL_423;
          }
          unint64_t v424 = (uint64_t)(v554.i64[0] - (unint64_t)v553[0]) >> 3;
          if (v424 <= v423 + 1) {
            unint64_t v424 = v423 + 1;
          }
          if (v554.i64[0] - (unint64_t)v553[0] >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v425 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v425 = v424;
          }
          if (v425)
          {
            *(_OWORD *)v542 = v422;
            std::vector<int>::pointer v426 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v554, v425);
            long long v422 = *(_OWORD *)v542;
          }
          else
          {
            std::vector<int>::pointer v426 = 0;
          }
          float32x4_t v427 = &v426[16 * v423];
          *(_OWORD *)float32x4_t v427 = v422;
          unsigned int v420 = v427 + 16;
          uint64_t v429 = (char *)v553[0];
          uint64_t v428 = (char *)v553[1];
          if (v553[1] != v553[0])
          {
            do
            {
              long long v430 = *((_OWORD *)v428 - 1);
              v428 -= 16;
              *((_OWORD *)v427 - 1) = v430;
              v427 -= 16;
            }
            while (v428 != v429);
            uint64_t v428 = (char *)v553[0];
          }
          v553[0] = v427;
          v553[1] = v420;
          v554.i64[0] = (uint64_t)&v426[16 * v425];
          if (v428) {
            operator delete(v428);
          }
          float64x2_t v409 = v532;
          float64x2_t v419 = *(float64x2_t *)v537;
          float64x2_t v418 = v523;
          float64x2_t v417 = v527;
        }
        else
        {
          *(_OWORD *)unsigned int v420 = v422;
          v420 += 16;
        }
        v553[1] = v420;
        v406 += 2;
      }
      while (v406 != v407);
    }
    long long v562 = 0uLL;
    *(void *)&long long v563 = 0;
    geom::convex_hull_2<double>((v420 - (char *)v553[0]) >> 4, (uint64_t)v553[0], (std::vector<int> *)&v562);
    *(void *)(a1 + 80) = *(void *)(a1 + 72);
    *(void *)(a1 + 32) = *(void *)(a1 + 24);
    *(void *)(a1 + 56) = *(void *)(a1 + 48);
    *(void *)(a1 + 8) = *(void *)a1;
    uint64_t v433 = (_DWORD *)*((void *)&v562 + 1);
    if (*((void *)&v562 + 1) == (void)v562)
    {
      unsigned int v445 = 0;
      uint64_t v448 = 0;
      unsigned int v463 = 0;
      unsigned int v462 = 0;
      unint64_t v452 = (uint64_t)(*((void *)&v562 + 1) - v562) >> 2;
      uint64_t v446 = *(void *)(a1 + 48);
      float64x2_t v440 = 0uLL;
      float64x2_t v441 = 0uLL;
      float64x2_t v437 = 0uLL;
      uint64_t v464 = v431;
      float64x2_t v438 = 0uLL;
      uint64_t v442 = v432;
    }
    else
    {
      uint64_t v434 = 0;
      unsigned int v524 = 0;
      unsigned int v521 = 0;
      unsigned int v435 = 0;
      unsigned int v436 = 0;
      float64x2_t v437 = 0uLL;
      float64x2_t v438 = 0uLL;
      unsigned int v439 = 1;
      float64x2_t v440 = 0uLL;
      float64x2_t v441 = 0uLL;
      uint64_t v442 = v432;
      do
      {
        float64x2_t v528 = v441;
        float64x2_t v533 = v440;
        *(float64x2_t *)v538 = v438;
        *(float64x2_t *)v543 = v437;
        unsigned int v445 = v444;
        uint64_t v446 = *(void *)(a1 + 48);
        if (v439 == 1)
        {
          uint64_t v447 = *(void *)(a1 + 72);
          *(_DWORD *)(v447 + 112 * v431) = v443;
          *(_DWORD *)(v447 + 112 * v432) = v444;
          unsigned int v521 = v444;
          unsigned int v524 = v443;
        }
        else
        {
          *(_DWORD *)(v446 + 16 * v435 + 8) = v443;
          *(_DWORD *)(v446 + 16 * v444 + 8) = v436;
        }
        uint64_t v448 = v443;
        *(_DWORD *)(v446 + 16 * v443) = v431;
        *(_DWORD *)(v446 + 16 * v444) = v432;
        uint64_t v449 = v446 + 16 * v443;
        *(_DWORD *)(v449 + 4) = v444;
        uint64_t v450 = v446 + 16 * v444;
        *(_DWORD *)(v450 + 4) = v443;
        uint64_t v433 = (_DWORD *)v562;
        *(_DWORD *)(v449 + 12) = *(_DWORD *)(v562 + 4 * v434);
        uint64_t v451 = v439;
        unint64_t v452 = (uint64_t)(*((void *)&v562 + 1) - (void)v433) >> 2;
        unint64_t v453 = v439 % v452;
        *(_DWORD *)(v450 + 12) = v433[v453];
        uint64_t v454 = *(void *)(a1 + 96);
        uint64_t v455 = (float64x2_t *)(v454 + 32 * v433[v434]);
        float64x2_t v456 = *v455;
        float64x2_t v457 = v455[1];
        float64x2_t v438 = vaddq_f64(*(float64x2_t *)v538, v457);
        v458 = (float64x2_t *)(v454 + 32 * v433[v453]);
        float64x2_t v459 = v458[1];
        *(void *)&v460.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v457), *v458, 1), v459, v456, 1);
        v459.f64[1] = v458->f64[0];
        float64x2_t v437 = vaddq_f64(*(float64x2_t *)v543, v456);
        v457.f64[1] = v456.f64[0];
        int64x2_t v461 = (int64x2_t)vmlaq_f64(vmulq_f64(v459, vnegq_f64(v456)), *v458, v457);
        *(void *)&v460.f64[1] = v461.i64[0];
        float64x2_t v440 = vaddq_f64(v533, v460);
        BOOL v318 = v452 > v439++;
        float64x2_t v441 = vaddq_f64(v528, (float64x2_t)vdupq_laneq_s64(v461, 1));
        uint64_t v434 = v451;
        unsigned int v435 = v443;
        unsigned int v436 = v445;
      }
      while (v318);
      unsigned int v462 = v524;
      unsigned int v463 = v521;
      uint64_t v464 = v431;
    }
    *(_DWORD *)(v446 + 16 * v463 + 8) = v445;
    *(_DWORD *)(v446 + 16 * v448 + 8) = v462;
    uint64_t v497 = *(void *)(a1 + 72) + 112 * v464;
    *(float64x2_t *)(v497 + 16) = v440;
    *(float64x2_t *)(v497 + 32) = v441;
    v498 = (float64x2_t *)(*(void *)(a1 + 72) + 112 * v442);
    v498[1] = vnegq_f64(v440);
    v498[2] = vnegq_f64(v441);
    double v499 = sqrt(vmulq_f64(v441, v441).f64[0] + vaddvq_f64(vmulq_f64(v440, v440)));
    uint64_t v500 = *(void *)(a1 + 72);
    uint64_t v501 = v500 + 112 * v442;
    *(double *)(v501 + 48) = v499;
    uint64_t v502 = v500 + 112 * v464;
    *(double *)(v502 + 48) = v499;
    *(unsigned char *)(v501 + 56) = v499 <= 2.22044605e-16;
    *(unsigned char *)(v502 + 56) = v499 <= 2.22044605e-16;
    *(float64x2_t *)(v502 + 64) = v437;
    *(float64x2_t *)(v502 + 80) = v438;
    uint64_t v503 = *(void *)(a1 + 72) + 112 * v442;
    *(float64x2_t *)(v503 + 64) = v437;
    *(float64x2_t *)(v503 + 80) = v438;
    uint64_t v504 = *(void *)(a1 + 72);
    *(_DWORD *)(v504 + 112 * v442 + 96) = v452;
    *(_DWORD *)(v504 + 112 * v464 + 96) = v452;
    if (v433)
    {
      *((void *)&v562 + 1) = v433;
      operator delete(v433);
    }
    v496 = v553[0];
    if (!v553[0]) {
      return 0.0;
    }
    v553[1] = v553[0];
    goto LABEL_420;
  }
  v550 = 0;
  v551 = 0;
  v552 = 0;
  memset(&__p, 0, sizeof(__p));
  LODWORD(v553[0]) = 0;
  v553[1] = 0;
  int8x16_t v554 = 0uLL;
  v555.i64[0] = 0x3FE0000000000000;
  LODWORD(v553[0]) = 0;
  memset(&v547, 0, sizeof(v547));
  v544 = 0;
  v545 = 0;
  v546 = 0;
  uint64_t v218 = *(void *)(a1 + 144);
  v551 = (char *)v550;
  __p.__end_ = __p.__begin_;
  v509 = (std::vector<int> *)(a1 + 144);
  if (*(void *)(a1 + 152) - v218 != 24)
  {
    v536 = (std::vector<int> *)(a1 + 368);
    v531 = (int **)(a1 + 384);
    v541 = (std::vector<int> *)(a1 + 512);
    v526 = (void **)(a1 + 392);
    uint64_t v520 = a1 + 408;
    unsigned int v508 = 3;
    while (1)
    {
      unsigned int v220 = *(_DWORD *)(v218 + 24);
      uint64_t v221 = *(unsigned int *)(v218 + 32);
      unsigned int v548 = v221;
      unint64_t v222 = (long long *)(*(void *)(a1 + 96) + 32 * v221);
      long long v223 = v222[1];
      long long v562 = *v222;
      long long v563 = v223;
      uint64_t v224 = *(void *)(a1 + 72) + 112 * v220;
      v217.f64[0] = *(float64_t *)(v224 + 48);
      float64x2_t v225 = vdivq_f64(*(float64x2_t *)(v224 + 32), v217);
      float64x2_t v560 = vdivq_f64(*(float64x2_t *)(v224 + 16), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v217.f64[0], 0));
      float64x2_t v561 = v225;
      v226 = operator new(0x20uLL);
      void *v226 = &unk_26EA03FC0;
      v226[1] = a1;
      v226[2] = &v562;
      v226[3] = &v560;
      v559 = v226;
      int v227 = *(_DWORD **)(a1 + 368);
      *(void *)(a1 + 376) = v227;
      unint64_t v228 = *(void *)(a1 + 384);
      if ((unint64_t)v227 >= v228)
      {
        uint64_t v230 = v228 - (void)v227;
        uint64_t v231 = v230 >> 1;
        if ((unint64_t)(v230 >> 1) <= 1) {
          uint64_t v231 = 1;
        }
        if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v232 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v232 = v231;
        }
        v234 = std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v531, v232);
        v235 = *(char **)(a1 + 368);
        unsigned int v236 = *(char **)(a1 + 376);
        _DWORD *v234 = *(_DWORD *)v224;
        std::vector<int>::pointer v229 = v234 + 1;
        int v237 = v234;
        while (v236 != v235)
        {
          int v238 = *((_DWORD *)v236 - 1);
          v236 -= 4;
          *--int v237 = v238;
        }
        *(void *)(a1 + 368) = v237;
        *(void *)(a1 + 376) = v229;
        *(void *)(a1 + 384) = &v234[v233];
        if (v235) {
          operator delete(v235);
        }
      }
      else
      {
        *int v227 = *(_DWORD *)v224;
        std::vector<int>::pointer v229 = v227 + 1;
      }
      for (*(void *)(a1 + 376) = v229; *(_DWORD **)(a1 + 368) != v229; std::vector<int>::pointer v229 = *(_DWORD **)(a1 + 376))
      {
        uint64_t v239 = *(v229 - 1);
        unsigned int v240 = *(_DWORD *)(*(void *)(a1 + 48) + 16 * v239);
        *(void *)(a1 + 376) = v229 - 1;
        if (*(_DWORD *)(*(void *)(a1 + 472)
                       + 4
        {
          std::vector<unsigned int>::pointer end = __p.__end_;
          if (__p.__end_ >= __p.__end_cap_.__value_)
          {
            std::vector<unsigned int>::pointer v243 = __p.__begin_;
            int64_t v244 = __p.__end_ - __p.__begin_;
            unint64_t v245 = v244 + 1;
            if ((unint64_t)(v244 + 1) >> 62) {
              goto LABEL_423;
            }
            int64_t v246 = (char *)__p.__end_cap_.__value_ - (char *)__p.__begin_;
            if (((char *)__p.__end_cap_.__value_ - (char *)__p.__begin_) >> 1 > v245) {
              unint64_t v245 = v246 >> 1;
            }
            if ((unint64_t)v246 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v247 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v247 = v245;
            }
            if (v247)
            {
              float32x4_t v248 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&__p.__end_cap_, v247);
              std::vector<unsigned int>::pointer v243 = __p.__begin_;
              std::vector<unsigned int>::pointer end = __p.__end_;
            }
            else
            {
              float32x4_t v248 = 0;
            }
            float32x4_t v249 = (unsigned int *)&v248[4 * v244];
            *float32x4_t v249 = v240;
            uint64_t v242 = v249 + 1;
            while (end != v243)
            {
              unsigned int v250 = *--end;
              *--float32x4_t v249 = v250;
            }
            __p.__begin_ = v249;
            __p.__end_ = v242;
            __p.__end_cap_.__value_ = (unsigned int *)&v248[4 * v247];
            if (v243) {
              operator delete(v243);
            }
          }
          else
          {
            *__p.__end_ = v240;
            uint64_t v242 = end + 1;
          }
          __p.__end_ = v242;
        }
        uint64_t v251 = v239;
        do
        {
          uint64_t v252 = *(void *)(a1 + 48);
          uint64_t v253 = v252 + 16 * v251;
          int32x2_t v254 = (unsigned int *)(v253 + 4);
          unsigned int v255 = *(_DWORD *)(v252 + 16 * *(unsigned int *)(v253 + 4));
          if (*(_DWORD *)(*(void *)(a1 + 472)
                         + 4
          {
LABEL_183:
            int v286 = 0;
            uint64_t v251 = *(unsigned int *)(v253 + 8);
            continue;
          }
          char v256 = std::function<BOOL ()>::operator()((uint64_t)&v558, v255);
          if (v256)
          {
            std::vector<int>::pointer v258 = *(std::vector<int>::pointer *)(a1 + 376);
            float v257 = *(int **)(a1 + 384);
            if (v258 >= v257)
            {
              std::vector<int>::pointer v263 = v536->__begin_;
              uint64_t v264 = v258 - v536->__begin_;
              unint64_t v265 = v264 + 1;
              if ((unint64_t)(v264 + 1) >> 62) {
                goto LABEL_423;
              }
              uint64_t v266 = (char *)v257 - (char *)v263;
              if (v266 >> 1 > v265) {
                unint64_t v265 = v266 >> 1;
              }
              if ((unint64_t)v266 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v267 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v267 = v265;
              }
              if (v267)
              {
                unint64_t v268 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v531, v267);
                std::vector<int>::pointer v263 = *(std::vector<int>::pointer *)(a1 + 368);
                std::vector<int>::pointer v258 = *(std::vector<int>::pointer *)(a1 + 376);
              }
              else
              {
                unint64_t v268 = 0;
              }
              v275 = &v268[4 * v264];
              *(_DWORD *)v275 = v251;
              std::vector<int>::pointer v259 = (unsigned int *)(v275 + 4);
              while (v258 != v263)
              {
                int v276 = *--v258;
                *((_DWORD *)v275 - 1) = v276;
                v275 -= 4;
              }
              float v257 = (int *)&v268[4 * v267];
              *(void *)(a1 + 368) = v275;
              *(void *)(a1 + 376) = v259;
              *(void *)(a1 + 384) = v257;
              if (v263)
              {
                operator delete(v263);
                float v257 = *v531;
              }
            }
            else
            {
              char *v258 = v251;
              std::vector<int>::pointer v259 = (unsigned int *)(v258 + 1);
            }
            *(void *)(a1 + 376) = v259;
            if (v259 >= (unsigned int *)v257)
            {
              std::vector<int>::pointer v278 = v536->__begin_;
              uint64_t v279 = ((char *)v259 - (char *)v536->__begin_) >> 2;
              unint64_t v280 = v279 + 1;
              if ((unint64_t)(v279 + 1) >> 62) {
                goto LABEL_423;
              }
              uint64_t v281 = (char *)v257 - (char *)v278;
              if (v281 >> 1 > v280) {
                unint64_t v280 = v281 >> 1;
              }
              if ((unint64_t)v281 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v282 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v282 = v280;
              }
              if (v282)
              {
                unsigned int v283 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v531, v282);
                std::vector<int>::pointer v278 = *(std::vector<int>::pointer *)(a1 + 368);
                std::vector<int>::pointer v259 = *(unsigned int **)(a1 + 376);
              }
              else
              {
                unsigned int v283 = 0;
              }
              v284 = (unsigned int *)&v283[4 * v279];
              unsigned int *v284 = *v254;
              std::vector<int>::pointer v277 = v284 + 1;
              while (v259 != (unsigned int *)v278)
              {
                unsigned int v285 = *--v259;
                *--v284 = v285;
              }
              *(void *)(a1 + 368) = v284;
              *(void *)(a1 + 376) = v277;
              *(void *)(a1 + 384) = &v283[4 * v282];
              if (v278) {
                operator delete(v278);
              }
            }
            else
            {
              *std::vector<int>::pointer v259 = *v254;
              std::vector<int>::pointer v277 = v259 + 1;
            }
            *(void *)(a1 + 376) = v277;
            int v286 = 4;
            if ((v256 & 1) == 0) {
              goto LABEL_183;
            }
          }
          else
          {
            unsigned int v260 = *v254;
            uint64_t v261 = v551;
            if (v551 >= v552)
            {
              uint64_t v269 = (char *)v550;
              uint64_t v270 = (v551 - (unsigned char *)v550) >> 2;
              unint64_t v271 = v270 + 1;
              if ((unint64_t)(v270 + 1) >> 62) {
                goto LABEL_423;
              }
              uint64_t v272 = v552 - (unsigned char *)v550;
              if ((v552 - (unsigned char *)v550) >> 1 > v271) {
                unint64_t v271 = v272 >> 1;
              }
              if ((unint64_t)v272 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v273 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v273 = v271;
              }
              if (v273)
              {
                v274 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v552, v273);
                uint64_t v269 = (char *)v550;
                uint64_t v261 = v551;
                unsigned int v260 = *v254;
              }
              else
              {
                v274 = 0;
              }
              v287 = (unsigned int *)&v274[4 * v270];
              unsigned int *v287 = v260;
              int v262 = (char *)(v287 + 1);
              while (v261 != v269)
              {
                unsigned int v288 = *((_DWORD *)v261 - 1);
                v261 -= 4;
                *--v287 = v288;
              }
              v550 = v287;
              v551 = v262;
              v552 = &v274[4 * v273];
              if (v269) {
                operator delete(v269);
              }
            }
            else
            {
              *(_DWORD *)v551 = v260;
              int v262 = v261 + 4;
            }
            v551 = v262;
            int v286 = 0;
            if ((v256 & 1) == 0) {
              goto LABEL_183;
            }
          }
        }
        while (!v286 && v251 != v239);
      }
      *(_DWORD *)(a1 + 464) = 0;
      *(void *)(a1 + 480) = *(void *)(a1 + 472);
      *(_DWORD *)(a1 + 504) = 0;
      *(void *)(a1 + 520) = *(void *)(a1 + 512);
      *(void *)(a1 + 376) = *(void *)(a1 + 368);
      std::__function::__value_func<BOOL ()>::~__value_func[abi:nn180100](&v558);
      if (v508 >= a2) {
        goto LABEL_308;
      }
      uint64_t v289 = *(void *)(a1 + 72);
      v290 = (geom::partitioned_set *)(a1 + 200);
      if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((*(void *)(a1 + 80) - v289) >> 4)
                            - ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 2)) < 3
        || (uint64_t v291 = (unsigned int *)v550, v550 == v551))
      {
LABEL_207:
        uint64_t v319 = (char *)v544;
        v545 = (char *)v544;
        std::vector<unsigned int>::pointer v320 = __p.__begin_;
        std::vector<unsigned int>::pointer v321 = __p.__end_;
        while (v320 != v321)
        {
          uint64_t v322 = v289 + 112 * *v320;
          int v325 = *(_DWORD *)(v322 + 100);
          unint64_t v324 = (int *)(v322 + 100);
          int v323 = v325;
          if (v325 != -1)
          {
            if (v319 >= v546)
            {
              float v327 = (char *)v544;
              uint64_t v328 = (v319 - (unsigned char *)v544) >> 2;
              unint64_t v329 = v328 + 1;
              if ((unint64_t)(v328 + 1) >> 62) {
                goto LABEL_423;
              }
              uint64_t v330 = v546 - (unsigned char *)v544;
              if ((v546 - (unsigned char *)v544) >> 1 > v329) {
                unint64_t v329 = v330 >> 1;
              }
              if ((unint64_t)v330 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v331 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v331 = v329;
              }
              if (v331)
              {
                unint64_t v332 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v546, v331);
                float v327 = (char *)v544;
                uint64_t v319 = v545;
                int v323 = *v324;
              }
              else
              {
                unint64_t v332 = 0;
              }
              uint64_t v333 = &v332[4 * v328];
              *(_DWORD *)uint64_t v333 = v323;
              unsigned int v326 = v333 + 4;
              while (v319 != v327)
              {
                int v334 = *((_DWORD *)v319 - 1);
                v319 -= 4;
                *((_DWORD *)v333 - 1) = v334;
                v333 -= 4;
              }
              v544 = v333;
              v545 = v326;
              v546 = &v332[4 * v331];
              if (v327) {
                operator delete(v327);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v319 = v323;
              unsigned int v326 = v319 + 4;
            }
            v545 = v326;
            uint64_t v289 = *(void *)(a1 + 72);
            *(_DWORD *)(v289 + 112 * *v320 + 100) = -1;
            uint64_t v319 = v326;
          }
          ++v320;
        }
        LODWORD(v553[0]) = 0;
        v554.i64[0] = (uint64_t)v553[1];
        uint64_t v335 = (unsigned int *)v550;
        unsigned int v336 = (unsigned int *)v551;
        while (v335 != v336)
        {
          uint64_t v337 = *v335;
          if (*(_DWORD *)(*(void *)(a1 + 48) + 16 * v337) != -1) {
          ++v335;
          }
        }
        std::vector<int>::pointer v338 = v547.__begin_;
        std::vector<int>::pointer v339 = v547.__end_;
        while (v338 != v339)
        {
          uint64_t v340 = *v338;
          if (*(_DWORD *)(*(void *)(a1 + 48) + 16 * v340) != -1) {
          ++v338;
          }
        }
        LODWORD(v558.__begin_) = 0;
        LODWORD(v558.__begin_) = geom::partitioned_set::merge(v507, (unsigned int *)v544, (v545 - (unsigned char *)v544) >> 2);
        __p.__end_ = __p.__begin_;
        _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)v526, 0);
        _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm(v526, ((char *)__p.__end_ - (char *)__p.__begin_) >> 1);
        std::vector<unsigned int>::pointer v342 = __p.__begin_;
        if (__p.__end_ == __p.__begin_)
        {
          int64_t v378 = 0;
        }
        else
        {
          uint64_t v343 = 0;
          unsigned int v344 = 0;
          float32x2_t v345 = *(float64x2_t **)(a1 + 400);
          do
          {
            unsigned int v346 = v342[v343];
            uint64_t v347 = *(void *)(a1 + 72);
            uint64_t v348 = v347 + 112 * v346;
            LODWORD(v341.f64[0]) = *(_DWORD *)(v348 + 96);
            v341.f64[0] = (double)*(unint64_t *)&v341.f64[0];
            float64x2_t v349 = vdivq_f64(*(float64x2_t *)(v348 + 80), v341);
            float64x2_t v350 = vdivq_f64(*(float64x2_t *)(v348 + 64), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v341.f64[0], 0));
            unint64_t v351 = vextq_s8((int8x16_t)v350, (int8x16_t)v350, 8uLL).u64[0];
            unint64_t v352 = *(void *)(a1 + 408);
            if ((unint64_t)v345 >= v352)
            {
              uint64_t v354 = ((char *)v345 - (unsigned char *)*v526) >> 5;
              if ((unint64_t)(v354 + 1) >> 59) {
                goto LABEL_423;
              }
              uint64_t v355 = v352 - (void)*v526;
              uint64_t v356 = v355 >> 4;
              if (v355 >> 4 <= (unint64_t)(v354 + 1)) {
                uint64_t v356 = v354 + 1;
              }
              if ((unint64_t)v355 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v357 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v357 = v356;
              }
              if (v357)
              {
                float64x2_t v514 = v349;
                float64_t v517 = v350.f64[0];
                unint64_t v512 = v351;
                int32x2_t v358 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v520, v357);
                unint64_t v351 = v512;
                float64x2_t v349 = v514;
                v350.f64[0] = v517;
              }
              else
              {
                int32x2_t v358 = 0;
              }
              *(void *)&v350.f64[1] = v351;
              uint64_t v359 = (float64x2_t *)&v358[32 * v354];
              *uint64_t v359 = v350;
              v359[1] = v349;
              unint64_t v361 = *(float64x2_t **)(a1 + 392);
              unint64_t v360 = *(float64x2_t **)(a1 + 400);
              v362 = v359;
              if (v360 != v361)
              {
                do
                {
                  float64x2_t v350 = v360[-2];
                  float64x2_t v363 = v360[-1];
                  v360 -= 2;
                  v362[-2] = v350;
                  v362[-1] = v363;
                  v362 -= 2;
                }
                while (v360 != v361);
                unint64_t v360 = (float64x2_t *)*v526;
              }
              int32x4_t v353 = v359 + 2;
              *(void *)(a1 + 392) = v362;
              *(void *)(a1 + 400) = v359 + 2;
              *(void *)(a1 + 408) = &v358[32 * v357];
              if (v360) {
                operator delete(v360);
              }
            }
            else
            {
              *(void *)&v350.f64[1] = v351;
              *float32x2_t v345 = v350;
              v345[1] = v349;
              int32x4_t v353 = v345 + 2;
            }
            *(void *)(a1 + 400) = v353;
            v364 = (float64x2_t *)(v347 + 112 * v346);
            v350.f64[0] = v364[3].f64[0];
            float64x2_t v365 = vdivq_f64(v364[2], v350);
            float64x2_t v341 = vdivq_f64(v364[1], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v350.f64[0], 0));
            unint64_t v366 = vextq_s8((int8x16_t)v341, (int8x16_t)v341, 8uLL).u64[0];
            unint64_t v367 = *(void *)(a1 + 408);
            if ((unint64_t)v353 >= v367)
            {
              uint64_t v368 = ((char *)v353 - (unsigned char *)*v526) >> 5;
              if ((unint64_t)(v368 + 1) >> 59) {
                goto LABEL_423;
              }
              uint64_t v369 = v367 - (void)*v526;
              uint64_t v370 = v369 >> 4;
              if (v369 >> 4 <= (unint64_t)(v368 + 1)) {
                uint64_t v370 = v368 + 1;
              }
              if ((unint64_t)v369 >= 0x7FFFFFFFFFFFFFE0) {
                unint64_t v371 = 0x7FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v371 = v370;
              }
              if (v371)
              {
                float64x2_t v515 = v365;
                float64_t v518 = v341.f64[0];
                unint64_t v513 = v366;
                unsigned int v372 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v520, v371);
                unint64_t v366 = v513;
                float64x2_t v365 = v515;
                v341.f64[0] = v518;
              }
              else
              {
                unsigned int v372 = 0;
              }
              *(void *)&v341.f64[1] = v366;
              float32x4_t v373 = (float64x2_t *)&v372[32 * v368];
              *float32x4_t v373 = v341;
              v373[1] = v365;
              unsigned int v375 = *(float64x2_t **)(a1 + 392);
              float32x4_t v374 = *(float64x2_t **)(a1 + 400);
              uint64_t v376 = v373;
              if (v374 != v375)
              {
                do
                {
                  float64x2_t v341 = v374[-2];
                  float64x2_t v377 = v374[-1];
                  v374 -= 2;
                  v376[-2] = v341;
                  v376[-1] = v377;
                  v376 -= 2;
                }
                while (v374 != v375);
                float32x4_t v374 = (float64x2_t *)*v526;
              }
              float32x2_t v345 = v373 + 2;
              *(void *)(a1 + 392) = v376;
              *(void *)(a1 + 400) = v373 + 2;
              *(void *)(a1 + 408) = &v372[32 * v371];
              if (v374) {
                operator delete(v374);
              }
            }
            else
            {
              *(void *)&v341.f64[1] = v366;
              *int32x4_t v353 = v341;
              v353[1] = v365;
              float32x2_t v345 = v353 + 2;
            }
            *(void *)(a1 + 400) = v345;
            std::vector<unsigned int>::pointer v342 = __p.__begin_;
            uint64_t v343 = ++v344;
          }
          while (v344 < (unint64_t)(__p.__end_ - __p.__begin_));
          int64_t v378 = ((char *)__p.__end_ - (char *)__p.__begin_) << 30;
          v290 = (geom::partitioned_set *)(a1 + 200);
        }
        uint64_t v379 = v548;
        unsigned int v380 = *(_DWORD *)(a1 + 356);
        if (v380 == -1) {
          *(_DWORD *)(a1 + 356) = geom::partitioned_set::extract(v290, v548);
        }
        else {
          geom::partitioned_set::extract(v290, v548, v380);
        }
        *(void *)&long long v562 = &unk_26EA04040;
        *((void *)&v562 + 1) = a1;
        *(void *)&long long v563 = v378 | v379;
        *((void *)&v563 + 1) = &v562;
        geom::partitioned_set::split((uint64_t *)v290, &v558, ((unint64_t)((char *)__p.__end_ - (char *)__p.__begin_) >> 2) + 1, v536, (uint64_t)&v562);
        std::__function::__value_func<unsigned int ()>::~__value_func[abi:nn180100](&v562);
        std::vector<unsigned int>::pointer v381 = __p.__begin_;
        if (__p.__end_ != __p.__begin_)
        {
          uint64_t v382 = 0;
          unint64_t v383 = __p.__end_ - __p.__begin_;
          uint64_t v384 = *(void *)(a1 + 72);
          uint64_t v385 = *(void *)(a1 + 368);
          do
          {
            *(_DWORD *)(v384 + 112 * v381[v382] + 100) = *(_DWORD *)(v385 + 4 * v382);
            ++v382;
          }
          while (v383 > v382);
        }
        LODWORD(v560.f64[0]) = *(_DWORD *)(a1 + 356);
        HIDWORD(v560.f64[0]) = *(_DWORD *)(*(void *)(a1 + 376) - 4);
        int v386 = geom::partitioned_set::merge(v290, (unsigned int *)&v560, 2);
        *(_DWORD *)(*(void *)(a1 + 376) - 4) = v386;
        *(_DWORD *)(a1 + 356) = v386;
        unint64_t v388 = __p.__begin_;
        std::vector<unsigned int>::pointer v387 = __p.__end_;
        while (v388 != v387)
        {
          unint64_t v389 = *(unsigned int *)(*(void *)(a1 + 72) + 112 * *v388 + 100);
          uint64_t v390 = *(void *)(a1 + 272);
          if (v389 < (*(void *)(a1 + 280) - v390) >> 3)
          {
            unsigned int v391 = *(_DWORD *)(v390 + 8 * v389);
            if (v391 != -1)
            {
              double v392 = *(double *)(a1 + 544);
              uint64_t v393 = *v511;
              unsigned int v394 = -1;
              do
              {
                if (*(double *)(v393 + 8 * v391) > v392)
                {
                  unsigned int v394 = v391;
                  double v392 = *(double *)(v393 + 8 * v391);
                }
                unsigned int v391 = *(_DWORD *)(*(void *)v290 + 4 * v391);
              }
              while (v391 != -1);
              if (v394 != -1)
              {
                LODWORD(v562) = v394;
                *((void *)&v562 + 1) = *(void *)(v393 + 8 * v394);
              }
            }
          }
          ++v388;
        }
        goto LABEL_307;
      }
      uint64_t v292 = *(void *)(a1 + 48);
      uint64_t v293 = *(void *)(a1 + 96);
      unint64_t v294 = (float64x2_t *)(v293 + 32 * v548);
      float64x2_t v295 = *v294;
      float64x2_t v296 = v294[1];
      float64x2_t v297 = (float64x2_t)vextq_s8((int8x16_t)v295, (int8x16_t)v295, 8uLL);
      v298.i64[0] = *(void *)&v294[1].f64[0];
      v298.i64[1] = *(void *)&v294->f64[0];
      unint64_t v299 = vextq_s8(v298, v298, 8uLL).u64[0];
      float64x2_t v300 = vnegq_f64(v296);
      int8x16_t v301 = (int8x16_t)vnegq_f64(*v294);
      unint64_t v302 = vextq_s8(v301, v301, 8uLL).u64[0];
      while (1)
      {
        uint64_t v303 = v292 + 16 * *v291;
        uint64_t v304 = *(unsigned int *)(v303 + 8);
        uint64_t v305 = (float64x2_t *)(v293 + 32 * *(unsigned int *)(v303 + 12));
        uint64_t v306 = (float64x2_t *)(v293 + 32 * *(unsigned int *)(v292 + 16 * v304 + 12));
        float64x2_t v307 = v306[1];
        float64x2_t v308 = v305[1];
        v309.f64[0] = v306[1].f64[0];
        v309.f64[1] = v306->f64[0];
        v310.f64[0] = v305[1].f64[0];
        v310.f64[1] = v305->f64[0];
        *(void *)&v311.f64[0] = v298.i64[0];
        *(void *)&v311.f64[1] = v299;
        v312.f64[0] = v295.f64[0];
        v312.f64[1] = v297.f64[0];
        *(void *)&v313.f64[0] = v301.i64[0];
        *(void *)&v313.f64[1] = v302;
        float64x2_t v314 = vaddq_f64(vmlaq_f64(vmulq_f64(v309, v313), *v306, v311), vaddq_f64(vmlaq_f64(vmulq_f64(v310, vnegq_f64(*v306)), *v305, v309), vmlaq_f64(vmulq_f64(v311, vnegq_f64(*v305)), v312, v310)));
        float64x2_t v315 = vaddq_f64(vmlaq_f64(vmulq_laneq_f64(v300, *v306, 1), v307, v297), vaddq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v307), *v305, 1), v308, *v306, 1), vmlaq_laneq_f64(vmulq_f64(v297, vnegq_f64(v308)), v296, *v305, 1)));
        float64x2_t v316 = vmulq_f64(v314, v314);
        v316.f64[0] = sqrt(v316.f64[1] + vmulq_f64(v315, v315).f64[0] + v316.f64[0]);
        if (v316.f64[0] > 2.22044605e-16)
        {
          v315.f64[1] = v314.f64[0];
          double v317 = vmulq_f64(vdivq_f64((float64x2_t)vextq_s8((int8x16_t)v314, (int8x16_t)v314, 8uLL), v316), vsubq_f64(vdivq_f64(vaddq_f64(v296, vaddq_f64(v307, v308)), v510), *(float64x2_t *)(a1 + 336))).f64[0]+ vaddvq_f64(vmulq_f64(vdivq_f64(v315, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v316.f64[0], 0)), vsubq_f64(vdivq_f64(vaddq_f64(v295, vaddq_f64(*v306, *v305)), v510), *(float64x2_t *)(a1 + 320))));
          BOOL v318 = v317 == 0.0 || 0.0 - *(double *)(a1 + 544) < v317;
          if (!v318) {
            break;
          }
        }
        if (++v291 == (unsigned int *)v551) {
          goto LABEL_207;
        }
      }
      v395 = (_DWORD *)(v289 + 112 * *__p.__begin_ + 100);
      unsigned int v396 = *(_DWORD *)(a1 + 360);
      if (v396 == -1)
      {
        int v399 = geom::partitioned_set::extract(v507, v548);
        *(_DWORD *)(a1 + 360) = v399;
        LODWORD(v397) = *v395;
        if (*v395 == v399) {
          goto LABEL_297;
        }
      }
      else
      {
        geom::partitioned_set::extract(v507, v548, v396);
        unint64_t v397 = *v395;
        uint64_t v398 = *(void *)(a1 + 272);
        if (v397 >= (*(void *)(a1 + 280) - v398) >> 3 || *(_DWORD *)(v398 + 8 * v397) == -1)
        {
LABEL_297:
          LODWORD(v397) = -1;
          _DWORD *v395 = -1;
        }
      }
      uint64_t v400 = *(void *)(a1 + 272);
      if (v397 >= (unint64_t)((*(void *)(a1 + 280) - v400) >> 3)
        || (unsigned int v401 = *(_DWORD *)(v400 + 8 * v397), v401 == -1))
      {
      }
      else
      {
        double v402 = *(double *)(a1 + 544);
        unsigned int v403 = -1;
        do
        {
          if (*(double *)(*v511 + 8 * v401) > v402)
          {
            unsigned int v403 = v401;
            double v402 = *(double *)(*v511 + 8 * v401);
          }
          unsigned int v401 = *(_DWORD *)(*(void *)v507 + 4 * v401);
        }
        while (v401 != -1);
        if (v403 != -1)
        {
          LODWORD(v562) = v403;
          *((void *)&v562 + 1) = *(void *)(*v511 + 8 * v403);
        }
      }
LABEL_307:
      ++v508;
      v551 = (char *)v550;
      __p.__end_ = __p.__begin_;
      uint64_t v218 = *(void *)(a1 + 144);
      if (*(void *)(a1 + 152) - v218 == 24) {
        goto LABEL_308;
      }
    }
  }
  unsigned int v508 = 3;
LABEL_308:
  double v404 = 0.0;
  if (v508 == a2)
  {
    uint64_t v405 = *(void *)(a1 + 144);
    double v404 = -1.0;
    if (*(void *)(a1 + 152) - v405 != 24) {
      double v404 = *(double *)(v405 + 40);
    }
  }
  if (v544)
  {
    v545 = (char *)v544;
    operator delete(v544);
  }
  if (v547.__begin_)
  {
    v547.__end_ = v547.__begin_;
    operator delete(v547.__begin_);
  }
  if (v553[1])
  {
    v554.i64[0] = (uint64_t)v553[1];
    operator delete(v553[1]);
  }
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v550)
  {
    v551 = (char *)v550;
    operator delete(v550);
  }
  return v404;
}

uint64_t geom::anonymous namespace'::hull_mesh<double>::~hull_mesh(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 512);
  if (v2)
  {
    *(void *)(a1 + 520) = v2;
    operator delete(v2);
  }
  double v3 = *(void **)(a1 + 472);
  if (v3)
  {
    *(void *)(a1 + 480) = v3;
    operator delete(v3);
  }
  std::deque<unsigned int>::~deque[abi:nn180100]((void *)(a1 + 416));
  uint64_t v4 = *(void **)(a1 + 392);
  if (v4)
  {
    *(void *)(a1 + 400) = v4;
    operator delete(v4);
  }
  int8x16_t v5 = *(void **)(a1 + 368);
  if (v5)
  {
    *(void *)(a1 + 376) = v5;
    operator delete(v5);
  }
  int8x16_t v6 = *(void **)(a1 + 296);
  if (v6)
  {
    *(void *)(a1 + 304) = v6;
    operator delete(v6);
  }
  unint64_t v7 = *(void **)(a1 + 272);
  if (v7)
  {
    *(void *)(a1 + 280) = v7;
    operator delete(v7);
  }
  unsigned int v8 = *(void **)(a1 + 248);
  if (v8)
  {
    *(void *)(a1 + 256) = v8;
    operator delete(v8);
  }
  unsigned int v9 = *(void **)(a1 + 224);
  if (v9)
  {
    *(void *)(a1 + 232) = v9;
    operator delete(v9);
  }
  unsigned int v10 = *(void **)(a1 + 200);
  if (v10)
  {
    *(void *)(a1 + 208) = v10;
    operator delete(v10);
  }
  unsigned int v11 = *(void **)(a1 + 168);
  if (v11)
  {
    *(void *)(a1 + 176) = v11;
    operator delete(v11);
  }
  unsigned int v12 = *(void **)(a1 + 144);
  if (v12)
  {
    *(void *)(a1 + 152) = v12;
    operator delete(v12);
  }
  unsigned int v13 = *(void **)(a1 + 120);
  if (v13)
  {
    *(void *)(a1 + 128) = v13;
    operator delete(v13);
  }
  unsigned int v14 = *(void **)(a1 + 96);
  if (v14)
  {
    *(void *)(a1 + 104) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(a1 + 72);
  if (v15)
  {
    *(void *)(a1 + 80) = v15;
    operator delete(v15);
  }
  float64x2_t v16 = *(void **)(a1 + 48);
  if (v16)
  {
    *(void *)(a1 + 56) = v16;
    operator delete(v16);
  }
  int8x16_t v17 = *(void **)(a1 + 24);
  if (v17)
  {
    *(void *)(a1 + 32) = v17;
    operator delete(v17);
  }
  int8x16_t v18 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v18;
    operator delete(v18);
  }
  return a1;
}

uint64_t geom::half_plane_intersection_3<float>(unint64_t a1, float32x4_t *a2, char **a3, unint64_t *a4, char **a5)
{
  uint64_t v153 = *MEMORY[0x263EF8340];
  if (a1 < 4) {
    return 0;
  }
  a3[1] = *a3;
  a4[1] = *a4;
  a5[1] = *a5;
  if (v152 == 1)
  {
    uint64_t v122 = a5;
    uint64_t v11 = v148;
    uint64_t v120 = v149;
    uint64_t v12 = v150;
    memset(v144, 0, sizeof(v144));
    int v145 = 1065353216;
    uint64_t v143 = 0;
    long long v141 = 0u;
    *(_OWORD *)float64x2_t v142 = 0u;
    *(_OWORD *)float64x2_t v139 = 0u;
    *(_OWORD *)float64x2_t v140 = 0u;
    std::vector<unsigned int> __p = 0;
    float64x2_t v137 = 0;
    unint64_t v138 = 0;
    float64x2_t v133 = 0;
    float64x2_t v134 = 0;
    float64x2_t v135 = 0;
    float64x2_t v130 = 0;
    float64x2_t v131 = 0;
    unint64_t v132 = 0;
    LODWORD(v146) = 0;
    if (v151 != v150)
    {
      LODWORD(v13) = 0;
      unint64_t v14 = 0;
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v151 - v150) >> 4);
      uint64_t v121 = (uint64_t)(a3 + 2);
      uint64_t v124 = v150;
      uint64_t v125 = a3;
      unint64_t v123 = v15;
      do
      {
        float64x2_t v16 = (_DWORD *)(v12 + 80 * v14);
        uint64_t v17 = *v16;
        if (v17 != -1)
        {
          float64x2_t v137 = (char *)__p;
          float64x2_t v134 = (char *)v133;
          float64x2_t v131 = (char *)v130;
          uint64_t v18 = v12 + 80 * v14;
          unsigned int v21 = *(_DWORD *)(v18 + 64);
          int8x16_t v20 = (unsigned int *)(v18 + 64);
          unint64_t v19 = v21;
          if (v21 > (unint64_t)((uint64_t)(v138 - (void)__p) >> 2))
          {
            std::vector<float>::reserve(&__p, v19);
            std::vector<float>::reserve(&v133, *v20);
            std::vector<float>::reserve(&v130, *v20);
            uint64_t v17 = *v16;
          }
          uint64_t v126 = v20;
          do
          {
            float32x4_t v22 = a2[*(unsigned int *)(v11 + 16 * v17 + 12)];
            int8x16_t v23 = v137;
            float32x4_t v127 = v22;
            if ((unint64_t)v137 >= v138)
            {
              int8x16_t v25 = (char *)__p;
              uint64_t v26 = (v137 - (unsigned char *)__p) >> 2;
              unint64_t v27 = v26 + 1;
              if ((unint64_t)(v26 + 1) >> 62) {
                goto LABEL_160;
              }
              uint64_t v28 = v138 - (void)__p;
              if ((uint64_t)(v138 - (void)__p) >> 1 > v27) {
                unint64_t v27 = v28 >> 1;
              }
              if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v29 = v27;
              }
              if (v29)
              {
                int8x16_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v138, v29);
                float32x4_t v22 = v127;
                int8x16_t v31 = v30;
                int8x16_t v25 = (char *)__p;
                int8x16_t v23 = v137;
              }
              else
              {
                int8x16_t v31 = 0;
              }
              int8x16_t v32 = &v31[4 * v26];
              *(_DWORD *)int8x16_t v32 = v22.i32[0];
              int64x2_t v24 = v32 + 4;
              while (v23 != v25)
              {
                int v33 = *((_DWORD *)v23 - 1);
                v23 -= 4;
                *((_DWORD *)v32 - 1) = v33;
                v32 -= 4;
              }
              std::vector<unsigned int> __p = v32;
              float64x2_t v137 = v24;
              unint64_t v138 = (unint64_t)&v31[4 * v29];
              if (v25)
              {
                operator delete(v25);
                float32x4_t v22 = v127;
              }
            }
            else
            {
              *(_DWORD *)float64x2_t v137 = v22.i32[0];
              int64x2_t v24 = v23 + 4;
            }
            float64x2_t v137 = v24;
            __int32 v34 = v22.i32[1];
            int8x16_t v35 = v134;
            if (v134 >= v135)
            {
              int8x16_t v37 = (char *)v133;
              uint64_t v38 = (v134 - (unsigned char *)v133) >> 2;
              unint64_t v39 = v38 + 1;
              if ((unint64_t)(v38 + 1) >> 62) {
                goto LABEL_160;
              }
              uint64_t v40 = v135 - (unsigned char *)v133;
              if ((v135 - (unsigned char *)v133) >> 1 > v39) {
                unint64_t v39 = v40 >> 1;
              }
              if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v41 = v39;
              }
              if (v41)
              {
                unsigned int v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v135, v41);
                int8x16_t v37 = (char *)v133;
                int8x16_t v35 = v134;
              }
              else
              {
                unsigned int v42 = 0;
              }
              unsigned int v43 = &v42[4 * v38];
              *(_DWORD *)unsigned int v43 = v34;
              double v36 = v43 + 4;
              while (v35 != v37)
              {
                int v44 = *((_DWORD *)v35 - 1);
                v35 -= 4;
                *((_DWORD *)v43 - 1) = v44;
                v43 -= 4;
              }
              float64x2_t v133 = v43;
              float64x2_t v134 = v36;
              float64x2_t v135 = &v42[4 * v41];
              if (v37) {
                operator delete(v37);
              }
              v22.i32[2] = v127.i32[2];
            }
            else
            {
              *(_DWORD *)float64x2_t v134 = v22.i32[1];
              double v36 = v35 + 4;
            }
            float64x2_t v134 = v36;
            __int32 v45 = v22.i32[2];
            uint64_t v46 = v131;
            if (v131 >= v132)
            {
              double v48 = (char *)v130;
              uint64_t v49 = (v131 - (unsigned char *)v130) >> 2;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 62) {
                goto LABEL_160;
              }
              uint64_t v51 = v132 - (unsigned char *)v130;
              if ((v132 - (unsigned char *)v130) >> 1 > v50) {
                unint64_t v50 = v51 >> 1;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                float v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v132, v52);
                double v48 = (char *)v130;
                uint64_t v46 = v131;
              }
              else
              {
                float v53 = 0;
              }
              int v54 = &v53[4 * v49];
              *(_DWORD *)int v54 = v45;
              uint64_t v47 = v54 + 4;
              while (v46 != v48)
              {
                int v55 = *((_DWORD *)v46 - 1);
                v46 -= 4;
                *((_DWORD *)v54 - 1) = v55;
                v54 -= 4;
              }
              float64x2_t v130 = v54;
              float64x2_t v131 = v47;
              unint64_t v132 = &v53[4 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *(_DWORD *)float64x2_t v131 = v22.i32[2];
              uint64_t v47 = v46 + 4;
            }
            float64x2_t v131 = v47;
            uint64_t v17 = *(unsigned int *)(v11 + 16 * v17 + 8);
          }
          while (v17 != *v16);
          *(double *)v56.i64 = geom::plane_intersection_finder<float>::find_plane_intersection_point((uint64_t)v139, *v126, __p, v133, v130);
          v57.i32[1] = v56.i32[1];
          v57.i32[0] = vextq_s8(v56, v56, 8uLL).u32[0];
          int8x8_t v58 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(v57), (int8x8_t)vcgez_f32(v57)));
          if (v58.i8[4] & 1) != 0 || (v58.i8[0])
          {
            uint64_t v5 = 0;
            v125[1] = *v125;
            goto LABEL_145;
          }
          int8x16_t v128 = v56;
          unint64_t v59 = (unint64_t)(v125[1] - *v125) >> 4;
          v129[0] = &v146;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v144, (unsigned int *)&v146, (uint64_t)&std::piecewise_construct, (_DWORD **)v129)+ 5) = v59;
          unint64_t v61 = (int8x16_t *)v125[1];
          unint64_t v60 = (unint64_t)v125[2];
          if ((unint64_t)v61 >= v60)
          {
            uint64_t v63 = ((char *)v61 - *v125) >> 4;
            if ((unint64_t)(v63 + 1) >> 60) {
LABEL_160:
            }
              abort();
            uint64_t v64 = v60 - (void)*v125;
            uint64_t v65 = v64 >> 3;
            if (v64 >> 3 <= (unint64_t)(v63 + 1)) {
              uint64_t v65 = v63 + 1;
            }
            if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v66 = v65;
            }
            if (v66) {
              float64x2_t v67 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v121, v66);
            }
            else {
              float64x2_t v67 = 0;
            }
            float64x2_t v68 = (int8x16_t *)&v67[16 * v63];
            *float64x2_t v68 = v128;
            float64x2_t v62 = v68 + 1;
            float64x2_t v70 = *v125;
            float64x2_t v69 = v125[1];
            if (v69 != *v125)
            {
              do
              {
                int8x16_t v71 = *((int8x16_t *)v69 - 1);
                v69 -= 16;
                v68[-1] = v71;
                --v68;
              }
              while (v69 != v70);
              float64x2_t v69 = *v125;
            }
            *uint64_t v125 = (char *)v68;
            v125[1] = (char *)v62;
            v125[2] = &v67[16 * v66];
            if (v69) {
              operator delete(v69);
            }
          }
          else
          {
            *unint64_t v61 = v128;
            float64x2_t v62 = v61 + 1;
          }
          unint64_t v15 = v123;
          uint64_t v12 = v124;
          v125[1] = (char *)v62;
          LODWORD(v13) = v146;
        }
        unint64_t v13 = (v13 + 1);
        LODWORD(v146) = v13;
        unint64_t v14 = v13;
      }
      while (v15 > v13);
    }
    memset(v129, 0, sizeof(v129));
    std::vector<BOOL>::resize((uint64_t)v129, a1, 0);
    float64x2_t v72 = a5;
    if (v120 != v11)
    {
      uint64_t v73 = 0;
      unsigned int v74 = 0;
      unint64_t v75 = (v120 - v11) >> 4;
      do
      {
        if (*(_DWORD *)(v11 + 16 * v73) != -1)
        {
          uint64_t v76 = v11 + 16 * v73;
          unsigned int v78 = *(_DWORD *)(v76 + 12);
          uint64_t v77 = (_DWORD *)(v76 + 12);
          if (((*(void *)((char *)v129[0] + (((unint64_t)v78 >> 3) & 0x1FFFFFF8)) >> v78) & 1) == 0)
          {
            int v79 = 0;
            unsigned int v80 = v74;
            do
            {
              float64x2_t v146 = (unsigned int *)(v11 + 16 * v80);
              int v81 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v144, v146, (uint64_t)&std::piecewise_construct, &v146)+ 5);
              float64x2_t v83 = (_DWORD *)a4[1];
              unint64_t v82 = a4[2];
              if ((unint64_t)v83 >= v82)
              {
                double v85 = (_DWORD *)*a4;
                uint64_t v86 = (uint64_t)((uint64_t)v83 - *a4) >> 2;
                unint64_t v87 = v86 + 1;
                if ((unint64_t)(v86 + 1) >> 62) {
                  goto LABEL_160;
                }
                uint64_t v88 = v82 - (void)v85;
                if (v88 >> 1 > v87) {
                  unint64_t v87 = v88 >> 1;
                }
                if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v89 = v87;
                }
                if (v89)
                {
                  uint64_t v90 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v89);
                  double v85 = (_DWORD *)*a4;
                  float64x2_t v83 = (_DWORD *)a4[1];
                }
                else
                {
                  uint64_t v90 = 0;
                }
                float64x2_t v91 = &v90[4 * v86];
                *(_DWORD *)float64x2_t v91 = v81;
                float64x2_t v84 = v91 + 4;
                while (v83 != v85)
                {
                  int v92 = *--v83;
                  *((_DWORD *)v91 - 1) = v92;
                  v91 -= 4;
                }
                *a4 = (unint64_t)v91;
                a4[1] = (unint64_t)v84;
                a4[2] = (unint64_t)&v90[4 * v89];
                if (v85) {
                  operator delete(v85);
                }
              }
              else
              {
                *float64x2_t v83 = v81;
                float64x2_t v84 = v83 + 1;
              }
              a4[1] = (unint64_t)v84;
              ++v79;
              unsigned int v80 = *(_DWORD *)(v11 + 16 * *(unsigned int *)(v11 + 16 * v80 + 4) + 8);
            }
            while (v80 != v74);
            float64x2_t v146 = (unsigned int *)(v11 + 16 * v74);
            std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v144, v146, (uint64_t)&std::piecewise_construct, &v146);
            float64x2_t v72 = v122;
            float64x2_t v94 = v122[1];
            unint64_t v93 = (unint64_t)v122[2];
            if ((unint64_t)v94 >= v93)
            {
              double v96 = *v122;
              uint64_t v97 = (v94 - *v122) >> 2;
              unint64_t v98 = v97 + 1;
              if ((unint64_t)(v97 + 1) >> 62) {
                goto LABEL_160;
              }
              uint64_t v99 = v93 - (void)v96;
              if (v99 >> 1 > v98) {
                unint64_t v98 = v99 >> 1;
              }
              if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v100 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v100 = v98;
              }
              if (v100)
              {
                float64x2_t v101 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v122 + 2), v100);
                double v96 = *v122;
                float64x2_t v94 = v122[1];
              }
              else
              {
                float64x2_t v101 = 0;
              }
              float64x2_t v102 = &v101[4 * v97];
              *(_DWORD *)float64x2_t v102 = v79;
              float64x2_t v95 = v102 + 4;
              while (v94 != v96)
              {
                int v103 = *((_DWORD *)v94 - 1);
                v94 -= 4;
                *((_DWORD *)v102 - 1) = v103;
                v102 -= 4;
              }
              *uint64_t v122 = v102;
              v122[1] = v95;
              v122[2] = &v101[4 * v100];
              if (v96) {
                operator delete(v96);
              }
            }
            else
            {
              *(_DWORD *)float64x2_t v94 = v79;
              float64x2_t v95 = v94 + 4;
            }
            unint64_t v75 = (v120 - v11) >> 4;
            v122[1] = v95;
            *(void *)((char *)v129[0] + (((unint64_t)*v77 >> 3) & 0x1FFFFFF8)) |= 1 << *v77;
          }
        }
        uint64_t v73 = ++v74;
      }
      while (v75 > v74);
    }
    unint64_t v104 = *a4;
    unint64_t v105 = a4[1];
    unsigned int v106 = (_DWORD *)(v105 - 4);
    if (*a4 != v105 && (unint64_t)v106 > v104)
    {
      unint64_t v108 = v104 + 4;
      do
      {
        int v109 = *(_DWORD *)(v108 - 4);
        *(_DWORD *)(v108 - 4) = *v106;
        *v106-- = v109;
        BOOL v110 = v108 >= (unint64_t)v106;
        v108 += 4;
      }
      while (!v110);
    }
    unsigned int v112 = (int *)*v72;
    unsigned int v111 = (int *)v72[1];
    uint64_t v113 = v111 - 1;
    if (*v72 != (char *)v111 && v113 > v112)
    {
      unsigned int v115 = v112 + 1;
      do
      {
        int v116 = *(v115 - 1);
        *(v115 - 1) = *v113;
        *v113-- = v116;
        BOOL v110 = v115++ >= v113;
      }
      while (!v110);
    }
    if (v112 != v111)
    {
      unsigned int v117 = v112 + 1;
      if (v112 + 1 != v111)
      {
        int v118 = *v112;
        do
        {
          v118 += *v117;
          *v117++ = v118;
        }
        while (v117 != v111);
      }
    }
    if (v129[0]) {
      operator delete(v129[0]);
    }
    uint64_t v5 = 1;
LABEL_145:
    if (v130)
    {
      float64x2_t v131 = (char *)v130;
      operator delete(v130);
    }
    if (v133)
    {
      float64x2_t v134 = (char *)v133;
      operator delete(v133);
    }
    if (__p)
    {
      float64x2_t v137 = (char *)__p;
      operator delete(__p);
    }
    if (v142[0])
    {
      v142[1] = v142[0];
      operator delete(v142[0]);
    }
    if (v140[1])
    {
      *(void **)&long long v141 = v140[1];
      operator delete(v140[1]);
    }
    if (v139[0])
    {
      v139[1] = v139[0];
      operator delete(v139[0]);
    }
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)v144);
  }
  else
  {
    uint64_t v5 = 0;
  }
  return v5;
}

void std::vector<float>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 2)
  {
    if (a2 >> 62) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    int8x16_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unsigned int v9 = &v6[4 * v8];
    unsigned int v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        int v13 = *((_DWORD *)v11 - 1);
        v11 -= 4;
        *((_DWORD *)v12 - 1) = v13;
        v12 -= 4;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

double geom::plane_intersection_finder<float>::find_plane_intersection_point(uint64_t a1, uint64_t a2, const void *a3, const void *a4, const void *a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  unsigned int v10 = (void **)(a1 + 24);
  std::vector<float>::resize(a1 + 24, 3 * a2);
  if (a2)
  {
    memmove(*v10, a3, 4 * a2);
    memmove((char *)*v10 + 4 * a2, a4, 4 * a2);
    memmove((char *)*v10 + 8 * a2, a5, 4 * a2);
  }
  __unsigned __int16 n = 3;
  __CLPK_integer __lda = a2;
  __lworunsigned __int16 k = -1;
  __worunsigned __int16 k = 0.0;
  *(float *)&__CLPK_integer __info = 0.0;
  sgeqrf_(&__lda, &__n, *(__CLPK_real **)(a1 + 24), &__lda, __tau, &__work, &__lwork, &__info);
  __CLPK_integer v16 = (int)__work;
  std::vector<float>::resize(a1 + 48, (int)__work);
  sgeqrf_(&__lda, &__n, *(__CLPK_real **)(a1 + 24), &__lda, __tau, *(__CLPK_real **)(a1 + 48), &v16, &__info);
  std::vector<float>::resize(a1, a2);
  __c__ = *(__CLPK_real **)a1;
  if (a2 >= 1) {
    memset_pattern16(*(void **)a1, &unk_236F14E30, 4 * (a2 - ((a2 & 0x3FFFFFFFFFFFFFFFLL) != 0)) + 4);
  }
  char __side = 76;
  char __trans = 84;
  __unsigned __int16 n = 1;
  __CLPK_integer __lda = a2;
  __lworunsigned __int16 k = -1;
  LODWORD(__work) = 3;
  __CLPK_integer v16 = 0;
  *(float *)&__CLPK_integer __info = 0.0;
  sormqr_(&__side, &__trans, &__lda, &__n, (__CLPK_integer *)&__work, *(__CLPK_real **)(a1 + 24), &__lda, __tau, __c__, &__lda, (__CLPK_real *)&__info, &__lwork, &v16);
  __CLPK_integer v13 = (int)*(float *)&__info;
  std::vector<float>::resize(a1 + 48, (int)*(float *)&__info);
  sormqr_(&__side, &__trans, &__lda, &__n, (__CLPK_integer *)&__work, *(__CLPK_real **)(a1 + 24), &__lda, __tau, *(__CLPK_real **)a1, &__lda, *(__CLPK_real **)(a1 + 48), &v13, &v16);
  cblas_strsv(CblasColMajor, CblasUpper, CblasNoTrans, CblasNonUnit, 3, *(const float **)(a1 + 24), a2, *(float **)a1, 1);
  return **(double **)a1;
}

void std::vector<BOOL>::resize(uint64_t a1, unint64_t a2, int a3)
{
  unint64_t v5 = *(void *)(a1 + 8);
  unint64_t v6 = a2 - v5;
  if (a2 <= v5)
  {
    *(void *)(a1 + 8) = a2;
  }
  else
  {
    uint64_t v8 = *(void *)(a1 + 16);
    unint64_t v9 = v8 << 6;
    if (v8 << 6 < v6 || v5 > (v8 << 6) - v6)
    {
      unsigned int v21 = 0;
      long long v22 = 0uLL;
      if ((a2 & 0x8000000000000000) != 0) {
        abort();
      }
      unint64_t v11 = v8 << 7;
      if (v11 <= ((a2 + 63) & 0xFFFFFFFFFFFFFFC0)) {
        unint64_t v11 = (a2 + 63) & 0xFFFFFFFFFFFFFFC0;
      }
      if (v9 <= 0x3FFFFFFFFFFFFFFELL) {
        unint64_t v12 = v11;
      }
      else {
        unint64_t v12 = 0x7FFFFFFFFFFFFFFFLL;
      }
      std::vector<BOOL>::reserve(&v21, v12);
      __CLPK_integer v13 = *(unint64_t **)a1;
      unint64_t v14 = *(void *)(a1 + 8);
      *(void *)&long long v22 = v14 + v6;
      uint64_t v23 = v21;
      int v24 = 0;
      std::__copy_aligned[abi:nn180100]<std::vector<BOOL>,true>(v13, 0, (uint64_t)&v13[v14 >> 6], v14 & 0x3F, (uint64_t)&v23, (uint64_t)&v19);
      uint64_t v17 = v19;
      LODWORD(v18) = v20;
      unint64_t v15 = *(char **)a1;
      *(void *)a1 = v21;
      unsigned int v21 = v15;
      long long v16 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = v22;
      long long v22 = v16;
      if (v15) {
        operator delete(v15);
      }
    }
    else
    {
      uint64_t v17 = (char *)(*(void *)a1 + 8 * (v5 >> 6));
      uint64_t v18 = *(void *)(a1 + 8) & 0x3FLL;
      *(void *)(a1 + 8) = a2;
    }
    if (a2 != v5)
    {
      if (a3)
      {
        unsigned int v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&v21, v6);
      }
      else
      {
        unsigned int v21 = v17;
        LODWORD(v22) = v18;
        std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&v21, v6);
      }
    }
  }
}

uint64_t geom::half_plane_intersection_3<double>(unint64_t a1, float64x2_t *a2, void **a3, unint64_t *a4, char **a5)
{
  uint64_t v183 = *MEMORY[0x263EF8340];
  if (a1 < 4) {
    return 0;
  }
  a3[1] = *a3;
  a4[1] = *a4;
  a5[1] = *a5;
  if (v182 == 1)
  {
    float64x2_t v140 = a5;
    uint64_t v11 = v178;
    uint64_t v134 = v179;
    unint64_t v135 = a1;
    uint64_t v12 = v180;
    memset(v165, 0, sizeof(v165));
    int v166 = 1065353216;
    std::vector<unsigned int> __p = 0;
    v163 = 0;
    unint64_t v164 = 0;
    float v159 = 0;
    float64_t v160 = 0;
    float64_t v161 = 0;
    uint64_t v156 = 0;
    float64x2_t v157 = 0;
    float64x2_t v158 = 0;
    unsigned int v155 = 0;
    if (v181 != v180)
    {
      LODWORD(v13) = 0;
      unint64_t v14 = 0;
      unint64_t v15 = 0x6DB6DB6DB6DB6DB7 * ((v181 - v180) >> 4);
      uint64_t v136 = (uint64_t)(a3 + 2);
      unint64_t v137 = v15;
      uint64_t v138 = v180;
      float64x2_t v139 = a3;
      do
      {
        long long v16 = (_DWORD *)(v12 + 112 * v14);
        uint64_t v17 = *v16;
        if (v17 != -1)
        {
          v163 = (char *)__p;
          float64_t v160 = (char *)v159;
          float64x2_t v157 = (char *)v156;
          uint64_t v18 = v12 + 112 * v14;
          unsigned int v21 = *(_DWORD *)(v18 + 96);
          int v20 = (unsigned int *)(v18 + 96);
          unint64_t v19 = v21;
          if (v21 > (unint64_t)((uint64_t)(v164 - (void)__p) >> 3))
          {
            std::vector<double>::reserve(&__p, v19);
            std::vector<double>::reserve(&v159, *v20);
            std::vector<double>::reserve(&v156, *v20);
            uint64_t v17 = *v16;
          }
          do
          {
            long long v22 = (long long *)&a2[2 * *(unsigned int *)(v11 + 16 * v17 + 12)];
            long long v23 = *v22;
            long long v151 = v22[1];
            int v24 = v163;
            if ((unint64_t)v163 >= v164)
            {
              uint64_t v26 = (char *)__p;
              uint64_t v27 = (v163 - (unsigned char *)__p) >> 3;
              unint64_t v28 = v27 + 1;
              if ((unint64_t)(v27 + 1) >> 61) {
                goto LABEL_149;
              }
              uint64_t v29 = v164 - (void)__p;
              if ((uint64_t)(v164 - (void)__p) >> 2 > v28) {
                unint64_t v28 = v29 >> 2;
              }
              if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v30 = v28;
              }
              long long v147 = v23;
              if (v30)
              {
                int8x16_t v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v164, v30);
                long long v23 = v147;
                int8x16_t v32 = v31;
                uint64_t v26 = (char *)__p;
                int v24 = v163;
              }
              else
              {
                int8x16_t v32 = 0;
              }
              int v33 = &v32[8 * v27];
              *(void *)int v33 = v23;
              int8x16_t v25 = v33 + 8;
              while (v24 != v26)
              {
                uint64_t v34 = *((void *)v24 - 1);
                v24 -= 8;
                *((void *)v33 - 1) = v34;
                v33 -= 8;
              }
              std::vector<unsigned int> __p = v33;
              v163 = v25;
              unint64_t v164 = (unint64_t)&v32[8 * v30];
              if (v26)
              {
                operator delete(v26);
                *((void *)&v23 + 1) = *((void *)&v147 + 1);
              }
            }
            else
            {
              *(void *)v163 = v23;
              int8x16_t v25 = v24 + 8;
            }
            v163 = v25;
            uint64_t v35 = *((void *)&v23 + 1);
            double v36 = v160;
            if (v160 >= v161)
            {
              uint64_t v38 = (char *)v159;
              uint64_t v39 = (v160 - (unsigned char *)v159) >> 3;
              unint64_t v40 = v39 + 1;
              if ((unint64_t)(v39 + 1) >> 61) {
                goto LABEL_149;
              }
              uint64_t v41 = v161 - (unsigned char *)v159;
              if ((v161 - (unsigned char *)v159) >> 2 > v40) {
                unint64_t v40 = v41 >> 2;
              }
              if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v42 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v42 = v40;
              }
              if (v42)
              {
                unsigned int v43 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v161, v42);
                uint64_t v38 = (char *)v159;
                double v36 = v160;
              }
              else
              {
                unsigned int v43 = 0;
              }
              int v44 = &v43[8 * v39];
              *(void *)int v44 = v35;
              int8x16_t v37 = v44 + 8;
              while (v36 != v38)
              {
                uint64_t v45 = *((void *)v36 - 1);
                v36 -= 8;
                *((void *)v44 - 1) = v45;
                v44 -= 8;
              }
              float v159 = v44;
              float64_t v160 = v37;
              float64_t v161 = &v43[8 * v42];
              if (v38) {
                operator delete(v38);
              }
            }
            else
            {
              *(void *)float64_t v160 = *((void *)&v23 + 1);
              int8x16_t v37 = v36 + 8;
            }
            float64_t v160 = v37;
            uint64_t v46 = v157;
            if (v157 >= v158)
            {
              double v48 = (char *)v156;
              uint64_t v49 = (v157 - (unsigned char *)v156) >> 3;
              unint64_t v50 = v49 + 1;
              if ((unint64_t)(v49 + 1) >> 61) {
                goto LABEL_149;
              }
              uint64_t v51 = v158 - (unsigned char *)v156;
              if ((v158 - (unsigned char *)v156) >> 2 > v50) {
                unint64_t v50 = v51 >> 2;
              }
              if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v52 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v52 = v50;
              }
              if (v52)
              {
                float v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v158, v52);
                double v48 = (char *)v156;
                uint64_t v46 = v157;
              }
              else
              {
                float v53 = 0;
              }
              int v54 = &v53[8 * v49];
              *(void *)int v54 = v151;
              uint64_t v47 = v54 + 8;
              while (v46 != v48)
              {
                uint64_t v55 = *((void *)v46 - 1);
                v46 -= 8;
                *((void *)v54 - 1) = v55;
                v54 -= 8;
              }
              uint64_t v156 = v54;
              float64x2_t v157 = v47;
              float64x2_t v158 = &v53[8 * v52];
              if (v48) {
                operator delete(v48);
              }
            }
            else
            {
              *(void *)float64x2_t v157 = v151;
              uint64_t v47 = v46 + 8;
            }
            float64x2_t v157 = v47;
            uint64_t v17 = *(unsigned int *)(v11 + 16 * v17 + 8);
          }
          while (v17 != *v16);
          vDSP_Length v56 = *v20;
          float32x2_t v57 = (const double *)__p;
          int8x8_t v58 = (const double *)v159;
          unint64_t v59 = (const double *)v156;
          float64_t v168 = 0.0;
          float64_t v169 = 0.0;
          float64_t __C = 0.0;
          double v152 = cblas_ddot(v56, (const double *)__p, 1, (const double *)__p, 1);
          double v144 = cblas_ddot(v56, v57, 1, v58, 1);
          *(double *)&long long v60 = cblas_ddot(v56, v57, 1, v59, 1);
          long long v148 = v60;
          double v142 = cblas_ddot(v56, v58, 1, v58, 1);
          *(double *)&long long v61 = cblas_ddot(v56, v58, 1, v59, 1);
          long long v143 = v61;
          *(double *)&long long v62 = cblas_ddot(v56, v59, 1, v59, 1);
          long long v141 = v62;
          vDSP_sveD(v57, 1, &__C, v56);
          vDSP_sveD(v58, 1, &v169, v56);
          vDSP_sveD(v59, 1, &v168, v56);
          *(double *)&long long v63 = v152;
          *(double *)&long long v64 = v144;
          *((double *)&v63 + 1) = v144;
          *((double *)&v64 + 1) = v142;
          v65.f64[0] = v169;
          v66.f64[0] = __C;
          *(void *)&long long v67 = v148;
          long long v171 = v63;
          long long v172 = v148;
          *((void *)&v67 + 1) = v143;
          float64x2_t v145 = v65;
          v65.f64[0] = v168;
          float64x2_t v149 = v65;
          float64x2_t v153 = v66;
          long long v173 = v64;
          long long v174 = v143;
          long long v175 = v67;
          long long v176 = v141;
          __invert_d3();
          int8x16_t v68 = (int8x16_t)vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v167[0], v153.f64[0]), v167[2], v145.f64[0]), v167[4], v149.f64[0]);
          float64x2_t v150 = vmlaq_f64(vmlaq_f64(vmulq_f64(v153, v167[1]), v145, v167[3]), v149, v167[5]);
          uint64_t v154 = v68.i64[0];
          unint64_t v146 = vextq_s8(v68, v68, 8uLL).u64[0];
          unint64_t v69 = (unint64_t)((unsigned char *)v139[1] - (unsigned char *)*v139) >> 5;
          *(void *)&long long v171 = &v155;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v165, &v155, (uint64_t)&std::piecewise_construct, (_DWORD **)&v171)+ 5) = v69;
          float64x2_t v70 = v139[1];
          unint64_t v71 = (unint64_t)v139[2];
          if ((unint64_t)v70 >= v71)
          {
            uint64_t v74 = ((char *)v70 - (unsigned char *)*v139) >> 5;
            unint64_t v75 = v74 + 1;
            if ((unint64_t)(v74 + 1) >> 59) {
LABEL_149:
            }
              abort();
            uint64_t v76 = v71 - (void)*v139;
            if (v76 >> 4 > v75) {
              unint64_t v75 = v76 >> 4;
            }
            if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v77 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v77 = v75;
            }
            if (v77) {
              unsigned int v78 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v136, v77);
            }
            else {
              unsigned int v78 = 0;
            }
            *(void *)&long long v79 = v154;
            *((void *)&v79 + 1) = v146;
            unsigned int v80 = &v78[32 * v74];
            *(_OWORD *)unsigned int v80 = v79;
            *((float64x2_t *)v80 + 1) = v150;
            unint64_t v82 = (char *)*v139;
            int v81 = (char *)v139[1];
            float64x2_t v83 = v80;
            if (v81 != *v139)
            {
              do
              {
                long long v84 = *((_OWORD *)v81 - 2);
                long long v85 = *((_OWORD *)v81 - 1);
                v81 -= 32;
                *((_OWORD *)v83 - 2) = v84;
                *((_OWORD *)v83 - 1) = v85;
                v83 -= 32;
              }
              while (v81 != v82);
              int v81 = (char *)*v139;
            }
            uint64_t v73 = v80 + 32;
            *float64x2_t v139 = v83;
            v139[1] = v80 + 32;
            v139[2] = &v78[32 * v77];
            if (v81) {
              operator delete(v81);
            }
          }
          else
          {
            *(void *)&long long v72 = v154;
            *((void *)&v72 + 1) = v146;
            *float64x2_t v70 = v72;
            v70[1] = v150;
            uint64_t v73 = v70 + 2;
          }
          unint64_t v15 = v137;
          uint64_t v12 = v138;
          v139[1] = v73;
          LODWORD(v13) = v155;
        }
        unint64_t v13 = (v13 + 1);
        unsigned int v155 = v13;
        unint64_t v14 = v13;
      }
      while (v15 > v13);
    }
    long long v171 = 0uLL;
    *(void *)&long long v172 = 0;
    std::vector<BOOL>::resize((uint64_t)&v171, v135, 0);
    uint64_t v86 = v140;
    if (v134 != v11)
    {
      uint64_t v87 = 0;
      unsigned int v88 = 0;
      unint64_t v89 = (v134 - v11) >> 4;
      do
      {
        if (*(_DWORD *)(v11 + 16 * v87) != -1)
        {
          uint64_t v90 = v11 + 16 * v87;
          unsigned int v92 = *(_DWORD *)(v90 + 12);
          float64x2_t v91 = (_DWORD *)(v90 + 12);
          if (((*(void *)(v171 + (((unint64_t)v92 >> 3) & 0x1FFFFFF8)) >> v92) & 1) == 0)
          {
            int v93 = 0;
            unsigned int v94 = v88;
            do
            {
              *(void *)&v167[0].f64[0] = v11 + 16 * v94;
              int v95 = *((_DWORD *)std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v165, *(unsigned int **)&v167[0].f64[0], (uint64_t)&std::piecewise_construct, v167)+ 5);
              uint64_t v97 = (_DWORD *)a4[1];
              unint64_t v96 = a4[2];
              if ((unint64_t)v97 >= v96)
              {
                uint64_t v99 = (_DWORD *)*a4;
                uint64_t v100 = (uint64_t)((uint64_t)v97 - *a4) >> 2;
                unint64_t v101 = v100 + 1;
                if ((unint64_t)(v100 + 1) >> 62) {
                  goto LABEL_149;
                }
                uint64_t v102 = v96 - (void)v99;
                if (v102 >> 1 > v101) {
                  unint64_t v101 = v102 >> 1;
                }
                if ((unint64_t)v102 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v103 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v103 = v101;
                }
                if (v103)
                {
                  unint64_t v104 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v103);
                  uint64_t v99 = (_DWORD *)*a4;
                  uint64_t v97 = (_DWORD *)a4[1];
                }
                else
                {
                  unint64_t v104 = 0;
                }
                unint64_t v105 = &v104[4 * v100];
                *(_DWORD *)unint64_t v105 = v95;
                unint64_t v98 = v105 + 4;
                while (v97 != v99)
                {
                  int v106 = *--v97;
                  *((_DWORD *)v105 - 1) = v106;
                  v105 -= 4;
                }
                *a4 = (unint64_t)v105;
                a4[1] = (unint64_t)v98;
                a4[2] = (unint64_t)&v104[4 * v103];
                if (v99) {
                  operator delete(v99);
                }
              }
              else
              {
                *uint64_t v97 = v95;
                unint64_t v98 = v97 + 1;
              }
              a4[1] = (unint64_t)v98;
              ++v93;
              unsigned int v94 = *(_DWORD *)(v11 + 16 * *(unsigned int *)(v11 + 16 * v94 + 4) + 8);
            }
            while (v94 != v88);
            *(void *)&v167[0].f64[0] = v11 + 16 * v88;
            std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t)v165, *(unsigned int **)&v167[0].f64[0], (uint64_t)&std::piecewise_construct, v167);
            unint64_t v108 = v140[1];
            unint64_t v107 = (unint64_t)v140[2];
            if ((unint64_t)v108 >= v107)
            {
              BOOL v110 = *v140;
              uint64_t v111 = (v108 - *v140) >> 2;
              unint64_t v112 = v111 + 1;
              if ((unint64_t)(v111 + 1) >> 62) {
                goto LABEL_149;
              }
              uint64_t v113 = v107 - (void)v110;
              if (v113 >> 1 > v112) {
                unint64_t v112 = v113 >> 1;
              }
              if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v114 = v112;
              }
              if (v114)
              {
                unsigned int v115 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v140 + 2), v114);
                BOOL v110 = *v140;
                unint64_t v108 = v140[1];
              }
              else
              {
                unsigned int v115 = 0;
              }
              int v116 = &v115[4 * v111];
              *(_DWORD *)int v116 = v93;
              int v109 = v116 + 4;
              while (v108 != v110)
              {
                int v117 = *((_DWORD *)v108 - 1);
                v108 -= 4;
                *((_DWORD *)v116 - 1) = v117;
                v116 -= 4;
              }
              *float64x2_t v140 = v116;
              v140[1] = v109;
              v140[2] = &v115[4 * v114];
              if (v110) {
                operator delete(v110);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v108 = v93;
              int v109 = v108 + 4;
            }
            unint64_t v89 = (v134 - v11) >> 4;
            uint64_t v86 = v140;
            v140[1] = v109;
            *(void *)(v171 + (((unint64_t)*v91 >> 3) & 0x1FFFFFF8)) |= 1 << *v91;
          }
        }
        uint64_t v87 = ++v88;
      }
      while (v89 > v88);
    }
    unint64_t v118 = *a4;
    unint64_t v119 = a4[1];
    uint64_t v120 = (_DWORD *)(v119 - 4);
    if (*a4 != v119 && (unint64_t)v120 > v118)
    {
      unint64_t v122 = v118 + 4;
      do
      {
        int v123 = *(_DWORD *)(v122 - 4);
        *(_DWORD *)(v122 - 4) = *v120;
        *v120-- = v123;
        BOOL v124 = v122 >= (unint64_t)v120;
        v122 += 4;
      }
      while (!v124);
    }
    uint64_t v126 = (int *)*v86;
    uint64_t v125 = (int *)v86[1];
    float32x4_t v127 = v125 - 1;
    if (*v86 != (char *)v125 && v127 > v126)
    {
      uint64_t v129 = v126 + 1;
      do
      {
        int v130 = *(v129 - 1);
        *(v129 - 1) = *v127;
        *v127-- = v130;
        BOOL v124 = v129++ >= v127;
      }
      while (!v124);
    }
    if (v126 != v125)
    {
      float64x2_t v131 = v126 + 1;
      if (v126 + 1 != v125)
      {
        int v132 = *v126;
        do
        {
          v132 += *v131;
          *v131++ = v132;
        }
        while (v131 != v125);
      }
    }
    if ((void)v171) {
      operator delete((void *)v171);
    }
    uint64_t v5 = 1;
    if (v156)
    {
      float64x2_t v157 = (char *)v156;
      operator delete(v156);
    }
    if (v159)
    {
      float64_t v160 = (char *)v159;
      operator delete(v159);
    }
    if (__p)
    {
      v163 = (char *)__p;
      operator delete(__p);
    }
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)v165);
  }
  else
  {
    uint64_t v5 = 0;
  }
  return v5;
}

void std::vector<double>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    unsigned int v10 = (char *)*a1;
    uint64_t v11 = (char *)a1[1];
    uint64_t v12 = v7;
    if (v11 != *a1)
    {
      uint64_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

float geom_convex_hull_3f(unint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (char **)geom::collection_to_vector<float>(a3);
  uint64_t v8 = (char **)geom::collection_to_vector<float>(a4);
  return geom::convex_hull_3<float>(a1, a2, v7, v8, 0xFFFFFFFF, 0.0);
}

float geom::convex_hull_3<float>(unint64_t a1, float32x4_t *a2, char **a3, char **a4, unsigned int a5, float a6)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  a3[1] = *a3;
  a4[1] = *a4;
  if (!a1) {
    return 0.0;
  }
  if (a1 > 3)
  {
    unint64_t v12 = a1;
  }
  else
  {
    memcpy(__dst, a2, 16 * a1);
    long long v11 = __dst[0];
    unint64_t v12 = 4;
    unint64_t v13 = a1;
    do
      __dst[v13++] = v11;
    while (v13 != 4);
    a2 = (float32x4_t *)__dst;
  }
  unint64_t v46 = v12;
  a3[1] = *a3;
  a4[1] = *a4;
  long long v16 = v51;
  unint64_t v15 = v52;
  if (v51 != v52)
  {
    uint64_t v17 = a3 + 2;
    double v48 = v52;
    do
    {
      uint64_t v18 = *v16;
      if (v18 != -1)
      {
        unint64_t v19 = a3[1];
        do
        {
          uint64_t v20 = v50;
          unsigned int v21 = (_DWORD *)(v50 + 16 * v18 + 12);
          if ((unint64_t)v19 >= *v17)
          {
            long long v22 = *a3;
            uint64_t v23 = (v19 - *a3) >> 2;
            unint64_t v24 = v23 + 1;
            if ((unint64_t)(v23 + 1) >> 62) {
              goto LABEL_56;
            }
            uint64_t v25 = *v17 - (void)v22;
            if (v25 >> 1 > v24) {
              unint64_t v24 = v25 >> 1;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v26 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v26 = v24;
            }
            if (v26)
            {
              uint64_t v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v26);
              long long v22 = *a3;
              unint64_t v19 = a3[1];
            }
            else
            {
              uint64_t v27 = 0;
            }
            unint64_t v28 = &v27[4 * v23];
            *(_DWORD *)unint64_t v28 = *v21;
            uint64_t v29 = v28 + 4;
            while (v19 != v22)
            {
              int v30 = *((_DWORD *)v19 - 1);
              v19 -= 4;
              *((_DWORD *)v28 - 1) = v30;
              v28 -= 4;
            }
            *a3 = v28;
            a3[1] = v29;
            a3[2] = &v27[4 * v26];
            if (v22) {
              operator delete(v22);
            }
            unint64_t v19 = v29;
          }
          else
          {
            *(_DWORD *)unint64_t v19 = *v21;
            v19 += 4;
          }
          a3[1] = v19;
          uint64_t v18 = *(unsigned int *)(v20 + 16 * v18 + 8);
        }
        while (v18 != *v16);
        unint64_t v31 = (unint64_t)(v19 - *a3) >> 2;
        int v33 = a4[1];
        unint64_t v32 = (unint64_t)a4[2];
        if ((unint64_t)v33 >= v32)
        {
          uint64_t v35 = *a4;
          uint64_t v36 = (v33 - *a4) >> 2;
          unint64_t v37 = v36 + 1;
          if ((unint64_t)(v36 + 1) >> 62) {
LABEL_56:
          }
            abort();
          uint64_t v38 = v32 - (void)v35;
          if (v38 >> 1 > v37) {
            unint64_t v37 = v38 >> 1;
          }
          if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v39 = v37;
          }
          if (v39)
          {
            unint64_t v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v39);
            uint64_t v35 = *a4;
            int v33 = a4[1];
          }
          else
          {
            unint64_t v40 = 0;
          }
          uint64_t v41 = &v40[4 * v36];
          *(_DWORD *)uint64_t v41 = v31;
          uint64_t v34 = v41 + 4;
          while (v33 != v35)
          {
            int v42 = *((_DWORD *)v33 - 1);
            v33 -= 4;
            *((_DWORD *)v41 - 1) = v42;
            v41 -= 4;
          }
          *a4 = v41;
          a4[1] = v34;
          a4[2] = &v40[4 * v39];
          if (v35) {
            operator delete(v35);
          }
        }
        else
        {
          *(_DWORD *)int v33 = v31;
          uint64_t v34 = v33 + 4;
        }
        unint64_t v15 = v48;
        a4[1] = v34;
      }
      v16 += 20;
    }
    while (v16 != v15);
  }
  if (v46 != a1)
  {
    int v44 = *a3;
    uint64_t v45 = a3[1];
    while (v44 != v45)
    {
      if (*(unsigned int *)v44 >= a1) {
        *(_DWORD *)int v44 = 0;
      }
      v44 += 4;
    }
  }
  return v14;
}

double geom_convex_hull_3d(unint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4)
{
  unint64_t v7 = (char **)geom::collection_to_vector<float>(a3);
  uint64_t v8 = (char **)geom::collection_to_vector<float>(a4);
  return geom::convex_hull_3<double>(a1, a2, v7, v8, 0xFFFFFFFF, 0.0);
}

double geom::convex_hull_3<double>(unint64_t a1, float64x2_t *a2, char **a3, char **a4, unsigned int a5, double a6)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  a3[1] = *a3;
  a4[1] = *a4;
  if (!a1) {
    return 0.0;
  }
  if (a1 > 3)
  {
    unint64_t v13 = a1;
  }
  else
  {
    memcpy(__dst, a2, 32 * a1);
    long long v12 = __dst[0];
    long long v11 = __dst[1];
    unint64_t v13 = 4;
    unint64_t v14 = a1;
    do
    {
      unint64_t v15 = &__dst[2 * v14];
      _OWORD *v15 = v12;
      v15[1] = v11;
      ++v14;
    }
    while (v14 != 4);
    a2 = (float64x2_t *)__dst;
  }
  unint64_t v48 = v13;
  a3[1] = *a3;
  a4[1] = *a4;
  uint64_t v18 = v53;
  uint64_t v17 = v54;
  if (v53 != v54)
  {
    unint64_t v19 = a3 + 2;
    uint64_t v50 = v54;
    do
    {
      uint64_t v20 = *v18;
      if (v20 != -1)
      {
        unsigned int v21 = a3[1];
        do
        {
          uint64_t v22 = v52;
          uint64_t v23 = (_DWORD *)(v52 + 16 * v20 + 12);
          if ((unint64_t)v21 >= *v19)
          {
            unint64_t v24 = *a3;
            uint64_t v25 = (v21 - *a3) >> 2;
            unint64_t v26 = v25 + 1;
            if ((unint64_t)(v25 + 1) >> 62) {
              goto LABEL_56;
            }
            uint64_t v27 = *v19 - (void)v24;
            if (v27 >> 1 > v26) {
              unint64_t v26 = v27 >> 1;
            }
            if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v28 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v28 = v26;
            }
            if (v28)
            {
              uint64_t v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v28);
              unint64_t v24 = *a3;
              unsigned int v21 = a3[1];
            }
            else
            {
              uint64_t v29 = 0;
            }
            int v30 = &v29[4 * v25];
            *(_DWORD *)int v30 = *v23;
            unint64_t v31 = v30 + 4;
            while (v21 != v24)
            {
              int v32 = *((_DWORD *)v21 - 1);
              v21 -= 4;
              *((_DWORD *)v30 - 1) = v32;
              v30 -= 4;
            }
            *a3 = v30;
            a3[1] = v31;
            a3[2] = &v29[4 * v28];
            if (v24) {
              operator delete(v24);
            }
            unsigned int v21 = v31;
          }
          else
          {
            *(_DWORD *)unsigned int v21 = *v23;
            v21 += 4;
          }
          a3[1] = v21;
          uint64_t v20 = *(unsigned int *)(v22 + 16 * v20 + 8);
        }
        while (v20 != *v18);
        unint64_t v33 = (unint64_t)(v21 - *a3) >> 2;
        uint64_t v35 = a4[1];
        unint64_t v34 = (unint64_t)a4[2];
        if ((unint64_t)v35 >= v34)
        {
          unint64_t v37 = *a4;
          uint64_t v38 = (v35 - *a4) >> 2;
          unint64_t v39 = v38 + 1;
          if ((unint64_t)(v38 + 1) >> 62) {
LABEL_56:
          }
            abort();
          uint64_t v40 = v34 - (void)v37;
          if (v40 >> 1 > v39) {
            unint64_t v39 = v40 >> 1;
          }
          if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v41 = v39;
          }
          if (v41)
          {
            int v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v41);
            unint64_t v37 = *a4;
            uint64_t v35 = a4[1];
          }
          else
          {
            int v42 = 0;
          }
          unsigned int v43 = &v42[4 * v38];
          *(_DWORD *)unsigned int v43 = v33;
          uint64_t v36 = v43 + 4;
          while (v35 != v37)
          {
            int v44 = *((_DWORD *)v35 - 1);
            v35 -= 4;
            *((_DWORD *)v43 - 1) = v44;
            v43 -= 4;
          }
          *a4 = v43;
          a4[1] = v36;
          a4[2] = &v42[4 * v41];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v35 = v33;
          uint64_t v36 = v35 + 4;
        }
        uint64_t v17 = v50;
        a4[1] = v36;
      }
      v18 += 28;
    }
    while (v18 != v17);
  }
  if (v48 != a1)
  {
    unint64_t v46 = *a3;
    uint64_t v47 = a3[1];
    while (v46 != v47)
    {
      if (*(unsigned int *)v46 >= a1) {
        *(_DWORD *)unint64_t v46 = 0;
      }
      v46 += 4;
    }
  }
  return v16;
}

float geom_convex_hull_approx_3f(unint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unint64_t v9 = (char **)geom::collection_to_vector<float>(a3);
  unsigned int v10 = (char **)geom::collection_to_vector<float>(a4);
  return geom::convex_hull_3<float>(a1, a2, v9, v10, a5, 0.0);
}

double geom_convex_hull_approx_3d(unint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4, unsigned int a5)
{
  unint64_t v9 = (char **)geom::collection_to_vector<float>(a3);
  unsigned int v10 = (char **)geom::collection_to_vector<float>(a4);
  return geom::convex_hull_3<double>(a1, a2, v9, v10, a5, 0.0);
}

float geom_convex_hull_approx_with_tolerance_3f(unint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, float a6)
{
  long long v11 = (char **)geom::collection_to_vector<float>(a3);
  long long v12 = (char **)geom::collection_to_vector<float>(a4);
  return geom::convex_hull_3<float>(a1, a2, v11, v12, a5, a6);
}

double geom_convex_hull_approx_with_tolerance_3d(unint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4, unsigned int a5, double a6)
{
  long long v11 = (char **)geom::collection_to_vector<float>(a3);
  long long v12 = (char **)geom::collection_to_vector<float>(a4);
  return geom::convex_hull_3<double>(a1, a2, v11, v12, a5, a6);
}

uint64_t std::deque<unsigned int>::~deque[abi:nn180100](void *a1)
{
  unsigned int v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      unsigned int v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 512;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 1024;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    unint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned int *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::__split_buffer<unsigned int *>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3) {
    *(void *)(a1 + 16) = v2 + ((v3 - v2 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  unint64_t v4 = *(void **)a1;
  if (*(void *)a1) {
    operator delete(v4);
  }
  return a1;
}

void _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    unint64_t v7 = &v6[v5];
    unint64_t v9 = &v6[16 * v8];
    long long v11 = (char *)*a1;
    unsigned int v10 = (char *)a1[1];
    long long v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      unsigned int v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz, std::vector<int>::const_reference __x)
{
  std::vector<int>::size_type v3 = this->__end_ - this->__begin_;
  if (__sz <= v3)
  {
    if (__sz < v3) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v3, __x);
  }
}

void std::vector<unsigned int>::__append(std::vector<int> *this, std::vector<int>::size_type __n, std::vector<int>::const_reference __x)
{
  value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  unint64_t v7 = value;
  unint64_t v9 = p_end_cap[-1].__value_;
  if (__n <= value - v9)
  {
    if (__n)
    {
      std::vector<int>::size_type v16 = 4 * __n;
      uint64_t v17 = &v9[__n];
      do
      {
        *v9++ = *__x;
        v16 -= 4;
      }
      while (v16);
      unint64_t v9 = v17;
    }
    this->__end_ = v9;
  }
  else
  {
    uint64_t v10 = (char *)v9 - (char *)this->__begin_;
    unint64_t v11 = __n + (v10 >> 2);
    if (v11 >> 62) {
      abort();
    }
    uint64_t v12 = v10 >> 2;
    uint64_t v13 = (char *)v7 - (char *)this->__begin_;
    if (v13 >> 1 > v11) {
      unint64_t v11 = v13 >> 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v11;
    }
    if (v14) {
      unint64_t v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v14);
    }
    else {
      unint64_t v15 = 0;
    }
    uint64_t v18 = (int *)&v15[4 * v12];
    unint64_t v19 = &v18[__n];
    std::vector<int>::size_type v20 = 4 * __n;
    unsigned int v21 = v18;
    do
    {
      *v21++ = *__x;
      v20 -= 4;
    }
    while (v20);
    uint64_t v22 = (int *)&v15[4 * v14];
    begiunsigned __int16 n = this->__begin_;
    for (std::vector<int>::pointer i = this->__end_; i != begin; --i)
    {
      int v25 = *(i - 1);
      *--uint64_t v18 = v25;
    }
    this->__begin_ = v18;
    this->__end_ = v19;
    this->__end_cap_.__value_ = v22;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void geom::anonymous namespace'::hull_mesh<float>::grow_hull(void *a1, void *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5, std::vector<int> *a6)
{
  uint64_t v8 = *a3;
  unint64_t v9 = a3[1];
  if (*a3 != v9)
  {
    do
    {
      if (*(_DWORD *)(a1[9] + 80 * *v8) != -1) {
      ++v8;
      }
    }
    while (v8 != v9);
  }
  uint64_t v10 = a2[1] - *a2;
  uint64_t v11 = v10 >> 2;
  std::vector<unsigned int>::resize(a6, 3 * (v10 >> 2));
  std::vector<int>::size_type v12 = ((unint64_t)v10 >> 2);
  if ((v10 >> 2))
  {
    uint64_t v13 = 0;
    unint64_t v14 = (unint64_t)v10 >> 1;
    do
    {
      begiunsigned __int16 n = a6->__begin_;
      uint64_t v17 = *(unsigned int *)(*a2 + 4 * v13);
      uint64_t v18 = a1[6];
      uint64_t v19 = *(unsigned int *)(*a2 + 4 * (((int)v11 - 1 + (int)v13) % v11));
      std::vector<int>::size_type v20 = (unsigned int *)(v18 + 16 * begin[(v11 + v13)]);
      uint64_t v21 = begin[v13];
      uint64_t v22 = (unsigned int *)(v18 + 16 * v21);
      uint64_t v23 = (unsigned int *)(v18 + 16 * begin[(v14 + v13)]);
      uint64_t v24 = a1[9] + 80 * v16;
      v20[2] = v21;
      v22[2] = begin[(v14 + v13)];
      v23[2] = begin[(v11 + v13)];
      *std::vector<int>::size_type v20 = v16;
      *uint64_t v22 = v16;
      *uint64_t v23 = v16;
      v20[3] = *(_DWORD *)(v18 + 16 * v19 + 12);
      uint64_t v25 = v18 + 16 * v17;
      v22[3] = *(_DWORD *)(v25 + 12);
      uint64_t v26 = *a4;
      v23[3] = v26;
      v20[1] = v17;
      *(_DWORD *)(v25 + 4) = begin[(v11 + v13)];
      uint64_t v27 = a1[12];
      float32x4_t v28 = *(float32x4_t *)(v27 + 16 * v26);
      float32x4_t v29 = *(float32x4_t *)(v27 + 16 * v20[3]);
      float32x4_t v30 = *(float32x4_t *)(v27 + 16 * v22[3]);
      float32x4_t v31 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL);
      float32x4_t v32 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL);
      float32x4_t v33 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL);
      float32x4_t v34 = vaddq_f32(vmlaq_f32(vmulq_f32(v31, vnegq_f32(v30)), v28, v33), vaddq_f32(vmlaq_f32(vmulq_f32(v32, vnegq_f32(v28)), v29, v31), vmlaq_f32(vmulq_f32(v33, vnegq_f32(v29)), v30, v32)));
      *(int8x16_t *)(v24 + 16) = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL);
      float32x4_t v35 = vmulq_f32(v34, v34);
      v35.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), v35)).f32[0]);
      *(_DWORD *)(v24 + 32) = v35.i32[0];
      *(unsigned char *)(v24 + 36) = v35.f32[0] <= 0.00000011921;
      *(float32x4_t *)(v24 + 48) = vaddq_f32(vaddq_f32(v28, v29), v30);
      *(_DWORD *)(v24 + 64) = 3;
      *(_DWORD *)uint64_t v24 = begin[(v11 + v13)];
      if (v35.f32[0] > 0.00000011921) {
      ++v13;
      }
    }
    while (v12 != v13);
    uint64_t v36 = 0;
    std::vector<int>::pointer v37 = a6->__begin_;
    uint64_t v38 = a1[6];
    do
    {
      uint64_t v39 = v36 + 1;
      if (v12 - 1 == v36) {
        int v40 = 0;
      }
      else {
        int v40 = v36 + 1;
      }
      if (v36) {
        int v41 = v36;
      }
      else {
        int v41 = v10 >> 2;
      }
      uint64_t v42 = v37[v36];
      uint64_t v43 = v37[2 * ((unint64_t)v10 >> 2) + v36];
      *(_DWORD *)(v38 + 16 * v42 + 4) = v37[(v40 + 2 * v11)];
      *(_DWORD *)(v38 + 16 * v43 + 4) = v37[v41 - 1];
      uint64_t v36 = v39;
    }
    while (v12 != v39);
  }
  std::vector<unsigned int>::resize(a6, v12);
}

void _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  unint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    unint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    std::vector<int>::size_type v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t geom::anonymous namespace'::hull_mesh<float>::new_face(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2 == a1[3])
  {
    uint64_t v6 = (char *)a1[10];
    unint64_t v5 = a1[11];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = (char *)a1[9];
      unint64_t v9 = 0xCCCCCCCCCCCCCCCDLL * ((v6 - v8) >> 4) + 1;
      if (v9 > 0x333333333333333) {
        abort();
      }
      unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)v8) >> 4);
      if (2 * v10 > v9) {
        unint64_t v9 = 2 * v10;
      }
      if (v10 >= 0x199999999999999) {
        unint64_t v11 = 0x333333333333333;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        if (v11 > 0x333333333333333) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        std::vector<int>::size_type v12 = (char *)operator new(80 * v11);
      }
      else
      {
        std::vector<int>::size_type v12 = 0;
      }
      uint64_t v13 = &v12[16 * ((v6 - v8) >> 4)];
      *(_DWORD *)uint64_t v13 = -1;
      *(_OWORD *)(v13 + 4) = 0u;
      *(_OWORD *)(v13 + 20) = 0u;
      v13[36] = 1;
      *(void *)(v13 + 37) = 0;
      *(void *)(v13 + 53) = 0;
      *(void *)(v13 + 45) = 0;
      *(void *)(v13 + 60) = 0;
      *((_DWORD *)v13 + 17) = -1;
      *((void *)v13 + 9) = 0;
      unint64_t v7 = v13 + 80;
      if (v6 != v8)
      {
        do
        {
          *((_OWORD *)v13 - 5) = *((_OWORD *)v6 - 5);
          long long v14 = *((_OWORD *)v6 - 4);
          long long v15 = *((_OWORD *)v6 - 3);
          long long v16 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v13 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v13 - 1) = v16;
          *((_OWORD *)v13 - 4) = v14;
          *((_OWORD *)v13 - 3) = v15;
          v13 -= 80;
          v6 -= 80;
        }
        while (v6 != v8);
        uint64_t v6 = (char *)a1[9];
      }
      a1[9] = v13;
      a1[10] = v7;
      a1[11] = &v12[80 * v11];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v6 = -1;
      *(_OWORD *)(v6 + 4) = 0u;
      *(_OWORD *)(v6 + 20) = 0u;
      v6[36] = 1;
      *(void *)(v6 + 37) = 0;
      *(void *)(v6 + 53) = 0;
      *(void *)(v6 + 45) = 0;
      *(void *)(v6 + 60) = 0;
      *((_DWORD *)v6 + 17) = -1;
      unint64_t v7 = v6 + 80;
      *((void *)v6 + 9) = 0;
    }
    a1[10] = v7;
    return -858993459 * (((unint64_t)v7 - a1[9]) >> 4) - 1;
  }
  else
  {
    uint64_t result = *(unsigned int *)(v2 - 4);
    a1[4] = v2 - 4;
    uint64_t v4 = a1[9] + 80 * result;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    *(_DWORD *)(v4 + 32) = 0;
    *(unsigned char *)(v4 + 36) = 1;
    *(void *)(v4 + 64) = 0xFFFFFFFF00000000;
    *(_OWORD *)(v4 + 48) = 0u;
  }
  return result;
}

uint64_t geom::anonymous namespace'::hull_mesh<float>::new_halfedge(void *a1)
{
  uint64_t v2 = a1[1];
  if (v2 == *a1)
  {
    uint64_t v6 = (char *)a1[7];
    unint64_t v5 = a1[8];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = (char *)a1[6];
      uint64_t v9 = (v6 - v8) >> 4;
      unint64_t v10 = v9 + 1;
      if ((unint64_t)(v9 + 1) >> 60) {
        abort();
      }
      uint64_t v11 = v5 - (void)v8;
      if (v11 >> 3 > v10) {
        unint64_t v10 = v11 >> 3;
      }
      if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v12 = v10;
      }
      if (v12)
      {
        if (v12 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v13 = (char *)operator new(16 * v12);
      }
      else
      {
        uint64_t v13 = 0;
      }
      long long v14 = &v13[16 * v9];
      unint64_t v7 = v14 + 16;
      *(void *)long long v14 = -1;
      *((void *)v14 + 1) = -1;
      if (v6 != v8)
      {
        do
        {
          *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
          v14 -= 16;
          v6 -= 16;
        }
        while (v6 != v8);
        uint64_t v6 = (char *)a1[6];
      }
      a1[6] = v14;
      a1[7] = v7;
      a1[8] = &v13[16 * v12];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      unint64_t v7 = v6 + 16;
      *(void *)uint64_t v6 = -1;
      *((void *)v6 + 1) = -1;
    }
    a1[7] = v7;
    return (((unint64_t)v7 - a1[6]) >> 4) - 1;
  }
  else
  {
    uint64_t result = *(unsigned int *)(v2 - 4);
    a1[1] = v2 - 4;
    uint64_t v4 = (void *)(a1[6] + 16 * result);
    *uint64_t v4 = -1;
    v4[1] = -1;
  }
  return result;
}

float geom::anonymous namespace'::max_heap<geom::anonymous namespace'::hull_mesh<float>::conflict_face,geom::anonymous namespace'::hull_mesh<float>::conflict_face_selector_cmp>::remove(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = a1[3];
  if (v2 < (a1[4] - v3) >> 2)
  {
    uint64_t v4 = *(unsigned int *)(v3 + 4 * v2);
    if (v4)
    {
      uint64_t v5 = *a1;
      uint64_t v6 = a1[1];
      unint64_t v7 = (_DWORD *)(*a1 + 12 * v4);
      *(_DWORD *)(v3 + 4 * *v7) = 0;
      unsigned int v9 = *(_DWORD *)(v6 - 12);
      v6 -= 12;
      uint64_t v8 = v9;
      uint64_t v10 = *(void *)(v6 + 4);
      a1[1] = v6;
      if (0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 2) != v4)
      {
        *unint64_t v7 = v8;
        *(void *)(v5 + 12 * v4 + 4) = v10;
        *(_DWORD *)(a1[3] + 4 * v8) = v4;
        unint64_t v11 = (2 * v4);
        uint64_t v12 = *a1;
        unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 2);
        while (v13 > v11)
        {
          unint64_t v14 = v11 | 1;
          if (v13 <= v14)
          {
            LODWORD(v14) = v11;
          }
          else if (*(float *)(v12 + 12 * v11 + 8) >= *(float *)(v12 + 12 * v14 + 8))
          {
            LODWORD(v14) = v11;
          }
          float result = *(float *)(v12 + 12 * v14 + 8);
          if (result < *(float *)(v12 + 12 * v4 + 8)) {
            break;
          }
          long long v16 = (int *)(v12 + 12 * v4);
          uint64_t v17 = (int *)(v12 + 12 * v14);
          int v18 = *v16;
          *long long v16 = *v17;
          int *v17 = v18;
          uint64_t v19 = *(void *)(v16 + 1);
          *(void *)(v16 + 1) = *(void *)(v17 + 1);
          *(void *)(v17 + 1) = v19;
          uint64_t v12 = *a1;
          uint64_t v20 = a1[1];
          uint64_t v21 = a1[3];
          *(_DWORD *)(v21 + 4 * *(unsigned int *)(*a1 + 12 * v4)) = v4;
          *(_DWORD *)(v21 + 4 * *(unsigned int *)(v12 + 12 * v14)) = v14;
          unint64_t v11 = (2 * v14);
          unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v20 - v12) >> 2);
          LODWORD(v4) = v14;
        }
      }
    }
  }
  return result;
}

void geom::anonymous namespace'::max_heap<geom::anonymous namespace'::hull_mesh<float>::conflict_face,geom::anonymous namespace'::hull_mesh<float>::conflict_face_selector_cmp>::insert(std::vector<int> *a1, unsigned int *a2, uint64_t *a3)
{
  std::vector<int>::pointer end = a1->__end_;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (end - a1->__begin_);
  unint64_t v8 = *a2;
  begiunsigned __int16 n = a1[1].__begin_;
  unsigned int v9 = a1 + 1;
  std::vector<int>::pointer v10 = begin;
  if (v8 >= a1[1].__end_ - begin)
  {
    std::vector<int>::value_type __x = 0;
    std::vector<unsigned int>::resize(v9, (v8 + 1), &__x);
    unint64_t v8 = *a2;
    std::vector<int>::pointer v10 = a1[1].__begin_;
    std::vector<int>::pointer end = a1->__end_;
  }
  v10[v8] = v7;
  int v12 = *a2;
  uint64_t v13 = *a3;
  unint64_t value = (unint64_t)a1->__end_cap_.__value_;
  if ((unint64_t)end >= value)
  {
    std::vector<int>::pointer v16 = a1->__begin_;
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (end - a1->__begin_);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0x1555555555555555) {
      abort();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(value - (void)v16) >> 2);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v20 = 0x1555555555555555;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 > 0x1555555555555555) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v21 = (char *)operator new(12 * v20);
    }
    else
    {
      uint64_t v21 = 0;
    }
    uint64_t v22 = &v21[12 * v17];
    *(_DWORD *)uint64_t v22 = v12;
    *(void *)(v22 + 4) = v13;
    long long v15 = (int *)(v22 + 12);
    if (end != v16)
    {
      do
      {
        uint64_t v23 = *(void *)(end - 3);
        end -= 3;
        int v24 = end[2];
        *(void *)(v22 - 12) = v23;
        v22 -= 12;
        *((_DWORD *)v22 + 2) = v24;
      }
      while (end != v16);
      std::vector<int>::pointer end = a1->__begin_;
    }
    a1->__begin_ = (std::vector<int>::pointer)v22;
    a1->__end_ = v15;
    a1->__end_cap_.__value_ = (int *)&v21[12 * v20];
    if (end) {
      operator delete(end);
    }
  }
  else
  {
    unsigned int *end = v12;
    *(void *)(end + 1) = v13;
    long long v15 = end + 3;
  }
  unint64_t v25 = v7;
  a1->__end_ = v15;
  if (v7 >= 2uLL)
  {
    std::vector<int>::pointer v26 = a1->__begin_;
    do
    {
      unint64_t v27 = v25 >> 1;
      if (*(float *)&v26[3 * v25 + 2] < *(float *)&v26[3 * (v25 >> 1) + 2]) {
        break;
      }
      float32x4_t v28 = &v26[3 * v27];
      float32x4_t v29 = &v26[3 * v25];
      int v30 = *v29;
      *float32x4_t v29 = *v28;
      *float32x4_t v28 = v30;
      uint64_t v31 = *(void *)(v29 + 1);
      *(void *)(v29 + 1) = *(void *)(v28 + 1);
      *(void *)(v28 + 1) = v31;
      std::vector<int>::pointer v26 = a1->__begin_;
      std::vector<int>::pointer v32 = a1[1].__begin_;
      v32[a1->__begin_[3 * v25]] = v25;
      v32[v26[3 * v27]] = v27;
      BOOL v33 = v25 > 3;
      v25 >>= 1;
    }
    while (v33);
  }
}

void geom::anonymous namespace'::hull_mesh<float>::dissolve_edge_if_coplanar(uint64_t a1, int a2, unsigned int **a3, char **a4)
{
  int v112 = a2;
  BOOL v110 = (void *)(a1 + 400);
  std::deque<unsigned int>::push_back((void *)(a1 + 400), &v112);
  uint64_t v5 = *(void *)(a1 + 440);
  if (v5)
  {
    uint64_t v97 = (uint64_t)(a4 + 2);
    do
    {
      uint64_t v6 = *(unsigned int *)(*(void *)(*(void *)(a1 + 408) + ((*(void *)(a1 + 432) >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * (*(void *)(a1 + 432) & 0x3FFLL));
      ++*(void *)(a1 + 432);
      *(void *)(a1 + 440) = v5 - 1;
      std::deque<unsigned int>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)v110, 1);
      uint64_t v8 = *(void *)(a1 + 48);
      unsigned int v9 = *(_DWORD *)(v8 + 16 * v6);
      if (v9 != -1)
      {
        uint64_t v10 = v8 + 16 * v6;
        unsigned int v13 = *(_DWORD *)(v10 + 4);
        unint64_t v11 = (unsigned int *)(v10 + 4);
        uint64_t v12 = v13;
        unsigned int v14 = *(_DWORD *)(v8 + 16 * v13);
        if (v14 != -1 && v14 != v9)
        {
          uint64_t v16 = *(void *)(a1 + 72);
          uint64_t v17 = v16 + 80 * v9;
          int v19 = *(unsigned __int8 *)(v17 + 36);
          unint64_t v18 = (BOOL *)(v17 + 36);
          if (!(v19 | *(unsigned __int8 *)(v16 + 80 * v14 + 36)))
          {
            unint64_t v20 = (float32x4_t *)(v16 + 80 * v9);
            float32x4_t v22 = v20[1];
            uint64_t v21 = v20 + 1;
            float32x4_t v23 = v22;
            int v24 = (float32x4_t *)(v16 + 80 * v14);
            float32x4_t v25 = v24[1];
            f32 = v24[2].f32;
            float32x4_t v27 = vld1q_dup_f32(f32);
            float32x4_t v28 = vdivq_f32(v25, v27);
            v7.i32[0] = v21[1].i32[0];
            float32x4_t v29 = vdivq_f32(v22, (float32x4_t)vdupq_lane_s32(v7, 0));
            float32x4_t v30 = vmulq_f32(v28, v29);
            float32x4_t v31 = vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1));
            int32x2_t v32 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), v31).u64[0];
            if (*(float *)v32.i32 > 0.0)
            {
              float32x4_t v33 = v24[3];
              unsigned int v34 = v24[4].u32[0];
              *(float *)v32.i32 = (float)v34;
              v31.f32[0] = (float)v21[3].u32[0];
              float32x4_t v35 = vdivq_f32(v33, (float32x4_t)vdupq_lane_s32(v32, 0));
              float32x4_t v36 = vdivq_f32(v21[2], (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 0));
              float32x4_t v37 = vmulq_f32(vsubq_f32(v35, v36), v29);
              LODWORD(v38) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).u32[0];
              float v39 = *(float *)(a1 + 528);
              float v40 = -v39;
              float32x4_t v41 = vmulq_f32(vsubq_f32(v36, v35), v28);
              float v42 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0];
              BOOL v43 = v42 <= v39 && v42 < v40;
              BOOL v44 = v43 && v38 <= v39;
              if (!v44 || v38 >= v40)
              {
                unint64_t v108 = v18;
                float32x4_t v106 = v25;
                float32x4_t v107 = v23;
                float32x4_t v105 = v21[2];
                unsigned int v103 = v34;
                __int32 v104 = v21[3].i32[0];
                float32x4_t v102 = v33;
                if (is_halfedge_dissolvable && v46)
                {
                  uint64_t v47 = *(unsigned int *)(v8 + 16 * v6 + 8);
                  uint64_t v48 = *(unsigned int *)(v8 + 16 * v12 + 8);
                  unsigned int v98 = *(_DWORD *)(v8 + 16 * *(unsigned int *)(v8 + 16 * v48 + 4) + 8);
                  unsigned int v101 = *(_DWORD *)(v8 + 16 * *(unsigned int *)(v8 + 16 * v47 + 4) + 8);
                  unsigned int v49 = v6;
                  do
                  {
                    uint64_t v50 = v8 + 16 * v49;
                    unsigned int v52 = *(_DWORD *)(v50 + 8);
                    uint64_t v51 = (_DWORD *)(v50 + 8);
                    unsigned int v49 = v52;
                  }
                  while (v52 != v6);
                  unsigned int v53 = v12;
                  do
                  {
                    uint64_t v54 = v8 + 16 * v53;
                    unsigned int v56 = *(_DWORD *)(v54 + 8);
                    uint64_t v55 = (_DWORD *)(v54 + 8);
                    unsigned int v53 = v56;
                  }
                  while (v56 != v12);
                  v113[0] = v9;
                  uint64_t v57 = *(unsigned int *)(v8 + 16 * v6 + 12);
                  uint64_t v58 = *(void *)(a1 + 96);
                  uint64_t v59 = *(unsigned int *)(v8 + 16 * v12 + 12);
                  float32x4_t v60 = vaddq_f32(v106, v107);
                  float32x4_t v61 = vmulq_f32(v60, v60);
                  float32x4_t *v21 = v60;
                  v60.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v61, 2), vaddq_f32(v61, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v61.f32, 1))).f32[0]);
                  v21[1].i32[0] = v60.i32[0];
                  *unint64_t v108 = v60.f32[0] <= 0.00000011921;
                  v21[2] = vaddq_f32(v105, vsubq_f32(v102, vaddq_f32(*(float32x4_t *)(v58 + 16 * v57), *(float32x4_t *)(v58 + 16 * v59))));
                  v21[3].i32[0] = v103 + v104 - 2;
                  uint64_t v62 = *v11;
                  uint64_t v63 = *(void *)(a1 + 48);
                  uint64_t v64 = v62;
                  do
                  {
                    float64x2_t v65 = (unsigned int *)(v63 + 16 * v64);
                    *float64x2_t v65 = v9;
                    uint64_t v64 = v65[2];
                  }
                  while (v64 != v62);
                  *uint64_t v51 = v48;
                  *uint64_t v55 = v47;
                  *(_DWORD *)(v16 + 80 * v9) = v47;
                  uint64_t v66 = v16 + 80 * v9;
                  int v69 = *(_DWORD *)(v66 + 68);
                  int8x16_t v68 = (int *)(v66 + 68);
                  int v67 = v69;
                  if (v69 != -1)
                  {
                    unint64_t v71 = a4[1];
                    unint64_t v70 = (unint64_t)a4[2];
                    if ((unint64_t)v71 >= v70)
                    {
                      uint64_t v73 = *a4;
                      uint64_t v74 = (v71 - *a4) >> 2;
                      unint64_t v75 = v74 + 1;
                      if ((unint64_t)(v74 + 1) >> 62) {
                        goto LABEL_72;
                      }
                      uint64_t v76 = v70 - (void)v73;
                      if (v76 >> 1 > v75) {
                        unint64_t v75 = v76 >> 1;
                      }
                      if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v77 = v75;
                      }
                      if (v77)
                      {
                        unsigned int v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v97, v77);
                        uint64_t v73 = *a4;
                        unint64_t v71 = a4[1];
                        int v67 = *v68;
                      }
                      else
                      {
                        unsigned int v78 = 0;
                      }
                      long long v79 = &v78[4 * v74];
                      *(_DWORD *)long long v79 = v67;
                      long long v72 = v79 + 4;
                      while (v71 != v73)
                      {
                        int v80 = *((_DWORD *)v71 - 1);
                        v71 -= 4;
                        *((_DWORD *)v79 - 1) = v80;
                        v79 -= 4;
                      }
                      *a4 = v79;
                      a4[1] = v72;
                      a4[2] = &v78[4 * v77];
                      if (v73) {
                        operator delete(v73);
                      }
                    }
                    else
                    {
                      *(_DWORD *)unint64_t v71 = v67;
                      long long v72 = v71 + 4;
                    }
                    a4[1] = v72;
                    *int8x16_t v68 = -1;
                  }
                  uint64_t v81 = v16 + 80 * v14;
                  int v84 = *(_DWORD *)(v81 + 68);
                  float64x2_t v83 = (int *)(v81 + 68);
                  int v82 = v84;
                  if (v84 != -1)
                  {
                    uint64_t v86 = a4[1];
                    unint64_t v85 = (unint64_t)a4[2];
                    if ((unint64_t)v86 >= v85)
                    {
                      unsigned int v88 = *a4;
                      uint64_t v89 = (v86 - *a4) >> 2;
                      unint64_t v90 = v89 + 1;
                      if ((unint64_t)(v89 + 1) >> 62) {
LABEL_72:
                      }
                        abort();
                      uint64_t v91 = v85 - (void)v88;
                      if (v91 >> 1 > v90) {
                        unint64_t v90 = v91 >> 1;
                      }
                      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v92 = v90;
                      }
                      if (v92)
                      {
                        int v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v97, v92);
                        unsigned int v88 = *a4;
                        uint64_t v86 = a4[1];
                        int v82 = *v83;
                      }
                      else
                      {
                        int v93 = 0;
                      }
                      unsigned int v94 = &v93[4 * v89];
                      *(_DWORD *)unsigned int v94 = v82;
                      uint64_t v87 = v94 + 4;
                      while (v86 != v88)
                      {
                        int v95 = *((_DWORD *)v86 - 1);
                        v86 -= 4;
                        *((_DWORD *)v94 - 1) = v95;
                        v94 -= 4;
                      }
                      *a4 = v94;
                      a4[1] = v87;
                      a4[2] = &v93[4 * v92];
                      if (v88) {
                        operator delete(v88);
                      }
                    }
                    else
                    {
                      *(_DWORD *)uint64_t v86 = v82;
                      uint64_t v87 = v86 + 4;
                    }
                    a4[1] = v87;
                    *float64x2_t v83 = -1;
                  }
                  if (!*v108)
                  {
                  }
                  v113[0] = 0;
                  int v111 = 0;
                  int v111 = v96;
                  if (v113[0] != -1)
                  {
                    std::deque<unsigned int>::push_back(v110, v113);
                    int v96 = v111;
                  }
                  if (v96 != -1) {
                    std::deque<unsigned int>::push_back(v110, &v111);
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v5 = *(void *)(a1 + 440);
    }
    while (v5);
  }
}

void geom::anonymous namespace'::integer_hashset::populate(unsigned int *a1, std::vector<unsigned int> *this)
{
  std::vector<unsigned int>::reserve(this, *a1 + this->__end_ - this->__begin_);
  uint64_t v4 = (unsigned int *)*((void *)a1 + 1);
  for (std::vector<int>::pointer i = (unsigned int *)*((void *)a1 + 2); v4 != i; ++v4)
  {
    unsigned int v6 = *v4;
    if (*v4 != -1)
    {
      std::vector<unsigned int>::pointer end = this->__end_;
      unint64_t value = this->__end_cap_.__value_;
      if (end >= value)
      {
        begiunsigned __int16 n = this->__begin_;
        uint64_t v11 = end - this->__begin_;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          abort();
        }
        uint64_t v13 = (char *)value - (char *)begin;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          long long v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this->__end_cap_, v14);
          begiunsigned __int16 n = this->__begin_;
          std::vector<unsigned int>::pointer end = this->__end_;
        }
        else
        {
          long long v15 = 0;
        }
        uint64_t v16 = (unsigned int *)&v15[4 * v11];
        *uint64_t v16 = v6;
        unsigned int v9 = v16 + 1;
        while (end != begin)
        {
          unsigned int v17 = *--end;
          *--uint64_t v16 = v17;
        }
        this->__begin_ = v16;
        this->__end_ = v9;
        this->__end_cap_.__value_ = (unsigned int *)&v15[4 * v14];
        if (begin) {
          operator delete(begin);
        }
      }
      else
      {
        unsigned int *end = v6;
        unsigned int v9 = end + 1;
      }
      this->__end_ = v9;
    }
  }
}

uint64_t geom::partitioned_set::init(std::vector<int> *this, unsigned int a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v7 = 0;
    unsigned int v8 = 0;
    unsigned int v9 = 0;
    p_end_cap = &this[3].__end_cap_;
    std::vector<unsigned int>::pointer end = this[3].__end_;
    do
    {
      uint64_t v12 = v8 + *(_DWORD *)(a3 + 4 * v7) - 1;
      if (end >= p_end_cap->__value_)
      {
        begiunsigned __int16 n = this[3].__begin_;
        uint64_t v14 = ((char *)end - (char *)begin) >> 3;
        if ((unint64_t)(v14 + 1) >> 61) {
          abort();
        }
        uint64_t v15 = (char *)p_end_cap->__value_ - (char *)begin;
        uint64_t v16 = v15 >> 2;
        if (v15 >> 2 <= (unint64_t)(v14 + 1)) {
          uint64_t v16 = v14 + 1;
        }
        if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v17 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v16;
        }
        if (v17) {
          unint64_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&this[3].__end_cap_, v17);
        }
        else {
          unint64_t v18 = 0;
        }
        int v19 = (int *)&v18[8 * v14];
        *(void *)int v19 = v8 | (unint64_t)(v12 << 32);
        std::vector<unsigned int>::pointer end = v19 + 2;
        std::vector<int>::pointer v21 = this[3].__begin_;
        std::vector<int>::pointer v20 = this[3].__end_;
        if (v20 != v21)
        {
          do
          {
            uint64_t v22 = *((void *)v20 - 1);
            v20 -= 2;
            *((void *)v19 - 1) = v22;
            v19 -= 2;
          }
          while (v20 != v21);
          std::vector<int>::pointer v20 = this[3].__begin_;
        }
        this[3].__begin_ = v19;
        this[3].__end_ = end;
        this[3].__end_cap_.__value_ = (int *)&v18[8 * v17];
        if (v20) {
          operator delete(v20);
        }
      }
      else
      {
        *(void *)std::vector<unsigned int>::pointer end = v8 | (unint64_t)(v12 << 32);
        end += 2;
      }
      this[3].__end_ = end;
      v8 += *(_DWORD *)(a3 + 4 * v7);
      uint64_t v7 = ++v9;
    }
    while (a4 > v9);
  }
  std::vector<unsigned int>::resize(this, a2, &geom::partitioned_set::null_index);
  std::vector<unsigned int>::resize(this + 1, a2, &geom::partitioned_set::null_index);
  std::vector<unsigned int>::resize(this + 2, a2, &geom::partitioned_set::null_index);
  std::vector<int>::pointer v23 = this[3].__begin_;
  std::vector<int>::pointer v24 = this[3].__end_;
  uint64_t v25 = (char *)v24 - (char *)v23;
  if (v24 != v23)
  {
    uint64_t v26 = 0;
    unint64_t v27 = v25 >> 3;
    do
    {
      float32x4_t v28 = &v23[2 * v26];
      unsigned int v29 = *v28;
      float32x4_t v30 = (unsigned int *)(v28 + 1);
      unsigned int v31 = v28[1];
      while (v29 <= v31)
      {
        if (v29 != v31) {
          this->__begin_[v29] = v29 + 1;
        }
        int v32 = v29;
        if (v29 != *v28)
        {
          this[1].__begin_[v29] = v29 - 1;
          int v32 = *v28;
        }
        unsigned int v31 = *v30;
        if (v29 == *v30 || v29 == v32)
        {
          this[2].__begin_[v29] = v26;
          unsigned int v31 = *v30;
        }
        ++v29;
      }
      ++v26;
    }
    while (v27 > v26);
  }
  return geom::bvh<float,(unsigned char)2>::invariant_check(this);
}

void std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::~__func()
{
}

__n128 std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_26EA03CB0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA03CB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, double a3, double a4)
{
  uint64_t v4 = *a2;
  if (*(_DWORD *)(a1 + 8) == v4 || *(_DWORD *)(a1 + 12) == v4 || *(_DWORD *)(a1 + 16) == v4) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24)) {
    return 1;
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = *(void *)(v8 + 96);
  uint64_t v10 = *(void *)(v8 + 72) + 80 * *(unsigned int *)(a1 + 20);
  *(float *)&a4 = (float)*(unsigned int *)(v10 + 64);
  float32x4_t v11 = vdivq_f32(*(float32x4_t *)(v10 + 48), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&a4, 0));
  float32x4_t v12 = *(float32x4_t *)(v10 + 16);
  v10 += 32;
  float32x4_t v13 = vld1q_dup_f32((const float *)v10);
  float32x4_t v14 = vmulq_f32(vsubq_f32(*(float32x4_t *)(v9 + 16 * v4), v11), vdivq_f32(v12, v13));
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0] > 0.0)return 1; {
  else
  }
    return 2;
}

uint64_t std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::target_type()
{
}

uint64_t std::__function::__value_func<unsigned int ()(unsigned int const&)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  uint64_t v3;

  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = v3;
      *(void *)(a2 + 24) = 0;
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t std::__function::__value_func<unsigned int ()(unsigned int)>::__value_func[abi:nn180100]<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>>(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 24) = 0;
  if (*(void *)(a2 + 24))
  {
    uint64_t v4 = operator new(0x28uLL);
    *uint64_t v4 = &unk_26EA03D40;
    std::__function::__value_func<unsigned int ()(unsigned int const&)>::__value_func[abi:nn180100]((uint64_t)(v4 + 1), a2);
    *(void *)(a1 + 24) = v4;
  }
  return a1;
}

void *std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_26EA03D40;
  std::__function::__value_func<unsigned int ()(unsigned int const&)>::~__value_func[abi:nn180100](a1 + 1);
  return a1;
}

void std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::~__func(void *a1)
{
  *a1 = &unk_26EA03D40;
  std::__function::__value_func<unsigned int ()(unsigned int const&)>::~__value_func[abi:nn180100](a1 + 1);
  JUMPOUT(0x237E10720);
}

void *std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  unint64_t v2 = operator new(0x28uLL);
  *unint64_t v2 = &unk_26EA03D40;
  std::__function::__value_func<unsigned int ()(unsigned int const&)>::__value_func[abi:nn180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26EA03D40;
  return std::__function::__value_func<unsigned int ()(unsigned int const&)>::__value_func[abi:nn180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<unsigned int ()(unsigned int const&)>::~__value_func[abi:nn180100]((void *)(a1 + 8));
}

void std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<unsigned int ()(unsigned int const&)>::~__value_func[abi:nn180100](a1 + 1);
  operator delete(a1);
}

uint64_t std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::operator()(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (v1)
  {
    unint64_t v2 = *(uint64_t (**)(void))(*(void *)v1 + 48);
    return v2();
  }
  else
  {
    uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
    return std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()>::target(v4);
  }
}

uint64_t std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<std::function<unsigned int ()(unsigned int const&)>,std::allocator<std::function<unsigned int ()(unsigned int const&)>>,unsigned int ()(unsigned int)>::target_type()
{
}

void *std::__throw_bad_function_call[abi:nn180100]()
{
  std::__libcpp_verbose_abort("bad_function_call was thrown in -fno-exceptions mode");
  return std::__function::__value_func<unsigned int ()>::~__value_func[abi:nn180100](v0);
}

void *std::__function::__value_func<unsigned int ()(unsigned int)>::~__value_func[abi:nn180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<unsigned int ()(unsigned int const&)>::~__value_func[abi:nn180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void geom::anonymous namespace'::hull_mesh<float>::delete_face(void *a1, unsigned int a2, int a3)
{
  unsigned int v23 = a2;
  uint64_t v6 = a1[9];
  uint64_t v7 = (unsigned int *)(v6 + 80 * a2);
  if (a3)
  {
    unsigned int v8 = *v7;
    do
    {
      unsigned int v9 = *(_DWORD *)(a1[6] + 16 * v8 + 8);
      unsigned int v8 = v9;
    }
    while (v9 != *v7);
  }
  *uint64_t v7 = -1;
  uint64_t v10 = v6 + 80 * a2;
  *(void *)(v10 + 16) = 0;
  *(void *)(v10 + 24) = 0;
  *(_DWORD *)(v10 + 32) = 0;
  *(unsigned char *)(v10 + 36) = 1;
  *(void *)(v10 + 48) = 0;
  *(void *)(v10 + 56) = 0;
  *(_DWORD *)(v10 + 64) = 0;
  unint64_t v11 = a1[5];
  float32x4_t v12 = (unsigned int *)a1[4];
  if ((unint64_t)v12 >= v11)
  {
    float32x4_t v14 = (unsigned int *)a1[3];
    uint64_t v15 = v12 - v14;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62) {
      abort();
    }
    uint64_t v17 = v11 - (void)v14;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      int v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 5), v18);
      float32x4_t v14 = (unsigned int *)a1[3];
      float32x4_t v12 = (unsigned int *)a1[4];
    }
    else
    {
      int v19 = 0;
    }
    std::vector<int>::pointer v20 = (unsigned int *)&v19[4 * v15];
    std::vector<int>::pointer v21 = &v19[4 * v18];
    *std::vector<int>::pointer v20 = a2;
    float32x4_t v13 = v20 + 1;
    while (v12 != v14)
    {
      unsigned int v22 = *--v12;
      *--std::vector<int>::pointer v20 = v22;
    }
    a1[3] = v20;
    a1[4] = v13;
    a1[5] = v21;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *float32x4_t v12 = a2;
    float32x4_t v13 = v12 + 1;
  }
  a1[4] = v13;
}

void std::vector<unsigned int>::resize(std::vector<int> *this, std::vector<int>::size_type __sz)
{
  std::vector<int>::size_type v2 = this->__end_ - this->__begin_;
  if (__sz <= v2)
  {
    if (__sz < v2) {
      this->__end_ = &this->__begin_[__sz];
    }
  }
  else
  {
    std::vector<unsigned int>::__append(this, __sz - v2);
  }
}

double geom::anonymous namespace'::integer_hashset::insert(unsigned int **this, unsigned int a2)
{
  uint64_t v6 = this[1];
  if (v6[v4] == -1)
  {
    v6[v4] = a2;
    unsigned int v7 = *(_DWORD *)this + 1;
    *(_DWORD *)this = v7;
    unint64_t v8 = (unint64_t)((char *)this[2] - (char *)v6) >> 2;
    double result = *((double *)this + 4) * (double)v8;
    if (v7 > result)
    {
      unsigned int v9 = 2 * v8;
      memset(&v18, 0, sizeof(v18));
      uint64_t v10 = this[1];
      unint64_t v11 = this[2];
      if (v10 != v11)
      {
        begiunsigned __int16 n = v18.__begin_;
        float32x4_t v13 = this[1];
        do
        {
          unsigned int v14 = *v13;
          if (*v13 != -1)
          {
            unsigned int v15 = 73244475 * ((73244475 * (v14 ^ HIWORD(v14))) ^ ((73244475 * (v14 ^ HIWORD(v14))) >> 16));
            unsigned int v16 = v15 ^ HIWORD(v15);
            do
            {
              uint64_t v17 = v16 % v9;
              unsigned int v16 = v17 + 1;
            }
            while (begin[v17] != -1);
            begin[v17] = v14;
          }
          ++v13;
        }
        while (v13 != v11);
      }
      if (v10)
      {
        this[2] = v10;
        operator delete(v10);
      }
      double result = *(double *)&v18.__begin_;
      *(std::vector<int> *)(this + 1) = v18;
    }
  }
  return result;
}

void geom::anonymous namespace'::hull_mesh<float>::delete_halfedge(uint64_t a1, unsigned int a2)
{
  unsigned int v4 = (void *)(*(void *)(a1 + 48) + 16 * a2);
  *unsigned int v4 = -1;
  v4[1] = -1;
  uint64_t v5 = a1 + 16;
  unint64_t v6 = *(void *)(a1 + 16);
  unsigned int v7 = *(unsigned int **)(a1 + 8);
  if ((unint64_t)v7 >= v6)
  {
    unsigned int v9 = *(unsigned int **)a1;
    uint64_t v10 = ((uint64_t)v7 - *(void *)a1) >> 2;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 62) {
      abort();
    }
    uint64_t v12 = v6 - (void)v9;
    if (v12 >> 1 > v11) {
      unint64_t v11 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v5, v13);
      unsigned int v9 = *(unsigned int **)a1;
      unsigned int v7 = *(unsigned int **)(a1 + 8);
    }
    else
    {
      unsigned int v14 = 0;
    }
    unsigned int v15 = &v14[4 * v10];
    unsigned int v16 = &v14[4 * v13];
    *(_DWORD *)unsigned int v15 = a2;
    unint64_t v8 = v15 + 4;
    while (v7 != v9)
    {
      int v17 = *--v7;
      *((_DWORD *)v15 - 1) = v17;
      v15 -= 4;
    }
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v16;
    if (v9) {
      operator delete(v9);
    }
  }
  else
  {
    *unsigned int v7 = a2;
    unint64_t v8 = v7 + 1;
  }
  *(void *)(a1 + 8) = v8;
}

void std::vector<unsigned int>::__append(std::vector<int> *this, std::vector<int>::size_type __n)
{
  unint64_t value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  uint64_t v5 = value;
  std::vector<unsigned int>::pointer end = p_end_cap[-1].__value_;
  if (__n <= value - end)
  {
    if (__n)
    {
      bzero(p_end_cap[-1].__value_, 4 * __n);
      end += __n;
    }
    this->__end_ = end;
  }
  else
  {
    begiunsigned __int16 n = this->__begin_;
    uint64_t v9 = (char *)end - (char *)this->__begin_;
    unint64_t v10 = __n + (v9 >> 2);
    if (v10 >> 62) {
      abort();
    }
    uint64_t v11 = v9 >> 2;
    uint64_t v12 = (char *)v5 - (char *)begin;
    if (v12 >> 1 > v10) {
      unint64_t v10 = v12 >> 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      unsigned int v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, v13);
      begiunsigned __int16 n = this->__begin_;
      std::vector<unsigned int>::pointer end = this->__end_;
    }
    else
    {
      unsigned int v14 = 0;
    }
    unsigned int v15 = &v14[4 * v11];
    unsigned int v16 = (int *)&v14[4 * v13];
    bzero(v15, 4 * __n);
    int v17 = (int *)&v15[4 * __n];
    while (end != begin)
    {
      int v18 = *--end;
      *((_DWORD *)v15 - 1) = v18;
      v15 -= 4;
    }
    this->__begin_ = (std::vector<int>::pointer)v15;
    this->__end_ = v17;
    this->__end_cap_.__value_ = v16;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

uint64_t geom::anonymous namespace'::integer_hashset::index_of(geom::_anonymous_namespace_::integer_hashset *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 1);
  unint64_t v3 = (unint64_t)(*((void *)this + 2) - v2) >> 2;
  unsigned int v4 = 73244475 * ((73244475 * (a2 ^ HIWORD(a2))) ^ ((73244475 * (a2 ^ HIWORD(a2))) >> 16));
  unsigned int v5 = v4 ^ HIWORD(v4);
  do
  {
    uint64_t result = v5 % v3;
    int v7 = *(_DWORD *)(v2 + 4 * result);
    unsigned int v5 = result + 1;
  }
  while (v7 != a2 && v7 != -1);
  return result;
}

uint64_t std::function<BOOL ()(unsigned int)>::operator()(uint64_t a1, int a2)
{
  int v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x236E03714);
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

void std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::~__func()
{
}

__n128 std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26EA03E30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA03E30;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(v2 + 72);
  if (*(unsigned char *)(v3 + 80 * *a2 + 36)) {
    return 1;
  }
  unsigned int v5 = (float32x4_t *)(v3 + 80 * *a2);
  uint64_t v6 = *(unsigned int *)(*(void *)(v2 + 48) + 16 * v5->u32[0] + 12);
  float32x4_t v7 = v5[1];
  v5 += 2;
  float32x4_t v8 = vld1q_dup_f32(v5->f32);
  float32x4_t v9 = vmulq_f32(vsubq_f32(*(float32x4_t *)*(void *)(a1 + 16), *(float32x4_t *)(*(void *)(v2 + 96) + 16 * v6)), vdivq_f32(v7, v8));
  return vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0] >= (float)-*(float *)(v2 + 528);
}

uint64_t std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,float &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(unsigned int)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL geom::anonymous namespace'::hull_mesh<float>::is_halfedge_dissolvable(uint64_t a1, unsigned int a2)
{
  uint64_t v2 = *(void *)(a1 + 48);
  uint64_t v3 = *(unsigned int *)(v2 + 16 * a2 + 4);
  int v4 = (unsigned int *)(v2 + 16 * *(unsigned int *)(v2 + 16 * v3 + 8));
  uint64_t v5 = v4[1];
  uint64_t v6 = v2 + 16 * v5;
  float32x4_t v7 = (unsigned int *)(v2 + 16 * *(unsigned int *)(v6 + 8));
  uint64_t v8 = v7[1];
  if (*(_DWORD *)(v2 + 16 * v8 + 8) != a2) {
    return 1;
  }
  if (*(_DWORD *)(v2
                 + 16
                 * *(unsigned int *)(v2
                                   + 16
                                   * *(unsigned int *)(v2
                                                     + 16
                                                     * *(unsigned int *)(v2
                                                                       + 16
                                                                       * *(unsigned int *)(v2
                                                                                         + 16
                                                                                         * *(unsigned int *)(v6 + 4)
                                                                                         + 8)
                                                                       + 4)
                                                     + 8)
                                   + 4)
                 + 8) == v5)
    return 0;
  uint64_t v9 = v2 + 16 * v8;
  if (*(_DWORD *)(v2
                 + 16
                 * *(unsigned int *)(v2
                                   + 16
                                   * *(unsigned int *)(v2
                                                     + 16
                                                     * *(unsigned int *)(v2
                                                                       + 16
                                                                       * *(unsigned int *)(v2
                                                                                         + 16
                                                                                         * *(unsigned int *)(v9 + 4)
                                                                                         + 8)
                                                                       + 4)
                                                     + 8)
                                   + 4)
                 + 8) == v8)
    return 0;
  uint64_t v10 = *(void *)(a1 + 72);
  unsigned int v11 = *v7;
  int v12 = *(_DWORD *)(v10 + 80 * *v7 + 64);
  if (v12 == 3) {
    return 0;
  }
  unint64_t v13 = (unsigned int *)(v2 + 16 * a2);
  unsigned int v16 = *v13;
  unsigned int v14 = v13 + 3;
  unsigned int v15 = v16;
  int v17 = *(_DWORD *)(v10 + 80 * v16 + 64);
  if (v17 == 3) {
    return 0;
  }
  int v18 = (float32x4_t *)(v10 + 80 * v11);
  float32x4_t v19 = v18[1];
  float32x4_t v20 = vaddq_f32(v19, *(float32x4_t *)(v10 + 80 * v15 + 16));
  float32x4_t v21 = vmulq_f32(v20, v20);
  float32x4_t v22 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1);
  v22.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, v22)).f32[0]);
  if (fabsf(v22.f32[0]) <= 0.00000011921) {
    return 1;
  }
  uint64_t v23 = v2 + 16 * v3;
  uint64_t v24 = *(void *)(a1 + 96);
  float32x4_t v25 = *(float32x4_t *)(v24 + 16 * *v14);
  uint64_t v26 = (float32x4_t *)(v10 + 80 * *v4);
  v27.i64[0] = 0xC0000000C0000000;
  v27.i64[1] = 0xC0000000C0000000;
  float32x4_t v28 = vmlaq_f32(vsubq_f32(vaddq_f32(v26[3], *(float32x4_t *)(v10 + 80 * v15 + 48)), *(float32x4_t *)(v24 + 16 * *(unsigned int *)(v23 + 12))), v27, v25);
  v27.f32[0] = (float)(v17 + v26[4].i32[0] - 3);
  float32x4_t v29 = vmulq_f32(vdivq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 0)), vsubq_f32(v25, vdivq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 0))));
  float v30 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0];
  float v31 = *(float *)(a1 + 528);
  float v32 = -v31;
  if (v30 > v31 || v30 < v32) {
    return 0;
  }
  float32x4_t v34 = *(float32x4_t *)(v24 + 16 * *(unsigned int *)(v9 + 12));
  float32x4_t v35 = *(float32x4_t *)(v24 + 16 * *(unsigned int *)(v2 + 16 * v5 + 12));
  float32x4_t v36 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), (int8x16_t)v34, 0xCuLL);
  float32x4_t v37 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), (int8x16_t)v35, 0xCuLL);
  float32x4_t v38 = vnegq_f32(v34);
  int32x4_t v39 = (int32x4_t)vmlaq_f32(vmulq_f32(v37, v38), v35, v36);
  int8x16_t v40 = (int8x16_t)vuzp1q_s32(v39, v39);
  float32x4_t v41 = (float32x4_t)vextq_s8(v40, (int8x16_t)v39, 0xCuLL);
  *(float *)v40.i32 = (float)(v12 - 1);
  float32x4_t v42 = vaddq_f32(v19, v41);
  float32x4_t v43 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL);
  int32x4_t v44 = (int32x4_t)vmlaq_f32(vmulq_f32(v43, v38), v25, v36);
  float32x4_t v45 = vsubq_f32(v42, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v44, v44), (int8x16_t)v44, 0xCuLL));
  int32x4_t v46 = (int32x4_t)vmlaq_f32(vmulq_f32(v37, vnegq_f32(v25)), v35, v43);
  float32x4_t v47 = vsubq_f32(v45, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v46, v46), (int8x16_t)v46, 0xCuLL));
  float32x4_t v48 = vmulq_f32(v47, v47);
  v48.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v48, 2), vaddq_f32(v48, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 1))).u64[0];
  v48.f32[0] = sqrtf(v48.f32[0]);
  float32x4_t v49 = vmulq_f32(vdivq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v48.f32, 0)), vsubq_f32(v25, vdivq_f32(vsubq_f32(v18[3], v25), (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.i8, 0))));
  float v50 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).f32[0];
  return v50 <= v31 && v50 >= v32;
}

uint64_t geom::anonymous namespace'::hull_mesh<float>::dissolve_vertex_if_redundant(void *a1, unsigned int a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v4 = a1[9];
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[10] - v4) >> 4) - ((uint64_t)(a1[4] - a1[3]) >> 2) == 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = a1[6];
  uint64_t v7 = *(unsigned int *)(v6 + 16 * a2 + 4);
  uint64_t v8 = *(unsigned int *)(v6 + 16 * v7 + 8);
  if (*(_DWORD *)(v6 + 16 * *(unsigned int *)(v6 + 16 * v8 + 4) + 8) != a2) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(v4 + 80 * *(unsigned int *)(v6 + 16 * v7) + 64) >= *(_DWORD *)(v4
                                                                                  + 80
                                                                                  * *(unsigned int *)(v6 + 16 * a2)
                                                                                  + 64))
    uint64_t v11 = a2;
  else {
    uint64_t v11 = v8;
  }
  unsigned int v12 = v11;
  do
  {
    unsigned int v13 = v12;
    unsigned int v12 = *(_DWORD *)(v6 + 16 * v12 + 8);
  }
  while (v12 != v11);
  unsigned int v14 = v13;
  uint64_t v15 = *(unsigned int *)(v6 + 16 * a2 + 8);
  unsigned int v16 = (unsigned int *)(v6 + 16 * v11);
  if (*(_DWORD *)(v6 + 16 * v15 + 8) == v13)
  {
    uint64_t v17 = *v16;
    uint64_t v96 = *(unsigned int *)(v6 + 16 * v13 + 4);
    int v97 = *(_DWORD *)(v6 + 16 * v96 + 8);
    uint64_t v18 = *(unsigned int *)(v6 + 16 * v11 + 4);
    unsigned int v19 = *(_DWORD *)(v6 + 16 * v11 + 4);
    do
    {
      unsigned int v20 = v19;
      unsigned int v19 = *(_DWORD *)(v6 + 16 * v19 + 8);
    }
    while (v19 != v18);
    uint64_t v21 = *(unsigned int *)(v6 + 16 * v18);
    uint64_t v22 = *(unsigned int *)(v6 + 16 * v11 + 12);
    uint64_t v23 = a1[12];
    uint64_t v24 = v21 + 4 * v21;
    float32x4_t v25 = (float32x4_t *)(v4 + 16 * v24);
    float32x4_t v26 = vaddq_f32(*(float32x4_t *)(v4 + 80 * v17 + 16), v25[1]);
    v25[1] = v26;
    float32x4_t v27 = vmulq_f32(v26, v26);
    unsigned int v101 = v21;
    v27.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0]);
    float32x4_t v28 = (float32x4_t *)(a1[9] + 16 * v24);
    v28[2].i32[0] = v27.i32[0];
    v28[2].i8[4] = v27.f32[0] <= 0.00000011921;
    v28[3] = vsubq_f32(v28[3], *(float32x4_t *)(v23 + 16 * v22));
    uint64_t v29 = a1[9];
    --*(_DWORD *)(v29 + 16 * v24 + 64);
    uint64_t v30 = v29 + 80 * v17;
    int v33 = *(_DWORD *)(v30 + 68);
    float v32 = (int *)(v30 + 68);
    int v31 = v33;
    unsigned int v98 = v17;
    if (v33 != -1)
    {
      unint64_t v34 = *(void *)(a4 + 16);
      float32x4_t v35 = *(_DWORD **)(a4 + 8);
      if ((unint64_t)v35 >= v34)
      {
        int8x16_t v68 = *(_DWORD **)a4;
        uint64_t v69 = ((uint64_t)v35 - *(void *)a4) >> 2;
        unint64_t v70 = v69 + 1;
        if ((unint64_t)(v69 + 1) >> 62) {
          goto LABEL_58;
        }
        uint64_t v71 = v34 - (void)v68;
        if (v71 >> 1 > v70) {
          unint64_t v70 = v71 >> 1;
        }
        if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v72 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v72 = v70;
        }
        if (v72)
        {
          uint64_t v73 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v72);
          int8x16_t v68 = *(_DWORD **)a4;
          float32x4_t v35 = *(_DWORD **)(a4 + 8);
          int v31 = *v32;
        }
        else
        {
          uint64_t v73 = 0;
        }
        uint64_t v74 = &v73[4 * v69];
        unint64_t v75 = &v73[4 * v72];
        *(_DWORD *)uint64_t v74 = v31;
        float32x4_t v36 = v74 + 4;
        while (v35 != v68)
        {
          int v76 = *--v35;
          *((_DWORD *)v74 - 1) = v76;
          v74 -= 4;
        }
        *(void *)a4 = v74;
        *(void *)(a4 + 8) = v36;
        *(void *)(a4 + 16) = v75;
        if (v68) {
          operator delete(v68);
        }
        LODWORD(v17) = v98;
      }
      else
      {
        *float32x4_t v35 = v31;
        float32x4_t v36 = v35 + 1;
      }
      *(void *)(a4 + 8) = v36;
      uint64_t v29 = a1[9];
      *(_DWORD *)(v29 + 80 * v17 + 68) = -1;
      LODWORD(v21) = v101;
    }
    uint64_t v77 = v29 + 80 * v21;
    int v80 = *(_DWORD *)(v77 + 68);
    long long v79 = (int *)(v77 + 68);
    int v78 = v80;
    if (v80 == -1)
    {
      unsigned int v84 = v21;
LABEL_55:
      *(_DWORD *)(a1[6] + 16 * v15) = v21;
      uint64_t v94 = a1[9] + 80 * v84;
      *(_DWORD *)uint64_t v94 = v15;
      uint64_t v95 = a1[6];
      *(_DWORD *)(v95 + 16 * v20 + 8) = v15;
      *(_DWORD *)(v95 + 16 * v15 + 8) = v97;
      if (!*(unsigned char *)(v94 + 36))
      {
      }
      return v15;
    }
    unint64_t v81 = *(void *)(a4 + 16);
    int v82 = *(_DWORD **)(a4 + 8);
    if ((unint64_t)v82 < v81)
    {
      *int v82 = v78;
      float64x2_t v83 = v82 + 1;
LABEL_54:
      *(void *)(a4 + 8) = v83;
      unsigned int v84 = v101;
      *(_DWORD *)(a1[9] + 80 * v101 + 68) = -1;
      LODWORD(v21) = v84;
      goto LABEL_55;
    }
    unint64_t v85 = *(_DWORD **)a4;
    uint64_t v86 = ((uint64_t)v82 - *(void *)a4) >> 2;
    unint64_t v87 = v86 + 1;
    if (!((unint64_t)(v86 + 1) >> 62))
    {
      uint64_t v88 = v81 - (void)v85;
      if (v88 >> 1 > v87) {
        unint64_t v87 = v88 >> 1;
      }
      if ((unint64_t)v88 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v89 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v89 = v87;
      }
      if (v89)
      {
        unint64_t v90 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v89);
        unint64_t v85 = *(_DWORD **)a4;
        int v82 = *(_DWORD **)(a4 + 8);
        int v78 = *v79;
      }
      else
      {
        unint64_t v90 = 0;
      }
      uint64_t v91 = &v90[4 * v86];
      unint64_t v92 = &v90[4 * v89];
      *(_DWORD *)uint64_t v91 = v78;
      float64x2_t v83 = v91 + 4;
      while (v82 != v85)
      {
        int v93 = *--v82;
        *((_DWORD *)v91 - 1) = v93;
        v91 -= 4;
      }
      *(void *)a4 = v91;
      *(void *)(a4 + 8) = v83;
      *(void *)(a4 + 16) = v92;
      if (v85) {
        operator delete(v85);
      }
      goto LABEL_54;
    }
LABEL_58:
    abort();
  }
  uint64_t v38 = v6 + 16 * v11;
  uint64_t v39 = *(void *)(v38 + 4);
  int8x16_t v40 = (unsigned int *)(v6 + 16 * v39);
  uint64_t v42 = v40[2];
  uint64_t v41 = v40[3];
  uint64_t v43 = v6 + 16 * v42;
  uint64_t v15 = *(unsigned int *)(v43 + 4);
  int32x4_t v44 = (unsigned int *)(v6 + 16 * v15);
  *(void *)(v44 + 1) = v39;
  LODWORD(v43) = *(_DWORD *)(v43 + 8);
  v40[1] = v15;
  v40[2] = v43;
  *(_DWORD *)(v4 + 80 * *v44) = v15;
  unsigned int v45 = *v40;
  int32x4_t v46 = (float32x4_t *)(v4 + 80 * *v40);
  v46->i32[0] = v39;
  unsigned int v47 = *v16;
  unsigned int v99 = v45;
  unsigned int v100 = v47;
  uint64_t v48 = v44[3];
  uint64_t v49 = a1[12];
  uint64_t v50 = *(unsigned int *)(v38 + 12);
  float32x4_t v51 = *(float32x4_t *)(v49 + 16 * v48);
  float32x4_t v52 = *(float32x4_t *)(v49 + 16 * v50);
  unsigned int v53 = (float32x4_t *)(v4 + 80 * v47);
  float32x4_t v54 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL);
  float32x4_t v55 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), (int8x16_t)v52, 0xCuLL);
  float32x4_t v56 = vnegq_f32(v51);
  float32x4_t v57 = vmlaq_f32(vmulq_f32(v55, v56), v52, v54);
  float32x4_t v58 = *(float32x4_t *)(v49 + 16 * v41);
  float32x4_t v59 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), (int8x16_t)v58, 0xCuLL);
  int32x4_t v60 = (int32x4_t)vmlaq_f32(vmulq_f32(v59, v56), v58, v54);
  float32x4_t v61 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v60, v60), (int8x16_t)v60, 0xCuLL);
  int32x4_t v62 = (int32x4_t)vaddq_f32(v57, vmlaq_f32(vmulq_f32(v59, vnegq_f32(v52)), v58, v55));
  float32x4_t v63 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v62, v62), (int8x16_t)v62, 0xCuLL);
  v53[1] = vsubq_f32(v53[1], v63);
  v46[1] = vaddq_f32(v46[1], v63);
  v53[1] = vaddq_f32(v61, v53[1]);
  float32x4_t v64 = vsubq_f32(v46[1], v61);
  v46[1] = v64;
  float32x4_t v65 = vmulq_f32(v53[1], v53[1]);
  v53[2].f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1))).f32[0]);
  float32x4_t v66 = vmulq_f32(v64, v64);
  v66.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).f32[0]);
  v46[2].i32[0] = v66.i32[0];
  v53[2].i8[4] = v53[2].f32[0] <= 0.00000011921;
  v46[2].i8[4] = v66.f32[0] <= 0.00000011921;
  int v67 = &v46[2].i8[4];
  v53[3] = vsubq_f32(v53[3], *(float32x4_t *)(v49 + 16 * v50));
  *(float32x4_t *)(v67 + 12) = vsubq_f32(*(float32x4_t *)(v67 + 12), *(float32x4_t *)(v49 + 16 * v50));
  --v53[4].i32[0];
  --*((_DWORD *)v67 + 7);
  if (!v53[2].i8[4])
  {
  }
  if (!*v67)
  {
  }
  return v15;
}

void std::deque<unsigned int>::push_back(void *a1, _DWORD *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = ((v4 - v5) << 7) - 1;
  }
  uint64_t v7 = a1[5];
  unint64_t v8 = v7 + a1[4];
  if (v6 == v8)
  {
    std::deque<unsigned int>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    uint64_t v7 = a1[5];
    unint64_t v8 = a1[4] + v7;
  }
  *(_DWORD *)(*(void *)(v5 + ((v8 >> 7) & 0x1FFFFFFFFFFFFF8)) + 4 * (v8 & 0x3FF)) = *a2;
  a1[5] = v7 + 1;
}

void std::deque<unsigned int>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x400;
  unint64_t v4 = v2 - 1024;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    uint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v29 = 1;
      }
      else {
        unint64_t v29 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v5, v29);
      int v31 = &v30[8 * (v29 >> 2)];
      int v33 = &v30[8 * v32];
      unint64_t v34 = (uint64_t *)a1[1];
      unint64_t v8 = v31;
      uint64_t v35 = a1[2] - (void)v34;
      if (v35)
      {
        unint64_t v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v36 = 8 * (v35 >> 3);
        float32x4_t v37 = &v30[8 * (v29 >> 2)];
        do
        {
          uint64_t v38 = *v34++;
          *(void *)float32x4_t v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    unsigned int v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned int *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned int *>::push_front((uint64_t)a1, &v54);
    int8x16_t v40 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v41 = *v40;
    uint64_t v9 = (char *)(v40 + 1);
    uint64_t v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_29;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      int v31 = &v30[8 * (v46 >> 2)];
      int v33 = &v30[8 * v47];
      uint64_t v48 = (uint64_t *)a1[1];
      unint64_t v8 = v31;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        float32x4_t v51 = &v30[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)float32x4_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      uint64_t v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float32x4_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unsigned int v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned int *>::push_back(&v54, &v53);
  float32x4_t v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    float32x4_t v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<unsigned int *>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    float32x4_t v28 = (char *)a1[2];
  }
  uint64_t v42 = (char *)*a1;
  long long v43 = v54;
  long long v44 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  uint64_t v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(void *)&long long v55 = v28;
  *((void *)&v55 + 1) = v45;
  if (v28 != v27) {
    *(void *)&long long v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (v42) {
    operator delete(v42);
  }
}

void std::__split_buffer<unsigned int *>::push_back(void *a1, void *a2)
{
  uint64_t v5 = (char *)a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  uint64_t v6 = *(char **)(v4 - 8);
  if (v6 == v5)
  {
    uint64_t v7 = (char *)a1[1];
    uint64_t v8 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v18 = 1;
      }
      else {
        unint64_t v18 = (uint64_t)&v6[-*a1] >> 2;
      }
      unsigned int v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v4, v18);
      uint64_t v21 = &v19[8 * (v18 >> 2)];
      unint64_t v22 = (uint64_t *)a1[1];
      uint64_t v6 = v21;
      uint64_t v23 = a1[2] - (void)v22;
      if (v23)
      {
        uint64_t v6 = &v21[v23 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v24 = 8 * (v23 >> 3);
        unint64_t v25 = &v19[8 * (v18 >> 2)];
        do
        {
          uint64_t v26 = *v22++;
          *(void *)unint64_t v25 = v26;
          v25 += 8;
          v24 -= 8;
        }
        while (v24);
      }
      float32x4_t v27 = (char *)*a1;
      *a1 = v19;
      a1[1] = v21;
      a1[2] = v6;
      a1[3] = &v19[8 * v20];
      if (v27)
      {
        operator delete(v27);
        uint64_t v6 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v9 = v8 >> 3;
      BOOL v10 = v8 >> 3 < -1;
      uint64_t v11 = (v8 >> 3) + 2;
      if (v10) {
        uint64_t v12 = v11;
      }
      else {
        uint64_t v12 = v9 + 1;
      }
      uint64_t v13 = -(v12 >> 1);
      uint64_t v14 = v12 >> 1;
      uint64_t v15 = &v7[-8 * v14];
      int64_t v16 = v6 - v7;
      if (v6 != v7)
      {
        memmove(&v7[-8 * v14], v7, v6 - v7);
        uint64_t v6 = (char *)a1[1];
      }
      uint64_t v17 = &v6[8 * v13];
      uint64_t v6 = &v15[v16];
      a1[1] = v17;
      a1[2] = &v15[v16];
    }
  }
  *(void *)uint64_t v6 = *a2;
  a1[2] += 8;
}

{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  uint64_t v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    uint64_t v5 = (char *)a1[1];
    uint64_t v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1) {
        int64_t v16 = 1;
      }
      else {
        int64_t v16 = (uint64_t)&v4[-*a1] >> 2;
      }
      uint64_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(a1[4], v16);
      unsigned int v19 = &v17[8 * (v16 >> 2)];
      uint64_t v20 = (uint64_t *)a1[1];
      uint64_t v4 = v19;
      uint64_t v21 = a1[2] - (void)v20;
      if (v21)
      {
        uint64_t v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        unint64_t v22 = 8 * (v21 >> 3);
        uint64_t v23 = &v17[8 * (v16 >> 2)];
        do
        {
          uint64_t v24 = *v20++;
          *(void *)uint64_t v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      unint64_t v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        uint64_t v4 = (char *)a1[2];
      }
    }
    else
    {
      uint64_t v7 = v6 >> 3;
      uint64_t v8 = v6 >> 3 < -1;
      uint64_t v9 = (v6 >> 3) + 2;
      if (v8) {
        BOOL v10 = v9;
      }
      else {
        BOOL v10 = v7 + 1;
      }
      uint64_t v11 = -(v10 >> 1);
      uint64_t v12 = v10 >> 1;
      uint64_t v13 = &v5[-8 * v12];
      uint64_t v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        uint64_t v4 = (char *)a1[1];
      }
      uint64_t v15 = &v4[8 * v11];
      uint64_t v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(void *)uint64_t v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<unsigned int *>::push_front(uint64_t a1, void *a2)
{
  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = a1 + 24;
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    uint64_t v8 = *(unsigned char **)(a1 + 16);
    if (v8 >= v7)
    {
      if (v7 == v4) {
        unint64_t v12 = 1;
      }
      else {
        unint64_t v12 = (v7 - v4) >> 2;
      }
      uint64_t v13 = 2 * v12;
      uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v6, v12);
      uint64_t v5 = &v14[(v13 + 6) & 0xFFFFFFFFFFFFFFF8];
      int64_t v16 = *(uint64_t **)(a1 + 8);
      uint64_t v17 = v5;
      uint64_t v18 = *(void *)(a1 + 16) - (void)v16;
      if (v18)
      {
        uint64_t v17 = &v5[v18 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v19 = 8 * (v18 >> 3);
        uint64_t v20 = v5;
        do
        {
          uint64_t v21 = *v16++;
          *(void *)uint64_t v20 = v21;
          v20 += 8;
          v19 -= 8;
        }
        while (v19);
      }
      unint64_t v22 = *(char **)a1;
      *(void *)a1 = v14;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v17;
      *(void *)(a1 + 24) = &v14[8 * v15];
      if (v22)
      {
        operator delete(v22);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v9 = (v7 - v8) >> 3;
      if (v9 >= -1) {
        uint64_t v10 = v9 + 1;
      }
      else {
        uint64_t v10 = v9 + 2;
      }
      uint64_t v11 = v10 >> 1;
      uint64_t v5 = &v4[8 * (v10 >> 1)];
      if (v8 != v4)
      {
        memmove(&v4[8 * (v10 >> 1)], v4, v8 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v11];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

{
  char *v4;
  char *v5;
  unsigned char *v6;
  unsigned char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  uint64_t v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    uint64_t v6 = *(unsigned char **)(a1 + 16);
    uint64_t v7 = *(unsigned char **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4) {
        uint64_t v11 = 1;
      }
      else {
        uint64_t v11 = (v7 - v4) >> 2;
      }
      unint64_t v12 = 2 * v11;
      uint64_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(*(void *)(a1 + 32), v11);
      uint64_t v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      uint64_t v15 = *(uint64_t **)(a1 + 8);
      int64_t v16 = v5;
      uint64_t v17 = *(void *)(a1 + 16) - (void)v15;
      if (v17)
      {
        int64_t v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v18 = 8 * (v17 >> 3);
        uint64_t v19 = v5;
        do
        {
          uint64_t v20 = *v15++;
          *(void *)uint64_t v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      uint64_t v21 = *(char **)a1;
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = v16;
      *(void *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        uint64_t v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      uint64_t v8 = (v7 - v6) >> 3;
      if (v8 >= -1) {
        uint64_t v9 = v8 + 1;
      }
      else {
        uint64_t v9 = v8 + 2;
      }
      uint64_t v10 = v9 >> 1;
      uint64_t v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        uint64_t v4 = *(char **)(a1 + 16);
      }
      *(void *)(a1 + 8) = v5;
      *(void *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    uint64_t v5 = *(char **)(a1 + 8);
  }
  *((void *)v5 - 1) = *a2;
  *(void *)(a1 + 8) -= 8;
}

uint64_t std::deque<unsigned int>::__maybe_remove_front_spare[abi:nn180100](uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x400) {
    a2 = 1;
  }
  if (v2 < 0x800) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 1024;
  }
  return v4 ^ 1u;
}

uint64_t geom::anonymous namespace'::integer_hashset::erase(geom::_anonymous_namespace_::integer_hashset *this, unsigned int a2)
{
  uint64_t v3 = *((void *)this + 1);
  uint64_t v4 = *((void *)this + 2);
  if (*(_DWORD *)(v3 + 4 * result) != -1)
  {
    unint64_t v6 = (unint64_t)(v4 - v3) >> 2;
    do
    {
      unsigned int v7 = result;
      do
      {
        uint64_t result = ((int)result + 1) % v6;
        unsigned int v8 = *(_DWORD *)(v3 + 4 * result);
        unsigned int v9 = 73244475 * ((73244475 * (v8 ^ HIWORD(v8))) ^ ((73244475 * (v8 ^ HIWORD(v8))) >> 16));
        unsigned int v10 = (v9 ^ HIWORD(v9)) % v6;
        BOOL v12 = v7 < result && v7 >= v10;
        BOOL v14 = v7 < result || v7 >= v10;
        if (v10 > result) {
          BOOL v15 = v14;
        }
        else {
          BOOL v15 = v12;
        }
      }
      while (v8 != -1 && !v15);
      *(_DWORD *)(v3 + 4 * v7) = v8;
    }
    while (*(_DWORD *)(v3 + 4 * result) != -1);
    --*(_DWORD *)this;
  }
  return result;
}

void std::vector<unsigned int>::reserve(std::vector<unsigned int> *this, std::vector<unsigned int>::size_type __n)
{
  unint64_t value = this->__end_cap_.__value_;
  p_end_cap = &this->__end_cap_;
  if (__n > value - this->__begin_)
  {
    if (__n >> 62) {
      abort();
    }
    int64_t v5 = (char *)this->__end_ - (char *)this->__begin_;
    unint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)p_end_cap, __n);
    unsigned int v7 = (unsigned int *)&v6[v5 & 0xFFFFFFFFFFFFFFFCLL];
    unsigned int v9 = (unsigned int *)&v6[4 * v8];
    begiunsigned __int16 n = this->__begin_;
    std::vector<unsigned int>::pointer end = this->__end_;
    BOOL v12 = v7;
    if (end != this->__begin_)
    {
      BOOL v12 = v7;
      do
      {
        unsigned int v13 = *--end;
        *--BOOL v12 = v13;
      }
      while (end != begin);
    }
    this->__begin_ = v12;
    this->__end_ = v7;
    this->__end_cap_.__value_ = v9;
    if (begin)
    {
      operator delete(begin);
    }
  }
}

void std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::~__func()
{
}

__n128 std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26EA03EC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA03EC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  uint64_t result = *(unsigned int *)(a1 + 20);
  if (result)
  {
    uint64_t v5 = 0;
    LODWORD(v6) = -1;
    unsigned int v7 = 1;
    float v8 = -INFINITY;
    do
    {
      float32x4_t v9 = vmulq_f32(vsubq_f32(*(float32x4_t *)(*(void *)(v2 + 96) + 16 * v3), *(float32x4_t *)(*(void *)(v2 + 376) + 16 * (v7 - 1))), *(float32x4_t *)(*(void *)(v2 + 376) + 16 * v7));
      float v10 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1))).f32[0];
      if (v10 <= v8)
      {
        uint64_t v6 = v6;
      }
      else
      {
        float v8 = v10;
        uint64_t v6 = v5;
      }
      ++v5;
      v7 += 2;
    }
    while (result != v5);
  }
  else
  {
    uint64_t v6 = 0xFFFFFFFFLL;
    float v8 = -INFINITY;
  }
  if (v8 > (float)(*(float *)(v2 + 528) * -2.0))
  {
    *(float *)(*(void *)(v2 + 120) + 4 * v3) = v8;
    return v6;
  }
  return result;
}

uint64_t std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::anonymous namespace'::hull_mesh<float>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::target_type()
{
}

void _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    unsigned int v7 = &v6[v5];
    float32x4_t v9 = &v6[32 * v8];
    uint64_t v11 = (char *)*a1;
    float v10 = (char *)a1[1];
    BOOL v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 2);
        long long v14 = *((_OWORD *)v10 - 1);
        v10 -= 32;
        *((_OWORD *)v12 - 2) = v13;
        *((_OWORD *)v12 - 1) = v14;
        v12 -= 32;
      }
      while (v10 != v11);
      float v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void geom::anonymous namespace'::hull_mesh<double>::grow_hull(void *a1, void *a2, unsigned int **a3, unsigned int *a4, unsigned int **a5, std::vector<int> *a6)
{
  uint64_t v8 = *a3;
  float32x4_t v9 = a3[1];
  if (*a3 != v9)
  {
    do
    {
      if (*(_DWORD *)(a1[9] + 112 * *v8) != -1) {
      ++v8;
      }
    }
    while (v8 != v9);
  }
  uint64_t v10 = a2[1] - *a2;
  uint64_t v11 = v10 >> 2;
  std::vector<unsigned int>::resize(a6, 3 * (v10 >> 2));
  std::vector<int>::size_type v12 = ((unint64_t)v10 >> 2);
  if ((v10 >> 2))
  {
    uint64_t v13 = 0;
    unint64_t v14 = (unint64_t)v10 >> 1;
    do
    {
      begiunsigned __int16 n = a6->__begin_;
      uint64_t v17 = *(unsigned int *)(*a2 + 4 * v13);
      uint64_t v18 = *(unsigned int *)(*a2 + 4 * (((int)v11 - 1 + (int)v13) % v11));
      uint64_t v19 = a1[6];
      uint64_t v20 = (unsigned int *)(v19 + 16 * begin[(v11 + v13)]);
      uint64_t v21 = begin[v13];
      unint64_t v22 = (unsigned int *)(v19 + 16 * v21);
      uint64_t v23 = (unsigned int *)(v19 + 16 * begin[(v14 + v13)]);
      uint64_t v24 = a1[9];
      v20[2] = v21;
      v22[2] = begin[(v14 + v13)];
      v23[2] = begin[(v11 + v13)];
      *uint64_t v20 = v16;
      *unint64_t v22 = v16;
      *uint64_t v23 = v16;
      v20[3] = *(_DWORD *)(v19 + 16 * v18 + 12);
      uint64_t v25 = v19 + 16 * v17;
      v22[3] = *(_DWORD *)(v25 + 12);
      uint64_t v26 = *a4;
      v23[3] = v26;
      v20[1] = v17;
      uint64_t v27 = v24 + 112 * v16;
      *(_DWORD *)(v25 + 4) = begin[(v11 + v13)];
      uint64_t v28 = a1[12];
      unint64_t v29 = (float64x2_t *)(v28 + 32 * v26);
      float64x2_t v30 = *v29;
      float64x2_t v31 = v29[1];
      uint64_t v32 = (float64x2_t *)(v28 + 32 * v20[3]);
      float64x2_t v33 = *v32;
      float64x2_t v34 = v32[1];
      uint64_t v35 = (float64x2_t *)(v28 + 32 * v22[3]);
      float64x2_t v36 = *v35;
      float64x2_t v37 = v35[1];
      float64x2_t v38 = vnegq_f64(v31);
      float64x2_t v39 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v37), *v29, 1), v31, *v35, 1);
      float64x2_t v40 = vaddq_f64(v31, v34);
      v31.f64[1] = v29->f64[0];
      float64x2_t v41 = vmlaq_laneq_f64(vmulq_laneq_f64(v38, *v32, 1), v34, *v29, 1);
      float64x2_t v42 = vnegq_f64(v34);
      v34.f64[1] = v32->f64[0];
      float64x2_t v43 = vmlaq_laneq_f64(vmulq_laneq_f64(v42, *v35, 1), v37, *v32, 1);
      float64x2_t v44 = vaddq_f64(v40, v37);
      v37.f64[1] = v35->f64[0];
      float64x2_t v45 = vaddq_f64(vmlaq_f64(vmulq_f64(v31, vnegq_f64(*v35)), *v29, v37), vaddq_f64(vmlaq_f64(vmulq_f64(v34, vnegq_f64(*v29)), *v32, v31), vmlaq_f64(vmulq_f64(v37, vnegq_f64(*v32)), *v35, v34)));
      float64x2_t v46 = vaddq_f64(v39, vaddq_f64(v41, v43));
      v37.f64[0] = vmulq_f64(v46, v46).f64[0];
      v46.f64[1] = v45.f64[0];
      *(float64x2_t *)(v27 + 16) = v46;
      *(int64x2_t *)(v27 + 32) = vdupq_laneq_s64((int64x2_t)v45, 1);
      float64x2_t v47 = vmulq_f64(v45, v45);
      v47.f64[0] = sqrt(v47.f64[1] + v37.f64[0] + v47.f64[0]);
      *(float64_t *)(v27 + 48) = v47.f64[0];
      *(unsigned char *)(v27 + 56) = v47.f64[0] <= 2.22044605e-16;
      *(float64x2_t *)(v27 + 64) = vaddq_f64(vaddq_f64(v30, v33), v36);
      *(float64x2_t *)(v27 + 80) = v44;
      *(_DWORD *)(v27 + 96) = 3;
      *(_DWORD *)uint64_t v27 = begin[(v11 + v13)];
      if (v47.f64[0] > 2.22044605e-16) {
      ++v13;
      }
    }
    while (v12 != v13);
    uint64_t v48 = 0;
    std::vector<int>::pointer v49 = a6->__begin_;
    uint64_t v50 = a1[6];
    do
    {
      uint64_t v51 = v48 + 1;
      if (v12 - 1 == v48) {
        int v52 = 0;
      }
      else {
        int v52 = v48 + 1;
      }
      if (v48) {
        int v53 = v48;
      }
      else {
        int v53 = v10 >> 2;
      }
      uint64_t v54 = v49[v48];
      uint64_t v55 = v49[2 * ((unint64_t)v10 >> 2) + v48];
      *(_DWORD *)(v50 + 16 * v54 + 4) = v49[(v52 + 2 * v11)];
      *(_DWORD *)(v50 + 16 * v55 + 4) = v49[v53 - 1];
      uint64_t v48 = v51;
    }
    while (v12 != v51);
  }
  std::vector<unsigned int>::resize(a6, v12);
}

void _ZNSt3__16vectorIDv2_dNS_9allocatorIS1_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    unsigned int v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    float32x4_t v9 = &v6[16 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    std::vector<int>::size_type v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        v10 -= 16;
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 16;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t geom::anonymous namespace'::hull_mesh<double>::new_face(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2 == a1[3])
  {
    uint64_t v6 = (char *)a1[10];
    unint64_t v5 = a1[11];
    if ((unint64_t)v6 >= v5)
    {
      uint64_t v8 = (char *)a1[9];
      unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v6 - v8) >> 4) + 1;
      if (v9 > 0x249249249249249) {
        abort();
      }
      unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5 - (void)v8) >> 4);
      if (2 * v10 > v9) {
        unint64_t v9 = 2 * v10;
      }
      if (v10 >= 0x124924924924924) {
        unint64_t v11 = 0x249249249249249;
      }
      else {
        unint64_t v11 = v9;
      }
      if (v11)
      {
        if (v11 > 0x249249249249249) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        std::vector<int>::size_type v12 = (char *)operator new(112 * v11);
      }
      else
      {
        std::vector<int>::size_type v12 = 0;
      }
      long long v13 = &v12[16 * ((v6 - v8) >> 4)];
      *(_DWORD *)long long v13 = -1;
      *(_OWORD *)(v13 + 4) = 0u;
      *(_OWORD *)(v13 + 20) = 0u;
      *(_OWORD *)(v13 + 36) = 0u;
      *((_DWORD *)v13 + 13) = 0;
      v13[56] = 1;
      *(_OWORD *)(v13 + 57) = 0u;
      *(_OWORD *)(v13 + 73) = 0u;
      *(_OWORD *)(v13 + 84) = 0u;
      *((_DWORD *)v13 + 25) = -1;
      *((void *)v13 + 13) = 0;
      unsigned int v7 = v13 + 112;
      if (v6 != v8)
      {
        do
        {
          long long v14 = *((_OWORD *)v6 - 7);
          long long v15 = *((_OWORD *)v6 - 5);
          *((_OWORD *)v13 - 6) = *((_OWORD *)v6 - 6);
          *((_OWORD *)v13 - 5) = v15;
          *((_OWORD *)v13 - 7) = v14;
          long long v16 = *((_OWORD *)v6 - 4);
          long long v17 = *((_OWORD *)v6 - 3);
          long long v18 = *((_OWORD *)v6 - 1);
          *((_OWORD *)v13 - 2) = *((_OWORD *)v6 - 2);
          *((_OWORD *)v13 - 1) = v18;
          *((_OWORD *)v13 - 4) = v16;
          *((_OWORD *)v13 - 3) = v17;
          v13 -= 112;
          v6 -= 112;
        }
        while (v6 != v8);
        uint64_t v6 = (char *)a1[9];
      }
      a1[9] = v13;
      a1[10] = v7;
      a1[11] = &v12[112 * v11];
      if (v6) {
        operator delete(v6);
      }
    }
    else
    {
      *(_DWORD *)uint64_t v6 = -1;
      *(_OWORD *)(v6 + 4) = 0u;
      *(_OWORD *)(v6 + 20) = 0u;
      *(_OWORD *)(v6 + 36) = 0u;
      *((_DWORD *)v6 + 13) = 0;
      v6[56] = 1;
      *(_OWORD *)(v6 + 57) = 0u;
      *(_OWORD *)(v6 + 73) = 0u;
      *(_OWORD *)(v6 + 84) = 0u;
      *((_DWORD *)v6 + 25) = -1;
      unsigned int v7 = v6 + 112;
      *((void *)v6 + 13) = 0;
    }
    a1[10] = v7;
    return -1227133513 * (((unint64_t)v7 - a1[9]) >> 4) - 1;
  }
  else
  {
    uint64_t result = *(unsigned int *)(v2 - 4);
    a1[4] = v2 - 4;
    uint64_t v4 = a1[9] + 112 * result;
    *(void *)(v4 + 48) = 0;
    *(_OWORD *)(v4 + 16) = 0u;
    *(_OWORD *)(v4 + 32) = 0u;
    *(unsigned char *)(v4 + 56) = 1;
    *(void *)(v4 + 96) = 0xFFFFFFFF00000000;
    *(void *)(v4 + 64) = 0;
    *(void *)(v4 + 72) = 0;
    *(_OWORD *)(v4 + 80) = 0u;
  }
  return result;
}

__n128 geom::anonymous namespace'::max_heap<geom::anonymous namespace'::hull_mesh<double>::conflict_face,geom::anonymous namespace'::hull_mesh<double>::conflict_face_selector_cmp>::remove(uint64_t *a1, unsigned int *a2)
{
  unint64_t v2 = *a2;
  uint64_t v3 = a1[3];
  if (v2 < (a1[4] - v3) >> 2)
  {
    uint64_t v4 = *(unsigned int *)(v3 + 4 * v2);
    if (v4)
    {
      uint64_t v5 = *a1;
      uint64_t v6 = (_DWORD *)(*a1 + 24 * v4);
      *(_DWORD *)(v3 + 4 * *v6) = 0;
      uint64_t v7 = a1[1];
      unsigned int v9 = *(_DWORD *)(v7 - 24);
      v7 -= 24;
      uint64_t v8 = v9;
      __n128 result = *(__n128 *)(v7 + 4);
      *(__n128 *)uint64_t v19 = result;
      *(_DWORD *)&v19[16] = *(_DWORD *)(v7 + 20);
      a1[1] = v7;
      if (0xAAAAAAAAAAAAAAABLL * ((v7 - v5) >> 3) != v4)
      {
        *uint64_t v6 = v8;
        __n128 result = *(__n128 *)&v19[4];
        *(_OWORD *)(v5 + 24 * v4 + 8) = *(_OWORD *)&v19[4];
        *(_DWORD *)(a1[3] + 4 * v8) = v4;
        unint64_t v11 = (2 * v4);
        uint64_t v12 = *a1;
        for (unint64_t i = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3); i > v11; LODWORD(v4) = v14)
        {
          unint64_t v14 = v11 | 1;
          if (i <= v14)
          {
            LODWORD(v14) = v11;
          }
          else if (*(double *)(v12 + 24 * v11 + 16) >= *(double *)(v12 + 24 * v14 + 16))
          {
            LODWORD(v14) = v11;
          }
          result.n128_u64[0] = *(void *)(v12 + 24 * v14 + 16);
          if (result.n128_f64[0] < *(double *)(v12 + 24 * v4 + 16)) {
            break;
          }
          long long v15 = (int *)(v12 + 24 * v4);
          long long v16 = (int *)(v12 + 24 * v14);
          int v17 = *v15;
          int *v15 = *v16;
          *long long v16 = v17;
          __n128 result = *(__n128 *)(v15 + 2);
          *(_OWORD *)(v15 + 2) = *(_OWORD *)(v16 + 2);
          *(__n128 *)(v16 + 2) = result;
          uint64_t v12 = *a1;
          uint64_t v18 = a1[3];
          *(_DWORD *)(v18 + 4 * *(unsigned int *)(*a1 + 24 * v4)) = v4;
          *(_DWORD *)(v18 + 4 * *(unsigned int *)(v12 + 24 * v14)) = v14;
          unint64_t v11 = (2 * v14);
          unint64_t i = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - v12) >> 3);
        }
      }
    }
  }
  return result;
}

__n128 geom::anonymous namespace'::max_heap<geom::anonymous namespace'::hull_mesh<double>::conflict_face,geom::anonymous namespace'::hull_mesh<double>::conflict_face_selector_cmp>::insert(std::vector<int> *a1, unsigned int *a2, _OWORD *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  std::vector<int>::pointer end = a1->__end_;
  unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a1->__begin_) >> 3);
  unint64_t v8 = *a2;
  begiunsigned __int16 n = a1[1].__begin_;
  unsigned int v9 = a1 + 1;
  std::vector<int>::pointer v10 = begin;
  if (v8 >= a1[1].__end_ - begin)
  {
    *(_DWORD *)std::vector<int>::value_type __x = 0;
    std::vector<unsigned int>::resize(v9, (v8 + 1), (std::vector<int>::const_reference)__x);
    unint64_t v8 = *a2;
    std::vector<int>::pointer v10 = a1[1].__begin_;
    std::vector<int>::pointer end = a1->__end_;
  }
  v10[v8] = v7;
  int v13 = *a2;
  *(_OWORD *)&__x[4] = *a3;
  unint64_t value = (unint64_t)a1->__end_cap_.__value_;
  if ((unint64_t)end >= value)
  {
    std::vector<int>::pointer v16 = a1->__begin_;
    unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((char *)end - (char *)a1->__begin_) >> 3);
    unint64_t v18 = v17 + 1;
    if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(value - (void)v16) >> 3);
    if (2 * v19 > v18) {
      unint64_t v18 = 2 * v19;
    }
    if (v19 >= 0x555555555555555) {
      unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      if (v20 > 0xAAAAAAAAAAAAAAALL) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v21 = (char *)operator new(24 * v20);
    }
    else
    {
      uint64_t v21 = 0;
    }
    unint64_t v22 = &v21[24 * v17];
    *(_DWORD *)unint64_t v22 = v13;
    result.n128_u64[0] = *(void *)__x;
    *(_OWORD *)(v22 + 4) = *(_OWORD *)__x;
    *((_DWORD *)v22 + 5) = *(_DWORD *)&__x[16];
    long long v15 = (int *)(v22 + 24);
    if (end != v16)
    {
      do
      {
        __n128 result = *(__n128 *)(end - 6);
        *((void *)v22 - 1) = *((void *)end - 1);
        *(__n128 *)(v22 - 24) = result;
        v22 -= 24;
        end -= 6;
      }
      while (end != v16);
      std::vector<int>::pointer end = a1->__begin_;
    }
    a1->__begin_ = (std::vector<int>::pointer)v22;
    a1->__end_ = v15;
    a1->__end_cap_.__value_ = (int *)&v21[24 * v20];
    if (end) {
      operator delete(end);
    }
  }
  else
  {
    unsigned int *end = v13;
    result.n128_u64[0] = *(void *)__x;
    *(_OWORD *)(end + 1) = *(_OWORD *)__x;
    end[5] = *(_DWORD *)&__x[16];
    long long v15 = end + 6;
  }
  unint64_t v23 = v7;
  a1->__end_ = v15;
  if (v7 >= 2uLL)
  {
    std::vector<int>::pointer v24 = a1->__begin_;
    do
    {
      unint64_t v25 = v23 >> 1;
      result.n128_u64[0] = *(void *)&v24[6 * v23 + 4];
      if (result.n128_f64[0] < *(double *)&v24[6 * (v23 >> 1) + 4]) {
        break;
      }
      uint64_t v26 = &v24[6 * v25];
      uint64_t v27 = &v24[6 * v23];
      int v28 = *v27;
      *uint64_t v27 = *v26;
      *uint64_t v26 = v28;
      __n128 result = *(__n128 *)(v27 + 2);
      *(_OWORD *)(v27 + 2) = *(_OWORD *)(v26 + 2);
      *(__n128 *)(v26 + 2) = result;
      std::vector<int>::pointer v24 = a1->__begin_;
      std::vector<int>::pointer v29 = a1[1].__begin_;
      v29[a1->__begin_[6 * v23]] = v23;
      v29[v24[6 * v25]] = v25;
      BOOL v30 = v23 > 3;
      v23 >>= 1;
    }
    while (v30);
  }
  return result;
}

void geom::anonymous namespace'::hull_mesh<double>::dissolve_edge_if_coplanar(uint64_t a1, int a2, unsigned int **a3, char **a4)
{
  int v131 = a2;
  uint64_t v129 = (void *)(a1 + 416);
  std::deque<unsigned int>::push_back((void *)(a1 + 416), &v131);
  uint64_t v5 = *(void *)(a1 + 456);
  if (v5)
  {
    uint64_t v112 = (uint64_t)(a4 + 2);
    do
    {
      uint64_t v6 = *(unsigned int *)(*(void *)(*(void *)(a1 + 424) + ((*(void *)(a1 + 448) >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * (*(void *)(a1 + 448) & 0x3FFLL));
      ++*(void *)(a1 + 448);
      *(void *)(a1 + 456) = v5 - 1;
      std::deque<unsigned int>::__maybe_remove_front_spare[abi:nn180100]((uint64_t)v129, 1);
      uint64_t v11 = *(void *)(a1 + 48);
      unsigned int v12 = *(_DWORD *)(v11 + 16 * v6);
      if (v12 != -1)
      {
        uint64_t v13 = v11 + 16 * v6;
        unsigned int v16 = *(_DWORD *)(v13 + 4);
        unint64_t v14 = (unsigned int *)(v13 + 4);
        uint64_t v15 = v16;
        unsigned int v17 = *(_DWORD *)(v11 + 16 * v16);
        if (v17 != -1 && v17 != v12)
        {
          uint64_t v19 = *(void *)(a1 + 72);
          uint64_t v20 = v19 + 112 * v12;
          int v22 = *(unsigned __int8 *)(v20 + 56);
          uint64_t v21 = (BOOL *)(v20 + 56);
          if (!(v22 | *(unsigned __int8 *)(v19 + 112 * v17 + 56)))
          {
            unint64_t v23 = (float64x2_t *)(v19 + 112 * v12);
            float64x2_t v25 = v23[1];
            float64x2_t v26 = v23[2];
            std::vector<int>::pointer v24 = v23 + 1;
            uint64_t v27 = v19 + 112 * v17;
            float64x2_t v28 = *(float64x2_t *)(v27 + 16);
            float64x2_t v29 = *(float64x2_t *)(v27 + 32);
            v7.f64[0] = *(float64_t *)(v27 + 48);
            float64x2_t v30 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v7.f64[0], 0);
            float64x2_t v31 = vdivq_f64(v29, v7);
            float64x2_t v32 = vdivq_f64(v28, v30);
            v8.f64[0] = v24[2].f64[0];
            float64x2_t v33 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v8.f64[0], 0);
            float64x2_t v34 = vdivq_f64(v26, v8);
            float64x2_t v35 = vdivq_f64(v25, v33);
            if (vmulq_f64(v31, v34).f64[0] + vaddvq_f64(vmulq_f64(v32, v35)) > 0.0)
            {
              float64x2_t v37 = *(float64x2_t *)(v27 + 64);
              float64x2_t v36 = *(float64x2_t *)(v27 + 80);
              unsigned int v38 = *(_DWORD *)(v27 + 96);
              *(void *)&double v39 = vextq_s8((int8x16_t)v32, (int8x16_t)v32, 8uLL).u64[0];
              v9.f64[0] = (double)v38;
              float64x2_t v40 = vdivq_f64(v37, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v38), 0));
              float64x2_t v41 = vdivq_f64(v36, v9);
              v10.f64[0] = (double)LODWORD(v24[5].f64[0]);
              float64x2_t v42 = vdivq_f64(v24[3], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v10.f64[0], 0));
              float64x2_t v43 = vdivq_f64(v24[4], v10);
              *(void *)&v35.f64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
              double v44 = vmulq_f64(vsubq_f64(v41, v43), v34).f64[0] + vaddvq_f64(vmulq_f64(vsubq_f64(v40, v42), v35));
              double v45 = *(double *)(a1 + 544);
              double v46 = -v45;
              float64x2_t v47 = vsubq_f64(v43, v41);
              v32.f64[1] = v39;
              v32.f64[0] = vaddvq_f64(vmulq_f64(vsubq_f64(v42, v40), v32));
              double v49 = vmulq_f64(v47, v31).f64[0] + v32.f64[0];
              BOOL v50 = v49 <= v45 && v49 < v46;
              BOOL v51 = v50 && v44 <= v45;
              if (!v51 || v44 >= v46)
              {
                float32x4_t v127 = v21;
                float64x2_t v126 = v25;
                float64x2_t v124 = v29;
                float64x2_t v125 = v28;
                float64x2_t v123 = v24[3];
                int v122 = LODWORD(v24[5].f64[0]);
                float64x2_t v121 = v24[4];
                unsigned int v120 = v38;
                float64x2_t v118 = v36;
                float64x2_t v119 = v26;
                float64x2_t v117 = v37;
                if (is_halfedge_dissolvable && v60)
                {
                  uint64_t v61 = *(unsigned int *)(v11 + 16 * v6 + 8);
                  uint64_t v62 = *(unsigned int *)(v11 + 16 * v15 + 8);
                  unsigned int v113 = *(_DWORD *)(v11 + 16 * *(unsigned int *)(v11 + 16 * v62 + 4) + 8);
                  unsigned int v116 = *(_DWORD *)(v11 + 16 * *(unsigned int *)(v11 + 16 * v61 + 4) + 8);
                  unsigned int v63 = v6;
                  do
                  {
                    uint64_t v64 = v11 + 16 * v63;
                    unsigned int v66 = *(_DWORD *)(v64 + 8);
                    float32x4_t v65 = (_DWORD *)(v64 + 8);
                    unsigned int v63 = v66;
                  }
                  while (v66 != v6);
                  unsigned int v67 = v15;
                  do
                  {
                    uint64_t v68 = v11 + 16 * v67;
                    unsigned int v70 = *(_DWORD *)(v68 + 8);
                    uint64_t v69 = (_DWORD *)(v68 + 8);
                    unsigned int v67 = v70;
                  }
                  while (v70 != v15);
                  v132[0] = v12;
                  uint64_t v71 = *(void *)(a1 + 96);
                  unint64_t v72 = (float64x2_t *)(v71 + 32 * *(unsigned int *)(v11 + 16 * v6 + 12));
                  uint64_t v73 = (float64x2_t *)(v71 + 32 * *(unsigned int *)(v11 + 16 * v15 + 12));
                  float64x2_t v74 = vaddq_f64(v125, v126);
                  float64x2_t v75 = vaddq_f64(v124, v119);
                  *std::vector<int>::pointer v24 = v74;
                  v24[1] = v75;
                  v74.f64[0] = sqrt(vmulq_f64(v75, v75).f64[0] + vaddvq_f64(vmulq_f64(v74, v74)));
                  v24[2].f64[0] = v74.f64[0];
                  *float32x4_t v127 = v74.f64[0] <= 2.22044605e-16;
                  float64x2_t v76 = vaddq_f64(v121, vsubq_f64(v118, vaddq_f64(v72[1], v73[1])));
                  _OWORD v24[3] = vaddq_f64(v123, vsubq_f64(v117, vaddq_f64(*v72, *v73)));
                  _OWORD v24[4] = v76;
                  LODWORD(v24[5].f64[0]) = v120 + v122 - 2;
                  uint64_t v77 = *v14;
                  uint64_t v78 = *(void *)(a1 + 48);
                  uint64_t v79 = v77;
                  do
                  {
                    int v80 = (unsigned int *)(v78 + 16 * v79);
                    *int v80 = v12;
                    uint64_t v79 = v80[2];
                  }
                  while (v79 != v77);
                  *float32x4_t v65 = v62;
                  *uint64_t v69 = v61;
                  *(_DWORD *)(v19 + 112 * v12) = v61;
                  uint64_t v81 = v19 + 112 * v12;
                  int v84 = *(_DWORD *)(v81 + 100);
                  float64x2_t v83 = (int *)(v81 + 100);
                  int v82 = v84;
                  if (v84 != -1)
                  {
                    uint64_t v86 = a4[1];
                    unint64_t v85 = (unint64_t)a4[2];
                    if ((unint64_t)v86 >= v85)
                    {
                      uint64_t v88 = *a4;
                      uint64_t v89 = (v86 - *a4) >> 2;
                      unint64_t v90 = v89 + 1;
                      if ((unint64_t)(v89 + 1) >> 62) {
                        goto LABEL_72;
                      }
                      uint64_t v91 = v85 - (void)v88;
                      if (v91 >> 1 > v90) {
                        unint64_t v90 = v91 >> 1;
                      }
                      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v92 = v90;
                      }
                      if (v92)
                      {
                        int v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v112, v92);
                        uint64_t v88 = *a4;
                        uint64_t v86 = a4[1];
                        int v82 = *v83;
                      }
                      else
                      {
                        int v93 = 0;
                      }
                      uint64_t v94 = &v93[4 * v89];
                      *(_DWORD *)uint64_t v94 = v82;
                      unint64_t v87 = v94 + 4;
                      while (v86 != v88)
                      {
                        int v95 = *((_DWORD *)v86 - 1);
                        v86 -= 4;
                        *((_DWORD *)v94 - 1) = v95;
                        v94 -= 4;
                      }
                      *a4 = v94;
                      a4[1] = v87;
                      a4[2] = &v93[4 * v92];
                      if (v88) {
                        operator delete(v88);
                      }
                    }
                    else
                    {
                      *(_DWORD *)uint64_t v86 = v82;
                      unint64_t v87 = v86 + 4;
                    }
                    a4[1] = v87;
                    *float64x2_t v83 = -1;
                  }
                  uint64_t v96 = v19 + 112 * v17;
                  int v99 = *(_DWORD *)(v96 + 100);
                  unsigned int v98 = (int *)(v96 + 100);
                  int v97 = v99;
                  if (v99 != -1)
                  {
                    unsigned int v101 = a4[1];
                    unint64_t v100 = (unint64_t)a4[2];
                    if ((unint64_t)v101 >= v100)
                    {
                      unsigned int v103 = *a4;
                      uint64_t v104 = (v101 - *a4) >> 2;
                      unint64_t v105 = v104 + 1;
                      if ((unint64_t)(v104 + 1) >> 62) {
LABEL_72:
                      }
                        abort();
                      uint64_t v106 = v100 - (void)v103;
                      if (v106 >> 1 > v105) {
                        unint64_t v105 = v106 >> 1;
                      }
                      if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFFCLL) {
                        unint64_t v107 = 0x3FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        unint64_t v107 = v105;
                      }
                      if (v107)
                      {
                        unint64_t v108 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v112, v107);
                        unsigned int v103 = *a4;
                        unsigned int v101 = a4[1];
                        int v97 = *v98;
                      }
                      else
                      {
                        unint64_t v108 = 0;
                      }
                      int v109 = &v108[4 * v104];
                      *(_DWORD *)int v109 = v97;
                      float32x4_t v102 = v109 + 4;
                      while (v101 != v103)
                      {
                        int v110 = *((_DWORD *)v101 - 1);
                        v101 -= 4;
                        *((_DWORD *)v109 - 1) = v110;
                        v109 -= 4;
                      }
                      *a4 = v109;
                      a4[1] = v102;
                      a4[2] = &v108[4 * v107];
                      if (v103) {
                        operator delete(v103);
                      }
                    }
                    else
                    {
                      *(_DWORD *)unsigned int v101 = v97;
                      float32x4_t v102 = v101 + 4;
                    }
                    a4[1] = v102;
                    *unsigned int v98 = -1;
                  }
                  if (!*v127)
                  {
                  }
                  v132[0] = 0;
                  int v130 = 0;
                  int v130 = v111;
                  if (v132[0] != -1)
                  {
                    std::deque<unsigned int>::push_back(v129, v132);
                    int v111 = v130;
                  }
                  if (v111 != -1) {
                    std::deque<unsigned int>::push_back(v129, &v130);
                  }
                }
              }
            }
          }
        }
      }
      uint64_t v5 = *(void *)(a1 + 456);
    }
    while (v5);
  }
}

void std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::~__func()
{
}

__n128 std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)unint64_t v2 = &unk_26EA03F40;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA03F40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, double a3, double a4, float64x2_t a5, double a6, float64x2_t a7)
{
  uint64_t v7 = *a2;
  if (*(_DWORD *)(a1 + 8) == v7 || *(_DWORD *)(a1 + 12) == v7 || *(_DWORD *)(a1 + 16) == v7) {
    return 0;
  }
  if (*(unsigned char *)(a1 + 24)) {
    return 1;
  }
  uint64_t v11 = *(void *)(a1 + 32);
  unsigned int v12 = (float64x2_t *)(*(void *)(v11 + 96) + 32 * v7);
  uint64_t v13 = *(void *)(v11 + 72) + 112 * *(unsigned int *)(a1 + 20);
  LODWORD(a5.f64[0]) = *(_DWORD *)(v13 + 96);
  a5.f64[0] = (double)*(unint64_t *)&a5.f64[0];
  a7.f64[0] = *(float64_t *)(v13 + 48);
  if (vmulq_f64(vsubq_f64(v12[1], vdivq_f64(*(float64x2_t *)(v13 + 80), a5)), vdivq_f64(*(float64x2_t *)(v13 + 32), a7)).f64[0]+ vaddvq_f64(vmulq_f64(vsubq_f64(*v12, vdivq_f64(*(float64x2_t *)(v13 + 64), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a5.f64[0], 0))), vdivq_f64(*(float64x2_t *)(v13 + 16), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a7.f64[0], 0)))) > 0.0)return 1; {
  else
  }
    return 2;
}

uint64_t std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::build_initial_hull(void)::{lambda(unsigned int)#1}>,unsigned int ()(unsigned int const&)>::target_type()
{
}

void geom::anonymous namespace'::hull_mesh<double>::delete_face(void *a1, unsigned int a2, int a3)
{
  unsigned int v23 = a2;
  uint64_t v6 = a1[9];
  uint64_t v7 = (unsigned int *)(v6 + 112 * a2);
  if (a3)
  {
    unsigned int v8 = *v7;
    do
    {
      unsigned int v9 = *(_DWORD *)(a1[6] + 16 * v8 + 8);
      unsigned int v8 = v9;
    }
    while (v9 != *v7);
  }
  *uint64_t v7 = -1;
  uint64_t v10 = v6 + 112 * a2;
  *(_OWORD *)(v10 + 16) = 0u;
  *(_OWORD *)(v10 + 32) = 0u;
  *(void *)(v10 + 48) = 0;
  *(unsigned char *)(v10 + 56) = 1;
  *(_OWORD *)(v10 + 64) = 0u;
  *(_OWORD *)(v10 + 80) = 0u;
  *(_DWORD *)(v10 + 96) = 0;
  unint64_t v11 = a1[5];
  unsigned int v12 = (unsigned int *)a1[4];
  if ((unint64_t)v12 >= v11)
  {
    unint64_t v14 = (unsigned int *)a1[3];
    uint64_t v15 = v12 - v14;
    unint64_t v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 62) {
      abort();
    }
    uint64_t v17 = v11 - (void)v14;
    if (v17 >> 1 > v16) {
      unint64_t v16 = v17 >> 1;
    }
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v18 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v16;
    }
    if (v18)
    {
      uint64_t v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a1 + 5), v18);
      unint64_t v14 = (unsigned int *)a1[3];
      unsigned int v12 = (unsigned int *)a1[4];
    }
    else
    {
      uint64_t v19 = 0;
    }
    uint64_t v20 = (unsigned int *)&v19[4 * v15];
    uint64_t v21 = &v19[4 * v18];
    *uint64_t v20 = a2;
    uint64_t v13 = v20 + 1;
    while (v12 != v14)
    {
      unsigned int v22 = *--v12;
      *--uint64_t v20 = v22;
    }
    a1[3] = v20;
    a1[4] = v13;
    a1[5] = v21;
    if (v14) {
      operator delete(v14);
    }
  }
  else
  {
    *unsigned int v12 = a2;
    uint64_t v13 = v12 + 1;
  }
  a1[4] = v13;
}

void std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::~__func()
{
}

__n128 std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26EA03FC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA03FC0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2, double a3, double a4, double a5, double a6, float64x2_t a7)
{
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(v7 + 72);
  if (*(unsigned char *)(v8 + 112 * *a2 + 56)) {
    return 1;
  }
  uint64_t v10 = (float64x2_t *)(v8 + 112 * *a2);
  unint64_t v11 = (float64x2_t *)(*(void *)(v7 + 96)
                      + 32 * *(unsigned int *)(*(void *)(v7 + 48) + 16 * LODWORD(v10->f64[0]) + 12));
  a7.f64[0] = v10[3].f64[0];
  return vmulq_f64(vsubq_f64(*(float64x2_t *)(*(void *)(a1 + 16) + 16), v11[1]), vdivq_f64(v10[2], a7)).f64[0]
       + vaddvq_f64(vmulq_f64(vsubq_f64(*(float64x2_t *)*(void *)(a1 + 16), *v11), vdivq_f64(v10[1], (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a7.f64[0], 0)))) >= -*(double *)(v7 + 544);
}

uint64_t std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::find_horizon(std::vector<unsigned int> &,std::vector<unsigned int> &,unsigned int &,double &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target_type()
{
}

BOOL geom::anonymous namespace'::hull_mesh<double>::is_halfedge_dissolvable(uint64_t a1, unsigned int a2, double a3, double a4, double a5, double a6, double a7, double a8, float64x2_t a9)
{
  uint64_t v9 = *(void *)(a1 + 48);
  uint64_t v10 = *(unsigned int *)(v9 + 16 * a2 + 4);
  unint64_t v11 = (unsigned int *)(v9 + 16 * *(unsigned int *)(v9 + 16 * v10 + 8));
  uint64_t v12 = v11[1];
  uint64_t v13 = v9 + 16 * v12;
  unint64_t v14 = (unsigned int *)(v9 + 16 * *(unsigned int *)(v13 + 8));
  uint64_t v15 = v14[1];
  if (*(_DWORD *)(v9 + 16 * v15 + 8) != a2) {
    return 1;
  }
  if (*(_DWORD *)(v9
                 + 16
                 * *(unsigned int *)(v9
                                   + 16
                                   * *(unsigned int *)(v9
                                                     + 16
                                                     * *(unsigned int *)(v9
                                                                       + 16
                                                                       * *(unsigned int *)(v9
                                                                                         + 16
                                                                                         * *(unsigned int *)(v13 + 4)
                                                                                         + 8)
                                                                       + 4)
                                                     + 8)
                                   + 4)
                 + 8) == v12)
    return 0;
  uint64_t v16 = v9 + 16 * v15;
  if (*(_DWORD *)(v9
                 + 16
                 * *(unsigned int *)(v9
                                   + 16
                                   * *(unsigned int *)(v9
                                                     + 16
                                                     * *(unsigned int *)(v9
                                                                       + 16
                                                                       * *(unsigned int *)(v9
                                                                                         + 16
                                                                                         * *(unsigned int *)(v16 + 4)
                                                                                         + 8)
                                                                       + 4)
                                                     + 8)
                                   + 4)
                 + 8) == v15)
    return 0;
  uint64_t v17 = *(void *)(a1 + 72);
  unsigned int v18 = *v14;
  int v19 = *(_DWORD *)(v17 + 112 * *v14 + 96);
  if (v19 == 3) {
    return 0;
  }
  uint64_t v20 = (unsigned int *)(v9 + 16 * a2);
  unsigned int v23 = *v20;
  uint64_t v21 = v20 + 3;
  unsigned int v22 = v23;
  int v24 = *(_DWORD *)(v17 + 112 * v23 + 96);
  if (v24 == 3) {
    return 0;
  }
  float64x2_t v25 = (float64x2_t *)(v17 + 112 * v18);
  float64x2_t v27 = v25[1];
  float64x2_t v26 = v25[2];
  float64x2_t v28 = (float64x2_t *)(v17 + 112 * v22);
  float64x2_t v29 = vaddq_f64(v27, v28[1]);
  float64x2_t v30 = vaddq_f64(v26, v28[2]);
  a9.f64[0] = sqrt(vmulq_f64(v30, v30).f64[0] + vaddvq_f64(vmulq_f64(v29, v29)));
  if (fabs(a9.f64[0]) <= 2.22044605e-16) {
    return 1;
  }
  float64x2_t v31 = (unsigned int *)(v9 + 16 * v10 + 12);
  uint64_t v32 = *(void *)(a1 + 96);
  float64x2_t v33 = (float64x2_t *)(v32 + 32 * *v21);
  float64x2_t v35 = *v33;
  float64x2_t v34 = v33[1];
  uint64_t v36 = v17 + 112 * *v11;
  float64x2_t v37 = (float64x2_t *)(v17 + 112 * v22);
  float64x2_t v38 = vaddq_f64(*(float64x2_t *)(v36 + 64), v37[4]);
  float64x2_t v39 = vaddq_f64(*(float64x2_t *)(v36 + 80), v37[5]);
  float64x2_t v40 = (float64x2_t *)(v32 + 32 * *v31);
  v41.f64[0] = v33->f64[0];
  *(void *)&v41.f64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
  __asm { FMOV            V7.2D, #-2.0 }
  float64x2_t v46 = vmlaq_f64(vsubq_f64(v38, *v40), _Q7, v41);
  float64x2_t v47 = vmlaq_f64(vsubq_f64(v39, v40[1]), _Q7, v34);
  _Q7.f64[0] = (double)(v24 + *(_DWORD *)(v36 + 96) - 3);
  float64x2_t v48 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&_Q7.f64[0], 0);
  float64x2_t v49 = vdivq_f64(v47, _Q7);
  float64x2_t v50 = vdivq_f64(v46, v48);
  double v51 = vmulq_f64(vdivq_f64(v30, a9), vsubq_f64(v34, v49)).f64[0]
      + vaddvq_f64(vmulq_f64(vdivq_f64(v29, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&a9.f64[0], 0)), vsubq_f64(*v33, v50)));
  double v52 = *(double *)(a1 + 544);
  double v53 = -v52;
  if (v51 > v52 || v51 < v53) {
    return 0;
  }
  double v55 = (unsigned int *)(v9 + 16 * v12 + 12);
  v50.f64[0] = (double)(v19 - 1);
  float64x2_t v56 = vdivq_f64(vsubq_f64(v25[5], v34), v50);
  double v57 = (float64x2_t *)(v32 + 32 * *(unsigned int *)(v16 + 12));
  float64x2_t v58 = v57[1];
  float64x2_t v59 = (float64x2_t *)(v32 + 32 * *v55);
  float64x2_t v60 = v59[1];
  float64x2_t v61 = vnegq_f64(v58);
  *(void *)&v62.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v61, *v59, 1), v60, *v57, 1);
  *(void *)&v63.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v34), *v59, 1), v60, v35, 1);
  v60.f64[1] = v59->f64[0];
  float64x2_t v64 = vnegq_f64(*v57);
  v58.f64[1] = v57->f64[0];
  int64x2_t v65 = (int64x2_t)vmlaq_f64(vmulq_f64(v60, v64), *v59, v58);
  *(void *)&v62.f64[1] = v65.i64[0];
  float64x2_t v66 = vdivq_f64(vsubq_f64(v25[4], v35), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v50.f64[0], 0));
  float64x2_t v67 = vaddq_f64(v27, v62);
  v68.f64[0] = v33[1].f64[0];
  v68.f64[1] = v33->f64[0];
  int64x2_t v69 = (int64x2_t)vmlaq_f64(vmulq_f64(v68, v64), v35, v58);
  *(void *)&v61.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v61, v35, 1), v34, *v57, 1);
  *(void *)&v61.f64[1] = v69.i64[0];
  int64x2_t v70 = (int64x2_t)vmlaq_f64(vmulq_f64(v60, vnegq_f64(v35)), *v59, v68);
  *(void *)&v63.f64[1] = v70.i64[0];
  float64x2_t v71 = vsubq_f64(vsubq_f64(v67, v61), v63);
  float64x2_t v72 = vsubq_f64(vsubq_f64(vaddq_f64(v26, (float64x2_t)vdupq_laneq_s64(v65, 1)), (float64x2_t)vdupq_laneq_s64(v69, 1)), (float64x2_t)vdupq_laneq_s64(v70, 1));
  float64x2_t v73 = vmulq_f64(v72, v72);
  v73.f64[0] = sqrt(v73.f64[0] + vaddvq_f64(vmulq_f64(v71, v71)));
  double v74 = vmulq_f64(vsubq_f64(v34, v56), vdivq_f64(v72, v73)).f64[0]
      + vaddvq_f64(vmulq_f64(vsubq_f64(v35, v66), vdivq_f64(v71, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v73.f64[0], 0))));
  return v74 <= v52 && v74 >= v53;
}

uint64_t geom::anonymous namespace'::hull_mesh<double>::dissolve_vertex_if_redundant(void *a1, unsigned int a2, unsigned int **a3, uint64_t a4)
{
  uint64_t v4 = a1[9];
  if (0x6DB6DB6DB6DB6DB7 * ((a1[10] - v4) >> 4) - ((uint64_t)(a1[4] - a1[3]) >> 2) == 2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v6 = a1[6];
  uint64_t v7 = *(unsigned int *)(v6 + 16 * a2 + 4);
  uint64_t v8 = *(unsigned int *)(v6 + 16 * v7 + 8);
  if (*(_DWORD *)(v6 + 16 * *(unsigned int *)(v6 + 16 * v8 + 4) + 8) != a2) {
    return 0xFFFFFFFFLL;
  }
  if (*(_DWORD *)(v4 + 112 * *(unsigned int *)(v6 + 16 * v7) + 96) >= *(_DWORD *)(v4
                                                                                   + 112
                                                                                   * *(unsigned int *)(v6 + 16 * a2)
                                                                                   + 96))
    uint64_t v11 = a2;
  else {
    uint64_t v11 = v8;
  }
  unsigned int v12 = v11;
  do
  {
    unsigned int v13 = v12;
    unsigned int v12 = *(_DWORD *)(v6 + 16 * v12 + 8);
  }
  while (v12 != v11);
  unsigned int v14 = v13;
  uint64_t v15 = *(unsigned int *)(v6 + 16 * a2 + 8);
  uint64_t v16 = (unsigned int *)(v6 + 16 * v11);
  if (*(_DWORD *)(v6 + 16 * v15 + 8) == v13)
  {
    uint64_t v17 = *v16;
    uint64_t v101 = *(unsigned int *)(v6 + 16 * v13 + 4);
    int v102 = *(_DWORD *)(v6 + 16 * v101 + 8);
    uint64_t v18 = *(unsigned int *)(v6 + 16 * v11 + 4);
    unsigned int v19 = *(_DWORD *)(v6 + 16 * v11 + 4);
    do
    {
      unsigned int v20 = v19;
      unsigned int v19 = *(_DWORD *)(v6 + 16 * v19 + 8);
    }
    while (v19 != v18);
    unsigned int v106 = *(_DWORD *)(v6 + 16 * v18);
    unsigned int v21 = v106;
    unsigned int v22 = (float64x2_t *)(a1[12] + 32 * *(unsigned int *)(v6 + 16 * v11 + 12));
    uint64_t v23 = 112 * v106;
    int v24 = (float64x2_t *)(v4 + v23);
    float64x2_t v25 = (float64x2_t *)(v4 + 112 * v17);
    float64x2_t v26 = vaddq_f64(v25[2], v24[2]);
    float64x2_t v27 = vaddq_f64(v25[1], v24[1]);
    v24[1] = v27;
    v24[2] = v26;
    v27.f64[0] = sqrt(vmulq_f64(v26, v26).f64[0] + vaddvq_f64(vmulq_f64(v27, v27)));
    uint64_t v28 = a1[9] + v23;
    *(float64_t *)(v28 + 48) = v27.f64[0];
    *(unsigned char *)(v28 + 56) = v27.f64[0] <= 2.22044605e-16;
    float64x2_t v29 = vsubq_f64(*(float64x2_t *)(v28 + 80), v22[1]);
    *(float64x2_t *)(v28 + 64) = vsubq_f64(*(float64x2_t *)(v28 + 64), *v22);
    *(float64x2_t *)(v28 + 80) = v29;
    uint64_t v30 = a1[9];
    --*(_DWORD *)(v30 + v23 + 96);
    uint64_t v32 = (int *)(v30 + 112 * v17 + 100);
    int v31 = *v32;
    unsigned int v103 = v17;
    if (*v32 != -1)
    {
      unint64_t v33 = *(void *)(a4 + 16);
      float64x2_t v34 = *(_DWORD **)(a4 + 8);
      if ((unint64_t)v34 >= v33)
      {
        float64x2_t v73 = *(_DWORD **)a4;
        uint64_t v74 = ((uint64_t)v34 - *(void *)a4) >> 2;
        unint64_t v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 62) {
          goto LABEL_58;
        }
        uint64_t v76 = v33 - (void)v73;
        if (v76 >> 1 > v75) {
          unint64_t v75 = v76 >> 1;
        }
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v77 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v77 = v75;
        }
        if (v77)
        {
          uint64_t v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v77);
          float64x2_t v73 = *(_DWORD **)a4;
          float64x2_t v34 = *(_DWORD **)(a4 + 8);
          int v31 = *v32;
        }
        else
        {
          uint64_t v78 = 0;
        }
        uint64_t v79 = &v78[4 * v74];
        int v80 = &v78[4 * v77];
        *(_DWORD *)uint64_t v79 = v31;
        float64x2_t v35 = v79 + 4;
        while (v34 != v73)
        {
          int v81 = *--v34;
          *((_DWORD *)v79 - 1) = v81;
          v79 -= 4;
        }
        *(void *)a4 = v79;
        *(void *)(a4 + 8) = v35;
        *(void *)(a4 + 16) = v80;
        if (v73) {
          operator delete(v73);
        }
        LODWORD(v17) = v103;
      }
      else
      {
        *float64x2_t v34 = v31;
        float64x2_t v35 = v34 + 1;
      }
      *(void *)(a4 + 8) = v35;
      uint64_t v30 = a1[9];
      *(_DWORD *)(v30 + 112 * v17 + 100) = -1;
      unsigned int v21 = v106;
    }
    uint64_t v82 = v30 + 112 * v21;
    int v85 = *(_DWORD *)(v82 + 100);
    int v84 = (int *)(v82 + 100);
    int v83 = v85;
    if (v85 == -1)
    {
      unsigned int v89 = v21;
LABEL_55:
      *(_DWORD *)(a1[6] + 16 * v15) = v21;
      uint64_t v99 = a1[9] + 112 * v89;
      *(_DWORD *)uint64_t v99 = v15;
      uint64_t v100 = a1[6];
      *(_DWORD *)(v100 + 16 * v20 + 8) = v15;
      *(_DWORD *)(v100 + 16 * v15 + 8) = v102;
      if (!*(unsigned char *)(v99 + 56))
      {
      }
      return v15;
    }
    unint64_t v86 = *(void *)(a4 + 16);
    unint64_t v87 = *(_DWORD **)(a4 + 8);
    if ((unint64_t)v87 < v86)
    {
      *unint64_t v87 = v83;
      uint64_t v88 = v87 + 1;
LABEL_54:
      *(void *)(a4 + 8) = v88;
      unsigned int v89 = v106;
      *(_DWORD *)(a1[9] + 112 * v106 + 100) = -1;
      unsigned int v21 = v89;
      goto LABEL_55;
    }
    unint64_t v90 = *(_DWORD **)a4;
    uint64_t v91 = ((uint64_t)v87 - *(void *)a4) >> 2;
    unint64_t v92 = v91 + 1;
    if (!((unint64_t)(v91 + 1) >> 62))
    {
      uint64_t v93 = v86 - (void)v90;
      if (v93 >> 1 > v92) {
        unint64_t v92 = v93 >> 1;
      }
      if ((unint64_t)v93 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v94 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v94 = v92;
      }
      if (v94)
      {
        int v95 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a4 + 16, v94);
        unint64_t v90 = *(_DWORD **)a4;
        unint64_t v87 = *(_DWORD **)(a4 + 8);
        int v83 = *v84;
      }
      else
      {
        int v95 = 0;
      }
      uint64_t v96 = &v95[4 * v91];
      int v97 = &v95[4 * v94];
      *(_DWORD *)uint64_t v96 = v83;
      uint64_t v88 = v96 + 4;
      while (v87 != v90)
      {
        int v98 = *--v87;
        *((_DWORD *)v96 - 1) = v98;
        v96 -= 4;
      }
      *(void *)a4 = v96;
      *(void *)(a4 + 8) = v88;
      *(void *)(a4 + 16) = v97;
      if (v90) {
        operator delete(v90);
      }
      goto LABEL_54;
    }
LABEL_58:
    abort();
  }
  uint64_t v37 = v6 + 16 * v11;
  uint64_t v38 = *(void *)(v37 + 4);
  float64x2_t v39 = (unsigned int *)(v6 + 16 * v38);
  uint64_t v41 = v39[2];
  uint64_t v40 = v39[3];
  uint64_t v42 = v6 + 16 * v41;
  uint64_t v15 = *(unsigned int *)(v42 + 4);
  float64x2_t v43 = (unsigned int *)(v6 + 16 * v15);
  *(void *)(v43 + 1) = v38;
  LODWORD(v42) = *(_DWORD *)(v42 + 8);
  v39[1] = v15;
  v39[2] = v42;
  *(_DWORD *)(v4 + 112 * *v43) = v15;
  unsigned int v44 = *v39;
  uint64_t v45 = v4 + 112 * *v39;
  *(_DWORD *)uint64_t v45 = v38;
  unsigned int v46 = *v16;
  unsigned int v104 = v44;
  unsigned int v105 = v46;
  uint64_t v47 = a1[12];
  float64x2_t v48 = (float64x2_t *)(v47 + 32 * v43[3]);
  float64x2_t v49 = (float64x2_t *)(v47 + 32 * *(unsigned int *)(v37 + 12));
  float64x2_t v50 = (float64x2_t *)(v47 + 32 * v40);
  uint64_t v51 = v4 + 112 * v46;
  float64x2_t v52 = v48[1];
  float64x2_t v53 = v49[1];
  float64x2_t v54 = vnegq_f64(v52);
  float64x2_t v55 = vmlaq_laneq_f64(vmulq_laneq_f64(v54, *v49, 1), v53, *v48, 1);
  float64x2_t v56 = vnegq_f64(v53);
  v53.f64[1] = v49->f64[0];
  float64x2_t v57 = vnegq_f64(*v48);
  v52.f64[1] = v48->f64[0];
  float64x2_t v58 = vmlaq_f64(vmulq_f64(v53, v57), *v49, v52);
  float64x2_t v59 = v50[1];
  float64x2_t v60 = vmlaq_laneq_f64(vmulq_laneq_f64(v56, *v50, 1), v59, *v49, 1);
  *(void *)&v54.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v54, *v50, 1), v59, *v48, 1);
  v59.f64[1] = v50->f64[0];
  float64x2_t v61 = vmlaq_f64(vmulq_f64(v59, v57), *v50, v52);
  float64x2_t v62 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v61, 1);
  v54.f64[1] = v61.f64[0];
  int64x2_t v63 = (int64x2_t)vaddq_f64(v58, vmlaq_f64(vmulq_f64(v59, vnegq_f64(*v49)), *v50, v53));
  *(void *)&v61.f64[0] = *(_OWORD *)&vaddq_f64(v55, v60);
  *(void *)&v61.f64[1] = v63.i64[0];
  float64x2_t v64 = (float64x2_t)vdupq_laneq_s64(v63, 1);
  float64x2_t v65 = vsubq_f64(*(float64x2_t *)(v51 + 32), v64);
  *(float64x2_t *)(v51 + 16) = vsubq_f64(*(float64x2_t *)(v51 + 16), v61);
  *(float64x2_t *)(v51 + 32) = v65;
  float64x2_t v66 = vaddq_f64(*(float64x2_t *)(v45 + 32), v64);
  *(float64x2_t *)(v45 + 16) = vaddq_f64(*(float64x2_t *)(v45 + 16), v61);
  *(float64x2_t *)(v45 + 32) = v66;
  float64x2_t v67 = vaddq_f64(*(float64x2_t *)(v51 + 32), v62);
  *(float64x2_t *)(v51 + 16) = vaddq_f64(*(float64x2_t *)(v51 + 16), v54);
  *(float64x2_t *)(v51 + 32) = v67;
  float64x2_t v68 = vsubq_f64(*(float64x2_t *)(v45 + 16), v54);
  float64x2_t v69 = vsubq_f64(*(float64x2_t *)(v45 + 32), v62);
  *(float64x2_t *)(v45 + 16) = v68;
  *(float64x2_t *)(v45 + 32) = v69;
  *(double *)(v51 + 48) = sqrt(vmulq_f64(*(float64x2_t *)(v51 + 32), *(float64x2_t *)(v51 + 32)).f64[0]+ vaddvq_f64(vmulq_f64(*(float64x2_t *)(v51 + 16), *(float64x2_t *)(v51 + 16))));
  v69.f64[0] = sqrt(vmulq_f64(v69, v69).f64[0] + vaddvq_f64(vmulq_f64(v68, v68)));
  *(float64_t *)(v45 + 48) = v69.f64[0];
  *(unsigned char *)(v51 + 56) = *(double *)(v51 + 48) <= 2.22044605e-16;
  *(unsigned char *)(v45 + 56) = v69.f64[0] <= 2.22044605e-16;
  uint64_t v70 = v45 + 56;
  float64x2_t v71 = vsubq_f64(*(float64x2_t *)(v51 + 80), v49[1]);
  *(float64x2_t *)(v51 + 64) = vsubq_f64(*(float64x2_t *)(v51 + 64), *v49);
  *(float64x2_t *)(v51 + 80) = v71;
  float64x2_t v72 = vsubq_f64(*(float64x2_t *)(v70 + 24), v49[1]);
  *(float64x2_t *)(v70 + 8) = vsubq_f64(*(float64x2_t *)(v70 + 8), *v49);
  *(float64x2_t *)(v70 + 24) = v72;
  --*(_DWORD *)(v51 + 96);
  --*(_DWORD *)(v70 + 40);
  if (!*(unsigned char *)(v51 + 56))
  {
  }
  if (!*(unsigned char *)v70)
  {
  }
  return v15;
}

void std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::~__func()
{
}

__n128 std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)unint64_t v2 = &unk_26EA04040;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA04040;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  uint64_t result = *(unsigned int *)(a1 + 20);
  if (result)
  {
    uint64_t v5 = 0;
    uint64_t v9 = *(void *)(v2 + 96) + 32 * v3;
    float64x2_t v7 = *(float64x2_t *)v9;
    float64x2_t v6 = *(float64x2_t *)(v9 + 16);
    LODWORD(v9) = -1;
    unsigned int v10 = 1;
    double v11 = -INFINITY;
    do
    {
      uint64_t v8 = *(void *)(v2 + 392);
      double v12 = vmulq_f64(vsubq_f64(v6, *(float64x2_t *)(v8 + 32 * (v10 - 1) + 16)), *(float64x2_t *)(v8 + 32 * v10 + 16)).f64[0]+ vaddvq_f64(vmulq_f64(vsubq_f64(v7, *(float64x2_t *)(v8 + 32 * (v10 - 1))), *(float64x2_t *)(v8 + 32 * v10)));
      if (v12 <= v11)
      {
        uint64_t v9 = v9;
      }
      else
      {
        double v11 = v12;
        uint64_t v9 = v5;
      }
      ++v5;
      v10 += 2;
    }
    while (result != v5);
  }
  else
  {
    uint64_t v9 = 0xFFFFFFFFLL;
    double v11 = -INFINITY;
  }
  if (v11 > *(double *)(v2 + 544) * -2.0)
  {
    *(double *)(*(void *)(v2 + 120) + 8 * v3) = v11;
    return v9;
  }
  return result;
}

uint64_t std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1},std::allocator<geom::anonymous namespace'::hull_mesh<double>::repartition_points_after_grow(std::vector<unsigned int> const&,unsigned int const&,unsigned int const&)::{lambda(unsigned int const&)#1}>,unsigned int ()(unsigned int)>::target_type()
{
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 16);
  if (v2)
  {
    do
    {
      uint64_t v3 = (void *)*v2;
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
  uint64_t v4 = *(void **)a1;
  *(void *)a1 = 0;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    unsigned int v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      double v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          double v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  double v11 = operator new(0x18uLL);
  void *v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  *((_DWORD *)v11 + 5) = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  unsigned int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    void *v11 = *v20;
LABEL_38:
    *unsigned int v20 = v11;
    goto LABEL_39;
  }
  void *v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    unsigned int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>(uint64_t a1, size_t __n)
{
  if (__n == 1)
  {
    size_t prime = 2;
  }
  else
  {
    size_t prime = __n;
    if ((__n & (__n - 1)) != 0) {
      size_t prime = std::__next_prime(__n);
    }
  }
  int8x8_t v4 = *(int8x8_t *)(a1 + 8);
  if (prime > *(void *)&v4) {
    goto LABEL_16;
  }
  if (prime < *(void *)&v4)
  {
    unint64_t v5 = vcvtps_u32_f32((float)*(unint64_t *)(a1 + 24) / *(float *)(a1 + 32));
    if (*(void *)&v4 < 3uLL || (uint8x8_t v6 = (uint8x8_t)vcnt_s8(v4), v6.i16[0] = vaddlv_u8(v6), v6.u32[0] > 1uLL))
    {
      unint64_t v5 = std::__next_prime(v5);
    }
    else
    {
      uint64_t v7 = 1 << -(char)__clz(v5 - 1);
      if (v5 >= 2) {
        unint64_t v5 = v7;
      }
    }
    if (prime <= v5) {
      size_t prime = v5;
    }
    if (prime < *(void *)&v4)
    {
LABEL_16:
      std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>(a1, prime);
    }
  }
}

void std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__do_rehash<true>(uint64_t a1, unint64_t a2)
{
  if (a2)
  {
    if (a2 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int8x8_t v4 = operator new(8 * a2);
    unint64_t v5 = *(void **)a1;
    *(void *)a1 = v4;
    if (v5) {
      operator delete(v5);
    }
    uint64_t v6 = 0;
    *(void *)(a1 + 8) = a2;
    do
      *(void *)(*(void *)a1 + 8 * v6++) = 0;
    while (a2 != v6);
    uint64_t v7 = *(void **)(a1 + 16);
    if (v7)
    {
      unint64_t v8 = v7[1];
      uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)a2);
      v9.i16[0] = vaddlv_u8(v9);
      if (v9.u32[0] > 1uLL)
      {
        if (v8 >= a2) {
          v8 %= a2;
        }
      }
      else
      {
        v8 &= a2 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v8) = a1 + 16;
      double v11 = (void *)*v7;
      if (*v7)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v9.u32[0] > 1uLL)
          {
            if (v12 >= a2) {
              v12 %= a2;
            }
          }
          else
          {
            v12 &= a2 - 1;
          }
          if (v12 != v8)
          {
            if (!*(void *)(*(void *)a1 + 8 * v12))
            {
              *(void *)(*(void *)a1 + 8 * v12) = v7;
              goto LABEL_24;
            }
            *uint64_t v7 = *v11;
            void *v11 = **(void **)(*(void *)a1 + 8 * v12);
            **(void **)(*(void *)a1 + 8 * v12) = v11;
            double v11 = v7;
          }
          unint64_t v12 = v8;
LABEL_24:
          uint64_t v7 = v11;
          double v11 = (void *)*v11;
          unint64_t v8 = v12;
        }
        while (v11);
      }
    }
  }
  else
  {
    unsigned int v10 = *(void **)a1;
    *(void *)a1 = 0;
    if (v10) {
      operator delete(v10);
    }
    *(void *)(a1 + 8) = 0;
  }
}

void std::vector<BOOL>::reserve(char **a1, unint64_t a2)
{
  if (a2 > (void)a1[2] << 6)
  {
    if ((a2 & 0x8000000000000000) != 0) {
      abort();
    }
    unsigned int v10 = 0;
    long long v11 = 0uLL;
    std::vector<BOOL>::__vallocate[abi:nn180100](&v10, a2);
    unint64_t v3 = (unint64_t)a1[1];
    unint64_t v8 = *a1;
    int v9 = 0;
    uint64_t v6 = &v8[8 * (v3 >> 6)];
    int v7 = v3 & 0x3F;
    std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(&v10, (uint64_t)&v8, (uint64_t)&v6, v3);
    int8x8_t v4 = *a1;
    *a1 = v10;
    unsigned int v10 = v4;
    long long v5 = *(_OWORD *)(a1 + 1);
    *(_OWORD *)(a1 + 1) = v11;
    long long v11 = v5;
    if (v4) {
      operator delete(v4);
    }
  }
}

void *std::vector<BOOL>::__vallocate[abi:nn180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    abort();
  }
  uint64_t result = std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 2), ((unint64_t)(a2 - 1) >> 6) + 1);
  *a1 = result;
  a1[1] = 0;
  a1[2] = v4;
  return result;
}

void std::vector<BOOL>::__construct_at_end<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = v4 + a4;
  a1[1] = v4 + a4;
  if (!v4 || ((v5 - 1) ^ (v4 - 1)) >= 0x40)
  {
    if (v5 >= 0x41) {
      unint64_t v6 = (v5 - 1) >> 6;
    }
    else {
      unint64_t v6 = 0;
    }
    *(void *)(*a1 + 8 * v6) = 0;
  }
  int v7 = *(_DWORD *)(a2 + 8);
  uint64_t v8 = *(void *)a3;
  int v9 = *(_DWORD *)(a3 + 8);
  uint64_t v10 = *a1 + 8 * (v4 >> 6);
  uint64_t v16 = *(void *)a2;
  int v17 = v7;
  uint64_t v14 = v8;
  int v15 = v9;
  uint64_t v12 = v10;
  int v13 = v4 & 0x3F;
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(&v16, &v14, &v12, (uint64_t)&v11);
}

void std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  int v5 = *((_DWORD *)a1 + 2);
  uint64_t v6 = *a2;
  int v7 = *((_DWORD *)a2 + 2);
  uint64_t v16 = *a1;
  int v17 = v5;
  uint64_t v14 = v6;
  int v15 = v7;
  int v8 = *((_DWORD *)a3 + 2);
  uint64_t v12 = *a3;
  int v13 = v8;
  std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>((uint64_t)&v16, (uint64_t)&v14, (uint64_t)&v12, (uint64_t)&v18);
  int v9 = v19;
  uint64_t v10 = v20;
  int v11 = v21;
  *(void *)a4 = v18;
  *(_DWORD *)(a4 + 8) = v9;
  *(void *)(a4 + 16) = v10;
  *(_DWORD *)(a4 + 24) = v11;
}

void std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:nn180100]<std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>,std::__bit_iterator<std::vector<BOOL>,false,0ul>>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v4 = *(void **)a1;
  int v5 = *(_DWORD *)(a1 + 8);
  for (i = *(_DWORD *)(a3 + 8); *(void *)a1 != *(void *)a2 || v5 != *(_DWORD *)(a2 + 8); int v5 = *(_DWORD *)(a1 + 8))
  {
    int v8 = *(uint64_t **)a3;
    uint64_t v9 = 1 << i;
    if ((*v4 >> v5)) {
      uint64_t v10 = *v8 | v9;
    }
    else {
      uint64_t v10 = *v8 & ~v9;
    }
    *int v8 = v10;
    if (v5 == 63)
    {
      int v11 = 0;
      *(void *)a1 = v4 + 1;
    }
    else
    {
      int v11 = v5 + 1;
    }
    *(_DWORD *)(a1 + 8) = v11;
    int v12 = *(_DWORD *)(a3 + 8);
    if (v12 == 63)
    {
      int i = 0;
      *(void *)a3 += 8;
    }
    else
    {
      int i = v12 + 1;
    }
    *(_DWORD *)(a3 + 8) = i;
    unint64_t v4 = *(void **)a1;
  }
  *(void *)a4 = v4;
  *(_DWORD *)(a4 + 8) = v5;
  *(void *)(a4 + 16) = *(void *)a3;
  *(_DWORD *)(a4 + 24) = i;
}

unint64_t *std::__copy_aligned[abi:nn180100]<std::vector<BOOL>,true>@<X0>(unint64_t *__src@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, unsigned int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  int64_t v8 = a4 - (unint64_t)a2 + 8 * (a3 - (void)__src);
  if (v8 <= 0)
  {
    uint64_t v16 = *(unint64_t **)a5;
  }
  else
  {
    uint64_t v9 = __src;
    __src = *(unint64_t **)a5;
    if (a2)
    {
      if (v8 >= (unint64_t)(64 - a2)) {
        int64_t v10 = 64 - a2;
      }
      else {
        int64_t v10 = v8;
      }
      v8 -= v10;
      uint64_t v11 = *v9++;
      *__src = *__src & ~((0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2)) | v11 & (0xFFFFFFFFFFFFFFFFLL >> (64 - a2 - v10)) & (-1 << a2);
      unint64_t v12 = v10 + *(unsigned int *)(a5 + 8);
      __src = (unint64_t *)((char *)__src + ((v12 >> 3) & 0x3FFFFFF8));
      *(void *)a5 = __src;
      *(_DWORD *)(a5 + 8) = v12 & 0x3F;
    }
    if (v8 >= 0) {
      uint64_t v13 = v8;
    }
    else {
      uint64_t v13 = v8 + 63;
    }
    uint64_t v14 = v13 >> 6;
    if ((unint64_t)(v8 + 63) >= 0x7F)
    {
      memmove(__src, v9, 8 * v14);
      __src = *(unint64_t **)a5;
    }
    uint64_t v15 = v8 - (v14 << 6);
    uint64_t v16 = &__src[v14];
    *(void *)a5 = v16;
    if (v15 >= 1)
    {
      *uint64_t v16 = *v16 & ~(0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8)) | v9[v14] & (0xFFFFFFFFFFFFFFFFLL >> (((_BYTE)v14 << 6) - v8));
      *(_DWORD *)(a5 + 8) = v15;
    }
  }
  *(void *)a6 = v16;
  *(_DWORD *)(a6 + 8) = *(_DWORD *)(a5 + 8);
  return __src;
}

void *std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(void *result, unint64_t a2)
{
  unint64_t v2 = a2;
  unint64_t v3 = result;
  int v4 = *((_DWORD *)result + 2);
  int v5 = (void *)*result;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ |= (0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4);
    unint64_t v2 = a2 - v6;
    *uint64_t result = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    uint64_t result = memset(v5, 255, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *unint64_t v3 = v8;
    *v8 |= 0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F);
  }
  return result;
}

void std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  int v4 = *(_DWORD *)(a1 + 8);
  int v5 = *(void **)a1;
  if (v4)
  {
    if ((64 - v4) >= a2) {
      unint64_t v6 = a2;
    }
    else {
      unint64_t v6 = (64 - v4);
    }
    *v5++ &= ~((0xFFFFFFFFFFFFFFFFLL >> (64 - v4 - v6)) & (-1 << v4));
    unint64_t v2 = a2 - v6;
    *(void *)a1 = v5;
  }
  unint64_t v7 = v2 >> 6;
  if (v2 >= 0x40) {
    bzero(v5, 8 * v7);
  }
  if ((v2 & 0x3F) != 0)
  {
    int64_t v8 = &v5[v7];
    *(void *)a1 = v8;
    *v8 &= ~(0xFFFFFFFFFFFFFFFFLL >> -(v2 & 0x3F));
  }
}

double geom_create_bvh_create_opt_2f()
{
  uint64_t opt_2f_obj_alloc = geom_bvh_create_opt_2f_obj_alloc();
  double result = 0.0;
  *(_OWORD *)(opt_2f_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_2f_obj_alloc + 40) = 0u;
  *(void *)(opt_2f_obj_alloc + 16) = 1;
  *(unsigned char *)(opt_2f_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_2f_obj_alloc + 48) = 1;
  return result;
}

double geom_create_bvh_create_opt_2d()
{
  uint64_t opt_2d_obj_alloc = geom_bvh_create_opt_2d_obj_alloc();
  double result = 0.0;
  *(_OWORD *)(opt_2d_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_2d_obj_alloc + 40) = 0u;
  *(void *)(opt_2d_obj_alloc + 16) = 1;
  *(unsigned char *)(opt_2d_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_2d_obj_alloc + 48) = 1;
  return result;
}

double geom_create_bvh_create_opt_3f()
{
  uint64_t opt_3f_obj_alloc = geom_bvh_create_opt_3f_obj_alloc();
  double result = 0.0;
  *(_OWORD *)(opt_3f_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_3f_obj_alloc + 40) = 0u;
  *(void *)(opt_3f_obj_alloc + 16) = 1;
  *(unsigned char *)(opt_3f_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_3f_obj_alloc + 48) = 1;
  return result;
}

double geom_create_bvh_create_opt_3d()
{
  uint64_t opt_3d_obj_alloc = geom_bvh_create_opt_3d_obj_alloc();
  double result = 0.0;
  *(_OWORD *)(opt_3d_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_3d_obj_alloc + 40) = 0u;
  *(void *)(opt_3d_obj_alloc + 16) = 1;
  *(unsigned char *)(opt_3d_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_3d_obj_alloc + 48) = 1;
  return result;
}

uint64_t geom_bvh_create_opt_get_minimum_primitives_in_interior_node_2f(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t geom_bvh_create_opt_set_minimum_primitives_in_interior_node_2f(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_minimum_primitives_in_interior_node_2d(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t geom_bvh_create_opt_set_minimum_primitives_in_interior_node_2d(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_minimum_primitives_in_interior_node_3f(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t geom_bvh_create_opt_set_minimum_primitives_in_interior_node_3f(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_minimum_primitives_in_interior_node_3d(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t geom_bvh_create_opt_set_minimum_primitives_in_interior_node_3d(uint64_t result, uint64_t a2)
{
  *(void *)(result + 16) = a2;
  return result;
}

BOOL geom_bvh_create_opt_uses_builtin_strategy_2f(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 1;
}

uint64_t geom_bvh_create_opt_get_strategy_builtin_2f(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48) == 1) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v2 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_bvh_create_opt_set_strategy_builtin_2f(v2, v3);
}

uint64_t geom_bvh_create_opt_set_strategy_builtin_2f(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 48) != 1) {
    *(_DWORD *)(result + 48) = 1;
  }
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_strategy_custom_heuristic_2f(uint64_t result, void *a2, _DWORD *a3)
{
  if (*(_DWORD *)(result + 48))
  {
    uint64_t v3 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom_bvh_create_opt_set_strategy_custom_heuristic_2f(v3, v4, v5);
  }
  else
  {
    if (a2) {
      *a2 = *(void *)(result + 32);
    }
    if (a3) {
      *a3 = *(_DWORD *)(result + 40);
    }
  }
  return result;
}

uint64_t geom_bvh_create_opt_set_strategy_custom_heuristic_2f(uint64_t result, uint64_t a2, int a3)
{
  if (*(_DWORD *)(result + 48)) {
    *(_DWORD *)(result + 48) = 0;
  }
  *(void *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  return result;
}

BOOL geom_bvh_create_opt_uses_builtin_strategy_2d(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 1;
}

uint64_t geom_bvh_create_opt_get_strategy_builtin_2d(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48) == 1) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v2 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_bvh_create_opt_set_strategy_builtin_2d(v2, v3);
}

uint64_t geom_bvh_create_opt_set_strategy_builtin_2d(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 48) != 1) {
    *(_DWORD *)(result + 48) = 1;
  }
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_strategy_custom_heuristic_2d(uint64_t result, void *a2, _DWORD *a3)
{
  if (*(_DWORD *)(result + 48))
  {
    uint64_t v3 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom_bvh_create_opt_set_strategy_custom_heuristic_2d(v3, v4, v5);
  }
  else
  {
    if (a2) {
      *a2 = *(void *)(result + 32);
    }
    if (a3) {
      *a3 = *(_DWORD *)(result + 40);
    }
  }
  return result;
}

uint64_t geom_bvh_create_opt_set_strategy_custom_heuristic_2d(uint64_t result, uint64_t a2, int a3)
{
  if (*(_DWORD *)(result + 48)) {
    *(_DWORD *)(result + 48) = 0;
  }
  *(void *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  return result;
}

BOOL geom_bvh_create_opt_uses_builtin_strategy_3f(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 1;
}

uint64_t geom_bvh_create_opt_get_strategy_builtin_3f(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48) == 1) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v2 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_bvh_create_opt_set_strategy_builtin_3f(v2, v3);
}

uint64_t geom_bvh_create_opt_set_strategy_builtin_3f(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 48) != 1) {
    *(_DWORD *)(result + 48) = 1;
  }
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_strategy_custom_heuristic_3f(uint64_t result, void *a2, _DWORD *a3)
{
  if (*(_DWORD *)(result + 48))
  {
    uint64_t v3 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom_bvh_create_opt_set_strategy_custom_heuristic_3f(v3, v4, v5);
  }
  else
  {
    if (a2) {
      *a2 = *(void *)(result + 32);
    }
    if (a3) {
      *a3 = *(_DWORD *)(result + 40);
    }
  }
  return result;
}

uint64_t geom_bvh_create_opt_set_strategy_custom_heuristic_3f(uint64_t result, uint64_t a2, int a3)
{
  if (*(_DWORD *)(result + 48)) {
    *(_DWORD *)(result + 48) = 0;
  }
  *(void *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  return result;
}

BOOL geom_bvh_create_opt_uses_builtin_strategy_3d(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) == 1;
}

uint64_t geom_bvh_create_opt_get_strategy_builtin_3d(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 48) == 1) {
    return *(unsigned int *)(a1 + 32);
  }
  uint64_t v2 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_bvh_create_opt_set_strategy_builtin_3d(v2, v3);
}

uint64_t geom_bvh_create_opt_set_strategy_builtin_3d(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 48) != 1) {
    *(_DWORD *)(result + 48) = 1;
  }
  *(_DWORD *)(result + 32) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_strategy_custom_heuristic_3d(uint64_t result, void *a2, _DWORD *a3)
{
  if (*(_DWORD *)(result + 48))
  {
    uint64_t v3 = std::__throw_bad_variant_access[abi:nn180100]();
    return geom_bvh_create_opt_set_strategy_custom_heuristic_3d(v3, v4, v5);
  }
  else
  {
    if (a2) {
      *a2 = *(void *)(result + 32);
    }
    if (a3) {
      *a3 = *(_DWORD *)(result + 40);
    }
  }
  return result;
}

uint64_t geom_bvh_create_opt_set_strategy_custom_heuristic_3d(uint64_t result, uint64_t a2, int a3)
{
  if (*(_DWORD *)(result + 48)) {
    *(_DWORD *)(result + 48) = 0;
  }
  *(void *)(result + 32) = a2;
  *(_DWORD *)(result + 40) = a3;
  return result;
}

uint64_t geom_bvh_create_opt_get_should_copy_input_data_2f(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t geom_bvh_create_opt_set_should_copy_input_data_2f(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_should_copy_input_data_2d(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t geom_bvh_create_opt_set_should_copy_input_data_2d(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_should_copy_input_data_3f(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t geom_bvh_create_opt_set_should_copy_input_data_3f(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

uint64_t geom_bvh_create_opt_get_should_copy_input_data_3d(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 24);
}

uint64_t geom_bvh_create_opt_set_should_copy_input_data_3d(uint64_t result, char a2)
{
  *(unsigned char *)(result + 24) = a2;
  return result;
}

uint64_t geom_create_bvh_with_default_options_2f(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v4 = 1;
  LOBYTE(v5) = 1;
  DWORD2(v6) = 1;
  return create_bvh_with_opt<float,(unsigned char)2>(a1, a2, a3, (uint64_t)&v4, 0);
}

uint64_t geom_create_bvh_with_options_2f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return create_bvh_with_opt<float,(unsigned char)2>(a1, a2, a3, a4 + 16, 0);
}

uint64_t create_bvh_with_opt<float,(unsigned char)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v9 = a5;
    geom::bvh<float,(unsigned char)2>::reset(a5 + 16, a2, a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  else
  {
    uint64_t v9 = geom_bvh_2f_obj_alloc();
    geom::bvh<float,(unsigned char)2>::bvh(v9 + 16, a2, a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  int v10 = *(_DWORD *)(a4 + 32);
  if (!v10)
  {
    return v9;
  }
  if (v10 == 1)
  {
    return v9;
  }
  uint64_t v12 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_bvh_with_options_2f(v12);
}

uint64_t geom_recreate_bvh_with_options_2f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return create_bvh_with_opt<float,(unsigned char)2>(a2, a3, a4, a5 + 16, a1);
}

uint64_t geom_create_bvh_with_default_options_2d(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v4 = 1;
  LOBYTE(v5) = 1;
  DWORD2(v6) = 1;
  return create_bvh_with_opt<double,(unsigned char)2>(a1, a2, a3, (uint64_t)&v4, 0);
}

uint64_t geom_create_bvh_with_options_2d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return create_bvh_with_opt<double,(unsigned char)2>(a1, a2, a3, a4 + 16, 0);
}

uint64_t create_bvh_with_opt<double,(unsigned char)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v9 = a5;
    geom::bvh<double,(unsigned char)2>::reset(a5 + 16, a2, a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  else
  {
    uint64_t v9 = geom_bvh_2d_obj_alloc();
    geom::bvh<double,(unsigned char)2>::bvh(v9 + 16, a2, a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  int v10 = *(_DWORD *)(a4 + 32);
  if (!v10)
  {
    return v9;
  }
  if (v10 == 1)
  {
    return v9;
  }
  uint64_t v12 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_bvh_with_options_2d(v12);
}

uint64_t geom_recreate_bvh_with_options_2d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return create_bvh_with_opt<double,(unsigned char)2>(a2, a3, a4, a5 + 16, a1);
}

uint64_t geom_create_bvh_with_default_options_3f(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v4 = 1;
  LOBYTE(v5) = 1;
  DWORD2(v6) = 1;
  return create_bvh_with_opt<float,(unsigned char)3>(a1, a2, a3, (uint64_t)&v4, 0);
}

uint64_t geom_create_bvh_with_options_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return create_bvh_with_opt<float,(unsigned char)3>(a1, a2, a3, a4 + 16, 0);
}

uint64_t create_bvh_with_opt<float,(unsigned char)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v9 = a5;
    geom::bvh<float,(unsigned char)3>::reset(a5 + 16, a2, a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  else
  {
    uint64_t v9 = geom_bvh_3f_obj_alloc();
    geom::bvh<float,(unsigned char)3>::bvh(v9 + 16, a2, a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  int v10 = *(_DWORD *)(a4 + 32);
  if (!v10)
  {
    return v9;
  }
  if (v10 == 1)
  {
    return v9;
  }
  uint64_t v12 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_bvh_with_options_3f(v12);
}

uint64_t geom_recreate_bvh_with_options_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return create_bvh_with_opt<float,(unsigned char)3>(a2, a3, a4, a5 + 16, a1);
}

uint64_t geom_create_bvh_with_default_options_3d(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  long long v5 = 0u;
  long long v6 = 0u;
  uint64_t v4 = 1;
  LOBYTE(v5) = 1;
  DWORD2(v6) = 1;
  return create_bvh_with_opt<double,(unsigned char)3>(a1, a2, a3, (uint64_t)&v4, 0);
}

uint64_t geom_create_bvh_with_options_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return create_bvh_with_opt<double,(unsigned char)3>(a1, a2, a3, a4 + 16, 0);
}

uint64_t create_bvh_with_opt<double,(unsigned char)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5)
  {
    uint64_t v9 = a5;
    geom::bvh<double,(unsigned char)3>::reset(a5 + 16, a2, a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  else
  {
    uint64_t v9 = geom_bvh_3d_obj_alloc();
    geom::bvh<double,(unsigned char)3>::bvh(v9 + 16, a2, a1, a3, a1, *(unsigned __int8 *)(a4 + 8));
  }
  int v10 = *(_DWORD *)(a4 + 32);
  if (!v10)
  {
    return v9;
  }
  if (v10 == 1)
  {
    return v9;
  }
  uint64_t v12 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_bvh_with_options_3d(v12);
}

uint64_t geom_recreate_bvh_with_options_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return create_bvh_with_opt<double,(unsigned char)3>(a2, a3, a4, a5 + 16, a1);
}

uint64_t geom_create_bvh_2f(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  return create_bvh<float,(unsigned char)2>(a1, a2, a3, a4, a5, 1);
}

uint64_t create_bvh<float,(unsigned char)2>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v12 = geom_bvh_2f_obj_alloc();
  uint64_t v13 = (void *)geom::bvh<float,(unsigned char)2>::bvh(v12 + 16, a2, a1, a3, a1, a6);
  return v12;
}

uint64_t geom_create_bvh_2d(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  return create_bvh<double,(unsigned char)2>(a1, a2, a3, a4, a5, 1);
}

uint64_t create_bvh<double,(unsigned char)2>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v12 = geom_bvh_2d_obj_alloc();
  uint64_t v13 = (void *)geom::bvh<double,(unsigned char)2>::bvh(v12 + 16, a2, a1, a3, a1, a6);
  return v12;
}

uint64_t geom_create_bvh_3f(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  return create_bvh<float,(unsigned char)3>(a1, a2, a3, a4, a5, 1);
}

uint64_t create_bvh<float,(unsigned char)3>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v12 = geom_bvh_3f_obj_alloc();
  uint64_t v13 = (void *)geom::bvh<float,(unsigned char)3>::bvh(v12 + 16, a2, a1, a3, a1, a6);
  return v12;
}

uint64_t geom_create_bvh_3d(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  return create_bvh<double,(unsigned char)3>(a1, a2, a3, a4, a5, 1);
}

uint64_t create_bvh<double,(unsigned char)3>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, int a6)
{
  uint64_t v12 = geom_bvh_3d_obj_alloc();
  uint64_t v13 = (void *)geom::bvh<double,(unsigned char)3>::bvh(v12 + 16, a2, a1, a3, a1, a6);
  return v12;
}

uint64_t create_bvh_custom_heuristic<float,(unsigned char)2,true>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v16[4] = *MEMORY[0x263EF8340];
  uint64_t v13 = a5;
  uint64_t v11 = geom_bvh_2f_obj_alloc();
  geom::bvh<float,(unsigned char)2>::bvh(v11 + 16, a2, a1, a3, a1, 1);
  v16[0] = &unk_26EA040C0;
  v16[1] = a4;
  v16[3] = v16;
  v15[0] = &unk_26EA04620;
  v15[1] = &v13;
  v15[3] = v15;
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::__value_func[abi:nn180100]((uint64_t)v14, (uint64_t)v16);
  geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(v11 + 16, (uint64_t)v15, (uint64_t)v14, a6);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::~__value_func[abi:nn180100](v14);
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v15);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::~__value_func[abi:nn180100](v16);
  return v11;
}

void sub_236E083BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::~__value_func[abi:nn180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100]((uint64_t *)va1);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::~__value_func[abi:nn180100]((uint64_t *)va2);
  _Unwind_Resume(a1);
}

uint64_t create_bvh_custom_heuristic<double,(unsigned char)2,true>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v16[4] = *MEMORY[0x263EF8340];
  uint64_t v13 = a5;
  uint64_t v11 = geom_bvh_2d_obj_alloc();
  geom::bvh<double,(unsigned char)2>::bvh(v11 + 16, a2, a1, a3, a1, 1);
  v16[0] = &unk_26EA041E0;
  v16[1] = a4;
  v16[3] = v16;
  v15[0] = &unk_26EA046A0;
  v15[1] = &v13;
  v15[3] = v15;
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::__value_func[abi:nn180100]((uint64_t)v14, (uint64_t)v16);
  geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(v11 + 16, (uint64_t)v15, (uint64_t)v14, a6);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::~__value_func[abi:nn180100](v14);
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v15);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::~__value_func[abi:nn180100](v16);
  return v11;
}

void sub_236E0851C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::~__value_func[abi:nn180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100]((uint64_t *)va1);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::~__value_func[abi:nn180100]((uint64_t *)va2);
  _Unwind_Resume(a1);
}

uint64_t create_bvh_custom_heuristic<float,(unsigned char)3,true>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v16[4] = *MEMORY[0x263EF8340];
  uint64_t v13 = a5;
  uint64_t v11 = geom_bvh_3f_obj_alloc();
  geom::bvh<float,(unsigned char)3>::bvh(v11 + 16, a2, a1, a3, a1, 1);
  v16[0] = &unk_26EA04380;
  v16[1] = a4;
  v16[3] = v16;
  v15[0] = &unk_26EA04720;
  v15[1] = &v13;
  v15[3] = v15;
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::__value_func[abi:nn180100]((uint64_t)v14, (uint64_t)v16);
  geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(v11 + 16, (uint64_t)v15, (uint64_t)v14, a6);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v14);
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v15);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v16);
  return v11;
}

void sub_236E0867C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100]((uint64_t *)va1);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100]((uint64_t *)va2);
  _Unwind_Resume(a1);
}

uint64_t create_bvh_custom_heuristic<double,(unsigned char)3,true>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v16[4] = *MEMORY[0x263EF8340];
  uint64_t v13 = a5;
  uint64_t v11 = geom_bvh_3d_obj_alloc();
  geom::bvh<double,(unsigned char)3>::bvh(v11 + 16, a2, a1, a3, a1, 1);
  v16[0] = &unk_26EA04510;
  v16[1] = a4;
  v16[3] = v16;
  v15[0] = &unk_26EA047A0;
  v15[1] = &v13;
  v15[3] = v15;
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::__value_func[abi:nn180100]((uint64_t)v14, (uint64_t)v16);
  geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(v11 + 16, (uint64_t)v15, (uint64_t)v14, a6);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v14);
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v15);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v16);
  return v11;
}

void sub_236E087DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100]((uint64_t *)va1);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100]((uint64_t *)va2);
  _Unwind_Resume(a1);
}

void geom_triangle_mesh_bvh_3f_dispose(uint64_t a1)
{
  uint64_t v2 = a1 + 144;
  if (*(unsigned char *)(a1 + 160) && *(void *)v2) {
    MEMORY[0x237E10700](*(void *)v2, 0x1000C80451B5BE8);
  }
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 16) = 0;
  uint64_t v3 = (void *)(a1 + 168);
  if (*(unsigned char *)(a1 + 184) && *v3) {
    MEMORY[0x237E10700](*v3, 0x1000C8052888210);
  }
  *uint64_t v3 = 0;
  *(void *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  uint64_t v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(void *)(a1 + 128) = v4;
    operator delete(v4);
  }
}

void geom_triangle_mesh_bvh_3d_dispose(uint64_t a1)
{
  uint64_t v2 = a1 + 144;
  if (*(unsigned char *)(a1 + 160) && *(void *)v2) {
    MEMORY[0x237E10700](*(void *)v2, 0x1000C80E0EAB150);
  }
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 16) = 0;
  uint64_t v3 = (void *)(a1 + 168);
  if (*(unsigned char *)(a1 + 184) && *v3) {
    MEMORY[0x237E10700](*v3, 0x1000C8052888210);
  }
  *uint64_t v3 = 0;
  *(void *)(a1 + 176) = 0;
  *(unsigned char *)(a1 + 184) = 0;
  uint64_t v4 = *(void **)(a1 + 120);
  if (v4)
  {
    *(void *)(a1 + 128) = v4;
    operator delete(v4);
  }
}

uint64_t geom_bezier_curve_bvh_2f_dispose(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 120;
  if (*(unsigned char *)(result + 136))
  {
    double result = *(void *)v2;
    if (*(void *)v2) {
      double result = MEMORY[0x237E10700](result, 0x1000C8000313F17);
    }
  }
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 16) = 0;
  uint64_t v3 = (uint64_t *)(v1 + 144);
  if (*(unsigned char *)(v1 + 160))
  {
    double result = *v3;
    if (*v3) {
      double result = MEMORY[0x237E10700](result, 0x1000C8052888210);
    }
  }
  *uint64_t v3 = 0;
  *(void *)(v1 + 152) = 0;
  *(unsigned char *)(v1 + 160) = 0;
  return result;
}

uint64_t geom_bezier_curve_bvh_2d_dispose(uint64_t result)
{
  uint64_t v1 = result;
  uint64_t v2 = result + 120;
  if (*(unsigned char *)(result + 136))
  {
    double result = *(void *)v2;
    if (*(void *)v2) {
      double result = MEMORY[0x237E10700](result, 0x1000C80451B5BE8);
    }
  }
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  *(unsigned char *)(v2 + 16) = 0;
  uint64_t v3 = (uint64_t *)(v1 + 144);
  if (*(unsigned char *)(v1 + 160))
  {
    double result = *v3;
    if (*v3) {
      double result = MEMORY[0x237E10700](result, 0x1000C8052888210);
    }
  }
  *uint64_t v3 = 0;
  *(void *)(v1 + 152) = 0;
  *(unsigned char *)(v1 + 160) = 0;
  return result;
}

void *geom_create_triangle_mesh_bvh_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v9 = v8[19];
  v15[0] = v8[18];
  v15[1] = v9;
  uint64_t v10 = v8[22];
  v14[0] = v8[21];
  v14[1] = v10;
  uint64_t v11 = (uint64_t)(v8[7] - v8[6]) >> 2;
  v13[0] = v8[6];
  v13[1] = v11;
  return v8;
}

void *geom_create_triangle_mesh_bvh_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v9 = v8[19];
  v15[0] = v8[18];
  v15[1] = v9;
  uint64_t v10 = v8[22];
  v14[0] = v8[21];
  v14[1] = v10;
  uint64_t v11 = (uint64_t)(v8[7] - v8[6]) >> 2;
  v13[0] = v8[6];
  v13[1] = v11;
  return v8;
}

void *geom_create_triangle_mesh_bvh_custom_heuristic_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  v20[4] = *MEMORY[0x263EF8340];
  uint64_t v17 = a6;
  v20[0] = &unk_26EA04380;
  v20[1] = a5;
  v20[3] = v20;
  v19[0] = &unk_26EA04820;
  v19[1] = &v17;
  v19[3] = v19;
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::__value_func[abi:nn180100]((uint64_t)v18, (uint64_t)v20);
  geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>((uint64_t)(v9 + 2), (uint64_t)v19, (uint64_t)v18, a7);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v18);
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v19);
  uint64_t v10 = v9[19];
  v16[0] = v9[18];
  v16[1] = v10;
  uint64_t v11 = v9[22];
  v15[0] = v9[21];
  v15[1] = v11;
  uint64_t v12 = (uint64_t)(v9[7] - v9[6]) >> 2;
  v14[0] = v9[6];
  v14[1] = v12;
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v20);
  return v9;
}

void sub_236E08CA0(_Unwind_Exception *a1)
{
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100]((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

void *geom_create_triangle_mesh_bvh_custom_heuristic_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  v20[4] = *MEMORY[0x263EF8340];
  uint64_t v17 = a6;
  v20[0] = &unk_26EA04510;
  v20[1] = a5;
  v20[3] = v20;
  v19[0] = &unk_26EA048A0;
  v19[1] = &v17;
  v19[3] = v19;
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::__value_func[abi:nn180100]((uint64_t)v18, (uint64_t)v20);
  geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>((uint64_t)(v9 + 2), (uint64_t)v19, (uint64_t)v18, a7);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v18);
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v19);
  uint64_t v10 = v9[19];
  v16[0] = v9[18];
  v16[1] = v10;
  uint64_t v11 = v9[22];
  v15[0] = v9[21];
  v15[1] = v11;
  uint64_t v12 = (uint64_t)(v9[7] - v9[6]) >> 2;
  v14[0] = v9[6];
  v14[1] = v12;
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v20);
  return v9;
}

void sub_236E08E04(_Unwind_Exception *a1)
{
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100]((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t geom_create_triangle_mesh_bvh_with_default_options_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t opt_3f_obj_alloc = geom_bvh_create_opt_3f_obj_alloc();
  *(_OWORD *)(opt_3f_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_3f_obj_alloc + 40) = 0u;
  *(void *)(opt_3f_obj_alloc + 16) = 1;
  *(unsigned char *)(opt_3f_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_3f_obj_alloc + 48) = 1;
}

uint64_t geom_create_triangle_mesh_bvh_with_options_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t anonymous namespace'::create_triangle_mesh_bvh_with_opt<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = (void *)v7;
  int v9 = *(_DWORD *)(a5 + 48);
  if (!v9)
  {
    goto LABEL_5;
  }
  if (v9 == 1)
  {
LABEL_5:
    uint64_t v10 = v8[19];
    v17[0] = v8[18];
    v17[1] = v10;
    uint64_t v11 = v8[22];
    v16[0] = v8[21];
    v16[1] = v11;
    uint64_t v12 = (uint64_t)(v8[7] - v8[6]) >> 2;
    v15[0] = v8[6];
    v15[1] = v12;
    return (uint64_t)v8;
  }
  uint64_t v14 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_triangle_mesh_bvh_with_options_3f(v14);
}

uint64_t geom_recreate_triangle_mesh_bvh_with_options_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t geom_create_triangle_mesh_bvh_with_default_options_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t opt_3d_obj_alloc = geom_bvh_create_opt_3d_obj_alloc();
  *(_OWORD *)(opt_3d_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_3d_obj_alloc + 40) = 0u;
  *(void *)(opt_3d_obj_alloc + 16) = 1;
  *(unsigned char *)(opt_3d_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_3d_obj_alloc + 48) = 1;
}

uint64_t geom_create_triangle_mesh_bvh_with_options_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t anonymous namespace'::create_triangle_mesh_bvh_with_opt<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v8 = (void *)v7;
  int v9 = *(_DWORD *)(a5 + 48);
  if (!v9)
  {
    goto LABEL_5;
  }
  if (v9 == 1)
  {
LABEL_5:
    uint64_t v10 = v8[19];
    v17[0] = v8[18];
    v17[1] = v10;
    uint64_t v11 = v8[22];
    v16[0] = v8[21];
    v16[1] = v11;
    uint64_t v12 = (uint64_t)(v8[7] - v8[6]) >> 2;
    v15[0] = v8[6];
    v15[1] = v12;
    return (uint64_t)v8;
  }
  uint64_t v14 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_triangle_mesh_bvh_with_options_3d(v14);
}

uint64_t geom_recreate_triangle_mesh_bvh_with_options_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

uint64_t geom_create_bezier_curve_bvh_2f(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  return v7;
}

uint64_t anonymous namespace'::construct_bezier_curve_bvh<float>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a5)
  {
    if (a1)
    {
      uint64_t v10 = *(unsigned int *)(a2 + 4 * a1 - 4);
      uint64_t v27 = a3;
      uint64_t v28 = v10;
      uint64_t v25 = a2;
      uint64_t v26 = a1;
      if (v10)
      {
        if (a4) {
          operator new[]();
        }
        uint64_t v14 = a3;
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v14 = 0;
      uint64_t v27 = a3;
      uint64_t v28 = 0;
      uint64_t v25 = a2;
      uint64_t v26 = 0;
    }
    uint64_t v15 = a1;
    if (*(unsigned char *)(a5 + 136))
    {
      uint64_t v16 = *(void *)(a5 + 120);
      uint64_t v15 = a1;
      if (v16)
      {
        MEMORY[0x237E10700](v16, 0x1000C8000313F17);
        uint64_t v15 = v26;
      }
    }
    *(void *)(a5 + 120) = v14;
    *(void *)(a5 + 128) = v10;
    *(unsigned char *)(a5 + 136) = 0;
    if (v15) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = 0;
    }
    if (v15 && a4) {
      operator new[]();
    }
    if (*(unsigned char *)(a5 + 160))
    {
      uint64_t v18 = *(void *)(a5 + 144);
      if (v18) {
        MEMORY[0x237E10700](v18, 0x1000C8052888210);
      }
    }
    *(void *)(a5 + 144) = v17;
    *(void *)(a5 + 152) = v15;
    uint64_t v12 = a5;
    *(unsigned char *)(a5 + 160) = 0;
    if (a1) {
LABEL_25:
    }
      operator new[]();
  }
  else
  {
    uint64_t v11 = geom_bezier_curve_bvh_2f_obj_alloc();
    uint64_t v12 = v11;
    if (a1)
    {
      uint64_t v13 = *(unsigned int *)(a2 + 4 * a1 - 4);
      uint64_t v27 = a3;
      uint64_t v28 = v13;
      uint64_t v25 = a2;
      uint64_t v26 = a1;
      _ZN4geom19make_external_arrayINS_5sliceIDv2_fEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(&v27, a4, v11 + 120);
      geom::make_external_array<geom::slice<unsigned int>>(&v25, a4, v12 + 144);
      goto LABEL_25;
    }
    uint64_t v27 = a3;
    uint64_t v28 = 0;
    uint64_t v25 = a2;
    uint64_t v26 = 0;
    _ZN4geom19make_external_arrayINS_5sliceIDv2_fEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(&v27, a4, v11 + 120);
    geom::make_external_array<geom::slice<unsigned int>>(&v25, a4, v12 + 144);
  }
  uint64_t v22 = 0;
  uint64_t v23 = a1;
  char v24 = 0;
  v20[0] = 0;
  v20[1] = 0;
  char v21 = 0;
  if (a5)
  {
    geom::bvh<float,(unsigned char)2>::reset(v12 + 16, (uint64_t)&v22, (uint64_t)v20);
    if (v21 && v20[0]) {
      MEMORY[0x237E10700](v20[0], 0x1000C80451B5BE8);
    }
  }
  else
  {
    *(unsigned char *)(v12 + 16) = 0;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(void *)(v12 + 72) = 0;
    *(void *)(v12 + 80) = a1;
    *(unsigned char *)(v12 + 88) = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    char v24 = 0;
    *(void *)(v12 + 96) = 0;
    *(void *)(v12 + 104) = 0;
    *(unsigned char *)(v12 + 112) = 0;
  }
  if (v24 && v22) {
    MEMORY[0x237E10700](v22, 0x1000C8000313F17);
  }
  return v12;
}

void sub_236E0951C(_Unwind_Exception *a1)
{
  MEMORY[0x237E10700](v1, 0x1000C8000313F17);
  _Unwind_Resume(a1);
}

void *anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(void *result, int a2, uint64_t a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = a3;
  switch(a2)
  {
    case 0:
      uint64_t v3 = v9;
      v9[0] = &unk_26EA04920;
      v9[1] = &v4;
      v9[3] = v9;
      geom::bvh<float,(unsigned char)2>::build_middle_split((uint64_t)result, (uint64_t)v9);
      goto LABEL_7;
    case 1:
      uint64_t v3 = v8;
      v8[0] = &unk_26EA04920;
      v8[1] = &v4;
      v8[3] = v8;
      geom::bvh<float,(unsigned char)2>::build_median((uint64_t)result, (uint64_t)v8);
      goto LABEL_7;
    case 2:
      uint64_t v3 = v7;
      v7[0] = &unk_26EA04920;
      v7[1] = &v4;
      v7[3] = v7;
      geom::bvh<float,(unsigned char)2>::build_surface_area_heuristic((uint64_t)result, (uint64_t)v7);
      goto LABEL_7;
    case 3:
      uint64_t v3 = v6;
      v6[0] = &unk_26EA04920;
      v6[1] = &v4;
      v6[3] = v6;
      geom::bvh<float,(unsigned char)2>::build_volume_heuristic((uint64_t)result, (uint64_t)v6);
      goto LABEL_7;
    case 4:
      uint64_t v3 = v5;
      v5[0] = &unk_26EA04920;
      v5[1] = &v4;
      float64x2_t v5[3] = v5;
      geom::bvh<float,(unsigned char)2>::build_intersection_volume_heuristic((uint64_t)result, (uint64_t)v5);
LABEL_7:
      double result = std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v3);
      break;
    default:
      return result;
  }
  return result;
}

void sub_236E096D4(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100]((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t geom_create_bezier_curve_bvh_2d(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  return v7;
}

uint64_t anonymous namespace'::construct_bezier_curve_bvh<double>(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  if (a5)
  {
    if (a1)
    {
      uint64_t v10 = *(unsigned int *)(a2 + 4 * a1 - 4);
      uint64_t v27 = a3;
      uint64_t v28 = v10;
      uint64_t v25 = a2;
      uint64_t v26 = a1;
      if (v10)
      {
        if (a4) {
          operator new[]();
        }
        uint64_t v14 = a3;
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v14 = 0;
      }
    }
    else
    {
      uint64_t v10 = 0;
      uint64_t v14 = 0;
      uint64_t v27 = a3;
      uint64_t v28 = 0;
      uint64_t v25 = a2;
      uint64_t v26 = 0;
    }
    uint64_t v15 = a1;
    if (*(unsigned char *)(a5 + 136))
    {
      uint64_t v16 = *(void *)(a5 + 120);
      uint64_t v15 = a1;
      if (v16)
      {
        MEMORY[0x237E10700](v16, 0x1000C80451B5BE8);
        uint64_t v15 = v26;
      }
    }
    *(void *)(a5 + 120) = v14;
    *(void *)(a5 + 128) = v10;
    *(unsigned char *)(a5 + 136) = 0;
    if (v15) {
      uint64_t v17 = a2;
    }
    else {
      uint64_t v17 = 0;
    }
    if (v15 && a4) {
      operator new[]();
    }
    if (*(unsigned char *)(a5 + 160))
    {
      uint64_t v18 = *(void *)(a5 + 144);
      if (v18) {
        MEMORY[0x237E10700](v18, 0x1000C8052888210);
      }
    }
    *(void *)(a5 + 144) = v17;
    *(void *)(a5 + 152) = v15;
    uint64_t v12 = a5;
    *(unsigned char *)(a5 + 160) = 0;
    if (a1) {
LABEL_25:
    }
      operator new[]();
  }
  else
  {
    uint64_t v11 = geom_bezier_curve_bvh_2d_obj_alloc();
    uint64_t v12 = v11;
    if (a1)
    {
      uint64_t v13 = *(unsigned int *)(a2 + 4 * a1 - 4);
      uint64_t v27 = a3;
      uint64_t v28 = v13;
      uint64_t v25 = a2;
      uint64_t v26 = a1;
      _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(&v27, a4, v11 + 120);
      geom::make_external_array<geom::slice<unsigned int>>(&v25, a4, v12 + 144);
      goto LABEL_25;
    }
    uint64_t v27 = a3;
    uint64_t v28 = 0;
    uint64_t v25 = a2;
    uint64_t v26 = 0;
    _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(&v27, a4, v11 + 120);
    geom::make_external_array<geom::slice<unsigned int>>(&v25, a4, v12 + 144);
  }
  uint64_t v22 = 0;
  uint64_t v23 = a1;
  char v24 = 0;
  v20[0] = 0;
  v20[1] = 0;
  char v21 = 0;
  if (a5)
  {
    geom::bvh<double,(unsigned char)2>::reset(v12 + 16, (uint64_t)&v22, (uint64_t)v20);
    if (v21 && v20[0]) {
      MEMORY[0x237E10700](v20[0], 0x1000C80E0EAB150);
    }
  }
  else
  {
    *(unsigned char *)(v12 + 16) = 0;
    *(_OWORD *)(v12 + 24) = 0u;
    *(_OWORD *)(v12 + 40) = 0u;
    *(_OWORD *)(v12 + 56) = 0u;
    *(void *)(v12 + 72) = 0;
    *(void *)(v12 + 80) = a1;
    *(unsigned char *)(v12 + 88) = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    char v24 = 0;
    *(void *)(v12 + 96) = 0;
    *(void *)(v12 + 104) = 0;
    *(unsigned char *)(v12 + 112) = 0;
  }
  if (v24 && v22) {
    MEMORY[0x237E10700](v22, 0x1000C80451B5BE8);
  }
  return v12;
}

void sub_236E09B90(_Unwind_Exception *a1)
{
  MEMORY[0x237E10700](v1, 0x1000C80451B5BE8);
  _Unwind_Resume(a1);
}

void *anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(void *result, int a2, uint64_t a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = a3;
  switch(a2)
  {
    case 0:
      uint64_t v3 = v9;
      v9[0] = &unk_26EA049A0;
      v9[1] = &v4;
      v9[3] = v9;
      geom::bvh<double,(unsigned char)2>::build_middle_split((uint64_t)result, (uint64_t)v9);
      goto LABEL_7;
    case 1:
      uint64_t v3 = v8;
      v8[0] = &unk_26EA049A0;
      v8[1] = &v4;
      v8[3] = v8;
      geom::bvh<double,(unsigned char)2>::build_median((uint64_t)result, (uint64_t)v8);
      goto LABEL_7;
    case 2:
      uint64_t v3 = v7;
      v7[0] = &unk_26EA049A0;
      v7[1] = &v4;
      v7[3] = v7;
      geom::bvh<double,(unsigned char)2>::build_surface_area_heuristic((uint64_t)result, (uint64_t)v7);
      goto LABEL_7;
    case 3:
      uint64_t v3 = v6;
      v6[0] = &unk_26EA049A0;
      v6[1] = &v4;
      v6[3] = v6;
      geom::bvh<double,(unsigned char)2>::build_volume_heuristic((uint64_t)result, (uint64_t)v6);
      goto LABEL_7;
    case 4:
      uint64_t v3 = v5;
      v5[0] = &unk_26EA049A0;
      v5[1] = &v4;
      float64x2_t v5[3] = v5;
      geom::bvh<double,(unsigned char)2>::build_intersection_volume_heuristic((uint64_t)result, (uint64_t)v5);
LABEL_7:
      double result = std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v3);
      break;
    default:
      return result;
  }
  return result;
}

void sub_236E09D48(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100]((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

uint64_t geom_create_bezier_curve_bvh_with_default_options_2f(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t opt_2f_obj_alloc = geom_bvh_create_opt_2f_obj_alloc();
  *(_OWORD *)(opt_2f_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_2f_obj_alloc + 40) = 0u;
  *(void *)(opt_2f_obj_alloc + 16) = 1;
  *(unsigned char *)(opt_2f_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_2f_obj_alloc + 48) = 1;
}

uint64_t geom_create_bezier_curve_bvh_with_options_2f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t anonymous namespace'::create_bezier_curve_bvh_with_opt<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(a4 + 48);
  if (!v8)
  {
    return v7;
  }
  if (v8 == 1)
  {
    return v7;
  }
  uint64_t v10 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_bezier_curve_bvh_with_options_2f(v10);
}

uint64_t geom_recreate_bezier_curve_bvh_with_options_2f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t geom_create_bezier_curve_bvh_with_default_options_2d(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t opt_2d_obj_alloc = geom_bvh_create_opt_2d_obj_alloc();
  *(_OWORD *)(opt_2d_obj_alloc + 24) = 0u;
  *(_OWORD *)(opt_2d_obj_alloc + 40) = 0u;
  *(void *)(opt_2d_obj_alloc + 16) = 1;
  *(unsigned char *)(opt_2d_obj_alloc + 24) = 1;
  *(_DWORD *)(opt_2d_obj_alloc + 48) = 1;
}

uint64_t geom_create_bezier_curve_bvh_with_options_2d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t anonymous namespace'::create_bezier_curve_bvh_with_opt<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = v6;
  int v8 = *(_DWORD *)(a4 + 48);
  if (!v8)
  {
    return v7;
  }
  if (v8 == 1)
  {
    return v7;
  }
  uint64_t v10 = std::__throw_bad_variant_access[abi:nn180100]();
  return geom_recreate_bezier_curve_bvh_with_options_2d(v10);
}

uint64_t geom_recreate_bezier_curve_bvh_with_options_2d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

uint64_t geom_bvh_tree_statistics_2f(uint64_t a1, unsigned int *a2, int *a3)
{
  int v6 = 0;
  int v5 = 0;
  uint64_t v3 = a1 + 16;
  if (!a2) {
    a2 = (unsigned int *)&v6;
  }
  if (!a3) {
    a3 = &v5;
  }
  return geom::bvh<float,(unsigned char)2>::tree_statistics(v3, a2, a3);
}

uint64_t geom_bvh_tree_statistics_2d(uint64_t a1, unsigned int *a2, int *a3)
{
  int v6 = 0;
  int v5 = 0;
  uint64_t v3 = a1 + 16;
  if (!a2) {
    a2 = (unsigned int *)&v6;
  }
  if (!a3) {
    a3 = &v5;
  }
  return geom::bvh<double,(unsigned char)2>::tree_statistics(v3, a2, a3);
}

uint64_t geom_bvh_tree_statistics_3f(uint64_t a1, unsigned int *a2, int *a3)
{
  int v6 = 0;
  int v5 = 0;
  uint64_t v3 = a1 + 16;
  if (!a2) {
    a2 = (unsigned int *)&v6;
  }
  if (!a3) {
    a3 = &v5;
  }
  return geom::bvh<double,(unsigned char)2>::tree_statistics(v3, a2, a3);
}

uint64_t geom_bvh_tree_statistics_3d(uint64_t a1, unsigned int *a2, int *a3)
{
  int v6 = 0;
  int v5 = 0;
  uint64_t v3 = a1 + 16;
  if (!a2) {
    a2 = (unsigned int *)&v6;
  }
  if (!a3) {
    a3 = &v5;
  }
  return geom::bvh<double,(unsigned char)3>::tree_statistics(v3, a2, a3);
}

uint64_t geom_bvh_get_nodes_2f(uint64_t a1, void *a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (a2) {
    *a2 = 0xCCCCCCCCCCCCCCCDLL * ((*(void *)(a1 + 32) - result) >> 3);
  }
  return result;
}

uint64_t geom_bvh_get_nodes_2d(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (a2) {
    *a2 = (*(void *)(a1 + 32) - result) >> 6;
  }
  return result;
}

uint64_t geom_bvh_get_nodes_3f(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (a2) {
    *a2 = (*(void *)(a1 + 32) - result) >> 6;
  }
  return result;
}

uint64_t geom_bvh_get_nodes_3d(uint64_t a1, void *a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (a2) {
    *a2 = 0xAAAAAAAAAAAAAAABLL * ((*(void *)(a1 + 32) - result) >> 5);
  }
  return result;
}

uint64_t geom_bvh_get_primitive_partition_2f(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (a2) {
    *a2 = (*(void *)(a1 + 56) - result) >> 2;
  }
  return result;
}

uint64_t geom_bvh_get_primitive_partition_2d(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (a2) {
    *a2 = (*(void *)(a1 + 56) - result) >> 2;
  }
  return result;
}

uint64_t geom_bvh_get_primitive_partition_3f(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (a2) {
    *a2 = (*(void *)(a1 + 56) - result) >> 2;
  }
  return result;
}

uint64_t geom_bvh_get_primitive_partition_3d(uint64_t a1, uint64_t *a2)
{
  uint64_t result = *(void *)(a1 + 48);
  if (a2) {
    *a2 = (*(void *)(a1 + 56) - result) >> 2;
  }
  return result;
}

uint64_t geom_bvh_get_primitives_for_node_2f(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(unsigned int *)(v3 + 40 * a2 + 12);
  uint64_t v5 = *(void *)(a1 + 48);
  if (a3) {
    *a3 = (*(_DWORD *)(v3 + 40 * a2 + 16) + v4) - v4;
  }
  return v5 + 4 * v4;
}

uint64_t geom_bvh_get_primitives_for_node_2d(uint64_t a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(a1 + 24) + ((unint64_t)a2 << 6);
  uint64_t v4 = *(unsigned int *)(v3 + 12);
  uint64_t v5 = *(void *)(a1 + 48);
  if (a3) {
    *a3 = (*(_DWORD *)(v3 + 16) + v4) - v4;
  }
  return v5 + 4 * v4;
}

uint64_t geom_bvh_get_primitives_for_node_3f(uint64_t a1, unsigned int a2, void *a3)
{
  unint64_t v3 = *(void *)(a1 + 24) + ((unint64_t)a2 << 6);
  uint64_t v4 = *(unsigned int *)(v3 + 12);
  uint64_t v5 = *(void *)(a1 + 48);
  if (a3) {
    *a3 = (*(_DWORD *)(v3 + 16) + v4) - v4;
  }
  return v5 + 4 * v4;
}

uint64_t geom_bvh_get_primitives_for_node_3d(uint64_t a1, unsigned int a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 24);
  uint64_t v4 = *(unsigned int *)(v3 + 96 * a2 + 12);
  uint64_t v5 = *(void *)(a1 + 48);
  if (a3) {
    *a3 = (*(_DWORD *)(v3 + 96 * a2 + 16) + v4) - v4;
  }
  return v5 + 4 * v4;
}

uint64_t geom_bvh_raycast_2f(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, unsigned int *a5, double a6, double a7)
{
  void v15[4] = *MEMORY[0x263EF8340];
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  uint64_t v12 = 0;
  v15[0] = &unk_26EA04A20;
  v15[1] = &v14;
  void v15[2] = &v13;
  v15[3] = v15;
  uint64_t v7 = (void *)(a1 + 16);
  if (a4) {
    int v8 = a4;
  }
  else {
    int v8 = (float *)&v12 + 1;
  }
  if (a5) {
    int v9 = a5;
  }
  else {
    int v9 = (unsigned int *)&v12;
  }
  uint64_t v10 = geom::bvh<float,(unsigned char)2>::raycast(v7, (uint64_t)v15, v8, v9, a6, a7);
  std::__function::__value_func<BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::~__value_func[abi:nn180100](v15);
  return v10;
}

void sub_236E0A358(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::~__value_func[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t geom_bvh_raycast_2d(uint64_t a1, uint64_t a2, uint64_t a3, double *a4, unsigned int *a5, float64x2_t a6, __n128 a7)
{
  v16[4] = *MEMORY[0x263EF8340];
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  uint64_t v13 = 0;
  int v12 = 0;
  v16[0] = &unk_26EA04AB0;
  v16[1] = &v15;
  void v16[2] = &v14;
  v16[3] = v16;
  uint64_t v7 = (void *)(a1 + 16);
  if (a4) {
    int v8 = a4;
  }
  else {
    int v8 = (double *)&v13;
  }
  if (a5) {
    int v9 = a5;
  }
  else {
    int v9 = (unsigned int *)&v12;
  }
  uint64_t v10 = geom::bvh<double,(unsigned char)2>::raycast(v7, (uint64_t)v16, v8, v9, a6, a7);
  std::__function::__value_func<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::~__value_func[abi:nn180100](v16);
  return v10;
}

void sub_236E0A428(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::__function::__value_func<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::~__value_func[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t geom_bvh_raycast_3f(uint64_t a1, uint64_t a2, uint64_t a3, float *a4, unsigned int *a5, float32x4_t a6, __n128 a7)
{
  void v15[4] = *MEMORY[0x263EF8340];
  uint64_t v13 = a3;
  uint64_t v14 = a2;
  uint64_t v12 = 0;
  v15[0] = &unk_26EA04B40;
  v15[1] = &v14;
  void v15[2] = &v13;
  v15[3] = v15;
  uint64_t v7 = (void *)(a1 + 16);
  if (a4) {
    int v8 = a4;
  }
  else {
    int v8 = (float *)&v12 + 1;
  }
  if (a5) {
    int v9 = a5;
  }
  else {
    int v9 = (unsigned int *)&v12;
  }
  uint64_t v10 = geom::bvh<float,(unsigned char)3>::raycast(v7, (uint64_t)v15, v8, v9, a6, a7);
  std::__function::__value_func<BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::~__value_func[abi:nn180100](v15);
  return v10;
}

void sub_236E0A4F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::~__value_func[abi:nn180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t geom_bvh_raycast_3d(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4, double *a5, unsigned int *a6)
{
  void v19[4] = *MEMORY[0x263EF8340];
  uint64_t v17 = a4;
  uint64_t v18 = a2;
  uint64_t v16 = 0;
  int v15 = 0;
  v19[0] = &unk_26EA04BD0;
  v19[1] = &v18;
  v19[2] = &v17;
  v19[3] = v19;
  long long v6 = a3[1];
  v14[0] = *a3;
  v14[1] = v6;
  long long v7 = a3[2];
  __n128 v8 = (__n128)a3[3];
  void v14[2] = v7;
  v14[3] = (__int128)v8;
  int v9 = (void *)(a1 + 16);
  if (a5) {
    uint64_t v10 = a5;
  }
  else {
    uint64_t v10 = (double *)&v16;
  }
  if (a6) {
    uint64_t v11 = a6;
  }
  else {
    uint64_t v11 = (unsigned int *)&v15;
  }
  uint64_t v12 = geom::bvh<double,(unsigned char)3>::raycast(v9, (uint64_t)v19, v14, v10, v11, *(double *)&v7, v8);
  std::__function::__value_func<BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::~__value_func[abi:nn180100](v19);
  return v12;
}

void sub_236E0A5D8(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::~__value_func[abi:nn180100]((void *)(v1 - 56));
  _Unwind_Resume(a1);
}

double geom_bvh_closest_point_2f(void *a1, void (*a2)(void, uint64_t, double), uint64_t a3, float *a4, unsigned int *a5, float32x2_t a6)
{
  if (a4)
  {
    *a4 = INFINITY;
    *(float *)&int v11 = 0.0;
  }
  else
  {
    *(float *)&int v11 = INFINITY;
  }
  int v12 = -1;
  if (a5)
  {
    *a5 = -1;
    int v12 = 0;
  }
  double v13 = COERCE_DOUBLE(vdup_n_s32(0x7FC00000u));
  if (a1[7] != a1[6])
  {
    uint64_t v14 = (float32x2_t *)a1[3];
    unint64_t v15 = a1[4] - (void)v14;
    if (v15)
    {
      uint64_t v16 = a1;
      unsigned int v17 = __clz(-858993459 * (v15 >> 3));
      if (v17 == 31)
      {
        uint64_t v18 = 0;
        int v19 = 0;
      }
      else
      {
        unsigned int v20 = 31 - v17;
        char v21 = (float *)operator new(8 * (31 - v17));
        uint64_t v16 = a1;
        int v19 = v21;
        uint64_t v18 = &v21[2 * v20];
      }
      float32x2_t v22 = vsub_f32(vmaxnm_f32(vminnm_f32(a6, v14[4]), v14[3]), a6);
      float v23 = vaddv_f32(vmul_f32(v22, v22));
      if (v19 >= v18)
      {
        uint64_t v25 = (char *)v18 - (char *)v19;
        uint64_t v26 = v25 >> 2;
        if ((unint64_t)(v25 >> 2) <= 1) {
          uint64_t v26 = 1;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v27 = v26;
        }
        if (v27 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v28 = (float *)operator new(8 * v27);
        uint64_t v99 = (char *)&v28[2 * v27];
        *uint64_t v28 = 0.0;
        v28[1] = v23;
        char v24 = v28 + 2;
        if (v19) {
          operator delete(v19);
        }
        int v19 = v28;
        uint64_t v16 = a1;
      }
      else
      {
        uint64_t v99 = (char *)v18;
        *int v19 = 0.0;
        v19[1] = v23;
        char v24 = v19 + 2;
      }
      double v13 = COERCE_DOUBLE(vdup_n_s32(0x7FC00000u));
      uint64_t v97 = a3;
      while (1)
      {
        float v29 = *(float *)&v11;
        if (a4) {
          float v29 = *a4;
        }
        uint64_t v30 = v24 - 2;
        if (v29 <= *(v24 - 1))
        {
          v24 -= 2;
        }
        else
        {
          int v100 = v12;
          uint64_t v31 = v16[3];
          uint64_t v32 = v31 + 40 * *(unsigned int *)v30;
          unsigned int v35 = *(_DWORD *)(v32 + 4);
          float64x2_t v34 = (int *)(v32 + 4);
          unsigned int v33 = v35;
          uint64_t v36 = v34 + 1;
          unsigned int v37 = v34[1];
          if (v35 == -1 && v37 == -1)
          {
            uint64_t v46 = v31 + 40 * *(unsigned int *)v30;
            int v47 = *(_DWORD *)(v46 + 16);
            if (!v47) {
              goto LABEL_61;
            }
            uint64_t v48 = *(unsigned int *)(v46 + 12);
            float64x2_t v49 = (unsigned int *)(v16[6] + 4 * v48);
            uint64_t v50 = 4 * (v47 + v48) - 4 * v48;
            int v12 = v100;
            while (2)
            {
              unsigned int v51 = *v49;
              a2(*v49, v97, *(double *)&a6);
              float v53 = *(float *)&v11;
              if (a4) {
                float v53 = *a4;
              }
              float32x2_t v54 = vsub_f32(a6, v52);
              float v55 = vaddv_f32(vmul_f32(v54, v54));
              if (v55 < v53) {
                goto LABEL_50;
              }
              unsigned int v56 = v12;
              if (a5) {
                unsigned int v56 = *a5;
              }
              if (v55 == v53 && v51 < v56)
              {
LABEL_50:
                if (a4)
                {
                  *a4 = v55;
                  if (a5) {
                    goto LABEL_52;
                  }
LABEL_54:
                  int v12 = v51;
                }
                else
                {
                  *(float *)&int v11 = v55;
                  if (!a5) {
                    goto LABEL_54;
                  }
LABEL_52:
                  *a5 = v51;
                }
                double v13 = *(double *)&v52;
              }
              ++v49;
              v50 -= 4;
              if (!v50)
              {
                char v24 = v30;
                goto LABEL_155;
              }
              continue;
            }
          }
          float32x2_t v39 = vsub_f32(vmaxnm_f32(vminnm_f32(a6, *(float32x2_t *)(v31 + 40 * v33 + 32)), *(float32x2_t *)(v31 + 40 * v33 + 24)), a6);
          float32x2_t v40 = vmul_f32(v39, v39);
          float v41 = vaddv_f32(v40);
          float32x2_t v42 = vsub_f32(vmaxnm_f32(vminnm_f32(a6, *(float32x2_t *)(v31 + 40 * v37 + 32)), *(float32x2_t *)(v31 + 40 * v37 + 24)), a6);
          float32x2_t v43 = vmul_f32(v42, v42);
          float v44 = vaddv_f32(v43);
          if (v41 < v29 && v44 < v29)
          {
            if (vcgt_f32(vadd_f32(v43, (float32x2_t)vdup_lane_s32((int32x2_t)v43, 1)), vadd_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1))).u8[0])
            {
              if (v30 < (float *)v99)
              {
                *((_DWORD *)v24 - 2) = v37;
                *(v24 - 1) = v44;
                float64x2_t v58 = v24;
                int v12 = v100;
                goto LABEL_137;
              }
              uint64_t v59 = ((char *)v30 - (char *)v19) >> 3;
              unint64_t v60 = v59 + 1;
              if ((unint64_t)(v59 + 1) >> 61) {
                abort();
              }
              if ((v99 - (char *)v19) >> 2 > v60) {
                unint64_t v60 = (v99 - (char *)v19) >> 2;
              }
              if ((unint64_t)(v99 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v61 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v61 = v60;
              }
              if (v61)
              {
                if (v61 >> 61) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                float64x2_t v62 = (char *)operator new(8 * v61);
              }
              else
              {
                float64x2_t v62 = 0;
              }
              unint64_t v75 = (float *)&v62[8 * v59];
              *(_DWORD *)unint64_t v75 = v37;
              v75[1] = v44;
              float64x2_t v58 = v75 + 2;
              uint64_t v99 = &v62[8 * v61];
              if (v30 == v19)
              {
                int v12 = v100;
              }
              else
              {
                int v12 = v100;
                do
                {
                  uint64_t v76 = *((void *)v30 - 1);
                  v30 -= 2;
                  *((void *)v75 - 1) = v76;
                  v75 -= 2;
                }
                while (v30 != v19);
                if (!v19) {
                  goto LABEL_136;
                }
              }
              operator delete(v19);
LABEL_136:
              int v19 = v75;
              uint64_t v16 = a1;
LABEL_137:
              int v88 = *v34;
              if (v58 >= (float *)v99)
              {
                uint64_t v89 = ((char *)v58 - (char *)v19) >> 3;
                unint64_t v90 = v89 + 1;
                if ((unint64_t)(v89 + 1) >> 61) {
                  abort();
                }
                if ((v99 - (char *)v19) >> 2 > v90) {
                  unint64_t v90 = (v99 - (char *)v19) >> 2;
                }
                if ((unint64_t)(v99 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v91 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v91 = v90;
                }
                if (v91)
                {
                  if (v91 >> 61) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  unint64_t v92 = (char *)operator new(8 * v91);
                }
                else
                {
                  unint64_t v92 = 0;
                }
                unint64_t v77 = (float *)&v92[8 * v89];
                *(_DWORD *)unint64_t v77 = v88;
                v77[1] = v41;
                char v24 = v77 + 2;
                uint64_t v99 = &v92[8 * v91];
                if (v58 != v19)
                {
                  do
                  {
                    uint64_t v93 = *((void *)v58 - 1);
                    v58 -= 2;
                    *((void *)v77 - 1) = v93;
                    v77 -= 2;
                  }
                  while (v58 != v19);
                  goto LABEL_152;
                }
                goto LABEL_153;
              }
              *(_DWORD *)float64x2_t v58 = v88;
              v58[1] = v41;
            }
            else
            {
              if (v30 >= (float *)v99)
              {
                uint64_t v67 = ((char *)v30 - (char *)v19) >> 3;
                unint64_t v68 = v67 + 1;
                int v12 = v100;
                if ((unint64_t)(v67 + 1) >> 61) {
                  abort();
                }
                if ((v99 - (char *)v19) >> 2 > v68) {
                  unint64_t v68 = (v99 - (char *)v19) >> 2;
                }
                if ((unint64_t)(v99 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v69 = v68;
                }
                if (v69)
                {
                  if (v69 >> 61) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  uint64_t v70 = (char *)operator new(8 * v69);
                }
                else
                {
                  uint64_t v70 = 0;
                }
                int v80 = (float *)&v70[8 * v67];
                *(_DWORD *)int v80 = v33;
                v80[1] = v41;
                float64x2_t v58 = v80 + 2;
                uint64_t v99 = &v70[8 * v69];
                if (v30 == v19) {
                  goto LABEL_117;
                }
                do
                {
                  uint64_t v81 = *((void *)v30 - 1);
                  v30 -= 2;
                  *((void *)v80 - 1) = v81;
                  v80 -= 2;
                }
                while (v30 != v19);
                if (v19) {
LABEL_117:
                }
                  operator delete(v19);
                int v19 = v80;
                uint64_t v16 = a1;
              }
              else
              {
                *((_DWORD *)v24 - 2) = v33;
                *(v24 - 1) = v41;
                float64x2_t v58 = v24;
                int v12 = v100;
              }
              int v82 = *v36;
              if (v58 >= (float *)v99)
              {
                uint64_t v83 = ((char *)v58 - (char *)v19) >> 3;
                unint64_t v84 = v83 + 1;
                if ((unint64_t)(v83 + 1) >> 61) {
                  abort();
                }
                if ((v99 - (char *)v19) >> 2 > v84) {
                  unint64_t v84 = (v99 - (char *)v19) >> 2;
                }
                if ((unint64_t)(v99 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v85 = v84;
                }
                if (v85)
                {
                  if (v85 >> 61) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  unint64_t v86 = (char *)operator new(8 * v85);
                }
                else
                {
                  unint64_t v86 = 0;
                }
                unint64_t v77 = (float *)&v86[8 * v83];
                *(_DWORD *)unint64_t v77 = v82;
                v77[1] = v44;
                char v24 = v77 + 2;
                uint64_t v99 = &v86[8 * v85];
                if (v58 == v19) {
                  goto LABEL_153;
                }
                do
                {
                  uint64_t v87 = *((void *)v58 - 1);
                  v58 -= 2;
                  *((void *)v77 - 1) = v87;
                  v77 -= 2;
                }
                while (v58 != v19);
LABEL_152:
                if (v19) {
LABEL_153:
                }
                  operator delete(v19);
                int v19 = v77;
LABEL_155:
                uint64_t v16 = a1;
                goto LABEL_156;
              }
              *(_DWORD *)float64x2_t v58 = v82;
              v58[1] = v44;
            }
            char v24 = v58 + 2;
            goto LABEL_156;
          }
          if (v41 >= v29)
          {
            if (v44 < v29)
            {
              if (v30 < (float *)v99)
              {
                *((_DWORD *)v24 - 2) = v37;
                *(v24 - 1) = v44;
LABEL_62:
                int v12 = v100;
                goto LABEL_156;
              }
              uint64_t v71 = ((char *)v30 - (char *)v19) >> 3;
              unint64_t v72 = v71 + 1;
              if ((unint64_t)(v71 + 1) >> 61) {
                abort();
              }
              if ((v99 - (char *)v19) >> 2 > v72) {
                unint64_t v72 = (v99 - (char *)v19) >> 2;
              }
              if ((unint64_t)(v99 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v73 = v72;
              }
              if (v73)
              {
                if (v73 >> 61) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                uint64_t v74 = (char *)operator new(8 * v73);
              }
              else
              {
                uint64_t v74 = 0;
              }
              unint64_t v94 = (float *)&v74[8 * v71];
              *(_DWORD *)unint64_t v94 = v37;
              v94[1] = v44;
              char v24 = v94 + 2;
              uint64_t v99 = &v74[8 * v73];
              if (v30 == v19)
              {
                int v12 = v100;
              }
              else
              {
                int v12 = v100;
                do
                {
                  uint64_t v95 = *((void *)v30 - 1);
                  v30 -= 2;
                  *((void *)v94 - 1) = v95;
                  v94 -= 2;
                }
                while (v30 != v19);
                if (!v19) {
                  goto LABEL_166;
                }
              }
              operator delete(v19);
LABEL_166:
              int v19 = v94;
              goto LABEL_155;
            }
LABEL_61:
            v24 -= 2;
            goto LABEL_62;
          }
          int v12 = v100;
          if (v30 >= (float *)v99)
          {
            uint64_t v63 = ((char *)v30 - (char *)v19) >> 3;
            unint64_t v64 = v63 + 1;
            if ((unint64_t)(v63 + 1) >> 61) {
              abort();
            }
            if ((v99 - (char *)v19) >> 2 > v64) {
              unint64_t v64 = (v99 - (char *)v19) >> 2;
            }
            if ((unint64_t)(v99 - (char *)v19) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v65 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v65 = v64;
            }
            if (v65)
            {
              if (v65 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              float64x2_t v66 = (char *)operator new(8 * v65);
            }
            else
            {
              float64x2_t v66 = 0;
            }
            unint64_t v77 = (float *)&v66[8 * v63];
            uint64_t v78 = &v66[8 * v65];
            *(_DWORD *)unint64_t v77 = v33;
            v77[1] = v41;
            char v24 = v77 + 2;
            uint64_t v99 = v78;
            if (v30 != v19)
            {
              do
              {
                uint64_t v79 = *((void *)v30 - 1);
                v30 -= 2;
                *((void *)v77 - 1) = v79;
                v77 -= 2;
              }
              while (v30 != v19);
              goto LABEL_152;
            }
            goto LABEL_153;
          }
          *((_DWORD *)v24 - 2) = v33;
          *(v24 - 1) = v41;
        }
LABEL_156:
        if (v19 == v24)
        {
          if (v24) {
            operator delete(v24);
          }
          return v13;
        }
      }
    }
  }
  return v13;
}

void sub_236E0ADD4(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 geom_bvh_closest_point_2d(void *a1, void (*a2)(void, uint64_t, __n128), uint64_t a3, double *a4, unsigned int *a5, float64x2_t a6)
{
  if (a4)
  {
    *a4 = INFINITY;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0x7FF0000000000000;
  }
  int v11 = -1;
  if (a5)
  {
    *a5 = -1;
    int v11 = 0;
  }
  int64x2_t v93 = vdupq_n_s64(0x7FF8000000000000uLL);
  if (a1[7] != a1[6])
  {
    int v12 = (float64x2_t *)a1[3];
    unint64_t v13 = a1[4] - (void)v12;
    if (v13)
    {
      uint64_t v14 = a1;
      unsigned int v15 = __clz(v13 >> 6);
      if (v15 == 31)
      {
        uint64_t v16 = 0;
        unsigned int v17 = 0;
      }
      else
      {
        unsigned int v18 = 31 - v15;
        int v19 = (double *)operator new(16 * (31 - v15));
        uint64_t v14 = a1;
        unsigned int v17 = v19;
        uint64_t v16 = &v19[2 * v18];
      }
      float64x2_t v20 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(a6, v12[3]), v12[2]), a6);
      double v21 = vaddvq_f64(vmulq_f64(v20, v20));
      if (v17 >= v16)
      {
        uint64_t v23 = (char *)v16 - (char *)v17;
        uint64_t v24 = v23 >> 3;
        if ((unint64_t)(v23 >> 3) <= 1) {
          uint64_t v24 = 1;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v24;
        }
        if (v25 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v26 = (double *)operator new(16 * v25);
        unint64_t v91 = (char *)&v26[2 * v25];
        *uint64_t v26 = 0.0;
        float32x2_t v22 = v26 + 2;
        v26[1] = v21;
        if (v17) {
          operator delete(v17);
        }
        unsigned int v17 = v26;
        uint64_t v14 = a1;
      }
      else
      {
        unint64_t v91 = (char *)v16;
        double *v17 = 0.0;
        float32x2_t v22 = v17 + 2;
        v17[1] = v21;
      }
      int64x2_t v93 = vdupq_n_s64(0x7FF8000000000000uLL);
      uint64_t v89 = a3;
      while (1)
      {
        double v27 = *(double *)&v10;
        if (a4) {
          double v27 = *a4;
        }
        uint64_t v28 = v22 - 2;
        if (v27 <= *(v22 - 1))
        {
LABEL_36:
          v22 -= 2;
          goto LABEL_167;
        }
        int v92 = v11;
        uint64_t v29 = v14[3];
        uint64_t v30 = (unsigned int *)(v29 + ((unint64_t)*(unsigned int *)v28 << 6));
        uint64_t v32 = (int *)(v30 + 1);
        uint64_t v31 = v30[1];
        unsigned int v33 = (int *)(v30 + 2);
        uint64_t v34 = v30[2];
        if (v30[1] == -1 && v34 == -1)
        {
          unsigned int v43 = v30[4];
          if (!v43)
          {
            v22 -= 2;
LABEL_122:
            int v11 = v92;
            goto LABEL_167;
          }
          uint64_t v44 = v30[3];
          uint64_t v45 = (unsigned int *)(v14[6] + 4 * v44);
          uint64_t v46 = 4 * (v43 + v44) - 4 * v44;
          int v11 = v92;
          while (2)
          {
            unsigned int v47 = *v45;
            a2(*v45, v89, (__n128)a6);
            double v49 = *(double *)&v10;
            if (a4) {
              double v49 = *a4;
            }
            float64x2_t v50 = vsubq_f64(a6, v48);
            double v51 = vaddvq_f64(vmulq_f64(v50, v50));
            if (v51 < v49) {
              goto LABEL_48;
            }
            unsigned int v52 = v11;
            if (a5) {
              unsigned int v52 = *a5;
            }
            if (v51 == v49 && v47 < v52)
            {
LABEL_48:
              if (a4)
              {
                *a4 = v51;
                if (a5) {
                  goto LABEL_50;
                }
LABEL_52:
                int v11 = v47;
              }
              else
              {
                uint64_t v10 = *(void *)&v51;
                if (!a5) {
                  goto LABEL_52;
                }
LABEL_50:
                *a5 = v47;
              }
              int64x2_t v93 = (int64x2_t)v48;
            }
            ++v45;
            v46 -= 4;
            if (!v46)
            {
              float32x2_t v22 = v28;
              goto LABEL_166;
            }
            continue;
          }
        }
        float64x2_t v36 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(a6, *(float64x2_t *)(v29 + (v31 << 6) + 48)), *(float64x2_t *)(v29 + (v31 << 6) + 32)), a6);
        int64x2_t v37 = (int64x2_t)vmulq_f64(v36, v36);
        double v38 = vaddvq_f64((float64x2_t)v37);
        float64x2_t v39 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(a6, *(float64x2_t *)(v29 + (v34 << 6) + 48)), *(float64x2_t *)(v29 + (v34 << 6) + 32)), a6);
        int64x2_t v40 = (int64x2_t)vmulq_f64(v39, v39);
        double v41 = vaddvq_f64((float64x2_t)v40);
        if (v38 < v27 && v41 < v27) {
          break;
        }
        if (v38 < v27)
        {
          int v11 = v92;
          if (v28 >= (double *)v91)
          {
            uint64_t v61 = ((char *)v28 - (char *)v17) >> 4;
            unint64_t v62 = v61 + 1;
            if ((unint64_t)(v61 + 1) >> 60) {
              abort();
            }
            if ((v91 - (char *)v17) >> 3 > v62) {
              unint64_t v62 = (v91 - (char *)v17) >> 3;
            }
            if ((unint64_t)(v91 - (char *)v17) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v63 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v62;
            }
            if (v63)
            {
              if (v63 >> 60) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              unint64_t v64 = (char *)operator new(16 * v63);
            }
            else
            {
              unint64_t v64 = 0;
            }
            uint64_t v74 = (double *)&v64[16 * v61];
            unint64_t v91 = &v64[16 * v63];
            *(_DWORD *)uint64_t v74 = v31;
            v74[1] = v38;
            float32x2_t v22 = v74 + 2;
            if (v28 == v17) {
              goto LABEL_112;
            }
            do
            {
              *((_OWORD *)v74 - 1) = *((_OWORD *)v28 - 1);
              v74 -= 2;
              v28 -= 2;
            }
            while (v28 != v17);
            if (v17) {
LABEL_112:
            }
              operator delete(v17);
            unsigned int v17 = v74;
            goto LABEL_166;
          }
          *((_DWORD *)v22 - 4) = v31;
          *(v22 - 1) = v38;
        }
        else
        {
          int v11 = v92;
          if (v41 >= v27) {
            goto LABEL_36;
          }
          if (v28 >= (double *)v91)
          {
            uint64_t v69 = ((char *)v28 - (char *)v17) >> 4;
            unint64_t v70 = v69 + 1;
            if ((unint64_t)(v69 + 1) >> 60) {
              abort();
            }
            if ((v91 - (char *)v17) >> 3 > v70) {
              unint64_t v70 = (v91 - (char *)v17) >> 3;
            }
            if ((unint64_t)(v91 - (char *)v17) >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v71 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v71 = v70;
            }
            if (v71)
            {
              if (v71 >> 60) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              unint64_t v72 = (char *)operator new(16 * v71);
            }
            else
            {
              unint64_t v72 = 0;
            }
            uint64_t v87 = (double *)&v72[16 * v69];
            unint64_t v91 = &v72[16 * v71];
            *(_DWORD *)uint64_t v87 = v34;
            v87[1] = v41;
            float32x2_t v22 = v87 + 2;
            if (v28 == v17) {
              goto LABEL_164;
            }
            do
            {
              *((_OWORD *)v87 - 1) = *((_OWORD *)v28 - 1);
              v87 -= 2;
              v28 -= 2;
            }
            while (v28 != v17);
            if (v17) {
LABEL_164:
            }
              operator delete(v17);
            unsigned int v17 = v87;
            goto LABEL_166;
          }
          *((_DWORD *)v22 - 4) = v34;
          *(v22 - 1) = v41;
        }
LABEL_167:
        if (v17 == v22)
        {
          if (v22) {
            operator delete(v22);
          }
          return (__n128)v93;
        }
      }
      if ((vmovn_s64(vcgtq_f64(vaddq_f64((float64x2_t)v40, (float64x2_t)vdupq_laneq_s64(v40, 1)), vaddq_f64((float64x2_t)v37, (float64x2_t)vdupq_laneq_s64(v37, 1)))).u8[0] & 1) == 0)
      {
        if (v28 >= (double *)v91)
        {
          uint64_t v65 = ((char *)v28 - (char *)v17) >> 4;
          unint64_t v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 60) {
            abort();
          }
          if ((v91 - (char *)v17) >> 3 > v66) {
            unint64_t v66 = (v91 - (char *)v17) >> 3;
          }
          if ((unint64_t)(v91 - (char *)v17) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v66;
          }
          if (v67)
          {
            if (v67 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v68 = (char *)operator new(16 * v67);
          }
          else
          {
            unint64_t v68 = 0;
          }
          unint64_t v75 = (double *)&v68[16 * v65];
          unsigned int v56 = (double *)&v68[16 * v67];
          *(_DWORD *)unint64_t v75 = v31;
          v75[1] = v38;
          float v55 = v75 + 2;
          if (v28 == v17) {
            goto LABEL_118;
          }
          do
          {
            *((_OWORD *)v75 - 1) = *((_OWORD *)v28 - 1);
            v75 -= 2;
            v28 -= 2;
          }
          while (v28 != v17);
          if (v17) {
LABEL_118:
          }
            operator delete(v17);
          unsigned int v17 = v75;
          uint64_t v14 = a1;
        }
        else
        {
          *((_DWORD *)v22 - 4) = v31;
          *(v22 - 1) = v38;
          float v55 = v22;
          unsigned int v56 = (double *)v91;
        }
        int v76 = *v33;
        unint64_t v91 = (char *)v56;
        if (v55 >= v56)
        {
          uint64_t v77 = ((char *)v55 - (char *)v17) >> 4;
          unint64_t v78 = v77 + 1;
          if ((unint64_t)(v77 + 1) >> 60) {
            abort();
          }
          if ((v91 - (char *)v17) >> 3 > v78) {
            unint64_t v78 = (v91 - (char *)v17) >> 3;
          }
          if ((unint64_t)(v91 - (char *)v17) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v79 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v79 = v78;
          }
          if (v79)
          {
            if (v79 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            int v80 = (char *)operator new(16 * v79);
          }
          else
          {
            int v80 = 0;
          }
          uint64_t v81 = (double *)&v80[16 * v77];
          unint64_t v91 = &v80[16 * v79];
          *(_DWORD *)uint64_t v81 = v76;
          v81[1] = v41;
          float32x2_t v22 = v81 + 2;
          if (v55 != v17)
          {
            int v11 = v92;
            do
            {
              *((_OWORD *)v81 - 1) = *((_OWORD *)v55 - 1);
              v81 -= 2;
              v55 -= 2;
            }
            while (v55 != v17);
LABEL_155:
            if (!v17)
            {
LABEL_159:
              unsigned int v17 = v81;
LABEL_166:
              uint64_t v14 = a1;
              goto LABEL_167;
            }
LABEL_158:
            operator delete(v17);
            goto LABEL_159;
          }
LABEL_157:
          int v11 = v92;
          goto LABEL_158;
        }
        *(_DWORD *)float v55 = v76;
        v55[1] = v41;
        float32x2_t v22 = v55 + 2;
        goto LABEL_122;
      }
      if (v28 < (double *)v91)
      {
        *((_DWORD *)v22 - 4) = v34;
        *(v22 - 1) = v41;
        float32x2_t v54 = v22;
        int v11 = v92;
LABEL_140:
        int v82 = *v32;
        if (v54 >= (double *)v91)
        {
          uint64_t v83 = ((char *)v54 - (char *)v17) >> 4;
          unint64_t v84 = v83 + 1;
          if ((unint64_t)(v83 + 1) >> 60) {
            abort();
          }
          if ((v91 - (char *)v17) >> 3 > v84) {
            unint64_t v84 = (v91 - (char *)v17) >> 3;
          }
          if ((unint64_t)(v91 - (char *)v17) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v85 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v85 = v84;
          }
          if (v85)
          {
            if (v85 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v86 = (char *)operator new(16 * v85);
          }
          else
          {
            unint64_t v86 = 0;
          }
          uint64_t v81 = (double *)&v86[16 * v83];
          unint64_t v91 = &v86[16 * v85];
          *(_DWORD *)uint64_t v81 = v82;
          v81[1] = v38;
          float32x2_t v22 = v81 + 2;
          if (v54 != v17)
          {
            int v11 = v92;
            do
            {
              *((_OWORD *)v81 - 1) = *((_OWORD *)v54 - 1);
              v81 -= 2;
              v54 -= 2;
            }
            while (v54 != v17);
            goto LABEL_155;
          }
          goto LABEL_157;
        }
        *(_DWORD *)float32x2_t v54 = v82;
        v54[1] = v38;
        float32x2_t v22 = v54 + 2;
        goto LABEL_167;
      }
      uint64_t v57 = ((char *)v28 - (char *)v17) >> 4;
      unint64_t v58 = v57 + 1;
      if ((unint64_t)(v57 + 1) >> 60) {
        abort();
      }
      if ((v91 - (char *)v17) >> 3 > v58) {
        unint64_t v58 = (v91 - (char *)v17) >> 3;
      }
      if ((unint64_t)(v91 - (char *)v17) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v59 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v59 = v58;
      }
      if (v59)
      {
        if (v59 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v60 = (char *)operator new(16 * v59);
      }
      else
      {
        unint64_t v60 = 0;
      }
      unint64_t v73 = (double *)&v60[16 * v57];
      unint64_t v91 = &v60[16 * v59];
      *(_DWORD *)unint64_t v73 = v34;
      v73[1] = v41;
      float32x2_t v54 = v73 + 2;
      if (v28 == v17)
      {
        int v11 = v92;
      }
      else
      {
        int v11 = v92;
        do
        {
          *((_OWORD *)v73 - 1) = *((_OWORD *)v28 - 1);
          v73 -= 2;
          v28 -= 2;
        }
        while (v28 != v17);
        if (!v17) {
          goto LABEL_139;
        }
      }
      operator delete(v17);
LABEL_139:
      unsigned int v17 = v73;
      uint64_t v14 = a1;
      goto LABEL_140;
    }
  }
  return (__n128)v93;
}

void sub_236E0B654(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

__n128 geom_bvh_closest_point_3f(void *a1, void (*a2)(void, uint64_t, __n128), uint64_t a3, float *a4, unsigned int *a5, float32x4_t a6)
{
  if (a4)
  {
    *a4 = INFINITY;
    int v10 = 0;
  }
  else
  {
    int v10 = 2139095040;
  }
  int v11 = -1;
  if (a5)
  {
    *a5 = -1;
    int v11 = 0;
  }
  int32x4_t v119 = vdupq_n_s32(0x7FC00000u);
  if (a1[7] != a1[6])
  {
    int v12 = (float32x4_t *)a1[3];
    unint64_t v13 = a1[4] - (void)v12;
    if (v13)
    {
      uint64_t v14 = a1;
      unsigned int v15 = __clz(v13 >> 6);
      if (v15 == 31)
      {
        uint64_t v16 = 0;
        unsigned int v17 = 0;
      }
      else
      {
        unsigned int v18 = 31 - v15;
        int v19 = (char *)operator new(8 * (31 - v15));
        uint64_t v14 = a1;
        unsigned int v17 = v19;
        uint64_t v16 = &v19[8 * v18];
      }
      float32x4_t v20 = a6;
      v20.i32[3] = 0;
      float32x4_t v22 = v12[2];
      float32x4_t v21 = v12[3];
      v21.i32[3] = 0;
      float32x4_t v115 = v20;
      float32x4_t v23 = vminnmq_f32(v20, v21);
      v23.i32[3] = 0;
      v22.i32[3] = 0;
      float32x4_t v24 = vsubq_f32(vmaxnmq_f32(v23, v22), a6);
      float32x4_t v25 = vmulq_f32(v24, v24);
      unsigned __int32 v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).u32[0];
      if (v17 >= v16)
      {
        unsigned __int32 v120 = v26;
        uint64_t v28 = v16 - v17;
        uint64_t v29 = v28 >> 2;
        if ((unint64_t)(v28 >> 2) <= 1) {
          uint64_t v29 = 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v30 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v31 = (char *)operator new(8 * v30);
        float64x2_t v117 = &v31[8 * v30];
        *(_DWORD *)uint64_t v31 = 0;
        *((_DWORD *)v31 + 1) = v120;
        double v27 = v31 + 8;
        if (v17) {
          operator delete(v17);
        }
        unsigned int v17 = v31;
        uint64_t v14 = a1;
      }
      else
      {
        float64x2_t v117 = v16;
        *(_DWORD *)unsigned int v17 = 0;
        *((_DWORD *)v17 + 1) = v26;
        double v27 = v17 + 8;
      }
      int32x4_t v119 = vdupq_n_s32(0x7FC00000u);
      uint64_t v110 = a3;
      while (1)
      {
        float v32 = *(float *)&v10;
        if (a4) {
          float v32 = *a4;
        }
        unsigned int v33 = (unsigned int *)(v27 - 8);
        if (v32 <= *((float *)v27 - 1))
        {
          v27 -= 8;
        }
        else
        {
          int v118 = v11;
          uint64_t v34 = v14[3];
          unsigned int v35 = (unsigned int *)(v34 + ((unint64_t)*v33 << 6));
          int64x2_t v37 = (int *)(v35 + 1);
          uint64_t v36 = v35[1];
          double v38 = (int *)(v35 + 2);
          uint64_t v39 = v35[2];
          if (v35[1] == -1 && v39 == -1)
          {
            unsigned int v56 = v35[4];
            if (v56)
            {
              uint64_t v57 = v35[3];
              unint64_t v58 = (unsigned int *)(v14[6] + 4 * v57);
              uint64_t v59 = 4 * (v56 + v57) - 4 * v57;
              int v11 = v118;
              do
              {
                unsigned int v60 = *v58;
                a2(*v58, v110, (__n128)a6);
                float v62 = *(float *)&v10;
                if (a4) {
                  float v62 = *a4;
                }
                float32x4_t v63 = vsubq_f32(a6, v61);
                float32x4_t v64 = vmulq_f32(v63, v63);
                float v65 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2), vaddq_f32(v64, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1))).f32[0];
                if (v65 < v62) {
                  goto LABEL_50;
                }
                unsigned int v66 = v11;
                if (a5) {
                  unsigned int v66 = *a5;
                }
                if (v65 == v62 && v60 < v66)
                {
LABEL_50:
                  if (a4) {
                    *a4 = v65;
                  }
                  else {
                    int v10 = LODWORD(v65);
                  }
                  int32x4_t v119 = (int32x4_t)v61;
                  if (a5) {
                    *a5 = v60;
                  }
                  else {
                    int v11 = v60;
                  }
                }
                ++v58;
                v59 -= 4;
              }
              while (v59);
              double v27 = (char *)v33;
              goto LABEL_155;
            }
            goto LABEL_61;
          }
          double v41 = (float32x4_t *)(v34 + (v36 << 6));
          float32x4_t v43 = v41[2];
          float32x4_t v42 = v41[3];
          v42.i32[3] = 0;
          float32x4_t v44 = vminnmq_f32(v115, v42);
          v44.i32[3] = 0;
          v43.i32[3] = 0;
          float32x4_t v45 = vsubq_f32(vmaxnmq_f32(v44, v43), a6);
          float32x4_t v46 = vmulq_f32(v45, v45);
          unsigned int v47 = (float32x4_t *)(v34 + (v39 << 6));
          float32x4_t v49 = v47[2];
          float32x4_t v48 = v47[3];
          v48.i32[3] = 0;
          float32x4_t v50 = vminnmq_f32(v115, v48);
          v50.i32[3] = 0;
          v49.i32[3] = 0;
          float32x4_t v51 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1)));
          float32x4_t v52 = vsubq_f32(vmaxnmq_f32(v50, v49), a6);
          float32x4_t v53 = vmulq_f32(v52, v52);
          float32x4_t v54 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1)));
          if (v51.f32[0] < v32 && v54.f32[0] < v32)
          {
            if (vmovn_s32(vcgtq_f32(v54, v51)).u8[0])
            {
              if (v33 < (unsigned int *)v117)
              {
                *((_DWORD *)v27 - 2) = v39;
                *((_DWORD *)v27 - 1) = v54.i32[0];
                unint64_t v68 = v27;
                int v11 = v118;
                goto LABEL_137;
              }
              uint64_t v69 = ((char *)v33 - v17) >> 3;
              unint64_t v70 = v69 + 1;
              if ((unint64_t)(v69 + 1) >> 61) {
                abort();
              }
              if ((v117 - v17) >> 2 > v70) {
                unint64_t v70 = (v117 - v17) >> 2;
              }
              if ((unint64_t)(v117 - v17) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v71 = v70;
              }
              __int32 v111 = v51.i32[0];
              if (v71)
              {
                __int32 v106 = v54.i32[0];
                if (v71 >> 61) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                unint64_t v72 = (char *)operator new(8 * v71);
                v51.i32[0] = v111;
                v54.i32[0] = v106;
              }
              else
              {
                unint64_t v72 = 0;
              }
              unint64_t v85 = &v72[8 * v69];
              float64x2_t v117 = &v72[8 * v71];
              *(_DWORD *)unint64_t v85 = v39;
              *((_DWORD *)v85 + 1) = v54.i32[0];
              unint64_t v68 = v85 + 8;
              if (v33 == (unsigned int *)v17)
              {
                int v11 = v118;
              }
              else
              {
                int v11 = v118;
                do
                {
                  uint64_t v86 = *((void *)v33 - 1);
                  v33 -= 2;
                  *((void *)v85 - 1) = v86;
                  v85 -= 8;
                }
                while (v33 != (unsigned int *)v17);
                if (!v17) {
                  goto LABEL_136;
                }
              }
              operator delete(v17);
              v51.i32[0] = v111;
LABEL_136:
              unsigned int v17 = v85;
              uint64_t v14 = a1;
LABEL_137:
              int v97 = *v37;
              if (v68 >= v117)
              {
                uint64_t v98 = (v68 - v17) >> 3;
                unint64_t v99 = v98 + 1;
                if ((unint64_t)(v98 + 1) >> 61) {
                  abort();
                }
                if ((v117 - v17) >> 2 > v99) {
                  unint64_t v99 = (v117 - v17) >> 2;
                }
                if ((unint64_t)(v117 - v17) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v100 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v100 = v99;
                }
                if (v100)
                {
                  __int32 v114 = v51.i32[0];
                  if (v100 >> 61) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  uint64_t v101 = (char *)operator new(8 * v100);
                  v51.i32[0] = v114;
                }
                else
                {
                  uint64_t v101 = 0;
                }
                uint64_t v87 = &v101[8 * v98];
                float64x2_t v117 = &v101[8 * v100];
                *(_DWORD *)uint64_t v87 = v97;
                *((_DWORD *)v87 + 1) = v51.i32[0];
                double v27 = v87 + 8;
                if (v68 != v17)
                {
                  do
                  {
                    uint64_t v102 = *((void *)v68 - 1);
                    v68 -= 8;
                    *((void *)v87 - 1) = v102;
                    v87 -= 8;
                  }
                  while (v68 != v17);
                  goto LABEL_152;
                }
                goto LABEL_153;
              }
              *(_DWORD *)unint64_t v68 = v97;
              *((_DWORD *)v68 + 1) = v51.i32[0];
            }
            else
            {
              if (v33 >= (unsigned int *)v117)
              {
                uint64_t v77 = ((char *)v33 - v17) >> 3;
                unint64_t v78 = v77 + 1;
                int v11 = v118;
                if ((unint64_t)(v77 + 1) >> 61) {
                  abort();
                }
                if ((v117 - v17) >> 2 > v78) {
                  unint64_t v78 = (v117 - v17) >> 2;
                }
                if ((unint64_t)(v117 - v17) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v79 = v78;
                }
                __int32 v107 = v54.i32[0];
                if (v79)
                {
                  __int32 v113 = v51.i32[0];
                  if (v79 >> 61) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  int v80 = (char *)operator new(8 * v79);
                  v51.i32[0] = v113;
                  v54.i32[0] = v107;
                }
                else
                {
                  int v80 = 0;
                }
                uint64_t v89 = &v80[8 * v77];
                *(_DWORD *)uint64_t v89 = v36;
                *((_DWORD *)v89 + 1) = v51.i32[0];
                unint64_t v68 = v89 + 8;
                float64x2_t v117 = &v80[8 * v79];
                if (v33 == (unsigned int *)v17) {
                  goto LABEL_117;
                }
                do
                {
                  uint64_t v90 = *((void *)v33 - 1);
                  v33 -= 2;
                  *((void *)v89 - 1) = v90;
                  v89 -= 8;
                }
                while (v33 != (unsigned int *)v17);
                if (v17)
                {
LABEL_117:
                  operator delete(v17);
                  v54.i32[0] = v107;
                }
                unsigned int v17 = v89;
                uint64_t v14 = a1;
              }
              else
              {
                *((_DWORD *)v27 - 2) = v36;
                *((_DWORD *)v27 - 1) = v51.i32[0];
                unint64_t v68 = v27;
                int v11 = v118;
              }
              int v91 = *v38;
              if (v68 >= v117)
              {
                uint64_t v92 = (v68 - v17) >> 3;
                unint64_t v93 = v92 + 1;
                if ((unint64_t)(v92 + 1) >> 61) {
                  abort();
                }
                if ((v117 - v17) >> 2 > v93) {
                  unint64_t v93 = (v117 - v17) >> 2;
                }
                if ((unint64_t)(v117 - v17) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v94 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v94 = v93;
                }
                if (v94)
                {
                  __int32 v109 = v54.i32[0];
                  if (v94 >> 61) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  uint64_t v95 = (char *)operator new(8 * v94);
                  v54.i32[0] = v109;
                }
                else
                {
                  uint64_t v95 = 0;
                }
                uint64_t v87 = &v95[8 * v92];
                float64x2_t v117 = &v95[8 * v94];
                *(_DWORD *)uint64_t v87 = v91;
                *((_DWORD *)v87 + 1) = v54.i32[0];
                double v27 = v87 + 8;
                if (v68 == v17) {
                  goto LABEL_153;
                }
                do
                {
                  uint64_t v96 = *((void *)v68 - 1);
                  v68 -= 8;
                  *((void *)v87 - 1) = v96;
                  v87 -= 8;
                }
                while (v68 != v17);
LABEL_152:
                if (v17) {
LABEL_153:
                }
                  operator delete(v17);
                unsigned int v17 = v87;
LABEL_155:
                uint64_t v14 = a1;
                goto LABEL_156;
              }
              *(_DWORD *)unint64_t v68 = v91;
              *((_DWORD *)v68 + 1) = v54.i32[0];
            }
            double v27 = v68 + 8;
            goto LABEL_156;
          }
          if (v51.f32[0] >= v32)
          {
            if (v54.f32[0] < v32)
            {
              if (v33 >= (unsigned int *)v117)
              {
                uint64_t v81 = ((char *)v33 - v17) >> 3;
                unint64_t v82 = v81 + 1;
                if ((unint64_t)(v81 + 1) >> 61) {
                  abort();
                }
                if ((v117 - v17) >> 2 > v82) {
                  unint64_t v82 = (v117 - v17) >> 2;
                }
                if ((unint64_t)(v117 - v17) >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v83 = v82;
                }
                if (v83)
                {
                  __int32 v108 = v54.i32[0];
                  if (v83 >> 61) {
                    std::__throw_bad_array_new_length[abi:nn180100]();
                  }
                  unint64_t v84 = (char *)operator new(8 * v83);
                  v54.i32[0] = v108;
                }
                else
                {
                  unint64_t v84 = 0;
                }
                unsigned int v103 = &v84[8 * v81];
                float64x2_t v117 = &v84[8 * v83];
                *(_DWORD *)unsigned int v103 = v39;
                *((_DWORD *)v103 + 1) = v54.i32[0];
                double v27 = v103 + 8;
                if (v33 == (unsigned int *)v17)
                {
                  int v11 = v118;
                }
                else
                {
                  int v11 = v118;
                  do
                  {
                    uint64_t v104 = *((void *)v33 - 1);
                    v33 -= 2;
                    *((void *)v103 - 1) = v104;
                    v103 -= 8;
                  }
                  while (v33 != (unsigned int *)v17);
                  if (!v17) {
                    goto LABEL_166;
                  }
                }
                operator delete(v17);
LABEL_166:
                unsigned int v17 = v103;
                goto LABEL_155;
              }
              *((_DWORD *)v27 - 2) = v39;
              *((_DWORD *)v27 - 1) = v54.i32[0];
              goto LABEL_62;
            }
LABEL_61:
            v27 -= 8;
LABEL_62:
            int v11 = v118;
            goto LABEL_156;
          }
          int v11 = v118;
          if (v33 >= (unsigned int *)v117)
          {
            uint64_t v73 = ((char *)v33 - v17) >> 3;
            unint64_t v74 = v73 + 1;
            if ((unint64_t)(v73 + 1) >> 61) {
              abort();
            }
            if ((v117 - v17) >> 2 > v74) {
              unint64_t v74 = (v117 - v17) >> 2;
            }
            if ((unint64_t)(v117 - v17) >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v75 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v75 = v74;
            }
            if (v75)
            {
              __int32 v112 = v51.i32[0];
              if (v75 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              int v76 = (char *)operator new(8 * v75);
              v51.i32[0] = v112;
            }
            else
            {
              int v76 = 0;
            }
            uint64_t v87 = &v76[8 * v73];
            float64x2_t v117 = &v76[8 * v75];
            *(_DWORD *)uint64_t v87 = v36;
            *((_DWORD *)v87 + 1) = v51.i32[0];
            double v27 = v87 + 8;
            if (v33 != (unsigned int *)v17)
            {
              do
              {
                uint64_t v88 = *((void *)v33 - 1);
                v33 -= 2;
                *((void *)v87 - 1) = v88;
                v87 -= 8;
              }
              while (v33 != (unsigned int *)v17);
              goto LABEL_152;
            }
            goto LABEL_153;
          }
          *((_DWORD *)v27 - 2) = v36;
          *((_DWORD *)v27 - 1) = v51.i32[0];
        }
LABEL_156:
        if (v17 == v27)
        {
          if (v27) {
            operator delete(v27);
          }
          break;
        }
      }
    }
  }
  return (__n128)v119;
}

void sub_236E0BF18(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

int8x16_t geom_bvh_closest_point_3d@<Q0>(void *a1@<X0>, void (*a2)(float64x2_t *__return_ptr, uint64_t, _OWORD *, uint64_t)@<X1>, float64x2_t *a3@<X2>, uint64_t a4@<X3>, double *a5@<X4>, unsigned int *a6@<X5>, uint64_t a7@<X8>)
{
  int v11 = a1;
  float64x2_t v13 = a3[1];
  float64x2_t v110 = *a3;
  float64x2_t v111 = v13;
  if (a5)
  {
    *a5 = INFINITY;
    uint64_t v14 = 0;
  }
  else
  {
    uint64_t v14 = 0x7FF0000000000000;
  }
  if (a6)
  {
    *a6 = -1;
    int v106 = 0;
  }
  else
  {
    int v106 = -1;
  }
  if (a1[7] == a1[6] || (v15 = a1[3], (unint64_t v16 = a1[4] - v15) == 0))
  {
    result.i64[0] = 0x7FF8000000000000;
    unint64_t v21 = 0x7FF8000000000000;
    v13.f64[0] = NAN;
    goto LABEL_173;
  }
  unsigned int v17 = __clz(-1431655765 * (v16 >> 5));
  if (v17 == 31)
  {
    unsigned int v18 = 0;
    int v19 = 0;
  }
  else
  {
    unsigned int v22 = 31 - v17;
    float32x4_t v23 = (double *)operator new(16 * (31 - v17));
    int v11 = a1;
    int v19 = v23;
    unsigned int v18 = &v23[2 * v22];
  }
  float64x2_t v24 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v110, *(float64x2_t *)(v15 + 64)), *(float64x2_t *)(v15 + 32)), v110);
  float64x2_t v25 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v111.f64[0], (float64x2_t)*(unint64_t *)(v15 + 80)), (float64x2_t)*(unint64_t *)(v15 + 48)), v111);
  float64x2_t v26 = vmulq_f64(v25, v25);
  double v27 = v26.f64[0] + vaddvq_f64(vmulq_f64(v24, v24));
  uint64_t v102 = a7;
  if (v19 >= v18)
  {
    uint64_t v30 = (char *)v18 - (char *)v19;
    uint64_t v31 = v30 >> 3;
    if ((unint64_t)(v30 >> 3) <= 1) {
      uint64_t v31 = 1;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    unsigned int v33 = (double *)operator new(16 * v32);
    unsigned int v105 = (char *)&v33[2 * v32];
    *unsigned int v33 = 0.0;
    uint64_t v28 = v33 + 2;
    v33[1] = v27;
    unsigned int v29 = v106;
    if (v19) {
      operator delete(v19);
    }
    int v19 = v33;
    int v11 = a1;
  }
  else
  {
    unsigned int v105 = (char *)v18;
    *int v19 = 0.0;
    uint64_t v28 = v19 + 2;
    v19[1] = v27;
    unsigned int v29 = v106;
  }
  v26.f64[0] = NAN;
  float64x2_t v108 = v26;
  int64x2_t v109 = vdupq_n_s64(0x7FF8000000000000uLL);
  uint64_t v103 = a4;
  do
  {
    double v34 = *(double *)&v14;
    if (a5) {
      double v34 = *a5;
    }
    unsigned int v35 = v28 - 2;
    if (v34 <= *(v28 - 1))
    {
LABEL_38:
      v28 -= 2;
      continue;
    }
    unsigned int v107 = v29;
    uint64_t v36 = v11[3];
    uint64_t v37 = v36 + 96 * *(unsigned int *)v35;
    unsigned int v40 = *(_DWORD *)(v37 + 4);
    uint64_t v39 = (int *)(v37 + 4);
    unsigned int v38 = v40;
    float32x4_t v42 = v39 + 1;
    unsigned int v41 = v39[1];
    if (v40 == -1 && v41 == -1)
    {
      uint64_t v53 = v36 + 96 * *(unsigned int *)v35;
      int v54 = *(_DWORD *)(v53 + 16);
      if (!v54)
      {
        v28 -= 2;
LABEL_113:
        unsigned int v29 = v107;
        continue;
      }
      uint64_t v55 = *(unsigned int *)(v53 + 12);
      unsigned int v56 = (unsigned int *)(v11[6] + 4 * v55);
      uint64_t v57 = 4 * (v54 + v55) - 4 * v55;
      unsigned int v29 = v107;
      while (1)
      {
        uint64_t v58 = *v56;
        v113[0] = v110;
        v113[1] = v111;
        a2(&v114, v58, v113, v103);
        double v59 = *(double *)&v14;
        if (a5) {
          double v59 = *a5;
        }
        float64x2_t v61 = v114;
        float64x2_t v60 = v115;
        float64x2_t v62 = vsubq_f64(v110, v114);
        float64x2_t v63 = vsubq_f64(v111, v115);
        double v64 = vmulq_f64(v63, v63).f64[0] + vaddvq_f64(vmulq_f64(v62, v62));
        if (v64 >= v59)
        {
          unsigned int v65 = v29;
          if (a6) {
            unsigned int v65 = *a6;
          }
          if (v64 != v59 || v58 >= v65) {
            goto LABEL_56;
          }
        }
        if (a5)
        {
          *a5 = v64;
          if (!a6) {
            goto LABEL_54;
          }
        }
        else
        {
          uint64_t v14 = *(void *)&v64;
          if (!a6)
          {
LABEL_54:
            unsigned int v29 = v58;
            goto LABEL_55;
          }
        }
        *a6 = v58;
LABEL_55:
        float64x2_t v108 = v60;
        int64x2_t v109 = (int64x2_t)v61;
LABEL_56:
        ++v56;
        v57 -= 4;
        if (!v57)
        {
          uint64_t v28 = v35;
          goto LABEL_58;
        }
      }
    }
    uint64_t v44 = v36 + 96 * v38;
    float64x2_t v45 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v110, *(float64x2_t *)(v44 + 64)), *(float64x2_t *)(v44 + 32)), v110);
    float64x2_t v46 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v111.f64[0], (float64x2_t)*(unint64_t *)(v44 + 80)), (float64x2_t)*(unint64_t *)(v44 + 48)), v111);
    double v47 = vmulq_f64(v46, v46).f64[0] + vaddvq_f64(vmulq_f64(v45, v45));
    uint64_t v48 = v36 + 96 * v41;
    float64x2_t v49 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v110, *(float64x2_t *)(v48 + 64)), *(float64x2_t *)(v48 + 32)), v110);
    float64x2_t v50 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v111.f64[0], (float64x2_t)*(unint64_t *)(v48 + 80)), (float64x2_t)*(unint64_t *)(v48 + 48)), v111);
    double v51 = vmulq_f64(v50, v50).f64[0] + vaddvq_f64(vmulq_f64(v49, v49));
    if (v47 < v34 && v51 < v34)
    {
      if (v47 >= v51)
      {
        if (v35 >= (double *)v105)
        {
          uint64_t v79 = ((char *)v35 - (char *)v19) >> 4;
          unint64_t v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 60) {
            abort();
          }
          if ((v105 - (char *)v19) >> 3 > v80) {
            unint64_t v80 = (v105 - (char *)v19) >> 3;
          }
          if ((unint64_t)(v105 - (char *)v19) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v81 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v81 = v80;
          }
          if (v81)
          {
            if (v81 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v82 = (char *)operator new(16 * v81);
          }
          else
          {
            unint64_t v82 = 0;
          }
          unint64_t v94 = (double *)&v82[16 * v79];
          unint64_t v70 = (double *)&v82[16 * v81];
          *(_DWORD *)unint64_t v94 = v38;
          v94[1] = v47;
          uint64_t v69 = v94 + 2;
          if (v35 == v19) {
            goto LABEL_133;
          }
          do
          {
            *((_OWORD *)v94 - 1) = *((_OWORD *)v35 - 1);
            v94 -= 2;
            v35 -= 2;
          }
          while (v35 != v19);
          if (v19) {
LABEL_133:
          }
            operator delete(v19);
          int v19 = v94;
          int v11 = a1;
          unsigned int v29 = v107;
        }
        else
        {
          *((_DWORD *)v28 - 4) = v38;
          *(v28 - 1) = v47;
          uint64_t v69 = v28;
          unsigned int v29 = v107;
          unint64_t v70 = (double *)v105;
        }
        int v95 = *v42;
        if (v69 < v70)
        {
          unsigned int v105 = (char *)v70;
          *(_DWORD *)uint64_t v69 = v95;
          v69[1] = v51;
          uint64_t v28 = v69 + 2;
          continue;
        }
        uint64_t v96 = ((char *)v69 - (char *)v19) >> 4;
        unint64_t v97 = v96 + 1;
        if ((unint64_t)(v96 + 1) >> 60) {
          abort();
        }
        if (v70 - v19 > v97) {
          unint64_t v97 = v70 - v19;
        }
        if ((unint64_t)((char *)v70 - (char *)v19) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v98 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v98 = v97;
        }
        if (v98)
        {
          if (v98 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v99 = (char *)operator new(16 * v98);
        }
        else
        {
          unint64_t v99 = 0;
        }
        unint64_t v100 = (double *)&v99[16 * v96];
        unsigned int v105 = &v99[16 * v98];
        *(_DWORD *)unint64_t v100 = v95;
        v100[1] = v51;
        uint64_t v28 = v100 + 2;
        if (v69 == v19) {
          goto LABEL_154;
        }
        do
        {
          *((_OWORD *)v100 - 1) = *((_OWORD *)v69 - 1);
          v100 -= 2;
          v69 -= 2;
        }
        while (v69 != v19);
      }
      else
      {
        if (v35 >= (double *)v105)
        {
          uint64_t v71 = ((char *)v35 - (char *)v19) >> 4;
          unint64_t v72 = v71 + 1;
          if ((unint64_t)(v71 + 1) >> 60) {
            abort();
          }
          if ((v105 - (char *)v19) >> 3 > v72) {
            unint64_t v72 = (v105 - (char *)v19) >> 3;
          }
          if ((unint64_t)(v105 - (char *)v19) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v73 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v73 = v72;
          }
          if (v73)
          {
            if (v73 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unint64_t v74 = (char *)operator new(16 * v73);
          }
          else
          {
            unint64_t v74 = 0;
          }
          uint64_t v87 = (double *)&v74[16 * v71];
          unint64_t v68 = (double *)&v74[16 * v73];
          *(_DWORD *)uint64_t v87 = v41;
          v87[1] = v51;
          unint64_t v67 = v87 + 2;
          if (v35 == v19) {
            goto LABEL_109;
          }
          do
          {
            *((_OWORD *)v87 - 1) = *((_OWORD *)v35 - 1);
            v87 -= 2;
            v35 -= 2;
          }
          while (v35 != v19);
          if (v19) {
LABEL_109:
          }
            operator delete(v19);
          int v19 = v87;
          int v11 = a1;
        }
        else
        {
          *((_DWORD *)v28 - 4) = v41;
          *(v28 - 1) = v51;
          unint64_t v67 = v28;
          unint64_t v68 = (double *)v105;
        }
        int v88 = *v39;
        if (v67 < v68)
        {
          unsigned int v105 = (char *)v68;
          *(_DWORD *)unint64_t v67 = v88;
          v67[1] = v47;
          uint64_t v28 = v67 + 2;
          goto LABEL_113;
        }
        uint64_t v89 = ((char *)v67 - (char *)v19) >> 4;
        unint64_t v90 = v89 + 1;
        if ((unint64_t)(v89 + 1) >> 60) {
          abort();
        }
        if (v68 - v19 > v90) {
          unint64_t v90 = v68 - v19;
        }
        if ((unint64_t)((char *)v68 - (char *)v19) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v91 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v91 = v90;
        }
        if (v91)
        {
          if (v91 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v92 = (char *)operator new(16 * v91);
        }
        else
        {
          uint64_t v92 = 0;
        }
        unint64_t v100 = (double *)&v92[16 * v89];
        unsigned int v105 = &v92[16 * v91];
        *(_DWORD *)unint64_t v100 = v88;
        v100[1] = v47;
        uint64_t v28 = v100 + 2;
        if (v67 == v19) {
          goto LABEL_154;
        }
        do
        {
          *((_OWORD *)v100 - 1) = *((_OWORD *)v67 - 1);
          v100 -= 2;
          v67 -= 2;
        }
        while (v67 != v19);
      }
      if (!v19)
      {
LABEL_155:
        int v19 = v100;
        int v11 = a1;
        unsigned int v29 = v107;
        continue;
      }
LABEL_154:
      operator delete(v19);
      goto LABEL_155;
    }
    if (v47 < v34)
    {
      unsigned int v29 = v107;
      if (v35 < (double *)v105)
      {
        *((_DWORD *)v28 - 4) = v38;
        *(v28 - 1) = v47;
        continue;
      }
      uint64_t v75 = ((char *)v35 - (char *)v19) >> 4;
      unint64_t v76 = v75 + 1;
      if ((unint64_t)(v75 + 1) >> 60) {
        abort();
      }
      if ((v105 - (char *)v19) >> 3 > v76) {
        unint64_t v76 = (v105 - (char *)v19) >> 3;
      }
      if ((unint64_t)(v105 - (char *)v19) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v77 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v77 = v76;
      }
      if (v77)
      {
        if (v77 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v78 = (char *)operator new(16 * v77);
      }
      else
      {
        unint64_t v78 = 0;
      }
      unint64_t v93 = (double *)&v78[16 * v75];
      unsigned int v105 = &v78[16 * v77];
      *(_DWORD *)unint64_t v93 = v38;
      v93[1] = v47;
      uint64_t v28 = v93 + 2;
      if (v35 == v19)
      {
        unsigned int v29 = v107;
      }
      else
      {
        unsigned int v29 = v107;
        do
        {
          *((_OWORD *)v93 - 1) = *((_OWORD *)v35 - 1);
          v93 -= 2;
          v35 -= 2;
        }
        while (v35 != v19);
        if (!v19) {
          goto LABEL_160;
        }
      }
      operator delete(v19);
LABEL_160:
      int v19 = v93;
LABEL_58:
      int v11 = a1;
      continue;
    }
    unsigned int v29 = v107;
    if (v51 >= v34) {
      goto LABEL_38;
    }
    if (v35 >= (double *)v105)
    {
      uint64_t v83 = ((char *)v35 - (char *)v19) >> 4;
      unint64_t v84 = v83 + 1;
      if ((unint64_t)(v83 + 1) >> 60) {
        abort();
      }
      if ((v105 - (char *)v19) >> 3 > v84) {
        unint64_t v84 = (v105 - (char *)v19) >> 3;
      }
      if ((unint64_t)(v105 - (char *)v19) >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v85 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v85 = v84;
      }
      if (v85)
      {
        if (v85 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v86 = (char *)operator new(16 * v85);
      }
      else
      {
        uint64_t v86 = 0;
      }
      uint64_t v101 = (double *)&v86[16 * v83];
      unsigned int v105 = &v86[16 * v85];
      *(_DWORD *)uint64_t v101 = v41;
      v101[1] = v51;
      uint64_t v28 = v101 + 2;
      if (v35 == v19)
      {
        unsigned int v29 = v107;
      }
      else
      {
        unsigned int v29 = v107;
        do
        {
          *((_OWORD *)v101 - 1) = *((_OWORD *)v35 - 1);
          v101 -= 2;
          v35 -= 2;
        }
        while (v35 != v19);
        if (!v19)
        {
LABEL_169:
          int v19 = v101;
          goto LABEL_58;
        }
      }
      operator delete(v19);
      goto LABEL_169;
    }
    *((_DWORD *)v28 - 4) = v41;
    *(v28 - 1) = v51;
  }
  while (v19 != v28);
  int8x16_t result = (int8x16_t)v109;
  unint64_t v21 = vextq_s8(result, result, 8uLL).u64[0];
  if (v28)
  {
    unint64_t v112 = v21;
    operator delete(v28);
    unint64_t v21 = v112;
    result.i64[0] = v109.i64[0];
  }
  a7 = v102;
  float64x2_t v13 = v108;
LABEL_173:
  result.i64[1] = v21;
  *(int8x16_t *)a7 = result;
  *(float64x2_t *)(a7 + 16) = v13;
  return result;
}

void sub_236E0C888(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t geom_triangle_mesh_bvh_raycast_3f(uint64_t a1, float *a2, unsigned int *a3, int32x4_t *a4, float32x4_t a5, __n128 a6)
{
  v22[4] = *MEMORY[0x263EF8340];
  uint64_t v21 = a1;
  int v19 = -1;
  int v20 = 2139095040;
  int32x4_t v18 = vdupq_n_s32(0x7FC00000u);
  uint64_t v17 = 0;
  int v10 = operator new(0x28uLL);
  void *v10 = &unk_26EA04C60;
  v10[1] = &v21;
  v10[2] = &v20;
  v10[3] = &v19;
  v10[4] = &v18;
  v22[3] = v10;
  if (a2) {
    int v11 = a2;
  }
  else {
    int v11 = (float *)&v17 + 1;
  }
  if (a3) {
    int v12 = a3;
  }
  else {
    int v12 = (unsigned int *)&v17;
  }
  uint64_t v13 = geom::bvh<float,(unsigned char)3>::raycast((void *)(a1 + 16), (uint64_t)v22, v11, v12, a5, a6);
  std::__function::__value_func<BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::~__value_func[abi:nn180100](v22);
  if (a4) {
    *a4 = v18;
  }
  return v13;
}

void sub_236E0C9E4(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::~__value_func[abi:nn180100]((void *)(v1 - 72));
  _Unwind_Resume(a1);
}

uint64_t geom_triangle_mesh_bvh_raycast_3d(uint64_t a1, long long *a2, double *a3, unsigned int *a4, int64x2_t *a5, double a6, __n128 a7)
{
  v29[4] = *MEMORY[0x263EF8340];
  uint64_t v27 = 0x7FF0000000000000;
  uint64_t v28 = a1;
  int v26 = -1;
  a7.n128_u64[0] = 0x7FF8000000000000;
  int64x2_t v24 = vdupq_n_s64(0x7FF8000000000000uLL);
  __n128 v25 = a7;
  uint64_t v23 = 0;
  int v22 = 0;
  int v12 = operator new(0x28uLL);
  *int v12 = &unk_26EA04CE0;
  v12[1] = &v28;
  v12[2] = &v27;
  v12[3] = &v26;
  v12[4] = &v24;
  v29[3] = v12;
  long long v13 = a2[1];
  v21[0] = *a2;
  v21[1] = v13;
  long long v14 = a2[2];
  __n128 v15 = (__n128)a2[3];
  if (a3) {
    unint64_t v16 = a3;
  }
  else {
    unint64_t v16 = (double *)&v23;
  }
  if (a4) {
    uint64_t v17 = a4;
  }
  else {
    uint64_t v17 = (unsigned int *)&v22;
  }
  v21[2] = a2[2];
  v21[3] = (__int128)v15;
  uint64_t v18 = geom::bvh<double,(unsigned char)3>::raycast((void *)(a1 + 16), (uint64_t)v29, v21, v16, v17, *(double *)&v14, v15);
  std::__function::__value_func<BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::~__value_func[abi:nn180100](v29);
  if (a5)
  {
    __n128 v19 = v25;
    *a5 = v24;
    a5[1] = (int64x2_t)v19;
  }
  return v18;
}

void sub_236E0CB28(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::~__value_func[abi:nn180100]((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

double geom_triangle_mesh_bvh_closest_point_3f(void *a1, float *a2, unsigned int *a3, float32x4_t *a4, float32x4_t a5)
{
  long long v7 = a2;
  float32x4_t v8 = a5;
  uint64_t v9 = a1[18];
  uint64_t v10 = a1[21];
  v11.i64[0] = vdupq_n_s32(0x7FC00000u).u64[0];
  if (a1[7] == a1[6] || (unint64_t v12 = a1[4] - a1[3]) == 0)
  {
    unsigned int v27 = -1;
    float v28 = INFINITY;
    if (!a2) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  uint64_t v13 = a1[15];
  v274 = 0;
  v275 = 0;
  int v276 = 0;
  _ZNSt3__16vectorIZNK4geom3bvhIfLh3EE13closest_pointIN12_GLOBAL__N_130triangle_closest_point_functorIfEEEEDv3_fT_S8_RfRjE5stateNS_9allocatorISC_EEE7reserveEm((uint64_t)&v274, 31 - __clz(v12 >> 6));
  __n128 v15 = (float32x4_t *)a1[3];
  float32x4_t v8 = a5;
  float32x4_t v16 = a5;
  v16.i32[3] = 0;
  float32x4_t v18 = v15[2];
  float32x4_t v17 = v15[3];
  v17.i32[3] = 0;
  float32x4_t v257 = v16;
  float32x4_t v19 = vminnmq_f32(v16, v17);
  v19.i32[3] = 0;
  v18.i32[3] = 0;
  float32x4_t v20 = vsubq_f32(vmaxnmq_f32(v19, v18), a5);
  float32x4_t v21 = vmulq_f32(v20, v20);
  unsigned __int32 v22 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).u32[0];
  uint64_t v23 = (char *)v275;
  int64x2_t v24 = a1;
  std::vector<int>::pointer v258 = a1;
  uint64_t v246 = v9;
  unint64_t v247 = a4;
  int64_t v244 = a3;
  uint64_t v245 = v10;
  if (v275 >= (float *)v276)
  {
    uint64_t v39 = v274;
    uint64_t v40 = ((char *)v275 - v274) >> 3;
    unint64_t v41 = v40 + 1;
    if ((unint64_t)(v40 + 1) >> 61) {
      abort();
    }
    uint64_t v42 = v276 - v274;
    if ((v276 - v274) >> 2 > v41) {
      unint64_t v41 = v42 >> 2;
    }
    if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v43 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v43 = v41;
    }
    if (v43)
    {
      unsigned __int32 v266 = v22;
      if (v43 >> 61) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v44 = (char *)operator new(8 * v43);
      float32x4_t v8 = a5;
      int64x2_t v24 = v258;
      unsigned __int32 v22 = v266;
    }
    else
    {
      uint64_t v44 = 0;
    }
    int v26 = (float *)&v44[8 * v40];
    *int v26 = 0.0;
    *((_DWORD *)v26 + 1) = v22;
    __n128 v25 = v26 + 2;
    if (v23 != v39)
    {
      do
      {
        uint64_t v52 = *((void *)v23 - 1);
        v23 -= 8;
        *((void *)v26 - 1) = v52;
        v26 -= 2;
      }
      while (v23 != v39);
      uint64_t v23 = v274;
    }
    v274 = (char *)v26;
    int v276 = &v44[8 * v43];
    if (v23)
    {
      operator delete(v23);
      int64x2_t v24 = v258;
      float32x4_t v8 = a5;
    }
  }
  else
  {
    float *v275 = 0.0;
    *((_DWORD *)v23 + 1) = v22;
    __n128 v25 = (float *)(v23 + 8);
    int v26 = (float *)v274;
  }
  unint64_t v271 = 0;
  uint64_t v272 = 0;
  uint64_t v273 = 0;
  if (v26 == v25)
  {
    v11.i64[0] = vdupq_n_s32(0x7FC00000u).u64[0];
    unsigned int v27 = -1;
    float v28 = INFINITY;
    long long v7 = a2;
    goto LABEL_199;
  }
  int32x4_t v260 = vdupq_lane_s32(*(int32x2_t *)v8.f32, 0);
  int32x4_t v11 = vdupq_n_s32(0x7FC00000u);
  unsigned int v27 = -1;
  float v28 = INFINITY;
  float32x4_t v265 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1);
  float32x4_t v267 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2);
  uint64_t v53 = v26;
  do
  {
    uint64_t v55 = v25 - 2;
    uint64_t v54 = *((unsigned int *)v25 - 2);
    float v56 = *(v25 - 1);
    v275 = v25 - 2;
    if (v28 <= v56)
    {
LABEL_87:
      __n128 v25 = v55;
      goto LABEL_194;
    }
    uint64_t v57 = v24[3];
    uint64_t v58 = (unsigned int *)(v57 + (v54 << 6));
    double v59 = (int *)(v58 + 1);
    uint64_t v60 = v58[1];
    float64x2_t v62 = (int *)(v58 + 2);
    uint64_t v61 = v58[2];
    if (v58[1] == -1 && v61 == -1)
    {
      int32x4_t v261 = v11;
      unsigned int v81 = v58[3];
      uint64_t v79 = v58 + 3;
      uint64_t v80 = v81;
      uint64_t v82 = v24[6];
      unsigned int v83 = v79[1];
      unint64_t v84 = v83 + v81 - (unint64_t)v81;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v271, v84);
      unint64_t v85 = *v79;
      unint64_t v86 = v79[1] + v85;
      float32x4_t v87 = (float32x4_t)v260;
      float32x4_t v89 = v265;
      float32x4_t v88 = v267;
      if (v85 >> 2 < (v86 + 3) >> 2)
      {
        unint64_t v90 = v271;
        unint64_t v91 = v85 >> 2;
        uint64_t v92 = 4 * (v85 >> 2);
        while (1)
        {
          unint64_t v93 = (float32x4_t *)(v13 + 144 * v91);
          float32x4_t v94 = *v93;
          float32x4_t v95 = v93[1];
          float32x4_t v96 = v93[2];
          float32x4_t v97 = v93[3];
          float32x4_t v98 = vsubq_f32(v97, *v93);
          float32x4_t v100 = v93[4];
          float32x4_t v99 = v93[5];
          float32x4_t v101 = vsubq_f32(v100, v95);
          float32x4_t v102 = vsubq_f32(v99, v96);
          float32x4_t v103 = v93[6];
          float32x4_t v104 = v93[7];
          float32x4_t v105 = vsubq_f32(v103, *v93);
          float32x4_t v106 = vsubq_f32(v104, v95);
          float32x4_t v107 = v93[8];
          float32x4_t v108 = vsubq_f32(v107, v96);
          float32x4_t v109 = vsubq_f32(v87, *v93);
          float32x4_t v110 = vsubq_f32(v89, v95);
          float32x4_t v111 = vsubq_f32(v88, v96);
          float32x4_t v112 = vmlaq_f32(vmlaq_f32(vmulq_f32(v101, v110), v109, v98), v111, v102);
          float32x4_t v113 = vmlaq_f32(vmlaq_f32(vmulq_f32(v110, v106), v109, v105), v111, v108);
          int32x4_t v114 = (int32x4_t)vandq_s8((int8x16_t)vclezq_f32(v113), (int8x16_t)vclezq_f32(v112));
          if ((vminvq_u32((uint32x4_t)v114) & 0x80000000) != 0)
          {
            int8x16_t v125 = (int8x16_t)v93[2];
            goto LABEL_71;
          }
          int8x8_t v115 = (int8x8_t)vmovn_s32(v114);
          float32x4_t v116 = vsubq_f32(v88, v99);
          float32x4_t v117 = vsubq_f32(v89, v100);
          float32x4_t v118 = vsubq_f32(v87, v97);
          float32x4_t v119 = vmlaq_f32(vmlaq_f32(vmulq_f32(v117, v101), v118, v98), v116, v102);
          float32x4_t v120 = vmlaq_f32(vmlaq_f32(vmulq_f32(v117, v106), v118, v105), v116, v108);
          int8x8_t v121 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgeq_f32(v119, v120), (int8x16_t)vcgezq_f32(v119)));
          int8x16_t v122 = (int8x16_t)vmovl_s16((int16x4_t)vbic_s8(v121, v115));
          int8x16_t v123 = vbslq_s8(v122, (int8x16_t)v97, (int8x16_t)v94);
          int8x16_t v124 = vbslq_s8(v122, (int8x16_t)v100, (int8x16_t)v95);
          int8x16_t v125 = vbslq_s8(v122, (int8x16_t)v99, (int8x16_t)v96);
          int16x4_t v126 = (int16x4_t)vorr_s8(v115, v121);
          if ((vminvq_u32((uint32x4_t)vmovl_s16(v126)) & 0x80000000) != 0)
          {
            float32x4_t v94 = (float32x4_t)v123;
            float32x4_t v95 = (float32x4_t)v124;
            goto LABEL_71;
          }
          float32x4_t v127 = vmlaq_f32(vmulq_f32(v113, vnegq_f32(v119)), v120, v112);
          float32x4_t v128 = vsubq_f32(v112, v119);
          int8x8_t v129 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vbicq_s8(vandq_s8((int8x16_t)vclezq_f32(v119), (int8x16_t)vcgezq_f32(v112)), (int8x16_t)vceqzq_f32(v128)), (int8x16_t)vclezq_f32(v127)));
          float32x4_t v130 = vdivq_f32(v112, v128);
          int8x16_t v131 = (int8x16_t)vaddq_f32(v96, vmulq_f32(v102, v130));
          int8x16_t v132 = (int8x16_t)vmovl_s16((int16x4_t)vbic_s8(v129, (int8x8_t)v126));
          int8x16_t v133 = vbslq_s8(v132, (int8x16_t)vaddq_f32(vmulq_f32(v98, v130), v94), v123);
          int8x16_t v134 = vbslq_s8(v132, (int8x16_t)vaddq_f32(v95, vmulq_f32(v101, v130)), v124);
          int8x16_t v125 = vbslq_s8(v132, v131, v125);
          int16x4_t v135 = (int16x4_t)vorr_s8(v129, (int8x8_t)v126);
          if ((vminvq_u32((uint32x4_t)vmovl_s16(v135)) & 0x80000000) != 0) {
            break;
          }
          float32x4_t v136 = vsubq_f32(v87, v103);
          float32x4_t v89 = v265;
          float32x4_t v137 = vsubq_f32(v265, v104);
          float32x4_t v138 = vsubq_f32(v267, v107);
          float32x4_t v139 = vmlaq_f32(vmlaq_f32(vmulq_f32(v101, v137), v136, v98), v138, v102);
          float32x4_t v140 = vmlaq_f32(vmlaq_f32(vmulq_f32(v106, v137), v136, v105), v138, v108);
          *(int16x4_t *)v138.f32 = vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vcgezq_f32(v140), (int8x16_t)vcgeq_f32(v140, v139)));
          int8x16_t v141 = (int8x16_t)vmovl_s16((int16x4_t)vbic_s8(*(int8x8_t *)v138.f32, (int8x8_t)v135));
          int8x16_t v142 = vbslq_s8(v141, (int8x16_t)v103, v133);
          int8x16_t v143 = vbslq_s8(v141, (int8x16_t)v104, v134);
          int8x16_t v125 = vbslq_s8(v141, (int8x16_t)v107, v125);
          int16x4_t v144 = (int16x4_t)vorr_s8((int8x8_t)v135, *(int8x8_t *)v138.f32);
          if ((vminvq_u32((uint32x4_t)vmovl_s16(v144)) & 0x80000000) == 0)
          {
            float32x4_t v145 = vmlaq_f32(vmulq_f32(v140, vnegq_f32(v112)), v113, v139);
            int8x8_t v146 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vbicq_s8(vandq_s8((int8x16_t)vclezq_f32(v140), (int8x16_t)vcgezq_f32(v113)), (int8x16_t)vceqq_f32(v113, v140)), (int8x16_t)vclezq_f32(v145)));
            float32x4_t v147 = vdivq_f32(v113, vsubq_f32(v113, v140));
            int8x16_t v148 = (int8x16_t)vaddq_f32(v96, vmulq_f32(v108, v147));
            int8x16_t v149 = (int8x16_t)vmovl_s16((int16x4_t)vbic_s8(v146, (int8x8_t)v144));
            int8x16_t v150 = vbslq_s8(v149, (int8x16_t)vaddq_f32(vmulq_f32(v105, v147), v94), v142);
            int8x16_t v151 = vbslq_s8(v149, (int8x16_t)vaddq_f32(v95, vmulq_f32(v106, v147)), v143);
            int8x16_t v125 = vbslq_s8(v149, v148, v125);
            int16x4_t v152 = (int16x4_t)vorr_s8((int8x8_t)v144, v146);
            if ((vminvq_u32((uint32x4_t)vmovl_s16(v152)) & 0x80000000) != 0)
            {
              float32x4_t v94 = (float32x4_t)v150;
              float32x4_t v95 = (float32x4_t)v151;
            }
            else
            {
              float32x4_t v153 = vsubq_f32(v103, v97);
              float32x4_t v154 = vmlaq_f32(vmulq_f32(v120, vnegq_f32(v139)), v140, v119);
              float32x4_t v155 = vsubq_f32(v120, v119);
              float32x4_t v156 = vsubq_f32(v139, v140);
              int8x8_t v157 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vcgezq_f32(v156), (int8x16_t)vcgezq_f32(v155)), (int8x16_t)vclezq_f32(v154)));
              float32x4_t v158 = vdivq_f32(v155, vaddq_f32(v155, v156));
              int8x16_t v159 = (int8x16_t)vaddq_f32(vmulq_f32(vsubq_f32(v104, v100), v158), v100);
              int8x16_t v160 = (int8x16_t)vaddq_f32(vmulq_f32(vsubq_f32(v107, v99), v158), v99);
              int8x16_t v161 = (int8x16_t)vmovl_s16((int16x4_t)vbic_s8(v157, (int8x8_t)v152));
              int8x16_t v162 = vbslq_s8(v161, (int8x16_t)vaddq_f32(vmulq_f32(v153, v158), v97), v150);
              int8x16_t v163 = vbslq_s8(v161, v159, v151);
              int8x16_t v125 = vbslq_s8(v161, v160, v125);
              int8x16_t v164 = (int8x16_t)vmovl_s16((int16x4_t)vorr_s8((int8x8_t)v152, v157));
              if ((vminvq_u32((uint32x4_t)v164) & 0x80000000) != 0)
              {
                float32x4_t v94 = (float32x4_t)v162;
                float32x4_t v95 = (float32x4_t)v163;
              }
              else
              {
                __asm { FMOV            V22.4S, #1.0 }
                float32x4_t v167 = vdivq_f32(_Q22, vaddq_f32(v127, vaddq_f32(v154, v145)));
                float32x4_t v168 = vmulq_f32(v145, v167);
                float32x4_t v169 = vmulq_f32(v127, v167);
                float32x4_t v94 = (float32x4_t)vbslq_s8(v164, v162, (int8x16_t)vaddq_f32(vmulq_f32(v105, v169), vaddq_f32(vmulq_f32(v98, v168), v94)));
                float32x4_t v95 = (float32x4_t)vbslq_s8(v164, v163, (int8x16_t)vaddq_f32(vmulq_f32(v106, v169), vaddq_f32(v95, vmulq_f32(v101, v168))));
                int8x16_t v125 = vorrq_s8(vandq_s8(v125, v164), vbicq_s8((int8x16_t)vaddq_f32(vmulq_f32(v108, v169), vaddq_f32(v96, vmulq_f32(v102, v168))), v164));
              }
            }
            float32x4_t v87 = (float32x4_t)v260;
            goto LABEL_69;
          }
          float32x4_t v94 = (float32x4_t)v142;
          float32x4_t v95 = (float32x4_t)v143;
LABEL_70:
          float32x4_t v88 = v267;
LABEL_71:
          uint64_t v170 = 0;
          uint64_t v171 = v92 & 0xFFFFFFFC;
          do
          {
            if (v171 + v170 >= v85 && v171 + v170 < v86)
            {
              long long v173 = &v90[(v92 & 0xFFFFFFFC) - v85 + v170];
              float32x4_t v268 = v94;
              LODWORD(v174) = *(_DWORD *)((unint64_t)&v268 & 0xFFFFFFFFFFFFFFF3 | (4 * (v170 & 3)));
              float32x4_t v269 = v95;
              int8x16_t v270 = v125;
              HIDWORD(v174) = *(_DWORD *)((unint64_t)&v269 & 0xFFFFFFFFFFFFFFF3 | (4 * (v170 & 3)));
              v173->i32[2] = *(_DWORD *)((unint64_t)&v270 & 0xFFFFFFFFFFFFFFF3 | (4 * (v170 & 3)));
              v173->i64[0] = v174;
            }
            ++v170;
          }
          while (v170 != 4);
          ++v91;
          LODWORD(v92) = v92 + 4;
          if (v91 == (v86 + 3) >> 2) {
            goto LABEL_79;
          }
        }
        float32x4_t v94 = (float32x4_t)v133;
        float32x4_t v95 = (float32x4_t)v134;
LABEL_69:
        float32x4_t v89 = v265;
        goto LABEL_70;
      }
LABEL_79:
      float32x4_t v8 = a5;
      int32x4_t v11 = v261;
      if (!v83)
      {
        __n128 v25 = v55;
        int64x2_t v24 = v258;
        goto LABEL_194;
      }
      uint64_t v175 = 0;
      uint64_t v176 = v82 + 4 * v80;
      int64x2_t v24 = v258;
      while (1)
      {
        float32x4_t v177 = vsubq_f32(a5, v271[v175]);
        float32x4_t v178 = vmulq_f32(v177, v177);
        float v179 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v178, 2), vaddq_f32(v178, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v178.f32, 1))).f32[0];
        if (v179 >= v28)
        {
          if (v179 != v28) {
            goto LABEL_86;
          }
          unsigned int v180 = *(_DWORD *)(v176 + 4 * v175);
          if (v180 >= v27) {
            goto LABEL_86;
          }
        }
        else
        {
          unsigned int v180 = *(_DWORD *)(v176 + 4 * v175);
        }
        unsigned int v27 = v180;
        float v28 = v179;
        int32x4_t v11 = (int32x4_t)v271[v175];
LABEL_86:
        if (v84 <= ++v175) {
          goto LABEL_87;
        }
      }
    }
    double v64 = (float32x4_t *)(v57 + (v60 << 6));
    float32x4_t v66 = v64[2];
    float32x4_t v65 = v64[3];
    v65.i32[3] = 0;
    float32x4_t v67 = vminnmq_f32(v257, v65);
    v67.i32[3] = 0;
    v66.i32[3] = 0;
    float32x4_t v68 = vsubq_f32(vmaxnmq_f32(v67, v66), v8);
    float32x4_t v69 = vmulq_f32(v68, v68);
    unint64_t v70 = (float32x4_t *)(v57 + (v61 << 6));
    float32x4_t v72 = v70[2];
    float32x4_t v71 = v70[3];
    v71.i32[3] = 0;
    float32x4_t v73 = vminnmq_f32(v257, v71);
    v73.i32[3] = 0;
    v72.i32[3] = 0;
    float32x4_t v74 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1)));
    float32x4_t v75 = vsubq_f32(vmaxnmq_f32(v73, v72), v8);
    float32x4_t v76 = vmulq_f32(v75, v75);
    float32x4_t v77 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1)));
    if (v74.f32[0] < v28 && v77.f32[0] < v28)
    {
      uint64_t v181 = v276;
      int32x4_t v262 = v11;
      if (vmovn_s32(vcgtq_f32(v77, v74)).u8[0])
      {
        if (v55 < (float *)v276)
        {
          *((_DWORD *)v25 - 2) = v61;
          *(v25 - 1) = v77.f32[0];
          goto LABEL_149;
        }
        uint64_t v183 = ((char *)v55 - (char *)v53) >> 3;
        unint64_t v184 = v183 + 1;
        if ((unint64_t)(v183 + 1) >> 61) {
          abort();
        }
        uint64_t v185 = v276 - (char *)v53;
        if ((v276 - (char *)v53) >> 2 > v184) {
          unint64_t v184 = v185 >> 2;
        }
        if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v186 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v186 = v184;
        }
        __int32 v253 = v74.i32[0];
        if (v186)
        {
          __int32 v249 = v77.i32[0];
          if (v186 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v187 = (char *)operator new(8 * v186);
          float32x4_t v8 = a5;
          int32x4_t v11 = v262;
          int64x2_t v24 = v258;
          v77.i32[0] = v249;
          v74.i32[0] = v253;
        }
        else
        {
          uint64_t v187 = 0;
        }
        uint64_t v203 = &v187[8 * v183];
        uint64_t v181 = &v187[8 * v186];
        *(_DWORD *)uint64_t v203 = v61;
        *((_DWORD *)v203 + 1) = v77.i32[0];
        __n128 v25 = (float *)(v203 + 8);
        if (v55 == v53)
        {
          v274 = &v187[8 * v183];
          v275 = (float *)(v203 + 8);
          int v276 = &v187[8 * v186];
        }
        else
        {
          do
          {
            uint64_t v204 = *((void *)v55 - 1);
            v55 -= 2;
            *((void *)v203 - 1) = v204;
            v203 -= 8;
          }
          while (v55 != v53);
          uint64_t v53 = (float *)v274;
          v274 = v203;
          v275 = v25;
          int v276 = &v187[8 * v186];
          if (!v53)
          {
LABEL_149:
            v275 = v25;
            int v210 = *v59;
            if (v25 < (float *)v181)
            {
              *(_DWORD *)__n128 v25 = v210;
              v25[1] = v74.f32[0];
LABEL_168:
              int v182 = v25 + 2;
              goto LABEL_193;
            }
            unsigned int v211 = (float *)v274;
            uint64_t v212 = ((char *)v25 - v274) >> 3;
            unint64_t v213 = v212 + 1;
            if ((unint64_t)(v212 + 1) >> 61) {
              abort();
            }
            uint64_t v214 = v181 - v274;
            if (v214 >> 2 > v213) {
              unint64_t v213 = v214 >> 2;
            }
            if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v215 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v215 = v213;
            }
            if (v215)
            {
              __int32 v256 = v74.i32[0];
              if (v215 >> 61) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              float64x2_t v216 = (char *)operator new(8 * v215);
              float32x4_t v8 = a5;
              int32x4_t v11 = v262;
              int64x2_t v24 = v258;
              v74.i32[0] = v256;
            }
            else
            {
              float64x2_t v216 = 0;
            }
            float64x2_t v217 = &v216[8 * v212];
            uint64_t v218 = &v216[8 * v215];
            *(_DWORD *)float64x2_t v217 = v210;
            *((_DWORD *)v217 + 1) = v74.i32[0];
            int v182 = (float *)(v217 + 8);
            if (v25 != v211)
            {
              do
              {
                uint64_t v219 = *((void *)v25 - 1);
                v25 -= 2;
                *((void *)v217 - 1) = v219;
                v217 -= 8;
              }
              while (v25 != v211);
              goto LABEL_181;
            }
            goto LABEL_183;
          }
        }
        operator delete(v53);
        v74.i32[0] = v253;
        int64x2_t v24 = v258;
        int32x4_t v11 = v262;
        float32x4_t v8 = a5;
        uint64_t v181 = v276;
        goto LABEL_149;
      }
      if (v55 < (float *)v276)
      {
        *((_DWORD *)v25 - 2) = v60;
        *(v25 - 1) = v74.f32[0];
        goto LABEL_166;
      }
      uint64_t v193 = ((char *)v55 - (char *)v53) >> 3;
      unint64_t v194 = v193 + 1;
      if ((unint64_t)(v193 + 1) >> 61) {
        abort();
      }
      uint64_t v195 = v276 - (char *)v53;
      if ((v276 - (char *)v53) >> 2 > v194) {
        unint64_t v194 = v195 >> 2;
      }
      if ((unint64_t)v195 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v196 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v196 = v194;
      }
      __int32 v250 = v77.i32[0];
      if (v196)
      {
        __int32 v255 = v74.i32[0];
        if (v196 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        int64_t v197 = (char *)operator new(8 * v196);
        float32x4_t v8 = a5;
        int32x4_t v11 = v262;
        int64x2_t v24 = v258;
        v77.i32[0] = v250;
        v74.i32[0] = v255;
      }
      else
      {
        int64_t v197 = 0;
      }
      double v208 = &v197[8 * v193];
      uint64_t v181 = &v197[8 * v196];
      *(_DWORD *)double v208 = v60;
      *((_DWORD *)v208 + 1) = v74.i32[0];
      __n128 v25 = (float *)(v208 + 8);
      if (v55 == v53)
      {
        v274 = &v197[8 * v193];
        v275 = (float *)(v208 + 8);
        int v276 = &v197[8 * v196];
      }
      else
      {
        do
        {
          uint64_t v209 = *((void *)v55 - 1);
          v55 -= 2;
          *((void *)v208 - 1) = v209;
          v208 -= 8;
        }
        while (v55 != v53);
        uint64_t v53 = (float *)v274;
        v274 = v208;
        v275 = v25;
        int v276 = &v197[8 * v196];
        if (!v53)
        {
LABEL_166:
          v275 = v25;
          int v220 = *v62;
          if (v25 < (float *)v181)
          {
            *(_DWORD *)__n128 v25 = v220;
            v25[1] = v77.f32[0];
            goto LABEL_168;
          }
          uint64_t v221 = (float *)v274;
          uint64_t v222 = ((char *)v25 - v274) >> 3;
          unint64_t v223 = v222 + 1;
          if ((unint64_t)(v222 + 1) >> 61) {
            abort();
          }
          uint64_t v224 = v181 - v274;
          if (v224 >> 2 > v223) {
            unint64_t v223 = v224 >> 2;
          }
          if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v225 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v225 = v223;
          }
          if (v225)
          {
            __int32 v252 = v77.i32[0];
            if (v225 >> 61) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            v226 = (char *)operator new(8 * v225);
            float32x4_t v8 = a5;
            int32x4_t v11 = v262;
            int64x2_t v24 = v258;
            v77.i32[0] = v252;
          }
          else
          {
            v226 = 0;
          }
          float64x2_t v217 = &v226[8 * v222];
          uint64_t v218 = &v226[8 * v225];
          *(_DWORD *)float64x2_t v217 = v220;
          *((_DWORD *)v217 + 1) = v77.i32[0];
          int v182 = (float *)(v217 + 8);
          if (v25 != v221)
          {
            do
            {
              uint64_t v227 = *((void *)v25 - 1);
              v25 -= 2;
              *((void *)v217 - 1) = v227;
              v217 -= 8;
            }
            while (v25 != v221);
LABEL_181:
            __n128 v25 = (float *)v274;
            v274 = v217;
            v275 = v182;
            int v276 = v218;
            if (!v25) {
              goto LABEL_193;
            }
            goto LABEL_184;
          }
LABEL_183:
          v274 = v217;
          v275 = v182;
          int v276 = v218;
LABEL_184:
          unint64_t v228 = v25;
LABEL_192:
          operator delete(v228);
          int64x2_t v24 = v258;
          int32x4_t v11 = v262;
          float32x4_t v8 = a5;
          goto LABEL_193;
        }
      }
      operator delete(v53);
      v77.i32[0] = v250;
      int64x2_t v24 = v258;
      int32x4_t v11 = v262;
      float32x4_t v8 = a5;
      uint64_t v181 = v276;
      goto LABEL_166;
    }
    if (v74.f32[0] < v28)
    {
      if (v55 < (float *)v276)
      {
        *((_DWORD *)v25 - 2) = v60;
        *(v25 - 1) = v74.f32[0];
        goto LABEL_94;
      }
      uint64_t v188 = ((char *)v55 - (char *)v53) >> 3;
      unint64_t v189 = v188 + 1;
      if ((unint64_t)(v188 + 1) >> 61) {
        abort();
      }
      uint64_t v190 = v276 - (char *)v53;
      if ((v276 - (char *)v53) >> 2 > v189) {
        unint64_t v189 = v190 >> 2;
      }
      if ((unint64_t)v190 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v191 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v191 = v189;
      }
      int32x4_t v262 = v11;
      if (v191)
      {
        __int32 v254 = v74.i32[0];
        if (v191 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v192 = (char *)operator new(8 * v191);
        float32x4_t v8 = a5;
        int32x4_t v11 = v262;
        int64x2_t v24 = v258;
        v74.i32[0] = v254;
      }
      else
      {
        unint64_t v192 = 0;
      }
      double v205 = &v192[8 * v188];
      double v206 = &v192[8 * v191];
      *(_DWORD *)double v205 = v60;
      *((_DWORD *)v205 + 1) = v74.i32[0];
      int v182 = (float *)(v205 + 8);
      if (v55 != v53)
      {
        do
        {
          uint64_t v207 = *((void *)v55 - 1);
          v55 -= 2;
          *((void *)v205 - 1) = v207;
          v205 -= 8;
        }
        while (v55 != v53);
LABEL_188:
        uint64_t v53 = (float *)v274;
        v274 = v205;
        v275 = v182;
        int v276 = v206;
        if (!v53) {
          goto LABEL_193;
        }
        goto LABEL_191;
      }
LABEL_190:
      v274 = v205;
      v275 = v182;
      int v276 = v206;
LABEL_191:
      unint64_t v228 = v53;
      goto LABEL_192;
    }
    if (v77.f32[0] >= v28) {
      goto LABEL_87;
    }
    if (v55 >= (float *)v276)
    {
      uint64_t v198 = ((char *)v55 - (char *)v53) >> 3;
      unint64_t v199 = v198 + 1;
      if ((unint64_t)(v198 + 1) >> 61) {
        abort();
      }
      uint64_t v200 = v276 - (char *)v53;
      if ((v276 - (char *)v53) >> 2 > v199) {
        unint64_t v199 = v200 >> 2;
      }
      if ((unint64_t)v200 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v201 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v201 = v199;
      }
      int32x4_t v262 = v11;
      if (v201)
      {
        __int32 v251 = v77.i32[0];
        if (v201 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        float64x2_t v202 = (char *)operator new(8 * v201);
        float32x4_t v8 = a5;
        int32x4_t v11 = v262;
        int64x2_t v24 = v258;
        v77.i32[0] = v251;
      }
      else
      {
        float64x2_t v202 = 0;
      }
      double v205 = &v202[8 * v198];
      double v206 = &v202[8 * v201];
      *(_DWORD *)double v205 = v61;
      *((_DWORD *)v205 + 1) = v77.i32[0];
      int v182 = (float *)(v205 + 8);
      if (v55 != v53)
      {
        do
        {
          uint64_t v229 = *((void *)v55 - 1);
          v55 -= 2;
          *((void *)v205 - 1) = v229;
          v205 -= 8;
        }
        while (v55 != v53);
        goto LABEL_188;
      }
      goto LABEL_190;
    }
    *((_DWORD *)v25 - 2) = v61;
    *(v25 - 1) = v77.f32[0];
LABEL_94:
    int v182 = v25;
LABEL_193:
    v275 = v182;
    __n128 v25 = v182;
LABEL_194:
    uint64_t v53 = (float *)v274;
  }
  while (v274 != (char *)v25);
  long long v7 = a2;
  if (v271)
  {
    uint64_t v272 = v271;
    uint64_t v263 = v11.i64[0];
    operator delete(v271);
    v11.i64[0] = v263;
    float32x4_t v8 = a5;
  }
  int v26 = v25;
LABEL_199:
  uint64_t v9 = v246;
  a4 = v247;
  uint64_t v10 = v245;
  if (v26)
  {
    v275 = v26;
    uint64_t v264 = v11.i64[0];
    operator delete(v26);
    v11.i64[0] = v264;
    float32x4_t v8 = a5;
  }
  a3 = v244;
  if (v7) {
LABEL_6:
  }
    *long long v7 = v28;
LABEL_7:
  if (a3) {
    *a3 = v27;
  }
  if (a4)
  {
    if (v27 == -1)
    {
      float32x4_t v38 = (float32x4_t)vdupq_n_s32(0x7FC00000u);
      goto LABEL_216;
    }
    float32x4_t v29 = *(float32x4_t *)(v9 + 16 * *(unsigned int *)(v10 + 12 * v27));
    float32x4_t v30 = *(float32x4_t *)(v9 + 16 * *(unsigned int *)(v10 + 4 * (3 * v27 + 1)));
    float32x4_t v31 = *(float32x4_t *)(v9 + 16 * *(unsigned int *)(v10 + 4 * (3 * v27 + 2)));
    float32x4_t v32 = vsubq_f32(v30, v29);
    float32x4_t v33 = vsubq_f32(v31, v29);
    float32x4_t v34 = vsubq_f32(v8, v29);
    float32x4_t v35 = vmulq_f32(v34, v32);
    float32x4_t v36 = vmulq_f32(v34, v33);
    float32x4_t v37 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)));
    float32x4_t v38 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1)));
    if (v37.f32[0] <= 0.0 && v38.f32[0] <= 0.0)
    {
      float32x4_t v38 = (float32x4_t)xmmword_236F14120;
      goto LABEL_216;
    }
    float32x4_t v45 = vsubq_f32(v8, v30);
    float32x4_t v46 = vmulq_f32(v32, v45);
    float32x4_t v47 = vmulq_f32(v45, v33);
    float32x4_t v48 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1)));
    float32x4_t v49 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v47, 2), vaddq_f32(v47, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1)));
    if (v48.f32[0] >= 0.0 && (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v48, v49))).u8[0] & 1) == 0)
    {
      float32x4_t v38 = (float32x4_t)xmmword_236F14130;
      goto LABEL_216;
    }
    float v50 = (float)(v37.f32[0] * v49.f32[0]) - (float)(v48.f32[0] * v38.f32[0]);
    if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v37, v48))).u8[0] & 1) != 0
      && v48.f32[0] <= 0.0
      && v37.f32[0] >= 0.0
      && v50 <= 0.0)
    {
      int32x4_t v51 = (int32x4_t)vdivq_f32(v37, vsubq_f32(v37, v48));
      float32x4_t v38 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(1.0 - *(float *)v51.i32), v51);
      goto LABEL_216;
    }
    float32x4_t v230 = vsubq_f32(v8, v31);
    float32x4_t v231 = vmulq_f32(v32, v230);
    float32x4_t v232 = vmulq_f32(v33, v230);
    float32x4_t v233 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v231, 2), vaddq_f32(v231, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v231.f32, 1)));
    float32x4_t v234 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v232, 2), vaddq_f32(v232, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v232.f32, 1)));
    if (v234.f32[0] >= 0.0 && (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v234, v233))).u8[0] & 1) == 0)
    {
      float32x4_t v38 = (float32x4_t)xmmword_236F14E40;
      goto LABEL_216;
    }
    float v235 = (float)(v233.f32[0] * v38.f32[0]) - (float)(v37.f32[0] * v234.f32[0]);
    if (v234.f32[0] <= 0.0
      && v235 <= 0.0
      && v38.f32[0] >= 0.0
      && (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v38, v234))).u8[0] & 1) != 0)
    {
      float v236 = vdivq_f32(v38, vsubq_f32(v38, v234)).f32[0];
      v38.i32[1] = 0;
      v38.i32[3] = 0;
      v38.f32[0] = 1.0 - v236;
      goto LABEL_211;
    }
    float v237 = (float)(v48.f32[0] * v234.f32[0]) - (float)(v233.f32[0] * v49.f32[0]);
    if (v237 <= 0.0
      && (float32x4_t v238 = vsubq_f32(v49, v48), v238.f32[0] >= 0.0)
      && (float32x4_t v239 = vsubq_f32(v233, v234), v239.f32[0] >= 0.0))
    {
      float v236 = vdivq_f32(v238, vaddq_f32(v238, v239)).f32[0];
      v38.i32[0] = 0;
      v38.i32[3] = 0;
      v38.f32[1] = 1.0 - v236;
LABEL_211:
      v38.f32[2] = v236;
    }
    else
    {
      float v240 = 1.0 / (float)(v50 + (float)(v237 + v235));
      float32_t v241 = v235 * v240;
      float32_t v242 = v50 * v240;
      v38.f32[0] = (float)(1.0 - (float)(v235 * v240)) - v242;
      v38.f32[1] = v241;
      v38.f32[2] = v242;
    }
LABEL_216:
    *a4 = v38;
  }
  return *(double *)v11.i64;
}

void sub_236E0DB44(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v2 - 200);
  if (v4)
  {
    *(void *)(v2 - 192) = v4;
    operator delete(v4);
  }
  if (v1)
  {
    *(void *)(v2 - 168) = v1;
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void geom_triangle_mesh_bvh_closest_point_3d(void *a1@<X0>, _OWORD *a2@<X1>, double *a3@<X2>, int *a4@<X3>, int64x2_t *a5@<X4>, int64x2_t *a6@<X8>)
{
  uint64_t v9 = a3;
  int64x2_t v12 = *(int64x2_t *)a2;
  float64x2_t v11 = *((float64x2_t *)a2 + 1);
  uint64_t v13 = a1[18];
  uint64_t v14 = a1[21];
  int64x2_t v15 = vdupq_n_s64(0x7FF8000000000000uLL);
  __asm { FMOV            V20.2D, #1.0 }
  if (a1[7] == a1[6] || (unint64_t v18 = a1[4] - a1[3]) == 0)
  {
    v6.f64[0] = NAN;
    int v28 = -1;
    double v29 = INFINITY;
    if (!a3) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
  float64x2_t v337 = *(float64x2_t *)a2;
  float64x2_t v338 = *((float64x2_t *)a2 + 1);
  float64x2_t v339 = _Q20;
  uint64_t v332 = a1[15];
  uint64_t v390 = 0;
  unsigned int v391 = 0;
  double v392 = 0;
  _ZNSt3__16vectorIZNK4geom3bvhIdLh3EE13closest_pointIN12_GLOBAL__N_130triangle_closest_point_functorIdEEEEDv3_dT_S8_RdRjE5stateNS_9allocatorISC_EEE7reserveEm((uint64_t)&v390, 31 - __clz(-1431655765 * (v18 >> 5)));
  uint64_t v328 = v9;
  unint64_t v329 = a4;
  uint64_t v20 = a1[3];
  int64x2_t v12 = (int64x2_t)v337;
  float64x2_t v11 = v338;
  float64x2_t v21 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v337, *(float64x2_t *)(v20 + 64)), *(float64x2_t *)(v20 + 32)), v337);
  float64x2_t v22 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v338.f64[0], (float64x2_t)*(unint64_t *)(v20 + 80)), (float64x2_t)*(unint64_t *)(v20 + 48)), v338);
  double v23 = vmulq_f64(v22, v22).f64[0] + vaddvq_f64(vmulq_f64(v21, v21));
  int64x2_t v24 = v391;
  __n128 v25 = a1;
  unsigned int v336 = a1;
  uint64_t v330 = v14;
  uint64_t v331 = v13;
  if (v391 >= v392)
  {
    float32x4_t v47 = (double *)v390;
    uint64_t v48 = ((char *)v391 - v390) >> 4;
    unint64_t v49 = v48 + 1;
    if ((unint64_t)(v48 + 1) >> 60) {
      abort();
    }
    uint64_t v50 = (char *)v392 - v390;
    if (((char *)v392 - v390) >> 3 > v49) {
      unint64_t v49 = v50 >> 3;
    }
    if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v51 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v51 = v49;
    }
    if (v51)
    {
      if (v51 >> 60) {
        std::__throw_bad_array_new_length[abi:nn180100]();
      }
      uint64_t v52 = (char *)operator new(16 * v51);
      int64x2_t v12 = (int64x2_t)v337;
      float64x2_t v11 = v338;
      __n128 v25 = v336;
    }
    else
    {
      uint64_t v52 = 0;
    }
    double v59 = (double *)&v52[16 * v48];
    double *v59 = 0.0;
    v59[1] = v23;
    int v26 = v59 + 2;
    if (v24 != v47)
    {
      do
      {
        *((_OWORD *)v59 - 1) = *((_OWORD *)v24 - 1);
        v59 -= 2;
        v24 -= 2;
      }
      while (v24 != v47);
      int64x2_t v24 = v47;
    }
    unsigned int v27 = v59;
    uint64_t v390 = (char *)v59;
    double v392 = (double *)&v52[16 * v51];
    if (v24)
    {
      operator delete(v24);
      __n128 v25 = v336;
      int64x2_t v12 = (int64x2_t)v337;
      float64x2_t v11 = v338;
    }
  }
  else
  {
    *unsigned int v391 = 0.0;
    v24[1] = v23;
    int v26 = v24 + 2;
    unsigned int v27 = (double *)v390;
  }
  _Q20 = v339;
  std::vector<unsigned int>::pointer v387 = 0;
  unint64_t v388 = 0;
  uint64_t v389 = 0;
  if (v27 == v26)
  {
    v6.f64[0] = NAN;
    int64x2_t v15 = vdupq_n_s64(0x7FF8000000000000uLL);
    int v335 = -1;
    double v29 = INFINITY;
    goto LABEL_204;
  }
  float v327 = a5;
  float64x2_t v365 = (float64x2_t)vdupq_lane_s64(v12.i64[0], 0);
  v6.f64[0] = NAN;
  int64x2_t v15 = vdupq_n_s64(0x7FF8000000000000uLL);
  int v335 = -1;
  double v29 = INFINITY;
  float64x2_t v360 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0);
  float64x2_t v361 = (float64x2_t)vdupq_laneq_s64(v12, 1);
  do
  {
    uint64_t v61 = v26 - 2;
    unsigned int v60 = *((_DWORD *)v26 - 4);
    double v62 = *(v26 - 1);
    unsigned int v391 = v26 - 2;
    if (v29 <= v62)
    {
LABEL_56:
      v26 -= 2;
      goto LABEL_199;
    }
    uint64_t v63 = v25[3];
    uint64_t v64 = v63 + 96 * v60;
    unsigned int v67 = *(_DWORD *)(v64 + 4);
    float32x4_t v65 = (int *)(v64 + 4);
    unsigned int v66 = v67;
    float32x4_t v68 = v65 + 1;
    unsigned int v69 = v65[1];
    if (v67 == -1 && v69 == -1)
    {
      double v334 = v29;
      float64x2_t v340 = v6;
      int64x2_t v344 = v15;
      uint64_t v80 = (unsigned int *)(v63 + 96 * v60);
      unsigned int v82 = v80[3];
      v80 += 3;
      uint64_t v81 = v82;
      uint64_t v333 = v25[6];
      unsigned int v83 = v80[1];
      unint64_t v84 = v83 + v82 - (unint64_t)v82;
      _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v387, v84);
      unint64_t v85 = *v80;
      unint64_t v86 = v80[1] + v85;
      unsigned int v87 = v335;
      float64x2_t v88 = v365;
      float64x2_t v89 = v360;
      float64x2_t v90 = v361;
      if (v85 >> 2 < (v86 + 3) >> 2)
      {
        unint64_t v91 = v387;
        unint64_t v92 = v85 >> 2;
        uint64_t v93 = 4 * (v85 >> 2);
        while (1)
        {
          float32x4_t v94 = (float64x2_t *)(v332 + 288 * v92);
          float64x2_t v95 = v94[7];
          float64x2_t v96 = *v94;
          float64x2_t v97 = v94[1];
          float64x2_t v98 = v94[6];
          float64x2_t v99 = v94[8];
          float64x2_t v100 = v94[9];
          float64x2_t v101 = v94[2];
          float64x2_t v102 = v94[3];
          float64x2_t v104 = v94[10];
          float64x2_t v103 = v94[11];
          float64x2_t v106 = v94[4];
          float64x2_t v105 = v94[5];
          float64x2_t v373 = v94[13];
          float64x2_t v375 = v94[12];
          float64x2_t v371 = v94[15];
          float64x2_t v372 = v94[14];
          float64x2_t v107 = vsubq_f64(v371, v102);
          float64x2_t v108 = vsubq_f64(v372, v101);
          float64x2_t v109 = vsubq_f64(v88, *v94);
          float64x2_t v110 = vsubq_f64(v88, v97);
          float64x2_t v111 = v88;
          float64x2_t v112 = vsubq_f64(v90, v102);
          float64x2_t v113 = vsubq_f64(v90, v101);
          float64x2_t v378 = vsubq_f64(v373, v97);
          float64x2_t v379 = vsubq_f64(v100, v102);
          float64x2_t v382 = vsubq_f64(v375, *v94);
          float64x2_t v383 = vsubq_f64(v95, v97);
          float64x2_t v114 = vmlaq_f64(vmulq_f64(v379, v112), v110, v383);
          float64x2_t v115 = vmlaq_f64(vmulq_f64(v112, v107), v110, v378);
          float64x2_t v380 = vsubq_f64(v99, v101);
          float64x2_t v381 = vsubq_f64(v98, *v94);
          float64x2_t v116 = vmlaq_f64(vmulq_f64(v380, v113), v109, v381);
          float64x2_t v117 = vmlaq_f64(vmulq_f64(v113, v108), v109, v382);
          float64x2_t v118 = vsubq_f64(v89, v106);
          float64x2_t v119 = vsubq_f64(v104, v106);
          float64x2_t v120 = vmlaq_f64(v116, v118, v119);
          float64x2_t v369 = v94[17];
          float64x2_t v370 = v94[16];
          float64x2_t v121 = vsubq_f64(v370, v106);
          float64x2_t v122 = vmlaq_f64(v117, v118, v121);
          float64x2_t v123 = vsubq_f64(v103, v105);
          float64x2_t v124 = vsubq_f64(v89, v105);
          float64x2_t v125 = vmlaq_f64(v114, v124, v123);
          float64x2_t v126 = vsubq_f64(v369, v105);
          float64x2_t v127 = vmlaq_f64(v115, v124, v126);
          int64x2_t v128 = vclezq_f64(v125);
          int64x2_t v129 = vclezq_f64(v127);
          int64x2_t v130 = vclezq_f64(v120);
          float64x2_t v377 = v122;
          int64x2_t v131 = vclezq_f64(v122);
          float64x2_t v132 = v89;
          int8x8_t v133 = vand_s8(vand_s8((int8x8_t)vmovn_s64(v131), (int8x8_t)vmovn_s64(v130)), vand_s8((int8x8_t)vmovn_s64(v129), (int8x8_t)vmovn_s64(v128)));
          v134.i64[0] = v133.i32[0];
          v134.i64[1] = v133.i32[1];
          if ((vandq_s8(v134, (int8x16_t)vdupq_laneq_s64((int64x2_t)v134, 1)).u64[0] & 0x8000000000000000) != 0) {
            break;
          }
          int8x8_t v135 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v131, (int32x4_t)v129), (int8x16_t)vuzp1q_s32((int32x4_t)v130, (int32x4_t)v128)));
          float64x2_t v136 = vsubq_f64(v89, v104);
          float64x2_t v137 = vsubq_f64(v89, v103);
          float64x2_t v138 = vsubq_f64(v90, v99);
          float64x2_t v139 = vsubq_f64(v90, v100);
          float64x2_t v140 = v111;
          int8x16_t v141 = (int8x16_t)v94[5];
          float64x2_t v376 = v94[8];
          int8x16_t v142 = (int8x16_t)v94[4];
          float64x2_t v143 = v126;
          float64x2_t v144 = vsubq_f64(v140, v95);
          float64x2_t v145 = vsubq_f64(v140, v98);
          float64x2_t v367 = v108;
          float64x2_t v368 = v123;
          float64x2_t v146 = vmlaq_f64(vmlaq_f64(vmulq_f64(v139, v379), v144, v383), v137, v123);
          float64x2_t v147 = vmlaq_f64(vmlaq_f64(vmulq_f64(v138, v380), v145, v381), v136, v119);
          float64x2_t v363 = v143;
          float64x2_t v364 = v107;
          float64x2_t v148 = vmlaq_f64(vmlaq_f64(vmulq_f64(v139, v107), v144, v378), v137, v143);
          float64x2_t v366 = v121;
          float64x2_t v149 = vmlaq_f64(vmlaq_f64(vmulq_f64(v138, v108), v145, v382), v136, v121);
          *(int16x4_t *)&v137.f64[0] = vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v147, v149), (int32x4_t)vcgeq_f64(v146, v148)), (int8x16_t)vuzp1q_s32((int32x4_t)vcgezq_f64(v147), (int32x4_t)vcgezq_f64(v146))));
          uint32x4_t v150 = vmovl_u16((uint16x4_t)vbic_s8(*(int8x8_t *)&v137.f64[0], v135));
          v151.i64[0] = v150.u32[2];
          v151.i64[1] = v150.u32[3];
          int8x16_t v152 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v151, 0x3FuLL));
          float64x2_t v362 = v94[7];
          int8x16_t v153 = vbslq_s8(v152, (int8x16_t)v95, (int8x16_t)v97);
          v151.i64[0] = v150.u32[0];
          v151.i64[1] = v150.u32[1];
          int8x16_t v154 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v151, 0x3FuLL));
          int8x16_t v155 = vbslq_s8(v154, (int8x16_t)v98, (int8x16_t)v96);
          int8x8_t v156 = vorr_s8(v135, *(int8x8_t *)&v137.f64[0]);
          int8x16_t v157 = (int8x16_t)vmovl_u16((uint16x4_t)v156);
          *(int8x8_t *)v157.i8 = vand_s8(*(int8x8_t *)v157.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v157, v157, 8uLL));
          v151.i64[0] = v157.u32[0];
          v151.i64[1] = v157.u32[1];
          int64x2_t v158 = vcltzq_s64(vshlq_n_s64(v151, 0x3FuLL));
          int8x16_t v159 = vbslq_s8(v152, (int8x16_t)v100, (int8x16_t)v102);
          unint64_t v160 = vandq_s8((int8x16_t)v158, (int8x16_t)vdupq_laneq_s64(v158, 1)).u64[0];
          int8x16_t v161 = vbslq_s8(v154, (int8x16_t)v376, (int8x16_t)v101);
          int8x16_t v162 = vbslq_s8(v152, (int8x16_t)v103, v141);
          float64x2_t v106 = (float64x2_t)vbslq_s8(v154, (int8x16_t)v104, v142);
          if ((v160 & 0x8000000000000000) != 0)
          {
            float64x2_t v96 = (float64x2_t)v155;
            float64x2_t v97 = (float64x2_t)v153;
            float64x2_t v101 = (float64x2_t)v161;
            float64x2_t v102 = (float64x2_t)v159;
            float64x2_t v88 = v365;
            goto LABEL_68;
          }
          float64x2_t v163 = (float64x2_t)v141;
          float64x2_t v352 = v98;
          float64x2_t v353 = v103;
          float64x2_t v354 = v104;
          float64x2_t v355 = v100;
          float64x2_t v164 = vsubq_f64(v125, v146);
          float64x2_t v165 = vsubq_f64(v120, v147);
          float64x2_t v349 = vmlaq_f64(vmulq_f64(v127, vnegq_f64(v146)), v148, v125);
          float64x2_t v350 = vmlaq_f64(vmulq_f64(v377, vnegq_f64(v147)), v149, v120);
          float64x2_t v166 = (float64x2_t)v142;
          int8x8_t v167 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vbicq_s8(vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vclezq_f64(v147), (int32x4_t)vclezq_f64(v146)), (int8x16_t)vuzp1q_s32((int32x4_t)vcgezq_f64(v120), (int32x4_t)vcgezq_f64(v125))), (int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_f64(v165), (int32x4_t)vceqzq_f64(v164))), (int8x16_t)vuzp1q_s32((int32x4_t)vclezq_f64(v350), (int32x4_t)vclezq_f64(v349))));
          float64x2_t v168 = vdivq_f64(v125, v164);
          uint32x4_t v169 = vmovl_u16((uint16x4_t)vbic_s8(v167, v156));
          v170.i64[0] = v169.u32[2];
          v170.i64[1] = v169.u32[3];
          int8x16_t v171 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v170, 0x3FuLL));
          int8x16_t v172 = vbslq_s8(v171, (int8x16_t)vaddq_f64(vmulq_f64(v383, v168), v97), v153);
          int8x16_t v173 = vbslq_s8(v171, (int8x16_t)vaddq_f64(v102, vmulq_f64(v379, v168)), v159);
          int8x16_t v162 = vbslq_s8(v171, (int8x16_t)vaddq_f64(v163, vmulq_f64(v368, v168)), v162);
          float64x2_t v174 = vdivq_f64(v120, v165);
          v170.i64[0] = v169.u32[0];
          v170.i64[1] = v169.u32[1];
          int8x16_t v175 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v170, 0x3FuLL));
          int8x16_t v176 = vbslq_s8(v175, (int8x16_t)vaddq_f64(vmulq_f64(v381, v174), v96), v155);
          int8x16_t v177 = vbslq_s8(v175, (int8x16_t)vaddq_f64(v101, vmulq_f64(v380, v174)), v161);
          float64x2_t v359 = v166;
          float64x2_t v106 = (float64x2_t)vbslq_s8(v175, (int8x16_t)vaddq_f64(v166, vmulq_f64(v119, v174)), (int8x16_t)v106);
          int8x8_t v178 = vorr_s8(v167, v156);
          int8x16_t v179 = (int8x16_t)vmovl_u16((uint16x4_t)v178);
          *(int8x8_t *)v179.i8 = vand_s8(*(int8x8_t *)v179.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v179, v179, 8uLL));
          v170.i64[0] = v179.u32[0];
          v170.i64[1] = v179.u32[1];
          int64x2_t v180 = vcltzq_s64(vshlq_n_s64(v170, 0x3FuLL));
          if ((vandq_s8((int8x16_t)v180, (int8x16_t)vdupq_laneq_s64(v180, 1)).u64[0] & 0x8000000000000000) != 0)
          {
            float64x2_t v96 = (float64x2_t)v176;
            float64x2_t v97 = (float64x2_t)v172;
            float64x2_t v101 = (float64x2_t)v177;
            float64x2_t v102 = (float64x2_t)v173;
          }
          else
          {
            float64x2_t v351 = v163;
            float64x2_t v181 = vsubq_f64(v365, v373);
            float64x2_t v182 = vsubq_f64(v365, v375);
            float64x2_t v183 = vsubq_f64(v361, v371);
            float64x2_t v184 = vsubq_f64(v361, v372);
            int8x16_t v357 = v177;
            float64x2_t v185 = vsubq_f64(v360, v369);
            int8x16_t v356 = v173;
            float64x2_t v186 = vsubq_f64(v360, v370);
            float64x2_t v187 = vmlaq_f64(vmulq_f64(v380, v184), v182, v381);
            float64x2_t v188 = vmlaq_f64(vmulq_f64(v367, v184), v182, v382);
            float64x2_t v189 = vmlaq_f64(vmlaq_f64(vmulq_f64(v379, v183), v181, v383), v185, v368);
            float64x2_t v348 = v119;
            float64x2_t v190 = vmlaq_f64(v187, v186, v119);
            float64x2_t v191 = vmlaq_f64(vmlaq_f64(vmulq_f64(v364, v183), v181, v378), v185, v363);
            float64x2_t v192 = vmlaq_f64(v188, v186, v366);
            *(int16x4_t *)&v186.f64[0] = vmovn_s32((int32x4_t)vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgezq_f64(v192), (int32x4_t)vcgezq_f64(v191)), (int8x16_t)vuzp1q_s32((int32x4_t)vcgeq_f64(v192, v190), (int32x4_t)vcgeq_f64(v191, v189))));
            uint32x4_t v193 = vmovl_u16((uint16x4_t)vbic_s8(*(int8x8_t *)&v186.f64[0], v178));
            v194.i64[0] = v193.u32[2];
            v194.i64[1] = v193.u32[3];
            int8x16_t v195 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v194, 0x3FuLL));
            int8x16_t v196 = vbslq_s8(v195, (int8x16_t)v373, v172);
            int8x16_t v197 = vbslq_s8(v195, (int8x16_t)v371, v356);
            int8x16_t v162 = vbslq_s8(v195, (int8x16_t)v369, v162);
            v194.i64[0] = v193.u32[0];
            v194.i64[1] = v193.u32[1];
            int8x16_t v198 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v194, 0x3FuLL));
            int8x16_t v199 = vbslq_s8(v198, (int8x16_t)v375, v176);
            int8x16_t v200 = vbslq_s8(v198, (int8x16_t)v372, v357);
            float64x2_t v106 = (float64x2_t)vbslq_s8(v198, (int8x16_t)v370, (int8x16_t)v106);
            int8x8_t v201 = vorr_s8(v178, *(int8x8_t *)&v186.f64[0]);
            int8x16_t v202 = (int8x16_t)vmovl_u16((uint16x4_t)v201);
            *(int8x8_t *)v202.i8 = vand_s8(*(int8x8_t *)v202.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v202, v202, 8uLL));
            v194.i64[0] = v202.u32[0];
            v194.i64[1] = v202.u32[1];
            int64x2_t v203 = vcltzq_s64(vshlq_n_s64(v194, 0x3FuLL));
            if ((vandq_s8((int8x16_t)v203, (int8x16_t)vdupq_laneq_s64(v203, 1)).u64[0] & 0x8000000000000000) != 0)
            {
              float64x2_t v96 = (float64x2_t)v199;
              float64x2_t v97 = (float64x2_t)v196;
              float64x2_t v101 = (float64x2_t)v200;
              float64x2_t v102 = (float64x2_t)v197;
            }
            else
            {
              float64x2_t v204 = vnegq_f64(v125);
              float64x2_t v205 = vmulq_f64(v192, vnegq_f64(v120));
              float64x2_t v206 = vmlaq_f64(vmulq_f64(v191, v204), v127, v189);
              float64x2_t v207 = vmlaq_f64(v205, v377, v190);
              *(int16x4_t *)&v204.f64[0] = vmovn_s32((int32x4_t)vandq_s8(vbicq_s8(vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vclezq_f64(v192), (int32x4_t)vclezq_f64(v191)), (int8x16_t)vuzp1q_s32((int32x4_t)vcgezq_f64(v377), (int32x4_t)vcgezq_f64(v127))), (int8x16_t)vuzp1q_s32((int32x4_t)vceqq_f64(v377, v192), (int32x4_t)vceqq_f64(v127, v191))), (int8x16_t)vuzp1q_s32((int32x4_t)vclezq_f64(v207), (int32x4_t)vclezq_f64(v206))));
              float64x2_t v208 = vdivq_f64(v127, vsubq_f64(v127, v191));
              uint32x4_t v209 = vmovl_u16((uint16x4_t)vbic_s8(*(int8x8_t *)&v204.f64[0], v201));
              v210.i64[0] = v209.u32[2];
              v210.i64[1] = v209.u32[3];
              int8x16_t v211 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v210, 0x3FuLL));
              int8x16_t v212 = vbslq_s8(v211, (int8x16_t)vaddq_f64(vmulq_f64(v378, v208), v97), v196);
              int8x16_t v213 = vbslq_s8(v211, (int8x16_t)vaddq_f64(v102, vmulq_f64(v364, v208)), v197);
              int8x16_t v162 = vbslq_s8(v211, (int8x16_t)vaddq_f64(v351, vmulq_f64(v363, v208)), v162);
              float64x2_t v214 = vdivq_f64(v377, vsubq_f64(v377, v192));
              v210.i64[0] = v209.u32[0];
              v210.i64[1] = v209.u32[1];
              int8x16_t v215 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v210, 0x3FuLL));
              int8x16_t v216 = vbslq_s8(v215, (int8x16_t)vaddq_f64(vmulq_f64(v382, v214), v96), v199);
              int8x16_t v217 = vbslq_s8(v215, (int8x16_t)vaddq_f64(v101, vmulq_f64(v367, v214)), v200);
              float64x2_t v106 = (float64x2_t)vbslq_s8(v215, (int8x16_t)vaddq_f64(v359, vmulq_f64(v366, v214)), (int8x16_t)v106);
              int8x8_t v218 = vorr_s8(v201, *(int8x8_t *)&v204.f64[0]);
              int8x16_t v219 = (int8x16_t)vmovl_u16((uint16x4_t)v218);
              *(int8x8_t *)v219.i8 = vand_s8(*(int8x8_t *)v219.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v219, v219, 8uLL));
              v210.i64[0] = v219.u32[0];
              v210.i64[1] = v219.u32[1];
              int64x2_t v220 = vcltzq_s64(vshlq_n_s64(v210, 0x3FuLL));
              if ((vandq_s8((int8x16_t)v220, (int8x16_t)vdupq_laneq_s64(v220, 1)).u64[0] & 0x8000000000000000) != 0)
              {
                float64x2_t v96 = (float64x2_t)v216;
                float64x2_t v97 = (float64x2_t)v212;
                float64x2_t v101 = (float64x2_t)v217;
                float64x2_t v102 = (float64x2_t)v213;
              }
              else
              {
                int8x16_t v358 = v217;
                float64x2_t v221 = vsubq_f64(v373, v362);
                int8x16_t v374 = v212;
                float64x2_t v222 = vmlaq_f64(vmulq_f64(v148, vnegq_f64(v189)), v191, v146);
                float64x2_t v223 = vmlaq_f64(vmulq_f64(v149, vnegq_f64(v190)), v192, v147);
                float64x2_t v224 = vsubq_f64(v148, v146);
                float64x2_t v225 = vsubq_f64(v149, v147);
                float64x2_t v226 = vsubq_f64(v189, v191);
                float64x2_t v227 = vsubq_f64(v190, v192);
                int8x8_t v228 = (int8x8_t)vmovn_s32((int32x4_t)vandq_s8(vandq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vcgezq_f64(v227), (int32x4_t)vcgezq_f64(v226)), (int8x16_t)vuzp1q_s32((int32x4_t)vcgezq_f64(v225), (int32x4_t)vcgezq_f64(v224))), (int8x16_t)vuzp1q_s32((int32x4_t)vclezq_f64(v223), (int32x4_t)vclezq_f64(v222))));
                float64x2_t v229 = vdivq_f64(v225, vaddq_f64(v225, v227));
                float64x2_t v230 = vdivq_f64(v224, vaddq_f64(v224, v226));
                float64x2_t v231 = vmulq_f64(vsubq_f64(v375, v352), v229);
                float64x2_t v232 = vmulq_f64(vsubq_f64(v371, v355), v230);
                int8x16_t v233 = (int8x16_t)vaddq_f64(vmulq_f64(vsubq_f64(v372, v376), v229), v376);
                int8x16_t v234 = (int8x16_t)vaddq_f64(vmulq_f64(vsubq_f64(v370, v354), v229), v354);
                int8x16_t v235 = (int8x16_t)vaddq_f64(vmulq_f64(vsubq_f64(v369, v353), v230), v353);
                uint32x4_t v236 = vmovl_u16((uint16x4_t)vbic_s8(v228, v218));
                v237.i64[0] = v236.u32[2];
                v237.i64[1] = v236.u32[3];
                int8x16_t v238 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v237, 0x3FuLL));
                int8x16_t v239 = vbslq_s8(v238, (int8x16_t)vaddq_f64(vmulq_f64(v221, v230), v362), v374);
                v237.i64[0] = v236.u32[0];
                v237.i64[1] = v236.u32[1];
                int8x16_t v240 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v237, 0x3FuLL));
                int8x16_t v241 = vbslq_s8(v240, (int8x16_t)vaddq_f64(v231, v352), v216);
                int8x16_t v242 = vbslq_s8(v238, (int8x16_t)vaddq_f64(v232, v355), v213);
                int8x16_t v243 = vbslq_s8(v240, v233, v358);
                int8x16_t v162 = vbslq_s8(v238, v235, v162);
                float64x2_t v106 = (float64x2_t)vbslq_s8(v240, v234, (int8x16_t)v106);
                uint32x4_t v244 = vmovl_u16((uint16x4_t)vorr_s8(v218, v228));
                v237.i64[0] = v244.u32[2];
                v237.i64[1] = v244.u32[3];
                int8x16_t v245 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v237, 0x3FuLL));
                v237.i64[0] = v244.u32[0];
                v237.i64[1] = v244.u32[1];
                int8x16_t v246 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v237, 0x3FuLL));
                int64x2_t v247 = (int64x2_t)vandq_s8(v246, v245);
                if ((vandq_s8((int8x16_t)v247, (int8x16_t)vdupq_laneq_s64(v247, 1)).u64[0] & 0x8000000000000000) != 0)
                {
                  float64x2_t v96 = (float64x2_t)v241;
                  float64x2_t v97 = (float64x2_t)v239;
                  float64x2_t v101 = (float64x2_t)v243;
                  float64x2_t v102 = (float64x2_t)v242;
                }
                else
                {
                  int8x16_t v248 = vandq_s8((int8x16_t)v106, v246);
                  float64x2_t v249 = vdivq_f64(v339, vaddq_f64(v349, vaddq_f64(v222, v206)));
                  float64x2_t v250 = vdivq_f64(v339, vaddq_f64(v350, vaddq_f64(v223, v207)));
                  float64x2_t v251 = vmulq_f64(v207, v250);
                  float64x2_t v252 = vmulq_f64(v206, v249);
                  float64x2_t v253 = vmulq_f64(v349, v249);
                  float64x2_t v254 = vmulq_f64(v350, v250);
                  v255.i64[0] = v244.u32[0];
                  v255.i64[1] = v244.u32[1];
                  int8x16_t v256 = (int8x16_t)vcltzq_s64(vshlq_n_s64(v255, 0x3FuLL));
                  float64x2_t v96 = (float64x2_t)vbslq_s8(v256, v241, (int8x16_t)vaddq_f64(vmulq_f64(v382, v254), vaddq_f64(vmulq_f64(v381, v251), v96)));
                  float64x2_t v97 = (float64x2_t)vbslq_s8(v245, v239, (int8x16_t)vaddq_f64(vmulq_f64(v378, v253), vaddq_f64(vmulq_f64(v383, v252), v97)));
                  float64x2_t v101 = (float64x2_t)vbslq_s8(v256, v243, (int8x16_t)vaddq_f64(vmulq_f64(v367, v254), vaddq_f64(v101, vmulq_f64(v380, v251))));
                  float64x2_t v102 = (float64x2_t)vbslq_s8(v245, v242, (int8x16_t)vaddq_f64(vmulq_f64(v364, v253), vaddq_f64(v102, vmulq_f64(v379, v252))));
                  int8x16_t v257 = vbicq_s8((int8x16_t)vaddq_f64(vmulq_f64(v363, v253), vaddq_f64(v351, vmulq_f64(v368, v252))), v245);
                  float64x2_t v106 = (float64x2_t)vorrq_s8(v248, vbicq_s8((int8x16_t)vaddq_f64(vmulq_f64(v366, v254), vaddq_f64(v359, vmulq_f64(v348, v251))), v256));
                  int8x16_t v162 = vorrq_s8(vandq_s8(v162, v245), v257);
                }
              }
            }
          }
          float64x2_t v88 = v365;
          float64x2_t v89 = v360;
          float64x2_t v90 = v361;
LABEL_74:
          uint64_t v258 = 0;
          uint64_t v259 = v93 & 0xFFFFFFFC;
          do
          {
            if (v259 + v258 >= v85 && v259 + v258 < v86)
            {
              int32x4_t v261 = &v91[32 * ((v93 & 0xFFFFFFFC) - v85) + 32 * (int)v258];
              v386[0] = v96;
              v386[1] = v97;
              uint64_t v262 = 8 * (v258 & 3);
              v385[0] = v101;
              v385[1] = v102;
              v384[0] = v106;
              v384[1] = v162;
              *(void *)&long long v263 = *(void *)((char *)v386 + v262);
              *((void *)&v263 + 1) = *(void *)((char *)v385 + v262);
              *((void *)v261 + 2) = *(void *)((char *)v384 + v262);
              *(_OWORD *)int32x4_t v261 = v263;
            }
            ++v258;
          }
          while (v258 != 4);
          ++v92;
          LODWORD(v93) = v93 + 4;
          if (v92 == (v86 + 3) >> 2) {
            goto LABEL_82;
          }
        }
        int8x16_t v162 = (int8x16_t)v94[5];
        float64x2_t v88 = v111;
LABEL_68:
        float64x2_t v89 = v132;
        goto LABEL_74;
      }
LABEL_82:
      float64x2_t v11 = v338;
      _Q20 = v339;
      int64x2_t v12 = (int64x2_t)v337;
      float64x2_t v6 = v340;
      int64x2_t v15 = v344;
      if (!v83)
      {
        int v26 = v61;
        __n128 v25 = v336;
        double v29 = v334;
        goto LABEL_199;
      }
      uint64_t v264 = 0;
      uint64_t v265 = v333 + 4 * v81;
      double v29 = v334;
      while (1)
      {
        unsigned __int32 v266 = (float64x2_t *)&v387[32 * v264];
        float64x2_t v268 = *v266;
        float64x2_t v267 = v266[1];
        float64x2_t v269 = vsubq_f64(v337, *v266);
        float64x2_t v270 = vsubq_f64(v338, v267);
        double v271 = vmulq_f64(v270, v270).f64[0] + vaddvq_f64(vmulq_f64(v269, v269));
        if (v271 >= v29)
        {
          if (v271 != v29) {
            goto LABEL_89;
          }
          unsigned int v272 = *(_DWORD *)(v265 + 4 * v264);
          if (v272 >= v87) {
            goto LABEL_89;
          }
        }
        else
        {
          unsigned int v272 = *(_DWORD *)(v265 + 4 * v264);
        }
        unsigned int v87 = v272;
        double v29 = v271;
        int64x2_t v15 = (int64x2_t)v268;
        float64x2_t v6 = v267;
LABEL_89:
        if (v84 <= ++v264)
        {
          int v335 = v87;
          int v26 = v61;
          __n128 v25 = v336;
          goto LABEL_199;
        }
      }
    }
    uint64_t v71 = v63 + 96 * v66;
    float64x2_t v72 = vsubq_f64(vmaxnmq_f64(vminnmq_f64((float64x2_t)v12, *(float64x2_t *)(v71 + 64)), *(float64x2_t *)(v71 + 32)), (float64x2_t)v12);
    float64x2_t v73 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v338.f64[0], (float64x2_t)*(unint64_t *)(v71 + 80)), (float64x2_t)*(unint64_t *)(v71 + 48)), v11);
    double v74 = vmulq_f64(v73, v73).f64[0] + vaddvq_f64(vmulq_f64(v72, v72));
    uint64_t v75 = v63 + 96 * v69;
    float64x2_t v76 = vsubq_f64(vmaxnmq_f64(vminnmq_f64((float64x2_t)v12, *(float64x2_t *)(v75 + 64)), *(float64x2_t *)(v75 + 32)), (float64x2_t)v12);
    float64x2_t v77 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v338.f64[0], (float64x2_t)*(unint64_t *)(v75 + 80)), (float64x2_t)*(unint64_t *)(v75 + 48)), v11);
    double v78 = vmulq_f64(v77, v77).f64[0] + vaddvq_f64(vmulq_f64(v76, v76));
    if (v74 < v29 && v78 < v29)
    {
      uint64_t v273 = (char *)v392;
      float64x2_t v341 = v6;
      int64x2_t v345 = v15;
      if (v74 < v78)
      {
        if (v61 < v392)
        {
          *((_DWORD *)v26 - 4) = v69;
          *(v26 - 1) = v78;
          goto LABEL_154;
        }
        uint64_t v275 = ((char *)v61 - (char *)v27) >> 4;
        unint64_t v276 = v275 + 1;
        if ((unint64_t)(v275 + 1) >> 60) {
          abort();
        }
        uint64_t v277 = (char *)v392 - (char *)v27;
        if (v392 - v27 > v276) {
          unint64_t v276 = v277 >> 3;
        }
        if ((unint64_t)v277 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v278 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v278 = v276;
        }
        if (v278)
        {
          if (v278 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v279 = (char *)operator new(16 * v278);
          float64x2_t v11 = v338;
          _Q20 = v339;
          int64x2_t v12 = (int64x2_t)v337;
          float64x2_t v6 = v341;
          int64x2_t v15 = v345;
          __n128 v25 = v336;
        }
        else
        {
          uint64_t v279 = 0;
        }
        float64x2_t v295 = (double *)&v279[16 * v275];
        uint64_t v273 = &v279[16 * v278];
        *(_DWORD *)float64x2_t v295 = v69;
        v295[1] = v78;
        int v26 = v295 + 2;
        if (v61 == v27)
        {
          uint64_t v390 = &v279[16 * v275];
          unsigned int v391 = v295 + 2;
          double v392 = (double *)v273;
        }
        else
        {
          do
          {
            *((_OWORD *)v295 - 1) = *((_OWORD *)v61 - 1);
            v295 -= 2;
            v61 -= 2;
          }
          while (v61 != v27);
          unsigned int v27 = (double *)v390;
          uint64_t v390 = (char *)v295;
          unsigned int v391 = v26;
          double v392 = (double *)v273;
          if (!v27)
          {
LABEL_154:
            unsigned int v391 = v26;
            int v299 = *v65;
            if (v26 < (double *)v273)
            {
              *(_DWORD *)int v26 = v299;
              v26[1] = v74;
LABEL_173:
              v274 = v26 + 2;
              goto LABEL_198;
            }
            float64x2_t v300 = (double *)v390;
            uint64_t v301 = ((char *)v26 - v390) >> 4;
            unint64_t v302 = v301 + 1;
            if ((unint64_t)(v301 + 1) >> 60) {
              abort();
            }
            uint64_t v303 = v273 - v390;
            if (v303 >> 3 > v302) {
              unint64_t v302 = v303 >> 3;
            }
            if ((unint64_t)v303 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v304 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v304 = v302;
            }
            if (v304)
            {
              if (v304 >> 60) {
                std::__throw_bad_array_new_length[abi:nn180100]();
              }
              uint64_t v305 = (char *)operator new(16 * v304);
              float64x2_t v11 = v338;
              _Q20 = v339;
              int64x2_t v12 = (int64x2_t)v337;
              float64x2_t v6 = v341;
              int64x2_t v15 = v345;
              __n128 v25 = v336;
            }
            else
            {
              uint64_t v305 = 0;
            }
            uint64_t v306 = &v305[16 * v301];
            float64x2_t v307 = &v305[16 * v304];
            *(_DWORD *)uint64_t v306 = v299;
            *((double *)v306 + 1) = v74;
            v274 = (double *)(v306 + 16);
            if (v26 != v300)
            {
              do
              {
                *((_OWORD *)v306 - 1) = *((_OWORD *)v26 - 1);
                v306 -= 16;
                v26 -= 2;
              }
              while (v26 != v300);
              goto LABEL_186;
            }
            goto LABEL_188;
          }
        }
        operator delete(v27);
        __n128 v25 = v336;
        float64x2_t v6 = v341;
        int64x2_t v15 = v345;
        int64x2_t v12 = (int64x2_t)v337;
        float64x2_t v11 = v338;
        _Q20 = v339;
        uint64_t v273 = (char *)v392;
        goto LABEL_154;
      }
      if (v61 < v392)
      {
        *((_DWORD *)v26 - 4) = v66;
        *(v26 - 1) = v74;
        goto LABEL_171;
      }
      uint64_t v285 = ((char *)v61 - (char *)v27) >> 4;
      unint64_t v286 = v285 + 1;
      if ((unint64_t)(v285 + 1) >> 60) {
        abort();
      }
      uint64_t v287 = (char *)v392 - (char *)v27;
      if (v392 - v27 > v286) {
        unint64_t v286 = v287 >> 3;
      }
      if ((unint64_t)v287 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v288 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v288 = v286;
      }
      if (v288)
      {
        if (v288 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v289 = (char *)operator new(16 * v288);
        float64x2_t v11 = v338;
        _Q20 = v339;
        int64x2_t v12 = (int64x2_t)v337;
        float64x2_t v6 = v341;
        int64x2_t v15 = v345;
        __n128 v25 = v336;
      }
      else
      {
        uint64_t v289 = 0;
      }
      int8x16_t v298 = (double *)&v289[16 * v285];
      uint64_t v273 = &v289[16 * v288];
      *(_DWORD *)int8x16_t v298 = v66;
      v298[1] = v74;
      int v26 = v298 + 2;
      if (v61 == v27)
      {
        uint64_t v390 = &v289[16 * v285];
        unsigned int v391 = v298 + 2;
        double v392 = (double *)v273;
      }
      else
      {
        do
        {
          *((_OWORD *)v298 - 1) = *((_OWORD *)v61 - 1);
          v298 -= 2;
          v61 -= 2;
        }
        while (v61 != v27);
        unsigned int v27 = (double *)v390;
        uint64_t v390 = (char *)v298;
        unsigned int v391 = v26;
        double v392 = (double *)v273;
        if (!v27)
        {
LABEL_171:
          unsigned int v391 = v26;
          int v308 = *v68;
          if (v26 < (double *)v273)
          {
            *(_DWORD *)int v26 = v308;
            v26[1] = v78;
            goto LABEL_173;
          }
          float64x2_t v309 = (double *)v390;
          uint64_t v310 = ((char *)v26 - v390) >> 4;
          unint64_t v311 = v310 + 1;
          if ((unint64_t)(v310 + 1) >> 60) {
            abort();
          }
          uint64_t v312 = v273 - v390;
          if (v312 >> 3 > v311) {
            unint64_t v311 = v312 >> 3;
          }
          if ((unint64_t)v312 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v313 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v313 = v311;
          }
          if (v313)
          {
            if (v313 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            float64x2_t v314 = (char *)operator new(16 * v313);
            float64x2_t v11 = v338;
            _Q20 = v339;
            int64x2_t v12 = (int64x2_t)v337;
            float64x2_t v6 = v341;
            int64x2_t v15 = v345;
            __n128 v25 = v336;
          }
          else
          {
            float64x2_t v314 = 0;
          }
          uint64_t v306 = &v314[16 * v310];
          float64x2_t v307 = &v314[16 * v313];
          *(_DWORD *)uint64_t v306 = v308;
          *((double *)v306 + 1) = v78;
          v274 = (double *)(v306 + 16);
          if (v26 != v309)
          {
            do
            {
              *((_OWORD *)v306 - 1) = *((_OWORD *)v26 - 1);
              v306 -= 16;
              v26 -= 2;
            }
            while (v26 != v309);
LABEL_186:
            int v26 = (double *)v390;
            uint64_t v390 = v306;
            unsigned int v391 = v274;
            double v392 = (double *)v307;
            if (!v26) {
              goto LABEL_198;
            }
            goto LABEL_189;
          }
LABEL_188:
          uint64_t v390 = v306;
          unsigned int v391 = v274;
          double v392 = (double *)v307;
LABEL_189:
          float64x2_t v315 = v26;
LABEL_197:
          operator delete(v315);
          __n128 v25 = v336;
          float64x2_t v6 = v341;
          int64x2_t v15 = v345;
          int64x2_t v12 = (int64x2_t)v337;
          float64x2_t v11 = v338;
          _Q20 = v339;
          goto LABEL_198;
        }
      }
      operator delete(v27);
      __n128 v25 = v336;
      float64x2_t v6 = v341;
      int64x2_t v15 = v345;
      int64x2_t v12 = (int64x2_t)v337;
      float64x2_t v11 = v338;
      _Q20 = v339;
      uint64_t v273 = (char *)v392;
      goto LABEL_171;
    }
    if (v74 >= v29)
    {
      if (v78 >= v29) {
        goto LABEL_56;
      }
      if (v61 < v392)
      {
        *((_DWORD *)v26 - 4) = v69;
        *(v26 - 1) = v78;
        goto LABEL_101;
      }
      uint64_t v290 = ((char *)v61 - (char *)v27) >> 4;
      unint64_t v291 = v290 + 1;
      if ((unint64_t)(v290 + 1) >> 60) {
        abort();
      }
      uint64_t v292 = (char *)v392 - (char *)v27;
      if (v392 - v27 > v291) {
        unint64_t v291 = v292 >> 3;
      }
      if ((unint64_t)v292 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v293 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v293 = v291;
      }
      float64x2_t v341 = v6;
      int64x2_t v345 = v15;
      if (v293)
      {
        if (v293 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        unint64_t v294 = (char *)operator new(16 * v293);
        float64x2_t v11 = v338;
        _Q20 = v339;
        int64x2_t v12 = (int64x2_t)v337;
        float64x2_t v6 = v341;
        int64x2_t v15 = v345;
        __n128 v25 = v336;
      }
      else
      {
        unint64_t v294 = 0;
      }
      float64x2_t v296 = &v294[16 * v290];
      float64x2_t v297 = &v294[16 * v293];
      *(_DWORD *)float64x2_t v296 = v69;
      *((double *)v296 + 1) = v78;
      v274 = (double *)(v296 + 16);
      if (v61 != v27)
      {
        do
        {
          *((_OWORD *)v296 - 1) = *((_OWORD *)v61 - 1);
          v296 -= 16;
          v61 -= 2;
        }
        while (v61 != v27);
        goto LABEL_193;
      }
      goto LABEL_195;
    }
    if (v61 >= v392)
    {
      uint64_t v280 = ((char *)v61 - (char *)v27) >> 4;
      unint64_t v281 = v280 + 1;
      if ((unint64_t)(v280 + 1) >> 60) {
        abort();
      }
      uint64_t v282 = (char *)v392 - (char *)v27;
      if (v392 - v27 > v281) {
        unint64_t v281 = v282 >> 3;
      }
      if ((unint64_t)v282 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v283 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v283 = v281;
      }
      float64x2_t v341 = v6;
      int64x2_t v345 = v15;
      if (v283)
      {
        if (v283 >> 60) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        v284 = (char *)operator new(16 * v283);
        float64x2_t v11 = v338;
        _Q20 = v339;
        int64x2_t v12 = (int64x2_t)v337;
        float64x2_t v6 = v341;
        int64x2_t v15 = v345;
        __n128 v25 = v336;
      }
      else
      {
        v284 = 0;
      }
      float64x2_t v296 = &v284[16 * v280];
      float64x2_t v297 = &v284[16 * v283];
      *(_DWORD *)float64x2_t v296 = v66;
      *((double *)v296 + 1) = v74;
      v274 = (double *)(v296 + 16);
      if (v61 != v27)
      {
        do
        {
          *((_OWORD *)v296 - 1) = *((_OWORD *)v61 - 1);
          v296 -= 16;
          v61 -= 2;
        }
        while (v61 != v27);
LABEL_193:
        unsigned int v27 = (double *)v390;
        uint64_t v390 = v296;
        unsigned int v391 = v274;
        double v392 = (double *)v297;
        if (!v27) {
          goto LABEL_198;
        }
        goto LABEL_196;
      }
LABEL_195:
      uint64_t v390 = v296;
      unsigned int v391 = v274;
      double v392 = (double *)v297;
LABEL_196:
      float64x2_t v315 = v27;
      goto LABEL_197;
    }
    *((_DWORD *)v26 - 4) = v66;
    *(v26 - 1) = v74;
LABEL_101:
    v274 = v26;
LABEL_198:
    unsigned int v391 = v274;
    int v26 = v274;
LABEL_199:
    unsigned int v27 = (double *)v390;
  }
  while (v390 != (char *)v26);
  a5 = v327;
  if (v387)
  {
    unint64_t v388 = v387;
    float64x2_t v342 = v6;
    int64x2_t v346 = v15;
    operator delete(v387);
    float64x2_t v6 = v342;
    int64x2_t v15 = v346;
    int64x2_t v12 = (int64x2_t)v337;
    float64x2_t v11 = v338;
    _Q20 = v339;
  }
  unsigned int v27 = v26;
LABEL_204:
  uint64_t v14 = v330;
  uint64_t v13 = v331;
  if (v27)
  {
    unsigned int v391 = v27;
    float64x2_t v343 = v6;
    int64x2_t v347 = v15;
    operator delete(v27);
    float64x2_t v6 = v343;
    int64x2_t v15 = v347;
    int64x2_t v12 = (int64x2_t)v337;
    float64x2_t v11 = v338;
    _Q20 = v339;
  }
  uint64_t v9 = v328;
  a4 = v329;
  int v28 = v335;
  if (v328) {
LABEL_6:
  }
    *uint64_t v9 = v29;
LABEL_7:
  if (a4) {
    *a4 = v28;
  }
  if (a5)
  {
    if (v28 == -1)
    {
      int64x2_t v46 = vdupq_n_s64(0x7FF8000000000000uLL);
      _Q20.f64[0] = NAN;
    }
    else
    {
      int v30 = 3 * v28;
      float32x4_t v31 = (float64x2_t *)(v13 + 32 * *(unsigned int *)(v14 + 4 * (3 * v28)));
      float64x2_t v33 = *v31;
      float64x2_t v32 = v31[1];
      float32x4_t v34 = (float64x2_t *)(v13 + 32 * *(unsigned int *)(v14 + 4 * (v30 + 1)));
      float64x2_t v35 = v34[1];
      float32x4_t v36 = (float64x2_t *)(v13 + 32 * *(unsigned int *)(v14 + 4 * (v30 + 2)));
      float64x2_t v37 = v36[1];
      float64x2_t v38 = vsubq_f64(*v34, v33);
      float64x2_t v39 = vsubq_f64(v35, v32);
      float64x2_t v40 = vsubq_f64(*v36, v33);
      float64x2_t v41 = vsubq_f64(v37, v32);
      float64x2_t v42 = vsubq_f64((float64x2_t)v12, v33);
      float64x2_t v43 = vsubq_f64(v11, v32);
      double v44 = vmulq_f64(v43, v39).f64[0] + vaddvq_f64(vmulq_f64(v42, v38));
      double v45 = vmulq_f64(v43, v41).f64[0] + vaddvq_f64(vmulq_f64(v42, v40));
      if (v44 <= 0.0 && v45 <= 0.0)
      {
        int64x2_t v46 = (int64x2_t)xmmword_236F14150;
        goto LABEL_34;
      }
      float64x2_t v53 = vsubq_f64((float64x2_t)v12, *v34);
      float64x2_t v54 = vsubq_f64(v11, v35);
      double v55 = vmulq_f64(v39, v54).f64[0] + vaddvq_f64(vmulq_f64(v38, v53));
      double v56 = vmulq_f64(v54, v41).f64[0] + vaddvq_f64(vmulq_f64(v53, v40));
      if (v55 >= 0.0 && v56 <= v55)
      {
        int64x2_t v46 = (int64x2_t)xmmword_236F14160;
        goto LABEL_34;
      }
      double v58 = v44 * v56 - v55 * v45;
      if (v44 == v55 || v55 > 0.0 || v44 < 0.0 || v58 > 0.0)
      {
        float64x2_t v316 = vsubq_f64((float64x2_t)v12, *v36);
        float64x2_t v317 = vsubq_f64(v11, v37);
        double v318 = vmulq_f64(v39, v317).f64[0] + vaddvq_f64(vmulq_f64(v38, v316));
        double v319 = vmulq_f64(v41, v317).f64[0] + vaddvq_f64(vmulq_f64(v40, v316));
        int64x2_t v46 = 0uLL;
        if (v319 < 0.0 || v318 > v319)
        {
          double v321 = v318 * v45 - v44 * v319;
          if (v319 > 0.0 || v321 > 0.0 || (v45 >= 0.0 ? (BOOL v322 = v45 == v319) : (BOOL v322 = 1), v322))
          {
            double v323 = v55 * v319 - v318 * v56;
            if (v323 <= 0.0 && (double v324 = v56 - v55, v324 >= 0.0) && v318 - v319 >= 0.0)
            {
              _Q20.f64[0] = v324 / (v324 + v318 - v319);
              v46.i64[0] = 0;
              *(double *)&v46.i64[1] = 1.0 - _Q20.f64[0];
            }
            else
            {
              double v325 = 1.0 / (v58 + v323 + v321);
              double v326 = v321 * v325;
              _Q20.f64[0] = v58 * v325;
              *(double *)v46.i64 = 1.0 - v326 - v58 * v325;
              *(double *)&v46.i64[1] = v326;
            }
          }
          else
          {
            _Q20.f64[0] = v45 / (v45 - v319);
            *(double *)v46.i64 = 1.0 - _Q20.f64[0];
          }
        }
      }
      else
      {
        *(double *)v46.i64 = 1.0 - v44 / (v44 - v55);
        *(double *)&v46.i64[1] = v44 / (v44 - v55);
LABEL_34:
        _Q20 = 0uLL;
      }
    }
    *a5 = v46;
    a5[1] = (int64x2_t)_Q20;
  }
  *a6 = v15;
  a6[1] = (int64x2_t)v6;
}

void sub_236E0F18C(_Unwind_Exception *exception_object)
{
  uint64_t v4 = *(void **)(v2 - 200);
  if (v4)
  {
    *(void *)(v2 - 192) = v4;
    operator delete(v4);
  }
  if (v1)
  {
    *(void *)(v2 - 168) = v1;
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

double geom_bezier_curve_bvh_closest_point_2f(void *a1, float *a2, unsigned int *a3, double *a4, float32x2_t a5)
{
  if (a2)
  {
    *a2 = INFINITY;
    *(float *)&int v9 = 0.0;
  }
  else
  {
    *(float *)&int v9 = INFINITY;
  }
  int v10 = -1;
  if (a3)
  {
    *a3 = -1;
    int v10 = 0;
  }
  double v11 = COERCE_DOUBLE(vdup_n_s32(0x7FC00000u));
  if (a1[7] == a1[6] || (int64x2_t v12 = (float32x2_t *)a1[3], (v13 = a1[4] - (void)v12) == 0))
  {
    int v17 = 2143289344;
    if (!a4) {
      return v11;
    }
LABEL_11:
    *(_DWORD *)a4 = v17;
    return v11;
  }
  unsigned int v14 = __clz(-858993459 * (v13 >> 3));
  float64x2_t v110 = a4;
  if (v14 == 31)
  {
    int64x2_t v15 = 0;
    float32x4_t v16 = 0;
  }
  else
  {
    unsigned int v19 = 31 - v14;
    float32x4_t v16 = (float *)operator new(8 * (31 - v14));
    int64x2_t v15 = &v16[2 * v19];
  }
  float32x2_t v20 = vsub_f32(vmaxnm_f32(vminnm_f32(a5, v12[4]), v12[3]), a5);
  float v21 = vaddv_f32(vmul_f32(v20, v20));
  if (v16 >= v15)
  {
    uint64_t v23 = (char *)v15 - (char *)v16;
    uint64_t v24 = v23 >> 2;
    if ((unint64_t)(v23 >> 2) <= 1) {
      uint64_t v24 = 1;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25 >> 61) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v26 = (float *)operator new(8 * v25);
    float64x2_t v111 = (char *)&v26[2 * v25];
    *int v26 = 0.0;
    v26[1] = v21;
    float64x2_t v22 = v26 + 2;
    if (v16) {
      operator delete(v16);
    }
    float32x4_t v16 = v26;
  }
  else
  {
    float64x2_t v111 = (char *)v15;
    *float32x4_t v16 = 0.0;
    v16[1] = v21;
    float64x2_t v22 = v16 + 2;
  }
  unsigned int v27 = v10;
  double v11 = COERCE_DOUBLE(vdup_n_s32(0x7FC00000u));
  unsigned int v28 = -1;
  int v17 = 2143289344;
  float v29 = INFINITY;
  do
  {
    float v30 = *(float *)&v9;
    if (a2) {
      float v30 = *a2;
    }
    float32x4_t v31 = v22 - 2;
    if (v30 <= *(v22 - 1))
    {
      v22 -= 2;
      continue;
    }
    unsigned int v112 = v27;
    std::vector<unsigned int> __p = v16;
    uint64_t v32 = a1[3];
    uint64_t v33 = v32 + 40 * *(unsigned int *)v31;
    unsigned int v36 = *(_DWORD *)(v33 + 4);
    float64x2_t v35 = (int *)(v33 + 4);
    unsigned int v34 = v36;
    float64x2_t v37 = v35 + 1;
    unsigned int v38 = v35[1];
    if (v36 == -1 && v38 == -1)
    {
      uint64_t v47 = v32 + 40 * *(unsigned int *)v31;
      int v48 = *(_DWORD *)(v47 + 16);
      if (!v48)
      {
LABEL_79:
        v22 -= 2;
LABEL_80:
        float32x4_t v16 = __p;
        goto LABEL_153;
      }
      uint64_t v49 = *(unsigned int *)(v47 + 12);
      uint64_t v50 = (unsigned int *)(a1[6] + 4 * v49);
      uint64_t v51 = 4 * (v48 + v49) - 4 * v49;
      unsigned int v27 = v112;
      while (1)
      {
        uint64_t v52 = *v50;
        unint64_t v114 = 0;
        if (v52)
        {
          uint64_t v53 = a1[18];
          unsigned int v54 = *(_DWORD *)(v53 + 4 * (v52 - 1));
        }
        else
        {
          unsigned int v54 = 0;
          uint64_t v53 = a1[18];
        }
        uint64_t v55 = a1[15];
        uint64_t v56 = v54 + 1;
        unsigned int v57 = *(_DWORD *)(v53 + 4 * v52) - v54;
        if (v57 == 4)
        {
          geom_closest_point_to_cubic_bezier_2f((float *)&v114 + 1, (float *)&v114, a5, *(float32x2_t *)(v55 + 8 * v54), *(float32x2_t *)(v55 + 8 * v56), *(float32x2_t *)(v55 + 8 * (v54 + 2)), *(float32x2_t *)(v55 + 8 * (v54 + 3)), (uint64_t)a3, a4);
        }
        else if (v57 == 3)
        {
          geom_closest_point_to_quadratic_bezier_2f((float *)&v114 + 1, (float *)&v114, a5, *(float32x2_t *)(v55 + 8 * v54), *(float32x2_t *)(v55 + 8 * v56), *(float32x2_t *)(v55 + 8 * (v54 + 2)));
        }
        else
        {
          float32x2_t v58 = 0;
          if (v57 == 2)
          {
            float32x2_t v59 = *(float32x2_t *)(v55 + 8 * v54);
            float32x2_t v60 = *(float32x2_t *)(v55 + 8 * v56);
            float32x2_t v61 = vsub_f32(v60, v59);
            float32x2_t v62 = vmul_f32(v61, v61);
            float v63 = 0.0;
            if (vaddv_f32(v62) != 0.0)
            {
              float32x2_t v64 = vmul_f32(vsub_f32(a5, v59), v61);
              float v63 = fmaxf(fminf(vdiv_f32(vadd_f32(v64, (float32x2_t)vdup_lane_s32((int32x2_t)v64, 1)), vadd_f32(v62, (float32x2_t)vdup_lane_s32((int32x2_t)v62, 1))).f32[0], 1.0), 0.0);
            }
            float32x2_t v58 = vmla_n_f32(vmul_n_f32(v60, v63), v59, 1.0 - v63);
            float32x2_t v65 = vsub_f32(a5, v58);
            unint64_t v114 = __PAIR64__(LODWORD(v63), COERCE_UNSIGNED_INT(vaddv_f32(vmul_f32(v65, v65))));
          }
        }
        if (*(float *)&v114 < v29 || *(float *)&v114 == v29 && v28 > v52)
        {
          int v17 = HIDWORD(v114);
          float v29 = *(float *)&v114;
          unsigned int v28 = v52;
        }
        float v66 = *(float *)&v9;
        if (a2) {
          float v66 = *a2;
        }
        float32x2_t v67 = vsub_f32(a5, v58);
        float v68 = vaddv_f32(vmul_f32(v67, v67));
        if (v68 >= v66)
        {
          unsigned int v69 = v27;
          if (a3) {
            unsigned int v69 = *a3;
          }
          if (v68 != v66 || v52 >= v69) {
            goto LABEL_74;
          }
        }
        if (a2)
        {
          *a2 = v68;
          if (!a3) {
            goto LABEL_72;
          }
        }
        else
        {
          *(float *)&int v9 = v68;
          if (!a3)
          {
LABEL_72:
            unsigned int v27 = v52;
            goto LABEL_73;
          }
        }
        *a3 = v52;
LABEL_73:
        double v11 = *(double *)&v58;
LABEL_74:
        ++v50;
        v51 -= 4;
        if (!v51)
        {
          float64x2_t v22 = v31;
          float32x4_t v16 = __p;
          goto LABEL_183;
        }
      }
    }
    float32x2_t v40 = vsub_f32(vmaxnm_f32(vminnm_f32(a5, *(float32x2_t *)(v32 + 40 * v34 + 32)), *(float32x2_t *)(v32 + 40 * v34 + 24)), a5);
    float32x2_t v41 = vmul_f32(v40, v40);
    float v42 = vaddv_f32(v41);
    float32x2_t v43 = vsub_f32(vmaxnm_f32(vminnm_f32(a5, *(float32x2_t *)(v32 + 40 * v38 + 32)), *(float32x2_t *)(v32 + 40 * v38 + 24)), a5);
    float32x2_t v44 = vmul_f32(v43, v43);
    float v45 = vaddv_f32(v44);
    if (v42 >= v30 || v45 >= v30)
    {
      if (v42 >= v30)
      {
        if (v45 >= v30) {
          goto LABEL_79;
        }
        if (v31 < (float *)v111)
        {
          *((_DWORD *)v22 - 2) = v38;
          *(v22 - 1) = v45;
          goto LABEL_80;
        }
        uint64_t v84 = ((char *)v31 - (char *)__p) >> 3;
        unint64_t v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 61) {
          abort();
        }
        if ((v111 - (char *)__p) >> 2 > v85) {
          unint64_t v85 = (v111 - (char *)__p) >> 2;
        }
        if ((unint64_t)(v111 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v86 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v86 = v85;
        }
        if (v86)
        {
          if (v86 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unsigned int v87 = (char *)operator new(8 * v86);
        }
        else
        {
          unsigned int v87 = 0;
        }
        float64x2_t v107 = (float *)&v87[8 * v84];
        float64x2_t v108 = &v87[8 * v86];
        *(_DWORD *)float64x2_t v107 = v38;
        v107[1] = v45;
        float64x2_t v22 = v107 + 2;
        float64x2_t v111 = v108;
        if (v31 == __p) {
          goto LABEL_180;
        }
        do
        {
          uint64_t v109 = *((void *)v31 - 1);
          v31 -= 2;
          *((void *)v107 - 1) = v109;
          v107 -= 2;
        }
        while (v31 != __p);
        if (__p) {
LABEL_180:
        }
          operator delete(__p);
        float32x4_t v16 = v107;
        goto LABEL_182;
      }
      if (v31 < (float *)v111)
      {
        *((_DWORD *)v22 - 2) = v34;
        *(v22 - 1) = v42;
        goto LABEL_80;
      }
      uint64_t v76 = ((char *)v31 - (char *)__p) >> 3;
      unint64_t v77 = v76 + 1;
      if ((unint64_t)(v76 + 1) >> 61) {
        abort();
      }
      if ((v111 - (char *)__p) >> 2 > v77) {
        unint64_t v77 = (v111 - (char *)__p) >> 2;
      }
      if ((unint64_t)(v111 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v78 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v78 = v77;
      }
      if (v78)
      {
        if (v78 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        uint64_t v79 = (char *)operator new(8 * v78);
      }
      else
      {
        uint64_t v79 = 0;
      }
      float64x2_t v95 = (float *)&v79[8 * v76];
      *(_DWORD *)float64x2_t v95 = v34;
      v95[1] = v42;
      float64x2_t v22 = v95 + 2;
      float64x2_t v111 = &v79[8 * v78];
      if (v31 == __p)
      {
        unsigned int v27 = v112;
      }
      else
      {
        unsigned int v27 = v112;
        do
        {
          uint64_t v96 = *((void *)v31 - 1);
          v31 -= 2;
          *((void *)v95 - 1) = v96;
          v95 -= 2;
        }
        while (v31 != __p);
        if (!__p) {
          goto LABEL_175;
        }
      }
      operator delete(__p);
LABEL_175:
      float32x4_t v16 = v95;
      continue;
    }
    if (vcgt_f32(vadd_f32(v44, (float32x2_t)vdup_lane_s32((int32x2_t)v44, 1)), vadd_f32(v41, (float32x2_t)vdup_lane_s32((int32x2_t)v41, 1))).u8[0])
    {
      if (v31 >= (float *)v111)
      {
        uint64_t v72 = ((char *)v31 - (char *)__p) >> 3;
        unint64_t v73 = v72 + 1;
        if ((unint64_t)(v72 + 1) >> 61) {
          abort();
        }
        if ((v111 - (char *)__p) >> 2 > v73) {
          unint64_t v73 = (v111 - (char *)__p) >> 2;
        }
        if ((unint64_t)(v111 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v74 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v74 = v73;
        }
        if (v74)
        {
          if (v74 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v75 = (char *)operator new(8 * v74);
        }
        else
        {
          uint64_t v75 = 0;
        }
        float64x2_t v88 = (float *)&v75[8 * v72];
        *(_DWORD *)float64x2_t v88 = v38;
        v88[1] = v45;
        uint64_t v71 = v88 + 2;
        float64x2_t v111 = &v75[8 * v74];
        if (v31 == __p) {
          goto LABEL_125;
        }
        do
        {
          uint64_t v89 = *((void *)v31 - 1);
          v31 -= 2;
          *((void *)v88 - 1) = v89;
          v88 -= 2;
        }
        while (v31 != __p);
        if (__p) {
LABEL_125:
        }
          operator delete(__p);
        float32x4_t v16 = v88;
      }
      else
      {
        *((_DWORD *)v22 - 2) = v38;
        *(v22 - 1) = v45;
        uint64_t v71 = v22;
        float32x4_t v16 = __p;
      }
      int v90 = *v35;
      if (v71 < (float *)v111)
      {
        *(_DWORD *)uint64_t v71 = v90;
        v71[1] = v42;
        goto LABEL_152;
      }
      uint64_t v91 = ((char *)v71 - (char *)v16) >> 3;
      unint64_t v92 = v91 + 1;
      if ((unint64_t)(v91 + 1) >> 61) {
        abort();
      }
      if ((v111 - (char *)v16) >> 2 > v92) {
        unint64_t v92 = (v111 - (char *)v16) >> 2;
      }
      if ((unint64_t)(v111 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v93 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v93 = v92;
      }
      if (v93)
      {
        if (v93 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        float32x4_t v94 = (char *)operator new(8 * v93);
      }
      else
      {
        float32x4_t v94 = 0;
      }
      float64x2_t v104 = (float *)&v94[8 * v91];
      *(_DWORD *)float64x2_t v104 = v90;
      v104[1] = v42;
      float64x2_t v22 = v104 + 2;
      float64x2_t v111 = &v94[8 * v93];
      if (v71 == v16) {
        goto LABEL_171;
      }
      do
      {
        uint64_t v105 = *((void *)v71 - 1);
        v71 -= 2;
        *((void *)v104 - 1) = v105;
        v104 -= 2;
      }
      while (v71 != v16);
    }
    else
    {
      if (v31 >= (float *)v111)
      {
        uint64_t v80 = ((char *)v31 - (char *)__p) >> 3;
        unint64_t v81 = v80 + 1;
        if ((unint64_t)(v80 + 1) >> 61) {
          abort();
        }
        if ((v111 - (char *)__p) >> 2 > v81) {
          unint64_t v81 = (v111 - (char *)__p) >> 2;
        }
        if ((unint64_t)(v111 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v82 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v82 = v81;
        }
        if (v82)
        {
          if (v82 >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unsigned int v83 = (char *)operator new(8 * v82);
        }
        else
        {
          unsigned int v83 = 0;
        }
        float64x2_t v97 = (float *)&v83[8 * v80];
        *(_DWORD *)float64x2_t v97 = v34;
        v97[1] = v42;
        uint64_t v71 = v97 + 2;
        float64x2_t v111 = &v83[8 * v82];
        if (v31 == __p) {
          goto LABEL_148;
        }
        do
        {
          uint64_t v98 = *((void *)v31 - 1);
          v31 -= 2;
          *((void *)v97 - 1) = v98;
          v97 -= 2;
        }
        while (v31 != __p);
        if (__p) {
LABEL_148:
        }
          operator delete(__p);
        float32x4_t v16 = v97;
      }
      else
      {
        *((_DWORD *)v22 - 2) = v34;
        *(v22 - 1) = v42;
        uint64_t v71 = v22;
        float32x4_t v16 = __p;
      }
      int v99 = *v37;
      if (v71 < (float *)v111)
      {
        *(_DWORD *)uint64_t v71 = v99;
        v71[1] = v45;
LABEL_152:
        float64x2_t v22 = v71 + 2;
LABEL_153:
        unsigned int v27 = v112;
        continue;
      }
      uint64_t v100 = ((char *)v71 - (char *)v16) >> 3;
      unint64_t v101 = v100 + 1;
      if ((unint64_t)(v100 + 1) >> 61) {
        abort();
      }
      if ((v111 - (char *)v16) >> 2 > v101) {
        unint64_t v101 = (v111 - (char *)v16) >> 2;
      }
      if ((unint64_t)(v111 - (char *)v16) >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v102 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v102 = v101;
      }
      if (v102)
      {
        if (v102 >> 61) {
          std::__throw_bad_array_new_length[abi:nn180100]();
        }
        float64x2_t v103 = (char *)operator new(8 * v102);
      }
      else
      {
        float64x2_t v103 = 0;
      }
      float64x2_t v104 = (float *)&v103[8 * v100];
      *(_DWORD *)float64x2_t v104 = v99;
      v104[1] = v45;
      float64x2_t v22 = v104 + 2;
      float64x2_t v111 = &v103[8 * v102];
      if (v71 == v16)
      {
LABEL_171:
        operator delete(v16);
        goto LABEL_172;
      }
      do
      {
        uint64_t v106 = *((void *)v71 - 1);
        v71 -= 2;
        *((void *)v104 - 1) = v106;
        v104 -= 2;
      }
      while (v71 != v16);
    }
    if (v16) {
      goto LABEL_171;
    }
LABEL_172:
    float32x4_t v16 = v104;
LABEL_182:
    unsigned int v27 = v112;
LABEL_183:
    ;
  }
  while (v16 != v22);
  if (v22) {
    operator delete(v22);
  }
  a4 = v110;
  if (v110) {
    goto LABEL_11;
  }
  return v11;
}

void sub_236E0FB38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void geom_bezier_curve_bvh_closest_point_2d(void *a1, double *a2, unsigned int *a3, double *a4, float64x2_t a5)
{
  uint64_t v5 = a4;
  float64x2_t v8 = a5;
  if (a2)
  {
    *a2 = INFINITY;
    uint64_t v10 = 0;
  }
  else
  {
    uint64_t v10 = 0x7FF0000000000000;
  }
  int v11 = -1;
  if (a3)
  {
    *a3 = -1;
    int v11 = 0;
  }
  if (a1[7] == a1[6] || (int64x2_t v12 = (float64x2_t *)a1[3], (v13 = a1[4] - (void)v12) == 0))
  {
    uint64_t v17 = 0x7FF8000000000000;
    if (!a4) {
      return;
    }
    goto LABEL_11;
  }
  unsigned int v14 = __clz(v13 >> 6);
  if (v14 == 31)
  {
    int64x2_t v15 = 0;
    float32x4_t v16 = 0;
  }
  else
  {
    unsigned int v18 = 31 - v14;
    unsigned int v19 = (double *)operator new(16 * (31 - v14));
    float64x2_t v8 = a5;
    float32x4_t v16 = v19;
    int64x2_t v15 = &v19[2 * v18];
  }
  float64x2_t v20 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v8, v12[3]), v12[2]), v8);
  double v21 = vaddvq_f64(vmulq_f64(v20, v20));
  float64x2_t v103 = v5;
  if (v16 >= v15)
  {
    uint64_t v23 = (char *)v15 - (char *)v16;
    uint64_t v24 = v23 >> 3;
    if ((unint64_t)(v23 >> 3) <= 1) {
      uint64_t v24 = 1;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v24;
    }
    if (v25 >> 60) {
      std::__throw_bad_array_new_length[abi:nn180100]();
    }
    int v26 = (double *)operator new(16 * v25);
    float64x2_t v104 = (char *)&v26[2 * v25];
    *int v26 = 0.0;
    float64x2_t v22 = v26 + 2;
    v26[1] = v21;
    if (v16) {
      operator delete(v16);
    }
    float32x4_t v16 = v26;
    float64x2_t v8 = a5;
  }
  else
  {
    float64x2_t v104 = (char *)v15;
    *float32x4_t v16 = 0.0;
    float64x2_t v22 = v16 + 2;
    v16[1] = v21;
  }
  unsigned int v27 = v11;
  unsigned int v28 = -1;
  uint64_t v17 = 0x7FF8000000000000;
  double v29 = INFINITY;
  do
  {
    double v30 = *(double *)&v10;
    if (a2) {
      double v30 = *a2;
    }
    float32x4_t v31 = (char *)(v22 - 2);
    if (v30 <= *(v22 - 1))
    {
      v22 -= 2;
      continue;
    }
    unsigned int v105 = v27;
    std::vector<unsigned int> __p = v16;
    uint64_t v32 = a1[3];
    uint64_t v33 = (unsigned int *)(v32 + ((unint64_t)*(unsigned int *)v31 << 6));
    float64x2_t v35 = (int *)(v33 + 1);
    uint64_t v34 = v33[1];
    unsigned int v36 = (int *)(v33 + 2);
    uint64_t v37 = v33[2];
    if (v33[1] != -1 || v37 != -1)
    {
      float64x2_t v39 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v8, *(float64x2_t *)(v32 + (v34 << 6) + 48)), *(float64x2_t *)(v32 + (v34 << 6) + 32)), v8);
      int64x2_t v40 = (int64x2_t)vmulq_f64(v39, v39);
      double v41 = vaddvq_f64((float64x2_t)v40);
      float64x2_t v42 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v8, *(float64x2_t *)(v32 + (v37 << 6) + 48)), *(float64x2_t *)(v32 + (v37 << 6) + 32)), v8);
      int64x2_t v43 = (int64x2_t)vmulq_f64(v42, v42);
      double v44 = vaddvq_f64((float64x2_t)v43);
      if (v41 >= v30 || v44 >= v30)
      {
        if (v41 >= v30)
        {
          if (v44 < v30)
          {
            if (v31 >= v104)
            {
              uint64_t v84 = (v31 - (char *)__p) >> 4;
              unint64_t v85 = v84 + 1;
              if ((unint64_t)(v84 + 1) >> 60) {
                abort();
              }
              if ((v104 - (char *)__p) >> 3 > v85) {
                unint64_t v85 = (v104 - (char *)__p) >> 3;
              }
              if ((unint64_t)(v104 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v86 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v86 = v85;
              }
              if (v86)
              {
                if (v86 >> 60) {
                  std::__throw_bad_array_new_length[abi:nn180100]();
                }
                unsigned int v87 = (char *)operator new(16 * v86);
                float64x2_t v8 = a5;
              }
              else
              {
                unsigned int v87 = 0;
              }
              unint64_t v102 = (double *)&v87[16 * v84];
              float64x2_t v104 = &v87[16 * v86];
              *(_DWORD *)unint64_t v102 = v37;
              v102[1] = v44;
              float64x2_t v22 = v102 + 2;
              if (v31 == (char *)__p) {
                goto LABEL_179;
              }
              do
              {
                *((_OWORD *)v102 - 1) = *((_OWORD *)v31 - 1);
                v102 -= 2;
                v31 -= 16;
              }
              while (v31 != (char *)__p);
              if (__p)
              {
LABEL_179:
                operator delete(__p);
                float64x2_t v8 = a5;
              }
              float32x4_t v16 = v102;
              goto LABEL_181;
            }
            *((_DWORD *)v22 - 4) = v37;
            *(v22 - 1) = v44;
            goto LABEL_80;
          }
          goto LABEL_79;
        }
        if (v31 < v104)
        {
          *((_DWORD *)v22 - 4) = v34;
          *(v22 - 1) = v41;
          goto LABEL_80;
        }
        uint64_t v76 = (v31 - (char *)__p) >> 4;
        unint64_t v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 60) {
          abort();
        }
        if ((v104 - (char *)__p) >> 3 > v77) {
          unint64_t v77 = (v104 - (char *)__p) >> 3;
        }
        if ((unint64_t)(v104 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v78 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v77;
        }
        if (v78)
        {
          if (v78 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v79 = (char *)operator new(16 * v78);
          float64x2_t v8 = a5;
        }
        else
        {
          uint64_t v79 = 0;
        }
        float32x4_t v94 = (double *)&v79[16 * v76];
        float64x2_t v104 = &v79[16 * v78];
        *(_DWORD *)float32x4_t v94 = v34;
        v94[1] = v41;
        float64x2_t v22 = v94 + 2;
        if (v31 == (char *)__p)
        {
          unsigned int v27 = v105;
        }
        else
        {
          unsigned int v27 = v105;
          do
          {
            *((_OWORD *)v94 - 1) = *((_OWORD *)v31 - 1);
            v94 -= 2;
            v31 -= 16;
          }
          while (v31 != (char *)__p);
          if (!__p) {
            goto LABEL_174;
          }
        }
        operator delete(__p);
        float64x2_t v8 = a5;
LABEL_174:
        float32x4_t v16 = v94;
        continue;
      }
      if (vmovn_s64(vcgtq_f64(vaddq_f64((float64x2_t)v43, (float64x2_t)vdupq_laneq_s64(v43, 1)), vaddq_f64((float64x2_t)v40, (float64x2_t)vdupq_laneq_s64(v40, 1)))).u8[0])
      {
        if (v31 >= v104)
        {
          uint64_t v72 = (v31 - (char *)__p) >> 4;
          unint64_t v73 = v72 + 1;
          if ((unint64_t)(v72 + 1) >> 60) {
            abort();
          }
          if ((v104 - (char *)__p) >> 3 > v73) {
            unint64_t v73 = (v104 - (char *)__p) >> 3;
          }
          if ((unint64_t)(v104 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v74 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v74 = v73;
          }
          if (v74)
          {
            if (v74 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            uint64_t v75 = (char *)operator new(16 * v74);
            float64x2_t v8 = a5;
          }
          else
          {
            uint64_t v75 = 0;
          }
          float64x2_t v88 = (double *)&v75[16 * v72];
          unint64_t v70 = (double *)&v75[16 * v74];
          *(_DWORD *)float64x2_t v88 = v37;
          v88[1] = v44;
          unsigned int v69 = v88 + 2;
          if (v31 == (char *)__p) {
            goto LABEL_125;
          }
          do
          {
            *((_OWORD *)v88 - 1) = *((_OWORD *)v31 - 1);
            v88 -= 2;
            v31 -= 16;
          }
          while (v31 != (char *)__p);
          if (__p)
          {
LABEL_125:
            operator delete(__p);
            float64x2_t v8 = a5;
          }
          float32x4_t v16 = v88;
        }
        else
        {
          *((_DWORD *)v22 - 4) = v37;
          *(v22 - 1) = v44;
          unsigned int v69 = v22;
          float32x4_t v16 = __p;
          unint64_t v70 = (double *)v104;
        }
        int v89 = *v35;
        if (v69 < v70)
        {
          float64x2_t v104 = (char *)v70;
          *(_DWORD *)unsigned int v69 = v89;
          v69[1] = v41;
LABEL_152:
          float64x2_t v22 = v69 + 2;
          goto LABEL_181;
        }
        uint64_t v90 = ((char *)v69 - (char *)v16) >> 4;
        unint64_t v91 = v90 + 1;
        if ((unint64_t)(v90 + 1) >> 60) {
          abort();
        }
        if (v70 - v16 > v91) {
          unint64_t v91 = v70 - v16;
        }
        if ((unint64_t)((char *)v70 - (char *)v16) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v92 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v92 = v91;
        }
        if (v92)
        {
          if (v92 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          unint64_t v93 = (char *)operator new(16 * v92);
          float64x2_t v8 = a5;
        }
        else
        {
          unint64_t v93 = 0;
        }
        unint64_t v101 = (double *)&v93[16 * v90];
        float64x2_t v104 = &v93[16 * v92];
        *(_DWORD *)unint64_t v101 = v89;
        v101[1] = v41;
        float64x2_t v22 = v101 + 2;
        if (v69 == v16) {
          goto LABEL_170;
        }
        do
        {
          *((_OWORD *)v101 - 1) = *((_OWORD *)v69 - 1);
          v101 -= 2;
          v69 -= 2;
        }
        while (v69 != v16);
      }
      else
      {
        if (v31 >= v104)
        {
          uint64_t v80 = (v31 - (char *)__p) >> 4;
          unint64_t v81 = v80 + 1;
          if ((unint64_t)(v80 + 1) >> 60) {
            abort();
          }
          if ((v104 - (char *)__p) >> 3 > v81) {
            unint64_t v81 = (v104 - (char *)__p) >> 3;
          }
          if ((unint64_t)(v104 - (char *)__p) >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v82 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v82 = v81;
          }
          if (v82)
          {
            if (v82 >> 60) {
              std::__throw_bad_array_new_length[abi:nn180100]();
            }
            unsigned int v83 = (char *)operator new(16 * v82);
            float64x2_t v8 = a5;
          }
          else
          {
            unsigned int v83 = 0;
          }
          float64x2_t v95 = (double *)&v83[16 * v80];
          uint64_t v71 = (double *)&v83[16 * v82];
          *(_DWORD *)float64x2_t v95 = v34;
          v95[1] = v41;
          unsigned int v69 = v95 + 2;
          if (v31 == (char *)__p) {
            goto LABEL_148;
          }
          do
          {
            *((_OWORD *)v95 - 1) = *((_OWORD *)v31 - 1);
            v95 -= 2;
            v31 -= 16;
          }
          while (v31 != (char *)__p);
          if (__p)
          {
LABEL_148:
            operator delete(__p);
            float64x2_t v8 = a5;
          }
          float32x4_t v16 = v95;
        }
        else
        {
          *((_DWORD *)v22 - 4) = v34;
          *(v22 - 1) = v41;
          unsigned int v69 = v22;
          float32x4_t v16 = __p;
          uint64_t v71 = (double *)v104;
        }
        int v96 = *v36;
        if (v69 < v71)
        {
          float64x2_t v104 = (char *)v71;
          *(_DWORD *)unsigned int v69 = v96;
          v69[1] = v44;
          goto LABEL_152;
        }
        uint64_t v97 = ((char *)v69 - (char *)v16) >> 4;
        unint64_t v98 = v97 + 1;
        if ((unint64_t)(v97 + 1) >> 60) {
          abort();
        }
        if (v71 - v16 > v98) {
          unint64_t v98 = v71 - v16;
        }
        if ((unint64_t)((char *)v71 - (char *)v16) >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v99 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v99 = v98;
        }
        if (v99)
        {
          if (v99 >> 60) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v100 = (char *)operator new(16 * v99);
          float64x2_t v8 = a5;
        }
        else
        {
          uint64_t v100 = 0;
        }
        unint64_t v101 = (double *)&v100[16 * v97];
        float64x2_t v104 = &v100[16 * v99];
        *(_DWORD *)unint64_t v101 = v96;
        v101[1] = v44;
        float64x2_t v22 = v101 + 2;
        if (v69 == v16) {
          goto LABEL_170;
        }
        do
        {
          *((_OWORD *)v101 - 1) = *((_OWORD *)v69 - 1);
          v101 -= 2;
          v69 -= 2;
        }
        while (v69 != v16);
      }
      if (!v16)
      {
LABEL_171:
        float32x4_t v16 = v101;
        goto LABEL_181;
      }
LABEL_170:
      operator delete(v16);
      float64x2_t v8 = a5;
      goto LABEL_171;
    }
    unsigned int v46 = v33[4];
    if (v46)
    {
      uint64_t v47 = v33[3];
      int v48 = (unsigned int *)(a1[6] + 4 * v47);
      uint64_t v49 = 4 * (v46 + v47) - 4 * v47;
      unsigned int v27 = v105;
      while (1)
      {
        uint64_t v50 = *v48;
        double v108 = 0.0;
        uint64_t v109 = 0;
        if (v50)
        {
          uint64_t v51 = a1[18];
          unsigned int v52 = *(_DWORD *)(v51 + 4 * (v50 - 1));
        }
        else
        {
          unsigned int v52 = 0;
          uint64_t v51 = a1[18];
        }
        uint64_t v53 = a1[15];
        uint64_t v54 = v52 + 1;
        unsigned int v55 = *(_DWORD *)(v51 + 4 * v50) - v52;
        if (v55 == 4) {
          break;
        }
        if (v55 == 3)
        {
          geom_closest_point_to_quadratic_bezier_2d((double *)&v109, &v108, v8, *(float64x2_t *)(v53 + 16 * v52), *(float64x2_t *)(v53 + 16 * v54), *(float64x2_t *)(v53 + 16 * (v52 + 2)));
LABEL_55:
          float64x2_t v8 = a5;
          goto LABEL_56;
        }
        float64x2_t v56 = 0uLL;
        if (v55 == 2)
        {
          float64x2_t v57 = *(float64x2_t *)(v53 + 16 * v52);
          float64x2_t v58 = *(float64x2_t *)(v53 + 16 * v54);
          float64x2_t v59 = vsubq_f64(v58, v57);
          int64x2_t v60 = (int64x2_t)vmulq_f64(v59, v59);
          double v61 = 0.0;
          if (vaddvq_f64((float64x2_t)v60) != 0.0)
          {
            int64x2_t v62 = (int64x2_t)vmulq_f64(vsubq_f64(v8, v57), v59);
            double v61 = fmax(fmin(vdivq_f64(vaddq_f64((float64x2_t)v62, (float64x2_t)vdupq_laneq_s64(v62, 1)), vaddq_f64((float64x2_t)v60, (float64x2_t)vdupq_laneq_s64(v60, 1))).f64[0], 1.0), 0.0);
          }
          float64x2_t v56 = vmlaq_n_f64(vmulq_n_f64(v58, v61), v57, 1.0 - v61);
          float64x2_t v63 = vsubq_f64(v8, v56);
          double v108 = vaddvq_f64(vmulq_f64(v63, v63));
          uint64_t v109 = *(void *)&v61;
        }
LABEL_56:
        if (v108 < v29 || v108 == v29 && v28 > v50)
        {
          uint64_t v17 = v109;
          double v29 = v108;
          unsigned int v28 = v50;
        }
        double v64 = *(double *)&v10;
        if (a2) {
          double v64 = *a2;
        }
        float64x2_t v65 = vsubq_f64(v8, v56);
        double v66 = vaddvq_f64(vmulq_f64(v65, v65));
        if (v66 >= v64)
        {
          unsigned int v67 = v27;
          if (a3) {
            unsigned int v67 = *a3;
          }
          if (v66 != v64 || v50 >= v67) {
            goto LABEL_74;
          }
        }
        if (a2)
        {
          *a2 = v66;
          if (!a3) {
            goto LABEL_73;
          }
        }
        else
        {
          uint64_t v10 = *(void *)&v66;
          if (!a3)
          {
LABEL_73:
            unsigned int v27 = v50;
            goto LABEL_74;
          }
        }
        *a3 = v50;
LABEL_74:
        ++v48;
        v49 -= 4;
        if (!v49)
        {
          float64x2_t v22 = (double *)v31;
          float32x4_t v16 = __p;
          goto LABEL_182;
        }
      }
      geom_closest_point_to_cubic_bezier_2d((double *)&v109, &v108, v8, *(float64x2_t *)(v53 + 16 * v52), *(float64x2_t *)(v53 + 16 * v54), *(float64x2_t *)(v53 + 16 * (v52 + 2)), *(float64x2_t *)(v53 + 16 * (v52 + 3)), (uint64_t)a3, a4);
      goto LABEL_55;
    }
LABEL_79:
    v22 -= 2;
LABEL_80:
    float32x4_t v16 = __p;
LABEL_181:
    unsigned int v27 = v105;
LABEL_182:
    ;
  }
  while (v16 != v22);
  if (v22) {
    operator delete(v22);
  }
  uint64_t v5 = v103;
  if (v103) {
LABEL_11:
  }
    *uint64_t v5 = v17;
}

void sub_236E10530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t geom_create_kd_tree_with_default_options_2f(uint64_t a1, uint64_t a2)
{
  uint64_t opt_2f_obj_alloc = geom_kd_tree_create_opt_2f_obj_alloc();
  *(void *)(opt_2f_obj_alloc + 16) = 1;
}

uint64_t geom_create_kd_tree_with_default_options_2d(uint64_t a1, uint64_t a2)
{
  uint64_t opt_2d_obj_alloc = geom_kd_tree_create_opt_2d_obj_alloc();
  *(void *)(opt_2d_obj_alloc + 16) = 1;
}

uint64_t geom_create_kd_tree_with_default_options_3f(uint64_t a1, uint64_t a2)
{
  uint64_t opt_3f_obj_alloc = geom_kd_tree_create_opt_3f_obj_alloc();
  *(void *)(opt_3f_obj_alloc + 16) = 1;
}

uint64_t geom_create_kd_tree_with_default_options_3d(uint64_t a1, uint64_t a2)
{
  uint64_t opt_3d_obj_alloc = geom_kd_tree_create_opt_3d_obj_alloc();
  *(void *)(opt_3d_obj_alloc + 16) = 1;
}

uint64_t geom_create_kd_tree_create_opt_2f()
{
  uint64_t result = geom_kd_tree_create_opt_2f_obj_alloc();
  *(void *)(result + 16) = 1;
  return result;
}

uint64_t geom_create_kd_tree_create_opt_2d()
{
  uint64_t result = geom_kd_tree_create_opt_2d_obj_alloc();
  *(void *)(result + 16) = 1;
  return result;
}

uint64_t geom_create_kd_tree_create_opt_3f()
{
  uint64_t result = geom_kd_tree_create_opt_3f_obj_alloc();
  *(void *)(result + 16) = 1;
  return result;
}

uint64_t geom_create_kd_tree_create_opt_3d()
{
  uint64_t result = geom_kd_tree_create_opt_3d_obj_alloc();
  *(void *)(result + 16) = 1;
  return result;
}

uint64_t geom_create_kd_tree_with_options_2f(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t anonymous namespace'::create_kd_tree_with_opt<float,(unsigned char)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v7 = a4;
    geom::kd_tree<float,(unsigned char)2>::reset(a4 + 16, a2, a1, *(unsigned __int8 *)(a3 + 16));
  }
  else
  {
    uint64_t v7 = geom_kd_tree_2f_obj_alloc();
    int v8 = *(unsigned __int8 *)(a3 + 16);
    v10[0] = a2;
    v10[1] = a1;
    *(unsigned char *)(v7 + 16) = 0;
    _ZN4geom19make_external_arrayINS_5sliceIDv2_fEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v10, v8, v7 + 24);
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
  }
  geom::kd_tree<float,(unsigned char)2>::build(v7 + 16, *(_DWORD *)(a3 + 20));
  return v7;
}

uint64_t geom_create_kd_tree_with_options_2d(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t anonymous namespace'::create_kd_tree_with_opt<double,(unsigned char)2>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v7 = a4;
    geom::kd_tree<float,(unsigned char)3>::reset(a4 + 16, a2, a1, *(unsigned __int8 *)(a3 + 16));
  }
  else
  {
    uint64_t v7 = geom_kd_tree_2d_obj_alloc();
    int v8 = *(unsigned __int8 *)(a3 + 16);
    v10[0] = a2;
    v10[1] = a1;
    *(unsigned char *)(v7 + 16) = 0;
    _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v10, v8, v7 + 24);
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
  }
  geom::kd_tree<double,(unsigned char)2>::build(v7 + 16, *(_DWORD *)(a3 + 20));
  return v7;
}

uint64_t geom_create_kd_tree_with_options_3f(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t anonymous namespace'::create_kd_tree_with_opt<float,(unsigned char)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v7 = a4;
    geom::kd_tree<float,(unsigned char)3>::reset(a4 + 16, a2, a1, *(unsigned __int8 *)(a3 + 16));
  }
  else
  {
    uint64_t v7 = geom_kd_tree_3f_obj_alloc();
    int v8 = *(unsigned __int8 *)(a3 + 16);
    v10[0] = a2;
    v10[1] = a1;
    *(unsigned char *)(v7 + 16) = 0;
    _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v10, v8, v7 + 24);
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
  }
  geom::kd_tree<float,(unsigned char)3>::build(v7 + 16, *(_DWORD *)(a3 + 20));
  return v7;
}

uint64_t geom_create_kd_tree_with_options_3d(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t anonymous namespace'::create_kd_tree_with_opt<double,(unsigned char)3>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v7 = a4;
    geom::kd_tree<double,(unsigned char)3>::reset(a4 + 16, a2, a1, *(unsigned __int8 *)(a3 + 16));
  }
  else
  {
    uint64_t v7 = geom_kd_tree_3d_obj_alloc();
    int v8 = *(unsigned __int8 *)(a3 + 16);
    v10[0] = a2;
    v10[1] = a1;
    *(unsigned char *)(v7 + 16) = 0;
    _ZN4geom19make_external_arrayINS_5sliceIDv3_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v10, v8, v7 + 24);
    *(_OWORD *)(v7 + 64) = 0u;
    *(_OWORD *)(v7 + 80) = 0u;
    *(_OWORD *)(v7 + 48) = 0u;
  }
  geom::kd_tree<double,(unsigned char)3>::build(v7 + 16, *(_DWORD *)(a3 + 20));
  return v7;
}

uint64_t geom_recreate_kd_tree_with_options_2f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t geom_recreate_kd_tree_with_options_2d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t geom_recreate_kd_tree_with_options_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t geom_recreate_kd_tree_with_options_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t geom_kd_tree_create_opt_get_should_copy_input_data_2f(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t geom_kd_tree_create_opt_set_should_copy_input_data_2f(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_should_copy_input_data_2d(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t geom_kd_tree_create_opt_set_should_copy_input_data_2d(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_should_copy_input_data_3f(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t geom_kd_tree_create_opt_set_should_copy_input_data_3f(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_should_copy_input_data_3d(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 16);
}

uint64_t geom_kd_tree_create_opt_set_should_copy_input_data_3d(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_build_strategy_2f(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t geom_kd_tree_create_opt_set_build_strategy_2f(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_build_strategy_2d(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t geom_kd_tree_create_opt_set_build_strategy_2d(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_build_strategy_3f(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t geom_kd_tree_create_opt_set_build_strategy_3f(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t geom_kd_tree_create_opt_get_build_strategy_3d(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t geom_kd_tree_create_opt_set_build_strategy_3d(uint64_t result, int a2)
{
  *(_DWORD *)(result + 20) = a2;
  return result;
}

uint64_t geom_create_kd_tree_2f(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = geom_kd_tree_2f_obj_alloc();
  v8[0] = a2;
  v8[1] = a1;
  *(unsigned char *)(v6 + 16) = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_fEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v8, 1, v6 + 24);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  geom::kd_tree<float,(unsigned char)2>::build(v6 + 16, a3);
  return v6;
}

uint64_t geom_create_kd_tree_2d(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = geom_kd_tree_2d_obj_alloc();
  v8[0] = a2;
  v8[1] = a1;
  *(unsigned char *)(v6 + 16) = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v8, 1, v6 + 24);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  geom::kd_tree<double,(unsigned char)2>::build(v6 + 16, a3);
  return v6;
}

uint64_t geom_create_kd_tree_3f(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = geom_kd_tree_3f_obj_alloc();
  v8[0] = a2;
  v8[1] = a1;
  *(unsigned char *)(v6 + 16) = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v8, 1, v6 + 24);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  geom::kd_tree<float,(unsigned char)3>::build(v6 + 16, a3);
  return v6;
}

uint64_t geom_create_kd_tree_3d(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = geom_kd_tree_3d_obj_alloc();
  v8[0] = a2;
  v8[1] = a1;
  *(unsigned char *)(v6 + 16) = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv3_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v8, 1, v6 + 24);
  *(_OWORD *)(v6 + 64) = 0u;
  *(_OWORD *)(v6 + 80) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  geom::kd_tree<double,(unsigned char)3>::build(v6 + 16, a3);
  return v6;
}

uint64_t geom_kd_tree_find_closest_2f(uint64_t a1, float32x2_t a2)
{
  float32x2_t v3 = a2;
  return geom::kd_tree<float,(unsigned char)2>::find_closest((void *)(a1 + 16), &v3);
}

uint64_t geom_kd_tree_find_closest_3f(uint64_t a1, float32x4_t a2)
{
  float32x4_t v3 = a2;
  return geom::kd_tree<float,(unsigned char)3>::find_closest((void *)(a1 + 16), &v3);
}

uint64_t geom_kd_tree_find_closest_2d(uint64_t a1, float64x2_t a2)
{
  float64x2_t v3 = a2;
  return geom::kd_tree<double,(unsigned char)2>::find_closest((void *)(a1 + 16), &v3);
}

uint64_t geom_kd_tree_find_closest_3d(uint64_t a1, float64x2_t *a2)
{
  float64x2_t v2 = a2[1];
  v4[0] = *a2;
  v4[1] = v2;
  return geom::kd_tree<double,(unsigned char)3>::find_closest((void *)(a1 + 16), v4);
}

uint64_t geom_kd_tree_find_within_radius_2f(uint64_t a1, uint64_t a2, float32x2_t a3, float a4)
{
  float32x2_t v8 = a3;
  uint64_t v5 = (void *)(a1 + 16);
  uint64_t v6 = (char **)geom::collection_to_vector<float>(a2);
  return geom::kd_tree<float,(unsigned char)2>::find_within_radius(v5, &v8, v6, a4);
}

uint64_t geom_kd_tree_find_within_radius_3f(uint64_t a1, uint64_t a2, float32x4_t a3, float a4)
{
  float32x4_t v8 = a3;
  uint64_t v5 = (void *)(a1 + 16);
  uint64_t v6 = (char **)geom::collection_to_vector<float>(a2);
  return geom::kd_tree<float,(unsigned char)3>::find_within_radius(v5, &v8, v6, a4);
}

uint64_t geom_kd_tree_find_within_radius_2d(uint64_t a1, uint64_t a2, float64x2_t a3, double a4)
{
  float64x2_t v8 = a3;
  uint64_t v5 = (void *)(a1 + 16);
  uint64_t v6 = (char **)geom::collection_to_vector<float>(a2);
  return geom::kd_tree<double,(unsigned char)2>::find_within_radius(v5, &v8, v6, a4);
}

uint64_t geom_kd_tree_find_within_radius_3d(uint64_t a1, float64x2_t *a2, uint64_t a3, double a4)
{
  float64x2_t v5 = a2[1];
  v9[0] = *a2;
  v9[1] = v5;
  uint64_t v6 = (void *)(a1 + 16);
  uint64_t v7 = (char **)geom::collection_to_vector<float>(a3);
  return geom::kd_tree<double,(unsigned char)3>::find_within_radius(v6, v9, v7, a4);
}

BOOL geom_kd_tree_is_node_valid_2f(uint64_t a1, unsigned int a2)
{
  return a2 && *(void *)(a1 + 32) >= (unint64_t)a2;
}

BOOL geom_kd_tree_is_node_valid_2d(uint64_t a1, unsigned int a2)
{
  return a2 && *(void *)(a1 + 32) >= (unint64_t)a2;
}

BOOL geom_kd_tree_is_node_valid_3f(uint64_t a1, unsigned int a2)
{
  return a2 && *(void *)(a1 + 32) >= (unint64_t)a2;
}

BOOL geom_kd_tree_is_node_valid_3d(uint64_t a1, unsigned int a2)
{
  return a2 && *(void *)(a1 + 32) >= (unint64_t)a2;
}

uint64_t geom_kd_tree_get_node_value_index_2f(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(void *)(a1 + 48) + 4 * a2);
}

uint64_t geom_kd_tree_get_node_value_index_2d(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(void *)(a1 + 48) + 4 * a2);
}

uint64_t geom_kd_tree_get_node_value_index_3f(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(void *)(a1 + 48) + 4 * a2);
}

uint64_t geom_kd_tree_get_node_value_index_3d(uint64_t a1, unsigned int a2)
{
  return *(unsigned int *)(*(void *)(a1 + 48) + 4 * a2);
}

uint64_t geom_kd_tree_get_node_split_axis_2f(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 72) + a2);
}

uint64_t geom_kd_tree_get_node_split_axis_3f(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 72) + a2);
}

uint64_t geom_kd_tree_get_node_split_axis_2d(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 72) + a2);
}

uint64_t geom_kd_tree_get_node_split_axis_3d(uint64_t a1, unsigned int a2)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 72) + a2);
}

uint64_t geom_kd_tree_points_2f(uint64_t a1, void *a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (a2) {
    *a2 = *(void *)(a1 + 32);
  }
  return result;
}

uint64_t geom_kd_tree_points_3f(uint64_t a1, void *a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (a2) {
    *a2 = *(void *)(a1 + 32);
  }
  return result;
}

uint64_t geom_kd_tree_points_2d(uint64_t a1, void *a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (a2) {
    *a2 = *(void *)(a1 + 32);
  }
  return result;
}

uint64_t geom_kd_tree_points_3d(uint64_t a1, void *a2)
{
  uint64_t result = *(void *)(a1 + 24);
  if (a2) {
    *a2 = *(void *)(a1 + 32);
  }
  return result;
}

uint64_t std::__throw_bad_variant_access[abi:nn180100]()
{
}

void *anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v7 = a3;
  uint64_t v5 = *a2;
  v10[0] = &unk_26EA040C0;
  v10[1] = v5;
  v10[3] = v10;
  v9[0] = &unk_26EA04150;
  v9[1] = &v7;
  v9[3] = v9;
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::__value_func[abi:nn180100]((uint64_t)v8, (uint64_t)v10);
  geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(a1, (uint64_t)v9, (uint64_t)v8, *((_DWORD *)a2 + 2));
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::~__value_func[abi:nn180100](v8);
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v9);
  return std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::~__value_func[abi:nn180100](v10);
}

void sub_236E110A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::~__value_func[abi:nn180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100]((uint64_t *)va1);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::~__value_func[abi:nn180100]((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

void *_ZN4geom19make_external_arrayINS_5sliceIDv2_fEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b@<X0>(void *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[1];
  if (v3)
  {
    if (a2) {
      operator new[]();
    }
    *(void *)a3 = *result;
    *(void *)(a3 + 8) = v3;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

void std::__function::__func<geom::bvh<float,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1},std::allocator<geom::bvh<float,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::~__func()
{
}

void *std::__function::__func<geom::bvh<float,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1},std::allocator<geom::bvh<float,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA040C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1},std::allocator<geom::bvh<float,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA040C0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1},std::allocator<geom::bvh<float,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::operator()(uint64_t a1, unsigned int *a2, double *a3, unsigned int *a4, double *a5)
{
  return (*(uint64_t (**)(void, void, double, double, double, double))(a1 + 8))(*a2, *a4, *a3, a3[1], *a5, a5[1]);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1},std::allocator<geom::bvh<float,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1},std::allocator<geom::bvh<float,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)2>(geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::target_type()
{
}

void std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__func()
{
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA04150;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04150;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,std::pair<geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::target_type()
{
}

uint64_t std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v7 = a3;
  uint64_t v5 = *a2;
  v10[0] = &unk_26EA041E0;
  v10[1] = v5;
  v10[3] = v10;
  v9[0] = &unk_26EA04270;
  v9[1] = &v7;
  v9[3] = v9;
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::__value_func[abi:nn180100]((uint64_t)v8, (uint64_t)v10);
  geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(a1, (uint64_t)v9, (uint64_t)v8, *((_DWORD *)a2 + 2));
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::~__value_func[abi:nn180100](v8);
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v9);
  return std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::~__value_func[abi:nn180100](v10);
}

void sub_236E115D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::~__value_func[abi:nn180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100]((uint64_t *)va1);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::~__value_func[abi:nn180100]((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

void *_ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b@<X0>(void *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[1];
  if (v3)
  {
    if (a2) {
      operator new[]();
    }
    *(void *)a3 = *result;
    *(void *)(a3 + 8) = v3;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

void std::__function::__func<geom::bvh<double,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1},std::allocator<geom::bvh<double,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::~__func()
{
}

void *std::__function::__func<geom::bvh<double,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1},std::allocator<geom::bvh<double,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA041E0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1},std::allocator<geom::bvh<double,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA041E0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1},std::allocator<geom::bvh<double,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::operator()(uint64_t a1, unsigned int *a2, __n128 *a3, unsigned int *a4, __n128 *a5)
{
  return (*(uint64_t (**)(void, void, __n128, __n128, __n128, __n128))(a1 + 8))(*a2, *a4, *a3, a3[1], *a5, a5[1]);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1},std::allocator<geom::bvh<double,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1},std::allocator<geom::bvh<double,(unsigned char)2>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)2>(geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::target_type()
{
}

void std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__func()
{
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA04270;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04270;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,std::pair<geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::target_type()
{
}

uint64_t std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(void *result, int a2, uint64_t a3)
{
  void v9[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = a3;
  switch(a2)
  {
    case 0:
      uint64_t v3 = v9;
      v9[0] = &unk_26EA04300;
      v9[1] = &v4;
      v9[3] = v9;
      geom::bvh<float,(unsigned char)3>::build_middle_split((uint64_t)result, (uint64_t)v9);
      goto LABEL_7;
    case 1:
      uint64_t v3 = v8;
      v8[0] = &unk_26EA04300;
      v8[1] = &v4;
      v8[3] = v8;
      geom::bvh<float,(unsigned char)3>::build_median((uint64_t)result, (uint64_t)v8);
      goto LABEL_7;
    case 2:
      uint64_t v3 = v7;
      v7[0] = &unk_26EA04300;
      v7[1] = &v4;
      v7[3] = v7;
      geom::bvh<float,(unsigned char)3>::build_surface_area_heuristic((uint64_t)result, (uint64_t)v7);
      goto LABEL_7;
    case 3:
      uint64_t v3 = v6;
      v6[0] = &unk_26EA04300;
      v6[1] = &v4;
      v6[3] = v6;
      geom::bvh<float,(unsigned char)3>::build_volume_heuristic((uint64_t)result, (uint64_t)v6);
      goto LABEL_7;
    case 4:
      uint64_t v3 = v5;
      v5[0] = &unk_26EA04300;
      v5[1] = &v4;
      float64x2_t v5[3] = v5;
      geom::bvh<float,(unsigned char)3>::build_intersection_volume_heuristic((uint64_t)result, (uint64_t)v5);
LABEL_7:
      uint64_t result = std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v3);
      break;
    default:
      return result;
  }
  return result;
}

void sub_236E11BB0(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100]((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void *anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v7 = a3;
  uint64_t v5 = *a2;
  v10[0] = &unk_26EA04380;
  v10[1] = v5;
  v10[3] = v10;
  v9[0] = &unk_26EA04410;
  v9[1] = &v7;
  v9[3] = v9;
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::__value_func[abi:nn180100]((uint64_t)v8, (uint64_t)v10);
  geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(a1, (uint64_t)v9, (uint64_t)v8, *((_DWORD *)a2 + 2));
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v8);
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v9);
  return std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v10);
}

void sub_236E11CEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100]((uint64_t *)va1);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100]((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

void std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__func()
{
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA04300;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04300;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target_type()
{
}

void std::__function::__func<geom::bvh<float,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1},std::allocator<geom::bvh<float,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__func()
{
}

void *std::__function::__func<geom::bvh<float,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1},std::allocator<geom::bvh<float,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA04380;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1},std::allocator<geom::bvh<float,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04380;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1},std::allocator<geom::bvh<float,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::operator()(uint64_t a1, unsigned int *a2, __n128 *a3, unsigned int *a4, __n128 *a5)
{
  return (*(uint64_t (**)(void, void, __n128, __n128, __n128, __n128))(a1 + 8))(*a2, *a4, *a3, a3[1], *a5, a5[1]);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1},std::allocator<geom::bvh<float,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1},std::allocator<geom::bvh<float,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<float,(unsigned char)3>(geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)#1}>,float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::target_type()
{
}

void std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__func()
{
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA04410;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04410;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<float,(unsigned char)3>(geom::bvh<float,(unsigned char)3> &,std::pair<geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target_type()
{
}

uint64_t std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(void *result, int a2, uint64_t a3)
{
  void v9[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = a3;
  switch(a2)
  {
    case 0:
      uint64_t v3 = v9;
      v9[0] = &unk_26EA04490;
      v9[1] = &v4;
      v9[3] = v9;
      geom::bvh<double,(unsigned char)3>::build_middle_split((uint64_t)result, (uint64_t)v9);
      goto LABEL_7;
    case 1:
      uint64_t v3 = v8;
      v8[0] = &unk_26EA04490;
      v8[1] = &v4;
      v8[3] = v8;
      geom::bvh<double,(unsigned char)3>::build_median((uint64_t)result, (uint64_t)v8);
      goto LABEL_7;
    case 2:
      uint64_t v3 = v7;
      v7[0] = &unk_26EA04490;
      v7[1] = &v4;
      v7[3] = v7;
      geom::bvh<double,(unsigned char)3>::build_surface_area_heuristic((uint64_t)result, (uint64_t)v7);
      goto LABEL_7;
    case 3:
      uint64_t v3 = v6;
      v6[0] = &unk_26EA04490;
      v6[1] = &v4;
      v6[3] = v6;
      geom::bvh<double,(unsigned char)3>::build_volume_heuristic((uint64_t)result, (uint64_t)v6);
      goto LABEL_7;
    case 4:
      uint64_t v3 = v5;
      v5[0] = &unk_26EA04490;
      v5[1] = &v4;
      float64x2_t v5[3] = v5;
      geom::bvh<double,(unsigned char)3>::build_intersection_volume_heuristic((uint64_t)result, (uint64_t)v5);
LABEL_7:
      uint64_t result = std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v3);
      break;
    default:
      return result;
  }
  return result;
}

void sub_236E1229C(_Unwind_Exception *a1)
{
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100]((void *)(v1 - 88));
  _Unwind_Resume(a1);
}

void *anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  v10[4] = *MEMORY[0x263EF8340];
  uint64_t v7 = a3;
  uint64_t v5 = *a2;
  v10[0] = &unk_26EA04510;
  v10[1] = v5;
  v10[3] = v10;
  v9[0] = &unk_26EA045A0;
  v9[1] = &v7;
  v9[3] = v9;
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::__value_func[abi:nn180100]((uint64_t)v8, (uint64_t)v10);
  geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(a1, (uint64_t)v9, (uint64_t)v8, *((_DWORD *)a2 + 2));
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v8);
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v9);
  return std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v10);
}

void sub_236E123D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100]((uint64_t *)va);
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100]((uint64_t *)va1);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100]((void *)(v2 - 56));
  _Unwind_Resume(a1);
}

void *_ZN4geom19make_external_arrayINS_5sliceIDv3_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b@<X0>(void *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[1];
  if (v3)
  {
    if (a2) {
      operator new[]();
    }
    *(void *)a3 = *result;
    *(void *)(a3 + 8) = v3;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

void std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__func()
{
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA04490;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04490;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target_type()
{
}

void std::__function::__func<geom::bvh<double,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1},std::allocator<geom::bvh<double,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__func()
{
}

void *std::__function::__func<geom::bvh<double,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1},std::allocator<geom::bvh<double,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA04510;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1},std::allocator<geom::bvh<double,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04510;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1},std::allocator<geom::bvh<double,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::operator()(uint64_t a1, unsigned int *a2, _OWORD *a3, unsigned int *a4, _OWORD *a5)
{
  uint64_t v5 = *a2;
  uint64_t v6 = *a4;
  uint64_t v7 = *(uint64_t (**)(uint64_t, _OWORD *, uint64_t, _OWORD *))(a1 + 8);
  long long v8 = a3[1];
  v14[0] = *a3;
  v14[1] = v8;
  long long v9 = a3[3];
  void v14[2] = a3[2];
  v14[3] = v9;
  long long v10 = a5[1];
  v13[0] = *a5;
  v13[1] = v10;
  long long v11 = a5[3];
  void v13[2] = a5[2];
  v13[3] = v11;
  return v7(v5, v14, v6, v13);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1},std::allocator<geom::bvh<double,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1},std::allocator<geom::bvh<double,(unsigned char)3>::heuristic_fn anonymous namespace'::fn_ptr_to_std_fn<double,(unsigned char)3>(geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type)::{lambda(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)#1}>,double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::target_type()
{
}

void std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__func()
{
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA045A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA045A0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_custom_heuristic<double,(unsigned char)3>(geom::bvh<double,(unsigned char)3> &,std::pair<geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned int> const&,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target_type()
{
}

uint64_t std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__func()
{
}

void *std::__function::__func<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA04620;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04620;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)2,true>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,geom::user_primitive_types<float,(unsigned char)2>::bbox const*,geom::user_bvh_types<float,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::target_type()
{
}

void std::__function::__func<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__func()
{
}

void *std::__function::__func<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA046A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA046A0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)2>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)2,true>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,geom::user_primitive_types<double,(unsigned char)2>::bbox const*,geom::user_bvh_types<double,(unsigned char)2>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::target_type()
{
}

void std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__func()
{
}

void *std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA04720;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04720;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<float,(unsigned char)3,true>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,geom::user_primitive_types<float,(unsigned char)3>::bbox const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target_type()
{
}

void std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__func()
{
}

void *std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA047A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA047A0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::bvh_type create_bvh_custom_heuristic<double,(unsigned char)3,true>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,geom::user_primitive_types<double,(unsigned char)3>::bbox const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target_type()
{
}

uint64_t anonymous namespace'::construct_triangle_mesh_bvh<float>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a6)
  {
    uint64_t v26 = a2;
    uint64_t v27 = a1;
    uint64_t v12 = 3 * a3;
    uint64_t v24 = a4;
    uint64_t v25 = 3 * a3;
    if (a1) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = 0;
    }
    if (a1 && a5) {
      operator new[]();
    }
    if (*(unsigned char *)(a6 + 160))
    {
      uint64_t v14 = *(void *)(a6 + 144);
      if (v14) {
        MEMORY[0x237E10700](v14, 0x1000C80451B5BE8);
      }
    }
    *(void *)(a6 + 144) = v13;
    *(void *)(a6 + 152) = a1;
    *(unsigned char *)(a6 + 160) = 0;
    if (a3) {
      uint64_t v15 = a4;
    }
    else {
      uint64_t v15 = 0;
    }
    if (a3 && a5) {
      operator new[]();
    }
    if (*(unsigned char *)(a6 + 184))
    {
      uint64_t v16 = *(void *)(a6 + 168);
      if (v16) {
        MEMORY[0x237E10700](v16, 0x1000C8052888210);
      }
    }
    *(void *)(a6 + 168) = v15;
    *(void *)(a6 + 176) = v12;
    *(unsigned char *)(a6 + 184) = 0;
    *(void *)(a6 + 128) = *(void *)(a6 + 120);
    uint64_t v17 = a6;
    if (a3) {
LABEL_21:
    }
      operator new[]();
  }
  else
  {
    uint64_t v17 = geom_triangle_mesh_bvh_3f_obj_alloc();
    uint64_t v26 = a2;
    uint64_t v27 = a1;
    uint64_t v24 = a4;
    uint64_t v25 = 3 * a3;
    _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(&v26, a5, v17 + 144);
    geom::make_external_array<geom::slice<unsigned int>>(&v24, a5, v17 + 168);
    *(void *)(v17 + 120) = 0;
    *(void *)(v17 + 128) = 0;
    *(void *)(v17 + 136) = 0;
    if (a3) {
      goto LABEL_21;
    }
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 0;
  v19[0] = 0;
  v19[1] = 0;
  char v20 = 0;
  if (a6)
  {
    geom::bvh<double,(unsigned char)2>::reset(v17 + 16, (uint64_t)&v21, (uint64_t)v19);
    if (v20 && v19[0]) {
      MEMORY[0x237E10700](v19[0], 0x1000C80E0EAB150);
    }
  }
  else
  {
    *(unsigned char *)(v17 + 16) = 0;
    *(_OWORD *)(v17 + 24) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *(void *)(v17 + 72) = 0;
    *(void *)(v17 + 80) = a3;
    *(unsigned char *)(v17 + 88) = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    char v23 = 0;
    *(void *)(v17 + 96) = 0;
    *(void *)(v17 + 104) = a3;
    *(unsigned char *)(v17 + 112) = 0;
  }
  if (v23 && v21) {
    MEMORY[0x237E10700](v21, 0x1000C80451B5BE8);
  }
  return v17;
}

void sub_236E13058(_Unwind_Exception *a1)
{
  MEMORY[0x237E10700](v1, 0x1000C80451B5BE8);
  _Unwind_Resume(a1);
}

void geom::anonymous namespace'::build_soa_triangle_mesh_bvh_data<float>(void *a1, void *a2, void *a3, void *a4)
{
  std::vector<std::array<geom::soa_vec3<float,(unsigned char)4>,3ul>>::resize((uint64_t)a4, (unint64_t)(a3[1] + 3) >> 2);
  if (a3[1])
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    do
    {
      uint64_t v10 = 0;
      int v11 = 3 * *(_DWORD *)(*a3 + 4 * v8);
      uint64_t v12 = (_DWORD *)(*a4 + ((4 * (v9 & 3)) | (144 * ((unint64_t)v9 >> 2))) + 16);
      do
      {
        uint64_t v13 = (_DWORD *)(*a1 + 16 * *(unsigned int *)(*a2 + 4 * (v11 + v10)));
        *(v12 - 4) = *v13;
        *uint64_t v12 = v13[1];
        v12[4] = v13[2];
        ++v10;
        v12 += 12;
      }
      while (v10 != 3);
      uint64_t v8 = ++v9;
    }
    while (a3[1] > (unint64_t)v9);
  }
}

void *geom::make_external_array<geom::slice<unsigned int>>@<X0>(void *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[1];
  if (v3)
  {
    if (a2) {
      operator new[]();
    }
    *(void *)a3 = *result;
    *(void *)(a3 + 8) = v3;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

void std::vector<std::array<geom::soa_vec3<float,(unsigned char)4>,3ul>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::array<geom::soa_vec3<float,(unsigned char)4>,3ul>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 144 * a2;
  }
}

void std::vector<std::array<geom::soa_vec3<float,(unsigned char)4>,3ul>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 144 * ((144 * a2 - 144) / 0x90) + 144;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v7 - (unsigned char *)*a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x1C71C71C71C71C7) {
      abort();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v5 - (unsigned char *)*a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0xE38E38E38E38E3) {
      unint64_t v11 = 0x1C71C71C71C71C7;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::array<geom::soa_vec3<float,(unsigned char)4>,3ul>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[144 * v8];
    uint64_t v15 = &v12[144 * v11];
    size_t v16 = 144 * ((144 * a2 - 144) / 0x90) + 144;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    unsigned int v19 = (char *)*a1;
    unsigned int v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        *((_OWORD *)v14 - 9) = *((_OWORD *)v18 - 9);
        long long v20 = *((_OWORD *)v18 - 8);
        long long v21 = *((_OWORD *)v18 - 7);
        long long v22 = *((_OWORD *)v18 - 5);
        *((_OWORD *)v14 - 6) = *((_OWORD *)v18 - 6);
        *((_OWORD *)v14 - 5) = v22;
        *((_OWORD *)v14 - 8) = v20;
        *((_OWORD *)v14 - 7) = v21;
        long long v23 = *((_OWORD *)v18 - 4);
        long long v24 = *((_OWORD *)v18 - 3);
        long long v25 = *((_OWORD *)v18 - 1);
        *((_OWORD *)v14 - 2) = *((_OWORD *)v18 - 2);
        *((_OWORD *)v14 - 1) = v25;
        *((_OWORD *)v14 - 4) = v23;
        *((_OWORD *)v14 - 3) = v24;
        v14 -= 144;
        v18 -= 144;
      }
      while (v18 != v19);
      unsigned int v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::array<geom::soa_vec3<float,(unsigned char)4>,3ul>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(144 * a2);
}

uint64_t anonymous namespace'::construct_triangle_mesh_bvh<double>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (a6)
  {
    uint64_t v26 = a2;
    uint64_t v27 = a1;
    uint64_t v12 = 3 * a3;
    uint64_t v24 = a4;
    uint64_t v25 = 3 * a3;
    if (a1) {
      uint64_t v13 = a2;
    }
    else {
      uint64_t v13 = 0;
    }
    if (a1 && a5) {
      operator new[]();
    }
    if (*(unsigned char *)(a6 + 160))
    {
      uint64_t v14 = *(void *)(a6 + 144);
      if (v14) {
        MEMORY[0x237E10700](v14, 0x1000C80E0EAB150);
      }
    }
    *(void *)(a6 + 144) = v13;
    *(void *)(a6 + 152) = a1;
    *(unsigned char *)(a6 + 160) = 0;
    if (a3) {
      uint64_t v15 = a4;
    }
    else {
      uint64_t v15 = 0;
    }
    if (a3 && a5) {
      operator new[]();
    }
    if (*(unsigned char *)(a6 + 184))
    {
      uint64_t v16 = *(void *)(a6 + 168);
      if (v16) {
        MEMORY[0x237E10700](v16, 0x1000C8052888210);
      }
    }
    *(void *)(a6 + 168) = v15;
    *(void *)(a6 + 176) = v12;
    *(unsigned char *)(a6 + 184) = 0;
    *(void *)(a6 + 128) = *(void *)(a6 + 120);
    uint64_t v17 = a6;
    if (a3) {
LABEL_21:
    }
      operator new[]();
  }
  else
  {
    uint64_t v17 = geom_triangle_mesh_bvh_3d_obj_alloc();
    uint64_t v26 = a2;
    uint64_t v27 = a1;
    uint64_t v24 = a4;
    uint64_t v25 = 3 * a3;
    _ZN4geom19make_external_arrayINS_5sliceIDv3_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(&v26, a5, v17 + 144);
    geom::make_external_array<geom::slice<unsigned int>>(&v24, a5, v17 + 168);
    *(void *)(v17 + 120) = 0;
    *(void *)(v17 + 128) = 0;
    *(void *)(v17 + 136) = 0;
    if (a3) {
      goto LABEL_21;
    }
  }
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  char v23 = 0;
  v19[0] = 0;
  v19[1] = 0;
  char v20 = 0;
  if (a6)
  {
    geom::bvh<double,(unsigned char)3>::reset(v17 + 16, (uint64_t)&v21, (uint64_t)v19);
    if (v20 && v19[0]) {
      MEMORY[0x237E10700](v19[0], 0x1000C80FA0F61DDLL);
    }
  }
  else
  {
    *(unsigned char *)(v17 + 16) = 0;
    *(_OWORD *)(v17 + 24) = 0u;
    *(_OWORD *)(v17 + 40) = 0u;
    *(_OWORD *)(v17 + 56) = 0u;
    *(void *)(v17 + 72) = 0;
    *(void *)(v17 + 80) = a3;
    *(unsigned char *)(v17 + 88) = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    char v23 = 0;
    *(void *)(v17 + 96) = 0;
    *(void *)(v17 + 104) = a3;
    *(unsigned char *)(v17 + 112) = 0;
  }
  if (v23 && v21) {
    MEMORY[0x237E10700](v21, 0x1000C80E0EAB150);
  }
  return v17;
}

void sub_236E13898(_Unwind_Exception *a1)
{
  MEMORY[0x237E10700](v1, 0x1000C80E0EAB150);
  _Unwind_Resume(a1);
}

void geom::anonymous namespace'::build_soa_triangle_mesh_bvh_data<double>(void *a1, void *a2, void *a3, void *a4)
{
  std::vector<std::array<geom::soa_vec3<double,(unsigned char)4>,3ul>>::resize((uint64_t)a4, (unint64_t)(a3[1] + 3) >> 2);
  if (a3[1])
  {
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    do
    {
      uint64_t v10 = 0;
      int v11 = 3 * *(_DWORD *)(*a3 + 4 * v8);
      uint64_t v12 = (void *)(*a4 + ((8 * (v9 & 3)) | (288 * ((unint64_t)v9 >> 2))) + 32);
      do
      {
        uint64_t v13 = (void *)(*a1 + 32 * *(unsigned int *)(*a2 + 4 * (v11 + v10)));
        *(v12 - 4) = *v13;
        *uint64_t v12 = v13[1];
        v12[4] = v13[2];
        ++v10;
        v12 += 12;
      }
      while (v10 != 3);
      uint64_t v8 = ++v9;
    }
    while (a3[1] > (unint64_t)v9);
  }
}

void std::vector<std::array<geom::soa_vec3<double,(unsigned char)4>,3ul>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = 0x8E38E38E38E38E39 * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<std::array<geom::soa_vec3<double,(unsigned char)4>,3ul>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(void *)(a1 + 8) = *(void *)a1 + 288 * a2;
  }
}

void std::vector<std::array<geom::soa_vec3<double,(unsigned char)4>,3ul>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (0x8E38E38E38E38E39 * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      size_t v13 = 288 * ((288 * a2 - 288) / 0x120) + 288;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0x8E38E38E38E38E39 * ((v7 - (unsigned char *)*a1) >> 5);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0xE38E38E38E38E3) {
      abort();
    }
    unint64_t v10 = 0x8E38E38E38E38E39 * ((v5 - (unsigned char *)*a1) >> 5);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x71C71C71C71C71) {
      unint64_t v11 = 0xE38E38E38E38E3;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::array<geom::soa_vec3<double,(unsigned char)4>,3ul>>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v14 = &v12[288 * v8];
    uint64_t v15 = &v12[288 * v11];
    size_t v16 = 288 * ((288 * a2 - 288) / 0x120) + 288;
    bzero(v14, v16);
    uint64_t v17 = &v14[v16];
    unsigned int v19 = (char *)*a1;
    unsigned int v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v18 -= 288;
        v14 -= 288;
        memcpy(v14, v18, 0x120uLL);
      }
      while (v18 != v19);
      unsigned int v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
    {
      operator delete(v18);
    }
  }
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::array<geom::soa_vec3<double,(unsigned char)4>,3ul>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xE38E38E38E38E4) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(288 * a2);
}

void std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__func()
{
}

void *std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA04820;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04820;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<float,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<float>(unsigned long,geom::vector_type<float,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<float,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::target_type()
{
}

void std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__func()
{
}

void *std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA048A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA048A0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1},std::allocator<geom::user_bvh_types<double,(unsigned char)3>::triangle_mesh_bvh_type anonymous namespace'::create_triangle_mesh_bvh_custom_heuristic<double>(unsigned long,geom::vector_type<double,(unsigned char)3,void>::value const*,unsigned long,unsigned int const*,geom::user_bvh_types<double,(unsigned char)3>::heuristic_fn_type,unsigned long,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::target_type()
{
}

void std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__func()
{
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA04920;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04920;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<float,(unsigned char)2>(geom::bvh<float,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<float,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::target_type()
{
}

void std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__func()
{
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA049A0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA049A0;
  a2[1] = v2;
  return result;
}

BOOL std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2)
{
  return **(void **)(a1 + 8) >= (unint64_t)*(unsigned int *)(a2 + 16);
}

uint64_t std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1},std::allocator<void anonymous namespace'::build_bvh_with_strategy<double,(unsigned char)2>(geom::bvh<double,(unsigned char)2> &,geom_bvh_create_strategy,unsigned long)::{lambda(geom::bvh_node<double,(unsigned char)2> &)#1}>,BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::target_type()
{
}

void std::__function::__func<geom_bvh_raycast_2f::$_0,std::allocator<geom_bvh_raycast_2f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::~__func()
{
}

__n128 std::__function::__func<geom_bvh_raycast_2f::$_0,std::allocator<geom_bvh_raycast_2f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA04A20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom_bvh_raycast_2f::$_0,std::allocator<geom_bvh_raycast_2f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA04A20;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom_bvh_raycast_2f::$_0,std::allocator<geom_bvh_raycast_2f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::operator()(uint64_t a1, unsigned int *a2, double *a3, uint64_t a4)
{
  return (**(uint64_t (***)(void, void, uint64_t, double, double))(a1 + 8))(*a2, **(void **)(a1 + 16), a4, *a3, a3[1]);
}

uint64_t std::__function::__func<geom_bvh_raycast_2f::$_0,std::allocator<geom_bvh_raycast_2f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<geom_bvh_raycast_2f::$_0,std::allocator<geom_bvh_raycast_2f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom_bvh_raycast_2d::$_0,std::allocator<geom_bvh_raycast_2d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::~__func()
{
}

__n128 std::__function::__func<geom_bvh_raycast_2d::$_0,std::allocator<geom_bvh_raycast_2d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA04AB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom_bvh_raycast_2d::$_0,std::allocator<geom_bvh_raycast_2d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA04AB0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom_bvh_raycast_2d::$_0,std::allocator<geom_bvh_raycast_2d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::operator()(uint64_t a1, unsigned int *a2, __n128 *a3, uint64_t a4)
{
  return (**(uint64_t (***)(void, void, uint64_t, __n128, __n128))(a1 + 8))(*a2, **(void **)(a1 + 16), a4, *a3, a3[1]);
}

uint64_t std::__function::__func<geom_bvh_raycast_2d::$_0,std::allocator<geom_bvh_raycast_2d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<geom_bvh_raycast_2d::$_0,std::allocator<geom_bvh_raycast_2d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom_bvh_raycast_3f::$_0,std::allocator<geom_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::~__func()
{
}

__n128 std::__function::__func<geom_bvh_raycast_3f::$_0,std::allocator<geom_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA04B40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom_bvh_raycast_3f::$_0,std::allocator<geom_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA04B40;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom_bvh_raycast_3f::$_0,std::allocator<geom_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::operator()(uint64_t a1, unsigned int *a2, __n128 *a3, uint64_t a4)
{
  return (**(uint64_t (***)(void, void, uint64_t, __n128, __n128))(a1 + 8))(*a2, **(void **)(a1 + 16), a4, *a3, a3[1]);
}

uint64_t std::__function::__func<geom_bvh_raycast_3f::$_0,std::allocator<geom_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<geom_bvh_raycast_3f::$_0,std::allocator<geom_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom_bvh_raycast_3d::$_0,std::allocator<geom_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::~__func()
{
}

__n128 std::__function::__func<geom_bvh_raycast_3d::$_0,std::allocator<geom_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA04BD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom_bvh_raycast_3d::$_0,std::allocator<geom_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA04BD0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom_bvh_raycast_3d::$_0,std::allocator<geom_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::operator()(uint64_t a1, unsigned int *a2, _OWORD *a3)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void **)(a1 + 16);
  uint64_t v5 = **(uint64_t (***)(uint64_t, _OWORD *, void))(a1 + 8);
  long long v6 = a3[1];
  v9[0] = *a3;
  v9[1] = v6;
  long long v7 = a3[3];
  float64x2_t v9[2] = a3[2];
  v9[3] = v7;
  return v5(v3, v9, *v4);
}

uint64_t std::__function::__func<geom_bvh_raycast_3d::$_0,std::allocator<geom_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<geom_bvh_raycast_3d::$_0,std::allocator<geom_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::target_type()
{
}

void *std::__function::__value_func<BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom_triangle_mesh_bvh_raycast_3f::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::~__func()
{
}

__n128 std::__function::__func<geom_triangle_mesh_bvh_raycast_3f::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26EA04C60;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<geom_triangle_mesh_bvh_raycast_3f::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA04C60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom_triangle_mesh_bvh_raycast_3f::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::operator()(uint64_t a1, unsigned int *a2, float32x4_t *a3, float *a4)
{
  unsigned int v4 = *a2;
  uint64_t v5 = **(void **)(a1 + 8);
  uint64_t v6 = *(void *)(v5 + 168);
  uint64_t v7 = *(void *)(v5 + 144);
  float32x4_t v8 = *(float32x4_t *)(v7 + 16 * *(unsigned int *)(v6 + 12 * *a2));
  float32x4_t v9 = *(float32x4_t *)(v7 + 16 * *(unsigned int *)(v6 + 4 * (3 * *a2 + 1)));
  float32x4_t v10 = *(float32x4_t *)(v7 + 16 * *(unsigned int *)(v6 + 4 * (3 * *a2 + 2)));
  float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL);
  float32x4_t v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL);
  float32x4_t v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL);
  float32x4_t v14 = vaddq_f32(vmlaq_f32(vmulq_f32(v11, vnegq_f32(v10)), v8, v13), vaddq_f32(vmlaq_f32(vmulq_f32(v12, vnegq_f32(v8)), v9, v11), vmlaq_f32(vmulq_f32(v13, vnegq_f32(v9)), v10, v12)));
  float32x4_t v15 = vmulq_f32(v14, v14);
  if (fabsf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), v15)).f32[0]) <= 1.0e-10)goto LABEL_7; {
  float32x4_t v16 = a3[1];
  }
  float32x4_t v17 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL);
  float32x4_t v18 = vmulq_f32(v16, v17);
  float32x4_t v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1);
  float32x4_t v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, v19));
  if (fabsf(v20.f32[0]) <= 0.00001) {
    goto LABEL_7;
  }
  v19.i64[0] = 0;
  float32x4_t v21 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v20, v19), 0), (int8x16_t)vnegq_f32(v17), (int8x16_t)v17);
  float v22 = v20.f32[0] <= 0.0 ? -v20.f32[0] : v20.f32[0];
  float32x4_t v23 = vsubq_f32(*a3, v8);
  float v24 = 1.0 / v22;
  float32x4_t v25 = vmulq_f32(v23, v21);
  float v26 = (float)(1.0 / v22)
      * vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0];
  *a4 = v26;
  if (v26 == 0.0) {
    goto LABEL_7;
  }
  float v28 = fabsf(v26);
  if (v28 != INFINITY)
  {
    if ((float)((float)((float)(v28 + 1.0) * 0.00000011921) + 0.0) < v26) {
      goto LABEL_12;
    }
LABEL_7:
    uint64_t result = 0;
    *a4 = INFINITY;
    return result;
  }
  if (v26 <= 0.0) {
    goto LABEL_7;
  }
LABEL_12:
  int32x4_t v29 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v16, (int32x4_t)v16), (int8x16_t)v16, 0xCuLL), vnegq_f32(v23)), v16, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL));
  float32x4_t v30 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v29, v29), (int8x16_t)v29, 0xCuLL);
  BOOL v35 = v20.f32[0] <= 0.0;
  float v31 = 1.0;
  if (!v35) {
    float v31 = -1.0;
  }
  float32x4_t v32 = vmulq_n_f32(v30, v31);
  float32x4_t v33 = vmulq_f32(vsubq_f32(v10, v8), v32);
  float32x4_t v34 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1)));
  BOOL v35 = v34.f32[0] >= 0.0 && v34.f32[0] <= v22;
  if (!v35) {
    goto LABEL_7;
  }
  float32x4_t v36 = vmulq_f32(vsubq_f32(v8, v9), v32);
  float32x4_t v37 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v36, 2), vaddq_f32(v36, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 1)));
  LODWORD(v38) = vaddq_f32(v34, v37).u32[0];
  if (v37.f32[0] < 0.0 || v38 > v22) {
    goto LABEL_7;
  }
  int64x2_t v40 = *(float **)(a1 + 16);
  if (v26 >= *v40)
  {
    if (v26 != *v40) {
      return 1;
    }
    double v41 = *(unsigned int **)(a1 + 24);
    if (*v41 <= v4) {
      return 1;
    }
  }
  else
  {
    double v41 = *(unsigned int **)(a1 + 24);
  }
  float32_t v42 = v24 * v34.f32[0];
  float32_t v43 = v24 * v37.f32[0];
  v34.f32[0] = (float)(1.0 - (float)(v24 * v34.f32[0])) - v43;
  v34.f32[1] = v42;
  v34.f32[2] = v43;
  *int64x2_t v40 = v26;
  *double v41 = v4;
  *(float32x4_t *)*(void *)(a1 + 32) = v34;
  return 1;
}

uint64_t std::__function::__func<geom_triangle_mesh_bvh_raycast_3f::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<geom_triangle_mesh_bvh_raycast_3f::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3f::$_0>,BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::target_type()
{
}

void std::__function::__func<geom_triangle_mesh_bvh_raycast_3d::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::~__func()
{
}

__n128 std::__function::__func<geom_triangle_mesh_bvh_raycast_3d::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26EA04CE0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<geom_triangle_mesh_bvh_raycast_3d::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA04CE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<geom_triangle_mesh_bvh_raycast_3d::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::operator()(uint64_t a1, unsigned int *a2, float64x2_t *a3, double *a4)
{
  unsigned int v5 = *a2;
  uint64_t v6 = **(void **)(a1 + 8);
  uint64_t v7 = *(void *)(v6 + 168);
  uint64_t v8 = *(void *)(v6 + 144);
  float32x4_t v9 = (float64x2_t *)(v8 + 32 * *(unsigned int *)(v7 + 12 * *a2));
  uint64_t v10 = *(unsigned int *)(v7 + 4 * (3 * *a2 + 2));
  float32x4_t v11 = (float64x2_t *)(v8 + 32 * *(unsigned int *)(v7 + 4 * (3 * *a2 + 1)));
  float32x4_t v12 = (float64x2_t *)(v8 + 32 * v10);
  float64x2_t v14 = *v9;
  float64x2_t v13 = v9[1];
  float64x2_t v16 = *v11;
  float64x2_t v15 = v11[1];
  float64x2_t v18 = *v12;
  float64x2_t v17 = v12[1];
  v19.f64[0] = v9[1].f64[0];
  v19.f64[1] = v9->f64[0];
  v20.f64[0] = v11[1].f64[0];
  v20.f64[1] = v11->f64[0];
  v21.f64[0] = v12[1].f64[0];
  v21.f64[1] = v12->f64[0];
  float64x2_t v22 = vaddq_f64(vmlaq_f64(vmulq_f64(v19, vnegq_f64(*v12)), *v9, v21), vaddq_f64(vmlaq_f64(vmulq_f64(v20, vnegq_f64(*v9)), *v11, v19), vmlaq_f64(vmulq_f64(v21, vnegq_f64(*v11)), *v12, v20)));
  float64x2_t v23 = vaddq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v17), *v9, 1), v13, *v12, 1), vaddq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v13), *v11, 1), v15, *v9, 1), vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v15), *v12, 1), v17, *v11, 1)));
  float64x2_t v24 = vmulq_f64(v22, v22);
  if (fabs(v24.f64[1] + vmulq_f64(v23, v23).f64[0] + v24.f64[0]) <= 1.0e-12) {
    goto LABEL_22;
  }
  float64x2_t v26 = a3[2];
  float64x2_t v25 = a3[3];
  v23.f64[1] = v22.f64[0];
  float64x2_t v27 = vmulq_f64(v26, v23);
  v27.f64[0] = vmulq_laneq_f64(v25, v22, 1).f64[0] + vaddvq_f64(v27);
  if (fabs(v27.f64[0]) <= 0.000001) {
    goto LABEL_22;
  }
  float64x2_t v28 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v22, 1);
  double v29 = -v27.f64[0];
  v4.f64[0] = 0.0;
  int8x16_t v30 = (int8x16_t)vcgtq_f64(v27, v4);
  int8x16_t v31 = vandq_s8((int8x16_t)vnegq_f64(v28), v30);
  int8x16_t v32 = (int8x16_t)vdupq_lane_s64(v30.i64[0], 0);
  float64x2_t v33 = (float64x2_t)vorrq_s8(v31, vbicq_s8((int8x16_t)v28, v32));
  float64x2_t v34 = (float64x2_t)vbslq_s8(v32, (int8x16_t)vnegq_f64(v23), (int8x16_t)v23);
  if (v27.f64[0] > 0.0) {
    double v29 = v27.f64[0];
  }
  float64x2_t v35 = vsubq_f64(*a3, v14);
  float64x2_t v36 = vsubq_f64(a3[1], v13);
  double v37 = 1.0 / v29;
  double v38 = 1.0 / v29 * (vmulq_f64(v36, v33).f64[0] + vaddvq_f64(vmulq_f64(v35, v34)));
  *a4 = v38;
  if (v38 == 0.0 || v38 <= 2.22044605e-16) {
    goto LABEL_22;
  }
  v40.f64[0] = v25.f64[0];
  v40.f64[1] = v26.f64[0];
  float64x2_t v41 = vnegq_f64(v36);
  v36.f64[1] = v35.f64[0];
  float64x2_t v42 = vmlaq_f64(vmulq_f64(v40, vnegq_f64(v35)), v26, v36);
  *(void *)&v43.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v41, v26, 1), v25, v35, 1);
  v43.f64[1] = v42.f64[0];
  v26.f64[0] = v27.f64[0] <= 0.0 ? 1.0 : -1.0;
  float64x2_t v44 = vmulq_n_f64(v43, v26.f64[0]);
  float64x2_t v45 = vmulq_laneq_f64(v26, v42, 1);
  double v46 = vmulq_f64(vsubq_f64(v17, v13), v45).f64[0] + vaddvq_f64(vmulq_f64(vsubq_f64(v18, v14), v44));
  BOOL v47 = v46 >= 0.0 && v46 <= v29;
  if (!v47
    || ((float64x2_t v48 = vmulq_f64(vsubq_f64(v13, v15), v45),
         v48.f64[0] = v48.f64[0] + vaddvq_f64(vmulq_f64(vsubq_f64(v14, v16), v44)),
         v48.f64[0] >= 0.0)
      ? (BOOL v49 = v46 + v48.f64[0] <= v29)
      : (BOOL v49 = 0),
        !v49))
  {
LABEL_22:
    uint64_t result = 0;
    *a4 = INFINITY;
    return result;
  }
  uint64_t v51 = *(double **)(a1 + 16);
  if (v38 >= *v51)
  {
    if (v38 != *v51) {
      return 1;
    }
    unsigned int v52 = *(unsigned int **)(a1 + 24);
    if (*v52 <= v5) {
      return 1;
    }
  }
  else
  {
    unsigned int v52 = *(unsigned int **)(a1 + 24);
  }
  v48.f64[0] = v37 * v48.f64[0];
  *(double *)&long long v53 = 1.0 - v37 * v46 - v48.f64[0];
  *((double *)&v53 + 1) = v37 * v46;
  *uint64_t v51 = v38;
  *unsigned int v52 = v5;
  uint64_t v54 = *(_OWORD **)(a1 + 32);
  _OWORD *v54 = v53;
  v54[1] = v48;
  return 1;
}

uint64_t std::__function::__func<geom_triangle_mesh_bvh_raycast_3d::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<geom_triangle_mesh_bvh_raycast_3d::$_0,std::allocator<geom_triangle_mesh_bvh_raycast_3d::$_0>,BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::target_type()
{
}

void _ZNSt3__16vectorIZNK4geom3bvhIfLh3EE13closest_pointIN12_GLOBAL__N_130triangle_closest_point_functorIfEEEEDv3_fT_S8_RfRjE5stateNS_9allocatorISC_EEE7reserveEm(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    unsigned int v5 = *(unsigned char **)(a1 + 8);
    uint64_t v6 = (char *)operator new(8 * a2);
    uint64_t v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF8];
    uint64_t v8 = v7;
    if (v5 != v2)
    {
      uint64_t v8 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF8];
      do
      {
        uint64_t v9 = *((void *)v5 - 1);
        v5 -= 8;
        *((void *)v8 - 1) = v9;
        v8 -= 8;
      }
      while (v5 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[8 * a2];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

void _ZNSt3__16vectorIZNK4geom3bvhIdLh3EE13closest_pointIN12_GLOBAL__N_130triangle_closest_point_functorIdEEEEDv3_dT_S8_RdRjE5stateNS_9allocatorISC_EEE7reserveEm(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(unsigned char **)a1;
  if (a2 > (uint64_t)(*(void *)(a1 + 16) - *(void *)a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    unsigned int v5 = *(unsigned char **)(a1 + 8);
    uint64_t v6 = (char *)operator new(16 * a2);
    uint64_t v7 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF0];
    uint64_t v8 = v7;
    if (v5 != v2)
    {
      uint64_t v9 = &v6[(v5 - v2) & 0xFFFFFFFFFFFFFFF0];
      do
      {
        uint64_t v8 = v9 - 16;
        *((_OWORD *)v9 - 1) = *((_OWORD *)v5 - 1);
        v5 -= 16;
        v9 -= 16;
      }
      while (v5 != v2);
    }
    *(void *)a1 = v8;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = &v6[16 * a2];
    if (v2)
    {
      operator delete(v2);
    }
  }
}

uint64_t geom::intersect_lines_point_direction<float>(float *a1, float *a2, float32x2_t a3, double a4, float32x2_t a5, double a6, double a7, double a8)
{
  float32x2_t v8 = vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a4);
  float v9 = vaddv_f32(v8);
  float32x2_t v10 = vmul_f32(*(float32x2_t *)&a6, *(float32x2_t *)&a6);
  float v11 = vaddv_f32(v10);
  *(float *)&a8 = fabsf(v9);
  float v12 = fabsf(v11);
  if (*(float *)&a8 > 0.00000011921 || v12 > 0.00000011921)
  {
    float32x2_t v14 = vsub_f32(a5, a3);
    if (*(float *)&a8 > 0.00000011921) {
      float v15 = v9;
    }
    else {
      float v15 = v11;
    }
    if (*(float *)&a8 > 0.00000011921 && v12 > 0.00000011921)
    {
      float32x2_t v24 = vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1));
      float32x2_t v25 = vadd_f32(v10, (float32x2_t)vdup_lane_s32((int32x2_t)v10, 1));
      float v26 = vmlas_n_f32((float)-*((float *)&a4 + 1) * *(float *)&a6, *((float *)&a6 + 1), *(float *)&a4);
      if (fabsf(v26 * v26) <= (float)(1.0e-10 * vmul_f32(v24, v25).f32[0]))
      {
        float32x2_t v27 = vmul_f32(v14, v14);
        float v28 = vmlas_n_f32(-(float)(v14.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v14.f32[0]);
        if (fabsf(v28 * v28) > (float)(1.0e-10
                                      * vmul_f32(v24, vadd_f32(v27, (float32x2_t)vdup_lane_s32((int32x2_t)v27, 1))).f32[0]))
          return 0;
        if (a1)
        {
          float32x2_t v29 = vmul_f32(v14, *(float32x2_t *)&a4);
          *(_DWORD *)a1 = vdiv_f32(vadd_f32(v29, (float32x2_t)vdup_lane_s32((int32x2_t)v29, 1)), v24).u32[0];
        }
        if (!a2) {
          return 2;
        }
        float32x2_t v30 = vmul_f32(vneg_f32(v14), *(float32x2_t *)&a6);
        LODWORD(v20) = vdiv_f32(vadd_f32(v30, (float32x2_t)vdup_lane_s32((int32x2_t)v30, 1)), v25).u32[0];
        uint64_t result = 2;
LABEL_39:
        *a2 = v20;
        return result;
      }
      if (a1) {
        *a1 = vmlas_n_f32(-(float)(v14.f32[1] * *(float *)&a6), *((float *)&a6 + 1), v14.f32[0]) / v26;
      }
      if (a2)
      {
        float v20 = vmlas_n_f32(-(float)(v14.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v14.f32[0]) / v26;
LABEL_29:
        uint64_t result = 1;
        goto LABEL_39;
      }
    }
    else
    {
      float32x2_t v17 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a8), 0), *(int8x8_t *)&a6, *(int8x8_t *)&a4);
      float32x2_t v18 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a8), 0), (int8x8_t)vneg_f32(v14), (int8x8_t)v14);
      float v19 = vmlas_n_f32((float)-v17.f32[1] * v18.f32[0], v18.f32[1], v17.f32[0]);
      if ((float)(v19 * v19) > (float)(v15 * 1.0e-10)) {
        return 0;
      }
      float v20 = vaddv_f32(vmul_f32(v17, v18)) / v15;
      if (a1)
      {
        float v21 = 0.0;
        if (*(float *)&a8 > 0.00000011921) {
          float v21 = v20;
        }
        *a1 = v21;
      }
      if (a2)
      {
        if (v12 <= 0.00000011921) {
          float v20 = 0.0;
        }
        goto LABEL_29;
      }
    }
    return 1;
  }
  float32x2_t v22 = vsub_f32(a3, a5);
  if (sqrtf(vaddv_f32(vmul_f32(v22, v22))) > 0.00001) {
    return 0;
  }
  if (a1) {
    *a1 = 0.0;
  }
  float v20 = 0.0;
  uint64_t result = 1;
  if (a2) {
    goto LABEL_39;
  }
  return result;
}

uint64_t geom::intersect_lines_point_direction<double>(double *a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, double a7, float64x2_t a8)
{
  float64x2_t v9 = vmulq_f64(a4, a4);
  double v10 = vaddvq_f64(v9);
  float64x2_t v11 = vmulq_f64(a6, a6);
  double v12 = vaddvq_f64(v11);
  a8.f64[0] = fabs(v10);
  double v13 = fabs(v12);
  if (a8.f64[0] > 2.22044605e-16 || v13 > 2.22044605e-16)
  {
    float64x2_t v15 = vsubq_f64(a5, a3);
    v8.f64[0] = 2.22044605e-16;
    if (a8.f64[0] > 2.22044605e-16) {
      double v16 = v10;
    }
    else {
      double v16 = v12;
    }
    if (a8.f64[0] > 2.22044605e-16 && v13 > 2.22044605e-16)
    {
      float64x2_t v25 = vaddq_f64(v9, (float64x2_t)vdupq_laneq_s64((int64x2_t)v9, 1));
      float64x2_t v26 = vaddq_f64(v11, (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1));
      double v27 = vmlad_n_f64(-a4.f64[1] * a6.f64[0], a6.f64[1], a4.f64[0]);
      if (fabs(v27 * v27) <= 1.0e-12 * vmulq_f64(v25, v26).f64[0])
      {
        float64x2_t v28 = vmulq_f64(v15, v15);
        double v29 = vmlad_n_f64(-(v15.f64[1] * a4.f64[0]), a4.f64[1], v15.f64[0]);
        if (fabs(v29 * v29) > 1.0e-12
                             * vmulq_f64(v25, vaddq_f64(v28, (float64x2_t)vdupq_laneq_s64((int64x2_t)v28, 1))).f64[0])
          return 0;
        if (a1)
        {
          float64x2_t v30 = vmulq_f64(v15, a4);
          *(void *)a1 = *(_OWORD *)&vdivq_f64(vaddq_f64(v30, (float64x2_t)vdupq_laneq_s64((int64x2_t)v30, 1)), v25);
        }
        if (!a2) {
          return 2;
        }
        float64x2_t v31 = vmulq_f64(vnegq_f64(v15), a6);
        *(void *)&double v21 = *(_OWORD *)&vdivq_f64(vaddq_f64(v31, (float64x2_t)vdupq_laneq_s64((int64x2_t)v31, 1)), v26);
        uint64_t result = 2;
LABEL_39:
        *a2 = v21;
        return result;
      }
      if (a1) {
        *a1 = vmlad_n_f64(-(v15.f64[1] * a6.f64[0]), a6.f64[1], v15.f64[0]) / v27;
      }
      if (a2)
      {
        double v21 = vmlad_n_f64(-(v15.f64[1] * a4.f64[0]), a4.f64[1], v15.f64[0]) / v27;
LABEL_29:
        uint64_t result = 1;
        goto LABEL_39;
      }
    }
    else
    {
      float64x2_t v18 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v8, a8).i64[0], 0), (int8x16_t)a6, (int8x16_t)a4);
      a6.f64[0] = 2.22044605e-16;
      float64x2_t v19 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(a6, a8).i64[0], 0), (int8x16_t)vnegq_f64(v15), (int8x16_t)v15);
      double v20 = vmlad_n_f64(-v18.f64[1] * v19.f64[0], v19.f64[1], v18.f64[0]);
      if (v20 * v20 > v16 * 1.0e-12) {
        return 0;
      }
      double v21 = vaddvq_f64(vmulq_f64(v18, v19)) / v16;
      if (a1)
      {
        double v22 = 0.0;
        if (a8.f64[0] > 2.22044605e-16) {
          double v22 = v21;
        }
        *a1 = v22;
      }
      if (a2)
      {
        if (v13 <= 2.22044605e-16) {
          double v21 = 0.0;
        }
        goto LABEL_29;
      }
    }
    return 1;
  }
  float64x2_t v23 = vsubq_f64(a3, a5);
  if (sqrt(vaddvq_f64(vmulq_f64(v23, v23))) > 0.000001) {
    return 0;
  }
  if (a1) {
    *a1 = 0.0;
  }
  double v21 = 0.0;
  uint64_t result = 1;
  if (a2) {
    goto LABEL_39;
  }
  return result;
}

uint64_t geom::intersect_ray_line<float>(uint64_t a1, int a2, float *a3, float32x2_t a4, double a5, double a6, double a7, double a8, double a9)
{
  if ((float)(*(float *)&a2 * *(float *)&a2) <= (float)(vaddv_f32(vmul_f32((float32x2_t)a1, (float32x2_t)a1)) * 1.0e-10))
  {
    float32x2_t v11 = 0;
  }
  else
  {
    BOOL v9 = fabsf(*((float *)&a1 + 1)) > COERCE_FLOAT(a1 & 0x7FFFFFFF);
    uint64_t v36 = a1;
    float v10 = (float)-*(float *)&a2 / *(float *)((unint64_t)&v36 | (4 * v9));
    float32x2_t v37 = 0;
    *(float *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFFBLL | (4 * v9)) = v10;
    float32x2_t v11 = v37;
  }
  *(float *)&a9 = -*((float *)&a1 + 1);
  float32x2_t v12 = (float32x2_t)vzip1_s32(*(int32x2_t *)&a9, (int32x2_t)a1);
  float32x2_t v13 = vmul_f32(*(float32x2_t *)&a5, *(float32x2_t *)&a5);
  float v14 = vaddv_f32(v13);
  float32x2_t v15 = vmul_f32(v12, v12);
  float v16 = vaddv_f32(v15);
  *(float *)&a9 = fabsf(v14);
  float v17 = fabsf(v16);
  if (*(float *)&a9 <= 0.00000011921 && v17 <= 0.00000011921)
  {
    float32x2_t v28 = vsub_f32(a4, v11);
    float v29 = sqrtf(vaddv_f32(vmul_f32(v28, v28)));
    float v27 = 0.0;
    if (v29 > 0.00001)
    {
      unsigned int v30 = 0;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  float32x2_t v19 = vsub_f32(v11, a4);
  float32x2_t v20 = vadd_f32(v13, (float32x2_t)vdup_lane_s32((int32x2_t)v13, 1));
  if (*(float *)&a9 <= 0.00000011921 || v17 <= 0.00000011921)
  {
    float32x2_t v22 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a9), 0), (int8x8_t)v12, *(int8x8_t *)&a5);
    float32x2_t v23 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a9), 0), (int8x8_t)vneg_f32(v19), (int8x8_t)v19);
    if (*(float *)&a9 > 0.00000011921) {
      float v24 = v14;
    }
    else {
      float v24 = v16;
    }
    float v25 = vmlas_n_f32((float)-v22.f32[1] * v23.f32[0], v23.f32[1], v22.f32[0]);
    if ((float)(v25 * v25) <= (float)(v24 * 1.0e-10))
    {
      float32x2_t v26 = vmul_f32(v22, v23);
      LODWORD(v27) = vdiv_f32(vadd_f32(v26, (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1)), v20).u32[0];
      if (*(float *)&a9 <= 0.00000011921) {
        float v27 = 0.0;
      }
      goto LABEL_24;
    }
LABEL_26:
    unsigned int v30 = 0;
    float v27 = 0.0;
    goto LABEL_28;
  }
  float v31 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a1 + 1), *(float32x2_t *)&a5, 1), *(float *)&a1, *(float *)&a5);
  if (fabsf(v31 * v31) > (float)(1.0e-10
                                * vmul_f32(v20, vadd_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1))).f32[0]))
  {
    float v27 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a1 + 1), v19, 1), *(float *)&a1, v19.f32[0]) / v31;
LABEL_24:
    unsigned int v30 = 1;
    goto LABEL_28;
  }
  float32x2_t v32 = vmul_f32(v19, v19);
  float v33 = vmlas_n_f32(-(float)(v19.f32[1] * *(float *)&a5), *((float *)&a5 + 1), v19.f32[0]);
  if (fabsf(v33 * v33) > (float)(1.0e-10
                                * vmul_f32(v20, vadd_f32(v32, (float32x2_t)vdup_lane_s32((int32x2_t)v32, 1))).f32[0]))
    goto LABEL_26;
  float32x2_t v34 = vmul_f32(*(float32x2_t *)&a5, v19);
  LODWORD(v27) = vdiv_f32(vadd_f32(v34, (float32x2_t)vdup_lane_s32((int32x2_t)v34, 1)), v20).u32[0];
  unsigned int v30 = 2;
LABEL_28:
  if (v27 >= 0.0) {
    uint64_t result = v30;
  }
  else {
    uint64_t result = 0;
  }
  if (a3)
  {
    if (!result) {
      float v27 = INFINITY;
    }
    *a3 = v27;
  }
  return result;
}

uint64_t geom::intersect_ray_line<double>(float64x2_t *a1, double *a2, float64x2_t a3, float64x2_t a4, double a5, double a6, float64x2_t a7, double a8, int64x2_t a9)
{
  double v9 = a1[1].f64[0];
  float64x2_t v10 = *a1;
  double v11 = a1->f64[1];
  if (v9 * v9 <= vaddvq_f64(vmulq_f64(v10, v10)) * 1.0e-12)
  {
    float64x2_t v14 = 0uLL;
  }
  else
  {
    BOOL v12 = fabs(v10.f64[1]) > fabs(v10.f64[0]);
    float64x2_t v39 = *a1;
    double v13 = -v9 / *(double *)((unint64_t)&v39 | (8 * v12));
    a9.i64[1] = 0;
    float64x2_t v40 = 0u;
    *(double *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF7 | (8 * v12)) = v13;
    float64x2_t v14 = v40;
  }
  *(double *)a9.i64 = -v11;
  float64x2_t v15 = (float64x2_t)vzip1q_s64(a9, (int64x2_t)v10);
  float64x2_t v16 = vmulq_f64(a4, a4);
  double v17 = vaddvq_f64(v16);
  float64x2_t v18 = vmulq_f64(v15, v15);
  double v19 = vaddvq_f64(v18);
  *(double *)a9.i64 = fabs(v17);
  double v20 = fabs(v19);
  if (*(double *)a9.i64 <= 2.22044605e-16 && v20 <= 2.22044605e-16)
  {
    float64x2_t v31 = vsubq_f64(a3, v14);
    double v32 = sqrt(vaddvq_f64(vmulq_f64(v31, v31)));
    double v30 = 0.0;
    if (v32 > 0.000001)
    {
      unsigned int v33 = 0;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  float64x2_t v22 = vsubq_f64(v14, a3);
  float64x2_t v23 = vaddq_f64(v16, (float64x2_t)vdupq_laneq_s64((int64x2_t)v16, 1));
  v16.f64[0] = 2.22044605e-16;
  if (*(double *)a9.i64 <= 2.22044605e-16 || v20 <= 2.22044605e-16)
  {
    float64x2_t v25 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v16, (float64x2_t)a9).i64[0], 0), (int8x16_t)v15, (int8x16_t)a4);
    a7.f64[0] = 2.22044605e-16;
    float64x2_t v26 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(a7, (float64x2_t)a9).i64[0], 0), (int8x16_t)vnegq_f64(v22), (int8x16_t)v22);
    if (*(double *)a9.i64 > 2.22044605e-16) {
      double v27 = v17;
    }
    else {
      double v27 = v19;
    }
    double v28 = vmlad_n_f64(-v25.f64[1] * v26.f64[0], v26.f64[1], v25.f64[0]);
    if (v28 * v28 <= v27 * 1.0e-12)
    {
      float64x2_t v29 = vmulq_f64(v25, v26);
      *(void *)&double v30 = *(_OWORD *)&vdivq_f64(vaddq_f64(v29, (float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1)), v23);
      if (*(double *)a9.i64 <= 2.22044605e-16) {
        double v30 = 0.0;
      }
      goto LABEL_24;
    }
LABEL_26:
    unsigned int v33 = 0;
    double v30 = 0.0;
    goto LABEL_28;
  }
  double v34 = vmlad_n_f64(vmuld_lane_f64(v11, a4, 1), v10.f64[0], a4.f64[0]);
  if (fabs(v34 * v34) > 1.0e-12
                       * vmulq_f64(v23, vaddq_f64(v18, (float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1))).f64[0])
  {
    double v30 = vmlad_n_f64(vmuld_lane_f64(v11, v22, 1), v10.f64[0], v22.f64[0]) / v34;
LABEL_24:
    unsigned int v33 = 1;
    goto LABEL_28;
  }
  float64x2_t v35 = vmulq_f64(v22, v22);
  double v36 = vmlad_n_f64(-(v22.f64[1] * a4.f64[0]), a4.f64[1], v22.f64[0]);
  if (fabs(v36 * v36) > 1.0e-12
                       * vmulq_f64(v23, vaddq_f64(v35, (float64x2_t)vdupq_laneq_s64((int64x2_t)v35, 1))).f64[0])
    goto LABEL_26;
  float64x2_t v37 = vmulq_f64(a4, v22);
  *(void *)&double v30 = *(_OWORD *)&vdivq_f64(vaddq_f64(v37, (float64x2_t)vdupq_laneq_s64((int64x2_t)v37, 1)), v23);
  unsigned int v33 = 2;
LABEL_28:
  if (v30 >= 0.0) {
    uint64_t result = v33;
  }
  else {
    uint64_t result = 0;
  }
  if (a2)
  {
    if (!result) {
      double v30 = INFINITY;
    }
    *a2 = v30;
  }
  return result;
}

uint64_t geom::intersect_ray_ray<float>(float *a1, float *a2, float32x2_t a3, double a4, float32x2_t a5, double a6)
{
  int32x2_t v6 = (int32x2_t)vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a4);
  int32x2_t v7 = (int32x2_t)vmul_f32(*(float32x2_t *)&a6, *(float32x2_t *)&a6);
  float32x2_t v8 = vadd_f32((float32x2_t)vzip1_s32(v7, v6), (float32x2_t)vzip2_s32(v7, v6));
  int32x2_t v9 = vcge_f32((float32x2_t)0x3400000034000000, vabs_f32(v8));
  if (v9.i32[1] & v9.i32[0])
  {
    float32x2_t v10 = vsub_f32(a3, a5);
    float v11 = 0.0;
    BOOL v29 = sqrtf(vaddv_f32(vmul_f32(v10, v10))) > 0.00001;
    float v12 = 0.0;
    if (!v29) {
      goto LABEL_24;
    }
LABEL_28:
    uint64_t v22 = 0;
    float v12 = INFINITY;
    float v11 = INFINITY;
    goto LABEL_29;
  }
  float32x2_t v13 = vsub_f32(a5, a3);
  if (v9.i8[4]) {
    float v14 = v8.f32[0];
  }
  else {
    float v14 = v8.f32[1];
  }
  if (v9.i8[4]) {
    unsigned int v15 = -1;
  }
  else {
    unsigned int v15 = 0;
  }
  if ((v9.i8[4] | v9.i8[0]))
  {
    float32x2_t v16 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v15), *(int8x8_t *)&a6, *(int8x8_t *)&a4);
    if (v9.i8[4]) {
      unsigned int v17 = -1;
    }
    else {
      unsigned int v17 = 0;
    }
    float32x2_t v18 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v17), (int8x8_t)vneg_f32(v13), (int8x8_t)v13);
    float v19 = vmlas_n_f32((float)-v16.f32[1] * v18.f32[0], v18.f32[1], v16.f32[0]);
    if ((float)(v19 * v19) > (float)(v14 * 1.0e-10)) {
      goto LABEL_28;
    }
    float v12 = vaddv_f32(vmul_f32(v16, v18)) / v14;
    if (v9.i8[4]) {
      float v11 = 0.0;
    }
    else {
      float v11 = v12;
    }
    if (v9.i8[0]) {
      float v12 = 0.0;
    }
LABEL_24:
    if (v11 >= 0.0 && v12 >= 0.0)
    {
      uint64_t v22 = 1;
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  float v20 = vmlas_n_f32((float)-*((float *)&a4 + 1) * *(float *)&a6, *((float *)&a6 + 1), *(float *)&a4);
  float v21 = (float)(v8.f32[1] * v8.f32[0]) * 1.0e-10;
  if (fabsf(v20 * v20) > v21)
  {
    float v11 = vmlas_n_f32(-(float)(v13.f32[1] * *(float *)&a6), *((float *)&a6 + 1), v13.f32[0]) / v20;
    float v12 = vmlas_n_f32(-(float)(v13.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v13.f32[0]) / v20;
    goto LABEL_24;
  }
  float v23 = vmlas_n_f32(-(float)(v13.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v13.f32[0]);
  if (fabsf(v23 * v23) > (float)((float)(v8.f32[1] * vaddv_f32(vmul_f32(v13, v13))) * 1.0e-10)) {
    goto LABEL_28;
  }
  int32x2_t v25 = (int32x2_t)vmul_f32(*(float32x2_t *)&a4, v13);
  int32x2_t v26 = (int32x2_t)vmul_f32(*(float32x2_t *)&a6, vneg_f32(v13));
  float32x2_t v27 = vdiv_f32(vadd_f32((float32x2_t)vzip1_s32(v26, v25), (float32x2_t)vzip2_s32(v26, v25)), v8);
  float v28 = fabsf(vmul_f32(v27, v27).f32[0]);
  float v12 = 0.0;
  BOOL v29 = fabsf(vmuls_lane_f32(v27.f32[1], v27, 1)) > v21 || v28 > v21;
  if (!v29)
  {
    uint64_t v22 = 1;
LABEL_43:
    float v11 = 0.0;
    goto LABEL_29;
  }
  if (v27.f32[1] < 0.0 && v27.f32[0] < 0.0) {
    goto LABEL_28;
  }
  int32x2_t v30 = vcgez_f32(v27);
  if (v30.i32[1] & v30.i32[0])
  {
    uint64_t v22 = 2;
    goto LABEL_43;
  }
  if (v27.f32[1] >= 0.0) {
    float v11 = v27.f32[1];
  }
  else {
    float v11 = 0.0;
  }
  if (v27.f32[0] >= 0.0) {
    float v12 = v27.f32[0];
  }
  uint64_t v22 = 2;
LABEL_29:
  if (a1) {
    *a1 = v11;
  }
  if (a2) {
    *a2 = v12;
  }
  return v22;
}

uint64_t geom::intersect_ray_ray<double>(double *a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6)
{
  int64x2_t v6 = (int64x2_t)vmulq_f64(a4, a4);
  int64x2_t v7 = (int64x2_t)vmulq_f64(a6, a6);
  float64x2_t v8 = vaddq_f64((float64x2_t)vzip1q_s64(v7, v6), (float64x2_t)vzip2q_s64(v7, v6));
  int32x2_t v9 = vmovn_s64(vcgeq_f64((float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL), vabsq_f64(v8)));
  if (v9.i32[1] & v9.i32[0])
  {
    float64x2_t v10 = vsubq_f64(a3, a5);
    double v11 = 0.0;
    BOOL v29 = sqrt(vaddvq_f64(vmulq_f64(v10, v10))) > 0.000001;
    double v12 = 0.0;
    if (!v29) {
      goto LABEL_24;
    }
LABEL_28:
    uint64_t v22 = 0;
    double v12 = INFINITY;
    double v11 = INFINITY;
    goto LABEL_29;
  }
  float64x2_t v13 = vsubq_f64(a5, a3);
  if (v9.i8[4]) {
    double v14 = v8.f64[0];
  }
  else {
    double v14 = v8.f64[1];
  }
  if (v9.i8[4]) {
    unint64_t v15 = -1;
  }
  else {
    unint64_t v15 = 0;
  }
  if ((v9.i8[4] | v9.i8[0]))
  {
    float64x2_t v16 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v15), (int8x16_t)a6, (int8x16_t)a4);
    if (v9.i8[4]) {
      unint64_t v17 = -1;
    }
    else {
      unint64_t v17 = 0;
    }
    float64x2_t v18 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v17), (int8x16_t)vnegq_f64(v13), (int8x16_t)v13);
    double v19 = vmlad_n_f64(-v16.f64[1] * v18.f64[0], v18.f64[1], v16.f64[0]);
    if (v19 * v19 > v14 * 1.0e-12) {
      goto LABEL_28;
    }
    double v12 = vaddvq_f64(vmulq_f64(v16, v18)) / v14;
    if (v9.i8[4]) {
      double v11 = 0.0;
    }
    else {
      double v11 = v12;
    }
    if (v9.i8[0]) {
      double v12 = 0.0;
    }
LABEL_24:
    if (v11 >= 0.0 && v12 >= 0.0)
    {
      uint64_t v22 = 1;
      goto LABEL_29;
    }
    goto LABEL_28;
  }
  double v20 = vmlad_n_f64(-a4.f64[1] * a6.f64[0], a6.f64[1], a4.f64[0]);
  double v21 = v8.f64[1] * v8.f64[0] * 1.0e-12;
  if (fabs(v20 * v20) > v21)
  {
    double v11 = vmlad_n_f64(-(v13.f64[1] * a6.f64[0]), a6.f64[1], v13.f64[0]) / v20;
    double v12 = vmlad_n_f64(-(v13.f64[1] * a4.f64[0]), a4.f64[1], v13.f64[0]) / v20;
    goto LABEL_24;
  }
  double v23 = vmlad_n_f64(-(v13.f64[1] * a4.f64[0]), a4.f64[1], v13.f64[0]);
  if (fabs(v23 * v23) > v8.f64[1] * vaddvq_f64(vmulq_f64(v13, v13)) * 1.0e-12) {
    goto LABEL_28;
  }
  int64x2_t v25 = (int64x2_t)vmulq_f64(a4, v13);
  int64x2_t v26 = (int64x2_t)vmulq_f64(a6, vnegq_f64(v13));
  float64x2_t v27 = vdivq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v26, v25), (float64x2_t)vzip2q_s64(v26, v25)), v8);
  double v28 = fabs(vmulq_f64(v27, v27).f64[0]);
  double v12 = 0.0;
  BOOL v29 = fabs(vmuld_lane_f64(v27.f64[1], v27, 1)) > v21 || v28 > v21;
  if (!v29)
  {
    uint64_t v22 = 1;
LABEL_43:
    double v11 = 0.0;
    goto LABEL_29;
  }
  if (v27.f64[1] < 0.0 && v27.f64[0] < 0.0) {
    goto LABEL_28;
  }
  int32x2_t v30 = vmovn_s64(vcgezq_f64(v27));
  if (v30.i32[1] & v30.i32[0])
  {
    uint64_t v22 = 2;
    goto LABEL_43;
  }
  if (v27.f64[1] >= 0.0) {
    double v11 = v27.f64[1];
  }
  else {
    double v11 = 0.0;
  }
  if (v27.f64[0] >= 0.0) {
    double v12 = v27.f64[0];
  }
  uint64_t v22 = 2;
LABEL_29:
  if (a1) {
    *a1 = v11;
  }
  if (a2) {
    *a2 = v12;
  }
  return v22;
}

uint64_t geom::intersect_ray_line_segment<float>(float *a1, int *a2, float32x2_t a3, double a4, float32x2_t a5, float32x2_t a6, double a7, double a8)
{
  float32x2_t v8 = vsub_f32(a6, a5);
  float32x2_t v9 = vmul_f32(*(float32x2_t *)&a4, *(float32x2_t *)&a4);
  float v10 = vaddv_f32(v9);
  float32x2_t v11 = vmul_f32(v8, v8);
  float v12 = vaddv_f32(v11);
  *(float *)&a8 = fabsf(v10);
  float v13 = fabsf(v12);
  if (*(float *)&a8 > 0.00000011921 || v13 > 0.00000011921)
  {
    float32x2_t v15 = vsub_f32(a5, a3);
    if (*(float *)&a8 > 0.00000011921) {
      float v16 = v10;
    }
    else {
      float v16 = v12;
    }
    if (*(float *)&a8 > 0.00000011921 && v13 > 0.00000011921)
    {
      float32x2_t v28 = vadd_f32(v9, (float32x2_t)vdup_lane_s32((int32x2_t)v9, 1));
      float v29 = vmlas_n_f32((float)-*((float *)&a4 + 1) * v8.f32[0], v8.f32[1], *(float *)&a4);
      if (fabsf(v29 * v29) <= (float)(1.0e-10
                                     * vmul_f32(v28, vadd_f32(v11, (float32x2_t)vdup_lane_s32((int32x2_t)v11, 1))).f32[0]))
      {
        float32x2_t v31 = vmul_f32(v15, v15);
        float v32 = vmlas_n_f32(-(float)(v15.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v15.f32[0]);
        if (fabsf(v32 * v32) > (float)(1.0e-10
                                      * vmul_f32(v28, vadd_f32(v31, (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1))).f32[0]))
          goto LABEL_21;
        float32x2_t v33 = vmul_f32(*(float32x2_t *)&a4, v15);
        float32x2_t v34 = vdiv_f32(vadd_f32(v33, (float32x2_t)vdup_lane_s32((int32x2_t)v33, 1)), v28);
        float32x2_t v35 = vmul_f32(*(float32x2_t *)&a4, vadd_f32(v15, v8));
        float32x2_t v36 = vdiv_f32(vadd_f32(v35, (float32x2_t)vdup_lane_s32((int32x2_t)v35, 1)), v28);
        if (v34.f32[0] < 0.0 && v36.f32[0] < 0.0) {
          goto LABEL_21;
        }
        unsigned __int8 v37 = vcgt_f32(v34, v36).u8[0];
        if (v37) {
          float v23 = v36.f32[0];
        }
        else {
          float v23 = v34.f32[0];
        }
        if (v37) {
          float v22 = 0.0;
        }
        else {
          float v22 = 1.0;
        }
        uint64_t v25 = 2;
        goto LABEL_28;
      }
      float v23 = vmlas_n_f32(-(float)(v15.f32[1] * v8.f32[0]), v8.f32[1], v15.f32[0]) / v29;
      float v22 = vmlas_n_f32(-(float)(v15.f32[1] * *(float *)&a4), *((float *)&a4 + 1), v15.f32[0]) / v29;
    }
    else
    {
      float32x2_t v18 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a8), 0), (int8x8_t)v8, *(int8x8_t *)&a4);
      float32x2_t v19 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)&a8), 0), (int8x8_t)vneg_f32(v15), (int8x8_t)v15);
      float v20 = vmlas_n_f32((float)-v18.f32[1] * v19.f32[0], v19.f32[1], v18.f32[0]);
      if ((float)(v20 * v20) > (float)(v16 * 1.0e-10))
      {
LABEL_21:
        uint64_t v25 = 0;
        float v26 = INFINITY;
        int v27 = 2143289344;
        goto LABEL_29;
      }
      float v21 = vaddv_f32(vmul_f32(v18, v19)) / v16;
      float v22 = 0.0;
      if (*(float *)&a8 > 0.00000011921) {
        float v23 = v21;
      }
      else {
        float v23 = 0.0;
      }
      if (v13 > 0.00000011921) {
        float v22 = v21;
      }
    }
  }
  else
  {
    float32x2_t v24 = vsub_f32(a3, a5);
    float v23 = 0.0;
    float v22 = 0.0;
    if (sqrtf(vaddv_f32(vmul_f32(v24, v24))) > 0.00001) {
      goto LABEL_21;
    }
  }
  uint64_t v25 = 0;
  float v26 = INFINITY;
  int v27 = 2143289344;
  if (v23 >= 0.0 && v22 >= 0.0 && v22 <= 1.0)
  {
    uint64_t v25 = 1;
LABEL_28:
    float v26 = fmaxf(v23, 0.0);
    int v27 = LODWORD(v22);
  }
LABEL_29:
  if (a1) {
    *a1 = v26;
  }
  if (a2) {
    *a2 = v27;
  }
  return v25;
}

uint64_t geom::intersect_ray_line_segment<double>(double *a1, uint64_t *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, double a7, float64x2_t a8)
{
  float64x2_t v9 = vsubq_f64(a6, a5);
  float64x2_t v10 = vmulq_f64(a4, a4);
  double v11 = vaddvq_f64(v10);
  float64x2_t v12 = vmulq_f64(v9, v9);
  double v13 = vaddvq_f64(v12);
  a8.f64[0] = fabs(v11);
  double v14 = fabs(v13);
  if (a8.f64[0] > 2.22044605e-16 || v14 > 2.22044605e-16)
  {
    float64x2_t v16 = vsubq_f64(a5, a3);
    v8.f64[0] = 2.22044605e-16;
    if (a8.f64[0] > 2.22044605e-16) {
      double v17 = v11;
    }
    else {
      double v17 = v13;
    }
    if (a8.f64[0] > 2.22044605e-16 && v14 > 2.22044605e-16)
    {
      float64x2_t v29 = vaddq_f64(v10, (float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1));
      double v30 = vmlad_n_f64(-a4.f64[1] * v9.f64[0], v9.f64[1], a4.f64[0]);
      if (fabs(v30 * v30) <= 1.0e-12
                            * vmulq_f64(v29, vaddq_f64(v12, (float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1))).f64[0])
      {
        float64x2_t v32 = vmulq_f64(v16, v16);
        double v33 = vmlad_n_f64(-(v16.f64[1] * a4.f64[0]), a4.f64[1], v16.f64[0]);
        if (fabs(v33 * v33) > 1.0e-12
                             * vmulq_f64(v29, vaddq_f64(v32, (float64x2_t)vdupq_laneq_s64((int64x2_t)v32, 1))).f64[0])
          goto LABEL_21;
        float64x2_t v34 = vmulq_f64(a4, v16);
        float64x2_t v35 = vdivq_f64(vaddq_f64(v34, (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1)), v29);
        float64x2_t v36 = vmulq_f64(a4, vaddq_f64(v16, v9));
        float64x2_t v37 = vdivq_f64(vaddq_f64(v36, (float64x2_t)vdupq_laneq_s64((int64x2_t)v36, 1)), v29);
        if (v35.f64[0] < 0.0 && v37.f64[0] < 0.0) {
          goto LABEL_21;
        }
        unsigned __int8 v38 = vmovn_s64(vcgtq_f64(v35, v37)).u8[0];
        if (v38) {
          double v24 = v37.f64[0];
        }
        else {
          double v24 = v35.f64[0];
        }
        if (v38) {
          double v23 = 0.0;
        }
        else {
          double v23 = 1.0;
        }
        uint64_t v26 = 2;
        goto LABEL_28;
      }
      double v24 = vmlad_n_f64(-(v16.f64[1] * v9.f64[0]), v9.f64[1], v16.f64[0]) / v30;
      double v23 = vmlad_n_f64(-(v16.f64[1] * a4.f64[0]), a4.f64[1], v16.f64[0]) / v30;
    }
    else
    {
      float64x2_t v19 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v8, a8).i64[0], 0), (int8x16_t)v9, (int8x16_t)a4);
      v9.f64[0] = 2.22044605e-16;
      float64x2_t v20 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v9, a8).i64[0], 0), (int8x16_t)vnegq_f64(v16), (int8x16_t)v16);
      double v21 = vmlad_n_f64(-v19.f64[1] * v20.f64[0], v20.f64[1], v19.f64[0]);
      if (v21 * v21 > v17 * 1.0e-12)
      {
LABEL_21:
        uint64_t v26 = 0;
        double v27 = INFINITY;
        uint64_t v28 = 0x7FF8000000000000;
        goto LABEL_29;
      }
      double v22 = vaddvq_f64(vmulq_f64(v19, v20)) / v17;
      double v23 = 0.0;
      if (a8.f64[0] > 2.22044605e-16) {
        double v24 = v22;
      }
      else {
        double v24 = 0.0;
      }
      if (v14 > 2.22044605e-16) {
        double v23 = v22;
      }
    }
  }
  else
  {
    float64x2_t v25 = vsubq_f64(a3, a5);
    double v24 = 0.0;
    double v23 = 0.0;
    if (sqrt(vaddvq_f64(vmulq_f64(v25, v25))) > 0.000001) {
      goto LABEL_21;
    }
  }
  uint64_t v26 = 0;
  double v27 = INFINITY;
  uint64_t v28 = 0x7FF8000000000000;
  if (v24 >= 0.0 && v23 >= 0.0 && v23 <= 1.0)
  {
    uint64_t v26 = 1;
LABEL_28:
    double v27 = fmax(v24, 0.0);
    uint64_t v28 = *(void *)&v23;
  }
LABEL_29:
  if (a1) {
    *a1 = v27;
  }
  if (a2) {
    *a2 = v28;
  }
  return v26;
}

uint64_t geom::intersect_line_segment_line_segment<float>(float *a1, _DWORD *a2, int8x8_t a3, int8x8_t a4, int8x8_t a5, int8x8_t a6)
{
  uint64_t v6 = 0;
  v70[4] = *MEMORY[0x263EF8340];
  v70[0] = a3;
  v70[1] = a4;
  v70[2] = a5;
  v70[3] = a6;
  float32x2_t v7 = (float32x2_t)vdup_n_s32(0x7F800000u);
  float32x2_t v8 = (float32x2_t)0x7F0000007FLL;
  do
  {
    float32x2_t v9 = (float32x2_t)v70[v6];
    float32x2_t v7 = vminnm_f32(v9, v7);
    float32x2_t v8 = vmaxnm_f32(v9, v8);
    ++v6;
  }
  while (v6 != 4);
  float32x2_t v10 = vsub_f32(v8, v7);
  unsigned __int8 v11 = vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v10, 1), v10).u8[0];
  int8x8_t v66 = a3;
  float64x2_t v12 = (float *)((unint64_t)&v69 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
  float v13 = *(float *)((unint64_t)&v66 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
  int8x8_t v67 = a4;
  float v14 = *(float *)((unint64_t)&v67 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
  if (v14 >= v13) {
    float v15 = v13;
  }
  else {
    float v15 = *(float *)((unint64_t)&v67 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
  }
  int8x8_t v68 = a5;
  float v16 = *(float *)((unint64_t)&v68 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
  int8x8_t v69 = a6;
  if (*v12 >= v16) {
    float v17 = v16;
  }
  else {
    float v17 = *v12;
  }
  BOOL v18 = v15 < v17;
  int v19 = (v13 >= v14) ^ v18;
  int v20 = (v16 >= *v12) ^ v18;
  if (v19) {
    unsigned int v21 = -1;
  }
  else {
    unsigned int v21 = 0;
  }
  int8x8_t v22 = (int8x8_t)vdup_n_s32(v21);
  float32x2_t v23 = (float32x2_t)vbsl_s8(v22, a4, a3);
  if (v20) {
    unsigned int v24 = -1;
  }
  else {
    unsigned int v24 = 0;
  }
  int8x8_t v25 = (int8x8_t)vdup_n_s32(v24);
  float32x2_t v26 = (float32x2_t)vbsl_s8(v25, a5, a6);
  float32x2_t v27 = (float32x2_t)vbsl_s8(v22, (int8x8_t)vsub_f32((float32x2_t)a3, (float32x2_t)a4), (int8x8_t)vsub_f32((float32x2_t)a4, (float32x2_t)a3));
  float32x2_t v28 = (float32x2_t)vbsl_s8(v25, (int8x8_t)vsub_f32((float32x2_t)a6, (float32x2_t)a5), (int8x8_t)vsub_f32((float32x2_t)a5, (float32x2_t)a6));
  int32x2_t v29 = (int32x2_t)vmul_f32(v27, v27);
  int32x2_t v30 = (int32x2_t)vmul_f32(v28, v28);
  _D0 = vadd_f32((float32x2_t)vzip1_s32(v30, v29), (float32x2_t)vzip2_s32(v30, v29));
  float32x2_t v32 = vabs_f32(_D0);
  int32x2_t v33 = vcge_f32((float32x2_t)0x3400000034000000, v32);
  __int8 v34 = v33.i8[4];
  __int8 v35 = v33.i8[0];
  if (v33.i32[1] & v33.i32[0])
  {
    float32x2_t v36 = vsub_f32(v23, v26);
    float v37 = sqrtf(vaddv_f32(vmul_f32(v36, v36)));
    float32x2_t v38 = 0;
    if (v37 > 0.00001) {
      goto LABEL_42;
    }
    goto LABEL_32;
  }
  float32x2_t v39 = vsub_f32(v26, v23);
  char v40 = v34 | v35;
  if (v34) {
    float v41 = _D0.f32[0];
  }
  else {
    float v41 = _D0.f32[1];
  }
  if (v34) {
    unsigned int v42 = -1;
  }
  else {
    unsigned int v42 = 0;
  }
  if (v40)
  {
    float32x2_t v43 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v42), (int8x8_t)v28, (int8x8_t)v27);
    if (v34) {
      unsigned int v44 = -1;
    }
    else {
      unsigned int v44 = 0;
    }
    float32x2_t v45 = (float32x2_t)vbsl_s8((int8x8_t)vdup_n_s32(v44), (int8x8_t)vneg_f32(v39), (int8x8_t)v39);
    float v46 = vmlas_n_f32((float)-v43.f32[1] * v45.f32[0], v45.f32[1], v43.f32[0]);
    if ((float)(v46 * v46) > (float)(v41 * 1.0e-10)) {
      goto LABEL_42;
    }
    float32x2_t v47 = vmul_f32(v43, v45);
    v47.f32[0] = vaddv_f32(v47) / v41;
    float32x2_t v38 = (float32x2_t)vbic_s8((int8x8_t)vdup_lane_s32((int32x2_t)v47, 0), (int8x8_t)vcge_f32((float32x2_t)0x3400000034000000, v32));
    goto LABEL_32;
  }
  v26.f32[0] = vmlas_n_f32((float)-v27.f32[1] * v28.f32[0], v28.f32[1], v27.f32[0]);
  if (fabsf(v26.f32[0] * v26.f32[0]) > (float)((float)(_D0.f32[1] * _D0.f32[0]) * 1.0e-10))
  {
    float32x2_t v38 = vdiv_f32(vmla_n_f32(vmul_n_f32((float32x2_t)vzip1_s32((int32x2_t)v27, (int32x2_t)v28), -v39.f32[1]), (float32x2_t)vzip2_s32((int32x2_t)v27, (int32x2_t)v28), v39.f32[0]), (float32x2_t)vdup_lane_s32((int32x2_t)v26, 0));
LABEL_32:
    __asm { FMLA            S4, S0, V0.S[1] }
    float v52 = -(float)(_S4 * 0.000005);
    int32x2_t v53 = vdup_n_s32(0x7FC00000u);
    if (v38.f32[1] < v52
      || ((float v54 = (float)(_S4 * 0.000005) + 1.0, v38.f32[1] <= v54) ? (_NF = v38.f32[0] < v52) : (_NF = 1),
          !_NF ? (BOOL v56 = v38.f32[0] <= v54) : (BOOL v56 = 0),
          !v56))
    {
      uint64_t v57 = 0;
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  float v58 = vmlas_n_f32(-(float)(v39.f32[1] * v27.f32[0]), v27.f32[1], v39.f32[0]);
  if (fabsf(v58 * v58) > (float)((float)(_D0.f32[1] * vaddv_f32(vmul_f32(v39, v39))) * 1.0e-10))
  {
LABEL_42:
    uint64_t v57 = 0;
    int32x2_t v53 = vdup_n_s32(0x7FC00000u);
    goto LABEL_47;
  }
  int32x2_t v59 = (int32x2_t)vmul_f32(v27, v39);
  int32x2_t v60 = (int32x2_t)vmul_f32(v28, vneg_f32(v39));
  float32x2_t v38 = vdiv_f32(vadd_f32((float32x2_t)vzip1_s32(v60, v59), (float32x2_t)vzip2_s32(v60, v59)), _D0);
  int32x2_t v61 = vcge_f32((float32x2_t)vdup_n_s32(0x36A7C5ACu), vabs_f32(v38));
  if ((v61.i32[1] | v61.i32[0]))
  {
    float32x2_t v38 = 0;
LABEL_45:
    uint64_t v57 = 1;
LABEL_46:
    float32x2_t v62 = (float32x2_t)vbic_s8((int8x8_t)v38, (int8x8_t)vcltz_f32(v38));
    __asm { FMOV            V1.2S, #1.0 }
    int32x2_t v53 = (int32x2_t)vbsl_s8((int8x8_t)vcgt_f32(v62, _D1), (int8x8_t)_D1, (int8x8_t)v62);
    goto LABEL_47;
  }
  uint64_t v57 = 0;
  int32x2_t v53 = vdup_n_s32(0x7FC00000u);
  if (v38.f32[1] >= 0.0 && v38.f32[0] >= 0.0)
  {
    uint64_t v57 = 2;
    goto LABEL_46;
  }
LABEL_47:
  if (a1)
  {
    float v64 = *(float *)&v53.i32[1];
    if (v19) {
      float v64 = 1.0 - *(float *)&v53.i32[1];
    }
    *a1 = v64;
  }
  if (a2)
  {
    if (!v20) {
      *(float *)v53.i32 = 1.0 - *(float *)v53.i32;
    }
    *a2 = v53.i32[0];
  }
  return v57;
}

uint64_t geom::intersect_line_segment_line_segment<double>(double *a1, void *a2, int8x16_t a3, int8x16_t a4, int8x16_t a5, int8x16_t a6)
{
  uint64_t v6 = 0;
  uint64_t v70 = *MEMORY[0x263EF8340];
  v69[0] = a3;
  v69[1] = a4;
  v69[2] = a5;
  v69[3] = a6;
  float64x2_t v7 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  float64x2_t v8 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  do
  {
    float64x2_t v9 = (float64x2_t)v69[v6];
    float64x2_t v7 = vminnmq_f64(v9, v7);
    float64x2_t v8 = vmaxnmq_f64(v9, v8);
    ++v6;
  }
  while (v6 != 4);
  float64x2_t v10 = vsubq_f64(v8, v7);
  unsigned __int8 v11 = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v10, 1), v10)).u8[0];
  int8x16_t v65 = a3;
  float64x2_t v12 = (double *)((unint64_t)&v68 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
  double v13 = *(double *)((unint64_t)&v65 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
  int8x16_t v66 = a4;
  double v14 = *(double *)((unint64_t)&v66 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
  if (v14 >= v13) {
    double v15 = v13;
  }
  else {
    double v15 = *(double *)((unint64_t)&v66 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
  }
  int8x16_t v67 = a5;
  double v16 = *(double *)((unint64_t)&v67 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
  int8x16_t v68 = a6;
  if (*v12 >= v16) {
    double v17 = v16;
  }
  else {
    double v17 = *v12;
  }
  BOOL v18 = v15 < v17;
  int v19 = (v13 >= v14) ^ v18;
  int v20 = (v16 >= *v12) ^ v18;
  if (v19) {
    unint64_t v21 = -1;
  }
  else {
    unint64_t v21 = 0;
  }
  int8x16_t v22 = (int8x16_t)vdupq_n_s64(v21);
  float64x2_t v23 = (float64x2_t)vbslq_s8(v22, a4, a3);
  if (v20) {
    unint64_t v24 = -1;
  }
  else {
    unint64_t v24 = 0;
  }
  int8x16_t v25 = (int8x16_t)vdupq_n_s64(v24);
  float64x2_t v26 = (float64x2_t)vbslq_s8(v25, a5, a6);
  float64x2_t v27 = (float64x2_t)vbslq_s8(v22, (int8x16_t)vsubq_f64((float64x2_t)a3, (float64x2_t)a4), (int8x16_t)vsubq_f64((float64x2_t)a4, (float64x2_t)a3));
  float64x2_t v28 = (float64x2_t)vbslq_s8(v25, (int8x16_t)vsubq_f64((float64x2_t)a6, (float64x2_t)a5), (int8x16_t)vsubq_f64((float64x2_t)a5, (float64x2_t)a6));
  int64x2_t v29 = (int64x2_t)vmulq_f64(v27, v27);
  int64x2_t v30 = (int64x2_t)vmulq_f64(v28, v28);
  _Q0 = vaddq_f64((float64x2_t)vzip1q_s64(v30, v29), (float64x2_t)vzip2q_s64(v30, v29));
  float64x2_t v32 = vabsq_f64(_Q0);
  *(int32x2_t *)v30.i8 = vmovn_s64(vcgeq_f64((float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL), v32));
  __int8 v33 = v30.i8[4];
  __int8 v34 = v30.i8[0];
  if (v30.i32[1] & v30.i32[0])
  {
    float64x2_t v35 = vsubq_f64(v23, v26);
    double v36 = sqrt(vaddvq_f64(vmulq_f64(v35, v35)));
    float64x2_t v37 = 0uLL;
    if (v36 > 0.000001) {
      goto LABEL_42;
    }
    goto LABEL_32;
  }
  float64x2_t v38 = vsubq_f64(v26, v23);
  char v39 = v33 | v34;
  if (v33) {
    double v40 = _Q0.f64[0];
  }
  else {
    double v40 = _Q0.f64[1];
  }
  if (v33) {
    unint64_t v41 = -1;
  }
  else {
    unint64_t v41 = 0;
  }
  if (v39)
  {
    float64x2_t v42 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v41), (int8x16_t)v28, (int8x16_t)v27);
    if (v33) {
      unint64_t v43 = -1;
    }
    else {
      unint64_t v43 = 0;
    }
    float64x2_t v44 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_n_s64(v43), (int8x16_t)vnegq_f64(v38), (int8x16_t)v38);
    double v45 = vmlad_n_f64(-v42.f64[1] * v44.f64[0], v44.f64[1], v42.f64[0]);
    if (v45 * v45 > v40 * 1.0e-12) {
      goto LABEL_42;
    }
    float64x2_t v37 = (float64x2_t)vbicq_s8((int8x16_t)vdupq_lane_s64(COERCE__INT64(vaddvq_f64(vmulq_f64(v42, v44)) / v40), 0), (int8x16_t)vcgeq_f64((float64x2_t)vdupq_n_s64(0x3CB0000000000000uLL), v32));
    goto LABEL_32;
  }
  double v46 = vmlad_n_f64(-v27.f64[1] * v28.f64[0], v28.f64[1], v27.f64[0]);
  if (fabs(v46 * v46) > _Q0.f64[1] * _Q0.f64[0] * 1.0e-12)
  {
    float64x2_t v37 = vdivq_f64(vmlaq_n_f64(vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v27, (int64x2_t)v28), -v38.f64[1]), (float64x2_t)vzip2q_s64((int64x2_t)v27, (int64x2_t)v28), v38.f64[0]), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v46, 0));
LABEL_32:
    __asm { FMLA            D4, D0, V0.D[1] }
    double v51 = -(_D4 * 1.0e-10);
    int64x2_t v52 = vdupq_n_s64(0x7FF8000000000000uLL);
    if (v37.f64[1] < v51
      || ((double v53 = _D4 * 1.0e-10 + 1.0, v37.f64[1] <= v53) ? (_NF = v37.f64[0] < v51) : (_NF = 1),
          !_NF ? (BOOL v55 = v37.f64[0] <= v53) : (BOOL v55 = 0),
          !v55))
    {
      uint64_t v56 = 0;
      goto LABEL_47;
    }
    goto LABEL_45;
  }
  double v57 = vmlad_n_f64(-(v38.f64[1] * v27.f64[0]), v27.f64[1], v38.f64[0]);
  if (fabs(v57 * v57) > _Q0.f64[1] * vaddvq_f64(vmulq_f64(v38, v38)) * 1.0e-12)
  {
LABEL_42:
    uint64_t v56 = 0;
    int64x2_t v52 = vdupq_n_s64(0x7FF8000000000000uLL);
    goto LABEL_47;
  }
  int64x2_t v58 = (int64x2_t)vmulq_f64(v27, v38);
  int64x2_t v59 = (int64x2_t)vmulq_f64(v28, vnegq_f64(v38));
  float64x2_t v37 = vdivq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v59, v58), (float64x2_t)vzip2q_s64(v59, v58)), _Q0);
  int32x2_t v60 = vmovn_s64(vcgeq_f64((float64x2_t)vdupq_n_s64(0x3DDB7CDFD9D7BDBBuLL), vabsq_f64(v37)));
  if ((v60.i32[1] | v60.i32[0]))
  {
    float64x2_t v37 = 0uLL;
LABEL_45:
    uint64_t v56 = 1;
LABEL_46:
    float64x2_t v61 = (float64x2_t)vbicq_s8((int8x16_t)v37, (int8x16_t)vcltzq_f64(v37));
    __asm { FMOV            V1.2D, #1.0 }
    int64x2_t v52 = (int64x2_t)vbslq_s8((int8x16_t)vcgtq_f64(v61, _Q1), (int8x16_t)_Q1, (int8x16_t)v61);
    goto LABEL_47;
  }
  uint64_t v56 = 0;
  int64x2_t v52 = vdupq_n_s64(0x7FF8000000000000uLL);
  if (v37.f64[1] >= 0.0 && v37.f64[0] >= 0.0)
  {
    uint64_t v56 = 2;
    goto LABEL_46;
  }
LABEL_47:
  if (a1)
  {
    double v63 = *(double *)&v52.i64[1];
    if (v19) {
      double v63 = 1.0 - *(double *)&v52.i64[1];
    }
    *a1 = v63;
  }
  if (a2)
  {
    if (!v20) {
      *(double *)v52.i64 = 1.0 - *(double *)v52.i64;
    }
    *a2 = v52.i64[0];
  }
  return v56;
}

uint64_t geom::intersect_line_line_segment<float>(uint64_t a1, int a2, float *a3, float32x2_t a4, float32x2_t a5, double a6, double a7, double a8, double _D5)
{
  if ((float)(*(float *)&a2 * *(float *)&a2) <= (float)(vaddv_f32(vmul_f32((float32x2_t)a1, (float32x2_t)a1)) * 1.0e-10))
  {
    float32x2_t v12 = 0;
  }
  else
  {
    BOOL v10 = fabsf(*((float *)&a1 + 1)) > COERCE_FLOAT(a1 & 0x7FFFFFFF);
    uint64_t v42 = a1;
    float v11 = (float)-*(float *)&a2 / *(float *)((unint64_t)&v42 | (4 * v10));
    float32x2_t v43 = 0;
    *(float *)((unint64_t)&v43 & 0xFFFFFFFFFFFFFFFBLL | (4 * v10)) = v11;
    float32x2_t v12 = v43;
  }
  *(float *)&_D5 = -*((float *)&a1 + 1);
  float32x2_t v13 = (float32x2_t)vzip1_s32(*(int32x2_t *)&_D5, (int32x2_t)a1);
  _D1 = vsub_f32(a5, a4);
  float32x2_t v15 = vmul_f32(v13, v13);
  float v16 = vaddv_f32(v15);
  float32x2_t v17 = vmul_f32(_D1, _D1);
  float v18 = vaddv_f32(v17);
  v9.f32[0] = fabsf(v16);
  float v19 = fabsf(v18);
  if (v19 <= 0.00000011921 && v9.f32[0] <= 0.00000011921)
  {
    float32x2_t v28 = vsub_f32(v12, a4);
    float v29 = sqrtf(vaddv_f32(vmul_f32(v28, v28)));
    float v27 = 0.0;
    if (v29 > 0.00001)
    {
      unsigned int v30 = 0;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  float32x2_t v21 = vsub_f32(a4, v12);
  if (v9.f32[0] > 0.00000011921) {
    float v22 = v16;
  }
  else {
    float v22 = v18;
  }
  if (v19 <= 0.00000011921 || v9.f32[0] <= 0.00000011921)
  {
    float32x2_t v24 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, v9), 0), (int8x8_t)_D1, (int8x8_t)v13);
    float32x2_t v25 = (float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(vcge_f32((float32x2_t)0x3400000034000000, v9), 0), (int8x8_t)vneg_f32(v21), (int8x8_t)v21);
    float v26 = vmlas_n_f32((float)-v24.f32[1] * v25.f32[0], v25.f32[1], v24.f32[0]);
    if ((float)(v26 * v26) <= (float)(v22 * 1.0e-10))
    {
      float v27 = vaddv_f32(vmul_f32(v24, v25)) / v22;
      if (v19 <= 0.00000011921) {
        float v27 = 0.0;
      }
      goto LABEL_24;
    }
LABEL_26:
    unsigned int v30 = 0;
    float v27 = 0.0;
    goto LABEL_28;
  }
  float32x2_t v31 = vadd_f32(v15, (float32x2_t)vdup_lane_s32((int32x2_t)v15, 1));
  float32x2_t v32 = vadd_f32(v17, (float32x2_t)vdup_lane_s32((int32x2_t)v17, 1));
  __asm { FMLA            S16, S5, V1.S[1] }
  if (fabsf(_S16 * _S16) > (float)(1.0e-10 * vmul_f32(v32, v31).f32[0]))
  {
    float v27 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a1 + 1), v21, 1), *(float *)&a1, v21.f32[0]) / _S16;
LABEL_24:
    unsigned int v30 = 1;
    goto LABEL_28;
  }
  float32x2_t v37 = vmul_f32(v21, v21);
  float v38 = vmlas_n_f32(vmuls_lane_f32(*((float *)&a1 + 1), v21, 1), *(float *)&a1, v21.f32[0]);
  if (fabsf(v38 * v38) > (float)(1.0e-10
                                * vmul_f32(v31, vadd_f32(v37, (float32x2_t)vdup_lane_s32((int32x2_t)v37, 1))).f32[0]))
    goto LABEL_26;
  float32x2_t v39 = vmul_f32(_D1, vneg_f32(v21));
  LODWORD(v27) = vdiv_f32(vadd_f32(v39, (float32x2_t)vdup_lane_s32((int32x2_t)v39, 1)), v32).u32[0];
  unsigned int v30 = 2;
LABEL_28:
  if (v27 > 1.0 || v27 < 0.0) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v30;
  }
  if (a3)
  {
    if (!result) {
      float v27 = NAN;
    }
    *a3 = v27;
  }
  return result;
}

uint64_t geom::intersect_line_line_segment<double>(float64x2_t *a1, double *a2, float64x2_t a3, float64x2_t a4, double a5, double a6, double a7, double a8, int64x2_t _Q6)
{
  double v11 = a1[1].f64[0];
  float64x2_t v12 = *a1;
  double v13 = a1->f64[1];
  if (v11 * v11 <= vaddvq_f64(vmulq_f64(v12, v12)) * 1.0e-12)
  {
    float64x2_t v16 = 0uLL;
  }
  else
  {
    BOOL v14 = fabs(v12.f64[1]) > fabs(v12.f64[0]);
    float64x2_t v47 = *a1;
    double v15 = -v11 / *(double *)((unint64_t)&v47 | (8 * v14));
    _Q6.i64[1] = 0;
    float64x2_t v48 = 0u;
    *(double *)((unint64_t)&v48 & 0xFFFFFFFFFFFFFFF7 | (8 * v14)) = v15;
    float64x2_t v16 = v48;
  }
  *(double *)_Q6.i64 = -v13;
  float64x2_t v17 = (float64x2_t)vzip1q_s64(_Q6, (int64x2_t)v12);
  _Q1 = vsubq_f64(a4, a3);
  float64x2_t v19 = vmulq_f64(v17, v17);
  double v20 = vaddvq_f64(v19);
  float64x2_t v21 = vmulq_f64(_Q1, _Q1);
  double v22 = vaddvq_f64(v21);
  v9.f64[0] = fabs(v20);
  double v23 = fabs(v22);
  if (v23 <= 2.22044605e-16 && v9.f64[0] <= 2.22044605e-16)
  {
    float64x2_t v33 = vsubq_f64(v16, a3);
    double v34 = sqrt(vaddvq_f64(vmulq_f64(v33, v33)));
    double v32 = 0.0;
    if (v34 > 0.000001)
    {
      unsigned int v35 = 0;
      goto LABEL_28;
    }
    goto LABEL_24;
  }
  float64x2_t v25 = vsubq_f64(a3, v16);
  v10.f64[0] = 2.22044605e-16;
  if (v9.f64[0] > 2.22044605e-16) {
    double v26 = v20;
  }
  else {
    double v26 = v22;
  }
  if (v23 <= 2.22044605e-16 || v9.f64[0] <= 2.22044605e-16)
  {
    float64x2_t v28 = (float64x2_t)vdupq_lane_s64(vcgeq_f64(v10, v9).i64[0], 0);
    float64x2_t v29 = (float64x2_t)vbslq_s8((int8x16_t)v28, (int8x16_t)_Q1, (int8x16_t)v17);
    v28.f64[0] = 2.22044605e-16;
    float64x2_t v30 = (float64x2_t)vbslq_s8((int8x16_t)vdupq_lane_s64(vcgeq_f64(v28, v9).i64[0], 0), (int8x16_t)vnegq_f64(v25), (int8x16_t)v25);
    double v31 = vmlad_n_f64(-v29.f64[1] * v30.f64[0], v30.f64[1], v29.f64[0]);
    if (v31 * v31 <= v26 * 1.0e-12)
    {
      double v32 = vaddvq_f64(vmulq_f64(v29, v30)) / v26;
      if (v23 <= 2.22044605e-16) {
        double v32 = 0.0;
      }
      goto LABEL_24;
    }
LABEL_26:
    unsigned int v35 = 0;
    double v32 = 0.0;
    goto LABEL_28;
  }
  float64x2_t v36 = vaddq_f64(v19, (float64x2_t)vdupq_laneq_s64((int64x2_t)v19, 1));
  float64x2_t v37 = vaddq_f64(v21, (float64x2_t)vdupq_laneq_s64((int64x2_t)v21, 1));
  __asm { FMLA            D16, D6, V1.D[1] }
  if (fabs(_D16 * _D16) > 1.0e-12 * vmulq_f64(v37, v36).f64[0])
  {
    double v32 = vmlad_n_f64(vmuld_lane_f64(v13, v25, 1), v12.f64[0], v25.f64[0]) / _D16;
LABEL_24:
    unsigned int v35 = 1;
    goto LABEL_28;
  }
  float64x2_t v42 = vmulq_f64(v25, v25);
  double v43 = vmlad_n_f64(vmuld_lane_f64(v13, v25, 1), v12.f64[0], v25.f64[0]);
  if (fabs(v43 * v43) > 1.0e-12
                       * vmulq_f64(v36, vaddq_f64(v42, (float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1))).f64[0])
    goto LABEL_26;
  float64x2_t v44 = vmulq_f64(_Q1, vnegq_f64(v25));
  *(void *)&double v32 = *(_OWORD *)&vdivq_f64(vaddq_f64(v44, (float64x2_t)vdupq_laneq_s64((int64x2_t)v44, 1)), v37);
  unsigned int v35 = 2;
LABEL_28:
  if (v32 > 1.0 || v32 < 0.0) {
    uint64_t result = 0;
  }
  else {
    uint64_t result = v35;
  }
  if (a2)
  {
    if (!result) {
      double v32 = NAN;
    }
    *a2 = v32;
  }
  return result;
}

uint64_t geom::intersect_line_line<float>(uint64_t a1, int a2, uint64_t a3, int a4, void *a5)
{
  float32x2_t v5 = vmul_f32((float32x2_t)a1, (float32x2_t)a1);
  float32x2_t v6 = vmul_f32((float32x2_t)a3, (float32x2_t)a3);
  float v7 = vaddv_f32(v6);
  if (vaddv_f32(v5) <= 0.00000011921 || v7 <= 0.00000011921) {
    return 0;
  }
  float v10 = *(float *)&a2;
  float v11 = *(float *)&a1;
  float32x2_t v12 = vadd_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v6, 1));
  float v13 = (float)(*(float *)&a1 * *((float *)&a3 + 1)) - (float)(*((float *)&a1 + 1) * *(float *)&a3);
  float v14 = 1.0e-10 * vmul_f32(vadd_f32(v5, (float32x2_t)vdup_lane_s32((int32x2_t)v5, 1)), v12).f32[0];
  if ((float)(v13 * v13) <= v14)
  {
    int v27 = HIDWORD(a1);
    uint64_t v28 = a3;
    uint64_t v16 = 4;
    float64x2_t v17 = v26;
    do
    {
      if (v11 < *(float *)&v26[v16])
      {
        float v11 = *(float *)&v26[v16];
        float64x2_t v17 = &v26[v16];
      }
      v16 += 4;
    }
    while (v16 != 16);
    int8x8_t v18 = (int8x8_t)vceqd_s64((v17 - v26) & 0x3F8, 0);
    int8x8_t v19 = vbsl_s8(v18, (int8x8_t)a1, (int8x8_t)a3);
    int8x8_t v20 = vbsl_s8(v18, (int8x8_t)a3, (int8x8_t)a1);
    if (((v17 - v26) & 0x3F8) != 0) {
      float v21 = *(float *)&a4;
    }
    else {
      float v21 = *(float *)&a2;
    }
    if (((v17 - v26) & 0x3F8) == 0) {
      float v10 = *(float *)&a4;
    }
    int8x8_t v24 = v20;
    float v22 = *(float *)((unint64_t)&v24 | (4 * (((v17 - v26) >> 2) & 1))) * v21;
    int8x8_t v25 = v19;
    float v23 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFFBLL | (4 * (((v17 - v26) >> 2) & 1)));
    return 2 * ((float)((float)(v10 - (float)(v22 / v23)) * (float)(v10 - (float)(v22 / v23))) <= v14);
  }
  else
  {
    if (a5)
    {
      *(float *)&uint64_t v15 = (float)((float)(*((float *)&a1 + 1) * *(float *)&a4)
                             - (float)(*((float *)&a3 + 1) * *(float *)&a2))
                     / v13;
      *((float *)&v15 + 1) = (float)((float)(*(float *)&a1 * *(float *)&a4) - (float)(*(float *)&a3 * *(float *)&a2))
                           / (float)-v13;
      *a5 = v15;
    }
    return 1;
  }
}

uint64_t geom::intersect_line_line<double>(uint64_t a1, float64x2_t *a2, _OWORD *a3)
{
  _Q0 = *(float64x2_t *)a1;
  _Q2 = *a2;
  float64x2_t v5 = vmulq_f64(_Q0, _Q0);
  float64x2_t v6 = vmulq_f64(_Q2, _Q2);
  double v7 = vaddvq_f64(v6);
  if (vaddvq_f64(v5) <= 2.22044605e-16 || v7 <= 2.22044605e-16) {
    return 0;
  }
  float64x2_t v10 = vaddq_f64(v6, (float64x2_t)vdupq_laneq_s64((int64x2_t)v6, 1));
  __asm { FMLA            D4, D0, V2.D[1] }
  double v16 = 1.0e-12 * vmulq_f64(vaddq_f64(v5, (float64x2_t)vdupq_laneq_s64((int64x2_t)v5, 1)), v10).f64[0];
  if (_D4 * _D4 <= v16)
  {
    uint64_t v28 = *(void *)(a1 + 8);
    float64x2_t v29 = _Q2;
    uint64_t v21 = 8;
    float v22 = v27;
    do
    {
      if (_Q0.f64[0] < *(double *)&v27[v21])
      {
        _Q0.f64[0] = *(float64_t *)&v27[v21];
        float v22 = &v27[v21];
      }
      v21 += 8;
    }
    while (v21 != 32);
    uint64_t v23 = v22 - v27;
    if (((v22 - v27) & 0x7F0) != 0) {
      int8x8_t v24 = a2;
    }
    else {
      int8x8_t v24 = (float64x2_t *)a1;
    }
    if (((v22 - v27) & 0x7F0) != 0) {
      int8x8_t v25 = (float64x2_t *)a1;
    }
    else {
      int8x8_t v25 = a2;
    }
    float64_t v26 = v25[1].f64[0]
        - *(double *)((char *)v25->f64 + (v23 & 8)) * v24[1].f64[0] / *(double *)((char *)v24->f64 + (v23 & 8));
    return 2 * (v26 * v26 <= v16);
  }
  else
  {
    if (a3)
    {
      double v17 = *(double *)(a1 + 16);
      double v18 = a2[1].f64[0];
      float64_t v19 = -_Q2.f64[0];
      *(double *)&long long v20 = (_Q0.f64[1] * v18 - _Q2.f64[1] * v17) / _D4;
      *((double *)&v20 + 1) = (v17 * v19 + _Q0.f64[0] * v18) / -_D4;
      *a3 = v20;
    }
    return 1;
  }
}

uint64_t geom_arap_deformer_create_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 3 * a3;
  uint64_t v8 = geom_arap_deformer_3f_obj_alloc();
  geom::arap_deformer<float>::arap_deformer(v8 + 16, a2, a1, a4, v7);
  return v8;
}

uint64_t geom_arap_deformer_is_valid_3f(uint64_t a1)
{
  return geom::arap_deformer<float>::is_valid(a1 + 16);
}

uint64_t geom_arap_deformer_is_initialized_3f(uint64_t a1)
{
  return geom::arap_deformer<float>::is_initialized(a1 + 16);
}

void geom_arap_deformer_reset_3f(uint64_t a1)
{
}

uint64_t **geom_arap_deformer_add_constraints_3f(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4)
{
  return geom::arap_deformer<float>::add_constraints((uint64_t **)(a1 + 16), a3, a2, a4, a2);
}

uint64_t **geom_arap_deformer_add_static_constraints_3f(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return geom::arap_deformer<float>::add_static_constraints(a1 + 16, a3, a2);
}

void geom_arap_deformer_clear_constraints_3f(uint64_t a1)
{
}

BOOL geom_arap_deformer_initialize_3f(uint64_t a1)
{
  return geom::arap_deformer<float>::initialize(a1 + 16);
}

void geom_arap_deformer_deform_3f(uint64_t a1, unsigned int a2, float a3)
{
}

char *geom_arap_deformer_deformed_vertices_3f(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = geom::arap_deformer<float>::deformed_vertices(a1 + 16);
  uint64_t result = (char *)geom::collection_to_vector<float>(a2);
  if (result != (char *)v3)
  {
    float64x2_t v5 = *(char **)v3;
    uint64_t v6 = *(void *)(v3 + 8);
    unint64_t v7 = (v6 - *(void *)v3) >> 4;
    return _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l(result, v5, v6, v7);
  }
  return result;
}

uint64_t geom_arap_deformer_create_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 3 * a3;
  uint64_t v8 = geom_arap_deformer_3d_obj_alloc();
  geom::arap_deformer<double>::arap_deformer(v8 + 16, a2, a1, a4, v7);
  return v8;
}

uint64_t geom_arap_deformer_is_valid_3d(uint64_t a1)
{
  return geom::arap_deformer<float>::is_valid(a1 + 16);
}

uint64_t geom_arap_deformer_is_initialized_3d(uint64_t a1)
{
  return geom::arap_deformer<float>::is_initialized(a1 + 16);
}

void geom_arap_deformer_reset_3d(uint64_t a1)
{
}

uint64_t **geom_arap_deformer_add_constraints_3d(uint64_t a1, uint64_t a2, long long *a3, _DWORD *a4)
{
  return geom::arap_deformer<double>::add_constraints((uint64_t **)(a1 + 16), a3, a2, a4, a2);
}

uint64_t **geom_arap_deformer_add_static_constraints_3d(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  return geom::arap_deformer<double>::add_static_constraints(a1 + 16, a3, a2);
}

void geom_arap_deformer_clear_constraints_3d(uint64_t a1)
{
}

BOOL geom_arap_deformer_initialize_3d(uint64_t a1)
{
  return geom::arap_deformer<double>::initialize(a1 + 16);
}

void geom_arap_deformer_deform_3d(uint64_t a1, unsigned int a2, double a3)
{
}

char *geom_arap_deformer_deformed_vertices_3d(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = geom::arap_deformer<float>::deformed_vertices(a1 + 16);
  uint64_t result = (char *)geom::collection_to_vector<float>(a2);
  if (result != (char *)v3)
  {
    float64x2_t v5 = *(char **)v3;
    uint64_t v6 = *(void *)(v3 + 8);
    unint64_t v7 = (v6 - *(void *)v3) >> 5;
    return _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l(result, v5, v6, v7);
  }
  return result;
}

uint64_t geom::polynomial_roots(geom *this, uint64_t a2, const double *a3, double *a4)
{
  unsigned int v4 = MEMORY[0x270FA5388](this, a2);
  uint64_t v8 = v6;
  float64x2_t v9 = v5;
  unsigned int v10 = v4;
  unsigned __int8 v11 = 0;
  v41[4095] = *MEMORY[0x263EF8340];
  __CLPK_integer v12 = v4 - 1;
  __CLPK_integer __lda = v12;
  uint64_t v13 = (int)(v12 + v12 * v4);
  uint64_t v14 = (int)(v4 - 1);
  if (v4 >= 4 && fabs(v5[v12]) <= 0.000001) {
    unsigned __int8 v11 = geom::polynomial_roots((geom *)(v4 - 1), v5, v6, v7);
  }
  if (v13 <= 0xFFF)
  {
    if (v10 < 3)
    {
      uint64_t v16 = 0;
    }
    else
    {
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      uint64x2_t v17 = (uint64x2_t)vdupq_n_s64((unint64_t)v14 - 1);
      double v18 = (double *)v41;
      int64x2_t v19 = vdupq_n_s64(2uLL);
      do
      {
        uint64_t v20 = 0;
        uint64_t v21 = v15 + 1;
        float v22 = v18;
        int64x2_t v23 = (int64x2_t)xmmword_236F17090;
        do
        {
          int32x2_t v24 = vmovn_s64((int64x2_t)vcgeq_u64(v17, (uint64x2_t)v23));
          if (v24.i8[0])
          {
            if (v21 == v20) {
              double v25 = 1.0;
            }
            else {
              double v25 = 0.0;
            }
            *(v22 - 1) = v25;
          }
          if (v24.i8[4])
          {
            if (v15 == v20) {
              double v26 = 1.0;
            }
            else {
              double v26 = 0.0;
            }
            *float v22 = v26;
          }
          v20 += 2;
          int64x2_t v23 = vaddq_s64(v23, v19);
          v22 += 2;
        }
        while ((v10 & 0xFE) != v20);
        v16 += v14;
        v18 += v10 - 1;
        ++v15;
      }
      while (v21 != v10 - 2);
    }
    if (v10 >= 2)
    {
      double v27 = v9[v14];
      uint64_t v28 = v14;
      float64x2_t v29 = (__CLPK_doublereal *)&v41[v16 - 1];
      do
      {
        double v30 = *v9++;
        *v29++ = -v30 / v27;
        --v28;
      }
      while (v28);
    }
    __CLPK_doublereal v38 = 0.0;
    __lworunsigned __int16 k = -1;
    __CLPK_integer v37 = 0;
    char __jobvr = 78;
    dgeev_(&__jobvr, &__jobvr, &__lda, &__a, &__lda, 0, 0, 0, &__lda, 0, &__lda, &v38, &__lwork, &v37);
    __lworunsigned __int16 k = (int)v38;
    if ((unint64_t)(v13 + (int)v38) < 0x1000)
    {
      uint64_t v31 = __lda;
      double v32 = (__CLPK_doublereal *)&v41[(v31 * v31) - 1];
      dgeev_(&__jobvr, &__jobvr, &__lda, &__a, &__lda, v32, &v32[__lda], 0, &__lda, 0, &__lda, &v32[__lda + __lda], &__lwork, &v37);
      if (!v37)
      {
        uint64_t v33 = __lda;
        if (__lda >= 1)
        {
          do
          {
            if (v32[v31] == 0.0) {
              v8[v11++] = *v32;
            }
            ++v32;
            --v33;
          }
          while (v33);
        }
      }
    }
  }
  std::__sort<std::__less<double,double> &,double *>();
  return v11;
}

uint64_t geom_quadratic_roots_f(float *a1, float *a2)
{
  float v2 = a1[1];
  float v3 = a1[2];
  float v4 = *a1;
  if (fabsf(v3) <= 0.00001)
  {
    if (fabsf(v2) > 0.00001)
    {
      *a2 = (float)-v4 / v2;
      return 1;
    }
    return 0;
  }
  float v5 = (float)((float)(v3 * -4.0) * v4) + (float)(v2 * v2);
  if (v5 < 0.0) {
    return 0;
  }
  float v6 = 1.0;
  if (v2 < 0.0) {
    float v6 = -1.0;
  }
  float v7 = (float)(v2 + (float)(v6 * sqrtf(v5))) * -0.5;
  float v8 = v4 / v7;
  *a2 = v7 / v3;
  a2[1] = v8;
  if (v8 < (float)(v7 / v3))
  {
    *a2 = v8;
    a2[1] = v7 / v3;
  }
  if (v5 <= 0.0) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t geom_quadratic_roots_d(double *a1, double *a2)
{
  double v2 = a1[1];
  double v3 = a1[2];
  double v4 = *a1;
  if (fabs(v3) <= 0.000001)
  {
    if (fabs(v2) > 0.000001)
    {
      *a2 = -v4 / v2;
      return 1;
    }
    return 0;
  }
  double v5 = v3 * -4.0 * v4 + v2 * v2;
  if (v5 < 0.0) {
    return 0;
  }
  double v6 = 1.0;
  if (v2 < 0.0) {
    double v6 = -1.0;
  }
  double v7 = (v2 + v6 * sqrt(v5)) * -0.5;
  double v8 = v4 / v7;
  *a2 = v7 / v3;
  a2[1] = v8;
  if (v8 < v7 / v3)
  {
    *a2 = v8;
    a2[1] = v7 / v3;
  }
  if (v5 <= 0.0) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t geom::cubic_roots<float>(float *a1, float *a2)
{
  float v3 = a1[2];
  float v4 = a1[3];
  if (fabsf(v4) > 0.00001)
  {
    float v5 = v3 / v4;
    float v6 = a1[1] / v4;
    float v7 = (float)((float)(v5 * v5) + (float)(v6 * -3.0)) / 9.0;
    float v8 = v7 * (float)(v7 * v7);
    float v9 = (float)((float)((float)((float)(v5 * -9.0) * v6) + (float)((float)(v5 * (float)(v5 * v5)) * 2.0))
               + (float)((float)(*a1 / v4) * 27.0))
       / 54.0;
    if ((float)(v9 * v9) < v8)
    {
      float v10 = acosf(v9 / sqrtf(v8));
      float v11 = sqrtf(v7) * -2.0;
      float v12 = v5 / -3.0;
      *a2 = v12 + (float)(v11 * cosf(v10 / 3.0));
      double v13 = v12;
      double v14 = v10;
      float v15 = v13 + v11 * cos((v14 + 6.28318531) / 3.0);
      a2[1] = v15;
      float v16 = v13 + v11 * cos((v14 + -6.28318531) / 3.0);
      a2[2] = v16;
      std::__sort<std::__less<float,float> &,float *>();
      return 3;
    }
    float v25 = powf(fabsf(v9) + sqrtf(-(float)(v8 - (float)(v9 * v9))), 0.33333);
    float v26 = -v25;
    if (v9 < 0.0) {
      float v26 = v25;
    }
    BOOL v27 = fabsf(v25) > 0.00001;
    float v28 = 0.0;
    if (v27) {
      float v28 = v7 / v26;
    }
    float v29 = (float)(v26 + v28) + (float)(v5 / -3.0);
    goto LABEL_21;
  }
  float v18 = *a1;
  float v19 = a1[1];
  if (fabsf(v3) <= 0.00001)
  {
    if (fabsf(v19) > 0.00001)
    {
      float v29 = (float)-v18 / v19;
LABEL_21:
      *a2 = v29;
      return 1;
    }
    return 0;
  }
  float v20 = (float)((float)(v3 * -4.0) * v18) + (float)(v19 * v19);
  if (v20 < 0.0) {
    return 0;
  }
  float v21 = 1.0;
  if (v19 < 0.0) {
    float v21 = -1.0;
  }
  float v22 = (float)(v19 + (float)(v21 * sqrtf(v20))) * -0.5;
  float v23 = v22 / v3;
  float v24 = v18 / v22;
  *a2 = v23;
  a2[1] = v24;
  if (v24 < v23)
  {
    *a2 = v24;
    a2[1] = v23;
  }
  if (v20 <= 0.0) {
    return 1;
  }
  else {
    return 2;
  }
}

uint64_t geom::cubic_roots<double>(double *a1, long double *a2)
{
  double v3 = a1[2];
  double v4 = a1[3];
  if (fabs(v4) > 0.000001)
  {
    double v5 = v3 / v4;
    double v6 = a1[1] / v4;
    double v7 = (v5 * v5 + v6 * -3.0) / 9.0;
    double v8 = v7 * (v7 * v7);
    double v9 = (v5 * -9.0 * v6 + v5 * (v5 * v5) * 2.0 + *a1 / v4 * 27.0) / 54.0;
    if (v9 * v9 < v8)
    {
      double v10 = acos(v9 / sqrt(v8));
      double v11 = sqrt(v7) * -2.0;
      double v12 = v5 / -3.0;
      *a2 = v12 + v11 * cos(v10 / 3.0);
      a2[1] = v12 + v11 * cos((v10 + 6.28318531) / 3.0);
      a2[2] = v12 + v11 * cos((v10 + -6.28318531) / 3.0);
      std::__sort<std::__less<double,double> &,double *>();
      return 3;
    }
    double v21 = pow(fabs(v9) + sqrt(-(v8 - v9 * v9)), 0.333333333);
    double v22 = -v21;
    if (v9 < 0.0) {
      double v22 = v21;
    }
    BOOL v23 = fabs(v21) > 0.000001;
    double v24 = 0.0;
    if (v23) {
      double v24 = v7 / v22;
    }
    double v25 = v22 + v24 + v5 / -3.0;
    goto LABEL_21;
  }
  double v14 = *a1;
  double v15 = a1[1];
  if (fabs(v3) <= 0.000001)
  {
    if (fabs(v15) > 0.000001)
    {
      double v25 = -v14 / v15;
LABEL_21:
      *a2 = v25;
      return 1;
    }
    return 0;
  }
  double v16 = v3 * -4.0 * v14 + v15 * v15;
  if (v16 < 0.0) {
    return 0;
  }
  double v17 = 1.0;
  if (v15 < 0.0) {
    double v17 = -1.0;
  }
  double v18 = (v15 + v17 * sqrt(v16)) * -0.5;
  double v19 = v18 / v3;
  double v20 = v14 / v18;
  *a2 = v19;
  a2[1] = v20;
  if (v20 < v19)
  {
    *a2 = v20;
    a2[1] = v19;
  }
  if (v16 <= 0.0) {
    return 1;
  }
  else {
    return 2;
  }
}

float geom_polynomial_roots_f(uint64_t a1, uint64_t a2)
{
  double v2 = (geom *)MEMORY[0x270FA5388](a1, a2);
  double v6 = v5;
  uint64_t v7 = 0;
  v14[256] = *MEMORY[0x263EF8340];
  do
  {
    *(double *)&v14[v7] = *(float *)(v3 + 4 * v7);
    ++v7;
  }
  while (v2 + 1 != v7);
  unsigned int v8 = geom::polynomial_roots(v2, (uint64_t)v14, v13, v4);
  if (v8)
  {
    uint64_t v10 = v8;
    double v11 = v13;
    do
    {
      double v12 = *v11++;
      float result = v12;
      *v6++ = result;
      --v10;
    }
    while (v10);
  }
  return result;
}

uint64_t _ZN4geom23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISB_Lh2EvE5valueENS1_9allocatorISG_EEEERNSD_IjNSH_IjEEEE(uint64_t result, unsigned int a2, int32x2_t **a3, char **a4, float32x2_t a5, float32x2_t a6)
{
  a3[1] = *a3;
  a4[1] = *a4;
  float32x2_t v7 = vsub_f32(a6, a5);
  float32x2_t v8 = vmul_f32(v7, v7);
  if (sqrtf(vaddv_f32(v8)) > 0.00000011921)
  {
    uint64_t v11 = result;
    v8.f32[0] = fminf(v7.f32[0], v7.f32[1]) / (float)a2;
    double v178 = *(double *)&v8;
    float32x2_t v12 = (float32x2_t)vdup_lane_s32((int32x2_t)v8, 0);
    int32x2_t v173 = vcvt_s32_f32(vrndp_f32(vdiv_f32(v7, v12)));
    uint64_t v216 = 0;
    long long v215 = 0u;
    long long v214 = 0u;
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v214, 1uLL);
    memset(v213, 0, 40);
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(v213, 1uLL);
    unsigned __int8 v13 = vcgt_u32((uint32x2_t)v173, (uint32x2_t)vand_s8((int8x8_t)vdup_lane_s32(v173, 1), (int8x8_t)0xFFFF0000FFFFLL)).u8[0];
    int32x2_t v208 = v173;
    uint64_t v14 = *(unsigned int *)((unint64_t)&v208 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v13 & 1)));
    uint64_t v15 = v13 & 1;
    int64x2_t v210 = 0;
    int8x16_t v211 = 0;
    uint64_t v212 = 0;
    std::vector<float>::__vallocate[abi:nn180100](&v210, v14 + 1);
    double v16 = v211;
    bzero(v211, 4 * (v14 + 1));
    int v17 = 0;
    int8x16_t v211 = &v16[4 * v14 + 4];
    do
    {
      int8x8_t v207 = 0;
      *(_DWORD *)((unint64_t)&v207 | (4 * v15)) = v17;
      _ZNKSt3__18functionIFfDv2_fEEclES1_(v11, COERCE_DOUBLE(vmla_f32(a5, v12, vcvt_f32_u32((uint32x2_t)vand_s8(v207, (int8x8_t)0xFFFF0000FFFFLL)))));
      v210[(unsigned __int16)v17++] = v22;
    }
    while ((unsigned __int16)v17 <= (unsigned __int16)v14);
    int64x2_t v170 = a3;
    int8x16_t v171 = a4;
    uint64_t v23 = v15 ^ 1;
    int32x2_t v206 = v173;
    int v169 = *(_DWORD *)((unint64_t)&v206 | (4 * v23));
    if (v169)
    {
      __int32 v24 = 0;
      float32x2_t v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v178, 0);
      float64x2_t v168 = (_DWORD *)((unint64_t)&v204 | (4 * v23));
      uint64_t v176 = v11;
      do
      {
        int8x8_t v204 = 0;
        __int32 v172 = v24 + 1;
        *float64x2_t v168 = v24 + 1;
        int8x8_t v205 = v204;
        *(_DWORD *)((unint64_t)&v205 | (4 * v15)) = 0;
        _ZNKSt3__18functionIFfDv2_fEEclES1_(v11, COERCE_DOUBLE(vmla_f32(a5, v12, vcvt_f32_u32((uint32x2_t)vand_s8(v205, (int8x8_t)0xFFFF0000FFFFLL)))));
        __int32 v27 = v26.i32[0];
        if ((_WORD)v14)
        {
          uint64_t v28 = 0;
          v26.i32[0] = v24;
          unsigned __int32 v174 = vmovl_u16(v26).u32[0];
          __int32 v175 = v24;
          do
          {
            if (v15)
            {
              unint64_t v184 = __PAIR64__(v28, v174);
              unint64_t v202 = __PAIR64__(v28, v174);
              uint64_t v29 = *(unsigned __int16 *)((unint64_t)&v202 | (4 * v15));
              unsigned int v181 = v210[v29];
              _ZNKSt3__18functionIFfDv2_fEEclES1_(v176, COERCE_DOUBLE(vadd_f32(v25, vmla_f32(a5, v12, vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)__PAIR64__(v28, v174), (int8x8_t)0xFFFF0000FFFFLL))))));
              uint64_t v31 = v210;
              LODWORD(v20) = v210[v28 + 1];
              __int32 v32 = v27;
            }
            else
            {
              unint64_t v184 = __PAIR64__(v24, v28);
              unint64_t v203 = __PAIR64__(v24, v28);
              uint64_t v29 = *(unsigned __int16 *)((unint64_t)&v203 | (4 * v15));
              unsigned int v181 = v210[v29];
              __int32 v179 = v210[v28 + 1];
              _ZNKSt3__18functionIFfDv2_fEEclES1_(v176, COERCE_DOUBLE(vadd_f32(v25, vmla_f32(a5, v12, vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)__PAIR64__(v24, v28), (int8x8_t)0xFFFF0000FFFFLL))))));
              __int32 v32 = v179;
              uint64_t v31 = v210;
              LODWORD(v20) = v27;
            }
            v31[v29] = v27;
            float32x2_t v21 = (float32x2_t)__PAIR64__(v32, v181);
            v33.i64[0] = __PAIR64__(v32, v181);
            v33.i64[1] = __PAIR64__(LODWORD(v20), v30);
            float32x4_t v180 = v33;
            __int32 v177 = v30;
            float32x2_t v19 = (float32x2_t)__PAIR64__(LODWORD(v20), v30);
            int8x16_t v34 = (int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vcgtzq_f32(v33)), (int8x8_t)0x8000400020001));
            int8x8_t v18 = (int8x8_t)vextq_s8(v34, v34, 8uLL).u64[0];
            *(int8x8_t *)v34.i8 = vorr_s8(*(int8x8_t *)v34.i8, v18);
            __int8 v201 = v34.i8[4];
            __int8 v200 = v34.i8[0];
                                   + (((unint64_t)((float)(vaddv_f32(vadd_f32(v21, v19)) * 0.25) > 0.0) << 6) | (4 * (v34.i8[0] | v34.i8[4]))));
            unint64_t v35 = vmovl_u8(*(uint8x8_t *)v34.i8).u64[0];
            unint64_t v182 = v35;
            if (~(unsigned __int16)v35)
            {
              char v36 = BYTE2(v35);
              LOBYTE(v209) = v35;
              char v220 = BYTE2(v35);
              WORD1(v217) = WORD2(v184);
              LOWORD(v217) = v184;
              BYTE4(v217) = v35;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v214, (unsigned __int16 *)&v217, &v220, (uint64_t)&v221, *(double *)&v184, *(double *)&v18, *(double *)&v19, v20, (int8x8_t)v21);
              WORD1(v224[0]) = WORD2(v184);
              LOWORD(v224[0]) = v184;
              BYTE4(v224[0]) = v36;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v214, (unsigned __int16 *)v224, (char *)&v209, (uint64_t)&v217, v37, v38, v39, v40, v41);
              unint64_t v35 = v182;
            }
            if (~WORD2(v35))
            {
              char v42 = BYTE6(v35);
              LOBYTE(v209) = BYTE4(v35);
              char v220 = BYTE6(v35);
              WORD1(v217) = WORD2(v184);
              LOWORD(v217) = v184;
              BYTE4(v217) = BYTE4(v35);
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v214, (unsigned __int16 *)&v217, &v220, (uint64_t)&v221, *(double *)&v184, *(double *)&v18, *(double *)&v19, v20, (int8x8_t)v21);
              WORD1(v224[0]) = WORD2(v184);
              LOWORD(v224[0]) = v184;
              BYTE4(v224[0]) = v42;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v214, (unsigned __int16 *)v224, (char *)&v209, (uint64_t)&v217, v43, v44, v45, v46, v47);
              unint64_t v35 = v182;
            }
            unsigned __int8 v48 = 0;
            do
            {
              unint64_t v199 = v35;
              __int16 v49 = *(_WORD *)((unint64_t)&v199 & 0xFFFFFFFFFFFFFFF9 | (2 * (v48 & 3)));
              if ((_BYTE)v49 == 0xFF) {
                break;
              }
              int8x8_t v50 = (int8x8_t)v184;
              if ((v49 - 1) <= 1u)
              {
                double v51 = (_DWORD *)((unint64_t)&v198 | (4 * ((v49 & 0xFD) == 0)));
                unint64_t v198 = v184;
                ++*v51;
                int8x8_t v50 = (int8x8_t)v198;
              }
              HIWORD(v197) = v50.i16[2];
              LOWORD(v197) = v50.i16[0];
              uint32x2_t v52 = (uint32x2_t)vand_s8(v50, (int8x8_t)0xFFFF0000FFFFLL);
              HIDWORD(v53) = v180.i32[1];
              float32x4_t v195 = v180;
              LODWORD(v53) = *(_DWORD *)((unint64_t)&v195 | (4 * (((_BYTE)v49 + 1) & 3)));
              if ((v49 & 0xFE) == 2) {
                LODWORD(v20) = *(_DWORD *)((unint64_t)&v195 | (4 * (((_BYTE)v49 + 1) & 3)));
              }
              else {
                LODWORD(v20) = *(_DWORD *)((unint64_t)&v195 & 0xFFFFFFFFFFFFFFF3 | (4 * (v49 & 3)));
              }
              if ((v49 & 0xFE) == 2) {
                LODWORD(v53) = *(_DWORD *)((unint64_t)&v195 & 0xFFFFFFFFFFFFFFF3 | (4 * (v49 & 3)));
              }
              *(float *)&double v53 = *(float *)&v20 / (float)(*(float *)&v20 - *(float *)&v53);
              uint64_t v54 = (v49 & 0xFD) != 0;
              int8x16_t v217 = (__int16 *)(v197 | (unint64_t)(v54 << 32));
              *(float32x2_t *)&double v196 = vmla_f32(a5, v12, vcvt_f32_u32(v52));
              *(float *)((unint64_t)&v196 | (4 * v54)) = *(float *)((unint64_t)&v196 | (4 * v54))
                                                              + (float)(*(float *)&v53 * *(float *)&v178);
              v224[0] = v196;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKS4_(v213, (unsigned __int16 *)&v217, v224, (uint64_t)&v221, v196, v53, v178, v20, (int8x8_t)v21);
              unsigned int v55 = v48++;
              unint64_t v35 = v182;
            }
            while (v55 < 3);
            ++v28;
            v26.i32[0] = v177;
            __int32 v27 = v177;
            __int32 v24 = v175;
          }
          while (v28 != v14);
        }
        uint64_t v11 = v176;
        v210[v14] = v26.i32[0];
        __int32 v24 = v172;
      }
      while ((unsigned __int16)v172 < (unsigned __int16)v169);
    }
    int8x16_t v217 = 0;
    int8x8_t v218 = 0;
    int8x16_t v219 = 0;
    float64x2_t v221 = &v214;
    if ((unint64_t)v215 >= 0x10)
    {
      uint64_t v56 = 0;
      unint64_t v57 = (unint64_t)v215 >> 4;
      v58.i32[1] = -2143281136;
      int8x8_t v18 = (int8x8_t)0x3830282018100800;
      while (1)
      {
        float32x2_t v19 = (float32x2_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v214 + v56)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
        if (v19.i16[0] != -1) {
          break;
        }
        v56 += 16;
        if (!--v57) {
          goto LABEL_58;
        }
      }
      uint64_t v59 = __clz(__rbit64((unsigned __int16)~v19.i16[0])) + v56;
      unint64_t v222 = (unsigned __int16)~v19.i16[0];
      uint64_t v223 = v59;
      if (v59 != -1)
      {
        int32x2_t v60 = 0;
        do
        {
          float64x2_t v61 = (uint64_t *)(*((void *)v221 + 1) + 12 * v59);
          uint64_t v62 = *v61;
          v58.i32[0] = *v61;
          BOOL v63 = (HIDWORD(*v61) & 0xFD) != 1;
          unsigned int v64 = BYTE4(*v61) - 3;
          unint64_t v194 = vmovl_u16(v58).u64[0];
          int v65 = *(_DWORD *)((unint64_t)&v194 | (4 * v63));
          BOOL v66 = v64 <= 0xFFFFFFFD && (unsigned __int16)*(_DWORD *)((unint64_t)&v194 | (4 * v63)) == 0;
          if (v66
            || v64 >= 0xFFFFFFFE
            && (int32x2_t v193 = v173, *(_DWORD *)((unint64_t)&v193 | (4 * v63)) - 1 <= (unsigned __int16)v65))
          {
            if (v60 >= v219)
            {
              uint64_t v67 = (v60 - (char *)v217) >> 3;
              if ((unint64_t)(v67 + 1) >> 61) {
                goto LABEL_168;
              }
              unint64_t v68 = (v219 - (char *)v217) >> 2;
              if (v68 <= v67 + 1) {
                unint64_t v68 = v67 + 1;
              }
              if ((unint64_t)(v219 - (char *)v217) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v69 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v69 = v68;
              }
              if (v69)
              {
                uint64_t v70 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v219, v69);
                uint64_t v62 = *v61;
              }
              else
              {
                uint64_t v70 = 0;
              }
              uint64_t v71 = &v70[8 * v67];
              *(void *)uint64_t v71 = v62;
              int32x2_t v60 = v71 + 8;
              unint64_t v73 = v217;
              uint64_t v72 = v218;
              if (v218 != v217)
              {
                do
                {
                  uint64_t v74 = *((void *)v72 - 1);
                  v72 -= 4;
                  *((void *)v71 - 1) = v74;
                  v71 -= 8;
                }
                while (v72 != v73);
                uint64_t v72 = v217;
              }
              int8x16_t v217 = (__int16 *)v71;
              int8x8_t v218 = (__int16 *)v60;
              int8x16_t v219 = &v70[8 * v69];
              if (v72) {
                operator delete(v72);
              }
            }
            else
            {
              *(void *)int32x2_t v60 = v62;
              v60 += 8;
            }
            int8x8_t v218 = (__int16 *)v60;
          }
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v221);
          uint64_t v59 = v223;
        }
        while (v223 != -1);
      }
    }
LABEL_58:
    if (*((void *)&v215 + 1))
    {
      uint64_t v183 = (uint64_t)(a3 + 2);
      int8x8_t v75 = (int8x8_t)0x8040201008040201;
      int32x2_t v76 = vdup_n_s32(0x7F800000u);
      while (1)
      {
        uint64_t v77 = v214;
        if ((unint64_t)v215 >= 0x10)
        {
          uint64_t v79 = 0;
          unint64_t v78 = (unint64_t)v215 >> 4;
          unint64_t v80 = (unint64_t)v215 >> 4;
          while (1)
          {
            int8x8_t v18 = (int8x8_t)0x8040201008040201;
            int8x8_t v75 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v214 + v79)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
            unint64_t v81 = (unsigned __int16)~v75.i16[0];
            if (v75.i16[0] != -1) {
              break;
            }
            v79 += 16;
            if (!--v80) {
              goto LABEL_65;
            }
          }
          uint64_t v82 = __clz(__rbit64(v81)) + v79;
        }
        else
        {
          unint64_t v78 = 0;
LABEL_65:
          unint64_t v81 = 0;
          uint64_t v82 = -1;
        }
        uint64_t v84 = v217;
        unsigned int v83 = v218;
        do
        {
          if (v83 == v84)
          {
            if (v82 != -1) {
              goto LABEL_76;
            }
            float64x2_t v88 = v170;
            unsigned int v87 = v171;
            int v89 = v170[1];
            goto LABEL_145;
          }
          v83 -= 4;
          unint64_t v85 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v214, v83, *(double *)&v75, *(double *)&v18, *(double *)&v19, v20, (int8x8_t)v21);
          if (v85 >> 4 >= v78)
          {
            unint64_t v86 = 0;
          }
          else
          {
            int8x8_t v18 = (int8x8_t)0x8040201008040201;
            int8x8_t v75 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v77 + 16 * (v85 >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
            unint64_t v86 = (unsigned __int16)~v75.i16[0];
          }
          int8x8_t v218 = v83;
        }
        while (v85 == -1);
        uint64_t v82 = v85;
        unint64_t v81 = v86;
LABEL_76:
        float64x2_t v88 = v170;
        unsigned int v87 = v171;
        while (1)
        {
          uint64_t v90 = (unsigned __int16 *)(*((void *)&v214 + 1) + 12 * v82);
          unsigned int v91 = *v90;
          unsigned int v92 = v90[1];
          int v93 = *((unsigned __int8 *)v90 + 4);
          HIDWORD(v224[0]) = 0;
          WORD1(v224[0]) = v92;
          LOWORD(v224[0]) = v91;
          BYTE4(v224[0]) = *((unsigned char *)v90 + 8);
          float64x2_t v221 = &v214;
          unint64_t v222 = v81;
          uint64_t v223 = v82;
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v221);
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE15remove_internalEm((uint64_t)&v214, v82);
          uint64_t v99 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v214, (__int16 *)v224, v94, v95, v96, v97, v98);
          if (v99 != -1) {
            _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE15remove_internalEm((uint64_t)&v214, v99);
          }
          double v104 = COERCE_DOUBLE(__PAIR64__(v92, v91));
          unsigned int v105 = v93 & 0xFFFFFFFD;
          if ((v93 - 1) <= 1)
          {
            *(double *)&unint64_t v192 = COERCE_DOUBLE(__PAIR64__(v92, v91));
            ++*(_DWORD *)((unint64_t)&v192 | (4 * (v105 == 0)));
            double v104 = *(double *)&v192;
          }
          HIWORD(v191) = WORD2(v104);
          LOWORD(v191) = LOWORD(v104);
          float64x2_t v221 = (long long *)(v191 | ((unint64_t)(v105 != 0) << 32));
          uint64_t S4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v213, (__int16 *)&v221, v104, v100, v101, v102, v103);
          int32x2_t v112 = *(int32x2_t *)(v213[1]
                              + 16 * S4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP
                              + 8);
          unint64_t v114 = v170[1];
          unint64_t v113 = (unint64_t)v170[2];
          if ((unint64_t)v114 >= v113)
          {
            uint64_t v115 = v114 - *v170;
            if ((unint64_t)(v115 + 1) >> 61) {
              goto LABEL_168;
            }
            uint64_t v116 = v113 - (void)*v170;
            uint64_t v117 = v116 >> 2;
            if (v116 >> 2 <= (unint64_t)(v115 + 1)) {
              uint64_t v117 = v115 + 1;
            }
            if ((unint64_t)v116 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v118 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v118 = v117;
            }
            if (v118) {
              float64x2_t v119 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v183, v118);
            }
            else {
              float64x2_t v119 = 0;
            }
            float64x2_t v120 = &v119[8 * v115];
            *(int32x2_t *)float64x2_t v120 = v112;
            int v89 = (int32x2_t *)(v120 + 8);
            float64x2_t v122 = *v170;
            float64x2_t v121 = (char *)v170[1];
            if (v121 != (char *)*v170)
            {
              do
              {
                uint64_t v123 = *((void *)v121 - 1);
                v121 -= 8;
                v107.i32[1] = HIDWORD(v123);
                *((void *)v120 - 1) = v123;
                v120 -= 8;
              }
              while (v121 != (char *)v122);
              float64x2_t v121 = (char *)*v170;
            }
            *int64x2_t v170 = (int32x2_t *)v120;
            v170[1] = v89;
            v170[2] = (int32x2_t *)&v119[8 * v118];
            if (v121) {
              operator delete(v121);
            }
          }
          else
          {
            *unint64_t v114 = v112;
            int v89 = v114 + 1;
          }
          v170[1] = v89;
          double v124 = v224[0];
          v107.i32[0] = LODWORD(v224[0]);
          *(void *)&double v125 = vmovl_u16(v107).u64[0];
          BOOL v126 = (BYTE4(v224[0]) & 0xFD) != 1;
          double v190 = v125;
          int v127 = *(_DWORD *)((unint64_t)&v190 | (4 * v126));
          if (BYTE4(v224[0]) - 3 <= 0xFFFFFFFD
            && (unsigned __int16)*(_DWORD *)((unint64_t)&v190 | (4 * v126)) == 0)
          {
            break;
          }
          if (BYTE4(v224[0]) - 3 >= 0xFFFFFFFE)
          {
            double v108 = *(double *)&v173;
            int32x2_t v189 = v173;
            if (*(_DWORD *)((unint64_t)&v189 | (4 * v126)) - 1 <= (unsigned __int16)v127) {
              break;
            }
            int v129 = 1;
          }
          else
          {
            int v129 = 0xFFFF;
          }
          double v187 = v125;
          *(_DWORD *)((unint64_t)&v187 | (4 * v126)) = v129 + v127;
          HIWORD(v188) = WORD2(v187);
          LOWORD(v188) = LOWORD(v187);
          float64x2_t v221 = (long long *)((*(void *)&v124 + 0x200000000) & 0x300000000 | v188);
          unint64_t v130 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v214, (__int16 *)&v221, v187, v108, v109, v110, v111);
          uint64_t v82 = v130;
          if (v130 >> 4 >= (unint64_t)v215 >> 4)
          {
            unint64_t v81 = 0;
          }
          else
          {
            int8x8_t v18 = (int8x8_t)0x8040201008040201;
            int8x8_t v75 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v214 + 16 * (v130 >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
            unint64_t v81 = (unsigned __int16)~v75.i16[0];
          }
          if (v130 == -1) {
            goto LABEL_145;
          }
        }
        float64x2_t v221 = (long long *)(LODWORD(v224[0]) | 0xFF00000000);
        int v131 = BYTE4(v224[0]) & 0xFD;
        if (BYTE4(v224[0]) - 1 < 2)
        {
          double v186 = v125;
          ++*(_DWORD *)((unint64_t)&v186 | (4 * (v131 == 0)));
          double v125 = v186;
        }
        HIWORD(v185) = WORD2(v125);
        LOWORD(v185) = LOWORD(v125);
        unint64_t v209 = v185 | ((unint64_t)(v131 != 0) << 32);
        uint64_t v132 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v213, (__int16 *)&v209, v125, v108, v109, v110, v111);
        int32x2_t v133 = *(int32x2_t *)(v213[1] + 16 * v132 + 8);
        int8x8_t v135 = v170[1];
        unint64_t v134 = (unint64_t)v170[2];
        if ((unint64_t)v135 < v134)
        {
          *int8x8_t v135 = v133;
          float64x2_t v136 = v135 + 1;
          goto LABEL_128;
        }
        uint64_t v137 = v135 - *v170;
        if ((unint64_t)(v137 + 1) >> 61) {
          break;
        }
        uint64_t v138 = v134 - (void)*v170;
        uint64_t v139 = v138 >> 2;
        if (v138 >> 2 <= (unint64_t)(v137 + 1)) {
          uint64_t v139 = v137 + 1;
        }
        if ((unint64_t)v138 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v140 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v140 = v139;
        }
        if (v140) {
          int8x16_t v141 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v183, v140);
        }
        else {
          int8x16_t v141 = 0;
        }
        int8x16_t v142 = (int32x2_t *)&v141[8 * v137];
        *int8x16_t v142 = v133;
        float64x2_t v136 = v142 + 1;
        float64x2_t v144 = *v170;
        float64x2_t v143 = (char *)v170[1];
        if (v143 != (char *)*v170)
        {
          do
          {
            int8x8_t v145 = *(int8x8_t *)(v143 - 8);
            v143 -= 8;
            int8x8_t v75 = v145;
            v142[-1] = (int32x2_t)v145;
            --v142;
          }
          while (v143 != (char *)v144);
          float64x2_t v143 = (char *)*v170;
        }
        *int64x2_t v170 = v142;
        v170[1] = v136;
        v170[2] = (int32x2_t *)&v141[8 * v140];
        if (v143) {
          operator delete(v143);
        }
LABEL_128:
        v170[1] = v136;
        unint64_t v146 = (unint64_t)v170[2];
        if ((unint64_t)v136 < v146)
        {
          *float64x2_t v136 = v76;
          int v89 = v136 + 1;
          goto LABEL_144;
        }
        uint64_t v147 = v136 - *v170;
        if ((unint64_t)(v147 + 1) >> 61) {
          break;
        }
        uint64_t v148 = v146 - (void)*v170;
        uint64_t v149 = v148 >> 2;
        if (v148 >> 2 <= (unint64_t)(v147 + 1)) {
          uint64_t v149 = v147 + 1;
        }
        if ((unint64_t)v148 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v150 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v150 = v149;
        }
        if (v150) {
          int64x2_t v151 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v183, v150);
        }
        else {
          int64x2_t v151 = 0;
        }
        int8x16_t v152 = (int32x2_t *)&v151[8 * v147];
        *int8x16_t v152 = v76;
        int v89 = v152 + 1;
        int8x16_t v154 = *v170;
        int8x16_t v153 = (char *)v170[1];
        if (v153 != (char *)*v170)
        {
          do
          {
            int8x8_t v155 = *(int8x8_t *)(v153 - 8);
            v153 -= 8;
            int8x8_t v75 = v155;
            v152[-1] = (int32x2_t)v155;
            --v152;
          }
          while (v153 != (char *)v154);
          int8x16_t v153 = (char *)*v170;
        }
        *int64x2_t v170 = v152;
        v170[1] = v89;
        v170[2] = (int32x2_t *)&v151[8 * v150];
        if (v153) {
          operator delete(v153);
        }
LABEL_144:
        v170[1] = v89;
LABEL_145:
        unint64_t v156 = (unint64_t)((char *)v89 - (char *)*v88) >> 3;
        int64x2_t v158 = v87[1];
        unint64_t v157 = (unint64_t)v87[2];
        if ((unint64_t)v158 >= v157)
        {
          unint64_t v160 = *v87;
          uint64_t v161 = (v158 - *v87) >> 2;
          unint64_t v162 = v161 + 1;
          if ((unint64_t)(v161 + 1) >> 62) {
            break;
          }
          uint64_t v163 = v157 - (void)v160;
          if (v163 >> 1 > v162) {
            unint64_t v162 = v163 >> 1;
          }
          if ((unint64_t)v163 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v164 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v164 = v162;
          }
          if (v164)
          {
            float64x2_t v165 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v171 + 2), v164);
            unint64_t v160 = *v87;
            int64x2_t v158 = v87[1];
          }
          else
          {
            float64x2_t v165 = 0;
          }
          float64x2_t v166 = &v165[4 * v161];
          *(_DWORD *)float64x2_t v166 = v156;
          int8x16_t v159 = v166 + 4;
          while (v158 != v160)
          {
            int v167 = *((_DWORD *)v158 - 1);
            v158 -= 4;
            *((_DWORD *)v166 - 1) = v167;
            v166 -= 4;
          }
          *unsigned int v87 = v166;
          v87[1] = v159;
          v87[2] = &v165[4 * v164];
          if (v160) {
            operator delete(v160);
          }
        }
        else
        {
          *(_DWORD *)int64x2_t v158 = v156;
          int8x16_t v159 = v158 + 4;
        }
        v87[1] = v159;
        if (!*((void *)&v215 + 1)) {
          goto LABEL_162;
        }
      }
LABEL_168:
      abort();
    }
LABEL_162:
    if (v217)
    {
      int8x8_t v218 = v217;
      operator delete(v217);
    }
    if (v210)
    {
      int8x16_t v211 = (char *)v210;
      operator delete(v210);
    }
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)v213);
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v214);
  }
  return result;
}

uint64_t _ZN4geom23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISB_Lh2EvE5valueENS1_9allocatorISG_EEEERNSD_IjNSH_IjEEEE(uint64_t result, unsigned int a2, void *a3, char **a4, float64x2_t a5, float64x2_t a6)
{
  a3[1] = *a3;
  a4[1] = *a4;
  float64x2_t v6 = vsubq_f64(a6, a5);
  if (sqrt(vaddvq_f64(vmulq_f64(v6, v6))) > 2.22044605e-16)
  {
    uint64_t v8 = result;
    double v188 = vpminq_f64(v6) / (double)a2;
    float64x2_t v190 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v188, 0);
    int32x2_t v181 = vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vdivq_f64(v6, v190))));
    uint64_t v233 = 0;
    long long v231 = 0u;
    long long v232 = 0u;
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v231, 1uLL);
    memset(v230, 0, 40);
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(v230, 1uLL);
    unsigned __int8 v9 = vcgt_u32((uint32x2_t)v181, (uint32x2_t)vand_s8((int8x8_t)vdup_lane_s32(v181, 1), (int8x8_t)0xFFFF0000FFFFLL)).u8[0];
    int32x2_t v225 = v181;
    uint64_t v10 = *(unsigned int *)((unint64_t)&v225 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v9 & 1)));
    uint64_t v11 = v9 & 1;
    float64x2_t v227 = 0;
    int8x8_t v228 = 0;
    uint64_t v229 = 0;
    std::vector<double>::__vallocate[abi:nn180100](&v227, v10 + 1);
    float32x2_t v12 = v228;
    bzero(v228, 8 * (v10 + 1));
    int v13 = 0;
    int8x8_t v228 = &v12[8 * v10 + 8];
    uint64_t v186 = v11;
    uint64_t v14 = (_DWORD *)((unint64_t)&v224 | (4 * v11));
    do
    {
      int8x8_t v224 = 0;
      *uint64_t v14 = v13;
      int8x8_t v15 = vand_s8(v224, (int8x8_t)0xFFFF0000FFFFLL);
      v16.i64[0] = v15.u32[0];
      v16.i64[1] = v15.u32[1];
      _ZNKSt3__18functionIFdDv2_dEEclES1_(v8, (__n128)vmlaq_f64(a5, v190, vcvtq_f64_u64(v16)));
      v227[(unsigned __int16)v13++] = v21;
    }
    while ((unsigned __int16)v13 <= (unsigned __int16)v10);
    unint64_t v184 = a3;
    uint64_t v22 = v186;
    uint64_t v23 = v186 ^ 1;
    int32x2_t v223 = v181;
    int v178 = *(_DWORD *)((unint64_t)&v223 | (4 * v23));
    if (v178)
    {
      __int32 v24 = 0;
      float64x2_t v185 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v188, 0);
      __int32 v177 = (_DWORD *)((unint64_t)&v221 | (4 * v23));
      do
      {
        int8x8_t v221 = 0;
        __int32 v180 = v24 + 1;
        _DWORD *v177 = v24 + 1;
        int8x8_t v222 = v221;
        *(_DWORD *)((unint64_t)&v222 | (4 * v186)) = 0;
        int8x8_t v25 = vand_s8(v222, (int8x8_t)0xFFFF0000FFFFLL);
        v26.i64[0] = v25.u32[0];
        v26.i64[1] = v25.u32[1];
        _ZNKSt3__18functionIFdDv2_dEEclES1_(v8, (__n128)vmlaq_f64(a5, v190, vcvtq_f64_u64(v26)));
        int8x8_t v28 = (int8x8_t)v27;
        if ((_WORD)v10)
        {
          uint64_t v29 = 0;
          __int32 v183 = v24;
          v27.i32[0] = v24;
          unsigned __int32 v182 = vmovl_u16(v27).u32[0];
          do
          {
            if (v22)
            {
              int8x8_t v30 = vand_s8((int8x8_t)__PAIR64__(v29, v182), (int8x8_t)0xFFFF0000FFFFLL);
              v31.i64[0] = v30.u32[0];
              v31.i64[1] = v30.u32[1];
              unint64_t v200 = __PAIR64__(v29, v182);
              unint64_t v219 = __PAIR64__(v29, v182);
              uint64_t v32 = *(unsigned __int16 *)((unint64_t)&v219 | (4 * v22));
              float64_t v196 = *(double *)&v227[v32];
              _ZNKSt3__18functionIFdDv2_dEEclES1_(v8, (__n128)vaddq_f64(v185, vmlaq_f64(a5, v190, vcvtq_f64_u64(v31))));
              int8x16_t v34 = v227;
              float64_t v35 = *(double *)&v227[v29 + 1];
              int8x8_t v20 = v28;
            }
            else
            {
              int8x8_t v36 = vand_s8((int8x8_t)__PAIR64__(v183, v29), (int8x8_t)0xFFFF0000FFFFLL);
              v37.i64[0] = v36.u32[0];
              v37.i64[1] = v36.u32[1];
              unint64_t v200 = __PAIR64__(v183, v29);
              unint64_t v220 = __PAIR64__(v183, v29);
              uint64_t v32 = *(unsigned __int16 *)((unint64_t)&v220 | (4 * v22));
              float64_t v196 = *(double *)&v227[v32];
              int8x8_t v193 = (int8x8_t)v227[v29 + 1];
              _ZNKSt3__18functionIFdDv2_dEEclES1_(v8, (__n128)vaddq_f64(v185, vmlaq_f64(a5, v190, vcvtq_f64_u64(v37))));
              int8x8_t v20 = v193;
              int8x16_t v34 = v227;
              float64_t v35 = *(double *)&v28;
            }
            v34[v32] = v28;
            uint16x4_t v187 = *(uint16x4_t *)&v33;
            v38.f64[0] = v33;
            v38.f64[1] = v35;
            v19.f64[0] = v196;
            *(int8x8_t *)&v19.f64[1] = v20;
            float64x2_t v189 = v38;
            int8x16_t v39 = (int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtzq_f64(v19), (int32x4_t)vcgtzq_f64(v38))), (int8x8_t)0x8000400020001));
            int8x8_t v17 = (int8x8_t)vextq_s8(v39, v39, 8uLL).u64[0];
            *(int8x8_t *)v39.i8 = vorr_s8(*(int8x8_t *)v39.i8, v17);
            __int8 v218 = v39.i8[4];
            __int8 v217 = v39.i8[0];
                                   + (((unint64_t)(vaddvq_f64(vaddq_f64(v19, v38)) * 0.25 > 0.0) << 6) | (4 * (v39.i8[0] | v39.i8[4]))));
            unint64_t v40 = vmovl_u8(*(uint8x8_t *)v39.i8).u64[0];
            float64x2_t v18 = v19;
            unint64_t v194 = v40;
            float64x2_t v197 = v19;
            if (~(unsigned __int16)v40)
            {
              char v41 = BYTE2(v40);
              LOBYTE(v226) = v40;
              char v236 = BYTE2(v40);
              v234.n128_u16[1] = WORD2(v200);
              v234.n128_u16[0] = v200;
              v234.n128_u8[4] = v40;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v231, (unsigned __int16 *)&v234, &v236, (uint64_t)&v237, *(double *)&v200, *(double *)&v17, v19.f64[0], v19.f64[0], v20);
              WORD1(v240[0]) = WORD2(v200);
              LOWORD(v240[0]) = v200;
              BYTE4(v240[0]) = v41;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v231, (unsigned __int16 *)v240, (char *)&v226, (uint64_t)&v234, v42, v43, v44, v45, v46);
              unint64_t v40 = v194;
              float64x2_t v18 = v197;
            }
            if (~WORD2(v40))
            {
              char v47 = BYTE6(v40);
              LOBYTE(v226) = BYTE4(v40);
              char v236 = BYTE6(v40);
              v234.n128_u16[1] = WORD2(v200);
              v234.n128_u16[0] = v200;
              v234.n128_u8[4] = BYTE4(v40);
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v231, (unsigned __int16 *)&v234, &v236, (uint64_t)&v237, *(double *)&v200, *(double *)&v17, v18.f64[0], v19.f64[0], v20);
              WORD1(v240[0]) = WORD2(v200);
              LOWORD(v240[0]) = v200;
              BYTE4(v240[0]) = v47;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_((uint64_t *)&v231, (unsigned __int16 *)v240, (char *)&v226, (uint64_t)&v234, v48, v49, v50, v51, v52);
              unint64_t v40 = v194;
              float64x2_t v18 = v197;
            }
            unsigned __int8 v53 = 0;
            do
            {
              unint64_t v216 = v40;
              __int16 v54 = *(_WORD *)((unint64_t)&v216 & 0xFFFFFFFFFFFFFFF9 | (2 * (v53 & 3)));
              if ((_BYTE)v54 == 0xFF) {
                break;
              }
              char v55 = v54 & 0xFD;
              int8x8_t v56 = (int8x8_t)v200;
              if ((v54 - 1) <= 1u)
              {
                unint64_t v57 = (_DWORD *)((unint64_t)&v215 | (4 * ((v54 & 0xFD) == 0)));
                unint64_t v215 = v200;
                ++*v57;
                int8x8_t v56 = (int8x8_t)v215;
              }
              HIWORD(v214) = v56.i16[2];
              LOWORD(v214) = v56.i16[0];
              int8x8_t v58 = vand_s8(v56, (int8x8_t)0xFFFF0000FFFFLL);
              int v59 = v54 & 0xFE;
              v213[0] = v18;
              v213[1] = v189;
              double v60 = *((double *)v213 + (((_BYTE)v54 + 1) & 3));
              v212[0] = v18;
              v212[1] = v189;
              uint64_t v61 = v54 & 3;
              if (v59 == 2) {
                double v62 = v60;
              }
              else {
                double v62 = *((double *)v212 + v61);
              }
              if (v59 == 2) {
                double v60 = *((double *)v212 + v61);
              }
              double v63 = v62 / (v62 - v60);
              BOOL v64 = v55 != 0;
              LODWORD(v240[0]) = v214;
              HIDWORD(v240[0]) = v64;
              v65.i64[0] = v58.u32[0];
              v65.i64[1] = v58.u32[1];
              float64x2_t v211 = vmlaq_f64(a5, v190, vcvtq_f64_u64(v65));
              *(double *)((unint64_t)&v211 | (8 * v64)) = *(double *)((unint64_t)&v211 | (8 * v64))
                                                               + v63 * v188;
              __n128 v234 = (__n128)v211;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKS4_(v230, (unsigned __int16 *)v240, &v234, (uint64_t)&v237, v211.f64[0], v63, v188, v62, *(int8x8_t *)&a5.f64[0]);
              unint64_t v40 = v194;
              float64x2_t v18 = v197;
              unsigned int v66 = v53++;
            }
            while (v66 < 3);
            ++v29;
            uint16x4_t v27 = v187;
            int8x8_t v28 = (int8x8_t)v187;
            uint64_t v22 = v186;
          }
          while (v29 != v10);
        }
        v227[v10] = v27;
        __int32 v24 = v180;
      }
      while ((unsigned __int16)v180 < (unsigned __int16)v178);
    }
    __n128 v234 = 0uLL;
    int8x16_t v235 = 0;
    int64x2_t v237 = &v231;
    if ((unint64_t)v232 >= 0x10)
    {
      uint64_t v67 = 0;
      unint64_t v68 = (unint64_t)v232 >> 4;
      v69.i32[1] = -2143281136;
      int8x8_t v17 = (int8x8_t)0x3830282018100800;
      while (1)
      {
        *(int8x8_t *)&v18.f64[0] = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v231 + v67)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
        if (LOWORD(v18.f64[0]) != 0xFFFF) {
          break;
        }
        v67 += 16;
        if (!--v68) {
          goto LABEL_58;
        }
      }
      uint64_t v70 = __clz(__rbit64((unsigned __int16)~LOWORD(v18.f64[0]))) + v67;
      unint64_t v238 = (unsigned __int16)~LOWORD(v18.f64[0]);
      uint64_t v239 = v70;
      if (v70 != -1)
      {
        uint64_t v71 = 0;
        do
        {
          uint64_t v72 = (uint64_t *)(*((void *)v237 + 1) + 12 * v70);
          uint64_t v73 = *v72;
          v69.i32[0] = *v72;
          BOOL v74 = (HIDWORD(*v72) & 0xFD) != 1;
          unsigned int v75 = BYTE4(*v72) - 3;
          unint64_t v210 = vmovl_u16(v69).u64[0];
          int v76 = *(_DWORD *)((unint64_t)&v210 | (4 * v74));
          BOOL v77 = v75 <= 0xFFFFFFFD && (unsigned __int16)*(_DWORD *)((unint64_t)&v210 | (4 * v74)) == 0;
          if (v77
            || v75 >= 0xFFFFFFFE
            && (int32x2_t v209 = v181, *(_DWORD *)((unint64_t)&v209 | (4 * v74)) - 1 <= (unsigned __int16)v76))
          {
            if (v71 >= v235)
            {
              uint64_t v78 = (uint64_t)&v71[-v234.n128_u64[0]] >> 3;
              if ((unint64_t)(v78 + 1) >> 61) {
LABEL_167:
              }
                abort();
              unint64_t v79 = (uint64_t)&v235[-v234.n128_u64[0]] >> 2;
              if (v79 <= v78 + 1) {
                unint64_t v79 = v78 + 1;
              }
              if ((unint64_t)&v235[-v234.n128_u64[0]] >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v80 = v79;
              }
              if (v80)
              {
                unint64_t v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v235, v80);
                uint64_t v73 = *v72;
              }
              else
              {
                unint64_t v81 = 0;
              }
              uint64_t v82 = &v81[8 * v78];
              *(void *)uint64_t v82 = v73;
              uint64_t v71 = v82 + 8;
              unsigned int v83 = (char *)v234.n128_u64[1];
              unint64_t v84 = v234.n128_u64[0];
              if (v234.n128_u64[1] != v234.n128_u64[0])
              {
                do
                {
                  uint64_t v85 = *((void *)v83 - 1);
                  v83 -= 8;
                  *((void *)v82 - 1) = v85;
                  v82 -= 8;
                }
                while (v83 != (char *)v84);
                unsigned int v83 = (char *)v234.n128_u64[0];
              }
              v234.n128_u64[0] = (unint64_t)v82;
              v234.n128_u64[1] = (unint64_t)v71;
              int8x16_t v235 = &v81[8 * v80];
              if (v83) {
                operator delete(v83);
              }
            }
            else
            {
              *(void *)uint64_t v71 = v73;
              v71 += 8;
            }
            v234.n128_u64[1] = (unint64_t)v71;
          }
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v237);
          uint64_t v70 = v239;
        }
        while (v239 != -1);
      }
    }
LABEL_58:
    if (*((void *)&v232 + 1))
    {
      uint64_t v195 = (uint64_t)(v184 + 2);
      int64x2_t v86 = vdupq_n_s64(0x7FF0000000000000uLL);
      int64x2_t v192 = v86;
      do
      {
        uint64_t v87 = v231;
        if ((unint64_t)v232 >= 0x10)
        {
          uint64_t v89 = 0;
          unint64_t v88 = (unint64_t)v232 >> 4;
          unint64_t v90 = (unint64_t)v232 >> 4;
          while (1)
          {
            int8x8_t v17 = (int8x8_t)0x8040201008040201;
            *(int8x8_t *)v86.i8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v231 + v89)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
            unint64_t v91 = (unsigned __int16)~v86.i16[0];
            if (v86.i16[0] != -1) {
              break;
            }
            v89 += 16;
            if (!--v90) {
              goto LABEL_65;
            }
          }
          uint64_t v92 = __clz(__rbit64(v91)) + v89;
        }
        else
        {
          unint64_t v88 = 0;
LABEL_65:
          unint64_t v91 = 0;
          uint64_t v92 = -1;
        }
        double v94 = (__int16 *)v234.n128_u64[1];
        unint64_t v93 = v234.n128_u64[0];
        while (v94 != (__int16 *)v93)
        {
          v94 -= 4;
          unint64_t v95 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v231, v94, *(double *)v86.i64, *(double *)&v17, v18.f64[0], v19.f64[0], v20);
          if (v95 >> 4 >= v88)
          {
            unint64_t v96 = 0;
          }
          else
          {
            int8x8_t v17 = (int8x8_t)0x8040201008040201;
            *(int8x8_t *)v86.i8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v87 + 16 * (v95 >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
            unint64_t v96 = (unsigned __int16)~v86.i16[0];
          }
          v234.n128_u64[1] = (unint64_t)v94;
          if (v95 != -1)
          {
            uint64_t v92 = v95;
            unint64_t v91 = v96;
            goto LABEL_76;
          }
        }
        if (v92 == -1)
        {
          double v97 = v184;
          int8x8_t v98 = (int64x2_t *)v184[1];
        }
        else
        {
          while (1)
          {
LABEL_76:
            uint64_t v99 = (unsigned __int16 *)(*((void *)&v231 + 1) + 12 * v92);
            unsigned int v100 = *v99;
            unsigned int v101 = v99[1];
            int v102 = *((unsigned __int8 *)v99 + 4);
            HIDWORD(v240[0]) = 0;
            WORD1(v240[0]) = v101;
            LOWORD(v240[0]) = v100;
            int v103 = *((unsigned __int8 *)v99 + 8);
            BYTE4(v240[0]) = *((unsigned char *)v99 + 8);
            int64x2_t v237 = &v231;
            unint64_t v238 = v91;
            uint64_t v239 = v92;
            _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v237);
            _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE15remove_internalEm((uint64_t)&v231, v92);
            uint64_t v109 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v231, (__int16 *)v240, v104, v105, v106, v107, v108);
            if (v109 != -1) {
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE15remove_internalEm((uint64_t)&v231, v109);
            }
            double v114 = COERCE_DOUBLE(__PAIR64__(v101, v100));
            unsigned int v115 = v102 & 0xFFFFFFFD;
            if ((v102 - 1) <= 1)
            {
              *(double *)&unint64_t v208 = COERCE_DOUBLE(__PAIR64__(v101, v100));
              ++*(_DWORD *)((unint64_t)&v208 | (4 * (v115 == 0)));
              double v114 = *(double *)&v208;
            }
            double v97 = v184;
            HIWORD(v207) = WORD2(v114);
            LOWORD(v207) = LOWORD(v114);
            int64x2_t v237 = (long long *)(v207 | ((unint64_t)(v115 != 0) << 32));
            uint64_t S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v230, (__int16 *)&v237, v114, v110, v111, v112, v113);
            int64x2_t v121 = *(int64x2_t *)(v230[1]
                                + 32 * S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP
                                + 16);
            uint64_t v123 = (int64x2_t *)v184[1];
            unint64_t v122 = v184[2];
            if ((unint64_t)v123 >= v122)
            {
              uint64_t v124 = ((uint64_t)v123->i64 - *v184) >> 4;
              if ((unint64_t)(v124 + 1) >> 60) {
                goto LABEL_167;
              }
              uint64_t v125 = v122 - *v184;
              uint64_t v126 = v125 >> 3;
              if (v125 >> 3 <= (unint64_t)(v124 + 1)) {
                uint64_t v126 = v124 + 1;
              }
              if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v127 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v127 = v126;
              }
              if (v127)
              {
                int64x2_t v198 = *(int64x2_t *)(v230[1]
                                    + 32
                                    * S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP
                                    + 16);
                int64x2_t v128 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v195, v127);
                int64x2_t v121 = v198;
              }
              else
              {
                int64x2_t v128 = 0;
              }
              int v129 = &v128[16 * v124];
              *(int64x2_t *)int v129 = v121;
              int8x8_t v98 = (int64x2_t *)(v129 + 16);
              int v131 = (char *)*v184;
              unint64_t v130 = (char *)v184[1];
              if (v130 != (char *)*v184)
              {
                do
                {
                  long long v132 = *((_OWORD *)v130 - 1);
                  v130 -= 16;
                  v121.i32[1] = DWORD1(v132);
                  *((_OWORD *)v129 - 1) = v132;
                  v129 -= 16;
                }
                while (v130 != v131);
                unint64_t v130 = (char *)*v184;
              }
              *unint64_t v184 = v129;
              v184[1] = v98;
              v184[2] = &v128[16 * v127];
              if (v130) {
                operator delete(v130);
              }
            }
            else
            {
              *uint64_t v123 = v121;
              int8x8_t v98 = v123 + 1;
            }
            v184[1] = v98;
            uint64_t v133 = v240[0];
            v121.i32[0] = v240[0];
            v121.i64[0] = vmovl_u16(*(uint16x4_t *)v121.i8).u64[0];
            BOOL v134 = (BYTE4(v240[0]) & 0xFD) != 1;
            unsigned int v135 = BYTE4(v240[0]) - 3;
            uint64_t v206 = v121.i64[0];
            int v136 = *(_DWORD *)((unint64_t)&v206 | (4 * v134));
            if (v135 <= 0xFFFFFFFD && (unsigned __int16)*(_DWORD *)((unint64_t)&v206 | (4 * v134)) == 0) {
              break;
            }
            if (v135 >= 0xFFFFFFFE)
            {
              double v117 = *(double *)&v181;
              int32x2_t v205 = v181;
              if (*(_DWORD *)((unint64_t)&v205 | (4 * v134)) - 1 <= (unsigned __int16)v136) {
                break;
              }
              int v138 = 1;
            }
            else
            {
              int v138 = 0xFFFF;
            }
            double v203 = *(double *)v121.i64;
            *(_DWORD *)((unint64_t)&v203 | (4 * v134)) = v138 + v136;
            HIWORD(v204) = WORD2(v203);
            LOWORD(v204) = LOWORD(v203);
            int64x2_t v237 = (long long *)((v133 + 0x200000000) & 0x300000000 | v204);
            unint64_t v139 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v231, (__int16 *)&v237, v203, v117, v118, v119, v120);
            uint64_t v92 = v139;
            if (v139 >> 4 >= (unint64_t)v232 >> 4)
            {
              unint64_t v91 = 0;
            }
            else
            {
              int8x8_t v17 = (int8x8_t)0x8040201008040201;
              *(int8x8_t *)v86.i8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v231 + 16 * (v139 >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
              unint64_t v91 = (unsigned __int16)~v86.i16[0];
            }
            if (v139 == -1) {
              goto LABEL_144;
            }
          }
          int64x2_t v237 = (long long *)(LODWORD(v240[0]) | 0xFF00000000);
          unsigned int v140 = v103 & 0xFFFFFFFD;
          if ((v103 - 1) < 2)
          {
            uint64_t v202 = v121.i64[0];
            ++*(_DWORD *)((unint64_t)&v202 | (4 * (v140 == 0)));
            v121.i64[0] = v202;
          }
          HIWORD(v201) = v121.i16[2];
          LOWORD(v201) = v121.i16[0];
          unint64_t v226 = v201 | ((unint64_t)(v140 != 0) << 32);
          uint64_t v141 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v230, (__int16 *)&v226, *(double *)v121.i64, v117, v118, v119, v120);
          int64x2_t v142 = *(int64x2_t *)(v230[1] + 32 * v141 + 16);
          float64x2_t v144 = (int64x2_t *)v184[1];
          unint64_t v143 = v184[2];
          if ((unint64_t)v144 >= v143)
          {
            uint64_t v146 = ((uint64_t)v144->i64 - *v184) >> 4;
            if ((unint64_t)(v146 + 1) >> 60) {
              goto LABEL_167;
            }
            uint64_t v147 = v143 - *v184;
            uint64_t v148 = v147 >> 3;
            if (v147 >> 3 <= (unint64_t)(v146 + 1)) {
              uint64_t v148 = v146 + 1;
            }
            if ((unint64_t)v147 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v149 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v149 = v148;
            }
            if (v149)
            {
              int64x2_t v199 = *(int64x2_t *)(v230[1] + 32 * v141 + 16);
              unint64_t v150 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v195, v149);
              int64x2_t v142 = v199;
            }
            else
            {
              unint64_t v150 = 0;
            }
            int64x2_t v151 = &v150[16 * v146];
            *(int64x2_t *)int64x2_t v151 = v142;
            int8x8_t v145 = (int64x2_t *)(v151 + 16);
            int8x16_t v153 = (char *)*v184;
            int8x16_t v152 = (char *)v184[1];
            if (v152 != (char *)*v184)
            {
              do
              {
                long long v154 = *((_OWORD *)v152 - 1);
                v152 -= 16;
                *((_OWORD *)v151 - 1) = v154;
                v151 -= 16;
              }
              while (v152 != v153);
              int8x16_t v152 = (char *)*v184;
            }
            *unint64_t v184 = v151;
            v184[1] = v145;
            v184[2] = &v150[16 * v149];
            if (v152) {
              operator delete(v152);
            }
          }
          else
          {
            *float64x2_t v144 = v142;
            int8x8_t v145 = v144 + 1;
          }
          v184[1] = v145;
          unint64_t v155 = v184[2];
          if ((unint64_t)v145 >= v155)
          {
            uint64_t v156 = ((uint64_t)v145->i64 - *v184) >> 4;
            if ((unint64_t)(v156 + 1) >> 60) {
              goto LABEL_167;
            }
            uint64_t v157 = v155 - *v184;
            uint64_t v158 = v157 >> 3;
            if (v157 >> 3 <= (unint64_t)(v156 + 1)) {
              uint64_t v158 = v156 + 1;
            }
            if ((unint64_t)v157 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v159 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v159 = v158;
            }
            if (v159) {
              unint64_t v160 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v195, v159);
            }
            else {
              unint64_t v160 = 0;
            }
            uint64_t v161 = (int64x2_t *)&v160[16 * v156];
            v86.i64[0] = v192.i64[0];
            *uint64_t v161 = v192;
            int8x8_t v98 = v161 + 1;
            uint64_t v163 = (char *)*v184;
            unint64_t v162 = (char *)v184[1];
            if (v162 != (char *)*v184)
            {
              do
              {
                int64x2_t v164 = *((int64x2_t *)v162 - 1);
                v162 -= 16;
                v86.i64[0] = v164.i64[0];
                v161[-1] = v164;
                --v161;
              }
              while (v162 != v163);
              unint64_t v162 = (char *)*v184;
            }
            *unint64_t v184 = v161;
            v184[1] = v98;
            v184[2] = &v160[16 * v159];
            if (v162) {
              operator delete(v162);
            }
          }
          else
          {
            v86.i64[0] = v192.i64[0];
            *int8x8_t v145 = v192;
            int8x8_t v98 = v145 + 1;
          }
          v184[1] = v98;
        }
LABEL_144:
        unint64_t v165 = ((unint64_t)v98 - *v97) >> 4;
        int v167 = a4[1];
        unint64_t v166 = (unint64_t)a4[2];
        if ((unint64_t)v167 >= v166)
        {
          int v169 = *a4;
          uint64_t v170 = (v167 - *a4) >> 2;
          unint64_t v171 = v170 + 1;
          if ((unint64_t)(v170 + 1) >> 62) {
            goto LABEL_167;
          }
          uint64_t v172 = v166 - (void)v169;
          if (v172 >> 1 > v171) {
            unint64_t v171 = v172 >> 1;
          }
          if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v173 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v173 = v171;
          }
          if (v173)
          {
            unsigned __int32 v174 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v173);
            int v169 = *a4;
            int v167 = a4[1];
          }
          else
          {
            unsigned __int32 v174 = 0;
          }
          __int32 v175 = &v174[4 * v170];
          *(_DWORD *)__int32 v175 = v165;
          float64x2_t v168 = v175 + 4;
          while (v167 != v169)
          {
            int v176 = *((_DWORD *)v167 - 1);
            v167 -= 4;
            *((_DWORD *)v175 - 1) = v176;
            v175 -= 4;
          }
          *a4 = v175;
          a4[1] = v168;
          a4[2] = &v174[4 * v173];
          if (v169) {
            operator delete(v169);
          }
        }
        else
        {
          *(_DWORD *)int v167 = v165;
          float64x2_t v168 = v167 + 4;
        }
        a4[1] = v168;
      }
      while (*((void *)&v232 + 1));
    }
    if (v234.n128_u64[0])
    {
      v234.n128_u64[1] = v234.n128_u64[0];
      operator delete((void *)v234.n128_u64[0]);
    }
    if (v227)
    {
      int8x8_t v228 = (char *)v227;
      operator delete(v227);
    }
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)v230);
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v231);
  }
  return result;
}

uint64_t geom_marching_squares_with_default_options_2f(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, float32x2_t a6, float32x2_t a7)
{
  int v13 = (int32x2_t **)geom::collection_to_vector<float>(a4);
  uint64_t v14 = (char **)geom::collection_to_vector<float>(a5);
  v16[0] = a1;
  v16[1] = a2;
  return _ZN4geom23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS1_12placeholders4__phILi1EEERS5_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISK_Lh2EvE5valueENS1_9allocatorISP_EEEERNSM_IjNSQ_IjEEEE((uint64_t)v16, a3, v13, v14, a6, a7);
}

uint64_t _ZN4geom23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS1_12placeholders4__phILi1EEERS5_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISK_Lh2EvE5valueENS1_9allocatorISP_EEEERNSM_IjNSQ_IjEEEE(uint64_t result, unsigned int a2, int32x2_t **a3, char **a4, float32x2_t a5, float32x2_t a6)
{
  a3[1] = *a3;
  a4[1] = *a4;
  float32x2_t v7 = vsub_f32(a6, a5);
  float32x2_t v8 = vmul_f32(v7, v7);
  if (sqrtf(vaddv_f32(v8)) > 0.00000011921)
  {
    uint64_t v11 = result;
    v8.f32[0] = fminf(v7.f32[0], v7.f32[1]) / (float)a2;
    double v181 = *(double *)&v8;
    float32x2_t v12 = (float32x2_t)vdup_lane_s32((int32x2_t)v8, 0);
    int32x2_t v174 = vcvt_s32_f32(vrndp_f32(vdiv_f32(v7, v12)));
    uint64_t v218 = 0;
    long long v217 = 0u;
    long long v216 = 0u;
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v216, 1uLL);
    memset(v215, 0, 40);
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(v215, 1uLL);
    unsigned __int8 v13 = vcgt_u32((uint32x2_t)v174, (uint32x2_t)vand_s8((int8x8_t)vdup_lane_s32(v174, 1), (int8x8_t)0xFFFF0000FFFFLL)).u8[0];
    int32x2_t v210 = v174;
    uint64_t v14 = *(unsigned int *)((unint64_t)&v210 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v13 & 1)));
    uint64_t v15 = v13 & 1;
    uint64_t v212 = 0;
    int8x16_t v213 = 0;
    uint64_t v214 = 0;
    std::vector<float>::__vallocate[abi:nn180100](&v212, v14 + 1);
    uint64x2_t v16 = v213;
    bzero(v213, 4 * (v14 + 1));
    int v17 = 0;
    int8x16_t v213 = &v16[v14 + 1];
    do
    {
      int8x8_t v209 = 0;
      *(_DWORD *)((unint64_t)&v209 | (4 * v15)) = v17;
      float v18 = (*(float (**)(void, double))v11)(*(void *)(v11 + 8), COERCE_DOUBLE(vmla_f32(a5, v12, vcvt_f32_u32((uint32x2_t)vand_s8(v209, (int8x8_t)0xFFFF0000FFFFLL)))));
      v212[(unsigned __int16)v17++] = v18;
    }
    while ((unsigned __int16)v17 <= (unsigned __int16)v14);
    int v176 = a3;
    uint64_t v172 = a4;
    uint64_t v23 = v15 ^ 1;
    int32x2_t v208 = v174;
    int v171 = *(_DWORD *)((unint64_t)&v208 | (4 * v23));
    if (v171)
    {
      __int32 v24 = 0;
      float32x2_t v25 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)&v181, 0);
      uint64_t v170 = (_DWORD *)((unint64_t)&v206 | (4 * v23));
      uint64_t v178 = v11;
      do
      {
        int8x8_t v206 = 0;
        __int32 v173 = v24 + 1;
        *uint64_t v170 = v24 + 1;
        int8x8_t v207 = v206;
        *(_DWORD *)((unint64_t)&v207 | (4 * v15)) = 0;
        float v27 = (*(float (**)(void, double))v11)(*(void *)(v11 + 8), COERCE_DOUBLE(vmla_f32(a5, v12, vcvt_f32_u32((uint32x2_t)vand_s8(v207, (int8x8_t)0xFFFF0000FFFFLL)))));
        if ((_WORD)v14)
        {
          uint64_t v28 = 0;
          v26.i32[0] = v24;
          unsigned __int32 v175 = vmovl_u16(v26).u32[0];
          __int32 v177 = v24;
          do
          {
            if (v15)
            {
              float32x2_t v32 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)__PAIR64__(v28, v175), (int8x8_t)0xFFFF0000FFFFLL));
              float32x2_t v29 = vmla_f32(a5, v12, v32);
              unint64_t v186 = __PAIR64__(v28, v175);
              unint64_t v204 = __PAIR64__(v28, v175);
              uint64_t v30 = *(unsigned __int16 *)((unint64_t)&v204 | (4 * v15));
              uint64x2_t v31 = &v212[v30];
              v32.f32[0] = v27;
            }
            else
            {
              float32x2_t v32 = vcvt_f32_u32((uint32x2_t)vand_s8((int8x8_t)__PAIR64__(v24, v28), (int8x8_t)0xFFFF0000FFFFLL));
              float32x2_t v29 = vmla_f32(a5, v12, v32);
              unint64_t v186 = __PAIR64__(v24, v28);
              unint64_t v205 = __PAIR64__(v24, v28);
              uint64_t v30 = *(unsigned __int16 *)((unint64_t)&v205 | (4 * v15));
              uint64x2_t v31 = &v212[v30];
              v32.f32[0] = v212[v28 + 1];
            }
            double v183 = *(double *)&v32;
            unsigned int v179 = *(_DWORD *)v31;
            v20.i32[0] = (*(float (**)(void, double))v178)(*(void *)(v178 + 8), COERCE_DOUBLE(vadd_f32(v25, v29)));
            float v33 = v27;
            if (v15) {
              float v33 = v212[WORD2(v186) + 1];
            }
            v212[v30] = v27;
            float32x2_t v22 = (float32x2_t)__PAIR64__(LODWORD(v183), v179);
            v34.i64[0] = __PAIR64__(LODWORD(v183), v179);
            double v21 = v183;
            v34.i64[1] = __PAIR64__(LODWORD(v33), v20.u32[0]);
            float32x4_t v182 = v34;
            double v180 = *(double *)&v20;
            v20.f32[1] = v33;
            int8x16_t v35 = (int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vcgtzq_f32(v34)), (int8x8_t)0x8000400020001));
            int8x8_t v36 = (int8x8_t)vextq_s8(v35, v35, 8uLL).u64[0];
            *(int8x8_t *)v35.i8 = vorr_s8(*(int8x8_t *)v35.i8, v36);
            __int8 v203 = v35.i8[4];
            __int8 v202 = v35.i8[0];
                                   + (((unint64_t)((float)(vaddv_f32(vadd_f32(v22, v20)) * 0.25) > 0.0) << 6) | (4 * (v35.i8[0] | v35.i8[4]))));
            unint64_t v37 = vmovl_u8(*(uint8x8_t *)v35.i8).u64[0];
            unint64_t v184 = v37;
            if (~(unsigned __int16)v37)
            {
              char v38 = BYTE2(v37);
              LOBYTE(v211) = v37;
              char v222 = BYTE2(v37);
              WORD1(v219) = WORD2(v186);
              LOWORD(v219) = v186;
              BYTE4(v219) = v37;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v216, (unsigned __int16 *)&v219, &v222, (uint64_t)&v223, *(double *)&v186, *(double *)&v36, *(double *)&v20, v21, (int8x8_t)v22);
              WORD1(v226[0]) = WORD2(v186);
              LOWORD(v226[0]) = v186;
              BYTE4(v226[0]) = v38;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v216, (unsigned __int16 *)v226, (char *)&v211, (uint64_t)&v219, v39, v40, v41, v42, v43);
              unint64_t v37 = v184;
            }
            if (~WORD2(v37))
            {
              char v44 = BYTE6(v37);
              LOBYTE(v211) = BYTE4(v37);
              char v222 = BYTE6(v37);
              WORD1(v219) = WORD2(v186);
              LOWORD(v219) = v186;
              BYTE4(v219) = BYTE4(v37);
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v216, (unsigned __int16 *)&v219, &v222, (uint64_t)&v223, *(double *)&v186, *(double *)&v36, *(double *)&v20, v21, (int8x8_t)v22);
              WORD1(v226[0]) = WORD2(v186);
              LOWORD(v226[0]) = v186;
              BYTE4(v226[0]) = v44;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v216, (unsigned __int16 *)v226, (char *)&v211, (uint64_t)&v219, v45, v46, v47, v48, v49);
              unint64_t v37 = v184;
            }
            unsigned __int8 v50 = 0;
            double v19 = v180;
            float v27 = *(float *)&v180;
            do
            {
              unint64_t v201 = v37;
              __int16 v51 = *(_WORD *)((unint64_t)&v201 & 0xFFFFFFFFFFFFFFF9 | (2 * (v50 & 3)));
              if ((_BYTE)v51 == 0xFF) {
                break;
              }
              int8x8_t v52 = (int8x8_t)v186;
              if ((v51 - 1) <= 1u)
              {
                unsigned __int8 v53 = (_DWORD *)((unint64_t)&v200 | (4 * ((v51 & 0xFD) == 0)));
                unint64_t v200 = v186;
                ++*v53;
                int8x8_t v52 = (int8x8_t)v200;
              }
              HIWORD(v199) = v52.i16[2];
              LOWORD(v199) = v52.i16[0];
              uint32x2_t v54 = (uint32x2_t)vand_s8(v52, (int8x8_t)0xFFFF0000FFFFLL);
              HIDWORD(v55) = v182.i32[1];
              float32x4_t v197 = v182;
              LODWORD(v55) = *(_DWORD *)((unint64_t)&v197 | (4 * (((_BYTE)v51 + 1) & 3)));
              if ((v51 & 0xFE) == 2) {
                LODWORD(v21) = *(_DWORD *)((unint64_t)&v197 | (4 * (((_BYTE)v51 + 1) & 3)));
              }
              else {
                LODWORD(v21) = *(_DWORD *)((unint64_t)&v197 & 0xFFFFFFFFFFFFFFF3 | (4 * (v51 & 3)));
              }
              if ((v51 & 0xFE) == 2) {
                LODWORD(v55) = *(_DWORD *)((unint64_t)&v197 & 0xFFFFFFFFFFFFFFF3 | (4 * (v51 & 3)));
              }
              *(float *)&double v55 = *(float *)&v21 / (float)(*(float *)&v21 - *(float *)&v55);
              uint64_t v56 = (v51 & 0xFD) != 0;
              unint64_t v219 = (__int16 *)(v199 | (unint64_t)(v56 << 32));
              *(float32x2_t *)&double v198 = vmla_f32(a5, v12, vcvt_f32_u32(v54));
              *(float *)((unint64_t)&v198 | (4 * v56)) = *(float *)((unint64_t)&v198 | (4 * v56))
                                                              + (float)(*(float *)&v55 * *(float *)&v181);
              v226[0] = v198;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS4_(v215, (unsigned __int16 *)&v219, v226, (uint64_t)&v223, v198, v55, v181, v21, (int8x8_t)v22);
              unsigned int v57 = v50++;
              unint64_t v37 = v184;
            }
            while (v57 < 3);
            ++v28;
            __int32 v24 = v177;
          }
          while (v28 != v14);
        }
        uint64_t v11 = v178;
        v212[v14] = v27;
        __int32 v24 = v173;
      }
      while ((unsigned __int16)v173 < (unsigned __int16)v171);
    }
    unint64_t v219 = 0;
    unint64_t v220 = 0;
    int8x8_t v221 = 0;
    int32x2_t v223 = &v216;
    if ((unint64_t)v217 >= 0x10)
    {
      uint64_t v58 = 0;
      unint64_t v59 = (unint64_t)v217 >> 4;
      v60.i32[1] = -2143281136;
      double v19 = 4.74803907e-38;
      while (1)
      {
        float32x2_t v20 = (float32x2_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v216 + v58)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
        if (v20.i16[0] != -1) {
          break;
        }
        v58 += 16;
        if (!--v59) {
          goto LABEL_60;
        }
      }
      uint64_t v61 = __clz(__rbit64((unsigned __int16)~v20.i16[0])) + v58;
      unint64_t v224 = (unsigned __int16)~v20.i16[0];
      uint64_t v225 = v61;
      if (v61 != -1)
      {
        double v62 = 0;
        do
        {
          double v63 = (uint64_t *)(*((void *)v223 + 1) + 12 * v61);
          uint64_t v64 = *v63;
          v60.i32[0] = *v63;
          BOOL v65 = (HIDWORD(*v63) & 0xFD) != 1;
          unsigned int v66 = BYTE4(*v63) - 3;
          unint64_t v196 = vmovl_u16(v60).u64[0];
          int v67 = *(_DWORD *)((unint64_t)&v196 | (4 * v65));
          BOOL v68 = v66 <= 0xFFFFFFFD && (unsigned __int16)*(_DWORD *)((unint64_t)&v196 | (4 * v65)) == 0;
          if (v68
            || v66 >= 0xFFFFFFFE
            && (int32x2_t v195 = v174, *(_DWORD *)((unint64_t)&v195 | (4 * v65)) - 1 <= (unsigned __int16)v67))
          {
            if (v62 >= v221)
            {
              uint64_t v69 = (v62 - (char *)v219) >> 3;
              if ((unint64_t)(v69 + 1) >> 61) {
                goto LABEL_170;
              }
              unint64_t v70 = (v221 - (char *)v219) >> 2;
              if (v70 <= v69 + 1) {
                unint64_t v70 = v69 + 1;
              }
              if ((unint64_t)(v221 - (char *)v219) >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v71 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v71 = v70;
              }
              if (v71)
              {
                uint64_t v72 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v221, v71);
                uint64_t v64 = *v63;
              }
              else
              {
                uint64_t v72 = 0;
              }
              uint64_t v73 = &v72[8 * v69];
              *(void *)uint64_t v73 = v64;
              double v62 = v73 + 8;
              unsigned int v75 = v219;
              BOOL v74 = v220;
              if (v220 != v219)
              {
                do
                {
                  uint64_t v76 = *((void *)v74 - 1);
                  v74 -= 4;
                  *((void *)v73 - 1) = v76;
                  v73 -= 8;
                }
                while (v74 != v75);
                BOOL v74 = v219;
              }
              unint64_t v219 = (__int16 *)v73;
              unint64_t v220 = (__int16 *)v62;
              int8x8_t v221 = &v72[8 * v71];
              if (v74) {
                operator delete(v74);
              }
            }
            else
            {
              *(void *)double v62 = v64;
              v62 += 8;
            }
            unint64_t v220 = (__int16 *)v62;
          }
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v223);
          uint64_t v61 = v225;
        }
        while (v225 != -1);
      }
    }
LABEL_60:
    if (*((void *)&v217 + 1))
    {
      uint64_t v185 = (uint64_t)(a3 + 2);
      int8x8_t v77 = (int8x8_t)0x8040201008040201;
      int32x2_t v78 = vdup_n_s32(0x7F800000u);
      while (1)
      {
        uint64_t v79 = v216;
        if ((unint64_t)v217 >= 0x10)
        {
          uint64_t v81 = 0;
          unint64_t v80 = (unint64_t)v217 >> 4;
          unint64_t v82 = (unint64_t)v217 >> 4;
          while (1)
          {
            double v19 = -1.79399301e-307;
            int8x8_t v77 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v216 + v81)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
            unint64_t v83 = (unsigned __int16)~v77.i16[0];
            if (v77.i16[0] != -1) {
              break;
            }
            v81 += 16;
            if (!--v82) {
              goto LABEL_67;
            }
          }
          uint64_t v84 = __clz(__rbit64(v83)) + v81;
        }
        else
        {
          unint64_t v80 = 0;
LABEL_67:
          unint64_t v83 = 0;
          uint64_t v84 = -1;
        }
        uint64_t v85 = v219;
        int64x2_t v86 = v220;
        do
        {
          if (v86 == v85)
          {
            if (v84 != -1) {
              goto LABEL_78;
            }
            uint64_t v89 = v176;
            unint64_t v90 = v176[1];
            unint64_t v91 = v172;
            goto LABEL_147;
          }
          v86 -= 4;
          unint64_t v87 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v216, v86, *(double *)&v77, v19, *(double *)&v20, v21, (int8x8_t)v22);
          if (v87 >> 4 >= v80)
          {
            unint64_t v88 = 0;
          }
          else
          {
            double v19 = -1.79399301e-307;
            int8x8_t v77 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v79 + 16 * (v87 >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
            unint64_t v88 = (unsigned __int16)~v77.i16[0];
          }
          unint64_t v220 = v86;
        }
        while (v87 == -1);
        uint64_t v84 = v87;
        unint64_t v83 = v88;
LABEL_78:
        unint64_t v91 = v172;
        while (1)
        {
          uint64_t v92 = (unsigned __int16 *)(*((void *)&v216 + 1) + 12 * v84);
          unsigned int v93 = *v92;
          unsigned int v94 = v92[1];
          int v95 = *((unsigned __int8 *)v92 + 4);
          HIDWORD(v226[0]) = 0;
          WORD1(v226[0]) = v94;
          LOWORD(v226[0]) = v93;
          BYTE4(v226[0]) = *((unsigned char *)v92 + 8);
          int32x2_t v223 = &v216;
          unint64_t v224 = v83;
          uint64_t v225 = v84;
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v223);
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE15remove_internalEm((uint64_t)&v216, v84);
          uint64_t v101 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v216, (__int16 *)v226, v96, v97, v98, v99, v100);
          if (v101 != -1) {
            _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE15remove_internalEm((uint64_t)&v216, v101);
          }
          double v106 = COERCE_DOUBLE(__PAIR64__(v94, v93));
          unsigned int v107 = v95 & 0xFFFFFFFD;
          if ((v95 - 1) <= 1)
          {
            *(double *)&unint64_t v194 = COERCE_DOUBLE(__PAIR64__(v94, v93));
            ++*(_DWORD *)((unint64_t)&v194 | (4 * (v107 == 0)));
            double v106 = *(double *)&v194;
          }
          uint64_t v89 = v176;
          HIWORD(v193) = WORD2(v106);
          LOWORD(v193) = LOWORD(v106);
          int32x2_t v223 = (long long *)(v193 | ((unint64_t)(v107 != 0) << 32));
          uint64_t S4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v215, (__int16 *)&v223, v106, v102, v103, v104, v105);
          int32x2_t v114 = *(int32x2_t *)(v215[1]
                              + 16 * S4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP
                              + 8);
          uint64_t v116 = v176[1];
          unint64_t v115 = (unint64_t)v176[2];
          if ((unint64_t)v116 >= v115)
          {
            uint64_t v117 = v116 - *v176;
            if ((unint64_t)(v117 + 1) >> 61) {
              goto LABEL_170;
            }
            uint64_t v118 = v115 - (void)*v176;
            uint64_t v119 = v118 >> 2;
            if (v118 >> 2 <= (unint64_t)(v117 + 1)) {
              uint64_t v119 = v117 + 1;
            }
            if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v120 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v120 = v119;
            }
            if (v120) {
              int64x2_t v121 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v185, v120);
            }
            else {
              int64x2_t v121 = 0;
            }
            unint64_t v122 = &v121[8 * v117];
            *(int32x2_t *)unint64_t v122 = v114;
            unint64_t v90 = (int32x2_t *)(v122 + 8);
            uint64_t v124 = *v176;
            uint64_t v123 = (char *)v176[1];
            if (v123 != (char *)*v176)
            {
              do
              {
                uint64_t v125 = *((void *)v123 - 1);
                v123 -= 8;
                v109.i32[1] = HIDWORD(v125);
                *((void *)v122 - 1) = v125;
                v122 -= 8;
              }
              while (v123 != (char *)v124);
              uint64_t v123 = (char *)*v176;
            }
            *int v176 = (int32x2_t *)v122;
            v176[1] = v90;
            v176[2] = (int32x2_t *)&v121[8 * v120];
            if (v123) {
              operator delete(v123);
            }
          }
          else
          {
            *uint64_t v116 = v114;
            unint64_t v90 = v116 + 1;
          }
          v176[1] = v90;
          double v126 = v226[0];
          v109.i32[0] = LODWORD(v226[0]);
          *(void *)&double v127 = vmovl_u16(v109).u64[0];
          BOOL v128 = (BYTE4(v226[0]) & 0xFD) != 1;
          double v192 = v127;
          int v129 = *(_DWORD *)((unint64_t)&v192 | (4 * v128));
          if (BYTE4(v226[0]) - 3 <= 0xFFFFFFFD
            && (unsigned __int16)*(_DWORD *)((unint64_t)&v192 | (4 * v128)) == 0)
          {
            break;
          }
          if (BYTE4(v226[0]) - 3 >= 0xFFFFFFFE)
          {
            double v110 = *(double *)&v174;
            int32x2_t v191 = v174;
            if (*(_DWORD *)((unint64_t)&v191 | (4 * v128)) - 1 <= (unsigned __int16)v129) {
              break;
            }
            int v131 = 1;
          }
          else
          {
            int v131 = 0xFFFF;
          }
          double v189 = v127;
          *(_DWORD *)((unint64_t)&v189 | (4 * v128)) = v131 + v129;
          HIWORD(v190) = WORD2(v189);
          LOWORD(v190) = LOWORD(v189);
          int32x2_t v223 = (long long *)((*(void *)&v126 + 0x200000000) & 0x300000000 | v190);
          unint64_t v132 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v216, (__int16 *)&v223, v189, v110, v111, v112, v113);
          uint64_t v84 = v132;
          if (v132 >> 4 >= (unint64_t)v217 >> 4)
          {
            unint64_t v83 = 0;
          }
          else
          {
            double v19 = -1.79399301e-307;
            int8x8_t v77 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v216 + 16 * (v132 >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
            unint64_t v83 = (unsigned __int16)~v77.i16[0];
          }
          if (v132 == -1) {
            goto LABEL_147;
          }
        }
        int32x2_t v223 = (long long *)(LODWORD(v226[0]) | 0xFF00000000);
        int v133 = BYTE4(v226[0]) & 0xFD;
        if (BYTE4(v226[0]) - 1 < 2)
        {
          double v188 = v127;
          ++*(_DWORD *)((unint64_t)&v188 | (4 * (v133 == 0)));
          double v127 = v188;
        }
        HIWORD(v187) = WORD2(v127);
        LOWORD(v187) = LOWORD(v127);
        unint64_t v211 = v187 | ((unint64_t)(v133 != 0) << 32);
        uint64_t v134 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v215, (__int16 *)&v211, v127, v110, v111, v112, v113);
        int32x2_t v135 = *(int32x2_t *)(v215[1] + 16 * v134 + 8);
        uint64_t v137 = v176[1];
        unint64_t v136 = (unint64_t)v176[2];
        if ((unint64_t)v137 < v136)
        {
          *uint64_t v137 = v135;
          int v138 = v137 + 1;
          goto LABEL_130;
        }
        uint64_t v139 = v137 - *v176;
        if ((unint64_t)(v139 + 1) >> 61) {
          break;
        }
        uint64_t v140 = v136 - (void)*v176;
        uint64_t v141 = v140 >> 2;
        if (v140 >> 2 <= (unint64_t)(v139 + 1)) {
          uint64_t v141 = v139 + 1;
        }
        if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v142 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v142 = v141;
        }
        if (v142) {
          unint64_t v143 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v185, v142);
        }
        else {
          unint64_t v143 = 0;
        }
        float64x2_t v144 = (int32x2_t *)&v143[8 * v139];
        *float64x2_t v144 = v135;
        int v138 = v144 + 1;
        uint64_t v146 = *v176;
        int8x8_t v145 = (char *)v176[1];
        if (v145 != (char *)*v176)
        {
          do
          {
            int8x8_t v147 = *(int8x8_t *)(v145 - 8);
            v145 -= 8;
            int8x8_t v77 = v147;
            v144[-1] = (int32x2_t)v147;
            --v144;
          }
          while (v145 != (char *)v146);
          int8x8_t v145 = (char *)*v176;
        }
        *int v176 = v144;
        v176[1] = v138;
        v176[2] = (int32x2_t *)&v143[8 * v142];
        if (v145) {
          operator delete(v145);
        }
LABEL_130:
        v176[1] = v138;
        unint64_t v148 = (unint64_t)v176[2];
        if ((unint64_t)v138 < v148)
        {
          *int v138 = v78;
          unint64_t v90 = v138 + 1;
          goto LABEL_146;
        }
        uint64_t v149 = v138 - *v176;
        if ((unint64_t)(v149 + 1) >> 61) {
          break;
        }
        uint64_t v150 = v148 - (void)*v176;
        uint64_t v151 = v150 >> 2;
        if (v150 >> 2 <= (unint64_t)(v149 + 1)) {
          uint64_t v151 = v149 + 1;
        }
        if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v152 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v152 = v151;
        }
        if (v152) {
          int8x16_t v153 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v185, v152);
        }
        else {
          int8x16_t v153 = 0;
        }
        long long v154 = (int32x2_t *)&v153[8 * v149];
        *long long v154 = v78;
        unint64_t v90 = v154 + 1;
        uint64_t v156 = *v176;
        unint64_t v155 = (char *)v176[1];
        if (v155 != (char *)*v176)
        {
          do
          {
            int8x8_t v157 = *(int8x8_t *)(v155 - 8);
            v155 -= 8;
            int8x8_t v77 = v157;
            v154[-1] = (int32x2_t)v157;
            --v154;
          }
          while (v155 != (char *)v156);
          unint64_t v155 = (char *)*v176;
        }
        *int v176 = v154;
        v176[1] = v90;
        v176[2] = (int32x2_t *)&v153[8 * v152];
        if (v155) {
          operator delete(v155);
        }
LABEL_146:
        v176[1] = v90;
LABEL_147:
        unint64_t v158 = (unint64_t)((char *)v90 - (char *)*v89) >> 3;
        unint64_t v160 = v91[1];
        unint64_t v159 = (unint64_t)v91[2];
        if ((unint64_t)v160 >= v159)
        {
          unint64_t v162 = *v91;
          uint64_t v163 = (v160 - *v91) >> 2;
          unint64_t v164 = v163 + 1;
          if ((unint64_t)(v163 + 1) >> 62) {
            break;
          }
          uint64_t v165 = v159 - (void)v162;
          if (v165 >> 1 > v164) {
            unint64_t v164 = v165 >> 1;
          }
          if ((unint64_t)v165 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v166 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v166 = v164;
          }
          if (v166)
          {
            int v167 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v172 + 2), v166);
            unint64_t v162 = *v91;
            unint64_t v160 = v91[1];
          }
          else
          {
            int v167 = 0;
          }
          float64x2_t v168 = &v167[4 * v163];
          *(_DWORD *)float64x2_t v168 = v158;
          uint64_t v161 = v168 + 4;
          while (v160 != v162)
          {
            int v169 = *((_DWORD *)v160 - 1);
            v160 -= 4;
            *((_DWORD *)v168 - 1) = v169;
            v168 -= 4;
          }
          *unint64_t v91 = v168;
          v91[1] = v161;
          v91[2] = &v167[4 * v166];
          if (v162) {
            operator delete(v162);
          }
        }
        else
        {
          *(_DWORD *)unint64_t v160 = v158;
          uint64_t v161 = v160 + 4;
        }
        v91[1] = v161;
        if (!*((void *)&v217 + 1)) {
          goto LABEL_164;
        }
      }
LABEL_170:
      abort();
    }
LABEL_164:
    if (v219)
    {
      unint64_t v220 = v219;
      operator delete(v219);
    }
    if (v212)
    {
      int8x16_t v213 = v212;
      operator delete(v212);
    }
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)v215);
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v216);
  }
  return result;
}

uint64_t geom_marching_squares_with_default_options_2d(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, float64x2_t a6, float64x2_t a7)
{
  uint64_t v11 = (void *)geom::collection_to_vector<float>(a4);
  float32x2_t v12 = (char **)geom::collection_to_vector<float>(a5);
  v16[0] = a1;
  v16[1] = a2;
  return _ZN4geom23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS1_12placeholders4__phILi1EEERS5_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISK_Lh2EvE5valueENS1_9allocatorISP_EEEERNSM_IjNSQ_IjEEEE((uint64_t)v16, a3, v11, v12, a6, a7);
}

uint64_t _ZN4geom23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS1_12placeholders4__phILi1EEERS5_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISK_Lh2EvE5valueENS1_9allocatorISP_EEEERNSM_IjNSQ_IjEEEE(uint64_t result, unsigned int a2, void *a3, char **a4, float64x2_t a5, float64x2_t a6)
{
  a3[1] = *a3;
  a4[1] = *a4;
  float64x2_t v6 = vsubq_f64(a6, a5);
  if (sqrt(vaddvq_f64(vmulq_f64(v6, v6))) > 2.22044605e-16)
  {
    uint64_t v9 = result;
    double v191 = vpminq_f64(v6) / (double)a2;
    float64x2_t v194 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v191, 0);
    int32x2_t v184 = vmovn_s64(vcvtq_s64_f64(vrndpq_f64(vdivq_f64(v6, v194))));
    uint64_t v236 = 0;
    long long v234 = 0u;
    long long v235 = 0u;
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v234, 1uLL);
    memset(v233, 0, 40);
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(v233, 1uLL);
    unsigned __int8 v10 = vcgt_u32((uint32x2_t)v184, (uint32x2_t)vand_s8((int8x8_t)vdup_lane_s32(v184, 1), (int8x8_t)0xFFFF0000FFFFLL)).u8[0];
    int32x2_t v228 = v184;
    uint64_t v11 = *(unsigned int *)((unint64_t)&v228 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v10 & 1)));
    uint64_t v12 = v10 & 1;
    float64x2_t v230 = 0;
    long long v231 = 0;
    uint64_t v232 = 0;
    std::vector<double>::__vallocate[abi:nn180100](&v230, v11 + 1);
    unsigned __int8 v13 = v231;
    bzero(v231, 8 * (v11 + 1));
    int v14 = 0;
    long long v231 = &v13[v11 + 1];
    uint64_t v189 = v12;
    uint64_t v15 = (_DWORD *)((unint64_t)&v227 | (4 * v12));
    do
    {
      int8x8_t v227 = 0;
      _DWORD *v15 = v14;
      int8x8_t v16 = vand_s8(v227, (int8x8_t)0xFFFF0000FFFFLL);
      v17.i64[0] = v16.u32[0];
      v17.i64[1] = v16.u32[1];
      double v18 = (*(double (**)(void, __n128))v9)(*(void *)(v9 + 8), (__n128)vmlaq_f64(a5, v194, vcvtq_f64_u64(v17)));
      v230[(unsigned __int16)v14++] = v18;
    }
    while ((unsigned __int16)v14 <= (unsigned __int16)v11);
    unsigned int v187 = a3;
    float32x4_t v182 = a4;
    uint64_t v22 = v189;
    uint64_t v23 = v189 ^ 1;
    int32x2_t v226 = v184;
    float64x2_t v24 = v194;
    int v181 = *(_DWORD *)((unint64_t)&v226 | (4 * v23));
    if (v181)
    {
      unsigned int v25 = 0;
      float64x2_t v188 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v191, 0);
      double v180 = (_DWORD *)((unint64_t)&v224 | (4 * v23));
      do
      {
        int8x8_t v224 = 0;
        unsigned int v183 = v25 + 1;
        _DWORD *v180 = v25 + 1;
        int8x8_t v225 = v224;
        *(_DWORD *)((unint64_t)&v225 | (4 * v189)) = 0;
        int8x8_t v26 = vand_s8(v225, (int8x8_t)0xFFFF0000FFFFLL);
        v27.i64[0] = v26.u32[0];
        v27.i64[1] = v26.u32[1];
        double v28 = (*(double (**)(void, __n128))v9)(*(void *)(v9 + 8), (__n128)vmlaq_f64(a5, v24, vcvtq_f64_u64(v27)));
        double v29 = v28;
        if ((_WORD)v11)
        {
          uint64_t v30 = 0;
          unsigned int v186 = v25;
          LODWORD(v28) = v25;
          unsigned __int32 v185 = vmovl_u16(*(uint16x4_t *)&v28).u32[0];
          do
          {
            if (v22)
            {
              int8x8_t v31 = vand_s8((int8x8_t)__PAIR64__(v30, v185), (int8x8_t)0xFFFF0000FFFFLL);
              v32.i64[0] = v31.u32[0];
              v32.i64[1] = v31.u32[1];
              float64x2_t v33 = vmlaq_f64(a5, v194, vcvtq_f64_u64(v32));
              unint64_t v203 = __PAIR64__(v30, v185);
              unint64_t v222 = __PAIR64__(v30, v185);
              uint64_t v34 = *(unsigned __int16 *)((unint64_t)&v222 | (4 * v22));
              int8x16_t v35 = &v230[v34];
              double v36 = v29;
            }
            else
            {
              int8x8_t v37 = vand_s8((int8x8_t)__PAIR64__(v186, v30), (int8x8_t)0xFFFF0000FFFFLL);
              v38.i64[0] = v37.u32[0];
              v38.i64[1] = v37.u32[1];
              float64x2_t v33 = vmlaq_f64(a5, v194, vcvtq_f64_u64(v38));
              unint64_t v203 = __PAIR64__(v186, v30);
              unint64_t v223 = __PAIR64__(v186, v30);
              uint64_t v34 = *(unsigned __int16 *)((unint64_t)&v223 | (4 * v22));
              int8x16_t v35 = &v230[v34];
              double v36 = v230[v30 + 1];
            }
            float64_t v196 = v36;
            float64_t v199 = *v35;
            v20.f64[0] = (*(double (**)(void, __n128))v9)(*(void *)(v9 + 8), (__n128)vaddq_f64(v188, v33));
            double v39 = v29;
            if (v22) {
              double v39 = v230[WORD2(v203) + 1];
            }
            v230[v34] = v29;
            float64_t v190 = v20.f64[0];
            v20.f64[1] = v39;
            v40.f64[0] = v199;
            v40.f64[1] = v196;
            float64x2_t v200 = v40;
            float64x2_t v192 = v20;
            int8x16_t v41 = (int8x16_t)vmovl_u16((uint16x4_t)vand_s8((int8x8_t)vmovn_s32(vuzp1q_s32((int32x4_t)vcgtzq_f64(v40), (int32x4_t)vcgtzq_f64(v20))), (int8x8_t)0x8000400020001));
            int8x8_t v42 = (int8x8_t)vextq_s8(v41, v41, 8uLL).u64[0];
            *(int8x8_t *)v41.i8 = vorr_s8(*(int8x8_t *)v41.i8, v42);
            __int8 v221 = v41.i8[4];
            __int8 v220 = v41.i8[0];
                                   + (((unint64_t)(vaddvq_f64(vaddq_f64(v40, v20)) * 0.25 > 0.0) << 6) | (4 * (v41.i8[0] | v41.i8[4]))));
            unint64_t v43 = vmovl_u8(*(uint8x8_t *)v41.i8).u64[0];
            unint64_t v197 = v43;
            if (~(unsigned __int16)v43)
            {
              char v44 = BYTE2(v43);
              LOBYTE(v229) = v43;
              char v239 = BYTE2(v43);
              v237.n128_u16[1] = WORD2(v203);
              v237.n128_u16[0] = v203;
              v237.n128_u8[4] = v43;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v234, (unsigned __int16 *)&v237, &v239, (uint64_t)&v240, *(double *)&v203, *(double *)&v42, v40.f64[0], v20.f64[0], v21);
              WORD1(v243[0]) = WORD2(v203);
              uint64_t v22 = v189;
              LOWORD(v243[0]) = v203;
              BYTE4(v243[0]) = v44;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v234, (unsigned __int16 *)v243, (char *)&v229, (uint64_t)&v237, v45, v46, v47, v48, v49);
              unint64_t v43 = v197;
            }
            if (~WORD2(v43))
            {
              char v50 = BYTE6(v43);
              LOBYTE(v229) = BYTE4(v43);
              char v239 = BYTE6(v43);
              v237.n128_u16[1] = WORD2(v203);
              v237.n128_u16[0] = v203;
              v237.n128_u8[4] = BYTE4(v43);
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v234, (unsigned __int16 *)&v237, &v239, (uint64_t)&v240, *(double *)&v203, *(double *)&v42, v40.f64[0], v20.f64[0], v21);
              WORD1(v243[0]) = WORD2(v203);
              uint64_t v22 = v189;
              LOWORD(v243[0]) = v203;
              BYTE4(v243[0]) = v50;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_((uint64_t *)&v234, (unsigned __int16 *)v243, (char *)&v229, (uint64_t)&v237, v51, v52, v53, v54, v55);
              unint64_t v43 = v197;
            }
            unsigned __int8 v56 = 0;
            double v19 = v190;
            double v29 = v190;
            do
            {
              unint64_t v219 = v43;
              __int16 v57 = *(_WORD *)((unint64_t)&v219 & 0xFFFFFFFFFFFFFFF9 | (2 * (v56 & 3)));
              if ((_BYTE)v57 == 0xFF) {
                break;
              }
              char v58 = v57 & 0xFD;
              int8x8_t v59 = (int8x8_t)v203;
              if ((v57 - 1) <= 1u)
              {
                uint16x4_t v60 = (_DWORD *)((unint64_t)&v218 | (4 * ((v57 & 0xFD) == 0)));
                unint64_t v218 = v203;
                ++*v60;
                int8x8_t v59 = (int8x8_t)v218;
              }
              HIWORD(v217) = v59.i16[2];
              LOWORD(v217) = v59.i16[0];
              int8x8_t v61 = vand_s8(v59, (int8x8_t)0xFFFF0000FFFFLL);
              int v62 = v57 & 0xFE;
              v216[0] = v200;
              v216[1] = v192;
              double v63 = *((double *)v216 + (((_BYTE)v57 + 1) & 3));
              v215[0] = v200;
              v215[1] = v192;
              uint64_t v64 = v57 & 3;
              if (v62 == 2) {
                double v65 = v63;
              }
              else {
                double v65 = *((double *)v215 + v64);
              }
              if (v62 == 2) {
                double v63 = *((double *)v215 + v64);
              }
              double v66 = v65 / (v65 - v63);
              BOOL v67 = v58 != 0;
              LODWORD(v243[0]) = v217;
              HIDWORD(v243[0]) = v67;
              v68.i64[0] = v61.u32[0];
              v68.i64[1] = v61.u32[1];
              float64x2_t v214 = vmlaq_f64(a5, v194, vcvtq_f64_u64(v68));
              *(double *)((unint64_t)&v214 | (8 * v67)) = *(double *)((unint64_t)&v214 | (8 * v67))
                                                               + v66 * v191;
              __n128 v237 = (__n128)v214;
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS4_(v233, (unsigned __int16 *)v243, &v237, (uint64_t)&v240, v214.f64[0], v66, v191, v194.f64[0], v21);
              unsigned int v69 = v56++;
              unint64_t v43 = v197;
            }
            while (v69 < 3);
            ++v30;
          }
          while (v30 != v11);
        }
        v230[v11] = v29;
        unsigned int v25 = v183;
        float64x2_t v24 = v194;
      }
      while ((unsigned __int16)v183 < (unsigned __int16)v181);
    }
    __n128 v237 = 0uLL;
    unint64_t v238 = 0;
    int8x16_t v240 = &v234;
    if ((unint64_t)v235 >= 0x10)
    {
      uint64_t v70 = 0;
      unint64_t v71 = (unint64_t)v235 >> 4;
      v72.i32[1] = -2143281136;
      double v19 = 4.74803907e-38;
      while (1)
      {
        *(int8x8_t *)&v24.f64[0] = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v234 + v70)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
        if (LOWORD(v24.f64[0]) != 0xFFFF) {
          break;
        }
        v70 += 16;
        if (!--v71) {
          goto LABEL_60;
        }
      }
      uint64_t v73 = __clz(__rbit64((unsigned __int16)~LOWORD(v24.f64[0]))) + v70;
      unint64_t v241 = (unsigned __int16)~LOWORD(v24.f64[0]);
      uint64_t v242 = v73;
      if (v73 != -1)
      {
        BOOL v74 = 0;
        do
        {
          unsigned int v75 = (uint64_t *)(*((void *)v240 + 1) + 12 * v73);
          uint64_t v76 = *v75;
          v72.i32[0] = *v75;
          BOOL v77 = (HIDWORD(*v75) & 0xFD) != 1;
          unsigned int v78 = BYTE4(*v75) - 3;
          unint64_t v213 = vmovl_u16(v72).u64[0];
          int v79 = *(_DWORD *)((unint64_t)&v213 | (4 * v77));
          BOOL v80 = v78 <= 0xFFFFFFFD && (unsigned __int16)*(_DWORD *)((unint64_t)&v213 | (4 * v77)) == 0;
          if (v80
            || v78 >= 0xFFFFFFFE
            && (int32x2_t v212 = v184, *(_DWORD *)((unint64_t)&v212 | (4 * v77)) - 1 <= (unsigned __int16)v79))
          {
            if (v74 >= v238)
            {
              uint64_t v81 = (uint64_t)&v74[-v237.n128_u64[0]] >> 3;
              if ((unint64_t)(v81 + 1) >> 61) {
LABEL_169:
              }
                abort();
              unint64_t v82 = (uint64_t)&v238[-v237.n128_u64[0]] >> 2;
              if (v82 <= v81 + 1) {
                unint64_t v82 = v81 + 1;
              }
              if ((unint64_t)&v238[-v237.n128_u64[0]] >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v83 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v83 = v82;
              }
              if (v83)
              {
                uint64_t v84 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v238, v83);
                uint64_t v76 = *v75;
              }
              else
              {
                uint64_t v84 = 0;
              }
              uint64_t v85 = &v84[8 * v81];
              *(void *)uint64_t v85 = v76;
              BOOL v74 = v85 + 8;
              int64x2_t v86 = (char *)v237.n128_u64[1];
              unint64_t v87 = v237.n128_u64[0];
              if (v237.n128_u64[1] != v237.n128_u64[0])
              {
                do
                {
                  uint64_t v88 = *((void *)v86 - 1);
                  v86 -= 8;
                  *((void *)v85 - 1) = v88;
                  v85 -= 8;
                }
                while (v86 != (char *)v87);
                int64x2_t v86 = (char *)v237.n128_u64[0];
              }
              v237.n128_u64[0] = (unint64_t)v85;
              v237.n128_u64[1] = (unint64_t)v74;
              unint64_t v238 = &v84[8 * v83];
              if (v86) {
                operator delete(v86);
              }
            }
            else
            {
              *(void *)BOOL v74 = v76;
              v74 += 8;
            }
            v237.n128_u64[1] = (unint64_t)v74;
          }
          _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v240);
          uint64_t v73 = v242;
        }
        while (v242 != -1);
      }
    }
LABEL_60:
    if (*((void *)&v235 + 1))
    {
      uint64_t v198 = (uint64_t)(a3 + 2);
      int64x2_t v89 = vdupq_n_s64(0x7FF0000000000000uLL);
      int64x2_t v195 = v89;
      do
      {
        uint64_t v90 = v234;
        if ((unint64_t)v235 >= 0x10)
        {
          uint64_t v92 = 0;
          unint64_t v91 = (unint64_t)v235 >> 4;
          unint64_t v93 = (unint64_t)v235 >> 4;
          while (1)
          {
            double v19 = -1.79399301e-307;
            *(int8x8_t *)v89.i8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v234 + v92)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
            unint64_t v94 = (unsigned __int16)~v89.i16[0];
            if (v89.i16[0] != -1) {
              break;
            }
            v92 += 16;
            if (!--v93) {
              goto LABEL_67;
            }
          }
          uint64_t v95 = __clz(__rbit64(v94)) + v92;
        }
        else
        {
          unint64_t v91 = 0;
LABEL_67:
          unint64_t v94 = 0;
          uint64_t v95 = -1;
        }
        double v96 = (__int16 *)v237.n128_u64[1];
        unint64_t v97 = v237.n128_u64[0];
        while (v96 != (__int16 *)v97)
        {
          v96 -= 4;
          unint64_t v98 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v234, v96, *(double *)v89.i64, v19, v24.f64[0], v20.f64[0], v21);
          if (v98 >> 4 >= v91)
          {
            unint64_t v99 = 0;
          }
          else
          {
            double v19 = -1.79399301e-307;
            *(int8x8_t *)v89.i8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v90 + 16 * (v98 >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
            unint64_t v99 = (unsigned __int16)~v89.i16[0];
          }
          v237.n128_u64[1] = (unint64_t)v96;
          if (v98 != -1)
          {
            uint64_t v95 = v98;
            unint64_t v94 = v99;
            goto LABEL_78;
          }
        }
        if (v95 == -1)
        {
          int8x8_t v100 = v187;
          uint64_t v101 = (int64x2_t *)v187[1];
        }
        else
        {
          while (1)
          {
LABEL_78:
            double v102 = (unsigned __int16 *)(*((void *)&v234 + 1) + 12 * v95);
            unsigned int v103 = *v102;
            unsigned int v104 = v102[1];
            int v105 = *((unsigned __int8 *)v102 + 4);
            HIDWORD(v243[0]) = 0;
            WORD1(v243[0]) = v104;
            LOWORD(v243[0]) = v103;
            int v106 = *((unsigned __int8 *)v102 + 8);
            BYTE4(v243[0]) = *((unsigned char *)v102 + 8);
            int8x16_t v240 = &v234;
            unint64_t v241 = v94;
            uint64_t v242 = v95;
            _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(&v240);
            _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE15remove_internalEm((uint64_t)&v234, v95);
            uint64_t v112 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v234, (__int16 *)v243, v107, v108, v109, v110, v111);
            if (v112 != -1) {
              _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE15remove_internalEm((uint64_t)&v234, v112);
            }
            double v117 = COERCE_DOUBLE(__PAIR64__(v104, v103));
            unsigned int v118 = v105 & 0xFFFFFFFD;
            if ((v105 - 1) <= 1)
            {
              *(double *)&unint64_t v211 = COERCE_DOUBLE(__PAIR64__(v104, v103));
              ++*(_DWORD *)((unint64_t)&v211 | (4 * (v118 == 0)));
              double v117 = *(double *)&v211;
            }
            int8x8_t v100 = v187;
            HIWORD(v210) = WORD2(v117);
            LOWORD(v210) = LOWORD(v117);
            int8x16_t v240 = (long long *)(v210 | ((unint64_t)(v118 != 0) << 32));
            uint64_t S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v233, (__int16 *)&v240, v117, v113, v114, v115, v116);
            int64x2_t v124 = *(int64x2_t *)(v233[1]
                                + 32 * S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP
                                + 16);
            double v126 = (int64x2_t *)v187[1];
            unint64_t v125 = v187[2];
            if ((unint64_t)v126 >= v125)
            {
              uint64_t v127 = ((uint64_t)v126->i64 - *v187) >> 4;
              if ((unint64_t)(v127 + 1) >> 60) {
                goto LABEL_169;
              }
              uint64_t v128 = v125 - *v187;
              uint64_t v129 = v128 >> 3;
              if (v128 >> 3 <= (unint64_t)(v127 + 1)) {
                uint64_t v129 = v127 + 1;
              }
              if ((unint64_t)v128 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v130 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v130 = v129;
              }
              if (v130)
              {
                int64x2_t v201 = *(int64x2_t *)(v233[1]
                                    + 32
                                    * S4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP
                                    + 16);
                int v131 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v198, v130);
                int64x2_t v124 = v201;
              }
              else
              {
                int v131 = 0;
              }
              unint64_t v132 = &v131[16 * v127];
              *(int64x2_t *)unint64_t v132 = v124;
              uint64_t v101 = (int64x2_t *)(v132 + 16);
              uint64_t v134 = (char *)*v187;
              int v133 = (char *)v187[1];
              if (v133 != (char *)*v187)
              {
                do
                {
                  long long v135 = *((_OWORD *)v133 - 1);
                  v133 -= 16;
                  v124.i32[1] = DWORD1(v135);
                  *((_OWORD *)v132 - 1) = v135;
                  v132 -= 16;
                }
                while (v133 != v134);
                int v133 = (char *)*v187;
              }
              void *v187 = v132;
              v187[1] = v101;
              v187[2] = &v131[16 * v130];
              if (v133) {
                operator delete(v133);
              }
            }
            else
            {
              *double v126 = v124;
              uint64_t v101 = v126 + 1;
            }
            v187[1] = v101;
            uint64_t v136 = v243[0];
            v124.i32[0] = v243[0];
            v124.i64[0] = vmovl_u16(*(uint16x4_t *)v124.i8).u64[0];
            BOOL v137 = (BYTE4(v243[0]) & 0xFD) != 1;
            unsigned int v138 = BYTE4(v243[0]) - 3;
            uint64_t v209 = v124.i64[0];
            int v139 = *(_DWORD *)((unint64_t)&v209 | (4 * v137));
            if (v138 <= 0xFFFFFFFD && (unsigned __int16)*(_DWORD *)((unint64_t)&v209 | (4 * v137)) == 0) {
              break;
            }
            if (v138 >= 0xFFFFFFFE)
            {
              double v120 = *(double *)&v184;
              int32x2_t v208 = v184;
              if (*(_DWORD *)((unint64_t)&v208 | (4 * v137)) - 1 <= (unsigned __int16)v139) {
                break;
              }
              int v141 = 1;
            }
            else
            {
              int v141 = 0xFFFF;
            }
            double v206 = *(double *)v124.i64;
            *(_DWORD *)((unint64_t)&v206 | (4 * v137)) = v141 + v139;
            HIWORD(v207) = WORD2(v206);
            LOWORD(v207) = LOWORD(v206);
            int8x16_t v240 = (long long *)((v136 + 0x200000000) & 0x300000000 | v207);
            unint64_t v142 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(&v234, (__int16 *)&v240, v206, v120, v121, v122, v123);
            uint64_t v95 = v142;
            if (v142 >> 4 >= (unint64_t)v235 >> 4)
            {
              unint64_t v94 = 0;
            }
            else
            {
              double v19 = -1.79399301e-307;
              *(int8x8_t *)v89.i8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v234 + 16 * (v142 >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
              unint64_t v94 = (unsigned __int16)~v89.i16[0];
            }
            if (v142 == -1) {
              goto LABEL_146;
            }
          }
          int8x16_t v240 = (long long *)(LODWORD(v243[0]) | 0xFF00000000);
          unsigned int v143 = v106 & 0xFFFFFFFD;
          if ((v106 - 1) < 2)
          {
            uint64_t v205 = v124.i64[0];
            ++*(_DWORD *)((unint64_t)&v205 | (4 * (v143 == 0)));
            v124.i64[0] = v205;
          }
          HIWORD(v204) = v124.i16[2];
          LOWORD(v204) = v124.i16[0];
          unint64_t v229 = v204 | ((unint64_t)(v143 != 0) << 32);
          uint64_t v144 = _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(v233, (__int16 *)&v229, *(double *)v124.i64, v120, v121, v122, v123);
          int64x2_t v145 = *(int64x2_t *)(v233[1] + 32 * v144 + 16);
          int8x8_t v147 = (int64x2_t *)v187[1];
          unint64_t v146 = v187[2];
          if ((unint64_t)v147 >= v146)
          {
            uint64_t v149 = ((uint64_t)v147->i64 - *v187) >> 4;
            if ((unint64_t)(v149 + 1) >> 60) {
              goto LABEL_169;
            }
            uint64_t v150 = v146 - *v187;
            uint64_t v151 = v150 >> 3;
            if (v150 >> 3 <= (unint64_t)(v149 + 1)) {
              uint64_t v151 = v149 + 1;
            }
            if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v152 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v152 = v151;
            }
            if (v152)
            {
              int64x2_t v202 = *(int64x2_t *)(v233[1] + 32 * v144 + 16);
              int8x16_t v153 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v198, v152);
              int64x2_t v145 = v202;
            }
            else
            {
              int8x16_t v153 = 0;
            }
            long long v154 = &v153[16 * v149];
            *(int64x2_t *)long long v154 = v145;
            unint64_t v148 = (int64x2_t *)(v154 + 16);
            uint64_t v156 = (char *)*v187;
            unint64_t v155 = (char *)v187[1];
            if (v155 != (char *)*v187)
            {
              do
              {
                long long v157 = *((_OWORD *)v155 - 1);
                v155 -= 16;
                *((_OWORD *)v154 - 1) = v157;
                v154 -= 16;
              }
              while (v155 != v156);
              unint64_t v155 = (char *)*v187;
            }
            void *v187 = v154;
            v187[1] = v148;
            v187[2] = &v153[16 * v152];
            if (v155) {
              operator delete(v155);
            }
          }
          else
          {
            *int8x8_t v147 = v145;
            unint64_t v148 = v147 + 1;
          }
          v187[1] = v148;
          unint64_t v158 = v187[2];
          if ((unint64_t)v148 >= v158)
          {
            uint64_t v159 = ((uint64_t)v148->i64 - *v187) >> 4;
            if ((unint64_t)(v159 + 1) >> 60) {
              goto LABEL_169;
            }
            uint64_t v160 = v158 - *v187;
            uint64_t v161 = v160 >> 3;
            if (v160 >> 3 <= (unint64_t)(v159 + 1)) {
              uint64_t v161 = v159 + 1;
            }
            if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v162 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v162 = v161;
            }
            if (v162) {
              uint64_t v163 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v198, v162);
            }
            else {
              uint64_t v163 = 0;
            }
            unint64_t v164 = (int64x2_t *)&v163[16 * v159];
            v89.i64[0] = v195.i64[0];
            *unint64_t v164 = v195;
            uint64_t v101 = v164 + 1;
            unint64_t v166 = (char *)*v187;
            uint64_t v165 = (char *)v187[1];
            if (v165 != (char *)*v187)
            {
              do
              {
                int64x2_t v167 = *((int64x2_t *)v165 - 1);
                v165 -= 16;
                v89.i64[0] = v167.i64[0];
                v164[-1] = v167;
                --v164;
              }
              while (v165 != v166);
              uint64_t v165 = (char *)*v187;
            }
            void *v187 = v164;
            v187[1] = v101;
            v187[2] = &v163[16 * v162];
            if (v165) {
              operator delete(v165);
            }
          }
          else
          {
            v89.i64[0] = v195.i64[0];
            *unint64_t v148 = v195;
            uint64_t v101 = v148 + 1;
          }
          v187[1] = v101;
        }
LABEL_146:
        unint64_t v168 = ((unint64_t)v101 - *v100) >> 4;
        uint64_t v170 = v182[1];
        unint64_t v169 = (unint64_t)v182[2];
        if ((unint64_t)v170 >= v169)
        {
          uint64_t v172 = *v182;
          uint64_t v173 = (v170 - *v182) >> 2;
          unint64_t v174 = v173 + 1;
          if ((unint64_t)(v173 + 1) >> 62) {
            goto LABEL_169;
          }
          uint64_t v175 = v169 - (void)v172;
          if (v175 >> 1 > v174) {
            unint64_t v174 = v175 >> 1;
          }
          if ((unint64_t)v175 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v176 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v176 = v174;
          }
          if (v176)
          {
            __int32 v177 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v182 + 2), v176);
            uint64_t v172 = *v182;
            uint64_t v170 = v182[1];
          }
          else
          {
            __int32 v177 = 0;
          }
          uint64_t v178 = &v177[4 * v173];
          *(_DWORD *)uint64_t v178 = v168;
          int v171 = v178 + 4;
          while (v170 != v172)
          {
            int v179 = *((_DWORD *)v170 - 1);
            v170 -= 4;
            *((_DWORD *)v178 - 1) = v179;
            v178 -= 4;
          }
          *float32x4_t v182 = v178;
          v182[1] = v171;
          v182[2] = &v177[4 * v176];
          if (v172) {
            operator delete(v172);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v170 = v168;
          int v171 = v170 + 4;
        }
        v182[1] = v171;
      }
      while (*((void *)&v235 + 1));
    }
    if (v237.n128_u64[0])
    {
      v237.n128_u64[1] = v237.n128_u64[0];
      operator delete((void *)v237.n128_u64[0]);
    }
    if (v230)
    {
      long long v231 = v230;
      operator delete(v230);
    }
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)v233);
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v234);
  }
  return result;
}

uint64_t geom_marching_squares_with_options_2f(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, float32x2_t a6, float32x2_t a7)
{
  unsigned __int8 v13 = (int32x2_t **)geom::collection_to_vector<float>(a4);
  int v14 = (char **)geom::collection_to_vector<float>(a5);
  v16[0] = a1;
  v16[1] = a2;
  return _ZN4geom23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS1_12placeholders4__phILi1EEERS5_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISK_Lh2EvE5valueENS1_9allocatorISP_EEEERNSM_IjNSQ_IjEEEE((uint64_t)v16, a3, v13, v14, a6, a7);
}

uint64_t geom_marching_squares_with_options_2d(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, float64x2_t a6, float64x2_t a7)
{
  uint64_t v11 = (void *)geom::collection_to_vector<float>(a4);
  uint64_t v12 = (char **)geom::collection_to_vector<float>(a5);
  v16[0] = a1;
  v16[1] = a2;
  return _ZN4geom23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS1_12placeholders4__phILi1EEERS5_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS1_6vectorINS_11vector_typeISK_Lh2EvE5valueENS1_9allocatorISP_EEEERNSM_IjNSQ_IjEEEE((uint64_t)v16, a3, v11, v12, a6, a7);
}

void *_ZNKSt3__18functionIFfDv2_fEEclES1_(uint64_t a1, double a2)
{
  double v5 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (void *)(*(uint64_t (**)(uint64_t, double *))(*(void *)v2 + 48))(v2, &v5);
  }
  double v4 = std::__throw_bad_function_call[abi:nn180100]();
  return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v4);
}

void *_ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(void *result)
{
  unint64_t v1 = result[2];
  unint64_t v2 = v1 >> 4;
  uint64_t v3 = (void *)*result;
  if (v1 >> 4 >= *(void *)(*result + 16) >> 4)
  {
LABEL_8:
    uint64_t v5 = -1;
    goto LABEL_9;
  }
  unint64_t v4 = __clz(__rbit64(result[1] & (-2 << (v1 & 0xF))));
  if (v4 >= 0x40)
  {
    uint64_t v6 = 16 * v2;
    unint64_t v7 = v2 + 1;
    while (v7 < v3[2] >> 4)
    {
      unint64_t v8 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*v3 + v6 + 16)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
      result[1] = v8;
      unint64_t v9 = __clz(__rbit64(v8));
      v6 += 16;
      ++v7;
      if (v9 <= 0x3F)
      {
        uint64_t v5 = v9 + v6;
        goto LABEL_9;
      }
    }
    goto LABEL_8;
  }
  uint64_t v5 = v4 + (v1 & 0xFFFFFFFFFFFFFFF0);
LABEL_9:
  result[2] = v5;
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    free(v2);
    *(void *)a1 = 0;
  }
  uint64_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  return a1;
}

void *_ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(void *result, unint64_t a2)
{
  unint64_t v2 = result;
  result[4] = 0;
  if (a2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = a2;
  }
  unint64_t v4 = 151 * v3;
  unint64_t v5 = ((unint64_t)(151 * v3) >> 7) + 15;
  *float result = 0;
  result[1] = 0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) == 0) {
    goto LABEL_18;
  }
  if ((((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0) <= 0x40) {
    size_t v6 = 64;
  }
  else {
    size_t v6 = ((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0;
  }
  *float result = malloc_type_aligned_alloc(0x40uLL, v6, 0x85081AA1uLL);
  if (v4 >= 0x80)
  {
    uint64_t v7 = 0;
    *(void *)&long long v8 = -1;
    *((void *)&v8 + 1) = -1;
    do
      *(_OWORD *)(*v2 + 16 * v7++) = v8;
    while (v5 >> 4 != v7);
  }
  size_t v9 = ((12 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0) <= 0x40 ? 64 : (12 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0;
  float result = malloc_type_aligned_alloc(0x40uLL, v9, 0x3A3CE064uLL);
  v2[1] = result;
  if (v2[2])
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = v2[1] + v10;
      *(void *)uint64_t v12 = 0;
      *(unsigned char *)(v12 + 8) = 0;
      ++v11;
      unint64_t v13 = v2[2];
      v10 += 12;
    }
    while (v11 < v13);
  }
  else
  {
LABEL_18:
    unint64_t v13 = 0;
  }
  v2[3] = 0;
  v2[4] = v13;
  return result;
}

void *_ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(void *result, unint64_t a2)
{
  unint64_t v2 = result;
  result[4] = 0;
  if (a2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = a2;
  }
  unint64_t v4 = 151 * v3;
  unint64_t v5 = ((unint64_t)(151 * v3) >> 7) + 15;
  *float result = 0;
  result[1] = 0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) == 0) {
    goto LABEL_18;
  }
  if ((((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0) <= 0x40) {
    size_t v6 = 64;
  }
  else {
    size_t v6 = ((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0;
  }
  *float result = malloc_type_aligned_alloc(0x40uLL, v6, 0x85081AA1uLL);
  if (v4 >= 0x80)
  {
    uint64_t v7 = 0;
    *(void *)&long long v8 = -1;
    *((void *)&v8 + 1) = -1;
    do
      *(_OWORD *)(*v2 + 16 * v7++) = v8;
    while (v5 >> 4 != v7);
  }
  size_t v9 = ((16 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0) <= 0x40 ? 64 : (16 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0;
  float result = malloc_type_aligned_alloc(0x40uLL, v9, 0x3A3CE064uLL);
  v2[1] = result;
  if (v2[2])
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      uint64_t v12 = (void *)(v2[1] + v10);
      *uint64_t v12 = 0;
      v12[1] = 0;
      ++v11;
      unint64_t v13 = v2[2];
      v10 += 16;
    }
    while (v11 < v13);
  }
  else
  {
LABEL_18:
    unint64_t v13 = 0;
  }
  v2[3] = 0;
  v2[4] = v13;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    unint64_t result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addISR_EEmRKSP_SC_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    }
    char v14 = 1;
  }
  else
  {
    uint64_t v13 = 0;
    char v14 = 0;
    unint64_t result = -1;
  }
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v13;
  *(void *)(a4 + 16) = result;
  *(unsigned char *)(a4 + 24) = v14;
  return result;
}

uint64_t _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(void *a1, __int16 *a2, double a3, double a4, double a5, double a6, int8x8_t a7)
{
  unint64_t v7 = a1[2];
  if (v7 < 0x10) {
    return -1;
  }
  unint64_t v8 = v7 >> 4;
  unint64_t v9 = ((unsigned __int16)a2[1]
      + ((unint64_t)(unsigned __int16)*a2 << 6)
      + ((unint64_t)(unsigned __int16)*a2 >> 2)
      - 0x61C8864680B583E9) ^ (unsigned __int16)*a2;
  uint64_t v10 = *((unsigned __int8 *)a2 + 4);
  uint64_t v11 = v10 + (v9 << 6);
  unint64_t v12 = ((v11 + (v9 >> 2) - 0x61C8864680B583E9) ^ v9) % v8;
  int8x16_t v13 = vdupq_n_s8(((v11 + (v9 >> 2) + 23) ^ v9) & 0x7F);
  a7.i16[0] = *a2;
  a7.i16[2] = a2[1];
  v14.i64[0] = -1;
  v14.i64[1] = -1;
  int32x2_t v15 = (int32x2_t)vand_s8(a7, (int8x8_t)0xFFFF0000FFFFLL);
  unint64_t v16 = v12;
  while (1)
  {
    int8x16_t v17 = *(int8x16_t *)(*a1 + 16 * v16);
    unint64_t v18 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v13, v17), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    unint64_t v19 = __clz(__rbit64(v18));
    if (v19 <= 0x3F) {
      break;
    }
LABEL_9:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v17, v14), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v16 + 1 == v8) {
      unint64_t v16 = 0;
    }
    else {
      ++v16;
    }
    uint64_t v21 = -1;
    if (v16 == v12) {
      return v21;
    }
  }
  uint64_t v20 = 16 * v16;
  while (1)
  {
    uint64_t v21 = v19 + v20;
    uint64_t v22 = (unsigned __int16 *)(a1[1] + 12 * (v19 + v20));
    v23.i32[0] = *v22;
    v23.i32[1] = v22[1];
    int16x4_t v24 = (int16x4_t)vceq_s32(v23, v15);
    if ((vminv_u16((uint16x4_t)vuzp1_s16(v24, v24)) & 0x8000) != 0 && *((unsigned __int8 *)v22 + 4) == v10) {
      return v21;
    }
    if (v19 <= 0x3E)
    {
      unint64_t v19 = __clz(__rbit64((-2 << v19) & v18));
      if (v19 < 0x40) {
        continue;
      }
    }
    goto LABEL_9;
  }
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addISR_EEmRKSP_SC_(uint64_t *a1, unsigned __int16 *a2, char a3)
{
  if (!a1[4]) {
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv((uint64_t)a1);
  }
  unint64_t v6 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 4);
  unint64_t v8 = (unint64_t)a1[2] >> 4;
  unint64_t v9 = ((v7 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6) % v8;
  uint64_t v10 = *a1;
  unint64_t v11 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v9)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
  if (v11 >= 0x40)
  {
    do
    {
      if (v9 + 1 == v8) {
        unint64_t v9 = 0;
      }
      else {
        ++v9;
      }
      unint64_t v11 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v11 > 0x3F);
  }
  uint64_t v12 = v10 + 16 * v9;
  char v13 = ((v7 + ((_BYTE)v6 << 6) + (v6 >> 2) + 23) ^ v6) & 0x7F;
  BOOL v14 = *(unsigned __int8 *)(v12 + v11) == 255;
  *(unsigned char *)(v12 + v11) = v13;
  unint64_t result = v11 + 16 * v9;
  uint64_t v16 = a1[1] + 12 * result;
  *(void *)uint64_t v16 = *(void *)a2;
  *(unsigned char *)(v16 + 8) = a3;
  uint64_t v17 = a1[4] - v14;
  ++a1[3];
  a1[4] = v17;
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv(uint64_t result)
{
  unint64_t v2 = *(void *)(result + 16);
  unint64_t v1 = *(void *)(result + 24);
  unint64_t v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2) {
      unint64_t v1 = 150 * v1 / 0x64;
    }
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm((long long *)result, v1);
  }
  if (!*(void *)(result + 32)) {
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm((long long *)result, v1);
  }
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm(long long *a1, unint64_t a2)
{
  if (a2 <= 1) {
    a2 = 1;
  }
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v20, a2);
  v18[0] = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= 0x10)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 4;
    __n128 v7 = (__n128)xmmword_236F170B0;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v5)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v6) {
        goto LABEL_10;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    v18[1] = (unsigned __int16)~v8;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      uint64_t v10 = *(void *)(v18[0] + 8) + 12 * v9;
      uint64_t v16 = *(void *)v10;
      int v17 = *(_DWORD *)(v10 + 8);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addISR_EEmRKSP_SC_(&v20, &v16, v17, v7, v3);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v18);
    }
  }
LABEL_10:
  if (&v20 != a1)
  {
    long long v11 = v21;
    long long v12 = *a1;
    long long v13 = a1[1];
    *a1 = v20;
    a1[1] = v11;
    long long v20 = v12;
    long long v21 = v13;
    uint64_t v14 = *((void *)a1 + 4);
    *((void *)a1 + 4) = v22;
    uint64_t v22 = v14;
  }
  return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v20);
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKS4_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    unint64_t result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addIS4_EEmRKSP_SC_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    }
    char v14 = 1;
  }
  else
  {
    uint64_t v13 = 0;
    char v14 = 0;
    unint64_t result = -1;
  }
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v13;
  *(void *)(a4 + 16) = result;
  *(unsigned char *)(a4 + 24) = v14;
  return result;
}

uint64_t _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(void *a1, __int16 *a2, double a3, double a4, double a5, double a6, int8x8_t a7)
{
  unint64_t v7 = a1[2];
  if (v7 < 0x10) {
    return -1;
  }
  unint64_t v8 = v7 >> 4;
  unint64_t v9 = (unsigned __int16)*a2;
  uint64_t v10 = (unsigned __int16)a2[1];
  uint64_t v11 = *((unsigned __int8 *)a2 + 4);
  unint64_t v12 = (v11 | (2 * ((v10 + (v9 << 6) + (v9 >> 2) + 0x1E3779B97F4A7C17) ^ v9))) % v8;
  int8x16_t v13 = vdupq_n_s8((v11 | (2 * ((v10 + (v9 >> 2) + 23) ^ v9))) & 0x7F);
  a7.i16[0] = *a2;
  a7.i16[2] = a2[1];
  v14.i64[0] = -1;
  v14.i64[1] = -1;
  int32x2_t v15 = (int32x2_t)vand_s8(a7, (int8x8_t)0xFFFF0000FFFFLL);
  unint64_t v16 = v12;
  while (1)
  {
    int8x16_t v17 = *(int8x16_t *)(*a1 + 16 * v16);
    unint64_t v18 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v13, v17), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    unint64_t v19 = __clz(__rbit64(v18));
    if (v19 <= 0x3F) {
      break;
    }
LABEL_9:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v17, v14), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v16 + 1 == v8) {
      unint64_t v16 = 0;
    }
    else {
      ++v16;
    }
    uint64_t v21 = -1;
    if (v16 == v12) {
      return v21;
    }
  }
  uint64_t v20 = 16 * v16;
  while (1)
  {
    uint64_t v21 = v19 + v20;
    uint64_t v22 = (unsigned __int16 *)(a1[1] + 16 * (v19 + v20));
    v23.i32[0] = *v22;
    v23.i32[1] = v22[1];
    int16x4_t v24 = (int16x4_t)vceq_s32(v23, v15);
    if ((vminv_u16((uint16x4_t)vuzp1_s16(v24, v24)) & 0x8000) != 0 && *((unsigned __int8 *)v22 + 4) == v11) {
      return v21;
    }
    if (v19 <= 0x3E)
    {
      unint64_t v19 = __clz(__rbit64((-2 << v19) & v18));
      if (v19 < 0x40) {
        continue;
      }
    }
    goto LABEL_9;
  }
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addIS4_EEmRKSP_SC_(uint64_t *a1, unsigned __int16 *a2, double a3)
{
  if (!a1[4]) {
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv((uint64_t)a1);
  }
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = *((unsigned __int8 *)a2 + 4);
  unint64_t v9 = (unint64_t)a1[2] >> 4;
  unint64_t v10 = (v8 | (2 * ((v7 + (v6 << 6) + (v6 >> 2) + 0x1E3779B97F4A7C17) ^ v6))) % v9;
  uint64_t v11 = *a1;
  unint64_t v12 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v10)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
  if (v12 >= 0x40)
  {
    do
    {
      if (v10 + 1 == v9) {
        unint64_t v10 = 0;
      }
      else {
        ++v10;
      }
      unint64_t v12 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v10)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v12 > 0x3F);
  }
  uint64_t v13 = v11 + 16 * v10;
  char v14 = (v8 | (2 * ((v7 + (v6 >> 2) + 23) ^ v6))) & 0x7F;
  BOOL v15 = *(unsigned __int8 *)(v13 + v12) == 255;
  *(unsigned char *)(v13 + v12) = v14;
  unint64_t result = v12 + 16 * v10;
  uint64_t v17 = a1[1] + 16 * result;
  *(void *)uint64_t v17 = *(void *)a2;
  *(double *)(v17 + 8) = a3;
  uint64_t v18 = a1[4] - v15;
  ++a1[3];
  a1[4] = v18;
  return result;
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v1 = *(void *)(a1 + 24);
  unint64_t v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2) {
      unint64_t v1 = 150 * v1 / 0x64;
    }
    goto LABEL_6;
  }
  if (!*(void *)(a1 + 32)) {
LABEL_6:
  }
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm((long long *)a1, v1);
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm(long long *a1, unint64_t a2)
{
  if (a2 <= 1) {
    a2 = 1;
  }
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v17, a2);
  v15[0] = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= 0x10)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)a1;
    unint64_t v7 = v4 >> 4;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800).u16[0];
      v15[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v7) {
        goto LABEL_10;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      long long v14 = *(_OWORD *)(*(void *)(v15[0] + 8) + 16 * v9);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addIS4_EEmRKSP_SC_(&v17, &v14, *((double *)&v14 + 1), v3);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v15);
    }
  }
LABEL_10:
  if (&v17 != a1)
  {
    long long v10 = v18;
    long long v11 = *a1;
    long long v12 = a1[1];
    *a1 = v17;
    a1[1] = v10;
    long long v17 = v11;
    long long v18 = v12;
    uint64_t v13 = *((void *)a1 + 4);
    *((void *)a1 + 4) = v19;
    uint64_t v19 = v13;
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v17);
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE15remove_internalEm(uint64_t result, uint64_t a2)
{
  if (a2 != -1)
  {
    unint64_t v2 = (int8x16_t *)(*(void *)result + (a2 & 0xFFFFFFFFFFFFFFF0));
    v3.i64[0] = -1;
    v3.i64[1] = -1;
    int8x8_t v4 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v2, v3), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    if (v4) {
      char v5 = -1;
    }
    else {
      char v5 = 0x80;
    }
    v2->i8[a2 & 0xF] = v5;
    uint64_t v6 = *(void *)(result + 32);
    if (v4) {
      ++v6;
    }
    unint64_t v7 = *(void *)(result + 24) - 1;
    *(void *)(result + 24) = v7;
    *(void *)(result + 32) = v6;
    if (v7 >= 0x11 && v7 < *(void *)(result + 16) >> 2) {
      return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv(result);
    }
  }
  return result;
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv(uint64_t a1)
{
  unint64_t v2 = *(void **)a1;
  if (v2)
  {
    free(v2);
    *(void *)a1 = 0;
  }
  int8x16_t v3 = *(void **)(a1 + 8);
  if (v3)
  {
    free(v3);
    *(void *)(a1 + 8) = 0;
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
}

uint64_t _ZNKSt3__18functionIFdDv2_dEEclES1_(uint64_t a1, __n128 a2)
{
  __n128 v5 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, __n128 *))(*(void *)v2 + 48))(v2, &v5);
  }
  int8x8_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(v4);
}

void *_ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(void *result, unint64_t a2)
{
  uint64_t v2 = result;
  result[4] = 0;
  if (a2 <= 1) {
    uint64_t v3 = 1;
  }
  else {
    uint64_t v3 = a2;
  }
  unint64_t v4 = 151 * v3;
  unint64_t v5 = ((unint64_t)(151 * v3) >> 7) + 15;
  *unint64_t result = 0;
  result[1] = 0;
  result[2] = v5 & 0x3FFFFFFFFFFFFF0;
  if ((v5 & 0x3FFFFFFFFFFFFF0) == 0) {
    goto LABEL_18;
  }
  if ((((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0) <= 0x40) {
    size_t v6 = 64;
  }
  else {
    size_t v6 = ((v5 & 0x3FFFFFFFFFFFFF0) + 63) & 0x7FFFFFFFFFFFFC0;
  }
  *unint64_t result = malloc_type_aligned_alloc(0x40uLL, v6, 0x85081AA1uLL);
  if (v4 >= 0x80)
  {
    uint64_t v7 = 0;
    *(void *)&long long v8 = -1;
    *((void *)&v8 + 1) = -1;
    do
      *(_OWORD *)(*v2 + 16 * v7++) = v8;
    while (v5 >> 4 != v7);
  }
  size_t v9 = ((32 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0) <= 0x40 ? 64 : (32 * v2[2] + 63) & 0xFFFFFFFFFFFFFFC0;
  unint64_t result = malloc_type_aligned_alloc(0x40uLL, v9, 0x3A3CE064uLL);
  v2[1] = result;
  if (v2[2])
  {
    uint64_t v10 = 0;
    unint64_t v11 = 0;
    do
    {
      long long v12 = (void *)(v2[1] + v10);
      v12[2] = 0;
      v12[3] = 0;
      *long long v12 = 0;
      ++v11;
      unint64_t v13 = v2[2];
      v10 += 32;
    }
    while (v11 < v13);
  }
  else
  {
LABEL_18:
    unint64_t v13 = 0;
  }
  v2[3] = 0;
  v2[4] = v13;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKSR_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    unint64_t result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addISR_EEmRKSP_SC_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    }
    char v14 = 1;
  }
  else
  {
    uint64_t v13 = 0;
    char v14 = 0;
    unint64_t result = -1;
  }
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v13;
  *(void *)(a4 + 16) = result;
  *(unsigned char *)(a4 + 24) = v14;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addISR_EEmRKSP_SC_(uint64_t *a1, unsigned __int16 *a2, char a3)
{
  if (!a1[4]) {
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv((uint64_t)a1);
  }
  unint64_t v6 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 4);
  unint64_t v8 = (unint64_t)a1[2] >> 4;
  unint64_t v9 = ((v7 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6) % v8;
  uint64_t v10 = *a1;
  unint64_t v11 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v9)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
  if (v11 >= 0x40)
  {
    do
    {
      if (v9 + 1 == v8) {
        unint64_t v9 = 0;
      }
      else {
        ++v9;
      }
      unint64_t v11 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v11 > 0x3F);
  }
  uint64_t v12 = v10 + 16 * v9;
  char v13 = ((v7 + ((_BYTE)v6 << 6) + (v6 >> 2) + 23) ^ v6) & 0x7F;
  BOOL v14 = *(unsigned __int8 *)(v12 + v11) == 255;
  *(unsigned char *)(v12 + v11) = v13;
  unint64_t result = v11 + 16 * v9;
  uint64_t v16 = a1[1] + 12 * result;
  *(void *)uint64_t v16 = *(void *)a2;
  *(unsigned char *)(v16 + 8) = a3;
  uint64_t v17 = a1[4] - v14;
  ++a1[3];
  a1[4] = v17;
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv(uint64_t result)
{
  unint64_t v2 = *(void *)(result + 16);
  unint64_t v1 = *(void *)(result + 24);
  unint64_t v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2) {
      unint64_t v1 = 150 * v1 / 0x64;
    }
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm((long long *)result, v1);
  }
  if (!*(void *)(result + 32)) {
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm((long long *)result, v1);
  }
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm(long long *a1, unint64_t a2)
{
  if (a2 <= 1) {
    a2 = 1;
  }
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v20, a2);
  v18[0] = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= 0x10)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 4;
    __n128 v7 = (__n128)xmmword_236F170B0;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v5)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v6) {
        goto LABEL_10;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    v18[1] = (unsigned __int16)~v8;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      uint64_t v10 = *(void *)(v18[0] + 8) + 12 * v9;
      uint64_t v16 = *(void *)v10;
      int v17 = *(_DWORD *)(v10 + 8);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addISR_EEmRKSP_SC_(&v20, &v16, v17, v7, v3);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v18);
    }
  }
LABEL_10:
  if (&v20 != a1)
  {
    long long v11 = v21;
    long long v12 = *a1;
    long long v13 = a1[1];
    *a1 = v20;
    a1[1] = v11;
    long long v20 = v12;
    long long v21 = v13;
    uint64_t v14 = *((void *)a1 + 4);
    *((void *)a1 + 4) = v22;
    uint64_t v22 = v14;
  }
  return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v20);
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6insertERKSP_RKS4_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    unint64_t result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addIS4_EEmRKSP_SC_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    }
    char v14 = 1;
  }
  else
  {
    uint64_t v13 = 0;
    char v14 = 0;
    unint64_t result = -1;
  }
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v13;
  *(void *)(a4 + 16) = result;
  *(unsigned char *)(a4 + 24) = v14;
  return result;
}

uint64_t _ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(void *a1, __int16 *a2, double a3, double a4, double a5, double a6, int8x8_t a7)
{
  unint64_t v7 = a1[2];
  if (v7 < 0x10) {
    return -1;
  }
  unint64_t v8 = v7 >> 4;
  unint64_t v9 = (unsigned __int16)*a2;
  uint64_t v10 = (unsigned __int16)a2[1];
  uint64_t v11 = *((unsigned __int8 *)a2 + 4);
  unint64_t v12 = (v11 | (2 * ((v10 + (v9 << 6) + (v9 >> 2) + 0x1E3779B97F4A7C17) ^ v9))) % v8;
  int8x16_t v13 = vdupq_n_s8((v11 | (2 * ((v10 + (v9 >> 2) + 23) ^ v9))) & 0x7F);
  a7.i16[0] = *a2;
  a7.i16[2] = a2[1];
  v14.i64[0] = -1;
  v14.i64[1] = -1;
  int32x2_t v15 = (int32x2_t)vand_s8(a7, (int8x8_t)0xFFFF0000FFFFLL);
  unint64_t v16 = v12;
  while (1)
  {
    int8x16_t v17 = *(int8x16_t *)(*a1 + 16 * v16);
    unint64_t v18 = (unint64_t)vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v13, v17), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    unint64_t v19 = __clz(__rbit64(v18));
    if (v19 <= 0x3F) {
      break;
    }
LABEL_9:
    if (vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(v17, v14), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800))
    {
      return -1;
    }
    if (v16 + 1 == v8) {
      unint64_t v16 = 0;
    }
    else {
      ++v16;
    }
    uint64_t v21 = -1;
    if (v16 == v12) {
      return v21;
    }
  }
  uint64_t v20 = 16 * v16;
  while (1)
  {
    uint64_t v21 = v19 + v20;
    uint64_t v22 = (unsigned __int16 *)(a1[1] + 32 * (v19 + v20));
    v23.i32[0] = *v22;
    v23.i32[1] = v22[1];
    int16x4_t v24 = (int16x4_t)vceq_s32(v23, v15);
    if ((vminv_u16((uint16x4_t)vuzp1_s16(v24, v24)) & 0x8000) != 0 && *((unsigned __int8 *)v22 + 4) == v11) {
      return v21;
    }
    if (v19 <= 0x3E)
    {
      unint64_t v19 = __clz(__rbit64((-2 << v19) & v18));
      if (v19 < 0x40) {
        continue;
      }
    }
    goto LABEL_9;
  }
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addIS4_EEmRKSP_SC_(uint64_t *a1, unsigned __int16 *a2, __n128 a3)
{
  if (!a1[4])
  {
    __n128 v18 = a3;
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv((uint64_t)a1);
    a3 = v18;
  }
  unint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 4);
  unint64_t v8 = (unint64_t)a1[2] >> 4;
  unint64_t v9 = (v7 | (2 * ((v6 + (v5 << 6) + (v5 >> 2) + 0x1E3779B97F4A7C17) ^ v5))) % v8;
  uint64_t v10 = *a1;
  unint64_t v11 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v9)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
  if (v11 >= 0x40)
  {
    do
    {
      if (v9 + 1 == v8) {
        unint64_t v9 = 0;
      }
      else {
        ++v9;
      }
      unint64_t v11 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v11 > 0x3F);
  }
  uint64_t v12 = v10 + 16 * v9;
  char v13 = (v7 | (2 * ((v6 + (v5 >> 2) + 23) ^ v5))) & 0x7F;
  BOOL v14 = *(unsigned __int8 *)(v12 + v11) == 255;
  *(unsigned char *)(v12 + v11) = v13;
  unint64_t result = v11 + 16 * v9;
  unint64_t v16 = (__n128 *)(a1[1] + 32 * result);
  v16->n128_u64[0] = *(void *)a2;
  v16[1] = a3;
  uint64_t v17 = a1[4] - v14;
  ++a1[3];
  a1[4] = v17;
  return result;
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v1 = *(void *)(a1 + 24);
  unint64_t v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2) {
      unint64_t v1 = 150 * v1 / 0x64;
    }
    goto LABEL_6;
  }
  if (!*(void *)(a1 + 32)) {
LABEL_6:
  }
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm((long long *)a1, v1);
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE9do_resizeEm(long long *a1, unint64_t a2)
{
  if (a2 <= 1) {
    a2 = 1;
  }
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v18, a2);
  v16[0] = a1;
  unint64_t v3 = *((void *)a1 + 2);
  if (v3 >= 0x10)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)a1;
    unint64_t v6 = v3 >> 4;
    while (1)
    {
      unsigned __int16 v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v5 + v4)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800).u16[0];
      v16[1] = (unsigned __int16)~v7;
      if (v7 != 0xFFFF) {
        break;
      }
      v4 += 16;
      if (!--v6) {
        goto LABEL_10;
      }
    }
    uint64_t v8 = __clz(__rbit64((unsigned __int16)~v7)) + v4;
    for (i = v8; i != -1; uint64_t v8 = i)
    {
      unint64_t v9 = (__n128 *)(*(void *)(v16[0] + 8) + 32 * v8);
      __n128 v10 = v9[1];
      v15[0] = *v9;
      v15[1] = v10;
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE12internal_addIS4_EEmRKSP_SC_(&v18, v15, v10);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v16);
    }
  }
LABEL_10:
  if (&v18 != a1)
  {
    long long v11 = v19;
    long long v12 = *a1;
    long long v13 = a1[1];
    *a1 = v18;
    a1[1] = v11;
    long long v18 = v12;
    long long v19 = v13;
    uint64_t v14 = *((void *)a1 + 4);
    *((void *)a1 + 4) = v20;
    uint64_t v20 = v14;
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v18);
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE15remove_internalEm(uint64_t result, uint64_t a2)
{
  if (a2 != -1)
  {
    unint64_t v2 = (int8x16_t *)(*(void *)result + (a2 & 0xFFFFFFFFFFFFFFF0));
    v3.i64[0] = -1;
    v3.i64[1] = -1;
    int8x8_t v4 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v2, v3), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    if (v4) {
      char v5 = -1;
    }
    else {
      char v5 = 0x80;
    }
    v2->i8[a2 & 0xF] = v5;
    uint64_t v6 = *(void *)(result + 32);
    if (v4) {
      ++v6;
    }
    unint64_t v7 = *(void *)(result + 24) - 1;
    *(void *)(result + 24) = v7;
    *(void *)(result + 32) = v6;
    if (v7 >= 0x11 && v7 < *(void *)(result + 16) >> 2) {
      return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13grow_to_countEv(result);
    }
  }
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    unint64_t result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS10_EEmRKSY_SL_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    }
    char v14 = 1;
  }
  else
  {
    uint64_t v13 = 0;
    char v14 = 0;
    unint64_t result = -1;
  }
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v13;
  *(void *)(a4 + 16) = result;
  *(unsigned char *)(a4 + 24) = v14;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS10_EEmRKSY_SL_(uint64_t *a1, unsigned __int16 *a2, char a3)
{
  if (!a1[4]) {
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv((uint64_t)a1);
  }
  unint64_t v6 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 4);
  unint64_t v8 = (unint64_t)a1[2] >> 4;
  unint64_t v9 = ((v7 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6) % v8;
  uint64_t v10 = *a1;
  unint64_t v11 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v9)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
  if (v11 >= 0x40)
  {
    do
    {
      if (v9 + 1 == v8) {
        unint64_t v9 = 0;
      }
      else {
        ++v9;
      }
      unint64_t v11 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v11 > 0x3F);
  }
  uint64_t v12 = v10 + 16 * v9;
  char v13 = ((v7 + ((_BYTE)v6 << 6) + (v6 >> 2) + 23) ^ v6) & 0x7F;
  BOOL v14 = *(unsigned __int8 *)(v12 + v11) == 255;
  *(unsigned char *)(v12 + v11) = v13;
  unint64_t result = v11 + 16 * v9;
  uint64_t v16 = a1[1] + 12 * result;
  *(void *)uint64_t v16 = *(void *)a2;
  *(unsigned char *)(v16 + 8) = a3;
  uint64_t v17 = a1[4] - v14;
  ++a1[3];
  a1[4] = v17;
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv(uint64_t result)
{
  unint64_t v2 = *(void *)(result + 16);
  unint64_t v1 = *(void *)(result + 24);
  unint64_t v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2) {
      unint64_t v1 = 150 * v1 / 0x64;
    }
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm((long long *)result, v1);
  }
  if (!*(void *)(result + 32)) {
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm((long long *)result, v1);
  }
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm(long long *a1, unint64_t a2)
{
  if (a2 <= 1) {
    a2 = 1;
  }
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v20, a2);
  v18[0] = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= 0x10)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 4;
    __n128 v7 = (__n128)xmmword_236F170B0;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v5)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v6) {
        goto LABEL_10;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    v18[1] = (unsigned __int16)~v8;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      uint64_t v10 = *(void *)(v18[0] + 8) + 12 * v9;
      uint64_t v16 = *(void *)v10;
      int v17 = *(_DWORD *)(v10 + 8);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS10_EEmRKSY_SL_(&v20, &v16, v17, v7, v3);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v18);
    }
  }
LABEL_10:
  if (&v20 != a1)
  {
    long long v11 = v21;
    long long v12 = *a1;
    long long v13 = a1[1];
    *a1 = v20;
    a1[1] = v11;
    long long v20 = v12;
    long long v21 = v13;
    uint64_t v14 = *((void *)a1 + 4);
    *((void *)a1 + 4) = v22;
    uint64_t v22 = v14;
  }
  return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v20);
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS4_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    unint64_t result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS4_EEmRKSY_SL_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    }
    char v14 = 1;
  }
  else
  {
    uint64_t v13 = 0;
    char v14 = 0;
    unint64_t result = -1;
  }
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v13;
  *(void *)(a4 + 16) = result;
  *(unsigned char *)(a4 + 24) = v14;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS4_EEmRKSY_SL_(uint64_t *a1, unsigned __int16 *a2, double a3)
{
  if (!a1[4]) {
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv((uint64_t)a1);
  }
  unint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  uint64_t v8 = *((unsigned __int8 *)a2 + 4);
  unint64_t v9 = (unint64_t)a1[2] >> 4;
  unint64_t v10 = (v8 | (2 * ((v7 + (v6 << 6) + (v6 >> 2) + 0x1E3779B97F4A7C17) ^ v6))) % v9;
  uint64_t v11 = *a1;
  unint64_t v12 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v10)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
  if (v12 >= 0x40)
  {
    do
    {
      if (v10 + 1 == v9) {
        unint64_t v10 = 0;
      }
      else {
        ++v10;
      }
      unint64_t v12 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v11 + 16 * v10)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v12 > 0x3F);
  }
  uint64_t v13 = v11 + 16 * v10;
  char v14 = (v8 | (2 * ((v7 + (v6 >> 2) + 23) ^ v6))) & 0x7F;
  BOOL v15 = *(unsigned __int8 *)(v13 + v12) == 255;
  *(unsigned char *)(v13 + v12) = v14;
  unint64_t result = v12 + 16 * v10;
  uint64_t v17 = a1[1] + 16 * result;
  *(void *)uint64_t v17 = *(void *)a2;
  *(double *)(v17 + 8) = a3;
  uint64_t v18 = a1[4] - v15;
  ++a1[3];
  a1[4] = v18;
  return result;
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v1 = *(void *)(a1 + 24);
  unint64_t v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2) {
      unint64_t v1 = 150 * v1 / 0x64;
    }
    goto LABEL_6;
  }
  if (!*(void *)(a1 + 32)) {
LABEL_6:
  }
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm((long long *)a1, v1);
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm(long long *a1, unint64_t a2)
{
  if (a2 <= 1) {
    a2 = 1;
  }
  uint64_t v19 = 0;
  long long v17 = 0u;
  long long v18 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v17, a2);
  v15[0] = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= 0x10)
  {
    uint64_t v5 = 0;
    uint64_t v6 = *(void *)a1;
    unint64_t v7 = v4 >> 4;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v6 + v5)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800).u16[0];
      v15[1] = (unsigned __int16)~v8;
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v7) {
        goto LABEL_10;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      long long v14 = *(_OWORD *)(*(void *)(v15[0] + 8) + 16 * v9);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS4_EEmRKSY_SL_(&v17, &v14, *((double *)&v14 + 1), v3);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v15);
    }
  }
LABEL_10:
  if (&v17 != a1)
  {
    long long v10 = v18;
    long long v11 = *a1;
    long long v12 = a1[1];
    *a1 = v17;
    a1[1] = v10;
    long long v17 = v11;
    long long v18 = v12;
    uint64_t v13 = *((void *)a1 + 4);
    *((void *)a1 + 4) = v19;
    uint64_t v19 = v13;
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v17);
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE15remove_internalEm(uint64_t result, uint64_t a2)
{
  if (a2 != -1)
  {
    unint64_t v2 = (int8x16_t *)(*(void *)result + (a2 & 0xFFFFFFFFFFFFFFF0));
    v3.i64[0] = -1;
    v3.i64[1] = -1;
    int8x8_t v4 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v2, v3), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    if (v4) {
      char v5 = -1;
    }
    else {
      char v5 = 0x80;
    }
    v2->i8[a2 & 0xF] = v5;
    uint64_t v6 = *(void *)(result + 32);
    if (v4) {
      ++v6;
    }
    unint64_t v7 = *(void *)(result + 24) - 1;
    *(void *)(result + 24) = v7;
    *(void *)(result + 32) = v6;
    if (v7 >= 0x11 && v7 < *(void *)(result + 16) >> 2) {
      return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRNSt3__16__bindIRPFfDv2_fPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv(result);
    }
  }
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS10_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    unint64_t result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS10_EEmRKSY_SL_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    }
    char v14 = 1;
  }
  else
  {
    uint64_t v13 = 0;
    char v14 = 0;
    unint64_t result = -1;
  }
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v13;
  *(void *)(a4 + 16) = result;
  *(unsigned char *)(a4 + 24) = v14;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS10_EEmRKSY_SL_(uint64_t *a1, unsigned __int16 *a2, char a3)
{
  if (!a1[4]) {
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv((uint64_t)a1);
  }
  unint64_t v6 = (a2[1] + ((unint64_t)*a2 << 6) + ((unint64_t)*a2 >> 2) - 0x61C8864680B583E9) ^ *a2;
  uint64_t v7 = *((unsigned __int8 *)a2 + 4);
  unint64_t v8 = (unint64_t)a1[2] >> 4;
  unint64_t v9 = ((v7 + (v6 << 6) + (v6 >> 2) - 0x61C8864680B583E9) ^ v6) % v8;
  uint64_t v10 = *a1;
  unint64_t v11 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v9)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
  if (v11 >= 0x40)
  {
    do
    {
      if (v9 + 1 == v8) {
        unint64_t v9 = 0;
      }
      else {
        ++v9;
      }
      unint64_t v11 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v11 > 0x3F);
  }
  uint64_t v12 = v10 + 16 * v9;
  char v13 = ((v7 + ((_BYTE)v6 << 6) + (v6 >> 2) + 23) ^ v6) & 0x7F;
  BOOL v14 = *(unsigned __int8 *)(v12 + v11) == 255;
  *(unsigned char *)(v12 + v11) = v13;
  unint64_t result = v11 + 16 * v9;
  uint64_t v16 = a1[1] + 12 * result;
  *(void *)uint64_t v16 = *(void *)a2;
  *(unsigned char *)(v16 + 8) = a3;
  uint64_t v17 = a1[4] - v14;
  ++a1[3];
  a1[4] = v17;
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv(uint64_t result)
{
  unint64_t v2 = *(void *)(result + 16);
  unint64_t v1 = *(void *)(result + 24);
  unint64_t v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2) {
      unint64_t v1 = 150 * v1 / 0x64;
    }
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm((long long *)result, v1);
  }
  if (!*(void *)(result + 32)) {
    return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm((long long *)result, v1);
  }
  return result;
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm(long long *a1, unint64_t a2)
{
  if (a2 <= 1) {
    a2 = 1;
  }
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v20, a2);
  v18[0] = a1;
  unint64_t v4 = *((void *)a1 + 2);
  if (v4 >= 0x10)
  {
    uint64_t v5 = 0;
    unint64_t v6 = v4 >> 4;
    __n128 v7 = (__n128)xmmword_236F170B0;
    v3.n128_u64[0] = 0x3830282018100800;
    while (1)
    {
      unsigned __int16 v8 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*(void *)a1 + v5)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800).u16[0];
      if (v8 != 0xFFFF) {
        break;
      }
      v5 += 16;
      if (!--v6) {
        goto LABEL_10;
      }
    }
    uint64_t v9 = __clz(__rbit64((unsigned __int16)~v8)) + v5;
    v18[1] = (unsigned __int16)~v8;
    for (i = v9; i != -1; uint64_t v9 = i)
    {
      uint64_t v10 = *(void *)(v18[0] + 8) + 12 * v9;
      uint64_t v16 = *(void *)v10;
      int v17 = *(_DWORD *)(v10 + 8);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS10_EEmRKSY_SL_(&v20, &v16, v17, v7, v3);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v18);
    }
  }
LABEL_10:
  if (&v20 != a1)
  {
    long long v11 = v21;
    long long v12 = *a1;
    long long v13 = a1[1];
    *a1 = v20;
    a1[1] = v11;
    long long v20 = v12;
    long long v21 = v13;
    uint64_t v14 = *((void *)a1 + 4);
    *((void *)a1 + 4) = v22;
    uint64_t v22 = v14;
  }
  return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEED1Ev((uint64_t)&v20);
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE6insertERKSY_RKS4_@<X0>(uint64_t *a1@<X0>, unsigned __int16 *a2@<X1>, __n128 *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, int8x8_t a9@<D4>)
{
  if (_ZNK4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE13find_internalERKSP_(a1, (__int16 *)a2, a5, a6, a7, a8, a9) == -1)
  {
    unint64_t result = _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS4_EEmRKSY_SL_(a1, a2, *a3);
    if (result >> 4 >= (unint64_t)a1[2] >> 4) {
      uint64_t v13 = 0;
    }
    else {
      uint64_t v13 = (unsigned __int16)~*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * (result >> 4))), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    }
    char v14 = 1;
  }
  else
  {
    uint64_t v13 = 0;
    char v14 = 0;
    unint64_t result = -1;
  }
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = v13;
  *(void *)(a4 + 16) = result;
  *(unsigned char *)(a4 + 24) = v14;
  return result;
}

unint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS4_EEmRKSY_SL_(uint64_t *a1, unsigned __int16 *a2, __n128 a3)
{
  if (!a1[4])
  {
    __n128 v18 = a3;
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv((uint64_t)a1);
    a3 = v18;
  }
  unint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = *((unsigned __int8 *)a2 + 4);
  unint64_t v8 = (unint64_t)a1[2] >> 4;
  unint64_t v9 = (v7 | (2 * ((v6 + (v5 << 6) + (v5 >> 2) + 0x1E3779B97F4A7C17) ^ v5))) % v8;
  uint64_t v10 = *a1;
  unint64_t v11 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(*a1 + 16 * v9)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
  if (v11 >= 0x40)
  {
    do
    {
      if (v9 + 1 == v8) {
        unint64_t v9 = 0;
      }
      else {
        ++v9;
      }
      unint64_t v11 = __clz(__rbit64(*(void *)&vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v10 + 16 * v9)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800)));
    }
    while (v11 > 0x3F);
  }
  uint64_t v12 = v10 + 16 * v9;
  char v13 = (v7 | (2 * ((v6 + (v5 >> 2) + 23) ^ v5))) & 0x7F;
  BOOL v14 = *(unsigned __int8 *)(v12 + v11) == 255;
  *(unsigned char *)(v12 + v11) = v13;
  unint64_t result = v11 + 16 * v9;
  uint64_t v16 = (__n128 *)(a1[1] + 32 * result);
  v16->n128_u64[0] = *(void *)a2;
  v16[1] = a3;
  uint64_t v17 = a1[4] - v14;
  ++a1[3];
  a1[4] = v17;
  return result;
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv(uint64_t a1)
{
  unint64_t v2 = *(void *)(a1 + 16);
  unint64_t v1 = *(void *)(a1 + 24);
  unint64_t v3 = (((151 * v1) >> 7) + 15) & 0x3FFFFFFFFFFFFF0;
  if (v3 != v2)
  {
    if (v3 > v2) {
      unint64_t v1 = 150 * v1 / 0x64;
    }
    goto LABEL_6;
  }
  if (!*(void *)(a1 + 32)) {
LABEL_6:
  }
    _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm((long long *)a1, v1);
}

void _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE9do_resizeEm(long long *a1, unint64_t a2)
{
  if (a2 <= 1) {
    a2 = 1;
  }
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRKNSt3__18functionIFdDv2_dEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IdS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE4initEm(&v18, a2);
  v16[0] = a1;
  unint64_t v3 = *((void *)a1 + 2);
  if (v3 >= 0x10)
  {
    uint64_t v4 = 0;
    uint64_t v5 = *(void *)a1;
    unint64_t v6 = v3 >> 4;
    while (1)
    {
      unsigned __int16 v7 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vcltzq_s8(*(int8x16_t *)(v5 + v4)), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800).u16[0];
      v16[1] = (unsigned __int16)~v7;
      if (v7 != 0xFFFF) {
        break;
      }
      v4 += 16;
      if (!--v6) {
        goto LABEL_10;
      }
    }
    uint64_t v8 = __clz(__rbit64((unsigned __int16)~v7)) + v4;
    for (i = v8; i != -1; uint64_t v8 = i)
    {
      unint64_t v9 = (__n128 *)(*(void *)(v16[0] + 8) + 32 * v8);
      __n128 v10 = v9[1];
      v15[0] = *v9;
      v15[1] = v10;
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE16vertex_map_queryS4_ZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE12internal_addIS4_EEmRKSY_SL_(&v18, v15, v10);
      _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE19hash_brown_iteratorIRNS2_4pairIKSP_SR_EEEppEv(v16);
    }
  }
LABEL_10:
  if (&v18 != a1)
  {
    long long v11 = v19;
    long long v12 = *a1;
    long long v13 = a1[1];
    *a1 = v18;
    a1[1] = v11;
    long long v18 = v12;
    long long v19 = v13;
    uint64_t v14 = *((void *)a1 + 4);
    *((void *)a1 + 4) = v20;
    uint64_t v20 = v14;
  }
  _ZN4geom10hash_brownIZNS_23marching_squares_2_implIfRKNSt3__18functionIFfDv2_fEEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISC_Lh2EvE5valueENS2_9allocatorISH_EEEERNSE_IjNSI_IjEEEEE16vertex_map_queryS4_ZNS1_IfS8_EEvSA_tSD_SL_SO_ENSP_4hashENS2_8equal_toISP_EEE6deinitEv((uint64_t)&v18);
}

uint64_t _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE15remove_internalEm(uint64_t result, uint64_t a2)
{
  if (a2 != -1)
  {
    unint64_t v2 = (int8x16_t *)(*(void *)result + (a2 & 0xFFFFFFFFFFFFFFF0));
    v3.i64[0] = -1;
    v3.i64[1] = -1;
    int8x8_t v4 = vqtbl1_s8((int8x16_t)vpaddlq_u32(vpaddlq_u16(vpaddlq_u8((uint8x16_t)vandq_s8(vceqq_s8(*v2, v3), (int8x16_t)xmmword_236F170B0)))), (int8x8_t)0x3830282018100800);
    if (v4) {
      char v5 = -1;
    }
    else {
      char v5 = 0x80;
    }
    v2->i8[a2 & 0xF] = v5;
    uint64_t v6 = *(void *)(result + 32);
    if (v4) {
      ++v6;
    }
    unint64_t v7 = *(void *)(result + 24) - 1;
    *(void *)(result + 24) = v7;
    *(void *)(result + 32) = v6;
    if (v7 >= 0x11 && v7 < *(void *)(result + 16) >> 2) {
      return _ZN4geom10hash_brownIZNS_23marching_squares_2_implIdRNSt3__16__bindIRPFdDv2_dPKvEJRKNS2_12placeholders4__phILi1EEERS6_EEEEEvOT0_tNS_4bboxIT_Lh2EEERNS2_6vectorINS_11vector_typeISL_Lh2EvE5valueENS2_9allocatorISQ_EEEERNSN_IjNSR_IjEEEEE14edge_map_queryNS_12_GLOBAL__N_19cell_edgeEZNS1_IdSH_EEvSJ_tSM_SU_SX_ENSY_4hashENS2_8equal_toISY_EEE13grow_to_countEv(result);
    }
  }
  return result;
}

uint64_t geom::split_triangle_mesh_with_plane<float>(void *a1, uint64_t *a2, float32x4_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7, unint64_t *a8, std::vector<unsigned int> *a9, std::vector<unsigned int> *a10, std::vector<unsigned int> *a11)
{
}

uint64_t geom::anonymous namespace'::split_triangle_mesh_with_plane_impl<float>(void *a1, uint64_t *a2, float32x4_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7, unint64_t *a8, std::vector<unsigned int> *a9, std::vector<unsigned int> *a10, std::vector<unsigned int> *a11)
{
  long long v11 = (uint64_t *)a8;
  uint64_t v14 = a1;
  BOOL v15 = (uint64_t *)a9;
  uint64_t v16 = (uint64_t *)a10;
  a4[1] = *a4;
  a5[1] = *a5;
  a6[1] = *a6;
  a7[1] = *a7;
  a8[1] = *a8;
  a9->__end_ = a9->__begin_;
  a10->__end_ = a10->__begin_;
  std::vector<signed char>::reserve(a8, a1[1]);
  std::vector<unsigned int>::reserve(a9, v14[1]);
  std::vector<unsigned int>::reserve(a10, v14[1]);
  int v181 = v11;
  if (v14[1])
  {
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    uint64_t p_end_cap = (uint64_t)&a9->__end_cap_;
    uint64_t v174 = (uint64_t)&a10->__end_cap_;
    __int32 v177 = v14;
    do
    {
      uint64_t v19 = *v14;
      float32x4_t v20 = vmulq_f32(*(float32x4_t *)(*v14 + 16 * v17), *a3);
      v20.f32[0] = a3[1].f32[0]
                 + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0];
      char v21 = (v20.f32[0] > 0.00000011921) - (v20.f32[0] < -0.00000011921);
      int32x2_t v23 = (unsigned char *)v11[1];
      unint64_t v22 = v11[2];
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v25 = *v11;
        int8x8_t v26 = &v23[-v25];
        uint64_t v27 = (uint64_t)&v23[-v25 + 1];
        if (v27 < 0) {
          goto LABEL_238;
        }
        unint64_t v28 = v22 - v25;
        if (2 * v28 > v27) {
          uint64_t v27 = 2 * v28;
        }
        if (v28 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v29 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v29 = v27;
        }
        if (v29) {
          uint64_t v30 = (char *)operator new(v29);
        }
        else {
          uint64_t v30 = 0;
        }
        int8x8_t v31 = &v26[(void)v30];
        uint64x2_t v32 = &v26[(void)v30];
        *uint64x2_t v32 = v21;
        int16x4_t v24 = v32 + 1;
        if (v23 == (unsigned char *)v25)
        {
          long long v11 = v181;
        }
        else
        {
          float64x2_t v33 = &v23[~v25];
          do
          {
            char v34 = *--v23;
            (v33--)[(void)v30] = v34;
          }
          while (v23 != (unsigned char *)v25);
          long long v11 = v181;
          int32x2_t v23 = (unsigned char *)*v181;
          int8x8_t v31 = v30;
        }
        uint64_t *v11 = (uint64_t)v31;
        v11[1] = (uint64_t)v24;
        v11[2] = (uint64_t)&v30[v29];
        if (v23) {
          operator delete(v23);
        }
        uint64_t v16 = (uint64_t *)a10;
        BOOL v15 = (uint64_t *)a9;
      }
      else
      {
        *int32x2_t v23 = v21;
        int16x4_t v24 = v23 + 1;
        uint64_t v16 = (uint64_t *)a10;
      }
      v11[1] = (uint64_t)v24;
      if ((char)*(v24 - 1) < 0)
      {
        float64x2_t v40 = (_DWORD *)v16[1];
        unint64_t v39 = v16[2];
        if ((unint64_t)v40 >= v39)
        {
          double v48 = (_DWORD *)*v16;
          uint64_t v49 = ((uint64_t)v40 - *v16) >> 2;
          unint64_t v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v51 = v39 - (void)v48;
          if (v51 >> 1 > v50) {
            unint64_t v50 = v51 >> 1;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52)
          {
            double v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v174, v52);
            double v48 = (_DWORD *)*v16;
            float64x2_t v40 = (_DWORD *)v16[1];
          }
          else
          {
            double v53 = 0;
          }
          uint64x2_t v68 = &v53[4 * v49];
          *(_DWORD *)uint64x2_t v68 = -1;
          int8x16_t v41 = v68 + 4;
          while (v40 != v48)
          {
            int v69 = *--v40;
            *((_DWORD *)v68 - 1) = v69;
            v68 -= 4;
          }
          *uint64_t v16 = (uint64_t)v68;
          v16[1] = (uint64_t)v41;
          void v16[2] = (uint64_t)&v53[4 * v52];
          if (v48) {
            operator delete(v48);
          }
        }
        else
        {
          *float64x2_t v40 = -1;
          int8x16_t v41 = v40 + 1;
        }
        v16[1] = (uint64_t)v41;
      }
      else
      {
        unint64_t v35 = (unint64_t)(a6[1] - *a6) >> 4;
        int8x8_t v37 = (_DWORD *)v16[1];
        unint64_t v36 = v16[2];
        if ((unint64_t)v37 >= v36)
        {
          int8x8_t v42 = (_DWORD *)*v16;
          uint64_t v43 = ((uint64_t)v37 - *v16) >> 2;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v45 = v36 - (void)v42;
          if (v45 >> 1 > v44) {
            unint64_t v44 = v45 >> 1;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v46 = v44;
          }
          if (v46)
          {
            double v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v174, v46);
            int8x8_t v42 = (_DWORD *)*v16;
            int8x8_t v37 = (_DWORD *)v16[1];
          }
          else
          {
            double v47 = 0;
          }
          double v54 = &v47[4 * v43];
          *(_DWORD *)double v54 = v35;
          uint64x2_t v38 = v54 + 4;
          while (v37 != v42)
          {
            int v55 = *--v37;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
          *uint64_t v16 = (uint64_t)v54;
          v16[1] = (uint64_t)v38;
          void v16[2] = (uint64_t)&v47[4 * v46];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          *int8x8_t v37 = v35;
          uint64x2_t v38 = v37 + 1;
        }
        v16[1] = (uint64_t)v38;
        __int16 v57 = a6[1];
        unint64_t v56 = (unint64_t)a6[2];
        if ((unint64_t)v57 >= v56)
        {
          uint64_t v59 = (v57 - *a6) >> 4;
          BOOL v15 = (uint64_t *)a9;
          if ((unint64_t)(v59 + 1) >> 60) {
            goto LABEL_238;
          }
          uint64_t v60 = v56 - (void)*a6;
          uint64_t v61 = v60 >> 3;
          if (v60 >> 3 <= (unint64_t)(v59 + 1)) {
            uint64_t v61 = v59 + 1;
          }
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v62 = v61;
          }
          if (v62) {
            double v63 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a6 + 2), v62);
          }
          else {
            double v63 = 0;
          }
          uint64_t v64 = &v63[16 * v59];
          *(_OWORD *)uint64_t v64 = *(_OWORD *)(v19 + 16 * v17);
          char v58 = v64 + 16;
          double v66 = *a6;
          double v65 = a6[1];
          if (v65 != *a6)
          {
            do
            {
              long long v67 = *((_OWORD *)v65 - 1);
              v65 -= 16;
              *((_OWORD *)v64 - 1) = v67;
              v64 -= 16;
            }
            while (v65 != v66);
            double v65 = *a6;
          }
          *a6 = v64;
          a6[1] = v58;
          a6[2] = &v63[16 * v62];
          if (v65) {
            operator delete(v65);
          }
        }
        else
        {
          *(_OWORD *)__int16 v57 = *(_OWORD *)(v19 + 16 * v17);
          char v58 = v57 + 16;
          BOOL v15 = (uint64_t *)a9;
        }
        a6[1] = v58;
      }
      if (*(char *)(v11[1] - 1) <= 0)
      {
        unint64_t v73 = (unint64_t)(a4[1] - *a4) >> 4;
        std::vector<unsigned int>::pointer end = (std::vector<unsigned int>::pointer)v15[1];
        unint64_t v74 = v15[2];
        if ((unint64_t)end >= v74)
        {
          begiunsigned __int16 n = (std::vector<unsigned int>::pointer)*v15;
          uint64_t v84 = ((uint64_t)end - *v15) >> 2;
          unint64_t v85 = v84 + 1;
          if ((unint64_t)(v84 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v86 = v74 - (void)begin;
          if (v86 >> 1 > v85) {
            unint64_t v85 = v86 >> 1;
          }
          if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v87 = v85;
          }
          if (v87)
          {
            uint64_t v88 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(p_end_cap, v87);
            begiunsigned __int16 n = a9->__begin_;
            std::vector<unsigned int>::pointer end = a9->__end_;
          }
          else
          {
            uint64_t v88 = 0;
          }
          unint64_t v91 = (unsigned int *)&v88[4 * v84];
          *unint64_t v91 = v73;
          uint64_t v76 = v91 + 1;
          while (end != begin)
          {
            unsigned int v92 = *--end;
            *--unint64_t v91 = v92;
          }
          a9->__begin_ = v91;
          a9->__end_ = v76;
          a9->__end_cap_.__value_ = (unsigned int *)&v88[4 * v87];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          unsigned int *end = v73;
          uint64_t v76 = end + 1;
        }
        a9->__end_ = v76;
        BOOL v15 = (uint64_t *)a9;
        unint64_t v94 = a4[1];
        unint64_t v93 = (unint64_t)a4[2];
        if ((unint64_t)v94 >= v93)
        {
          uint64_t v96 = (v94 - *a4) >> 4;
          if ((unint64_t)(v96 + 1) >> 60) {
LABEL_238:
          }
            abort();
          uint64_t v97 = v93 - (void)*a4;
          uint64_t v98 = v97 >> 3;
          if (v97 >> 3 <= (unint64_t)(v96 + 1)) {
            uint64_t v98 = v96 + 1;
          }
          if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v99 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v99 = v98;
          }
          if (v99) {
            int8x8_t v100 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v99);
          }
          else {
            int8x8_t v100 = 0;
          }
          uint64_t v101 = &v100[16 * v96];
          *(_OWORD *)uint64_t v101 = *(_OWORD *)(v19 + 16 * v17);
          uint64_t v95 = v101 + 16;
          unsigned int v103 = *a4;
          double v102 = a4[1];
          if (v102 != *a4)
          {
            do
            {
              long long v104 = *((_OWORD *)v102 - 1);
              v102 -= 16;
              *((_OWORD *)v101 - 1) = v104;
              v101 -= 16;
            }
            while (v102 != v103);
            double v102 = *a4;
          }
          *a4 = v101;
          a4[1] = v95;
          a4[2] = &v100[16 * v99];
          if (v102) {
            operator delete(v102);
          }
        }
        else
        {
          *(_OWORD *)unint64_t v94 = *(_OWORD *)(v19 + 16 * v17);
          uint64_t v95 = v94 + 16;
        }
        a4[1] = v95;
      }
      else
      {
        unint64_t v71 = (_DWORD *)v15[1];
        unint64_t v70 = v15[2];
        if ((unint64_t)v71 >= v70)
        {
          BOOL v77 = (_DWORD *)*v15;
          uint64_t v78 = ((uint64_t)v71 - *v15) >> 2;
          unint64_t v79 = v78 + 1;
          if ((unint64_t)(v78 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v80 = v70 - (void)v77;
          if (v80 >> 1 > v79) {
            unint64_t v79 = v80 >> 1;
          }
          if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v81 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v81 = v79;
          }
          if (v81)
          {
            unint64_t v82 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(p_end_cap, v81);
            BOOL v77 = (_DWORD *)*v15;
            unint64_t v71 = (_DWORD *)v15[1];
          }
          else
          {
            unint64_t v82 = 0;
          }
          int64x2_t v89 = &v82[4 * v78];
          *(_DWORD *)int64x2_t v89 = -1;
          uint16x4_t v72 = v89 + 4;
          while (v71 != v77)
          {
            int v90 = *--v71;
            *((_DWORD *)v89 - 1) = v90;
            v89 -= 4;
          }
          uint64_t *v15 = (uint64_t)v89;
          v15[1] = (uint64_t)v72;
          _OWORD v15[2] = (uint64_t)&v82[4 * v81];
          if (v77) {
            operator delete(v77);
          }
        }
        else
        {
          *unint64_t v71 = -1;
          uint16x4_t v72 = v71 + 1;
        }
        v15[1] = (uint64_t)v72;
      }
      uint64_t v14 = v177;
      uint64_t v17 = ++v18;
    }
    while (v177[1] > (unint64_t)v18);
  }
  long long v186 = 0u;
  long long v187 = 0u;
  int v188 = 1065353216;
  v185[0] = &v186;
  v185[1] = a4;
  v185[2] = a6;
  v185[3] = v14;
  v185[4] = a3;
  v183[0] = v11;
  v183[1] = v15;
  v183[2] = v16;
  v183[3] = (uint64_t *)&v186;
  v183[4] = (uint64_t *)&v184;
  v183[5] = a5;
  v183[6] = a7;
  v182[0] = &v186;
  v182[1] = v11;
  v182[2] = v15;
  v182[3] = v16;
  v182[4] = &v184;
  v182[5] = a5;
  unint64_t v105 = a2[1];
  v182[6] = a7;
  if ((v105 / 3))
  {
    uint64_t v106 = 0;
    uint64_t v179 = 3 * (v105 / 3);
    do
    {
      uint64_t v107 = *a2;
      uint64_t v108 = (v106 + 1);
      uint64_t v109 = *(unsigned int *)(*a2 + 4 * v106);
      uint64_t v110 = (v106 + 2);
      uint64_t v111 = *v11;
      uint64_t v112 = *(unsigned int *)(*a2 + 4 * v108);
      uint64_t v113 = *(unsigned int *)(*a2 + 4 * v110);
      int v114 = *(char *)(v111 + v112);
      if (v114 * *(char *)(v111 + v109) == -1)
      {
        int v114 = *(char *)(v111 + v112);
      }
      int v115 = *(char *)(v111 + v113);
      if (v114 * v115 == -1)
      {
        int v115 = *(char *)(v111 + v113);
      }
      int v116 = v115;
      if (v115 * *(char *)(v111 + v109) == -1)
      {
        int v116 = *(unsigned __int8 *)(v111 + v113);
      }
      int v117 = *(unsigned __int8 *)(v111 + v109);
      int v118 = *(unsigned __int8 *)(v111 + v112);
      if (*(unsigned char *)(v111 + v109)) {
        BOOL v119 = 0;
      }
      else {
        BOOL v119 = v118 == 0;
      }
      if (v119 && v116 == 0)
      {
        long long v11 = v181;
      }
      else
      {
        long long v11 = v181;
        if ((v117 & 0x80) == 0 && ((char)v118 & 0x80000000) == 0 && (v116 & 0x80) == 0)
        {
          int v121 = a10->__begin_[*(unsigned int *)(v107 + 4 * v106)];
          int v122 = a10->__begin_[*(unsigned int *)(v107 + 4 * v108)];
          int v123 = a10->__begin_[*(unsigned int *)(v107 + 4 * v110)];
          int64x2_t v124 = (char **)a7;
LABEL_158:
          goto LABEL_168;
        }
        if ((char)v117 <= 0 && (char)v118 <= 0 && (char)v116 <= 0)
        {
          int v121 = a9->__begin_[*(unsigned int *)(v107 + 4 * v106)];
          int v122 = a9->__begin_[*(unsigned int *)(v107 + 4 * v108)];
          int v123 = a9->__begin_[*(unsigned int *)(v107 + 4 * v110)];
          int64x2_t v124 = (char **)a5;
          goto LABEL_158;
        }
        if (!v117)
        {
          unsigned int v130 = *(_DWORD *)(v107 + 4 * v106);
          unsigned int v131 = *(_DWORD *)(v107 + 4 * v108);
          unsigned int v132 = *(_DWORD *)(v107 + 4 * v110);
LABEL_162:
          goto LABEL_168;
        }
        if (!(_BYTE)v118)
        {
          unsigned int v130 = *(_DWORD *)(v107 + 4 * v108);
          unsigned int v131 = *(_DWORD *)(v107 + 4 * v110);
          unsigned int v132 = *(_DWORD *)(v107 + 4 * v106);
          goto LABEL_162;
        }
        if (!v116)
        {
          unsigned int v130 = *(_DWORD *)(v107 + 4 * v110);
          unsigned int v131 = *(_DWORD *)(v107 + 4 * v106);
          unsigned int v132 = *(_DWORD *)(v107 + 4 * v108);
          goto LABEL_162;
        }
        if ((char)v118 * (char)v116 == 1)
        {
          unsigned int v127 = *(_DWORD *)(v107 + 4 * v106);
          unsigned int v128 = *(_DWORD *)(v107 + 4 * v108);
          unsigned int v129 = *(_DWORD *)(v107 + 4 * v110);
LABEL_167:
          goto LABEL_168;
        }
        if ((char)v117 * (char)v116 == 1)
        {
          unsigned int v127 = *(_DWORD *)(v107 + 4 * v108);
          unsigned int v128 = *(_DWORD *)(v107 + 4 * v110);
          unsigned int v129 = *(_DWORD *)(v107 + 4 * v106);
          goto LABEL_167;
        }
        if ((char)v118 * (char)v117 == 1)
        {
          unsigned int v127 = *(_DWORD *)(v107 + 4 * v110);
          unsigned int v128 = *(_DWORD *)(v107 + 4 * v106);
          unsigned int v129 = *(_DWORD *)(v107 + 4 * v108);
          goto LABEL_167;
        }
      }
LABEL_168:
      v106 += 3;
    }
    while (v179 != v106);
  }
  if (a11)
  {
    a11->__end_ = a11->__begin_;
    std::vector<unsigned int>::reserve(a11, 4 * *((void *)&v187 + 1));
    int v133 = (uint64_t *)v187;
    if ((void)v187)
    {
      uint64_t v134 = &a11->__end_cap_;
      std::vector<unsigned int>::pointer v135 = a11->__end_;
      do
      {
        unint64_t value = v134->__value_;
        if (v135 >= v134->__value_)
        {
          std::vector<unsigned int>::pointer v138 = a11->__begin_;
          uint64_t v139 = v135 - a11->__begin_;
          unint64_t v140 = v139 + 1;
          if ((unint64_t)(v139 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v141 = (char *)value - (char *)v138;
          if (v141 >> 1 > v140) {
            unint64_t v140 = v141 >> 1;
          }
          if ((unint64_t)v141 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v142 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v142 = v140;
          }
          if (v142)
          {
            unsigned int v143 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v142);
            std::vector<unsigned int>::pointer v138 = a11->__begin_;
            std::vector<unsigned int>::pointer v135 = a11->__end_;
          }
          else
          {
            unsigned int v143 = 0;
          }
          uint64_t v144 = (unsigned int *)&v143[4 * v139];
          *uint64_t v144 = *((_DWORD *)v133 + 4);
          BOOL v137 = v144 + 1;
          while (v135 != v138)
          {
            unsigned int v145 = *--v135;
            *--uint64_t v144 = v145;
          }
          unint64_t value = (unsigned int *)&v143[4 * v142];
          a11->__begin_ = v144;
          a11->__end_ = v137;
          a11->__end_cap_.__value_ = value;
          if (v138)
          {
            operator delete(v138);
            unint64_t value = v134->__value_;
          }
        }
        else
        {
          *std::vector<unsigned int>::pointer v135 = *((_DWORD *)v133 + 4);
          BOOL v137 = v135 + 1;
        }
        a11->__end_ = v137;
        if (v137 >= value)
        {
          std::vector<unsigned int>::pointer v147 = a11->__begin_;
          uint64_t v148 = v137 - a11->__begin_;
          unint64_t v149 = v148 + 1;
          if ((unint64_t)(v148 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v150 = (char *)value - (char *)v147;
          if (v150 >> 1 > v149) {
            unint64_t v149 = v150 >> 1;
          }
          if ((unint64_t)v150 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v151 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v151 = v149;
          }
          if (v151)
          {
            unint64_t v152 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v151);
            std::vector<unsigned int>::pointer v147 = a11->__begin_;
            BOOL v137 = a11->__end_;
          }
          else
          {
            unint64_t v152 = 0;
          }
          int8x16_t v153 = (unsigned int *)&v152[4 * v148];
          *int8x16_t v153 = *((_DWORD *)v133 + 5);
          unint64_t v146 = v153 + 1;
          while (v137 != v147)
          {
            unsigned int v154 = *--v137;
            *--int8x16_t v153 = v154;
          }
          unint64_t value = (unsigned int *)&v152[4 * v151];
          a11->__begin_ = v153;
          a11->__end_ = v146;
          a11->__end_cap_.__value_ = value;
          if (v147)
          {
            operator delete(v147);
            unint64_t value = v134->__value_;
          }
        }
        else
        {
          *BOOL v137 = *((_DWORD *)v133 + 5);
          unint64_t v146 = v137 + 1;
        }
        a11->__end_ = v146;
        if (v146 >= value)
        {
          std::vector<unsigned int>::pointer v156 = a11->__begin_;
          uint64_t v157 = v146 - a11->__begin_;
          unint64_t v158 = v157 + 1;
          if ((unint64_t)(v157 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v159 = (char *)value - (char *)v156;
          if (v159 >> 1 > v158) {
            unint64_t v158 = v159 >> 1;
          }
          if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v160 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v160 = v158;
          }
          if (v160)
          {
            uint64_t v161 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v160);
            std::vector<unsigned int>::pointer v156 = a11->__begin_;
            unint64_t v146 = a11->__end_;
          }
          else
          {
            uint64_t v161 = 0;
          }
          unint64_t v162 = (unsigned int *)&v161[4 * v157];
          *unint64_t v162 = *((_DWORD *)v133 + 6);
          unint64_t v155 = v162 + 1;
          while (v146 != v156)
          {
            unsigned int v163 = *--v146;
            *--unint64_t v162 = v163;
          }
          unint64_t value = (unsigned int *)&v161[4 * v160];
          a11->__begin_ = v162;
          a11->__end_ = v155;
          a11->__end_cap_.__value_ = value;
          if (v156)
          {
            operator delete(v156);
            unint64_t value = v134->__value_;
          }
        }
        else
        {
          *unint64_t v146 = *((_DWORD *)v133 + 6);
          unint64_t v155 = v146 + 1;
        }
        a11->__end_ = v155;
        if (v155 >= value)
        {
          std::vector<unsigned int>::pointer v164 = a11->__begin_;
          uint64_t v165 = v155 - a11->__begin_;
          unint64_t v166 = v165 + 1;
          if ((unint64_t)(v165 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v167 = (char *)value - (char *)v164;
          if (v167 >> 1 > v166) {
            unint64_t v166 = v167 >> 1;
          }
          if ((unint64_t)v167 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v168 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v168 = v166;
          }
          if (v168)
          {
            unint64_t v169 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v168);
            std::vector<unsigned int>::pointer v164 = a11->__begin_;
            unint64_t v155 = a11->__end_;
          }
          else
          {
            unint64_t v169 = 0;
          }
          uint64_t v170 = (unsigned int *)&v169[4 * v165];
          *uint64_t v170 = *((_DWORD *)v133 + 7);
          std::vector<unsigned int>::pointer v135 = v170 + 1;
          while (v155 != v164)
          {
            unsigned int v171 = *--v155;
            *--uint64_t v170 = v171;
          }
          a11->__begin_ = v170;
          a11->__end_ = v135;
          a11->__end_cap_.__value_ = (unsigned int *)&v169[4 * v168];
          if (v164) {
            operator delete(v164);
          }
        }
        else
        {
          *unint64_t v155 = *((_DWORD *)v133 + 7);
          std::vector<unsigned int>::pointer v135 = v155 + 1;
        }
        a11->__end_ = v135;
        int v133 = (uint64_t *)*v133;
      }
      while (v133);
    }
  }
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)&v186);
}

uint64_t geom::split_triangle_mesh_with_plane<double>(void *a1, uint64_t *a2, float64x2_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7, unint64_t *a8, std::vector<unsigned int> *a9, std::vector<unsigned int> *a10, std::vector<unsigned int> *a11)
{
}

uint64_t geom::anonymous namespace'::split_triangle_mesh_with_plane_impl<double>(void *a1, uint64_t *a2, float64x2_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7, unint64_t *a8, std::vector<unsigned int> *a9, std::vector<unsigned int> *a10, std::vector<unsigned int> *a11)
{
  long long v11 = (uint64_t *)a8;
  uint64_t v14 = a1;
  BOOL v15 = (uint64_t *)a9;
  uint64_t v16 = (uint64_t *)a10;
  a4[1] = *a4;
  a5[1] = *a5;
  a6[1] = *a6;
  a7[1] = *a7;
  a8[1] = *a8;
  a9->__end_ = a9->__begin_;
  a10->__end_ = a10->__begin_;
  std::vector<signed char>::reserve(a8, a1[1]);
  std::vector<unsigned int>::reserve(a9, v14[1]);
  std::vector<unsigned int>::reserve(a10, v14[1]);
  unsigned int v193 = v11;
  if (v14[1])
  {
    uint64_t v17 = 0;
    unsigned int v18 = 0;
    uint64_t p_end_cap = (uint64_t)&a9->__end_cap_;
    uint64_t v186 = (uint64_t)&a10->__end_cap_;
    uint64_t v189 = v14;
    do
    {
      uint64_t v19 = *v14;
      float64_t v20 = a3[2].f64[0]
          + vmulq_f64(*(float64x2_t *)(*v14 + 32 * v17 + 16), a3[1]).f64[0]
          + vaddvq_f64(vmulq_f64(*(float64x2_t *)(*v14 + 32 * v17), *a3));
      char v21 = (v20 > 2.22044605e-16) - (v20 < -2.22044605e-16);
      int32x2_t v23 = (unsigned char *)v11[1];
      unint64_t v22 = v11[2];
      if ((unint64_t)v23 >= v22)
      {
        uint64_t v25 = *v11;
        int8x8_t v26 = &v23[-v25];
        uint64_t v27 = (uint64_t)&v23[-v25 + 1];
        if (v27 < 0) {
          goto LABEL_238;
        }
        unint64_t v28 = v22 - v25;
        if (2 * v28 > v27) {
          uint64_t v27 = 2 * v28;
        }
        if (v28 >= 0x3FFFFFFFFFFFFFFFLL) {
          size_t v29 = 0x7FFFFFFFFFFFFFFFLL;
        }
        else {
          size_t v29 = v27;
        }
        if (v29) {
          uint64_t v30 = (char *)operator new(v29);
        }
        else {
          uint64_t v30 = 0;
        }
        int8x8_t v31 = &v26[(void)v30];
        uint64x2_t v32 = &v26[(void)v30];
        *uint64x2_t v32 = v21;
        int16x4_t v24 = v32 + 1;
        if (v23 == (unsigned char *)v25)
        {
          long long v11 = v193;
        }
        else
        {
          float64x2_t v33 = &v23[~v25];
          do
          {
            char v34 = *--v23;
            (v33--)[(void)v30] = v34;
          }
          while (v23 != (unsigned char *)v25);
          long long v11 = v193;
          int32x2_t v23 = (unsigned char *)*v193;
          int8x8_t v31 = v30;
        }
        uint64_t *v11 = (uint64_t)v31;
        v11[1] = (uint64_t)v24;
        v11[2] = (uint64_t)&v30[v29];
        if (v23) {
          operator delete(v23);
        }
        uint64_t v16 = (uint64_t *)a10;
        BOOL v15 = (uint64_t *)a9;
      }
      else
      {
        *int32x2_t v23 = v21;
        int16x4_t v24 = v23 + 1;
        uint64_t v16 = (uint64_t *)a10;
      }
      v11[1] = (uint64_t)v24;
      if ((char)*(v24 - 1) < 0)
      {
        float64x2_t v40 = (_DWORD *)v16[1];
        unint64_t v39 = v16[2];
        if ((unint64_t)v40 >= v39)
        {
          double v48 = (_DWORD *)*v16;
          uint64_t v49 = ((uint64_t)v40 - *v16) >> 2;
          unint64_t v50 = v49 + 1;
          if ((unint64_t)(v49 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v51 = v39 - (void)v48;
          if (v51 >> 1 > v50) {
            unint64_t v50 = v51 >> 1;
          }
          if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v52 = v50;
          }
          if (v52)
          {
            double v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v186, v52);
            double v48 = (_DWORD *)*v16;
            float64x2_t v40 = (_DWORD *)v16[1];
          }
          else
          {
            double v53 = 0;
          }
          unint64_t v74 = &v53[4 * v49];
          *(_DWORD *)unint64_t v74 = -1;
          int8x16_t v41 = v74 + 4;
          while (v40 != v48)
          {
            int v75 = *--v40;
            *((_DWORD *)v74 - 1) = v75;
            v74 -= 4;
          }
          *uint64_t v16 = (uint64_t)v74;
          v16[1] = (uint64_t)v41;
          void v16[2] = (uint64_t)&v53[4 * v52];
          if (v48) {
            operator delete(v48);
          }
        }
        else
        {
          *float64x2_t v40 = -1;
          int8x16_t v41 = v40 + 1;
        }
        v16[1] = (uint64_t)v41;
      }
      else
      {
        unint64_t v35 = (unint64_t)(a6[1] - *a6) >> 5;
        int8x8_t v37 = (_DWORD *)v16[1];
        unint64_t v36 = v16[2];
        if ((unint64_t)v37 >= v36)
        {
          int8x8_t v42 = (_DWORD *)*v16;
          uint64_t v43 = ((uint64_t)v37 - *v16) >> 2;
          unint64_t v44 = v43 + 1;
          if ((unint64_t)(v43 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v45 = v36 - (void)v42;
          if (v45 >> 1 > v44) {
            unint64_t v44 = v45 >> 1;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v46 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v46 = v44;
          }
          if (v46)
          {
            double v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v186, v46);
            int8x8_t v42 = (_DWORD *)*v16;
            int8x8_t v37 = (_DWORD *)v16[1];
          }
          else
          {
            double v47 = 0;
          }
          double v54 = &v47[4 * v43];
          *(_DWORD *)double v54 = v35;
          uint64x2_t v38 = v54 + 4;
          while (v37 != v42)
          {
            int v55 = *--v37;
            *((_DWORD *)v54 - 1) = v55;
            v54 -= 4;
          }
          *uint64_t v16 = (uint64_t)v54;
          v16[1] = (uint64_t)v38;
          void v16[2] = (uint64_t)&v47[4 * v46];
          if (v42) {
            operator delete(v42);
          }
        }
        else
        {
          *int8x8_t v37 = v35;
          uint64x2_t v38 = v37 + 1;
        }
        v16[1] = (uint64_t)v38;
        unint64_t v56 = a6[1];
        unint64_t v57 = (unint64_t)a6[2];
        if ((unint64_t)v56 >= v57)
        {
          uint64_t v61 = (v56 - *a6) >> 5;
          unint64_t v62 = v61 + 1;
          BOOL v15 = (uint64_t *)a9;
          if ((unint64_t)(v61 + 1) >> 59) {
            goto LABEL_238;
          }
          uint64_t v63 = v57 - (void)*a6;
          if (v63 >> 4 > v62) {
            unint64_t v62 = v63 >> 4;
          }
          if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v64 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v64 = v62;
          }
          if (v64) {
            double v65 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a6 + 2), v64);
          }
          else {
            double v65 = 0;
          }
          double v66 = &v65[32 * v61];
          long long v67 = (_OWORD *)(v19 + 32 * v17);
          long long v68 = v67[1];
          *(_OWORD *)double v66 = *v67;
          *((_OWORD *)v66 + 1) = v68;
          unint64_t v70 = *a6;
          int v69 = a6[1];
          unint64_t v71 = v66;
          if (v69 != *a6)
          {
            do
            {
              long long v72 = *((_OWORD *)v69 - 2);
              long long v73 = *((_OWORD *)v69 - 1);
              v69 -= 32;
              *((_OWORD *)v71 - 2) = v72;
              *((_OWORD *)v71 - 1) = v73;
              v71 -= 32;
            }
            while (v69 != v70);
            int v69 = *a6;
          }
          uint64_t v60 = v66 + 32;
          *a6 = v71;
          a6[1] = v66 + 32;
          a6[2] = &v65[32 * v64];
          if (v69) {
            operator delete(v69);
          }
        }
        else
        {
          char v58 = (_OWORD *)(v19 + 32 * v17);
          long long v59 = v58[1];
          *(_OWORD *)unint64_t v56 = *v58;
          *((_OWORD *)v56 + 1) = v59;
          uint64_t v60 = v56 + 32;
          BOOL v15 = (uint64_t *)a9;
        }
        a6[1] = v60;
      }
      if (*(char *)(v11[1] - 1) <= 0)
      {
        unint64_t v79 = (unint64_t)(a4[1] - *a4) >> 5;
        std::vector<unsigned int>::pointer end = (std::vector<unsigned int>::pointer)v15[1];
        unint64_t v80 = v15[2];
        if ((unint64_t)end >= v80)
        {
          begiunsigned __int16 n = (std::vector<unsigned int>::pointer)*v15;
          uint64_t v90 = ((uint64_t)end - *v15) >> 2;
          unint64_t v91 = v90 + 1;
          if ((unint64_t)(v90 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v92 = v80 - (void)begin;
          if (v92 >> 1 > v91) {
            unint64_t v91 = v92 >> 1;
          }
          if ((unint64_t)v92 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v93 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v93 = v91;
          }
          if (v93)
          {
            unint64_t v94 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(p_end_cap, v93);
            begiunsigned __int16 n = a9->__begin_;
            std::vector<unsigned int>::pointer end = a9->__end_;
          }
          else
          {
            unint64_t v94 = 0;
          }
          uint64_t v97 = (unsigned int *)&v94[4 * v90];
          *uint64_t v97 = v79;
          unint64_t v82 = v97 + 1;
          while (end != begin)
          {
            unsigned int v98 = *--end;
            *--uint64_t v97 = v98;
          }
          a9->__begin_ = v97;
          a9->__end_ = v82;
          a9->__end_cap_.__value_ = (unsigned int *)&v94[4 * v93];
          if (begin) {
            operator delete(begin);
          }
        }
        else
        {
          unsigned int *end = v79;
          unint64_t v82 = end + 1;
        }
        a9->__end_ = v82;
        BOOL v15 = (uint64_t *)a9;
        unint64_t v99 = a4[1];
        unint64_t v100 = (unint64_t)a4[2];
        if ((unint64_t)v99 >= v100)
        {
          uint64_t v104 = (v99 - *a4) >> 5;
          unint64_t v105 = v104 + 1;
          if ((unint64_t)(v104 + 1) >> 59) {
LABEL_238:
          }
            abort();
          uint64_t v106 = v100 - (void)*a4;
          if (v106 >> 4 > v105) {
            unint64_t v105 = v106 >> 4;
          }
          if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v107 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v107 = v105;
          }
          if (v107) {
            uint64_t v108 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a4 + 2), v107);
          }
          else {
            uint64_t v108 = 0;
          }
          uint64_t v109 = &v108[32 * v104];
          uint64_t v110 = (_OWORD *)(v19 + 32 * v17);
          long long v111 = v110[1];
          *(_OWORD *)uint64_t v109 = *v110;
          *((_OWORD *)v109 + 1) = v111;
          uint64_t v113 = *a4;
          uint64_t v112 = a4[1];
          int v114 = v109;
          if (v112 != *a4)
          {
            do
            {
              long long v115 = *((_OWORD *)v112 - 2);
              long long v116 = *((_OWORD *)v112 - 1);
              v112 -= 32;
              *((_OWORD *)v114 - 2) = v115;
              *((_OWORD *)v114 - 1) = v116;
              v114 -= 32;
            }
            while (v112 != v113);
            uint64_t v112 = *a4;
          }
          unsigned int v103 = v109 + 32;
          *a4 = v114;
          a4[1] = v109 + 32;
          a4[2] = &v108[32 * v107];
          if (v112) {
            operator delete(v112);
          }
        }
        else
        {
          uint64_t v101 = (_OWORD *)(v19 + 32 * v17);
          long long v102 = v101[1];
          *(_OWORD *)unint64_t v99 = *v101;
          *((_OWORD *)v99 + 1) = v102;
          unsigned int v103 = v99 + 32;
        }
        a4[1] = v103;
      }
      else
      {
        BOOL v77 = (_DWORD *)v15[1];
        unint64_t v76 = v15[2];
        if ((unint64_t)v77 >= v76)
        {
          unint64_t v83 = (_DWORD *)*v15;
          uint64_t v84 = ((uint64_t)v77 - *v15) >> 2;
          unint64_t v85 = v84 + 1;
          if ((unint64_t)(v84 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v86 = v76 - (void)v83;
          if (v86 >> 1 > v85) {
            unint64_t v85 = v86 >> 1;
          }
          if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v87 = v85;
          }
          if (v87)
          {
            uint64_t v88 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(p_end_cap, v87);
            unint64_t v83 = (_DWORD *)*v15;
            BOOL v77 = (_DWORD *)v15[1];
          }
          else
          {
            uint64_t v88 = 0;
          }
          uint64_t v95 = &v88[4 * v84];
          *(_DWORD *)uint64_t v95 = -1;
          uint64_t v78 = v95 + 4;
          while (v77 != v83)
          {
            int v96 = *--v77;
            *((_DWORD *)v95 - 1) = v96;
            v95 -= 4;
          }
          uint64_t *v15 = (uint64_t)v95;
          v15[1] = (uint64_t)v78;
          _OWORD v15[2] = (uint64_t)&v88[4 * v87];
          if (v83) {
            operator delete(v83);
          }
        }
        else
        {
          *BOOL v77 = -1;
          uint64_t v78 = v77 + 1;
        }
        v15[1] = (uint64_t)v78;
      }
      uint64_t v14 = v189;
      uint64_t v17 = ++v18;
    }
    while (v189[1] > (unint64_t)v18);
  }
  long long v198 = 0u;
  long long v199 = 0u;
  int v200 = 1065353216;
  v197[0] = &v198;
  v197[1] = a4;
  v197[2] = a6;
  v197[3] = v14;
  v197[4] = a3;
  v195[0] = v11;
  v195[1] = v15;
  v195[2] = v16;
  v195[3] = (uint64_t *)&v198;
  v195[4] = (uint64_t *)&v196;
  v195[5] = a5;
  v195[6] = a7;
  v194[0] = &v198;
  v194[1] = v11;
  v194[2] = v15;
  v194[3] = v16;
  v194[4] = &v196;
  v194[5] = a5;
  unint64_t v117 = a2[1];
  v194[6] = a7;
  if ((v117 / 3))
  {
    uint64_t v118 = 0;
    uint64_t v191 = 3 * (v117 / 3);
    do
    {
      uint64_t v119 = *a2;
      uint64_t v120 = (v118 + 1);
      uint64_t v121 = *(unsigned int *)(*a2 + 4 * v118);
      uint64_t v122 = (v118 + 2);
      uint64_t v123 = *v11;
      uint64_t v124 = *(unsigned int *)(*a2 + 4 * v120);
      uint64_t v125 = *(unsigned int *)(*a2 + 4 * v122);
      int v126 = *(char *)(v123 + v124);
      if (v126 * *(char *)(v123 + v121) == -1)
      {
        int v126 = *(char *)(v123 + v124);
      }
      int v127 = *(char *)(v123 + v125);
      if (v126 * v127 == -1)
      {
        int v127 = *(char *)(v123 + v125);
      }
      int v128 = v127;
      if (v127 * *(char *)(v123 + v121) == -1)
      {
        int v128 = *(unsigned __int8 *)(v123 + v125);
      }
      int v129 = *(unsigned __int8 *)(v123 + v121);
      int v130 = *(unsigned __int8 *)(v123 + v124);
      if (*(unsigned char *)(v123 + v121)) {
        BOOL v131 = 0;
      }
      else {
        BOOL v131 = v130 == 0;
      }
      if (v131 && v128 == 0)
      {
        long long v11 = v193;
      }
      else
      {
        long long v11 = v193;
        if ((v129 & 0x80) == 0 && ((char)v130 & 0x80000000) == 0 && (v128 & 0x80) == 0)
        {
          int v133 = a10->__begin_[*(unsigned int *)(v119 + 4 * v118)];
          int v134 = a10->__begin_[*(unsigned int *)(v119 + 4 * v120)];
          int v135 = a10->__begin_[*(unsigned int *)(v119 + 4 * v122)];
          uint64_t v136 = (char **)a7;
LABEL_158:
          goto LABEL_168;
        }
        if ((char)v129 <= 0 && (char)v130 <= 0 && (char)v128 <= 0)
        {
          int v133 = a9->__begin_[*(unsigned int *)(v119 + 4 * v118)];
          int v134 = a9->__begin_[*(unsigned int *)(v119 + 4 * v120)];
          int v135 = a9->__begin_[*(unsigned int *)(v119 + 4 * v122)];
          uint64_t v136 = (char **)a5;
          goto LABEL_158;
        }
        if (!v129)
        {
          unsigned int v142 = *(_DWORD *)(v119 + 4 * v118);
          unsigned int v143 = *(_DWORD *)(v119 + 4 * v120);
          unsigned int v144 = *(_DWORD *)(v119 + 4 * v122);
LABEL_162:
          goto LABEL_168;
        }
        if (!(_BYTE)v130)
        {
          unsigned int v142 = *(_DWORD *)(v119 + 4 * v120);
          unsigned int v143 = *(_DWORD *)(v119 + 4 * v122);
          unsigned int v144 = *(_DWORD *)(v119 + 4 * v118);
          goto LABEL_162;
        }
        if (!v128)
        {
          unsigned int v142 = *(_DWORD *)(v119 + 4 * v122);
          unsigned int v143 = *(_DWORD *)(v119 + 4 * v118);
          unsigned int v144 = *(_DWORD *)(v119 + 4 * v120);
          goto LABEL_162;
        }
        if ((char)v130 * (char)v128 == 1)
        {
          unsigned int v139 = *(_DWORD *)(v119 + 4 * v118);
          unsigned int v140 = *(_DWORD *)(v119 + 4 * v120);
          unsigned int v141 = *(_DWORD *)(v119 + 4 * v122);
LABEL_167:
          goto LABEL_168;
        }
        if ((char)v129 * (char)v128 == 1)
        {
          unsigned int v139 = *(_DWORD *)(v119 + 4 * v120);
          unsigned int v140 = *(_DWORD *)(v119 + 4 * v122);
          unsigned int v141 = *(_DWORD *)(v119 + 4 * v118);
          goto LABEL_167;
        }
        if ((char)v130 * (char)v129 == 1)
        {
          unsigned int v139 = *(_DWORD *)(v119 + 4 * v122);
          unsigned int v140 = *(_DWORD *)(v119 + 4 * v118);
          unsigned int v141 = *(_DWORD *)(v119 + 4 * v120);
          goto LABEL_167;
        }
      }
LABEL_168:
      v118 += 3;
    }
    while (v191 != v118);
  }
  if (a11)
  {
    a11->__end_ = a11->__begin_;
    std::vector<unsigned int>::reserve(a11, 4 * *((void *)&v199 + 1));
    unsigned int v145 = (uint64_t *)v199;
    if ((void)v199)
    {
      unint64_t v146 = &a11->__end_cap_;
      std::vector<unsigned int>::pointer v147 = a11->__end_;
      do
      {
        unint64_t value = v146->__value_;
        if (v147 >= v146->__value_)
        {
          std::vector<unsigned int>::pointer v150 = a11->__begin_;
          uint64_t v151 = v147 - a11->__begin_;
          unint64_t v152 = v151 + 1;
          if ((unint64_t)(v151 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v153 = (char *)value - (char *)v150;
          if (v153 >> 1 > v152) {
            unint64_t v152 = v153 >> 1;
          }
          if ((unint64_t)v153 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v154 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v154 = v152;
          }
          if (v154)
          {
            unint64_t v155 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v154);
            std::vector<unsigned int>::pointer v150 = a11->__begin_;
            std::vector<unsigned int>::pointer v147 = a11->__end_;
          }
          else
          {
            unint64_t v155 = 0;
          }
          std::vector<unsigned int>::pointer v156 = (unsigned int *)&v155[4 * v151];
          *std::vector<unsigned int>::pointer v156 = *((_DWORD *)v145 + 4);
          unint64_t v149 = v156 + 1;
          while (v147 != v150)
          {
            unsigned int v157 = *--v147;
            *--std::vector<unsigned int>::pointer v156 = v157;
          }
          unint64_t value = (unsigned int *)&v155[4 * v154];
          a11->__begin_ = v156;
          a11->__end_ = v149;
          a11->__end_cap_.__value_ = value;
          if (v150)
          {
            operator delete(v150);
            unint64_t value = v146->__value_;
          }
        }
        else
        {
          *std::vector<unsigned int>::pointer v147 = *((_DWORD *)v145 + 4);
          unint64_t v149 = v147 + 1;
        }
        a11->__end_ = v149;
        if (v149 >= value)
        {
          std::vector<unsigned int>::pointer v159 = a11->__begin_;
          uint64_t v160 = v149 - a11->__begin_;
          unint64_t v161 = v160 + 1;
          if ((unint64_t)(v160 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v162 = (char *)value - (char *)v159;
          if (v162 >> 1 > v161) {
            unint64_t v161 = v162 >> 1;
          }
          if ((unint64_t)v162 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v163 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v163 = v161;
          }
          if (v163)
          {
            std::vector<unsigned int>::pointer v164 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v163);
            std::vector<unsigned int>::pointer v159 = a11->__begin_;
            unint64_t v149 = a11->__end_;
          }
          else
          {
            std::vector<unsigned int>::pointer v164 = 0;
          }
          uint64_t v165 = (unsigned int *)&v164[4 * v160];
          unsigned int *v165 = *((_DWORD *)v145 + 5);
          unint64_t v158 = v165 + 1;
          while (v149 != v159)
          {
            unsigned int v166 = *--v149;
            *--uint64_t v165 = v166;
          }
          unint64_t value = (unsigned int *)&v164[4 * v163];
          a11->__begin_ = v165;
          a11->__end_ = v158;
          a11->__end_cap_.__value_ = value;
          if (v159)
          {
            operator delete(v159);
            unint64_t value = v146->__value_;
          }
        }
        else
        {
          *unint64_t v149 = *((_DWORD *)v145 + 5);
          unint64_t v158 = v149 + 1;
        }
        a11->__end_ = v158;
        if (v158 >= value)
        {
          std::vector<unsigned int>::pointer v168 = a11->__begin_;
          uint64_t v169 = v158 - a11->__begin_;
          unint64_t v170 = v169 + 1;
          if ((unint64_t)(v169 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v171 = (char *)value - (char *)v168;
          if (v171 >> 1 > v170) {
            unint64_t v170 = v171 >> 1;
          }
          if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v172 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v172 = v170;
          }
          if (v172)
          {
            uint64_t v173 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v172);
            std::vector<unsigned int>::pointer v168 = a11->__begin_;
            unint64_t v158 = a11->__end_;
          }
          else
          {
            uint64_t v173 = 0;
          }
          uint64_t v174 = (unsigned int *)&v173[4 * v169];
          unsigned int *v174 = *((_DWORD *)v145 + 6);
          uint64_t v167 = v174 + 1;
          while (v158 != v168)
          {
            unsigned int v175 = *--v158;
            *--uint64_t v174 = v175;
          }
          unint64_t value = (unsigned int *)&v173[4 * v172];
          a11->__begin_ = v174;
          a11->__end_ = v167;
          a11->__end_cap_.__value_ = value;
          if (v168)
          {
            operator delete(v168);
            unint64_t value = v146->__value_;
          }
        }
        else
        {
          *unint64_t v158 = *((_DWORD *)v145 + 6);
          uint64_t v167 = v158 + 1;
        }
        a11->__end_ = v167;
        if (v167 >= value)
        {
          std::vector<unsigned int>::pointer v176 = a11->__begin_;
          uint64_t v177 = v167 - a11->__begin_;
          unint64_t v178 = v177 + 1;
          if ((unint64_t)(v177 + 1) >> 62) {
            goto LABEL_238;
          }
          uint64_t v179 = (char *)value - (char *)v176;
          if (v179 >> 1 > v178) {
            unint64_t v178 = v179 >> 1;
          }
          if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v180 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v180 = v178;
          }
          if (v180)
          {
            int v181 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&a11->__end_cap_, v180);
            std::vector<unsigned int>::pointer v176 = a11->__begin_;
            uint64_t v167 = a11->__end_;
          }
          else
          {
            int v181 = 0;
          }
          float32x4_t v182 = (unsigned int *)&v181[4 * v177];
          *float32x4_t v182 = *((_DWORD *)v145 + 7);
          std::vector<unsigned int>::pointer v147 = v182 + 1;
          while (v167 != v176)
          {
            unsigned int v183 = *--v167;
            *--float32x4_t v182 = v183;
          }
          a11->__begin_ = v182;
          a11->__end_ = v147;
          a11->__end_cap_.__value_ = (unsigned int *)&v181[4 * v180];
          if (v176) {
            operator delete(v176);
          }
        }
        else
        {
          *uint64_t v167 = *((_DWORD *)v145 + 7);
          std::vector<unsigned int>::pointer v147 = v167 + 1;
        }
        a11->__end_ = v147;
        unsigned int v145 = (uint64_t *)*v145;
      }
      while (v145);
    }
  }
  return std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)&v198);
}

uint64_t geom::split_triangle_mesh_with_plane<float>(void *a1, uint64_t *a2, float32x4_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7, unint64_t *a8, std::vector<unsigned int> *a9, std::vector<unsigned int> *a10)
{
}

uint64_t geom::split_triangle_mesh_with_plane<double>(void *a1, uint64_t *a2, float64x2_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7, unint64_t *a8, std::vector<unsigned int> *a9, std::vector<unsigned int> *a10)
{
}

void geom::split_triangle_mesh_with_plane<float>(void *a1, uint64_t *a2, float32x4_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7)
{
  unint64_t v9 = 0;
  __n128 v10 = 0;
  uint64_t v11 = 0;
  memset(&v8, 0, sizeof(v8));
  memset(&__p, 0, sizeof(__p));
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v8.__begin_)
  {
    v8.__end_ = v8.__begin_;
    operator delete(v8.__begin_);
  }
  if (v9)
  {
    __n128 v10 = v9;
    operator delete(v9);
  }
}

void geom::split_triangle_mesh_with_plane<double>(void *a1, uint64_t *a2, float64x2_t *a3, char **a4, uint64_t *a5, char **a6, uint64_t *a7)
{
  unint64_t v9 = 0;
  __n128 v10 = 0;
  uint64_t v11 = 0;
  memset(&v8, 0, sizeof(v8));
  memset(&__p, 0, sizeof(__p));
  if (__p.__begin_)
  {
    __p.__end_ = __p.__begin_;
    operator delete(__p.__begin_);
  }
  if (v8.__begin_)
  {
    v8.__end_ = v8.__begin_;
    operator delete(v8.__begin_);
  }
  if (v9)
  {
    __n128 v10 = v9;
    operator delete(v9);
  }
}

uint64_t geom_split_triangle_mesh_with_plane_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  v27[0] = a2;
  v27[1] = a1;
  v26[0] = a4;
  v26[1] = 3 * a3;
  float32x4_t v15 = a5[1];
  v25[0] = *a5;
  v25[1] = v15;
  uint64_t v16 = (char **)geom::collection_to_vector<float>(a6);
  uint64_t v17 = (uint64_t *)geom::collection_to_vector<float>(a7);
  unsigned int v18 = (char **)geom::collection_to_vector<float>(a8);
  uint64_t v19 = (uint64_t *)geom::collection_to_vector<float>(a9);
  float64_t v20 = (unint64_t *)geom::collection_to_vector<float>(a10);
  char v21 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a11);
  unint64_t v22 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a12);
  int32x2_t v23 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a13);
}

uint64_t geom_split_triangle_mesh_with_plane_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float64x2_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  v26[0] = a2;
  v26[1] = a1;
  v25[0] = a4;
  v25[1] = 3 * a3;
  float64x2_t v15 = a5[1];
  v27[0] = *a5;
  v27[1] = v15;
  void v27[2] = a5[2];
  uint64_t v16 = (char **)geom::collection_to_vector<float>(a6);
  uint64_t v17 = (uint64_t *)geom::collection_to_vector<float>(a7);
  unsigned int v18 = (char **)geom::collection_to_vector<float>(a8);
  uint64_t v19 = (uint64_t *)geom::collection_to_vector<float>(a9);
  float64_t v20 = (unint64_t *)geom::collection_to_vector<float>(a10);
  char v21 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a11);
  unint64_t v22 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a12);
  int32x2_t v23 = (std::vector<unsigned int> *)geom::collection_to_vector<float>(a13);
}

void std::vector<signed char>::reserve(unint64_t *a1, size_t __sz)
{
  unint64_t v2 = *a1;
  if (a1[2] - *a1 < __sz)
  {
    if ((__sz & 0x8000000000000000) != 0) {
      abort();
    }
    char v5 = (char *)a1[1];
    uint64_t v6 = operator new(__sz);
    unint64_t v7 = &v5[(void)v6 - v2];
    std::vector<unsigned int> v8 = v7;
    if (v5 != (char *)v2)
    {
      unint64_t v9 = &v5[~v2];
      do
      {
        char v10 = *--v5;
        (v9--)[(void)v6] = v10;
      }
      while (v5 != (char *)v2);
      std::vector<unsigned int> v8 = v6;
    }
    *a1 = (unint64_t)v8;
    a1[1] = (unint64_t)v7;
    a1[2] = (unint64_t)&v6[__sz];
    if (v2)
    {
      operator delete((void *)v2);
    }
  }
}

_DWORD *geom::anonymous namespace'::split_triangle_mesh_with_plane_impl<float>(geom::slice<geom::vector_type<float,(unsigned char)3,void>::value> const&,geom::slice<unsigned int> const&,geom::general_plane<float,(unsigned char)3> const&,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<signed char> &,std::vector<unsigned int> &,std::vector<unsigned int> &,std::vector<unsigned int>*)::{lambda(unsigned int,unsigned int)#1}::operator()(uint64_t a1, unsigned int a2, unsigned int a3)
{
  uint64_t v6 = *(float **)a1;
  unsigned int v56 = a2;
  unsigned int v57 = a3;
  if (!result)
  {
    unint64_t v9 = *(void ***)(a1 + 8);
    std::vector<unsigned int> v8 = *(uint64_t **)(a1 + 16);
    char v10 = (float32x4_t *)v9[1];
    uint64_t v11 = *(float32x4_t **)(a1 + 32);
    uint64_t v12 = **(void **)(a1 + 24);
    float32x4_t v13 = *(float32x4_t *)(v12 + 16 * a2);
    float32x4_t v14 = *(float32x4_t *)(v12 + 16 * a3);
    float32x4_t v15 = vsubq_f32(v14, v13);
    float32x4_t v16 = *v11;
    float32x4_t v17 = vmulq_f32(*v11, v15);
    LODWORD(v18) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).u32[0];
    if (fabsf(v18) <= 0.00000011921)
    {
      float32x4_t v23 = vmulq_f32(v13, v16);
      float32x4_t v21 = 0uLL;
      if ((float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1))).f32[0]+ v11[1].f32[0]) <= 0.00000011921)
      {
        v24.i64[0] = 0x3F0000003F000000;
        v24.i64[1] = 0x3F0000003F000000;
        float32x4_t v21 = vmulq_f32(vaddq_f32(v13, v14), v24);
      }
    }
    else
    {
      float32x4_t v19 = vmulq_f32(v13, v16);
      float v20 = (float)((float)-v11[1].f32[0]
                  - vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0])/ v18;
      float32x4_t v21 = 0uLL;
      if (v20 >= 0.0 && v20 <= 1.0) {
        float32x4_t v21 = vmlaq_n_f32(v13, v15, v20);
      }
    }
    uint64_t v26 = *v8;
    uint64_t v25 = v8[1];
    uint64_t v27 = ((char *)v10 - (unsigned char *)*v9) >> 4;
    unint64_t v28 = (unint64_t)v9[2];
    if ((unint64_t)v10 >= v28)
    {
      if ((unint64_t)(v27 + 1) >> 60) {
        goto LABEL_44;
      }
      uint64_t v30 = v28 - (void)*v9;
      uint64_t v31 = v30 >> 3;
      if (v30 >> 3 <= (unint64_t)(v27 + 1)) {
        uint64_t v31 = v27 + 1;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v32 = v31;
      }
      float32x4_t v54 = v21;
      if (v32)
      {
        float64x2_t v33 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v9 + 2), v32);
        float32x4_t v21 = v54;
      }
      else
      {
        float64x2_t v33 = 0;
      }
      char v34 = (float32x4_t *)&v33[16 * v27];
      unint64_t v35 = &v33[16 * v32];
      *char v34 = v21;
      f32 = (_OWORD *)v34[1].f32;
      int8x8_t v37 = (float32x4_t *)*v9;
      unint64_t v36 = (float32x4_t *)v9[1];
      if (v36 != *v9)
      {
        do
        {
          float32x4_t v38 = v36[-1];
          --v36;
          v34[-1] = v38;
          --v34;
        }
        while (v36 != v37);
        unint64_t v36 = (float32x4_t *)*v9;
      }
      *unint64_t v9 = v34;
      v9[1] = f32;
      float64x2_t v9[2] = v35;
      if (v36)
      {
        operator delete(v36);
        float32x4_t v21 = v54;
      }
    }
    else
    {
      float32x4_t *v10 = v21;
      f32 = (_OWORD *)v10[1].f32;
    }
    v9[1] = f32;
    unint64_t v39 = *(void ***)(a1 + 16);
    float64x2_t v40 = (float32x4_t *)v39[1];
    unint64_t v41 = (unint64_t)v39[2];
    if ((unint64_t)v40 < v41)
    {
      *float64x2_t v40 = v21;
      int8x8_t v42 = (_OWORD *)v40[1].f32;
LABEL_42:
      v39[1] = v42;
      double v53 = *(float **)a1;
      unsigned int v56 = a2;
      unsigned int v57 = a3;
      *unint64_t result = v27;
      result[1] = (unint64_t)(v25 - v26) >> 4;
      return result;
    }
    uint64_t v43 = ((char *)v40 - (unsigned char *)*v39) >> 4;
    if (!((unint64_t)(v43 + 1) >> 60))
    {
      uint64_t v44 = v41 - (void)*v39;
      uint64_t v45 = v44 >> 3;
      if (v44 >> 3 <= (unint64_t)(v43 + 1)) {
        uint64_t v45 = v43 + 1;
      }
      if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v45;
      }
      if (v46)
      {
        float32x4_t v55 = v21;
        double v47 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v39 + 2), v46);
        float32x4_t v21 = v55;
      }
      else
      {
        double v47 = 0;
      }
      double v48 = (float32x4_t *)&v47[16 * v43];
      uint64_t v49 = &v47[16 * v46];
      float32x4_t *v48 = v21;
      int8x8_t v42 = (_OWORD *)v48[1].f32;
      uint64_t v51 = (float32x4_t *)*v39;
      unint64_t v50 = (float32x4_t *)v39[1];
      if (v50 != *v39)
      {
        do
        {
          float32x4_t v52 = v50[-1];
          --v50;
          v48[-1] = v52;
          --v48;
        }
        while (v50 != v51);
        unint64_t v50 = (float32x4_t *)*v39;
      }
      *unint64_t v39 = v48;
      v39[1] = v42;
      v39[2] = v49;
      if (v50) {
        operator delete(v50);
      }
      goto LABEL_42;
    }
LABEL_44:
    abort();
  }
  return result;
}

void geom::anonymous namespace'::split_triangle_mesh_with_plane_impl<float>(geom::slice<geom::vector_type<float,(unsigned char)3,void>::value> const&,geom::slice<unsigned int> const&,geom::general_plane<float,(unsigned char)3> const&,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<signed char> &,std::vector<unsigned int> &,std::vector<unsigned int> &,std::vector<unsigned int>*)::{lambda(std::vector<unsigned int> &,unsigned int,unsigned int,unsigned int)#1}::operator()(char **a1, int a2, int a3, int a4)
{
  unint64_t v9 = a1 + 2;
  std::vector<unsigned int> v8 = a1[2];
  char v10 = a1[1];
  if (v10 >= v8)
  {
    uint64_t v12 = *a1;
    uint64_t v13 = (v10 - *a1) >> 2;
    unint64_t v14 = v13 + 1;
    if ((unint64_t)(v13 + 1) >> 62) {
      goto LABEL_50;
    }
    uint64_t v15 = v8 - v12;
    if (v15 >> 1 > v14) {
      unint64_t v14 = v15 >> 1;
    }
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v16 = v14;
    }
    if (v16)
    {
      float32x4_t v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v9, v16);
      uint64_t v12 = *a1;
      char v10 = a1[1];
    }
    else
    {
      float32x4_t v17 = 0;
    }
    float v18 = &v17[4 * v13];
    std::vector<unsigned int> v8 = &v17[4 * v16];
    *(_DWORD *)float v18 = a2;
    uint64_t v11 = v18 + 4;
    while (v10 != v12)
    {
      int v19 = *((_DWORD *)v10 - 1);
      v10 -= 4;
      *((_DWORD *)v18 - 1) = v19;
      v18 -= 4;
    }
    *a1 = v18;
    a1[1] = v11;
    a1[2] = v8;
    if (v12)
    {
      operator delete(v12);
      std::vector<unsigned int> v8 = *v9;
    }
  }
  else
  {
    *(_DWORD *)char v10 = a2;
    uint64_t v11 = v10 + 4;
  }
  a1[1] = v11;
  if (v11 >= v8)
  {
    float32x4_t v21 = *a1;
    uint64_t v22 = (v11 - *a1) >> 2;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 62) {
      goto LABEL_50;
    }
    uint64_t v24 = v8 - v21;
    if (v24 >> 1 > v23) {
      unint64_t v23 = v24 >> 1;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v25 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25)
    {
      uint64_t v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v9, v25);
      float32x4_t v21 = *a1;
      uint64_t v11 = a1[1];
    }
    else
    {
      uint64_t v26 = 0;
    }
    uint64_t v27 = &v26[4 * v22];
    std::vector<unsigned int> v8 = &v26[4 * v25];
    *(_DWORD *)uint64_t v27 = a3;
    float v20 = v27 + 4;
    while (v11 != v21)
    {
      int v28 = *((_DWORD *)v11 - 1);
      v11 -= 4;
      *((_DWORD *)v27 - 1) = v28;
      v27 -= 4;
    }
    *a1 = v27;
    a1[1] = v20;
    a1[2] = v8;
    if (v21)
    {
      operator delete(v21);
      std::vector<unsigned int> v8 = *v9;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v11 = a3;
    float v20 = v11 + 4;
  }
  a1[1] = v20;
  if (v20 < v8)
  {
    *(_DWORD *)float v20 = a4;
    size_t v29 = v20 + 4;
    goto LABEL_49;
  }
  uint64_t v30 = *a1;
  uint64_t v31 = (v20 - *a1) >> 2;
  unint64_t v32 = v31 + 1;
  if ((unint64_t)(v31 + 1) >> 62) {
LABEL_50:
  }
    abort();
  uint64_t v33 = v8 - v30;
  if (v33 >> 1 > v32) {
    unint64_t v32 = v33 >> 1;
  }
  if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v34 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v34 = v32;
  }
  if (v34)
  {
    unint64_t v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v9, v34);
    uint64_t v30 = *a1;
    float v20 = a1[1];
  }
  else
  {
    unint64_t v35 = 0;
  }
  unint64_t v36 = &v35[4 * v31];
  int8x8_t v37 = &v35[4 * v34];
  *(_DWORD *)unint64_t v36 = a4;
  size_t v29 = v36 + 4;
  while (v20 != v30)
  {
    int v38 = *((_DWORD *)v20 - 1);
    v20 -= 4;
    *((_DWORD *)v36 - 1) = v38;
    v36 -= 4;
  }
  *a1 = v36;
  a1[1] = v29;
  a1[2] = v37;
  if (v30) {
    operator delete(v30);
  }
LABEL_49:
  a1[1] = v29;
}

void geom::anonymous namespace'::split_triangle_mesh_with_plane_impl<float>(geom::slice<geom::vector_type<float,(unsigned char)3,void>::value> const&,geom::slice<unsigned int> const&,geom::general_plane<float,(unsigned char)3> const&,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<signed char> &,std::vector<unsigned int> &,std::vector<unsigned int> &,std::vector<unsigned int>*)::{lambda(unsigned int,unsigned int,unsigned int)#1}::operator()(uint64_t **a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = **a1;
  uint64_t v9 = *a1[1];
  uint64_t v11 = a1[2];
  char v10 = a1[3];
  uint64_t v12 = *v11;
  v27[0] = a3;
  v27[1] = a4;
  if (!v13) {
    abort();
  }
  uint64_t v14 = a3;
  uint64_t v15 = a2;
  int v16 = *((_DWORD *)v13 + 6);
  int v17 = *((_DWORD *)v13 + 7);
  float v18 = (char **)a1[5];
  int v19 = *(_DWORD *)(v9 + 4 * v15);
  if (*(char *)(v8 + v14) < 0)
  {
    int v26 = *(_DWORD *)(v12 + 4 * a4);
    uint64_t v22 = (char **)a1[6];
    int v23 = *(_DWORD *)(v12 + 4 * v15);
    int v24 = v26;
    int v25 = v17;
  }
  else
  {
    int v20 = *(_DWORD *)(v9 + 4 * a4);
    int v21 = *(_DWORD *)(v12 + 4 * v14);
    uint64_t v22 = (char **)a1[6];
    int v23 = *(_DWORD *)(v12 + 4 * v15);
    int v24 = v17;
    int v25 = v21;
  }
}

void geom::anonymous namespace'::split_triangle_mesh_with_plane_impl<float>(geom::slice<geom::vector_type<float,(unsigned char)3,void>::value> const&,geom::slice<unsigned int> const&,geom::general_plane<float,(unsigned char)3> const&,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<geom::vector_type<float,(unsigned char)3,void>::value,std::allocator<geom::vector_type<float,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<signed char> &,std::vector<unsigned int> &,std::vector<unsigned int> &,std::vector<unsigned int>*)::{lambda(unsigned int,unsigned int,unsigned int)#2}::operator()(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4)
{
  uint64_t v8 = *(void **)a1;
  unsigned int v28 = a2;
  unsigned int v29 = a3;
  if (!v9 {
    || (int v10 = *((_DWORD *)v9 + 6),
  }
        int v11 = *((_DWORD *)v9 + 7),
        unsigned int v28 = a2,
        unsigned int v29 = a4,
  {
    abort();
  }
  uint64_t v13 = a2;
  int v14 = *(char *)(**(void **)(a1 + 8) + a2);
  int v15 = *((_DWORD *)v12 + 6);
  int v16 = *((_DWORD *)v12 + 7);
  uint64_t v17 = a4;
  if (v14 < 0)
  {
    int v25 = *(void **)(a1 + 24);
    int v26 = *(_DWORD *)(*v25 + 4 * a3);
    int v27 = *(_DWORD *)(*v25 + 4 * v17);
    int v21 = *(char ***)(a1 + 48);
    int v22 = v27;
    int v23 = v16;
    int v24 = v11;
  }
  else
  {
    float v18 = *(void **)(a1 + 16);
    int v19 = *(_DWORD *)(*v18 + 4 * a3);
    int v20 = *(_DWORD *)(*v18 + 4 * v17);
    int v21 = *(char ***)(a1 + 40);
    int v22 = v20;
    int v23 = v15;
    int v24 = v10;
  }
}

uint64_t *std::unordered_map<geom::anonymous namespace'::edge,geom::anonymous namespace'::edge_cut,geom::anonymous namespace'::edge_hash,std::equal_to<geom::anonymous namespace'::edge>,std::allocator<std::pair<geom::anonymous namespace'::edge const,geom::anonymous namespace'::edge_cut>>>::find[abi:nn180100](void *a1, unsigned int *a2)
{
  unsigned int v3 = *a2;
  LODWORD(v2) = a2[1];
  if (v2 >= *a2) {
    unint64_t v4 = v3;
  }
  else {
    unint64_t v4 = v2;
  }
  if (v3 <= v2) {
    uint64_t v2 = v2;
  }
  else {
    uint64_t v2 = v3;
  }
  int8x8_t v5 = (int8x8_t)a1[1];
  if (!*(void *)&v5) {
    return 0;
  }
  unint64_t v6 = (v2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  uint8x8_t v7 = (uint8x8_t)vcnt_s8(v5);
  v7.i16[0] = vaddlv_u8(v7);
  if (v7.u32[0] > 1uLL)
  {
    uint64_t v8 = (v2 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
    if (v6 >= *(void *)&v5) {
      uint64_t v8 = v6 % *(void *)&v5;
    }
  }
  else
  {
    uint64_t v8 = v6 & (*(void *)&v5 - 1);
  }
  uint64_t v9 = *(uint64_t ***)(*a1 + 8 * v8);
  if (!v9) {
    return 0;
  }
  for (unint64_t result = *v9; result; unint64_t result = (uint64_t *)*result)
  {
    unint64_t v11 = result[1];
    if (v11 == v6)
    {
      unsigned int v13 = *((_DWORD *)result + 4);
      unsigned int v12 = *((_DWORD *)result + 5);
      if (v12 >= v13) {
        int v14 = *((_DWORD *)result + 4);
      }
      else {
        int v14 = *((_DWORD *)result + 5);
      }
      if (v12 <= v13) {
        unsigned int v12 = *((_DWORD *)result + 4);
      }
      if (v4 == v14 && v2 == v12) {
        return result;
      }
    }
    else
    {
      if (v7.u32[0] > 1uLL)
      {
        if (v11 >= *(void *)&v5) {
          v11 %= *(void *)&v5;
        }
      }
      else
      {
        v11 &= *(void *)&v5 - 1;
      }
      if (v11 != v8) {
        return 0;
      }
    }
  }
  return result;
}

char *std::unordered_map<geom::anonymous namespace'::edge,geom::anonymous namespace'::edge_cut,geom::anonymous namespace'::edge_hash,std::equal_to<geom::anonymous namespace'::edge>,std::allocator<std::pair<geom::anonymous namespace'::edge const,geom::anonymous namespace'::edge_cut>>>::operator[](float *a1, unsigned int *a2)
{
  unsigned int v6 = *a2;
  LODWORD(v5) = a2[1];
  if (v5 >= *a2) {
    unint64_t v7 = v6;
  }
  else {
    unint64_t v7 = v5;
  }
  if (v6 <= v5) {
    uint64_t v5 = v5;
  }
  else {
    uint64_t v5 = v6;
  }
  unint64_t v8 = (v5 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7;
  unint64_t v9 = *((void *)a1 + 1);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      uint64_t v2 = (v5 + (v7 << 6) + (v7 >> 2) - 0x61C8864680B583E9) ^ v7;
      if (v8 >= v9) {
        uint64_t v2 = v8 % v9;
      }
    }
    else
    {
      uint64_t v2 = v8 & (v9 - 1);
    }
    unint64_t v11 = *(void **)(*(void *)a1 + 8 * v2);
    if (v11)
    {
      unsigned int v12 = (void *)*v11;
      if (*v11)
      {
        do
        {
          unint64_t v13 = v12[1];
          if (v13 == v8)
          {
            unsigned int v15 = *((_DWORD *)v12 + 4);
            unsigned int v14 = *((_DWORD *)v12 + 5);
            if (v14 >= v15) {
              int v16 = *((_DWORD *)v12 + 4);
            }
            else {
              int v16 = *((_DWORD *)v12 + 5);
            }
            if (v14 <= v15) {
              unsigned int v14 = *((_DWORD *)v12 + 4);
            }
            if (v7 == v16 && v5 == v14) {
              return (char *)(v12 + 3);
            }
          }
          else
          {
            if (v10.u32[0] > 1uLL)
            {
              if (v13 >= v9) {
                v13 %= v9;
              }
            }
            else
            {
              v13 &= v9 - 1;
            }
            if (v13 != v2) {
              break;
            }
          }
          unsigned int v12 = (void *)*v12;
        }
        while (v12);
      }
    }
  }
  unsigned int v12 = operator new(0x20uLL);
  *unsigned int v12 = 0;
  v12[1] = v8;
  v12[2] = *(void *)a2;
  v12[3] = 0;
  float v18 = (float)(unint64_t)(*((void *)a1 + 3) + 1);
  float v19 = a1[8];
  if (!v9 || (float)(v19 * (float)v9) < v18)
  {
    BOOL v20 = (v9 & (v9 - 1)) == 0;
    if (v9 < 3) {
      BOOL v20 = 0;
    }
    unint64_t v21 = (2 * v9) | !v20;
    unint64_t v22 = vcvtps_u32_f32(v18 / v19);
    if (v21 <= v22) {
      int8x8_t prime = (int8x8_t)v22;
    }
    else {
      int8x8_t prime = (int8x8_t)v21;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v9 = *((void *)a1 + 1);
    }
    if (*(void *)&prime > v9) {
      goto LABEL_45;
    }
    if (*(void *)&prime < v9)
    {
      unint64_t v30 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v9 < 3 || (uint8x8_t v31 = (uint8x8_t)vcnt_s8((int8x8_t)v9), v31.i16[0] = vaddlv_u8(v31), v31.u32[0] > 1uLL))
      {
        unint64_t v30 = std::__next_prime(v30);
      }
      else
      {
        uint64_t v32 = 1 << -(char)__clz(v30 - 1);
        if (v30 >= 2) {
          unint64_t v30 = v32;
        }
      }
      if (*(void *)&prime <= v30) {
        int8x8_t prime = (int8x8_t)v30;
      }
      if (*(void *)&prime >= v9)
      {
        unint64_t v9 = *((void *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_45:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          int v24 = operator new(8 * *(void *)&prime);
          int v25 = *(void **)a1;
          *(void *)a1 = v24;
          if (v25) {
            operator delete(v25);
          }
          uint64_t v26 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(void *)(*(void *)a1 + 8 * v26++) = 0;
          while (*(void *)&prime != v26);
          int v27 = (void *)*((void *)a1 + 2);
          if (v27)
          {
            unint64_t v28 = v27[1];
            uint8x8_t v29 = (uint8x8_t)vcnt_s8(prime);
            v29.i16[0] = vaddlv_u8(v29);
            if (v29.u32[0] > 1uLL)
            {
              if (v28 >= *(void *)&prime) {
                v28 %= *(void *)&prime;
              }
            }
            else
            {
              v28 &= *(void *)&prime - 1;
            }
            *(void *)(*(void *)a1 + 8 * v28) = a1 + 4;
            uint64_t v33 = (void *)*v27;
            if (*v27)
            {
              do
              {
                unint64_t v34 = v33[1];
                if (v29.u32[0] > 1uLL)
                {
                  if (v34 >= *(void *)&prime) {
                    v34 %= *(void *)&prime;
                  }
                }
                else
                {
                  v34 &= *(void *)&prime - 1;
                }
                if (v34 != v28)
                {
                  if (!*(void *)(*(void *)a1 + 8 * v34))
                  {
                    *(void *)(*(void *)a1 + 8 * v34) = v27;
                    goto LABEL_70;
                  }
                  *int v27 = *v33;
                  *uint64_t v33 = **(void **)(*(void *)a1 + 8 * v34);
                  **(void **)(*(void *)a1 + 8 * v34) = v33;
                  uint64_t v33 = v27;
                }
                unint64_t v34 = v28;
LABEL_70:
                int v27 = v33;
                uint64_t v33 = (void *)*v33;
                unint64_t v28 = v34;
              }
              while (v33);
            }
          }
          unint64_t v9 = (unint64_t)prime;
          goto LABEL_74;
        }
        float64x2_t v40 = *(void **)a1;
        *(void *)a1 = 0;
        if (v40) {
          operator delete(v40);
        }
        unint64_t v9 = 0;
        *((void *)a1 + 1) = 0;
      }
    }
LABEL_74:
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        uint64_t v2 = v8 % v9;
      }
      else {
        uint64_t v2 = v8;
      }
    }
    else
    {
      uint64_t v2 = (v9 - 1) & v8;
    }
  }
  unint64_t v35 = *(void **)a1;
  unint64_t v36 = *(void **)(*(void *)a1 + 8 * v2);
  if (v36)
  {
    *unsigned int v12 = *v36;
LABEL_87:
    *unint64_t v36 = v12;
    goto LABEL_88;
  }
  uint64_t v37 = *((void *)a1 + 2);
  *unsigned int v12 = v37;
  *((void *)a1 + 2) = v12;
  v35[v2] = a1 + 4;
  if (v37)
  {
    unint64_t v38 = *(void *)(v37 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v38 >= v9) {
        v38 %= v9;
      }
    }
    else
    {
      v38 &= v9 - 1;
    }
    unint64_t v36 = (void *)(*(void *)a1 + 8 * v38);
    goto LABEL_87;
  }
LABEL_88:
  ++*((void *)a1 + 3);
  return (char *)(v12 + 3);
}

_DWORD *geom::anonymous namespace'::split_triangle_mesh_with_plane_impl<double>(geom::slice<geom::vector_type<double,(unsigned char)3,void>::value> const&,geom::slice<unsigned int> const&,geom::general_plane<double,(unsigned char)3> const&,std::vector<geom::vector_type<double,(unsigned char)3,void>::value,std::allocator<geom::vector_type<double,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<geom::vector_type<double,(unsigned char)3,void>::value,std::allocator<geom::vector_type<double,(unsigned char)3,void>::value>> &,std::vector<unsigned int> &,std::vector<signed char> &,std::vector<unsigned int> &,std::vector<unsigned int> &,std::vector<unsigned int>*)::{lambda(unsigned int,unsigned int)#1}::operator()(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v6 = *(float **)a1;
  unsigned int v70 = a2;
  unsigned int v71 = a3;
  if (!result)
  {
    unint64_t v9 = *(void ***)(a1 + 8);
    unint64_t v8 = *(uint64_t **)(a1 + 16);
    uint8x8_t v10 = (int8x16_t *)v9[1];
    unint64_t v11 = *(float64x2_t **)(a1 + 32);
    uint64_t v12 = **(void **)(a1 + 24);
    unint64_t v13 = (float64x2_t *)(v12 + 32 * a2);
    unsigned int v14 = (float64x2_t *)(v12 + 32 * a3);
    float64x2_t v16 = *v13;
    float64x2_t v15 = v13[1];
    float64x2_t v17 = *v14;
    float64x2_t v18 = v14[1];
    float64x2_t v19 = vsubq_f64(*v14, *v13);
    float64x2_t v20 = vsubq_f64(v18, v15);
    float64x2_t v21 = *v11;
    float64x2_t v22 = v11[1];
    double v23 = vmulq_f64(v22, v20).f64[0] + vaddvq_f64(vmulq_f64(*v11, v19));
    if (fabs(v23) <= 2.22044605e-16)
    {
      float64_t v29 = vmulq_f64(v15, v22).f64[0] + vaddvq_f64(vmulq_f64(v16, v21)) + v11[2].f64[0];
      int8x16_t v24 = 0uLL;
      float64x2_t v26 = 0uLL;
      if (v29 > 2.22044605e-16) {
        goto LABEL_11;
      }
      __asm { FMOV            V2.2D, #0.5 }
      int8x16_t v24 = (int8x16_t)vmulq_f64(vaddq_f64(v16, v17), _Q2);
      float64x2_t v26 = vmulq_f64(vaddq_f64(v15, v18), _Q2);
      unint64_t v28 = vextq_s8(v24, v24, 8uLL).u64[0];
    }
    else
    {
      v17.f64[0] = (-v11[2].f64[0] - (vmulq_f64(v15, v22).f64[0] + vaddvq_f64(vmulq_f64(v16, v21)))) / v23;
      int8x16_t v24 = 0uLL;
      BOOL v25 = v17.f64[0] < 0.0 || v17.f64[0] > 1.0;
      float64x2_t v26 = 0uLL;
      if (v25)
      {
LABEL_11:
        uint64_t v36 = *v8;
        uint64_t v35 = v8[1];
        uint64_t v37 = ((char *)v10 - (unsigned char *)*v9) >> 5;
        unint64_t v38 = (unint64_t)v9[2];
        if ((unint64_t)v10 >= v38)
        {
          unint64_t v40 = v37 + 1;
          if ((unint64_t)(v37 + 1) >> 59) {
            goto LABEL_45;
          }
          uint64_t v41 = v38 - (void)*v9;
          if (v41 >> 4 > v40) {
            unint64_t v40 = v41 >> 4;
          }
          if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v42 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v42 = v40;
          }
          float64x2_t v66 = v26;
          int8x16_t v68 = v24;
          if (v42)
          {
            uint64_t v43 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v9 + 2), v42);
            float64x2_t v26 = v66;
            int8x16_t v24 = v68;
          }
          else
          {
            uint64_t v43 = 0;
          }
          uint64_t v44 = (int8x16_t *)&v43[32 * v37];
          uint64_t v45 = &v43[32 * v42];
          *uint64_t v44 = v24;
          v44[1] = (int8x16_t)v26;
          unint64_t v39 = v44 + 2;
          double v47 = (int8x16_t *)*v9;
          unint64_t v46 = (int8x16_t *)v9[1];
          if (v46 != *v9)
          {
            do
            {
              int8x16_t v48 = v46[-2];
              int8x16_t v49 = v46[-1];
              v46 -= 2;
              v44[-2] = v48;
              v44[-1] = v49;
              v44 -= 2;
            }
            while (v46 != v47);
            unint64_t v46 = (int8x16_t *)*v9;
          }
          *unint64_t v9 = v44;
          v9[1] = v39;
          float64x2_t v9[2] = v45;
          if (v46)
          {
            operator delete(v46);
            float64x2_t v26 = v66;
            int8x16_t v24 = v68;
          }
        }
        else
        {
          int8x16_t *v10 = v24;
          v10[1] = (int8x16_t)v26;
          unint64_t v39 = v10 + 2;
        }
        v9[1] = v39;
        unint64_t v50 = *(void ***)(a1 + 16);
        uint64_t v51 = (int8x16_t *)v50[1];
        unint64_t v52 = (unint64_t)v50[2];
        if ((unint64_t)v51 < v52)
        {
          *uint64_t v51 = v24;
          v51[1] = (int8x16_t)v26;
          double v53 = v51 + 2;
LABEL_43:
          v50[1] = v53;
          double v65 = *(float **)a1;
          unsigned int v70 = a2;
          unsigned int v71 = a3;
          *unint64_t result = v37;
          result[1] = (unint64_t)(v35 - v36) >> 5;
          return result;
        }
        uint64_t v54 = ((char *)v51 - (unsigned char *)*v50) >> 5;
        unint64_t v55 = v54 + 1;
        if (!((unint64_t)(v54 + 1) >> 59))
        {
          uint64_t v56 = v52 - (void)*v50;
          if (v56 >> 4 > v55) {
            unint64_t v55 = v56 >> 4;
          }
          if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v57 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v57 = v55;
          }
          if (v57)
          {
            float64x2_t v67 = v26;
            int8x16_t v69 = v24;
            char v58 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v50 + 2), v57);
            float64x2_t v26 = v67;
            int8x16_t v24 = v69;
          }
          else
          {
            char v58 = 0;
          }
          long long v59 = (int8x16_t *)&v58[32 * v54];
          uint64_t v60 = &v58[32 * v57];
          int8x16_t *v59 = v24;
          v59[1] = (int8x16_t)v26;
          double v53 = v59 + 2;
          unint64_t v62 = (int8x16_t *)*v50;
          uint64_t v61 = (int8x16_t *)v50[1];
          if (v61 != *v50)
          {
            do
            {
              int8x16_t v63 = v61[-2];
              int8x16_t v64 = v61[-1];
              v61 -= 2;
              v59[-2] = v63;
              v59[-1] = v64;
              v59 -= 2;
            }
            while (v61 != v62);
            uint64_t v61 = (int8x16_t *)*v50;
          }
          *unint64_t v50 = v59;
          v50[1] = v53;
          v50[2] = v60;
          if (v61) {
            operator delete(v61);
          }
          goto LABEL_43;
        }
LABEL_45:
        abort();
      }
      *(void *)&v19.f64[1] = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
      int8x16_t v27 = (int8x16_t)vmlaq_n_f64(v16, v19, v17.f64[0]);
      unint64_t v28 = vextq_s8(v27, v27, 8uLL).u64[0];
      v24.i64[0] = v27.i64[0];
      *(void *)&v26.f64[0] = *(_OWORD *)&vmlaq_f64(v15, v20, v17);
    }
    v24.i64[1] = v28;
    goto LABEL_11;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_1f(unint64_t a1, const void *a2)
{
  unint64_t v9 = 0;
  uint8x8_t v10 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    uint64_t v3 = 5 * a1;
    size_t v4 = 20 * a1;
    std::vector<geom::interpolating_key<float>>::__vallocate[abi:nn180100](&v9, a1);
    uint64_t v5 = v10;
    memmove(v10, a2, v4);
    uint8x8_t v10 = &v5[4 * v3];
  }
  geom::interpolating_curve<float>::build(&v9, (uint64_t)v8);
  uint64_t v6 = geom_interpolating_curve_1f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    uint8x8_t v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_236E20B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(void *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_1f(unint64_t a1, const void *a2)
{
  uint64_t v9 = 0;
  uint8x8_t v10 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    uint64_t v3 = 5 * a1;
    size_t v4 = 20 * a1;
    std::vector<geom::interpolating_key<float>>::__vallocate[abi:nn180100](&v9, a1);
    uint64_t v5 = v10;
    memmove(v10, a2, v4);
    uint8x8_t v10 = &v5[4 * v3];
  }
  geom::interpolating_curve<float>::build_arc_length_parameterized(&v9, (uint64_t)v8);
  uint64_t v6 = geom_interpolating_curve_1f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    uint8x8_t v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_236E20BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(void *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

float geom_interpolating_curve_evaluate_at_1f(uint64_t a1, float a2)
{
  return geom::interpolating_curve<float>::evaluate_at(a1 + 16, a2);
}

unint64_t geom_interpolating_curve_evaluate_tangent_at_1f(uint64_t a1, float a2)
{
  return geom::interpolating_curve<float>::evaluate_tangent_at(a1 + 16, a2);
}

float geom_interpolating_curve_evaluate_length_at_1f(uint64_t a1, float a2)
{
  return geom::interpolating_curve<float>::evaluate_length_at(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_total_length_1f(uint64_t a1)
{
  return geom::interpolating_curve<float>::evaluate_total_length(a1 + 16);
}

float geom_interpolating_curve_get_min_knot_1f(uint64_t a1)
{
  return *(float *)(a1 + 200);
}

float geom_interpolating_curve_get_max_knot_1f(uint64_t a1)
{
  return *(float *)(a1 + 204);
}

uint64_t geom_interpolating_curve_get_span_count_1f(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

float geom_interpolating_curve_get_knots_1f(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4, double a5, double a6, float a7)
{
  uint64_t v10 = 0;
  geom::interpolating_curve<float>::span_knots(a1 + 16, a2, (float *)&v10 + 1, (float *)&v10, a5, a6, a7);
  if (a3)
  {
    float result = *((float *)&v10 + 1);
    *a3 = HIDWORD(v10);
  }
  if (a4)
  {
    float result = *(float *)&v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_1d(unint64_t a1, const void *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    uint64_t v3 = 5 * a1;
    size_t v4 = 40 * a1;
    std::vector<geom::interpolating_key<double>>::__vallocate[abi:nn180100](&v9, a1);
    uint64_t v5 = v10;
    memmove(v10, a2, v4);
    uint64_t v10 = &v5[8 * v3];
  }
  geom::interpolating_curve<double>::build(&v9, v8);
  uint64_t v6 = geom_interpolating_curve_1d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_236E20D60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(void *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_1d(unint64_t a1, const void *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    uint64_t v3 = 5 * a1;
    size_t v4 = 40 * a1;
    std::vector<geom::interpolating_key<double>>::__vallocate[abi:nn180100](&v9, a1);
    uint64_t v5 = v10;
    memmove(v10, a2, v4);
    uint64_t v10 = &v5[8 * v3];
  }
  geom::interpolating_curve<double>::build_arc_length_parameterized(&v9, v8);
  uint64_t v6 = geom_interpolating_curve_1d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_236E20E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(void *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

double geom_interpolating_curve_evaluate_at_1d(uint64_t a1, double a2)
{
  return geom::interpolating_curve<double>::evaluate_at(a1 + 16, a2);
}

uint64_t geom_interpolating_curve_evaluate_tangent_at_1d(uint64_t a1, double a2)
{
  return geom::interpolating_curve<double>::evaluate_tangent_at(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_length_at_1d(uint64_t a1, double a2)
{
  return geom::interpolating_curve<double>::evaluate_length_at(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_total_length_1d(uint64_t a1)
{
  return geom::interpolating_curve<double>::evaluate_total_length(a1 + 16);
}

double geom_interpolating_curve_get_min_knot_1d(uint64_t a1)
{
  return *(double *)(a1 + 208);
}

double geom_interpolating_curve_get_max_knot_1d(uint64_t a1)
{
  return *(double *)(a1 + 216);
}

uint64_t geom_interpolating_curve_get_span_count_1d(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

double geom_interpolating_curve_get_knots_1d(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double v10 = 0.0;
  double v11 = 0.0;
  geom::interpolating_curve<double>::span_knots(a1 + 16, a2, &v11, &v10, a5, a6, a7);
  if (a3)
  {
    double result = v11;
    *a3 = v11;
  }
  if (a4)
  {
    double result = v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_2f(unint64_t a1, const void *a2)
{
  uint64_t v9 = 0;
  double v10 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    size_t v4 = 32 * a1;
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&v9, a1);
    uint64_t v5 = v10;
    memmove(v10, a2, v4);
    double v10 = &v5[32 * a1];
  }
  _ZN4geom19interpolating_curveIDv2_fE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, (uint64_t)v8);
  uint64_t v6 = geom_interpolating_curve_2f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    double v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_236E20FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(void *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_2f(unint64_t a1, const void *a2)
{
  uint64_t v9 = 0;
  double v10 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    size_t v4 = 32 * a1;
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(&v9, a1);
    uint64_t v5 = v10;
    memmove(v10, a2, v4);
    double v10 = &v5[32 * a1];
  }
  _ZN4geom19interpolating_curveIDv2_fE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, (uint64_t)v8);
  uint64_t v6 = geom_interpolating_curve_2f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    double v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_236E21090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(void *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

float32x2_t geom_interpolating_curve_evaluate_at_2f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv2_fE11evaluate_atEf(a1 + 16, a2);
}

unint64_t geom_interpolating_curve_evaluate_tangent_at_2f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv2_fE19evaluate_tangent_atEf(a1 + 16, a2);
}

float geom_interpolating_curve_evaluate_length_at_2f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv2_fE18evaluate_length_atEf(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_total_length_2f(uint64_t a1)
{
  return geom::interpolating_curve<float>::evaluate_total_length(a1 + 16);
}

float geom_interpolating_curve_get_min_knot_2f(uint64_t a1)
{
  return *(float *)(a1 + 200);
}

float geom_interpolating_curve_get_max_knot_2f(uint64_t a1)
{
  return *(float *)(a1 + 204);
}

uint64_t geom_interpolating_curve_get_span_count_2f(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

float geom_interpolating_curve_get_knots_2f(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4, double a5, double a6, float a7)
{
  uint64_t v10 = 0;
  _ZNK4geom19interpolating_curveIDv2_fE10span_knotsEtRfS3_(a1 + 16, a2, (float *)&v10 + 1, (float *)&v10, a5, a6, a7);
  if (a3)
  {
    float result = *((float *)&v10 + 1);
    *a3 = HIDWORD(v10);
  }
  if (a4)
  {
    float result = *(float *)&v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_2d(unint64_t a1, const void *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    size_t v4 = a1 << 6;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v9, a1);
    uint64_t v5 = v10;
    memmove(v10, a2, v4);
    uint64_t v10 = &v5[64 * a1];
  }
  _ZN4geom19interpolating_curveIDv2_dE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, v8);
  uint64_t v6 = geom_interpolating_curve_2d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_236E21208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(void *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_2d(unint64_t a1, const void *a2)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    size_t v4 = a1 << 6;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v9, a1);
    uint64_t v5 = v10;
    memmove(v10, a2, v4);
    uint64_t v10 = &v5[64 * a1];
  }
  _ZN4geom19interpolating_curveIDv2_dE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, v8);
  uint64_t v6 = geom_interpolating_curve_2d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_236E212E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(void *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

double geom_interpolating_curve_evaluate_at_2d(uint64_t a1, double a2)
{
  return _ZNK4geom19interpolating_curveIDv2_dE11evaluate_atEd(a1 + 16, a2);
}

uint64_t geom_interpolating_curve_evaluate_tangent_at_2d(uint64_t a1, double a2)
{
  return _ZNK4geom19interpolating_curveIDv2_dE19evaluate_tangent_atEd(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_length_at_2d(uint64_t a1, double a2)
{
  return _ZNK4geom19interpolating_curveIDv2_dE18evaluate_length_atEd(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_total_length_2d(uint64_t a1)
{
  return geom::interpolating_curve<double>::evaluate_total_length(a1 + 16);
}

double geom_interpolating_curve_get_min_knot_2d(uint64_t a1)
{
  return *(double *)(a1 + 208);
}

double geom_interpolating_curve_get_max_knot_2d(uint64_t a1)
{
  return *(double *)(a1 + 216);
}

uint64_t geom_interpolating_curve_get_span_count_2d(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

double geom_interpolating_curve_get_knots_2d(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double v10 = 0.0;
  double v11 = 0.0;
  _ZNK4geom19interpolating_curveIDv2_dE10span_knotsEtRdS3_(a1 + 16, a2, &v11, &v10, a5, a6, a7);
  if (a3)
  {
    double result = v11;
    *a3 = v11;
  }
  if (a4)
  {
    double result = v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_3f(unint64_t a1, const void *a2)
{
  uint64_t v9 = 0;
  double v10 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    size_t v4 = a1 << 6;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v9, a1);
    uint64_t v5 = v10;
    memmove(v10, a2, v4);
    double v10 = &v5[64 * a1];
  }
  _ZN4geom19interpolating_curveIDv3_fE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, (uint64_t)v8);
  uint64_t v6 = geom_interpolating_curve_3f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    double v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_236E2145C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(void *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_3f(unint64_t a1, const void *a2)
{
  uint64_t v9 = 0;
  double v10 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    size_t v4 = a1 << 6;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v9, a1);
    uint64_t v5 = v10;
    memmove(v10, a2, v4);
    double v10 = &v5[64 * a1];
  }
  _ZN4geom19interpolating_curveIDv3_fE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, (uint64_t)v8);
  uint64_t v6 = geom_interpolating_curve_3f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    double v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_236E21538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(void *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

double geom_interpolating_curve_evaluate_at_3f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv3_fE11evaluate_atEf(a1 + 16, a2);
}

unint64_t geom_interpolating_curve_evaluate_tangent_at_3f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv3_fE19evaluate_tangent_atEf(a1 + 16, a2);
}

float geom_interpolating_curve_evaluate_length_at_3f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv3_fE18evaluate_length_atEf(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_total_length_3f(uint64_t a1)
{
  return geom::interpolating_curve<float>::evaluate_total_length(a1 + 16);
}

float geom_interpolating_curve_get_min_knot_3f(uint64_t a1)
{
  return *(float *)(a1 + 200);
}

float geom_interpolating_curve_get_max_knot_3f(uint64_t a1)
{
  return *(float *)(a1 + 204);
}

uint64_t geom_interpolating_curve_get_span_count_3f(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

float geom_interpolating_curve_get_knots_3f(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4, double a5, double a6, float a7)
{
  uint64_t v10 = 0;
  _ZNK4geom19interpolating_curveIDv3_fE10span_knotsEtRfS3_(a1 + 16, a2, (float *)&v10 + 1, (float *)&v10, a5, a6, a7);
  if (a3)
  {
    float result = *((float *)&v10 + 1);
    *a3 = HIDWORD(v10);
  }
  if (a4)
  {
    float result = *(float *)&v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_3d(unint64_t a1, const void *a2)
{
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (a1)
  {
    size_t v3 = 112 * a1;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv3_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v8, a1);
    size_t v4 = v9;
    memmove(v9, a2, v3);
    uint64_t v9 = &v4[v3];
  }
  _ZN4geom19interpolating_curveIDv3_dE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v8, v7);
  uint64_t v5 = geom_interpolating_curve_3d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v5 + 16, (uint64_t)v7);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v7);
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
  return v5;
}

void sub_236E216A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 56);
  if (v11)
  {
    *(void *)(v9 - 48) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_3d(unint64_t a1, const void *a2)
{
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (a1)
  {
    size_t v3 = 112 * a1;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv3_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v8, a1);
    size_t v4 = v9;
    memmove(v9, a2, v3);
    uint64_t v9 = &v4[v3];
  }
  _ZN4geom19interpolating_curveIDv3_dE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v8, v7);
  uint64_t v5 = geom_interpolating_curve_3d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v5 + 16, (uint64_t)v7);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v7);
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
  return v5;
}

void sub_236E2177C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 56);
  if (v11)
  {
    *(void *)(v9 - 48) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

float64_t geom_interpolating_curve_evaluate_at_3d@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  _ZNK4geom19interpolating_curveIDv3_dE11evaluate_atEd(a1 + 16, v6, a3);
  float64_t result = v6[0].f64[0];
  float64x2_t v5 = v6[1];
  *a2 = v6[0];
  a2[1] = v5;
  return result;
}

float64_t geom_interpolating_curve_evaluate_tangent_at_3d@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  _ZNK4geom19interpolating_curveIDv3_dE19evaluate_tangent_atEd(a1 + 16, v6, a3);
  float64_t result = v6[0].f64[0];
  float64x2_t v5 = v6[1];
  *a2 = v6[0];
  a2[1] = v5;
  return result;
}

double geom_interpolating_curve_evaluate_length_at_3d(uint64_t a1, double a2)
{
  return _ZNK4geom19interpolating_curveIDv3_dE18evaluate_length_atEd(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_total_length_3d(uint64_t a1)
{
  return geom::interpolating_curve<double>::evaluate_total_length(a1 + 16);
}

double geom_interpolating_curve_get_min_knot_3d(uint64_t a1)
{
  return *(double *)(a1 + 208);
}

double geom_interpolating_curve_get_max_knot_3d(uint64_t a1)
{
  return *(double *)(a1 + 216);
}

uint64_t geom_interpolating_curve_get_span_count_3d(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

double geom_interpolating_curve_get_knots_3d(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double v10 = 0.0;
  double v11 = 0.0;
  _ZNK4geom19interpolating_curveIDv3_dE10span_knotsEtRdS3_(a1 + 16, a2, &v11, &v10, a5, a6, a7);
  if (a3)
  {
    double result = v11;
    *a3 = v11;
  }
  if (a4)
  {
    double result = v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_4f(unint64_t a1, const void *a2)
{
  uint64_t v9 = 0;
  double v10 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    size_t v4 = a1 << 6;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v9, a1);
    float64x2_t v5 = v10;
    memmove(v10, a2, v4);
    double v10 = &v5[64 * a1];
  }
  _ZN4geom19interpolating_curveIDv4_fE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, (uint64_t)v8);
  uint64_t v6 = geom_interpolating_curve_4f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    double v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_236E2195C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(void *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_4f(unint64_t a1, const void *a2)
{
  uint64_t v9 = 0;
  double v10 = 0;
  uint64_t v11 = 0;
  if (a1)
  {
    size_t v4 = a1 << 6;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v9, a1);
    float64x2_t v5 = v10;
    memmove(v10, a2, v4);
    double v10 = &v5[64 * a1];
  }
  _ZN4geom19interpolating_curveIDv4_fE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v9, (uint64_t)v8);
  uint64_t v6 = geom_interpolating_curve_4f_obj_alloc();
  geom::interpolating_curve<float>::interpolating_curve(v6 + 16, (uint64_t)v8);
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)v8);
  if (v9)
  {
    double v10 = v9;
    operator delete(v9);
  }
  return v6;
}

void sub_236E21A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<float>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 72);
  if (v11)
  {
    *(void *)(v9 - 64) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

double geom_interpolating_curve_evaluate_at_4f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv3_fE11evaluate_atEf(a1 + 16, a2);
}

unint64_t geom_interpolating_curve_evaluate_tangent_at_4f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv4_fE19evaluate_tangent_atEf(a1 + 16, a2);
}

float geom_interpolating_curve_evaluate_length_at_4f(uint64_t a1, float a2)
{
  return _ZNK4geom19interpolating_curveIDv4_fE18evaluate_length_atEf(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_total_length_4f(uint64_t a1)
{
  return geom::interpolating_curve<float>::evaluate_total_length(a1 + 16);
}

float geom_interpolating_curve_get_min_knot_4f(uint64_t a1)
{
  return *(float *)(a1 + 200);
}

float geom_interpolating_curve_get_max_knot_4f(uint64_t a1)
{
  return *(float *)(a1 + 204);
}

uint64_t geom_interpolating_curve_get_span_count_4f(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

float geom_interpolating_curve_get_knots_4f(uint64_t a1, unsigned int a2, _DWORD *a3, _DWORD *a4, double a5, double a6, float a7)
{
  uint64_t v10 = 0;
  _ZNK4geom19interpolating_curveIDv4_fE10span_knotsEtRfS3_(a1 + 16, a2, (float *)&v10 + 1, (float *)&v10, a5, a6, a7);
  if (a3)
  {
    float result = *((float *)&v10 + 1);
    *a3 = HIDWORD(v10);
  }
  if (a4)
  {
    float result = *(float *)&v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom_create_interpolating_curve_4d(unint64_t a1, const void *a2)
{
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (a1)
  {
    size_t v3 = 112 * a1;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv3_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v8, a1);
    size_t v4 = v9;
    memmove(v9, a2, v3);
    uint64_t v9 = &v4[v3];
  }
  _ZN4geom19interpolating_curveIDv4_dE5buildERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v8, v7);
  uint64_t v5 = geom_interpolating_curve_4d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v5 + 16, (uint64_t)v7);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v7);
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
  return v5;
}

void sub_236E21BA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 56);
  if (v11)
  {
    *(void *)(v9 - 48) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

uint64_t geom_create_interpolating_curve_arc_length_parameterized_4d(unint64_t a1, const void *a2)
{
  unint64_t v8 = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  if (a1)
  {
    size_t v3 = 112 * a1;
    _ZNSt3__16vectorIN4geom17interpolating_keyIDv3_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(&v8, a1);
    size_t v4 = v9;
    memmove(v9, a2, v3);
    uint64_t v9 = &v4[v3];
  }
  _ZN4geom19interpolating_curveIDv4_dE30build_arc_length_parameterizedERKNSt3__16vectorINS_17interpolating_keyIS1_EENS3_9allocatorIS6_EEEE(&v8, v7);
  uint64_t v5 = geom_interpolating_curve_4d_obj_alloc();
  geom::interpolating_curve<double>::interpolating_curve(v5 + 16, (uint64_t)v7);
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)v7);
  if (v8)
  {
    uint64_t v9 = v8;
    operator delete(v8);
  }
  return v5;
}

void sub_236E21C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  geom::interpolating_curve<double>::~interpolating_curve((uint64_t)&a9);
  uint64_t v11 = *(void **)(v9 - 56);
  if (v11)
  {
    *(void *)(v9 - 48) = v11;
    operator delete(v11);
  }
  _Unwind_Resume(a1);
}

float64_t geom_interpolating_curve_evaluate_at_4d@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  _ZNK4geom19interpolating_curveIDv4_dE11evaluate_atEd(a1 + 16, v6, a3);
  float64_t result = v6[0].f64[0];
  float64x2_t v5 = v6[1];
  *a2 = v6[0];
  a2[1] = v5;
  return result;
}

float64_t geom_interpolating_curve_evaluate_tangent_at_4d@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X8>, double a3@<D0>)
{
  _ZNK4geom19interpolating_curveIDv4_dE19evaluate_tangent_atEd(a1 + 16, v6, a3);
  float64_t result = v6[0].f64[0];
  float64x2_t v5 = v6[1];
  *a2 = v6[0];
  a2[1] = v5;
  return result;
}

double geom_interpolating_curve_evaluate_length_at_4d(uint64_t a1, double a2)
{
  return _ZNK4geom19interpolating_curveIDv4_dE18evaluate_length_atEd(a1 + 16, a2);
}

double geom_interpolating_curve_evaluate_total_length_4d(uint64_t a1)
{
  return geom::interpolating_curve<double>::evaluate_total_length(a1 + 16);
}

double geom_interpolating_curve_get_min_knot_4d(uint64_t a1)
{
  return *(double *)(a1 + 208);
}

double geom_interpolating_curve_get_max_knot_4d(uint64_t a1)
{
  return *(double *)(a1 + 216);
}

uint64_t geom_interpolating_curve_get_span_count_4d(uint64_t a1)
{
  return (unsigned __int16)((*(_DWORD *)(a1 + 24) - *(_DWORD *)(a1 + 16)) >> 1);
}

double geom_interpolating_curve_get_knots_4d(uint64_t a1, unsigned int a2, double *a3, double *a4, double a5, double a6, double a7)
{
  double v10 = 0.0;
  double v11 = 0.0;
  _ZNK4geom19interpolating_curveIDv4_dE10span_knotsEtRdS3_(a1 + 16, a2, &v11, &v10, a5, a6, a7);
  if (a3)
  {
    double result = v11;
    *a3 = v11;
  }
  if (a4)
  {
    double result = v10;
    *a4 = v10;
  }
  return result;
}

uint64_t geom::interpolating_curve<float>::~interpolating_curve(uint64_t a1)
{
  geom::interpolating_spline<float>::~interpolating_spline(a1 + 96);
  uint64_t v6 = (void **)(a1 + 72);
  std::vector<geom::interpolating_spline<float>>::__destroy_vector::operator()[abi:nn180100](&v6);
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  size_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  size_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void std::vector<geom::interpolating_spline<float>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    float64x2_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = geom::interpolating_spline<float>::~interpolating_spline(v4 - 88);
      while ((void *)v4 != v2);
      float64x2_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t geom::interpolating_curve<double>::~interpolating_curve(uint64_t a1)
{
  geom::interpolating_spline<double>::~interpolating_spline(a1 + 96);
  uint64_t v6 = (void **)(a1 + 72);
  std::vector<geom::interpolating_spline<double>>::__destroy_vector::operator()[abi:nn180100](&v6);
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  size_t v3 = *(void **)(a1 + 24);
  if (v3)
  {
    *(void *)(a1 + 32) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v4;
    operator delete(v4);
  }
  return a1;
}

void std::vector<geom::interpolating_spline<double>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  unint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    float64x2_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = geom::interpolating_spline<double>::~interpolating_spline(v4 - 96);
      while ((void *)v4 != v2);
      float64x2_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

char *std::vector<geom::interpolating_key<float>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    abort();
  }
  double result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<float>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[20 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<float>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCCDLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(20 * a2);
}

uint64_t geom::interpolating_curve<float>::interpolating_curve(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  geom::interpolating_spline<float>::interpolating_spline(a1 + 96, a2 + 96);
  uint64_t v4 = *(void *)(a2 + 184);
  *(unsigned char *)(a1 + 192) = *(unsigned char *)(a2 + 192);
  *(void *)(a1 + 184) = v4;
  return a1;
}

char *std::vector<geom::interpolating_key<double>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    abort();
  }
  double result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<double>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[40 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<double>>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x666666666666667) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(40 * a2);
}

uint64_t geom::interpolating_curve<double>::interpolating_curve(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  geom::interpolating_spline<double>::interpolating_spline(a1 + 96, a2 + 96);
  long long v4 = *(_OWORD *)(a2 + 192);
  *(unsigned char *)(a1 + 208) = *(unsigned char *)(a2 + 208);
  *(_OWORD *)(a1 + 192) = v4;
  return a1;
}

char *_ZNSt3__16vectorIN4geom17interpolating_keyIDv2_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(void *a1, unint64_t a2)
{
  if (a2 >> 58) {
    abort();
  }
  double result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::bbox<double,(unsigned char)3>>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[64 * v4];
  return result;
}

char *_ZNSt3__16vectorIN4geom17interpolating_keyIDv3_dEENS_9allocatorIS4_EEE11__vallocateB8nn180100Em(void *a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    abort();
  }
  double result = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIN4geom17interpolating_keyIDv3_dEEEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS9_m((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[112 * v4];
  return result;
}

void *_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIN4geom17interpolating_keyIDv3_dEEEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS9_m(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x24924924924924ALL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(112 * a2);
}

void geom::triangle_mesh_connectivity::make(std::vector<int>::size_type a1@<X0>, unsigned int **a2@<X1>, unsigned char *a3@<X8>)
{
  geom::triangle_mesh_half_edge_connectivity::make(a1, a2, &v45);
  if (v59)
  {
    int v4 = HIDWORD(v45);
    __b[0] = 0;
    __b[1] = 0;
    uint64_t v44 = 0;
    if (HIDWORD(v45))
    {
      std::vector<float>::__vallocate[abi:nn180100](__b, (3 * HIDWORD(v45)));
      float64x2_t v5 = (char *)__b[1];
      memset(__b[1], 255, 4 * (3 * v4));
      __b[1] = &v5[12 * v4];
      int v6 = HIDWORD(v45);
    }
    else
    {
      int v6 = 0;
    }
    unsigned int v7 = 3 * v6 - v46 + (((void)v52 - *((void *)&v51 + 1)) >> 2);
    v41[1] = 0;
    uint64_t v42 = 0;
    v41[0] = 0;
    if (v7 >= 2)
    {
      unsigned int v8 = v7 >> 1;
      std::vector<float>::__vallocate[abi:nn180100](v41, v7 >> 1);
      uint64_t v9 = (char *)v41[1];
      memset(v41[1], 255, 4 * v8);
      v41[1] = &v9[4 * v8];
    }
    if (v4)
    {
      int v10 = 0;
      unsigned int v11 = 0;
      for (int i = 0; i != v4; ++i)
      {
        for (uint64_t j = 0; j != 3; ++j)
        {
          if (*((_DWORD *)__b[0] + (v10 + j)) == -1)
          {
            unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)&v45, i, j);
            *((_DWORD *)v41[0] + v11) = v10 + j;
            *((_DWORD *)__b[0] + (v10 + j)) = v11;
            if (!geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge((geom::triangle_mesh_half_edge_connectivity *)&v45, half_edge_for_face_vertex))
            {
              half_edge_twiunsigned __int16 n = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin((geom::triangle_mesh_half_edge_connectivity *)&v45, half_edge_for_face_vertex);
              unint64_t face_and_face_vertex_for_half_edge = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge((geom::triangle_mesh_half_edge_connectivity *)&v45, half_edge_twin);
              *((_DWORD *)__b[0]
              + 3 * face_and_face_vertex_for_half_edge
              + BYTE4(face_and_face_vertex_for_half_edge)) = v11;
            }
            ++v11;
          }
        }
        v10 += 3;
      }
    }
    if (!v59) {
      goto LABEL_45;
    }
    long long v36 = 0u;
    long long v37 = 0u;
    long long v32 = v49;
    long long v33 = v50;
    long long v49 = 0u;
    long long v50 = 0u;
    long long v34 = v51;
    long long v35 = v52;
    long long v51 = 0u;
    long long v52 = 0u;
    uint64_t v28 = v45;
    int v29 = v46;
    int v46 = 0;
    long long v30 = v47;
    long long v31 = v48;
    long long v47 = 0u;
    long long v48 = 0u;
    long long v38 = 0u;
    long long v39 = *(_OWORD *)__b;
    *(void *)unint64_t v40 = v44;
    *(_OWORD *)__b = 0u;
    uint64_t v44 = 0;
    uint64_t v45 = 0;
    *(_OWORD *)&v40[8] = *(_OWORD *)v41;
    *(void *)&v40[24] = v42;
    *(_OWORD *)uint64_t v41 = 0u;
    uint64_t v42 = 0;
    char v27 = 0;
    memset(v22, 0, sizeof(v22));
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    LOBYTE(__p.__begin_) = 0;
    std::swap[abi:nn180100]<geom::triangle_mesh_half_edge_connectivity>((uint64_t *)v22, (uint64_t)&v28);
    long long v17 = v23;
    long long v18 = v24;
    long long v23 = v39;
    long long v24 = *(_OWORD *)v40;
    long long v39 = v17;
    *(_OWORD *)unint64_t v40 = v18;
    long long v19 = v25;
    long long v25 = *(_OWORD *)&v40[16];
    *(_OWORD *)&v40[16] = v19;
    if (v59)
    {
      if (v58) {
        std::optional<std::vector<unsigned int>>::operator=[abi:nn180100]<std::vector<unsigned int>,void>(&__p, &v57);
      }
      std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>::pair[abi:nn180100]((uint64_t)a3, (uint64_t)v22);
      a3[240] = 1;
      if (v27 && __p.__begin_)
      {
        __p.__end_ = __p.__begin_;
        operator delete(__p.__begin_);
      }
      geom::triangle_mesh_connectivity::~triangle_mesh_connectivity((geom::triangle_mesh_connectivity *)v22);
      geom::triangle_mesh_connectivity::~triangle_mesh_connectivity((geom::triangle_mesh_connectivity *)&v28);
      if (v41[0])
      {
        v41[1] = v41[0];
        operator delete(v41[0]);
      }
      if (__b[0])
      {
        __b[1] = __b[0];
        operator delete(__b[0]);
      }
      if (v59)
      {
        if (v58 && v57.n128_u64[0])
        {
          v57.n128_u64[1] = v57.n128_u64[0];
          operator delete((void *)v57.n128_u64[0]);
        }
        if (v55)
        {
          uint64_t v56 = v55;
          operator delete(v55);
        }
        if (v53)
        {
          uint64_t v54 = v53;
          operator delete(v53);
        }
        if (*((void *)&v51 + 1))
        {
          *(void *)&long long v52 = *((void *)&v51 + 1);
          operator delete(*((void **)&v51 + 1));
        }
        if ((void)v50)
        {
          *((void *)&v50 + 1) = v50;
          operator delete((void *)v50);
        }
        if (*((void *)&v48 + 1))
        {
          *(void *)&long long v49 = *((void *)&v48 + 1);
          operator delete(*((void **)&v48 + 1));
        }
        if ((void)v47)
        {
          *((void *)&v47 + 1) = v47;
          operator delete((void *)v47);
        }
      }
    }
    else
    {
LABEL_45:
      float64x2_t v20 = (std::vector<unsigned int> *)std::__throw_bad_optional_access[abi:nn180100]();
      std::optional<std::vector<unsigned int>>::operator=[abi:nn180100]<std::vector<unsigned int>,void>(v20, v21);
    }
  }
  else
  {
    *a3 = 0;
    a3[240] = 0;
  }
}

std::vector<unsigned int> *std::optional<std::vector<unsigned int>>::operator=[abi:nn180100]<std::vector<unsigned int>,void>(std::vector<unsigned int> *this, __n128 *a2)
{
  if (LOBYTE(this[1].__begin_))
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE((uint64_t)this, a2);
  }
  else
  {
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
    *this = *(std::vector<unsigned int> *)a2->n128_u8;
    a2->n128_u64[0] = 0;
    a2->n128_u64[1] = 0;
    a2[1].n128_u64[0] = 0;
    LOBYTE(this[1].__begin_) = 1;
  }
  return this;
}

void geom::triangle_mesh_connectivity::make(geom::triangle_mesh_connectivity *this@<X0>, unint64_t a2@<X1>, const void *a3@<X2>, unsigned char *a4@<X8>)
{
  std::vector<unsigned int> __p = 0;
  unint64_t v13 = 0;
  uint64_t v14 = 0;
  if (a2)
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, a2);
    uint64_t v9 = (char *)v13;
    size_t v10 = 4 * a2;
    bzero(v13, 4 * a2);
    unint64_t v13 = &v9[4 * a2];
    unsigned int v11 = __p;
  }
  else
  {
    size_t v10 = 0;
    unsigned int v11 = 0;
  }
  memcpy(v11, a3, v10);
  geom::triangle_mesh_connectivity::make((std::vector<int>::size_type)this, (unsigned int **)&__p, a4);
  if (__p)
  {
    unint64_t v13 = __p;
    operator delete(__p);
  }
}

void geom::triangle_mesh_connectivity::make(geom::triangle_mesh_connectivity *a1@<X0>, const void *a2@<X1>, unint64_t a3@<X2>, unsigned char *a4@<X8>)
{
}

uint64_t geom::triangle_mesh_connectivity::collapse_edge(geom::triangle_mesh_connectivity *this, unsigned int a2)
{
  uint64_t v2 = *((void *)this + 23);
  if (a2 >= (unint64_t)((*((void *)this + 24) - v2) >> 2)) {
    return 0xFFFFFFFFLL;
  }
  unsigned int v3 = *(_DWORD *)(v2 + 4 * a2);
  if (v3 == -1) {
    return 0xFFFFFFFFLL;
  }
  unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v3 / 3, v3 % 3);
  half_edge_twiunsigned __int16 n = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, half_edge_for_face_vertex);
  BOOL is_boundary_half_edge = geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(this, half_edge_for_face_vertex);
  unint64_t face_and_face_vertex_for_half_edge = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, half_edge_for_face_vertex);
  int v9 = face_and_face_vertex_for_half_edge;
  unint64_t v10 = HIDWORD(face_and_face_vertex_for_half_edge);
  unint64_t v11 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, half_edge_twin);
  int v12 = v10;
  if ((_BYTE)v10) {
    unsigned __int8 v13 = v10 - 1;
  }
  else {
    unsigned __int8 v13 = 2;
  }
  if (v10 == 2) {
    unsigned __int8 v14 = 0;
  }
  else {
    unsigned __int8 v14 = v10 + 1;
  }
  if (BYTE4(v11)) {
    unsigned __int8 v15 = BYTE4(v11) - 1;
  }
  else {
    unsigned __int8 v15 = 2;
  }
  if (BYTE4(v11) == 2) {
    unsigned __int8 v16 = 0;
  }
  else {
    unsigned __int8 v16 = BYTE4(v11) + 1;
  }
  unsigned __int8 v55 = v13;
  unsigned int v17 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v9, v13);
  unsigned int v18 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, v17);
  unsigned __int8 v54 = v14;
  unsigned int v19 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v9, v14);
  unsigned int v20 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, v19);
  BOOL v50 = is_boundary_half_edge;
  int v51 = v12;
  int v53 = v11;
  unsigned __int8 v52 = v16;
  if (is_boundary_half_edge)
  {
    unsigned int v21 = -1;
    unsigned int v22 = -1;
  }
  else
  {
    unsigned int v24 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v11, v16);
    unsigned int v21 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, v24);
    unsigned int v25 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v11, v15);
    unsigned int v22 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, v25);
  }
  unint64_t v26 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v18);
  unint64_t v27 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v20);
  unint64_t v28 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v21);
  unint64_t v29 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v22);
  int v30 = *(_DWORD *)this;
  uint64_t result = geom::triangle_mesh_half_edge_connectivity::collapse_edge(this, half_edge_for_face_vertex);
  if (*(_DWORD *)this != v30)
  {
    unsigned int v31 = 3 * v9;
    uint64_t v32 = *((void *)this + 20);
    uint64_t v33 = *(unsigned int *)(v32 + 4 * (3 * v9 + v54));
    unsigned int v34 = *(_DWORD *)(v32 + 4 * (3 * v9 + v55));
    if (result == -1)
    {
      uint64_t v36 = *((void *)this + 23);
      *(_DWORD *)(v36 + 4 * v33) = -1;
      BOOL v42 = v50;
      int v41 = v51;
      int v38 = v53;
      unsigned __int8 v43 = v15;
      unsigned __int8 v39 = v52;
    }
    else
    {
      if (v27 == -1) {
        unsigned int v35 = *(_DWORD *)(v32 + 4 * (3 * v9 + v55));
      }
      else {
        unsigned int v35 = *(_DWORD *)(v32 + 4 * (3 * v9 + v54));
      }
      if (v35 != v33) {
        unsigned int v34 = *(_DWORD *)(v32 + 4 * (3 * v9 + v54));
      }
      uint64_t v36 = *((void *)this + 23);
      if (v26 != -1)
      {
        unsigned int v37 = 3 * v26 + BYTE4(v26);
        *(_DWORD *)(v32 + 4 * v37) = v35;
        *(_DWORD *)(v36 + 4 * v35) = v37;
      }
      int v38 = v53;
      unsigned __int8 v39 = v52;
      if (v27 != -1)
      {
        unsigned int v40 = 3 * v27 + BYTE4(v27);
        *(_DWORD *)(v32 + 4 * v40) = v33;
        *(_DWORD *)(v36 + 4 * v33) = v40;
      }
      BOOL v42 = v50;
      int v41 = v51;
      unsigned __int8 v43 = v15;
    }
    *(_DWORD *)(v36 + 4 * v34) = -1;
    if (v42) {
      goto LABEL_47;
    }
    unsigned int v44 = 3 * v38;
    uint64_t v45 = *(unsigned int *)(v32 + 4 * (3 * v38 + v39));
    unsigned int v46 = *(_DWORD *)(v32 + 4 * (3 * v38 + v43));
    if (result == -1)
    {
      unsigned int v49 = -1;
    }
    else
    {
      if (v28 == -1) {
        int v47 = *(_DWORD *)(v32 + 4 * (3 * v38 + v43));
      }
      else {
        int v47 = *(_DWORD *)(v32 + 4 * (3 * v38 + v39));
      }
      if (v47 != v45) {
        unsigned int v46 = v45;
      }
      if (v28 != -1)
      {
        unsigned int v48 = 3 * v28 + BYTE4(v28);
        *(_DWORD *)(v32 + 4 * v48) = v45;
        *(_DWORD *)(v36 + 4 * v45) = v48;
      }
      if (v29 == -1) {
        goto LABEL_46;
      }
      unsigned int v49 = 3 * v29 + BYTE4(v29);
      *(_DWORD *)(v32 + 4 * v49) = v47;
      LODWORD(v45) = v47;
    }
    *(_DWORD *)(v36 + 4 * v45) = v49;
LABEL_46:
    *(_DWORD *)(v36 + 4 * v46) = -1;
    *(_DWORD *)(v32 + 4 * v44) = -1;
    *(_DWORD *)(v32 + 4 * (v44 + 1)) = -1;
    *(_DWORD *)(v32 + 4 * (v44 + 2)) = -1;
LABEL_47:
    *(_DWORD *)(v36 + 4 * *(unsigned int *)(v32 + 4 * (v41 + v31))) = -1;
    *(_DWORD *)(v32 + 4 * v31) = -1;
    *(_DWORD *)(v32 + 4 * (v31 + 1)) = -1;
    *(_DWORD *)(v32 + 4 * (v31 + 2)) = -1;
  }
  return result;
}

uint64_t geom::triangle_mesh_connectivity::swap_edge(geom::triangle_mesh_connectivity *this, unsigned int a2)
{
  uint64_t v2 = a2;
  uint64_t v3 = *((void *)this + 23);
  if (a2 >= (unint64_t)((*((void *)this + 24) - v3) >> 2)) {
    return 0;
  }
  unsigned int v4 = *(_DWORD *)(v3 + 4 * a2);
  if (v4 == -1) {
    return 0;
  }
  unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, v4 / 3, v4 % 3);
  half_edge_twiunsigned __int16 n = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(this, half_edge_for_face_vertex);
  if (half_edge_twin == -1) {
    return 0;
  }
  unsigned int v9 = half_edge_twin;
  unint64_t face_and_face_vertex_for_half_edge = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, half_edge_for_face_vertex);
  unint64_t v11 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v9);
  uint64_t result = geom::triangle_mesh_half_edge_connectivity::swap_edge(this, half_edge_for_face_vertex);
  if (result)
  {
    int v13 = 3 * v11;
    unsigned int v14 = 3 * face_and_face_vertex_for_half_edge + BYTE4(face_and_face_vertex_for_half_edge);
    if (BYTE4(face_and_face_vertex_for_half_edge) == 2) {
      int v15 = 0;
    }
    else {
      int v15 = BYTE4(face_and_face_vertex_for_half_edge) + 1;
    }
    unsigned int v16 = v15 + 3 * face_and_face_vertex_for_half_edge;
    if (BYTE4(v11) == 2) {
      int v17 = 0;
    }
    else {
      int v17 = BYTE4(v11) + 1;
    }
    unsigned int v18 = v17 + v13;
    uint64_t v19 = *((void *)this + 20);
    uint64_t v20 = *(unsigned int *)(v19 + 4 * v16);
    uint64_t v21 = *(unsigned int *)(v19 + 4 * v18);
    unsigned int v22 = v13 + BYTE4(v11);
    uint64_t v23 = *((void *)this + 23);
    *(_DWORD *)(v23 + 4 * v2) = v16;
    *(_DWORD *)(v23 + 4 * v20) = v22;
    *(_DWORD *)(v23 + 4 * v21) = v14;
    *(_DWORD *)(v19 + 4 * v14) = v21;
    *(_DWORD *)(v19 + 4 * v22) = v20;
    *(_DWORD *)(v19 + 4 * v16) = a2;
    *(_DWORD *)(v19 + 4 * v18) = a2;
    return 1;
  }
  return result;
}

uint64_t geom::triangle_mesh_connectivity::split_face(int32x2_t *this, int a2)
{
  unint64_t v2 = (3 * a2);
  int32x2_t v3 = this[2];
  unint64_t v4 = (uint64_t)(*(void *)&this[3] - *(void *)&v3) >> 2;
  if (v4 <= v2 || *(_DWORD *)(*(void *)&v3 + 4 * v2) == -1) {
    return 0;
  }
  uint64_t result = geom::triangle_mesh_half_edge_connectivity::split_face(this, a2);
  if (result)
  {
    int v7 = 3 * (v4 / 3);
    uint64_t v8 = (v2 + 1);
    unint64_t v10 = this + 25;
    unsigned int v9 = (char *)this[25];
    int32x2_t v11 = this[20];
    uint64_t v12 = *(unsigned int *)(*(void *)&v11 + 4 * v8);
    uint64_t v13 = (v2 + 2);
    uint64_t v14 = *(unsigned int *)(*(void *)&v11 + 4 * v13);
    int v15 = (char *)this[23];
    unsigned int v16 = (char *)this[24];
    *(_DWORD *)&v15[4 * v12] = v7;
    int v106 = v14;
    *(_DWORD *)&v15[4 * v14] = v7 + 3;
    uint64_t v17 = (v16 - v15) >> 2;
    if (v16 >= v9)
    {
      unint64_t v19 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 62) {
        goto LABEL_151;
      }
      uint64_t v20 = v9 - v15;
      if (v20 >> 1 > v19) {
        unint64_t v19 = v20 >> 1;
      }
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v21 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v21 = v19;
      }
      if (v21)
      {
        unsigned int v22 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[25], v21);
        int v15 = (char *)this[23];
        unsigned int v16 = (char *)this[24];
      }
      else
      {
        unsigned int v22 = 0;
      }
      uint64_t v23 = &v22[4 * v17];
      unsigned int v9 = &v22[4 * v21];
      *(_DWORD *)uint64_t v23 = v8;
      unsigned int v18 = v23 + 4;
      while (v16 != v15)
      {
        int v24 = *((_DWORD *)v16 - 1);
        v16 -= 4;
        *((_DWORD *)v23 - 1) = v24;
        v23 -= 4;
      }
      this[23] = (int32x2_t)v23;
      this[24] = (int32x2_t)v18;
      this[25] = (int32x2_t)v9;
      if (v15)
      {
        operator delete(v15);
        unsigned int v9 = (char *)*v10;
      }
    }
    else
    {
      *(_DWORD *)unsigned int v16 = v8;
      unsigned int v18 = v16 + 4;
    }
    this[24] = (int32x2_t)v18;
    int v25 = v7 + 1;
    if (v18 >= v9)
    {
      unint64_t v27 = (unsigned char *)this[23];
      uint64_t v28 = (v18 - v27) >> 2;
      unint64_t v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 62) {
        goto LABEL_151;
      }
      uint64_t v30 = v9 - v27;
      if (v30 >> 1 > v29) {
        unint64_t v29 = v30 >> 1;
      }
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v31 = v29;
      }
      if (v31)
      {
        uint64_t v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[25], v31);
        unint64_t v27 = (unsigned char *)this[23];
        unsigned int v18 = (char *)this[24];
      }
      else
      {
        uint64_t v32 = 0;
      }
      uint64_t v33 = &v32[4 * v28];
      unsigned int v9 = &v32[4 * v31];
      *(_DWORD *)uint64_t v33 = v25;
      unint64_t v26 = v33 + 4;
      while (v18 != v27)
      {
        int v34 = *((_DWORD *)v18 - 1);
        v18 -= 4;
        *((_DWORD *)v33 - 1) = v34;
        v33 -= 4;
      }
      this[23] = (int32x2_t)v33;
      this[24] = (int32x2_t)v26;
      this[25] = (int32x2_t)v9;
      if (v27)
      {
        operator delete(v27);
        unsigned int v9 = (char *)*v10;
      }
    }
    else
    {
      *(_DWORD *)unsigned int v18 = v25;
      unint64_t v26 = v18 + 4;
    }
    this[24] = (int32x2_t)v26;
    int v35 = v7 + 4;
    if (v26 >= v9)
    {
      unsigned int v37 = (char *)this[23];
      uint64_t v38 = (v26 - v37) >> 2;
      unint64_t v39 = v38 + 1;
      if ((unint64_t)(v38 + 1) >> 62) {
        goto LABEL_151;
      }
      uint64_t v40 = v9 - v37;
      if (v40 >> 1 > v39) {
        unint64_t v39 = v40 >> 1;
      }
      if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v41 = v39;
      }
      if (v41)
      {
        BOOL v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[25], v41);
        unsigned int v37 = (char *)this[23];
        unint64_t v26 = (char *)this[24];
      }
      else
      {
        BOOL v42 = 0;
      }
      unsigned __int8 v43 = &v42[4 * v38];
      unsigned int v44 = &v42[4 * v41];
      *(_DWORD *)unsigned __int8 v43 = v35;
      uint64_t v36 = v43 + 4;
      while (v26 != v37)
      {
        int v45 = *((_DWORD *)v26 - 1);
        v26 -= 4;
        *((_DWORD *)v43 - 1) = v45;
        v43 -= 4;
      }
      this[23] = (int32x2_t)v43;
      this[24] = (int32x2_t)v36;
      this[25] = (int32x2_t)v44;
      if (v37) {
        operator delete(v37);
      }
    }
    else
    {
      *(_DWORD *)unint64_t v26 = v35;
      uint64_t v36 = v26 + 4;
    }
    int v46 = v17 + 2;
    unsigned int v48 = this + 22;
    int v47 = (char *)this[22];
    this[24] = (int32x2_t)v36;
    unsigned int v49 = (char *)this[20];
    BOOL v50 = (char *)this[21];
    *(_DWORD *)&v49[4 * v8] = v17;
    *(_DWORD *)&v49[4 * v13] = v17 + 2;
    if (v50 >= v47)
    {
      uint64_t v52 = (v50 - v49) >> 2;
      unint64_t v53 = v52 + 1;
      if ((unint64_t)(v52 + 1) >> 62) {
        goto LABEL_151;
      }
      uint64_t v54 = v47 - v49;
      if (v54 >> 1 > v53) {
        unint64_t v53 = v54 >> 1;
      }
      if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v55 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v55 = v53;
      }
      if (v55)
      {
        uint64_t v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[22], v55);
        unsigned int v49 = (char *)this[20];
        BOOL v50 = (char *)this[21];
      }
      else
      {
        uint64_t v56 = 0;
      }
      __n128 v57 = &v56[4 * v52];
      int v47 = &v56[4 * v55];
      *(_DWORD *)__n128 v57 = v12;
      int v51 = v57 + 4;
      while (v50 != v49)
      {
        int v58 = *((_DWORD *)v50 - 1);
        v50 -= 4;
        *((_DWORD *)v57 - 1) = v58;
        v57 -= 4;
      }
      this[20] = (int32x2_t)v57;
      this[21] = (int32x2_t)v51;
      this[22] = (int32x2_t)v47;
      if (v49)
      {
        operator delete(v49);
        int v47 = (char *)*v48;
      }
    }
    else
    {
      *(_DWORD *)BOOL v50 = v12;
      int v51 = v50 + 4;
    }
    int v59 = v17 + 1;
    this[21] = (int32x2_t)v51;
    if (v51 >= v47)
    {
      uint64_t v61 = (unsigned char *)this[20];
      uint64_t v62 = (v51 - v61) >> 2;
      unint64_t v63 = v62 + 1;
      if ((unint64_t)(v62 + 1) >> 62) {
        goto LABEL_151;
      }
      uint64_t v64 = v47 - v61;
      if (v64 >> 1 > v63) {
        unint64_t v63 = v64 >> 1;
      }
      if ((unint64_t)v64 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v65 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v65 = v63;
      }
      if (v65)
      {
        float64x2_t v66 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[22], v65);
        uint64_t v61 = (unsigned char *)this[20];
        int v51 = (char *)this[21];
      }
      else
      {
        float64x2_t v66 = 0;
      }
      float64x2_t v67 = &v66[4 * v62];
      int v47 = &v66[4 * v65];
      *(_DWORD *)float64x2_t v67 = v59;
      uint64_t v60 = v67 + 4;
      while (v51 != v61)
      {
        int v68 = *((_DWORD *)v51 - 1);
        v51 -= 4;
        *((_DWORD *)v67 - 1) = v68;
        v67 -= 4;
      }
      this[20] = (int32x2_t)v67;
      this[21] = (int32x2_t)v60;
      this[22] = (int32x2_t)v47;
      if (v61)
      {
        operator delete(v61);
        int v47 = (char *)*v48;
      }
    }
    else
    {
      *(_DWORD *)int v51 = v59;
      uint64_t v60 = v51 + 4;
    }
    this[21] = (int32x2_t)v60;
    if (v60 >= v47)
    {
      unsigned int v70 = (unsigned char *)this[20];
      uint64_t v71 = (v60 - v70) >> 2;
      unint64_t v72 = v71 + 1;
      if ((unint64_t)(v71 + 1) >> 62) {
        goto LABEL_151;
      }
      uint64_t v73 = v47 - v70;
      if (v73 >> 1 > v72) {
        unint64_t v72 = v73 >> 1;
      }
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v74 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        int v75 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[22], v74);
        unsigned int v70 = (unsigned char *)this[20];
        uint64_t v60 = (char *)this[21];
      }
      else
      {
        int v75 = 0;
      }
      unint64_t v76 = &v75[4 * v71];
      int v47 = &v75[4 * v74];
      *(_DWORD *)unint64_t v76 = v17;
      int8x16_t v69 = v76 + 4;
      while (v60 != v70)
      {
        int v77 = *((_DWORD *)v60 - 1);
        v60 -= 4;
        *((_DWORD *)v76 - 1) = v77;
        v76 -= 4;
      }
      this[20] = (int32x2_t)v76;
      this[21] = (int32x2_t)v69;
      this[22] = (int32x2_t)v47;
      if (v70)
      {
        operator delete(v70);
        int v47 = (char *)*v48;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v60 = v17;
      int8x16_t v69 = v60 + 4;
    }
    this[21] = (int32x2_t)v69;
    if (v69 >= v47)
    {
      unint64_t v79 = (unsigned char *)this[20];
      uint64_t v80 = (v69 - v79) >> 2;
      unint64_t v81 = v80 + 1;
      if ((unint64_t)(v80 + 1) >> 62) {
        goto LABEL_151;
      }
      uint64_t v82 = v47 - v79;
      if (v82 >> 1 > v81) {
        unint64_t v81 = v82 >> 1;
      }
      if ((unint64_t)v82 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v83 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v83 = v81;
      }
      if (v83)
      {
        uint64_t v84 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[22], v83);
        unint64_t v79 = (unsigned char *)this[20];
        int8x16_t v69 = (char *)this[21];
      }
      else
      {
        uint64_t v84 = 0;
      }
      unint64_t v85 = &v84[4 * v80];
      int v47 = &v84[4 * v83];
      *(_DWORD *)unint64_t v85 = v106;
      uint64_t v78 = v85 + 4;
      while (v69 != v79)
      {
        int v86 = *((_DWORD *)v69 - 1);
        v69 -= 4;
        *((_DWORD *)v85 - 1) = v86;
        v85 -= 4;
      }
      this[20] = (int32x2_t)v85;
      this[21] = (int32x2_t)v78;
      this[22] = (int32x2_t)v47;
      if (v79)
      {
        operator delete(v79);
        int v47 = (char *)*v48;
      }
    }
    else
    {
      *(_DWORD *)int8x16_t v69 = v106;
      uint64_t v78 = v69 + 4;
    }
    this[21] = (int32x2_t)v78;
    if (v78 >= v47)
    {
      uint64_t v88 = (unsigned char *)this[20];
      uint64_t v89 = (v78 - v88) >> 2;
      unint64_t v90 = v89 + 1;
      if ((unint64_t)(v89 + 1) >> 62) {
        goto LABEL_151;
      }
      uint64_t v91 = v47 - v88;
      if (v91 >> 1 > v90) {
        unint64_t v90 = v91 >> 1;
      }
      if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v92 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v92 = v90;
      }
      if (v92)
      {
        unint64_t v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[22], v92);
        uint64_t v88 = (unsigned char *)this[20];
        uint64_t v78 = (char *)this[21];
      }
      else
      {
        unint64_t v93 = 0;
      }
      unint64_t v94 = &v93[4 * v89];
      int v47 = &v93[4 * v92];
      *(_DWORD *)unint64_t v94 = v46;
      unint64_t v87 = v94 + 4;
      while (v78 != v88)
      {
        int v95 = *((_DWORD *)v78 - 1);
        v78 -= 4;
        *((_DWORD *)v94 - 1) = v95;
        v94 -= 4;
      }
      this[20] = (int32x2_t)v94;
      this[21] = (int32x2_t)v87;
      this[22] = (int32x2_t)v47;
      if (v88)
      {
        operator delete(v88);
        int v47 = (char *)*v48;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v78 = v46;
      unint64_t v87 = v78 + 4;
    }
    this[21] = (int32x2_t)v87;
    if (v87 < v47)
    {
      *(_DWORD *)unint64_t v87 = v59;
      int v96 = v87 + 4;
LABEL_150:
      this[21] = (int32x2_t)v96;
      return 1;
    }
    uint64_t v97 = (char *)this[20];
    uint64_t v98 = (v87 - v97) >> 2;
    unint64_t v99 = v98 + 1;
    if (!((unint64_t)(v98 + 1) >> 62))
    {
      uint64_t v100 = v47 - v97;
      if (v100 >> 1 > v99) {
        unint64_t v99 = v100 >> 1;
      }
      if ((unint64_t)v100 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v101 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v101 = v99;
      }
      if (v101)
      {
        long long v102 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this[22], v101);
        uint64_t v97 = (char *)this[20];
        unint64_t v87 = (char *)this[21];
      }
      else
      {
        long long v102 = 0;
      }
      unsigned int v103 = &v102[4 * v98];
      uint64_t v104 = &v102[4 * v101];
      *(_DWORD *)unsigned int v103 = v59;
      int v96 = v103 + 4;
      while (v87 != v97)
      {
        int v105 = *((_DWORD *)v87 - 1);
        v87 -= 4;
        *((_DWORD *)v103 - 1) = v105;
        v103 -= 4;
      }
      this[20] = (int32x2_t)v103;
      this[21] = (int32x2_t)v96;
      this[22] = (int32x2_t)v104;
      if (v97) {
        operator delete(v97);
      }
      goto LABEL_150;
    }
LABEL_151:
    abort();
  }
  return result;
}

uint64_t std::__throw_bad_optional_access[abi:nn180100]()
{
  return std::swap[abi:nn180100]<geom::triangle_mesh_half_edge_connectivity>();
}

void std::swap[abi:nn180100]<geom::triangle_mesh_half_edge_connectivity>(uint64_t *a1, uint64_t a2)
{
  long long v2 = *((_OWORD *)a1 + 3);
  long long v3 = *((_OWORD *)a1 + 4);
  *((_OWORD *)a1 + 3) = 0u;
  *((_OWORD *)a1 + 4) = 0u;
  long long v4 = *((_OWORD *)a1 + 5);
  long long v5 = *((_OWORD *)a1 + 6);
  *((_OWORD *)a1 + 5) = 0u;
  *((_OWORD *)a1 + 6) = 0u;
  uint64_t v6 = *a1;
  *a1 = 0;
  int v7 = *((_DWORD *)a1 + 2);
  *((_DWORD *)a1 + 2) = 0;
  long long v8 = *((_OWORD *)a1 + 1);
  long long v9 = *((_OWORD *)a1 + 2);
  *((_OWORD *)a1 + 1) = 0u;
  *((_OWORD *)a1 + 2) = 0u;
  if (a1 != (uint64_t *)a2)
  {
    a1[5] = *(void *)(a2 + 40);
    *(void *)(a2 + 40) = 0;
    uint64_t v10 = a1[6];
    a1[6] = *(void *)(a2 + 48);
    *(void *)(a2 + 48) = v10;
    uint64_t v11 = a1[7];
    a1[7] = *(void *)(a2 + 56);
    *(void *)(a2 + 56) = v11;
    uint64_t v12 = a1[8];
    a1[8] = *(void *)(a2 + 64);
    *(void *)(a2 + 64) = v12;
    uint64_t v13 = a1[9];
    a1[9] = *(void *)(a2 + 72);
    *(void *)(a2 + 72) = v13;
    uint64_t v14 = a1[10];
    a1[10] = *(void *)(a2 + 80);
    *(void *)(a2 + 80) = v14;
    uint64_t v15 = a1[11];
    a1[11] = *(void *)(a2 + 88);
    *(void *)(a2 + 88) = v15;
    uint64_t v16 = a1[12];
    a1[12] = *(void *)(a2 + 96);
    *(void *)(a2 + 96) = v16;
    uint64_t v17 = a1[13];
    a1[13] = *(void *)(a2 + 104);
    *(void *)(a2 + 104) = v17;
    *(_DWORD *)a1 = *(_DWORD *)a2;
    *(_DWORD *)a2 = 0;
    LODWORD(v17) = *((_DWORD *)a1 + 1);
    *((_DWORD *)a1 + 1) = *(_DWORD *)(a2 + 4);
    *(_DWORD *)(a2 + 4) = v17;
    *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
    uint64_t v18 = a1[2];
    a1[2] = *(void *)(a2 + 16);
    *(void *)(a2 + 16) = v18;
    uint64_t v19 = a1[3];
    a1[3] = *(void *)(a2 + 24);
    *(void *)(a2 + 24) = v19;
    a1[4] = *(void *)(a2 + 32);
  }
  uint64_t v20 = *(void **)(a2 + 40);
  unint64_t v21 = *(void **)(a2 + 64);
  *(_OWORD *)(a2 + 48) = v2;
  *(_OWORD *)(a2 + 64) = v3;
  unsigned int v22 = *(void **)(a2 + 88);
  *(_OWORD *)(a2 + 80) = v4;
  *(_OWORD *)(a2 + 96) = v5;
  *(void *)a2 = v6;
  *(_DWORD *)(a2 + 8) = v7;
  uint64_t v23 = *(void **)(a2 + 16);
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v9;
  if (v22) {
    operator delete(v22);
  }
  if (v21) {
    operator delete(v21);
  }
  if (v20) {
    operator delete(v20);
  }
  if (v23)
  {
    operator delete(v23);
  }
}

__n128 std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>::pair[abi:nn180100](uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  uint64_t v2 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v2;
  uint64_t v3 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v3;
  uint64_t v4 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v4;
  uint64_t v5 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = v5;
  uint64_t v6 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = v6;
  uint64_t v7 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = v7;
  uint64_t v8 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = v8;
  uint64_t v9 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v9;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)a2 = 0;
  LODWORD(v9) = *(_DWORD *)(a1 + 4);
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = v9;
  LODWORD(v9) = *(_DWORD *)(a1 + 8);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = v9;
  uint64_t v10 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = v10;
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = v11;
  uint64_t v12 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = v12;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 0;
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  __n128 result = *(__n128 *)(a2 + 184);
  *(__n128 *)(a1 + 184) = result;
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  *(unsigned char *)(a1 + 208) = 0;
  *(unsigned char *)(a1 + 232) = 0;
  if (*(unsigned char *)(a2 + 232))
  {
    *(void *)(a1 + 208) = 0;
    *(void *)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
    __n128 result = *(__n128 *)(a2 + 208);
    *(__n128 *)(a1 + 208) = result;
    *(void *)(a1 + 224) = *(void *)(a2 + 224);
    *(void *)(a2 + 208) = 0;
    *(void *)(a2 + 216) = 0;
    *(void *)(a2 + 224) = 0;
    *(unsigned char *)(a1 + 232) = 1;
  }
  return result;
}

uint64_t geom::interval<float>::interval(uint64_t result)
{
  *(unsigned char *)result |= 0x1Fu;
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t geom::interval<float>::interval(uint64_t a1, float a2)
{
  *(unsigned char *)a1 &= 0xF9u;
  *(float *)(a1 + 4) = a2;
  *(float *)(a1 + 8) = a2;
  geom::interval<float>::set_flags(a1);
  return a1;
}

uint64_t geom::interval<float>::set_singleton(uint64_t result, float a2)
{
  *(unsigned char *)result &= 0xF9u;
  *(float *)(result + 4) = a2;
  *(float *)(result + 8) = a2;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::interval(uint64_t a1, float a2, float a3)
{
  *(unsigned char *)a1 &= 0xF9u;
  *(float *)(a1 + 4) = a2;
  *(float *)(a1 + 8) = a3;
  geom::interval<float>::set_flags(a1);
  return a1;
}

uint64_t geom::interval<float>::set_closed(uint64_t result, float a2, float a3)
{
  *(unsigned char *)result &= 0xF9u;
  *(float *)(result + 4) = a2;
  *(float *)(result + 8) = a3;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::interval(uint64_t a1, int a2, int a3, float a4, float a5)
{
  *(unsigned char *)a1 = (2 * (a2 == 0)) | (4 * (a3 == 0)) | *(unsigned char *)a1 & 0xF9;
  *(float *)(a1 + 4) = a4;
  *(float *)(a1 + 8) = a5;
  geom::interval<float>::set_flags(a1);
  return a1;
}

uint64_t geom::interval<float>::set(uint64_t result, int a2, int a3, float a4, float a5)
{
  *(unsigned char *)__n128 result = *(unsigned char *)result & 0xF9 | (2 * (a2 == 0)) | (4 * (a3 == 0));
  *(float *)(result + 4) = a4;
  *(float *)(result + 8) = a5;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::set_lower_bound(uint64_t result, int a2, float a3)
{
  *(unsigned char *)__n128 result = *(unsigned char *)result & 0xFD | (2 * (a2 == 0));
  *(float *)(result + 4) = a3;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::set_flags(uint64_t result)
{
  float v2 = *(float *)(result + 4);
  float v1 = *(float *)(result + 8);
  BOOL v3 = (*(unsigned char *)result & 6) != 0;
  if (v1 != v2) {
    BOOL v3 = v1 < v2;
  }
  if (v3) {
    char v4 = *(unsigned char *)result & 0xFE | v3 | 0x18;
  }
  else {
    char v4 = *(unsigned char *)result & 0xE6 | v3 & 0xE7 | (8 * (v2 != -INFINITY)) | (16 * (v1 != INFINITY));
  }
  *(unsigned char *)__n128 result = v4;
  return result;
}

uint64_t geom::interval<float>::set_upper_bound(uint64_t result, int a2, float a3)
{
  *(unsigned char *)__n128 result = *(unsigned char *)result & 0xFB | (4 * (a2 == 0));
  *(float *)(result + 8) = a3;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::set_empty(uint64_t result)
{
  *(unsigned char *)result |= 6u;
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::set_open(uint64_t result, float a2, float a3)
{
  *(unsigned char *)result |= 6u;
  *(float *)(result + 4) = a2;
  *(float *)(result + 8) = a3;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::set_universe(uint64_t result)
{
  *(unsigned char *)result |= 6u;
  *(void *)(result + 4) = 0x7F800000FF800000;
  return geom::interval<float>::set_flags(result);
}

uint64_t geom::interval<float>::lower_bound(uint64_t result, float a2)
{
  *(float *)(result + 4) = a2;
  return geom::interval<float>::set_flags(result);
}

float geom::interval<float>::lower_bound(uint64_t a1)
{
  return *(float *)(a1 + 4);
}

uint64_t geom::interval<float>::lower_type(uint64_t result, int a2)
{
  *(unsigned char *)__n128 result = *(unsigned char *)result & 0xFD | (2 * (a2 == 0));
  return geom::interval<float>::set_flags(result);
}

BOOL geom::interval<float>::lower_bound_type(unsigned char *a1)
{
  return (*a1 & 2) == 0;
}

uint64_t geom::interval<float>::upper_bound(uint64_t result, float a2)
{
  *(float *)(result + 8) = a2;
  return geom::interval<float>::set_flags(result);
}

float geom::interval<float>::upper_bound(uint64_t a1)
{
  return *(float *)(a1 + 8);
}

uint64_t geom::interval<float>::upper_type(uint64_t result, int a2)
{
  *(unsigned char *)__n128 result = *(unsigned char *)result & 0xFB | (4 * (a2 == 0));
  return geom::interval<float>::set_flags(result);
}

BOOL geom::interval<float>::upper_bound_type(unsigned char *a1)
{
  return (*a1 & 4) == 0;
}

uint64_t geom::interval<float>::is_valid()
{
  return 1;
}

uint64_t geom::interval<float>::is_empty(unsigned char *a1)
{
  return *a1 & 1;
}

BOOL geom::interval<float>::is_closed_below(unsigned char *a1)
{
  return (*a1 & 3) != 2;
}

BOOL geom::interval<float>::is_closed_above(unsigned char *a1)
{
  return (*a1 & 5) != 4;
}

BOOL geom::interval<float>::is_closed(unsigned char *a1)
{
  return (*a1 & 3) != 2 && (*a1 & 5) != 4;
}

BOOL geom::interval<float>::is_open_below(unsigned char *a1)
{
  return (*a1 & 3) != 0;
}

BOOL geom::interval<float>::is_open_above(unsigned char *a1)
{
  return (*a1 & 5) != 0;
}

BOOL geom::interval<float>::is_open(unsigned char *a1)
{
  return (*a1 & 7) != 0;
}

uint64_t geom::interval<float>::is_bounded_below(unsigned __int8 *a1)
{
  return (*a1 >> 3) & 1;
}

uint64_t geom::interval<float>::is_bounded_above(unsigned __int8 *a1)
{
  return (*a1 >> 4) & 1;
}

BOOL geom::interval<float>::is_bounded(unsigned __int8 *a1)
{
  return (~*a1 & 0x18) == 0;
}

BOOL geom::interval<float>::is_compact(unsigned __int8 *a1)
{
  int v1 = *a1;
  int v2 = v1 & 3;
  int v3 = v1 & 5;
  BOOL v4 = (~v1 & 0x18) == 0;
  return v2 != 2 && v3 != 4 && v4;
}

BOOL geom::interval<float>::is_universe(unsigned char *a1)
{
  return (*a1 & 0x18) == 0;
}

uint64_t geom::interval<float>::contains(uint64_t a1, float a2)
{
  float v2 = *(float *)(a1 + 4);
  float v3 = *(float *)(a1 + 8);
  BOOL v4 = v2 < a2;
  if ((*(unsigned char *)a1 & 2) == 0) {
    BOOL v4 = v2 <= a2;
  }
  if ((*(unsigned char *)a1 & 4) != 0) {
    BOOL v5 = v3 > a2;
  }
  else {
    BOOL v5 = v3 >= a2;
  }
  return v4 & v5;
}

float geom::interval<float>::midpoint(uint64_t a1)
{
  if ((*(unsigned char *)a1 & 0x19) == 0x18) {
    return *(float *)(a1 + 8) * 0.5 + *(float *)(a1 + 4) * 0.5;
  }
  else {
    return NAN;
  }
}

uint64_t geom::interval<double>::interval(uint64_t result)
{
  *(unsigned char *)result |= 0x1Fu;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return result;
}

uint64_t geom::interval<double>::interval(uint64_t a1, double a2)
{
  *(unsigned char *)a1 &= 0xF9u;
  *(double *)(a1 + 8) = a2;
  *(double *)(a1 + 16) = a2;
  geom::interval<double>::set_flags(a1);
  return a1;
}

uint64_t geom::interval<double>::set_singleton(uint64_t result, double a2)
{
  *(unsigned char *)result &= 0xF9u;
  *(double *)(result + 8) = a2;
  *(double *)(result + 16) = a2;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::interval(uint64_t a1, double a2, double a3)
{
  *(unsigned char *)a1 &= 0xF9u;
  *(double *)(a1 + 8) = a2;
  *(double *)(a1 + 16) = a3;
  geom::interval<double>::set_flags(a1);
  return a1;
}

uint64_t geom::interval<double>::set_closed(uint64_t result, double a2, double a3)
{
  *(unsigned char *)result &= 0xF9u;
  *(double *)(result + 8) = a2;
  *(double *)(result + 16) = a3;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::interval(uint64_t a1, int a2, int a3, double a4, double a5)
{
  *(unsigned char *)a1 = (2 * (a2 == 0)) | (4 * (a3 == 0)) | *(unsigned char *)a1 & 0xF9;
  *(double *)(a1 + 8) = a4;
  *(double *)(a1 + 16) = a5;
  geom::interval<double>::set_flags(a1);
  return a1;
}

uint64_t geom::interval<double>::set(uint64_t result, int a2, int a3, double a4, double a5)
{
  *(unsigned char *)__n128 result = *(unsigned char *)result & 0xF9 | (2 * (a2 == 0)) | (4 * (a3 == 0));
  *(double *)(result + 8) = a4;
  *(double *)(result + 16) = a5;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::set_lower_bound(uint64_t result, int a2, double a3)
{
  *(unsigned char *)__n128 result = *(unsigned char *)result & 0xFD | (2 * (a2 == 0));
  *(double *)(result + 8) = a3;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::set_flags(uint64_t result)
{
  double v2 = *(double *)(result + 8);
  double v1 = *(double *)(result + 16);
  BOOL v3 = (*(unsigned char *)result & 6) != 0;
  if (v1 != v2) {
    BOOL v3 = v1 < v2;
  }
  if (v3) {
    char v4 = *(unsigned char *)result & 0xFE | v3 | 0x18;
  }
  else {
    char v4 = *(unsigned char *)result & 0xE6 | v3 & 0xE7 | (8 * (v2 != -INFINITY)) | (16 * (v1 != INFINITY));
  }
  *(unsigned char *)__n128 result = v4;
  return result;
}

uint64_t geom::interval<double>::set_upper_bound(uint64_t result, int a2, double a3)
{
  *(unsigned char *)__n128 result = *(unsigned char *)result & 0xFB | (4 * (a2 == 0));
  *(double *)(result + 16) = a3;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::set_empty(uint64_t result)
{
  *(unsigned char *)result |= 6u;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::set_open(uint64_t result, double a2, double a3)
{
  *(unsigned char *)result |= 6u;
  *(double *)(result + 8) = a2;
  *(double *)(result + 16) = a3;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::set_universe(uint64_t result)
{
  *(unsigned char *)result |= 6u;
  *(_OWORD *)(result + 8) = xmmword_236F17150;
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::lower_bound(uint64_t result, double a2)
{
  *(double *)(result + 8) = a2;
  return geom::interval<double>::set_flags(result);
}

double geom::interval<double>::lower_bound(uint64_t a1)
{
  return *(double *)(a1 + 8);
}

uint64_t geom::interval<double>::lower_type(uint64_t result, int a2)
{
  *(unsigned char *)__n128 result = *(unsigned char *)result & 0xFD | (2 * (a2 == 0));
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::upper_bound(uint64_t result, double a2)
{
  *(double *)(result + 16) = a2;
  return geom::interval<double>::set_flags(result);
}

double geom::interval<double>::upper_bound(uint64_t a1)
{
  return *(double *)(a1 + 16);
}

uint64_t geom::interval<double>::upper_type(uint64_t result, int a2)
{
  *(unsigned char *)__n128 result = *(unsigned char *)result & 0xFB | (4 * (a2 == 0));
  return geom::interval<double>::set_flags(result);
}

uint64_t geom::interval<double>::is_valid()
{
  return 1;
}

uint64_t geom::interval<double>::contains(uint64_t a1, double a2)
{
  double v2 = *(double *)(a1 + 8);
  double v3 = *(double *)(a1 + 16);
  BOOL v4 = v2 < a2;
  if ((*(unsigned char *)a1 & 2) == 0) {
    BOOL v4 = v2 <= a2;
  }
  if ((*(unsigned char *)a1 & 4) != 0) {
    BOOL v5 = v3 > a2;
  }
  else {
    BOOL v5 = v3 >= a2;
  }
  return v4 & v5;
}

double geom::interval<double>::midpoint(uint64_t a1)
{
  if ((*(unsigned char *)a1 & 0x19) == 0x18) {
    return *(double *)(a1 + 16) * 0.5 + *(double *)(a1 + 8) * 0.5;
  }
  else {
    return NAN;
  }
}

uint64_t geom::kd_tree<float,(unsigned char)2>::kd_tree(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v6[0] = a2;
  v6[1] = a3;
  *(unsigned char *)a1 = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_fEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v6, a4, a1 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

double geom::kd_tree<float,(unsigned char)2>::kd_tree(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  uint64_t v2 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = *(void *)a2;
  *(void *)(a1 + 16) = v2;
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return result;
}

double geom::kd_tree<float,(unsigned char)2>::kd_tree(uint64_t a1)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  return result;
}

uint64_t geom::kd_tree<float,(unsigned char)2>::reset(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = result;
  *(unsigned char *)double result = 0;
  *(void *)(result + 40) = *(void *)(result + 32);
  *(void *)(result + 64) = *(void *)(result + 56);
  if (!a3) {
    a2 = 0;
  }
  if (a3 && a4) {
    operator new[]();
  }
  if (*(unsigned char *)(result + 24))
  {
    double result = *(void *)(result + 8);
    if (result) {
      double result = MEMORY[0x237E10700](result, 0x1000C8000313F17);
    }
  }
  *(void *)(v5 + 8) = a2;
  *(void *)(v5 + 16) = a3;
  *(unsigned char *)(v5 + 24) = 0;
  return result;
}

uint64_t geom::kd_tree<float,(unsigned char)2>::is_initialized(unsigned __int8 *a1)
{
  return *a1;
}

void geom::kd_tree<float,(unsigned char)2>::build(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1) {
      geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(a1);
    }
  }
  else
  {
    geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(a1);
  }
}

void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  std::vector<int>::size_type v2 = *(void *)(a1 + 16) + 1;
  __x[0] = -1;
  uint64_t v23 = (void *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v29, 0, sizeof(v29));
  std::vector<unsigned int>::resize(&v29, *(void *)(a1 + 16));
  begiunsigned __int16 n = v29.__begin_;
  std::vector<int>::pointer end = v29.__end_;
  if (v29.__begin_ != v29.__end_)
  {
    int v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8) {
      *(void *)(a1 + 64) = v6 + (v7 >> 2);
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  }
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)std::vector<int>::value_type __x = 0u;
  if ((unint64_t)v7 < 5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v31 = 1;
    LODWORD(v32) = *(void *)(a1 + 16);
    std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v31);
    uint64_t v9 = *((void *)&v28 + 1);
  }
  uint64_t v31 = (uint64_t)&unk_26EA04D60;
  uint64_t v32 = a1;
  uint64_t v33 = &v31;
  if (v9)
  {
    do
    {
      uint64_t v10 = (unsigned int *)(*(void *)(*(void *)&__x[2] + 8 * ((unint64_t)v28 / 0x155))
                           + 12 * ((unint64_t)v28 % 0x155));
      uint64_t v11 = (_anonymous_namespace_ *)*v10;
      uint64_t v12 = v10[1];
      uint64_t v13 = v10[2];
      *(void *)&long long v28 = v28 + 1;
      *((void *)&v28 + 1) = v9 - 1;
      if ((unint64_t)v28 >= 0x2AA)
      {
        operator delete(**(void ***)&__x[2]);
        *(void *)&__x[2] += 8;
        *(void *)&long long v28 = v28 - 341;
      }
      int v14 = v13 - v12;
      if (v13 - v12 == 1)
      {
        *(_DWORD *)(*v23 + 4 * (void)v11) = v29.__begin_[v12];
      }
      else
      {
        int v16 = v15 & 1;
        *((unsigned char *)v11 + *(void *)(a1 + 56)) = v15 & 1;
        if ((-1 << (v17 - 1)) + v14 >= ~(-1 << v17)) {
          int v18 = ~(-1 << v17);
        }
        else {
          int v18 = (-1 << (v17 - 1)) + v14;
        }
        uint64_t v19 = (v18 + v12);
        std::vector<int>::pointer v20 = v29.__begin_;
        std::function<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()((uint64_t)&v31, v16);
        if (v19 != v13) {
          std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v20[v12], (unint64_t)&v20[v19], (uint64_t)&v20[v13], (uint64_t)v30);
        }
        std::__function::__value_func<unsigned int ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:nn180100](v30);
        uint64_t v21 = *(void *)(a1 + 32);
        *(_DWORD *)(v21 + 4 * (void)v11) = v29.__begin_[v19];
        unint64_t v22 = (*(void *)(a1 + 40) - v21) >> 2;
        if (v22 > (2 * v11))
        {
          LODWORD(v24) = 2 * v11;
          HIDWORD(v24) = v12;
          int v25 = v19;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v24);
          unint64_t v22 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
        }
        if (v22 > ((2 * v11) | 1u))
        {
          LODWORD(v24) = (2 * v11) | 1;
          HIDWORD(v24) = v19 + 1;
          int v25 = v13;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v24);
        }
      }
      uint64_t v9 = *((void *)&v28 + 1);
    }
    while (*((void *)&v28 + 1));
  }
  *(unsigned char *)a1 = 1;
  std::__function::__value_func<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__value_func[abi:nn180100](&v31);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v29.__begin_)
  {
    v29.__end_ = v29.__begin_;
    operator delete(v29.__begin_);
  }
}

void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(uint64_t a1)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  std::vector<int>::size_type v2 = *(void *)(a1 + 16) + 1;
  __x[0] = -1;
  uint64_t v30 = (void *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v36, 0, sizeof(v36));
  std::vector<unsigned int>::resize(&v36, *(void *)(a1 + 16));
  begiunsigned __int16 n = v36.__begin_;
  std::vector<int>::pointer end = v36.__end_;
  if (v36.__begin_ != v36.__end_)
  {
    int v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8) {
      *(void *)(a1 + 64) = v6 + (v7 >> 2);
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  }
  long long v34 = 0u;
  long long v35 = 0u;
  *(_OWORD *)std::vector<int>::value_type __x = 0u;
  if ((unint64_t)v7 < 5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v38 = 1;
    LODWORD(v39) = *(void *)(a1 + 16);
    std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v38);
    uint64_t v9 = *((void *)&v35 + 1);
  }
  uint64_t v38 = (uint64_t)&unk_26EA04E80;
  uint64_t v39 = a1;
  uint64_t v40 = &v38;
  if (v9)
  {
    int32x2_t v10 = vdup_n_s32(0x7F800000u);
    do
    {
      uint64_t v11 = (unsigned int *)(*(void *)(*(void *)&__x[2] + 8 * ((unint64_t)v35 / 0x155))
                           + 12 * ((unint64_t)v35 % 0x155));
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = v11[2];
      *(void *)&long long v35 = v35 + 1;
      *((void *)&v35 + 1) = v9 - 1;
      if ((unint64_t)v35 >= 0x2AA)
      {
        operator delete(**(void ***)&__x[2]);
        *(void *)&__x[2] += 8;
        *(void *)&long long v35 = v35 - 341;
      }
      int v15 = v14 - v13;
      if (v14 - v13 == 1)
      {
        *(_DWORD *)(*v30 + 4 * v12) = v36.__begin_[v13];
      }
      else
      {
        float32x2_t v16 = (float32x2_t)0x7F0000007FLL;
        if (v14 > v13)
        {
          char v17 = &v36.__begin_[v13];
          uint64_t v18 = v14 - v13;
          float32x2_t v19 = (float32x2_t)0x7F0000007FLL;
          float32x2_t v20 = (float32x2_t)v10;
          do
          {
            unsigned int v21 = *v17++;
            float32x2_t v22 = *(float32x2_t *)(*(void *)(a1 + 8) + 8 * v21);
            float32x2_t v20 = vminnm_f32(v20, v22);
            float32x2_t v19 = vmaxnm_f32(v19, v22);
            --v18;
          }
          while (v18);
          float32x2_t v16 = vsub_f32(v19, v20);
        }
        uint64_t v23 = *(void *)&vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v16, 1), v16) & 1;
        *(unsigned char *)(*(void *)(a1 + 56) + v12) = v23;
        if ((-1 << (v24 - 1)) + v15 >= ~(-1 << v24)) {
          int v25 = ~(-1 << v24);
        }
        else {
          int v25 = (-1 << (v24 - 1)) + v15;
        }
        uint64_t v26 = (v25 + v13);
        std::vector<int>::pointer v27 = v36.__begin_;
        std::function<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()((uint64_t)&v38, v23);
        if (v26 != v14) {
          std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v27[v13], (unint64_t)&v27[v26], (uint64_t)&v27[v14], (uint64_t)v37);
        }
        std::__function::__value_func<unsigned int ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:nn180100](v37);
        uint64_t v28 = *(void *)(a1 + 32);
        *(_DWORD *)(v28 + 4 * v12) = v36.__begin_[v26];
        unint64_t v29 = (*(void *)(a1 + 40) - v28) >> 2;
        if (v29 > (2 * v12))
        {
          LODWORD(v31) = 2 * v12;
          HIDWORD(v31) = v13;
          int v32 = v26;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v31);
          unint64_t v29 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
        }
        if (v29 > ((2 * v12) | 1u))
        {
          LODWORD(v31) = (2 * v12) | 1;
          HIDWORD(v31) = v26 + 1;
          int v32 = v14;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v31);
        }
      }
      uint64_t v9 = *((void *)&v35 + 1);
    }
    while (*((void *)&v35 + 1));
  }
  *(unsigned char *)a1 = 1;
  std::__function::__value_func<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__value_func[abi:nn180100](&v38);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v36.__begin_)
  {
    v36.__end_ = v36.__begin_;
    operator delete(v36.__begin_);
  }
}

uint64_t geom::kd_tree<float,(unsigned char)2>::find_within_radius(void *a1, float32x2_t *a2, char **a3, float a4)
{
  a3[1] = *a3;
  long long v43 = 0u;
  memset(v42, 0, sizeof(v42));
  if (a1[5] - a1[4] >= 5uLL)
  {
    int v41 = 1;
    std::deque<unsigned int>::push_back(v42, &v41);
    for (uint64_t i = *((void *)&v43 + 1); *((void *)&v43 + 1); uint64_t i = *((void *)&v43 + 1))
    {
      uint64_t v9 = i - 1;
      uint64_t v10 = *(unsigned int *)(*(void *)(*((void *)&v42[0] + 1)
                                        + (((unint64_t)(v43 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v43 + v9) & 0x3FF));
      *((void *)&v43 + 1) = v9;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v42, 1);
      uint64_t v11 = a1[4];
      uint64_t v12 = *(unsigned int *)(v11 + 4 * v10);
      char v13 = *(unsigned char *)(a1[7] + v10);
      uint64_t v14 = (float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v13 & 1)));
      int v15 = (float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v13 & 1)));
      uint64_t v16 = a1[1];
      float32x2_t v17 = *a2;
      float32x2_t v38 = *a2;
      float v18 = *v15;
      float32x2_t v19 = *(float32x2_t *)(v16 + 8 * v12);
      float32x2_t v39 = v19;
      if (v18 == *v14) {
        float v20 = 0.0;
      }
      else {
        float v20 = v18 - *v14;
      }
      if (v20 >= (float)-a4)
      {
        if (v20 <= a4)
        {
          float32x2_t v23 = vsub_f32(v19, v17);
          if (vaddv_f32(vmul_f32(v23, v23)) <= (float)(a4 * a4))
          {
            int v25 = a3[1];
            unint64_t v24 = (unint64_t)a3[2];
            if ((unint64_t)v25 >= v24)
            {
              std::vector<int>::pointer v27 = *a3;
              uint64_t v28 = (v25 - *a3) >> 2;
              unint64_t v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 62) {
                abort();
              }
              uint64_t v30 = v24 - (void)v27;
              if (v30 >> 1 > v29) {
                unint64_t v29 = v30 >> 1;
              }
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v31 = v29;
              }
              if (v31)
              {
                int v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v31);
                std::vector<int>::pointer v27 = *a3;
                int v25 = a3[1];
              }
              else
              {
                int v32 = 0;
              }
              uint64_t v33 = &v32[4 * v28];
              *(_DWORD *)uint64_t v33 = v12;
              uint64_t v26 = v33 + 4;
              while (v25 != v27)
              {
                int v34 = *((_DWORD *)v25 - 1);
                v25 -= 4;
                *((_DWORD *)v33 - 1) = v34;
                v33 -= 4;
              }
              *a3 = v33;
              a3[1] = v26;
              a3[2] = &v32[4 * v31];
              if (v27) {
                operator delete(v27);
              }
            }
            else
            {
              *(_DWORD *)int v25 = v12;
              uint64_t v26 = v25 + 4;
            }
            a3[1] = v26;
            uint64_t v11 = a1[4];
          }
          unsigned int v35 = (2 * v10) | 1;
          unsigned int v40 = v35;
          int v41 = 2 * v10;
          unint64_t v36 = (a1[5] - v11) >> 2;
          if (v36 > (2 * v10))
          {
            std::deque<unsigned int>::push_back(v42, &v41);
            unsigned int v35 = v40;
            unint64_t v36 = (uint64_t)(a1[5] - a1[4]) >> 2;
          }
          if (v36 <= v35) {
            continue;
          }
          float32x2_t v22 = (int *)&v40;
          goto LABEL_34;
        }
        unint64_t v21 = (2 * v10) | 1u;
      }
      else
      {
        unint64_t v21 = (2 * v10);
      }
      int v41 = v21;
      if (v21 < (a1[5] - v11) >> 2)
      {
        float32x2_t v22 = &v41;
LABEL_34:
        std::deque<unsigned int>::push_back(v42, v22);
      }
    }
  }
  return std::deque<unsigned int>::~deque[abi:nn180100](v42);
}

uint64_t geom::kd_tree<float,(unsigned char)2>::find_closest(void *a1, float32x2_t *a2)
{
  long long v30 = 0u;
  memset(v29, 0, sizeof(v29));
  if (a1[5] - a1[4] >= 5uLL)
  {
    unsigned int v28 = 1;
    std::deque<unsigned int>::push_back(v29, &v28);
    uint64_t v4 = *((void *)&v30 + 1);
    if (*((void *)&v30 + 1))
    {
      LODWORD(v5) = -1;
      float v6 = INFINITY;
      while (1)
      {
        uint64_t v7 = v4 - 1;
        uint64_t v8 = *(unsigned int *)(*(void *)(*((void *)&v29[0] + 1)
                                         + (((unint64_t)(v30 + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * ((v30 + v7) & 0x3FF));
        *((void *)&v30 + 1) = v7;
        std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v29, 1);
        uint64_t v9 = a1[4];
        uint64_t v10 = *(unsigned int *)(v9 + 4 * v8);
        char v11 = *(unsigned char *)(a1[7] + v8);
        uint64_t v12 = (float *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
        char v13 = (float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v11 & 1)));
        float32x2_t v14 = *(float32x2_t *)(a1[1] + 8 * v10);
        uint32x2_t v15 = (uint32x2_t)vceq_f32(*a2, v14);
        int v16 = vpmin_u32(v15, v15).u32[0];
        float32x2_t v17 = vsub_f32(*a2, v14);
        float v18 = vaddv_f32(vmul_f32(v17, v17));
        if (v16 < 0) {
          float v18 = 0.0;
        }
        if (v18 >= v6)
        {
          uint64_t v5 = v5;
        }
        else
        {
          float v6 = v18;
          uint64_t v5 = v10;
        }
        float32x2_t v25 = *a2;
        float v19 = *v13;
        float32x2_t v26 = v14;
        if (v19 == *v12) {
          float v20 = 0.0;
        }
        else {
          float v20 = v19 - *v12;
        }
        float v21 = v20 * v20;
        unsigned int v27 = (2 * v8) | 1;
        unsigned int v28 = 2 * v8;
        unint64_t v22 = (a1[5] - v9) >> 2;
        if (v20 >= 0.0)
        {
          if (v22 > ((2 * v8) | 1u)) {
            std::deque<unsigned int>::push_back(v29, &v27);
          }
          if (v6 <= v21 || v28 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2)) {
            goto LABEL_24;
          }
          float32x2_t v23 = &v28;
        }
        else
        {
          if (v22 > (2 * v8)) {
            std::deque<unsigned int>::push_back(v29, &v28);
          }
          if (v6 <= v21 || v27 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2)) {
            goto LABEL_24;
          }
          float32x2_t v23 = &v27;
        }
        std::deque<unsigned int>::push_back(v29, v23);
LABEL_24:
        uint64_t v4 = *((void *)&v30 + 1);
        if (!*((void *)&v30 + 1)) {
          goto LABEL_27;
        }
      }
    }
  }
  uint64_t v5 = 0xFFFFFFFFLL;
LABEL_27:
  std::deque<unsigned int>::~deque[abi:nn180100](v29);
  return v5;
}

uint64_t geom::kd_tree<float,(unsigned char)2>::node_values(uint64_t a1)
{
  return a1 + 32;
}

uint64_t geom::kd_tree<float,(unsigned char)2>::node_split_axes(uint64_t a1)
{
  return a1 + 56;
}

uint64_t geom::kd_tree<float,(unsigned char)2>::points(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t geom::kd_tree<float,(unsigned char)3>::kd_tree(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v6[0] = a2;
  v6[1] = a3;
  *(unsigned char *)a1 = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v6, a4, a1 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

uint64_t geom::kd_tree<float,(unsigned char)3>::reset(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = result;
  *(unsigned char *)double result = 0;
  *(void *)(result + 40) = *(void *)(result + 32);
  *(void *)(result + 64) = *(void *)(result + 56);
  if (!a3) {
    a2 = 0;
  }
  if (a3 && a4) {
    operator new[]();
  }
  if (*(unsigned char *)(result + 24))
  {
    double result = *(void *)(result + 8);
    if (result) {
      double result = MEMORY[0x237E10700](result, 0x1000C80451B5BE8);
    }
  }
  *(void *)(v5 + 8) = a2;
  *(void *)(v5 + 16) = a3;
  *(unsigned char *)(v5 + 24) = 0;
  return result;
}

void geom::kd_tree<float,(unsigned char)3>::build(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1) {
      geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(a1);
    }
  }
  else
  {
    geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(a1);
  }
}

void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  std::vector<int>::size_type v2 = *(void *)(a1 + 16) + 1;
  __x[0] = -1;
  unint64_t v22 = (void *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v28, 0, sizeof(v28));
  std::vector<unsigned int>::resize(&v28, *(void *)(a1 + 16));
  begiunsigned __int16 n = v28.__begin_;
  std::vector<int>::pointer end = v28.__end_;
  if (v28.__begin_ != v28.__end_)
  {
    int v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8) {
      *(void *)(a1 + 64) = v6 + (v7 >> 2);
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  }
  long long v26 = 0u;
  long long v27 = 0u;
  *(_OWORD *)std::vector<int>::value_type __x = 0u;
  if ((unint64_t)v7 < 5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v30 = 1;
    LODWORD(v31) = *(void *)(a1 + 16);
    std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v30);
    uint64_t v9 = *((void *)&v27 + 1);
  }
  uint64_t v30 = (uint64_t)&unk_26EA04F80;
  uint64_t v31 = a1;
  int v32 = &v30;
  if (v9)
  {
    do
    {
      uint64_t v10 = (unsigned int *)(*(void *)(*(void *)&__x[2] + 8 * ((unint64_t)v27 / 0x155))
                           + 12 * ((unint64_t)v27 % 0x155));
      char v11 = (_anonymous_namespace_ *)*v10;
      uint64_t v12 = v10[1];
      uint64_t v13 = v10[2];
      *(void *)&long long v27 = v27 + 1;
      *((void *)&v27 + 1) = v9 - 1;
      if ((unint64_t)v27 >= 0x2AA)
      {
        operator delete(**(void ***)&__x[2]);
        *(void *)&__x[2] += 8;
        *(void *)&long long v27 = v27 - 341;
      }
      int v14 = v13 - v12;
      if (v13 - v12 == 1)
      {
        *(_DWORD *)(*v22 + 4 * (void)v11) = v28.__begin_[v12];
      }
      else
      {
        *((unsigned char *)v11 + *(void *)(a1 + 56)) = v15;
        if ((-1 << (v16 - 1)) + v14 >= ~(-1 << v16)) {
          int v17 = ~(-1 << v16);
        }
        else {
          int v17 = (-1 << (v16 - 1)) + v14;
        }
        uint64_t v18 = (v17 + v12);
        std::vector<int>::pointer v19 = v28.__begin_;
        std::function<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()((uint64_t)&v30, v15);
        if (v18 != v13) {
          std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v19[v12], (unint64_t)&v19[v18], (uint64_t)&v19[v13], (uint64_t)v29);
        }
        std::__function::__value_func<unsigned int ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:nn180100](v29);
        uint64_t v20 = *(void *)(a1 + 32);
        *(_DWORD *)(v20 + 4 * (void)v11) = v28.__begin_[v18];
        unint64_t v21 = (*(void *)(a1 + 40) - v20) >> 2;
        if (v21 > (2 * v11))
        {
          LODWORD(v23) = 2 * v11;
          HIDWORD(v23) = v12;
          int v24 = v18;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v23);
          unint64_t v21 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
        }
        if (v21 > ((2 * v11) | 1u))
        {
          LODWORD(v23) = (2 * v11) | 1;
          HIDWORD(v23) = v18 + 1;
          int v24 = v13;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v23);
        }
      }
      uint64_t v9 = *((void *)&v27 + 1);
    }
    while (*((void *)&v27 + 1));
  }
  *(unsigned char *)a1 = 1;
  std::__function::__value_func<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__value_func[abi:nn180100](&v30);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v28.__begin_)
  {
    v28.__end_ = v28.__begin_;
    operator delete(v28.__begin_);
  }
}

void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(uint64_t a1)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  std::vector<int>::size_type v2 = *(void *)(a1 + 16) + 1;
  __x[0] = -1;
  uint64_t v30 = (void *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v38, 0, sizeof(v38));
  std::vector<unsigned int>::resize(&v38, *(void *)(a1 + 16));
  begiunsigned __int16 n = v38.__begin_;
  std::vector<int>::pointer end = v38.__end_;
  if (v38.__begin_ != v38.__end_)
  {
    int v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8) {
      *(void *)(a1 + 64) = v6 + (v7 >> 2);
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  }
  long long v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)std::vector<int>::value_type __x = 0u;
  if ((unint64_t)v7 < 5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v40 = 1;
    LODWORD(v41) = *(void *)(a1 + 16);
    std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v40);
    uint64_t v9 = *((void *)&v37 + 1);
  }
  uint64_t v40 = (uint64_t)&unk_26EA05080;
  uint64_t v41 = a1;
  BOOL v42 = &v40;
  if (v9)
  {
    int32x4_t v31 = vdupq_n_s32(0x7F800000u);
    do
    {
      uint64_t v10 = (unsigned int *)(*(void *)(*(void *)&__x[2] + 8 * ((unint64_t)v37 / 0x155))
                           + 12 * ((unint64_t)v37 % 0x155));
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      uint64_t v13 = v10[2];
      *(void *)&long long v37 = v37 + 1;
      *((void *)&v37 + 1) = v9 - 1;
      if ((unint64_t)v37 >= 0x2AA)
      {
        operator delete(**(void ***)&__x[2]);
        *(void *)&__x[2] += 8;
        *(void *)&long long v37 = v37 - 341;
      }
      int v14 = v13 - v12;
      if (v13 - v12 == 1)
      {
        *(_DWORD *)(*v30 + 4 * v11) = v38.__begin_[v12];
      }
      else
      {
        v15.i64[0] = 0x7F0000007FLL;
        v15.i64[1] = 0x7F0000007FLL;
        float32x4_t v16 = (float32x4_t)v31;
        if (v13 > v12)
        {
          int v17 = &v38.__begin_[v12];
          uint64_t v18 = v13 - v12;
          float32x4_t v16 = (float32x4_t)v31;
          do
          {
            unsigned int v19 = *v17++;
            float32x4_t v20 = *(float32x4_t *)(*(void *)(a1 + 8) + 16 * v19);
            v16.i32[3] = 0;
            v20.i32[3] = 0;
            float32x4_t v16 = vminnmq_f32(v16, v20);
            v15.i32[3] = 0;
            float32x4_t v15 = vmaxnmq_f32(v15, v20);
            --v18;
          }
          while (v18);
        }
        float32x4_t v21 = vsubq_f32(v15, v16);
        unsigned __int8 v22 = vmovn_s32(vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1), v21)).u8[0];
        float32x4_t v32 = v21;
        if (v21.f32[2] <= *(float *)((unint64_t)&v32 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v22 & 1)))) {
          int v23 = v22 & 1;
        }
        else {
          int v23 = 2;
        }
        *(unsigned char *)(*(void *)(a1 + 56) + v11) = v23;
        if ((-1 << (v24 - 1)) + v14 >= ~(-1 << v24)) {
          int v25 = ~(-1 << v24);
        }
        else {
          int v25 = (-1 << (v24 - 1)) + v14;
        }
        uint64_t v26 = (v25 + v12);
        std::vector<int>::pointer v27 = v38.__begin_;
        std::function<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()((uint64_t)&v40, v23);
        if (v26 != v13) {
          std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v27[v12], (unint64_t)&v27[v26], (uint64_t)&v27[v13], (uint64_t)v39);
        }
        std::__function::__value_func<unsigned int ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:nn180100](v39);
        uint64_t v28 = *(void *)(a1 + 32);
        *(_DWORD *)(v28 + 4 * v11) = v38.__begin_[v26];
        unint64_t v29 = (*(void *)(a1 + 40) - v28) >> 2;
        if (v29 > (2 * v11))
        {
          LODWORD(v33) = 2 * v11;
          HIDWORD(v33) = v12;
          int v34 = v26;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v33);
          unint64_t v29 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
        }
        if (v29 > ((2 * v11) | 1u))
        {
          LODWORD(v33) = (2 * v11) | 1;
          HIDWORD(v33) = v26 + 1;
          int v34 = v13;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v33);
        }
      }
      uint64_t v9 = *((void *)&v37 + 1);
    }
    while (*((void *)&v37 + 1));
  }
  *(unsigned char *)a1 = 1;
  std::__function::__value_func<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__value_func[abi:nn180100](&v40);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v38.__begin_)
  {
    v38.__end_ = v38.__begin_;
    operator delete(v38.__begin_);
  }
}

uint64_t geom::kd_tree<float,(unsigned char)3>::find_within_radius(void *a1, float32x4_t *a2, char **a3, float a4)
{
  a3[1] = *a3;
  long long v44 = 0u;
  memset(v43, 0, sizeof(v43));
  if (a1[5] - a1[4] >= 5uLL)
  {
    int v42 = 1;
    std::deque<unsigned int>::push_back(v43, &v42);
    for (uint64_t i = *((void *)&v44 + 1); *((void *)&v44 + 1); uint64_t i = *((void *)&v44 + 1))
    {
      uint64_t v9 = i - 1;
      uint64_t v10 = *(unsigned int *)(*(void *)(*((void *)&v43[0] + 1)
                                        + (((unint64_t)(v44 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v44 + v9) & 0x3FF));
      *((void *)&v44 + 1) = v9;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v43, 1);
      uint64_t v11 = a1[4];
      uint64_t v12 = *(unsigned int *)(v11 + 4 * v10);
      char v13 = *(unsigned char *)(a1[7] + v10);
      int v14 = (float *)((unint64_t)&v40 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
      float32x4_t v15 = (float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFF3 | (4 * (v13 & 3)));
      uint64_t v16 = a1[1];
      float32x4_t v17 = *a2;
      float32x4_t v39 = *a2;
      float v18 = *v15;
      float32x4_t v19 = *(float32x4_t *)(v16 + 16 * v12);
      float32x4_t v40 = v19;
      if (v18 == *v14) {
        float v20 = 0.0;
      }
      else {
        float v20 = v18 - *v14;
      }
      if (v20 >= (float)-a4)
      {
        if (v20 <= a4)
        {
          float32x4_t v23 = vsubq_f32(v19, v17);
          float32x4_t v24 = vmulq_f32(v23, v23);
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0] <= (float)(a4 * a4))
          {
            uint64_t v26 = a3[1];
            unint64_t v25 = (unint64_t)a3[2];
            if ((unint64_t)v26 >= v25)
            {
              uint64_t v28 = *a3;
              uint64_t v29 = (v26 - *a3) >> 2;
              unint64_t v30 = v29 + 1;
              if ((unint64_t)(v29 + 1) >> 62) {
                abort();
              }
              uint64_t v31 = v25 - (void)v28;
              if (v31 >> 1 > v30) {
                unint64_t v30 = v31 >> 1;
              }
              if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v32 = v30;
              }
              if (v32)
              {
                uint64_t v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v32);
                uint64_t v28 = *a3;
                uint64_t v26 = a3[1];
              }
              else
              {
                uint64_t v33 = 0;
              }
              int v34 = &v33[4 * v29];
              *(_DWORD *)int v34 = v12;
              std::vector<int>::pointer v27 = v34 + 4;
              while (v26 != v28)
              {
                int v35 = *((_DWORD *)v26 - 1);
                v26 -= 4;
                *((_DWORD *)v34 - 1) = v35;
                v34 -= 4;
              }
              *a3 = v34;
              a3[1] = v27;
              a3[2] = &v33[4 * v32];
              if (v28) {
                operator delete(v28);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v26 = v12;
              std::vector<int>::pointer v27 = v26 + 4;
            }
            a3[1] = v27;
            uint64_t v11 = a1[4];
          }
          unsigned int v36 = (2 * v10) | 1;
          unsigned int v41 = v36;
          int v42 = 2 * v10;
          unint64_t v37 = (a1[5] - v11) >> 2;
          if (v37 > (2 * v10))
          {
            std::deque<unsigned int>::push_back(v43, &v42);
            unsigned int v36 = v41;
            unint64_t v37 = (uint64_t)(a1[5] - a1[4]) >> 2;
          }
          if (v37 <= v36) {
            continue;
          }
          unsigned __int8 v22 = (int *)&v41;
          goto LABEL_34;
        }
        unint64_t v21 = (2 * v10) | 1u;
      }
      else
      {
        unint64_t v21 = (2 * v10);
      }
      int v42 = v21;
      if (v21 < (a1[5] - v11) >> 2)
      {
        unsigned __int8 v22 = &v42;
LABEL_34:
        std::deque<unsigned int>::push_back(v43, v22);
      }
    }
  }
  return std::deque<unsigned int>::~deque[abi:nn180100](v43);
}

uint64_t geom::kd_tree<float,(unsigned char)3>::find_closest(void *a1, float32x4_t *a2)
{
  long long v30 = 0u;
  memset(v29, 0, sizeof(v29));
  if (a1[5] - a1[4] >= 5uLL)
  {
    unsigned int v28 = 1;
    std::deque<unsigned int>::push_back(v29, &v28);
    uint64_t v4 = *((void *)&v30 + 1);
    if (*((void *)&v30 + 1))
    {
      LODWORD(v5) = -1;
      float v6 = INFINITY;
      while (1)
      {
        uint64_t v7 = v4 - 1;
        uint64_t v8 = *(unsigned int *)(*(void *)(*((void *)&v29[0] + 1)
                                         + (((unint64_t)(v30 + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * ((v30 + v7) & 0x3FF));
        *((void *)&v30 + 1) = v7;
        std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v29, 1);
        uint64_t v9 = a1[4];
        uint64_t v10 = *(unsigned int *)(v9 + 4 * v8);
        float32x4_t v11 = *(float32x4_t *)(a1[1] + 16 * v10);
        uint32x4_t v12 = (uint32x4_t)vceqq_f32(*a2, v11);
        v12.i32[3] = v12.i32[2];
        unsigned int v13 = vminvq_u32(v12);
        float v14 = 0.0;
        if ((v13 & 0x80000000) == 0)
        {
          float32x4_t v15 = vsubq_f32(*a2, v11);
          float32x4_t v16 = vmulq_f32(v15, v15);
          LODWORD(v14) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).u32[0];
        }
        char v17 = *(unsigned char *)(a1[7] + v8);
        if (v14 >= v6)
        {
          uint64_t v5 = v5;
        }
        else
        {
          float v6 = v14;
          uint64_t v5 = v10;
        }
        float32x4_t v26 = *a2;
        float v18 = *(float *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v17 & 3)));
        float32x4_t v25 = v11;
        float v19 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v17 & 3)));
        if (v18 == v19) {
          float v20 = 0.0;
        }
        else {
          float v20 = v18 - v19;
        }
        float v21 = v20 * v20;
        unsigned int v27 = (2 * v8) | 1;
        unsigned int v28 = 2 * v8;
        unint64_t v22 = (a1[5] - v9) >> 2;
        if (v20 >= 0.0)
        {
          if (v22 > ((2 * v8) | 1u)) {
            std::deque<unsigned int>::push_back(v29, &v27);
          }
          if (v6 <= v21 || v28 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2)) {
            goto LABEL_24;
          }
          float32x4_t v23 = &v28;
        }
        else
        {
          if (v22 > (2 * v8)) {
            std::deque<unsigned int>::push_back(v29, &v28);
          }
          if (v6 <= v21 || v27 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2)) {
            goto LABEL_24;
          }
          float32x4_t v23 = &v27;
        }
        std::deque<unsigned int>::push_back(v29, v23);
LABEL_24:
        uint64_t v4 = *((void *)&v30 + 1);
        if (!*((void *)&v30 + 1)) {
          goto LABEL_27;
        }
      }
    }
  }
  uint64_t v5 = 0xFFFFFFFFLL;
LABEL_27:
  std::deque<unsigned int>::~deque[abi:nn180100](v29);
  return v5;
}

void geom::kd_tree<double,(unsigned char)2>::build(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1) {
      geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(a1);
    }
  }
  else
  {
    geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(a1);
  }
}

void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(uint64_t a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  std::vector<int>::size_type v2 = *(void *)(a1 + 16) + 1;
  __x[0] = -1;
  float32x4_t v23 = (void *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v29, 0, sizeof(v29));
  std::vector<unsigned int>::resize(&v29, *(void *)(a1 + 16));
  begiunsigned __int16 n = v29.__begin_;
  std::vector<int>::pointer end = v29.__end_;
  if (v29.__begin_ != v29.__end_)
  {
    int v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8) {
      *(void *)(a1 + 64) = v6 + (v7 >> 2);
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  }
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)std::vector<int>::value_type __x = 0u;
  if ((unint64_t)v7 < 5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v31 = 1;
    LODWORD(v32) = *(void *)(a1 + 16);
    std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v31);
    uint64_t v9 = *((void *)&v28 + 1);
  }
  uint64_t v31 = (uint64_t)&unk_26EA05180;
  uint64_t v32 = a1;
  uint64_t v33 = &v31;
  if (v9)
  {
    do
    {
      uint64_t v10 = (unsigned int *)(*(void *)(*(void *)&__x[2] + 8 * ((unint64_t)v28 / 0x155))
                           + 12 * ((unint64_t)v28 % 0x155));
      float32x4_t v11 = (_anonymous_namespace_ *)*v10;
      uint64_t v12 = v10[1];
      uint64_t v13 = v10[2];
      *(void *)&long long v28 = v28 + 1;
      *((void *)&v28 + 1) = v9 - 1;
      if ((unint64_t)v28 >= 0x2AA)
      {
        operator delete(**(void ***)&__x[2]);
        *(void *)&__x[2] += 8;
        *(void *)&long long v28 = v28 - 341;
      }
      int v14 = v13 - v12;
      if (v13 - v12 == 1)
      {
        *(_DWORD *)(*v23 + 4 * (void)v11) = v29.__begin_[v12];
      }
      else
      {
        int v16 = v15 & 1;
        *((unsigned char *)v11 + *(void *)(a1 + 56)) = v15 & 1;
        if ((-1 << (v17 - 1)) + v14 >= ~(-1 << v17)) {
          int v18 = ~(-1 << v17);
        }
        else {
          int v18 = (-1 << (v17 - 1)) + v14;
        }
        uint64_t v19 = (v18 + v12);
        std::vector<int>::pointer v20 = v29.__begin_;
        std::function<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()((uint64_t)&v31, v16);
        if (v19 != v13) {
          std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v20[v12], (unint64_t)&v20[v19], (uint64_t)&v20[v13], (uint64_t)v30);
        }
        std::__function::__value_func<unsigned int ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:nn180100](v30);
        uint64_t v21 = *(void *)(a1 + 32);
        *(_DWORD *)(v21 + 4 * (void)v11) = v29.__begin_[v19];
        unint64_t v22 = (*(void *)(a1 + 40) - v21) >> 2;
        if (v22 > (2 * v11))
        {
          LODWORD(v24) = 2 * v11;
          HIDWORD(v24) = v12;
          int v25 = v19;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v24);
          unint64_t v22 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
        }
        if (v22 > ((2 * v11) | 1u))
        {
          LODWORD(v24) = (2 * v11) | 1;
          HIDWORD(v24) = v19 + 1;
          int v25 = v13;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v24);
        }
      }
      uint64_t v9 = *((void *)&v28 + 1);
    }
    while (*((void *)&v28 + 1));
  }
  *(unsigned char *)a1 = 1;
  std::__function::__value_func<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__value_func[abi:nn180100](&v31);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v29.__begin_)
  {
    v29.__end_ = v29.__begin_;
    operator delete(v29.__begin_);
  }
}

void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(uint64_t a1)
{
  uint64_t v42 = *MEMORY[0x263EF8340];
  std::vector<int>::size_type v2 = *(void *)(a1 + 16) + 1;
  __x[0] = -1;
  long long v30 = (void *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v37, 0, sizeof(v37));
  std::vector<unsigned int>::resize(&v37, *(void *)(a1 + 16));
  begiunsigned __int16 n = v37.__begin_;
  std::vector<int>::pointer end = v37.__end_;
  if (v37.__begin_ != v37.__end_)
  {
    int v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8) {
      *(void *)(a1 + 64) = v6 + (v7 >> 2);
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  }
  long long v35 = 0u;
  long long v36 = 0u;
  *(_OWORD *)std::vector<int>::value_type __x = 0u;
  if ((unint64_t)v7 < 5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v39 = 1;
    LODWORD(v40) = *(void *)(a1 + 16);
    std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v39);
    uint64_t v9 = *((void *)&v36 + 1);
  }
  uint64_t v39 = (uint64_t)&unk_26EA05280;
  uint64_t v40 = a1;
  unsigned int v41 = &v39;
  if (v9)
  {
    int64x2_t v31 = vdupq_n_s64(0xFFF0000000000000);
    int64x2_t v29 = vdupq_n_s64(0x7FF0000000000000uLL);
    do
    {
      uint64_t v10 = (unsigned int *)(*(void *)(*(void *)&__x[2] + 8 * ((unint64_t)v36 / 0x155))
                           + 12 * ((unint64_t)v36 % 0x155));
      uint64_t v11 = *v10;
      uint64_t v12 = v10[1];
      uint64_t v13 = v10[2];
      *(void *)&long long v36 = v36 + 1;
      *((void *)&v36 + 1) = v9 - 1;
      if ((unint64_t)v36 >= 0x2AA)
      {
        operator delete(**(void ***)&__x[2]);
        *(void *)&__x[2] += 8;
        *(void *)&long long v36 = v36 - 341;
      }
      int v14 = v13 - v12;
      if (v13 - v12 == 1)
      {
        *(_DWORD *)(*v30 + 4 * v11) = v37.__begin_[v12];
      }
      else
      {
        int64x2_t v15 = v31;
        if (v13 > v12)
        {
          int v16 = &v37.__begin_[v12];
          uint64_t v17 = v13 - v12;
          float64x2_t v18 = (float64x2_t)v31;
          float64x2_t v19 = (float64x2_t)v29;
          do
          {
            unsigned int v20 = *v16++;
            float64x2_t v21 = *(float64x2_t *)(*(void *)(a1 + 8) + 16 * v20);
            float64x2_t v19 = vminnmq_f64(v19, v21);
            float64x2_t v18 = vmaxnmq_f64(v18, v21);
            --v17;
          }
          while (v17);
          int64x2_t v15 = (int64x2_t)vsubq_f64(v18, v19);
        }
        uint64_t v22 = *(void *)&vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64(v15, 1), (float64x2_t)v15)) & 1;
        *(unsigned char *)(*(void *)(a1 + 56) + v11) = v22;
        if ((-1 << (v23 - 1)) + v14 >= ~(-1 << v23)) {
          int v24 = ~(-1 << v23);
        }
        else {
          int v24 = (-1 << (v23 - 1)) + v14;
        }
        uint64_t v25 = (v24 + v12);
        std::vector<int>::pointer v26 = v37.__begin_;
        std::function<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()((uint64_t)&v39, v22);
        if (v25 != v13) {
          std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v26[v12], (unint64_t)&v26[v25], (uint64_t)&v26[v13], (uint64_t)v38);
        }
        std::__function::__value_func<unsigned int ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:nn180100](v38);
        uint64_t v27 = *(void *)(a1 + 32);
        *(_DWORD *)(v27 + 4 * v11) = v37.__begin_[v25];
        unint64_t v28 = (*(void *)(a1 + 40) - v27) >> 2;
        if (v28 > (2 * v11))
        {
          LODWORD(v32) = 2 * v11;
          HIDWORD(v32) = v12;
          int v33 = v25;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v32);
          unint64_t v28 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
        }
        if (v28 > ((2 * v11) | 1u))
        {
          LODWORD(v32) = (2 * v11) | 1;
          HIDWORD(v32) = v25 + 1;
          int v33 = v13;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v32);
        }
      }
      uint64_t v9 = *((void *)&v36 + 1);
    }
    while (*((void *)&v36 + 1));
  }
  *(unsigned char *)a1 = 1;
  std::__function::__value_func<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__value_func[abi:nn180100](&v39);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v37.__begin_)
  {
    v37.__end_ = v37.__begin_;
    operator delete(v37.__begin_);
  }
}

uint64_t geom::kd_tree<double,(unsigned char)2>::find_within_radius(void *a1, float64x2_t *a2, char **a3, double a4)
{
  a3[1] = *a3;
  long long v43 = 0u;
  memset(v42, 0, sizeof(v42));
  if (a1[5] - a1[4] >= 5uLL)
  {
    int v41 = 1;
    std::deque<unsigned int>::push_back(v42, &v41);
    for (uint64_t i = *((void *)&v43 + 1); *((void *)&v43 + 1); uint64_t i = *((void *)&v43 + 1))
    {
      uint64_t v9 = i - 1;
      uint64_t v10 = *(unsigned int *)(*(void *)(*((void *)&v42[0] + 1)
                                        + (((unint64_t)(v43 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v43 + v9) & 0x3FF));
      *((void *)&v43 + 1) = v9;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v42, 1);
      uint64_t v11 = a1[4];
      uint64_t v12 = *(unsigned int *)(v11 + 4 * v10);
      char v13 = *(unsigned char *)(a1[7] + v10);
      int v14 = (double *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFF7 | (8 * (v13 & 1)));
      int64x2_t v15 = (double *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF7 | (8 * (v13 & 1)));
      uint64_t v16 = a1[1];
      float64x2_t v17 = *a2;
      float64x2_t v38 = *a2;
      double v18 = *v15;
      float64x2_t v19 = *(float64x2_t *)(v16 + 16 * v12);
      float64x2_t v39 = v19;
      if (v18 == *v14) {
        double v20 = 0.0;
      }
      else {
        double v20 = v18 - *v14;
      }
      if (v20 >= -a4)
      {
        if (v20 <= a4)
        {
          float64x2_t v23 = vsubq_f64(v19, v17);
          if (vaddvq_f64(vmulq_f64(v23, v23)) <= a4 * a4)
          {
            uint64_t v25 = a3[1];
            unint64_t v24 = (unint64_t)a3[2];
            if ((unint64_t)v25 >= v24)
            {
              uint64_t v27 = *a3;
              uint64_t v28 = (v25 - *a3) >> 2;
              unint64_t v29 = v28 + 1;
              if ((unint64_t)(v28 + 1) >> 62) {
                abort();
              }
              uint64_t v30 = v24 - (void)v27;
              if (v30 >> 1 > v29) {
                unint64_t v29 = v30 >> 1;
              }
              if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v31 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v31 = v29;
              }
              if (v31)
              {
                uint64_t v32 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v31);
                uint64_t v27 = *a3;
                uint64_t v25 = a3[1];
              }
              else
              {
                uint64_t v32 = 0;
              }
              int v33 = &v32[4 * v28];
              *(_DWORD *)int v33 = v12;
              std::vector<int>::pointer v26 = v33 + 4;
              while (v25 != v27)
              {
                int v34 = *((_DWORD *)v25 - 1);
                v25 -= 4;
                *((_DWORD *)v33 - 1) = v34;
                v33 -= 4;
              }
              *a3 = v33;
              a3[1] = v26;
              a3[2] = &v32[4 * v31];
              if (v27) {
                operator delete(v27);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v25 = v12;
              std::vector<int>::pointer v26 = v25 + 4;
            }
            a3[1] = v26;
            uint64_t v11 = a1[4];
          }
          unsigned int v35 = (2 * v10) | 1;
          unsigned int v40 = v35;
          int v41 = 2 * v10;
          unint64_t v36 = (a1[5] - v11) >> 2;
          if (v36 > (2 * v10))
          {
            std::deque<unsigned int>::push_back(v42, &v41);
            unsigned int v35 = v40;
            unint64_t v36 = (uint64_t)(a1[5] - a1[4]) >> 2;
          }
          if (v36 <= v35) {
            continue;
          }
          uint64_t v22 = (int *)&v40;
          goto LABEL_34;
        }
        unint64_t v21 = (2 * v10) | 1u;
      }
      else
      {
        unint64_t v21 = (2 * v10);
      }
      int v41 = v21;
      if (v21 < (a1[5] - v11) >> 2)
      {
        uint64_t v22 = &v41;
LABEL_34:
        std::deque<unsigned int>::push_back(v42, v22);
      }
    }
  }
  return std::deque<unsigned int>::~deque[abi:nn180100](v42);
}

uint64_t geom::kd_tree<double,(unsigned char)2>::find_closest(void *a1, float64x2_t *a2)
{
  long long v30 = 0u;
  memset(v29, 0, sizeof(v29));
  if (a1[5] - a1[4] >= 5uLL)
  {
    unsigned int v28 = 1;
    std::deque<unsigned int>::push_back(v29, &v28);
    uint64_t v4 = *((void *)&v30 + 1);
    if (*((void *)&v30 + 1))
    {
      LODWORD(v5) = -1;
      double v6 = INFINITY;
      while (1)
      {
        uint64_t v7 = v4 - 1;
        uint64_t v8 = *(unsigned int *)(*(void *)(*((void *)&v29[0] + 1)
                                         + (((unint64_t)(v30 + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * ((v30 + v7) & 0x3FF));
        *((void *)&v30 + 1) = v7;
        std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v29, 1);
        uint64_t v9 = a1[4];
        uint64_t v10 = *(unsigned int *)(v9 + 4 * v8);
        char v11 = *(unsigned char *)(a1[7] + v8);
        uint64_t v12 = (double *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
        char v13 = (double *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
        float64x2_t v14 = *(float64x2_t *)(a1[1] + 16 * v10);
        int64x2_t v15 = vceqq_f64(*a2, v14);
        uint64_t v16 = vandq_s8((int8x16_t)vdupq_laneq_s64(v15, 1), (int8x16_t)v15).u64[0];
        float64x2_t v17 = vsubq_f64(*a2, v14);
        double v18 = vaddvq_f64(vmulq_f64(v17, v17));
        if (v16 < 0) {
          double v18 = 0.0;
        }
        if (v18 >= v6)
        {
          uint64_t v5 = v5;
        }
        else
        {
          double v6 = v18;
          uint64_t v5 = v10;
        }
        float64x2_t v25 = *a2;
        double v19 = *v13;
        float64x2_t v26 = v14;
        if (v19 == *v12) {
          double v20 = 0.0;
        }
        else {
          double v20 = v19 - *v12;
        }
        double v21 = v20 * v20;
        unsigned int v27 = (2 * v8) | 1;
        unsigned int v28 = 2 * v8;
        unint64_t v22 = (a1[5] - v9) >> 2;
        if (v20 >= 0.0)
        {
          if (v22 > ((2 * v8) | 1u)) {
            std::deque<unsigned int>::push_back(v29, &v27);
          }
          if (v6 <= v21 || v28 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2)) {
            goto LABEL_24;
          }
          float64x2_t v23 = &v28;
        }
        else
        {
          if (v22 > (2 * v8)) {
            std::deque<unsigned int>::push_back(v29, &v28);
          }
          if (v6 <= v21 || v27 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2)) {
            goto LABEL_24;
          }
          float64x2_t v23 = &v27;
        }
        std::deque<unsigned int>::push_back(v29, v23);
LABEL_24:
        uint64_t v4 = *((void *)&v30 + 1);
        if (!*((void *)&v30 + 1)) {
          goto LABEL_27;
        }
      }
    }
  }
  uint64_t v5 = 0xFFFFFFFFLL;
LABEL_27:
  std::deque<unsigned int>::~deque[abi:nn180100](v29);
  return v5;
}

uint64_t geom::kd_tree<double,(unsigned char)3>::kd_tree(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v6[0] = a2;
  v6[1] = a3;
  *(unsigned char *)a1 = 0;
  _ZN4geom19make_external_arrayINS_5sliceIDv3_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v6, a4, a1 + 8);
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  return a1;
}

uint64_t geom::kd_tree<double,(unsigned char)3>::reset(uint64_t result, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v5 = result;
  *(unsigned char *)double result = 0;
  *(void *)(result + 40) = *(void *)(result + 32);
  *(void *)(result + 64) = *(void *)(result + 56);
  if (!a3) {
    a2 = 0;
  }
  if (a3 && a4) {
    operator new[]();
  }
  if (*(unsigned char *)(result + 24))
  {
    double result = *(void *)(result + 8);
    if (result) {
      double result = MEMORY[0x237E10700](result, 0x1000C80E0EAB150);
    }
  }
  *(void *)(v5 + 8) = a2;
  *(void *)(v5 + 16) = a3;
  *(unsigned char *)(v5 + 24) = 0;
  return result;
}

void geom::kd_tree<double,(unsigned char)3>::build(uint64_t a1, int a2)
{
  if (a2)
  {
    if (a2 == 1) {
      geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(a1);
    }
  }
  else
  {
    geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(a1);
  }
}

void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(uint64_t a1)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  std::vector<int>::size_type v2 = *(void *)(a1 + 16) + 1;
  __x[0] = -1;
  unint64_t v22 = (void *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v28, 0, sizeof(v28));
  std::vector<unsigned int>::resize(&v28, *(void *)(a1 + 16));
  begiunsigned __int16 n = v28.__begin_;
  std::vector<int>::pointer end = v28.__end_;
  if (v28.__begin_ != v28.__end_)
  {
    int v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8) {
      *(void *)(a1 + 64) = v6 + (v7 >> 2);
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  }
  long long v26 = 0u;
  long long v27 = 0u;
  *(_OWORD *)std::vector<int>::value_type __x = 0u;
  if ((unint64_t)v7 < 5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v30 = 1;
    LODWORD(v31) = *(void *)(a1 + 16);
    std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v30);
    uint64_t v9 = *((void *)&v27 + 1);
  }
  uint64_t v30 = (uint64_t)&unk_26EA05380;
  uint64_t v31 = a1;
  uint64_t v32 = &v30;
  if (v9)
  {
    do
    {
      uint64_t v10 = (unsigned int *)(*(void *)(*(void *)&__x[2] + 8 * ((unint64_t)v27 / 0x155))
                           + 12 * ((unint64_t)v27 % 0x155));
      char v11 = (_anonymous_namespace_ *)*v10;
      uint64_t v12 = v10[1];
      uint64_t v13 = v10[2];
      *(void *)&long long v27 = v27 + 1;
      *((void *)&v27 + 1) = v9 - 1;
      if ((unint64_t)v27 >= 0x2AA)
      {
        operator delete(**(void ***)&__x[2]);
        *(void *)&__x[2] += 8;
        *(void *)&long long v27 = v27 - 341;
      }
      int v14 = v13 - v12;
      if (v13 - v12 == 1)
      {
        *(_DWORD *)(*v22 + 4 * (void)v11) = v28.__begin_[v12];
      }
      else
      {
        *((unsigned char *)v11 + *(void *)(a1 + 56)) = v15;
        if ((-1 << (v16 - 1)) + v14 >= ~(-1 << v16)) {
          int v17 = ~(-1 << v16);
        }
        else {
          int v17 = (-1 << (v16 - 1)) + v14;
        }
        uint64_t v18 = (v17 + v12);
        std::vector<int>::pointer v19 = v28.__begin_;
        std::function<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()((uint64_t)&v30, v15);
        if (v18 != v13) {
          std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v19[v12], (unint64_t)&v19[v18], (uint64_t)&v19[v13], (uint64_t)v29);
        }
        std::__function::__value_func<unsigned int ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:nn180100](v29);
        uint64_t v20 = *(void *)(a1 + 32);
        *(_DWORD *)(v20 + 4 * (void)v11) = v28.__begin_[v18];
        unint64_t v21 = (*(void *)(a1 + 40) - v20) >> 2;
        if (v21 > (2 * v11))
        {
          LODWORD(v23) = 2 * v11;
          HIDWORD(v23) = v12;
          int v24 = v18;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v23);
          unint64_t v21 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
        }
        if (v21 > ((2 * v11) | 1u))
        {
          LODWORD(v23) = (2 * v11) | 1;
          HIDWORD(v23) = v18 + 1;
          int v24 = v13;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v23);
        }
      }
      uint64_t v9 = *((void *)&v27 + 1);
    }
    while (*((void *)&v27 + 1));
  }
  *(unsigned char *)a1 = 1;
  std::__function::__value_func<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__value_func[abi:nn180100](&v30);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v28.__begin_)
  {
    v28.__end_ = v28.__begin_;
    operator delete(v28.__begin_);
  }
}

void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(uint64_t a1)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  std::vector<int>::size_type v2 = *(void *)(a1 + 16) + 1;
  __x[0] = -1;
  std::vector<int> v37 = (void *)(a1 + 32);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), v2, __x);
  memset(&v44, 0, sizeof(v44));
  std::vector<unsigned int>::resize(&v44, *(void *)(a1 + 16));
  begiunsigned __int16 n = v44.__begin_;
  std::vector<int>::pointer end = v44.__end_;
  if (v44.__begin_ != v44.__end_)
  {
    int v5 = 0;
    do
      *begin++ = v5++;
    while (begin != end);
  }
  uint64_t v6 = *(void *)(a1 + 56);
  uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  unint64_t v8 = *(void *)(a1 + 64) - v6;
  if (v7 >> 2 <= v8)
  {
    if (v7 >> 2 < v8) {
      *(void *)(a1 + 64) = v6 + (v7 >> 2);
    }
  }
  else
  {
    std::vector<unsigned char>::__append((unint64_t *)(a1 + 56), (v7 >> 2) - v8);
    uint64_t v7 = *(void *)(a1 + 40) - *(void *)(a1 + 32);
  }
  long long v42 = 0u;
  long long v43 = 0u;
  *(_OWORD *)std::vector<int>::value_type __x = 0u;
  if ((unint64_t)v7 < 5)
  {
    uint64_t v9 = 0;
  }
  else
  {
    uint64_t v46 = 1;
    LODWORD(v47) = *(void *)(a1 + 16);
    std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v46);
    uint64_t v9 = *((void *)&v43 + 1);
  }
  uint64_t v46 = (uint64_t)&unk_26EA05480;
  uint64_t v47 = a1;
  unsigned int v48 = &v46;
  if (v9)
  {
    int64x2_t v10 = vdupq_n_s64(0x7FF0000000000000uLL);
    int64x2_t v35 = v10;
    int64x2_t v36 = vdupq_n_s64(0xFFF0000000000000);
    do
    {
      char v11 = (unsigned int *)(*(void *)(*(void *)&__x[2] + 8 * ((unint64_t)v43 / 0x155))
                           + 12 * ((unint64_t)v43 % 0x155));
      uint64_t v12 = *v11;
      uint64_t v13 = v11[1];
      uint64_t v14 = v11[2];
      *(void *)&long long v43 = v43 + 1;
      *((void *)&v43 + 1) = v9 - 1;
      if ((unint64_t)v43 >= 0x2AA)
      {
        operator delete(**(void ***)&__x[2]);
        *(void *)&__x[2] += 8;
        *(void *)&long long v43 = v43 - 341;
      }
      int v15 = v14 - v13;
      if (v14 - v13 == 1)
      {
        *(_DWORD *)(*v37 + 4 * v12) = v44.__begin_[v13];
      }
      else
      {
        if (v14 <= v13)
        {
          v10.i64[0] = 0xFFF0000000000000;
          int64x2_t v25 = v36;
        }
        else
        {
          char v16 = &v44.__begin_[v13];
          uint64_t v17 = v14 - v13;
          v18.f64[0] = INFINITY;
          v19.f64[0] = -INFINITY;
          float64x2_t v21 = (float64x2_t)v35;
          float64x2_t v20 = (float64x2_t)v36;
          do
          {
            unsigned int v22 = *v16++;
            uint64_t v23 = *(void *)(a1 + 8) + 32 * v22;
            long long v24 = *(_OWORD *)(v23 + 16);
            float64x2_t v21 = vminnmq_f64(v21, *(float64x2_t *)v23);
            float64x2_t v18 = vminnmq_f64((float64x2_t)*(unint64_t *)&v18.f64[0], (float64x2_t)(unint64_t)v24);
            float64x2_t v20 = vmaxnmq_f64(v20, *(float64x2_t *)v23);
            float64x2_t v19 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v19.f64[0], (float64x2_t)(unint64_t)v24);
            --v17;
          }
          while (v17);
          int64x2_t v25 = (int64x2_t)vsubq_f64(v20, v21);
          int64x2_t v10 = (int64x2_t)vsubq_f64(v19, v18);
        }
        int64x2_t v26 = vcgtq_f64((float64x2_t)vdupq_laneq_s64(v25, 1), (float64x2_t)v25);
        *(int32x2_t *)v26.i8 = vmovn_s64(v26);
        uint64_t v27 = *(void *)&vmovn_s32((int32x4_t)v26) & 1;
        v38[0] = v25;
        v38[1] = v10;
        if (*(double *)v10.i64 <= *(double *)((unint64_t)v38 & 0xFFFFFFFFFFFFFFF7 | (8 * v27))) {
          int v28 = v27;
        }
        else {
          int v28 = 2;
        }
        *(unsigned char *)(*(void *)(a1 + 56) + v12) = v28;
        if ((-1 << (v29 - 1)) + v15 >= ~(-1 << v29)) {
          int v30 = ~(-1 << v29);
        }
        else {
          int v30 = (-1 << (v29 - 1)) + v15;
        }
        uint64_t v31 = (v30 + v13);
        std::vector<int>::pointer v32 = v44.__begin_;
        std::function<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()((uint64_t)&v46, v28);
        if (v31 != v14) {
          std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(&v32[v13], (unint64_t)&v32[v31], (uint64_t)&v32[v14], (uint64_t)v45);
        }
        std::__function::__value_func<unsigned int ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:nn180100](v45);
        uint64_t v33 = *(void *)(a1 + 32);
        *(_DWORD *)(v33 + 4 * v12) = v44.__begin_[v31];
        unint64_t v34 = (*(void *)(a1 + 40) - v33) >> 2;
        if (v34 > (2 * v12))
        {
          LODWORD(v39) = 2 * v12;
          HIDWORD(v39) = v13;
          int v40 = v31;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v39);
          unint64_t v34 = (uint64_t)(*(void *)(a1 + 40) - *(void *)(a1 + 32)) >> 2;
        }
        if (v34 > ((2 * v12) | 1u))
        {
          LODWORD(v39) = (2 * v12) | 1;
          HIDWORD(v39) = v31 + 1;
          int v40 = v14;
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(__x, &v39);
        }
      }
      uint64_t v9 = *((void *)&v43 + 1);
    }
    while (*((void *)&v43 + 1));
  }
  *(unsigned char *)a1 = 1;
  std::__function::__value_func<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__value_func[abi:nn180100](&v46);
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](__x);
  if (v44.__begin_)
  {
    v44.__end_ = v44.__begin_;
    operator delete(v44.__begin_);
  }
}

uint64_t geom::kd_tree<double,(unsigned char)3>::find_within_radius(void *a1, float64x2_t *a2, char **a3, double a4)
{
  a3[1] = *a3;
  long long v45 = 0u;
  memset(v44, 0, sizeof(v44));
  if (a1[5] - a1[4] >= 5uLL)
  {
    int v43 = 1;
    std::deque<unsigned int>::push_back(v44, &v43);
    for (uint64_t i = *((void *)&v45 + 1); *((void *)&v45 + 1); uint64_t i = *((void *)&v45 + 1))
    {
      uint64_t v9 = i - 1;
      uint64_t v10 = *(unsigned int *)(*(void *)(*((void *)&v44[0] + 1)
                                        + (((unint64_t)(v45 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v45 + v9) & 0x3FF));
      *((void *)&v45 + 1) = v9;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v44, 1);
      uint64_t v11 = a1[4];
      uint64_t v12 = *(unsigned int *)(v11 + 4 * v10);
      uint64_t v13 = *(unsigned char *)(a1[7] + v10) & 3;
      uint64_t v14 = (float64x2_t *)(a1[1] + 32 * v12);
      float64x2_t v15 = *a2;
      float64x2_t v16 = a2[1];
      v40[0] = *a2;
      v40[1] = v16;
      double v17 = *((double *)v40 + v13);
      float64x2_t v18 = *v14;
      float64x2_t v19 = v14[1];
      v41[0] = *v14;
      v41[1] = v19;
      double v20 = *((double *)v41 + v13);
      if (v17 == v20) {
        double v21 = 0.0;
      }
      else {
        double v21 = v17 - v20;
      }
      if (v21 >= -a4)
      {
        if (v21 <= a4)
        {
          float64x2_t v24 = vsubq_f64(v18, v15);
          float64x2_t v25 = vsubq_f64(v19, v16);
          if (vmulq_f64(v25, v25).f64[0] + vaddvq_f64(vmulq_f64(v24, v24)) <= a4 * a4)
          {
            uint64_t v27 = a3[1];
            unint64_t v26 = (unint64_t)a3[2];
            if ((unint64_t)v27 >= v26)
            {
              char v29 = *a3;
              uint64_t v30 = (v27 - *a3) >> 2;
              unint64_t v31 = v30 + 1;
              if ((unint64_t)(v30 + 1) >> 62) {
                abort();
              }
              uint64_t v32 = v26 - (void)v29;
              if (v32 >> 1 > v31) {
                unint64_t v31 = v32 >> 1;
              }
              if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v33 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v33 = v31;
              }
              if (v33)
              {
                unint64_t v34 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a3 + 2), v33);
                char v29 = *a3;
                uint64_t v27 = a3[1];
              }
              else
              {
                unint64_t v34 = 0;
              }
              int64x2_t v35 = &v34[4 * v30];
              *(_DWORD *)int64x2_t v35 = v12;
              int v28 = v35 + 4;
              while (v27 != v29)
              {
                int v36 = *((_DWORD *)v27 - 1);
                v27 -= 4;
                *((_DWORD *)v35 - 1) = v36;
                v35 -= 4;
              }
              *a3 = v35;
              a3[1] = v28;
              a3[2] = &v34[4 * v33];
              if (v29) {
                operator delete(v29);
              }
            }
            else
            {
              *(_DWORD *)uint64_t v27 = v12;
              int v28 = v27 + 4;
            }
            a3[1] = v28;
            uint64_t v11 = a1[4];
          }
          unsigned int v37 = (2 * v10) | 1;
          unsigned int v42 = v37;
          int v43 = 2 * v10;
          unint64_t v38 = (a1[5] - v11) >> 2;
          if (v38 > (2 * v10))
          {
            std::deque<unsigned int>::push_back(v44, &v43);
            unsigned int v37 = v42;
            unint64_t v38 = (uint64_t)(a1[5] - a1[4]) >> 2;
          }
          if (v38 <= v37) {
            continue;
          }
          uint64_t v23 = (int *)&v42;
          goto LABEL_34;
        }
        unint64_t v22 = (2 * v10) | 1u;
      }
      else
      {
        unint64_t v22 = (2 * v10);
      }
      int v43 = v22;
      if (v22 < (a1[5] - v11) >> 2)
      {
        uint64_t v23 = &v43;
LABEL_34:
        std::deque<unsigned int>::push_back(v44, v23);
      }
    }
  }
  return std::deque<unsigned int>::~deque[abi:nn180100](v44);
}

uint64_t geom::kd_tree<double,(unsigned char)3>::find_closest(void *a1, float64x2_t *a2)
{
  long long v34 = 0u;
  memset(v33, 0, sizeof(v33));
  if (a1[5] - a1[4] >= 5uLL)
  {
    unsigned int v32 = 1;
    std::deque<unsigned int>::push_back(v33, &v32);
    uint64_t v4 = *((void *)&v34 + 1);
    if (*((void *)&v34 + 1))
    {
      LODWORD(v5) = -1;
      double v6 = INFINITY;
      while (1)
      {
        uint64_t v7 = v4 - 1;
        uint64_t v8 = *(unsigned int *)(*(void *)(*((void *)&v33[0] + 1)
                                         + (((unint64_t)(v34 + v7) >> 7) & 0x1FFFFFFFFFFFFF8))
                             + 4 * ((v34 + v7) & 0x3FF));
        *((void *)&v34 + 1) = v7;
        std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v33, 1);
        uint64_t v9 = a1[4];
        uint64_t v10 = *(unsigned int *)(v9 + 4 * v8);
        uint64_t v11 = a1[1] + 32 * v10;
        float64x2_t v12 = a2[1];
        float64x2_t v13 = *(float64x2_t *)v11;
        float64x2_t v14 = *(float64x2_t *)(v11 + 16);
        int64x2_t v15 = vceqq_f64(*a2, *(float64x2_t *)v11);
        double v16 = 0.0;
        if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v15, 1), vandq_s8((int8x16_t)vceqq_f64(v12, v14), (int8x16_t)v15)).u64[0] & 0x8000000000000000) == 0)
        {
          float64x2_t v17 = vsubq_f64(*a2, v13);
          float64x2_t v18 = vsubq_f64(v12, v14);
          double v16 = vmulq_f64(v18, v18).f64[0] + vaddvq_f64(vmulq_f64(v17, v17));
        }
        char v19 = *(unsigned char *)(a1[7] + v8);
        BOOL v20 = v16 < v6;
        if (v16 < v6) {
          double v6 = v16;
        }
        v30[0] = *a2;
        v30[1] = v12;
        uint64_t v21 = v19 & 3;
        double v22 = *((double *)v30 + v21);
        if (v20) {
          uint64_t v5 = v10;
        }
        else {
          uint64_t v5 = v5;
        }
        v29[0] = v13;
        v29[1] = v14;
        double v23 = *((double *)v29 + v21);
        if (v22 == v23) {
          double v24 = 0.0;
        }
        else {
          double v24 = v22 - v23;
        }
        double v25 = v24 * v24;
        unsigned int v31 = (2 * v8) | 1;
        unsigned int v32 = 2 * v8;
        unint64_t v26 = (a1[5] - v9) >> 2;
        if (v24 >= 0.0)
        {
          if (v26 > ((2 * v8) | 1u)) {
            std::deque<unsigned int>::push_back(v33, &v31);
          }
          if (v6 <= v25 || v32 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2)) {
            goto LABEL_26;
          }
          uint64_t v27 = &v32;
        }
        else
        {
          if (v26 > (2 * v8)) {
            std::deque<unsigned int>::push_back(v33, &v32);
          }
          if (v6 <= v25 || v31 >= (unint64_t)((uint64_t)(a1[5] - a1[4]) >> 2)) {
            goto LABEL_26;
          }
          uint64_t v27 = &v31;
        }
        std::deque<unsigned int>::push_back(v33, v27);
LABEL_26:
        uint64_t v4 = *((void *)&v34 + 1);
        if (!*((void *)&v34 + 1)) {
          goto LABEL_29;
        }
      }
    }
  }
  uint64_t v5 = 0xFFFFFFFFLL;
LABEL_29:
  std::deque<unsigned int>::~deque[abi:nn180100](v33);
  return v5;
}

uint64_t anonymous namespace'::uint32_log2(_anonymous_namespace_ *this)
{
  unsigned int v1 = this >> 16;
  if (!(this >> 16)) {
    unsigned int v1 = this;
  }
  if (v1 <= 0xFF)
  {
    unsigned int v2 = 16 * (this >> 16 != 0);
  }
  else
  {
    v1 >>= 8;
    unsigned int v2 = (16 * (this >> 16 != 0)) | 8;
  }
  if (v1 > 0xF)
  {
    v1 >>= 4;
    v2 |= 4u;
  }
  if (v1 > 3)
  {
    v1 >>= 2;
    v2 |= 2u;
  }
  if (v1 <= 1) {
    return v2;
  }
  else {
    return v2 + 1;
  }
}

void std::function<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()(uint64_t a1, int a2)
{
  int v5 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    (*(void (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v5);
  }
  else
  {
    double v3 = std::__throw_bad_function_call[abi:nn180100]();
    std::vector<unsigned char>::__append(v3, v4);
  }
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  int v5 = (char *)a1[1];
  size_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      abort();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    float64x2_t v12 = &v7[v11];
    float64x2_t v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      float64x2_t v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      int v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

void std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(void *a1, uint64_t *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 341 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unint64_t v8 = *(void *)(v5 + 8 * (v7 / 0x155)) + 12 * (v7 % 0x155);
  uint64_t v9 = *a2;
  *(_DWORD *)(v8 + 8) = *((_DWORD *)a2 + 2);
  *(void *)unint64_t v8 = v9;
  ++a1[5];
}

void std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x155;
  unint64_t v4 = v2 - 341;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    uint64_t v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(void *)unint64_t v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v29 = 1;
      }
      else {
        unint64_t v29 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v5, v29);
      unsigned int v31 = &v30[8 * (v29 >> 2)];
      unint64_t v33 = &v30[8 * v32];
      long long v34 = (uint64_t *)a1[1];
      unint64_t v8 = v31;
      uint64_t v35 = a1[2] - (void)v34;
      if (v35)
      {
        unint64_t v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v36 = 8 * (v35 >> 3);
        unsigned int v37 = &v30[8 * (v29 >> 2)];
        do
        {
          uint64_t v38 = *v34++;
          *(void *)unsigned int v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    char v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      uint64_t v9 = (char *)a1[1];
    }
    unint64_t v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFFCuLL);
      std::__split_buffer<unsigned int *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFFCuLL);
    std::__split_buffer<unsigned int *>::push_front((uint64_t)a1, &v54);
    int v40 = (void *)a1[1];
    unint64_t v8 = (char *)a1[2];
    uint64_t v41 = *v40;
    uint64_t v9 = (char *)(v40 + 1);
    uint64_t v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_29;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      uint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      unsigned int v31 = &v30[8 * (v46 >> 2)];
      unint64_t v33 = &v30[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      unint64_t v8 = v31;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unint64_t v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v30[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      uint64_t v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        unint64_t v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  uint64_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  unint64_t v53 = operator new(0xFFCuLL);
  std::__split_buffer<unsigned int *>::push_back(&v54, &v53);
  uint64_t v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    int v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<unsigned int *>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    int v28 = (char *)a1[2];
  }
  unsigned int v42 = (char *)*a1;
  long long v43 = v54;
  long long v44 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  uint64_t v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(void *)&long long v55 = v28;
  *((void *)&v55 + 1) = v45;
  if (v28 != v27) {
    *(void *)&long long v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (v42) {
    operator delete(v42);
  }
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26EA04D60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04D60;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 8);
  *a3 = &unk_26EA04DE0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA04DE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA04DE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 8) + 8) + 8 * *a2 + 4 * (*(unsigned char *)(a1 + 16) & 1)) < *(float *)(*(void *)(*(void *)(a1 + 8) + 8) + 8 * *a3 + 4 * (*(unsigned char *)(a1 + 16) & 1));
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

int *std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(int *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a3 == a2) {
    return result;
  }
  uint64_t v5 = a3;
  unint64_t v7 = result;
  while (1)
  {
    unint64_t v8 = (v5 - (uint64_t)v7) >> 2;
    if (v8 < 2) {
      return result;
    }
    if (v8 == 3) {
      return (int *)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(v7, v7 + 1, (int *)(v5 - 4), a4);
    }
    if (v8 == 2)
    {
      uint64_t v37 = *(void *)(a4 + 24);
      if (v37)
      {
        uint64_t v38 = (int *)(v5 - 4);
        __n128 result = (int *)(*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v37 + 48))(v37, v5 - 4, v7);
        if (result)
        {
          int v39 = *v7;
          *unint64_t v7 = *v38;
          *uint64_t v38 = v39;
        }
        return result;
      }
      goto LABEL_72;
    }
    if (v5 - (uint64_t)v7 <= 31) {
      return std::__selection_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(v7, v5, a4);
    }
    uint64_t v9 = &v7[v8 >> 1];
    int v10 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(v7, v9, (int *)(v5 - 4), a4);
    long long v44 = (int *)(v5 - 4);
    uint64_t v45 = v7;
    uint64_t v11 = *(void *)(a4 + 24);
    if (!v11) {
      goto LABEL_72;
    }
    __n128 result = (int *)(*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v11 + 48))(v11, v7, v9);
    if (result)
    {
      uint64_t v13 = v44;
      uint64_t v12 = v45;
      goto LABEL_12;
    }
    __n128 result = (int *)std::__nth_element_find_guard[abi:nn180100]<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>((uint64_t *)&v45, (uint64_t *)&v44, (uint64_t)v9, a4);
    uint64_t v12 = v45;
    if (!result)
    {
      long long v44 = (int *)(v5 - 4);
      ++v45;
      uint64_t v26 = *(void *)(a4 + 24);
      if (v26)
      {
        __n128 result = (int *)(*(uint64_t (**)(uint64_t, int *, uint64_t))(*(void *)v26 + 48))(v26, v7, v5 - 4);
        int v28 = v44;
        uint64_t v27 = v45;
        if (result)
        {
LABEL_55:
          if (v27 == v28) {
            return result;
          }
          while (1)
          {
            uint64_t v32 = *(void *)(a4 + 24);
            if (!v32) {
              goto LABEL_72;
            }
            if ((*(unsigned int (**)(uint64_t, int *))(*(void *)v32 + 48))(v32, v7))
            {
              while (1)
              {
                --v44;
                uint64_t v33 = *(void *)(a4 + 24);
                if (!v33) {
                  goto LABEL_72;
                }
                __n128 result = (int *)(*(uint64_t (**)(uint64_t, int *))(*(void *)v33 + 48))(v33, v7);
                if (!result)
                {
                  long long v34 = v44;
                  uint64_t v23 = v45;
                  if (v45 < v44)
                  {
                    int v35 = *v45;
                    *uint64_t v45 = *v44;
                    uint64_t v36 = v23 + 1;
                    *long long v34 = v35;
                    goto LABEL_63;
                  }
                  if ((unint64_t)v45 <= a2) {
                    goto LABEL_35;
                  }
                  return result;
                }
              }
            }
            uint64_t v36 = v45 + 1;
LABEL_63:
            uint64_t v45 = v36;
          }
        }
        while (v27 != v28)
        {
          uint64_t v29 = *(void *)(a4 + 24);
          if (!v29) {
            goto LABEL_72;
          }
          __n128 result = (int *)(*(uint64_t (**)(uint64_t, int *))(*(void *)v29 + 48))(v29, v7);
          uint64_t v30 = v45;
          if (result)
          {
            int v28 = v44;
            int v31 = *v45;
            *uint64_t v45 = *v44;
            uint64_t v27 = v30 + 1;
            *int v28 = v31;
            uint64_t v45 = v27;
            goto LABEL_55;
          }
          uint64_t v27 = ++v45;
          int v28 = v44;
        }
        return result;
      }
LABEL_72:
      int v40 = (int *)std::__throw_bad_function_call[abi:nn180100]();
      return (int *)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(v40, v41, v42, v43);
    }
    uint64_t v13 = v44;
    int v14 = *v45;
    *uint64_t v45 = *v44;
    *uint64_t v13 = v14;
    ++v10;
LABEL_12:
    uint64_t v15 = v12 + 1;
    uint64_t v45 = v12 + 1;
    if (v12 + 1 < v13)
    {
      while (1)
      {
        uint64_t v16 = *(void *)(a4 + 24);
        if (!v16) {
          goto LABEL_72;
        }
        if (!(*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v16 + 48))(v16, v15, v9))
        {
          while (1)
          {
            --v44;
            uint64_t v17 = *(void *)(a4 + 24);
            if (!v17) {
              goto LABEL_72;
            }
            __n128 result = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v17 + 48))(v17);
            if (result)
            {
              char v19 = v44;
              uint64_t v18 = v45;
              if (v45 >= v44)
              {
                uint64_t v15 = v45;
                goto LABEL_24;
              }
              int v20 = *v45;
              *uint64_t v45 = *v44;
              uint64_t v15 = v18 + 1;
              *char v19 = v20;
              ++v10;
              if (v9 == v18) {
                uint64_t v9 = v19;
              }
              goto LABEL_16;
            }
          }
        }
        uint64_t v15 = v45 + 1;
LABEL_16:
        uint64_t v45 = v15;
      }
    }
LABEL_24:
    if (v15 != v9)
    {
      uint64_t v21 = *(void *)(a4 + 24);
      if (!v21) {
        goto LABEL_72;
      }
      __n128 result = (int *)(*(uint64_t (**)(uint64_t, int *))(*(void *)v21 + 48))(v21, v9);
      uint64_t v15 = v45;
      if (result)
      {
        int v22 = *v45;
        *uint64_t v45 = *v9;
        *uint64_t v9 = v22;
        ++v10;
      }
    }
    if (v15 == (int *)a2) {
      return result;
    }
    if (!v10) {
      break;
    }
LABEL_30:
    if ((unint64_t)v45 <= a2) {
      uint64_t v23 = v45 + 1;
    }
    else {
      uint64_t v23 = v7;
    }
    if ((unint64_t)v45 > a2) {
      uint64_t v5 = (uint64_t)v45;
    }
LABEL_35:
    unint64_t v7 = v23;
    if (v5 == a2) {
      return result;
    }
  }
  if ((unint64_t)v15 > a2)
  {
    long long v44 = v7 + 1;
    if (v7 + 1 == v15) {
      return result;
    }
    while (1)
    {
      uint64_t v24 = *(void *)(a4 + 24);
      if (!v24) {
        goto LABEL_72;
      }
      __n128 result = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v24 + 48))(v24);
      if (result) {
        goto LABEL_30;
      }
      if (++v44 == v45) {
        return result;
      }
    }
  }
  while (1)
  {
    long long v44 = v15 + 1;
    if (v15 + 1 == (int *)v5) {
      return result;
    }
    uint64_t v25 = *(void *)(a4 + 24);
    if (!v25) {
      goto LABEL_72;
    }
    __n128 result = (int *)(*(uint64_t (**)(uint64_t))(*(void *)v25 + 48))(v25);
    if (result) {
      goto LABEL_30;
    }
    uint64_t v15 = v44;
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v5 = *(void *)(a4 + 24);
  if (!v5) {
    goto LABEL_17;
  }
  int v9 = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v5 + 48))(v5, a2, a1);
  uint64_t v10 = *(void *)(a4 + 24);
  if (!v9)
  {
    if (v10)
    {
      uint64_t result = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v10 + 48))(v10, a3, a2);
      if (!result) {
        return result;
      }
      int v14 = *a2;
      *a2 = *a3;
      *a3 = v14;
      uint64_t v15 = *(void *)(a4 + 24);
      if (v15)
      {
        if (!(*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v15 + 48))(v15, a2, a1)) {
          return 1;
        }
        int v16 = *a1;
        *a1 = *a2;
        *a2 = v16;
        return 2;
      }
    }
LABEL_17:
    char v19 = std::__throw_bad_function_call[abi:nn180100]();
    return std::__selection_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(v19);
  }
  if (!v10) {
    goto LABEL_17;
  }
  int v11 = (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v10 + 48))(v10, a3, a2);
  int v12 = *a1;
  if (v11)
  {
    *a1 = *a3;
    *a3 = v12;
    return 1;
  }
  *a1 = *a2;
  *a2 = v12;
  uint64_t v17 = *(void *)(a4 + 24);
  if (!v17) {
    goto LABEL_17;
  }
  if (!(*(unsigned int (**)(uint64_t, int *, int *))(*(void *)v17 + 48))(v17, a3, a2)) {
    return 1;
  }
  int v18 = *a2;
  *a2 = *a3;
  *a3 = v18;
  return 2;
}

int *std::__selection_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(int *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = (int *)(a2 - 4);
  if ((int *)(a2 - 4) != result)
  {
    uint64_t v6 = result;
    do
    {
      uint64_t result = (int *)std::__min_element[abi:nn180100]<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *,unsigned int *>((uint64_t)v6, a2, a3);
      if (v6 != result)
      {
        int v7 = *v6;
        *uint64_t v6 = *result;
        *uint64_t result = v7;
      }
      ++v6;
    }
    while (v6 != v3);
  }
  return result;
}

void *std::__nth_element_find_guard[abi:nn180100]<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *>(uint64_t *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  while (1)
  {
    uint64_t v8 = *a1;
    uint64_t v9 = *a2 - 4;
    *a2 = v9;
    if (v8 == v9) {
      return (void *)(v8 != v9);
    }
    uint64_t v10 = *(void *)(a4 + 24);
    if (!v10) {
      break;
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 48))(v10, v9, a3)) {
      return (void *)(v8 != v9);
    }
  }
  int v12 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__min_element[abi:nn180100]<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *,unsigned int *>((uint64_t)v12, v13, v14);
}

void *std::__min_element[abi:nn180100]<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> &,unsigned int *,unsigned int *>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 == a2) {
    return (void *)v3;
  }
  uint64_t v5 = a1 + 4;
  if (a1 + 4 == a2) {
    return (void *)v3;
  }
  while (1)
  {
    uint64_t v7 = *(void *)(a3 + 24);
    if (!v7) {
      break;
    }
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)v7 + 48))(v7, v5, v3)) {
      uint64_t v3 = v5;
    }
    v5 += 4;
    if (v5 == a2) {
      return (void *)v3;
    }
  }
  uint64_t v9 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__function::__value_func<unsigned int ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:nn180100](v9);
}

void *std::__function::__value_func<unsigned int ()(unsigned int const&,unsigned int const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 170;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 341;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    uint64_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned int *>::~__split_buffer((uint64_t)a1);
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA04E80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04E80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 8);
  *a3 = &unk_26EA04EF0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA04EF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA04EF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 8) + 8) + 8 * *a2 + 4 * (*(unsigned char *)(a1 + 16) & 1)) < *(float *)(*(void *)(*(void *)(a1 + 8) + 8) + 8 * *a3 + 4 * (*(unsigned char *)(a1 + 16) & 1));
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

uint64_t std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 7) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x400) {
    a2 = 1;
  }
  if (v5 < 0x800) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA04F80;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA04F80;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 8);
  *a3 = &unk_26EA04FF0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA04FF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA04FF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 8) + 8) + 16 * *a2 + 4 * (*(unsigned char *)(a1 + 16) & 3)) < *(float *)(*(void *)(*(void *)(a1 + 8) + 8) + 16 * *a3 + 4 * (*(unsigned char *)(a1 + 16) & 3));
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA05080;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA05080;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 8);
  *a3 = &unk_26EA050F0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA050F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA050F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return *(float *)(*(void *)(*(void *)(a1 + 8) + 8) + 16 * *a2 + 4 * (*(unsigned char *)(a1 + 16) & 3)) < *(float *)(*(void *)(*(void *)(a1 + 8) + 8) + 16 * *a3 + 4 * (*(unsigned char *)(a1 + 16) & 3));
}

uint64_t std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<float,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA05180;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA05180;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 8);
  *a3 = &unk_26EA051F0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA051F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA051F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return *(double *)(*(void *)(*(void *)(a1 + 8) + 8) + 16 * *a2 + 8 * (*(unsigned char *)(a1 + 16) & 1)) < *(double *)(*(void *)(*(void *)(a1 + 8) + 8) + 16 * *a3 + 8 * (*(unsigned char *)(a1 + 16) & 1));
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA05280;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA05280;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 8);
  *a3 = &unk_26EA052F0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA052F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA052F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  return *(double *)(*(void *)(*(void *)(a1 + 8) + 8) + 16 * *a2 + 8 * (*(unsigned char *)(a1 + 16) & 1)) < *(double *)(*(void *)(*(void *)(a1 + 8) + 8) + 16 * *a3 + 8 * (*(unsigned char *)(a1 + 16) & 1));
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)2>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA05380;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA05380;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 8);
  *a3 = &unk_26EA053F0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA053F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA053F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (long long *)(v3 + 32 * *a2);
  long long v5 = *v4;
  long long v6 = v4[1];
  uint64_t v7 = *(unsigned char *)(a1 + 16) & 3;
  v12[0] = v5;
  v12[1] = v6;
  *(void *)&long long v5 = *((void *)v12 + v7);
  uint64_t v8 = (_OWORD *)(v3 + 32 * *a3);
  long long v9 = v8[1];
  v11[0] = *v8;
  v11[1] = v9;
  return *(double *)&v5 < *((double *)v11 + v7);
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)1>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::~__func()
{
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA05480;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA05480;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned __int8 *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 8);
  *a3 = &unk_26EA054F0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}>,std::function<unsigned int ()(unsigned int const&,unsigned int const&)> ()(int)>::target_type()
{
}

void std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::~__func()
{
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA054F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA054F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8);
  uint64_t v4 = (long long *)(v3 + 32 * *a2);
  long long v5 = *v4;
  long long v6 = v4[1];
  uint64_t v7 = *(unsigned char *)(a1 + 16) & 3;
  v12[0] = v5;
  v12[1] = v6;
  *(void *)&long long v5 = *((void *)v12 + v7);
  uint64_t v8 = (_OWORD *)(v3 + 32 * *a3);
  long long v9 = v8[1];
  v11[0] = *v8;
  v11[1] = v9;
  return *(double *)&v5 < *((double *)v11 + v7);
}

uint64_t std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1},std::allocator<void geom::kd_tree<double,(unsigned char)3>::build<(geom_kd_tree_build_strategy)0>(void)::{lambda(unsigned char)#1}::operator() const(unsigned char)::{lambda(unsigned int const&,unsigned int const&)#1}>,unsigned int ()(unsigned int const&,unsigned int const&)>::target_type()
{
}

uint64_t geom::internal::triangle_mesh_decimator_interface<float>::triangle_mesh_decimator_interface(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 8), (const std::vector<unsigned int> *)(a2 + 8));
  if (*(void *)a2) {
    operator new();
  }
  return a1;
}

double geom::internal::triangle_mesh_decimator_interface<float>::triangle_mesh_decimator_interface(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  a1[1] = 0;
  a1[2] = 0;
  a1[3] = 0;
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  a1[3] = *(void *)(a2 + 24);
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  return result;
}

uint64_t geom::internal::triangle_mesh_decimator_interface<float>::~triangle_mesh_decimator_interface(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    uint64_t v3 = geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v2);
    MEMORY[0x237E10720](v3, 0x10B0C40E87BB8D8);
    *(void *)a1 = 0;
  }
  uint64_t v4 = *(void **)(a1 + 8);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    operator delete(v4);
  }
  return a1;
}

geom::triangle_mesh_connectivity *geom::internal::triangle_mesh_decimator_interface<float>::make@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  *(void *)&long long v20 = 0;
  double result = geom::internal::triangle_mesh_decimator<float>::make(a1, a2, a3, a4, a5, a6, (uint64_t)&v20, v23);
  if (v24)
  {
    unint64_t v10 = *(void *)(a5 + 8);
    __dst[1] = 0;
    uint64_t v22 = 0;
    __dst[0] = 0;
    if (v10)
    {
      std::vector<float>::__vallocate[abi:nn180100](__dst, v10);
      int v11 = (char *)__dst[1];
      bzero(__dst[1], 4 * v10);
      __dst[1] = &v11[4 * v10];
      if (*(void *)(a5 + 8)) {
        memcpy(__dst[0], *(const void **)a5, &v11[4 * v10] - (char *)__dst[0]);
      }
    }
    if (v24) {
      operator new();
    }
    uint64_t v12 = std::__throw_bad_optional_access[abi:nn180100]();
    return geom::internal::triangle_mesh_decimator<float>::make(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    *a7 = 0;
    a7[32] = 0;
  }
  return result;
}

geom::triangle_mesh_connectivity *geom::internal::triangle_mesh_decimator<float>::make@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned char *a8@<X8>)
{
  geom::triangle_mesh_connectivity::make((geom::triangle_mesh_connectivity *)*(unsigned int *)(a1 + 8), *(const void **)a3, *(void *)(a3 + 8), &__sz);
  if (!v113)
  {
    *a8 = 0;
    a8[552] = 0;
    return std::__optional_destruct_base<std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>,false>::~__optional_destruct_base[abi:nn180100]((geom::triangle_mesh_connectivity *)&__sz);
  }
  unint64_t v14 = v103 - *((void *)&v102 + 1);
  unint64_t v15 = (((void)v103 - *((void *)&v102 + 1)) >> 2);
  __dst[1] = 0;
  __dst[0] = 0;
  uint64_t v98 = 0;
  if ((((void)v103 - *((void *)&v102 + 1)) >> 2))
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(__dst, (((void)v103 - *((void *)&v102 + 1)) >> 2));
    uint64_t v16 = (char *)__dst[1];
    bzero(__dst[1], 16 * v15);
    __dst[1] = &v16[16 * v15];
    if (!v113) {
      goto LABEL_98;
    }
  }
  unint64_t v17 = v14 >> 2;
  int v18 = v112;
  if (v112)
  {
    if (v17)
    {
      uint64_t v19 = 0;
      do
      {
        *((_OWORD *)__dst[0] + v19) = *(_OWORD *)(*(void *)a1 + 16 * v111.__begin_[v19]);
        ++v19;
      }
      while (v15 != v19);
    }
  }
  else
  {
    memcpy(__dst[0], *(const void **)a1, 16 * *(void *)(a1 + 8));
  }
  std::vector<geom::internal::quadric>::vector(v96, v15);
  uint64_t v95 = 0;
  long long v93 = 0u;
  *(_OWORD *)unint64_t v94 = 0u;
  *(_OWORD *)uint64_t v91 = 0u;
  *(_OWORD *)unint64_t v92 = 0u;
  *(_OWORD *)uint64_t v89 = 0u;
  long long v90 = 0u;
  *(_OWORD *)uint64_t v88 = 0u;
  if (*(void *)(a4 + 8))
  {
    unint64_t v20 = *(void *)(a5 + 8);
    memset(&v87, 0, sizeof(v87));
    if (v20)
    {
      std::vector<float>::__vallocate[abi:nn180100](&v87, v20);
      std::vector<unsigned int>::pointer end = v87.__end_;
      bzero(v87.__end_, 4 * v20);
      v87.__end_ = &end[v20];
    }
    unint64_t v22 = *(void *)(a6 + 8);
    uint64_t v86 = 0;
    v85[0] = 0;
    v85[1] = 0;
    if (v22)
    {
      std::vector<float>::__vallocate[abi:nn180100](v85, v22);
      uint64_t v23 = (char *)v85[1];
      bzero(v85[1], 4 * v22);
      v85[1] = &v23[4 * v22];
    }
    unint64_t v24 = *(void *)(a4 + 8);
    uint64_t v84 = 0;
    uint64_t v82 = 0;
    unint64_t v83 = 0;
    if (v24)
    {
      std::vector<double>::__vallocate[abi:nn180100](&v82, v24);
      uint64_t v25 = (char *)v83;
      bzero(v83, 8 * v24);
      unint64_t v83 = &v25[8 * v24];
    }
    memcpy(v87.__begin_, *(const void **)a5, 4 * *(void *)(a5 + 8));
    memcpy(v85[0], *(const void **)a6, 4 * *(void *)(a6 + 8));
    memcpy(v82, *(const void **)a4, 8 * *(void *)(a4 + 8));
    *(void *)&long long v60 = 0;
    long long v58 = 0u;
    *(_OWORD *)std::vector<unsigned int> __p = 0u;
    *(_OWORD *)uint64_t v56 = 0u;
    *(_OWORD *)__n128 v57 = 0u;
    long long v55 = 0u;
    memset(v54, 0, sizeof(v54));
    geom::triangle_mesh_atlas::init((std::vector<int> *)v54, (uint64_t)&__sz, (uint64_t *)&v87, v85, &v82);
    geom::triangle_mesh_atlas::operator=((uint64_t)v88, (uint64_t)v54);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v57[1])
    {
      *(void **)&long long v58 = v57[1];
      operator delete(v57[1]);
    }
    if (v56[0])
    {
      v56[1] = v56[0];
      operator delete(v56[0]);
    }
    if (*(void *)&v54[24])
    {
      *(void *)&long long v55 = *(void *)&v54[24];
      operator delete(*(void **)&v54[24]);
    }
    if (*(void *)v54)
    {
      *(void *)&v54[8] = *(void *)v54;
      operator delete(*(void **)v54);
    }
    if (v82)
    {
      unint64_t v83 = v82;
      operator delete(v82);
    }
    if (v85[0])
    {
      v85[1] = v85[0];
      operator delete(v85[0]);
    }
    if (v87.__begin_)
    {
      v87.__end_ = v87.__begin_;
      operator delete(v87.__begin_);
    }
  }
  if (v18 && (std::vector<unsigned int>::size_type v26 = *(void *)(a2 + 8)) != 0)
  {
    uint64_t v27 = *(unsigned int **)a2;
    *(void *)&v54[8] = 0;
    *(void *)&v54[16] = 0;
    *(void *)long long v54 = &v54[8];
    uint64_t v28 = 4 * v26;
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v54, (uint64_t *)&v54[8], v27, v27);
      ++v27;
      v28 -= 4;
    }
    while (v28);
    memset(&v87, 0, sizeof(v87));
    std::vector<unsigned int>::reserve(&v87, v26);
    if (!v113 || !v112) {
      goto LABEL_98;
    }
    if (v17)
    {
      uint64_t v29 = 0;
      do
      {
        uint64_t v30 = *(void *)&v54[8];
        if (*(void *)&v54[8])
        {
          unsigned int v31 = v111.__begin_[v29];
          uint64_t v32 = (uint64_t *)&v54[8];
          do
          {
            uint64_t v33 = (uint64_t *)v30;
            long long v34 = v32;
            unsigned int v35 = *(_DWORD *)(v30 + 28);
            uint64_t v36 = (uint64_t *)(v30 + 8);
            if (v35 >= v31)
            {
              uint64_t v36 = v33;
              uint64_t v32 = v33;
            }
            uint64_t v30 = *v36;
          }
          while (v30);
          if (v32 != (uint64_t *)&v54[8])
          {
            if (v35 < v31) {
              uint64_t v33 = v34;
            }
            if (v31 >= *((_DWORD *)v33 + 7))
            {
              std::vector<unsigned int>::pointer v37 = v87.__end_;
              if (v87.__end_ >= v87.__end_cap_.__value_)
              {
                begiunsigned __int16 n = v87.__begin_;
                int64_t v40 = v87.__end_ - v87.__begin_;
                unint64_t v41 = v40 + 1;
                if ((unint64_t)(v40 + 1) >> 62) {
                  goto LABEL_99;
                }
                int64_t v42 = (char *)v87.__end_cap_.__value_ - (char *)v87.__begin_;
                if (((char *)v87.__end_cap_.__value_ - (char *)v87.__begin_) >> 1 > v41) {
                  unint64_t v41 = v42 >> 1;
                }
                if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v43 = v41;
                }
                if (v43)
                {
                  long long v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v87.__end_cap_, v43);
                  std::vector<unsigned int>::pointer v37 = v87.__end_;
                  begiunsigned __int16 n = v87.__begin_;
                }
                else
                {
                  long long v44 = 0;
                }
                uint64_t v45 = (unsigned int *)&v44[4 * v40];
                *uint64_t v45 = v29;
                uint64_t v38 = v45 + 1;
                while (v37 != begin)
                {
                  unsigned int v46 = *--v37;
                  *--uint64_t v45 = v46;
                }
                v87.__begin_ = v45;
                v87.__end_ = v38;
                v87.__end_cap_.__value_ = (unsigned int *)&v44[4 * v43];
                if (begin) {
                  operator delete(begin);
                }
              }
              else
              {
                *v87.__end_ = v29;
                uint64_t v38 = v37 + 1;
              }
              v87.__end_ = v38;
            }
          }
        }
        ++v29;
      }
      while (v29 != v15);
    }
    uint64_t v82 = v87.__begin_;
    unint64_t v83 = (void *)(v87.__end_ - v87.__begin_);
    geom::internal::compute_vertex_masks<float>((geom::triangle_mesh_half_edge_connectivity *)&__sz, (uint64_t *)__dst, (unsigned int **)&v82, v88, v85);
    long long v52 = *(_OWORD *)v85;
    uint64_t v47 = v86;
    if (v87.__begin_)
    {
      v87.__end_ = v87.__begin_;
      operator delete(v87.__begin_);
    }
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE((uint64_t)v54, *(void **)&v54[8]);
  }
  else
  {
    geom::internal::compute_vertex_masks<float>((geom::triangle_mesh_half_edge_connectivity *)&__sz, (uint64_t *)__dst, (unsigned int **)a2, v88, v54);
    long long v52 = *(_OWORD *)v54;
    uint64_t v47 = *(void *)&v54[16];
  }
  memset(&v87, 0, sizeof(v87));
  if (*(unsigned char *)(a7 + 4))
  {
    if (!v18)
    {
      std::vector<unsigned int>::resize((std::vector<int> *)&v87, __sz);
      std::vector<unsigned int>::pointer v48 = v87.__begin_;
      std::vector<unsigned int>::pointer v49 = v87.__end_;
      if (v87.__begin_ != v87.__end_)
      {
        unsigned int v50 = 0;
        do
          *v48++ = v50++;
        while (v48 != v49);
      }
      goto LABEL_81;
    }
    if (v113 && v112)
    {
      std::vector<unsigned int> v87 = v111;
      memset(&v111, 0, sizeof(v111));
      goto LABEL_81;
    }
LABEL_98:
    std::__throw_bad_optional_access[abi:nn180100]();
LABEL_99:
    abort();
  }
LABEL_81:
  *(void *)long long v54 = *(void *)a7;
  *(void *)&v54[24] = v98;
  DWORD2(v55) = v100;
  uint64_t v66 = v108;
  *(_OWORD *)&v54[8] = *(_OWORD *)__dst;
  *(_OWORD *)__dst = 0u;
  uint64_t v98 = 0;
  long long v62 = 0u;
  long long v63 = 0u;
  long long v58 = v103;
  *(_OWORD *)std::vector<unsigned int> __p = v104;
  long long v103 = 0u;
  long long v104 = 0u;
  long long v60 = v105;
  long long v61 = v106;
  long long v105 = 0u;
  long long v106 = 0u;
  *(void *)&long long v55 = __sz;
  std::vector<int>::size_type __sz = 0;
  int v100 = 0;
  *(_OWORD *)uint64_t v56 = v101;
  *(_OWORD *)__n128 v57 = v102;
  long long v101 = 0u;
  long long v102 = 0u;
  long long v64 = 0u;
  long long v65 = v107;
  long long v107 = 0u;
  long long v67 = v109;
  uint64_t v68 = v110;
  long long v109 = 0u;
  uint64_t v108 = 0;
  uint64_t v110 = 0;
  geom::triangle_mesh_atlas::triangle_mesh_atlas(v69, (const std::vector<unsigned int> *)v88);
  long long v70 = v52;
  uint64_t v71 = v47;
  long long v72 = 0u;
  long long v73 = 0u;
  long long v74 = 0u;
  long long v75 = 0u;
  long long v76 = 0u;
  long long v77 = 0u;
  std::vector<unsigned int> v78 = v87;
  memset(&v87, 0, sizeof(v87));
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  geom::internal::triangle_mesh_decimator<float>::initialize_quadrics(v54);
  geom::internal::triangle_mesh_decimator<float>::initialize_edge_data((uint64_t)v54);
  geom::internal::triangle_mesh_decimator<float>::triangle_mesh_decimator((uint64_t)a8, (uint64_t)v54);
  a8[552] = 1;
  geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v54);
  if (v87.__begin_)
  {
    v87.__end_ = v87.__begin_;
    operator delete(v87.__begin_);
  }
  if (v94[0])
  {
    v94[1] = v94[0];
    operator delete(v94[0]);
  }
  if (v92[1])
  {
    *(void **)&long long v93 = v92[1];
    operator delete(v92[1]);
  }
  if (v91[0])
  {
    v91[1] = v91[0];
    operator delete(v91[0]);
  }
  if (v89[1])
  {
    *(void **)&long long v90 = v89[1];
    operator delete(v89[1]);
  }
  if (v88[0])
  {
    v88[1] = v88[0];
    operator delete(v88[0]);
  }
  if (v96[0])
  {
    v96[1] = v96[0];
    operator delete(v96[0]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  return std::__optional_destruct_base<std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>,false>::~__optional_destruct_base[abi:nn180100]((geom::triangle_mesh_connectivity *)&__sz);
}

geom::triangle_mesh_connectivity *geom::internal::triangle_mesh_decimator_interface<float>::make@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  v7[0] = 0;
  v7[1] = 0;
  v6[0] = 0;
  v6[1] = 0;
  v5[0] = 0;
  v5[1] = 0;
  v4[0] = 0;
  v4[1] = 0;
  return geom::internal::triangle_mesh_decimator_interface<float>::make(a1, (uint64_t)v7, a2, (uint64_t)v6, (uint64_t)v5, (uint64_t)v4, a3);
}

BOOL geom::internal::triangle_mesh_decimator_interface<float>::can_decimate_more(uint64_t a1)
{
  return *(void *)a1
      && ((*(void *)(*(void *)a1 + 440) - *(void *)(*(void *)a1 + 432)) & 0xFFFFFFFF0) != 0;
}

uint64_t geom::internal::triangle_mesh_decimator_interface<float>::decimate_one_edge(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = geom::indexed_priority_queue<unsigned int,double>::pop((unsigned int **)(v1 + 432));
  if (v3 == -1 && v2 == INFINITY) {
    return 0;
  }
  return geom::internal::triangle_mesh_decimator<float>::decimate_edge(v1, v3);
}

uint64_t geom::internal::triangle_mesh_decimator_interface<float>::decimate_edge(uint64_t *a1, unsigned int a2)
{
  uint64_t result = *a1;
  if (result) {
    return geom::internal::triangle_mesh_decimator<float>::decimate_edge(result, a2);
  }
  return result;
}

uint64_t geom::internal::triangle_mesh_decimator<float>::decimate_edge(uint64_t a1, unsigned int a2)
{
  uint64_t v54 = *MEMORY[0x263EF8340];
  unint64_t v2 = a2;
  uint64_t v3 = *(void *)(a1 + 216);
  if (a2 >= (unint64_t)((*(void *)(a1 + 224) - v3) >> 2)) {
    return 0;
  }
  long long v6 = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 32);
  unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 32), *(_DWORD *)(v3 + 4 * a2) / 3u, *(_DWORD *)(v3 + 4 * a2) % 3u);
  uint64_t result = geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v6, half_edge_for_face_vertex);
  if (result)
  {
    uint64_t result = geom::internal::triangle_mesh_decimator<float>::is_edge_collapse_geometrically_safe((void *)a1, a2);
    if (result)
    {
      if (((*(void *)(a1 + 296) - *(void *)(a1 + 288)) & 0x3FFFFFFFCLL) == 0
        || (uint64_t v9 = *(void *)(a1 + 216), v2 >= (*(void *)(a1 + 224) - v9) >> 2)
        || (v10 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, *(_DWORD *)(v9 + 4 * v2) / 3u, *(_DWORD *)(v9 + 4 * v2) % 3u), !geom::triangle_mesh_half_edge_connectivity::is_edge_collapse_safe(v6, v10, (std::vector<unsigned int> *)(a1 + 504), (std::vector<unsigned int> *)(a1 + 528)))|| (uint64_t result = geom::internal::triangle_mesh_decimator<float>::update_edge_uvs(a1, a2, (float32x4_t *)(*(void *)(a1 + 408) + 32 * v2 + 16)), result))
      {
        uint64_t v11 = *(void *)(a1 + 216);
        if (v2 >= (*(void *)(a1 + 224) - v11) >> 2)
        {
          *(void *)unint64_t v53 = -1;
        }
        else
        {
          unsigned int v12 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, *(_DWORD *)(v11 + 4 * v2) / 3u, *(_DWORD *)(v11 + 4 * v2) % 3u);
          geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v6, v12, v53);
        }
        unsigned int v13 = *(_DWORD *)(a1 + 32);
        unsigned int v14 = geom::triangle_mesh_connectivity::collapse_edge(v6, a2);
        unsigned int v15 = v14;
        if (*(unsigned char *)(a1 + 4))
        {
          uint64_t v16 = *(void *)(a1 + 8);
          float32x4_t v17 = *(float32x4_t *)(*(void *)(a1 + 408) + 32 * v2 + 16);
          if (v53[0] == v14
            || (float32x4_t v18 = vsubq_f32(*(float32x4_t *)(v16 + 16 * v53[0]), v17),
                float32x4_t v19 = vmulq_f32(v18, v18),
                sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]) != 0.0))
          {
            if (v53[1] != v14)
            {
              float32x4_t v20 = vsubq_f32(*(float32x4_t *)(v16 + 16 * v53[1]), v17);
              float32x4_t v21 = vmulq_f32(v20, v20);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]) == 0.0)*(_DWORD *)(*(void *)(a1 + 480) + 4 * v53[0]) = *(_DWORD *)(*(void *)(a1 + 480) + 4 * v53[1]); {
            }
              }
          }
          else
          {
            *(_DWORD *)(*(void *)(a1 + 480) + 4 * v53[1]) = *(_DWORD *)(*(void *)(a1 + 480) + 4 * v53[0]);
          }
        }
        if (v14 != -1)
        {
          uint64_t v22 = *(unsigned int *)((unint64_t)v53 | (4 * (v14 == v53[0])));
          unsigned int v23 = v14;
          char v24 = *(unsigned char *)(*(void *)(a1 + 360) + v22) | *(unsigned char *)(*(void *)(a1 + 360) + v14);
          *(_OWORD *)(*(void *)(a1 + 8) + 16 * v14) = *(_OWORD *)(*(void *)(a1 + 408) + 32 * v2 + 16);
          if (*(_DWORD *)a1 == 1)
          {
            geom::internal::triangle_mesh_decimator<float>::recompute_vertex_quadric((void *)a1, v14, (void *)(a1 + 504), (uint64_t)&v48);
            uint64_t v25 = *(void *)(a1 + 384);
            std::vector<unsigned int>::size_type v26 = (long long *)(v25 + 80 * v23);
            if (v26 != &v48)
            {
              *std::vector<unsigned int>::size_type v26 = v48;
              uint64_t v27 = (_OWORD *)(v25 + 80 * v23);
              v27[1] = v49;
              unsigned int v27[2] = v50;
              float64x2_t v27[3] = v51;
              v27[4] = v52;
            }
          }
          else
          {
            uint64_t v28 = *(void *)(a1 + 384);
            uint64_t v29 = (float64x2_t *)(v28 + 80 * v22);
            uint64_t v30 = (float64x2_t *)(v28 + 80 * v14);
            float64x2_t v31 = vaddq_f64(v29[1], v30[1]);
            *uint64_t v30 = vaddq_f64(*v29, *v30);
            v30[1] = v31;
            float64x2_t v32 = vaddq_f64(v29[3], v30[3]);
            _OWORD v30[2] = vaddq_f64(v29[2], v30[2]);
            v30[3] = v32;
            void v30[4] = vaddq_f64(v29[4], v30[4]);
          }
          *(unsigned char *)(*(void *)(a1 + 360) + v15) = v24;
          geom::triangle_mesh_connectivity::get_incident_edges_to_vertex(v6, v15, a1 + 528);
          uint64_t v37 = *(void *)(a1 + 536) - *(void *)(a1 + 528);
          if (v37)
          {
            uint64_t v38 = 0;
            unint64_t v39 = v37 >> 2;
            if (v39 <= 1) {
              uint64_t v40 = 1;
            }
            else {
              uint64_t v40 = v39;
            }
            do
            {
              uint64_t v41 = *(unsigned int *)(*(void *)(a1 + 528) + 4 * v38);
              uint64_t v42 = *(void *)(a1 + 408) + 32 * v41;
              geom::internal::triangle_mesh_decimator<float>::make_edge_cost((void *)a1, *(_DWORD *)(*(void *)(a1 + 528) + 4 * v38), (uint64_t)&v48, *(double *)v42, v33, v34, v35, v36);
              long long v43 = v49;
              *(_OWORD *)uint64_t v42 = v48;
              *(_OWORD *)(v42 + 16) = v43;
              *(double *)uint64_t v42 = *(double *)v42 + 1.0e-12;
              uint64_t v44 = *(unsigned int *)(*(void *)(a1 + 456) + 4 * v41);
              if (v44 == -1)
              {
                double v47 = INFINITY;
                uint64_t v46 = 0xFFFFFFFFLL;
              }
              else
              {
                uint64_t v45 = *(void *)(a1 + 432) + 16 * v44;
                uint64_t v46 = *(void *)v45;
                double v47 = *(double *)(v45 + 8);
              }
              *(void *)&long long v48 = v46;
              *((double *)&v48 + 1) = v47;
              if (v46 == -1 && v47 == INFINITY) {
                LODWORD(v48) = v41;
              }
              *((void *)&v48 + 1) = *(void *)v42;
              geom::indexed_priority_queue<unsigned int,double>::push_or_change_cost((void **)(a1 + 432), (unsigned int *)&v48);
              ++v38;
            }
            while (v40 != v38);
          }
        }
        return *(_DWORD *)v6 < v13;
      }
    }
  }
  return result;
}

uint64_t geom::internal::triangle_mesh_decimator_interface<float>::face_count(uint64_t a1)
{
  if (*(void *)a1) {
    return *(unsigned int *)(*(void *)a1 + 36);
  }
  else {
    return 0;
  }
}

void geom::internal::triangle_mesh_decimator_interface<float>::get_simplified_geometry(uint64_t *a1, void *a2, std::vector<int> *a3, std::vector<int> *a4)
{
  a2[1] = *a2;
  a3->__end_ = a3->__begin_;
  a4->__end_ = a4->__begin_;
  uint64_t v4 = *a1;
  if (v4) {
    geom::internal::copy_simplified_geometry<float>(v4, a2, a3, a4);
  }
}

void geom::internal::copy_simplified_geometry<float>(uint64_t a1, void *a2, std::vector<int> *a3, std::vector<int> *a4)
{
  std::vector<int>::value_type __x = -1;
  unint64_t v8 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
  uint64_t v9 = (v8 >> 2);
  double v47 = 0;
  uint64_t v48 = 0;
  std::vector<unsigned int> __p = 0;
  if ((v8 >> 2))
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, (v8 >> 2));
    unsigned int v10 = v47;
    uint64_t v11 = &v47[v9];
    uint64_t v12 = 4 * v9;
    do
    {
      *v10++ = __x;
      v12 -= 4;
    }
    while (v12);
    double v47 = v11;
  }
  memset(&v45, 0, sizeof(v45));
  std::vector<unsigned int>::resize(&v45, *(unsigned int *)(a1 + 36), &__x);
  a4->__end_ = a4->__begin_;
  std::vector<unsigned int>::resize(a4, *(unsigned int *)(a1 + 32), &__x);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80) - v13;
  if ((v14 & 0x3FFFFFFFCLL) != 0)
  {
    unint64_t v15 = 0;
    int v16 = 0;
    unint64_t v17 = v14 >> 2;
    begiunsigned __int16 n = a4->__begin_;
    float32x4_t v19 = __p;
    uint64_t v20 = ((unint64_t)v14 >> 2);
    do
    {
      if (v17 > v15 && *(_DWORD *)(v13 + 4 * v15) != -1)
      {
        begin[v16] = v15;
        v19[v15] = v16++;
      }
      ++v15;
    }
    while (v20 != v15);
  }
  uint64_t v21 = *(void *)(a1 + 48);
  unint64_t v22 = (*(void *)(a1 + 56) - v21) >> 2;
  if ((v22 / 3))
  {
    int v23 = 0;
    uint64_t v24 = 0;
    int v25 = 0;
    std::vector<int>::pointer v26 = v45.__begin_;
    do
    {
      if (v22 > v24 && *(_DWORD *)(v21 + 4 * v24) != -1) {
        v26[v25++] = v23;
      }
      v24 += 3;
      ++v23;
    }
    while (3 * (v22 / 3) != v24);
  }
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)a2, *(unsigned int *)(a1 + 32));
  uint64_t v27 = *(unsigned int *)(a1 + 32);
  if (v27)
  {
    for (uint64_t i = 0; i != v27; ++i)
      *(_OWORD *)(*a2 + 16 * i) = *(_OWORD *)(*(void *)(a1 + 8) + 16 * a4->__begin_[i]);
  }
  std::vector<unsigned int>::resize(a3, (3 * *(_DWORD *)(a1 + 36)));
  uint64_t v29 = *(unsigned int *)(a1 + 36);
  if (v29)
  {
    uint64_t v30 = 0;
    std::vector<int>::pointer v31 = v45.__begin_;
    uint64_t v32 = *(void *)(a1 + 48);
    float64x2_t v33 = __p;
    uint64_t v34 = 3 * v29;
    std::vector<int>::pointer v35 = a3->__begin_;
    do
    {
      int v36 = *v31++;
      uint64_t v37 = (unsigned int *)(v32 + 4 * (3 * v36));
      uint64_t v38 = *v37;
      uint64_t v39 = v37[1];
      uint64_t v40 = v37[2];
      v35[v30] = v33[v38];
      v35[(v30 + 1)] = v33[v39];
      v35[(v30 + 2)] = v33[v40];
      v30 += 3;
    }
    while (v34 != v30);
  }
  uint64_t v41 = *(void *)(a1 + 480);
  if (*(void *)(a1 + 488) != v41)
  {
    std::vector<int>::pointer v42 = a4->__begin_;
    uint64_t v43 = (char *)a4->__end_ - (char *)a4->__begin_;
    if (v43)
    {
      unint64_t v44 = v43 >> 2;
      if (v44 <= 1) {
        unint64_t v44 = 1;
      }
      do
      {
        *std::vector<int>::pointer v42 = *(_DWORD *)(v41 + 4 * *v42);
        ++v42;
        --v44;
      }
      while (v44);
    }
  }
  if (v45.__begin_)
  {
    v45.__end_ = v45.__begin_;
    operator delete(v45.__begin_);
  }
  if (__p)
  {
    double v47 = (std::vector<int>::value_type *)__p;
    operator delete(__p);
  }
}

void geom::internal::triangle_mesh_decimator_interface<float>::get_simplified_geometry(uint64_t *a1, void *a2, std::vector<int> *a3, void *a4, uint64_t a5, uint64_t a6, std::vector<int> *a7)
{
  a2[1] = *a2;
  a3->__end_ = a3->__begin_;
  a4[1] = *a4;
  *(void *)(a5 + 8) = *(void *)a5;
  *(void *)(a6 + 8) = *(void *)a6;
  a7->__end_ = a7->__begin_;
  uint64_t v8 = *a1;
  if (v8)
  {
    geom::internal::copy_simplified_geometry<float>(v8, a2, a3, a7);
    uint64_t v12 = (unsigned int *)a1[1];
    uint64_t v13 = *a1 + 32;
    uint64_t v14 = *a1 + 240;
    uint64_t v15 = (a1[2] - (uint64_t)v12) >> 2;
    geom::internal::copy_simplified_uvs(v13, v14, v12, v15, (uint64_t)a4, (char **)a5, (char **)a6);
  }
}

void geom::internal::copy_simplified_uvs(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, char **a6, char **a7)
{
  unint64_t v14 = (((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2) / 3uLL);
  LOBYTE(v79[0]) = 0;
  std::vector<BOOL>::vector(&v82, v14, (unsigned __int8 *)v79);
  if (a4)
  {
    uint64_t v15 = (char *)v82;
    uint64_t v16 = 4 * a4;
    do
    {
      unsigned int v17 = *a3++;
      *(void *)&v15[((unint64_t)v17 >> 3) & 0x1FFFFFF8] |= 1 << v17;
      v16 -= 4;
    }
    while (v16);
  }
  *(_OWORD *)long long v79 = 0u;
  *(_OWORD *)std::vector<unsigned int> __p = 0u;
  int v81 = 1065353216;
  *(void *)(a5 + 8) = *(void *)a5;
  a6[1] = *a6;
  a7[1] = *a7;
  v78[0] = v79;
  v78[1] = (void **)a5;
  uint64_t v18 = (((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2) / 3uLL);
  if ((((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 2) / 3uLL))
  {
    unint64_t v19 = 0;
    int v20 = 0;
    uint64_t v76 = (uint64_t)(a7 + 2);
    do
    {
      unint64_t v21 = (3 * v19);
      uint64_t v22 = *(void *)(a1 + 16);
      if (v21 < (*(void *)(a1 + 24) - v22) >> 2 && *(_DWORD *)(v22 + 4 * v21) != -1)
      {
        if ((*(void *)((char *)v82 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8)) >> v19))
        {
          uint64_t v24 = a6[1];
          unint64_t v23 = (unint64_t)a6[2];
          if ((unint64_t)v24 >= v23)
          {
            std::vector<int>::pointer v26 = *a6;
            uint64_t v27 = (v24 - *a6) >> 2;
            unint64_t v28 = v27 + 1;
            if ((unint64_t)(v27 + 1) >> 62) {
              goto LABEL_83;
            }
            uint64_t v29 = v23 - (void)v26;
            if (v29 >> 1 > v28) {
              unint64_t v28 = v29 >> 1;
            }
            if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v30 = v28;
            }
            if (v30)
            {
              std::vector<int>::pointer v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a6 + 2), v30);
              std::vector<int>::pointer v26 = *a6;
              uint64_t v24 = a6[1];
            }
            else
            {
              std::vector<int>::pointer v31 = 0;
            }
            uint64_t v32 = &v31[4 * v27];
            *(_DWORD *)uint64_t v32 = v20;
            int v25 = v32 + 4;
            while (v24 != v26)
            {
              int v33 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v32 - 1) = v33;
              v32 -= 4;
            }
            *a6 = v32;
            a6[1] = v25;
            a6[2] = &v31[4 * v30];
            if (v26) {
              operator delete(v26);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v24 = v20;
            int v25 = v24 + 4;
          }
          a6[1] = v25;
          float32x2_t v77 = *(float32x2_t *)(*(void *)(a2 + 24) + 8 * v21);
          int v34 = _ZZN4geom8internal19copy_simplified_uvsERKNS_26triangle_mesh_connectivityERKNS_19triangle_mesh_atlasENS_5sliceIjEERNSt3__16vectorIDv2_fNS9_9allocatorISB_EEEERNSA_IjNSC_IjEEEESI_ENK3__0clERKSB_(v78, &v77);
          int v35 = v34;
          uint64_t v37 = a7[1];
          unint64_t v36 = (unint64_t)a7[2];
          if ((unint64_t)v37 >= v36)
          {
            uint64_t v39 = *a7;
            uint64_t v40 = (v37 - *a7) >> 2;
            unint64_t v41 = v40 + 1;
            if ((unint64_t)(v40 + 1) >> 62) {
              goto LABEL_83;
            }
            uint64_t v42 = v36 - (void)v39;
            if (v42 >> 1 > v41) {
              unint64_t v41 = v42 >> 1;
            }
            if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v41;
            }
            if (v43)
            {
              unint64_t v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v76, v43);
              uint64_t v39 = *a7;
              uint64_t v37 = a7[1];
            }
            else
            {
              unint64_t v44 = 0;
            }
            std::vector<int> v45 = &v44[4 * v40];
            *(_DWORD *)std::vector<int> v45 = v35;
            uint64_t v38 = v45 + 4;
            while (v37 != v39)
            {
              int v46 = *((_DWORD *)v37 - 1);
              v37 -= 4;
              *((_DWORD *)v45 - 1) = v46;
              v45 -= 4;
            }
            *a7 = v45;
            a7[1] = v38;
            a7[2] = &v44[4 * v43];
            if (v39) {
              operator delete(v39);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v37 = v34;
            uint64_t v38 = v37 + 4;
          }
          a7[1] = v38;
          float32x2_t v77 = *(float32x2_t *)(*(void *)(a2 + 24) + 8 * (v21 + 1));
          int v47 = _ZZN4geom8internal19copy_simplified_uvsERKNS_26triangle_mesh_connectivityERKNS_19triangle_mesh_atlasENS_5sliceIjEERNSt3__16vectorIDv2_fNS9_9allocatorISB_EEEERNSA_IjNSC_IjEEEESI_ENK3__0clERKSB_(v78, &v77);
          int v48 = v47;
          long long v50 = a7[1];
          unint64_t v49 = (unint64_t)a7[2];
          if ((unint64_t)v50 >= v49)
          {
            long long v52 = *a7;
            uint64_t v53 = (v50 - *a7) >> 2;
            unint64_t v54 = v53 + 1;
            if ((unint64_t)(v53 + 1) >> 62) {
              goto LABEL_83;
            }
            uint64_t v55 = v49 - (void)v52;
            if (v55 >> 1 > v54) {
              unint64_t v54 = v55 >> 1;
            }
            if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v56 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v56 = v54;
            }
            if (v56)
            {
              __n128 v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v76, v56);
              long long v52 = *a7;
              long long v50 = a7[1];
            }
            else
            {
              __n128 v57 = 0;
            }
            long long v58 = &v57[4 * v53];
            *(_DWORD *)long long v58 = v48;
            long long v51 = v58 + 4;
            while (v50 != v52)
            {
              int v59 = *((_DWORD *)v50 - 1);
              v50 -= 4;
              *((_DWORD *)v58 - 1) = v59;
              v58 -= 4;
            }
            *a7 = v58;
            a7[1] = v51;
            a7[2] = &v57[4 * v56];
            if (v52) {
              operator delete(v52);
            }
          }
          else
          {
            *(_DWORD *)long long v50 = v47;
            long long v51 = v50 + 4;
          }
          a7[1] = v51;
          float32x2_t v77 = *(float32x2_t *)(*(void *)(a2 + 24) + 8 * (v21 + 2));
          int v60 = _ZZN4geom8internal19copy_simplified_uvsERKNS_26triangle_mesh_connectivityERKNS_19triangle_mesh_atlasENS_5sliceIjEERNSt3__16vectorIDv2_fNS9_9allocatorISB_EEEERNSA_IjNSC_IjEEEESI_ENK3__0clERKSB_(v78, &v77);
          int v61 = v60;
          long long v63 = a7[1];
          unint64_t v62 = (unint64_t)a7[2];
          if ((unint64_t)v63 >= v62)
          {
            long long v65 = *a7;
            uint64_t v66 = (v63 - *a7) >> 2;
            unint64_t v67 = v66 + 1;
            if ((unint64_t)(v66 + 1) >> 62) {
LABEL_83:
            }
              abort();
            uint64_t v68 = v62 - (void)v65;
            if (v68 >> 1 > v67) {
              unint64_t v67 = v68 >> 1;
            }
            if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v69 = v67;
            }
            if (v69)
            {
              long long v70 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(v76, v69);
              long long v65 = *a7;
              long long v63 = a7[1];
            }
            else
            {
              long long v70 = 0;
            }
            uint64_t v71 = &v70[4 * v66];
            *(_DWORD *)uint64_t v71 = v61;
            long long v64 = v71 + 4;
            while (v63 != v65)
            {
              int v72 = *((_DWORD *)v63 - 1);
              v63 -= 4;
              *((_DWORD *)v71 - 1) = v72;
              v71 -= 4;
            }
            *a7 = v71;
            a7[1] = v64;
            a7[2] = &v70[4 * v69];
            if (v65) {
              operator delete(v65);
            }
          }
          else
          {
            *(_DWORD *)long long v63 = v60;
            long long v64 = v63 + 4;
          }
          a7[1] = v64;
        }
        ++v20;
      }
      ++v19;
    }
    while (v19 != v18);
    long long v73 = __p[0];
    if (__p[0])
    {
      do
      {
        long long v74 = (void *)*v73;
        operator delete(v73);
        long long v73 = v74;
      }
      while (v74);
    }
  }
  long long v75 = v79[0];
  v79[0] = 0;
  if (v75) {
    operator delete(v75);
  }
  if (v82) {
    operator delete(v82);
  }
}

uint64_t geom::internal::triangle_mesh_decimator_interface<float>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      long long v5 = geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v4);
      MEMORY[0x237E10720](v5, 0x10B0C40E87BB8D8);
      *(void *)a1 = 0;
    }
    if (*(void *)a2) {
      operator new();
    }
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a1 + 8), *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

uint64_t *geom::internal::triangle_mesh_decimator_interface<float>::operator=(uint64_t *result, uint64_t *a2)
{
  if (result != a2)
  {
    uint64_t v2 = *result;
    *uint64_t result = *a2;
    *a2 = v2;
    uint64_t v3 = result[1];
    result[1] = a2[1];
    a2[1] = v3;
    uint64_t v4 = result[2];
    result[2] = a2[2];
    a2[2] = v4;
    uint64_t v5 = result[3];
    result[3] = a2[3];
    a2[3] = v5;
  }
  return result;
}

void *geom::internal::triangle_mesh_decimator_interface<float>::copy_connectivity@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  if (*result) {
    return (void *)std::__optional_destruct_base<geom::triangle_mesh_connectivity const,false>::__optional_destruct_base[abi:nn180100]<geom::triangle_mesh_connectivity const&>((uint64_t)a2, *result + 32);
  }
  *a2 = 0;
  a2[208] = 0;
  return result;
}

void geom::internal::triangle_mesh_decimator_interface<float>::triangle_mesh_decimator_interface()
{
}

uint64_t geom::internal::triangle_mesh_decimator_interface<double>::triangle_mesh_decimator_interface(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 8), (const std::vector<unsigned int> *)(a2 + 8));
  if (*(void *)a2) {
    operator new();
  }
  return a1;
}

geom::triangle_mesh_connectivity *geom::internal::triangle_mesh_decimator_interface<double>::make@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, unsigned char *a7@<X8>)
{
  *(void *)&long long v20 = 0;
  uint64_t result = geom::internal::triangle_mesh_decimator<double>::make(a1, a2, a3, a4, a5, a6, (uint64_t)&v20, v23);
  if (v24)
  {
    unint64_t v10 = *(void *)(a5 + 8);
    __dst[1] = 0;
    uint64_t v22 = 0;
    __dst[0] = 0;
    if (v10)
    {
      std::vector<float>::__vallocate[abi:nn180100](__dst, v10);
      uint64_t v11 = (char *)__dst[1];
      bzero(__dst[1], 4 * v10);
      __dst[1] = &v11[4 * v10];
      if (*(void *)(a5 + 8)) {
        memcpy(__dst[0], *(const void **)a5, &v11[4 * v10] - (char *)__dst[0]);
      }
    }
    if (v24) {
      operator new();
    }
    uint64_t v12 = std::__throw_bad_optional_access[abi:nn180100]();
    return geom::internal::triangle_mesh_decimator<double>::make(v12, v13, v14, v15, v16, v17, v18, v19);
  }
  else
  {
    *a7 = 0;
    a7[32] = 0;
  }
  return result;
}

geom::triangle_mesh_connectivity *geom::internal::triangle_mesh_decimator<double>::make@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, unsigned char *a8@<X8>)
{
  geom::triangle_mesh_connectivity::make((geom::triangle_mesh_connectivity *)*(unsigned int *)(a1 + 8), *(const void **)a3, *(void *)(a3 + 8), &__sz);
  if (!v118)
  {
    *a8 = 0;
    a8[552] = 0;
    return std::__optional_destruct_base<std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>,false>::~__optional_destruct_base[abi:nn180100]((geom::triangle_mesh_connectivity *)&__sz);
  }
  unint64_t v14 = v108 - *((void *)&v107 + 1);
  unint64_t v15 = (((void)v108 - *((void *)&v107 + 1)) >> 2);
  __dst[1] = 0;
  __dst[0] = 0;
  uint64_t v103 = 0;
  if ((((void)v108 - *((void *)&v107 + 1)) >> 2))
  {
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(__dst, (((void)v108 - *((void *)&v107 + 1)) >> 2));
    uint64_t v16 = (char *)__dst[1];
    bzero(__dst[1], 32 * v15);
    __dst[1] = &v16[32 * v15];
    if (!v118) {
      goto LABEL_98;
    }
  }
  unint64_t v17 = v14 >> 2;
  int v18 = v117;
  if (v117)
  {
    if (v17)
    {
      uint64_t v19 = 0;
      long long v20 = (char *)__dst[0];
      do
      {
        unint64_t v21 = (long long *)(*(void *)a1 + 32 * v116.__begin_[v19]);
        long long v22 = *v21;
        long long v23 = v21[1];
        char v24 = &v20[32 * v19];
        *(_OWORD *)char v24 = v22;
        *((_OWORD *)v24 + 1) = v23;
        ++v19;
      }
      while (v15 != v19);
    }
  }
  else
  {
    memcpy(__dst[0], *(const void **)a1, 32 * *(void *)(a1 + 8));
  }
  std::vector<geom::internal::quadric>::vector(v101, v15);
  uint64_t v100 = 0;
  long long v98 = 0u;
  *(_OWORD *)unint64_t v99 = 0u;
  *(_OWORD *)int v96 = 0u;
  *(_OWORD *)uint64_t v97 = 0u;
  *(_OWORD *)unint64_t v94 = 0u;
  long long v95 = 0u;
  *(_OWORD *)long long v93 = 0u;
  if (*(void *)(a4 + 8))
  {
    unint64_t v25 = *(void *)(a5 + 8);
    memset(&v92, 0, sizeof(v92));
    if (v25)
    {
      std::vector<float>::__vallocate[abi:nn180100](&v92, v25);
      std::vector<unsigned int>::pointer end = v92.__end_;
      bzero(v92.__end_, 4 * v25);
      v92.__end_ = &end[v25];
    }
    unint64_t v27 = *(void *)(a6 + 8);
    uint64_t v91 = 0;
    v90[0] = 0;
    v90[1] = 0;
    if (v27)
    {
      std::vector<float>::__vallocate[abi:nn180100](v90, v27);
      unint64_t v28 = (char *)v90[1];
      bzero(v90[1], 4 * v27);
      v90[1] = &v28[4 * v27];
    }
    unint64_t v29 = *(void *)(a4 + 8);
    uint64_t v89 = 0;
    std::vector<unsigned int> v87 = 0;
    uint64_t v88 = 0;
    if (v29)
    {
      std::vector<double>::__vallocate[abi:nn180100](&v87, v29);
      unint64_t v30 = (char *)v88;
      bzero(v88, 8 * v29);
      uint64_t v88 = &v30[8 * v29];
    }
    memcpy(v92.__begin_, *(const void **)a5, 4 * *(void *)(a5 + 8));
    memcpy(v90[0], *(const void **)a6, 4 * *(void *)(a6 + 8));
    memcpy(v87, *(const void **)a4, 8 * *(void *)(a4 + 8));
    *(void *)&long long v65 = 0;
    long long v63 = 0u;
    *(_OWORD *)std::vector<unsigned int> __p = 0u;
    *(_OWORD *)int v61 = 0u;
    *(_OWORD *)unint64_t v62 = 0u;
    long long v60 = 0u;
    memset(v59, 0, sizeof(v59));
    geom::triangle_mesh_atlas::init((std::vector<int> *)v59, (uint64_t)&__sz, (uint64_t *)&v92, v90, &v87);
    geom::triangle_mesh_atlas::operator=((uint64_t)v93, (uint64_t)v59);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (v62[1])
    {
      *(void **)&long long v63 = v62[1];
      operator delete(v62[1]);
    }
    if (v61[0])
    {
      v61[1] = v61[0];
      operator delete(v61[0]);
    }
    if (*(void *)&v59[24])
    {
      *(void *)&long long v60 = *(void *)&v59[24];
      operator delete(*(void **)&v59[24]);
    }
    if (*(void *)v59)
    {
      *(void *)&v59[8] = *(void *)v59;
      operator delete(*(void **)v59);
    }
    if (v87)
    {
      uint64_t v88 = v87;
      operator delete(v87);
    }
    if (v90[0])
    {
      v90[1] = v90[0];
      operator delete(v90[0]);
    }
    if (v92.__begin_)
    {
      v92.__end_ = v92.__begin_;
      operator delete(v92.__begin_);
    }
  }
  if (v18 && (std::vector<unsigned int>::size_type v31 = *(void *)(a2 + 8)) != 0)
  {
    uint64_t v32 = *(unsigned int **)a2;
    *(void *)&v59[8] = 0;
    *(void *)&v59[16] = 0;
    *(void *)int v59 = &v59[8];
    uint64_t v33 = 4 * v31;
    do
    {
      std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>((uint64_t **)v59, (uint64_t *)&v59[8], v32, v32);
      ++v32;
      v33 -= 4;
    }
    while (v33);
    memset(&v92, 0, sizeof(v92));
    std::vector<unsigned int>::reserve(&v92, v31);
    if (!v118 || !v117) {
      goto LABEL_98;
    }
    if (v17)
    {
      uint64_t v34 = 0;
      do
      {
        uint64_t v35 = *(void *)&v59[8];
        if (*(void *)&v59[8])
        {
          unsigned int v36 = v116.__begin_[v34];
          uint64_t v37 = (uint64_t *)&v59[8];
          do
          {
            uint64_t v38 = (uint64_t *)v35;
            uint64_t v39 = v37;
            unsigned int v40 = *(_DWORD *)(v35 + 28);
            unint64_t v41 = (uint64_t *)(v35 + 8);
            if (v40 >= v36)
            {
              unint64_t v41 = v38;
              uint64_t v37 = v38;
            }
            uint64_t v35 = *v41;
          }
          while (v35);
          if (v37 != (uint64_t *)&v59[8])
          {
            if (v40 < v36) {
              uint64_t v38 = v39;
            }
            if (v36 >= *((_DWORD *)v38 + 7))
            {
              std::vector<unsigned int>::pointer v42 = v92.__end_;
              if (v92.__end_ >= v92.__end_cap_.__value_)
              {
                begiunsigned __int16 n = v92.__begin_;
                int64_t v45 = v92.__end_ - v92.__begin_;
                unint64_t v46 = v45 + 1;
                if ((unint64_t)(v45 + 1) >> 62) {
                  goto LABEL_99;
                }
                int64_t v47 = (char *)v92.__end_cap_.__value_ - (char *)v92.__begin_;
                if (((char *)v92.__end_cap_.__value_ - (char *)v92.__begin_) >> 1 > v46) {
                  unint64_t v46 = v47 >> 1;
                }
                if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v48 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v48 = v46;
                }
                if (v48)
                {
                  unint64_t v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v92.__end_cap_, v48);
                  std::vector<unsigned int>::pointer v42 = v92.__end_;
                  begiunsigned __int16 n = v92.__begin_;
                }
                else
                {
                  unint64_t v49 = 0;
                }
                long long v50 = (unsigned int *)&v49[4 * v45];
                *long long v50 = v34;
                unint64_t v43 = v50 + 1;
                while (v42 != begin)
                {
                  unsigned int v51 = *--v42;
                  *--long long v50 = v51;
                }
                v92.__begin_ = v50;
                v92.__end_ = v43;
                v92.__end_cap_.__value_ = (unsigned int *)&v49[4 * v48];
                if (begin) {
                  operator delete(begin);
                }
              }
              else
              {
                *v92.__end_ = v34;
                unint64_t v43 = v42 + 1;
              }
              v92.__end_ = v43;
            }
          }
        }
        ++v34;
      }
      while (v34 != v15);
    }
    std::vector<unsigned int> v87 = v92.__begin_;
    uint64_t v88 = (void *)(v92.__end_ - v92.__begin_);
    geom::internal::compute_vertex_masks<double>((geom::triangle_mesh_half_edge_connectivity *)&__sz, (uint64_t *)__dst, (unsigned int **)&v87, v93, v90);
    long long v57 = *(_OWORD *)v90;
    uint64_t v52 = v91;
    if (v92.__begin_)
    {
      v92.__end_ = v92.__begin_;
      operator delete(v92.__begin_);
    }
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE7destroyEPNS_11__tree_nodeIS3_PvEE((uint64_t)v59, *(void **)&v59[8]);
  }
  else
  {
    geom::internal::compute_vertex_masks<double>((geom::triangle_mesh_half_edge_connectivity *)&__sz, (uint64_t *)__dst, (unsigned int **)a2, v93, v59);
    long long v57 = *(_OWORD *)v59;
    uint64_t v52 = *(void *)&v59[16];
  }
  memset(&v92, 0, sizeof(v92));
  if (*(unsigned char *)(a7 + 4))
  {
    if (!v18)
    {
      std::vector<unsigned int>::resize((std::vector<int> *)&v92, __sz);
      std::vector<unsigned int>::pointer v53 = v92.__begin_;
      std::vector<unsigned int>::pointer v54 = v92.__end_;
      if (v92.__begin_ != v92.__end_)
      {
        unsigned int v55 = 0;
        do
          *v53++ = v55++;
        while (v53 != v54);
      }
      goto LABEL_81;
    }
    if (v118 && v117)
    {
      std::vector<unsigned int> v92 = v116;
      memset(&v116, 0, sizeof(v116));
      goto LABEL_81;
    }
LABEL_98:
    std::__throw_bad_optional_access[abi:nn180100]();
LABEL_99:
    abort();
  }
LABEL_81:
  *(void *)int v59 = *(void *)a7;
  *(void *)&v59[24] = v103;
  DWORD2(v60) = v105;
  uint64_t v71 = v113;
  *(_OWORD *)&v59[8] = *(_OWORD *)__dst;
  *(_OWORD *)__dst = 0u;
  uint64_t v103 = 0;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v63 = v108;
  *(_OWORD *)std::vector<unsigned int> __p = v109;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v65 = v110;
  long long v66 = v111;
  long long v110 = 0u;
  long long v111 = 0u;
  *(void *)&long long v60 = __sz;
  std::vector<int>::size_type __sz = 0;
  int v105 = 0;
  *(_OWORD *)int v61 = v106;
  *(_OWORD *)unint64_t v62 = v107;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v69 = 0u;
  long long v70 = v112;
  long long v112 = 0u;
  long long v72 = v114;
  uint64_t v73 = v115;
  long long v114 = 0u;
  uint64_t v113 = 0;
  uint64_t v115 = 0;
  geom::triangle_mesh_atlas::triangle_mesh_atlas(v74, (const std::vector<unsigned int> *)v93);
  long long v75 = v57;
  uint64_t v76 = v52;
  long long v77 = 0u;
  long long v78 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  std::vector<unsigned int> v83 = v92;
  memset(&v92, 0, sizeof(v92));
  long long v84 = 0u;
  long long v85 = 0u;
  long long v86 = 0u;
  geom::internal::triangle_mesh_decimator<double>::initialize_quadrics(v59);
  geom::internal::triangle_mesh_decimator<double>::initialize_edge_data((uint64_t)v59);
  geom::internal::triangle_mesh_decimator<float>::triangle_mesh_decimator((uint64_t)a8, (uint64_t)v59);
  a8[552] = 1;
  geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v59);
  if (v92.__begin_)
  {
    v92.__end_ = v92.__begin_;
    operator delete(v92.__begin_);
  }
  if (v99[0])
  {
    v99[1] = v99[0];
    operator delete(v99[0]);
  }
  if (v97[1])
  {
    *(void **)&long long v98 = v97[1];
    operator delete(v97[1]);
  }
  if (v96[0])
  {
    v96[1] = v96[0];
    operator delete(v96[0]);
  }
  if (v94[1])
  {
    *(void **)&long long v95 = v94[1];
    operator delete(v94[1]);
  }
  if (v93[0])
  {
    v93[1] = v93[0];
    operator delete(v93[0]);
  }
  if (v101[0])
  {
    v101[1] = v101[0];
    operator delete(v101[0]);
  }
  if (__dst[0])
  {
    __dst[1] = __dst[0];
    operator delete(__dst[0]);
  }
  return std::__optional_destruct_base<std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>,false>::~__optional_destruct_base[abi:nn180100]((geom::triangle_mesh_connectivity *)&__sz);
}

geom::triangle_mesh_connectivity *geom::internal::triangle_mesh_decimator_interface<double>::make@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  v7[0] = 0;
  v7[1] = 0;
  v6[0] = 0;
  v6[1] = 0;
  v5[0] = 0;
  v5[1] = 0;
  v4[0] = 0;
  v4[1] = 0;
  return geom::internal::triangle_mesh_decimator_interface<double>::make(a1, (uint64_t)v7, a2, (uint64_t)v6, (uint64_t)v5, (uint64_t)v4, a3);
}

uint64_t geom::internal::triangle_mesh_decimator_interface<double>::decimate_one_edge(uint64_t *a1)
{
  uint64_t v1 = *a1;
  if (!*a1) {
    return 0;
  }
  unsigned int v3 = geom::indexed_priority_queue<unsigned int,double>::pop((unsigned int **)(v1 + 432));
  if (v3 == -1 && v2 == INFINITY) {
    return 0;
  }
  return geom::internal::triangle_mesh_decimator<double>::decimate_edge(v1, v3);
}

uint64_t geom::internal::triangle_mesh_decimator_interface<double>::decimate_edge(uint64_t *a1, unsigned int a2)
{
  uint64_t result = *a1;
  if (result) {
    return geom::internal::triangle_mesh_decimator<double>::decimate_edge(result, a2);
  }
  return result;
}

uint64_t geom::internal::triangle_mesh_decimator<double>::decimate_edge(uint64_t a1, unsigned int a2)
{
  uint64_t v63 = *MEMORY[0x263EF8340];
  unint64_t v2 = a2;
  uint64_t v3 = *(void *)(a1 + 216);
  if (a2 >= (unint64_t)((*(void *)(a1 + 224) - v3) >> 2)) {
    return 0;
  }
  long long v6 = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 32);
  unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 32), *(_DWORD *)(v3 + 4 * a2) / 3u, *(_DWORD *)(v3 + 4 * a2) % 3u);
  uint64_t result = geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v6, half_edge_for_face_vertex);
  if (result)
  {
    uint64_t result = geom::internal::triangle_mesh_decimator<double>::is_edge_collapse_geometrically_safe((void *)a1, a2);
    if (result)
    {
      if (((*(void *)(a1 + 296) - *(void *)(a1 + 288)) & 0x3FFFFFFFCLL) == 0
        || (uint64_t v9 = *(void *)(a1 + 216), v2 >= (*(void *)(a1 + 224) - v9) >> 2)
        || (v10 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, *(_DWORD *)(v9 + 4 * v2) / 3u, *(_DWORD *)(v9 + 4 * v2) % 3u), !geom::triangle_mesh_half_edge_connectivity::is_edge_collapse_safe(v6, v10, (std::vector<unsigned int> *)(a1 + 504), (std::vector<unsigned int> *)(a1 + 528)))|| (uint64_t result = geom::internal::triangle_mesh_decimator<double>::update_edge_uvs(a1, a2, (float64x2_t *)(*(void *)(a1 + 408) + 48 * v2 + 16)), result))
      {
        uint64_t v11 = *(void *)(a1 + 216);
        if (v2 >= (*(void *)(a1 + 224) - v11) >> 2)
        {
          *(void *)unint64_t v62 = -1;
        }
        else
        {
          unsigned int v12 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, *(_DWORD *)(v11 + 4 * v2) / 3u, *(_DWORD *)(v11 + 4 * v2) % 3u);
          geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v6, v12, v62);
        }
        unsigned int v56 = *(_DWORD *)(a1 + 32);
        unsigned int v13 = geom::triangle_mesh_connectivity::collapse_edge(v6, a2);
        unsigned int v14 = v13;
        if (*(unsigned char *)(a1 + 4))
        {
          uint64_t v15 = *(void *)(a1 + 408) + 48 * v2;
          uint64_t v16 = *(void *)(a1 + 8);
          float64x2_t v18 = *(float64x2_t *)(v15 + 16);
          float64x2_t v17 = *(float64x2_t *)(v15 + 32);
          if (v62[0] == v13
            || (uint64_t v19 = (float64x2_t *)(v16 + 32 * v62[0]),
                float64x2_t v20 = vsubq_f64(*v19, v18),
                float64x2_t v21 = vsubq_f64(v19[1], v17),
                sqrt(vmulq_f64(v21, v21).f64[0] + vaddvq_f64(vmulq_f64(v20, v20))) != 0.0))
          {
            if (v62[1] != v13)
            {
              long long v22 = (float64x2_t *)(v16 + 32 * v62[1]);
              float64x2_t v23 = vsubq_f64(*v22, v18);
              float64x2_t v24 = vsubq_f64(v22[1], v17);
              if (sqrt(vmulq_f64(v24, v24).f64[0] + vaddvq_f64(vmulq_f64(v23, v23))) == 0.0) {
                *(_DWORD *)(*(void *)(a1 + 480) + 4 * v62[0]) = *(_DWORD *)(*(void *)(a1 + 480) + 4 * v62[1]);
              }
            }
          }
          else
          {
            *(_DWORD *)(*(void *)(a1 + 480) + 4 * v62[1]) = *(_DWORD *)(*(void *)(a1 + 480) + 4 * v62[0]);
          }
        }
        if (v13 != -1)
        {
          uint64_t v25 = *(unsigned int *)((unint64_t)v62 | (4 * (v13 == v62[0])));
          unsigned int v26 = v13;
          char v27 = *(unsigned char *)(*(void *)(a1 + 360) + v25) | *(unsigned char *)(*(void *)(a1 + 360) + v13);
          uint64_t v28 = *(void *)(a1 + 408) + 48 * v2;
          long long v29 = *(_OWORD *)(v28 + 16);
          long long v30 = *(_OWORD *)(v28 + 32);
          std::vector<unsigned int>::size_type v31 = (_OWORD *)(*(void *)(a1 + 8) + 32 * v13);
          *std::vector<unsigned int>::size_type v31 = v29;
          v31[1] = v30;
          if (*(_DWORD *)a1 == 1)
          {
            geom::internal::triangle_mesh_decimator<double>::recompute_vertex_quadric((void *)a1, v13, (void *)(a1 + 504), (uint64_t)&v57);
            uint64_t v32 = *(void *)(a1 + 384);
            uint64_t v33 = (float64x2_t *)(v32 + 80 * v26);
            if (v33 != &v57)
            {
              *uint64_t v33 = v57;
              uint64_t v34 = (_OWORD *)(v32 + 80 * v26);
              v34[1] = v58;
              v34[2] = v59;
              v34[3] = v60;
              v34[4] = v61;
            }
          }
          else
          {
            uint64_t v35 = *(void *)(a1 + 384);
            unsigned int v36 = (float64x2_t *)(v35 + 80 * v25);
            uint64_t v37 = (float64x2_t *)(v35 + 80 * v13);
            float64x2_t v38 = vaddq_f64(v36[1], v37[1]);
            *uint64_t v37 = vaddq_f64(*v36, *v37);
            v37[1] = v38;
            float64x2_t v39 = vaddq_f64(v36[3], v37[3]);
            v37[2] = vaddq_f64(v36[2], v37[2]);
            v37[3] = v39;
            void v37[4] = vaddq_f64(v36[4], v37[4]);
          }
          *(unsigned char *)(*(void *)(a1 + 360) + v14) = v27;
          geom::triangle_mesh_connectivity::get_incident_edges_to_vertex(v6, v14, a1 + 528);
          uint64_t v44 = *(void *)(a1 + 536) - *(void *)(a1 + 528);
          if (v44)
          {
            uint64_t v45 = 0;
            unint64_t v46 = v44 >> 2;
            if (v46 <= 1) {
              uint64_t v47 = 1;
            }
            else {
              uint64_t v47 = v46;
            }
            do
            {
              uint64_t v48 = *(unsigned int *)(*(void *)(a1 + 528) + 4 * v45);
              uint64_t v49 = *(void *)(a1 + 408) + 48 * v48;
              geom::internal::triangle_mesh_decimator<double>::make_edge_cost((void *)a1, *(_DWORD *)(*(void *)(a1 + 528) + 4 * v45), &v57, *(double *)v49, v40, v41, v42, v43);
              float64x2_t v50 = v57;
              long long v51 = v59;
              *(_OWORD *)(v49 + 16) = v58;
              *(_OWORD *)(v49 + 32) = v51;
              *(float64x2_t *)uint64_t v49 = v50;
              *(double *)uint64_t v49 = *(double *)v49 + 1.0e-12;
              uint64_t v52 = *(unsigned int *)(*(void *)(a1 + 456) + 4 * v48);
              if (v52 == -1)
              {
                double v55 = INFINITY;
                uint64_t v54 = 0xFFFFFFFFLL;
              }
              else
              {
                uint64_t v53 = *(void *)(a1 + 432) + 16 * v52;
                uint64_t v54 = *(void *)v53;
                double v55 = *(double *)(v53 + 8);
              }
              *(void *)&v57.f64[0] = v54;
              v57.f64[1] = v55;
              if (v54 == -1 && v55 == INFINITY) {
                LODWORD(v57.f64[0]) = v48;
              }
              v57.f64[1] = *(float64_t *)v49;
              geom::indexed_priority_queue<unsigned int,double>::push_or_change_cost((void **)(a1 + 432), (unsigned int *)&v57);
              ++v45;
            }
            while (v47 != v45);
          }
        }
        return *(_DWORD *)v6 < v56;
      }
    }
  }
  return result;
}

void geom::internal::triangle_mesh_decimator_interface<double>::get_simplified_geometry(uint64_t *a1, void *a2, std::vector<int> *a3, std::vector<int> *a4)
{
  a2[1] = *a2;
  a3->__end_ = a3->__begin_;
  a4->__end_ = a4->__begin_;
  uint64_t v4 = *a1;
  if (v4) {
    geom::internal::copy_simplified_geometry<double>(v4, a2, a3, a4);
  }
}

void geom::internal::copy_simplified_geometry<double>(uint64_t a1, void *a2, std::vector<int> *a3, std::vector<int> *a4)
{
  std::vector<int>::value_type __x = -1;
  unint64_t v8 = *(void *)(a1 + 80) - *(void *)(a1 + 72);
  uint64_t v9 = (v8 >> 2);
  long long v51 = 0;
  uint64_t v52 = 0;
  std::vector<unsigned int> __p = 0;
  if ((v8 >> 2))
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, (v8 >> 2));
    unsigned int v10 = v51;
    uint64_t v11 = &v51[v9];
    uint64_t v12 = 4 * v9;
    do
    {
      *v10++ = __x;
      v12 -= 4;
    }
    while (v12);
    long long v51 = v11;
  }
  memset(&v49, 0, sizeof(v49));
  std::vector<unsigned int>::resize(&v49, *(unsigned int *)(a1 + 36), &__x);
  a4->__end_ = a4->__begin_;
  std::vector<unsigned int>::resize(a4, *(unsigned int *)(a1 + 32), &__x);
  uint64_t v13 = *(void *)(a1 + 72);
  uint64_t v14 = *(void *)(a1 + 80) - v13;
  if ((v14 & 0x3FFFFFFFCLL) != 0)
  {
    unint64_t v15 = 0;
    int v16 = 0;
    unint64_t v17 = v14 >> 2;
    begiunsigned __int16 n = a4->__begin_;
    uint64_t v19 = __p;
    uint64_t v20 = ((unint64_t)v14 >> 2);
    do
    {
      if (v17 > v15 && *(_DWORD *)(v13 + 4 * v15) != -1)
      {
        begin[v16] = v15;
        v19[v15] = v16++;
      }
      ++v15;
    }
    while (v20 != v15);
  }
  uint64_t v21 = *(void *)(a1 + 48);
  unint64_t v22 = (*(void *)(a1 + 56) - v21) >> 2;
  if ((v22 / 3))
  {
    int v23 = 0;
    uint64_t v24 = 0;
    int v25 = 0;
    std::vector<int>::pointer v26 = v49.__begin_;
    do
    {
      if (v22 > v24 && *(_DWORD *)(v21 + 4 * v24) != -1) {
        v26[v25++] = v23;
      }
      v24 += 3;
      ++v23;
    }
    while (3 * (v22 / 3) != v24);
  }
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)a2, *(unsigned int *)(a1 + 32));
  uint64_t v27 = *(unsigned int *)(a1 + 32);
  if (v27)
  {
    for (uint64_t i = 0; i != v27; ++i)
    {
      long long v29 = (long long *)(*(void *)(a1 + 8) + 32 * a4->__begin_[i]);
      long long v30 = *v29;
      long long v31 = v29[1];
      uint64_t v32 = (_OWORD *)(*a2 + 32 * i);
      *uint64_t v32 = v30;
      v32[1] = v31;
    }
  }
  std::vector<unsigned int>::resize(a3, (3 * *(_DWORD *)(a1 + 36)));
  uint64_t v33 = *(unsigned int *)(a1 + 36);
  if (v33)
  {
    uint64_t v34 = 0;
    std::vector<int>::pointer v35 = v49.__begin_;
    uint64_t v36 = *(void *)(a1 + 48);
    uint64_t v37 = __p;
    uint64_t v38 = 3 * v33;
    std::vector<int>::pointer v39 = a3->__begin_;
    do
    {
      int v40 = *v35++;
      float64x2_t v41 = (unsigned int *)(v36 + 4 * (3 * v40));
      uint64_t v42 = *v41;
      uint64_t v43 = v41[1];
      uint64_t v44 = v41[2];
      v39[v34] = v37[v42];
      v39[(v34 + 1)] = v37[v43];
      v39[(v34 + 2)] = v37[v44];
      v34 += 3;
    }
    while (v38 != v34);
  }
  uint64_t v45 = *(void *)(a1 + 480);
  if (*(void *)(a1 + 488) != v45)
  {
    std::vector<int>::pointer v46 = a4->__begin_;
    uint64_t v47 = (char *)a4->__end_ - (char *)a4->__begin_;
    if (v47)
    {
      unint64_t v48 = v47 >> 2;
      if (v48 <= 1) {
        unint64_t v48 = 1;
      }
      do
      {
        *std::vector<int>::pointer v46 = *(_DWORD *)(v45 + 4 * *v46);
        ++v46;
        --v48;
      }
      while (v48);
    }
  }
  if (v49.__begin_)
  {
    v49.__end_ = v49.__begin_;
    operator delete(v49.__begin_);
  }
  if (__p)
  {
    long long v51 = (std::vector<int>::value_type *)__p;
    operator delete(__p);
  }
}

void geom::internal::triangle_mesh_decimator_interface<double>::get_simplified_geometry(uint64_t *a1, void *a2, std::vector<int> *a3, void *a4, uint64_t a5, uint64_t a6, std::vector<int> *a7)
{
  a2[1] = *a2;
  a3->__end_ = a3->__begin_;
  a4[1] = *a4;
  *(void *)(a5 + 8) = *(void *)a5;
  *(void *)(a6 + 8) = *(void *)a6;
  a7->__end_ = a7->__begin_;
  uint64_t v8 = *a1;
  if (v8)
  {
    geom::internal::copy_simplified_geometry<double>(v8, a2, a3, a7);
    uint64_t v12 = (unsigned int *)a1[1];
    uint64_t v13 = *a1 + 32;
    uint64_t v14 = *a1 + 240;
    uint64_t v15 = (a1[2] - (uint64_t)v12) >> 2;
    geom::internal::copy_simplified_uvs(v13, v14, v12, v15, (uint64_t)a4, (char **)a5, (char **)a6);
  }
}

uint64_t geom::internal::triangle_mesh_decimator_interface<double>::operator=(uint64_t a1, uint64_t a2)
{
  if (a1 != a2)
  {
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      uint64_t v5 = geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v4);
      MEMORY[0x237E10720](v5, 0x10B0C40E87BB8D8);
      *(void *)a1 = 0;
    }
    if (*(void *)a2) {
      operator new();
    }
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)(a1 + 8), *(char **)(a2 + 8), *(void *)(a2 + 16), (uint64_t)(*(void *)(a2 + 16) - *(void *)(a2 + 8)) >> 2);
  }
  return a1;
}

void geom::internal::simplify_triangle_mesh<float>(uint64_t a1, uint64_t a2, void *a3, std::vector<int> *a4)
{
  __p.__begin_ = 0;
  __p.__end_ = 0;
  v10[0] = 0;
  v10[1] = 0;
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = 0;
  geom::internal::triangle_mesh_decimator<float>::make(a1, a1 + 32, a1 + 16, (uint64_t)&__p, (uint64_t)v10, (uint64_t)v9, (uint64_t)&v8, v11);
  if (v12)
  {
    memset(&__p, 0, sizeof(__p));
    geom::internal::decimate_mesh<float>(a2, (uint64_t)v11);
    geom::internal::copy_simplified_geometry<float>((uint64_t)v11, a3, a4, &__p);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v12) {
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v11);
    }
  }
  else
  {
    a3[1] = *a3;
    a4->__end_ = a4->__begin_;
  }
}

uint64_t geom::internal::decimate_mesh<float>(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 36);
  if (v2 >= result) {
    unsigned int v3 = result;
  }
  else {
    unsigned int v3 = *(_DWORD *)(a2 + 36);
  }
  if (((*(void *)(a2 + 440) - *(void *)(a2 + 432)) & 0xFFFFFFFF0) != 0 && v2 > result)
  {
    long long v6 = (unsigned int **)(a2 + 432);
    do
    {
      uint64_t result = geom::indexed_priority_queue<unsigned int,double>::pop(v6);
      if (result != -1 || v7 != INFINITY) {
        uint64_t result = geom::internal::triangle_mesh_decimator<float>::decimate_edge(a2, result);
      }
    }
    while (((*(void *)(a2 + 440) - *(void *)(a2 + 432)) & 0xFFFFFFFF0) != 0 && *(_DWORD *)(a2 + 36) > v3);
  }
  return result;
}

void geom::internal::simplify_triangle_mesh<double>(uint64_t a1, uint64_t a2, void *a3, std::vector<int> *a4)
{
  __p.__begin_ = 0;
  __p.__end_ = 0;
  v10[0] = 0;
  v10[1] = 0;
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v8 = 0;
  geom::internal::triangle_mesh_decimator<double>::make(a1, a1 + 32, a1 + 16, (uint64_t)&__p, (uint64_t)v10, (uint64_t)v9, (uint64_t)&v8, v11);
  if (v12)
  {
    memset(&__p, 0, sizeof(__p));
    geom::internal::decimate_mesh<double>(a2, (uint64_t)v11);
    geom::internal::copy_simplified_geometry<double>((uint64_t)v11, a3, a4, &__p);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v12) {
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v11);
    }
  }
  else
  {
    a3[1] = *a3;
    a4->__end_ = a4->__begin_;
  }
}

uint64_t geom::internal::decimate_mesh<double>(uint64_t result, uint64_t a2)
{
  unsigned int v2 = *(_DWORD *)(a2 + 36);
  if (v2 >= result) {
    unsigned int v3 = result;
  }
  else {
    unsigned int v3 = *(_DWORD *)(a2 + 36);
  }
  if (((*(void *)(a2 + 440) - *(void *)(a2 + 432)) & 0xFFFFFFFF0) != 0 && v2 > result)
  {
    long long v6 = (unsigned int **)(a2 + 432);
    do
    {
      uint64_t result = geom::indexed_priority_queue<unsigned int,double>::pop(v6);
      if (result != -1 || v7 != INFINITY) {
        uint64_t result = geom::internal::triangle_mesh_decimator<double>::decimate_edge(a2, result);
      }
    }
    while (((*(void *)(a2 + 440) - *(void *)(a2 + 432)) & 0xFFFFFFFF0) != 0 && *(_DWORD *)(a2 + 36) > v3);
  }
  return result;
}

void geom::internal::simplify_triangle_mesh<float>(uint64_t a1, uint64_t a2, void *a3, std::vector<int> *a4, void *a5, uint64_t a6, uint64_t a7)
{
  int v20 = 0;
  char v21 = 0;
  char v22 = *(unsigned char *)(a1 + 96);
  geom::internal::triangle_mesh_decimator<float>::make(a1, a1 + 32, a1 + 16, a1 + 48, a1 + 64, a1 + 80, (uint64_t)&v20, v16);
  if (v19)
  {
    memset(&__p, 0, sizeof(__p));
    geom::internal::decimate_mesh<float>(a2, (uint64_t)v16);
    geom::internal::copy_simplified_geometry<float>((uint64_t)v16, a3, a4, &__p);
    geom::internal::copy_simplified_uvs((uint64_t)&v17, (uint64_t)&v18, *(unsigned int **)(a1 + 64), *(void *)(a1 + 72), (uint64_t)a5, (char **)a6, (char **)a7);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v19) {
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v16);
    }
  }
  else
  {
    a3[1] = *a3;
    uint64_t v14 = *(char **)a7;
    a5[1] = *a5;
    *(void *)(a6 + 8) = *(void *)a6;
    *(void *)(a7 + 8) = v14;
  }
}

void geom::internal::simplify_triangle_mesh<double>(uint64_t a1, uint64_t a2, void *a3, std::vector<int> *a4, void *a5, uint64_t a6, uint64_t a7)
{
  int v20 = 0;
  char v21 = 0;
  char v22 = *(unsigned char *)(a1 + 96);
  geom::internal::triangle_mesh_decimator<double>::make(a1, a1 + 32, a1 + 16, a1 + 48, a1 + 64, a1 + 80, (uint64_t)&v20, v16);
  if (v19)
  {
    memset(&__p, 0, sizeof(__p));
    geom::internal::decimate_mesh<double>(a2, (uint64_t)v16);
    geom::internal::copy_simplified_geometry<double>((uint64_t)v16, a3, a4, &__p);
    geom::internal::copy_simplified_uvs((uint64_t)&v17, (uint64_t)&v18, *(unsigned int **)(a1 + 64), *(void *)(a1 + 72), (uint64_t)a5, (char **)a6, (char **)a7);
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
    }
    if (v19) {
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v16);
    }
  }
  else
  {
    a3[1] = *a3;
    uint64_t v14 = *(char **)a7;
    a5[1] = *a5;
    *(void *)(a6 + 8) = *(void *)a6;
    *(void *)(a7 + 8) = v14;
  }
}

void geom::internal::simplify_and_correspond_triangle_mesh<float>(uint64_t a1, uint64_t a2, void *a3, std::vector<int> *a4, std::vector<int> *a5)
{
  int v14 = 2;
  __int16 v15 = 1;
  v11[0] = 0;
  v11[1] = 0;
  v10[0] = 0;
  v10[1] = 0;
  v9[0] = 0;
  v9[1] = 0;
  geom::internal::triangle_mesh_decimator<float>::make(a1, a1 + 32, a1 + 16, (uint64_t)v11, (uint64_t)v10, (uint64_t)v9, (uint64_t)&v14, v12);
  if (v13)
  {
    geom::internal::decimate_mesh<float>(a2, (uint64_t)v12);
    geom::internal::copy_simplified_geometry<float>((uint64_t)v12, a3, a4, a5);
    if (v13) {
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v12);
    }
  }
  else
  {
    a3[1] = *a3;
    a4->__end_ = a4->__begin_;
    a5->__end_ = a5->__begin_;
  }
}

void geom::internal::simplify_and_correspond_triangle_mesh<double>(uint64_t a1, uint64_t a2, void *a3, std::vector<int> *a4, std::vector<int> *a5)
{
  int v14 = 2;
  __int16 v15 = 1;
  v11[0] = 0;
  v11[1] = 0;
  v10[0] = 0;
  v10[1] = 0;
  v9[0] = 0;
  v9[1] = 0;
  geom::internal::triangle_mesh_decimator<double>::make(a1, a1 + 32, a1 + 16, (uint64_t)v11, (uint64_t)v10, (uint64_t)v9, (uint64_t)&v14, v12);
  if (v13)
  {
    geom::internal::decimate_mesh<double>(a2, (uint64_t)v12);
    geom::internal::copy_simplified_geometry<double>((uint64_t)v12, a3, a4, a5);
    if (v13) {
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v12);
    }
  }
  else
  {
    a3[1] = *a3;
    a4->__end_ = a4->__begin_;
    a5->__end_ = a5->__begin_;
  }
}

void geom::internal::simplify_and_correspond_triangle_mesh<float>(uint64_t a1, uint64_t a2, void *a3, std::vector<int> *a4, void *a5, uint64_t a6, uint64_t a7, std::vector<int> *a8)
{
  int v21 = 2;
  char v22 = 1;
  char v23 = *(unsigned char *)(a1 + 96);
  geom::internal::triangle_mesh_decimator<float>::make(a1, a1 + 32, a1 + 16, a1 + 48, a1 + 64, a1 + 80, (uint64_t)&v21, v17);
  if (v20)
  {
    geom::internal::decimate_mesh<float>(a2, (uint64_t)v17);
    geom::internal::copy_simplified_geometry<float>((uint64_t)v17, a3, a4, a8);
    geom::internal::copy_simplified_uvs((uint64_t)&v18, (uint64_t)&v19, *(unsigned int **)(a1 + 64), *(void *)(a1 + 72), (uint64_t)a5, (char **)a6, (char **)a7);
    if (v20) {
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v17);
    }
  }
  else
  {
    a3[1] = *a3;
    int v16 = *(char **)a7;
    a5[1] = *a5;
    *(void *)(a6 + 8) = *(void *)a6;
    *(void *)(a7 + 8) = v16;
    a8->__end_ = a8->__begin_;
  }
}

void geom::internal::simplify_and_correspond_triangle_mesh<double>(uint64_t a1, uint64_t a2, void *a3, std::vector<int> *a4, void *a5, uint64_t a6, uint64_t a7, std::vector<int> *a8)
{
  int v21 = 2;
  char v22 = 1;
  char v23 = *(unsigned char *)(a1 + 96);
  geom::internal::triangle_mesh_decimator<double>::make(a1, a1 + 32, a1 + 16, a1 + 48, a1 + 64, a1 + 80, (uint64_t)&v21, v17);
  if (v20)
  {
    geom::internal::decimate_mesh<double>(a2, (uint64_t)v17);
    geom::internal::copy_simplified_geometry<double>((uint64_t)v17, a3, a4, a8);
    geom::internal::copy_simplified_uvs((uint64_t)&v18, (uint64_t)&v19, *(unsigned int **)(a1 + 64), *(void *)(a1 + 72), (uint64_t)a5, (char **)a6, (char **)a7);
    if (v20) {
      geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(v17);
    }
  }
  else
  {
    a3[1] = *a3;
    int v16 = *(char **)a7;
    a5[1] = *a5;
    *(void *)(a6 + 8) = *(void *)a6;
    *(void *)(a7 + 8) = v16;
    a8->__end_ = a8->__begin_;
  }
}

unint64_t _ZZN4geom8internal19copy_simplified_uvsERKNS_26triangle_mesh_connectivityERKNS_19triangle_mesh_atlasENS_5sliceIjEERNSt3__16vectorIDv2_fNS9_9allocatorISB_EEEERNSA_IjNSC_IjEEEESI_ENK3__0clERKSB_(void ***a1, float32x2_t *a2)
{
  float32x2_t v4 = *a2;
  uint64_t v5 = *a1;
  unint64_t v6 = vcvts_n_u32_f32(COERCE_FLOAT(HIDWORD(*(unint64_t *)a2)), 0x20uLL) | (vcvts_n_u32_f32(COERCE_FLOAT(*a2), 0x20uLL) << 32);
  unint64_t v7 = (unint64_t)(*a1)[1];
  float32x2_t v57 = *a2;
  if (v7)
  {
    uint8x8_t v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v9 = v6;
      if (v6 >= v7) {
        unint64_t v9 = v6 % v7;
      }
    }
    else
    {
      unint64_t v9 = v6 & (v7 - 1);
    }
    char v12 = (float32x2_t **)*((void *)*v5 + v9);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (float32x2_t *)*i)
      {
        unint64_t v14 = (unint64_t)i[1];
        if (v14 == v6)
        {
          float32x2_t v15 = vsub_f32(i[2], v4);
          if (sqrtf(vaddv_f32(vmul_f32(v15, v15))) <= 0.00001) {
            return i[3].u32[0];
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v14 >= v7) {
              v14 %= v7;
            }
          }
          else
          {
            v14 &= v7 - 1;
          }
          if (v14 != v9) {
            break;
          }
        }
      }
    }
    unsigned int v10 = a1 + 1;
    int v16 = a1[1];
    unint64_t v11 = (unint64_t)((unsigned char *)v16[1] - (unsigned char *)*v16) >> 3;
    if (v8.u32[0] > 1uLL)
    {
      unint64_t v2 = v6;
      if (v6 >= v7) {
        unint64_t v2 = v6 % v7;
      }
    }
    else
    {
      unint64_t v2 = v6 & (v7 - 1);
    }
    uint64_t v17 = (float32x2_t **)*((void *)*v5 + v2);
    if (v17)
    {
      for (uint64_t j = *v17; j; uint64_t j = (float32x2_t *)*j)
      {
        unint64_t v19 = (unint64_t)j[1];
        if (v19 == v6)
        {
          float32x2_t v20 = vsub_f32(j[2], v4);
          if (sqrtf(vaddv_f32(vmul_f32(v20, v20))) <= 0.00001) {
            goto LABEL_89;
          }
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v19 >= v7) {
              v19 %= v7;
            }
          }
          else
          {
            v19 &= v7 - 1;
          }
          if (v19 != v2) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unsigned int v10 = a1 + 1;
    unint64_t v11 = (unint64_t)((unsigned char *)a1[1][1] - (unsigned char *)*a1[1]) >> 3;
  }
  uint64_t j = (float32x2_t *)operator new(0x20uLL);
  *uint64_t j = 0;
  j[1] = (float32x2_t)v6;
  j[2] = v57;
  j[3].i32[0] = 0;
  float v21 = (float)((unint64_t)v5[3] + 1);
  float v22 = *((float *)v5 + 8);
  if (!v7 || (float)(v22 * (float)v7) < v21)
  {
    BOOL v23 = (v7 & (v7 - 1)) == 0;
    if (v7 < 3) {
      BOOL v23 = 0;
    }
    unint64_t v24 = (2 * v7) | !v23;
    unint64_t v25 = vcvtps_u32_f32(v21 / v22);
    if (v24 <= v25) {
      int8x8_t prime = (int8x8_t)v25;
    }
    else {
      int8x8_t prime = (int8x8_t)v24;
    }
    if (*(void *)&prime == 1)
    {
      int8x8_t prime = (int8x8_t)2;
    }
    else if ((*(void *)&prime & (*(void *)&prime - 1)) != 0)
    {
      int8x8_t prime = (int8x8_t)std::__next_prime(*(void *)&prime);
      unint64_t v7 = (unint64_t)v5[1];
    }
    if (*(void *)&prime > v7) {
      goto LABEL_45;
    }
    if (*(void *)&prime < v7)
    {
      unint64_t v33 = vcvtps_u32_f32((float)(unint64_t)v5[3] / *((float *)v5 + 8));
      if (v7 < 3 || (uint8x8_t v34 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v34.i16[0] = vaddlv_u8(v34), v34.u32[0] > 1uLL))
      {
        unint64_t v33 = std::__next_prime(v33);
      }
      else
      {
        uint64_t v35 = 1 << -(char)__clz(v33 - 1);
        if (v33 >= 2) {
          unint64_t v33 = v35;
        }
      }
      if (*(void *)&prime <= v33) {
        int8x8_t prime = (int8x8_t)v33;
      }
      if (*(void *)&prime >= v7)
      {
        unint64_t v7 = (unint64_t)v5[1];
      }
      else
      {
        if (prime)
        {
LABEL_45:
          if (*(void *)&prime >> 61) {
            std::__throw_bad_array_new_length[abi:nn180100]();
          }
          uint64_t v27 = operator new(8 * *(void *)&prime);
          uint64_t v28 = *v5;
          *uint64_t v5 = v27;
          if (v28) {
            operator delete(v28);
          }
          uint64_t v29 = 0;
          v5[1] = (void *)prime;
          do
            *((void *)*v5 + v29++) = 0;
          while (*(void *)&prime != v29);
          long long v30 = v5[2];
          if (v30)
          {
            unint64_t v31 = v30[1];
            uint8x8_t v32 = (uint8x8_t)vcnt_s8(prime);
            v32.i16[0] = vaddlv_u8(v32);
            if (v32.u32[0] > 1uLL)
            {
              if (v31 >= *(void *)&prime) {
                v31 %= *(void *)&prime;
              }
            }
            else
            {
              v31 &= *(void *)&prime - 1;
            }
            *((void *)*v5 + v31) = v5 + 2;
            uint64_t v36 = (void *)*v30;
            if (*v30)
            {
              do
              {
                unint64_t v37 = v36[1];
                if (v32.u32[0] > 1uLL)
                {
                  if (v37 >= *(void *)&prime) {
                    v37 %= *(void *)&prime;
                  }
                }
                else
                {
                  v37 &= *(void *)&prime - 1;
                }
                if (v37 != v31)
                {
                  if (!*((void *)*v5 + v37))
                  {
                    *((void *)*v5 + v37) = v30;
                    goto LABEL_70;
                  }
                  *long long v30 = *v36;
                  *uint64_t v36 = **((void **)*v5 + v37);
                  **((void **)*v5 + v37) = v36;
                  uint64_t v36 = v30;
                }
                unint64_t v37 = v31;
LABEL_70:
                long long v30 = v36;
                uint64_t v36 = (void *)*v36;
                unint64_t v31 = v37;
              }
              while (v36);
            }
          }
          unint64_t v7 = (unint64_t)prime;
          goto LABEL_74;
        }
        unsigned int v56 = *v5;
        *uint64_t v5 = 0;
        if (v56) {
          operator delete(v56);
        }
        unint64_t v7 = 0;
        v5[1] = 0;
      }
    }
LABEL_74:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7) {
        unint64_t v2 = v6 % v7;
      }
      else {
        unint64_t v2 = v6;
      }
    }
    else
    {
      unint64_t v2 = (v7 - 1) & v6;
    }
  }
  uint64_t v38 = *v5;
  std::vector<int>::pointer v39 = (float32x2_t **)*((void *)*v5 + v2);
  if (v39)
  {
    *uint64_t j = (float32x2_t)*v39;
  }
  else
  {
    float32x2_t v40 = (float32x2_t)v5[2];
    *uint64_t j = v40;
    void v5[2] = j;
    v38[v2] = v5 + 2;
    if (!*(void *)&v40) {
      goto LABEL_88;
    }
    unint64_t v41 = *(void *)(*(void *)&v40 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v41 >= v7) {
        v41 %= v7;
      }
    }
    else
    {
      v41 &= v7 - 1;
    }
    std::vector<int>::pointer v39 = (float32x2_t **)((char *)*v5 + 8 * v41);
  }
  *std::vector<int>::pointer v39 = j;
LABEL_88:
  float64x2_t v5[3] = (char *)v5[3] + 1;
  int v16 = *v10;
LABEL_89:
  j[3].i32[0] = v11;
  unint64_t v42 = (unint64_t)v16[2];
  uint64_t v43 = (float32x2_t *)v16[1];
  if ((unint64_t)v43 >= v42)
  {
    uint64_t v45 = ((char *)v43 - (unsigned char *)*v16) >> 3;
    if ((unint64_t)(v45 + 1) >> 61) {
      abort();
    }
    uint64_t v46 = v42 - (void)*v16;
    uint64_t v47 = v46 >> 2;
    if (v46 >> 2 <= (unint64_t)(v45 + 1)) {
      uint64_t v47 = v45 + 1;
    }
    if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v48 = v47;
    }
    if (v48) {
      std::vector<int> v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(v16 + 2), v48);
    }
    else {
      std::vector<int> v49 = 0;
    }
    float64x2_t v50 = (float32x2_t *)&v49[8 * v45];
    long long v51 = &v49[8 * v48];
    *float64x2_t v50 = *a2;
    uint64_t v44 = v50 + 1;
    uint64_t v53 = (char *)*v16;
    uint64_t v52 = (char *)v16[1];
    if (v52 != *v16)
    {
      do
      {
        float32x2_t v54 = *(float32x2_t *)(v52 - 8);
        v52 -= 8;
        v50[-1] = v54;
        --v50;
      }
      while (v52 != v53);
      uint64_t v52 = (char *)*v16;
    }
    *int v16 = v50;
    v16[1] = v44;
    void v16[2] = v51;
    if (v52) {
      operator delete(v52);
    }
  }
  else
  {
    *uint64_t v43 = *a2;
    uint64_t v44 = v43 + 1;
  }
  v16[1] = v44;
  return v11;
}

uint64_t geom::internal::triangle_mesh_decimator<float>::triangle_mesh_decimator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEEC2ERKS4_((void *)(a1 + 8), a2 + 8);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 48), (const std::vector<unsigned int> *)(a2 + 48));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 72), (const std::vector<unsigned int> *)(a2 + 72));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 96), (const std::vector<unsigned int> *)(a2 + 96));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 120), (const std::vector<unsigned int> *)(a2 + 120));
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 192), (const std::vector<unsigned int> *)(a2 + 192));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 216), (const std::vector<unsigned int> *)(a2 + 216));
  geom::triangle_mesh_atlas::triangle_mesh_atlas((std::vector<unsigned int> *)(a1 + 240), (const std::vector<unsigned int> *)(a2 + 240));
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v5 = *(unsigned char **)(a2 + 360);
  float32x2_t v4 = *(unsigned char **)(a2 + 368);
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100]((void *)(a1 + 360), v4 - v5);
    unint64_t v7 = *(char **)(a1 + 368);
    memmove(v7, v5, v6);
    *(void *)(a1 + 368) = &v7[v6];
  }
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  std::vector<geom::internal::quadric>::__init_with_size[abi:nn180100]<geom::internal::quadric*,geom::internal::quadric*>((void *)(a1 + 384), *(_OWORD **)(a2 + 384), *(_OWORD **)(a2 + 392), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 392) - *(void *)(a2 + 384)) >> 4));
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2ERKS4_((void *)(a1 + 408), a2 + 408);
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::__init_with_size[abi:nn180100]<geom::indexed_priority_queue<unsigned int,double>::key*,geom::indexed_priority_queue<unsigned int,double>::key*>((char *)(a1 + 432), *(long long **)(a2 + 432), *(long long **)(a2 + 440), (uint64_t)(*(void *)(a2 + 440) - *(void *)(a2 + 432)) >> 4);
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 456), (const std::vector<unsigned int> *)(a2 + 456));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 480), (const std::vector<unsigned int> *)(a2 + 480));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 504), (const std::vector<unsigned int> *)(a2 + 504));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 528), (const std::vector<unsigned int> *)(a2 + 528));
  return a1;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = 0;
  *(_OWORD *)(a2 + 8) = 0u;
  *(void *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = 0;
  float32x2_t v4 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = v4;
  uint64_t v5 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = v5;
  size_t v6 = *(void *)(a1 + 96);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = v6;
  unint64_t v7 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = v7;
  uint8x8_t v8 = *(void *)(a1 + 112);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a2 + 112) = v8;
  unint64_t v9 = *(void *)(a1 + 120);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a2 + 120) = v9;
  unsigned int v10 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(void *)(a2 + 128) = v10;
  unint64_t v11 = *(void *)(a1 + 136);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a2 + 136) = v11;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(_DWORD *)(a2 + 32) = 0;
  LODWORD(v11) = *(_DWORD *)(a1 + 36);
  *(_DWORD *)(a1 + 36) = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = v11;
  LODWORD(v11) = *(_DWORD *)(a1 + 40);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = v11;
  char v12 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = v12;
  char v13 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = v13;
  unint64_t v14 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = v14;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a2 + 208) = 0;
  *(_OWORD *)(a2 + 192) = 0u;
  *(void *)(a1 + 232) = 0;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  *(void *)(a1 + 232) = *(void *)(a2 + 232);
  *(void *)(a2 + 232) = 0;
  *(_OWORD *)(a2 + 216) = 0u;
  geom::triangle_mesh_atlas::triangle_mesh_atlas((void *)(a1 + 240), a2 + 240);
  *(void *)(a1 + 376) = 0;
  *(_OWORD *)(a1 + 360) = 0u;
  float32x2_t v15 = *(void *)(a2 + 368);
  *(void *)(a1 + 360) = *(void *)(a2 + 360);
  *(void *)(a1 + 368) = v15;
  *(void *)(a1 + 376) = *(void *)(a2 + 376);
  *(void *)(a2 + 376) = 0;
  *(_OWORD *)(a2 + 360) = 0u;
  *(void *)(a1 + 400) = 0;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a2 + 384);
  *(void *)(a1 + 400) = *(void *)(a2 + 400);
  *(void *)(a2 + 400) = 0;
  *(_OWORD *)(a2 + 384) = 0u;
  *(void *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 408) = 0u;
  int v16 = *(void *)(a2 + 416);
  *(void *)(a1 + 408) = *(void *)(a2 + 408);
  *(void *)(a1 + 416) = v16;
  *(void *)(a1 + 424) = *(void *)(a2 + 424);
  *(void *)(a2 + 424) = 0;
  *(_OWORD *)(a2 + 408) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(void *)(a1 + 432) = *(void *)(a2 + 432);
  *(void *)(a2 + 432) = 0;
  uint64_t v17 = *(void *)(a1 + 440);
  *(void *)(a1 + 440) = *(void *)(a2 + 440);
  *(void *)(a2 + 440) = v17;
  uint64_t v18 = *(void *)(a1 + 448);
  *(void *)(a1 + 448) = *(void *)(a2 + 448);
  *(void *)(a2 + 448) = v18;
  unint64_t v19 = *(void *)(a1 + 456);
  *(void *)(a1 + 456) = *(void *)(a2 + 456);
  *(void *)(a2 + 456) = v19;
  float32x2_t v20 = *(void *)(a1 + 464);
  *(void *)(a1 + 464) = *(void *)(a2 + 464);
  *(void *)(a2 + 464) = v20;
  float v21 = *(void *)(a1 + 472);
  *(void *)(a1 + 472) = *(void *)(a2 + 472);
  *(void *)(a2 + 472) = v21;
  *(void *)(a1 + 496) = 0;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 480) = *(_OWORD *)(a2 + 480);
  *(void *)(a1 + 496) = *(void *)(a2 + 496);
  *(void *)(a2 + 496) = 0;
  *(_OWORD *)(a2 + 480) = 0u;
  *(void *)(a1 + 520) = 0;
  *(_OWORD *)(a1 + 504) = 0u;
  float v22 = *(void *)(a2 + 512);
  *(void *)(a1 + 504) = *(void *)(a2 + 504);
  *(void *)(a1 + 512) = v22;
  *(void *)(a1 + 520) = *(void *)(a2 + 520);
  *(void *)(a2 + 520) = 0;
  *(_OWORD *)(a2 + 504) = 0u;
  *(void *)(a1 + 544) = 0;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 528) = *(_OWORD *)(a2 + 528);
  *(void *)(a1 + 544) = *(void *)(a2 + 544);
  *(void *)(a2 + 544) = 0;
  *(_OWORD *)(a2 + 528) = 0u;
  return a1;
}

std::vector<unsigned int> *geom::triangle_mesh_atlas::triangle_mesh_atlas(std::vector<unsigned int> *this, const std::vector<unsigned int> *a2)
{
  this->__begin_ = 0;
  this->__end_ = 0;
  this->__end_cap_.__value_ = 0;
  begiunsigned __int16 n = a2->__begin_;
  std::vector<unsigned int>::pointer end = a2->__end_;
  size_t v6 = (char *)end - (char *)a2->__begin_;
  if (end != a2->__begin_)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](this, (char *)end - (char *)a2->__begin_);
    std::vector<unsigned int>::pointer v7 = this->__end_;
    memmove(v7, begin, v6);
    this->__end_ = (std::vector<unsigned int>::pointer)((char *)v7 + v6);
  }
  std::vector<double>::vector(&this[1].__begin_, (uint64_t)&a2[1]);
  std::vector<float>::vector(this + 2, a2 + 2);
  std::vector<float>::vector(this + 3, a2 + 3);
  std::vector<float>::vector(this + 4, a2 + 4);
  return this;
}

char *std::vector<unsigned char>::__vallocate[abi:nn180100](void *a1, size_t __sz)
{
  if ((__sz & 0x8000000000000000) != 0) {
    abort();
  }
  uint64_t result = (char *)operator new(__sz);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[__sz];
  return result;
}

void *std::vector<geom::internal::quadric>::__init_with_size[abi:nn180100]<geom::internal::quadric*,geom::internal::quadric*>(void *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    std::vector<geom::internal::quadric>::__vallocate[abi:nn180100](result, a4);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<geom::internal::quadric>,geom::internal::quadric*,geom::internal::quadric*,geom::internal::quadric*>((uint64_t)(v6 + 2), a2, a3, (_OWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

char *std::vector<geom::internal::quadric>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    abort();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::internal::quadric>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::internal::quadric>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(80 * a2);
}

_OWORD *std::__uninitialized_allocator_copy_impl[abi:nn180100]<std::allocator<geom::internal::quadric>,geom::internal::quadric*,geom::internal::quadric*,geom::internal::quadric*>(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t result = a4;
  while (a2 != a3)
  {
    *uint64_t result = *a2;
    result[1] = a2[1];
    result[2] = a2[2];
    result[3] = a2[3];
    result[4] = a2[4];
    result += 5;
    a2 += 5;
  }
  return result;
}

char *std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::__init_with_size[abi:nn180100]<geom::indexed_priority_queue<unsigned int,double>::key*,geom::indexed_priority_queue<unsigned int,double>::key*>(char *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    size_t v6 = result;
    uint64_t result = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE11__vallocateB8nn180100Em(result, a4);
    std::vector<unsigned int>::pointer v7 = (_OWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      long long v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void *geom::internal::triangle_mesh_decimator<float>::~triangle_mesh_decimator(void *a1)
{
  unint64_t v2 = (void *)a1[66];
  if (v2)
  {
    a1[67] = v2;
    operator delete(v2);
  }
  unsigned int v3 = (void *)a1[63];
  if (v3)
  {
    a1[64] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[60];
  if (v4)
  {
    a1[61] = v4;
    operator delete(v4);
  }
  uint64_t v5 = (void *)a1[57];
  if (v5)
  {
    a1[58] = v5;
    operator delete(v5);
  }
  size_t v6 = (void *)a1[54];
  if (v6)
  {
    a1[55] = v6;
    operator delete(v6);
  }
  std::vector<unsigned int>::pointer v7 = (void *)a1[51];
  if (v7)
  {
    a1[52] = v7;
    operator delete(v7);
  }
  long long v8 = (void *)a1[48];
  if (v8)
  {
    a1[49] = v8;
    operator delete(v8);
  }
  unint64_t v9 = (void *)a1[45];
  if (v9)
  {
    a1[46] = v9;
    operator delete(v9);
  }
  unsigned int v10 = (void *)a1[42];
  if (v10)
  {
    a1[43] = v10;
    operator delete(v10);
  }
  unint64_t v11 = (void *)a1[39];
  if (v11)
  {
    a1[40] = v11;
    operator delete(v11);
  }
  char v12 = (void *)a1[36];
  if (v12)
  {
    a1[37] = v12;
    operator delete(v12);
  }
  char v13 = (void *)a1[33];
  if (v13)
  {
    a1[34] = v13;
    operator delete(v13);
  }
  unint64_t v14 = (void *)a1[30];
  if (v14)
  {
    a1[31] = v14;
    operator delete(v14);
  }
  geom::triangle_mesh_connectivity::~triangle_mesh_connectivity((geom::triangle_mesh_connectivity *)(a1 + 4));
  float32x2_t v15 = (void *)a1[1];
  if (v15)
  {
    a1[2] = v15;
    operator delete(v15);
  }
  return a1;
}

uint64_t std::__optional_destruct_base<geom::triangle_mesh_connectivity const,false>::__optional_destruct_base[abi:nn180100]<geom::triangle_mesh_connectivity const&>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 16), (const std::vector<unsigned int> *)(a2 + 16));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 40), (const std::vector<unsigned int> *)(a2 + 40));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 64), (const std::vector<unsigned int> *)(a2 + 64));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 88), (const std::vector<unsigned int> *)(a2 + 88));
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 160), (const std::vector<unsigned int> *)(a2 + 160));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 184), (const std::vector<unsigned int> *)(a2 + 184));
  *(unsigned char *)(a1 + 208) = 1;
  return a1;
}

__n128 geom::triangle_mesh_atlas::triangle_mesh_atlas(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  __n128 result = *(__n128 *)(a2 + 96);
  *((__n128 *)a1 + 6) = result;
  a1[14] = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  return result;
}

uint64_t geom::internal::triangle_mesh_decimator<double>::triangle_mesh_decimator(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEEC2ERKS4_((void *)(a1 + 8), a2 + 8);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 48), (const std::vector<unsigned int> *)(a2 + 48));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 72), (const std::vector<unsigned int> *)(a2 + 72));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 96), (const std::vector<unsigned int> *)(a2 + 96));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 120), (const std::vector<unsigned int> *)(a2 + 120));
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 192), (const std::vector<unsigned int> *)(a2 + 192));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 216), (const std::vector<unsigned int> *)(a2 + 216));
  geom::triangle_mesh_atlas::triangle_mesh_atlas((std::vector<unsigned int> *)(a1 + 240), (const std::vector<unsigned int> *)(a2 + 240));
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 0;
  uint64_t v5 = *(unsigned char **)(a2 + 360);
  uint64_t v4 = *(unsigned char **)(a2 + 368);
  size_t v6 = v4 - v5;
  if (v4 != v5)
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100]((void *)(a1 + 360), v4 - v5);
    std::vector<unsigned int>::pointer v7 = *(char **)(a1 + 368);
    memmove(v7, v5, v6);
    *(void *)(a1 + 368) = &v7[v6];
  }
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  std::vector<geom::internal::quadric>::__init_with_size[abi:nn180100]<geom::internal::quadric*,geom::internal::quadric*>((void *)(a1 + 384), *(_OWORD **)(a2 + 384), *(_OWORD **)(a2 + 392), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 392) - *(void *)(a2 + 384)) >> 4));
  std::vector<geom::internal::triangle_mesh_decimator<double>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<double>::edge_cost>>::vector((void *)(a1 + 408), a2 + 408);
  *(void *)(a1 + 432) = 0;
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 448) = 0;
  std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::__init_with_size[abi:nn180100]<geom::indexed_priority_queue<unsigned int,double>::key*,geom::indexed_priority_queue<unsigned int,double>::key*>((char *)(a1 + 432), *(long long **)(a2 + 432), *(long long **)(a2 + 440), (uint64_t)(*(void *)(a2 + 440) - *(void *)(a2 + 432)) >> 4);
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 456), (const std::vector<unsigned int> *)(a2 + 456));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 480), (const std::vector<unsigned int> *)(a2 + 480));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 504), (const std::vector<unsigned int> *)(a2 + 504));
  std::vector<float>::vector((std::vector<unsigned int> *)(a1 + 528), (const std::vector<unsigned int> *)(a2 + 528));
  return a1;
}

void *std::vector<geom::internal::triangle_mesh_decimator<double>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<double>::edge_cost>>::vector(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v4 = *(const void **)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  int64_t v5 = v3 - *(void *)a2;
  if (v3 != *(void *)a2)
  {
    std::vector<geom::internal::triangle_mesh_decimator<double>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<double>::edge_cost>>::__vallocate[abi:nn180100](a1, 0xAAAAAAAAAAAAAAABLL * (v5 >> 4));
    size_t v6 = (char *)a1[1];
    memmove(v6, v4, v5);
    a1[1] = &v6[v5];
  }
  return a1;
}

char *std::vector<geom::internal::triangle_mesh_decimator<double>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<double>::edge_cost>>::__vallocate[abi:nn180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    abort();
  }
  __n128 result = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

void *std::vector<BOOL>::vector(void *a1, unint64_t a2, unsigned __int8 *a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<BOOL>::__vallocate[abi:nn180100](a1, a2);
    int v6 = *a3;
    unint64_t v7 = a1[1];
    unint64_t v8 = v7 + a2;
    a1[1] = v7 + a2;
    if (v7)
    {
      unint64_t v9 = v8 - 1;
      if (((v8 - 1) ^ (v7 - 1)) < 0x40)
      {
LABEL_10:
        uint64_t v13 = *a1 + 8 * (v7 >> 6);
        int v14 = v7 & 0x3F;
        if (v6) {
          std::__fill_n[abi:nn180100]<true,std::vector<BOOL>>(&v13, a2);
        }
        else {
          std::__fill_n[abi:nn180100]<false,std::vector<BOOL>>((uint64_t)&v13, a2);
        }
        return a1;
      }
    }
    else
    {
      unint64_t v9 = v8 - 1;
    }
    unint64_t v10 = v9 >> 6;
    if (v8 >= 0x41) {
      unint64_t v11 = v10;
    }
    else {
      unint64_t v11 = 0;
    }
    *(void *)(*a1 + 8 * v11) = 0;
    goto LABEL_10;
  }
  return a1;
}

uint64_t geom::triangle_mesh_atlas::operator=(uint64_t a1, uint64_t a2)
{
  return a1;
}

void geom::internal::compute_vertex_masks<float>(geom::triangle_mesh_half_edge_connectivity *this@<X0>, uint64_t *a2@<X1>, unsigned int **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v49 = *MEMORY[0x263EF8340];
  unint64_t v7 = *((void *)this + 6) - *((void *)this + 5);
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v8 = (v7 >> 2);
  *a5 = 0;
  if ((v7 >> 2))
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a5, (v7 >> 2));
    unint64_t v9 = (char *)a5[1];
    bzero(v9, (v7 >> 2));
    a5[1] = &v9[v8];
  }
  if ((v7 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v10 = 0;
    do
    {
      if (geom::triangle_mesh_half_edge_connectivity::is_boundary_vertex(this, v10))
      {
        *(unsigned char *)(*a5 + v10) = 1;
        geom::triangle_mesh_half_edge_connectivity::get_incident_boundary_half_edges_to_boundary_vertex(this, v10, v45);
        if (v45[0] == -1)
        {
          int v14 = -1;
          v48[0] = -1;
        }
        else
        {
          unint64_t face_and_face_vertex_for_half_edge = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v45[0]);
          if (v45[1] == -1)
          {
            uint64_t v13 = 0xFFFFFFFFLL;
          }
          else
          {
            unint64_t v12 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v45[1]);
            uint64_t v13 = 3 * v12 + BYTE4(v12);
          }
          uint64_t v15 = *((void *)this + 20);
          v48[0] = *(_DWORD *)(v15
                             + 4
                             * (3 * face_and_face_vertex_for_half_edge
                              + BYTE4(face_and_face_vertex_for_half_edge)));
          int v14 = *(_DWORD *)(v15 + 4 * v13);
        }
        uint64_t v16 = 0;
        v48[1] = v14;
        char v17 = 1;
        do
        {
          char v18 = v17;
          unint64_t v19 = v48[v16];
          uint64_t v20 = *((void *)this + 23);
          if (v19 >= (*((void *)this + 24) - v20) >> 2)
          {
            *(void *)uint64_t v45 = -1;
            uint64_t v22 = 0xFFFFFFFFLL;
          }
          else
          {
            unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, *(_DWORD *)(v20 + 4 * v19) / 3u, *(_DWORD *)(v20 + 4 * v19) % 3u);
            geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(this, half_edge_for_face_vertex, v45);
            uint64_t v22 = v45[0];
          }
          char v17 = 0;
          v47[v16] = *(_DWORD *)((unint64_t)v45 | (4 * (v10 == v22)));
          uint64_t v16 = 1;
        }
        while ((v18 & 1) != 0);
        uint64_t v23 = 0;
        uint64_t v24 = *a2;
        float32x4_t v25 = *(float32x4_t *)(*a2 + 16 * v10);
        char v26 = 1;
        while (1)
        {
          float32x4_t v27 = vsubq_f32(v25, *(float32x4_t *)(v24 + 16 * v47[v23]));
          float32x4_t v28 = vmulq_f32(v27, v27);
          *(float32x4_t *)&v45[4 * v23] = v27;
          float v29 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0];
          if (v29 <= 0.0) {
            break;
          }
          char v30 = v26;
          char v26 = 0;
          float v31 = v29;
          float32x2_t v32 = vrsqrte_f32((float32x2_t)LODWORD(v29));
          float32x2_t v33 = vmul_f32(v32, vrsqrts_f32((float32x2_t)LODWORD(v31), vmul_f32(v32, v32)));
          *(float32x4_t *)&v45[4 * v23] = vmulq_n_f32(v27, vmul_f32(v33, vrsqrts_f32((float32x2_t)LODWORD(v31), vmul_f32(v33, v33))).f32[0]);
          uint64_t v23 = 1;
          if ((v30 & 1) == 0)
          {
            float32x4_t v34 = vmulq_f32(*(float32x4_t *)v45, v46);
            if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0] >= -0.5)*(unsigned char *)(*a5 + v10) |= 2u; {
            break;
            }
          }
        }
      }
      ++v10;
    }
    while (v10 != v8);
  }
  if (((a4[7] - a4[6]) & 0x3FFFFFFFCLL) != 0 && ((*((void *)this + 6) - *((void *)this + 5)) & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v35 = 0;
    while (1)
    {
      int v36 = *(unsigned __int8 *)(*a4 + v35);
      if (v36 == 2) {
        break;
      }
      if ((v36 - 1) <= 1)
      {
        char v37 = 4;
        goto LABEL_30;
      }
LABEL_31:
      if (++v35 >= (unint64_t)((*((void *)this + 6) - *((void *)this + 5)) >> 2)) {
        goto LABEL_32;
      }
    }
    char v37 = 8;
LABEL_30:
    *(unsigned char *)(*a5 + v35) |= v37;
    goto LABEL_31;
  }
LABEL_32:
  uint64_t v38 = a3[1];
  if (v38)
  {
    std::vector<int>::pointer v39 = *a3;
    uint64_t v40 = 4 * (void)v38;
    do
    {
      unsigned int v41 = *v39++;
      *(unsigned char *)(*a5 + v41) |= 0x10u;
      v40 -= 4;
    }
    while (v40);
  }
}

void geom::internal::triangle_mesh_decimator<float>::initialize_quadrics(void *a1)
{
  uint64_t v83 = *MEMORY[0x263EF8340];
  unint64_t v1 = a1[10] - a1[9];
  unint64_t v2 = ((unint64_t)((uint64_t)(a1[7] - a1[6]) >> 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64;
  uint64_t v3 = a1 + 48;
  a1[49] = a1[48];
  unint64_t v4 = (v1 >> 2);
  std::vector<geom::internal::quadric>::resize(a1 + 48, v4);
  std::vector<int> __p = 0;
  long long v77 = 0;
  uint64_t v78 = 0;
  if ((v1 >> 2))
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, (v1 >> 2));
    int64_t v5 = (char *)v77;
    bzero(v77, 4 * v4);
    long long v77 = &v5[4 * v4];
  }
  if ((v1 & 0x3FFFFFFFCLL) != 0)
  {
    int v6 = (char *)a1[45];
    unint64_t v7 = (float *)__p;
    do
    {
      char v8 = *v6++;
      if ((v8 & 0xF) != 0) {
        float v9 = 1.0;
      }
      else {
        float v9 = 0.0;
      }
      *v7++ = v9;
      --v4;
    }
    while (v4);
  }
  uint64_t v64 = (v2 >> 1);
  if ((v2 >> 1))
  {
    uint64_t v10 = 0;
    while (1)
    {
      unint64_t v11 = (_DWORD *)(a1[6] + 4 * (3 * v10));
      uint64_t v13 = v11[1];
      v81[0] = *v11;
      uint64_t v12 = v81[0];
      v81[1] = v13;
      uint64_t v14 = a1[1];
      uint64_t v15 = (float32x4_t *)(v14 + 16 * v81[0]);
      unsigned int v82 = v11[2];
      uint64_t v16 = v82;
      uint64_t v71 = (float32x4_t *)(v14 + 16 * v13);
      uint64_t v73 = (float32x4_t *)(v14 + 16 * v82);
      float32x4_t v17 = geom::internal::compute_plane_from_triangle<float>(v15, v71, v73);
      uint64_t v18 = a1[48];
      unint64_t v19 = (float64x2_t *)(v18 + 80 * v12);
      uint64_t v20 = (float64x2_t *)(v18 + 80 * v13);
      float v21 = (float64x2_t *)(v18 + 80 * v16);
      float64x2_t v22 = vcvtq_f64_f32(vmul_n_f32(*(float32x2_t *)v17.f32, v17.f32[0]));
      float32x2_t v23 = (float32x2_t)vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
      float64x2_t v24 = vcvtq_f64_f32(vmul_n_f32(v23, v17.f32[0]));
      float64x2_t v25 = vaddq_f64(v19[1], v24);
      *unint64_t v19 = vaddq_f64(*v19, v22);
      v19[1] = v25;
      float64x2_t v26 = vaddq_f64(v20[1], v24);
      *uint64_t v20 = vaddq_f64(*v20, v22);
      v20[1] = v26;
      float64x2_t v27 = vaddq_f64(v21[1], v24);
      float64x2_t *v21 = vaddq_f64(*v21, v22);
      v21[1] = v27;
      *(int8x8_t *)&v24.f64[0] = vext_s8(*(int8x8_t *)v17.f32, (int8x8_t)v23, 4uLL);
      float64x2_t v28 = vcvtq_f64_f32(vmul_lane_f32(*(float32x2_t *)&v24.f64[0], *(float32x2_t *)v17.f32, 1));
      float64x2_t v29 = vcvtq_f64_f32(vmul_f32(*(float32x2_t *)&v24.f64[0], (float32x2_t)vrev64_s32((int32x2_t)v23)));
      float64x2_t v30 = vaddq_f64(v19[3], v29);
      void v19[2] = vaddq_f64(v19[2], v28);
      v19[3] = v30;
      float64x2_t v31 = vaddq_f64(v20[3], v29);
      void v20[2] = vaddq_f64(v20[2], v28);
      v20[3] = v31;
      float64x2_t v32 = vaddq_f64(v21[3], v29);
      v21[2] = vaddq_f64(v21[2], v28);
      v21[3] = v32;
      float32x4_t v67 = v17;
      float64x2_t v33 = vcvtq_f64_f32(vmul_laneq_f32(v23, v17, 3));
      void v19[4] = vaddq_f64(v19[4], v33);
      v20[4] = vaddq_f64(v20[4], v33);
      long long v21[4] = vaddq_f64(v21[4], v33);
      uint64_t v66 = v10;
      if (geom::triangle_mesh_half_edge_connectivity::is_boundary_face((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), v10))
      {
        break;
      }
LABEL_29:
      uint64_t v10 = v66 + 1;
      if (v66 + 1 == v64) {
        goto LABEL_30;
      }
    }
    uint64_t v34 = 0;
    v80[0] = *v15;
    v80[1] = *v71;
    v80[2] = *v73;
    uint64_t v35 = a1[45];
    v75[0] = (*(unsigned char *)(v35 + v12) & 0xF) != 0;
    v75[1] = (*(unsigned char *)(v35 + v13) & 0xF) != 0;
    v75[2] = (*(unsigned char *)(v35 + v16) & 0xF) != 0;
    while (1)
    {
      uint64_t v36 = v81[v34];
      float v37 = *((float *)__p + v36);
      if (!v75[v34]) {
        break;
      }
      uint64_t v38 = v34 + 1;
      if (v34 == 2) {
        unsigned __int8 v39 = 0;
      }
      else {
        unsigned __int8 v39 = v34 + 1;
      }
      if (v39 == 2) {
        unsigned __int8 v40 = 0;
      }
      else {
        unsigned __int8 v40 = v39 + 1;
      }
      if (!v75[v39])
      {
        uint64_t v52 = v40;
        if (v75[v40])
        {
          unsigned int v41 = (float32x4_t *)&v80[v34];
          float32x4_t v79 = vaddq_f32(v67, *v41);
          float64x2_t v72 = 0u;
          float64x2_t v74 = 0u;
          float64x2_t v69 = 0u;
          float64x2_t v70 = 0u;
          float64x2_t v68 = 0u;
          goto LABEL_27;
        }
        goto LABEL_24;
      }
      unsigned int v41 = (float32x4_t *)&v80[v34];
      float32x4_t v79 = vaddq_f32(v67, *v41);
      float32x4_t v42 = geom::internal::compute_plane_from_triangle<float>(v41, (float32x4_t *)&v80[v39], &v79);
      float32x2_t v43 = (float32x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL).u64[0];
      float64x2_t v44 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)vext_s8(*(int8x8_t *)v42.f32, (int8x8_t)v43, 4uLL), v42.f32[0]));
      float64x2_t v45 = vcvtq_f64_f32(vmul_lane_f32(v43, *(float32x2_t *)v42.f32, 1));
      float32x4_t v46 = vmulq_f32(v42, v42);
      v42.i32[1] = v43.i32[1];
      float64x2_t v47 = vcvt_hight_f64_f32(v46);
      float64x2_t v48 = vcvtq_f64_f32(*(float32x2_t *)v46.f32);
      float64x2_t v49 = vaddq_f64(v44, (float64x2_t)0);
      float64x2_t v50 = vaddq_f64(v45, (float64x2_t)0);
      float64x2_t v51 = vaddq_f64(vcvtq_f64_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v43), *(float32x2_t *)v42.f32)), (float64x2_t)0);
      uint64_t v52 = v40;
      if (v75[v40])
      {
        float64x2_t v72 = v50;
        float64x2_t v74 = v49;
        float64x2_t v69 = v47;
        float64x2_t v70 = v48;
        float64x2_t v68 = v51;
LABEL_27:
        float32x4_t v53 = geom::internal::compute_plane_from_triangle<float>(v41, (float32x4_t *)&v80[v52], &v79);
        float32x2_t v54 = (float32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
        float64x2_t v55 = vcvtq_f64_f32(vmul_n_f32((float32x2_t)vext_s8(*(int8x8_t *)v53.f32, (int8x8_t)v54, 4uLL), v53.f32[0]));
        float64x2_t v56 = vcvtq_f64_f32(vmul_lane_f32(v54, *(float32x2_t *)v53.f32, 1));
        float32x4_t v57 = vmulq_f32(v53, v53);
        v53.i32[1] = v54.i32[1];
        float64x2_t v58 = vcvtq_f64_f32(vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v54), *(float32x2_t *)v53.f32));
        float64x2_t v59 = vcvtq_f64_f32(*(float32x2_t *)v57.f32);
        float64x2_t v60 = vcvt_hight_f64_f32(v57);
        float64x2_t v49 = vaddq_f64(v74, v55);
        float64x2_t v50 = vaddq_f64(v72, v56);
        float64x2_t v51 = vaddq_f64(v68, v58);
        float64x2_t v47 = vaddq_f64(v69, v60);
        float64x2_t v48 = vaddq_f64(v70, v59);
      }
LABEL_28:
      uint64_t v61 = *v3 + 80 * v36;
      *(double *)uint64_t v61 = v37 * v48.f64[0] + *(double *)v61;
      *(float64x2_t *)(v61 + 8) = vaddq_f64(vmulq_n_f64(v49, v37), *(float64x2_t *)(v61 + 8));
      double v62 = vmuld_lane_f64(v37, v48, 1) + *(double *)(v61 + 32);
      *(double *)(v61 + 24) = v37 * v51.f64[0] + *(double *)(v61 + 24);
      *(double *)(v61 + 32) = v62;
      *(float64x2_t *)(v61 + 40) = vaddq_f64(vmulq_n_f64(v50, v37), *(float64x2_t *)(v61 + 40));
      double v63 = vmuld_lane_f64(v37, v51, 1) + *(double *)(v61 + 64);
      *(double *)(v61 + 56) = v37 * v47.f64[0] + *(double *)(v61 + 56);
      *(double *)(v61 + 64) = v63;
      *(double *)(v61 + 72) = vmuld_lane_f64(v37, v47, 1) + *(double *)(v61 + 72);
      uint64_t v34 = v38;
      if (v38 == 3) {
        goto LABEL_29;
      }
    }
    uint64_t v38 = v34 + 1;
LABEL_24:
    float64x2_t v49 = 0uLL;
    float64x2_t v50 = 0uLL;
    float64x2_t v48 = 0uLL;
    float64x2_t v47 = 0uLL;
    float64x2_t v51 = 0uLL;
    goto LABEL_28;
  }
LABEL_30:
  if (__p)
  {
    long long v77 = __p;
    operator delete(__p);
  }
}

void geom::internal::triangle_mesh_decimator<float>::initialize_edge_data(uint64_t a1)
{
  uint64_t v2 = (*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2;
  memset(v35, 0, sizeof(v35));
  *(_OWORD *)std::vector<int> __p = 0u;
  std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::reserve(__p, v2);
  std::vector<unsigned int>::resize((std::vector<int> *)((char *)v35 + 8), v2, &geom::indexed_priority_queue<unsigned int,double>::k_invalid_index);
  uint64_t v3 = (void **)(a1 + 432);
  long long v4 = *(_OWORD *)(a1 + 432);
  long long v5 = *(_OWORD *)__p;
  long long v6 = v35[0];
  *(_OWORD *)std::vector<int> __p = v4;
  *(void *)&v35[0] = *(void *)(a1 + 448);
  uint64_t v7 = *(void *)(a1 + 472);
  long long v8 = v35[1];
  long long v9 = *(_OWORD *)(a1 + 456);
  *(_OWORD *)(a1 + 432) = v5;
  *(_OWORD *)(a1 + 448) = v6;
  *(_OWORD *)((char *)v35 + 8) = v9;
  *((void *)&v35[1] + 1) = v7;
  *(_OWORD *)(a1 + 464) = v8;
  if ((void)v9)
  {
    *(void *)&v35[1] = v9;
    operator delete((void *)v9);
    uint64_t v10 = __p[0];
    if (!__p[0]) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v10 = (void *)v4;
  if ((void)v4)
  {
LABEL_3:
    __p[1] = v10;
    operator delete(v10);
  }
LABEL_4:
  unint64_t v11 = (char **)(a1 + 408);
  *(void *)(a1 + 416) = *(void *)(a1 + 408);
  std::vector<geom::internal::triangle_mesh_decimator<float>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<float>::edge_cost>>::reserve((void **)(a1 + 408), v2);
  if (v2)
  {
    unsigned int v16 = 0;
    do
    {
      geom::internal::triangle_mesh_decimator<float>::make_edge_cost((void *)a1, v16, (uint64_t)__p, INFINITY, v12, v13, v14, v15);
      float32x4_t v17 = *(_OWORD **)(a1 + 416);
      unint64_t v18 = *(void *)(a1 + 424);
      if ((unint64_t)v17 >= v18)
      {
        uint64_t v21 = ((char *)v17 - *v11) >> 5;
        unint64_t v22 = v21 + 1;
        if ((unint64_t)(v21 + 1) >> 59) {
          abort();
        }
        uint64_t v23 = v18 - (void)*v11;
        if (v23 >> 4 > v22) {
          unint64_t v22 = v23 >> 4;
        }
        if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v24 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v24 = v22;
        }
        if (v24) {
          float64x2_t v25 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1 + 424, v24);
        }
        else {
          float64x2_t v25 = 0;
        }
        float64x2_t v26 = &v25[32 * v21];
        long long v27 = v35[0];
        *(_OWORD *)float64x2_t v26 = *(_OWORD *)__p;
        *((_OWORD *)v26 + 1) = v27;
        float64x2_t v29 = *(char **)(a1 + 408);
        float64x2_t v28 = *(char **)(a1 + 416);
        float64x2_t v30 = v26;
        if (v28 != v29)
        {
          do
          {
            long long v31 = *((_OWORD *)v28 - 1);
            *((_OWORD *)v30 - 2) = *((_OWORD *)v28 - 2);
            *((_OWORD *)v30 - 1) = v31;
            v30 -= 32;
            v28 -= 32;
          }
          while (v28 != v29);
          float64x2_t v28 = *v11;
        }
        uint64_t v20 = v26 + 32;
        *(void *)(a1 + 408) = v30;
        *(void *)(a1 + 416) = v26 + 32;
        *(void *)(a1 + 424) = &v25[32 * v24];
        if (v28) {
          operator delete(v28);
        }
      }
      else
      {
        long long v19 = v35[0];
        _OWORD *v17 = *(_OWORD *)__p;
        v17[1] = v19;
        uint64_t v20 = v17 + 2;
      }
      *(void *)(a1 + 416) = v20;
      ++v16;
    }
    while (v16 != v2);
    int v32 = 0;
    uint64_t v33 = 0;
    do
    {
      LODWORD(__p[0]) = v32;
      __p[1] = *(void **)&(*v11)[v33];
      geom::indexed_priority_queue<unsigned int,double>::push_or_change_cost(v3, (unsigned int *)__p);
      v33 += 32;
      ++v32;
    }
    while (32 * v2 != v33);
  }
}

void *std::vector<geom::internal::quadric>::vector(void *a1, unint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    std::vector<geom::internal::quadric>::__vallocate[abi:nn180100](a1, a2);
    long long v4 = (char *)a1[1];
    size_t v5 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

uint64_t *std::__tree<unsigned int>::__emplace_hint_unique_key_args<unsigned int,unsigned int const&>(uint64_t **a1, uint64_t *a2, unsigned int *a3, _DWORD *a4)
{
  long long v6 = std::__tree<unsigned int>::__find_equal<unsigned int>(a1, a2, &v11, &v10, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    uint64_t v7 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v7 + 7) = *a4;
    _ZNSt3__16__treeINS_12__value_typeIjDv3_fEENS_19__map_value_compareIjS3_NS_4lessIjEELb1EEENS_9allocatorIS3_EEE16__insert_node_atEPNS_15__tree_end_nodeIPNS_16__tree_node_baseIPvEEEERSF_SF_(a1, (uint64_t)v11, v8, v7);
  }
  return v7;
}

uint64_t *std::__tree<unsigned int>::__find_equal<unsigned int>(void *a1, uint64_t *a2, uint64_t **a3, uint64_t *a4, unsigned int *a5)
{
  size_t v5 = a1 + 1;
  if (a1 + 1 == a2 || (v6 = *a5, unsigned int v7 = *((_DWORD *)a2 + 7), *a5 < v7))
  {
    long long v8 = (uint64_t *)*a2;
    if ((uint64_t *)*a1 == a2)
    {
      uint64_t v10 = a2;
LABEL_17:
      if (v8)
      {
        *a3 = v10;
        return v10 + 1;
      }
      else
      {
        *a3 = a2;
        return a2;
      }
    }
    if (v8)
    {
      long long v9 = (uint64_t *)*a2;
      do
      {
        uint64_t v10 = v9;
        long long v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      double v13 = a2;
      do
      {
        uint64_t v10 = (uint64_t *)v13[2];
        BOOL v14 = *v10 == (void)v13;
        double v13 = v10;
      }
      while (v14);
    }
    unsigned int v15 = *a5;
    if (*((_DWORD *)v10 + 7) < *a5) {
      goto LABEL_17;
    }
    uint64_t v16 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          float32x4_t v17 = (uint64_t *)v16;
          unsigned int v18 = *(_DWORD *)(v16 + 28);
          if (v15 >= v18) {
            break;
          }
          uint64_t v16 = *v17;
          size_t v5 = v17;
          if (!*v17) {
            goto LABEL_29;
          }
        }
        if (v18 >= v15) {
          break;
        }
        size_t v5 = v17 + 1;
        uint64_t v16 = v17[1];
      }
      while (v16);
    }
    else
    {
      float32x4_t v17 = a1 + 1;
    }
LABEL_29:
    *a3 = v17;
    return v5;
  }
  if (v7 >= v6)
  {
    *a3 = a2;
    *a4 = (uint64_t)a2;
    return a4;
  }
  uint64_t v11 = a2[1];
  if (v11)
  {
    float64x2_t v12 = (uint64_t *)a2[1];
    do
    {
      a4 = v12;
      float64x2_t v12 = (uint64_t *)*v12;
    }
    while (v12);
  }
  else
  {
    long long v19 = a2;
    do
    {
      a4 = (uint64_t *)v19[2];
      BOOL v14 = *a4 == (void)v19;
      long long v19 = a4;
    }
    while (!v14);
  }
  if (a4 != v5 && v6 >= *((_DWORD *)a4 + 7))
  {
    uint64_t v20 = *v5;
    if (*v5)
    {
      do
      {
        while (1)
        {
          uint64_t v21 = (uint64_t *)v20;
          unsigned int v22 = *(_DWORD *)(v20 + 28);
          if (v6 >= v22) {
            break;
          }
          uint64_t v20 = *v21;
          size_t v5 = v21;
          if (!*v21) {
            goto LABEL_48;
          }
        }
        if (v22 >= v6) {
          break;
        }
        size_t v5 = v21 + 1;
        uint64_t v20 = v21[1];
      }
      while (v20);
    }
    else
    {
      uint64_t v21 = a1 + 1;
    }
LABEL_48:
    *a3 = v21;
    return v5;
  }
  if (v11)
  {
    *a3 = a4;
  }
  else
  {
    *a3 = a2;
    return a2 + 1;
  }
  return a4;
}

void std::vector<geom::internal::quadric>::resize(uint64_t *a1, unint64_t a2)
{
  unint64_t v2 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 4);
  BOOL v3 = a2 >= v2;
  unint64_t v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<geom::internal::quadric>::__append(a1, v4);
  }
  else if (!v3)
  {
    a1[1] = *a1 + 80 * a2;
  }
}

float32x4_t geom::internal::compute_plane_from_triangle<float>(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3 = vsubq_f32(*a2, *a1);
  float32x4_t v4 = vsubq_f32(*a3, *a1);
  float32x4_t v5 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL), vnegq_f32(v3)), v4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL));
  float32x4_t v6 = vmulq_f32(v5, v5);
  float v7 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), v6)).f32[0];
  float32x4_t result = 0uLL;
  if (v7 > 0.0)
  {
    float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL);
    float v10 = v7;
    float32x2_t v11 = vrsqrte_f32((float32x2_t)LODWORD(v7));
    float32x2_t v12 = vmul_f32(v11, vrsqrts_f32((float32x2_t)LODWORD(v10), vmul_f32(v11, v11)));
    return vmulq_n_f32(v9, vmul_f32(v12, vrsqrts_f32((float32x2_t)LODWORD(v10), vmul_f32(v12, v12))).f32[0]);
  }
  return result;
}

void std::vector<geom::internal::quadric>::__append(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xCCCCCCCCCCCCCCCDLL * ((v6 - v7) >> 4) >= a2)
  {
    if (a2)
    {
      size_t v13 = 80 * ((80 * a2 - 80) / 0x50) + 80;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xCCCCCCCCCCCCCCCDLL * ((v7 - *a1) >> 4);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x333333333333333) {
      abort();
    }
    unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((v5 - *a1) >> 4);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x199999999999999) {
      unint64_t v11 = 0x333333333333333;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      float32x2_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::internal::quadric>>(v4, v11);
    }
    else {
      float32x2_t v12 = 0;
    }
    std::vector<int> __p = v12;
    uint64_t v16 = &v12[80 * v8];
    unsigned int v18 = &v12[80 * v11];
    size_t v14 = 80 * ((80 * a2 - 80) / 0x50) + 80;
    bzero(v16, v14);
    float32x4_t v17 = &v16[v14];
    std::vector<geom::internal::quadric>::__swap_out_circular_buffer(a1, &__p);
    if (v17 != v16) {
      float32x4_t v17 = &v16[(v17 - v16 - 80) % 0x50uLL];
    }
    if (__p) {
      operator delete(__p);
    }
  }
}

void std::vector<geom::internal::quadric>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<geom::internal::quadric>,std::reverse_iterator<geom::internal::quadric*>,std::reverse_iterator<geom::internal::quadric*>,std::reverse_iterator<geom::internal::quadric*>>((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 std::__uninitialized_allocator_move_if_noexcept[abi:nn180100]<std::allocator<geom::internal::quadric>,std::reverse_iterator<geom::internal::quadric*>,std::reverse_iterator<geom::internal::quadric*>,std::reverse_iterator<geom::internal::quadric*>>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  if (a3 != a5)
  {
    uint64_t v8 = a7 - 32;
    do
    {
      long long v9 = *(_OWORD *)(a3 - 80);
      a3 -= 80;
      *(_OWORD *)(v8 - 48) = v9;
      *(_OWORD *)(v8 - 32) = *(_OWORD *)(a3 + 16);
      *(_OWORD *)(v8 - 16) = *(_OWORD *)(a3 + 32);
      *(_OWORD *)uint64_t v8 = *(_OWORD *)(a3 + 48);
      __n128 result = *(__n128 *)(a3 + 64);
      *(__n128 *)(v8 + 16) = result;
      v8 -= 80;
      v7 -= 80;
    }
    while (a3 != a5);
  }
  return result;
}

void std::vector<geom::internal::triangle_mesh_decimator<float>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<float>::edge_cost>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 5)
  {
    if (a2 >> 59) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFE0];
    long long v9 = &v6[32 * v8];
    unint64_t v11 = (char *)*a1;
    unint64_t v10 = (char *)a1[1];
    float32x2_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v13;
        v12 -= 32;
        v10 -= 32;
      }
      while (v10 != v11);
      unint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void geom::internal::triangle_mesh_decimator<float>::make_edge_cost(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>, double a4@<D0>, float64x2_t a5@<Q4>, double a6@<D5>, float64x2_t a7@<Q6>, float64x2_t a8@<Q7>)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  *(void *)int v32 = -1;
  uint64_t v12 = a1[27];
  if (a2 >= (unint64_t)((a1[28] - v12) >> 2))
  {
    *(void *)int v32 = -1;
    uint64_t v14 = 0xFFFFFFFFLL;
    uint64_t v15 = 0xFFFFFFFFLL;
  }
  else
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), *(_DWORD *)(v12 + 4 * a2) / 3u, *(_DWORD *)(v12 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), half_edge_for_face_vertex, v32);
    uint64_t v15 = v32[0];
    uint64_t v14 = v32[1];
  }
  uint64_t v16 = a1[1];
  float32x4_t v17 = *(float32x4_t *)(v16 + 16 * v15);
  float32x4_t v18 = vsubq_f32(*(float32x4_t *)(v16 + 16 * v14), v17);
  float32x4_t v19 = vmulq_f32(v18, v18);
  float32x4_t v21 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1);
  float32x4_t v20 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2);
  v19.f32[0] = fabsf(vaddq_f32(v20, vaddq_f32(v19, v21)).f32[0]);
  v21.i32[0] = 730643660;
  if (v19.f32[0] <= 1.0e-12)
  {
    double v26 = 0.0;
  }
  else
  {
    uint64_t v22 = a1[48];
    uint64_t v23 = (float64x2_t *)(v22 + 80 * v15);
    unint64_t v24 = (float64x2_t *)(v22 + 80 * v14);
    float64x2_t v27 = vaddq_f64(*v23, *v24);
    float64x2_t v28 = vaddq_f64(v23[1], v24[1]);
    float64x2_t v29 = vaddq_f64(v23[2], v24[2]);
    float64x2_t v30 = vaddq_f64(v23[3], v24[3]);
    float64x2_t v25 = v24[4];
    float64x2_t v31 = vaddq_f64(v23[4], v25);
    geom::internal::triangle_mesh_decimator<float>::make_contracted_position(a1, a2, v27.f64, a4, v25, (float64x2_t)v21, (float64x2_t)v20, a5, a6, a7, a8);
    double v26 = v31.f64[1]
        + v29.f64[0] * v17.f32[1] * v17.f32[1]
        + v27.f64[0] * v17.f32[0] * v17.f32[0]
        + v30.f64[1] * v17.f32[2] * v17.f32[2]
        + (v28.f64[0] * v17.f32[0] * v17.f32[2]
         + v27.f64[1] * v17.f32[0] * v17.f32[1]
         + v29.f64[1] * v17.f32[1] * v17.f32[2]
         + v28.f64[1] * v17.f32[0]
         + v30.f64[0] * v17.f32[1]
         + v31.f64[0] * v17.f32[2])
        * 2.0;
    if (v26 < 0.0) {
      double v26 = 0.0;
    }
  }
  *(double *)a3 = v26;
  *(float32x4_t *)(a3 + 16) = v17;
}

double geom::indexed_priority_queue<unsigned int,double>::push_or_change_cost(void **a1, unsigned int *a2)
{
  uint64_t v4 = *a2;
  int64_t v5 = a1[3];
  uint64_t v6 = v5[v4];
  if (v6 == -1)
  {
    float32x4_t v21 = (char *)*a1;
    uint64_t v22 = a1[1];
    uint64_t v23 = (char *)v22 - (unsigned char *)*a1;
    uint64_t v24 = v23 >> 4;
    v5[v4] = v23 >> 4;
    uint64_t v25 = (uint64_t)(a1 + 2);
    unint64_t v26 = (unint64_t)a1[2];
    if ((unint64_t)v22 >= v26)
    {
      if ((unint64_t)(v24 + 1) >> 60) {
        abort();
      }
      uint64_t v35 = v26 - (void)v21;
      uint64_t v36 = v35 >> 3;
      if (v35 >> 3 <= (unint64_t)(v24 + 1)) {
        uint64_t v36 = v24 + 1;
      }
      if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v37 = v36;
      }
      if (v37) {
        uint64_t v38 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v25, v37);
      }
      else {
        uint64_t v38 = 0;
      }
      unsigned __int8 v39 = &v38[16 * v24];
      unsigned __int8 v40 = &v38[16 * v37];
      long long v11 = *(_OWORD *)a2;
      *(_OWORD *)unsigned __int8 v39 = *(_OWORD *)a2;
      float64x2_t v27 = v39 + 16;
      float32x4_t v42 = (char *)*a1;
      unsigned int v41 = (char *)a1[1];
      if (v41 != *a1)
      {
        do
        {
          long long v11 = *((_OWORD *)v41 - 1);
          *((_OWORD *)v39 - 1) = v11;
          v39 -= 16;
          v41 -= 16;
        }
        while (v41 != v42);
        unsigned int v41 = (char *)*a1;
      }
      *a1 = v39;
      a1[1] = v27;
      a1[2] = v40;
      if (v41) {
        operator delete(v41);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)a2;
      *uint64_t v22 = *(_OWORD *)a2;
      float64x2_t v27 = v22 + 1;
    }
    a1[1] = v27;
    if (v24)
    {
      float32x2_t v43 = (char *)*a1;
      *(void *)&long long v11 = *(void *)((char *)*a1 + (v23 & 0xFFFFFFFF0) + 8);
      do
      {
        unsigned int v44 = v24 - 1;
        uint64_t v45 = (v24 - 1) >> 1;
        float32x4_t v46 = &v43[16 * v45];
        double v48 = *((double *)v46 + 1);
        float64x2_t v47 = v46 + 8;
        double v49 = v48;
        if (v48 <= *(double *)&v11) {
          break;
        }
        float64x2_t v50 = &v43[16 * v24];
        int v51 = *(_DWORD *)v50;
        *(void *)&long long v11 = *((void *)v50 + 1);
        *(_DWORD *)float64x2_t v50 = *(_DWORD *)&v43[16 * v45];
        *(_DWORD *)&v43[16 * v45] = v51;
        *((double *)v50 + 1) = v49;
        *float64x2_t v47 = v11;
        uint64_t v52 = *(unsigned int *)v50;
        float32x4_t v53 = a1[3];
        v53[v52] = v24;
        v53[*(unsigned int *)&v43[16 * v45]] = v45;
        LODWORD(v24) = v44 >> 1;
      }
      while (v44 >= 2);
    }
  }
  else
  {
    uint64_t v7 = (char *)*a1;
    uint64_t v8 = (uint64_t)*a1 + 16 * v6;
    double v10 = *(double *)(v8 + 8);
    long long v9 = (void *)(v8 + 8);
    *(void *)&long long v11 = *((void *)a2 + 1);
    BOOL v12 = v10 < *(double *)&v11;
    if (v10 <= *(double *)&v11)
    {
      *(_DWORD *)uint64_t v8 = v4;
      *long long v9 = v11;
      if (v12)
      {
        unint64_t v28 = (unint64_t)((unsigned char *)a1[1] - v7) >> 4;
        while (1)
        {
          unsigned int v29 = (2 * v6) | 1;
          uint64_t v30 = v6;
          if (v29 < v28)
          {
            uint64_t v30 = v6;
            if (*(double *)&v7[16 * v29 + 8] < *(double *)&v11) {
              uint64_t v30 = (2 * v6) | 1u;
            }
          }
          unsigned int v31 = 2 * v6 + 2;
          if (v31 < v28)
          {
            *(void *)&long long v11 = *(void *)&v7[16 * v31 + 8];
            if (*(double *)&v11 < *(double *)&v7[16 * v30 + 8]) {
              uint64_t v30 = (2 * v6 + 2);
            }
          }
          if (v30 == v6) {
            break;
          }
          int v32 = &v7[16 * v6];
          uint64_t v33 = &v7[16 * v30];
          unsigned int v34 = *(_DWORD *)v32;
          *(void *)&long long v11 = *((void *)v32 + 1);
          *(_DWORD *)int v32 = *(_DWORD *)v33;
          *((void *)v32 + 1) = *((void *)v33 + 1);
          *(_DWORD *)uint64_t v33 = v34;
          *((void *)v33 + 1) = v11;
          v5[*(unsigned int *)v32] = v6;
          v5[*(unsigned int *)v33] = v30;
          uint64_t v6 = v30;
        }
      }
    }
    else
    {
      *(_DWORD *)uint64_t v8 = v4;
      *long long v9 = v11;
      if (v6)
      {
        do
        {
          unsigned int v13 = v6 - 1;
          uint64_t v14 = (v6 - 1) >> 1;
          uint64_t v15 = &v7[16 * v14];
          double v17 = *((double *)v15 + 1);
          uint64_t v16 = v15 + 8;
          *(double *)&long long v11 = v17;
          if (v17 <= *((double *)a2 + 1)) {
            break;
          }
          float32x4_t v18 = &v7[16 * v6];
          int v19 = *(_DWORD *)v18;
          uint64_t v20 = *((void *)v18 + 1);
          *(_DWORD *)float32x4_t v18 = *(_DWORD *)&v7[16 * v14];
          *((void *)v18 + 1) = v11;
          *(_DWORD *)&v7[16 * v14] = v19;
          *uint64_t v16 = v20;
          v5[*(unsigned int *)v18] = v6;
          v5[*(unsigned int *)&v7[16 * v14]] = v14;
          LODWORD(v6) = v13 >> 1;
        }
        while (v13 >= 2);
      }
    }
  }
  return *(double *)&v11;
}

void std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::reserve(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    uint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    long long v9 = &v6[16 * v8];
    long long v11 = (char *)*a1;
    double v10 = (char *)a1[1];
    BOOL v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      double v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void geom::internal::triangle_mesh_decimator<float>::make_contracted_position(void *a1, unsigned int a2, double *a3, double a4, float64x2_t a5, float64x2_t a6, float64x2_t a7, float64x2_t a8, double a9, float64x2_t a10, float64x2_t a11)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v15 = a1[27];
  if (a2 >= (unint64_t)((a1[28] - v15) >> 2))
  {
    v17.f64[0] = NAN;
    v17.f64[1] = NAN;
    *(void *)uint64_t v38 = -1;
    uint64_t v19 = 0xFFFFFFFFLL;
    uint64_t v18 = 0xFFFFFFFFLL;
  }
  else
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), *(_DWORD *)(v15 + 4 * a2) / 3u, *(_DWORD *)(v15 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), half_edge_for_face_vertex, v38);
    uint64_t v18 = v38[0];
    uint64_t v19 = v38[1];
  }
  uint64_t v20 = a1[1];
  float32x4_t v21 = (float32x2_t *)(v20 + 16 * v18);
  uint64_t v22 = a1[45];
  char v23 = *(unsigned char *)(v22 + v18);
  char v24 = *(unsigned char *)(v22 + v19);
  if ((v23 & 0x10) == 0 || (v24 & 0x10) != 0)
  {
    uint64_t v25 = (float32x2_t *)(v20 + 16 * v19);
    if ((v23 & 0x10) != 0 || (v24 & 0x10) == 0)
    {
      int v26 = v23 & 0xA;
      int v27 = v24 & 0xA;
      if (((v23 & 0xA) == 0 || v27 != 0) && ((v24 & 0xA) == 0 || v26 != 0))
      {
        int v30 = v24 & 5;
        int v31 = v23 & 5;
        if ((!v31 || v30) && (!v30 || v31))
        {
          if (*(_DWORD *)a1 >= 2u)
          {
            if (*(_DWORD *)a1 == 2)
            {
              geom::internal::quadric::cost<float>(a3, (float *)v21);
              geom::internal::quadric::cost<float>(a3, (float *)v25);
            }
          }
          else
          {
            if (v26) {
              BOOL v32 = v27 == 0;
            }
            else {
              BOOL v32 = 1;
            }
            char v33 = v32;
            if (v30) {
              BOOL v34 = v31 == 0;
            }
            else {
              BOOL v34 = 1;
            }
            if (v34 && (v33 & 1) != 0)
            {
              v17.f64[0] = fabs(a4);
              if (v17.f64[0] <= 1.0e-12)
              {
                geom::internal::triangle_mesh_decimator<float>::optimize_position_for_aspect_ratio(a1, a2);
              }
              else
              {
                v37.i32[2] = 0;
                v37.i64[0] = 0;
                if ((geom::internal::quadric::optimal_position<float>(a3, (uint64_t)&v37, v17, 1.0e-12, a6, a7.f64[0], a8, a9, a10) & 1) == 0)
                {
                  *(double *)v35.i64 = geom::internal::triangle_mesh_decimator<float>::optimize_position_for_area_and_volume_preservation(a1, a2, (uint64_t)a3);
                  int8x16_t v37 = v35;
                  v35.i32[0] = vextq_s8(v35, v35, 8uLL).u32[0];
                  int8x8_t v36 = vmvn_s8(vorr_s8((int8x8_t)vcltz_f32(*(float32x2_t *)v35.i8), (int8x8_t)vcgez_f32(*(float32x2_t *)v35.i8)));
                  if (v36.i8[4] & 1) != 0 || (v36.i8[0]) {
                    geom::internal::triangle_mesh_decimator<float>::optimize_position_for_area_and_volume_preservation(a1, a2, (uint64_t)a3);
                  }
                }
              }
            }
            else
            {
              geom::internal::quadric::compute_optimal_position_along_edge<float>((uint64_t)a3, v21, v25, v17.f64[0], a5, a6.f64[0], a7, a8.f64[0], a9, a10, a11);
            }
          }
        }
      }
    }
  }
}

double geom::internal::quadric::cost<float>(double *a1, float *a2)
{
  double v2 = *a2;
  double v3 = a2[1];
  double v4 = a2[2];
  double result = a1[9]
         + a1[4] * v3 * v3
         + *a1 * v2 * v2
         + a1[7] * v4 * v4
         + (a1[2] * v2 * v4 + a1[1] * v2 * v3 + a1[5] * v3 * v4 + a1[3] * v2 + a1[6] * v3 + a1[8] * v4) * 2.0;
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

double geom::internal::quadric::compute_optimal_position_along_edge<float>(uint64_t a1, float32x2_t *a2, float32x2_t *a3, double a4, float64x2_t a5, double a6, float64x2_t a7, double a8, double a9, float64x2_t a10, float64x2_t a11)
{
  float64x2_t v12 = vcvtq_f64_f32(vsub_f32(*a3, *a2));
  LODWORD(a5.f64[0]) = a2[1].i32[0];
  a7.f64[0] = (float)(a3[1].f32[0] - *(float *)a5.f64);
  *(void *)&v13.f64[0] = vdupq_laneq_s64(*(int64x2_t *)a1, 1).u64[0];
  v13.f64[1] = *(float64_t *)(a1 + 32);
  a10.f64[0] = *(float64_t *)(a1 + 16);
  a11.f64[0] = *(float64_t *)(a1 + 40);
  v11.f64[0] = *(float64_t *)(a1 + 56);
  double v14 = vmulq_f64(a10, a7).f64[0];
  a10.f64[1] = a11.f64[0];
  v15.f64[0] = v14 + vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, v12));
  float64x2_t v16 = vmulq_f64(v13, v12);
  v15.f64[1] = vmulq_f64(a11, a7).f64[0] + vaddvq_f64(v16);
  v16.f64[0] = vmulq_f64(a7, v11).f64[0] + vaddvq_f64(vmulq_f64(v12, a10));
  float64x2_t v19 = vmulq_f64(v12, v15);
  double v17 = -(vmulq_f64(a7, v16).f64[0] + vaddvq_f64(v19));
  *(float *)v19.f64 = v17;
  float v18 = fabsf(*(float *)v19.f64);
  v19.f64[0] = 0.5;
  if (v18 > 0.000001)
  {
    v19.f64[0] = *(float64_t *)(a1 + 64);
    v20.f64[0] = *(float64_t *)(a1 + 24);
    v20.f64[1] = *(float64_t *)(a1 + 48);
    a5.f64[0] = *(float *)a5.f64;
    float v21 = (vmulq_f64(a5, v16).f64[0]
         + vaddvq_f64(vmulq_f64(vcvtq_f64_f32(*a2), v15))
         + vmulq_f64(a7, v19).f64[0]
         + vaddvq_f64(vmulq_f64(v12, v20)))
        / v17;
    v19.f64[0] = 0.0;
    if (v21 >= 0.0)
    {
      if (v21 <= 1.0) {
        v19.f64[0] = v21;
      }
      else {
        v19.f64[0] = 1.0;
      }
    }
  }
  float v22 = 1.0 - v19.f64[0];
  float v23 = v19.f64[0];
  *(void *)&double result = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)a3->f32, v23), *(float32x4_t *)a2->f32, v22).u64[0];
  return result;
}

double geom::internal::triangle_mesh_decimator<float>::optimize_position_for_aspect_ratio(void *a1, unsigned int a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v4 = a1[1];
  int64_t v5 = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 4);
  v22[0] = a1 + 4;
  v22[1] = v4;
  char v27 = 0;
  if (geom::vertex_placement_constraint_factory<float>::add_shape_optimization((uint64_t)v22, a2, (uint64_t)v23) == 3)
  {
    if (v27 == 3)
    {
      int32x4_t v13 = vzip1q_s32(*(int32x4_t *)v23, v25);
      v29.columns[0] = (simd_float3)vzip1q_s32(v13, v24);
      v29.columns[2] = (simd_float3)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v23, v25), vdupq_laneq_s32(v24, 2));
      v29.columns[1] = (simd_float3)vzip2q_s32(v13, vdupq_lane_s32(*(int32x2_t *)v24.i8, 1));
      simd_float3x3 v30 = __invert_f3(v29);
      *(void *)&double result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v30.columns[0], v26.f32[0]), (float32x4_t)v30.columns[1], *(float32x2_t *)v26.f32, 1), (float32x4_t)v30.columns[2], v26, 2).u64[0];
    }
    else if (v27 == 2)
    {
      float32x4_t v20 = (float32x4_t)v24;
      float32x4_t v21 = *(float32x4_t *)v23;
      int32x4_t v14 = (int32x4_t)vmulq_f32(v21, v21);
      int8x16_t v15 = (int8x16_t)vmulq_f32(*(float32x4_t *)v23, (float32x4_t)v24);
      int8x16_t v16 = (int8x16_t)vmulq_f32(v20, v20);
      *(float32x2_t *)v15.i8 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v15, v15, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v16.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v15.i8, *(int32x2_t *)v16.i8)));
      *(int32x2_t *)v14.i8 = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v14, 2), vadd_f32(*(float32x2_t *)v14.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v14.i8, 1))), *(int32x2_t *)v15.i8);
      float32x2_t v19 = *(float32x2_t *)v26.f32;
      simd_float2x2 v17 = __invert_f2((simd_float2x2)v14);
      float32x2_t v18 = vmla_lane_f32(vmul_n_f32((float32x2_t)v17.columns[0], v19.f32[0]), (float32x2_t)v17.columns[1], v19, 1);
      *(void *)&double result = vmlaq_n_f32(vmulq_lane_f32(v20, v18, 1), v21, v18.f32[0]).u64[0];
    }
    else
    {
      double result = 0.0;
      if (v27 == 1)
      {
        float32x4_t v7 = vmulq_f32(*(float32x4_t *)v23, *(float32x4_t *)v23);
        *(void *)&double result = vmulq_n_f32(*(float32x4_t *)v23, v26.f32[0]/ vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]).u64[0];
      }
    }
  }
  else
  {
    uint64_t v8 = a1[27];
    if (a2 >= (unint64_t)((a1[28] - v8) >> 2))
    {
      uint64_t v10 = 0xFFFFFFFFLL;
      uint64_t v11 = 0xFFFFFFFFLL;
    }
    else
    {
      unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, *(_DWORD *)(v8 + 4 * a2) / 3u, *(_DWORD *)(v8 + 4 * a2) % 3u);
      geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v5, half_edge_for_face_vertex, v23);
      uint64_t v11 = v23[0];
      uint64_t v10 = v23[1];
    }
    v12.i64[0] = 0x3F0000003F000000;
    v12.i64[1] = 0x3F0000003F000000;
    *(void *)&double result = vmulq_f32(vaddq_f32(*(float32x4_t *)(a1[1] + 16 * v11), *(float32x4_t *)(a1[1] + 16 * v10)), v12).u64[0];
  }
  return result;
}

uint64_t geom::internal::quadric::optimal_position<float>(double *a1, uint64_t a2, float64x2_t a3, double a4, float64x2_t a5, double a6, float64x2_t a7, double a8, float64x2_t a9)
{
  double v9 = *a1;
  double v10 = a1[1];
  double v12 = a1[4];
  double v11 = a1[5];
  double v13 = *a1 * v12;
  double v14 = a1[7];
  double v15 = a1[2];
  double v16 = v10 * v11 * v15 + v13 * v14 + v10 * v15 * v11 + -(*a1 * v11) * v11 + -(v10 * v10) * v14 + -(v15 * v12) * v15;
  uint64_t v17 = 0;
  if (v16 > 0.0)
  {
    double v18 = 1.0 / v16;
    v19.f64[0] = (v12 * v14 - v11 * v11) * (1.0 / v16);
    v20.f64[0] = (v14 * -v10 + v15 * v11) * (1.0 / v16);
    a3.f64[0] = (v10 * v11 + -v15 * v12) * v18;
    double v21 = (v9 * v14 + -v15 * v15) * v18;
    a7.f64[0] = (v10 * v15 - *a1 * v11) * v18;
    a5.f64[0] = (v13 + -v10 * v10) * v18;
    double v22 = fabs(v10);
    double v23 = fabs(v15);
    double v24 = fabs(v9) + v22 + v23;
    double v25 = fabs(v11);
    double v26 = fabs(v12) + v22 + v25;
    if (v24 >= v26) {
      double v26 = v24;
    }
    double v27 = fabs(v14) + v25 + v23;
    if (v26 >= v27) {
      double v27 = v26;
    }
    double v28 = fabs(v20.f64[0]);
    double v29 = fabs(a3.f64[0]);
    double v30 = v29 + fabs(v19.f64[0]) + v28;
    double v31 = fabs(a7.f64[0]);
    double v32 = v31 + v28 + fabs(v21);
    if (v30 < v32) {
      double v30 = v32;
    }
    double v33 = fabs(a5.f64[0]) + v29 + v31;
    if (v30 < v33) {
      double v30 = v33;
    }
    double v34 = v27 * v30;
    if (v34 > 0.0 && v34 <= 1000000.0)
    {
      v19.f64[1] = v20.f64[0];
      v20.f64[1] = v21;
      v35.f64[0] = a1[3];
      a9.f64[0] = a1[8];
      v35.f64[1] = a1[6];
      double v36 = vmulq_f64(a3, a9).f64[0];
      a3.f64[1] = a7.f64[0];
      float v37 = v36 + vaddvq_f64(vmulq_f64(v19, v35));
      *(float *)&uint64_t v38 = -v37;
      float v39 = vmulq_f64(a7, a9).f64[0] + vaddvq_f64(vmulq_f64(v20, v35));
      float v40 = vmulq_f64(a5, a9).f64[0] + vaddvq_f64(vmulq_f64(a3, v35));
      *((float *)&v38 + 1) = -v39;
      *(float *)(a2 + 8) = -v40;
      *(void *)a2 = v38;
      return 1;
    }
  }
  return v17;
}

double geom::internal::triangle_mesh_decimator<float>::optimize_position_for_area_and_volume_preservation(void *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v6 = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 4);
  float32x4_t v7 = (geom::triangle_mesh_half_edge_connectivity *)a1[1];
  v24[0] = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 4);
  v24[1] = v7;
  unsigned __int8 v33 = 0;
  unint64_t v8 = a2;
  uint64_t v9 = a1[27];
  if (a2 < (unint64_t)((a1[28] - v9) >> 2))
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), *(_DWORD *)(v9 + 4 * a2) / 3u, *(_DWORD *)(v9 + 4 * a2) % 3u);
    if (geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v6, half_edge_for_face_vertex))
    {
      geom::vertex_placement_constraint_factory<float>::add_boundary_preservation(v24, a2, (uint64_t)v29);
      int v11 = v33;
      if (v33 > 2u) {
        goto LABEL_12;
      }
      double v12 = v24[0];
      uint64_t v13 = *((void *)v24[0] + 23);
      if (v8 >= (*((void *)v24[0] + 24) - v13) >> 2) {
        goto LABEL_11;
      }
      unsigned int v14 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v24[0], *(_DWORD *)(v13 + 4 * v8) / 3u, *(_DWORD *)(v13 + 4 * v8) % 3u);
      if (!geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v12, v14)) {
        goto LABEL_11;
      }
      long long v27 = 0u;
      long long v28 = 0u;
      float32x4_t v26 = 0u;
      float32x4_t v25 = 0uLL;
      v34.i64[0] = (uint64_t)&unk_26EA05610;
      v34.i64[1] = (uint64_t)&v26;
      float64x2_t v35 = &v25;
      double v36 = &v34;
      geom::vertex_placement_constraint_factory<float>::loop_edge_boundaries((uint64_t)v24, a2, (uint64_t)&v34);
LABEL_10:
      _ZNSt3__110__function12__value_funcIFvPKDv3_fEED2B8nn180100Ev(&v34);
      geom::vertex_placement_constraints<float>::add_objective_function((uint64_t)v29, &v26, &v25);
LABEL_11:
      int v11 = v33;
      goto LABEL_12;
    }
  }
  geom::vertex_placement_constraint_factory<float>::add_volume_preservation(v24, a2, (uint64_t)v29);
  int v11 = v33;
  if (v33 <= 2u)
  {
    *(uint64_t *)((char *)v34.i64 + 4) = 0;
    v34.i32[0] = 0;
    int v23 = 0;
    geom::internal::quadric::convert_to_quadratic_form<float>(a3, (uint64_t)&v26, (float64x2_t *)&v34, (float *)&v23, v15);
    float32x4_t v25 = vnegq_f32(v34);
    geom::vertex_placement_constraints<float>::add_objective_function((uint64_t)v29, &v26, &v25);
    int v11 = v33;
    if (v33 <= 2u)
    {
      long long v27 = 0u;
      long long v28 = 0u;
      float32x4_t v26 = 0u;
      float32x4_t v25 = 0uLL;
      v34.i64[0] = (uint64_t)&unk_26EA05710;
      v34.i64[1] = (uint64_t)&v26;
      float64x2_t v35 = &v25;
      double v36 = &v34;
      geom::vertex_placement_constraint_factory<float>::loop_edge_triangles(v24, a2, (uint64_t)&v34);
      goto LABEL_10;
    }
  }
LABEL_12:
  if (v11 == 3)
  {
    int32x4_t v16 = vzip1q_s32(*(int32x4_t *)v29, v31);
    v38.columns[0] = (simd_float3)vzip1q_s32(v16, v30);
    v38.columns[2] = (simd_float3)vzip1q_s32(vzip2q_s32(*(int32x4_t *)v29, v31), vdupq_laneq_s32(v30, 2));
    v38.columns[1] = (simd_float3)vzip2q_s32(v16, vdupq_lane_s32(*(int32x2_t *)v30.i8, 1));
    simd_float3x3 v39 = __invert_f3(v38);
    *(void *)&double result = vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v39.columns[0], v32.f32[0]), (float32x4_t)v39.columns[1], *(float32x2_t *)v32.f32, 1), (float32x4_t)v39.columns[2], v32, 2).u64[0];
  }
  else
  {
    uint64_t v18 = a1[27];
    if (v8 >= (a1[28] - v18) >> 2)
    {
      uint64_t v20 = 0xFFFFFFFFLL;
      uint64_t v21 = 0xFFFFFFFFLL;
    }
    else
    {
      unsigned int v19 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, *(_DWORD *)(v18 + 4 * v8) / 3u, *(_DWORD *)(v18 + 4 * v8) % 3u);
      geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v6, v19, v29);
      uint64_t v21 = v29[0];
      uint64_t v20 = v29[1];
    }
    v22.i64[0] = 0x3F0000003F000000;
    v22.i64[1] = 0x3F0000003F000000;
    *(void *)&double result = vmulq_f32(vaddq_f32(*(float32x4_t *)(a1[1] + 16 * v21), *(float32x4_t *)(a1[1] + 16 * v20)), v22).u64[0];
  }
  return result;
}

uint64_t geom::vertex_placement_constraint_factory<float>::add_shape_optimization(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  int64_t v5 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
  unint64_t v6 = a2;
  uint64_t v7 = *(void *)(*(void *)a1 + 184);
  unint64_t v8 = (*(void *)(*(void *)a1 + 192) - v7) >> 2;
  if (v8 <= a2)
  {
    *(void *)double v49 = -1;
  }
  else
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, *(_DWORD *)(v7 + 4 * a2) / 3u, *(_DWORD *)(v7 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v5, half_edge_for_face_vertex, v49);
    int64_t v5 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
    uint64_t v7 = *(void *)(*(void *)a1 + 184);
    unint64_t v8 = (*(void *)(*(void *)a1 + 192) - v7) >> 2;
  }
  if (v8 <= v6
    || (unsigned int v10 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, *(_DWORD *)(v7 + 4 * v6) / 3u, *(_DWORD *)(v7 + 4 * v6) % 3u), !geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v5, v10)))
  {
    int half_edge_face = -1;
    goto LABEL_16;
  }
  unsigned int v11 = *(_DWORD *)(*((void *)v5 + 23) + 4 * v6);
  unsigned int v12 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, v11 / 3, v11 % 3);
  int half_edge_face = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v5, v12);
  if (geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v5, v12))
  {
LABEL_16:
    __int32 v18 = -1;
    goto LABEL_17;
  }
  half_edge_twiunsigned __int16 n = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(v5, v12);
  int v15 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v5, half_edge_twin);
  uint64_t v16 = 0;
  uint64_t v17 = *(void *)(*(void *)a1 + 16) + 4 * (3 * v15);
  v44.i64[0] = *(void *)v17;
  v44.i32[2] = *(_DWORD *)(v17 + 8);
  while (1)
  {
    __int32 v18 = v44.i32[v16];
    if (v18 != v49[0] && v18 != v49[1]) {
      break;
    }
    if (++v16 == 3) {
      goto LABEL_16;
    }
  }
LABEL_17:
  uint64_t v20 = 0;
  uint64_t v21 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
  uint64_t v22 = *(void *)(*(void *)a1 + 16) + 4 * (3 * half_edge_face);
  v44.i64[0] = *(void *)v22;
  v44.i32[2] = *(_DWORD *)(v22 + 8);
  while (1)
  {
    __int32 v23 = v44.i32[v20];
    if (v23 != v49[0] && v23 != v49[1]) {
      break;
    }
    if (++v20 == 3)
    {
      __int32 v23 = -1;
      break;
    }
  }
  float32x4_t v43 = 0uLL;
  std::vector<int> __p = 0;
  unsigned int v41 = 0;
  uint64_t v42 = 0;
  geom::triangle_mesh_half_edge_connectivity::get_adjacent_vertices_to_vertex(v21, v49[0], (uint64_t)&__p);
  float32x4_t v25 = (unsigned int *)__p;
  float v26 = 0.0;
  float32x4_t v27 = 0uLL;
  if (__p != v41)
  {
    do
    {
      uint64_t v28 = *v25;
      if (v28 != v49[1])
      {
        float32x4_t v27 = vaddq_f32(*(float32x4_t *)(*(void *)(a1 + 8) + 16 * v28), v27);
        float32x4_t v43 = v27;
        float v26 = v26 + 1.0;
      }
      ++v25;
    }
    while (v25 != v41);
  }
  float32x4_t v38 = v27;
  float v39 = v26;
  geom::triangle_mesh_half_edge_connectivity::get_adjacent_vertices_to_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, v49[1], (uint64_t)&__p);
  double v29 = (unsigned int *)__p;
  if (__p == v41)
  {
    float v31 = v39;
  }
  else
  {
    float32x4_t v30 = v38;
    float v31 = v39;
    do
    {
      uint64_t v32 = *v29;
      if (v32 != v18 && v32 != v23 && v32 != v49[0])
      {
        float32x4_t v30 = vaddq_f32(*(float32x4_t *)(*(void *)(a1 + 8) + 16 * v32), v30);
        float32x4_t v43 = v30;
        float v31 = v31 + 1.0;
      }
      ++v29;
    }
    while (v29 != v41);
  }
  LODWORD(v35) = 0;
  *((float *)&v35 + 1) = v31;
  v44.i32[2] = 0;
  v44.i64[0] = LODWORD(v31);
  int v46 = 0;
  uint64_t v45 = v35;
  float v48 = v31;
  uint64_t v47 = 0;
  geom::vertex_placement_constraints<float>::add_objective_function(a3, &v44, &v43);
  uint64_t v36 = *(unsigned __int8 *)(a3 + 64);
  if (__p)
  {
    unsigned int v41 = (unsigned int *)__p;
    operator delete(__p);
  }
  return v36;
}

uint64_t geom::vertex_placement_constraints<float>::add_objective_function(uint64_t a1, float32x4_t *a2, float32x4_t *a3)
{
  int v3 = *(unsigned __int8 *)(a1 + 64);
  if (v3 == 2)
  {
    float32x4_t v9 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
    float32x4_t v10 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL);
    int32x4_t v11 = (int32x4_t)vmulq_f32(v9, v9);
    v11.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v11.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v11, 2), *(float32x2_t *)v11.i8)).u32[0];
    float32x2_t v12 = vrsqrte_f32((float32x2_t)v11.u32[0]);
    float32x2_t v13 = vmul_f32(v12, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v12, v12)));
    float32x4_t v14 = vmulq_n_f32(v10, vmul_f32(v13, vrsqrts_f32((float32x2_t)v11.u32[0], vmul_f32(v13, v13))).f32[0]);
    float32x4_t v15 = a2[1];
    float32x4_t v16 = a2[2];
    float32x4_t v17 = vmulq_n_f32(*a2, v14.f32[0]);
    float32x4_t v18 = *a3;
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
    {
      uint64_t v228 = a1;
      float32x4_t v204 = v14;
      float32x4_t v216 = v17;
      float32x4_t v180 = v16;
      float32x4_t v192 = v18;
      float32x4_t v175 = v15;
      int v146 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      float32x4_t v15 = v175;
      float32x4_t v16 = v180;
      float32x4_t v18 = v192;
      float32x4_t v14 = v204;
      float32x4_t v17 = v216;
      int v147 = v146;
      a1 = v228;
      if (v147)
      {
        _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
        float32x4_t v15 = v175;
        float32x4_t v16 = v180;
        float32x4_t v18 = v192;
        float32x4_t v14 = v204;
        float32x4_t v17 = v216;
        a1 = v228;
      }
    }
    float32x4_t v19 = vmlaq_lane_f32(v17, v15, *(float32x2_t *)v14.f32, 1);
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
    {
      uint64_t v229 = a1;
      float32x4_t v205 = v14;
      float32x4_t v217 = v19;
      float32x4_t v181 = v16;
      float32x4_t v193 = v18;
      int v148 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      float32x4_t v16 = v181;
      float32x4_t v18 = v193;
      float32x4_t v14 = v205;
      float32x4_t v19 = v217;
      int v149 = v148;
      a1 = v229;
      if (v149)
      {
        _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
        float32x4_t v16 = v181;
        float32x4_t v18 = v193;
        float32x4_t v14 = v205;
        float32x4_t v19 = v217;
        a1 = v229;
      }
    }
    float32x4_t v20 = vmlaq_laneq_f32(v19, v16, v14, 2);
    uint64_t v21 = *(unsigned __int8 *)(a1 + 64);
    if (v21 == 2)
    {
      float32x4_t v71 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
      float32x4_t v72 = vmulq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v71, (int32x4_t)v71), (int8x16_t)v71, 0xCuLL));
      float32x4_t v73 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), vaddq_f32(v72, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1)));
      float32x4_t v74 = vmulq_f32(v71, v71);
      float32x4_t v75 = vmulq_f32(v20, v20);
      if (vmulq_f32(v73, v73).f32[0] <= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                               * vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1))), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 2), v74))).f32[0]))return 0;
    }
    else if (v21 == 1)
    {
      float32x4_t v78 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
      float32x4_t v79 = vmulq_f32(v20, v20);
      float32x4_t v80 = vmulq_f32(v20, *(float32x4_t *)a1);
      float32x4_t v81 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v80, 2), vaddq_f32(v80, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v80.f32, 1)));
      if (vmulq_f32(v81, v81).f32[0] >= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                               * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 2), vaddq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).f32[0])))return 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 64)) {
        return 0;
      }
      float32x4_t v22 = vmulq_f32(v20, v20);
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]) <= 0.00001)return 0; {
    }
      }
    float32x4_t v76 = vmulq_f32(v14, v18);
    *(float32x4_t *)(a1 + 16 * v21) = v20;
    uint64_t v77 = *(unsigned __int8 *)(a1 + 64);
    *(_DWORD *)(a1 + 4 * v77 + 48) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1))).u32[0];
    *(unsigned char *)(a1 + 64) = v77 + 1;
    return 1;
  }
  if (v3 == 1)
  {
    float32x4_t v24 = *(float32x4_t *)a1;
    float v25 = COERCE_FLOAT(*(void *)(a1 + 8));
    float v26 = fabsf(v25);
    LODWORD(v27) = HIDWORD(*(void *)a1);
    float v28 = -v25;
    if (v26 <= 0.00000011921)
    {
      float32x4_t v29 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v27), (int32x4_t)v24);
    }
    else
    {
      v29.i32[0] = 0;
      v29.f32[1] = v28;
      v29.i64[1] = v24.u32[1];
    }
    int32x4_t v30 = (int32x4_t)vmulq_f32(v29, v29);
    v30.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v30, 2), vadd_f32(*(float32x2_t *)v30.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v30.i8, 1))).u32[0];
    float32x2_t v31 = vrsqrte_f32((float32x2_t)v30.u32[0]);
    float32x2_t v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(v31, v31)));
    float32x4_t v33 = vmulq_n_f32(v29, vmul_f32(v32, vrsqrts_f32((float32x2_t)v30.u32[0], vmul_f32(v32, v32))).f32[0]);
    if (v26 <= 0.00000011921)
    {
      float32x4_t v34 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v27), (int32x4_t)v24);
    }
    else
    {
      v34.i32[0] = 0;
      v34.f32[1] = v28;
      v34.i64[1] = v24.u32[1];
    }
    int32x4_t v35 = (int32x4_t)vmulq_f32(v34, v34);
    v35.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v35, 2), vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1))).u32[0];
    float32x2_t v36 = vrsqrte_f32((float32x2_t)v35.u32[0]);
    float32x2_t v37 = vmul_f32(v36, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v36, v36)));
    float32x4_t v38 = vmulq_n_f32(v34, vmul_f32(v37, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(v37, v37))).f32[0]);
    float32x4_t v39 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), (int8x16_t)v38, 0xCuLL), vnegq_f32(v24)), v38, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL));
    int8x16_t v40 = (int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39);
    int32x4_t v41 = (int32x4_t)vmulq_f32(v39, v39);
    v41.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v41.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v41, 2), *(float32x2_t *)v41.i8)).u32[0];
    *(float32x2_t *)v38.f32 = vrsqrte_f32((float32x2_t)v41.u32[0]);
    *(float32x2_t *)v38.f32 = vmul_f32(*(float32x2_t *)v38.f32, vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32)));
    LODWORD(v42) = vmul_f32(*(float32x2_t *)v38.f32, vrsqrts_f32((float32x2_t)v41.u32[0], vmul_f32(*(float32x2_t *)v38.f32, *(float32x2_t *)v38.f32))).u32[0];
    float32x4_t v43 = a2[1];
    float32x4_t v44 = a2[2];
    float32x4_t v45 = vmulq_n_f32(*a2, v33.f32[0]);
    float32x4_t v46 = *a3;
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
    {
      uint64_t v230 = a1;
      unint64_t v218 = a2;
      double v206 = a3;
      float32x4_t v182 = v45;
      float32x4_t v194 = v33;
      float v172 = v42;
      float32x4_t v176 = v46;
      float32x4_t v168 = v39;
      float32x4_t v170 = v44;
      float32x4_t v166 = v43;
      int8x16_t v167 = v40;
      int v150 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      float32x4_t v43 = v166;
      int8x16_t v40 = v167;
      float32x4_t v39 = v168;
      float32x4_t v44 = v170;
      float v42 = v172;
      float32x4_t v46 = v176;
      float32x4_t v45 = v182;
      float32x4_t v33 = v194;
      a3 = v206;
      a2 = v218;
      int v151 = v150;
      a1 = v230;
      if (v151)
      {
        _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
        float32x4_t v43 = v166;
        int8x16_t v40 = v167;
        float32x4_t v39 = v168;
        float32x4_t v44 = v170;
        float v42 = v172;
        float32x4_t v46 = v176;
        float32x4_t v45 = v182;
        float32x4_t v33 = v194;
        a3 = v206;
        a2 = v218;
        a1 = v230;
      }
    }
    float32x4_t v47 = vmlaq_lane_f32(v45, v43, *(float32x2_t *)v33.f32, 1);
    float32x4_t v48 = (float32x4_t)vextq_s8(v40, (int8x16_t)v39, 0xCuLL);
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
    {
      uint64_t v231 = a1;
      unint64_t v219 = a2;
      unsigned int v207 = a3;
      float32x4_t v183 = v47;
      float32x4_t v195 = v33;
      float v173 = v42;
      float32x4_t v177 = v46;
      float32x4_t v169 = v48;
      float32x4_t v171 = v44;
      int v152 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      float32x4_t v48 = v169;
      float32x4_t v44 = v171;
      float v42 = v173;
      float32x4_t v46 = v177;
      float32x4_t v47 = v183;
      float32x4_t v33 = v195;
      a3 = v207;
      a2 = v219;
      int v153 = v152;
      a1 = v231;
      if (v153)
      {
        _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
        float32x4_t v48 = v169;
        float32x4_t v44 = v171;
        float v42 = v173;
        float32x4_t v46 = v177;
        float32x4_t v47 = v183;
        float32x4_t v33 = v195;
        a3 = v207;
        a2 = v219;
        a1 = v231;
      }
    }
    float32x4_t v49 = vmlaq_laneq_f32(v47, v44, v33, 2);
    float32x4_t v50 = vmulq_n_f32(v48, v42);
    uint64_t v51 = *(unsigned __int8 *)(a1 + 64);
    if (v51 == 2)
    {
      float32x4_t v82 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
      float32x4_t v83 = vmulq_f32(v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), (int8x16_t)v82, 0xCuLL));
      float32x4_t v84 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1)));
      float32x4_t v85 = vmulq_f32(v82, v82);
      float32x4_t v86 = vmulq_f32(v49, v49);
      if (vmulq_f32(v84, v84).f32[0] > (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                              * vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v86, 2), vaddq_f32(v86, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v86.f32, 1))), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v85.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v85, 2), v85))).f32[0]))goto LABEL_47;
    }
    else
    {
      if (v51 != 1)
      {
        if (*(unsigned char *)(a1 + 64)) {
          goto LABEL_30;
        }
        float32x4_t v52 = vmulq_f32(v49, v49);
        if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v52, 2), vaddq_f32(v52, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v52.f32, 1))).f32[0]) <= 0.00001)goto LABEL_30; {
LABEL_47:
        }
        float32x4_t v87 = vmulq_f32(v33, v46);
        *(float32x4_t *)(a1 + 16 * v51) = v49;
        uint64_t v88 = *(unsigned __int8 *)(a1 + 64);
        *(_DWORD *)(a1 + 4 * v88 + 48) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 2), vaddq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1))).u32[0];
        *(unsigned char *)(a1 + 64) = v88 + 1;
        int v53 = 1;
        goto LABEL_48;
      }
      float32x4_t v98 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
      float32x4_t v99 = vmulq_f32(v49, v49);
      float32x4_t v100 = vmulq_f32(v49, *(float32x4_t *)a1);
      float32x4_t v101 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v100, 2), vaddq_f32(v100, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v100.f32, 1)));
      if (vmulq_f32(v101, v101).f32[0] < (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                                * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1))).f32[0])))goto LABEL_47;
    }
LABEL_30:
    int v53 = 0;
LABEL_48:
    float32x4_t v89 = a2[1];
    float32x4_t v90 = a2[2];
    float32x4_t v91 = vmulq_n_f32(*a2, v50.f32[0]);
    float32x4_t v92 = *a3;
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
    {
      uint64_t v234 = a1;
      int v222 = v53;
      float32x4_t v198 = v91;
      float32x4_t v210 = v50;
      float32x4_t v186 = v92;
      float32x4_t v174 = v89;
      float32x4_t v178 = v90;
      int v158 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      float32x4_t v89 = v174;
      float32x4_t v90 = v178;
      float32x4_t v92 = v186;
      float32x4_t v91 = v198;
      float32x4_t v50 = v210;
      int v53 = v222;
      int v159 = v158;
      a1 = v234;
      if (v159)
      {
        _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
        float32x4_t v89 = v174;
        float32x4_t v90 = v178;
        float32x4_t v92 = v186;
        float32x4_t v91 = v198;
        float32x4_t v50 = v210;
        int v53 = v222;
        a1 = v234;
      }
    }
    float32x4_t v93 = vmlaq_lane_f32(v91, v89, *(float32x2_t *)v50.f32, 1);
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
    {
      uint64_t v235 = a1;
      int v223 = v53;
      float32x4_t v199 = v93;
      float32x4_t v211 = v50;
      float32x4_t v187 = v92;
      float32x4_t v179 = v90;
      int v160 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      float32x4_t v90 = v179;
      float32x4_t v92 = v187;
      float32x4_t v93 = v199;
      float32x4_t v50 = v211;
      int v53 = v223;
      int v161 = v160;
      a1 = v235;
      if (v161)
      {
        _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
        float32x4_t v90 = v179;
        float32x4_t v92 = v187;
        float32x4_t v93 = v199;
        float32x4_t v50 = v211;
        int v53 = v223;
        a1 = v235;
      }
    }
    float32x4_t v94 = vmlaq_laneq_f32(v93, v90, v50, 2);
    uint64_t v95 = *(unsigned __int8 *)(a1 + 64);
    if (v95 == 2)
    {
      float32x4_t v119 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
      float32x4_t v120 = vmulq_f32(v94, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v119, (int32x4_t)v119), (int8x16_t)v119, 0xCuLL));
      float32x4_t v121 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v120, 2), vaddq_f32(v120, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v120.f32, 1)));
      float32x4_t v122 = vmulq_f32(v119, v119);
      float32x4_t v123 = vmulq_f32(v94, v94);
      if (vmulq_f32(v121, v121).f32[0] > (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                                * vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v123, 2), vaddq_f32(v123, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v123.f32, 1))), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v122.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v122, 2), v122))).f32[0]))goto LABEL_69;
    }
    else
    {
      if (v95 != 1)
      {
        if (*(unsigned char *)(a1 + 64)) {
          goto LABEL_54;
        }
        float32x4_t v96 = vmulq_f32(v94, v94);
        if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 2), vaddq_f32(v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 1))).f32[0]) <= 0.00001)goto LABEL_54; {
LABEL_69:
        }
        float32x4_t v124 = vmulq_f32(v50, v92);
        *(float32x4_t *)(a1 + 16 * v95) = v94;
        uint64_t v125 = *(unsigned __int8 *)(a1 + 64);
        *(_DWORD *)(a1 + 4 * v125 + 48) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v124, 2), vaddq_f32(v124, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v124.f32, 1))).u32[0];
        *(unsigned char *)(a1 + 64) = v125 + 1;
        int v97 = 1;
        return v53 | v97;
      }
      float32x4_t v126 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
      float32x4_t v127 = vmulq_f32(v94, v94);
      float32x4_t v128 = vmulq_f32(v94, *(float32x4_t *)a1);
      float32x4_t v129 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v128, 2), vaddq_f32(v128, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.f32, 1)));
      if (vmulq_f32(v129, v129).f32[0] < (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                                * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 2), vaddq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 1))).f32[0])))goto LABEL_69;
    }
LABEL_54:
    int v97 = 0;
    return v53 | v97;
  }
  if (*(unsigned char *)(a1 + 64)) {
    return 0;
  }
  __int32 v4 = a3->i32[0];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v226 = a1;
    float64x2_t v214 = a2;
    int64x2_t v202 = a3;
    __int32 v190 = v4;
    int v142 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    __int32 v4 = v190;
    a3 = v202;
    a2 = v214;
    int v143 = v142;
    a1 = v226;
    if (v143)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      __int32 v4 = v190;
      a3 = v202;
      a2 = v214;
      a1 = v226;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v227 = a1;
    unint64_t v215 = a2;
    unint64_t v203 = a3;
    __int32 v191 = v4;
    int v144 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    __int32 v4 = v191;
    a3 = v203;
    a2 = v215;
    int v145 = v144;
    a1 = v227;
    if (v145)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      __int32 v4 = v191;
      a3 = v203;
      a2 = v215;
      a1 = v227;
    }
  }
  uint64_t v5 = *(unsigned __int8 *)(a1 + 64);
  if (v5 == 2)
  {
    float32x4_t v54 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
    float32x4_t v6 = *a2;
    float32x4_t v55 = vmulq_f32(*a2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL));
    float32x4_t v56 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1)));
    float32x4_t v57 = vmulq_f32(v54, v54);
    float32x4_t v58 = vmulq_f32(v6, v6);
    if (vmulq_f32(v56, v56).f32[0] > (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                            * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), v57)).f32[0])))goto LABEL_32;
  }
  else
  {
    if (v5 != 1)
    {
      if (*(unsigned char *)(a1 + 64)) {
        goto LABEL_10;
      }
      float32x4_t v6 = *a2;
      float32x4_t v7 = vmulq_f32(v6, v6);
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]) <= 0.00001)goto LABEL_10; {
LABEL_32:
      }
      *(float32x4_t *)(a1 + 16 * v5) = v6;
      uint64_t v59 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)(a1 + 4 * v59 + 48) = v4;
      *(unsigned char *)(a1 + 64) = v59 + 1;
      int v8 = 1;
      goto LABEL_33;
    }
    float32x4_t v65 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
    float32x4_t v66 = vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1));
    float32x4_t v67 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2);
    float32x4_t v6 = *a2;
    float32x4_t v68 = vmulq_f32(v6, v6);
    float32x4_t v69 = vmulq_f32(*(float32x4_t *)a1, *a2);
    float32x4_t v70 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v69, 2), vaddq_f32(v69, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v69.f32, 1)));
    if (vmulq_f32(v70, v70).f32[0] < (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                            * vmulq_f32(vaddq_f32(v67, v66), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1)))).f32[0]))goto LABEL_32;
  }
LABEL_10:
  int v8 = 0;
LABEL_33:
  __int32 v60 = a3->i32[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v232 = a1;
    __int8 v220 = a2;
    int32x2_t v208 = a3;
    int v196 = v8;
    __int32 v184 = v60;
    int v154 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    __int32 v60 = v184;
    int v8 = v196;
    a3 = v208;
    a2 = v220;
    int v155 = v154;
    a1 = v232;
    if (v155)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      __int32 v60 = v184;
      int v8 = v196;
      a3 = v208;
      a2 = v220;
      a1 = v232;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v233 = a1;
    __int8 v221 = a2;
    uint64_t v209 = a3;
    int v197 = v8;
    __int32 v185 = v60;
    int v156 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    __int32 v60 = v185;
    int v8 = v197;
    a3 = v209;
    a2 = v221;
    int v157 = v156;
    a1 = v233;
    if (v157)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      __int32 v60 = v185;
      int v8 = v197;
      a3 = v209;
      a2 = v221;
      a1 = v233;
    }
  }
  uint64_t v61 = *(unsigned __int8 *)(a1 + 64);
  if (v61 == 2)
  {
    float32x4_t v102 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
    float32x4_t v62 = a2[1];
    float32x4_t v103 = vmulq_f32(v62, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v102, (int32x4_t)v102), (int8x16_t)v102, 0xCuLL));
    float32x4_t v104 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v103, 2), vaddq_f32(v103, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.f32, 1)));
    float32x4_t v105 = vmulq_f32(v102, v102);
    float32x4_t v106 = vmulq_f32(v62, v62);
    if (vmulq_f32(v104, v104).f32[0] > (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                              * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), vaddq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 2), v105)).f32[0])))goto LABEL_58;
  }
  else
  {
    if (v61 != 1)
    {
      if (*(unsigned char *)(a1 + 64)) {
        goto LABEL_39;
      }
      float32x4_t v62 = a2[1];
      float32x4_t v63 = vmulq_f32(v62, v62);
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).f32[0]) <= 0.00001)goto LABEL_39; {
LABEL_58:
      }
      *(float32x4_t *)(a1 + 16 * v61) = v62;
      uint64_t v107 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)(a1 + 4 * v107 + 48) = v60;
      *(unsigned char *)(a1 + 64) = v107 + 1;
      int v64 = 1;
      goto LABEL_59;
    }
    float32x4_t v113 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
    float32x4_t v114 = vaddq_f32(v113, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 1));
    float32x4_t v115 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 2);
    float32x4_t v62 = a2[1];
    float32x4_t v116 = vmulq_f32(v62, v62);
    float32x4_t v117 = vmulq_f32(*(float32x4_t *)a1, v62);
    float32x4_t v118 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v117, 2), vaddq_f32(v117, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v117.f32, 1)));
    if (vmulq_f32(v118, v118).f32[0] < (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                              * vmulq_f32(vaddq_f32(v115, v114), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 2), vaddq_f32(v116, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v116.f32, 1)))).f32[0]))goto LABEL_58;
  }
LABEL_39:
  int v64 = 0;
LABEL_59:
  __int32 v108 = a3->i32[2];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v236 = a1;
    int8x8_t v224 = a2;
    int v200 = v8;
    __int32 v188 = v108;
    int v212 = v64;
    int v162 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    int v64 = v212;
    __int32 v108 = v188;
    int v8 = v200;
    a2 = v224;
    int v163 = v162;
    a1 = v236;
    if (v163)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      int v64 = v212;
      __int32 v108 = v188;
      int v8 = v200;
      a2 = v224;
      a1 = v236;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v237 = a1;
    int8x8_t v225 = a2;
    int v201 = v8;
    __int32 v189 = v108;
    int v213 = v64;
    int v164 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    int v64 = v213;
    __int32 v108 = v189;
    int v8 = v201;
    a2 = v225;
    int v165 = v164;
    a1 = v237;
    if (v165)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      int v64 = v213;
      __int32 v108 = v189;
      int v8 = v201;
      a2 = v225;
      a1 = v237;
    }
  }
  uint64_t v109 = *(unsigned __int8 *)(a1 + 64);
  if (v109 == 2)
  {
    float32x4_t v130 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1 + 16), *(int32x4_t *)(a1 + 16)), *(int8x16_t *)(a1 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a1)), *(float32x4_t *)(a1 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a1, *(int32x4_t *)a1), *(int8x16_t *)a1, 0xCuLL));
    float32x4_t v110 = a2[2];
    float32x4_t v131 = vmulq_f32(v110, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v130, (int32x4_t)v130), (int8x16_t)v130, 0xCuLL));
    float32x4_t v132 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v131, 2), vaddq_f32(v131, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v131.f32, 1)));
    float32x4_t v133 = vmulq_f32(v130, v130);
    float32x4_t v134 = vmulq_f32(v110, v110);
    if (vmulq_f32(v132, v132).f32[0] > (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                              * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v134, 2), vaddq_f32(v134, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v133.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v133, 2), v133)).f32[0])))goto LABEL_74;
  }
  else
  {
    if (v109 != 1)
    {
      if (*(unsigned char *)(a1 + 64)) {
        goto LABEL_65;
      }
      float32x4_t v110 = a2[2];
      float32x4_t v111 = vmulq_f32(v110, v110);
      if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v111, 2), vaddq_f32(v111, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v111.f32, 1))).f32[0]) <= 0.00001)goto LABEL_65; {
LABEL_74:
      }
      *(float32x4_t *)(a1 + 16 * v109) = v110;
      uint64_t v135 = *(unsigned __int8 *)(a1 + 64);
      *(_DWORD *)(a1 + 4 * v135 + 48) = v108;
      *(unsigned char *)(a1 + 64) = v135 + 1;
      int v112 = 1;
      return v8 | v64 | v112;
    }
    float32x4_t v136 = vmulq_f32(*(float32x4_t *)a1, *(float32x4_t *)a1);
    float32x4_t v137 = vaddq_f32(v136, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 1));
    float32x4_t v138 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v136, 2);
    float32x4_t v110 = a2[2];
    float32x4_t v139 = vmulq_f32(v110, v110);
    float32x4_t v140 = vmulq_f32(*(float32x4_t *)a1, v110);
    float32x4_t v141 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v140, 2), vaddq_f32(v140, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v140.f32, 1)));
    if (vmulq_f32(v141, v141).f32[0] < (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                              * vmulq_f32(vaddq_f32(v138, v137), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v139, 2), vaddq_f32(v139, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v139.f32, 1)))).f32[0]))goto LABEL_74;
  }
LABEL_65:
  int v112 = 0;
  return v8 | v64 | v112;
}

uint64_t geom::vertex_placement_constraint_factory<float>::add_boundary_preservation(geom::triangle_mesh_half_edge_connectivity **a1, unsigned int a2, uint64_t a3)
{
  v62[4] = *MEMORY[0x263EF8340];
  __int32 v4 = *a1;
  uint64_t v5 = *((void *)*a1 + 23);
  if (a2 >= (unint64_t)((*((void *)*a1 + 24) - v5) >> 2)
    || (unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*a1, *(_DWORD *)(v5 + 4 * a2) / 3u, *(_DWORD *)(v5 + 4 * a2) % 3u), !geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v4, half_edge_for_face_vertex)))
  {
    LOBYTE(v20) = *(unsigned char *)(a3 + 64);
    return v20;
  }
  float32x4_t v61 = 0uLL;
  int32x4_t v60 = 0uLL;
  v62[0] = &unk_26EA05580;
  v62[1] = &v61;
  unsigned int v62[2] = &v60;
  v62[3] = v62;
  geom::vertex_placement_constraint_factory<float>::loop_edge_boundaries((uint64_t)a1, a2, (uint64_t)v62);
  _ZNSt3__110__function12__value_funcIFvPKDv3_fEED2B8nn180100Ev(v62);
  float32x4_t v9 = v61;
  float32x4_t v10 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v60, v60), (int8x16_t)v60, 0xCuLL), vnegq_f32(v61)), (float32x4_t)v60, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v61, 0xCuLL));
  int8x16_t v11 = (int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10);
  float32x4_t v12 = vmulq_f32(v9, v9);
  float32x4_t v13 = vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1));
  float32x4_t v14 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    int8x16_t v53 = v11;
    float32x4_t v56 = v10;
    float32x4_t v50 = v14;
    float32x4_t v51 = v13;
    int v46 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    float32x4_t v14 = v50;
    float32x4_t v13 = v51;
    int8x16_t v11 = v53;
    float32x4_t v10 = v56;
    if (v46)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      float32x4_t v14 = v50;
      float32x4_t v13 = v51;
      int8x16_t v11 = v53;
      float32x4_t v10 = v56;
    }
  }
  float32x4_t v15 = (float32x4_t)vextq_s8(v11, (int8x16_t)v10, 0xCuLL);
  LODWORD(v16) = vaddq_f32(v14, v13).u32[0];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v54 = v15;
    float32x4_t v57 = v10;
    float v52 = v16;
    int v47 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    float v16 = v52;
    float32x4_t v15 = v54;
    float32x4_t v10 = v57;
    if (v47)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      float v16 = v52;
      float32x4_t v15 = v54;
      float32x4_t v10 = v57;
    }
  }
  float32x4_t v17 = vmulq_n_f32(v15, v16);
  uint64_t v18 = *(unsigned __int8 *)(a3 + 64);
  if (v18 == 2)
  {
    float32x4_t v22 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a3 + 16), *(int32x4_t *)(a3 + 16)), *(int8x16_t *)(a3 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a3)), *(float32x4_t *)(a3 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a3, *(int32x4_t *)a3), *(int8x16_t *)a3, 0xCuLL));
    float32x4_t v23 = vmulq_f32(v17, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL));
    float32x4_t v24 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1)));
    float32x4_t v25 = vmulq_f32(v22, v22);
    float32x4_t v26 = vmulq_f32(v17, v17);
    if (vmulq_f32(v24, v24).f32[0] <= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                             * vmulq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), v25))).f32[0]))goto LABEL_14;
    goto LABEL_13;
  }
  if (v18 != 1)
  {
    if (*(unsigned char *)(a3 + 64)) {
      goto LABEL_14;
    }
    float32x4_t v19 = vmulq_f32(v17, v17);
    if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0]) <= 0.00001)goto LABEL_14; {
    goto LABEL_13;
    }
  }
  float32x4_t v33 = vmulq_f32(*(float32x4_t *)a3, *(float32x4_t *)a3);
  float32x4_t v34 = vmulq_f32(v17, v17);
  float32x4_t v35 = vmulq_f32(v17, *(float32x4_t *)a3);
  float32x4_t v36 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)));
  if (vmulq_f32(v36, v36).f32[0] < (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                          * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))).f32[0])))
  {
LABEL_13:
    float32x4_t v27 = vmulq_f32(v10, v10);
    *(float32x4_t *)(a3 + 16 * v18) = v17;
    uint64_t v28 = *(unsigned __int8 *)(a3 + 64);
    *(float *)(a3 + 4 * v28 + 48) = -vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), v27)).f32[0];
    *(unsigned char *)(a3 + 64) = v28 + 1;
  }
LABEL_14:
  float32x4_t v29 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL), vnegq_f32(v61)), v15, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v61, (int32x4_t)v61), (int8x16_t)v61, 0xCuLL));
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    float32x4_t v58 = v29;
    int v48 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    float32x4_t v29 = v58;
    if (v48)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      float32x4_t v29 = v58;
    }
  }
  int8x16_t v30 = (int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    int8x16_t v55 = v30;
    float32x4_t v59 = v29;
    int v49 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    int8x16_t v30 = v55;
    float32x4_t v29 = v59;
    if (v49)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      int8x16_t v30 = v55;
      float32x4_t v29 = v59;
    }
  }
  float32x4_t v31 = (float32x4_t)vextq_s8(v30, (int8x16_t)v29, 0xCuLL);
  uint64_t v20 = *(unsigned __int8 *)(a3 + 64);
  if (v20 == 2)
  {
    float32x4_t v37 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a3 + 16), *(int32x4_t *)(a3 + 16)), *(int8x16_t *)(a3 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a3)), *(float32x4_t *)(a3 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a3, *(int32x4_t *)a3), *(int8x16_t *)a3, 0xCuLL));
    float32x4_t v38 = vmulq_f32(v29, v37);
    float32x4_t v39 = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), v38));
    float32x4_t v40 = vmulq_f32(v37, v37);
    float32x4_t v41 = vmulq_f32(v29, v29);
    if (vmulq_f32(v39, v39).f32[0] <= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                             * vmulq_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), v41)), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), v40))).f32[0]))
    {
      LOBYTE(v20) = 2;
      return v20;
    }
    goto LABEL_26;
  }
  if (v20 == 1)
  {
    float32x4_t v42 = vmulq_f32(*(float32x4_t *)a3, *(float32x4_t *)a3);
    float32x4_t v43 = vmulq_f32(v29, v29);
    float32x4_t v44 = vmulq_f32(v31, *(float32x4_t *)a3);
    float32x4_t v45 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1)));
    if (vmulq_f32(v45, v45).f32[0] >= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                             * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), v43)).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0])))
    {
      LOBYTE(v20) = 1;
      return v20;
    }
    goto LABEL_26;
  }
  if (!*(unsigned char *)(a3 + 64))
  {
    float32x4_t v32 = vmulq_f32(v29, v29);
    if (sqrtf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), v32)).f32[0]) <= 0.00001)
    {
      LOBYTE(v20) = 0;
      return v20;
    }
LABEL_26:
    *(float32x4_t *)(a3 + 16 * v20) = v31;
    uint64_t v20 = *(unsigned __int8 *)(a3 + 64);
    *(_DWORD *)(a3 + 4 * v20 + 48) = 0;
    LOBYTE(v20) = v20 + 1;
    *(unsigned char *)(a3 + 64) = v20;
  }
  return v20;
}

uint64_t geom::vertex_placement_constraint_factory<float>::add_volume_preservation(geom::triangle_mesh_half_edge_connectivity **a1, unsigned int a2, uint64_t a3)
{
  unsigned char v26[4] = *MEMORY[0x263EF8340];
  float32x4_t v25 = 0uLL;
  int v24 = 0;
  v26[0] = &unk_26EA05690;
  v26[1] = &v25;
  void v26[2] = &v24;
  void v26[3] = v26;
  geom::vertex_placement_constraint_factory<float>::loop_edge_triangles(a1, a2, (uint64_t)v26);
  _ZNSt3__110__function12__value_funcIFvPKDv3_fEED2B8nn180100Ev(v26);
  int v4 = v24;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    int v22 = v4;
    int v20 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
    int v4 = v22;
    if (v20)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared = 1065348106;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared);
      int v4 = v22;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    int v23 = v4;
    int v21 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
    int v4 = v23;
    if (v21)
    {
      _ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared = 966766832;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared);
      int v4 = v23;
    }
  }
  uint64_t v5 = *(unsigned __int8 *)(a3 + 64);
  if (v5 == 2)
  {
    float32x4_t v8 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a3 + 16), *(int32x4_t *)(a3 + 16)), *(int8x16_t *)(a3 + 16), 0xCuLL), vnegq_f32(*(float32x4_t *)a3)), *(float32x4_t *)(a3 + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a3, *(int32x4_t *)a3), *(int8x16_t *)a3, 0xCuLL));
    float32x4_t v6 = v25;
    float32x4_t v9 = vmulq_f32(v25, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL));
    float32x4_t v10 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v9, 2), vaddq_f32(v9, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 1)));
    float32x4_t v11 = vmulq_f32(v8, v8);
    float32x4_t v12 = vmulq_f32(v6, v6);
    if (vmulq_f32(v10, v10).f32[0] <= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_sin_alpha_squared
                                             * vmuls_n_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v12, 2), vaddq_f32(v12, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), v11)).f32[0])))
    {
      LOBYTE(v5) = 2;
      return v5;
    }
    goto LABEL_11;
  }
  if (v5 == 1)
  {
    float32x4_t v13 = vmulq_f32(*(float32x4_t *)a3, *(float32x4_t *)a3);
    float32x4_t v14 = vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1));
    float32x4_t v15 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2);
    float32x4_t v6 = v25;
    float32x4_t v16 = vmulq_f32(v6, v6);
    float32x4_t v17 = vmulq_f32(*(float32x4_t *)a3, v25);
    float32x4_t v18 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1)));
    if (vmulq_f32(v18, v18).f32[0] >= (float)(*(float *)&_ZZN4geom28vertex_placement_constraintsIfE14add_constraintERKDv3_ffE19k_cos_alpha_squared
                                             * vmulq_f32(vaddq_f32(v15, v14), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)))).f32[0]))
    {
      LOBYTE(v5) = 1;
      return v5;
    }
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a3 + 64))
  {
    float32x4_t v6 = v25;
    float32x4_t v7 = vmulq_f32(v6, v6);
    if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0]) <= 0.00001)
    {
      LOBYTE(v5) = 0;
      return v5;
    }
LABEL_11:
    *(float32x4_t *)(a3 + 16 * v5) = v6;
    uint64_t v5 = *(unsigned __int8 *)(a3 + 64);
    *(_DWORD *)(a3 + 4 * v5 + 48) = v4;
    LOBYTE(v5) = v5 + 1;
    *(unsigned char *)(a3 + 64) = v5;
  }
  return v5;
}

float geom::internal::quadric::convert_to_quadratic_form<float>(uint64_t a1, uint64_t a2, float64x2_t *a3, float *a4, int32x4_t a5)
{
  a5.i64[0] = *(void *)a1;
  v5.f64[0] = *(float64_t *)(a1 + 8);
  *(float *)a5.i32 = *(double *)a1;
  v6.f64[0] = *(float64_t *)(a1 + 16);
  v5.f64[1] = *(float64_t *)(a1 + 32);
  *(float32x2_t *)&v5.f64[0] = vcvt_f32_f64(v5);
  v6.f64[1] = *(float64_t *)(a1 + 40);
  *(float32x2_t *)&v6.f64[0] = vcvt_f32_f64(v6);
  float v7 = *(double *)(a1 + 56);
  *(_DWORD *)(a2 + 8) = LODWORD(v6.f64[0]);
  *(_DWORD *)(a2 + 24) = HIDWORD(v6.f64[0]);
  HIDWORD(v6.f64[0]) = vdup_lane_s32(*(int32x2_t *)&v6.f64[0], 1).u32[0];
  *(void *)a2 = vzip1q_s32(a5, (int32x4_t)v5).u64[0];
  *(float64_t *)(a2 + 16) = v5.f64[0];
  *(float *)(a2 + 40) = v7;
  *(float64_t *)(a2 + 32) = v6.f64[0];
  v8.f64[0] = *(float64_t *)(a1 + 24);
  v8.f64[1] = *(float64_t *)(a1 + 48);
  *(float32x2_t *)&v8.f64[0] = vcvt_f32_f64(v8);
  *(float *)v5.f64 = *(double *)(a1 + 64);
  LODWORD(v8.f64[1]) = LODWORD(v5.f64[0]);
  *a3 = v8;
  float result = *(double *)(a1 + 72);
  *a4 = result;
  return result;
}

void geom::vertex_placement_constraint_factory<float>::loop_edge_boundaries(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  float64x2_t v6 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
  uint64_t v7 = *(void *)(*(void *)a1 + 184);
  if (a2 >= (unint64_t)((*(void *)(*(void *)a1 + 192) - v7) >> 2))
  {
    *(void *)float32x4_t v31 = -1;
    unsigned int v9 = -1;
  }
  else
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, *(_DWORD *)(v7 + 4 * a2) / 3u, *(_DWORD *)(v7 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v6, half_edge_for_face_vertex, v31);
    float64x2_t v6 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
    unsigned int v9 = v31[0];
  }
  std::vector<int> __p = 0;
  float32x4_t v27 = 0;
  uint64_t v28 = 0;
  geom::triangle_mesh_connectivity::get_incident_edges_to_vertex(v6, v9, (uint64_t)&__p);
  uint64_t v10 = ((unint64_t)(v27 - (unsigned char *)__p) >> 2) - 1;
  if (*(_DWORD *)__p != a2) {
    uint64_t v10 = 0;
  }
  v30[0] = *((_DWORD *)__p + v10);
  geom::triangle_mesh_connectivity::get_incident_edges_to_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, v31[1], (uint64_t)&__p);
  uint64_t v11 = 0;
  uint64_t v12 = ((unint64_t)(v27 - (unsigned char *)__p) >> 2) - 1;
  if (*(_DWORD *)__p != a2) {
    uint64_t v12 = 0;
  }
  v30[1] = *((_DWORD *)__p + v12);
  unsigned int v13 = v31[0];
  unsigned int v14 = v31[1];
  v29[11] = v31[0];
  v29[12] = v31[1];
  int v25 = -1;
  char v15 = 1;
  uint64_t v16 = 0xFFFFFFFFLL;
  do
  {
    char v17 = v15;
    float32x4_t v18 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
    unint64_t v19 = v30[v11];
    uint64_t v20 = *(void *)(*(void *)a1 + 184);
    if (v19 >= (*(void *)(*(void *)a1 + 192) - v20) >> 2)
    {
      *(void *)float32x4_t v31 = -1;
      unsigned int v22 = -1;
    }
    else
    {
      unsigned int v21 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, *(_DWORD *)(v20 + 4 * v19) / 3u, *(_DWORD *)(v20 + 4 * v19) % 3u);
      geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v18, v21, v31);
      unsigned int v22 = v31[0];
    }
    if (v22 == v13 || v31[1] == v13)
    {
      uint64_t v16 = *(unsigned int *)((unint64_t)v31 | (4 * (v22 == v13)));
    }
    else if (v22 == v14 || v31[1] == v14)
    {
      int v25 = *(_DWORD *)((unint64_t)v31 | (4 * (v22 == v14)));
    }
    char v15 = 0;
    uint64_t v11 = 1;
  }
  while ((v17 & 1) != 0);
  v29[13] = v25;
  for (uint64_t i = 1; i != 4; ++i)
  {
    uint64_t v24 = *(void *)(a1 + 8);
    *(_OWORD *)float32x4_t v29 = *(_OWORD *)(v24 + 16 * v16);
    uint64_t v16 = v29[i + 10];
    *(_OWORD *)&unsigned int v29[4] = *(_OWORD *)(v24 + 16 * v16);
    _ZNKSt3__18functionIFvPKDv3_fEEclES3_(a3, (uint64_t)v29);
  }
  if (__p)
  {
    float32x4_t v27 = __p;
    operator delete(__p);
  }
}

void geom::triangle_mesh_connectivity::get_incident_edges_to_vertex(geom::triangle_mesh_half_edge_connectivity *a1, unsigned int a2, uint64_t a3)
{
  geom::triangle_mesh_half_edge_connectivity::get_incident_outgoing_half_edges_to_vertex(a1, a2, a3);
  float64x2_t v5 = *(_DWORD **)(a3 + 8);
  if (v5 != *(_DWORD **)a3)
  {
    BOOL is_boundary_half_edge = geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(a1, **(_DWORD **)a3);
    float64x2_t v5 = *(_DWORD **)(a3 + 8);
    if (is_boundary_half_edge)
    {
      unint64_t face_and_face_vertex_for_half_edge = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(a1, *(v5 - 1));
      unsigned __int8 v8 = BYTE4(face_and_face_vertex_for_half_edge) - 1;
      if ((face_and_face_vertex_for_half_edge & 0xFF00000000) == 0) {
        unsigned __int8 v8 = 2;
      }
      unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(a1, face_and_face_vertex_for_half_edge, v8);
      unsigned int v10 = half_edge_for_face_vertex;
      unint64_t v11 = *(void *)(a3 + 16);
      uint64_t v12 = *(unsigned int **)(a3 + 8);
      if ((unint64_t)v12 >= v11)
      {
        unsigned int v13 = *(unsigned int **)a3;
        uint64_t v14 = ((uint64_t)v12 - *(void *)a3) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          abort();
        }
        uint64_t v16 = v11 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          float32x4_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a3 + 16, v17);
          unsigned int v13 = *(unsigned int **)a3;
          uint64_t v12 = *(unsigned int **)(a3 + 8);
        }
        else
        {
          float32x4_t v18 = 0;
        }
        unint64_t v19 = &v18[4 * v14];
        uint64_t v20 = &v18[4 * v17];
        *(_DWORD *)unint64_t v19 = v10;
        float64x2_t v5 = v19 + 4;
        while (v12 != v13)
        {
          int v21 = *--v12;
          *((_DWORD *)v19 - 1) = v21;
          v19 -= 4;
        }
        *(void *)a3 = v19;
        *(void *)(a3 + 8) = v5;
        *(void *)(a3 + 16) = v20;
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *uint64_t v12 = half_edge_for_face_vertex;
        float64x2_t v5 = v12 + 1;
      }
      *(void *)(a3 + 8) = v5;
    }
  }
  if (v5 != *(_DWORD **)a3)
  {
    uint64_t v22 = 0;
    if ((unint64_t)(((uint64_t)v5 - *(void *)a3) >> 2) <= 1) {
      uint64_t v23 = 1;
    }
    else {
      uint64_t v23 = ((uint64_t)v5 - *(void *)a3) >> 2;
    }
    do
    {
      uint64_t v24 = *(unsigned int **)a3;
      unsigned int v25 = *(_DWORD *)(*(void *)a3 + 4 * v22);
      if (v25 == -1)
      {
        unsigned int v27 = -1;
      }
      else
      {
        unint64_t v26 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(a1, v25);
        unsigned int v27 = 3 * v26 + BYTE4(v26);
        uint64_t v24 = *(unsigned int **)a3;
      }
      v24[v22++] = *(_DWORD *)(*((void *)a1 + 20) + 4 * v27);
    }
    while (v23 != v22);
  }
}

uint64_t _ZNKSt3__18functionIFvPKDv3_fEEclES3_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x236E317D4);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA05580;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA05580;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float32x4_t _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EEclEOSA_(uint64_t a1, float32x4_t **a2)
{
  uint64_t v2 = *a2;
  *(float32x4_t *)*(void *)(a1 + 8) = vaddq_f32(vsubq_f32((*a2)[1], **a2), *(float32x4_t *)*(void *)(a1 + 8));
  int32x4_t v3 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v2, *(int32x4_t *)v2), *(int8x16_t *)v2, 0xCuLL), vnegq_f32(v2[1])), *v2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v2[1], (int32x4_t)v2[1]), (int8x16_t)v2[1], 0xCuLL));
  uint64_t v4 = *(float32x4_t **)(a1 + 16);
  float32x4_t result = vaddq_f32(*v4, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v3, v3), (int8x16_t)v3, 0xCuLL));
  *uint64_t v4 = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS_28vertex_placement_constraintsIfEEEUlPKDv3_fE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE11target_typeEv()
{
  return &_ZTIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_preservationEjRNS_28vertex_placement_constraintsIfEEEUlPKDv3_fE_;
}

void *_ZNSt3__110__function12__value_funcIFvPKDv3_fEED2B8nn180100Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA05610;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA05610;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EEclEOSA_(uint64_t a1, float32x4_t **a2, double a3, double a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t a9)
{
  *(void *)&double result = _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8nn180100IJRZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS3_28vertex_placement_constraintsIfEEEUlPKDv3_fE_SB_EEEvDpOT_((float32x4_t **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8, a9).u64[0];
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS_28vertex_placement_constraintsIfEEEUlPKDv3_fE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE11target_typeEv()
{
  return &_ZTIZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS_28vertex_placement_constraintsIfEEEUlPKDv3_fE_;
}

float32x4_t _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8nn180100IJRZNK4geom35vertex_placement_constraint_factoryIfE25add_boundary_optimizationEjRNS3_28vertex_placement_constraintsIfEEEUlPKDv3_fE_SB_EEEvDpOT_(float32x4_t **a1, float32x4_t **a2, double a3, double a4, double a5, double a6, double a7, float32x4_t a8, float32x4_t a9)
{
  _Q2 = **a2;
  float32x4_t v9 = (*a2)[1];
  _Q0 = vsubq_f32(v9, _Q2);
  int32x4_t v12 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q2, (int32x4_t)_Q2), (int8x16_t)_Q2, 0xCuLL), vnegq_f32(v9)), _Q2, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL));
  float32x4_t v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v12, v12), (int8x16_t)v12, 0xCuLL);
  _Q2.i32[0] = _Q0.i32[1];
  __asm { FMLA            S4, S2, V0.S[1] }
  *(float32x2_t *)a8.f32 = vneg_f32(*(float32x2_t *)_Q0.f32);
  a9.f32[0] = vmuls_lane_f32(a8.f32[0], *(float32x2_t *)_Q0.f32, 1);
  *(float32x2_t *)a8.f32 = vmul_laneq_f32(*(float32x2_t *)a8.f32, _Q0, 2);
  _Q4.i32[1] = a9.i32[0];
  _Q4.i64[1] = a8.i64[0];
  a9.i32[1] = vmlas_n_f32(COERCE_FLOAT(vmulq_f32(_Q0, _Q0).i32[2]), _Q0.f32[0], _Q0.f32[0]);
  a9.i32[2] = a8.i32[1];
  a8.i32[2] = vmlas_n_f32(vmuls_lane_f32(_Q0.f32[1], *(float32x2_t *)_Q0.f32, 1), _Q0.f32[0], _Q0.f32[0]);
  unint64_t v19 = *a1;
  float32x4_t v20 = vaddq_f32(**a1, _Q4);
  float32x4_t v21 = vaddq_f32((*a1)[1], a9);
  float32x4_t v22 = vaddq_f32((*a1)[2], a8);
  (*a1)->i32[2] = v20.i32[2];
  v19->i64[0] = v20.i64[0];
  v19[1].i32[2] = v21.i32[2];
  v19[1].i64[0] = v21.i64[0];
  v19[2].i32[2] = v22.i32[2];
  v19[2].i64[0] = v22.i64[0];
  uint64_t v23 = a1[1];
  int32x4_t v24 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), (int8x16_t)v13, 0xCuLL), vnegq_f32(_Q0)), v13, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
  float32x4_t result = vsubq_f32(*v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL));
  *uint64_t v23 = result;
  return result;
}

void geom::vertex_placement_constraint_factory<float>::loop_edge_triangles(geom::triangle_mesh_half_edge_connectivity **a1, unsigned int a2, uint64_t a3)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  float64x2_t v5 = *a1;
  unint64_t v6 = a2;
  uint64_t v7 = *((void *)*a1 + 23);
  unint64_t v8 = (*((void *)*a1 + 24) - v7) >> 2;
  if (v8 <= a2)
  {
    *(void *)float32x4_t v39 = -1;
  }
  else
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*a1, *(_DWORD *)(v7 + 4 * a2) / 3u, *(_DWORD *)(v7 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v5, half_edge_for_face_vertex, v39);
    float64x2_t v5 = *a1;
    uint64_t v7 = *((void *)*a1 + 23);
    unint64_t v8 = (*((void *)*a1 + 24) - v7) >> 2;
  }
  if (v8 <= v6
    || (unsigned int v10 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, *(_DWORD *)(v7 + 4 * v6) / 3u, *(_DWORD *)(v7 + 4 * v6) % 3u), !geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v5, v10)))
  {
    int half_edge_face = -1;
    goto LABEL_9;
  }
  unsigned int v11 = *(_DWORD *)(*((void *)v5 + 23) + 4 * v6);
  unsigned int v12 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, v11 / 3, v11 % 3);
  int half_edge_face = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v5, v12);
  if (geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v5, v12))
  {
LABEL_9:
    int v15 = -1;
    goto LABEL_10;
  }
  half_edge_twiunsigned __int16 n = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(v5, v12);
  int v15 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v5, half_edge_twin);
LABEL_10:
  float32x4_t v33 = 0;
  float32x4_t v34 = 0;
  uint64_t v35 = 0;
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(*a1, v39[0], (uint64_t)&v33);
  uint64_t v16 = v33;
  unint64_t v17 = v34;
  while (v16 != v17)
  {
    int v18 = *v16++;
    unint64_t v19 = a1[1];
    float32x4_t v20 = (unsigned int *)(*((void *)*a1 + 2) + 4 * (3 * v18));
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = v20[2];
    long long v36 = *((_OWORD *)v19 + v21);
    long long v37 = *((_OWORD *)v19 + v22);
    long long v38 = *((_OWORD *)v19 + v23);
    _ZNKSt3__18functionIFvPKDv3_fEEclES3_(a3, (uint64_t)&v36);
  }
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(*a1, v39[1], (uint64_t)&v33);
  int32x4_t v24 = v33;
  unsigned int v25 = v34;
  if (v33 != v34)
  {
    do
    {
      int v26 = *v24;
      if (*v24 != half_edge_face && v26 != v15)
      {
        uint64_t v28 = a1[1];
        float32x4_t v29 = (unsigned int *)(*((void *)*a1 + 2) + 4 * (3 * v26));
        uint64_t v30 = *v29;
        uint64_t v31 = v29[1];
        uint64_t v32 = v29[2];
        long long v36 = *((_OWORD *)v28 + v30);
        long long v37 = *((_OWORD *)v28 + v31);
        long long v38 = *((_OWORD *)v28 + v32);
        _ZNKSt3__18functionIFvPKDv3_fEEclES3_(a3, (uint64_t)&v36);
      }
      ++v24;
    }
    while (v24 != v25);
    int32x4_t v24 = v33;
  }
  if (v24)
  {
    float32x4_t v34 = v24;
    operator delete(v24);
  }
}

void _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA05690;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA05690;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EEclEOSA_(uint64_t a1, float32x4_t **a2)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8nn180100IJRZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_preservationEjRNS3_28vertex_placement_constraintsIfEEEUlPKDv3_fE_SB_EEEvDpOT_(a1 + 8, a2);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_preservationEjRNS_28vertex_placement_constraintsIfEEEUlPKDv3_fE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_preservationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE11target_typeEv()
{
  return &_ZTIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_preservationEjRNS_28vertex_placement_constraintsIfEEEUlPKDv3_fE_;
}

float _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8nn180100IJRZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_preservationEjRNS3_28vertex_placement_constraintsIfEEEUlPKDv3_fE_SB_EEEvDpOT_(uint64_t a1, float32x4_t **a2)
{
  uint64_t v2 = *a2;
  float32x4_t v3 = **a2;
  float32x4_t v4 = (*a2)[1];
  float32x4_t v5 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), (int8x16_t)v3, 0xCuLL);
  float32x4_t v6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), (int8x16_t)v4, 0xCuLL);
  float32x4_t v7 = vmlaq_f32(vmulq_f32(v6, vnegq_f32(v3)), v4, v5);
  float32x4_t v8 = (*a2)[2];
  float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL);
  int32x4_t v10 = (int32x4_t)vaddq_f32(vmlaq_f32(vmulq_f32(v5, vnegq_f32(v8)), v3, v9), vaddq_f32(v7, vmlaq_f32(vmulq_f32(v9, vnegq_f32(v4)), v8, v6)));
  *(float32x4_t *)*(void *)a1 = vaddq_f32(*(float32x4_t *)*(void *)a1, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL));
  float32x4_t v11 = vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL), v2[2]);
  unsigned int v12 = *(float **)(a1 + 8);
  float result = *v12
         + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1))).f32[0];
  *unsigned int v12 = result;
  return result;
}

void _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA05710;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA05710;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EEclEOSA_(uint64_t a1, float32x4_t **a2, double a3, double a4, double a5, double a6, double a7, int32x4_t a8)
{
  return _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8nn180100IJRZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_optimizationEjRNS3_28vertex_placement_constraintsIfEEEUlPKDv3_fE_SB_EEEvDpOT_((float32x4_t **)(a1 + 8), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_optimizationEjRNS_28vertex_placement_constraintsIfEEEUlPKDv3_fE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_optimizationEjRNS2_28vertex_placement_constraintsIfEEEUlPKDv3_fE_NS_9allocatorISB_EEFvSA_EE11target_typeEv()
{
  return &_ZTIZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_optimizationEjRNS_28vertex_placement_constraintsIfEEEUlPKDv3_fE_;
}

double _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8nn180100IJRZNK4geom35vertex_placement_constraint_factoryIfE23add_volume_optimizationEjRNS3_28vertex_placement_constraintsIfEEEUlPKDv3_fE_SB_EEEvDpOT_(float32x4_t **a1, float32x4_t **a2, double a3, double a4, double a5, double a6, double a7, int32x4_t a8)
{
  float32x4_t v8 = *a2;
  float32x4_t v9 = **a2;
  float32x4_t v10 = vsubq_f32((*a2)[1], v9);
  float32x4_t v11 = vsubq_f32((*a2)[2], v9);
  float32x4_t v12 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v11, (int32x4_t)v11), (int8x16_t)v11, 0xCuLL), vnegq_f32(v10)), v11, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL));
  float32x4_t v13 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL);
  unsigned __int32 v14 = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u32[0];
  *(float32x2_t *)v15.f32 = vmul_laneq_f32((float32x2_t)__PAIR64__(v12.u32[0], v14), v12, 2);
  *(int32x2_t *)a8.i8 = vdup_lane_s32(*(int32x2_t *)v15.f32, 1);
  int32x4_t v16 = (int32x4_t)vmulq_f32(v12, v12);
  float32x4_t v17 = (float32x4_t)vzip1q_s32(a8, v16);
  float32x2_t v18 = (float32x2_t)vrev64_s32(*(int32x2_t *)v12.f32);
  v12.i32[0] = v14;
  *(float32x2_t *)v12.f32 = vmul_f32(v18, *(float32x2_t *)v12.f32);
  v15.i64[1] = v12.i64[0];
  **a1 = vaddq_f32(**a1, v15);
  v17.i32[2] = v12.i32[1];
  (*a1)[1] = vaddq_f32((*a1)[1], v17);
  v12.i32[2] = v16.i32[1];
  (*a1)[2] = vaddq_f32((*a1)[2], v12);
  int32x4_t v19 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8[1], (int32x4_t)v8[1]), (int8x16_t)v8[1], 0xCuLL), vnegq_f32(*v8)), v8[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)v8, *(int32x4_t *)v8), *(int8x16_t *)v8, 0xCuLL));
  float32x4_t v20 = vmulq_f32(v8[2], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v19, v19), (int8x16_t)v19, 0xCuLL));
  *(void *)&double result = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).u64[0];
  *a1[1] = vmlaq_n_f32(*a1[1], v13, *(float *)&result);
  return result;
}

geom::triangle_mesh_connectivity *std::__optional_destruct_base<std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>,false>::~__optional_destruct_base[abi:nn180100](geom::triangle_mesh_connectivity *this)
{
  if (*((unsigned char *)this + 240))
  {
    if (*((unsigned char *)this + 232))
    {
      uint64_t v2 = (void *)*((void *)this + 26);
      if (v2)
      {
        *((void *)this + 27) = v2;
        operator delete(v2);
      }
    }
    geom::triangle_mesh_connectivity::~triangle_mesh_connectivity(this);
  }
  return this;
}

uint64_t geom::indexed_priority_queue<unsigned int,double>::pop(unsigned int **a1)
{
  unint64_t v1 = *a1;
  unint64_t v2 = (unint64_t)((char *)a1[1] - (char *)*a1) >> 4;
  if (!v2) {
    return 0xFFFFFFFFLL;
  }
  uint64_t v4 = *v1;
  if (v2 == 1)
  {
    a1[1] = v1;
  }
  else
  {
    unint64_t v6 = (v2 - 1);
    float32x4_t v7 = &v1[4 * v6];
    uint64_t v8 = *v7;
    unsigned int *v1 = v8;
    *((void *)v1 + 1) = *((void *)v7 + 1);
    a1[3][v8] = 0;
    std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::resize((uint64_t)a1, v6);
    uint64_t v9 = 0;
    float32x4_t v10 = *a1;
    unint64_t v11 = (unint64_t)((char *)a1[1] - (char *)*a1) >> 4;
    for (i = 0; ; uint64_t v9 = i)
    {
      unsigned int v13 = (2 * v9) | 1;
      unsigned __int32 v14 = (double *)&v10[4 * v9];
      if (v13 < v11)
      {
        uint64_t i = v9;
        if (*(double *)&v10[4 * v13 + 2] < v14[1]) {
          uint64_t i = (2 * v9) | 1u;
        }
      }
      unsigned int v15 = 2 * v9 + 2;
      if (v15 < v11 && *(double *)&v10[4 * v15 + 2] < *(double *)&v10[4 * i + 2]) {
        uint64_t i = (2 * v9 + 2);
      }
      if (i == v9) {
        break;
      }
      int32x4_t v16 = (double *)&v10[4 * i];
      int v17 = *(_DWORD *)v14;
      uint64_t v18 = *((void *)v14 + 1);
      *(_DWORD *)unsigned __int32 v14 = *(_DWORD *)v16;
      v14[1] = v16[1];
      *(_DWORD *)int32x4_t v16 = v17;
      *((void *)v16 + 1) = v18;
      int32x4_t v19 = a1[3];
      v19[*(unsigned int *)v14] = v9;
      v19[*(unsigned int *)v16] = i;
    }
  }
  a1[3][v4] = -1;
  return v4;
}

void std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::__append(void **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  float32x4_t v5 = v6;
  float32x4_t v7 = *(void **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 4)
  {
    if (a2)
    {
      unsigned __int32 v14 = &v7[2 * a2];
      do
      {
        *(_DWORD *)float32x4_t v7 = -1;
        v7[1] = 0x7FF0000000000000;
        v7 += 2;
      }
      while (v7 != v14);
      float32x4_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      abort();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unsigned int v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    }
    else {
      unsigned int v13 = 0;
    }
    unsigned int v15 = &v13[16 * v10];
    int32x4_t v16 = &v15[16 * a2];
    int v17 = v15;
    do
    {
      *(_DWORD *)int v17 = -1;
      *((void *)v17 + 1) = 0x7FF0000000000000;
      v17 += 16;
    }
    while (v17 != v16);
    uint64_t v18 = &v13[16 * v12];
    float32x4_t v20 = (char *)*a1;
    int32x4_t v19 = (char *)a1[1];
    if (v19 != *a1)
    {
      do
      {
        *((_OWORD *)v15 - 1) = *((_OWORD *)v19 - 1);
        v15 -= 16;
        v19 -= 16;
      }
      while (v19 != v20);
      int32x4_t v19 = (char *)*a1;
    }
    *a1 = v15;
    a1[1] = v16;
    a1[2] = v18;
    if (v19)
    {
      operator delete(v19);
    }
  }
}

BOOL geom::internal::triangle_mesh_decimator<float>::is_edge_collapse_geometrically_safe(void *a1, unsigned int a2)
{
  uint64_t v80 = *MEMORY[0x263EF8340];
  unint64_t v4 = a2;
  uint64_t v5 = a1[51] + 32 * a2;
  unint64_t v6 = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 4);
  uint64_t v7 = a1[27];
  if (a2 >= (unint64_t)((a1[28] - v7) >> 2))
  {
    *(void *)float32x4_t v78 = -1;
    unsigned int v10 = -1;
    unsigned int v9 = -1;
  }
  else
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), *(_DWORD *)(v7 + 4 * a2) / 3u, *(_DWORD *)(v7 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v6, half_edge_for_face_vertex, v78);
    unsigned int v9 = v78[0];
    unsigned int v10 = v78[1];
  }
  uint64_t v11 = (float32x4_t *)(v5 + 16);
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(v6, v9, (uint64_t)(a1 + 63));
  unint64_t v12 = (_DWORD *)a1[63];
  unsigned int v13 = (_DWORD *)a1[64];
  if (v12 != v13)
  {
    uint64_t v14 = a1[1];
    uint64_t v15 = a1[6];
    float32x4_t v16 = *v11;
    do
    {
      int v17 = (int *)(v15 + 4 * (3 * *v12));
      int v18 = *v17;
      *(_DWORD *)float32x4_t v79 = *v17;
      *(void *)&v79[4] = *(void *)(v17 + 1);
      int v19 = *(_DWORD *)&v79[4] == v9 ? 1 : 2;
      int v20 = v18 == v9 ? 0 : v19;
      int v21 = v20 == 2 ? 0 : v20 + 1;
      uint64_t v22 = *(unsigned int *)&v79[4 * v21];
      if (v22 != v10)
      {
        int v23 = (v20 - 1);
        int v24 = v18 == v9 ? 2 : v23;
        uint64_t v25 = *(unsigned int *)&v79[4 * v24];
        if (v25 != v10)
        {
          float32x4_t v26 = *(float32x4_t *)(v14 + 16 * v22);
          float32x4_t v27 = *(float32x4_t *)(v14 + 16 * v9);
          float32x4_t v28 = vsubq_f32(v26, v27);
          float32x4_t v29 = *(float32x4_t *)(v14 + 16 * v25);
          float32x4_t v30 = vsubq_f32(v29, v27);
          float32x4_t v31 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL), vnegq_f32(v28)), v30, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v28, (int32x4_t)v28), (int8x16_t)v28, 0xCuLL));
          float32x4_t v32 = vsubq_f32(v26, v16);
          float32x4_t v33 = vsubq_f32(v29, v16);
          float32x4_t v34 = vmulq_f32(v31, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v33, (int32x4_t)v33), (int8x16_t)v33, 0xCuLL), vnegq_f32(v32)), v33, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v32, (int32x4_t)v32), (int8x16_t)v32, 0xCuLL)));
          if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), v34)).f32[0] <= 0.0)return 0; {
        }
          }
      }
      ++v12;
    }
    while (v12 != v13);
  }
  unsigned int v36 = v78[0];
  uint64_t v35 = v78[1];
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(v6, v78[1], (uint64_t)(a1 + 63));
  long long v37 = (_DWORD *)a1[63];
  long long v38 = (_DWORD *)a1[64];
  if (v37 != v38)
  {
    uint64_t v39 = a1[1];
    uint64_t v40 = a1[6];
    float32x4_t v41 = *v11;
    do
    {
      float32x4_t v42 = (int *)(v40 + 4 * (3 * *v37));
      int v43 = *v42;
      *(_DWORD *)float32x4_t v79 = *v42;
      *(void *)&v79[4] = *(void *)(v42 + 1);
      int v44 = *(_DWORD *)&v79[4] == v35 ? 1 : 2;
      int v45 = v43 == v35 ? 0 : v44;
      int v46 = v45 == 2 ? 0 : v45 + 1;
      uint64_t v47 = *(unsigned int *)&v79[4 * v46];
      if (v47 != v36)
      {
        int v48 = (v45 - 1);
        int v49 = v43 == v35 ? 2 : v48;
        uint64_t v50 = *(unsigned int *)&v79[4 * v49];
        if (v50 != v36)
        {
          float32x4_t v51 = *(float32x4_t *)(v39 + 16 * v47);
          float32x4_t v52 = *(float32x4_t *)(v39 + 16 * v35);
          float32x4_t v53 = vsubq_f32(v51, v52);
          float32x4_t v54 = *(float32x4_t *)(v39 + 16 * v50);
          float32x4_t v55 = vsubq_f32(v54, v52);
          float32x4_t v56 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL), vnegq_f32(v53)), v55, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL));
          float32x4_t v57 = vsubq_f32(v51, v41);
          float32x4_t v58 = vsubq_f32(v54, v41);
          float32x4_t v59 = vmulq_f32(v56, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), (int8x16_t)v58, 0xCuLL), vnegq_f32(v57)), v58, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v57, (int32x4_t)v57), (int8x16_t)v57, 0xCuLL)));
          if (vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), v59)).f32[0] <= 0.0)return 0; {
        }
          }
      }
      ++v37;
    }
    while (v37 != v38);
  }
  uint64_t v60 = a1[45];
  int v61 = *(unsigned __int8 *)(v60 + v78[0]);
  int v62 = *(unsigned __int8 *)(v60 + v78[1]);
  if ((v61 & 0x10) != 0 && (v62 & 0x10) != 0) {
    return 0;
  }
  if (((a1[37] - a1[36]) & 0x3FFFFFFFCLL) == 0) {
    return 1;
  }
  if (v61 == 4 && v62 == 4)
  {
    uint64_t v65 = a1[27];
    if (v4 < (a1[28] - v65) >> 2)
    {
      unsigned int v66 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, *(_DWORD *)(v65 + 4 * v4) / 3u, *(_DWORD *)(v65 + 4 * v4) % 3u);
      if (geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v6, v66))
      {
        unsigned int v67 = *(_DWORD *)(a1[27] + 4 * v4);
        unsigned int v68 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, v67 / 3, v67 % 3);
        v77[0] = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v6, v68);
        if (geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v6, v68))
        {
          int half_edge_face = -1;
          uint64_t v70 = 1;
        }
        else
        {
          half_edge_twiunsigned __int16 n = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(v6, v68);
          int half_edge_face = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v6, half_edge_twin);
          uint64_t v70 = 2;
        }
        uint64_t v72 = 0;
        v77[1] = half_edge_face;
        uint64_t v73 = a1[6];
        uint64_t v74 = a1[45];
LABEL_55:
        uint64_t v75 = 0;
        uint64_t v76 = v73 + 4 * (3 * v77[v72]);
        *(void *)float32x4_t v79 = *(void *)v76;
        *(_DWORD *)&v79[8] = *(_DWORD *)(v76 + 8);
        while ((*(unsigned char *)(v74 + *(unsigned int *)&v79[v75]) & 8) == 0)
        {
          v75 += 4;
          if (v75 == 12)
          {
            if (++v72 != v70) {
              goto LABEL_55;
            }
            goto LABEL_59;
          }
        }
        return 0;
      }
    }
  }
LABEL_59:
  BOOL result = 1;
  if ((v61 & 5) != 0 && (v62 & 5) != 0) {
    return geom::triangle_mesh_atlas::edge_vertices_have_compatible_charts((geom::triangle_mesh_atlas *)(a1 + 30), v6, a2);
  }
  return result;
}

uint64_t geom::internal::triangle_mesh_decimator<float>::update_edge_uvs(uint64_t a1, unsigned int a2, float32x4_t *a3)
{
  uint64_t v77 = *MEMORY[0x263EF8340];
  if (*(unsigned char *)(a1 + 5))
  {
    uint64_t v6 = *(void *)(a1 + 216);
    if (a2 >= (unint64_t)((*(void *)(a1 + 224) - v6) >> 2))
    {
      *(void *)uint64_t v74 = -1;
      uint64_t v8 = 0xFFFFFFFFLL;
    }
    else
    {
      unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 32), *(_DWORD *)(v6 + 4 * a2) / 3u, *(_DWORD *)(v6 + 4 * a2) % 3u);
      geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices((geom::triangle_mesh_half_edge_connectivity *)(a1 + 32), half_edge_for_face_vertex, v74);
      uint64_t v8 = v74[0];
    }
    uint64_t v9 = *(void *)(a1 + 360);
    if ((*(unsigned char *)(v9 + v8) & 0xC) != 0 && (*(unsigned char *)(v9 + v74[1]) & 0xC) != 0) {
      return 0;
    }
  }
  memset(&v72, 0, sizeof(v72));
  float32x4_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v71 = 0;
  geom::triangle_mesh_atlas::edge_incident_wedges(a1 + 240, (geom::triangle_mesh_half_edge_connectivity *)(a1 + 32), a2, &v72, (uint64_t)&v69);
  unsigned int v67 = 0;
  uint64_t v68 = 0;
  std::vector<int> __p = 0;
  int64_t v11 = (char *)v72.__end_ - (char *)v72.__begin_;
  if (v72.__end_ == v72.__begin_)
  {
    uint64_t v10 = 1;
  }
  else
  {
    std::vector<double>::__vallocate[abi:nn180100](&__p, v11 >> 2);
    unint64_t v12 = (char *)v67;
    bzero(v67, 2 * v11);
    unsigned int v67 = &v12[2 * v11];
    begiunsigned __int16 n = v72.__begin_;
    if (v72.__end_ == v72.__begin_)
    {
LABEL_41:
      uint64_t v10 = 1;
    }
    else
    {
      unint64_t v15 = 0;
      int v16 = 0;
      int8x16_t v17 = 0uLL;
      while (1)
      {
        uint64_t v18 = v16 ? begin[v16 - 1] : 0;
        uint64_t v19 = begin[v15];
        int v61 = (char *)v69;
        uint64_t v62 = v19;
        int v20 = (char *)v69 + 8 * v18;
        unsigned int v21 = *(_DWORD *)v20 & 0x3FFFFFFF;
        int v60 = v16;
        uint64_t v63 = v18;
        if (*(_DWORD *)a1 == 2)
        {
          uint64_t v22 = 0;
          uint64_t v23 = *(void *)(a1 + 48) + 12 * v21;
          *(void *)uint64_t v74 = *(void *)v23;
          v74[2] = *(_DWORD *)(v23 + 8);
          uint64_t v24 = *(void *)(a1 + 8);
          float32x4_t v25 = *a3;
          v13.i32[0] = 2139095040;
          int8x16_t v26 = (int8x16_t)xmmword_236F14120;
          do
          {
            float32x4_t v27 = vsubq_f32(v25, *(float32x4_t *)(v24 + 16 * v74[v22]));
            float32x4_t v28 = vmulq_f32(v27, v27);
            float32x4_t v29 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1)));
            int8x16_t v65 = v17;
            *(_DWORD *)((unint64_t)&v65 & 0xFFFFFFFFFFFFFFF3 | (4 * (v22 & 3))) = 1065353216;
            int8x16_t v26 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v13, v29), 0), v65, v26);
            if (v29.f32[0] < v13.f32[0]) {
              v13.f32[0] = v29.f32[0];
            }
            ++v22;
          }
          while (v22 != 3);
          float32x4_t v64 = (float32x4_t)v26;
        }
        else if (v18 == v19)
        {
          float32x4_t v64 = (float32x4_t)xmmword_236F14120;
        }
        else
        {
          uint64_t v30 = 8 * v19 - 8 * v18;
          float v31 = INFINITY;
          float32x4_t v32 = (char *)v69 + 8 * v18;
          float32x4_t v64 = (float32x4_t)xmmword_236F14120;
          do
          {
            if (fabsf(v31) > 0.00001)
            {
              unsigned int v33 = *v32 & 0x3FFFFFFF;
              float32x4_t v34 = (unsigned int *)(*(void *)(a1 + 48) + 12 * v33);
              uint64_t v35 = *(void *)(a1 + 8);
              long long v36 = *(_OWORD *)(v35 + 16 * v34[1]);
              long long v37 = *(_OWORD *)(v35 + 16 * v34[2]);
              *(_OWORD *)uint64_t v74 = *(_OWORD *)(v35 + 16 * *v34);
              long long v75 = v36;
              long long v76 = v37;
              v73.i32[2] = 0;
              v73.i64[0] = 0;
              *(double *)v38.i64 = geom::closest_point_to_triangle<float>(a3, (float32x4_t *)v74, &v73);
              float32x4_t v39 = vsubq_f32(v38, *a3);
              float32x4_t v40 = vmulq_f32(v39, v39);
              float32x4_t v13 = vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1));
              float v41 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), v13).f32[0];
              if (v41 < v31)
              {
                v13.i64[1] = v73.i64[1];
                float32x4_t v64 = v73;
                float v31 = v41;
                unsigned int v21 = v33;
              }
            }
            v32 += 2;
            v30 -= 8;
          }
          while (v30);
        }
        uint64_t v42 = *(void *)(a1 + 264);
        v13.i64[0] = *(void *)(v42 + 8 * (3 * v21 + 2));
        float32x2_t v43 = vmla_laneq_f32(vmla_n_f32(vmul_lane_f32(*(float32x2_t *)(v42 + 8 * (3 * v21 + 1)), *(float32x2_t *)v64.f32, 1), *(float32x2_t *)(v42 + 24 * v21), v64.f32[0]), *(float32x2_t *)v13.f32, v64, 2);
        int8x16_t v17 = 0uLL;
        if (v63 != v62) {
          break;
        }
LABEL_30:
        *((float32x2_t *)__p + v15) = v43;
        unint64_t v15 = (v60 + 1);
        begiunsigned __int16 n = v72.__begin_;
        std::vector<unsigned int>::pointer end = v72.__end_;
        int v16 = v60 + 1;
        if (v15 >= v72.__end_ - v72.__begin_)
        {
          if (v72.__end_ != v72.__begin_)
          {
            uint64_t v51 = 0;
            unsigned int v52 = 0;
            do
            {
              if (v52) {
                uint64_t v53 = begin[v52 - 1];
              }
              else {
                uint64_t v53 = 0;
              }
              uint64_t v54 = begin[v51];
              if (v53 != v54)
              {
                float32x4_t v55 = (char *)v69 + 8 * v54;
                float32x4_t v56 = (char *)v69 + 8 * v53;
                do
                {
                  int v57 = *(_DWORD *)v56;
                  unsigned int v58 = *((_DWORD *)v56 + 1);
                  v56 += 8;
                  *(void *)(*(void *)(a1 + 264) + 8 * (3 * (v57 & 0x3FFFFFFF) + (v58 >> 30))) = *((void *)__p + v51);
                }
                while (v56 != v55);
                begiunsigned __int16 n = v72.__begin_;
                std::vector<unsigned int>::pointer end = v72.__end_;
              }
              uint64_t v51 = ++v52;
            }
            while (v52 < (unint64_t)(end - begin));
          }
          goto LABEL_41;
        }
      }
      while (1)
      {
        unint64_t v44 = *((unsigned int *)v20 + 1);
        int v45 = (float32x4_t *)(v42 + 24 * (*(_DWORD *)v20 & 0x3FFFFFFF));
        float32x4_t v13 = *v45;
        *(float32x4_t *)uint64_t v74 = *v45;
        *(void *)&long long v75 = v45[1].i64[0];
        *(float32x2_t *)v13.f32 = vsub_f32(*(float32x2_t *)&v74[2], *(float32x2_t *)v74);
        int32x2_t v46 = (int32x2_t)vsub_f32(*(float32x2_t *)&v75, *(float32x2_t *)v74);
        *(float32x2_t *)((char *)v74 + ((v44 >> 27) & 0x18)) = v43;
        int32x2_t v47 = (int32x2_t)vsub_f32(*(float32x2_t *)&v74[2], *(float32x2_t *)v74);
        int32x2_t v48 = (int32x2_t)vsub_f32(*(float32x2_t *)&v75, *(float32x2_t *)v74);
        float32x2_t v49 = vmla_f32(vmul_f32((float32x2_t)vzip1_s32(v46, v48), vneg_f32((float32x2_t)vzip2_s32(*(int32x2_t *)v13.f32, v47))), (float32x2_t)vzip2_s32(v46, v48), (float32x2_t)vzip1_s32(*(int32x2_t *)v13.f32, v47));
        *(float32x2_t *)v13.f32 = vmul_lane_f32(v49, v49, 1);
        if (v13.f32[0] < 0.0) {
          break;
        }
        v20 += 8;
        if (v20 == &v61[8 * v62]) {
          goto LABEL_30;
        }
      }
      uint64_t v10 = 0;
    }
    if (__p)
    {
      unsigned int v67 = __p;
      operator delete(__p);
    }
  }
  if (v69)
  {
    uint64_t v70 = v69;
    operator delete(v69);
  }
  if (v72.__begin_)
  {
    v72.__end_ = v72.__begin_;
    operator delete(v72.__begin_);
  }
  return v10;
}

void geom::internal::triangle_mesh_decimator<float>::recompute_vertex_quadric(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v72 = *MEMORY[0x263EF8340];
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(a1 + 4, a2, (uint64_t)a3);
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  uint64_t v7 = (_DWORD *)*a3;
  float32x4_t v59 = (_DWORD *)a3[1];
  if ((_DWORD *)*a3 != v59)
  {
    double v8 = 0.0;
    double v9 = 0.0;
    double v10 = 0.0;
    double v11 = 0.0;
    float64x2_t v12 = 0uLL;
    float64x2_t v13 = 0uLL;
    float64x2_t v14 = 0uLL;
    while (1)
    {
      float64x2_t v62 = v14;
      float64x2_t v64 = v13;
      float64x2_t v66 = v12;
      uint64_t v15 = 0;
      int v60 = v7;
      int v16 = (unsigned int *)(a1[6] + 4 * (3 * *v7));
      uint64_t v18 = *v16;
      uint64_t v17 = v16[1];
      v71[0] = *v16;
      v71[1] = v17;
      uint64_t v19 = v16[2];
      v71[2] = v16[2];
      uint64_t v20 = a1[1];
      unsigned __int8 v21 = -1;
      do
      {
        if (v71[v15] == a2) {
          unsigned __int8 v21 = v15;
        }
        ++v15;
      }
      while (v15 != 3);
      uint64_t v22 = (float32x4_t *)(v20 + 16 * v18);
      uint64_t v23 = (float32x4_t *)(v20 + 16 * v17);
      uint64_t v24 = (float32x4_t *)(v20 + 16 * v19);
      float32x4_t v25 = geom::internal::compute_plane_from_triangle<float>(v22, v23, v24);
      float32x4_t v26 = vmulq_f32(v25, v25);
      double v11 = v11 + v26.f32[0];
      double v10 = v10 + vmuls_lane_f32(v25.f32[0], *(float32x2_t *)v25.f32, 1);
      *(double *)a4 = v11;
      *(double *)(a4 + 8) = v10;
      float32x2_t v27 = (float32x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
      float64x2_t v12 = vaddq_f64(v66, vcvtq_f64_f32(vmul_n_f32(v27, v25.f32[0])));
      *(float64x2_t *)(a4 + 16) = v12;
      double v9 = v9 + vmuls_lane_f32(v25.f32[1], *(float32x2_t *)v25.f32, 1);
      *(double *)(a4 + 32) = v9;
      float64x2_t v13 = vaddq_f64(v64, vcvtq_f64_f32(vmul_lane_f32(v27, *(float32x2_t *)v25.f32, 1)));
      *(float64x2_t *)(a4 + 40) = v13;
      double v8 = v8 + v26.f32[2];
      *(double *)(a4 + 56) = v8;
      float64x2_t v14 = vaddq_f64(v62, vcvtq_f64_f32(vmul_laneq_f32(v27, v25, 3)));
      *(float64x2_t *)(a4 + 64) = v14;
      uint64_t v28 = a1[45];
      if ((*(unsigned char *)(v28 + a2) & 0xF) != 0) {
        break;
      }
      int v45 = v60;
LABEL_29:
      uint64_t v7 = v45 + 1;
      if (v7 == v59) {
        return;
      }
    }
    v70[0] = *v22;
    v70[1] = *v23;
    v70[2] = *v24;
    v68[0] = (*(unsigned char *)(v28 + v18) & 0xF) != 0;
    v68[1] = (*(unsigned char *)(v28 + v17) & 0xF) != 0;
    v68[2] = (*(unsigned char *)(v28 + v19) & 0xF) != 0;
    char v29 = *(unsigned char *)(v28 + a2);
    v30.f64[0] = 0.0;
    if (v68[v21])
    {
      if (v21 == 2) {
        unsigned __int8 v31 = 0;
      }
      else {
        unsigned __int8 v31 = v21 + 1;
      }
      if (v31 == 2) {
        unsigned __int8 v32 = 0;
      }
      else {
        unsigned __int8 v32 = v31 + 1;
      }
      if (v68[v31])
      {
        float64x2_t v63 = v14;
        float64x2_t v65 = v13;
        float64x2_t v67 = v12;
        unsigned int v33 = (float32x4_t *)&v70[v21];
        float32x4_t v69 = vaddq_f32(v25, *v33);
        float32x4_t v34 = geom::internal::compute_plane_from_triangle<float>(v33, (float32x4_t *)&v70[v31], &v69);
        float32x4_t v35 = vmulq_f32((float32x4_t)vzip1q_s32(vdupq_laneq_s32((int32x4_t)v34, 2), (int32x4_t)v34), (float32x4_t)vzip1q_s32((int32x4_t)v34, vdupq_laneq_s32((int32x4_t)v34, 3)));
        int8x8_t v36 = (int8x8_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL).u64[0];
        float32x2_t v37 = (float32x2_t)vext_s8(*(int8x8_t *)v34.f32, v36, 4uLL);
        float32x4_t v38 = vmulq_f32(v34, v34);
        v34.i32[1] = v36.i32[1];
        float64x2_t v39 = vcvtq_f64_f32(vmul_f32(v37, *(float32x2_t *)v34.f32));
        float64x2_t v40 = vcvt_hight_f64_f32(v38);
        float64x2_t v41 = vcvtq_f64_f32(*(float32x2_t *)v38.f32);
        float64x2_t v42 = vaddq_f64(vcvt_hight_f64_f32(v35), (float64x2_t)0);
        float64x2_t v43 = vaddq_f64(vcvtq_f64_f32(*(float32x2_t *)v35.f32), (float64x2_t)0);
        float64x2_t v30 = vaddq_f64(v39, (float64x2_t)0);
        uint64_t v44 = v32;
        if (!v68[v32])
        {
          int v45 = v60;
          goto LABEL_24;
        }
        int v45 = v60;
        float64x2_t v54 = v30;
        float64x2_t v55 = v40;
        float64x2_t v57 = v42;
        float64x2_t v58 = v43;
        float64x2_t v56 = v41;
LABEL_21:
        float32x4_t v46 = geom::internal::compute_plane_from_triangle<float>(v33, (float32x4_t *)&v70[v44], &v69);
        float32x4_t v47 = vmulq_f32((float32x4_t)vzip1q_s32(vdupq_laneq_s32((int32x4_t)v46, 2), (int32x4_t)v46), (float32x4_t)vzip1q_s32((int32x4_t)v46, vdupq_laneq_s32((int32x4_t)v46, 3)));
        int8x8_t v48 = (int8x8_t)vextq_s8((int8x16_t)v46, (int8x16_t)v46, 8uLL).u64[0];
        float32x2_t v49 = (float32x2_t)vext_s8(*(int8x8_t *)v46.f32, v48, 4uLL);
        float32x4_t v50 = vmulq_f32(v46, v46);
        v46.i32[1] = v48.i32[1];
        float64x2_t v51 = vcvtq_f64_f32(vmul_f32(v49, *(float32x2_t *)v46.f32));
        float64x2_t v42 = vaddq_f64(v57, vcvt_hight_f64_f32(v47));
        float64x2_t v43 = vaddq_f64(v58, vcvtq_f64_f32(*(float32x2_t *)v47.f32));
        float64x2_t v40 = vaddq_f64(v55, vcvt_hight_f64_f32(v50));
        float64x2_t v41 = vaddq_f64(v56, vcvtq_f64_f32(*(float32x2_t *)v50.f32));
        float64x2_t v30 = vaddq_f64(v54, v51);
LABEL_24:
        float64_t v52 = v30.f64[1];
        float64x2_t v13 = v65;
        float64x2_t v12 = v67;
        float64x2_t v14 = v63;
        goto LABEL_25;
      }
      uint64_t v44 = v32;
      if (v68[v32])
      {
        float64x2_t v63 = v14;
        float64x2_t v65 = v13;
        float64x2_t v67 = v12;
        unsigned int v33 = (float32x4_t *)&v70[v21];
        float32x4_t v69 = vaddq_f32(v25, *v33);
        float64x2_t v57 = 0u;
        float64x2_t v58 = 0u;
        float64x2_t v55 = 0u;
        float64x2_t v56 = 0u;
        float64x2_t v54 = 0u;
        int v45 = v60;
        goto LABEL_21;
      }
    }
    float64x2_t v43 = 0uLL;
    float64_t v52 = 0.0;
    float64x2_t v42 = 0uLL;
    float64x2_t v41 = 0uLL;
    float64x2_t v40 = 0uLL;
    int v45 = v60;
LABEL_25:
    if ((v29 & 0xF) != 0) {
      double v53 = 1.0;
    }
    else {
      double v53 = 0.0;
    }
    double v11 = v11 + v53 * v41.f64[0];
    double v10 = v10 + v53 * v30.f64[0];
    *(double *)a4 = v11;
    *(double *)(a4 + 8) = v10;
    float64x2_t v12 = vaddq_f64(v12, vmulq_n_f64(v43, v53));
    *(float64x2_t *)(a4 + 16) = v12;
    double v9 = v9 + vmuld_lane_f64(v53, v41, 1);
    *(double *)(a4 + 32) = v9;
    float64x2_t v13 = vaddq_f64(v13, vmulq_n_f64(v42, v53));
    *(float64x2_t *)(a4 + 40) = v13;
    double v8 = v8 + v53 * v40.f64[0];
    *(double *)(a4 + 56) = v8;
    v40.f64[0] = v52;
    float64x2_t v14 = vaddq_f64(v14, vmulq_n_f64(v40, v53));
    *(float64x2_t *)(a4 + 64) = v14;
    goto LABEL_29;
  }
}

double geom::closest_point_to_triangle<float>(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3)
{
  float32x4_t v3 = *a2;
  float32x4_t v4 = a2[1];
  float32x4_t v5 = vsubq_f32(v4, *a2);
  float32x4_t v6 = a2[2];
  float32x4_t v7 = vsubq_f32(v6, *a2);
  float32x4_t v8 = *a1;
  float32x4_t v9 = vsubq_f32(*a1, *a2);
  float32x4_t v10 = vmulq_f32(v5, v9);
  float32x4_t v11 = vmulq_f32(v7, v9);
  float32x4_t v12 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1)));
  float32x4_t v13 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), vaddq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1)));
  if (v12.f32[0] <= 0.0 && v13.f32[0] <= 0.0)
  {
    if (a3)
    {
      *a3 = (float32x4_t)xmmword_236F14120;
      float32x4_t v3 = *a2;
    }
    return *(double *)v3.i64;
  }
  float32x4_t v14 = vsubq_f32(v8, v4);
  float32x4_t v15 = vmulq_f32(v5, v14);
  float32x4_t v16 = vmulq_f32(v7, v14);
  float32x4_t v17 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2), vaddq_f32(v15, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v15.f32, 1)));
  float32x4_t v18 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1)));
  if (v17.f32[0] >= 0.0 && (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v17, v18))).u8[0] & 1) == 0)
  {
    float32x4_t v3 = a2[1];
    if (a3)
    {
      *a3 = (float32x4_t)xmmword_236F14130;
      float32x4_t v3 = a2[1];
    }
    return *(double *)v3.i64;
  }
  float v19 = (float)(v12.f32[0] * v18.f32[0]) - (float)(v17.f32[0] * v13.f32[0]);
  if ((vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v12, v17))).u8[0] & 1) != 0
    && v17.f32[0] <= 0.0
    && v12.f32[0] >= 0.0
    && v19 <= 0.0)
  {
    int32x4_t v20 = (int32x4_t)vdivq_f32(v12, vsubq_f32(v12, v17));
    if (a3)
    {
      *(int32x4_t *)a3 = vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(1.0 - *(float *)v20.i32), v20);
      float32x4_t v3 = *a2;
    }
    v3.i64[0] = vmlaq_n_f32(v3, v5, *(float *)v20.i32).u64[0];
    return *(double *)v3.i64;
  }
  float32x4_t v21 = vsubq_f32(v8, v6);
  float32x4_t v22 = vmulq_f32(v5, v21);
  float32x4_t v23 = vmulq_f32(v7, v21);
  float32x4_t v24 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1)));
  float32x4_t v25 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v23, 2), vaddq_f32(v23, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v23.f32, 1)));
  if (v25.f32[0] >= 0.0 && (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vcgeq_f32(v25, v24))).u8[0] & 1) == 0)
  {
    if (a3)
    {
      *a3 = (float32x4_t)xmmword_236F14E40;
      float32x4_t v6 = a2[2];
    }
    v3.i64[0] = v6.i64[0];
    return *(double *)v3.i64;
  }
  float v26 = (float)(v24.f32[0] * v13.f32[0]) - (float)(v12.f32[0] * v25.f32[0]);
  if (v25.f32[0] <= 0.0
    && v26 <= 0.0
    && v13.f32[0] >= 0.0
    && (vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)vceqq_f32(v13, v25))).u8[0] & 1) != 0)
  {
    LODWORD(v27) = vdivq_f32(v13, vsubq_f32(v13, v25)).u32[0];
    if (a3)
    {
      v28.i32[1] = 0;
      v28.f32[0] = 1.0 - v27;
      v28.i64[1] = LODWORD(v27);
      *a3 = v28;
      float32x4_t v3 = *a2;
    }
LABEL_34:
    v3.i64[0] = vmlaq_n_f32(v3, v7, v27).u64[0];
    return *(double *)v3.i64;
  }
  float v29 = (float)(v17.f32[0] * v25.f32[0]) - (float)(v24.f32[0] * v18.f32[0]);
  if (v29 > 0.0 || (float32x4_t v30 = vsubq_f32(v18, v17), v30.f32[0] < 0.0) || (v31 = vsubq_f32(v24, v25), v31.f32[0] < 0.0))
  {
    float v32 = 1.0 / (float)(v19 + (float)(v29 + v26));
    float v33 = v26 * v32;
    float v27 = v19 * v32;
    if (a3)
    {
      v3.f32[0] = (float)(1.0 - v33) - v27;
      v3.f32[1] = v33;
      v3.f32[2] = v27;
      *a3 = v3;
      float32x4_t v3 = *a2;
    }
    float32x4_t v3 = vmlaq_n_f32(v3, v5, v33);
    goto LABEL_34;
  }
  LODWORD(v34) = vdivq_f32(v30, vaddq_f32(v31, v30)).u32[0];
  if (a3)
  {
    v35.i32[0] = 0;
    v35.f32[1] = 1.0 - v34;
    v35.i64[1] = LODWORD(v34);
    *a3 = v35;
    float32x4_t v4 = a2[1];
    float32x4_t v6 = a2[2];
  }
  v3.i64[0] = vmlaq_n_f32(v4, vsubq_f32(v6, v4), v34).u64[0];
  return *(double *)v3.i64;
}

void geom::internal::compute_vertex_masks<double>(geom::triangle_mesh_half_edge_connectivity *this@<X0>, uint64_t *a2@<X1>, unsigned int **a3@<X2>, void *a4@<X3>, void *a5@<X8>)
{
  uint64_t v51 = *MEMORY[0x263EF8340];
  unint64_t v7 = *((void *)this + 6) - *((void *)this + 5);
  a5[1] = 0;
  a5[2] = 0;
  uint64_t v8 = (v7 >> 2);
  *a5 = 0;
  if ((v7 >> 2))
  {
    std::vector<unsigned char>::__vallocate[abi:nn180100](a5, (v7 >> 2));
    float32x4_t v9 = (char *)a5[1];
    bzero(v9, (v7 >> 2));
    a5[1] = &v9[v8];
  }
  if ((v7 & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v10 = 0;
    do
    {
      if (geom::triangle_mesh_half_edge_connectivity::is_boundary_vertex(this, v10))
      {
        *(unsigned char *)(*a5 + v10) = 1;
        geom::triangle_mesh_half_edge_connectivity::get_incident_boundary_half_edges_to_boundary_vertex(this, v10, v45);
        if (v45[0] == -1)
        {
          int v14 = -1;
          v50[0] = -1;
        }
        else
        {
          unint64_t face_and_face_vertex_for_half_edge = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v45[0]);
          if (v45[1] == -1)
          {
            uint64_t v13 = 0xFFFFFFFFLL;
          }
          else
          {
            unint64_t v12 = geom::triangle_mesh_half_edge_connectivity::get_face_and_face_vertex_for_half_edge(this, v45[1]);
            uint64_t v13 = 3 * v12 + BYTE4(v12);
          }
          uint64_t v15 = *((void *)this + 20);
          v50[0] = *(_DWORD *)(v15
                             + 4
                             * (3 * face_and_face_vertex_for_half_edge
                              + BYTE4(face_and_face_vertex_for_half_edge)));
          int v14 = *(_DWORD *)(v15 + 4 * v13);
        }
        uint64_t v16 = 0;
        v50[1] = v14;
        char v17 = 1;
        do
        {
          char v18 = v17;
          unint64_t v19 = v50[v16];
          uint64_t v20 = *((void *)this + 23);
          if (v19 >= (*((void *)this + 24) - v20) >> 2)
          {
            *(void *)int v45 = -1;
            uint64_t v22 = 0xFFFFFFFFLL;
          }
          else
          {
            unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(this, *(_DWORD *)(v20 + 4 * v19) / 3u, *(_DWORD *)(v20 + 4 * v19) % 3u);
            geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(this, half_edge_for_face_vertex, v45);
            uint64_t v22 = v45[0];
          }
          char v17 = 0;
          v49[v16] = *(_DWORD *)((unint64_t)v45 | (4 * (v10 == v22)));
          uint64_t v16 = 1;
        }
        while ((v18 & 1) != 0);
        uint64_t v23 = 0;
        uint64_t v24 = *a2;
        float32x4_t v25 = (float64x2_t *)(*a2 + 32 * v10);
        float64x2_t v27 = *v25;
        float64x2_t v26 = v25[1];
        char v28 = 1;
        while (1)
        {
          char v29 = v28;
          float32x4_t v30 = (float64x2_t *)(v24 + 32 * v49[v23]);
          float64x2_t v31 = vsubq_f64(v27, *v30);
          float64x2_t v32 = vsubq_f64(v26, v30[1]);
          float v33 = &v45[8 * v23];
          *(float64x2_t *)float v33 = v31;
          *((float64x2_t *)v33 + 1) = v32;
          float64x2_t v34 = vmulq_f64(v32, v32);
          v34.f64[0] = v34.f64[0] + vaddvq_f64(vmulq_f64(v31, v31));
          if (v34.f64[0] <= 0.0) {
            break;
          }
          char v28 = 0;
          v34.f64[0] = 1.0 / sqrt(v34.f64[0]);
          *(float64x2_t *)float v33 = vmulq_n_f64(v31, v34.f64[0]);
          *((float64x2_t *)v33 + 1) = vmulq_f64(v32, v34);
          uint64_t v23 = 1;
          if ((v29 & 1) == 0)
          {
            if (vmulq_f64(v46, v48).f64[0] + vaddvq_f64(vmulq_f64(*(float64x2_t *)v45, v47)) >= -0.5) {
              *(unsigned char *)(*a5 + v10) |= 2u;
            }
            break;
          }
        }
      }
      ++v10;
    }
    while (v10 != v8);
  }
  if (((a4[7] - a4[6]) & 0x3FFFFFFFCLL) != 0 && ((*((void *)this + 6) - *((void *)this + 5)) & 0x3FFFFFFFCLL) != 0)
  {
    uint64_t v35 = 0;
    while (1)
    {
      int v36 = *(unsigned __int8 *)(*a4 + v35);
      if (v36 == 2) {
        break;
      }
      if ((v36 - 1) <= 1)
      {
        char v37 = 4;
        goto LABEL_30;
      }
LABEL_31:
      if (++v35 >= (unint64_t)((*((void *)this + 6) - *((void *)this + 5)) >> 2)) {
        goto LABEL_32;
      }
    }
    char v37 = 8;
LABEL_30:
    *(unsigned char *)(*a5 + v35) |= v37;
    goto LABEL_31;
  }
LABEL_32:
  float32x4_t v38 = a3[1];
  if (v38)
  {
    float64x2_t v39 = *a3;
    uint64_t v40 = 4 * (void)v38;
    do
    {
      unsigned int v41 = *v39++;
      *(unsigned char *)(*a5 + v41) |= 0x10u;
      v40 -= 4;
    }
    while (v40);
  }
}

void geom::internal::triangle_mesh_decimator<double>::initialize_quadrics(void *a1)
{
  uint64_t v125 = *MEMORY[0x263EF8340];
  unint64_t v2 = a1[10] - a1[9];
  unint64_t v3 = ((unint64_t)((uint64_t)(a1[7] - a1[6]) >> 2) * (unsigned __int128)0xAAAAAAAAAAAAAAABLL) >> 64;
  a1[49] = a1[48];
  unint64_t v4 = (v2 >> 2);
  float32x4_t v115 = a1 + 48;
  std::vector<geom::internal::quadric>::resize(a1 + 48, v4);
  std::vector<int> __p = 0;
  float32x4_t v120 = 0;
  uint64_t v121 = 0;
  if ((v2 >> 2))
  {
    std::vector<float>::__vallocate[abi:nn180100](&__p, (v2 >> 2));
    float32x4_t v5 = (char *)v120;
    bzero(v120, 4 * v4);
    float32x4_t v120 = &v5[4 * v4];
  }
  if ((v2 & 0x3FFFFFFFCLL) != 0)
  {
    float32x4_t v6 = (char *)a1[45];
    unint64_t v7 = (float *)__p;
    do
    {
      char v8 = *v6++;
      if ((v8 & 0xF) != 0) {
        float v9 = 1.0;
      }
      else {
        float v9 = 0.0;
      }
      *v7++ = v9;
      --v4;
    }
    while (v4);
  }
  uint64_t v114 = (v3 >> 1);
  if ((v3 >> 1))
  {
    uint64_t v10 = 0;
    while (1)
    {
      float32x4_t v11 = (_DWORD *)(a1[6] + 4 * (3 * v10));
      uint64_t v13 = v11[1];
      v123[0] = *v11;
      uint64_t v12 = v123[0];
      v123[1] = v13;
      unsigned int v124 = v11[2];
      uint64_t v14 = v124;
      uint64_t v15 = a1[1];
      uint64_t v16 = (float64x2_t *)(v15 + 32 * v123[0]);
      char v17 = (float64x2_t *)(v15 + 32 * v13);
      char v18 = (float64x2_t *)(v15 + 32 * v124);
      float64x2_t v19 = v16[1];
      float64x2_t v20 = vsubq_f64(*v17, *v16);
      float64x2_t v21 = vsubq_f64(v17[1], v19);
      float64x2_t v22 = vsubq_f64(*v18, *v16);
      float64x2_t v23 = vsubq_f64(v18[1], v19);
      float64x2_t v24 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v21), v22, 1), v23, v20, 1);
      v23.f64[1] = v22.f64[0];
      v21.f64[1] = v20.f64[0];
      float64x2_t v25 = vmlaq_f64(vmulq_f64(v23, vnegq_f64(v20)), v22, v21);
      float64x2_t v26 = vmulq_f64(v25, v25);
      double v27 = v26.f64[1] + vmulq_f64(v24, v24).f64[0] + v26.f64[0];
      float64x2_t v28 = 0uLL;
      float64x2_t v29 = 0uLL;
      if (v27 > 0.0)
      {
        float64x2_t v30 = (float64x2_t)vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL);
        v24.f64[1] = v25.f64[0];
        v25.f64[0] = 1.0 / sqrt(v27);
        float64x2_t v29 = vmulq_f64(v30, v25);
        float64x2_t v28 = vmulq_n_f64(v24, v25.f64[0]);
      }
      float64_t v31 = vmulq_f64(v19, v29).f64[0] + vaddvq_f64(vmulq_f64(*v16, v28));
      float64_t v32 = -v31;
      double v33 = vmuld_n_f64(v28.f64[0], v29.f64[0]);
      float64_t v34 = -v31 * v29.f64[0];
      float64_t v35 = v31 * v31;
      uint64_t v36 = *v115;
      uint64_t v37 = *v115 + 80 * v123[0];
      *(float64_t *)(v37 + 72) = v35 + *(double *)(v37 + 72);
      uint64_t v38 = v36 + 80 * v13;
      *(float64_t *)(v38 + 72) = v35 + *(double *)(v38 + 72);
      float64x2_t v39 = vmulq_n_f64(v28, v28.f64[0]);
      v40.f64[1] = v28.f64[1];
      v40.f64[0] = v32;
      float64x2_t v41 = vmulq_f64(v28, v40);
      float64x2_t v42 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v41.f64[0], 0);
      v42.f64[0] = v33;
      float64x2_t v43 = vaddq_f64(v42, *(float64x2_t *)(v37 + 16));
      *(float64x2_t *)uint64_t v37 = vaddq_f64(v39, *(float64x2_t *)v37);
      *(float64x2_t *)(v37 + 16) = v43;
      float64x2_t v44 = vaddq_f64(v42, *(float64x2_t *)(v38 + 16));
      v42.f64[0] = *(float64_t *)(v37 + 32);
      uint64_t v45 = v36 + 80 * v14;
      *(float64x2_t *)uint64_t v38 = vaddq_f64(v39, *(float64x2_t *)v38);
      *(float64x2_t *)(v38 + 16) = v44;
      *(float64x2_t *)uint64_t v45 = vaddq_f64(v39, *(float64x2_t *)v45);
      *(double *)(v37 + 32) = v41.f64[1] + v42.f64[0];
      double v46 = v33 + *(double *)(v45 + 16);
      float64x2_t v116 = v28;
      float64x2_t v117 = v29;
      float64x2_t v47 = (float64x2_t)vextq_s8((int8x16_t)v28, (int8x16_t)v29, 8uLL);
      v44.f64[1] = v47.f64[1];
      v44.f64[0] = v32;
      v42.f64[0] = v34 + *(double *)(v37 + 64);
      float64x2_t v48 = vmulq_f64(v47, v44);
      *(double *)(v37 + 56) = v48.f64[1] + *(double *)(v37 + 56);
      *(float64_t *)(v37 + 64) = v42.f64[0];
      v42.f64[0] = *(float64_t *)(v38 + 56);
      float64_t v49 = v34 + *(double *)(v38 + 64);
      *(double *)(v45 + 16) = v46;
      *(double *)(v38 + 32) = v41.f64[1] + *(double *)(v38 + 32);
      *(float64x2_t *)(v45 + 24) = vaddq_f64(v41, *(float64x2_t *)(v45 + 24));
      float64x2_t v50 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v48.f64[0], 0);
      v50.f64[0] = vmuld_lane_f64(v29.f64[0], v28, 1);
      *(float64x2_t *)(v37 + 40) = vaddq_f64(v50, *(float64x2_t *)(v37 + 40));
      *(float64x2_t *)(v38 + 40) = vaddq_f64(v50, *(float64x2_t *)(v38 + 40));
      *(double *)(v45 + 40) = v50.f64[0] + *(double *)(v45 + 40);
      *(double *)(v38 + 56) = v48.f64[1] + v42.f64[0];
      *(float64_t *)(v38 + 64) = v49;
      *(float64x2_t *)(v45 + 48) = vaddq_f64(v48, *(float64x2_t *)(v45 + 48));
      float64_t v51 = v35 + *(double *)(v45 + 72);
      *(float64_t *)(v45 + 64) = v34 + *(double *)(v45 + 64);
      *(float64_t *)(v45 + 72) = v51;
      if (geom::triangle_mesh_half_edge_connectivity::is_boundary_face((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), v10))
      {
        break;
      }
LABEL_37:
      if (++v10 == v114) {
        goto LABEL_38;
      }
    }
    uint64_t v52 = 0;
    double v53 = (_OWORD *)(v15 + 32 * v12);
    long long v54 = v53[1];
    v122[0] = *v53;
    v122[1] = v54;
    float64x2_t v55 = (_OWORD *)(v15 + 32 * v13);
    long long v56 = v55[1];
    v122[2] = *v55;
    v122[3] = v56;
    float64x2_t v57 = (_OWORD *)(v15 + 32 * v14);
    long long v58 = v57[1];
    v122[4] = *v57;
    v122[5] = v58;
    uint64_t v59 = a1[45];
    v118[0] = (*(unsigned char *)(v59 + v12) & 0xF) != 0;
    BOOL v60 = (*(unsigned char *)(v59 + v13) & 0xF) != 0;
    LOBYTE(v59) = *(unsigned char *)(v59 + v14);
    v118[1] = v60;
    float v118[2] = (v59 & 0xF) != 0;
    int v61 = (float *)__p;
    uint64_t v62 = a1[48];
    while (1)
    {
      if (v118[v52])
      {
        uint64_t v63 = v52 + 1;
        if (v52 == 2) {
          unsigned __int8 v64 = 0;
        }
        else {
          unsigned __int8 v64 = v52 + 1;
        }
        if (v64 == 2) {
          LOBYTE(v65) = 0;
        }
        else {
          LOBYTE(v65) = v64 + 1;
        }
        if (v118[v64])
        {
          float64x2_t v66 = (float64x2_t *)&v122[2 * v52];
          float64x2_t v67 = *v66;
          float64x2_t v68 = v66[1];
          float32x4_t v69 = (float64x2_t *)&v122[2 * v64];
          float64x2_t v70 = vsubq_f64(*v69, *v66);
          float64x2_t v71 = vsubq_f64(v69[1], v68);
          float64x2_t v72 = vsubq_f64(vaddq_f64(v116, *v66), *v66);
          float64x2_t v73 = vsubq_f64(vaddq_f64(v117, v68), v68);
          v74.f64[0] = v73.f64[0];
          v74.f64[1] = v72.f64[0];
          float64x2_t v75 = vnegq_f64(v71);
          v71.f64[1] = v70.f64[0];
          float64x2_t v76 = vmlaq_f64(vmulq_f64(v74, vnegq_f64(v70)), v72, v71);
          float64x2_t v77 = vmlaq_laneq_f64(vmulq_laneq_f64(v75, v72, 1), v73, v70, 1);
          float64x2_t v78 = vmulq_f64(v76, v76);
          double v79 = v78.f64[1] + vmulq_f64(v77, v77).f64[0] + v78.f64[0];
          float64x2_t v80 = 0uLL;
          float64x2_t v81 = 0uLL;
          if (v79 > 0.0)
          {
            float64x2_t v82 = (float64x2_t)vextq_s8((int8x16_t)v76, (int8x16_t)v76, 8uLL);
            v77.f64[1] = v76.f64[0];
            v76.f64[0] = 1.0 / sqrt(v79);
            float64x2_t v81 = vmulq_f64(v82, v76);
            float64x2_t v80 = vmulq_n_f64(v77, v76.f64[0]);
          }
          double v83 = vmulq_f64(v68, v81).f64[0] + vaddvq_f64(vmulq_f64(v67, v80));
          double v84 = vmuld_n_f64(v80.f64[0], v80.f64[0]);
          double v85 = vmuld_lane_f64(v80.f64[1], v80, 1);
          double v86 = vmuld_n_f64(v81.f64[0], v81.f64[0]);
          double v87 = v83 * v83;
          float64x2_t v88 = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v80, (int8x16_t)v81, 8uLL), v80.f64[0]), (float64x2_t)0);
          double v89 = 0.0 - v83 * v80.f64[0];
          double v90 = vmuld_lane_f64(v81.f64[0], v80, 1) + 0.0;
          double v91 = 0.0 - vmuld_lane_f64(v83, v80, 1);
          double v92 = 0.0 - v83 * v81.f64[0];
          uint64_t v65 = v65;
          if (!v118[v65]) {
            goto LABEL_34;
          }
          unint64_t v93 = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
          unint64_t v94 = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
          float64x2_t v95 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v72, 1);
          goto LABEL_31;
        }
        uint64_t v65 = v65;
        if (v118[v65])
        {
          float32x4_t v96 = (float64x2_t *)&v122[2 * v52];
          float64x2_t v67 = *v96;
          float64x2_t v68 = v96[1];
          float64x2_t v72 = vsubq_f64(vaddq_f64(v116, *v96), *v96);
          float64x2_t v73 = vsubq_f64(vaddq_f64(v117, v68), v68);
          v74.f64[0] = v73.f64[0];
          v74.f64[1] = v72.f64[0];
          float64x2_t v95 = (float64x2_t)vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL);
          unint64_t v94 = vextq_s8((int8x16_t)v74, (int8x16_t)v74, 8uLL).u64[0];
          float64x2_t v88 = 0uLL;
          double v84 = 0.0;
          unint64_t v93 = *(void *)&v95.f64[0];
          double v89 = 0.0;
          double v85 = 0.0;
          double v90 = 0.0;
          double v91 = 0.0;
          double v86 = 0.0;
          double v92 = 0.0;
          double v87 = 0.0;
LABEL_31:
          int v97 = (float64x2_t *)&v122[2 * v65];
          float64x2_t v98 = vsubq_f64(*v97, v67);
          float64x2_t v99 = vsubq_f64(v97[1], v68);
          float64x2_t v100 = vnegq_f64(v99);
          v99.f64[1] = v98.f64[0];
          *(void *)&v74.f64[1] = v94;
          *(void *)&v72.f64[1] = v93;
          float64x2_t v101 = vmlaq_f64(vmulq_f64(v74, vnegq_f64(v98)), v72, v99);
          float64x2_t v102 = vmlaq_laneq_f64(vmulq_f64(v95, v100), v73, v98, 1);
          float64x2_t v103 = vmulq_f64(v101, v101);
          double v104 = v103.f64[1] + vmulq_f64(v102, v102).f64[0] + v103.f64[0];
          float64x2_t v105 = 0uLL;
          float64x2_t v106 = 0uLL;
          if (v104 > 0.0)
          {
            v102.f64[1] = v101.f64[0];
            v105.f64[0] = 1.0 / sqrt(v104);
            float64x2_t v106 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v101, (int8x16_t)v101, 8uLL), v105);
            float64x2_t v105 = vmulq_n_f64(v102, v105.f64[0]);
          }
          double v107 = vmulq_f64(v68, v106).f64[0] + vaddvq_f64(vmulq_f64(v67, v105));
          double v84 = v84 + vmuld_n_f64(v105.f64[0], v105.f64[0]);
          float64x2_t v88 = vaddq_f64(v88, vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v105, (int8x16_t)v106, 8uLL), v105.f64[0]));
          double v89 = v89 - v107 * v105.f64[0];
          double v85 = v85 + vmuld_lane_f64(v105.f64[1], v105, 1);
          double v90 = v90 + vmuld_lane_f64(v106.f64[0], v105, 1);
          double v91 = v91 - vmuld_lane_f64(v107, v105, 1);
          double v86 = v86 + vmuld_n_f64(v106.f64[0], v106.f64[0]);
          double v92 = v92 - v107 * v106.f64[0];
          double v87 = v87 + v107 * v107;
          goto LABEL_34;
        }
        float64x2_t v88 = 0uLL;
      }
      else
      {
        float64x2_t v88 = 0uLL;
        uint64_t v63 = v52 + 1;
      }
      double v84 = 0.0;
      double v89 = 0.0;
      double v85 = 0.0;
      double v90 = 0.0;
      double v91 = 0.0;
      double v86 = 0.0;
      double v92 = 0.0;
      double v87 = 0.0;
LABEL_34:
      uint64_t v108 = v123[v52];
      double v109 = v61[v108];
      uint64_t v110 = v62 + 80 * v108;
      *(double *)uint64_t v110 = v84 * v109 + *(double *)v110;
      *(float64x2_t *)(v110 + 8) = vaddq_f64(vmulq_n_f64(v88, v109), *(float64x2_t *)(v110 + 8));
      double v111 = v85 * v109 + *(double *)(v110 + 32);
      *(double *)(v110 + 24) = v89 * v109 + *(double *)(v110 + 24);
      *(double *)(v110 + 32) = v111;
      double v112 = v91 * v109 + *(double *)(v110 + 48);
      *(double *)(v110 + 40) = v90 * v109 + *(double *)(v110 + 40);
      *(double *)(v110 + 48) = v112;
      double v113 = v92 * v109 + *(double *)(v110 + 64);
      *(double *)(v110 + 56) = v86 * v109 + *(double *)(v110 + 56);
      *(double *)(v110 + 64) = v113;
      *(double *)(v110 + 72) = v87 * v109 + *(double *)(v110 + 72);
      uint64_t v52 = v63;
      if (v63 == 3) {
        goto LABEL_37;
      }
    }
  }
LABEL_38:
  if (__p)
  {
    float32x4_t v120 = __p;
    operator delete(__p);
  }
}

void geom::internal::triangle_mesh_decimator<double>::initialize_edge_data(uint64_t a1)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v2 = (*(void *)(a1 + 224) - *(void *)(a1 + 216)) >> 2;
  memset(v38, 0, sizeof(v38));
  *(_OWORD *)std::vector<int> __p = 0u;
  std::vector<geom::indexed_priority_queue<unsigned int,double>::key,std::allocator<geom::indexed_priority_queue<unsigned int,double>::key>>::reserve(__p, v2);
  std::vector<unsigned int>::resize((std::vector<int> *)((char *)v38 + 8), v2, &geom::indexed_priority_queue<unsigned int,double>::k_invalid_index);
  unint64_t v3 = (void **)(a1 + 432);
  long long v4 = *(_OWORD *)(a1 + 432);
  long long v5 = *(_OWORD *)__p;
  long long v6 = v38[0];
  *(_OWORD *)std::vector<int> __p = v4;
  *(void *)&v38[0] = *(void *)(a1 + 448);
  uint64_t v7 = *(void *)(a1 + 472);
  long long v8 = v38[1];
  long long v9 = *(_OWORD *)(a1 + 456);
  *(_OWORD *)(a1 + 432) = v5;
  *(_OWORD *)(a1 + 448) = v6;
  *(_OWORD *)((char *)v38 + 8) = v9;
  *((void *)&v38[1] + 1) = v7;
  *(_OWORD *)(a1 + 464) = v8;
  if ((void)v9)
  {
    *(void *)&v38[1] = v9;
    operator delete((void *)v9);
    uint64_t v10 = __p[0];
    if (!__p[0]) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v10 = (void *)v4;
  if ((void)v4)
  {
LABEL_3:
    __p[1] = v10;
    operator delete(v10);
  }
LABEL_4:
  float32x4_t v11 = (char **)(a1 + 408);
  *(void *)(a1 + 416) = *(void *)(a1 + 408);
  std::vector<geom::internal::triangle_mesh_decimator<double>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<double>::edge_cost>>::reserve((void **)(a1 + 408), v2);
  if (v2)
  {
    unsigned int v16 = 0;
    do
    {
      geom::internal::triangle_mesh_decimator<double>::make_edge_cost((void *)a1, v16, (float64x2_t *)__p, INFINITY, v12, v13, v14, v15);
      char v17 = *(_OWORD **)(a1 + 416);
      unint64_t v18 = *(void *)(a1 + 424);
      if ((unint64_t)v17 >= v18)
      {
        unint64_t v22 = 0xAAAAAAAAAAAAAAABLL * (((char *)v17 - *v11) >> 4);
        unint64_t v23 = v22 + 1;
        if (v22 + 1 > 0x555555555555555) {
          abort();
        }
        unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v18 - (void)*v11) >> 4);
        if (2 * v24 > v23) {
          unint64_t v23 = 2 * v24;
        }
        if (v24 >= 0x2AAAAAAAAAAAAAALL) {
          unint64_t v25 = 0x555555555555555;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25) {
          float64x2_t v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>(a1 + 424, v25);
        }
        else {
          float64x2_t v26 = 0;
        }
        double v27 = &v26[48 * v22];
        long long v28 = *(_OWORD *)__p;
        long long v29 = v38[1];
        *((_OWORD *)v27 + 1) = v38[0];
        *((_OWORD *)v27 + 2) = v29;
        *(_OWORD *)double v27 = v28;
        float64_t v31 = *(char **)(a1 + 408);
        float64x2_t v30 = *(char **)(a1 + 416);
        float64_t v32 = v27;
        if (v30 != v31)
        {
          do
          {
            long long v33 = *((_OWORD *)v30 - 3);
            long long v34 = *((_OWORD *)v30 - 1);
            *((_OWORD *)v32 - 2) = *((_OWORD *)v30 - 2);
            *((_OWORD *)v32 - 1) = v34;
            *((_OWORD *)v32 - 3) = v33;
            v32 -= 48;
            v30 -= 48;
          }
          while (v30 != v31);
          float64x2_t v30 = *v11;
        }
        float64x2_t v21 = v27 + 48;
        *(void *)(a1 + 408) = v32;
        *(void *)(a1 + 416) = v27 + 48;
        *(void *)(a1 + 424) = &v26[48 * v25];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        long long v19 = *(_OWORD *)__p;
        long long v20 = v38[1];
        v17[1] = v38[0];
        void v17[2] = v20;
        _OWORD *v17 = v19;
        float64x2_t v21 = v17 + 3;
      }
      *(void *)(a1 + 416) = v21;
      ++v16;
    }
    while (v16 != v2);
    int v35 = 0;
    uint64_t v36 = 0;
    do
    {
      LODWORD(__p[0]) = v35;
      __p[1] = *(void **)&(*v11)[v36];
      geom::indexed_priority_queue<unsigned int,double>::push_or_change_cost(v3, (unsigned int *)__p);
      v36 += 48;
      ++v35;
    }
    while (48 * v2 != v36);
  }
}

void std::vector<geom::internal::triangle_mesh_decimator<double>::edge_cost,std::allocator<geom::internal::triangle_mesh_decimator<double>::edge_cost>>::reserve(void **a1, unint64_t a2)
{
  long long v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (unsigned char *)*a1) >> 4) < a2)
  {
    if (a2 >= 0x555555555555556) {
      abort();
    }
    uint64_t v5 = ((unsigned char *)a1[1] - (unsigned char *)*a1) / 48;
    long long v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::ddg_evaluator<float>::stencil>>(v3, a2);
    uint64_t v7 = &v6[48 * v5];
    long long v9 = &v6[48 * v8];
    float32x4_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    float64x2_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        long long v13 = *((_OWORD *)v10 - 3);
        long long v14 = *((_OWORD *)v10 - 1);
        *((_OWORD *)v12 - 2) = *((_OWORD *)v10 - 2);
        *((_OWORD *)v12 - 1) = v14;
        *((_OWORD *)v12 - 3) = v13;
        v12 -= 48;
        v10 -= 48;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void geom::internal::triangle_mesh_decimator<double>::make_edge_cost(void *a1@<X0>, unsigned int a2@<W1>, float64x2_t *a3@<X8>, double a4@<D0>, float64x2_t a5@<Q4>, float64x2_t a6@<Q5>, float64x2_t a7@<Q6>, float64x2_t a8@<Q7>)
{
  uint64_t v45 = *MEMORY[0x263EF8340];
  *(void *)float64x2_t v44 = -1;
  uint64_t v12 = a1[27];
  if (a2 >= (unint64_t)((a1[28] - v12) >> 2))
  {
    *(void *)float64x2_t v44 = -1;
    uint64_t v14 = 0xFFFFFFFFLL;
    uint64_t v15 = 0xFFFFFFFFLL;
  }
  else
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), *(_DWORD *)(v12 + 4 * a2) / 3u, *(_DWORD *)(v12 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), half_edge_for_face_vertex, v44);
    uint64_t v15 = v44[0];
    uint64_t v14 = v44[1];
  }
  uint64_t v16 = a1[1];
  char v17 = (float64x2_t *)(v16 + 32 * v15);
  unint64_t v18 = (float64x2_t *)(v16 + 32 * v14);
  _Q1 = *v17;
  float64x2_t v19 = v17[1];
  float64x2_t v21 = vsubq_f64(*v18, *v17);
  float64x2_t v22 = vsubq_f64(v18[1], v19);
  float64x2_t v24 = vmulq_f64(v21, v21);
  double v23 = fabs(vmulq_f64(v22, v22).f64[0] + vaddvq_f64(v24));
  v24.f64[0] = 1.0e-12;
  if (v23 <= 1.0e-12)
  {
    double v37 = 0.0;
  }
  else
  {
    uint64_t v25 = a1[48];
    float64x2_t v26 = (float64x2_t *)(v25 + 80 * v15);
    uint64_t v27 = v25 + 80 * v14;
    v40[0] = vaddq_f64(*v26, *(float64x2_t *)v27);
    v40[1] = vaddq_f64(v26[1], *(float64x2_t *)(v27 + 16));
    float64x2_t v41 = vaddq_f64(v26[2], *(float64x2_t *)(v27 + 32));
    float64x2_t v42 = vaddq_f64(v26[3], *(float64x2_t *)(v27 + 48));
    __n128 v28 = *(__n128 *)(v27 + 64);
    float64x2_t v43 = vaddq_f64(v26[4], (float64x2_t)v28);
    geom::internal::triangle_mesh_decimator<double>::make_contracted_position(a1, a2, (double *)v40, (uint64_t)&v38, a4, v28, v23, v24, a5, a6, a7, a8);
    _Q1 = v38;
    float64x2_t v19 = v39;
    _D6 = v42.f64[0];
    _D2 = *((double *)v40 + 1) * v38.f64[0];
    __asm
    {
      FMLA            D3, D2, V1.D[1]
      FMLA            D3, D6, V1.D[1]
    }
    double v37 = v43.f64[1]
        + vmlad_n_f64(vmlad_n_f64(vmuld_lane_f64(vmuld_lane_f64(v41.f64[0], v38, 1), v38, 1), *(double *)v40 * v38.f64[0], v38.f64[0]), v42.f64[1] * v39.f64[0], v39.f64[0])+ vmlad_n_f64(_D3, v43.f64[0], v39.f64[0]) * 2.0;
    if (v37 < 0.0) {
      double v37 = 0.0;
    }
  }
  a3->f64[0] = v37;
  a3[1] = _Q1;
  a3[2] = v19;
}

void geom::internal::triangle_mesh_decimator<double>::make_contracted_position(void *a1@<X0>, unsigned int a2@<W1>, double *a3@<X2>, uint64_t a4@<X8>, double a5@<D0>, __n128 a6@<Q1>, double a7@<D2>, float64x2_t a8@<Q3>, float64x2_t a9@<Q4>, float64x2_t a10@<Q5>, float64x2_t a11@<Q6>, float64x2_t a12@<Q7>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v17 = a1[27];
  if (a2 >= (unint64_t)((a1[28] - v17) >> 2))
  {
    v19.f64[0] = NAN;
    v19.f64[1] = NAN;
    *(void *)uint64_t v52 = -1;
    uint64_t v21 = 0xFFFFFFFFLL;
    uint64_t v20 = 0xFFFFFFFFLL;
  }
  else
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), *(_DWORD *)(v17 + 4 * a2) / 3u, *(_DWORD *)(v17 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), half_edge_for_face_vertex, v52);
    uint64_t v20 = v52[0];
    uint64_t v21 = v52[1];
  }
  uint64_t v22 = a1[1];
  double v23 = (float64x2_t *)(v22 + 32 * v20);
  uint64_t v24 = a1[45];
  char v25 = *(unsigned char *)(v24 + v20);
  char v26 = *(unsigned char *)(v24 + v21);
  if ((v25 & 0x10) != 0 && (v26 & 0x10) == 0) {
    goto LABEL_18;
  }
  uint64_t v27 = (float64x2_t *)(v22 + 32 * v21);
  if ((v25 & 0x10) == 0 && (v26 & 0x10) != 0) {
    goto LABEL_21;
  }
  int v28 = v25 & 0xA;
  int v29 = v26 & 0xA;
  if ((v25 & 0xA) != 0 && v29 == 0) {
    goto LABEL_18;
  }
  if ((v26 & 0xA) != 0 && v28 == 0)
  {
LABEL_21:
    int8x16_t v34 = *(int8x16_t *)v27;
    a6.n128_u64[0] = *(void *)&v27[1].f64[0];
    goto LABEL_22;
  }
  int v32 = v26 & 5;
  int v33 = v25 & 5;
  if (!v33 || v32)
  {
    if (!v32 || v33)
    {
      if (*(_DWORD *)a1 >= 2u)
      {
        if (*(_DWORD *)a1 == 2)
        {
          double v39 = geom::internal::quadric::cost<double>((uint64_t)a3, v23);
          if (v39 >= geom::internal::quadric::cost<double>((uint64_t)a3, v27)) {
            float64x2_t v40 = (int8x16_t *)v27;
          }
          else {
            float64x2_t v40 = (int8x16_t *)v23;
          }
          int8x16_t v34 = *v40;
          a6.n128_u64[0] = v40[1].u64[0];
          goto LABEL_22;
        }
      }
      else
      {
        if (v28) {
          BOOL v36 = v29 == 0;
        }
        else {
          BOOL v36 = 1;
        }
        char v37 = v36;
        if (v32) {
          BOOL v38 = v33 == 0;
        }
        else {
          BOOL v38 = 1;
        }
        if (!v38 || (v37 & 1) == 0)
        {
          geom::internal::quadric::compute_optimal_position_along_edge<double>((uint64_t)a3, v23, v27, (float64x2_t *)&v50, v19, a8, a10, a12);
          int8x16_t v34 = v50;
          unint64_t v35 = vextq_s8(v34, v34, 8uLL).u64[0];
          a6.n128_u64[0] = v51;
          goto LABEL_23;
        }
        v19.f64[0] = fabs(a5);
        if (v19.f64[0] <= 1.0e-12)
        {
          geom::internal::triangle_mesh_decimator<double>::optimize_position_for_aspect_ratio(a1, a2, (uint64_t)&v48);
          int8x16_t v34 = v48;
          unint64_t v35 = vextq_s8(v34, v34, 8uLL).u64[0];
          a6.n128_u64[0] = v49;
          goto LABEL_23;
        }
        v47.i64[0] = 0;
        int8x16_t v46 = 0uLL;
        if (geom::internal::quadric::optimal_position<double>(a3, (uint64_t)&v46, v19, 1.0e-12, a7, a8, a9, a10.f64[0], a11))
        {
          int8x16_t v34 = v46;
          a6 = (__n128)v47;
          goto LABEL_22;
        }
        geom::internal::triangle_mesh_decimator<double>::optimize_position_for_area_and_volume_preservation(a1, a2, (uint64_t)a3, v45);
        int8x16_t v46 = v45[0];
        int8x16_t v47 = v45[1];
      }
      __asm { FMOV            V2.2D, #0.5 }
      a6 = (__n128)vmulq_f64(vaddq_f64(v23[1], v27[1]), _Q2);
      int8x16_t v34 = (int8x16_t)vmulq_f64(vaddq_f64(*v23, *v27), _Q2);
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_18:
  int8x16_t v34 = *(int8x16_t *)v23;
  a6.n128_u64[0] = *(void *)&v23[1].f64[0];
LABEL_22:
  unint64_t v35 = vextq_s8(v34, v34, 8uLL).u64[0];
LABEL_23:
  v34.i64[1] = v35;
  *(int8x16_t *)a4 = v34;
  *(__n128 *)(a4 + 16) = a6;
}

double geom::internal::quadric::cost<double>(uint64_t a1, float64x2_t *a2)
{
  _Q1 = *a2;
  _D6 = *(void *)(a1 + 48);
  _D3 = *(double *)(a1 + 8) * a2->f64[0];
  __asm
  {
    FMLA            D4, D3, V1.D[1]
    FMLA            D3, D6, V1.D[1]
  }
  double result = *(double *)(a1 + 72)
         + vmlad_n_f64(vmuld_lane_f64(vmuld_lane_f64(*(double *)(a1 + 32), *a2, 1), *a2, 1), *(double *)a1 * a2->f64[0], a2->f64[0])+ a2[1].f64[0] * *(double *)(a1 + 56) * a2[1].f64[0]+ (_D3 + *(double *)(a1 + 64) * a2[1].f64[0]) * 2.0;
  if (result < 0.0) {
    return 0.0;
  }
  return result;
}

float64_t geom::internal::quadric::compute_optimal_position_along_edge<double>@<D0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X2>, float64x2_t *a4@<X8>, float64x2_t a5@<Q0>, float64x2_t a6@<Q3>, float64x2_t a7@<Q5>, float64x2_t a8@<Q7>)
{
  a5.f64[0] = a2[1].f64[0];
  float64x2_t v9 = *a2;
  float64x2_t v10 = vsubq_f64(*a3, *a2);
  a6.f64[0] = a3[1].f64[0] - a5.f64[0];
  a7.f64[0] = *(float64_t *)(a1 + 16);
  *(void *)&v11.f64[0] = vdupq_laneq_s64(*(int64x2_t *)a1, 1).u64[0];
  v11.f64[1] = *(float64_t *)(a1 + 32);
  a8.f64[0] = *(float64_t *)(a1 + 40);
  v8.f64[0] = *(float64_t *)(a1 + 56);
  double v12 = vmulq_f64(a7, a6).f64[0];
  a7.f64[1] = a8.f64[0];
  v14.f64[0] = v12 + vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, v10));
  float64x2_t v13 = vmulq_f64(v10, a7);
  v13.f64[0] = vmulq_f64(a6, v8).f64[0] + vaddvq_f64(v13);
  v14.f64[1] = vmulq_f64(a6, a8).f64[0] + vaddvq_f64(vmulq_f64(v10, v11));
  float64x2_t v16 = vmulq_f64(a6, v13);
  double v15 = v16.f64[0] + vaddvq_f64(vmulq_f64(v10, v14));
  v16.f64[0] = 0.5;
  if (fabs(v15) > 0.000001)
  {
    float64x2_t v16 = (float64x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL);
    v8.f64[0] = *(float64_t *)(a1 + 64);
    v17.f64[0] = *(float64_t *)(a1 + 24);
    v17.f64[1] = *(float64_t *)(a1 + 48);
    v9.f64[1] = v16.f64[0];
    a5 = vmulq_f64(a5, v13);
    a5.f64[0] = (a5.f64[0] + vaddvq_f64(vmulq_f64(v9, v14)) + vmulq_f64(a6, v8).f64[0] + vaddvq_f64(vmulq_f64(v10, v17)))
              / -v15;
    v16.f64[0] = 0.0;
    if (a5.f64[0] >= 0.0)
    {
      v16.f64[0] = a5.f64[0];
      if (a5.f64[0] > 1.0) {
        v16.f64[0] = 1.0;
      }
    }
  }
  a5.f64[0] = 1.0 - v16.f64[0];
  float64x2_t v18 = vmlaq_f64(vmulq_f64(v16, a3[1]), a2[1], a5);
  *a4 = vmlaq_n_f64(vmulq_n_f64(*a3, v16.f64[0]), *a2, 1.0 - v16.f64[0]);
  a4[1] = v18;
  return a5.f64[0];
}

int8x16_t geom::internal::triangle_mesh_decimator<double>::optimize_position_for_aspect_ratio@<Q0>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  uint64_t v6 = a1[1];
  uint64_t v7 = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 4);
  v31[0] = a1 + 4;
  v31[1] = v6;
  char v52 = 0;
  if (geom::vertex_placement_constraint_factory<double>::add_shape_optimization((uint64_t)v31, a2, (uint64_t)v44) != 3)
  {
    uint64_t v11 = a1[27];
    if (a2 >= (unint64_t)((a1[28] - v11) >> 2))
    {
      uint64_t v13 = 0xFFFFFFFFLL;
      uint64_t v14 = 0xFFFFFFFFLL;
    }
    else
    {
      unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v7, *(_DWORD *)(v11 + 4 * a2) / 3u, *(_DWORD *)(v11 + 4 * a2) % 3u);
      geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v7, half_edge_for_face_vertex, v44);
      uint64_t v14 = v44[0];
      uint64_t v13 = v44[1];
    }
    uint64_t v15 = a1[1];
    float64x2_t v16 = (float64x2_t *)(v15 + 32 * v14);
    float64x2_t v17 = (float64x2_t *)(v15 + 32 * v13);
    __asm { FMOV            V2.2D, #0.5 }
    float64x2_t v9 = vmulq_f64(vaddq_f64(v16[1], v17[1]), _Q2);
    int8x16_t result = (int8x16_t)vmulq_f64(vaddq_f64(*v16, *v17), _Q2);
    goto LABEL_13;
  }
  if (v52 == 3)
  {
    int64x2_t v38 = vzip1q_s64(*(int64x2_t *)v44, v46);
    int64x2_t v39 = v48;
    int64x2_t v40 = vzip2q_s64(*(int64x2_t *)v44, v46);
    int64x2_t v41 = vdupq_laneq_s64(v48, 1);
    int64x2_t v42 = vzip1q_s64(v45, v47);
    long long v43 = v49;
    __invert_d3();
    float64x2_t v23 = v51;
    float64x2_t v24 = vmlaq_laneq_f64(vmulq_n_f64(v32, v50.f64[0]), v34, v50, 1);
    float64x2_t v25 = vmlaq_laneq_f64(vmulq_f64(v50, v33), v35, v50, 1);
    float64x2_t v26 = v36;
    float64x2_t v27 = v37;
LABEL_12:
    float64x2_t v9 = vmlaq_f64(v25, v23, v27);
    int8x16_t result = (int8x16_t)vmlaq_n_f64(v24, v26, v23.f64[0]);
    goto LABEL_13;
  }
  if (v52 == 2)
  {
    v54.columns[0].f64[0] = vmulq_f64((float64x2_t)v45, (float64x2_t)v45).f64[0]
                          + vaddvq_f64(vmulq_f64(*(float64x2_t *)v44, *(float64x2_t *)v44));
    v54.columns[1].f64[0] = vmulq_f64((float64x2_t)v45, (float64x2_t)v47).f64[0]
                          + vaddvq_f64(vmulq_f64(*(float64x2_t *)v44, (float64x2_t)v46));
    v54.columns[0].f64[1] = v54.columns[1].f64[0];
    v54.columns[1].f64[1] = vmulq_f64((float64x2_t)v47, (float64x2_t)v47).f64[0]
                          + vaddvq_f64(vmulq_f64((float64x2_t)v46, (float64x2_t)v46));
    float64x2_t v30 = v50;
    simd_double2x2 v28 = __invert_d2(v54);
    float64x2_t v23 = vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v28.columns[0], v30.f64[0]), (float64x2_t)v28.columns[1], v30, 1);
    float64x2_t v26 = *(float64x2_t *)v44;
    float64x2_t v27 = (float64x2_t)v45;
    float64x2_t v24 = vmulq_laneq_f64((float64x2_t)v46, v23, 1);
    float64x2_t v25 = vmulq_laneq_f64((float64x2_t)v47, v23, 1);
    goto LABEL_12;
  }
  if (v52 != 1)
  {
    result.i64[0] = 0;
    unint64_t v29 = 0;
    v9.f64[0] = 0.0;
    goto LABEL_14;
  }
  v8.f64[0] = v50.f64[0]
            / (vmulq_f64((float64x2_t)v45, (float64x2_t)v45).f64[0]
             + vaddvq_f64(vmulq_f64(*(float64x2_t *)v44, *(float64x2_t *)v44)));
  float64x2_t v9 = vmulq_f64((float64x2_t)v45, v8);
  int8x16_t result = (int8x16_t)vmulq_n_f64(*(float64x2_t *)v44, v8.f64[0]);
LABEL_13:
  unint64_t v29 = vextq_s8(result, result, 8uLL).u64[0];
LABEL_14:
  result.i64[1] = v29;
  *(int8x16_t *)a3 = result;
  *(float64x2_t *)(a3 + 16) = v9;
  return result;
}