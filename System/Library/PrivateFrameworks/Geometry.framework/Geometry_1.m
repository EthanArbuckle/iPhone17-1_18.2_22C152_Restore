uint64_t geom::internal::quadric::optimal_position<double>(double *a1, uint64_t a2, float64x2_t a3, double a4, double a5, float64x2_t a6, float64x2_t a7, double a8, float64x2_t a9)
{
  double v9;
  double v10;
  double v11;
  double v12;
  double v13;
  double v14;
  double v15;
  double v16;
  uint64_t v17;
  double v18;
  float64x2_t v19;
  float64x2_t v20;
  double v21;
  double v22;
  double v23;
  double v24;
  double v25;
  double v26;
  double v27;
  double v28;
  double v29;
  double v30;
  double v31;
  double v32;
  double v33;
  double v34;
  float64x2_t v35;
  double v36;
  long long v37;

  v9 = *a1;
  v10 = a1[1];
  v12 = a1[4];
  v11 = a1[5];
  v13 = *a1 * v12;
  v14 = a1[7];
  v15 = a1[2];
  v16 = v10 * v11 * v15 + v13 * v14 + v10 * v15 * v11 + -(*a1 * v11) * v11 + -(v10 * v10) * v14 + -(v15 * v12) * v15;
  v17 = 0;
  if (v16 > 0.0)
  {
    v18 = 1.0 / v16;
    v19.f64[0] = (v12 * v14 - v11 * v11) * (1.0 / v16);
    v20.f64[0] = (v14 * -v10 + v15 * v11) * (1.0 / v16);
    a3.f64[0] = (v10 * v11 + -v15 * v12) * v18;
    v21 = (v9 * v14 + -v15 * v15) * v18;
    a7.f64[0] = (v10 * v15 - *a1 * v11) * v18;
    a6.f64[0] = (v13 + -v10 * v10) * v18;
    v22 = fabs(v10);
    v23 = fabs(v15);
    v24 = fabs(v9) + v22 + v23;
    v25 = fabs(v11);
    v26 = fabs(v12) + v22 + v25;
    if (v24 >= v26) {
      v26 = v24;
    }
    v27 = fabs(v14) + v25 + v23;
    if (v26 >= v27) {
      v27 = v26;
    }
    v28 = fabs(v20.f64[0]);
    v29 = fabs(a3.f64[0]);
    v30 = v29 + fabs(v19.f64[0]) + v28;
    v31 = fabs(a7.f64[0]);
    v32 = v31 + v28 + fabs(v21);
    if (v30 < v32) {
      v30 = v32;
    }
    v33 = fabs(a6.f64[0]) + v29 + v31;
    if (v30 < v33) {
      v30 = v33;
    }
    v34 = v27 * v30;
    if (v34 > 0.0 && v34 <= 1000000.0)
    {
      v19.f64[1] = v20.f64[0];
      v20.f64[1] = v21;
      v35.f64[0] = a1[3];
      a9.f64[0] = a1[8];
      v35.f64[1] = a1[6];
      v36 = vmulq_f64(a3, a9).f64[0];
      a3.f64[1] = a7.f64[0];
      *(double *)&v37 = -(v36 + vaddvq_f64(vmulq_f64(v19, v35)));
      *((double *)&v37 + 1) = -(vmulq_f64(a7, a9).f64[0] + vaddvq_f64(vmulq_f64(v20, v35)));
      *(double *)(a2 + 16) = -(vmulq_f64(a6, a9).f64[0] + vaddvq_f64(vmulq_f64(a3, v35)));
      *(_OWORD *)a2 = v37;
      return 1;
    }
  }
  return v17;
}

uint64_t geom::internal::triangle_mesh_decimator<double>::optimize_position_for_area_and_volume_preservation@<X0>(void *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, int8x16_t *a4@<X8>)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  v8 = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 4);
  v9 = (geom::triangle_mesh_half_edge_connectivity *)a1[1];
  v44[0] = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 4);
  v44[1] = v9;
  unsigned __int8 v65 = 0;
  unint64_t v10 = a2;
  uint64_t v11 = a1[27];
  if (a2 < (unint64_t)((a1[28] - v11) >> 2))
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), *(_DWORD *)(v11 + 4 * a2) / 3u, *(_DWORD *)(v11 + 4 * a2) % 3u);
    if (geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v8, half_edge_for_face_vertex))
    {
      uint64_t result = geom::vertex_placement_constraint_factory<double>::add_boundary_preservation(v44, a2, (uint64_t)v57);
      int v14 = v65;
      if (v65 > 2u) {
        goto LABEL_12;
      }
      v15 = v44[0];
      uint64_t v16 = *((void *)v44[0] + 23);
      if (v10 >= (*((void *)v44[0] + 24) - v16) >> 2) {
        goto LABEL_11;
      }
      unsigned int v17 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v44[0], *(_DWORD *)(v16 + 4 * v10) / 3u, *(_DWORD *)(v16 + 4 * v10) % 3u);
      uint64_t result = geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v15, v17);
      if (!result) {
        goto LABEL_11;
      }
      int64x2_t v55 = 0u;
      int64x2_t v56 = 0u;
      int64x2_t v53 = 0u;
      int64x2_t v54 = 0u;
      int64x2_t v51 = 0u;
      int64x2_t v52 = 0u;
      float64x2_t v45 = 0u;
      float64x2_t v46 = 0u;
      v66 = &unk_26EA05820;
      v67 = &v51;
      v68 = &v45;
      v69 = &v66;
      geom::vertex_placement_constraint_factory<double>::loop_edge_boundaries((uint64_t)v44, a2, (uint64_t)&v66);
LABEL_10:
      _ZNSt3__110__function12__value_funcIFvPKDv3_dEED2B8nn180100Ev(&v66);
      uint64_t result = geom::vertex_placement_constraints<double>::add_objective_function((uint64_t)v57, (float64x2_t *)&v51, &v45, v24, v25, v26, v27, v28, v29);
LABEL_11:
      int v14 = v65;
      goto LABEL_12;
    }
  }
  uint64_t result = geom::vertex_placement_constraint_factory<double>::add_volume_preservation(v44, a2, (uint64_t)v57);
  int v14 = v65;
  if (v65 <= 2u)
  {
    int64x2_t v19 = *(int64x2_t *)(a3 + 16);
    *(void *)&v20.f64[0] = vdupq_laneq_s64(v19, 1).u64[0];
    v18.i64[0] = *(void *)(a3 + 40);
    v21.i64[0] = *(void *)(a3 + 16);
    v21.i64[1] = v18.i64[0];
    v22.i64[0] = vdupq_laneq_s64(*(int64x2_t *)a3, 1).u64[0];
    int64x2_t v23 = *(int64x2_t *)(a3 + 56);
    v22.i64[1] = *(void *)(a3 + 32);
    int64x2_t v51 = *(int64x2_t *)a3;
    int64x2_t v52 = v19;
    int64x2_t v53 = v22;
    int64x2_t v54 = v18;
    int64x2_t v55 = v21;
    int64x2_t v56 = v23;
    v20.f64[1] = *(float64_t *)(a3 + 48);
    float64x2_t v45 = vnegq_f64(v20);
    float64x2_t v46 = vnegq_f64((float64x2_t)vdupq_laneq_s64(v23, 1));
    uint64_t result = geom::vertex_placement_constraints<double>::add_objective_function((uint64_t)v57, (float64x2_t *)&v51, &v45, v46.f64[0], v45.f64[0], (int64x2_t)v20, *(double *)v18.i64, *(double *)v21.i64, v22);
    int v14 = v65;
    if (v65 <= 2u)
    {
      int64x2_t v55 = 0u;
      int64x2_t v56 = 0u;
      int64x2_t v53 = 0u;
      int64x2_t v54 = 0u;
      int64x2_t v51 = 0u;
      int64x2_t v52 = 0u;
      float64x2_t v45 = 0u;
      float64x2_t v46 = 0u;
      v66 = &unk_26EA05920;
      v67 = &v51;
      v68 = &v45;
      v69 = &v66;
      geom::vertex_placement_constraint_factory<double>::loop_edge_triangles(v44, a2, (uint64_t)&v66);
      goto LABEL_10;
    }
  }
LABEL_12:
  if (v14 == 3)
  {
    int64x2_t v51 = vzip1q_s64(*(int64x2_t *)v57, v59);
    int64x2_t v52 = v61;
    int64x2_t v53 = vzip2q_s64(*(int64x2_t *)v57, v59);
    int64x2_t v54 = vdupq_laneq_s64(v61, 1);
    int64x2_t v55 = vzip1q_s64(v58, v60);
    int64x2_t v56 = v62;
    uint64_t result = __invert_d3();
    float64x2_t v30 = vmlaq_f64(vmlaq_laneq_f64(vmulq_f64(v63, v46), v48, v63, 1), v64, v50);
    int8x16_t v31 = (int8x16_t)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(v45, v63.f64[0]), v47, v63, 1), v49, v64.f64[0]);
  }
  else
  {
    uint64_t v32 = a1[27];
    if (v10 >= (a1[28] - v32) >> 2)
    {
      uint64_t v34 = 0xFFFFFFFFLL;
      uint64_t v35 = 0xFFFFFFFFLL;
    }
    else
    {
      unsigned int v33 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v8, *(_DWORD *)(v32 + 4 * v10) / 3u, *(_DWORD *)(v32 + 4 * v10) % 3u);
      uint64_t result = geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v8, v33, v57);
      uint64_t v35 = v57[0];
      uint64_t v34 = v57[1];
    }
    uint64_t v36 = a1[1];
    v37 = (float64x2_t *)(v36 + 32 * v35);
    v38 = (float64x2_t *)(v36 + 32 * v34);
    __asm { FMOV            V2.2D, #0.5 }
    float64x2_t v30 = vmulq_f64(vaddq_f64(v37[1], v38[1]), _Q2);
    int8x16_t v31 = (int8x16_t)vmulq_f64(vaddq_f64(*v37, *v38), _Q2);
  }
  v31.i64[1] = vextq_s8(v31, v31, 8uLL).u64[0];
  *a4 = v31;
  a4[1] = (int8x16_t)v30;
  return result;
}

uint64_t geom::vertex_placement_constraint_factory<double>::add_shape_optimization(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  v5 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
  unint64_t v6 = a2;
  uint64_t v7 = *(void *)(*(void *)a1 + 184);
  unint64_t v8 = (*(void *)(*(void *)a1 + 192) - v7) >> 2;
  if (v8 <= a2)
  {
    *(void *)int64x2_t v55 = -1;
  }
  else
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, *(_DWORD *)(v7 + 4 * a2) / 3u, *(_DWORD *)(v7 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v5, half_edge_for_face_vertex, v55);
    v5 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
    uint64_t v7 = *(void *)(*(void *)a1 + 184);
    unint64_t v8 = (*(void *)(*(void *)a1 + 192) - v7) >> 2;
  }
  if (v8 <= v6
    || (unsigned int v10 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, *(_DWORD *)(v7 + 4 * v6) / 3u, *(_DWORD *)(v7 + 4 * v6) % 3u), !geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v5, v10)))
  {
    int half_edge_face = -1;
    goto LABEL_16;
  }
  unsigned int v11 = *(_DWORD *)(*((void *)v5 + 23) + 4 * v6);
  unsigned int v12 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, v11 / 3, v11 % 3);
  int half_edge_face = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v5, v12);
  if (geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v5, v12))
  {
LABEL_16:
    int v18 = -1;
    goto LABEL_17;
  }
  unsigned int half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(v5, v12);
  int v15 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v5, half_edge_twin);
  uint64_t v16 = 0;
  uint64_t v17 = *(void *)(*(void *)a1 + 16) + 4 * (3 * v15);
  v51[0].f64[0] = *(float64_t *)v17;
  LODWORD(v51[0].f64[1]) = *(_DWORD *)(v17 + 8);
  while (1)
  {
    int v18 = *(_DWORD *)((char *)v51[0].f64 + v16);
    if (v18 != v55[0] && v18 != v55[1]) {
      break;
    }
    v16 += 4;
    if (v16 == 12) {
      goto LABEL_16;
    }
  }
LABEL_17:
  uint64_t v20 = 0;
  int64x2_t v21 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
  uint64_t v22 = *(void *)(*(void *)a1 + 16) + 4 * (3 * half_edge_face);
  v51[0].f64[0] = *(float64_t *)v22;
  LODWORD(v51[0].f64[1]) = *(_DWORD *)(v22 + 8);
  while (1)
  {
    int v23 = *(_DWORD *)((char *)v51[0].f64 + v20);
    if (v23 != v55[0] && v23 != v55[1]) {
      break;
    }
    v20 += 4;
    if (v20 == 12)
    {
      int v23 = -1;
      break;
    }
  }
  float64x2_t v49 = 0u;
  float64x2_t v50 = 0u;
  __p = 0;
  float64x2_t v47 = 0;
  uint64_t v48 = 0;
  geom::triangle_mesh_half_edge_connectivity::get_adjacent_vertices_to_vertex(v21, v55[0], (uint64_t)&__p);
  int64x2_t v26 = (unsigned int *)__p;
  if (__p == v47)
  {
    *(void *)&long long v25 = 0;
    float64x2_t v28 = 0uLL;
    float64x2_t v27 = 0uLL;
  }
  else
  {
    float64x2_t v27 = 0uLL;
    *(void *)&long long v25 = 0;
    float64x2_t v28 = 0uLL;
    do
    {
      uint64_t v29 = *v26;
      if (v29 != v55[1])
      {
        float64x2_t v30 = (float64x2_t *)(*(void *)(a1 + 8) + 32 * v29);
        float64x2_t v27 = vaddq_f64(*v30, v27);
        float64x2_t v28 = vaddq_f64(v30[1], v28);
        float64x2_t v49 = v27;
        float64x2_t v50 = v28;
        *(double *)&long long v25 = *(double *)&v25 + 1.0;
      }
      ++v26;
    }
    while (v26 != v47);
  }
  float64x2_t v43 = v28;
  float64x2_t v44 = v27;
  long long v45 = v25;
  geom::triangle_mesh_half_edge_connectivity::get_adjacent_vertices_to_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, v55[1], (uint64_t)&__p);
  uint64_t v34 = (unsigned int *)__p;
  if (__p == v47)
  {
    long long v35 = v45;
  }
  else
  {
    float64x2_t v32 = v44;
    long long v35 = v45;
    float64x2_t v33 = v43;
    do
    {
      uint64_t v36 = *v34;
      if (v36 != v18 && v36 != v23 && v36 != v55[0])
      {
        v39 = (float64x2_t *)(*(void *)(a1 + 8) + 32 * v36);
        int64x2_t v31 = *(int64x2_t *)v39;
        float64x2_t v32 = vaddq_f64(*v39, v32);
        float64x2_t v33 = vaddq_f64(v39[1], v33);
        float64x2_t v49 = v32;
        float64x2_t v50 = v33;
        *(double *)&long long v35 = *(double *)&v35 + 1.0;
      }
      ++v34;
    }
    while (v34 != v47);
  }
  v40.f64[0] = 0.0;
  v51[0] = (float64x2_t)(unint64_t)v35;
  v51[1] = 0u;
  v51[3] = 0u;
  *(void *)&v40.f64[1] = v35;
  v51[2] = v40;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  long long v54 = v35;
  geom::vertex_placement_constraints<double>::add_objective_function(a3, v51, &v49, 0.0, *(double *)&v35, v31, v32.f64[0], *(double *)&v35, (int64x2_t)v33);
  uint64_t v41 = *(unsigned __int8 *)(a3 + 128);
  if (__p)
  {
    float64x2_t v47 = (unsigned int *)__p;
    operator delete(__p);
  }
  return v41;
}

uint64_t geom::vertex_placement_constraints<double>::add_objective_function(uint64_t a1, float64x2_t *a2, float64x2_t *a3, double a4, double a5, int64x2_t a6, double a7, double a8, int64x2_t a9)
{
  int v9 = *(unsigned __int8 *)(a1 + 128);
  if (v9 == 2)
  {
    float64x2_t v15 = *(float64x2_t *)(a1 + 16);
    float64x2_t v16 = *(float64x2_t *)(a1 + 32);
    float64x2_t v17 = *(float64x2_t *)(a1 + 48);
    float64x2_t v18 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v15), v16, 1), v17, *(float64x2_t *)a1, 1);
    v17.f64[1] = *(float64_t *)(a1 + 32);
    v15.f64[1] = *(float64_t *)a1;
    float64x2_t v19 = vmlaq_f64(vmulq_f64(v17, vnegq_f64(*(float64x2_t *)a1)), v16, v15);
    float64x2_t v20 = vmulq_f64(v19, v19);
    v16.f64[0] = vmulq_f64(v18, v18).f64[0];
    v18.f64[1] = v19.f64[0];
    v20.f64[0] = 1.0 / sqrt(v20.f64[1] + v16.f64[0] + v20.f64[0]);
    float64x2_t v21 = vmulq_laneq_f64(v20, v19, 1);
    float64x2_t v22 = vmulq_n_f64(v18, v20.f64[0]);
    float64x2_t v23 = a2[5];
    float64x2_t v24 = vmlaq_laneq_f64(vmulq_f64(a2[1], v22), a2[3], v22, 1);
    float64x2_t v25 = vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64(*a2, v22.f64[0]), a2[2], v22, 1), a2[4], v21.f64[0]);
    float64x2_t v26 = *a3;
    float64x2_t v27 = a3[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
    {
      uint64_t v269 = a1;
      float64x2_t v245 = v22;
      float64x2_t v257 = v21;
      float64x2_t v221 = v24;
      float64x2_t v233 = v25;
      float64x2_t v215 = v26;
      float64x2_t v203 = v23;
      float64x2_t v209 = v27;
      int v167 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
      float64x2_t v23 = v203;
      float64x2_t v27 = v209;
      float64x2_t v26 = v215;
      float64x2_t v24 = v221;
      float64x2_t v25 = v233;
      float64x2_t v22 = v245;
      float64x2_t v21 = v257;
      int v168 = v167;
      a1 = v269;
      if (v168)
      {
        _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared = 0x3FEFFD813C3BA1D0;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
        float64x2_t v23 = v203;
        float64x2_t v27 = v209;
        float64x2_t v26 = v215;
        float64x2_t v24 = v221;
        float64x2_t v25 = v233;
        float64x2_t v22 = v245;
        float64x2_t v21 = v257;
        a1 = v269;
      }
    }
    float64x2_t v28 = vmlaq_f64(v24, v21, v23);
    *(void *)&float64_t v29 = vextq_s8((int8x16_t)v25, (int8x16_t)v25, 8uLL).u64[0];
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
    {
      uint64_t v270 = a1;
      float64x2_t v246 = v22;
      float64x2_t v258 = v21;
      float64x2_t v222 = v28;
      float64x2_t v234 = v25;
      float64x2_t v216 = v26;
      double v204 = v29;
      float64x2_t v210 = v27;
      int v169 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
      float64_t v29 = v204;
      float64x2_t v27 = v210;
      float64x2_t v26 = v216;
      float64x2_t v28 = v222;
      float64x2_t v25 = v234;
      float64x2_t v22 = v246;
      float64x2_t v21 = v258;
      int v170 = v169;
      a1 = v270;
      if (v170)
      {
        _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared = 0x3F33F61E22F1838ELL;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
        float64_t v29 = v204;
        float64x2_t v27 = v210;
        float64x2_t v26 = v216;
        float64x2_t v28 = v222;
        float64x2_t v25 = v234;
        float64x2_t v22 = v246;
        float64x2_t v21 = v258;
        a1 = v270;
      }
    }
    uint64_t v30 = *(unsigned __int8 *)(a1 + 128);
    if (v30 == 2)
    {
      float64x2_t v85 = *(float64x2_t *)(a1 + 16);
      float64x2_t v86 = *(float64x2_t *)(a1 + 32);
      float64x2_t v87 = *(float64x2_t *)(a1 + 48);
      float64x2_t v88 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v85), v86, 1), v87, *(float64x2_t *)a1, 1);
      v87.f64[1] = *(float64_t *)(a1 + 32);
      v85.f64[1] = *(float64_t *)a1;
      float64x2_t v89 = vmlaq_f64(vmulq_f64(v87, vnegq_f64(*(float64x2_t *)a1)), v86, v85);
      v85.f64[0] = vmulq_f64(v88, v88).f64[0];
      v88.f64[1] = v89.f64[0];
      v86.f64[0] = v25.f64[0];
      v86.f64[1] = v29;
      float64x2_t v90 = vmulq_f64(v86, v88);
      v88.f64[0] = vmulq_laneq_f64(v28, v89, 1).f64[0];
      v90.f64[0] = vaddvq_f64(v90);
      float64x2_t v91 = vmulq_f64(v89, v89);
      if ((v88.f64[0] + v90.f64[0]) * (v88.f64[0] + v90.f64[0]) <= *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared
                                                                  * ((vmulq_f64(v28, v28).f64[0]
                                                                    + vaddvq_f64(vmulq_f64(v86, v86)))
                                                                   * (v91.f64[1] + v85.f64[0] + v91.f64[0])))
        return 0;
    }
    else if (v30 == 1)
    {
      float64x2_t v94 = *(float64x2_t *)(a1 + 16);
      float64_t v95 = vmulq_f64(v94, v94).f64[0] + vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, *(float64x2_t *)a1));
      v96.f64[0] = v25.f64[0];
      v96.f64[1] = v29;
      v94.f64[0] = vmulq_f64(v28, v94).f64[0];
      double v97 = vaddvq_f64(vmulq_f64(v25, *(float64x2_t *)a1));
      if ((v94.f64[0] + v97) * (v94.f64[0] + v97) >= *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared
                                                    * ((vmulq_f64(v28, v28).f64[0] + vaddvq_f64(vmulq_f64(v96, v96)))
                                                     * v95))
        return 0;
    }
    else
    {
      if (*(unsigned char *)(a1 + 128)) {
        return 0;
      }
      v31.f64[0] = v25.f64[0];
      v31.f64[1] = v29;
      if (sqrt(vmulq_f64(v28, v28).f64[0] + vaddvq_f64(vmulq_f64(v31, v31))) <= 0.000001) {
        return 0;
      }
    }
    v92 = (float64x2_t *)(a1 + 32 * v30);
    float64x2_t *v92 = v25;
    v92[1] = v28;
    uint64_t v93 = *(unsigned __int8 *)(a1 + 128);
    *(double *)(a1 + 8 * v93 + 96) = vmulq_f64(v27, v21).f64[0] + vaddvq_f64(vmulq_f64(v26, v22));
    *(unsigned char *)(a1 + 128) = v93 + 1;
    return 1;
  }
  if (v9 == 1)
  {
    float64x2_t v34 = *(float64x2_t *)a1;
    float64x2_t v33 = *(float64x2_t *)(a1 + 16);
    double v35 = fabs(v33.f64[0]);
    double v36 = *(double *)(a1 + 8);
    if (v35 <= 2.22044605e-16)
    {
      *(double *)a9.i64 = -v36;
      float64x2_t v38 = 0uLL;
      float64x2_t v37 = (float64x2_t)vzip1q_s64(a9, (int64x2_t)v34);
    }
    else
    {
      v37.f64[0] = 0.0;
      v37.f64[1] = -v33.f64[0];
      float64x2_t v38 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1);
    }
    float64x2_t v39 = vmulq_f64(v38, v38);
    v39.f64[0] = 1.0 / sqrt(v39.f64[0] + vaddvq_f64(vmulq_f64(v37, v37)));
    float64x2_t v40 = vmulq_f64(v38, v39);
    float64x2_t v41 = vmulq_n_f64(v37, v39.f64[0]);
    float64x2_t v42 = (float64x2_t)vextq_s8((int8x16_t)v41, (int8x16_t)v41, 8uLL);
    if (v35 <= 2.22044605e-16)
    {
      *(double *)a6.i64 = -v36;
      float64x2_t v43 = 0uLL;
      float64x2_t v44 = (float64x2_t)vzip1q_s64(a6, (int64x2_t)v34);
    }
    else
    {
      float64x2_t v43 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1);
      v44.f64[0] = 0.0;
      v44.f64[1] = -v33.f64[0];
    }
    float64x2_t v45 = vmulq_f64(v43, v43);
    float64x2_t v54 = vmulq_f64(v44, v44);
    v45.f64[0] = 1.0 / sqrt(v45.f64[0] + vaddvq_f64(v54));
    float64x2_t v46 = vmulq_n_f64(v44, v45.f64[0]);
    float64x2_t v47 = vmulq_f64(v43, v45);
    v48.f64[0] = v47.f64[0];
    v48.f64[1] = v46.f64[0];
    float64x2_t v49 = vnegq_f64(v33);
    v33.f64[1] = *(float64_t *)a1;
    float64x2_t v50 = vmlaq_laneq_f64(vmulq_laneq_f64(v49, v46, 1), v47, v34, 1);
    float64x2_t v51 = vmlaq_f64(vmulq_f64(v48, vnegq_f64(v34)), v46, v33);
    float64x2_t v52 = vmulq_f64(v51, v51);
    double v53 = vmulq_f64(v50, v50).f64[0];
    v50.f64[1] = v51.f64[0];
    v54.f64[0] = 1.0 / sqrt(v52.f64[1] + v53 + v52.f64[0]);
    float64x2_t v55 = vmulq_n_f64(v50, v54.f64[0]);
    float64x2_t v56 = a2[5];
    float64x2_t v57 = vmlaq_f64(vmulq_f64(v41, a2[1]), v42, a2[3]);
    float64x2_t v58 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a2, v41.f64[0]), a2[2], v42.f64[0]), a2[4], v40.f64[0]);
    float64x2_t v60 = *a3;
    float64x2_t v59 = a3[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
    {
      uint64_t v271 = a1;
      v259 = a2;
      v247 = a3;
      float64x2_t v235 = v55;
      float64_t v205 = v41.f64[0];
      float64x2_t v211 = v40;
      float64x2_t v195 = v58;
      float64_t v199 = v42.f64[0];
      float64x2_t v191 = v59;
      float64x2_t v193 = v57;
      float64x2_t v189 = v60;
      float64x2_t v217 = v54;
      float64x2_t v223 = v51;
      float64x2_t v187 = v56;
      int v171 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
      float64x2_t v56 = v187;
      float64x2_t v60 = v189;
      float64x2_t v54 = v217;
      float64x2_t v51 = v223;
      float64x2_t v59 = v191;
      float64x2_t v57 = v193;
      float64x2_t v58 = v195;
      v42.f64[0] = v199;
      v41.f64[0] = v205;
      float64x2_t v40 = v211;
      float64x2_t v55 = v235;
      a3 = v247;
      a2 = v259;
      int v172 = v171;
      a1 = v271;
      if (v172)
      {
        _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared = 0x3FEFFD813C3BA1D0;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
        float64x2_t v56 = v187;
        float64x2_t v60 = v189;
        float64x2_t v54 = v217;
        float64x2_t v51 = v223;
        float64x2_t v59 = v191;
        float64x2_t v57 = v193;
        float64x2_t v58 = v195;
        v42.f64[0] = v199;
        v41.f64[0] = v205;
        float64x2_t v40 = v211;
        float64x2_t v55 = v235;
        a3 = v247;
        a2 = v259;
        a1 = v271;
      }
    }
    float64x2_t v61 = (float64x2_t)vextq_s8((int8x16_t)v55, (int8x16_t)v55, 8uLL);
    float64x2_t v62 = vmulq_laneq_f64(v54, v51, 1);
    float64x2_t v63 = vmlaq_f64(v57, v40, v56);
    *(void *)&float64_t v64 = vextq_s8((int8x16_t)v58, (int8x16_t)v58, 8uLL).u64[0];
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
    {
      uint64_t v272 = a1;
      v260 = a2;
      v248 = a3;
      float64x2_t v224 = v62;
      float64x2_t v236 = v55;
      float64x2_t v218 = v61;
      float64_t v206 = v41.f64[0];
      float64x2_t v212 = v40;
      float64x2_t v196 = v58;
      float64_t v200 = v42.f64[0];
      float64x2_t v192 = v59;
      float64x2_t v194 = v63;
      double v188 = v64;
      float64x2_t v190 = v60;
      int v173 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
      float64_t v64 = v188;
      float64x2_t v60 = v190;
      float64x2_t v59 = v192;
      float64x2_t v63 = v194;
      float64x2_t v58 = v196;
      v42.f64[0] = v200;
      v41.f64[0] = v206;
      float64x2_t v40 = v212;
      float64x2_t v61 = v218;
      float64x2_t v62 = v224;
      float64x2_t v55 = v236;
      a3 = v248;
      a2 = v260;
      int v174 = v173;
      a1 = v272;
      if (v174)
      {
        _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared = 0x3F33F61E22F1838ELL;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
        float64_t v64 = v188;
        float64x2_t v60 = v190;
        float64x2_t v59 = v192;
        float64x2_t v63 = v194;
        float64x2_t v58 = v196;
        v42.f64[0] = v200;
        v41.f64[0] = v206;
        float64x2_t v40 = v212;
        float64x2_t v61 = v218;
        float64x2_t v62 = v224;
        float64x2_t v55 = v236;
        a3 = v248;
        a2 = v260;
        a1 = v272;
      }
    }
    uint64_t v65 = *(unsigned __int8 *)(a1 + 128);
    if (v65 == 2)
    {
      float64x2_t v98 = *(float64x2_t *)(a1 + 16);
      float64x2_t v99 = *(float64x2_t *)(a1 + 32);
      float64x2_t v100 = *(float64x2_t *)(a1 + 48);
      float64x2_t v101 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v98), v99, 1), v100, *(float64x2_t *)a1, 1);
      v100.f64[1] = *(float64_t *)(a1 + 32);
      v98.f64[1] = *(float64_t *)a1;
      float64x2_t v102 = vmlaq_f64(vmulq_f64(v100, vnegq_f64(*(float64x2_t *)a1)), v99, v98);
      v98.f64[0] = vmulq_f64(v101, v101).f64[0];
      v101.f64[1] = v102.f64[0];
      v99.f64[0] = v58.f64[0];
      v99.f64[1] = v64;
      float64x2_t v103 = vmulq_f64(v99, v101);
      v101.f64[0] = vmulq_laneq_f64(v63, v102, 1).f64[0];
      v103.f64[0] = vaddvq_f64(v103);
      float64x2_t v104 = vmulq_f64(v102, v102);
      if ((v101.f64[0] + v103.f64[0]) * (v101.f64[0] + v103.f64[0]) > *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared
                                                                     * ((vmulq_f64(v63, v63).f64[0]
                                                                       + vaddvq_f64(vmulq_f64(v99, v99)))
                                                                      * (v104.f64[1] + v98.f64[0] + v104.f64[0])))
        goto LABEL_47;
    }
    else
    {
      if (v65 != 1)
      {
        if (*(unsigned char *)(a1 + 128)) {
          goto LABEL_30;
        }
        v66.f64[0] = v58.f64[0];
        v66.f64[1] = v64;
        if (sqrt(vmulq_f64(v63, v63).f64[0] + vaddvq_f64(vmulq_f64(v66, v66))) <= 0.000001) {
          goto LABEL_30;
        }
LABEL_47:
        v41.f64[1] = v42.f64[0];
        v105 = (float64x2_t *)(a1 + 32 * v65);
        float64x2_t *v105 = v58;
        v105[1] = v63;
        uint64_t v106 = *(unsigned __int8 *)(a1 + 128);
        *(double *)(a1 + 8 * v106 + 96) = vmulq_f64(v40, v59).f64[0] + vaddvq_f64(vmulq_f64(v41, v60));
        *(unsigned char *)(a1 + 128) = v106 + 1;
        int v67 = 1;
        goto LABEL_48;
      }
      float64x2_t v117 = *(float64x2_t *)(a1 + 16);
      float64_t v118 = vmulq_f64(v117, v117).f64[0] + vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, *(float64x2_t *)a1));
      v119.f64[0] = v58.f64[0];
      v119.f64[1] = v64;
      v117.f64[0] = vmulq_f64(v63, v117).f64[0];
      double v120 = vaddvq_f64(vmulq_f64(v58, *(float64x2_t *)a1));
      if ((v117.f64[0] + v120) * (v117.f64[0] + v120) < *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared
                                                       * ((vmulq_f64(v63, v63).f64[0] + vaddvq_f64(vmulq_f64(v119, v119)))
                                                        * v118))
        goto LABEL_47;
    }
LABEL_30:
    int v67 = 0;
LABEL_48:
    float64x2_t v107 = a2[5];
    float64x2_t v108 = vmlaq_f64(vmulq_f64(v55, a2[1]), v61, a2[3]);
    float64x2_t v109 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a2, v55.f64[0]), a2[2], v61.f64[0]), a2[4], v62.f64[0]);
    float64x2_t v111 = *a3;
    float64x2_t v110 = a3[1];
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
    {
      uint64_t v275 = a1;
      int v263 = v67;
      float64x2_t v227 = v62;
      float64_t v239 = v55.f64[0];
      float64_t v219 = v61.f64[0];
      float64x2_t v251 = v109;
      float64x2_t v207 = v110;
      float64x2_t v213 = v108;
      float64x2_t v197 = v107;
      float64x2_t v201 = v111;
      int v179 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
      float64x2_t v107 = v197;
      float64x2_t v111 = v201;
      float64x2_t v110 = v207;
      float64x2_t v108 = v213;
      v55.f64[0] = v239;
      float64x2_t v109 = v251;
      v61.f64[0] = v219;
      float64x2_t v62 = v227;
      int v67 = v263;
      int v180 = v179;
      a1 = v275;
      if (v180)
      {
        _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared = 0x3FEFFD813C3BA1D0;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
        float64x2_t v107 = v197;
        float64x2_t v111 = v201;
        float64x2_t v110 = v207;
        float64x2_t v108 = v213;
        v55.f64[0] = v239;
        float64x2_t v109 = v251;
        v61.f64[0] = v219;
        float64x2_t v62 = v227;
        int v67 = v263;
        a1 = v275;
      }
    }
    float64x2_t v112 = vmlaq_f64(v108, v62, v107);
    *(void *)&float64_t v113 = vextq_s8((int8x16_t)v109, (int8x16_t)v109, 8uLL).u64[0];
    if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
    {
      uint64_t v276 = a1;
      int v264 = v67;
      float64x2_t v228 = v62;
      float64_t v240 = v55.f64[0];
      float64_t v220 = v61.f64[0];
      float64x2_t v252 = v109;
      float64x2_t v208 = v110;
      float64x2_t v214 = v112;
      double v198 = v113;
      float64x2_t v202 = v111;
      int v181 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
      float64_t v113 = v198;
      float64x2_t v111 = v202;
      float64x2_t v110 = v208;
      float64x2_t v112 = v214;
      v55.f64[0] = v240;
      float64x2_t v109 = v252;
      v61.f64[0] = v220;
      float64x2_t v62 = v228;
      int v67 = v264;
      int v182 = v181;
      a1 = v276;
      if (v182)
      {
        _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared = 0x3F33F61E22F1838ELL;
        __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
        float64_t v113 = v198;
        float64x2_t v111 = v202;
        float64x2_t v110 = v208;
        float64x2_t v112 = v214;
        v55.f64[0] = v240;
        float64x2_t v109 = v252;
        v61.f64[0] = v220;
        float64x2_t v62 = v228;
        int v67 = v264;
        a1 = v276;
      }
    }
    uint64_t v114 = *(unsigned __int8 *)(a1 + 128);
    if (v114 == 2)
    {
      float64x2_t v138 = *(float64x2_t *)(a1 + 16);
      float64x2_t v139 = *(float64x2_t *)(a1 + 32);
      float64x2_t v140 = *(float64x2_t *)(a1 + 48);
      float64x2_t v141 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v138), v139, 1), v140, *(float64x2_t *)a1, 1);
      v140.f64[1] = *(float64_t *)(a1 + 32);
      v138.f64[1] = *(float64_t *)a1;
      float64x2_t v142 = vmlaq_f64(vmulq_f64(v140, vnegq_f64(*(float64x2_t *)a1)), v139, v138);
      v138.f64[0] = vmulq_f64(v141, v141).f64[0];
      v141.f64[1] = v142.f64[0];
      v139.f64[0] = v109.f64[0];
      v139.f64[1] = v113;
      float64x2_t v143 = vmulq_f64(v139, v141);
      v141.f64[0] = vmulq_laneq_f64(v112, v142, 1).f64[0];
      v143.f64[0] = vaddvq_f64(v143);
      float64x2_t v144 = vmulq_f64(v142, v142);
      if ((v141.f64[0] + v143.f64[0]) * (v141.f64[0] + v143.f64[0]) > *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared
                                                                     * ((vmulq_f64(v112, v112).f64[0]
                                                                       + vaddvq_f64(vmulq_f64(v139, v139)))
                                                                      * (v144.f64[1] + v138.f64[0] + v144.f64[0])))
        goto LABEL_69;
    }
    else
    {
      if (v114 != 1)
      {
        if (*(unsigned char *)(a1 + 128)) {
          goto LABEL_54;
        }
        v115.f64[0] = v109.f64[0];
        v115.f64[1] = v113;
        if (sqrt(vmulq_f64(v112, v112).f64[0] + vaddvq_f64(vmulq_f64(v115, v115))) <= 0.000001) {
          goto LABEL_54;
        }
LABEL_69:
        v55.f64[1] = v61.f64[0];
        v145 = (float64x2_t *)(a1 + 32 * v114);
        float64x2_t *v145 = v109;
        v145[1] = v112;
        uint64_t v146 = *(unsigned __int8 *)(a1 + 128);
        *(double *)(a1 + 8 * v146 + 96) = vmulq_f64(v62, v110).f64[0] + vaddvq_f64(vmulq_f64(v55, v111));
        *(unsigned char *)(a1 + 128) = v146 + 1;
        int v116 = 1;
        return v67 | v116;
      }
      float64x2_t v147 = *(float64x2_t *)(a1 + 16);
      float64_t v148 = vmulq_f64(v147, v147).f64[0] + vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, *(float64x2_t *)a1));
      v149.f64[0] = v109.f64[0];
      v149.f64[1] = v113;
      v147.f64[0] = vmulq_f64(v112, v147).f64[0];
      double v150 = vaddvq_f64(vmulq_f64(v109, *(float64x2_t *)a1));
      if ((v147.f64[0] + v150) * (v147.f64[0] + v150) < *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared
                                                       * ((vmulq_f64(v112, v112).f64[0]
                                                         + vaddvq_f64(vmulq_f64(v149, v149)))
                                                        * v148))
        goto LABEL_69;
    }
LABEL_54:
    int v116 = 0;
    return v67 | v116;
  }
  if (*(unsigned char *)(a1 + 128)) {
    return 0;
  }
  uint64_t v10 = *(void *)&a3->f64[0];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v267 = a1;
    v255 = a2;
    v243 = a3;
    uint64_t v231 = v10;
    int v163 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
    uint64_t v10 = v231;
    a3 = v243;
    a2 = v255;
    int v164 = v163;
    a1 = v267;
    if (v164)
    {
      _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared = 0x3FEFFD813C3BA1D0;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
      uint64_t v10 = v231;
      a3 = v243;
      a2 = v255;
      a1 = v267;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v268 = a1;
    v256 = a2;
    v244 = a3;
    uint64_t v232 = v10;
    int v165 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
    uint64_t v10 = v232;
    a3 = v244;
    a2 = v256;
    int v166 = v165;
    a1 = v268;
    if (v166)
    {
      _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared = 0x3F33F61E22F1838ELL;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
      uint64_t v10 = v232;
      a3 = v244;
      a2 = v256;
      a1 = v268;
    }
  }
  uint64_t v11 = *(unsigned __int8 *)(a1 + 128);
  if (v11 == 2)
  {
    float64x2_t v68 = *(float64x2_t *)(a1 + 16);
    float64x2_t v69 = *(float64x2_t *)(a1 + 32);
    float64x2_t v70 = *(float64x2_t *)(a1 + 48);
    float64x2_t v71 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v68), v69, 1), v70, *(float64x2_t *)a1, 1);
    v70.f64[1] = *(float64_t *)(a1 + 32);
    v68.f64[1] = *(float64_t *)a1;
    float64x2_t v72 = vmlaq_f64(vmulq_f64(v70, vnegq_f64(*(float64x2_t *)a1)), v69, v68);
    v69.f64[0] = vmulq_f64(v71, v71).f64[0];
    v71.f64[1] = v72.f64[0];
    float64x2_t v12 = *a2;
    float64x2_t v13 = a2[1];
    double v73 = vmulq_laneq_f64(v13, v72, 1).f64[0];
    v71.f64[0] = vaddvq_f64(vmulq_f64(*a2, v71));
    float64x2_t v74 = vmulq_f64(v72, v72);
    if ((v73 + v71.f64[0]) * (v73 + v71.f64[0]) > *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared
                                                 * ((vmulq_f64(v13, v13).f64[0] + vaddvq_f64(vmulq_f64(v12, v12)))
                                                  * (v74.f64[1] + v69.f64[0] + v74.f64[0])))
      goto LABEL_32;
  }
  else
  {
    if (v11 != 1)
    {
      if (*(unsigned char *)(a1 + 128)) {
        goto LABEL_10;
      }
      float64x2_t v12 = *a2;
      float64x2_t v13 = a2[1];
      if (sqrt(vmulq_f64(v13, v13).f64[0] + vaddvq_f64(vmulq_f64(v12, v12))) <= 0.000001) {
        goto LABEL_10;
      }
LABEL_32:
      v75 = (float64x2_t *)(a1 + 32 * v11);
      float64x2_t *v75 = v12;
      v75[1] = v13;
      uint64_t v76 = *(unsigned __int8 *)(a1 + 128);
      *(void *)(a1 + 8 * v76 + 96) = v10;
      *(unsigned char *)(a1 + 128) = v76 + 1;
      int v14 = 1;
      goto LABEL_33;
    }
    float64x2_t v82 = *(float64x2_t *)(a1 + 16);
    float64_t v83 = vmulq_f64(v82, v82).f64[0] + vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, *(float64x2_t *)a1));
    float64x2_t v12 = *a2;
    float64x2_t v13 = a2[1];
    v82.f64[0] = vmulq_f64(v82, v13).f64[0];
    double v84 = vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, *a2));
    if ((v82.f64[0] + v84) * (v82.f64[0] + v84) < *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared
                                                 * (v83
                                                  * (vmulq_f64(v13, v13).f64[0] + vaddvq_f64(vmulq_f64(v12, v12)))))
      goto LABEL_32;
  }
LABEL_10:
  int v14 = 0;
LABEL_33:
  uint64_t v77 = *(void *)&a3->f64[1];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v273 = a1;
    v261 = a2;
    v249 = a3;
    int v237 = v14;
    uint64_t v225 = v77;
    int v175 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
    uint64_t v77 = v225;
    int v14 = v237;
    a3 = v249;
    a2 = v261;
    int v176 = v175;
    a1 = v273;
    if (v176)
    {
      _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared = 0x3FEFFD813C3BA1D0;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
      uint64_t v77 = v225;
      int v14 = v237;
      a3 = v249;
      a2 = v261;
      a1 = v273;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v274 = a1;
    v262 = a2;
    v250 = a3;
    int v238 = v14;
    uint64_t v226 = v77;
    int v177 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
    uint64_t v77 = v226;
    int v14 = v238;
    a3 = v250;
    a2 = v262;
    int v178 = v177;
    a1 = v274;
    if (v178)
    {
      _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared = 0x3F33F61E22F1838ELL;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
      uint64_t v77 = v226;
      int v14 = v238;
      a3 = v250;
      a2 = v262;
      a1 = v274;
    }
  }
  uint64_t v78 = *(unsigned __int8 *)(a1 + 128);
  if (v78 == 2)
  {
    float64x2_t v121 = *(float64x2_t *)(a1 + 16);
    float64x2_t v122 = *(float64x2_t *)(a1 + 32);
    float64x2_t v123 = *(float64x2_t *)(a1 + 48);
    float64x2_t v124 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v121), v122, 1), v123, *(float64x2_t *)a1, 1);
    v123.f64[1] = *(float64_t *)(a1 + 32);
    v121.f64[1] = *(float64_t *)a1;
    float64x2_t v125 = vmlaq_f64(vmulq_f64(v123, vnegq_f64(*(float64x2_t *)a1)), v122, v121);
    v122.f64[0] = vmulq_f64(v124, v124).f64[0];
    v124.f64[1] = v125.f64[0];
    float64x2_t v79 = a2[2];
    float64x2_t v80 = a2[3];
    double v126 = vmulq_laneq_f64(v80, v125, 1).f64[0];
    v124.f64[0] = vaddvq_f64(vmulq_f64(v79, v124));
    float64x2_t v127 = vmulq_f64(v125, v125);
    if ((v126 + v124.f64[0]) * (v126 + v124.f64[0]) > *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared
                                                     * ((vmulq_f64(v80, v80).f64[0] + vaddvq_f64(vmulq_f64(v79, v79)))
                                                      * (v127.f64[1] + v122.f64[0] + v127.f64[0])))
      goto LABEL_58;
  }
  else
  {
    if (v78 != 1)
    {
      if (*(unsigned char *)(a1 + 128)) {
        goto LABEL_39;
      }
      float64x2_t v79 = a2[2];
      float64x2_t v80 = a2[3];
      if (sqrt(vmulq_f64(v80, v80).f64[0] + vaddvq_f64(vmulq_f64(v79, v79))) <= 0.000001) {
        goto LABEL_39;
      }
LABEL_58:
      v128 = (float64x2_t *)(a1 + 32 * v78);
      float64x2_t *v128 = v79;
      v128[1] = v80;
      uint64_t v129 = *(unsigned __int8 *)(a1 + 128);
      *(void *)(a1 + 8 * v129 + 96) = v77;
      *(unsigned char *)(a1 + 128) = v129 + 1;
      int v81 = 1;
      goto LABEL_59;
    }
    float64x2_t v135 = *(float64x2_t *)(a1 + 16);
    float64_t v136 = vmulq_f64(v135, v135).f64[0] + vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, *(float64x2_t *)a1));
    float64x2_t v79 = a2[2];
    float64x2_t v80 = a2[3];
    v135.f64[0] = vmulq_f64(v135, v80).f64[0];
    double v137 = vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, v79));
    if ((v135.f64[0] + v137) * (v135.f64[0] + v137) < *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared
                                                     * (v136
                                                      * (vmulq_f64(v80, v80).f64[0] + vaddvq_f64(vmulq_f64(v79, v79)))))
      goto LABEL_58;
  }
LABEL_39:
  int v81 = 0;
LABEL_59:
  uint64_t v130 = *(void *)&a3[1].f64[0];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v277 = a1;
    v265 = a2;
    int v241 = v14;
    uint64_t v229 = v130;
    int v253 = v81;
    int v183 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
    int v81 = v253;
    uint64_t v130 = v229;
    int v14 = v241;
    a2 = v265;
    int v184 = v183;
    a1 = v277;
    if (v184)
    {
      _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared = 0x3FEFFD813C3BA1D0;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
      int v81 = v253;
      uint64_t v130 = v229;
      int v14 = v241;
      a2 = v265;
      a1 = v277;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v278 = a1;
    v266 = a2;
    int v242 = v14;
    uint64_t v230 = v130;
    int v254 = v81;
    int v185 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
    int v81 = v254;
    uint64_t v130 = v230;
    int v14 = v242;
    a2 = v266;
    int v186 = v185;
    a1 = v278;
    if (v186)
    {
      _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared = 0x3F33F61E22F1838ELL;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
      int v81 = v254;
      uint64_t v130 = v230;
      int v14 = v242;
      a2 = v266;
      a1 = v278;
    }
  }
  uint64_t v131 = *(unsigned __int8 *)(a1 + 128);
  if (v131 == 2)
  {
    float64x2_t v151 = *(float64x2_t *)(a1 + 16);
    float64x2_t v152 = *(float64x2_t *)(a1 + 32);
    float64x2_t v153 = *(float64x2_t *)(a1 + 48);
    float64x2_t v154 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v151), v152, 1), v153, *(float64x2_t *)a1, 1);
    v153.f64[1] = *(float64_t *)(a1 + 32);
    v151.f64[1] = *(float64_t *)a1;
    float64x2_t v155 = vmlaq_f64(vmulq_f64(v153, vnegq_f64(*(float64x2_t *)a1)), v152, v151);
    v152.f64[0] = vmulq_f64(v154, v154).f64[0];
    v154.f64[1] = v155.f64[0];
    float64x2_t v132 = a2[4];
    float64x2_t v133 = a2[5];
    double v156 = vmulq_laneq_f64(v133, v155, 1).f64[0];
    v154.f64[0] = vaddvq_f64(vmulq_f64(v132, v154));
    float64x2_t v157 = vmulq_f64(v155, v155);
    if ((v156 + v154.f64[0]) * (v156 + v154.f64[0]) > *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared
                                                     * ((vmulq_f64(v133, v133).f64[0] + vaddvq_f64(vmulq_f64(v132, v132)))
                                                      * (v157.f64[1] + v152.f64[0] + v157.f64[0])))
      goto LABEL_74;
  }
  else
  {
    if (v131 != 1)
    {
      if (*(unsigned char *)(a1 + 128)) {
        goto LABEL_65;
      }
      float64x2_t v132 = a2[4];
      float64x2_t v133 = a2[5];
      if (sqrt(vmulq_f64(v133, v133).f64[0] + vaddvq_f64(vmulq_f64(v132, v132))) <= 0.000001) {
        goto LABEL_65;
      }
LABEL_74:
      v158 = (float64x2_t *)(a1 + 32 * v131);
      float64x2_t *v158 = v132;
      v158[1] = v133;
      uint64_t v159 = *(unsigned __int8 *)(a1 + 128);
      *(void *)(a1 + 8 * v159 + 96) = v130;
      *(unsigned char *)(a1 + 128) = v159 + 1;
      int v134 = 1;
      return v14 | v81 | v134;
    }
    float64x2_t v160 = *(float64x2_t *)(a1 + 16);
    float64_t v161 = vmulq_f64(v160, v160).f64[0] + vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, *(float64x2_t *)a1));
    float64x2_t v132 = a2[4];
    float64x2_t v133 = a2[5];
    v160.f64[0] = vmulq_f64(v160, v133).f64[0];
    double v162 = vaddvq_f64(vmulq_f64(*(float64x2_t *)a1, v132));
    if ((v160.f64[0] + v162) * (v160.f64[0] + v162) < *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared
                                                     * (v161
                                                      * (vmulq_f64(v133, v133).f64[0] + vaddvq_f64(vmulq_f64(v132, v132)))))
      goto LABEL_74;
  }
LABEL_65:
  int v134 = 0;
  return v14 | v81 | v134;
}

uint64_t geom::vertex_placement_constraint_factory<double>::add_boundary_preservation(geom::triangle_mesh_half_edge_connectivity **a1, unsigned int a2, uint64_t a3)
{
  v92[4] = *MEMORY[0x263EF8340];
  v4 = *a1;
  uint64_t v5 = *((void *)*a1 + 23);
  if (a2 >= (unint64_t)((*((void *)*a1 + 24) - v5) >> 2)
    || (unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*a1, *(_DWORD *)(v5 + 4 * a2) / 3u, *(_DWORD *)(v5 + 4 * a2) % 3u), !geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v4, half_edge_for_face_vertex)))
  {
    LOBYTE(v23) = *(unsigned char *)(a3 + 128);
    return v23;
  }
  float64x2_t v90 = 0u;
  float64x2_t v91 = 0u;
  float64x2_t v88 = 0u;
  float64x2_t v89 = 0u;
  v92[0] = &unk_26EA05790;
  v92[1] = &v90;
  v92[2] = &v88;
  v92[3] = v92;
  geom::vertex_placement_constraint_factory<double>::loop_edge_boundaries((uint64_t)a1, a2, (uint64_t)v92);
  _ZNSt3__110__function12__value_funcIFvPKDv3_dEED2B8nn180100Ev(v92);
  float64x2_t v9 = v91;
  v10.f64[0] = v89.f64[0];
  double v11 = vmulq_f64(v9, v9).f64[0];
  v9.f64[1] = v90.f64[0];
  float64x2_t v12 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v91), v88, 1), v89, v90, 1);
  v10.f64[1] = v88.f64[0];
  float64x2_t v13 = vmlaq_f64(vmulq_f64(v10, vnegq_f64(v90)), v88, v9);
  v14.f64[0] = v12.f64[0];
  v14.f64[1] = v13.f64[0];
  float64x2_t v15 = vmulq_f64(v90, v90);
  v15.f64[0] = v11 + vaddvq_f64(v15);
  float64x2_t v16 = vmulq_n_f64(v14, v15.f64[0]);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    float64x2_t v80 = v15;
    float64x2_t v84 = v14;
    float64x2_t v73 = v12;
    float64x2_t v76 = v16;
    float64x2_t v71 = v13;
    int v64 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
    float64x2_t v16 = v76;
    float64x2_t v15 = v80;
    float64x2_t v13 = v71;
    float64x2_t v12 = v73;
    float64x2_t v14 = v84;
    if (v64)
    {
      _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared = 0x3FEFFD813C3BA1D0;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
      float64x2_t v16 = v76;
      float64x2_t v15 = v80;
      float64x2_t v13 = v71;
      float64x2_t v12 = v73;
      float64x2_t v14 = v84;
    }
  }
  float64x2_t v17 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1);
  float64x2_t v18 = (float64x2_t)vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL);
  float64x2_t v19 = vmulq_laneq_f64(v15, v13, 1);
  *(void *)&float64_t v20 = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    float64x2_t v81 = v17;
    float64_t v85 = v14.f64[0];
    float64x2_t v70 = v18;
    float64x2_t v72 = v13;
    float64x2_t v74 = v12;
    float64x2_t v77 = v16;
    double v68 = v20;
    float64x2_t v69 = v19;
    int v65 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
    float64_t v20 = v68;
    float64x2_t v19 = v69;
    float64x2_t v13 = v72;
    float64x2_t v12 = v74;
    float64x2_t v16 = v77;
    float64x2_t v17 = v81;
    float64x2_t v18 = v70;
    v14.f64[0] = v85;
    if (v65)
    {
      _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared = 0x3F33F61E22F1838ELL;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
      float64_t v20 = v68;
      float64x2_t v19 = v69;
      float64x2_t v13 = v72;
      float64x2_t v12 = v74;
      float64x2_t v16 = v77;
      float64x2_t v17 = v81;
      float64x2_t v18 = v70;
      v14.f64[0] = v85;
    }
  }
  uint64_t v21 = *(unsigned __int8 *)(a3 + 128);
  if (v21 == 2)
  {
    float64x2_t v25 = *(float64x2_t *)(a3 + 16);
    float64x2_t v26 = *(float64x2_t *)(a3 + 32);
    float64x2_t v27 = *(float64x2_t *)(a3 + 48);
    float64x2_t v28 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v25), v26, 1), v27, *(float64x2_t *)a3, 1);
    v27.f64[1] = *(float64_t *)(a3 + 32);
    v25.f64[1] = *(float64_t *)a3;
    float64x2_t v29 = vmlaq_f64(vmulq_f64(v27, vnegq_f64(*(float64x2_t *)a3)), v26, v25);
    v25.f64[0] = vmulq_f64(v28, v28).f64[0];
    v28.f64[1] = v29.f64[0];
    v26.f64[0] = v16.f64[0];
    v26.f64[1] = v20;
    float64x2_t v30 = vmulq_f64(v26, v28);
    v28.f64[0] = vmulq_laneq_f64(v19, v29, 1).f64[0];
    v30.f64[0] = vaddvq_f64(v30);
    float64x2_t v31 = vmulq_f64(v29, v29);
    if ((v28.f64[0] + v30.f64[0]) * (v28.f64[0] + v30.f64[0]) <= *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared
                                                                * ((vmulq_f64(v19, v19).f64[0]
                                                                  + vaddvq_f64(vmulq_f64(v26, v26)))
                                                                 * (v31.f64[1] + v25.f64[0] + v31.f64[0])))
      goto LABEL_14;
    goto LABEL_13;
  }
  if (v21 != 1)
  {
    if (*(unsigned char *)(a3 + 128)) {
      goto LABEL_14;
    }
    v22.f64[0] = v16.f64[0];
    v22.f64[1] = v20;
    if (sqrt(vmulq_f64(v19, v19).f64[0] + vaddvq_f64(vmulq_f64(v22, v22))) <= 0.000001) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  float64x2_t v45 = *(float64x2_t *)(a3 + 16);
  float64_t v46 = vmulq_f64(v45, v45).f64[0] + vaddvq_f64(vmulq_f64(*(float64x2_t *)a3, *(float64x2_t *)a3));
  v47.f64[0] = v16.f64[0];
  v47.f64[1] = v20;
  v45.f64[0] = vmulq_f64(v19, v45).f64[0];
  double v48 = vaddvq_f64(vmulq_f64(v16, *(float64x2_t *)a3));
  if ((v45.f64[0] + v48) * (v45.f64[0] + v48) < *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared
                                               * ((vmulq_f64(v19, v19).f64[0] + vaddvq_f64(vmulq_f64(v47, v47)))
                                                * v46))
  {
LABEL_13:
    float64x2_t v32 = vmulq_f64(v13, v13);
    float64x2_t v33 = (float64x2_t *)(a3 + 32 * v21);
    *float64x2_t v33 = v16;
    v33[1] = v19;
    uint64_t v34 = *(unsigned __int8 *)(a3 + 128);
    *(double *)(a3 + 8 * v34 + 96) = -(v32.f64[1] + vmulq_f64(v12, v12).f64[0] + v32.f64[0]);
    *(unsigned char *)(a3 + 128) = v34 + 1;
  }
LABEL_14:
  v35.f64[0] = v17.f64[0];
  v35.f64[1] = v14.f64[0];
  float64x2_t v37 = v90;
  v36.f64[0] = v91.f64[0];
  v14.f64[1] = v18.f64[0];
  v36.f64[1] = v90.f64[0];
  float64x2_t v38 = vmulq_f64(v18, vnegq_f64(v91));
  float64x2_t v39 = vmlaq_f64(vmulq_f64(v35, vnegq_f64(v90)), v14, v36);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    float64x2_t v82 = v17;
    float64x2_t v86 = v39;
    float64x2_t v75 = v37;
    float64x2_t v78 = v38;
    int v66 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
    float64x2_t v37 = v75;
    float64x2_t v38 = v78;
    float64x2_t v17 = v82;
    float64x2_t v39 = v86;
    if (v66)
    {
      _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared = 0x3FEFFD813C3BA1D0;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
      float64x2_t v37 = v75;
      float64x2_t v38 = v78;
      float64x2_t v17 = v82;
      float64x2_t v39 = v86;
    }
  }
  *(void *)&float64_t v40 = vextq_s8((int8x16_t)v39, (int8x16_t)v39, 8uLL).u64[0];
  float64x2_t v41 = vmlaq_laneq_f64(v38, v17, v37, 1);
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    double v83 = v40;
    float64x2_t v87 = v39;
    float64x2_t v79 = v41;
    int v67 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
    float64x2_t v41 = v79;
    float64_t v40 = v83;
    float64x2_t v39 = v87;
    if (v67)
    {
      _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared = 0x3F33F61E22F1838ELL;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
      float64x2_t v41 = v79;
      float64_t v40 = v83;
      float64x2_t v39 = v87;
    }
  }
  v42.f64[0] = v41.f64[0];
  v42.f64[1] = v39.f64[0];
  uint64_t v23 = *(unsigned __int8 *)(a3 + 128);
  if (v23 == 2)
  {
    float64x2_t v49 = *(float64x2_t *)(a3 + 16);
    float64x2_t v50 = *(float64x2_t *)(a3 + 32);
    v51.f64[0] = *(float64_t *)(a3 + 48);
    v51.f64[1] = *(float64_t *)(a3 + 32);
    float64x2_t v52 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v49), v50, 1), *(float64x2_t *)(a3 + 48), *(float64x2_t *)a3, 1);
    v49.f64[1] = *(float64_t *)a3;
    float64x2_t v53 = vmlaq_f64(vmulq_f64(v51, vnegq_f64(*(float64x2_t *)a3)), v50, v49);
    v49.f64[0] = v39.f64[0];
    v49.f64[1] = v40;
    float64x2_t v54 = vmulq_f64(v49, v53);
    double v55 = vmulq_f64(v41, v52).f64[0];
    float64x2_t v56 = vmulq_f64(v53, v53);
    float64x2_t v57 = vmulq_f64(v49, v49);
    if ((v54.f64[1] + v55 + v54.f64[0]) * (v54.f64[1] + v55 + v54.f64[0]) <= *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared
                                                                            * ((v57.f64[1]
                                                                              + vmulq_f64(v41, v41).f64[0]
                                                                              + v57.f64[0])
                                                                             * (v56.f64[1]
                                                                              + vmulq_f64(v52, v52).f64[0]
                                                                              + v56.f64[0])))
    {
      LOBYTE(v23) = 2;
      return v23;
    }
    goto LABEL_26;
  }
  if (v23 == 1)
  {
    float64x2_t v58 = *(float64x2_t *)(a3 + 16);
    float64_t v59 = vmulq_f64(v58, v58).f64[0] + vaddvq_f64(vmulq_f64(*(float64x2_t *)a3, *(float64x2_t *)a3));
    v60.f64[0] = v39.f64[0];
    v60.f64[1] = v40;
    float64x2_t v61 = vmulq_f64(v60, v60);
    v58.f64[0] = vmulq_laneq_f64(v58, v39, 1).f64[0];
    double v62 = vaddvq_f64(vmulq_f64(v42, *(float64x2_t *)a3));
    if ((v58.f64[0] + v62) * (v58.f64[0] + v62) >= *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared
                                                  * ((v61.f64[1] + vmulq_f64(v41, v41).f64[0] + v61.f64[0])
                                                   * v59))
    {
      LOBYTE(v23) = 1;
      return v23;
    }
    goto LABEL_26;
  }
  if (!*(unsigned char *)(a3 + 128))
  {
    v43.f64[0] = v39.f64[0];
    v43.f64[1] = v40;
    float64x2_t v44 = vmulq_f64(v43, v43);
    if (sqrt(v44.f64[1] + vmulq_f64(v41, v41).f64[0] + v44.f64[0]) <= 0.000001)
    {
      LOBYTE(v23) = 0;
      return v23;
    }
LABEL_26:
    uint64_t v63 = a3 + 32 * v23;
    *(float64x2_t *)uint64_t v63 = v42;
    *(int64x2_t *)(v63 + 16) = vdupq_laneq_s64((int64x2_t)v39, 1);
    uint64_t v23 = *(unsigned __int8 *)(a3 + 128);
    *(void *)(a3 + 8 * v23 + 96) = 0;
    LOBYTE(v23) = v23 + 1;
    *(unsigned char *)(a3 + 128) = v23;
  }
  return v23;
}

uint64_t geom::vertex_placement_constraint_factory<double>::add_volume_preservation(geom::triangle_mesh_half_edge_connectivity **a1, unsigned int a2, uint64_t a3)
{
  v27[4] = *MEMORY[0x263EF8340];
  float64x2_t v25 = 0u;
  float64x2_t v26 = 0u;
  uint64_t v24 = 0;
  v27[0] = &unk_26EA058A0;
  v27[1] = &v25;
  v27[2] = &v24;
  v27[3] = v27;
  geom::vertex_placement_constraint_factory<double>::loop_edge_triangles(a1, a2, (uint64_t)v27);
  _ZNSt3__110__function12__value_funcIFvPKDv3_dEED2B8nn180100Ev(v27);
  uint64_t v4 = v24;
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v22 = v4;
    int v20 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
    uint64_t v4 = v22;
    if (v20)
    {
      _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared = 0x3FEFFD813C3BA1D0;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared);
      uint64_t v4 = v22;
    }
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared, memory_order_acquire) & 1) == 0)
  {
    uint64_t v23 = v4;
    int v21 = __cxa_guard_acquire(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
    uint64_t v4 = v23;
    if (v21)
    {
      _ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared = 0x3F33F61E22F1838ELL;
      __cxa_guard_release(&_ZGVZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared);
      uint64_t v4 = v23;
    }
  }
  uint64_t v5 = *(unsigned __int8 *)(a3 + 128);
  if (v5 == 2)
  {
    float64x2_t v8 = *(float64x2_t *)(a3 + 16);
    float64x2_t v9 = *(float64x2_t *)(a3 + 32);
    float64x2_t v10 = *(float64x2_t *)(a3 + 48);
    float64x2_t v11 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v8), v9, 1), v10, *(float64x2_t *)a3, 1);
    v10.f64[1] = *(float64_t *)(a3 + 32);
    v8.f64[1] = *(float64_t *)a3;
    float64x2_t v12 = vmlaq_f64(vmulq_f64(v10, vnegq_f64(*(float64x2_t *)a3)), v9, v8);
    v9.f64[0] = vmulq_f64(v11, v11).f64[0];
    v11.f64[1] = v12.f64[0];
    float64x2_t v7 = v25;
    float64x2_t v6 = v26;
    double v13 = vmulq_laneq_f64(v26, v12, 1).f64[0];
    v11.f64[0] = vaddvq_f64(vmulq_f64(v25, v11));
    float64x2_t v14 = vmulq_f64(v12, v12);
    if ((v13 + v11.f64[0]) * (v13 + v11.f64[0]) <= *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_sin_alpha_squared
                                                  * ((vmulq_f64(v6, v6).f64[0] + vaddvq_f64(vmulq_f64(v7, v7)))
                                                   * (v14.f64[1] + v9.f64[0] + v14.f64[0])))
    {
      LOBYTE(v5) = 2;
      return v5;
    }
    goto LABEL_11;
  }
  if (v5 == 1)
  {
    float64x2_t v15 = *(float64x2_t *)(a3 + 16);
    float64_t v16 = vmulq_f64(v15, v15).f64[0] + vaddvq_f64(vmulq_f64(*(float64x2_t *)a3, *(float64x2_t *)a3));
    float64x2_t v7 = v25;
    float64x2_t v6 = v26;
    v15.f64[0] = vmulq_f64(v15, v26).f64[0];
    double v17 = vaddvq_f64(vmulq_f64(*(float64x2_t *)a3, v25));
    if ((v15.f64[0] + v17) * (v15.f64[0] + v17) >= *(double *)&_ZZN4geom28vertex_placement_constraintsIdE14add_constraintERKDv3_ddE19k_cos_alpha_squared
                                                  * (v16
                                                   * (vmulq_f64(v6, v6).f64[0] + vaddvq_f64(vmulq_f64(v7, v7)))))
    {
      LOBYTE(v5) = 1;
      return v5;
    }
    goto LABEL_11;
  }
  if (!*(unsigned char *)(a3 + 128))
  {
    float64x2_t v7 = v25;
    float64x2_t v6 = v26;
    if (sqrt(vmulq_f64(v6, v6).f64[0] + vaddvq_f64(vmulq_f64(v7, v7))) <= 0.000001)
    {
      LOBYTE(v5) = 0;
      return v5;
    }
LABEL_11:
    float64x2_t v18 = (float64x2_t *)(a3 + 32 * v5);
    *float64x2_t v18 = v7;
    v18[1] = v6;
    uint64_t v5 = *(unsigned __int8 *)(a3 + 128);
    *(void *)(a3 + 8 * v5 + 96) = v4;
    LOBYTE(v5) = v5 + 1;
    *(unsigned char *)(a3 + 128) = v5;
  }
  return v5;
}

void geom::vertex_placement_constraint_factory<double>::loop_edge_boundaries(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  float64x2_t v6 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
  uint64_t v7 = *(void *)(*(void *)a1 + 184);
  if (a2 >= (unint64_t)((*(void *)(*(void *)a1 + 192) - v7) >> 2))
  {
    *(void *)float64x2_t v35 = -1;
    unsigned int v9 = -1;
  }
  else
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, *(_DWORD *)(v7 + 4 * a2) / 3u, *(_DWORD *)(v7 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v6, half_edge_for_face_vertex, v35);
    float64x2_t v6 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
    unsigned int v9 = v35[0];
  }
  __p = 0;
  float64x2_t v31 = 0;
  uint64_t v32 = 0;
  geom::triangle_mesh_connectivity::get_incident_edges_to_vertex(v6, v9, (uint64_t)&__p);
  uint64_t v10 = ((unint64_t)(v31 - (unsigned char *)__p) >> 2) - 1;
  if (*(_DWORD *)__p != a2) {
    uint64_t v10 = 0;
  }
  v34[0] = *((_DWORD *)__p + v10);
  geom::triangle_mesh_connectivity::get_incident_edges_to_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, v35[1], (uint64_t)&__p);
  uint64_t v11 = 0;
  uint64_t v12 = ((unint64_t)(v31 - (unsigned char *)__p) >> 2) - 1;
  if (*(_DWORD *)__p != a2) {
    uint64_t v12 = 0;
  }
  v34[1] = *((_DWORD *)__p + v12);
  unsigned int v13 = v35[0];
  unsigned int v14 = v35[1];
  v33[19] = v35[0];
  v33[20] = v35[1];
  int v29 = -1;
  char v15 = 1;
  uint64_t v16 = 0xFFFFFFFFLL;
  do
  {
    char v17 = v15;
    float64x2_t v18 = *(geom::triangle_mesh_half_edge_connectivity **)a1;
    unint64_t v19 = v34[v11];
    uint64_t v20 = *(void *)(*(void *)a1 + 184);
    if (v19 >= (*(void *)(*(void *)a1 + 192) - v20) >> 2)
    {
      *(void *)float64x2_t v35 = -1;
      unsigned int v22 = -1;
    }
    else
    {
      unsigned int v21 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*(geom::triangle_mesh_half_edge_connectivity **)a1, *(_DWORD *)(v20 + 4 * v19) / 3u, *(_DWORD *)(v20 + 4 * v19) % 3u);
      geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v18, v21, v35);
      unsigned int v22 = v35[0];
    }
    if (v22 == v13 || v35[1] == v13)
    {
      uint64_t v16 = *(unsigned int *)((unint64_t)v35 | (4 * (v22 == v13)));
    }
    else if (v22 == v14 || v35[1] == v14)
    {
      int v29 = *(_DWORD *)((unint64_t)v35 | (4 * (v22 == v14)));
    }
    char v15 = 0;
    uint64_t v11 = 1;
  }
  while ((v17 & 1) != 0);
  v33[21] = v29;
  for (uint64_t i = 1; i != 4; ++i)
  {
    uint64_t v24 = *(void *)(a1 + 8);
    float64x2_t v25 = (_OWORD *)(v24 + 32 * v16);
    long long v26 = v25[1];
    uint64_t v16 = v33[i + 18];
    *(_OWORD *)float64x2_t v33 = *v25;
    *(_OWORD *)&v33[4] = v26;
    float64x2_t v27 = (_OWORD *)(v24 + 32 * v16);
    long long v28 = v27[1];
    *(_OWORD *)&v33[8] = *v27;
    *(_OWORD *)&v33[12] = v28;
    _ZNKSt3__18functionIFvPKDv3_dEEclES3_(a3, (uint64_t)v33);
  }
  if (__p)
  {
    float64x2_t v31 = __p;
    operator delete(__p);
  }
}

uint64_t _ZNKSt3__18functionIFvPKDv3_dEEclES3_(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x236E370DCLL);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

void _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA05790;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA05790;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

float64x2_t _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EEclEOSA_(uint64_t a1, float64x2_t **a2)
{
  uint64_t v2 = *a2;
  v3 = *(float64x2_t **)(a1 + 8);
  float64x2_t v4 = vaddq_f64(vsubq_f64((*a2)[3], (*a2)[1]), v3[1]);
  float64x2_t *v3 = vaddq_f64(vsubq_f64((*a2)[2], **a2), *v3);
  v3[1] = v4;
  float64x2_t v5 = v2[2];
  float64x2_t v6 = v2[3];
  float64x2_t v7 = v2[1];
  *(void *)&v8.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v6), *v2, 1), v7, v5, 1);
  v7.f64[1] = v2->f64[0];
  v6.f64[1] = v2[2].f64[0];
  int64x2_t v9 = (int64x2_t)vmlaq_f64(vmulq_f64(v7, vnegq_f64(v5)), *v2, v6);
  *(void *)&v8.f64[1] = v9.i64[0];
  uint64_t v10 = *(float64x2_t **)(a1 + 16);
  float64x2_t result = vaddq_f64(v10[1], (float64x2_t)vdupq_laneq_s64(v9, 1));
  *uint64_t v10 = vaddq_f64(*v10, v8);
  v10[1] = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_preservationEjRNS_28vertex_placement_constraintsIdEEEUlPKDv3_dE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_preservationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE11target_typeEv()
{
  return &_ZTIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_preservationEjRNS_28vertex_placement_constraintsIdEEEUlPKDv3_dE_;
}

void *_ZNSt3__110__function12__value_funcIFvPKDv3_dEED2B8nn180100Ev(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA05820;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA05820;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EEclEOSA_(uint64_t a1, float64x2_t **a2)
{
  *(void *)&double result = *(_OWORD *)&_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8nn180100IJRZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_optimizationEjRNS3_28vertex_placement_constraintsIdEEEUlPKDv3_dE_SB_EEEvDpOT_((float64x2_t **)(a1 + 8), a2);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_optimizationEjRNS_28vertex_placement_constraintsIdEEEUlPKDv3_dE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_optimizationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE11target_typeEv()
{
  return &_ZTIZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_optimizationEjRNS_28vertex_placement_constraintsIdEEEUlPKDv3_dE_;
}

float64x2_t _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8nn180100IJRZNK4geom35vertex_placement_constraint_factoryIdE25add_boundary_optimizationEjRNS3_28vertex_placement_constraintsIdEEEUlPKDv3_dE_SB_EEEvDpOT_(float64x2_t **a1, float64x2_t **a2)
{
  float64x2_t v4 = (*a2)[2];
  float64x2_t v5 = (*a2)[3];
  _Q5 = **a2;
  float64x2_t v6 = (*a2)[1];
  float64x2_t v8 = vsubq_f64(v5, v6);
  _Q0 = vsubq_f64(v4, _Q5);
  float64x2_t v10 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v5), _Q5, 1), v6, v4, 1);
  v6.f64[1] = (*a2)->f64[0];
  v5.f64[1] = (*a2)[2].f64[0];
  float64x2_t v11 = vmlaq_f64(vmulq_f64(v6, vnegq_f64(v4)), _Q5, v5);
  float64x2_t v12 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v11, 1);
  float64x2_t v13 = (float64x2_t)vzip1q_s64((int64x2_t)v12, (int64x2_t)v10);
  v10.f64[1] = v11.f64[0];
  _Q5.f64[0] = _Q0.f64[1];
  __asm { FMLA            D16, D5, V0.D[1] }
  v19.f64[0] = vmuld_lane_f64(-_Q0.f64[0], _Q0, 1);
  _Q16.f64[1] = v19.f64[0];
  v2.f64[0] = -_Q0.f64[0] * v8.f64[0];
  v3.f64[0] = -_Q0.f64[1] * v8.f64[0];
  v19.f64[1] = vmlad_n_f64(vmuld_n_f64(v8.f64[0], v8.f64[0]), _Q0.f64[0], _Q0.f64[0]);
  _Q5.f64[0] = vmlad_n_f64(vmuld_lane_f64(_Q0.f64[1], _Q0, 1), _Q0.f64[0], _Q0.f64[0]);
  uint64_t v20 = *a1;
  float64x2_t v21 = vaddq_f64((*a1)[1], v2);
  v2.f64[1] = v3.f64[0];
  float64x2_t v22 = vaddq_f64((*a1)[2], v19);
  float64x2_t v23 = vaddq_f64((*a1)[3], v3);
  float64x2_t v24 = vaddq_f64((*a1)[4], v2);
  float64x2_t v25 = vaddq_f64((*a1)[5], _Q5);
  *uint64_t v20 = vaddq_f64(**a1, _Q16);
  v20[1] = v21;
  v20[2] = v22;
  v20[3] = v23;
  v20[4] = v24;
  v20[5] = v25;
  long long v26 = a1[1];
  float64x2_t v27 = vnegq_f64(v8);
  v8.f64[1] = _Q0.f64[0];
  int64x2_t v28 = (int64x2_t)vmlaq_f64(vmulq_f64(v13, vnegq_f64(_Q0)), v10, v8);
  *(void *)&v11.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_f64(v11, v27), v12, _Q0, 1);
  *(void *)&v11.f64[1] = v28.i64[0];
  float64x2_t result = vsubq_f64(v26[1], (float64x2_t)vdupq_laneq_s64(v28, 1));
  *long long v26 = vsubq_f64(*v26, v11);
  v26[1] = result;
  return result;
}

void geom::vertex_placement_constraint_factory<double>::loop_edge_triangles(geom::triangle_mesh_half_edge_connectivity **a1, unsigned int a2, uint64_t a3)
{
  uint64_t v55 = *MEMORY[0x263EF8340];
  float64x2_t v5 = *a1;
  unint64_t v6 = a2;
  uint64_t v7 = *((void *)*a1 + 23);
  unint64_t v8 = (*((void *)*a1 + 24) - v7) >> 2;
  if (v8 <= a2)
  {
    *(void *)float64x2_t v54 = -1;
  }
  else
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(*a1, *(_DWORD *)(v7 + 4 * a2) / 3u, *(_DWORD *)(v7 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v5, half_edge_for_face_vertex, v54);
    float64x2_t v5 = *a1;
    uint64_t v7 = *((void *)*a1 + 23);
    unint64_t v8 = (*((void *)*a1 + 24) - v7) >> 2;
  }
  if (v8 <= v6
    || (unsigned int v10 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, *(_DWORD *)(v7 + 4 * v6) / 3u, *(_DWORD *)(v7 + 4 * v6) % 3u), !geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v5, v10)))
  {
    int half_edge_face = -1;
    goto LABEL_9;
  }
  unsigned int v11 = *(_DWORD *)(*((void *)v5 + 23) + 4 * v6);
  unsigned int v12 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v5, v11 / 3, v11 % 3);
  int half_edge_face = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v5, v12);
  if (geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v5, v12))
  {
LABEL_9:
    int v15 = -1;
    goto LABEL_10;
  }
  unsigned int half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(v5, v12);
  int v15 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v5, half_edge_twin);
LABEL_10:
  float64x2_t v45 = 0;
  float64_t v46 = 0;
  uint64_t v47 = 0;
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(*a1, v54[0], (uint64_t)&v45);
  uint64_t v16 = v45;
  char v17 = v46;
  while (v16 != v17)
  {
    int v18 = *v16++;
    float64x2_t v19 = a1[1];
    uint64_t v20 = (unsigned int *)(*((void *)*a1 + 2) + 4 * (3 * v18));
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    uint64_t v23 = v20[2];
    float64x2_t v24 = (long long *)((char *)v19 + 32 * v21);
    long long v25 = v24[1];
    long long v48 = *v24;
    long long v49 = v25;
    long long v26 = (long long *)((char *)v19 + 32 * v22);
    long long v27 = v26[1];
    long long v50 = *v26;
    long long v51 = v27;
    int64x2_t v28 = (long long *)((char *)v19 + 32 * v23);
    long long v29 = v28[1];
    long long v52 = *v28;
    long long v53 = v29;
    _ZNKSt3__18functionIFvPKDv3_dEEclES3_(a3, (uint64_t)&v48);
  }
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(*a1, v54[1], (uint64_t)&v45);
  float64x2_t v30 = v45;
  float64x2_t v31 = v46;
  if (v45 != v46)
  {
    do
    {
      int v32 = *v30;
      if (*v30 != half_edge_face && v32 != v15)
      {
        uint64_t v34 = a1[1];
        float64x2_t v35 = (unsigned int *)(*((void *)*a1 + 2) + 4 * (3 * v32));
        uint64_t v36 = *v35;
        uint64_t v37 = v35[1];
        uint64_t v38 = v35[2];
        float64x2_t v39 = (long long *)((char *)v34 + 32 * v36);
        long long v40 = v39[1];
        long long v48 = *v39;
        long long v49 = v40;
        float64x2_t v41 = (long long *)((char *)v34 + 32 * v37);
        long long v42 = v41[1];
        long long v50 = *v41;
        long long v51 = v42;
        float64x2_t v43 = (long long *)((char *)v34 + 32 * v38);
        long long v44 = v43[1];
        long long v52 = *v43;
        long long v53 = v44;
        _ZNKSt3__18functionIFvPKDv3_dEEclES3_(a3, (uint64_t)&v48);
      }
      ++v30;
    }
    while (v30 != v31);
    float64x2_t v30 = v45;
  }
  if (v30)
  {
    float64_t v46 = v30;
    operator delete(v30);
  }
}

void _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_preservationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_preservationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE7__cloneEv(uint64_t a1)
{
  float64x2_t v2 = (char *)operator new(0x18uLL);
  *(void *)float64x2_t v2 = &unk_26EA058A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_preservationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA058A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_preservationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EEclEOSA_(uint64_t a1, float64x2_t **a2)
{
  float64x2_t v2 = *a2;
  float64x2_t v3 = **a2;
  float64x2_t v4 = (*a2)[1];
  float64x2_t v5 = (*a2)[2];
  float64x2_t v6 = (*a2)[3];
  float64x2_t v7 = vnegq_f64(v4);
  float64x2_t v8 = (*a2)[4];
  float64x2_t v9 = (*a2)[5];
  float64x2_t v10 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v9), v3, 1), v4, v8, 1);
  v4.f64[1] = (*a2)->f64[0];
  float64x2_t v11 = vmlaq_laneq_f64(vmulq_laneq_f64(v7, v5, 1), v6, v3, 1);
  float64x2_t v12 = vnegq_f64(v6);
  v6.f64[1] = (*a2)[2].f64[0];
  float64x2_t v13 = vmlaq_f64(vmulq_f64(v6, vnegq_f64(v3)), v5, v4);
  float64x2_t v14 = vmlaq_laneq_f64(vmulq_laneq_f64(v12, v8, 1), v9, v5, 1);
  v9.f64[1] = (*a2)[4].f64[0];
  float64x2_t v15 = vaddq_f64(v13, vmlaq_f64(vmulq_f64(v9, vnegq_f64(v5)), v8, v6));
  float64x2_t v16 = vaddq_f64(v11, v14);
  v11.f64[1] = v13.f64[0];
  int64x2_t v17 = (int64x2_t)vaddq_f64(vmlaq_f64(vmulq_f64(v4, vnegq_f64(v8)), v3, v9), v15);
  *(void *)&v4.f64[0] = *(_OWORD *)&vaddq_f64(v10, v16);
  *(void *)&v4.f64[1] = v17.i64[0];
  int v18 = *(float64x2_t **)(a1 + 8);
  float64x2_t v19 = vaddq_f64(v18[1], (float64x2_t)vdupq_laneq_s64(v17, 1));
  *int v18 = vaddq_f64(*v18, v4);
  v18[1] = v19;
  v19.f64[0] = vmulq_laneq_f64(v2[5], v13, 1).f64[0] + vaddvq_f64(vmulq_f64(v11, v2[4]));
  uint64_t v20 = *(double **)(a1 + 16);
  double result = *v20 + v19.f64[0];
  *uint64_t v20 = result;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_preservationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_preservationEjRNS_28vertex_placement_constraintsIdEEEUlPKDv3_dE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_preservationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE11target_typeEv()
{
  return &_ZTIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_preservationEjRNS_28vertex_placement_constraintsIdEEEUlPKDv3_dE_;
}

void _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_optimizationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_optimizationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE7__cloneEv(uint64_t a1)
{
  float64x2_t v2 = (char *)operator new(0x18uLL);
  *(void *)float64x2_t v2 = &unk_26EA05920;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_optimizationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE7__cloneEPNS0_6__baseISE_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA05920;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

double _ZNSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_optimizationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EEclEOSA_(uint64_t a1, float64x2_t **a2)
{
  *(void *)&double result = *(_OWORD *)&_ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8nn180100IJRZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_optimizationEjRNS3_28vertex_placement_constraintsIdEEEUlPKDv3_dE_SB_EEEvDpOT_((float64x2_t **)(a1 + 8), a2);
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_optimizationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_optimizationEjRNS_28vertex_placement_constraintsIdEEEUlPKDv3_dE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_optimizationEjRNS2_28vertex_placement_constraintsIdEEEUlPKDv3_dE_NS_9allocatorISB_EEFvSA_EE11target_typeEv()
{
  return &_ZTIZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_optimizationEjRNS_28vertex_placement_constraintsIdEEEUlPKDv3_dE_;
}

float64x2_t _ZNSt3__128__invoke_void_return_wrapperIvLb1EE6__callB8nn180100IJRZNK4geom35vertex_placement_constraint_factoryIdE23add_volume_optimizationEjRNS3_28vertex_placement_constraintsIdEEEUlPKDv3_dE_SB_EEEvDpOT_(float64x2_t **a1, float64x2_t **a2)
{
  float64x2_t v2 = *a2;
  float64x2_t v4 = **a2;
  float64x2_t v3 = (*a2)[1];
  float64x2_t v5 = vsubq_f64((*a2)[2], v4);
  float64x2_t v6 = vsubq_f64((*a2)[3], v3);
  float64x2_t v7 = vsubq_f64((*a2)[4], v4);
  float64x2_t v8 = vsubq_f64((*a2)[5], v3);
  float64x2_t v9 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v6), v7, 1), v8, v5, 1);
  v8.f64[1] = v7.f64[0];
  v6.f64[1] = v5.f64[0];
  float64x2_t result = vmlaq_f64(vmulq_f64(v8, vnegq_f64(v5)), v7, v6);
  float64x2_t v11 = vmulq_n_f64((float64x2_t)vzip1q_s64((int64x2_t)v9, (int64x2_t)result), v9.f64[0]);
  v6.f64[0] = vmuld_lane_f64(v9.f64[0], result, 1);
  v5.f64[0] = v9.f64[0];
  v5.f64[1] = result.f64[0];
  float64x2_t v12 = *a1;
  float64x2_t v13 = vaddq_f64((*a1)[1], v6);
  float64x2_t v14 = vaddq_f64(**a1, v11);
  *float64x2_t v12 = v14;
  v12[1] = v13;
  *(void *)&v11.f64[0] = vdupq_laneq_s64((int64x2_t)v11, 1).u64[0];
  v11.f64[1] = vmuld_n_f64(result.f64[0], result.f64[0]);
  v14.f64[0] = vmuld_lane_f64(result.f64[0], result, 1);
  float64x2_t v15 = *a1;
  float64x2_t v16 = vaddq_f64((*a1)[3], v14);
  v15[2] = vaddq_f64((*a1)[2], v11);
  v15[3] = v16;
  v9.f64[0] = vmuld_lane_f64(result.f64[1], result, 1);
  v6.f64[1] = v14.f64[0];
  int64x2_t v17 = *a1;
  float64x2_t v18 = vaddq_f64((*a1)[5], v9);
  v17[4] = vaddq_f64((*a1)[4], v6);
  v17[5] = v18;
  float64x2_t v19 = v2[1];
  float64x2_t v20 = v2[2];
  float64x2_t v21 = v2[3];
  *(void *)&v13.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v19), v20, 1), v21, *v2, 1);
  v21.f64[1] = v2[2].f64[0];
  v19.f64[1] = v2->f64[0];
  float64x2_t v22 = vmlaq_f64(vmulq_f64(v21, vnegq_f64(*v2)), v20, v19);
  v13.f64[1] = v22.f64[0];
  float64x2_t v23 = vmulq_laneq_f64(v2[5], v22, 1);
  v23.f64[0] = v23.f64[0] + vaddvq_f64(vmulq_f64(v2[4], v13));
  float64x2_t v24 = a1[1];
  float64x2_t v25 = vmlaq_laneq_f64(v24[1], v23, result, 1);
  *float64x2_t v24 = vmlaq_n_f64(*v24, v5, v23.f64[0]);
  v24[1] = v25;
  return result;
}

BOOL geom::internal::triangle_mesh_decimator<double>::is_edge_collapse_geometrically_safe(void *a1, unsigned int a2)
{
  uint64_t v102 = *MEMORY[0x263EF8340];
  unint64_t v4 = a2;
  uint64_t v5 = a1[51] + 48 * a2;
  float64x2_t v6 = (geom::triangle_mesh_half_edge_connectivity *)(a1 + 4);
  uint64_t v7 = a1[27];
  if (a2 >= (unint64_t)((a1[28] - v7) >> 2))
  {
    *(void *)float64x2_t v100 = -1;
    unsigned int v10 = -1;
    unsigned int v9 = -1;
  }
  else
  {
    unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 4), *(_DWORD *)(v7 + 4 * a2) / 3u, *(_DWORD *)(v7 + 4 * a2) % 3u);
    geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices(v6, half_edge_for_face_vertex, v100);
    unsigned int v9 = v100[0];
    unsigned int v10 = v100[1];
  }
  float64x2_t v11 = (float64x2_t *)(v5 + 16);
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(v6, v9, (uint64_t)(a1 + 63));
  float64x2_t v12 = (_DWORD *)a1[63];
  float64x2_t v13 = (_DWORD *)a1[64];
  if (v12 != v13)
  {
    uint64_t v14 = a1[1];
    uint64_t v15 = a1[6];
    float64x2_t v17 = *v11;
    float64x2_t v16 = *(float64x2_t *)(v5 + 32);
    do
    {
      float64x2_t v18 = (int *)(v15 + 4 * (3 * *v12));
      int v19 = *v18;
      *(_DWORD *)float64x2_t v101 = *v18;
      *(void *)&v101[4] = *(void *)(v18 + 1);
      int v20 = *(_DWORD *)&v101[4] == v9 ? 1 : 2;
      int v21 = v19 == v9 ? 0 : v20;
      int v22 = v21 == 2 ? 0 : v21 + 1;
      uint64_t v23 = *(unsigned int *)&v101[4 * v22];
      if (v23 != v10)
      {
        int v24 = (v21 - 1);
        int v25 = v19 == v9 ? 2 : v24;
        uint64_t v26 = *(unsigned int *)&v101[4 * v25];
        if (v26 != v10)
        {
          long long v27 = (float64x2_t *)(v14 + 32 * v23);
          int64x2_t v28 = (float64x2_t *)(v14 + 32 * v26);
          float64x2_t v30 = *v27;
          float64x2_t v29 = v27[1];
          float64x2_t v31 = (float64x2_t *)(v14 + 32 * v9);
          float64x2_t v32 = v31[1];
          float64x2_t v33 = vsubq_f64(v30, *v31);
          float64x2_t v34 = vsubq_f64(v29, v32);
          float64x2_t v35 = v28[1];
          float64x2_t v36 = vsubq_f64(*v28, *v31);
          float64x2_t v37 = vsubq_f64(v35, v32);
          float64x2_t v38 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v34), v36, 1), v37, v33, 1);
          v37.f64[1] = v36.f64[0];
          v34.f64[1] = v33.f64[0];
          float64x2_t v39 = vmulq_f64(v37, vnegq_f64(v33));
          float64x2_t v40 = vsubq_f64(v30, v17);
          float64x2_t v41 = vsubq_f64(v29, v16);
          float64x2_t v42 = vsubq_f64(*v28, v17);
          float64x2_t v43 = vsubq_f64(v35, v16);
          float64x2_t v44 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v41), v42, 1), v43, v40, 1);
          v43.f64[1] = v42.f64[0];
          v41.f64[1] = v40.f64[0];
          float64x2_t v45 = vmulq_f64(vmlaq_f64(v39, v36, v34), vmlaq_f64(vmulq_f64(v43, vnegq_f64(v40)), v42, v41));
          if (v45.f64[1] + vmulq_f64(v38, v44).f64[0] + v45.f64[0] <= 0.0) {
            return 0;
          }
        }
      }
      ++v12;
    }
    while (v12 != v13);
  }
  unsigned int v47 = v100[0];
  uint64_t v46 = v100[1];
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(v6, v100[1], (uint64_t)(a1 + 63));
  long long v48 = (_DWORD *)a1[63];
  long long v49 = (_DWORD *)a1[64];
  if (v48 != v49)
  {
    uint64_t v50 = a1[1];
    uint64_t v51 = a1[6];
    float64x2_t v53 = *v11;
    float64x2_t v52 = *(float64x2_t *)(v5 + 32);
    do
    {
      float64x2_t v54 = (int *)(v51 + 4 * (3 * *v48));
      int v55 = *v54;
      *(_DWORD *)float64x2_t v101 = *v54;
      *(void *)&v101[4] = *(void *)(v54 + 1);
      int v56 = *(_DWORD *)&v101[4] == v46 ? 1 : 2;
      int v57 = v55 == v46 ? 0 : v56;
      int v58 = v57 == 2 ? 0 : v57 + 1;
      uint64_t v59 = *(unsigned int *)&v101[4 * v58];
      if (v59 != v47)
      {
        int v60 = (v57 - 1);
        int v61 = v55 == v46 ? 2 : v60;
        uint64_t v62 = *(unsigned int *)&v101[4 * v61];
        if (v62 != v47)
        {
          uint64_t v63 = (float64x2_t *)(v50 + 32 * v59);
          int v64 = (float64x2_t *)(v50 + 32 * v62);
          float64x2_t v66 = *v63;
          float64x2_t v65 = v63[1];
          int v67 = (float64x2_t *)(v50 + 32 * v46);
          float64x2_t v68 = v67[1];
          float64x2_t v69 = vsubq_f64(v66, *v67);
          float64x2_t v70 = vsubq_f64(v65, v68);
          float64x2_t v71 = v64[1];
          float64x2_t v72 = vsubq_f64(*v64, *v67);
          float64x2_t v73 = vsubq_f64(v71, v68);
          float64x2_t v74 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v70), v72, 1), v73, v69, 1);
          v73.f64[1] = v72.f64[0];
          v70.f64[1] = v69.f64[0];
          float64x2_t v75 = vmulq_f64(v73, vnegq_f64(v69));
          float64x2_t v76 = vsubq_f64(v66, v53);
          float64x2_t v77 = vsubq_f64(v65, v52);
          float64x2_t v78 = vsubq_f64(*v64, v53);
          float64x2_t v79 = vsubq_f64(v71, v52);
          float64x2_t v80 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v77), v78, 1), v79, v76, 1);
          v79.f64[1] = v78.f64[0];
          v77.f64[1] = v76.f64[0];
          float64x2_t v81 = vmulq_f64(vmlaq_f64(v75, v72, v70), vmlaq_f64(vmulq_f64(v79, vnegq_f64(v76)), v78, v77));
          if (v81.f64[1] + vmulq_f64(v74, v80).f64[0] + v81.f64[0] <= 0.0) {
            return 0;
          }
        }
      }
      ++v48;
    }
    while (v48 != v49);
  }
  uint64_t v82 = a1[45];
  int v83 = *(unsigned __int8 *)(v82 + v100[0]);
  int v84 = *(unsigned __int8 *)(v82 + v100[1]);
  if ((v83 & 0x10) != 0 && (v84 & 0x10) != 0) {
    return 0;
  }
  if (((a1[37] - a1[36]) & 0x3FFFFFFFCLL) == 0) {
    return 1;
  }
  if (v83 == 4 && v84 == 4)
  {
    uint64_t v87 = a1[27];
    if (v4 < (a1[28] - v87) >> 2)
    {
      unsigned int v88 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, *(_DWORD *)(v87 + 4 * v4) / 3u, *(_DWORD *)(v87 + 4 * v4) % 3u);
      if (geom::triangle_mesh_half_edge_connectivity::is_valid_half_edge(v6, v88))
      {
        unsigned int v89 = *(_DWORD *)(a1[27] + 4 * v4);
        unsigned int v90 = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex(v6, v89 / 3, v89 % 3);
        v99[0] = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v6, v90);
        if (geom::triangle_mesh_half_edge_connectivity::is_boundary_half_edge(v6, v90))
        {
          int half_edge_face = -1;
          uint64_t v92 = 1;
        }
        else
        {
          unsigned int half_edge_twin = geom::triangle_mesh_half_edge_connectivity::get_half_edge_twin(v6, v90);
          int half_edge_face = geom::triangle_mesh_half_edge_connectivity::get_half_edge_face(v6, half_edge_twin);
          uint64_t v92 = 2;
        }
        uint64_t v94 = 0;
        v99[1] = half_edge_face;
        uint64_t v95 = a1[6];
        uint64_t v96 = a1[45];
LABEL_55:
        uint64_t v97 = 0;
        uint64_t v98 = v95 + 4 * (3 * v99[v94]);
        *(void *)float64x2_t v101 = *(void *)v98;
        *(_DWORD *)&v101[8] = *(_DWORD *)(v98 + 8);
        while ((*(unsigned char *)(v96 + *(unsigned int *)&v101[v97]) & 8) == 0)
        {
          v97 += 4;
          if (v97 == 12)
          {
            if (++v94 != v92) {
              goto LABEL_55;
            }
            goto LABEL_59;
          }
        }
        return 0;
      }
    }
  }
LABEL_59:
  BOOL result = 1;
  if ((v83 & 5) != 0 && (v84 & 5) != 0) {
    return geom::triangle_mesh_atlas::edge_vertices_have_compatible_charts((geom::triangle_mesh_atlas *)(a1 + 30), v6, a2);
  }
  return result;
}

uint64_t geom::internal::triangle_mesh_decimator<double>::update_edge_uvs(uint64_t a1, unsigned int a2, float64x2_t *a3)
{
  float64x2_t v3 = a3;
  uint64_t v77 = *MEMORY[0x263EF8340];
  v72[0] = a1;
  v72[1] = a3;
  if (*(unsigned char *)(a1 + 5))
  {
    uint64_t v6 = *(void *)(a1 + 216);
    if (a2 >= (unint64_t)((*(void *)(a1 + 224) - v6) >> 2))
    {
      *(void *)float64x2_t v73 = -1;
      uint64_t v8 = 0xFFFFFFFFLL;
    }
    else
    {
      unsigned int half_edge_for_face_vertex = geom::triangle_mesh_half_edge_connectivity::get_half_edge_for_face_vertex((geom::triangle_mesh_half_edge_connectivity *)(a1 + 32), *(_DWORD *)(v6 + 4 * a2) / 3u, *(_DWORD *)(v6 + 4 * a2) % 3u);
      geom::triangle_mesh_half_edge_connectivity::get_half_edge_vertices((geom::triangle_mesh_half_edge_connectivity *)(a1 + 32), half_edge_for_face_vertex, v73);
      uint64_t v8 = v73[0];
    }
    uint64_t v9 = *(void *)(a1 + 360);
    if ((*(unsigned char *)(v9 + v8) & 0xC) != 0 && (*(unsigned char *)(v9 + v73[1]) & 0xC) != 0) {
      return 0;
    }
  }
  memset(&v71, 0, sizeof(v71));
  float64x2_t v68 = 0;
  float64x2_t v69 = 0;
  uint64_t v70 = 0;
  geom::triangle_mesh_atlas::edge_incident_wedges(a1 + 240, (geom::triangle_mesh_half_edge_connectivity *)(a1 + 32), a2, &v71, (uint64_t)&v68);
  float64x2_t v66 = 0;
  uint64_t v67 = 0;
  __p = 0;
  int64_t v11 = (char *)v71.__end_ - (char *)v71.__begin_;
  if (v71.__end_ == v71.__begin_)
  {
    uint64_t v10 = 1;
  }
  else
  {
    std::vector<double>::__vallocate[abi:nn180100](&__p, v11 >> 2);
    float64x2_t v12 = (char *)v66;
    bzero(v66, 2 * v11);
    float64x2_t v66 = &v12[2 * v11];
    std::vector<unsigned int>::pointer begin = v71.__begin_;
    if (v71.__end_ == v71.__begin_)
    {
LABEL_38:
      uint64_t v10 = 1;
    }
    else
    {
      uint64_t v14 = 0;
      unsigned int v15 = 0;
      long long v16 = 0uLL;
      long long v17 = xmmword_236F14150;
      while (1)
      {
        uint64_t v18 = v15 ? begin[v15 - 1] : 0;
        uint64_t v19 = begin[v14];
        int v20 = (char *)v68;
        int v21 = (char *)v68 + 8 * v18;
        int v64 = 0;
        int v22 = *(_DWORD *)v21 & 0x3FFFFFFF;
        int v64 = v22;
        *(_OWORD *)float64x2_t v73 = v17;
        long long v74 = v16;
        double v63 = INFINITY;
        if (*(_DWORD *)a1 == 2)
        {
          uint64_t v23 = 0;
          uint64_t v24 = *(void *)(a1 + 48) + 12 * (*(_DWORD *)v21 & 0x3FFFFFFF);
          *(void *)&long long v75 = *(void *)v24;
          DWORD2(v75) = *(_DWORD *)(v24 + 8);
          uint64_t v25 = *(void *)(a1 + 8);
          float64x2_t v27 = *v3;
          float64x2_t v26 = v3[1];
          double v28 = INFINITY;
          do
          {
            float64x2_t v29 = (float64x2_t *)(v25 + 32 * *((unsigned int *)&v75 + v23));
            float64x2_t v30 = vsubq_f64(v27, *v29);
            float64x2_t v31 = vsubq_f64(v26, v29[1]);
            double v32 = vmulq_f64(v31, v31).f64[0] + vaddvq_f64(vmulq_f64(v30, v30));
            if (v32 < v28)
            {
              *((void *)&v74 + 1) = 0;
              long long v61 = 0uLL;
              long long v62 = v16;
              *((void *)&v61 + (v23 & 3)) = 0x3FF0000000000000;
              *(_OWORD *)float64x2_t v73 = v61;
              *(void *)&long long v74 = v62;
              double v63 = v32;
              double v28 = v32;
            }
            ++v23;
          }
          while (v23 != 3);
        }
        else if (v18 != v19)
        {
          long long v59 = v17;
          int v60 = v3;
          uint64_t v33 = 8 * v19 - 8 * v18;
          float64x2_t v34 = (int *)((char *)v68 + 8 * v18);
          do
          {
            int v35 = *v34;
            v34 += 2;
            _ZZN4geom8internal23triangle_mesh_decimatorIdE15update_edge_uvsEjRKDv3_dENKUljRjRS3_RdE_clEjS6_S7_S8_(v72, v35 & 0x3FFFFFFF, &v64, (long long *)v73, &v63);
            v33 -= 8;
          }
          while (v33);
          int v22 = v64;
          float64x2_t v3 = v60;
          long long v16 = 0uLL;
          long long v17 = v59;
        }
        unsigned int v36 = 3 * v22;
        uint64_t v37 = *(void *)(a1 + 264);
        float v38 = *(double *)v73;
        float v39 = *(double *)&v73[2];
        float v40 = *(double *)&v74;
        float32x2_t v41 = vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)(v37 + 8 * (v36 + 1)), v39), *(float32x2_t *)(v37 + 8 * v36), v38), *(float32x2_t *)(v37 + 8 * (v36 + 2)), v40);
        if (v18 != v19) {
          break;
        }
LABEL_27:
        *((float32x2_t *)__p + v14) = v41;
        std::vector<unsigned int>::pointer begin = v71.__begin_;
        std::vector<unsigned int>::pointer end = v71.__end_;
        uint64_t v14 = ++v15;
        if (v15 >= (unint64_t)(v71.__end_ - v71.__begin_))
        {
          if (v71.__end_ != v71.__begin_)
          {
            uint64_t v50 = 0;
            unsigned int v51 = 0;
            do
            {
              if (v51) {
                uint64_t v52 = begin[v51 - 1];
              }
              else {
                uint64_t v52 = 0;
              }
              uint64_t v53 = begin[v50];
              if (v52 != v53)
              {
                float64x2_t v54 = (char *)v68 + 8 * v53;
                int v55 = (char *)v68 + 8 * v52;
                do
                {
                  int v56 = *(_DWORD *)v55;
                  unsigned int v57 = *((_DWORD *)v55 + 1);
                  v55 += 8;
                  *(void *)(*(void *)(a1 + 264) + 8 * (3 * (v56 & 0x3FFFFFFF) + (v57 >> 30))) = *((void *)__p + v50);
                }
                while (v55 != v54);
                std::vector<unsigned int>::pointer begin = v71.__begin_;
                std::vector<unsigned int>::pointer end = v71.__end_;
              }
              uint64_t v50 = ++v51;
            }
            while (v51 < (unint64_t)(end - begin));
          }
          goto LABEL_38;
        }
      }
      while (1)
      {
        unint64_t v42 = *((unsigned int *)v21 + 1);
        float64x2_t v43 = (long long *)(v37 + 24 * (*(_DWORD *)v21 & 0x3FFFFFFF));
        long long v75 = *v43;
        float32x2_t v76 = (float32x2_t)v43[1];
        int32x2_t v44 = (int32x2_t)vsub_f32(*(float32x2_t *)((char *)&v75 + 8), *(float32x2_t *)&v75);
        int32x2_t v45 = (int32x2_t)vsub_f32(v76, *(float32x2_t *)&v75);
        *(float32x2_t *)((char *)&v75 + ((v42 >> 27) & 0x18)) = v41;
        int32x2_t v46 = (int32x2_t)vsub_f32(*(float32x2_t *)((char *)&v75 + 8), *(float32x2_t *)&v75);
        int32x2_t v47 = (int32x2_t)vsub_f32(v76, *(float32x2_t *)&v75);
        float32x2_t v48 = vmla_f32(vmul_f32((float32x2_t)vzip1_s32(v45, v47), vneg_f32((float32x2_t)vzip2_s32(v44, v46))), (float32x2_t)vzip2_s32(v45, v47), (float32x2_t)vzip1_s32(v44, v46));
        if (vmul_lane_f32(v48, v48, 1).f32[0] < 0.0) {
          break;
        }
        v21 += 8;
        if (v21 == &v20[8 * v19]) {
          goto LABEL_27;
        }
      }
      uint64_t v10 = 0;
    }
    if (__p)
    {
      float64x2_t v66 = __p;
      operator delete(__p);
    }
  }
  if (v68)
  {
    float64x2_t v69 = v68;
    operator delete(v68);
  }
  if (v71.__begin_)
  {
    v71.__end_ = v71.__begin_;
    operator delete(v71.__begin_);
  }
  return v10;
}

void geom::internal::triangle_mesh_decimator<double>::recompute_vertex_quadric(void *a1@<X0>, unsigned int a2@<W1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  geom::triangle_mesh_half_edge_connectivity::get_incident_faces_to_vertex(a1 + 4, a2, (uint64_t)a3);
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_OWORD *)(a4 + 32) = 0u;
  *(_OWORD *)a4 = 0u;
  uint64_t v8 = (_DWORD *)*a3;
  uint64_t v9 = (_DWORD *)a3[1];
  if ((_DWORD *)*a3 != v9)
  {
    uint64_t v10 = a1[6];
    uint64_t v11 = a1[1];
    uint64_t v12 = a1[45];
    double v13 = 0.0;
    double v14 = 0.0;
    double v15 = 0.0;
    int v16 = *(unsigned char *)(v12 + a2) & 0xF;
    double v17 = 0.0;
    double v18 = 0.0;
    double v19 = 0.0;
    double v20 = 0.0;
    double v21 = 0.0;
    float64x2_t v22 = 0uLL;
    while (1)
    {
      uint64_t v23 = 0;
      uint64_t v24 = (unsigned int *)(v10 + 4 * (3 * *v8));
      uint64_t v25 = *v24;
      uint64_t v26 = v24[1];
      v99[0] = *v24;
      v99[1] = v26;
      uint64_t v27 = v24[2];
      _DWORD v99[2] = v24[2];
      unsigned __int8 v28 = -1;
      do
      {
        if (v99[v23] == a2) {
          unsigned __int8 v28 = v23;
        }
        ++v23;
      }
      while (v23 != 3);
      float64x2_t v29 = (float64x2_t *)(v11 + 32 * v25);
      float64x2_t v30 = (float64x2_t *)(v11 + 32 * v26);
      float64x2_t v31 = (float64x2_t *)(v11 + 32 * v27);
      float64x2_t v33 = *v30;
      float64x2_t v32 = v30[1];
      float64x2_t v34 = v29[1];
      float64x2_t v35 = vsubq_f64(*v30, *v29);
      float64x2_t v36 = vsubq_f64(v32, v34);
      float64x2_t v38 = *v31;
      float64x2_t v37 = v31[1];
      float64x2_t v39 = vsubq_f64(*v31, *v29);
      float64x2_t v40 = vsubq_f64(v37, v34);
      float64x2_t v41 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v36), v39, 1), v40, v35, 1);
      v40.f64[1] = v39.f64[0];
      v36.f64[1] = v35.f64[0];
      float64x2_t v42 = vmlaq_f64(vmulq_f64(v40, vnegq_f64(v35)), v39, v36);
      float64x2_t v43 = vmulq_f64(v42, v42);
      double v44 = v43.f64[1] + vmulq_f64(v41, v41).f64[0] + v43.f64[0];
      float64x2_t v45 = 0uLL;
      float64x2_t v46 = 0uLL;
      if (v44 > 0.0)
      {
        float64x2_t v47 = (float64x2_t)vextq_s8((int8x16_t)v42, (int8x16_t)v42, 8uLL);
        v41.f64[1] = v42.f64[0];
        v42.f64[0] = 1.0 / sqrt(v44);
        float64x2_t v46 = vmulq_f64(v47, v42);
        float64x2_t v45 = vmulq_n_f64(v41, v42.f64[0]);
      }
      double v48 = vmulq_f64(v34, v46).f64[0] + vaddvq_f64(vmulq_f64(*v29, v45));
      double v21 = v21 + vmuld_n_f64(v45.f64[0], v45.f64[0]);
      float64x2_t v22 = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v45, (int8x16_t)v46, 8uLL), v45.f64[0]), v22);
      double v20 = v20 - v48 * v45.f64[0];
      double v19 = vmuld_lane_f64(v45.f64[1], v45, 1) + v19;
      double v18 = vmuld_lane_f64(v46.f64[0], v45, 1) + v18;
      double v17 = v17 - vmuld_lane_f64(v48, v45, 1);
      double v15 = vmuld_n_f64(v46.f64[0], v46.f64[0]) + v15;
      double v14 = v14 - v48 * v46.f64[0];
      double v13 = v48 * v48 + v13;
      if (!v16) {
        goto LABEL_29;
      }
      v98[0] = *v29;
      v98[1] = v34;
      v98[2] = v33;
      v98[3] = v32;
      v98[4] = v38;
      v98[5] = v37;
      v97[0] = (*(unsigned char *)(v12 + v25) & 0xF) != 0;
      v97[1] = (*(unsigned char *)(v12 + v26) & 0xF) != 0;
      v97[2] = (*(unsigned char *)(v12 + v27) & 0xF) != 0;
      uint64_t v49 = v28;
      float64x2_t v50 = 0uLL;
      double v51 = 0.0;
      if (v97[v28])
      {
        if (v28 == 2) {
          unsigned __int8 v52 = 0;
        }
        else {
          unsigned __int8 v52 = v28 + 1;
        }
        if (v52 == 2) {
          LOBYTE(v53) = 0;
        }
        else {
          LOBYTE(v53) = v52 + 1;
        }
        if (v97[v52])
        {
          float64x2_t v54 = (float64x2_t *)&v98[2 * v49];
          float64x2_t v55 = *v54;
          float64x2_t v56 = v54[1];
          float64x2_t v57 = vaddq_f64(v46, v56);
          float64x2_t v58 = vaddq_f64(v45, *v54);
          long long v59 = (float64x2_t *)&v98[2 * v52];
          float64x2_t v60 = vsubq_f64(*v59, v55);
          float64x2_t v61 = vsubq_f64(v59[1], v56);
          float64x2_t v62 = vsubq_f64(v58, v55);
          float64x2_t v63 = vsubq_f64(v57, v56);
          v64.f64[0] = v63.f64[0];
          v64.f64[1] = v62.f64[0];
          float64x2_t v65 = vnegq_f64(v61);
          v61.f64[1] = v60.f64[0];
          float64x2_t v66 = vmlaq_f64(vmulq_f64(v64, vnegq_f64(v60)), v62, v61);
          float64x2_t v67 = vmlaq_laneq_f64(vmulq_laneq_f64(v65, v62, 1), v63, v60, 1);
          float64x2_t v68 = vmulq_f64(v66, v66);
          double v69 = v68.f64[1] + vmulq_f64(v67, v67).f64[0] + v68.f64[0];
          float64x2_t v70 = 0uLL;
          float64x2_t v71 = 0uLL;
          if (v69 > 0.0)
          {
            float64x2_t v72 = (float64x2_t)vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL);
            v67.f64[1] = v66.f64[0];
            v66.f64[0] = 1.0 / sqrt(v69);
            float64x2_t v71 = vmulq_f64(v72, v66);
            float64x2_t v70 = vmulq_n_f64(v67, v66.f64[0]);
          }
          double v73 = vmulq_f64(v56, v71).f64[0] + vaddvq_f64(vmulq_f64(v55, v70));
          double v51 = vmuld_n_f64(v70.f64[0], v70.f64[0]);
          double v74 = vmuld_lane_f64(v70.f64[1], v70, 1);
          double v75 = vmuld_n_f64(v71.f64[0], v71.f64[0]);
          double v76 = v73 * v73;
          float64x2_t v50 = vaddq_f64(vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v71, 8uLL), v70.f64[0]), (float64x2_t)0);
          double v77 = 0.0 - v73 * v70.f64[0];
          double v78 = vmuld_lane_f64(v71.f64[0], v70, 1) + 0.0;
          double v79 = 0.0 - vmuld_lane_f64(v73, v70, 1);
          double v80 = 0.0 - v73 * v71.f64[0];
          uint64_t v53 = v53;
          if (!v97[v53]) {
            goto LABEL_28;
          }
          unint64_t v81 = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
          unint64_t v82 = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
          float64x2_t v83 = (float64x2_t)vdupq_laneq_s64((int64x2_t)v62, 1);
          goto LABEL_25;
        }
        uint64_t v53 = v53;
        double v77 = 0.0;
        double v74 = 0.0;
        double v78 = 0.0;
        double v79 = 0.0;
        double v75 = 0.0;
        double v80 = 0.0;
        double v76 = 0.0;
        if (v97[v53])
        {
          int v84 = (float64x2_t *)&v98[2 * v49];
          float64x2_t v55 = *v84;
          float64x2_t v56 = v84[1];
          float64x2_t v85 = vaddq_f64(v46, v56);
          float64x2_t v62 = vsubq_f64(vaddq_f64(v45, *v84), *v84);
          float64x2_t v63 = vsubq_f64(v85, v56);
          v64.f64[0] = v63.f64[0];
          v64.f64[1] = v62.f64[0];
          float64x2_t v83 = (float64x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL);
          unint64_t v82 = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
          float64x2_t v50 = 0uLL;
          double v51 = 0.0;
          unint64_t v81 = *(void *)&v83.f64[0];
LABEL_25:
          float64x2_t v86 = (float64x2_t *)&v98[2 * v53];
          float64x2_t v87 = vsubq_f64(*v86, v55);
          float64x2_t v88 = vsubq_f64(v86[1], v56);
          float64x2_t v89 = vnegq_f64(v88);
          v88.f64[1] = v87.f64[0];
          *(void *)&v64.f64[1] = v82;
          *(void *)&v62.f64[1] = v81;
          float64x2_t v90 = vmlaq_f64(vmulq_f64(v64, vnegq_f64(v87)), v62, v88);
          float64x2_t v91 = vmlaq_laneq_f64(vmulq_f64(v83, v89), v63, v87, 1);
          float64x2_t v92 = vmulq_f64(v90, v90);
          double v93 = v92.f64[1] + vmulq_f64(v91, v91).f64[0] + v92.f64[0];
          float64x2_t v94 = 0uLL;
          float64x2_t v95 = 0uLL;
          if (v93 > 0.0)
          {
            v91.f64[1] = v90.f64[0];
            v94.f64[0] = 1.0 / sqrt(v93);
            float64x2_t v95 = vmulq_f64((float64x2_t)vextq_s8((int8x16_t)v90, (int8x16_t)v90, 8uLL), v94);
            float64x2_t v94 = vmulq_n_f64(v91, v94.f64[0]);
          }
          double v96 = vmulq_f64(v56, v95).f64[0] + vaddvq_f64(vmulq_f64(v55, v94));
          double v51 = v51 + vmuld_n_f64(v94.f64[0], v94.f64[0]);
          float64x2_t v50 = vaddq_f64(v50, vmulq_n_f64((float64x2_t)vextq_s8((int8x16_t)v94, (int8x16_t)v95, 8uLL), v94.f64[0]));
          double v77 = v77 - v96 * v94.f64[0];
          double v74 = v74 + vmuld_lane_f64(v94.f64[1], v94, 1);
          double v78 = v78 + vmuld_lane_f64(v95.f64[0], v94, 1);
          double v79 = v79 - vmuld_lane_f64(v96, v94, 1);
          double v75 = v75 + vmuld_n_f64(v95.f64[0], v95.f64[0]);
          double v80 = v80 - v96 * v95.f64[0];
          double v76 = v76 + v96 * v96;
        }
      }
      else
      {
        double v77 = 0.0;
        double v74 = 0.0;
        double v78 = 0.0;
        double v79 = 0.0;
        double v75 = 0.0;
        double v80 = 0.0;
        double v76 = 0.0;
      }
LABEL_28:
      double v21 = v21 + v51;
      float64x2_t v22 = vaddq_f64(v22, v50);
      double v20 = v20 + v77;
      double v19 = v19 + v74;
      double v18 = v18 + v78;
      double v17 = v17 + v79;
      double v15 = v15 + v75;
      double v14 = v14 + v80;
      double v13 = v13 + v76;
LABEL_29:
      if (++v8 == v9)
      {
        *(double *)a4 = v21;
        *(float64x2_t *)(a4 + 8) = v22;
        *(double *)(a4 + 24) = v20;
        *(double *)(a4 + 32) = v19;
        *(double *)(a4 + 40) = v18;
        *(double *)(a4 + 48) = v17;
        *(double *)(a4 + 56) = v15;
        *(double *)(a4 + 64) = v14;
        *(double *)(a4 + 72) = v13;
        return;
      }
    }
  }
}

void *_ZZN4geom8internal23triangle_mesh_decimatorIdE15update_edge_uvsEjRKDv3_dENKUljRjRS3_RdE_clEjS6_S7_S8_(void *result, int a2, _DWORD *a3, long long *a4, double *a5)
{
  if (fabs(*a5) > 0.000001)
  {
    uint64_t v5 = (float64x2_t *)result[1];
    uint64_t v6 = (unsigned int *)(*(void *)(*result + 48) + 4 * (3 * a2));
    uint64_t v7 = *(void *)(*result + 8);
    uint64_t v8 = (float64x2_t *)(v7 + 32 * *v6);
    float64x2_t v9 = *v8;
    float64x2_t v10 = v8[1];
    uint64_t v11 = (float64x2_t *)(v7 + 32 * v6[1]);
    float64x2_t v13 = *v11;
    float64x2_t v12 = v11[1];
    double v14 = (float64x2_t *)(v7 + 32 * v6[2]);
    float64x2_t v16 = *v14;
    float64x2_t v15 = v14[1];
    float64x2_t v17 = vsubq_f64(*v11, v9);
    float64x2_t v18 = vsubq_f64(v12, v10);
    float64x2_t v19 = vsubq_f64(*v14, v9);
    float64x2_t v20 = vsubq_f64(v15, v10);
    float64x2_t v22 = *v5;
    float64x2_t v21 = v5[1];
    float64x2_t v23 = vsubq_f64(*v5, v9);
    float64x2_t v24 = vsubq_f64(v21, v10);
    double v25 = vmulq_f64(v18, v24).f64[0] + vaddvq_f64(vmulq_f64(v17, v23));
    double v26 = vmulq_f64(v20, v24).f64[0] + vaddvq_f64(vmulq_f64(v19, v23));
    if (v25 <= 0.0 && v26 <= 0.0)
    {
      long long v27 = xmmword_236F14150;
      unint64_t v28 = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
      _Q7 = 0uLL;
      goto LABEL_17;
    }
    float64x2_t v30 = vsubq_f64(v22, v13);
    float64x2_t v31 = vsubq_f64(v21, v12);
    _Q7 = vmulq_f64(v18, v31);
    _Q7.f64[0] = _Q7.f64[0] + vaddvq_f64(vmulq_f64(v17, v30));
    double v32 = vmulq_f64(v20, v31).f64[0] + vaddvq_f64(vmulq_f64(v19, v30));
    if (_Q7.f64[0] >= 0.0 && v32 <= _Q7.f64[0])
    {
      long long v27 = xmmword_236F14160;
      unint64_t v28 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
      _Q7 = 0uLL;
LABEL_16:
      v9.f64[0] = v13.f64[0];
      v10.f64[0] = v12.f64[0];
      goto LABEL_17;
    }
    unint64_t v34 = vextq_s8((int8x16_t)v17, (int8x16_t)v17, 8uLL).u64[0];
    double v35 = v25 * v32 - _Q7.f64[0] * v26;
    if (v25 != _Q7.f64[0] && _Q7.f64[0] <= 0.0 && v25 >= 0.0 && v35 <= 0.0)
    {
      v19.f64[0] = v25 / (v25 - _Q7.f64[0]);
      *(double *)&long long v27 = 1.0 - v19.f64[0];
      *((double *)&v27 + 1) = v19.f64[0];
      _Q7 = 0uLL;
      float64x2_t v10 = vmlaq_f64(v10, v18, v19);
      *(void *)&v17.f64[1] = v34;
      float64x2_t v9 = vmlaq_n_f64(v9, v17, v19.f64[0]);
LABEL_15:
      unint64_t v28 = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
      goto LABEL_17;
    }
    float64x2_t v39 = vsubq_f64(v22, v16);
    float64x2_t v40 = vsubq_f64(v21, v15);
    double v41 = vmulq_f64(v18, v40).f64[0] + vaddvq_f64(vmulq_f64(v17, v39));
    double v42 = vmulq_f64(v20, v40).f64[0] + vaddvq_f64(vmulq_f64(v19, v39));
    if (v42 < 0.0 || v41 > v42)
    {
      unint64_t v44 = vextq_s8((int8x16_t)v19, (int8x16_t)v19, 8uLL).u64[0];
      double v45 = v41 * v26 - v25 * v42;
      if (v42 <= 0.0 && v45 <= 0.0 && v26 >= 0.0 && v26 != v42)
      {
        _Q7.f64[0] = v26 / (v26 - v42);
        *((void *)&v27 + 1) = 0;
        *(double *)&long long v27 = 1.0 - _Q7.f64[0];
        float64x2_t v10 = vmlaq_f64(v10, v20, _Q7);
        *(void *)&v19.f64[1] = v44;
        float64x2_t v9 = vmlaq_n_f64(v9, v19, _Q7.f64[0]);
        goto LABEL_15;
      }
      double v50 = _Q7.f64[0] * v42 - v41 * v32;
      if (v50 <= 0.0)
      {
        _Q7.f64[0] = v32 - _Q7.f64[0];
        if (_Q7.f64[0] >= 0.0 && v41 - v42 >= 0.0)
        {
          _Q7.f64[0] = _Q7.f64[0] / (_Q7.f64[0] + v41 - v42);
          *(void *)&long long v27 = 0;
          *((double *)&v27 + 1) = 1.0 - _Q7.f64[0];
          float64x2_t v10 = vsubq_f64(v15, v12);
          *(void *)&v12.f64[0] = *(_OWORD *)&vmlaq_f64(v12, v10, _Q7);
          float64x2_t v13 = vmlaq_n_f64(v13, vsubq_f64(v16, v13), _Q7.f64[0]);
          unint64_t v28 = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
          goto LABEL_16;
        }
      }
      double v51 = 1.0 / (v35 + v50 + v45);
      v13.f64[0] = v45 * v51;
      _Q7.f64[0] = v35 * v51;
      *(double *)&long long v27 = 1.0 - v45 * v51 - v35 * v51;
      *((void *)&v27 + 1) = *(void *)&v13.f64[0];
      *(void *)&v17.f64[1] = v34;
      *(void *)&v19.f64[1] = v44;
      float64x2_t v9 = vmlaq_n_f64(vmlaq_n_f64(v9, v17, v13.f64[0]), v19, _Q7.f64[0]);
      unint64_t v28 = vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL).u64[0];
      float64x2_t v10 = vmlaq_f64(vmlaq_f64(v10, v13, v18), _Q7, v20);
    }
    else
    {
      unint64_t v28 = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 8uLL).u64[0];
      __asm { FMOV            V7.2D, #1.0 }
      long long v27 = 0uLL;
      v9.f64[0] = v14->f64[0];
      v10.f64[0] = v14[1].f64[0];
    }
LABEL_17:
    *(void *)&v9.f64[1] = v28;
    float64x2_t v36 = vsubq_f64(v9, v22);
    float64x2_t v37 = vsubq_f64(v10, v21);
    double v38 = vmulq_f64(v37, v37).f64[0] + vaddvq_f64(vmulq_f64(v36, v36));
    if (v38 < *a5)
    {
      *a5 = v38;
      *a3 = a2;
      *a4 = v27;
      a4[1] = (__int128)_Q7;
    }
  }
  return result;
}

uint64_t geom::intersect_triangle_bbox_3<float>(float32x4_t *a1, _OWORD *a2, int32x4_t *a3)
{
  uint64_t v238 = *MEMORY[0x263EF8340];
  float32x4_t v5 = *a1;
  float32x4_t v6 = a1[1];
  float32x4_t v7 = vsubq_f32(v6, *a1);
  float32x4_t v8 = a1[2];
  float32x4_t v9 = vsubq_f32(v8, *a1);
  float32x4_t v10 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v9, (int32x4_t)v9), (int8x16_t)v9, 0xCuLL), vnegq_f32(v7)), v9, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v7, (int32x4_t)v7), (int8x16_t)v7, 0xCuLL));
  float v11 = fabsf(v10.f32[2]);
  BOOL v12 = v11 >= 0.00000011921;
  float v13 = fabsf(v10.f32[0]);
  float v14 = fabsf(v10.f32[1]);
  if (v13 >= 0.00000011921) {
    BOOL v12 = 1;
  }
  if (!v12 && v14 < 0.00000011921) {
    return 0;
  }
  if (v13 < 0.00000011921 && v14 < 0.00000011921)
  {
    int8x16_t v25 = *(int8x16_t *)a2;
    if (v5.f32[0] != COERCE_FLOAT(*a2))
    {
      float v41 = fabsf(v5.f32[0]);
      if (v41 == INFINITY)
      {
        if (v5.f32[0] != *((float *)a2 + 4)) {
          goto LABEL_57;
        }
      }
      else
      {
        float v43 = fabsf(*(float *)v25.i32);
        if (v43 == INFINITY
          || vabds_f32(v5.f32[0], *(float *)v25.i32) >= (float)((float)((float)(v41 + v43) + 1.0) * 0.00000011921))
        {
          float v44 = *((float *)a2 + 4);
          if (v5.f32[0] != v44)
          {
            float v45 = fabsf(v44);
            if (v45 == INFINITY
              || vabds_f32(v5.f32[0], v44) >= (float)((float)((float)(v41 + v45) + 1.0) * 0.00000011921))
            {
              goto LABEL_57;
            }
          }
        }
      }
    }
    double v26 = (float32x4_t *)vextq_s8(v25, v25, 4uLL).u64[0];
    int8x8_t v27 = vext_s8((int8x8_t)a2[1], (int8x8_t)*(_OWORD *)&vextq_s8(*((int8x16_t *)a2 + 1), *((int8x16_t *)a2 + 1), 8uLL), 4uLL);
    unsigned __int8 v230 = 0;
    uint64_t v232 = v26;
    float64x2_t v233 = (float32x4_t *)__PAIR64__(HIDWORD(v26), v27.u32[0]);
    HIDWORD(v26) = v27.i32[1];
    int8x8_t v234 = v27;
    float64x2_t v235 = v26;
    uint64_t result = v230;
    if (v230)
    {
      float64x2_t v29 = v229;
      uint64_t v30 = v230;
      do
      {
        uint64_t v31 = v29->i64[0];
        float64x2_t v29 = (float32x4_t *)((char *)v29 + 8);
        v28.i64[0] = v31;
        int32x4_t v32 = vzip1q_s32(*(int32x4_t *)a1, v28);
        v32.i32[2] = HIDWORD(v31);
        *a3++ = v32;
        --v30;
      }
      while (v30);
    }
    goto LABEL_28;
  }
  if (v11 < 0.00000011921 && v14 < 0.00000011921)
  {
    float v33 = *((float *)a2 + 1);
    if (v5.f32[1] != v33)
    {
      float v42 = fabsf(v5.f32[1]);
      if (v42 == INFINITY)
      {
        if (v5.f32[1] != *((float *)a2 + 5)) {
          goto LABEL_57;
        }
      }
      else
      {
        float v47 = fabsf(v33);
        if (v47 == INFINITY || vabds_f32(v5.f32[1], v33) >= (float)((float)((float)(v42 + v47) + 1.0) * 0.00000011921))
        {
          float v48 = *((float *)a2 + 5);
          if (v5.f32[1] != v48)
          {
            float v49 = fabsf(v48);
            if (v49 == INFINITY
              || vabds_f32(v5.f32[1], v48) >= (float)((float)((float)(v42 + v49) + 1.0) * 0.00000011921))
            {
              goto LABEL_57;
            }
          }
        }
      }
    }
    unint64_t v34 = (float32x4_t *)vzip1_s32(*(int32x2_t *)a2, (int32x2_t)*(_OWORD *)&vextq_s8(*(int8x16_t *)a2, *(int8x16_t *)a2, 8uLL));
    int32x2_t v35 = vzip1_s32((int32x2_t)a2[1], (int32x2_t)*(_OWORD *)&vextq_s8(*((int8x16_t *)a2 + 1), *((int8x16_t *)a2 + 1), 8uLL));
    uint64_t v232 = v34;
    float64x2_t v233 = (float32x4_t *)__PAIR64__(HIDWORD(v34), v35.u32[0]);
    unsigned __int8 v230 = 0;
    HIDWORD(v34) = v35.i32[1];
    int8x8_t v234 = (int8x8_t)v35;
    float64x2_t v235 = v34;
    uint64_t result = v230;
    if (v230)
    {
      float64x2_t v37 = v229;
      uint64_t v38 = v230;
      do
      {
        uint64_t v39 = v37->i64[0];
        float64x2_t v37 = (float32x4_t *)((char *)v37 + 8);
        v36.i64[0] = v39;
        int32x4_t v40 = v36;
        v40.i32[1] = a1->i32[1];
        v40.i32[2] = HIDWORD(v39);
        *a3++ = v40;
        --v38;
      }
      while (v38);
    }
    goto LABEL_28;
  }
  if (!v12)
  {
    float v17 = *((float *)a2 + 2);
    if (v5.f32[2] == v17) {
      goto LABEL_15;
    }
    float v46 = fabsf(v5.f32[2]);
    if (v46 == INFINITY)
    {
      if (v5.f32[2] == *((float *)a2 + 6))
      {
LABEL_15:
        int8x16_t v18 = *(int8x16_t *)a2;
        long long v19 = a2[1];
        unsigned __int8 v230 = 0;
        uint64_t v232 = (float32x4_t *)v18.i64[0];
        float64x2_t v233 = (float32x4_t *)__PAIR64__(v18.u32[1], v19);
        v18.i32[1] = DWORD1(v19);
        int8x8_t v234 = (int8x8_t)v19;
        float64x2_t v235 = (float32x4_t *)v18.i64[0];
        uint64_t result = v230;
        if (v230)
        {
          float64x2_t v21 = v229;
          uint64_t v22 = v230;
          do
          {
            uint64_t v23 = v21->i64[0];
            float64x2_t v21 = (float32x4_t *)((char *)v21 + 8);
            v24.i64[0] = v23;
            v24.i64[1] = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL).u64[0];
            *a3++ = v24;
            --v22;
          }
          while (v22);
        }
        goto LABEL_28;
      }
    }
    else
    {
      float v50 = fabsf(v17);
      if (v50 != INFINITY && vabds_f32(v5.f32[2], v17) < (float)((float)((float)(v46 + v50) + 1.0) * 0.00000011921)) {
        goto LABEL_15;
      }
      float v51 = *((float *)a2 + 6);
      if (v5.f32[2] == v51) {
        goto LABEL_15;
      }
      float v52 = fabsf(v51);
      if (v52 != INFINITY && vabds_f32(v5.f32[2], v51) < (float)((float)((float)(v46 + v52) + 1.0) * 0.00000011921)) {
        goto LABEL_15;
      }
    }
  }
LABEL_57:
  float32x4_t v53 = a1[1];
  v53.i32[3] = 0;
  float32x4_t v54 = a1[2];
  v54.i32[3] = 0;
  float32x4_t v55 = vminnmq_f32(v53, v54);
  float32x4_t v56 = *a1;
  v56.i32[3] = 0;
  v55.i32[3] = 0;
  float32x4_t v57 = vminnmq_f32(v56, v55);
  float32x4_t v58 = *((float32x4_t *)a2 + 1);
  uint32x4_t v59 = (uint32x4_t)vcgtq_f32(v57, v58);
  v59.i32[3] = v59.i32[2];
  if ((vmaxvq_u32(v59) & 0x80000000) == 0)
  {
    float32x4_t v60 = vmaxnmq_f32(v53, v54);
    v60.i32[3] = 0;
    float32x4_t v61 = vmaxnmq_f32(v56, v60);
    float32x4_t v62 = *(float32x4_t *)a2;
    uint32x4_t v63 = (uint32x4_t)vcgtq_f32(*(float32x4_t *)a2, v61);
    v63.i32[3] = v63.i32[2];
    if ((vmaxvq_u32(v63) & 0x80000000) == 0)
    {
      float32x4_t v64 = vmulq_f32(v10, v10);
      int32x2_t v65 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v64.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 2), v64)).u64[0];
      *(float *)v65.i32 = sqrtf(*(float *)v65.i32);
      if (*(float *)v65.i32 <= 0.00000011921) {
        goto LABEL_201;
      }
      float32x4_t v226 = v7;
      float32x4_t v66 = vdivq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL), (float32x4_t)vdupq_lane_s32(v65, 0));
      float32x4_t v67 = vaddq_f32(vaddq_f32(v6, v5), v8);
      __asm { FMOV            V1.4S, #3.0 }
      float32x4_t v72 = vdivq_f32(v67, _Q1);
      float32x4_t v237 = v66;
      float32x4_t v73 = v62;
      v73.i32[1] = v58.i32[1];
      float32x4_t v74 = v62;
      v74.i32[2] = v58.i32[2];
      v8.i32[0] = 0;
      v8.i64[1] = 0;
      float32x4_t v75 = (float32x4_t)vsubq_f32(v58, v62).u32[0];
      unsigned __int8 v231 = 0;
      float32x4_t v76 = vmulq_f32(v66, v75);
      LODWORD(v77) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1))).u32[0];
      float32x4_t v78 = vmulq_f32(v66, v62);
      if (fabsf(v77) > 0.00000011921)
      {
        float32x4_t v79 = vmulq_f32(v72, v66);
        float32x4_t v80 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v79, 2), vaddq_f32(v79, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v79.f32, 1)));
        float v81 = (float)-vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))), v80).f32[0]/ v77;
        BOOL v82 = v81 > 1.0 || v81 < 0.0;
        if (v82)
        {
          unsigned int v83 = 0;
        }
        else
        {
          unsigned int v83 = 1;
          unsigned __int8 v231 = 1;
          v229[0] = vmlaq_n_f32(v62, v75, v81);
        }
        float32x4_t v84 = vmulq_f32(v66, v73);
        float v85 = (float)-vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v84, 2), vaddq_f32(v84, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.f32, 1))), v80).f32[0]/ v77;
        if (v85 >= 0.0 && v85 <= 1.0)
        {
          float32x4_t v87 = vmlaq_n_f32(v73, v75, v85);
          uint64_t v88 = v83;
          if (v82)
          {
LABEL_75:
            unsigned __int8 v231 = ++v83;
            v229[v88] = v87;
          }
          else
          {
            float64x2_t v89 = v229;
            uint64_t v90 = v83;
            while (1)
            {
              float32x4_t v91 = vsubq_f32(v87, *v89);
              float32x4_t v92 = vmulq_f32(v91, v91);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v92, 2), vaddq_f32(v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 1))).f32[0]) <= 0.00000011921)break; {
              ++v89;
              }
              if (!--v90) {
                goto LABEL_75;
              }
            }
          }
        }
        float32x4_t v93 = v58;
        v93.i32[0] = v62.i32[0];
        float32x4_t v94 = vmulq_f32(v66, v74);
        float v95 = (float)-vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v94, 2), vaddq_f32(v94, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v94.f32, 1))), v80).f32[0]/ v77;
        if (v95 >= 0.0 && v95 <= 1.0)
        {
          float32x4_t v97 = vmlaq_n_f32(v74, v75, v95);
          if (v83)
          {
            uint64_t v98 = v83;
            float64x2_t v99 = v229;
            uint64_t v100 = v83;
            while (1)
            {
              float32x4_t v101 = vsubq_f32(v97, *v99);
              float32x4_t v102 = vmulq_f32(v101, v101);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v102, 2), vaddq_f32(v102, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v102.f32, 1))).f32[0]) <= 0.00000011921)break; {
              ++v99;
              }
              if (!--v100) {
                goto LABEL_86;
              }
            }
          }
          else
          {
            uint64_t v98 = 0;
LABEL_86:
            unsigned __int8 v231 = v83 + 1;
            v229[v98] = v97;
          }
        }
        float32x4_t v103 = vmulq_f32(v66, v93);
        float v104 = (float)-(float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v103, 2), vaddq_f32(v103, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.f32, 1))).f32[0]- v80.f32[0])/ v77;
        if (v104 >= 0.0 && v104 <= 1.0)
        {
          float32x4_t v106 = vmlaq_n_f32(v93, v75, v104);
          if (v231)
          {
            float64x2_t v107 = v229;
            uint64_t v108 = v231;
            while (1)
            {
              float32x4_t v109 = vsubq_f32(v106, *v107);
              float32x4_t v110 = vmulq_f32(v109, v109);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v110, 2), vaddq_f32(v110, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v110.f32, 1))).f32[0]) <= 0.00000011921)break; {
              ++v107;
              }
              if (!--v108)
              {
                uint64_t v111 = v231;
                goto LABEL_97;
              }
            }
          }
          else
          {
            uint64_t v111 = 0;
LABEL_97:
            ++v231;
            v229[v111] = v106;
          }
        }
      }
      float32x4_t v112 = v62;
      v112.i32[0] = v58.i32[0];
      v8.f32[1] = v58.f32[1] - v62.f32[1];
      float32x4_t v113 = vmulq_f32(v66, v8);
      LODWORD(v114) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 2), vaddq_f32(v113, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 1))).u32[0];
      if (fabsf(v114) > 0.00000011921)
      {
        float32x4_t v115 = vmulq_f32(v72, v66);
        float32x4_t v116 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v115, 2), vaddq_f32(v115, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v115.f32, 1)));
        float v117 = (float)-vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))), v116).f32[0]/ v114;
        if (v117 >= 0.0 && v117 <= 1.0)
        {
          float32x4_t v119 = vmlaq_n_f32(v62, v8, v117);
          if (v231)
          {
            double v120 = v229;
            uint64_t v121 = v231;
            while (1)
            {
              float32x4_t v122 = vsubq_f32(v119, *v120);
              float32x4_t v123 = vmulq_f32(v122, v122);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v123, 2), vaddq_f32(v123, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v123.f32, 1))).f32[0]) <= 0.00000011921)break; {
              ++v120;
              }
              if (!--v121)
              {
                uint64_t v124 = v231;
                goto LABEL_109;
              }
            }
          }
          else
          {
            uint64_t v124 = 0;
LABEL_109:
            ++v231;
            v229[v124] = v119;
          }
        }
        float32x4_t v125 = vmulq_f32(v66, v112);
        float v126 = (float)-vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v125, 2), vaddq_f32(v125, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v125.f32, 1))), v116).f32[0]/ v114;
        if (v126 >= 0.0 && v126 <= 1.0)
        {
          float32x4_t v128 = vmlaq_n_f32(v112, v8, v126);
          if (v231)
          {
            uint64_t v129 = v229;
            uint64_t v130 = v231;
            while (1)
            {
              float32x4_t v131 = vsubq_f32(v128, *v129);
              float32x4_t v132 = vmulq_f32(v131, v131);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v132, 2), vaddq_f32(v132, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v132.f32, 1))).f32[0]) <= 0.00000011921)break; {
              ++v129;
              }
              if (!--v130)
              {
                uint64_t v133 = v231;
                goto LABEL_120;
              }
            }
          }
          else
          {
            uint64_t v133 = 0;
LABEL_120:
            ++v231;
            v229[v133] = v128;
          }
        }
        float32x4_t v134 = v58;
        v134.i32[1] = v62.i32[1];
        float32x4_t v135 = vmulq_f32(v66, v74);
        float v136 = (float)-vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v135, 2), vaddq_f32(v135, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v135.f32, 1))), v116).f32[0]/ v114;
        if (v136 >= 0.0 && v136 <= 1.0)
        {
          float32x4_t v138 = vmlaq_n_f32(v74, v8, v136);
          if (v231)
          {
            float64x2_t v139 = v229;
            uint64_t v140 = v231;
            while (1)
            {
              float32x4_t v141 = vsubq_f32(v138, *v139);
              float32x4_t v142 = vmulq_f32(v141, v141);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v142, 2), vaddq_f32(v142, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v142.f32, 1))).f32[0]) <= 0.00000011921)break; {
              ++v139;
              }
              if (!--v140)
              {
                uint64_t v143 = v231;
                goto LABEL_131;
              }
            }
          }
          else
          {
            uint64_t v143 = 0;
LABEL_131:
            ++v231;
            v229[v143] = v138;
          }
        }
        float32x4_t v144 = vmulq_f32(v66, v134);
        float v145 = (float)-(float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 2), vaddq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.f32, 1))).f32[0]- v116.f32[0])/ v114;
        if (v145 >= 0.0 && v145 <= 1.0)
        {
          float32x4_t v147 = vmlaq_n_f32(v134, v8, v145);
          if (v231)
          {
            float64_t v148 = v229;
            uint64_t v149 = v231;
            while (1)
            {
              float32x4_t v150 = vsubq_f32(v147, *v148);
              float32x4_t v151 = vmulq_f32(v150, v150);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v151, 2), vaddq_f32(v151, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v151.f32, 1))).f32[0]) <= 0.00000011921)break; {
              ++v148;
              }
              if (!--v149)
              {
                uint64_t v152 = v231;
                goto LABEL_142;
              }
            }
          }
          else
          {
            uint64_t v152 = 0;
LABEL_142:
            ++v231;
            v229[v152] = v147;
          }
        }
      }
      v153.i64[0] = 0;
      v153.i32[3] = 0;
      v153.f32[2] = v58.f32[2] - v62.f32[2];
      float32x4_t v154 = vmulq_f32(v66, v153);
      LODWORD(v155) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v154, 2), vaddq_f32(v154, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v154.f32, 1))).u32[0];
      if (fabsf(v155) > 0.00000011921)
      {
        float32x4_t v156 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1)));
        float32x4_t v157 = vmulq_f32(v72, v66);
        float32x4_t v158 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v157, 2), vaddq_f32(v157, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v157.f32, 1)));
        float v159 = (float)-vsubq_f32(v156, v158).f32[0] / v155;
        if (v159 >= 0.0 && v159 <= 1.0)
        {
          float32x4_t v161 = vmlaq_n_f32(v62, v153, v159);
          if (v231)
          {
            double v162 = v229;
            uint64_t v163 = v231;
            while (1)
            {
              float32x4_t v164 = vsubq_f32(v161, *v162);
              float32x4_t v165 = vmulq_f32(v164, v164);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v165, 2), vaddq_f32(v165, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v165.f32, 1))).f32[0]) <= 0.00000011921)break; {
              ++v162;
              }
              if (!--v163)
              {
                uint64_t v166 = v231;
                goto LABEL_154;
              }
            }
          }
          else
          {
            uint64_t v166 = 0;
LABEL_154:
            ++v231;
            v229[v166] = v161;
          }
        }
        float32x4_t v167 = vmulq_f32(v66, v112);
        float v168 = (float)-vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v167, 2), vaddq_f32(v167, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v167.f32, 1))), v158).f32[0]/ v155;
        if (v168 >= 0.0 && v168 <= 1.0)
        {
          float32x4_t v170 = vmlaq_n_f32(v112, v153, v168);
          if (v231)
          {
            int v171 = v229;
            uint64_t v172 = v231;
            while (1)
            {
              float32x4_t v173 = vsubq_f32(v170, *v171);
              float32x4_t v174 = vmulq_f32(v173, v173);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v174, 2), vaddq_f32(v174, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v174.f32, 1))).f32[0]) <= 0.00000011921)break; {
              ++v171;
              }
              if (!--v172)
              {
                uint64_t v175 = v231;
                goto LABEL_165;
              }
            }
          }
          else
          {
            uint64_t v175 = 0;
LABEL_165:
            ++v231;
            v229[v175] = v170;
          }
        }
        v58.i32[2] = v62.i32[2];
        float32x4_t v176 = vmulq_f32(v66, v73);
        float v177 = (float)-vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v176, 2), vaddq_f32(v176, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v176.f32, 1))), v158).f32[0]/ v155;
        if (v177 >= 0.0 && v177 <= 1.0)
        {
          float32x4_t v179 = vmlaq_n_f32(v73, v153, v177);
          if (v231)
          {
            int v180 = v229;
            uint64_t v181 = v231;
            while (1)
            {
              float32x4_t v182 = vsubq_f32(v179, *v180);
              float32x4_t v183 = vmulq_f32(v182, v182);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v183, 2), vaddq_f32(v183, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v183.f32, 1))).f32[0]) <= 0.00000011921)break; {
              ++v180;
              }
              if (!--v181)
              {
                uint64_t v184 = v231;
                goto LABEL_176;
              }
            }
          }
          else
          {
            uint64_t v184 = 0;
LABEL_176:
            ++v231;
            v229[v184] = v179;
          }
        }
        float32x4_t v185 = vmulq_f32(v66, v58);
        float v186 = (float)-(float)(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v185, 2), vaddq_f32(v185, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v185.f32, 1))).f32[0]- v158.f32[0])/ v155;
        if (v186 >= 0.0 && v186 <= 1.0)
        {
          float32x4_t v188 = vmlaq_n_f32(v58, v153, v186);
          if (v231)
          {
            float64x2_t v189 = v229;
            uint64_t v190 = v231;
            while (1)
            {
              float32x4_t v191 = vsubq_f32(v188, *v189);
              float32x4_t v192 = vmulq_f32(v191, v191);
              if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v192, 2), vaddq_f32(v192, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v192.f32, 1))).f32[0]) <= 0.00000011921)break; {
              ++v189;
              }
              if (!--v190)
              {
                uint64_t v193 = v231;
                goto LABEL_187;
              }
            }
          }
          else
          {
            uint64_t v193 = 0;
LABEL_187:
            ++v231;
            v229[v193] = v188;
          }
        }
      }
      float32x4_t v224 = v66;
      float32x4_t v228 = v72;
      uint64_t v232 = v229;
      float64x2_t v233 = &v237;
      unint64_t v194 = 126 - 2 * __clz(v231);
      uint64_t v195 = v231 ? v194 : 0;
      _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_Lb0EEEvT1_SM_T0_NS_15iterator_traitsISM_E15difference_typeEb(v229, &v229[v231], &v232, v195, 1);
      uint64_t v196 = v231;
      if (v231 < 3uLL) {
        goto LABEL_201;
      }
      uint64_t v197 = 0;
      int32x4_t v198 = (int32x4_t)vmulq_f32(v226, v226);
      v198.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v198, 2), vadd_f32(*(float32x2_t *)v198.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v198.i8, 1))).u32[0];
      float32x2_t v199 = vrsqrte_f32((float32x2_t)v198.u32[0]);
      float32x2_t v200 = vmul_f32(v199, vrsqrts_f32((float32x2_t)v198.u32[0], vmul_f32(v199, v199)));
      float32x4_t v201 = vmulq_n_f32(v226, vmul_f32(v200, vrsqrts_f32((float32x2_t)v198.u32[0], vmul_f32(v200, v200))).f32[0]);
      float32x4_t v202 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v201, (int32x4_t)v201), (int8x16_t)v201, 0xCuLL), vnegq_f32(v224)), v201, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v224, (int32x4_t)v224), (int8x16_t)v224, 0xCuLL));
      int32x4_t v203 = (int32x4_t)vmulq_f32(v202, v202);
      v203.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v203.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v203, 2), *(float32x2_t *)v203.i8)).u32[0];
      float32x2_t v204 = vrsqrte_f32((float32x2_t)v203.u32[0]);
      float32x2_t v205 = vmul_f32(v204, vrsqrts_f32((float32x2_t)v203.u32[0], vmul_f32(v204, v204)));
      float32x4_t v206 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v202, (int32x4_t)v202), (int8x16_t)v202, 0xCuLL), vmul_f32(v205, vrsqrts_f32((float32x2_t)v203.u32[0], vmul_f32(v205, v205))).f32[0]);
      float32x4_t v207 = vsubq_f32(*a1, v228);
      int32x4_t v208 = (int32x4_t)vmulq_f32(v201, v207);
      int32x4_t v209 = (int32x4_t)vmulq_f32(v206, v207);
      float32x4_t v210 = vsubq_f32(a1[1], v228);
      int32x4_t v211 = (int32x4_t)vmulq_f32(v201, v210);
      int32x4_t v212 = (int32x4_t)vmulq_f32(v206, v210);
      float32x4_t v213 = vsubq_f32(a1[2], v228);
      int32x4_t v214 = (int32x4_t)vmulq_f32(v201, v213);
      int32x4_t v215 = (int32x4_t)vmulq_f32(v206, v213);
      do
      {
        float32x4_t v216 = vsubq_f32(v229[v197], v228);
        int32x4_t v217 = (int32x4_t)vmulq_f32(v201, v216);
        int32x4_t v218 = (int32x4_t)vmulq_f32(v206, v216);
        *(int32x2_t *)&v237.f32[2 * v197++] = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v217, 2), vadd_f32(*(float32x2_t *)v217.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v217.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v218, 2), vadd_f32(*(float32x2_t *)v218.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v218.i8, 1))));
      }
      while (v196 != v197);
      float32x4_t v225 = v206;
      float32x4_t v227 = v201;
      unsigned __int8 v236 = 0;
                                      (float32x2_t)vdup_lane_s32(*(int32x2_t *)v211.i8, 1))),
                       (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v212, 2), vadd_f32(*(float32x2_t *)v212.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v212.i8, 1)))), (float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v214, 2), vadd_f32(*(float32x2_t *)v214.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v214.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v215, 2), vadd_f32(*(float32x2_t *)v215.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v215.i8, 1)))));
      uint64_t v219 = v236;
      unsigned __int8 v231 = v236;
      if (v236)
      {
        uint64_t v220 = 0;
        do
        {
          v229[v220] = vmlaq_lane_f32(vmlaq_n_f32(v228, v227, COERCE_FLOAT(*(&v232 + v220))), v225, (float32x2_t)*(&v232 + v220), 1);
          ++v220;
        }
        while (v219 != v220);
        uint64_t result = v231;
        if (v231)
        {
          float64x2_t v221 = v229;
          uint64_t v222 = v231;
          do
          {
            int32x4_t v223 = *(int32x4_t *)v221++;
            *a3++ = v223;
            --v222;
          }
          while (v222);
        }
      }
      else
      {
LABEL_201:
        uint64_t result = 0;
      }
LABEL_28:
      if (result > 2) {
        return result;
      }
    }
  }
  return 0;
}

uint64_t geom::intersect_triangle_bbox_3<double>(float64x2_t *a1, uint64_t a2, int64x2_t *a3)
{
  v292[19] = *(float64x2_t **)MEMORY[0x263EF8340];
  int64x2_t v9 = (int64x2_t)a1[2];
  int64x2_t v10 = (int64x2_t)a1[3];
  int64x2_t v11 = *(int64x2_t *)a1;
  int64x2_t v12 = (int64x2_t)a1[1];
  float64x2_t v13 = vsubq_f64((float64x2_t)v9, *a1);
  float64x2_t v14 = vsubq_f64((float64x2_t)v10, (float64x2_t)v12);
  int64x2_t v15 = (int64x2_t)a1[4];
  int64x2_t v16 = (int64x2_t)a1[5];
  float64x2_t v17 = vsubq_f64((float64x2_t)v15, *a1);
  float64x2_t v18 = vsubq_f64((float64x2_t)v16, (float64x2_t)v12);
  v19.f64[0] = v14.f64[0];
  v19.f64[1] = v13.f64[0];
  float64x2_t v20 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v14), v17, 1), v18, v13, 1);
  v18.f64[1] = v17.f64[0];
  int8x16_t v21 = (int8x16_t)vmlaq_f64(vmulq_f64(v18, vnegq_f64(v13)), v17, v19);
  double v22 = fabs(v20.f64[0]);
  BOOL v23 = v22 >= 2.22044605e-16;
  double v24 = fabs(*(double *)v21.i64);
  double v25 = fabs(*(double *)&v21.i64[1]);
  if (v24 >= 2.22044605e-16) {
    BOOL v23 = 1;
  }
  if (v23 || v25 >= 2.22044605e-16)
  {
    if (v24 < 2.22044605e-16 && v25 < 2.22044605e-16)
    {
      uint64_t v42 = *(void *)(a2 + 16);
      int8x16_t v43 = *(int8x16_t *)a2;
      unint64_t v44 = *(void *)(a2 + 48);
      int8x16_t v45 = *(int8x16_t *)(a2 + 32);
      if (*(double *)v11.i64 == *(double *)a2
        || ((double v46 = vabdd_f64(*(double *)v11.i64, *(double *)v45.i64),
             vabdd_f64(*(double *)v11.i64, *(double *)v43.i64) > 2.22044605e-16)
          ? (BOOL v47 = *(double *)v11.i64 == *(double *)v45.i64)
          : (BOOL v47 = 1),
            !v47 ? (BOOL v48 = v46 > 2.22044605e-16) : (BOOL v48 = 0),
            !v48))
      {
        v49.n128_u64[0] = vextq_s8(v43, v43, 8uLL).u64[0];
        v50.i64[0] = vextq_s8(v45, v45, 8uLL).u64[0];
        float64x2_t v51 = (float64x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v10, 8uLL);
        float64x2_t v52 = (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v16, 8uLL);
        v53.n128_u64[0] = v49.n128_u64[0];
        v53.n128_u64[1] = *(void *)(a2 + 16);
        v54.i64[0] = v50.i64[0];
        v54.i64[1] = *(void *)(a2 + 48);
        unsigned __int8 v285 = 0;
        v50.i64[1] = v42;
        __n128 v287 = v53;
        int8x16_t v288 = v50;
        v49.n128_u64[1] = v44;
        int8x16_t v289 = v54;
        __n128 v290 = v49;
        uint64_t result = v285;
        if (v285)
        {
          float32x4_t v55 = (int64x2_t *)v284;
          uint64_t v56 = v285;
          do
          {
            int64x2_t v57 = *v55++;
            *a3 = vzip1q_s64(*(int64x2_t *)a1, v57);
            a3[1] = vdupq_laneq_s64(v57, 1);
            a3 += 2;
            --v56;
          }
          while (v56);
        }
        goto LABEL_57;
      }
    }
    else if (v22 < 2.22044605e-16 && v25 < 2.22044605e-16)
    {
      double v58 = *(double *)(a2 + 8);
      double v59 = vabdd_f64(*(double *)&v11.i64[1], v58);
      BOOL v60 = *(double *)&v11.i64[1] != v58 && v59 > 2.22044605e-16;
      if (!v60
        || (double v61 = *(double *)(a2 + 40), *(double *)&v11.i64[1] == v61)
        || vabdd_f64(*(double *)&v11.i64[1], v61) <= 2.22044605e-16)
      {
        float64x2_t v94 = (float64x2_t)vzip1q_s64(v9, v10);
        __n128 v95 = *(__n128 *)a2;
        v95.n128_u64[1] = *(void *)(a2 + 16);
        int8x16_t v96 = *(int8x16_t *)(a2 + 32);
        unint64_t v97 = *(void *)(a2 + 48);
        v96.i64[1] = v97;
        int8x16_t v289 = v96;
        v96.i64[1] = v95.n128_i64[1];
        unsigned __int8 v285 = 0;
        __n128 v287 = v95;
        int8x16_t v288 = v96;
        v95.n128_u64[1] = v97;
        __n128 v290 = v95;
        uint64_t result = v285;
        if (v285)
        {
          uint64_t v98 = (int64x2_t *)v284;
          uint64_t v99 = v285;
          do
          {
            int64x2_t v100 = *v98++;
            float64x2_t v101 = *a1;
            *(void *)&v101.f64[0] = v100.i64[0];
            *a3 = (int64x2_t)v101;
            a3[1] = vdupq_laneq_s64(v100, 1);
            a3 += 2;
            --v99;
          }
          while (v99);
        }
        goto LABEL_57;
      }
    }
    else if (!v23)
    {
      double v28 = *(double *)(a2 + 16);
      int8x16_t v29 = *(int8x16_t *)a2;
      int8x16_t v30 = *(int8x16_t *)(a2 + 32);
      if (*(double *)v12.i64 == v28
        || ((double v31 = *(double *)(a2 + 48),
             BOOL v34 = vabdd_f64(*(double *)v12.i64, v28) > 2.22044605e-16,
             double v32 = vabdd_f64(*(double *)v12.i64, v31),
             v34)
          ? (_ZF = *(double *)v12.i64 == v31)
          : (_ZF = 1),
            !_ZF ? (BOOL v34 = v32 > 2.22044605e-16) : (BOOL v34 = 0),
            !v34))
      {
        v35.n128_u64[0] = *(void *)a2;
        v35.n128_u64[1] = vextq_s8(v29, v29, 8uLL).u64[0];
        v36.i64[0] = *(void *)(a2 + 32);
        v36.i64[1] = vextq_s8(v30, v30, 8uLL).u64[0];
        unsigned __int8 v285 = 0;
        v30.i64[1] = v35.n128_i64[1];
        __n128 v287 = v35;
        int8x16_t v288 = v30;
        v29.i64[1] = v36.i64[1];
        int8x16_t v289 = v36;
        __n128 v290 = (__n128)v29;
        uint64_t result = v285;
        if (v285)
        {
          uint64_t v39 = v284;
          uint64_t v40 = v285;
          do
          {
            int64x2_t v41 = *(int64x2_t *)v39++;
            v37.i64[0] = *(void *)&a1[1].f64[0];
            *a3 = v41;
            a3[1] = v37;
            a3 += 2;
            --v40;
          }
          while (v40);
        }
        goto LABEL_57;
      }
    }
    float64x2_t v62 = *(float64x2_t *)(a2 + 32);
    float64x2_t v63 = *(float64x2_t *)(a2 + 48);
    int64x2_t v64 = vcgtq_f64(vminnmq_f64((float64x2_t)v11, vminnmq_f64((float64x2_t)v9, (float64x2_t)v15)), v62);
    if ((vorrq_s8(vorrq_s8((int8x16_t)vdupq_laneq_s64(v64, 1), (int8x16_t)v64), (int8x16_t)vcgtq_f64(vminnmq_f64((float64x2_t)v12.u64[0], (float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)v10.u64[0], (float64x2_t)v16.u64[0])), v63)).u64[0] & 0x8000000000000000) == 0)
    {
      float64x2_t v66 = *(float64x2_t *)a2;
      float64x2_t v65 = *(float64x2_t *)(a2 + 16);
      int64x2_t v67 = vcgtq_f64(*(float64x2_t *)a2, vmaxnmq_f64((float64x2_t)v11, vmaxnmq_f64((float64x2_t)v9, (float64x2_t)v15)));
      if ((vorrq_s8(vorrq_s8((int8x16_t)vdupq_laneq_s64(v67, 1), (int8x16_t)v67), (int8x16_t)vcgtq_f64(v65, vmaxnmq_f64((float64x2_t)v12.u64[0], (float64x2_t)(unint64_t)*(_OWORD *)&vmaxnmq_f64((float64x2_t)v10.u64[0], (float64x2_t)v16.u64[0])))).u64[0] & 0x8000000000000000) == 0)
      {
        float64x2_t v68 = (float64x2_t)vextq_s8(v21, v21, 8uLL);
        *(void *)&v69.f64[0] = v21.i64[0];
        v69.f64[1] = v68.f64[0];
        float64x2_t v70 = vmulq_f64(v69, v69);
        v70.f64[0] = sqrt(v70.f64[1] + vmulq_f64(v20, v20).f64[0] + v70.f64[0]);
        if (v70.f64[0] <= 2.22044605e-16) {
          goto LABEL_196;
        }
        float64x2_t v278 = v14;
        float64x2_t v280 = v13;
        *(void *)&v20.f64[1] = v21.i64[0];
        float64x2_t v71 = vdivq_f64(v68, v70);
        float64x2_t v72 = vdivq_f64(v20, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v70.f64[0], 0));
        *(void *)&float64_t v73 = vextq_s8((int8x16_t)v72, (int8x16_t)v72, 8uLL).u64[0];
        float64x2_t v74 = vaddq_f64(vaddq_f64((float64x2_t)v9, (float64x2_t)v11), (float64x2_t)v15);
        __asm { FMOV            V2.2D, #3.0 }
        float64x2_t v78 = vdivq_f64(v74, _Q2);
        float64x2_t v79 = vdivq_f64(vaddq_f64(vaddq_f64((float64x2_t)v10, (float64x2_t)v12), (float64x2_t)v16), _Q2);
        __n128 v287 = (__n128)v72;
        int8x16_t v288 = (int8x16_t)v71;
        v80.f64[0] = v66.f64[0];
        v80.f64[1] = v62.f64[1];
        *(void *)&float64_t v81 = vextq_s8((int8x16_t)v80, (int8x16_t)v80, 8uLL).u64[0];
        v82.f64[1] = v65.f64[1];
        v82.f64[0] = v63.f64[0];
        *(void *)&float64_t v83 = vextq_s8((int8x16_t)v66, (int8x16_t)v66, 8uLL).u64[0];
        v84.f64[0] = v62.f64[0];
        v84.f64[1] = v66.f64[1];
        v85.f64[1] = v63.f64[1];
        v85.f64[0] = v65.f64[0];
        *(void *)&float64_t v86 = vextq_s8((int8x16_t)v84, (int8x16_t)v84, 8uLL).u64[0];
        v14.f64[0] = 0.0;
        unsigned __int8 v286 = 0;
        v68.f64[0] = 0.0;
        double v87 = vmulq_f64(v71, (float64x2_t)0).f64[0];
        double v88 = v87 + vaddvq_f64(vmulq_f64(v72, (float64x2_t)COERCE_UNSIGNED_INT64(v62.f64[0] - v66.f64[0])));
        float64x2_t v89 = vmulq_f64(v71, v65);
        float64x2_t v90 = vmulq_f64(v72, v66);
        float64x2_t v282 = v72;
        if (fabs(v88) > 2.22044605e-16)
        {
          double v91 = vaddvq_f64(v90);
          float64x2_t v4 = vmulq_f64(v79, v71);
          v4.f64[0] = v4.f64[0] + vaddvq_f64(vmulq_f64(v78, v72));
          v6.f64[0] = -(v89.f64[0] + v91 - v4.f64[0]) / v88;
          BOOL v92 = v6.f64[0] > 1.0 || v6.f64[0] < 0.0;
          if (v92)
          {
            unsigned int v93 = 0;
          }
          else
          {
            unsigned int v93 = 1;
            unsigned __int8 v286 = 1;
            v284[0] = (__n128)vmlaq_n_f64(v66, (float64x2_t)COERCE_UNSIGNED_INT64(v62.f64[0] - v66.f64[0]), v6.f64[0]);
            v284[1] = (__n128)vmlaq_f64(v65, v68, v6);
          }
          v3.f64[0] = -(v89.f64[0] + vaddvq_f64(vmulq_f64(v72, v80)) - v4.f64[0]) / v88;
          if (v3.f64[0] >= 0.0 && v3.f64[0] <= 1.0)
          {
            float64x2_t v103 = vmlaq_f64(v65, v68, v3);
            v104.f64[0] = v66.f64[0];
            v104.f64[1] = v81;
            float64x2_t v105 = vmlaq_n_f64(v104, (float64x2_t)COERCE_UNSIGNED_INT64(v62.f64[0] - v66.f64[0]), v3.f64[0]);
            uint64_t v106 = v93;
            if (v92)
            {
LABEL_69:
              unsigned __int8 v286 = ++v93;
              uint64_t v111 = &v284[2 * v106];
              *uint64_t v111 = (__n128)v105;
              v111[1] = (__n128)v103;
            }
            else
            {
              float64x2_t v107 = (float64x2_t *)v284;
              uint64_t v108 = v93;
              while (1)
              {
                float64x2_t v109 = vsubq_f64(v105, *v107);
                float64x2_t v110 = vsubq_f64(v103, v107[1]);
                if (sqrt(vmulq_f64(v110, v110).f64[0] + vaddvq_f64(vmulq_f64(v109, v109))) <= 2.22044605e-16) {
                  break;
                }
                v107 += 2;
                if (!--v108) {
                  goto LABEL_69;
                }
              }
            }
            float64x2_t v72 = v282;
          }
          float64x2_t v112 = vmulq_f64(v71, v63);
          v112.f64[0] = -(v112.f64[0] + v91 - v4.f64[0]) / v88;
          if (v112.f64[0] >= 0.0 && v112.f64[0] <= 1.0)
          {
            float64x2_t v114 = vmlaq_f64(v82, v68, v112);
            v115.f64[0] = v66.f64[0];
            v115.f64[1] = v83;
            float64x2_t v116 = vmlaq_n_f64(v115, (float64x2_t)COERCE_UNSIGNED_INT64(v62.f64[0] - v66.f64[0]), v112.f64[0]);
            if (v93)
            {
              uint64_t v117 = v93;
              float64_t v118 = (float64x2_t *)v284;
              uint64_t v119 = v93;
              while (1)
              {
                float64x2_t v120 = vsubq_f64(v116, *v118);
                float64x2_t v121 = vsubq_f64(v114, v118[1]);
                if (sqrt(vmulq_f64(v121, v121).f64[0] + vaddvq_f64(vmulq_f64(v120, v120))) <= 2.22044605e-16) {
                  break;
                }
                v118 += 2;
                if (!--v119) {
                  goto LABEL_81;
                }
              }
            }
            else
            {
              uint64_t v117 = 0;
LABEL_81:
              unsigned __int8 v286 = v93 + 1;
              float32x4_t v122 = &v284[2 * v117];
              *float32x4_t v122 = (__n128)v116;
              v122[1] = (__n128)v114;
            }
          }
          v123.f64[0] = v66.f64[0];
          v123.f64[1] = v81;
          v124.f64[0] = v72.f64[0];
          v124.f64[1] = v73;
          float64x2_t v5 = vmulq_f64(v124, v123);
          v5.f64[0] = -(vmulq_f64(v71, v82).f64[0] + vaddvq_f64(v5) - v4.f64[0]) / v88;
          if (v5.f64[0] >= 0.0 && v5.f64[0] <= 1.0)
          {
            float64x2_t v126 = vmlaq_f64(v82, v68, v5);
            v127.f64[0] = v66.f64[0];
            v127.f64[1] = v81;
            float64x2_t v4 = vmlaq_n_f64(v127, (float64x2_t)COERCE_UNSIGNED_INT64(v62.f64[0] - v66.f64[0]), v5.f64[0]);
            if (v286)
            {
              float32x4_t v128 = (float64x2_t *)v284;
              uint64_t v129 = v286;
              while (1)
              {
                float64x2_t v130 = vsubq_f64(v4, *v128);
                float64x2_t v131 = vsubq_f64(v126, v128[1]);
                float64x2_t v5 = vmulq_f64(v130, v130);
                if (sqrt(vmulq_f64(v131, v131).f64[0] + vaddvq_f64(v5)) <= 2.22044605e-16) {
                  break;
                }
                v128 += 2;
                if (!--v129)
                {
                  uint64_t v132 = v286;
                  goto LABEL_92;
                }
              }
            }
            else
            {
              uint64_t v132 = 0;
LABEL_92:
              ++v286;
              uint64_t v133 = &v284[2 * v132];
              *uint64_t v133 = (__n128)v4;
              v133[1] = (__n128)v126;
            }
          }
        }
        v14.f64[1] = v62.f64[1] - v66.f64[1];
        float64x2_t v134 = vmulq_f64(v72, v14);
        v134.f64[0] = v87 + vaddvq_f64(v134);
        if (fabs(v134.f64[0]) > 2.22044605e-16)
        {
          double v135 = vaddvq_f64(v90);
          double v136 = vmulq_f64(v79, v71).f64[0] + vaddvq_f64(vmulq_f64(v78, v72));
          v5.f64[0] = -(v89.f64[0] + v135 - v136) / v134.f64[0];
          if (v5.f64[0] >= 0.0 && v5.f64[0] <= 1.0)
          {
            float64x2_t v138 = vmlaq_f64(v65, v68, v5);
            v139.f64[0] = 0.0;
            v139.f64[1] = v62.f64[1] - v66.f64[1];
            float64x2_t v4 = vmlaq_n_f64(v66, v139, v5.f64[0]);
            if (v286)
            {
              uint64_t v140 = (float64x2_t *)v284;
              uint64_t v141 = v286;
              while (1)
              {
                float64x2_t v142 = vsubq_f64(v4, *v140);
                float64x2_t v143 = vsubq_f64(v138, v140[1]);
                if (sqrt(vmulq_f64(v143, v143).f64[0] + vaddvq_f64(vmulq_f64(v142, v142))) <= 2.22044605e-16) {
                  break;
                }
                v140 += 2;
                if (!--v141)
                {
                  uint64_t v144 = v286;
                  goto LABEL_104;
                }
              }
            }
            else
            {
              uint64_t v144 = 0;
LABEL_104:
              ++v286;
              float v145 = &v284[2 * v144];
              __n128 *v145 = (__n128)v4;
              v145[1] = (__n128)v138;
            }
          }
          float64x2_t v146 = vmulq_f64(v72, v84);
          v4.f64[0] = -(v89.f64[0] + vaddvq_f64(v146) - v136) / v134.f64[0];
          if (v4.f64[0] >= 0.0 && v4.f64[0] <= 1.0)
          {
            v148.f64[0] = 0.0;
            v148.f64[1] = v62.f64[1] - v66.f64[1];
            float64x2_t v149 = vmlaq_f64(v85, v68, v4);
            v150.f64[0] = v62.f64[0];
            v150.f64[1] = v86;
            float64x2_t v146 = vmlaq_n_f64(v150, v148, v4.f64[0]);
            if (v286)
            {
              float32x4_t v151 = (float64x2_t *)v284;
              uint64_t v152 = v286;
              while (1)
              {
                float64x2_t v153 = vsubq_f64(v146, *v151);
                float64x2_t v154 = vsubq_f64(v149, v151[1]);
                if (sqrt(vmulq_f64(v154, v154).f64[0] + vaddvq_f64(vmulq_f64(v153, v153))) <= 2.22044605e-16) {
                  break;
                }
                v151 += 2;
                if (!--v152)
                {
                  uint64_t v155 = v286;
                  goto LABEL_115;
                }
              }
            }
            else
            {
              uint64_t v155 = 0;
LABEL_115:
              ++v286;
              float32x4_t v156 = &v284[2 * v155];
              *float32x4_t v156 = (__n128)v146;
              v156[1] = (__n128)v149;
            }
          }
          v146.f64[0] = -(vmulq_f64(v71, v63).f64[0] + v135 - v136) / v134.f64[0];
          if (v146.f64[0] >= 0.0 && v146.f64[0] <= 1.0)
          {
            v158.f64[0] = 0.0;
            v158.f64[1] = v62.f64[1] - v66.f64[1];
            float64x2_t v159 = vmlaq_f64(v82, v68, v146);
            v160.f64[0] = v66.f64[0];
            v160.f64[1] = v83;
            float64x2_t v161 = vmlaq_n_f64(v160, v158, v146.f64[0]);
            if (v286)
            {
              double v162 = (float64x2_t *)v284;
              uint64_t v163 = v286;
              while (1)
              {
                float64x2_t v164 = vsubq_f64(v161, *v162);
                float64x2_t v165 = vsubq_f64(v159, v162[1]);
                if (sqrt(vmulq_f64(v165, v165).f64[0] + vaddvq_f64(vmulq_f64(v164, v164))) <= 2.22044605e-16) {
                  break;
                }
                v162 += 2;
                if (!--v163)
                {
                  uint64_t v166 = v286;
                  goto LABEL_126;
                }
              }
            }
            else
            {
              uint64_t v166 = 0;
LABEL_126:
              ++v286;
              float32x4_t v167 = &v284[2 * v166];
              *float32x4_t v167 = (__n128)v161;
              v167[1] = (__n128)v159;
            }
          }
          v168.f64[0] = v62.f64[0];
          v168.f64[1] = v86;
          v169.f64[0] = v72.f64[0];
          v169.f64[1] = v73;
          v134.f64[0] = -(vmulq_f64(v71, v63).f64[0] + vaddvq_f64(vmulq_f64(v169, v168)) - v136) / v134.f64[0];
          if (v134.f64[0] >= 0.0 && v134.f64[0] <= 1.0)
          {
            float64x2_t v171 = vmlaq_f64(v63, v68, v134);
            v68.f64[1] = v62.f64[1] - v66.f64[1];
            v172.f64[0] = v62.f64[0];
            v172.f64[1] = v86;
            float64x2_t v173 = vmlaq_n_f64(v172, v68, v134.f64[0]);
            if (v286)
            {
              float32x4_t v174 = (float64x2_t *)v284;
              uint64_t v175 = v286;
              while (1)
              {
                float64x2_t v176 = vsubq_f64(v173, *v174);
                float64x2_t v177 = vsubq_f64(v171, v174[1]);
                if (sqrt(vmulq_f64(v177, v177).f64[0] + vaddvq_f64(vmulq_f64(v176, v176))) <= 2.22044605e-16) {
                  break;
                }
                v174 += 2;
                if (!--v175)
                {
                  uint64_t v178 = v286;
                  goto LABEL_137;
                }
              }
            }
            else
            {
              uint64_t v178 = 0;
LABEL_137:
              ++v286;
              float32x4_t v179 = &v284[2 * v178];
              *float32x4_t v179 = (__n128)v173;
              v179[1] = (__n128)v171;
            }
          }
        }
        v63.f64[0] = v63.f64[0] - v65.f64[0];
        double v180 = vmulq_f64(v71, v63).f64[0] + vaddvq_f64(vmulq_f64(v72, (float64x2_t)0));
        if (fabs(v180) > 2.22044605e-16)
        {
          float64_t v181 = v89.f64[0] + vaddvq_f64(v90);
          double v182 = vmulq_f64(v79, v71).f64[0] + vaddvq_f64(vmulq_f64(v78, v72));
          v134.f64[0] = -(v181 - v182) / v180;
          if (v134.f64[0] >= 0.0 && v134.f64[0] <= 1.0)
          {
            float64x2_t v184 = vmlaq_f64(v65, v63, v134);
            float64x2_t v185 = vmlaq_n_f64(v66, (float64x2_t)0, v134.f64[0]);
            if (v286)
            {
              float v186 = (float64x2_t *)v284;
              uint64_t v187 = v286;
              while (1)
              {
                float64x2_t v188 = vsubq_f64(v185, *v186);
                float64x2_t v189 = vsubq_f64(v184, v186[1]);
                if (sqrt(vmulq_f64(v189, v189).f64[0] + vaddvq_f64(vmulq_f64(v188, v188))) <= 2.22044605e-16) {
                  break;
                }
                v186 += 2;
                if (!--v187)
                {
                  uint64_t v190 = v286;
                  goto LABEL_149;
                }
              }
            }
            else
            {
              uint64_t v190 = 0;
LABEL_149:
              ++v286;
              float32x4_t v191 = &v284[2 * v190];
              *float32x4_t v191 = (__n128)v185;
              v191[1] = (__n128)v184;
            }
          }
          unint64_t v192 = vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL).u64[0];
          float64x2_t v193 = vmulq_f64(v72, v84);
          v193.f64[0] = -(v89.f64[0] + vaddvq_f64(v193) - v182) / v180;
          if (v193.f64[0] >= 0.0 && v193.f64[0] <= 1.0)
          {
            float64x2_t v195 = vmlaq_f64(v85, v63, v193);
            v84.f64[1] = v86;
            float64x2_t v196 = vmlaq_n_f64(v84, (float64x2_t)0, v193.f64[0]);
            if (v286)
            {
              uint64_t v197 = (float64x2_t *)v284;
              uint64_t v198 = v286;
              while (1)
              {
                float64x2_t v199 = vsubq_f64(v196, *v197);
                float64x2_t v200 = vsubq_f64(v195, v197[1]);
                if (sqrt(vmulq_f64(v200, v200).f64[0] + vaddvq_f64(vmulq_f64(v199, v199))) <= 2.22044605e-16) {
                  break;
                }
                v197 += 2;
                if (!--v198)
                {
                  uint64_t v201 = v286;
                  goto LABEL_160;
                }
              }
            }
            else
            {
              uint64_t v201 = 0;
LABEL_160:
              ++v286;
              float32x4_t v202 = &v284[2 * v201];
              *float32x4_t v202 = (__n128)v196;
              v202[1] = (__n128)v195;
            }
          }
          v89.f64[0] = -(v89.f64[0] + vaddvq_f64(vmulq_f64(v72, v80)) - v182) / v180;
          if (v89.f64[0] >= 0.0 && v89.f64[0] <= 1.0)
          {
            float64x2_t v204 = vmlaq_f64(v65, v63, v89);
            v80.f64[1] = v81;
            float64x2_t v205 = vmlaq_n_f64(v80, (float64x2_t)0, v89.f64[0]);
            if (v286)
            {
              float32x4_t v206 = (float64x2_t *)v284;
              uint64_t v207 = v286;
              while (1)
              {
                float64x2_t v208 = vsubq_f64(v205, *v206);
                float64x2_t v209 = vsubq_f64(v204, v206[1]);
                if (sqrt(vmulq_f64(v209, v209).f64[0] + vaddvq_f64(vmulq_f64(v208, v208))) <= 2.22044605e-16) {
                  break;
                }
                v206 += 2;
                if (!--v207)
                {
                  uint64_t v210 = v286;
                  goto LABEL_171;
                }
              }
            }
            else
            {
              uint64_t v210 = 0;
LABEL_171:
              ++v286;
              int32x4_t v211 = &v284[2 * v210];
              *int32x4_t v211 = (__n128)v205;
              v211[1] = (__n128)v204;
            }
          }
          v212.f64[0] = v62.f64[0];
          *(void *)&v212.f64[1] = v192;
          v213.f64[0] = v72.f64[0];
          v213.f64[1] = v73;
          float64x2_t v214 = vmulq_f64(v213, v212);
          v214.f64[0] = -(vmulq_f64(v71, v85).f64[0] + vaddvq_f64(v214) - v182) / v180;
          if (v214.f64[0] >= 0.0 && v214.f64[0] <= 1.0)
          {
            float64x2_t v216 = vmlaq_f64(v85, v63, v214);
            *(void *)&v62.f64[1] = v192;
            float64x2_t v217 = vmlaq_n_f64(v62, (float64x2_t)0, v214.f64[0]);
            if (v286)
            {
              int32x4_t v218 = (float64x2_t *)v284;
              uint64_t v219 = v286;
              while (1)
              {
                float64x2_t v220 = vsubq_f64(v217, *v218);
                float64x2_t v221 = vsubq_f64(v216, v218[1]);
                if (sqrt(vmulq_f64(v221, v221).f64[0] + vaddvq_f64(vmulq_f64(v220, v220))) <= 2.22044605e-16) {
                  break;
                }
                v218 += 2;
                if (!--v219)
                {
                  uint64_t v222 = v286;
                  goto LABEL_182;
                }
              }
            }
            else
            {
              uint64_t v222 = 0;
LABEL_182:
              ++v286;
              int32x4_t v223 = &v284[2 * v222];
              *int32x4_t v223 = (__n128)v217;
              v223[1] = (__n128)v216;
            }
          }
        }
        v292[0] = (float64x2_t *)v284;
        v292[1] = (float64x2_t *)&v287;
        unint64_t v224 = 126 - 2 * __clz(v286);
        uint64_t v225 = v286 ? v224 : 0;
        _ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_Lb0EEEvT1_SM_T0_NS_15iterator_traitsISM_E15difference_typeEb((float64x2_t *)v284, (unint64_t)v284[2 * v286].n128_u64, v292, v225, 1);
        uint64_t v226 = v286;
        if (v286 < 3uLL) {
          goto LABEL_196;
        }
        uint64_t v227 = 0;
        float64x2_t v228 = v280;
        float64x2_t v229 = vmulq_f64(v278, v278);
        v229.f64[0] = 1.0 / sqrt(v229.f64[0] + vaddvq_f64(vmulq_f64(v228, v228)));
        *(void *)&v228.f64[1] = vextq_s8((int8x16_t)v228, (int8x16_t)v228, 8uLL).u64[0];
        float64x2_t v230 = vmulq_f64(v278, v229);
        float64x2_t v231 = vmulq_n_f64(v228, v229.f64[0]);
        v229.f64[0] = v230.f64[0];
        v229.f64[1] = v231.f64[0];
        v228.f64[0] = v71.f64[0];
        v228.f64[1] = v282.f64[0];
        float64x2_t v232 = vmlaq_f64(vmulq_f64(v229, vnegq_f64(v282)), v231, v228);
        float64x2_t v233 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v71), v231, 1), v230, v282, 1);
        float64x2_t v234 = vmulq_f64(v232, v232);
        v234.f64[0] = sqrt(v234.f64[1] + vmulq_f64(v233, v233).f64[0] + v234.f64[0]);
        v233.f64[1] = v232.f64[0];
        v234.f64[0] = 1.0 / v234.f64[0];
        float64x2_t v235 = vmulq_n_f64(v233, v234.f64[0]);
        unint64_t v274 = vextq_s8((int8x16_t)v231, (int8x16_t)v231, 8uLL).u64[0];
        unint64_t v275 = vextq_s8((int8x16_t)v78, (int8x16_t)v78, 8uLL).u64[0];
        float64x2_t v236 = vmulq_laneq_f64(v234, v232, 1);
        unint64_t v276 = vextq_s8((int8x16_t)v235, (int8x16_t)v235, 8uLL).u64[0];
        float64x2_t v237 = vsubq_f64(a1[1], v79);
        float64x2_t v238 = vsubq_f64(*a1, v78);
        float64x2_t v239 = vmulq_f64(v231, v238);
        *(void *)&double v240 = *(_OWORD *)&vmulq_f64(v230, v237);
        float64x2_t v241 = vmulq_f64(v235, v238);
        *(void *)&double v242 = *(_OWORD *)&vmulq_f64(v236, v237);
        float64x2_t v243 = vsubq_f64(a1[3], v79);
        float64x2_t v244 = vsubq_f64(a1[2], v78);
        float64x2_t v245 = vmulq_f64(v231, v244);
        *(void *)&double v246 = *(_OWORD *)&vmulq_f64(v230, v243);
        float64x2_t v247 = vmulq_f64(v235, v244);
        *(void *)&double v248 = *(_OWORD *)&vmulq_f64(v236, v243);
        float64x2_t v249 = vsubq_f64(a1[5], v79);
        float64x2_t v250 = vsubq_f64(a1[4], v78);
        float64x2_t v251 = vmulq_f64(v231, v250);
        *(void *)&double v252 = *(_OWORD *)&vmulq_f64(v230, v249);
        float64x2_t v253 = vmulq_f64(v235, v250);
        *(void *)&double v254 = *(_OWORD *)&vmulq_f64(v236, v249);
        do
        {
          v255 = (float64x2_t *)&v284[2 * v227];
          float64x2_t v256 = vsubq_f64(*v255, v78);
          float64x2_t v257 = vsubq_f64(v255[1], v79);
          *(double *)&long long v258 = vmulq_f64(v230, v257).f64[0] + vaddvq_f64(vmulq_f64(v231, v256));
          *((double *)&v258 + 1) = vmulq_f64(v236, v257).f64[0] + vaddvq_f64(vmulq_f64(v235, v256));
          *(_OWORD *)&v292[2 * v227++] = v258;
        }
        while (v226 != v227);
        float64x2_t v277 = v236;
        float64_t v279 = v235.f64[0];
        float64_t v281 = v231.f64[0];
        float64x2_t v283 = v230;
        v259.f64[0] = v240 + vaddvq_f64(v239);
        double v260 = v242 + vaddvq_f64(v241);
        v261.f64[0] = v246 + vaddvq_f64(v245);
        v262.f64[0] = v252 + vaddvq_f64(v251);
        v259.f64[1] = v260;
        v261.f64[1] = v248 + vaddvq_f64(v247);
        v262.f64[1] = v254 + vaddvq_f64(v253);
        unsigned __int8 v291 = 0;
        uint64_t v263 = v291;
        unsigned __int8 v286 = v291;
        if (v291)
        {
          uint64_t v264 = 0;
          v267.f64[0] = v279;
          v265.f64[0] = v281;
          *(void *)&v265.f64[1] = v274;
          v266.f64[0] = v78.f64[0];
          *(void *)&v266.f64[1] = v275;
          *(void *)&v267.f64[1] = v276;
          do
          {
            float64x2_t v268 = *((float64x2_t *)&v287 + v264);
            uint64_t v269 = (float64x2_t *)&v284[2 * v264];
            *uint64_t v269 = vmlaq_laneq_f64(vmlaq_n_f64(v266, v265, v268.f64[0]), v267, v268, 1);
            v269[1] = vmlaq_laneq_f64(vmlaq_f64(v79, v283, v268), v277, v268, 1);
            ++v264;
          }
          while (v263 != v264);
          uint64_t result = v286;
          if (v286)
          {
            uint64_t v270 = v284;
            uint64_t v271 = v286;
            do
            {
              __n128 v272 = *v270;
              __n128 v273 = v270[1];
              v270 += 2;
              *a3 = (int64x2_t)v272;
              a3[1] = (int64x2_t)v273;
              a3 += 2;
              --v271;
            }
            while (v271);
          }
        }
        else
        {
LABEL_196:
          uint64_t result = 0;
        }
LABEL_57:
        if (result > 2) {
          return result;
        }
      }
    }
  }
  return 0;
}

uint64_t geom_intersect_triangle_bbox_3f(int32x4_t *a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, __n128 a5, __n128 a6)
{
  uint64_t v6 = 0;
  uint64_t v13 = *MEMORY[0x263EF8340];
  v11[0] = a2;
  v11[1] = a3;
  v11[2] = a4;
  v12[0] = a5;
  v12[1] = a6;
  float32x4_t v7 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  a2.i64[0] = 0x7F0000007FLL;
  a2.i32[2] = 127;
  do
  {
    float32x4_t v8 = (float32x4_t)v12[v6];
    v8.i32[3] = 0;
    v7.i32[3] = 0;
    float32x4_t v7 = vminnmq_f32(v8, v7);
    a2.i32[3] = 0;
    a2 = vmaxnmq_f32(v8, a2);
    ++v6;
  }
  while (v6 != 2);
  v10[0] = v7;
  v10[1] = a2;
  return geom::intersect_triangle_bbox_3<float>(v11, v10, a1);
}

uint64_t geom_intersect_triangle_bbox_3d(float64x2_t *a1, float64x2_t *a2, int64x2_t *a3)
{
  uint64_t v3 = 0;
  uint64_t v18 = *MEMORY[0x263EF8340];
  float64x2_t v4 = a1[3];
  v16[2] = a1[2];
  v16[3] = v4;
  float64x2_t v5 = a1[5];
  v16[4] = a1[4];
  v16[5] = v5;
  float64x2_t v6 = a1[1];
  v16[0] = *a1;
  v16[1] = v6;
  float64x2_t v11 = a2[1];
  v17[0] = *a2;
  v17[1] = v11;
  float64x2_t v7 = a2[3];
  float64x2_t v8 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  v9.f64[0] = INFINITY;
  v17[2] = a2[2];
  v17[3] = v7;
  float64x2_t v10 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  v11.f64[0] = -INFINITY;
  do
  {
    float64x2_t v12 = (float64x2_t)v17[v3];
    long long v13 = v17[v3 + 1];
    float64x2_t v8 = vminnmq_f64(v12, v8);
    float64x2_t v9 = vminnmq_f64((float64x2_t)(unint64_t)v13, (float64x2_t)*(unint64_t *)&v9.f64[0]);
    float64x2_t v10 = vmaxnmq_f64(v12, v10);
    float64x2_t v11 = vmaxnmq_f64((float64x2_t)(unint64_t)v13, (float64x2_t)*(unint64_t *)&v11.f64[0]);
    v3 += 2;
  }
  while (v3 != 4);
  v15[0] = v8;
  v15[1] = v9;
  v15[2] = v10;
  v15[3] = v11;
  return geom::intersect_triangle_bbox_3<double>(v16, (uint64_t)v15, a3);
}

void geom::anonymous namespace'::clip_2d_triangle_with_polygon<float>(unsigned int a1, uint64_t a2, uint64_t a3, float32x2_t a4, float32x2_t a5, float32x2_t a6)
{
  unsigned int v8 = 1;
  *(unsigned char *)(a3 + 72) = 1;
  *(double *)a3 = *(double *)&a4;
  float32x2_t v9 = vsub_f32(a5, a4);
  if (sqrtf(vaddv_f32(vmul_f32(v9, v9))) > 0.00000011921)
  {
    unsigned int v8 = 2;
    *(unsigned char *)(a3 + 72) = 2;
    *(double *)(a3 + 8) = *(double *)&a5;
  }
  float64x2_t v10 = (float32x2_t *)a3;
  uint64_t v11 = v8;
  while (1)
  {
    float32x2_t v12 = vsub_f32(a6, *v10);
    if (sqrtf(vaddv_f32(vmul_f32(v12, v12))) <= 0.00000011921) {
      break;
    }
    ++v10;
    if (!--v11)
    {
      *(unsigned char *)(a3 + 72) = v8 + 1;
      *(double *)(a3 + 8 * v8) = *(double *)&a6;
      break;
    }
  }
  if (a1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a1;
    uint64_t v64 = a1;
    do
    {
      unsigned __int8 v66 = *(unsigned char *)(a3 + 72);
      if (v66)
      {
        for (unint64_t i = 0; i < v66; ++i)
        {
          v65[i] = *(float32x2_t *)(a3 + 8 * i);
          unint64_t v16 = v66;
        }
        *(unsigned char *)(a3 + 72) = 0;
        uint64_t v17 = v13 + 1;
        if (v13 + 1 == v14) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = (v13 + 1);
        }
        if (v16)
        {
          uint64_t v19 = 0;
          while (1)
          {
            float32x2_t v20 = v65[v19];
            float v21 = _simd_orient_pf2(*(simd_float2 *)(a2 + 8 * v13), *(simd_float2 *)(a2 + 8 * v18), (simd_float2)v20);
            float32x2_t v22 = v65[(v16 - 1 + v19) % v16];
            float v23 = _simd_orient_pf2(*(simd_float2 *)(a2 + 8 * v13), *(simd_float2 *)(a2 + 8 * v18), (simd_float2)v22);
            if (v21 >= 0.0) {
              break;
            }
            if (v23 >= 0.0)
            {
              float32x2_t v24 = *(float32x2_t *)(a2 + 8 * v13);
              float32x2_t v25 = vsub_f32(*(float32x2_t *)(a2 + 8 * v18), v24);
              float32x2_t v26 = vsub_f32(v22, v20);
              float v27 = vmlas_n_f32((float)-v26.f32[1] * v25.f32[0], v25.f32[1], v26.f32[0]);
              if (fabsf(v27) > 0.00000011921)
              {
                float32x2_t v28 = vsub_f32(v24, v20);
                float32x2_t v20 = vmla_n_f32(v20, v26, vmlas_n_f32(-(float)(v28.f32[1] * v25.f32[0]), v25.f32[1], v28.f32[0]) / v27);
                uint64_t v29 = *(unsigned __int8 *)(a3 + 72);
                int8x16_t v30 = (float32x2_t *)a3;
                uint64_t v31 = v29;
                if (*(unsigned char *)(a3 + 72))
                {
                  while (1)
                  {
                    float32x2_t v32 = vsub_f32(v20, *v30);
                    if (sqrtf(vaddv_f32(vmul_f32(v32, v32))) <= 0.00000011921) {
                      goto LABEL_69;
                    }
                    ++v30;
                    if (!--v31)
                    {
                      LOBYTE(v33) = *(unsigned char *)(a3 + 72);
                      goto LABEL_68;
                    }
                  }
                }
                LOBYTE(v33) = *(unsigned char *)(a3 + 72);
                goto LABEL_68;
              }
              unsigned int v33 = *(unsigned __int8 *)(a3 + 72);
              BOOL v47 = (float32x2_t *)a3;
              uint64_t v48 = *(unsigned __int8 *)(a3 + 72);
              if (*(unsigned char *)(a3 + 72))
              {
                while (1)
                {
                  float32x2_t v49 = vsub_f32(v22, *v47);
                  if (sqrtf(vaddv_f32(vmul_f32(v49, v49))) <= 0.00000011921) {
                    break;
                  }
                  ++v47;
                  if (!--v48)
                  {
                    uint64_t v50 = *(unsigned __int8 *)(a3 + 72);
                    goto LABEL_47;
                  }
                }
                if (*(unsigned char *)(a3 + 72))
                {
LABEL_58:
                  uint64_t v29 = v33;
                  double v58 = (float32x2_t *)a3;
                  uint64_t v59 = v33;
                  while (1)
                  {
                    float32x2_t v60 = vsub_f32(v20, *v58);
                    if (sqrtf(vaddv_f32(vmul_f32(v60, v60))) <= 0.00000011921) {
                      goto LABEL_69;
                    }
                    ++v58;
                    if (!--v59) {
                      goto LABEL_68;
                    }
                  }
                }
              }
              else
              {
                uint64_t v50 = 0;
LABEL_47:
                *(unsigned char *)(a3 + 72) = v33 + 1;
                *(float32x2_t *)(a3 + 8 * v50) = v22;
                unsigned int v33 = *(unsigned __int8 *)(a3 + 72);
                if (*(unsigned char *)(a3 + 72)) {
                  goto LABEL_58;
                }
              }
LABEL_67:
              uint64_t v29 = 0;
LABEL_68:
              *(unsigned char *)(a3 + 72) = v33 + 1;
              *(float32x2_t *)(a3 + 8 * v29) = v20;
            }
LABEL_69:
            if (++v19 == v16)
            {
              uint64_t v14 = v64;
              goto LABEL_72;
            }
          }
          if (v23 >= 0.0)
          {
            LOBYTE(v33) = *(unsigned char *)(a3 + 72);
            unint64_t v44 = (float32x2_t *)a3;
            uint64_t v45 = v33;
            if ((_BYTE)v33)
            {
              while (1)
              {
                float32x2_t v46 = vsub_f32(v20, *v44);
                if (sqrtf(vaddv_f32(vmul_f32(v46, v46))) <= 0.00000011921) {
                  goto LABEL_69;
                }
                ++v44;
                if (!--v45)
                {
                  uint64_t v29 = *(unsigned __int8 *)(a3 + 72);
                  goto LABEL_68;
                }
              }
            }
          }
          else
          {
            float32x2_t v34 = *(float32x2_t *)(a2 + 8 * v13);
            float32x2_t v35 = vsub_f32(*(float32x2_t *)(a2 + 8 * v18), v34);
            float32x2_t v36 = vsub_f32(v22, v20);
            float v37 = vmlas_n_f32((float)-v36.f32[1] * v35.f32[0], v35.f32[1], v36.f32[0]);
            if (fabsf(v37) <= 0.00000011921)
            {
              unsigned int v33 = *(unsigned __int8 *)(a3 + 72);
              float64x2_t v51 = (float32x2_t *)a3;
              uint64_t v52 = *(unsigned __int8 *)(a3 + 72);
              if (*(unsigned char *)(a3 + 72))
              {
                while (1)
                {
                  float32x2_t v53 = vsub_f32(v22, *v51);
                  if (sqrtf(vaddv_f32(vmul_f32(v53, v53))) <= 0.00000011921) {
                    break;
                  }
                  ++v51;
                  if (!--v52)
                  {
                    uint64_t v54 = *(unsigned __int8 *)(a3 + 72);
                    goto LABEL_50;
                  }
                }
                if (*(unsigned char *)(a3 + 72))
                {
LABEL_63:
                  uint64_t v29 = v33;
                  double v61 = (float32x2_t *)a3;
                  uint64_t v62 = v33;
                  while (1)
                  {
                    float32x2_t v63 = vsub_f32(v20, *v61);
                    if (sqrtf(vaddv_f32(vmul_f32(v63, v63))) <= 0.00000011921) {
                      goto LABEL_69;
                    }
                    ++v61;
                    if (!--v62) {
                      goto LABEL_68;
                    }
                  }
                }
              }
              else
              {
                uint64_t v54 = 0;
LABEL_50:
                *(unsigned char *)(a3 + 72) = v33 + 1;
                *(float32x2_t *)(a3 + 8 * v54) = v22;
                unsigned int v33 = *(unsigned __int8 *)(a3 + 72);
                if (*(unsigned char *)(a3 + 72)) {
                  goto LABEL_63;
                }
              }
            }
            else
            {
              float32x2_t v38 = vsub_f32(v34, v20);
              float32x2_t v39 = vmla_n_f32(v20, v36, vmlas_n_f32(-(float)(v38.f32[1] * v35.f32[0]), v35.f32[1], v38.f32[0]) / v37);
              unsigned int v33 = *(unsigned __int8 *)(a3 + 72);
              uint64_t v40 = (float32x2_t *)a3;
              uint64_t v41 = *(unsigned __int8 *)(a3 + 72);
              if (*(unsigned char *)(a3 + 72))
              {
                while (1)
                {
                  float32x2_t v42 = vsub_f32(v39, *v40);
                  if (sqrtf(vaddv_f32(vmul_f32(v42, v42))) <= 0.00000011921) {
                    break;
                  }
                  ++v40;
                  if (!--v41)
                  {
                    uint64_t v43 = *(unsigned __int8 *)(a3 + 72);
                    goto LABEL_44;
                  }
                }
                if (*(unsigned char *)(a3 + 72))
                {
LABEL_53:
                  uint64_t v29 = v33;
                  float32x4_t v55 = (float32x2_t *)a3;
                  uint64_t v56 = v33;
                  while (1)
                  {
                    float32x2_t v57 = vsub_f32(v20, *v55);
                    if (sqrtf(vaddv_f32(vmul_f32(v57, v57))) <= 0.00000011921) {
                      goto LABEL_69;
                    }
                    ++v55;
                    if (!--v56) {
                      goto LABEL_68;
                    }
                  }
                }
              }
              else
              {
                uint64_t v43 = 0;
LABEL_44:
                *(unsigned char *)(a3 + 72) = v33 + 1;
                *(float32x2_t *)(a3 + 8 * v43) = v39;
                unsigned int v33 = *(unsigned __int8 *)(a3 + 72);
                if (*(unsigned char *)(a3 + 72)) {
                  goto LABEL_53;
                }
              }
            }
          }
          goto LABEL_67;
        }
      }
      else
      {
        *(unsigned char *)(a3 + 72) = 0;
        uint64_t v17 = v13 + 1;
      }
LABEL_72:
      uint64_t v13 = v17;
    }
    while (v17 != v14);
  }
}

float32x4_t *_ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_Lb0EEEvT1_SM_T0_NS_15iterator_traitsISM_E15difference_typeEb(float32x4_t *result, float32x4_t *a2, float32x4_t **a3, uint64_t a4, char a5)
{
  uint64_t v11 = result;
LABEL_2:
  float32x2_t v12 = v11;
  while (1)
  {
    uint64_t v11 = v12;
    uint64_t v13 = (char *)a2 - (char *)v12;
    unint64_t v14 = a2 - v12;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float32x4_t v93 = a2[-1];
          float32x4_t v94 = **a3;
          float32x4_t v95 = vsubq_f32(v93, v94);
          float32x4_t v96 = *v12;
          float32x4_t v97 = vsubq_f32(*v12, v94);
          int32x4_t v98 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v97, (int32x4_t)v97), (int8x16_t)v97, 0xCuLL), vnegq_f32(v95)), v97, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), (int8x16_t)v95, 0xCuLL));
          float32x4_t v99 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v98, v98), (int8x16_t)v98, 0xCuLL));
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1))).f32[0] > 0.0)
          {
            *float32x2_t v12 = v93;
            a2[-1] = v96;
          }
          break;
        case 3uLL:
          uint64_t result = _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEjT1_SM_SM_T0_(v12, v12 + 1, a2 - 1, a3);
          break;
        case 4uLL:
          uint64_t result = _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEvT1_SM_SM_SM_T0_(v12, v12 + 1, v12 + 2, a2 - 1, a3);
          break;
        case 5uLL:
          int64x2_t v100 = v12 + 1;
          float64x2_t v101 = v12 + 2;
          float32x4_t v102 = v12 + 3;
          uint64_t result = _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEvT1_SM_SM_SM_T0_(v12, v12 + 1, v12 + 2, v12 + 3, a3);
          float32x4_t v103 = **a3;
          float32x4_t v104 = a2[-1];
          float32x4_t v105 = vsubq_f32(v104, v103);
          float32x4_t v106 = v12[3];
          float32x4_t v107 = vsubq_f32(v106, v103);
          int32x4_t v108 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v107, (int32x4_t)v107), (int8x16_t)v107, 0xCuLL), vnegq_f32(v105)), v107, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v105, (int32x4_t)v105), (int8x16_t)v105, 0xCuLL));
          float32x4_t v109 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v108, v108), (int8x16_t)v108, 0xCuLL));
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v109, 2), vaddq_f32(v109, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v109.f32, 1))).f32[0] > 0.0)
          {
            *float32x4_t v102 = v104;
            a2[-1] = v106;
            float32x4_t v110 = **a3;
            float32x4_t v111 = *v102;
            float32x4_t v112 = vsubq_f32(*v102, v110);
            float32x4_t v113 = *v101;
            float32x4_t v114 = vsubq_f32(*v101, v110);
            int32x4_t v115 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v114, (int32x4_t)v114), (int8x16_t)v114, 0xCuLL), vnegq_f32(v112)), v114, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), (int8x16_t)v112, 0xCuLL));
            float32x4_t v116 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v115, v115), (int8x16_t)v115, 0xCuLL));
            if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 2), vaddq_f32(v116, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v116.f32, 1))).f32[0] > 0.0)
            {
              *float64x2_t v101 = v111;
              *float32x4_t v102 = v113;
              float32x4_t v117 = **a3;
              float32x4_t v118 = vsubq_f32(v111, v117);
              float32x4_t v119 = *v100;
              float32x4_t v120 = vsubq_f32(*v100, v117);
              int32x4_t v121 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v120, (int32x4_t)v120), (int8x16_t)v120, 0xCuLL), vnegq_f32(v118)), v120, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), (int8x16_t)v118, 0xCuLL));
              float32x4_t v122 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v121, v121), (int8x16_t)v121, 0xCuLL));
              if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v122, 2), vaddq_f32(v122, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v122.f32, 1))).f32[0] > 0.0)
              {
                v12[1] = v111;
                _OWORD v12[2] = v119;
                float32x4_t v123 = **a3;
                float32x4_t v124 = vsubq_f32(v111, v123);
                float32x4_t v125 = *v12;
                float32x4_t v126 = vsubq_f32(*v12, v123);
                int32x4_t v127 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v126, (int32x4_t)v126), (int8x16_t)v126, 0xCuLL), vnegq_f32(v124)), v126, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v124, (int32x4_t)v124), (int8x16_t)v124, 0xCuLL));
                float32x4_t v128 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v127, v127), (int8x16_t)v127, 0xCuLL));
                if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v128, 2), vaddq_f32(v128, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.f32, 1))).f32[0] > 0.0)
                {
                  *float32x2_t v12 = v111;
                  v12[1] = v125;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 383) {
      break;
    }
    if (!a4)
    {
      if (v12 == a2) {
        return result;
      }
      int64_t v146 = (v14 - 2) >> 1;
      int64_t v147 = v146;
      do
      {
        int64_t v148 = v147;
        if (v146 >= v147)
        {
          uint64_t v149 = (2 * v147) | 1;
          float64x2_t v150 = &v12[v149];
          float32x4_t v151 = **a3;
          if (2 * v148 + 2 < (uint64_t)v14)
          {
            float32x4_t v152 = vsubq_f32(*v150, v151);
            float32x4_t v153 = vsubq_f32(v150[1], v151);
            int32x4_t v154 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v153, (int32x4_t)v153), (int8x16_t)v153, 0xCuLL), vnegq_f32(v152)), v153, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v152, (int32x4_t)v152), (int8x16_t)v152, 0xCuLL));
            float32x4_t v156 = *a3[1];
            float32x4_t v155 = vmulq_f32(v156, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v154, v154), (int8x16_t)v154, 0xCuLL));
            if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v155, 2), vaddq_f32(v155, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v155.f32, 1))).f32[0] > 0.0)
            {
              ++v150;
              uint64_t v149 = 2 * v148 + 2;
            }
          }
          else
          {
            float32x4_t v156 = *a3[1];
          }
          float32x4_t v157 = &v12[v148];
          float32x4_t v158 = *v150;
          float32x4_t v159 = vsubq_f32(*v150, v151);
          float32x4_t v160 = *v157;
          float32x4_t v161 = vsubq_f32(*v157, v151);
          int32x4_t v162 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v161, (int32x4_t)v161), (int8x16_t)v161, 0xCuLL), vnegq_f32(v159)), v161, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v159, (int32x4_t)v159), (int8x16_t)v159, 0xCuLL));
          float32x4_t v163 = vmulq_f32(v156, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v162, v162), (int8x16_t)v162, 0xCuLL));
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v163, 2), vaddq_f32(v163, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v163.f32, 1))).f32[0] <= 0.0)
          {
            do
            {
              *float32x4_t v157 = v158;
              float32x4_t v157 = v150;
              if (v146 < v149) {
                break;
              }
              uint64_t v164 = 2 * v149;
              uint64_t v149 = (2 * v149) | 1;
              float64x2_t v150 = &v12[v149];
              uint64_t v165 = v164 + 2;
              float32x4_t v166 = **a3;
              float32x4_t v167 = *a3[1];
              if (v165 < (uint64_t)v14)
              {
                float32x4_t v168 = vsubq_f32(*v150, v166);
                float32x4_t v169 = vsubq_f32(v150[1], v166);
                int32x4_t v170 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v169, (int32x4_t)v169), (int8x16_t)v169, 0xCuLL), vnegq_f32(v168)), v169, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v168, (int32x4_t)v168), (int8x16_t)v168, 0xCuLL));
                float32x4_t v171 = vmulq_f32(v167, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v170, v170), (int8x16_t)v170, 0xCuLL));
                if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v171, 2), vaddq_f32(v171, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v171.f32, 1))).f32[0] > 0.0)
                {
                  ++v150;
                  uint64_t v149 = v165;
                }
              }
              float32x4_t v158 = *v150;
              float32x4_t v172 = vsubq_f32(*v150, v166);
              float32x4_t v173 = vsubq_f32(v160, v166);
              int32x4_t v174 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v173, (int32x4_t)v173), (int8x16_t)v173, 0xCuLL), vnegq_f32(v172)), v173, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v172, (int32x4_t)v172), (int8x16_t)v172, 0xCuLL));
              float32x4_t v175 = vmulq_f32(v167, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v174, v174), (int8x16_t)v174, 0xCuLL));
            }
            while (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v175, 2), vaddq_f32(v175, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v175.f32, 1))).f32[0] <= 0.0);
            *float32x4_t v157 = v160;
          }
        }
        int64_t v147 = v148 - 1;
      }
      while (v148);
      uint64_t v176 = (unint64_t)v13 >> 4;
      while (2)
      {
        uint64_t v177 = 0;
        float32x4_t v178 = *v12;
        float32x4_t v179 = v12;
        do
        {
          double v180 = v179;
          v179 += v177 + 1;
          uint64_t v181 = 2 * v177;
          uint64_t v177 = (2 * v177) | 1;
          uint64_t v182 = v181 + 2;
          if (v182 < v176)
          {
            float32x4_t v183 = **a3;
            float32x4_t v184 = vsubq_f32(*v179, v183);
            float32x4_t v185 = vsubq_f32(v179[1], v183);
            int32x4_t v186 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v185, (int32x4_t)v185), (int8x16_t)v185, 0xCuLL), vnegq_f32(v184)), v185, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v184, (int32x4_t)v184), (int8x16_t)v184, 0xCuLL));
            float32x4_t v187 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v186, v186), (int8x16_t)v186, 0xCuLL));
            if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v187, 2), vaddq_f32(v187, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v187.f32, 1))).f32[0] > 0.0)
            {
              ++v179;
              uint64_t v177 = v182;
            }
          }
          *double v180 = *v179;
        }
        while (v177 <= (uint64_t)((unint64_t)(v176 - 2) >> 1));
        if (v179 == --a2)
        {
LABEL_108:
          *float32x4_t v179 = v178;
        }
        else
        {
          *float32x4_t v179 = *a2;
          *a2 = v178;
          uint64_t v188 = (char *)v179 - (char *)v12 + 16;
          if (v188 >= 17)
          {
            unint64_t v189 = (((unint64_t)v188 >> 4) - 2) >> 1;
            float32x4_t v190 = **a3;
            float32x4_t v191 = &v12[v189];
            float32x4_t v192 = *v191;
            float32x4_t v193 = vsubq_f32(*v191, v190);
            float32x4_t v178 = *v179;
            float32x4_t v194 = vsubq_f32(*v179, v190);
            int32x4_t v195 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v194, (int32x4_t)v194), (int8x16_t)v194, 0xCuLL), vnegq_f32(v193)), v194, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v193, (int32x4_t)v193), (int8x16_t)v193, 0xCuLL));
            float32x4_t v196 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v195, v195), (int8x16_t)v195, 0xCuLL));
            if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v196, 2), vaddq_f32(v196, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v196.f32, 1))).f32[0] > 0.0)
            {
              do
              {
                *float32x4_t v179 = v192;
                float32x4_t v179 = v191;
                if (!v189) {
                  break;
                }
                unint64_t v189 = (v189 - 1) >> 1;
                float32x4_t v197 = **a3;
                float32x4_t v191 = &v12[v189];
                float32x4_t v192 = *v191;
                float32x4_t v198 = vsubq_f32(*v191, v197);
                float32x4_t v199 = vsubq_f32(v178, v197);
                int32x4_t v200 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v199, (int32x4_t)v199), (int8x16_t)v199, 0xCuLL), vnegq_f32(v198)), v199, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v198, (int32x4_t)v198), (int8x16_t)v198, 0xCuLL));
                float32x4_t v201 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v200, v200), (int8x16_t)v200, 0xCuLL));
              }
              while (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v201, 2), vaddq_f32(v201, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v201.f32, 1))).f32[0] > 0.0);
              goto LABEL_108;
            }
          }
        }
        if (v176-- <= 2) {
          return result;
        }
        continue;
      }
    }
    unint64_t v15 = v14 >> 1;
    unint64_t v16 = &v12[v14 >> 1];
    if ((unint64_t)v13 >= 0x801)
    {
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEjT1_SM_SM_T0_(v11, &v11[v14 >> 1], a2 - 1, a3);
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEjT1_SM_SM_T0_(v11 + 1, v16 - 1, a2 - 2, a3);
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEjT1_SM_SM_T0_(v11 + 2, &v11[v15 + 1], a2 - 3, a3);
      uint64_t result = _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEjT1_SM_SM_T0_(v16 - 1, v16, &v11[v15 + 1], a3);
      float32x4_t v17 = *v11;
      *uint64_t v11 = *v16;
      *unint64_t v16 = v17;
    }
    else
    {
      uint64_t result = _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEjT1_SM_SM_T0_(&v11[v14 >> 1], v11, a2 - 1, a3);
    }
    --a4;
    float32x4_t v18 = *v11;
    float32x4_t v19 = **a3;
    float32x4_t v20 = *a3[1];
    if ((a5 & 1) != 0
      || (float32x4_t v21 = vsubq_f32(v11[-1], v19),
          float32x4_t v22 = vsubq_f32(v18, v19),
          float32x4_t v23 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL),
          int32x4_t v24 = (int32x4_t)vmlaq_f32(vmulq_f32(v23, vnegq_f32(v21)), v22, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL)), v25 = vmulq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL)), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0] > 0.0))
    {
      uint64_t v26 = 0;
      float32x4_t v27 = vsubq_f32(v18, v19);
      float32x4_t v28 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL);
      do
      {
        float32x4_t v29 = v11[v26 + 1];
        float32x4_t v30 = vsubq_f32(v29, v19);
        int32x4_t v31 = (int32x4_t)vmlaq_f32(vmulq_f32(v28, vnegq_f32(v30)), v27, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL));
        float32x4_t v32 = vmulq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v31, v31), (int8x16_t)v31, 0xCuLL));
        ++v26;
      }
      while (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0] > 0.0);
      unsigned int v33 = &v11[v26];
      float32x2_t v34 = a2;
      if (v26 == 1)
      {
        float32x2_t v34 = a2;
        do
        {
          if (v33 >= v34) {
            break;
          }
          float32x4_t v39 = v34[-1];
          --v34;
          float32x4_t v40 = vsubq_f32(v39, v19);
          int32x4_t v41 = (int32x4_t)vmlaq_f32(vmulq_f32(v28, vnegq_f32(v40)), v27, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), (int8x16_t)v40, 0xCuLL));
          float32x4_t v42 = vmulq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v41, v41), (int8x16_t)v41, 0xCuLL));
        }
        while (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0] <= 0.0);
      }
      else
      {
        do
        {
          float32x4_t v35 = v34[-1];
          --v34;
          float32x4_t v36 = vsubq_f32(v35, v19);
          int32x4_t v37 = (int32x4_t)vmlaq_f32(vmulq_f32(v28, vnegq_f32(v36)), v27, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36), (int8x16_t)v36, 0xCuLL));
          float32x4_t v38 = vmulq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v37, v37), (int8x16_t)v37, 0xCuLL));
        }
        while (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0] <= 0.0);
      }
      if (v33 >= v34)
      {
        double v58 = v33 - 1;
      }
      else
      {
        float32x4_t v43 = *v34;
        unint64_t v44 = &v11[v26];
        uint64_t v45 = v34;
        do
        {
          *unint64_t v44 = v43;
          *uint64_t v45 = v29;
          float32x4_t v46 = **a3;
          float32x4_t v47 = vsubq_f32(v18, v46);
          float32x4_t v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL);
          float32x4_t v49 = *a3[1];
          do
          {
            float32x4_t v50 = v44[1];
            ++v44;
            float32x4_t v29 = v50;
            float32x4_t v51 = vsubq_f32(v50, v46);
            int32x4_t v52 = (int32x4_t)vmlaq_f32(vmulq_f32(v48, vnegq_f32(v51)), v47, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL));
            float32x4_t v53 = vmulq_f32(v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v52, v52), (int8x16_t)v52, 0xCuLL));
          }
          while (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))).f32[0] > 0.0);
          do
          {
            float32x4_t v54 = v45[-1];
            --v45;
            float32x4_t v43 = v54;
            float32x4_t v55 = vsubq_f32(v54, v46);
            int32x4_t v56 = (int32x4_t)vmlaq_f32(vmulq_f32(v48, vnegq_f32(v55)), v47, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), (int8x16_t)v55, 0xCuLL));
            float32x4_t v57 = vmulq_f32(v49, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v56, v56), (int8x16_t)v56, 0xCuLL));
          }
          while (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v57, 2), vaddq_f32(v57, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v57.f32, 1))).f32[0] <= 0.0);
        }
        while (v44 < v45);
        double v58 = v44 - 1;
      }
      if (v58 != v11) {
        *uint64_t v11 = *v58;
      }
      *double v58 = v18;
      if (v33 < v34) {
        goto LABEL_33;
      }
      BOOL v59 = _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEbT1_SM_T0_(v11, v58, a3);
      float32x2_t v12 = v58 + 1;
      uint64_t result = (float32x4_t *)_ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEbT1_SM_T0_(v58 + 1, a2, a3);
      if (result)
      {
        a2 = v58;
        if (v59) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v59)
      {
LABEL_33:
        uint64_t result = (float32x4_t *)_ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_Lb0EEEvT1_SM_T0_NS_15iterator_traitsISM_E15difference_typeEb(v11, v58, a3, a4, a5 & 1);
        a5 = 0;
        float32x2_t v12 = v58 + 1;
      }
    }
    else
    {
      float32x4_t v60 = vsubq_f32(a2[-1], v19);
      float32x4_t v61 = vnegq_f32(v22);
      int32x4_t v62 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60), (int8x16_t)v60, 0xCuLL), v61), v60, v23);
      float32x4_t v63 = vmulq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v62, v62), (int8x16_t)v62, 0xCuLL));
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).f32[0] <= 0.0)
      {
        float64x2_t v68 = v11 + 1;
        do
        {
          float32x2_t v12 = v68;
          if (v68 >= a2) {
            break;
          }
          ++v68;
          float32x4_t v69 = vsubq_f32(*v12, v19);
          int32x4_t v70 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v69, (int32x4_t)v69), (int8x16_t)v69, 0xCuLL), v61), v69, v23);
          float32x4_t v71 = vmulq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v70, v70), (int8x16_t)v70, 0xCuLL));
        }
        while (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v71, 2), vaddq_f32(v71, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.f32, 1))).f32[0] <= 0.0);
      }
      else
      {
        float32x2_t v12 = v11;
        do
        {
          float32x4_t v64 = v12[1];
          ++v12;
          float32x4_t v65 = vsubq_f32(v64, v19);
          int32x4_t v66 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v65, (int32x4_t)v65), (int8x16_t)v65, 0xCuLL), v61), v65, v23);
          float32x4_t v67 = vmulq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v66, v66), (int8x16_t)v66, 0xCuLL));
        }
        while (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v67, 2), vaddq_f32(v67, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v67.f32, 1))).f32[0] <= 0.0);
      }
      float64x2_t v72 = a2;
      if (v12 < a2)
      {
        float64x2_t v72 = a2;
        do
        {
          float32x4_t v73 = v72[-1];
          --v72;
          float32x4_t v74 = vsubq_f32(v73, v19);
          int32x4_t v75 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v74, (int32x4_t)v74), (int8x16_t)v74, 0xCuLL), v61), v74, v23);
          float32x4_t v76 = vmulq_f32(v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v75, v75), (int8x16_t)v75, 0xCuLL));
        }
        while (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32(v76, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1))).f32[0] > 0.0);
      }
      if (v12 < v72)
      {
        float32x4_t v77 = *v12;
        float32x4_t v78 = *v72;
        do
        {
          *float32x2_t v12 = v78;
          *float64x2_t v72 = v77;
          float32x4_t v79 = **a3;
          float32x4_t v80 = vsubq_f32(v18, v79);
          float32x4_t v81 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80), (int8x16_t)v80, 0xCuLL);
          float32x4_t v82 = vnegq_f32(v80);
          float32x4_t v83 = *a3[1];
          do
          {
            float32x4_t v84 = v12[1];
            ++v12;
            float32x4_t v77 = v84;
            float32x4_t v85 = vsubq_f32(v84, v79);
            int32x4_t v86 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL), v82), v85, v81);
            float32x4_t v87 = vmulq_f32(v83, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v86, v86), (int8x16_t)v86, 0xCuLL));
          }
          while (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v87, 2), vaddq_f32(v87, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v87.f32, 1))).f32[0] <= 0.0);
          do
          {
            float32x4_t v88 = v72[-1];
            --v72;
            float32x4_t v78 = v88;
            float32x4_t v89 = vsubq_f32(v88, v79);
            int32x4_t v90 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v89, (int32x4_t)v89), (int8x16_t)v89, 0xCuLL), v82), v89, v81);
            float32x4_t v91 = vmulq_f32(v83, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v90, v90), (int8x16_t)v90, 0xCuLL));
          }
          while (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v91, 2), vaddq_f32(v91, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v91.f32, 1))).f32[0] > 0.0);
        }
        while (v12 < v72);
      }
      BOOL v92 = v12 - 1;
      BOOL v5 = &v12[-1] >= v11;
      BOOL v6 = &v12[-1] == v11;
      if (&v12[-1] != v11) {
        *uint64_t v11 = *v92;
      }
      a5 = 0;
      float32x4_t *v92 = v18;
    }
  }
  if (a5)
  {
    if (v12 != a2)
    {
      uint64_t v129 = v12 + 1;
      if (&v12[1] != a2)
      {
        uint64_t v130 = 0;
        float64x2_t v131 = *a3;
        uint64_t v132 = v12;
        do
        {
          float32x4_t v134 = *v132;
          float32x4_t v133 = v132[1];
          float32x4_t v135 = vsubq_f32(v133, *v131);
          float32x4_t v136 = vsubq_f32(*v132, *v131);
          int32x4_t v137 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v136, (int32x4_t)v136), (int8x16_t)v136, 0xCuLL), vnegq_f32(v135)), v136, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v135, (int32x4_t)v135), (int8x16_t)v135, 0xCuLL));
          float32x4_t v138 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v137, v137), (int8x16_t)v137, 0xCuLL));
          uint64_t v132 = v129;
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v138, 2), vaddq_f32(v138, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v138.f32, 1))).f32[0] > 0.0)
          {
            uint64_t v139 = v130;
            while (1)
            {
              *(float32x4_t *)((char *)v12 + v139 + 16) = v134;
              if (!v139) {
                break;
              }
              float32x4_t v140 = **a3;
              float32x4_t v141 = vsubq_f32(v133, v140);
              float32x4_t v134 = *(float32x4_t *)((char *)v12 + v139 - 16);
              float32x4_t v142 = vsubq_f32(v134, v140);
              int32x4_t v143 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v142, (int32x4_t)v142), (int8x16_t)v142, 0xCuLL), vnegq_f32(v141)), v142, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v141, (int32x4_t)v141), (int8x16_t)v141, 0xCuLL));
              float32x4_t v144 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v143, v143), (int8x16_t)v143, 0xCuLL));
              v139 -= 16;
              if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v144, 2), vaddq_f32(v144, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v144.f32, 1))).f32[0] <= 0.0)
              {
                float v145 = (float32x4_t *)((char *)v12 + v139 + 16);
                goto LABEL_79;
              }
            }
            float v145 = v12;
LABEL_79:
            float32x4_t *v145 = v133;
            float64x2_t v131 = *a3;
          }
          ++v129;
          v130 += 16;
        }
        while (&v132[1] != a2);
      }
    }
  }
  else if (v12 != a2)
  {
    int32x4_t v203 = v12 + 1;
    if (&v12[1] != a2)
    {
      float64x2_t v204 = *a3;
      do
      {
        float32x4_t v206 = *v11;
        float32x4_t v205 = v11[1];
        float32x4_t v207 = vsubq_f32(v205, *v204);
        float32x4_t v208 = vsubq_f32(*v11, *v204);
        int32x4_t v209 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v208, (int32x4_t)v208), (int8x16_t)v208, 0xCuLL), vnegq_f32(v207)), v208, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v207, (int32x4_t)v207), (int8x16_t)v207, 0xCuLL));
        float32x4_t v210 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v209, v209), (int8x16_t)v209, 0xCuLL));
        uint64_t v11 = v203;
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v210, 2), vaddq_f32(v210, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v210.f32, 1))).f32[0] > 0.0)
        {
          int32x4_t v211 = v203;
          do
          {
            *int32x4_t v211 = v206;
            float32x4_t v212 = **a3;
            float32x4_t v213 = vsubq_f32(v205, v212);
            float32x4_t v206 = v211[-2];
            float32x4_t v214 = vsubq_f32(v206, v212);
            int32x4_t v215 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v214, (int32x4_t)v214), (int8x16_t)v214, 0xCuLL), vnegq_f32(v213)), v214, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v213, (int32x4_t)v213), (int8x16_t)v213, 0xCuLL));
            float32x4_t v216 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v215, v215), (int8x16_t)v215, 0xCuLL));
            --v211;
          }
          while (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v216, 2), vaddq_f32(v216, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v216.f32, 1))).f32[0] > 0.0);
          *int32x4_t v211 = v205;
          float64x2_t v204 = *a3;
        }
        ++v203;
      }
      while (&v11[1] != a2);
    }
  }
  return result;
}

float32x4_t *_ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEjT1_SM_SM_T0_(float32x4_t *result, float32x4_t *a2, float32x4_t *a3, float32x4_t **a4)
{
  float32x4_t v4 = **a4;
  float32x4_t v5 = *a2;
  float32x4_t v6 = vsubq_f32(*a2, v4);
  float32x4_t v7 = *result;
  float32x4_t v8 = vsubq_f32(*result, v4);
  float32x4_t v9 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v6, (int32x4_t)v6), (int8x16_t)v6, 0xCuLL);
  int32x4_t v10 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v8, (int32x4_t)v8), (int8x16_t)v8, 0xCuLL), vnegq_f32(v6)), v8, v9);
  float32x4_t v11 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v10, v10), (int8x16_t)v10, 0xCuLL);
  float32x4_t v12 = *a4[1];
  float32x4_t v13 = vmulq_f32(v12, v11);
  float32x4_t v14 = *a3;
  float32x4_t v15 = vsubq_f32(*a3, v4);
  int32x4_t v16 = (int32x4_t)vmlaq_f32(vmulq_f32(v9, vnegq_f32(v15)), v6, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL));
  float32x4_t v17 = vmulq_f32(v12, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v16, v16), (int8x16_t)v16, 0xCuLL));
  LODWORD(v18) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).u32[0];
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0] <= 0.0)
  {
    if (v18 > 0.0)
    {
      *a2 = v14;
      *a3 = v5;
      float32x4_t v19 = **a4;
      float32x4_t v20 = vsubq_f32(*a2, v19);
      float32x4_t v21 = *result;
      float32x4_t v22 = vsubq_f32(*result, v19);
      int32x4_t v23 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v22, (int32x4_t)v22), (int8x16_t)v22, 0xCuLL), vnegq_f32(v20)), v22, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL));
      float32x4_t v24 = vmulq_f32(*a4[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL));
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0] > 0.0)
      {
        *uint64_t result = *a2;
        *a2 = v21;
      }
    }
  }
  else
  {
    if (v18 <= 0.0)
    {
      *uint64_t result = v5;
      *a2 = v7;
      float32x4_t v25 = **a4;
      float32x4_t v26 = vsubq_f32(*a3, v25);
      float32x4_t v27 = vsubq_f32(v7, v25);
      int32x4_t v28 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL), vnegq_f32(v26)), v27, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL));
      float32x4_t v29 = vmulq_f32(*a4[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL));
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0] <= 0.0)return result; {
      *a2 = *a3;
      }
    }
    else
    {
      *uint64_t result = v14;
    }
    *a3 = v7;
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEbT1_SM_T0_(float32x4_t *a1, float32x4_t *a2, float32x4_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float32x4_t v8 = a2[-1];
      float32x4_t v9 = **a3;
      float32x4_t v10 = vsubq_f32(v8, v9);
      float32x4_t v11 = *a1;
      float32x4_t v12 = vsubq_f32(*a1, v9);
      int32x4_t v13 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL), vnegq_f32(v10)), v12, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL));
      float32x4_t v14 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v13, v13), (int8x16_t)v13, 0xCuLL));
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0] > 0.0)
      {
        *a1 = v8;
        a2[-1] = v11;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEjT1_SM_SM_T0_(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEvT1_SM_SM_SM_T0_(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      float32x2_t v34 = a1 + 1;
      float32x4_t v35 = a1 + 2;
      float32x4_t v36 = a1 + 3;
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEvT1_SM_SM_SM_T0_(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      float32x4_t v37 = **a3;
      float32x4_t v38 = a2[-1];
      float32x4_t v39 = vsubq_f32(v38, v37);
      float32x4_t v40 = a1[3];
      float32x4_t v41 = vsubq_f32(v40, v37);
      int32x4_t v42 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41), (int8x16_t)v41, 0xCuLL), vnegq_f32(v39)), v41, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v39, (int32x4_t)v39), (int8x16_t)v39, 0xCuLL));
      float32x4_t v43 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v42, v42), (int8x16_t)v42, 0xCuLL));
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0] > 0.0)
      {
        *float32x4_t v36 = v38;
        a2[-1] = v40;
        float32x4_t v44 = **a3;
        float32x4_t v45 = *v36;
        float32x4_t v46 = vsubq_f32(*v36, v44);
        float32x4_t v47 = *v35;
        float32x4_t v48 = vsubq_f32(*v35, v44);
        int32x4_t v49 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL), vnegq_f32(v46)), v48, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), (int8x16_t)v46, 0xCuLL));
        float32x4_t v50 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v49, v49), (int8x16_t)v49, 0xCuLL));
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).f32[0] > 0.0)
        {
          *float32x4_t v35 = v45;
          *float32x4_t v36 = v47;
          float32x4_t v51 = **a3;
          float32x4_t v52 = vsubq_f32(v45, v51);
          float32x4_t v53 = *v34;
          float32x4_t v54 = vsubq_f32(*v34, v51);
          int32x4_t v55 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), (int8x16_t)v54, 0xCuLL), vnegq_f32(v52)), v54, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), (int8x16_t)v52, 0xCuLL));
          float32x4_t v56 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v55, v55), (int8x16_t)v55, 0xCuLL));
          if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0] > 0.0)
          {
            a1[1] = v45;
            a1[2] = v53;
            float32x4_t v57 = **a3;
            float32x4_t v58 = vsubq_f32(v45, v57);
            float32x4_t v59 = *a1;
            float32x4_t v60 = vsubq_f32(*a1, v57);
            int32x4_t v61 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60), (int8x16_t)v60, 0xCuLL), vnegq_f32(v58)), v60, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), (int8x16_t)v58, 0xCuLL));
            float32x4_t v62 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v61, v61), (int8x16_t)v61, 0xCuLL));
            if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2), vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1))).f32[0] > 0.0)
            {
              *a1 = v45;
              a1[1] = v59;
            }
          }
        }
      }
      return 1;
    default:
      float32x4_t v15 = a1 + 2;
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEjT1_SM_SM_T0_(a1, a1 + 1, a1 + 2, a3);
      int32x4_t v16 = a1 + 3;
      if (&a1[3] == a2) {
        return 1;
      }
      int v17 = 0;
      uint64_t v18 = 48;
      break;
  }
  while (1)
  {
    float32x4_t v19 = **a3;
    float32x4_t v20 = *v16;
    float32x4_t v21 = vsubq_f32(*v16, v19);
    float32x4_t v22 = *v15;
    float32x4_t v23 = vsubq_f32(*v15, v19);
    int32x4_t v24 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), (int8x16_t)v23, 0xCuLL), vnegq_f32(v21)), v23, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL));
    float32x4_t v25 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v24, v24), (int8x16_t)v24, 0xCuLL));
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0] > 0.0)
    {
      uint64_t v26 = v18;
      while (1)
      {
        *(float32x4_t *)((char *)a1 + v26) = v22;
        uint64_t v27 = v26 - 16;
        if (v26 == 16) {
          break;
        }
        float32x4_t v28 = **a3;
        float32x4_t v29 = vsubq_f32(v20, v28);
        float32x4_t v22 = *(float32x4_t *)((char *)a1 + v26 - 32);
        float32x4_t v30 = vsubq_f32(v22, v28);
        int32x4_t v31 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v30, (int32x4_t)v30), (int8x16_t)v30, 0xCuLL), vnegq_f32(v29)), v30, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v29, (int32x4_t)v29), (int8x16_t)v29, 0xCuLL));
        float32x4_t v32 = vmulq_f32(*a3[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v31, v31), (int8x16_t)v31, 0xCuLL));
        v26 -= 16;
        if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0] <= 0.0)
        {
          unsigned int v33 = (float32x4_t *)((char *)a1 + v27);
          goto LABEL_13;
        }
      }
      unsigned int v33 = a1;
LABEL_13:
      *unsigned int v33 = v20;
      if (++v17 == 8) {
        return &v16[1] == a2;
      }
    }
    float32x4_t v15 = v16;
    v18 += 16;
    if (++v16 == a2) {
      return 1;
    }
  }
}

float32x4_t *_ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEvT1_SM_SM_SM_T0_(float32x4_t *a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t **a5)
{
  BOOL result = _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIfEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_fSI_E_PSG_EEjT1_SM_SM_T0_(a1, a2, a3, a5);
  float32x4_t v11 = **a5;
  float32x4_t v12 = vsubq_f32(*a4, v11);
  float32x4_t v13 = *a3;
  float32x4_t v14 = vsubq_f32(*a3, v11);
  int32x4_t v15 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), (int8x16_t)v14, 0xCuLL), vnegq_f32(v12)), v14, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v12, (int32x4_t)v12), (int8x16_t)v12, 0xCuLL));
  float32x4_t v16 = vmulq_f32(*a5[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v15, v15), (int8x16_t)v15, 0xCuLL));
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0] > 0.0)
  {
    *a3 = *a4;
    *a4 = v13;
    float32x4_t v17 = **a5;
    float32x4_t v18 = vsubq_f32(*a3, v17);
    float32x4_t v19 = *a2;
    float32x4_t v20 = vsubq_f32(*a2, v17);
    int32x4_t v21 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(v18)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL));
    float32x4_t v22 = vmulq_f32(*a5[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v21, v21), (int8x16_t)v21, 0xCuLL));
    if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0] > 0.0)
    {
      *a2 = *a3;
      *a3 = v19;
      float32x4_t v23 = **a5;
      float32x4_t v24 = vsubq_f32(*a2, v23);
      float32x4_t v25 = *a1;
      float32x4_t v26 = vsubq_f32(*a1, v23);
      int32x4_t v27 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), (int8x16_t)v26, 0xCuLL), vnegq_f32(v24)), v26, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), (int8x16_t)v24, 0xCuLL));
      float32x4_t v28 = vmulq_f32(*a5[1], (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v27, v27), (int8x16_t)v27, 0xCuLL));
      if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0] > 0.0)
      {
        *a1 = *a2;
        *a2 = v25;
      }
    }
  }
  return result;
}

void geom::anonymous namespace'::clip_2d_triangle_with_polygon<double>(unsigned int a1, uint64_t a2, __n128 *a3, float64x2_t a4, float64x2_t a5, float64x2_t a6)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  unsigned int v8 = 1;
  a3[9].n128_u8[0] = 1;
  *a3 = (__n128)a4;
  float64x2_t v9 = vsubq_f64(a5, a4);
  if (sqrt(vaddvq_f64(vmulq_f64(v9, v9))) > 2.22044605e-16)
  {
    unsigned int v8 = 2;
    a3[9].n128_u8[0] = 2;
    a3[1] = (__n128)a5;
  }
  float32x4_t v10 = (float64x2_t *)a3;
  uint64_t v11 = v8;
  while (1)
  {
    float64x2_t v12 = vsubq_f64(a6, *v10);
    if (sqrt(vaddvq_f64(vmulq_f64(v12, v12))) <= 2.22044605e-16) {
      break;
    }
    ++v10;
    if (!--v11)
    {
      a3[9].n128_u8[0] = v8 + 1;
      a3[v8] = (__n128)a6;
      break;
    }
  }
  if (a1)
  {
    uint64_t v13 = 0;
    uint64_t v14 = a1;
    uint64_t v63 = a1;
    do
    {
      unsigned __int8 v67 = a3[9].n128_u8[0];
      if (v67)
      {
        for (unint64_t i = 0; i < v67; ++i)
        {
          v66[i] = (float64x2_t)a3[i];
          unint64_t v16 = v67;
        }
        a3[9].n128_u8[0] = 0;
        uint64_t v17 = v13 + 1;
        if (v13 + 1 == v14) {
          uint64_t v18 = 0;
        }
        else {
          uint64_t v18 = (v13 + 1);
        }
        if (v16)
        {
          uint64_t v19 = 0;
          while (1)
          {
            float64x2_t v65 = v66[v19];
            double v20 = _simd_orient_pd2(*(simd_double2 *)(a2 + 16 * v13), *(simd_double2 *)(a2 + 16 * v18), (simd_double2)v65);
            float64x2_t v64 = v66[(v16 - 1 + v19) % v16];
            double v21 = _simd_orient_pd2(*(simd_double2 *)(a2 + 16 * v13), *(simd_double2 *)(a2 + 16 * v18), (simd_double2)v64);
            if (v20 >= 0.0) {
              break;
            }
            float64x2_t v22 = v65;
            if (v21 >= 0.0)
            {
              float64x2_t v23 = *(float64x2_t *)(a2 + 16 * v13);
              float64x2_t v24 = vsubq_f64(*(float64x2_t *)(a2 + 16 * v18), v23);
              float64x2_t v25 = vsubq_f64(v64, v65);
              double v26 = vmlad_n_f64(-v25.f64[1] * v24.f64[0], v24.f64[1], v25.f64[0]);
              if (fabs(v26) > 2.22044605e-16)
              {
                float64x2_t v27 = vsubq_f64(v23, v65);
                float64x2_t v22 = vmlaq_n_f64(v65, v25, vmlad_n_f64(-(v27.f64[1] * v24.f64[0]), v24.f64[1], v27.f64[0]) / v26);
                uint64_t v28 = a3[9].n128_u8[0];
                float32x4_t v29 = (float64x2_t *)a3;
                uint64_t v30 = v28;
                if (a3[9].n128_u8[0])
                {
                  while (1)
                  {
                    float64x2_t v31 = vsubq_f64(v22, *v29);
                    if (sqrt(vaddvq_f64(vmulq_f64(v31, v31))) <= 2.22044605e-16) {
                      goto LABEL_69;
                    }
                    ++v29;
                    if (!--v30)
                    {
                      LOBYTE(v32) = a3[9].n128_u8[0];
                      goto LABEL_68;
                    }
                  }
                }
                LOBYTE(v32) = a3[9].n128_u8[0];
                goto LABEL_68;
              }
              unsigned int v32 = a3[9].n128_u8[0];
              float32x4_t v46 = (float64x2_t *)a3;
              uint64_t v47 = a3[9].n128_u8[0];
              if (a3[9].n128_u8[0])
              {
                while (1)
                {
                  float64x2_t v48 = vsubq_f64(v64, *v46);
                  if (sqrt(vaddvq_f64(vmulq_f64(v48, v48))) <= 2.22044605e-16) {
                    break;
                  }
                  ++v46;
                  if (!--v47)
                  {
                    uint64_t v49 = a3[9].n128_u8[0];
                    goto LABEL_47;
                  }
                }
                if (a3[9].n128_u8[0])
                {
LABEL_58:
                  uint64_t v28 = v32;
                  float32x4_t v57 = (float64x2_t *)a3;
                  uint64_t v58 = v32;
                  while (1)
                  {
                    float64x2_t v59 = vsubq_f64(v65, *v57);
                    if (sqrt(vaddvq_f64(vmulq_f64(v59, v59))) <= 2.22044605e-16) {
                      goto LABEL_69;
                    }
                    ++v57;
                    if (!--v58) {
                      goto LABEL_68;
                    }
                  }
                }
              }
              else
              {
                uint64_t v49 = 0;
LABEL_47:
                a3[9].n128_u8[0] = v32 + 1;
                a3[v49] = (__n128)v64;
                unsigned int v32 = a3[9].n128_u8[0];
                if (a3[9].n128_u8[0]) {
                  goto LABEL_58;
                }
              }
LABEL_67:
              uint64_t v28 = 0;
LABEL_68:
              a3[9].n128_u8[0] = v32 + 1;
              a3[v28] = (__n128)v22;
            }
LABEL_69:
            if (++v19 == v16)
            {
              uint64_t v14 = v63;
              uint64_t v17 = v13 + 1;
              goto LABEL_72;
            }
          }
          if (v21 >= 0.0)
          {
            LOBYTE(v32) = a3[9].n128_u8[0];
            float32x4_t v43 = (float64x2_t *)a3;
            uint64_t v44 = v32;
            float64x2_t v22 = v65;
            if ((_BYTE)v32)
            {
              while (1)
              {
                float64x2_t v45 = vsubq_f64(v65, *v43);
                if (sqrt(vaddvq_f64(vmulq_f64(v45, v45))) <= 2.22044605e-16) {
                  goto LABEL_69;
                }
                ++v43;
                if (!--v44)
                {
                  uint64_t v28 = a3[9].n128_u8[0];
                  goto LABEL_68;
                }
              }
            }
          }
          else
          {
            float64x2_t v33 = *(float64x2_t *)(a2 + 16 * v13);
            float64x2_t v34 = vsubq_f64(*(float64x2_t *)(a2 + 16 * v18), v33);
            float64x2_t v22 = v65;
            float64x2_t v35 = vsubq_f64(v64, v65);
            double v36 = vmlad_n_f64(-v35.f64[1] * v34.f64[0], v34.f64[1], v35.f64[0]);
            if (fabs(v36) <= 2.22044605e-16)
            {
              unsigned int v32 = a3[9].n128_u8[0];
              float32x4_t v50 = (float64x2_t *)a3;
              uint64_t v51 = a3[9].n128_u8[0];
              if (a3[9].n128_u8[0])
              {
                while (1)
                {
                  float64x2_t v52 = vsubq_f64(v64, *v50);
                  if (sqrt(vaddvq_f64(vmulq_f64(v52, v52))) <= 2.22044605e-16) {
                    break;
                  }
                  ++v50;
                  if (!--v51)
                  {
                    uint64_t v53 = a3[9].n128_u8[0];
                    goto LABEL_50;
                  }
                }
                if (a3[9].n128_u8[0])
                {
LABEL_63:
                  uint64_t v28 = v32;
                  float32x4_t v60 = (float64x2_t *)a3;
                  uint64_t v61 = v32;
                  while (1)
                  {
                    float64x2_t v62 = vsubq_f64(v65, *v60);
                    if (sqrt(vaddvq_f64(vmulq_f64(v62, v62))) <= 2.22044605e-16) {
                      goto LABEL_69;
                    }
                    ++v60;
                    if (!--v61) {
                      goto LABEL_68;
                    }
                  }
                }
              }
              else
              {
                uint64_t v53 = 0;
LABEL_50:
                a3[9].n128_u8[0] = v32 + 1;
                a3[v53] = (__n128)v64;
                unsigned int v32 = a3[9].n128_u8[0];
                if (a3[9].n128_u8[0]) {
                  goto LABEL_63;
                }
              }
            }
            else
            {
              float64x2_t v37 = vsubq_f64(v33, v65);
              float64x2_t v38 = vmlaq_n_f64(v65, v35, vmlad_n_f64(-(v37.f64[1] * v34.f64[0]), v34.f64[1], v37.f64[0]) / v36);
              unsigned int v32 = a3[9].n128_u8[0];
              float32x4_t v39 = (float64x2_t *)a3;
              uint64_t v40 = a3[9].n128_u8[0];
              if (a3[9].n128_u8[0])
              {
                while (1)
                {
                  float64x2_t v41 = vsubq_f64(v38, *v39);
                  if (sqrt(vaddvq_f64(vmulq_f64(v41, v41))) <= 2.22044605e-16) {
                    break;
                  }
                  ++v39;
                  if (!--v40)
                  {
                    uint64_t v42 = a3[9].n128_u8[0];
                    goto LABEL_44;
                  }
                }
                if (a3[9].n128_u8[0])
                {
LABEL_53:
                  uint64_t v28 = v32;
                  float32x4_t v54 = (float64x2_t *)a3;
                  uint64_t v55 = v32;
                  while (1)
                  {
                    float64x2_t v56 = vsubq_f64(v65, *v54);
                    if (sqrt(vaddvq_f64(vmulq_f64(v56, v56))) <= 2.22044605e-16) {
                      goto LABEL_69;
                    }
                    ++v54;
                    if (!--v55) {
                      goto LABEL_68;
                    }
                  }
                }
              }
              else
              {
                uint64_t v42 = 0;
LABEL_44:
                a3[9].n128_u8[0] = v32 + 1;
                a3[v42] = (__n128)v38;
                unsigned int v32 = a3[9].n128_u8[0];
                if (a3[9].n128_u8[0]) {
                  goto LABEL_53;
                }
              }
            }
          }
          goto LABEL_67;
        }
      }
      else
      {
        a3[9].n128_u8[0] = 0;
        uint64_t v17 = v13 + 1;
      }
LABEL_72:
      uint64_t v13 = v17;
    }
    while (v17 != v14);
  }
}

float64x2_t *_ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_Lb0EEEvT1_SM_T0_NS_15iterator_traitsISM_E15difference_typeEb(float64x2_t *result, unint64_t a2, float64x2_t **a3, uint64_t a4, char a5)
{
  unint64_t v11 = (unint64_t)result;
LABEL_2:
  float64x2_t v12 = (float64x2_t *)v11;
  while (1)
  {
    unint64_t v11 = (unint64_t)v12;
    uint64_t v13 = a2 - (void)v12;
    unint64_t v14 = (uint64_t)(a2 - (void)v12) >> 5;
    if (v6 || !v5)
    {
      switch(v14)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          float64x2_t v160 = *(float64x2_t *)(a2 - 32);
          float64x2_t v159 = *(float64x2_t *)(a2 - 16);
          float64x2_t v162 = **a3;
          float64x2_t v161 = (*a3)[1];
          float64x2_t v163 = vsubq_f64(v160, v162);
          float64x2_t v164 = vsubq_f64(v159, v161);
          float64x2_t v165 = *v12;
          float64x2_t v166 = v12[1];
          float64x2_t v167 = vsubq_f64(*v12, v162);
          float64x2_t v168 = vsubq_f64(v166, v161);
          *(void *)&v169.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v164), v167, 1), v168, v163, 1);
          v168.f64[1] = v167.f64[0];
          v164.f64[1] = v163.f64[0];
          float64x2_t v170 = vmlaq_f64(vmulq_f64(v168, vnegq_f64(v163)), v167, v164);
          v169.f64[1] = v170.f64[0];
          if (vmulq_laneq_f64(a3[1][1], v170, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v169)) > 0.0)
          {
            *float64x2_t v12 = v160;
            v12[1] = v159;
            *(float64x2_t *)(a2 - 32) = v165;
            *(float64x2_t *)(a2 - 16) = v166;
          }
          break;
        case 3uLL:
          BOOL result = _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEjT1_SM_SM_T0_(v12, v12 + 2, (float64x2_t *)(a2 - 32), a3);
          break;
        case 4uLL:
          BOOL result = _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEvT1_SM_SM_SM_T0_(v12, v12 + 2, v12 + 4, (float64x2_t *)(a2 - 32), a3);
          break;
        case 5uLL:
          float32x4_t v171 = v12 + 2;
          float32x4_t v172 = v12 + 4;
          float32x4_t v173 = v12 + 6;
          BOOL result = _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEvT1_SM_SM_SM_T0_(v12, v12 + 2, v12 + 4, v12 + 6, a3);
          float64x2_t v175 = **a3;
          float64x2_t v174 = (*a3)[1];
          float64x2_t v177 = *(float64x2_t *)(a2 - 32);
          float64x2_t v176 = *(float64x2_t *)(a2 - 16);
          float64x2_t v178 = vsubq_f64(v177, v175);
          float64x2_t v179 = vsubq_f64(v176, v174);
          float64x2_t v180 = v12[6];
          float64x2_t v181 = v12[7];
          float64x2_t v182 = vsubq_f64(v180, v175);
          float64x2_t v183 = vsubq_f64(v181, v174);
          *(void *)&v184.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v179), v182, 1), v183, v178, 1);
          v183.f64[1] = v182.f64[0];
          v179.f64[1] = v178.f64[0];
          float64x2_t v185 = vmlaq_f64(vmulq_f64(v183, vnegq_f64(v178)), v182, v179);
          v184.f64[1] = v185.f64[0];
          if (vmulq_laneq_f64(a3[1][1], v185, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v184)) > 0.0)
          {
            *float32x4_t v173 = v177;
            v12[7] = v176;
            *(float64x2_t *)(a2 - 32) = v180;
            *(float64x2_t *)(a2 - 16) = v181;
            float64x2_t v187 = **a3;
            float64x2_t v186 = (*a3)[1];
            float64x2_t v189 = *v173;
            float64x2_t v188 = v12[7];
            float64x2_t v190 = vsubq_f64(*v173, v187);
            float64x2_t v191 = vsubq_f64(v188, v186);
            float64x2_t v193 = *v172;
            float64x2_t v192 = v12[5];
            float64x2_t v194 = vsubq_f64(*v172, v187);
            float64x2_t v195 = vsubq_f64(v192, v186);
            *(void *)&v196.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v191), v194, 1), v195, v190, 1);
            v195.f64[1] = v194.f64[0];
            v191.f64[1] = v190.f64[0];
            float64x2_t v197 = vmlaq_f64(vmulq_f64(v195, vnegq_f64(v190)), v194, v191);
            v196.f64[1] = v197.f64[0];
            if (vmulq_laneq_f64(a3[1][1], v197, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v196)) > 0.0)
            {
              *float32x4_t v172 = v189;
              v12[5] = v188;
              *float32x4_t v173 = v193;
              v12[7] = v192;
              float64x2_t v199 = **a3;
              float64x2_t v198 = (*a3)[1];
              float64x2_t v200 = vsubq_f64(v189, v199);
              float64x2_t v201 = vsubq_f64(v188, v198);
              float64x2_t v203 = *v171;
              float64x2_t v202 = v12[3];
              float64x2_t v204 = vsubq_f64(*v171, v199);
              float64x2_t v205 = vsubq_f64(v202, v198);
              *(void *)&v206.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v201), v204, 1), v205, v200, 1);
              v205.f64[1] = v204.f64[0];
              v201.f64[1] = v200.f64[0];
              float64x2_t v207 = vmlaq_f64(vmulq_f64(v205, vnegq_f64(v200)), v204, v201);
              v206.f64[1] = v207.f64[0];
              if (vmulq_laneq_f64(a3[1][1], v207, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v206)) > 0.0)
              {
                _OWORD v12[2] = v189;
                v12[3] = v188;
                v12[4] = v203;
                v12[5] = v202;
                float64x2_t v209 = **a3;
                float64x2_t v208 = (*a3)[1];
                float64x2_t v210 = vsubq_f64(v189, v209);
                float64x2_t v211 = vsubq_f64(v188, v208);
                float64x2_t v213 = *v12;
                float64x2_t v212 = v12[1];
                float64x2_t v214 = vsubq_f64(*v12, v209);
                float64x2_t v215 = vsubq_f64(v212, v208);
                *(void *)&v216.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v211), v214, 1), v215, v210, 1);
                v215.f64[1] = v214.f64[0];
                v211.f64[1] = v210.f64[0];
                float64x2_t v217 = vmlaq_f64(vmulq_f64(v215, vnegq_f64(v210)), v214, v211);
                v216.f64[1] = v217.f64[0];
                if (vmulq_laneq_f64(a3[1][1], v217, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v216)) > 0.0)
                {
                  *float64x2_t v12 = v189;
                  v12[1] = v188;
                  _OWORD v12[2] = v213;
                  v12[3] = v212;
                }
              }
            }
          }
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v13 <= 767) {
      break;
    }
    if (!a4)
    {
      if (v12 == (float64x2_t *)a2) {
        return result;
      }
      int64_t v244 = (v14 - 2) >> 1;
      int64_t v245 = v244;
      do
      {
        int64_t v246 = v245;
        if (v244 >= v245)
        {
          uint64_t v247 = (2 * v245) | 1;
          double v248 = &v12[2 * v247];
          float64x2_t v250 = **a3;
          float64x2_t v249 = (*a3)[1];
          if (2 * v246 + 2 < (uint64_t)v14)
          {
            float64x2_t v251 = vsubq_f64(*v248, v250);
            float64x2_t v252 = vsubq_f64(v248[1], v249);
            float64x2_t v253 = vsubq_f64(v248[2], v250);
            float64x2_t v254 = vsubq_f64(v248[3], v249);
            *(void *)&v255.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v252), v253, 1), v254, v251, 1);
            v254.f64[1] = v253.f64[0];
            v252.f64[1] = v251.f64[0];
            float64x2_t v256 = vmlaq_f64(vmulq_f64(v254, vnegq_f64(v251)), v253, v252);
            v255.f64[1] = v256.f64[0];
            float64x2_t v257 = a3[1];
            float64x2_t v259 = *v257;
            float64x2_t v260 = v257[1];
            if (vmulq_laneq_f64(v260, v256, 1).f64[0] + vaddvq_f64(vmulq_f64(*v257, v255)) > 0.0)
            {
              v248 += 2;
              uint64_t v247 = 2 * v246 + 2;
            }
          }
          else
          {
            long long v258 = a3[1];
            float64x2_t v259 = *v258;
            float64x2_t v260 = v258[1];
          }
          float64x2_t v261 = &v12[2 * v246];
          float64x2_t v263 = *v248;
          float64x2_t v262 = v248[1];
          float64x2_t v264 = vsubq_f64(*v248, v250);
          float64x2_t v265 = vsubq_f64(v262, v249);
          float64x2_t v267 = *v261;
          float64x2_t v266 = v261[1];
          float64x2_t v268 = vsubq_f64(*v261, v250);
          float64x2_t v269 = vsubq_f64(v266, v249);
          *(void *)&v270.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v265), v268, 1), v269, v264, 1);
          v269.f64[1] = v268.f64[0];
          v265.f64[1] = v264.f64[0];
          float64x2_t v271 = vmlaq_f64(vmulq_f64(v269, vnegq_f64(v264)), v268, v265);
          v270.f64[1] = v271.f64[0];
          if (vmulq_laneq_f64(v260, v271, 1).f64[0] + vaddvq_f64(vmulq_f64(v259, v270)) <= 0.0)
          {
            do
            {
              float64x2_t *v261 = v263;
              v261[1] = v262;
              float64x2_t v261 = v248;
              if (v244 < v247) {
                break;
              }
              uint64_t v272 = 2 * v247;
              uint64_t v247 = (2 * v247) | 1;
              double v248 = &v12[2 * v247];
              uint64_t v273 = v272 + 2;
              unint64_t v274 = a3[1];
              float64x2_t v276 = **a3;
              float64x2_t v275 = (*a3)[1];
              float64x2_t v278 = *v274;
              float64x2_t v277 = v274[1];
              if (v273 < (uint64_t)v14)
              {
                float64x2_t v279 = vsubq_f64(*v248, v276);
                float64x2_t v280 = vsubq_f64(v248[1], v275);
                float64x2_t v281 = vsubq_f64(v248[2], v276);
                float64x2_t v282 = vsubq_f64(v248[3], v275);
                *(void *)&v283.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v280), v281, 1), v282, v279, 1);
                v282.f64[1] = v281.f64[0];
                v280.f64[1] = v279.f64[0];
                float64x2_t v284 = vmlaq_f64(vmulq_f64(v282, vnegq_f64(v279)), v281, v280);
                v283.f64[1] = v284.f64[0];
                if (vmulq_laneq_f64(v277, v284, 1).f64[0] + vaddvq_f64(vmulq_f64(v278, v283)) > 0.0)
                {
                  v248 += 2;
                  uint64_t v247 = v273;
                }
              }
              float64x2_t v263 = *v248;
              float64x2_t v262 = v248[1];
              float64x2_t v285 = vsubq_f64(*v248, v276);
              float64x2_t v286 = vsubq_f64(v262, v275);
              float64x2_t v287 = vsubq_f64(v267, v276);
              float64x2_t v288 = vsubq_f64(v266, v275);
              *(void *)&v289.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v286), v287, 1), v288, v285, 1);
              v288.f64[1] = v287.f64[0];
              v286.f64[1] = v285.f64[0];
              float64x2_t v290 = vmlaq_f64(vmulq_f64(v288, vnegq_f64(v285)), v287, v286);
              v289.f64[1] = v290.f64[0];
            }
            while (vmulq_laneq_f64(v277, v290, 1).f64[0] + vaddvq_f64(vmulq_f64(v278, v289)) <= 0.0);
            float64x2_t *v261 = v267;
            v261[1] = v266;
          }
        }
        int64_t v245 = v246 - 1;
      }
      while (v246);
      uint64_t v291 = (unint64_t)v13 >> 5;
      while (2)
      {
        uint64_t v292 = 0;
        float64x2_t v294 = *v12;
        float64x2_t v293 = v12[1];
        v295 = v12;
        do
        {
          v296 = v295;
          v295 += 2 * v292 + 2;
          uint64_t v297 = 2 * v292;
          uint64_t v292 = (2 * v292) | 1;
          uint64_t v298 = v297 + 2;
          if (v298 < v291)
          {
            float64x2_t v300 = **a3;
            float64x2_t v299 = (*a3)[1];
            float64x2_t v301 = vsubq_f64(*v295, v300);
            float64x2_t v302 = vsubq_f64(v295[1], v299);
            float64x2_t v303 = vsubq_f64(v295[2], v300);
            float64x2_t v304 = vsubq_f64(v295[3], v299);
            *(void *)&v305.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v302), v303, 1), v304, v301, 1);
            v304.f64[1] = v303.f64[0];
            v302.f64[1] = v301.f64[0];
            float64x2_t v306 = vmlaq_f64(vmulq_f64(v304, vnegq_f64(v301)), v303, v302);
            v305.f64[1] = v306.f64[0];
            if (vmulq_laneq_f64(a3[1][1], v306, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v305)) > 0.0)
            {
              v295 += 2;
              uint64_t v292 = v298;
            }
          }
          float64x2_t v307 = v295[1];
          float64x2_t *v296 = *v295;
          v296[1] = v307;
        }
        while (v292 <= (uint64_t)((unint64_t)(v291 - 2) >> 1));
        a2 -= 32;
        if (v295 == (float64x2_t *)a2)
        {
LABEL_108:
          float64x2_t *v295 = v294;
          v295[1] = v293;
        }
        else
        {
          float64x2_t v308 = *(float64x2_t *)(a2 + 16);
          float64x2_t *v295 = *(float64x2_t *)a2;
          v295[1] = v308;
          *(float64x2_t *)a2 = v294;
          *(float64x2_t *)(a2 + 16) = v293;
          uint64_t v309 = (char *)v295 - (char *)v12 + 32;
          if (v309 >= 33)
          {
            unint64_t v310 = (((unint64_t)v309 >> 5) - 2) >> 1;
            float64x2_t v312 = **a3;
            float64x2_t v311 = (*a3)[1];
            v313 = &v12[2 * v310];
            float64x2_t v315 = *v313;
            float64x2_t v314 = v313[1];
            float64x2_t v316 = vsubq_f64(*v313, v312);
            float64x2_t v317 = vsubq_f64(v314, v311);
            float64x2_t v294 = *v295;
            float64x2_t v293 = v295[1];
            float64x2_t v318 = vsubq_f64(*v295, v312);
            float64x2_t v319 = vsubq_f64(v293, v311);
            *(void *)&v320.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v317), v318, 1), v319, v316, 1);
            v319.f64[1] = v318.f64[0];
            v317.f64[1] = v316.f64[0];
            float64x2_t v321 = vmlaq_f64(vmulq_f64(v319, vnegq_f64(v316)), v318, v317);
            v320.f64[1] = v321.f64[0];
            if (vmulq_laneq_f64(a3[1][1], v321, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v320)) > 0.0)
            {
              do
              {
                float64x2_t *v295 = v315;
                v295[1] = v314;
                v295 = v313;
                if (!v310) {
                  break;
                }
                unint64_t v310 = (v310 - 1) >> 1;
                float64x2_t v323 = **a3;
                float64x2_t v322 = (*a3)[1];
                v313 = &v12[2 * v310];
                float64x2_t v315 = *v313;
                float64x2_t v314 = v313[1];
                float64x2_t v324 = vsubq_f64(*v313, v323);
                float64x2_t v325 = vsubq_f64(v314, v322);
                float64x2_t v326 = vsubq_f64(v294, v323);
                float64x2_t v327 = vsubq_f64(v293, v322);
                *(void *)&v328.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v325), v326, 1), v327, v324, 1);
                v327.f64[1] = v326.f64[0];
                v325.f64[1] = v324.f64[0];
                float64x2_t v329 = vmlaq_f64(vmulq_f64(v327, vnegq_f64(v324)), v326, v325);
                v328.f64[1] = v329.f64[0];
              }
              while (vmulq_laneq_f64(a3[1][1], v329, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v328)) > 0.0);
              goto LABEL_108;
            }
          }
        }
        if (v291-- <= 2) {
          return result;
        }
        continue;
      }
    }
    unint64_t v15 = v14 >> 1;
    unint64_t v16 = &v12[2 * (v14 >> 1)];
    if ((unint64_t)v13 > 0x1000)
    {
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEjT1_SM_SM_T0_((float64x2_t *)v11, (float64x2_t *)(v11 + 32 * (v14 >> 1)), (float64x2_t *)(a2 - 32), a3);
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEjT1_SM_SM_T0_((float64x2_t *)(v11 + 32), v16 - 2, (float64x2_t *)(a2 - 64), a3);
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEjT1_SM_SM_T0_((float64x2_t *)(v11 + 64), (float64x2_t *)(v11 + 32 + 32 * v15), (float64x2_t *)(a2 - 96), a3);
      BOOL result = _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEjT1_SM_SM_T0_(v16 - 2, v16, (float64x2_t *)(v11 + 32 + 32 * v15), a3);
      float64x2_t v17 = *(float64x2_t *)v11;
      float64x2_t v18 = *(float64x2_t *)(v11 + 16);
      float64x2_t v19 = v16[1];
      *(float64x2_t *)unint64_t v11 = *v16;
      *(float64x2_t *)(v11 + 16) = v19;
      *unint64_t v16 = v17;
      v16[1] = v18;
    }
    else
    {
      BOOL result = _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEjT1_SM_SM_T0_((float64x2_t *)(v11 + 32 * (v14 >> 1)), (float64x2_t *)v11, (float64x2_t *)(a2 - 32), a3);
    }
    --a4;
    float64x2_t v21 = *(float64x2_t *)v11;
    float64x2_t v20 = *(float64x2_t *)(v11 + 16);
    float64x2_t v22 = a3[1];
    float64x2_t v24 = **a3;
    float64x2_t v23 = (*a3)[1];
    float64x2_t v26 = *v22;
    float64x2_t v25 = v22[1];
    if (a5) {
      goto LABEL_12;
    }
    float64x2_t v27 = vsubq_f64(*(float64x2_t *)(v11 - 32), v24);
    float64x2_t v28 = vsubq_f64(*(float64x2_t *)(v11 - 16), v23);
    int64x2_t v29 = (int64x2_t)vsubq_f64(v21, v24);
    float64x2_t v30 = vsubq_f64(v20, v23);
    v31.f64[0] = v30.f64[0];
    *(void *)&v31.f64[1] = v29.i64[0];
    float64x2_t v32 = vnegq_f64(v28);
    v28.f64[1] = v27.f64[0];
    float64x2_t v33 = vmlaq_f64(vmulq_f64(v31, vnegq_f64(v27)), (float64x2_t)v29, v28);
    *(void *)&v32.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v32, (float64x2_t)v29, 1), v30, v27, 1);
    v32.f64[1] = v33.f64[0];
    if (vmulq_laneq_f64(v25, v33, 1).f64[0] + vaddvq_f64(vmulq_f64(v26, v32)) > 0.0)
    {
LABEL_12:
      uint64_t v34 = 0;
      float64x2_t v35 = vsubq_f64(v20, v23);
      int8x16_t v36 = (int8x16_t)vsubq_f64(v21, v24);
      float64x2_t v37 = (float64x2_t)vextq_s8(v36, v36, 8uLL);
      v38.i64[0] = *(void *)&v35.f64[0];
      v38.i64[1] = v36.i64[0];
      *(void *)&float64_t v39 = vextq_s8(v38, v38, 8uLL).u64[0];
      do
      {
        float64x2_t v40 = *(float64x2_t *)(v11 + v34 + 32);
        float64x2_t v41 = *(float64x2_t *)(v11 + v34 + 48);
        float64x2_t v42 = vsubq_f64(v40, v24);
        float64x2_t v43 = vsubq_f64(v41, v23);
        float64x2_t v44 = vnegq_f64(v43);
        v43.f64[1] = v42.f64[0];
        v45.f64[0] = v35.f64[0];
        v45.f64[1] = v39;
        float64x2_t v46 = vmulq_f64(v45, vnegq_f64(v42));
        *(void *)&v45.f64[0] = v36.i64[0];
        v45.f64[1] = v37.f64[0];
        float64x2_t v47 = vmlaq_f64(v46, v45, v43);
        *(void *)&v44.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_f64(v37, v44), v35, v42, 1);
        v44.f64[1] = v47.f64[0];
        v34 += 32;
      }
      while (vmulq_laneq_f64(v25, v47, 1).f64[0] + vaddvq_f64(vmulq_f64(v26, v44)) > 0.0);
      unint64_t v48 = v11 + v34;
      uint64_t v49 = (float64x2_t *)a2;
      if (v34 == 32)
      {
        uint64_t v49 = (float64x2_t *)a2;
        do
        {
          if (v48 >= (unint64_t)v49) {
            break;
          }
          float64x2_t v58 = v49[-2];
          float64x2_t v59 = v49[-1];
          v49 -= 2;
          float64x2_t v60 = vsubq_f64(v58, v24);
          float64x2_t v61 = vsubq_f64(v59, v23);
          float64x2_t v62 = vnegq_f64(v61);
          v61.f64[1] = v60.f64[0];
          v63.f64[0] = v35.f64[0];
          v63.f64[1] = v39;
          float64x2_t v64 = vmulq_f64(v63, vnegq_f64(v60));
          *(void *)&v63.f64[0] = v36.i64[0];
          v63.f64[1] = v37.f64[0];
          float64x2_t v65 = vmlaq_f64(v64, v63, v61);
          *(void *)&v62.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_f64(v37, v62), v35, v60, 1);
          v62.f64[1] = v65.f64[0];
        }
        while (vmulq_laneq_f64(v25, v65, 1).f64[0] + vaddvq_f64(vmulq_f64(v26, v62)) <= 0.0);
      }
      else
      {
        do
        {
          float64x2_t v50 = v49[-2];
          float64x2_t v51 = v49[-1];
          v49 -= 2;
          float64x2_t v52 = vsubq_f64(v50, v24);
          float64x2_t v53 = vsubq_f64(v51, v23);
          float64x2_t v54 = vnegq_f64(v53);
          v53.f64[1] = v52.f64[0];
          v55.f64[0] = v35.f64[0];
          v55.f64[1] = v39;
          float64x2_t v56 = vmulq_f64(v55, vnegq_f64(v52));
          *(void *)&v55.f64[0] = v36.i64[0];
          v55.f64[1] = v37.f64[0];
          float64x2_t v57 = vmlaq_f64(v56, v55, v53);
          *(void *)&v54.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_f64(v37, v54), v35, v52, 1);
          v54.f64[1] = v57.f64[0];
        }
        while (vmulq_laneq_f64(v25, v57, 1).f64[0] + vaddvq_f64(vmulq_f64(v26, v54)) <= 0.0);
      }
      if (v48 >= (unint64_t)v49)
      {
        BOOL v92 = (float64x2_t *)(v48 - 32);
      }
      else
      {
        float64x2_t v66 = *v49;
        float64x2_t v67 = v49[1];
        uint64_t v68 = (float64x2_t *)(v11 + v34);
        float32x4_t v69 = v49;
        do
        {
          float64x2_t *v68 = v66;
          v68[1] = v67;
          *float32x4_t v69 = v40;
          v69[1] = v41;
          int32x4_t v70 = a3[1];
          float64x2_t v72 = **a3;
          float64x2_t v71 = (*a3)[1];
          int8x16_t v73 = (int8x16_t)vsubq_f64(v21, v72);
          float64x2_t v74 = vsubq_f64(v20, v71);
          float64x2_t v75 = (float64x2_t)vextq_s8(v73, v73, 8uLL);
          v76.i64[0] = *(void *)&v74.f64[0];
          v76.i64[1] = v73.i64[0];
          *(void *)&float64_t v77 = vextq_s8(v76, v76, 8uLL).u64[0];
          float64x2_t v79 = *v70;
          float64x2_t v78 = v70[1];
          do
          {
            float64x2_t v40 = v68[2];
            float64x2_t v41 = v68[3];
            v68 += 2;
            float64x2_t v80 = vsubq_f64(v40, v72);
            float64x2_t v81 = vsubq_f64(v41, v71);
            float64x2_t v82 = vnegq_f64(v81);
            v81.f64[1] = v80.f64[0];
            v83.f64[0] = v74.f64[0];
            v83.f64[1] = v77;
            float64x2_t v84 = vmulq_f64(v83, vnegq_f64(v80));
            *(void *)&v83.f64[0] = v73.i64[0];
            v83.f64[1] = v75.f64[0];
            float64x2_t v85 = vmlaq_f64(v84, v83, v81);
            *(void *)&v82.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_f64(v75, v82), v74, v80, 1);
            v82.f64[1] = v85.f64[0];
          }
          while (vmulq_laneq_f64(v78, v85, 1).f64[0] + vaddvq_f64(vmulq_f64(v79, v82)) > 0.0);
          do
          {
            float64x2_t v66 = v69[-2];
            float64x2_t v67 = v69[-1];
            v69 -= 2;
            float64x2_t v86 = vsubq_f64(v66, v72);
            float64x2_t v87 = vsubq_f64(v67, v71);
            float64x2_t v88 = vnegq_f64(v87);
            v87.f64[1] = v86.f64[0];
            v89.f64[0] = v74.f64[0];
            v89.f64[1] = v77;
            float64x2_t v90 = vmulq_f64(v89, vnegq_f64(v86));
            *(void *)&v89.f64[0] = v73.i64[0];
            v89.f64[1] = v75.f64[0];
            float64x2_t v91 = vmlaq_f64(v90, v89, v87);
            *(void *)&v88.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_f64(v75, v88), v74, v86, 1);
            v88.f64[1] = v91.f64[0];
          }
          while (vmulq_laneq_f64(v78, v91, 1).f64[0] + vaddvq_f64(vmulq_f64(v79, v88)) <= 0.0);
        }
        while (v68 < v69);
        BOOL v92 = v68 - 2;
      }
      if (v92 != (float64x2_t *)v11)
      {
        float64x2_t v93 = v92[1];
        *(float64x2_t *)unint64_t v11 = *v92;
        *(float64x2_t *)(v11 + 16) = v93;
      }
      float64x2_t *v92 = v21;
      v92[1] = v20;
      if (v48 < (unint64_t)v49) {
        goto LABEL_33;
      }
      BOOL v94 = _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEbT1_SM_T0_((float64x2_t *)v11, v92, a3);
      float64x2_t v12 = v92 + 2;
      BOOL result = (float64x2_t *)_ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEbT1_SM_T0_(v92 + 2, (float64x2_t *)a2, a3);
      if (result)
      {
        a2 = (unint64_t)v92;
        if (v94) {
          return result;
        }
        goto LABEL_2;
      }
      if (!v94)
      {
LABEL_33:
        BOOL result = (float64x2_t *)_ZNSt3__111__introsortINS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_Lb0EEEvT1_SM_T0_NS_15iterator_traitsISM_E15difference_typeEb(v11, v92, a3, a4, a5 & 1);
        a5 = 0;
        float64x2_t v12 = v92 + 2;
      }
    }
    else
    {
      float64x2_t v95 = vsubq_f64(*(float64x2_t *)(a2 - 32), v24);
      float64x2_t v96 = vsubq_f64(*(float64x2_t *)(a2 - 16), v23);
      float64x2_t v97 = (float64x2_t)vdupq_laneq_s64(v29, 1);
      float64x2_t v98 = vnegq_f64(v30);
      *(void *)&v99.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v98, v95, 1), v96, (float64x2_t)v29, 1);
      v100.f64[0] = v96.f64[0];
      v100.f64[1] = v95.f64[0];
      *(void *)&float64_t v101 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
      float64x2_t v102 = vnegq_f64((float64x2_t)v29);
      float64x2_t v103 = vmlaq_f64(vmulq_f64(v100, v102), v95, v31);
      v99.f64[1] = v103.f64[0];
      *(void *)&float64_t v104 = vextq_s8((int8x16_t)v102, (int8x16_t)v102, 8uLL).u64[0];
      if (vmulq_laneq_f64(v25, v103, 1).f64[0] + vaddvq_f64(vmulq_f64(v26, v99)) <= 0.0)
      {
        float32x4_t v113 = (float64x2_t *)(v11 + 32);
        do
        {
          float64x2_t v12 = v113;
          if ((unint64_t)v113 >= a2) {
            break;
          }
          float64x2_t v114 = vsubq_f64(*v113, v24);
          float64x2_t v115 = vsubq_f64(v113[1], v23);
          *(void *)&v116.f64[0] = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(v98, v114, 1), v115, v97);
          v115.f64[1] = v114.f64[0];
          v117.f64[0] = v102.f64[0];
          v117.f64[1] = v104;
          float64x2_t v118 = vmulq_f64(v115, v117);
          v117.f64[0] = v31.f64[0];
          v117.f64[1] = v101;
          float64x2_t v119 = vmlaq_f64(v118, v114, v117);
          v116.f64[1] = v119.f64[0];
          v113 += 2;
        }
        while (vmulq_laneq_f64(v25, v119, 1).f64[0] + vaddvq_f64(vmulq_f64(v26, v116)) <= 0.0);
      }
      else
      {
        float64x2_t v12 = (float64x2_t *)v11;
        do
        {
          float64x2_t v105 = v12[2];
          float64x2_t v106 = v12[3];
          v12 += 2;
          float64x2_t v107 = vsubq_f64(v105, v24);
          float64x2_t v108 = vsubq_f64(v106, v23);
          *(void *)&v109.f64[0] = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(v98, v107, 1), v108, v97);
          v108.f64[1] = v107.f64[0];
          v110.f64[0] = v102.f64[0];
          v110.f64[1] = v104;
          float64x2_t v111 = vmulq_f64(v108, v110);
          v110.f64[0] = v31.f64[0];
          v110.f64[1] = v101;
          float64x2_t v112 = vmlaq_f64(v111, v107, v110);
          v109.f64[1] = v112.f64[0];
        }
        while (vmulq_laneq_f64(v25, v112, 1).f64[0] + vaddvq_f64(vmulq_f64(v26, v109)) <= 0.0);
      }
      float32x4_t v120 = (float64x2_t *)a2;
      if ((unint64_t)v12 < a2)
      {
        float32x4_t v120 = (float64x2_t *)a2;
        do
        {
          float64x2_t v121 = v120[-2];
          float64x2_t v122 = v120[-1];
          v120 -= 2;
          float64x2_t v123 = vsubq_f64(v121, v24);
          float64x2_t v124 = vsubq_f64(v122, v23);
          *(void *)&v125.f64[0] = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(v98, v123, 1), v124, v97);
          v124.f64[1] = v123.f64[0];
          v126.f64[0] = v102.f64[0];
          v126.f64[1] = v104;
          float64x2_t v127 = vmulq_f64(v124, v126);
          v126.f64[0] = v31.f64[0];
          v126.f64[1] = v101;
          float64x2_t v128 = vmlaq_f64(v127, v123, v126);
          v125.f64[1] = v128.f64[0];
        }
        while (vmulq_laneq_f64(v25, v128, 1).f64[0] + vaddvq_f64(vmulq_f64(v26, v125)) > 0.0);
      }
      if (v12 < v120)
      {
        float64x2_t v129 = *v12;
        float64x2_t v130 = v12[1];
        float64x2_t v131 = *v120;
        float64x2_t v132 = v120[1];
        do
        {
          *float64x2_t v12 = v131;
          v12[1] = v132;
          *float32x4_t v120 = v129;
          v120[1] = v130;
          float32x4_t v133 = a3[1];
          float64x2_t v135 = **a3;
          float64x2_t v134 = (*a3)[1];
          float64x2_t v136 = vsubq_f64(v21, v135);
          float64x2_t v138 = vsubq_f64(v20, v134);
          float64x2_t v137 = vnegq_f64(v138);
          v138.f64[1] = v136.f64[0];
          *(void *)&float64_t v139 = vextq_s8((int8x16_t)v138, (int8x16_t)v138, 8uLL).u64[0];
          float64x2_t v140 = (float64x2_t)vextq_s8((int8x16_t)v136, (int8x16_t)v136, 8uLL);
          int8x16_t v141 = (int8x16_t)vnegq_f64(v136);
          *(void *)&float64_t v142 = vextq_s8(v141, v141, 8uLL).u64[0];
          float64x2_t v144 = *v133;
          float64x2_t v143 = v133[1];
          do
          {
            float64x2_t v129 = v12[2];
            float64x2_t v130 = v12[3];
            v12 += 2;
            float64x2_t v145 = vsubq_f64(v129, v135);
            float64x2_t v146 = vsubq_f64(v130, v134);
            *(void *)&v147.f64[0] = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(v137, v145, 1), v146, v140);
            v146.f64[1] = v145.f64[0];
            *(void *)&v148.f64[0] = v141.i64[0];
            v148.f64[1] = v142;
            float64x2_t v149 = vmulq_f64(v146, v148);
            v148.f64[0] = v138.f64[0];
            v148.f64[1] = v139;
            float64x2_t v150 = vmlaq_f64(v149, v145, v148);
            v147.f64[1] = v150.f64[0];
          }
          while (vmulq_laneq_f64(v143, v150, 1).f64[0] + vaddvq_f64(vmulq_f64(v144, v147)) <= 0.0);
          do
          {
            float64x2_t v131 = v120[-2];
            float64x2_t v132 = v120[-1];
            v120 -= 2;
            float64x2_t v151 = vsubq_f64(v131, v135);
            float64x2_t v152 = vsubq_f64(v132, v134);
            *(void *)&v153.f64[0] = *(_OWORD *)&vmlaq_f64(vmulq_laneq_f64(v137, v151, 1), v152, v140);
            v152.f64[1] = v151.f64[0];
            *(void *)&v154.f64[0] = v141.i64[0];
            v154.f64[1] = v142;
            float64x2_t v155 = vmulq_f64(v152, v154);
            v154.f64[0] = v138.f64[0];
            v154.f64[1] = v139;
            float64x2_t v156 = vmlaq_f64(v155, v151, v154);
            v153.f64[1] = v156.f64[0];
          }
          while (vmulq_laneq_f64(v143, v156, 1).f64[0] + vaddvq_f64(vmulq_f64(v144, v153)) > 0.0);
        }
        while (v12 < v120);
      }
      float32x4_t v157 = v12 - 2;
      BOOL v5 = (unint64_t)&v12[-2] >= v11;
      BOOL v6 = &v12[-2] == (float64x2_t *)v11;
      if (&v12[-2] != (float64x2_t *)v11)
      {
        float64x2_t v158 = v12[-1];
        *(float64x2_t *)unint64_t v11 = *v157;
        *(float64x2_t *)(v11 + 16) = v158;
      }
      a5 = 0;
      *float32x4_t v157 = v21;
      v12[-1] = v20;
    }
  }
  if (a5)
  {
    if (v12 != (float64x2_t *)a2)
    {
      int32x4_t v218 = v12 + 2;
      if (&v12[2] != (float64x2_t *)a2)
      {
        uint64_t v219 = 0;
        float64x2_t v220 = *a3;
        float64x2_t v221 = v12;
        do
        {
          float64x2_t v223 = v221[2];
          float64x2_t v222 = v221[3];
          float64x2_t v225 = *v221;
          float64x2_t v224 = v221[1];
          float64x2_t v221 = v218;
          float64x2_t v226 = v220[1];
          float64x2_t v227 = vsubq_f64(v223, *v220);
          float64x2_t v228 = vsubq_f64(v222, v226);
          float64x2_t v229 = vsubq_f64(v225, *v220);
          float64x2_t v230 = vsubq_f64(v224, v226);
          *(void *)&v231.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v228), v229, 1), v230, v227, 1);
          v230.f64[1] = v229.f64[0];
          v228.f64[1] = v227.f64[0];
          float64x2_t v232 = vmlaq_f64(vmulq_f64(v230, vnegq_f64(v227)), v229, v228);
          v231.f64[1] = v232.f64[0];
          if (vmulq_laneq_f64(a3[1][1], v232, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v231)) > 0.0)
          {
            uint64_t v233 = v219;
            while (1)
            {
              float64x2_t v234 = (float64x2_t *)((char *)v12 + v233);
              v234[2] = v225;
              v234[3] = v224;
              if (!v233) {
                break;
              }
              float64x2_t v236 = **a3;
              float64x2_t v235 = (*a3)[1];
              float64x2_t v237 = vsubq_f64(v223, v236);
              float64x2_t v238 = vsubq_f64(v222, v235);
              float64x2_t v225 = v234[-2];
              float64x2_t v224 = v234[-1];
              float64x2_t v239 = vsubq_f64(v225, v236);
              float64x2_t v240 = vsubq_f64(v224, v235);
              *(void *)&v241.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v238), v239, 1), v240, v237, 1);
              v240.f64[1] = v239.f64[0];
              v238.f64[1] = v237.f64[0];
              float64x2_t v242 = vmlaq_f64(vmulq_f64(v240, vnegq_f64(v237)), v239, v238);
              v241.f64[1] = v242.f64[0];
              v233 -= 32;
              if (vmulq_laneq_f64(a3[1][1], v242, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v241)) <= 0.0)
              {
                float64x2_t v243 = (float64x2_t *)((char *)v12 + v233 + 32);
                goto LABEL_79;
              }
            }
            float64x2_t v243 = v12;
LABEL_79:
            float64x2_t *v243 = v223;
            v243[1] = v222;
            float64x2_t v220 = *a3;
          }
          int32x4_t v218 = v221 + 2;
          v219 += 32;
        }
        while (&v221[2] != (float64x2_t *)a2);
      }
    }
  }
  else if (v12 != (float64x2_t *)a2)
  {
    v331 = v12 + 2;
    if (&v12[2] != (float64x2_t *)a2)
    {
      v332 = *a3;
      do
      {
        float64x2_t v334 = *(float64x2_t *)(v11 + 32);
        float64x2_t v333 = *(float64x2_t *)(v11 + 48);
        float64x2_t v336 = *(float64x2_t *)v11;
        float64x2_t v335 = *(float64x2_t *)(v11 + 16);
        unint64_t v11 = (unint64_t)v331;
        float64x2_t v337 = v332[1];
        float64x2_t v338 = vsubq_f64(v334, *v332);
        float64x2_t v339 = vsubq_f64(v333, v337);
        float64x2_t v340 = vsubq_f64(v336, *v332);
        float64x2_t v341 = vsubq_f64(v335, v337);
        *(void *)&v342.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v339), v340, 1), v341, v338, 1);
        v341.f64[1] = v340.f64[0];
        v339.f64[1] = v338.f64[0];
        float64x2_t v343 = vmlaq_f64(vmulq_f64(v341, vnegq_f64(v338)), v340, v339);
        v342.f64[1] = v343.f64[0];
        if (vmulq_laneq_f64(a3[1][1], v343, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v342)) > 0.0)
        {
          v344 = v331;
          do
          {
            float64x2_t *v344 = v336;
            v344[1] = v335;
            float64x2_t v346 = **a3;
            float64x2_t v345 = (*a3)[1];
            float64x2_t v347 = vsubq_f64(v334, v346);
            float64x2_t v336 = v344[-4];
            float64x2_t v335 = v344[-3];
            float64x2_t v348 = vsubq_f64(v333, v345);
            float64x2_t v349 = vsubq_f64(v336, v346);
            float64x2_t v350 = vsubq_f64(v335, v345);
            *(void *)&v351.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v348), v349, 1), v350, v347, 1);
            v350.f64[1] = v349.f64[0];
            v348.f64[1] = v347.f64[0];
            float64x2_t v352 = vmlaq_f64(vmulq_f64(v350, vnegq_f64(v347)), v349, v348);
            v351.f64[1] = v352.f64[0];
            v344 -= 2;
          }
          while (vmulq_laneq_f64(a3[1][1], v352, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v351)) > 0.0);
          float64x2_t *v344 = v334;
          v344[1] = v333;
          v332 = *a3;
        }
        v331 += 2;
      }
      while (v11 + 32 != a2);
    }
  }
  return result;
}

float64x2_t *_ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEjT1_SM_SM_T0_(float64x2_t *result, float64x2_t *a2, float64x2_t *a3, float64x2_t **a4)
{
  float32x4_t v4 = a4[1];
  float64x2_t v6 = **a4;
  float64x2_t v5 = (*a4)[1];
  float64x2_t v8 = *a2;
  float64x2_t v7 = a2[1];
  float64x2_t v9 = vsubq_f64(*a2, v6);
  float64x2_t v10 = vsubq_f64(v7, v5);
  float64x2_t v11 = *result;
  float64x2_t v12 = result[1];
  float64x2_t v13 = vsubq_f64(*result, v6);
  v14.f64[0] = v10.f64[0];
  v14.f64[1] = v9.f64[0];
  float64x2_t v15 = vsubq_f64(v12, v5);
  *(void *)&v16.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v10), v13, 1), v15, v9, 1);
  v17.f64[0] = v15.f64[0];
  v17.f64[1] = v13.f64[0];
  float64x2_t v19 = *a3;
  float64x2_t v18 = a3[1];
  float64x2_t v20 = vsubq_f64(*a3, v6);
  float64x2_t v21 = vsubq_f64(v18, v5);
  *(void *)&v22.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v21), v9, 1), v10, v20, 1);
  float64x2_t v23 = vmlaq_f64(vmulq_f64(v17, vnegq_f64(v9)), v13, v14);
  v16.f64[1] = v23.f64[0];
  float64x2_t v24 = v4[1];
  v21.f64[1] = v20.f64[0];
  float64x2_t v25 = vmlaq_f64(vmulq_f64(v14, vnegq_f64(v20)), v9, v21);
  v22.f64[1] = v25.f64[0];
  double v26 = vmulq_laneq_f64(v24, v25, 1).f64[0] + vaddvq_f64(vmulq_f64(*v4, v22));
  if (vmulq_laneq_f64(v24, v23, 1).f64[0] + vaddvq_f64(vmulq_f64(*v4, v16)) <= 0.0)
  {
    if (v26 > 0.0)
    {
      *a2 = v19;
      a2[1] = v18;
      *a3 = v8;
      a3[1] = v7;
      float64x2_t v27 = a2[1];
      float64x2_t v29 = **a4;
      float64x2_t v28 = (*a4)[1];
      float64x2_t v30 = vsubq_f64(*a2, v29);
      float64x2_t v31 = vsubq_f64(v27, v28);
      float64x2_t v32 = *result;
      float64x2_t v33 = result[1];
      float64x2_t v34 = vsubq_f64(*result, v29);
      float64x2_t v35 = vsubq_f64(v33, v28);
      *(void *)&v36.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v31), v34, 1), v35, v30, 1);
      v35.f64[1] = v34.f64[0];
      v31.f64[1] = v30.f64[0];
      float64x2_t v37 = vmlaq_f64(vmulq_f64(v35, vnegq_f64(v30)), v34, v31);
      v36.f64[1] = v37.f64[0];
      if (vmulq_laneq_f64(a4[1][1], v37, 1).f64[0] + vaddvq_f64(vmulq_f64(*a4[1], v36)) > 0.0)
      {
        *BOOL result = *a2;
        result[1] = v27;
        *a2 = v32;
        a2[1] = v33;
      }
    }
  }
  else
  {
    if (v26 <= 0.0)
    {
      *BOOL result = v8;
      result[1] = v7;
      *a2 = v11;
      a2[1] = v12;
      float64x2_t v38 = a3[1];
      float64x2_t v40 = **a4;
      float64x2_t v39 = (*a4)[1];
      float64x2_t v41 = vsubq_f64(*a3, v40);
      float64x2_t v42 = vsubq_f64(v38, v39);
      float64x2_t v43 = vsubq_f64(v11, v40);
      float64x2_t v44 = vsubq_f64(v12, v39);
      *(void *)&v45.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v42), v43, 1), v44, v41, 1);
      v44.f64[1] = v43.f64[0];
      v42.f64[1] = v41.f64[0];
      float64x2_t v46 = vmlaq_f64(vmulq_f64(v44, vnegq_f64(v41)), v43, v42);
      v45.f64[1] = v46.f64[0];
      if (vmulq_laneq_f64(a4[1][1], v46, 1).f64[0] + vaddvq_f64(vmulq_f64(*a4[1], v45)) <= 0.0) {
        return result;
      }
      *a2 = *a3;
      a2[1] = v38;
    }
    else
    {
      *BOOL result = v19;
      result[1] = v18;
    }
    *a3 = v11;
    a3[1] = v12;
  }
  return result;
}

BOOL _ZNSt3__127__insertion_sort_incompleteB8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEbT1_SM_T0_(float64x2_t *a1, float64x2_t *a2, float64x2_t **a3)
{
  uint64_t v6 = ((char *)a2 - (char *)a1) >> 5;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      float64x2_t v9 = a2[-2];
      float64x2_t v8 = a2[-1];
      float64x2_t v11 = **a3;
      float64x2_t v10 = (*a3)[1];
      float64x2_t v12 = vsubq_f64(v9, v11);
      float64x2_t v13 = vsubq_f64(v8, v10);
      float64x2_t v15 = *a1;
      float64x2_t v14 = a1[1];
      float64x2_t v16 = vsubq_f64(*a1, v11);
      float64x2_t v17 = vsubq_f64(v14, v10);
      *(void *)&v18.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v13), v16, 1), v17, v12, 1);
      v17.f64[1] = v16.f64[0];
      v13.f64[1] = v12.f64[0];
      float64x2_t v19 = vmlaq_f64(vmulq_f64(v17, vnegq_f64(v12)), v16, v13);
      v18.f64[1] = v19.f64[0];
      if (vmulq_laneq_f64(a3[1][1], v19, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v18)) > 0.0)
      {
        *a1 = v9;
        a1[1] = v8;
        a2[-2] = v15;
        a2[-1] = v14;
      }
      return result;
    case 3:
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEjT1_SM_SM_T0_(a1, a1 + 2, a2 - 2, a3);
      return 1;
    case 4:
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEvT1_SM_SM_SM_T0_(a1, a1 + 2, a1 + 4, a2 - 2, a3);
      return 1;
    case 5:
      float64x2_t v47 = a1 + 2;
      unint64_t v48 = a1 + 4;
      uint64_t v49 = a1 + 6;
      _ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEvT1_SM_SM_SM_T0_(a1, a1 + 2, a1 + 4, a1 + 6, a3);
      float64x2_t v51 = **a3;
      float64x2_t v50 = (*a3)[1];
      float64x2_t v53 = a2[-2];
      float64x2_t v52 = a2[-1];
      float64x2_t v54 = vsubq_f64(v53, v51);
      float64x2_t v55 = vsubq_f64(v52, v50);
      float64x2_t v56 = a1[6];
      float64x2_t v57 = a1[7];
      float64x2_t v58 = vsubq_f64(v56, v51);
      float64x2_t v59 = vsubq_f64(v57, v50);
      *(void *)&v60.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v55), v58, 1), v59, v54, 1);
      v59.f64[1] = v58.f64[0];
      v55.f64[1] = v54.f64[0];
      float64x2_t v61 = vmlaq_f64(vmulq_f64(v59, vnegq_f64(v54)), v58, v55);
      v60.f64[1] = v61.f64[0];
      if (vmulq_laneq_f64(a3[1][1], v61, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v60)) <= 0.0) {
        return 1;
      }
      *uint64_t v49 = v53;
      a1[7] = v52;
      a2[-2] = v56;
      a2[-1] = v57;
      float64x2_t v63 = **a3;
      float64x2_t v62 = (*a3)[1];
      float64x2_t v65 = *v49;
      float64x2_t v64 = a1[7];
      float64x2_t v66 = vsubq_f64(*v49, v63);
      float64x2_t v67 = vsubq_f64(v64, v62);
      float64x2_t v69 = *v48;
      float64x2_t v68 = a1[5];
      float64x2_t v70 = vsubq_f64(*v48, v63);
      float64x2_t v71 = vsubq_f64(v68, v62);
      *(void *)&v72.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v67), v70, 1), v71, v66, 1);
      v71.f64[1] = v70.f64[0];
      v67.f64[1] = v66.f64[0];
      float64x2_t v73 = vmlaq_f64(vmulq_f64(v71, vnegq_f64(v66)), v70, v67);
      v72.f64[1] = v73.f64[0];
      if (vmulq_laneq_f64(a3[1][1], v73, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v72)) <= 0.0) {
        return 1;
      }
      *unint64_t v48 = v65;
      a1[5] = v64;
      *uint64_t v49 = v69;
      a1[7] = v68;
      float64x2_t v75 = **a3;
      float64x2_t v74 = (*a3)[1];
      float64x2_t v76 = vsubq_f64(v65, v75);
      float64x2_t v77 = vsubq_f64(v64, v74);
      float64x2_t v79 = *v47;
      float64x2_t v78 = a1[3];
      float64x2_t v80 = vsubq_f64(*v47, v75);
      float64x2_t v81 = vsubq_f64(v78, v74);
      *(void *)&v82.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v77), v80, 1), v81, v76, 1);
      v81.f64[1] = v80.f64[0];
      v77.f64[1] = v76.f64[0];
      float64x2_t v83 = vmlaq_f64(vmulq_f64(v81, vnegq_f64(v76)), v80, v77);
      v82.f64[1] = v83.f64[0];
      if (vmulq_laneq_f64(a3[1][1], v83, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v82)) <= 0.0) {
        return 1;
      }
      a1[2] = v65;
      a1[3] = v64;
      a1[4] = v79;
      a1[5] = v78;
      float64x2_t v85 = **a3;
      float64x2_t v84 = (*a3)[1];
      float64x2_t v86 = vsubq_f64(v65, v85);
      float64x2_t v87 = vsubq_f64(v64, v84);
      float64x2_t v89 = *a1;
      float64x2_t v88 = a1[1];
      float64x2_t v90 = vsubq_f64(*a1, v85);
      float64x2_t v91 = vsubq_f64(v88, v84);
      *(void *)&v92.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v87), v90, 1), v91, v86, 1);
      v91.f64[1] = v90.f64[0];
      v87.f64[1] = v86.f64[0];
      float64x2_t v93 = vmlaq_f64(vmulq_f64(v91, vnegq_f64(v86)), v90, v87);
      v92.f64[1] = v93.f64[0];
      if (vmulq_laneq_f64(a3[1][1], v93, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v92)) <= 0.0) {
        return 1;
      }
      *a1 = v65;
      a1[1] = v64;
      BOOL result = 1;
      a1[2] = v89;
      a1[3] = v88;
      return result;
    default:
      float64x2_t v20 = a1 + 4;
      _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEjT1_SM_SM_T0_(a1, a1 + 2, a1 + 4, a3);
      float64x2_t v21 = a1 + 6;
      if (&a1[6] == a2) {
        return 1;
      }
      int v22 = 0;
      uint64_t v23 = 96;
      break;
  }
  while (1)
  {
    float64x2_t v25 = **a3;
    float64x2_t v24 = (*a3)[1];
    float64x2_t v27 = *v21;
    float64x2_t v26 = v21[1];
    float64x2_t v28 = vsubq_f64(*v21, v25);
    float64x2_t v29 = vsubq_f64(v26, v24);
    float64x2_t v30 = *v20;
    float64x2_t v31 = v20[1];
    float64x2_t v32 = vsubq_f64(*v20, v25);
    float64x2_t v33 = vsubq_f64(v31, v24);
    *(void *)&v34.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v29), v32, 1), v33, v28, 1);
    v33.f64[1] = v32.f64[0];
    v29.f64[1] = v28.f64[0];
    float64x2_t v35 = vmlaq_f64(vmulq_f64(v33, vnegq_f64(v28)), v32, v29);
    v34.f64[1] = v35.f64[0];
    if (vmulq_laneq_f64(a3[1][1], v35, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v34)) > 0.0)
    {
      uint64_t v36 = v23;
      while (1)
      {
        float64x2_t v37 = (float64x2_t *)((char *)a1 + v36);
        float64x2_t *v37 = v30;
        v37[1] = v31;
        v36 -= 32;
        if (!v36) {
          break;
        }
        float64x2_t v39 = **a3;
        float64x2_t v38 = (*a3)[1];
        float64x2_t v40 = vsubq_f64(v27, v39);
        float64x2_t v41 = vsubq_f64(v26, v38);
        float64x2_t v30 = v37[-4];
        float64x2_t v31 = v37[-3];
        float64x2_t v42 = vsubq_f64(v30, v39);
        float64x2_t v43 = vsubq_f64(v31, v38);
        *(void *)&v44.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v41), v42, 1), v43, v40, 1);
        v43.f64[1] = v42.f64[0];
        v41.f64[1] = v40.f64[0];
        float64x2_t v45 = vmlaq_f64(vmulq_f64(v43, vnegq_f64(v40)), v42, v41);
        v44.f64[1] = v45.f64[0];
        if (vmulq_laneq_f64(a3[1][1], v45, 1).f64[0] + vaddvq_f64(vmulq_f64(*a3[1], v44)) <= 0.0)
        {
          float64x2_t v46 = (float64x2_t *)((char *)a1 + v36);
          goto LABEL_13;
        }
      }
      float64x2_t v46 = a1;
LABEL_13:
      *float64x2_t v46 = v27;
      v46[1] = v26;
      if (++v22 == 8) {
        return &v21[2] == a2;
      }
    }
    float64x2_t v20 = v21;
    v23 += 32;
    v21 += 2;
    if (v21 == a2) {
      return 1;
    }
  }
}

float64x2_t *_ZNSt3__17__sort4B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEvT1_SM_SM_SM_T0_(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, float64x2_t **a5)
{
  BOOL result = _ZNSt3__17__sort3B8nn180100INS_17_ClassicAlgPolicyERZN4geom12_GLOBAL__N_131compute_plane_box_intersectionsIdEEvNS2_11vector_typeIT_Lh3EvE5valueES8_RKNS2_4bboxIS6_Lh3EEERNS3_11fixed_arrayIS6_Lh3ELh9EEEEUlRKDv3_dSI_E_PSG_EEjT1_SM_SM_T0_(a1, a2, a3, a5);
  float64x2_t v12 = **a5;
  float64x2_t v11 = (*a5)[1];
  float64x2_t v13 = a4[1];
  float64x2_t v14 = vsubq_f64(*a4, v12);
  float64x2_t v15 = vsubq_f64(v13, v11);
  float64x2_t v16 = *a3;
  float64x2_t v17 = a3[1];
  float64x2_t v18 = vsubq_f64(*a3, v12);
  float64x2_t v19 = vsubq_f64(v17, v11);
  *(void *)&v20.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v15), v18, 1), v19, v14, 1);
  v19.f64[1] = v18.f64[0];
  v15.f64[1] = v14.f64[0];
  float64x2_t v21 = vmlaq_f64(vmulq_f64(v19, vnegq_f64(v14)), v18, v15);
  v20.f64[1] = v21.f64[0];
  if (vmulq_laneq_f64(a5[1][1], v21, 1).f64[0] + vaddvq_f64(vmulq_f64(*a5[1], v20)) > 0.0)
  {
    *a3 = *a4;
    a3[1] = v13;
    *a4 = v16;
    a4[1] = v17;
    float64x2_t v23 = **a5;
    float64x2_t v22 = (*a5)[1];
    float64x2_t v24 = a3[1];
    float64x2_t v25 = vsubq_f64(*a3, v23);
    float64x2_t v26 = vsubq_f64(v24, v22);
    float64x2_t v27 = *a2;
    float64x2_t v28 = a2[1];
    float64x2_t v29 = vsubq_f64(*a2, v23);
    float64x2_t v30 = vsubq_f64(v28, v22);
    *(void *)&v31.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v26), v29, 1), v30, v25, 1);
    v30.f64[1] = v29.f64[0];
    v26.f64[1] = v25.f64[0];
    float64x2_t v32 = vmlaq_f64(vmulq_f64(v30, vnegq_f64(v25)), v29, v26);
    v31.f64[1] = v32.f64[0];
    if (vmulq_laneq_f64(a5[1][1], v32, 1).f64[0] + vaddvq_f64(vmulq_f64(*a5[1], v31)) > 0.0)
    {
      *a2 = *a3;
      a2[1] = v24;
      *a3 = v27;
      a3[1] = v28;
      float64x2_t v33 = a2[1];
      float64x2_t v35 = **a5;
      float64x2_t v34 = (*a5)[1];
      float64x2_t v36 = vsubq_f64(*a2, v35);
      float64x2_t v37 = vsubq_f64(v33, v34);
      float64x2_t v38 = *a1;
      float64x2_t v39 = a1[1];
      float64x2_t v40 = vsubq_f64(*a1, v35);
      float64x2_t v41 = vsubq_f64(v39, v34);
      *(void *)&v42.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v37), v40, 1), v41, v36, 1);
      v41.f64[1] = v40.f64[0];
      v37.f64[1] = v36.f64[0];
      float64x2_t v43 = vmlaq_f64(vmulq_f64(v41, vnegq_f64(v36)), v40, v37);
      v42.f64[1] = v43.f64[0];
      if (vmulq_laneq_f64(a5[1][1], v43, 1).f64[0] + vaddvq_f64(vmulq_f64(*a5[1], v42)) > 0.0)
      {
        *a1 = *a2;
        a1[1] = v33;
        *a2 = v38;
        a2[1] = v39;
      }
    }
  }
  return result;
}

void geom::cluster<float>::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, atomic_uint *a7, int a8, float a9, int a10)
{
  float64x2_t v40 = 0;
  float64x2_t v41 = a7;
  *(unsigned char *)(a1 + 136) = 1;
  *(void *)(a1 + 72) = a2;
  *(void *)(a1 + 80) = a3;
  long long v15 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v15;
  *(_DWORD *)(a1 + 64) = a10;
  *(float *)(a1 + 68) = a9;
  int v16 = *(_DWORD *)(a2 + 4);
  size_t v17 = (v16 * v16 * v16);
  __p = 0;
  float64x2_t v39 = 0;
  if (v17)
  {
    float64x2_t v18 = (char *)operator new((v16 * v16 * v16));
    float64x2_t v19 = &v18[v17];
    __p = v18;
    float64x2_t v40 = &v18[v17];
    bzero(v18, v17);
    float64x2_t v39 = v19;
  }
  block = (void **)MEMORY[0x263EF8330];
  uint64_t v43 = 0x40000000;
  float64x2_t v44 = ___ZN4geom26dispatch_apply_with_strideIZNS_7clusterIfE4initEPKNS_10voxel_gridIfEEPvRKNSt3__16vectorIDv3_fNS8_9allocatorISA_EEEERKNS9_IjNSB_IjEEEERKNS_3bvhIfLh3EEEPNS_17convex_mesh_cacheIfEEjjfEUlmE_EEmmmP16dispatch_queue_sT__block_invoke;
  float64x2_t v45 = &__block_descriptor_tmp_0;
  uint64_t v46 = 1024;
  size_t v47 = v17;
  uint64_t v48 = a1;
  p_p = &__p;
  dispatch_apply((v17 + 1023) >> 10, 0, &block);
  float64x2_t v35 = 0;
  float64x2_t v36 = 0;
  uint64_t v37 = 0;
  if (v17) {
    _ZNSt3__16vectorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS0_IDv3_fNS_9allocatorIS9_EEEERKNS0_IjNSA_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextNSA_ISQ_EEE6resizeEm((uint64_t *)&v35, (v17 + 1023) >> 10);
  }
  block = (void **)MEMORY[0x263EF8330];
  uint64_t v43 = 0x40000000;
  float64x2_t v44 = ___ZN4geom26dispatch_apply_with_strideIZNS_7clusterIfE4initEPKNS_10voxel_gridIfEEPvRKNSt3__16vectorIDv3_fNS8_9allocatorISA_EEEERKNS9_IjNSB_IjEEEERKNS_3bvhIfLh3EEEPNS_17convex_mesh_cacheIfEEjjfEUlmRZNS2_4initES6_S7_SF_SJ_SN_SQ_jjfE18voxel_init_contextE_SR_EEmmmP16dispatch_queue_sRNS9_IT0_NSB_ISW_EEEET__block_invoke;
  float64x2_t v45 = &__block_descriptor_tmp_5;
  uint64_t v46 = 1024;
  size_t v47 = v17;
  uint64_t v48 = a1;
  p_p = &__p;
  uint64_t v50 = a4;
  uint64_t v51 = a5;
  uint64_t v52 = a6;
  float64x2_t v53 = &v41;
  int v54 = a8;
  float64x2_t v55 = (uint64_t *)&v35;
  dispatch_apply((v17 + 1023) >> 10, 0, &block);
  float64x2_t v20 = v35;
  if (v35 == v36)
  {
    unint64_t v22 = 0;
    unint64_t v21 = 0;
  }
  else
  {
    unint64_t v21 = 0;
    unint64_t v22 = 0;
    do
    {
      v21 += (uint64_t)(v20[1] - *v20) >> 3;
      v22 += (uint64_t)(v20[4] - v20[3]) >> 4;
      v20 += 12;
    }
    while (v20 != v36);
  }
  std::vector<unsigned long long>::reserve((void **)(a1 + 88), v21);
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::reserve((char **)(a1 + 112), v22);
  uint64_t v23 = (uint64_t)v35;
  float64x2_t v24 = v36;
  while ((void *)v23 != v24)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>,std::back_insert_iterator<std::vector<unsigned long long>>,0>(*(void **)v23, *(void **)(v23 + 8), a1 + 88);
    float64x2_t v25 = *(long long **)(v23 + 24);
    float64x2_t v26 = *(long long **)(v23 + 32);
    while (v25 != v26)
      std::vector<std::shared_ptr<geom::convex_mesh<float>>>::push_back[abi:nn180100]((char **)(a1 + 112), v25++);
    v23 += 96;
  }
  float64x2_t v28 = v41;
  unint64_t add = atomic_fetch_add(v41, 1u);
  uint64_t v29 = *((void *)v28 + 1);
  if (add >= (*((void *)v28 + 2) - v29) >> 4)
  {
    float64x2_t v31 = (int **)operator new(0x80uLL);
    v31[1] = 0;
    v31[2] = 0;
    v31[4] = (int *)vdup_n_s32(0x7FC00000u);
    float64x2_t v32 = v31 + 4;
    *float64x2_t v31 = (int *)&unk_26EA059A0;
    v31[5] = 0;
    *(void *)&long long v33 = 0x7F0000007FLL;
    *((void *)&v33 + 1) = 0x7F0000007FLL;
    *((int32x4_t *)v31 + 3) = vdupq_n_s32(0x7F800000u);
    *((_OWORD *)v31 + 4) = v33;
    *((_OWORD *)v31 + 5) = 0u;
    *((_OWORD *)v31 + 6) = 0u;
    *((_OWORD *)v31 + 7) = 0u;
  }
  else
  {
    float64x2_t v30 = (int ***)(v29 + 16 * add);
    float64x2_t v32 = *v30;
    float64x2_t v31 = v30[1];
    if (v31) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v31 + 1, 1uLL, memory_order_relaxed);
    }
  }
  float64x2_t v34 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v32;
  *(void *)(a1 + 8) = v31;
  if (v34)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v34);
    float64x2_t v32 = *(int ***)a1;
  }
  geom::merge_convex_hulls<float>(*(uint64_t **)(a1 + 112), (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 4, (uint64_t)(v32 + 6), v32 + 9, *(_DWORD *)(a1 + 64), *(float *)(a1 + 68));
  geom::cluster<float>::compute_concavity(a1);
  block = (void **)&v35;
  _ZNSt3__16vectorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS0_IDv3_fNS_9allocatorIS9_EEEERKNS0_IjNSA_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextNSA_ISQ_EEE16__destroy_vectorclB8nn180100Ev(&block);
  if (__p)
  {
    float64x2_t v39 = __p;
    operator delete(__p);
  }
}

void std::vector<unsigned long long>::reserve(void **a1, unint64_t a2)
{
  float32x4_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v3, a2);
    float64x2_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    float64x2_t v9 = &v6[8 * v8];
    float64x2_t v10 = (char *)*a1;
    float64x2_t v11 = (char *)a1[1];
    float64x2_t v12 = v7;
    if (v11 != *a1)
    {
      float64x2_t v12 = v7;
      do
      {
        uint64_t v13 = *((void *)v11 - 1);
        v11 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v11 != v10);
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

void **std::vector<std::shared_ptr<geom::convex_mesh<float>>>::reserve(char **a1, unint64_t a2)
{
  float32x4_t v4 = a1[2];
  BOOL result = (void **)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    uint64_t v5 = a1[1] - *a1;
    size_t v17 = result;
    uint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)result, a2);
    float64x2_t v9 = *a1;
    uint64_t v8 = a1[1];
    if (v8 == *a1)
    {
      int64x2_t v12 = vdupq_n_s64((unint64_t)v8);
      float64x2_t v10 = &v6[v5];
    }
    else
    {
      float64x2_t v10 = &v6[v5];
      do
      {
        long long v11 = *((_OWORD *)v8 - 1);
        v8 -= 16;
        *((_OWORD *)v10 - 1) = v11;
        v10 -= 16;
        *(void *)uint64_t v8 = 0;
        *((void *)v8 + 1) = 0;
      }
      while (v8 != v9);
      int64x2_t v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5];
    int64x2_t v15 = v12;
    uint64_t v13 = a1[2];
    a1[2] = &v6[16 * v7];
    int v16 = v13;
    uint64_t v14 = v12.i64[0];
    return std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((void **)&v14);
  }
  return result;
}

void geom::merge_convex_hulls<float>(uint64_t *a1, uint64_t a2, uint64_t a3, int **a4, unsigned int a5, float a6)
{
  if (a2)
  {
    long long v11 = a1;
    unint64_t v12 = 0;
    uint64_t v13 = 16 * a2;
    uint64_t v14 = 16 * a2;
    int64x2_t v15 = a1;
    do
    {
      uint64_t v16 = *v15;
      v15 += 2;
      v12 += (uint64_t)(*(void *)(v16 + 56) - *(void *)(v16 + 48)) >> 4;
      v14 -= 16;
    }
    while (v14);
    *(void *)(a3 + 8) = *(void *)a3;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)a3, v12);
    do
    {
      uint64_t v17 = *v11;
      v11 += 2;
      _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__insert_with_sizeB8nn180100INS_11__wrap_iterIPS1_EES8_EES8_NS6_IPKS1_EET_T0_l(a3, *(void *)(a3 + 8), *(char **)(v17 + 48), *(char **)(v17 + 56), (uint64_t)(*(void *)(v17 + 56) - *(void *)(v17 + 48)) >> 4);
      v13 -= 16;
    }
    while (v13);
    v20[0] = 0;
    v20[1] = 0;
    uint64_t v21 = 0;
    memset(&__p, 0, sizeof(__p));
    geom::convex_hull_triangulated_3<float>((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 4, *(float32x4_t **)a3, a4, a5, a6);
    geom::crunch_triangle_mesh<float>((uint64_t *)a3, (char **)v20, a4, &__p);
    float64x2_t v18 = *(float32x4_t **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v18;
      operator delete(v18);
    }
    *(_OWORD *)a3 = *(_OWORD *)v20;
    *(void *)(a3 + 16) = v21;
    v20[1] = 0;
    uint64_t v21 = 0;
    v20[0] = 0;
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
      if (v20[0])
      {
        v20[1] = v20[0];
        operator delete(v20[0]);
      }
    }
  }
  else
  {
    *(void *)(a3 + 8) = *(void *)a3;
    a4[1] = *a4;
  }
}

uint64_t geom::cluster<float>::compute_concavity(uint64_t result)
{
  v1 = *(float32x4_t **)result;
  uint32x4_t v2 = (uint32x4_t)vcgtq_f32(v1[1], v1[2]);
  v2.i32[3] = v2.i32[2];
  if ((vmaxvq_u32(v2) & 0x80000000) != 0)
  {
    float v3 = v1->f32[0];
    if (v1->f32[0] <= 0.00000011921) {
      goto LABEL_10;
    }
    float32x4_t v4 = (float32x4_t *)v1[3].i64[0];
    uint64_t v5 = v1[3].i64[1] - (void)v4;
    if (v5)
    {
      float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      uint64_t v7 = 16 * (v5 >> 4);
      v8.i64[0] = 0x7F0000007FLL;
      v8.i32[2] = 127;
      do
      {
        float32x4_t v9 = *v4++;
        float32x4_t v10 = v9;
        v10.i32[3] = 0;
        v6.i32[3] = 0;
        float32x4_t v6 = vminnmq_f32(v10, v6);
        v8.i32[3] = 0;
        float32x4_t v8 = vmaxnmq_f32(v10, v8);
        v7 -= 16;
      }
      while (v7);
    }
    else
    {
      float32x4_t v6 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      v8.i64[0] = 0x7F0000007FLL;
      v8.i64[1] = 0x7F0000007FLL;
    }
    v1[1] = v6;
    v1[2] = v8;
    v1 = *(float32x4_t **)result;
  }
  float v3 = v1->f32[0];
LABEL_10:
  if (v3 <= 0.0)
  {
    *(void *)(result + 16) = 0;
    float v11 = 0.0;
  }
  else
  {
    float v11 = **(float **)result - *(float *)(result + 16);
    if (v11 < 0.0) {
      float v11 = 0.0;
    }
  }
  *(float *)(result + 24) = v11;
  *(unsigned char *)(result + 137) = 1;
  return result;
}

uint64_t geom::cluster<float>::init(__n128 *a1, unint64_t a2, unint64_t a3, uint64_t a4, __n128 *__c, __n128 *a6, unsigned __int32 a7, __n128 a8, __n128 a9, float a10)
{
  a1[4].n128_u64[1] = a2;
  a1[5].n128_u64[0] = a3;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE((uint64_t)&a1[5].n128_i64[1], __c);
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((uint64_t *)&a1[7]);
  a1[7] = *a6;
  a1[8].n128_u64[0] = a6[1].n128_u64[0];
  a6->n128_u64[0] = 0;
  a6->n128_u64[1] = 0;
  a6[1].n128_u64[0] = 0;
  a1[4].n128_u32[0] = a7;
  a1[4].n128_f32[1] = a10;
  a1[2] = a8;
  a1[3] = a9;
  a1[8].n128_u8[8] = 1;
  unint64_t add = atomic_fetch_add((atomic_uint *volatile)a4, 1u);
  uint64_t v16 = *(void *)(a4 + 8);
  if (add >= (*(void *)(a4 + 16) - v16) >> 4)
  {
    float64x2_t v18 = (int **)operator new(0x80uLL);
    v18[1] = 0;
    v18[2] = 0;
    v18[4] = (int *)vdup_n_s32(0x7FC00000u);
    float64x2_t v19 = v18 + 4;
    *float64x2_t v18 = (int *)&unk_26EA059A0;
    v18[5] = 0;
    *(void *)&long long v20 = 0x7F0000007FLL;
    *((void *)&v20 + 1) = 0x7F0000007FLL;
    *((int32x4_t *)v18 + 3) = vdupq_n_s32(0x7F800000u);
    *((_OWORD *)v18 + 4) = v20;
    *((_OWORD *)v18 + 5) = 0u;
    *((_OWORD *)v18 + 6) = 0u;
    *((_OWORD *)v18 + 7) = 0u;
  }
  else
  {
    uint64_t v17 = (int ***)(v16 + 16 * add);
    float64x2_t v19 = *v17;
    float64x2_t v18 = v17[1];
    if (v18) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v18 + 1, 1uLL, memory_order_relaxed);
    }
  }
  uint64_t v21 = (std::__shared_weak_count *)a1->n128_u64[1];
  a1->n128_u64[0] = (unint64_t)v19;
  a1->n128_u64[1] = (unint64_t)v18;
  if (v21)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v21);
    float64x2_t v19 = (int **)a1->n128_u64[0];
  }
  geom::merge_convex_hulls<float>((uint64_t *)a1[7].n128_u64[0], (uint64_t)(a1[7].n128_u64[1] - a1[7].n128_u64[0]) >> 4, (uint64_t)(v19 + 6), v19 + 9, a1[4].n128_u32[0], a1[4].n128_f32[1]);
  return geom::cluster<float>::compute_concavity((uint64_t)a1);
}

void geom::cluster<float>::merge_into(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  float32x4_t v8 = (char **)(a1 + 112);
  float32x4_t v9 = (uint64_t *)(a2 + 112);
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::reserve((char **)(a1 + 112), ((uint64_t)(*(void *)(a2 + 120) - *(void *)(a2 + 112)) >> 4)+ ((uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 4));
  std::vector<unsigned long long>::reserve((void **)(a1 + 88), ((*(v9 - 2) - *(v9 - 3)) >> 3) + ((uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 3));
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::back_insert_iterator<std::vector<std::shared_ptr<geom::convex_mesh<float>>>>,0>(*v9, v9[1], v8);
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>,std::back_insert_iterator<std::vector<unsigned long long>>,0>((void *)*(v9 - 3), (void *)*(v9 - 2), a1 + 88);
  *(v9 - 2) = *(v9 - 3);
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__clear[abi:nn180100](v9);
  long long v10 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  float v11 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v11);
    if (*(void *)a1) {
      goto LABEL_12;
    }
  }
  else if ((void)v10)
  {
    goto LABEL_12;
  }
  unint64_t add = atomic_fetch_add((atomic_uint *volatile)a4, 1u);
  uint64_t v13 = *(void *)(a4 + 8);
  if (add >= (*(void *)(a4 + 16) - v13) >> 4)
  {
    int64x2_t v15 = (int **)operator new(0x80uLL);
    v15[1] = 0;
    v15[2] = 0;
    _OWORD v15[4] = (int *)vdup_n_s32(0x7FC00000u);
    uint64_t v16 = v15 + 4;
    uint64_t *v15 = (int *)&unk_26EA059A0;
    v15[5] = 0;
    *(void *)&long long v17 = 0x7F0000007FLL;
    *((void *)&v17 + 1) = 0x7F0000007FLL;
    *((int32x4_t *)v15 + 3) = vdupq_n_s32(0x7F800000u);
    *((_OWORD *)v15 + 4) = v17;
    *((_OWORD *)v15 + 5) = 0u;
    *((_OWORD *)v15 + 6) = 0u;
    *((_OWORD *)v15 + 7) = 0u;
  }
  else
  {
    uint64_t v14 = (int ***)(v13 + 16 * add);
    uint64_t v16 = *v14;
    int64x2_t v15 = v14[1];
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
    }
  }
  float64x2_t v18 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v15;
  if (v18)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v18);
    uint64_t v16 = *(int ***)a1;
  }
  geom::merge_convex_hulls<float>(*(uint64_t **)(a1 + 112), (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 4, (uint64_t)(v16 + 6), v16 + 9, *(_DWORD *)(a1 + 64), *(float *)(a1 + 68));
LABEL_12:
  *(float32x2_t *)(a1 + 16) = vadd_f32(*(float32x2_t *)(a2 + 16), *(float32x2_t *)(a1 + 16));
  float32x4_t v19 = *(float32x4_t *)(a1 + 32);
  float32x4_t v20 = *(float32x4_t *)(a1 + 48);
  v19.i32[3] = 0;
  float32x4_t v21 = *(float32x4_t *)(a2 + 32);
  v21.i32[3] = 0;
  *(float32x4_t *)(a1 + 32) = vminnmq_f32(v19, v21);
  float32x4_t v22 = *(float32x4_t *)(a2 + 48);
  v20.i32[3] = 0;
  v22.i32[3] = 0;
  *(float32x4_t *)(a1 + 48) = vmaxnmq_f32(v20, v22);
  geom::cluster<float>::compute_concavity(a1);
  geom::cluster<float>::deinit(a2, (void *)a4);
}

void geom::cluster<float>::deinit(uint64_t a1, void *a2)
{
  *(int32x2_t *)(a1 + 16) = vdup_n_s32(0x7FC00000u);
  *(_DWORD *)(a1 + 24) = 2143289344;
  *(void *)&long long v4 = 0x7F0000007FLL;
  *((void *)&v4 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(a1 + 32) = vdupq_n_s32(0x7F800000u);
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a1 + 72) = 0;
  *(void *)(a1 + 80) = 0;
  uint64_t v5 = *(void *)(a1 + 112);
  uint64_t v6 = *(void *)(a1 + 120);
  while (v5 != v6)
  {
    uint64_t v7 = *(std::__shared_weak_count **)(v6 - 8);
    if (v7)
    {
      if (v7->__shared_owners_
        || (geom::convex_mesh_cache<float>::move_unused_data(a2, v6 - 16),
            uint64_t v6 = *(void *)(a1 + 120),
            (uint64_t v7 = *(std::__shared_weak_count **)(v6 - 8)) != 0))
      {
        std::__shared_weak_count::__release_shared[abi:nn180100](v7);
      }
    }
    v6 -= 16;
    *(void *)(a1 + 120) = v6;
    uint64_t v5 = *(void *)(a1 + 112);
  }
  float32x4_t v8 = *(std::__shared_weak_count **)(a1 + 8);
  if (v8)
  {
    if (v8->__shared_owners_)
    {
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
LABEL_13:
      std::__shared_weak_count::__release_shared[abi:nn180100](v8);
      goto LABEL_14;
    }
    geom::convex_mesh_cache<float>::move_unused_data(a2, a1);
    float32x4_t v8 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    if (v8) {
      goto LABEL_13;
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
LABEL_14:
  *(void *)(a1 + 96) = *(void *)(a1 + 88);
  *(_WORD *)(a1 + 136) = 0;
}

int32x4_t geom::convex_mesh_cache<float>::move_unused_data(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  unint64_t v5 = v6;
  uint64_t v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[1];
    uint64_t v10 = ((uint64_t)v7 - v9) >> 4;
    if ((unint64_t)(v10 + 1) >> 60) {
      abort();
    }
    uint64_t v11 = v5 - v9;
    uint64_t v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v29 = v4;
    uint64_t v14 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v13);
    uint64_t v16 = &v14[16 * v10];
    *(_OWORD *)uint64_t v16 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    float64x2_t v18 = (void *)a1[1];
    long long v17 = (void *)a1[2];
    if (v17 == v18)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v17);
      float32x4_t v19 = &v14[16 * v10];
    }
    else
    {
      float32x4_t v19 = &v14[16 * v10];
      do
      {
        long long v20 = *((_OWORD *)v17 - 1);
        v17 -= 2;
        *((_OWORD *)v19 - 1) = v20;
        v19 -= 16;
        *long long v17 = 0;
        v17[1] = 0;
      }
      while (v17 != v18);
      int64x2_t v21 = *(int64x2_t *)(a1 + 1);
    }
    float32x4_t v8 = v16 + 16;
    a1[1] = v19;
    a1[2] = v16 + 16;
    int64x2_t v27 = v21;
    uint64_t v22 = a1[3];
    a1[3] = &v14[16 * v15];
    uint64_t v28 = v22;
    uint64_t v26 = v21.i64[0];
    std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((void **)&v26);
  }
  else
  {
    *uint64_t v7 = *(_OWORD *)a2;
    float32x4_t v8 = v7 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  a1[2] = v8;
  uint64_t v23 = *((void *)v8 - 2);
  *(void *)(v23 + 56) = *(void *)(v23 + 48);
  *(void *)(v23 + 80) = *(void *)(v23 + 72);
  *(int32x2_t *)uint64_t v23 = vdup_n_s32(0x7FC00000u);
  int32x4_t result = vdupq_n_s32(0x7F800000u);
  *(void *)&long long v25 = 0x7F0000007FLL;
  *((void *)&v25 + 1) = 0x7F0000007FLL;
  *(int32x4_t *)(v23 + 16) = result;
  *(_OWORD *)(v23 + 32) = v25;
  return result;
}

void geom::cluster<float>::evaluate()
{
}

uint64_t geom::cluster<float>::initialized(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 136);
}

float geom::cluster<float>::concavity(uint64_t a1)
{
  return *(float *)(a1 + 24);
}

float geom::cluster<float>::component_volume(uint64_t a1)
{
  return *(float *)(a1 + 16);
}

float geom::cluster<float>::component_surface_area(uint64_t a1)
{
  return *(float *)(a1 + 20);
}

uint64_t geom::cluster<float>::boundary_components(uint64_t a1)
{
  return a1 + 112;
}

uint64_t geom::cluster<float>::interior_components(uint64_t a1)
{
  return a1 + 88;
}

uint64_t geom::cluster<float>::grid(uint64_t a1)
{
  return *(void *)(a1 + 72);
}

uint64_t geom::cluster<float>::winding_number_handle(uint64_t a1)
{
  return *(void *)(a1 + 80);
}

uint64_t geom::cluster<float>::max_cluster_hull_vertices(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

float geom::cluster<float>::cluster_hull_coplanarity_tolerance(uint64_t a1)
{
  return *(float *)(a1 + 68);
}

uint64_t geom::cluster<float>::boundary_component_count(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 120) - *(void *)(a1 + 112)) >> 4;
}

uint64_t geom::cluster<float>::interior_component_count(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 3;
}

void *geom::cluster<float>::convex_hull@<X0>(void *result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = result[1];
  *a2 = *result;
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

BOOL geom::cluster<float>::find_implicit_surface_crossings(uint64_t a1, void *a2, int a3, void **a4, uint32x4_t a5)
{
  uint64_t v7 = 0;
  unsigned int v8 = 0;
  uint64_t v60 = *MEMORY[0x263EF8340];
  uint64_t v9 = *(float32x4_t **)(a1 + 72);
  uint32x4_t v10 = vcgeq_u32(a5, (uint32x4_t)vdupq_n_s32(v9->i32[1] - 1));
  v10.i32[3] = v10.i32[2];
  unsigned int v11 = vmaxvq_u32(v10);
  do
  {
    if ((v11 & 0x80000000) != 0)
    {
      int v13 = 0;
    }
    else
    {
      int32x4_t v12 = vaddq_s32(xmmword_236F18BD0[v7], (int32x4_t)a5);
      int v13 = *(unsigned __int8 *)(*a2
                               + ((unint64_t)v12.u32[1] << v9->i32[0])
                               + v12.u32[0]
                               + ((unint64_t)v12.u32[2] << (2 * v9->i8[0])));
    }
    v8 |= (v13 << v7++);
  }
  while (v7 != 8);
  if (v8 - 1 < 0xFE)
  {
    uint64_t v14 = 0;
    float32x4_t v15 = v9[1];
    float32x4_t v16 = vmlaq_f32(v9[2], vcvtq_f32_u32(a5), v15);
    int8x16_t v17 = (int8x16_t)vaddq_f32(v15, v16);
    uint64_t v54 = (uint64_t)(a4 + 2);
    int8x16_t v55 = v17;
    float32x4_t v56 = v16;
    do
    {
      int32x4_t v18 = vnegq_s32(xmmword_236F18BD0[v14]);
      v18.i32[3] = 0;
      int8x16_t v19 = vbslq_s8((int8x16_t)vcltzq_s32(v18), v17, (int8x16_t)v16);
      v59[v14] = (float32x4_t)v19;
      if ((v8 >> v14))
      {
        int64x2_t v21 = (int8x16_t *)a4[1];
        unint64_t v20 = (unint64_t)a4[2];
        if ((unint64_t)v21 >= v20)
        {
          uint64_t v23 = ((char *)v21 - (unsigned char *)*a4) >> 4;
          if ((unint64_t)(v23 + 1) >> 60) {
LABEL_56:
          }
            abort();
          uint64_t v24 = v20 - (void)*a4;
          uint64_t v25 = v24 >> 3;
          if (v24 >> 3 <= (unint64_t)(v23 + 1)) {
            uint64_t v25 = v23 + 1;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v26 = v25;
          }
          if (v26)
          {
            int8x16_t v57 = v19;
            int64x2_t v27 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v54, v26);
            int8x16_t v19 = v57;
          }
          else
          {
            int64x2_t v27 = 0;
          }
          uint64_t v28 = (int8x16_t *)&v27[16 * v23];
          *uint64_t v28 = v19;
          uint64_t v22 = v28 + 1;
          float64x2_t v30 = (int8x16_t *)*a4;
          uint64_t v29 = (int8x16_t *)a4[1];
          if (v29 != *a4)
          {
            do
            {
              int8x16_t v31 = v29[-1];
              --v29;
              v28[-1] = v31;
              --v28;
            }
            while (v29 != v30);
            uint64_t v29 = (int8x16_t *)*a4;
          }
          *a4 = v28;
          a4[1] = v22;
          a4[2] = &v27[16 * v26];
          if (v29) {
            operator delete(v29);
          }
          int8x16_t v17 = v55;
          float32x4_t v16 = v56;
        }
        else
        {
          *int64x2_t v21 = v19;
          uint64_t v22 = v21 + 1;
        }
        a4[1] = v22;
      }
      ++v14;
    }
    while (v14 != 8);
    for (uint64_t i = 0; i != 12; ++i)
    {
      long long v33 = (unsigned __int8 *)&unk_236F18C50 + 2 * i;
      int v34 = *v33;
      int v35 = v33[1];
      int v36 = (1 << v34) & v8;
      if ((v36 != 0) == (((v8 >> v35) & 1) == 0))
      {
        BOOL v37 = v36 == 0;
        if (v36) {
          int v38 = v34;
        }
        else {
          int v38 = v35;
        }
        if (!v37) {
          int v34 = v35;
        }
        v39.i64[0] = 0x3F0000003F000000;
        v39.i64[1] = 0x3F0000003F000000;
        float32x4_t v40 = vmulq_f32(vaddq_f32(v59[v38], v59[v34]), v39);
        if (a3) {
          geom::query_approximate_winding_number_3<float>();
        }
        float64x2_t v42 = (float32x4_t *)a4[1];
        unint64_t v41 = (unint64_t)a4[2];
        if ((unint64_t)v42 >= v41)
        {
          uint64_t v44 = ((char *)v42 - (unsigned char *)*a4) >> 4;
          if ((unint64_t)(v44 + 1) >> 60) {
            goto LABEL_56;
          }
          uint64_t v45 = v41 - (void)*a4;
          uint64_t v46 = v45 >> 3;
          if (v45 >> 3 <= (unint64_t)(v44 + 1)) {
            uint64_t v46 = v44 + 1;
          }
          if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v47 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v47 = v46;
          }
          if (v47)
          {
            float32x4_t v58 = v40;
            uint64_t v48 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v54, v47);
            float32x4_t v40 = v58;
          }
          else
          {
            uint64_t v48 = 0;
          }
          uint64_t v49 = (float32x4_t *)&v48[16 * v44];
          *uint64_t v49 = v40;
          f32 = (_OWORD *)v49[1].f32;
          uint64_t v51 = (float32x4_t *)*a4;
          uint64_t v50 = (float32x4_t *)a4[1];
          if (v50 != *a4)
          {
            do
            {
              float32x4_t v52 = v50[-1];
              --v50;
              v49[-1] = v52;
              --v49;
            }
            while (v50 != v51);
            uint64_t v50 = (float32x4_t *)*a4;
          }
          *a4 = v49;
          a4[1] = f32;
          a4[2] = &v48[16 * v47];
          if (v50) {
            operator delete(v50);
          }
        }
        else
        {
          *float64x2_t v42 = v40;
          f32 = (_OWORD *)v42[1].f32;
        }
        a4[1] = f32;
      }
    }
  }
  return v8 != 0;
}

void geom::cluster<float>::find_explicit_surface_crossings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint32x4_t a6)
{
  v23[4] = *MEMORY[0x263EF8340];
  uint32x4_t v10 = *(float32x4_t **)(a1 + 72);
  float32x4_t v11 = v10[1];
  float32x4_t v12 = vmlaq_f32(v10[2], vcvtq_f32_u32(a6), v11);
  __int32 v19 = v12.i32[2];
  float32x4_t v13 = vaddq_f32(v11, v12);
  __int32 v21 = v13.i32[2];
  uint64_t v18 = v12.i64[0];
  uint64_t v20 = v13.i64[0];
  std::vector<int> __p = 0;
  float32x4_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v14 = operator new(0x28uLL);
  *uint64_t v14 = &unk_26EA059F0;
  v14[1] = &v18;
  v14[2] = a5;
  v14[3] = a2;
  v14[4] = a3;
  v23[3] = v14;
  v22[0] = &unk_26EA05A70;
  v22[1] = &v18;
  v22[3] = v22;
  geom::bvh<float,(unsigned char)3>::find_all_intersections(a4, (uint64_t)v23, (uint64_t)v22, (int **)&__p);
  std::__function::__value_func<BOOL ()(geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v22);
  std::__function::__value_func<BOOL ()>::~__value_func[abi:nn180100](v23);
  if (__p)
  {
    float32x4_t v16 = __p;
    operator delete(__p);
  }
}

float geom::cluster<float>::compute_component_volume(void *a1)
{
  std::vector<int> __p = 0;
  int64x2_t v27 = 0;
  uint64_t v28 = 0;
  std::vector<float>::reserve(&__p, (uint64_t)(a1[15] - a1[14]) >> 4);
  uint64_t v2 = (float **)a1[14];
  float v3 = (float **)a1[15];
  if (v2 == v3)
  {
    unsigned int v8 = v27;
  }
  else
  {
    uint64_t v4 = v27;
    do
    {
      unint64_t v5 = *v2;
      float v6 = **v2;
      if (v4 >= v28)
      {
        uint64_t v9 = (float *)__p;
        uint64_t v10 = ((char *)v4 - (unsigned char *)__p) >> 2;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 62) {
          abort();
        }
        uint64_t v12 = (char *)v28 - (unsigned char *)__p;
        if (((char *)v28 - (unsigned char *)__p) >> 1 > v11) {
          unint64_t v11 = v12 >> 1;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v13 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v28, v13);
          uint64_t v9 = (float *)__p;
          uint64_t v4 = v27;
        }
        else
        {
          uint64_t v14 = 0;
        }
        int v15 = 0;
        if (v6 >= 0.0) {
          int v15 = *(_DWORD *)v5;
        }
        float32x4_t v16 = (float *)&v14[4 * v10];
        *(_DWORD *)float32x4_t v16 = v15;
        unsigned int v8 = v16 + 1;
        while (v4 != v9)
        {
          int v17 = *((_DWORD *)v4-- - 1);
          *((_DWORD *)v16-- - 1) = v17;
        }
        std::vector<int> __p = v16;
        int64x2_t v27 = v8;
        uint64_t v28 = (float *)&v14[4 * v13];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        if (v6 >= 0.0) {
          float v7 = **v2;
        }
        else {
          float v7 = 0.0;
        }
        float *v4 = v7;
        unsigned int v8 = v4 + 1;
      }
      int64x2_t v27 = v8;
      v2 += 2;
      uint64_t v4 = v8;
    }
    while (v2 != v3);
  }
  uint64_t v18 = (float *)__p;
  uint64_t v19 = (char *)v8 - (unsigned char *)__p;
  if ((unint64_t)((char *)v8 - (unsigned char *)__p) >= 8)
  {
    uint64_t v20 = v19 >> 2;
    unint64_t v21 = v19 >> 1;
    unint64_t v22 = 2;
    uint64_t v29 = 2;
    uint64_t v23 = MEMORY[0x263EF8330];
    do
    {
      block[0] = v23;
      block[1] = 0x40000000;
      block[2] = ___ZN4geom26dispatch_apply_with_strideIZNS_24parallel_reduce_in_placeIfNS_11plus_equalsIfEEEEvRNSt3__16vectorIT_NS4_9allocatorIS6_EEEEmP16dispatch_queue_sT0_EUlmmE_EEmmmSC_S6__block_invoke;
      block[3] = &__block_descriptor_tmp_20;
      block[4] = 128;
      unint64_t v32 = (v22 + (((char *)v27 - (unsigned char *)__p) >> 2) - 1) / v22;
      long long v33 = &v29;
      uint64_t v34 = v20;
      p_p = &__p;
      int v36 = &v30;
      dispatch_apply((v32 + 127) >> 7, 0, block);
      unint64_t v22 = 2 * v29;
      uint64_t v29 = v22;
    }
    while (v22 < v21);
    uint64_t v18 = (float *)__p;
  }
  float v24 = *v18
      + (float)((float)(*(float *)(a1[9] + 20)
                      * (float)(*(float *)(a1[9] + 16) * (float)(unint64_t)((uint64_t)(a1[12] - a1[11]) >> 3)))
              * *(float *)(a1[9] + 24));
  int64x2_t v27 = v18;
  operator delete(v18);
  return v24;
}

float geom::cluster<float>::compute_component_surface_area(void *a1)
{
  std::vector<int> __p = 0;
  uint64_t v25 = 0;
  unint64_t v26 = 0;
  std::vector<float>::reserve(&__p, (uint64_t)(a1[15] - a1[14]) >> 4);
  uint64_t v2 = (uint64_t *)a1[14];
  float v3 = (uint64_t *)a1[15];
  if (v2 == v3)
  {
    float v6 = v25;
  }
  else
  {
    uint64_t v4 = (char *)v25;
    do
    {
      uint64_t v5 = *v2;
      if (v4 >= v26)
      {
        float v7 = (char *)__p;
        uint64_t v8 = (v4 - (unsigned char *)__p) >> 2;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 62) {
          abort();
        }
        uint64_t v10 = v26 - (unsigned char *)__p;
        if ((v26 - (unsigned char *)__p) >> 1 > v9) {
          unint64_t v9 = v10 >> 1;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          uint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&v26, v11);
          float v7 = (char *)__p;
          uint64_t v4 = (char *)v25;
        }
        else
        {
          uint64_t v12 = 0;
        }
        unint64_t v13 = &v12[4 * v8];
        *(_DWORD *)unint64_t v13 = *(_DWORD *)(v5 + 4);
        float v6 = (float *)(v13 + 4);
        while (v4 != v7)
        {
          int v14 = *((_DWORD *)v4 - 1);
          v4 -= 4;
          *((_DWORD *)v13 - 1) = v14;
          v13 -= 4;
        }
        std::vector<int> __p = v13;
        uint64_t v25 = v6;
        unint64_t v26 = &v12[4 * v11];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v4 = *(_DWORD *)(v5 + 4);
        float v6 = (float *)(v4 + 4);
      }
      uint64_t v25 = v6;
      v2 += 2;
      uint64_t v4 = (char *)v6;
    }
    while (v2 != v3);
  }
  int v15 = (float *)__p;
  uint64_t v16 = (char *)v6 - (unsigned char *)__p;
  if ((unint64_t)((char *)v6 - (unsigned char *)__p) >= 8)
  {
    uint64_t v17 = v16 >> 2;
    unint64_t v18 = v16 >> 1;
    unint64_t v19 = 2;
    uint64_t v27 = 2;
    uint64_t v20 = MEMORY[0x263EF8330];
    do
    {
      block[0] = v20;
      block[1] = 0x40000000;
      block[2] = ___ZN4geom26dispatch_apply_with_strideIZNS_24parallel_reduce_in_placeIfNS_11plus_equalsIfEEEEvRNSt3__16vectorIT_NS4_9allocatorIS6_EEEEmP16dispatch_queue_sT0_EUlmmE_EEmmmSC_S6__block_invoke;
      block[3] = &__block_descriptor_tmp_20;
      block[4] = 128;
      unint64_t v30 = (v19 + (((char *)v25 - (unsigned char *)__p) >> 2) - 1) / v19;
      int8x16_t v31 = &v27;
      uint64_t v32 = v17;
      p_p = &__p;
      uint64_t v34 = &v28;
      dispatch_apply((v30 + 127) >> 7, 0, block);
      unint64_t v19 = 2 * v27;
      uint64_t v27 = v19;
    }
    while (v19 < v18);
    int v15 = (float *)__p;
  }
  float32x4_t v21 = vmulq_f32(*(float32x4_t *)(a1[9] + 16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)(a1[9] + 16), *(int32x4_t *)(a1[9] + 16)), *(int8x16_t *)(a1[9] + 16), 0xCuLL));
  float v22 = vmlas_n_f32(*v15, (float)(unint64_t)((uint64_t)(a1[12] - a1[11]) >> 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v21, 2), vaddq_f32(v21, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v21.f32, 1))).f32[0]);
  uint64_t v25 = v15;
  operator delete(v15);
  return v22;
}

void geom::cluster<double>::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, atomic_uint *a7, int a8, double a9, int a10)
{
  float64x2_t v42 = 0;
  uint64_t v43 = a7;
  *(unsigned char *)(a1 + 192) = 1;
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 136) = a3;
  long long v15 = *(_OWORD *)(a2 + 96);
  long long v17 = *(_OWORD *)(a2 + 48);
  long long v16 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v15;
  *(_OWORD *)(a1 + 48) = v17;
  *(_OWORD *)(a1 + 64) = v16;
  *(_DWORD *)(a1 + 112) = a10;
  *(double *)(a1 + 120) = a9;
  int v18 = *(_DWORD *)(a2 + 4);
  size_t v19 = (v18 * v18 * v18);
  std::vector<int> __p = 0;
  unint64_t v41 = 0;
  if (v19)
  {
    uint64_t v20 = (char *)operator new((v18 * v18 * v18));
    float32x4_t v21 = &v20[v19];
    std::vector<int> __p = v20;
    float64x2_t v42 = &v20[v19];
    bzero(v20, v19);
    unint64_t v41 = v21;
  }
  block = (void **)MEMORY[0x263EF8330];
  uint64_t v45 = 0x40000000;
  uint64_t v46 = ___ZN4geom26dispatch_apply_with_strideIZNS_7clusterIdE4initEPKNS_10voxel_gridIdEEPvRKNSt3__16vectorIDv3_dNS8_9allocatorISA_EEEERKNS9_IjNSB_IjEEEERKNS_3bvhIdLh3EEEPNS_17convex_mesh_cacheIdEEjjdEUlmE_EEmmmP16dispatch_queue_sT__block_invoke;
  unint64_t v47 = &__block_descriptor_tmp_21;
  uint64_t v48 = 1024;
  size_t v49 = v19;
  uint64_t v50 = a1;
  p_p = &__p;
  dispatch_apply((v19 + 1023) >> 10, 0, &block);
  BOOL v37 = 0;
  int v38 = 0;
  uint64_t v39 = 0;
  if (v19) {
    _ZNSt3__16vectorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS0_IDv3_fNS_9allocatorIS9_EEEERKNS0_IjNSA_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextNSA_ISQ_EEE6resizeEm((uint64_t *)&v37, (v19 + 1023) >> 10);
  }
  block = (void **)MEMORY[0x263EF8330];
  uint64_t v45 = 0x40000000;
  uint64_t v46 = ___ZN4geom26dispatch_apply_with_strideIZNS_7clusterIdE4initEPKNS_10voxel_gridIdEEPvRKNSt3__16vectorIDv3_dNS8_9allocatorISA_EEEERKNS9_IjNSB_IjEEEERKNS_3bvhIdLh3EEEPNS_17convex_mesh_cacheIdEEjjdEUlmRZNS2_4initES6_S7_SF_SJ_SN_SQ_jjdE18voxel_init_contextE_SR_EEmmmP16dispatch_queue_sRNS9_IT0_NSB_ISW_EEEET__block_invoke;
  unint64_t v47 = &__block_descriptor_tmp_23;
  uint64_t v48 = 1024;
  size_t v49 = v19;
  uint64_t v50 = a1;
  p_p = &__p;
  uint64_t v52 = a4;
  uint64_t v53 = a5;
  uint64_t v54 = a6;
  int8x16_t v55 = &v43;
  int v56 = a8;
  int8x16_t v57 = (uint64_t *)&v37;
  dispatch_apply((v19 + 1023) >> 10, 0, &block);
  float v22 = v37;
  if (v37 == v38)
  {
    unint64_t v24 = 0;
    unint64_t v23 = 0;
  }
  else
  {
    unint64_t v23 = 0;
    unint64_t v24 = 0;
    do
    {
      v23 += (uint64_t)(v22[1] - *v22) >> 3;
      v24 += (uint64_t)(v22[4] - v22[3]) >> 4;
      v22 += 12;
    }
    while (v22 != v38);
  }
  std::vector<unsigned long long>::reserve((void **)(a1 + 144), v23);
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::reserve((char **)(a1 + 168), v24);
  uint64_t v25 = (uint64_t)v37;
  unint64_t v26 = v38;
  while ((void *)v25 != v26)
  {
    std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>,std::back_insert_iterator<std::vector<unsigned long long>>,0>(*(void **)v25, *(void **)(v25 + 8), a1 + 144);
    uint64_t v27 = *(long long **)(v25 + 24);
    char v28 = *(long long **)(v25 + 32);
    while (v27 != v28)
      std::vector<std::shared_ptr<geom::convex_mesh<float>>>::push_back[abi:nn180100]((char **)(a1 + 168), v27++);
    v25 += 96;
  }
  unint64_t v30 = v43;
  unint64_t add = atomic_fetch_add(v43, 1u);
  uint64_t v31 = *((void *)v30 + 1);
  if (add >= (*((void *)v30 + 2) - v31) >> 4)
  {
    long long v33 = (int64x2_t *)operator new(0xA0uLL);
    v33->i64[1] = 0;
    v33[1].i64[0] = 0;
    v33->i64[0] = (uint64_t)&unk_26EA05B00;
    v33[2] = vdupq_n_s64(0x7FF8000000000000uLL);
    uint64_t v34 = (int **)&v33[2];
    v35.i64[0] = 0x7FF0000000000000;
    v33[3] = vdupq_n_s64(0x7FF0000000000000uLL);
    v33[4] = v35;
    v35.i64[0] = 0xFFF0000000000000;
    v33[5] = vdupq_n_s64(0xFFF0000000000000);
    v33[6] = v35;
    v33[7] = 0u;
    v33[8] = 0u;
    v33[9] = 0u;
  }
  else
  {
    uint64_t v32 = (int ***)(v31 + 16 * add);
    uint64_t v34 = *v32;
    long long v33 = (int64x2_t *)v32[1];
    if (v33) {
      atomic_fetch_add_explicit(&v33->i64[1], 1uLL, memory_order_relaxed);
    }
  }
  int v36 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v34;
  *(void *)(a1 + 8) = v33;
  if (v36)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v36);
    uint64_t v34 = *(int ***)a1;
  }
  geom::merge_convex_hulls<double>(*(uint64_t **)(a1 + 168), (uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4, (uint64_t)(v34 + 10), v34 + 13, *(_DWORD *)(a1 + 112), *(double *)(a1 + 120));
  geom::cluster<double>::compute_concavity(a1);
  block = (void **)&v37;
  _ZNSt3__16vectorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS0_IDv3_fNS_9allocatorIS9_EEEERKNS0_IjNSA_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextNSA_ISQ_EEE16__destroy_vectorclB8nn180100Ev(&block);
  if (__p)
  {
    unint64_t v41 = __p;
    operator delete(__p);
  }
}

void geom::merge_convex_hulls<double>(uint64_t *a1, uint64_t a2, uint64_t a3, int **a4, unsigned int a5, double a6)
{
  if (a2)
  {
    unint64_t v11 = a1;
    unint64_t v12 = 0;
    uint64_t v13 = 16 * a2;
    uint64_t v14 = 16 * a2;
    long long v15 = a1;
    do
    {
      uint64_t v16 = *v15;
      v15 += 2;
      v12 += (uint64_t)(*(void *)(v16 + 88) - *(void *)(v16 + 80)) >> 5;
      v14 -= 16;
    }
    while (v14);
    *(void *)(a3 + 8) = *(void *)a3;
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm((void **)a3, v12);
    do
    {
      uint64_t v17 = *v11;
      v11 += 2;
      _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE18__insert_with_sizeB8nn180100INS_11__wrap_iterIPS1_EES8_EES8_NS6_IPKS1_EET_T0_l(a3, *(void *)(a3 + 8), *(char **)(v17 + 80), *(char **)(v17 + 88), (uint64_t)(*(void *)(v17 + 88) - *(void *)(v17 + 80)) >> 5);
      v13 -= 16;
    }
    while (v13);
    v20[0] = 0;
    v20[1] = 0;
    uint64_t v21 = 0;
    memset(&__p, 0, sizeof(__p));
    geom::convex_hull_triangulated_3<double>((uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 5, *(float64x2_t **)a3, a4, a5, a6);
    geom::crunch_triangle_mesh<double>((uint64_t *)a3, (char **)v20, a4, &__p);
    int v18 = *(float64x2_t **)a3;
    if (*(void *)a3)
    {
      *(void *)(a3 + 8) = v18;
      operator delete(v18);
    }
    *(_OWORD *)a3 = *(_OWORD *)v20;
    *(void *)(a3 + 16) = v21;
    v20[1] = 0;
    uint64_t v21 = 0;
    v20[0] = 0;
    if (__p.__begin_)
    {
      __p.__end_ = __p.__begin_;
      operator delete(__p.__begin_);
      if (v20[0])
      {
        v20[1] = v20[0];
        operator delete(v20[0]);
      }
    }
  }
  else
  {
    *(void *)(a3 + 8) = *(void *)a3;
    a4[1] = *a4;
  }
}

uint64_t geom::cluster<double>::compute_concavity(uint64_t result)
{
  v1 = *(double **)result;
  int8x16_t v2 = (int8x16_t)vcgtq_f64(*(float64x2_t *)(v1 + 4), *(float64x2_t *)(v1 + 8));
  int64x2_t v3 = vcgtq_f64(*(float64x2_t *)(v1 + 2), *(float64x2_t *)(v1 + 6));
  float64x2_t v4 = (float64x2_t)vorrq_s8((int8x16_t)vdupq_laneq_s64(v3, 1), vorrq_s8(v2, (int8x16_t)v3));
  if ((*(void *)&v4.f64[0] & 0x8000000000000000) != 0)
  {
    double v5 = *v1;
    if (*v1 <= 2.22044605e-16) {
      goto LABEL_10;
    }
    float v6 = (float64x2_t *)*((void *)v1 + 10);
    uint64_t v7 = *((void *)v1 + 11) - (void)v6;
    if (v7)
    {
      v2.i64[0] = 0x7FF0000000000000;
      v4.f64[0] = -INFINITY;
      float64x2_t v8 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v9 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      uint64_t v10 = 32 * (v7 >> 5);
      do
      {
        float64x2_t v11 = *v6;
        float64x2_t v12 = v6[1];
        v6 += 2;
        float64x2_t v8 = vminnmq_f64(v11, v8);
        int8x16_t v2 = (int8x16_t)vminnmq_f64((float64x2_t)*(unint64_t *)&v12.f64[0], (float64x2_t)v2.u64[0]);
        float64x2_t v9 = vmaxnmq_f64(v11, v9);
        float64x2_t v4 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v12.f64[0], (float64x2_t)*(unint64_t *)&v4.f64[0]);
        v10 -= 32;
      }
      while (v10);
    }
    else
    {
      v4.f64[0] = -INFINITY;
      v2.i64[0] = 0x7FF0000000000000;
      float64x2_t v9 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      float64x2_t v8 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    }
    *((float64x2_t *)v1 + 1) = v8;
    *((int8x16_t *)v1 + 2) = v2;
    *((float64x2_t *)v1 + 3) = v9;
    *((float64x2_t *)v1 + 4) = v4;
    v1 = *(double **)result;
  }
  double v5 = *v1;
LABEL_10:
  uint64_t v13 = (double *)(result + 16);
  if (v5 <= 0.0)
  {
    *uint64_t v13 = 0.0;
    *(void *)(result + 24) = 0;
    *(void *)(result + 32) = 0;
  }
  else
  {
    double v14 = **(double **)result - *v13;
    if (v14 < 0.0) {
      double v14 = 0.0;
    }
    *(double *)(result + 32) = v14;
  }
  *(unsigned char *)(result + 193) = 1;
  return result;
}

uint64_t geom::cluster<double>::init(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 *__c, uint64_t a6, long long *a7, int a8, double a9)
{
  *(void *)(a1 + 128) = a2;
  *(void *)(a1 + 136) = a3;
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE13__move_assignERS4_NS_17integral_constantIbLb1EEE(a1 + 144, __c);
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate((uint64_t *)(a1 + 168));
  *(_OWORD *)(a1 + 168) = *(_OWORD *)a6;
  *(void *)(a1 + 184) = *(void *)(a6 + 16);
  *(void *)a6 = 0;
  *(void *)(a6 + 8) = 0;
  *(void *)(a6 + 16) = 0;
  *(_DWORD *)(a1 + 112) = a8;
  *(double *)(a1 + 120) = a9;
  long long v15 = *a7;
  long long v16 = a7[1];
  long long v17 = a7[3];
  *(_OWORD *)(a1 + 80) = a7[2];
  *(_OWORD *)(a1 + 96) = v17;
  *(_OWORD *)(a1 + 48) = v15;
  *(_OWORD *)(a1 + 64) = v16;
  *(unsigned char *)(a1 + 192) = 1;
  unint64_t add = atomic_fetch_add((atomic_uint *volatile)a4, 1u);
  uint64_t v19 = *(void *)(a4 + 8);
  if (add >= (*(void *)(a4 + 16) - v19) >> 4)
  {
    uint64_t v21 = (int64x2_t *)operator new(0xA0uLL);
    v21->i64[1] = 0;
    v21[1].i64[0] = 0;
    v21->i64[0] = (uint64_t)&unk_26EA05B00;
    v21[2] = vdupq_n_s64(0x7FF8000000000000uLL);
    float v22 = (int **)&v21[2];
    v23.i64[0] = 0x7FF0000000000000;
    v21[3] = vdupq_n_s64(0x7FF0000000000000uLL);
    v21[4] = v23;
    v23.i64[0] = 0xFFF0000000000000;
    v21[5] = vdupq_n_s64(0xFFF0000000000000);
    v21[6] = v23;
    v21[7] = 0u;
    v21[8] = 0u;
    v21[9] = 0u;
  }
  else
  {
    uint64_t v20 = (int ***)(v19 + 16 * add);
    float v22 = *v20;
    uint64_t v21 = (int64x2_t *)v20[1];
    if (v21) {
      atomic_fetch_add_explicit(&v21->i64[1], 1uLL, memory_order_relaxed);
    }
  }
  unint64_t v24 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v22;
  *(void *)(a1 + 8) = v21;
  if (v24)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v24);
    float v22 = *(int ***)a1;
  }
  geom::merge_convex_hulls<double>(*(uint64_t **)(a1 + 168), (uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4, (uint64_t)(v22 + 10), v22 + 13, *(_DWORD *)(a1 + 112), *(double *)(a1 + 120));
  return geom::cluster<double>::compute_concavity(a1);
}

void geom::cluster<double>::merge_into(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  float64x2_t v8 = (char **)(a1 + 168);
  float64x2_t v9 = (uint64_t *)(a2 + 168);
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::reserve((char **)(a1 + 168), ((uint64_t)(*(void *)(a2 + 176) - *(void *)(a2 + 168)) >> 4)+ ((uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4));
  std::vector<unsigned long long>::reserve((void **)(a1 + 144), ((*(v9 - 2) - *(v9 - 3)) >> 3) + ((uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3));
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::back_insert_iterator<std::vector<std::shared_ptr<geom::convex_mesh<float>>>>,0>(*v9, v9[1], v8);
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>,std::back_insert_iterator<std::vector<unsigned long long>>,0>((void *)*(v9 - 3), (void *)*(v9 - 2), a1 + 144);
  *(v9 - 2) = *(v9 - 3);
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__clear[abi:nn180100](v9);
  long long v10 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  float64x2_t v11 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v10;
  if (v11)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v11);
    if (*(void *)a1) {
      goto LABEL_12;
    }
  }
  else if ((void)v10)
  {
    goto LABEL_12;
  }
  unint64_t add = atomic_fetch_add((atomic_uint *volatile)a4, 1u);
  uint64_t v13 = *(void *)(a4 + 8);
  if (add >= (*(void *)(a4 + 16) - v13) >> 4)
  {
    long long v15 = (int64x2_t *)operator new(0xA0uLL);
    v15->i64[1] = 0;
    v15[1].i64[0] = 0;
    v15->i64[0] = (uint64_t)&unk_26EA05B00;
    v15[2] = vdupq_n_s64(0x7FF8000000000000uLL);
    long long v16 = (int **)&v15[2];
    v17.i64[0] = 0x7FF0000000000000;
    v15[3] = vdupq_n_s64(0x7FF0000000000000uLL);
    _OWORD v15[4] = v17;
    v17.i64[0] = 0xFFF0000000000000;
    v15[5] = vdupq_n_s64(0xFFF0000000000000);
    v15[6] = v17;
    v15[7] = 0u;
    v15[8] = 0u;
    v15[9] = 0u;
  }
  else
  {
    double v14 = (int ***)(v13 + 16 * add);
    long long v16 = *v14;
    long long v15 = (int64x2_t *)v14[1];
    if (v15) {
      atomic_fetch_add_explicit(&v15->i64[1], 1uLL, memory_order_relaxed);
    }
  }
  int v18 = *(std::__shared_weak_count **)(a1 + 8);
  *(void *)a1 = v16;
  *(void *)(a1 + 8) = v15;
  if (v18)
  {
    std::__shared_weak_count::__release_shared[abi:nn180100](v18);
    long long v16 = *(int ***)a1;
  }
  geom::merge_convex_hulls<double>(*(uint64_t **)(a1 + 168), (uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4, (uint64_t)(v16 + 10), v16 + 13, *(_DWORD *)(a1 + 112), *(double *)(a1 + 120));
LABEL_12:
  *(float64x2_t *)(a1 + 16) = vaddq_f64(*(float64x2_t *)(a2 + 16), *(float64x2_t *)(a1 + 16));
  float64x2_t v19 = vminnmq_f64((float64x2_t)*(unint64_t *)(a1 + 64), (float64x2_t)*(unint64_t *)(a2 + 64));
  *(float64x2_t *)(a1 + 48) = vminnmq_f64(*(float64x2_t *)(a1 + 48), *(float64x2_t *)(a2 + 48));
  *(float64x2_t *)(a1 + 64) = v19;
  float64x2_t v20 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(a1 + 96), (float64x2_t)*(unint64_t *)(a2 + 96));
  *(float64x2_t *)(a1 + 80) = vmaxnmq_f64(*(float64x2_t *)(a1 + 80), *(float64x2_t *)(a2 + 80));
  *(float64x2_t *)(a1 + 96) = v20;
  geom::cluster<double>::compute_concavity(a1);
  geom::cluster<double>::deinit(a2, (void *)a4, v21, v22);
}

void geom::cluster<double>::deinit(uint64_t a1, void *a2, double a3, __n128 a4)
{
  *(int64x2_t *)(a1 + 16) = vdupq_n_s64(0x7FF8000000000000uLL);
  *(void *)(a1 + 32) = 0x7FF8000000000000;
  a4.n128_u64[0] = 0x7FF0000000000000;
  *(int64x2_t *)(a1 + 48) = vdupq_n_s64(0x7FF0000000000000uLL);
  *(__n128 *)(a1 + 64) = a4;
  a4.n128_u64[0] = 0xFFF0000000000000;
  *(int64x2_t *)(a1 + 80) = vdupq_n_s64(0xFFF0000000000000);
  *(__n128 *)(a1 + 96) = a4;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  uint64_t v6 = *(void *)(a1 + 168);
  uint64_t v7 = *(void *)(a1 + 176);
  while (v6 != v7)
  {
    float64x2_t v8 = *(std::__shared_weak_count **)(v7 - 8);
    if (v8)
    {
      if (v8->__shared_owners_
        || (geom::convex_mesh_cache<double>::move_unused_data(a2, v7 - 16),
            uint64_t v7 = *(void *)(a1 + 176),
            (float64x2_t v8 = *(std::__shared_weak_count **)(v7 - 8)) != 0))
      {
        std::__shared_weak_count::__release_shared[abi:nn180100](v8);
      }
    }
    v7 -= 16;
    *(void *)(a1 + 176) = v7;
    uint64_t v6 = *(void *)(a1 + 168);
  }
  float64x2_t v9 = *(std::__shared_weak_count **)(a1 + 8);
  if (v9)
  {
    if (v9->__shared_owners_)
    {
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
LABEL_13:
      std::__shared_weak_count::__release_shared[abi:nn180100](v9);
      goto LABEL_14;
    }
    geom::convex_mesh_cache<double>::move_unused_data(a2, a1);
    float64x2_t v9 = *(std::__shared_weak_count **)(a1 + 8);
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    if (v9) {
      goto LABEL_13;
    }
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
LABEL_14:
  *(void *)(a1 + 152) = *(void *)(a1 + 144);
  *(_WORD *)(a1 + 192) = 0;
}

double geom::convex_mesh_cache<double>::move_unused_data(void *a1, uint64_t a2)
{
  unint64_t v6 = a1[3];
  uint64_t v4 = (uint64_t)(a1 + 3);
  unint64_t v5 = v6;
  uint64_t v7 = *(_OWORD **)(v4 - 8);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = a1[1];
    uint64_t v10 = ((uint64_t)v7 - v9) >> 4;
    if ((unint64_t)(v10 + 1) >> 60) {
      abort();
    }
    uint64_t v11 = v5 - v9;
    uint64_t v12 = v11 >> 3;
    if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
      uint64_t v12 = v10 + 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v12;
    }
    uint64_t v29 = v4;
    double v14 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v13);
    long long v16 = &v14[16 * v10];
    *(_OWORD *)long long v16 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    int v18 = (void *)a1[1];
    int64x2_t v17 = (void *)a1[2];
    if (v17 == v18)
    {
      int64x2_t v21 = vdupq_n_s64((unint64_t)v17);
      float64x2_t v19 = &v14[16 * v10];
    }
    else
    {
      float64x2_t v19 = &v14[16 * v10];
      do
      {
        long long v20 = *((_OWORD *)v17 - 1);
        v17 -= 2;
        *((_OWORD *)v19 - 1) = v20;
        v19 -= 16;
        *int64x2_t v17 = 0;
        v17[1] = 0;
      }
      while (v17 != v18);
      int64x2_t v21 = *(int64x2_t *)(a1 + 1);
    }
    float64x2_t v8 = v16 + 16;
    a1[1] = v19;
    a1[2] = v16 + 16;
    int64x2_t v27 = v21;
    uint64_t v22 = a1[3];
    a1[3] = &v14[16 * v15];
    uint64_t v28 = v22;
    uint64_t v26 = v21.i64[0];
    std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((void **)&v26);
  }
  else
  {
    *uint64_t v7 = *(_OWORD *)a2;
    float64x2_t v8 = v7 + 1;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  a1[2] = v8;
  int64x2_t v23 = (int64x2_t *)*((void *)v8 - 2);
  v23[5].i64[1] = v23[5].i64[0];
  v23[7].i64[0] = v23[6].i64[1];
  int64x2_t v24 = vdupq_n_s64(0x7FF8000000000000uLL);
  *int64x2_t v23 = v24;
  v23[1] = vdupq_n_s64(0x7FF0000000000000uLL);
  v24.i64[0] = 0x7FF0000000000000;
  v23[2] = v24;
  v23[3] = vdupq_n_s64(0xFFF0000000000000);
  v24.i64[0] = 0xFFF0000000000000;
  v23[4] = v24;
  return *(double *)v24.i64;
}

void geom::cluster<double>::evaluate()
{
}

uint64_t geom::cluster<double>::initialized(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 192);
}

uint64_t geom::cluster<double>::cluster_bbox(uint64_t a1)
{
  return a1 + 48;
}

double geom::cluster<double>::concavity(uint64_t a1)
{
  return *(double *)(a1 + 32);
}

double geom::cluster<double>::component_surface_area(uint64_t a1)
{
  return *(double *)(a1 + 24);
}

uint64_t geom::cluster<double>::boundary_components(uint64_t a1)
{
  return a1 + 168;
}

uint64_t geom::cluster<double>::interior_components(uint64_t a1)
{
  return a1 + 144;
}

uint64_t geom::cluster<double>::grid(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

uint64_t geom::cluster<double>::max_cluster_hull_vertices(uint64_t a1)
{
  return *(unsigned int *)(a1 + 112);
}

double geom::cluster<double>::cluster_hull_coplanarity_tolerance(uint64_t a1)
{
  return *(double *)(a1 + 120);
}

uint64_t geom::cluster<double>::boundary_component_count(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 176) - *(void *)(a1 + 168)) >> 4;
}

uint64_t geom::cluster<double>::interior_component_count(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 152) - *(void *)(a1 + 144)) >> 3;
}

BOOL geom::cluster<double>::find_implicit_surface_crossings(uint64_t a1, void *a2, int a3, void **a4, uint32x4_t a5, double a6, int8x16_t a7)
{
  uint64_t v8 = 0;
  unsigned int v9 = 0;
  uint64_t v85 = *MEMORY[0x263EF8340];
  uint64_t v10 = *(void *)(a1 + 128);
  uint32x4_t v11 = vcgeq_u32(a5, (uint32x4_t)vdupq_n_s32(*(_DWORD *)(v10 + 4) - 1));
  v11.i32[3] = v11.i32[2];
  unsigned int v12 = vmaxvq_u32(v11);
  do
  {
    if ((v12 & 0x80000000) != 0)
    {
      int v14 = 0;
    }
    else
    {
      int32x4_t v13 = vaddq_s32(xmmword_236F18BD0[v8], (int32x4_t)a5);
      a7.i64[1] = v13.u32[3];
      int v14 = *(unsigned __int8 *)(*a2
                               + ((unint64_t)v13.u32[1] << *(_DWORD *)v10)
                               + v13.u32[0]
                               + ((unint64_t)v13.u32[2] << (2 * *(unsigned char *)v10)));
    }
    v9 |= (v14 << v8++);
  }
  while (v8 != 8);
  if (v9 - 1 < 0xFE)
  {
    uint64_t v15 = 0;
    float64x2_t v16 = *(float64x2_t *)(v10 + 16);
    float64x2_t v17 = *(float64x2_t *)(v10 + 32);
    v18.i64[0] = a5.u32[0];
    v18.i64[1] = a5.u32[1];
    float64x2_t v19 = vcvtq_f64_u64(v18);
    v18.i64[0] = a5.u32[2];
    v18.i64[1] = a5.u32[3];
    float64x2_t v20 = vmlaq_f64(*(float64x2_t *)(v10 + 64), vcvtq_f64_u64(v18), v17);
    float64x2_t v21 = vmlaq_f64(*(float64x2_t *)(v10 + 48), v19, v16);
    uint64_t v72 = (uint64_t)(a4 + 2);
    int8x16_t v22 = (int8x16_t)vdupq_n_s64(0x8000000000000000);
    float64x2_t v78 = v20;
    float64x2_t v79 = v21;
    float64x2_t v76 = v17;
    float64x2_t v77 = v16;
    int8x16_t v74 = v22;
    do
    {
      int32x4_t v23 = vnegq_s32(xmmword_236F18BD0[v15]);
      v24.i64[0] = v23.i32[0];
      v24.i64[1] = v23.i32[1];
      a7.i64[0] = 0x8000000000000000;
      float64x2_t v25 = vaddq_f64(v20, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64((int64x2_t)(unint64_t)v23.i32[2]), (int8x16_t)v17, a7));
      float64x2_t v26 = vaddq_f64(v21, (float64x2_t)vbslq_s8((int8x16_t)vcltzq_s64(v24), (int8x16_t)v16, v22));
      int64x2_t v27 = (float64x2_t *)&v84[2 * v15];
      *int64x2_t v27 = v26;
      v27[1] = v25;
      if ((v9 >> v15))
      {
        uint64_t v29 = (float64x2_t *)a4[1];
        unint64_t v28 = (unint64_t)a4[2];
        if ((unint64_t)v29 >= v28)
        {
          uint64_t v31 = ((char *)v29 - (unsigned char *)*a4) >> 5;
          unint64_t v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 59) {
LABEL_57:
          }
            abort();
          uint64_t v33 = v28 - (void)*a4;
          if (v33 >> 4 > v32) {
            unint64_t v32 = v33 >> 4;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v34 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v32;
          }
          if (v34)
          {
            float64x2_t v80 = v26;
            float64x2_t v82 = v25;
            int64x2_t v35 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v72, v34);
            float64x2_t v26 = v80;
            float64x2_t v25 = v82;
          }
          else
          {
            int64x2_t v35 = 0;
          }
          int v36 = (float64x2_t *)&v35[32 * v31];
          *int v36 = v26;
          v36[1] = v25;
          int v38 = (float64x2_t *)*a4;
          BOOL v37 = (float64x2_t *)a4[1];
          uint64_t v39 = v36;
          if (v37 != *a4)
          {
            do
            {
              float64x2_t v40 = v37[-2];
              float64x2_t v41 = v37[-1];
              v37 -= 2;
              v39[-2] = v40;
              v39[-1] = v41;
              v39 -= 2;
            }
            while (v37 != v38);
            BOOL v37 = (float64x2_t *)*a4;
          }
          f64 = (_OWORD *)v36[2].f64;
          *a4 = v39;
          a4[1] = &v36[2];
          a4[2] = &v35[32 * v34];
          if (v37) {
            operator delete(v37);
          }
          float64x2_t v20 = v78;
          float64x2_t v21 = v79;
          float64x2_t v17 = v76;
          float64x2_t v16 = v77;
          int8x16_t v22 = v74;
        }
        else
        {
          *uint64_t v29 = v26;
          v29[1] = v25;
          f64 = (_OWORD *)v29[2].f64;
        }
        a4[1] = f64;
      }
      ++v15;
    }
    while (v15 != 8);
    uint64_t v42 = 0;
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v75 = _Q0;
    do
    {
      unint64_t v47 = (unsigned __int8 *)&unk_236F18C50 + 2 * v42;
      LODWORD(v48) = *v47;
      unsigned int v49 = v47[1];
      int v50 = (1 << v48) & v9;
      if ((v50 != 0) == (((v9 >> v49) & 1) == 0))
      {
        _ZF = v50 == 0;
        if (v50) {
          uint64_t v52 = v48;
        }
        else {
          uint64_t v52 = v49;
        }
        uint64_t v53 = (float64x2_t *)&v84[2 * v52];
        if (_ZF) {
          uint64_t v48 = v48;
        }
        else {
          uint64_t v48 = v49;
        }
        uint64_t v54 = (float64x2_t *)&v84[2 * v48];
        float64x2_t v55 = vmulq_f64(vaddq_f64(v53[1], v54[1]), v75);
        float64x2_t v56 = vmulq_f64(vaddq_f64(*v53, *v54), v75);
        if (a3) {
          geom::query_approximate_winding_number_3<double>();
        }
        float32x4_t v58 = (float64x2_t *)a4[1];
        unint64_t v57 = (unint64_t)a4[2];
        if ((unint64_t)v58 >= v57)
        {
          uint64_t v60 = ((char *)v58 - (unsigned char *)*a4) >> 5;
          unint64_t v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 59) {
            goto LABEL_57;
          }
          uint64_t v62 = v57 - (void)*a4;
          if (v62 >> 4 > v61) {
            unint64_t v61 = v62 >> 4;
          }
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v63 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v61;
          }
          if (v63)
          {
            float64x2_t v81 = v56;
            float64x2_t v83 = v55;
            float64x2_t v64 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v72, v63);
            float64x2_t v56 = v81;
            float64x2_t v55 = v83;
          }
          else
          {
            float64x2_t v64 = 0;
          }
          float64x2_t v65 = (float64x2_t *)&v64[32 * v60];
          *float64x2_t v65 = v56;
          v65[1] = v55;
          float64x2_t v67 = (float64x2_t *)*a4;
          float64x2_t v66 = (float64x2_t *)a4[1];
          float64x2_t v68 = v65;
          if (v66 != *a4)
          {
            do
            {
              float64x2_t v69 = v66[-2];
              float64x2_t v70 = v66[-1];
              v66 -= 2;
              v68[-2] = v69;
              v68[-1] = v70;
              v68 -= 2;
            }
            while (v66 != v67);
            float64x2_t v66 = (float64x2_t *)*a4;
          }
          float64x2_t v59 = (_OWORD *)v65[2].f64;
          *a4 = v68;
          a4[1] = &v65[2];
          a4[2] = &v64[32 * v63];
          if (v66) {
            operator delete(v66);
          }
        }
        else
        {
          *float32x4_t v58 = v56;
          v58[1] = v55;
          float64x2_t v59 = (_OWORD *)v58[2].f64;
        }
        a4[1] = v59;
      }
      ++v42;
    }
    while (v42 != 12);
  }
  return v9 != 0;
}

void geom::cluster<double>::find_explicit_surface_crossings(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __n128 a6)
{
  void v22[4] = *MEMORY[0x263EF8340];
  uint64_t v10 = *(float64x2_t **)(a1 + 128);
  float64x2_t v11 = v10[1];
  float64x2_t v12 = v10[2];
  v13.i64[0] = a6.n128_u32[0];
  v13.i64[1] = a6.n128_u32[1];
  float64x2_t v14 = vcvtq_f64_u64(v13);
  v13.i64[0] = a6.n128_u32[2];
  v13.i64[1] = a6.n128_u32[3];
  float64x2_t v15 = vmlaq_f64(v10[4], vcvtq_f64_u64(v13), v12);
  v20[0] = vmlaq_f64(v10[3], v14, v11);
  v20[1] = v15;
  v20[2] = vaddq_f64(v11, v20[0]);
  v20[3] = vaddq_f64(v12, v15);
  std::vector<int> __p = 0;
  uint64x2_t v18 = 0;
  uint64_t v19 = 0;
  float64x2_t v16 = operator new(0x28uLL);
  *float64x2_t v16 = &unk_26EA05B50;
  v16[1] = v20;
  v16[2] = a5;
  v16[3] = a2;
  v16[4] = a3;
  v22[3] = v16;
  v21[0] = &unk_26EA05BD0;
  v21[1] = v20;
  v21[3] = v21;
  geom::bvh<double,(unsigned char)3>::find_all_intersections(a4, (uint64_t)v22, (uint64_t)v21, (int **)&__p);
  std::__function::__value_func<BOOL ()(geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v21);
  std::__function::__value_func<BOOL ()>::~__value_func[abi:nn180100](v22);
  if (__p)
  {
    uint64x2_t v18 = __p;
    operator delete(__p);
  }
}

double geom::cluster<double>::compute_component_volume(void *a1)
{
  std::vector<int> __p = 0;
  int64x2_t v27 = 0;
  unint64_t v28 = 0;
  std::vector<double>::reserve(&__p, (uint64_t)(a1[22] - a1[21]) >> 4);
  int8x16_t v2 = (double **)a1[21];
  int64x2_t v3 = (double **)a1[22];
  if (v2 == v3)
  {
    uint64_t v8 = v27;
  }
  else
  {
    uint64_t v4 = v27;
    do
    {
      unint64_t v5 = *v2;
      double v6 = **v2;
      if (v4 >= v28)
      {
        unsigned int v9 = (double *)__p;
        uint64_t v10 = ((char *)v4 - (unsigned char *)__p) >> 3;
        unint64_t v11 = v10 + 1;
        if ((unint64_t)(v10 + 1) >> 61) {
          abort();
        }
        uint64_t v12 = (char *)v28 - (unsigned char *)__p;
        if (((char *)v28 - (unsigned char *)__p) >> 2 > v11) {
          unint64_t v11 = v12 >> 2;
        }
        if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v11;
        }
        if (v13)
        {
          float64x2_t v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v28, v13);
          unsigned int v9 = (double *)__p;
          uint64_t v4 = v27;
        }
        else
        {
          float64x2_t v14 = 0;
        }
        uint64_t v15 = 0;
        if (v6 >= 0.0) {
          uint64_t v15 = *(void *)v5;
        }
        float64x2_t v16 = (double *)&v14[8 * v10];
        *(void *)float64x2_t v16 = v15;
        uint64_t v8 = v16 + 1;
        while (v4 != v9)
        {
          uint64_t v17 = *((void *)v4-- - 1);
          *((void *)v16-- - 1) = v17;
        }
        std::vector<int> __p = v16;
        int64x2_t v27 = v8;
        unint64_t v28 = (double *)&v14[8 * v13];
        if (v9) {
          operator delete(v9);
        }
      }
      else
      {
        if (v6 >= 0.0) {
          double v7 = **v2;
        }
        else {
          double v7 = 0.0;
        }
        double *v4 = v7;
        uint64_t v8 = v4 + 1;
      }
      int64x2_t v27 = v8;
      v2 += 2;
      uint64_t v4 = v8;
    }
    while (v2 != v3);
  }
  uint64x2_t v18 = (double *)__p;
  uint64_t v19 = (char *)v8 - (unsigned char *)__p;
  if ((unint64_t)((char *)v8 - (unsigned char *)__p) >= 0x10)
  {
    uint64_t v20 = v19 >> 3;
    unint64_t v21 = v19 >> 2;
    unint64_t v22 = 2;
    uint64_t v29 = 2;
    uint64_t v23 = MEMORY[0x263EF8330];
    do
    {
      block[0] = v23;
      block[1] = 0x40000000;
      block[2] = ___ZN4geom26dispatch_apply_with_strideIZNS_24parallel_reduce_in_placeIdNS_11plus_equalsIdEEEEvRNSt3__16vectorIT_NS4_9allocatorIS6_EEEEmP16dispatch_queue_sT0_EUlmmE_EEmmmSC_S6__block_invoke;
      block[3] = &__block_descriptor_tmp_31;
      block[4] = 128;
      unint64_t v32 = (v22 + (((char *)v27 - (unsigned char *)__p) >> 3) - 1) / v22;
      uint64_t v33 = &v29;
      uint64_t v34 = v20;
      p_p = &__p;
      int v36 = &v30;
      dispatch_apply((v32 + 127) >> 7, 0, block);
      unint64_t v22 = 2 * v29;
      uint64_t v29 = v22;
    }
    while (v22 < v21);
    uint64x2_t v18 = (double *)__p;
  }
  double v24 = *v18
      + vmuld_lane_f64((double)(unint64_t)((uint64_t)(a1[19] - a1[18]) >> 3) * *(double *)(a1[16] + 16), *(float64x2_t *)(a1[16] + 16), 1)* *(double *)(a1[16] + 32);
  int64x2_t v27 = v18;
  operator delete(v18);
  return v24;
}

double geom::cluster<double>::compute_component_surface_area(void *a1)
{
  std::vector<int> __p = 0;
  unint64_t v28 = 0;
  uint64_t v29 = 0;
  std::vector<double>::reserve(&__p, (uint64_t)(a1[22] - a1[21]) >> 4);
  int8x16_t v2 = (uint64_t *)a1[21];
  int64x2_t v3 = (uint64_t *)a1[22];
  if (v2 == v3)
  {
    double v6 = v28;
  }
  else
  {
    uint64_t v4 = (char *)v28;
    do
    {
      uint64_t v5 = *v2;
      if (v4 >= v29)
      {
        double v7 = (char *)__p;
        uint64_t v8 = (v4 - (unsigned char *)__p) >> 3;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 61) {
          abort();
        }
        uint64_t v10 = v29 - (unsigned char *)__p;
        if ((v29 - (unsigned char *)__p) >> 2 > v9) {
          unint64_t v9 = v10 >> 2;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        if (v11)
        {
          uint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v29, v11);
          double v7 = (char *)__p;
          uint64_t v4 = (char *)v28;
        }
        else
        {
          uint64_t v12 = 0;
        }
        unint64_t v13 = &v12[8 * v8];
        *(void *)unint64_t v13 = *(void *)(v5 + 8);
        double v6 = (double *)(v13 + 8);
        while (v4 != v7)
        {
          uint64_t v14 = *((void *)v4 - 1);
          v4 -= 8;
          *((void *)v13 - 1) = v14;
          v13 -= 8;
        }
        std::vector<int> __p = v13;
        unint64_t v28 = v6;
        uint64_t v29 = &v12[8 * v11];
        if (v7) {
          operator delete(v7);
        }
      }
      else
      {
        *(void *)uint64_t v4 = *(void *)(v5 + 8);
        double v6 = (double *)(v4 + 8);
      }
      unint64_t v28 = v6;
      v2 += 2;
      uint64_t v4 = (char *)v6;
    }
    while (v2 != v3);
  }
  uint64_t v15 = (double *)__p;
  uint64_t v16 = (char *)v6 - (unsigned char *)__p;
  if ((unint64_t)((char *)v6 - (unsigned char *)__p) >= 0x10)
  {
    uint64_t v17 = v16 >> 3;
    unint64_t v18 = v16 >> 2;
    unint64_t v19 = 2;
    uint64_t v30 = 2;
    uint64_t v20 = MEMORY[0x263EF8330];
    do
    {
      block[0] = v20;
      block[1] = 0x40000000;
      block[2] = ___ZN4geom26dispatch_apply_with_strideIZNS_24parallel_reduce_in_placeIdNS_11plus_equalsIdEEEEvRNSt3__16vectorIT_NS4_9allocatorIS6_EEEEmP16dispatch_queue_sT0_EUlmmE_EEmmmSC_S6__block_invoke;
      block[3] = &__block_descriptor_tmp_31;
      block[4] = 128;
      unint64_t v33 = (v19 + (((char *)v28 - (unsigned char *)__p) >> 3) - 1) / v19;
      uint64_t v34 = &v30;
      uint64_t v35 = v17;
      p_p = &__p;
      BOOL v37 = &v31;
      dispatch_apply((v33 + 127) >> 7, 0, block);
      unint64_t v19 = 2 * v30;
      uint64_t v30 = v19;
    }
    while (v19 < v18);
    uint64_t v15 = (double *)__p;
  }
  unint64_t v21 = (float64x2_t *)a1[16];
  float64x2_t v22 = v21[1];
  float64x2_t v23 = v21[2];
  double v24 = vmulq_laneq_f64(v23, v22, 1).f64[0];
  v23.f64[1] = v21[1].f64[0];
  double v25 = *v15 + (double)(unint64_t)((uint64_t)(a1[19] - a1[18]) >> 3) * (v24 + vaddvq_f64(vmulq_f64(v22, v23)));
  unint64_t v28 = v15;
  operator delete(v15);
  return v25;
}

uint64_t ___ZN4geom26dispatch_apply_with_strideIZNS_7clusterIfE4initEPKNS_10voxel_gridIfEEPvRKNSt3__16vectorIDv3_fNS8_9allocatorISA_EEEERKNS9_IjNSB_IjEEEERKNS_3bvhIfLh3EEEPNS_17convex_mesh_cacheIfEEjjfEUlmE_EEmmmP16dispatch_queue_sT__block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  unint64_t v3 = v2 * a2;
  unint64_t v4 = v2 * a2 + v2;
  if (*(void *)(result + 40) >= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = *(void *)(result + 40);
  }
  if (v3 < v5) {
    geom::query_approximate_winding_number_3<float>();
  }
  return result;
}

void _ZNSt3__16vectorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS0_IDv3_fNS_9allocatorIS9_EEEERKNS0_IjNSA_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextNSA_ISQ_EEE16__destroy_vectorclB8nn180100Ev(void ***a1)
{
  v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        _ZNSt3__19allocatorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS_6vectorIDv3_fNS0_ISA_EEEERKNS9_IjNS0_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextE7destroyB8nn180100EPSQ_((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void _ZNSt3__19allocatorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS_6vectorIDv3_fNS0_ISA_EEEERKNS9_IjNS0_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextE7destroyB8nn180100EPSQ_(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void **)(a2 + 72);
  if (v3)
  {
    *(void *)(a2 + 80) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a2 + 48);
  if (v4)
  {
    *(void *)(a2 + 56) = v4;
    operator delete(v4);
  }
  double v6 = (void **)(a2 + 24);
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v6);
  unint64_t v5 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v5;
    operator delete(v5);
  }
}

void std::__shared_ptr_emplace<geom::convex_mesh<float>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EA059A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geom::convex_mesh<float>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EA059A0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237E10720);
}

void std::__shared_ptr_emplace<geom::convex_mesh<float>>::__on_zero_shared(uint64_t a1)
{
  std::allocator<geom::convex_mesh<float>>::destroy[abi:nn180100]((uint64_t)&v1, (void *)(a1 + 32));
}

void std::allocator<geom::convex_mesh<float>>::destroy[abi:nn180100](uint64_t a1, void *a2)
{
  unint64_t v3 = (void *)a2[9];
  if (v3)
  {
    a2[10] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a2[6];
  if (v4)
  {
    a2[7] = v4;
    operator delete(v4);
  }
}

void _ZNSt3__16vectorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS0_IDv3_fNS_9allocatorIS9_EEEERKNS0_IjNSA_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextNSA_ISQ_EEE6resizeEm(uint64_t *a1, unint64_t a2)
{
  uint64_t v3 = a1[1];
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *a1) >> 5);
  BOOL v5 = a2 >= v4;
  unint64_t v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    _ZNSt3__16vectorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS0_IDv3_fNS_9allocatorIS9_EEEERKNS0_IjNSA_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextNSA_ISQ_EEE8__appendEm(a1, v6);
  }
  else if (!v5)
  {
    uint64_t v7 = *a1 + 96 * a2;
    while (v3 != v7)
    {
      v3 -= 96;
      _ZNSt3__19allocatorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS_6vectorIDv3_fNS0_ISA_EEEERKNS9_IjNS0_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextE7destroyB8nn180100EPSQ_((uint64_t)(a1 + 2), v3);
    }
    a1[1] = v7;
  }
}

void ___ZN4geom26dispatch_apply_with_strideIZNS_7clusterIfE4initEPKNS_10voxel_gridIfEEPvRKNSt3__16vectorIDv3_fNS8_9allocatorISA_EEEERKNS9_IjNSB_IjEEEERKNS_3bvhIfLh3EEEPNS_17convex_mesh_cacheIfEEjjfEUlmRZNS2_4initES6_S7_SF_SJ_SN_SQ_jjfE18voxel_init_contextE_SR_EEmmmP16dispatch_queue_sRNS9_IT0_NSB_ISW_EEEET__block_invoke(uint64_t a1, uint64_t a2, uint32x4_t a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  unint64_t v4 = v3 * a2;
  unint64_t v5 = v3 * a2 + v3;
  if (*(void *)(a1 + 40) >= v5) {
    unint64_t v6 = v5;
  }
  else {
    unint64_t v6 = *(void *)(a1 + 40);
  }
  if (v4 < v6)
  {
    uint64_t v9 = a1 + 48;
    do
      _ZZN4geom7clusterIfE4initEPKNS_10voxel_gridIfEEPvRKNSt3__16vectorIDv3_fNS7_9allocatorIS9_EEEERKNS8_IjNSA_IjEEEERKNS_3bvhIfLh3EEEPNS_17convex_mesh_cacheIfEEjjfENKUlmRZNS1_4initES5_S6_SE_SI_SM_SP_jjfE18voxel_init_contextE_clEmSR_(v9, v4++, (std::vector<int> *)(**(void **)(a1 + 104) + 96 * a2), a3);
    while (v6 != v4);
  }
}

void _ZZN4geom7clusterIfE4initEPKNS_10voxel_gridIfEEPvRKNSt3__16vectorIDv3_fNS7_9allocatorIS9_EEEERKNS8_IjNSA_IjEEEERKNS_3bvhIfLh3EEEPNS_17convex_mesh_cacheIfEEjjfENKUlmRZNS1_4initES5_S6_SE_SI_SM_SP_jjfE18voxel_init_contextE_clEmSR_(uint64_t a1, unint64_t a2, std::vector<int> *a3, uint32x4_t a4)
{
  uint64_t v7 = *(void *)a1;
  uint64_t v8 = *(_DWORD **)(*(void *)a1 + 72);
  int v9 = v8[2];
  LODWORD(v8) = *v8;
  a4.i32[0] = v9 & a2;
  a4.i32[1] = (a2 >> (char)v8) & v9;
  a4.i32[2] = (a2 >> (2 * v8)) & v9;
  uint64_t v10 = (uint64_t *)&a3[2];
  a3[2].__end_ = a3[2].__begin_;
  uint32x4_t v56 = a4;
  BOOL implicit_surface_crossings = geom::cluster<float>::find_implicit_surface_crossings(v7, *(void **)(a1 + 8), *(_DWORD *)(a1 + 48), (void **)&a3[2].__begin_, a4);
  if (*v10 == v10[1] && implicit_surface_crossings)
  {
    value = a3->__end_cap_.__value_;
    std::vector<unsigned int>::pointer end = a3->__end_;
    if (end < value)
    {
      *(void *)std::vector<unsigned int>::pointer end = a2;
      uint64_t v14 = end + 2;
LABEL_41:
      a3->__end_ = v14;
      return;
    }
    std::vector<int>::pointer begin = a3->__begin_;
    uint64_t v22 = ((char *)end - (char *)a3->__begin_) >> 3;
    unint64_t v23 = v22 + 1;
    if (!((unint64_t)(v22 + 1) >> 61))
    {
      uint64_t v24 = (char *)value - (char *)begin;
      if (v24 >> 2 > v23) {
        unint64_t v23 = v24 >> 2;
      }
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v25 = v23;
      }
      if (v25)
      {
        float64x2_t v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&a3->__end_cap_, v25);
        std::vector<int>::pointer begin = a3->__begin_;
        std::vector<unsigned int>::pointer end = a3->__end_;
      }
      else
      {
        float64x2_t v26 = 0;
      }
      uint64_t v52 = (int *)&v26[8 * v22];
      uint64_t v53 = (int *)&v26[8 * v25];
      *(void *)uint64_t v52 = a2;
      uint64_t v14 = v52 + 2;
      while (end != begin)
      {
        uint64_t v54 = *((void *)end - 1);
        end -= 2;
        *((void *)v52 - 1) = v54;
        v52 -= 2;
      }
      a3->__begin_ = v52;
      a3->__end_ = v14;
      a3->__end_cap_.__value_ = v53;
      if (begin) {
        operator delete(begin);
      }
      goto LABEL_41;
    }
LABEL_46:
    abort();
  }
  geom::cluster<float>::find_explicit_surface_crossings(v7, *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), (uint64_t)v10, v56);
  if (a3[2].__begin_ != a3[2].__end_)
  {
    uint64_t v16 = **(void **)(a1 + 40);
    unint64_t add = atomic_fetch_add((atomic_uint *volatile)v16, 1u);
    uint64_t v17 = *(void *)(v16 + 8);
    if (add >= (*(void *)(v16 + 16) - v17) >> 4)
    {
      unint64_t v19 = (char *)operator new(0x80uLL);
      *((void *)v19 + 1) = 0;
      *((void *)v19 + 2) = 0;
      *((int32x2_t *)v19 + 4) = vdup_n_s32(0x7FC00000u);
      uint64_t v20 = v19 + 32;
      *(void *)unint64_t v19 = &unk_26EA059A0;
      *((void *)v19 + 5) = 0;
      *(void *)&long long v27 = 0x7F0000007FLL;
      *((void *)&v27 + 1) = 0x7F0000007FLL;
      *((int32x4_t *)v19 + 3) = vdupq_n_s32(0x7F800000u);
      *((_OWORD *)v19 + 4) = v27;
      *((_OWORD *)v19 + 5) = 0u;
      *((_OWORD *)v19 + 6) = 0u;
      *((_OWORD *)v19 + 7) = 0u;
    }
    else
    {
      unint64_t v18 = (char **)(v17 + 16 * add);
      uint64_t v20 = *v18;
      unint64_t v19 = v18[1];
      if (v19) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)v19 + 1, 1uLL, memory_order_relaxed);
      }
    }
    *((void *)v20 + 10) = *((void *)v20 + 9);
    geom::convex_hull_triangulated_3<float>(((char *)a3[2].__end_ - (char *)a3[2].__begin_) >> 4, (float32x4_t *)a3[2].__begin_, (void *)v20 + 9, 0xFFFFFFFF, 0.0);
    geom::crunch_triangle_mesh<float>(v10, (char **)v20 + 6, (int **)v20 + 9, a3 + 3);
    *(float *)uint64_t v20 = geom::triangle_mesh_volume_3<float>(*((void *)v20 + 6), (uint64_t)(*((void *)v20 + 7) - *((void *)v20 + 6)) >> 4, *((void *)v20 + 9), (uint64_t)(*((void *)v20 + 10) - *((void *)v20 + 9)) >> 2);
    double v28 = geom::triangle_mesh_surface_area_3<float>(*((void *)v20 + 6), (uint64_t)(*((void *)v20 + 7) - *((void *)v20 + 6)) >> 4, *((void *)v20 + 9), (uint64_t)(*((void *)v20 + 10) - *((void *)v20 + 9)) >> 2);
    *((_DWORD *)v20 + 1) = LODWORD(v28);
    uint64_t v29 = (float32x4_t *)*((void *)v20 + 6);
    uint64_t v30 = *((void *)v20 + 7) - (void)v29;
    if (v30)
    {
      float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      uint64_t v32 = 16 * (v30 >> 4);
      v33.i64[0] = 0x7F0000007FLL;
      v33.i32[2] = 127;
      do
      {
        float32x4_t v34 = *v29++;
        float32x4_t v35 = v34;
        v35.i32[3] = 0;
        v31.i32[3] = 0;
        float32x4_t v31 = vminnmq_f32(v35, v31);
        v33.i32[3] = 0;
        float32x4_t v33 = vmaxnmq_f32(v35, v33);
        v32 -= 16;
      }
      while (v32);
    }
    else
    {
      float32x4_t v31 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      v33.i64[0] = 0x7F0000007FLL;
      v33.i64[1] = 0x7F0000007FLL;
    }
    *((float32x4_t *)v20 + 1) = v31;
    *((float32x4_t *)v20 + 2) = v33;
    int v36 = a3[1].__end_cap_.__value_;
    BOOL v37 = a3[1].__end_;
    if (v37 >= v36)
    {
      std::vector<int>::pointer v39 = a3[1].__begin_;
      uint64_t v40 = ((char *)v37 - (char *)v39) >> 4;
      unint64_t v41 = v40 + 1;
      if ((unint64_t)(v40 + 1) >> 60) {
        goto LABEL_46;
      }
      uint64_t v42 = (char *)v36 - (char *)v39;
      if (v42 >> 3 > v41) {
        unint64_t v41 = v42 >> 3;
      }
      if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v43 = v41;
      }
      p_end_cap = &a3[1].__end_cap_;
      uint64_t v44 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&a3[1].__end_cap_, v43);
      uint64_t v46 = &v44[16 * v40];
      *(void *)uint64_t v46 = v20;
      *((void *)v46 + 1) = v19;
      std::vector<int>::pointer v48 = a3[1].__begin_;
      unint64_t v47 = a3[1].__end_;
      if (v47 == (void *)v48)
      {
        int64x2_t v51 = vdupq_n_s64((unint64_t)v47);
        unsigned int v49 = (int *)&v44[16 * v40];
      }
      else
      {
        unsigned int v49 = (int *)&v44[16 * v40];
        do
        {
          long long v50 = *((_OWORD *)v47 - 1);
          v47 -= 2;
          *((_OWORD *)v49 - 1) = v50;
          v49 -= 4;
          *unint64_t v47 = 0;
          v47[1] = 0;
        }
        while (v47 != (void *)v48);
        int64x2_t v51 = *(int64x2_t *)&a3[1].__begin_;
      }
      int v38 = (int *)(v46 + 16);
      a3[1].__begin_ = v49;
      a3[1].__end_ = (std::vector<int>::pointer)(v46 + 16);
      int64x2_t v58 = v51;
      float64x2_t v55 = a3[1].__end_cap_.__value_;
      a3[1].__end_cap_.__value_ = (int *)&v44[16 * v45];
      float64x2_t v59 = v55;
      uint64_t v57 = v51.i64[0];
      std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((void **)&v57);
    }
    else
    {
      *(void *)BOOL v37 = v20;
      *((void *)v37 + 1) = v19;
      int v38 = v37 + 4;
    }
    a3[1].__end_ = v38;
  }
}

void _ZNSt3__16vectorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS0_IDv3_fNS_9allocatorIS9_EEEERKNS0_IjNSA_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextNSA_ISQ_EEE8__appendEm(uint64_t *a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(void *)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 5) >= a2)
  {
    if (a2)
    {
      size_t v13 = 96 * ((96 * a2 - 96) / 0x60) + 96;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - *a1) >> 5);
    unint64_t v9 = v8 + a2;
    if (v8 + a2 > 0x2AAAAAAAAAAAAAALL) {
      abort();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 5);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x155555555555555) {
      unint64_t v11 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v9;
    }
    uint64_t v19 = v4;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(v4, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v15 = v12;
    uint64_t v16 = &v12[96 * v8];
    unint64_t v18 = &v12[96 * v11];
    size_t v14 = 96 * ((96 * a2 - 96) / 0x60) + 96;
    bzero(v16, v14);
    uint64_t v17 = &v16[v14];
    _ZNSt3__16vectorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS0_IDv3_fNS_9allocatorIS9_EEEERKNS0_IjNSA_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextNSA_ISQ_EEE26__swap_out_circular_bufferERNS_14__split_bufferISQ_RSR_EE(a1, &v15);
    _ZNSt3__114__split_bufferIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS_6vectorIDv3_fNS_9allocatorISA_EEEERKNS9_IjNSB_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextRNSB_ISR_EEED2Ev(&v15);
  }
}

void _ZNSt3__16vectorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS0_IDv3_fNS_9allocatorIS9_EEEERKNS0_IjNSA_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextNSA_ISQ_EEE26__swap_out_circular_bufferERNS_14__split_bufferISQ_RSR_EE(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = (void *)a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 12;
      v4 -= 96;
      _ZNSt3__19allocatorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS_6vectorIDv3_fNS0_ISA_EEEERKNS9_IjNS0_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextE9constructB8nn180100ISQ_JSQ_EEEvPT_DpOT0_((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = (uint64_t)v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

__n128 _ZNSt3__19allocatorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS_6vectorIDv3_fNS0_ISA_EEEERKNS9_IjNS0_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextE9constructB8nn180100ISQ_JSQ_EEEvPT_DpOT0_(uint64_t a1, void *a2, uint64_t a3)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  *(_OWORD *)a2 = *(_OWORD *)a3;
  a2[2] = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  a2[3] = 0;
  a2[4] = 0;
  a2[5] = 0;
  *(_OWORD *)(a2 + 3) = *(_OWORD *)(a3 + 24);
  a2[5] = *(void *)(a3 + 40);
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  a2[6] = 0;
  a2[7] = 0;
  a2[8] = 0;
  *((_OWORD *)a2 + 3) = *(_OWORD *)(a3 + 48);
  a2[8] = *(void *)(a3 + 64);
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(void *)(a3 + 64) = 0;
  a2[9] = 0;
  a2[10] = 0;
  a2[11] = 0;
  __n128 result = *(__n128 *)(a3 + 72);
  *(__n128 *)(a2 + 9) = result;
  a2[11] = *(void *)(a3 + 88);
  *(void *)(a3 + 72) = 0;
  *(void *)(a3 + 80) = 0;
  *(void *)(a3 + 88) = 0;
  return result;
}

void **_ZNSt3__114__split_bufferIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS_6vectorIDv3_fNS_9allocatorISA_EEEERKNS9_IjNSB_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextRNSB_ISR_EEED2Ev(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void _ZNSt3__114__split_bufferIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS_6vectorIDv3_fNS_9allocatorISA_EEEERKNS9_IjNSB_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextRNSB_ISR_EEE5clearB8nn180100Ev(void *a1)
{
  uint64_t v2 = a1[1];
  for (uint64_t i = a1[2]; i != v2; uint64_t i = a1[2])
  {
    uint64_t v4 = a1[4];
    a1[2] = i - 96;
    _ZNSt3__19allocatorIZN4geom7clusterIfE4initEPKNS1_10voxel_gridIfEEPvRKNS_6vectorIDv3_fNS0_ISA_EEEERKNS9_IjNS0_IjEEEERKNS1_3bvhIfLh3EEEPNS1_17convex_mesh_cacheIfEEjjfE18voxel_init_contextE7destroyB8nn180100EPSQ_(v4, i - 96);
  }
}

void geom::crunch_triangle_mesh<float>(uint64_t *a1, char **a2, int **a3, std::vector<int> *this)
{
  this->__end_ = this->__begin_;
  a2[1] = *a2;
  std::vector<int>::size_type v7 = (a1[1] - *a1) >> 4;
  std::vector<int>::value_type __x = -1;
  std::vector<unsigned int>::resize(this, v7, &__x);
  uint64_t v8 = *a3;
  uint64_t v9 = a3[1];
  if (*a3 != v9)
  {
    do
    {
      uint64_t v10 = *v8;
      std::vector<int>::pointer begin = this->__begin_;
      int v12 = this->__begin_[v10];
      if (v12 == -1)
      {
        size_t v13 = *a2;
        size_t v14 = a2[1];
        uint64_t v15 = (v14 - *a2) >> 4;
        begin[v10] = v15;
        uint64_t v16 = *v8;
        uint64_t v17 = *a1;
        unint64_t v18 = (unint64_t)a2[2];
        if ((unint64_t)v14 >= v18)
        {
          if ((unint64_t)(v15 + 1) >> 60) {
            abort();
          }
          uint64_t v20 = v18 - (void)v13;
          uint64_t v21 = v20 >> 3;
          if (v20 >> 3 <= (unint64_t)(v15 + 1)) {
            uint64_t v21 = v15 + 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            unint64_t v23 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a2 + 2), v22);
          }
          else {
            unint64_t v23 = 0;
          }
          uint64_t v24 = &v23[16 * v15];
          *(_OWORD *)uint64_t v24 = *(_OWORD *)(v17 + 16 * v16);
          uint64_t v19 = v24 + 16;
          float64x2_t v26 = *a2;
          unint64_t v25 = a2[1];
          if (v25 != *a2)
          {
            do
            {
              long long v27 = *((_OWORD *)v25 - 1);
              v25 -= 16;
              *((_OWORD *)v24 - 1) = v27;
              v24 -= 16;
            }
            while (v25 != v26);
            unint64_t v25 = *a2;
          }
          *a2 = v24;
          a2[1] = v19;
          a2[2] = &v23[16 * v22];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *(_OWORD *)size_t v14 = *(_OWORD *)(v17 + 16 * v16);
          uint64_t v19 = v14 + 16;
        }
        a2[1] = v19;
        int v12 = begin[v10];
      }
      *v8++ = v12;
    }
    while (v8 != v9);
  }
}

void **std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::clear[abi:nn180100](uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:nn180100](v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

void *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<unsigned long long const*>,std::__wrap_iter<unsigned long long const*>,std::back_insert_iterator<std::vector<unsigned long long>>,0>(void *a1, void *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
    std::back_insert_iterator<std::vector<unsigned long long>>::operator=[abi:nn180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<unsigned long long>>::operator=[abi:nn180100](uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = *(void **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint64_t v8 = *(void **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 3;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61) {
      abort();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 2 > v10) {
      unint64_t v10 = v11 >> 2;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      size_t v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)v6, v12);
      uint64_t v8 = *(void **)v4;
      uint64_t v5 = *(void **)(v4 + 8);
    }
    else
    {
      size_t v13 = 0;
    }
    size_t v14 = &v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    *(void *)size_t v14 = *a2;
    std::vector<int>::size_type v7 = v14 + 8;
    while (v5 != v8)
    {
      uint64_t v16 = *--v5;
      *((void *)v14 - 1) = v16;
      v14 -= 8;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    void *v5 = *a2;
    std::vector<int>::size_type v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void **std::vector<std::shared_ptr<geom::convex_mesh<float>>>::push_back[abi:nn180100](char **a1, long long *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  __n128 result = (void **)(a1 + 2);
  unint64_t v5 = v6;
  std::vector<int>::size_type v7 = (char *)*(result - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = (v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      abort();
    }
    uint64_t v12 = v5 - (void)*a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    long long v27 = result;
    size_t v14 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)result, v13);
    uint64_t v16 = &v14[16 * v10];
    long long v17 = *a2;
    *(_OWORD *)uint64_t v16 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v19 = *a1;
    unint64_t v18 = a1[1];
    if (v18 == *a1)
    {
      int64x2_t v22 = vdupq_n_s64((unint64_t)v18);
      uint64_t v20 = &v14[16 * v10];
    }
    else
    {
      uint64_t v20 = &v14[16 * v10];
      do
      {
        long long v21 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(void *)unint64_t v18 = 0;
        *((void *)v18 + 1) = 0;
      }
      while (v18 != v19);
      int64x2_t v22 = *(int64x2_t *)a1;
    }
    uint64_t v9 = v16 + 16;
    *a1 = v20;
    a1[1] = v16 + 16;
    int64x2_t v25 = v22;
    unint64_t v23 = a1[2];
    a1[2] = &v14[16 * v15];
    float64x2_t v26 = v23;
    uint64_t v24 = v22.i64[0];
    __n128 result = std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((void **)&v24);
  }
  else
  {
    *(void *)std::vector<int>::size_type v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    *((void *)v7 + 1) = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 16;
  }
  a1[1] = v9;
  return result;
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__insert_with_sizeB8nn180100INS_11__wrap_iterIPS1_EES8_EES8_NS6_IPKS1_EET_T0_l(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  unint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  std::vector<int>::size_type v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 4)
  {
    unint64_t v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 4);
    if (v14 >> 60) {
      abort();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 4;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 3 > v14) {
      unint64_t v14 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v37 = v9;
    if (v17) {
      unint64_t v18 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v9, v17);
    }
    else {
      unint64_t v18 = 0;
    }
    double v28 = &v18[16 * v15];
    std::vector<int> __p = v18;
    float32x4_t v34 = v28;
    int v36 = &v18[16 * v17];
    uint64_t v29 = 16 * a5;
    uint64_t v30 = &v28[16 * a5];
    do
    {
      long long v31 = *(_OWORD *)v7;
      v7 += 16;
      *(_OWORD *)double v28 = v31;
      v28 += 16;
      v29 -= 16;
    }
    while (v29);
    float32x4_t v35 = v30;
    unint64_t v5 = _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EEPS1_((void **)a1, (uint64_t)&__p, v5);
    if (v35 != v34) {
      v35 += (v34 - v35 + 15) & 0xFFFFFFFFFFFFFFF0;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 4;
  if (v20 >= a5)
  {
    long long v21 = &__src[16 * a5];
    unint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[16 * a5];
    int64x2_t v25 = &v23[-16 * a5];
    float64x2_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      float64x2_t v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        v25 += 16;
        *(_OWORD *)float64x2_t v26 = v27;
        v26 += 16;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-16 * ((v23 - v24) >> 4)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  long long v21 = &__src[16 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[16 * v20], a4 - v21);
  }
  unint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

char *_ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EEPS1_(void **a1, uint64_t a2, char *__src)
{
  unint64_t v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  std::vector<int>::size_type v7 = v5;
  if (*a1 != __src)
  {
    uint64_t v8 = __src;
    std::vector<int>::size_type v7 = *(char **)(a2 + 8);
    do
    {
      long long v9 = *((_OWORD *)v8 - 1);
      v8 -= 16;
      *((_OWORD *)v7 - 1) = v9;
      v7 -= 16;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v10 = a1[1];
  uint64_t v11 = *(void *)(a2 + 16);
  int64_t v12 = v10 - __src;
  if (v10 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v10 - __src);
    std::vector<int>::size_type v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v11 + v12;
  unint64_t v13 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v13;
  unint64_t v14 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v14;
  uint64_t v15 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v15;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__vdeallocate(uint64_t *a1)
{
  if (*a1)
  {
    std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__clear[abi:nn180100](a1);
    operator delete((void *)*a1);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__move_loop<std::_ClassicAlgPolicy>,std::__move_trivial>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::__wrap_iter<std::shared_ptr<geom::convex_mesh<float>> *>,std::back_insert_iterator<std::vector<std::shared_ptr<geom::convex_mesh<float>>>>,0>(uint64_t a1, uint64_t a2, char **a3)
{
  uint64_t v3 = a1;
  unint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
  {
    std::back_insert_iterator<std::vector<std::shared_ptr<geom::convex_mesh<float>>>>::operator=[abi:nn180100](&v6, v3);
    v3 += 16;
  }
  while (v3 != v4);
  return v4;
}

char ***std::back_insert_iterator<std::vector<std::shared_ptr<geom::convex_mesh<float>>>>::operator=[abi:nn180100](char ***a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (*a1)[1];
  unint64_t v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  std::vector<int>::size_type v7 = v6 + 2;
  unint64_t v8 = v9;
  if ((unint64_t)v5 >= v9)
  {
    uint64_t v11 = (v5 - *v4) >> 4;
    if ((unint64_t)(v11 + 1) >> 60) {
      abort();
    }
    uint64_t v12 = v8 - (void)*v4;
    uint64_t v13 = v12 >> 3;
    if (v12 >> 3 <= (unint64_t)(v11 + 1)) {
      uint64_t v13 = v11 + 1;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v14 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    v25[4] = v7;
    uint64_t v15 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v7, v14);
    unint64_t v17 = &v15[16 * v11];
    *(_OWORD *)unint64_t v17 = *(_OWORD *)a2;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    uint64_t v19 = *v4;
    unint64_t v18 = v4[1];
    if (v18 == *v4)
    {
      int64_t v22 = v4[1];
      uint64_t v20 = &v15[16 * v11];
    }
    else
    {
      uint64_t v20 = &v15[16 * v11];
      do
      {
        long long v21 = *((_OWORD *)v18 - 1);
        v18 -= 16;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *(void *)unint64_t v18 = 0;
        *((void *)v18 + 1) = 0;
      }
      while (v18 != v19);
      int64_t v22 = *v4;
      unint64_t v18 = v4[1];
    }
    uint64_t v10 = v17 + 16;
    void *v4 = v20;
    v25[0] = v22;
    v25[1] = v22;
    v4[1] = v17 + 16;
    v25[2] = v18;
    unint64_t v23 = v4[2];
    v4[2] = &v15[16 * v16];
    v25[3] = v23;
    std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer(v25);
  }
  else
  {
    *(_OWORD *)unint64_t v5 = *(_OWORD *)a2;
    uint64_t v10 = v5 + 16;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
  }
  v4[1] = v10;
  return a1;
}

void _ZNSt3__110__function6__funcIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_fNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIfLh3EEERSA_EUljE_NS8_ISM_EEFbjEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_fNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIfLh3EEERSA_EUljE_NS8_ISM_EEFbjEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26EA059F0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_fNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIfLh3EEERSA_EUljE_NS8_ISM_EEFbjEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA059F0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_fNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIfLh3EEERSA_EUljE_NS8_ISM_EEFbjEEclEOj(uint64_t a1, int *a2)
{
  return _ZZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNSt3__16vectorIDv3_fNS3_9allocatorIS5_EEEERKNS4_IjNS6_IjEEEERKNS_3bvhIfLh3EEERS8_ENKUljE_clEj(a1 + 8, *a2);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_fNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIfLh3EEERSA_EUljE_NS8_ISM_EEFbjEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNSt3__16vectorIDv3_fNS3_9allocatorIS5_EEEERKNS4_IjNS6_IjEEEERKNS_3bvhIfLh3EEERS8_EUljE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_fNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIfLh3EEERSA_EUljE_NS8_ISM_EEFbjEE11target_typeEv()
{
  return &_ZTIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNSt3__16vectorIDv3_fNS3_9allocatorIS5_EEEERKNS4_IjNS6_IjEEEERKNS_3bvhIfLh3EEERS8_EUljE_;
}

BOOL _ZZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNSt3__16vectorIDv3_fNS3_9allocatorIS5_EEEERKNS4_IjNS6_IjEEEERKNS_3bvhIfLh3EEERS8_ENKUljE_clEj(uint64_t a1, int a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = **(void **)(a1 + 24);
  uint64_t v4 = **(void **)(a1 + 16);
  float32x4_t v5 = *(float32x4_t *)(v4 + 16 * *(unsigned int *)(v3 + 4 * (3 * a2 + 1)));
  float32x4_t v6 = *(float32x4_t *)(v4 + 16 * *(unsigned int *)(v3 + 4 * (3 * a2 + 2)));
  v23[0] = *(float32x4_t *)(v4 + 16 * *(unsigned int *)(v3 + 4 * (3 * a2)));
  v23[1] = v5;
  v23[2] = v6;
  int v7 = geom::intersect_triangle_bbox_3<float>(v23, *(_OWORD **)a1, v24);
  if (v7)
  {
    for (uint64_t i = 0; i != v7; ++i)
    {
      unint64_t v9 = *(int32x4_t ***)(a1 + 8);
      uint64_t v10 = v9[1];
      unint64_t v11 = (unint64_t)v9[2];
      if ((unint64_t)v10 >= v11)
      {
        uint64_t v13 = v10 - *v9;
        if ((unint64_t)(v13 + 1) >> 60) {
          abort();
        }
        uint64_t v14 = v11 - (void)*v9;
        uint64_t v15 = v14 >> 3;
        if (v14 >> 3 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          unint64_t v17 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v9 + 2), v16);
        }
        else {
          unint64_t v17 = 0;
        }
        unint64_t v18 = (int32x4_t *)&v17[16 * v13];
        *unint64_t v18 = v24[i];
        uint64_t v12 = v18 + 1;
        uint64_t v20 = *v9;
        uint64_t v19 = v9[1];
        if (v19 != *v9)
        {
          do
          {
            int32x4_t v21 = v19[-1];
            --v19;
            v18[-1] = v21;
            --v18;
          }
          while (v19 != v20);
          uint64_t v19 = *v9;
        }
        char *v9 = v18;
        v9[1] = v12;
        v9[2] = (int32x4_t *)&v17[16 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *uint64_t v10 = v24[i];
        uint64_t v12 = v10 + 1;
      }
      v9[1] = v12;
    }
  }
  return v7 != 0;
}

void _ZNSt3__110__function6__funcIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_fNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIfLh3EEERSA_EUlRKNS2_4bboxIfLh3EEEE_NS8_ISQ_EEFbSP_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_fNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIfLh3EEERSA_EUlRKNS2_4bboxIfLh3EEEE_NS8_ISQ_EEFbSP_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA05A70;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_fNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIfLh3EEERSA_EUlRKNS2_4bboxIfLh3EEEE_NS8_ISQ_EEFbSP_EE7__cloneEPNS0_6__baseISS_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA05A70;
  a2[1] = v2;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_fNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIfLh3EEERSA_EUlRKNS2_4bboxIfLh3EEEE_NS8_ISQ_EEFbSP_EEclESP_(uint64_t a1, float32x4_t *a2)
{
  uint64_t v2 = *(float32x4_t **)(a1 + 8);
  uint32x4_t v3 = (uint32x4_t)vcgtq_f32(*a2, v2[1]);
  v3.i32[3] = v3.i32[2];
  if ((vmaxvq_u32(v3) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v4 = (uint32x4_t)vcgtq_f32(*v2, a2[1]);
  v4.i32[3] = v4.i32[2];
  return (vmaxvq_u32(v4) & 0x80000000) == 0;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_fNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIfLh3EEERSA_EUlRKNS2_4bboxIfLh3EEEE_NS8_ISQ_EEFbSP_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNSt3__16vectorIDv3_fNS3_9allocatorIS5_EEEERKNS4_IjNS6_IjEEEERKNS_3bvhIfLh3EEERS8_EUlRKNS_4bboxIfLh3EEEE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_fNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIfLh3EEERSA_EUlRKNS2_4bboxIfLh3EEEE_NS8_ISQ_EEFbSP_EE11target_typeEv()
{
  return &_ZTIZNK4geom7clusterIfE31find_explicit_surface_crossingsEDv3_jRKNSt3__16vectorIDv3_fNS3_9allocatorIS5_EEEERKNS4_IjNS6_IjEEEERKNS_3bvhIfLh3EEERS8_EUlRKNS_4bboxIfLh3EEEE_;
}

void *std::__function::__value_func<BOOL ()(geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t ___ZN4geom26dispatch_apply_with_strideIZNS_24parallel_reduce_in_placeIfNS_11plus_equalsIfEEEEvRNSt3__16vectorIT_NS4_9allocatorIS6_EEEEmP16dispatch_queue_sT0_EUlmmE_EEmmmSC_S6__block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 32);
  unint64_t v2 = *(void *)(result + 40);
  unint64_t v4 = v3 * a2;
  if (v2 >= v3 * a2 + v3) {
    unint64_t v2 = v3 * a2 + v3;
  }
  BOOL v5 = v2 > v4;
  unint64_t v6 = v2 - v4;
  if (v5)
  {
    unint64_t v7 = *(void *)(result + 56);
    unint64_t v8 = **(void **)(result + 48);
    uint64_t v9 = v3 * v8 * a2;
    do
    {
      if ((v8 >> 1) + v9 < v7)
      {
        uint64_t v10 = (float *)(**(void **)(result + 64) + 4 * v9);
        *uint64_t v10 = v10[v8 >> 1] + *v10;
      }
      v9 += v8;
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t ___ZN4geom26dispatch_apply_with_strideIZNS_7clusterIdE4initEPKNS_10voxel_gridIdEEPvRKNSt3__16vectorIDv3_dNS8_9allocatorISA_EEEERKNS9_IjNSB_IjEEEERKNS_3bvhIdLh3EEEPNS_17convex_mesh_cacheIdEEjjdEUlmE_EEmmmP16dispatch_queue_sT__block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(result + 32);
  unint64_t v3 = v2 * a2;
  unint64_t v4 = v2 * a2 + v2;
  if (*(void *)(result + 40) >= v4) {
    unint64_t v5 = v4;
  }
  else {
    unint64_t v5 = *(void *)(result + 40);
  }
  if (v3 < v5) {
    geom::query_approximate_winding_number_3<double>();
  }
  return result;
}

void std::__shared_ptr_emplace<geom::convex_mesh<double>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EA05B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<geom::convex_mesh<double>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26EA05B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x237E10720);
}

void std::__shared_ptr_emplace<geom::convex_mesh<double>>::__on_zero_shared(uint64_t a1)
{
  std::allocator<geom::convex_mesh<double>>::destroy[abi:nn180100]((uint64_t)&v1, (void *)(a1 + 32));
}

void std::allocator<geom::convex_mesh<double>>::destroy[abi:nn180100](uint64_t a1, void *a2)
{
  unint64_t v3 = (void *)a2[13];
  if (v3)
  {
    a2[14] = v3;
    operator delete(v3);
  }
  unint64_t v4 = (void *)a2[10];
  if (v4)
  {
    a2[11] = v4;
    operator delete(v4);
  }
}

void ___ZN4geom26dispatch_apply_with_strideIZNS_7clusterIdE4initEPKNS_10voxel_gridIdEEPvRKNSt3__16vectorIDv3_dNS8_9allocatorISA_EEEERKNS9_IjNSB_IjEEEERKNS_3bvhIdLh3EEEPNS_17convex_mesh_cacheIdEEjjdEUlmRZNS2_4initES6_S7_SF_SJ_SN_SQ_jjdE18voxel_init_contextE_SR_EEmmmP16dispatch_queue_sRNS9_IT0_NSB_ISW_EEEET__block_invoke(uint64_t a1, uint64_t a2, uint32x4_t a3, double a4, int8x16_t a5)
{
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = v5 * a2;
  unint64_t v7 = v5 * a2 + v5;
  if (*(void *)(a1 + 40) >= v7) {
    unint64_t v8 = v7;
  }
  else {
    unint64_t v8 = *(void *)(a1 + 40);
  }
  if (v6 < v8)
  {
    uint64_t v11 = a1 + 48;
    do
      _ZZN4geom7clusterIdE4initEPKNS_10voxel_gridIdEEPvRKNSt3__16vectorIDv3_dNS7_9allocatorIS9_EEEERKNS8_IjNSA_IjEEEERKNS_3bvhIdLh3EEEPNS_17convex_mesh_cacheIdEEjjdENKUlmRZNS1_4initES5_S6_SE_SI_SM_SP_jjdE18voxel_init_contextE_clEmSR_(v11, v6++, (std::vector<int> *)(**(void **)(a1 + 104) + 96 * a2), a3, a4, a5);
    while (v8 != v6);
  }
}

void _ZZN4geom7clusterIdE4initEPKNS_10voxel_gridIdEEPvRKNSt3__16vectorIDv3_dNS7_9allocatorIS9_EEEERKNS8_IjNSA_IjEEEERKNS_3bvhIdLh3EEEPNS_17convex_mesh_cacheIdEEjjdENKUlmRZNS1_4initES5_S6_SE_SI_SM_SP_jjdE18voxel_init_contextE_clEmSR_(uint64_t a1, unint64_t a2, std::vector<int> *a3, uint32x4_t a4, double a5, int8x16_t a6)
{
  uint64_t v9 = *(void *)a1;
  uint64_t v10 = *(_DWORD **)(*(void *)a1 + 128);
  int v11 = v10[2];
  LODWORD(v10) = *v10;
  a4.i32[0] = v11 & a2;
  a4.i32[1] = (a2 >> (char)v10) & v11;
  a4.i32[2] = (a2 >> (2 * v10)) & v11;
  uint64_t v12 = (uint64_t *)&a3[2];
  a3[2].__end_ = a3[2].__begin_;
  __n128 v59 = (__n128)a4;
  BOOL implicit_surface_crossings = geom::cluster<double>::find_implicit_surface_crossings(v9, *(void **)(a1 + 8), *(_DWORD *)(a1 + 48), (void **)&a3[2].__begin_, a4, a5, a6);
  if (*v12 == v12[1] && implicit_surface_crossings)
  {
    value = a3->__end_cap_.__value_;
    std::vector<unsigned int>::pointer end = a3->__end_;
    if (end < value)
    {
      *(void *)std::vector<unsigned int>::pointer end = a2;
      unint64_t v16 = end + 2;
LABEL_41:
      a3->__end_ = v16;
      return;
    }
    std::vector<int>::pointer begin = a3->__begin_;
    uint64_t v24 = ((char *)end - (char *)a3->__begin_) >> 3;
    unint64_t v25 = v24 + 1;
    if (!((unint64_t)(v24 + 1) >> 61))
    {
      uint64_t v26 = (char *)value - (char *)begin;
      if (v26 >> 2 > v25) {
        unint64_t v25 = v26 >> 2;
      }
      if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8) {
        unint64_t v27 = 0x1FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v27 = v25;
      }
      if (v27)
      {
        double v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&a3->__end_cap_, v27);
        std::vector<int>::pointer begin = a3->__begin_;
        std::vector<unsigned int>::pointer end = a3->__end_;
      }
      else
      {
        double v28 = 0;
      }
      float64x2_t v55 = (int *)&v28[8 * v24];
      uint32x4_t v56 = (int *)&v28[8 * v27];
      *(void *)float64x2_t v55 = a2;
      unint64_t v16 = v55 + 2;
      while (end != begin)
      {
        uint64_t v57 = *((void *)end - 1);
        end -= 2;
        *((void *)v55 - 1) = v57;
        v55 -= 2;
      }
      a3->__begin_ = v55;
      a3->__end_ = v16;
      a3->__end_cap_.__value_ = v56;
      if (begin) {
        operator delete(begin);
      }
      goto LABEL_41;
    }
LABEL_46:
    abort();
  }
  geom::cluster<double>::find_explicit_surface_crossings(v9, *(void *)(a1 + 16), *(void *)(a1 + 24), *(void *)(a1 + 32), (uint64_t)v12, v59);
  if (a3[2].__begin_ != a3[2].__end_)
  {
    uint64_t v18 = **(void **)(a1 + 40);
    unint64_t add = atomic_fetch_add((atomic_uint *volatile)v18, 1u);
    uint64_t v19 = *(void *)(v18 + 8);
    if (add >= (*(void *)(v18 + 16) - v19) >> 4)
    {
      int32x4_t v21 = (int64x2_t *)operator new(0xA0uLL);
      v21->i64[1] = 0;
      v21[1].i64[0] = 0;
      v21->i64[0] = (uint64_t)&unk_26EA05B00;
      v21[2] = vdupq_n_s64(0x7FF8000000000000uLL);
      int64_t v22 = v21 + 2;
      v29.i64[0] = 0x7FF0000000000000;
      v21[3] = vdupq_n_s64(0x7FF0000000000000uLL);
      void v21[4] = v29;
      v29.i64[0] = 0xFFF0000000000000;
      v21[5] = vdupq_n_s64(0xFFF0000000000000);
      v21[6] = v29;
      v21[7] = 0u;
      v21[8] = 0u;
      v21[9] = 0u;
    }
    else
    {
      uint64_t v20 = (int64x2_t **)(v19 + 16 * add);
      int64_t v22 = *v20;
      int32x4_t v21 = v20[1];
      if (v21) {
        atomic_fetch_add_explicit(&v21->i64[1], 1uLL, memory_order_relaxed);
      }
    }
    v22[7].i64[0] = v22[6].i64[1];
    geom::convex_hull_triangulated_3<double>(((char *)a3[2].__end_ - (char *)a3[2].__begin_) >> 5, (float64x2_t *)a3[2].__begin_, &v22[6].i64[1], 0xFFFFFFFF, 0.0);
    geom::crunch_triangle_mesh<double>(v12, (char **)&v22[5], (int **)&v22[6].i64[1], a3 + 3);
    *(double *)v22->i64 = geom::triangle_mesh_volume_3<double>(v22[5].i64[0], (v22[5].i64[1] - v22[5].i64[0]) >> 5, v22[6].i64[1], (v22[7].i64[0] - v22[6].i64[1]) >> 2);
    *(double *)&v22->i64[1] = geom::triangle_mesh_surface_area_3<double>(v22[5].i64[0], (v22[5].i64[1] - v22[5].i64[0]) >> 5, v22[6].i64[1], (v22[7].i64[0] - v22[6].i64[1]) >> 2);
    uint64_t v32 = (float64x2_t *)v22[5].i64[0];
    uint64_t v33 = v22[5].i64[1] - (void)v32;
    if (v33)
    {
      v30.f64[0] = INFINITY;
      v31.f64[0] = -INFINITY;
      float64x2_t v34 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v35 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      uint64_t v36 = 32 * (v33 >> 5);
      do
      {
        float64x2_t v37 = *v32;
        float64x2_t v38 = v32[1];
        v32 += 2;
        float64x2_t v34 = vminnmq_f64(v37, v34);
        float64x2_t v30 = vminnmq_f64((float64x2_t)*(unint64_t *)&v38.f64[0], (float64x2_t)*(unint64_t *)&v30.f64[0]);
        float64x2_t v35 = vmaxnmq_f64(v37, v35);
        float64x2_t v31 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v38.f64[0], (float64x2_t)*(unint64_t *)&v31.f64[0]);
        v36 -= 32;
      }
      while (v36);
    }
    else
    {
      v30.f64[0] = INFINITY;
      v31.f64[0] = -INFINITY;
      float64x2_t v34 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v35 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    }
    v22[1] = (int64x2_t)v34;
    v22[2] = (int64x2_t)v30;
    v22[3] = (int64x2_t)v35;
    void v22[4] = (int64x2_t)v31;
    std::vector<int>::pointer v39 = a3[1].__end_cap_.__value_;
    uint64_t v40 = a3[1].__end_;
    if (v40 >= v39)
    {
      std::vector<int>::pointer v42 = a3[1].__begin_;
      uint64_t v43 = ((char *)v40 - (char *)v42) >> 4;
      unint64_t v44 = v43 + 1;
      if ((unint64_t)(v43 + 1) >> 60) {
        goto LABEL_46;
      }
      uint64_t v45 = (char *)v39 - (char *)v42;
      if (v45 >> 3 > v44) {
        unint64_t v44 = v45 >> 3;
      }
      if ((unint64_t)v45 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v46 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v46 = v44;
      }
      p_end_cap = &a3[1].__end_cap_;
      unint64_t v47 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&a3[1].__end_cap_, v46);
      unsigned int v49 = &v47[16 * v43];
      *(void *)unsigned int v49 = v22;
      *((void *)v49 + 1) = v21;
      std::vector<int>::pointer v51 = a3[1].__begin_;
      long long v50 = a3[1].__end_;
      if (v50 == (void *)v51)
      {
        int64x2_t v54 = vdupq_n_s64((unint64_t)v50);
        uint64_t v52 = (int *)&v47[16 * v43];
      }
      else
      {
        uint64_t v52 = (int *)&v47[16 * v43];
        do
        {
          long long v53 = *((_OWORD *)v50 - 1);
          v50 -= 2;
          *((_OWORD *)v52 - 1) = v53;
          v52 -= 4;
          *long long v50 = 0;
          v50[1] = 0;
        }
        while (v50 != (void *)v51);
        int64x2_t v54 = *(int64x2_t *)&a3[1].__begin_;
      }
      unint64_t v41 = (int *)(v49 + 16);
      a3[1].__begin_ = v52;
      a3[1].__end_ = (std::vector<int>::pointer)(v49 + 16);
      int64x2_t v61 = v54;
      int64x2_t v58 = a3[1].__end_cap_.__value_;
      a3[1].__end_cap_.__value_ = (int *)&v47[16 * v48];
      uint64_t v62 = v58;
      uint64_t v60 = v54.i64[0];
      std::__split_buffer<std::shared_ptr<geom::convex_mesh<float>>>::~__split_buffer((void **)&v60);
    }
    else
    {
      *(void *)uint64_t v40 = v22;
      *((void *)v40 + 1) = v21;
      unint64_t v41 = v40 + 4;
    }
    a3[1].__end_ = v41;
  }
}

void geom::crunch_triangle_mesh<double>(uint64_t *a1, char **a2, int **a3, std::vector<int> *this)
{
  this->__end_ = this->__begin_;
  a2[1] = *a2;
  std::vector<int>::size_type v8 = (a1[1] - *a1) >> 5;
  std::vector<int>::value_type __x = -1;
  std::vector<unsigned int>::resize(this, v8, &__x);
  uint64_t v9 = *a3;
  uint64_t v10 = a3[1];
  if (*a3 != v10)
  {
    do
    {
      uint64_t v11 = *v9;
      std::vector<int>::pointer begin = this->__begin_;
      int v13 = this->__begin_[v11];
      if (v13 == -1)
      {
        uint64_t v15 = *a2;
        uint64_t v14 = a2[1];
        uint64_t v16 = (v14 - *a2) >> 5;
        begin[v11] = v16;
        uint64_t v17 = *v9;
        uint64_t v18 = *a1;
        unint64_t v19 = (unint64_t)a2[2];
        if ((unint64_t)v14 >= v19)
        {
          unint64_t v23 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 59) {
            abort();
          }
          uint64_t v24 = v19 - (void)v15;
          if (v24 >> 4 > v23) {
            unint64_t v23 = v24 >> 4;
          }
          if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v23;
          }
          if (v25) {
            uint64_t v26 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a2 + 2), v25);
          }
          else {
            uint64_t v26 = 0;
          }
          unint64_t v27 = &v26[32 * v16];
          double v28 = (_OWORD *)(v18 + 32 * v17);
          long long v29 = v28[1];
          *(_OWORD *)unint64_t v27 = *v28;
          *((_OWORD *)v27 + 1) = v29;
          float64x2_t v31 = *a2;
          float64x2_t v30 = a2[1];
          uint64_t v32 = v27;
          if (v30 != *a2)
          {
            do
            {
              long long v33 = *((_OWORD *)v30 - 2);
              long long v34 = *((_OWORD *)v30 - 1);
              v30 -= 32;
              *((_OWORD *)v32 - 2) = v33;
              *((_OWORD *)v32 - 1) = v34;
              v32 -= 32;
            }
            while (v30 != v31);
            float64x2_t v30 = *a2;
          }
          int64_t v22 = v27 + 32;
          *a2 = v32;
          a2[1] = v27 + 32;
          a2[2] = &v26[32 * v25];
          if (v30) {
            operator delete(v30);
          }
        }
        else
        {
          uint64_t v20 = (_OWORD *)(v18 + 32 * v17);
          long long v21 = v20[1];
          *(_OWORD *)uint64_t v14 = *v20;
          *((_OWORD *)v14 + 1) = v21;
          int64_t v22 = v14 + 32;
        }
        a2[1] = v22;
        int v13 = begin[v11];
      }
      *v9++ = v13;
    }
    while (v9 != v10);
  }
}

char *_ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE18__insert_with_sizeB8nn180100INS_11__wrap_iterIPS1_EES8_EES8_NS6_IPKS1_EET_T0_l(uint64_t a1, uint64_t __dst, char *__src, char *a4, uint64_t a5)
{
  uint64_t v5 = (char *)__dst;
  if (a5 < 1) {
    return v5;
  }
  unint64_t v7 = __src;
  uint64_t v11 = *(void *)(a1 + 16);
  uint64_t v9 = a1 + 16;
  uint64_t v10 = v11;
  unint64_t v12 = *(void *)(v9 - 8);
  if (a5 > (uint64_t)(v11 - v12) >> 5)
  {
    int v13 = *(void **)a1;
    unint64_t v14 = a5 + ((uint64_t)(v12 - *(void *)a1) >> 5);
    if (v14 >> 59) {
      abort();
    }
    uint64_t v15 = (__dst - (uint64_t)v13) >> 5;
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 4 > v14) {
      unint64_t v14 = v16 >> 4;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v17 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v14;
    }
    uint64_t v39 = v9;
    if (v17) {
      uint64_t v18 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v9, v17);
    }
    else {
      uint64_t v18 = 0;
    }
    long long v29 = &v18[32 * v15];
    std::vector<int> __p = v18;
    uint64_t v36 = v29;
    float64x2_t v38 = &v18[32 * v17];
    uint64_t v30 = 32 * a5;
    float64x2_t v31 = &v29[32 * a5];
    do
    {
      long long v32 = *(_OWORD *)v7;
      long long v33 = *((_OWORD *)v7 + 1);
      v7 += 32;
      *(_OWORD *)long long v29 = v32;
      *((_OWORD *)v29 + 1) = v33;
      v29 += 32;
      v30 -= 32;
    }
    while (v30);
    float64x2_t v37 = v31;
    uint64_t v5 = _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EEPS1_((void **)a1, (uint64_t)&__p, v5);
    if (v37 != v36) {
      v37 += (v36 - v37 + 31) & 0xFFFFFFFFFFFFFFE0;
    }
    if (__p) {
      operator delete(__p);
    }
    return v5;
  }
  uint64_t v19 = v12 - __dst;
  uint64_t v20 = (uint64_t)(v12 - __dst) >> 5;
  if (v20 >= a5)
  {
    long long v21 = &__src[32 * a5];
    unint64_t v23 = *(char **)(v9 - 8);
LABEL_17:
    uint64_t v24 = &v5[32 * a5];
    unint64_t v25 = &v23[-32 * a5];
    uint64_t v26 = v23;
    if ((unint64_t)v25 < v12)
    {
      uint64_t v26 = v23;
      do
      {
        long long v27 = *(_OWORD *)v25;
        long long v28 = *((_OWORD *)v25 + 1);
        v25 += 32;
        *(_OWORD *)uint64_t v26 = v27;
        *((_OWORD *)v26 + 1) = v28;
        v26 += 32;
      }
      while ((unint64_t)v25 < v12);
    }
    *(void *)(a1 + 8) = v26;
    if (v23 != v24) {
      memmove(&v23[-32 * ((v23 - v24) >> 5)], v5, v23 - v24);
    }
    if (v21 != v7) {
      memmove(v5, v7, v21 - v7);
    }
    return v5;
  }
  long long v21 = &__src[32 * v20];
  int64_t v22 = a4 - v21;
  if (a4 != v21) {
    memmove(*(void **)(v9 - 8), &__src[32 * v20], a4 - v21);
  }
  unint64_t v23 = (char *)(v12 + v22);
  *(void *)(a1 + 8) = v12 + v22;
  if (v19 >= 1) {
    goto LABEL_17;
  }
  return v5;
}

char *_ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE26__swap_out_circular_bufferERNS_14__split_bufferIS1_RS3_EEPS1_(void **a1, uint64_t a2, char *__src)
{
  uint64_t v5 = *(char **)(a2 + 8);
  unint64_t v6 = (char *)*a1;
  unint64_t v7 = v5;
  if (*a1 != __src)
  {
    std::vector<int>::size_type v8 = __src;
    unint64_t v7 = *(char **)(a2 + 8);
    do
    {
      long long v9 = *((_OWORD *)v8 - 2);
      long long v10 = *((_OWORD *)v8 - 1);
      v8 -= 32;
      *((_OWORD *)v7 - 2) = v9;
      *((_OWORD *)v7 - 1) = v10;
      v7 -= 32;
    }
    while (v8 != v6);
  }
  *(void *)(a2 + 8) = v7;
  uint64_t v11 = a1[1];
  uint64_t v12 = *(void *)(a2 + 16);
  int64_t v13 = v11 - __src;
  if (v11 != __src)
  {
    memmove(*(void **)(a2 + 16), __src, v11 - __src);
    unint64_t v7 = *(char **)(a2 + 8);
  }
  *(void *)(a2 + 16) = v12 + v13;
  unint64_t v14 = (char *)*a1;
  *a1 = v7;
  *(void *)(a2 + 8) = v14;
  uint64_t v15 = a1[1];
  a1[1] = *(void **)(a2 + 16);
  *(void *)(a2 + 16) = v15;
  uint64_t v16 = a1[2];
  a1[2] = *(void **)(a2 + 24);
  *(void *)(a2 + 24) = v16;
  *(void *)a2 = *(void *)(a2 + 8);
  return v5;
}

void _ZNSt3__110__function6__funcIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_dNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIdLh3EEERSA_EUljE_NS8_ISM_EEFbjEED0Ev()
{
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_dNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIdLh3EEERSA_EUljE_NS8_ISM_EEFbjEE7__cloneEv(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26EA05B50;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 _ZNKSt3__110__function6__funcIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_dNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIdLh3EEERSA_EUljE_NS8_ISM_EEFbjEE7__cloneEPNS0_6__baseISO_EE(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA05B50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_dNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIdLh3EEERSA_EUljE_NS8_ISM_EEFbjEEclEOj(uint64_t a1, int *a2)
{
  return _ZZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNSt3__16vectorIDv3_dNS3_9allocatorIS5_EEEERKNS4_IjNS6_IjEEEERKNS_3bvhIdLh3EEERS8_ENKUljE_clEj(a1 + 8, *a2);
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_dNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIdLh3EEERSA_EUljE_NS8_ISM_EEFbjEE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNSt3__16vectorIDv3_dNS3_9allocatorIS5_EEEERKNS4_IjNS6_IjEEEERKNS_3bvhIdLh3EEERS8_EUljE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_dNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIdLh3EEERSA_EUljE_NS8_ISM_EEFbjEE11target_typeEv()
{
  return &_ZTIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNSt3__16vectorIDv3_dNS3_9allocatorIS5_EEEERKNS4_IjNS6_IjEEEERKNS_3bvhIdLh3EEERS8_EUljE_;
}

BOOL _ZZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNSt3__16vectorIDv3_dNS3_9allocatorIS5_EEEERKNS4_IjNS6_IjEEEERKNS_3bvhIdLh3EEERS8_ENKUljE_clEj(uint64_t a1, int a2)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  uint64_t v3 = **(void **)(a1 + 24);
  uint64_t v4 = **(void **)(a1 + 16);
  uint64_t v5 = (float64x2_t *)(v4 + 32 * *(unsigned int *)(v3 + 4 * (3 * a2)));
  float64x2_t v7 = *v5;
  float64x2_t v6 = v5[1];
  std::vector<int>::size_type v8 = (float64x2_t *)(v4 + 32 * *(unsigned int *)(v3 + 4 * (3 * a2 + 1)));
  float64x2_t v10 = *v8;
  float64x2_t v9 = v8[1];
  uint64_t v11 = (float64x2_t *)(v4 + 32 * *(unsigned int *)(v3 + 4 * (3 * a2 + 2)));
  float64x2_t v13 = *v11;
  float64x2_t v12 = v11[1];
  v36[0] = v7;
  v36[1] = v6;
  v36[2] = v10;
  v36[3] = v9;
  v36[4] = v13;
  v36[5] = v12;
  int v14 = geom::intersect_triangle_bbox_3<double>(v36, *(void *)a1, v37);
  if (v14)
  {
    for (uint64_t i = 0; i != v14; ++i)
    {
      uint64_t v16 = *(void ***)(a1 + 8);
      unint64_t v17 = (int64x2_t *)v16[1];
      unint64_t v18 = (unint64_t)v16[2];
      if ((unint64_t)v17 >= v18)
      {
        uint64_t v22 = ((char *)v17 - (unsigned char *)*v16) >> 5;
        unint64_t v23 = v22 + 1;
        if ((unint64_t)(v22 + 1) >> 59) {
          abort();
        }
        uint64_t v24 = v18 - (void)*v16;
        if (v24 >> 4 > v23) {
          unint64_t v23 = v24 >> 4;
        }
        if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v25 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v25 = v23;
        }
        if (v25) {
          uint64_t v26 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v16 + 2), v25);
        }
        else {
          uint64_t v26 = 0;
        }
        long long v27 = (int64x2_t *)&v26[32 * v22];
        long long v28 = &v37[2 * i];
        int64x2_t v29 = v28[1];
        *long long v27 = *v28;
        v27[1] = v29;
        float64x2_t v31 = (int64x2_t *)*v16;
        uint64_t v30 = (int64x2_t *)v16[1];
        long long v32 = v27;
        if (v30 != *v16)
        {
          do
          {
            int64x2_t v33 = v30[-2];
            int64x2_t v34 = v30[-1];
            v30 -= 2;
            v32[-2] = v33;
            v32[-1] = v34;
            v32 -= 2;
          }
          while (v30 != v31);
          uint64_t v30 = (int64x2_t *)*v16;
        }
        long long v21 = v27 + 2;
        *uint64_t v16 = v32;
        v16[1] = &v27[2];
        v16[2] = &v26[32 * v25];
        if (v30) {
          operator delete(v30);
        }
      }
      else
      {
        uint64_t v19 = &v37[2 * i];
        int64x2_t v20 = v19[1];
        *unint64_t v17 = *v19;
        v17[1] = v20;
        long long v21 = v17 + 2;
      }
      v16[1] = v21;
    }
  }
  return v14 != 0;
}

void _ZNSt3__110__function6__funcIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_dNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIdLh3EEERSA_EUlRKNS2_4bboxIdLh3EEEE_NS8_ISQ_EEFbSP_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_dNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIdLh3EEERSA_EUlRKNS2_4bboxIdLh3EEEE_NS8_ISQ_EEFbSP_EE7__cloneEv(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA05BD0;
  result[1] = v3;
  return result;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_dNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIdLh3EEERSA_EUlRKNS2_4bboxIdLh3EEEE_NS8_ISQ_EEFbSP_EE7__cloneEPNS0_6__baseISS_EE(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA05BD0;
  a2[1] = v2;
  return result;
}

BOOL _ZNSt3__110__function6__funcIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_dNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIdLh3EEERSA_EUlRKNS2_4bboxIdLh3EEEE_NS8_ISQ_EEFbSP_EEclESP_(uint64_t a1, float64x2_t *a2)
{
  uint64_t v2 = *(float64x2_t **)(a1 + 8);
  int64x2_t v3 = vcgtq_f64(*a2, v2[2]);
  if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v3, 1), vorrq_s8((int8x16_t)vcgtq_f64(a2[1], v2[3]), (int8x16_t)v3)).u64[0] & 0x8000000000000000) != 0) {
    return 0;
  }
  int64x2_t v4 = vcgtq_f64(*v2, a2[2]);
  return vorrq_s8((int8x16_t)vdupq_laneq_s64(v4, 1), vorrq_s8((int8x16_t)vcgtq_f64(v2[1], a2[3]), (int8x16_t)v4)).i64[0] >= 0;
}

uint64_t _ZNKSt3__110__function6__funcIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_dNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIdLh3EEERSA_EUlRKNS2_4bboxIdLh3EEEE_NS8_ISQ_EEFbSP_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNSt3__16vectorIDv3_dNS3_9allocatorIS5_EEEERKNS4_IjNS6_IjEEEERKNS_3bvhIdLh3EEERS8_EUlRKNS_4bboxIdLh3EEEE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNS_6vectorIDv3_dNS_9allocatorIS7_EEEERKNS6_IjNS8_IjEEEERKNS2_3bvhIdLh3EEERSA_EUlRKNS2_4bboxIdLh3EEEE_NS8_ISQ_EEFbSP_EE11target_typeEv()
{
  return &_ZTIZNK4geom7clusterIdE31find_explicit_surface_crossingsEDv3_jRKNSt3__16vectorIDv3_dNS3_9allocatorIS5_EEEERKNS4_IjNS6_IjEEEERKNS_3bvhIdLh3EEERS8_EUlRKNS_4bboxIdLh3EEEE_;
}

void *std::__function::__value_func<BOOL ()(geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t ___ZN4geom26dispatch_apply_with_strideIZNS_24parallel_reduce_in_placeIdNS_11plus_equalsIdEEEEvRNSt3__16vectorIT_NS4_9allocatorIS6_EEEEmP16dispatch_queue_sT0_EUlmmE_EEmmmSC_S6__block_invoke(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 32);
  unint64_t v2 = *(void *)(result + 40);
  unint64_t v4 = v3 * a2;
  if (v2 >= v3 * a2 + v3) {
    unint64_t v2 = v3 * a2 + v3;
  }
  BOOL v5 = v2 > v4;
  unint64_t v6 = v2 - v4;
  if (v5)
  {
    unint64_t v7 = *(void *)(result + 56);
    unint64_t v8 = **(void **)(result + 48);
    uint64_t v9 = v3 * v8 * a2;
    do
    {
      if ((v8 >> 1) + v9 < v7)
      {
        float64x2_t v10 = (double *)(**(void **)(result + 64) + 8 * v9);
        *float64x2_t v10 = v10[v8 >> 1] + *v10;
      }
      v9 += v8;
      --v6;
    }
    while (v6);
  }
  return result;
}

void geom::acd<float>::impl::init(uint64_t a1, float32x4_t *a2, unint64_t a3, _DWORD *a4, std::vector<unsigned int>::size_type a5, unsigned int a6, int a7, float a8)
{
  uint64_t v11 = a2;
  float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  if (a3)
  {
    uint64_t v14 = 16 * a3;
    v15.i64[0] = 0x7F0000007FLL;
    v15.i32[2] = 127;
    uint64_t v16 = a2;
    do
    {
      float32x4_t v17 = *v16++;
      float32x4_t v18 = v17;
      v18.i32[3] = 0;
      v13.i32[3] = 0;
      float32x4_t v13 = vminnmq_f32(v18, v13);
      v15.i32[3] = 0;
      float32x4_t v15 = vmaxnmq_f32(v18, v15);
      v14 -= 16;
    }
    while (v14);
  }
  else
  {
    v15.i64[0] = 0x7F0000007FLL;
    v15.i64[1] = 0x7F0000007FLL;
  }
  float32x4_t v49 = v13;
  *(float32x4_t *)(a1 + 16) = v13;
  *(float32x4_t *)(a1 + 32) = v15;
  float32x4_t v46 = v15;
  *(_DWORD *)(a1 + 328) = a7;
  uint64_t v19 = (float32x4_t **)(a1 + 48);
  *(float *)(a1 + 332) = a8;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)(a1 + 48), a3);
  if (a3)
  {
    long long v21 = &v11[a3];
    v22.i64[0] = 0x3F0000003F000000;
    v22.i64[1] = 0x3F0000003F000000;
    float32x4_t v23 = vmulq_f32(vaddq_f32(v49, v46), v22);
    float32x4_t v24 = vmulq_f32(vsubq_f32(v46, v49), v22);
    v24.f32[0] = fmaxf(fmaxf(v24.f32[0], v24.f32[2]), v24.f32[1]);
    if (v24.f32[0] <= 0.00000011921) {
      v24.f32[0] = 1.0;
    }
    float32x4_t v25 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 0);
    uint64_t v26 = (void *)(a1 + 64);
    long long v27 = *(float32x4_t **)(a1 + 56);
    float32x4_t v47 = v25;
    float32x4_t v48 = v23;
    do
    {
      float32x4_t v20 = vdivq_f32(vsubq_f32(*v11, v23), v25);
      if ((unint64_t)v27 >= *v26)
      {
        uint64_t v28 = v27 - *v19;
        if ((unint64_t)(v28 + 1) >> 60) {
          abort();
        }
        uint64_t v29 = *v26 - (void)*v19;
        uint64_t v30 = v29 >> 3;
        if (v29 >> 3 <= (unint64_t)(v28 + 1)) {
          uint64_t v30 = v28 + 1;
        }
        if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v31 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v31 = v30;
        }
        if (v31)
        {
          float32x4_t v50 = v20;
          long long v32 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1 + 64, v31);
          float32x4_t v20 = v50;
        }
        else
        {
          long long v32 = 0;
        }
        int64x2_t v33 = (float32x4_t *)&v32[16 * v28];
        *int64x2_t v33 = v20;
        long long v27 = v33 + 1;
        float64x2_t v35 = *(float32x4_t **)(a1 + 48);
        int64x2_t v34 = *(float32x4_t **)(a1 + 56);
        if (v34 != v35)
        {
          do
          {
            float32x4_t v36 = v34[-1];
            --v34;
            v20.i32[1] = v36.i32[1];
            v33[-1] = v36;
            --v33;
          }
          while (v34 != v35);
          int64x2_t v34 = *v19;
        }
        *(void *)(a1 + 48) = v33;
        *(void *)(a1 + 56) = v27;
        *(void *)(a1 + 64) = &v32[16 * v31];
        if (v34) {
          operator delete(v34);
        }
        float32x4_t v25 = v47;
        float32x4_t v23 = v48;
      }
      else
      {
        *v27++ = v20;
      }
      *(void *)(a1 + 56) = v27;
      ++v11;
    }
    while (v11 != v21);
  }
  if (a6 >= 0x15) {
    int v37 = 21;
  }
  else {
    int v37 = a6;
  }
  uint64_t v38 = ((1 << v37) - 1);
  v20.f32[0] = 2.0 / (float)v38;
  *(_DWORD *)(a1 + 160) = v37;
  *(_DWORD *)(a1 + 164) = 1 << v37;
  *(void *)(a1 + 168) = v38;
  __asm { FMOV            V1.4S, #-1.0 }
  *(int32x4_t *)(a1 + 176) = vdupq_lane_s32(*(int32x2_t *)v20.f32, 0);
  *(_OWORD *)(a1 + 192) = _Q1;
  __asm { FMOV            V0.4S, #1.0 }
  *(_OWORD *)(a1 + 208) = _Q0;
  std::vector<unsigned int>::reserve((std::vector<unsigned int> *)(a1 + 72), a5);
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>(a4, &a4[a5], a1 + 72);
  geom::cut_directions_hierarchy<float>::init(a1 + 256, 5);
  geom::create_approximate_winding_number_3<float>();
}

void geom::cut_directions_hierarchy<float>::init(uint64_t a1, int a2)
{
  v37[22] = *MEMORY[0x263EF8340];
  unint64_t v4 = (uint64_t *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
  for (uint64_t i = *(void *)(a1 + 56);
        i != v5;
  *(void *)(a1 + 56) = v5;
  unint64_t v7 = *(void **)a1;
  *(void *)(a1 + 8) = *(void *)a1;
  unint64_t v31 = 0;
  long long v32 = 0uLL;
  std::vector<int> __p = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  memset(v26, 0, sizeof(v26));
  int v27 = 1065353216;
  if (a2)
  {
    int v8 = 0;
    do
    {
      if (v8)
      {
        geom::subdivide_triangle_mesh<float>((float32x4_t **)&v31, &__p, v26);
      }
      else
      {
        long long v35 = xmmword_236F193B0;
        v36[0] = unk_236F193C0;
        v36[1] = xmmword_236F193D0;
        long long __src = xmmword_236F19390;
        long long v34 = unk_236F193A0;
        _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l((char *)&v31, (char *)&__src, (uint64_t)v37, 5uLL);
        long long __src = xmmword_236F19580;
        long long v34 = unk_236F19590;
        long long v35 = xmmword_236F195A0;
        std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)&__p, (char *)&__src, (uint64_t)v36, 0xCuLL);
      }
      uint64_t v9 = ((void)v32 - (void)v31) >> 4;
      uint64_t v11 = *(char **)(a1 + 32);
      unint64_t v10 = *(void *)(a1 + 40);
      if ((unint64_t)v11 >= v10)
      {
        float32x4_t v13 = *(char **)(a1 + 24);
        uint64_t v14 = (v11 - v13) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          abort();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          float32x4_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 40, v17);
          float32x4_t v13 = *(char **)(a1 + 24);
          uint64_t v11 = *(char **)(a1 + 32);
        }
        else
        {
          float32x4_t v18 = 0;
        }
        uint64_t v19 = &v18[4 * v14];
        *(_DWORD *)uint64_t v19 = v9;
        float64x2_t v12 = v19 + 4;
        while (v11 != v13)
        {
          int v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        *(void *)(a1 + 24) = v19;
        *(void *)(a1 + 32) = v12;
        *(void *)(a1 + 40) = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v11 = v9;
        float64x2_t v12 = v11 + 4;
      }
      *(void *)(a1 + 32) = v12;
      geom::triangle_mesh_connectivity::make((geom::triangle_mesh_connectivity *)(((void)v32 - (void)v31) >> 4), __p, (v29 - (unsigned char *)__p) >> 2, &__src);
      std::vector<geom::triangle_mesh_connectivity>::push_back[abi:nn180100](v4, (uint64_t)&__src);
      std::__optional_destruct_base<std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>,false>::~__optional_destruct_base[abi:nn180100]((geom::triangle_mesh_connectivity *)&__src);
      ++v8;
    }
    while (v8 != a2);
    unint64_t v7 = *(void **)a1;
  }
  if (v7)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  long long v21 = (float32x4_t *)v31;
  *(void *)a1 = v31;
  float32x4_t v22 = (float32x4_t *)v32;
  *(_OWORD *)(a1 + 8) = v32;
  long long v32 = 0uLL;
  unint64_t v31 = 0;
  while (v21 != v22)
  {
    int32x4_t v23 = (int32x4_t)vmulq_f32(*v21, *v21);
    v23.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v23, 2), vadd_f32(*(float32x2_t *)v23.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v23.i8, 1))).u32[0];
    float32x2_t v24 = vrsqrte_f32((float32x2_t)v23.u32[0]);
    float32x2_t v25 = vmul_f32(v24, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v24, v24)));
    *long long v21 = vmulq_n_f32(*v21, vmul_f32(v25, vrsqrts_f32((float32x2_t)v23.u32[0], vmul_f32(v25, v25))).f32[0]);
    ++v21;
  }
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)v26);
  if (__p)
  {
    uint64_t v29 = __p;
    operator delete(__p);
  }
  if (v31)
  {
    *(void *)&long long v32 = v31;
    operator delete(v31);
  }
}

uint64_t geom::acd<float>::impl::merge_clusters_automatically(uint64_t a1, uint64_t a2)
{
  long long v25 = 0u;
  long long v24 = 0u;
  int v26 = 1065353216;
  uint64_t v5 = (void *)(a1 + 112);
  geom::cluster_parallel_merger<float>::init((uint64_t)v23, a1 + 112, a1 + 224, *(_DWORD *)(a1 + 328), *(float *)(a1 + 332));
  if (*(void *)(a1 + 136) >= 2uLL)
  {
    do
    {
      unint64_t v6 = (unsigned int *)v25;
      if ((void)v25)
      {
        float v7 = INFINITY;
        do
        {
          if (**((float **)v6 + 3) > 0.00000011921)
          {
            int v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(v5, v6 + 4);
            if (!v8
              || (uint64_t v9 = v8,
                  (unint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(v5, v6 + 5)) == 0))
            {
              abort();
            }
            uint64_t v11 = v10;
            uint64_t v12 = v9[3];
            uint64_t v14 = *(float **)v12;
            float32x4_t v13 = *(std::__shared_weak_count **)(v12 + 8);
            if (v13)
            {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
              float v15 = *v14;
              std::__shared_weak_count::__release_shared[abi:nn180100](v13);
            }
            else
            {
              float v15 = *v14;
            }
            uint64_t v16 = v11[3];
            float32x4_t v18 = *(float **)v16;
            unint64_t v17 = *(std::__shared_weak_count **)(v16 + 8);
            if (v17)
            {
              atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
              float v19 = *v18;
              std::__shared_weak_count::__release_shared[abi:nn180100](v17);
            }
            else
            {
              float v19 = *v18;
            }
            float v20 = **((float **)v6 + 3);
            if (v20 > 0.00000011921)
            {
              float v21 = (float)((float)(v20 - v15) - v19) / v20;
              if (v21 < v7)
              {
                float v7 = v21;
                unint64_t v2 = *((void *)v6 + 2);
              }
            }
          }
          unint64_t v6 = *(unsigned int **)v6;
        }
        while (v6);
      }
      else
      {
        float v7 = INFINITY;
      }
      if (v7 > *(float *)(a2 + 8)) {
        break;
      }
      geom::cluster_parallel_merger<float>::perform_merge((uint64_t *)v23, v2);
    }
    while (*(void *)(a1 + 136) > 1uLL);
  }
  geom::cluster_parallel_merger<float>::deinit(v23);
  return std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::~__hash_table((uint64_t)&v24);
}

void geom::acd<float>::impl::get_hull_of_cluster(float32x4_t *a1, unsigned int a2, char **a3, std::vector<unsigned int> *a4)
{
  unsigned int v33 = a2;
  float32x4_t v29 = a1[1];
  float32x4_t v31 = a1[2];
  unint64_t v6 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((float32x4_t *)a1[7].i64, &v33);
  if (!v6) {
LABEL_27:
  }
    abort();
  float v7 = (void *)v6[3];
  uint64_t v9 = (void *)*v7;
  int v8 = (std::__shared_weak_count *)v7[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a3[1] = *a3;
  a4->__end_ = a4->__begin_;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)a3, (uint64_t)(v9[7] - v9[6]) >> 4);
  std::vector<unsigned int>::reserve(a4, (uint64_t)(v9[10] - v9[9]) >> 2);
  unint64_t v10 = (float32x4_t *)v9[6];
  uint64_t v11 = (float32x4_t *)v9[7];
  if (v10 != v11)
  {
    float32x4_t v12 = vsubq_f32(v31, v29);
    v13.i64[0] = 0x3F0000003F000000;
    v13.i64[1] = 0x3F0000003F000000;
    v12.f32[0] = fmaxf(fmaxf(v12.f32[0], v12.f32[2]), v12.f32[1]) * 0.5;
    float32x4_t v14 = vmulq_f32(vaddq_f32(v31, v29), v13);
    float32x4_t v15 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v12.f32, 0);
    uint64_t v16 = a3 + 2;
    unint64_t v17 = (float32x4_t *)a3[1];
    float32x4_t v28 = v15;
    float32x4_t v30 = v14;
    do
    {
      float32x4_t v18 = vmlaq_f32(v14, v15, *v10);
      if ((unint64_t)v17 >= *v16)
      {
        uint64_t v19 = ((char *)v17 - *a3) >> 4;
        if ((unint64_t)(v19 + 1) >> 60) {
          goto LABEL_27;
        }
        uint64_t v20 = *v16 - (void)*a3;
        uint64_t v21 = v20 >> 3;
        if (v20 >> 3 <= (unint64_t)(v19 + 1)) {
          uint64_t v21 = v19 + 1;
        }
        if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v22 = v21;
        }
        if (v22)
        {
          float32x4_t v32 = v18;
          int32x4_t v23 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v22);
          float32x4_t v18 = v32;
        }
        else
        {
          int32x4_t v23 = 0;
        }
        long long v24 = (float32x4_t *)&v23[16 * v19];
        *long long v24 = v18;
        unint64_t v17 = v24 + 1;
        int v26 = *a3;
        long long v25 = a3[1];
        if (v25 != *a3)
        {
          do
          {
            float32x4_t v27 = *((float32x4_t *)v25 - 1);
            v25 -= 16;
            v24[-1] = v27;
            --v24;
          }
          while (v25 != v26);
          long long v25 = *a3;
        }
        *a3 = (char *)v24;
        a3[1] = (char *)v17;
        a3[2] = &v23[16 * v22];
        if (v25) {
          operator delete(v25);
        }
        float32x4_t v15 = v28;
        float32x4_t v14 = v30;
      }
      else
      {
        *v17++ = v18;
      }
      a3[1] = (char *)v17;
      ++v10;
    }
    while (v10 != v11);
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>((_DWORD *)v9[9], (_DWORD *)v9[10], (uint64_t)a4);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v8);
  }
}

void geom::acd<float>::impl::split_cluster_with_plane(float32x4_t *a1, unsigned int a2, float32x4_t *a3)
{
  unsigned int v18 = a2;
  float32x4_t v5 = a1[1];
  float32x4_t v4 = a1[2];
  float32x4_t v6 = vsubq_f32(v4, v5);
  float32x4_t v7 = vaddq_f32(v4, v5);
  v5.i64[0] = 0x3F0000003F000000;
  v5.i64[1] = 0x3F0000003F000000;
  float32x4_t v8 = vmulq_f32(*a3, vmulq_f32(v7, v5));
  v8.f32[0] = (float)(a3[1].f32[0]
                    + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0])/ (float)(fmaxf(fmaxf(v6.f32[0], v6.f32[2]), v6.f32[1]) * 0.5);
  float32x4_t v16 = *a3;
  __int32 v17 = v8.i32[0];
  uint64_t v9 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((float32x4_t *)a1[7].i64, &v18);
  if (v9)
  {
    uint64_t v12 = 0;
    memset(v11, 0, sizeof(v11));
    geom::cluster_parallel_clipper<float>::init((uint64_t *)v11, (void *)v9[3], (uint64_t)&a1[14], (uint64_t)&v16, 1);
    size_t v10 = ((v15 + ((uint64_t)(v13[12] - v13[11]) >> 3) - 1) / v15 + (v14 + ((uint64_t)(v13[15] - v13[14]) >> 4) - 1) / v14)
        * v12;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN4geom14dispatch_applyIZNS_24cluster_parallel_clipperIfE24compute_clipped_clustersEvEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke;
    block[3] = &__block_descriptor_tmp_1;
    block[4] = v11;
    dispatch_apply(v10, 0, block);
    operator new();
  }
  abort();
}

uint64_t *geom::acd<float>::impl::merge_clusters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v12 = a3;
  unsigned int v13 = a2;
  float32x4_t v4 = (void *)(a1 + 112);
  float32x4_t v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((void *)(a1 + 112), &v12);
  if (!v5
    || (float32x4_t v6 = v5,
        (float32x4_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(v4, &v13)) == 0))
  {
    abort();
  }
  uint64_t v8 = v7[3];
  uint64_t v9 = v6[3];
  long long v11 = 0uLL;
  geom::cluster<float>::merge_into(v8, v9, &v11, a1 + 224);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  return std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__erase_unique<unsigned int>(v4, &v12);
}

void geom::acd<double>::impl::init(uint64_t a1, float64x2_t *a2, unint64_t a3, _DWORD *a4, std::vector<unsigned int>::size_type a5, unsigned int a6, int a7, double a8, double a9, double a10, float64x2_t a11, float64x2_t a12)
{
  unint64_t v15 = a2;
  if (a3)
  {
    a12.f64[0] = INFINITY;
    a11.f64[0] = -INFINITY;
    float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v18 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    uint64_t v19 = 32 * a3;
    uint64_t v20 = a2;
    do
    {
      float64x2_t v21 = *v20;
      float64x2_t v22 = v20[1];
      v20 += 2;
      float64x2_t v17 = vminnmq_f64(v21, v17);
      a12 = vminnmq_f64((float64x2_t)*(unint64_t *)&v22.f64[0], (float64x2_t)*(unint64_t *)&a12.f64[0]);
      float64x2_t v18 = vmaxnmq_f64(v21, v18);
      a11 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v22.f64[0], (float64x2_t)*(unint64_t *)&a11.f64[0]);
      v19 -= 32;
    }
    while (v19);
  }
  else
  {
    a11.f64[0] = -INFINITY;
    a12.f64[0] = INFINITY;
    float64x2_t v18 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  }
  float64x2_t v60 = v17;
  float64x2_t v62 = a12;
  *(float64x2_t *)(a1 + 16) = v17;
  *(float64x2_t *)(a1 + 32) = a12;
  float64x2_t v56 = v18;
  *(float64x2_t *)(a1 + 48) = v18;
  *(float64x2_t *)(a1 + 64) = a11;
  float64x2_t v64 = a11;
  *(_DWORD *)(a1 + 408) = a7;
  int32x4_t v23 = (int8x16_t **)(a1 + 80);
  *(double *)(a1 + 416) = a8;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm((void **)(a1 + 80), a3);
  if (a3)
  {
    long long v25 = &v15[2 * a3];
    __asm { FMOV            V2.2D, #0.5 }
    float64x2_t v31 = vmulq_f64(vaddq_f64(v60, v56), _Q2);
    float64x2_t v32 = vmulq_f64(vaddq_f64(v62, v64), _Q2);
    float64x2_t v33 = vmulq_f64(vsubq_f64(v56, v60), _Q2);
    double v34 = fmax(fmax(v33.f64[0], vmulq_f64(vsubq_f64(v64, v62), _Q2).f64[0]), v33.f64[1]);
    if (v34 <= 2.22044605e-16) {
      _Q2.f64[0] = 1.0;
    }
    else {
      _Q2.f64[0] = v34;
    }
    long long v35 = (void *)(a1 + 96);
    float32x4_t v36 = *(int8x16_t **)(a1 + 88);
    v37.f64[0] = _Q2.f64[0];
    v37.f64[1] = _Q2.f64[0];
    float64x2_t v58 = v32;
    float64x2_t v59 = v31;
    float64x2_t v55 = v37;
    float64x2_t v57 = _Q2;
    do
    {
      float64x2_t v38 = vdivq_f64(vsubq_f64(v15[1], v32), _Q2);
      int8x16_t v24 = (int8x16_t)vdivq_f64(vsubq_f64(*v15, v31), v37);
      unint64_t v39 = vextq_s8(v24, v24, 8uLL).u64[0];
      if ((unint64_t)v36 >= *v35)
      {
        uint64_t v40 = ((char *)v36 - (char *)*v23) >> 5;
        if ((unint64_t)(v40 + 1) >> 59) {
          abort();
        }
        uint64_t v41 = *v35 - (void)*v23;
        uint64_t v42 = v41 >> 4;
        if (v41 >> 4 <= (unint64_t)(v40 + 1)) {
          uint64_t v42 = v40 + 1;
        }
        if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v43 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v42;
        }
        if (v43)
        {
          float64x2_t v63 = v38;
          uint64_t v65 = v24.i64[0];
          unint64_t v61 = v39;
          unint64_t v44 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a1 + 96, v43);
          unint64_t v39 = v61;
          float64x2_t v38 = v63;
          v24.i64[0] = v65;
        }
        else
        {
          unint64_t v44 = 0;
        }
        v24.i64[1] = v39;
        uint64_t v45 = (int8x16_t *)&v44[32 * v40];
        *uint64_t v45 = v24;
        v45[1] = (int8x16_t)v38;
        float32x4_t v47 = *(int8x16_t **)(a1 + 80);
        float32x4_t v46 = *(int8x16_t **)(a1 + 88);
        float32x4_t v48 = v45;
        if (v46 != v47)
        {
          do
          {
            int8x16_t v24 = v46[-2];
            int8x16_t v49 = v46[-1];
            v46 -= 2;
            v48[-2] = v24;
            v48[-1] = v49;
            v48 -= 2;
          }
          while (v46 != v47);
          float32x4_t v46 = *v23;
        }
        float32x4_t v36 = v45 + 2;
        *(void *)(a1 + 80) = v48;
        *(void *)(a1 + 88) = v45 + 2;
        *(void *)(a1 + 96) = &v44[32 * v43];
        if (v46) {
          operator delete(v46);
        }
        float64x2_t v32 = v58;
        float64x2_t v31 = v59;
        float64x2_t v37 = v55;
        _Q2 = v57;
      }
      else
      {
        v24.i64[1] = v39;
        *float32x4_t v36 = v24;
        v36[1] = (int8x16_t)v38;
        v36 += 2;
      }
      *(void *)(a1 + 88) = v36;
      v15 += 2;
    }
    while (v15 != v25);
  }
  if (a6 >= 0x15) {
    int v50 = 21;
  }
  else {
    int v50 = a6;
  }
  uint64_t v51 = ((1 << v50) - 1);
  *(double *)v24.i64 = 2.0 / (double)v51;
  *(_DWORD *)(a1 + 192) = v50;
  *(_DWORD *)(a1 + 196) = 1 << v50;
  *(void *)(a1 + 200) = v51;
  *(int64x2_t *)(a1 + 208) = vdupq_lane_s64(v24.i64[0], 0);
  *(int8x16_t *)(a1 + 224) = v24;
  __asm { FMOV            V0.2D, #-1.0 }
  *(_OWORD *)(a1 + 240) = _Q0;
  *(_OWORD *)(a1 + 256) = _Q0;
  __asm { FMOV            V0.2D, #1.0 }
  *(_OWORD *)(a1 + 272) = _Q0;
  *(_OWORD *)(a1 + 288) = _Q0;
  std::vector<unsigned int>::reserve((std::vector<unsigned int> *)(a1 + 104), a5);
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>(a4, &a4[a5], a1 + 104);
  geom::cut_directions_hierarchy<double>::init(a1 + 336, 5);
  geom::create_approximate_winding_number_3<double>();
}

void geom::cut_directions_hierarchy<double>::init(uint64_t a1, int a2)
{
  v36[12] = *MEMORY[0x263EF8340];
  float32x4_t v4 = (uint64_t *)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 32) = *(void *)(a1 + 24);
  for (uint64_t i = *(void *)(a1 + 56);
        i != v5;
  *(void *)(a1 + 56) = v5;
  float32x4_t v7 = *(void **)a1;
  *(void *)(a1 + 8) = *(void *)a1;
  j = 0;
  long long v31 = 0uLL;
  std::vector<int> __p = 0;
  float32x4_t v28 = 0;
  uint64_t v29 = 0;
  memset(v25, 0, sizeof(v25));
  int v26 = 1065353216;
  if (a2)
  {
    int v8 = 0;
    do
    {
      if (v8)
      {
        geom::subdivide_triangle_mesh<double>(&j, &__p, v25);
      }
      else
      {
        v35[3] = xmmword_236F19540;
        v35[4] = unk_236F19550;
        v35[5] = xmmword_236F19560;
        v35[6] = unk_236F19570;
        long long v34 = xmmword_236F19500;
        memset(v35, 0, 32);
        unsigned int v35[2] = unk_236F19530;
        long long __src = xmmword_236F194E0;
        long long v33 = *(_OWORD *)algn_236F194F0;
        _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE18__assign_with_sizeB8nn180100IPS1_S6_EEvT_T0_l((char *)&j, (char *)&__src, (uint64_t)v36, 5uLL);
        long long __src = xmmword_236F19580;
        long long v33 = unk_236F19590;
        long long v34 = xmmword_236F195A0;
        std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>((char *)&__p, (char *)&__src, (uint64_t)v35, 0xCuLL);
      }
      uint64_t v9 = ((void)v31 - (void)j) >> 5;
      long long v11 = *(char **)(a1 + 32);
      unint64_t v10 = *(void *)(a1 + 40);
      if ((unint64_t)v11 >= v10)
      {
        unsigned int v13 = *(char **)(a1 + 24);
        uint64_t v14 = (v11 - v13) >> 2;
        unint64_t v15 = v14 + 1;
        if ((unint64_t)(v14 + 1) >> 62) {
          abort();
        }
        uint64_t v16 = v10 - (void)v13;
        if (v16 >> 1 > v15) {
          unint64_t v15 = v16 >> 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v17 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v17 = v15;
        }
        if (v17)
        {
          float64x2_t v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>(a1 + 40, v17);
          unsigned int v13 = *(char **)(a1 + 24);
          long long v11 = *(char **)(a1 + 32);
        }
        else
        {
          float64x2_t v18 = 0;
        }
        uint64_t v19 = &v18[4 * v14];
        *(_DWORD *)uint64_t v19 = v9;
        unsigned int v12 = v19 + 4;
        while (v11 != v13)
        {
          int v20 = *((_DWORD *)v11 - 1);
          v11 -= 4;
          *((_DWORD *)v19 - 1) = v20;
          v19 -= 4;
        }
        *(void *)(a1 + 24) = v19;
        *(void *)(a1 + 32) = v12;
        *(void *)(a1 + 40) = &v18[4 * v17];
        if (v13) {
          operator delete(v13);
        }
      }
      else
      {
        *(_DWORD *)long long v11 = v9;
        unsigned int v12 = v11 + 4;
      }
      *(void *)(a1 + 32) = v12;
      geom::triangle_mesh_connectivity::make((geom::triangle_mesh_connectivity *)(((void)v31 - (void)j) >> 5), __p, (v28 - (unsigned char *)__p) >> 2, &__src);
      std::vector<geom::triangle_mesh_connectivity>::push_back[abi:nn180100](v4, (uint64_t)&__src);
      std::__optional_destruct_base<std::pair<geom::triangle_mesh_connectivity,std::optional<std::vector<unsigned int>>>,false>::~__optional_destruct_base[abi:nn180100]((geom::triangle_mesh_connectivity *)&__src);
      ++v8;
    }
    while (v8 != a2);
    float32x4_t v7 = *(void **)a1;
  }
  if (v7)
  {
    *(void *)(a1 + 8) = v7;
    operator delete(v7);
  }
  float64x2_t v21 = (float64x2_t *)j;
  *(void *)a1 = j;
  float64x2_t v22 = (float64x2_t *)v31;
  *(_OWORD *)(a1 + 8) = v31;
  long long v31 = 0uLL;
  for (j = 0; v21 != v22; v21 += 2)
  {
    float64x2_t v23 = v21[1];
    float64x2_t v24 = vmulq_f64(v23, v23);
    v24.f64[0] = 1.0 / sqrt(v24.f64[0] + vaddvq_f64(vmulq_f64(*v21, *v21)));
    *float64x2_t v21 = vmulq_n_f64(*v21, v24.f64[0]);
    v21[1] = vmulq_f64(v23, v24);
  }
  std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::~__hash_table((uint64_t)v25);
  if (__p)
  {
    float32x4_t v28 = __p;
    operator delete(__p);
  }
  if (j)
  {
    *(void *)&long long v31 = j;
    operator delete(j);
  }
}

uint64_t geom::acd<double>::impl::merge_clusters_automatically(uint64_t a1, uint64_t a2)
{
  long long v25 = 0u;
  long long v24 = 0u;
  int v26 = 1065353216;
  uint64_t v5 = (void *)(a1 + 144);
  geom::cluster_parallel_merger<double>::init((uint64_t)v23, a1 + 144, a1 + 304, *(_DWORD *)(a1 + 408), *(double *)(a1 + 416));
  if (*(void *)(a1 + 168) >= 2uLL)
  {
    do
    {
      float32x4_t v6 = (unsigned int *)v25;
      if ((void)v25)
      {
        double v7 = INFINITY;
        do
        {
          if (**((double **)v6 + 3) > 2.22044605e-16)
          {
            int v8 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(v5, v6 + 4);
            if (!v8
              || (uint64_t v9 = v8,
                  (unint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(v5, v6 + 5)) == 0))
            {
              abort();
            }
            long long v11 = v10;
            uint64_t v12 = v9[3];
            uint64_t v14 = *(double **)v12;
            unsigned int v13 = *(std::__shared_weak_count **)(v12 + 8);
            if (v13)
            {
              atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
              double v15 = *v14;
              std::__shared_weak_count::__release_shared[abi:nn180100](v13);
            }
            else
            {
              double v15 = *v14;
            }
            uint64_t v16 = v11[3];
            float64x2_t v18 = *(double **)v16;
            unint64_t v17 = *(std::__shared_weak_count **)(v16 + 8);
            if (v17)
            {
              atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
              double v19 = *v18;
              std::__shared_weak_count::__release_shared[abi:nn180100](v17);
            }
            else
            {
              double v19 = *v18;
            }
            double v20 = **((double **)v6 + 3);
            if (v20 > 2.22044605e-16)
            {
              double v21 = (v20 - v15 - v19) / v20;
              if (v21 < v7)
              {
                double v7 = v21;
                unint64_t v2 = *((void *)v6 + 2);
              }
            }
          }
          float32x4_t v6 = *(unsigned int **)v6;
        }
        while (v6);
      }
      else
      {
        double v7 = INFINITY;
      }
      if (v7 > *(double *)(a2 + 16)) {
        break;
      }
      geom::cluster_parallel_merger<double>::perform_merge(v23, v2);
    }
    while (*(void *)(a1 + 168) > 1uLL);
  }
  geom::cluster_parallel_merger<double>::deinit((void **)v23);
  return std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::~__hash_table((uint64_t)&v24);
}

void geom::acd<double>::impl::get_hull_of_cluster(uint64_t a1, unsigned int a2, char **a3, std::vector<unsigned int> *a4)
{
  unsigned int v49 = a2;
  float64x2_t v45 = *(float64x2_t *)(a1 + 48);
  float64x2_t v47 = *(float64x2_t *)(a1 + 64);
  float64x2_t v41 = *(float64x2_t *)(a1 + 16);
  float64x2_t v43 = *(float64x2_t *)(a1 + 32);
  float32x4_t v6 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((void *)(a1 + 144), &v49);
  if (!v6) {
LABEL_27:
  }
    abort();
  double v7 = (void *)v6[3];
  uint64_t v9 = (void *)*v7;
  int v8 = (std::__shared_weak_count *)v7[1];
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  a3[1] = *a3;
  a4->__end_ = a4->__begin_;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm((void **)a3, (uint64_t)(v9[11] - v9[10]) >> 5);
  std::vector<unsigned int>::reserve(a4, (uint64_t)(v9[14] - v9[13]) >> 2);
  unint64_t v10 = (float64x2_t *)v9[10];
  long long v11 = (float64x2_t *)v9[11];
  if (v10 != v11)
  {
    float64x2_t v12 = vsubq_f64(v45, v41);
    __asm { FMOV            V3.2D, #0.5 }
    float64x2_t v19 = vaddq_f64(v47, v43);
    float64x2_t v23 = vmulq_f64(vaddq_f64(v45, v41), _Q3);
    float64x2_t v18 = vmulq_f64(v19, _Q3);
    v19.f64[0] = fmax(fmax(v12.f64[0], vsubq_f64(v47, v43).f64[0]), v12.f64[1]) * 0.5;
    double v20 = a3 + 2;
    double v21 = (int8x16_t *)a3[1];
    v22.f64[0] = v19.f64[0];
    v22.f64[1] = v19.f64[0];
    *(void *)&v23.f64[1] = vextq_s8((int8x16_t)v23, (int8x16_t)v23, 8uLL).u64[0];
    float64x2_t v40 = v18;
    float64x2_t v42 = v23;
    float64x2_t v38 = v22;
    float64x2_t v39 = v19;
    do
    {
      int8x16_t v24 = (int8x16_t)vmlaq_f64(v23, v22, *v10);
      unint64_t v25 = vextq_s8(v24, v24, 8uLL).u64[0];
      float64x2_t v26 = vmlaq_f64(v18, v19, v10[1]);
      if ((unint64_t)v21 >= *v20)
      {
        uint64_t v27 = ((char *)v21 - *a3) >> 5;
        if ((unint64_t)(v27 + 1) >> 59) {
          goto LABEL_27;
        }
        uint64_t v28 = *v20 - (void)*a3;
        uint64_t v29 = v28 >> 4;
        if (v28 >> 4 <= (unint64_t)(v27 + 1)) {
          uint64_t v29 = v27 + 1;
        }
        if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v30 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v30 = v29;
        }
        if (v30)
        {
          float64x2_t v46 = v26;
          uint64_t v48 = v24.i64[0];
          unint64_t v44 = v25;
          long long v31 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v30);
          unint64_t v25 = v44;
          float64x2_t v26 = v46;
          v24.i64[0] = v48;
        }
        else
        {
          long long v31 = 0;
        }
        v24.i64[1] = v25;
        float64x2_t v32 = (int8x16_t *)&v31[32 * v27];
        *float64x2_t v32 = v24;
        v32[1] = (int8x16_t)v26;
        long long v34 = *a3;
        long long v33 = a3[1];
        long long v35 = v32;
        if (v33 != *a3)
        {
          do
          {
            int8x16_t v36 = *((int8x16_t *)v33 - 2);
            int8x16_t v37 = *((int8x16_t *)v33 - 1);
            v33 -= 32;
            v35[-2] = v36;
            v35[-1] = v37;
            v35 -= 2;
          }
          while (v33 != v34);
          long long v33 = *a3;
        }
        double v21 = v32 + 2;
        *a3 = (char *)v35;
        a3[1] = v32[2].i8;
        a3[2] = &v31[32 * v30];
        if (v33) {
          operator delete(v33);
        }
        float64x2_t v18 = v40;
        float64x2_t v23 = v42;
        float64x2_t v22 = v38;
        float64x2_t v19 = v39;
      }
      else
      {
        v24.i64[1] = v25;
        *double v21 = v24;
        v21[1] = (int8x16_t)v26;
        v21 += 2;
      }
      a3[1] = (char *)v21;
      v10 += 2;
    }
    while (v10 != v11);
  }
  std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>((_DWORD *)v9[13], (_DWORD *)v9[14], (uint64_t)a4);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:nn180100](v8);
  }
}

void geom::acd<double>::impl::split_cluster_with_plane(uint64_t a1, unsigned int a2, float64x2_t *a3)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  unsigned int v28 = a2;
  float64x2_t v4 = *(float64x2_t *)(a1 + 48);
  float64x2_t v5 = *(float64x2_t *)(a1 + 64);
  float64x2_t v6 = *(float64x2_t *)(a1 + 16);
  float64x2_t v7 = *(float64x2_t *)(a1 + 32);
  float64x2_t v8 = vsubq_f64(v4, v6);
  double v9 = fmax(fmax(v8.f64[0], vsubq_f64(v5, v7).f64[0]), v8.f64[1]) * 0.5;
  float64x2_t v10 = vaddq_f64(v4, v6);
  __asm { FMOV            V2.2D, #0.5 }
  float64x2_t v16 = a3[1];
  v10.f64[0] = (a3[2].f64[0]
              + vmulq_f64(v16, vmulq_f64(vaddq_f64(v5, v7), _Q2)).f64[0]
              + vaddvq_f64(vmulq_f64(*a3, vmulq_f64(v10, _Q2))))
             / v9;
  v30[0] = *a3;
  v30[1] = v16;
  float64_t v31 = v10.f64[0];
  unint64_t v17 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((void *)(a1 + 144), &v28);
  if (v17)
  {
    uint64_t v24 = 0;
    memset(v23, 0, sizeof(v23));
    geom::cluster_parallel_clipper<double>::init((uint64_t *)v23, (void *)v17[3], a1 + 304, (uint64_t)v30, 1, 0.0, v18, v19, v20, v21);
    size_t v22 = ((v27 + ((uint64_t)(v25[19] - v25[18]) >> 3) - 1) / v27 + (v26 + ((uint64_t)(v25[22] - v25[21]) >> 4) - 1) / v26)
        * v24;
    block[0] = MEMORY[0x263EF8330];
    block[1] = 0x40000000;
    block[2] = ___ZN4geom14dispatch_applyIZNS_24cluster_parallel_clipperIdE24compute_clipped_clustersEvEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke;
    block[3] = &__block_descriptor_tmp_19;
    block[4] = v23;
    dispatch_apply(v22, 0, block);
    operator new();
  }
  abort();
}

uint64_t *geom::acd<double>::impl::merge_clusters(uint64_t a1, unsigned int a2, unsigned int a3)
{
  unsigned int v12 = a3;
  unsigned int v13 = a2;
  float64x2_t v4 = (void *)(a1 + 144);
  float64x2_t v5 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>((void *)(a1 + 144), &v12);
  if (!v5
    || (float64x2_t v6 = v5,
        (float64x2_t v7 = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(v4, &v13)) == 0))
  {
    abort();
  }
  uint64_t v8 = v7[3];
  uint64_t v9 = v6[3];
  long long v11 = 0uLL;
  geom::cluster<double>::merge_into(v8, v9, &v11, a1 + 304);
  if (*((void *)&v11 + 1)) {
    std::__shared_weak_count::__release_shared[abi:nn180100](*((std::__shared_weak_count **)&v11 + 1));
  }
  return std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::__erase_unique<unsigned int>(v4, &v12);
}

uint64_t std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::~__hash_table(uint64_t a1)
{
  std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
  unint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void std::__hash_table<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,std::shared_ptr<geom::convex_mesh<float>>>>>::__deallocate_node(int a1, void *__p)
{
  if (__p)
  {
    unint64_t v2 = __p;
    do
    {
      uint64_t v3 = (void *)*v2;
      float64x2_t v4 = (std::__shared_weak_count *)v2[4];
      if (v4) {
        std::__shared_weak_count::__release_shared[abi:nn180100](v4);
      }
      operator delete(v2);
      unint64_t v2 = v3;
    }
    while (v3);
  }
}

void std::vector<geom::cluster_parallel_clipper<float>::clipping_context,std::allocator<geom::cluster_parallel_clipper<float>::clipping_context>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  char v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    float64x2_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = geom::cluster_parallel_clipper<float>::clipping_context::~clipping_context(v4 - 240);
      while ((void *)v4 != v2);
      float64x2_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t geom::cluster_parallel_clipper<float>::clipping_context::~clipping_context(uint64_t a1)
{
  unint64_t v2 = *(void **)(a1 + 144);
  if (v2)
  {
    *(void *)(a1 + 152) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 120);
  if (v3)
  {
    *(void *)(a1 + 128) = v3;
    operator delete(v3);
  }
  uint64_t v8 = (void **)(a1 + 96);
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v8);
  uint64_t v8 = (void **)(a1 + 72);
  std::vector<std::shared_ptr<geom::convex_mesh<float>>>::__destroy_vector::operator()[abi:nn180100](&v8);
  uint64_t v4 = *(void **)(a1 + 48);
  if (v4)
  {
    *(void *)(a1 + 56) = v4;
    operator delete(v4);
  }
  float64x2_t v5 = *(void **)(a1 + 24);
  if (v5)
  {
    *(void *)(a1 + 32) = v5;
    operator delete(v5);
  }
  float64x2_t v6 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v6;
    operator delete(v6);
  }
  return a1;
}

void std::vector<geom::cluster_parallel_clipper<double>::clipping_context,std::allocator<geom::cluster_parallel_clipper<double>::clipping_context>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  char v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    float64x2_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = geom::cluster_parallel_clipper<float>::clipping_context::~clipping_context(v4 - 304);
      while ((void *)v4 != v2);
      float64x2_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

_DWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,unsigned int const*,unsigned int const*,std::back_insert_iterator<std::vector<unsigned int>>,0>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v6 = a3;
  if (a1 == a2) {
    return a1;
  }
  uint64_t v4 = a2;
  do
    std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100](&v6, v3++);
  while (v3 != v4);
  return v4;
}

uint64_t *std::back_insert_iterator<std::vector<unsigned int>>::operator=[abi:nn180100](uint64_t *a1, _DWORD *a2)
{
  uint64_t v4 = *a1;
  float64x2_t v5 = *(_DWORD **)(*a1 + 8);
  uint64_t v6 = (void *)(*a1 + 16);
  if ((unint64_t)v5 >= *v6)
  {
    uint64_t v8 = *(_DWORD **)v4;
    uint64_t v9 = ((uint64_t)v5 - *(void *)v4) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      abort();
    }
    uint64_t v11 = *v6 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      unsigned int v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v6, v12);
      uint64_t v8 = *(_DWORD **)v4;
      float64x2_t v5 = *(_DWORD **)(v4 + 8);
    }
    else
    {
      unsigned int v13 = 0;
    }
    uint64_t v14 = &v13[4 * v9];
    double v15 = &v13[4 * v12];
    *(_DWORD *)uint64_t v14 = *a2;
    float64x2_t v7 = v14 + 4;
    while (v5 != v8)
    {
      int v16 = *--v5;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)uint64_t v4 = v14;
    *(void *)(v4 + 8) = v7;
    *(void *)(v4 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v5 = *a2;
    float64x2_t v7 = v5 + 1;
  }
  *(void *)(v4 + 8) = v7;
  return a1;
}

void geom::subdivide_triangle_mesh<float>(float32x4_t **a1, void *a2, void *a3)
{
  uint64_t v133 = *MEMORY[0x263EF8340];
  std::__hash_table<std::__hash_value_type<geom::edge,unsigned int>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,unsigned int>>>::clear(a3);
  uint64_t v120 = (((uint64_t)(a2[1] - *a2) >> 2) / 3uLL);
  if ((((uint64_t)(a2[1] - *a2) >> 2) / 3uLL))
  {
    uint64_t v6 = 0;
    float64x2_t v119 = (char **)(a2 + 2);
    do
    {
      uint64_t v7 = 0;
      uint64_t v121 = v6;
      unsigned int v8 = 3 * v6;
      uint64_t v9 = (char *)*a2;
      uint64_t v122 = v8 + 1;
      int v10 = *(_DWORD *)(*a2 + 4 * v122);
      int v130 = *(_DWORD *)(*a2 + 4 * v8);
      int v131 = v10;
      uint64_t v11 = v8 + 2;
      int v132 = *(_DWORD *)&v9[4 * v11];
      do
      {
        if (v7 == 2) {
          unsigned int v12 = 0;
        }
        else {
          unsigned int v12 = v7 + 1;
        }
        unsigned int v13 = *(&v130 + v12);
        unsigned int v124 = *(&v130 + v7);
        unsigned int v125 = v13;
        uint64_t v14 = std::__hash_table<std::__hash_value_type<geom::edge,unsigned int>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,unsigned int>>>::find<geom::edge>(a3, &v124);
        if (v14)
        {
          *(&v127 + v7) = *((_DWORD *)v14 + 6);
        }
        else
        {
          uint64_t v15 = v124;
          uint64_t v16 = v125;
          unint64_t v17 = *a1;
          unint64_t v18 = (unint64_t)((char *)a1[1] - (char *)*a1) >> 4;
          *(&v127 + v7) = v18;
          float64x2_t v126 = &v124;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<geom::edge,unsigned int>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,unsigned int>>>::__emplace_unique_key_args<geom::edge,std::piecewise_construct_t const&,std::tuple<geom::edge const&>,std::tuple<>>((uint64_t)a3, &v124, (uint64_t)&std::piecewise_construct, (void **)&v126)+ 6) = v18;
          v19.i64[0] = 0x3F0000003F000000;
          v19.i64[1] = 0x3F0000003F000000;
          float32x4_t v20 = vmulq_f32(vaddq_f32(v17[v15], v17[v16]), v19);
          size_t v22 = a1[1];
          unint64_t v21 = (unint64_t)a1[2];
          if ((unint64_t)v22 >= v21)
          {
            uint64_t v24 = v22 - *a1;
            if ((unint64_t)(v24 + 1) >> 60) {
              goto LABEL_173;
            }
            uint64_t v25 = v21 - (void)*a1;
            uint64_t v26 = v25 >> 3;
            if (v25 >> 3 <= (unint64_t)(v24 + 1)) {
              uint64_t v26 = v24 + 1;
            }
            if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v27 = v26;
            }
            if (v27)
            {
              float32x4_t v123 = v20;
              unsigned int v28 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), v27);
              float32x4_t v20 = v123;
            }
            else
            {
              unsigned int v28 = 0;
            }
            uint64_t v29 = (float32x4_t *)&v28[16 * v24];
            *uint64_t v29 = v20;
            float64x2_t v23 = v29 + 1;
            float64_t v31 = (char *)*a1;
            unint64_t v30 = (char *)a1[1];
            if (v30 != (char *)*a1)
            {
              do
              {
                float32x4_t v32 = *((float32x4_t *)v30 - 1);
                v30 -= 16;
                v29[-1] = v32;
                --v29;
              }
              while (v30 != v31);
              unint64_t v30 = (char *)*a1;
            }
            *a1 = v29;
            a1[1] = v23;
            a1[2] = (float32x4_t *)&v28[16 * v27];
            if (v30) {
              operator delete(v30);
            }
          }
          else
          {
            *size_t v22 = v20;
            float64x2_t v23 = v22 + 1;
          }
          a1[1] = v23;
        }
        ++v7;
      }
      while (v7 != 3);
      long long v33 = (char *)*a2;
      int v34 = v127;
      int v35 = v129;
      *(_DWORD *)(*a2 + 4 * v122) = v127;
      *(_DWORD *)&v33[4 * v11] = v35;
      int8x16_t v37 = (char *)a2[1];
      int8x16_t v36 = (char *)a2[2];
      if (v37 >= v36)
      {
        uint64_t v40 = (v37 - v33) >> 2;
        unint64_t v41 = v40 + 1;
        float64x2_t v39 = (char **)(a2 + 2);
        if ((unint64_t)(v40 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v42 = v36 - v33;
        if (v42 >> 1 > v41) {
          unint64_t v41 = v42 >> 1;
        }
        if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v43 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v43 = v41;
        }
        if (v43)
        {
          unint64_t v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v119, v43);
          long long v33 = (char *)*a2;
          int8x16_t v37 = (char *)a2[1];
        }
        else
        {
          unint64_t v44 = 0;
        }
        float64x2_t v45 = &v44[4 * v40];
        *(_DWORD *)float64x2_t v45 = v34;
        float64x2_t v38 = v45 + 4;
        while (v37 != v33)
        {
          int v46 = *((_DWORD *)v37 - 1);
          v37 -= 4;
          *((_DWORD *)v45 - 1) = v46;
          v45 -= 4;
        }
        int8x16_t v36 = &v44[4 * v43];
        *a2 = v45;
        a2[1] = v38;
        a2[2] = v36;
        if (v33)
        {
          operator delete(v33);
          int8x16_t v36 = *v119;
        }
      }
      else
      {
        *(_DWORD *)int8x16_t v37 = v34;
        float64x2_t v38 = v37 + 4;
        float64x2_t v39 = (char **)(a2 + 2);
      }
      a2[1] = v38;
      if (v38 >= v36)
      {
        uint64_t v48 = (char *)*a2;
        uint64_t v49 = (uint64_t)&v38[-*a2] >> 2;
        unint64_t v50 = v49 + 1;
        if ((unint64_t)(v49 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v51 = v36 - v48;
        if (v51 >> 1 > v50) {
          unint64_t v50 = v51 >> 1;
        }
        if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v52 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v52 = v50;
        }
        if (v52)
        {
          long long v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v39, v52);
          uint64_t v48 = (char *)*a2;
          float64x2_t v38 = (char *)a2[1];
        }
        else
        {
          long long v53 = 0;
        }
        int64x2_t v54 = &v53[4 * v49];
        *(_DWORD *)int64x2_t v54 = v131;
        float64x2_t v47 = v54 + 4;
        while (v38 != v48)
        {
          int v55 = *((_DWORD *)v38 - 1);
          v38 -= 4;
          *((_DWORD *)v54 - 1) = v55;
          v54 -= 4;
        }
        int8x16_t v36 = &v53[4 * v52];
        *a2 = v54;
        a2[1] = v47;
        a2[2] = v36;
        if (v48)
        {
          operator delete(v48);
          int8x16_t v36 = *v39;
        }
      }
      else
      {
        *(_DWORD *)float64x2_t v38 = v131;
        float64x2_t v47 = v38 + 4;
      }
      a2[1] = v47;
      if (v47 >= v36)
      {
        float64x2_t v57 = (char *)*a2;
        uint64_t v58 = (uint64_t)&v47[-*a2] >> 2;
        unint64_t v59 = v58 + 1;
        if ((unint64_t)(v58 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v60 = v36 - v57;
        if (v60 >> 1 > v59) {
          unint64_t v59 = v60 >> 1;
        }
        if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v61 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v61 = v59;
        }
        if (v61)
        {
          float64x2_t v62 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v39, v61);
          float64x2_t v57 = (char *)*a2;
          float64x2_t v47 = (char *)a2[1];
        }
        else
        {
          float64x2_t v62 = 0;
        }
        float64x2_t v63 = &v62[4 * v58];
        *(_DWORD *)float64x2_t v63 = v128;
        float64x2_t v56 = v63 + 4;
        while (v47 != v57)
        {
          int v64 = *((_DWORD *)v47 - 1);
          v47 -= 4;
          *((_DWORD *)v63 - 1) = v64;
          v63 -= 4;
        }
        int8x16_t v36 = &v62[4 * v61];
        *a2 = v63;
        a2[1] = v56;
        a2[2] = v36;
        if (v57)
        {
          operator delete(v57);
          int8x16_t v36 = *v39;
        }
      }
      else
      {
        *(_DWORD *)float64x2_t v47 = v128;
        float64x2_t v56 = v47 + 4;
      }
      a2[1] = v56;
      if (v56 >= v36)
      {
        float64x2_t v66 = (char *)*a2;
        uint64_t v67 = (uint64_t)&v56[-*a2] >> 2;
        unint64_t v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v69 = v36 - v66;
        if (v69 >> 1 > v68) {
          unint64_t v68 = v69 >> 1;
        }
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v70 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v70 = v68;
        }
        if (v70)
        {
          float64x2_t v71 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v39, v70);
          float64x2_t v66 = (char *)*a2;
          float64x2_t v56 = (char *)a2[1];
        }
        else
        {
          float64x2_t v71 = 0;
        }
        uint64_t v72 = &v71[4 * v67];
        *(_DWORD *)uint64_t v72 = v129;
        uint64_t v65 = v72 + 4;
        while (v56 != v66)
        {
          int v73 = *((_DWORD *)v56 - 1);
          v56 -= 4;
          *((_DWORD *)v72 - 1) = v73;
          v72 -= 4;
        }
        int8x16_t v36 = &v71[4 * v70];
        *a2 = v72;
        a2[1] = v65;
        a2[2] = v36;
        if (v66)
        {
          operator delete(v66);
          int8x16_t v36 = *v39;
        }
      }
      else
      {
        *(_DWORD *)float64x2_t v56 = v129;
        uint64_t v65 = v56 + 4;
      }
      a2[1] = v65;
      if (v65 >= v36)
      {
        float64x2_t v75 = (char *)*a2;
        uint64_t v76 = (uint64_t)&v65[-*a2] >> 2;
        unint64_t v77 = v76 + 1;
        if ((unint64_t)(v76 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v78 = v36 - v75;
        if (v78 >> 1 > v77) {
          unint64_t v77 = v78 >> 1;
        }
        if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v79 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v79 = v77;
        }
        if (v79)
        {
          float64x2_t v80 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v39, v79);
          float64x2_t v75 = (char *)*a2;
          uint64_t v65 = (char *)a2[1];
        }
        else
        {
          float64x2_t v80 = 0;
        }
        float64x2_t v81 = &v80[4 * v76];
        *(_DWORD *)float64x2_t v81 = v128;
        int8x16_t v74 = v81 + 4;
        while (v65 != v75)
        {
          int v82 = *((_DWORD *)v65 - 1);
          v65 -= 4;
          *((_DWORD *)v81 - 1) = v82;
          v81 -= 4;
        }
        int8x16_t v36 = &v80[4 * v79];
        *a2 = v81;
        a2[1] = v74;
        a2[2] = v36;
        if (v75)
        {
          operator delete(v75);
          int8x16_t v36 = *v39;
        }
      }
      else
      {
        *(_DWORD *)uint64_t v65 = v128;
        int8x16_t v74 = v65 + 4;
      }
      a2[1] = v74;
      if (v74 >= v36)
      {
        float64x2_t v84 = (char *)*a2;
        uint64_t v85 = (uint64_t)&v74[-*a2] >> 2;
        unint64_t v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v87 = v36 - v84;
        if (v87 >> 1 > v86) {
          unint64_t v86 = v87 >> 1;
        }
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v88 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v86;
        }
        if (v88)
        {
          float64x2_t v89 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v39, v88);
          float64x2_t v84 = (char *)*a2;
          int8x16_t v74 = (char *)a2[1];
        }
        else
        {
          float64x2_t v89 = 0;
        }
        float64x2_t v90 = &v89[4 * v85];
        *(_DWORD *)float64x2_t v90 = v132;
        float64x2_t v83 = v90 + 4;
        while (v74 != v84)
        {
          int v91 = *((_DWORD *)v74 - 1);
          v74 -= 4;
          *((_DWORD *)v90 - 1) = v91;
          v90 -= 4;
        }
        int8x16_t v36 = &v89[4 * v88];
        *a2 = v90;
        a2[1] = v83;
        a2[2] = v36;
        if (v84)
        {
          operator delete(v84);
          int8x16_t v36 = *v39;
        }
      }
      else
      {
        *(_DWORD *)int8x16_t v74 = v132;
        float64x2_t v83 = v74 + 4;
      }
      a2[1] = v83;
      if (v83 >= v36)
      {
        float64x2_t v93 = (char *)*a2;
        uint64_t v94 = (uint64_t)&v83[-*a2] >> 2;
        unint64_t v95 = v94 + 1;
        if ((unint64_t)(v94 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v96 = v36 - v93;
        if (v96 >> 1 > v95) {
          unint64_t v95 = v96 >> 1;
        }
        if ((unint64_t)v96 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v97 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v97 = v95;
        }
        if (v97)
        {
          float64x2_t v98 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v39, v97);
          float64x2_t v93 = (char *)*a2;
          float64x2_t v83 = (char *)a2[1];
        }
        else
        {
          float64x2_t v98 = 0;
        }
        float64x2_t v99 = &v98[4 * v94];
        *(_DWORD *)float64x2_t v99 = v127;
        float64x2_t v92 = v99 + 4;
        while (v83 != v93)
        {
          int v100 = *((_DWORD *)v83 - 1);
          v83 -= 4;
          *((_DWORD *)v99 - 1) = v100;
          v99 -= 4;
        }
        int8x16_t v36 = &v98[4 * v97];
        *a2 = v99;
        a2[1] = v92;
        a2[2] = v36;
        if (v93)
        {
          operator delete(v93);
          int8x16_t v36 = *v39;
        }
      }
      else
      {
        *(_DWORD *)float64x2_t v83 = v127;
        float64x2_t v92 = v83 + 4;
      }
      a2[1] = v92;
      if (v92 >= v36)
      {
        float64x2_t v102 = (char *)*a2;
        uint64_t v103 = (uint64_t)&v92[-*a2] >> 2;
        unint64_t v104 = v103 + 1;
        if ((unint64_t)(v103 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v105 = v36 - v102;
        if (v105 >> 1 > v104) {
          unint64_t v104 = v105 >> 1;
        }
        if ((unint64_t)v105 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v106 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v106 = v104;
        }
        if (v106)
        {
          float64x2_t v107 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v39, v106);
          float64x2_t v102 = (char *)*a2;
          float64x2_t v92 = (char *)a2[1];
        }
        else
        {
          float64x2_t v107 = 0;
        }
        float64x2_t v108 = &v107[4 * v103];
        *(_DWORD *)float64x2_t v108 = v128;
        float64_t v101 = v108 + 4;
        while (v92 != v102)
        {
          int v109 = *((_DWORD *)v92 - 1);
          v92 -= 4;
          *((_DWORD *)v108 - 1) = v109;
          v108 -= 4;
        }
        int8x16_t v36 = &v107[4 * v106];
        *a2 = v108;
        a2[1] = v101;
        a2[2] = v36;
        if (v102)
        {
          operator delete(v102);
          int8x16_t v36 = *v39;
        }
      }
      else
      {
        *(_DWORD *)float64x2_t v92 = v128;
        float64_t v101 = v92 + 4;
      }
      a2[1] = v101;
      if (v101 >= v36)
      {
        float64x2_t v111 = (char *)*a2;
        uint64_t v112 = (uint64_t)&v101[-*a2] >> 2;
        unint64_t v113 = v112 + 1;
        if ((unint64_t)(v112 + 1) >> 62) {
LABEL_173:
        }
          abort();
        uint64_t v114 = v36 - v111;
        if (v114 >> 1 > v113) {
          unint64_t v113 = v114 >> 1;
        }
        if ((unint64_t)v114 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v115 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v115 = v113;
        }
        if (v115)
        {
          float64x2_t v116 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v39, v115);
          float64x2_t v111 = (char *)*a2;
          float64_t v101 = (char *)a2[1];
        }
        else
        {
          float64x2_t v116 = 0;
        }
        float64x2_t v117 = &v116[4 * v112];
        *(_DWORD *)float64x2_t v117 = v129;
        float64x2_t v110 = v117 + 4;
        while (v101 != v111)
        {
          int v118 = *((_DWORD *)v101 - 1);
          v101 -= 4;
          *((_DWORD *)v117 - 1) = v118;
          v117 -= 4;
        }
        *a2 = v117;
        a2[1] = v110;
        a2[2] = &v116[4 * v115];
        if (v111) {
          operator delete(v111);
        }
      }
      else
      {
        *(_DWORD *)float64_t v101 = v129;
        float64x2_t v110 = v101 + 4;
      }
      a2[1] = v110;
      uint64_t v6 = v121 + 1;
    }
    while (v121 + 1 != v120);
  }
}

void std::vector<geom::triangle_mesh_connectivity>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v4 = a1[2];
  unint64_t v6 = a1[1];
  if (v6 >= v4)
  {
    uint64_t v8 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v6 - *a1) >> 4);
    if ((unint64_t)(v8 + 1) > 0x13B13B13B13B13BLL) {
      abort();
    }
    unint64_t v9 = 0x4EC4EC4EC4EC4EC5 * ((uint64_t)(v4 - *a1) >> 4);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x9D89D89D89D89DLL) {
      unint64_t v11 = 0x13B13B13B13B13BLL;
    }
    else {
      unint64_t v11 = v10;
    }
    unint64_t v17 = a1 + 2;
    if (v11) {
      unsigned int v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::triangle_mesh_connectivity>>((uint64_t)(a1 + 2), v11);
    }
    else {
      unsigned int v12 = 0;
    }
    unsigned int v13 = v12;
    uint64_t v14 = &v12[208 * v8];
    uint64_t v16 = &v12[208 * v11];
    std::allocator<geom::triangle_mesh_connectivity>::construct[abi:nn180100]<geom::triangle_mesh_connectivity,geom::triangle_mesh_connectivity>(v5, (uint64_t)v14, a2);
    uint64_t v15 = v14 + 208;
    std::vector<geom::triangle_mesh_connectivity>::__swap_out_circular_buffer(a1, &v13);
    unint64_t v7 = a1[1];
    std::__split_buffer<geom::triangle_mesh_connectivity>::~__split_buffer((uint64_t)&v13);
  }
  else
  {
    std::allocator<geom::triangle_mesh_connectivity>::construct[abi:nn180100]<geom::triangle_mesh_connectivity,geom::triangle_mesh_connectivity>((uint64_t)(a1 + 2), v6, a2);
    unint64_t v7 = v6 + 208;
  }
  a1[1] = v7;
}

void *std::__hash_table<std::__hash_value_type<geom::edge,unsigned int>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,unsigned int>>>::clear(void *result)
{
  if (result[3])
  {
    char v1 = result;
    __n128 result = (void *)result[2];
    if (result)
    {
      do
      {
        unint64_t v2 = (void *)*result;
        operator delete(result);
        __n128 result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    v1[3] = 0;
  }
  return result;
}

uint64_t *std::__hash_table<std::__hash_value_type<geom::edge,unsigned int>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,unsigned int>>>::find<geom::edge>(void *a1, unsigned int *a2)
{
  unint64_t v2 = *a2;
  unint64_t v3 = a2[1];
  if (v3 >= v2) {
    unint64_t v4 = *a2;
  }
  else {
    unint64_t v4 = a2[1];
  }
  if (v2 <= v3) {
    uint64_t v5 = a2[1];
  }
  else {
    uint64_t v5 = *a2;
  }
  int8x8_t v6 = (int8x8_t)a1[1];
  if (!*(void *)&v6) {
    return 0;
  }
  unint64_t v7 = (v5 + (v4 << 6) + (v4 >> 2) - 0x61C8864680B583E9) ^ v4;
  uint8x8_t v8 = (uint8x8_t)vcnt_s8(v6);
  v8.i16[0] = vaddlv_u8(v8);
  if (v8.u32[0] > 1uLL)
  {
    unint64_t v9 = v7;
    if (v7 >= *(void *)&v6) {
      unint64_t v9 = v7 % *(void *)&v6;
    }
  }
  else
  {
    unint64_t v9 = v7 & (*(void *)&v6 - 1);
  }
  uint64_t v10 = *(uint64_t ***)(*a1 + 8 * v9);
  if (!v10) {
    return 0;
  }
  __n128 result = *v10;
  if (*v10)
  {
    if (v3 >= v2) {
      unsigned int v12 = *a2;
    }
    else {
      unsigned int v12 = a2[1];
    }
    if (v2 <= v3) {
      LODWORD(v2) = a2[1];
    }
    do
    {
      unint64_t v13 = result[1];
      if (v13 == v7)
      {
        unsigned int v15 = *((_DWORD *)result + 4);
        unsigned int v14 = *((_DWORD *)result + 5);
        if (v14 >= v15) {
          int v16 = *((_DWORD *)result + 4);
        }
        else {
          int v16 = *((_DWORD *)result + 5);
        }
        if (v15 > v14) {
          unsigned int v14 = *((_DWORD *)result + 4);
        }
        if (v16 == v12 && v14 == v2) {
          return result;
        }
      }
      else
      {
        if (v8.u32[0] > 1uLL)
        {
          if (v13 >= *(void *)&v6) {
            v13 %= *(void *)&v6;
          }
        }
        else
        {
          v13 &= *(void *)&v6 - 1;
        }
        if (v13 != v9) {
          return 0;
        }
      }
      __n128 result = (uint64_t *)*result;
    }
    while (result);
  }
  return result;
}

void *std::__hash_table<std::__hash_value_type<geom::edge,unsigned int>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,unsigned int>>>::__emplace_unique_key_args<geom::edge,std::piecewise_construct_t const&,std::tuple<geom::edge const&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = a2[1];
  if (v8 >= v7) {
    unint64_t v9 = *a2;
  }
  else {
    unint64_t v9 = a2[1];
  }
  if (v7 <= v8) {
    uint64_t v10 = a2[1];
  }
  else {
    uint64_t v10 = *a2;
  }
  unint64_t v11 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583E9) ^ v9;
  unint64_t v12 = *(void *)(a1 + 8);
  if (v12)
  {
    uint8x8_t v13 = (uint8x8_t)vcnt_s8((int8x8_t)v12);
    v13.i16[0] = vaddlv_u8(v13);
    if (v13.u32[0] > 1uLL)
    {
      uint64_t v4 = (v10 + (v9 << 6) + (v9 >> 2) - 0x61C8864680B583E9) ^ v9;
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
    }
    else
    {
      uint64_t v4 = v11 & (v12 - 1);
    }
    unsigned int v14 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v14)
    {
      unsigned int v15 = *v14;
      if (*v14)
      {
        if (v8 >= v7) {
          unsigned int v16 = *a2;
        }
        else {
          unsigned int v16 = a2[1];
        }
        if (v7 <= v8) {
          LODWORD(v7) = a2[1];
        }
        do
        {
          unint64_t v17 = v15[1];
          if (v17 == v11)
          {
            unsigned int v19 = *((_DWORD *)v15 + 4);
            unsigned int v18 = *((_DWORD *)v15 + 5);
            if (v18 >= v19) {
              int v20 = *((_DWORD *)v15 + 4);
            }
            else {
              int v20 = *((_DWORD *)v15 + 5);
            }
            if (v19 > v18) {
              unsigned int v18 = *((_DWORD *)v15 + 4);
            }
            if (v20 == v16 && v18 == v7) {
              return v15;
            }
          }
          else
          {
            if (v13.u32[0] > 1uLL)
            {
              if (v17 >= v12) {
                v17 %= v12;
              }
            }
            else
            {
              v17 &= v12 - 1;
            }
            if (v17 != v4) {
              break;
            }
          }
          unsigned int v15 = (void *)*v15;
        }
        while (v15);
      }
    }
  }
  unsigned int v15 = operator new(0x20uLL);
  void *v15 = 0;
  v15[1] = v11;
  v15[2] = **a4;
  *((_DWORD *)v15 + 6) = 0;
  float v22 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v23 = *(float *)(a1 + 32);
  if (!v12 || (float)(v23 * (float)v12) < v22)
  {
    BOOL v24 = 1;
    if (v12 >= 3) {
      BOOL v24 = (v12 & (v12 - 1)) != 0;
    }
    unint64_t v25 = v24 | (2 * v12);
    unint64_t v26 = vcvtps_u32_f32(v22 / v23);
    if (v25 <= v26) {
      size_t v27 = v26;
    }
    else {
      size_t v27 = v25;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>(a1, v27);
    unint64_t v12 = *(void *)(a1 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v11 >= v12) {
        uint64_t v4 = v11 % v12;
      }
      else {
        uint64_t v4 = v11;
      }
    }
    else
    {
      uint64_t v4 = (v12 - 1) & v11;
    }
  }
  uint64_t v28 = *(void *)a1;
  uint64_t v29 = *(void **)(*(void *)a1 + 8 * v4);
  if (v29)
  {
    void *v15 = *v29;
LABEL_58:
    *uint64_t v29 = v15;
    goto LABEL_59;
  }
  void *v15 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v15;
  *(void *)(v28 + 8 * v4) = a1 + 16;
  if (*v15)
  {
    unint64_t v30 = *(void *)(*v15 + 8);
    if ((v12 & (v12 - 1)) != 0)
    {
      if (v30 >= v12) {
        v30 %= v12;
      }
    }
    else
    {
      v30 &= v12 - 1;
    }
    uint64_t v29 = (void *)(*(void *)a1 + 8 * v30);
    goto LABEL_58;
  }
LABEL_59:
  ++*(void *)(a1 + 24);
  return v15;
}

__n128 std::allocator<geom::triangle_mesh_connectivity>::construct[abi:nn180100]<geom::triangle_mesh_connectivity,geom::triangle_mesh_connectivity>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(void *)(a2 + 40) = *(void *)(a3 + 40);
  *(void *)(a3 + 40) = 0;
  uint64_t v3 = *(void *)(a2 + 48);
  *(void *)(a2 + 48) = *(void *)(a3 + 48);
  *(void *)(a3 + 48) = v3;
  uint64_t v4 = *(void *)(a2 + 56);
  *(void *)(a2 + 56) = *(void *)(a3 + 56);
  *(void *)(a3 + 56) = v4;
  uint64_t v5 = *(void *)(a2 + 64);
  *(void *)(a2 + 64) = *(void *)(a3 + 64);
  *(void *)(a3 + 64) = v5;
  uint64_t v6 = *(void *)(a2 + 72);
  *(void *)(a2 + 72) = *(void *)(a3 + 72);
  *(void *)(a3 + 72) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a2 + 80) = *(void *)(a3 + 80);
  *(void *)(a3 + 80) = v7;
  uint64_t v8 = *(void *)(a2 + 88);
  *(void *)(a2 + 88) = *(void *)(a3 + 88);
  *(void *)(a3 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 96);
  *(void *)(a2 + 96) = *(void *)(a3 + 96);
  *(void *)(a3 + 96) = v9;
  uint64_t v10 = *(void *)(a2 + 104);
  *(void *)(a2 + 104) = *(void *)(a3 + 104);
  *(void *)(a3 + 104) = v10;
  *(_DWORD *)a2 = *(_DWORD *)a3;
  *(_DWORD *)a3 = 0;
  LODWORD(v10) = *(_DWORD *)(a2 + 4);
  *(_DWORD *)(a2 + 4) = *(_DWORD *)(a3 + 4);
  *(_DWORD *)(a3 + 4) = v10;
  LODWORD(v10) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = v10;
  uint64_t v11 = *(void *)(a2 + 16);
  *(void *)(a2 + 16) = *(void *)(a3 + 16);
  *(void *)(a3 + 16) = v11;
  uint64_t v12 = *(void *)(a2 + 24);
  *(void *)(a2 + 24) = *(void *)(a3 + 24);
  *(void *)(a3 + 24) = v12;
  uint64_t v13 = *(void *)(a2 + 32);
  *(void *)(a2 + 32) = *(void *)(a3 + 32);
  *(void *)(a3 + 32) = v13;
  *(void *)(a2 + 160) = 0;
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(_OWORD *)(a2 + 160) = *(_OWORD *)(a3 + 160);
  *(void *)(a2 + 176) = *(void *)(a3 + 176);
  *(void *)(a3 + 160) = 0;
  *(void *)(a3 + 168) = 0;
  *(void *)(a3 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 192) = 0;
  *(void *)(a2 + 200) = 0;
  __n128 result = *(__n128 *)(a3 + 184);
  *(__n128 *)(a2 + 184) = result;
  *(void *)(a2 + 200) = *(void *)(a3 + 200);
  *(void *)(a3 + 184) = 0;
  *(void *)(a3 + 192) = 0;
  *(void *)(a3 + 200) = 0;
  return result;
}

void std::vector<geom::triangle_mesh_connectivity>::__swap_out_circular_buffer(uint64_t *a1, void *a2)
{
  uint64_t v5 = *a1;
  uint64_t v4 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 208;
      v4 -= 208;
      std::allocator<geom::triangle_mesh_connectivity>::construct[abi:nn180100]<geom::triangle_mesh_connectivity,geom::triangle_mesh_connectivity>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<geom::triangle_mesh_connectivity>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x13B13B13B13B13CLL) {
    std::__throw_bad_array_new_length[abi:nn180100]();
  }
  return operator new(208 * a2);
}

uint64_t std::__split_buffer<geom::triangle_mesh_connectivity>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 208;
    geom::triangle_mesh_connectivity::~triangle_mesh_connectivity((geom::triangle_mesh_connectivity *)(i - 208));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void _ZNSt3__110__function6__funcIZN4geom3acdIfE4impl4initENS2_5sliceIDv3_fEENS6_IjEEjjfEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4geom3acdIfE4impl4initENS2_5sliceIDv3_fEENS6_IjEEjjfEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26EA05C60;
  return result;
}

void _ZNKSt3__110__function6__funcIZN4geom3acdIfE4impl4initENS2_5sliceIDv3_fEENS6_IjEEjjfEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEPNS0_6__baseISG_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26EA05C60;
}

BOOL _ZNSt3__110__function6__funcIZN4geom3acdIfE4impl4initENS2_5sliceIDv3_fEENS6_IjEEjjfEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EEclESC_(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 16) < 2u;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom3acdIfE4impl4initENS2_5sliceIDv3_fEENS6_IjEEjjfEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN4geom3acdIfE4impl4initENS_5sliceIDv3_fEENS3_IjEEjjfEUlRNS_8bvh_nodeIfLh3EEEE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4geom3acdIfE4impl4initENS2_5sliceIDv3_fEENS6_IjEEjjfEUlRNS2_8bvh_nodeIfLh3EEEE_NS_9allocatorISD_EEFbSC_EE11target_typeEv()
{
  return &_ZTIZN4geom3acdIfE4impl4initENS_5sliceIDv3_fEENS3_IjEEjjfEUlRNS_8bvh_nodeIfLh3EEEE_;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int &&>,std::tuple<>>(uint64_t a1, unsigned int *a2, uint64_t a3, _DWORD **a4)
{
  unint64_t v7 = *a2;
  unint64_t v8 = *(void *)(a1 + 8);
  if (v8)
  {
    uint8x8_t v9 = (uint8x8_t)vcnt_s8((int8x8_t)v8);
    v9.i16[0] = vaddlv_u8(v9);
    if (v9.u32[0] > 1uLL)
    {
      unint64_t v4 = *a2;
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
    uint64_t v10 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v10)
    {
      uint64_t v11 = *v10;
      if (*v10)
      {
        do
        {
          unint64_t v12 = v11[1];
          if (v12 == v7)
          {
            if (*((_DWORD *)v11 + 4) == v7) {
              return v11;
            }
          }
          else
          {
            if (v9.u32[0] > 1uLL)
            {
              if (v12 >= v8) {
                v12 %= v8;
              }
            }
            else
            {
              v12 &= v8 - 1;
            }
            if (v12 != v4) {
              break;
            }
          }
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
    }
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = 0;
  v11[1] = v7;
  *((_DWORD *)v11 + 4) = **a4;
  float32x4_t v11[3] = 0;
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v8 || (float)(v14 * (float)v8) < v13)
  {
    BOOL v15 = 1;
    if (v8 >= 3) {
      BOOL v15 = (v8 & (v8 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v8);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    std::__hash_table<std::__hash_value_type<unsigned int,unsigned int>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,unsigned int>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,unsigned int>>>::__rehash<true>(a1, v18);
    unint64_t v8 = *(void *)(a1 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v8 <= v7) {
        unint64_t v4 = v7 % v8;
      }
      else {
        unint64_t v4 = v7;
      }
    }
    else
    {
      unint64_t v4 = (v8 - 1) & v7;
    }
  }
  uint64_t v19 = *(void *)a1;
  int v20 = *(void **)(*(void *)a1 + 8 * v4);
  if (v20)
  {
    *uint64_t v11 = *v20;
LABEL_38:
    *int v20 = v11;
    goto LABEL_39;
  }
  *uint64_t v11 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = v11;
  *(void *)(v19 + 8 * v4) = a1 + 16;
  if (*v11)
  {
    unint64_t v21 = *(void *)(*v11 + 8);
    if ((v8 & (v8 - 1)) != 0)
    {
      if (v21 >= v8) {
        v21 %= v8;
      }
    }
    else
    {
      v21 &= v8 - 1;
    }
    int v20 = (void *)(*(void *)a1 + 8 * v21);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return v11;
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,void *>>>::operator()[abi:nn180100](uint64_t a1, char *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    uint64_t v3 = __p + 24;
    uint64_t v4 = *((void *)__p + 3);
    *((void *)__p + 3) = 0;
    if (v4) {
      std::default_delete<geom::cluster<float>>::operator()[abi:nn180100]((uint64_t)v3, v4);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(void *a1, unsigned int *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = *a2;
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    unint64_t v5 = *a2;
    if (*(void *)&v2 <= v3) {
      unint64_t v5 = v3 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v5 = (v2.i32[0] - 1) & v3;
  }
  uint64_t v6 = *(uint64_t ***)(*a1 + 8 * v5);
  if (!v6) {
    return 0;
  }
  for (__n128 result = *v6; result; __n128 result = (uint64_t *)*result)
  {
    unint64_t v8 = result[1];
    if (v8 == v3)
    {
      if (*((_DWORD *)result + 4) == v3) {
        return result;
      }
    }
    else
    {
      if (v4.u32[0] > 1uLL)
      {
        if (v8 >= *(void *)&v2) {
          v8 %= *(void *)&v2;
        }
      }
      else
      {
        v8 &= *(void *)&v2 - 1;
      }
      if (v8 != v5) {
        return 0;
      }
    }
  }
  return result;
}

void ___ZN4geom14dispatch_applyIZNS_24cluster_parallel_clipperIfE24compute_clipped_clustersEvEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke(uint64_t a1, unint64_t a2, double a3, __n128 a4, double a5, double a6, double a7, double a8, float32x4_t a9, float32x4_t a10)
{
  uint64_t v10 = *(void **)(a1 + 32);
  uint64_t v11 = (void *)v10[5];
  uint64_t v12 = v11[14];
  uint64_t v13 = v11[15] - v12;
  unint64_t v14 = v10[7];
  unint64_t v15 = v10[8];
  unint64_t v16 = (v14 + (v13 >> 4) - 1) / v14;
  size_t v18 = v11 + 11;
  uint64_t v17 = v11[11];
  uint64_t v19 = v18[1] - v17;
  unint64_t v20 = (v15 + (v19 >> 3) - 1) / v15 + v16;
  unint64_t v21 = a2 / v20;
  unint64_t v22 = a2 % v20;
  float v23 = (float32x4_t *)(v10[3] + 32 * v21);
  BOOL v24 = v22 >= v16;
  unint64_t v25 = v22 - v16;
  if (v24)
  {
    uint64_t v29 = v19 >> 3;
    if (v25 * v15 + v15 < v19 >> 3) {
      uint64_t v29 = v25 * v15 + v15;
    }
    geom::cluster_parallel_clipper<float>::interior_component_work_item((uint64_t)v10, *v10 + 240 * a2, v23, (uint64_t *)(v17 + 8 * v25 * v15), v29 - v25 * v15, a3, a4, a5, a6, a7, a8, a9, a10);
  }
  else
  {
    unint64_t v26 = v13 >> 4;
    unint64_t v27 = v22 * v14;
    unint64_t v28 = v22 * v14 + v14;
    if (v28 >= v26) {
      unint64_t v28 = v26;
    }
    geom::cluster_parallel_clipper<float>::boundary_component_work_item((uint64_t)v10, *v10 + 240 * a2, v23, (long long *)(v12 + 16 * v27), v28 - v27);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::__erase_unique<unsigned int>(void *a1, unsigned int *a2)
{
  __n128 result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::remove(a1, a2, (uint64_t)&__p);
  unint64_t v3 = (char *)__p;
  std::vector<int> __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,void *>>>::operator()[abi:nn180100]((uint64_t)&v6, v3);
  }
  return v2;
}

void *std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::remove@<X0>(void *result@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  int8x8_t v3 = (int8x8_t)result[1];
  unint64_t v4 = a2[1];
  uint8x8_t v5 = (uint8x8_t)vcnt_s8(v3);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
  {
    if (v4 >= *(void *)&v3) {
      v4 %= *(void *)&v3;
    }
  }
  else
  {
    v4 &= *(void *)&v3 - 1;
  }
  uint64_t v6 = *(void **)(*result + 8 * v4);
  do
  {
    unint64_t v7 = v6;
    uint64_t v6 = (void *)*v6;
  }
  while (v6 != a2);
  if (v7 == result + 2) {
    goto LABEL_18;
  }
  unint64_t v8 = v7[1];
  if (v5.u32[0] > 1uLL)
  {
    if (v8 >= *(void *)&v3) {
      v8 %= *(void *)&v3;
    }
  }
  else
  {
    v8 &= *(void *)&v3 - 1;
  }
  if (v8 != v4)
  {
LABEL_18:
    if (!*a2) {
      goto LABEL_19;
    }
    unint64_t v9 = *(void *)(*a2 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(void *)&v3) {
        v9 %= *(void *)&v3;
      }
    }
    else
    {
      v9 &= *(void *)&v3 - 1;
    }
    if (v9 != v4) {
LABEL_19:
    }
      *(void *)(*result + 8 * v4) = 0;
  }
  uint64_t v10 = *a2;
  if (*a2)
  {
    unint64_t v11 = *(void *)(v10 + 8);
    if (v5.u32[0] > 1uLL)
    {
      if (v11 >= *(void *)&v3) {
        v11 %= *(void *)&v3;
      }
    }
    else
    {
      v11 &= *(void *)&v3 - 1;
    }
    if (v11 != v4)
    {
      *(void *)(*result + 8 * v11) = v7;
      uint64_t v10 = *a2;
    }
  }
  *unint64_t v7 = v10;
  *a2 = 0;
  --result[3];
  *(void *)a3 = a2;
  *(void *)(a3 + 8) = result + 2;
  *(unsigned char *)(a3 + 16) = 1;
  return result;
}

void geom::subdivide_triangle_mesh<double>(void **a1, void *a2, void *a3)
{
  uint64_t v143 = *MEMORY[0x263EF8340];
  std::__hash_table<std::__hash_value_type<geom::edge,unsigned int>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,unsigned int>>>::clear(a3);
  uint64_t v128 = (((uint64_t)(a2[1] - *a2) >> 2) / 3uLL);
  if ((((uint64_t)(a2[1] - *a2) >> 2) / 3uLL))
  {
    uint64_t v6 = 0;
    __asm { FMOV            V0.2D, #0.5 }
    float64x2_t v133 = _Q0;
    int v127 = (char **)(a2 + 2);
    do
    {
      uint64_t v12 = 0;
      uint64_t v129 = v6;
      unsigned int v13 = 3 * v6;
      unint64_t v14 = (char *)*a2;
      uint64_t v15 = v13 + 1;
      int v16 = *(_DWORD *)(*a2 + 4 * v15);
      int v140 = *(_DWORD *)(*a2 + 4 * v13);
      int v141 = v16;
      uint64_t v17 = v13 + 2;
      int v142 = *(_DWORD *)&v14[4 * v17];
      do
      {
        if (v12 == 2) {
          unsigned int v18 = 0;
        }
        else {
          unsigned int v18 = v12 + 1;
        }
        unsigned int v19 = *(&v140 + v18);
        unsigned int v134 = *(&v140 + v12);
        unsigned int v135 = v19;
        unint64_t v20 = std::__hash_table<std::__hash_value_type<geom::edge,unsigned int>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,unsigned int>>>::find<geom::edge>(a3, &v134);
        if (v20)
        {
          *(&v137 + v12) = *((_DWORD *)v20 + 6);
        }
        else
        {
          unint64_t v21 = (float64x2_t *)((char *)*a1 + 32 * v134);
          unint64_t v22 = (float64x2_t *)((char *)*a1 + 32 * v135);
          unint64_t v23 = (unint64_t)((unsigned char *)a1[1] - (unsigned char *)*a1) >> 5;
          *(&v137 + v12) = v23;
          float64x2_t v136 = &v134;
          *((_DWORD *)std::__hash_table<std::__hash_value_type<geom::edge,unsigned int>,std::__unordered_map_hasher<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,geom::edge_hash,std::equal_to<geom::edge>,true>,std::__unordered_map_equal<geom::edge,std::__hash_value_type<geom::edge,unsigned int>,std::equal_to<geom::edge>,geom::edge_hash,true>,std::allocator<std::__hash_value_type<geom::edge,unsigned int>>>::__emplace_unique_key_args<geom::edge,std::piecewise_construct_t const&,std::tuple<geom::edge const&>,std::tuple<>>((uint64_t)a3, &v134, (uint64_t)&std::piecewise_construct, (void **)&v136)+ 6) = v23;
          float64x2_t v24 = vmulq_f64(vaddq_f64(v21[1], v22[1]), v133);
          int8x16_t v25 = (int8x16_t)vmulq_f64(vaddq_f64(*v21, *v22), v133);
          unint64_t v26 = vextq_s8(v25, v25, 8uLL).u64[0];
          unint64_t v27 = (int8x16_t *)a1[1];
          unint64_t v28 = (unint64_t)a1[2];
          if ((unint64_t)v27 >= v28)
          {
            uint64_t v30 = ((char *)v27 - (unsigned char *)*a1) >> 5;
            unint64_t v31 = v30 + 1;
            if ((unint64_t)(v30 + 1) >> 59) {
              goto LABEL_173;
            }
            uint64_t v32 = v28 - (void)*a1;
            if (v32 >> 4 > v31) {
              unint64_t v31 = v32 >> 4;
            }
            if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v33 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v31;
            }
            if (v33)
            {
              float64x2_t v131 = v24;
              uint64_t v132 = v25.i64[0];
              unint64_t v130 = v26;
              int v34 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a1 + 2), v33);
              unint64_t v26 = v130;
              float64x2_t v24 = v131;
              v25.i64[0] = v132;
            }
            else
            {
              int v34 = 0;
            }
            v25.i64[1] = v26;
            int v35 = (int8x16_t *)&v34[32 * v30];
            *int v35 = v25;
            v35[1] = (int8x16_t)v24;
            int8x16_t v37 = (int8x16_t *)*a1;
            int8x16_t v36 = (int8x16_t *)a1[1];
            float64x2_t v38 = v35;
            if (v36 != *a1)
            {
              do
              {
                int8x16_t v39 = v36[-2];
                int8x16_t v40 = v36[-1];
                v36 -= 2;
                v38[-2] = v39;
                v38[-1] = v40;
                v38 -= 2;
              }
              while (v36 != v37);
              int8x16_t v36 = (int8x16_t *)*a1;
            }
            uint64_t v29 = v35 + 2;
            *a1 = v38;
            a1[1] = &v35[2];
            a1[2] = &v34[32 * v33];
            if (v36) {
              operator delete(v36);
            }
          }
          else
          {
            v25.i64[1] = v26;
            *unint64_t v27 = v25;
            v27[1] = (int8x16_t)v24;
            uint64_t v29 = v27 + 2;
          }
          a1[1] = v29;
        }
        ++v12;
      }
      while (v12 != 3);
      unint64_t v41 = (char *)*a2;
      int v42 = v137;
      int v43 = v139;
      *(_DWORD *)(*a2 + 4 * v15) = v137;
      *(_DWORD *)&v41[4 * v17] = v43;
      float64x2_t v45 = (char *)a2[1];
      unint64_t v44 = (char *)a2[2];
      if (v45 >= v44)
      {
        uint64_t v48 = (v45 - v41) >> 2;
        unint64_t v49 = v48 + 1;
        float64x2_t v47 = (char **)(a2 + 2);
        if ((unint64_t)(v48 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v50 = v44 - v41;
        if (v50 >> 1 > v49) {
          unint64_t v49 = v50 >> 1;
        }
        if ((unint64_t)v50 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v51 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v51 = v49;
        }
        if (v51)
        {
          unint64_t v52 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v127, v51);
          unint64_t v41 = (char *)*a2;
          float64x2_t v45 = (char *)a2[1];
        }
        else
        {
          unint64_t v52 = 0;
        }
        long long v53 = &v52[4 * v48];
        *(_DWORD *)long long v53 = v42;
        int v46 = v53 + 4;
        while (v45 != v41)
        {
          int v54 = *((_DWORD *)v45 - 1);
          v45 -= 4;
          *((_DWORD *)v53 - 1) = v54;
          v53 -= 4;
        }
        unint64_t v44 = &v52[4 * v51];
        *a2 = v53;
        a2[1] = v46;
        a2[2] = v44;
        if (v41)
        {
          operator delete(v41);
          unint64_t v44 = *v127;
        }
      }
      else
      {
        *(_DWORD *)float64x2_t v45 = v42;
        int v46 = v45 + 4;
        float64x2_t v47 = (char **)(a2 + 2);
      }
      a2[1] = v46;
      if (v46 >= v44)
      {
        float64x2_t v56 = (char *)*a2;
        uint64_t v57 = (uint64_t)&v46[-*a2] >> 2;
        unint64_t v58 = v57 + 1;
        if ((unint64_t)(v57 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v59 = v44 - v56;
        if (v59 >> 1 > v58) {
          unint64_t v58 = v59 >> 1;
        }
        if ((unint64_t)v59 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v60 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v60 = v58;
        }
        if (v60)
        {
          unint64_t v61 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v47, v60);
          float64x2_t v56 = (char *)*a2;
          int v46 = (char *)a2[1];
        }
        else
        {
          unint64_t v61 = 0;
        }
        float64x2_t v62 = &v61[4 * v57];
        *(_DWORD *)float64x2_t v62 = v141;
        int v55 = v62 + 4;
        while (v46 != v56)
        {
          int v63 = *((_DWORD *)v46 - 1);
          v46 -= 4;
          *((_DWORD *)v62 - 1) = v63;
          v62 -= 4;
        }
        unint64_t v44 = &v61[4 * v60];
        *a2 = v62;
        a2[1] = v55;
        a2[2] = v44;
        if (v56)
        {
          operator delete(v56);
          unint64_t v44 = *v47;
        }
      }
      else
      {
        *(_DWORD *)int v46 = v141;
        int v55 = v46 + 4;
      }
      a2[1] = v55;
      if (v55 >= v44)
      {
        uint64_t v65 = (char *)*a2;
        uint64_t v66 = (uint64_t)&v55[-*a2] >> 2;
        unint64_t v67 = v66 + 1;
        if ((unint64_t)(v66 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v68 = v44 - v65;
        if (v68 >> 1 > v67) {
          unint64_t v67 = v68 >> 1;
        }
        if ((unint64_t)v68 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v69 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v69 = v67;
        }
        if (v69)
        {
          unint64_t v70 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v47, v69);
          uint64_t v65 = (char *)*a2;
          int v55 = (char *)a2[1];
        }
        else
        {
          unint64_t v70 = 0;
        }
        float64x2_t v71 = &v70[4 * v66];
        *(_DWORD *)float64x2_t v71 = v138;
        int v64 = v71 + 4;
        while (v55 != v65)
        {
          int v72 = *((_DWORD *)v55 - 1);
          v55 -= 4;
          *((_DWORD *)v71 - 1) = v72;
          v71 -= 4;
        }
        unint64_t v44 = &v70[4 * v69];
        *a2 = v71;
        a2[1] = v64;
        a2[2] = v44;
        if (v65)
        {
          operator delete(v65);
          unint64_t v44 = *v47;
        }
      }
      else
      {
        *(_DWORD *)int v55 = v138;
        int v64 = v55 + 4;
      }
      a2[1] = v64;
      if (v64 >= v44)
      {
        int8x16_t v74 = (char *)*a2;
        uint64_t v75 = (uint64_t)&v64[-*a2] >> 2;
        unint64_t v76 = v75 + 1;
        if ((unint64_t)(v75 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v77 = v44 - v74;
        if (v77 >> 1 > v76) {
          unint64_t v76 = v77 >> 1;
        }
        if ((unint64_t)v77 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v78 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v78 = v76;
        }
        if (v78)
        {
          unint64_t v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v47, v78);
          int8x16_t v74 = (char *)*a2;
          int v64 = (char *)a2[1];
        }
        else
        {
          unint64_t v79 = 0;
        }
        float64x2_t v80 = &v79[4 * v75];
        *(_DWORD *)float64x2_t v80 = v139;
        int v73 = v80 + 4;
        while (v64 != v74)
        {
          int v81 = *((_DWORD *)v64 - 1);
          v64 -= 4;
          *((_DWORD *)v80 - 1) = v81;
          v80 -= 4;
        }
        unint64_t v44 = &v79[4 * v78];
        *a2 = v80;
        a2[1] = v73;
        a2[2] = v44;
        if (v74)
        {
          operator delete(v74);
          unint64_t v44 = *v47;
        }
      }
      else
      {
        *(_DWORD *)int v64 = v139;
        int v73 = v64 + 4;
      }
      a2[1] = v73;
      if (v73 >= v44)
      {
        float64x2_t v83 = (char *)*a2;
        uint64_t v84 = (uint64_t)&v73[-*a2] >> 2;
        unint64_t v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v86 = v44 - v83;
        if (v86 >> 1 > v85) {
          unint64_t v85 = v86 >> 1;
        }
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v87 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v87 = v85;
        }
        if (v87)
        {
          unint64_t v88 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v47, v87);
          float64x2_t v83 = (char *)*a2;
          int v73 = (char *)a2[1];
        }
        else
        {
          unint64_t v88 = 0;
        }
        float64x2_t v89 = &v88[4 * v84];
        *(_DWORD *)float64x2_t v89 = v138;
        int v82 = v89 + 4;
        while (v73 != v83)
        {
          int v90 = *((_DWORD *)v73 - 1);
          v73 -= 4;
          *((_DWORD *)v89 - 1) = v90;
          v89 -= 4;
        }
        unint64_t v44 = &v88[4 * v87];
        *a2 = v89;
        a2[1] = v82;
        a2[2] = v44;
        if (v83)
        {
          operator delete(v83);
          unint64_t v44 = *v47;
        }
      }
      else
      {
        *(_DWORD *)int v73 = v138;
        int v82 = v73 + 4;
      }
      a2[1] = v82;
      if (v82 >= v44)
      {
        float64x2_t v92 = (char *)*a2;
        uint64_t v93 = (uint64_t)&v82[-*a2] >> 2;
        unint64_t v94 = v93 + 1;
        if ((unint64_t)(v93 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v95 = v44 - v92;
        if (v95 >> 1 > v94) {
          unint64_t v94 = v95 >> 1;
        }
        if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v96 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v96 = v94;
        }
        if (v96)
        {
          unint64_t v97 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v47, v96);
          float64x2_t v92 = (char *)*a2;
          int v82 = (char *)a2[1];
        }
        else
        {
          unint64_t v97 = 0;
        }
        float64x2_t v98 = &v97[4 * v93];
        *(_DWORD *)float64x2_t v98 = v142;
        int v91 = v98 + 4;
        while (v82 != v92)
        {
          int v99 = *((_DWORD *)v82 - 1);
          v82 -= 4;
          *((_DWORD *)v98 - 1) = v99;
          v98 -= 4;
        }
        unint64_t v44 = &v97[4 * v96];
        *a2 = v98;
        a2[1] = v91;
        a2[2] = v44;
        if (v92)
        {
          operator delete(v92);
          unint64_t v44 = *v47;
        }
      }
      else
      {
        *(_DWORD *)int v82 = v142;
        int v91 = v82 + 4;
      }
      a2[1] = v91;
      if (v91 >= v44)
      {
        float64_t v101 = (char *)*a2;
        uint64_t v102 = (uint64_t)&v91[-*a2] >> 2;
        unint64_t v103 = v102 + 1;
        if ((unint64_t)(v102 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v104 = v44 - v101;
        if (v104 >> 1 > v103) {
          unint64_t v103 = v104 >> 1;
        }
        if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v105 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v105 = v103;
        }
        if (v105)
        {
          unint64_t v106 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v47, v105);
          float64_t v101 = (char *)*a2;
          int v91 = (char *)a2[1];
        }
        else
        {
          unint64_t v106 = 0;
        }
        float64x2_t v107 = &v106[4 * v102];
        *(_DWORD *)float64x2_t v107 = v137;
        int v100 = v107 + 4;
        while (v91 != v101)
        {
          int v108 = *((_DWORD *)v91 - 1);
          v91 -= 4;
          *((_DWORD *)v107 - 1) = v108;
          v107 -= 4;
        }
        unint64_t v44 = &v106[4 * v105];
        *a2 = v107;
        a2[1] = v100;
        a2[2] = v44;
        if (v101)
        {
          operator delete(v101);
          unint64_t v44 = *v47;
        }
      }
      else
      {
        *(_DWORD *)int v91 = v137;
        int v100 = v91 + 4;
      }
      a2[1] = v100;
      if (v100 >= v44)
      {
        float64x2_t v110 = (char *)*a2;
        uint64_t v111 = (uint64_t)&v100[-*a2] >> 2;
        unint64_t v112 = v111 + 1;
        if ((unint64_t)(v111 + 1) >> 62) {
          goto LABEL_173;
        }
        uint64_t v113 = v44 - v110;
        if (v113 >> 1 > v112) {
          unint64_t v112 = v113 >> 1;
        }
        if ((unint64_t)v113 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v114 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v114 = v112;
        }
        if (v114)
        {
          unint64_t v115 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v47, v114);
          float64x2_t v110 = (char *)*a2;
          int v100 = (char *)a2[1];
        }
        else
        {
          unint64_t v115 = 0;
        }
        float64x2_t v116 = &v115[4 * v111];
        *(_DWORD *)float64x2_t v116 = v138;
        int v109 = v116 + 4;
        while (v100 != v110)
        {
          int v117 = *((_DWORD *)v100 - 1);
          v100 -= 4;
          *((_DWORD *)v116 - 1) = v117;
          v116 -= 4;
        }
        unint64_t v44 = &v115[4 * v114];
        *a2 = v116;
        a2[1] = v109;
        a2[2] = v44;
        if (v110)
        {
          operator delete(v110);
          unint64_t v44 = *v47;
        }
      }
      else
      {
        *(_DWORD *)int v100 = v138;
        int v109 = v100 + 4;
      }
      a2[1] = v109;
      if (v109 >= v44)
      {
        float64x2_t v119 = (char *)*a2;
        uint64_t v120 = (uint64_t)&v109[-*a2] >> 2;
        unint64_t v121 = v120 + 1;
        if ((unint64_t)(v120 + 1) >> 62) {
LABEL_173:
        }
          abort();
        uint64_t v122 = v44 - v119;
        if (v122 >> 1 > v121) {
          unint64_t v121 = v122 >> 1;
        }
        if ((unint64_t)v122 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v123 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v123 = v121;
        }
        if (v123)
        {
          unsigned int v124 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)v47, v123);
          float64x2_t v119 = (char *)*a2;
          int v109 = (char *)a2[1];
        }
        else
        {
          unsigned int v124 = 0;
        }
        unsigned int v125 = &v124[4 * v120];
        *(_DWORD *)unsigned int v125 = v139;
        int v118 = v125 + 4;
        while (v109 != v119)
        {
          int v126 = *((_DWORD *)v109 - 1);
          v109 -= 4;
          *((_DWORD *)v125 - 1) = v126;
          v125 -= 4;
        }
        *a2 = v125;
        a2[1] = v118;
        a2[2] = &v124[4 * v123];
        if (v119) {
          operator delete(v119);
        }
      }
      else
      {
        *(_DWORD *)int v109 = v139;
        int v118 = v109 + 4;
      }
      a2[1] = v118;
      uint64_t v6 = v129 + 1;
    }
    while (v129 + 1 != v128);
  }
}

void _ZNSt3__110__function6__funcIZN4geom3acdIdE4impl4initENS2_5sliceIDv3_dEENS6_IjEEjjdEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EED0Ev()
{
}

void *_ZNKSt3__110__function6__funcIZN4geom3acdIdE4impl4initENS2_5sliceIDv3_dEENS6_IjEEjjdEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEv()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = &unk_26EA05CE0;
  return result;
}

void _ZNKSt3__110__function6__funcIZN4geom3acdIdE4impl4initENS2_5sliceIDv3_dEENS6_IjEEjjdEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE7__cloneEPNS0_6__baseISG_EE(uint64_t a1, void *a2)
{
  *a2 = &unk_26EA05CE0;
}

BOOL _ZNSt3__110__function6__funcIZN4geom3acdIdE4impl4initENS2_5sliceIDv3_dEENS6_IjEEjjdEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EEclESC_(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 16) < 2u;
}

uint64_t _ZNKSt3__110__function6__funcIZN4geom3acdIdE4impl4initENS2_5sliceIDv3_dEENS6_IjEEjjdEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE6targetERKSt9type_info(uint64_t a1, uint64_t a2)
{
  if (std::type_info::operator==[abi:nn180100](a2, (uint64_t)&_ZTIZN4geom3acdIdE4impl4initENS_5sliceIDv3_dEENS3_IjEEjjdEUlRNS_8bvh_nodeIdLh3EEEE_))
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *_ZNKSt3__110__function6__funcIZN4geom3acdIdE4impl4initENS2_5sliceIDv3_dEENS6_IjEEjjdEUlRNS2_8bvh_nodeIdLh3EEEE_NS_9allocatorISD_EEFbSC_EE11target_typeEv()
{
  return &_ZTIZN4geom3acdIdE4impl4initENS_5sliceIDv3_dEENS3_IjEEjjdEUlRNS_8bvh_nodeIdLh3EEEE_;
}

void std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::clear(uint64_t a1)
{
  if (*(void *)(a1 + 24))
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::__deallocate_node(a1, *(void **)(a1 + 16));
    *(void *)(a1 + 16) = 0;
    uint64_t v2 = *(void *)(a1 + 8);
    if (v2)
    {
      for (uint64_t i = 0; i != v2; ++i)
        *(void *)(*(void *)a1 + 8 * i) = 0;
    }
    *(void *)(a1 + 24) = 0;
  }
}

void std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,void *>>>::operator()[abi:nn180100](uint64_t a1, char *__p)
{
  if (*(unsigned char *)(a1 + 8))
  {
    int8x8_t v3 = __p + 24;
    uint64_t v4 = *((void *)__p + 3);
    *((void *)__p + 3) = 0;
    if (v4) {
      std::default_delete<geom::cluster<double>>::operator()[abi:nn180100]((uint64_t)v3, v4);
    }
  }
  else if (!__p)
  {
    return;
  }
  operator delete(__p);
}

void ___ZN4geom14dispatch_applyIZNS_24cluster_parallel_clipperIdE24compute_clipped_clustersEvEUlmE_Lb1EEEvmP16dispatch_queue_sT__block_invoke(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 32);
  int8x8_t v3 = (void *)v2[5];
  uint64_t v4 = v3[21];
  uint64_t v5 = v3[22] - v4;
  unint64_t v6 = v2[7];
  unint64_t v7 = v2[8];
  unint64_t v8 = (v6 + (v5 >> 4) - 1) / v6;
  uint64_t v10 = v3 + 18;
  uint64_t v9 = v3[18];
  uint64_t v11 = v10[1] - v9;
  unint64_t v12 = (v7 + (v11 >> 3) - 1) / v7 + v8;
  unint64_t v13 = a2 / v12;
  unint64_t v14 = a2 % v12;
  uint64_t v15 = (float64x2_t *)(v2[3] + 48 * v13);
  BOOL v16 = v14 >= v8;
  unint64_t v17 = v14 - v8;
  if (v16)
  {
    uint64_t v21 = v11 >> 3;
    if (v17 * v7 + v7 < v11 >> 3) {
      uint64_t v21 = v17 * v7 + v7;
    }
    geom::cluster_parallel_clipper<double>::interior_component_work_item((uint64_t)v2, *v2 + 304 * a2, v15, (uint64_t *)(v9 + 8 * v17 * v7), v21 - v17 * v7);
  }
  else
  {
    unint64_t v18 = v5 >> 4;
    unint64_t v19 = v14 * v6;
    unint64_t v20 = v14 * v6 + v6;
    if (v20 >= v18) {
      unint64_t v20 = v18;
    }
    geom::cluster_parallel_clipper<double>::boundary_component_work_item((uint64_t)v2, *v2 + 304 * a2, v15, (float64x2_t **)(v4 + 16 * v19), v20 - v19);
  }
}

uint64_t *std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::__erase_unique<unsigned int>(void *a1, unsigned int *a2)
{
  __n128 result = std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::find<unsigned int>(a1, a2);
  if (result)
  {
    std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::erase(a1, result);
    return (uint64_t *)1;
  }
  return result;
}

uint64_t std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>>>::erase(void *a1, uint64_t *a2)
{
  uint64_t v2 = *a2;
  std::__hash_table<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::__unordered_map_hasher<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::hash<unsigned int>,std::equal_to<unsigned int>,true>,std::__unordered_map_equal<unsigned int,std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>,std::equal_to<unsigned int>,std::hash<unsigned int>,true>,std::allocator<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<float>>>>>::remove(a1, a2, (uint64_t)&__p);
  int8x8_t v3 = (char *)__p;
  std::vector<int> __p = 0;
  if (v3) {
    std::__hash_node_destructor<std::allocator<std::__hash_node<std::__hash_value_type<unsigned int,std::unique_ptr<geom::cluster<double>>>,void *>>>::operator()[abi:nn180100]((uint64_t)&v6, v3);
  }
  return v2;
}

double _ZNK4geom3bvhIfLh2EE13closest_pointINSt3__18functionIFDv2_fjS5_EEEEES5_T_S5_RfRj(void *a1, uint64_t a2, float *a3, unsigned int *a4, double a5)
{
  *a3 = INFINITY;
  *a4 = -1;
  double v5 = COERCE_DOUBLE(vdup_n_s32(0x7FC00000u));
  if (a1[5] == a1[4]) {
    return v5;
  }
  unint64_t v7 = a1[2] - a1[1];
  if (!v7) {
    return v5;
  }
  std::vector<int> __p = 0;
  int v100 = 0;
  unint64_t v101 = 0;
  _ZNSt3__16vectorIZNK4geom3bvhIfLh2EE13closest_pointINS_8functionIFDv2_fjS6_EEEEES6_T_S6_RfRjE5stateNS_9allocatorISC_EEE7reserveEm(&__p, 31 - __clz(-858993459 * (v7 >> 3)));
  float32x2_t v12 = vsub_f32(vmaxnm_f32(vminnm_f32(*(float32x2_t *)&a5, *(float32x2_t *)(a1[1] + 32)), *(float32x2_t *)(a1[1] + 24)), *(float32x2_t *)&a5);
  float v13 = vaddv_f32(vmul_f32(v12, v12));
  unint64_t v14 = v100;
  if ((unint64_t)v100 >= v101)
  {
    BOOL v16 = (float *)__p;
    uint64_t v17 = ((char *)v100 - (unsigned char *)__p) >> 3;
    unint64_t v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 61) {
LABEL_141:
    }
      abort();
    uint64_t v19 = v101 - (void)__p;
    if ((uint64_t)(v101 - (void)__p) >> 2 > v18) {
      unint64_t v18 = v19 >> 2;
    }
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v20 = v18;
    }
    if (v20)
    {
      uint64_t v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v101, v20);
      BOOL v16 = (float *)__p;
      unint64_t v14 = v100;
    }
    else
    {
      uint64_t v21 = 0;
    }
    unint64_t v22 = (float *)&v21[8 * v17];
    unint64_t v23 = &v21[8 * v20];
    *unint64_t v22 = 0.0;
    v22[1] = v13;
    uint64_t v15 = v22 + 2;
    if (v14 != v16)
    {
      do
      {
        uint64_t v24 = *((void *)v14 - 1);
        v14 -= 2;
        *((void *)v22 - 1) = v24;
        v22 -= 2;
      }
      while (v14 != v16);
      BOOL v16 = (float *)__p;
    }
    std::vector<int> __p = v22;
    int v100 = v15;
    unint64_t v101 = (unint64_t)v23;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *int v100 = 0.0;
    v14[1] = v13;
    uint64_t v15 = v14 + 2;
  }
  int8x16_t v25 = (float *)__p;
  double v5 = COERCE_DOUBLE(vdup_n_s32(0x7FC00000u));
  if (__p == v15)
  {
LABEL_139:
    int v100 = v15;
    operator delete(v15);
    return v5;
  }
  do
  {
    unint64_t v26 = v15 - 2;
    unsigned int v27 = *((_DWORD *)v15 - 2);
    float v28 = *(v15 - 1);
    int v100 = v15 - 2;
    float v29 = *a3;
    if (*a3 <= v28)
    {
LABEL_43:
      v15 -= 2;
      goto LABEL_137;
    }
    uint64_t v30 = a1[1];
    uint64_t v31 = v30 + 40 * v27;
    unsigned int v34 = *(_DWORD *)(v31 + 4);
    unint64_t v33 = (int *)(v31 + 4);
    unsigned int v32 = v34;
    unsigned int v35 = v33[1];
    if (v34 != -1 || v35 != -1)
    {
      float32x2_t v37 = vsub_f32(vmaxnm_f32(vminnm_f32(*(float32x2_t *)&a5, *(float32x2_t *)(v30 + 40 * v32 + 32)), *(float32x2_t *)(v30 + 40 * v32 + 24)), *(float32x2_t *)&a5);
      float32x2_t v38 = vmul_f32(v37, v37);
      float v39 = vaddv_f32(v38);
      float32x2_t v40 = vsub_f32(vmaxnm_f32(vminnm_f32(*(float32x2_t *)&a5, *(float32x2_t *)(v30 + 40 * v35 + 32)), *(float32x2_t *)(v30 + 40 * v35 + 24)), *(float32x2_t *)&a5);
      float32x2_t v41 = vmul_f32(v40, v40);
      float v42 = vaddv_f32(v41);
      if (v39 >= v29 || v42 >= v29)
      {
        if (v39 < v29)
        {
          if ((unint64_t)v26 < v101)
          {
            *((_DWORD *)v15 - 2) = v32;
            *(v15 - 1) = v39;
            goto LABEL_136;
          }
          uint64_t v60 = ((char *)v26 - (char *)v25) >> 3;
          unint64_t v61 = v60 + 1;
          if ((unint64_t)(v60 + 1) >> 61) {
            goto LABEL_141;
          }
          uint64_t v62 = v101 - (void)v25;
          if ((uint64_t)(v101 - (void)v25) >> 2 > v61) {
            unint64_t v61 = v62 >> 2;
          }
          if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v61;
          }
          if (v63)
          {
            int v64 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v101, v63);
            int8x16_t v25 = (float *)__p;
            unint64_t v26 = v100;
          }
          else
          {
            int v64 = 0;
          }
          int v82 = (float *)&v64[8 * v60];
          *(_DWORD *)int v82 = v32;
          v82[1] = v39;
          float64x2_t v83 = v82;
          if (v26 == v25) {
            goto LABEL_133;
          }
          do
          {
            uint64_t v84 = *((void *)v26 - 1);
            v26 -= 2;
            *((void *)v83 - 1) = v84;
            v83 -= 2;
          }
          while (v26 != v25);
        }
        else
        {
          if (v42 >= v29) {
            goto LABEL_43;
          }
          if ((unint64_t)v26 < v101)
          {
            *((_DWORD *)v15 - 2) = v35;
            *(v15 - 1) = v42;
LABEL_136:
            int v100 = v15;
            goto LABEL_137;
          }
          uint64_t v70 = ((char *)v26 - (char *)v25) >> 3;
          unint64_t v71 = v70 + 1;
          if ((unint64_t)(v70 + 1) >> 61) {
            goto LABEL_141;
          }
          uint64_t v72 = v101 - (void)v25;
          if ((uint64_t)(v101 - (void)v25) >> 2 > v71) {
            unint64_t v71 = v72 >> 2;
          }
          if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v63 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v63 = v71;
          }
          if (v63)
          {
            int v64 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v101, v63);
            int8x16_t v25 = (float *)__p;
            unint64_t v26 = v100;
          }
          else
          {
            int v64 = 0;
          }
          int v82 = (float *)&v64[8 * v70];
          *(_DWORD *)int v82 = v35;
          v82[1] = v42;
          float64x2_t v83 = v82;
          if (v26 == v25) {
            goto LABEL_133;
          }
          do
          {
            uint64_t v97 = *((void *)v26 - 1);
            v26 -= 2;
            *((void *)v83 - 1) = v97;
            v83 -= 2;
          }
          while (v26 != v25);
        }
        int8x16_t v25 = (float *)__p;
LABEL_133:
        unint64_t v96 = &v64[8 * v63];
        uint64_t v15 = v82 + 2;
        std::vector<int> __p = v83;
LABEL_134:
        int v100 = v15;
        unint64_t v101 = (unint64_t)v96;
        if (v25) {
          operator delete(v25);
        }
        goto LABEL_136;
      }
      int v54 = (char *)v101;
      if (vcgt_f32(vadd_f32(v41, (float32x2_t)vdup_lane_s32((int32x2_t)v41, 1)), vadd_f32(v38, (float32x2_t)vdup_lane_s32((int32x2_t)v38, 1))).u8[0])
      {
        if ((unint64_t)v26 >= v101)
        {
          uint64_t v55 = ((char *)v26 - (char *)v25) >> 3;
          unint64_t v56 = v55 + 1;
          if ((unint64_t)(v55 + 1) >> 61) {
            goto LABEL_141;
          }
          uint64_t v57 = v101 - (void)v25;
          if ((uint64_t)(v101 - (void)v25) >> 2 > v56) {
            unint64_t v56 = v57 >> 2;
          }
          if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v58 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v58 = v56;
          }
          if (v58)
          {
            uint64_t v59 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v101, v58);
            int8x16_t v25 = (float *)__p;
            unint64_t v26 = v100;
          }
          else
          {
            uint64_t v59 = 0;
          }
          int v73 = (float *)&v59[8 * v55];
          *(_DWORD *)int v73 = v35;
          v73[1] = v42;
          int8x16_t v74 = v73;
          if (v26 != v25)
          {
            do
            {
              uint64_t v75 = *((void *)v26 - 1);
              v26 -= 2;
              *((void *)v74 - 1) = v75;
              v74 -= 2;
            }
            while (v26 != v25);
            int8x16_t v25 = (float *)__p;
          }
          int v54 = &v59[8 * v58];
          uint64_t v15 = v73 + 2;
          std::vector<int> __p = v74;
          int v100 = v73 + 2;
          unint64_t v101 = (unint64_t)v54;
          if (v25)
          {
            operator delete(v25);
            int v54 = (char *)v101;
          }
        }
        else
        {
          *((_DWORD *)v15 - 2) = v35;
          *(v15 - 1) = v42;
        }
        int v100 = v15;
        int v76 = *v33;
        if (v15 < (float *)v54)
        {
          *(_DWORD *)uint64_t v15 = v76;
          v15[1] = v39;
LABEL_111:
          v15 += 2;
          goto LABEL_136;
        }
        int8x16_t v25 = (float *)__p;
        uint64_t v77 = ((char *)v15 - (unsigned char *)__p) >> 3;
        unint64_t v78 = v77 + 1;
        if ((unint64_t)(v77 + 1) >> 61) {
          goto LABEL_141;
        }
        uint64_t v79 = v54 - (unsigned char *)__p;
        if (v79 >> 2 > v78) {
          unint64_t v78 = v79 >> 2;
        }
        if ((unint64_t)v79 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v80 = v78;
        }
        if (v80)
        {
          int v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v101, v80);
          int8x16_t v25 = (float *)__p;
          uint64_t v15 = v100;
        }
        else
        {
          int v81 = 0;
        }
        float64x2_t v92 = (float *)&v81[8 * v77];
        *(_DWORD *)float64x2_t v92 = v76;
        v92[1] = v39;
        uint64_t v93 = v92;
        if (v15 != v25)
        {
          do
          {
            uint64_t v94 = *((void *)v15 - 1);
            v15 -= 2;
            *((void *)v93 - 1) = v94;
            v93 -= 2;
          }
          while (v15 != v25);
LABEL_127:
          int8x16_t v25 = (float *)__p;
        }
      }
      else
      {
        if ((unint64_t)v26 >= v101)
        {
          uint64_t v65 = ((char *)v26 - (char *)v25) >> 3;
          unint64_t v66 = v65 + 1;
          if ((unint64_t)(v65 + 1) >> 61) {
            goto LABEL_141;
          }
          uint64_t v67 = v101 - (void)v25;
          if ((uint64_t)(v101 - (void)v25) >> 2 > v66) {
            unint64_t v66 = v67 >> 2;
          }
          if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v68 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v68 = v66;
          }
          if (v68)
          {
            unint64_t v69 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v101, v68);
            int8x16_t v25 = (float *)__p;
            unint64_t v26 = v100;
          }
          else
          {
            unint64_t v69 = 0;
          }
          unint64_t v85 = (float *)&v69[8 * v65];
          *(_DWORD *)unint64_t v85 = v32;
          v85[1] = v39;
          uint64_t v86 = v85;
          if (v26 != v25)
          {
            do
            {
              uint64_t v87 = *((void *)v26 - 1);
              v26 -= 2;
              *((void *)v86 - 1) = v87;
              v86 -= 2;
            }
            while (v26 != v25);
            int8x16_t v25 = (float *)__p;
          }
          int v54 = &v69[8 * v68];
          uint64_t v15 = v85 + 2;
          std::vector<int> __p = v86;
          int v100 = v85 + 2;
          unint64_t v101 = (unint64_t)v54;
          if (v25)
          {
            operator delete(v25);
            int v54 = (char *)v101;
          }
        }
        else
        {
          *((_DWORD *)v15 - 2) = v32;
          *(v15 - 1) = v39;
        }
        int v100 = v15;
        int v88 = v33[1];
        if (v15 < (float *)v54)
        {
          *(_DWORD *)uint64_t v15 = v88;
          v15[1] = v42;
          goto LABEL_111;
        }
        int8x16_t v25 = (float *)__p;
        uint64_t v89 = ((char *)v15 - (unsigned char *)__p) >> 3;
        unint64_t v90 = v89 + 1;
        if ((unint64_t)(v89 + 1) >> 61) {
          goto LABEL_141;
        }
        uint64_t v91 = v54 - (unsigned char *)__p;
        if (v91 >> 2 > v90) {
          unint64_t v90 = v91 >> 2;
        }
        if ((unint64_t)v91 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v80 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v80 = v90;
        }
        if (v80)
        {
          int v81 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v101, v80);
          int8x16_t v25 = (float *)__p;
          uint64_t v15 = v100;
        }
        else
        {
          int v81 = 0;
        }
        float64x2_t v92 = (float *)&v81[8 * v89];
        *(_DWORD *)float64x2_t v92 = v88;
        v92[1] = v42;
        uint64_t v93 = v92;
        if (v15 != v25)
        {
          do
          {
            uint64_t v95 = *((void *)v15 - 1);
            v15 -= 2;
            *((void *)v93 - 1) = v95;
            v93 -= 2;
          }
          while (v15 != v25);
          goto LABEL_127;
        }
      }
      unint64_t v96 = &v81[8 * v80];
      uint64_t v15 = v92 + 2;
      std::vector<int> __p = v93;
      goto LABEL_134;
    }
    uint64_t v44 = v30 + 40 * v27;
    int v45 = *(_DWORD *)(v44 + 16);
    if (!v45) {
      goto LABEL_43;
    }
    uint64_t v46 = *(unsigned int *)(v44 + 12);
    float64x2_t v47 = (int *)(a1[4] + 4 * v46);
    uint64_t v48 = 4 * (v45 + v46) - 4 * v46;
    do
    {
      unsigned int v49 = *v47;
      _ZNKSt3__18functionIFDv2_fjS1_EEclEjS1_(a2, *v47, a5);
      float32x2_t v51 = vsub_f32(*(float32x2_t *)&a5, v50);
      float v52 = vaddv_f32(vmul_f32(v51, v51));
      if (v52 < *a3 || (v52 == *a3 ? (BOOL v53 = v49 >= *a4) : (BOOL v53 = 1), !v53))
      {
        *a3 = v52;
        *a4 = v49;
        double v5 = *(double *)&v50;
      }
      ++v47;
      v48 -= 4;
    }
    while (v48);
    uint64_t v15 = v100;
LABEL_137:
    int8x16_t v25 = (float *)__p;
  }
  while (__p != v15);
  if (v15) {
    goto LABEL_139;
  }
  return v5;
}

void _ZNSt3__16vectorIZNK4geom3bvhIfLh2EE13closest_pointINS_8functionIFDv2_fjS6_EEEEES6_T_S6_RfRjE5stateNS_9allocatorISC_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 3)
  {
    if (a2 >> 61) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    uint64_t v9 = &v6[8 * v8];
    uint64_t v11 = (char *)*a1;
    uint64_t v10 = (char *)a1[1];
    float32x2_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        uint64_t v13 = *((void *)v10 - 1);
        v10 -= 8;
        *((void *)v12 - 1) = v13;
        v12 -= 8;
      }
      while (v10 != v11);
      uint64_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t geom::bvh<float,(unsigned char)2>::primitives_for_node(uint64_t a1, uint64_t a2)
{
  return *(void *)(a1 + 32) + 4 * *(unsigned int *)(a2 + 12);
}

uint64_t _ZNKSt3__18functionIFDv2_fjS1_EEclEjS1_(uint64_t a1, int a2, double a3)
{
  int v7 = a2;
  double v6 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, int *, double *))(*(void *)v3 + 48))(v3, &v7, &v6);
  }
  int64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return _ZNK4geom3bvhIfLh3EE13closest_pointINSt3__18functionIFDv3_fjS5_EEEEES5_T_S5_RfRj(v5);
}

double _ZNK4geom3bvhIfLh3EE13closest_pointINSt3__18functionIFDv3_fjS5_EEEEES5_T_S5_RfRj(void *a1, uint64_t a2, unsigned __int32 *a3, unsigned int *a4, float32x4_t a5)
{
  *a3 = 2139095040;
  *a4 = -1;
  *(void *)&double v5 = vdupq_n_s32(0x7FC00000u).u64[0];
  if (a1[5] != a1[4])
  {
    unint64_t v7 = a1[2] - a1[1];
    if (v7)
    {
      std::vector<int> __p = 0;
      float64x2_t v133 = 0;
      unint64_t v134 = 0;
      _ZNSt3__16vectorIZNK4geom3bvhIfLh2EE13closest_pointINS_8functionIFDv2_fjS6_EEEEES6_T_S6_RfRjE5stateNS_9allocatorISC_EEE7reserveEm(&__p, 31 - __clz(v7 >> 6));
      float32x4_t v11 = a5;
      float32x2_t v12 = (float32x4_t *)a1[1];
      float32x4_t v13 = a5;
      v13.i32[3] = 0;
      float32x4_t v15 = v12[2];
      float32x4_t v14 = v12[3];
      v14.i32[3] = 0;
      float32x4_t v128 = v13;
      float32x4_t v16 = vminnmq_f32(v13, v14);
      v16.i32[3] = 0;
      v15.i32[3] = 0;
      float32x4_t v17 = vsubq_f32(vmaxnmq_f32(v16, v15), a5);
      float32x4_t v18 = vmulq_f32(v17, v17);
      unsigned __int32 v19 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).u32[0];
      unint64_t v20 = (char *)v133;
      if ((unint64_t)v133 >= v134)
      {
        unint64_t v22 = (char *)__p;
        int64_t v23 = ((unsigned char *)v133 - (unsigned char *)__p) >> 3;
        unint64_t v24 = v23 + 1;
        if ((unint64_t)(v23 + 1) >> 61) {
          goto LABEL_151;
        }
        uint64_t v25 = v134 - (void)__p;
        if ((uint64_t)(v134 - (void)__p) >> 2 > v24) {
          unint64_t v24 = v25 >> 2;
        }
        if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v26 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v26 = v24;
        }
        if (v26)
        {
          unsigned __int32 v129 = v19;
          unsigned int v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v134, v26);
          unsigned __int32 v19 = v129;
          float v28 = v27;
          unint64_t v22 = (char *)__p;
          unint64_t v20 = (char *)v133;
        }
        else
        {
          float v28 = 0;
        }
        float v29 = &v28[8 * v23];
        unint64_t v30 = (unint64_t)&v28[8 * v26];
        *(_DWORD *)float v29 = 0;
        *((_DWORD *)v29 + 1) = v19;
        uint64_t v21 = v29 + 8;
        if (v20 != v22)
        {
          do
          {
            uint64_t v31 = *((void *)v20 - 1);
            v20 -= 8;
            *((void *)v29 - 1) = v31;
            v29 -= 8;
          }
          while (v20 != v22);
          unint64_t v22 = (char *)__p;
        }
        std::vector<int> __p = v29;
        float64x2_t v133 = v21;
        unint64_t v134 = v30;
        if (v22) {
          operator delete(v22);
        }
        float32x4_t v11 = a5;
      }
      else
      {
        *(_DWORD *)float64x2_t v133 = 0;
        *((_DWORD *)v20 + 1) = v19;
        uint64_t v21 = v20 + 8;
      }
      unsigned int v32 = __p;
      __n128 v33 = (__n128)vdupq_n_s32(0x7FC00000u);
      if (__p == v21)
      {
        double v130 = v33.n128_f64[0];
        goto LABEL_147;
      }
      double v130 = v33.n128_f64[0];
      while (1)
      {
        unsigned int v34 = v21 - 2;
        uint64_t v35 = *(v21 - 2);
        float v36 = *((float *)v21 - 1);
        float64x2_t v133 = v21 - 2;
        v33.n128_u32[0] = *a3;
        if (*(float *)a3 > v36)
        {
          uint64_t v37 = a1[1];
          float32x2_t v38 = (unsigned int *)(v37 + (v35 << 6));
          float32x2_t v40 = (int *)(v38 + 1);
          uint64_t v39 = v38[1];
          float v42 = (int *)(v38 + 2);
          uint64_t v41 = v38[2];
          if (v39 == -1 && v41 == -1)
          {
            unsigned int v59 = v38[4];
            if (v59)
            {
              uint64_t v60 = v38[3];
              unint64_t v61 = (unsigned int *)(a1[4] + 4 * v60);
              uint64_t v62 = 4 * (v59 + v60) - 4 * v60;
              while (1)
              {
                unsigned int v63 = *v61;
                unsigned int v136 = *v61;
                float32x4_t v135 = v11;
                uint64_t v64 = *(void *)(a2 + 24);
                if (!v64) {
                  break;
                }
                v33.n128_f64[0] = (*(double (**)(uint64_t, unsigned int *, float32x4_t *, __n128))(*(void *)v64 + 48))(v64, &v136, &v135, v33);
                float32x4_t v65 = vsubq_f32(a5, (float32x4_t)v33);
                float32x4_t v66 = vmulq_f32(v65, v65);
                float v67 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).f32[0];
                float32x4_t v11 = a5;
                if (v67 < *(float *)a3 || (v67 == *(float *)a3 ? (BOOL v68 = v63 >= *a4) : (BOOL v68 = 1), !v68))
                {
                  *(float *)a3 = v67;
                  *a4 = v63;
                  double v130 = v33.n128_f64[0];
                }
                ++v61;
                v62 -= 4;
                if (!v62)
                {
                  uint64_t v21 = v133;
                  goto LABEL_143;
                }
              }
              std::__throw_bad_function_call[abi:nn180100]();
LABEL_151:
              abort();
            }
          }
          else
          {
            uint64_t v44 = (float32x4_t *)(v37 + (v39 << 6));
            float32x4_t v46 = v44[2];
            float32x4_t v45 = v44[3];
            v45.i32[3] = 0;
            float32x4_t v47 = vminnmq_f32(v128, v45);
            v47.i32[3] = 0;
            v46.i32[3] = 0;
            float32x4_t v48 = vsubq_f32(vmaxnmq_f32(v47, v46), v11);
            float32x4_t v49 = vmulq_f32(v48, v48);
            float32x2_t v50 = (float32x4_t *)(v37 + (v41 << 6));
            float32x4_t v52 = v50[2];
            float32x4_t v51 = v50[3];
            v51.i32[3] = 0;
            float32x4_t v53 = vminnmq_f32(v128, v51);
            v53.i32[3] = 0;
            v52.i32[3] = 0;
            float32x4_t v54 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1)));
            float32x4_t v55 = vsubq_f32(vmaxnmq_f32(v53, v52), v11);
            float32x4_t v56 = vmulq_f32(v55, v55);
            float32x4_t v57 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1)));
            if (v54.f32[0] < v33.n128_f32[0] && v57.f32[0] < v33.n128_f32[0])
            {
              __n128 v33 = (__n128)vcgtq_f32(v57, v54);
              v33.n128_u64[0] = (unint64_t)vmovn_s32((int32x4_t)v33);
              unint64_t v69 = v134;
              if (v33.n128_u8[0])
              {
                if ((unint64_t)v34 >= v134)
                {
                  uint64_t v70 = (v34 - v32) >> 3;
                  unint64_t v71 = v70 + 1;
                  if ((unint64_t)(v70 + 1) >> 61) {
                    goto LABEL_151;
                  }
                  __int32 v124 = v54.i32[0];
                  uint64_t v72 = v134 - (void)v32;
                  if ((uint64_t)(v134 - (void)v32) >> 2 > v71) {
                    unint64_t v71 = v72 >> 2;
                  }
                  if ((unint64_t)v72 >= 0x7FFFFFFFFFFFFFF8) {
                    unint64_t v73 = 0x1FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v73 = v71;
                  }
                  if (v73)
                  {
                    __int32 v120 = v57.i32[0];
                    int8x16_t v74 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v134, v73);
                    v57.i32[0] = v120;
                    uint64_t v75 = v74;
                    unsigned int v32 = __p;
                    unsigned int v34 = v133;
                  }
                  else
                  {
                    uint64_t v75 = 0;
                  }
                  float64x2_t v92 = &v75[8 * v70];
                  *(_DWORD *)float64x2_t v92 = v41;
                  *((_DWORD *)v92 + 1) = v57.i32[0];
                  uint64_t v93 = v92;
                  if (v34 != v32)
                  {
                    do
                    {
                      uint64_t v94 = *((void *)v34 - 1);
                      v34 -= 8;
                      *((void *)v93 - 1) = v94;
                      v93 -= 8;
                    }
                    while (v34 != v32);
                    unsigned int v32 = __p;
                  }
                  unint64_t v69 = (unint64_t)&v75[8 * v73];
                  uint64_t v21 = v92 + 8;
                  std::vector<int> __p = v93;
                  float64x2_t v133 = v92 + 8;
                  unint64_t v134 = v69;
                  if (v32)
                  {
                    operator delete(v32);
                    unint64_t v69 = v134;
                  }
                  float32x4_t v11 = a5;
                  v54.i32[0] = v124;
                }
                else
                {
                  *(v21 - 2) = v41;
                  *(v21 - 1) = v57.i32[0];
                }
                float64x2_t v133 = v21;
                int v95 = *v40;
                if ((unint64_t)v21 < v69)
                {
                  *uint64_t v21 = v95;
                  v21[1] = v54.i32[0];
                  goto LABEL_116;
                }
                unsigned int v32 = __p;
                uint64_t v96 = ((char *)v21 - (unsigned char *)__p) >> 3;
                unint64_t v97 = v96 + 1;
                if ((unint64_t)(v96 + 1) >> 61) {
                  goto LABEL_151;
                }
                uint64_t v98 = v69 - (void)__p;
                if (v98 >> 2 > v97) {
                  unint64_t v97 = v98 >> 2;
                }
                if ((unint64_t)v98 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v99 = v97;
                }
                if (v99)
                {
                  __int32 v127 = v54.i32[0];
                  int v100 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v134, v99);
                  v54.i32[0] = v127;
                  unint64_t v101 = v100;
                  unsigned int v32 = __p;
                  uint64_t v21 = v133;
                }
                else
                {
                  unint64_t v101 = 0;
                }
                uint64_t v113 = &v101[8 * v96];
                *(_DWORD *)uint64_t v113 = v95;
                *((_DWORD *)v113 + 1) = v54.i32[0];
                unint64_t v114 = v113;
                if (v21 != (_DWORD *)v32)
                {
                  do
                  {
                    uint64_t v115 = *((void *)v21 - 1);
                    v21 -= 2;
                    *((void *)v114 - 1) = v115;
                    v114 -= 8;
                  }
                  while (v21 != (_DWORD *)v32);
                  goto LABEL_132;
                }
                goto LABEL_133;
              }
              if ((unint64_t)v34 >= v134)
              {
                uint64_t v82 = (v34 - v32) >> 3;
                unint64_t v83 = v82 + 1;
                if ((unint64_t)(v82 + 1) >> 61) {
                  goto LABEL_151;
                }
                __int32 v121 = v57.i32[0];
                uint64_t v84 = v134 - (void)v32;
                if ((uint64_t)(v134 - (void)v32) >> 2 > v83) {
                  unint64_t v83 = v84 >> 2;
                }
                if ((unint64_t)v84 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v85 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v85 = v83;
                }
                if (v85)
                {
                  __int32 v126 = v54.i32[0];
                  uint64_t v86 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v134, v85);
                  v54.i32[0] = v126;
                  uint64_t v87 = v86;
                  unsigned int v32 = __p;
                  unsigned int v34 = v133;
                }
                else
                {
                  uint64_t v87 = 0;
                }
                unint64_t v105 = &v87[8 * v82];
                *(_DWORD *)unint64_t v105 = v39;
                *((_DWORD *)v105 + 1) = v54.i32[0];
                unint64_t v106 = v105;
                if (v34 != v32)
                {
                  do
                  {
                    uint64_t v107 = *((void *)v34 - 1);
                    v34 -= 8;
                    *((void *)v106 - 1) = v107;
                    v106 -= 8;
                  }
                  while (v34 != v32);
                  unsigned int v32 = __p;
                }
                unint64_t v69 = (unint64_t)&v87[8 * v85];
                uint64_t v21 = v105 + 8;
                std::vector<int> __p = v106;
                float64x2_t v133 = v105 + 8;
                unint64_t v134 = v69;
                if (v32)
                {
                  operator delete(v32);
                  unint64_t v69 = v134;
                }
                float32x4_t v11 = a5;
                v57.i32[0] = v121;
              }
              else
              {
                *(v21 - 2) = v39;
                *(v21 - 1) = v54.i32[0];
              }
              float64x2_t v133 = v21;
              int v108 = *v42;
              if ((unint64_t)v21 < v69)
              {
                *uint64_t v21 = v108;
                v21[1] = v57.i32[0];
LABEL_116:
                v21 += 2;
LABEL_142:
                float64x2_t v133 = v21;
                goto LABEL_143;
              }
              unsigned int v32 = __p;
              uint64_t v109 = ((char *)v21 - (unsigned char *)__p) >> 3;
              unint64_t v110 = v109 + 1;
              if ((unint64_t)(v109 + 1) >> 61) {
                goto LABEL_151;
              }
              uint64_t v111 = v69 - (void)__p;
              if (v111 >> 2 > v110) {
                unint64_t v110 = v111 >> 2;
              }
              if ((unint64_t)v111 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v99 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v99 = v110;
              }
              if (v99)
              {
                __int32 v123 = v57.i32[0];
                unint64_t v112 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v134, v99);
                v57.i32[0] = v123;
                unint64_t v101 = v112;
                unsigned int v32 = __p;
                uint64_t v21 = v133;
              }
              else
              {
                unint64_t v101 = 0;
              }
              uint64_t v113 = &v101[8 * v109];
              *(_DWORD *)uint64_t v113 = v108;
              *((_DWORD *)v113 + 1) = v57.i32[0];
              unint64_t v114 = v113;
              if (v21 != (_DWORD *)v32)
              {
                do
                {
                  uint64_t v116 = *((void *)v21 - 1);
                  v21 -= 2;
                  *((void *)v114 - 1) = v116;
                  v114 -= 8;
                }
                while (v21 != (_DWORD *)v32);
LABEL_132:
                unsigned int v32 = __p;
              }
LABEL_133:
              unint64_t v117 = (unint64_t)&v101[8 * v99];
              uint64_t v21 = v113 + 8;
              std::vector<int> __p = v114;
LABEL_139:
              float64x2_t v133 = v21;
              unint64_t v134 = v117;
              if (v32) {
                operator delete(v32);
              }
              float32x4_t v11 = a5;
              goto LABEL_142;
            }
            if (v54.f32[0] < v33.n128_f32[0])
            {
              if ((unint64_t)v34 < v134)
              {
                *(v21 - 2) = v39;
                *(v21 - 1) = v54.i32[0];
                goto LABEL_142;
              }
              uint64_t v76 = (v34 - v32) >> 3;
              unint64_t v77 = v76 + 1;
              if ((unint64_t)(v76 + 1) >> 61) {
                goto LABEL_151;
              }
              uint64_t v78 = v134 - (void)v32;
              if ((uint64_t)(v134 - (void)v32) >> 2 > v77) {
                unint64_t v77 = v78 >> 2;
              }
              if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v77;
              }
              if (v79)
              {
                __int32 v125 = v54.i32[0];
                unint64_t v80 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v134, v79);
                v54.i32[0] = v125;
                int v81 = v80;
                unsigned int v32 = __p;
                unsigned int v34 = v133;
              }
              else
              {
                int v81 = 0;
              }
              uint64_t v102 = &v81[8 * v76];
              *(_DWORD *)uint64_t v102 = v39;
              *((_DWORD *)v102 + 1) = v54.i32[0];
              unint64_t v103 = v102;
              if (v34 != v32)
              {
                do
                {
                  uint64_t v104 = *((void *)v34 - 1);
                  v34 -= 8;
                  *((void *)v103 - 1) = v104;
                  v103 -= 8;
                }
                while (v34 != v32);
LABEL_137:
                unsigned int v32 = __p;
              }
LABEL_138:
              unint64_t v117 = (unint64_t)&v81[8 * v79];
              uint64_t v21 = v102 + 8;
              std::vector<int> __p = v103;
              goto LABEL_139;
            }
            if (v57.f32[0] < v33.n128_f32[0])
            {
              if ((unint64_t)v34 < v134)
              {
                *(v21 - 2) = v41;
                *(v21 - 1) = v57.i32[0];
                goto LABEL_142;
              }
              uint64_t v88 = (v34 - v32) >> 3;
              unint64_t v89 = v88 + 1;
              if ((unint64_t)(v88 + 1) >> 61) {
                goto LABEL_151;
              }
              uint64_t v90 = v134 - (void)v32;
              if ((uint64_t)(v134 - (void)v32) >> 2 > v89) {
                unint64_t v89 = v90 >> 2;
              }
              if ((unint64_t)v90 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v79 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v79 = v89;
              }
              if (v79)
              {
                __int32 v122 = v57.i32[0];
                uint64_t v91 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v134, v79);
                v57.i32[0] = v122;
                int v81 = v91;
                unsigned int v32 = __p;
                unsigned int v34 = v133;
              }
              else
              {
                int v81 = 0;
              }
              uint64_t v102 = &v81[8 * v88];
              *(_DWORD *)uint64_t v102 = v41;
              *((_DWORD *)v102 + 1) = v57.i32[0];
              unint64_t v103 = v102;
              if (v34 != v32)
              {
                do
                {
                  uint64_t v118 = *((void *)v34 - 1);
                  v34 -= 8;
                  *((void *)v103 - 1) = v118;
                  v103 -= 8;
                }
                while (v34 != v32);
                goto LABEL_137;
              }
              goto LABEL_138;
            }
          }
        }
        v21 -= 2;
LABEL_143:
        unsigned int v32 = __p;
        if (__p == v21)
        {
          if (!v21) {
            return v130;
          }
LABEL_147:
          float64x2_t v133 = v21;
          operator delete(v21);
          return v130;
        }
      }
    }
  }
  return v5;
}

__n128 _ZNK4geom3bvhIdLh2EE13closest_pointINSt3__18functionIFDv2_djS5_EEEEES5_T_S5_RdRj(void *a1, uint64_t a2, double *a3, unsigned int *a4, float64x2_t a5)
{
  *a3 = INFINITY;
  *a4 = -1;
  int64x2_t v91 = vdupq_n_s64(0x7FF8000000000000uLL);
  if (a1[5] == a1[4]) {
    return (__n128)v91;
  }
  unint64_t v6 = a1[2] - a1[1];
  if (!v6) {
    return (__n128)v91;
  }
  std::vector<int> __p = 0;
  uint64_t v94 = 0;
  unint64_t v95 = 0;
  _ZNSt3__16vectorIZNK4geom3bvhIdLh2EE13closest_pointINS_8functionIFDv2_djS6_EEEEES6_T_S6_RdRjE5stateNS_9allocatorISC_EEE7reserveEm(&__p, 31 - __clz(v6 >> 6));
  float64x2_t v10 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(a5, *(float64x2_t *)(a1[1] + 48)), *(float64x2_t *)(a1[1] + 32)), a5);
  double v11 = vaddvq_f64(vmulq_f64(v10, v10));
  float32x2_t v12 = (double *)v94;
  if ((unint64_t)v94 >= v95)
  {
    int64_t v14 = ((unsigned char *)v94 - (unsigned char *)__p) >> 4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60) {
LABEL_144:
    }
      abort();
    uint64_t v16 = v95 - (void)__p;
    if ((uint64_t)(v95 - (void)__p) >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17) {
      float32x4_t v18 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v95, v17);
    }
    else {
      float32x4_t v18 = 0;
    }
    unsigned __int32 v19 = (double *)&v18[16 * v14];
    unint64_t v20 = &v18[16 * v17];
    *unsigned __int32 v19 = 0.0;
    v19[1] = v11;
    float32x4_t v13 = v19 + 2;
    unint64_t v22 = (char *)__p;
    uint64_t v21 = (char *)v94;
    if (v94 != __p)
    {
      do
      {
        *((_OWORD *)v19 - 1) = *((_OWORD *)v21 - 1);
        v19 -= 2;
        v21 -= 16;
      }
      while (v21 != v22);
      uint64_t v21 = (char *)__p;
    }
    std::vector<int> __p = v19;
    uint64_t v94 = v13;
    unint64_t v95 = (unint64_t)v20;
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(void *)uint64_t v94 = 0;
    float32x4_t v13 = v12 + 2;
    v12[1] = v11;
  }
  int64_t v23 = (double *)__p;
  int64x2_t v24 = vdupq_n_s64(0x7FF8000000000000uLL);
  if (__p == v13)
  {
    int64x2_t v91 = v24;
    goto LABEL_142;
  }
  int64x2_t v91 = v24;
  do
  {
    uint64_t v25 = v13 - 2;
    uint64_t v26 = *((unsigned int *)v13 - 4);
    double v27 = *(v13 - 1);
    uint64_t v94 = v13 - 2;
    double v28 = *a3;
    if (*a3 <= v27)
    {
LABEL_44:
      v13 -= 2;
      goto LABEL_138;
    }
    uint64_t v29 = a1[1];
    unint64_t v30 = (unsigned int *)(v29 + (v26 << 6));
    unsigned int v32 = (int *)(v30 + 1);
    uint64_t v31 = v30[1];
    unsigned int v34 = (int *)(v30 + 2);
    uint64_t v33 = v30[2];
    if (v31 != -1 || v33 != -1)
    {
      float64x2_t v36 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(a5, *(float64x2_t *)(v29 + (v31 << 6) + 48)), *(float64x2_t *)(v29 + (v31 << 6) + 32)), a5);
      int64x2_t v37 = (int64x2_t)vmulq_f64(v36, v36);
      double v38 = vaddvq_f64((float64x2_t)v37);
      float64x2_t v39 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(a5, *(float64x2_t *)(v29 + (v33 << 6) + 48)), *(float64x2_t *)(v29 + (v33 << 6) + 32)), a5);
      int64x2_t v40 = (int64x2_t)vmulq_f64(v39, v39);
      double v41 = vaddvq_f64((float64x2_t)v40);
      if (v38 >= v28 || v41 >= v28)
      {
        if (v38 < v28)
        {
          if ((unint64_t)v25 < v95)
          {
            *((_DWORD *)v13 - 4) = v31;
            *(v13 - 1) = v38;
            goto LABEL_137;
          }
          uint64_t v58 = ((char *)v25 - (char *)v23) >> 4;
          unint64_t v59 = v58 + 1;
          if ((unint64_t)(v58 + 1) >> 60) {
            goto LABEL_144;
          }
          uint64_t v60 = v95 - (void)v23;
          if ((uint64_t)(v95 - (void)v23) >> 3 > v59) {
            unint64_t v59 = v60 >> 3;
          }
          if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v59;
          }
          if (v61)
          {
            uint64_t v62 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v95, v61);
            int64_t v23 = (double *)__p;
            uint64_t v25 = (double *)v94;
          }
          else
          {
            uint64_t v62 = 0;
          }
          unint64_t v79 = (double *)&v62[16 * v58];
          *(_DWORD *)unint64_t v79 = v31;
          v79[1] = v38;
          unint64_t v80 = v79;
          if (v25 == v23) {
            goto LABEL_134;
          }
          do
          {
            *((_OWORD *)v80 - 1) = *((_OWORD *)v25 - 1);
            v80 -= 2;
            v25 -= 2;
          }
          while (v25 != v23);
        }
        else
        {
          if (v41 >= v28) {
            goto LABEL_44;
          }
          if ((unint64_t)v25 < v95)
          {
            *((_DWORD *)v13 - 4) = v33;
            *(v13 - 1) = v41;
LABEL_137:
            uint64_t v94 = v13;
            goto LABEL_138;
          }
          uint64_t v68 = ((char *)v25 - (char *)v23) >> 4;
          unint64_t v69 = v68 + 1;
          if ((unint64_t)(v68 + 1) >> 60) {
            goto LABEL_144;
          }
          uint64_t v70 = v95 - (void)v23;
          if ((uint64_t)(v95 - (void)v23) >> 3 > v69) {
            unint64_t v69 = v70 >> 3;
          }
          if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v61 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v61 = v69;
          }
          if (v61)
          {
            uint64_t v62 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v95, v61);
            int64_t v23 = (double *)__p;
            uint64_t v25 = (double *)v94;
          }
          else
          {
            uint64_t v62 = 0;
          }
          unint64_t v79 = (double *)&v62[16 * v68];
          *(_DWORD *)unint64_t v79 = v33;
          v79[1] = v41;
          unint64_t v80 = v79;
          if (v25 == v23) {
            goto LABEL_134;
          }
          do
          {
            *((_OWORD *)v80 - 1) = *((_OWORD *)v25 - 1);
            v80 -= 2;
            v25 -= 2;
          }
          while (v25 != v23);
        }
        int64_t v23 = (double *)__p;
LABEL_134:
        unint64_t v89 = &v62[16 * v61];
        float32x4_t v13 = v79 + 2;
        std::vector<int> __p = v80;
LABEL_135:
        uint64_t v94 = v13;
        unint64_t v95 = (unint64_t)v89;
        if (v23) {
          operator delete(v23);
        }
        goto LABEL_137;
      }
      float32x4_t v52 = (char *)v95;
      if (vmovn_s64(vcgtq_f64(vaddq_f64((float64x2_t)v40, (float64x2_t)vdupq_laneq_s64(v40, 1)), vaddq_f64((float64x2_t)v37, (float64x2_t)vdupq_laneq_s64(v37, 1)))).u8[0])
      {
        if ((unint64_t)v25 >= v95)
        {
          uint64_t v53 = ((char *)v25 - (char *)v23) >> 4;
          unint64_t v54 = v53 + 1;
          if ((unint64_t)(v53 + 1) >> 60) {
            goto LABEL_144;
          }
          uint64_t v55 = v95 - (void)v23;
          if ((uint64_t)(v95 - (void)v23) >> 3 > v54) {
            unint64_t v54 = v55 >> 3;
          }
          if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v56 = v54;
          }
          if (v56)
          {
            float32x4_t v57 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v95, v56);
            int64_t v23 = (double *)__p;
            uint64_t v25 = (double *)v94;
          }
          else
          {
            float32x4_t v57 = 0;
          }
          unint64_t v71 = (double *)&v57[16 * v53];
          *(_DWORD *)unint64_t v71 = v33;
          v71[1] = v41;
          uint64_t v72 = v71;
          if (v25 != v23)
          {
            do
            {
              *((_OWORD *)v72 - 1) = *((_OWORD *)v25 - 1);
              v72 -= 2;
              v25 -= 2;
            }
            while (v25 != v23);
            int64_t v23 = (double *)__p;
          }
          float32x4_t v52 = &v57[16 * v56];
          float32x4_t v13 = v71 + 2;
          std::vector<int> __p = v72;
          uint64_t v94 = v71 + 2;
          unint64_t v95 = (unint64_t)v52;
          if (v23)
          {
            operator delete(v23);
            float32x4_t v52 = (char *)v95;
          }
        }
        else
        {
          *((_DWORD *)v13 - 4) = v33;
          *(v13 - 1) = v41;
        }
        uint64_t v94 = v13;
        int v73 = *v32;
        if (v13 < (double *)v52)
        {
          *(_DWORD *)float32x4_t v13 = v73;
          v13[1] = v38;
LABEL_112:
          v13 += 2;
          goto LABEL_137;
        }
        int64_t v23 = (double *)__p;
        uint64_t v74 = ((char *)v13 - (unsigned char *)__p) >> 4;
        unint64_t v75 = v74 + 1;
        if ((unint64_t)(v74 + 1) >> 60) {
          goto LABEL_144;
        }
        uint64_t v76 = v52 - (unsigned char *)__p;
        if (v76 >> 3 > v75) {
          unint64_t v75 = v76 >> 3;
        }
        if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v77 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v77 = v75;
        }
        if (v77)
        {
          uint64_t v78 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v95, v77);
          int64_t v23 = (double *)__p;
          float32x4_t v13 = (double *)v94;
        }
        else
        {
          uint64_t v78 = 0;
        }
        uint64_t v87 = (double *)&v78[16 * v74];
        *(_DWORD *)uint64_t v87 = v73;
        v87[1] = v38;
        uint64_t v88 = v87;
        if (v13 != v23)
        {
          do
          {
            *((_OWORD *)v88 - 1) = *((_OWORD *)v13 - 1);
            v88 -= 2;
            v13 -= 2;
          }
          while (v13 != v23);
LABEL_128:
          int64_t v23 = (double *)__p;
        }
      }
      else
      {
        if ((unint64_t)v25 >= v95)
        {
          uint64_t v63 = ((char *)v25 - (char *)v23) >> 4;
          unint64_t v64 = v63 + 1;
          if ((unint64_t)(v63 + 1) >> 60) {
            goto LABEL_144;
          }
          uint64_t v65 = v95 - (void)v23;
          if ((uint64_t)(v95 - (void)v23) >> 3 > v64) {
            unint64_t v64 = v65 >> 3;
          }
          if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v66 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v66 = v64;
          }
          if (v66)
          {
            float v67 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v95, v66);
            int64_t v23 = (double *)__p;
            uint64_t v25 = (double *)v94;
          }
          else
          {
            float v67 = 0;
          }
          int v81 = (double *)&v67[16 * v63];
          *(_DWORD *)int v81 = v31;
          v81[1] = v38;
          uint64_t v82 = v81;
          if (v25 != v23)
          {
            do
            {
              *((_OWORD *)v82 - 1) = *((_OWORD *)v25 - 1);
              v82 -= 2;
              v25 -= 2;
            }
            while (v25 != v23);
            int64_t v23 = (double *)__p;
          }
          float32x4_t v52 = &v67[16 * v66];
          float32x4_t v13 = v81 + 2;
          std::vector<int> __p = v82;
          uint64_t v94 = v81 + 2;
          unint64_t v95 = (unint64_t)v52;
          if (v23)
          {
            operator delete(v23);
            float32x4_t v52 = (char *)v95;
          }
        }
        else
        {
          *((_DWORD *)v13 - 4) = v31;
          *(v13 - 1) = v38;
        }
        uint64_t v94 = v13;
        int v83 = *v34;
        if (v13 < (double *)v52)
        {
          *(_DWORD *)float32x4_t v13 = v83;
          v13[1] = v41;
          goto LABEL_112;
        }
        int64_t v23 = (double *)__p;
        uint64_t v84 = ((char *)v13 - (unsigned char *)__p) >> 4;
        unint64_t v85 = v84 + 1;
        if ((unint64_t)(v84 + 1) >> 60) {
          goto LABEL_144;
        }
        uint64_t v86 = v52 - (unsigned char *)__p;
        if (v86 >> 3 > v85) {
          unint64_t v85 = v86 >> 3;
        }
        if ((unint64_t)v86 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v77 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v77 = v85;
        }
        if (v77)
        {
          uint64_t v78 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v95, v77);
          int64_t v23 = (double *)__p;
          float32x4_t v13 = (double *)v94;
        }
        else
        {
          uint64_t v78 = 0;
        }
        uint64_t v87 = (double *)&v78[16 * v84];
        *(_DWORD *)uint64_t v87 = v83;
        v87[1] = v41;
        uint64_t v88 = v87;
        if (v13 != v23)
        {
          do
          {
            *((_OWORD *)v88 - 1) = *((_OWORD *)v13 - 1);
            v88 -= 2;
            v13 -= 2;
          }
          while (v13 != v23);
          goto LABEL_128;
        }
      }
      unint64_t v89 = &v78[16 * v77];
      float32x4_t v13 = v87 + 2;
      std::vector<int> __p = v88;
      goto LABEL_135;
    }
    unsigned int v43 = v30[4];
    if (!v43) {
      goto LABEL_44;
    }
    uint64_t v44 = v30[3];
    float32x4_t v45 = (int *)(a1[4] + 4 * v44);
    uint64_t v46 = 4 * (v43 + v44) - 4 * v44;
    do
    {
      unsigned int v47 = *v45;
      _ZNKSt3__18functionIFDv2_djS1_EEclEjS1_(a2, *v45, (__n128)a5);
      float64x2_t v49 = vsubq_f64(a5, v48);
      double v50 = vaddvq_f64(vmulq_f64(v49, v49));
      if (v50 < *a3 || (v50 == *a3 ? (BOOL v51 = v47 >= *a4) : (BOOL v51 = 1), !v51))
      {
        *a3 = v50;
        *a4 = v47;
        int64x2_t v91 = (int64x2_t)v48;
      }
      ++v45;
      v46 -= 4;
    }
    while (v46);
    float32x4_t v13 = (double *)v94;
LABEL_138:
    int64_t v23 = (double *)__p;
  }
  while (__p != v13);
  if (!v13) {
    return (__n128)v91;
  }
LABEL_142:
  uint64_t v94 = v13;
  operator delete(v13);
  return (__n128)v91;
}

void _ZNSt3__16vectorIZNK4geom3bvhIdLh2EE13closest_pointINS_8functionIFDv2_djS6_EEEEES6_T_S6_RdRjE5stateNS_9allocatorISC_EEE7reserveEm(void **a1, unint64_t a2)
{
  uint64_t v4 = a1[2];
  uint64_t v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      abort();
    }
    int64_t v5 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    unint64_t v6 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v3, a2);
    unint64_t v7 = &v6[v5 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v9 = &v6[16 * v8];
    double v11 = (char *)*a1;
    float64x2_t v10 = (char *)a1[1];
    float32x2_t v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        *((_OWORD *)v12 - 1) = *((_OWORD *)v10 - 1);
        v12 -= 16;
        v10 -= 16;
      }
      while (v10 != v11);
      float64x2_t v10 = (char *)*a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
    {
      operator delete(v10);
    }
  }
}

uint64_t _ZNKSt3__18functionIFDv2_djS1_EEclEjS1_(uint64_t a1, int a2, __n128 a3)
{
  int v7 = a2;
  __n128 v6 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, int *, __n128 *))(*(void *)v3 + 48))(v3, &v7, &v6);
  }
  int64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return _ZNK4geom3bvhIdLh3EE13closest_pointINSt3__18functionIFDv3_djS5_EEEEES5_T_S5_RdRj(v5);
}

double _ZNK4geom3bvhIdLh3EE13closest_pointINSt3__18functionIFDv3_djS5_EEEEES5_T_S5_RdRj@<D0>(void *a1@<X0>, uint64_t a2@<X1>, float64x2_t *a3@<X2>, double *a4@<X3>, unsigned int *a5@<X4>, int64x2_t *a6@<X8>)
{
  float64x2_t v108 = *a3;
  float64x2_t v109 = a3[1];
  *a4 = INFINITY;
  *a5 = -1;
  if (a1[5] == a1[4] || (unint64_t v9 = a1[2] - a1[1]) == 0)
  {
    v19.i64[0] = 0x7FF8000000000000;
    double result = NAN;
    v6.i64[0] = 0x7FF8000000000000;
    goto LABEL_147;
  }
  std::vector<int> __p = 0;
  unint64_t v112 = 0;
  unint64_t v113 = 0;
  _ZNSt3__16vectorIZNK4geom3bvhIdLh2EE13closest_pointINS_8functionIFDv2_djS6_EEEEES6_T_S6_RdRjE5stateNS_9allocatorISC_EEE7reserveEm(&__p, 31 - __clz(-1431655765 * (v9 >> 5)));
  uint64_t v13 = a1[1];
  float64x2_t v14 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v108, *(float64x2_t *)(v13 + 64)), *(float64x2_t *)(v13 + 32)), v108);
  float64x2_t v15 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v109.f64[0], (float64x2_t)*(unint64_t *)(v13 + 80)), (float64x2_t)*(unint64_t *)(v13 + 48)), v109);
  double v16 = vmulq_f64(v15, v15).f64[0] + vaddvq_f64(vmulq_f64(v14, v14));
  unint64_t v17 = (double *)v112;
  if ((unint64_t)v112 >= v113)
  {
    int64_t v21 = ((unsigned char *)v112 - (unsigned char *)__p) >> 4;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 60) {
LABEL_148:
    }
      abort();
    uint64_t v23 = v113 - (void)__p;
    if ((uint64_t)(v113 - (void)__p) >> 3 > v22) {
      unint64_t v22 = v23 >> 3;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v24 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24) {
      uint64_t v25 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v113, v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = (double *)&v25[16 * v21];
    double v27 = &v25[16 * v24];
    *uint64_t v26 = 0.0;
    v26[1] = v16;
    float32x4_t v18 = v26 + 2;
    uint64_t v29 = (char *)__p;
    double v28 = (char *)v112;
    if (v112 != __p)
    {
      do
      {
        *((_OWORD *)v26 - 1) = *((_OWORD *)v28 - 1);
        v26 -= 2;
        v28 -= 16;
      }
      while (v28 != v29);
      double v28 = (char *)__p;
    }
    std::vector<int> __p = v26;
    unint64_t v112 = v18;
    unint64_t v113 = (unint64_t)v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *(void *)unint64_t v112 = 0;
    float32x4_t v18 = v17 + 2;
    v17[1] = v16;
  }
  unint64_t v30 = (double *)__p;
  if (__p == v18)
  {
    a6[1].i64[0] = 0x7FF8000000000000;
    *a6 = vdupq_n_s64(0x7FF8000000000000uLL);
    v19.i64[0] = 0x7FF8000000000000;
    double result = NAN;
    v6.i64[0] = 0x7FF8000000000000;
    goto LABEL_146;
  }
  unint64_t v101 = a6;
  int8x16_t v19 = (int8x16_t)vdupq_n_s64(0x7FF8000000000000uLL);
  v6.i64[0] = 0x7FF8000000000000;
  do
  {
    uint64_t v31 = v18 - 2;
    unsigned int v32 = *((_DWORD *)v18 - 4);
    double v33 = *(v18 - 1);
    unint64_t v112 = v18 - 2;
    double v34 = *a4;
    if (*a4 <= v33)
    {
LABEL_45:
      v18 -= 2;
      goto LABEL_142;
    }
    uint64_t v35 = a1[1];
    uint64_t v36 = v35 + 96 * v32;
    unsigned int v39 = *(_DWORD *)(v36 + 4);
    double v38 = (int *)(v36 + 4);
    unsigned int v37 = v39;
    unsigned int v40 = v38[1];
    if (v39 != -1 || v40 != -1)
    {
      uint64_t v42 = v35 + 96 * v37;
      float64x2_t v43 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v108, *(float64x2_t *)(v42 + 64)), *(float64x2_t *)(v42 + 32)), v108);
      float64x2_t v44 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v109.f64[0], (float64x2_t)*(unint64_t *)(v42 + 80)), (float64x2_t)*(unint64_t *)(v42 + 48)), v109);
      double v45 = vmulq_f64(v44, v44).f64[0] + vaddvq_f64(vmulq_f64(v43, v43));
      uint64_t v46 = v35 + 96 * v40;
      float64x2_t v47 = vsubq_f64(vmaxnmq_f64(vminnmq_f64(v108, *(float64x2_t *)(v46 + 64)), *(float64x2_t *)(v46 + 32)), v108);
      float64x2_t v48 = vsubq_f64(vmaxnmq_f64((float64x2_t)(unint64_t)*(_OWORD *)&vminnmq_f64((float64x2_t)*(unint64_t *)&v109.f64[0], (float64x2_t)*(unint64_t *)(v46 + 80)), (float64x2_t)*(unint64_t *)(v46 + 48)), v109);
      double v49 = vmulq_f64(v48, v48).f64[0] + vaddvq_f64(vmulq_f64(v47, v47));
      if (v45 >= v34 || v49 >= v34)
      {
        if (v45 < v34)
        {
          if ((unint64_t)v31 < v113)
          {
            *((_DWORD *)v18 - 4) = v37;
            *(v18 - 1) = v45;
            goto LABEL_141;
          }
          uint64_t v69 = ((char *)v31 - (char *)v30) >> 4;
          unint64_t v70 = v69 + 1;
          if ((unint64_t)(v69 + 1) >> 60) {
            goto LABEL_148;
          }
          int64x2_t v103 = v6;
          int8x16_t v106 = v19;
          uint64_t v71 = v113 - (void)v30;
          if ((uint64_t)(v113 - (void)v30) >> 3 > v70) {
            unint64_t v70 = v71 >> 3;
          }
          if ((unint64_t)v71 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v72 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v72 = v70;
          }
          if (v72)
          {
            int v73 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v113, v72);
            unint64_t v30 = (double *)__p;
            uint64_t v31 = (double *)v112;
          }
          else
          {
            int v73 = 0;
          }
          uint64_t v90 = (double *)&v73[16 * v69];
          *(_DWORD *)uint64_t v90 = v37;
          v90[1] = v45;
          int64x2_t v91 = v90;
          if (v31 == v30) {
            goto LABEL_137;
          }
          do
          {
            *((_OWORD *)v91 - 1) = *((_OWORD *)v31 - 1);
            v91 -= 2;
            v31 -= 2;
          }
          while (v31 != v30);
        }
        else
        {
          if (v49 >= v34) {
            goto LABEL_45;
          }
          if ((unint64_t)v31 < v113)
          {
            *((_DWORD *)v18 - 4) = v40;
            *(v18 - 1) = v49;
LABEL_141:
            unint64_t v112 = v18;
            goto LABEL_142;
          }
          uint64_t v79 = ((char *)v31 - (char *)v30) >> 4;
          unint64_t v80 = v79 + 1;
          if ((unint64_t)(v79 + 1) >> 60) {
            goto LABEL_148;
          }
          int64x2_t v103 = v6;
          int8x16_t v106 = v19;
          uint64_t v81 = v113 - (void)v30;
          if ((uint64_t)(v113 - (void)v30) >> 3 > v80) {
            unint64_t v80 = v81 >> 3;
          }
          if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v72 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v72 = v80;
          }
          if (v72)
          {
            int v73 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v113, v72);
            unint64_t v30 = (double *)__p;
            uint64_t v31 = (double *)v112;
          }
          else
          {
            int v73 = 0;
          }
          uint64_t v90 = (double *)&v73[16 * v79];
          *(_DWORD *)uint64_t v90 = v40;
          v90[1] = v49;
          int64x2_t v91 = v90;
          if (v31 == v30) {
            goto LABEL_137;
          }
          do
          {
            *((_OWORD *)v91 - 1) = *((_OWORD *)v31 - 1);
            v91 -= 2;
            v31 -= 2;
          }
          while (v31 != v30);
        }
        unint64_t v30 = (double *)__p;
LABEL_137:
        int v100 = &v73[16 * v72];
        float32x4_t v18 = v90 + 2;
        std::vector<int> __p = v91;
        goto LABEL_138;
      }
      uint64_t v63 = (char *)v113;
      int64x2_t v103 = v6;
      int8x16_t v106 = v19;
      if (v45 >= v49)
      {
        if ((unint64_t)v31 >= v113)
        {
          uint64_t v74 = ((char *)v31 - (char *)v30) >> 4;
          unint64_t v75 = v74 + 1;
          if ((unint64_t)(v74 + 1) >> 60) {
            goto LABEL_148;
          }
          uint64_t v76 = v113 - (void)v30;
          if ((uint64_t)(v113 - (void)v30) >> 3 > v75) {
            unint64_t v75 = v76 >> 3;
          }
          if ((unint64_t)v76 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v77 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v77 = v75;
          }
          if (v77)
          {
            uint64_t v78 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v113, v77);
            unint64_t v30 = (double *)__p;
            uint64_t v31 = (double *)v112;
          }
          else
          {
            uint64_t v78 = 0;
          }
          float64x2_t v92 = (double *)&v78[16 * v74];
          *(_DWORD *)float64x2_t v92 = v37;
          v92[1] = v45;
          uint64_t v93 = v92;
          if (v31 != v30)
          {
            do
            {
              *((_OWORD *)v93 - 1) = *((_OWORD *)v31 - 1);
              v93 -= 2;
              v31 -= 2;
            }
            while (v31 != v30);
            unint64_t v30 = (double *)__p;
          }
          uint64_t v63 = &v78[16 * v77];
          float32x4_t v18 = v92 + 2;
          std::vector<int> __p = v93;
          unint64_t v112 = v92 + 2;
          unint64_t v113 = (unint64_t)v63;
          if (v30)
          {
            operator delete(v30);
            uint64_t v63 = (char *)v113;
          }
          int64x2_t v6 = v103;
          int8x16_t v19 = v106;
        }
        else
        {
          *((_DWORD *)v18 - 4) = v37;
          *(v18 - 1) = v45;
        }
        unint64_t v112 = v18;
        int v94 = v38[1];
        if (v18 < (double *)v63)
        {
          *(_DWORD *)float32x4_t v18 = v94;
          v18[1] = v49;
          goto LABEL_115;
        }
        unint64_t v30 = (double *)__p;
        uint64_t v95 = ((char *)v18 - (unsigned char *)__p) >> 4;
        unint64_t v96 = v95 + 1;
        if ((unint64_t)(v95 + 1) >> 60) {
          goto LABEL_148;
        }
        uint64_t v97 = v63 - (unsigned char *)__p;
        if (v97 >> 3 > v96) {
          unint64_t v96 = v97 >> 3;
        }
        if ((unint64_t)v97 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v88 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v96;
        }
        if (v88)
        {
          unint64_t v89 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v113, v88);
          unint64_t v30 = (double *)__p;
          float32x4_t v18 = (double *)v112;
        }
        else
        {
          unint64_t v89 = 0;
        }
        uint64_t v98 = (double *)&v89[16 * v95];
        *(_DWORD *)uint64_t v98 = v94;
        v98[1] = v49;
        unint64_t v99 = v98;
        if (v18 != v30)
        {
          do
          {
            *((_OWORD *)v99 - 1) = *((_OWORD *)v18 - 1);
            v99 -= 2;
            v18 -= 2;
          }
          while (v18 != v30);
          goto LABEL_131;
        }
      }
      else
      {
        if ((unint64_t)v31 >= v113)
        {
          uint64_t v64 = ((char *)v31 - (char *)v30) >> 4;
          unint64_t v65 = v64 + 1;
          if ((unint64_t)(v64 + 1) >> 60) {
            goto LABEL_148;
          }
          uint64_t v66 = v113 - (void)v30;
          if ((uint64_t)(v113 - (void)v30) >> 3 > v65) {
            unint64_t v65 = v66 >> 3;
          }
          if ((unint64_t)v66 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v67 = v65;
          }
          if (v67)
          {
            uint64_t v68 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v113, v67);
            unint64_t v30 = (double *)__p;
            uint64_t v31 = (double *)v112;
          }
          else
          {
            uint64_t v68 = 0;
          }
          uint64_t v82 = (double *)&v68[16 * v64];
          *(_DWORD *)uint64_t v82 = v40;
          v82[1] = v49;
          int v83 = v82;
          if (v31 != v30)
          {
            do
            {
              *((_OWORD *)v83 - 1) = *((_OWORD *)v31 - 1);
              v83 -= 2;
              v31 -= 2;
            }
            while (v31 != v30);
            unint64_t v30 = (double *)__p;
          }
          uint64_t v63 = &v68[16 * v67];
          float32x4_t v18 = v82 + 2;
          std::vector<int> __p = v83;
          unint64_t v112 = v82 + 2;
          unint64_t v113 = (unint64_t)v63;
          if (v30)
          {
            operator delete(v30);
            uint64_t v63 = (char *)v113;
          }
          int64x2_t v6 = v103;
          int8x16_t v19 = v106;
        }
        else
        {
          *((_DWORD *)v18 - 4) = v40;
          *(v18 - 1) = v49;
        }
        unint64_t v112 = v18;
        int v84 = *v38;
        if (v18 < (double *)v63)
        {
          *(_DWORD *)float32x4_t v18 = v84;
          v18[1] = v45;
LABEL_115:
          v18 += 2;
          goto LABEL_141;
        }
        unint64_t v30 = (double *)__p;
        uint64_t v85 = ((char *)v18 - (unsigned char *)__p) >> 4;
        unint64_t v86 = v85 + 1;
        if ((unint64_t)(v85 + 1) >> 60) {
          goto LABEL_148;
        }
        uint64_t v87 = v63 - (unsigned char *)__p;
        if (v87 >> 3 > v86) {
          unint64_t v86 = v87 >> 3;
        }
        if ((unint64_t)v87 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v88 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v88 = v86;
        }
        if (v88)
        {
          unint64_t v89 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v113, v88);
          unint64_t v30 = (double *)__p;
          float32x4_t v18 = (double *)v112;
        }
        else
        {
          unint64_t v89 = 0;
        }
        uint64_t v98 = (double *)&v89[16 * v85];
        *(_DWORD *)uint64_t v98 = v84;
        v98[1] = v45;
        unint64_t v99 = v98;
        if (v18 != v30)
        {
          do
          {
            *((_OWORD *)v99 - 1) = *((_OWORD *)v18 - 1);
            v99 -= 2;
            v18 -= 2;
          }
          while (v18 != v30);
LABEL_131:
          unint64_t v30 = (double *)__p;
        }
      }
      int v100 = &v89[16 * v88];
      float32x4_t v18 = v98 + 2;
      std::vector<int> __p = v99;
LABEL_138:
      unint64_t v112 = v18;
      unint64_t v113 = (unint64_t)v100;
      if (v30) {
        operator delete(v30);
      }
      int64x2_t v6 = v103;
      int8x16_t v19 = v106;
      goto LABEL_141;
    }
    uint64_t v51 = v35 + 96 * v32;
    int v52 = *(_DWORD *)(v51 + 16);
    if (!v52) {
      goto LABEL_45;
    }
    float64x2_t v102 = (float64x2_t)v6;
    int8x16_t v105 = v19;
    uint64_t v53 = *(unsigned int *)(v51 + 12);
    unint64_t v54 = (unsigned int *)(a1[4] + 4 * v53);
    uint64_t v55 = 4 * (v52 + v53) - 4 * v53;
    do
    {
      unsigned int v56 = *v54;
      unsigned int v118 = *v54;
      float64x2_t v116 = v108;
      float64x2_t v117 = v109;
      _ZNKSt3__110__function12__value_funcIFDv3_djS2_EEclB8nn180100EOjOS2_(a2, &v114);
      float64x2_t v58 = v114;
      float64x2_t v57 = v115;
      float64x2_t v59 = vsubq_f64(v108, v114);
      float64x2_t v60 = vsubq_f64(v109, v115);
      double v61 = vmulq_f64(v60, v60).f64[0] + vaddvq_f64(vmulq_f64(v59, v59));
      if (v61 < *a4 || (v61 == *a4 ? (BOOL v62 = v56 >= *a5) : (BOOL v62 = 1), !v62))
      {
        *a4 = v61;
        *a5 = v56;
        float64x2_t v102 = v57;
        int8x16_t v105 = (int8x16_t)v58;
      }
      ++v54;
      v55 -= 4;
    }
    while (v55);
    float32x4_t v18 = (double *)v112;
    int64x2_t v6 = (int64x2_t)v102;
    int8x16_t v19 = v105;
LABEL_142:
    unint64_t v30 = (double *)__p;
  }
  while (__p != v18);
  *(void *)&double result = vextq_s8(v19, v19, 8uLL).u64[0];
  a6 = v101;
  *unint64_t v101 = (int64x2_t)v19;
  v101[1].i64[0] = v6.i64[0];
  if (!v18) {
    goto LABEL_147;
  }
LABEL_146:
  double v110 = result;
  int64x2_t v104 = v6;
  uint64_t v107 = v19.i64[0];
  unint64_t v112 = v18;
  operator delete(v18);
  double result = v110;
  int64x2_t v6 = v104;
  v19.i64[0] = v107;
LABEL_147:
  *(double *)&v19.i64[1] = result;
  *a6 = (int64x2_t)v19;
  a6[1] = v6;
  return result;
}

uint64_t geom::bvh<float,(unsigned char)2>::bvh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v10[0] = a2;
  v10[1] = a3;
  v9[0] = a4;
  v9[1] = a5;
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_fEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v10, a6, a1 + 56);
  geom::make_external_array<geom::slice<geom::bbox<float,(unsigned char)2>>>(v9, a6, a1 + 80);
  return a1;
}

void *geom::make_external_array<geom::slice<geom::bbox<float,(unsigned char)2>>>@<X0>(void *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[1];
  if (v3)
  {
    if (a2) {
      operator new[]();
    }
    *(void *)a3 = *result;
    *(void *)(a3 + 8) = v3;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

double geom::bvh<float,(unsigned char)2>::bvh(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(unsigned char *)a1 = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(unsigned char *)(a1 + 72) = 0;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)(a1 + 56) = *(void *)a2;
  *(void *)(a1 + 64) = v4;
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  uint64_t v5 = *(void *)(a3 + 8);
  *(void *)(a1 + 80) = *(void *)a3;
  *(void *)(a1 + 88) = v5;
  *(unsigned char *)(a1 + 96) = *(unsigned char *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t geom::bvh<float,(unsigned char)2>::bvh(uint64_t a1)
{
  return geom::bvh<float,(unsigned char)2>::bvh(a1, 0, 0, 0, 0, 0);
}

void *geom::bvh<float,(unsigned char)2>::reset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v15[0] = a4;
  v15[1] = a5;
  *(unsigned char *)a1 = 0;
  if (!a3) {
    a2 = 0;
  }
  if (a3 && a6) {
    operator new[]();
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v10 = *(void *)(a1 + 56);
    if (v10) {
      MEMORY[0x237E10700](v10, 0x1000C8000313F17);
    }
  }
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = a3;
  *(unsigned char *)(a1 + 72) = 0;
  double result = geom::make_external_array<geom::slice<geom::bbox<float,(unsigned char)2>>>(v15, a6, (uint64_t)v13);
  if (*(unsigned char *)(a1 + 96))
  {
    double result = *(void **)(a1 + 80);
    if (result) {
      double result = (void *)MEMORY[0x237E10700](result, 0x1000C80451B5BE8);
    }
  }
  uint64_t v12 = v13[1];
  *(void *)(a1 + 80) = v13[0];
  *(void *)(a1 + 88) = v12;
  *(unsigned char *)(a1 + 96) = v14;
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  return result;
}

uint64_t geom::bvh<float,(unsigned char)2>::reset(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(unsigned char *)double result = 0;
  if (*(unsigned char *)(result + 72))
  {
    double result = *(void *)(result + 56);
    if (result) {
      double result = MEMORY[0x237E10700](result, 0x1000C8000313F17);
    }
  }
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(v5 + 56) = *(void *)a2;
  *(void *)(v5 + 64) = v6;
  *(unsigned char *)(v5 + 72) = *(unsigned char *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (*(unsigned char *)(v5 + 96))
  {
    double result = *(void *)(v5 + 80);
    if (result) {
      double result = MEMORY[0x237E10700](result, 0x1000C80451B5BE8);
    }
  }
  uint64_t v7 = *(void *)(a3 + 8);
  *(void *)(v5 + 80) = *(void *)a3;
  *(void *)(v5 + 88) = v7;
  *(unsigned char *)(v5 + 96) = *(unsigned char *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(v5 + 40) = *(void *)(v5 + 32);
  *(void *)(v5 + 16) = *(void *)(v5 + 8);
  return result;
}

uint64_t geom::bvh<float,(unsigned char)2>::iterator::index(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

BOOL geom::bvh<float,(unsigned char)2>::iterator::is_leaf(_DWORD *a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 8);
  unsigned int v2 = a1[2];
  return *(_DWORD *)(v1 + 40 * v2 + 4) == -1 && *(_DWORD *)(v1 + 40 * v2 + 8) == -1;
}

uint64_t geom::bvh<float,(unsigned char)2>::nodes(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

BOOL geom::bvh<float,(unsigned char)2>::iterator::is_invalid(uint64_t a1)
{
  return *(_DWORD *)(a1 + 8) == -1;
}

uint64_t geom::bvh<float,(unsigned char)2>::iterator::left(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t geom::bvh<float,(unsigned char)2>::iterator::iterator(uint64_t result, uint64_t a2, int a3)
{
  *(void *)double result = a2;
  *(_DWORD *)(result + 8) = a3;
  return result;
}

uint64_t geom::bvh<float,(unsigned char)2>::iterator::right(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t geom::bvh<float,(unsigned char)2>::iterator::operator*(unsigned int *a1)
{
  return *(void *)(*(void *)a1 + 8) + 40 * a1[2];
}

uint64_t geom::bvh<float,(unsigned char)2>::iterator::bounds(unsigned int *a1)
{
  return *(void *)(*(void *)a1 + 8) + 40 * a1[2] + 24;
}

uint64_t geom::bvh<float,(unsigned char)2>::iterator::primitives(unsigned int *a1)
{
  return *(void *)(*(void *)a1 + 32)
       + 4 * *(unsigned int *)(*(void *)(*(void *)a1 + 8) + 40 * a1[2] + 12);
}

unsigned int *geom::bvh<float,(unsigned char)2>::iterator::operator++(unsigned int *result)
{
  uint64_t v1 = result[2];
  if (v1 != -1)
  {
    unint64_t v2 = v1 + 1;
    result[2] = v2;
    if (0xCCCCCCCCCCCCCCCDLL
       * ((uint64_t)(*(void *)(*(void *)result + 16) - *(void *)(*(void *)result + 8)) >> 3) <= v2)
      result[2] = -1;
  }
  return result;
}

uint64_t geom::bvh<float,(unsigned char)2>::iterator::operator++(void *a1)
{
  uint64_t result = *a1;
  uint64_t v3 = a1[1];
  if (v3 != -1)
  {
    unint64_t v4 = (v3 + 1);
    *((_DWORD *)a1 + 2) = v4;
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(result + 16) - *(void *)(result + 8)) >> 3) <= v4) {
      *((_DWORD *)a1 + 2) = -1;
    }
  }
  return result;
}

BOOL geom::bvh<float,(unsigned char)2>::iterator::operator==(uint64_t a1, uint64_t a2)
{
  return a2 == a1;
}

BOOL geom::bvh<float,(unsigned char)2>::iterator::operator!=(uint64_t a1, uint64_t a2)
{
  return a2 != a1;
}

void *geom::bvh<float,(unsigned char)2>::build_middle_split(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v5, a2);
  v4[0] = &unk_26EA05D60;
  v4[1] = a1;
  v4[3] = v4;
  geom::bvh<float,(unsigned char)2>::build_top_down(a1, (uint64_t)v5, (uint64_t)v4);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v4);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v5);
}

void geom::bvh<float,(unsigned char)2>::build_top_down(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v92 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)a1)
  {
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), *(void *)(a1 + 88));
  uint64_t v6 = *(char **)(a1 + 32);
  uint64_t v7 = *(char **)(a1 + 40);
  if (v6 == v7)
  {
    if (*(void *)(a1 + 88))
    {
      uint64_t v11 = (v7 - v6) >> 2;
      float32x2_t v12 = (float32x2_t)vdup_n_s32(0x7F800000u);
      goto LABEL_15;
    }
LABEL_13:
    *(unsigned char *)a1 = 1;
    return;
  }
  int v8 = 0;
  unint64_t v9 = *(char **)(a1 + 32);
  do
  {
    *(_DWORD *)unint64_t v9 = v8;
    v9 += 4;
    ++v8;
  }
  while (v9 != v7);
  if (!*(void *)(a1 + 88)) {
    goto LABEL_13;
  }
  uint64_t v10 = v7 - v6;
  uint64_t v11 = v10 >> 2;
  if (v10)
  {
    float32x2_t v12 = (float32x2_t)vdup_n_s32(0x7F800000u);
    uint64_t v13 = 4 * v11;
    float32x2_t v14 = (float32x2_t)0x7F0000007FLL;
    do
    {
      unsigned int v15 = *(_DWORD *)v6;
      v6 += 4;
      double v16 = (float32x2_t *)(*(void *)(a1 + 80) + 16 * v15);
      float32x2_t v12 = vminnm_f32(v12, *v16);
      float32x2_t v14 = vmaxnm_f32(v14, v16[1]);
      v13 -= 4;
    }
    while (v13);
    goto LABEL_16;
  }
  float32x2_t v12 = (float32x2_t)vdup_n_s32(0x7F800000u);
LABEL_15:
  float32x2_t v14 = (float32x2_t)0x7F0000007FLL;
LABEL_16:
  unint64_t v17 = *(void *)(a1 + 24);
  uint64_t v82 = a1 + 24;
  unint64_t v18 = *(void *)(a1 + 16);
  if (v18 >= v17)
  {
    uint64_t v20 = *(void *)(a1 + 8);
    unint64_t v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v18 - v20) >> 3);
    unint64_t v22 = v21 + 1;
    if (v21 + 1 > 0x666666666666666) {
      goto LABEL_77;
    }
    unint64_t v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v17 - v20) >> 3);
    if (2 * v23 > v22) {
      unint64_t v22 = 2 * v23;
    }
    if (v23 >= 0x333333333333333) {
      unint64_t v24 = 0x666666666666666;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24) {
      uint64_t v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<double>>>(v82, v24);
    }
    else {
      uint64_t v25 = 0;
    }
    uint64_t v26 = (float32x2_t *)&v25[40 * v21];
    double v27 = &v25[40 * v24];
    *(_OWORD *)v26->f32 = xmmword_236F196D0;
    v26[2].i32[0] = v11;
    v26[3] = v12;
    v26[4] = v14;
    int8x16_t v19 = (char *)&v26[5];
    uint64_t v29 = *(char **)(a1 + 8);
    double v28 = *(char **)(a1 + 16);
    if (v28 != v29)
    {
      do
      {
        long long v30 = *(_OWORD *)(v28 - 40);
        long long v31 = *(_OWORD *)(v28 - 24);
        v26[-1] = *(float32x2_t *)(v28 - 8);
        *(_OWORD *)v26[-3].f32 = v31;
        *(_OWORD *)v26[-5].f32 = v30;
        v26 -= 5;
        v28 -= 40;
      }
      while (v28 != v29);
      double v28 = *(char **)(a1 + 8);
    }
    *(void *)(a1 + 8) = v26;
    *(void *)(a1 + 16) = v19;
    *(void *)(a1 + 24) = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v18 = xmmword_236F196D0;
    *(_DWORD *)(v18 + 16) = v11;
    *(float32x2_t *)(v18 + 24) = v12;
    *(float32x2_t *)(v18 + 32) = v14;
    int8x16_t v19 = (char *)(v18 + 40);
  }
  *(void *)(a1 + 16) = v19;
  long long v89 = 0u;
  memset(v88, 0, sizeof(v88));
  LODWORD(v85) = 0;
  std::deque<unsigned int>::push_back(v88, &v85);
  uint64_t v32 = *((void *)&v89 + 1);
  if (*((void *)&v89 + 1))
  {
    int32x2_t v33 = vdup_n_s32(0x7F800000u);
    while (1)
    {
      uint64_t v34 = v32 - 1;
      unsigned int v35 = *(_DWORD *)(*(void *)(*((void *)&v88[0] + 1)
                                  + (((unint64_t)(v89 + v34) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v89 + v34) & 0x3FF));
      *((void *)&v89 + 1) = v34;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v88, 1);
      uint64_t v36 = *(void *)(a2 + 24);
      if (!v36) {
        break;
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v36 + 48))(v36, *(void *)(a1 + 8) + 40 * v35) & 1) == 0)
      {
        uint64_t v37 = *(void *)(a1 + 8) + 40 * v35;
        uint64_t v38 = *(void *)(v37 + 32);
        long long v39 = *(_OWORD *)(v37 + 16);
        long long v85 = *(_OWORD *)v37;
        long long v86 = v39;
        uint64_t v87 = v38;
        *(int32x2_t *)&long long v84 = v33;
        *((void *)&v84 + 1) = 0x7F0000007FLL;
        *(int32x2_t *)&long long v83 = v33;
        *((void *)&v83 + 1) = 0x7F0000007FLL;
        uint64_t v40 = *(void *)(a3 + 24);
        if (!v40) {
          break;
        }
        int v41 = (*(uint64_t (**)(uint64_t, long long *, long long *, long long *))(*(void *)v40 + 48))(v40, &v85, &v84, &v83);
        int v42 = v86;
        if (v41 && v86 != v41)
        {
          int v44 = v41;
          int v45 = HIDWORD(v85);
          uint64_t v46 = *(void *)(a1 + 8);
          int v47 = -858993459 * ((unint64_t)(*(void *)(a1 + 16) - v46) >> 3);
          *(_DWORD *)(v46 + 40 * v35 + 4) = v47;
          *(_DWORD *)int64x2_t v91 = v47;
          std::deque<unsigned int>::push_back(v88, v91);
          uint64_t v49 = *(void *)(a1 + 8);
          unint64_t v48 = *(void *)(a1 + 16);
          uint64_t v50 = (uint64_t)(v48 - v49) / 40;
          int v51 = HIDWORD(v85);
          *(_OWORD *)&v91[4] = v84;
          unint64_t v52 = *(void *)(a1 + 24);
          if (v48 >= v52)
          {
            unint64_t v54 = v50 + 1;
            if ((unint64_t)(v50 + 1) > 0x666666666666666) {
              goto LABEL_77;
            }
            unint64_t v55 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v52 - v49) >> 3);
            if (2 * v55 > v54) {
              unint64_t v54 = 2 * v55;
            }
            if (v55 >= 0x333333333333333) {
              unint64_t v56 = 0x666666666666666;
            }
            else {
              unint64_t v56 = v54;
            }
            if (v56) {
              float64x2_t v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<double>>>(v82, v56);
            }
            else {
              float64x2_t v57 = 0;
            }
            float64x2_t v58 = &v57[40 * v50];
            *(_DWORD *)float64x2_t v58 = v50;
            *(void *)(v58 + 4) = -1;
            *((_DWORD *)v58 + 3) = v51;
            *((_DWORD *)v58 + 4) = v44;
            *(_OWORD *)(v58 + 20) = *(_OWORD *)v91;
            *((_DWORD *)v58 + 9) = *(_DWORD *)&v91[16];
            float64x2_t v60 = *(char **)(a1 + 8);
            float64x2_t v59 = *(char **)(a1 + 16);
            double v61 = v58;
            if (v59 != v60)
            {
              do
              {
                long long v62 = *(_OWORD *)(v59 - 40);
                long long v63 = *(_OWORD *)(v59 - 24);
                *((void *)v61 - 1) = *((void *)v59 - 1);
                *(_OWORD *)(v61 - 24) = v63;
                *(_OWORD *)(v61 - 40) = v62;
                v61 -= 40;
                v59 -= 40;
              }
              while (v59 != v60);
              float64x2_t v59 = *(char **)(a1 + 8);
            }
            uint64_t v53 = v58 + 40;
            *(void *)(a1 + 8) = v61;
            *(void *)(a1 + 16) = v58 + 40;
            *(void *)(a1 + 24) = &v57[40 * v56];
            if (v59) {
              operator delete(v59);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v48 = v50;
            *(void *)(v48 + 4) = -1;
            *(_DWORD *)(v48 + 12) = v51;
            *(_DWORD *)(v48 + 16) = v44;
            *(_OWORD *)(v48 + 20) = *(_OWORD *)v91;
            *(_DWORD *)(v48 + 36) = *(_DWORD *)&v91[16];
            uint64_t v53 = (char *)(v48 + 40);
          }
          int v64 = v45 + v44;
          int v65 = v42 + v45 - v64;
          *(void *)(a1 + 16) = v53;
          uint64_t v66 = *(void *)(a1 + 8);
          *(_DWORD *)(v66 + 40 * v35 + 8) = -858993459 * ((unint64_t)&v53[-v66] >> 3);
          *(_DWORD *)uint64_t v90 = -858993459 * ((unint64_t)&v53[-v66] >> 3);
          std::deque<unsigned int>::push_back(v88, v90);
          uint64_t v68 = *(void *)(a1 + 8);
          unint64_t v67 = *(void *)(a1 + 16);
          uint64_t v69 = (uint64_t)(v67 - v68) / 40;
          *(_OWORD *)&v90[4] = v83;
          unint64_t v70 = *(void *)(a1 + 24);
          if (v67 >= v70)
          {
            unint64_t v72 = v69 + 1;
            if ((unint64_t)(v69 + 1) > 0x666666666666666) {
              goto LABEL_77;
            }
            unint64_t v73 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v70 - v68) >> 3);
            if (2 * v73 > v72) {
              unint64_t v72 = 2 * v73;
            }
            if (v73 >= 0x333333333333333) {
              unint64_t v74 = 0x666666666666666;
            }
            else {
              unint64_t v74 = v72;
            }
            if (v74) {
              unint64_t v75 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::interpolating_key<double>>>(v82, v74);
            }
            else {
              unint64_t v75 = 0;
            }
            uint64_t v76 = &v75[40 * v69];
            *(_DWORD *)uint64_t v76 = v69;
            *(void *)(v76 + 4) = -1;
            *((_DWORD *)v76 + 3) = v64;
            *((_DWORD *)v76 + 4) = v65;
            *(_OWORD *)(v76 + 20) = *(_OWORD *)v90;
            *((_DWORD *)v76 + 9) = *(_DWORD *)&v90[16];
            uint64_t v78 = *(char **)(a1 + 8);
            unint64_t v77 = *(char **)(a1 + 16);
            uint64_t v79 = v76;
            if (v77 != v78)
            {
              do
              {
                long long v80 = *(_OWORD *)(v77 - 40);
                long long v81 = *(_OWORD *)(v77 - 24);
                *((void *)v79 - 1) = *((void *)v77 - 1);
                *(_OWORD *)(v79 - 24) = v81;
                *(_OWORD *)(v79 - 40) = v80;
                v79 -= 40;
                v77 -= 40;
              }
              while (v77 != v78);
              unint64_t v77 = *(char **)(a1 + 8);
            }
            uint64_t v71 = v76 + 40;
            *(void *)(a1 + 8) = v79;
            *(void *)(a1 + 16) = v76 + 40;
            *(void *)(a1 + 24) = &v75[40 * v74];
            if (v77) {
              operator delete(v77);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v67 = v69;
            *(void *)(v67 + 4) = -1;
            *(_DWORD *)(v67 + 12) = v64;
            *(_DWORD *)(v67 + 16) = v65;
            *(_OWORD *)(v67 + 20) = *(_OWORD *)v90;
            *(_DWORD *)(v67 + 36) = *(_DWORD *)&v90[16];
            uint64_t v71 = (char *)(v67 + 40);
          }
          *(void *)(a1 + 16) = v71;
        }
      }
      uint64_t v32 = *((void *)&v89 + 1);
      if (!*((void *)&v89 + 1)) {
        goto LABEL_75;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_77:
    abort();
  }
LABEL_75:
  *(unsigned char *)a1 = 1;
  std::deque<unsigned int>::~deque[abi:nn180100](v88);
}

void *geom::bvh<float,(unsigned char)2>::build_median(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v5, a2);
  v4[0] = &unk_26EA05DF0;
  v4[1] = a1;
  v4[3] = v4;
  geom::bvh<float,(unsigned char)2>::build_top_down(a1, (uint64_t)v5, (uint64_t)v4);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v4);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v5);
}

void *geom::bvh<float,(unsigned char)2>::build_surface_area_heuristic(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(a1, (uint64_t)v4, 8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v4);
}

void *geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(uint64_t a1, uint64_t a2, int a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26EA05E70;
  v5[1] = a1;
  v5[2] = &v7;
  *((_DWORD *)v5 + 6) = a3;
  v8[3] = v5;
  geom::bvh<float,(unsigned char)2>::build_top_down(a1, (uint64_t)v9, (uint64_t)v8);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v9);
}

void *geom::bvh<float,(unsigned char)2>::build_volume_heuristic(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(a1, (uint64_t)v4, 8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v4);
}

void *geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(uint64_t a1, uint64_t a2, int a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26EA05EF0;
  v5[1] = a1;
  v5[2] = &v7;
  *((_DWORD *)v5 + 6) = a3;
  v8[3] = v5;
  geom::bvh<float,(unsigned char)2>::build_top_down(a1, (uint64_t)v9, (uint64_t)v8);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v9);
}

void *geom::bvh<float,(unsigned char)2>::build_intersection_volume_heuristic(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(a1, (uint64_t)v4, 8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v4);
}

void *geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(uint64_t a1, uint64_t a2, int a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26EA05F70;
  v5[1] = a1;
  v5[2] = &v7;
  *((_DWORD *)v5 + 6) = a3;
  v8[3] = v5;
  geom::bvh<float,(unsigned char)2>::build_top_down(a1, (uint64_t)v9, (uint64_t)v8);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v9);
}

uint64_t geom::bvh<float,(unsigned char)2>::raycast(void *a1, uint64_t a2, float *a3, unsigned int *a4, double a5, double a6)
{
  *a3 = INFINITY;
  *a4 = -1;
  if (a1[5] == a1[4] || (char v7 = (float32x2_t *)a1[1], (float32x2_t *)a1[2] == v7))
  {
    char v23 = 0;
    return v23 & 1;
  }
  char v12 = 0;
  int32x2_t v13 = 0;
  char v14 = 1;
  do
  {
    char v15 = v14;
    double v86 = a6;
    double v16 = (float *)((unint64_t)&v86 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v12 & 1)));
    float v17 = 1.0 / *v16;
    if (fabsf(*v16) <= 0.000005) {
      float v17 = INFINITY;
    }
    int32x2_t v87 = v13;
    *(float *)((unint64_t)&v87 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v12 & 1))) = v17;
    char v12 = 1;
    int32x2_t v13 = v87;
    char v14 = 0;
  }
  while ((v15 & 1) != 0);
  long long v91 = 0u;
  memset(v90, 0, sizeof(v90));
  *(_DWORD *)long long v89 = 0;
  *(void *)&v89[4] = 0x7F80000000000000;
  float32x2_t v18 = v7[3];
  float32x2_t v19 = v7[4];
  if (*(float *)v87.i32 == INFINITY)
  {
    if (vcgt_f32(v18, *(float32x2_t *)&a5).u8[0] & 1) != 0 || (vcgt_f32(*(float32x2_t *)&a5, v19).u8[0]) {
      goto LABEL_141;
    }
    int32x2_t v20 = vzip2_s32((int32x2_t)v18, v87);
    float v21 = 0.0;
    v22.i32[0] = 2139095040;
  }
  else
  {
    float32x2_t v22 = vmul_f32((float32x2_t)v87, vsub_f32(v18, *(float32x2_t *)&a5));
    float32x2_t v24 = vmul_f32((float32x2_t)v87, vsub_f32(v19, *(float32x2_t *)&a5));
    unsigned __int8 v25 = vcgt_f32(v22, v24).u8[0];
    BOOL v26 = (v25 & 1) == 0;
    if (v25) {
      float v27 = v24.f32[0];
    }
    else {
      float v27 = v22.f32[0];
    }
    if (v26) {
      v22.f32[0] = v24.f32[0];
    }
    float v21 = 0.0;
    if (v27 >= 0.0) {
      float v21 = v27;
    }
    *(float *)&v89[4] = v21;
    *(_DWORD *)&v89[8] = v22.i32[0];
    if (v21 > v22.f32[0]) {
      goto LABEL_141;
    }
    int32x2_t v20 = vzip2_s32((int32x2_t)v18, v87);
  }
  float v28 = *((float *)&a5 + 1);
  if (*(float *)&v20.i32[1] == INFINITY)
  {
    if (*((float *)&a5 + 1) < *(float *)v20.i32 || *((float *)&a5 + 1) > v19.f32[1]) {
      goto LABEL_141;
    }
    goto LABEL_28;
  }
  *(float *)v20.i32 = *(float *)&v20.i32[1] * (float)(*(float *)v20.i32 - *((float *)&a5 + 1));
  float v81 = *(float *)&v20.i32[1] * (float)(v19.f32[1] - *((float *)&a5 + 1));
  if (v81 >= *(float *)v20.i32) {
    float v82 = *(float *)v20.i32;
  }
  else {
    float v82 = *(float *)&v20.i32[1] * (float)(v19.f32[1] - *((float *)&a5 + 1));
  }
  if (v81 >= *(float *)v20.i32) {
    *(float *)v20.i32 = *(float *)&v20.i32[1] * (float)(v19.f32[1] - *((float *)&a5 + 1));
  }
  if (v82 >= v21) {
    float v21 = v82;
  }
  if (v22.f32[0] >= *(float *)v20.i32) {
    v22.f32[0] = *(float *)v20.i32;
  }
  *(float *)&v89[4] = v21;
  *(_DWORD *)&v89[8] = v22.i32[0];
  if (v21 <= v22.f32[0] && (v21 >= 0.0 || v22.f32[0] >= 0.0))
  {
LABEL_28:
    float32x2_t v84 = (float32x2_t)v87;
    std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(v90, (uint64_t *)v89);
    uint64_t v30 = *((void *)&v91 + 1);
    if (!*((void *)&v91 + 1)) {
      goto LABEL_141;
    }
    char v23 = 0;
    while (1)
    {
      uint64_t v31 = v30 - 1;
      uint64_t v32 = ((unint64_t)(v91 + v31) * (unsigned __int128)0x8060180601806019) >> 64;
      unint64_t v33 = (v32 + ((unint64_t)(v91 + v31 - v32) >> 1)) >> 8;
      uint64_t v34 = *(void *)(*((void *)&v90[0] + 1) + 8 * v33) + 12 * (v91 + v31 - 341 * v33);
      unsigned int v35 = *(_DWORD *)v34;
      float v36 = *(float *)(v34 + 4);
      *((void *)&v91 + 1) = v31;
      std::deque<geom::bvh<float,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>,geom::ray<float,(unsigned char)2>,float &,unsigned int &)::state,std::allocator<geom::bvh<float,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>,geom::ray<float,(unsigned char)2>,float &,unsigned int &)::state>>::__maybe_remove_back_spare[abi:nn180100](v90, 1);
      if (*a3 < v36) {
        goto LABEL_125;
      }
      uint64_t v37 = a1[1];
      uint64_t v38 = v37 + 40 * v35;
      unsigned int v40 = *(_DWORD *)(v38 + 4);
      unsigned int v39 = *(_DWORD *)(v38 + 8);
      if (v40 == -1 && v39 == -1)
      {
        uint64_t v49 = v37 + 40 * v35;
        int v50 = *(_DWORD *)(v49 + 16);
        if (v50)
        {
          uint64_t v51 = *(unsigned int *)(v49 + 12);
          unint64_t v52 = (unsigned int *)(a1[4] + 4 * v51);
          uint64_t v53 = 4 * (v50 + v51) - 4 * v51;
          do
          {
            unsigned int v54 = *v52;
            *(_DWORD *)long long v89 = 0;
            if (std::function<BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::operator()(a2, v54, (uint64_t)v89, a5, a6))
            {
              if (*(float *)v89 < *a3 || (*(float *)v89 == *a3 ? (BOOL v55 = v54 >= *a4) : (BOOL v55 = 1), !v55))
              {
                *a3 = *(float *)v89;
                *a4 = v54;
              }
              char v23 = 1;
            }
            ++v52;
            v53 -= 4;
          }
          while (v53);
        }
        goto LABEL_125;
      }
      int v42 = (float32x2_t *)(v37 + 40 * v40);
      *(_DWORD *)long long v89 = v40;
      *(void *)&v89[4] = 0x7F80000000000000;
      float32x2_t v45 = v42[3];
      float32x2_t v44 = v42[4];
      float64x2_t v43 = v42 + 3;
      uint64_t v46 = (float *)(v37 + 40 * v39 + 24);
      if (v84.f32[0] == INFINITY)
      {
        if (vcgt_f32(v45, *(float32x2_t *)&a5).u8[0] & 1) != 0 || (vcgt_f32(*(float32x2_t *)&a5, v44).u8[0])
        {
          BOOL v62 = 0;
          *(_DWORD *)unint64_t v88 = v39;
          *(void *)&v88[4] = 0x7F80000000000000;
          uint64_t v63 = *((void *)v46 + 1);
          float v47 = 0.0;
          goto LABEL_83;
        }
        float v47 = 0.0;
        v48.i32[0] = 2139095040;
      }
      else
      {
        float32x2_t v48 = vmul_f32(v84, vsub_f32(v45, *(float32x2_t *)&a5));
        float32x2_t v56 = vmul_f32(v84, vsub_f32(v44, *(float32x2_t *)&a5));
        unsigned __int8 v57 = vcgt_f32(v48, v56).u8[0];
        BOOL v58 = (v57 & 1) == 0;
        if (v57) {
          float v59 = v56.f32[0];
        }
        else {
          float v59 = v48.f32[0];
        }
        if (v58) {
          v48.f32[0] = v56.f32[0];
        }
        if (v59 >= 0.0) {
          float v47 = v59;
        }
        else {
          float v47 = 0.0;
        }
        *(float *)&v89[4] = v47;
        *(_DWORD *)&v89[8] = v48.i32[0];
        if (v47 > v48.f32[0])
        {
          BOOL v62 = 0;
          *(_DWORD *)unint64_t v88 = v39;
          *(void *)&v88[4] = 0x7F80000000000000;
          uint64_t v63 = *((void *)v46 + 1);
LABEL_89:
          float v69 = v84.f32[0] * (float)(COERCE_FLOAT(*(void *)v46) - *(float *)&a5);
          float v70 = v84.f32[0] * (float)(*(float *)&v63 - *(float *)&a5);
          if (v70 >= v69) {
            float v71 = v84.f32[0] * (float)(COERCE_FLOAT(*(void *)v46) - *(float *)&a5);
          }
          else {
            float v71 = v70;
          }
          if (v70 >= v69) {
            float v69 = v70;
          }
          if (v71 >= 0.0) {
            float v68 = v71;
          }
          else {
            float v68 = 0.0;
          }
          *(float *)&v88[4] = v68;
          *(float *)&v88[8] = v69;
          if (v68 > v69) {
            goto LABEL_123;
          }
          goto LABEL_98;
        }
      }
      float v60 = v43->f32[1];
      if (v84.f32[1] == INFINITY)
      {
        if (v28 < v60 || v28 > v43[1].f32[1]) {
          goto LABEL_66;
        }
      }
      else
      {
        float v64 = v84.f32[1] * (float)(v60 - v28);
        float v65 = v84.f32[1] * (float)(v43[1].f32[1] - v28);
        if (v65 >= v64) {
          float v66 = v64;
        }
        else {
          float v66 = v84.f32[1] * (float)(v43[1].f32[1] - v28);
        }
        if (v65 >= v64) {
          float v64 = v84.f32[1] * (float)(v43[1].f32[1] - v28);
        }
        if (v66 >= v47) {
          float v47 = v66;
        }
        if (v48.f32[0] >= v64) {
          v48.f32[0] = v64;
        }
        *(float *)&v89[4] = v47;
        *(_DWORD *)&v89[8] = v48.i32[0];
        if (v47 > v48.f32[0])
        {
LABEL_66:
          BOOL v62 = 0;
          goto LABEL_82;
        }
      }
      BOOL v62 = v48.f32[0] >= 0.0 || v47 >= 0.0;
LABEL_82:
      *(_DWORD *)unint64_t v88 = v39;
      *(void *)&v88[4] = 0x7F80000000000000;
      uint64_t v63 = *((void *)v46 + 1);
      if (v84.f32[0] != INFINITY) {
        goto LABEL_89;
      }
LABEL_83:
      if (*(float *)&a5 < COERCE_FLOAT(*(void *)v46) || *(float *)&a5 > *(float *)&v63) {
        goto LABEL_123;
      }
      float v68 = 0.0;
      float v69 = INFINITY;
LABEL_98:
      float v72 = v46[1];
      if (v84.f32[1] == INFINITY)
      {
        if (v28 >= v72 && v28 <= v46[3]) {
          goto LABEL_114;
        }
      }
      else
      {
        float v74 = v84.f32[1] * (float)(v72 - v28);
        float v75 = v84.f32[1] * (float)(v46[3] - v28);
        if (v75 >= v74) {
          float v76 = v74;
        }
        else {
          float v76 = v84.f32[1] * (float)(v46[3] - v28);
        }
        if (v75 >= v74) {
          float v74 = v84.f32[1] * (float)(v46[3] - v28);
        }
        if (v76 >= v68) {
          float v68 = v76;
        }
        if (v69 >= v74) {
          float v69 = v74;
        }
        *(float *)&v88[4] = v68;
        *(float *)&v88[8] = v69;
        if (v68 <= v69)
        {
LABEL_114:
          BOOL v77 = v68 >= 0.0;
          if (v69 >= 0.0) {
            BOOL v77 = 1;
          }
          BOOL v78 = v68 < v47 && v77;
          if (v78 && v62)
          {
            int v79 = *(_DWORD *)&v89[8];
            uint64_t v80 = *(void *)v89;
            *(void *)long long v89 = *(void *)v88;
            *(_DWORD *)&v89[8] = *(_DWORD *)&v88[8];
            *(void *)unint64_t v88 = v80;
            *(_DWORD *)&v88[8] = v79;
          }
          else if (!v77)
          {
            if (!v62) {
              goto LABEL_125;
            }
LABEL_124:
            std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(v90, (uint64_t *)v89);
            goto LABEL_125;
          }
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(v90, (uint64_t *)v88);
        }
      }
LABEL_123:
      if (v62) {
        goto LABEL_124;
      }
LABEL_125:
      uint64_t v30 = *((void *)&v91 + 1);
      if (!*((void *)&v91 + 1)) {
        goto LABEL_142;
      }
    }
  }
LABEL_141:
  char v23 = 0;
LABEL_142:
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](v90);
  return v23 & 1;
}

uint64_t std::function<BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>::operator()(uint64_t a1, int a2, uint64_t a3, double a4, double a5)
{
  *(double *)char v12 = a4;
  *(double *)&v12[1] = a5;
  int v11 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, int *, void *, uint64_t))(*(void *)v5 + 48))(v5, &v11, v12, a3);
  }
  char v7 = std::__throw_bad_function_call[abi:nn180100]();
  return geom::bvh<float,(unsigned char)2>::find_all_intersections((uint64_t)v7, v8, v9, v10);
}

uint64_t geom::bvh<float,(unsigned char)2>::find_all_intersections(uint64_t result, uint64_t a2, uint64_t a3, int **a4)
{
  a4[1] = *a4;
  if (*(void *)(result + 16) != *(void *)(result + 8))
  {
    uint64_t v7 = result;
    long long v36 = 0u;
    memset(v35, 0, sizeof(v35));
    int v34 = 0;
    std::deque<unsigned int>::push_back(v35, &v34);
    for (uint64_t i = *((void *)&v36 + 1); *((void *)&v36 + 1); uint64_t i = *((void *)&v36 + 1))
    {
      uint64_t v9 = i - 1;
      unsigned int v10 = *(_DWORD *)(*(void *)(*((void *)&v35[0] + 1)
                                  + (((unint64_t)(v36 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v36 + v9) & 0x3FF));
      uint64_t v11 = *(void *)(v7 + 8);
      *((void *)&v36 + 1) = v9;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v35, 1);
      uint64_t v12 = *(void *)(a3 + 24);
      if (!v12)
      {
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
        abort();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, v11 + 40 * v10 + 24))
      {
        uint64_t v13 = v11 + 40 * v10;
        int v15 = *(_DWORD *)(v13 + 4);
        char v14 = (_DWORD *)(v13 + 4);
        if (v15 == -1 && *(_DWORD *)(v11 + 40 * v10 + 8) == -1)
        {
          uint64_t v16 = v11 + 40 * v10;
          int v17 = *(_DWORD *)(v16 + 16);
          if (v17)
          {
            uint64_t v18 = *(unsigned int *)(v16 + 12);
            uint64_t v19 = *(void *)(v7 + 32);
            int32x2_t v20 = (int *)(v19 + 4 * (v17 + v18));
            float v21 = (int *)(v19 + 4 * v18);
            do
            {
              int v22 = *v21;
              if (std::function<BOOL ()>::operator()(a2, *v21))
              {
                float32x2_t v24 = a4[1];
                unint64_t v23 = (unint64_t)a4[2];
                if ((unint64_t)v24 >= v23)
                {
                  BOOL v26 = *a4;
                  uint64_t v27 = v24 - *a4;
                  unint64_t v28 = v27 + 1;
                  if ((unint64_t)(v27 + 1) >> 62) {
                    goto LABEL_35;
                  }
                  uint64_t v29 = v23 - (void)v26;
                  if (v29 >> 1 > v28) {
                    unint64_t v28 = v29 >> 1;
                  }
                  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v30 = v28;
                  }
                  if (v30)
                  {
                    uint64_t v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v30);
                    BOOL v26 = *a4;
                    float32x2_t v24 = a4[1];
                  }
                  else
                  {
                    uint64_t v31 = 0;
                  }
                  uint64_t v32 = (int *)&v31[4 * v27];
                  *uint64_t v32 = v22;
                  unsigned __int8 v25 = v32 + 1;
                  while (v24 != v26)
                  {
                    int v33 = *--v24;
                    *--uint64_t v32 = v33;
                  }
                  *a4 = v32;
                  a4[1] = v25;
                  a4[2] = (int *)&v31[4 * v30];
                  if (v26) {
                    operator delete(v26);
                  }
                }
                else
                {
                  *float32x2_t v24 = v22;
                  unsigned __int8 v25 = v24 + 1;
                }
                a4[1] = v25;
              }
              ++v21;
            }
            while (v21 != v20);
          }
        }
        else
        {
          std::deque<unsigned int>::push_back(v35, v14);
          std::deque<unsigned int>::push_back(v35, (_DWORD *)(v11 + 40 * v10 + 8));
        }
      }
    }
    return std::deque<unsigned int>::~deque[abi:nn180100](v35);
  }
  return result;
}

uint64_t geom::bvh<float,(unsigned char)2>::tree_statistics(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  long long v18 = 0u;
  memset(v17, 0, sizeof(v17));
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8))
  {
    *a2 = 0;
    *a3 = 0;
  }
  else
  {
    unint64_t v16 = 0x100000000;
    std::deque<std::pair<unsigned int,unsigned int>>::push_back(v17, &v16);
    uint64_t v6 = *((void *)&v18 + 1);
    *a2 = 0;
    *a3 = 0;
    if (v6)
    {
      do
      {
        uint64_t v7 = v6 - 1;
        uint64_t v8 = (unsigned int *)(*(void *)(*((void *)&v17[0] + 1)
                                        + (((unint64_t)(v18 + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v18 + v7) & 0x1FF));
        unsigned int v10 = *v8;
        unsigned int v9 = v8[1];
        *((void *)&v18 + 1) = v7;
        std::deque<std::pair<unsigned int,unsigned int>>::__maybe_remove_back_spare[abi:nn180100](v17, 1);
        uint64_t v11 = *(void *)(a1 + 8);
        unsigned int v12 = *a2;
        if (*a2 <= v9) {
          unsigned int v12 = v9;
        }
        *a2 = v12;
        *a3 += v9;
        uint64_t v13 = *(unsigned int *)(v11 + 40 * v10 + 4);
        if (v13 != -1)
        {
          unint64_t v16 = v13 | ((unint64_t)(v9 + 1) << 32);
          std::deque<std::pair<unsigned int,unsigned int>>::push_back(v17, &v16);
        }
        uint64_t v14 = *(unsigned int *)(v11 + 40 * v10 + 8);
        if (v14 != -1)
        {
          unint64_t v16 = v14 | ((unint64_t)(v9 + 1) << 32);
          std::deque<std::pair<unsigned int,unsigned int>>::push_back(v17, &v16);
        }
        uint64_t v6 = *((void *)&v18 + 1);
      }
      while (*((void *)&v18 + 1));
    }
  }
  return std::deque<std::pair<unsigned int,unsigned int>>::~deque[abi:nn180100](v17);
}

uint64_t geom::bvh<float,(unsigned char)2>::node_for_node_index(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 8) + 40 * a2;
}

uint64_t geom::bvh<float,(unsigned char)2>::partition(uint64_t a1)
{
  return *(void *)(a1 + 32);
}

uint64_t geom::bvh<float,(unsigned char)2>::primitives_for_node_index(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 32) + 4 * *(unsigned int *)(*(void *)(a1 + 8) + 40 * a2 + 12);
}

unint64_t geom::bvh<float,(unsigned char)2>::partition_node_median(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  v39[4] = *MEMORY[0x263EF8340];
  v39[0] = &unk_26EA05FF0;
  v39[1] = a1;
  v39[3] = v39;
  v38[0] = &unk_26EA06110;
  v38[1] = a1;
  v38[2] = v39;
  v38[3] = v38;
  float32x2_t v9 = *(float32x2_t *)(a2 + 24);
  float32x2_t v8 = *(float32x2_t *)(a2 + 32);
  uint64_t v35 = 0;
  std::function<void ()(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)>::operator()((uint64_t)v38, a2, 0);
  LODWORD(v37[0]) = 0;
  std::function<void ()(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)>::operator()((uint64_t)v38, a2, 1);
  float32x2_t v10 = vsub_f32(v8, v9);
  if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v10, 1), v10).u8[0]) {
    uint64_t v35 = LODWORD(v37[0]) | 0x100000000;
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = &unk_26EA061A0;
  v11[1] = &v35;
  _OWORD v11[2] = (char *)&v35 + 4;
  float32x4_t v11[3] = a1;
  v37[3] = v11;
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(unsigned int *)(a2 + 12);
  uint64_t v14 = (int *)(v12 + 4 * v13);
  int v15 = (int *)(v12 + 4 * (*(_DWORD *)(a2 + 16) + v13));
  std::__function::__value_func<BOOL ()>::__value_func[abi:nn180100]((uint64_t)v36, (uint64_t)v37);
  unint64_t v16 = std::__partition_impl[abi:nn180100]<std::function<BOOL ()> &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v14, v15, (uint64_t)v36);
  std::__function::__value_func<BOOL ()>::~__value_func[abi:nn180100](v36);
  uint64_t v17 = *(unsigned int *)(a2 + 12);
  long long v18 = (char *)(*(void *)(a1 + 32) + 4 * v17);
  unint64_t v19 = (unint64_t)((char *)v16 - v18) >> 2;
  float32x2_t v20 = (float32x2_t)vdup_n_s32(0x7F800000u);
  float32x2_t v21 = (float32x2_t)0x7F0000007FLL;
  float32x2_t v22 = v20;
  float32x2_t v23 = (float32x2_t)0x7F0000007FLL;
  if (v19)
  {
    uint64_t v24 = 4 * (v17 + v19) - 4 * v17;
    float32x2_t v22 = (float32x2_t)vdup_n_s32(0x7F800000u);
    do
    {
      unsigned int v25 = *(_DWORD *)v18;
      v18 += 4;
      BOOL v26 = (float32x2_t *)(*(void *)(a1 + 80) + 16 * v25);
      float32x2_t v22 = vminnm_f32(v22, *v26);
      float32x2_t v23 = vmaxnm_f32(v23, v26[1]);
      v24 -= 4;
    }
    while (v24);
  }
  *a3 = v22;
  a3[1] = v23;
  int v27 = *(_DWORD *)(a2 + 16);
  if (v27 != v19)
  {
    int v28 = *(_DWORD *)(a2 + 12);
    uint64_t v29 = (v27 + v28);
    unint64_t v30 = (unsigned int *)(*(void *)(a1 + 32) + 4 * (v28 + v19));
    uint64_t v31 = 4 * v29 - 4 * (v28 + v19);
    float32x2_t v20 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v21 = (float32x2_t)0x7F0000007FLL;
    do
    {
      unsigned int v32 = *v30++;
      int v33 = (float32x2_t *)(*(void *)(a1 + 80) + 16 * v32);
      float32x2_t v20 = vminnm_f32(v20, *v33);
      float32x2_t v21 = vmaxnm_f32(v21, v33[1]);
      v31 -= 4;
    }
    while (v31);
  }
  *a4 = v20;
  a4[1] = v21;
  std::__function::__value_func<BOOL ()>::~__value_func[abi:nn180100](v37);
  std::__function::__value_func<void ()(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)>::~__value_func[abi:nn180100](v38);
  std::__function::__value_func<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::~__value_func[abi:nn180100](v39);
  return v19;
}

uint64_t std::function<void ()(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  int v9 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v3 + 48))(v3, a2, &v9);
  }
  uint64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return geom::bvh<float,(unsigned char)2>::partition_node_middle((uint64_t)v5, v6, v7, v8);
}

uint64_t geom::bvh<float,(unsigned char)2>::partition_node_middle(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  float32x2_t v8 = a2[3];
  float32x2_t v9 = vsub_f32(a2[4], v8);
  float32x2_t v38 = a2[4];
  uint64_t v10 = *(void *)&vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v9, 1), v9) & 1;
  float v11 = *(float *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFFBLL | (4 * v10));
  float32x2_t v39 = v8;
  *(float *)&unsigned int v12 = (float)(*(float *)((unint64_t)&v39 & 0xFFFFFFFFFFFFFFFBLL | (4 * v10)) + v11) * 0.5;
  uint64_t v13 = *(void *)(a1 + 32);
  uint64_t v14 = a2[1].u32[1];
  int v15 = (_DWORD *)(v13 + 4 * (a2[2].i32[0] + v14));
  v40[0] = a1;
  v40[1] = v10 | ((unint64_t)v12 << 32);
  unint64_t v16 = (char *)std::__partition_impl[abi:nn180100]<geom::bvh<float,(unsigned char)2>::partition_node_middle(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>((_DWORD *)(v13 + 4 * v14), v15, (uint64_t)v40);
  uint64_t v18 = a2[1].u32[1];
  unsigned __int32 v17 = a2[2].u32[0];
  unint64_t v19 = (char *)(*(void *)(a1 + 32) + 4 * v18);
  unint64_t v20 = (unint64_t)(v16 - v19) >> 2;
  BOOL v21 = v17 == v20 || v20 == 0;
  unsigned __int32 v22 = v17 >> 1;
  if (v21) {
    uint64_t result = v22;
  }
  else {
    uint64_t result = v20;
  }
  float32x2_t v24 = (float32x2_t)vdup_n_s32(0x7F800000u);
  float32x2_t v25 = (float32x2_t)0x7F0000007FLL;
  float32x2_t v26 = v24;
  float32x2_t v27 = (float32x2_t)0x7F0000007FLL;
  if (result)
  {
    uint64_t v28 = 4 * (result + v18) - 4 * v18;
    float32x2_t v26 = (float32x2_t)vdup_n_s32(0x7F800000u);
    do
    {
      unsigned int v29 = *(_DWORD *)v19;
      v19 += 4;
      unint64_t v30 = (float32x2_t *)(*(void *)(a1 + 80) + 16 * v29);
      float32x2_t v26 = vminnm_f32(v26, *v30);
      float32x2_t v27 = vmaxnm_f32(v27, v30[1]);
      v28 -= 4;
    }
    while (v28);
  }
  *a3 = v26;
  a3[1] = v27;
  __int32 v31 = a2[2].i32[0];
  if (v31 != result)
  {
    __int32 v32 = a2[1].i32[1];
    uint64_t v33 = (v31 + v32);
    int v34 = (unsigned int *)(*(void *)(a1 + 32) + 4 * (v32 + result));
    uint64_t v35 = 4 * v33 - 4 * (v32 + result);
    float32x2_t v24 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v25 = (float32x2_t)0x7F0000007FLL;
    do
    {
      unsigned int v36 = *v34++;
      uint64_t v37 = (float32x2_t *)(*(void *)(a1 + 80) + 16 * v36);
      float32x2_t v24 = vminnm_f32(v24, *v37);
      float32x2_t v25 = vmaxnm_f32(v25, v37[1]);
      v35 -= 4;
    }
    while (v35);
  }
  *a4 = v24;
  a4[1] = v25;
  return result;
}

uint64_t geom::bvh<double,(unsigned char)2>::bvh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v10[0] = a2;
  v10[1] = a3;
  v9[0] = a4;
  v9[1] = a5;
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v10, a6, a1 + 56);
  geom::make_external_array<geom::slice<geom::bbox<double,(unsigned char)2>>>(v9, a6, a1 + 80);
  return a1;
}

void *geom::make_external_array<geom::slice<geom::bbox<double,(unsigned char)2>>>@<X0>(void *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[1];
  if (v3)
  {
    if (a2) {
      operator new[]();
    }
    *(void *)a3 = *result;
    *(void *)(a3 + 8) = v3;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t geom::bvh<double,(unsigned char)2>::bvh(uint64_t a1)
{
  return geom::bvh<double,(unsigned char)2>::bvh(a1, 0, 0, 0, 0, 0);
}

void *geom::bvh<double,(unsigned char)2>::reset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v15[0] = a4;
  v15[1] = a5;
  *(unsigned char *)a1 = 0;
  if (!a3) {
    a2 = 0;
  }
  if (a3 && a6) {
    operator new[]();
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v10 = *(void *)(a1 + 56);
    if (v10) {
      MEMORY[0x237E10700](v10, 0x1000C80451B5BE8);
    }
  }
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = a3;
  *(unsigned char *)(a1 + 72) = 0;
  uint64_t result = geom::make_external_array<geom::slice<geom::bbox<double,(unsigned char)2>>>(v15, a6, (uint64_t)v13);
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t result = *(void **)(a1 + 80);
    if (result) {
      uint64_t result = (void *)MEMORY[0x237E10700](result, 0x1000C80E0EAB150);
    }
  }
  uint64_t v12 = v13[1];
  *(void *)(a1 + 80) = v13[0];
  *(void *)(a1 + 88) = v12;
  *(unsigned char *)(a1 + 96) = v14;
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  return result;
}

uint64_t geom::bvh<double,(unsigned char)2>::reset(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(unsigned char *)uint64_t result = 0;
  if (*(unsigned char *)(result + 72))
  {
    uint64_t result = *(void *)(result + 56);
    if (result) {
      uint64_t result = MEMORY[0x237E10700](result, 0x1000C80451B5BE8);
    }
  }
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(v5 + 56) = *(void *)a2;
  *(void *)(v5 + 64) = v6;
  *(unsigned char *)(v5 + 72) = *(unsigned char *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (*(unsigned char *)(v5 + 96))
  {
    uint64_t result = *(void *)(v5 + 80);
    if (result) {
      uint64_t result = MEMORY[0x237E10700](result, 0x1000C80E0EAB150);
    }
  }
  uint64_t v7 = *(void *)(a3 + 8);
  *(void *)(v5 + 80) = *(void *)a3;
  *(void *)(v5 + 88) = v7;
  *(unsigned char *)(v5 + 96) = *(unsigned char *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(v5 + 40) = *(void *)(v5 + 32);
  *(void *)(v5 + 16) = *(void *)(v5 + 8);
  return result;
}

BOOL geom::bvh<double,(unsigned char)2>::iterator::is_leaf(unsigned int *a1)
{
  unint64_t v1 = *(void *)(*(void *)a1 + 8) + ((unint64_t)a1[2] << 6);
  return *(_DWORD *)(v1 + 4) == -1 && *(_DWORD *)(v1 + 8) == -1;
}

uint64_t geom::bvh<double,(unsigned char)2>::nodes(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t geom::bvh<double,(unsigned char)2>::iterator::left(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t geom::bvh<double,(unsigned char)2>::iterator::right(uint64_t a1)
{
  return *(void *)a1;
}

unint64_t geom::bvh<double,(unsigned char)2>::iterator::operator*(unsigned int *a1)
{
  return *(void *)(*(void *)a1 + 8) + ((unint64_t)a1[2] << 6);
}

unint64_t geom::bvh<double,(unsigned char)2>::iterator::bounds(unsigned int *a1)
{
  return *(void *)(*(void *)a1 + 8) + ((unint64_t)a1[2] << 6) + 32;
}

uint64_t geom::bvh<double,(unsigned char)2>::iterator::primitives(unsigned int *a1)
{
  return *(void *)(*(void *)a1 + 32)
       + 4 * *(unsigned int *)(*(void *)(*(void *)a1 + 8) + ((unint64_t)a1[2] << 6) + 12);
}

unsigned int *geom::bvh<double,(unsigned char)2>::iterator::operator++(unsigned int *result)
{
  uint64_t v1 = result[2];
  if (v1 != -1)
  {
    unint64_t v2 = v1 + 1;
    result[2] = v2;
    if (v2 >= (uint64_t)(*(void *)(*(void *)result + 16) - *(void *)(*(void *)result + 8)) >> 6) {
      result[2] = -1;
    }
  }
  return result;
}

uint64_t geom::bvh<double,(unsigned char)2>::iterator::operator++(void *a1)
{
  uint64_t result = *a1;
  uint64_t v3 = a1[1];
  if (v3 != -1)
  {
    unint64_t v4 = (v3 + 1);
    *((_DWORD *)a1 + 2) = v4;
    if (v4 >= (uint64_t)(*(void *)(result + 16) - *(void *)(result + 8)) >> 6) {
      *((_DWORD *)a1 + 2) = -1;
    }
  }
  return result;
}

void *geom::bvh<double,(unsigned char)2>::build_middle_split(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v5, a2);
  v4[0] = &unk_26EA06220;
  v4[1] = a1;
  v4[3] = v4;
  geom::bvh<double,(unsigned char)2>::build_top_down(a1, (uint64_t)v5, (uint64_t)v4);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v4);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v5);
}

void geom::bvh<double,(unsigned char)2>::build_top_down(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v101 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)a1)
  {
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), *(void *)(a1 + 88));
  uint64_t v6 = *(char **)(a1 + 32);
  uint64_t v7 = *(char **)(a1 + 40);
  if (v6 != v7)
  {
    int v8 = 0;
    float32x2_t v9 = *(char **)(a1 + 32);
    do
    {
      *(_DWORD *)float32x2_t v9 = v8;
      v9 += 4;
      ++v8;
    }
    while (v9 != v7);
    if (*(void *)(a1 + 88))
    {
      uint64_t v10 = v7 - v6;
      uint64_t v11 = v10 >> 2;
      if (v10)
      {
        float64x2_t v12 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
        uint64_t v13 = 4 * v11;
        float64x2_t v14 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
        do
        {
          unsigned int v15 = *(_DWORD *)v6;
          v6 += 4;
          unint64_t v16 = (float64x2_t *)(*(void *)(a1 + 80) + 32 * v15);
          float64x2_t v12 = vminnmq_f64(v12, *v16);
          float64x2_t v14 = vmaxnmq_f64(v14, v16[1]);
          v13 -= 4;
        }
        while (v13);
      }
      else
      {
        float64x2_t v14 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
        float64x2_t v12 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      }
      goto LABEL_15;
    }
LABEL_13:
    *(unsigned char *)a1 = 1;
    return;
  }
  if (!*(void *)(a1 + 88)) {
    goto LABEL_13;
  }
  uint64_t v11 = (v7 - v6) >> 2;
  float64x2_t v14 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  float64x2_t v12 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
LABEL_15:
  unint64_t v17 = *(void *)(a1 + 24);
  uint64_t v84 = a1 + 24;
  unint64_t v18 = *(void *)(a1 + 16);
  if (v18 >= v17)
  {
    uint64_t v20 = *(void *)(a1 + 8);
    uint64_t v21 = (uint64_t)(v18 - v20) >> 6;
    unint64_t v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 58) {
      goto LABEL_74;
    }
    uint64_t v23 = v17 - v20;
    if (v23 >> 5 > v22) {
      unint64_t v22 = v23 >> 5;
    }
    if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v24 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v24 = v22;
    }
    if (v24)
    {
      float64x2_t v85 = v12;
      float64x2_t v87 = v14;
      float32x2_t v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::bbox<double,(unsigned char)3>>>(v84, v24);
      float64x2_t v12 = v85;
      float64x2_t v14 = v87;
    }
    else
    {
      float32x2_t v25 = 0;
    }
    float32x2_t v26 = &v25[64 * v21];
    float32x2_t v27 = &v25[64 * v24];
    *(_OWORD *)float32x2_t v26 = xmmword_236F196D0;
    *((_DWORD *)v26 + 4) = v11;
    *(void *)(v26 + 20) = v97;
    *((_DWORD *)v26 + 7) = DWORD2(v97);
    *((float64x2_t *)v26 + 2) = v12;
    *((float64x2_t *)v26 + 3) = v14;
    unint64_t v19 = v26 + 64;
    unsigned int v29 = *(char **)(a1 + 8);
    uint64_t v28 = *(char **)(a1 + 16);
    if (v28 != v29)
    {
      do
      {
        long long v30 = *((_OWORD *)v28 - 4);
        long long v31 = *((_OWORD *)v28 - 3);
        long long v32 = *((_OWORD *)v28 - 1);
        *((_OWORD *)v26 - 2) = *((_OWORD *)v28 - 2);
        *((_OWORD *)v26 - 1) = v32;
        *((_OWORD *)v26 - 4) = v30;
        *((_OWORD *)v26 - 3) = v31;
        v26 -= 64;
        v28 -= 64;
      }
      while (v28 != v29);
      uint64_t v28 = *(char **)(a1 + 8);
    }
    *(void *)(a1 + 8) = v26;
    *(void *)(a1 + 16) = v19;
    *(void *)(a1 + 24) = v27;
    if (v28) {
      operator delete(v28);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v18 = xmmword_236F196D0;
    *(_DWORD *)(v18 + 16) = v11;
    *(void *)(v18 + 20) = v97;
    *(_DWORD *)(v18 + 28) = DWORD2(v97);
    *(float64x2_t *)(v18 + 32) = v12;
    *(float64x2_t *)(v18 + 48) = v14;
    unint64_t v19 = (char *)(v18 + 64);
  }
  *(void *)(a1 + 16) = v19;
  long long v94 = 0u;
  memset(v93, 0, sizeof(v93));
  LODWORD(v97) = 0;
  std::deque<unsigned int>::push_back(v93, &v97);
  uint64_t v33 = *((void *)&v94 + 1);
  if (*((void *)&v94 + 1))
  {
    int64x2_t v86 = vdupq_n_s64(0xFFF0000000000000);
    int64x2_t v88 = vdupq_n_s64(0x7FF0000000000000uLL);
    while (1)
    {
      uint64_t v34 = v33 - 1;
      uint64_t v35 = *(unsigned int *)(*(void *)(*((void *)&v93[0] + 1)
                                        + (((unint64_t)(v94 + v34) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v94 + v34) & 0x3FF));
      *((void *)&v94 + 1) = v34;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v93, 1);
      uint64_t v36 = *(void *)(a2 + 24);
      if (!v36) {
        break;
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v36 + 48))(v36, *(void *)(a1 + 8) + (v35 << 6)) & 1) == 0)
      {
        uint64_t v37 = (long long *)(*(void *)(a1 + 8) + (v35 << 6));
        long long v38 = v37[3];
        long long v40 = *v37;
        long long v39 = v37[1];
        long long v99 = v37[2];
        long long v100 = v38;
        long long v97 = v40;
        long long v98 = v39;
        int64x2_t v91 = v88;
        int64x2_t v92 = v86;
        int64x2_t v89 = v88;
        int64x2_t v90 = v86;
        uint64_t v41 = *(void *)(a3 + 24);
        if (!v41) {
          break;
        }
        int v42 = (*(uint64_t (**)(uint64_t, long long *, int64x2_t *, int64x2_t *))(*(void *)v41 + 48))(v41, &v97, &v91, &v89);
        if (v42)
        {
          int v43 = v42;
          int v44 = v98;
          if (v98 != v42)
          {
            int v45 = HIDWORD(v97);
            uint64_t v46 = *(void *)(a1 + 8);
            unint64_t v47 = (unint64_t)(*(void *)(a1 + 16) - v46) >> 6;
            *(_DWORD *)(v46 + (v35 << 6) + 4) = v47;
            *(_DWORD *)unint64_t v96 = v47;
            std::deque<unsigned int>::push_back(v93, v96);
            uint64_t v49 = *(void *)(a1 + 8);
            unint64_t v48 = *(void *)(a1 + 16);
            uint64_t v50 = (uint64_t)(v48 - v49) >> 6;
            int v51 = HIDWORD(v97);
            *(int64x2_t *)&v96[12] = v91;
            *(int64x2_t *)&v96[28] = v92;
            unint64_t v52 = *(void *)(a1 + 24);
            if (v48 >= v52)
            {
              unint64_t v54 = v50 + 1;
              if ((unint64_t)(v50 + 1) >> 58) {
                goto LABEL_74;
              }
              uint64_t v55 = v52 - v49;
              if (v55 >> 5 > v54) {
                unint64_t v54 = v55 >> 5;
              }
              if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFC0) {
                unint64_t v56 = 0x3FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v56 = v54;
              }
              if (v56) {
                unsigned __int8 v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::bbox<double,(unsigned char)3>>>(v84, v56);
              }
              else {
                unsigned __int8 v57 = 0;
              }
              BOOL v58 = &v57[64 * v50];
              *(_DWORD *)BOOL v58 = v50;
              *(void *)(v58 + 4) = -1;
              *((_DWORD *)v58 + 3) = v51;
              *((_DWORD *)v58 + 4) = v43;
              *(_OWORD *)(v58 + 20) = *(_OWORD *)v96;
              *(_OWORD *)(v58 + 36) = *(_OWORD *)&v96[16];
              *((_OWORD *)v58 + 3) = *(_OWORD *)&v96[28];
              float v60 = *(char **)(a1 + 8);
              float v59 = *(char **)(a1 + 16);
              double v61 = v58;
              if (v59 != v60)
              {
                do
                {
                  long long v62 = *((_OWORD *)v59 - 4);
                  long long v63 = *((_OWORD *)v59 - 3);
                  long long v64 = *((_OWORD *)v59 - 1);
                  *((_OWORD *)v61 - 2) = *((_OWORD *)v59 - 2);
                  *((_OWORD *)v61 - 1) = v64;
                  *((_OWORD *)v61 - 4) = v62;
                  *((_OWORD *)v61 - 3) = v63;
                  v61 -= 64;
                  v59 -= 64;
                }
                while (v59 != v60);
                float v59 = *(char **)(a1 + 8);
              }
              uint64_t v53 = v58 + 64;
              *(void *)(a1 + 8) = v61;
              *(void *)(a1 + 16) = v58 + 64;
              *(void *)(a1 + 24) = &v57[64 * v56];
              if (v59) {
                operator delete(v59);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v48 = v50;
              *(void *)(v48 + 4) = -1;
              *(_DWORD *)(v48 + 12) = v51;
              *(_DWORD *)(v48 + 16) = v43;
              *(_OWORD *)(v48 + 20) = *(_OWORD *)v96;
              *(_OWORD *)(v48 + 36) = *(_OWORD *)&v96[16];
              *(_OWORD *)(v48 + 48) = *(_OWORD *)&v96[28];
              uint64_t v53 = (char *)(v48 + 64);
            }
            int v65 = v45 + v43;
            int v66 = v44 + v45 - v65;
            *(void *)(a1 + 16) = v53;
            uint64_t v67 = *(void *)(a1 + 8);
            *(_DWORD *)(v67 + (v35 << 6) + 8) = (unint64_t)&v53[-v67] >> 6;
            *(_DWORD *)uint64_t v95 = (unint64_t)&v53[-v67] >> 6;
            std::deque<unsigned int>::push_back(v93, v95);
            uint64_t v69 = *(void *)(a1 + 8);
            unint64_t v68 = *(void *)(a1 + 16);
            uint64_t v70 = (uint64_t)(v68 - v69) >> 6;
            *(int64x2_t *)&v95[12] = v89;
            *(int64x2_t *)&v95[28] = v90;
            unint64_t v71 = *(void *)(a1 + 24);
            if (v68 >= v71)
            {
              unint64_t v73 = v70 + 1;
              if ((unint64_t)(v70 + 1) >> 58) {
                goto LABEL_74;
              }
              uint64_t v74 = v71 - v69;
              if (v74 >> 5 > v73) {
                unint64_t v73 = v74 >> 5;
              }
              if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFC0) {
                unint64_t v75 = 0x3FFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v75 = v73;
              }
              if (v75) {
                float v76 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::bbox<double,(unsigned char)3>>>(v84, v75);
              }
              else {
                float v76 = 0;
              }
              BOOL v77 = &v76[64 * v70];
              *(_DWORD *)BOOL v77 = v70;
              *(void *)(v77 + 4) = -1;
              *((_DWORD *)v77 + 3) = v65;
              *((_DWORD *)v77 + 4) = v66;
              *(_OWORD *)(v77 + 20) = *(_OWORD *)v95;
              *(_OWORD *)(v77 + 36) = *(_OWORD *)&v95[16];
              *((_OWORD *)v77 + 3) = *(_OWORD *)&v95[28];
              int v79 = *(char **)(a1 + 8);
              BOOL v78 = *(char **)(a1 + 16);
              uint64_t v80 = v77;
              if (v78 != v79)
              {
                do
                {
                  long long v81 = *((_OWORD *)v78 - 4);
                  long long v82 = *((_OWORD *)v78 - 3);
                  long long v83 = *((_OWORD *)v78 - 1);
                  *((_OWORD *)v80 - 2) = *((_OWORD *)v78 - 2);
                  *((_OWORD *)v80 - 1) = v83;
                  *((_OWORD *)v80 - 4) = v81;
                  *((_OWORD *)v80 - 3) = v82;
                  v80 -= 64;
                  v78 -= 64;
                }
                while (v78 != v79);
                BOOL v78 = *(char **)(a1 + 8);
              }
              float v72 = v77 + 64;
              *(void *)(a1 + 8) = v80;
              *(void *)(a1 + 16) = v77 + 64;
              *(void *)(a1 + 24) = &v76[64 * v75];
              if (v78) {
                operator delete(v78);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v68 = v70;
              *(void *)(v68 + 4) = -1;
              *(_DWORD *)(v68 + 12) = v65;
              *(_DWORD *)(v68 + 16) = v66;
              *(_OWORD *)(v68 + 20) = *(_OWORD *)v95;
              *(_OWORD *)(v68 + 36) = *(_OWORD *)&v95[16];
              *(_OWORD *)(v68 + 48) = *(_OWORD *)&v95[28];
              float v72 = (char *)(v68 + 64);
            }
            *(void *)(a1 + 16) = v72;
          }
        }
      }
      uint64_t v33 = *((void *)&v94 + 1);
      if (!*((void *)&v94 + 1)) {
        goto LABEL_72;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_74:
    abort();
  }
LABEL_72:
  *(unsigned char *)a1 = 1;
  std::deque<unsigned int>::~deque[abi:nn180100](v93);
}

void *geom::bvh<double,(unsigned char)2>::build_median(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v5, a2);
  v4[0] = &unk_26EA062B0;
  v4[1] = a1;
  v4[3] = v4;
  geom::bvh<double,(unsigned char)2>::build_top_down(a1, (uint64_t)v5, (uint64_t)v4);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v4);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v5);
}

void *geom::bvh<double,(unsigned char)2>::build_surface_area_heuristic(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(a1, (uint64_t)v4, 8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v4);
}

void *geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(uint64_t a1, uint64_t a2, int a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26EA06330;
  v5[1] = a1;
  v5[2] = &v7;
  *((_DWORD *)v5 + 6) = a3;
  v8[3] = v5;
  geom::bvh<double,(unsigned char)2>::build_top_down(a1, (uint64_t)v9, (uint64_t)v8);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v9);
}

void *geom::bvh<double,(unsigned char)2>::build_volume_heuristic(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(a1, (uint64_t)v4, 8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v4);
}

void *geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(uint64_t a1, uint64_t a2, int a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26EA063B0;
  v5[1] = a1;
  v5[2] = &v7;
  *((_DWORD *)v5 + 6) = a3;
  v8[3] = v5;
  geom::bvh<double,(unsigned char)2>::build_top_down(a1, (uint64_t)v9, (uint64_t)v8);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v9);
}

void *geom::bvh<double,(unsigned char)2>::build_intersection_volume_heuristic(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(a1, (uint64_t)v4, 8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v4);
}

void *geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(uint64_t a1, uint64_t a2, int a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26EA06430;
  v5[1] = a1;
  v5[2] = &v7;
  *((_DWORD *)v5 + 6) = a3;
  v8[3] = v5;
  geom::bvh<double,(unsigned char)2>::build_top_down(a1, (uint64_t)v9, (uint64_t)v8);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v9);
}

uint64_t geom::bvh<double,(unsigned char)2>::raycast(void *a1, uint64_t a2, double *a3, unsigned int *a4, float64x2_t a5, __n128 a6)
{
  *a3 = INFINITY;
  *a4 = -1;
  if (a1[5] == a1[4] || (uint64_t v7 = a1[1], a1[2] == v7))
  {
    char v22 = 0;
    return v22 & 1;
  }
  char v11 = 0;
  int64x2_t v12 = 0uLL;
  char v13 = 1;
  do
  {
    char v14 = v13;
    __n128 v86 = a6;
    unsigned int v15 = (double *)((unint64_t)&v86 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1)));
    double v16 = 1.0 / *v15;
    if (fabs(*v15) <= 1.0e-10) {
      double v16 = INFINITY;
    }
    float64x2_t v87 = (float64x2_t)v12;
    *(double *)((unint64_t)&v87 & 0xFFFFFFFFFFFFFFF7 | (8 * (v11 & 1))) = v16;
    char v11 = 1;
    int64x2_t v12 = (int64x2_t)v87;
    char v13 = 0;
  }
  while ((v14 & 1) != 0);
  long long v91 = 0u;
  memset(v90, 0, sizeof(v90));
  *(_DWORD *)int64x2_t v89 = 0;
  *(_OWORD *)&v89[8] = xmmword_236F196E0;
  int64x2_t v17 = *(int64x2_t *)(v7 + 32);
  float64x2_t v18 = *(float64x2_t *)(v7 + 48);
  if (v87.f64[0] == INFINITY)
  {
    if (vmovn_s64(vcgtq_f64((float64x2_t)v17, a5)).u8[0] & 1) != 0 || (vmovn_s64(vcgtq_f64(a5, v18)).u8[0]) {
      goto LABEL_143;
    }
    int64x2_t v19 = vzip2q_s64(v17, (int64x2_t)v87);
    double v20 = 0.0;
    double v21 = INFINITY;
  }
  else
  {
    float64x2_t v23 = vmulq_f64(v87, vsubq_f64((float64x2_t)v17, a5));
    float64x2_t v24 = vmulq_f64(v87, vsubq_f64(v18, a5));
    unsigned __int8 v25 = vmovn_s64(vcgtq_f64(v23, v24)).u8[0];
    BOOL v26 = (v25 & 1) == 0;
    if (v25) {
      double v27 = v24.f64[0];
    }
    else {
      double v27 = v23.f64[0];
    }
    if (v26) {
      double v21 = v24.f64[0];
    }
    else {
      double v21 = v23.f64[0];
    }
    double v20 = 0.0;
    if (v27 >= 0.0) {
      double v20 = v27;
    }
    *(double *)&v89[8] = v20;
    *(double *)&v89[16] = v21;
    if (v20 > v21) {
      goto LABEL_143;
    }
    int64x2_t v19 = vzip2q_s64(v17, (int64x2_t)v87);
  }
  double v28 = a5.f64[1];
  if (*(double *)&v19.i64[1] == INFINITY)
  {
    if (a5.f64[1] < *(double *)v19.i64 || a5.f64[1] > v18.f64[1]) {
      goto LABEL_143;
    }
    goto LABEL_28;
  }
  *(double *)v19.i64 = *(double *)&v19.i64[1] * (*(double *)v19.i64 - a5.f64[1]);
  double v78 = *(double *)&v19.i64[1] * (v18.f64[1] - a5.f64[1]);
  if (v78 >= *(double *)v19.i64) {
    double v79 = *(double *)v19.i64;
  }
  else {
    double v79 = *(double *)&v19.i64[1] * (v18.f64[1] - a5.f64[1]);
  }
  if (v78 < *(double *)v19.i64) {
    double v78 = *(double *)v19.i64;
  }
  if (v79 >= v20) {
    double v80 = v79;
  }
  else {
    double v80 = v20;
  }
  if (v21 >= v78) {
    double v81 = v78;
  }
  else {
    double v81 = v21;
  }
  *(double *)&v89[8] = v80;
  *(double *)&v89[16] = v81;
  if (v80 <= v81 && (v80 >= 0.0 || v81 >= 0.0))
  {
LABEL_28:
    float64x2_t v83 = v87;
    std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::push_back(v90, (__n128 *)v89);
    uint64_t v30 = *((void *)&v91 + 1);
    if (!*((void *)&v91 + 1)) {
      goto LABEL_143;
    }
    char v22 = 0;
    while (1)
    {
      uint64_t v31 = v30 - 1;
      long long v32 = (double *)(*(void *)(*((void *)&v90[0] + 1) + 8 * (((uint64_t)v91 + v31) / 0xAAuLL))
                     + 24 * (((uint64_t)v91 + v31) % 0xAAuLL));
      uint64_t v33 = *(unsigned int *)v32;
      double v34 = v32[1];
      *((void *)&v91 + 1) = v31;
      std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::__maybe_remove_back_spare[abi:nn180100](v90, 1);
      if (*a3 < v34) {
        goto LABEL_125;
      }
      uint64_t v35 = a1[1];
      uint64_t v36 = (unsigned int *)(v35 + (v33 << 6));
      uint64_t v38 = v36[1];
      uint64_t v37 = v36[2];
      if (v38 == -1 && v37 == -1)
      {
        unsigned int v47 = v36[4];
        if (v47)
        {
          uint64_t v48 = v36[3];
          uint64_t v49 = (unsigned int *)(a1[4] + 4 * v48);
          uint64_t v50 = 4 * (v47 + v48) - 4 * v48;
          do
          {
            unsigned int v51 = *v49;
            *(void *)int64x2_t v89 = 0;
            if (std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::operator()(a2, v51, (uint64_t)v89, (__n128)a5, a6))
            {
              if (*(double *)v89 < *a3 || (*(double *)v89 == *a3 ? (BOOL v52 = v51 >= *a4) : (BOOL v52 = 1), !v52))
              {
                *a3 = *(double *)v89;
                *a4 = v51;
              }
              char v22 = 1;
            }
            ++v49;
            v50 -= 4;
          }
          while (v50);
        }
        goto LABEL_125;
      }
      long long v40 = (float64x2_t *)(v35 + (v38 << 6));
      *(_DWORD *)int64x2_t v89 = v38;
      *(_OWORD *)&v89[8] = xmmword_236F196E0;
      float64x2_t v43 = v40[2];
      float64x2_t v42 = v40[3];
      uint64_t v41 = v40 + 2;
      int v44 = (double *)(v35 + (v37 << 6) + 32);
      if (v83.f64[0] == INFINITY)
      {
        if (vmovn_s64(vcgtq_f64(v43, a5)).u8[0] & 1) != 0 || (vmovn_s64(vcgtq_f64(a5, v42)).u8[0])
        {
          BOOL v59 = 0;
          *(_DWORD *)int64x2_t v88 = v37;
          *(_OWORD *)&v88[8] = xmmword_236F196E0;
          double v60 = v44[2];
          double v45 = 0.0;
          goto LABEL_83;
        }
        double v45 = 0.0;
        v46.f64[0] = INFINITY;
      }
      else
      {
        float64x2_t v46 = vmulq_f64(v83, vsubq_f64(v43, a5));
        float64x2_t v53 = vmulq_f64(v83, vsubq_f64(v42, a5));
        unsigned __int8 v54 = vmovn_s64(vcgtq_f64(v46, v53)).u8[0];
        BOOL v55 = (v54 & 1) == 0;
        if (v54) {
          double v56 = v53.f64[0];
        }
        else {
          double v56 = v46.f64[0];
        }
        if (v55) {
          v46.f64[0] = v53.f64[0];
        }
        if (v56 >= 0.0) {
          double v45 = v56;
        }
        else {
          double v45 = 0.0;
        }
        *(double *)&v89[8] = v45;
        *(float64_t *)&v89[16] = v46.f64[0];
        if (v45 > v46.f64[0])
        {
          BOOL v59 = 0;
          *(_DWORD *)int64x2_t v88 = v37;
          *(_OWORD *)&v88[8] = xmmword_236F196E0;
          double v60 = v44[2];
LABEL_89:
          double v66 = v83.f64[0] * (*v44 - a5.f64[0]);
          double v67 = v83.f64[0] * (v60 - a5.f64[0]);
          if (v67 >= v66) {
            double v68 = v83.f64[0] * (*v44 - a5.f64[0]);
          }
          else {
            double v68 = v67;
          }
          if (v67 >= v66) {
            double v66 = v67;
          }
          if (v68 >= 0.0) {
            double v65 = v68;
          }
          else {
            double v65 = 0.0;
          }
          *(double *)&v88[8] = v65;
          *(double *)&v88[16] = v66;
          if (v65 > v66) {
            goto LABEL_123;
          }
          goto LABEL_98;
        }
      }
      double v57 = v41->f64[1];
      if (v83.f64[1] == INFINITY)
      {
        if (v28 < v57 || v28 > v41[1].f64[1]) {
          goto LABEL_66;
        }
      }
      else
      {
        double v61 = v83.f64[1] * (v57 - v28);
        double v62 = v83.f64[1] * (v41[1].f64[1] - v28);
        if (v62 >= v61) {
          double v63 = v61;
        }
        else {
          double v63 = v83.f64[1] * (v41[1].f64[1] - v28);
        }
        if (v62 >= v61) {
          double v61 = v83.f64[1] * (v41[1].f64[1] - v28);
        }
        if (v63 >= v45) {
          double v45 = v63;
        }
        if (v46.f64[0] >= v61) {
          v46.f64[0] = v61;
        }
        *(double *)&v89[8] = v45;
        *(float64_t *)&v89[16] = v46.f64[0];
        if (v45 > v46.f64[0])
        {
LABEL_66:
          BOOL v59 = 0;
          goto LABEL_82;
        }
      }
      BOOL v59 = v46.f64[0] >= 0.0 || v45 >= 0.0;
LABEL_82:
      *(_DWORD *)int64x2_t v88 = v37;
      *(_OWORD *)&v88[8] = xmmword_236F196E0;
      double v60 = v44[2];
      if (v83.f64[0] != INFINITY) {
        goto LABEL_89;
      }
LABEL_83:
      if (a5.f64[0] < *v44 || a5.f64[0] > v60) {
        goto LABEL_123;
      }
      double v65 = 0.0;
      double v66 = INFINITY;
LABEL_98:
      double v69 = v44[1];
      if (v83.f64[1] == INFINITY)
      {
        if (v28 >= v69 && v28 <= v44[3]) {
          goto LABEL_114;
        }
      }
      else
      {
        double v71 = v83.f64[1] * (v69 - v28);
        double v72 = v83.f64[1] * (v44[3] - v28);
        if (v72 >= v71) {
          double v73 = v71;
        }
        else {
          double v73 = v83.f64[1] * (v44[3] - v28);
        }
        if (v72 >= v71) {
          double v71 = v83.f64[1] * (v44[3] - v28);
        }
        if (v73 >= v65) {
          double v65 = v73;
        }
        if (v66 >= v71) {
          double v66 = v71;
        }
        *(double *)&v88[8] = v65;
        *(double *)&v88[16] = v66;
        if (v65 <= v66)
        {
LABEL_114:
          BOOL v74 = v65 >= 0.0;
          if (v66 >= 0.0) {
            BOOL v74 = 1;
          }
          BOOL v75 = v65 < v45 && v74;
          if (v75 && v59)
          {
            uint64_t v76 = *(void *)&v89[16];
            long long v77 = *(_OWORD *)v89;
            *(_OWORD *)int64x2_t v89 = *(_OWORD *)v88;
            *(void *)&v89[16] = *(void *)&v88[16];
            *(_OWORD *)int64x2_t v88 = v77;
            *(void *)&v88[16] = v76;
          }
          else if (!v74)
          {
            if (!v59) {
              goto LABEL_125;
            }
LABEL_124:
            std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::push_back(v90, (__n128 *)v89);
            goto LABEL_125;
          }
          std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::push_back(v90, (__n128 *)v88);
        }
      }
LABEL_123:
      if (v59) {
        goto LABEL_124;
      }
LABEL_125:
      uint64_t v30 = *((void *)&v91 + 1);
      if (!*((void *)&v91 + 1)) {
        goto LABEL_144;
      }
    }
  }
LABEL_143:
  char v22 = 0;
LABEL_144:
  std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::~deque[abi:nn180100](v90);
  return v22 & 1;
}

uint64_t std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>::operator()(uint64_t a1, int a2, uint64_t a3, __n128 a4, __n128 a5)
{
  v12[0] = a4;
  v12[1] = a5;
  int v11 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, int *, _OWORD *, uint64_t))(*(void *)v5 + 48))(v5, &v11, v12, a3);
  }
  uint64_t v7 = std::__throw_bad_function_call[abi:nn180100]();
  return geom::bvh<double,(unsigned char)2>::find_all_intersections((uint64_t)v7, v8, v9, v10);
}

uint64_t geom::bvh<double,(unsigned char)2>::find_all_intersections(uint64_t result, uint64_t a2, uint64_t a3, int **a4)
{
  a4[1] = *a4;
  if (*(void *)(result + 16) != *(void *)(result + 8))
  {
    uint64_t v7 = result;
    long long v36 = 0u;
    memset(v35, 0, sizeof(v35));
    int v34 = 0;
    std::deque<unsigned int>::push_back(v35, &v34);
    for (uint64_t i = *((void *)&v36 + 1); *((void *)&v36 + 1); uint64_t i = *((void *)&v36 + 1))
    {
      uint64_t v9 = i - 1;
      uint64_t v10 = *(unsigned int *)(*(void *)(*((void *)&v35[0] + 1)
                                        + (((unint64_t)(v36 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v36 + v9) & 0x3FF));
      uint64_t v11 = *(void *)(v7 + 8);
      *((void *)&v36 + 1) = v9;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v35, 1);
      uint64_t v12 = *(void *)(a3 + 24);
      if (!v12)
      {
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
        abort();
      }
      uint64_t v13 = v11 + (v10 << 6);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, v13 + 32))
      {
        int v15 = *(_DWORD *)(v13 + 4);
        char v14 = (_DWORD *)(v13 + 4);
        if (v15 == -1 && (double v16 = (_DWORD *)(v11 + (v10 << 6)), v16[2] == -1))
        {
          int v17 = v16[4];
          if (v17)
          {
            uint64_t v18 = v16[3];
            uint64_t v19 = *(void *)(v7 + 32);
            double v20 = (int *)(v19 + 4 * (v17 + v18));
            double v21 = (int *)(v19 + 4 * v18);
            do
            {
              int v22 = *v21;
              if (std::function<BOOL ()>::operator()(a2, *v21))
              {
                float64x2_t v24 = a4[1];
                unint64_t v23 = (unint64_t)a4[2];
                if ((unint64_t)v24 >= v23)
                {
                  BOOL v26 = *a4;
                  uint64_t v27 = v24 - *a4;
                  unint64_t v28 = v27 + 1;
                  if ((unint64_t)(v27 + 1) >> 62) {
                    goto LABEL_35;
                  }
                  uint64_t v29 = v23 - (void)v26;
                  if (v29 >> 1 > v28) {
                    unint64_t v28 = v29 >> 1;
                  }
                  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v30 = v28;
                  }
                  if (v30)
                  {
                    uint64_t v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v30);
                    BOOL v26 = *a4;
                    float64x2_t v24 = a4[1];
                  }
                  else
                  {
                    uint64_t v31 = 0;
                  }
                  long long v32 = (int *)&v31[4 * v27];
                  *long long v32 = v22;
                  unsigned __int8 v25 = v32 + 1;
                  while (v24 != v26)
                  {
                    int v33 = *--v24;
                    *--long long v32 = v33;
                  }
                  *a4 = v32;
                  a4[1] = v25;
                  a4[2] = (int *)&v31[4 * v30];
                  if (v26) {
                    operator delete(v26);
                  }
                }
                else
                {
                  *float64x2_t v24 = v22;
                  unsigned __int8 v25 = v24 + 1;
                }
                a4[1] = v25;
              }
              ++v21;
            }
            while (v21 != v20);
          }
        }
        else
        {
          std::deque<unsigned int>::push_back(v35, v14);
          std::deque<unsigned int>::push_back(v35, (_DWORD *)(v11 + (v10 << 6) + 8));
        }
      }
    }
    return std::deque<unsigned int>::~deque[abi:nn180100](v35);
  }
  return result;
}

uint64_t geom::bvh<double,(unsigned char)2>::tree_statistics(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  long long v19 = 0u;
  memset(v18, 0, sizeof(v18));
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8))
  {
    *a2 = 0;
    *a3 = 0;
  }
  else
  {
    unint64_t v17 = 0x100000000;
    std::deque<std::pair<unsigned int,unsigned int>>::push_back(v18, &v17);
    uint64_t v6 = *((void *)&v19 + 1);
    *a2 = 0;
    *a3 = 0;
    if (v6)
    {
      do
      {
        uint64_t v7 = v6 - 1;
        uint64_t v8 = (unsigned int *)(*(void *)(*((void *)&v18[0] + 1)
                                        + (((unint64_t)(v19 + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v19 + v7) & 0x1FF));
        uint64_t v10 = *v8;
        unsigned int v9 = v8[1];
        *((void *)&v19 + 1) = v7;
        std::deque<std::pair<unsigned int,unsigned int>>::__maybe_remove_back_spare[abi:nn180100](v18, 1);
        uint64_t v11 = *(void *)(a1 + 8);
        unsigned int v12 = *a2;
        if (*a2 <= v9) {
          unsigned int v12 = v9;
        }
        *a2 = v12;
        *a3 += v9;
        uint64_t v13 = v11 + (v10 << 6);
        uint64_t v14 = *(unsigned int *)(v13 + 4);
        if (v14 != -1)
        {
          unint64_t v17 = v14 | ((unint64_t)(v9 + 1) << 32);
          std::deque<std::pair<unsigned int,unsigned int>>::push_back(v18, &v17);
        }
        uint64_t v15 = *(unsigned int *)(v13 + 8);
        if (v15 != -1)
        {
          unint64_t v17 = v15 | ((unint64_t)(v9 + 1) << 32);
          std::deque<std::pair<unsigned int,unsigned int>>::push_back(v18, &v17);
        }
        uint64_t v6 = *((void *)&v19 + 1);
      }
      while (*((void *)&v19 + 1));
    }
  }
  return std::deque<std::pair<unsigned int,unsigned int>>::~deque[abi:nn180100](v18);
}

unint64_t geom::bvh<double,(unsigned char)2>::node_for_node_index(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 8) + ((unint64_t)a2 << 6);
}

uint64_t geom::bvh<double,(unsigned char)2>::primitives_for_node_index(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 32) + 4 * *(unsigned int *)(*(void *)(a1 + 8) + ((unint64_t)a2 << 6) + 12);
}

unint64_t geom::bvh<double,(unsigned char)2>::partition_node_median(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  v40[4] = *MEMORY[0x263EF8340];
  v40[0] = &unk_26EA064B0;
  v40[1] = a1;
  v40[3] = v40;
  v39[0] = &unk_26EA065B0;
  v39[1] = a1;
  v39[2] = v40;
  v39[3] = v39;
  float64x2_t v33 = *(float64x2_t *)(a2 + 32);
  float64x2_t v34 = *(float64x2_t *)(a2 + 48);
  int v36 = 0;
  uint64_t v35 = 0;
  std::function<void ()(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)>::operator()((uint64_t)v39, a2, 0);
  v38[0] = 0;
  std::function<void ()(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)>::operator()((uint64_t)v39, a2, 1);
  int64x2_t v8 = (int64x2_t)vsubq_f64(v34, v33);
  if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64(v8, 1), (float64x2_t)v8)).u8[0])
  {
    int v36 = 1;
    uint64_t v35 = v38[0];
  }
  unsigned int v9 = operator new(0x20uLL);
  void *v9 = &unk_26EA06640;
  v9[1] = &v35;
  void v9[2] = &v36;
  v9[3] = a1;
  v38[3] = v9;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(unsigned int *)(a2 + 12);
  unsigned int v12 = (int *)(v10 + 4 * v11);
  uint64_t v13 = (int *)(v10 + 4 * (*(_DWORD *)(a2 + 16) + v11));
  std::__function::__value_func<BOOL ()>::__value_func[abi:nn180100]((uint64_t)v37, (uint64_t)v38);
  uint64_t v14 = std::__partition_impl[abi:nn180100]<std::function<BOOL ()> &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v12, v13, (uint64_t)v37);
  std::__function::__value_func<BOOL ()>::~__value_func[abi:nn180100](v37);
  uint64_t v15 = *(unsigned int *)(a2 + 12);
  double v16 = (char *)(*(void *)(a1 + 32) + 4 * v15);
  float64x2_t v17 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  unint64_t v18 = (unint64_t)((char *)v14 - v16) >> 2;
  float64x2_t v19 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  float64x2_t v20 = v19;
  float64x2_t v21 = v17;
  if (v18)
  {
    uint64_t v22 = 4 * (v15 + v18) - 4 * v15;
    float64x2_t v20 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v21 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    do
    {
      unsigned int v23 = *(_DWORD *)v16;
      v16 += 4;
      float64x2_t v24 = (float64x2_t *)(*(void *)(a1 + 80) + 32 * v23);
      float64x2_t v20 = vminnmq_f64(v20, *v24);
      float64x2_t v21 = vmaxnmq_f64(v21, v24[1]);
      v22 -= 4;
    }
    while (v22);
  }
  *a3 = v20;
  a3[1] = v21;
  int v25 = *(_DWORD *)(a2 + 16);
  if (v25 != v18)
  {
    int v26 = *(_DWORD *)(a2 + 12);
    uint64_t v27 = (v25 + v26);
    unint64_t v28 = (unsigned int *)(*(void *)(a1 + 32) + 4 * (v26 + v18));
    uint64_t v29 = 4 * v27 - 4 * (v26 + v18);
    float64x2_t v19 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v17 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    do
    {
      unsigned int v30 = *v28++;
      uint64_t v31 = (float64x2_t *)(*(void *)(a1 + 80) + 32 * v30);
      float64x2_t v19 = vminnmq_f64(v19, *v31);
      float64x2_t v17 = vmaxnmq_f64(v17, v31[1]);
      v29 -= 4;
    }
    while (v29);
  }
  *a4 = v19;
  a4[1] = v17;
  std::__function::__value_func<BOOL ()>::~__value_func[abi:nn180100](v38);
  std::__function::__value_func<void ()(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)>::~__value_func[abi:nn180100](v39);
  std::__function::__value_func<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::~__value_func[abi:nn180100](v40);
  return v18;
}

uint64_t std::function<void ()(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  int v9 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v3 + 48))(v3, a2, &v9);
  }
  uint64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return geom::bvh<double,(unsigned char)2>::partition_node_middle((uint64_t)v5, v6, v7, v8);
}

uint64_t geom::bvh<double,(unsigned char)2>::partition_node_middle(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  float64x2_t v8 = *(float64x2_t *)(a2 + 32);
  int64x2_t v9 = (int64x2_t)vsubq_f64(*(float64x2_t *)(a2 + 48), v8);
  v9.i8[0] = vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64(v9, 1), (float64x2_t)v9)).u8[0];
  long long v37 = *(_OWORD *)(a2 + 48);
  double v10 = *(double *)((unint64_t)&v37 & 0xFFFFFFFFFFFFFFF7 | (8 * (v9.i8[0] & 1)));
  float64x2_t v38 = v8;
  double v11 = (*(double *)((unint64_t)&v38 & 0xFFFFFFFFFFFFFFF7 | (8 * (v9.i8[0] & 1))) + v10) * 0.5;
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(unsigned int *)(a2 + 12);
  uint64_t v14 = (_DWORD *)(v12 + 4 * (*(_DWORD *)(a2 + 16) + v13));
  uint64_t v39 = a1;
  int v40 = v9.i8[0] & 1;
  double v41 = v11;
  uint64_t v15 = (char *)std::__partition_impl[abi:nn180100]<geom::bvh<double,(unsigned char)2>::partition_node_middle(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>((_DWORD *)(v12 + 4 * v13), v14, (uint64_t)&v39);
  uint64_t v17 = *(unsigned int *)(a2 + 12);
  unsigned int v16 = *(_DWORD *)(a2 + 16);
  unint64_t v18 = (char *)(*(void *)(a1 + 32) + 4 * v17);
  unint64_t v19 = (unint64_t)(v15 - v18) >> 2;
  BOOL v20 = v16 == v19 || v19 == 0;
  unsigned int v21 = v16 >> 1;
  float64x2_t v22 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  if (v20) {
    uint64_t result = v21;
  }
  else {
    uint64_t result = v19;
  }
  float64x2_t v24 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  float64x2_t v25 = v24;
  float64x2_t v26 = v22;
  if (result)
  {
    uint64_t v27 = 4 * (result + v17) - 4 * v17;
    float64x2_t v25 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v26 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    do
    {
      unsigned int v28 = *(_DWORD *)v18;
      v18 += 4;
      uint64_t v29 = (float64x2_t *)(*(void *)(a1 + 80) + 32 * v28);
      float64x2_t v25 = vminnmq_f64(v25, *v29);
      float64x2_t v26 = vmaxnmq_f64(v26, v29[1]);
      v27 -= 4;
    }
    while (v27);
  }
  *a3 = v25;
  a3[1] = v26;
  int v30 = *(_DWORD *)(a2 + 16);
  if (v30 != result)
  {
    int v31 = *(_DWORD *)(a2 + 12);
    uint64_t v32 = (v30 + v31);
    float64x2_t v33 = (unsigned int *)(*(void *)(a1 + 32) + 4 * (v31 + result));
    uint64_t v34 = 4 * v32 - 4 * (v31 + result);
    float64x2_t v24 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v22 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    do
    {
      unsigned int v35 = *v33++;
      int v36 = (float64x2_t *)(*(void *)(a1 + 80) + 32 * v35);
      float64x2_t v24 = vminnmq_f64(v24, *v36);
      float64x2_t v22 = vmaxnmq_f64(v22, v36[1]);
      v34 -= 4;
    }
    while (v34);
  }
  *a4 = v24;
  a4[1] = v22;
  return result;
}

uint64_t geom::bvh<float,(unsigned char)3>::bvh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v10[0] = a2;
  v10[1] = a3;
  v9[0] = a4;
  v9[1] = a5;
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  _ZN4geom19make_external_arrayINS_5sliceIDv2_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v10, a6, a1 + 56);
  geom::make_external_array<geom::slice<geom::bbox<float,(unsigned char)3>>>(v9, a6, a1 + 80);
  return a1;
}

void *geom::make_external_array<geom::slice<geom::bbox<float,(unsigned char)3>>>@<X0>(void *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[1];
  if (v3)
  {
    if (a2) {
      operator new[]();
    }
    *(void *)a3 = *result;
    *(void *)(a3 + 8) = v3;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t geom::bvh<float,(unsigned char)3>::bvh(uint64_t a1)
{
  return geom::bvh<float,(unsigned char)3>::bvh(a1, 0, 0, 0, 0, 0);
}

void *geom::bvh<float,(unsigned char)3>::reset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v15[0] = a4;
  v15[1] = a5;
  *(unsigned char *)a1 = 0;
  if (!a3) {
    a2 = 0;
  }
  if (a3 && a6) {
    operator new[]();
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v10 = *(void *)(a1 + 56);
    if (v10) {
      MEMORY[0x237E10700](v10, 0x1000C80451B5BE8);
    }
  }
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = a3;
  *(unsigned char *)(a1 + 72) = 0;
  uint64_t result = geom::make_external_array<geom::slice<geom::bbox<float,(unsigned char)3>>>(v15, a6, (uint64_t)v13);
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t result = *(void **)(a1 + 80);
    if (result) {
      uint64_t result = (void *)MEMORY[0x237E10700](result, 0x1000C80E0EAB150);
    }
  }
  uint64_t v12 = v13[1];
  *(void *)(a1 + 80) = v13[0];
  *(void *)(a1 + 88) = v12;
  *(unsigned char *)(a1 + 96) = v14;
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  return result;
}

void *geom::bvh<float,(unsigned char)3>::build_middle_split(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v5, a2);
  v4[0] = &unk_26EA066C0;
  v4[1] = a1;
  v4[3] = v4;
  geom::bvh<float,(unsigned char)3>::build_top_down(a1, (uint64_t)v5, (uint64_t)v4);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v4);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v5);
}

void geom::bvh<float,(unsigned char)3>::build_top_down(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)a1)
  {
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), *(void *)(a1 + 88));
  uint64_t v6 = *(char **)(a1 + 32);
  uint64_t v7 = *(char **)(a1 + 40);
  if (v6 == v7)
  {
    if (*(void *)(a1 + 88))
    {
      uint64_t v11 = (v7 - v6) >> 2;
      float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x7F800000u);
      goto LABEL_15;
    }
LABEL_13:
    *(unsigned char *)a1 = 1;
    return;
  }
  int v8 = 0;
  int64x2_t v9 = *(char **)(a1 + 32);
  do
  {
    *(_DWORD *)int64x2_t v9 = v8;
    v9 += 4;
    ++v8;
  }
  while (v9 != v7);
  if (!*(void *)(a1 + 88)) {
    goto LABEL_13;
  }
  uint64_t v10 = v7 - v6;
  uint64_t v11 = v10 >> 2;
  if (v10)
  {
    float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    uint64_t v13 = 4 * v11;
    v14.i64[0] = 0x7F0000007FLL;
    v14.i64[1] = 0x7F0000007FLL;
    do
    {
      __int32 v15 = v12.i32[3];
      float32x4_t v16 = v14;
      unsigned int v17 = *(_DWORD *)v6;
      v6 += 4;
      unint64_t v18 = (float32x4_t *)(*(void *)(a1 + 80) + 32 * v17);
      float32x4_t v19 = v12;
      v19.i32[3] = 0;
      float32x4_t v20 = *v18;
      float32x4_t v21 = v18[1];
      v20.i32[3] = 0;
      float32x4_t v12 = vminnmq_f32(v19, v20);
      float32x4_t v22 = v16;
      v22.i32[3] = 0;
      v21.i32[3] = 0;
      float32x4_t v14 = vmaxnmq_f32(v22, v21);
      v12.i32[3] = v15;
      v14.i32[3] = v16.i32[3];
      v13 -= 4;
    }
    while (v13);
    goto LABEL_16;
  }
  float32x4_t v12 = (float32x4_t)vdupq_n_s32(0x7F800000u);
LABEL_15:
  v14.i64[0] = 0x7F0000007FLL;
  v14.i64[1] = 0x7F0000007FLL;
LABEL_16:
  unint64_t v23 = *(void *)(a1 + 24);
  uint64_t v91 = a1 + 24;
  unint64_t v24 = *(void *)(a1 + 16);
  if (v24 >= v23)
  {
    uint64_t v26 = *(void *)(a1 + 8);
    uint64_t v27 = (uint64_t)(v24 - v26) >> 6;
    unint64_t v28 = v27 + 1;
    if ((unint64_t)(v27 + 1) >> 58) {
      goto LABEL_77;
    }
    uint64_t v29 = v23 - v26;
    if (v29 >> 5 > v28) {
      unint64_t v28 = v29 >> 5;
    }
    if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v30 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v28;
    }
    if (v30)
    {
      float32x4_t v92 = v12;
      float32x4_t v93 = v14;
      int v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::bbox<double,(unsigned char)3>>>(v91, v30);
      float32x4_t v12 = v92;
      float32x4_t v14 = v93;
    }
    else
    {
      int v31 = 0;
    }
    uint64_t v32 = &v31[64 * v27];
    float64x2_t v33 = &v31[64 * v30];
    *(_OWORD *)uint64_t v32 = xmmword_236F196D0;
    *((_DWORD *)v32 + 4) = v11;
    *(void *)(v32 + 20) = v103;
    *((_DWORD *)v32 + 7) = DWORD2(v103);
    *((void *)v32 + 4) = v12.i64[0];
    *((_DWORD *)v32 + 10) = v12.i32[2];
    *((void *)v32 + 6) = v14.i64[0];
    *((_DWORD *)v32 + 14) = v14.i32[2];
    float64x2_t v25 = v32 + 64;
    unsigned int v35 = *(char **)(a1 + 8);
    uint64_t v34 = *(char **)(a1 + 16);
    if (v34 != v35)
    {
      do
      {
        long long v36 = *((_OWORD *)v34 - 4);
        long long v37 = *((_OWORD *)v34 - 3);
        long long v38 = *((_OWORD *)v34 - 1);
        *((_OWORD *)v32 - 2) = *((_OWORD *)v34 - 2);
        *((_OWORD *)v32 - 1) = v38;
        *((_OWORD *)v32 - 4) = v36;
        *((_OWORD *)v32 - 3) = v37;
        v32 -= 64;
        v34 -= 64;
      }
      while (v34 != v35);
      uint64_t v34 = *(char **)(a1 + 8);
    }
    *(void *)(a1 + 8) = v32;
    *(void *)(a1 + 16) = v25;
    *(void *)(a1 + 24) = v33;
    if (v34) {
      operator delete(v34);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v24 = xmmword_236F196D0;
    *(_DWORD *)(v24 + 16) = v11;
    *(void *)(v24 + 20) = v103;
    *(_DWORD *)(v24 + 28) = DWORD2(v103);
    *(_DWORD *)(v24 + 40) = v12.i32[2];
    *(void *)(v24 + 32) = v12.i64[0];
    *(_DWORD *)(v24 + 56) = v14.i32[2];
    *(void *)(v24 + 48) = v14.i64[0];
    float64x2_t v25 = (char *)(v24 + 64);
  }
  *(void *)(a1 + 16) = v25;
  long long v100 = 0u;
  memset(v99, 0, sizeof(v99));
  LODWORD(v103) = 0;
  std::deque<unsigned int>::push_back(v99, &v103);
  uint64_t v39 = *((void *)&v100 + 1);
  if (*((void *)&v100 + 1))
  {
    int32x4_t v94 = vdupq_n_s32(0x7F800000u);
    while (1)
    {
      uint64_t v40 = v39 - 1;
      uint64_t v41 = *(unsigned int *)(*(void *)(*((void *)&v99[0] + 1)
                                        + (((unint64_t)(v100 + v40) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v100 + v40) & 0x3FF));
      *((void *)&v100 + 1) = v40;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v99, 1);
      uint64_t v42 = *(void *)(a2 + 24);
      if (!v42) {
        break;
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v42 + 48))(v42, *(void *)(a1 + 8) + (v41 << 6)) & 1) == 0)
      {
        float64x2_t v43 = (long long *)(*(void *)(a1 + 8) + (v41 << 6));
        long long v44 = v43[3];
        long long v46 = *v43;
        long long v45 = v43[1];
        long long v105 = v43[2];
        long long v106 = v44;
        long long v103 = v46;
        long long v104 = v45;
        *(void *)&long long v44 = 0x7F0000007FLL;
        *((void *)&v44 + 1) = 0x7F0000007FLL;
        int32x4_t v97 = v94;
        long long v98 = v44;
        int32x4_t v95 = v94;
        long long v96 = v44;
        uint64_t v47 = *(void *)(a3 + 24);
        if (!v47) {
          break;
        }
        int v48 = (*(uint64_t (**)(uint64_t, long long *, int32x4_t *, int32x4_t *))(*(void *)v47 + 48))(v47, &v103, &v97, &v95);
        int v49 = v104;
        if (v48 && v104 != v48)
        {
          int v51 = v48;
          int v52 = HIDWORD(v103);
          uint64_t v53 = *(void *)(a1 + 8);
          unint64_t v54 = (unint64_t)(*(void *)(a1 + 16) - v53) >> 6;
          *(_DWORD *)(v53 + (v41 << 6) + 4) = v54;
          *(_DWORD *)float64x2_t v102 = v54;
          std::deque<unsigned int>::push_back(v99, v102);
          uint64_t v56 = *(void *)(a1 + 8);
          unint64_t v55 = *(void *)(a1 + 16);
          uint64_t v57 = (uint64_t)(v55 - v56) >> 6;
          int v58 = HIDWORD(v103);
          *(int32x4_t *)&v102[12] = v97;
          *(_OWORD *)&v102[28] = v98;
          unint64_t v59 = *(void *)(a1 + 24);
          if (v55 >= v59)
          {
            unint64_t v61 = v57 + 1;
            if ((unint64_t)(v57 + 1) >> 58) {
              goto LABEL_77;
            }
            uint64_t v62 = v59 - v56;
            if (v62 >> 5 > v61) {
              unint64_t v61 = v62 >> 5;
            }
            if ((unint64_t)v62 >= 0x7FFFFFFFFFFFFFC0) {
              unint64_t v63 = 0x3FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v63 = v61;
            }
            if (v63) {
              long long v64 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::bbox<double,(unsigned char)3>>>(v91, v63);
            }
            else {
              long long v64 = 0;
            }
            double v65 = &v64[64 * v57];
            *(_DWORD *)double v65 = v57;
            *(void *)(v65 + 4) = -1;
            *((_DWORD *)v65 + 3) = v58;
            *((_DWORD *)v65 + 4) = v51;
            *(_OWORD *)(v65 + 20) = *(_OWORD *)v102;
            *(_OWORD *)(v65 + 36) = *(_OWORD *)&v102[16];
            *((_OWORD *)v65 + 3) = *(_OWORD *)&v102[28];
            double v67 = *(char **)(a1 + 8);
            double v66 = *(char **)(a1 + 16);
            double v68 = v65;
            if (v66 != v67)
            {
              do
              {
                long long v69 = *((_OWORD *)v66 - 4);
                long long v70 = *((_OWORD *)v66 - 3);
                long long v71 = *((_OWORD *)v66 - 1);
                *((_OWORD *)v68 - 2) = *((_OWORD *)v66 - 2);
                *((_OWORD *)v68 - 1) = v71;
                *((_OWORD *)v68 - 4) = v69;
                *((_OWORD *)v68 - 3) = v70;
                v68 -= 64;
                v66 -= 64;
              }
              while (v66 != v67);
              double v66 = *(char **)(a1 + 8);
            }
            double v60 = v65 + 64;
            *(void *)(a1 + 8) = v68;
            *(void *)(a1 + 16) = v65 + 64;
            *(void *)(a1 + 24) = &v64[64 * v63];
            if (v66) {
              operator delete(v66);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v55 = v57;
            *(void *)(v55 + 4) = -1;
            *(_DWORD *)(v55 + 12) = v58;
            *(_DWORD *)(v55 + 16) = v51;
            *(_OWORD *)(v55 + 20) = *(_OWORD *)v102;
            *(_OWORD *)(v55 + 36) = *(_OWORD *)&v102[16];
            *(_OWORD *)(v55 + 48) = *(_OWORD *)&v102[28];
            double v60 = (char *)(v55 + 64);
          }
          int v72 = v52 + v51;
          int v73 = v49 + v52 - v72;
          *(void *)(a1 + 16) = v60;
          uint64_t v74 = *(void *)(a1 + 8);
          *(_DWORD *)(v74 + (v41 << 6) + 8) = (unint64_t)&v60[-v74] >> 6;
          *(_DWORD *)uint64_t v101 = (unint64_t)&v60[-v74] >> 6;
          std::deque<unsigned int>::push_back(v99, v101);
          uint64_t v76 = *(void *)(a1 + 8);
          unint64_t v75 = *(void *)(a1 + 16);
          uint64_t v77 = (uint64_t)(v75 - v76) >> 6;
          *(int32x4_t *)&unsigned char v101[12] = v95;
          *(_OWORD *)&v101[28] = v96;
          unint64_t v78 = *(void *)(a1 + 24);
          if (v75 >= v78)
          {
            unint64_t v80 = v77 + 1;
            if ((unint64_t)(v77 + 1) >> 58) {
              goto LABEL_77;
            }
            uint64_t v81 = v78 - v76;
            if (v81 >> 5 > v80) {
              unint64_t v80 = v81 >> 5;
            }
            if ((unint64_t)v81 >= 0x7FFFFFFFFFFFFFC0) {
              unint64_t v82 = 0x3FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v82 = v80;
            }
            if (v82) {
              float64x2_t v83 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<geom::bbox<double,(unsigned char)3>>>(v91, v82);
            }
            else {
              float64x2_t v83 = 0;
            }
            uint64_t v84 = &v83[64 * v77];
            *(_DWORD *)uint64_t v84 = v77;
            *(void *)(v84 + 4) = -1;
            *((_DWORD *)v84 + 3) = v72;
            *((_DWORD *)v84 + 4) = v73;
            *(_OWORD *)(v84 + 20) = *(_OWORD *)v101;
            *(_OWORD *)(v84 + 36) = *(_OWORD *)&v101[16];
            *((_OWORD *)v84 + 3) = *(_OWORD *)&v101[28];
            __n128 v86 = *(char **)(a1 + 8);
            float64x2_t v85 = *(char **)(a1 + 16);
            float64x2_t v87 = v84;
            if (v85 != v86)
            {
              do
              {
                long long v88 = *((_OWORD *)v85 - 4);
                long long v89 = *((_OWORD *)v85 - 3);
                long long v90 = *((_OWORD *)v85 - 1);
                *((_OWORD *)v87 - 2) = *((_OWORD *)v85 - 2);
                *((_OWORD *)v87 - 1) = v90;
                *((_OWORD *)v87 - 4) = v88;
                *((_OWORD *)v87 - 3) = v89;
                v87 -= 64;
                v85 -= 64;
              }
              while (v85 != v86);
              float64x2_t v85 = *(char **)(a1 + 8);
            }
            double v79 = v84 + 64;
            *(void *)(a1 + 8) = v87;
            *(void *)(a1 + 16) = v84 + 64;
            *(void *)(a1 + 24) = &v83[64 * v82];
            if (v85) {
              operator delete(v85);
            }
          }
          else
          {
            *(_DWORD *)unint64_t v75 = v77;
            *(void *)(v75 + 4) = -1;
            *(_DWORD *)(v75 + 12) = v72;
            *(_DWORD *)(v75 + 16) = v73;
            *(_OWORD *)(v75 + 20) = *(_OWORD *)v101;
            *(_OWORD *)(v75 + 36) = *(_OWORD *)&v101[16];
            *(_OWORD *)(v75 + 48) = *(_OWORD *)&v101[28];
            double v79 = (char *)(v75 + 64);
          }
          *(void *)(a1 + 16) = v79;
        }
      }
      uint64_t v39 = *((void *)&v100 + 1);
      if (!*((void *)&v100 + 1)) {
        goto LABEL_75;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_77:
    abort();
  }
LABEL_75:
  *(unsigned char *)a1 = 1;
  std::deque<unsigned int>::~deque[abi:nn180100](v99);
}

void *geom::bvh<float,(unsigned char)3>::build_median(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v5, a2);
  v4[0] = &unk_26EA06750;
  v4[1] = a1;
  v4[3] = v4;
  geom::bvh<float,(unsigned char)3>::build_top_down(a1, (uint64_t)v5, (uint64_t)v4);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v4);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v5);
}

void *geom::bvh<float,(unsigned char)3>::build_surface_area_heuristic(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(a1, (uint64_t)v4, 8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v4);
}

void *geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(uint64_t a1, uint64_t a2, int a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26EA067D0;
  v5[1] = a1;
  v5[2] = &v7;
  *((_DWORD *)v5 + 6) = a3;
  v8[3] = v5;
  geom::bvh<float,(unsigned char)3>::build_top_down(a1, (uint64_t)v9, (uint64_t)v8);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v9);
}

void *geom::bvh<float,(unsigned char)3>::build_volume_heuristic(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(a1, (uint64_t)v4, 8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v4);
}

void *geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(uint64_t a1, uint64_t a2, int a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26EA06850;
  v5[1] = a1;
  v5[2] = &v7;
  *((_DWORD *)v5 + 6) = a3;
  v8[3] = v5;
  geom::bvh<float,(unsigned char)3>::build_top_down(a1, (uint64_t)v9, (uint64_t)v8);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v9);
}

void *geom::bvh<float,(unsigned char)3>::build_intersection_volume_heuristic(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(a1, (uint64_t)v4, 8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v4);
}

void *geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(uint64_t a1, uint64_t a2, int a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26EA068D0;
  v5[1] = a1;
  v5[2] = &v7;
  *((_DWORD *)v5 + 6) = a3;
  v8[3] = v5;
  geom::bvh<float,(unsigned char)3>::build_top_down(a1, (uint64_t)v9, (uint64_t)v8);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v9);
}

uint64_t geom::bvh<float,(unsigned char)3>::raycast(void *a1, uint64_t a2, float *a3, unsigned int *a4, float32x4_t a5, __n128 a6)
{
  *a3 = INFINITY;
  *a4 = -1;
  if (a1[5] == a1[4] || (char v7 = (float32x4_t *)a1[1], (float32x4_t *)a1[2] == v7))
  {
    char v22 = 0;
    return v22 & 1;
  }
  int v12 = 0;
  long long v13 = 0uLL;
  do
  {
    __n128 v102 = a6;
    float32x4_t v14 = (float *)((unint64_t)&v102 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3)));
    float v15 = 1.0 / *v14;
    if (fabsf(*v14) <= 0.000005) {
      float v15 = INFINITY;
    }
    long long v103 = v13;
    *(float *)((unint64_t)&v103 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3))) = v15;
    long long v16 = v103;
    HIDWORD(v16) = HIDWORD(v13);
    ++v12;
    long long v13 = v16;
  }
  while (v12 != 3);
  long long v107 = 0u;
  memset(v106, 0, sizeof(v106));
  *(_DWORD *)long long v105 = 0;
  *(void *)&v105[4] = 0x7F80000000000000;
  float32x4_t v17 = v7[2];
  if (*(float *)&v103 == INFINITY)
  {
    if (vmovn_s32(vcgtq_f32(v17, a5)).u8[0]) {
      goto LABEL_188;
    }
    float32x4_t v18 = v7[3];
    if (vmovn_s32(vcgtq_f32(a5, v18)).u8[0]) {
      goto LABEL_188;
    }
    int8x16_t v19 = vextq_s8((int8x16_t)vtrn1q_s32((int32x4_t)v18, (int32x4_t)v17), (int8x16_t)vtrn2q_s32((int32x4_t)v18, (int32x4_t)v17), 8uLL);
    float v20 = 0.0;
    float v21 = INFINITY;
  }
  else
  {
    float v21 = *(float *)&v103 * vsubq_f32(v17, a5).f32[0];
    float32x4_t v23 = v7[3];
    float v24 = vsubq_f32(v23, a5).f32[0];
    float v25 = *(float *)&v103 * v24;
    BOOL v26 = (float)(*(float *)&v103 * v24) < v21;
    if ((float)(*(float *)&v103 * v24) >= v21) {
      float v27 = v21;
    }
    else {
      float v27 = *(float *)&v103 * v24;
    }
    if (!v26) {
      float v21 = v25;
    }
    if (v27 >= 0.0) {
      float v20 = v27;
    }
    else {
      float v20 = 0.0;
    }
    *(float *)&v105[4] = v20;
    *(float *)&v105[8] = v21;
    if (v20 > v21) {
      goto LABEL_188;
    }
    int8x16_t v19 = vextq_s8((int8x16_t)vtrn1q_s32((int32x4_t)v23, (int32x4_t)v17), (int8x16_t)vtrn2q_s32((int32x4_t)v23, (int32x4_t)v17), 8uLL);
  }
  float v28 = *((float *)&v103 + 1);
  float v29 = a5.f32[1];
  if (*((float *)&v103 + 1) == INFINITY)
  {
    if (a5.f32[1] < *(float *)&v19.i32[3] || a5.f32[1] > *(float *)&v19.i32[2]) {
      goto LABEL_188;
    }
  }
  else
  {
    float v31 = *((float *)&v103 + 1) * (float)(*(float *)&v19.i32[3] - a5.f32[1]);
    float v32 = *((float *)&v103 + 1) * (float)(*(float *)&v19.i32[2] - a5.f32[1]);
    if (v32 >= v31) {
      float v33 = *((float *)&v103 + 1) * (float)(*(float *)&v19.i32[3] - a5.f32[1]);
    }
    else {
      float v33 = *((float *)&v103 + 1) * (float)(*(float *)&v19.i32[2] - a5.f32[1]);
    }
    if (v32 >= v31) {
      float v31 = *((float *)&v103 + 1) * (float)(*(float *)&v19.i32[2] - a5.f32[1]);
    }
    if (v33 >= v20) {
      float v20 = v33;
    }
    if (v21 >= v31) {
      float v21 = v31;
    }
    *(float *)&v105[4] = v20;
    *(float *)&v105[8] = v21;
    if (v20 > v21) {
      goto LABEL_188;
    }
  }
  float v34 = *((float *)&v103 + 2);
  float v35 = a5.f32[2];
  if (*((float *)&v103 + 2) == INFINITY)
  {
    if (a5.f32[2] < *(float *)&v19.i32[1] || a5.f32[2] > *(float *)v19.i32) {
      goto LABEL_188;
    }
    goto LABEL_54;
  }
  float v37 = *((float *)&v103 + 2) * (float)(*(float *)&v19.i32[1] - a5.f32[2]);
  float v38 = *((float *)&v103 + 2) * (float)(*(float *)v19.i32 - a5.f32[2]);
  if (v38 >= v37) {
    float v39 = *((float *)&v103 + 2) * (float)(*(float *)&v19.i32[1] - a5.f32[2]);
  }
  else {
    float v39 = v38;
  }
  if (v38 < v37) {
    float v38 = *((float *)&v103 + 2) * (float)(*(float *)&v19.i32[1] - a5.f32[2]);
  }
  if (v39 >= v20) {
    float v20 = v39;
  }
  if (v21 >= v38) {
    float v21 = v38;
  }
  *(float *)&v105[4] = v20;
  *(float *)&v105[8] = v21;
  if (v20 <= v21)
  {
LABEL_54:
    if (v20 < 0.0 && v21 < 0.0) {
      goto LABEL_188;
    }
    float v99 = *(float *)&v103;
    __n128 v101 = (__n128)a5;
    std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(v106, (uint64_t *)v105);
    uint64_t v40 = *((void *)&v107 + 1);
    if (!*((void *)&v107 + 1)) {
      goto LABEL_188;
    }
    char v22 = 0;
    while (1)
    {
      uint64_t v41 = v40 - 1;
      uint64_t v42 = ((unint64_t)(v107 + v41) * (unsigned __int128)0x8060180601806019) >> 64;
      unint64_t v43 = (v42 + ((unint64_t)(v107 + v41 - v42) >> 1)) >> 8;
      long long v44 = (float *)(*(void *)(*((void *)&v106[0] + 1) + 8 * v43) + 12 * (v107 + v41 - 341 * v43));
      uint64_t v45 = *(unsigned int *)v44;
      float v46 = v44[1];
      *((void *)&v107 + 1) = v41;
      std::deque<geom::bvh<float,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>,geom::ray<float,(unsigned char)2>,float &,unsigned int &)::state,std::allocator<geom::bvh<float,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>,geom::ray<float,(unsigned char)2>,float &,unsigned int &)::state>>::__maybe_remove_back_spare[abi:nn180100](v106, 1);
      if (*a3 < v46) {
        goto LABEL_184;
      }
      uint64_t v47 = a1[1];
      int v48 = (unsigned int *)(v47 + (v45 << 6));
      uint64_t v50 = v48[1];
      uint64_t v49 = v48[2];
      if (v50 == -1 && v49 == -1)
      {
        unsigned int v59 = v48[4];
        if (v59)
        {
          uint64_t v60 = v48[3];
          unint64_t v61 = (unsigned int *)(a1[4] + 4 * v60);
          uint64_t v62 = 4 * (v59 + v60) - 4 * v60;
          do
          {
            unsigned int v63 = *v61;
            *(_DWORD *)long long v105 = 0;
            if (std::function<BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::operator()(a2, v63, (uint64_t)v105, v101, a6))
            {
              if (*(float *)v105 < *a3 || (*(float *)v105 == *a3 ? (BOOL v64 = v63 >= *a4) : (BOOL v64 = 1), !v64))
              {
                *a3 = *(float *)v105;
                *a4 = v63;
              }
              char v22 = 1;
            }
            ++v61;
            v62 -= 4;
          }
          while (v62);
        }
        goto LABEL_184;
      }
      int v52 = (float32x4_t *)(v47 + (v50 << 6));
      float32x4_t v54 = v52[2];
      f32 = v52[2].f32;
      float32x4_t v55 = v54;
      uint64_t v56 = (float *)(v47 + (v49 << 6) + 32);
      *(_DWORD *)long long v105 = v50;
      *(void *)&v105[4] = 0x7F80000000000000;
      if (v99 == INFINITY)
      {
        if ((vmovn_s32(vcgtq_f32(v55, (float32x4_t)v101)).u8[0] & 1) != 0 || v101.n128_f32[0] > f32[4])
        {
          BOOL v69 = 0;
          *(_DWORD *)long long v104 = v49;
          *(void *)&v104[4] = 0x7F80000000000000;
          long long v70 = v56 + 4;
          float v57 = 0.0;
          goto LABEL_126;
        }
        float v57 = 0.0;
        float v58 = INFINITY;
      }
      else
      {
        float v65 = v99 * vsubq_f32(v55, (float32x4_t)v101).f32[0];
        float v58 = v99 * (float)(f32[4] - v101.n128_f32[0]);
        if (v58 >= v65) {
          float v66 = v65;
        }
        else {
          float v66 = v99 * (float)(f32[4] - v101.n128_f32[0]);
        }
        if (v58 < v65) {
          float v58 = v65;
        }
        if (v66 >= 0.0) {
          float v57 = v66;
        }
        else {
          float v57 = 0.0;
        }
        *(float *)&v105[4] = v57;
        *(float *)&v105[8] = v58;
        if (v57 > v58)
        {
          BOOL v69 = 0;
          *(_DWORD *)long long v104 = v49;
          long long v70 = v56 + 4;
LABEL_132:
          float v82 = v99 * (float)(*v56 - v101.n128_f32[0]);
          float v81 = v99 * (float)(v56[4] - v101.n128_f32[0]);
          if (v81 >= v82) {
            float v83 = v99 * (float)(*v56 - v101.n128_f32[0]);
          }
          else {
            float v83 = v99 * (float)(v56[4] - v101.n128_f32[0]);
          }
          if (v81 < v82) {
            float v81 = v99 * (float)(*v56 - v101.n128_f32[0]);
          }
          if (v83 >= 0.0) {
            float v80 = v83;
          }
          else {
            float v80 = 0.0;
          }
          *(float *)&v104[4] = v80;
          *(float *)&v104[8] = v81;
          if (v80 > v81) {
            goto LABEL_182;
          }
          goto LABEL_141;
        }
      }
      float v67 = f32[1];
      if (v28 == INFINITY)
      {
        if (v29 < v67 || v29 > f32[5]) {
          goto LABEL_111;
        }
      }
      else
      {
        float v71 = v28 * (float)(v67 - v29);
        float v72 = v28 * (float)(f32[5] - v29);
        if (v72 >= v71) {
          float v73 = v71;
        }
        else {
          float v73 = v28 * (float)(f32[5] - v29);
        }
        if (v72 >= v71) {
          float v71 = v28 * (float)(f32[5] - v29);
        }
        if (v73 >= v57) {
          float v57 = v73;
        }
        if (v58 >= v71) {
          float v58 = v71;
        }
        *(float *)&v105[4] = v57;
        *(float *)&v105[8] = v58;
        if (v57 > v58)
        {
LABEL_111:
          BOOL v69 = 0;
          goto LABEL_125;
        }
      }
      float v74 = f32[2];
      if (v34 == INFINITY)
      {
        if (v35 < v74 || v35 > f32[6]) {
          goto LABEL_111;
        }
      }
      else
      {
        float v76 = v34 * (float)(v74 - v35);
        float v77 = v34 * (float)(f32[6] - v35);
        if (v77 >= v76) {
          float v78 = v76;
        }
        else {
          float v78 = v34 * (float)(f32[6] - v35);
        }
        if (v77 >= v76) {
          float v76 = v34 * (float)(f32[6] - v35);
        }
        if (v78 >= v57) {
          float v57 = v78;
        }
        if (v58 >= v76) {
          float v58 = v76;
        }
        *(float *)&v105[4] = v57;
        *(float *)&v105[8] = v58;
        if (v57 > v58) {
          goto LABEL_111;
        }
      }
      BOOL v69 = v58 >= 0.0 || v57 >= 0.0;
LABEL_125:
      *(_DWORD *)long long v104 = v49;
      *(void *)&v104[4] = 0x7F80000000000000;
      long long v70 = v56 + 4;
      if (v99 != INFINITY) {
        goto LABEL_132;
      }
LABEL_126:
      if (v101.n128_f32[0] < *v56 || v101.n128_f32[0] > v56[4]) {
        goto LABEL_182;
      }
      float v80 = 0.0;
      float v81 = INFINITY;
LABEL_141:
      float v84 = v56[1];
      if (v28 == INFINITY)
      {
        if (v29 < v84 || v29 > v70[1]) {
          goto LABEL_182;
        }
      }
      else
      {
        float v86 = v28 * (float)(v84 - v29);
        float v87 = v28 * (float)(v70[1] - v29);
        if (v87 >= v86) {
          float v88 = v86;
        }
        else {
          float v88 = v28 * (float)(v70[1] - v29);
        }
        if (v87 >= v86) {
          float v86 = v28 * (float)(v70[1] - v29);
        }
        if (v88 >= v80) {
          float v80 = v88;
        }
        if (v81 >= v86) {
          float v81 = v86;
        }
        *(float *)&v104[4] = v80;
        *(float *)&v104[8] = v81;
        if (v80 > v81) {
          goto LABEL_182;
        }
      }
      float v89 = v56[2];
      if (v34 == INFINITY)
      {
        if (v35 >= v89 && v35 <= v70[2]) {
          goto LABEL_173;
        }
      }
      else
      {
        float v91 = v34 * (float)(v89 - v35);
        float v92 = v34 * (float)(v70[2] - v35);
        if (v92 >= v91) {
          float v93 = v91;
        }
        else {
          float v93 = v34 * (float)(v70[2] - v35);
        }
        if (v92 >= v91) {
          float v91 = v34 * (float)(v70[2] - v35);
        }
        if (v93 >= v80) {
          float v80 = v93;
        }
        if (v81 >= v91) {
          float v81 = v91;
        }
        *(float *)&v104[4] = v80;
        *(float *)&v104[8] = v81;
        if (v80 <= v81)
        {
LABEL_173:
          BOOL v94 = v80 >= 0.0;
          if (v81 >= 0.0) {
            BOOL v94 = 1;
          }
          BOOL v95 = v80 < v57 && v94;
          if (v95 && v69)
          {
            int v96 = *(_DWORD *)&v105[8];
            uint64_t v97 = *(void *)v105;
            *(void *)long long v105 = *(void *)v104;
            *(_DWORD *)&v105[8] = *(_DWORD *)&v104[8];
            *(void *)long long v104 = v97;
            *(_DWORD *)&v104[8] = v96;
          }
          else if (!v94)
          {
            if (!v69) {
              goto LABEL_184;
            }
LABEL_183:
            std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(v106, (uint64_t *)v105);
            goto LABEL_184;
          }
          std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::push_back(v106, (uint64_t *)v104);
        }
      }
LABEL_182:
      if (v69) {
        goto LABEL_183;
      }
LABEL_184:
      uint64_t v40 = *((void *)&v107 + 1);
      if (!*((void *)&v107 + 1)) {
        goto LABEL_189;
      }
    }
  }
LABEL_188:
  char v22 = 0;
LABEL_189:
  std::deque<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state,std::allocator<void geom::kd_tree<float,(unsigned char)2>::build<(geom_kd_tree_build_strategy)1>(void)::state>>::~deque[abi:nn180100](v106);
  return v22 & 1;
}

uint64_t std::function<BOOL ()(unsigned int,geom::ray<float,(unsigned char)3>,float &)>::operator()(uint64_t a1, int a2, uint64_t a3, __n128 a4, __n128 a5)
{
  v12[0] = a4;
  v12[1] = a5;
  int v11 = a2;
  uint64_t v5 = *(void *)(a1 + 24);
  if (v5) {
    return (*(uint64_t (**)(uint64_t, int *, _OWORD *, uint64_t))(*(void *)v5 + 48))(v5, &v11, v12, a3);
  }
  char v7 = std::__throw_bad_function_call[abi:nn180100]();
  return geom::bvh<float,(unsigned char)3>::find_all_intersections((uint64_t)v7, v8, v9, v10);
}

uint64_t geom::bvh<float,(unsigned char)3>::find_all_intersections(uint64_t result, uint64_t a2, uint64_t a3, int **a4)
{
  a4[1] = *a4;
  if (*(void *)(result + 16) != *(void *)(result + 8))
  {
    uint64_t v7 = result;
    long long v36 = 0u;
    memset(v35, 0, sizeof(v35));
    int v34 = 0;
    std::deque<unsigned int>::push_back(v35, &v34);
    for (uint64_t i = *((void *)&v36 + 1); *((void *)&v36 + 1); uint64_t i = *((void *)&v36 + 1))
    {
      uint64_t v9 = i - 1;
      uint64_t v10 = *(unsigned int *)(*(void *)(*((void *)&v35[0] + 1)
                                        + (((unint64_t)(v36 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * ((v36 + v9) & 0x3FF));
      uint64_t v11 = *(void *)(v7 + 8);
      *((void *)&v36 + 1) = v9;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v35, 1);
      uint64_t v12 = *(void *)(a3 + 24);
      if (!v12)
      {
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
        abort();
      }
      uint64_t v13 = v11 + (v10 << 6);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, v13 + 32))
      {
        int v15 = *(_DWORD *)(v13 + 4);
        float32x4_t v14 = (_DWORD *)(v13 + 4);
        if (v15 == -1 && (long long v16 = (_DWORD *)(v11 + (v10 << 6)), v16[2] == -1))
        {
          int v17 = v16[4];
          if (v17)
          {
            uint64_t v18 = v16[3];
            uint64_t v19 = *(void *)(v7 + 32);
            float v20 = (int *)(v19 + 4 * (v17 + v18));
            float v21 = (int *)(v19 + 4 * v18);
            do
            {
              int v22 = *v21;
              if (std::function<BOOL ()>::operator()(a2, *v21))
              {
                float v24 = a4[1];
                unint64_t v23 = (unint64_t)a4[2];
                if ((unint64_t)v24 >= v23)
                {
                  BOOL v26 = *a4;
                  uint64_t v27 = v24 - *a4;
                  unint64_t v28 = v27 + 1;
                  if ((unint64_t)(v27 + 1) >> 62) {
                    goto LABEL_35;
                  }
                  uint64_t v29 = v23 - (void)v26;
                  if (v29 >> 1 > v28) {
                    unint64_t v28 = v29 >> 1;
                  }
                  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v30 = v28;
                  }
                  if (v30)
                  {
                    float v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v30);
                    BOOL v26 = *a4;
                    float v24 = a4[1];
                  }
                  else
                  {
                    float v31 = 0;
                  }
                  float v32 = (int *)&v31[4 * v27];
                  *float v32 = v22;
                  float v25 = v32 + 1;
                  while (v24 != v26)
                  {
                    int v33 = *--v24;
                    *--float v32 = v33;
                  }
                  *a4 = v32;
                  a4[1] = v25;
                  a4[2] = (int *)&v31[4 * v30];
                  if (v26) {
                    operator delete(v26);
                  }
                }
                else
                {
                  *float v24 = v22;
                  float v25 = v24 + 1;
                }
                a4[1] = v25;
              }
              ++v21;
            }
            while (v21 != v20);
          }
        }
        else
        {
          std::deque<unsigned int>::push_back(v35, v14);
          std::deque<unsigned int>::push_back(v35, (_DWORD *)(v11 + (v10 << 6) + 8));
        }
      }
    }
    return std::deque<unsigned int>::~deque[abi:nn180100](v35);
  }
  return result;
}

unint64_t geom::bvh<float,(unsigned char)3>::partition_node_median(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v54[4] = *MEMORY[0x263EF8340];
  v54[0] = &unk_26EA06950;
  v54[1] = a1;
  v54[3] = v54;
  v53[0] = &unk_26EA06A50;
  v53[1] = a1;
  v53[2] = v54;
  v53[3] = v53;
  float32x4_t v45 = *(float32x4_t *)(a2 + 32);
  float32x4_t v46 = *(float32x4_t *)(a2 + 48);
  uint64_t v50 = 0;
  std::function<void ()(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)>::operator()((uint64_t)v53, a2, 0);
  float32x4_t v47 = vsubq_f32(v46, v45);
  LODWORD(v52[0]) = 0;
  int v49 = 0;
  std::function<void ()(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)>::operator()((uint64_t)v53, a2, 1);
  unsigned int v8 = 0;
  if (vmovn_s32(vcgtq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v47.f32, 1), v47)).u8[0])
  {
    uint64_t v50 = LODWORD(v52[0]) | 0x100000000;
    unsigned int v8 = 1;
  }
  LODWORD(v52[0]) = 0;
  int v49 = 0;
  std::function<void ()(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)>::operator()((uint64_t)v53, a2, 2);
  float32x4_t v48 = v47;
  if (v47.f32[2] > *(float *)((unint64_t)&v48 | (4 * v8))) {
    uint64_t v50 = LODWORD(v52[0]) | 0x200000000;
  }
  uint64_t v9 = operator new(0x20uLL);
  void *v9 = &unk_26EA06AE0;
  v9[1] = &v50;
  void v9[2] = (char *)&v50 + 4;
  v9[3] = a1;
  v52[3] = v9;
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = *(unsigned int *)(a2 + 12);
  uint64_t v12 = (int *)(v10 + 4 * v11);
  uint64_t v13 = (int *)(v10 + 4 * (*(_DWORD *)(a2 + 16) + v11));
  std::__function::__value_func<BOOL ()>::__value_func[abi:nn180100]((uint64_t)v51, (uint64_t)v52);
  float32x4_t v14 = std::__partition_impl[abi:nn180100]<std::function<BOOL ()> &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v12, v13, (uint64_t)v51);
  std::__function::__value_func<BOOL ()>::~__value_func[abi:nn180100](v51);
  uint64_t v15 = *(unsigned int *)(a2 + 12);
  long long v16 = (char *)(*(void *)(a1 + 32) + 4 * v15);
  unint64_t v17 = (unint64_t)((char *)v14 - v16) >> 2;
  float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  v19.i64[0] = 0x7F0000007FLL;
  v19.i32[2] = 127;
  float32x4_t v20 = v18;
  v21.i64[0] = 0x7F0000007FLL;
  v21.i32[2] = 127;
  if (v17)
  {
    uint64_t v22 = 4 * (v15 + v17) - 4 * v15;
    int32x4_t v23 = vdupq_n_s32(0x7F800000u);
    v24.i64[0] = 0x7F0000007FLL;
    v24.i64[1] = 0x7F0000007FLL;
    do
    {
      unsigned int v25 = *(_DWORD *)v16;
      v16 += 4;
      BOOL v26 = (float32x4_t *)(*(void *)(a1 + 80) + 32 * v25);
      float32x4_t v27 = (float32x4_t)v23;
      v27.i32[3] = 0;
      float32x4_t v28 = *v26;
      float32x4_t v29 = v26[1];
      v28.i32[3] = 0;
      float32x4_t v20 = vminnmq_f32(v27, v28);
      float32x4_t v30 = v24;
      v30.i32[3] = 0;
      v29.i32[3] = 0;
      v20.i32[3] = v23.i32[3];
      float32x4_t v21 = vmaxnmq_f32(v30, v29);
      v21.i32[3] = v24.i32[3];
      float32x4_t v24 = v21;
      int32x4_t v23 = (int32x4_t)v20;
      v22 -= 4;
    }
    while (v22);
  }
  *(_DWORD *)(a3 + 8) = v20.i32[2];
  *(void *)a3 = v20.i64[0];
  *(_DWORD *)(a3 + 24) = v21.i32[2];
  *(void *)(a3 + 16) = v21.i64[0];
  int v31 = *(_DWORD *)(a2 + 16);
  if (v31 != v17)
  {
    int v32 = *(_DWORD *)(a2 + 12);
    uint64_t v33 = (v31 + v32);
    int v34 = (unsigned int *)(*(void *)(a1 + 32) + 4 * (v32 + v17));
    uint64_t v35 = 4 * v33 - 4 * (v32 + v17);
    int32x4_t v36 = vdupq_n_s32(0x7F800000u);
    v37.i64[0] = 0x7F0000007FLL;
    v37.i64[1] = 0x7F0000007FLL;
    do
    {
      unsigned int v38 = *v34++;
      float v39 = (float32x4_t *)(*(void *)(a1 + 80) + 32 * v38);
      float32x4_t v40 = (float32x4_t)v36;
      v40.i32[3] = 0;
      float32x4_t v41 = *v39;
      float32x4_t v42 = v39[1];
      v41.i32[3] = 0;
      float32x4_t v18 = vminnmq_f32(v40, v41);
      float32x4_t v43 = v37;
      v43.i32[3] = 0;
      v42.i32[3] = 0;
      v18.i32[3] = v36.i32[3];
      float32x4_t v19 = vmaxnmq_f32(v43, v42);
      v19.i32[3] = v37.i32[3];
      float32x4_t v37 = v19;
      int32x4_t v36 = (int32x4_t)v18;
      v35 -= 4;
    }
    while (v35);
  }
  *(_DWORD *)(a4 + 8) = v18.i32[2];
  *(void *)a4 = v18.i64[0];
  *(_DWORD *)(a4 + 24) = v19.i32[2];
  *(void *)(a4 + 16) = v19.i64[0];
  std::__function::__value_func<BOOL ()>::~__value_func[abi:nn180100](v52);
  std::__function::__value_func<void ()(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)>::~__value_func[abi:nn180100](v53);
  std::__function::__value_func<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::~__value_func[abi:nn180100](v54);
  return v17;
}

unint64_t std::function<void ()(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  int v9 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v3 + 48))(v3, a2, &v9);
  }
  uint64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return geom::bvh<float,(unsigned char)3>::partition_node_middle(v5, v6, v7, v8);
}

unint64_t geom::bvh<float,(unsigned char)3>::partition_node_middle(void *a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  char v4 = 0;
  float32x4_t v5 = a2[2];
  float32x4_t v6 = a2[3];
  float32x4_t v7 = vsubq_f32(v6, v5);
  for (int i = 1; i != 3; ++i)
  {
    float32x4_t v54 = v7;
    if (*(float *)((unint64_t)&v54 & 0xFFFFFFFFFFFFFFF3 | (4 * (i & 3))) > *(float *)((unint64_t)&v54 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)))) {
      char v4 = i;
    }
  }
  float32x4_t v53 = v6;
  float v9 = *(float *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3)));
  float32x4_t v52 = v5;
  uint64_t v10 = a1[4];
  uint64_t v11 = a2->u32[3];
  __int32 v12 = a2[1].i32[0];
  uint64_t v13 = (char *)(v10 + 4 * v11);
  if (v12)
  {
    float v14 = (float)(*(float *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF3 | (4 * (v4 & 3))) + v9) * 0.5;
    uint64_t v15 = (char *)(v10 + 4 * (v12 + v11));
    uint64_t v16 = a1[7];
    uint64_t v17 = v4 & 3;
LABEL_7:
    while (1)
    {
      uint64_t v18 = *(unsigned int *)v13;
      if (*(float *)(v16 + 16 * v18 + 4 * v17) >= v14) {
        break;
      }
      v13 += 4;
      if (v13 == v15) {
        goto LABEL_15;
      }
    }
    while (1)
    {
      v15 -= 4;
      if (v15 == v13) {
        break;
      }
      uint64_t v19 = *(unsigned int *)v15;
      if (*(float *)(v16 + 16 * v19 + 4 * v17) < v14)
      {
        *(_DWORD *)uint64_t v13 = v19;
        v13 += 4;
        *(_DWORD *)uint64_t v15 = v18;
        if (v15 != v13) {
          goto LABEL_7;
        }
        goto LABEL_15;
      }
    }
  }
  uint64_t v15 = v13;
LABEL_15:
  uint64_t v20 = a2->u32[3];
  unsigned __int32 v21 = a2[1].u32[0];
  uint64_t v22 = (char *)(v10 + 4 * v20);
  unint64_t v23 = (unint64_t)(v15 - v22) >> 2;
  if (v21 == v23 || v23 == 0) {
    unint64_t v23 = v21 >> 1;
  }
  else {
    unint64_t v23 = v23;
  }
  float32x4_t v25 = (float32x4_t)vdupq_n_s32(0x7F800000u);
  v26.i64[0] = 0x7F0000007FLL;
  v26.i32[2] = 127;
  float32x4_t v27 = v25;
  v28.i64[0] = 0x7F0000007FLL;
  v28.i32[2] = 127;
  if (v23)
  {
    uint64_t v29 = 4 * (v23 + v20) - 4 * v20;
    int32x4_t v30 = vdupq_n_s32(0x7F800000u);
    v31.i64[0] = 0x7F0000007FLL;
    v31.i64[1] = 0x7F0000007FLL;
    do
    {
      unsigned int v32 = *(_DWORD *)v22;
      v22 += 4;
      uint64_t v33 = (float32x4_t *)(a1[10] + 32 * v32);
      float32x4_t v34 = (float32x4_t)v30;
      v34.i32[3] = 0;
      float32x4_t v35 = *v33;
      float32x4_t v36 = v33[1];
      v35.i32[3] = 0;
      float32x4_t v27 = vminnmq_f32(v34, v35);
      float32x4_t v37 = v31;
      v37.i32[3] = 0;
      v36.i32[3] = 0;
      v27.i32[3] = v30.i32[3];
      float32x4_t v28 = vmaxnmq_f32(v37, v36);
      v28.i32[3] = v31.i32[3];
      float32x4_t v31 = v28;
      int32x4_t v30 = (int32x4_t)v27;
      v29 -= 4;
    }
    while (v29);
  }
  *(_DWORD *)(a3 + 8) = v27.i32[2];
  *(void *)a3 = v27.i64[0];
  *(_DWORD *)(a3 + 24) = v28.i32[2];
  *(void *)(a3 + 16) = v28.i64[0];
  __int32 v38 = a2[1].i32[0];
  if (v38 != v23)
  {
    __int32 v39 = a2->i32[3];
    uint64_t v40 = (v38 + v39);
    float32x4_t v41 = (unsigned int *)(a1[4] + 4 * (v39 + v23));
    uint64_t v42 = 4 * v40 - 4 * (v39 + v23);
    int32x4_t v43 = vdupq_n_s32(0x7F800000u);
    v44.i64[0] = 0x7F0000007FLL;
    v44.i64[1] = 0x7F0000007FLL;
    do
    {
      unsigned int v45 = *v41++;
      float32x4_t v46 = (float32x4_t *)(a1[10] + 32 * v45);
      float32x4_t v47 = (float32x4_t)v43;
      v47.i32[3] = 0;
      float32x4_t v48 = *v46;
      float32x4_t v49 = v46[1];
      v48.i32[3] = 0;
      float32x4_t v25 = vminnmq_f32(v47, v48);
      float32x4_t v50 = v44;
      v50.i32[3] = 0;
      v49.i32[3] = 0;
      v25.i32[3] = v43.i32[3];
      float32x4_t v26 = vmaxnmq_f32(v50, v49);
      v26.i32[3] = v44.i32[3];
      float32x4_t v44 = v26;
      int32x4_t v43 = (int32x4_t)v25;
      v42 -= 4;
    }
    while (v42);
  }
  *(_DWORD *)(a4 + 8) = v25.i32[2];
  *(void *)a4 = v25.i64[0];
  *(_DWORD *)(a4 + 24) = v26.i32[2];
  *(void *)(a4 + 16) = v26.i64[0];
  return v23;
}

uint64_t geom::bvh<double,(unsigned char)3>::bvh(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v10[0] = a2;
  v10[1] = a3;
  v9[0] = a4;
  v9[1] = a5;
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  _ZN4geom19make_external_arrayINS_5sliceIDv3_dEEEENSt3__19enable_ifIXaa21collection_has_size_vIT_E21collection_has_data_vIS6_EENS_14external_arrayINS6_10value_typeEEEE4typeERKS6_b(v10, a6, a1 + 56);
  geom::make_external_array<geom::slice<geom::bbox<double,(unsigned char)3>>>(v9, a6, a1 + 80);
  return a1;
}

void *geom::make_external_array<geom::slice<geom::bbox<double,(unsigned char)3>>>@<X0>(void *result@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v3 = result[1];
  if (v3)
  {
    if (a2) {
      operator new[]();
    }
    *(void *)a3 = *result;
    *(void *)(a3 + 8) = v3;
  }
  else
  {
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
  }
  *(unsigned char *)(a3 + 16) = 0;
  return result;
}

uint64_t geom::bvh<double,(unsigned char)3>::bvh(uint64_t a1)
{
  return geom::bvh<double,(unsigned char)3>::bvh(a1, 0, 0, 0, 0, 0);
}

void *geom::bvh<double,(unsigned char)3>::reset(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6)
{
  v15[0] = a4;
  v15[1] = a5;
  *(unsigned char *)a1 = 0;
  if (!a3) {
    a2 = 0;
  }
  if (a3 && a6) {
    operator new[]();
  }
  if (*(unsigned char *)(a1 + 72))
  {
    uint64_t v10 = *(void *)(a1 + 56);
    if (v10) {
      MEMORY[0x237E10700](v10, 0x1000C80E0EAB150);
    }
  }
  *(void *)(a1 + 56) = a2;
  *(void *)(a1 + 64) = a3;
  *(unsigned char *)(a1 + 72) = 0;
  uint64_t result = geom::make_external_array<geom::slice<geom::bbox<double,(unsigned char)3>>>(v15, a6, (uint64_t)v13);
  if (*(unsigned char *)(a1 + 96))
  {
    uint64_t result = *(void **)(a1 + 80);
    if (result) {
      uint64_t result = (void *)MEMORY[0x237E10700](result, 0x1000C80FA0F61DDLL);
    }
  }
  uint64_t v12 = v13[1];
  *(void *)(a1 + 80) = v13[0];
  *(void *)(a1 + 88) = v12;
  *(unsigned char *)(a1 + 96) = v14;
  *(void *)(a1 + 40) = *(void *)(a1 + 32);
  *(void *)(a1 + 16) = *(void *)(a1 + 8);
  return result;
}

uint64_t geom::bvh<double,(unsigned char)3>::reset(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = result;
  *(unsigned char *)uint64_t result = 0;
  if (*(unsigned char *)(result + 72))
  {
    uint64_t result = *(void *)(result + 56);
    if (result) {
      uint64_t result = MEMORY[0x237E10700](result, 0x1000C80E0EAB150);
    }
  }
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)(v5 + 56) = *(void *)a2;
  *(void *)(v5 + 64) = v6;
  *(unsigned char *)(v5 + 72) = *(unsigned char *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  if (*(unsigned char *)(v5 + 96))
  {
    uint64_t result = *(void *)(v5 + 80);
    if (result) {
      uint64_t result = MEMORY[0x237E10700](result, 0x1000C80FA0F61DDLL);
    }
  }
  uint64_t v7 = *(void *)(a3 + 8);
  *(void *)(v5 + 80) = *(void *)a3;
  *(void *)(v5 + 88) = v7;
  *(unsigned char *)(v5 + 96) = *(unsigned char *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(unsigned char *)(a3 + 16) = 0;
  *(void *)(v5 + 40) = *(void *)(v5 + 32);
  *(void *)(v5 + 16) = *(void *)(v5 + 8);
  return result;
}

BOOL geom::bvh<double,(unsigned char)3>::iterator::is_leaf(_DWORD *a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 8);
  unsigned int v2 = a1[2];
  return *(_DWORD *)(v1 + 96 * v2 + 4) == -1 && *(_DWORD *)(v1 + 96 * v2 + 8) == -1;
}

uint64_t geom::bvh<double,(unsigned char)3>::nodes(uint64_t a1)
{
  return *(void *)(a1 + 8);
}

uint64_t geom::bvh<double,(unsigned char)3>::iterator::left(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t geom::bvh<double,(unsigned char)3>::iterator::right(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t geom::bvh<double,(unsigned char)3>::iterator::operator*(unsigned int *a1)
{
  return *(void *)(*(void *)a1 + 8) + 96 * a1[2];
}

uint64_t geom::bvh<double,(unsigned char)3>::iterator::bounds(unsigned int *a1)
{
  return *(void *)(*(void *)a1 + 8) + 96 * a1[2] + 32;
}

uint64_t geom::bvh<double,(unsigned char)3>::iterator::primitives(unsigned int *a1)
{
  return *(void *)(*(void *)a1 + 32)
       + 4 * *(unsigned int *)(*(void *)(*(void *)a1 + 8) + 96 * a1[2] + 12);
}

unsigned int *geom::bvh<double,(unsigned char)3>::iterator::operator++(unsigned int *result)
{
  uint64_t v1 = result[2];
  if (v1 != -1)
  {
    unint64_t v2 = v1 + 1;
    result[2] = v2;
    if (0xAAAAAAAAAAAAAAABLL
       * ((uint64_t)(*(void *)(*(void *)result + 16) - *(void *)(*(void *)result + 8)) >> 5) <= v2)
      result[2] = -1;
  }
  return result;
}

uint64_t geom::bvh<double,(unsigned char)3>::iterator::operator++(void *a1)
{
  uint64_t result = *a1;
  uint64_t v3 = a1[1];
  if (v3 != -1)
  {
    unint64_t v4 = (v3 + 1);
    *((_DWORD *)a1 + 2) = v4;
    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(result + 16) - *(void *)(result + 8)) >> 5) <= v4) {
      *((_DWORD *)a1 + 2) = -1;
    }
  }
  return result;
}

void *geom::bvh<double,(unsigned char)3>::build_middle_split(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v5, a2);
  v4[0] = &unk_26EA06B60;
  v4[1] = a1;
  v4[3] = v4;
  geom::bvh<double,(unsigned char)3>::build_top_down(a1, (uint64_t)v5, (uint64_t)v4);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v4);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v5);
}

void geom::bvh<double,(unsigned char)3>::build_top_down(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v117 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)a1)
  {
    *(void *)(a1 + 16) = *(void *)(a1 + 8);
    *(void *)(a1 + 40) = *(void *)(a1 + 32);
  }
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 32), *(void *)(a1 + 88));
  uint64_t v8 = *(char **)(a1 + 32);
  float v9 = *(char **)(a1 + 40);
  if (v8 != v9)
  {
    int v10 = 0;
    uint64_t v11 = *(char **)(a1 + 32);
    do
    {
      *(_DWORD *)uint64_t v11 = v10;
      v11 += 4;
      ++v10;
    }
    while (v11 != v9);
    if (*(void *)(a1 + 88))
    {
      uint64_t v12 = v9 - v8;
      uint64_t v13 = v12 >> 2;
      if (v12)
      {
        v6.f64[0] = INFINITY;
        v7.f64[0] = -INFINITY;
        float64x2_t v14 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
        uint64_t v15 = 4 * v13;
        float64x2_t v16 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
        do
        {
          unsigned int v17 = *(_DWORD *)v8;
          v8 += 4;
          unint64_t v18 = *(void *)(a1 + 80) + ((unint64_t)v17 << 6);
          float64x2_t v14 = vminnmq_f64(v14, *(float64x2_t *)v18);
          float64x2_t v6 = vminnmq_f64((float64x2_t)*(unint64_t *)&v6.f64[0], (float64x2_t)*(unint64_t *)(v18 + 16));
          float64x2_t v16 = vmaxnmq_f64(v16, *(float64x2_t *)(v18 + 32));
          float64x2_t v7 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v7.f64[0], (float64x2_t)*(unint64_t *)(v18 + 48));
          v15 -= 4;
        }
        while (v15);
      }
      else
      {
        v6.f64[0] = INFINITY;
        v7.f64[0] = -INFINITY;
        float64x2_t v14 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
        float64x2_t v16 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      }
      goto LABEL_15;
    }
LABEL_13:
    *(unsigned char *)a1 = 1;
    return;
  }
  if (!*(void *)(a1 + 88)) {
    goto LABEL_13;
  }
  float64x2_t v14 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  v6.f64[0] = INFINITY;
  float64x2_t v16 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  v7.f64[0] = -INFINITY;
  uint64_t v13 = (v9 - v8) >> 2;
LABEL_15:
  unint64_t v19 = *(void *)(a1 + 24);
  uint64_t v92 = a1 + 24;
  unint64_t v20 = *(void *)(a1 + 16);
  if (v20 >= v19)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    unint64_t v23 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v20 - v22) >> 5);
    unint64_t v24 = v23 + 1;
    if (v23 + 1 > 0x2AAAAAAAAAAAAAALL) {
      goto LABEL_74;
    }
    unint64_t v25 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v19 - v22) >> 5);
    if (2 * v25 > v24) {
      unint64_t v24 = 2 * v25;
    }
    if (v25 >= 0x155555555555555) {
      unint64_t v26 = 0x2AAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v26 = v24;
    }
    if (v26)
    {
      float64x2_t v95 = v7;
      float64x2_t v97 = v6;
      float64x2_t v93 = v16;
      float64x2_t v94 = v14;
      float32x4_t v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(v92, v26);
      float64x2_t v16 = v93;
      float64x2_t v14 = v94;
      float64x2_t v7 = v95;
      float64x2_t v6 = v97;
    }
    else
    {
      float32x4_t v27 = 0;
    }
    float32x4_t v28 = &v27[96 * v23];
    uint64_t v29 = &v27[96 * v26];
    *(_OWORD *)float32x4_t v28 = xmmword_236F196D0;
    *((_DWORD *)v28 + 4) = v13;
    *(void *)(v28 + 20) = v111;
    *((_DWORD *)v28 + 7) = DWORD2(v111);
    *((float64x2_t *)v28 + 2) = v14;
    *((float64x2_t *)v28 + 3) = v6;
    *((float64x2_t *)v28 + 4) = v16;
    *((float64x2_t *)v28 + 5) = v7;
    unsigned __int32 v21 = v28 + 96;
    float32x4_t v31 = *(char **)(a1 + 8);
    int32x4_t v30 = *(char **)(a1 + 16);
    if (v30 != v31)
    {
      do
      {
        long long v32 = *((_OWORD *)v30 - 5);
        *((_OWORD *)v28 - 6) = *((_OWORD *)v30 - 6);
        *((_OWORD *)v28 - 5) = v32;
        long long v33 = *((_OWORD *)v30 - 4);
        long long v34 = *((_OWORD *)v30 - 3);
        long long v35 = *((_OWORD *)v30 - 1);
        *((_OWORD *)v28 - 2) = *((_OWORD *)v30 - 2);
        *((_OWORD *)v28 - 1) = v35;
        *((_OWORD *)v28 - 4) = v33;
        *((_OWORD *)v28 - 3) = v34;
        v28 -= 96;
        v30 -= 96;
      }
      while (v30 != v31);
      int32x4_t v30 = *(char **)(a1 + 8);
    }
    *(void *)(a1 + 8) = v28;
    *(void *)(a1 + 16) = v21;
    *(void *)(a1 + 24) = v29;
    if (v30) {
      operator delete(v30);
    }
  }
  else
  {
    *(_OWORD *)unint64_t v20 = xmmword_236F196D0;
    *(_DWORD *)(v20 + 16) = v13;
    *(void *)(v20 + 20) = v111;
    *(_DWORD *)(v20 + 28) = DWORD2(v111);
    *(float64x2_t *)(v20 + 32) = v14;
    *(float64x2_t *)(v20 + 48) = v6;
    *(float64x2_t *)(v20 + 64) = v16;
    *(float64x2_t *)(v20 + 80) = v7;
    unsigned __int32 v21 = (char *)(v20 + 96);
  }
  *(void *)(a1 + 16) = v21;
  long long v108 = 0u;
  memset(v107, 0, sizeof(v107));
  LODWORD(v111) = 0;
  std::deque<unsigned int>::push_back(v107, &v111);
  uint64_t v36 = *((void *)&v108 + 1);
  if (*((void *)&v108 + 1))
  {
    int64x2_t v96 = vdupq_n_s64(0xFFF0000000000000);
    int64x2_t v98 = vdupq_n_s64(0x7FF0000000000000uLL);
    while (1)
    {
      uint64_t v37 = v36 - 1;
      unsigned int v38 = *(_DWORD *)(*(void *)(*((void *)&v107[0] + 1)
                                  + (((unint64_t)(v108 + v37) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v108 + v37) & 0x3FF));
      *((void *)&v108 + 1) = v37;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v107, 1);
      uint64_t v39 = *(void *)(a2 + 24);
      if (!v39) {
        break;
      }
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v39 + 48))(v39, *(void *)(a1 + 8) + 96 * v38) & 1) == 0)
      {
        uint64_t v40 = (long long *)(*(void *)(a1 + 8) + 96 * v38);
        long long v41 = v40[1];
        long long v111 = *v40;
        long long v112 = v41;
        long long v42 = v40[5];
        long long v44 = v40[2];
        long long v43 = v40[3];
        long long v115 = v40[4];
        *((void *)&v41 + 1) = *((void *)&v115 + 1);
        long long v116 = v42;
        long long v113 = v44;
        long long v114 = v43;
        *(void *)&long long v41 = 0x7FF0000000000000;
        int64x2_t v103 = v98;
        long long v104 = v41;
        *(void *)&long long v42 = 0xFFF0000000000000;
        int64x2_t v105 = v96;
        long long v106 = v42;
        int64x2_t v99 = v98;
        long long v100 = v41;
        int64x2_t v101 = v96;
        long long v102 = v42;
        uint64_t v45 = *(void *)(a3 + 24);
        if (!v45) {
          break;
        }
        int v46 = (*(uint64_t (**)(uint64_t, long long *, int64x2_t *, int64x2_t *))(*(void *)v45 + 48))(v45, &v111, &v103, &v99);
        if (v46)
        {
          int v47 = v46;
          int v48 = v112;
          if (v112 != v46)
          {
            uint64_t v49 = a3;
            int v50 = HIDWORD(v111);
            uint64_t v51 = *(void *)(a1 + 8);
            int v52 = -1431655765 * ((unint64_t)(*(void *)(a1 + 16) - v51) >> 5);
            *(_DWORD *)(v51 + 96 * v38 + 4) = v52;
            *(_DWORD *)double v110 = v52;
            std::deque<unsigned int>::push_back(v107, v110);
            uint64_t v54 = *(void *)(a1 + 8);
            unint64_t v53 = *(void *)(a1 + 16);
            uint64_t v55 = (uint64_t)(v53 - v54) / 96;
            int v56 = HIDWORD(v111);
            *(int64x2_t *)&v110[12] = v103;
            *(_OWORD *)&v110[28] = v104;
            *(int64x2_t *)&v110[44] = v105;
            *(_OWORD *)&v110[60] = v106;
            unint64_t v57 = *(void *)(a1 + 24);
            if (v53 >= v57)
            {
              unint64_t v59 = v55 + 1;
              if ((unint64_t)(v55 + 1) > 0x2AAAAAAAAAAAAAALL) {
                goto LABEL_74;
              }
              unint64_t v60 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57 - v54) >> 5);
              if (2 * v60 > v59) {
                unint64_t v59 = 2 * v60;
              }
              if (v60 >= 0x155555555555555) {
                unint64_t v61 = 0x2AAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v61 = v59;
              }
              if (v61) {
                uint64_t v62 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(v92, v61);
              }
              else {
                uint64_t v62 = 0;
              }
              unsigned int v63 = &v62[96 * v55];
              *(_DWORD *)unsigned int v63 = v55;
              *(void *)(v63 + 4) = -1;
              *((_DWORD *)v63 + 3) = v56;
              *((_DWORD *)v63 + 4) = v47;
              *(_OWORD *)(v63 + 20) = *(_OWORD *)v110;
              *((_OWORD *)v63 + 5) = *(_OWORD *)&v110[60];
              *(_OWORD *)(v63 + 68) = *(_OWORD *)&v110[48];
              *(_OWORD *)(v63 + 52) = *(_OWORD *)&v110[32];
              *(_OWORD *)(v63 + 36) = *(_OWORD *)&v110[16];
              float v65 = *(char **)(a1 + 8);
              BOOL v64 = *(char **)(a1 + 16);
              float v66 = v63;
              a3 = v49;
              if (v64 != v65)
              {
                do
                {
                  long long v67 = *((_OWORD *)v64 - 5);
                  *((_OWORD *)v66 - 6) = *((_OWORD *)v64 - 6);
                  *((_OWORD *)v66 - 5) = v67;
                  long long v68 = *((_OWORD *)v64 - 4);
                  long long v69 = *((_OWORD *)v64 - 3);
                  long long v70 = *((_OWORD *)v64 - 1);
                  *((_OWORD *)v66 - 2) = *((_OWORD *)v64 - 2);
                  *((_OWORD *)v66 - 1) = v70;
                  *((_OWORD *)v66 - 4) = v68;
                  *((_OWORD *)v66 - 3) = v69;
                  v66 -= 96;
                  v64 -= 96;
                }
                while (v64 != v65);
                BOOL v64 = *(char **)(a1 + 8);
              }
              float v58 = v63 + 96;
              *(void *)(a1 + 8) = v66;
              *(void *)(a1 + 16) = v63 + 96;
              *(void *)(a1 + 24) = &v62[96 * v61];
              if (v64) {
                operator delete(v64);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v53 = v55;
              *(void *)(v53 + 4) = -1;
              *(_DWORD *)(v53 + 12) = v56;
              *(_DWORD *)(v53 + 16) = v47;
              *(_OWORD *)(v53 + 36) = *(_OWORD *)&v110[16];
              *(_OWORD *)(v53 + 52) = *(_OWORD *)&v110[32];
              *(_OWORD *)(v53 + 68) = *(_OWORD *)&v110[48];
              *(_OWORD *)(v53 + 80) = *(_OWORD *)&v110[60];
              *(_OWORD *)(v53 + 20) = *(_OWORD *)v110;
              float v58 = (char *)(v53 + 96);
              a3 = v49;
            }
            int v71 = v50 + v47;
            int v72 = v48 + v50 - v71;
            *(void *)(a1 + 16) = v58;
            uint64_t v73 = *(void *)(a1 + 8);
            *(_DWORD *)(v73 + 96 * v38 + 8) = -1431655765 * ((unint64_t)&v58[-v73] >> 5);
            *(_DWORD *)float64x2_t v109 = -1431655765 * ((unint64_t)&v58[-v73] >> 5);
            std::deque<unsigned int>::push_back(v107, v109);
            uint64_t v75 = *(void *)(a1 + 8);
            unint64_t v74 = *(void *)(a1 + 16);
            uint64_t v76 = (uint64_t)(v74 - v75) / 96;
            *(int64x2_t *)&v109[12] = v99;
            *(_OWORD *)&v109[28] = v100;
            *(int64x2_t *)&v109[44] = v101;
            *(_OWORD *)&v109[60] = v102;
            unint64_t v77 = *(void *)(a1 + 24);
            if (v74 >= v77)
            {
              unint64_t v80 = v76 + 1;
              if ((unint64_t)(v76 + 1) > 0x2AAAAAAAAAAAAAALL) {
                goto LABEL_74;
              }
              unint64_t v81 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v77 - v75) >> 5);
              if (2 * v81 > v80) {
                unint64_t v80 = 2 * v81;
              }
              if (v81 >= 0x155555555555555) {
                unint64_t v82 = 0x2AAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v82 = v80;
              }
              if (v82) {
                float v83 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<simd_double3x3>>(v92, v82);
              }
              else {
                float v83 = 0;
              }
              float v84 = &v83[96 * v76];
              *(_DWORD *)float v84 = v76;
              *(void *)(v84 + 4) = -1;
              *((_DWORD *)v84 + 3) = v71;
              *((_DWORD *)v84 + 4) = v72;
              *(_OWORD *)(v84 + 20) = *(_OWORD *)v109;
              *((_OWORD *)v84 + 5) = *(_OWORD *)&v109[60];
              *(_OWORD *)(v84 + 68) = *(_OWORD *)&v109[48];
              *(_OWORD *)(v84 + 52) = *(_OWORD *)&v109[32];
              *(_OWORD *)(v84 + 36) = *(_OWORD *)&v109[16];
              float v86 = *(char **)(a1 + 8);
              float64x2_t v85 = *(char **)(a1 + 16);
              float v87 = v84;
              if (v85 != v86)
              {
                do
                {
                  long long v88 = *((_OWORD *)v85 - 5);
                  *((_OWORD *)v87 - 6) = *((_OWORD *)v85 - 6);
                  *((_OWORD *)v87 - 5) = v88;
                  long long v89 = *((_OWORD *)v85 - 4);
                  long long v90 = *((_OWORD *)v85 - 3);
                  long long v91 = *((_OWORD *)v85 - 1);
                  *((_OWORD *)v87 - 2) = *((_OWORD *)v85 - 2);
                  *((_OWORD *)v87 - 1) = v91;
                  *((_OWORD *)v87 - 4) = v89;
                  *((_OWORD *)v87 - 3) = v90;
                  v87 -= 96;
                  v85 -= 96;
                }
                while (v85 != v86);
                float64x2_t v85 = *(char **)(a1 + 8);
              }
              double v79 = v84 + 96;
              *(void *)(a1 + 8) = v87;
              *(void *)(a1 + 16) = v84 + 96;
              *(void *)(a1 + 24) = &v83[96 * v82];
              if (v85) {
                operator delete(v85);
              }
            }
            else
            {
              *(_DWORD *)unint64_t v74 = v76;
              *(void *)(v74 + 4) = -1;
              *(_DWORD *)(v74 + 12) = v71;
              *(_DWORD *)(v74 + 16) = v72;
              long long v78 = *(_OWORD *)v109;
              *(_OWORD *)(v74 + 36) = *(_OWORD *)&v109[16];
              *(_OWORD *)(v74 + 52) = *(_OWORD *)&v109[32];
              *(_OWORD *)(v74 + 68) = *(_OWORD *)&v109[48];
              *(_OWORD *)(v74 + 80) = *(_OWORD *)&v109[60];
              *(_OWORD *)(v74 + 20) = v78;
              double v79 = (char *)(v74 + 96);
            }
            *(void *)(a1 + 16) = v79;
          }
        }
      }
      uint64_t v36 = *((void *)&v108 + 1);
      if (!*((void *)&v108 + 1)) {
        goto LABEL_72;
      }
    }
    std::__throw_bad_function_call[abi:nn180100]();
LABEL_74:
    abort();
  }
LABEL_72:
  *(unsigned char *)a1 = 1;
  std::deque<unsigned int>::~deque[abi:nn180100](v107);
}

void *geom::bvh<double,(unsigned char)3>::build_median(uint64_t a1, uint64_t a2)
{
  v5[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v5, a2);
  v4[0] = &unk_26EA06BF0;
  v4[1] = a1;
  v4[3] = v4;
  geom::bvh<double,(unsigned char)3>::build_top_down(a1, (uint64_t)v5, (uint64_t)v4);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v4);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v5);
}

void *geom::bvh<double,(unsigned char)3>::build_surface_area_heuristic(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(a1, (uint64_t)v4, 8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v4);
}

void *geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(uint64_t a1, uint64_t a2, int a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26EA06C70;
  v5[1] = a1;
  v5[2] = &v7;
  *((_DWORD *)v5 + 6) = a3;
  v8[3] = v5;
  geom::bvh<double,(unsigned char)3>::build_top_down(a1, (uint64_t)v9, (uint64_t)v8);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v9);
}

void *geom::bvh<double,(unsigned char)3>::build_volume_heuristic(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(a1, (uint64_t)v4, 8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v4);
}

void *geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(uint64_t a1, uint64_t a2, int a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26EA06CF0;
  v5[1] = a1;
  v5[2] = &v7;
  *((_DWORD *)v5 + 6) = a3;
  v8[3] = v5;
  geom::bvh<double,(unsigned char)3>::build_top_down(a1, (uint64_t)v9, (uint64_t)v8);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v9);
}

void *geom::bvh<double,(unsigned char)3>::build_intersection_volume_heuristic(uint64_t a1, uint64_t a2)
{
  void v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v4, a2);
  geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(a1, (uint64_t)v4, 8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v4);
}

void *geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(uint64_t a1, uint64_t a2, int a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v9, a2);
  uint64_t v5 = operator new(0x20uLL);
  void *v5 = &unk_26EA06D70;
  v5[1] = a1;
  v5[2] = &v7;
  *((_DWORD *)v5 + 6) = a3;
  v8[3] = v5;
  geom::bvh<double,(unsigned char)3>::build_top_down(a1, (uint64_t)v9, (uint64_t)v8);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v8);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v9);
}

uint64_t geom::bvh<double,(unsigned char)3>::raycast(void *a1, uint64_t a2, long long *a3, double *a4, unsigned int *a5, double a6, __n128 a7)
{
  *a4 = INFINITY;
  *a5 = -1;
  if (a1[5] == a1[4] || (uint64_t v8 = a1[1], a1[2] == v8))
  {
    char v29 = 0;
    return v29 & 1;
  }
  int v13 = 0;
  int8x16_t v15 = (int8x16_t)a3[2];
  a7.n128_u64[0] = *((void *)a3 + 6);
  int8x16_t v14 = 0uLL;
  v15.i64[1] = vextq_s8(v15, v15, 8uLL).u64[0];
  long long v16 = 0uLL;
  do
  {
    v108[0] = v15;
    v108[1] = a7;
    double v17 = *((double *)v108 + (v13 & 3));
    double v18 = fabs(v17);
    double v19 = 1.0 / v17;
    if (v18 <= 1.0e-10) {
      double v19 = INFINITY;
    }
    int8x16_t v106 = v14;
    long long v107 = v16;
    *(double *)&v106.i64[v13 & 3] = v19;
    int8x16_t v14 = v106;
    *(void *)&long long v20 = v107;
    *((void *)&v20 + 1) = *((void *)&v16 + 1);
    ++v13;
    long long v16 = v20;
  }
  while (v13 != 3);
  long long v116 = 0u;
  memset(v115, 0, sizeof(v115));
  *(_DWORD *)long long v114 = 0;
  *(_OWORD *)&v114[8] = xmmword_236F196E0;
  if (*(double *)v106.i64 == INFINITY)
  {
    if (*(double *)a3 < *(double *)(v8 + 32) || *(double *)a3 > *(double *)(v8 + 64)) {
      goto LABEL_186;
    }
    long long v21 = a3[1];
    long long v22 = *(_OWORD *)(v8 + 48);
    long long v23 = *(_OWORD *)(v8 + 80);
    double v24 = *(double *)(v8 + 40);
    double v25 = *((double *)a3 + 1);
    double v26 = *(double *)(v8 + 72);
    double v27 = 0.0;
    double v28 = INFINITY;
  }
  else
  {
    long long v30 = *(_OWORD *)(v8 + 32);
    long long v22 = *(_OWORD *)(v8 + 48);
    long long v31 = *a3;
    long long v21 = a3[1];
    double v28 = *(double *)v106.i64 * (*(double *)&v30 - *(double *)a3);
    long long v32 = *(_OWORD *)(v8 + 64);
    long long v23 = *(_OWORD *)(v8 + 80);
    double v33 = *(double *)v106.i64 * (*(double *)&v32 - *(double *)a3);
    if (v33 >= v28) {
      double v34 = *(double *)v106.i64 * (*(double *)&v30 - *(double *)a3);
    }
    else {
      double v34 = *(double *)v106.i64 * (*(double *)&v32 - *(double *)a3);
    }
    if (v33 >= v28) {
      double v28 = *(double *)v106.i64 * (*(double *)&v32 - *(double *)a3);
    }
    double v27 = 0.0;
    if (v34 >= 0.0) {
      double v27 = v34;
    }
    *(double *)&v114[8] = v27;
    *(double *)&v114[16] = v28;
    if (v27 > v28) {
      goto LABEL_186;
    }
    double v26 = *((double *)&v32 + 1);
    double v25 = *((double *)&v31 + 1);
    double v24 = *((double *)&v30 + 1);
  }
  double v35 = *(double *)vextq_s8(v106, v106, 8uLL).i64;
  if (v35 == INFINITY)
  {
    if (v25 < v24 || v25 > v26) {
      goto LABEL_186;
    }
  }
  else
  {
    double v36 = v35 * (v24 - v25);
    double v37 = v35 * (v26 - v25);
    if (v37 >= v36) {
      double v38 = v36;
    }
    else {
      double v38 = v37;
    }
    if (v37 < v36) {
      double v37 = v36;
    }
    if (v38 >= v27) {
      double v27 = v38;
    }
    if (v28 >= v37) {
      double v28 = v37;
    }
    *(double *)&v114[8] = v27;
    *(double *)&v114[16] = v28;
    if (v27 > v28) {
      goto LABEL_186;
    }
  }
  if (*(double *)&v107 == INFINITY)
  {
    if (*(double *)&v21 < *(double *)&v22 || *(double *)&v21 > *(double *)&v23) {
      goto LABEL_186;
    }
  }
  else
  {
    double v39 = *(double *)&v107 * (*(double *)&v22 - *(double *)&v21);
    double v40 = *(double *)&v107 * (*(double *)&v23 - *(double *)&v21);
    if (v40 >= v39) {
      double v41 = v39;
    }
    else {
      double v41 = v40;
    }
    if (v40 < v39) {
      double v40 = v39;
    }
    if (v41 >= v27) {
      double v27 = v41;
    }
    if (v28 >= v40) {
      double v28 = v40;
    }
    *(double *)&v114[8] = v27;
    *(double *)&v114[16] = v28;
    if (v27 > v28) {
      goto LABEL_186;
    }
  }
  if (v27 >= 0.0 || v28 >= 0.0)
  {
    double v104 = v35;
    double v103 = *(double *)&v107;
    double v105 = *(double *)v106.i64;
    std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::push_back(v115, (__n128 *)v114);
    uint64_t v42 = *((void *)&v116 + 1);
    if (*((void *)&v116 + 1))
    {
      char v29 = 0;
      while (1)
      {
        uint64_t v43 = v42 - 1;
        unint64_t v44 = *(void *)(*((void *)&v115[0] + 1) + 8 * (((uint64_t)v116 + v43) / 0xAAuLL))
            + 24 * (((uint64_t)v116 + v43) % 0xAAuLL);
        unsigned int v45 = *(_DWORD *)v44;
        double v46 = *(double *)(v44 + 8);
        *((void *)&v116 + 1) = v43;
        std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::__maybe_remove_back_spare[abi:nn180100](v115, 1);
        if (*a4 < v46) {
          goto LABEL_182;
        }
        uint64_t v47 = a1[1];
        uint64_t v48 = v47 + 96 * v45;
        unsigned int v50 = *(_DWORD *)(v48 + 4);
        unsigned int v49 = *(_DWORD *)(v48 + 8);
        if (v50 == -1 && v49 == -1)
        {
          uint64_t v62 = v47 + 96 * v45;
          int v63 = *(_DWORD *)(v62 + 16);
          if (v63)
          {
            uint64_t v64 = *(unsigned int *)(v62 + 12);
            float v65 = (unsigned int *)(a1[4] + 4 * v64);
            uint64_t v66 = 4 * (v63 + v64) - 4 * v64;
            do
            {
              unsigned int v67 = *v65;
              *(void *)long long v114 = 0;
              long long v68 = a3[1];
              long long v110 = *a3;
              long long v111 = v68;
              long long v69 = a3[3];
              long long v112 = a3[2];
              long long v113 = v69;
              if (std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::operator()(a2, v67))
              {
                if (*(double *)v114 < *a4 || (*(double *)v114 == *a4 ? (BOOL v70 = v67 >= *a5) : (BOOL v70 = 1), !v70))
                {
                  *a4 = *(double *)v114;
                  *a5 = v67;
                }
                char v29 = 1;
              }
              ++v65;
              v66 -= 4;
            }
            while (v66);
          }
          goto LABEL_182;
        }
        int v52 = (double *)(v47 + 96 * v50 + 32);
        unint64_t v53 = (double *)(v47 + 96 * v49 + 32);
        *(_DWORD *)long long v114 = v50;
        *(_OWORD *)&v114[8] = xmmword_236F196E0;
        if (v105 == INFINITY)
        {
          long long v55 = *a3;
          long long v54 = a3[1];
          double v56 = *((double *)a3 + 1);
          if (*(double *)a3 < *v52 || *(double *)&v55 > v52[4])
          {
            BOOL v58 = 0;
            *(_DWORD *)float64x2_t v109 = v49;
            *(_OWORD *)&v109[8] = xmmword_236F196E0;
            unint64_t v59 = v53 + 4;
            double v60 = 0.0;
            double v61 = v104;
            goto LABEL_124;
          }
          double v60 = 0.0;
          double v74 = INFINITY;
        }
        else
        {
          long long v55 = *a3;
          long long v54 = a3[1];
          double v71 = v105 * (*v52 - *(double *)a3);
          double v72 = v105 * (v52[4] - *(double *)a3);
          if (v72 >= v71) {
            double v73 = v105 * (*v52 - *(double *)a3);
          }
          else {
            double v73 = v105 * (v52[4] - *(double *)a3);
          }
          if (v72 >= v71) {
            double v74 = v105 * (v52[4] - *(double *)a3);
          }
          else {
            double v74 = v105 * (*v52 - *(double *)a3);
          }
          if (v73 >= 0.0) {
            double v60 = v73;
          }
          else {
            double v60 = 0.0;
          }
          *(double *)&v114[8] = v60;
          *(double *)&v114[16] = v74;
          double v56 = *((double *)&v55 + 1);
          if (v60 > v74)
          {
            BOOL v58 = 0;
            *(_DWORD *)float64x2_t v109 = v49;
            unint64_t v59 = v53 + 4;
            double v61 = v104;
LABEL_130:
            double v86 = v105 * (*v53 - *(double *)&v55);
            double v87 = v105 * (v53[4] - *(double *)&v55);
            if (v87 >= v86) {
              double v88 = v86;
            }
            else {
              double v88 = v87;
            }
            if (v87 >= v86) {
              double v86 = v87;
            }
            if (v88 >= 0.0) {
              double v85 = v88;
            }
            else {
              double v85 = 0.0;
            }
            *(double *)&v109[8] = v85;
            *(double *)&v109[16] = v86;
            if (v85 > v86) {
              goto LABEL_180;
            }
            goto LABEL_139;
          }
        }
        double v61 = v104;
        double v75 = v52[1];
        if (v104 == INFINITY)
        {
          if (v56 < v75 || v56 > v52[5]) {
            goto LABEL_109;
          }
        }
        else
        {
          double v77 = v104 * (v75 - v56);
          double v78 = v104 * (v52[5] - v56);
          if (v78 >= v77) {
            double v79 = v77;
          }
          else {
            double v79 = v104 * (v52[5] - v56);
          }
          if (v78 >= v77) {
            double v77 = v104 * (v52[5] - v56);
          }
          if (v79 >= v60) {
            double v60 = v79;
          }
          if (v74 >= v77) {
            double v74 = v77;
          }
          *(double *)&v114[8] = v60;
          *(double *)&v114[16] = v74;
          if (v60 > v74)
          {
LABEL_109:
            BOOL v58 = 0;
            goto LABEL_123;
          }
        }
        if (v103 == INFINITY)
        {
          if (*(double *)&v54 < v52[2] || *(double *)&v54 > v52[6]) {
            goto LABEL_109;
          }
        }
        else
        {
          double v81 = v103 * (v52[2] - *(double *)&v54);
          double v82 = v103 * (v52[6] - *(double *)&v54);
          if (v82 >= v81) {
            double v83 = v103 * (v52[2] - *(double *)&v54);
          }
          else {
            double v83 = v103 * (v52[6] - *(double *)&v54);
          }
          if (v82 >= v81) {
            double v81 = v103 * (v52[6] - *(double *)&v54);
          }
          if (v83 >= v60) {
            double v60 = v83;
          }
          if (v74 >= v81) {
            double v74 = v81;
          }
          *(double *)&v114[8] = v60;
          *(double *)&v114[16] = v74;
          if (v60 > v74) {
            goto LABEL_109;
          }
        }
        BOOL v58 = v74 >= 0.0 || v60 >= 0.0;
LABEL_123:
        *(_DWORD *)float64x2_t v109 = v49;
        *(_OWORD *)&v109[8] = xmmword_236F196E0;
        unint64_t v59 = v53 + 4;
        if (v105 != INFINITY) {
          goto LABEL_130;
        }
LABEL_124:
        if (*(double *)&v55 < *v53 || *(double *)&v55 > v53[4]) {
          goto LABEL_180;
        }
        double v85 = 0.0;
        double v86 = INFINITY;
LABEL_139:
        double v89 = v53[1];
        if (v61 == INFINITY)
        {
          if (v56 < v89 || v56 > v59[1]) {
            goto LABEL_180;
          }
        }
        else
        {
          double v91 = v61 * (v89 - v56);
          double v92 = v61 * (v59[1] - v56);
          if (v92 >= v91) {
            double v93 = v91;
          }
          else {
            double v93 = v92;
          }
          if (v92 < v91) {
            double v92 = v91;
          }
          if (v93 >= v85) {
            double v85 = v93;
          }
          if (v86 >= v92) {
            double v86 = v92;
          }
          *(double *)&v109[8] = v85;
          *(double *)&v109[16] = v86;
          if (v85 > v86) {
            goto LABEL_180;
          }
        }
        if (v103 == INFINITY)
        {
          if (*(double *)&v54 >= v53[2] && *(double *)&v54 <= v53[6]) {
            goto LABEL_171;
          }
        }
        else
        {
          double v95 = v103 * (v53[2] - *(double *)&v54);
          double v96 = v103 * (v53[6] - *(double *)&v54);
          if (v96 >= v95) {
            double v97 = v95;
          }
          else {
            double v97 = v96;
          }
          if (v96 < v95) {
            double v96 = v95;
          }
          if (v97 >= v85) {
            double v85 = v97;
          }
          if (v86 >= v96) {
            double v86 = v96;
          }
          *(double *)&v109[8] = v85;
          *(double *)&v109[16] = v86;
          if (v85 <= v86)
          {
LABEL_171:
            BOOL v98 = v85 >= 0.0;
            if (v86 >= 0.0) {
              BOOL v98 = 1;
            }
            BOOL v99 = v85 < v60 && v98;
            if (v99 && v58)
            {
              uint64_t v100 = *(void *)&v114[16];
              long long v101 = *(_OWORD *)v114;
              *(_OWORD *)long long v114 = *(_OWORD *)v109;
              *(void *)&v114[16] = *(void *)&v109[16];
              *(_OWORD *)float64x2_t v109 = v101;
              *(void *)&v109[16] = v100;
            }
            else if (!v98)
            {
              if (!v58) {
                goto LABEL_182;
              }
LABEL_181:
              std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::push_back(v115, (__n128 *)v114);
              goto LABEL_182;
            }
            std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::push_back(v115, (__n128 *)v109);
          }
        }
LABEL_180:
        if (v58) {
          goto LABEL_181;
        }
LABEL_182:
        uint64_t v42 = *((void *)&v116 + 1);
        if (!*((void *)&v116 + 1)) {
          goto LABEL_187;
        }
      }
    }
  }
LABEL_186:
  char v29 = 0;
LABEL_187:
  std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::~deque[abi:nn180100](v115);
  return v29 & 1;
}

uint64_t std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)3>,double &)>::operator()(uint64_t a1, int a2)
{
  int v8 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v8);
  }
  unint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return geom::bvh<double,(unsigned char)3>::find_all_intersections((uint64_t)v4, v5, v6, v7);
}

uint64_t geom::bvh<double,(unsigned char)3>::find_all_intersections(uint64_t result, uint64_t a2, uint64_t a3, int **a4)
{
  a4[1] = *a4;
  if (*(void *)(result + 16) != *(void *)(result + 8))
  {
    uint64_t v7 = result;
    long long v36 = 0u;
    memset(v35, 0, sizeof(v35));
    int v34 = 0;
    std::deque<unsigned int>::push_back(v35, &v34);
    for (uint64_t i = *((void *)&v36 + 1); *((void *)&v36 + 1); uint64_t i = *((void *)&v36 + 1))
    {
      uint64_t v9 = i - 1;
      unsigned int v10 = *(_DWORD *)(*(void *)(*((void *)&v35[0] + 1)
                                  + (((unint64_t)(v36 + v9) >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * ((v36 + v9) & 0x3FF));
      uint64_t v11 = *(void *)(v7 + 8);
      *((void *)&v36 + 1) = v9;
      std::deque<unsigned int>::__maybe_remove_back_spare[abi:nn180100](v35, 1);
      uint64_t v12 = *(void *)(a3 + 24);
      if (!v12)
      {
        std::__throw_bad_function_call[abi:nn180100]();
LABEL_35:
        abort();
      }
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v12 + 48))(v12, v11 + 96 * v10 + 32))
      {
        uint64_t v13 = v11 + 96 * v10;
        int v15 = *(_DWORD *)(v13 + 4);
        int8x16_t v14 = (_DWORD *)(v13 + 4);
        if (v15 == -1 && *(_DWORD *)(v11 + 96 * v10 + 8) == -1)
        {
          uint64_t v16 = v11 + 96 * v10;
          int v17 = *(_DWORD *)(v16 + 16);
          if (v17)
          {
            uint64_t v18 = *(unsigned int *)(v16 + 12);
            uint64_t v19 = *(void *)(v7 + 32);
            long long v20 = (int *)(v19 + 4 * (v17 + v18));
            long long v21 = (int *)(v19 + 4 * v18);
            do
            {
              int v22 = *v21;
              if (std::function<BOOL ()>::operator()(a2, *v21))
              {
                double v24 = a4[1];
                unint64_t v23 = (unint64_t)a4[2];
                if ((unint64_t)v24 >= v23)
                {
                  double v26 = *a4;
                  uint64_t v27 = v24 - *a4;
                  unint64_t v28 = v27 + 1;
                  if ((unint64_t)(v27 + 1) >> 62) {
                    goto LABEL_35;
                  }
                  uint64_t v29 = v23 - (void)v26;
                  if (v29 >> 1 > v28) {
                    unint64_t v28 = v29 >> 1;
                  }
                  if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFFCLL) {
                    unint64_t v30 = 0x3FFFFFFFFFFFFFFFLL;
                  }
                  else {
                    unint64_t v30 = v28;
                  }
                  if (v30)
                  {
                    long long v31 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a4 + 2), v30);
                    double v26 = *a4;
                    double v24 = a4[1];
                  }
                  else
                  {
                    long long v31 = 0;
                  }
                  long long v32 = (int *)&v31[4 * v27];
                  *long long v32 = v22;
                  double v25 = v32 + 1;
                  while (v24 != v26)
                  {
                    int v33 = *--v24;
                    *--long long v32 = v33;
                  }
                  *a4 = v32;
                  a4[1] = v25;
                  a4[2] = (int *)&v31[4 * v30];
                  if (v26) {
                    operator delete(v26);
                  }
                }
                else
                {
                  *double v24 = v22;
                  double v25 = v24 + 1;
                }
                a4[1] = v25;
              }
              ++v21;
            }
            while (v21 != v20);
          }
        }
        else
        {
          std::deque<unsigned int>::push_back(v35, v14);
          std::deque<unsigned int>::push_back(v35, (_DWORD *)(v11 + 96 * v10 + 8));
        }
      }
    }
    return std::deque<unsigned int>::~deque[abi:nn180100](v35);
  }
  return result;
}

uint64_t geom::bvh<double,(unsigned char)3>::tree_statistics(uint64_t a1, unsigned int *a2, _DWORD *a3)
{
  long long v18 = 0u;
  memset(v17, 0, sizeof(v17));
  if (*(void *)(a1 + 16) == *(void *)(a1 + 8))
  {
    *a2 = 0;
    *a3 = 0;
  }
  else
  {
    unint64_t v16 = 0x100000000;
    std::deque<std::pair<unsigned int,unsigned int>>::push_back(v17, &v16);
    uint64_t v6 = *((void *)&v18 + 1);
    *a2 = 0;
    *a3 = 0;
    if (v6)
    {
      do
      {
        uint64_t v7 = v6 - 1;
        int v8 = (unsigned int *)(*(void *)(*((void *)&v17[0] + 1)
                                        + (((unint64_t)(v18 + v7) >> 6) & 0x3FFFFFFFFFFFFF8))
                            + 8 * ((v18 + v7) & 0x1FF));
        unsigned int v10 = *v8;
        unsigned int v9 = v8[1];
        *((void *)&v18 + 1) = v7;
        std::deque<std::pair<unsigned int,unsigned int>>::__maybe_remove_back_spare[abi:nn180100](v17, 1);
        uint64_t v11 = *(void *)(a1 + 8);
        unsigned int v12 = *a2;
        if (*a2 <= v9) {
          unsigned int v12 = v9;
        }
        *a2 = v12;
        *a3 += v9;
        uint64_t v13 = *(unsigned int *)(v11 + 96 * v10 + 4);
        if (v13 != -1)
        {
          unint64_t v16 = v13 | ((unint64_t)(v9 + 1) << 32);
          std::deque<std::pair<unsigned int,unsigned int>>::push_back(v17, &v16);
        }
        uint64_t v14 = *(unsigned int *)(v11 + 96 * v10 + 8);
        if (v14 != -1)
        {
          unint64_t v16 = v14 | ((unint64_t)(v9 + 1) << 32);
          std::deque<std::pair<unsigned int,unsigned int>>::push_back(v17, &v16);
        }
        uint64_t v6 = *((void *)&v18 + 1);
      }
      while (*((void *)&v18 + 1));
    }
  }
  return std::deque<std::pair<unsigned int,unsigned int>>::~deque[abi:nn180100](v17);
}

uint64_t geom::bvh<double,(unsigned char)3>::node_for_node_index(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 8) + 96 * a2;
}

uint64_t geom::bvh<double,(unsigned char)3>::primitives_for_node_index(uint64_t a1, unsigned int a2)
{
  return *(void *)(a1 + 32) + 4 * *(unsigned int *)(*(void *)(a1 + 8) + 96 * a2 + 12);
}

unint64_t geom::bvh<double,(unsigned char)3>::partition_node_median(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  void v51[4] = *MEMORY[0x263EF8340];
  v51[0] = &unk_26EA06DF0;
  v51[1] = a1;
  v51[3] = v51;
  v50[0] = &unk_26EA06EF0;
  v50[1] = a1;
  v50[2] = v51;
  v50[3] = v50;
  float64x2_t v38 = *(float64x2_t *)(a2 + 48);
  float64x2_t v39 = *(float64x2_t *)(a2 + 80);
  float64x2_t v40 = *(float64x2_t *)(a2 + 32);
  float64x2_t v41 = *(float64x2_t *)(a2 + 64);
  int v47 = 0;
  uint64_t v46 = 0;
  std::function<void ()(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)>::operator()((uint64_t)v50, a2, 0);
  int64x2_t v42 = (int64x2_t)vsubq_f64(v41, v40);
  v49[0] = 0;
  int v45 = 0;
  std::function<void ()(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)>::operator()((uint64_t)v50, a2, 1);
  unsigned int v8 = 0;
  int64x2_t v9 = vcgtq_f64((float64x2_t)vdupq_laneq_s64(v42, 1), (float64x2_t)v42);
  *(int32x2_t *)v9.i8 = vmovn_s64(v9);
  if (vmovn_s32((int32x4_t)v9).u8[0])
  {
    int v47 = 1;
    uint64_t v46 = v49[0];
    unsigned int v8 = 1;
  }
  v49[0] = 0;
  int v45 = 0;
  std::function<void ()(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)>::operator()((uint64_t)v50, a2, 2);
  int8x16_t v10 = (int8x16_t)v42;
  v10.i64[1] = vextq_s8(v10, v10, 8uLL).u64[0];
  int8x16_t v43 = v10;
  float64x2_t v44 = vsubq_f64(v39, v38);
  if (v44.f64[0] > *(double *)((unint64_t)&v43 | (8 * v8)))
  {
    int v47 = 2;
    uint64_t v46 = v49[0];
  }
  uint64_t v11 = operator new(0x20uLL);
  *uint64_t v11 = &unk_26EA06F80;
  v11[1] = &v46;
  _OWORD v11[2] = &v47;
  float32x4_t v11[3] = a1;
  v49[3] = v11;
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(unsigned int *)(a2 + 12);
  uint64_t v14 = (int *)(v12 + 4 * v13);
  int v15 = (int *)(v12 + 4 * (*(_DWORD *)(a2 + 16) + v13));
  std::__function::__value_func<BOOL ()>::__value_func[abi:nn180100]((uint64_t)v48, (uint64_t)v49);
  unint64_t v16 = std::__partition_impl[abi:nn180100]<std::function<BOOL ()> &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v14, v15, (uint64_t)v48);
  std::__function::__value_func<BOOL ()>::~__value_func[abi:nn180100](v48);
  uint64_t v19 = *(unsigned int *)(a2 + 12);
  long long v20 = (char *)(*(void *)(a1 + 32) + 4 * v19);
  unint64_t v21 = (unint64_t)((char *)v16 - v20) >> 2;
  float64x2_t v22 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  float64x2_t v23 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  if (v21)
  {
    v17.f64[0] = INFINITY;
    v18.f64[0] = -INFINITY;
    uint64_t v24 = 4 * (v19 + v21) - 4 * v19;
    float64x2_t v25 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v26 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    do
    {
      unsigned int v27 = *(_DWORD *)v20;
      v20 += 4;
      unint64_t v28 = *(void *)(a1 + 80) + ((unint64_t)v27 << 6);
      float64x2_t v25 = vminnmq_f64(v25, *(float64x2_t *)v28);
      float64x2_t v17 = vminnmq_f64((float64x2_t)*(unint64_t *)&v17.f64[0], (float64x2_t)*(unint64_t *)(v28 + 16));
      float64x2_t v26 = vmaxnmq_f64(v26, *(float64x2_t *)(v28 + 32));
      float64x2_t v18 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v18.f64[0], (float64x2_t)*(unint64_t *)(v28 + 48));
      v24 -= 4;
    }
    while (v24);
  }
  else
  {
    v17.f64[0] = INFINITY;
    v18.f64[0] = -INFINITY;
    float64x2_t v26 = v23;
    float64x2_t v25 = v22;
  }
  *a3 = v25;
  a3[1] = v17;
  a3[2] = v26;
  a3[3] = v18;
  int v29 = *(_DWORD *)(a2 + 16);
  if (v29 == v21)
  {
    v17.f64[0] = INFINITY;
    v18.f64[0] = -INFINITY;
  }
  else
  {
    int v30 = *(_DWORD *)(a2 + 12);
    uint64_t v31 = (v29 + v30);
    unsigned int v32 = v30 + v21;
    int v33 = (unsigned int *)(*(void *)(a1 + 32) + 4 * (v30 + v21));
    float64x2_t v22 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    v17.f64[0] = INFINITY;
    float64x2_t v23 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    v18.f64[0] = -INFINITY;
    uint64_t v34 = 4 * v31 - 4 * v32;
    do
    {
      unsigned int v35 = *v33++;
      unint64_t v36 = *(void *)(a1 + 80) + ((unint64_t)v35 << 6);
      float64x2_t v22 = vminnmq_f64(v22, *(float64x2_t *)v36);
      float64x2_t v17 = vminnmq_f64((float64x2_t)*(unint64_t *)&v17.f64[0], (float64x2_t)*(unint64_t *)(v36 + 16));
      float64x2_t v23 = vmaxnmq_f64(v23, *(float64x2_t *)(v36 + 32));
      float64x2_t v18 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v18.f64[0], (float64x2_t)*(unint64_t *)(v36 + 48));
      v34 -= 4;
    }
    while (v34);
  }
  *a4 = v22;
  a4[1] = v17;
  a4[2] = v23;
  a4[3] = v18;
  std::__function::__value_func<BOOL ()>::~__value_func[abi:nn180100](v49);
  std::__function::__value_func<void ()(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)>::~__value_func[abi:nn180100](v50);
  std::__function::__value_func<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::~__value_func[abi:nn180100](v51);
  return v21;
}

unint64_t std::function<void ()(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  int v9 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)v3 + 48))(v3, a2, &v9);
  }
  uint64_t v5 = std::__throw_bad_function_call[abi:nn180100]();
  return geom::bvh<double,(unsigned char)3>::partition_node_middle(v5, v6, v7, v8);
}

unint64_t geom::bvh<double,(unsigned char)3>::partition_node_middle(void *a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  char v4 = 0;
  float64x2_t v6 = *(float64x2_t *)(a2 + 64);
  float64x2_t v5 = *(float64x2_t *)(a2 + 80);
  float64x2_t v8 = *(float64x2_t *)(a2 + 32);
  float64x2_t v7 = *(float64x2_t *)(a2 + 48);
  int8x16_t v11 = (int8x16_t)vsubq_f64(v6, v8);
  float64x2_t v9 = vsubq_f64(v5, v7);
  int v10 = 1;
  v11.i64[1] = vextq_s8(v11, v11, 8uLL).u64[0];
  do
  {
    v52[0] = v11;
    v52[1] = v9;
    double v12 = *((double *)v52 + (v10 & 3));
    v51[0] = v11;
    v51[1] = v9;
    if (v12 > *((double *)v51 + (v4 & 3))) {
      char v4 = v10;
    }
    ++v10;
  }
  while (v10 != 3);
  v50[0] = v6;
  v50[1] = v5;
  double v13 = *((double *)v50 + (v4 & 3));
  v49[0] = v8;
  v49[1] = v7;
  uint64_t v14 = a1[4];
  uint64_t v15 = *(unsigned int *)(a2 + 12);
  int v16 = *(_DWORD *)(a2 + 16);
  float64x2_t v17 = (char *)(v14 + 4 * v15);
  if (v16)
  {
    double v18 = (*((double *)v49 + (v4 & 3)) + v13) * 0.5;
    uint64_t v19 = (char *)(v14 + 4 * (v16 + v15));
    uint64_t v20 = a1[7];
    uint64_t v21 = v4 & 3;
LABEL_7:
    while (1)
    {
      uint64_t v22 = *(unsigned int *)v17;
      float64x2_t v23 = (float64x2_t *)(v20 + 32 * v22);
      float64x2_t v5 = v23[1];
      v48[0] = *v23;
      v48[1] = v5;
      if (*((double *)v48 + v21) >= v18) {
        break;
      }
      v17 += 4;
      if (v17 == v19) {
        goto LABEL_15;
      }
    }
    while (1)
    {
      v19 -= 4;
      if (v19 == v17) {
        break;
      }
      uint64_t v24 = *(unsigned int *)v19;
      float64x2_t v25 = (float64x2_t *)(v20 + 32 * v24);
      float64x2_t v5 = v25[1];
      v47[0] = *v25;
      v47[1] = v5;
      if (*((double *)v47 + v21) < v18)
      {
        *(_DWORD *)float64x2_t v17 = v24;
        v17 += 4;
        *(_DWORD *)uint64_t v19 = v22;
        if (v19 != v17) {
          goto LABEL_7;
        }
        goto LABEL_15;
      }
    }
  }
  uint64_t v19 = v17;
LABEL_15:
  uint64_t v27 = *(unsigned int *)(a2 + 12);
  unsigned int v26 = *(_DWORD *)(a2 + 16);
  unint64_t v28 = (char *)(v14 + 4 * v27);
  unint64_t v29 = (unint64_t)(v19 - v28) >> 2;
  if (v26 == v29 || v29 == 0) {
    unint64_t v29 = v26 >> 1;
  }
  else {
    unint64_t v29 = v29;
  }
  float64x2_t v31 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  float64x2_t v32 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  if (v29)
  {
    v5.f64[0] = INFINITY;
    v6.f64[0] = -INFINITY;
    uint64_t v33 = 4 * (v29 + v27) - 4 * v27;
    float64x2_t v34 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v35 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    do
    {
      unsigned int v36 = *(_DWORD *)v28;
      v28 += 4;
      unint64_t v37 = a1[10] + ((unint64_t)v36 << 6);
      float64x2_t v34 = vminnmq_f64(v34, *(float64x2_t *)v37);
      float64x2_t v5 = vminnmq_f64((float64x2_t)*(unint64_t *)&v5.f64[0], (float64x2_t)*(unint64_t *)(v37 + 16));
      float64x2_t v35 = vmaxnmq_f64(v35, *(float64x2_t *)(v37 + 32));
      float64x2_t v6 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v6.f64[0], (float64x2_t)*(unint64_t *)(v37 + 48));
      v33 -= 4;
    }
    while (v33);
  }
  else
  {
    v5.f64[0] = INFINITY;
    v6.f64[0] = -INFINITY;
    float64x2_t v35 = v32;
    float64x2_t v34 = v31;
  }
  *a3 = v34;
  a3[1] = v5;
  a3[2] = v35;
  a3[3] = v6;
  int v38 = *(_DWORD *)(a2 + 16);
  if (v38 == v29)
  {
    v5.f64[0] = INFINITY;
    v6.f64[0] = -INFINITY;
  }
  else
  {
    int v39 = *(_DWORD *)(a2 + 12);
    uint64_t v40 = (v38 + v39);
    unsigned int v41 = v39 + v29;
    int64x2_t v42 = (unsigned int *)(a1[4] + 4 * (v39 + v29));
    float64x2_t v31 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    v5.f64[0] = INFINITY;
    float64x2_t v32 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    v6.f64[0] = -INFINITY;
    uint64_t v43 = 4 * v40 - 4 * v41;
    do
    {
      unsigned int v44 = *v42++;
      unint64_t v45 = a1[10] + ((unint64_t)v44 << 6);
      float64x2_t v31 = vminnmq_f64(v31, *(float64x2_t *)v45);
      float64x2_t v5 = vminnmq_f64((float64x2_t)*(unint64_t *)&v5.f64[0], (float64x2_t)*(unint64_t *)(v45 + 16));
      float64x2_t v32 = vmaxnmq_f64(v32, *(float64x2_t *)(v45 + 32));
      float64x2_t v6 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v6.f64[0], (float64x2_t)*(unint64_t *)(v45 + 48));
      v43 -= 4;
    }
    while (v43);
  }
  *a4 = v31;
  a4[1] = v5;
  a4[2] = v32;
  a4[3] = v6;
  return v29;
}

void *geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v10[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v10, a2);
  float64x2_t v7 = operator new(0x20uLL);
  *float64x2_t v7 = &unk_26EA07000;
  v7[1] = a1;
  v7[2] = a3;
  *((_DWORD *)v7 + 6) = a4;
  v9[3] = v7;
  geom::bvh<float,(unsigned char)2>::build_top_down(a1, (uint64_t)v10, (uint64_t)v9);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v9);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](v10);
}

void *geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v10[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v10, a2);
  float64x2_t v7 = operator new(0x20uLL);
  *float64x2_t v7 = &unk_26EA07080;
  v7[1] = a1;
  v7[2] = a3;
  *((_DWORD *)v7 + 6) = a4;
  v9[3] = v7;
  geom::bvh<double,(unsigned char)2>::build_top_down(a1, (uint64_t)v10, (uint64_t)v9);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v9);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](v10);
}

void *geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v10[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v10, a2);
  float64x2_t v7 = operator new(0x20uLL);
  *float64x2_t v7 = &unk_26EA07100;
  v7[1] = a1;
  v7[2] = a3;
  *((_DWORD *)v7 + 6) = a4;
  v9[3] = v7;
  geom::bvh<float,(unsigned char)3>::build_top_down(a1, (uint64_t)v10, (uint64_t)v9);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v9);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](v10);
}

void *geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  v10[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__value_func[abi:nn180100]((uint64_t)v10, a2);
  float64x2_t v7 = operator new(0x20uLL);
  *float64x2_t v7 = &unk_26EA07180;
  v7[1] = a1;
  v7[2] = a3;
  *((_DWORD *)v7 + 6) = a4;
  v9[3] = v7;
  geom::bvh<double,(unsigned char)3>::build_top_down(a1, (uint64_t)v10, (uint64_t)v9);
  std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v9);
  return std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](v10);
}

uint64_t std::deque<std::pair<unsigned int,unsigned int>>::~deque[abi:nn180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 256;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 512;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    float64x2_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned int *>::~__split_buffer((uint64_t)a1);
}

uint64_t std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::~deque[abi:nn180100](void *a1)
{
  uint64_t v2 = (void **)a1[1];
  uint64_t v3 = (void **)a1[2];
  a1[5] = 0;
  unint64_t v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = (void **)a1[2];
      uint64_t v2 = (void **)(a1[1] + 8);
      a1[1] = v2;
      unint64_t v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v5 = v4 >> 3;
  if (v5 == 1)
  {
    uint64_t v6 = 85;
  }
  else
  {
    if (v5 != 2) {
      goto LABEL_9;
    }
    uint64_t v6 = 170;
  }
  a1[4] = v6;
LABEL_9:
  while (v2 != v3)
  {
    float64x2_t v7 = *v2++;
    operator delete(v7);
  }
  return std::__split_buffer<unsigned int *>::~__split_buffer((uint64_t)a1);
}

void *_ZNKSt3__110__function12__value_funcIFDv3_djS2_EEclB8nn180100EOjOS2_@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2)
  {
    uint64_t result = (*(void *(**)(_OWORD *__return_ptr))(*(void *)v2 + 48))(v8);
    long long v5 = v8[1];
    *a2 = v8[0];
    a2[1] = v5;
  }
  else
  {
    uint64_t v6 = std::__throw_bad_function_call[abi:nn180100]();
    return (void *)std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__value_func[abi:nn180100]((uint64_t)v6, v7);
  }
  return result;
}

uint64_t std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<geom::bvh<float,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::~__func()
{
}

void *std::__function::__func<geom::bvh<float,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA05D60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA05D60;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::operator()(uint64_t a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4)
{
  return geom::bvh<float,(unsigned char)2>::partition_node_middle(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::target_type()
{
}

void *std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom::bvh<float,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::~__func()
{
}

void *std::__function::__func<geom::bvh<float,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26EA05DF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA05DF0;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  return geom::bvh<float,(unsigned char)2>::partition_node_median(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::target_type()
{
}

void std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26EA05E70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA05E70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  return geom::bvh<float,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), a2, a3, a4);
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::target_type()
{
}

uint64_t geom::bvh<float,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(void *a1, unsigned int a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5)
{
  unsigned int v118 = 0;
  float64x2_t v119 = 0;
  uint64_t v120 = 0;
  unint64_t v10 = a2;
  std::vector<geom::bbox<float,(unsigned char)2>>::resize((uint64_t)&v118, a2);
  long long v115 = 0;
  long long v116 = 0;
  uint64_t v117 = 0;
  std::vector<geom::bbox<float,(unsigned char)2>>::resize((uint64_t)&v115, v10);
  std::vector<int> __p = 0;
  long long v113 = 0;
  uint64_t v114 = 0;
  std::vector<geom::bbox<float,(unsigned char)2>>::resize((uint64_t)&__p, v10);
  memset(&v111, 0, sizeof(v111));
  std::vector<unsigned int>::resize(&v111, v10);
  memset(&v110, 0, sizeof(v110));
  std::vector<int>::size_type v11 = a2 - 1;
  std::vector<unsigned int>::resize(&v110, v11);
  uint64_t v14 = *(unsigned int *)(a3 + 12);
  unsigned int v13 = *(_DWORD *)(a3 + 16);
  uint64_t v15 = v13 + v14;
  int v16 = (unsigned int *)(a1[4] + 4 * v14);
  if (v13)
  {
    uint64_t v17 = 4 * v15 - 4 * v14;
    float32x2_t v18 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v19 = (float32x2_t)0x7F0000007FLL;
    uint64_t v20 = (unsigned int *)(a1[4] + 4 * v14);
    do
    {
      unsigned int v21 = *v20++;
      float32x2_t v22 = *(float32x2_t *)(a1[7] + 8 * v21);
      float32x2_t v18 = vminnm_f32(v18, v22);
      float32x2_t v19 = vmaxnm_f32(v19, v22);
      v17 -= 4;
    }
    while (v17);
  }
  else
  {
    float32x2_t v18 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v19 = (float32x2_t)0x7F0000007FLL;
  }
  float32x2_t v23 = vsub_f32(v19, v18);
  *(float *)v12.i32 = (float)a2;
  float32x2_t v24 = vdiv_f32(v23, (float32x2_t)vdup_lane_s32(v12, 0));
  if (sqrtf(vaddv_f32(vmul_f32(v24, v24))) <= 0.00001)
  {
    uint64_t v90 = v14 + (v13 >> 1);
    float32x2_t v91 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v92 = (float32x2_t)0x7F0000007FLL;
    float32x2_t v93 = v91;
    float32x2_t v94 = (float32x2_t)0x7F0000007FLL;
    if (v13 >= 2)
    {
      uint64_t v95 = 4 * v90 - 4 * v14;
      float32x2_t v93 = (float32x2_t)vdup_n_s32(0x7F800000u);
      do
      {
        unsigned int v96 = *v16++;
        double v97 = (float32x2_t *)(a1[10] + 16 * v96);
        float32x2_t v93 = vminnm_f32(v93, *v97);
        float32x2_t v94 = vmaxnm_f32(v94, v97[1]);
        v95 -= 4;
      }
      while (v95);
    }
    *a4 = v93;
    a4[1] = v94;
    if (v13 != v13 >> 1)
    {
      BOOL v98 = (unsigned int *)(a1[4] + 4 * v90);
      uint64_t v99 = 4 * v15 - 4 * v90;
      float32x2_t v91 = (float32x2_t)vdup_n_s32(0x7F800000u);
      float32x2_t v92 = (float32x2_t)0x7F0000007FLL;
      do
      {
        unsigned int v100 = *v98++;
        long long v101 = (float32x2_t *)(a1[10] + 16 * v100);
        float32x2_t v91 = vminnm_f32(v91, *v101);
        float32x2_t v92 = vmaxnm_f32(v92, v101[1]);
        v99 -= 4;
      }
      while (v99);
    }
    *a5 = v91;
    a5[1] = v92;
    uint64_t v25 = *(_DWORD *)(a3 + 16) >> 1;
  }
  else
  {
    uint64_t v25 = 0;
    int v26 = 0;
    uint64_t v27 = 1;
    int v28 = -1;
    float v29 = 3.4028e38;
    int32x2_t v30 = vdup_n_s32(0x7F800000u);
    char v31 = 1;
    do
    {
      char v32 = v31;
      float32x2_t v105 = v23;
      float v33 = *(float *)((unint64_t)&v105 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v26 & 1)));
      if (fabsf(v33) > 0.00001)
      {
        if ((char *)v111.__end_ - (char *)v111.__begin_ >= 1)
        {
          unsigned int v103 = v25;
          float64x2_t v34 = a4;
          float64x2_t v35 = a5;
          char v36 = v31;
          uint64_t v37 = a3;
          uint64_t v38 = v27;
          bzero(v111.__begin_, 4* (((unint64_t)((char *)v111.__end_ - (char *)v111.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v111.__end_ - (char *)v111.__begin_) > (std::vector<int>::pointer)3))+ 4);
          uint64_t v27 = v38;
          a3 = v37;
          char v32 = v36;
          a5 = v35;
          a4 = v34;
          uint64_t v25 = v103;
          *(float *)v12.i32 = (float)a2;
        }
        int v39 = v118;
        if ((char *)v119 - (char *)v118 >= 1)
        {
          unint64_t v40 = ((unint64_t)((char *)v119 - (char *)v118) >> 4) + 1;
          do
          {
            float32x2_t *v39 = (float32x2_t)v30;
            v39[1] = (float32x2_t)0x7F0000007FLL;
            v39 += 2;
            --v40;
          }
          while (v40 > 1);
        }
        int v41 = *(_DWORD *)(a3 + 16);
        if (v41)
        {
          uint64_t v42 = *(unsigned int *)(a3 + 12);
          uint64_t v43 = (v41 + v42);
          unsigned int v44 = (unsigned int *)(a1[4] + 4 * v42);
          float32x2_t v104 = v18;
          float v45 = *(float *)((unint64_t)&v104 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v26 & 1)));
          uint64_t v46 = 4 * v43 - 4 * v42;
          do
          {
            unsigned int v47 = *v44++;
            int v48 = (int)(float)((float)((float)(*(float *)(a1[7] + 8 * v47 + 4 * (v26 & 1)) - v45) / v33)
                             * *(float *)v12.i32);
            unsigned int v49 = (float32x2_t *)(a1[10] + 16 * v47);
            if (v48 == a2) {
              int v48 = v11;
            }
            v118[2 * v48] = vminnm_f32(*v49, v118[2 * v48]);
            v118[2 * v48 + 1] = vmaxnm_f32(v49[1], v118[2 * v48 + 1]);
            ++v111.__begin_[v48];
            v46 -= 4;
          }
          while (v46);
        }
        unsigned int v50 = v119;
        if (v118 != v119)
        {
          uint64_t v51 = (float32x2_t *)v115;
          float32x2_t v53 = *v118;
          float32x2_t v54 = v118[1];
          int v52 = v118 + 2;
          *(float32x2_t *)long long v115 = *v118;
          v51[1] = v54;
          if (v52 != v50)
          {
            long long v55 = v51 + 3;
            do
            {
              float32x2_t v56 = *v52;
              float32x2_t v57 = v52[1];
              v52 += 2;
              float32x2_t v53 = vminnm_f32(v53, v56);
              float32x2_t v54 = vmaxnm_f32(v54, v57);
              v55[-1] = v53;
              *long long v55 = v54;
              v55 += 2;
            }
            while (v52 != v50);
          }
        }
        BOOL v58 = v118;
        if (v119 != v118)
        {
          unint64_t v59 = v113;
          float32x2_t v61 = v119[-2];
          float32x2_t v62 = v119[-1];
          double v60 = v119 - 2;
          v113[-2] = v61;
          v59[-1] = v62;
          if (v60 != v58)
          {
            int v63 = v59 - 4;
            do
            {
              float32x2_t v64 = v60[-2];
              v60 -= 2;
              float32x2_t v61 = vminnm_f32(v61, v64);
              float32x2_t v62 = vmaxnm_f32(v62, v60[1]);
              *int v63 = v61;
              v63[1] = v62;
              v63 -= 2;
            }
            while (v60 != v58);
          }
        }
        std::vector<int>::pointer begin = v110.__begin_;
        int64_t v66 = (char *)v110.__end_ - (char *)v110.__begin_;
        if (v110.__end_ != v110.__begin_)
        {
          std::vector<int>::pointer v67 = v111.__begin_;
          int v68 = *v111.__begin_;
          *v110.__begin_ = *v111.__begin_;
          if (v66 != 4)
          {
            uint64_t v69 = v66 >> 2;
            BOOL v70 = v67 + 1;
            double v71 = begin + 1;
            uint64_t v72 = 4 * v69 - 4;
            do
            {
              int v73 = *v70++;
              v68 += v73;
              *v71++ = v68;
              v72 -= 4;
            }
            while (v72);
          }
        }
        if (v11)
        {
          uint64_t v74 = 0;
          double v75 = (float32x2_t *)v115;
          uint64_t v76 = (float32x2_t *)((char *)__p + 16);
          do
          {
            uint64_t v77 = begin[v74];
            float32x2_t v78 = v75[1];
            uint32x2_t v79 = (uint32x2_t)vcgt_f32(*v75, v78);
            float32x2_t v80 = vsub_f32(v78, *v75);
            float v81 = vaddv_f32(vmul_f32(v80, (float32x2_t)vrev64_s32((int32x2_t)v80)));
            if (vpmax_u32(v79, v79).i32[0] < 0) {
              float v81 = 0.0;
            }
            float32x2_t v82 = v76[1];
            uint32x2_t v83 = (uint32x2_t)vcgt_f32(*v76, v82);
            float32x2_t v84 = vsub_f32(v82, *v76);
            float v85 = vaddv_f32(vmul_f32(v84, (float32x2_t)vrev64_s32((int32x2_t)v84)));
            if (vpmax_u32(v83, v83).i32[0] < 0) {
              float v85 = 0.0;
            }
            float v86 = (float)(v85 * (float)(*(_DWORD *)(a3 + 16) - v77))
                + (float)((float)v77 * v81);
            if (v86 < v29)
            {
              *(_OWORD *)a4->f32 = *(_OWORD *)v75->f32;
              *(_OWORD *)a5->f32 = *(_OWORD *)v76->f32;
              int v28 = v26;
              uint64_t v25 = v77;
              uint64_t v27 = v74;
              float v29 = v86;
            }
            ++v74;
            v75 += 2;
            v76 += 2;
          }
          while (v11 != v74);
        }
      }
      char v31 = 0;
      int v26 = 1;
    }
    while ((v32 & 1) != 0);
    uint64_t v87 = a1[4];
    uint64_t v88 = *(unsigned int *)(a3 + 12);
    double v89 = (_DWORD *)(v87 + 4 * v88);
    LODWORD(v88) = *(_DWORD *)(a3 + 16) + v88;
    v106[0] = a1;
    v106[1] = v18;
    _OWORD v106[2] = v19;
    v106[3] = v23;
    int v107 = v27;
    int v108 = v28;
    unsigned int v109 = a2;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<float,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int,geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v89, (_DWORD *)(v87 + 4 * v88), v106);
  }
  if (v110.__begin_)
  {
    v110.__end_ = v110.__begin_;
    operator delete(v110.__begin_);
  }
  if (v111.__begin_)
  {
    v111.__end_ = v111.__begin_;
    operator delete(v111.__begin_);
  }
  if (__p)
  {
    long long v113 = (float32x2_t *)__p;
    operator delete(__p);
  }
  if (v115)
  {
    long long v116 = v115;
    operator delete(v115);
  }
  if (v118)
  {
    float64x2_t v119 = v118;
    operator delete(v118);
  }
  return v25;
}

void std::vector<geom::bbox<float,(unsigned char)2>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 4;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 16 * a2;
    }
  }
  else
  {
    std::vector<geom::bbox<float,(unsigned char)2>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<geom::bbox<float,(unsigned char)2>>::__append(void **a1, unint64_t a2)
{
  uint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  long long v5 = v6;
  uint64_t v7 = *(int32x2_t **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 4)
  {
    if (a2)
    {
      uint64_t v14 = &v7[2 * a2];
      int32x2_t v15 = vdup_n_s32(0x7F800000u);
      do
      {
        *uint64_t v7 = v15;
        v7[1] = (int32x2_t)0x7F0000007FLL;
        v7 += 2;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 4);
    if (v9 >> 60) {
      abort();
    }
    uint64_t v10 = v8 >> 4;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 3 > v9) {
      unint64_t v9 = v11 >> 3;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v12 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      unsigned int v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    }
    else {
      unsigned int v13 = 0;
    }
    int v16 = (int32x2_t *)&v13[16 * v10];
    uint64_t v17 = &v16[2 * a2];
    int32x2_t v18 = vdup_n_s32(0x7F800000u);
    float32x2_t v19 = v16;
    do
    {
      *float32x2_t v19 = v18;
      v19[1] = (int32x2_t)0x7F0000007FLL;
      v19 += 2;
    }
    while (v19 != v17);
    uint64_t v20 = &v13[16 * v12];
    float32x2_t v22 = (char *)*a1;
    unsigned int v21 = (char *)a1[1];
    if (v21 != *a1)
    {
      do
      {
        *(_OWORD *)v16[-2].i8 = *((_OWORD *)v21 - 1);
        v16 -= 2;
        v21 -= 16;
      }
      while (v21 != v22);
      unsigned int v21 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v17;
    a1[2] = v20;
    if (v21)
    {
      operator delete(v21);
    }
  }
}

_DWORD *std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<float,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int,geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (result != a2)
  {
    uint64_t v3 = *(void *)(*(void *)a3 + 56);
    uint64_t v4 = a2;
    while (2)
    {
      unsigned int v5 = a3[8];
      int v6 = a3[9];
      uint64_t v7 = (float *)&a3[v6 & 1];
      float v8 = v7[2];
      float v9 = v7[6];
      unsigned int v10 = a3[10];
      float v11 = (float)v10;
      unint64_t v12 = result;
      while (1)
      {
        uint64_t v13 = *v12;
        unsigned int v14 = (int)(float)((float)((float)(*(float *)(v3 + 8 * v13 + 4 * (v6 & 1)) - v8) / v9) * v11);
        if (v10 == v14) {
          unsigned int v14 = v10 - 1;
        }
        if (v14 > v5) {
          break;
        }
        if (++v12 == v4) {
          return v4;
        }
      }
      do
      {
        if (--v4 == v12) {
          return v12;
        }
        uint64_t v15 = *v4;
        unsigned int v16 = (int)(float)((float)((float)(*(float *)(v3 + 8 * v15 + 4 * (v6 & 1)) - v8) / v9) * v11);
        if (v10 == v16) {
          unsigned int v16 = v10 - 1;
        }
      }
      while (v16 > v5);
      *unint64_t v12 = v15;
      __n128 result = v12 + 1;
      _DWORD *v4 = v13;
      if (v4 != v12 + 1) {
        continue;
      }
      break;
    }
    return v12 + 1;
  }
  return result;
}

void std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26EA05EF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA05EF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  return geom::bvh<float,(unsigned char)2>::partition_node_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), a2, a3, a4);
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::target_type()
{
}

uint64_t geom::bvh<float,(unsigned char)2>::partition_node_heuristic<geom::volume_heuristic_functor<float,(unsigned char)2>>(void *a1, unsigned int a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5)
{
  unsigned int v118 = 0;
  float64x2_t v119 = 0;
  uint64_t v120 = 0;
  unint64_t v10 = a2;
  std::vector<geom::bbox<float,(unsigned char)2>>::resize((uint64_t)&v118, a2);
  long long v115 = 0;
  long long v116 = 0;
  uint64_t v117 = 0;
  std::vector<geom::bbox<float,(unsigned char)2>>::resize((uint64_t)&v115, v10);
  std::vector<int> __p = 0;
  long long v113 = 0;
  uint64_t v114 = 0;
  std::vector<geom::bbox<float,(unsigned char)2>>::resize((uint64_t)&__p, v10);
  memset(&v111, 0, sizeof(v111));
  std::vector<unsigned int>::resize(&v111, v10);
  memset(&v110, 0, sizeof(v110));
  std::vector<int>::size_type v11 = a2 - 1;
  std::vector<unsigned int>::resize(&v110, v11);
  uint64_t v14 = *(unsigned int *)(a3 + 12);
  unsigned int v13 = *(_DWORD *)(a3 + 16);
  uint64_t v15 = v13 + v14;
  unsigned int v16 = (unsigned int *)(a1[4] + 4 * v14);
  if (v13)
  {
    uint64_t v17 = 4 * v15 - 4 * v14;
    float32x2_t v18 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v19 = (float32x2_t)0x7F0000007FLL;
    uint64_t v20 = (unsigned int *)(a1[4] + 4 * v14);
    do
    {
      unsigned int v21 = *v20++;
      float32x2_t v22 = *(float32x2_t *)(a1[7] + 8 * v21);
      float32x2_t v18 = vminnm_f32(v18, v22);
      float32x2_t v19 = vmaxnm_f32(v19, v22);
      v17 -= 4;
    }
    while (v17);
  }
  else
  {
    float32x2_t v18 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v19 = (float32x2_t)0x7F0000007FLL;
  }
  float32x2_t v23 = vsub_f32(v19, v18);
  *(float *)v12.i32 = (float)a2;
  float32x2_t v24 = vdiv_f32(v23, (float32x2_t)vdup_lane_s32(v12, 0));
  if (sqrtf(vaddv_f32(vmul_f32(v24, v24))) <= 0.00001)
  {
    uint64_t v90 = v14 + (v13 >> 1);
    float32x2_t v91 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v92 = (float32x2_t)0x7F0000007FLL;
    float32x2_t v93 = v91;
    float32x2_t v94 = (float32x2_t)0x7F0000007FLL;
    if (v13 >= 2)
    {
      uint64_t v95 = 4 * v90 - 4 * v14;
      float32x2_t v93 = (float32x2_t)vdup_n_s32(0x7F800000u);
      do
      {
        unsigned int v96 = *v16++;
        double v97 = (float32x2_t *)(a1[10] + 16 * v96);
        float32x2_t v93 = vminnm_f32(v93, *v97);
        float32x2_t v94 = vmaxnm_f32(v94, v97[1]);
        v95 -= 4;
      }
      while (v95);
    }
    *a4 = v93;
    a4[1] = v94;
    if (v13 != v13 >> 1)
    {
      BOOL v98 = (unsigned int *)(a1[4] + 4 * v90);
      uint64_t v99 = 4 * v15 - 4 * v90;
      float32x2_t v91 = (float32x2_t)vdup_n_s32(0x7F800000u);
      float32x2_t v92 = (float32x2_t)0x7F0000007FLL;
      do
      {
        unsigned int v100 = *v98++;
        long long v101 = (float32x2_t *)(a1[10] + 16 * v100);
        float32x2_t v91 = vminnm_f32(v91, *v101);
        float32x2_t v92 = vmaxnm_f32(v92, v101[1]);
        v99 -= 4;
      }
      while (v99);
    }
    *a5 = v91;
    a5[1] = v92;
    uint64_t v25 = *(_DWORD *)(a3 + 16) >> 1;
  }
  else
  {
    uint64_t v25 = 0;
    int v26 = 0;
    uint64_t v27 = 1;
    int v28 = -1;
    float v29 = 3.4028e38;
    int32x2_t v30 = vdup_n_s32(0x7F800000u);
    char v31 = 1;
    do
    {
      char v32 = v31;
      float32x2_t v105 = v23;
      float v33 = *(float *)((unint64_t)&v105 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v26 & 1)));
      if (fabsf(v33) > 0.00001)
      {
        if ((char *)v111.__end_ - (char *)v111.__begin_ >= 1)
        {
          unsigned int v103 = v25;
          float64x2_t v34 = a4;
          float64x2_t v35 = a5;
          char v36 = v31;
          uint64_t v37 = a3;
          uint64_t v38 = v27;
          bzero(v111.__begin_, 4* (((unint64_t)((char *)v111.__end_ - (char *)v111.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v111.__end_ - (char *)v111.__begin_) > (std::vector<int>::pointer)3))+ 4);
          uint64_t v27 = v38;
          a3 = v37;
          char v32 = v36;
          a5 = v35;
          a4 = v34;
          uint64_t v25 = v103;
          *(float *)v12.i32 = (float)a2;
        }
        int v39 = v118;
        if ((char *)v119 - (char *)v118 >= 1)
        {
          unint64_t v40 = ((unint64_t)((char *)v119 - (char *)v118) >> 4) + 1;
          do
          {
            float32x2_t *v39 = (float32x2_t)v30;
            v39[1] = (float32x2_t)0x7F0000007FLL;
            v39 += 2;
            --v40;
          }
          while (v40 > 1);
        }
        int v41 = *(_DWORD *)(a3 + 16);
        if (v41)
        {
          uint64_t v42 = *(unsigned int *)(a3 + 12);
          uint64_t v43 = (v41 + v42);
          unsigned int v44 = (unsigned int *)(a1[4] + 4 * v42);
          float32x2_t v104 = v18;
          float v45 = *(float *)((unint64_t)&v104 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v26 & 1)));
          uint64_t v46 = 4 * v43 - 4 * v42;
          do
          {
            unsigned int v47 = *v44++;
            int v48 = (int)(float)((float)((float)(*(float *)(a1[7] + 8 * v47 + 4 * (v26 & 1)) - v45) / v33)
                             * *(float *)v12.i32);
            unsigned int v49 = (float32x2_t *)(a1[10] + 16 * v47);
            if (v48 == a2) {
              int v48 = v11;
            }
            v118[2 * v48] = vminnm_f32(*v49, v118[2 * v48]);
            v118[2 * v48 + 1] = vmaxnm_f32(v49[1], v118[2 * v48 + 1]);
            ++v111.__begin_[v48];
            v46 -= 4;
          }
          while (v46);
        }
        unsigned int v50 = v119;
        if (v118 != v119)
        {
          uint64_t v51 = (float32x2_t *)v115;
          float32x2_t v53 = *v118;
          float32x2_t v54 = v118[1];
          int v52 = v118 + 2;
          *(float32x2_t *)long long v115 = *v118;
          v51[1] = v54;
          if (v52 != v50)
          {
            long long v55 = v51 + 3;
            do
            {
              float32x2_t v56 = *v52;
              float32x2_t v57 = v52[1];
              v52 += 2;
              float32x2_t v53 = vminnm_f32(v53, v56);
              float32x2_t v54 = vmaxnm_f32(v54, v57);
              v55[-1] = v53;
              *long long v55 = v54;
              v55 += 2;
            }
            while (v52 != v50);
          }
        }
        BOOL v58 = v118;
        if (v119 != v118)
        {
          unint64_t v59 = v113;
          float32x2_t v61 = v119[-2];
          float32x2_t v62 = v119[-1];
          double v60 = v119 - 2;
          v113[-2] = v61;
          v59[-1] = v62;
          if (v60 != v58)
          {
            int v63 = v59 - 4;
            do
            {
              float32x2_t v64 = v60[-2];
              v60 -= 2;
              float32x2_t v61 = vminnm_f32(v61, v64);
              float32x2_t v62 = vmaxnm_f32(v62, v60[1]);
              *int v63 = v61;
              v63[1] = v62;
              v63 -= 2;
            }
            while (v60 != v58);
          }
        }
        std::vector<int>::pointer begin = v110.__begin_;
        int64_t v66 = (char *)v110.__end_ - (char *)v110.__begin_;
        if (v110.__end_ != v110.__begin_)
        {
          std::vector<int>::pointer v67 = v111.__begin_;
          int v68 = *v111.__begin_;
          *v110.__begin_ = *v111.__begin_;
          if (v66 != 4)
          {
            uint64_t v69 = v66 >> 2;
            BOOL v70 = v67 + 1;
            double v71 = begin + 1;
            uint64_t v72 = 4 * v69 - 4;
            do
            {
              int v73 = *v70++;
              v68 += v73;
              *v71++ = v68;
              v72 -= 4;
            }
            while (v72);
          }
        }
        if (v11)
        {
          uint64_t v74 = 0;
          double v75 = (float32x2_t *)v115;
          uint64_t v76 = (float32x2_t *)((char *)__p + 16);
          do
          {
            uint64_t v77 = begin[v74];
            float32x2_t v78 = v75[1];
            uint32x2_t v79 = (uint32x2_t)vcgt_f32(*v75, v78);
            float32x2_t v80 = vsub_f32(v78, *v75);
            LODWORD(v81) = vmul_lane_f32(v80, v80, 1).u32[0];
            if (vpmax_u32(v79, v79).i32[0] < 0) {
              float v81 = 0.0;
            }
            float32x2_t v82 = v76[1];
            uint32x2_t v83 = (uint32x2_t)vcgt_f32(*v76, v82);
            float32x2_t v84 = vsub_f32(v82, *v76);
            LODWORD(v85) = vmul_lane_f32(v84, v84, 1).u32[0];
            if (vpmax_u32(v83, v83).i32[0] < 0) {
              float v85 = 0.0;
            }
            float v86 = (float)(v85 * (float)(*(_DWORD *)(a3 + 16) - v77))
                + (float)((float)v77 * v81);
            if (v86 < v29)
            {
              *(_OWORD *)a4->f32 = *(_OWORD *)v75->f32;
              *(_OWORD *)a5->f32 = *(_OWORD *)v76->f32;
              int v28 = v26;
              uint64_t v25 = v77;
              uint64_t v27 = v74;
              float v29 = v86;
            }
            ++v74;
            v75 += 2;
            v76 += 2;
          }
          while (v11 != v74);
        }
      }
      char v31 = 0;
      int v26 = 1;
    }
    while ((v32 & 1) != 0);
    uint64_t v87 = a1[4];
    uint64_t v88 = *(unsigned int *)(a3 + 12);
    double v89 = (_DWORD *)(v87 + 4 * v88);
    LODWORD(v88) = *(_DWORD *)(a3 + 16) + v88;
    v106[0] = a1;
    v106[1] = v18;
    _OWORD v106[2] = v19;
    v106[3] = v23;
    int v107 = v27;
    int v108 = v28;
    unsigned int v109 = a2;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<float,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int,geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v89, (_DWORD *)(v87 + 4 * v88), v106);
  }
  if (v110.__begin_)
  {
    v110.__end_ = v110.__begin_;
    operator delete(v110.__begin_);
  }
  if (v111.__begin_)
  {
    v111.__end_ = v111.__begin_;
    operator delete(v111.__begin_);
  }
  if (__p)
  {
    long long v113 = (float32x2_t *)__p;
    operator delete(__p);
  }
  if (v115)
  {
    long long v116 = v115;
    operator delete(v115);
  }
  if (v118)
  {
    float64x2_t v119 = v118;
    operator delete(v118);
  }
  return v25;
}

void std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26EA05F70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA05F70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  return geom::bvh<float,(unsigned char)2>::partition_node_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), a2, a3, a4);
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)>::target_type()
{
}

uint64_t geom::bvh<float,(unsigned char)2>::partition_node_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)2>>(void *a1, unsigned int a2, uint64_t a3, float32x2_t *a4, float32x2_t *a5)
{
  uint64_t v114 = 0;
  long long v115 = 0;
  uint64_t v116 = 0;
  unint64_t v10 = a2;
  std::vector<geom::bbox<float,(unsigned char)2>>::resize((uint64_t)&v114, a2);
  std::vector<int> v111 = 0;
  long long v112 = 0;
  uint64_t v113 = 0;
  std::vector<geom::bbox<float,(unsigned char)2>>::resize((uint64_t)&v111, v10);
  std::vector<int> __p = 0;
  unsigned int v109 = 0;
  uint64_t v110 = 0;
  std::vector<geom::bbox<float,(unsigned char)2>>::resize((uint64_t)&__p, v10);
  memset(&v107, 0, sizeof(v107));
  std::vector<unsigned int>::resize(&v107, v10);
  memset(&v106, 0, sizeof(v106));
  std::vector<int>::size_type v11 = a2 - 1;
  std::vector<unsigned int>::resize(&v106, v11);
  uint64_t v13 = a3;
  uint64_t v15 = *(unsigned int *)(a3 + 12);
  unsigned int v14 = *(_DWORD *)(a3 + 16);
  uint64_t v16 = v14 + v15;
  uint64_t v17 = (unsigned int *)(a1[4] + 4 * v15);
  if (v14)
  {
    uint64_t v18 = 4 * v16 - 4 * v15;
    float32x2_t v19 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v20 = (float32x2_t)0x7F0000007FLL;
    unsigned int v21 = (unsigned int *)(a1[4] + 4 * v15);
    do
    {
      unsigned int v22 = *v21++;
      float32x2_t v23 = *(float32x2_t *)(a1[7] + 8 * v22);
      float32x2_t v19 = vminnm_f32(v19, v23);
      float32x2_t v20 = vmaxnm_f32(v20, v23);
      v18 -= 4;
    }
    while (v18);
  }
  else
  {
    float32x2_t v19 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v20 = (float32x2_t)0x7F0000007FLL;
  }
  float32x2_t v24 = vsub_f32(v20, v19);
  *(float *)v12.i32 = (float)a2;
  float32x2_t v25 = vdiv_f32(v24, (float32x2_t)vdup_lane_s32(v12, 0));
  if (sqrtf(vaddv_f32(vmul_f32(v25, v25))) <= 0.00001)
  {
    uint64_t v86 = v15 + (v14 >> 1);
    float32x2_t v87 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v88 = (float32x2_t)0x7F0000007FLL;
    float32x2_t v89 = v87;
    float32x2_t v90 = (float32x2_t)0x7F0000007FLL;
    if (v14 >= 2)
    {
      uint64_t v91 = 4 * v86 - 4 * v15;
      float32x2_t v89 = (float32x2_t)vdup_n_s32(0x7F800000u);
      do
      {
        unsigned int v92 = *v17++;
        float32x2_t v93 = (float32x2_t *)(a1[10] + 16 * v92);
        float32x2_t v89 = vminnm_f32(v89, *v93);
        float32x2_t v90 = vmaxnm_f32(v90, v93[1]);
        v91 -= 4;
      }
      while (v91);
    }
    *a4 = v89;
    a4[1] = v90;
    if (v14 != v14 >> 1)
    {
      float32x2_t v94 = (unsigned int *)(a1[4] + 4 * v86);
      uint64_t v95 = 4 * v16 - 4 * v86;
      float32x2_t v87 = (float32x2_t)vdup_n_s32(0x7F800000u);
      float32x2_t v88 = (float32x2_t)0x7F0000007FLL;
      do
      {
        unsigned int v96 = *v94++;
        double v97 = (float32x2_t *)(a1[10] + 16 * v96);
        float32x2_t v87 = vminnm_f32(v87, *v97);
        float32x2_t v88 = vmaxnm_f32(v88, v97[1]);
        v95 -= 4;
      }
      while (v95);
    }
    *a5 = v87;
    a5[1] = v88;
    uint64_t v26 = *(_DWORD *)(a3 + 16) >> 1;
  }
  else
  {
    uint64_t v26 = 0;
    int v27 = 0;
    uint64_t v28 = 1;
    int v29 = -1;
    float v30 = 3.4028e38;
    int32x2_t v31 = vdup_n_s32(0x7F800000u);
    char v32 = 1;
    do
    {
      char v33 = v32;
      float32x2_t v101 = v24;
      float v34 = *(float *)((unint64_t)&v101 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v27 & 1)));
      if (fabsf(v34) > 0.00001)
      {
        if ((char *)v107.__end_ - (char *)v107.__begin_ >= 1)
        {
          unsigned int v99 = v26;
          uint64_t v35 = v13;
          char v36 = a4;
          uint64_t v37 = a5;
          char v38 = v32;
          uint64_t v39 = v28;
          bzero(v107.__begin_, 4* (((unint64_t)((char *)v107.__end_ - (char *)v107.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v107.__end_ - (char *)v107.__begin_) > (std::vector<int>::pointer)3))+ 4);
          uint64_t v28 = v39;
          char v33 = v38;
          a5 = v37;
          a4 = v36;
          *(float *)v12.i32 = (float)a2;
          uint64_t v13 = v35;
          uint64_t v26 = v99;
        }
        unint64_t v40 = v114;
        if ((char *)v115 - (char *)v114 >= 1)
        {
          unint64_t v41 = ((unint64_t)((char *)v115 - (char *)v114) >> 4) + 1;
          do
          {
            *unint64_t v40 = (float32x2_t)v31;
            v40[1] = (float32x2_t)0x7F0000007FLL;
            v40 += 2;
            --v41;
          }
          while (v41 > 1);
        }
        int v42 = *(_DWORD *)(v13 + 16);
        if (v42)
        {
          uint64_t v43 = *(unsigned int *)(v13 + 12);
          uint64_t v44 = (v42 + v43);
          float v45 = (unsigned int *)(a1[4] + 4 * v43);
          float32x2_t v100 = v19;
          float v46 = *(float *)((unint64_t)&v100 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v27 & 1)));
          uint64_t v47 = 4 * v44 - 4 * v43;
          do
          {
            unsigned int v48 = *v45++;
            int v49 = (int)(float)((float)((float)(*(float *)(a1[7] + 8 * v48 + 4 * (v27 & 1)) - v46) / v34)
                             * *(float *)v12.i32);
            unsigned int v50 = (float32x2_t *)(a1[10] + 16 * v48);
            if (v49 == a2) {
              int v49 = v11;
            }
            v114[2 * v49] = vminnm_f32(*v50, v114[2 * v49]);
            v114[2 * v49 + 1] = vmaxnm_f32(v50[1], v114[2 * v49 + 1]);
            ++v107.__begin_[v49];
            v47 -= 4;
          }
          while (v47);
        }
        uint64_t v51 = v115;
        if (v114 != v115)
        {
          int v52 = (float32x2_t *)v111;
          float32x2_t v54 = *v114;
          float32x2_t v55 = v114[1];
          float32x2_t v53 = v114 + 2;
          *(float32x2_t *)std::vector<int> v111 = *v114;
          v52[1] = v55;
          if (v53 != v51)
          {
            float32x2_t v56 = v52 + 3;
            do
            {
              float32x2_t v57 = *v53;
              float32x2_t v58 = v53[1];
              v53 += 2;
              float32x2_t v54 = vminnm_f32(v54, v57);
              float32x2_t v55 = vmaxnm_f32(v55, v58);
              v56[-1] = v54;
              *float32x2_t v56 = v55;
              v56 += 2;
            }
            while (v53 != v51);
          }
        }
        unint64_t v59 = v114;
        if (v115 != v114)
        {
          double v60 = v109;
          float32x2_t v62 = v115[-2];
          float32x2_t v63 = v115[-1];
          float32x2_t v61 = v115 - 2;
          v109[-2] = v62;
          v60[-1] = v63;
          if (v61 != v59)
          {
            float32x2_t v64 = v60 - 4;
            do
            {
              float32x2_t v65 = v61[-2];
              v61 -= 2;
              float32x2_t v62 = vminnm_f32(v62, v65);
              float32x2_t v63 = vmaxnm_f32(v63, v61[1]);
              *float32x2_t v64 = v62;
              v64[1] = v63;
              v64 -= 2;
            }
            while (v61 != v59);
          }
        }
        std::vector<int>::pointer begin = v106.__begin_;
        int64_t v67 = (char *)v106.__end_ - (char *)v106.__begin_;
        if (v106.__end_ != v106.__begin_)
        {
          std::vector<int>::pointer v68 = v107.__begin_;
          int v69 = *v107.__begin_;
          *v106.__begin_ = *v107.__begin_;
          if (v67 != 4)
          {
            uint64_t v70 = v67 >> 2;
            double v71 = v68 + 1;
            uint64_t v72 = begin + 1;
            uint64_t v73 = 4 * v70 - 4;
            do
            {
              int v74 = *v71++;
              v69 += v74;
              *v72++ = v69;
              v73 -= 4;
            }
            while (v73);
          }
        }
        if (v11)
        {
          uint64_t v75 = 0;
          uint64_t v76 = (float32x2_t *)v111;
          uint64_t v77 = (float32x2_t *)((char *)__p + 16);
          do
          {
            float32x2_t v78 = vmaxnm_f32(*v76, *v77);
            float32x2_t v79 = vminnm_f32(v76[1], v77[1]);
            uint32x2_t v80 = (uint32x2_t)vcgt_f32(v78, v79);
            float32x2_t v81 = vsub_f32(v79, v78);
            LODWORD(v82) = vmul_lane_f32(v81, v81, 1).u32[0];
            if (vpmax_u32(v80, v80).i32[0] < 0) {
              float v82 = 0.0;
            }
            if (v82 < v30)
            {
              uint64_t v26 = begin[v75];
              *(_OWORD *)a4->f32 = *(_OWORD *)v76->f32;
              *(_OWORD *)a5->f32 = *(_OWORD *)v77->f32;
              int v29 = v27;
              uint64_t v28 = v75;
              float v30 = v82;
            }
            ++v75;
            v76 += 2;
            v77 += 2;
          }
          while (v11 != v75);
        }
      }
      char v32 = 0;
      int v27 = 1;
    }
    while ((v33 & 1) != 0);
    uint64_t v83 = a1[4];
    uint64_t v84 = *(unsigned int *)(v13 + 12);
    float v85 = (_DWORD *)(v83 + 4 * v84);
    LODWORD(v84) = *(_DWORD *)(v13 + 16) + v84;
    v102[0] = a1;
    v102[1] = v19;
    v102[2] = v20;
    v102[3] = v24;
    int v103 = v28;
    int v104 = v29;
    unsigned int v105 = a2;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<float,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int,geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v85, (_DWORD *)(v83 + 4 * v84), v102);
  }
  if (v106.__begin_)
  {
    v106.__end_ = v106.__begin_;
    operator delete(v106.__begin_);
  }
  if (v107.__begin_)
  {
    v107.__end_ = v107.__begin_;
    operator delete(v107.__begin_);
  }
  if (__p)
  {
    unsigned int v109 = (float32x2_t *)__p;
    operator delete(__p);
  }
  if (v111)
  {
    long long v112 = v111;
    operator delete(v111);
  }
  if (v114)
  {
    long long v115 = v114;
    operator delete(v114);
  }
  return v26;
}

uint64_t std::deque<geom::bvh<float,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>,geom::ray<float,(unsigned char)2>,float &,unsigned int &)::state,std::allocator<geom::bvh<float,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<float,(unsigned char)2>,float &)>,geom::ray<float,(unsigned char)2>,float &,unsigned int &)::state>>::__maybe_remove_back_spare[abi:nn180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 341 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x155) {
    a2 = 1;
  }
  if (v5 < 0x2AA) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::deque<std::pair<unsigned int,unsigned int>>::push_back(void *a1, void *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = ((v4 - v5) << 6) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<std::pair<unsigned int,unsigned int>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  *(void *)(*(void *)(v5 + ((v7 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v7 & 0x1FF)) = *a2;
  ++a1[5];
}

void std::deque<std::pair<unsigned int,unsigned int>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    float v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    float v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(void *)float v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v29 = 1;
      }
      else {
        unint64_t v29 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v5, v29);
      int32x2_t v31 = &v30[8 * (v29 >> 2)];
      char v33 = &v30[8 * v32];
      float v34 = (uint64_t *)a1[1];
      float v8 = v31;
      uint64_t v35 = a1[2] - (void)v34;
      if (v35)
      {
        float v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v36 = 8 * (v35 >> 3);
        uint64_t v37 = &v30[8 * (v29 >> 2)];
        do
        {
          uint64_t v38 = *v34++;
          *(void *)uint64_t v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    float32x2_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      float v9 = (char *)a1[1];
    }
    float v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0x1000uLL);
      std::__split_buffer<unsigned int *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0x1000uLL);
    std::__split_buffer<unsigned int *>::push_front((uint64_t)a1, &v54);
    unint64_t v40 = (void *)a1[1];
    float v8 = (char *)a1[2];
    uint64_t v41 = *v40;
    float v9 = (char *)(v40 + 1);
    uint64_t v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_29;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      float v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      int32x2_t v31 = &v30[8 * (v46 >> 2)];
      char v33 = &v30[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      float v8 = v31;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        float v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        uint64_t v51 = &v30[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)uint64_t v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      uint64_t v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        float v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float32x2_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float32x2_t v53 = operator new(0x1000uLL);
  std::__split_buffer<unsigned int *>::push_back(&v54, &v53);
  int v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    uint64_t v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<unsigned int *>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    uint64_t v28 = (char *)a1[2];
  }
  int v42 = (char *)*a1;
  long long v43 = v54;
  long long v44 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  uint64_t v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(void *)&long long v55 = v28;
  *((void *)&v55 + 1) = v45;
  if (v28 != v27) {
    *(void *)&long long v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (v42) {
    operator delete(v42);
  }
}

uint64_t std::deque<std::pair<unsigned int,unsigned int>>::__maybe_remove_back_spare[abi:nn180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = ((v2 - v3) << 6) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0x200) {
    a2 = 1;
  }
  if (v5 < 0x400) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::~__func()
{
}

void *std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA05FF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA05FF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 8);
  *a3 = &unk_26EA06070;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::target_type()
{
}

void std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA06070;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06070;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(_DWORD *)(a1 + 16) & 1;
  return *(float *)(*(void *)(*(void *)(a1 + 8) + 56) + 8 * *a2 + 4 * v3) < *(float *)(*(void *)(*(void *)(a1 + 8) + 56)
                                                                                             + 8 * *a3
                                                                                             + 4 * v3);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::target_type()
{
}

void *std::__function::__value_func<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1}>,void ()(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)>::~__func()
{
}

__n128 std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1}>,void ()(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA06110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1}>,void ()(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1}>,void ()(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)>::operator()(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, _DWORD *a5)
{
  return geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1}::operator()((uint64_t *)(a1 + 8), a2, *a3, a4, a5);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1}>,void ()(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1}>,void ()(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)>::target_type()
{
}

void *geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)#1}::operator()(uint64_t *a1, uint64_t a2, int a3, _DWORD *a4, _DWORD *a5)
{
  _OWORD v17[4] = *MEMORY[0x263EF8340];
  uint64_t v9 = *a1;
  unint64_t v10 = *(unsigned int *)(a2 + 16);
  uint64_t v11 = (int *)(*(void *)(*a1 + 32) + 4 * *(unsigned int *)(a2 + 12));
  std::function<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::operator()(a1[1], a3);
  if ((v10 >> 1) != v10) {
    std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *>(v11, &v11[v10 >> 1], &v11[v10], (uint64_t)v17);
  }
  std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::~__value_func[abi:nn180100](v17);
  *a4 = *(_DWORD *)(*(void *)(v9 + 56) + 8 * v11[v10 >> 1] + 4 * (a3 & 1));
  std::function<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::operator()(a1[1], a3);
  uint64_t v12 = std::__upper_bound[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)>,unsigned int *,unsigned int *,unsigned int,std::__identity>(v11, &v11[v10], &v11[v10 >> 1], (uint64_t)v16);
  __n128 result = std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::~__value_func[abi:nn180100](v16);
  unint64_t v14 = (unint64_t)((char *)v12 - (char *)v11) >> 2;
  if (*(_DWORD *)(a2 + 16) - (int)v14 < v14) {
    LODWORD(v14) = *(_DWORD *)(a2 + 16) - v14;
  }
  *a5 = v14;
  return result;
}

uint64_t std::function<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::operator()(uint64_t a1, int a2)
{
  int v5 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (v2) {
    return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v5);
  }
  uint64_t v4 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *>(v4);
}

int *std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *>(int *result, int *a2, int *a3, uint64_t a4)
{
  if (a3 != a2)
  {
    int v5 = a3;
    int v7 = result;
    do
    {
      unint64_t v8 = v5 - v7;
      if (v8 < 2) {
        break;
      }
      if (v8 == 3)
      {
        return (int *)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *>(v7, v7 + 1, v5 - 1, a4);
      }
      if (v8 == 2)
      {
        __n128 result = (int *)std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *(v5 - 1), *v7);
        if (result)
        {
          int v28 = *v7;
          *int v7 = *(v5 - 1);
          *(v5 - 1) = v28;
        }
        return result;
      }
      if ((char *)v5 - (char *)v7 <= 31)
      {
        return std::__selection_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *>(v7, v5, a4);
      }
      uint64_t v9 = &v7[v8 >> 1];
      unint64_t v10 = v5 - 1;
      int v11 = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *>(v7, v9, v5 - 1, a4);
      __n128 result = (int *)std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *v7, *v9);
      if (result)
      {
        uint64_t v12 = v5 - 1;
LABEL_13:
        unint64_t v14 = v7 + 1;
        if (v7 + 1 >= v12)
        {
          uint64_t v16 = v7 + 1;
        }
        else
        {
          uint64_t v15 = v7 + 1;
          while (1)
          {
            uint64_t v16 = v15 - 1;
            do
            {
              int v17 = v16[1];
              ++v16;
            }
            while (std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, v17, *v9));
            uint64_t v15 = v16 + 1;
            do
            {
              int v18 = *--v12;
              __n128 result = (int *)std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, v18, *v9);
            }
            while (!result);
            if (v16 >= v12) {
              break;
            }
            int v19 = *v16;
            *uint64_t v16 = *v12;
            *uint64_t v12 = v19;
            ++v11;
            if (v16 == v9) {
              uint64_t v9 = v12;
            }
          }
        }
        if (v16 != v9)
        {
          __n128 result = (int *)std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *v9, *v16);
          if (result)
          {
            int v20 = *v16;
            *uint64_t v16 = *v9;
            int *v9 = v20;
            ++v11;
          }
        }
        if (v16 == a2) {
          return result;
        }
        if (!v11)
        {
          if (v16 <= a2)
          {
            int v27 = v16 + 1;
            while (v27 != v5)
            {
              __n128 result = (int *)std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *v27, *(v27 - 1));
              ++v27;
              if (result) {
                goto LABEL_29;
              }
            }
          }
          else
          {
            while (v14 != v16)
            {
              __n128 result = (int *)std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *v14, *(v14 - 1));
              ++v14;
              if (result) {
                goto LABEL_29;
              }
            }
          }
          return result;
        }
LABEL_29:
        if (v16 <= a2) {
          uint64_t v21 = v16 + 1;
        }
        else {
          uint64_t v21 = v7;
        }
        if (v16 > a2) {
          int v5 = v16;
        }
      }
      else
      {
        uint64_t v12 = v5 - 1;
        while (--v12 != v7)
        {
          __n128 result = (int *)std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *v12, *v9);
          if (result)
          {
            int v13 = *v7;
            *int v7 = *v12;
            *uint64_t v12 = v13;
            ++v11;
            goto LABEL_13;
          }
        }
        unint64_t v22 = v7 + 1;
        __n128 result = (int *)std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *v7, *v10);
        if (!result)
        {
          while (v22 != v10)
          {
            __n128 result = (int *)std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *v7, *v22);
            if (result)
            {
              int v23 = *v22;
              *v22++ = *v10;
              *unint64_t v10 = v23;
              goto LABEL_46;
            }
            ++v22;
          }
          return result;
        }
LABEL_46:
        if (v22 == v10) {
          return result;
        }
        while (1)
        {
          uint64_t v21 = v22 - 1;
          do
          {
            int v24 = v21[1];
            ++v21;
          }
          while (!std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *v7, v24));
          unint64_t v22 = v21 + 1;
          do
          {
            int v25 = *--v10;
            __n128 result = (int *)std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *v7, v25);
          }
          while (result);
          if (v21 >= v10) {
            break;
          }
          int v26 = *v21;
          *uint64_t v21 = *v10;
          *unint64_t v10 = v26;
        }
        if (v21 > a2) {
          return result;
        }
      }
      int v7 = v21;
    }
    while (v5 != a2);
  }
  return result;
}

uint64_t std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(uint64_t a1, int a2, int a3)
{
  int v7 = a2;
  int v6 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (v3) {
    return (*(uint64_t (**)(uint64_t, int *, int *))(*(void *)v3 + 48))(v3, &v7, &v6);
  }
  int v5 = std::__throw_bad_function_call[abi:nn180100]();
  return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *>(v5);
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *>(int *a1, int *a2, int *a3, uint64_t a4)
{
  int v8 = std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *a2, *a1);
  uint64_t result = std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *a3, *a2);
  if (v8)
  {
    int v10 = *a1;
    if (result)
    {
      *a1 = *a3;
      *a3 = v10;
      return 1;
    }
    *a1 = *a2;
    *a2 = v10;
    if (!std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *a3, v10)) {
      return 1;
    }
    int v13 = *a2;
    *a2 = *a3;
    *a3 = v13;
  }
  else
  {
    if (!result) {
      return result;
    }
    int v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    if (!std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *a2, *a1)) {
      return 1;
    }
    int v12 = *a1;
    *a1 = *a2;
    *a2 = v12;
  }
  return 2;
}

int *std::__selection_sort[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *>(int *result, int *a2, uint64_t a3)
{
  uint64_t v3 = a2 - 1;
  if (a2 - 1 != result)
  {
    int v6 = result;
    do
    {
      uint64_t result = std::__min_element[abi:nn180100]<std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *,unsigned int *>(v6, a2, a3);
      if (v6 != result)
      {
        int v7 = *v6;
        *int v6 = *result;
        *uint64_t result = v7;
      }
      ++v6;
    }
    while (v6 != v3);
  }
  return result;
}

int *std::__min_element[abi:nn180100]<std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    int v5 = a1 + 1;
    if (a1 + 1 != a2)
    {
      int v7 = a1 + 1;
      do
      {
        int v8 = *v7++;
        if (std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a3, v8, *v3)) {
          uint64_t v3 = v5;
        }
        int v5 = v7;
      }
      while (v7 != a2);
    }
  }
  return v3;
}

void *std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

int *std::__upper_bound[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)>,unsigned int *,unsigned int *,unsigned int,std::__identity>(int *a1, int *a2, int *a3, uint64_t a4)
{
  uint64_t v4 = a2;
  if (a2 != a1)
  {
    unint64_t v7 = a2 - a1;
    uint64_t v4 = a1;
    do
    {
      int v8 = &v4[v7 >> 1];
      int v10 = *v8;
      uint64_t v9 = v8 + 1;
      if (std::function<unsigned int ()(unsigned int,unsigned int)>::operator()(a4, *a3, v10))
      {
        v7 >>= 1;
      }
      else
      {
        uint64_t v4 = v9;
        v7 += ~(v7 >> 1);
      }
    }
    while (v7);
  }
  return v4;
}

void *std::__function::__value_func<void ()(geom::bvh_node<float,(unsigned char)2> const&,int,float &,unsigned int &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::~__func()
{
}

__n128 std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26EA061A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA061A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  return *(float *)(*(void *)(*(void *)(a1 + 24) + 56) + 8 * *a2 + 4 * (**(_DWORD **)(a1 + 16) & 1)) < **(float **)(a1 + 8);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)2>::partition_node_median(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target_type()
{
}

int *std::__partition_impl[abi:nn180100]<std::function<BOOL ()(unsigned int)> &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(int *a1, int *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  if (a1 != a2)
  {
    int v5 = a2;
LABEL_3:
    while ((std::function<BOOL ()>::operator()(a3, *v3) & 1) != 0)
    {
      if (++v3 == v5) {
        return v5;
      }
    }
    while (--v5 != v3)
    {
      if (std::function<BOOL ()>::operator()(a3, *v5))
      {
        int v6 = *v3;
        *v3++ = *v5;
        int *v5 = v6;
        if (v5 != v3) {
          goto LABEL_3;
        }
        return v5;
      }
    }
  }
  return v3;
}

uint64_t std::__function::__value_func<BOOL ()(unsigned int)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

_DWORD *std::__partition_impl[abi:nn180100]<geom::bvh<float,(unsigned char)2>::partition_node_middle(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda(unsigned int)#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(*(void *)a3 + 56);
    float v4 = *(float *)(a3 + 12);
    int v5 = a2;
LABEL_3:
    int v6 = *(_DWORD *)(a3 + 8);
    while (1)
    {
      uint64_t v7 = *a1;
      if (*(float *)(v3 + 8 * v7 + 4 * (v6 & 1)) >= v4) {
        break;
      }
      if (++a1 == v5) {
        return v5;
      }
    }
    while (--v5 != a1)
    {
      uint64_t v8 = *v5;
      if (*(float *)(v3 + 8 * v8 + 4 * (v6 & 1)) < v4)
      {
        *a1++ = v8;
        _DWORD *v5 = v7;
        if (v5 != a1) {
          goto LABEL_3;
        }
        return v5;
      }
    }
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<geom::bvh<double,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::~__func()
{
}

void *std::__function::__func<geom::bvh<double,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA06220;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA06220;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  return geom::bvh<double,(unsigned char)2>::partition_node_middle(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::target_type()
{
}

void *std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom::bvh<double,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::~__func()
{
}

void *std::__function::__func<geom::bvh<double,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA062B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA062B0;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  return geom::bvh<double,(unsigned char)2>::partition_node_median(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::target_type()
{
}

void std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26EA06330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06330;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  return geom::bvh<double,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), a2, a3, a4);
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::target_type()
{
}

uint64_t geom::bvh<double,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(void *a1, unsigned int a2, uint64_t a3, float64x2_t *a4, float64x2_t *a5)
{
  unsigned int v8 = a2;
  uint64_t v134 = *MEMORY[0x263EF8340];
  __int32 v124 = 0;
  __int32 v125 = 0;
  uint64_t v126 = 0;
  unint64_t v10 = a2;
  std::vector<geom::bbox<double,(unsigned char)2>>::resize((uint64_t)&v124, a2);
  __int32 v121 = 0;
  __int32 v122 = 0;
  uint64_t v123 = 0;
  std::vector<geom::bbox<double,(unsigned char)2>>::resize((uint64_t)&v121, v10);
  std::vector<int> __p = 0;
  float64x2_t v119 = 0;
  uint64_t v120 = 0;
  std::vector<geom::bbox<double,(unsigned char)2>>::resize((uint64_t)&__p, v10);
  memset(&v117, 0, sizeof(v117));
  std::vector<unsigned int>::resize(&v117, v10);
  memset(&v116, 0, sizeof(v116));
  std::vector<int>::size_type v11 = v8 - 1;
  std::vector<unsigned int>::resize(&v116, v11);
  uint64_t v13 = *(unsigned int *)(a3 + 12);
  unsigned int v12 = *(_DWORD *)(a3 + 16);
  uint64_t v14 = v12 + v13;
  uint64_t v15 = (unsigned int *)(a1[4] + 4 * v13);
  if (v12)
  {
    uint64_t v16 = 4 * v14 - 4 * v13;
    float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v18 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    int v19 = (unsigned int *)(a1[4] + 4 * v13);
    do
    {
      unsigned int v20 = *v19++;
      float64x2_t v21 = *(float64x2_t *)(a1[7] + 16 * v20);
      float64x2_t v17 = vminnmq_f64(v17, v21);
      float64x2_t v18 = vmaxnmq_f64(v18, v21);
      v16 -= 4;
    }
    while (v16);
  }
  else
  {
    float64x2_t v18 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  }
  float64x2_t v22 = vsubq_f64(v18, v17);
  double v23 = (double)v8;
  float64x2_t v24 = vdivq_f64(v22, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v8), 0));
  if (sqrt(vaddvq_f64(vmulq_f64(v24, v24))) <= 0.000001)
  {
    uint64_t v94 = v13 + (v12 >> 1);
    float64x2_t v95 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v96 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v97 = v96;
    float64x2_t v98 = v95;
    if (v12 >= 2)
    {
      uint64_t v99 = 4 * v94 - 4 * v13;
      float64x2_t v97 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v98 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      do
      {
        unsigned int v100 = *v15++;
        float32x2_t v101 = (float64x2_t *)(a1[10] + 32 * v100);
        float64x2_t v97 = vminnmq_f64(v97, *v101);
        float64x2_t v98 = vmaxnmq_f64(v98, v101[1]);
        v99 -= 4;
      }
      while (v99);
    }
    *a4 = v97;
    a4[1] = v98;
    if (v12 != v12 >> 1)
    {
      long long v102 = (unsigned int *)(a1[4] + 4 * v94);
      uint64_t v103 = 4 * v14 - 4 * v94;
      float64x2_t v96 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v95 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      do
      {
        unsigned int v104 = *v102++;
        unsigned int v105 = (float64x2_t *)(a1[10] + 32 * v104);
        float64x2_t v96 = vminnmq_f64(v96, *v105);
        float64x2_t v95 = vmaxnmq_f64(v95, v105[1]);
        v103 -= 4;
      }
      while (v103);
    }
    *a5 = v96;
    a5[1] = v95;
    uint64_t v25 = *(_DWORD *)(a3 + 16) >> 1;
  }
  else
  {
    float64x2_t v107 = v18;
    uint64_t v25 = 0;
    int v26 = 0;
    uint64_t v27 = 1;
    int v28 = -1;
    int64x2_t v29 = vdupq_n_s64(0x7FF0000000000000uLL);
    double v30 = 1.79769313e308;
    int64x2_t v31 = vdupq_n_s64(0xFFF0000000000000);
    char v32 = 1;
    float64x2_t v112 = v22;
    float64x2_t v113 = v17;
    int64x2_t v110 = v29;
    double v111 = (double)v8;
    int64x2_t v109 = v31;
    unsigned int v108 = v8;
    do
    {
      char v33 = v32;
      float64x2_t v115 = v22;
      double v34 = *(double *)((unint64_t)&v115 & 0xFFFFFFFFFFFFFFF7 | (8 * (v26 & 1)));
      if (fabs(v34) > 0.000001)
      {
        if ((char *)v117.__end_ - (char *)v117.__begin_ >= 1)
        {
          char v35 = v32;
          uint64_t v36 = a3;
          uint64_t v37 = a4;
          uint64_t v38 = a5;
          uint64_t v39 = v27;
          bzero(v117.__begin_, 4* (((unint64_t)((char *)v117.__end_ - (char *)v117.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v117.__end_ - (char *)v117.__begin_) > (std::vector<int>::pointer)3))+ 4);
          uint64_t v27 = v39;
          a5 = v38;
          a4 = v37;
          a3 = v36;
          unsigned int v8 = v108;
          char v33 = v35;
          int64x2_t v31 = v109;
          int64x2_t v29 = v110;
          double v23 = v111;
          float64x2_t v22 = v112;
          float64x2_t v17 = v113;
        }
        unint64_t v40 = v124;
        if ((char *)v125 - (char *)v124 >= 1)
        {
          unint64_t v41 = ((unint64_t)((char *)v125 - (char *)v124) >> 5) + 1;
          do
          {
            *unint64_t v40 = (float64x2_t)v29;
            v40[1] = (float64x2_t)v31;
            v40 += 2;
            --v41;
          }
          while (v41 > 1);
        }
        int v42 = *(_DWORD *)(a3 + 16);
        if (v42)
        {
          uint64_t v43 = *(unsigned int *)(a3 + 12);
          uint64_t v44 = (v42 + v43);
          uint64_t v45 = (unsigned int *)(a1[4] + 4 * v43);
          float64x2_t v114 = v17;
          double v46 = *(double *)((unint64_t)&v114 & 0xFFFFFFFFFFFFFFF7 | (8 * (v26 & 1)));
          uint64_t v47 = 4 * v44 - 4 * v43;
          do
          {
            unsigned int v48 = *v45++;
            int v49 = (int)((*(double *)(a1[7] + 16 * v48 + 8 * (v26 & 1)) - v46) / v34 * v23);
            uint64_t v50 = (float64x2_t *)(a1[10] + 32 * v48);
            if (v49 == v8) {
              int v51 = v11;
            }
            else {
              int v51 = v49;
            }
            v124[2 * v51] = vminnmq_f64(*v50, v124[2 * v51]);
            v124[2 * v51 + 1] = vmaxnmq_f64(v50[1], v124[2 * v51 + 1]);
            ++v117.__begin_[v51];
            v47 -= 4;
          }
          while (v47);
        }
        uint64_t v52 = v125;
        if (v124 != v125)
        {
          float32x2_t v53 = (float64x2_t *)v121;
          float64x2_t v55 = *v124;
          float64x2_t v56 = v124[1];
          long long v54 = v124 + 2;
          *(float64x2_t *)__int32 v121 = *v124;
          v53[1] = v56;
          if (v54 != v52)
          {
            float32x2_t v57 = v53 + 3;
            do
            {
              float64x2_t v58 = *v54;
              float64x2_t v59 = v54[1];
              v54 += 2;
              float64x2_t v55 = vminnmq_f64(v55, v58);
              float64x2_t v56 = vmaxnmq_f64(v56, v59);
              v57[-1] = v55;
              *float32x2_t v57 = v56;
              v57 += 2;
            }
            while (v54 != v52);
          }
        }
        double v60 = v124;
        if (v125 != v124)
        {
          float32x2_t v61 = v119;
          float64x2_t v63 = v125[-2];
          float64x2_t v64 = v125[-1];
          float32x2_t v62 = v125 - 2;
          v119[-2] = v63;
          v61[-1] = v64;
          if (v62 != v60)
          {
            float32x2_t v65 = v61 - 4;
            do
            {
              float64x2_t v66 = v62[-2];
              v62 -= 2;
              float64x2_t v63 = vminnmq_f64(v63, v66);
              float64x2_t v64 = vmaxnmq_f64(v64, v62[1]);
              *float32x2_t v65 = v63;
              v65[1] = v64;
              v65 -= 2;
            }
            while (v62 != v60);
          }
        }
        std::vector<int>::pointer begin = v116.__begin_;
        int64_t v68 = (char *)v116.__end_ - (char *)v116.__begin_;
        if (v116.__end_ != v116.__begin_)
        {
          std::vector<int>::pointer v69 = v117.__begin_;
          int v70 = *v117.__begin_;
          *v116.__begin_ = *v117.__begin_;
          if (v68 != 4)
          {
            uint64_t v71 = v68 >> 2;
            uint64_t v72 = v69 + 1;
            uint64_t v73 = begin + 1;
            uint64_t v74 = 4 * v71 - 4;
            do
            {
              int v75 = *v72++;
              v70 += v75;
              *v73++ = v70;
              v74 -= 4;
            }
            while (v74);
          }
        }
        if (v11)
        {
          uint64_t v76 = 0;
          uint64_t v77 = (float64x2_t *)v121;
          float32x2_t v78 = (float64x2_t *)((char *)__p + 32);
          do
          {
            uint64_t v79 = begin[v76];
            float64x2_t v80 = v77[1];
            int64x2_t v81 = vcgtq_f64(*v77, v80);
            float64x2_t v82 = vsubq_f64(v80, *v77);
            double v83 = vaddvq_f64(vmulq_f64(v82, (float64x2_t)vextq_s8((int8x16_t)v82, (int8x16_t)v82, 8uLL)));
            if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v81, 1), (int8x16_t)v81).i64[0] < 0) {
              double v83 = 0.0;
            }
            float64x2_t v84 = v78[1];
            int64x2_t v85 = vcgtq_f64(*v78, v84);
            float64x2_t v86 = vsubq_f64(v84, *v78);
            double v87 = vaddvq_f64(vmulq_f64(v86, (float64x2_t)vextq_s8((int8x16_t)v86, (int8x16_t)v86, 8uLL)));
            if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v85, 1), (int8x16_t)v85).i64[0] < 0) {
              double v87 = 0.0;
            }
            double v88 = v87 * (double)(*(_DWORD *)(a3 + 16) - v79) + (double)v79 * v83;
            if (v88 < v30)
            {
              float64x2_t v89 = v77[1];
              *a4 = *v77;
              a4[1] = v89;
              float64x2_t v90 = v78[1];
              *a5 = *v78;
              a5[1] = v90;
              int v28 = v26;
              uint64_t v25 = v79;
              uint64_t v27 = v76;
              double v30 = v88;
            }
            ++v76;
            v77 += 2;
            v78 += 2;
          }
          while (v11 != v76);
        }
      }
      char v32 = 0;
      int v26 = 1;
    }
    while ((v33 & 1) != 0);
    uint64_t v91 = a1[4];
    uint64_t v92 = *(unsigned int *)(a3 + 12);
    float32x2_t v93 = (_DWORD *)(v91 + 4 * v92);
    LODWORD(v92) = *(_DWORD *)(a3 + 16) + v92;
    __int32 v127 = a1;
    float64x2_t v128 = v17;
    float64x2_t v129 = v107;
    float64x2_t v130 = v22;
    int v131 = v27;
    int v132 = v28;
    unsigned int v133 = v8;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<double,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int,geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v93, (_DWORD *)(v91 + 4 * v92), &v127);
  }
  if (v116.__begin_)
  {
    v116.__end_ = v116.__begin_;
    operator delete(v116.__begin_);
  }
  if (v117.__begin_)
  {
    v117.__end_ = v117.__begin_;
    operator delete(v117.__begin_);
  }
  if (__p)
  {
    float64x2_t v119 = (float64x2_t *)__p;
    operator delete(__p);
  }
  if (v121)
  {
    __int32 v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    __int32 v125 = v124;
    operator delete(v124);
  }
  return v25;
}

void std::vector<geom::bbox<double,(unsigned char)2>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 5;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 32 * a2;
    }
  }
  else
  {
    std::vector<geom::bbox<double,(unsigned char)2>>::__append((void **)a1, a2 - v2);
  }
}

void std::vector<geom::bbox<double,(unsigned char)2>>::__append(void **a1, unint64_t a2)
{
  int v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  int v5 = v6;
  uint64_t v7 = *(int64x2_t **)(v4 - 8);
  if (a2 <= (v6 - (unsigned char *)v7) >> 5)
  {
    if (a2)
    {
      uint64_t v14 = &v7[2 * a2];
      int64x2_t v15 = vdupq_n_s64(0x7FF0000000000000uLL);
      int64x2_t v16 = vdupq_n_s64(0xFFF0000000000000);
      do
      {
        *uint64_t v7 = v15;
        v7[1] = v16;
        v7 += 2;
      }
      while (v7 != v14);
      uint64_t v7 = v14;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = (char *)v7 - (unsigned char *)*a1;
    unint64_t v9 = a2 + (v8 >> 5);
    if (v9 >> 59) {
      abort();
    }
    uint64_t v10 = v8 >> 5;
    uint64_t v11 = v5 - (unsigned char *)*a1;
    if (v11 >> 4 > v9) {
      unint64_t v9 = v11 >> 4;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v9;
    }
    if (v12) {
      uint64_t v13 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v4, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    float64x2_t v17 = (int64x2_t *)&v13[32 * v10];
    float64x2_t v18 = &v17[2 * a2];
    int64x2_t v19 = vdupq_n_s64(0x7FF0000000000000uLL);
    int64x2_t v20 = vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v21 = v17;
    do
    {
      *float64x2_t v21 = v19;
      v21[1] = v20;
      v21 += 2;
    }
    while (v21 != v18);
    float64x2_t v22 = &v13[32 * v12];
    float64x2_t v24 = (char *)*a1;
    double v23 = (int64x2_t *)a1[1];
    if (v23 != *a1)
    {
      do
      {
        int64x2_t v25 = v23[-1];
        v17[-2] = v23[-2];
        v17[-1] = v25;
        v17 -= 2;
        v23 -= 2;
      }
      while (v23 != (int64x2_t *)v24);
      double v23 = (int64x2_t *)*a1;
    }
    *a1 = v17;
    a1[1] = v18;
    a1[2] = v22;
    if (v23)
    {
      operator delete(v23);
    }
  }
}

_DWORD *std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<double,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int,geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (result != a2)
  {
    uint64_t v3 = *(void *)(*(void *)a3 + 56);
    uint64_t v4 = a2;
    while (2)
    {
      unsigned int v5 = a3[16];
      int v6 = a3[17];
      uint64_t v7 = (double *)&a3[2 * (v6 & 1)];
      double v8 = v7[2];
      double v9 = v7[6];
      unsigned int v10 = a3[18];
      double v11 = (double)v10;
      unint64_t v12 = result;
      while (1)
      {
        uint64_t v13 = *v12;
        unsigned int v14 = (int)((*(double *)(v3 + 16 * v13 + 8 * (v6 & 1)) - v8) / v9 * v11);
        if (v10 == v14) {
          unsigned int v14 = v10 - 1;
        }
        if (v14 > v5) {
          break;
        }
        if (++v12 == v4) {
          return v4;
        }
      }
      do
      {
        if (--v4 == v12) {
          return v12;
        }
        uint64_t v15 = *v4;
        unsigned int v16 = (int)((*(double *)(v3 + 16 * v15 + 8 * (v6 & 1)) - v8) / v9 * v11);
        if (v10 == v16) {
          unsigned int v16 = v10 - 1;
        }
      }
      while (v16 > v5);
      *unint64_t v12 = v15;
      __n128 result = v12 + 1;
      _DWORD *v4 = v13;
      if (v4 != v12 + 1) {
        continue;
      }
      break;
    }
    return v12 + 1;
  }
  return result;
}

void std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26EA063B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA063B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  return geom::bvh<double,(unsigned char)2>::partition_node_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), a2, a3, a4);
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::target_type()
{
}

uint64_t geom::bvh<double,(unsigned char)2>::partition_node_heuristic<geom::volume_heuristic_functor<double,(unsigned char)2>>(void *a1, unsigned int a2, uint64_t a3, float64x2_t *a4, float64x2_t *a5)
{
  unsigned int v8 = a2;
  uint64_t v134 = *MEMORY[0x263EF8340];
  __int32 v124 = 0;
  __int32 v125 = 0;
  uint64_t v126 = 0;
  unint64_t v10 = a2;
  std::vector<geom::bbox<double,(unsigned char)2>>::resize((uint64_t)&v124, a2);
  __int32 v121 = 0;
  __int32 v122 = 0;
  uint64_t v123 = 0;
  std::vector<geom::bbox<double,(unsigned char)2>>::resize((uint64_t)&v121, v10);
  std::vector<int> __p = 0;
  float64x2_t v119 = 0;
  uint64_t v120 = 0;
  std::vector<geom::bbox<double,(unsigned char)2>>::resize((uint64_t)&__p, v10);
  memset(&v117, 0, sizeof(v117));
  std::vector<unsigned int>::resize(&v117, v10);
  memset(&v116, 0, sizeof(v116));
  std::vector<int>::size_type v11 = v8 - 1;
  std::vector<unsigned int>::resize(&v116, v11);
  uint64_t v13 = *(unsigned int *)(a3 + 12);
  unsigned int v12 = *(_DWORD *)(a3 + 16);
  uint64_t v14 = v12 + v13;
  uint64_t v15 = (unsigned int *)(a1[4] + 4 * v13);
  if (v12)
  {
    uint64_t v16 = 4 * v14 - 4 * v13;
    float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v18 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    int64x2_t v19 = (unsigned int *)(a1[4] + 4 * v13);
    do
    {
      unsigned int v20 = *v19++;
      float64x2_t v21 = *(float64x2_t *)(a1[7] + 16 * v20);
      float64x2_t v17 = vminnmq_f64(v17, v21);
      float64x2_t v18 = vmaxnmq_f64(v18, v21);
      v16 -= 4;
    }
    while (v16);
  }
  else
  {
    float64x2_t v18 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v17 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  }
  float64x2_t v22 = vsubq_f64(v18, v17);
  double v23 = (double)v8;
  float64x2_t v24 = vdivq_f64(v22, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v8), 0));
  if (sqrt(vaddvq_f64(vmulq_f64(v24, v24))) <= 0.000001)
  {
    uint64_t v94 = v13 + (v12 >> 1);
    float64x2_t v95 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v96 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v97 = v96;
    float64x2_t v98 = v95;
    if (v12 >= 2)
    {
      uint64_t v99 = 4 * v94 - 4 * v13;
      float64x2_t v97 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v98 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      do
      {
        unsigned int v100 = *v15++;
        float32x2_t v101 = (float64x2_t *)(a1[10] + 32 * v100);
        float64x2_t v97 = vminnmq_f64(v97, *v101);
        float64x2_t v98 = vmaxnmq_f64(v98, v101[1]);
        v99 -= 4;
      }
      while (v99);
    }
    *a4 = v97;
    a4[1] = v98;
    if (v12 != v12 >> 1)
    {
      long long v102 = (unsigned int *)(a1[4] + 4 * v94);
      uint64_t v103 = 4 * v14 - 4 * v94;
      float64x2_t v96 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v95 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      do
      {
        unsigned int v104 = *v102++;
        unsigned int v105 = (float64x2_t *)(a1[10] + 32 * v104);
        float64x2_t v96 = vminnmq_f64(v96, *v105);
        float64x2_t v95 = vmaxnmq_f64(v95, v105[1]);
        v103 -= 4;
      }
      while (v103);
    }
    *a5 = v96;
    a5[1] = v95;
    uint64_t v25 = *(_DWORD *)(a3 + 16) >> 1;
  }
  else
  {
    float64x2_t v107 = v18;
    uint64_t v25 = 0;
    int v26 = 0;
    uint64_t v27 = 1;
    int v28 = -1;
    int64x2_t v29 = vdupq_n_s64(0x7FF0000000000000uLL);
    double v30 = 1.79769313e308;
    int64x2_t v31 = vdupq_n_s64(0xFFF0000000000000);
    char v32 = 1;
    float64x2_t v112 = v22;
    float64x2_t v113 = v17;
    int64x2_t v110 = v29;
    double v111 = (double)v8;
    int64x2_t v109 = v31;
    unsigned int v108 = v8;
    do
    {
      char v33 = v32;
      float64x2_t v115 = v22;
      double v34 = *(double *)((unint64_t)&v115 & 0xFFFFFFFFFFFFFFF7 | (8 * (v26 & 1)));
      if (fabs(v34) > 0.000001)
      {
        if ((char *)v117.__end_ - (char *)v117.__begin_ >= 1)
        {
          char v35 = v32;
          uint64_t v36 = a3;
          uint64_t v37 = a4;
          uint64_t v38 = a5;
          uint64_t v39 = v27;
          bzero(v117.__begin_, 4* (((unint64_t)((char *)v117.__end_ - (char *)v117.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v117.__end_ - (char *)v117.__begin_) > (std::vector<int>::pointer)3))+ 4);
          uint64_t v27 = v39;
          a5 = v38;
          a4 = v37;
          a3 = v36;
          unsigned int v8 = v108;
          char v33 = v35;
          int64x2_t v31 = v109;
          int64x2_t v29 = v110;
          double v23 = v111;
          float64x2_t v22 = v112;
          float64x2_t v17 = v113;
        }
        unint64_t v40 = v124;
        if ((char *)v125 - (char *)v124 >= 1)
        {
          unint64_t v41 = ((unint64_t)((char *)v125 - (char *)v124) >> 5) + 1;
          do
          {
            *unint64_t v40 = (float64x2_t)v29;
            v40[1] = (float64x2_t)v31;
            v40 += 2;
            --v41;
          }
          while (v41 > 1);
        }
        int v42 = *(_DWORD *)(a3 + 16);
        if (v42)
        {
          uint64_t v43 = *(unsigned int *)(a3 + 12);
          uint64_t v44 = (v42 + v43);
          uint64_t v45 = (unsigned int *)(a1[4] + 4 * v43);
          float64x2_t v114 = v17;
          double v46 = *(double *)((unint64_t)&v114 & 0xFFFFFFFFFFFFFFF7 | (8 * (v26 & 1)));
          uint64_t v47 = 4 * v44 - 4 * v43;
          do
          {
            unsigned int v48 = *v45++;
            int v49 = (int)((*(double *)(a1[7] + 16 * v48 + 8 * (v26 & 1)) - v46) / v34 * v23);
            uint64_t v50 = (float64x2_t *)(a1[10] + 32 * v48);
            if (v49 == v8) {
              int v51 = v11;
            }
            else {
              int v51 = v49;
            }
            v124[2 * v51] = vminnmq_f64(*v50, v124[2 * v51]);
            v124[2 * v51 + 1] = vmaxnmq_f64(v50[1], v124[2 * v51 + 1]);
            ++v117.__begin_[v51];
            v47 -= 4;
          }
          while (v47);
        }
        uint64_t v52 = v125;
        if (v124 != v125)
        {
          float32x2_t v53 = (float64x2_t *)v121;
          float64x2_t v55 = *v124;
          float64x2_t v56 = v124[1];
          long long v54 = v124 + 2;
          *(float64x2_t *)__int32 v121 = *v124;
          v53[1] = v56;
          if (v54 != v52)
          {
            float32x2_t v57 = v53 + 3;
            do
            {
              float64x2_t v58 = *v54;
              float64x2_t v59 = v54[1];
              v54 += 2;
              float64x2_t v55 = vminnmq_f64(v55, v58);
              float64x2_t v56 = vmaxnmq_f64(v56, v59);
              v57[-1] = v55;
              *float32x2_t v57 = v56;
              v57 += 2;
            }
            while (v54 != v52);
          }
        }
        double v60 = v124;
        if (v125 != v124)
        {
          float32x2_t v61 = v119;
          float64x2_t v63 = v125[-2];
          float64x2_t v64 = v125[-1];
          float32x2_t v62 = v125 - 2;
          v119[-2] = v63;
          v61[-1] = v64;
          if (v62 != v60)
          {
            float32x2_t v65 = v61 - 4;
            do
            {
              float64x2_t v66 = v62[-2];
              v62 -= 2;
              float64x2_t v63 = vminnmq_f64(v63, v66);
              float64x2_t v64 = vmaxnmq_f64(v64, v62[1]);
              *float32x2_t v65 = v63;
              v65[1] = v64;
              v65 -= 2;
            }
            while (v62 != v60);
          }
        }
        std::vector<int>::pointer begin = v116.__begin_;
        int64_t v68 = (char *)v116.__end_ - (char *)v116.__begin_;
        if (v116.__end_ != v116.__begin_)
        {
          std::vector<int>::pointer v69 = v117.__begin_;
          int v70 = *v117.__begin_;
          *v116.__begin_ = *v117.__begin_;
          if (v68 != 4)
          {
            uint64_t v71 = v68 >> 2;
            uint64_t v72 = v69 + 1;
            uint64_t v73 = begin + 1;
            uint64_t v74 = 4 * v71 - 4;
            do
            {
              int v75 = *v72++;
              v70 += v75;
              *v73++ = v70;
              v74 -= 4;
            }
            while (v74);
          }
        }
        if (v11)
        {
          uint64_t v76 = 0;
          uint64_t v77 = (float64x2_t *)v121;
          float32x2_t v78 = (float64x2_t *)((char *)__p + 32);
          do
          {
            uint64_t v79 = begin[v76];
            float64x2_t v80 = v77[1];
            int64x2_t v81 = vcgtq_f64(*v77, v80);
            float64x2_t v82 = vsubq_f64(v80, *v77);
            *(void *)&double v83 = *(_OWORD *)&vmulq_laneq_f64(v82, v82, 1);
            if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v81, 1), (int8x16_t)v81).i64[0] < 0) {
              double v83 = 0.0;
            }
            float64x2_t v84 = v78[1];
            int64x2_t v85 = vcgtq_f64(*v78, v84);
            float64x2_t v86 = vsubq_f64(v84, *v78);
            *(void *)&double v87 = *(_OWORD *)&vmulq_laneq_f64(v86, v86, 1);
            if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v85, 1), (int8x16_t)v85).i64[0] < 0) {
              double v87 = 0.0;
            }
            double v88 = v87 * (double)(*(_DWORD *)(a3 + 16) - v79) + (double)v79 * v83;
            if (v88 < v30)
            {
              float64x2_t v89 = v77[1];
              *a4 = *v77;
              a4[1] = v89;
              float64x2_t v90 = v78[1];
              *a5 = *v78;
              a5[1] = v90;
              int v28 = v26;
              uint64_t v25 = v79;
              uint64_t v27 = v76;
              double v30 = v88;
            }
            ++v76;
            v77 += 2;
            v78 += 2;
          }
          while (v11 != v76);
        }
      }
      char v32 = 0;
      int v26 = 1;
    }
    while ((v33 & 1) != 0);
    uint64_t v91 = a1[4];
    uint64_t v92 = *(unsigned int *)(a3 + 12);
    float32x2_t v93 = (_DWORD *)(v91 + 4 * v92);
    LODWORD(v92) = *(_DWORD *)(a3 + 16) + v92;
    __int32 v127 = a1;
    float64x2_t v128 = v17;
    float64x2_t v129 = v107;
    float64x2_t v130 = v22;
    int v131 = v27;
    int v132 = v28;
    unsigned int v133 = v8;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<double,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int,geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v93, (_DWORD *)(v91 + 4 * v92), &v127);
  }
  if (v116.__begin_)
  {
    v116.__end_ = v116.__begin_;
    operator delete(v116.__begin_);
  }
  if (v117.__begin_)
  {
    v117.__end_ = v117.__begin_;
    operator delete(v117.__begin_);
  }
  if (__p)
  {
    float64x2_t v119 = (float64x2_t *)__p;
    operator delete(__p);
  }
  if (v121)
  {
    __int32 v122 = v121;
    operator delete(v121);
  }
  if (v124)
  {
    __int32 v125 = v124;
    operator delete(v124);
  }
  return v25;
}

void std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::__clone(uint64_t a1)
{
  unint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)unint64_t v2 = &unk_26EA06430;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06430;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::operator()(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  return geom::bvh<double,(unsigned char)2>::partition_node_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), a2, a3, a4);
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)2>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)>::target_type()
{
}

uint64_t geom::bvh<double,(unsigned char)2>::partition_node_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)2>>(void *a1, unsigned int a2, uint64_t a3, float64x2_t *a4, float64x2_t *a5)
{
  uint64_t v128 = *MEMORY[0x263EF8340];
  unsigned int v118 = 0;
  float64x2_t v119 = 0;
  uint64_t v120 = 0;
  unint64_t v10 = a2;
  std::vector<geom::bbox<double,(unsigned char)2>>::resize((uint64_t)&v118, a2);
  float64x2_t v115 = 0;
  std::vector<int> v116 = 0;
  uint64_t v117 = 0;
  std::vector<geom::bbox<double,(unsigned char)2>>::resize((uint64_t)&v115, v10);
  std::vector<int> __p = 0;
  float64x2_t v113 = 0;
  uint64_t v114 = 0;
  std::vector<geom::bbox<double,(unsigned char)2>>::resize((uint64_t)&__p, v10);
  memset(&v111, 0, sizeof(v111));
  std::vector<unsigned int>::resize(&v111, v10);
  memset(&v110, 0, sizeof(v110));
  std::vector<int>::size_type v11 = a2 - 1;
  std::vector<unsigned int>::resize(&v110, v11);
  uint64_t v12 = a3;
  uint64_t v14 = *(unsigned int *)(a3 + 12);
  unsigned int v13 = *(_DWORD *)(a3 + 16);
  uint64_t v15 = v13 + v14;
  uint64_t v16 = (unsigned int *)(a1[4] + 4 * v14);
  if (v13)
  {
    uint64_t v17 = 4 * v15 - 4 * v14;
    float64x2_t v18 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v19 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    unsigned int v20 = (unsigned int *)(a1[4] + 4 * v14);
    do
    {
      unsigned int v21 = *v20++;
      float64x2_t v22 = *(float64x2_t *)(a1[7] + 16 * v21);
      float64x2_t v18 = vminnmq_f64(v18, v22);
      float64x2_t v19 = vmaxnmq_f64(v19, v22);
      v17 -= 4;
    }
    while (v17);
  }
  else
  {
    float64x2_t v19 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v18 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  }
  float64x2_t v23 = vsubq_f64(v19, v18);
  double v24 = (double)a2;
  float64x2_t v25 = vdivq_f64(v23, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a2), 0));
  if (sqrt(vaddvq_f64(vmulq_f64(v25, v25))) <= 0.000001)
  {
    uint64_t v89 = v14 + (v13 >> 1);
    float64x2_t v90 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v91 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v92 = v91;
    float64x2_t v93 = v90;
    if (v13 >= 2)
    {
      uint64_t v94 = 4 * v89 - 4 * v14;
      float64x2_t v92 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v93 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      do
      {
        unsigned int v95 = *v16++;
        float64x2_t v96 = (float64x2_t *)(a1[10] + 32 * v95);
        float64x2_t v92 = vminnmq_f64(v92, *v96);
        float64x2_t v93 = vmaxnmq_f64(v93, v96[1]);
        v94 -= 4;
      }
      while (v94);
    }
    *a4 = v92;
    a4[1] = v93;
    if (v13 != v13 >> 1)
    {
      float64x2_t v97 = (unsigned int *)(a1[4] + 4 * v89);
      uint64_t v98 = 4 * v15 - 4 * v89;
      float64x2_t v91 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v90 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      do
      {
        unsigned int v99 = *v97++;
        unsigned int v100 = (float64x2_t *)(a1[10] + 32 * v99);
        float64x2_t v91 = vminnmq_f64(v91, *v100);
        float64x2_t v90 = vmaxnmq_f64(v90, v100[1]);
        v98 -= 4;
      }
      while (v98);
    }
    *a5 = v91;
    a5[1] = v90;
    uint64_t v26 = *(_DWORD *)(a3 + 16) >> 1;
  }
  else
  {
    uint64_t v26 = 0;
    int v27 = 0;
    uint64_t v28 = 1;
    int v29 = -1;
    int64x2_t v30 = vdupq_n_s64(0x7FF0000000000000uLL);
    double v31 = 1.79769313e308;
    int64x2_t v32 = vdupq_n_s64(0xFFF0000000000000);
    char v33 = 1;
    float64x2_t v105 = v23;
    float64x2_t v106 = v18;
    int64x2_t v104 = v30;
    float64x2_t v102 = v19;
    int64x2_t v103 = v32;
    do
    {
      char v34 = v33;
      float64x2_t v109 = v23;
      double v35 = *(double *)((unint64_t)&v109 & 0xFFFFFFFFFFFFFFF7 | (8 * (v27 & 1)));
      if (fabs(v35) > 0.000001)
      {
        if ((char *)v111.__end_ - (char *)v111.__begin_ >= 1)
        {
          unsigned int v107 = v26;
          uint64_t v36 = v12;
          uint64_t v37 = a4;
          uint64_t v38 = a5;
          uint64_t v39 = v28;
          bzero(v111.__begin_, 4* (((unint64_t)((char *)v111.__end_ - (char *)v111.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v111.__end_ - (char *)v111.__begin_) > (std::vector<int>::pointer)3))+ 4);
          uint64_t v28 = v39;
          a5 = v38;
          a4 = v37;
          int64x2_t v32 = v103;
          int64x2_t v30 = v104;
          double v24 = (double)a2;
          float64x2_t v23 = v105;
          float64x2_t v18 = v106;
          uint64_t v12 = v36;
          uint64_t v26 = v107;
        }
        unint64_t v40 = v118;
        if ((char *)v119 - (char *)v118 >= 1)
        {
          unint64_t v41 = ((unint64_t)((char *)v119 - (char *)v118) >> 5) + 1;
          do
          {
            *unint64_t v40 = (float64x2_t)v30;
            v40[1] = (float64x2_t)v32;
            v40 += 2;
            --v41;
          }
          while (v41 > 1);
        }
        int v42 = *(_DWORD *)(v12 + 16);
        if (v42)
        {
          uint64_t v43 = *(unsigned int *)(v12 + 12);
          uint64_t v44 = (v42 + v43);
          uint64_t v45 = (unsigned int *)(a1[4] + 4 * v43);
          float64x2_t v108 = v18;
          double v46 = *(double *)((unint64_t)&v108 & 0xFFFFFFFFFFFFFFF7 | (8 * (v27 & 1)));
          uint64_t v47 = 4 * v44 - 4 * v43;
          do
          {
            unsigned int v48 = *v45++;
            int v49 = (int)((*(double *)(a1[7] + 16 * v48 + 8 * (v27 & 1)) - v46) / v35 * v24);
            uint64_t v50 = (float64x2_t *)(a1[10] + 32 * v48);
            if (v49 == a2) {
              int v51 = v11;
            }
            else {
              int v51 = v49;
            }
            v118[2 * v51] = vminnmq_f64(*v50, v118[2 * v51]);
            v118[2 * v51 + 1] = vmaxnmq_f64(v50[1], v118[2 * v51 + 1]);
            ++v111.__begin_[v51];
            v47 -= 4;
          }
          while (v47);
        }
        uint64_t v52 = v119;
        if (v118 != v119)
        {
          float32x2_t v53 = (float64x2_t *)v115;
          float64x2_t v55 = *v118;
          float64x2_t v56 = v118[1];
          long long v54 = v118 + 2;
          *(float64x2_t *)float64x2_t v115 = *v118;
          v53[1] = v56;
          if (v54 != v52)
          {
            float32x2_t v57 = v53 + 3;
            do
            {
              float64x2_t v58 = *v54;
              float64x2_t v59 = v54[1];
              v54 += 2;
              float64x2_t v55 = vminnmq_f64(v55, v58);
              float64x2_t v56 = vmaxnmq_f64(v56, v59);
              v57[-1] = v55;
              *float32x2_t v57 = v56;
              v57 += 2;
            }
            while (v54 != v52);
          }
        }
        double v60 = v118;
        if (v119 != v118)
        {
          float32x2_t v61 = v113;
          float64x2_t v63 = v119[-2];
          float64x2_t v64 = v119[-1];
          float32x2_t v62 = v119 - 2;
          v113[-2] = v63;
          v61[-1] = v64;
          if (v62 != v60)
          {
            float32x2_t v65 = v61 - 4;
            do
            {
              float64x2_t v66 = v62[-2];
              v62 -= 2;
              float64x2_t v63 = vminnmq_f64(v63, v66);
              float64x2_t v64 = vmaxnmq_f64(v64, v62[1]);
              *float32x2_t v65 = v63;
              v65[1] = v64;
              v65 -= 2;
            }
            while (v62 != v60);
          }
        }
        std::vector<int>::pointer begin = v110.__begin_;
        int64_t v68 = (char *)v110.__end_ - (char *)v110.__begin_;
        if (v110.__end_ != v110.__begin_)
        {
          std::vector<int>::pointer v69 = v111.__begin_;
          int v70 = *v111.__begin_;
          *v110.__begin_ = *v111.__begin_;
          if (v68 != 4)
          {
            uint64_t v71 = v68 >> 2;
            uint64_t v72 = v69 + 1;
            uint64_t v73 = begin + 1;
            uint64_t v74 = 4 * v71 - 4;
            do
            {
              int v75 = *v72++;
              v70 += v75;
              *v73++ = v70;
              v74 -= 4;
            }
            while (v74);
          }
        }
        if (v11)
        {
          uint64_t v76 = 0;
          uint64_t v77 = (float64x2_t *)v115;
          float32x2_t v78 = (float64x2_t *)((char *)__p + 32);
          do
          {
            float64x2_t v79 = vmaxnmq_f64(*v77, *v78);
            float64x2_t v80 = vminnmq_f64(v77[1], v78[1]);
            int64x2_t v81 = vcgtq_f64(v79, v80);
            float64x2_t v82 = vsubq_f64(v80, v79);
            *(void *)&double v83 = *(_OWORD *)&vmulq_laneq_f64(v82, v82, 1);
            if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v81, 1), (int8x16_t)v81).i64[0] < 0) {
              double v83 = 0.0;
            }
            if (v83 < v31)
            {
              uint64_t v26 = begin[v76];
              float64x2_t v84 = v77[1];
              *a4 = *v77;
              a4[1] = v84;
              float64x2_t v85 = v78[1];
              *a5 = *v78;
              a5[1] = v85;
              int v29 = v27;
              uint64_t v28 = v76;
              double v31 = v83;
            }
            ++v76;
            v77 += 2;
            v78 += 2;
          }
          while (v11 != v76);
        }
      }
      char v33 = 0;
      int v27 = 1;
    }
    while ((v34 & 1) != 0);
    uint64_t v86 = a1[4];
    uint64_t v87 = *(unsigned int *)(v12 + 12);
    double v88 = (_DWORD *)(v86 + 4 * v87);
    LODWORD(v87) = *(_DWORD *)(v12 + 16) + v87;
    __int32 v121 = a1;
    float64x2_t v122 = v18;
    float64x2_t v123 = v102;
    float64x2_t v124 = v23;
    int v125 = v28;
    int v126 = v29;
    unsigned int v127 = a2;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<double,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int,geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v88, (_DWORD *)(v86 + 4 * v87), &v121);
  }
  if (v110.__begin_)
  {
    v110.__end_ = v110.__begin_;
    operator delete(v110.__begin_);
  }
  if (v111.__begin_)
  {
    v111.__end_ = v111.__begin_;
    operator delete(v111.__begin_);
  }
  if (__p)
  {
    float64x2_t v113 = (float64x2_t *)__p;
    operator delete(__p);
  }
  if (v115)
  {
    std::vector<int> v116 = v115;
    operator delete(v115);
  }
  if (v118)
  {
    float64x2_t v119 = v118;
    operator delete(v118);
  }
  return v26;
}

__n128 std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::push_back(void *a1, __n128 *a2)
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[1];
  uint64_t v6 = 170 * ((v4 - v5) >> 3) - 1;
  if (v4 == v5) {
    uint64_t v6 = 0;
  }
  unint64_t v7 = a1[5] + a1[4];
  if (v6 == v7)
  {
    std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::__add_back_capacity(a1);
    uint64_t v5 = a1[1];
    unint64_t v7 = a1[5] + a1[4];
  }
  unsigned int v8 = (__n128 *)(*(void *)(v5 + 8 * (v7 / 0xAA)) + 24 * (v7 % 0xAA));
  __n128 result = *a2;
  v8[1].n128_u64[0] = a2[1].n128_u64[0];
  __n128 *v8 = result;
  ++a1[5];
  return result;
}

void std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0xAA;
  unint64_t v4 = v2 - 170;
  if (v3)
  {
    uint64_t v5 = (uint64_t)(a1 + 3);
    uint64_t v6 = (char *)a1[3];
    a1[4] = v4;
    unint64_t v7 = (void *)a1[1];
    unsigned int v8 = (char *)a1[2];
    uint64_t v11 = *v7;
    double v9 = (char *)(v7 + 1);
    uint64_t v10 = v11;
    a1[1] = v9;
    if (v8 != v6)
    {
LABEL_29:
      *(void *)unsigned int v8 = v10;
      a1[2] += 8;
      return;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v29 = 1;
      }
      else {
        unint64_t v29 = (uint64_t)&v8[-*a1] >> 2;
      }
      int64x2_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v5, v29);
      double v31 = &v30[8 * (v29 >> 2)];
      char v33 = &v30[8 * v32];
      char v34 = (uint64_t *)a1[1];
      unsigned int v8 = v31;
      uint64_t v35 = a1[2] - (void)v34;
      if (v35)
      {
        unsigned int v8 = &v31[v35 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v36 = 8 * (v35 >> 3);
        uint64_t v37 = &v30[8 * (v29 >> 2)];
        do
        {
          uint64_t v38 = *v34++;
          *(void *)uint64_t v37 = v38;
          v37 += 8;
          v36 -= 8;
        }
        while (v36);
      }
      goto LABEL_26;
    }
LABEL_5:
    uint64_t v13 = v12 >> 3;
    BOOL v14 = v12 >> 3 < -1;
    uint64_t v15 = (v12 >> 3) + 2;
    if (v14) {
      uint64_t v16 = v15;
    }
    else {
      uint64_t v16 = v13 + 1;
    }
    uint64_t v17 = -(v16 >> 1);
    uint64_t v18 = v16 >> 1;
    float64x2_t v19 = &v9[-8 * v18];
    int64_t v20 = v8 - v9;
    if (v8 != v9)
    {
      memmove(&v9[-8 * v18], v9, v8 - v9);
      double v9 = (char *)a1[1];
    }
    unsigned int v8 = &v19[v20];
    a1[1] = &v9[8 * v17];
    a1[2] = &v19[v20];
    goto LABEL_29;
  }
  uint64_t v21 = a1[2];
  unint64_t v22 = (v21 - a1[1]) >> 3;
  uint64_t v23 = a1[3];
  uint64_t v24 = v23 - *a1;
  if (v22 < v24 >> 3)
  {
    if (v23 != v21)
    {
      *(void *)&long long v54 = operator new(0xFF0uLL);
      std::__split_buffer<unsigned int *>::push_back(a1, &v54);
      return;
    }
    *(void *)&long long v54 = operator new(0xFF0uLL);
    std::__split_buffer<unsigned int *>::push_front((uint64_t)a1, &v54);
    unint64_t v40 = (void *)a1[1];
    unsigned int v8 = (char *)a1[2];
    uint64_t v41 = *v40;
    double v9 = (char *)(v40 + 1);
    uint64_t v10 = v41;
    a1[1] = v9;
    if (v8 != (char *)a1[3]) {
      goto LABEL_29;
    }
    uint64_t v12 = (uint64_t)&v9[-*a1];
    if ((unint64_t)v9 <= *a1)
    {
      if (v8 == (char *)*a1) {
        unint64_t v46 = 1;
      }
      else {
        unint64_t v46 = (uint64_t)&v8[-*a1] >> 2;
      }
      int64x2_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v46);
      double v31 = &v30[8 * (v46 >> 2)];
      char v33 = &v30[8 * v47];
      unsigned int v48 = (uint64_t *)a1[1];
      unsigned int v8 = v31;
      uint64_t v49 = a1[2] - (void)v48;
      if (v49)
      {
        unsigned int v8 = &v31[v49 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v50 = 8 * (v49 >> 3);
        int v51 = &v30[8 * (v46 >> 2)];
        do
        {
          uint64_t v52 = *v48++;
          *(void *)int v51 = v52;
          v51 += 8;
          v50 -= 8;
        }
        while (v50);
      }
LABEL_26:
      uint64_t v39 = (char *)*a1;
      *a1 = v30;
      a1[1] = v31;
      a1[2] = v8;
      a1[3] = v33;
      if (v39)
      {
        operator delete(v39);
        unsigned int v8 = (char *)a1[2];
      }
      goto LABEL_29;
    }
    goto LABEL_5;
  }
  if (v23 == *a1) {
    unint64_t v25 = 1;
  }
  else {
    unint64_t v25 = v24 >> 2;
  }
  float64x2_t v56 = a1 + 3;
  *(void *)&long long v54 = std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(a1 + 3), v25);
  *((void *)&v54 + 1) = v54 + 8 * v22;
  *(void *)&long long v55 = *((void *)&v54 + 1);
  *((void *)&v55 + 1) = v54 + 8 * v26;
  float32x2_t v53 = operator new(0xFF0uLL);
  std::__split_buffer<unsigned int *>::push_back(&v54, &v53);
  int v27 = (char *)a1[2];
  if (v27 == (char *)a1[1])
  {
    uint64_t v28 = (char *)a1[2];
  }
  else
  {
    do
    {
      v27 -= 8;
      std::__split_buffer<unsigned int *>::push_front((uint64_t)&v54, v27);
    }
    while (v27 != (char *)a1[1]);
    uint64_t v28 = (char *)a1[2];
  }
  int v42 = (char *)*a1;
  long long v43 = v54;
  long long v44 = v55;
  *(void *)&long long v54 = *a1;
  *((void *)&v54 + 1) = v27;
  uint64_t v45 = a1[3];
  *(_OWORD *)a1 = v43;
  *((_OWORD *)a1 + 1) = v44;
  *(void *)&long long v55 = v28;
  *((void *)&v55 + 1) = v45;
  if (v28 != v27) {
    *(void *)&long long v55 = &v28[(v27 - v28 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (v42) {
    operator delete(v42);
  }
}

uint64_t std::deque<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state,std::allocator<geom::bvh<double,(unsigned char)2>::raycast(std::function<BOOL ()(unsigned int,geom::ray<double,(unsigned char)2>,double &)>,geom::ray<double,(unsigned char)2>,double &,unsigned int &)::state>>::__maybe_remove_back_spare[abi:nn180100](void *a1, int a2)
{
  uint64_t v3 = a1[1];
  uint64_t v2 = a1[2];
  if (v2 == v3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = 170 * ((v2 - v3) >> 3) - 1;
  }
  unint64_t v5 = v4 - (a1[5] + a1[4]);
  if (v5 < 0xAA) {
    a2 = 1;
  }
  if (v5 < 0x154) {
    int v7 = a2;
  }
  else {
    int v7 = 0;
  }
  if ((v7 & 1) == 0)
  {
    operator delete(*(void **)(v2 - 8));
    a1[2] -= 8;
  }
  return v7 ^ 1u;
}

void std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::~__func()
{
}

void *std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA064B0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA064B0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 8);
  *a3 = &unk_26EA06520;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::target_type()
{
}

void std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA06520;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06520;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(_DWORD *)(a1 + 16) & 1;
  return *(double *)(*(void *)(*(void *)(a1 + 8) + 56) + 16 * *a2 + 8 * v3) < *(double *)(*(void *)(*(void *)(a1 + 8) + 56)
                                                                                                + 16 * *a3
                                                                                                + 8 * v3);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::target_type()
{
}

void std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1}>,void ()(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)>::~__func()
{
}

__n128 std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1}>,void ()(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA065B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1}>,void ()(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA065B0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1}>,void ()(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)>::operator()(uint64_t a1, uint64_t a2, int *a3, void *a4, _DWORD *a5)
{
  return geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1}::operator()((uint64_t *)(a1 + 8), a2, *a3, a4, a5);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1}>,void ()(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1}>,void ()(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)>::target_type()
{
}

void *geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)#1}::operator()(uint64_t *a1, uint64_t a2, int a3, void *a4, _DWORD *a5)
{
  _OWORD v17[4] = *MEMORY[0x263EF8340];
  uint64_t v9 = *a1;
  unint64_t v10 = *(unsigned int *)(a2 + 16);
  uint64_t v11 = (int *)(*(void *)(*a1 + 32) + 4 * *(unsigned int *)(a2 + 12));
  std::function<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::operator()(a1[1], a3);
  if ((v10 >> 1) != v10) {
    std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *>(v11, &v11[v10 >> 1], &v11[v10], (uint64_t)v17);
  }
  std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::~__value_func[abi:nn180100](v17);
  *a4 = *(void *)(*(void *)(v9 + 56) + 16 * v11[v10 >> 1] + 8 * (a3 & 1));
  std::function<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::operator()(a1[1], a3);
  uint64_t v12 = std::__upper_bound[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)>,unsigned int *,unsigned int *,unsigned int,std::__identity>(v11, &v11[v10], &v11[v10 >> 1], (uint64_t)v16);
  __n128 result = std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::~__value_func[abi:nn180100](v16);
  unint64_t v14 = (unint64_t)((char *)v12 - (char *)v11) >> 2;
  if (*(_DWORD *)(a2 + 16) - (int)v14 < v14) {
    LODWORD(v14) = *(_DWORD *)(a2 + 16) - v14;
  }
  *a5 = v14;
  return result;
}

void *std::__function::__value_func<void ()(geom::bvh_node<double,(unsigned char)2> const&,int,double &,unsigned int &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::~__func()
{
}

__n128 std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26EA06640;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06640;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  return *(double *)(*(void *)(*(void *)(a1 + 24) + 56) + 16 * *a2 + 8 * (**(_DWORD **)(a1 + 16) & 1)) < **(double **)(a1 + 8);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)2>::partition_node_median(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target_type()
{
}

_DWORD *std::__partition_impl[abi:nn180100]<geom::bvh<double,(unsigned char)2>::partition_node_middle(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda(unsigned int)#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(_DWORD *a1, _DWORD *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v3 = *(void *)(*(void *)a3 + 56);
    double v4 = *(double *)(a3 + 16);
    unint64_t v5 = a2;
LABEL_3:
    int v6 = *(_DWORD *)(a3 + 8);
    while (1)
    {
      uint64_t v7 = *a1;
      if (*(double *)(v3 + 16 * v7 + 8 * (v6 & 1)) >= v4) {
        break;
      }
      if (++a1 == v5) {
        return v5;
      }
    }
    while (--v5 != a1)
    {
      uint64_t v8 = *v5;
      if (*(double *)(v3 + 16 * v8 + 8 * (v6 & 1)) < v4)
      {
        *a1++ = v8;
        _DWORD *v5 = v7;
        if (v5 != a1) {
          goto LABEL_3;
        }
        return v5;
      }
    }
  }
  return a1;
}

uint64_t std::__function::__value_func<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<geom::bvh<float,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::~__func()
{
}

void *std::__function::__func<geom::bvh<float,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA066C0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA066C0;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::operator()(uint64_t a1, float32x4_t *a2, uint64_t a3, uint64_t a4)
{
  return geom::bvh<float,(unsigned char)3>::partition_node_middle(*(void **)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::target_type()
{
}

void *std::__function::__value_func<unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom::bvh<float,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::~__func()
{
}

void *std::__function::__func<geom::bvh<float,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA06750;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA06750;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return geom::bvh<float,(unsigned char)3>::partition_node_median(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::target_type()
{
}

void std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26EA067D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA067D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return geom::bvh<float,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), a2, a3, a4);
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::target_type()
{
}

uint64_t geom::bvh<float,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v153 = *MEMORY[0x263EF8340];
  uint64_t v143 = 0;
  float64x2_t v144 = 0;
  uint64_t v145 = 0;
  unint64_t v10 = a2;
  std::vector<geom::bbox<float,(unsigned char)3>>::resize((uint64_t)&v143, a2);
  int v140 = 0;
  int v141 = 0;
  uint64_t v142 = 0;
  std::vector<geom::bbox<float,(unsigned char)3>>::resize((uint64_t)&v140, v10);
  std::vector<int> __p = 0;
  int v138 = 0;
  uint64_t v139 = 0;
  std::vector<geom::bbox<float,(unsigned char)3>>::resize((uint64_t)&__p, v10);
  memset(&v136, 0, sizeof(v136));
  std::vector<unsigned int>::resize(&v136, v10);
  memset(&v135, 0, sizeof(v135));
  std::vector<int>::size_type v11 = a2 - 1;
  std::vector<unsigned int>::resize(&v135, v11);
  uint64_t v14 = *(unsigned int *)(a3 + 12);
  unsigned int v13 = *(_DWORD *)(a3 + 16);
  uint64_t v15 = v13 + v14;
  uint64_t v16 = (unsigned int *)(a1[4] + 4 * v14);
  if (v13)
  {
    uint64_t v17 = 4 * v15 - 4 * v14;
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i32[2] = 127;
    int64_t v20 = (unsigned int *)(a1[4] + 4 * v14);
    do
    {
      unsigned int v21 = *v20++;
      float32x4_t v22 = *(float32x4_t *)(a1[7] + 16 * v21);
      v18.i32[3] = 0;
      v22.i32[3] = 0;
      float32x4_t v18 = vminnmq_f32(v18, v22);
      v19.i32[3] = 0;
      float32x4_t v19 = vmaxnmq_f32(v19, v22);
      v17 -= 4;
    }
    while (v17);
  }
  else
  {
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
  }
  float32x4_t v23 = vsubq_f32(v19, v18);
  *(float *)v12.i32 = (float)a2;
  float32x4_t v24 = vdivq_f32(v23, (float32x4_t)vdupq_lane_s32(v12, 0));
  float32x4_t v25 = vmulq_f32(v24, v24);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]) <= 0.00001)
  {
    uint64_t v104 = v14 + (v13 >> 1);
    float32x4_t v105 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v106.i64[0] = 0x7F0000007FLL;
    v106.i32[2] = 127;
    float32x4_t v107 = v105;
    v108.i64[0] = 0x7F0000007FLL;
    v108.i32[2] = 127;
    if (v13 >= 2)
    {
      uint64_t v109 = 4 * v104 - 4 * v14;
      int32x4_t v110 = vdupq_n_s32(0x7F800000u);
      v111.i64[0] = 0x7F0000007FLL;
      v111.i64[1] = 0x7F0000007FLL;
      do
      {
        unsigned int v112 = *v16++;
        float64x2_t v113 = (float32x4_t *)(a1[10] + 32 * v112);
        float32x4_t v114 = (float32x4_t)v110;
        v114.i32[3] = 0;
        float32x4_t v115 = *v113;
        float32x4_t v116 = v113[1];
        v115.i32[3] = 0;
        float32x4_t v107 = vminnmq_f32(v114, v115);
        float32x4_t v117 = v111;
        v117.i32[3] = 0;
        v116.i32[3] = 0;
        v107.i32[3] = v110.i32[3];
        float32x4_t v108 = vmaxnmq_f32(v117, v116);
        v108.i32[3] = v111.i32[3];
        float32x4_t v111 = v108;
        int32x4_t v110 = (int32x4_t)v107;
        v109 -= 4;
      }
      while (v109);
    }
    *(_DWORD *)(a4 + 8) = v107.i32[2];
    *(void *)a4 = v107.i64[0];
    *(_DWORD *)(a4 + 24) = v108.i32[2];
    *(void *)(a4 + 16) = v108.i64[0];
    if (v13 != v13 >> 1)
    {
      unsigned int v118 = (unsigned int *)(a1[4] + 4 * v104);
      uint64_t v119 = 4 * v15 - 4 * v104;
      int32x4_t v120 = vdupq_n_s32(0x7F800000u);
      v121.i64[0] = 0x7F0000007FLL;
      v121.i64[1] = 0x7F0000007FLL;
      do
      {
        unsigned int v122 = *v118++;
        float64x2_t v123 = (float32x4_t *)(a1[10] + 32 * v122);
        float32x4_t v124 = (float32x4_t)v120;
        v124.i32[3] = 0;
        float32x4_t v125 = *v123;
        float32x4_t v126 = v123[1];
        v125.i32[3] = 0;
        float32x4_t v105 = vminnmq_f32(v124, v125);
        float32x4_t v127 = v121;
        v127.i32[3] = 0;
        v126.i32[3] = 0;
        v105.i32[3] = v120.i32[3];
        float32x4_t v106 = vmaxnmq_f32(v127, v126);
        v106.i32[3] = v121.i32[3];
        float32x4_t v121 = v106;
        int32x4_t v120 = (int32x4_t)v105;
        v119 -= 4;
      }
      while (v119);
    }
    *(void *)a5 = v105.i64[0];
    *(_DWORD *)(a5 + 8) = v105.i32[2];
    *(void *)(a5 + 16) = v106.i64[0];
    *(_DWORD *)(a5 + 24) = v106.i32[2];
    uint64_t v26 = *(_DWORD *)(a3 + 16) >> 1;
  }
  else
  {
    uint64_t v26 = 0;
    int v27 = 0;
    int v28 = -1;
    int v29 = 1;
    float v30 = 3.4028e38;
    int32x4_t v31 = vdupq_n_s32(0x7F800000u);
    *(void *)&long long v32 = 0x7F0000007FLL;
    *((void *)&v32 + 1) = 0x7F0000007FLL;
    float32x4_t v131 = v23;
    float32x4_t v132 = v18;
    float32x4_t v129 = v19;
    int32x4_t v130 = v31;
    do
    {
      float32x4_t v134 = v23;
      float v33 = *(float *)((unint64_t)&v134 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
      if (fabsf(v33) > 0.00001)
      {
        if ((char *)v136.__end_ - (char *)v136.__begin_ >= 1)
        {
          bzero(v136.__begin_, 4* (((unint64_t)((char *)v136.__end_ - (char *)v136.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v136.__end_ - (char *)v136.__begin_) > (std::vector<int>::pointer)3))+ 4);
          *(void *)&long long v32 = 0x7F0000007FLL;
          *((void *)&v32 + 1) = 0x7F0000007FLL;
          int32x4_t v31 = v130;
          *(float *)v12.i32 = (float)a2;
          float32x4_t v23 = v131;
          float32x4_t v18 = v132;
        }
        char v34 = v143;
        if ((char *)v144 - (unsigned char *)v143 >= 1)
        {
          unint64_t v35 = ((unint64_t)((char *)v144 - (unsigned char *)v143) >> 5) + 1;
          do
          {
            *char v34 = v31;
            v34[1] = v32;
            v34 += 2;
            --v35;
          }
          while (v35 > 1);
        }
        int v36 = *(_DWORD *)(a3 + 16);
        if (v36)
        {
          uint64_t v37 = *(unsigned int *)(a3 + 12);
          uint64_t v38 = (v36 + v37);
          uint64_t v39 = (unsigned int *)(a1[4] + 4 * v37);
          float32x4_t v133 = v18;
          float v40 = *(float *)((unint64_t)&v133 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
          uint64_t v41 = 4 * v38 - 4 * v37;
          do
          {
            unsigned int v42 = *v39++;
            long long v43 = (float32x4_t *)(a1[10] + 32 * v42);
            int v44 = (int)(float)((float)((float)(*(float *)(a1[7] + 16 * v42 + 4 * (v27 & 3)) - v40) / v33)
                             * *(float *)v12.i32);
            float32x4_t v45 = *v43;
            if (v44 == a2) {
              int v44 = v11;
            }
            uint64_t v46 = 32 * v44;
            float32x4_t v47 = *(float32x4_t *)((char *)v143 + v46);
            v45.i32[3] = 0;
            v47.i32[3] = 0;
            *(float32x4_t *)((char *)v143 + v46) = vminnmq_f32(v45, v47);
            float32x4_t v48 = v43[1];
            v48.i32[3] = 0;
            float32x4_t v49 = *(float32x4_t *)((char *)v143 + v46 + 16);
            v49.i32[3] = 0;
            *(float32x4_t *)((char *)v143 + v46 + 16) = vmaxnmq_f32(v48, v49);
            ++v136.__begin_[v44];
            v41 -= 4;
          }
          while (v41);
        }
        uint64_t v50 = v144;
        if (v143 != v144)
        {
          int v51 = (float32x4_t *)v140;
          float32x4_t v53 = *(float32x4_t *)v143;
          float32x4_t v54 = *((float32x4_t *)v143 + 1);
          uint64_t v52 = (float32x4_t *)((char *)v143 + 32);
          *(_OWORD *)int v140 = *(_OWORD *)v143;
          v51[1] = v54;
          if (v52 != v50)
          {
            long long v55 = v51 + 3;
            do
            {
              float32x4_t v56 = v53;
              v56.i32[3] = 0;
              float32x4_t v57 = *v52;
              float32x4_t v58 = v52[1];
              v52 += 2;
              v57.i32[3] = 0;
              float32x4_t v59 = vminnmq_f32(v56, v57);
              float32x4_t v60 = v54;
              v60.i32[3] = 0;
              v58.i32[3] = 0;
              float32x4_t v61 = vmaxnmq_f32(v60, v58);
              v59.i32[3] = v53.i32[3];
              v61.i32[3] = v54.i32[3];
              v55[-1] = v59;
              *long long v55 = v61;
              v55 += 2;
              float32x4_t v53 = v59;
              float32x4_t v54 = v61;
            }
            while (v52 != v50);
          }
        }
        float32x2_t v62 = (float32x4_t *)v143;
        if (v144 != v143)
        {
          float64x2_t v63 = v138;
          float32x4_t v65 = v144[-2];
          float32x4_t v66 = v144[-1];
          float64x2_t v64 = v144 - 2;
          *(v138 - 2) = v65;
          *(v63 - 1) = v66;
          if (v64 != v62)
          {
            int64_t v67 = (float32x4_t *)(v63 - 4);
            do
            {
              float32x4_t v68 = v64[-2];
              float32x4_t v69 = v64[-1];
              v64 -= 2;
              float32x4_t v70 = v65;
              v70.i32[3] = 0;
              v68.i32[3] = 0;
              float32x4_t v71 = v66;
              v71.i32[3] = 0;
              v69.i32[3] = 0;
              float32x4_t v72 = vminnmq_f32(v70, v68);
              float32x4_t v73 = vmaxnmq_f32(v71, v69);
              v72.i32[3] = v65.i32[3];
              v73.i32[3] = v66.i32[3];
              float32x4_t *v67 = v72;
              v67[1] = v73;
              v67 -= 2;
              float32x4_t v65 = v72;
              float32x4_t v66 = v73;
            }
            while (v64 != v62);
          }
        }
        std::vector<int>::pointer begin = v135.__begin_;
        int64_t v75 = (char *)v135.__end_ - (char *)v135.__begin_;
        if (v135.__end_ != v135.__begin_)
        {
          std::vector<int>::pointer v76 = v136.__begin_;
          int v77 = *v136.__begin_;
          *v135.__begin_ = *v136.__begin_;
          if (v75 != 4)
          {
            uint64_t v78 = v75 >> 2;
            float64x2_t v79 = v76 + 1;
            float64x2_t v80 = begin + 1;
            uint64_t v81 = 4 * v78 - 4;
            do
            {
              int v82 = *v79++;
              v77 += v82;
              *v80++ = v77;
              v81 -= 4;
            }
            while (v81);
          }
        }
        if (v11)
        {
          uint64_t v83 = 0;
          float64x2_t v84 = (float32x4_t *)v140;
          float64x2_t v85 = (float32x4_t *)((char *)__p + 32);
          do
          {
            float32x4_t v86 = v84[1];
            uint32x4_t v87 = (uint32x4_t)vcgtq_f32(*v84, v86);
            v87.i32[3] = v87.i32[2];
            unsigned int v88 = vmaxvq_u32(v87);
            float v89 = 0.0;
            float v90 = 0.0;
            if ((v88 & 0x80000000) == 0)
            {
              float32x4_t v91 = vsubq_f32(v86, *v84);
              float32x4_t v92 = vmulq_f32(v91, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v91, (int32x4_t)v91), (int8x16_t)v91, 0xCuLL));
              LODWORD(v90) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v92, 2), vaddq_f32(v92, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v92.f32, 1))).u32[0];
            }
            float32x4_t v93 = v85[1];
            uint32x4_t v94 = (uint32x4_t)vcgtq_f32(*v85, v93);
            v94.i32[3] = v94.i32[2];
            if ((vmaxvq_u32(v94) & 0x80000000) == 0)
            {
              float32x4_t v95 = vsubq_f32(v93, *v85);
              float32x4_t v96 = vmulq_f32(v95, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v95, (int32x4_t)v95), (int8x16_t)v95, 0xCuLL));
              LODWORD(v89) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 2), vaddq_f32(v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 1))).u32[0];
            }
            uint64_t v97 = begin[v83];
            float v98 = (float)(v89 * (float)(*(_DWORD *)(a3 + 16) - v97))
                + (float)((float)v97 * v90);
            if (v98 < v30)
            {
              float32x4_t v99 = v84[1];
              *(float32x4_t *)a4 = *v84;
              *(float32x4_t *)(a4 + 16) = v99;
              float32x4_t v100 = v85[1];
              *(float32x4_t *)a5 = *v85;
              *(float32x4_t *)(a5 + 16) = v100;
              int v28 = v27;
              uint64_t v26 = v97;
              int v29 = v83;
              float v30 = v98;
            }
            ++v83;
            v84 += 2;
            v85 += 2;
          }
          while (v11 != v83);
        }
      }
      ++v27;
    }
    while (v27 != 3);
    uint64_t v101 = a1[4];
    uint64_t v102 = *(unsigned int *)(a3 + 12);
    int64x2_t v103 = (_DWORD *)(v101 + 4 * v102);
    LODWORD(v102) = *(_DWORD *)(a3 + 16) + v102;
    float64x2_t v146 = a1;
    float32x4_t v147 = v18;
    float32x4_t v148 = v129;
    float32x4_t v149 = v23;
    int v150 = v29;
    int v151 = v28;
    unsigned int v152 = a2;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<float,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int,geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v103, (_DWORD *)(v101 + 4 * v102), &v146);
  }
  if (v135.__begin_)
  {
    v135.__end_ = v135.__begin_;
    operator delete(v135.__begin_);
  }
  if (v136.__begin_)
  {
    v136.__end_ = v136.__begin_;
    operator delete(v136.__begin_);
  }
  if (__p)
  {
    int v138 = __p;
    operator delete(__p);
  }
  if (v140)
  {
    int v141 = v140;
    operator delete(v140);
  }
  if (v143)
  {
    float64x2_t v144 = (float32x4_t *)v143;
    operator delete(v143);
  }
  return v26;
}

_DWORD *std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<float,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int,geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(unsigned int)#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(_DWORD *result, _DWORD *a2, _DWORD *a3)
{
  if (result != a2)
  {
    uint64_t v3 = *(void *)(*(void *)a3 + 56);
    double v4 = a2;
    while (2)
    {
      unsigned int v5 = a3[16];
      int v6 = a3[17];
      uint64_t v7 = (float *)&a3[v6 & 3];
      float v8 = v7[4];
      float v9 = v7[12];
      unsigned int v10 = a3[18];
      float v11 = (float)v10;
      int32x2_t v12 = result;
      while (1)
      {
        uint64_t v13 = *v12;
        unsigned int v14 = (int)(float)((float)((float)(*(float *)(v3 + 16 * v13 + 4 * (v6 & 3)) - v8) / v9) * v11);
        if (v10 == v14) {
          unsigned int v14 = v10 - 1;
        }
        if (v14 > v5) {
          break;
        }
        if (++v12 == v4) {
          return v4;
        }
      }
      do
      {
        if (--v4 == v12) {
          return v12;
        }
        uint64_t v15 = *v4;
        unsigned int v16 = (int)(float)((float)((float)(*(float *)(v3 + 16 * v15 + 4 * (v6 & 3)) - v8) / v9) * v11);
        if (v10 == v16) {
          unsigned int v16 = v10 - 1;
        }
      }
      while (v16 > v5);
      *int32x2_t v12 = v15;
      __n128 result = v12 + 1;
      _DWORD *v4 = v13;
      if (v4 != v12 + 1) {
        continue;
      }
      break;
    }
    return v12 + 1;
  }
  return result;
}

void std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26EA06850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06850;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return geom::bvh<float,(unsigned char)3>::partition_node_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), a2, a3, a4);
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::target_type()
{
}

uint64_t geom::bvh<float,(unsigned char)3>::partition_node_heuristic<geom::volume_heuristic_functor<float,(unsigned char)3>>(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  int v140 = 0;
  int v141 = 0;
  uint64_t v142 = 0;
  unint64_t v10 = a2;
  std::vector<geom::bbox<float,(unsigned char)3>>::resize((uint64_t)&v140, a2);
  int v137 = 0;
  int v138 = 0;
  uint64_t v139 = 0;
  std::vector<geom::bbox<float,(unsigned char)3>>::resize((uint64_t)&v137, v10);
  std::vector<int> __p = 0;
  std::vector<int> v135 = 0;
  uint64_t v136 = 0;
  std::vector<geom::bbox<float,(unsigned char)3>>::resize((uint64_t)&__p, v10);
  memset(&v133, 0, sizeof(v133));
  std::vector<unsigned int>::resize(&v133, v10);
  memset(&v132, 0, sizeof(v132));
  std::vector<int>::size_type v11 = a2 - 1;
  std::vector<unsigned int>::resize(&v132, v11);
  uint64_t v14 = *(unsigned int *)(a3 + 12);
  unsigned int v13 = *(_DWORD *)(a3 + 16);
  uint64_t v15 = v13 + v14;
  unsigned int v16 = (unsigned int *)(a1[4] + 4 * v14);
  if (v13)
  {
    uint64_t v17 = 4 * v15 - 4 * v14;
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i32[2] = 127;
    int64_t v20 = (unsigned int *)(a1[4] + 4 * v14);
    do
    {
      unsigned int v21 = *v20++;
      float32x4_t v22 = *(float32x4_t *)(a1[7] + 16 * v21);
      v18.i32[3] = 0;
      v22.i32[3] = 0;
      float32x4_t v18 = vminnmq_f32(v18, v22);
      v19.i32[3] = 0;
      float32x4_t v19 = vmaxnmq_f32(v19, v22);
      v17 -= 4;
    }
    while (v17);
  }
  else
  {
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
  }
  float32x4_t v23 = vsubq_f32(v19, v18);
  *(float *)v12.i32 = (float)a2;
  float32x4_t v24 = vdivq_f32(v23, (float32x4_t)vdupq_lane_s32(v12, 0));
  float32x4_t v25 = vmulq_f32(v24, v24);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]) <= 0.00001)
  {
    uint64_t v101 = v14 + (v13 >> 1);
    float32x4_t v102 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v103.i64[0] = 0x7F0000007FLL;
    v103.i32[2] = 127;
    float32x4_t v104 = v102;
    v105.i64[0] = 0x7F0000007FLL;
    v105.i32[2] = 127;
    if (v13 >= 2)
    {
      uint64_t v106 = 4 * v101 - 4 * v14;
      int32x4_t v107 = vdupq_n_s32(0x7F800000u);
      v108.i64[0] = 0x7F0000007FLL;
      v108.i64[1] = 0x7F0000007FLL;
      do
      {
        unsigned int v109 = *v16++;
        int32x4_t v110 = (float32x4_t *)(a1[10] + 32 * v109);
        float32x4_t v111 = (float32x4_t)v107;
        v111.i32[3] = 0;
        float32x4_t v112 = *v110;
        float32x4_t v113 = v110[1];
        v112.i32[3] = 0;
        float32x4_t v104 = vminnmq_f32(v111, v112);
        float32x4_t v114 = v108;
        v114.i32[3] = 0;
        v113.i32[3] = 0;
        v104.i32[3] = v107.i32[3];
        float32x4_t v105 = vmaxnmq_f32(v114, v113);
        v105.i32[3] = v108.i32[3];
        float32x4_t v108 = v105;
        int32x4_t v107 = (int32x4_t)v104;
        v106 -= 4;
      }
      while (v106);
    }
    *(_DWORD *)(a4 + 8) = v104.i32[2];
    *(void *)a4 = v104.i64[0];
    *(_DWORD *)(a4 + 24) = v105.i32[2];
    *(void *)(a4 + 16) = v105.i64[0];
    if (v13 != v13 >> 1)
    {
      float32x4_t v115 = (unsigned int *)(a1[4] + 4 * v101);
      uint64_t v116 = 4 * v15 - 4 * v101;
      int32x4_t v117 = vdupq_n_s32(0x7F800000u);
      v118.i64[0] = 0x7F0000007FLL;
      v118.i64[1] = 0x7F0000007FLL;
      do
      {
        unsigned int v119 = *v115++;
        int32x4_t v120 = (float32x4_t *)(a1[10] + 32 * v119);
        float32x4_t v121 = (float32x4_t)v117;
        v121.i32[3] = 0;
        float32x4_t v122 = *v120;
        float32x4_t v123 = v120[1];
        v122.i32[3] = 0;
        float32x4_t v102 = vminnmq_f32(v121, v122);
        float32x4_t v124 = v118;
        v124.i32[3] = 0;
        v123.i32[3] = 0;
        v102.i32[3] = v117.i32[3];
        float32x4_t v103 = vmaxnmq_f32(v124, v123);
        v103.i32[3] = v118.i32[3];
        float32x4_t v118 = v103;
        int32x4_t v117 = (int32x4_t)v102;
        v116 -= 4;
      }
      while (v116);
    }
    *(void *)a5 = v102.i64[0];
    *(_DWORD *)(a5 + 8) = v102.i32[2];
    *(void *)(a5 + 16) = v103.i64[0];
    *(_DWORD *)(a5 + 24) = v103.i32[2];
    uint64_t v26 = *(_DWORD *)(a3 + 16) >> 1;
  }
  else
  {
    uint64_t v26 = 0;
    int v27 = 0;
    int v28 = -1;
    int v29 = 1;
    float v30 = 3.4028e38;
    int32x4_t v31 = vdupq_n_s32(0x7F800000u);
    *(void *)&long long v32 = 0x7F0000007FLL;
    *((void *)&v32 + 1) = 0x7F0000007FLL;
    float32x4_t v128 = v23;
    float32x4_t v129 = v18;
    float32x4_t v126 = v19;
    int32x4_t v127 = v31;
    do
    {
      float32x4_t v131 = v23;
      float v33 = *(float *)((unint64_t)&v131 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
      if (fabsf(v33) > 0.00001)
      {
        if ((char *)v133.__end_ - (char *)v133.__begin_ >= 1)
        {
          bzero(v133.__begin_, 4* (((unint64_t)((char *)v133.__end_ - (char *)v133.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v133.__end_ - (char *)v133.__begin_) > (std::vector<int>::pointer)3))+ 4);
          *(void *)&long long v32 = 0x7F0000007FLL;
          *((void *)&v32 + 1) = 0x7F0000007FLL;
          int32x4_t v31 = v127;
          *(float *)v12.i32 = (float)a2;
          float32x4_t v23 = v128;
          float32x4_t v18 = v129;
        }
        char v34 = v140;
        if ((char *)v141 - (unsigned char *)v140 >= 1)
        {
          unint64_t v35 = ((unint64_t)((char *)v141 - (unsigned char *)v140) >> 5) + 1;
          do
          {
            *char v34 = v31;
            v34[1] = v32;
            v34 += 2;
            --v35;
          }
          while (v35 > 1);
        }
        int v36 = *(_DWORD *)(a3 + 16);
        if (v36)
        {
          uint64_t v37 = *(unsigned int *)(a3 + 12);
          uint64_t v38 = (v36 + v37);
          uint64_t v39 = (unsigned int *)(a1[4] + 4 * v37);
          float32x4_t v130 = v18;
          float v40 = *(float *)((unint64_t)&v130 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
          uint64_t v41 = 4 * v38 - 4 * v37;
          do
          {
            unsigned int v42 = *v39++;
            long long v43 = (float32x4_t *)(a1[10] + 32 * v42);
            int v44 = (int)(float)((float)((float)(*(float *)(a1[7] + 16 * v42 + 4 * (v27 & 3)) - v40) / v33)
                             * *(float *)v12.i32);
            float32x4_t v45 = *v43;
            if (v44 == a2) {
              int v44 = v11;
            }
            uint64_t v46 = 32 * v44;
            float32x4_t v47 = *(float32x4_t *)((char *)v140 + v46);
            v45.i32[3] = 0;
            v47.i32[3] = 0;
            *(float32x4_t *)((char *)v140 + v46) = vminnmq_f32(v45, v47);
            float32x4_t v48 = v43[1];
            v48.i32[3] = 0;
            float32x4_t v49 = *(float32x4_t *)((char *)v140 + v46 + 16);
            v49.i32[3] = 0;
            *(float32x4_t *)((char *)v140 + v46 + 16) = vmaxnmq_f32(v48, v49);
            ++v133.__begin_[v44];
            v41 -= 4;
          }
          while (v41);
        }
        uint64_t v50 = v141;
        if (v140 != v141)
        {
          int v51 = (float32x4_t *)v137;
          float32x4_t v53 = *(float32x4_t *)v140;
          float32x4_t v54 = *((float32x4_t *)v140 + 1);
          uint64_t v52 = (float32x4_t *)((char *)v140 + 32);
          *(_OWORD *)int v137 = *(_OWORD *)v140;
          v51[1] = v54;
          if (v52 != v50)
          {
            long long v55 = v51 + 3;
            do
            {
              float32x4_t v56 = v53;
              v56.i32[3] = 0;
              float32x4_t v57 = *v52;
              float32x4_t v58 = v52[1];
              v52 += 2;
              v57.i32[3] = 0;
              float32x4_t v59 = vminnmq_f32(v56, v57);
              float32x4_t v60 = v54;
              v60.i32[3] = 0;
              v58.i32[3] = 0;
              float32x4_t v61 = vmaxnmq_f32(v60, v58);
              v59.i32[3] = v53.i32[3];
              v61.i32[3] = v54.i32[3];
              v55[-1] = v59;
              *long long v55 = v61;
              v55 += 2;
              float32x4_t v53 = v59;
              float32x4_t v54 = v61;
            }
            while (v52 != v50);
          }
        }
        float32x2_t v62 = (float32x4_t *)v140;
        if (v141 != v140)
        {
          float64x2_t v63 = v135;
          float32x4_t v65 = v141[-2];
          float32x4_t v66 = v141[-1];
          float64x2_t v64 = v141 - 2;
          *(v135 - 2) = v65;
          *(v63 - 1) = v66;
          if (v64 != v62)
          {
            int64_t v67 = (float32x4_t *)(v63 - 4);
            do
            {
              float32x4_t v68 = v64[-2];
              float32x4_t v69 = v64[-1];
              v64 -= 2;
              float32x4_t v70 = v65;
              v70.i32[3] = 0;
              v68.i32[3] = 0;
              float32x4_t v71 = v66;
              v71.i32[3] = 0;
              v69.i32[3] = 0;
              float32x4_t v72 = vminnmq_f32(v70, v68);
              float32x4_t v73 = vmaxnmq_f32(v71, v69);
              v72.i32[3] = v65.i32[3];
              v73.i32[3] = v66.i32[3];
              float32x4_t *v67 = v72;
              v67[1] = v73;
              v67 -= 2;
              float32x4_t v65 = v72;
              float32x4_t v66 = v73;
            }
            while (v64 != v62);
          }
        }
        std::vector<int>::pointer begin = v132.__begin_;
        int64_t v75 = (char *)v132.__end_ - (char *)v132.__begin_;
        if (v132.__end_ != v132.__begin_)
        {
          std::vector<int>::pointer v76 = v133.__begin_;
          int v77 = *v133.__begin_;
          *v132.__begin_ = *v133.__begin_;
          if (v75 != 4)
          {
            uint64_t v78 = v75 >> 2;
            float64x2_t v79 = v76 + 1;
            float64x2_t v80 = begin + 1;
            uint64_t v81 = 4 * v78 - 4;
            do
            {
              int v82 = *v79++;
              v77 += v82;
              *v80++ = v77;
              v81 -= 4;
            }
            while (v81);
          }
        }
        if (v11)
        {
          uint64_t v83 = 0;
          float64x2_t v84 = (float32x4_t *)v137;
          float64x2_t v85 = (float32x4_t *)((char *)__p + 32);
          do
          {
            uint64_t v86 = begin[v83];
            float32x4_t v87 = v84[1];
            uint32x4_t v88 = (uint32x4_t)vcgtq_f32(*v84, v87);
            v88.i32[3] = v88.i32[2];
            float32x4_t v89 = vsubq_f32(v87, *v84);
            LODWORD(v90) = vmulq_laneq_f32(vmulq_lane_f32(v89, *(float32x2_t *)v89.f32, 1), v89, 2).u32[0];
            if ((vmaxvq_u32(v88) & 0x80000000) != 0) {
              float v90 = 0.0;
            }
            float32x4_t v91 = v85[1];
            uint32x4_t v92 = (uint32x4_t)vcgtq_f32(*v85, v91);
            v92.i32[3] = v92.i32[2];
            float32x4_t v93 = vsubq_f32(v91, *v85);
            LODWORD(v94) = vmulq_laneq_f32(vmulq_lane_f32(v93, *(float32x2_t *)v93.f32, 1), v93, 2).u32[0];
            if ((vmaxvq_u32(v92) & 0x80000000) != 0) {
              float v94 = 0.0;
            }
            float v95 = (float)(v94 * (float)(*(_DWORD *)(a3 + 16) - v86))
                + (float)((float)v86 * v90);
            if (v95 < v30)
            {
              float32x4_t v96 = v84[1];
              *(float32x4_t *)a4 = *v84;
              *(float32x4_t *)(a4 + 16) = v96;
              float32x4_t v97 = v85[1];
              *(float32x4_t *)a5 = *v85;
              *(float32x4_t *)(a5 + 16) = v97;
              int v28 = v27;
              uint64_t v26 = v86;
              int v29 = v83;
              float v30 = v95;
            }
            ++v83;
            v84 += 2;
            v85 += 2;
          }
          while (v11 != v83);
        }
      }
      ++v27;
    }
    while (v27 != 3);
    uint64_t v98 = a1[4];
    uint64_t v99 = *(unsigned int *)(a3 + 12);
    float32x4_t v100 = (_DWORD *)(v98 + 4 * v99);
    LODWORD(v99) = *(_DWORD *)(a3 + 16) + v99;
    uint64_t v143 = a1;
    float32x4_t v144 = v18;
    float32x4_t v145 = v126;
    float32x4_t v146 = v23;
    int v147 = v29;
    int v148 = v28;
    unsigned int v149 = a2;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<float,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int,geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v100, (_DWORD *)(v98 + 4 * v99), &v143);
  }
  if (v132.__begin_)
  {
    v132.__end_ = v132.__begin_;
    operator delete(v132.__begin_);
  }
  if (v133.__begin_)
  {
    v133.__end_ = v133.__begin_;
    operator delete(v133.__begin_);
  }
  if (__p)
  {
    std::vector<int> v135 = __p;
    operator delete(__p);
  }
  if (v137)
  {
    int v138 = v137;
    operator delete(v137);
  }
  if (v140)
  {
    int v141 = (float32x4_t *)v140;
    operator delete(v140);
  }
  return v26;
}

void std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26EA068D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA068D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return geom::bvh<float,(unsigned char)3>::partition_node_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), a2, a3, a4);
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<float,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)>::target_type()
{
}

uint64_t geom::bvh<float,(unsigned char)3>::partition_node_heuristic<geom::intersection_volume_heuristic_functor<float,(unsigned char)3>>(void *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v149 = *MEMORY[0x263EF8340];
  uint64_t v139 = 0;
  int v140 = 0;
  uint64_t v141 = 0;
  unint64_t v10 = a2;
  std::vector<geom::bbox<float,(unsigned char)3>>::resize((uint64_t)&v139, a2);
  uint64_t v136 = 0;
  int v137 = 0;
  uint64_t v138 = 0;
  std::vector<geom::bbox<float,(unsigned char)3>>::resize((uint64_t)&v136, v10);
  std::vector<int> __p = 0;
  float32x4_t v134 = 0;
  uint64_t v135 = 0;
  std::vector<geom::bbox<float,(unsigned char)3>>::resize((uint64_t)&__p, v10);
  memset(&v132, 0, sizeof(v132));
  std::vector<unsigned int>::resize(&v132, v10);
  memset(&v131, 0, sizeof(v131));
  std::vector<int>::size_type v11 = a2 - 1;
  std::vector<unsigned int>::resize(&v131, v11);
  uint64_t v14 = *(unsigned int *)(a3 + 12);
  unsigned int v13 = *(_DWORD *)(a3 + 16);
  uint64_t v15 = v13 + v14;
  unsigned int v16 = (unsigned int *)(a1[4] + 4 * v14);
  if (v13)
  {
    uint64_t v17 = 4 * v15 - 4 * v14;
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i32[2] = 127;
    int64_t v20 = (unsigned int *)(a1[4] + 4 * v14);
    do
    {
      unsigned int v21 = *v20++;
      float32x4_t v22 = *(float32x4_t *)(a1[7] + 16 * v21);
      v18.i32[3] = 0;
      v22.i32[3] = 0;
      float32x4_t v18 = vminnmq_f32(v18, v22);
      v19.i32[3] = 0;
      float32x4_t v19 = vmaxnmq_f32(v19, v22);
      v17 -= 4;
    }
    while (v17);
  }
  else
  {
    float32x4_t v18 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v19.i64[0] = 0x7F0000007FLL;
    v19.i64[1] = 0x7F0000007FLL;
  }
  float32x4_t v23 = vsubq_f32(v19, v18);
  *(float *)v12.i32 = (float)a2;
  float32x4_t v24 = vdivq_f32(v23, (float32x4_t)vdupq_lane_s32(v12, 0));
  float32x4_t v25 = vmulq_f32(v24, v24);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0]) <= 0.00001)
  {
    uint64_t v100 = v14 + (v13 >> 1);
    float32x4_t v101 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v102.i64[0] = 0x7F0000007FLL;
    v102.i32[2] = 127;
    float32x4_t v103 = v101;
    v104.i64[0] = 0x7F0000007FLL;
    v104.i32[2] = 127;
    if (v13 >= 2)
    {
      uint64_t v105 = 4 * v100 - 4 * v14;
      int32x4_t v106 = vdupq_n_s32(0x7F800000u);
      v107.i64[0] = 0x7F0000007FLL;
      v107.i64[1] = 0x7F0000007FLL;
      do
      {
        unsigned int v108 = *v16++;
        unsigned int v109 = (float32x4_t *)(a1[10] + 32 * v108);
        float32x4_t v110 = (float32x4_t)v106;
        v110.i32[3] = 0;
        float32x4_t v111 = *v109;
        float32x4_t v112 = v109[1];
        v111.i32[3] = 0;
        float32x4_t v103 = vminnmq_f32(v110, v111);
        float32x4_t v113 = v107;
        v113.i32[3] = 0;
        v112.i32[3] = 0;
        v103.i32[3] = v106.i32[3];
        float32x4_t v104 = vmaxnmq_f32(v113, v112);
        v104.i32[3] = v107.i32[3];
        float32x4_t v107 = v104;
        int32x4_t v106 = (int32x4_t)v103;
        v105 -= 4;
      }
      while (v105);
    }
    *(_DWORD *)(a4 + 8) = v103.i32[2];
    *(void *)a4 = v103.i64[0];
    *(_DWORD *)(a4 + 24) = v104.i32[2];
    *(void *)(a4 + 16) = v104.i64[0];
    if (v13 != v13 >> 1)
    {
      float32x4_t v114 = (unsigned int *)(a1[4] + 4 * v100);
      uint64_t v115 = 4 * v15 - 4 * v100;
      int32x4_t v116 = vdupq_n_s32(0x7F800000u);
      v117.i64[0] = 0x7F0000007FLL;
      v117.i64[1] = 0x7F0000007FLL;
      do
      {
        unsigned int v118 = *v114++;
        unsigned int v119 = (float32x4_t *)(a1[10] + 32 * v118);
        float32x4_t v120 = (float32x4_t)v116;
        v120.i32[3] = 0;
        float32x4_t v121 = *v119;
        float32x4_t v122 = v119[1];
        v121.i32[3] = 0;
        float32x4_t v101 = vminnmq_f32(v120, v121);
        float32x4_t v123 = v117;
        v123.i32[3] = 0;
        v122.i32[3] = 0;
        v101.i32[3] = v116.i32[3];
        float32x4_t v102 = vmaxnmq_f32(v123, v122);
        v102.i32[3] = v117.i32[3];
        float32x4_t v117 = v102;
        int32x4_t v116 = (int32x4_t)v101;
        v115 -= 4;
      }
      while (v115);
    }
    *(void *)a5 = v101.i64[0];
    *(_DWORD *)(a5 + 8) = v101.i32[2];
    *(void *)(a5 + 16) = v102.i64[0];
    *(_DWORD *)(a5 + 24) = v102.i32[2];
    uint64_t v26 = *(_DWORD *)(a3 + 16) >> 1;
  }
  else
  {
    uint64_t v26 = 0;
    int v27 = 0;
    int v28 = -1;
    int v29 = 1;
    float v30 = 3.4028e38;
    int32x4_t v31 = vdupq_n_s32(0x7F800000u);
    *(void *)&long long v32 = 0x7F0000007FLL;
    *((void *)&v32 + 1) = 0x7F0000007FLL;
    float32x4_t v127 = v23;
    float32x4_t v128 = v18;
    float32x4_t v125 = v19;
    int32x4_t v126 = v31;
    do
    {
      float32x4_t v130 = v23;
      float v33 = *(float *)((unint64_t)&v130 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
      if (fabsf(v33) > 0.00001)
      {
        if ((char *)v132.__end_ - (char *)v132.__begin_ >= 1)
        {
          bzero(v132.__begin_, 4* (((unint64_t)((char *)v132.__end_ - (char *)v132.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v132.__end_ - (char *)v132.__begin_) > (std::vector<int>::pointer)3))+ 4);
          *(void *)&long long v32 = 0x7F0000007FLL;
          *((void *)&v32 + 1) = 0x7F0000007FLL;
          int32x4_t v31 = v126;
          *(float *)v12.i32 = (float)a2;
          float32x4_t v23 = v127;
          float32x4_t v18 = v128;
        }
        char v34 = v139;
        if ((char *)v140 - (unsigned char *)v139 >= 1)
        {
          unint64_t v35 = ((unint64_t)((char *)v140 - (unsigned char *)v139) >> 5) + 1;
          do
          {
            *char v34 = v31;
            v34[1] = v32;
            v34 += 2;
            --v35;
          }
          while (v35 > 1);
        }
        int v36 = *(_DWORD *)(a3 + 16);
        if (v36)
        {
          uint64_t v37 = *(unsigned int *)(a3 + 12);
          uint64_t v38 = (v36 + v37);
          uint64_t v39 = (unsigned int *)(a1[4] + 4 * v37);
          float32x4_t v129 = v18;
          float v40 = *(float *)((unint64_t)&v129 & 0xFFFFFFFFFFFFFFF3 | (4 * (v27 & 3)));
          uint64_t v41 = 4 * v38 - 4 * v37;
          do
          {
            unsigned int v42 = *v39++;
            long long v43 = (float32x4_t *)(a1[10] + 32 * v42);
            int v44 = (int)(float)((float)((float)(*(float *)(a1[7] + 16 * v42 + 4 * (v27 & 3)) - v40) / v33)
                             * *(float *)v12.i32);
            float32x4_t v45 = *v43;
            if (v44 == a2) {
              int v44 = v11;
            }
            uint64_t v46 = 32 * v44;
            float32x4_t v47 = *(float32x4_t *)((char *)v139 + v46);
            v45.i32[3] = 0;
            v47.i32[3] = 0;
            *(float32x4_t *)((char *)v139 + v46) = vminnmq_f32(v45, v47);
            float32x4_t v48 = v43[1];
            v48.i32[3] = 0;
            float32x4_t v49 = *(float32x4_t *)((char *)v139 + v46 + 16);
            v49.i32[3] = 0;
            *(float32x4_t *)((char *)v139 + v46 + 16) = vmaxnmq_f32(v48, v49);
            ++v132.__begin_[v44];
            v41 -= 4;
          }
          while (v41);
        }
        uint64_t v50 = v140;
        if (v139 != v140)
        {
          int v51 = (float32x4_t *)v136;
          float32x4_t v53 = *(float32x4_t *)v139;
          float32x4_t v54 = *((float32x4_t *)v139 + 1);
          uint64_t v52 = (float32x4_t *)((char *)v139 + 32);
          *(_OWORD *)uint64_t v136 = *(_OWORD *)v139;
          v51[1] = v54;
          if (v52 != v50)
          {
            long long v55 = v51 + 3;
            do
            {
              float32x4_t v56 = v53;
              v56.i32[3] = 0;
              float32x4_t v57 = *v52;
              float32x4_t v58 = v52[1];
              v52 += 2;
              v57.i32[3] = 0;
              float32x4_t v59 = vminnmq_f32(v56, v57);
              float32x4_t v60 = v54;
              v60.i32[3] = 0;
              v58.i32[3] = 0;
              float32x4_t v61 = vmaxnmq_f32(v60, v58);
              v59.i32[3] = v53.i32[3];
              v61.i32[3] = v54.i32[3];
              v55[-1] = v59;
              *long long v55 = v61;
              v55 += 2;
              float32x4_t v53 = v59;
              float32x4_t v54 = v61;
            }
            while (v52 != v50);
          }
        }
        float32x2_t v62 = (float32x4_t *)v139;
        if (v140 != v139)
        {
          float64x2_t v63 = v134;
          float32x4_t v65 = v140[-2];
          float32x4_t v66 = v140[-1];
          float64x2_t v64 = v140 - 2;
          *(v134 - 2) = v65;
          *(v63 - 1) = v66;
          if (v64 != v62)
          {
            int64_t v67 = (float32x4_t *)(v63 - 4);
            do
            {
              float32x4_t v68 = v64[-2];
              float32x4_t v69 = v64[-1];
              v64 -= 2;
              float32x4_t v70 = v65;
              v70.i32[3] = 0;
              v68.i32[3] = 0;
              float32x4_t v71 = v66;
              v71.i32[3] = 0;
              v69.i32[3] = 0;
              float32x4_t v72 = vminnmq_f32(v70, v68);
              float32x4_t v73 = vmaxnmq_f32(v71, v69);
              v72.i32[3] = v65.i32[3];
              v73.i32[3] = v66.i32[3];
              float32x4_t *v67 = v72;
              v67[1] = v73;
              v67 -= 2;
              float32x4_t v65 = v72;
              float32x4_t v66 = v73;
            }
            while (v64 != v62);
          }
        }
        std::vector<int>::pointer begin = v131.__begin_;
        int64_t v75 = (char *)v131.__end_ - (char *)v131.__begin_;
        if (v131.__end_ != v131.__begin_)
        {
          std::vector<int>::pointer v76 = v132.__begin_;
          int v77 = *v132.__begin_;
          *v131.__begin_ = *v132.__begin_;
          if (v75 != 4)
          {
            uint64_t v78 = v75 >> 2;
            float64x2_t v79 = v76 + 1;
            float64x2_t v80 = begin + 1;
            uint64_t v81 = 4 * v78 - 4;
            do
            {
              int v82 = *v79++;
              v77 += v82;
              *v80++ = v77;
              v81 -= 4;
            }
            while (v81);
          }
        }
        if (v11)
        {
          uint64_t v83 = 0;
          float64x2_t v84 = (float32x4_t *)v136;
          float64x2_t v85 = (float32x4_t *)((char *)__p + 32);
          do
          {
            float32x4_t v86 = *v84;
            float32x4_t v87 = v84[1];
            v86.i32[3] = 0;
            float32x4_t v88 = *v85;
            float32x4_t v89 = v85[1];
            v88.i32[3] = 0;
            float32x4_t v90 = vmaxnmq_f32(v86, v88);
            v87.i32[3] = 0;
            v89.i32[3] = 0;
            float32x4_t v91 = vminnmq_f32(v87, v89);
            uint32x4_t v92 = (uint32x4_t)vcgtq_f32(v90, v91);
            v92.i32[3] = v92.i32[2];
            if ((vmaxvq_u32(v92) & 0x80000000) != 0)
            {
              float v94 = 0.0;
            }
            else
            {
              float32x4_t v93 = vsubq_f32(v91, v90);
              LODWORD(v94) = vmulq_laneq_f32(vmulq_lane_f32(v93, *(float32x2_t *)v93.f32, 1), v93, 2).u32[0];
            }
            if (v94 < v30)
            {
              uint64_t v26 = begin[v83];
              float32x4_t v95 = v84[1];
              *(float32x4_t *)a4 = *v84;
              *(float32x4_t *)(a4 + 16) = v95;
              float32x4_t v96 = v85[1];
              *(float32x4_t *)a5 = *v85;
              *(float32x4_t *)(a5 + 16) = v96;
              int v28 = v27;
              int v29 = v83;
              float v30 = v94;
            }
            ++v83;
            v84 += 2;
            v85 += 2;
          }
          while (v11 != v83);
        }
      }
      ++v27;
    }
    while (v27 != 3);
    uint64_t v97 = a1[4];
    uint64_t v98 = *(unsigned int *)(a3 + 12);
    uint64_t v99 = (_DWORD *)(v97 + 4 * v98);
    LODWORD(v98) = *(_DWORD *)(a3 + 16) + v98;
    uint64_t v142 = a1;
    float32x4_t v143 = v18;
    float32x4_t v144 = v125;
    float32x4_t v145 = v23;
    int v146 = v29;
    int v147 = v28;
    unsigned int v148 = a2;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<float,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int,geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v99, (_DWORD *)(v97 + 4 * v98), &v142);
  }
  if (v131.__begin_)
  {
    v131.__end_ = v131.__begin_;
    operator delete(v131.__begin_);
  }
  if (v132.__begin_)
  {
    v132.__end_ = v132.__begin_;
    operator delete(v132.__begin_);
  }
  if (__p)
  {
    float32x4_t v134 = __p;
    operator delete(__p);
  }
  if (v136)
  {
    int v137 = v136;
    operator delete(v136);
  }
  if (v139)
  {
    int v140 = (float32x4_t *)v139;
    operator delete(v139);
  }
  return v26;
}

void std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::~__func()
{
}

void *std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA06950;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA06950;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 8);
  *a3 = &unk_26EA069C0;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::target_type()
{
}

void std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA069C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA069C0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *(_DWORD *)(a1 + 16) & 3;
  return *(float *)(*(void *)(*(void *)(a1 + 8) + 56) + 16 * *a2 + 4 * v3) < *(float *)(*(void *)(*(void *)(a1 + 8) + 56)
                                                                                              + 16 * *a3
                                                                                              + 4 * v3);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::target_type()
{
}

void std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1}>,void ()(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)>::~__func()
{
}

__n128 std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1}>,void ()(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA06A50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1}>,void ()(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06A50;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1}>,void ()(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)>::operator()(uint64_t a1, uint64_t a2, int *a3, _DWORD *a4, _DWORD *a5)
{
  return geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1}::operator()((uint64_t *)(a1 + 8), a2, *a3, a4, a5);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1}>,void ()(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1}>,void ()(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)>::target_type()
{
}

void *geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)#1}::operator()(uint64_t *a1, uint64_t a2, int a3, _DWORD *a4, _DWORD *a5)
{
  _OWORD v17[4] = *MEMORY[0x263EF8340];
  uint64_t v9 = *a1;
  unint64_t v10 = *(unsigned int *)(a2 + 16);
  std::vector<int>::size_type v11 = (int *)(*(void *)(*a1 + 32) + 4 * *(unsigned int *)(a2 + 12));
  std::function<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::operator()(a1[1], a3);
  if ((v10 >> 1) != v10) {
    std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *>(v11, &v11[v10 >> 1], &v11[v10], (uint64_t)v17);
  }
  std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::~__value_func[abi:nn180100](v17);
  *a4 = *(_DWORD *)(*(void *)(v9 + 56) + 16 * v11[v10 >> 1] + 4 * (a3 & 3));
  std::function<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::operator()(a1[1], a3);
  int32x2_t v12 = std::__upper_bound[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)>,unsigned int *,unsigned int *,unsigned int,std::__identity>(v11, &v11[v10], &v11[v10 >> 1], (uint64_t)v16);
  __n128 result = std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::~__value_func[abi:nn180100](v16);
  unint64_t v14 = (unint64_t)((char *)v12 - (char *)v11) >> 2;
  if (*(_DWORD *)(a2 + 16) - (int)v14 < v14) {
    LODWORD(v14) = *(_DWORD *)(a2 + 16) - v14;
  }
  *a5 = v14;
  return result;
}

void *std::__function::__value_func<void ()(geom::bvh_node<float,(unsigned char)3> const&,int,float &,unsigned int &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::~__func()
{
}

__n128 std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26EA06AE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06AE0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::operator()(uint64_t a1, unsigned int *a2)
{
  return *(float *)(*(void *)(*(void *)(a1 + 24) + 56) + 16 * *a2 + 4 * (**(_DWORD **)(a1 + 16) & 3)) < **(float **)(a1 + 8);
}

uint64_t std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<float,(unsigned char)3>::partition_node_median(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target_type()
{
}

uint64_t std::__function::__value_func<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>::__value_func[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void std::__function::__func<geom::bvh<double,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::~__func()
{
}

void *std::__function::__func<geom::bvh<double,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA06B60;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA06B60;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  return geom::bvh<double,(unsigned char)3>::partition_node_middle(*(void **)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::build_middle_split(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::target_type()
{
}

void *std::__function::__value_func<unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom::bvh<double,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::~__func()
{
}

void *std::__function::__func<geom::bvh<double,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA06BF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA06BF0;
  a2[1] = v2;
  return result;
}

unint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  return geom::bvh<double,(unsigned char)3>::partition_node_median(*(void *)(a1 + 8), a2, a3, a4);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::build_median(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::target_type()
{
}

void std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26EA06C70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06C70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, double a5, double a6, __n128 a7)
{
  return geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::target_type()
{
}

uint64_t geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(void *a1, unsigned int a2, uint64_t a3, float64x2_t *a4, float64x2_t *a5, double a6, double a7, __n128 a8)
{
  uint64_t v155 = *MEMORY[0x263EF8340];
  uint64_t v142 = 0;
  float32x4_t v143 = 0;
  uint64_t v144 = 0;
  unint64_t v13 = a2;
  std::vector<geom::bbox<double,(unsigned char)3>>::resize((uint64_t)&v142, a2, a6, a7, a8);
  uint64_t v139 = 0;
  int v140 = 0;
  uint64_t v141 = 0;
  std::vector<geom::bbox<double,(unsigned char)3>>::resize((uint64_t)&v139, v13, v14, v15, v16);
  std::vector<int> __p = 0;
  int v137 = 0;
  uint64_t v138 = 0;
  std::vector<geom::bbox<double,(unsigned char)3>>::resize((uint64_t)&__p, v13, v17, v18, v19);
  memset(&v135, 0, sizeof(v135));
  std::vector<unsigned int>::resize(&v135, v13);
  memset(&v134, 0, sizeof(v134));
  std::vector<int>::size_type v20 = a2 - 1;
  std::vector<unsigned int>::resize(&v134, v20);
  uint64_t v25 = *(unsigned int *)(a3 + 12);
  unsigned int v24 = *(_DWORD *)(a3 + 16);
  uint64_t v26 = v24 + v25;
  int v27 = (unsigned int *)(a1[4] + 4 * v25);
  if (v24)
  {
    v22.f64[0] = INFINITY;
    v21.f64[0] = -INFINITY;
    uint64_t v28 = 4 * v26 - 4 * v25;
    float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v30 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    int32x4_t v31 = (unsigned int *)(a1[4] + 4 * v25);
    do
    {
      unsigned int v32 = *v31++;
      uint64_t v33 = a1[7] + 32 * v32;
      long long v34 = *(_OWORD *)(v33 + 16);
      float64x2_t v29 = vminnmq_f64(v29, *(float64x2_t *)v33);
      float64x2_t v22 = vminnmq_f64((float64x2_t)*(unint64_t *)&v22.f64[0], (float64x2_t)(unint64_t)v34);
      float64x2_t v30 = vmaxnmq_f64(v30, *(float64x2_t *)v33);
      float64x2_t v21 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v21.f64[0], (float64x2_t)(unint64_t)v34);
      v28 -= 4;
    }
    while (v28);
  }
  else
  {
    v21.f64[0] = -INFINITY;
    v22.f64[0] = INFINITY;
    float64x2_t v30 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  }
  float64x2_t v35 = vsubq_f64(v30, v29);
  v23.f64[0] = (double)a2;
  float64x2_t v36 = vdivq_f64(v35, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a2), 0));
  float64x2_t v130 = vsubq_f64(v21, v22);
  float64x2_t v37 = vdivq_f64(v130, v23);
  if (sqrt(vmulq_f64(v37, v37).f64[0] + vaddvq_f64(vmulq_f64(v36, v36))) <= 0.000001)
  {
    uint64_t v105 = v25 + (v24 >> 1);
    float64x2_t v106 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v107 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    if (v24 >= 2)
    {
      v21.f64[0] = INFINITY;
      v22.f64[0] = -INFINITY;
      uint64_t v110 = 4 * v105 - 4 * v25;
      float64x2_t v109 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v108 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      do
      {
        unsigned int v111 = *v27++;
        unint64_t v112 = a1[10] + ((unint64_t)v111 << 6);
        float64x2_t v109 = vminnmq_f64(v109, *(float64x2_t *)v112);
        float64x2_t v21 = vminnmq_f64((float64x2_t)*(unint64_t *)&v21.f64[0], (float64x2_t)*(unint64_t *)(v112 + 16));
        float64x2_t v108 = vmaxnmq_f64(v108, *(float64x2_t *)(v112 + 32));
        float64x2_t v22 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v22.f64[0], (float64x2_t)*(unint64_t *)(v112 + 48));
        v110 -= 4;
      }
      while (v110);
    }
    else
    {
      v21.f64[0] = INFINITY;
      v22.f64[0] = -INFINITY;
      float64x2_t v108 = v107;
      float64x2_t v109 = v106;
    }
    *a4 = v109;
    a4[1] = v21;
    a4[2] = v108;
    a4[3] = v22;
    if (v24 == v24 >> 1)
    {
      v21.f64[0] = INFINITY;
      v22.f64[0] = -INFINITY;
    }
    else
    {
      float32x4_t v113 = (unsigned int *)(a1[4] + 4 * v105);
      float64x2_t v106 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      v21.f64[0] = INFINITY;
      float64x2_t v107 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      v22.f64[0] = -INFINITY;
      uint64_t v114 = 4 * v26 - 4 * v105;
      do
      {
        unsigned int v115 = *v113++;
        unint64_t v116 = a1[10] + ((unint64_t)v115 << 6);
        float64x2_t v106 = vminnmq_f64(v106, *(float64x2_t *)v116);
        float64x2_t v21 = vminnmq_f64((float64x2_t)*(unint64_t *)&v21.f64[0], (float64x2_t)*(unint64_t *)(v116 + 16));
        float64x2_t v107 = vmaxnmq_f64(v107, *(float64x2_t *)(v116 + 32));
        float64x2_t v22 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v22.f64[0], (float64x2_t)*(unint64_t *)(v116 + 48));
        v114 -= 4;
      }
      while (v114);
    }
    *a5 = v106;
    a5[1] = v21;
    a5[2] = v107;
    a5[3] = v22;
    uint64_t v38 = *(_DWORD *)(a3 + 16) >> 1;
  }
  else
  {
    float64x2_t v120 = v30;
    float64x2_t v121 = v21;
    uint64_t v38 = 0;
    int v39 = 0;
    int v40 = -1;
    int v41 = 1;
    double v42 = 1.79769313e308;
    float64x2_t v118 = v35;
    float64x2_t v119 = v29;
    *(void *)&v35.f64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    float64x2_t v129 = v35;
    int64x2_t v125 = vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v123 = v22;
    int64x2_t v124 = vdupq_n_s64(0xFFF0000000000000);
    *(void *)&v29.f64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
    float64x2_t v122 = v29;
    do
    {
      *((void *)&v43 + 1) = *(void *)&v129.f64[1];
      v133[0] = v129;
      v133[1] = v130;
      double v44 = *((double *)v133 + (v39 & 3));
      if (fabs(v44) > 0.000001)
      {
        int v126 = v41;
        int v127 = v40;
        unsigned int v128 = v38;
        std::vector<int>::pointer begin = v135.__begin_;
        if ((char *)v135.__end_ - (char *)v135.__begin_ >= 1) {
          bzero(v135.__begin_, 4* (((unint64_t)((char *)v135.__end_ - (char *)v135.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v135.__end_ - (char *)v135.__begin_) > (std::vector<int>::pointer)3))+ 4);
        }
        uint64_t v46 = (float64x2_t *)v142;
        float32x4_t v47 = v143;
        if ((char *)v143 - (unsigned char *)v142 >= 1)
        {
          unint64_t v48 = ((unint64_t)((char *)v143 - (unsigned char *)v142) >> 6) + 1;
          float32x4_t v49 = v142;
          do
          {
            *(void *)&long long v43 = 0x7FF0000000000000;
            *float32x4_t v49 = v125;
            v49[1] = v43;
            *(void *)&long long v43 = 0xFFF0000000000000;
            _OWORD v49[2] = v124;
            v49[3] = v43;
            --v48;
            v49 += 4;
          }
          while (v48 > 1);
        }
        int v50 = *(_DWORD *)(a3 + 16);
        if (v50)
        {
          uint64_t v51 = *(unsigned int *)(a3 + 12);
          uint64_t v52 = (v50 + v51);
          float32x4_t v53 = (unsigned int *)(a1[4] + 4 * v51);
          v132[0] = v122;
          v132[1] = v123;
          double v54 = *((double *)v132 + (v39 & 3));
          uint64_t v55 = 4 * v52 - 4 * v51;
          do
          {
            unsigned int v56 = *v53++;
            uint64_t v57 = a1[10];
            float32x4_t v58 = (_OWORD *)(a1[7] + 32 * v56);
            long long v59 = v58[1];
            v131[0] = *v58;
            v131[1] = v59;
            uint64_t v60 = v57 + ((unint64_t)v56 << 6);
            int v61 = (int)((*((double *)v131 + (v39 & 3)) - v54) / v44 * (double)a2);
            if (v61 == a2) {
              int v61 = v20;
            }
            float32x2_t v62 = &v46[4 * (uint64_t)v61];
            float64x2_t v63 = vminnmq_f64((float64x2_t)*(unint64_t *)(v60 + 16), (float64x2_t)*(unint64_t *)&v62[1].f64[0]);
            *float32x2_t v62 = vminnmq_f64(*(float64x2_t *)v60, *v62);
            v62[1] = v63;
            float64x2_t v64 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(v60 + 48), (float64x2_t)*(unint64_t *)&v62[3].f64[0]);
            v62[2] = vmaxnmq_f64(*(float64x2_t *)(v60 + 32), v62[2]);
            v62[3] = v64;
            ++begin[v61];
            v55 -= 4;
          }
          while (v55);
        }
        std::inclusive_scan[abi:nn180100]<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>,std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>,unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)::{lambda(geom::bbox<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> const&)#1}>(v46, v47, (float64x2_t *)v139);
        std::inclusive_scan[abi:nn180100]<std::reverse_iterator<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>>,std::reverse_iterator<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>>,unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)::{lambda(geom::bbox<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> const&)#1}>((uint64_t)v143, v143, (uint64_t)v142, (float64x2_t *)v142, (uint64_t)v137, (uint64_t)v137);
        std::vector<int>::pointer v65 = v134.__begin_;
        int64_t v66 = (char *)v134.__end_ - (char *)v134.__begin_;
        if (v134.__end_ != v134.__begin_)
        {
          std::vector<int>::pointer v67 = v135.__begin_;
          int v68 = *v135.__begin_;
          *v134.__begin_ = *v135.__begin_;
          if (v66 != 4)
          {
            uint64_t v69 = v66 >> 2;
            float32x4_t v70 = v67 + 1;
            float32x4_t v71 = v65 + 1;
            uint64_t v72 = 4 * v69 - 4;
            do
            {
              int v73 = *v70++;
              v68 += v73;
              *v71++ = v68;
              v72 -= 4;
            }
            while (v72);
          }
        }
        int v40 = v127;
        uint64_t v38 = v128;
        int v41 = v126;
        if (v20)
        {
          uint64_t v74 = 0;
          int64_t v75 = (float64x2_t *)v139;
          std::vector<int>::pointer v76 = (float64x2_t *)((char *)__p + 64);
          do
          {
            float64x2_t v77 = v75[1];
            float64x2_t v78 = v75[2];
            float64x2_t v79 = v75[3];
            int64x2_t v80 = vcgtq_f64(*v75, v78);
            unint64_t v81 = vorrq_s8((int8x16_t)vdupq_laneq_s64(v80, 1), vorrq_s8((int8x16_t)vcgtq_f64(v77, v79), (int8x16_t)v80)).u64[0];
            double v82 = 0.0;
            double v83 = 0.0;
            if ((v81 & 0x8000000000000000) == 0)
            {
              float64x2_t v84 = vsubq_f64(v78, *v75);
              float64x2_t v85 = vsubq_f64(v79, v77);
              double v86 = vmulq_laneq_f64(v85, v84, 1).f64[0];
              v85.f64[1] = v84.f64[0];
              double v83 = v86 + vaddvq_f64(vmulq_f64(v84, v85));
            }
            float64x2_t v87 = v76[1];
            float64x2_t v88 = v76[2];
            float64x2_t v89 = v76[3];
            int64x2_t v90 = vcgtq_f64(*v76, v88);
            if ((vorrq_s8((int8x16_t)vdupq_laneq_s64(v90, 1), vorrq_s8((int8x16_t)vcgtq_f64(v87, v89), (int8x16_t)v90)).u64[0] & 0x8000000000000000) == 0)
            {
              float64x2_t v91 = vsubq_f64(v88, *v76);
              float64x2_t v92 = vsubq_f64(v89, v87);
              double v93 = vmulq_laneq_f64(v92, v91, 1).f64[0];
              v92.f64[1] = v91.f64[0];
              double v82 = v93 + vaddvq_f64(vmulq_f64(v91, v92));
            }
            uint64_t v94 = v65[v74];
            double v95 = v82 * (double)(*(_DWORD *)(a3 + 16) - v94) + (double)v94 * v83;
            if (v95 < v42)
            {
              float64x2_t v96 = *v75;
              float64x2_t v97 = v75[1];
              float64x2_t v98 = v75[3];
              a4[2] = v75[2];
              a4[3] = v98;
              *a4 = v96;
              a4[1] = v97;
              float64x2_t v99 = *v76;
              float64x2_t v100 = v76[1];
              float64x2_t v101 = v76[3];
              a5[2] = v76[2];
              a5[3] = v101;
              *a5 = v99;
              a5[1] = v100;
              int v40 = v39;
              uint64_t v38 = v94;
              int v41 = v74;
              double v42 = v95;
            }
            ++v74;
            v75 += 4;
            v76 += 4;
          }
          while (v20 != v74);
        }
      }
      ++v39;
    }
    while (v39 != 3);
    uint64_t v102 = a1[4];
    uint64_t v103 = *(unsigned int *)(a3 + 12);
    float32x4_t v104 = (_DWORD *)(v102 + 4 * v103);
    LODWORD(v103) = *(_DWORD *)(a3 + 16) + v103;
    float32x4_t v145 = a1;
    float64x2_t v146 = v119;
    float64x2_t v147 = v123;
    float64x2_t v148 = v120;
    float64x2_t v149 = v121;
    float64x2_t v150 = v118;
    float64x2_t v151 = v130;
    int v152 = v41;
    int v153 = v40;
    unsigned int v154 = a2;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v104, (_DWORD *)(v102 + 4 * v103), (uint64_t)&v145);
  }
  if (v134.__begin_)
  {
    v134.__end_ = v134.__begin_;
    operator delete(v134.__begin_);
  }
  if (v135.__begin_)
  {
    v135.__end_ = v135.__begin_;
    operator delete(v135.__begin_);
  }
  if (__p)
  {
    int v137 = __p;
    operator delete(__p);
  }
  if (v139)
  {
    int v140 = v139;
    operator delete(v139);
  }
  if (v142)
  {
    float32x4_t v143 = (float64x2_t *)v142;
    operator delete(v142);
  }
  return v38;
}

float64x2_t *std::inclusive_scan[abi:nn180100]<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>,std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>,unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)::{lambda(geom::bbox<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> const&)#1}>(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3)
{
  if (a1 == a2) {
    return a3;
  }
  uint64_t v3 = a1;
  float64x2_t v5 = *a1;
  float64x2_t v4 = a1[1];
  float64x2_t v7 = a1[2];
  float64x2_t v6 = a1[3];
  __n128 result = a3 + 4;
  *a3 = v5;
  a3[1] = v4;
  a3[2] = v7;
  a3[3] = v6;
  while (1)
  {
    v3 += 4;
    if (v3 == a2) {
      break;
    }
    float64x2_t v5 = vminnmq_f64(v5, *v3);
    float64x2_t v4 = vminnmq_f64((float64x2_t)*(unint64_t *)&v4.f64[0], (float64x2_t)*(unint64_t *)&v3[1].f64[0]);
    float64x2_t v7 = vmaxnmq_f64(v7, v3[2]);
    float64x2_t v6 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v6.f64[0], (float64x2_t)*(unint64_t *)&v3[3].f64[0]);
    *__n128 result = v5;
    result[1] = v4;
    result[2] = v7;
    result[3] = v6;
    result += 4;
  }
  return result;
}

uint64_t std::inclusive_scan[abi:nn180100]<std::reverse_iterator<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>>,std::reverse_iterator<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>>,unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)::{lambda(geom::bbox<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> const&)#1}>(uint64_t a1, float64x2_t *a2, uint64_t a3, float64x2_t *a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = a5;
  if (a2 != a4)
  {
    float64x2_t v8 = a2[-4];
    float64x2_t v7 = a2 - 4;
    float64x2_t v9 = v8;
    float64x2_t v11 = v7[2];
    float64x2_t v10 = v7[3];
    float64x2_t v12 = v7[1];
    *(float64x2_t *)(a6 - 64) = v8;
    *(float64x2_t *)(a6 - 48) = v12;
    unint64_t v13 = (float64x2_t *)(a6 - 64);
    void v13[2] = v11;
    v13[3] = v10;
    if (v7 != a4)
    {
      double v14 = (float64x2_t *)(a6 - 128);
      uint64_t v15 = a6 - 64;
      do
      {
        float64x2_t v16 = v7[-4];
        v7 -= 4;
        float64x2_t v9 = vminnmq_f64(v9, v16);
        float64x2_t v12 = vminnmq_f64((float64x2_t)*(unint64_t *)&v12.f64[0], (float64x2_t)*(unint64_t *)&v7[1].f64[0]);
        float64x2_t v11 = vmaxnmq_f64(v11, v7[2]);
        float64x2_t v10 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v10.f64[0], (float64x2_t)*(unint64_t *)&v7[3].f64[0]);
        *double v14 = v9;
        v14[1] = v12;
        v14[2] = v11;
        v14[3] = v10;
        v14 -= 4;
        v15 -= 64;
      }
      while (v7 != a4);
    }
  }
  return result;
}

_DWORD *std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(unsigned int)#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(_DWORD *result, _DWORD *a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v3 = *(void *)(*(void *)a3 + 56);
    float64x2_t v4 = a2;
    while (2)
    {
      int v5 = *(_DWORD *)(a3 + 116);
      long long v6 = *(_OWORD *)(a3 + 32);
      v25[0] = *(_OWORD *)(a3 + 16);
      v25[1] = v6;
      double v7 = *((double *)v25 + (v5 & 3));
      long long v8 = *(_OWORD *)(a3 + 96);
      v24[0] = *(_OWORD *)(a3 + 80);
      v24[1] = v8;
      double v9 = *((double *)v24 + (v5 & 3));
      unsigned int v10 = *(_DWORD *)(a3 + 120);
      double v11 = (double)v10;
      unsigned int v12 = *(_DWORD *)(a3 + 112);
      unint64_t v13 = result;
      while (1)
      {
        uint64_t v14 = *v13;
        uint64_t v15 = (_OWORD *)(v3 + 32 * v14);
        long long v16 = v15[1];
        v23[0] = *v15;
        v23[1] = v16;
        unsigned int v17 = (int)((*((double *)v23 + (v5 & 3)) - v7) / v9 * v11);
        if (v10 == v17) {
          unsigned int v17 = v10 - 1;
        }
        if (v17 > v12) {
          break;
        }
        if (++v13 == v4) {
          return v4;
        }
      }
      do
      {
        if (--v4 == v13) {
          return v13;
        }
        uint64_t v18 = *v4;
        __n128 v19 = (_OWORD *)(v3 + 32 * v18);
        long long v20 = v19[1];
        v22[0] = *v19;
        v22[1] = v20;
        unsigned int v21 = (int)((*((double *)v22 + (v5 & 3)) - v7) / v9 * v11);
        if (v10 == v21) {
          unsigned int v21 = v10 - 1;
        }
      }
      while (v21 > v12);
      *unint64_t v13 = v18;
      uint64_t result = v13 + 1;
      _DWORD *v4 = v14;
      if (v4 != v13 + 1) {
        continue;
      }
      break;
    }
    return v13 + 1;
  }
  return result;
}

void std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26EA06CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06CF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, double a5, double a6, __n128 a7)
{
  return geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::target_type()
{
}

uint64_t geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::volume_heuristic_functor<double,(unsigned char)3>>(void *a1, unsigned int a2, uint64_t a3, float64x2_t *a4, float64x2_t *a5, double a6, double a7, __n128 a8)
{
  uint64_t v150 = *MEMORY[0x263EF8340];
  int v137 = 0;
  uint64_t v138 = 0;
  uint64_t v139 = 0;
  unint64_t v13 = a2;
  std::vector<geom::bbox<double,(unsigned char)3>>::resize((uint64_t)&v137, a2, a6, a7, a8);
  std::vector<int> v134 = 0;
  std::vector<int> v135 = 0;
  uint64_t v136 = 0;
  std::vector<geom::bbox<double,(unsigned char)3>>::resize((uint64_t)&v134, v13, v14, v15, v16);
  std::vector<int> __p = 0;
  std::vector<int> v132 = 0;
  uint64_t v133 = 0;
  std::vector<geom::bbox<double,(unsigned char)3>>::resize((uint64_t)&__p, v13, v17, v18, v19);
  memset(&v130, 0, sizeof(v130));
  std::vector<unsigned int>::resize(&v130, v13);
  memset(&v129, 0, sizeof(v129));
  std::vector<int>::size_type v20 = a2 - 1;
  std::vector<unsigned int>::resize(&v129, v20);
  uint64_t v25 = *(unsigned int *)(a3 + 12);
  unsigned int v24 = *(_DWORD *)(a3 + 16);
  uint64_t v26 = v24 + v25;
  int v27 = (unsigned int *)(a1[4] + 4 * v25);
  if (v24)
  {
    v22.f64[0] = INFINITY;
    v21.f64[0] = -INFINITY;
    uint64_t v28 = 4 * v26 - 4 * v25;
    float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v30 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    int32x4_t v31 = (unsigned int *)(a1[4] + 4 * v25);
    do
    {
      unsigned int v32 = *v31++;
      uint64_t v33 = a1[7] + 32 * v32;
      long long v34 = *(_OWORD *)(v33 + 16);
      float64x2_t v29 = vminnmq_f64(v29, *(float64x2_t *)v33);
      float64x2_t v22 = vminnmq_f64((float64x2_t)*(unint64_t *)&v22.f64[0], (float64x2_t)(unint64_t)v34);
      float64x2_t v30 = vmaxnmq_f64(v30, *(float64x2_t *)v33);
      float64x2_t v21 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v21.f64[0], (float64x2_t)(unint64_t)v34);
      v28 -= 4;
    }
    while (v28);
  }
  else
  {
    v21.f64[0] = -INFINITY;
    v22.f64[0] = INFINITY;
    float64x2_t v30 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  }
  float64x2_t v35 = vsubq_f64(v30, v29);
  v23.f64[0] = (double)a2;
  float64x2_t v36 = vdivq_f64(v35, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a2), 0));
  float64x2_t v125 = vsubq_f64(v21, v22);
  float64x2_t v37 = vdivq_f64(v125, v23);
  if (sqrt(vmulq_f64(v37, v37).f64[0] + vaddvq_f64(vmulq_f64(v36, v36))) <= 0.000001)
  {
    uint64_t v100 = v25 + (v24 >> 1);
    float64x2_t v101 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v102 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    if (v24 >= 2)
    {
      v21.f64[0] = INFINITY;
      v22.f64[0] = -INFINITY;
      uint64_t v105 = 4 * v100 - 4 * v25;
      float64x2_t v104 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v103 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      do
      {
        unsigned int v106 = *v27++;
        unint64_t v107 = a1[10] + ((unint64_t)v106 << 6);
        float64x2_t v104 = vminnmq_f64(v104, *(float64x2_t *)v107);
        float64x2_t v21 = vminnmq_f64((float64x2_t)*(unint64_t *)&v21.f64[0], (float64x2_t)*(unint64_t *)(v107 + 16));
        float64x2_t v103 = vmaxnmq_f64(v103, *(float64x2_t *)(v107 + 32));
        float64x2_t v22 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v22.f64[0], (float64x2_t)*(unint64_t *)(v107 + 48));
        v105 -= 4;
      }
      while (v105);
    }
    else
    {
      v21.f64[0] = INFINITY;
      v22.f64[0] = -INFINITY;
      float64x2_t v103 = v102;
      float64x2_t v104 = v101;
    }
    *a4 = v104;
    a4[1] = v21;
    a4[2] = v103;
    a4[3] = v22;
    if (v24 == v24 >> 1)
    {
      v21.f64[0] = INFINITY;
      v22.f64[0] = -INFINITY;
    }
    else
    {
      float64x2_t v108 = (unsigned int *)(a1[4] + 4 * v100);
      float64x2_t v101 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      v21.f64[0] = INFINITY;
      float64x2_t v102 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      v22.f64[0] = -INFINITY;
      uint64_t v109 = 4 * v26 - 4 * v100;
      do
      {
        unsigned int v110 = *v108++;
        unint64_t v111 = a1[10] + ((unint64_t)v110 << 6);
        float64x2_t v101 = vminnmq_f64(v101, *(float64x2_t *)v111);
        float64x2_t v21 = vminnmq_f64((float64x2_t)*(unint64_t *)&v21.f64[0], (float64x2_t)*(unint64_t *)(v111 + 16));
        float64x2_t v102 = vmaxnmq_f64(v102, *(float64x2_t *)(v111 + 32));
        float64x2_t v22 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v22.f64[0], (float64x2_t)*(unint64_t *)(v111 + 48));
        v109 -= 4;
      }
      while (v109);
    }
    *a5 = v101;
    a5[1] = v21;
    a5[2] = v102;
    a5[3] = v22;
    uint64_t v38 = *(_DWORD *)(a3 + 16) >> 1;
  }
  else
  {
    float64x2_t v115 = v30;
    float64x2_t v116 = v21;
    uint64_t v38 = 0;
    int v39 = 0;
    int v40 = -1;
    int v41 = 1;
    double v42 = 1.79769313e308;
    float64x2_t v113 = v35;
    float64x2_t v114 = v29;
    *(void *)&v35.f64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    float64x2_t v124 = v35;
    int64x2_t v120 = vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v118 = v22;
    int64x2_t v119 = vdupq_n_s64(0xFFF0000000000000);
    *(void *)&v29.f64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
    float64x2_t v117 = v29;
    do
    {
      *((void *)&v43 + 1) = *(void *)&v124.f64[1];
      v128[0] = v124;
      v128[1] = v125;
      double v44 = *((double *)v128 + (v39 & 3));
      if (fabs(v44) > 0.000001)
      {
        int v121 = v41;
        int v122 = v40;
        unsigned int v123 = v38;
        std::vector<int>::pointer begin = v130.__begin_;
        if ((char *)v130.__end_ - (char *)v130.__begin_ >= 1) {
          bzero(v130.__begin_, 4* (((unint64_t)((char *)v130.__end_ - (char *)v130.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v130.__end_ - (char *)v130.__begin_) > (std::vector<int>::pointer)3))+ 4);
        }
        uint64_t v46 = (float64x2_t *)v137;
        float32x4_t v47 = v138;
        if ((char *)v138 - (unsigned char *)v137 >= 1)
        {
          unint64_t v48 = ((unint64_t)((char *)v138 - (unsigned char *)v137) >> 6) + 1;
          float32x4_t v49 = v137;
          do
          {
            *(void *)&long long v43 = 0x7FF0000000000000;
            *float32x4_t v49 = v120;
            v49[1] = v43;
            *(void *)&long long v43 = 0xFFF0000000000000;
            _OWORD v49[2] = v119;
            v49[3] = v43;
            --v48;
            v49 += 4;
          }
          while (v48 > 1);
        }
        int v50 = *(_DWORD *)(a3 + 16);
        if (v50)
        {
          uint64_t v51 = *(unsigned int *)(a3 + 12);
          uint64_t v52 = (v50 + v51);
          float32x4_t v53 = (unsigned int *)(a1[4] + 4 * v51);
          v127[0] = v117;
          v127[1] = v118;
          double v54 = *((double *)v127 + (v39 & 3));
          uint64_t v55 = 4 * v52 - 4 * v51;
          do
          {
            unsigned int v56 = *v53++;
            uint64_t v57 = a1[10];
            float32x4_t v58 = (_OWORD *)(a1[7] + 32 * v56);
            long long v59 = v58[1];
            v126[0] = *v58;
            v126[1] = v59;
            uint64_t v60 = v57 + ((unint64_t)v56 << 6);
            int v61 = (int)((*((double *)v126 + (v39 & 3)) - v54) / v44 * (double)a2);
            if (v61 == a2) {
              int v61 = v20;
            }
            float32x2_t v62 = &v46[4 * (uint64_t)v61];
            float64x2_t v63 = vminnmq_f64((float64x2_t)*(unint64_t *)(v60 + 16), (float64x2_t)*(unint64_t *)&v62[1].f64[0]);
            *float32x2_t v62 = vminnmq_f64(*(float64x2_t *)v60, *v62);
            v62[1] = v63;
            float64x2_t v64 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(v60 + 48), (float64x2_t)*(unint64_t *)&v62[3].f64[0]);
            v62[2] = vmaxnmq_f64(*(float64x2_t *)(v60 + 32), v62[2]);
            v62[3] = v64;
            ++begin[v61];
            v55 -= 4;
          }
          while (v55);
        }
        std::inclusive_scan[abi:nn180100]<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>,std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>,unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)::{lambda(geom::bbox<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> const&)#1}>(v46, v47, (float64x2_t *)v134);
        std::inclusive_scan[abi:nn180100]<std::reverse_iterator<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>>,std::reverse_iterator<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>>,unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)::{lambda(geom::bbox<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> const&)#1}>((uint64_t)v138, v138, (uint64_t)v137, (float64x2_t *)v137, (uint64_t)v132, (uint64_t)v132);
        std::vector<int>::pointer v65 = v129.__begin_;
        int64_t v66 = (char *)v129.__end_ - (char *)v129.__begin_;
        if (v129.__end_ != v129.__begin_)
        {
          std::vector<int>::pointer v67 = v130.__begin_;
          int v68 = *v130.__begin_;
          *v129.__begin_ = *v130.__begin_;
          if (v66 != 4)
          {
            uint64_t v69 = v66 >> 2;
            float32x4_t v70 = v67 + 1;
            float32x4_t v71 = v65 + 1;
            uint64_t v72 = 4 * v69 - 4;
            do
            {
              int v73 = *v70++;
              v68 += v73;
              *v71++ = v68;
              v72 -= 4;
            }
            while (v72);
          }
        }
        int v40 = v122;
        uint64_t v38 = v123;
        int v41 = v121;
        if (v20)
        {
          uint64_t v74 = 0;
          int64_t v75 = (float64x2_t *)v134;
          std::vector<int>::pointer v76 = (float64x2_t *)((char *)__p + 64);
          do
          {
            uint64_t v77 = v65[v74];
            float64x2_t v78 = v75[1];
            float64x2_t v79 = v75[2];
            float64x2_t v80 = v75[3];
            int64x2_t v81 = vcgtq_f64(*v75, v79);
            float64x2_t v82 = vsubq_f64(v79, *v75);
            double v83 = vmuld_lane_f64(v82.f64[0], v82, 1) * vsubq_f64(v80, v78).f64[0];
            if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v81, 1), vorrq_s8((int8x16_t)vcgtq_f64(v78, v80), (int8x16_t)v81)).i64[0] < 0) {
              double v83 = 0.0;
            }
            float64x2_t v84 = v76[1];
            float64x2_t v85 = v76[2];
            float64x2_t v86 = v76[3];
            int64x2_t v87 = vcgtq_f64(*v76, v85);
            float64x2_t v88 = vsubq_f64(v85, *v76);
            double v89 = vmuld_lane_f64(v88.f64[0], v88, 1) * vsubq_f64(v86, v84).f64[0];
            if (vorrq_s8((int8x16_t)vdupq_laneq_s64(v87, 1), vorrq_s8((int8x16_t)vcgtq_f64(v84, v86), (int8x16_t)v87)).i64[0] < 0) {
              double v89 = 0.0;
            }
            double v90 = v89 * (double)(*(_DWORD *)(a3 + 16) - v77) + (double)v77 * v83;
            if (v90 < v42)
            {
              float64x2_t v91 = *v75;
              float64x2_t v92 = v75[1];
              float64x2_t v93 = v75[3];
              a4[2] = v75[2];
              a4[3] = v93;
              *a4 = v91;
              a4[1] = v92;
              float64x2_t v94 = *v76;
              float64x2_t v95 = v76[1];
              float64x2_t v96 = v76[3];
              a5[2] = v76[2];
              a5[3] = v96;
              *a5 = v94;
              a5[1] = v95;
              int v40 = v39;
              uint64_t v38 = v77;
              int v41 = v74;
              double v42 = v90;
            }
            ++v74;
            v75 += 4;
            v76 += 4;
          }
          while (v20 != v74);
        }
      }
      ++v39;
    }
    while (v39 != 3);
    uint64_t v97 = a1[4];
    uint64_t v98 = *(unsigned int *)(a3 + 12);
    float64x2_t v99 = (_DWORD *)(v97 + 4 * v98);
    LODWORD(v98) = *(_DWORD *)(a3 + 16) + v98;
    int v140 = a1;
    float64x2_t v141 = v114;
    float64x2_t v142 = v118;
    float64x2_t v143 = v115;
    float64x2_t v144 = v116;
    float64x2_t v145 = v113;
    float64x2_t v146 = v125;
    int v147 = v41;
    int v148 = v40;
    unsigned int v149 = a2;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v99, (_DWORD *)(v97 + 4 * v98), (uint64_t)&v140);
  }
  if (v129.__begin_)
  {
    v129.__end_ = v129.__begin_;
    operator delete(v129.__begin_);
  }
  if (v130.__begin_)
  {
    v130.__end_ = v130.__begin_;
    operator delete(v130.__begin_);
  }
  if (__p)
  {
    std::vector<int> v132 = __p;
    operator delete(__p);
  }
  if (v134)
  {
    std::vector<int> v135 = v134;
    operator delete(v134);
  }
  if (v137)
  {
    uint64_t v138 = (float64x2_t *)v137;
    operator delete(v137);
  }
  return v38;
}

void std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26EA06D70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06D70;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::operator()(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, double a5, double a6, __n128 a7)
{
  return geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(*(void **)(a1 + 8), *(_DWORD *)(a1 + 24), a2, a3, a4, a5, a6, a7);
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,geom::intersection_volume_heuristic_functor<double,(unsigned char)3>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)>::target_type()
{
}

uint64_t geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::intersection_volume_heuristic_functor<double,(unsigned char)3>>(void *a1, unsigned int a2, uint64_t a3, float64x2_t *a4, float64x2_t *a5, double a6, double a7, __n128 a8)
{
  uint64_t v143 = *MEMORY[0x263EF8340];
  std::vector<int> v130 = 0;
  std::vector<int> v131 = 0;
  uint64_t v132 = 0;
  unint64_t v13 = a2;
  std::vector<geom::bbox<double,(unsigned char)3>>::resize((uint64_t)&v130, a2, a6, a7, a8);
  int v127 = 0;
  unsigned int v128 = 0;
  uint64_t v129 = 0;
  std::vector<geom::bbox<double,(unsigned char)3>>::resize((uint64_t)&v127, v13, v14, v15, v16);
  std::vector<int> __p = 0;
  float64x2_t v125 = 0;
  uint64_t v126 = 0;
  std::vector<geom::bbox<double,(unsigned char)3>>::resize((uint64_t)&__p, v13, v17, v18, v19);
  memset(&v123, 0, sizeof(v123));
  std::vector<unsigned int>::resize(&v123, v13);
  memset(&v122, 0, sizeof(v122));
  std::vector<int>::size_type v20 = a2 - 1;
  std::vector<unsigned int>::resize(&v122, v20);
  uint64_t v25 = *(unsigned int *)(a3 + 12);
  unsigned int v24 = *(_DWORD *)(a3 + 16);
  uint64_t v26 = v24 + v25;
  int v27 = (unsigned int *)(a1[4] + 4 * v25);
  if (v24)
  {
    v22.f64[0] = INFINITY;
    v21.f64[0] = -INFINITY;
    uint64_t v28 = 4 * v26 - 4 * v25;
    float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v30 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    int32x4_t v31 = (unsigned int *)(a1[4] + 4 * v25);
    do
    {
      unsigned int v32 = *v31++;
      uint64_t v33 = a1[7] + 32 * v32;
      long long v34 = *(_OWORD *)(v33 + 16);
      float64x2_t v29 = vminnmq_f64(v29, *(float64x2_t *)v33);
      float64x2_t v22 = vminnmq_f64((float64x2_t)*(unint64_t *)&v22.f64[0], (float64x2_t)(unint64_t)v34);
      float64x2_t v30 = vmaxnmq_f64(v30, *(float64x2_t *)v33);
      float64x2_t v21 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v21.f64[0], (float64x2_t)(unint64_t)v34);
      v28 -= 4;
    }
    while (v28);
  }
  else
  {
    v21.f64[0] = -INFINITY;
    v22.f64[0] = INFINITY;
    float64x2_t v30 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v29 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  }
  float64x2_t v35 = vsubq_f64(v30, v29);
  v23.f64[0] = (double)a2;
  float64x2_t v36 = vdivq_f64(v35, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a2), 0));
  float64x2_t v118 = vsubq_f64(v21, v22);
  float64x2_t v37 = vdivq_f64(v118, v23);
  if (sqrt(vmulq_f64(v37, v37).f64[0] + vaddvq_f64(vmulq_f64(v36, v36))) <= 0.000001)
  {
    uint64_t v93 = v25 + (v24 >> 1);
    float64x2_t v94 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v95 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    if (v24 >= 2)
    {
      v21.f64[0] = INFINITY;
      v22.f64[0] = -INFINITY;
      uint64_t v98 = 4 * v93 - 4 * v25;
      float64x2_t v97 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v96 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      do
      {
        unsigned int v99 = *v27++;
        unint64_t v100 = a1[10] + ((unint64_t)v99 << 6);
        float64x2_t v97 = vminnmq_f64(v97, *(float64x2_t *)v100);
        float64x2_t v21 = vminnmq_f64((float64x2_t)*(unint64_t *)&v21.f64[0], (float64x2_t)*(unint64_t *)(v100 + 16));
        float64x2_t v96 = vmaxnmq_f64(v96, *(float64x2_t *)(v100 + 32));
        float64x2_t v22 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v22.f64[0], (float64x2_t)*(unint64_t *)(v100 + 48));
        v98 -= 4;
      }
      while (v98);
    }
    else
    {
      v21.f64[0] = INFINITY;
      v22.f64[0] = -INFINITY;
      float64x2_t v96 = v95;
      float64x2_t v97 = v94;
    }
    *a4 = v97;
    a4[1] = v21;
    a4[2] = v96;
    a4[3] = v22;
    if (v24 == v24 >> 1)
    {
      v21.f64[0] = INFINITY;
      v22.f64[0] = -INFINITY;
    }
    else
    {
      float64x2_t v101 = (unsigned int *)(a1[4] + 4 * v93);
      float64x2_t v94 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      v21.f64[0] = INFINITY;
      float64x2_t v95 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      v22.f64[0] = -INFINITY;
      uint64_t v102 = 4 * v26 - 4 * v93;
      do
      {
        unsigned int v103 = *v101++;
        unint64_t v104 = a1[10] + ((unint64_t)v103 << 6);
        float64x2_t v94 = vminnmq_f64(v94, *(float64x2_t *)v104);
        float64x2_t v21 = vminnmq_f64((float64x2_t)*(unint64_t *)&v21.f64[0], (float64x2_t)*(unint64_t *)(v104 + 16));
        float64x2_t v95 = vmaxnmq_f64(v95, *(float64x2_t *)(v104 + 32));
        float64x2_t v22 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v22.f64[0], (float64x2_t)*(unint64_t *)(v104 + 48));
        v102 -= 4;
      }
      while (v102);
    }
    *a5 = v94;
    a5[1] = v21;
    a5[2] = v95;
    a5[3] = v22;
    uint64_t v38 = *(_DWORD *)(a3 + 16) >> 1;
  }
  else
  {
    float64x2_t v108 = v30;
    float64x2_t v109 = v21;
    uint64_t v38 = 0;
    int v39 = 0;
    int v40 = -1;
    int v41 = 1;
    double v42 = 1.79769313e308;
    float64x2_t v106 = v35;
    float64x2_t v107 = v29;
    *(void *)&v35.f64[1] = vextq_s8((int8x16_t)v35, (int8x16_t)v35, 8uLL).u64[0];
    float64x2_t v117 = v35;
    int64x2_t v113 = vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v111 = v22;
    int64x2_t v112 = vdupq_n_s64(0xFFF0000000000000);
    *(void *)&v29.f64[1] = vextq_s8((int8x16_t)v29, (int8x16_t)v29, 8uLL).u64[0];
    float64x2_t v110 = v29;
    do
    {
      *((void *)&v43 + 1) = *(void *)&v117.f64[1];
      v121[0] = v117;
      v121[1] = v118;
      double v44 = *((double *)v121 + (v39 & 3));
      if (fabs(v44) > 0.000001)
      {
        int v114 = v41;
        int v115 = v40;
        unsigned int v116 = v38;
        std::vector<int>::pointer begin = v123.__begin_;
        if ((char *)v123.__end_ - (char *)v123.__begin_ >= 1)
        {
          bzero(v123.__begin_, 4* (((unint64_t)((char *)v123.__end_ - (char *)v123.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v123.__end_ - (char *)v123.__begin_) > (std::vector<int>::pointer)3))+ 4);
          v23.f64[0] = (double)a2;
        }
        uint64_t v46 = (float64x2_t *)v130;
        float32x4_t v47 = v131;
        if ((char *)v131 - (unsigned char *)v130 >= 1)
        {
          unint64_t v48 = ((unint64_t)((char *)v131 - (unsigned char *)v130) >> 6) + 1;
          float32x4_t v49 = v130;
          do
          {
            *(void *)&long long v43 = 0x7FF0000000000000;
            *float32x4_t v49 = v113;
            v49[1] = v43;
            *(void *)&long long v43 = 0xFFF0000000000000;
            _OWORD v49[2] = v112;
            v49[3] = v43;
            --v48;
            v49 += 4;
          }
          while (v48 > 1);
        }
        int v50 = *(_DWORD *)(a3 + 16);
        if (v50)
        {
          uint64_t v51 = *(unsigned int *)(a3 + 12);
          uint64_t v52 = (v50 + v51);
          float32x4_t v53 = (unsigned int *)(a1[4] + 4 * v51);
          v120[0] = v110;
          v120[1] = v111;
          double v54 = *((double *)v120 + (v39 & 3));
          uint64_t v55 = 4 * v52 - 4 * v51;
          do
          {
            unsigned int v56 = *v53++;
            uint64_t v57 = a1[10];
            float32x4_t v58 = (_OWORD *)(a1[7] + 32 * v56);
            long long v59 = v58[1];
            v119[0] = *v58;
            v119[1] = v59;
            uint64_t v60 = v57 + ((unint64_t)v56 << 6);
            int v61 = (int)((*((double *)v119 + (v39 & 3)) - v54) / v44 * v23.f64[0]);
            if (v61 == a2) {
              int v61 = v20;
            }
            float32x2_t v62 = &v46[4 * (uint64_t)v61];
            float64x2_t v63 = vminnmq_f64((float64x2_t)*(unint64_t *)(v60 + 16), (float64x2_t)*(unint64_t *)&v62[1].f64[0]);
            *float32x2_t v62 = vminnmq_f64(*(float64x2_t *)v60, *v62);
            v62[1] = v63;
            float64x2_t v64 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(v60 + 48), (float64x2_t)*(unint64_t *)&v62[3].f64[0]);
            v62[2] = vmaxnmq_f64(*(float64x2_t *)(v60 + 32), v62[2]);
            v62[3] = v64;
            ++begin[v61];
            v55 -= 4;
          }
          while (v55);
        }
        std::inclusive_scan[abi:nn180100]<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>,std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>,unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)::{lambda(geom::bbox<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> const&)#1}>(v46, v47, (float64x2_t *)v127);
        std::inclusive_scan[abi:nn180100]<std::reverse_iterator<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>>,std::reverse_iterator<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>>,unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)::{lambda(geom::bbox<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> const&)#1}>((uint64_t)v131, v131, (uint64_t)v130, (float64x2_t *)v130, (uint64_t)v125, (uint64_t)v125);
        std::vector<int>::pointer v65 = v122.__begin_;
        int64_t v66 = (char *)v122.__end_ - (char *)v122.__begin_;
        if (v122.__end_ != v122.__begin_)
        {
          std::vector<int>::pointer v67 = v123.__begin_;
          int v68 = *v123.__begin_;
          *v122.__begin_ = *v123.__begin_;
          if (v66 != 4)
          {
            uint64_t v69 = v66 >> 2;
            float32x4_t v70 = v67 + 1;
            float32x4_t v71 = v65 + 1;
            uint64_t v72 = 4 * v69 - 4;
            do
            {
              int v73 = *v70++;
              v68 += v73;
              *v71++ = v68;
              v72 -= 4;
            }
            while (v72);
          }
        }
        int v40 = v115;
        uint64_t v38 = v116;
        int v41 = v114;
        if (v20)
        {
          uint64_t v74 = 0;
          int64_t v75 = (float64x2_t *)v127;
          std::vector<int>::pointer v76 = (float64x2_t *)((char *)__p + 64);
          v23.f64[0] = (double)a2;
          do
          {
            float64x2_t v77 = vmaxnmq_f64(*v75, *v76);
            float64x2_t v78 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v75[1].f64[0], (float64x2_t)*(unint64_t *)&v76[1].f64[0]);
            float64x2_t v79 = vminnmq_f64(v75[2], v76[2]);
            float64x2_t v80 = vminnmq_f64((float64x2_t)*(unint64_t *)&v75[3].f64[0], (float64x2_t)*(unint64_t *)&v76[3].f64[0]);
            int64x2_t v81 = vcgtq_f64(v77, v79);
            if ((vorrq_s8(vorrq_s8((int8x16_t)vdupq_laneq_s64(v81, 1), (int8x16_t)vcgtq_f64(v78, v80)), (int8x16_t)v81).u64[0] & 0x8000000000000000) != 0)
            {
              double v83 = 0.0;
            }
            else
            {
              float64x2_t v82 = vsubq_f64(v79, v77);
              double v83 = vmuld_lane_f64(v82.f64[0], v82, 1) * vsubq_f64(v80, v78).f64[0];
            }
            if (v83 < v42)
            {
              uint64_t v38 = v65[v74];
              float64x2_t v84 = *v75;
              float64x2_t v85 = v75[1];
              float64x2_t v86 = v75[3];
              a4[2] = v75[2];
              a4[3] = v86;
              *a4 = v84;
              a4[1] = v85;
              float64x2_t v87 = *v76;
              float64x2_t v88 = v76[1];
              float64x2_t v89 = v76[3];
              a5[2] = v76[2];
              a5[3] = v89;
              *a5 = v87;
              a5[1] = v88;
              int v40 = v39;
              int v41 = v74;
              double v42 = v83;
            }
            ++v74;
            v75 += 4;
            v76 += 4;
          }
          while (v20 != v74);
        }
        else
        {
          v23.f64[0] = (double)a2;
        }
      }
      ++v39;
    }
    while (v39 != 3);
    uint64_t v90 = a1[4];
    uint64_t v91 = *(unsigned int *)(a3 + 12);
    float64x2_t v92 = (_DWORD *)(v90 + 4 * v91);
    LODWORD(v91) = *(_DWORD *)(a3 + 16) + v91;
    uint64_t v133 = a1;
    float64x2_t v134 = v107;
    float64x2_t v135 = v111;
    float64x2_t v136 = v108;
    float64x2_t v137 = v109;
    float64x2_t v138 = v106;
    float64x2_t v139 = v118;
    int v140 = v41;
    int v141 = v40;
    unsigned int v142 = a2;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>(v92, (_DWORD *)(v90 + 4 * v91), (uint64_t)&v133);
  }
  if (v122.__begin_)
  {
    v122.__end_ = v122.__begin_;
    operator delete(v122.__begin_);
  }
  if (v123.__begin_)
  {
    v123.__end_ = v123.__begin_;
    operator delete(v123.__begin_);
  }
  if (__p)
  {
    float64x2_t v125 = __p;
    operator delete(__p);
  }
  if (v127)
  {
    unsigned int v128 = v127;
    operator delete(v127);
  }
  if (v130)
  {
    std::vector<int> v131 = (float64x2_t *)v130;
    operator delete(v130);
  }
  return v38;
}

void std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::~__func()
{
}

void *std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::__clone(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = &unk_26EA06DF0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26EA06DF0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::operator()@<X0>(uint64_t result@<X0>, unsigned int *a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(result + 8);
  *a3 = &unk_26EA06E60;
  a3[1] = v4;
  a3[2] = v3;
  a3[3] = a3;
  return result;
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}>,std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::target_type()
{
}

void std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::~__func()
{
}

__n128 std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA06E60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06E60;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::operator()(uint64_t a1, unsigned int *a2, unsigned int *a3)
{
  uint64_t v3 = *a3;
  uint64_t v4 = *(void *)(*(void *)(a1 + 8) + 56);
  int v5 = (long long *)(v4 + 32 * *a2);
  long long v6 = *v5;
  long long v7 = v5[1];
  uint64_t v8 = *(_DWORD *)(a1 + 16) & 3;
  v13[0] = v6;
  v13[1] = v7;
  *(void *)&long long v6 = *((void *)v13 + v8);
  double v9 = (_OWORD *)(v4 + 32 * v3);
  long long v10 = v9[1];
  v12[0] = *v9;
  v12[1] = v10;
  return *(double *)&v6 < *((double *)v12 + v8);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(int)#1}::operator() const(int)::{lambda(unsigned int,unsigned int)#1}>,unsigned int ()(unsigned int,unsigned int)>::target_type()
{
}

void std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1}>,void ()(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)>::~__func()
{
}

__n128 std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1}>,void ()(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = &unk_26EA06EF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1}>,void ()(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06EF0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void *std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1}>,void ()(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)>::operator()(uint64_t a1, uint64_t a2, int *a3, void *a4, _DWORD *a5)
{
  return geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1}::operator()((uint64_t *)(a1 + 8), a2, *a3, a4, a5);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1}>,void ()(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1}>,void ()(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)>::target_type()
{
}

void *geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)#1}::operator()(uint64_t *a1, uint64_t a2, int a3, void *a4, _DWORD *a5)
{
  float64x2_t v20[4] = *MEMORY[0x263EF8340];
  uint64_t v9 = *a1;
  unint64_t v10 = *(unsigned int *)(a2 + 16);
  double v11 = (int *)(*(void *)(*a1 + 32) + 4 * *(unsigned int *)(a2 + 12));
  std::function<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::operator()(a1[1], a3);
  if ((v10 >> 1) != v10) {
    std::__nth_element[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)> &,unsigned int *>(v11, &v11[v10 >> 1], &v11[v10], (uint64_t)v20);
  }
  std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::~__value_func[abi:nn180100](v20);
  unsigned int v12 = (_OWORD *)(*(void *)(v9 + 56) + 32 * v11[v10 >> 1]);
  long long v13 = v12[1];
  v18[0] = *v12;
  v18[1] = v13;
  *a4 = *((void *)v18 + (a3 & 3));
  std::function<std::function<unsigned int ()(unsigned int,unsigned int)> ()(int)>::operator()(a1[1], a3);
  double v14 = std::__upper_bound[abi:nn180100]<std::_ClassicAlgPolicy,std::function<unsigned int ()(unsigned int,unsigned int)>,unsigned int *,unsigned int *,unsigned int,std::__identity>(v11, &v11[v10], &v11[v10 >> 1], (uint64_t)v19);
  __n128 result = std::__function::__value_func<unsigned int ()(unsigned int,unsigned int)>::~__value_func[abi:nn180100](v19);
  unint64_t v16 = (unint64_t)((char *)v14 - (char *)v11) >> 2;
  if (*(_DWORD *)(a2 + 16) - (int)v16 < v16) {
    LODWORD(v16) = *(_DWORD *)(a2 + 16) - v16;
  }
  *a5 = v16;
  return result;
}

void *std::__function::__value_func<void ()(geom::bvh_node<double,(unsigned char)3> const&,int,double &,unsigned int &)>::~__value_func[abi:nn180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::~__func()
{
}

__n128 std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26EA06F80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA06F80;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

BOOL std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::operator()(uint64_t a1)
{
  return *((double *)&v2 + (**(_DWORD **)(a1 + 16) & 3)) < **(double **)(a1 + 8);
}

uint64_t std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(unsigned int)#1},std::allocator<geom::bvh<double,(unsigned char)3>::partition_node_median(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda(unsigned int)#1}>,BOOL ()(unsigned int)>::target_type()
{
}

void std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x20uLL);
  *(void *)long long v2 = &unk_26EA07000;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA07000;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)>::operator()(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  return std::__invoke_void_return_wrapper<unsigned int,false>::__call[abi:nn180100]<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1} &,geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1},std::allocator<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<unsigned int,false>::__call[abi:nn180100]<void geom::bvh<float,(unsigned char)2>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)2> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&)#1} &,geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2>&,geom::bbox<float,(unsigned char)2>&>(uint64_t a1, uint64_t a2, float32x2_t *a3, float32x2_t *a4)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void **)a1;
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::__value_func[abi:nn180100]((uint64_t)v11, *(void *)(a1 + 8));
  uint64_t v9 = geom::bvh<float,(unsigned char)2>::partition_node_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(v8, (uint64_t)v11, *(_DWORD *)(a1 + 16), a2, a3, a4);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::~__value_func[abi:nn180100](v11);
  return v9;
}

uint64_t geom::bvh<float,(unsigned char)2>::partition_node_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>>(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, float32x2_t *a5, float32x2_t *a6)
{
  float64x2_t v106 = 0;
  float64x2_t v107 = 0;
  uint64_t v108 = 0;
  unint64_t v10 = a3;
  std::vector<geom::bbox<float,(unsigned char)2>>::resize((uint64_t)&v106, a3);
  unsigned int v103 = 0;
  unint64_t v104 = 0;
  uint64_t v105 = 0;
  std::vector<geom::bbox<float,(unsigned char)2>>::resize((uint64_t)&v103, v10);
  std::vector<int> __p = 0;
  float64x2_t v101 = 0;
  uint64_t v102 = 0;
  std::vector<geom::bbox<float,(unsigned char)2>>::resize((uint64_t)&__p, v10);
  memset(&v99, 0, sizeof(v99));
  std::vector<unsigned int>::resize(&v99, v10);
  memset(&v98, 0, sizeof(v98));
  std::vector<int>::size_type v11 = a3 - 1;
  std::vector<unsigned int>::resize(&v98, v11);
  uint64_t v14 = *(unsigned int *)(a4 + 12);
  unsigned int v13 = *(_DWORD *)(a4 + 16);
  uint64_t v15 = v13 + v14;
  unint64_t v16 = (unsigned int *)(a1[4] + 4 * v14);
  if (v13)
  {
    uint64_t v17 = 4 * v15 - 4 * v14;
    float32x2_t v18 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v19 = (float32x2_t)0x7F0000007FLL;
    std::vector<int>::size_type v20 = (unsigned int *)(a1[4] + 4 * v14);
    do
    {
      unsigned int v21 = *v20++;
      float32x2_t v22 = *(float32x2_t *)(a1[7] + 8 * v21);
      float32x2_t v18 = vminnm_f32(v18, v22);
      float32x2_t v19 = vmaxnm_f32(v19, v22);
      v17 -= 4;
    }
    while (v17);
  }
  else
  {
    float32x2_t v18 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v19 = (float32x2_t)0x7F0000007FLL;
  }
  float32x2_t v23 = vsub_f32(v19, v18);
  *(float *)v12.i32 = (float)a3;
  float32x2_t v24 = vdiv_f32(v23, (float32x2_t)vdup_lane_s32(v12, 0));
  if (sqrtf(vaddv_f32(vmul_f32(v24, v24))) <= 0.00001)
  {
    uint64_t v74 = v14 + (v13 >> 1);
    float32x2_t v75 = (float32x2_t)vdup_n_s32(0x7F800000u);
    float32x2_t v76 = (float32x2_t)0x7F0000007FLL;
    float32x2_t v77 = v75;
    float32x2_t v78 = (float32x2_t)0x7F0000007FLL;
    if (v13 >= 2)
    {
      uint64_t v79 = 4 * v74 - 4 * v14;
      float32x2_t v77 = (float32x2_t)vdup_n_s32(0x7F800000u);
      do
      {
        unsigned int v80 = *v16++;
        int64x2_t v81 = (float32x2_t *)(a1[10] + 16 * v80);
        float32x2_t v77 = vminnm_f32(v77, *v81);
        float32x2_t v78 = vmaxnm_f32(v78, v81[1]);
        v79 -= 4;
      }
      while (v79);
    }
    *a5 = v77;
    a5[1] = v78;
    if (v13 != v13 >> 1)
    {
      float64x2_t v82 = (unsigned int *)(a1[4] + 4 * v74);
      uint64_t v83 = 4 * v15 - 4 * v74;
      float32x2_t v75 = (float32x2_t)vdup_n_s32(0x7F800000u);
      float32x2_t v76 = (float32x2_t)0x7F0000007FLL;
      do
      {
        unsigned int v84 = *v82++;
        float64x2_t v85 = (float32x2_t *)(a1[10] + 16 * v84);
        float32x2_t v75 = vminnm_f32(v75, *v85);
        float32x2_t v76 = vmaxnm_f32(v76, v85[1]);
        v83 -= 4;
      }
      while (v83);
    }
    *a6 = v75;
    a6[1] = v76;
    uint64_t v73 = *(_DWORD *)(a4 + 16) >> 1;
  }
  else
  {
    int v25 = 0;
    int v87 = 1;
    int v88 = -1;
    unsigned int v89 = 0;
    float v26 = 3.4028e38;
    int32x2_t v27 = vdup_n_s32(0x7F800000u);
    char v28 = 1;
    do
    {
      char v29 = v28;
      float32x2_t v93 = v23;
      float v30 = *(float *)((unint64_t)&v93 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v25 & 1)));
      if (fabsf(v30) > 0.00001)
      {
        if ((char *)v99.__end_ - (char *)v99.__begin_ >= 1)
        {
          bzero(v99.__begin_, 4* (((unint64_t)((char *)v99.__end_ - (char *)v99.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v99.__end_ - (char *)v99.__begin_) > (std::vector<int>::pointer)3))+ 4);
          *(float *)v12.i32 = (float)a3;
        }
        int32x4_t v31 = v106;
        if ((char *)v107 - (char *)v106 >= 1)
        {
          unint64_t v32 = ((unint64_t)((char *)v107 - (char *)v106) >> 4) + 1;
          do
          {
            *int32x4_t v31 = (float32x2_t)v27;
            v31[1] = (float32x2_t)0x7F0000007FLL;
            v31 += 2;
            --v32;
          }
          while (v32 > 1);
        }
        int v33 = *(_DWORD *)(a4 + 16);
        if (v33)
        {
          uint64_t v34 = *(unsigned int *)(a4 + 12);
          uint64_t v35 = (v33 + v34);
          float64x2_t v36 = (unsigned int *)(a1[4] + 4 * v34);
          float32x2_t v92 = v18;
          float v37 = *(float *)((unint64_t)&v92 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v25 & 1)));
          uint64_t v38 = 4 * v35 - 4 * v34;
          do
          {
            unsigned int v39 = *v36++;
            int v40 = (int)(float)((float)((float)(*(float *)(a1[7] + 8 * v39 + 4 * (v25 & 1)) - v37) / v30)
                             * *(float *)v12.i32);
            int v41 = (float32x2_t *)(a1[10] + 16 * v39);
            if (v40 == a3) {
              int v40 = v11;
            }
            v106[2 * v40] = vminnm_f32(*v41, v106[2 * v40]);
            v106[2 * v40 + 1] = vmaxnm_f32(v41[1], v106[2 * v40 + 1]);
            ++v99.__begin_[v40];
            v38 -= 4;
          }
          while (v38);
        }
        double v42 = v107;
        if (v106 != v107)
        {
          long long v43 = (float32x2_t *)v103;
          float32x2_t v45 = *v106;
          float32x2_t v46 = v106[1];
          double v44 = v106 + 2;
          *(float32x2_t *)unsigned int v103 = *v106;
          v43[1] = v46;
          if (v44 != v42)
          {
            float32x4_t v47 = v43 + 3;
            do
            {
              float32x2_t v48 = *v44;
              float32x2_t v49 = v44[1];
              v44 += 2;
              float32x2_t v45 = vminnm_f32(v45, v48);
              float32x2_t v46 = vmaxnm_f32(v46, v49);
              v47[-1] = v45;
              *float32x4_t v47 = v46;
              v47 += 2;
            }
            while (v44 != v42);
          }
        }
        int v50 = v106;
        if (v107 != v106)
        {
          uint64_t v51 = v101;
          float32x2_t v53 = v107[-2];
          float32x2_t v54 = v107[-1];
          uint64_t v52 = v107 - 2;
          v101[-2] = v53;
          v51[-1] = v54;
          if (v52 != v50)
          {
            uint64_t v55 = v51 - 4;
            do
            {
              float32x2_t v56 = v52[-2];
              v52 -= 2;
              float32x2_t v53 = vminnm_f32(v53, v56);
              float32x2_t v54 = vmaxnm_f32(v54, v52[1]);
              *uint64_t v55 = v53;
              v55[1] = v54;
              v55 -= 2;
            }
            while (v52 != v50);
          }
        }
        std::vector<int>::pointer begin = v98.__begin_;
        int64_t v58 = (char *)v98.__end_ - (char *)v98.__begin_;
        if (v98.__end_ != v98.__begin_)
        {
          std::vector<int>::pointer v59 = v99.__begin_;
          int v60 = *v99.__begin_;
          *v98.__begin_ = *v99.__begin_;
          if (v58 != 4)
          {
            uint64_t v61 = v58 >> 2;
            float32x2_t v62 = v59 + 1;
            float64x2_t v63 = begin + 1;
            uint64_t v64 = 4 * v61 - 4;
            do
            {
              int v65 = *v62++;
              v60 += v65;
              *v63++ = v60;
              v64 -= 4;
            }
            while (v64);
          }
        }
        if (v11)
        {
          uint64_t v66 = 0;
          uint64_t v67 = 16;
          do
          {
            int v68 = v98.__begin_[v66];
            std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::operator()(a2, v68, (uint64_t)v103 + v67 - 16, *(_DWORD *)(a4 + 16) - v68);
            if (v69 < v26)
            {
              *(_OWORD *)a5->f32 = *(_OWORD *)((char *)v103 + v67 - 16);
              *(_OWORD *)a6->f32 = *(_OWORD *)((char *)__p + v67);
              int v88 = v25;
              unsigned int v89 = v68;
              int v87 = v66;
              float v26 = v69;
            }
            ++v66;
            v67 += 16;
          }
          while (v11 != v66);
        }
      }
      char v28 = 0;
      int v25 = 1;
      *(float *)v12.i32 = (float)a3;
    }
    while ((v29 & 1) != 0);
    uint64_t v70 = a1[4];
    uint64_t v71 = *(unsigned int *)(a4 + 12);
    int v72 = *(_DWORD *)(a4 + 16);
    v94[0] = a1;
    v94[1] = v18;
    v94[2] = v19;
    v94[3] = v23;
    int v95 = v87;
    int v96 = v88;
    unsigned int v97 = a3;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<float,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)2>>(geom::surface_area_heuristic_functor<float,(unsigned char)2>,unsigned int,geom::bvh_node<float,(unsigned char)2> const&,geom::bbox<float,(unsigned char)2> &,geom::bbox<float,(unsigned char)2> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>((_DWORD *)(v70 + 4 * v71), (_DWORD *)(v70 + 4 * (v72 + v71)), v94);
    uint64_t v73 = v89;
  }
  if (v98.__begin_)
  {
    v98.__end_ = v98.__begin_;
    operator delete(v98.__begin_);
  }
  if (v99.__begin_)
  {
    v99.__end_ = v99.__begin_;
    operator delete(v99.__begin_);
  }
  if (__p)
  {
    float64x2_t v101 = (float32x2_t *)__p;
    operator delete(__p);
  }
  if (v103)
  {
    unint64_t v104 = v103;
    operator delete(v103);
  }
  if (v106)
  {
    float64x2_t v107 = v106;
    operator delete(v106);
  }
  return v73;
}

uint64_t std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)2> const&,unsigned int,geom::bbox<float,(unsigned char)2> const&)>::operator()(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v7 = a2;
  int v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x236E5BAC8);
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, int *))(*(void *)v4 + 48))(v4, &v7, a3, &v6);
}

void std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x20uLL);
  *(void *)long long v2 = &unk_26EA07080;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA07080;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)>::operator()(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  return std::__invoke_void_return_wrapper<unsigned int,false>::__call[abi:nn180100]<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1} &,geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1},std::allocator<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<unsigned int,false>::__call[abi:nn180100]<void geom::bvh<double,(unsigned char)2>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)2> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&)#1} &,geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2>&,geom::bbox<double,(unsigned char)2>&>(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void **)a1;
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::__value_func[abi:nn180100]((uint64_t)v11, *(void *)(a1 + 8));
  uint64_t v9 = geom::bvh<double,(unsigned char)2>::partition_node_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(v8, (uint64_t)v11, *(_DWORD *)(a1 + 16), a2, a3, a4);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::~__value_func[abi:nn180100](v11);
  return v9;
}

uint64_t geom::bvh<double,(unsigned char)2>::partition_node_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>>(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, float64x2_t *a5, float64x2_t *a6)
{
  uint64_t v118 = *MEMORY[0x263EF8340];
  uint64_t v108 = 0;
  float64x2_t v109 = 0;
  uint64_t v110 = 0;
  unint64_t v11 = a3;
  std::vector<geom::bbox<double,(unsigned char)2>>::resize((uint64_t)&v108, a3);
  uint64_t v105 = 0;
  float64x2_t v106 = 0;
  uint64_t v107 = 0;
  std::vector<geom::bbox<double,(unsigned char)2>>::resize((uint64_t)&v105, v11);
  std::vector<int> __p = 0;
  unsigned int v103 = 0;
  uint64_t v104 = 0;
  std::vector<geom::bbox<double,(unsigned char)2>>::resize((uint64_t)&__p, v11);
  memset(&v101, 0, sizeof(v101));
  std::vector<unsigned int>::resize(&v101, v11);
  memset(&v100, 0, sizeof(v100));
  std::vector<int>::size_type v12 = a3 - 1;
  std::vector<unsigned int>::resize(&v100, v12);
  uint64_t v14 = *(unsigned int *)(a4 + 12);
  unsigned int v13 = *(_DWORD *)(a4 + 16);
  uint64_t v15 = v13 + v14;
  unint64_t v16 = (unsigned int *)(a1[4] + 4 * v14);
  if (v13)
  {
    uint64_t v17 = 4 * v15 - 4 * v14;
    float64x2_t v18 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v19 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    std::vector<int>::size_type v20 = (unsigned int *)(a1[4] + 4 * v14);
    do
    {
      unsigned int v21 = *v20++;
      float64x2_t v22 = *(float64x2_t *)(a1[7] + 16 * v21);
      float64x2_t v18 = vminnmq_f64(v18, v22);
      float64x2_t v19 = vmaxnmq_f64(v19, v22);
      v17 -= 4;
    }
    while (v17);
  }
  else
  {
    float64x2_t v19 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v18 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  }
  float64x2_t v91 = vsubq_f64(v19, v18);
  float64x2_t v23 = vdivq_f64(v91, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a3), 0));
  if (sqrt(vaddvq_f64(vmulq_f64(v23, v23))) <= 0.000001)
  {
    uint64_t v75 = v14 + (v13 >> 1);
    float64x2_t v76 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v77 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v78 = v77;
    float64x2_t v79 = v76;
    if (v13 >= 2)
    {
      uint64_t v80 = 4 * v75 - 4 * v14;
      float64x2_t v78 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v79 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      do
      {
        unsigned int v81 = *v16++;
        float64x2_t v82 = (float64x2_t *)(a1[10] + 32 * v81);
        float64x2_t v78 = vminnmq_f64(v78, *v82);
        float64x2_t v79 = vmaxnmq_f64(v79, v82[1]);
        v80 -= 4;
      }
      while (v80);
    }
    *a5 = v78;
    a5[1] = v79;
    if (v13 != v13 >> 1)
    {
      uint64_t v83 = (unsigned int *)(a1[4] + 4 * v75);
      uint64_t v84 = 4 * v15 - 4 * v75;
      float64x2_t v77 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v76 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      do
      {
        unsigned int v85 = *v83++;
        float64x2_t v86 = (float64x2_t *)(a1[10] + 32 * v85);
        float64x2_t v77 = vminnmq_f64(v77, *v86);
        float64x2_t v76 = vmaxnmq_f64(v76, v86[1]);
        v84 -= 4;
      }
      while (v84);
    }
    *a6 = v77;
    a6[1] = v76;
    uint64_t v74 = *(_DWORD *)(a4 + 16) >> 1;
  }
  else
  {
    float64x2_t v88 = v19;
    float64x2_t v89 = v18;
    int v24 = 0;
    int v94 = 1;
    int v95 = -1;
    unsigned int v96 = 0;
    double v25 = 1.79769313e308;
    int64x2_t v90 = vdupq_n_s64(0x7FF0000000000000uLL);
    int64x2_t v26 = vdupq_n_s64(0xFFF0000000000000);
    char v27 = 1;
    int64x2_t v92 = v26;
    do
    {
      float64x2_t v99 = v91;
      double v28 = *(double *)((unint64_t)&v99 & 0xFFFFFFFFFFFFFFF7 | (8 * (v24 & 1)));
      char v93 = v27;
      if (fabs(v28) > 0.000001)
      {
        if ((char *)v101.__end_ - (char *)v101.__begin_ >= 1)
        {
          bzero(v101.__begin_, 4* (((unint64_t)((char *)v101.__end_ - (char *)v101.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v101.__end_ - (char *)v101.__begin_) > (std::vector<int>::pointer)3))+ 4);
          int64x2_t v26 = v92;
        }
        char v29 = v108;
        if ((char *)v109 - (char *)v108 >= 1)
        {
          unint64_t v30 = ((unint64_t)((char *)v109 - (char *)v108) >> 5) + 1;
          do
          {
            *char v29 = (float64x2_t)v90;
            v29[1] = (float64x2_t)v26;
            v29 += 2;
            --v30;
          }
          while (v30 > 1);
        }
        int v31 = *(_DWORD *)(a4 + 16);
        if (v31)
        {
          uint64_t v32 = *(unsigned int *)(a4 + 12);
          uint64_t v33 = (v31 + v32);
          uint64_t v34 = (unsigned int *)(a1[4] + 4 * v32);
          float64x2_t v98 = v89;
          double v35 = *(double *)((unint64_t)&v98 & 0xFFFFFFFFFFFFFFF7 | (8 * (v24 & 1)));
          uint64_t v36 = 4 * v33 - 4 * v32;
          do
          {
            unsigned int v37 = *v34++;
            int v38 = (int)((*(double *)(a1[7] + 16 * v37 + 8 * (v24 & 1)) - v35) / v28 * (double)a3);
            unsigned int v39 = (float64x2_t *)(a1[10] + 32 * v37);
            if (v38 == a3) {
              int v40 = v12;
            }
            else {
              int v40 = v38;
            }
            v108[2 * v40] = vminnmq_f64(*v39, v108[2 * v40]);
            v108[2 * v40 + 1] = vmaxnmq_f64(v39[1], v108[2 * v40 + 1]);
            ++v101.__begin_[v40];
            v36 -= 4;
          }
          while (v36);
        }
        int v41 = v109;
        if (v108 != v109)
        {
          double v42 = (float64x2_t *)v105;
          float64x2_t v44 = *v108;
          float64x2_t v45 = v108[1];
          long long v43 = v108 + 2;
          *(float64x2_t *)uint64_t v105 = *v108;
          v42[1] = v45;
          if (v43 != v41)
          {
            float32x2_t v46 = v42 + 3;
            do
            {
              float64x2_t v47 = *v43;
              float64x2_t v48 = v43[1];
              v43 += 2;
              float64x2_t v44 = vminnmq_f64(v44, v47);
              float64x2_t v45 = vmaxnmq_f64(v45, v48);
              v46[-1] = v44;
              *float32x2_t v46 = v45;
              v46 += 2;
            }
            while (v43 != v41);
          }
        }
        float32x2_t v49 = v108;
        if (v109 != v108)
        {
          int v50 = v103;
          float64x2_t v52 = v109[-2];
          float64x2_t v53 = v109[-1];
          uint64_t v51 = v109 - 2;
          v103[-2] = v52;
          v50[-1] = v53;
          if (v51 != v49)
          {
            float32x2_t v54 = v50 - 4;
            do
            {
              float64x2_t v55 = v51[-2];
              v51 -= 2;
              float64x2_t v52 = vminnmq_f64(v52, v55);
              float64x2_t v53 = vmaxnmq_f64(v53, v51[1]);
              *float32x2_t v54 = v52;
              v54[1] = v53;
              v54 -= 2;
            }
            while (v51 != v49);
          }
        }
        std::vector<int>::pointer begin = v100.__begin_;
        int64_t v57 = (char *)v100.__end_ - (char *)v100.__begin_;
        if (v100.__end_ != v100.__begin_)
        {
          std::vector<int>::pointer v58 = v101.__begin_;
          int v59 = *v101.__begin_;
          *v100.__begin_ = *v101.__begin_;
          if (v57 != 4)
          {
            uint64_t v60 = v57 >> 2;
            uint64_t v61 = v58 + 1;
            float32x2_t v62 = begin + 1;
            uint64_t v63 = 4 * v60 - 4;
            do
            {
              int v64 = *v61++;
              v59 += v64;
              *v62++ = v59;
              v63 -= 4;
            }
            while (v63);
          }
        }
        if (v12)
        {
          uint64_t v65 = 0;
          uint64_t v66 = 32;
          do
          {
            int v67 = v100.__begin_[v65];
            std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::operator()(a2, v67, (uint64_t)v105 + v66 - 32, *(_DWORD *)(a4 + 16) - v67);
            if (v68 < v25)
            {
              float64x2_t v69 = *(float64x2_t *)((char *)v105 + v66 - 16);
              *a5 = *(float64x2_t *)((char *)v105 + v66 - 32);
              a5[1] = v69;
              float64x2_t v70 = *(float64x2_t *)((char *)__p + v66 + 16);
              *a6 = *(float64x2_t *)((char *)__p + v66);
              a6[1] = v70;
              int v95 = v24;
              unsigned int v96 = v67;
              int v94 = v65;
              double v25 = v68;
            }
            ++v65;
            v66 += 32;
          }
          while (v12 != v65);
        }
      }
      char v27 = 0;
      int v24 = 1;
      int64x2_t v26 = v92;
    }
    while ((v93 & 1) != 0);
    uint64_t v71 = a1[4];
    uint64_t v72 = *(unsigned int *)(a4 + 12);
    int v73 = *(_DWORD *)(a4 + 16);
    float64x2_t v111 = a1;
    float64x2_t v112 = v89;
    float64x2_t v113 = v88;
    float64x2_t v114 = v91;
    int v115 = v94;
    int v116 = v95;
    unsigned int v117 = a3;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<double,(unsigned char)2>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)2>>(geom::surface_area_heuristic_functor<double,(unsigned char)2>,unsigned int,geom::bvh_node<double,(unsigned char)2> const&,geom::bbox<double,(unsigned char)2> &,geom::bbox<double,(unsigned char)2> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>((_DWORD *)(v71 + 4 * v72), (_DWORD *)(v71 + 4 * (v73 + v72)), &v111);
    uint64_t v74 = v96;
  }
  if (v100.__begin_)
  {
    v100.__end_ = v100.__begin_;
    operator delete(v100.__begin_);
  }
  if (v101.__begin_)
  {
    v101.__end_ = v101.__begin_;
    operator delete(v101.__begin_);
  }
  if (__p)
  {
    unsigned int v103 = (float64x2_t *)__p;
    operator delete(__p);
  }
  if (v105)
  {
    float64x2_t v106 = v105;
    operator delete(v105);
  }
  if (v108)
  {
    float64x2_t v109 = v108;
    operator delete(v108);
  }
  return v74;
}

uint64_t std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)2> const&,unsigned int,geom::bbox<double,(unsigned char)2> const&)>::operator()(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v7 = a2;
  int v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x236E5C28CLL);
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, int *))(*(void *)v4 + 48))(v4, &v7, a3, &v6);
}

void std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x20uLL);
  *(void *)long long v2 = &unk_26EA07100;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA07100;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return std::__invoke_void_return_wrapper<unsigned int,false>::__call[abi:nn180100]<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1} &,geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1},std::allocator<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1}>,unsigned int ()(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<unsigned int,false>::__call[abi:nn180100]<void geom::bvh<float,(unsigned char)3>::build_from_custom_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<float,(unsigned char)3> &)>,std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&)#1} &,geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3>&,geom::bbox<float,(unsigned char)3>&>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v11[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void **)a1;
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::__value_func[abi:nn180100]((uint64_t)v11, *(void *)(a1 + 8));
  uint64_t v9 = geom::bvh<float,(unsigned char)3>::partition_node_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(v8, (uint64_t)v11, *(_DWORD *)(a1 + 16), a2, a3, a4);
  std::__function::__value_func<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v11);
  return v9;
}

uint64_t geom::bvh<float,(unsigned char)3>::partition_node_heuristic<std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>>(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v141 = *MEMORY[0x263EF8340];
  std::vector<int> v131 = 0;
  uint64_t v132 = 0;
  uint64_t v133 = 0;
  unint64_t v11 = a3;
  std::vector<geom::bbox<float,(unsigned char)3>>::resize((uint64_t)&v131, a3);
  unsigned int v128 = 0;
  uint64_t v129 = 0;
  uint64_t v130 = 0;
  std::vector<geom::bbox<float,(unsigned char)3>>::resize((uint64_t)&v128, v11);
  std::vector<int> __p = 0;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  std::vector<geom::bbox<float,(unsigned char)3>>::resize((uint64_t)&__p, v11);
  memset(&v124, 0, sizeof(v124));
  std::vector<unsigned int>::resize(&v124, v11);
  memset(&v123, 0, sizeof(v123));
  std::vector<int>::size_type v12 = a3 - 1;
  std::vector<unsigned int>::resize(&v123, v12);
  uint64_t v15 = *(unsigned int *)(a4 + 12);
  unsigned int v14 = *(_DWORD *)(a4 + 16);
  uint64_t v16 = v14 + v15;
  uint64_t v17 = (unsigned int *)(a1[4] + 4 * v15);
  if (v14)
  {
    uint64_t v18 = 4 * v16 - 4 * v15;
    float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v20.i64[0] = 0x7F0000007FLL;
    v20.i32[2] = 127;
    unsigned int v21 = (unsigned int *)(a1[4] + 4 * v15);
    do
    {
      unsigned int v22 = *v21++;
      float32x4_t v13 = *(float32x4_t *)(a1[7] + 16 * v22);
      v19.i32[3] = 0;
      v13.i32[3] = 0;
      float32x4_t v19 = vminnmq_f32(v19, v13);
      v20.i32[3] = 0;
      float32x4_t v20 = vmaxnmq_f32(v20, v13);
      v18 -= 4;
    }
    while (v18);
  }
  else
  {
    float32x4_t v19 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v20.i64[0] = 0x7F0000007FLL;
    v20.i64[1] = 0x7F0000007FLL;
  }
  v13.f32[0] = (float)a3;
  float32x4_t v116 = vsubq_f32(v20, v19);
  float32x4_t v23 = vdivq_f32(v116, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0));
  float32x4_t v24 = vmulq_f32(v23, v23);
  if (sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]) <= 0.00001)
  {
    uint64_t v88 = v15 + (v14 >> 1);
    float32x4_t v89 = (float32x4_t)vdupq_n_s32(0x7F800000u);
    v90.i64[0] = 0x7F0000007FLL;
    v90.i32[2] = 127;
    float32x4_t v91 = v89;
    v92.i64[0] = 0x7F0000007FLL;
    v92.i32[2] = 127;
    if (v14 >= 2)
    {
      uint64_t v93 = 4 * v88 - 4 * v15;
      int32x4_t v94 = vdupq_n_s32(0x7F800000u);
      v95.i64[0] = 0x7F0000007FLL;
      v95.i64[1] = 0x7F0000007FLL;
      do
      {
        unsigned int v96 = *v17++;
        unsigned int v97 = (float32x4_t *)(a1[10] + 32 * v96);
        float32x4_t v98 = (float32x4_t)v94;
        v98.i32[3] = 0;
        float32x4_t v99 = *v97;
        float32x4_t v100 = v97[1];
        v99.i32[3] = 0;
        float32x4_t v91 = vminnmq_f32(v98, v99);
        float32x4_t v101 = v95;
        v101.i32[3] = 0;
        v100.i32[3] = 0;
        v91.i32[3] = v94.i32[3];
        float32x4_t v92 = vmaxnmq_f32(v101, v100);
        v92.i32[3] = v95.i32[3];
        float32x4_t v95 = v92;
        int32x4_t v94 = (int32x4_t)v91;
        v93 -= 4;
      }
      while (v93);
    }
    *(_DWORD *)(a5 + 8) = v91.i32[2];
    *(void *)a5 = v91.i64[0];
    *(_DWORD *)(a5 + 24) = v92.i32[2];
    *(void *)(a5 + 16) = v92.i64[0];
    if (v14 != v14 >> 1)
    {
      uint64_t v102 = (unsigned int *)(a1[4] + 4 * v88);
      uint64_t v103 = 4 * v16 - 4 * v88;
      int32x4_t v104 = vdupq_n_s32(0x7F800000u);
      v105.i64[0] = 0x7F0000007FLL;
      v105.i64[1] = 0x7F0000007FLL;
      do
      {
        unsigned int v106 = *v102++;
        uint64_t v107 = (float32x4_t *)(a1[10] + 32 * v106);
        float32x4_t v108 = (float32x4_t)v104;
        v108.i32[3] = 0;
        float32x4_t v109 = *v107;
        float32x4_t v110 = v107[1];
        v109.i32[3] = 0;
        float32x4_t v89 = vminnmq_f32(v108, v109);
        float32x4_t v111 = v105;
        v111.i32[3] = 0;
        v110.i32[3] = 0;
        v89.i32[3] = v104.i32[3];
        float32x4_t v90 = vmaxnmq_f32(v111, v110);
        v90.i32[3] = v105.i32[3];
        float32x4_t v105 = v90;
        int32x4_t v104 = (int32x4_t)v89;
        v103 -= 4;
      }
      while (v103);
    }
    *(void *)a6 = v89.i64[0];
    *(_DWORD *)(a6 + 8) = v89.i32[2];
    *(void *)(a6 + 16) = v90.i64[0];
    *(_DWORD *)(a6 + 24) = v90.i32[2];
    uint64_t v87 = *(_DWORD *)(a4 + 16) >> 1;
  }
  else
  {
    float32x4_t v113 = v20;
    float32x4_t v114 = v19;
    int v25 = 0;
    int v118 = -1;
    unsigned int v119 = 0;
    int v117 = 1;
    float v26 = 3.4028e38;
    int32x4_t v115 = vdupq_n_s32(0x7F800000u);
    v27.i64[0] = 0x7F0000007FLL;
    v27.i64[1] = 0x7F0000007FLL;
    do
    {
      float32x4_t v122 = v116;
      float v28 = *(float *)((unint64_t)&v122 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
      if (fabsf(v28) > 0.00001)
      {
        if ((char *)v124.__end_ - (char *)v124.__begin_ >= 1)
        {
          bzero(v124.__begin_, 4* (((unint64_t)((char *)v124.__end_ - (char *)v124.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v124.__end_ - (char *)v124.__begin_) > (std::vector<int>::pointer)3))+ 4);
          v27.i64[0] = 0x7F0000007FLL;
          v27.i64[1] = 0x7F0000007FLL;
        }
        char v29 = (int32x4_t *)v131;
        if ((char *)v132 - (char *)v131 >= 1)
        {
          unint64_t v30 = ((unint64_t)((char *)v132 - (char *)v131) >> 5) + 1;
          do
          {
            *char v29 = v115;
            v29[1] = v27;
            v29 += 2;
            --v30;
          }
          while (v30 > 1);
        }
        int v31 = *(_DWORD *)(a4 + 16);
        if (v31)
        {
          uint64_t v32 = *(unsigned int *)(a4 + 12);
          uint64_t v33 = (v31 + v32);
          uint64_t v34 = (unsigned int *)(a1[4] + 4 * v32);
          float32x4_t v121 = v114;
          float v35 = *(float *)((unint64_t)&v121 & 0xFFFFFFFFFFFFFFF3 | (4 * (v25 & 3)));
          uint64_t v36 = 4 * v33 - 4 * v32;
          do
          {
            unsigned int v37 = *v34++;
            int v38 = (float32x4_t *)(a1[10] + 32 * v37);
            int v39 = (int)(float)((float)((float)(*(float *)(a1[7] + 16 * v37 + 4 * (v25 & 3)) - v35) / v28) * (float)a3);
            float32x4_t v40 = *v38;
            if (v39 == a3) {
              int v39 = v12;
            }
            uint64_t v41 = 2 * v39;
            float32x4_t v42 = v131[v41];
            v40.i32[3] = 0;
            v42.i32[3] = 0;
            v131[v41] = vminnmq_f32(v40, v42);
            float32x4_t v43 = v38[1];
            v43.i32[3] = 0;
            float32x4_t v44 = v131[v41 + 1];
            v44.i32[3] = 0;
            v131[v41 + 1] = vmaxnmq_f32(v43, v44);
            ++v124.__begin_[v39];
            v36 -= 4;
          }
          while (v36);
        }
        float64x2_t v45 = v132;
        if (v131 != v132)
        {
          float32x2_t v46 = (float32x4_t *)v128;
          float32x4_t v48 = *v131;
          float32x4_t v49 = v131[1];
          float64x2_t v47 = v131 + 2;
          *(float32x4_t *)unsigned int v128 = *v131;
          v46[1] = v49;
          if (v47 != v45)
          {
            int v50 = v46 + 3;
            do
            {
              float32x4_t v51 = v48;
              v51.i32[3] = 0;
              float32x4_t v52 = *v47;
              float32x4_t v53 = v47[1];
              v47 += 2;
              v52.i32[3] = 0;
              float32x4_t v54 = vminnmq_f32(v51, v52);
              float32x4_t v55 = v49;
              v55.i32[3] = 0;
              v53.i32[3] = 0;
              float32x4_t v56 = vmaxnmq_f32(v55, v53);
              v54.i32[3] = v48.i32[3];
              v56.i32[3] = v49.i32[3];
              v50[-1] = v54;
              *int v50 = v56;
              v50 += 2;
              float32x4_t v48 = v54;
              float32x4_t v49 = v56;
            }
            while (v47 != v45);
          }
        }
        int64_t v57 = v131;
        if (v132 != v131)
        {
          std::vector<int>::pointer v58 = v126;
          float32x4_t v60 = v132[-2];
          float32x4_t v61 = v132[-1];
          int v59 = v132 - 2;
          *(v126 - 2) = v60;
          *(v58 - 1) = v61;
          if (v59 != v57)
          {
            float32x2_t v62 = (float32x4_t *)(v58 - 4);
            do
            {
              float32x4_t v63 = v59[-2];
              float32x4_t v64 = v59[-1];
              v59 -= 2;
              float32x4_t v65 = v60;
              v65.i32[3] = 0;
              v63.i32[3] = 0;
              float32x4_t v66 = v61;
              v66.i32[3] = 0;
              v64.i32[3] = 0;
              float32x4_t v67 = vminnmq_f32(v65, v63);
              float32x4_t v68 = vmaxnmq_f32(v66, v64);
              v67.i32[3] = v60.i32[3];
              v68.i32[3] = v61.i32[3];
              *float32x2_t v62 = v67;
              v62[1] = v68;
              v62 -= 2;
              float32x4_t v60 = v67;
              float32x4_t v61 = v68;
            }
            while (v59 != v57);
          }
        }
        std::vector<int>::pointer begin = v123.__begin_;
        int64_t v70 = (char *)v123.__end_ - (char *)v123.__begin_;
        if (v123.__end_ != v123.__begin_)
        {
          std::vector<int>::pointer v71 = v124.__begin_;
          int v72 = *v124.__begin_;
          *v123.__begin_ = *v124.__begin_;
          if (v70 != 4)
          {
            uint64_t v73 = v70 >> 2;
            uint64_t v74 = v71 + 1;
            uint64_t v75 = begin + 1;
            uint64_t v76 = 4 * v73 - 4;
            do
            {
              int v77 = *v74++;
              v72 += v77;
              *v75++ = v72;
              v76 -= 4;
            }
            while (v76);
          }
        }
        if (v12)
        {
          uint64_t v78 = 0;
          uint64_t v79 = 32;
          do
          {
            int v80 = v123.__begin_[v78];
            std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::operator()(a2, v80, (uint64_t)v128 + v79 - 32, *(_DWORD *)(a4 + 16) - v80);
            if (v81 < v26)
            {
              long long v82 = *(_OWORD *)((char *)v128 + v79 - 16);
              *(_OWORD *)a5 = *(_OWORD *)((char *)v128 + v79 - 32);
              *(_OWORD *)(a5 + 16) = v82;
              long long v83 = *(_OWORD *)((char *)__p + v79 + 16);
              *(_OWORD *)a6 = *(_OWORD *)((char *)__p + v79);
              *(_OWORD *)(a6 + 16) = v83;
              int v118 = v25;
              unsigned int v119 = v80;
              int v117 = v78;
              float v26 = v81;
            }
            ++v78;
            v79 += 32;
          }
          while (v12 != v78);
        }
      }
      ++v25;
      v27.i64[0] = 0x7F0000007FLL;
      v27.i64[1] = 0x7F0000007FLL;
    }
    while (v25 != 3);
    uint64_t v84 = a1[4];
    uint64_t v85 = *(unsigned int *)(a4 + 12);
    int v86 = *(_DWORD *)(a4 + 16);
    float64x2_t v134 = a1;
    float32x4_t v135 = v114;
    float32x4_t v136 = v113;
    float32x4_t v137 = v116;
    int v138 = v117;
    int v139 = v118;
    unsigned int v140 = a3;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<float,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<float,(unsigned char)3>>(geom::surface_area_heuristic_functor<float,(unsigned char)3>,unsigned int,geom::bvh_node<float,(unsigned char)3> const&,geom::bbox<float,(unsigned char)3> &,geom::bbox<float,(unsigned char)3> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>((_DWORD *)(v84 + 4 * v85), (_DWORD *)(v84 + 4 * (v86 + v85)), &v134);
    uint64_t v87 = v119;
  }
  if (v123.__begin_)
  {
    v123.__end_ = v123.__begin_;
    operator delete(v123.__begin_);
  }
  if (v124.__begin_)
  {
    v124.__end_ = v124.__begin_;
    operator delete(v124.__begin_);
  }
  if (__p)
  {
    uint64_t v126 = __p;
    operator delete(__p);
  }
  if (v128)
  {
    uint64_t v129 = v128;
    operator delete(v128);
  }
  if (v131)
  {
    uint64_t v132 = v131;
    operator delete(v131);
  }
  return v87;
}

uint64_t std::function<float ()(unsigned int,geom::bbox<float,(unsigned char)3> const&,unsigned int,geom::bbox<float,(unsigned char)3> const&)>::operator()(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v7 = a2;
  int v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4)
  {
    std::__throw_bad_function_call[abi:nn180100]();
    JUMPOUT(0x236E5CB18);
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t, int *))(*(void *)v4 + 48))(v4, &v7, a3, &v6);
}

void std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)>::~__func()
{
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)>::__clone(uint64_t a1)
{
  long long v2 = (char *)operator new(0x20uLL);
  *(void *)long long v2 = &unk_26EA07180;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26EA07180;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)>::operator()(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  return std::__invoke_void_return_wrapper<unsigned int,false>::__call[abi:nn180100]<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1} &,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&>(a1 + 8, a2, a3, a4);
}

uint64_t std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1},std::allocator<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1}>,unsigned int ()(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)>::target_type()
{
}

uint64_t std::__invoke_void_return_wrapper<unsigned int,false>::__call[abi:nn180100]<void geom::bvh<double,(unsigned char)3>::build_from_custom_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(std::function<BOOL ()(geom::bvh_node<double,(unsigned char)3> &)>,std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>,unsigned int)::{lambda(geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)#1} &,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&>(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  v14[4] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void **)a1;
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::__value_func[abi:nn180100]((uint64_t)v14, *(void *)(a1 + 8));
  uint64_t v12 = geom::bvh<double,(unsigned char)3>::partition_node_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(v8, (uint64_t)v14, *(_DWORD *)(a1 + 16), a2, a3, a4, v9, v10, v11);
  std::__function::__value_func<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::~__value_func[abi:nn180100](v14);
  return v12;
}

uint64_t geom::bvh<double,(unsigned char)3>::partition_node_heuristic<std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>>(void *a1, uint64_t a2, unsigned int a3, uint64_t a4, float64x2_t *a5, float64x2_t *a6, double a7, double a8, __n128 a9)
{
  uint64_t v138 = *MEMORY[0x263EF8340];
  float64x2_t v125 = 0;
  uint64_t v126 = 0;
  uint64_t v127 = 0;
  unint64_t v15 = a3;
  std::vector<geom::bbox<double,(unsigned char)3>>::resize((uint64_t)&v125, a3, a7, a8, a9);
  float32x4_t v122 = 0;
  std::vector<int> v123 = 0;
  uint64_t v124 = 0;
  std::vector<geom::bbox<double,(unsigned char)3>>::resize((uint64_t)&v122, v15, v16, v17, v18);
  std::vector<int> __p = 0;
  int64x2_t v120 = 0;
  uint64_t v121 = 0;
  std::vector<geom::bbox<double,(unsigned char)3>>::resize((uint64_t)&__p, v15, v19, v20, v21);
  memset(&v118, 0, sizeof(v118));
  std::vector<unsigned int>::resize(&v118, v15);
  memset(&v117, 0, sizeof(v117));
  std::vector<int>::size_type v22 = a3 - 1;
  std::vector<unsigned int>::resize(&v117, v22);
  uint64_t v27 = *(unsigned int *)(a4 + 12);
  unsigned int v26 = *(_DWORD *)(a4 + 16);
  uint64_t v113 = a4;
  uint64_t v28 = v26 + v27;
  char v29 = (unsigned int *)(a1[4] + 4 * v27);
  if (v26)
  {
    v24.f64[0] = INFINITY;
    v23.f64[0] = -INFINITY;
    uint64_t v30 = 4 * v28 - 4 * v27;
    float64x2_t v31 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v32 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    uint64_t v33 = (unsigned int *)(a1[4] + 4 * v27);
    do
    {
      unsigned int v34 = *v33++;
      uint64_t v35 = a1[7] + 32 * v34;
      long long v36 = *(_OWORD *)(v35 + 16);
      float64x2_t v31 = vminnmq_f64(v31, *(float64x2_t *)v35);
      float64x2_t v24 = vminnmq_f64((float64x2_t)*(unint64_t *)&v24.f64[0], (float64x2_t)(unint64_t)v36);
      float64x2_t v32 = vmaxnmq_f64(v32, *(float64x2_t *)v35);
      float64x2_t v23 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v23.f64[0], (float64x2_t)(unint64_t)v36);
      v30 -= 4;
    }
    while (v30);
  }
  else
  {
    v23.f64[0] = -INFINITY;
    v24.f64[0] = INFINITY;
    float64x2_t v32 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    float64x2_t v31 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  }
  float64x2_t v37 = vsubq_f64(v32, v31);
  v25.f64[0] = (double)a3;
  float64x2_t v38 = vdivq_f64(v37, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a3), 0));
  float64x2_t v109 = vsubq_f64(v23, v24);
  float64x2_t v39 = vdivq_f64(v109, v25);
  if (sqrt(vmulq_f64(v39, v39).f64[0] + vaddvq_f64(vmulq_f64(v38, v38))) <= 0.000001)
  {
    uint64_t v87 = v27 + (v26 >> 1);
    float64x2_t v88 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v89 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
    if (v26 >= 2)
    {
      v23.f64[0] = INFINITY;
      v24.f64[0] = -INFINITY;
      uint64_t v92 = 4 * v87 - 4 * v27;
      float64x2_t v91 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      float64x2_t v90 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      do
      {
        unsigned int v93 = *v29++;
        unint64_t v94 = a1[10] + ((unint64_t)v93 << 6);
        float64x2_t v91 = vminnmq_f64(v91, *(float64x2_t *)v94);
        float64x2_t v23 = vminnmq_f64((float64x2_t)*(unint64_t *)&v23.f64[0], (float64x2_t)*(unint64_t *)(v94 + 16));
        float64x2_t v90 = vmaxnmq_f64(v90, *(float64x2_t *)(v94 + 32));
        float64x2_t v24 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v24.f64[0], (float64x2_t)*(unint64_t *)(v94 + 48));
        v92 -= 4;
      }
      while (v92);
    }
    else
    {
      v23.f64[0] = INFINITY;
      v24.f64[0] = -INFINITY;
      float64x2_t v90 = v89;
      float64x2_t v91 = v88;
    }
    *a5 = v91;
    a5[1] = v23;
    a5[2] = v90;
    a5[3] = v24;
    if (v26 == v26 >> 1)
    {
      v23.f64[0] = INFINITY;
      v24.f64[0] = -INFINITY;
    }
    else
    {
      float32x4_t v95 = (unsigned int *)(a1[4] + 4 * v87);
      float64x2_t v88 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
      v23.f64[0] = INFINITY;
      float64x2_t v89 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
      v24.f64[0] = -INFINITY;
      uint64_t v96 = 4 * v28 - 4 * v87;
      do
      {
        unsigned int v97 = *v95++;
        unint64_t v98 = a1[10] + ((unint64_t)v97 << 6);
        float64x2_t v88 = vminnmq_f64(v88, *(float64x2_t *)v98);
        float64x2_t v23 = vminnmq_f64((float64x2_t)*(unint64_t *)&v23.f64[0], (float64x2_t)*(unint64_t *)(v98 + 16));
        float64x2_t v89 = vmaxnmq_f64(v89, *(float64x2_t *)(v98 + 32));
        float64x2_t v24 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v24.f64[0], (float64x2_t)*(unint64_t *)(v98 + 48));
        v96 -= 4;
      }
      while (v96);
    }
    *a6 = v88;
    a6[1] = v23;
    a6[2] = v89;
    a6[3] = v24;
    uint64_t v86 = *(_DWORD *)(a4 + 16) >> 1;
  }
  else
  {
    float64x2_t v102 = v32;
    float64x2_t v103 = v23;
    int v40 = 0;
    int v111 = -1;
    unsigned int v112 = 0;
    int v110 = 1;
    double v41 = 1.79769313e308;
    float64x2_t v100 = v37;
    float64x2_t v101 = v31;
    *(void *)&v37.f64[1] = vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
    float64x2_t v108 = v37;
    int64x2_t v107 = vdupq_n_s64(0x7FF0000000000000uLL);
    float64x2_t v105 = v24;
    int64x2_t v106 = vdupq_n_s64(0xFFF0000000000000);
    *(void *)&v31.f64[1] = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL).u64[0];
    float64x2_t v104 = v31;
    do
    {
      *((void *)&v42 + 1) = *(void *)&v108.f64[1];
      v116[0] = v108;
      v116[1] = v109;
      double v43 = *((double *)v116 + (v40 & 3));
      if (fabs(v43) > 0.000001)
      {
        std::vector<int>::pointer begin = v118.__begin_;
        if ((char *)v118.__end_ - (char *)v118.__begin_ >= 1) {
          bzero(v118.__begin_, 4* (((unint64_t)((char *)v118.__end_ - (char *)v118.__begin_) >> 2)- ((std::vector<int>::pointer)((char *)v118.__end_ - (char *)v118.__begin_) > (std::vector<int>::pointer)3))+ 4);
        }
        float64x2_t v45 = (float64x2_t *)v125;
        float32x2_t v46 = v126;
        if ((char *)v126 - (unsigned char *)v125 >= 1)
        {
          unint64_t v47 = ((unint64_t)((char *)v126 - (unsigned char *)v125) >> 6) + 1;
          float32x4_t v48 = v125;
          do
          {
            *(void *)&long long v42 = 0x7FF0000000000000;
            *float32x4_t v48 = v107;
            v48[1] = v42;
            *(void *)&long long v42 = 0xFFF0000000000000;
            _OWORD v48[2] = v106;
            v48[3] = v42;
            --v47;
            v48 += 4;
          }
          while (v47 > 1);
        }
        int v49 = *(_DWORD *)(v113 + 16);
        if (v49)
        {
          uint64_t v50 = *(unsigned int *)(v113 + 12);
          uint64_t v51 = (v49 + v50);
          float32x4_t v52 = (unsigned int *)(a1[4] + 4 * v50);
          v115[0] = v104;
          v115[1] = v105;
          double v53 = *((double *)v115 + (v40 & 3));
          uint64_t v54 = 4 * v51 - 4 * v50;
          do
          {
            unsigned int v55 = *v52++;
            uint64_t v56 = a1[10];
            int64_t v57 = (_OWORD *)(a1[7] + 32 * v55);
            long long v58 = v57[1];
            v114[0] = *v57;
            v114[1] = v58;
            uint64_t v59 = v56 + ((unint64_t)v55 << 6);
            int v60 = (int)((*((double *)v114 + (v40 & 3)) - v53) / v43 * (double)a3);
            if (v60 == a3) {
              int v60 = v22;
            }
            float32x4_t v61 = &v45[4 * (uint64_t)v60];
            float64x2_t v62 = vminnmq_f64((float64x2_t)*(unint64_t *)(v59 + 16), (float64x2_t)*(unint64_t *)&v61[1].f64[0]);
            *float32x4_t v61 = vminnmq_f64(*(float64x2_t *)v59, *v61);
            v61[1] = v62;
            float64x2_t v63 = vmaxnmq_f64((float64x2_t)*(unint64_t *)(v59 + 48), (float64x2_t)*(unint64_t *)&v61[3].f64[0]);
            v61[2] = vmaxnmq_f64(*(float64x2_t *)(v59 + 32), v61[2]);
            v61[3] = v63;
            ++begin[v60];
            v54 -= 4;
          }
          while (v54);
        }
        std::inclusive_scan[abi:nn180100]<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>,std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>,unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)::{lambda(geom::bbox<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> const&)#1}>(v45, v46, (float64x2_t *)v122);
        std::inclusive_scan[abi:nn180100]<std::reverse_iterator<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>>,std::reverse_iterator<std::__wrap_iter<geom::bbox<double,(unsigned char)3> *>>,unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3>&,geom::bbox<double,(unsigned char)3>&)::{lambda(geom::bbox<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> const&)#1}>((uint64_t)v126, v126, (uint64_t)v125, (float64x2_t *)v125, (uint64_t)v120, (uint64_t)v120);
        std::vector<int>::pointer v64 = v117.__begin_;
        int64_t v65 = (char *)v117.__end_ - (char *)v117.__begin_;
        if (v117.__end_ != v117.__begin_)
        {
          std::vector<int>::pointer v66 = v118.__begin_;
          int v67 = *v118.__begin_;
          *v117.__begin_ = *v118.__begin_;
          if (v65 != 4)
          {
            uint64_t v68 = v65 >> 2;
            float64x2_t v69 = v66 + 1;
            int64_t v70 = v64 + 1;
            uint64_t v71 = 4 * v68 - 4;
            do
            {
              int v72 = *v69++;
              v67 += v72;
              *v70++ = v67;
              v71 -= 4;
            }
            while (v71);
          }
        }
        if (v22)
        {
          uint64_t v73 = 0;
          uint64_t v74 = 64;
          do
          {
            int v75 = v117.__begin_[v73];
            std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::operator()(a2, v75, (uint64_t)v122 + v74 - 64, *(_DWORD *)(v113 + 16) - v75);
            if (v76 < v41)
            {
              float64x2_t v77 = *(float64x2_t *)((char *)v122 + v74 - 16);
              float64x2_t v79 = *(float64x2_t *)((char *)v122 + v74 - 64);
              float64x2_t v78 = *(float64x2_t *)((char *)v122 + v74 - 48);
              a5[2] = *(float64x2_t *)((char *)v122 + v74 - 32);
              a5[3] = v77;
              *a5 = v79;
              a5[1] = v78;
              float64x2_t v80 = *(float64x2_t *)((char *)__p + v74 + 48);
              float64x2_t v82 = *(float64x2_t *)((char *)__p + v74);
              float64x2_t v81 = *(float64x2_t *)((char *)__p + v74 + 16);
              a6[2] = *(float64x2_t *)((char *)__p + v74 + 32);
              a6[3] = v80;
              *a6 = v82;
              a6[1] = v81;
              int v111 = v40;
              unsigned int v112 = v75;
              int v110 = v73;
              double v41 = v76;
            }
            ++v73;
            v74 += 64;
          }
          while (v22 != v73);
        }
      }
      ++v40;
    }
    while (v40 != 3);
    uint64_t v83 = a1[4];
    uint64_t v84 = *(unsigned int *)(v113 + 12);
    int v85 = *(_DWORD *)(v113 + 16);
    unsigned int v128 = a1;
    float64x2_t v129 = v101;
    float64x2_t v130 = v105;
    float64x2_t v131 = v102;
    float64x2_t v132 = v103;
    float64x2_t v133 = v100;
    float64x2_t v134 = v109;
    int v135 = v110;
    int v136 = v111;
    unsigned int v137 = a3;
    std::__partition_impl[abi:nn180100]<unsigned int geom::bvh<double,(unsigned char)3>::partition_node_heuristic<geom::surface_area_heuristic_functor<double,(unsigned char)3>>(geom::surface_area_heuristic_functor<double,(unsigned char)3>,unsigned int,geom::bvh_node<double,(unsigned char)3> const&,geom::bbox<double,(unsigned char)3> &,geom::bbox<double,(unsigned char)3> &)::{lambda#1} &,std::_ClassicAlgPolicy,unsigned int *,unsigned int *>((_DWORD *)(v83 + 4 * v84), (_DWORD *)(v83 + 4 * (v85 + v84)), (uint64_t)&v128);
    uint64_t v86 = v112;
  }
  if (v117.__begin_)
  {
    v117.__end_ = v117.__begin_;
    operator delete(v117.__begin_);
  }
  if (v118.__begin_)
  {
    v118.__end_ = v118.__begin_;
    operator delete(v118.__begin_);
  }
  if (__p)
  {
    int64x2_t v120 = __p;
    operator delete(__p);
  }
  if (v122)
  {
    std::vector<int> v123 = v122;
    operator delete(v122);
  }
  if (v125)
  {
    uint64_t v126 = (float64x2_t *)v125;
    operator delete(v125);
  }
  return v86;
}

uint64_t std::function<double ()(unsigned int,geom::bbox<double,(unsigned char)3> const&,unsigned int,geom::bbox<double,(unsigned char)3> const&)>::operator()(uint64_t a1, int a2, uint64_t a3, int a4)
{
  int v8 = a2;
  int v7 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (v4) {
    return (*(uint64_t (**)(uint64_t, int *, uint64_t, int *))(*(void *)v4 + 48))(v4, &v8, a3, &v7);
  }
  int v6 = std::__throw_bad_function_call[abi:nn180100]();
  return geom_create_refine_triangle_mesh_opt_3f(v6);
}

double geom_create_refine_triangle_mesh_opt_3f()
{
  uint64_t v0 = geom_refine_triangle_mesh_opt_3f_obj_alloc();
  double result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  return result;
}

double geom_create_refine_triangle_mesh_opt_3d()
{
  uint64_t v0 = geom_refine_triangle_mesh_opt_3d_obj_alloc();
  double result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 48) = 0u;
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_OWORD *)(v0 + 96) = 0u;
  *(_OWORD *)(v0 + 112) = 0u;
  *(void *)(v0 + 128) = 0;
  return result;
}

void geom_refine_triangle_mesh_opt_set_refinement_face_subset_3f(uint64_t a1, std::vector<int>::size_type a2, const void *a3)
{
  int v5 = (void **)(a1 + 88);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 88), a2);
  if (a2)
  {
    int v6 = *v5;
    memmove(v6, a3, 4 * a2);
  }
}

void geom_refine_triangle_mesh_opt_set_refinement_face_subset_3d(uint64_t a1, std::vector<int>::size_type a2, const void *a3)
{
  int v5 = (void **)(a1 + 88);
  std::vector<unsigned int>::resize((std::vector<int> *)(a1 + 88), a2);
  if (a2)
  {
    int v6 = *v5;
    memmove(v6, a3, 4 * a2);
  }
}

uint64_t geom_refine_triangle_mesh_opt_get_refinement_face_subset_count_3f(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 2;
}

uint64_t geom_refine_triangle_mesh_opt_get_refinement_face_subset_count_3d(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 96) - *(void *)(a1 + 88)) >> 2;
}

uint64_t geom_refine_triangle_mesh_opt_get_refinement_face_subset_data_3f(uint64_t a1)
{
  if (*(void *)(a1 + 96) == *(void *)(a1 + 88)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 88);
  }
}

uint64_t geom_refine_triangle_mesh_opt_get_refinement_face_subset_data_3d(uint64_t a1)
{
  if (*(void *)(a1 + 96) == *(void *)(a1 + 88)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 88);
  }
}

uint64_t geom_refine_triangle_mesh_opt_clear_refinement_face_subset_3f(uint64_t result)
{
  *(void *)(result + 96) = *(void *)(result + 88);
  return result;
}

uint64_t geom_refine_triangle_mesh_opt_clear_refinement_face_subset_3d(uint64_t result)
{
  *(void *)(result + 96) = *(void *)(result + 88);
  return result;
}

void geom_refine_triangle_mesh_opt_set_uvs_3f(uint64_t a1, unint64_t a2, const void *a3, std::vector<int>::size_type a4, const void *a5, int *a6, int *a7)
{
}

void geom::refine_triangle_mesh_options<float>::set_uvs(std::vector<int> *a1, unint64_t a2, const void *a3, std::vector<int>::size_type a4, const void *a5, int *a6, int *a7)
{
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)a1, a2);
  if (a2) {
    memmove(a1->__begin_, a3, 8 * a2);
  }
  std::vector<unsigned int>::resize(a1 + 1, a4);
  if (a4)
  {
    uint64_t v14 = 0;
    std::vector<int>::pointer begin = a1[1].__begin_;
    do
    {
      begin[v14] = v14;
      ++v14;
    }
    while (a4 != v14);
  }
  std::vector<int>::size_type v16 = 3 * a4;
  std::vector<unsigned int>::resize(a1 + 2, v16);
  if (4 * v16) {
    memmove(a1[2].__begin_, a5, 4 * v16);
  }
  a1[4].__begin_ = a6;
  a1[4].__end_ = 0;
  a1[4].__end_cap_.__value_ = a7;
}

void geom_refine_triangle_mesh_opt_set_uvs_3d(uint64_t a1, unint64_t a2, const void *a3, std::vector<int>::size_type a4, const void *a5, int *a6, int *a7)
{
}

void geom_refine_triangle_mesh_opt_set_uvs_for_face_subset_3f(uint64_t a1, unint64_t a2, const void *a3, std::vector<int>::size_type a4, const void *a5, const void *a6, int *a7, int *a8, int *a9)
{
}

void geom::refine_triangle_mesh_options<float>::set_uvs_for_face_subset(std::vector<int> *a1, unint64_t a2, const void *a3, std::vector<int>::size_type a4, const void *a5, const void *a6, int *a7, int *a8, int *a9)
{
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)a1, a2);
  if (a2) {
    memmove(a1->__begin_, a3, 8 * a2);
  }
  std::vector<unsigned int>::resize(a1 + 1, a4);
  if (a4) {
    memmove(a1[1].__begin_, a5, 4 * a4);
  }
  std::vector<int>::size_type v17 = 3 * a4;
  std::vector<unsigned int>::resize(a1 + 2, v17);
  if (4 * v17) {
    memmove(a1[2].__begin_, a6, 4 * v17);
  }
  a1[4].__begin_ = a7;
  a1[4].__end_ = a8;
  a1[4].__end_cap_.__value_ = a9;
}

void geom_refine_triangle_mesh_opt_set_uvs_for_face_subset_3d(uint64_t a1, unint64_t a2, const void *a3, std::vector<int>::size_type a4, const void *a5, const void *a6, int *a7, int *a8, int *a9)
{
}

void *geom_refine_triangle_mesh_opt_clear_uvs_3f(void *result)
{
  result[3] = result[2];
  result[6] = result[5];
  result[9] = result[8];
  result[15] = 0;
  result[16] = 0;
  result[14] = 0;
  return result;
}

void *geom_refine_triangle_mesh_opt_clear_uvs_3d(void *result)
{
  result[3] = result[2];
  result[6] = result[5];
  result[9] = result[8];
  result[15] = 0;
  result[16] = 0;
  result[14] = 0;
  return result;
}

uint64_t geom_refine_triangle_mesh_opt_get_uv_value_count_3f(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
}

uint64_t geom_refine_triangle_mesh_opt_get_uv_value_count_3d(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 3;
}

uint64_t geom_refine_triangle_mesh_opt_get_uv_value_data_3f(uint64_t a1)
{
  if (*(void *)(a1 + 24) == *(void *)(a1 + 16)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 16);
  }
}

uint64_t geom_refine_triangle_mesh_opt_get_uv_value_data_3d(uint64_t a1)
{
  if (*(void *)(a1 + 24) == *(void *)(a1 + 16)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 16);
  }
}

uint64_t geom_refine_triangle_mesh_opt_get_triangles_with_uvs_count_3f(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2;
}

uint64_t geom_refine_triangle_mesh_opt_get_triangles_with_uvs_count_3d(uint64_t a1)
{
  return (uint64_t)(*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2;
}

uint64_t geom_refine_triangle_mesh_opt_get_triangles_with_uvs_data_3f(uint64_t a1)
{
  if (*(void *)(a1 + 48) == *(void *)(a1 + 40)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 40);
  }
}

uint64_t geom_refine_triangle_mesh_opt_get_triangles_with_uvs_data_3d(uint64_t a1)
{
  if (*(void *)(a1 + 48) == *(void *)(a1 + 40)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 40);
  }
}

uint64_t geom_refine_triangle_mesh_opt_get_triangle_uv_indices_data_3f(uint64_t a1)
{
  if (*(void *)(a1 + 72) == *(void *)(a1 + 64)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 64);
  }
}

uint64_t geom_refine_triangle_mesh_opt_get_triangle_uv_indices_data_3d(uint64_t a1)
{
  if (*(void *)(a1 + 72) == *(void *)(a1 + 64)) {
    return 0;
  }
  else {
    return *(void *)(a1 + 64);
  }
}

uint64_t geom_refine_triangle_mesh_opt_get_output_uv_value_collection_3f(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t geom_refine_triangle_mesh_opt_get_output_uv_value_collection_3d(uint64_t a1)
{
  return *(void *)(a1 + 112);
}

uint64_t geom_refine_triangle_mesh_opt_get_output_triangles_with_uvs_collection_3f(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t geom_refine_triangle_mesh_opt_get_output_triangles_with_uvs_collection_3d(uint64_t a1)
{
  return *(void *)(a1 + 120);
}

uint64_t geom_refine_triangle_mesh_opt_get_output_triangle_uv_indices_collection_3f(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

uint64_t geom_refine_triangle_mesh_opt_get_output_triangle_uv_indices_collection_3d(uint64_t a1)
{
  return *(void *)(a1 + 128);
}

void geom_refine_triangle_mesh_with_default_options_3f(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)std::vector<int>::size_type v16 = 0u;
  *(_OWORD *)std::vector<int> __p = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)float32x4_t v13 = 0u;
  __n128 v11 = (char **)geom::collection_to_vector<float>(a5);
  uint64_t v12 = (void *)geom::collection_to_vector<float>(a6);
  geom::refine_triangle_mesh<float>(a1, a2, a3, a4, v11, v12, (uint64_t *)v13);
  if (__p[1])
  {
    *(void **)&long long v18 = __p[1];
    operator delete(__p[1]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v14[1])
  {
    *(void **)&long long v15 = v14[1];
    operator delete(v14[1]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_236E5D8BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t geom::refine_triangle_mesh_options<float>::~refine_triangle_mesh_options(uint64_t a1)
{
  long long v2 = *(void **)(a1 + 72);
  if (v2)
  {
    *(void *)(a1 + 80) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(void **)(a1 + 48);
  if (v3)
  {
    *(void *)(a1 + 56) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(void **)(a1 + 24);
  if (v4)
  {
    *(void *)(a1 + 32) = v4;
    operator delete(v4);
  }
  int v5 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v5;
    operator delete(v5);
  }
  return a1;
}

void geom_refine_triangle_mesh_with_default_options_3d(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v20 = 0;
  long long v18 = 0u;
  long long v19 = 0u;
  *(_OWORD *)std::vector<int>::size_type v16 = 0u;
  *(_OWORD *)std::vector<int> __p = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  long long v15 = 0u;
  *(_OWORD *)float32x4_t v13 = 0u;
  __n128 v11 = (char **)geom::collection_to_vector<float>(a5);
  uint64_t v12 = (void *)geom::collection_to_vector<float>(a6);
  geom::refine_triangle_mesh<double>(a1, a2, a3, a4, v11, v12, (uint64_t *)v13);
  if (__p[1])
  {
    *(void **)&long long v18 = __p[1];
    operator delete(__p[1]);
  }
  if (v16[0])
  {
    v16[1] = v16[0];
    operator delete(v16[0]);
  }
  if (v14[1])
  {
    *(void **)&long long v15 = v14[1];
    operator delete(v14[1]);
  }
  if (v13[0])
  {
    v13[1] = v13[0];
    operator delete(v13[0]);
  }
}

void sub_236E5DA08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void geom_refine_triangle_mesh_with_options_3f(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float32x4_t v13 = (char **)geom::collection_to_vector<float>(a5);
  uint64_t v14 = (void *)geom::collection_to_vector<float>(a6);
  geom::refine_triangle_mesh<float>(a1, a2, a3, a4, v13, v14, (uint64_t *)(a7 + 16));
}

void geom_refine_triangle_mesh_with_options_3d(uint64_t a1, uint64_t a2, unint64_t a3, unsigned int *a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  float32x4_t v13 = (char **)geom::collection_to_vector<float>(a5);
  uint64_t v14 = (void *)geom::collection_to_vector<float>(a6);
  geom::refine_triangle_mesh<double>(a1, a2, a3, a4, v13, v14, (uint64_t *)(a7 + 16));
}

void geom_quadratic_bezier_elevate_from_linear_2d()
{
  __asm { FMOV            V3.2D, #0.5 }
}

float32x2_t geom_quadratic_bezier_from_derivative_of_cubic_bezier_2f(float32x2_t a1, float32x2_t a2)
{
  __asm { FMOV            V4.2S, #3.0 }
  return vmul_f32(vsub_f32(a2, a1), _D4);
}

double geom_quadratic_bezier_from_derivative_of_cubic_bezier_2d(float64x2_t a1, float64x2_t a2)
{
  __asm { FMOV            V4.2D, #3.0 }
  *(void *)&double result = *(_OWORD *)&vmulq_f64(vsubq_f64(a2, a1), _Q4);
  return result;
}

float32x2_t geom_quadratic_bezier_subdivide_2f(uint64_t a1, uint64_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, float a6)
{
  *(double *)a1 = *(double *)&a3;
  *(double *)(a2 + 16) = *(double *)&a5;
  *(float32x2_t *)(a1 + 8) = vmla_n_f32(a3, vsub_f32(a4, a3), a6);
  float32x2_t v6 = vmla_n_f32(a4, vsub_f32(a5, a4), a6);
  *(float32x2_t *)(a2 + 8) = v6;
  float32x2_t result = vmla_n_f32(*(float32x2_t *)(a1 + 8), vsub_f32(v6, *(float32x2_t *)(a1 + 8)), a6);
  *(float32x2_t *)(a1 + 16) = result;
  *(float32x2_t *)a2 = result;
  return result;
}

float64x2_t geom_quadratic_bezier_subdivide_2d(float64x2_t *a1, float64x2_t *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, double a6)
{
  *a1 = a3;
  a2[2] = a5;
  a1[1] = vmlaq_n_f64(a3, vsubq_f64(a4, a3), a6);
  float64x2_t v6 = vmlaq_n_f64(a4, vsubq_f64(a5, a4), a6);
  a2[1] = v6;
  float64x2_t result = vmlaq_n_f64(a1[1], vsubq_f64(v6, a1[1]), a6);
  a1[2] = result;
  *a2 = result;
  return result;
}

float32x2_t geom_quadratic_bezier_extract_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float a4)
{
  float32x2_t v4 = vmla_n_f32(a1, vsub_f32(a2, a1), a4);
  return vmla_n_f32(v4, vsub_f32(vmla_n_f32(a2, vsub_f32(a3, a2), a4), v4), a4);
}

double geom_quadratic_bezier_extract_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, double a4)
{
  float64x2_t v4 = vmlaq_n_f64(a1, vsubq_f64(a2, a1), a4);
  *(void *)&double result = *(_OWORD *)&vmlaq_n_f64(v4, vsubq_f64(vmlaq_n_f64(a2, vsubq_f64(a3, a2), a4), v4), a4);
  return result;
}

float32x2_t geom_quadratic_bezier_demote_to_linear_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  return vmla_f32(vmla_f32(vmul_f32(a2, (float32x2_t)vdup_n_s32(0x3EAAAAABu)), (float32x2_t)vdup_n_s32(0x3F555555u), a1), (float32x2_t)vdup_n_s32(0xBE2AAAAB), a3);
}

double geom_quadratic_bezier_demote_to_linear_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3)
{
  *(void *)&double result = *(_OWORD *)&vmlaq_f64(vmlaq_f64(vmulq_f64(a2, (float64x2_t)vdupq_n_s64(0x3FD5555555555555uLL)), (float64x2_t)vdupq_n_s64(0x3FEAAAAAAAAAAAABuLL), a1), (float64x2_t)vdupq_n_s64(0xBFC5555555555555), a3);
  return result;
}

float32x2_t geom_quadratic_bezier_convert_to_power_basis_2f(uint64_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  float32x2_t v4 = vsub_f32(a3, a2);
  *(double *)a1 = *(double *)&a2;
  *(float32x2_t *)(a1 + 8) = vadd_f32(v4, v4);
  float32x2_t result = vmla_f32(vadd_f32(a2, a4), (float32x2_t)0xC0000000C0000000, a3);
  *(float32x2_t *)(a1 + 16) = result;
  return result;
}

float64x2_t geom_quadratic_bezier_convert_to_power_basis_2d(float64x2_t *a1, float64x2_t a2, float64x2_t a3, float64x2_t a4)
{
  float64x2_t v4 = vsubq_f64(a3, a2);
  *a1 = a2;
  a1[1] = vaddq_f64(v4, v4);
  float64x2_t v5 = vaddq_f64(a2, a4);
  __asm { FMOV            V2.2D, #-2.0 }
  float64x2_t result = vmlaq_f64(v5, _Q2, a3);
  a1[2] = result;
  return result;
}

double geom_power_basis_convert_to_quadratic_bezier_2f(uint64_t a1)
{
  return *(double *)a1;
}

__n128 geom_power_basis_convert_to_quadratic_bezier_2d(__n128 *a1)
{
  __n128 result = *a1;
  __asm { FMOV            V4.2D, #0.5 }
  return result;
}

float32x2_t geom_quadratic_bezier_tangent_at_2f(float32x2_t a1, float32x2_t a2, double a3, float a4)
{
  float32x2_t v4 = vmla_n_f32(vmul_n_f32(vsub_f32(*(float32x2_t *)&a3, a2), a4), vsub_f32(a2, a1), 1.0 - a4);
  *(float *)&a3 = sqrtf(vaddv_f32(vmul_f32(v4, v4)));
  float32x2_t result = 0;
  if (*(float *)&a3 > 0.0) {
    return vdiv_f32(v4, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  }
  return result;
}

double geom_quadratic_bezier_tangent_at_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, double a4)
{
  float64x2_t v4 = vmlaq_n_f64(vmulq_n_f64(vsubq_f64(a3, a2), a4), vsubq_f64(a2, a1), 1.0 - a4);
  double v5 = sqrt(vaddvq_f64(vmulq_f64(v4, v4)));
  double result = 0.0;
  if (v5 > 0.0) {
    *(void *)&double result = *(_OWORD *)&vdivq_f64(v4, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v5, 0));
  }
  return result;
}

int32x2_t geom_quadratic_bezier_normal_at_2f(float32x2_t a1, float32x2_t a2, double a3, float a4)
{
  float32x2_t v4 = vmla_n_f32(vmul_n_f32(vsub_f32(*(float32x2_t *)&a3, a2), a4), vsub_f32(a2, a1), 1.0 - a4);
  *(float *)&a3 = sqrtf(vaddv_f32(vmul_f32(v4, v4)));
  int32x2_t v5 = 0;
  if (*(float *)&a3 > 0.0) {
    int32x2_t v5 = (int32x2_t)vdiv_f32(v4, (float32x2_t)vdup_lane_s32(*(int32x2_t *)&a3, 0));
  }
  v4.f32[0] = -*(float *)&v5.i32[1];
  return vzip1_s32((int32x2_t)v4, v5);
}

float64_t geom_quadratic_bezier_normal_at_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, double a4)
{
  float64x2_t v4 = vmlaq_n_f64(vmulq_n_f64(vsubq_f64(a3, a2), a4), vsubq_f64(a2, a1), 1.0 - a4);
  double v5 = sqrt(vaddvq_f64(vmulq_f64(v4, v4)));
  int64x2_t v6 = 0uLL;
  if (v5 > 0.0) {
    int64x2_t v6 = (int64x2_t)vdivq_f64(v4, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v5, 0));
  }
  v4.f64[0] = -*(double *)&v6.i64[1];
  *(void *)&v4.f64[0] = vzip1q_s64((int64x2_t)v4, v6).u64[0];
  return v4.f64[0];
}

float geom_quadratic_bezier_curvature_at_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float a4)
{
  float32x2_t v4 = vsub_f32(a2, a1);
  float32x2_t v5 = vadd_f32(v4, v4);
  float32x2_t v6 = vsub_f32(a3, a2);
  float32x2_t v7 = vadd_f32(v6, v6);
  float32x2_t v8 = vmla_n_f32(vmul_n_f32(v7, a4), v5, 1.0 - a4);
  float32x2_t v9 = vsub_f32(v7, v5);
  return vmlas_n_f32(vmuls_lane_f32(-v9.f32[0], v8, 1), v9.f32[1], v8.f32[0]) / powf(vaddv_f32(vmul_f32(v8, v8)), 1.5);
}

long double geom_quadratic_bezier_curvature_at_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, double a4)
{
  float64x2_t v4 = vsubq_f64(a2, a1);
  float64x2_t v5 = vaddq_f64(v4, v4);
  float64x2_t v6 = vsubq_f64(a3, a2);
  float64x2_t v7 = vaddq_f64(v6, v6);
  float64x2_t v8 = vmlaq_n_f64(vmulq_n_f64(v7, a4), v5, 1.0 - a4);
  float64x2_t v9 = vsubq_f64(v7, v5);
  return vmlad_n_f64(vmuld_lane_f64(-v9.f64[0], v8, 1), v9.f64[1], v8.f64[0]) / pow(vaddvq_f64(vmulq_f64(v8, v8)), 1.5);
}

uint64_t geom_quadratic_bezier_find_roots_at_x_2f(uint64_t a1, double a2, double a3, float a4, float a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  float v5 = *(float *)&a2 - a5;
  float v6 = vsub_f32(*(float32x2_t *)&a3, *(float32x2_t *)&a2).f32[0];
  float v7 = v6 + v6;
  float v8 = a4 + vmlas_n_f32(*(float *)&a2, -2.0, *(float *)&a3);
  if (fabsf(v8) > 0.00001)
  {
    float v9 = (float)(v5 * (float)(v8 * -4.0)) + (float)(v7 * v7);
    if (v9 >= 0.0)
    {
      float v10 = 1.0;
      if (v7 < 0.0) {
        float v10 = -1.0;
      }
      float v11 = (float)(v7 + (float)(v10 * sqrtf(v9))) * -0.5;
      float v12 = v11 / v8;
      float v13 = v5 / v11;
      float v21 = v12;
      float v22 = v13;
      if (v13 < v12)
      {
        float v21 = v13;
        float v22 = v12;
      }
      if (v9 <= 0.0) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = 2;
      }
      goto LABEL_12;
    }
    return 0;
  }
  if (fabsf(v7) <= 0.00001) {
    return 0;
  }
  float v21 = (float)-v5 / v7;
  uint64_t v14 = 1;
LABEL_12:
  unsigned __int8 v15 = 0;
  std::vector<int>::size_type v16 = &v21;
  do
  {
    float v17 = *v16;
    if (*v16 >= 0.0 && v17 <= 1.0)
    {
      uint64_t v19 = v15++;
      *(float *)(a1 + 4 * v19) = v17;
    }
    ++v16;
    --v14;
  }
  while (v14);
  return v15;
}

uint64_t geom_quadratic_bezier_find_roots_at_x_2d(uint64_t a1, float64x2_t a2, float64x2_t a3, double a4, double a5)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  double v5 = a2.f64[0] - a5;
  double v6 = vsubq_f64(a3, a2).f64[0];
  double v7 = v6 + v6;
  double v8 = a4 + vmlad_n_f64(a2.f64[0], -2.0, a3.f64[0]);
  if (fabs(v8) > 0.000001)
  {
    double v9 = v5 * (v8 * -4.0) + v7 * v7;
    if (v9 >= 0.0)
    {
      double v10 = 1.0;
      if (v7 < 0.0) {
        double v10 = -1.0;
      }
      double v11 = (v7 + v10 * sqrt(v9)) * -0.5;
      double v12 = v11 / v8;
      double v13 = v5 / v11;
      double v21 = v12;
      double v22 = v13;
      if (v13 < v12)
      {
        double v21 = v13;
        double v22 = v12;
      }
      if (v9 <= 0.0) {
        uint64_t v14 = 1;
      }
      else {
        uint64_t v14 = 2;
      }
      goto LABEL_12;
    }
    return 0;
  }
  if (fabs(v7) <= 0.000001) {
    return 0;
  }
  double v21 = -v5 / v7;
  uint64_t v14 = 1;
LABEL_12:
  unsigned __int8 v15 = 0;
  std::vector<int>::size_type v16 = &v21;
  do
  {
    double v17 = *v16;
    if (*v16 >= 0.0 && v17 <= 1.0)
    {
      uint64_t v19 = v15++;
      *(double *)(a1 + 8 * v19) = v17;
    }
    ++v16;
    --v14;
  }
  while (v14);
  return v15;
}

uint64_t geom_quadratic_bezier_find_roots_at_y_2f(uint64_t a1, double a2, double _D1, double a4, float a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  *(float *)&a2 = *((float *)&a2 + 1) - a5;
  float v5 = (float)(*((float *)&_D1 + 1) - *((float *)&a2 + 1)) + (float)(*((float *)&_D1 + 1) - *((float *)&a2 + 1));
  _S5 = -2.0;
  __asm { FMLA            S4, S5, V1.S[1] }
  float v12 = *((float *)&a4 + 1) + _S4;
  if (fabsf(*((float *)&a4 + 1) + _S4) > 0.00001)
  {
    float v13 = (float)(*(float *)&a2 * (float)(v12 * -4.0)) + (float)(v5 * v5);
    if (v13 >= 0.0)
    {
      float v14 = 1.0;
      if (v5 < 0.0) {
        float v14 = -1.0;
      }
      float v15 = (float)(v5 + (float)(v14 * sqrtf(v13))) * -0.5;
      float v16 = v15 / v12;
      float v17 = *(float *)&a2 / v15;
      float v25 = v16;
      float v26 = v17;
      if (v17 < v16)
      {
        float v25 = v17;
        float v26 = v16;
      }
      if (v13 <= 0.0) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = 2;
      }
      goto LABEL_12;
    }
    return 0;
  }
  if (fabsf(v5) <= 0.00001) {
    return 0;
  }
  float v25 = (float)-*(float *)&a2 / v5;
  uint64_t v18 = 1;
LABEL_12:
  unsigned __int8 v19 = 0;
  uint64_t v20 = &v25;
  do
  {
    float v21 = *v20;
    if (*v20 >= 0.0 && v21 <= 1.0)
    {
      uint64_t v23 = v19++;
      *(float *)(a1 + 4 * v23) = v21;
    }
    ++v20;
    --v18;
  }
  while (v18);
  return v19;
}

uint64_t geom_quadratic_bezier_find_roots_at_y_2d(uint64_t a1, __n128 a2, __n128 _Q1, __n128 a4, double a5)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  a2.n128_f64[0] = a2.n128_f64[1] - a5;
  double v5 = _Q1.n128_f64[1] - a2.n128_f64[1] + _Q1.n128_f64[1] - a2.n128_f64[1];
  _D5 = -2.0;
  __asm { FMLA            D4, D5, V1.D[1] }
  double v12 = a4.n128_f64[1] + _D4;
  if (fabs(a4.n128_f64[1] + _D4) > 0.000001)
  {
    double v13 = a2.n128_f64[0] * (v12 * -4.0) + v5 * v5;
    if (v13 >= 0.0)
    {
      double v14 = 1.0;
      if (v5 < 0.0) {
        double v14 = -1.0;
      }
      double v15 = (v5 + v14 * sqrt(v13)) * -0.5;
      double v16 = v15 / v12;
      double v17 = a2.n128_f64[0] / v15;
      double v25 = v16;
      double v26 = v17;
      if (v17 < v16)
      {
        double v25 = v17;
        double v26 = v16;
      }
      if (v13 <= 0.0) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = 2;
      }
      goto LABEL_12;
    }
    return 0;
  }
  if (fabs(v5) <= 0.000001) {
    return 0;
  }
  double v25 = -a2.n128_f64[0] / v5;
  uint64_t v18 = 1;
LABEL_12:
  unsigned __int8 v19 = 0;
  uint64_t v20 = &v25;
  do
  {
    double v21 = *v20;
    if (*v20 >= 0.0 && v21 <= 1.0)
    {
      uint64_t v23 = v19++;
      *(double *)(a1 + 8 * v23) = v21;
    }
    ++v20;
    --v18;
  }
  while (v18);
  return v19;
}

float geom_quadratic_bezier_arc_length_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  uint64_t v3 = 0;
  float32x2_t v4 = vsub_f32(a2, a1);
  float32x2_t v5 = vadd_f32(v4, v4);
  float32x2_t v6 = vsub_f32(a3, a2);
  float32x2_t v7 = vsub_f32(vadd_f32(v6, v6), v5);
  do
  {
    float32x2_t v9 = vmla_n_f32(v5, v7, vmlas_n_f32(0.5, 0.5, *(float *)&_D3));
    _S4 = sqrtf(vaddv_f32(vmul_f32(v9, v9)));
    __asm { FMLA            S1, S4, V3.S[1] }
    ++v3;
  }
  while (v3 != 16);
  return _S1 * 0.5;
}

double geom_quadratic_bezier_arc_length_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3)
{
  uint64_t v3 = 0;
  float64x2_t v4 = vsubq_f64(a2, a1);
  float64x2_t v5 = vaddq_f64(v4, v4);
  float64x2_t v6 = vsubq_f64(a3, a2);
  float64x2_t v7 = vsubq_f64(vaddq_f64(v6, v6), v5);
  do
  {
    float64x2_t v9 = vmlaq_n_f64(v5, v7, vmlad_n_f64(0.5, 0.5, *(double *)&_Q3));
    _D4 = sqrt(vaddvq_f64(vmulq_f64(v9, v9)));
    __asm { FMLA            D1, D4, V3.D[1] }
    ++v3;
  }
  while (v3 != 16);
  return _D1 * 0.5;
}

float geom_quadratic_bezier_arc_length_in_range_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float a4, float a5)
{
  uint64_t v5 = 0;
  float v6 = (float)(a4 + a5) * 0.5;
  float v7 = (float)(a5 - a4) * 0.5;
  float32x2_t v8 = vsub_f32(a2, a1);
  float32x2_t v9 = vadd_f32(v8, v8);
  float32x2_t v10 = vsub_f32(a3, a2);
  float32x2_t v11 = vsub_f32(vadd_f32(v10, v10), v9);
  do
  {
    float32x2_t v13 = vmla_n_f32(v9, v11, vmlas_n_f32(v6, v7, *(float *)&_D4));
    _S6 = sqrtf(vaddv_f32(vmul_f32(v13, v13)));
    __asm { FMLA            S1, S6, V4.S[1] }
    ++v5;
  }
  while (v5 != 16);
  return v7 * _S1;
}

double geom_quadratic_bezier_arc_length_in_range_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, double a4, double a5)
{
  uint64_t v5 = 0;
  double v6 = (a4 + a5) * 0.5;
  double v7 = (a5 - a4) * 0.5;
  float64x2_t v8 = vsubq_f64(a2, a1);
  float64x2_t v9 = vaddq_f64(v8, v8);
  float64x2_t v10 = vsubq_f64(a3, a2);
  float64x2_t v11 = vsubq_f64(vaddq_f64(v10, v10), v9);
  do
  {
    float64x2_t v13 = vmlaq_n_f64(v9, v11, vmlad_n_f64(v6, v7, *(double *)&_Q4));
    _D6 = sqrt(vaddvq_f64(vmulq_f64(v13, v13)));
    __asm { FMLA            D1, D6, V4.D[1] }
    ++v5;
  }
  while (v5 != 16);
  return v7 * _D1;
}

void geom_cubic_bezier_elevate_from_linear_2d()
{
  __asm { FMOV            V2.2D, #2.0 }
}

void geom_cubic_bezier_elevate_from_quadratic_bezier_2d()
{
  __asm { FMOV            V3.2D, #2.0 }
}

float32x2_t geom_cubic_bezier_interpolate_points_2f(float32x2_t *a1)
{
  float32x2_t result = *a1;
  float32x2_t v2 = a1[1];
  float32x2_t v3 = a1[2];
  float32x2_t v4 = vsub_f32(v2, *a1);
  int32x2_t v5 = (int32x2_t)vmul_f32(v4, v4);
  float32x2_t v6 = vsub_f32(v3, v2);
  int32x2_t v7 = (int32x2_t)vmul_f32(v6, v6);
  float32x2_t v8 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v5, v7), (float32x2_t)vzip2_s32(v5, v7)));
  *(float32x2_t *)v9.i8 = vadd_f32(v8, (float32x2_t)vdup_lane_s32((int32x2_t)v8, 1));
  if ((vmvn_s8((int8x8_t)vceq_f32(*(float32x2_t *)v9.i8, v8)).u8[0] & 1) != 0
    && vmul_f32(v8, *(float32x2_t *)v9.i8).f32[0] > 0.0)
  {
    float32x2_t v30 = *a1;
    float32x2_t v31 = a1[1];
    uint64_t v10 = 0;
    float32x2_t v28 = a1[2];
    float32x2_t v29 = a1[3];
    float32x2_t v11 = vsub_f32(v29, v3);
    v11.f32[0] = *(float *)v9.i32 + sqrtf(vaddv_f32(vmul_f32(v11, v11)));
    *(float *)&__int32 v12 = v8.f32[0] / v11.f32[0];
    *(float *)&__int32 v13 = *(float *)v9.i32 / v11.f32[0];
    __asm { FMOV            V2.4S, #1.0 }
    int32x4_t v19 = _Q2;
    v19.i32[1] = v12;
    *(float *)&v9.i32[2] = *(float *)&v12 * *(float *)&v12;
    *(float *)&v9.i32[3] = *(float *)&v12 * (float)(*(float *)&v12 * *(float *)&v12);
    int32x4_t v20 = vzip1q_s32(v19, _Q2);
    int32x4_t v21 = vzip2q_s32(v9, _Q2);
    _Q2.i32[1] = v13;
    int32x4_t v22 = vzip1q_s32((int32x4_t)xmmword_236F14120, _Q2);
    v23.i32[0] = 0;
    v23.i32[2] = 0;
    *(float *)&v23.i32[1] = *(float *)&v13 * *(float *)&v13;
    *(float *)&v23.i32[3] = *(float *)&v13 * (float)(*(float *)&v13 * *(float *)&v13);
    float32x4_t v24 = (float32x4_t)vzip1q_s32(v22, v20);
    float32x4_t v25 = (float32x4_t)vzip2q_s32(v22, v20);
    float32x4_t v26 = (float32x4_t)vzip1q_s32(v23, v21);
    v32[0] = xmmword_236F1CB00;
    v32[1] = xmmword_236F1CB10;
    float32x4_t v27 = (float32x4_t)vzip2q_s32(v23, v21);
    v32[2] = xmmword_236F1CB20;
    v32[3] = xmmword_236F1CB30;
    do
    {
      v33.columns[v10] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v24, COERCE_FLOAT(v32[v10])), v25, *(float32x2_t *)&v32[v10], 1), v26, (float32x4_t)v32[v10], 2), v27, (float32x4_t)v32[v10], 3);
      ++v10;
    }
    while (v10 != 4);
    simd_float4x4 v34 = __invert_f4(v33);
    return (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32((float32x4_t)v34.columns[0], v30.f32[0]), (float32x4_t)v34.columns[1], v31.f32[0]), (float32x4_t)v34.columns[2], v28.f32[0]), (float32x4_t)v34.columns[3], v29.f32[0]), (int32x2_t)*(_OWORD *)&vmlaq_lane_f32(vmlaq_lane_f32(vmlaq_lane_f32(vmulq_lane_f32((float32x4_t)v34.columns[0], v30, 1), (float32x4_t)v34.columns[1], v31, 1), (float32x4_t)v34.columns[2], v28,
                                                     1),
                                                   (float32x4_t)v34.columns[3],
                                                   v29,
                                                   1));
  }
  return result;
}

float64_t geom_cubic_bezier_interpolate_points_2d(float64x2_t *a1)
{
  float64x2_t v1 = *a1;
  float64x2_t v2 = a1[1];
  float64x2_t v3 = a1[2];
  float64x2_t v4 = vsubq_f64(v2, *a1);
  int64x2_t v5 = (int64x2_t)vmulq_f64(v4, v4);
  float64x2_t v6 = vsubq_f64(v3, v2);
  int64x2_t v7 = (int64x2_t)vmulq_f64(v6, v6);
  int64x2_t v8 = (int64x2_t)vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v5, v7), (float64x2_t)vzip2q_s64(v5, v7)));
  float64x2_t v9 = vaddq_f64((float64x2_t)v8, (float64x2_t)vdupq_laneq_s64(v8, 1));
  if ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vceqq_f64(v9, (float64x2_t)v8))).u8[0] & 1) != 0
    && vmulq_f64((float64x2_t)v8, v9).f64[0] > 0.0)
  {
    float64x2_t v29 = *a1;
    float64x2_t v30 = a1[1];
    uint64_t v10 = 0;
    float64x2_t v31 = a1[2];
    float64x2_t v32 = a1[3];
    float64x2_t v11 = vsubq_f64(v32, v3);
    v11.f64[0] = v9.f64[0] + sqrt(vaddvq_f64(vmulq_f64(v11, v11)));
    double v12 = *(double *)v8.i64 / v11.f64[0];
    float64_t v13 = v9.f64[0] / v11.f64[0];
    v14.f64[0] = 0.0;
    v14.f64[1] = v12;
    v15.f64[0] = 0.0;
    v15.f64[1] = v12 * v12;
    v16.f64[0] = 0.0;
    v16.f64[1] = v12 * (v12 * v12);
    __asm { FMOV            V3.2D, #1.0 }
    v21.f64[1] = _Q3.f64[1];
    v21.f64[0] = v13;
    v22.f64[1] = _Q3.f64[1];
    v22.f64[0] = v13 * v13;
    _Q3.f64[0] = v13 * (v13 * v13);
    float64x2_t v41 = 0u;
    long long v42 = 0u;
    float64x2_t v39 = 0u;
    long long v40 = 0u;
    float64x2_t v37 = 0u;
    long long v38 = 0u;
    float64x2_t v35 = 0u;
    long long v36 = 0u;
    v33[0] = xmmword_236F1CB50;
    v33[1] = xmmword_236F1CB40;
    v33[2] = xmmword_236F1CB70;
    v33[3] = xmmword_236F1CB60;
    v33[4] = 0u;
    v33[5] = xmmword_236F1CB80;
    v33[6] = 0u;
    v33[7] = xmmword_236F14160;
    do
    {
      float64x2_t v25 = (float64x2_t)v33[v10];
      float64x2_t v24 = (float64x2_t)v33[v10 + 1];
      float64x2_t v26 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v25.f64[0], 0);
      float32x4_t v27 = (float64x2_t *)&v34[v10];
      *float32x4_t v27 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v26, v14, v25, 1), v15, v24.f64[0]), v16, v24, 1);
      v27[1] = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_laneq_f64(v26, v21, v25, 1), v22, v24.f64[0]), _Q3, v24, 1);
      v10 += 2;
    }
    while (v10 != 8);
    long long v47 = v34[4];
    long long v48 = v34[5];
    long long v49 = v34[6];
    long long v50 = v34[7];
    long long v43 = v34[0];
    long long v44 = v34[1];
    long long v45 = v34[2];
    long long v46 = v34[3];
    __invert_d4();
    *(void *)&v1.f64[0] = vzip1q_s64((int64x2_t)vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v35, v29.f64[0]), v37, v30.f64[0]), v39, v31.f64[0]), v41, v32.f64[0]), (int64x2_t)vmlaq_laneq_f64(vmlaq_laneq_f64(vmlaq_laneq_f64(vmulq_laneq_f64(v35, v29, 1), v37, v30, 1), v39, v31, 1), v41, v32, 1)).u64[0];
  }
  return v1.f64[0];
}

double geom_cubic_bezier_interpolate_points_and_derivatives_2f(double *a1)
{
  double result = *a1;
  __asm
  {
    FMOV            V4.2S, #-3.0
    FMOV            V4.2S, #3.0
  }
  return result;
}

__n128 geom_cubic_bezier_interpolate_points_and_derivatives_2d(__n128 *a1)
{
  __n128 result = *a1;
  __asm
  {
    FMOV            V4.2D, #-3.0
    FMOV            V4.2D, #3.0
  }
  return result;
}

float32x2_t geom_cubic_bezier_subdivide_2f(uint64_t a1, uint64_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, float32x2_t a6, float a7)
{
  *(double *)a1 = *(double *)&a3;
  *(double *)(a2 + 24) = *(double *)&a6;
  *(float32x2_t *)(a1 + 8) = vmla_n_f32(a3, vsub_f32(a4, a3), a7);
  *(float32x2_t *)(a2 + 16) = vmla_n_f32(a5, vsub_f32(a6, a5), a7);
  float32x2_t v7 = vmla_n_f32(a4, vsub_f32(a5, a4), a7);
  *(float32x2_t *)(a1 + 16) = vmla_n_f32(*(float32x2_t *)(a1 + 8), vsub_f32(v7, *(float32x2_t *)(a1 + 8)), a7);
  float32x2_t v8 = vmla_n_f32(v7, vsub_f32(*(float32x2_t *)(a2 + 16), v7), a7);
  *(float32x2_t *)(a2 + 8) = v8;
  float32x2_t result = vmla_n_f32(*(float32x2_t *)(a1 + 16), vsub_f32(v8, *(float32x2_t *)(a1 + 16)), a7);
  *(float32x2_t *)(a1 + 24) = result;
  *(float32x2_t *)a2 = result;
  return result;
}

float64x2_t geom_cubic_bezier_subdivide_2d(float64x2_t *a1, float64x2_t *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, double a7)
{
  *a1 = a3;
  a2[3] = a6;
  a1[1] = vmlaq_n_f64(a3, vsubq_f64(a4, a3), a7);
  a2[2] = vmlaq_n_f64(a5, vsubq_f64(a6, a5), a7);
  float64x2_t v7 = vmlaq_n_f64(a4, vsubq_f64(a5, a4), a7);
  a1[2] = vmlaq_n_f64(a1[1], vsubq_f64(v7, a1[1]), a7);
  float64x2_t v8 = vmlaq_n_f64(v7, vsubq_f64(a2[2], v7), a7);
  a2[1] = v8;
  float64x2_t result = vmlaq_n_f64(a1[2], vsubq_f64(v8, a1[2]), a7);
  a1[3] = result;
  *a2 = result;
  return result;
}

float32x2_t geom_cubic_bezier_extract_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float a5)
{
  float32x2_t v5 = vmla_n_f32(a1, vsub_f32(a2, a1), a5);
  float32x2_t v6 = vmla_n_f32(a2, vsub_f32(a3, a2), a5);
  float32x2_t v7 = vmla_n_f32(v5, vsub_f32(v6, v5), a5);
  return vmla_n_f32(v7, vsub_f32(vmla_n_f32(v6, vsub_f32(vmla_n_f32(a3, vsub_f32(a4, a3), a5), v6), a5), v7), a5);
}

double geom_cubic_bezier_extract_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, double a5)
{
  float64x2_t v5 = vmlaq_n_f64(a1, vsubq_f64(a2, a1), a5);
  float64x2_t v6 = vmlaq_n_f64(a2, vsubq_f64(a3, a2), a5);
  float64x2_t v7 = vmlaq_n_f64(v5, vsubq_f64(v6, v5), a5);
  *(void *)&double result = *(_OWORD *)&vmlaq_n_f64(v7, vsubq_f64(vmlaq_n_f64(v6, vsubq_f64(vmlaq_n_f64(a3, vsubq_f64(a4, a3), a5), v6), a5), v7), a5);
  return result;
}

float32x2_t geom_cubic_bezier_demote_to_linear_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  return vmla_f32(vmla_f32(vmla_f32(vmul_f32(a2, (float32x2_t)vdup_n_s32(0x3ECCCCCDu)), (float32x2_t)vdup_n_s32(0x3F333333u), a1), (float32x2_t)vdup_n_s32(0x3DCCCCCDu), a3), (float32x2_t)vdup_n_s32(0xBE4CCCCD), a4);
}

double geom_cubic_bezier_demote_to_linear_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4)
{
  *(void *)&double result = *(_OWORD *)&vmlaq_f64(vmlaq_f64(vmlaq_f64(vmulq_f64(a2, (float64x2_t)vdupq_n_s64(0x3FD999999999999AuLL)), (float64x2_t)vdupq_n_s64(0x3FE6666666666666uLL), a1), (float64x2_t)vdupq_n_s64(0x3FB999999999999AuLL), a3), (float64x2_t)vdupq_n_s64(0xBFC999999999999ALL), a4);
  return result;
}

double geom_cubic_bezier_demote_to_quadratic_bezier_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  double v4 = COERCE_DOUBLE(vmla_f32(vmla_f32(vmul_f32(vsub_f32(a2, a3), (float32x2_t)vdup_n_s32(0x3E19999Au)), (float32x2_t)vdup_n_s32(0x3F733333u), a1), (float32x2_t)vdup_n_s32(0x3D4CCCCDu), a4));
  __asm
  {
    FMOV            V1.2S, #-0.25
    FMOV            V0.2S, #0.75
  }
  return v4;
}

double geom_cubic_bezier_demote_to_quadratic_bezier_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4)
{
  *(void *)&double v4 = *(_OWORD *)&vmlaq_f64(vmlaq_f64(vmulq_f64(vsubq_f64(a2, a3), (float64x2_t)vdupq_n_s64(0x3FC3333333333333uLL)), (float64x2_t)vdupq_n_s64(0x3FEE666666666666uLL), a1), (float64x2_t)vdupq_n_s64(0x3FA999999999999AuLL), a4);
  __asm
  {
    FMOV            V1.2D, #-0.25
    FMOV            V0.2D, #0.75
  }
  return v4;
}

float32x2_t geom_cubic_bezier_convert_to_power_basis_2f(uint64_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5)
{
  __asm { FMOV            V5.2S, #3.0 }
  *(double *)a1 = *(double *)&a2;
  *(float32x2_t *)(a1 + 8) = vmul_f32(vsub_f32(a3, a2), _D5);
  float32x2_t v10 = vsub_f32(a5, a2);
  float32x2_t result = vmul_f32(vadd_f32(a4, vmla_f32(a2, (float32x2_t)0xC0000000C0000000, a3)), _D5);
  *(float32x2_t *)(a1 + 16) = result;
  *(float32x2_t *)(a1 + 24) = vmla_f32(v10, _D5, vsub_f32(a3, a4));
  return result;
}

float64x2_t geom_cubic_bezier_convert_to_power_basis_2d(float64x2_t *a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, float64x2_t a5)
{
  __asm { FMOV            V5.2D, #3.0 }
  *a1 = a2;
  a1[1] = vmulq_f64(vsubq_f64(a3, a2), _Q5);
  __asm { FMOV            V4.2D, #-2.0 }
  float64x2_t v11 = vsubq_f64(a5, a2);
  float64x2_t result = vmulq_f64(vaddq_f64(a4, vmlaq_f64(a2, _Q4, a3)), _Q5);
  a1[2] = result;
  a1[3] = vmlaq_f64(v11, _Q5, vsubq_f64(a3, a4));
  return result;
}

double geom_power_basis_convert_to_cubic_bezier_2f(double *a1)
{
  double result = *a1;
  __asm { FMOV            V5.2S, #3.0 }
  return result;
}

__n128 geom_power_basis_convert_to_cubic_bezier_2d(__n128 *a1)
{
  __n128 result = *a1;
  __asm
  {
    FMOV            V5.2D, #3.0
    FMOV            V6.2D, #2.0
  }
  return result;
}

float32x2_t geom_cubic_bezier_tangent_at_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float a5)
{
  float32x2_t v5 = vmla_n_f32(vmul_n_f32(vsub_f32(a3, a2), (float)((float)(1.0 - a5) * 6.0) * a5), vsub_f32(a2, a1), (float)(1.0 - a5) * (float)((float)(1.0 - a5) * 3.0));
  float32x2_t v7 = vsub_f32(a4, a3);
  float32x2_t v6 = vmla_n_f32(v5, v7, (float)(a5 * 3.0) * a5);
  v7.f32[0] = sqrtf(vaddv_f32(vmul_f32(v6, v6)));
  float32x2_t result = 0;
  if (v7.f32[0] > 0.0) {
    return vdiv_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v7, 0));
  }
  return result;
}

double geom_cubic_bezier_tangent_at_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, double a5)
{
  float64x2_t v5 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vsubq_f64(a3, a2), (1.0 - a5) * 6.0 * a5), vsubq_f64(a2, a1), (1.0 - a5) * ((1.0 - a5) * 3.0)), vsubq_f64(a4, a3), a5 * 3.0 * a5);
  double v6 = sqrt(vaddvq_f64(vmulq_f64(v5, v5)));
  double result = 0.0;
  if (v6 > 0.0) {
    *(void *)&double result = *(_OWORD *)&vdivq_f64(v5, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v6, 0));
  }
  return result;
}

int32x2_t geom_cubic_bezier_normal_at_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float a5)
{
  float32x2_t v5 = vmla_n_f32(vmul_n_f32(vsub_f32(a3, a2), (float)((float)(1.0 - a5) * 6.0) * a5), vsub_f32(a2, a1), (float)(1.0 - a5) * (float)((float)(1.0 - a5) * 3.0));
  float32x2_t v7 = vsub_f32(a4, a3);
  float32x2_t v6 = vmla_n_f32(v5, v7, (float)(a5 * 3.0) * a5);
  v7.f32[0] = sqrtf(vaddv_f32(vmul_f32(v6, v6)));
  int32x2_t v8 = 0;
  if (v7.f32[0] > 0.0) {
    int32x2_t v8 = (int32x2_t)vdiv_f32(v6, (float32x2_t)vdup_lane_s32((int32x2_t)v7, 0));
  }
  v6.f32[0] = -*(float *)&v8.i32[1];
  return vzip1_s32((int32x2_t)v6, v8);
}

float64_t geom_cubic_bezier_normal_at_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, double a5)
{
  float64x2_t v5 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(vsubq_f64(a3, a2), (1.0 - a5) * 6.0 * a5), vsubq_f64(a2, a1), (1.0 - a5) * ((1.0 - a5) * 3.0)), vsubq_f64(a4, a3), a5 * 3.0 * a5);
  double v6 = sqrt(vaddvq_f64(vmulq_f64(v5, v5)));
  int64x2_t v7 = 0uLL;
  if (v6 > 0.0) {
    int64x2_t v7 = (int64x2_t)vdivq_f64(v5, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v6, 0));
  }
  v5.f64[0] = -*(double *)&v7.i64[1];
  *(void *)&v5.f64[0] = vzip1q_s64((int64x2_t)v5, v7).u64[0];
  return v5.f64[0];
}

float geom_cubic_bezier_curvature_at_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float a5)
{
  float32x2_t v5 = vsub_f32(a2, a1);
  float32x2_t v6 = vsub_f32(a3, a2);
  float32x2_t v7 = vsub_f32(a4, a3);
  float32x2_t v8 = vmla_n_f32(vmla_n_f32(vmul_n_f32(v6, (float)((float)(1.0 - a5) * 6.0) * a5), v5, (float)(1.0 - a5) * (float)((float)(1.0 - a5) * 3.0)), v7, (float)(a5 * 3.0) * a5);
  float32x2_t v9 = vmla_n_f32(vmul_n_f32(vsub_f32(v7, v6), a5), vsub_f32(v6, v5), 1.0 - a5);
  __asm { FMOV            V0.2S, #6.0 }
  float32x2_t v15 = vmul_f32(v9, _D0);
  return vmlas_n_f32(vmuls_lane_f32(-v15.f32[0], v8, 1), v15.f32[1], v8.f32[0]) / powf(vaddv_f32(vmul_f32(v8, v8)), 1.5);
}

long double geom_cubic_bezier_curvature_at_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, double a5)
{
  float64x2_t v5 = vsubq_f64(a2, a1);
  float64x2_t v6 = vsubq_f64(a3, a2);
  float64x2_t v7 = vsubq_f64(a4, a3);
  float64x2_t v8 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v6, (1.0 - a5) * 6.0 * a5), v5, (1.0 - a5) * ((1.0 - a5) * 3.0)), v7, a5 * 3.0 * a5);
  float64x2_t v9 = vmlaq_n_f64(vmulq_n_f64(vsubq_f64(v7, v6), a5), vsubq_f64(v6, v5), 1.0 - a5);
  __asm { FMOV            V0.2D, #6.0 }
  float64x2_t v15 = vmulq_f64(v9, _Q0);
  return vmlad_n_f64(vmuld_lane_f64(-v15.f64[0], v8, 1), v15.f64[1], v8.f64[0])
       / pow(vaddvq_f64(vmulq_f64(v8, v8)), 1.5);
}

uint64_t geom_cubic_bezier_find_roots_at_x_2f(uint64_t a1, double a2, double a3, double a4, float32x2_t a5, float a6)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  v14[0] = *(float *)&a2 - a6;
  v14[1] = 3.0 * vsub_f32(*(float32x2_t *)&a3, *(float32x2_t *)&a2).f32[0];
  v14[2] = (float)(*(float *)&a4 + vmlas_n_f32(*(float *)&a2, -2.0, *(float *)&a3)) * 3.0;
  v14[3] = vmlas_n_f32(vsub_f32(a5, *(float32x2_t *)&a2).f32[0], 3.0, vsub_f32(*(float32x2_t *)&a3, *(float32x2_t *)&a4).f32[0]);
  unsigned int v7 = geom::cubic_roots<float>(v14, v15);
  unsigned __int8 v8 = 0;
  if (v7)
  {
    uint64_t v9 = v7;
    float32x2_t v10 = v15;
    do
    {
      float v11 = *v10;
      if (*v10 >= 0.0 && v11 <= 1.0) {
        *(float *)(a1 + 4 * v8++) = v11;
      }
      ++v10;
      --v9;
    }
    while (v9);
  }
  return v8;
}

uint64_t geom_cubic_bezier_find_roots_at_x_2d(uint64_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, double a6)
{
  float v15[3] = *(long double *)MEMORY[0x263EF8340];
  v14[0] = a2.f64[0] - a6;
  v14[1] = 3.0 * vsubq_f64(a3, a2).f64[0];
  v14[2] = (a4.f64[0] + vmlad_n_f64(a2.f64[0], -2.0, a3.f64[0])) * 3.0;
  v14[3] = vmlad_n_f64(vsubq_f64(a5, a2).f64[0], 3.0, vsubq_f64(a3, a4).f64[0]);
  unsigned int v7 = geom::cubic_roots<double>(v14, v15);
  unsigned __int8 v8 = 0;
  if (v7)
  {
    uint64_t v9 = v7;
    float32x2_t v10 = v15;
    do
    {
      double v11 = *v10;
      if (*v10 >= 0.0 && v11 <= 1.0) {
        *(double *)(a1 + 8 * v8++) = v11;
      }
      ++v10;
      --v9;
    }
    while (v9);
  }
  return v8;
}

uint64_t geom_cubic_bezier_find_roots_at_y_2f(uint64_t a1, float32x2_t a2, double _D1, double a4, float32x2_t a5, float a6)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  v20[0] = a2.f32[1] - a6;
  v20[1] = (float)(*((float *)&_D1 + 1) - a2.f32[1]) * 3.0;
  _S4 = -2.0;
  __asm { FMLA            S5, S4, V1.S[1] }
  v20[2] = (float)(*((float *)&a4 + 1) + _S5) * 3.0;
  v20[3] = COERCE_FLOAT(vsub_f32(a5, a2).i32[1]) + (float)((float)(*((float *)&_D1 + 1) - *((float *)&a4 + 1)) * 3.0);
  unsigned int v13 = geom::cubic_roots<float>(v20, v21);
  unsigned __int8 v14 = 0;
  if (v13)
  {
    uint64_t v15 = v13;
    uint64_t v16 = v21;
    do
    {
      float v17 = *v16;
      if (*v16 >= 0.0 && v17 <= 1.0) {
        *(float *)(a1 + 4 * v14++) = v17;
      }
      ++v16;
      --v15;
    }
    while (v15);
  }
  return v14;
}

uint64_t geom_cubic_bezier_find_roots_at_y_2d(uint64_t a1, float64x2_t a2, __n128 _Q1, __n128 a4, float64x2_t a5, double a6)
{
  float v21[3] = *(long double *)MEMORY[0x263EF8340];
  v20[0] = a2.f64[1] - a6;
  v20[1] = (_Q1.n128_f64[1] - a2.f64[1]) * 3.0;
  _D4 = -2.0;
  __asm { FMLA            D5, D4, V1.D[1] }
  v20[2] = (a4.n128_f64[1] + _D5) * 3.0;
  v20[3] = COERCE_DOUBLE(*(void *)&vsubq_f64(a5, a2).f64[1]) + (_Q1.n128_f64[1] - a4.n128_f64[1]) * 3.0;
  unsigned int v13 = geom::cubic_roots<double>(v20, v21);
  unsigned __int8 v14 = 0;
  if (v13)
  {
    uint64_t v15 = v13;
    uint64_t v16 = v21;
    do
    {
      double v17 = *v16;
      if (*v16 >= 0.0 && v17 <= 1.0) {
        *(double *)(a1 + 8 * v14++) = v17;
      }
      ++v16;
      --v15;
    }
    while (v15);
  }
  return v14;
}

float geom_cubic_bezier_arc_length_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  uint64_t v4 = 0;
  float32x2_t v5 = vsub_f32(a2, a1);
  float32x2_t v6 = vsub_f32(a3, a2);
  float32x2_t v7 = vsub_f32(a4, a3);
  __asm { FMOV            V5.2S, #3.0 }
  do
  {
    float v14 = vmlas_n_f32(0.5, 0.5, *(float *)&_D6);
    _D7 = vmul_f32(vmla_n_f32(vmul_n_f32(vmla_n_f32(vmul_n_f32(v7, v14), v6, (float)(1.0 - v14) + (float)(1.0 - v14)), v14), v5, (float)(1.0 - v14) * (float)(1.0 - v14)), _D5);
    _D7.f32[0] = sqrtf(vaddv_f32(vmul_f32(_D7, _D7)));
    __asm { FMLA            S1, S7, V6.S[1] }
    ++v4;
  }
  while (v4 != 24);
  return _S1 * 0.5;
}

double geom_cubic_bezier_arc_length_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4)
{
  uint64_t v4 = 0;
  float64x2_t v5 = vsubq_f64(a2, a1);
  float64x2_t v6 = vsubq_f64(a3, a2);
  float64x2_t v7 = vsubq_f64(a4, a3);
  __asm { FMOV            V5.2D, #3.0 }
  do
  {
    double v14 = vmlad_n_f64(0.5, 0.5, *(double *)&_Q6);
    _Q7 = vmulq_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v7, v14), v6, 1.0 - v14 + 1.0 - v14), v14), v5, (1.0 - v14) * (1.0 - v14)), _Q5);
    _Q7.f64[0] = sqrt(vaddvq_f64(vmulq_f64(_Q7, _Q7)));
    __asm { FMLA            D1, D7, V6.D[1] }
    ++v4;
  }
  while (v4 != 24);
  return _D1 * 0.5;
}

float geom_cubic_bezier_arc_length_in_range_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float a5, float a6)
{
  uint64_t v6 = 0;
  float v7 = (float)(a5 + a6) * 0.5;
  float v8 = (float)(a6 - a5) * 0.5;
  float32x2_t v9 = vsub_f32(a2, a1);
  float32x2_t v10 = vsub_f32(a3, a2);
  float32x2_t v11 = vsub_f32(a4, a3);
  __asm { FMOV            V7.2S, #3.0 }
  do
  {
    float v18 = vmlas_n_f32(v7, v8, *(float *)&_D16);
    _D17 = vmul_f32(vmla_n_f32(vmul_n_f32(vmla_n_f32(vmul_n_f32(v11, v18), v10, (float)(1.0 - v18) + (float)(1.0 - v18)), v18), v9, (float)(1.0 - v18) * (float)(1.0 - v18)), _D7);
    _D17.f32[0] = sqrtf(vaddv_f32(vmul_f32(_D17, _D17)));
    __asm { FMLA            S2, S17, V16.S[1] }
    ++v6;
  }
  while (v6 != 24);
  return v8 * _S2;
}

double geom_cubic_bezier_arc_length_in_range_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, double a5, double a6)
{
  uint64_t v6 = 0;
  double v7 = (a5 + a6) * 0.5;
  double v8 = (a6 - a5) * 0.5;
  float64x2_t v9 = vsubq_f64(a2, a1);
  float64x2_t v10 = vsubq_f64(a3, a2);
  float64x2_t v11 = vsubq_f64(a4, a3);
  __asm { FMOV            V7.2D, #3.0 }
  do
  {
    double v18 = vmlad_n_f64(v7, v8, *(double *)&_Q16);
    _Q17 = vmulq_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(v11, v18), v10, 1.0 - v18 + 1.0 - v18), v18), v9, (1.0 - v18) * (1.0 - v18)), _Q7);
    _Q17.f64[0] = sqrt(vaddvq_f64(vmulq_f64(_Q17, _Q17)));
    __asm { FMLA            D2, D17, V16.D[1] }
    ++v6;
  }
  while (v6 != 24);
  return v8 * _D2;
}

uint64_t geom_quadratic_bezier_find_monotonic_intervals_2f(_DWORD *a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  float32x2_t v5 = vsub_f32(a3, a2);
  float32x2_t v6 = vadd_f32(v5, v5);
  float32x2_t v7 = vadd_f32(a4, vmla_f32(a2, (float32x2_t)0xC0000000C0000000, a3));
  float32x2_t v8 = vadd_f32(v7, v7);
  float v9 = (float)-v6.f32[0] / v8.f32[0];
  char v10 = 1;
  if (fabsf(v8.f32[0]) > 0.00001 && v9 != 0.0)
  {
    float v11 = fabsf(v9);
    if (v11 == INFINITY)
    {
      char v10 = 1;
      if (v9 < 1.0 && v9 > 0.0 && v9 != 1.0) {
        goto LABEL_15;
      }
    }
    else
    {
      char v10 = 1;
      if (v9 != 1.0)
      {
        float v13 = v11 + 1.0;
        if ((float)((float)(v13 * 0.00001) + 0.0) <= v9)
        {
          if ((float)((float)((float)(v13 + 1.0) * -0.00001) + 1.0) >= v9)
          {
LABEL_15:
            char v10 = 0;
            float v21 = (float)-v6.f32[0] / v8.f32[0];
            goto LABEL_16;
          }
          char v10 = 1;
        }
      }
    }
  }
LABEL_16:
  if (fabsf(v8.f32[1]) > 0.00001)
  {
    float v14 = (float)-v6.f32[1] / v8.f32[1];
    if (v14 != 0.0)
    {
      float v15 = fabsf(v14);
      if (v15 == INFINITY)
      {
        if (v14 < 1.0 && v14 > 0.0 && v14 != 1.0)
        {
LABEL_31:
          if (v10)
          {
            float v21 = (float)-v6.f32[1] / v8.f32[1];
LABEL_34:
            unsigned int v17 = 1;
LABEL_35:
            *a1 = 0;
            goto LABEL_36;
          }
          if (v14 == v9) {
            goto LABEL_34;
          }
          if (v15 == INFINITY || (float v19 = fabsf(v9), v19 == INFINITY))
          {
            if (v14 >= v9)
            {
              if (v14 <= v9) {
                goto LABEL_34;
              }
              goto LABEL_45;
            }
          }
          else
          {
            float v20 = (float)((float)(v15 + v19) + 1.0) * 0.00001;
            if ((float)(v9 - v20) < v14)
            {
              if ((float)(v9 + v20) > v14) {
                goto LABEL_34;
              }
LABEL_45:
              float v22 = (float)-v6.f32[1] / v8.f32[1];
LABEL_47:
              unsigned int v17 = 2;
              goto LABEL_35;
            }
          }
          float v21 = (float)-v6.f32[1] / v8.f32[1];
          float v22 = v9;
          goto LABEL_47;
        }
      }
      else if (v14 != 1.0 {
             && (float)((float)((float)(v15 + 1.0) * 0.00001) + 0.0) <= v14
      }
             && (float)((float)((float)((float)(v15 + 1.0) + 1.0) * -0.00001) + 1.0) >= v14)
      {
        goto LABEL_31;
      }
    }
  }
  unsigned int v17 = 0;
  *a1 = 0;
  if ((v10 & 1) == 0)
  {
    unsigned int v17 = 1;
LABEL_36:
    memcpy(a1 + 1, &v21, 4 * v17);
  }
  a1[v17 + 1] = 1065353216;
  return v17 + 2;
}

uint64_t geom_quadratic_bezier_find_monotonic_intervals_2d(void *a1, float64x2_t a2, float64x2_t a3, float64x2_t a4)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  float64x2_t v5 = vsubq_f64(a3, a2);
  float64x2_t v6 = vaddq_f64(v5, v5);
  __asm { FMOV            V4.2D, #-2.0 }
  float64x2_t v10 = vaddq_f64(a4, vmlaq_f64(a2, _Q4, a3));
  float64x2_t v11 = vaddq_f64(v10, v10);
  double v12 = -v6.f64[0] / v11.f64[0];
  char v13 = 1;
  if (fabs(v11.f64[0]) > 0.000001 && v12 != 0.0 && v12 >= 0.000001 && v12 != 1.0 && v12 <= 0.999999)
  {
    char v13 = 0;
    double __src = -v6.f64[0] / v11.f64[0];
  }
  if (fabs(v11.f64[1]) > 0.000001)
  {
    double v14 = -v6.f64[1] / v11.f64[1];
    if (v14 != 0.0)
    {
      _ZF = v14 < 0.000001 || v14 == 1.0;
      if (!_ZF && v14 <= 0.999999)
      {
        if (v13)
        {
          double __src = -v6.f64[1] / v11.f64[1];
LABEL_16:
          unsigned int v16 = 1;
LABEL_31:
          *a1 = 0;
          goto LABEL_32;
        }
        if (v14 == v12 || v12 + -0.000001 < v14)
        {
          if (v14 == v12 || v12 + 0.000001 > v14) {
            goto LABEL_16;
          }
          double v21 = -v6.f64[1] / v11.f64[1];
        }
        else
        {
          double __src = -v6.f64[1] / v11.f64[1];
          double v21 = v12;
        }
        unsigned int v16 = 2;
        goto LABEL_31;
      }
    }
  }
  *a1 = 0;
  if ((v13 & 1) == 0)
  {
    unsigned int v16 = 1;
LABEL_32:
    memcpy(a1 + 1, &__src, 8 * v16);
    goto LABEL_33;
  }
  unsigned int v16 = 0;
LABEL_33:
  a1[v16 + 1] = 0x3FF0000000000000;
  return v16 + 2;
}

uint64_t geom_cubic_bezier_find_monotonic_intervals_2f(_DWORD *a1, float32x2_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5)
{
  uint64_t v44 = *MEMORY[0x263EF8340];
  __asm { FMOV            V5.2S, #3.0 }
  float32x2_t v9 = vmul_f32(vsub_f32(a3, a2), _D5);
  float32x2_t v10 = vsub_f32(a5, a2);
  __asm { FMOV            V3.2S, #6.0 }
  float32x2_t v12 = vmul_f32(vadd_f32(a4, vmla_f32(a2, (float32x2_t)0xC0000000C0000000, a3)), _D3);
  float32x2_t v13 = vmul_f32(vmla_f32(v10, _D5, vsub_f32(a3, a4)), _D5);
  if (fabsf(v13.f32[0]) <= 0.00001)
  {
    if (fabsf(v12.f32[0]) > 0.00001)
    {
      float v42 = (float)-v9.f32[0] / v12.f32[0];
      unsigned int v19 = 1;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  float v14 = (float)(v9.f32[0] * (float)(v13.f32[0] * -4.0)) + (float)(v12.f32[0] * v12.f32[0]);
  if (v14 < 0.0)
  {
LABEL_12:
    unsigned int v19 = 0;
    goto LABEL_13;
  }
  float v15 = 1.0;
  if (v12.f32[0] < 0.0) {
    float v15 = -1.0;
  }
  float v16 = (float)(v12.f32[0] + (float)(v15 * sqrtf(v14))) * -0.5;
  float v17 = v16 / v13.f32[0];
  float v18 = v9.f32[0] / v16;
  float v42 = v17;
  float v43 = v18;
  if (v18 < v17)
  {
    float v42 = v18;
    float v43 = v17;
  }
  if (v14 <= 0.0) {
    unsigned int v19 = 1;
  }
  else {
    unsigned int v19 = 2;
  }
LABEL_13:
  if (fabsf(v13.f32[1]) <= 0.00001)
  {
    if (fabsf(v12.f32[1]) > 0.00001)
    {
      float v40 = (float)-v9.f32[1] / v12.f32[1];
      unsigned int v22 = 1;
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v13.f32[0] = (float)(v9.f32[1] * (float)(v13.f32[1] * -4.0)) + (float)(v12.f32[1] * v12.f32[1]);
  if (v13.f32[0] < 0.0)
  {
LABEL_24:
    unsigned int v22 = 0;
    goto LABEL_25;
  }
  float v20 = 1.0;
  if (v12.f32[1] < 0.0) {
    float v20 = -1.0;
  }
  float v21 = (float)(v12.f32[1] + (float)(v20 * sqrtf(v13.f32[0]))) * -0.5;
  float v40 = v21 / v13.f32[1];
  float v41 = v9.f32[1] / v21;
  if ((float)(v9.f32[1] / v21) < (float)(v21 / v13.f32[1]))
  {
    float v40 = v9.f32[1] / v21;
    float v41 = v21 / v13.f32[1];
  }
  if (v13.f32[0] <= 0.0) {
    unsigned int v22 = 1;
  }
  else {
    unsigned int v22 = 2;
  }
LABEL_25:
  *a1 = 0;
  unsigned __int8 v23 = v22 | v19;
  if (v22 | v19)
  {
    unsigned __int8 v24 = 0;
    int v25 = 0;
    unsigned __int8 v23 = 0;
    BOOL v26 = v22 != 0;
    BOOL v27 = v19 != 0;
    do
    {
      if (v26)
      {
        float v28 = *(&v40 + v24);
        if (!v27 || (float v29 = *(&v42 + v25), v29 == v28))
        {
LABEL_30:
          ++v24;
          goto LABEL_32;
        }
        float v36 = fabsf(v29);
        float v37 = fabsf(v28);
        if (v36 == INFINITY || v37 == INFINITY)
        {
          if (v29 >= v28) {
            goto LABEL_30;
          }
        }
        else if ((float)(v28 + (float)((float)((float)(v37 + v36) + 1.0) * -0.00001)) < v29)
        {
          goto LABEL_30;
        }
        ++v25;
        float v28 = v29;
      }
      else
      {
        float v28 = *(&v42 + v25++);
      }
LABEL_32:
      float v30 = *(float *)&a1[v23];
      if (v28 == v30) {
        goto LABEL_33;
      }
      float v31 = fabsf(v28);
      if (v31 == INFINITY)
      {
        if (v28 >= 1.0 || v28 == 1.0 || v28 <= v30) {
          goto LABEL_33;
        }
LABEL_61:
        *(float *)&a1[++v23] = v28;
        goto LABEL_33;
      }
      float v34 = fabsf(v30);
      if (v34 == INFINITY)
      {
        if (v28 == 1.0 || v28 <= v30) {
          goto LABEL_33;
        }
      }
      else if (v28 == 1.0 || (float)(v30 + (float)((float)((float)(v31 + v34) + 1.0) * 0.00001)) > v28)
      {
        goto LABEL_33;
      }
      if ((float)((float)((float)((float)(v31 + 1.0) + 1.0) * -0.00001) + 1.0) >= v28) {
        goto LABEL_61;
      }
LABEL_33:
      BOOL v26 = v22 > v24;
      BOOL v27 = v25 < v19;
    }
    while (v25 < v19 || v22 > v24);
  }
  a1[(v23 + 1)] = 1065353216;
  return (v23 + 2);
}

uint64_t geom_cubic_bezier_find_monotonic_intervals_2d(void *a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, float64x2_t a5)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  __asm { FMOV            V5.2D, #3.0 }
  float64x2_t v8 = vmulq_f64(vsubq_f64(a3, a2), _Q5);
  __asm { FMOV            V6.2D, #-2.0 }
  float64x2_t v10 = vsubq_f64(a5, a2);
  __asm { FMOV            V3.2D, #6.0 }
  float64x2_t v12 = vmulq_f64(vaddq_f64(a4, vmlaq_f64(a2, _Q6, a3)), _Q3);
  float64x2_t v13 = vmulq_f64(vmlaq_f64(v10, _Q5, vsubq_f64(a3, a4)), _Q5);
  if (fabs(v13.f64[0]) <= 0.000001)
  {
    if (fabs(v12.f64[0]) > 0.000001)
    {
      double v37 = -v8.f64[0] / v12.f64[0];
      unsigned int v19 = 1;
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  double v14 = v8.f64[0] * (v13.f64[0] * -4.0) + v12.f64[0] * v12.f64[0];
  if (v14 < 0.0)
  {
LABEL_12:
    unsigned int v19 = 0;
    goto LABEL_13;
  }
  double v15 = 1.0;
  if (v12.f64[0] < 0.0) {
    double v15 = -1.0;
  }
  float64_t v16 = (v12.f64[0] + v15 * sqrt(v14)) * -0.5;
  double v17 = v16 / v13.f64[0];
  double v18 = v8.f64[0] / v16;
  double v37 = v17;
  double v38 = v18;
  if (v18 < v17)
  {
    double v37 = v18;
    double v38 = v17;
  }
  if (v14 <= 0.0) {
    unsigned int v19 = 1;
  }
  else {
    unsigned int v19 = 2;
  }
LABEL_13:
  if (fabs(v13.f64[1]) <= 0.000001)
  {
    if (fabs(v12.f64[1]) > 0.000001)
    {
      double v35 = -v8.f64[1] / v12.f64[1];
      unsigned int v22 = 1;
      goto LABEL_25;
    }
    goto LABEL_24;
  }
  v13.f64[0] = v8.f64[1] * (v13.f64[1] * -4.0) + v12.f64[1] * v12.f64[1];
  if (v13.f64[0] < 0.0)
  {
LABEL_24:
    unsigned int v22 = 0;
    goto LABEL_25;
  }
  double v20 = 1.0;
  if (v12.f64[1] < 0.0) {
    double v20 = -1.0;
  }
  double v21 = (v12.f64[1] + v20 * sqrt(v13.f64[0])) * -0.5;
  double v35 = v21 / v13.f64[1];
  double v36 = v8.f64[1] / v21;
  if (v8.f64[1] / v21 < v21 / v13.f64[1])
  {
    double v35 = v8.f64[1] / v21;
    double v36 = v21 / v13.f64[1];
  }
  if (v13.f64[0] <= 0.0) {
    unsigned int v22 = 1;
  }
  else {
    unsigned int v22 = 2;
  }
LABEL_25:
  *a1 = 0;
  unsigned __int8 v23 = v22 | v19;
  if (v22 | v19)
  {
    unsigned __int8 v24 = 0;
    unsigned __int8 v25 = 0;
    unsigned __int8 v23 = 0;
    BOOL v26 = v22 != 0;
    BOOL v27 = v19 != 0;
    while (v26)
    {
      double v28 = *(&v35 + v24);
      if (v27)
      {
        double v29 = *(&v37 + v25);
        if (v29 != v28 && v28 + -0.000001 >= v29) {
          goto LABEL_36;
        }
      }
      ++v24;
      double v29 = v28;
LABEL_37:
      double v31 = *(double *)&a1[v23];
      _ZF = v29 == v31 || v31 + 0.000001 > v29 || v29 == 1.0;
      if (!_ZF && v29 <= 0.999999) {
        *(double *)&a1[++v23] = v29;
      }
      BOOL v26 = v22 > v24;
      BOOL v27 = v25 < v19;
      if (v25 >= v19 && v22 <= v24) {
        goto LABEL_48;
      }
    }
    double v29 = *(&v37 + v25);
LABEL_36:
    ++v25;
    goto LABEL_37;
  }
LABEL_48:
  a1[(v23 + 1)] = 0x3FF0000000000000;
  return (v23 + 2);
}

uint64_t geom::anonymous namespace'::cubic_bezier_find_characteristic_points<float>(int *a1, float *a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, float32x2_t a6)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  float32x2_t v6 = vsub_f32(a4, a3);
  float32x2_t v7 = vsub_f32(a5, a3);
  float32x2_t v8 = vsub_f32(a6, a3);
  __asm { FMOV            V0.2S, #3.0 }
  float32x2_t v14 = vmul_f32(v6, _D0);
  _D3 = vmul_f32(vadd_f32(vmla_f32(0, (float32x2_t)0xC0000000C0000000, v6), v7), _D0);
  _D7 = (int8x8_t)vmla_f32(v8, _D0, vsub_f32(v6, v7));
  float32x2_t v17 = (float32x2_t)vrev64_s32((int32x2_t)v14);
  __asm { FMLA            S0, S7, V3.S[1] }
  float32x2_t v19 = vmul_f32((float32x2_t)vext_s8((int8x8_t)_D3, _D7, 4uLL), vneg_f32(v14));
  _D3.i32[1] = _D7.i32[1];
  _D1 = vmla_f32(v19, _D3, v17);
  _S7 = vmuls_lane_f32(3.0, _D1, 1);
  if (fabsf(_S0) > 0.00001)
  {
    __asm { FMLA            S2, S7, V1.S[1] }
    float v23 = fabsf(_S2);
    if (v23 > 0.00001 && _S2 > 0.0)
    {
      v24.i32[1] = -1073741824;
      v24.f32[0] = _S0 * 1.3333;
      *a1 = 0;
      float32x2_t v25 = vmul_f32(_D1, v24);
LABEL_10:
      float32x2_t v30 = v25;
      int v31 = 1065353216;
    }
    if (v23 > 0.00001 && _S2 <= 0.0)
    {
      *a1 = 1;
      _D1.f32[0] = (float)(_D1.f32[1] * _D1.f32[1]) - (float)(_S0 * _D1.f32[0]);
      float32x2_t v25 = vmul_f32(_D1, (float32x2_t)0xC000000040800000);
      goto LABEL_10;
    }
    *a1 = 2;
    float v26 = _D1.f32[1] / (float)(_S0 + _S0);
    goto LABEL_14;
  }
  if (fabsf(_D1.f32[1]) > 0.00001)
  {
    *a1 = 2;
    float v26 = _D1.f32[0] / _S7;
LABEL_14:
    *a2 = v26;
    return v26 < 1.0 && v26 > 0.0;
  }
  if (fabsf(_D1.f32[0]) <= 0.00001)
  {
    if (fabsf(vaddv_f32(vmul_f32(v6, v6))) <= 0.00001
      && fabsf(vaddv_f32(vmul_f32(v7, v7))) <= 0.00001
      && fabsf(vaddv_f32(vmul_f32(v8, v8))) <= 0.00001)
    {
      uint64_t v27 = 0;
      int v28 = 5;
    }
    else
    {
      uint64_t v27 = 0;
      int v28 = 4;
    }
  }
  else
  {
    uint64_t v27 = 0;
    int v28 = 3;
  }
  *a1 = v28;
  return v27;
}

uint64_t geom::anonymous namespace'::cubic_bezier_find_characteristic_points<double>(int *a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6)
{
  uint64_t v32 = *MEMORY[0x263EF8340];
  float64x2_t v6 = vsubq_f64(a4, a3);
  float64x2_t v7 = vsubq_f64(a5, a3);
  float64x2_t v8 = vsubq_f64(a6, a3);
  __asm
  {
    FMOV            V0.2D, #3.0
    FMOV            V2.2D, #-2.0
  }
  float64x2_t v15 = vmulq_f64(vaddq_f64(vmlaq_f64((float64x2_t)0, _Q2, v6), v7), _Q0);
  int8x16_t v16 = (int8x16_t)vmlaq_f64(v8, _Q0, vsubq_f64(v6, v7));
  float32x2_t v17 = vcvt_f32_f64(vmulq_f64(v6, _Q0));
  float64x2_t v18 = (float64x2_t)vextq_s8((int8x16_t)v15, v16, 8uLL);
  *(void *)&v15.f64[1] = v16.i64[1];
  *(float32x2_t *)v16.i8 = vcvt_f32_f64(v18);
  *(float32x2_t *)&v15.f64[0] = vcvt_f32_f64(v15);
  double v19 = vmlas_n_f32(vmuls_lane_f32(-*(float *)v15.f64, *(float32x2_t *)&v15.f64[0], 1), *(float *)&v16.i32[1], *(float *)v16.i32);
  _Q3 = vcvtq_f64_f32(vmla_f32(vmul_f32(vneg_f32(v17), *(float32x2_t *)v16.i8), *(float32x2_t *)&v15.f64[0], (float32x2_t)vrev64_s32((int32x2_t)v17)));
  _D16 = vmuld_lane_f64(3.0, _Q3, 1);
  if (fabs(v19) > 0.000001)
  {
    __asm { FMLA            D1, D16, V3.D[1] }
    float v23 = _D1;
    double v24 = fabsf(v23);
    if (v24 > 0.000001 && v23 > 0.0)
    {
      _Q2.f64[0] = v19 * 1.33333333;
      *a1 = 0;
      float64x2_t v25 = vmulq_f64(_Q2, _Q3);
LABEL_10:
      float64x2_t v30 = v25;
      uint64_t v31 = 0x3FF0000000000000;
    }
    if (v24 > 0.000001 && v23 <= 0.0)
    {
      *a1 = 1;
      _Q3.f64[0] = _Q3.f64[1] * _Q3.f64[1] - v19 * _Q3.f64[0];
      float64x2_t v25 = vmulq_f64(_Q3, (float64x2_t)xmmword_236F1CB90);
      goto LABEL_10;
    }
    *a1 = 2;
    double v26 = _Q3.f64[1] / (v19 + v19);
    goto LABEL_14;
  }
  if (fabs(_Q3.f64[1]) > 0.000001)
  {
    *a1 = 2;
    double v26 = _Q3.f64[0] / _D16;
LABEL_14:
    *a2 = v26;
    return v26 < 1.0 && v26 > 0.0;
  }
  if (fabs(_Q3.f64[0]) <= 0.000001)
  {
    if (fabs(vaddvq_f64(vmulq_f64(v6, v6))) <= 0.000001
      && fabs(vaddvq_f64(vmulq_f64(v7, v7))) <= 0.000001
      && fabs(vaddvq_f64(vmulq_f64(v8, v8))) <= 0.000001)
    {
      uint64_t v27 = 0;
      int v28 = 5;
    }
    else
    {
      uint64_t v27 = 0;
      int v28 = 4;
    }
  }
  else
  {
    uint64_t v27 = 0;
    int v28 = 3;
  }
  *a1 = v28;
  return v27;
}

float geom_cubic_bezier_fit_with_quadratic_bezier_pair_2f(uint64_t a1, uint64_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, float32x2_t a6, float a7)
{
  *(double *)a1 = *(double *)&a3;
  *(double *)(a2 + 16) = *(double *)&a6;
  *(float32x2_t *)(a1 + 8) = vmla_n_f32(a3, vsub_f32(a4, a3), a7 * 1.5);
  float result = 1.0 - a7;
  float32x2_t v8 = vmla_n_f32(a6, vsub_f32(a5, a6), (float)(1.0 - a7) * 1.5);
  *(float32x2_t *)(a2 + 8) = v8;
  float32x2_t v9 = vmla_n_f32(vmul_n_f32(v8, a7), *(float32x2_t *)(a1 + 8), 1.0 - a7);
  *(float32x2_t *)(a1 + 16) = v9;
  *(float32x2_t *)a2 = v9;
  return result;
}

double geom_cubic_bezier_fit_with_quadratic_bezier_pair_2d(float64x2_t *a1, float64x2_t *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, double a7)
{
  *a1 = a3;
  a2[2] = a6;
  a1[1] = vmlaq_n_f64(a3, vsubq_f64(a4, a3), a7 * 1.5);
  double result = 1.0 - a7;
  float64x2_t v8 = vmlaq_n_f64(a6, vsubq_f64(a5, a6), (1.0 - a7) * 1.5);
  a2[1] = v8;
  float64x2_t v9 = vmlaq_n_f64(vmulq_n_f64(v8, a7), a1[1], 1.0 - a7);
  a1[2] = v9;
  *a2 = v9;
  return result;
}

unint64_t geom_cubic_bezier_fit_with_quadratic_beziers_2f(uint64_t a1, double a2, float32x2_t a3, float32x2_t a4, float32x2_t a5)
{
  uint64_t v100 = *MEMORY[0x263EF8340];
  float64x2_t v9 = (float32x2_t **)geom::collection_to_vector<float>(a1);
  int v93 = 0;
  v9[1] = *v9;
  if (v93 == 3)
  {
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v9, 3uLL);
    float32x2_t v17 = *v9;
    float32x2_t v18 = (float32x2_t)vdup_n_s32(0x3E19999Au);
    float32x2_t v19 = (float32x2_t)vdup_n_s32(0x3F733333u);
    float32x2_t v20 = (float32x2_t)vdup_n_s32(0x3D4CCCCDu);
    float32x2_t v21 = vmla_f32(vmla_f32(vmul_f32(vsub_f32(a3, a4), v18), v19, *(float32x2_t *)&a2), v20, a5);
    _OWORD v17[2] = vmla_f32(vmla_f32(vmul_f32(vsub_f32(a4, a3), v18), v20, *(float32x2_t *)&a2), v19, a5);
    __asm { FMOV            V3.2S, #-0.25 }
    float32x2_t v23 = vmul_f32(vadd_f32(*(float32x2_t *)&a2, a5), _D3);
    __asm { FMOV            V3.2S, #0.75 }
    *float32x2_t v17 = v21;
    v17[1] = vmla_f32(v23, _D3, vadd_f32(a3, a4));
    return (v9[1] - *v9) / 3uLL;
  }
  if (v93 == 4)
  {
    float32x2_t v25 = vsub_f32(a5, *(float32x2_t *)&a2);
    float32x2_t v26 = vmul_f32(vsub_f32(a3, *(float32x2_t *)&a2), v25);
    float32x2_t v27 = vadd_f32(v26, (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1));
    float v28 = vaddv_f32(v26);
    float32x2_t v29 = vmul_f32(vsub_f32(a4, *(float32x2_t *)&a2), v25);
    float32x2_t v30 = vadd_f32(v29, (float32x2_t)vdup_lane_s32((int32x2_t)v29, 1));
    float32x2_t v31 = vmul_f32(v25, v25);
    float32x2_t v32 = vadd_f32(v31, (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1));
    if (v28 < 0.0 || (vcgt_f32(v30, v32).u8[0] & 1) != 0 || (vcgt_f32(v27, v32).u8[0] & 1) != 0 || v30.f32[0] < 0.0)
    {
      float v33 = vdiv_f32(v27, v32).f32[0];
      float v34 = vdiv_f32(v30, v32).f32[0];
      float v35 = 3.0 * v33;
      float v36 = vmlas_n_f32(6.0 * v34, -12.0, v33);
      float v37 = vmlas_n_f32(-9.0 * v34, 9.0, v33) + 3.0;
      if (fabsf(v37) <= 0.00001)
      {
        if (fabsf(v36) > 0.00001)
        {
          float v98 = (float)-v35 / v36;
          uint64_t v42 = 1;
          goto LABEL_28;
        }
      }
      else
      {
        float v38 = (float)(v35 * (float)(v37 * -4.0)) + (float)(v36 * v36);
        if (v38 >= 0.0)
        {
          float v39 = 1.0;
          if (v36 < 0.0) {
            float v39 = -1.0;
          }
          float v40 = (float)(v36 + (float)(v39 * sqrtf(v38))) * -0.5;
          float v41 = v35 / v40;
          float v98 = v40 / v37;
          float v99 = v41;
          if (v41 < (float)(v40 / v37))
          {
            float v98 = v41;
            float v99 = v40 / v37;
          }
          uint64_t v42 = 2;
          if (v38 <= 0.0) {
            uint64_t v42 = 1;
          }
LABEL_28:
          uint64_t v77 = 0;
          unsigned __int8 v78 = 0;
          do
          {
            float v79 = *(&v98 + v77);
            if (v79 >= 0.0 && v79 <= 1.0) {
              *(&v96 + v78++) = v79;
            }
            ++v77;
          }
          while (v42 != v77);
          _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v9, 3 * v78 + 3);
          if (v78 == 1)
          {
            double v90 = COERCE_DOUBLE(vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(a3, v96 * (float)((float)((float)(1.0 - v96) * (float)(1.0 - v96)) * 3.0)), *(float32x2_t *)&a2, (float)(1.0 - v96) * (float)((float)(1.0 - v96) * (float)(1.0 - v96))), a4, (float)(v96 * v96) * (float)((float)(1.0 - v96) * 3.0)), a5, v96 * (float)(v96 * v96)));
            *(double *)_OWORD *v9 = a2;
            (*v9)[1] = vmul_f32(vadd_f32(*(float32x2_t *)&a2, *(float32x2_t *)&v90), (float32x2_t)0x3F0000003F000000);
            *(double *)&(*v9)[2] = v90;
            *(double *)&(*v9)[3] = v90;
            uint64_t v83 = 5;
            uint64_t v84 = 4;
            a2 = v90;
            goto LABEL_40;
          }
          if (v78 == 2)
          {
            float32x2_t v81 = vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(a3, v96 * (float)((float)((float)(1.0 - v96) * (float)(1.0 - v96)) * 3.0)), *(float32x2_t *)&a2, (float)(1.0 - v96) * (float)((float)(1.0 - v96) * (float)(1.0 - v96))), a4, (float)(v96 * v96) * (float)((float)(1.0 - v96) * 3.0)), a5, v96 * (float)(v96 * v96));
            double v82 = COERCE_DOUBLE(vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(a3, v97 * (float)((float)((float)(1.0 - v97) * (float)(1.0 - v97)) * 3.0)), *(float32x2_t *)&a2, (float)(1.0 - v97) * (float)((float)(1.0 - v97) * (float)(1.0 - v97))), a4, (float)(v97 * v97) * (float)((float)(1.0 - v97) * 3.0)), a5, v97 * (float)(v97 * v97)));
            *(double *)_OWORD *v9 = a2;
            (*v9)[1] = vmul_f32(vadd_f32(*(float32x2_t *)&a2, v81), (float32x2_t)0x3F0000003F000000);
            (*v9)[2] = v81;
            (*v9)[3] = v81;
            (*v9)[4] = vmul_f32(vadd_f32(v81, *(float32x2_t *)&v82), (float32x2_t)0x3F0000003F000000);
            *(double *)&(*v9)[5] = v82;
            *(double *)&(*v9)[6] = v82;
            uint64_t v83 = 8;
            uint64_t v84 = 7;
            a2 = v82;
LABEL_40:
            (*v9)[v84] = vmul_f32(vadd_f32(a5, *(float32x2_t *)&a2), (float32x2_t)0x3F0000003F000000);
            (*v9)[v83] = a5;
            return (v9[1] - *v9) / 3uLL;
          }
LABEL_39:
          *(double *)_OWORD *v9 = a2;
          uint64_t v83 = 2;
          uint64_t v84 = 1;
          goto LABEL_40;
        }
      }
    }
    _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v9, 3uLL);
    goto LABEL_39;
  }
  if (v93 != 5)
  {
    float32x2_t v43 = vsub_f32(a3, *(float32x2_t *)&a2);
    float v44 = vaddv_f32(vmul_f32(v43, v43));
    float32x2_t v45 = vsub_f32(a4, a3);
    int32x2_t v46 = (int32x2_t)vmul_f32(v45, v45);
    float32x2_t v47 = vsub_f32(a5, a4);
    int32x2_t v48 = (int32x2_t)vmul_f32(v47, v47);
    float32x2_t v49 = vadd_f32((float32x2_t)vzip1_s32(v46, v48), (float32x2_t)vzip2_s32(v46, v48));
    if (v49.f32[0] < v49.f32[1]) {
      v49.f32[0] = v49.f32[1];
    }
    if (v44 < v49.f32[0]) {
      float v44 = v49.f32[0];
    }
    float v50 = v44 * 0.0000999999978;
    if (characteristic == 1)
    {
      float32x2_t v85 = vmla_n_f32(*(float32x2_t *)&a2, v43, v94);
      a4 = vmla_n_f32(a4, v47, v94);
      float32x2_t v86 = vmla_n_f32(a3, v45, v94);
      float32x2_t v87 = vmla_n_f32(v85, vsub_f32(v86, v85), v94);
      a3 = vmla_n_f32(v86, vsub_f32(a4, v86), v94);
      double v88 = COERCE_DOUBLE(vmla_n_f32(v87, vsub_f32(a3, v87), v94));
      double v74 = v88;
    }
    else
    {
      if (characteristic == 2)
      {
        float32x2_t v51 = vmla_f32(*(float32x2_t *)&a2, 0, v43);
        float32x2_t v52 = vmla_f32(a3, 0, v45);
        float32x2_t v53 = vsub_f32(v52, v51);
        float32x2_t v54 = vmla_f32(v51, 0, v53);
        float32x2_t v55 = vsub_f32(vmla_f32(a4, 0, v47), v52);
        float32x2_t v56 = vsub_f32(vmla_f32(v52, 0, v55), v54);
        float32x2_t v57 = vmla_n_f32(v51, v53, v94);
        float v92 = v94;
        float32x2_t v58 = vmla_n_f32(*(float32x2_t *)&a2, v43, v92);
        float32x2_t v59 = vmla_n_f32(a3, v45, v92);
        float32x2_t v60 = vsub_f32(v59, v58);
        float32x2_t v61 = vmla_n_f32(v58, v60, v92);
        float32x2_t v62 = vsub_f32(vmla_n_f32(a4, v47, v92), v59);
        float32x2_t v63 = vsub_f32(vmla_n_f32(v59, v62, v92), v61);
        float32x2_t v64 = vmla_n_f32(v58, v60, v95);
        float v91 = v95;
        float32x2_t v65 = vmla_n_f32(*(float32x2_t *)&a2, v43, v91);
        float32x2_t v66 = vmla_n_f32(a3, v45, v91);
        float32x2_t v67 = vsub_f32(v66, v65);
        float32x2_t v68 = vadd_f32(v65, v67);
        float32x2_t v69 = vmla_n_f32(v65, v67, v91);
        float32x2_t v70 = vsub_f32(vmla_n_f32(a4, v47, v91), v66);
        float32x2_t v71 = vadd_f32(v66, v70);
        float32x2_t v72 = vsub_f32(vmla_n_f32(v66, v70, v91), v69);
        float32x2_t v73 = vadd_f32(v69, v72);
        double v74 = COERCE_DOUBLE(vmla_n_f32(v69, v72, v91));
        float32x2_t v75 = vadd_f32(v68, vsub_f32(v71, v68));
        float32x2_t v76 = vadd_f32(a5, vmla_f32(vmla_f32(vmul_f32(a3, 0), 0, *(float32x2_t *)&a2), 0, a4));
LABEL_44:
        return (v9[1] - *v9) / 3uLL;
      }
      double v74 = a2;
    }
    float32x2_t v73 = a3;
    float32x2_t v75 = a4;
    float32x2_t v76 = a5;
    goto LABEL_44;
  }
  __asm { FMOV            V1.2S, #0.25 }
  float32x2_t v16 = vmul_f32(vadd_f32(a5, vadd_f32(a4, vadd_f32(*(float32x2_t *)&a2, a3))), _D1);
  _ZNSt3__16vectorIDv2_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v9, 3uLL);
  (*v9)[2] = v16;
  (*v9)[1] = v16;
  *_OWORD *v9 = v16;
  return (v9[1] - *v9) / 3uLL;
}

unint64_t geom_cubic_bezier_fit_with_quadratic_beziers_2d(uint64_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4, float64x2_t a5)
{
  uint64_t v107 = *MEMORY[0x263EF8340];
  float64x2_t v5 = (float64x2_t **)geom::collection_to_vector<float>(a1);
  int v100 = 0;
  v5[1] = *v5;
  if (v100 == 3)
  {
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v5, 3uLL);
    float64x2_t v13 = *v5;
    float64x2_t v14 = (float64x2_t)vdupq_n_s64(0x3FC3333333333333uLL);
    float64x2_t v15 = (float64x2_t)vdupq_n_s64(0x3FEE666666666666uLL);
    float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x3FA999999999999AuLL);
    float64x2_t v17 = vmlaq_f64(vmlaq_f64(vmulq_f64(vsubq_f64(a3, a4), v14), v15, a2), v16, a5);
    _OWORD v13[2] = vmlaq_f64(vmlaq_f64(vmulq_f64(vsubq_f64(a4, a3), v14), v16, a2), v15, a5);
    __asm { FMOV            V3.2D, #-0.25 }
    float64x2_t v19 = vmulq_f64(vaddq_f64(a2, a5), _Q3);
    __asm { FMOV            V3.2D, #0.75 }
    *float64x2_t v13 = v17;
    v13[1] = vmlaq_f64(v19, _Q3, vaddq_f64(a3, a4));
    return (v5[1] - *v5) / 3uLL;
  }
  if (v100 == 4)
  {
    float64x2_t v21 = vsubq_f64(a5, a2);
    int64x2_t v22 = (int64x2_t)vmulq_f64(vsubq_f64(a3, a2), v21);
    float64x2_t v23 = vaddq_f64((float64x2_t)v22, (float64x2_t)vdupq_laneq_s64(v22, 1));
    int64x2_t v24 = (int64x2_t)vmulq_f64(vsubq_f64(a4, a2), v21);
    float64x2_t v25 = vaddq_f64((float64x2_t)v24, (float64x2_t)vdupq_laneq_s64(v24, 1));
    int64x2_t v26 = (int64x2_t)vmulq_f64(v21, v21);
    float64x2_t v27 = vaddq_f64((float64x2_t)v26, (float64x2_t)vdupq_laneq_s64(v26, 1));
    __asm { FMOV            V3.2D, #0.5 }
    float64x2_t v92 = _Q3;
    if (_NF
      || (vmovn_s64(vcgtq_f64(v25, v27)).u8[0] & 1) != 0
      || (vmovn_s64(vcgtq_f64(v23, v27)).u8[0] & 1) != 0
      || v25.f64[0] < 0.0)
    {
      double v29 = vdivq_f64(v23, v27).f64[0];
      double v30 = vdivq_f64(v25, v27).f64[0];
      double v31 = 3.0 * v29;
      double v32 = vmlad_n_f64(6.0 * v30, -12.0, v29);
      double v33 = vmlad_n_f64(-9.0 * v30, 9.0, v29) + 3.0;
      if (fabs(v33) <= 0.000001)
      {
        if (fabs(v32) > 0.000001)
        {
          double v105 = -v31 / v32;
          uint64_t v38 = 1;
          goto LABEL_29;
        }
      }
      else
      {
        double v34 = v31 * (v33 * -4.0) + v32 * v32;
        if (v34 >= 0.0)
        {
          double v35 = 1.0;
          if (v32 < 0.0) {
            double v35 = -1.0;
          }
          double v36 = (v32 + v35 * sqrt(v34)) * -0.5;
          double v37 = v31 / v36;
          double v105 = v36 / v33;
          double v106 = v37;
          if (v37 < v36 / v33)
          {
            double v105 = v37;
            double v106 = v36 / v33;
          }
          uint64_t v38 = 2;
          if (v34 <= 0.0) {
            uint64_t v38 = 1;
          }
LABEL_29:
          uint64_t v73 = 0;
          unsigned __int8 v74 = 0;
          do
          {
            double v75 = *(&v105 + v73);
            if (v75 >= 0.0 && v75 <= 1.0) {
              *(&v103 + v74++) = v75;
            }
            ++v73;
          }
          while (v38 != v73);
          _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v5, 3 * v74 + 3);
          if (v74 == 1)
          {
            float64x2_t v82 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a3, v103 * ((1.0 - v103) * (1.0 - v103) * 3.0)), a2, (1.0 - v103) * ((1.0 - v103) * (1.0 - v103))), a4, v103 * v103 * ((1.0 - v103) * 3.0)), a5, v103 * (v103 * v103));
            *void *v5 = a2;
            float64x2_t v79 = v92;
            (*v5)[1] = vmulq_f64(vaddq_f64(a2, v82), v92);
            (*v5)[2] = v82;
            (*v5)[3] = v82;
            uint64_t v80 = 5;
            uint64_t v81 = 4;
            goto LABEL_41;
          }
          if (v74 == 2)
          {
            float64x2_t v77 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a3, v103 * ((1.0 - v103) * (1.0 - v103) * 3.0)), a2, (1.0 - v103) * ((1.0 - v103) * (1.0 - v103))), a4, v103 * v103 * ((1.0 - v103) * 3.0)), a5, v103 * (v103 * v103));
            float64x2_t v78 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a3, v104 * ((1.0 - v104) * (1.0 - v104) * 3.0)), a2, (1.0 - v104) * ((1.0 - v104) * (1.0 - v104))), a4, v104 * v104 * ((1.0 - v104) * 3.0)), a5, v104 * (v104 * v104));
            *void *v5 = a2;
            float64x2_t v79 = v92;
            (*v5)[1] = vmulq_f64(vaddq_f64(a2, v77), v92);
            (*v5)[2] = v77;
            (*v5)[3] = v77;
            (*v5)[4] = vmulq_f64(vaddq_f64(v77, v78), v92);
            (*v5)[5] = v78;
            (*v5)[6] = v78;
            uint64_t v80 = 8;
            uint64_t v81 = 7;
            float64x2_t v82 = v78;
LABEL_41:
            (*v5)[v81] = vmulq_f64(vaddq_f64(a5, v82), v79);
            (*v5)[v80] = a5;
            return (v5[1] - *v5) / 3uLL;
          }
LABEL_40:
          float64x2_t v79 = v92;
          float64x2_t v82 = a2;
          *void *v5 = a2;
          uint64_t v80 = 2;
          uint64_t v81 = 1;
          goto LABEL_41;
        }
      }
    }
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v5, 3uLL);
    goto LABEL_40;
  }
  float64x2_t v7 = a2;
  if (v100 != 5)
  {
    float64x2_t v39 = vsubq_f64(a3, a2);
    double v40 = vaddvq_f64(vmulq_f64(v39, v39));
    float64x2_t v41 = vsubq_f64(a4, a3);
    int64x2_t v42 = (int64x2_t)vmulq_f64(v41, v41);
    float64x2_t v43 = vsubq_f64(a5, a4);
    int64x2_t v44 = (int64x2_t)vmulq_f64(v43, v43);
    float64x2_t v45 = vaddq_f64((float64x2_t)vzip1q_s64(v42, v44), (float64x2_t)vzip2q_s64(v42, v44));
    if (v45.f64[0] < v45.f64[1]) {
      v45.f64[0] = v45.f64[1];
    }
    if (v40 >= v45.f64[0]) {
      double v46 = v40;
    }
    else {
      double v46 = v45.f64[0];
    }
    double v47 = v46 * 0.0001;
    if (characteristic == 1)
    {
      float64x2_t v83 = vmlaq_n_f64(a2, v39, v101);
      float64x2_t v84 = vmlaq_n_f64(a4, v43, v101);
      float64x2_t v85 = vmlaq_n_f64(a3, v41, v101);
      __n128 v86 = (__n128)vmlaq_n_f64(v83, vsubq_f64(v85, v83), v101);
      a3 = vmlaq_n_f64(v85, vsubq_f64(v84, v85), v101);
      a4 = v84;
      float64x2_t v94 = vmlaq_n_f64((float64x2_t)v86, vsubq_f64(a3, (float64x2_t)v86), v101);
      float64x2_t v7 = v94;
    }
    else if (characteristic == 2)
    {
      float64x2_t v48 = vmlaq_f64(a2, (float64x2_t)0, v39);
      float64x2_t v49 = vmlaq_f64(a3, (float64x2_t)0, v41);
      float64x2_t v91 = v43;
      float64x2_t v93 = v41;
      float64x2_t v50 = vsubq_f64(v49, v48);
      float64x2_t v51 = vmlaq_f64(v48, (float64x2_t)0, v50);
      float64x2_t v52 = vsubq_f64(vmlaq_f64(a4, (float64x2_t)0, v43), v49);
      float64x2_t v53 = vsubq_f64(vmlaq_f64(v49, (float64x2_t)0, v52), v51);
      float64x2_t v54 = vmlaq_n_f64(v48, v50, v101);
      double v89 = v101;
      float64x2_t v90 = v39;
      float64x2_t v55 = vmlaq_n_f64(a2, v90, v89);
      float64x2_t v56 = vmlaq_n_f64(a3, v93, v89);
      float64x2_t v57 = vsubq_f64(v56, v55);
      float64x2_t v58 = vmlaq_n_f64(v55, v57, v89);
      float64x2_t v59 = vsubq_f64(vmlaq_n_f64(a4, v91, v89), v56);
      float64x2_t v60 = vsubq_f64(vmlaq_n_f64(v56, v59, v89), v58);
      float64x2_t v61 = vmlaq_n_f64(v55, v57, v102);
      double v88 = v102;
      float64x2_t v62 = vmlaq_n_f64(a2, v90, v88);
      float64x2_t v63 = vmlaq_n_f64(a3, v93, v88);
      float64x2_t v64 = vsubq_f64(v63, v62);
      float64x2_t v65 = vaddq_f64(v62, v64);
      float64x2_t v66 = vmlaq_n_f64(v62, v64, v88);
      float64x2_t v67 = vsubq_f64(vmlaq_n_f64(a4, v91, v88), v63);
      float64x2_t v68 = vaddq_f64(v63, v67);
      float64x2_t v69 = vsubq_f64(vmlaq_n_f64(v63, v67, v88), v66);
      float64x2_t v70 = vaddq_f64(v66, v69);
      float64x2_t v7 = vmlaq_n_f64(v66, v69, v88);
      __n128 v71 = (__n128)vaddq_f64(v65, vsubq_f64(v68, v65));
      float64x2_t v72 = vaddq_f64(a5, vmlaq_f64(vmlaq_f64(vmulq_f64(a3, (float64x2_t)0), (float64x2_t)0, a2), (float64x2_t)0, a4));
LABEL_44:
      return (v5[1] - *v5) / 3uLL;
    }
    float64x2_t v70 = a3;
    __n128 v71 = (__n128)a4;
    float64x2_t v72 = a5;
    goto LABEL_44;
  }
  __asm { FMOV            V1.2D, #0.25 }
  float64x2_t v99 = vmulq_f64(vaddq_f64(a5, vaddq_f64(a4, vaddq_f64(a2, a3))), _Q1);
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)v5, 3uLL);
  (*v5)[2] = v99;
  (*v5)[1] = v99;
  *void *v5 = v99;
  return (v5[1] - *v5) / 3uLL;
}

uint64_t geom_intersect_ray_quadratic_bezier_2f(float *a1, float *a2, float32x2_t a3, double a4, double a5, double a6, double a7)
{
  unsigned __int8 v10 = 0;
  if (v9)
  {
    float64x2_t v11 = a1;
    float64x2_t v12 = a2;
    uint64_t v13 = v9;
    do
    {
      if (*v11 >= 0.0)
      {
        a2[v10] = *v12;
        a1[v10++] = *v11;
      }
      ++v12;
      ++v11;
      --v13;
    }
    while (v13);
  }
  return v10;
}

uint64_t geom_intersect_ray_quadratic_bezier_2d(double *a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, float64x2_t a7)
{
  unsigned __int8 v10 = 0;
  if (v9)
  {
    float64x2_t v11 = a1;
    float64x2_t v12 = a2;
    uint64_t v13 = v9;
    do
    {
      if (*v11 >= 0.0)
      {
        a2[v10] = *v12;
        a1[v10++] = *v11;
      }
      ++v12;
      ++v11;
      --v13;
    }
    while (v13);
  }
  return v10;
}

uint64_t geom_intersect_line_segment_quadratic_bezier_2f(float *a1, float *a2, float32x2_t a3, float32x2_t a4, double a5, double a6, double a7)
{
  unsigned __int8 v10 = 0;
  if (v9)
  {
    float64x2_t v11 = a1;
    float64x2_t v12 = a2;
    uint64_t v13 = v9;
    do
    {
      if (*v11 >= 0.0 && *v11 <= 1.0)
      {
        a2[v10] = *v12;
        a1[v10++] = *v11;
      }
      ++v12;
      ++v11;
      --v13;
    }
    while (v13);
  }
  return v10;
}

uint64_t geom_intersect_line_segment_quadratic_bezier_2d(double *a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, float64x2_t a7)
{
  unsigned __int8 v10 = 0;
  if (v9)
  {
    float64x2_t v11 = a1;
    float64x2_t v12 = a2;
    uint64_t v13 = v9;
    do
    {
      if (*v11 >= 0.0 && *v11 <= 1.0)
      {
        a2[v10] = *v12;
        a1[v10++] = *v11;
      }
      ++v12;
      ++v11;
      --v13;
    }
    while (v13);
  }
  return v10;
}

uint64_t geom_intersect_line_quadratic_bezier_2f(uint64_t a1, int a2, float *a3, double a4, double a5, double a6)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  LODWORD(v6) = vdup_lane_s32((int32x2_t)a1, 1).u32[0];
  HIDWORD(v6) = a1 ^ 0x80000000;
}

uint64_t geom_intersect_line_quadratic_bezier_2d(uint64_t a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5)
{
  v7[2] = *(double *)MEMORY[0x263EF8340];
  *(void *)&v5.f64[0] = vdupq_laneq_s64(*(int64x2_t *)a1, 1).u64[0];
  v5.f64[1] = -*(double *)a1;
}

uint64_t geom_closest_point_to_quadratic_bezier_2f(float *a1, float *a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, float32x2_t a6)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  float32x2_t v12 = vsub_f32(a5, a4);
  float32x2_t v13 = vadd_f32(v12, v12);
  float32x2_t v14 = vmla_f32(vsub_f32(a6, a4), (float32x2_t)0xC0000000C0000000, v12);
  float32x2_t v15 = vsub_f32(a4, a3);
  v33[0] = vaddv_f32(vmul_f32(v15, v13));
  v33[1] = vaddv_f32(vmul_f32(v13, v13)) + (float)(vaddv_f32(vmul_f32(v15, v14)) * 2.0);
  int32x2_t v16 = (int32x2_t)vmul_f32(v13, v14);
  int32x2_t v17 = (int32x2_t)vmul_f32(v14, v14);
  float32x2_t v34 = vmul_f32(vadd_f32((float32x2_t)vzip1_s32(v16, v17), (float32x2_t)vzip2_s32(v16, v17)), (float32x2_t)0x4000000040400000);
  uint64_t result = geom::cubic_roots<float>(v33, v32);
  if (a2)
  {
    *a2 = INFINITY;
    float v19 = 0.0;
  }
  else
  {
    float v19 = INFINITY;
  }
  if (result)
  {
    uint64_t v20 = 0;
    while (2)
    {
      while (2)
      {
        uint64_t v21 = v20;
        while (1)
        {
          float v22 = v32[v21];
          if (v22 <= 0.0 || v22 >= 1.0) {
            goto LABEL_21;
          }
          float32x2_t v24 = vsub_f32(vmla_n_f32(vmul_n_f32(vmla_n_f32(vmul_n_f32(a6, v22), a5, (float)(1.0 - v22) + (float)(1.0 - v22)), v22), a4, (float)(1.0 - v22) * (float)(1.0 - v22)), a3);
          float v25 = vaddv_f32(vmul_f32(v24, v24));
          if (!a2) {
            break;
          }
          if (v25 < *a2)
          {
            *a2 = v25;
            if (!a1) {
              goto LABEL_21;
            }
            goto LABEL_20;
          }
          if (result == ++v21)
          {
            float v19 = *a2;
            goto LABEL_26;
          }
        }
        if (v25 >= v19)
        {
          if (++v20 != result) {
            continue;
          }
          goto LABEL_26;
        }
        break;
      }
      uint64_t v21 = v20;
      float v19 = v25;
      if (a1) {
LABEL_20:
      }
        *a1 = v22;
LABEL_21:
      uint64_t v20 = v21 + 1;
      if (v21 + 1 != result) {
        continue;
      }
      break;
    }
    if (a2) {
      float v19 = *a2;
    }
  }
  else
  {
    float v19 = INFINITY;
  }
LABEL_26:
  int32x2_t v26 = (int32x2_t)vmul_f32(v15, v15);
  float32x2_t v27 = vsub_f32(a6, a3);
  int32x2_t v28 = (int32x2_t)vmul_f32(v27, v27);
  float32x2_t v29 = vadd_f32((float32x2_t)vzip1_s32(v26, v28), (float32x2_t)vzip2_s32(v26, v28));
  if (v29.f32[0] < v29.f32[1] && v29.f32[0] < v19)
  {
    float v31 = 0.0;
    if (!a2) {
      goto LABEL_35;
    }
    goto LABEL_34;
  }
  if (v29.f32[1] >= v19) {
    return result;
  }
  float v31 = 1.0;
  v29.i32[0] = v29.i32[1];
  if (a2) {
LABEL_34:
  }
    *a2 = v29.f32[0];
LABEL_35:
  if (a1) {
    *a1 = v31;
  }
  return result;
}

uint64_t geom_closest_point_to_quadratic_bezier_2d(double *a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  float64x2_t v8 = vsubq_f64(a5, a4);
  float64x2_t v9 = vsubq_f64(a6, a4);
  float64x2_t v10 = vaddq_f64(v8, v8);
  __asm { FMOV            V3.2D, #-2.0 }
  float64x2_t v15 = vmlaq_f64(v9, _Q3, v8);
  float64x2_t v33 = vsubq_f64(a4, a3);
  v39[0] = vaddvq_f64(vmulq_f64(v33, v10));
  v39[1] = vaddvq_f64(vmulq_f64(v10, v10)) + vaddvq_f64(vmulq_f64(v33, v15)) * 2.0;
  int64x2_t v16 = (int64x2_t)vmulq_f64(v10, v15);
  int64x2_t v17 = (int64x2_t)vmulq_f64(v15, v15);
  float64x2_t v40 = vmulq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v16, v17), (float64x2_t)vzip2q_s64(v16, v17)), (float64x2_t)xmmword_236F1CBA0);
  uint64_t result = geom::cubic_roots<double>(v39, v38);
  if (a2)
  {
    *a2 = INFINITY;
    double v19 = 0.0;
  }
  else
  {
    double v19 = INFINITY;
  }
  if (result)
  {
    uint64_t v20 = 0;
    while (2)
    {
      while (2)
      {
        uint64_t v21 = v20;
        while (1)
        {
          double v22 = v38[v21];
          if (v22 <= 0.0 || v22 >= 1.0) {
            goto LABEL_21;
          }
          float64x2_t v24 = vsubq_f64(vmlaq_n_f64(vmulq_n_f64(vmlaq_n_f64(vmulq_n_f64(a6, v22), a5, 1.0 - v22 + 1.0 - v22), v22), a4, (1.0 - v22) * (1.0 - v22)), a3);
          double v25 = vaddvq_f64(vmulq_f64(v24, v24));
          if (!a2) {
            break;
          }
          if (v25 < *a2)
          {
            *a2 = v25;
            if (!a1) {
              goto LABEL_21;
            }
            goto LABEL_20;
          }
          if (result == ++v21)
          {
            double v19 = *a2;
            goto LABEL_26;
          }
        }
        if (v25 >= v19)
        {
          if (++v20 != result) {
            continue;
          }
          goto LABEL_26;
        }
        break;
      }
      uint64_t v21 = v20;
      double v19 = v25;
      if (a1) {
LABEL_20:
      }
        *a1 = v22;
LABEL_21:
      uint64_t v20 = v21 + 1;
      if (v21 + 1 != result) {
        continue;
      }
      break;
    }
    float64x2_t v26 = v33;
    if (a2) {
      double v19 = *a2;
    }
  }
  else
  {
    double v19 = INFINITY;
LABEL_26:
    float64x2_t v26 = v33;
  }
  int64x2_t v27 = (int64x2_t)vmulq_f64(v26, v26);
  float64x2_t v28 = vsubq_f64(a6, a3);
  int64x2_t v29 = (int64x2_t)vmulq_f64(v28, v28);
  float64x2_t v30 = vaddq_f64((float64x2_t)vzip1q_s64(v27, v29), (float64x2_t)vzip2q_s64(v27, v29));
  if (v30.f64[0] < v30.f64[1] && v30.f64[0] < v19)
  {
    double v32 = 0.0;
    if (!a2) {
      goto LABEL_36;
    }
    goto LABEL_35;
  }
  if (v30.f64[1] >= v19) {
    return result;
  }
  double v32 = 1.0;
  v30.f64[0] = v30.f64[1];
  if (a2) {
LABEL_35:
  }
    *a2 = v30.f64[0];
LABEL_36:
  if (a1) {
    *a1 = v32;
  }
  return result;
}

uint64_t geom_intersect_ray_cubic_bezier_2f(float *a1, float *a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, double a6, float32x2_t a7, float32x2_t a8)
{
  unsigned __int8 v11 = 0;
  if (v10)
  {
    float32x2_t v12 = a1;
    float32x2_t v13 = a2;
    uint64_t v14 = v10;
    do
    {
      if (*v12 >= 0.0)
      {
        a2[v11] = *v13;
        a1[v11++] = *v12;
      }
      ++v13;
      ++v12;
      --v14;
    }
    while (v14);
  }
  return v11;
}

uint64_t geom_intersect_ray_cubic_bezier_2d(double *a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, float64x2_t a7, float64x2_t a8)
{
  unsigned __int8 v11 = 0;
  if (v10)
  {
    float32x2_t v12 = a1;
    float32x2_t v13 = a2;
    uint64_t v14 = v10;
    do
    {
      if (*v12 >= 0.0)
      {
        a2[v11] = *v13;
        a1[v11++] = *v12;
      }
      ++v13;
      ++v12;
      --v14;
    }
    while (v14);
  }
  return v11;
}

uint64_t geom_intersect_line_segment_cubic_bezier_2f(float *a1, float *a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, double a6, float32x2_t a7, float32x2_t a8)
{
  unsigned __int8 v11 = 0;
  if (v10)
  {
    float32x2_t v12 = a1;
    float32x2_t v13 = a2;
    uint64_t v14 = v10;
    do
    {
      if (*v12 >= 0.0 && *v12 <= 1.0)
      {
        a2[v11] = *v13;
        a1[v11++] = *v12;
      }
      ++v13;
      ++v12;
      --v14;
    }
    while (v14);
  }
  return v11;
}

uint64_t geom_intersect_line_segment_cubic_bezier_2d(double *a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, float64x2_t a7, float64x2_t a8)
{
  unsigned __int8 v11 = 0;
  if (v10)
  {
    float32x2_t v12 = a1;
    float32x2_t v13 = a2;
    uint64_t v14 = v10;
    do
    {
      if (*v12 >= 0.0 && *v12 <= 1.0)
      {
        a2[v11] = *v13;
        a1[v11++] = *v12;
      }
      ++v13;
      ++v12;
      --v14;
    }
    while (v14);
  }
  return v11;
}

uint64_t geom_intersect_line_cubic_bezier_2f(uint64_t a1, int a2, float *a3, float32x2_t a4, double a5, float32x2_t a6, float32x2_t a7)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  v7.i32[0] = vdup_lane_s32((int32x2_t)a1, 1).u32[0];
  v7.i32[1] = a1 ^ 0x80000000;
}

uint64_t geom_intersect_line_cubic_bezier_2d(uint64_t a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6)
{
  v8[3] = *(double *)MEMORY[0x263EF8340];
  *(void *)&v6.f64[0] = vdupq_laneq_s64(*(int64x2_t *)a1, 1).u64[0];
  v6.f64[1] = -*(double *)a1;
}

float *geom_closest_point_to_cubic_bezier_2f(float *result, float *a2, float32x2_t a3, float32x2_t a4, float32x2_t a5, float32x2_t a6, float32x2_t a7, uint64_t a8, double *a9)
{
  uint64_t v10 = result;
  uint64_t v77 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    float v16 = INFINITY;
    if (!result) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  *a2 = INFINITY;
  float v16 = 0.0;
  if (result) {
LABEL_3:
  }
    *uint64_t result = INFINITY;
LABEL_4:
  char v17 = 0;
  float32x2_t v18 = vsub_f32(a5, a4);
  float32x2_t v19 = vsub_f32(a6, a4);
  __asm { FMOV            V2.2S, #3.0 }
  float32x2_t v24 = vmul_f32(v18, _D2);
  float32x2_t v25 = vmul_f32(vmla_f32(v19, (float32x2_t)0xC0000000C0000000, v18), _D2);
  float32x2_t v26 = vmla_f32(vsub_f32(a7, a4), _D2, vsub_f32(v18, v19));
  float32x2_t v27 = vsub_f32(a4, a3);
  float32x2_t v28 = vmul_f32(v27, v24);
  float32x2_t v29 = vadd_f32(v28, (float32x2_t)vdup_lane_s32((int32x2_t)v28, 1));
  float v30 = vaddv_f32(v28);
  float v73 = v30;
  float32x2_t v31 = vmul_f32(v24, v24);
  v31.i32[0] = vadd_f32(v31, (float32x2_t)vdup_lane_s32((int32x2_t)v31, 1)).u32[0];
  int32x2_t v32 = (int32x2_t)vmul_f32(v27, v25);
  int32x2_t v33 = (int32x2_t)vmul_f32(v24, v25);
  v31.f32[1] = vaddv_f32(vmul_f32(v27, v26)) * 3.0;
  float32x2_t v34 = vmla_f32(v31, (float32x2_t)0x4040000040000000, vadd_f32((float32x2_t)vzip1_s32(v32, v33), (float32x2_t)vzip2_s32(v32, v33)));
  float32x2_t v74 = v34;
  float v35 = (float)(vaddv_f32(vmul_f32(v24, v26)) * 4.0) + (float)(vaddv_f32(vmul_f32(v25, v25)) * 2.0);
  float v75 = v35;
  int32x2_t v36 = (int32x2_t)vmul_f32(v25, v26);
  int32x2_t v37 = (int32x2_t)vmul_f32(v26, v26);
  float32x2_t v38 = vmul_f32(vadd_f32((float32x2_t)vzip1_s32(v36, v37), (float32x2_t)vzip2_s32(v36, v37)), (float32x2_t)0x4040000040A00000);
  float32x2_t v76 = v38;
  HIDWORD(v69) = vmlas_n_f32(v30, 0.2, v34.f32[0]);
  *(float *)v70.f64 = v30 + (float)(vmlas_n_f32(v34.f32[1], 4.0, v34.f32[0]) * 0.1);
  float v39 = vmuls_lane_f32(3.0, v34, 1);
  *((float *)v70.f64 + 1) = v30 + (float)((float)(v35 + vmlas_n_f32(v39, 6.0, v34.f32[0])) * 0.1);
  *(float *)&v70.f64[1] = v30
                        + (float)((float)(v38.f32[0] + (float)(vmlas_n_f32(v39, 4.0, v34.f32[0]) + (float)(v35 * 2.0)))
                                * 0.2);
  *((float *)&v70.f64[1] + 1) = v38.f32[1]
                              + (float)(v38.f32[0] + (float)(v35 + (float)(vadd_f32(v29, v34).f32[0] + v34.f32[1])));
  uint64_t v40 = 4;
  float v41 = v30;
  do
  {
    float v42 = *(float *)((char *)&v69 + v40);
    if ((float)(v41 * v42) <= 0.0) {
      ++v17;
    }
    v40 += 4;
    float v41 = v42;
  }
  while (v40 != 24);
  if (v17)
  {
    if (v17 == 1)
    {
      unsigned int v43 = 0;
      BOOL v44 = 1;
      float v45 = 0.5;
      while (1)
      {
        float v46 = 0.0;
        unint64_t v47 = 5;
        float v48 = 0.0;
        do
        {
          float v49 = *(&v73 + v47);
          float v48 = v49 + (float)(v45 * v48);
          float v46 = (float)(v45 * v46) + (float)(v49 * (float)(int)v47);
        }
        while (v47-- > 1);
        float v51 = v30 + (float)(v45 * v48);
        if (fabsf(v51) <= 0.000005) {
          break;
        }
        if (fabsf(v46) > 0.000005)
        {
          float v45 = v45 - (float)(v51 / v46);
          float v52 = 0.0;
          if (v45 < 0.0 || (float v52 = 1.0, v45 > 1.0)) {
            float v45 = v52;
          }
          BOOL v44 = v43++ < 9;
          if (v43 != 10) {
            continue;
          }
        }
        goto LABEL_28;
      }
      if (v44)
      {
        float32x2_t v53 = vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(a5, v45 * (float)((float)((float)(1.0 - v45) * (float)(1.0 - v45)) * 3.0)), a4, (float)(1.0 - v45) * (float)((float)(1.0 - v45) * (float)(1.0 - v45))), a6, (float)(v45 * v45) * (float)((float)(1.0 - v45) * 3.0)), a7, v45 * (float)(v45 * v45));
        if (result) {
          *uint64_t result = v45;
        }
        float32x2_t v54 = vsub_f32(v53, a3);
        float v55 = vaddv_f32(vmul_f32(v54, v54));
        if (a2) {
          *a2 = v55;
        }
        else {
          float v16 = v55;
        }
        goto LABEL_43;
      }
    }
LABEL_28:
    double v69 = v30;
    float64x2_t v70 = vcvtq_f64_f32(v34);
    double v71 = v35;
    float64x2_t v72 = vcvtq_f64_f32(v38);
    uint64_t result = (float *)geom::polynomial_roots((geom *)6, (uint64_t)&v69, v68, a9);
    if (!result) {
      goto LABEL_43;
    }
    uint64_t v56 = result;
    float64x2_t v57 = v68;
    do
    {
      float v58 = *v57;
      if (v58 > 0.0 && v58 < 1.0)
      {
        float32x2_t v60 = vsub_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(a5, (float)((float)((float)(1.0 - v58) * (float)(1.0 - v58)) * 3.0) * v58), a4, (float)(1.0 - v58) * (float)((float)(1.0 - v58) * (float)(1.0 - v58))), a6, (float)(v58 * v58) * (float)((float)(1.0 - v58) * 3.0)), a7, (float)(v58 * v58) * v58), a3);
        float v61 = vaddv_f32(vmul_f32(v60, v60));
        if (a2)
        {
          if (v61 < *a2)
          {
            *a2 = v61;
            float v61 = v16;
LABEL_39:
            if (v10) {
              *uint64_t v10 = v58;
            }
            float v16 = v61;
          }
        }
        else if (v61 < v16)
        {
          goto LABEL_39;
        }
      }
      ++v57;
      --v56;
    }
    while (v56);
  }
LABEL_43:
  int32x2_t v62 = (int32x2_t)vmul_f32(v27, v27);
  float32x2_t v63 = vsub_f32(a7, a3);
  int32x2_t v64 = (int32x2_t)vmul_f32(v63, v63);
  float32x2_t v65 = vadd_f32((float32x2_t)vzip1_s32(v62, v64), (float32x2_t)vzip2_s32(v62, v64));
  if (a2) {
    float v16 = *a2;
  }
  float v66 = 0.0;
  BOOL v67 = v65.f32[0] < v65.f32[1] && v65.f32[0] < v16;
  if (v67 || (float v66 = 1.0, v65.i32[0] = v65.i32[1], v65.f32[1] < v16))
  {
    if (a2) {
      *a2 = v65.f32[0];
    }
    if (v10) {
      *uint64_t v10 = v66;
    }
  }
  return result;
}

double *geom_closest_point_to_cubic_bezier_2d(double *result, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, float64x2_t a7, uint64_t a8, double *a9)
{
  uint64_t v10 = result;
  float64x2_t v11 = a7;
  uint64_t v82 = *MEMORY[0x263EF8340];
  if (!a2)
  {
    double v14 = INFINITY;
    if (!result) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  *a2 = INFINITY;
  double v14 = 0.0;
  if (result) {
LABEL_3:
  }
    *uint64_t result = INFINITY;
LABEL_4:
  char v15 = 0;
  float64x2_t v16 = vsubq_f64(a5, a4);
  float64x2_t v17 = vsubq_f64(a6, a4);
  float64x2_t v18 = vsubq_f64(a7, a4);
  __asm { FMOV            V16.2D, #3.0 }
  float64x2_t v23 = vmulq_f64(v16, _Q16);
  __asm { FMOV            V4.2D, #-2.0 }
  float64x2_t v25 = vmulq_f64(vmlaq_f64(v17, _Q4, v16), _Q16);
  float64x2_t v26 = vmlaq_f64(v18, _Q16, vsubq_f64(v16, v17));
  float64x2_t v27 = vsubq_f64(a4, a3);
  int64x2_t v28 = (int64x2_t)vmulq_f64(v27, v23);
  float64x2_t v29 = vaddq_f64((float64x2_t)v28, (float64x2_t)vdupq_laneq_s64(v28, 1));
  double v30 = vaddvq_f64((float64x2_t)v28);
  double v74 = v30;
  int64x2_t v31 = (int64x2_t)vmulq_f64(v23, v23);
  v31.i64[0] = *(_OWORD *)&vaddq_f64((float64x2_t)v31, (float64x2_t)vdupq_laneq_s64(v31, 1));
  int64x2_t v32 = (int64x2_t)vmulq_f64(v27, v25);
  int64x2_t v33 = (int64x2_t)vmulq_f64(v23, v25);
  *(double *)&v31.i64[1] = vaddvq_f64(vmulq_f64(v27, v26)) * 3.0;
  float64x2_t v34 = vmlaq_f64((float64x2_t)v31, (float64x2_t)xmmword_236F1CBB0, vaddq_f64((float64x2_t)vzip1q_s64(v32, v33), (float64x2_t)vzip2q_s64(v32, v33)));
  float64x2_t v75 = v34;
  double v35 = vaddvq_f64(vmulq_f64(v23, v26)) * 4.0 + vaddvq_f64(vmulq_f64(v25, v25)) * 2.0;
  double v76 = v35;
  int64x2_t v36 = (int64x2_t)vmulq_f64(v25, v26);
  int64x2_t v37 = (int64x2_t)vmulq_f64(v26, v26);
  float64x2_t v38 = vmulq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v36, v37), (float64x2_t)vzip2q_s64(v36, v37)), (float64x2_t)xmmword_236F1CBC0);
  float64x2_t v77 = v38;
  v79.f64[0] = vmlad_n_f64(v30, 0.2, v34.f64[0]);
  v79.f64[1] = v30 + vmlad_n_f64(v34.f64[1], 4.0, v34.f64[0]) * 0.1;
  v25.f64[0] = vmuld_lane_f64(3.0, v34, 1);
  double v80 = v30 + (v35 + vmlad_n_f64(v25.f64[0], 6.0, v34.f64[0])) * 0.1;
  v81.f64[0] = v30 + (v38.f64[0] + vmlad_n_f64(v25.f64[0], 4.0, v34.f64[0]) + v35 * 2.0) * 0.2;
  v81.f64[1] = v38.f64[1] + v38.f64[0] + v35 + vaddq_f64(v29, v34).f64[0] + v34.f64[1];
  uint64_t v39 = 8;
  double v40 = v30;
  do
  {
    double v41 = *(double *)((char *)&v78 + v39);
    if (v40 * v41 <= 0.0) {
      ++v15;
    }
    v39 += 8;
    double v40 = v41;
  }
  while (v39 != 48);
  if (v15)
  {
    if (v15 == 1)
    {
      unsigned int v42 = 0;
      BOOL v43 = 1;
      double v44 = 0.5;
      while (1)
      {
        double v45 = 0.0;
        unint64_t v46 = 5;
        double v47 = 0.0;
        do
        {
          double v48 = *(&v74 + v46);
          double v47 = v48 + v44 * v47;
          double v45 = v44 * v45 + v48 * (double)(int)v46;
        }
        while (v46-- > 1);
        double v50 = v30 + v44 * v47;
        if (fabs(v50) <= 1.0e-10) {
          break;
        }
        if (fabs(v45) > 1.0e-10)
        {
          double v44 = v44 - v50 / v45;
          double v51 = 0.0;
          if (v44 < 0.0 || (double v51 = 1.0, v44 > 1.0)) {
            double v44 = v51;
          }
          BOOL v43 = v42++ < 9;
          if (v42 != 10) {
            continue;
          }
        }
        goto LABEL_28;
      }
      if (v43)
      {
        float64x2_t v52 = vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a5, v44 * ((1.0 - v44) * (1.0 - v44) * 3.0)), a4, (1.0 - v44) * ((1.0 - v44) * (1.0 - v44))), a6, v44 * v44 * ((1.0 - v44) * 3.0)), v11, v44 * (v44 * v44));
        if (result) {
          *uint64_t result = v44;
        }
        float64x2_t v53 = vsubq_f64(v52, a3);
        double v54 = vaddvq_f64(vmulq_f64(v53, v53));
        if (a2) {
          *a2 = v54;
        }
        else {
          double v14 = v54;
        }
        goto LABEL_45;
      }
    }
LABEL_28:
    float64x2_t v69 = v27;
    float64x2_t v70 = a3;
    float64x2_t v71 = v11;
    float64x2_t v72 = a4;
    double v78 = v30;
    float64x2_t v79 = v34;
    double v80 = v35;
    float64x2_t v81 = v38;
    uint64_t result = (double *)geom::polynomial_roots((geom *)6, (uint64_t)&v78, v73, a9);
    if (!result)
    {
      float64x2_t v11 = v71;
      float64x2_t v27 = v69;
      a3 = v70;
      goto LABEL_45;
    }
    uint64_t v55 = result;
    uint64_t v56 = v73;
    float64x2_t v11 = v71;
    float64x2_t v27 = v69;
    a3 = v70;
    do
    {
      double v57 = *v56;
      if (*v56 > 0.0 && v57 < 1.0)
      {
        float64x2_t v59 = vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(a5, v57 * ((1.0 - v57) * (1.0 - v57) * 3.0)), v72, (1.0 - v57) * ((1.0 - v57) * (1.0 - v57))), a6, v57 * v57 * ((1.0 - v57) * 3.0)), v71, v57 * (v57 * v57)), v70);
        double v60 = vaddvq_f64(vmulq_f64(v59, v59));
        if (a2)
        {
          if (v60 < *a2)
          {
            *a2 = v60;
            double v60 = v14;
LABEL_39:
            if (v10) {
              *uint64_t v10 = v57;
            }
            double v14 = v60;
          }
        }
        else if (v60 < v14)
        {
          goto LABEL_39;
        }
      }
      ++v56;
      --v55;
    }
    while (v55);
  }
LABEL_45:
  int64x2_t v61 = (int64x2_t)vmulq_f64(v27, v27);
  float64x2_t v62 = vsubq_f64(v11, a3);
  int64x2_t v63 = (int64x2_t)vmulq_f64(v62, v62);
  float64x2_t v64 = vaddq_f64((float64x2_t)vzip1q_s64(v61, v63), (float64x2_t)vzip2q_s64(v61, v63));
  if (a2) {
    double v14 = *a2;
  }
  double v65 = 0.0;
  BOOL v66 = v64.f64[0] < v64.f64[1] && v64.f64[0] < v14;
  if (v66 || (double v65 = 1.0, v64.f64[0] = v64.f64[1], v64.f64[1] < v14))
  {
    if (a2) {
      *a2 = v64.f64[0];
    }
    if (v10) {
      *uint64_t v10 = v65;
    }
  }
  return result;
}

double geom_approximate_closest_point_to_cubic_bezier_2f(unsigned int a1, float *a2, float *a3, float32x2_t a4, float32x2_t a5, float32x2_t a6, float32x2_t a7, float32x2_t a8)
{
  float32x2_t v8 = vsub_f32(a5, a4);
  int32x2_t v9 = (int32x2_t)vmul_f32(v8, v8);
  float32x2_t v10 = vsub_f32(a8, a4);
  int32x2_t v11 = (int32x2_t)vmul_f32(v10, v10);
  float32x2_t v12 = vsqrt_f32(vadd_f32((float32x2_t)vzip1_s32(v9, v11), (float32x2_t)vzip2_s32(v9, v11)));
  int32x2_t v13 = vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v12, 1), v12);
  _NF = v12.f32[0] < v12.f32[1];
  if (v12.f32[0] >= v12.f32[1]) {
    float v15 = v12.f32[1];
  }
  else {
    float v15 = v12.f32[0];
  }
  float v16 = 1.0;
  float v17 = 0.0;
  if (_NF) {
    float v16 = 0.0;
  }
  if (a3) {
    *a3 = v15;
  }
  else {
    float v17 = v15;
  }
  int8x8_t v18 = (int8x8_t)vdup_lane_s32(v13, 0);
  if (a2) {
    *a2 = v16;
  }
  float32x2_t v19 = (float32x2_t)vbsl_s8(v18, (int8x8_t)a5, (int8x8_t)a8);
  if (a1 >= 3)
  {
    float32x2_t v20 = vsub_f32(a6, a4);
    float32x2_t v21 = vsub_f32(a7, a4);
    __asm { FMOV            V18.2S, #3.0 }
    float32x2_t v26 = vmul_f32(vsub_f32(v20, v8), _D18);
    float32x2_t v27 = vmul_f32(vadd_f32(v21, vmla_f32(v8, (float32x2_t)0xC0000000C0000000, v20)), _D18);
    float32x2_t v28 = vmla_f32(vsub_f32(v10, v8), _D18, vsub_f32(v20, v21));
    for (int i = 2; a1 != i; ++i)
    {
      float v30 = (float)(1.0 / (float)((float)a1 + -1.0)) * (float)(i - 1);
      float32x2_t v31 = vmla_n_f32(v8, vmla_n_f32(v26, vmla_n_f32(v27, v28, v30), v30), v30);
      float v32 = vaddv_f32(vmul_f32(v31, v31));
      if (a3)
      {
        if (v32 < *a3)
        {
          *a3 = v32;
          float v32 = v17;
LABEL_17:
          float32x2_t v19 = vadd_f32(v31, a4);
          if (a2) {
            *a2 = v30;
          }
          float v17 = v32;
        }
      }
      else if (v32 < v17)
      {
        goto LABEL_17;
      }
    }
  }
  return *(double *)&v19;
}

double geom_approximate_closest_point_to_cubic_bezier_2d(unsigned int a1, double *a2, double *a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, float64x2_t a7, float64x2_t a8)
{
  float64x2_t v8 = vsubq_f64(a5, a4);
  int64x2_t v9 = (int64x2_t)vmulq_f64(v8, v8);
  float64x2_t v10 = vsubq_f64(a8, a4);
  int64x2_t v11 = (int64x2_t)vmulq_f64(v10, v10);
  float64x2_t v12 = vsqrtq_f64(vaddq_f64((float64x2_t)vzip1q_s64(v9, v11), (float64x2_t)vzip2q_s64(v9, v11)));
  uint64_t v13 = vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v12, 1), v12).u64[0];
  _NF = v12.f64[0] < v12.f64[1];
  if (v12.f64[0] >= v12.f64[1]) {
    double v15 = v12.f64[1];
  }
  else {
    double v15 = v12.f64[0];
  }
  double v16 = 1.0;
  double v17 = 0.0;
  if (_NF) {
    double v16 = 0.0;
  }
  if (a3) {
    *a3 = v15;
  }
  else {
    double v17 = v15;
  }
  int8x16_t v18 = (int8x16_t)vdupq_lane_s64(v13, 0);
  if (a2) {
    *a2 = v16;
  }
  *(void *)&double v19 = vbslq_s8(v18, (int8x16_t)a5, (int8x16_t)a8).u64[0];
  if (a1 >= 3)
  {
    float64x2_t v20 = vsubq_f64(a6, a4);
    float64x2_t v21 = vsubq_f64(a7, a4);
    __asm { FMOV            V18.2D, #3.0 }
    float64x2_t v26 = vmulq_f64(vsubq_f64(v20, v8), _Q18);
    __asm { FMOV            V3.2D, #-2.0 }
    float64x2_t v28 = vmulq_f64(vaddq_f64(v21, vmlaq_f64(v8, _Q3, v20)), _Q18);
    float64x2_t v29 = vmlaq_f64(vsubq_f64(v10, v8), _Q18, vsubq_f64(v20, v21));
    double v30 = 1.0 / ((double)a1 + -1.0);
    unsigned int v31 = a1 - 2;
    double v32 = 1.0;
    do
    {
      float64x2_t v33 = vmlaq_n_f64(v8, vmlaq_n_f64(v26, vmlaq_n_f64(v28, v29, v30 * v32), v30 * v32), v30 * v32);
      double v34 = vaddvq_f64(vmulq_f64(v33, v33));
      if (a3)
      {
        if (v34 < *a3)
        {
          *a3 = v34;
          double v34 = v17;
LABEL_17:
          *(void *)&double v19 = *(_OWORD *)&vaddq_f64(v33, a4);
          if (a2) {
            *a2 = v30 * v32;
          }
          double v17 = v34;
        }
      }
      else if (v34 < v17)
      {
        goto LABEL_17;
      }
      double v32 = v32 + 1.0;
      --v31;
    }
    while (v31);
  }
  return v19;
}

double geom_tight_bbox_of_quadratic_bezier_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  return v4;
}

float32x2_t *geom::anonymous namespace'::compute_tight_bbox_of_quadratic_bezier_2<float>(float32x2_t *result, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  char v4 = 0;
  float32x2_t v5 = vminnm_f32(a2, a4);
  float32x2_t v6 = vmaxnm_f32(a2, a4);
  *uint64_t result = v5;
  result[1] = v6;
  float32x2_t v7 = vsub_f32(vmaxnm_f32(a3, v6), vminnm_f32(v5, a3));
  float v8 = sqrtf(vaddv_f32(vmul_f32(v7, v7))) * 0.000001;
  char v9 = 1;
  do
  {
    char v10 = v9;
    float32x2_t v25 = a4;
    float v11 = *(float *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
    float32x2_t v26 = a3;
    float v12 = *(float *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
    float32x2_t v27 = a2;
    float v13 = *(float *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
    float v14 = v13 + (float)(v11 + (float)(v12 * -2.0));
    if (fabsf(v14) > 0.00001)
    {
      float v15 = (float)(v13 - v12) / v14;
      if (v15 > 0.0 && v15 < 1.0)
      {
        float v17 = (float)((float)(v12 * (float)(v15 * (float)((float)(1.0 - v15) + (float)(1.0 - v15))))
                    + (float)((float)((float)(1.0 - v15) * (float)(1.0 - v15)) * v13))
            + (float)((float)(v15 * v15) * v11);
        int8x16_t v18 = (float *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
        double v19 = (float *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
        float32x2_t v24 = v5;
        float v20 = *v19;
        if ((float)(v17 - v8) < *v19) {
          float v20 = v17 - v8;
        }
        *double v19 = v20;
        float32x2_t v5 = v24;
        *uint64_t result = v24;
        float32x2_t v23 = v6;
        float v21 = *v18;
        float v22 = v17 + v8;
        if (*v18 < v22) {
          float v21 = v22;
        }
        *int8x16_t v18 = v21;
        float32x2_t v6 = v23;
        result[1] = v23;
      }
    }
    char v9 = 0;
    char v4 = 1;
  }
  while ((v10 & 1) != 0);
  return result;
}

float64_t geom_tight_bbox_of_quadratic_bezier_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3)
{
  return v4.f64[0];
}

float64x2_t *geom::anonymous namespace'::compute_tight_bbox_of_quadratic_bezier_2<double>(float64x2_t *result, float64x2_t a2, float64x2_t a3, float64x2_t a4)
{
  char v4 = 0;
  float64x2_t v5 = vminnmq_f64(a2, a4);
  float64x2_t v6 = vmaxnmq_f64(a2, a4);
  *uint64_t result = v5;
  result[1] = v6;
  float64x2_t v7 = vsubq_f64(vmaxnmq_f64(a3, v6), vminnmq_f64(v5, a3));
  double v8 = sqrt(vaddvq_f64(vmulq_f64(v7, v7))) * 0.000001;
  char v9 = 1;
  do
  {
    char v10 = v9;
    float64x2_t v25 = a4;
    double v11 = *(double *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
    float64x2_t v26 = a3;
    double v12 = *(double *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
    float64x2_t v27 = a2;
    double v13 = *(double *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
    double v14 = v13 + v11 + v12 * -2.0;
    if (fabs(v14) > 0.000001)
    {
      double v15 = (v13 - v12) / v14;
      if (v15 > 0.0 && v15 < 1.0)
      {
        double v17 = v12 * (v15 * (1.0 - v15 + 1.0 - v15)) + (1.0 - v15) * (1.0 - v15) * v13 + v15 * v15 * v11;
        int8x16_t v18 = (double *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
        double v19 = (double *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
        float64x2_t v24 = v5;
        double v20 = *v19;
        if (v17 - v8 < *v19) {
          double v20 = v17 - v8;
        }
        *double v19 = v20;
        float64x2_t v5 = v24;
        *uint64_t result = v24;
        float64x2_t v23 = v6;
        double v21 = *v18;
        double v22 = v8 + v17;
        if (*v18 < v22) {
          double v21 = v22;
        }
        *int8x16_t v18 = v21;
        float64x2_t v6 = v23;
        result[1] = v23;
      }
    }
    char v9 = 0;
    char v4 = 1;
  }
  while ((v10 & 1) != 0);
  return result;
}

double geom_oriented_bounding_box_of_quadratic_bezier_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  return v4;
}

float32x2_t *geom::anonymous namespace'::compute_oriented_bbox_of_quadratic_bezier_2<float>(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t a5, float32x2_t a6, float32x2_t a7)
{
  float32x2_t v11 = a5;
  float32x2_t v12 = vsub_f32(a7, a5);
  float32x2_t v13 = vmul_f32(v12, v12);
  v13.f32[0] = sqrtf(vaddv_f32(v13));
  float32x2_t v27 = (float32x2_t)vdup_n_s32(0x7F800000u);
  float32x2_t v28 = (float32x2_t)0x7F0000007FLL;
  if (fabsf(v13.f32[0]) <= 0.00000011921)
  {
    float32x2_t v15 = (float32x2_t)0x3F80000000000000;
    float32x2_t v20 = (float32x2_t)1065353216;
    float32x2_t v11 = 0;
  }
  else
  {
    float32x2_t v14 = (float32x2_t)vdup_lane_s32((int32x2_t)v13, 0);
    float32x2_t v26 = vdiv_f32(v12, v14);
    v14.f32[0] = -v26.f32[1];
    float32x2_t v15 = (float32x2_t)vzip1_s32((int32x2_t)v14, (int32x2_t)v26);
    float32x2_t v16 = vsub_f32(a6, v11);
    int32x2_t v17 = (int32x2_t)vmul_f32(v16, v26);
    int32x2_t v18 = (int32x2_t)vmul_f32(v16, v15);
    float32x2_t v20 = v26;
  }
  float32x2_t v21 = v27;
  float32x2_t v22 = v28;
  float32x2_t v23 = vmul_f32(vadd_f32(v27, v28), (float32x2_t)0x3F0000003F000000);
  *a1 = vadd_f32(v11, vmla_lane_f32(vmul_n_f32(v20, v23.f32[0]), v15, v23, 1));
  float32x2_t v24 = vmul_f32(vsub_f32(v22, v21), (float32x2_t)vdup_n_s32(0x3F0000A8u));
  *a4 = v24;
  if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v24, 1), v24).u8[0])
  {
    *a4 = (float32x2_t)vrev64_s32((int32x2_t)v24);
    float32x2_t v25 = vneg_f32(v15);
    float32x2_t v15 = v20;
    float32x2_t v20 = v25;
  }
  *a2 = v20;
  *a3 = v15;
  return result;
}

float64_t geom_oriented_bounding_box_of_quadratic_bezier_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3)
{
  return v4.f64[0];
}

float64x2_t *geom::anonymous namespace'::compute_oriented_bbox_of_quadratic_bezier_2<double>(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, int64x2_t *a4, float64x2_t a5, float64x2_t a6, float64x2_t a7)
{
  float64x2_t v12 = vsubq_f64(a7, a5);
  double v13 = sqrt(vaddvq_f64(vmulq_f64(v12, v12)));
  float64x2_t v36 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  float64x2_t v37 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  if (fabs(v13) <= 2.22044605e-16)
  {
    float64x2_t v21 = (float64x2_t)xmmword_236F14160;
    float64x2_t v20 = (float64x2_t)xmmword_236F14150;
    float64x2_t v22 = 0uLL;
  }
  else
  {
    int64x2_t v14 = vdupq_lane_s64(*(uint64_t *)&v13, 0);
    int64x2_t v15 = (int64x2_t)vdivq_f64(v12, (float64x2_t)v14);
    *(double *)v14.i64 = -*(double *)&v15.i64[1];
    float64x2_t v33 = (float64x2_t)vzip1q_s64(v14, v15);
    int64x2_t v34 = v15;
    float64x2_t v16 = vsubq_f64(a6, a5);
    int64x2_t v17 = (int64x2_t)vmulq_f64(v16, (float64x2_t)v15);
    int64x2_t v18 = (int64x2_t)vmulq_f64(v16, v33);
    float64x2_t v35 = a5;
    float64x2_t v21 = v33;
    float64x2_t v20 = (float64x2_t)v34;
    float64x2_t v22 = v35;
  }
  float64x2_t v23 = v36;
  float64x2_t v24 = v37;
  __asm { FMOV            V3.2D, #0.5 }
  float64x2_t v30 = vmulq_f64(vaddq_f64(v36, v37), _Q3);
  *a1 = vaddq_f64(v22, vmlaq_laneq_f64(vmulq_n_f64(v20, v30.f64[0]), v21, v30, 1));
  int64x2_t v31 = (int64x2_t)vmulq_f64(vsubq_f64(v24, v23), (float64x2_t)vdupq_n_s64(0x3FE0000218DEF417uLL));
  *a4 = v31;
  if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64(v31, 1), (float64x2_t)v31)).u8[0])
  {
    *(int8x16_t *)a4 = vextq_s8((int8x16_t)v31, (int8x16_t)v31, 8uLL);
    float64x2_t v32 = vnegq_f64(v21);
    float64x2_t v21 = v20;
    float64x2_t v20 = v32;
  }
  *a2 = v20;
  *a3 = v21;
  return result;
}

double geom_oriented_bounding_box_matrix_of_quadratic_bezier_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3)
{
  float32x2_t v13 = 0;
  float32x2_t v11 = 0;
  float32x2_t v12 = 0;
  float32x2_t v10 = 0;
  *(float32x2_t *)v3.f32 = v12;
  v3.i32[2] = 0;
  *(void *)&double result = vmulq_n_f32(v3, v10.f32[0]).u64[0];
  __asm { FMOV            V2.4S, #1.0 }
  return result;
}

float64_t geom_oriented_bounding_box_matrix_of_quadratic_bezier_2d@<D0>(uint64_t a1@<X8>, float64x2_t a2@<Q0>, float64x2_t a3@<Q1>, float64x2_t a4@<Q2>)
{
  float64x2_t v16 = 0u;
  float64x2_t v14 = 0u;
  float64x2_t v15 = 0u;
  float64x2_t v13 = 0u;
  float64x2_t v5 = v13;
  float64x2_t v6 = vmulq_f64(v13, (float64x2_t)0);
  *(float64x2_t *)a1 = vmulq_n_f64(v15, v13.f64[0]);
  *(float64x2_t *)(a1 + 16) = v6;
  *(float64x2_t *)(a1 + 32) = vmulq_laneq_f64(v14, v5, 1);
  *(float64x2_t *)(a1 + 48) = vmulq_laneq_f64((float64x2_t)0, v5, 1);
  float64_t result = v16.f64[0];
  __asm { FMOV            V1.2D, #1.0 }
  *(float64x2_t *)(a1 + 64) = v16;
  *(_OWORD *)(a1 + 80) = _Q1;
  return result;
}

double geom_tight_bbox_of_cubic_bezier_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  return v5;
}

float32x2_t *geom::anonymous namespace'::compute_tight_bbox_of_cubic_bezier_2<float>(float32x2_t *result, float32x2_t a2, float32x2_t a3, float32x2_t a4, float32x2_t a5)
{
  uint64_t v5 = 0;
  uint64_t v59 = *MEMORY[0x263EF8340];
  float32x2_t v6 = vminnm_f32(a2, a5);
  float32x2_t v7 = vmaxnm_f32(a2, a5);
  *float64_t result = v6;
  result[1] = v7;
  float32x2_t v8 = vsub_f32(vmaxnm_f32(vmaxnm_f32(a3, v7), a4), vminnm_f32(vminnm_f32(a3, v6), a4));
  float v9 = sqrtf(vaddv_f32(vmul_f32(v8, v8))) * 0.000001;
  __asm { FMOV            V16.2S, #3.0 }
  int32x2_t v14 = (int32x2_t)vmul_f32(vsub_f32(a3, a2), _D16);
  __asm { FMOV            V19.2S, #6.0 }
  int32x2_t v16 = (int32x2_t)vmul_f32(vadd_f32(vmla_f32(a2, (float32x2_t)0xC0000000C0000000, a3), a4), _D19);
  int32x2_t v17 = (int32x2_t)vmul_f32(vmla_f32(vsub_f32(a5, a2), _D16, vsub_f32(a3, a4)), _D16);
  int32x2_t v18 = vzip1_s32(v14, v16);
  int32x2_t v19 = vzip2_s32(v16, v17);
  v17.i32[1] = v14.i32[1];
  v56[0] = v18;
  v56[1] = v17;
  v56[2] = v19;
  char v20 = 1;
  do
  {
    char v21 = v20;
    float64x2_t v22 = (float *)v56 + 3 * v5;
    float v23 = v22[1];
    float v24 = v22[2];
    float v25 = *v22;
    if (fabsf(v24) <= 0.00001)
    {
      if (fabsf(v23) <= 0.00001) {
        goto LABEL_30;
      }
      float v57 = (float)-v25 / v23;
      uint64_t v30 = 1;
    }
    else
    {
      float v26 = (float)((float)(v24 * -4.0) * v25) + (float)(v23 * v23);
      if (v26 < 0.0) {
        goto LABEL_30;
      }
      if (v23 >= 0.0) {
        float v27 = 1.0;
      }
      else {
        float v27 = -1.0;
      }
      float v28 = (float)(v23 + (float)(v27 * sqrtf(v26))) * -0.5;
      float v29 = v25 / v28;
      float v57 = v28 / v24;
      float v58 = v29;
      if (v29 < (float)(v28 / v24))
      {
        float v57 = v29;
        float v58 = v28 / v24;
      }
      if (v26 <= 0.0) {
        uint64_t v30 = 1;
      }
      else {
        uint64_t v30 = 2;
      }
    }
    uint64_t v31 = 0;
    unsigned __int8 v32 = 0;
    do
    {
      float v33 = *(&v57 + v31);
      if (v33 > 0.0 && v33 < 1.0)
      {
        uint64_t v35 = v32++;
        *(float *)&v55[v35] = v33;
      }
      ++v31;
    }
    while (v30 != v31);
    if (v32)
    {
      uint64_t v36 = v32;
      float32x2_t v51 = a2;
      float v37 = *(float *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v5 & 1)));
      float32x2_t v52 = a3;
      float v38 = *(float *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v5 & 1)));
      float32x2_t v53 = a4;
      float v39 = *(float *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v5 & 1)));
      float32x2_t v54 = a5;
      float v40 = *(float *)((unint64_t)&v54 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v5 & 1)));
      double v41 = (float *)v55;
      do
      {
        float v42 = *v41++;
        float v43 = (float)((float)((float)(v38
                                    * (float)((float)(1.0 - v42) * (float)((float)(v42 * 3.0) * (float)(1.0 - v42))))
                            + (float)((float)((float)(1.0 - v42) * (float)((float)(1.0 - v42) * (float)(1.0 - v42)))
                                    * v37))
                    + (float)((float)((float)(1.0 - v42) * (float)(v42 * (float)(v42 * 3.0))) * v39))
            + (float)((float)(v42 * (float)(v42 * v42)) * v40);
        double v44 = (float *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v5 & 1)));
        double v45 = (float *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v5 & 1)));
        float32x2_t v50 = v6;
        float v46 = *v45;
        if ((float)(v43 - v9) < *v45) {
          float v46 = v43 - v9;
        }
        *double v45 = v46;
        float32x2_t v6 = v50;
        float32x2_t v49 = v7;
        float v47 = *v44;
        float v48 = v43 + v9;
        if (*v44 < v48) {
          float v47 = v48;
        }
        *double v44 = v47;
        float32x2_t v7 = v49;
        --v36;
      }
      while (v36);
      *float64_t result = v6;
      result[1] = v7;
    }
LABEL_30:
    char v20 = 0;
    uint64_t v5 = 1;
  }
  while ((v21 & 1) != 0);
  return result;
}

float64_t geom_tight_bbox_of_cubic_bezier_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4)
{
  return v5.f64[0];
}

float64x2_t *geom::anonymous namespace'::compute_tight_bbox_of_cubic_bezier_2<double>(float64x2_t *result, float64x2_t a2, float64x2_t a3, float64x2_t a4, float64x2_t a5)
{
  uint64_t v5 = 0;
  uint64_t v59 = *MEMORY[0x263EF8340];
  float64x2_t v6 = vminnmq_f64(a2, a5);
  float64x2_t v7 = vmaxnmq_f64(a2, a5);
  *float64_t result = v6;
  result[1] = v7;
  float64x2_t v8 = vsubq_f64(vmaxnmq_f64(vmaxnmq_f64(a3, v7), a4), vminnmq_f64(vminnmq_f64(a3, v6), a4));
  double v9 = sqrt(vaddvq_f64(vmulq_f64(v8, v8))) * 0.000001;
  __asm { FMOV            V17.2D, #3.0 }
  int64x2_t v14 = (int64x2_t)vmulq_f64(vsubq_f64(a3, a2), _Q17);
  __asm
  {
    FMOV            V18.2D, #-2.0
    FMOV            V20.2D, #6.0
  }
  int64x2_t v17 = (int64x2_t)vmulq_f64(vaddq_f64(vmlaq_f64(a2, _Q18, a3), a4), _Q20);
  int64x2_t v18 = (int64x2_t)vmulq_f64(vmlaq_f64(vsubq_f64(a5, a2), _Q17, vsubq_f64(a3, a4)), _Q17);
  v56[0] = vzip1q_s64(v14, v17);
  int64x2_t v19 = vzip2q_s64(v17, v18);
  v18.i64[1] = v14.i64[1];
  v56[1] = v18;
  v56[2] = v19;
  char v20 = 1;
  do
  {
    char v21 = v20;
    float64x2_t v22 = (double *)&v56[0].i64[3 * v5];
    double v23 = v22[1];
    double v24 = v22[2];
    double v25 = *v22;
    if (fabs(v24) <= 0.000001)
    {
      if (fabs(v23) <= 0.000001) {
        goto LABEL_30;
      }
      double v57 = -v25 / v23;
      uint64_t v30 = 1;
    }
    else
    {
      double v26 = v24 * -4.0 * v25 + v23 * v23;
      if (v26 < 0.0) {
        goto LABEL_30;
      }
      if (v23 >= 0.0) {
        double v27 = 1.0;
      }
      else {
        double v27 = -1.0;
      }
      double v28 = (v23 + v27 * sqrt(v26)) * -0.5;
      double v29 = v25 / v28;
      double v57 = v28 / v24;
      double v58 = v29;
      if (v29 < v28 / v24)
      {
        double v57 = v29;
        double v58 = v28 / v24;
      }
      if (v26 <= 0.0) {
        uint64_t v30 = 1;
      }
      else {
        uint64_t v30 = 2;
      }
    }
    uint64_t v31 = 0;
    unsigned __int8 v32 = 0;
    do
    {
      double v33 = *(&v57 + v31);
      if (v33 > 0.0 && v33 < 1.0)
      {
        uint64_t v35 = v32++;
        v55[v35] = v33;
      }
      ++v31;
    }
    while (v30 != v31);
    if (v32)
    {
      uint64_t v36 = v32;
      float64x2_t v51 = a2;
      double v37 = *(double *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF7 | (8 * (v5 & 1)));
      float64x2_t v52 = a3;
      double v38 = *(double *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF7 | (8 * (v5 & 1)));
      float64x2_t v53 = a4;
      double v39 = *(double *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF7 | (8 * (v5 & 1)));
      float64x2_t v54 = a5;
      double v40 = *(double *)((unint64_t)&v54 & 0xFFFFFFFFFFFFFFF7 | (8 * (v5 & 1)));
      double v41 = v55;
      do
      {
        double v42 = *v41++;
        double v43 = v38 * ((1.0 - v42) * (v42 * 3.0 * (1.0 - v42)))
            + (1.0 - v42) * ((1.0 - v42) * (1.0 - v42)) * v37
            + (1.0 - v42) * (v42 * (v42 * 3.0)) * v39
            + v42 * (v42 * v42) * v40;
        double v44 = (double *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFF7 | (8 * (v5 & 1)));
        double v45 = (double *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF7 | (8 * (v5 & 1)));
        float64x2_t v50 = v6;
        double v46 = *v45;
        if (v43 - v9 < *v45) {
          double v46 = v43 - v9;
        }
        *double v45 = v46;
        float64x2_t v6 = v50;
        float64x2_t v49 = v7;
        double v47 = *v44;
        double v48 = v9 + v43;
        if (*v44 < v48) {
          double v47 = v48;
        }
        *double v44 = v47;
        float64x2_t v7 = v49;
        --v36;
      }
      while (v36);
      *float64_t result = v6;
      result[1] = v7;
    }
LABEL_30:
    char v20 = 0;
    uint64_t v5 = 1;
  }
  while ((v21 & 1) != 0);
  return result;
}

double geom_oriented_bounding_box_of_cubic_bezier_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  return v5;
}

float32x2_t *geom::anonymous namespace'::compute_oriented_bbox_of_cubic_bezier_2<float>(float32x2_t *a1, float32x2_t *a2, float32x2_t *a3, float32x2_t *a4, float32x2_t a5, float32x2_t a6, float32x2_t a7, float32x2_t a8)
{
  float32x2_t v12 = a5;
  float32x2_t v13 = vsub_f32(a8, a5);
  float32x2_t v14 = vmul_f32(v13, v13);
  v14.f32[0] = sqrtf(vaddv_f32(v14));
  float32x2_t v32 = (float32x2_t)vdup_n_s32(0x7F800000u);
  float32x2_t v33 = (float32x2_t)0x7F0000007FLL;
  if (fabsf(v14.f32[0]) <= 0.00000011921)
  {
    float32x2_t v16 = (float32x2_t)0x3F80000000000000;
    float32x2_t v25 = (float32x2_t)1065353216;
    float32x2_t v12 = 0;
  }
  else
  {
    float32x2_t v15 = (float32x2_t)vdup_lane_s32((int32x2_t)v14, 0);
    float32x2_t v31 = vdiv_f32(v13, v15);
    v15.f32[0] = -v31.f32[1];
    float32x2_t v16 = (float32x2_t)vzip1_s32((int32x2_t)v15, (int32x2_t)v31);
    float32x2_t v17 = vsub_f32(a6, v12);
    int32x2_t v18 = (int32x2_t)vmul_f32(v17, v31);
    int32x2_t v19 = (int32x2_t)vmul_f32(v17, v16);
    float32x2_t v20 = vadd_f32((float32x2_t)vzip1_s32(v18, v19), (float32x2_t)vzip2_s32(v18, v19));
    float32x2_t v21 = vsub_f32(a7, v12);
    int32x2_t v22 = (int32x2_t)vmul_f32(v21, v31);
    int32x2_t v23 = (int32x2_t)vmul_f32(v21, v16);
    float32x2_t v25 = v31;
  }
  float32x2_t v26 = v32;
  float32x2_t v27 = v33;
  float32x2_t v28 = vmul_f32(vadd_f32(v32, v33), (float32x2_t)0x3F0000003F000000);
  *a1 = vadd_f32(v12, vmla_lane_f32(vmul_n_f32(v25, v28.f32[0]), v16, v28, 1));
  float32x2_t v29 = vmul_f32(vsub_f32(v27, v26), (float32x2_t)vdup_n_s32(0x3F0000A8u));
  *a4 = v29;
  if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v29, 1), v29).u8[0])
  {
    *a4 = (float32x2_t)vrev64_s32((int32x2_t)v29);
    float32x2_t v30 = vneg_f32(v16);
    float32x2_t v16 = v25;
    float32x2_t v25 = v30;
  }
  *a2 = v25;
  *a3 = v16;
  return result;
}

float64_t geom_oriented_bounding_box_of_cubic_bezier_2d(float64x2_t a1, float64x2_t a2, float64x2_t a3, float64x2_t a4)
{
  return v5.f64[0];
}

float64x2_t *geom::anonymous namespace'::compute_oriented_bbox_of_cubic_bezier_2<double>(float64x2_t *a1, float64x2_t *a2, float64x2_t *a3, int64x2_t *a4, float64x2_t a5, float64x2_t a6, float64x2_t a7, float64x2_t a8)
{
  float64x2_t v13 = vsubq_f64(a8, a5);
  double v14 = sqrt(vaddvq_f64(vmulq_f64(v13, v13)));
  float64x2_t v41 = (float64x2_t)vdupq_n_s64(0x7FF0000000000000uLL);
  float64x2_t v42 = (float64x2_t)vdupq_n_s64(0xFFF0000000000000);
  if (fabs(v14) <= 2.22044605e-16)
  {
    float64x2_t v26 = (float64x2_t)xmmword_236F14160;
    float64x2_t v25 = (float64x2_t)xmmword_236F14150;
    float64x2_t v27 = 0uLL;
  }
  else
  {
    int64x2_t v15 = vdupq_lane_s64(*(uint64_t *)&v14, 0);
    int64x2_t v16 = (int64x2_t)vdivq_f64(v13, (float64x2_t)v15);
    *(double *)v15.i64 = -*(double *)&v16.i64[1];
    float64x2_t v38 = (float64x2_t)vzip1q_s64(v15, v16);
    int64x2_t v39 = v16;
    float64x2_t v17 = vsubq_f64(a6, a5);
    int64x2_t v18 = (int64x2_t)vmulq_f64(v17, (float64x2_t)v16);
    int64x2_t v19 = (int64x2_t)vmulq_f64(v17, v38);
    float64x2_t v20 = vaddq_f64((float64x2_t)vzip1q_s64(v18, v19), (float64x2_t)vzip2q_s64(v18, v19));
    float64x2_t v21 = vsubq_f64(a7, a5);
    int64x2_t v22 = (int64x2_t)vmulq_f64(v21, (float64x2_t)v16);
    int64x2_t v23 = (int64x2_t)vmulq_f64(v21, v38);
    float64x2_t v40 = a5;
    float64x2_t v26 = v38;
    float64x2_t v25 = (float64x2_t)v39;
    float64x2_t v27 = v40;
  }
  float64x2_t v28 = v41;
  float64x2_t v29 = v42;
  __asm { FMOV            V3.2D, #0.5 }
  float64x2_t v35 = vmulq_f64(vaddq_f64(v41, v42), _Q3);
  *a1 = vaddq_f64(v27, vmlaq_laneq_f64(vmulq_n_f64(v25, v35.f64[0]), v26, v35, 1));
  int64x2_t v36 = (int64x2_t)vmulq_f64(vsubq_f64(v29, v28), (float64x2_t)vdupq_n_s64(0x3FE0000218DEF417uLL));
  *a4 = v36;
  if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64(v36, 1), (float64x2_t)v36)).u8[0])
  {
    *(int8x16_t *)a4 = vextq_s8((int8x16_t)v36, (int8x16_t)v36, 8uLL);
    float64x2_t v37 = vnegq_f64(v26);
    float64x2_t v26 = v25;
    float64x2_t v25 = v37;
  }
  *a2 = v25;
  *a3 = v26;
  return result;
}

double geom_oriented_bounding_box_matrix_of_cubic_bezier_2f(float32x2_t a1, float32x2_t a2, float32x2_t a3, float32x2_t a4)
{
  float32x2_t v14 = 0;
  float32x2_t v12 = 0;
  float32x2_t v13 = 0;
  float32x2_t v11 = 0;
  *(float32x2_t *)v4.f32 = v13;
  v4.i32[2] = 0;
  *(void *)&double result = vmulq_n_f32(v4, v11.f32[0]).u64[0];
  __asm { FMOV            V2.4S, #1.0 }
  return result;
}

float64_t geom_oriented_bounding_box_matrix_of_cubic_bezier_2d@<D0>(uint64_t a1@<X8>, float64x2_t a2@<Q0>, float64x2_t a3@<Q1>, float64x2_t a4@<Q2>, float64x2_t a5@<Q3>)
{
  float64x2_t v17 = 0u;
  float64x2_t v15 = 0u;
  float64x2_t v16 = 0u;
  float64x2_t v14 = 0u;
  float64x2_t v6 = v14;
  float64x2_t v7 = vmulq_f64(v14, (float64x2_t)0);
  *(float64x2_t *)a1 = vmulq_n_f64(v16, v14.f64[0]);
  *(float64x2_t *)(a1 + 16) = v7;
  *(float64x2_t *)(a1 + 32) = vmulq_laneq_f64(v15, v6, 1);
  *(float64x2_t *)(a1 + 48) = vmulq_laneq_f64((float64x2_t)0, v6, 1);
  float64_t result = v17.f64[0];
  __asm { FMOV            V1.2D, #1.0 }
  *(float64x2_t *)(a1 + 64) = v17;
  *(_OWORD *)(a1 + 80) = _Q1;
  return result;
}

uint64_t geom::anonymous namespace'::solve_homogeneous_quadratic<float>(float *a1, float *a2, float32_t a3)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  float v3 = a1[1];
  float v4 = a1[2];
  float v5 = *a1;
  if (fabsf(v4) > 0.00001)
  {
    float v6 = (float)((float)(v4 * -4.0) * v5) + (float)(v3 * v3);
    if (v6 >= 0.0)
    {
      float v7 = 1.0;
      if (v3 < 0.0) {
        float v7 = -1.0;
      }
      float v8 = (float)(v3 + (float)(v7 * sqrtf(v6))) * -0.5;
      float v9 = v5 / v8;
      float v24 = v8 / v4;
      float v25 = v9;
      if (v9 < (float)(v8 / v4))
      {
        float v24 = v9;
        float v25 = v8 / v4;
      }
      if (v6 <= 0.0) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = 2;
      }
      goto LABEL_12;
    }
    return 0;
  }
  if (fabsf(v3) <= 0.00001) {
    return 0;
  }
  float v24 = (float)-v5 / v3;
  uint64_t v10 = 1;
LABEL_12:
  unsigned __int8 v11 = 0;
  float32x2_t v12 = (__int32 *)&v24;
  do
  {
    v13.i32[0] = *v12;
    v13.f32[1] = a3;
    float32x2_t v14 = vmul_f32(v13, v13);
    v14.i32[0] = vadd_f32(v14, (float32x2_t)vdup_lane_s32((int32x2_t)v14, 1)).u32[0];
    float32x2_t v15 = vrsqrte_f32((float32x2_t)v14.u32[0]);
    float32x2_t v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v15, v15)));
    float32x2_t v17 = vmul_n_f32(v13, vmul_f32(v16, vrsqrts_f32((float32x2_t)v14.u32[0], vmul_f32(v16, v16))).f32[0]);
    float v18 = vdiv_f32(v17, (float32x2_t)vdup_lane_s32((int32x2_t)v17, 1)).f32[0];
    if (v18 > 0.0 && v18 < 1.0)
    {
      uint64_t v20 = v11++;
      a2[v20] = v18;
    }
    ++v12;
    --v10;
  }
  while (v10);
  if (v11 > 1u)
  {
    float v21 = *a2;
    float v22 = a2[1];
    if (*a2 > v22)
    {
      *a2 = v22;
      a2[1] = v21;
    }
  }
  return v11;
}

uint64_t geom::anonymous namespace'::solve_homogeneous_quadratic<double>(double *a1, double *a2, float64_t a3)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  double v3 = a1[1];
  double v4 = a1[2];
  double v5 = *a1;
  if (fabs(v4) > 0.000001)
  {
    double v6 = v4 * -4.0 * v5 + v3 * v3;
    if (v6 >= 0.0)
    {
      double v7 = 1.0;
      if (v3 < 0.0) {
        double v7 = -1.0;
      }
      double v8 = (v3 + v7 * sqrt(v6)) * -0.5;
      double v9 = v5 / v8;
      double v21 = v8 / v4;
      double v22 = v9;
      if (v9 < v8 / v4)
      {
        double v21 = v9;
        double v22 = v8 / v4;
      }
      if (v6 <= 0.0) {
        uint64_t v10 = 1;
      }
      else {
        uint64_t v10 = 2;
      }
      goto LABEL_12;
    }
    return 0;
  }
  if (fabs(v3) <= 0.000001) {
    return 0;
  }
  double v21 = -v5 / v3;
  uint64_t v10 = 1;
LABEL_12:
  unsigned __int8 v11 = 0;
  float32x2_t v12 = &v21;
  do
  {
    v13.f64[0] = *v12;
    v13.f64[1] = a3;
    float64x2_t v14 = vmulq_n_f64(v13, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v13, v13))));
    double v15 = vdivq_f64(v14, (float64x2_t)vdupq_laneq_s64((int64x2_t)v14, 1)).f64[0];
    if (v15 > 0.0 && v15 < 1.0)
    {
      uint64_t v17 = v11++;
      a2[v17] = v15;
    }
    ++v12;
    --v10;
  }
  while (v10);
  if (v11 > 1u)
  {
    double v18 = *a2;
    double v19 = a2[1];
    if (*a2 > v19)
    {
      *a2 = v19;
      a2[1] = v18;
    }
  }
  return v11;
}

void geom::anonymous namespace'::cubic_bezier_fit_with_quadratics_recursively<float>(double **a1, int a2, double a3, float32x2_t a4, float32x2_t a5, double a6, float a7)
{
  while (1)
  {
    double v7 = a6;
    float32x2_t v8 = a5;
    float32x2_t v9 = a4;
    int64x2_t v34 = a1;
    float32x2_t v10 = vsub_f32(a4, *(float32x2_t *)&a3);
    __asm { FMOV            V3.2S, #3.0 }
    float32x2_t v16 = vmla_f32(vneg_f32(*(float32x2_t *)&a3), _D3, a4);
    __asm { FMOV            V3.2S, #-3.0 }
    float32x2_t v18 = vadd_f32(vmla_f32(v16, _D3, v8), *(float32x2_t *)&v7);
    float v19 = vaddv_f32(vmul_f32(v18, v18)) * 0.00034294;
    if (a2 == 3) {
      float v19 = 0.0;
    }
    if (v19 <= a7) {
      break;
    }
    float v20 = a7;
    double v21 = a1;
    float32x2_t v22 = vmla_f32(*(float32x2_t *)&a3, (float32x2_t)0x3F0000003F000000, v10);
    float32x2_t v23 = vsub_f32(v8, v9);
    double v24 = COERCE_DOUBLE(vmla_f32(v8, (float32x2_t)0x3F0000003F000000, vsub_f32(*(float32x2_t *)&v7, v8)));
    float32x2_t v25 = vmla_f32(v9, (float32x2_t)0x3F0000003F000000, v23);
    float32x2_t v26 = vmla_f32(v22, (float32x2_t)0x3F0000003F000000, vsub_f32(v25, v22));
    double v27 = COERCE_DOUBLE(vmla_f32(v25, (float32x2_t)0x3F0000003F000000, vsub_f32(*(float32x2_t *)&v24, v25)));
    double v28 = COERCE_DOUBLE(vmla_f32(v26, (float32x2_t)0x3F0000003F000000, vsub_f32(*(float32x2_t *)&v27, v26)));
    int v29 = (a2 + 1);
    a3 = v28;
    *(double *)&a4 = v27;
    *(double *)&a5 = v24;
    a6 = v7;
    a1 = v21;
    a2 = v29;
    a7 = v20;
  }
  __asm { FMOV            V3.2S, #0.75 }
  float32x2_t v31 = vmla_f32(*(float32x2_t *)&a3, _D3, v10);
  float32x2_t v32 = vmla_f32(*(float32x2_t *)&v7, _D3, vsub_f32(v8, *(float32x2_t *)&v7));
  double v33 = COERCE_DOUBLE(vmla_f32(vmul_f32(v32, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000, v31));
  _ZZN4geom12_GLOBAL__N_144cubic_bezier_fit_with_quadratics_recursivelyIfEEvNS_11vector_typeIT_Lh2EvE5valueES5_S5_S5_RNSt3__16vectorIS5_NS6_9allocatorIS5_EEEES3_hENKUlDv2_fSC_SC_E_clESC_SC_SC_(&v34, a3, *(double *)&v31, v33);
  _ZZN4geom12_GLOBAL__N_144cubic_bezier_fit_with_quadratics_recursivelyIfEEvNS_11vector_typeIT_Lh2EvE5valueES5_S5_S5_RNSt3__16vectorIS5_NS6_9allocatorIS5_EEEES3_hENKUlDv2_fSC_SC_E_clESC_SC_SC_(&v34, v33, *(double *)&v32, v7);
}

void _ZZN4geom12_GLOBAL__N_144cubic_bezier_fit_with_quadratics_recursivelyIfEEvNS_11vector_typeIT_Lh2EvE5valueES5_S5_S5_RNSt3__16vectorIS5_NS6_9allocatorIS5_EEEES3_hENKUlDv2_fSC_SC_E_clESC_SC_SC_(double ***a1, double a2, double a3, double a4)
{
  float32x2_t v8 = *a1;
  float32x2_t v9 = (*a1)[1];
  float32x2_t v10 = *a1;
  unint64_t v13 = (unint64_t)v10[2];
  uint64_t v11 = (uint64_t)(v10 + 2);
  unint64_t v12 = v13;
  if ((unint64_t)v9 >= v13)
  {
    uint64_t v15 = v9 - *v8;
    if ((unint64_t)(v15 + 1) >> 61) {
      goto LABEL_50;
    }
    uint64_t v16 = v12 - (void)*v8;
    uint64_t v17 = v16 >> 2;
    if (v16 >> 2 <= (unint64_t)(v15 + 1)) {
      uint64_t v17 = v15 + 1;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v18 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v18 = v17;
    }
    if (v18) {
      float v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(v11, v18);
    }
    else {
      float v19 = 0;
    }
    float v20 = (double *)&v19[8 * v15];
    double v21 = (double *)&v19[8 * v18];
    *float v20 = a2;
    float64x2_t v14 = v20 + 1;
    float32x2_t v23 = *v8;
    float32x2_t v22 = v8[1];
    if (v22 != *v8)
    {
      do
      {
        uint64_t v24 = *((void *)v22-- - 1);
        *((void *)v20-- - 1) = v24;
      }
      while (v22 != v23);
      float32x2_t v22 = *v8;
    }
    void *v8 = v20;
    v8[1] = v14;
    _OWORD v8[2] = v21;
    if (v22) {
      operator delete(v22);
    }
  }
  else
  {
    double *v9 = a2;
    float64x2_t v14 = v9 + 1;
  }
  v8[1] = v14;
  float32x2_t v25 = *a1;
  float32x2_t v26 = (*a1)[1];
  unint64_t v27 = (unint64_t)(*a1)[2];
  if ((unint64_t)v26 >= v27)
  {
    uint64_t v29 = v26 - *v25;
    if ((unint64_t)(v29 + 1) >> 61) {
      goto LABEL_50;
    }
    uint64_t v30 = v27 - (void)*v25;
    uint64_t v31 = v30 >> 2;
    if (v30 >> 2 <= (unint64_t)(v29 + 1)) {
      uint64_t v31 = v29 + 1;
    }
    if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v32 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v32 = v31;
    }
    if (v32) {
      double v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(*a1 + 2), v32);
    }
    else {
      double v33 = 0;
    }
    int64x2_t v34 = (double *)&v33[8 * v29];
    float64x2_t v35 = (double *)&v33[8 * v32];
    *int64x2_t v34 = a3;
    double v28 = v34 + 1;
    float64x2_t v37 = *v25;
    int64x2_t v36 = v25[1];
    if (v36 != *v25)
    {
      do
      {
        uint64_t v38 = *((void *)v36-- - 1);
        *((void *)v34-- - 1) = v38;
      }
      while (v36 != v37);
      int64x2_t v36 = *v25;
    }
    *float32x2_t v25 = v34;
    v25[1] = v28;
    _OWORD v25[2] = v35;
    if (v36) {
      operator delete(v36);
    }
  }
  else
  {
    *float32x2_t v26 = a3;
    double v28 = v26 + 1;
  }
  v25[1] = v28;
  int64x2_t v39 = *a1;
  float64x2_t v40 = v39[1];
  unint64_t v41 = (unint64_t)v39[2];
  if ((unint64_t)v40 < v41)
  {
    *float64x2_t v40 = a4;
    float64x2_t v42 = v40 + 1;
    goto LABEL_49;
  }
  uint64_t v43 = v40 - *v39;
  if ((unint64_t)(v43 + 1) >> 61) {
LABEL_50:
  }
    abort();
  uint64_t v44 = v41 - (void)*v39;
  uint64_t v45 = v44 >> 2;
  if (v44 >> 2 <= (unint64_t)(v43 + 1)) {
    uint64_t v45 = v43 + 1;
  }
  if ((unint64_t)v44 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v46 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v46 = v45;
  }
  if (v46) {
    double v47 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)(v39 + 2), v46);
  }
  else {
    double v47 = 0;
  }
  double v48 = (double *)&v47[8 * v43];
  float64x2_t v49 = (double *)&v47[8 * v46];
  *double v48 = a4;
  float64x2_t v42 = v48 + 1;
  float64x2_t v51 = *v39;
  float64x2_t v50 = v39[1];
  if (v50 != *v39)
  {
    do
    {
      uint64_t v52 = *((void *)v50-- - 1);
      *((void *)v48-- - 1) = v52;
    }
    while (v50 != v51);
    float64x2_t v50 = *v39;
  }
  float64x2_t *v39 = v48;
  v39[1] = v42;
  double v39[2] = v49;
  if (v50) {
    operator delete(v50);
  }
LABEL_49:
  v39[1] = v42;
}

void geom::anonymous namespace'::cubic_bezier_fit_with_quadratics_recursively<double>(__n128 **a1, int a2, float64x2_t a3, float64x2_t a4, __n128 a5, float64x2_t a6, double a7)
{
  while (1)
  {
    double v7 = a7;
    float64x2_t v8 = (float64x2_t)a5;
    float64x2_t v9 = a4;
    uint64_t v45 = a1;
    float64x2_t v10 = vsubq_f64(a4, a3);
    __asm { FMOV            V4.2D, #0.75 }
    __n128 v16 = (__n128)vmlaq_f64(a3, _Q4, v10);
    float64x2_t v17 = vmlaq_f64(a6, _Q4, vsubq_f64(v8, a6));
    __asm { FMOV            V4.2D, #0.5 }
    __n128 v19 = (__n128)vmlaq_f64(vmulq_f64(v17, _Q4), _Q4, (float64x2_t)v16);
    __asm { FMOV            V6.2D, #3.0 }
    float64x2_t v21 = vmlaq_f64(vnegq_f64(a3), _Q6, v9);
    __asm { FMOV            V6.2D, #-3.0 }
    float64x2_t v23 = vaddq_f64(vmlaq_f64(v21, _Q6, v8), a6);
    v23.f64[0] = vaddvq_f64(vmulq_f64(v23, v23));
    double v24 = v23.f64[0] * 0.000342935528;
    double v25 = v23.f64[0] * 0.000342935528;
    if (a2 == 3) {
      double v26 = 0.0;
    }
    else {
      double v26 = v25;
    }
    if (a2 == 3) {
      double v27 = 0.0;
    }
    else {
      double v27 = v24;
    }
    BOOL v28 = v27 <= v7 && v26 <= v7;
    float64x2_t v44 = a6;
    __n128 v42 = v19;
    __n128 v43 = (__n128)v17;
    if (v28)
    {
      _ZZN4geom12_GLOBAL__N_144cubic_bezier_fit_with_quadratics_recursivelyIdEEvNS_11vector_typeIT_Lh2EvE5valueES5_S5_S5_RNSt3__16vectorIS5_NS6_9allocatorIS5_EEEES3_hENKUlDv2_dSC_SC_E_clESC_SC_SC_(&v45, (__n128)a3, v16, v19);
      __n128 v36 = v42;
      __n128 v37 = v43;
      __n128 v38 = (__n128)v44;
      goto LABEL_20;
    }
    char v29 = a2;
    uint64_t v30 = a1;
    float64x2_t v31 = vmlaq_f64(a3, _Q4, v10);
    float64x2_t v32 = vsubq_f64(v8, v9);
    float64x2_t v33 = vmlaq_f64(v8, _Q4, vsubq_f64(a6, v8));
    float64x2_t v34 = vmlaq_f64(v9, _Q4, v32);
    float64x2_t v35 = vmlaq_f64(v31, _Q4, vsubq_f64(v34, v31));
    float64x2_t v40 = vmlaq_f64(v34, _Q4, vsubq_f64(v33, v34));
    __n128 v41 = (__n128)v33;
    float64x2_t v39 = vmlaq_f64(v35, _Q4, vsubq_f64(v40, v35));
    if (v27 <= v7) {
      _ZZN4geom12_GLOBAL__N_144cubic_bezier_fit_with_quadratics_recursivelyIdEEvNS_11vector_typeIT_Lh2EvE5valueES5_S5_S5_RNSt3__16vectorIS5_NS6_9allocatorIS5_EEEES3_hENKUlDv2_dSC_SC_E_clESC_SC_SC_(&v45, (__n128)a3, v16, v19);
    }
    else {
    a6 = v44;
    }
    if (v26 <= v7) {
      break;
    }
    a2 = (v29 + 1);
    a3 = v39;
    a4 = v40;
    a5 = v41;
    a1 = v30;
    a7 = v7;
  }
  __n128 v36 = v42;
  __n128 v37 = v43;
  __n128 v38 = (__n128)v44;
LABEL_20:
  _ZZN4geom12_GLOBAL__N_144cubic_bezier_fit_with_quadratics_recursivelyIdEEvNS_11vector_typeIT_Lh2EvE5valueES5_S5_S5_RNSt3__16vectorIS5_NS6_9allocatorIS5_EEEES3_hENKUlDv2_dSC_SC_E_clESC_SC_SC_(&v45, v36, v37, v38);
}

void _ZZN4geom12_GLOBAL__N_144cubic_bezier_fit_with_quadratics_recursivelyIdEEvNS_11vector_typeIT_Lh2EvE5valueES5_S5_S5_RNSt3__16vectorIS5_NS6_9allocatorIS5_EEEES3_hENKUlDv2_dSC_SC_E_clESC_SC_SC_(__n128 ***a1, __n128 a2, __n128 a3, __n128 a4)
{
  double v5 = *a1;
  double v6 = (*a1)[1];
  double v7 = *a1;
  unint64_t v10 = (unint64_t)v7[2];
  uint64_t v8 = (uint64_t)(v7 + 2);
  unint64_t v9 = v10;
  if ((unint64_t)v6 >= v10)
  {
    uint64_t v12 = v6 - *v5;
    if ((unint64_t)(v12 + 1) >> 60) {
      goto LABEL_51;
    }
    __n128 v51 = a3;
    uint64_t v13 = v9 - (void)*v5;
    uint64_t v14 = v13 >> 3;
    if (v13 >> 3 <= (unint64_t)(v12 + 1)) {
      uint64_t v14 = v12 + 1;
    }
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v15 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v15 = v14;
    }
    if (v15)
    {
      __n128 v50 = a2;
      __n128 v16 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(v8, v15);
      a2 = v50;
    }
    else
    {
      __n128 v16 = 0;
    }
    float64x2_t v17 = (__n128 *)&v16[16 * v12];
    unint64_t v18 = (__n128 *)&v16[16 * v15];
    *float64x2_t v17 = a2;
    uint64_t v11 = v17 + 1;
    float v20 = *v5;
    __n128 v19 = v5[1];
    if (v19 != *v5)
    {
      do
      {
        __n128 v21 = v19[-1];
        --v19;
        v17[-1] = v21;
        --v17;
      }
      while (v19 != v20);
      __n128 v19 = *v5;
    }
    void *v5 = v17;
    v5[1] = v11;
    v5[2] = v18;
    if (v19) {
      operator delete(v19);
    }
    a3 = v51;
  }
  else
  {
    *double v6 = a2;
    uint64_t v11 = v6 + 1;
  }
  v5[1] = v11;
  float32x2_t v22 = *a1;
  float64x2_t v23 = (*a1)[1];
  unint64_t v24 = (unint64_t)(*a1)[2];
  if ((unint64_t)v23 >= v24)
  {
    uint64_t v26 = v23 - *v22;
    if ((unint64_t)(v26 + 1) >> 60) {
      goto LABEL_51;
    }
    uint64_t v27 = v24 - (void)*v22;
    uint64_t v28 = v27 >> 3;
    if (v27 >> 3 <= (unint64_t)(v26 + 1)) {
      uint64_t v28 = v26 + 1;
    }
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v29 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v28;
    }
    if (v29)
    {
      __n128 v52 = a3;
      uint64_t v30 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(*a1 + 2), v29);
      a3 = v52;
    }
    else
    {
      uint64_t v30 = 0;
    }
    float64x2_t v31 = (__n128 *)&v30[16 * v26];
    float64x2_t v32 = (__n128 *)&v30[16 * v29];
    *float64x2_t v31 = a3;
    double v25 = v31 + 1;
    float64x2_t v34 = *v22;
    float64x2_t v33 = v22[1];
    if (v33 != *v22)
    {
      do
      {
        __n128 v35 = v33[-1];
        --v33;
        v31[-1] = v35;
        --v31;
      }
      while (v33 != v34);
      float64x2_t v33 = *v22;
    }
    *float32x2_t v22 = v31;
    v22[1] = v25;
    _OWORD v22[2] = v32;
    if (v33) {
      operator delete(v33);
    }
  }
  else
  {
    *float64x2_t v23 = a3;
    double v25 = v23 + 1;
  }
  v22[1] = v25;
  __n128 v36 = *a1;
  __n128 v37 = v36[1];
  unint64_t v38 = (unint64_t)v36[2];
  if ((unint64_t)v37 < v38)
  {
    __n128 *v37 = a4;
    float64x2_t v39 = v37 + 1;
    goto LABEL_50;
  }
  uint64_t v40 = v37 - *v36;
  if ((unint64_t)(v40 + 1) >> 60) {
LABEL_51:
  }
    abort();
  uint64_t v41 = v38 - (void)*v36;
  uint64_t v42 = v41 >> 3;
  if (v41 >> 3 <= (unint64_t)(v40 + 1)) {
    uint64_t v42 = v40 + 1;
  }
  if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
    unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v43 = v42;
  }
  if (v43) {
    float64x2_t v44 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(v36 + 2), v43);
  }
  else {
    float64x2_t v44 = 0;
  }
  uint64_t v45 = (__n128 *)&v44[16 * v40];
  unint64_t v46 = (__n128 *)&v44[16 * v43];
  *uint64_t v45 = a4;
  float64x2_t v39 = v45 + 1;
  double v48 = *v36;
  double v47 = v36[1];
  if (v47 != *v36)
  {
    do
    {
      __n128 v49 = v47[-1];
      --v47;
      v45[-1] = v49;
      --v45;
    }
    while (v47 != v48);
    double v47 = *v36;
  }
  *__n128 v36 = v45;
  v36[1] = v39;
  _OWORD v36[2] = v46;
  if (v47) {
    operator delete(v47);
  }
LABEL_50:
  v36[1] = v39;
}

uint64_t geom::anonymous namespace'::intersect_quadratic_bezier_bidirectional_ray<float>(float *a1, float *a2, double a3, double _D1, double a5, float32x2_t a6, double a7)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  if (*(float *)&a7 != 0.0)
  {
    if (*((float *)&a7 + 1) == 0.0)
    {
      float32x2_t v16 = vsub_f32(*(float32x2_t *)&a3, a6);
      float v17 = (float)(*((float *)&_D1 + 1) - *((float *)&a3 + 1)) + (float)(*((float *)&_D1 + 1) - *((float *)&a3 + 1));
      _S16 = -2.0;
      __asm { FMLA            S7, S16, V1.S[1] }
      float v21 = _S7 + *((float *)&a5 + 1);
      if (fabsf(v21) <= 0.00001)
      {
        if (fabsf(v17) > 0.00001)
        {
          float v67 = (float)-v16.f32[1] / v17;
          uint64_t v25 = 1;
LABEL_49:
          unsigned __int8 v52 = 0;
          float64x2_t v53 = &v67;
          do
          {
            float v54 = *v53;
            if (*v53 >= 0.0 && v54 <= 1.0)
            {
              uint64_t v56 = v52++;
              a1[v56] = v54;
            }
            ++v53;
            --v25;
          }
          while (v25);
          goto LABEL_68;
        }
      }
      else
      {
        float v22 = (float)(v16.f32[1] * (float)(v21 * -4.0)) + (float)(v17 * v17);
        if (v22 >= 0.0)
        {
          float v23 = 1.0;
          if (v17 < 0.0) {
            float v23 = -1.0;
          }
          float v24 = (float)(v17 + (float)(v23 * sqrtf(v22))) * -0.5;
          float v67 = v24 / v21;
          float v68 = v16.f32[1] / v24;
          if ((float)(v16.f32[1] / v24) < (float)(v24 / v21))
          {
            float v67 = v16.f32[1] / v24;
            float v68 = v24 / v21;
          }
          uint64_t v25 = 2;
          if (v22 <= 0.0) {
            uint64_t v25 = 1;
          }
          goto LABEL_49;
        }
      }
LABEL_67:
      unsigned __int8 v52 = 0;
LABEL_68:
      unsigned __int8 v26 = v52;
      goto LABEL_69;
    }
    _D6 = vsub_f32(*(float32x2_t *)&a3, a6);
    float32x2_t v32 = vsub_f32(*(float32x2_t *)&_D1, a6);
    float32x2_t v33 = vsub_f32(v32, _D6);
    float32x2_t v34 = vadd_f32(v33, v33);
    float32x2_t v35 = vmla_f32(vadd_f32(_D6, vsub_f32(*(float32x2_t *)&a5, a6)), (float32x2_t)0xC0000000C0000000, v32);
    _S7 = (float)-*(float *)&a7 / *((float *)&a7 + 1);
    __asm { FMLA            S18, S7, V6.S[1] }
    uint64_t v41 = 1;
    float v42 = vmlas_n_f32(_D6.f32[1], (float)-*((float *)&a7 + 1) / *(float *)&a7, _D6.f32[0]);
    uint64_t v43 = 1;
    if (_NF ^ _VF | _ZF) {
      uint64_t v43 = 0;
    }
    else {
      uint64_t v41 = 0;
    }
    if (_NF ^ _VF | _ZF)
    {
      float v44 = _S18;
    }
    else
    {
      _S7 = (float)-*((float *)&a7 + 1) / *(float *)&a7;
      float v44 = v42;
    }
    float32x2_t v66 = v34;
    float v45 = *(float *)((unint64_t)&v66 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v43 & 1)))
        + (float)(_S7 * *(float *)((unint64_t)&v66 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v41 & 1))));
    float32x2_t v65 = v35;
    float v46 = *(float *)((unint64_t)&v65 | (4 * v43)) + (float)(_S7 * *(float *)((unint64_t)&v65 | (4 * v41)));
    if (fabsf(v46) <= 0.00001)
    {
      if (fabsf(v45) <= 0.00001) {
        goto LABEL_67;
      }
      float v67 = (float)-v44 / v45;
      uint64_t v51 = 1;
    }
    else
    {
      float v47 = (float)((float)(v46 * -4.0) * v44) + (float)(v45 * v45);
      if (v47 < 0.0) {
        goto LABEL_67;
      }
      float v48 = 1.0;
      if (v45 < 0.0) {
        float v48 = -1.0;
      }
      float v49 = (float)(v45 + (float)(v48 * sqrtf(v47))) * -0.5;
      float v50 = v44 / v49;
      float v67 = v49 / v46;
      float v68 = v50;
      if (v50 < (float)(v49 / v46))
      {
        float v67 = v50;
        float v68 = v49 / v46;
      }
      uint64_t v51 = 2;
      if (v47 <= 0.0) {
        uint64_t v51 = 1;
      }
    }
    unsigned __int8 v52 = 0;
    double v57 = &v67;
    do
    {
      float v58 = *v57;
      if (*v57 >= 0.0 && v58 <= 1.0)
      {
        uint64_t v60 = v52++;
        a1[v60] = v58;
      }
      ++v57;
      --v51;
    }
    while (v51);
    goto LABEL_68;
  }
  LODWORD(v7) = vsub_f32(*(float32x2_t *)&a3, a6).u32[0];
  float v8 = vsub_f32(*(float32x2_t *)&_D1, *(float32x2_t *)&a3).f32[0];
  float v9 = v8 + v8;
  float v10 = vmlas_n_f32(*(float *)&a3, -2.0, *(float *)&_D1) + *(float *)&a5;
  if (fabsf(v10) > 0.00001)
  {
    float v11 = (float)(v7 * (float)(v10 * -4.0)) + (float)(v9 * v9);
    if (v11 >= 0.0)
    {
      float v12 = 1.0;
      if (v9 < 0.0) {
        float v12 = -1.0;
      }
      float v13 = (float)(v9 + (float)(v12 * sqrtf(v11))) * -0.5;
      float v14 = v7 / v13;
      float v67 = v13 / v10;
      float v68 = v14;
      if (v14 < (float)(v13 / v10))
      {
        float v67 = v14;
        float v68 = v13 / v10;
      }
      if (v11 <= 0.0) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = 2;
      }
      goto LABEL_23;
    }
LABEL_31:
    unsigned __int8 v26 = 0;
    goto LABEL_69;
  }
  if (fabsf(v9) <= 0.00001) {
    goto LABEL_31;
  }
  float v67 = (float)-v7 / v9;
  uint64_t v15 = 1;
LABEL_23:
  unsigned __int8 v26 = 0;
  uint64_t v27 = &v67;
  do
  {
    float v28 = *v27;
    if (*v27 >= 0.0 && v28 <= 1.0)
    {
      uint64_t v30 = v26++;
      a1[v30] = v28;
    }
    ++v27;
    --v15;
  }
  while (v15);
LABEL_69:
  if (v26)
  {
    float v61 = vaddv_f32(vmul_f32(*(float32x2_t *)&a7, *(float32x2_t *)&a7));
    if (v61 == 0.0) {
      float v61 = 1.0;
    }
    uint64_t v62 = v26;
    do
    {
      float v63 = *a1++;
      *a2++ = vaddv_f32(vmul_f32(vsub_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(*(float32x2_t *)&_D1, v63 * (float)((float)(1.0 - v63) + (float)(1.0 - v63))), *(float32x2_t *)&a3, (float)(1.0 - v63) * (float)(1.0 - v63)), *(float32x2_t *)&a5, v63 * v63), a6), *(float32x2_t *)&a7))/ v61;
      --v62;
    }
    while (v62);
  }
  return v26;
}

uint64_t geom::anonymous namespace'::intersect_quadratic_bezier_bidirectional_ray<double>(double *a1, double *a2, float64x2_t a3, float64x2_t _Q1, float64x2_t a5, float64x2_t a6, float64x2_t a7)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  if (a7.f64[0] != 0.0)
  {
    if (a7.f64[1] == 0.0)
    {
      float64x2_t v16 = vsubq_f64(a3, a6);
      double v17 = _Q1.f64[1] - a3.f64[1] + _Q1.f64[1] - a3.f64[1];
      _D16 = -2.0;
      __asm { FMLA            D7, D16, V1.D[1] }
      double v21 = _D7 + a5.f64[1];
      if (fabs(v21) <= 0.000001)
      {
        if (fabs(v17) > 0.000001)
        {
          double v68 = -v16.f64[1] / v17;
          uint64_t v25 = 1;
LABEL_49:
          unsigned __int8 v53 = 0;
          float v54 = &v68;
          do
          {
            double v55 = *v54;
            if (*v54 >= 0.0 && v55 <= 1.0)
            {
              uint64_t v57 = v53++;
              a1[v57] = v55;
            }
            ++v54;
            --v25;
          }
          while (v25);
          goto LABEL_68;
        }
      }
      else
      {
        double v22 = v16.f64[1] * (v21 * -4.0) + v17 * v17;
        if (v22 >= 0.0)
        {
          double v23 = 1.0;
          if (v17 < 0.0) {
            double v23 = -1.0;
          }
          double v24 = (v17 + v23 * sqrt(v22)) * -0.5;
          double v68 = v24 / v21;
          double v69 = v16.f64[1] / v24;
          if (v16.f64[1] / v24 < v24 / v21)
          {
            double v68 = v16.f64[1] / v24;
            double v69 = v24 / v21;
          }
          uint64_t v25 = 2;
          if (v22 <= 0.0) {
            uint64_t v25 = 1;
          }
          goto LABEL_49;
        }
      }
LABEL_67:
      unsigned __int8 v53 = 0;
LABEL_68:
      unsigned __int8 v26 = v53;
      goto LABEL_69;
    }
    _Q6 = vsubq_f64(a3, a6);
    float64x2_t v32 = vsubq_f64(_Q1, a6);
    float64x2_t v33 = vsubq_f64(v32, _Q6);
    float64x2_t v34 = vaddq_f64(v33, v33);
    __asm { FMOV            V18.2D, #-2.0 }
    float64x2_t v36 = vmlaq_f64(vaddq_f64(_Q6, vsubq_f64(a5, a6)), _Q18, v32);
    _D7 = -a7.f64[0] / a7.f64[1];
    __asm { FMLA            D18, D7, V6.D[1] }
    uint64_t v42 = 1;
    double v43 = vmlad_n_f64(_Q6.f64[1], -a7.f64[1] / a7.f64[0], _Q6.f64[0]);
    uint64_t v44 = 1;
    if (_NF ^ _VF | _ZF) {
      uint64_t v44 = 0;
    }
    else {
      uint64_t v42 = 0;
    }
    if (_NF ^ _VF | _ZF)
    {
      double v45 = _D18;
    }
    else
    {
      _D7 = -a7.f64[1] / a7.f64[0];
      double v45 = v43;
    }
    float64x2_t v67 = v34;
    double v46 = *(double *)((unint64_t)&v67 & 0xFFFFFFFFFFFFFFF7 | (8 * (v44 & 1)))
        + _D7 * *(double *)((unint64_t)&v67 & 0xFFFFFFFFFFFFFFF7 | (8 * (v42 & 1)));
    float64x2_t v66 = v36;
    double v47 = *(double *)((unint64_t)&v66 | (8 * v44)) + _D7 * *(double *)((unint64_t)&v66 | (8 * v42));
    if (fabs(v47) <= 0.000001)
    {
      if (fabs(v46) <= 0.000001) {
        goto LABEL_67;
      }
      double v68 = -v45 / v46;
      uint64_t v52 = 1;
    }
    else
    {
      double v48 = v47 * -4.0 * v45 + v46 * v46;
      if (v48 < 0.0) {
        goto LABEL_67;
      }
      double v49 = 1.0;
      if (v46 < 0.0) {
        double v49 = -1.0;
      }
      double v50 = (v46 + v49 * sqrt(v48)) * -0.5;
      double v51 = v45 / v50;
      double v68 = v50 / v47;
      double v69 = v51;
      if (v51 < v50 / v47)
      {
        double v68 = v51;
        double v69 = v50 / v47;
      }
      uint64_t v52 = 2;
      if (v48 <= 0.0) {
        uint64_t v52 = 1;
      }
    }
    unsigned __int8 v53 = 0;
    float v58 = &v68;
    do
    {
      double v59 = *v58;
      if (*v58 >= 0.0 && v59 <= 1.0)
      {
        uint64_t v61 = v53++;
        a1[v61] = v59;
      }
      ++v58;
      --v52;
    }
    while (v52);
    goto LABEL_68;
  }
  *(void *)&double v7 = *(_OWORD *)&vsubq_f64(a3, a6);
  double v8 = vsubq_f64(_Q1, a3).f64[0];
  double v9 = v8 + v8;
  double v10 = vmlad_n_f64(a3.f64[0], -2.0, _Q1.f64[0]) + a5.f64[0];
  if (fabs(v10) > 0.000001)
  {
    double v11 = v7 * (v10 * -4.0) + v9 * v9;
    if (v11 >= 0.0)
    {
      double v12 = 1.0;
      if (v9 < 0.0) {
        double v12 = -1.0;
      }
      double v13 = (v9 + v12 * sqrt(v11)) * -0.5;
      double v14 = v7 / v13;
      double v68 = v13 / v10;
      double v69 = v14;
      if (v14 < v13 / v10)
      {
        double v68 = v14;
        double v69 = v13 / v10;
      }
      if (v11 <= 0.0) {
        uint64_t v15 = 1;
      }
      else {
        uint64_t v15 = 2;
      }
      goto LABEL_23;
    }
LABEL_31:
    unsigned __int8 v26 = 0;
    goto LABEL_69;
  }
  if (fabs(v9) <= 0.000001) {
    goto LABEL_31;
  }
  double v68 = -v7 / v9;
  uint64_t v15 = 1;
LABEL_23:
  unsigned __int8 v26 = 0;
  uint64_t v27 = &v68;
  do
  {
    double v28 = *v27;
    if (*v27 >= 0.0 && v28 <= 1.0)
    {
      uint64_t v30 = v26++;
      a1[v30] = v28;
    }
    ++v27;
    --v15;
  }
  while (v15);
LABEL_69:
  if (v26)
  {
    double v62 = vaddvq_f64(vmulq_f64(a7, a7));
    if (v62 == 0.0) {
      double v62 = 1.0;
    }
    uint64_t v63 = v26;
    do
    {
      double v64 = *a1++;
      *a2++ = vaddvq_f64(vmulq_f64(vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(_Q1, v64 * (1.0 - v64 + 1.0 - v64)), a3, (1.0 - v64) * (1.0 - v64)), a5, v64 * v64), a6), a7))/ v62;
      --v63;
    }
    while (v63);
  }
  return v26;
}

uint64_t geom::anonymous namespace'::intersect_cubic_bezier_bidirectional_ray<float>(float *a1, float *a2, float32x2_t a3, double _D1, float32x2_t a5, float32x2_t a6, float32x2_t a7, float32x2_t a8)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  double v64 = _D1;
  if (a8.f32[0] == 0.0)
  {
    __int32 v70 = vsub_f32(a3, a7).u32[0];
    float v71 = 3.0 * vsub_f32(*(float32x2_t *)&_D1, a3).f32[0];
    float v72 = (float)(vmlas_n_f32(a3.f32[0], -2.0, *(float *)&_D1) + a5.f32[0]) * 3.0;
    float v73 = vmlas_n_f32(vsub_f32(a6, a3).f32[0], 3.0, vsub_f32(*(float32x2_t *)&_D1, a5).f32[0]);
    unsigned int v12 = geom::cubic_roots<float>((float *)&v70, v74);
    unsigned __int8 v13 = 0;
    if (v12)
    {
      uint64_t v14 = v12;
      uint64_t v15 = v74;
      float32x2_t v17 = a5;
      float32x2_t v16 = a8;
      float32x2_t v19 = a3;
      float32x2_t v18 = *(float32x2_t *)&v64;
      do
      {
        float v20 = *v15;
        if (*v15 >= 0.0 && v20 <= 1.0) {
          a1[v13++] = v20;
        }
        ++v15;
        --v14;
      }
      while (v14);
    }
    else
    {
      float32x2_t v17 = a5;
      float32x2_t v16 = a8;
      float32x2_t v19 = a3;
      float32x2_t v18 = *(float32x2_t *)&v64;
    }
    goto LABEL_38;
  }
  if (a8.f32[1] == 0.0)
  {
    __int32 v70 = vsub_f32(a3, a7).i32[1];
    _S4 = -2.0;
    __asm { FMLA            S7, S4, V1.S[1] }
    float v71 = (float)(*((float *)&_D1 + 1) - a3.f32[1]) * 3.0;
    float v72 = (float)(_S7 + a5.f32[1]) * 3.0;
    float v73 = COERCE_FLOAT(vsub_f32(a6, a3).i32[1]) + (float)((float)(*((float *)&_D1 + 1) - a5.f32[1]) * 3.0);
    unsigned int v28 = geom::cubic_roots<float>((float *)&v70, v74);
    unsigned __int8 v13 = 0;
    if (v28)
    {
      uint64_t v29 = v28;
      uint64_t v30 = v74;
      float32x2_t v17 = a5;
      float32x2_t v16 = a8;
      float32x2_t v19 = a3;
      float32x2_t v18 = *(float32x2_t *)&v64;
      do
      {
        float v31 = *v30;
        if (*v30 >= 0.0 && v31 <= 1.0) {
          a1[v13++] = v31;
        }
        ++v30;
        --v29;
      }
      while (v29);
      goto LABEL_38;
    }
LABEL_37:
    float32x2_t v17 = a5;
    float32x2_t v16 = a8;
    float32x2_t v19 = a3;
    float32x2_t v18 = *(float32x2_t *)&v64;
    goto LABEL_38;
  }
  _D20 = vsub_f32(a3, a7);
  float32x2_t v34 = vsub_f32(*(float32x2_t *)&_D1, a7);
  _S6 = (float)-a8.f32[0] / a8.f32[1];
  __asm { FMLA            S7, S6, V20.S[1] }
  float v37 = vmlas_n_f32(_D20.f32[1], (float)-a8.f32[1] / a8.f32[0], _D20.f32[0]);
  float32x2_t v38 = vsub_f32(a5, a7);
  float32x2_t v39 = vadd_f32(v38, vmla_f32(_D20, (float32x2_t)0xC0000000C0000000, v34));
  float32x2_t v40 = vsub_f32(v34, v38);
  __asm { FMOV            V18.2S, #3.0 }
  float32x2_t v42 = vmla_f32(vsub_f32(vsub_f32(a6, a7), _D20), _D18, v40);
  float32x2_t v43 = vmul_f32(vsub_f32(v34, _D20), _D18);
  float32x2_t v44 = vmul_f32(v39, _D18);
  float v45 = vmul_f32(a8, a8).f32[0];
  uint64_t v46 = 1;
  BOOL v47 = v45 > (float)(a8.f32[1] * a8.f32[1]);
  if (v45 <= (float)(a8.f32[1] * a8.f32[1]))
  {
    float v48 = (float)-a8.f32[0] / a8.f32[1];
  }
  else
  {
    uint64_t v46 = 0;
    float v48 = (float)-a8.f32[1] / a8.f32[0];
  }
  if (v45 > (float)(a8.f32[1] * a8.f32[1])) {
    *(float *)&__int32 v49 = v37;
  }
  else {
    __int32 v49 = _S7;
  }
  float32x2_t v69 = v43;
  float v50 = *(float *)((unint64_t)&v69 & 0xFFFFFFFFFFFFFFFBLL | (4 * v47))
      + (float)(v48 * *(float *)((unint64_t)&v69 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v46 & 1))));
  float32x2_t v68 = v44;
  float v51 = *(float *)((unint64_t)&v68 & 0xFFFFFFFFFFFFFFFBLL | (4 * v47))
      + (float)(v48 * *(float *)((unint64_t)&v68 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v46 & 1))));
  float32x2_t v67 = v42;
  float v52 = *(float *)((unint64_t)&v67 | (4 * v47));
  float v53 = *(float *)((unint64_t)&v67 | (4 * v46));
  __int32 v70 = v49;
  float v71 = v50;
  float v72 = v51;
  float v73 = v52 + (float)(v48 * v53);
  unsigned int v54 = geom::cubic_roots<float>((float *)&v70, v74);
  unsigned __int8 v13 = 0;
  if (!v54) {
    goto LABEL_37;
  }
  uint64_t v55 = v54;
  uint64_t v56 = v74;
  float32x2_t v17 = a5;
  float32x2_t v16 = a8;
  float32x2_t v19 = a3;
  float32x2_t v18 = *(float32x2_t *)&v64;
  do
  {
    float v57 = *v56;
    if (*v56 >= 0.0 && v57 <= 1.0) {
      a1[v13++] = v57;
    }
    ++v56;
    --v55;
  }
  while (v55);
LABEL_38:
  if (v13)
  {
    float v59 = vaddv_f32(vmul_f32(v16, v16));
    if (v59 == 0.0) {
      float v59 = 1.0;
    }
    uint64_t v60 = v13;
    do
    {
      float v61 = *a1++;
      *a2++ = vaddv_f32(vmul_f32(vsub_f32(vmla_n_f32(vmla_n_f32(vmla_n_f32(vmul_n_f32(v18, v61 * (float)((float)((float)(1.0 - v61) * (float)(1.0 - v61)) * 3.0)), v19, (float)(1.0 - v61) * (float)((float)(1.0 - v61) * (float)(1.0 - v61))), v17, (float)(v61 * v61) * (float)((float)(1.0 - v61) * 3.0)), a6, v61 * (float)(v61 * v61)), a7), v16))/ v59;
      --v60;
    }
    while (v60);
  }
  return v13;
}

uint64_t geom::anonymous namespace'::intersect_cubic_bezier_bidirectional_ray<double>(double *a1, double *a2, float64x2_t a3, float64x2_t a4, float64x2_t a5, float64x2_t a6, float64x2_t a7, float64x2_t a8)
{
  _Q7 = a4;
  v81[3] = *(long double *)MEMORY[0x263EF8340];
  if (a8.f64[0] == 0.0)
  {
    *(void *)&float64_t v77 = *(_OWORD *)&vsubq_f64(a3, a7);
    double v78 = 3.0 * vsubq_f64(a4, a3).f64[0];
    double v79 = (vmlad_n_f64(a3.f64[0], -2.0, a4.f64[0]) + a5.f64[0]) * 3.0;
    double v80 = vmlad_n_f64(vsubq_f64(a6, a3).f64[0], 3.0, vsubq_f64(a4, a5).f64[0]);
    unsigned int v11 = geom::cubic_roots<double>(&v77, v81);
    unsigned __int8 v12 = 0;
    if (v11)
    {
      uint64_t v13 = v11;
      uint64_t v14 = v81;
      float64x2_t v16 = a7;
      float64x2_t v15 = a8;
      float64x2_t v18 = a5;
      float64x2_t v17 = a6;
      float64x2_t v20 = a3;
      float64x2_t v19 = a4;
      do
      {
        double v21 = *v14;
        if (*v14 >= 0.0 && v21 <= 1.0) {
          a1[v12++] = v21;
        }
        ++v14;
        --v13;
      }
      while (v13);
      goto LABEL_38;
    }
LABEL_37:
    float64x2_t v16 = a7;
    float64x2_t v15 = a8;
    float64x2_t v18 = a5;
    float64x2_t v17 = a6;
    float64x2_t v20 = a3;
    float64x2_t v19 = a4;
    goto LABEL_38;
  }
  if (a8.f64[1] == 0.0)
  {
    float64_t v77 = vsubq_f64(a3, a7).f64[1];
    _D4 = -2.0;
    __asm { FMLA            D16, D4, V7.D[1] }
    double v78 = (a4.f64[1] - a3.f64[1]) * 3.0;
    double v79 = (_D16 + a5.f64[1]) * 3.0;
    double v80 = COERCE_DOUBLE(*(void *)&vsubq_f64(a6, a3).f64[1]) + (a4.f64[1] - a5.f64[1]) * 3.0;
    unsigned int v29 = geom::cubic_roots<double>(&v77, v81);
    unsigned __int8 v12 = 0;
    if (!v29) {
      goto LABEL_37;
    }
    uint64_t v30 = v29;
    float v31 = v81;
    float64x2_t v16 = a7;
    float64x2_t v15 = a8;
    float64x2_t v18 = a5;
    float64x2_t v17 = a6;
    float64x2_t v20 = a3;
    float64x2_t v19 = a4;
    do
    {
      double v32 = *v31;
      if (*v31 >= 0.0 && v32 <= 1.0) {
        a1[v12++] = v32;
      }
      ++v31;
      --v30;
    }
    while (v30);
  }
  else
  {
    _Q1 = vsubq_f64(a3, a7);
    float64x2_t v35 = vsubq_f64(_Q7, a7);
    float64x2_t v36 = vsubq_f64(v35, _Q1);
    __asm { FMOV            V18.2D, #-2.0 }
    float64x2_t v38 = vsubq_f64(vsubq_f64(a6, a7), _Q1);
    _D6 = -a8.f64[0] / a8.f64[1];
    __asm { FMLA            D7, D6, V1.D[1] }
    double v41 = vmlad_n_f64(_Q1.f64[1], -a8.f64[1] / a8.f64[0], _Q1.f64[0]);
    float64x2_t v42 = vmlaq_f64(_Q1, _Q18, v35);
    float64x2_t v43 = vsubq_f64(a5, a7);
    float64x2_t v44 = vaddq_f64(v43, v42);
    float64x2_t v45 = vsubq_f64(v35, v43);
    __asm { FMOV            V18.2D, #3.0 }
    float64x2_t v47 = vmlaq_f64(v38, _Q18, v45);
    float64x2_t v48 = vmulq_f64(v36, _Q18);
    float64x2_t v49 = vmulq_f64(v44, _Q18);
    double v50 = vmulq_f64(a8, a8).f64[0];
    uint64_t v51 = 1;
    BOOL v52 = v50 > a8.f64[1] * a8.f64[1];
    if (v50 <= a8.f64[1] * a8.f64[1])
    {
      double v53 = -a8.f64[0] / a8.f64[1];
    }
    else
    {
      uint64_t v51 = 0;
      double v53 = -a8.f64[1] / a8.f64[0];
    }
    if (v50 > a8.f64[1] * a8.f64[1]) {
      double v54 = v41;
    }
    else {
      double v54 = _D7;
    }
    float64x2_t v76 = v48;
    double v55 = *(double *)((unint64_t)&v76 & 0xFFFFFFFFFFFFFFF7 | (8 * v52))
        + v53 * *(double *)((unint64_t)&v76 & 0xFFFFFFFFFFFFFFF7 | (8 * (v51 & 1)));
    float64x2_t v75 = v49;
    double v56 = *(double *)((unint64_t)&v75 & 0xFFFFFFFFFFFFFFF7 | (8 * v52))
        + v53 * *(double *)((unint64_t)&v75 & 0xFFFFFFFFFFFFFFF7 | (8 * (v51 & 1)));
    float64x2_t v74 = v47;
    double v57 = *(double *)((unint64_t)&v74 | (8 * v52));
    double v58 = *(double *)((unint64_t)&v74 | (8 * v51));
    float64_t v77 = v54;
    double v78 = v55;
    double v79 = v56;
    double v80 = v57 + v53 * v58;
    unsigned int v59 = geom::cubic_roots<double>(&v77, v81);
    unsigned __int8 v12 = 0;
    if (!v59) {
      goto LABEL_37;
    }
    uint64_t v60 = v59;
    float v61 = v81;
    float64x2_t v16 = a7;
    float64x2_t v15 = a8;
    float64x2_t v18 = a5;
    float64x2_t v17 = a6;
    float64x2_t v20 = a3;
    float64x2_t v19 = a4;
    do
    {
      double v62 = *v61;
      if (*v61 >= 0.0 && v62 <= 1.0) {
        a1[v12++] = v62;
      }
      ++v61;
      --v60;
    }
    while (v60);
  }
LABEL_38:
  if (v12)
  {
    double v64 = vaddvq_f64(vmulq_f64(v15, v15));
    if (v64 == 0.0) {
      double v64 = 1.0;
    }
    uint64_t v65 = v12;
    do
    {
      double v66 = *a1++;
      *a2++ = vaddvq_f64(vmulq_f64(vsubq_f64(vmlaq_n_f64(vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v19, v66 * ((1.0 - v66) * (1.0 - v66) * 3.0)), v20, (1.0 - v66) * ((1.0 - v66) * (1.0 - v66))), v18, v66 * v66 * ((1.0 - v66) * 3.0)), v17, v66 * (v66 * v66)), v16), v15))/ v64;
      --v65;
    }
    while (v65);
  }
  return v12;
}

uint64_t geom::half_plane_intersection_2<float>(std::vector<int>::size_type a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 3) {
    return 0;
  }
  memset(&v27, 0, sizeof(v27));
  geom::convex_hull_2<float>(a1, a2, &v27);
  double v7 = *(float32x2_t **)a3;
  *(void *)(a3 + 8) = *(void *)a3;
  std::vector<unsigned int>::pointer end = v27.__end_;
  if (v27.__end_ == v27.__begin_)
  {
LABEL_23:
    uint64_t v3 = 1;
    if (!end) {
      return v3;
    }
  }
  else
  {
    unint64_t v9 = 0;
    int v10 = 0;
    unint64_t v11 = v27.__end_ - v27.__begin_;
    unsigned __int8 v12 = (void *)(a3 + 16);
    std::vector<unsigned int>::pointer end = v27.__begin_;
    while (1)
    {
      uint64_t v13 = end[v9];
      unint64_t v9 = (v10 + 1);
      int8x8_t v14 = *(int8x8_t *)(a2 + 8 * v13);
      int8x8_t v15 = *(int8x8_t *)(a2 + 8 * end[v9 % v11]);
      *(float *)v6.i32 = vmlas_n_f32((float)-*(float *)&v14.i32[1] * *(float *)v15.i32, *(float *)&v15.i32[1], *(float *)v14.i32);
      if (fabsf(*(float *)v6.i32) <= 0.00001) {
        break;
      }
      float32x2_t v16 = vdiv_f32(vsub_f32((float32x2_t)vext_s8(v15, v14, 4uLL), (float32x2_t)vext_s8(v14, v15, 4uLL)), (float32x2_t)vdup_lane_s32(v6, 0));
      if ((unint64_t)v7 >= *v12)
      {
        uint64_t v17 = ((uint64_t)v7 - *(void *)a3) >> 3;
        if ((unint64_t)(v17 + 1) >> 61) {
          abort();
        }
        uint64_t v18 = *v12 - *(void *)a3;
        uint64_t v19 = v18 >> 2;
        if (v18 >> 2 <= (unint64_t)(v17 + 1)) {
          uint64_t v19 = v17 + 1;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v20 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v20 = v19;
        }
        if (v20) {
          double v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>(a3 + 16, v20);
        }
        else {
          double v21 = 0;
        }
        double v22 = (float32x2_t *)&v21[8 * v17];
        *double v22 = v16;
        double v7 = v22 + 1;
        double v24 = *(float32x2_t **)a3;
        double v23 = *(float32x2_t **)(a3 + 8);
        if (v23 != *(float32x2_t **)a3)
        {
          do
          {
            float32x2_t v25 = v23[-1];
            --v23;
            v22[-1] = v25;
            --v22;
          }
          while (v23 != v24);
          double v23 = *(float32x2_t **)a3;
        }
        *(void *)a3 = v22;
        *(void *)(a3 + 8) = v7;
        *(void *)(a3 + 16) = &v21[8 * v20];
        if (v23) {
          operator delete(v23);
        }
      }
      else
      {
        *v7++ = v16;
      }
      *(void *)(a3 + 8) = v7;
      std::vector<unsigned int>::pointer end = v27.__begin_;
      unint64_t v11 = v27.__end_ - v27.__begin_;
      int v10 = v9;
      if (v11 <= v9) {
        goto LABEL_23;
      }
    }
    uint64_t v3 = 0;
  }
  v27.__end_ = end;
  operator delete(end);
  return v3;
}

void geom::convex_hull_2<float>(std::vector<int>::size_type __sz, uint64_t a2, std::vector<int> *this)
{
  uint64_t v59 = a2;
  if (__sz <= 2)
  {
    std::vector<unsigned int>::resize(this, __sz);
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<unsigned int>::pointer end = this->__end_;
    if (this->__begin_ != end)
    {
      int v7 = 0;
      do
        *begin++ = v7++;
      while (begin != end);
    }
    return;
  }
  this->__end_ = this->__begin_;
  memset(&v58, 0, sizeof(v58));
  std::vector<unsigned int>::resize(&v58, __sz);
  std::vector<int>::pointer v9 = v58.__begin_;
  double v8 = (unsigned int *)v58.__end_;
  if (v58.__begin_ != v58.__end_)
  {
    int v10 = 0;
    std::vector<int>::pointer v11 = v58.__begin_;
    do
      *v11++ = v10++;
    while (v11 != (std::vector<int>::pointer)v8);
  }
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  uint64_t v14 = v59;
  do
  {
    LODWORD(v15) = HIDWORD(*(void *)(v59 + 8 * v12));
    LODWORD(v16) = HIDWORD(*(void *)(v59 + 8 * v13));
    unsigned __int32 v17 = (v15 == v16) & vcgt_f32(*(float32x2_t *)(v59 + 8 * v13), *(float32x2_t *)(v59 + 8 * v12)).u32[0];
    if (v15 < v16) {
      unsigned __int32 v17 = 1;
    }
    if (v17) {
      unsigned int v13 = v12;
    }
    ++v12;
  }
  while (__sz > v12);
  unint64_t v18 = 126 - 2 * __clz(((char *)v8 - (char *)(v9 + 1)) >> 2);
  double *v9 = v13;
  v9[v13] = 0;
  uint64_t v57 = *(void *)(v14 + 8 * *v9);
  v60[0] = &v59;
  v60[1] = &v57;
  if (v8 == (unsigned int *)(v9 + 1)) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v18;
  }
  std::__introsort<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,false>((unsigned int *)v9 + 1, v8, v60, v19, 1);
  std::vector<unsigned int>::reserve((std::vector<unsigned int> *)this, __sz);
  std::vector<int>::pointer v20 = v58.__begin_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  std::vector<int>::pointer v23 = this->__end_;
  if (v23 >= value)
  {
    std::vector<int>::pointer v25 = this->__begin_;
    uint64_t v26 = v23 - this->__begin_;
    unint64_t v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 62) {
      goto LABEL_75;
    }
    uint64_t v28 = (char *)value - (char *)v25;
    if (v28 >> 1 > v27) {
      unint64_t v27 = v28 >> 1;
    }
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v27;
    }
    if (v29)
    {
      uint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this->__end_cap_, v29);
      std::vector<int>::pointer v25 = this->__begin_;
      std::vector<int>::pointer v23 = this->__end_;
    }
    else
    {
      uint64_t v30 = 0;
    }
    float v31 = (int *)&v30[4 * v26];
    value = (int *)&v30[4 * v29];
    *float v31 = *v20;
    double v24 = v31 + 1;
    while (v23 != v25)
    {
      int v32 = *--v23;
      *--float v31 = v32;
    }
    this->__begin_ = v31;
    this->__end_ = v24;
    this->__end_cap_.__value_ = value;
    if (v25)
    {
      operator delete(v25);
      value = p_end_cap->__value_;
    }
  }
  else
  {
    *std::vector<int>::pointer v23 = *v58.__begin_;
    double v24 = v23 + 1;
  }
  this->__end_ = v24;
  std::vector<int>::pointer v33 = v58.__begin_;
  if (v24 >= value)
  {
    std::vector<int>::pointer v35 = this->__begin_;
    uint64_t v36 = v24 - this->__begin_;
    unint64_t v37 = v36 + 1;
    if (!((unint64_t)(v36 + 1) >> 62))
    {
      uint64_t v38 = (char *)value - (char *)v35;
      if (v38 >> 1 > v37) {
        unint64_t v37 = v38 >> 1;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      if (v39)
      {
        float32x2_t v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this->__end_cap_, v39);
        std::vector<int>::pointer v35 = this->__begin_;
        double v24 = this->__end_;
      }
      else
      {
        float32x2_t v40 = 0;
      }
      double v41 = (int *)&v40[4 * v36];
      float64x2_t v42 = (int *)&v40[4 * v39];
      *double v41 = v33[1];
      float32x2_t v34 = v41 + 1;
      while (v24 != v35)
      {
        int v43 = *--v24;
        *--double v41 = v43;
      }
      this->__begin_ = v41;
      this->__end_ = v34;
      this->__end_cap_.__value_ = v42;
      if (v35) {
        operator delete(v35);
      }
      goto LABEL_50;
    }
LABEL_75:
    abort();
  }
  *double v24 = v58.__begin_[1];
  float32x2_t v34 = v24 + 1;
LABEL_50:
  this->__end_ = v34;
  float64x2_t v44 = v58.__begin_;
  if ((std::vector<int>::pointer)((char *)v58.__end_ - (char *)v58.__begin_) >= (std::vector<int>::pointer)9)
  {
    unint64_t v45 = 2;
    do
    {
      uint64_t v46 = v44[v45];
      if ((unint64_t)((char *)v34 - (char *)this->__begin_) >= 5)
      {
        do
        {
          float v47 = _simd_orient_pf2(*(simd_float2 *)(v59 + 8 * *(v34 - 2)), *(simd_float2 *)(v59 + 8 * *(v34 - 1)), *(simd_float2 *)(v59 + 8 * v46));
          float32x2_t v34 = this->__end_;
          if (v47 > 0.0) {
            break;
          }
          this->__end_ = --v34;
        }
        while ((unint64_t)((char *)v34 - (char *)this->__begin_) > 4);
      }
      if (v34 >= p_end_cap->__value_)
      {
        std::vector<int>::pointer v49 = this->__begin_;
        uint64_t v50 = v34 - this->__begin_;
        unint64_t v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 62) {
          goto LABEL_75;
        }
        uint64_t v52 = (char *)p_end_cap->__value_ - (char *)v49;
        if (v52 >> 1 > v51) {
          unint64_t v51 = v52 >> 1;
        }
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v51;
        }
        if (v53)
        {
          double v54 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this->__end_cap_, v53);
          std::vector<int>::pointer v49 = this->__begin_;
          float32x2_t v34 = this->__end_;
        }
        else
        {
          double v54 = 0;
        }
        double v55 = (int *)&v54[4 * v50];
        *double v55 = v46;
        float64x2_t v48 = v55 + 1;
        while (v34 != v49)
        {
          int v56 = *--v34;
          *--double v55 = v56;
        }
        this->__begin_ = v55;
        this->__end_ = v48;
        this->__end_cap_.__value_ = (int *)&v54[4 * v53];
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        *float32x2_t v34 = v46;
        float64x2_t v48 = v34 + 1;
      }
      this->__end_ = v48;
      ++v45;
      float64x2_t v44 = v58.__begin_;
      float32x2_t v34 = v48;
    }
    while (v45 < v58.__end_ - v58.__begin_);
  }
  if (v44)
  {
    v58.__end_ = v44;
    operator delete(v44);
  }
}

uint64_t geom::half_plane_intersection_2<double>(std::vector<int>::size_type a1, uint64_t a2, uint64_t a3)
{
  if (a1 < 3) {
    return 0;
  }
  memset(&v29, 0, sizeof(v29));
  geom::convex_hull_2<double>(a1, a2, &v29);
  int32x2_t v6 = *(float64x2_t **)a3;
  *(void *)(a3 + 8) = *(void *)a3;
  std::vector<unsigned int>::pointer end = v29.__end_;
  if (v29.__end_ == v29.__begin_)
  {
LABEL_23:
    uint64_t v3 = 1;
    if (!end) {
      return v3;
    }
  }
  else
  {
    unint64_t v8 = 0;
    int v9 = 0;
    unint64_t v10 = v29.__end_ - v29.__begin_;
    std::vector<int>::pointer v11 = (void *)(a3 + 16);
    std::vector<unsigned int>::pointer end = v29.__begin_;
    while (1)
    {
      uint64_t v12 = end[v8];
      unint64_t v8 = (v9 + 1);
      uint64_t v13 = end[v8 % v10];
      int8x16_t v14 = *(int8x16_t *)(a2 + 16 * v12);
      int8x16_t v15 = *(int8x16_t *)(a2 + 16 * v13);
      double v16 = vmlad_n_f64(-*(double *)(a2 + 16 * v12 + 8) * *(double *)v15.i64, *(double *)(a2 + 16 * v13 + 8), *(double *)v14.i64);
      if (fabs(v16) <= 0.000001) {
        break;
      }
      float64x2_t v17 = vdivq_f64(vsubq_f64((float64x2_t)vextq_s8(v15, v14, 8uLL), (float64x2_t)vextq_s8(v14, v15, 8uLL)), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v16, 0));
      if ((unint64_t)v6 >= *v11)
      {
        uint64_t v18 = ((uint64_t)v6 - *(void *)a3) >> 4;
        if ((unint64_t)(v18 + 1) >> 60) {
          abort();
        }
        uint64_t v19 = *v11 - *(void *)a3;
        uint64_t v20 = v19 >> 3;
        if (v19 >> 3 <= (unint64_t)(v18 + 1)) {
          uint64_t v20 = v18 + 1;
        }
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v21 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v21 = v20;
        }
        if (v21)
        {
          float64x2_t v28 = v17;
          double v22 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v21);
          float64x2_t v17 = v28;
        }
        else
        {
          double v22 = 0;
        }
        std::vector<int>::pointer v23 = (float64x2_t *)&v22[16 * v18];
        *std::vector<int>::pointer v23 = v17;
        int32x2_t v6 = v23 + 1;
        std::vector<int>::pointer v25 = *(float64x2_t **)a3;
        double v24 = *(float64x2_t **)(a3 + 8);
        if (v24 != *(float64x2_t **)a3)
        {
          do
          {
            float64x2_t v26 = v24[-1];
            --v24;
            v23[-1] = v26;
            --v23;
          }
          while (v24 != v25);
          double v24 = *(float64x2_t **)a3;
        }
        *(void *)a3 = v23;
        *(void *)(a3 + 8) = v6;
        *(void *)(a3 + 16) = &v22[16 * v21];
        if (v24) {
          operator delete(v24);
        }
      }
      else
      {
        *v6++ = v17;
      }
      *(void *)(a3 + 8) = v6;
      std::vector<unsigned int>::pointer end = v29.__begin_;
      unint64_t v10 = v29.__end_ - v29.__begin_;
      int v9 = v8;
      if (v10 <= v8) {
        goto LABEL_23;
      }
    }
    uint64_t v3 = 0;
  }
  v29.__end_ = end;
  operator delete(end);
  return v3;
}

void geom::convex_hull_2<double>(std::vector<int>::size_type __sz, uint64_t a2, std::vector<int> *this)
{
  uint64_t v59 = a2;
  if (__sz <= 2)
  {
    std::vector<unsigned int>::resize(this, __sz);
    std::vector<int>::pointer begin = this->__begin_;
    std::vector<unsigned int>::pointer end = this->__end_;
    if (this->__begin_ != end)
    {
      int v7 = 0;
      do
        *begin++ = v7++;
      while (begin != end);
    }
    return;
  }
  this->__end_ = this->__begin_;
  memset(&v58, 0, sizeof(v58));
  std::vector<unsigned int>::resize(&v58, __sz);
  std::vector<int>::pointer v9 = v58.__begin_;
  unint64_t v8 = (unsigned int *)v58.__end_;
  if (v58.__begin_ != v58.__end_)
  {
    int v10 = 0;
    std::vector<int>::pointer v11 = v58.__begin_;
    do
      *v11++ = v10++;
    while (v11 != (std::vector<int>::pointer)v8);
  }
  uint64_t v12 = 0;
  unsigned int v13 = 0;
  uint64_t v14 = v59;
  do
  {
    double v15 = *(double *)(v59 + 16 * v12 + 8);
    double v16 = *(double *)(v59 + 16 * v13 + 8);
    unsigned __int32 v17 = (v15 == v16) & vmovn_s64(vcgtq_f64(*(float64x2_t *)(v59 + 16 * v13), *(float64x2_t *)(v59 + 16 * v12))).u32[0];
    if (v15 < v16) {
      unsigned __int32 v17 = 1;
    }
    if (v17) {
      unsigned int v13 = v12;
    }
    ++v12;
  }
  while (__sz > v12);
  unint64_t v18 = 126 - 2 * __clz(((char *)v8 - (char *)(v9 + 1)) >> 2);
  double *v9 = v13;
  v9[v13] = 0;
  long long v57 = *(_OWORD *)(v14 + 16 * *v9);
  v60[0] = &v59;
  v60[1] = (uint64_t *)&v57;
  if (v8 == (unsigned int *)(v9 + 1)) {
    uint64_t v19 = 0;
  }
  else {
    uint64_t v19 = v18;
  }
  std::__introsort<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,false>((unsigned int *)v9 + 1, v8, v60, v19, 1);
  std::vector<unsigned int>::reserve((std::vector<unsigned int> *)this, __sz);
  std::vector<int>::pointer v20 = v58.__begin_;
  p_end_cap = &this->__end_cap_;
  value = this->__end_cap_.__value_;
  std::vector<int>::pointer v23 = this->__end_;
  if (v23 >= value)
  {
    std::vector<int>::pointer v25 = this->__begin_;
    uint64_t v26 = v23 - this->__begin_;
    unint64_t v27 = v26 + 1;
    if ((unint64_t)(v26 + 1) >> 62) {
      goto LABEL_75;
    }
    uint64_t v28 = (char *)value - (char *)v25;
    if (v28 >> 1 > v27) {
      unint64_t v27 = v28 >> 1;
    }
    if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v29 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v29 = v27;
    }
    if (v29)
    {
      uint64_t v30 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this->__end_cap_, v29);
      std::vector<int>::pointer v25 = this->__begin_;
      std::vector<int>::pointer v23 = this->__end_;
    }
    else
    {
      uint64_t v30 = 0;
    }
    float v31 = (int *)&v30[4 * v26];
    value = (int *)&v30[4 * v29];
    *float v31 = *v20;
    double v24 = v31 + 1;
    while (v23 != v25)
    {
      int v32 = *--v23;
      *--float v31 = v32;
    }
    this->__begin_ = v31;
    this->__end_ = v24;
    this->__end_cap_.__value_ = value;
    if (v25)
    {
      operator delete(v25);
      value = p_end_cap->__value_;
    }
  }
  else
  {
    *std::vector<int>::pointer v23 = *v58.__begin_;
    double v24 = v23 + 1;
  }
  this->__end_ = v24;
  std::vector<int>::pointer v33 = v58.__begin_;
  if (v24 >= value)
  {
    std::vector<int>::pointer v35 = this->__begin_;
    uint64_t v36 = v24 - this->__begin_;
    unint64_t v37 = v36 + 1;
    if (!((unint64_t)(v36 + 1) >> 62))
    {
      uint64_t v38 = (char *)value - (char *)v35;
      if (v38 >> 1 > v37) {
        unint64_t v37 = v38 >> 1;
      }
      if ((unint64_t)v38 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v39 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v39 = v37;
      }
      if (v39)
      {
        float32x2_t v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this->__end_cap_, v39);
        std::vector<int>::pointer v35 = this->__begin_;
        double v24 = this->__end_;
      }
      else
      {
        float32x2_t v40 = 0;
      }
      double v41 = (int *)&v40[4 * v36];
      float64x2_t v42 = (int *)&v40[4 * v39];
      *double v41 = v33[1];
      float32x2_t v34 = v41 + 1;
      while (v24 != v35)
      {
        int v43 = *--v24;
        *--double v41 = v43;
      }
      this->__begin_ = v41;
      this->__end_ = v34;
      this->__end_cap_.__value_ = v42;
      if (v35) {
        operator delete(v35);
      }
      goto LABEL_50;
    }
LABEL_75:
    abort();
  }
  *double v24 = v58.__begin_[1];
  float32x2_t v34 = v24 + 1;
LABEL_50:
  this->__end_ = v34;
  float64x2_t v44 = v58.__begin_;
  if ((std::vector<int>::pointer)((char *)v58.__end_ - (char *)v58.__begin_) >= (std::vector<int>::pointer)9)
  {
    unint64_t v45 = 2;
    do
    {
      uint64_t v46 = v44[v45];
      if ((unint64_t)((char *)v34 - (char *)this->__begin_) >= 5)
      {
        do
        {
          double v47 = _simd_orient_pd2(*(simd_double2 *)(v59 + 16 * *(v34 - 2)), *(simd_double2 *)(v59 + 16 * *(v34 - 1)), *(simd_double2 *)(v59 + 16 * v46));
          float32x2_t v34 = this->__end_;
          if (v47 > 0.0) {
            break;
          }
          this->__end_ = --v34;
        }
        while ((unint64_t)((char *)v34 - (char *)this->__begin_) > 4);
      }
      if (v34 >= p_end_cap->__value_)
      {
        std::vector<int>::pointer v49 = this->__begin_;
        uint64_t v50 = v34 - this->__begin_;
        unint64_t v51 = v50 + 1;
        if ((unint64_t)(v50 + 1) >> 62) {
          goto LABEL_75;
        }
        uint64_t v52 = (char *)p_end_cap->__value_ - (char *)v49;
        if (v52 >> 1 > v51) {
          unint64_t v51 = v52 >> 1;
        }
        if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v53 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v53 = v51;
        }
        if (v53)
        {
          double v54 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)&this->__end_cap_, v53);
          std::vector<int>::pointer v49 = this->__begin_;
          float32x2_t v34 = this->__end_;
        }
        else
        {
          double v54 = 0;
        }
        double v55 = (int *)&v54[4 * v50];
        *double v55 = v46;
        float64x2_t v48 = v55 + 1;
        while (v34 != v49)
        {
          int v56 = *--v34;
          *--double v55 = v56;
        }
        this->__begin_ = v55;
        this->__end_ = v48;
        this->__end_cap_.__value_ = (int *)&v54[4 * v53];
        if (v49) {
          operator delete(v49);
        }
      }
      else
      {
        *float32x2_t v34 = v46;
        float64x2_t v48 = v34 + 1;
      }
      this->__end_ = v48;
      ++v45;
      float64x2_t v44 = v58.__begin_;
      float32x2_t v34 = v48;
    }
    while (v45 < v58.__end_ - v58.__begin_);
  }
  if (v44)
  {
    v58.__end_ = v44;
    operator delete(v44);
  }
}

uint64_t geom::dop<(unsigned char)6,float>::dop(uint64_t result, float32x4_t *a2, uint64_t a3)
{
  *(_OWORD *)float64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_DWORD *)float64_t result = 2139095039;
  *(_DWORD *)(result + 16) = -8388609;
  if (a3)
  {
    float v3 = 3.4028e38;
    float v4 = -3.4028e38;
    double v5 = a2;
    uint64_t v6 = a3;
    do
    {
      float32x4_t v7 = vmulq_f32(*v5, (float32x4_t)xmmword_236F14120);
      float v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0];
      if (v8 < v3)
      {
        *(float *)float64_t result = v8;
        float v3 = v8;
      }
      if (v8 > v4)
      {
        *(float *)(result + 16) = v8;
        float v4 = v8;
      }
      ++v5;
      --v6;
    }
    while (v6);
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 20) = -8388609;
    float v9 = 3.4028e38;
    float v10 = -3.4028e38;
    std::vector<int>::pointer v11 = a2;
    uint64_t v12 = a3;
    do
    {
      float32x4_t v13 = vmulq_f32(*v11, (float32x4_t)xmmword_236F14130);
      float v14 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0];
      if (v14 < v9)
      {
        *(float *)(result + 4) = v14;
        float v9 = v14;
      }
      if (v14 > v10)
      {
        *(float *)(result + 20) = v14;
        float v10 = v14;
      }
      ++v11;
      --v12;
    }
    while (v12);
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 24) = -8388609;
    float v15 = 3.4028e38;
    float v16 = -3.4028e38;
    do
    {
      float32x4_t v17 = vmulq_f32(*a2, (float32x4_t)xmmword_236F14E40);
      float v18 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0];
      if (v18 < v15)
      {
        *(float *)(result + 8) = v18;
        float v15 = v18;
      }
      if (v18 > v16)
      {
        *(float *)(result + 24) = v18;
        float v16 = v18;
      }
      ++a2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 20) = -8388609;
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 24) = -8388609;
  }
  return result;
}

uint64_t geom::dop<(unsigned char)8,float>::dop(uint64_t result, float32x4_t *a2, uint64_t a3)
{
  *(void *)(result + 4) = 0;
  *(void *)(result + 12) = 0;
  *(_DWORD *)(result + 28) = 0;
  *(void *)(result + 20) = 0;
  *(_DWORD *)float64_t result = 2139095039;
  *(_DWORD *)(result + 16) = -8388609;
  if (a3)
  {
    float v3 = 3.4028e38;
    float v4 = -3.4028e38;
    float32x4_t v5 = (float32x4_t)vdupq_n_s32(0x3F13CD3Au);
    uint64_t v6 = a2;
    uint64_t v7 = a3;
    do
    {
      float32x4_t v8 = vmulq_f32(*v6, v5);
      float v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
      if (v9 < v3)
      {
        *(float *)float64_t result = v9;
        float v3 = v9;
      }
      if (v9 > v4)
      {
        *(float *)(result + 16) = v9;
        float v4 = v9;
      }
      ++v6;
      --v7;
    }
    while (v7);
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 20) = -8388609;
    float v10 = 3.4028e38;
    float v11 = -3.4028e38;
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    do
    {
      float32x4_t v14 = vmulq_f32(*v12, (float32x4_t)xmmword_236F1CFB0);
      float v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0];
      if (v15 < v10)
      {
        *(float *)(result + 4) = v15;
        float v10 = v15;
      }
      if (v15 > v11)
      {
        *(float *)(result + 20) = v15;
        float v11 = v15;
      }
      ++v12;
      --v13;
    }
    while (v13);
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 24) = -8388609;
    float v16 = 3.4028e38;
    float v17 = -3.4028e38;
    float v18 = a2;
    uint64_t v19 = a3;
    do
    {
      float32x4_t v20 = vmulq_f32(*v18, (float32x4_t)xmmword_236F1CFC0);
      float v21 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0];
      if (v21 < v16)
      {
        *(float *)(result + 8) = v21;
        float v16 = v21;
      }
      if (v21 > v17)
      {
        *(float *)(result + 24) = v21;
        float v17 = v21;
      }
      ++v18;
      --v19;
    }
    while (v19);
    *(_DWORD *)(result + 12) = 2139095039;
    *(_DWORD *)(result + 28) = -8388609;
    float v22 = 3.4028e38;
    float v23 = -3.4028e38;
    do
    {
      float32x4_t v24 = vmulq_f32(*a2, (float32x4_t)xmmword_236F1CFD0);
      float v25 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0];
      if (v25 < v22)
      {
        *(float *)(result + 12) = v25;
        float v22 = v25;
      }
      if (v25 > v23)
      {
        *(float *)(result + 28) = v25;
        float v23 = v25;
      }
      ++a2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 20) = -8388609;
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 24) = -8388609;
    *(_DWORD *)(result + 12) = 2139095039;
    *(_DWORD *)(result + 28) = -8388609;
  }
  return result;
}

uint64_t geom::dop<(unsigned char)12,float>::dop(uint64_t result, float32x4_t *a2, uint64_t a3)
{
  *(void *)float64_t result = 0;
  *(void *)(result + 8) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)float64_t result = 2139095039;
  *(_DWORD *)(result + 32) = -8388609;
  if (a3)
  {
    float v3 = 3.4028e38;
    float v4 = -3.4028e38;
    float32x4_t v5 = a2;
    uint64_t v6 = a3;
    do
    {
      float32x4_t v7 = vmulq_f32(*v5, (float32x4_t)xmmword_236F1CFE0);
      float v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0];
      if (v8 < v3)
      {
        *(float *)float64_t result = v8;
        float v3 = v8;
      }
      if (v8 > v4)
      {
        *(float *)(result + 32) = v8;
        float v4 = v8;
      }
      ++v5;
      --v6;
    }
    while (v6);
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 36) = -8388609;
    float v9 = 3.4028e38;
    float v10 = -3.4028e38;
    float v11 = a2;
    uint64_t v12 = a3;
    do
    {
      float32x4_t v13 = vmulq_f32(*v11, (float32x4_t)xmmword_236F1CFF0);
      float v14 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0];
      if (v14 < v9)
      {
        *(float *)(result + 4) = v14;
        float v9 = v14;
      }
      if (v14 > v10)
      {
        *(float *)(result + 36) = v14;
        float v10 = v14;
      }
      ++v11;
      --v12;
    }
    while (v12);
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 40) = -8388609;
    float v15 = 3.4028e38;
    float v16 = -3.4028e38;
    float v17 = a2;
    uint64_t v18 = a3;
    do
    {
      float32x4_t v19 = vmulq_f32(*v17, (float32x4_t)xmmword_236F1D000);
      float v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
      if (v20 < v15)
      {
        *(float *)(result + 8) = v20;
        float v15 = v20;
      }
      if (v20 > v16)
      {
        *(float *)(result + 40) = v20;
        float v16 = v20;
      }
      ++v17;
      --v18;
    }
    while (v18);
    *(_DWORD *)(result + 12) = 2139095039;
    *(_DWORD *)(result + 44) = -8388609;
    float v21 = 3.4028e38;
    float v22 = -3.4028e38;
    float v23 = a2;
    uint64_t v24 = a3;
    do
    {
      float32x4_t v25 = vmulq_f32(*v23, (float32x4_t)xmmword_236F1D010);
      float v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0];
      if (v26 < v21)
      {
        *(float *)(result + 12) = v26;
        float v21 = v26;
      }
      if (v26 > v22)
      {
        *(float *)(result + 44) = v26;
        float v22 = v26;
      }
      ++v23;
      --v24;
    }
    while (v24);
    *(_DWORD *)(result + 16) = 2139095039;
    *(_DWORD *)(result + 48) = -8388609;
    float v27 = 3.4028e38;
    float v28 = -3.4028e38;
    unint64_t v29 = a2;
    uint64_t v30 = a3;
    do
    {
      float32x4_t v31 = vmulq_f32(*v29, (float32x4_t)xmmword_236F1D020);
      float v32 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0];
      if (v32 < v27)
      {
        *(float *)(result + 16) = v32;
        float v27 = v32;
      }
      if (v32 > v28)
      {
        *(float *)(result + 48) = v32;
        float v28 = v32;
      }
      ++v29;
      --v30;
    }
    while (v30);
    *(_DWORD *)(result + 20) = 2139095039;
    *(_DWORD *)(result + 52) = -8388609;
    float v33 = 3.4028e38;
    float v34 = -3.4028e38;
    do
    {
      float32x4_t v35 = vmulq_f32(*a2, (float32x4_t)xmmword_236F1D030);
      float v36 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).f32[0];
      if (v36 < v33)
      {
        *(float *)(result + 20) = v36;
        float v33 = v36;
      }
      if (v36 > v34)
      {
        *(float *)(result + 52) = v36;
        float v34 = v36;
      }
      ++a2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 36) = -8388609;
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 40) = -8388609;
    *(_DWORD *)(result + 12) = 2139095039;
    *(_DWORD *)(result + 44) = -8388609;
    *(_DWORD *)(result + 16) = 2139095039;
    *(_DWORD *)(result + 48) = -8388609;
    *(_DWORD *)(result + 20) = 2139095039;
    *(_DWORD *)(result + 52) = -8388609;
  }
  return result;
}

uint64_t geom::dop<(unsigned char)14,float>::dop(uint64_t result, float32x4_t *a2, uint64_t a3)
{
  *(void *)float64_t result = 0;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 24) = 0;
  *(void *)(result + 16) = 0;
  *(void *)(result + 32) = 0;
  *(void *)(result + 40) = 0;
  *(void *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = 0;
  *(_DWORD *)float64_t result = 2139095039;
  *(_DWORD *)(result + 32) = -8388609;
  if (a3)
  {
    float v3 = 3.4028e38;
    float v4 = -3.4028e38;
    float32x4_t v5 = a2;
    uint64_t v6 = a3;
    do
    {
      float32x4_t v7 = vmulq_f32(*v5, (float32x4_t)xmmword_236F14120);
      float v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0];
      if (v8 < v3)
      {
        *(float *)float64_t result = v8;
        float v3 = v8;
      }
      if (v8 > v4)
      {
        *(float *)(result + 32) = v8;
        float v4 = v8;
      }
      ++v5;
      --v6;
    }
    while (v6);
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 36) = -8388609;
    float v9 = 3.4028e38;
    float v10 = -3.4028e38;
    float v11 = a2;
    uint64_t v12 = a3;
    do
    {
      float32x4_t v13 = vmulq_f32(*v11, (float32x4_t)xmmword_236F14130);
      float v14 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0];
      if (v14 < v9)
      {
        *(float *)(result + 4) = v14;
        float v9 = v14;
      }
      if (v14 > v10)
      {
        *(float *)(result + 36) = v14;
        float v10 = v14;
      }
      ++v11;
      --v12;
    }
    while (v12);
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 40) = -8388609;
    float v15 = 3.4028e38;
    float v16 = -3.4028e38;
    float v17 = a2;
    uint64_t v18 = a3;
    do
    {
      float32x4_t v19 = vmulq_f32(*v17, (float32x4_t)xmmword_236F14E40);
      float v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
      if (v20 < v15)
      {
        *(float *)(result + 8) = v20;
        float v15 = v20;
      }
      if (v20 > v16)
      {
        *(float *)(result + 40) = v20;
        float v16 = v20;
      }
      ++v17;
      --v18;
    }
    while (v18);
    *(_DWORD *)(result + 12) = 2139095039;
    *(_DWORD *)(result + 44) = -8388609;
    float v21 = 3.4028e38;
    float v22 = -3.4028e38;
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3F13CD3Au);
    uint64_t v24 = a2;
    uint64_t v25 = a3;
    do
    {
      float32x4_t v26 = vmulq_f32(*v24, v23);
      float v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0];
      if (v27 < v21)
      {
        *(float *)(result + 12) = v27;
        float v21 = v27;
      }
      if (v27 > v22)
      {
        *(float *)(result + 44) = v27;
        float v22 = v27;
      }
      ++v24;
      --v25;
    }
    while (v25);
    *(_DWORD *)(result + 16) = 2139095039;
    *(_DWORD *)(result + 48) = -8388609;
    float v28 = 3.4028e38;
    float v29 = -3.4028e38;
    uint64_t v30 = a2;
    uint64_t v31 = a3;
    do
    {
      float32x4_t v32 = vmulq_f32(*v30, (float32x4_t)xmmword_236F1CFB0);
      float v33 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0];
      if (v33 < v28)
      {
        *(float *)(result + 16) = v33;
        float v28 = v33;
      }
      if (v33 > v29)
      {
        *(float *)(result + 48) = v33;
        float v29 = v33;
      }
      ++v30;
      --v31;
    }
    while (v31);
    *(_DWORD *)(result + 20) = 2139095039;
    *(_DWORD *)(result + 52) = -8388609;
    float v34 = 3.4028e38;
    float v35 = -3.4028e38;
    float v36 = a2;
    uint64_t v37 = a3;
    do
    {
      float32x4_t v38 = vmulq_f32(*v36, (float32x4_t)xmmword_236F1CFC0);
      float v39 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0];
      if (v39 < v34)
      {
        *(float *)(result + 20) = v39;
        float v34 = v39;
      }
      if (v39 > v35)
      {
        *(float *)(result + 52) = v39;
        float v35 = v39;
      }
      ++v36;
      --v37;
    }
    while (v37);
    *(_DWORD *)(result + 24) = 2139095039;
    *(_DWORD *)(result + 56) = -8388609;
    float v40 = 3.4028e38;
    float v41 = -3.4028e38;
    do
    {
      float32x4_t v42 = vmulq_f32(*a2, (float32x4_t)xmmword_236F1CFD0);
      float v43 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0];
      if (v43 < v40)
      {
        *(float *)(result + 24) = v43;
        float v40 = v43;
      }
      if (v43 > v41)
      {
        *(float *)(result + 56) = v43;
        float v41 = v43;
      }
      ++a2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 36) = -8388609;
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 40) = -8388609;
    *(_DWORD *)(result + 12) = 2139095039;
    *(_DWORD *)(result + 44) = -8388609;
    *(_DWORD *)(result + 16) = 2139095039;
    *(_DWORD *)(result + 48) = -8388609;
    *(_DWORD *)(result + 20) = 2139095039;
    *(_DWORD *)(result + 52) = -8388609;
    *(_DWORD *)(result + 24) = 2139095039;
    *(_DWORD *)(result + 56) = -8388609;
  }
  return result;
}

uint64_t geom::dop<(unsigned char)18,float>::dop(uint64_t result, float32x4_t *a2, uint64_t a3)
{
  *(_DWORD *)(result + 32) = 0;
  *(_OWORD *)float64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_DWORD *)(result + 80) = 0;
  *(_DWORD *)float64_t result = 2139095039;
  *(_DWORD *)(result + 48) = -8388609;
  if (a3)
  {
    float v3 = 3.4028e38;
    float v4 = -3.4028e38;
    float32x4_t v5 = a2;
    uint64_t v6 = a3;
    do
    {
      float32x4_t v7 = vmulq_f32(*v5, (float32x4_t)xmmword_236F14120);
      float v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0];
      if (v8 < v3)
      {
        *(float *)float64_t result = v8;
        float v3 = v8;
      }
      if (v8 > v4)
      {
        *(float *)(result + 48) = v8;
        float v4 = v8;
      }
      ++v5;
      --v6;
    }
    while (v6);
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 52) = -8388609;
    float v9 = 3.4028e38;
    float v10 = -3.4028e38;
    float v11 = a2;
    uint64_t v12 = a3;
    do
    {
      float32x4_t v13 = vmulq_f32(*v11, (float32x4_t)xmmword_236F14130);
      float v14 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0];
      if (v14 < v9)
      {
        *(float *)(result + 4) = v14;
        float v9 = v14;
      }
      if (v14 > v10)
      {
        *(float *)(result + 52) = v14;
        float v10 = v14;
      }
      ++v11;
      --v12;
    }
    while (v12);
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 56) = -8388609;
    float v15 = 3.4028e38;
    float v16 = -3.4028e38;
    float v17 = a2;
    uint64_t v18 = a3;
    do
    {
      float32x4_t v19 = vmulq_f32(*v17, (float32x4_t)xmmword_236F14E40);
      float v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
      if (v20 < v15)
      {
        *(float *)(result + 8) = v20;
        float v15 = v20;
      }
      if (v20 > v16)
      {
        *(float *)(result + 56) = v20;
        float v16 = v20;
      }
      ++v17;
      --v18;
    }
    while (v18);
    *(_DWORD *)(result + 12) = 2139095039;
    *(_DWORD *)(result + 60) = -8388609;
    float v21 = 3.4028e38;
    float v22 = -3.4028e38;
    float32x4_t v23 = a2;
    uint64_t v24 = a3;
    do
    {
      float32x4_t v25 = vmulq_f32(*v23, (float32x4_t)xmmword_236F1CFE0);
      float v26 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).f32[0];
      if (v26 < v21)
      {
        *(float *)(result + 12) = v26;
        float v21 = v26;
      }
      if (v26 > v22)
      {
        *(float *)(result + 60) = v26;
        float v22 = v26;
      }
      ++v23;
      --v24;
    }
    while (v24);
    *(_DWORD *)(result + 16) = 2139095039;
    *(_DWORD *)(result + 64) = -8388609;
    float v27 = 3.4028e38;
    float v28 = -3.4028e38;
    float v29 = a2;
    uint64_t v30 = a3;
    do
    {
      float32x4_t v31 = vmulq_f32(*v29, (float32x4_t)xmmword_236F1CFF0);
      float v32 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v31, 2), vaddq_f32(v31, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v31.f32, 1))).f32[0];
      if (v32 < v27)
      {
        *(float *)(result + 16) = v32;
        float v27 = v32;
      }
      if (v32 > v28)
      {
        *(float *)(result + 64) = v32;
        float v28 = v32;
      }
      ++v29;
      --v30;
    }
    while (v30);
    *(_DWORD *)(result + 20) = 2139095039;
    *(_DWORD *)(result + 68) = -8388609;
    float v33 = 3.4028e38;
    float v34 = -3.4028e38;
    float v35 = a2;
    uint64_t v36 = a3;
    do
    {
      float32x4_t v37 = vmulq_f32(*v35, (float32x4_t)xmmword_236F1D000);
      float v38 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))).f32[0];
      if (v38 < v33)
      {
        *(float *)(result + 20) = v38;
        float v33 = v38;
      }
      if (v38 > v34)
      {
        *(float *)(result + 68) = v38;
        float v34 = v38;
      }
      ++v35;
      --v36;
    }
    while (v36);
    *(_DWORD *)(result + 24) = 2139095039;
    *(_DWORD *)(result + 72) = -8388609;
    float v39 = 3.4028e38;
    float v40 = -3.4028e38;
    float v41 = a2;
    uint64_t v42 = a3;
    do
    {
      float32x4_t v43 = vmulq_f32(*v41, (float32x4_t)xmmword_236F1D010);
      float v44 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).f32[0];
      if (v44 < v39)
      {
        *(float *)(result + 24) = v44;
        float v39 = v44;
      }
      if (v44 > v40)
      {
        *(float *)(result + 72) = v44;
        float v40 = v44;
      }
      ++v41;
      --v42;
    }
    while (v42);
    *(_DWORD *)(result + 28) = 2139095039;
    *(_DWORD *)(result + 76) = -8388609;
    float v45 = 3.4028e38;
    float v46 = -3.4028e38;
    double v47 = a2;
    uint64_t v48 = a3;
    do
    {
      float32x4_t v49 = vmulq_f32(*v47, (float32x4_t)xmmword_236F1D020);
      float v50 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).f32[0];
      if (v50 < v45)
      {
        *(float *)(result + 28) = v50;
        float v45 = v50;
      }
      if (v50 > v46)
      {
        *(float *)(result + 76) = v50;
        float v46 = v50;
      }
      ++v47;
      --v48;
    }
    while (v48);
    *(_DWORD *)(result + 32) = 2139095039;
    *(_DWORD *)(result + 80) = -8388609;
    float v51 = 3.4028e38;
    float v52 = -3.4028e38;
    do
    {
      float32x4_t v53 = vmulq_f32(*a2, (float32x4_t)xmmword_236F1D030);
      float v54 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1))).f32[0];
      if (v54 < v51)
      {
        *(float *)(result + 32) = v54;
        float v51 = v54;
      }
      if (v54 > v52)
      {
        *(float *)(result + 80) = v54;
        float v52 = v54;
      }
      ++a2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 52) = -8388609;
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 56) = -8388609;
    *(_DWORD *)(result + 12) = 2139095039;
    *(_DWORD *)(result + 60) = -8388609;
    *(_DWORD *)(result + 16) = 2139095039;
    *(_DWORD *)(result + 64) = -8388609;
    *(_DWORD *)(result + 20) = 2139095039;
    *(_DWORD *)(result + 68) = -8388609;
    *(_DWORD *)(result + 24) = 2139095039;
    *(_DWORD *)(result + 72) = -8388609;
    *(_DWORD *)(result + 28) = 2139095039;
    *(_DWORD *)(result + 76) = -8388609;
    *(_DWORD *)(result + 32) = 2139095039;
    *(_DWORD *)(result + 80) = -8388609;
  }
  return result;
}

uint64_t geom::dop<(unsigned char)20,float>::dop(uint64_t result, float32x4_t *a2, uint64_t a3)
{
  *(void *)(result + 32) = 0;
  *(_OWORD *)float64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(void *)(result + 80) = 0;
  *(_DWORD *)float64_t result = 2139095039;
  *(_DWORD *)(result + 48) = -8388609;
  if (a3)
  {
    float v3 = 3.4028e38;
    float v4 = -3.4028e38;
    float32x4_t v5 = (float32x4_t)vdupq_n_s32(0x3F13CD3Au);
    uint64_t v6 = a2;
    uint64_t v7 = a3;
    do
    {
      float32x4_t v8 = vmulq_f32(*v6, v5);
      float v9 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
      if (v9 < v3)
      {
        *(float *)float64_t result = v9;
        float v3 = v9;
      }
      if (v9 > v4)
      {
        *(float *)(result + 48) = v9;
        float v4 = v9;
      }
      ++v6;
      --v7;
    }
    while (v7);
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 52) = -8388609;
    float v10 = 3.4028e38;
    float v11 = -3.4028e38;
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    do
    {
      float32x4_t v14 = vmulq_f32(*v12, (float32x4_t)xmmword_236F1CFB0);
      float v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v14, 2), vaddq_f32(v14, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v14.f32, 1))).f32[0];
      if (v15 < v10)
      {
        *(float *)(result + 4) = v15;
        float v10 = v15;
      }
      if (v15 > v11)
      {
        *(float *)(result + 52) = v15;
        float v11 = v15;
      }
      ++v12;
      --v13;
    }
    while (v13);
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 56) = -8388609;
    float v16 = 3.4028e38;
    float v17 = -3.4028e38;
    uint64_t v18 = a2;
    uint64_t v19 = a3;
    do
    {
      float32x4_t v20 = vmulq_f32(*v18, (float32x4_t)xmmword_236F1CFC0);
      float v21 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0];
      if (v21 < v16)
      {
        *(float *)(result + 8) = v21;
        float v16 = v21;
      }
      if (v21 > v17)
      {
        *(float *)(result + 56) = v21;
        float v17 = v21;
      }
      ++v18;
      --v19;
    }
    while (v19);
    *(_DWORD *)(result + 12) = 2139095039;
    *(_DWORD *)(result + 60) = -8388609;
    float v22 = 3.4028e38;
    float v23 = -3.4028e38;
    uint64_t v24 = a2;
    uint64_t v25 = a3;
    do
    {
      float32x4_t v26 = vmulq_f32(*v24, (float32x4_t)xmmword_236F1CFD0);
      float v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0];
      if (v27 < v22)
      {
        *(float *)(result + 12) = v27;
        float v22 = v27;
      }
      if (v27 > v23)
      {
        *(float *)(result + 60) = v27;
        float v23 = v27;
      }
      ++v24;
      --v25;
    }
    while (v25);
    *(_DWORD *)(result + 16) = 2139095039;
    *(_DWORD *)(result + 64) = -8388609;
    float v28 = 3.4028e38;
    float v29 = -3.4028e38;
    uint64_t v30 = a2;
    uint64_t v31 = a3;
    do
    {
      float32x4_t v32 = vmulq_f32(*v30, (float32x4_t)xmmword_236F1CFE0);
      float v33 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0];
      if (v33 < v28)
      {
        *(float *)(result + 16) = v33;
        float v28 = v33;
      }
      if (v33 > v29)
      {
        *(float *)(result + 64) = v33;
        float v29 = v33;
      }
      ++v30;
      --v31;
    }
    while (v31);
    *(_DWORD *)(result + 20) = 2139095039;
    *(_DWORD *)(result + 68) = -8388609;
    float v34 = 3.4028e38;
    float v35 = -3.4028e38;
    uint64_t v36 = a2;
    uint64_t v37 = a3;
    do
    {
      float32x4_t v38 = vmulq_f32(*v36, (float32x4_t)xmmword_236F1CFF0);
      float v39 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0];
      if (v39 < v34)
      {
        *(float *)(result + 20) = v39;
        float v34 = v39;
      }
      if (v39 > v35)
      {
        *(float *)(result + 68) = v39;
        float v35 = v39;
      }
      ++v36;
      --v37;
    }
    while (v37);
    *(_DWORD *)(result + 24) = 2139095039;
    *(_DWORD *)(result + 72) = -8388609;
    float v40 = 3.4028e38;
    float v41 = -3.4028e38;
    uint64_t v42 = a2;
    uint64_t v43 = a3;
    do
    {
      float32x4_t v44 = vmulq_f32(*v42, (float32x4_t)xmmword_236F1D000);
      float v45 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0];
      if (v45 < v40)
      {
        *(float *)(result + 24) = v45;
        float v40 = v45;
      }
      if (v45 > v41)
      {
        *(float *)(result + 72) = v45;
        float v41 = v45;
      }
      ++v42;
      --v43;
    }
    while (v43);
    *(_DWORD *)(result + 28) = 2139095039;
    *(_DWORD *)(result + 76) = -8388609;
    float v46 = 3.4028e38;
    float v47 = -3.4028e38;
    uint64_t v48 = a2;
    uint64_t v49 = a3;
    do
    {
      float32x4_t v50 = vmulq_f32(*v48, (float32x4_t)xmmword_236F1D010);
      float v51 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).f32[0];
      if (v51 < v46)
      {
        *(float *)(result + 28) = v51;
        float v46 = v51;
      }
      if (v51 > v47)
      {
        *(float *)(result + 76) = v51;
        float v47 = v51;
      }
      ++v48;
      --v49;
    }
    while (v49);
    *(_DWORD *)(result + 32) = 2139095039;
    *(_DWORD *)(result + 80) = -8388609;
    float v52 = 3.4028e38;
    float v53 = -3.4028e38;
    float v54 = a2;
    uint64_t v55 = a3;
    do
    {
      float32x4_t v56 = vmulq_f32(*v54, (float32x4_t)xmmword_236F1D020);
      float v57 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0];
      if (v57 < v52)
      {
        *(float *)(result + 32) = v57;
        float v52 = v57;
      }
      if (v57 > v53)
      {
        *(float *)(result + 80) = v57;
        float v53 = v57;
      }
      ++v54;
      --v55;
    }
    while (v55);
    *(_DWORD *)(result + 36) = 2139095039;
    *(_DWORD *)(result + 84) = -8388609;
    float v58 = 3.4028e38;
    float v59 = -3.4028e38;
    do
    {
      float32x4_t v60 = vmulq_f32(*a2, (float32x4_t)xmmword_236F1D030);
      float v61 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v60, 2), vaddq_f32(v60, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v60.f32, 1))).f32[0];
      if (v61 < v58)
      {
        *(float *)(result + 36) = v61;
        float v58 = v61;
      }
      if (v61 > v59)
      {
        *(float *)(result + 84) = v61;
        float v59 = v61;
      }
      ++a2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 52) = -8388609;
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 56) = -8388609;
    *(_DWORD *)(result + 12) = 2139095039;
    *(_DWORD *)(result + 60) = -8388609;
    *(_DWORD *)(result + 16) = 2139095039;
    *(_DWORD *)(result + 64) = -8388609;
    *(_DWORD *)(result + 20) = 2139095039;
    *(_DWORD *)(result + 68) = -8388609;
    *(_DWORD *)(result + 24) = 2139095039;
    *(_DWORD *)(result + 72) = -8388609;
    *(_DWORD *)(result + 28) = 2139095039;
    *(_DWORD *)(result + 76) = -8388609;
    *(_DWORD *)(result + 32) = 2139095039;
    *(_DWORD *)(result + 80) = -8388609;
    *(_DWORD *)(result + 36) = 2139095039;
    *(_DWORD *)(result + 84) = -8388609;
  }
  return result;
}

uint64_t geom::dop<(unsigned char)26,float>::dop(uint64_t result, float32x4_t *a2, uint64_t a3)
{
  *(_DWORD *)(result + 48) = 0;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)float64_t result = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_DWORD *)(result + 112) = 0;
  *(_DWORD *)float64_t result = 2139095039;
  *(_DWORD *)(result + 64) = -8388609;
  if (a3)
  {
    float v3 = 3.4028e38;
    float v4 = -3.4028e38;
    float32x4_t v5 = a2;
    uint64_t v6 = a3;
    do
    {
      float32x4_t v7 = vmulq_f32(*v5, (float32x4_t)xmmword_236F14120);
      float v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0];
      if (v8 < v3)
      {
        *(float *)float64_t result = v8;
        float v3 = v8;
      }
      if (v8 > v4)
      {
        *(float *)(result + 64) = v8;
        float v4 = v8;
      }
      ++v5;
      --v6;
    }
    while (v6);
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 68) = -8388609;
    float v9 = 3.4028e38;
    float v10 = -3.4028e38;
    float v11 = a2;
    uint64_t v12 = a3;
    do
    {
      float32x4_t v13 = vmulq_f32(*v11, (float32x4_t)xmmword_236F14130);
      float v14 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).f32[0];
      if (v14 < v9)
      {
        *(float *)(result + 4) = v14;
        float v9 = v14;
      }
      if (v14 > v10)
      {
        *(float *)(result + 68) = v14;
        float v10 = v14;
      }
      ++v11;
      --v12;
    }
    while (v12);
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 72) = -8388609;
    float v15 = 3.4028e38;
    float v16 = -3.4028e38;
    float v17 = a2;
    uint64_t v18 = a3;
    do
    {
      float32x4_t v19 = vmulq_f32(*v17, (float32x4_t)xmmword_236F14E40);
      float v20 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v19, 2), vaddq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v19.f32, 1))).f32[0];
      if (v20 < v15)
      {
        *(float *)(result + 8) = v20;
        float v15 = v20;
      }
      if (v20 > v16)
      {
        *(float *)(result + 72) = v20;
        float v16 = v20;
      }
      ++v17;
      --v18;
    }
    while (v18);
    *(_DWORD *)(result + 12) = 2139095039;
    *(_DWORD *)(result + 76) = -8388609;
    float v21 = 3.4028e38;
    float v22 = -3.4028e38;
    float32x4_t v23 = (float32x4_t)vdupq_n_s32(0x3F13CD3Au);
    uint64_t v24 = a2;
    uint64_t v25 = a3;
    do
    {
      float32x4_t v26 = vmulq_f32(*v24, v23);
      float v27 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0];
      if (v27 < v21)
      {
        *(float *)(result + 12) = v27;
        float v21 = v27;
      }
      if (v27 > v22)
      {
        *(float *)(result + 76) = v27;
        float v22 = v27;
      }
      ++v24;
      --v25;
    }
    while (v25);
    *(_DWORD *)(result + 16) = 2139095039;
    *(_DWORD *)(result + 80) = -8388609;
    float v28 = 3.4028e38;
    float v29 = -3.4028e38;
    uint64_t v30 = a2;
    uint64_t v31 = a3;
    do
    {
      float32x4_t v32 = vmulq_f32(*v30, (float32x4_t)xmmword_236F1CFB0);
      float v33 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0];
      if (v33 < v28)
      {
        *(float *)(result + 16) = v33;
        float v28 = v33;
      }
      if (v33 > v29)
      {
        *(float *)(result + 80) = v33;
        float v29 = v33;
      }
      ++v30;
      --v31;
    }
    while (v31);
    *(_DWORD *)(result + 20) = 2139095039;
    *(_DWORD *)(result + 84) = -8388609;
    float v34 = 3.4028e38;
    float v35 = -3.4028e38;
    uint64_t v36 = a2;
    uint64_t v37 = a3;
    do
    {
      float32x4_t v38 = vmulq_f32(*v36, (float32x4_t)xmmword_236F1CFC0);
      float v39 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v38, 2), vaddq_f32(v38, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v38.f32, 1))).f32[0];
      if (v39 < v34)
      {
        *(float *)(result + 20) = v39;
        float v34 = v39;
      }
      if (v39 > v35)
      {
        *(float *)(result + 84) = v39;
        float v35 = v39;
      }
      ++v36;
      --v37;
    }
    while (v37);
    *(_DWORD *)(result + 24) = 2139095039;
    *(_DWORD *)(result + 88) = -8388609;
    float v40 = 3.4028e38;
    float v41 = -3.4028e38;
    uint64_t v42 = a2;
    uint64_t v43 = a3;
    do
    {
      float32x4_t v44 = vmulq_f32(*v42, (float32x4_t)xmmword_236F1CFD0);
      float v45 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).f32[0];
      if (v45 < v40)
      {
        *(float *)(result + 24) = v45;
        float v40 = v45;
      }
      if (v45 > v41)
      {
        *(float *)(result + 88) = v45;
        float v41 = v45;
      }
      ++v42;
      --v43;
    }
    while (v43);
    *(_DWORD *)(result + 28) = 2139095039;
    *(_DWORD *)(result + 92) = -8388609;
    float v46 = 3.4028e38;
    float v47 = -3.4028e38;
    uint64_t v48 = a2;
    uint64_t v49 = a3;
    do
    {
      float32x4_t v50 = vmulq_f32(*v48, (float32x4_t)xmmword_236F1CFE0);
      float v51 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v50, 2), vaddq_f32(v50, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v50.f32, 1))).f32[0];
      if (v51 < v46)
      {
        *(float *)(result + 28) = v51;
        float v46 = v51;
      }
      if (v51 > v47)
      {
        *(float *)(result + 92) = v51;
        float v47 = v51;
      }
      ++v48;
      --v49;
    }
    while (v49);
    *(_DWORD *)(result + 32) = 2139095039;
    *(_DWORD *)(result + 96) = -8388609;
    float v52 = 3.4028e38;
    float v53 = -3.4028e38;
    float v54 = a2;
    uint64_t v55 = a3;
    do
    {
      float32x4_t v56 = vmulq_f32(*v54, (float32x4_t)xmmword_236F1CFF0);
      float v57 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v56, 2), vaddq_f32(v56, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v56.f32, 1))).f32[0];
      if (v57 < v52)
      {
        *(float *)(result + 32) = v57;
        float v52 = v57;
      }
      if (v57 > v53)
      {
        *(float *)(result + 96) = v57;
        float v53 = v57;
      }
      ++v54;
      --v55;
    }
    while (v55);
    *(_DWORD *)(result + 36) = 2139095039;
    *(_DWORD *)(result + 100) = -8388609;
    float v58 = 3.4028e38;
    float v59 = -3.4028e38;
    float32x4_t v60 = a2;
    uint64_t v61 = a3;
    do
    {
      float32x4_t v62 = vmulq_f32(*v60, (float32x4_t)xmmword_236F1D000);
      float v63 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v62, 2), vaddq_f32(v62, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v62.f32, 1))).f32[0];
      if (v63 < v58)
      {
        *(float *)(result + 36) = v63;
        float v58 = v63;
      }
      if (v63 > v59)
      {
        *(float *)(result + 100) = v63;
        float v59 = v63;
      }
      ++v60;
      --v61;
    }
    while (v61);
    *(_DWORD *)(result + 40) = 2139095039;
    *(_DWORD *)(result + 104) = -8388609;
    float v64 = 3.4028e38;
    float v65 = -3.4028e38;
    double v66 = a2;
    uint64_t v67 = a3;
    do
    {
      float32x4_t v68 = vmulq_f32(*v66, (float32x4_t)xmmword_236F1D010);
      float v69 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).f32[0];
      if (v69 < v64)
      {
        *(float *)(result + 40) = v69;
        float v64 = v69;
      }
      if (v69 > v65)
      {
        *(float *)(result + 104) = v69;
        float v65 = v69;
      }
      ++v66;
      --v67;
    }
    while (v67);
    *(_DWORD *)(result + 44) = 2139095039;
    *(_DWORD *)(result + 108) = -8388609;
    float v70 = 3.4028e38;
    float v71 = -3.4028e38;
    float v72 = a2;
    uint64_t v73 = a3;
    do
    {
      float32x4_t v74 = vmulq_f32(*v72, (float32x4_t)xmmword_236F1D020);
      float v75 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 2), vaddq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 1))).f32[0];
      if (v75 < v70)
      {
        *(float *)(result + 44) = v75;
        float v70 = v75;
      }
      if (v75 > v71)
      {
        *(float *)(result + 108) = v75;
        float v71 = v75;
      }
      ++v72;
      --v73;
    }
    while (v73);
    *(_DWORD *)(result + 48) = 2139095039;
    *(_DWORD *)(result + 112) = -8388609;
    float v76 = 3.4028e38;
    float v77 = -3.4028e38;
    do
    {
      float32x4_t v78 = vmulq_f32(*a2, (float32x4_t)xmmword_236F1D030);
      float v79 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v78, 2), vaddq_f32(v78, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v78.f32, 1))).f32[0];
      if (v79 < v76)
      {
        *(float *)(result + 48) = v79;
        float v76 = v79;
      }
      if (v79 > v77)
      {
        *(float *)(result + 112) = v79;
        float v77 = v79;
      }
      ++a2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(_DWORD *)(result + 4) = 2139095039;
    *(_DWORD *)(result + 68) = -8388609;
    *(_DWORD *)(result + 8) = 2139095039;
    *(_DWORD *)(result + 72) = -8388609;
    *(_DWORD *)(result + 12) = 2139095039;
    *(_DWORD *)(result + 76) = -8388609;
    *(_DWORD *)(result + 16) = 2139095039;
    *(_DWORD *)(result + 80) = -8388609;
    *(_DWORD *)(result + 20) = 2139095039;
    *(_DWORD *)(result + 84) = -8388609;
    *(_DWORD *)(result + 24) = 2139095039;
    *(_DWORD *)(result + 88) = -8388609;
    *(_DWORD *)(result + 28) = 2139095039;
    *(_DWORD *)(result + 92) = -8388609;
    *(_DWORD *)(result + 32) = 2139095039;
    *(_DWORD *)(result + 96) = -8388609;
    *(_DWORD *)(result + 36) = 2139095039;
    *(_DWORD *)(result + 100) = -8388609;
    *(_DWORD *)(result + 40) = 2139095039;
    *(_DWORD *)(result + 104) = -8388609;
    *(_DWORD *)(result + 44) = 2139095039;
    *(_DWORD *)(result + 108) = -8388609;
    *(_DWORD *)(result + 48) = 2139095039;
    *(_DWORD *)(result + 112) = -8388609;
  }
  return result;
}

uint64_t geom::dop<(unsigned char)6,double>::dop(uint64_t result, float64x2_t *a2, uint64_t a3)
{
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)float64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(void *)float64_t result = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(result + 32) = 0xFFEFFFFFFFFFFFFFLL;
  if (a3)
  {
    double v3 = 1.79769313e308;
    double v4 = -1.79769313e308;
    float32x4_t v5 = a2;
    uint64_t v6 = a3;
    do
    {
      double v7 = vmulq_f64(v5[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v5, (float64x2_t)xmmword_236F14150));
      if (v7 < v3)
      {
        *(double *)float64_t result = v7;
        double v3 = v7;
      }
      if (v7 > v4)
      {
        *(double *)(result + 32) = v7;
        double v4 = v7;
      }
      v5 += 2;
      --v6;
    }
    while (v6);
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 40) = 0xFFEFFFFFFFFFFFFFLL;
    double v8 = 1.79769313e308;
    double v9 = -1.79769313e308;
    float v10 = a2;
    uint64_t v11 = a3;
    do
    {
      double v12 = vmulq_f64(v10[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v10, (float64x2_t)xmmword_236F14160));
      if (v12 < v8)
      {
        *(double *)(result + 8) = v12;
        double v8 = v12;
      }
      if (v12 > v9)
      {
        *(double *)(result + 40) = v12;
        double v9 = v12;
      }
      v10 += 2;
      --v11;
    }
    while (v11);
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 48) = 0xFFEFFFFFFFFFFFFFLL;
    double v13 = 1.79769313e308;
    double v14 = -1.79769313e308;
    do
    {
      double v15 = a2[1].f64[0] + vaddvq_f64(vmulq_f64(*a2, (float64x2_t)0));
      if (v15 < v13)
      {
        *(double *)(result + 16) = v15;
        double v13 = v15;
      }
      if (v15 > v14)
      {
        *(double *)(result + 48) = v15;
        double v14 = v15;
      }
      a2 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 40) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 48) = 0xFFEFFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t geom::dop<(unsigned char)8,double>::dop(uint64_t result, float64x2_t *a2, uint64_t a3, double a4, double a5, float64x2_t a6)
{
  v6.f64[1] = 0.0;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)float64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(void *)float64_t result = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(result + 32) = 0xFFEFFFFFFFFFFFFFLL;
  if (a3)
  {
    double v7 = 1.79769313e308;
    double v8 = -1.79769313e308;
    v6.f64[0] = 0.577350269;
    float64x2_t v9 = (float64x2_t)vdupq_n_s64(0x3FE279A74590331CuLL);
    float v10 = a2;
    uint64_t v11 = a3;
    do
    {
      double v12 = vmulq_f64(v10[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v10, v9));
      if (v12 < v7)
      {
        *(double *)float64_t result = v12;
        double v7 = v12;
      }
      if (v12 > v8)
      {
        *(double *)(result + 32) = v12;
        double v8 = v12;
      }
      v10 += 2;
      --v11;
    }
    while (v11);
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 40) = 0xFFEFFFFFFFFFFFFFLL;
    double v13 = 1.79769313e308;
    double v14 = -1.79769313e308;
    double v15 = a2;
    uint64_t v16 = a3;
    do
    {
      double v17 = vmulq_f64(v15[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v15, (float64x2_t)xmmword_236F1D040));
      if (v17 < v13)
      {
        *(double *)(result + 8) = v17;
        double v13 = v17;
      }
      if (v17 > v14)
      {
        *(double *)(result + 40) = v17;
        double v14 = v17;
      }
      v15 += 2;
      --v16;
    }
    while (v16);
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 48) = 0xFFEFFFFFFFFFFFFFLL;
    double v18 = 1.79769313e308;
    double v19 = -1.79769313e308;
    float v20 = a2;
    uint64_t v21 = a3;
    do
    {
      double v22 = vmulq_f64(v20[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v20, (float64x2_t)xmmword_236F1D050));
      if (v22 < v18)
      {
        *(double *)(result + 16) = v22;
        double v18 = v22;
      }
      if (v22 > v19)
      {
        *(double *)(result + 48) = v22;
        double v19 = v22;
      }
      v20 += 2;
      --v21;
    }
    while (v21);
    *(void *)(result + 24) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 56) = 0xFFEFFFFFFFFFFFFFLL;
    double v23 = 1.79769313e308;
    double v24 = -1.79769313e308;
    a6.f64[0] = -0.577350269;
    float64x2_t v25 = (float64x2_t)vdupq_n_s64(0x3FE279A74590331CuLL);
    do
    {
      double v26 = vmulq_f64(a2[1], a6).f64[0] + vaddvq_f64(vmulq_f64(*a2, v25));
      if (v26 < v23)
      {
        *(double *)(result + 24) = v26;
        double v23 = v26;
      }
      if (v26 > v24)
      {
        *(double *)(result + 56) = v26;
        double v24 = v26;
      }
      a2 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 40) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 48) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 24) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 56) = 0xFFEFFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t geom::dop<(unsigned char)12,double>::dop(uint64_t result, float64x2_t *a2, uint64_t a3)
{
  float64x2_t v3 = 0uLL;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)float64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(void *)float64_t result = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(result + 48) = 0xFFEFFFFFFFFFFFFFLL;
  if (a3)
  {
    double v4 = 1.79769313e308;
    double v5 = -1.79769313e308;
    float64x2_t v6 = (float64x2_t)vdupq_n_s64(0x3FE6A09E667F3BCDuLL);
    double v7 = a2;
    uint64_t v8 = a3;
    do
    {
      double v9 = vmulq_f64(v7[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v7, v6));
      if (v9 < v4)
      {
        *(double *)float64_t result = v9;
        double v4 = v9;
      }
      if (v9 > v5)
      {
        *(double *)(result + 48) = v9;
        double v5 = v9;
      }
      v7 += 2;
      --v8;
    }
    while (v8);
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 56) = 0xFFEFFFFFFFFFFFFFLL;
    double v10 = 1.79769313e308;
    double v11 = -1.79769313e308;
    v3.f64[0] = 0.707106781;
    double v12 = a2;
    uint64_t v13 = a3;
    do
    {
      double v14 = vmulq_f64(v12[1], v3).f64[0] + vaddvq_f64(vmulq_f64(*v12, (float64x2_t)xmmword_236F1D060));
      if (v14 < v10)
      {
        *(double *)(result + 8) = v14;
        double v10 = v14;
      }
      if (v14 > v11)
      {
        *(double *)(result + 56) = v14;
        double v11 = v14;
      }
      v12 += 2;
      --v13;
    }
    while (v13);
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 64) = 0xFFEFFFFFFFFFFFFFLL;
    double v15 = 1.79769313e308;
    double v16 = -1.79769313e308;
    double v17 = a2;
    uint64_t v18 = a3;
    do
    {
      double v19 = vmulq_f64(v17[1], v3).f64[0] + vaddvq_f64(vmulq_f64(*v17, (float64x2_t)xmmword_236F1D070));
      if (v19 < v15)
      {
        *(double *)(result + 16) = v19;
        double v15 = v19;
      }
      if (v19 > v16)
      {
        *(double *)(result + 64) = v19;
        double v16 = v19;
      }
      v17 += 2;
      --v18;
    }
    while (v18);
    *(void *)(result + 24) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 72) = 0xFFEFFFFFFFFFFFFFLL;
    double v20 = 1.79769313e308;
    double v21 = -1.79769313e308;
    double v22 = a2;
    uint64_t v23 = a3;
    do
    {
      double v24 = vmulq_f64(v22[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v22, (float64x2_t)xmmword_236F1D080));
      if (v24 < v20)
      {
        *(double *)(result + 24) = v24;
        double v20 = v24;
      }
      if (v24 > v21)
      {
        *(double *)(result + 72) = v24;
        double v21 = v24;
      }
      v22 += 2;
      --v23;
    }
    while (v23);
    *(void *)(result + 32) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 80) = 0xFFEFFFFFFFFFFFFFLL;
    double v25 = 1.79769313e308;
    double v26 = -1.79769313e308;
    float v27 = a2;
    uint64_t v28 = a3;
    do
    {
      double v29 = vmulq_f64(v27[1], v3).f64[0] + vaddvq_f64(vmulq_f64(*v27, (float64x2_t)xmmword_236F1D090));
      if (v29 < v25)
      {
        *(double *)(result + 32) = v29;
        double v25 = v29;
      }
      if (v29 > v26)
      {
        *(double *)(result + 80) = v29;
        double v26 = v29;
      }
      v27 += 2;
      --v28;
    }
    while (v28);
    *(void *)(result + 40) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 88) = 0xFFEFFFFFFFFFFFFFLL;
    double v30 = 1.79769313e308;
    double v31 = -1.79769313e308;
    do
    {
      double v32 = vmulq_f64(a2[1], v3).f64[0] + vaddvq_f64(vmulq_f64(*a2, (float64x2_t)xmmword_236F1D0A0));
      if (v32 < v30)
      {
        *(double *)(result + 40) = v32;
        double v30 = v32;
      }
      if (v32 > v31)
      {
        *(double *)(result + 88) = v32;
        double v31 = v32;
      }
      a2 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 56) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 64) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 24) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 72) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 32) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 80) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 40) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 88) = 0xFFEFFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t geom::dop<(unsigned char)14,double>::dop(uint64_t result, float64x2_t *a2, uint64_t a3, double a4, double a5, float64x2_t a6)
{
  *(void *)(result + 48) = 0;
  float64x2_t v6 = 0uLL;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)float64_t result = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(void *)(result + 112) = 0;
  *(void *)float64_t result = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(result + 64) = 0xFFEFFFFFFFFFFFFFLL;
  if (a3)
  {
    double v7 = 1.79769313e308;
    double v8 = -1.79769313e308;
    double v9 = a2;
    uint64_t v10 = a3;
    do
    {
      double v11 = vmulq_f64(v9[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v9, (float64x2_t)xmmword_236F14150));
      if (v11 < v7)
      {
        *(double *)float64_t result = v11;
        double v7 = v11;
      }
      if (v11 > v8)
      {
        *(double *)(result + 64) = v11;
        double v8 = v11;
      }
      v9 += 2;
      --v10;
    }
    while (v10);
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 72) = 0xFFEFFFFFFFFFFFFFLL;
    double v12 = 1.79769313e308;
    double v13 = -1.79769313e308;
    double v14 = a2;
    uint64_t v15 = a3;
    do
    {
      double v16 = vmulq_f64(v14[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v14, (float64x2_t)xmmword_236F14160));
      if (v16 < v12)
      {
        *(double *)(result + 8) = v16;
        double v12 = v16;
      }
      if (v16 > v13)
      {
        *(double *)(result + 72) = v16;
        double v13 = v16;
      }
      v14 += 2;
      --v15;
    }
    while (v15);
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 80) = 0xFFEFFFFFFFFFFFFFLL;
    double v17 = 1.79769313e308;
    double v18 = -1.79769313e308;
    double v19 = a2;
    uint64_t v20 = a3;
    do
    {
      double v21 = v19[1].f64[0] + vaddvq_f64(vmulq_f64(*v19, (float64x2_t)0));
      if (v21 < v17)
      {
        *(double *)(result + 16) = v21;
        double v17 = v21;
      }
      if (v21 > v18)
      {
        *(double *)(result + 80) = v21;
        double v18 = v21;
      }
      v19 += 2;
      --v20;
    }
    while (v20);
    *(void *)(result + 24) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 88) = 0xFFEFFFFFFFFFFFFFLL;
    double v22 = 1.79769313e308;
    double v23 = -1.79769313e308;
    v6.f64[0] = 0.577350269;
    float64x2_t v24 = (float64x2_t)vdupq_n_s64(0x3FE279A74590331CuLL);
    double v25 = a2;
    uint64_t v26 = a3;
    do
    {
      double v27 = vmulq_f64(v25[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v25, v24));
      if (v27 < v22)
      {
        *(double *)(result + 24) = v27;
        double v22 = v27;
      }
      if (v27 > v23)
      {
        *(double *)(result + 88) = v27;
        double v23 = v27;
      }
      v25 += 2;
      --v26;
    }
    while (v26);
    *(void *)(result + 32) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 96) = 0xFFEFFFFFFFFFFFFFLL;
    double v28 = 1.79769313e308;
    double v29 = -1.79769313e308;
    double v30 = a2;
    uint64_t v31 = a3;
    do
    {
      double v32 = vmulq_f64(v30[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v30, (float64x2_t)xmmword_236F1D040));
      if (v32 < v28)
      {
        *(double *)(result + 32) = v32;
        double v28 = v32;
      }
      if (v32 > v29)
      {
        *(double *)(result + 96) = v32;
        double v29 = v32;
      }
      v30 += 2;
      --v31;
    }
    while (v31);
    *(void *)(result + 40) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 104) = 0xFFEFFFFFFFFFFFFFLL;
    double v33 = 1.79769313e308;
    double v34 = -1.79769313e308;
    float v35 = a2;
    uint64_t v36 = a3;
    do
    {
      double v37 = vmulq_f64(v35[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v35, (float64x2_t)xmmword_236F1D050));
      if (v37 < v33)
      {
        *(double *)(result + 40) = v37;
        double v33 = v37;
      }
      if (v37 > v34)
      {
        *(double *)(result + 104) = v37;
        double v34 = v37;
      }
      v35 += 2;
      --v36;
    }
    while (v36);
    *(void *)(result + 48) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 112) = 0xFFEFFFFFFFFFFFFFLL;
    double v38 = 1.79769313e308;
    double v39 = -1.79769313e308;
    a6.f64[0] = -0.577350269;
    float64x2_t v40 = (float64x2_t)vdupq_n_s64(0x3FE279A74590331CuLL);
    do
    {
      double v41 = vmulq_f64(a2[1], a6).f64[0] + vaddvq_f64(vmulq_f64(*a2, v40));
      if (v41 < v38)
      {
        *(double *)(result + 48) = v41;
        double v38 = v41;
      }
      if (v41 > v39)
      {
        *(double *)(result + 112) = v41;
        double v39 = v41;
      }
      a2 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 72) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 80) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 24) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 88) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 32) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 96) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 40) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 104) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 48) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 112) = 0xFFEFFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t geom::dop<(unsigned char)18,double>::dop(uint64_t result, float64x2_t *a2, uint64_t a3)
{
  *(void *)(result + 64) = 0;
  float64x2_t v3 = 0uLL;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)float64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(void *)(result + 144) = 0;
  *(void *)float64_t result = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(result + 80) = 0xFFEFFFFFFFFFFFFFLL;
  if (a3)
  {
    double v4 = 1.79769313e308;
    double v5 = -1.79769313e308;
    float64x2_t v6 = a2;
    uint64_t v7 = a3;
    do
    {
      double v8 = vmulq_f64(v6[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v6, (float64x2_t)xmmword_236F14150));
      if (v8 < v4)
      {
        *(double *)float64_t result = v8;
        double v4 = v8;
      }
      if (v8 > v5)
      {
        *(double *)(result + 80) = v8;
        double v5 = v8;
      }
      v6 += 2;
      --v7;
    }
    while (v7);
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 88) = 0xFFEFFFFFFFFFFFFFLL;
    double v9 = 1.79769313e308;
    double v10 = -1.79769313e308;
    double v11 = a2;
    uint64_t v12 = a3;
    do
    {
      double v13 = vmulq_f64(v11[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v11, (float64x2_t)xmmword_236F14160));
      if (v13 < v9)
      {
        *(double *)(result + 8) = v13;
        double v9 = v13;
      }
      if (v13 > v10)
      {
        *(double *)(result + 88) = v13;
        double v10 = v13;
      }
      v11 += 2;
      --v12;
    }
    while (v12);
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 96) = 0xFFEFFFFFFFFFFFFFLL;
    double v14 = 1.79769313e308;
    double v15 = -1.79769313e308;
    double v16 = a2;
    uint64_t v17 = a3;
    do
    {
      double v18 = v16[1].f64[0] + vaddvq_f64(vmulq_f64(*v16, (float64x2_t)0));
      if (v18 < v14)
      {
        *(double *)(result + 16) = v18;
        double v14 = v18;
      }
      if (v18 > v15)
      {
        *(double *)(result + 96) = v18;
        double v15 = v18;
      }
      v16 += 2;
      --v17;
    }
    while (v17);
    *(void *)(result + 24) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 104) = 0xFFEFFFFFFFFFFFFFLL;
    double v19 = 1.79769313e308;
    double v20 = -1.79769313e308;
    float64x2_t v21 = (float64x2_t)vdupq_n_s64(0x3FE6A09E667F3BCDuLL);
    double v22 = a2;
    uint64_t v23 = a3;
    do
    {
      double v24 = vmulq_f64(v22[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v22, v21));
      if (v24 < v19)
      {
        *(double *)(result + 24) = v24;
        double v19 = v24;
      }
      if (v24 > v20)
      {
        *(double *)(result + 104) = v24;
        double v20 = v24;
      }
      v22 += 2;
      --v23;
    }
    while (v23);
    *(void *)(result + 32) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 112) = 0xFFEFFFFFFFFFFFFFLL;
    double v25 = 1.79769313e308;
    double v26 = -1.79769313e308;
    v3.f64[0] = 0.707106781;
    double v27 = a2;
    uint64_t v28 = a3;
    do
    {
      double v29 = vmulq_f64(v27[1], v3).f64[0] + vaddvq_f64(vmulq_f64(*v27, (float64x2_t)xmmword_236F1D060));
      if (v29 < v25)
      {
        *(double *)(result + 32) = v29;
        double v25 = v29;
      }
      if (v29 > v26)
      {
        *(double *)(result + 112) = v29;
        double v26 = v29;
      }
      v27 += 2;
      --v28;
    }
    while (v28);
    *(void *)(result + 40) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 120) = 0xFFEFFFFFFFFFFFFFLL;
    double v30 = 1.79769313e308;
    double v31 = -1.79769313e308;
    double v32 = a2;
    uint64_t v33 = a3;
    do
    {
      double v34 = vmulq_f64(v32[1], v3).f64[0] + vaddvq_f64(vmulq_f64(*v32, (float64x2_t)xmmword_236F1D070));
      if (v34 < v30)
      {
        *(double *)(result + 40) = v34;
        double v30 = v34;
      }
      if (v34 > v31)
      {
        *(double *)(result + 120) = v34;
        double v31 = v34;
      }
      v32 += 2;
      --v33;
    }
    while (v33);
    *(void *)(result + 48) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 128) = 0xFFEFFFFFFFFFFFFFLL;
    double v35 = 1.79769313e308;
    double v36 = -1.79769313e308;
    double v37 = a2;
    uint64_t v38 = a3;
    do
    {
      double v39 = vmulq_f64(v37[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v37, (float64x2_t)xmmword_236F1D080));
      if (v39 < v35)
      {
        *(double *)(result + 48) = v39;
        double v35 = v39;
      }
      if (v39 > v36)
      {
        *(double *)(result + 128) = v39;
        double v36 = v39;
      }
      v37 += 2;
      --v38;
    }
    while (v38);
    *(void *)(result + 56) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 136) = 0xFFEFFFFFFFFFFFFFLL;
    double v40 = 1.79769313e308;
    double v41 = -1.79769313e308;
    uint64_t v42 = a2;
    uint64_t v43 = a3;
    do
    {
      double v44 = vmulq_f64(v42[1], v3).f64[0] + vaddvq_f64(vmulq_f64(*v42, (float64x2_t)xmmword_236F1D090));
      if (v44 < v40)
      {
        *(double *)(result + 56) = v44;
        double v40 = v44;
      }
      if (v44 > v41)
      {
        *(double *)(result + 136) = v44;
        double v41 = v44;
      }
      v42 += 2;
      --v43;
    }
    while (v43);
    *(void *)(result + 64) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 144) = 0xFFEFFFFFFFFFFFFFLL;
    double v45 = 1.79769313e308;
    double v46 = -1.79769313e308;
    do
    {
      double v47 = vmulq_f64(a2[1], v3).f64[0] + vaddvq_f64(vmulq_f64(*a2, (float64x2_t)xmmword_236F1D0A0));
      if (v47 < v45)
      {
        *(double *)(result + 64) = v47;
        double v45 = v47;
      }
      if (v47 > v46)
      {
        *(double *)(result + 144) = v47;
        double v46 = v47;
      }
      a2 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 88) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 96) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 24) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 104) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 32) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 112) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 40) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 120) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 48) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 128) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 56) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 136) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 64) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 144) = 0xFFEFFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t geom::dop<(unsigned char)20,double>::dop(uint64_t result, float64x2_t *a2, uint64_t a3, double a4, double a5, float64x2_t a6)
{
  v6.f64[1] = 0.0;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 96) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)float64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(void *)float64_t result = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(result + 80) = 0xFFEFFFFFFFFFFFFFLL;
  if (a3)
  {
    double v7 = 1.79769313e308;
    double v8 = -1.79769313e308;
    v6.f64[0] = 0.577350269;
    float64x2_t v9 = (float64x2_t)vdupq_n_s64(0x3FE279A74590331CuLL);
    double v10 = a2;
    uint64_t v11 = a3;
    do
    {
      double v12 = vmulq_f64(v10[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v10, v9));
      if (v12 < v7)
      {
        *(double *)float64_t result = v12;
        double v7 = v12;
      }
      if (v12 > v8)
      {
        *(double *)(result + 80) = v12;
        double v8 = v12;
      }
      v10 += 2;
      --v11;
    }
    while (v11);
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 88) = 0xFFEFFFFFFFFFFFFFLL;
    double v13 = 1.79769313e308;
    double v14 = -1.79769313e308;
    double v15 = a2;
    uint64_t v16 = a3;
    do
    {
      double v17 = vmulq_f64(v15[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v15, (float64x2_t)xmmword_236F1D040));
      if (v17 < v13)
      {
        *(double *)(result + 8) = v17;
        double v13 = v17;
      }
      if (v17 > v14)
      {
        *(double *)(result + 88) = v17;
        double v14 = v17;
      }
      v15 += 2;
      --v16;
    }
    while (v16);
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 96) = 0xFFEFFFFFFFFFFFFFLL;
    double v18 = 1.79769313e308;
    double v19 = -1.79769313e308;
    double v20 = a2;
    uint64_t v21 = a3;
    do
    {
      double v22 = vmulq_f64(v20[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v20, (float64x2_t)xmmword_236F1D050));
      if (v22 < v18)
      {
        *(double *)(result + 16) = v22;
        double v18 = v22;
      }
      if (v22 > v19)
      {
        *(double *)(result + 96) = v22;
        double v19 = v22;
      }
      v20 += 2;
      --v21;
    }
    while (v21);
    *(void *)(result + 24) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 104) = 0xFFEFFFFFFFFFFFFFLL;
    double v23 = 1.79769313e308;
    double v24 = -1.79769313e308;
    a6.f64[0] = -0.577350269;
    float64x2_t v25 = (float64x2_t)vdupq_n_s64(0x3FE279A74590331CuLL);
    double v26 = a2;
    uint64_t v27 = a3;
    do
    {
      double v28 = vmulq_f64(v26[1], a6).f64[0] + vaddvq_f64(vmulq_f64(*v26, v25));
      if (v28 < v23)
      {
        *(double *)(result + 24) = v28;
        double v23 = v28;
      }
      if (v28 > v24)
      {
        *(double *)(result + 104) = v28;
        double v24 = v28;
      }
      v26 += 2;
      --v27;
    }
    while (v27);
    *(void *)(result + 32) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 112) = 0xFFEFFFFFFFFFFFFFLL;
    double v29 = 1.79769313e308;
    double v30 = -1.79769313e308;
    float64x2_t v31 = (float64x2_t)vdupq_n_s64(0x3FE6A09E667F3BCDuLL);
    double v32 = a2;
    uint64_t v33 = a3;
    do
    {
      double v34 = vmulq_f64(v32[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v32, v31));
      if (v34 < v29)
      {
        *(double *)(result + 32) = v34;
        double v29 = v34;
      }
      if (v34 > v30)
      {
        *(double *)(result + 112) = v34;
        double v30 = v34;
      }
      v32 += 2;
      --v33;
    }
    while (v33);
    *(void *)(result + 40) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 120) = 0xFFEFFFFFFFFFFFFFLL;
    double v35 = 1.79769313e308;
    double v36 = -1.79769313e308;
    v6.f64[0] = 0.707106781;
    double v37 = a2;
    uint64_t v38 = a3;
    do
    {
      double v39 = vmulq_f64(v37[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v37, (float64x2_t)xmmword_236F1D060));
      if (v39 < v35)
      {
        *(double *)(result + 40) = v39;
        double v35 = v39;
      }
      if (v39 > v36)
      {
        *(double *)(result + 120) = v39;
        double v36 = v39;
      }
      v37 += 2;
      --v38;
    }
    while (v38);
    *(void *)(result + 48) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 128) = 0xFFEFFFFFFFFFFFFFLL;
    double v40 = 1.79769313e308;
    double v41 = -1.79769313e308;
    uint64_t v42 = a2;
    uint64_t v43 = a3;
    do
    {
      double v44 = vmulq_f64(v42[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v42, (float64x2_t)xmmword_236F1D070));
      if (v44 < v40)
      {
        *(double *)(result + 48) = v44;
        double v40 = v44;
      }
      if (v44 > v41)
      {
        *(double *)(result + 128) = v44;
        double v41 = v44;
      }
      v42 += 2;
      --v43;
    }
    while (v43);
    *(void *)(result + 56) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 136) = 0xFFEFFFFFFFFFFFFFLL;
    double v45 = 1.79769313e308;
    double v46 = -1.79769313e308;
    double v47 = a2;
    uint64_t v48 = a3;
    do
    {
      double v49 = vmulq_f64(v47[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v47, (float64x2_t)xmmword_236F1D080));
      if (v49 < v45)
      {
        *(double *)(result + 56) = v49;
        double v45 = v49;
      }
      if (v49 > v46)
      {
        *(double *)(result + 136) = v49;
        double v46 = v49;
      }
      v47 += 2;
      --v48;
    }
    while (v48);
    *(void *)(result + 64) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 144) = 0xFFEFFFFFFFFFFFFFLL;
    double v50 = 1.79769313e308;
    double v51 = -1.79769313e308;
    float v52 = a2;
    uint64_t v53 = a3;
    do
    {
      double v54 = vmulq_f64(v52[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v52, (float64x2_t)xmmword_236F1D090));
      if (v54 < v50)
      {
        *(double *)(result + 64) = v54;
        double v50 = v54;
      }
      if (v54 > v51)
      {
        *(double *)(result + 144) = v54;
        double v51 = v54;
      }
      v52 += 2;
      --v53;
    }
    while (v53);
    *(void *)(result + 72) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 152) = 0xFFEFFFFFFFFFFFFFLL;
    double v55 = 1.79769313e308;
    double v56 = -1.79769313e308;
    do
    {
      double v57 = vmulq_f64(a2[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*a2, (float64x2_t)xmmword_236F1D0A0));
      if (v57 < v55)
      {
        *(double *)(result + 72) = v57;
        double v55 = v57;
      }
      if (v57 > v56)
      {
        *(double *)(result + 152) = v57;
        double v56 = v57;
      }
      a2 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 88) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 96) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 24) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 104) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 32) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 112) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 40) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 120) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 48) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 128) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 56) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 136) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 64) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 144) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 72) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 152) = 0xFFEFFFFFFFFFFFFFLL;
  }
  return result;
}

uint64_t geom::dop<(unsigned char)26,double>::dop(uint64_t result, float64x2_t *a2, uint64_t a3, double a4, double a5, float64x2_t a6)
{
  *(void *)(result + 96) = 0;
  float64x2_t v6 = 0uLL;
  *(_OWORD *)(result + 64) = 0u;
  *(_OWORD *)(result + 80) = 0u;
  *(_OWORD *)(result + 32) = 0u;
  *(_OWORD *)(result + 48) = 0u;
  *(_OWORD *)float64_t result = 0u;
  *(_OWORD *)(result + 16) = 0u;
  *(_OWORD *)(result + 112) = 0u;
  *(_OWORD *)(result + 128) = 0u;
  *(_OWORD *)(result + 144) = 0u;
  *(_OWORD *)(result + 160) = 0u;
  *(_OWORD *)(result + 176) = 0u;
  *(_OWORD *)(result + 192) = 0u;
  *(void *)(result + 208) = 0;
  *(void *)float64_t result = 0x7FEFFFFFFFFFFFFFLL;
  *(void *)(result + 112) = 0xFFEFFFFFFFFFFFFFLL;
  if (a3)
  {
    double v7 = 1.79769313e308;
    double v8 = -1.79769313e308;
    float64x2_t v9 = a2;
    uint64_t v10 = a3;
    do
    {
      double v11 = vmulq_f64(v9[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v9, (float64x2_t)xmmword_236F14150));
      if (v11 < v7)
      {
        *(double *)float64_t result = v11;
        double v7 = v11;
      }
      if (v11 > v8)
      {
        *(double *)(result + 112) = v11;
        double v8 = v11;
      }
      v9 += 2;
      --v10;
    }
    while (v10);
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 120) = 0xFFEFFFFFFFFFFFFFLL;
    double v12 = 1.79769313e308;
    double v13 = -1.79769313e308;
    double v14 = a2;
    uint64_t v15 = a3;
    do
    {
      double v16 = vmulq_f64(v14[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v14, (float64x2_t)xmmword_236F14160));
      if (v16 < v12)
      {
        *(double *)(result + 8) = v16;
        double v12 = v16;
      }
      if (v16 > v13)
      {
        *(double *)(result + 120) = v16;
        double v13 = v16;
      }
      v14 += 2;
      --v15;
    }
    while (v15);
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 128) = 0xFFEFFFFFFFFFFFFFLL;
    double v17 = 1.79769313e308;
    double v18 = -1.79769313e308;
    double v19 = a2;
    uint64_t v20 = a3;
    do
    {
      double v21 = v19[1].f64[0] + vaddvq_f64(vmulq_f64(*v19, (float64x2_t)0));
      if (v21 < v17)
      {
        *(double *)(result + 16) = v21;
        double v17 = v21;
      }
      if (v21 > v18)
      {
        *(double *)(result + 128) = v21;
        double v18 = v21;
      }
      v19 += 2;
      --v20;
    }
    while (v20);
    *(void *)(result + 24) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 136) = 0xFFEFFFFFFFFFFFFFLL;
    double v22 = 1.79769313e308;
    double v23 = -1.79769313e308;
    v6.f64[0] = 0.577350269;
    float64x2_t v24 = (float64x2_t)vdupq_n_s64(0x3FE279A74590331CuLL);
    float64x2_t v25 = a2;
    uint64_t v26 = a3;
    do
    {
      double v27 = vmulq_f64(v25[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v25, v24));
      if (v27 < v22)
      {
        *(double *)(result + 24) = v27;
        double v22 = v27;
      }
      if (v27 > v23)
      {
        *(double *)(result + 136) = v27;
        double v23 = v27;
      }
      v25 += 2;
      --v26;
    }
    while (v26);
    *(void *)(result + 32) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 144) = 0xFFEFFFFFFFFFFFFFLL;
    double v28 = 1.79769313e308;
    double v29 = -1.79769313e308;
    double v30 = a2;
    uint64_t v31 = a3;
    do
    {
      double v32 = vmulq_f64(v30[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v30, (float64x2_t)xmmword_236F1D040));
      if (v32 < v28)
      {
        *(double *)(result + 32) = v32;
        double v28 = v32;
      }
      if (v32 > v29)
      {
        *(double *)(result + 144) = v32;
        double v29 = v32;
      }
      v30 += 2;
      --v31;
    }
    while (v31);
    *(void *)(result + 40) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 152) = 0xFFEFFFFFFFFFFFFFLL;
    double v33 = 1.79769313e308;
    double v34 = -1.79769313e308;
    double v35 = a2;
    uint64_t v36 = a3;
    do
    {
      double v37 = vmulq_f64(v35[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v35, (float64x2_t)xmmword_236F1D050));
      if (v37 < v33)
      {
        *(double *)(result + 40) = v37;
        double v33 = v37;
      }
      if (v37 > v34)
      {
        *(double *)(result + 152) = v37;
        double v34 = v37;
      }
      v35 += 2;
      --v36;
    }
    while (v36);
    *(void *)(result + 48) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 160) = 0xFFEFFFFFFFFFFFFFLL;
    double v38 = 1.79769313e308;
    double v39 = -1.79769313e308;
    a6.f64[0] = -0.577350269;
    float64x2_t v40 = (float64x2_t)vdupq_n_s64(0x3FE279A74590331CuLL);
    double v41 = a2;
    uint64_t v42 = a3;
    do
    {
      double v43 = vmulq_f64(v41[1], a6).f64[0] + vaddvq_f64(vmulq_f64(*v41, v40));
      if (v43 < v38)
      {
        *(double *)(result + 48) = v43;
        double v38 = v43;
      }
      if (v43 > v39)
      {
        *(double *)(result + 160) = v43;
        double v39 = v43;
      }
      v41 += 2;
      --v42;
    }
    while (v42);
    *(void *)(result + 56) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 168) = 0xFFEFFFFFFFFFFFFFLL;
    double v44 = 1.79769313e308;
    double v45 = -1.79769313e308;
    float64x2_t v46 = (float64x2_t)vdupq_n_s64(0x3FE6A09E667F3BCDuLL);
    double v47 = a2;
    uint64_t v48 = a3;
    do
    {
      double v49 = vmulq_f64(v47[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v47, v46));
      if (v49 < v44)
      {
        *(double *)(result + 56) = v49;
        double v44 = v49;
      }
      if (v49 > v45)
      {
        *(double *)(result + 168) = v49;
        double v45 = v49;
      }
      v47 += 2;
      --v48;
    }
    while (v48);
    *(void *)(result + 64) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 176) = 0xFFEFFFFFFFFFFFFFLL;
    double v50 = 1.79769313e308;
    double v51 = -1.79769313e308;
    v6.f64[0] = 0.707106781;
    float v52 = a2;
    uint64_t v53 = a3;
    do
    {
      double v54 = vmulq_f64(v52[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v52, (float64x2_t)xmmword_236F1D060));
      if (v54 < v50)
      {
        *(double *)(result + 64) = v54;
        double v50 = v54;
      }
      if (v54 > v51)
      {
        *(double *)(result + 176) = v54;
        double v51 = v54;
      }
      v52 += 2;
      --v53;
    }
    while (v53);
    *(void *)(result + 72) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 184) = 0xFFEFFFFFFFFFFFFFLL;
    double v55 = 1.79769313e308;
    double v56 = -1.79769313e308;
    double v57 = a2;
    uint64_t v58 = a3;
    do
    {
      double v59 = vmulq_f64(v57[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v57, (float64x2_t)xmmword_236F1D070));
      if (v59 < v55)
      {
        *(double *)(result + 72) = v59;
        double v55 = v59;
      }
      if (v59 > v56)
      {
        *(double *)(result + 184) = v59;
        double v56 = v59;
      }
      v57 += 2;
      --v58;
    }
    while (v58);
    *(void *)(result + 80) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 192) = 0xFFEFFFFFFFFFFFFFLL;
    double v60 = 1.79769313e308;
    double v61 = -1.79769313e308;
    float32x4_t v62 = a2;
    uint64_t v63 = a3;
    do
    {
      double v64 = vmulq_f64(v62[1], (float64x2_t)0).f64[0] + vaddvq_f64(vmulq_f64(*v62, (float64x2_t)xmmword_236F1D080));
      if (v64 < v60)
      {
        *(double *)(result + 80) = v64;
        double v60 = v64;
      }
      if (v64 > v61)
      {
        *(double *)(result + 192) = v64;
        double v61 = v64;
      }
      v62 += 2;
      --v63;
    }
    while (v63);
    *(void *)(result + 88) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 200) = 0xFFEFFFFFFFFFFFFFLL;
    double v65 = 1.79769313e308;
    double v66 = -1.79769313e308;
    uint64_t v67 = a2;
    uint64_t v68 = a3;
    do
    {
      double v69 = vmulq_f64(v67[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*v67, (float64x2_t)xmmword_236F1D090));
      if (v69 < v65)
      {
        *(double *)(result + 88) = v69;
        double v65 = v69;
      }
      if (v69 > v66)
      {
        *(double *)(result + 200) = v69;
        double v66 = v69;
      }
      v67 += 2;
      --v68;
    }
    while (v68);
    *(void *)(result + 96) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 208) = 0xFFEFFFFFFFFFFFFFLL;
    double v70 = 1.79769313e308;
    double v71 = -1.79769313e308;
    do
    {
      double v72 = vmulq_f64(a2[1], v6).f64[0] + vaddvq_f64(vmulq_f64(*a2, (float64x2_t)xmmword_236F1D0A0));
      if (v72 < v70)
      {
        *(double *)(result + 96) = v72;
        double v70 = v72;
      }
      if (v72 > v71)
      {
        *(double *)(result + 208) = v72;
        double v71 = v72;
      }
      a2 += 2;
      --a3;
    }
    while (a3);
  }
  else
  {
    *(void *)(result + 8) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 120) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 16) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 128) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 24) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 136) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 32) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 144) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 40) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 152) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 48) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 160) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 56) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 168) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 64) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 176) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 72) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 184) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 80) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 192) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 88) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 200) = 0xFFEFFFFFFFFFFFFFLL;
    *(void *)(result + 96) = 0x7FEFFFFFFFFFFFFFLL;
    *(void *)(result + 208) = 0xFFEFFFFFFFFFFFFFLL;
  }
  return result;
}

double geom_robust_oriented_bounding_box_2f(std::vector<int>::size_type a1, void *a2)
{
  geom::robust_oriented_bounding_box_2<float>(a1, a2, &v3, &v4, &v5, &v6);
  return v3;
}

void geom::robust_oriented_bounding_box_2<float>(std::vector<int>::size_type a1, void *a2, void *a3, float32x2_t *a4, float32x2_t *a5, int32x2_t *a6)
{
  if (a1 == 1)
  {
    *a3 = *a2;
    *a4 = (float32x2_t)1065353216;
    *a5 = (float32x2_t)0x3F80000000000000;
    *a6 = 0;
  }
  else
  {
    memset(&v74, 0, sizeof(v74));
    geom::convex_hull_2<float>(a1, (uint64_t)a2, &v74);
    std::vector<int>::pointer begin = v74.__begin_;
    float32x2_t v12 = (float32x2_t)a2[*v74.__begin_];
    float32x2_t v13 = vsub_f32((float32x2_t)a2[*((unsigned int *)v74.__begin_ + 1)], v12);
    float32x2_t v14 = vmul_f32(v13, v13);
    v14.f32[0] = sqrtf(vaddv_f32(v14));
    unint64_t v15 = v74.__end_ - v74.__begin_;
    if ((std::vector<int>::pointer)((char *)v74.__end_ - (char *)v74.__begin_) < (std::vector<int>::pointer)9)
    {
      unint64_t v16 = 0;
      uint64_t v22 = 1;
      float v23 = 0.0;
      float v18 = 0.0;
      uint64_t v19 = 1;
    }
    else
    {
      LODWORD(v16) = 0;
      float32x2_t v17 = vdiv_f32(v13, (float32x2_t)vdup_lane_s32((int32x2_t)v14, 0));
      float v18 = 0.0;
      LODWORD(v19) = 1;
      unsigned int v20 = 3;
      uint64_t v21 = 2;
      LODWORD(v22) = 1;
      float v23 = 0.0;
      do
      {
        unsigned int v24 = v20 - 1;
        float32x2_t v25 = vsub_f32((float32x2_t)a2[v74.__begin_[v21]], v12);
        float32x2_t v26 = vmul_f32(v17, v25);
        float32x2_t v27 = vadd_f32(v26, (float32x2_t)vdup_lane_s32((int32x2_t)v26, 1));
        float v28 = vaddv_f32(v26);
        if (v28 > v14.f32[0]) {
          float v29 = v28;
        }
        else {
          float v29 = v14.f32[0];
        }
        if (v28 > v14.f32[0]) {
          unsigned int v30 = v20 - 1;
        }
        else {
          unsigned int v30 = v19;
        }
        BOOL v31 = v28 < v18;
        if (v28 < v18) {
          float v18 = v28;
        }
        else {
          v14.f32[0] = v29;
        }
        if (v31) {
          uint64_t v19 = v19;
        }
        else {
          uint64_t v19 = v30;
        }
        if (v31) {
          unint64_t v16 = v24;
        }
        else {
          unint64_t v16 = v16;
        }
        float32x2_t v32 = vmls_lane_f32(v25, v17, v27, 0);
        float v33 = vaddv_f32(vmul_f32(v32, v32));
        if (v33 <= v23)
        {
          uint64_t v22 = v22;
        }
        else
        {
          float v23 = v33;
          uint64_t v22 = v24;
        }
        uint64_t v21 = v20;
      }
      while (v15 > v20++);
    }
    int v35 = 0;
    LODWORD(v36) = 0;
    float v37 = sqrtf(v23) * (float)(v14.f32[0] - v18);
    do
    {
      unint64_t v36 = (v36 + 1) % v15;
      float32x2_t v38 = (float32x2_t)a2[v74.__begin_[v36]];
      float32x2_t v39 = vsub_f32((float32x2_t)a2[v74.__begin_[(v36 + 1) % v15]], v38);
      float32x2_t v40 = vmul_f32(v39, v39);
      v40.i32[0] = vadd_f32(v40, (float32x2_t)vdup_lane_s32((int32x2_t)v40, 1)).u32[0];
      float32x2_t v41 = vrsqrte_f32((float32x2_t)v40.u32[0]);
      float32x2_t v42 = vmul_f32(v41, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v41, v41)));
      float32x2_t v43 = vmul_n_f32(v39, vmul_f32(v42, vrsqrts_f32((float32x2_t)v40.u32[0], vmul_f32(v42, v42))).f32[0]);
      float32x2_t v44 = vsub_f32((float32x2_t)a2[v74.__begin_[v22]], v38);
      float v45 = vaddv_f32(vmul_f32(v43, vsub_f32((float32x2_t)a2[v74.__begin_[v16]], v38)));
      float32x2_t v46 = vmul_f32(v43, v44);
      float32x2_t v47 = vmul_f32(v43, vsub_f32((float32x2_t)a2[v74.__begin_[v19]], v38));
      float32x2_t v48 = vneg_f32(v43);
      float32x2_t v49 = vmls_lane_f32(v44, v43, vadd_f32(v46, (float32x2_t)vdup_lane_s32((int32x2_t)v46, 1)), 0);
      float32x2_t v50 = vmul_f32(v49, v49);
      unint64_t v51 = v16;
      do
      {
        unint64_t v16 = v51;
        float v52 = v45;
        unint64_t v51 = (v51 + 1) % v15;
        float v45 = vaddv_f32(vmul_f32(v43, vsub_f32((float32x2_t)a2[v74.__begin_[v51]], v38)));
      }
      while (v45 < v52);
      float v53 = vaddv_f32(v47);
      unint64_t v54 = v19;
      do
      {
        uint64_t v19 = v54;
        float v55 = v53;
        unint64_t v54 = (v54 + 1) % v15;
        float v53 = vaddv_f32(vmul_f32(v43, vsub_f32((float32x2_t)a2[v74.__begin_[v54]], v38)));
      }
      while (v53 > v55);
      float v56 = vaddv_f32(v50);
      unint64_t v57 = v22;
      do
      {
        uint64_t v22 = v57;
        unint64_t v57 = (v57 + 1) % v15;
        float32x2_t v58 = vsub_f32((float32x2_t)a2[v74.__begin_[v57]], v38);
        float32x2_t v59 = vmul_f32(v43, v58);
        float v60 = v56;
        float32x2_t v61 = vmla_n_f32(v58, v48, vadd_f32(v59, (float32x2_t)vdup_lane_s32((int32x2_t)v59, 1)).f32[0]);
        float v56 = vaddv_f32(vmul_f32(v61, v61));
      }
      while (v56 > v60);
      float v62 = sqrtf(v60);
      if ((float)((float)(v55 - v52) * v62) < v37)
      {
        float v23 = v60;
        v14.f32[0] = v55;
        float v18 = v52;
        int v35 = v36;
        float v37 = (float)(v55 - v52) * v62;
      }
    }
    while (v36);
    float32x2_t v63 = vsub_f32((float32x2_t)a2[v74.__begin_[(v35 + 1) % v15]], (float32x2_t)a2[v74.__begin_[v35]]);
    float32x2_t v64 = vmul_f32(v63, v63);
    v64.i32[0] = vadd_f32(v64, (float32x2_t)vdup_lane_s32((int32x2_t)v64, 1)).u32[0];
    float32x2_t v65 = vrsqrte_f32((float32x2_t)v64.u32[0]);
    float32x2_t v66 = vmul_f32(v65, vrsqrts_f32((float32x2_t)v64.u32[0], vmul_f32(v65, v65)));
    int32x2_t v67 = (int32x2_t)vmul_f32(v66, vrsqrts_f32((float32x2_t)v64.u32[0], vmul_f32(v66, v66)));
    float32x2_t v68 = vmul_n_f32(v63, *(float *)v67.i32);
    *a4 = v68;
    *(float *)v67.i32 = -v68.f32[1];
    *a5 = (float32x2_t)vzip1_s32(v67, (int32x2_t)v68);
    v69.f32[0] = v14.f32[0] - v18;
    v69.i32[1] = sqrtf(v23);
    float32x2_t v70 = vmul_f32(v69, (float32x2_t)0x3F0000003F000000);
    *a6 = (int32x2_t)v70;
    *a3 = vmla_lane_f32(vmla_n_f32(vmla_n_f32((float32x2_t)a2[begin[v35]], v68, v18), *a4, v70.f32[0]), *a5, v70, 1);
    float32x2_t v71 = *a4;
    if (vmlas_n_f32((float)-COERCE_FLOAT(HIDWORD(*(unint64_t *)a4)) * COERCE_FLOAT(*a5), COERCE_FLOAT(HIDWORD(*(unint64_t *)a5)), COERCE_FLOAT(*a4)) >= 0.0)
    {
      float32x2_t v72 = (float32x2_t)*a6;
    }
    else
    {
      *a4 = *a5;
      *a5 = v71;
      float32x2_t v72 = (float32x2_t)vrev64_s32(*a6);
      *a6 = (int32x2_t)v72;
    }
    if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v72, 1), v72).u8[0])
    {
      float32x2_t v73 = *a4;
      *a4 = *a5;
      *a5 = v73;
      *a6 = vrev64_s32(*a6);
      *a5 = vneg_f32(*a5);
    }
    v74.__end_ = begin;
    operator delete(begin);
  }
}

double geom_robust_oriented_bounding_box_2d(std::vector<int>::size_type a1, _OWORD *a2)
{
  geom::robust_oriented_bounding_box_2<double>(a1, a2, &v3, &v4, &v5, &v6);
  return *(double *)&v3;
}

void geom::robust_oriented_bounding_box_2<double>(std::vector<int>::size_type a1, _OWORD *a2, _OWORD *a3, float64x2_t *a4, float64x2_t *a5, int8x16_t *a6)
{
  if (a1 == 1)
  {
    *a3 = *a2;
    *a4 = (float64x2_t)xmmword_236F14150;
    *a5 = (float64x2_t)xmmword_236F14160;
    a6->i64[0] = 0;
    a6->i64[1] = 0;
  }
  else
  {
    memset(&v72, 0, sizeof(v72));
    geom::convex_hull_2<double>(a1, (uint64_t)a2, &v72);
    std::vector<int>::pointer begin = v72.__begin_;
    float64x2_t v12 = (float64x2_t)a2[*v72.__begin_];
    float64x2_t v13 = vsubq_f64((float64x2_t)a2[*((unsigned int *)v72.__begin_ + 1)], v12);
    double v14 = sqrt(vaddvq_f64(vmulq_f64(v13, v13)));
    unint64_t v15 = v72.__end_ - v72.__begin_;
    if ((std::vector<int>::pointer)((char *)v72.__end_ - (char *)v72.__begin_) < (std::vector<int>::pointer)9)
    {
      unint64_t v16 = 0;
      uint64_t v22 = 1;
      double v23 = 0.0;
      double v18 = 0.0;
      uint64_t v19 = 1;
    }
    else
    {
      LODWORD(v16) = 0;
      float64x2_t v17 = vdivq_f64(v13, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v14, 0));
      double v18 = 0.0;
      LODWORD(v19) = 1;
      unsigned int v20 = 3;
      uint64_t v21 = 2;
      LODWORD(v22) = 1;
      double v23 = 0.0;
      do
      {
        unsigned int v24 = v20 - 1;
        float64x2_t v25 = vsubq_f64((float64x2_t)a2[v72.__begin_[v21]], v12);
        int64x2_t v26 = (int64x2_t)vmulq_f64(v17, v25);
        *(void *)&double v27 = *(_OWORD *)&vaddq_f64((float64x2_t)v26, (float64x2_t)vdupq_laneq_s64(v26, 1));
        double v28 = vaddvq_f64((float64x2_t)v26);
        if (v28 > v14) {
          double v29 = v28;
        }
        else {
          double v29 = v14;
        }
        if (v28 > v14) {
          unsigned int v30 = v20 - 1;
        }
        else {
          unsigned int v30 = v19;
        }
        _NF = v28 < v18;
        if (v28 < v18) {
          double v18 = v28;
        }
        else {
          double v14 = v29;
        }
        if (_NF) {
          uint64_t v19 = v19;
        }
        else {
          uint64_t v19 = v30;
        }
        if (_NF) {
          unint64_t v16 = v24;
        }
        else {
          unint64_t v16 = v16;
        }
        float64x2_t v32 = vmlsq_lane_f64(v25, v17, v27, 0);
        *(float *)v32.f64 = vaddvq_f64(vmulq_f64(v32, v32));
        double v33 = *(float *)v32.f64;
        if (v23 >= v33)
        {
          uint64_t v22 = v22;
        }
        else
        {
          double v23 = v33;
          uint64_t v22 = v24;
        }
        uint64_t v21 = v20;
      }
      while (v15 > v20++);
    }
    int v35 = 0;
    LODWORD(v36) = 0;
    float v37 = sqrt(v23) * (v14 - v18);
    do
    {
      unint64_t v36 = (v36 + 1) % v15;
      float64x2_t v38 = (float64x2_t)a2[v72.__begin_[v36]];
      float64x2_t v39 = vsubq_f64((float64x2_t)a2[v72.__begin_[(v36 + 1) % v15]], v38);
      float64x2_t v40 = vmulq_n_f64(v39, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v39, v39))));
      float64x2_t v41 = vsubq_f64((float64x2_t)a2[v72.__begin_[v22]], v38);
      double v42 = vaddvq_f64(vmulq_f64(vsubq_f64((float64x2_t)a2[v72.__begin_[v16]], v38), v40));
      int64x2_t v43 = (int64x2_t)vmulq_f64(v41, v40);
      float64x2_t v44 = vmulq_f64(vsubq_f64((float64x2_t)a2[v72.__begin_[v19]], v38), v40);
      float64x2_t v45 = vnegq_f64(v40);
      float64x2_t v46 = vmlsq_lane_f64(v41, v40, vaddq_f64((float64x2_t)v43, (float64x2_t)vdupq_laneq_s64(v43, 1)).f64[0], 0);
      float64x2_t v47 = vmulq_f64(v46, v46);
      unint64_t v48 = v16;
      do
      {
        unint64_t v16 = v48;
        double v49 = v42;
        unint64_t v48 = (v48 + 1) % v15;
        double v42 = vaddvq_f64(vmulq_f64(v40, vsubq_f64((float64x2_t)a2[v72.__begin_[v48]], v38)));
      }
      while (v42 < v49);
      double v50 = vaddvq_f64(v44);
      unint64_t v51 = v19;
      do
      {
        uint64_t v19 = v51;
        double v52 = v50;
        unint64_t v51 = (v51 + 1) % v15;
        double v50 = vaddvq_f64(vmulq_f64(v40, vsubq_f64((float64x2_t)a2[v72.__begin_[v51]], v38)));
      }
      while (v50 > v52);
      double v53 = vaddvq_f64(v47);
      unint64_t v54 = v22;
      do
      {
        uint64_t v22 = v54;
        unint64_t v54 = (v54 + 1) % v15;
        float64x2_t v55 = vsubq_f64((float64x2_t)a2[v72.__begin_[v54]], v38);
        int64x2_t v56 = (int64x2_t)vmulq_f64(v40, v55);
        double v57 = v53;
        float64x2_t v58 = vmlaq_n_f64(v55, v45, vaddq_f64((float64x2_t)v56, (float64x2_t)vdupq_laneq_s64(v56, 1)).f64[0]);
        double v53 = vaddvq_f64(vmulq_f64(v58, v58));
      }
      while (v53 > v57);
      double v59 = (v52 - v49) * sqrt(v57);
      if (v59 < v37)
      {
        float v37 = v59;
        double v23 = v57;
        double v14 = v52;
        double v18 = v49;
        int v35 = v36;
      }
    }
    while (v36);
    float64x2_t v60 = vsubq_f64((float64x2_t)a2[v72.__begin_[(v35 + 1) % v15]], (float64x2_t)a2[v72.__begin_[v35]]);
    int64x2_t v61 = (int64x2_t)vmulq_f64(v60, v60);
    int64x2_t v62 = (int64x2_t)vmulq_n_f64(v60, 1.0 / sqrt(vaddvq_f64((float64x2_t)v61)));
    *a4 = (float64x2_t)v62;
    *(double *)v61.i64 = -*(double *)&v62.i64[1];
    *(int64x2_t *)a5 = vzip1q_s64(v61, v62);
    v63.f64[0] = v14 - v18;
    v63.f64[1] = sqrt(v23);
    __asm { FMOV            V2.2D, #0.5 }
    float64x2_t v68 = vmulq_f64(v63, _Q2);
    *a6 = (int8x16_t)v68;
    *a3 = vmlaq_laneq_f64(vmlaq_n_f64(vmlaq_n_f64((float64x2_t)a2[begin[v35]], (float64x2_t)v62, v18), *a4, v68.f64[0]), *a5, v68, 1);
    float64x2_t v69 = *a4;
    if (vmlad_n_f64(-a4->f64[1] * a5->f64[0], a5->f64[1], a4->f64[0]) >= 0.0)
    {
      int64x2_t v70 = *(int64x2_t *)a6;
    }
    else
    {
      *a4 = *a5;
      *a5 = v69;
      int64x2_t v70 = (int64x2_t)vextq_s8(*a6, *a6, 8uLL);
      *a6 = (int8x16_t)v70;
    }
    if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64(v70, 1), (float64x2_t)v70)).u8[0])
    {
      float64x2_t v71 = *a4;
      *a4 = *a5;
      *a5 = v71;
      *a6 = vextq_s8(*a6, *a6, 8uLL);
      *a5 = vnegq_f64(*a5);
    }
    v72.__end_ = begin;
    operator delete(begin);
  }
}

double geom_oriented_bounding_box_3f@<D0>(unint64_t a1@<X0>, float32x4_t *a2@<X1>, float32x4_t *a3@<X8>)
{
  *(void *)&double result = geom::oriented_bounding_box_3<float>(a1, a2, a3, a3 + 1, a3 + 2, a3 + 3, a3 + 4).u64[0];
  return result;
}

float32x4_t geom::oriented_bounding_box_3<float>(unint64_t a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, float32x4_t *a6, float32x4_t *a7)
{
  uint64_t v75 = *MEMORY[0x263EF8340];
  float32x4_t v12 = 0uLL;
  float32x4_t result = 0uLL;
  if (!a1) {
    goto LABEL_14;
  }
  for (uint64_t i = 0; i != a1; ++i)
  {
    float32x4_t v17 = a2[i];
    float32x4_t result = vaddq_f32(result, v17);
  }
  uint64_t v18 = 0;
  v17.f32[0] = (float)a1;
  float32x4_t v19 = vdivq_f32(result, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 0));
  uint64_t v70 = 0;
  float32x2_t v71 = 0;
  int v72 = 0;
  float32x2_t v20 = 0;
  float v21 = 0.0;
  float32x2_t v22 = 0;
  do
  {
    _Q4 = vsubq_f32(a2[v18], v19);
    float v21 = vmlas_n_f32(v21, _Q4.f32[0], _Q4.f32[0]);
    float32x2_t v20 = vmla_lane_f32(v20, *(float32x2_t *)_Q4.f32, *(float32x2_t *)_Q4.f32, 1);
    _S5 = _Q4.i32[2];
    float32x2_t v22 = vmla_laneq_f32(v22, *(float32x2_t *)_Q4.f32, _Q4, 2);
    __asm { FMLA            S0, S5, V4.S[2] }
    ++v18;
  }
  while (a1 != v18);
  float32x4_t v67 = v19;
  __CLPK_real __a = v21;
  float32x2_t v71 = v20;
  float32x2_t v73 = v22;
  int v74 = _S0;
  if (!geom::compute_eigendecomposition_of_symmetric_matrix<float,3ul>(&__a, __w, 1))
  {
    float32x4_t result = v67;
    float32x4_t v12 = 0uLL;
LABEL_14:
    *a3 = result;
    *a4 = (float32x4_t)xmmword_236F14120;
    *a5 = (float32x4_t)xmmword_236F14130;
    result.i64[0] = 0;
    *a6 = (float32x4_t)xmmword_236F14E40;
    *a7 = v12;
    return result;
  }
  uint64_t v29 = 0;
  unsigned int v30 = (__int32 *)&v71;
  do
  {
    uint64_t v31 = v29;
    a6->i32[v31] = *(v30 - 3);
    a5->i32[v31] = *v30;
    a4->i32[v31] = v30[3];
    ++v29;
    ++v30;
  }
  while (v29 != 3);
  float32x4_t v32 = vsubq_f32(*a2, v67);
  float32x4_t v33 = vmulq_f32(v32, *a4);
  float32x4_t v34 = vmulq_f32(v32, *a5);
  float32x4_t v36 = (float32x4_t)vzip1q_s32((int32x4_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v33, 2), vaddq_f32(v33, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v33.f32, 1))), (int32x4_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v34, 2), vaddq_f32(v34, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v34.f32, 1))));
  float32x4_t v35 = vmulq_f32(v32, *a6);
  v36.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1))).u32[0];
  if (a1 < 2)
  {
    float32x4_t v40 = v36;
    float32x4_t v39 = v32;
  }
  else
  {
    float v37 = a2 + 1;
    unint64_t v38 = a1 - 1;
    float32x4_t v39 = v32;
    float32x4_t v40 = v36;
    do
    {
      float32x4_t v41 = *v37++;
      float32x4_t v42 = vsubq_f32(v41, v67);
      float32x4_t v43 = vmulq_f32(*a4, v42);
      float32x4_t v44 = vmulq_f32(*a5, v42);
      v43.i32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v43, 2), vaddq_f32(v43, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v43.f32, 1))).u32[0];
      float32x4_t v45 = vmulq_f32(*a6, v42);
      v43.i32[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v44, 2), vaddq_f32(v44, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v44.f32, 1))).u32[0];
      v40.i32[3] = 0;
      v43.i64[1] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v45, 2), vaddq_f32(v45, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.f32, 1))).u32[0];
      v36.i32[3] = 0;
      v39.i32[3] = 0;
      v42.i32[3] = 0;
      float32x4_t v40 = vminnmq_f32(v40, v43);
      float32x4_t v36 = vmaxnmq_f32(v36, v43);
      float32x4_t v39 = vminnmq_f32(v39, v42);
      v32.i32[3] = 0;
      float32x4_t v32 = vmaxnmq_f32(v32, v42);
      --v38;
    }
    while (v38);
  }
  float32x4_t v46 = (float32x4_t)vdupq_n_s32(0x3FFFFFACu);
  float32x4_t v47 = vdivq_f32(vsubq_f32(v36, v40), v46);
  *a7 = v47;
  float32x4_t v48 = vdivq_f32(vsubq_f32(v32, v39), v46);
  float32x4_t v49 = vmulq_laneq_f32(vmulq_lane_f32(v47, *(float32x2_t *)v47.f32, 1), v47, 2);
  float32x4_t v50 = vmulq_laneq_f32(vmulq_lane_f32(v48, *(float32x2_t *)v48.f32, 1), v48, 2);
  float v51 = fabsf(v49.f32[0]);
  float v52 = fabsf(v50.f32[0]);
  if (v51 > 0.00001 || v52 > 0.00001)
  {
    if (vmovn_s32(vceqq_f32(v49, v50)).u8[0]) {
      goto LABEL_30;
    }
    _ZF = v51 == INFINITY;
  }
  else
  {
    float32x4_t v53 = vmulq_f32(v47, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), (int8x16_t)v47, 0xCuLL));
    float32x4_t v49 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v53, 2), vaddq_f32(v53, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v53.f32, 1)));
    float32x4_t v54 = vmulq_f32(v48, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v48, (int32x4_t)v48), (int8x16_t)v48, 0xCuLL));
    float32x4_t v50 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1)));
    if (vmovn_s32(vceqq_f32(v49, v50)).u8[0]) {
      goto LABEL_30;
    }
    float v51 = fabsf(v49.f32[0]);
    _ZF = v51 == INFINITY;
    float v52 = fabsf(v50.f32[0]);
  }
  if (!_ZF && v52 != INFINITY)
  {
    if ((float)(v50.f32[0] + (float)((float)((float)(v52 + v51) + 1.0) * 0.00001)) > v49.f32[0]) {
      goto LABEL_30;
    }
    goto LABEL_29;
  }
  if (vmovn_s32(vcgtq_f32(v49, v50)).u8[0])
  {
LABEL_29:
    *a7 = v48;
    *a4 = (float32x4_t)xmmword_236F14120;
    *a5 = (float32x4_t)xmmword_236F14130;
    *a6 = (float32x4_t)xmmword_236F14E40;
    float32x4_t v40 = v39;
    float32x4_t v36 = v32;
  }
LABEL_30:
  float32x4_t v57 = vaddq_f32(v40, v36);
  v58.i64[0] = 0x3F0000003F000000;
  v58.i64[1] = 0x3F0000003F000000;
  float32x4_t v59 = vmulq_f32(v57, v58);
  *a3 = vmlaq_laneq_f32(vmlaq_lane_f32(vmlaq_n_f32(v67, *a4, v59.f32[0]), *a5, *(float32x2_t *)v59.f32, 1), *a6, v59, 2);
  int32x4_t v60 = *(int32x4_t *)a7;
  LODWORD(v61) = HIDWORD(a7->i64[0]);
  if (COERCE_FLOAT(*a7) < v61)
  {
    *(int32x4_t *)a7 = vzip1q_s32((int32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 4uLL), v60);
    float32x4_t v62 = *a4;
    *a4 = *a5;
    *a5 = v62;
    int32x4_t v60 = *(int32x4_t *)a7;
    LODWORD(v61) = HIDWORD(a7->i64[0]);
  }
  if (v61 < *(float *)&v60.i32[2])
  {
    *(int32x4_t *)a7 = vuzp1q_s32(v60, vrev64q_s32(v60));
    float32x4_t v63 = *a5;
    *a5 = *a6;
    *a6 = v63;
    int32x4_t v60 = *(int32x4_t *)a7;
    LODWORD(v61) = HIDWORD(a7->i64[0]);
  }
  if (*(float *)v60.i32 >= v61)
  {
    float32x4_t v64 = *a5;
  }
  else
  {
    *(int32x4_t *)a7 = vzip1q_s32((int32x4_t)vextq_s8((int8x16_t)v60, (int8x16_t)v60, 4uLL), v60);
    float32x4_t v64 = *a4;
    *a4 = *a5;
    *a5 = v64;
  }
  int32x4_t v65 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v64, (int32x4_t)v64), (int8x16_t)v64, 0xCuLL), vnegq_f32(*a4)), v64, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(*(int32x4_t *)a4, *(int32x4_t *)a4), *(int8x16_t *)a4, 0xCuLL));
  float32x4_t result = *a6;
  float32x4_t v66 = vmulq_f32(*a6, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v65, v65), (int8x16_t)v65, 0xCuLL));
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).f32[0] < 0.0)
  {
    float32x4_t result = vnegq_f32(result);
    *a6 = result;
  }
  return result;
}

double geom_oriented_bounding_box_3d@<D0>(unint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  *(void *)&double result = *(_OWORD *)&geom::oriented_bounding_box_3<double>(a1, a2, a3, a3 + 2, a3 + 4, (uint64_t)&a3[6], (uint64_t)&a3[8]);
  return result;
}

float64x2_t geom::oriented_bounding_box_3<double>(unint64_t a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v106 = *MEMORY[0x263EF8340];
  float64x2_t v12 = 0uLL;
  if (!a1)
  {
    float64x2_t v53 = 0uLL;
    float64x2_t v54 = 0uLL;
LABEL_15:
    *a3 = v53;
    a3[1] = v54;
    *a4 = (float64x2_t)xmmword_236F14150;
    a4[1] = v12;
    *a5 = (float64x2_t)xmmword_236F14160;
    a5[1] = v12;
    __asm { FMOV            V0.2D, #1.0 }
    *(float64x2_t *)a6 = v12;
    *(float64x2_t *)(a6 + 16) = result;
    *(float64x2_t *)a7 = v12;
    *(float64x2_t *)(a7 + 16) = v12;
    return result;
  }
  uint64_t v15 = 0;
  float64x2_t v16 = 0uLL;
  float64x2_t v17 = 0uLL;
  do
  {
    float64x2_t v18 = a2[v15];
    float64x2_t v17 = vaddq_f64(v17, a2[v15 + 1]);
    float64x2_t v16 = vaddq_f64(v16, v18);
    v15 += 2;
  }
  while (2 * a1 != v15);
  uint64_t v19 = 0;
  v18.f64[0] = (double)a1;
  float64x2_t v20 = vdivq_f64(v17, v18);
  float64x2_t v21 = vdivq_f64(v16, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)a1), 0));
  unint64_t v96 = vextq_s8((int8x16_t)v21, (int8x16_t)v21, 8uLL).u64[0];
  float64x2_t v22 = 0uLL;
  long long v101 = 0u;
  float64x2_t v102 = 0u;
  uint64_t v103 = 0;
  double v23 = 0.0;
  double v24 = 0.0;
  float64x2_t v25 = 0uLL;
  do
  {
    int64x2_t v26 = &a2[2 * v19];
    *(void *)&double v27 = *(_OWORD *)&vsubq_f64(v26[1], v20);
    float64x2_t v28 = vsubq_f64(*v26, v21);
    double v24 = vmlad_n_f64(v24, v28.f64[0], v28.f64[0]);
    float64x2_t v22 = vmlaq_laneq_f64(v22, v28, v28, 1);
    float64x2_t v25 = vmlaq_n_f64(v25, v28, v27);
    double v23 = vmlad_n_f64(v23, v27, v27);
    ++v19;
  }
  while (a1 != v19);
  float64x2_t v97 = v21;
  float64x2_t v98 = v20;
  __CLPK_doublereal __a = v24;
  float64x2_t v102 = v22;
  float64x2_t v104 = v25;
  double v105 = v23;
  if (!geom::compute_eigendecomposition_of_symmetric_matrix<double,3ul>(&__a, __w, 1))
  {
    float64x2_t v53 = v97;
    float64x2_t v54 = v98;
    float64x2_t v12 = 0uLL;
    goto LABEL_15;
  }
  uint64_t v29 = 0;
  unsigned int v30 = (float64_t *)&v102;
  v31.f64[0] = v97.f64[0];
  do
  {
    uint64_t v32 = v29;
    *(float64_t *)(a6 + v32 * 8) = *(v30 - 3);
    a5->f64[v32] = *v30;
    a4->f64[v32] = v30[3];
    ++v29;
    ++v30;
  }
  while (v29 != 3);
  float64x2_t v33 = vsubq_f64(*a2, v97);
  float64x2_t v34 = vsubq_f64(a2[1], v98);
  float64x2_t v35 = a4[1];
  v39.f64[0] = vmulq_f64(v34, v35).f64[0] + vaddvq_f64(vmulq_f64(v33, *a4));
  float64x2_t v36 = a5[1];
  float64x2_t v37 = *(float64x2_t *)(a6 + 16);
  float64x2_t v38 = vmulq_f64(v34, v37);
  v38.f64[0] = v38.f64[0] + vaddvq_f64(vmulq_f64(v33, *(float64x2_t *)a6));
  v39.f64[1] = vmulq_f64(v34, v36).f64[0] + vaddvq_f64(vmulq_f64(v33, *a5));
  if (a1 < 2)
  {
    float64x2_t v44 = v39;
    float64x2_t v45 = v38;
    float64x2_t v42 = v33;
    float64x2_t v43 = v34;
  }
  else
  {
    float32x4_t v40 = a2 + 2;
    unint64_t v41 = a1 - 1;
    float64x2_t v42 = v33;
    v43.f64[0] = v34.f64[0];
    float64x2_t v44 = v39;
    v45.f64[0] = v38.f64[0];
    do
    {
      float64x2_t v47 = *v40;
      float64x2_t v46 = v40[1];
      v40 += 2;
      float64x2_t v48 = vsubq_f64(v47, v97);
      float64x2_t v49 = vsubq_f64(v46, v98);
      v50.f64[0] = vmulq_f64(v35, v49).f64[0] + vaddvq_f64(vmulq_f64(*a4, v48));
      double v51 = vmulq_f64(v37, v49).f64[0];
      double v52 = vaddvq_f64(vmulq_f64(*(float64x2_t *)a6, v48));
      v50.f64[1] = vmulq_f64(v36, v49).f64[0] + vaddvq_f64(vmulq_f64(*a5, v48));
      float64x2_t v44 = vminnmq_f64(v44, v50);
      float64x2_t v45 = vminnmq_f64((float64x2_t)*(unint64_t *)&v45.f64[0], (float64x2_t)COERCE_UNSIGNED_INT64(v51 + v52));
      float64x2_t v39 = vmaxnmq_f64(v39, v50);
      float64x2_t v38 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v38.f64[0], (float64x2_t)COERCE_UNSIGNED_INT64(v51 + v52));
      float64x2_t v42 = vminnmq_f64(v42, v48);
      float64x2_t v43 = vminnmq_f64((float64x2_t)*(unint64_t *)&v43.f64[0], (float64x2_t)*(unint64_t *)&v49.f64[0]);
      float64x2_t v33 = vmaxnmq_f64(v33, v48);
      float64x2_t v34 = vmaxnmq_f64((float64x2_t)*(unint64_t *)&v34.f64[0], (float64x2_t)*(unint64_t *)&v49.f64[0]);
      --v41;
    }
    while (v41);
  }
  v36.f64[0] = 1.999999;
  float64x2_t v60 = vdivq_f64(vsubq_f64(v38, v45), v36);
  float64x2_t v61 = (float64x2_t)vdupq_n_s64(0x3FFFFFFEF39085F5uLL);
  float64x2_t v62 = vdivq_f64(vsubq_f64(v39, v44), v61);
  *(float64x2_t *)a7 = v62;
  *(float64x2_t *)(a7 + 16) = v60;
  float64x2_t v63 = vdivq_f64(vsubq_f64(v34, v43), v36);
  float64x2_t v64 = vdivq_f64(vsubq_f64(v33, v42), v61);
  double v65 = vmuld_lane_f64(v62.f64[0], v62, 1) * v60.f64[0];
  double v66 = vmuld_lane_f64(v64.f64[0], v64, 1) * v63.f64[0];
  if (fabs(v65) > 0.000001 || fabs(v66) > 0.000001)
  {
    BOOL v73 = v65 == v66 || v66 + 0.000001 > v65;
  }
  else
  {
    float64x2_t v67 = (float64x2_t)vextq_s8((int8x16_t)v62, (int8x16_t)v62, 8uLL);
    v68.f64[0] = v60.f64[0];
    v68.f64[1] = v62.f64[0];
    v62.f64[1] = v67.f64[0];
    float64x2_t v69 = (float64x2_t)vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL);
    double v70 = vmulq_f64(v60, v67).f64[0] + vaddvq_f64(vmulq_f64(v62, v68));
    v71.f64[0] = v63.f64[0];
    v71.f64[1] = v64.f64[0];
    v67.f64[0] = v64.f64[0];
    v67.f64[1] = v69.f64[0];
    double v72 = vmulq_f64(v63, v69).f64[0] + vaddvq_f64(vmulq_f64(v67, v71));
    BOOL v73 = v70 == v72 || v72 + 0.000001 > v70;
  }
  if (!v73)
  {
    *(float64x2_t *)a7 = v64;
    *(float64x2_t *)(a7 + 16) = v63;
    *a4 = (float64x2_t)xmmword_236F14150;
    a4[1] = 0u;
    *a5 = (float64x2_t)xmmword_236F14160;
    a5[1] = 0u;
    *(void *)a6 = 0;
    *(void *)(a6 + 8) = 0;
    __asm { FMOV            V2.2D, #1.0 }
    *(_OWORD *)(a6 + 16) = _Q2;
    float64x2_t v44 = v42;
    float64x2_t v45 = v43;
    float64x2_t v39 = v33;
    float64x2_t v38 = v34;
  }
  float64x2_t v75 = vaddq_f64(v44, v39);
  __asm { FMOV            V2.2D, #0.5 }
  float64x2_t v77 = vmulq_f64(vaddq_f64(v45, v38), _Q2);
  float64x2_t v78 = vmulq_f64(v75, _Q2);
  *(void *)&v31.f64[1] = v96;
  float64x2_t v79 = vmlaq_laneq_f64(vmlaq_f64(v98, a4[1], v78), a5[1], v78, 1);
  float64x2_t v80 = vmlaq_laneq_f64(vmlaq_n_f64(v31, *a4, v78.f64[0]), *a5, v78, 1);
  float64x2_t v81 = *(float64x2_t *)(a6 + 16);
  *a3 = vmlaq_n_f64(v80, *(float64x2_t *)a6, v77.f64[0]);
  a3[1] = vmlaq_f64(v79, v81, v77);
  v81.f64[0] = *(float64_t *)(a7 + 16);
  int8x16_t v82 = *(int8x16_t *)a7;
  int8x16_t v83 = vextq_s8(v82, v82, 8uLL);
  double v84 = *(double *)(a7 + 8);
  if (*(double *)a7 < v84)
  {
    v83.i64[1] = *(void *)a7;
    *(int8x16_t *)a7 = v83;
    *(float64x2_t *)(a7 + 16) = v81;
    float64x2_t v81 = *a4;
    float64x2_t v85 = a4[1];
    float64x2_t v86 = a5[1];
    *a4 = *a5;
    a4[1] = v86;
    *a5 = v81;
    a5[1] = v85;
    v81.f64[0] = *(float64_t *)(a7 + 16);
    int8x16_t v82 = *(int8x16_t *)a7;
    int8x16_t v83 = vextq_s8(v82, v82, 8uLL);
    double v84 = *(double *)(a7 + 8);
  }
  if (v84 < v81.f64[0])
  {
    v82.i64[1] = *(void *)&v81.f64[0];
    *(int8x16_t *)a7 = v82;
    *(int8x16_t *)(a7 + 16) = v83;
    float64x2_t v81 = *a5;
    float64x2_t v87 = a5[1];
    int8x16_t v83 = *(int8x16_t *)(a6 + 16);
    *a5 = *(float64x2_t *)a6;
    a5[1] = (float64x2_t)v83;
    *(float64x2_t *)a6 = v81;
    *(float64x2_t *)(a6 + 16) = v87;
    v81.f64[0] = *(float64_t *)(a7 + 16);
    int8x16_t v82 = *(int8x16_t *)a7;
    v83.i64[0] = vextq_s8(v82, v82, 8uLL).u64[0];
    double v84 = *(double *)(a7 + 8);
  }
  if (*(double *)v82.i64 >= v84)
  {
    float64x2_t v89 = *a5;
    float64x2_t v88 = a5[1];
  }
  else
  {
    v83.i64[1] = v82.i64[0];
    *(int8x16_t *)a7 = v83;
    *(float64x2_t *)(a7 + 16) = v81;
    float64x2_t v89 = *a4;
    float64x2_t v88 = a4[1];
    float64x2_t v90 = a5[1];
    *a4 = *a5;
    a4[1] = v90;
    *a5 = v89;
    a5[1] = v88;
  }
  v91.f64[0] = v88.f64[0];
  v91.f64[1] = v89.f64[0];
  float64x2_t v92 = a4[1];
  float64x2_t v93 = vnegq_f64(v92);
  v92.f64[1] = a4->f64[0];
  float64x2_t v94 = vmlaq_f64(vmulq_f64(v91, vnegq_f64(*a4)), v89, v92);
  *(void *)&v93.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v93, v89, 1), v88, *a4, 1);
  v93.f64[1] = v94.f64[0];
  float64x2_t result = *(float64x2_t *)a6;
  float64x2_t v95 = *(float64x2_t *)(a6 + 16);
  if (vmulq_laneq_f64(v95, v94, 1).f64[0] + vaddvq_f64(vmulq_f64(*(float64x2_t *)a6, v93)) < 0.0)
  {
    float64x2_t result = vnegq_f64(result);
    *(float64x2_t *)a6 = result;
    *(float64x2_t *)(a6 + 16) = vnegq_f64(v95);
  }
  return result;
}

double geom::oriented_bounding_box_matrix_3<float>(unint64_t a1, float32x4_t *a2)
{
  v8.i32[2] = 0;
  v8.i64[0] = 0;
  v7.i32[2] = 0;
  v7.i64[0] = 0;
  v6.i32[2] = 0;
  v6.i64[0] = 0;
  v5.i32[2] = 0;
  v5.i64[0] = 0;
  v4.i32[2] = 0;
  v4.i64[0] = 0;
  geom::oriented_bounding_box_3<float>(a1, a2, &v8, &v7, &v6, &v5, &v4);
  float32x4_t v2 = v7;
  v2.i32[3] = 0;
  *(void *)&double result = vmulq_n_f32(v2, v4.f32[0]).u64[0];
  return result;
}

float64_t geom::oriented_bounding_box_matrix_3<double>@<D0>(unint64_t a1@<X0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X8>)
{
  *(void *)&long long v20 = 0;
  float64x2_t v19 = 0u;
  *(void *)&long long v18 = 0;
  float64x2_t v17 = 0u;
  *(void *)&long long v16 = 0;
  float64x2_t v15 = 0u;
  *(void *)&long long v14 = 0;
  float64x2_t v13 = 0u;
  *(void *)&long long v12 = 0;
  float64x2_t v11 = 0u;
  geom::oriented_bounding_box_3<double>(a1, a2, &v19, &v17, &v15, (uint64_t)&v13, (uint64_t)&v11);
  float64x2_t v5 = v11;
  double v4 = *(double *)&v12;
  float64x2_t v6 = vmulq_n_f64((float64x2_t)(unint64_t)v18, v11.f64[0]);
  *a3 = vmulq_n_f64(v17, v11.f64[0]);
  a3[1] = v6;
  float64x2_t v7 = vmulq_laneq_f64((float64x2_t)(unint64_t)v16, v5, 1);
  float64x2_t v8 = v13;
  unint64_t v9 = v14;
  a3[2] = vmulq_laneq_f64(v15, v5, 1);
  a3[3] = v7;
  a3[4] = vmulq_n_f64(v8, v4);
  a3[5] = vmulq_n_f64((float64x2_t)v9, v4);
  float64_t result = v19.f64[0];
  *(void *)&v5.f64[0] = v20;
  v5.f64[1] = 1.0;
  a3[6] = v19;
  a3[7] = v5;
  return result;
}

void geom_convex_hull_2f(std::vector<int>::size_type a1, uint64_t a2, uint64_t a3)
{
  float64x2_t v5 = (std::vector<int> *)geom::collection_to_vector<float>(a3);
  geom::convex_hull_2<float>(a1, a2, v5);
}

void geom_convex_hull_2d(std::vector<int>::size_type a1, uint64_t a2, uint64_t a3)
{
  float64x2_t v5 = (std::vector<int> *)geom::collection_to_vector<float>(a3);
  geom::convex_hull_2<double>(a1, a2, v5);
}

double geom_dop6_for_points_3f(uint64_t a1, float32x4_t *a2)
{
  geom::dop<(unsigned char)6,float>::dop((uint64_t)&v3, a2, a1);
  return *(double *)&v3;
}

uint64_t geom_dop8_for_points_3f@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  return geom::dop<(unsigned char)8,float>::dop(a3, a2, a1);
}

uint64_t geom_dop12_for_points_3f@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  return geom::dop<(unsigned char)12,float>::dop(a3, a2, a1);
}

uint64_t geom_dop14_for_points_3f@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  return geom::dop<(unsigned char)14,float>::dop(a3, a2, a1);
}

uint64_t geom_dop18_for_points_3f@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  return geom::dop<(unsigned char)18,float>::dop(a3, a2, a1);
}

uint64_t geom_dop20_for_points_3f@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  return geom::dop<(unsigned char)20,float>::dop(a3, a2, a1);
}

uint64_t geom_dop26_for_points_3f@<X0>(uint64_t a1@<X0>, float32x4_t *a2@<X1>, uint64_t a3@<X8>)
{
  return geom::dop<(unsigned char)26,float>::dop(a3, a2, a1);
}

uint64_t geom_dop6_for_points_3d@<X0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  return geom::dop<(unsigned char)6,double>::dop(a3, a2, a1);
}

uint64_t geom_dop8_for_points_3d@<X0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float64x2_t a6@<Q2>)
{
  return geom::dop<(unsigned char)8,double>::dop(a3, a2, a1, a4, a5, a6);
}

uint64_t geom_dop12_for_points_3d@<X0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  return geom::dop<(unsigned char)12,double>::dop(a3, a2, a1);
}

uint64_t geom_dop14_for_points_3d@<X0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float64x2_t a6@<Q2>)
{
  return geom::dop<(unsigned char)14,double>::dop(a3, a2, a1, a4, a5, a6);
}

uint64_t geom_dop18_for_points_3d@<X0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>)
{
  return geom::dop<(unsigned char)18,double>::dop(a3, a2, a1);
}

uint64_t geom_dop20_for_points_3d@<X0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float64x2_t a6@<Q2>)
{
  return geom::dop<(unsigned char)20,double>::dop(a3, a2, a1, a4, a5, a6);
}

uint64_t geom_dop26_for_points_3d@<X0>(uint64_t a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X8>, double a4@<D0>, double a5@<D1>, float64x2_t a6@<Q2>)
{
  return geom::dop<(unsigned char)26,double>::dop(a3, a2, a1, a4, a5, a6);
}

void geom_dop6_polyhedron_3f(uint64_t a1, uint64_t a2, uint64_t a3, __n128 a4, __n128 a5, float32x4_t a6)
{
  v12[0] = a4;
  v12[1] = a5;
  float32x4_t v11 = a6;
  uint64_t v8 = geom::collection_to_vector<float>(a1);
  unint64_t v9 = (unint64_t *)geom::collection_to_vector<float>(a2);
  uint64_t v10 = (char **)geom::collection_to_vector<float>(a3);
  geom::dop<(unsigned char)6,float>::compute_polyhedron((uint64_t)v12, &v11, v8, v9, v10);
}

void geom::dop<(unsigned char)6,float>::compute_polyhedron(uint64_t a1, float32x4_t *a2, uint64_t a3, unint64_t *a4, char **a5)
{
  uint64_t v6 = 0;
  v290[4] = *MEMORY[0x263EF8340];
  *(void *)(a3 + 8) = *(void *)a3;
  a4[1] = *a4;
  a5[1] = *a5;
  float32x4_t v7 = *a2;
  do
  {
    float32x4_t v8 = vmulq_f32(geom::kdop_axes<(unsigned char)6,float>[v6], v7);
    v8.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
    unint64_t v9 = (float *)(a1 + 4 * v6);
    *((float *)&v290[2] + v6 + 1) = *v9 - v8.f32[0];
    *((float *)&v290[1] + v6++) = v9[4] - v8.f32[0];
  }
  while (v6 != 3);
  float64x2_t v288 = 0;
  float64x2_t v289 = 0;
  v290[0] = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&v288, 6uLL);
  uint64_t v12 = 0;
  uint64_t v13 = -1;
  uint64_t v14 = -1;
  do
  {
    LODWORD(v11) = *((_DWORD *)&v290[2] + v12 + 1);
    v10.i32[0] = *((_DWORD *)&v290[1] + v12);
    if (*(float *)&v11 == v10.f32[0])
    {
      uint64_t v13 = v12;
    }
    else
    {
      uint64_t v15 = v13;
      float v16 = fabsf(*(float *)&v11);
      float v17 = fabsf(v10.f32[0]);
      BOOL v18 = v16 == INFINITY || v17 == INFINITY;
      if (v18
        || (uint64_t v13 = v12, vabds_f32(*(float *)&v11, v10.f32[0]) >= (float)((float)((float)(v16 + v17) + 1.0) * 0.00001)))
      {
        float32x4_t v19 = geom::kdop_axes<(unsigned char)6,float>[v12];
        float32x4_t v20 = vdivq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0));
        float64x2_t v21 = v289;
        if ((unint64_t)v289 >= v290[0])
        {
          uint64_t v23 = v289 - v288;
          if ((unint64_t)(v23 + 1) >> 60) {
            goto LABEL_322;
          }
          float32x4_t v274 = geom::kdop_axes<(unsigned char)6,float>[v12];
          long long v277 = v11;
          unint64_t v24 = (uint64_t)(v290[0] - (void)v288) >> 3;
          if (v24 <= v23 + 1) {
            unint64_t v24 = v23 + 1;
          }
          if (v290[0] - (void)v288 >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            float32x4_t v271 = v20;
            int64x2_t v26 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v290, v25);
            float32x4_t v20 = v271;
          }
          else
          {
            int64x2_t v26 = 0;
          }
          double v27 = (float32x4_t *)&v26[16 * v23];
          *double v27 = v20;
          float64x2_t v22 = v27 + 1;
          uint64_t v29 = v288;
          float64x2_t v28 = v289;
          if (v289 != v288)
          {
            do
            {
              float32x4_t v30 = v28[-1];
              --v28;
              v27[-1] = v30;
              --v27;
            }
            while (v28 != v29);
            float64x2_t v28 = v288;
          }
          float64x2_t v288 = v27;
          float64x2_t v289 = v22;
          v290[0] = &v26[16 * v25];
          if (v28) {
            operator delete(v28);
          }
          float32x4_t v19 = v274;
          long long v11 = v277;
        }
        else
        {
          *float64x2_t v289 = v20;
          float64x2_t v22 = v21 + 1;
        }
        float64x2_t v289 = v22;
        float32x4_t v10 = vdivq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)&v11, 0));
        if ((unint64_t)v22 >= v290[0])
        {
          uint64_t v32 = v22 - v288;
          if ((unint64_t)(v32 + 1) >> 60) {
            goto LABEL_322;
          }
          unint64_t v33 = (uint64_t)(v290[0] - (void)v288) >> 3;
          if (v33 <= v32 + 1) {
            unint64_t v33 = v32 + 1;
          }
          if (v290[0] - (void)v288 >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v34 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v34 = v33;
          }
          if (v34)
          {
            float32x4_t v278 = v10;
            float64x2_t v35 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v290, v34);
            float32x4_t v10 = v278;
          }
          else
          {
            float64x2_t v35 = 0;
          }
          float64x2_t v36 = (float32x4_t *)&v35[16 * v32];
          *float64x2_t v36 = v10;
          float64x2_t v31 = v36 + 1;
          float64x2_t v38 = v288;
          float64x2_t v37 = v289;
          if (v289 != v288)
          {
            do
            {
              float32x4_t v39 = v37[-1];
              --v37;
              v10.i32[1] = v39.i32[1];
              v36[-1] = v39;
              --v36;
            }
            while (v37 != v38);
            float64x2_t v37 = v288;
          }
          float64x2_t v288 = v36;
          float64x2_t v289 = v31;
          v290[0] = &v35[16 * v34];
          if (v37) {
            operator delete(v37);
          }
        }
        else
        {
          *float64x2_t v22 = v10;
          float64x2_t v31 = v22 + 1;
        }
        float64x2_t v289 = v31;
        uint64_t v14 = v12;
        uint64_t v13 = v15;
      }
    }
    ++v12;
  }
  while (v12 != 3);
  float32x4_t v40 = v288;
  uint64_t v41 = v289 - v288;
  if (v41)
  {
    if (v41 != 2)
    {
      if ((unint64_t)((char *)v289 - (char *)v288) > 0x5F)
      {
        geom::half_plane_intersection_3<float>(6uLL, v288, (char **)a3, a4, a5);
        float64x2_t v67 = a2;
      }
      else
      {
        *(void *)std::vector<int>::value_type __x = 0;
        float64x2_t v286 = 0;
        float64x2_t v287 = 0;
        float32x4_t v51 = geom::kdop_axes<(unsigned char)6,float>[v13];
        float v52 = COERCE_FLOAT(geom::kdop_axes<(unsigned char)6,float>[v13].i64[1]);
        float v53 = fabsf(v52);
        LODWORD(v54) = HIDWORD(geom::kdop_axes<(unsigned char)6,float>[v13].i64[0]);
        float v55 = -v52;
        if (v53 <= 0.00000011921)
        {
          float32x4_t v56 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v54), (int32x4_t)v51);
        }
        else
        {
          v56.i32[0] = 0;
          v56.f32[1] = v55;
          v56.i64[1] = v51.u32[1];
        }
        int32x4_t v68 = (int32x4_t)vmulq_f32(v56, v56);
        v68.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v68, 2), vadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v68.i8, 1))).u32[0];
        float32x2_t v69 = vrsqrte_f32((float32x2_t)v68.u32[0]);
        float32x2_t v70 = vmul_f32(v69, vrsqrts_f32((float32x2_t)v68.u32[0], vmul_f32(v69, v69)));
        LODWORD(v71) = vmul_f32(v70, vrsqrts_f32((float32x2_t)v68.u32[0], vmul_f32(v70, v70))).u32[0];
        if (v53 <= 0.00000011921)
        {
          float32x4_t v72 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v54), (int32x4_t)v51);
        }
        else
        {
          v72.i32[0] = 0;
          v72.f32[1] = v55;
          v72.i64[1] = v51.u32[1];
        }
        int32x4_t v73 = (int32x4_t)vmulq_f32(v72, v72);
        v73.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v73, 2), vadd_f32(*(float32x2_t *)v73.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v73.i8, 1))).u32[0];
        float32x4_t v280 = vmulq_n_f32(v56, v71);
        float32x2_t v74 = vrsqrte_f32((float32x2_t)v73.u32[0]);
        float32x2_t v75 = vmul_f32(v74, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v74, v74)));
        float32x4_t v76 = vmulq_n_f32(v72, vmul_f32(v75, vrsqrts_f32((float32x2_t)v73.u32[0], vmul_f32(v75, v75))).f32[0]);
        float32x4_t v267 = vnegq_f32(v51);
        float32x4_t v268 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL);
        float32x4_t v77 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), (int8x16_t)v76, 0xCuLL), v267), v76, v268);
        float32x4_t v78 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77), (int8x16_t)v77, 0xCuLL);
        int32x4_t v79 = (int32x4_t)vmulq_f32(v77, v77);
        v79.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v79.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v79, 2), *(float32x2_t *)v79.i8)).u32[0];
        float32x2_t v80 = vrsqrte_f32((float32x2_t)v79.u32[0]);
        float32x2_t v81 = vmul_f32(v80, vrsqrts_f32((float32x2_t)v79.u32[0], vmul_f32(v80, v80)));
        float32x4_t v276 = vmulq_n_f32(v78, vmul_f32(v81, vrsqrts_f32((float32x2_t)v79.u32[0], vmul_f32(v81, v81))).f32[0]);
        if (v289 == v288)
        {
          uint64_t v114 = 0;
          double v105 = 0;
        }
        else
        {
          unint64_t v82 = 0;
          float32x2_t v83 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.f32, 1);
          float32x2_t v84 = (float32x2_t)vdup_laneq_s32((int32x4_t)v51, 2);
          int32x4_t v265 = vdupq_laneq_s32((int32x4_t)v51, 2);
          int32x2_t v266 = (int32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
          float32x4_t v264 = geom::kdop_axes<(unsigned char)6,float>[v13];
          do
          {
            float32x4_t v85 = v40[v82];
            float32x4_t v86 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v85, (int32x4_t)v85), (int8x16_t)v85, 0xCuLL), v267), v85, v268);
            float32x4_t v87 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), (int8x16_t)v86, 0xCuLL);
            int32x4_t v88 = (int32x4_t)vmulq_f32(v86, v86);
            v88.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v88.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v88, 2), *(float32x2_t *)v88.i8)).u32[0];
            float32x2_t v89 = vrsqrte_f32((float32x2_t)v88.u32[0]);
            float32x2_t v90 = vmul_f32(v89, vrsqrts_f32((float32x2_t)v88.u32[0], vmul_f32(v89, v89)));
            float32x4_t v91 = vmulq_n_f32(v87, vmul_f32(v90, vrsqrts_f32((float32x2_t)v88.u32[0], vmul_f32(v90, v90))).f32[0]);
            int32x4_t v92 = vzip1q_s32((int32x4_t)v51, (int32x4_t)v85);
            float32x2_t v93 = (float32x2_t)vextq_s8((int8x16_t)v92, (int8x16_t)v92, 8uLL).u64[0];
            float32x2_t v94 = (float32x2_t)vzip1_s32(v266, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v85, (int8x16_t)v85, 8uLL));
            float32x4_t v270 = (float32x4_t)vzip1q_s32(vzip1q_s32(v92, v265), vdupq_laneq_s32(v92, 2));
            float32x4_t v272 = v91;
            *(float32x2_t *)v88.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v92.i8, v85.f32[0]), v93, *(float32x2_t *)v85.f32, 1), v94, v85, 2);
            v85.i32[1] = vdupq_laneq_s32(v92, 3).i32[1];
            float32x4_t v269 = v85;
            *(float32x2_t *)v85.f32 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v92.i8, v51.f32[0]), v83, v93), v84, v94);
            simd_float2x2 v95 = __invert_f2((simd_float2x2)v85);
            float32x4_t v96 = vmlaq_lane_f32(vmulq_n_f32(v270, v95.columns[1].f32[0]), v269, (float32x2_t)v95.columns[1], 1);
            int32x4_t v97 = (int32x4_t)vmulq_f32(v280, v272);
            int32x4_t v98 = (int32x4_t)vmulq_f32(v276, v272);
            *(int32x2_t *)v97.i8 = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v97, 2), vadd_f32(*(float32x2_t *)v97.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v97.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v98, 2), vadd_f32(*(float32x2_t *)v98.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v98.i8, 1))));
            float32x2_t v99 = vmul_f32(*(float32x2_t *)v97.i8, *(float32x2_t *)v97.i8);
            v99.i32[0] = vadd_f32(v99, (float32x2_t)vdup_lane_s32((int32x2_t)v99, 1)).u32[0];
            *(float32x2_t *)v98.i8 = vrsqrte_f32((float32x2_t)v99.u32[0]);
            *(float32x2_t *)v98.i8 = vmul_f32(*(float32x2_t *)v98.i8, vrsqrts_f32((float32x2_t)v99.u32[0], vmul_f32(*(float32x2_t *)v98.i8, *(float32x2_t *)v98.i8)));
            int32x2_t v100 = (int32x2_t)vmul_f32(*(float32x2_t *)v98.i8, vrsqrts_f32((float32x2_t)v99.u32[0], vmul_f32(*(float32x2_t *)v98.i8, *(float32x2_t *)v98.i8)));
            *(float32x2_t *)v97.i8 = vmul_n_f32(*(float32x2_t *)v97.i8, *(float *)v100.i32);
            int32x4_t v101 = (int32x4_t)vmulq_f32(v280, v96);
            *(float *)v100.i32 = -*(float *)&v97.i32[1];
            int32x4_t v102 = (int32x4_t)vmulq_f32(v276, v96);
            *(int32x2_t *)v97.i8 = vzip1_s32(v100, *(int32x2_t *)v97.i8);
            *(float32x2_t *)v102.i8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v101, 2), vadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v102, 2), vadd_f32(*(float32x2_t *)v102.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v102.i8, 1)))), *(float32x2_t *)v97.i8);
            float32x2_t v103 = vdiv_f32(*(float32x2_t *)v97.i8, (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v102.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v102.i8, 1)), 0));
            float64x2_t v104 = v286;
            if (v286 >= v287)
            {
              uint64_t v106 = ((uint64_t)v286 - *(void *)__x) >> 3;
              if ((unint64_t)(v106 + 1) >> 61) {
                goto LABEL_322;
              }
              unint64_t v107 = ((uint64_t)v287 - *(void *)__x) >> 2;
              if (v107 <= v106 + 1) {
                unint64_t v107 = v106 + 1;
              }
              if ((unint64_t)v287 - *(void *)__x >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v108 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v108 = v107;
              }
              if (v108) {
                float64x2_t v109 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v287, v108);
              }
              else {
                float64x2_t v109 = 0;
              }
              int v110 = (float32x2_t *)&v109[8 * v106];
              *int v110 = v103;
              double v105 = v110 + 1;
              unsigned int v112 = *(float32x2_t **)__x;
              int v111 = v286;
              if (v286 != *(float32x2_t **)__x)
              {
                do
                {
                  float32x2_t v113 = v111[-1];
                  --v111;
                  v110[-1] = v113;
                  --v110;
                }
                while (v111 != v112);
                int v111 = *(float32x2_t **)__x;
              }
              *(void *)std::vector<int>::value_type __x = v110;
              float64x2_t v286 = v105;
              float64x2_t v287 = (float32x2_t *)&v109[8 * v108];
              if (v111) {
                operator delete(v111);
              }
            }
            else
            {
              *float64x2_t v286 = v103;
              double v105 = v104 + 1;
            }
            float32x4_t v51 = v264;
            float64x2_t v286 = v105;
            ++v82;
            float32x4_t v40 = v288;
          }
          while (v82 < v289 - v288);
          uint64_t v114 = *(void *)__x;
        }
        std::vector<int> __p = 0;
        float64x2_t v283 = 0;
        uint64_t v284 = 0;
        geom::half_plane_intersection_2<float>(((uint64_t)v105 - v114) >> 3, v114, (uint64_t)&__p);
        uint64_t v143 = (float32x2_t *)__p;
        float64x2_t v144 = v283;
        float64x2_t v145 = *(float32x4_t **)(a3 + 8);
        if (__p != v283)
        {
          float64x2_t v146 = (void *)(a3 + 16);
          do
          {
            float32x4_t v147 = vmlaq_n_f32(vmulq_lane_f32(v276, *v143, 1), v280, COERCE_FLOAT(*v143));
            if ((unint64_t)v145 >= *v146)
            {
              uint64_t v148 = ((uint64_t)v145 - *(void *)a3) >> 4;
              if ((unint64_t)(v148 + 1) >> 60) {
                goto LABEL_322;
              }
              uint64_t v149 = *v146 - *(void *)a3;
              uint64_t v150 = v149 >> 3;
              if (v149 >> 3 <= (unint64_t)(v148 + 1)) {
                uint64_t v150 = v148 + 1;
              }
              if ((unint64_t)v149 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v151 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v151 = v150;
              }
              if (v151)
              {
                float32x4_t v273 = v147;
                int v152 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v151);
                float32x4_t v147 = v273;
              }
              else
              {
                int v152 = 0;
              }
              int v153 = (float32x4_t *)&v152[16 * v148];
              *int v153 = v147;
              float64x2_t v145 = v153 + 1;
              uint64_t v155 = *(char **)a3;
              unsigned int v154 = *(char **)(a3 + 8);
              if (v154 != *(char **)a3)
              {
                do
                {
                  float32x4_t v156 = *((float32x4_t *)v154 - 1);
                  v154 -= 16;
                  v153[-1] = v156;
                  --v153;
                }
                while (v154 != v155);
                unsigned int v154 = *(char **)a3;
              }
              *(void *)a3 = v153;
              *(void *)(a3 + 8) = v145;
              *(void *)(a3 + 16) = &v152[16 * v151];
              if (v154) {
                operator delete(v154);
              }
            }
            else
            {
              *v145++ = v147;
            }
            *(void *)(a3 + 8) = v145;
            ++v143;
          }
          while (v143 != v144);
        }
        std::vector<unsigned int>::resize((std::vector<int> *)a4, ((uint64_t)v145 - *(void *)a3) >> 3);
        uint64_t v157 = *(void *)(a3 + 8) - *(void *)a3;
        if (v157)
        {
          uint64_t v158 = 0;
          float64x2_t v159 = (int *)*a4;
          uint64_t v160 = 4 * (v157 >> 4);
          uint64_t v161 = v160;
          do
          {
            v159[v158] = v158;
            ++v158;
            v161 -= 4;
          }
          while (v161);
          float64x2_t v162 = (_DWORD *)(a4[1] - 4);
          do
          {
            int v163 = *v159++;
            *v162-- = v163;
            v160 -= 4;
          }
          while (v160);
        }
        unint64_t v164 = (unint64_t)v157 >> 4;
        float64x2_t v165 = a5[2];
        float64x2_t v166 = a5[1];
        if (v166 >= v165)
        {
          float64x2_t v168 = *a5;
          uint64_t v169 = (v166 - *a5) >> 2;
          unint64_t v170 = v169 + 1;
          if ((unint64_t)(v169 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v171 = v165 - v168;
          if (v171 >> 1 > v170) {
            unint64_t v170 = v171 >> 1;
          }
          if ((unint64_t)v171 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v172 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v172 = v170;
          }
          if (v172)
          {
            float32x4_t v173 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v172);
            float64x2_t v168 = *a5;
            float64x2_t v166 = a5[1];
          }
          else
          {
            float32x4_t v173 = 0;
          }
          int64_t v245 = &v173[4 * v169];
          float64x2_t v165 = &v173[4 * v172];
          *(_DWORD *)int64_t v245 = v164;
          float64x2_t v167 = v245 + 4;
          while (v166 != v168)
          {
            int v246 = *((_DWORD *)v166 - 1);
            v166 -= 4;
            *((_DWORD *)v245 - 1) = v246;
            v245 -= 4;
          }
          *a5 = v245;
          a5[1] = v167;
          a5[2] = v165;
          if (v168)
          {
            operator delete(v168);
            float64x2_t v165 = a5[2];
          }
        }
        else
        {
          *(_DWORD *)float64x2_t v166 = v164;
          float64x2_t v167 = v166 + 4;
        }
        a5[1] = v167;
        uint64_t v247 = ((*(void *)(a3 + 8) - *(void *)a3) >> 3) & 0xFFFFFFFELL;
        if (v167 >= v165)
        {
          float64x2_t v249 = *a5;
          uint64_t v250 = (v167 - *a5) >> 2;
          unint64_t v251 = v250 + 1;
          if ((unint64_t)(v250 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v252 = v165 - v249;
          if (v252 >> 1 > v251) {
            unint64_t v251 = v252 >> 1;
          }
          if ((unint64_t)v252 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v253 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v253 = v251;
          }
          if (v253)
          {
            float64x2_t v254 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v253);
            float64x2_t v249 = *a5;
            float64x2_t v167 = a5[1];
          }
          else
          {
            float64x2_t v254 = 0;
          }
          float64x2_t v255 = &v254[4 * v250];
          float64x2_t v256 = &v254[4 * v253];
          *(_DWORD *)float64x2_t v255 = v247;
          double v248 = v255 + 4;
          if (v167 == v249)
          {
            float64x2_t v67 = a2;
          }
          else
          {
            float64x2_t v67 = a2;
            do
            {
              int v257 = *((_DWORD *)v167 - 1);
              v167 -= 4;
              *((_DWORD *)v255 - 1) = v257;
              v255 -= 4;
            }
            while (v167 != v249);
          }
          *a5 = v255;
          a5[1] = v248;
          a5[2] = v256;
          if (v249) {
            operator delete(v249);
          }
        }
        else
        {
          *(_DWORD *)float64x2_t v167 = v247;
          double v248 = v167 + 4;
          float64x2_t v67 = a2;
        }
        a5[1] = v248;
        if (__p)
        {
          float64x2_t v283 = (float32x2_t *)__p;
          operator delete(__p);
        }
        if (*(void *)__x)
        {
          float64x2_t v286 = *(float32x2_t **)__x;
          operator delete(*(void **)__x);
        }
      }
      long long v258 = *(float32x4_t **)a3;
      float64x2_t v259 = *(float32x4_t **)(a3 + 8);
      while (v258 != v259)
      {
        *long long v258 = vaddq_f32(*v67, *v258);
        ++v258;
      }
      goto LABEL_288;
    }
    float32x4_t v42 = geom::kdop_axes<(unsigned char)6,float>[v14];
    float32x4_t v43 = vmulq_n_f32(v42, *(float *)(a1 + 4 * v14));
    unint64_t v44 = *(void *)(a3 + 16);
    float64x2_t v45 = *(float32x4_t **)(a3 + 8);
    if ((unint64_t)v45 >= v44)
    {
      uint64_t v57 = ((uint64_t)v45 - *(void *)a3) >> 4;
      float64x2_t v47 = a5;
      if ((unint64_t)(v57 + 1) >> 60) {
        goto LABEL_322;
      }
      float32x4_t v279 = geom::kdop_axes<(unsigned char)6,float>[v14];
      uint64_t v58 = v44 - *(void *)a3;
      uint64_t v59 = v58 >> 3;
      if (v58 >> 3 <= (unint64_t)(v57 + 1)) {
        uint64_t v59 = v57 + 1;
      }
      if ((unint64_t)v58 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v60 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v60 = v59;
      }
      if (v60)
      {
        float32x4_t v275 = v43;
        float64x2_t v61 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v60);
        float32x4_t v43 = v275;
      }
      else
      {
        float64x2_t v61 = 0;
      }
      int32x4_t v115 = (float32x4_t *)&v61[16 * v57];
      float32x4_t v116 = &v61[16 * v60];
      *int32x4_t v115 = v43;
      float64x2_t v46 = v115 + 1;
      std::vector<int> v118 = *(char **)a3;
      std::vector<int> v117 = *(char **)(a3 + 8);
      if (v117 != *(char **)a3)
      {
        do
        {
          float32x4_t v119 = *((float32x4_t *)v117 - 1);
          v117 -= 16;
          v115[-1] = v119;
          --v115;
        }
        while (v117 != v118);
        std::vector<int> v117 = *(char **)a3;
      }
      *(void *)a3 = v115;
      *(void *)(a3 + 8) = v46;
      *(void *)(a3 + 16) = v116;
      if (v117) {
        operator delete(v117);
      }
      float32x4_t v42 = v279;
    }
    else
    {
      *float64x2_t v45 = v43;
      float64x2_t v46 = v45 + 1;
      float64x2_t v47 = a5;
    }
    *(void *)(a3 + 8) = v46;
    float32x4_t v120 = vmulq_n_f32(v42, *(float *)(a1 + 4 * v14 + 16));
    unint64_t v121 = *(void *)(a3 + 16);
    if ((unint64_t)v46 >= v121)
    {
      uint64_t v123 = ((uint64_t)v46 - *(void *)a3) >> 4;
      if ((unint64_t)(v123 + 1) >> 60) {
        goto LABEL_322;
      }
      uint64_t v124 = v121 - *(void *)a3;
      uint64_t v125 = v124 >> 3;
      if (v124 >> 3 <= (unint64_t)(v123 + 1)) {
        uint64_t v125 = v123 + 1;
      }
      if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v126 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v126 = v125;
      }
      if (v126)
      {
        float32x4_t v281 = v120;
        uint64_t v127 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v126);
        float32x4_t v120 = v281;
      }
      else
      {
        uint64_t v127 = 0;
      }
      float64x2_t v174 = (float32x4_t *)&v127[16 * v123];
      float64x2_t v175 = &v127[16 * v126];
      *float64x2_t v174 = v120;
      f32 = (_OWORD *)v174[1].f32;
      float64x2_t v177 = *(char **)a3;
      float64x2_t v176 = *(char **)(a3 + 8);
      if (v176 != *(char **)a3)
      {
        do
        {
          float32x4_t v178 = *((float32x4_t *)v176 - 1);
          v176 -= 16;
          v174[-1] = v178;
          --v174;
        }
        while (v176 != v177);
        float64x2_t v176 = *(char **)a3;
      }
      *(void *)a3 = v174;
      *(void *)(a3 + 8) = f32;
      *(void *)(a3 + 16) = v175;
      if (v176) {
        operator delete(v176);
      }
    }
    else
    {
      *float64x2_t v46 = v120;
      f32 = (_OWORD *)v46[1].f32;
    }
    *(void *)(a3 + 8) = f32;
    __x[0] = 0;
    std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
    float64x2_t v179 = (_DWORD *)*a4;
    v179[10] = 1;
    v179[7] = 1;
    v179[4] = 1;
    float64x2_t v181 = v47 + 2;
    float64x2_t v180 = v47[2];
    float64x2_t v182 = v47[1];
    if (v182 >= v180)
    {
      float64x2_t v184 = *v47;
      uint64_t v185 = (v182 - *v47) >> 2;
      unint64_t v186 = v185 + 1;
      if ((unint64_t)(v185 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v187 = v180 - v184;
      if (v187 >> 1 > v186) {
        unint64_t v186 = v187 >> 1;
      }
      if ((unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v188 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v188 = v186;
      }
      if (v188)
      {
        float64x2_t v189 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v47 + 2), v188);
        float64x2_t v184 = *v47;
        float64x2_t v182 = v47[1];
      }
      else
      {
        float64x2_t v189 = 0;
      }
      float64x2_t v199 = &v189[4 * v185];
      float64x2_t v180 = &v189[4 * v188];
      *(_DWORD *)float64x2_t v199 = 3;
      float64x2_t v183 = v199 + 4;
      while (v182 != v184)
      {
        int v200 = *((_DWORD *)v182 - 1);
        v182 -= 4;
        *((_DWORD *)v199 - 1) = v200;
        v199 -= 4;
      }
      *float64x2_t v47 = v199;
      v47[1] = v183;
      _OWORD v47[2] = v180;
      if (v184)
      {
        operator delete(v184);
        float64x2_t v180 = *v181;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v182 = 3;
      float64x2_t v183 = v182 + 4;
    }
    v47[1] = v183;
    if (v183 >= v180)
    {
      float64x2_t v202 = *v47;
      uint64_t v203 = (v183 - *v47) >> 2;
      unint64_t v204 = v203 + 1;
      if ((unint64_t)(v203 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v205 = v180 - v202;
      if (v205 >> 1 > v204) {
        unint64_t v204 = v205 >> 1;
      }
      if ((unint64_t)v205 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v206 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v206 = v204;
      }
      if (v206)
      {
        float64x2_t v207 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v47 + 2), v206);
        float64x2_t v202 = *v47;
        float64x2_t v183 = v47[1];
      }
      else
      {
        float64x2_t v207 = 0;
      }
      float64x2_t v217 = &v207[4 * v203];
      float64x2_t v180 = &v207[4 * v206];
      *(_DWORD *)float64x2_t v217 = 6;
      float64x2_t v201 = v217 + 4;
      while (v183 != v202)
      {
        int v218 = *((_DWORD *)v183 - 1);
        v183 -= 4;
        *((_DWORD *)v217 - 1) = v218;
        v217 -= 4;
      }
      *float64x2_t v47 = v217;
      v47[1] = v201;
      _OWORD v47[2] = v180;
      if (v202)
      {
        operator delete(v202);
        float64x2_t v180 = *v181;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v183 = 6;
      float64x2_t v201 = v183 + 4;
    }
    v47[1] = v201;
    if (v201 >= v180)
    {
      uint64_t v219 = *v47;
      uint64_t v220 = (v201 - *v47) >> 2;
      unint64_t v221 = v220 + 1;
      if ((unint64_t)(v220 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v222 = v180 - v219;
      if (v222 >> 1 > v221) {
        unint64_t v221 = v222 >> 1;
      }
      if ((unint64_t)v222 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v223 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v223 = v221;
      }
      if (v223)
      {
        float64x2_t v224 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v47 + 2), v223);
        uint64_t v219 = *v47;
        float64x2_t v201 = v47[1];
      }
      else
      {
        float64x2_t v224 = 0;
      }
      uint64_t v233 = &v224[4 * v220];
      float64x2_t v180 = &v224[4 * v223];
      *(_DWORD *)uint64_t v233 = 9;
      float64x2_t v210 = v233 + 4;
      while (v201 != v219)
      {
        int v234 = *((_DWORD *)v201 - 1);
        v201 -= 4;
        *((_DWORD *)v233 - 1) = v234;
        v233 -= 4;
      }
      *float64x2_t v47 = v233;
      v47[1] = v210;
      _OWORD v47[2] = v180;
      if (v219)
      {
        operator delete(v219);
        float64x2_t v180 = *v181;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v201 = 9;
      float64x2_t v210 = v201 + 4;
    }
    v47[1] = v210;
    if (v210 < v180) {
      goto LABEL_268;
    }
    float64x2_t v227 = *v47;
    uint64_t v236 = (v210 - *v47) >> 2;
    unint64_t v237 = v236 + 1;
    if (!((unint64_t)(v236 + 1) >> 62))
    {
      uint64_t v238 = v180 - v227;
      if (v238 >> 1 > v237) {
        unint64_t v237 = v238 >> 1;
      }
      if ((unint64_t)v238 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v239 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v239 = v237;
      }
      if (v239)
      {
        float64x2_t v240 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v47 + 2), v239);
        float64x2_t v227 = *v47;
        float64x2_t v210 = v47[1];
      }
      else
      {
        float64x2_t v240 = 0;
      }
      float64x2_t v241 = &v240[4 * v236];
      float64x2_t v242 = &v240[4 * v239];
      *(_DWORD *)float64x2_t v241 = 12;
      float64x2_t v235 = v241 + 4;
      while (v210 != v227)
      {
        int v244 = *((_DWORD *)v210 - 1);
        v210 -= 4;
        *((_DWORD *)v241 - 1) = v244;
        v241 -= 4;
      }
LABEL_285:
      *float64x2_t v47 = v241;
      v47[1] = v235;
      _OWORD v47[2] = v242;
      if (v227) {
        operator delete(v227);
      }
      goto LABEL_287;
    }
LABEL_322:
    abort();
  }
  unint64_t v48 = *(void *)(a3 + 16);
  float64x2_t v49 = *(float32x4_t **)(a3 + 8);
  if ((unint64_t)v49 >= v48)
  {
    uint64_t v62 = ((uint64_t)v49 - *(void *)a3) >> 4;
    float64x2_t v47 = a5;
    if ((unint64_t)(v62 + 1) >> 60) {
      goto LABEL_322;
    }
    uint64_t v63 = v48 - *(void *)a3;
    uint64_t v64 = v63 >> 3;
    if (v63 >> 3 <= (unint64_t)(v62 + 1)) {
      uint64_t v64 = v62 + 1;
    }
    if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v65 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v65 = v64;
    }
    if (v65) {
      double v66 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v65);
    }
    else {
      double v66 = 0;
    }
    unsigned int v128 = (float32x4_t *)&v66[16 * v62];
    float64x2_t v129 = &v66[16 * v65];
    float32x4_t *v128 = *a2;
    float64x2_t v50 = (_OWORD *)v128[1].f32;
    float64x2_t v131 = *(char **)a3;
    float64x2_t v130 = *(char **)(a3 + 8);
    if (v130 != *(char **)a3)
    {
      do
      {
        float32x4_t v132 = *((float32x4_t *)v130 - 1);
        v130 -= 16;
        v128[-1] = v132;
        --v128;
      }
      while (v130 != v131);
      float64x2_t v130 = *(char **)a3;
    }
    *(void *)a3 = v128;
    *(void *)(a3 + 8) = v50;
    *(void *)(a3 + 16) = v129;
    if (v130) {
      operator delete(v130);
    }
  }
  else
  {
    float64x2_t v47 = a5;
    *float64x2_t v49 = *a2;
    float64x2_t v50 = (_OWORD *)v49[1].f32;
  }
  *(void *)(a3 + 8) = v50;
  __x[0] = 0;
  std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
  float64x2_t v134 = v47 + 2;
  float64x2_t v133 = v47[2];
  int v135 = v47[1];
  if (v135 >= v133)
  {
    unsigned int v137 = *v47;
    uint64_t v138 = (v135 - *v47) >> 2;
    unint64_t v139 = v138 + 1;
    if ((unint64_t)(v138 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v140 = v133 - v137;
    if (v140 >> 1 > v139) {
      unint64_t v139 = v140 >> 1;
    }
    if ((unint64_t)v140 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v141 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v141 = v139;
    }
    if (v141)
    {
      unsigned int v142 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v47 + 2), v141);
      unsigned int v137 = *v47;
      int v135 = v47[1];
    }
    else
    {
      unsigned int v142 = 0;
    }
    float64x2_t v190 = &v142[4 * v138];
    float64x2_t v133 = &v142[4 * v141];
    *(_DWORD *)float64x2_t v190 = 3;
    int v136 = v190 + 4;
    while (v135 != v137)
    {
      int v191 = *((_DWORD *)v135 - 1);
      v135 -= 4;
      *((_DWORD *)v190 - 1) = v191;
      v190 -= 4;
    }
    *float64x2_t v47 = v190;
    v47[1] = v136;
    _OWORD v47[2] = v133;
    if (v137)
    {
      operator delete(v137);
      float64x2_t v133 = *v134;
    }
  }
  else
  {
    *(_DWORD *)int v135 = 3;
    int v136 = v135 + 4;
  }
  v47[1] = v136;
  if (v136 >= v133)
  {
    float64x2_t v193 = *v47;
    uint64_t v194 = (v136 - *v47) >> 2;
    unint64_t v195 = v194 + 1;
    if ((unint64_t)(v194 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v196 = v133 - v193;
    if (v196 >> 1 > v195) {
      unint64_t v195 = v196 >> 1;
    }
    if ((unint64_t)v196 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v197 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v197 = v195;
    }
    if (v197)
    {
      float64x2_t v198 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v47 + 2), v197);
      float64x2_t v193 = *v47;
      int v136 = v47[1];
    }
    else
    {
      float64x2_t v198 = 0;
    }
    float64x2_t v208 = &v198[4 * v194];
    float64x2_t v133 = &v198[4 * v197];
    *(_DWORD *)float64x2_t v208 = 6;
    float64x2_t v192 = v208 + 4;
    while (v136 != v193)
    {
      int v209 = *((_DWORD *)v136 - 1);
      v136 -= 4;
      *((_DWORD *)v208 - 1) = v209;
      v208 -= 4;
    }
    *float64x2_t v47 = v208;
    v47[1] = v192;
    _OWORD v47[2] = v133;
    if (v193)
    {
      operator delete(v193);
      float64x2_t v133 = *v134;
    }
  }
  else
  {
    *(_DWORD *)int v136 = 6;
    float64x2_t v192 = v136 + 4;
  }
  v47[1] = v192;
  if (v192 >= v133)
  {
    float64x2_t v211 = *v47;
    uint64_t v212 = (v192 - *v47) >> 2;
    unint64_t v213 = v212 + 1;
    if ((unint64_t)(v212 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v214 = v133 - v211;
    if (v214 >> 1 > v213) {
      unint64_t v213 = v214 >> 1;
    }
    if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v215 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v215 = v213;
    }
    if (v215)
    {
      float64x2_t v216 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v47 + 2), v215);
      float64x2_t v211 = *v47;
      float64x2_t v192 = v47[1];
    }
    else
    {
      float64x2_t v216 = 0;
    }
    float64x2_t v225 = &v216[4 * v212];
    float64x2_t v133 = &v216[4 * v215];
    *(_DWORD *)float64x2_t v225 = 9;
    float64x2_t v210 = v225 + 4;
    while (v192 != v211)
    {
      int v226 = *((_DWORD *)v192 - 1);
      v192 -= 4;
      *((_DWORD *)v225 - 1) = v226;
      v225 -= 4;
    }
    *float64x2_t v47 = v225;
    v47[1] = v210;
    _OWORD v47[2] = v133;
    if (v211)
    {
      operator delete(v211);
      float64x2_t v133 = *v134;
    }
  }
  else
  {
    *(_DWORD *)float64x2_t v192 = 9;
    float64x2_t v210 = v192 + 4;
  }
  v47[1] = v210;
  if (v210 >= v133)
  {
    float64x2_t v227 = *v47;
    uint64_t v228 = (v210 - *v47) >> 2;
    unint64_t v229 = v228 + 1;
    if (!((unint64_t)(v228 + 1) >> 62))
    {
      uint64_t v230 = v133 - v227;
      if (v230 >> 1 > v229) {
        unint64_t v229 = v230 >> 1;
      }
      if ((unint64_t)v230 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v231 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v231 = v229;
      }
      if (v231)
      {
        float64x2_t v232 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v47 + 2), v231);
        float64x2_t v227 = *v47;
        float64x2_t v210 = v47[1];
      }
      else
      {
        float64x2_t v232 = 0;
      }
      float64x2_t v241 = &v232[4 * v228];
      float64x2_t v242 = &v232[4 * v231];
      *(_DWORD *)float64x2_t v241 = 12;
      float64x2_t v235 = v241 + 4;
      while (v210 != v227)
      {
        int v243 = *((_DWORD *)v210 - 1);
        v210 -= 4;
        *((_DWORD *)v241 - 1) = v243;
        v241 -= 4;
      }
      goto LABEL_285;
    }
    goto LABEL_322;
  }
LABEL_268:
  *(_DWORD *)float64x2_t v210 = 12;
  float64x2_t v235 = v210 + 4;
LABEL_287:
  v47[1] = v235;
LABEL_288:
  if (v288)
  {
    float64x2_t v289 = v288;
    operator delete(v288);
  }
}

void geom_dop8_polyhedron_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t a5)
{
  float32x4_t v11 = a5;
  uint64_t v8 = geom::collection_to_vector<float>(a2);
  unint64_t v9 = (unint64_t *)geom::collection_to_vector<float>(a3);
  float32x4_t v10 = (char **)geom::collection_to_vector<float>(a4);
  geom::dop<(unsigned char)8,float>::compute_polyhedron(a1, &v11, v8, v9, v10);
}

void geom::dop<(unsigned char)8,float>::compute_polyhedron(uint64_t a1, float32x4_t *a2, uint64_t a3, unint64_t *a4, char **a5)
{
  uint64_t v6 = 0;
  v291[5] = *MEMORY[0x263EF8340];
  *(void *)(a3 + 8) = *(void *)a3;
  a4[1] = *a4;
  a5[1] = *a5;
  float32x4_t v7 = *a2;
  do
  {
    float32x4_t v8 = vmulq_f32(geom::kdop_axes<(unsigned char)8,float>[v6], v7);
    v8.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
    unint64_t v9 = (float *)(a1 + 4 * v6);
    *((float *)&v291[3] + v6) = *v9 - v8.f32[0];
    *((float *)&v291[1] + v6++) = v9[4] - v8.f32[0];
  }
  while (v6 != 4);
  float64x2_t v289 = 0;
  float64x2_t v290 = 0;
  v291[0] = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&v289, 8uLL);
  uint64_t v11 = 0;
  uint64_t v12 = -1;
  uint64_t v13 = -1;
  do
  {
    float v14 = *((float *)&v291[3] + v11);
    v10.i32[0] = *((_DWORD *)&v291[1] + v11);
    if (v14 == v10.f32[0])
    {
      uint64_t v12 = v11;
    }
    else
    {
      uint64_t v15 = v12;
      float v16 = fabsf(v14);
      float v17 = fabsf(v10.f32[0]);
      BOOL v18 = v16 == INFINITY || v17 == INFINITY;
      if (v18 || (uint64_t v12 = v11, vabds_f32(v14, v10.f32[0]) >= (float)((float)((float)(v16 + v17) + 1.0) * 0.00001)))
      {
        float32x4_t v19 = geom::kdop_axes<(unsigned char)8,float>[v11];
        float32x4_t v20 = vdivq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0));
        float64x2_t v21 = v290;
        if ((unint64_t)v290 >= v291[0])
        {
          uint64_t v23 = v290 - v289;
          if ((unint64_t)(v23 + 1) >> 60) {
            goto LABEL_322;
          }
          float32x4_t v278 = geom::kdop_axes<(unsigned char)8,float>[v11];
          unint64_t v24 = (uint64_t)(v291[0] - (void)v289) >> 3;
          if (v24 <= v23 + 1) {
            unint64_t v24 = v23 + 1;
          }
          if (v291[0] - (void)v289 >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            float32x4_t v275 = v20;
            int64x2_t v26 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v291, v25);
            float32x4_t v20 = v275;
          }
          else
          {
            int64x2_t v26 = 0;
          }
          double v27 = (float32x4_t *)&v26[16 * v23];
          *double v27 = v20;
          float64x2_t v22 = v27 + 1;
          uint64_t v29 = v289;
          float64x2_t v28 = v290;
          if (v290 != v289)
          {
            do
            {
              float32x4_t v30 = v28[-1];
              --v28;
              v27[-1] = v30;
              --v27;
            }
            while (v28 != v29);
            float64x2_t v28 = v289;
          }
          float64x2_t v289 = v27;
          float64x2_t v290 = v22;
          v291[0] = &v26[16 * v25];
          if (v28) {
            operator delete(v28);
          }
          float32x4_t v19 = v278;
        }
        else
        {
          *float64x2_t v290 = v20;
          float64x2_t v22 = v21 + 1;
        }
        float64x2_t v290 = v22;
        float64x2_t v31 = (const float *)&v291[3] + v11;
        float32x4_t v32 = vld1q_dup_f32(v31);
        float32x4_t v10 = vdivq_f32(v19, v32);
        if ((unint64_t)v22 >= v291[0])
        {
          uint64_t v34 = v22 - v289;
          if ((unint64_t)(v34 + 1) >> 60) {
            goto LABEL_322;
          }
          unint64_t v35 = (uint64_t)(v291[0] - (void)v289) >> 3;
          if (v35 <= v34 + 1) {
            unint64_t v35 = v34 + 1;
          }
          if (v291[0] - (void)v289 >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36)
          {
            float32x4_t v279 = v10;
            float64x2_t v37 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v291, v36);
            float32x4_t v10 = v279;
          }
          else
          {
            float64x2_t v37 = 0;
          }
          float64x2_t v38 = (float32x4_t *)&v37[16 * v34];
          float32x4_t *v38 = v10;
          unint64_t v33 = v38 + 1;
          float32x4_t v40 = v289;
          float32x4_t v39 = v290;
          if (v290 != v289)
          {
            do
            {
              float32x4_t v41 = v39[-1];
              --v39;
              v10.i32[1] = v41.i32[1];
              v38[-1] = v41;
              --v38;
            }
            while (v39 != v40);
            float32x4_t v39 = v289;
          }
          float64x2_t v289 = v38;
          float64x2_t v290 = v33;
          v291[0] = &v37[16 * v36];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *float64x2_t v22 = v10;
          unint64_t v33 = v22 + 1;
        }
        float64x2_t v290 = v33;
        uint64_t v13 = v11;
        uint64_t v12 = v15;
      }
    }
    ++v11;
  }
  while (v11 != 4);
  float32x4_t v42 = v289;
  uint64_t v43 = v290 - v289;
  if (v43)
  {
    if (v43 != 2)
    {
      if ((unint64_t)((char *)v290 - (char *)v289) > 0x7F)
      {
        geom::half_plane_intersection_3<float>(8uLL, v289, (char **)a3, a4, a5);
        float32x2_t v69 = a2;
      }
      else
      {
        *(void *)std::vector<int>::value_type __x = 0;
        float64x2_t v287 = 0;
        float64x2_t v288 = 0;
        float32x4_t v53 = geom::kdop_axes<(unsigned char)8,float>[v12];
        float v54 = COERCE_FLOAT(geom::kdop_axes<(unsigned char)8,float>[v12].i64[1]);
        float v55 = fabsf(v54);
        LODWORD(v56) = HIDWORD(geom::kdop_axes<(unsigned char)8,float>[v12].i64[0]);
        float v57 = -v54;
        if (v55 <= 0.00000011921)
        {
          float32x4_t v58 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v56), (int32x4_t)v53);
        }
        else
        {
          v58.i32[0] = 0;
          v58.f32[1] = v57;
          v58.i64[1] = v53.u32[1];
        }
        int32x4_t v70 = (int32x4_t)vmulq_f32(v58, v58);
        v70.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v70, 2), vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1))).u32[0];
        float32x2_t v71 = vrsqrte_f32((float32x2_t)v70.u32[0]);
        float32x2_t v72 = vmul_f32(v71, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v71, v71)));
        LODWORD(v73) = vmul_f32(v72, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v72, v72))).u32[0];
        if (v55 <= 0.00000011921)
        {
          float32x4_t v74 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v56), (int32x4_t)v53);
        }
        else
        {
          v74.i32[0] = 0;
          v74.f32[1] = v57;
          v74.i64[1] = v53.u32[1];
        }
        int32x4_t v75 = (int32x4_t)vmulq_f32(v74, v74);
        v75.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1))).u32[0];
        float32x4_t v281 = vmulq_n_f32(v58, v73);
        float32x2_t v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
        float32x2_t v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
        float32x4_t v78 = vmulq_n_f32(v74, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
        float32x4_t v269 = vnegq_f32(v53);
        float32x4_t v270 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL);
        float32x4_t v79 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL), v269), v78, v270);
        float32x4_t v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL);
        int32x4_t v81 = (int32x4_t)vmulq_f32(v79, v79);
        v81.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v81.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v81, 2), *(float32x2_t *)v81.i8)).u32[0];
        float32x2_t v82 = vrsqrte_f32((float32x2_t)v81.u32[0]);
        float32x2_t v83 = vmul_f32(v82, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v82, v82)));
        float32x4_t v277 = vmulq_n_f32(v80, vmul_f32(v83, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v83, v83))).f32[0]);
        if (v290 == v289)
        {
          uint64_t v116 = 0;
          unint64_t v107 = 0;
        }
        else
        {
          unint64_t v84 = 0;
          float32x2_t v85 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 1);
          float32x2_t v86 = (float32x2_t)vdup_laneq_s32((int32x4_t)v53, 2);
          int32x4_t v267 = vdupq_laneq_s32((int32x4_t)v53, 2);
          int32x2_t v268 = (int32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
          float32x4_t v266 = geom::kdop_axes<(unsigned char)8,float>[v12];
          do
          {
            float32x4_t v87 = v42[v84];
            float32x4_t v88 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v87, (int32x4_t)v87), (int8x16_t)v87, 0xCuLL), v269), v87, v270);
            float32x4_t v89 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL);
            int32x4_t v90 = (int32x4_t)vmulq_f32(v88, v88);
            v90.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v90, 2), *(float32x2_t *)v90.i8)).u32[0];
            float32x2_t v91 = vrsqrte_f32((float32x2_t)v90.u32[0]);
            float32x2_t v92 = vmul_f32(v91, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v91, v91)));
            float32x4_t v93 = vmulq_n_f32(v89, vmul_f32(v92, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v92, v92))).f32[0]);
            int32x4_t v94 = vzip1q_s32((int32x4_t)v53, (int32x4_t)v87);
            float32x2_t v95 = (float32x2_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
            float32x2_t v96 = (float32x2_t)vzip1_s32(v268, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL));
            float32x4_t v272 = (float32x4_t)vzip1q_s32(vzip1q_s32(v94, v267), vdupq_laneq_s32(v94, 2));
            float32x4_t v273 = v93;
            *(float32x2_t *)v90.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v94.i8, v87.f32[0]), v95, *(float32x2_t *)v87.f32, 1), v96, v87, 2);
            v87.i32[1] = vdupq_laneq_s32(v94, 3).i32[1];
            float32x4_t v271 = v87;
            *(float32x2_t *)v87.f32 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v94.i8, v53.f32[0]), v85, v95), v86, v96);
            simd_float2x2 v97 = __invert_f2((simd_float2x2)v87);
            float32x4_t v98 = vmlaq_lane_f32(vmulq_n_f32(v272, v97.columns[1].f32[0]), v271, (float32x2_t)v97.columns[1], 1);
            int32x4_t v99 = (int32x4_t)vmulq_f32(v281, v273);
            int32x4_t v100 = (int32x4_t)vmulq_f32(v277, v273);
            *(int32x2_t *)v99.i8 = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v99, 2), vadd_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v100, 2), vadd_f32(*(float32x2_t *)v100.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v100.i8, 1))));
            float32x2_t v101 = vmul_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8);
            v101.i32[0] = vadd_f32(v101, (float32x2_t)vdup_lane_s32((int32x2_t)v101, 1)).u32[0];
            *(float32x2_t *)v100.i8 = vrsqrte_f32((float32x2_t)v101.u32[0]);
            *(float32x2_t *)v100.i8 = vmul_f32(*(float32x2_t *)v100.i8, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8)));
            int32x2_t v102 = (int32x2_t)vmul_f32(*(float32x2_t *)v100.i8, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8)));
            *(float32x2_t *)v99.i8 = vmul_n_f32(*(float32x2_t *)v99.i8, *(float *)v102.i32);
            int32x4_t v103 = (int32x4_t)vmulq_f32(v281, v98);
            *(float *)v102.i32 = -*(float *)&v99.i32[1];
            int32x4_t v104 = (int32x4_t)vmulq_f32(v277, v98);
            *(int32x2_t *)v99.i8 = vzip1_s32(v102, *(int32x2_t *)v99.i8);
            *(float32x2_t *)v104.i8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v103, 2), vadd_f32(*(float32x2_t *)v103.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v103.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v104, 2), vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)))), *(float32x2_t *)v99.i8);
            float32x2_t v105 = vdiv_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)), 0));
            uint64_t v106 = v287;
            if (v287 >= v288)
            {
              uint64_t v108 = ((uint64_t)v287 - *(void *)__x) >> 3;
              if ((unint64_t)(v108 + 1) >> 61) {
                goto LABEL_322;
              }
              unint64_t v109 = ((uint64_t)v288 - *(void *)__x) >> 2;
              if (v109 <= v108 + 1) {
                unint64_t v109 = v108 + 1;
              }
              if ((unint64_t)v288 - *(void *)__x >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v110 = v109;
              }
              if (v110) {
                int v111 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v288, v110);
              }
              else {
                int v111 = 0;
              }
              unsigned int v112 = (float32x2_t *)&v111[8 * v108];
              *unsigned int v112 = v105;
              unint64_t v107 = v112 + 1;
              uint64_t v114 = *(float32x2_t **)__x;
              float32x2_t v113 = v287;
              if (v287 != *(float32x2_t **)__x)
              {
                do
                {
                  float32x2_t v115 = v113[-1];
                  --v113;
                  v112[-1] = v115;
                  --v112;
                }
                while (v113 != v114);
                float32x2_t v113 = *(float32x2_t **)__x;
              }
              *(void *)std::vector<int>::value_type __x = v112;
              float64x2_t v287 = v107;
              float64x2_t v288 = (float32x2_t *)&v111[8 * v110];
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *float64x2_t v287 = v105;
              unint64_t v107 = v106 + 1;
            }
            float32x4_t v53 = v266;
            float64x2_t v287 = v107;
            ++v84;
            float32x4_t v42 = v289;
          }
          while (v84 < v290 - v289);
          uint64_t v116 = *(void *)__x;
        }
        std::vector<int> __p = 0;
        uint64_t v284 = 0;
        uint64_t v285 = 0;
        geom::half_plane_intersection_2<float>(((uint64_t)v107 - v116) >> 3, v116, (uint64_t)&__p);
        float64x2_t v145 = (float32x2_t *)__p;
        float64x2_t v146 = v284;
        float32x4_t v147 = *(float32x4_t **)(a3 + 8);
        if (__p != v284)
        {
          uint64_t v148 = (void *)(a3 + 16);
          do
          {
            float32x4_t v149 = vmlaq_n_f32(vmulq_lane_f32(v277, *v145, 1), v281, COERCE_FLOAT(*v145));
            if ((unint64_t)v147 >= *v148)
            {
              uint64_t v150 = ((uint64_t)v147 - *(void *)a3) >> 4;
              if ((unint64_t)(v150 + 1) >> 60) {
                goto LABEL_322;
              }
              uint64_t v151 = *v148 - *(void *)a3;
              uint64_t v152 = v151 >> 3;
              if (v151 >> 3 <= (unint64_t)(v150 + 1)) {
                uint64_t v152 = v150 + 1;
              }
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v153 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v152;
              }
              if (v153)
              {
                float32x4_t v274 = v149;
                unsigned int v154 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v153);
                float32x4_t v149 = v274;
              }
              else
              {
                unsigned int v154 = 0;
              }
              uint64_t v155 = (float32x4_t *)&v154[16 * v150];
              *uint64_t v155 = v149;
              float32x4_t v147 = v155 + 1;
              uint64_t v157 = *(char **)a3;
              float32x4_t v156 = *(char **)(a3 + 8);
              if (v156 != *(char **)a3)
              {
                do
                {
                  float32x4_t v158 = *((float32x4_t *)v156 - 1);
                  v156 -= 16;
                  v155[-1] = v158;
                  --v155;
                }
                while (v156 != v157);
                float32x4_t v156 = *(char **)a3;
              }
              *(void *)a3 = v155;
              *(void *)(a3 + 8) = v147;
              *(void *)(a3 + 16) = &v154[16 * v153];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              *v147++ = v149;
            }
            *(void *)(a3 + 8) = v147;
            ++v145;
          }
          while (v145 != v146);
        }
        std::vector<unsigned int>::resize((std::vector<int> *)a4, ((uint64_t)v147 - *(void *)a3) >> 3);
        uint64_t v159 = *(void *)(a3 + 8) - *(void *)a3;
        if (v159)
        {
          uint64_t v160 = 0;
          uint64_t v161 = (int *)*a4;
          uint64_t v162 = 4 * (v159 >> 4);
          uint64_t v163 = v162;
          do
          {
            v161[v160] = v160;
            ++v160;
            v163 -= 4;
          }
          while (v163);
          unint64_t v164 = (_DWORD *)(a4[1] - 4);
          do
          {
            int v165 = *v161++;
            *v164-- = v165;
            v162 -= 4;
          }
          while (v162);
        }
        unint64_t v166 = (unint64_t)v159 >> 4;
        float64x2_t v167 = a5[2];
        float64x2_t v168 = a5[1];
        if (v168 >= v167)
        {
          unint64_t v170 = *a5;
          uint64_t v171 = (v168 - *a5) >> 2;
          unint64_t v172 = v171 + 1;
          if ((unint64_t)(v171 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v173 = v167 - v170;
          if (v173 >> 1 > v172) {
            unint64_t v172 = v173 >> 1;
          }
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v174 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v174 = v172;
          }
          if (v174)
          {
            float64x2_t v175 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v174);
            unint64_t v170 = *a5;
            float64x2_t v168 = a5[1];
          }
          else
          {
            float64x2_t v175 = 0;
          }
          uint64_t v247 = &v175[4 * v171];
          float64x2_t v167 = &v175[4 * v174];
          *(_DWORD *)uint64_t v247 = v166;
          uint64_t v169 = v247 + 4;
          while (v168 != v170)
          {
            int v248 = *((_DWORD *)v168 - 1);
            v168 -= 4;
            *((_DWORD *)v247 - 1) = v248;
            v247 -= 4;
          }
          *a5 = v247;
          a5[1] = v169;
          a5[2] = v167;
          if (v170)
          {
            operator delete(v170);
            float64x2_t v167 = a5[2];
          }
        }
        else
        {
          *(_DWORD *)float64x2_t v168 = v166;
          uint64_t v169 = v168 + 4;
        }
        a5[1] = v169;
        uint64_t v249 = ((*(void *)(a3 + 8) - *(void *)a3) >> 3) & 0xFFFFFFFELL;
        if (v169 >= v167)
        {
          unint64_t v251 = *a5;
          uint64_t v252 = (v169 - *a5) >> 2;
          unint64_t v253 = v252 + 1;
          if ((unint64_t)(v252 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v254 = v167 - v251;
          if (v254 >> 1 > v253) {
            unint64_t v253 = v254 >> 1;
          }
          if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v255 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v255 = v253;
          }
          if (v255)
          {
            float64x2_t v256 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v255);
            unint64_t v251 = *a5;
            uint64_t v169 = a5[1];
          }
          else
          {
            float64x2_t v256 = 0;
          }
          int v257 = &v256[4 * v252];
          long long v258 = &v256[4 * v255];
          *(_DWORD *)int v257 = v249;
          uint64_t v250 = v257 + 4;
          if (v169 == v251)
          {
            float32x2_t v69 = a2;
          }
          else
          {
            float32x2_t v69 = a2;
            do
            {
              int v259 = *((_DWORD *)v169 - 1);
              v169 -= 4;
              *((_DWORD *)v257 - 1) = v259;
              v257 -= 4;
            }
            while (v169 != v251);
          }
          *a5 = v257;
          a5[1] = v250;
          a5[2] = v258;
          if (v251) {
            operator delete(v251);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v169 = v249;
          uint64_t v250 = v169 + 4;
          float32x2_t v69 = a2;
        }
        a5[1] = v250;
        if (__p)
        {
          uint64_t v284 = (float32x2_t *)__p;
          operator delete(__p);
        }
        if (*(void *)__x)
        {
          float64x2_t v287 = *(float32x2_t **)__x;
          operator delete(*(void **)__x);
        }
      }
      float64x2_t v260 = *(float32x4_t **)a3;
      float64x2_t v261 = *(float32x4_t **)(a3 + 8);
      while (v260 != v261)
      {
        float32x4_t *v260 = vaddq_f32(*v69, *v260);
        ++v260;
      }
      goto LABEL_288;
    }
    float32x4_t v44 = geom::kdop_axes<(unsigned char)8,float>[v13];
    float32x4_t v45 = vmulq_n_f32(v44, *(float *)(a1 + 4 * v13));
    unint64_t v46 = *(void *)(a3 + 16);
    float64x2_t v47 = *(float32x4_t **)(a3 + 8);
    if ((unint64_t)v47 >= v46)
    {
      uint64_t v59 = ((uint64_t)v47 - *(void *)a3) >> 4;
      float64x2_t v49 = a5;
      if ((unint64_t)(v59 + 1) >> 60) {
        goto LABEL_322;
      }
      float32x4_t v280 = geom::kdop_axes<(unsigned char)8,float>[v13];
      uint64_t v60 = v46 - *(void *)a3;
      uint64_t v61 = v60 >> 3;
      if (v60 >> 3 <= (unint64_t)(v59 + 1)) {
        uint64_t v61 = v59 + 1;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v62 = v61;
      }
      if (v62)
      {
        float32x4_t v276 = v45;
        uint64_t v63 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v62);
        float32x4_t v45 = v276;
      }
      else
      {
        uint64_t v63 = 0;
      }
      std::vector<int> v117 = (float32x4_t *)&v63[16 * v59];
      std::vector<int> v118 = &v63[16 * v62];
      *std::vector<int> v117 = v45;
      unint64_t v48 = v117 + 1;
      float32x4_t v120 = *(char **)a3;
      float32x4_t v119 = *(char **)(a3 + 8);
      if (v119 != *(char **)a3)
      {
        do
        {
          float32x4_t v121 = *((float32x4_t *)v119 - 1);
          v119 -= 16;
          v117[-1] = v121;
          --v117;
        }
        while (v119 != v120);
        float32x4_t v119 = *(char **)a3;
      }
      *(void *)a3 = v117;
      *(void *)(a3 + 8) = v48;
      *(void *)(a3 + 16) = v118;
      if (v119) {
        operator delete(v119);
      }
      float32x4_t v44 = v280;
    }
    else
    {
      *float64x2_t v47 = v45;
      unint64_t v48 = v47 + 1;
      float64x2_t v49 = a5;
    }
    *(void *)(a3 + 8) = v48;
    float32x4_t v122 = vmulq_n_f32(v44, *(float *)(a1 + 4 * v13 + 16));
    unint64_t v123 = *(void *)(a3 + 16);
    if ((unint64_t)v48 >= v123)
    {
      uint64_t v125 = ((uint64_t)v48 - *(void *)a3) >> 4;
      if ((unint64_t)(v125 + 1) >> 60) {
        goto LABEL_322;
      }
      uint64_t v126 = v123 - *(void *)a3;
      uint64_t v127 = v126 >> 3;
      if (v126 >> 3 <= (unint64_t)(v125 + 1)) {
        uint64_t v127 = v125 + 1;
      }
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v128 = v127;
      }
      if (v128)
      {
        float32x4_t v282 = v122;
        float64x2_t v129 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v128);
        float32x4_t v122 = v282;
      }
      else
      {
        float64x2_t v129 = 0;
      }
      float64x2_t v176 = (float32x4_t *)&v129[16 * v125];
      float64x2_t v177 = &v129[16 * v128];
      *float64x2_t v176 = v122;
      f32 = (_OWORD *)v176[1].f32;
      float64x2_t v179 = *(char **)a3;
      float32x4_t v178 = *(char **)(a3 + 8);
      if (v178 != *(char **)a3)
      {
        do
        {
          float32x4_t v180 = *((float32x4_t *)v178 - 1);
          v178 -= 16;
          v176[-1] = v180;
          --v176;
        }
        while (v178 != v179);
        float32x4_t v178 = *(char **)a3;
      }
      *(void *)a3 = v176;
      *(void *)(a3 + 8) = f32;
      *(void *)(a3 + 16) = v177;
      if (v178) {
        operator delete(v178);
      }
    }
    else
    {
      *unint64_t v48 = v122;
      f32 = (_OWORD *)v48[1].f32;
    }
    *(void *)(a3 + 8) = f32;
    __x[0] = 0;
    std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
    float64x2_t v181 = (_DWORD *)*a4;
    v181[10] = 1;
    v181[7] = 1;
    v181[4] = 1;
    float64x2_t v183 = v49 + 2;
    float64x2_t v182 = v49[2];
    float64x2_t v184 = v49[1];
    if (v184 >= v182)
    {
      unint64_t v186 = *v49;
      uint64_t v187 = (v184 - *v49) >> 2;
      unint64_t v188 = v187 + 1;
      if ((unint64_t)(v187 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v189 = v182 - v186;
      if (v189 >> 1 > v188) {
        unint64_t v188 = v189 >> 1;
      }
      if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v190 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v190 = v188;
      }
      if (v190)
      {
        int v191 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v190);
        unint64_t v186 = *v49;
        float64x2_t v184 = v49[1];
      }
      else
      {
        int v191 = 0;
      }
      float64x2_t v201 = &v191[4 * v187];
      float64x2_t v182 = &v191[4 * v190];
      *(_DWORD *)float64x2_t v201 = 3;
      uint64_t v185 = v201 + 4;
      while (v184 != v186)
      {
        int v202 = *((_DWORD *)v184 - 1);
        v184 -= 4;
        *((_DWORD *)v201 - 1) = v202;
        v201 -= 4;
      }
      *float64x2_t v49 = v201;
      v49[1] = v185;
      _OWORD v49[2] = v182;
      if (v186)
      {
        operator delete(v186);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v184 = 3;
      uint64_t v185 = v184 + 4;
    }
    v49[1] = v185;
    if (v185 >= v182)
    {
      unint64_t v204 = *v49;
      uint64_t v205 = (v185 - *v49) >> 2;
      unint64_t v206 = v205 + 1;
      if ((unint64_t)(v205 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v207 = v182 - v204;
      if (v207 >> 1 > v206) {
        unint64_t v206 = v207 >> 1;
      }
      if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v208 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v208 = v206;
      }
      if (v208)
      {
        int v209 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v208);
        unint64_t v204 = *v49;
        uint64_t v185 = v49[1];
      }
      else
      {
        int v209 = 0;
      }
      uint64_t v219 = &v209[4 * v205];
      float64x2_t v182 = &v209[4 * v208];
      *(_DWORD *)uint64_t v219 = 6;
      uint64_t v203 = v219 + 4;
      while (v185 != v204)
      {
        int v220 = *((_DWORD *)v185 - 1);
        v185 -= 4;
        *((_DWORD *)v219 - 1) = v220;
        v219 -= 4;
      }
      *float64x2_t v49 = v219;
      v49[1] = v203;
      _OWORD v49[2] = v182;
      if (v204)
      {
        operator delete(v204);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v185 = 6;
      uint64_t v203 = v185 + 4;
    }
    v49[1] = v203;
    if (v203 >= v182)
    {
      unint64_t v221 = *v49;
      uint64_t v222 = (v203 - *v49) >> 2;
      unint64_t v223 = v222 + 1;
      if ((unint64_t)(v222 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v224 = v182 - v221;
      if (v224 >> 1 > v223) {
        unint64_t v223 = v224 >> 1;
      }
      if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v225 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v225 = v223;
      }
      if (v225)
      {
        int v226 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v225);
        unint64_t v221 = *v49;
        uint64_t v203 = v49[1];
      }
      else
      {
        int v226 = 0;
      }
      float64x2_t v235 = &v226[4 * v222];
      float64x2_t v182 = &v226[4 * v225];
      *(_DWORD *)float64x2_t v235 = 9;
      uint64_t v212 = v235 + 4;
      while (v203 != v221)
      {
        int v236 = *((_DWORD *)v203 - 1);
        v203 -= 4;
        *((_DWORD *)v235 - 1) = v236;
        v235 -= 4;
      }
      *float64x2_t v49 = v235;
      v49[1] = v212;
      _OWORD v49[2] = v182;
      if (v221)
      {
        operator delete(v221);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v203 = 9;
      uint64_t v212 = v203 + 4;
    }
    v49[1] = v212;
    if (v212 < v182) {
      goto LABEL_268;
    }
    unint64_t v229 = *v49;
    uint64_t v238 = (v212 - *v49) >> 2;
    unint64_t v239 = v238 + 1;
    if (!((unint64_t)(v238 + 1) >> 62))
    {
      uint64_t v240 = v182 - v229;
      if (v240 >> 1 > v239) {
        unint64_t v239 = v240 >> 1;
      }
      if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v241 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v241 = v239;
      }
      if (v241)
      {
        float64x2_t v242 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v241);
        unint64_t v229 = *v49;
        uint64_t v212 = v49[1];
      }
      else
      {
        float64x2_t v242 = 0;
      }
      int v243 = &v242[4 * v238];
      int v244 = &v242[4 * v241];
      *(_DWORD *)int v243 = 12;
      unint64_t v237 = v243 + 4;
      while (v212 != v229)
      {
        int v246 = *((_DWORD *)v212 - 1);
        v212 -= 4;
        *((_DWORD *)v243 - 1) = v246;
        v243 -= 4;
      }
LABEL_285:
      *float64x2_t v49 = v243;
      v49[1] = v237;
      _OWORD v49[2] = v244;
      if (v229) {
        operator delete(v229);
      }
      goto LABEL_287;
    }
LABEL_322:
    abort();
  }
  unint64_t v50 = *(void *)(a3 + 16);
  float32x4_t v51 = *(float32x4_t **)(a3 + 8);
  if ((unint64_t)v51 >= v50)
  {
    uint64_t v64 = ((uint64_t)v51 - *(void *)a3) >> 4;
    float64x2_t v49 = a5;
    if ((unint64_t)(v64 + 1) >> 60) {
      goto LABEL_322;
    }
    uint64_t v65 = v50 - *(void *)a3;
    uint64_t v66 = v65 >> 3;
    if (v65 >> 3 <= (unint64_t)(v64 + 1)) {
      uint64_t v66 = v64 + 1;
    }
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v66;
    }
    if (v67) {
      int32x4_t v68 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v67);
    }
    else {
      int32x4_t v68 = 0;
    }
    float64x2_t v130 = (float32x4_t *)&v68[16 * v64];
    float64x2_t v131 = &v68[16 * v67];
    *float64x2_t v130 = *a2;
    float v52 = (_OWORD *)v130[1].f32;
    float64x2_t v133 = *(char **)a3;
    float32x4_t v132 = *(char **)(a3 + 8);
    if (v132 != *(char **)a3)
    {
      do
      {
        float32x4_t v134 = *((float32x4_t *)v132 - 1);
        v132 -= 16;
        v130[-1] = v134;
        --v130;
      }
      while (v132 != v133);
      float32x4_t v132 = *(char **)a3;
    }
    *(void *)a3 = v130;
    *(void *)(a3 + 8) = v52;
    *(void *)(a3 + 16) = v131;
    if (v132) {
      operator delete(v132);
    }
  }
  else
  {
    float64x2_t v49 = a5;
    *float32x4_t v51 = *a2;
    float v52 = (_OWORD *)v51[1].f32;
  }
  *(void *)(a3 + 8) = v52;
  __x[0] = 0;
  std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
  int v136 = v49 + 2;
  int v135 = v49[2];
  unsigned int v137 = v49[1];
  if (v137 >= v135)
  {
    unint64_t v139 = *v49;
    uint64_t v140 = (v137 - *v49) >> 2;
    unint64_t v141 = v140 + 1;
    if ((unint64_t)(v140 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v142 = v135 - v139;
    if (v142 >> 1 > v141) {
      unint64_t v141 = v142 >> 1;
    }
    if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v143 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v143 = v141;
    }
    if (v143)
    {
      float64x2_t v144 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v143);
      unint64_t v139 = *v49;
      unsigned int v137 = v49[1];
    }
    else
    {
      float64x2_t v144 = 0;
    }
    float64x2_t v192 = &v144[4 * v140];
    int v135 = &v144[4 * v143];
    *(_DWORD *)float64x2_t v192 = 3;
    uint64_t v138 = v192 + 4;
    while (v137 != v139)
    {
      int v193 = *((_DWORD *)v137 - 1);
      v137 -= 4;
      *((_DWORD *)v192 - 1) = v193;
      v192 -= 4;
    }
    *float64x2_t v49 = v192;
    v49[1] = v138;
    _OWORD v49[2] = v135;
    if (v139)
    {
      operator delete(v139);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)unsigned int v137 = 3;
    uint64_t v138 = v137 + 4;
  }
  v49[1] = v138;
  if (v138 >= v135)
  {
    unint64_t v195 = *v49;
    uint64_t v196 = (v138 - *v49) >> 2;
    unint64_t v197 = v196 + 1;
    if ((unint64_t)(v196 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v198 = v135 - v195;
    if (v198 >> 1 > v197) {
      unint64_t v197 = v198 >> 1;
    }
    if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v199 = v197;
    }
    if (v199)
    {
      int v200 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v199);
      unint64_t v195 = *v49;
      uint64_t v138 = v49[1];
    }
    else
    {
      int v200 = 0;
    }
    float64x2_t v210 = &v200[4 * v196];
    int v135 = &v200[4 * v199];
    *(_DWORD *)float64x2_t v210 = 6;
    uint64_t v194 = v210 + 4;
    while (v138 != v195)
    {
      int v211 = *((_DWORD *)v138 - 1);
      v138 -= 4;
      *((_DWORD *)v210 - 1) = v211;
      v210 -= 4;
    }
    *float64x2_t v49 = v210;
    v49[1] = v194;
    _OWORD v49[2] = v135;
    if (v195)
    {
      operator delete(v195);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v138 = 6;
    uint64_t v194 = v138 + 4;
  }
  v49[1] = v194;
  if (v194 >= v135)
  {
    unint64_t v213 = *v49;
    uint64_t v214 = (v194 - *v49) >> 2;
    unint64_t v215 = v214 + 1;
    if ((unint64_t)(v214 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v216 = v135 - v213;
    if (v216 >> 1 > v215) {
      unint64_t v215 = v216 >> 1;
    }
    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v217 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v217 = v215;
    }
    if (v217)
    {
      int v218 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v217);
      unint64_t v213 = *v49;
      uint64_t v194 = v49[1];
    }
    else
    {
      int v218 = 0;
    }
    float64x2_t v227 = &v218[4 * v214];
    int v135 = &v218[4 * v217];
    *(_DWORD *)float64x2_t v227 = 9;
    uint64_t v212 = v227 + 4;
    while (v194 != v213)
    {
      int v228 = *((_DWORD *)v194 - 1);
      v194 -= 4;
      *((_DWORD *)v227 - 1) = v228;
      v227 -= 4;
    }
    *float64x2_t v49 = v227;
    v49[1] = v212;
    _OWORD v49[2] = v135;
    if (v213)
    {
      operator delete(v213);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v194 = 9;
    uint64_t v212 = v194 + 4;
  }
  v49[1] = v212;
  if (v212 >= v135)
  {
    unint64_t v229 = *v49;
    uint64_t v230 = (v212 - *v49) >> 2;
    unint64_t v231 = v230 + 1;
    if (!((unint64_t)(v230 + 1) >> 62))
    {
      uint64_t v232 = v135 - v229;
      if (v232 >> 1 > v231) {
        unint64_t v231 = v232 >> 1;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        int v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v233);
        unint64_t v229 = *v49;
        uint64_t v212 = v49[1];
      }
      else
      {
        int v234 = 0;
      }
      int v243 = &v234[4 * v230];
      int v244 = &v234[4 * v233];
      *(_DWORD *)int v243 = 12;
      unint64_t v237 = v243 + 4;
      while (v212 != v229)
      {
        int v245 = *((_DWORD *)v212 - 1);
        v212 -= 4;
        *((_DWORD *)v243 - 1) = v245;
        v243 -= 4;
      }
      goto LABEL_285;
    }
    goto LABEL_322;
  }
LABEL_268:
  *(_DWORD *)uint64_t v212 = 12;
  unint64_t v237 = v212 + 4;
LABEL_287:
  v49[1] = v237;
LABEL_288:
  if (v289)
  {
    float64x2_t v290 = v289;
    operator delete(v289);
  }
}

void geom_dop12_polyhedron_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t a5)
{
  float32x4_t v11 = a5;
  uint64_t v8 = geom::collection_to_vector<float>(a2);
  unint64_t v9 = (unint64_t *)geom::collection_to_vector<float>(a3);
  float32x4_t v10 = (char **)geom::collection_to_vector<float>(a4);
  geom::dop<(unsigned char)12,float>::compute_polyhedron(a1, &v11, v8, v9, v10);
}

void geom::dop<(unsigned char)12,float>::compute_polyhedron(uint64_t a1, float32x4_t *a2, uint64_t a3, unint64_t *a4, char **a5)
{
  uint64_t v6 = 0;
  void v291[7] = *MEMORY[0x263EF8340];
  *(void *)(a3 + 8) = *(void *)a3;
  a4[1] = *a4;
  a5[1] = *a5;
  float32x4_t v7 = *a2;
  do
  {
    float32x4_t v8 = vmulq_f32(geom::kdop_axes<(unsigned char)12,float>[v6], v7);
    v8.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
    unint64_t v9 = (float *)(a1 + 4 * v6);
    *((float *)&v291[4] + v6) = *v9 - v8.f32[0];
    *((float *)&v291[1] + v6++) = v9[8] - v8.f32[0];
  }
  while (v6 != 6);
  float64x2_t v289 = 0;
  float64x2_t v290 = 0;
  v291[0] = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&v289, 0xCuLL);
  uint64_t v11 = 0;
  uint64_t v12 = -1;
  uint64_t v13 = -1;
  do
  {
    float v14 = *((float *)&v291[4] + v11);
    v10.i32[0] = *((_DWORD *)&v291[1] + v11);
    if (v14 == v10.f32[0])
    {
      uint64_t v12 = v11;
    }
    else
    {
      uint64_t v15 = v12;
      float v16 = fabsf(v14);
      float v17 = fabsf(v10.f32[0]);
      BOOL v18 = v16 == INFINITY || v17 == INFINITY;
      if (v18 || (uint64_t v12 = v11, vabds_f32(v14, v10.f32[0]) >= (float)((float)((float)(v16 + v17) + 1.0) * 0.00001)))
      {
        float32x4_t v19 = geom::kdop_axes<(unsigned char)12,float>[v11];
        float32x4_t v20 = vdivq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0));
        float64x2_t v21 = v290;
        if ((unint64_t)v290 >= v291[0])
        {
          uint64_t v23 = v290 - v289;
          if ((unint64_t)(v23 + 1) >> 60) {
            goto LABEL_322;
          }
          float32x4_t v278 = geom::kdop_axes<(unsigned char)12,float>[v11];
          unint64_t v24 = (uint64_t)(v291[0] - (void)v289) >> 3;
          if (v24 <= v23 + 1) {
            unint64_t v24 = v23 + 1;
          }
          if (v291[0] - (void)v289 >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            float32x4_t v275 = v20;
            int64x2_t v26 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v291, v25);
            float32x4_t v20 = v275;
          }
          else
          {
            int64x2_t v26 = 0;
          }
          double v27 = (float32x4_t *)&v26[16 * v23];
          *double v27 = v20;
          float64x2_t v22 = v27 + 1;
          uint64_t v29 = v289;
          float64x2_t v28 = v290;
          if (v290 != v289)
          {
            do
            {
              float32x4_t v30 = v28[-1];
              --v28;
              v27[-1] = v30;
              --v27;
            }
            while (v28 != v29);
            float64x2_t v28 = v289;
          }
          float64x2_t v289 = v27;
          float64x2_t v290 = v22;
          v291[0] = &v26[16 * v25];
          if (v28) {
            operator delete(v28);
          }
          float32x4_t v19 = v278;
        }
        else
        {
          *float64x2_t v290 = v20;
          float64x2_t v22 = v21 + 1;
        }
        float64x2_t v290 = v22;
        float64x2_t v31 = (const float *)&v291[4] + v11;
        float32x4_t v32 = vld1q_dup_f32(v31);
        float32x4_t v10 = vdivq_f32(v19, v32);
        if ((unint64_t)v22 >= v291[0])
        {
          uint64_t v34 = v22 - v289;
          if ((unint64_t)(v34 + 1) >> 60) {
            goto LABEL_322;
          }
          unint64_t v35 = (uint64_t)(v291[0] - (void)v289) >> 3;
          if (v35 <= v34 + 1) {
            unint64_t v35 = v34 + 1;
          }
          if (v291[0] - (void)v289 >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36)
          {
            float32x4_t v279 = v10;
            float64x2_t v37 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v291, v36);
            float32x4_t v10 = v279;
          }
          else
          {
            float64x2_t v37 = 0;
          }
          float64x2_t v38 = (float32x4_t *)&v37[16 * v34];
          float32x4_t *v38 = v10;
          unint64_t v33 = v38 + 1;
          float32x4_t v40 = v289;
          float32x4_t v39 = v290;
          if (v290 != v289)
          {
            do
            {
              float32x4_t v41 = v39[-1];
              --v39;
              v10.i32[1] = v41.i32[1];
              v38[-1] = v41;
              --v38;
            }
            while (v39 != v40);
            float32x4_t v39 = v289;
          }
          float64x2_t v289 = v38;
          float64x2_t v290 = v33;
          v291[0] = &v37[16 * v36];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *float64x2_t v22 = v10;
          unint64_t v33 = v22 + 1;
        }
        float64x2_t v290 = v33;
        uint64_t v13 = v11;
        uint64_t v12 = v15;
      }
    }
    ++v11;
  }
  while (v11 != 6);
  float32x4_t v42 = v289;
  uint64_t v43 = v290 - v289;
  if (v43)
  {
    if (v43 != 2)
    {
      if ((unint64_t)((char *)v290 - (char *)v289) > 0xBF)
      {
        geom::half_plane_intersection_3<float>(0xCuLL, v289, (char **)a3, a4, a5);
        float32x2_t v69 = a2;
      }
      else
      {
        *(void *)std::vector<int>::value_type __x = 0;
        float64x2_t v287 = 0;
        float64x2_t v288 = 0;
        float32x4_t v53 = geom::kdop_axes<(unsigned char)12,float>[v12];
        float v54 = COERCE_FLOAT(geom::kdop_axes<(unsigned char)12,float>[v12].i64[1]);
        float v55 = fabsf(v54);
        LODWORD(v56) = HIDWORD(geom::kdop_axes<(unsigned char)12,float>[v12].i64[0]);
        float v57 = -v54;
        if (v55 <= 0.00000011921)
        {
          float32x4_t v58 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v56), (int32x4_t)v53);
        }
        else
        {
          v58.i32[0] = 0;
          v58.f32[1] = v57;
          v58.i64[1] = v53.u32[1];
        }
        int32x4_t v70 = (int32x4_t)vmulq_f32(v58, v58);
        v70.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v70, 2), vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1))).u32[0];
        float32x2_t v71 = vrsqrte_f32((float32x2_t)v70.u32[0]);
        float32x2_t v72 = vmul_f32(v71, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v71, v71)));
        LODWORD(v73) = vmul_f32(v72, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v72, v72))).u32[0];
        if (v55 <= 0.00000011921)
        {
          float32x4_t v74 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v56), (int32x4_t)v53);
        }
        else
        {
          v74.i32[0] = 0;
          v74.f32[1] = v57;
          v74.i64[1] = v53.u32[1];
        }
        int32x4_t v75 = (int32x4_t)vmulq_f32(v74, v74);
        v75.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1))).u32[0];
        float32x4_t v281 = vmulq_n_f32(v58, v73);
        float32x2_t v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
        float32x2_t v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
        float32x4_t v78 = vmulq_n_f32(v74, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
        float32x4_t v269 = vnegq_f32(v53);
        float32x4_t v270 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL);
        float32x4_t v79 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL), v269), v78, v270);
        float32x4_t v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL);
        int32x4_t v81 = (int32x4_t)vmulq_f32(v79, v79);
        v81.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v81.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v81, 2), *(float32x2_t *)v81.i8)).u32[0];
        float32x2_t v82 = vrsqrte_f32((float32x2_t)v81.u32[0]);
        float32x2_t v83 = vmul_f32(v82, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v82, v82)));
        float32x4_t v277 = vmulq_n_f32(v80, vmul_f32(v83, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v83, v83))).f32[0]);
        if (v290 == v289)
        {
          uint64_t v116 = 0;
          unint64_t v107 = 0;
        }
        else
        {
          unint64_t v84 = 0;
          float32x2_t v85 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 1);
          float32x2_t v86 = (float32x2_t)vdup_laneq_s32((int32x4_t)v53, 2);
          int32x4_t v267 = vdupq_laneq_s32((int32x4_t)v53, 2);
          int32x2_t v268 = (int32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
          float32x4_t v266 = geom::kdop_axes<(unsigned char)12,float>[v12];
          do
          {
            float32x4_t v87 = v42[v84];
            float32x4_t v88 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v87, (int32x4_t)v87), (int8x16_t)v87, 0xCuLL), v269), v87, v270);
            float32x4_t v89 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL);
            int32x4_t v90 = (int32x4_t)vmulq_f32(v88, v88);
            v90.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v90, 2), *(float32x2_t *)v90.i8)).u32[0];
            float32x2_t v91 = vrsqrte_f32((float32x2_t)v90.u32[0]);
            float32x2_t v92 = vmul_f32(v91, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v91, v91)));
            float32x4_t v93 = vmulq_n_f32(v89, vmul_f32(v92, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v92, v92))).f32[0]);
            int32x4_t v94 = vzip1q_s32((int32x4_t)v53, (int32x4_t)v87);
            float32x2_t v95 = (float32x2_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
            float32x2_t v96 = (float32x2_t)vzip1_s32(v268, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL));
            float32x4_t v272 = (float32x4_t)vzip1q_s32(vzip1q_s32(v94, v267), vdupq_laneq_s32(v94, 2));
            float32x4_t v273 = v93;
            *(float32x2_t *)v90.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v94.i8, v87.f32[0]), v95, *(float32x2_t *)v87.f32, 1), v96, v87, 2);
            v87.i32[1] = vdupq_laneq_s32(v94, 3).i32[1];
            float32x4_t v271 = v87;
            *(float32x2_t *)v87.f32 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v94.i8, v53.f32[0]), v85, v95), v86, v96);
            simd_float2x2 v97 = __invert_f2((simd_float2x2)v87);
            float32x4_t v98 = vmlaq_lane_f32(vmulq_n_f32(v272, v97.columns[1].f32[0]), v271, (float32x2_t)v97.columns[1], 1);
            int32x4_t v99 = (int32x4_t)vmulq_f32(v281, v273);
            int32x4_t v100 = (int32x4_t)vmulq_f32(v277, v273);
            *(int32x2_t *)v99.i8 = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v99, 2), vadd_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v100, 2), vadd_f32(*(float32x2_t *)v100.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v100.i8, 1))));
            float32x2_t v101 = vmul_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8);
            v101.i32[0] = vadd_f32(v101, (float32x2_t)vdup_lane_s32((int32x2_t)v101, 1)).u32[0];
            *(float32x2_t *)v100.i8 = vrsqrte_f32((float32x2_t)v101.u32[0]);
            *(float32x2_t *)v100.i8 = vmul_f32(*(float32x2_t *)v100.i8, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8)));
            int32x2_t v102 = (int32x2_t)vmul_f32(*(float32x2_t *)v100.i8, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8)));
            *(float32x2_t *)v99.i8 = vmul_n_f32(*(float32x2_t *)v99.i8, *(float *)v102.i32);
            int32x4_t v103 = (int32x4_t)vmulq_f32(v281, v98);
            *(float *)v102.i32 = -*(float *)&v99.i32[1];
            int32x4_t v104 = (int32x4_t)vmulq_f32(v277, v98);
            *(int32x2_t *)v99.i8 = vzip1_s32(v102, *(int32x2_t *)v99.i8);
            *(float32x2_t *)v104.i8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v103, 2), vadd_f32(*(float32x2_t *)v103.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v103.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v104, 2), vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)))), *(float32x2_t *)v99.i8);
            float32x2_t v105 = vdiv_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)), 0));
            uint64_t v106 = v287;
            if (v287 >= v288)
            {
              uint64_t v108 = ((uint64_t)v287 - *(void *)__x) >> 3;
              if ((unint64_t)(v108 + 1) >> 61) {
                goto LABEL_322;
              }
              unint64_t v109 = ((uint64_t)v288 - *(void *)__x) >> 2;
              if (v109 <= v108 + 1) {
                unint64_t v109 = v108 + 1;
              }
              if ((unint64_t)v288 - *(void *)__x >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v110 = v109;
              }
              if (v110) {
                int v111 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v288, v110);
              }
              else {
                int v111 = 0;
              }
              unsigned int v112 = (float32x2_t *)&v111[8 * v108];
              *unsigned int v112 = v105;
              unint64_t v107 = v112 + 1;
              uint64_t v114 = *(float32x2_t **)__x;
              float32x2_t v113 = v287;
              if (v287 != *(float32x2_t **)__x)
              {
                do
                {
                  float32x2_t v115 = v113[-1];
                  --v113;
                  v112[-1] = v115;
                  --v112;
                }
                while (v113 != v114);
                float32x2_t v113 = *(float32x2_t **)__x;
              }
              *(void *)std::vector<int>::value_type __x = v112;
              float64x2_t v287 = v107;
              float64x2_t v288 = (float32x2_t *)&v111[8 * v110];
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *float64x2_t v287 = v105;
              unint64_t v107 = v106 + 1;
            }
            float32x4_t v53 = v266;
            float64x2_t v287 = v107;
            ++v84;
            float32x4_t v42 = v289;
          }
          while (v84 < v290 - v289);
          uint64_t v116 = *(void *)__x;
        }
        std::vector<int> __p = 0;
        uint64_t v284 = 0;
        uint64_t v285 = 0;
        geom::half_plane_intersection_2<float>(((uint64_t)v107 - v116) >> 3, v116, (uint64_t)&__p);
        float64x2_t v145 = (float32x2_t *)__p;
        float64x2_t v146 = v284;
        float32x4_t v147 = *(float32x4_t **)(a3 + 8);
        if (__p != v284)
        {
          uint64_t v148 = (void *)(a3 + 16);
          do
          {
            float32x4_t v149 = vmlaq_n_f32(vmulq_lane_f32(v277, *v145, 1), v281, COERCE_FLOAT(*v145));
            if ((unint64_t)v147 >= *v148)
            {
              uint64_t v150 = ((uint64_t)v147 - *(void *)a3) >> 4;
              if ((unint64_t)(v150 + 1) >> 60) {
                goto LABEL_322;
              }
              uint64_t v151 = *v148 - *(void *)a3;
              uint64_t v152 = v151 >> 3;
              if (v151 >> 3 <= (unint64_t)(v150 + 1)) {
                uint64_t v152 = v150 + 1;
              }
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v153 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v152;
              }
              if (v153)
              {
                float32x4_t v274 = v149;
                unsigned int v154 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v153);
                float32x4_t v149 = v274;
              }
              else
              {
                unsigned int v154 = 0;
              }
              uint64_t v155 = (float32x4_t *)&v154[16 * v150];
              *uint64_t v155 = v149;
              float32x4_t v147 = v155 + 1;
              uint64_t v157 = *(char **)a3;
              float32x4_t v156 = *(char **)(a3 + 8);
              if (v156 != *(char **)a3)
              {
                do
                {
                  float32x4_t v158 = *((float32x4_t *)v156 - 1);
                  v156 -= 16;
                  v155[-1] = v158;
                  --v155;
                }
                while (v156 != v157);
                float32x4_t v156 = *(char **)a3;
              }
              *(void *)a3 = v155;
              *(void *)(a3 + 8) = v147;
              *(void *)(a3 + 16) = &v154[16 * v153];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              *v147++ = v149;
            }
            *(void *)(a3 + 8) = v147;
            ++v145;
          }
          while (v145 != v146);
        }
        std::vector<unsigned int>::resize((std::vector<int> *)a4, ((uint64_t)v147 - *(void *)a3) >> 3);
        uint64_t v159 = *(void *)(a3 + 8) - *(void *)a3;
        if (v159)
        {
          uint64_t v160 = 0;
          uint64_t v161 = (int *)*a4;
          uint64_t v162 = 4 * (v159 >> 4);
          uint64_t v163 = v162;
          do
          {
            v161[v160] = v160;
            ++v160;
            v163 -= 4;
          }
          while (v163);
          unint64_t v164 = (_DWORD *)(a4[1] - 4);
          do
          {
            int v165 = *v161++;
            *v164-- = v165;
            v162 -= 4;
          }
          while (v162);
        }
        unint64_t v166 = (unint64_t)v159 >> 4;
        float64x2_t v167 = a5[2];
        float64x2_t v168 = a5[1];
        if (v168 >= v167)
        {
          unint64_t v170 = *a5;
          uint64_t v171 = (v168 - *a5) >> 2;
          unint64_t v172 = v171 + 1;
          if ((unint64_t)(v171 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v173 = v167 - v170;
          if (v173 >> 1 > v172) {
            unint64_t v172 = v173 >> 1;
          }
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v174 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v174 = v172;
          }
          if (v174)
          {
            float64x2_t v175 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v174);
            unint64_t v170 = *a5;
            float64x2_t v168 = a5[1];
          }
          else
          {
            float64x2_t v175 = 0;
          }
          uint64_t v247 = &v175[4 * v171];
          float64x2_t v167 = &v175[4 * v174];
          *(_DWORD *)uint64_t v247 = v166;
          uint64_t v169 = v247 + 4;
          while (v168 != v170)
          {
            int v248 = *((_DWORD *)v168 - 1);
            v168 -= 4;
            *((_DWORD *)v247 - 1) = v248;
            v247 -= 4;
          }
          *a5 = v247;
          a5[1] = v169;
          a5[2] = v167;
          if (v170)
          {
            operator delete(v170);
            float64x2_t v167 = a5[2];
          }
        }
        else
        {
          *(_DWORD *)float64x2_t v168 = v166;
          uint64_t v169 = v168 + 4;
        }
        a5[1] = v169;
        uint64_t v249 = ((*(void *)(a3 + 8) - *(void *)a3) >> 3) & 0xFFFFFFFELL;
        if (v169 >= v167)
        {
          unint64_t v251 = *a5;
          uint64_t v252 = (v169 - *a5) >> 2;
          unint64_t v253 = v252 + 1;
          if ((unint64_t)(v252 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v254 = v167 - v251;
          if (v254 >> 1 > v253) {
            unint64_t v253 = v254 >> 1;
          }
          if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v255 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v255 = v253;
          }
          if (v255)
          {
            float64x2_t v256 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v255);
            unint64_t v251 = *a5;
            uint64_t v169 = a5[1];
          }
          else
          {
            float64x2_t v256 = 0;
          }
          int v257 = &v256[4 * v252];
          long long v258 = &v256[4 * v255];
          *(_DWORD *)int v257 = v249;
          uint64_t v250 = v257 + 4;
          if (v169 == v251)
          {
            float32x2_t v69 = a2;
          }
          else
          {
            float32x2_t v69 = a2;
            do
            {
              int v259 = *((_DWORD *)v169 - 1);
              v169 -= 4;
              *((_DWORD *)v257 - 1) = v259;
              v257 -= 4;
            }
            while (v169 != v251);
          }
          *a5 = v257;
          a5[1] = v250;
          a5[2] = v258;
          if (v251) {
            operator delete(v251);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v169 = v249;
          uint64_t v250 = v169 + 4;
          float32x2_t v69 = a2;
        }
        a5[1] = v250;
        if (__p)
        {
          uint64_t v284 = (float32x2_t *)__p;
          operator delete(__p);
        }
        if (*(void *)__x)
        {
          float64x2_t v287 = *(float32x2_t **)__x;
          operator delete(*(void **)__x);
        }
      }
      float64x2_t v260 = *(float32x4_t **)a3;
      float64x2_t v261 = *(float32x4_t **)(a3 + 8);
      while (v260 != v261)
      {
        float32x4_t *v260 = vaddq_f32(*v69, *v260);
        ++v260;
      }
      goto LABEL_288;
    }
    float32x4_t v44 = geom::kdop_axes<(unsigned char)12,float>[v13];
    float32x4_t v45 = vmulq_n_f32(v44, *(float *)(a1 + 4 * v13));
    unint64_t v46 = *(void *)(a3 + 16);
    float64x2_t v47 = *(float32x4_t **)(a3 + 8);
    if ((unint64_t)v47 >= v46)
    {
      uint64_t v59 = ((uint64_t)v47 - *(void *)a3) >> 4;
      float64x2_t v49 = a5;
      if ((unint64_t)(v59 + 1) >> 60) {
        goto LABEL_322;
      }
      float32x4_t v280 = geom::kdop_axes<(unsigned char)12,float>[v13];
      uint64_t v60 = v46 - *(void *)a3;
      uint64_t v61 = v60 >> 3;
      if (v60 >> 3 <= (unint64_t)(v59 + 1)) {
        uint64_t v61 = v59 + 1;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v62 = v61;
      }
      if (v62)
      {
        float32x4_t v276 = v45;
        uint64_t v63 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v62);
        float32x4_t v45 = v276;
      }
      else
      {
        uint64_t v63 = 0;
      }
      std::vector<int> v117 = (float32x4_t *)&v63[16 * v59];
      std::vector<int> v118 = &v63[16 * v62];
      *std::vector<int> v117 = v45;
      unint64_t v48 = v117 + 1;
      float32x4_t v120 = *(char **)a3;
      float32x4_t v119 = *(char **)(a3 + 8);
      if (v119 != *(char **)a3)
      {
        do
        {
          float32x4_t v121 = *((float32x4_t *)v119 - 1);
          v119 -= 16;
          v117[-1] = v121;
          --v117;
        }
        while (v119 != v120);
        float32x4_t v119 = *(char **)a3;
      }
      *(void *)a3 = v117;
      *(void *)(a3 + 8) = v48;
      *(void *)(a3 + 16) = v118;
      if (v119) {
        operator delete(v119);
      }
      float32x4_t v44 = v280;
    }
    else
    {
      *float64x2_t v47 = v45;
      unint64_t v48 = v47 + 1;
      float64x2_t v49 = a5;
    }
    *(void *)(a3 + 8) = v48;
    float32x4_t v122 = vmulq_n_f32(v44, *(float *)(a1 + 4 * v13 + 32));
    unint64_t v123 = *(void *)(a3 + 16);
    if ((unint64_t)v48 >= v123)
    {
      uint64_t v125 = ((uint64_t)v48 - *(void *)a3) >> 4;
      if ((unint64_t)(v125 + 1) >> 60) {
        goto LABEL_322;
      }
      uint64_t v126 = v123 - *(void *)a3;
      uint64_t v127 = v126 >> 3;
      if (v126 >> 3 <= (unint64_t)(v125 + 1)) {
        uint64_t v127 = v125 + 1;
      }
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v128 = v127;
      }
      if (v128)
      {
        float32x4_t v282 = v122;
        float64x2_t v129 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v128);
        float32x4_t v122 = v282;
      }
      else
      {
        float64x2_t v129 = 0;
      }
      float64x2_t v176 = (float32x4_t *)&v129[16 * v125];
      float64x2_t v177 = &v129[16 * v128];
      *float64x2_t v176 = v122;
      f32 = (_OWORD *)v176[1].f32;
      float64x2_t v179 = *(char **)a3;
      float32x4_t v178 = *(char **)(a3 + 8);
      if (v178 != *(char **)a3)
      {
        do
        {
          float32x4_t v180 = *((float32x4_t *)v178 - 1);
          v178 -= 16;
          v176[-1] = v180;
          --v176;
        }
        while (v178 != v179);
        float32x4_t v178 = *(char **)a3;
      }
      *(void *)a3 = v176;
      *(void *)(a3 + 8) = f32;
      *(void *)(a3 + 16) = v177;
      if (v178) {
        operator delete(v178);
      }
    }
    else
    {
      *unint64_t v48 = v122;
      f32 = (_OWORD *)v48[1].f32;
    }
    *(void *)(a3 + 8) = f32;
    __x[0] = 0;
    std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
    float64x2_t v181 = (_DWORD *)*a4;
    v181[10] = 1;
    v181[7] = 1;
    v181[4] = 1;
    float64x2_t v183 = v49 + 2;
    float64x2_t v182 = v49[2];
    float64x2_t v184 = v49[1];
    if (v184 >= v182)
    {
      unint64_t v186 = *v49;
      uint64_t v187 = (v184 - *v49) >> 2;
      unint64_t v188 = v187 + 1;
      if ((unint64_t)(v187 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v189 = v182 - v186;
      if (v189 >> 1 > v188) {
        unint64_t v188 = v189 >> 1;
      }
      if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v190 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v190 = v188;
      }
      if (v190)
      {
        int v191 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v190);
        unint64_t v186 = *v49;
        float64x2_t v184 = v49[1];
      }
      else
      {
        int v191 = 0;
      }
      float64x2_t v201 = &v191[4 * v187];
      float64x2_t v182 = &v191[4 * v190];
      *(_DWORD *)float64x2_t v201 = 3;
      uint64_t v185 = v201 + 4;
      while (v184 != v186)
      {
        int v202 = *((_DWORD *)v184 - 1);
        v184 -= 4;
        *((_DWORD *)v201 - 1) = v202;
        v201 -= 4;
      }
      *float64x2_t v49 = v201;
      v49[1] = v185;
      _OWORD v49[2] = v182;
      if (v186)
      {
        operator delete(v186);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v184 = 3;
      uint64_t v185 = v184 + 4;
    }
    v49[1] = v185;
    if (v185 >= v182)
    {
      unint64_t v204 = *v49;
      uint64_t v205 = (v185 - *v49) >> 2;
      unint64_t v206 = v205 + 1;
      if ((unint64_t)(v205 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v207 = v182 - v204;
      if (v207 >> 1 > v206) {
        unint64_t v206 = v207 >> 1;
      }
      if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v208 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v208 = v206;
      }
      if (v208)
      {
        int v209 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v208);
        unint64_t v204 = *v49;
        uint64_t v185 = v49[1];
      }
      else
      {
        int v209 = 0;
      }
      uint64_t v219 = &v209[4 * v205];
      float64x2_t v182 = &v209[4 * v208];
      *(_DWORD *)uint64_t v219 = 6;
      uint64_t v203 = v219 + 4;
      while (v185 != v204)
      {
        int v220 = *((_DWORD *)v185 - 1);
        v185 -= 4;
        *((_DWORD *)v219 - 1) = v220;
        v219 -= 4;
      }
      *float64x2_t v49 = v219;
      v49[1] = v203;
      _OWORD v49[2] = v182;
      if (v204)
      {
        operator delete(v204);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v185 = 6;
      uint64_t v203 = v185 + 4;
    }
    v49[1] = v203;
    if (v203 >= v182)
    {
      unint64_t v221 = *v49;
      uint64_t v222 = (v203 - *v49) >> 2;
      unint64_t v223 = v222 + 1;
      if ((unint64_t)(v222 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v224 = v182 - v221;
      if (v224 >> 1 > v223) {
        unint64_t v223 = v224 >> 1;
      }
      if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v225 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v225 = v223;
      }
      if (v225)
      {
        int v226 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v225);
        unint64_t v221 = *v49;
        uint64_t v203 = v49[1];
      }
      else
      {
        int v226 = 0;
      }
      float64x2_t v235 = &v226[4 * v222];
      float64x2_t v182 = &v226[4 * v225];
      *(_DWORD *)float64x2_t v235 = 9;
      uint64_t v212 = v235 + 4;
      while (v203 != v221)
      {
        int v236 = *((_DWORD *)v203 - 1);
        v203 -= 4;
        *((_DWORD *)v235 - 1) = v236;
        v235 -= 4;
      }
      *float64x2_t v49 = v235;
      v49[1] = v212;
      _OWORD v49[2] = v182;
      if (v221)
      {
        operator delete(v221);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v203 = 9;
      uint64_t v212 = v203 + 4;
    }
    v49[1] = v212;
    if (v212 < v182) {
      goto LABEL_268;
    }
    unint64_t v229 = *v49;
    uint64_t v238 = (v212 - *v49) >> 2;
    unint64_t v239 = v238 + 1;
    if (!((unint64_t)(v238 + 1) >> 62))
    {
      uint64_t v240 = v182 - v229;
      if (v240 >> 1 > v239) {
        unint64_t v239 = v240 >> 1;
      }
      if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v241 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v241 = v239;
      }
      if (v241)
      {
        float64x2_t v242 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v241);
        unint64_t v229 = *v49;
        uint64_t v212 = v49[1];
      }
      else
      {
        float64x2_t v242 = 0;
      }
      int v243 = &v242[4 * v238];
      int v244 = &v242[4 * v241];
      *(_DWORD *)int v243 = 12;
      unint64_t v237 = v243 + 4;
      while (v212 != v229)
      {
        int v246 = *((_DWORD *)v212 - 1);
        v212 -= 4;
        *((_DWORD *)v243 - 1) = v246;
        v243 -= 4;
      }
LABEL_285:
      *float64x2_t v49 = v243;
      v49[1] = v237;
      _OWORD v49[2] = v244;
      if (v229) {
        operator delete(v229);
      }
      goto LABEL_287;
    }
LABEL_322:
    abort();
  }
  unint64_t v50 = *(void *)(a3 + 16);
  float32x4_t v51 = *(float32x4_t **)(a3 + 8);
  if ((unint64_t)v51 >= v50)
  {
    uint64_t v64 = ((uint64_t)v51 - *(void *)a3) >> 4;
    float64x2_t v49 = a5;
    if ((unint64_t)(v64 + 1) >> 60) {
      goto LABEL_322;
    }
    uint64_t v65 = v50 - *(void *)a3;
    uint64_t v66 = v65 >> 3;
    if (v65 >> 3 <= (unint64_t)(v64 + 1)) {
      uint64_t v66 = v64 + 1;
    }
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v66;
    }
    if (v67) {
      int32x4_t v68 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v67);
    }
    else {
      int32x4_t v68 = 0;
    }
    float64x2_t v130 = (float32x4_t *)&v68[16 * v64];
    float64x2_t v131 = &v68[16 * v67];
    *float64x2_t v130 = *a2;
    float v52 = (_OWORD *)v130[1].f32;
    float64x2_t v133 = *(char **)a3;
    float32x4_t v132 = *(char **)(a3 + 8);
    if (v132 != *(char **)a3)
    {
      do
      {
        float32x4_t v134 = *((float32x4_t *)v132 - 1);
        v132 -= 16;
        v130[-1] = v134;
        --v130;
      }
      while (v132 != v133);
      float32x4_t v132 = *(char **)a3;
    }
    *(void *)a3 = v130;
    *(void *)(a3 + 8) = v52;
    *(void *)(a3 + 16) = v131;
    if (v132) {
      operator delete(v132);
    }
  }
  else
  {
    float64x2_t v49 = a5;
    *float32x4_t v51 = *a2;
    float v52 = (_OWORD *)v51[1].f32;
  }
  *(void *)(a3 + 8) = v52;
  __x[0] = 0;
  std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
  int v136 = v49 + 2;
  int v135 = v49[2];
  unsigned int v137 = v49[1];
  if (v137 >= v135)
  {
    unint64_t v139 = *v49;
    uint64_t v140 = (v137 - *v49) >> 2;
    unint64_t v141 = v140 + 1;
    if ((unint64_t)(v140 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v142 = v135 - v139;
    if (v142 >> 1 > v141) {
      unint64_t v141 = v142 >> 1;
    }
    if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v143 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v143 = v141;
    }
    if (v143)
    {
      float64x2_t v144 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v143);
      unint64_t v139 = *v49;
      unsigned int v137 = v49[1];
    }
    else
    {
      float64x2_t v144 = 0;
    }
    float64x2_t v192 = &v144[4 * v140];
    int v135 = &v144[4 * v143];
    *(_DWORD *)float64x2_t v192 = 3;
    uint64_t v138 = v192 + 4;
    while (v137 != v139)
    {
      int v193 = *((_DWORD *)v137 - 1);
      v137 -= 4;
      *((_DWORD *)v192 - 1) = v193;
      v192 -= 4;
    }
    *float64x2_t v49 = v192;
    v49[1] = v138;
    _OWORD v49[2] = v135;
    if (v139)
    {
      operator delete(v139);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)unsigned int v137 = 3;
    uint64_t v138 = v137 + 4;
  }
  v49[1] = v138;
  if (v138 >= v135)
  {
    unint64_t v195 = *v49;
    uint64_t v196 = (v138 - *v49) >> 2;
    unint64_t v197 = v196 + 1;
    if ((unint64_t)(v196 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v198 = v135 - v195;
    if (v198 >> 1 > v197) {
      unint64_t v197 = v198 >> 1;
    }
    if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v199 = v197;
    }
    if (v199)
    {
      int v200 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v199);
      unint64_t v195 = *v49;
      uint64_t v138 = v49[1];
    }
    else
    {
      int v200 = 0;
    }
    float64x2_t v210 = &v200[4 * v196];
    int v135 = &v200[4 * v199];
    *(_DWORD *)float64x2_t v210 = 6;
    uint64_t v194 = v210 + 4;
    while (v138 != v195)
    {
      int v211 = *((_DWORD *)v138 - 1);
      v138 -= 4;
      *((_DWORD *)v210 - 1) = v211;
      v210 -= 4;
    }
    *float64x2_t v49 = v210;
    v49[1] = v194;
    _OWORD v49[2] = v135;
    if (v195)
    {
      operator delete(v195);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v138 = 6;
    uint64_t v194 = v138 + 4;
  }
  v49[1] = v194;
  if (v194 >= v135)
  {
    unint64_t v213 = *v49;
    uint64_t v214 = (v194 - *v49) >> 2;
    unint64_t v215 = v214 + 1;
    if ((unint64_t)(v214 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v216 = v135 - v213;
    if (v216 >> 1 > v215) {
      unint64_t v215 = v216 >> 1;
    }
    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v217 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v217 = v215;
    }
    if (v217)
    {
      int v218 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v217);
      unint64_t v213 = *v49;
      uint64_t v194 = v49[1];
    }
    else
    {
      int v218 = 0;
    }
    float64x2_t v227 = &v218[4 * v214];
    int v135 = &v218[4 * v217];
    *(_DWORD *)float64x2_t v227 = 9;
    uint64_t v212 = v227 + 4;
    while (v194 != v213)
    {
      int v228 = *((_DWORD *)v194 - 1);
      v194 -= 4;
      *((_DWORD *)v227 - 1) = v228;
      v227 -= 4;
    }
    *float64x2_t v49 = v227;
    v49[1] = v212;
    _OWORD v49[2] = v135;
    if (v213)
    {
      operator delete(v213);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v194 = 9;
    uint64_t v212 = v194 + 4;
  }
  v49[1] = v212;
  if (v212 >= v135)
  {
    unint64_t v229 = *v49;
    uint64_t v230 = (v212 - *v49) >> 2;
    unint64_t v231 = v230 + 1;
    if (!((unint64_t)(v230 + 1) >> 62))
    {
      uint64_t v232 = v135 - v229;
      if (v232 >> 1 > v231) {
        unint64_t v231 = v232 >> 1;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        int v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v233);
        unint64_t v229 = *v49;
        uint64_t v212 = v49[1];
      }
      else
      {
        int v234 = 0;
      }
      int v243 = &v234[4 * v230];
      int v244 = &v234[4 * v233];
      *(_DWORD *)int v243 = 12;
      unint64_t v237 = v243 + 4;
      while (v212 != v229)
      {
        int v245 = *((_DWORD *)v212 - 1);
        v212 -= 4;
        *((_DWORD *)v243 - 1) = v245;
        v243 -= 4;
      }
      goto LABEL_285;
    }
    goto LABEL_322;
  }
LABEL_268:
  *(_DWORD *)uint64_t v212 = 12;
  unint64_t v237 = v212 + 4;
LABEL_287:
  v49[1] = v237;
LABEL_288:
  if (v289)
  {
    float64x2_t v290 = v289;
    operator delete(v289);
  }
}

void geom_dop14_polyhedron_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t a5)
{
  float32x4_t v11 = a5;
  uint64_t v8 = geom::collection_to_vector<float>(a2);
  unint64_t v9 = (unint64_t *)geom::collection_to_vector<float>(a3);
  float32x4_t v10 = (char **)geom::collection_to_vector<float>(a4);
  geom::dop<(unsigned char)14,float>::compute_polyhedron(a1, &v11, v8, v9, v10);
}

void geom::dop<(unsigned char)14,float>::compute_polyhedron(uint64_t a1, float32x4_t *a2, uint64_t a3, unint64_t *a4, char **a5)
{
  uint64_t v6 = 0;
  v291[8] = *MEMORY[0x263EF8340];
  *(void *)(a3 + 8) = *(void *)a3;
  a4[1] = *a4;
  a5[1] = *a5;
  float32x4_t v7 = *a2;
  do
  {
    float32x4_t v8 = vmulq_f32(geom::kdop_axes<(unsigned char)14,float>[v6], v7);
    v8.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
    unint64_t v9 = (float *)(a1 + 4 * v6);
    *((float *)&v291[4] + v6 + 1) = *v9 - v8.f32[0];
    *((float *)&v291[1] + v6++) = v9[8] - v8.f32[0];
  }
  while (v6 != 7);
  float64x2_t v289 = 0;
  float64x2_t v290 = 0;
  v291[0] = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&v289, 0xEuLL);
  uint64_t v11 = 0;
  uint64_t v12 = -1;
  uint64_t v13 = -1;
  do
  {
    float v14 = *((float *)&v291[4] + v11 + 1);
    v10.i32[0] = *((_DWORD *)&v291[1] + v11);
    if (v14 == v10.f32[0])
    {
      uint64_t v12 = v11;
    }
    else
    {
      uint64_t v15 = v12;
      float v16 = fabsf(v14);
      float v17 = fabsf(v10.f32[0]);
      BOOL v18 = v16 == INFINITY || v17 == INFINITY;
      if (v18 || (uint64_t v12 = v11, vabds_f32(v14, v10.f32[0]) >= (float)((float)((float)(v16 + v17) + 1.0) * 0.00001)))
      {
        float32x4_t v19 = geom::kdop_axes<(unsigned char)14,float>[v11];
        float32x4_t v20 = vdivq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0));
        float64x2_t v21 = v290;
        if ((unint64_t)v290 >= v291[0])
        {
          uint64_t v23 = v290 - v289;
          if ((unint64_t)(v23 + 1) >> 60) {
            goto LABEL_322;
          }
          float32x4_t v278 = geom::kdop_axes<(unsigned char)14,float>[v11];
          unint64_t v24 = (uint64_t)(v291[0] - (void)v289) >> 3;
          if (v24 <= v23 + 1) {
            unint64_t v24 = v23 + 1;
          }
          if (v291[0] - (void)v289 >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            float32x4_t v275 = v20;
            int64x2_t v26 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v291, v25);
            float32x4_t v20 = v275;
          }
          else
          {
            int64x2_t v26 = 0;
          }
          double v27 = (float32x4_t *)&v26[16 * v23];
          *double v27 = v20;
          float64x2_t v22 = v27 + 1;
          uint64_t v29 = v289;
          float64x2_t v28 = v290;
          if (v290 != v289)
          {
            do
            {
              float32x4_t v30 = v28[-1];
              --v28;
              v27[-1] = v30;
              --v27;
            }
            while (v28 != v29);
            float64x2_t v28 = v289;
          }
          float64x2_t v289 = v27;
          float64x2_t v290 = v22;
          v291[0] = &v26[16 * v25];
          if (v28) {
            operator delete(v28);
          }
          float32x4_t v19 = v278;
        }
        else
        {
          *float64x2_t v290 = v20;
          float64x2_t v22 = v21 + 1;
        }
        float64x2_t v290 = v22;
        float64x2_t v31 = (const float *)&v291[4] + v11 + 1;
        float32x4_t v32 = vld1q_dup_f32(v31);
        float32x4_t v10 = vdivq_f32(v19, v32);
        if ((unint64_t)v22 >= v291[0])
        {
          uint64_t v34 = v22 - v289;
          if ((unint64_t)(v34 + 1) >> 60) {
            goto LABEL_322;
          }
          unint64_t v35 = (uint64_t)(v291[0] - (void)v289) >> 3;
          if (v35 <= v34 + 1) {
            unint64_t v35 = v34 + 1;
          }
          if (v291[0] - (void)v289 >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36)
          {
            float32x4_t v279 = v10;
            float64x2_t v37 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v291, v36);
            float32x4_t v10 = v279;
          }
          else
          {
            float64x2_t v37 = 0;
          }
          float64x2_t v38 = (float32x4_t *)&v37[16 * v34];
          float32x4_t *v38 = v10;
          unint64_t v33 = v38 + 1;
          float32x4_t v40 = v289;
          float32x4_t v39 = v290;
          if (v290 != v289)
          {
            do
            {
              float32x4_t v41 = v39[-1];
              --v39;
              v10.i32[1] = v41.i32[1];
              v38[-1] = v41;
              --v38;
            }
            while (v39 != v40);
            float32x4_t v39 = v289;
          }
          float64x2_t v289 = v38;
          float64x2_t v290 = v33;
          v291[0] = &v37[16 * v36];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *float64x2_t v22 = v10;
          unint64_t v33 = v22 + 1;
        }
        float64x2_t v290 = v33;
        uint64_t v13 = v11;
        uint64_t v12 = v15;
      }
    }
    ++v11;
  }
  while (v11 != 7);
  float32x4_t v42 = v289;
  uint64_t v43 = v290 - v289;
  if (v43)
  {
    if (v43 != 2)
    {
      if ((unint64_t)((char *)v290 - (char *)v289) > 0xDF)
      {
        geom::half_plane_intersection_3<float>(0xEuLL, v289, (char **)a3, a4, a5);
        float32x2_t v69 = a2;
      }
      else
      {
        *(void *)std::vector<int>::value_type __x = 0;
        float64x2_t v287 = 0;
        float64x2_t v288 = 0;
        float32x4_t v53 = geom::kdop_axes<(unsigned char)14,float>[v12];
        float v54 = COERCE_FLOAT(geom::kdop_axes<(unsigned char)14,float>[v12].i64[1]);
        float v55 = fabsf(v54);
        LODWORD(v56) = HIDWORD(geom::kdop_axes<(unsigned char)14,float>[v12].i64[0]);
        float v57 = -v54;
        if (v55 <= 0.00000011921)
        {
          float32x4_t v58 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v56), (int32x4_t)v53);
        }
        else
        {
          v58.i32[0] = 0;
          v58.f32[1] = v57;
          v58.i64[1] = v53.u32[1];
        }
        int32x4_t v70 = (int32x4_t)vmulq_f32(v58, v58);
        v70.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v70, 2), vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1))).u32[0];
        float32x2_t v71 = vrsqrte_f32((float32x2_t)v70.u32[0]);
        float32x2_t v72 = vmul_f32(v71, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v71, v71)));
        LODWORD(v73) = vmul_f32(v72, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v72, v72))).u32[0];
        if (v55 <= 0.00000011921)
        {
          float32x4_t v74 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v56), (int32x4_t)v53);
        }
        else
        {
          v74.i32[0] = 0;
          v74.f32[1] = v57;
          v74.i64[1] = v53.u32[1];
        }
        int32x4_t v75 = (int32x4_t)vmulq_f32(v74, v74);
        v75.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1))).u32[0];
        float32x4_t v281 = vmulq_n_f32(v58, v73);
        float32x2_t v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
        float32x2_t v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
        float32x4_t v78 = vmulq_n_f32(v74, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
        float32x4_t v269 = vnegq_f32(v53);
        float32x4_t v270 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL);
        float32x4_t v79 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL), v269), v78, v270);
        float32x4_t v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL);
        int32x4_t v81 = (int32x4_t)vmulq_f32(v79, v79);
        v81.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v81.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v81, 2), *(float32x2_t *)v81.i8)).u32[0];
        float32x2_t v82 = vrsqrte_f32((float32x2_t)v81.u32[0]);
        float32x2_t v83 = vmul_f32(v82, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v82, v82)));
        float32x4_t v277 = vmulq_n_f32(v80, vmul_f32(v83, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v83, v83))).f32[0]);
        if (v290 == v289)
        {
          uint64_t v116 = 0;
          unint64_t v107 = 0;
        }
        else
        {
          unint64_t v84 = 0;
          float32x2_t v85 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 1);
          float32x2_t v86 = (float32x2_t)vdup_laneq_s32((int32x4_t)v53, 2);
          int32x4_t v267 = vdupq_laneq_s32((int32x4_t)v53, 2);
          int32x2_t v268 = (int32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
          float32x4_t v266 = geom::kdop_axes<(unsigned char)14,float>[v12];
          do
          {
            float32x4_t v87 = v42[v84];
            float32x4_t v88 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v87, (int32x4_t)v87), (int8x16_t)v87, 0xCuLL), v269), v87, v270);
            float32x4_t v89 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL);
            int32x4_t v90 = (int32x4_t)vmulq_f32(v88, v88);
            v90.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v90, 2), *(float32x2_t *)v90.i8)).u32[0];
            float32x2_t v91 = vrsqrte_f32((float32x2_t)v90.u32[0]);
            float32x2_t v92 = vmul_f32(v91, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v91, v91)));
            float32x4_t v93 = vmulq_n_f32(v89, vmul_f32(v92, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v92, v92))).f32[0]);
            int32x4_t v94 = vzip1q_s32((int32x4_t)v53, (int32x4_t)v87);
            float32x2_t v95 = (float32x2_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
            float32x2_t v96 = (float32x2_t)vzip1_s32(v268, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL));
            float32x4_t v272 = (float32x4_t)vzip1q_s32(vzip1q_s32(v94, v267), vdupq_laneq_s32(v94, 2));
            float32x4_t v273 = v93;
            *(float32x2_t *)v90.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v94.i8, v87.f32[0]), v95, *(float32x2_t *)v87.f32, 1), v96, v87, 2);
            v87.i32[1] = vdupq_laneq_s32(v94, 3).i32[1];
            float32x4_t v271 = v87;
            *(float32x2_t *)v87.f32 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v94.i8, v53.f32[0]), v85, v95), v86, v96);
            simd_float2x2 v97 = __invert_f2((simd_float2x2)v87);
            float32x4_t v98 = vmlaq_lane_f32(vmulq_n_f32(v272, v97.columns[1].f32[0]), v271, (float32x2_t)v97.columns[1], 1);
            int32x4_t v99 = (int32x4_t)vmulq_f32(v281, v273);
            int32x4_t v100 = (int32x4_t)vmulq_f32(v277, v273);
            *(int32x2_t *)v99.i8 = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v99, 2), vadd_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v100, 2), vadd_f32(*(float32x2_t *)v100.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v100.i8, 1))));
            float32x2_t v101 = vmul_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8);
            v101.i32[0] = vadd_f32(v101, (float32x2_t)vdup_lane_s32((int32x2_t)v101, 1)).u32[0];
            *(float32x2_t *)v100.i8 = vrsqrte_f32((float32x2_t)v101.u32[0]);
            *(float32x2_t *)v100.i8 = vmul_f32(*(float32x2_t *)v100.i8, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8)));
            int32x2_t v102 = (int32x2_t)vmul_f32(*(float32x2_t *)v100.i8, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8)));
            *(float32x2_t *)v99.i8 = vmul_n_f32(*(float32x2_t *)v99.i8, *(float *)v102.i32);
            int32x4_t v103 = (int32x4_t)vmulq_f32(v281, v98);
            *(float *)v102.i32 = -*(float *)&v99.i32[1];
            int32x4_t v104 = (int32x4_t)vmulq_f32(v277, v98);
            *(int32x2_t *)v99.i8 = vzip1_s32(v102, *(int32x2_t *)v99.i8);
            *(float32x2_t *)v104.i8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v103, 2), vadd_f32(*(float32x2_t *)v103.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v103.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v104, 2), vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)))), *(float32x2_t *)v99.i8);
            float32x2_t v105 = vdiv_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)), 0));
            uint64_t v106 = v287;
            if (v287 >= v288)
            {
              uint64_t v108 = ((uint64_t)v287 - *(void *)__x) >> 3;
              if ((unint64_t)(v108 + 1) >> 61) {
                goto LABEL_322;
              }
              unint64_t v109 = ((uint64_t)v288 - *(void *)__x) >> 2;
              if (v109 <= v108 + 1) {
                unint64_t v109 = v108 + 1;
              }
              if ((unint64_t)v288 - *(void *)__x >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v110 = v109;
              }
              if (v110) {
                int v111 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v288, v110);
              }
              else {
                int v111 = 0;
              }
              unsigned int v112 = (float32x2_t *)&v111[8 * v108];
              *unsigned int v112 = v105;
              unint64_t v107 = v112 + 1;
              uint64_t v114 = *(float32x2_t **)__x;
              float32x2_t v113 = v287;
              if (v287 != *(float32x2_t **)__x)
              {
                do
                {
                  float32x2_t v115 = v113[-1];
                  --v113;
                  v112[-1] = v115;
                  --v112;
                }
                while (v113 != v114);
                float32x2_t v113 = *(float32x2_t **)__x;
              }
              *(void *)std::vector<int>::value_type __x = v112;
              float64x2_t v287 = v107;
              float64x2_t v288 = (float32x2_t *)&v111[8 * v110];
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *float64x2_t v287 = v105;
              unint64_t v107 = v106 + 1;
            }
            float32x4_t v53 = v266;
            float64x2_t v287 = v107;
            ++v84;
            float32x4_t v42 = v289;
          }
          while (v84 < v290 - v289);
          uint64_t v116 = *(void *)__x;
        }
        std::vector<int> __p = 0;
        uint64_t v284 = 0;
        uint64_t v285 = 0;
        geom::half_plane_intersection_2<float>(((uint64_t)v107 - v116) >> 3, v116, (uint64_t)&__p);
        float64x2_t v145 = (float32x2_t *)__p;
        float64x2_t v146 = v284;
        float32x4_t v147 = *(float32x4_t **)(a3 + 8);
        if (__p != v284)
        {
          uint64_t v148 = (void *)(a3 + 16);
          do
          {
            float32x4_t v149 = vmlaq_n_f32(vmulq_lane_f32(v277, *v145, 1), v281, COERCE_FLOAT(*v145));
            if ((unint64_t)v147 >= *v148)
            {
              uint64_t v150 = ((uint64_t)v147 - *(void *)a3) >> 4;
              if ((unint64_t)(v150 + 1) >> 60) {
                goto LABEL_322;
              }
              uint64_t v151 = *v148 - *(void *)a3;
              uint64_t v152 = v151 >> 3;
              if (v151 >> 3 <= (unint64_t)(v150 + 1)) {
                uint64_t v152 = v150 + 1;
              }
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v153 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v152;
              }
              if (v153)
              {
                float32x4_t v274 = v149;
                unsigned int v154 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v153);
                float32x4_t v149 = v274;
              }
              else
              {
                unsigned int v154 = 0;
              }
              uint64_t v155 = (float32x4_t *)&v154[16 * v150];
              *uint64_t v155 = v149;
              float32x4_t v147 = v155 + 1;
              uint64_t v157 = *(char **)a3;
              float32x4_t v156 = *(char **)(a3 + 8);
              if (v156 != *(char **)a3)
              {
                do
                {
                  float32x4_t v158 = *((float32x4_t *)v156 - 1);
                  v156 -= 16;
                  v155[-1] = v158;
                  --v155;
                }
                while (v156 != v157);
                float32x4_t v156 = *(char **)a3;
              }
              *(void *)a3 = v155;
              *(void *)(a3 + 8) = v147;
              *(void *)(a3 + 16) = &v154[16 * v153];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              *v147++ = v149;
            }
            *(void *)(a3 + 8) = v147;
            ++v145;
          }
          while (v145 != v146);
        }
        std::vector<unsigned int>::resize((std::vector<int> *)a4, ((uint64_t)v147 - *(void *)a3) >> 3);
        uint64_t v159 = *(void *)(a3 + 8) - *(void *)a3;
        if (v159)
        {
          uint64_t v160 = 0;
          uint64_t v161 = (int *)*a4;
          uint64_t v162 = 4 * (v159 >> 4);
          uint64_t v163 = v162;
          do
          {
            v161[v160] = v160;
            ++v160;
            v163 -= 4;
          }
          while (v163);
          unint64_t v164 = (_DWORD *)(a4[1] - 4);
          do
          {
            int v165 = *v161++;
            *v164-- = v165;
            v162 -= 4;
          }
          while (v162);
        }
        unint64_t v166 = (unint64_t)v159 >> 4;
        float64x2_t v167 = a5[2];
        float64x2_t v168 = a5[1];
        if (v168 >= v167)
        {
          unint64_t v170 = *a5;
          uint64_t v171 = (v168 - *a5) >> 2;
          unint64_t v172 = v171 + 1;
          if ((unint64_t)(v171 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v173 = v167 - v170;
          if (v173 >> 1 > v172) {
            unint64_t v172 = v173 >> 1;
          }
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v174 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v174 = v172;
          }
          if (v174)
          {
            float64x2_t v175 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v174);
            unint64_t v170 = *a5;
            float64x2_t v168 = a5[1];
          }
          else
          {
            float64x2_t v175 = 0;
          }
          uint64_t v247 = &v175[4 * v171];
          float64x2_t v167 = &v175[4 * v174];
          *(_DWORD *)uint64_t v247 = v166;
          uint64_t v169 = v247 + 4;
          while (v168 != v170)
          {
            int v248 = *((_DWORD *)v168 - 1);
            v168 -= 4;
            *((_DWORD *)v247 - 1) = v248;
            v247 -= 4;
          }
          *a5 = v247;
          a5[1] = v169;
          a5[2] = v167;
          if (v170)
          {
            operator delete(v170);
            float64x2_t v167 = a5[2];
          }
        }
        else
        {
          *(_DWORD *)float64x2_t v168 = v166;
          uint64_t v169 = v168 + 4;
        }
        a5[1] = v169;
        uint64_t v249 = ((*(void *)(a3 + 8) - *(void *)a3) >> 3) & 0xFFFFFFFELL;
        if (v169 >= v167)
        {
          unint64_t v251 = *a5;
          uint64_t v252 = (v169 - *a5) >> 2;
          unint64_t v253 = v252 + 1;
          if ((unint64_t)(v252 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v254 = v167 - v251;
          if (v254 >> 1 > v253) {
            unint64_t v253 = v254 >> 1;
          }
          if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v255 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v255 = v253;
          }
          if (v255)
          {
            float64x2_t v256 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v255);
            unint64_t v251 = *a5;
            uint64_t v169 = a5[1];
          }
          else
          {
            float64x2_t v256 = 0;
          }
          int v257 = &v256[4 * v252];
          long long v258 = &v256[4 * v255];
          *(_DWORD *)int v257 = v249;
          uint64_t v250 = v257 + 4;
          if (v169 == v251)
          {
            float32x2_t v69 = a2;
          }
          else
          {
            float32x2_t v69 = a2;
            do
            {
              int v259 = *((_DWORD *)v169 - 1);
              v169 -= 4;
              *((_DWORD *)v257 - 1) = v259;
              v257 -= 4;
            }
            while (v169 != v251);
          }
          *a5 = v257;
          a5[1] = v250;
          a5[2] = v258;
          if (v251) {
            operator delete(v251);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v169 = v249;
          uint64_t v250 = v169 + 4;
          float32x2_t v69 = a2;
        }
        a5[1] = v250;
        if (__p)
        {
          uint64_t v284 = (float32x2_t *)__p;
          operator delete(__p);
        }
        if (*(void *)__x)
        {
          float64x2_t v287 = *(float32x2_t **)__x;
          operator delete(*(void **)__x);
        }
      }
      float64x2_t v260 = *(float32x4_t **)a3;
      float64x2_t v261 = *(float32x4_t **)(a3 + 8);
      while (v260 != v261)
      {
        float32x4_t *v260 = vaddq_f32(*v69, *v260);
        ++v260;
      }
      goto LABEL_288;
    }
    float32x4_t v44 = geom::kdop_axes<(unsigned char)14,float>[v13];
    float32x4_t v45 = vmulq_n_f32(v44, *(float *)(a1 + 4 * v13));
    unint64_t v46 = *(void *)(a3 + 16);
    float64x2_t v47 = *(float32x4_t **)(a3 + 8);
    if ((unint64_t)v47 >= v46)
    {
      uint64_t v59 = ((uint64_t)v47 - *(void *)a3) >> 4;
      float64x2_t v49 = a5;
      if ((unint64_t)(v59 + 1) >> 60) {
        goto LABEL_322;
      }
      float32x4_t v280 = geom::kdop_axes<(unsigned char)14,float>[v13];
      uint64_t v60 = v46 - *(void *)a3;
      uint64_t v61 = v60 >> 3;
      if (v60 >> 3 <= (unint64_t)(v59 + 1)) {
        uint64_t v61 = v59 + 1;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v62 = v61;
      }
      if (v62)
      {
        float32x4_t v276 = v45;
        uint64_t v63 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v62);
        float32x4_t v45 = v276;
      }
      else
      {
        uint64_t v63 = 0;
      }
      std::vector<int> v117 = (float32x4_t *)&v63[16 * v59];
      std::vector<int> v118 = &v63[16 * v62];
      *std::vector<int> v117 = v45;
      unint64_t v48 = v117 + 1;
      float32x4_t v120 = *(char **)a3;
      float32x4_t v119 = *(char **)(a3 + 8);
      if (v119 != *(char **)a3)
      {
        do
        {
          float32x4_t v121 = *((float32x4_t *)v119 - 1);
          v119 -= 16;
          v117[-1] = v121;
          --v117;
        }
        while (v119 != v120);
        float32x4_t v119 = *(char **)a3;
      }
      *(void *)a3 = v117;
      *(void *)(a3 + 8) = v48;
      *(void *)(a3 + 16) = v118;
      if (v119) {
        operator delete(v119);
      }
      float32x4_t v44 = v280;
    }
    else
    {
      *float64x2_t v47 = v45;
      unint64_t v48 = v47 + 1;
      float64x2_t v49 = a5;
    }
    *(void *)(a3 + 8) = v48;
    float32x4_t v122 = vmulq_n_f32(v44, *(float *)(a1 + 4 * v13 + 32));
    unint64_t v123 = *(void *)(a3 + 16);
    if ((unint64_t)v48 >= v123)
    {
      uint64_t v125 = ((uint64_t)v48 - *(void *)a3) >> 4;
      if ((unint64_t)(v125 + 1) >> 60) {
        goto LABEL_322;
      }
      uint64_t v126 = v123 - *(void *)a3;
      uint64_t v127 = v126 >> 3;
      if (v126 >> 3 <= (unint64_t)(v125 + 1)) {
        uint64_t v127 = v125 + 1;
      }
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v128 = v127;
      }
      if (v128)
      {
        float32x4_t v282 = v122;
        float64x2_t v129 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v128);
        float32x4_t v122 = v282;
      }
      else
      {
        float64x2_t v129 = 0;
      }
      float64x2_t v176 = (float32x4_t *)&v129[16 * v125];
      float64x2_t v177 = &v129[16 * v128];
      *float64x2_t v176 = v122;
      f32 = (_OWORD *)v176[1].f32;
      float64x2_t v179 = *(char **)a3;
      float32x4_t v178 = *(char **)(a3 + 8);
      if (v178 != *(char **)a3)
      {
        do
        {
          float32x4_t v180 = *((float32x4_t *)v178 - 1);
          v178 -= 16;
          v176[-1] = v180;
          --v176;
        }
        while (v178 != v179);
        float32x4_t v178 = *(char **)a3;
      }
      *(void *)a3 = v176;
      *(void *)(a3 + 8) = f32;
      *(void *)(a3 + 16) = v177;
      if (v178) {
        operator delete(v178);
      }
    }
    else
    {
      *unint64_t v48 = v122;
      f32 = (_OWORD *)v48[1].f32;
    }
    *(void *)(a3 + 8) = f32;
    __x[0] = 0;
    std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
    float64x2_t v181 = (_DWORD *)*a4;
    v181[10] = 1;
    v181[7] = 1;
    v181[4] = 1;
    float64x2_t v183 = v49 + 2;
    float64x2_t v182 = v49[2];
    float64x2_t v184 = v49[1];
    if (v184 >= v182)
    {
      unint64_t v186 = *v49;
      uint64_t v187 = (v184 - *v49) >> 2;
      unint64_t v188 = v187 + 1;
      if ((unint64_t)(v187 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v189 = v182 - v186;
      if (v189 >> 1 > v188) {
        unint64_t v188 = v189 >> 1;
      }
      if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v190 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v190 = v188;
      }
      if (v190)
      {
        int v191 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v190);
        unint64_t v186 = *v49;
        float64x2_t v184 = v49[1];
      }
      else
      {
        int v191 = 0;
      }
      float64x2_t v201 = &v191[4 * v187];
      float64x2_t v182 = &v191[4 * v190];
      *(_DWORD *)float64x2_t v201 = 3;
      uint64_t v185 = v201 + 4;
      while (v184 != v186)
      {
        int v202 = *((_DWORD *)v184 - 1);
        v184 -= 4;
        *((_DWORD *)v201 - 1) = v202;
        v201 -= 4;
      }
      *float64x2_t v49 = v201;
      v49[1] = v185;
      _OWORD v49[2] = v182;
      if (v186)
      {
        operator delete(v186);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v184 = 3;
      uint64_t v185 = v184 + 4;
    }
    v49[1] = v185;
    if (v185 >= v182)
    {
      unint64_t v204 = *v49;
      uint64_t v205 = (v185 - *v49) >> 2;
      unint64_t v206 = v205 + 1;
      if ((unint64_t)(v205 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v207 = v182 - v204;
      if (v207 >> 1 > v206) {
        unint64_t v206 = v207 >> 1;
      }
      if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v208 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v208 = v206;
      }
      if (v208)
      {
        int v209 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v208);
        unint64_t v204 = *v49;
        uint64_t v185 = v49[1];
      }
      else
      {
        int v209 = 0;
      }
      uint64_t v219 = &v209[4 * v205];
      float64x2_t v182 = &v209[4 * v208];
      *(_DWORD *)uint64_t v219 = 6;
      uint64_t v203 = v219 + 4;
      while (v185 != v204)
      {
        int v220 = *((_DWORD *)v185 - 1);
        v185 -= 4;
        *((_DWORD *)v219 - 1) = v220;
        v219 -= 4;
      }
      *float64x2_t v49 = v219;
      v49[1] = v203;
      _OWORD v49[2] = v182;
      if (v204)
      {
        operator delete(v204);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v185 = 6;
      uint64_t v203 = v185 + 4;
    }
    v49[1] = v203;
    if (v203 >= v182)
    {
      unint64_t v221 = *v49;
      uint64_t v222 = (v203 - *v49) >> 2;
      unint64_t v223 = v222 + 1;
      if ((unint64_t)(v222 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v224 = v182 - v221;
      if (v224 >> 1 > v223) {
        unint64_t v223 = v224 >> 1;
      }
      if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v225 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v225 = v223;
      }
      if (v225)
      {
        int v226 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v225);
        unint64_t v221 = *v49;
        uint64_t v203 = v49[1];
      }
      else
      {
        int v226 = 0;
      }
      float64x2_t v235 = &v226[4 * v222];
      float64x2_t v182 = &v226[4 * v225];
      *(_DWORD *)float64x2_t v235 = 9;
      uint64_t v212 = v235 + 4;
      while (v203 != v221)
      {
        int v236 = *((_DWORD *)v203 - 1);
        v203 -= 4;
        *((_DWORD *)v235 - 1) = v236;
        v235 -= 4;
      }
      *float64x2_t v49 = v235;
      v49[1] = v212;
      _OWORD v49[2] = v182;
      if (v221)
      {
        operator delete(v221);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v203 = 9;
      uint64_t v212 = v203 + 4;
    }
    v49[1] = v212;
    if (v212 < v182) {
      goto LABEL_268;
    }
    unint64_t v229 = *v49;
    uint64_t v238 = (v212 - *v49) >> 2;
    unint64_t v239 = v238 + 1;
    if (!((unint64_t)(v238 + 1) >> 62))
    {
      uint64_t v240 = v182 - v229;
      if (v240 >> 1 > v239) {
        unint64_t v239 = v240 >> 1;
      }
      if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v241 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v241 = v239;
      }
      if (v241)
      {
        float64x2_t v242 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v241);
        unint64_t v229 = *v49;
        uint64_t v212 = v49[1];
      }
      else
      {
        float64x2_t v242 = 0;
      }
      int v243 = &v242[4 * v238];
      int v244 = &v242[4 * v241];
      *(_DWORD *)int v243 = 12;
      unint64_t v237 = v243 + 4;
      while (v212 != v229)
      {
        int v246 = *((_DWORD *)v212 - 1);
        v212 -= 4;
        *((_DWORD *)v243 - 1) = v246;
        v243 -= 4;
      }
LABEL_285:
      *float64x2_t v49 = v243;
      v49[1] = v237;
      _OWORD v49[2] = v244;
      if (v229) {
        operator delete(v229);
      }
      goto LABEL_287;
    }
LABEL_322:
    abort();
  }
  unint64_t v50 = *(void *)(a3 + 16);
  float32x4_t v51 = *(float32x4_t **)(a3 + 8);
  if ((unint64_t)v51 >= v50)
  {
    uint64_t v64 = ((uint64_t)v51 - *(void *)a3) >> 4;
    float64x2_t v49 = a5;
    if ((unint64_t)(v64 + 1) >> 60) {
      goto LABEL_322;
    }
    uint64_t v65 = v50 - *(void *)a3;
    uint64_t v66 = v65 >> 3;
    if (v65 >> 3 <= (unint64_t)(v64 + 1)) {
      uint64_t v66 = v64 + 1;
    }
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v66;
    }
    if (v67) {
      int32x4_t v68 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v67);
    }
    else {
      int32x4_t v68 = 0;
    }
    float64x2_t v130 = (float32x4_t *)&v68[16 * v64];
    float64x2_t v131 = &v68[16 * v67];
    *float64x2_t v130 = *a2;
    float v52 = (_OWORD *)v130[1].f32;
    float64x2_t v133 = *(char **)a3;
    float32x4_t v132 = *(char **)(a3 + 8);
    if (v132 != *(char **)a3)
    {
      do
      {
        float32x4_t v134 = *((float32x4_t *)v132 - 1);
        v132 -= 16;
        v130[-1] = v134;
        --v130;
      }
      while (v132 != v133);
      float32x4_t v132 = *(char **)a3;
    }
    *(void *)a3 = v130;
    *(void *)(a3 + 8) = v52;
    *(void *)(a3 + 16) = v131;
    if (v132) {
      operator delete(v132);
    }
  }
  else
  {
    float64x2_t v49 = a5;
    *float32x4_t v51 = *a2;
    float v52 = (_OWORD *)v51[1].f32;
  }
  *(void *)(a3 + 8) = v52;
  __x[0] = 0;
  std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
  int v136 = v49 + 2;
  int v135 = v49[2];
  unsigned int v137 = v49[1];
  if (v137 >= v135)
  {
    unint64_t v139 = *v49;
    uint64_t v140 = (v137 - *v49) >> 2;
    unint64_t v141 = v140 + 1;
    if ((unint64_t)(v140 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v142 = v135 - v139;
    if (v142 >> 1 > v141) {
      unint64_t v141 = v142 >> 1;
    }
    if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v143 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v143 = v141;
    }
    if (v143)
    {
      float64x2_t v144 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v143);
      unint64_t v139 = *v49;
      unsigned int v137 = v49[1];
    }
    else
    {
      float64x2_t v144 = 0;
    }
    float64x2_t v192 = &v144[4 * v140];
    int v135 = &v144[4 * v143];
    *(_DWORD *)float64x2_t v192 = 3;
    uint64_t v138 = v192 + 4;
    while (v137 != v139)
    {
      int v193 = *((_DWORD *)v137 - 1);
      v137 -= 4;
      *((_DWORD *)v192 - 1) = v193;
      v192 -= 4;
    }
    *float64x2_t v49 = v192;
    v49[1] = v138;
    _OWORD v49[2] = v135;
    if (v139)
    {
      operator delete(v139);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)unsigned int v137 = 3;
    uint64_t v138 = v137 + 4;
  }
  v49[1] = v138;
  if (v138 >= v135)
  {
    unint64_t v195 = *v49;
    uint64_t v196 = (v138 - *v49) >> 2;
    unint64_t v197 = v196 + 1;
    if ((unint64_t)(v196 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v198 = v135 - v195;
    if (v198 >> 1 > v197) {
      unint64_t v197 = v198 >> 1;
    }
    if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v199 = v197;
    }
    if (v199)
    {
      int v200 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v199);
      unint64_t v195 = *v49;
      uint64_t v138 = v49[1];
    }
    else
    {
      int v200 = 0;
    }
    float64x2_t v210 = &v200[4 * v196];
    int v135 = &v200[4 * v199];
    *(_DWORD *)float64x2_t v210 = 6;
    uint64_t v194 = v210 + 4;
    while (v138 != v195)
    {
      int v211 = *((_DWORD *)v138 - 1);
      v138 -= 4;
      *((_DWORD *)v210 - 1) = v211;
      v210 -= 4;
    }
    *float64x2_t v49 = v210;
    v49[1] = v194;
    _OWORD v49[2] = v135;
    if (v195)
    {
      operator delete(v195);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v138 = 6;
    uint64_t v194 = v138 + 4;
  }
  v49[1] = v194;
  if (v194 >= v135)
  {
    unint64_t v213 = *v49;
    uint64_t v214 = (v194 - *v49) >> 2;
    unint64_t v215 = v214 + 1;
    if ((unint64_t)(v214 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v216 = v135 - v213;
    if (v216 >> 1 > v215) {
      unint64_t v215 = v216 >> 1;
    }
    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v217 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v217 = v215;
    }
    if (v217)
    {
      int v218 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v217);
      unint64_t v213 = *v49;
      uint64_t v194 = v49[1];
    }
    else
    {
      int v218 = 0;
    }
    float64x2_t v227 = &v218[4 * v214];
    int v135 = &v218[4 * v217];
    *(_DWORD *)float64x2_t v227 = 9;
    uint64_t v212 = v227 + 4;
    while (v194 != v213)
    {
      int v228 = *((_DWORD *)v194 - 1);
      v194 -= 4;
      *((_DWORD *)v227 - 1) = v228;
      v227 -= 4;
    }
    *float64x2_t v49 = v227;
    v49[1] = v212;
    _OWORD v49[2] = v135;
    if (v213)
    {
      operator delete(v213);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v194 = 9;
    uint64_t v212 = v194 + 4;
  }
  v49[1] = v212;
  if (v212 >= v135)
  {
    unint64_t v229 = *v49;
    uint64_t v230 = (v212 - *v49) >> 2;
    unint64_t v231 = v230 + 1;
    if (!((unint64_t)(v230 + 1) >> 62))
    {
      uint64_t v232 = v135 - v229;
      if (v232 >> 1 > v231) {
        unint64_t v231 = v232 >> 1;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        int v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v233);
        unint64_t v229 = *v49;
        uint64_t v212 = v49[1];
      }
      else
      {
        int v234 = 0;
      }
      int v243 = &v234[4 * v230];
      int v244 = &v234[4 * v233];
      *(_DWORD *)int v243 = 12;
      unint64_t v237 = v243 + 4;
      while (v212 != v229)
      {
        int v245 = *((_DWORD *)v212 - 1);
        v212 -= 4;
        *((_DWORD *)v243 - 1) = v245;
        v243 -= 4;
      }
      goto LABEL_285;
    }
    goto LABEL_322;
  }
LABEL_268:
  *(_DWORD *)uint64_t v212 = 12;
  unint64_t v237 = v212 + 4;
LABEL_287:
  v49[1] = v237;
LABEL_288:
  if (v289)
  {
    float64x2_t v290 = v289;
    operator delete(v289);
  }
}

void geom_dop18_polyhedron_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t a5)
{
  float32x4_t v11 = a5;
  uint64_t v8 = geom::collection_to_vector<float>(a2);
  unint64_t v9 = (unint64_t *)geom::collection_to_vector<float>(a3);
  float32x4_t v10 = (char **)geom::collection_to_vector<float>(a4);
  geom::dop<(unsigned char)18,float>::compute_polyhedron(a1, &v11, v8, v9, v10);
}

void geom::dop<(unsigned char)18,float>::compute_polyhedron(uint64_t a1, float32x4_t *a2, uint64_t a3, unint64_t *a4, char **a5)
{
  uint64_t v6 = 0;
  void v291[10] = *MEMORY[0x263EF8340];
  *(void *)(a3 + 8) = *(void *)a3;
  a4[1] = *a4;
  a5[1] = *a5;
  float32x4_t v7 = *a2;
  do
  {
    float32x4_t v8 = vmulq_f32(geom::kdop_axes<(unsigned char)18,float>[v6], v7);
    v8.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
    unint64_t v9 = (float *)(a1 + 4 * v6);
    *((float *)&v291[5] + v6 + 1) = *v9 - v8.f32[0];
    *((float *)&v291[1] + v6++) = v9[12] - v8.f32[0];
  }
  while (v6 != 9);
  float64x2_t v289 = 0;
  float64x2_t v290 = 0;
  v291[0] = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&v289, 0x12uLL);
  uint64_t v11 = 0;
  uint64_t v12 = -1;
  uint64_t v13 = -1;
  do
  {
    float v14 = *((float *)&v291[5] + v11 + 1);
    v10.i32[0] = *((_DWORD *)&v291[1] + v11);
    if (v14 == v10.f32[0])
    {
      uint64_t v12 = v11;
    }
    else
    {
      uint64_t v15 = v12;
      float v16 = fabsf(v14);
      float v17 = fabsf(v10.f32[0]);
      BOOL v18 = v16 == INFINITY || v17 == INFINITY;
      if (v18 || (uint64_t v12 = v11, vabds_f32(v14, v10.f32[0]) >= (float)((float)((float)(v16 + v17) + 1.0) * 0.00001)))
      {
        float32x4_t v19 = geom::kdop_axes<(unsigned char)18,float>[v11];
        float32x4_t v20 = vdivq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0));
        float64x2_t v21 = v290;
        if ((unint64_t)v290 >= v291[0])
        {
          uint64_t v23 = v290 - v289;
          if ((unint64_t)(v23 + 1) >> 60) {
            goto LABEL_322;
          }
          float32x4_t v278 = geom::kdop_axes<(unsigned char)18,float>[v11];
          unint64_t v24 = (uint64_t)(v291[0] - (void)v289) >> 3;
          if (v24 <= v23 + 1) {
            unint64_t v24 = v23 + 1;
          }
          if (v291[0] - (void)v289 >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            float32x4_t v275 = v20;
            int64x2_t v26 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v291, v25);
            float32x4_t v20 = v275;
          }
          else
          {
            int64x2_t v26 = 0;
          }
          double v27 = (float32x4_t *)&v26[16 * v23];
          *double v27 = v20;
          float64x2_t v22 = v27 + 1;
          uint64_t v29 = v289;
          float64x2_t v28 = v290;
          if (v290 != v289)
          {
            do
            {
              float32x4_t v30 = v28[-1];
              --v28;
              v27[-1] = v30;
              --v27;
            }
            while (v28 != v29);
            float64x2_t v28 = v289;
          }
          float64x2_t v289 = v27;
          float64x2_t v290 = v22;
          v291[0] = &v26[16 * v25];
          if (v28) {
            operator delete(v28);
          }
          float32x4_t v19 = v278;
        }
        else
        {
          *float64x2_t v290 = v20;
          float64x2_t v22 = v21 + 1;
        }
        float64x2_t v290 = v22;
        float64x2_t v31 = (const float *)&v291[5] + v11 + 1;
        float32x4_t v32 = vld1q_dup_f32(v31);
        float32x4_t v10 = vdivq_f32(v19, v32);
        if ((unint64_t)v22 >= v291[0])
        {
          uint64_t v34 = v22 - v289;
          if ((unint64_t)(v34 + 1) >> 60) {
            goto LABEL_322;
          }
          unint64_t v35 = (uint64_t)(v291[0] - (void)v289) >> 3;
          if (v35 <= v34 + 1) {
            unint64_t v35 = v34 + 1;
          }
          if (v291[0] - (void)v289 >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36)
          {
            float32x4_t v279 = v10;
            float64x2_t v37 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v291, v36);
            float32x4_t v10 = v279;
          }
          else
          {
            float64x2_t v37 = 0;
          }
          float64x2_t v38 = (float32x4_t *)&v37[16 * v34];
          float32x4_t *v38 = v10;
          unint64_t v33 = v38 + 1;
          float32x4_t v40 = v289;
          float32x4_t v39 = v290;
          if (v290 != v289)
          {
            do
            {
              float32x4_t v41 = v39[-1];
              --v39;
              v10.i32[1] = v41.i32[1];
              v38[-1] = v41;
              --v38;
            }
            while (v39 != v40);
            float32x4_t v39 = v289;
          }
          float64x2_t v289 = v38;
          float64x2_t v290 = v33;
          v291[0] = &v37[16 * v36];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *float64x2_t v22 = v10;
          unint64_t v33 = v22 + 1;
        }
        float64x2_t v290 = v33;
        uint64_t v13 = v11;
        uint64_t v12 = v15;
      }
    }
    ++v11;
  }
  while (v11 != 9);
  float32x4_t v42 = v289;
  uint64_t v43 = v290 - v289;
  if (v43)
  {
    if (v43 != 2)
    {
      if ((unint64_t)((char *)v290 - (char *)v289) > 0x11F)
      {
        geom::half_plane_intersection_3<float>(0x12uLL, v289, (char **)a3, a4, a5);
        float32x2_t v69 = a2;
      }
      else
      {
        *(void *)std::vector<int>::value_type __x = 0;
        float64x2_t v287 = 0;
        float64x2_t v288 = 0;
        float32x4_t v53 = geom::kdop_axes<(unsigned char)18,float>[v12];
        float v54 = COERCE_FLOAT(geom::kdop_axes<(unsigned char)18,float>[v12].i64[1]);
        float v55 = fabsf(v54);
        LODWORD(v56) = HIDWORD(geom::kdop_axes<(unsigned char)18,float>[v12].i64[0]);
        float v57 = -v54;
        if (v55 <= 0.00000011921)
        {
          float32x4_t v58 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v56), (int32x4_t)v53);
        }
        else
        {
          v58.i32[0] = 0;
          v58.f32[1] = v57;
          v58.i64[1] = v53.u32[1];
        }
        int32x4_t v70 = (int32x4_t)vmulq_f32(v58, v58);
        v70.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v70, 2), vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1))).u32[0];
        float32x2_t v71 = vrsqrte_f32((float32x2_t)v70.u32[0]);
        float32x2_t v72 = vmul_f32(v71, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v71, v71)));
        LODWORD(v73) = vmul_f32(v72, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v72, v72))).u32[0];
        if (v55 <= 0.00000011921)
        {
          float32x4_t v74 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v56), (int32x4_t)v53);
        }
        else
        {
          v74.i32[0] = 0;
          v74.f32[1] = v57;
          v74.i64[1] = v53.u32[1];
        }
        int32x4_t v75 = (int32x4_t)vmulq_f32(v74, v74);
        v75.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1))).u32[0];
        float32x4_t v281 = vmulq_n_f32(v58, v73);
        float32x2_t v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
        float32x2_t v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
        float32x4_t v78 = vmulq_n_f32(v74, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
        float32x4_t v269 = vnegq_f32(v53);
        float32x4_t v270 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL);
        float32x4_t v79 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL), v269), v78, v270);
        float32x4_t v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL);
        int32x4_t v81 = (int32x4_t)vmulq_f32(v79, v79);
        v81.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v81.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v81, 2), *(float32x2_t *)v81.i8)).u32[0];
        float32x2_t v82 = vrsqrte_f32((float32x2_t)v81.u32[0]);
        float32x2_t v83 = vmul_f32(v82, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v82, v82)));
        float32x4_t v277 = vmulq_n_f32(v80, vmul_f32(v83, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v83, v83))).f32[0]);
        if (v290 == v289)
        {
          uint64_t v116 = 0;
          unint64_t v107 = 0;
        }
        else
        {
          unint64_t v84 = 0;
          float32x2_t v85 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 1);
          float32x2_t v86 = (float32x2_t)vdup_laneq_s32((int32x4_t)v53, 2);
          int32x4_t v267 = vdupq_laneq_s32((int32x4_t)v53, 2);
          int32x2_t v268 = (int32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
          float32x4_t v266 = geom::kdop_axes<(unsigned char)18,float>[v12];
          do
          {
            float32x4_t v87 = v42[v84];
            float32x4_t v88 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v87, (int32x4_t)v87), (int8x16_t)v87, 0xCuLL), v269), v87, v270);
            float32x4_t v89 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL);
            int32x4_t v90 = (int32x4_t)vmulq_f32(v88, v88);
            v90.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v90, 2), *(float32x2_t *)v90.i8)).u32[0];
            float32x2_t v91 = vrsqrte_f32((float32x2_t)v90.u32[0]);
            float32x2_t v92 = vmul_f32(v91, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v91, v91)));
            float32x4_t v93 = vmulq_n_f32(v89, vmul_f32(v92, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v92, v92))).f32[0]);
            int32x4_t v94 = vzip1q_s32((int32x4_t)v53, (int32x4_t)v87);
            float32x2_t v95 = (float32x2_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
            float32x2_t v96 = (float32x2_t)vzip1_s32(v268, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL));
            float32x4_t v272 = (float32x4_t)vzip1q_s32(vzip1q_s32(v94, v267), vdupq_laneq_s32(v94, 2));
            float32x4_t v273 = v93;
            *(float32x2_t *)v90.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v94.i8, v87.f32[0]), v95, *(float32x2_t *)v87.f32, 1), v96, v87, 2);
            v87.i32[1] = vdupq_laneq_s32(v94, 3).i32[1];
            float32x4_t v271 = v87;
            *(float32x2_t *)v87.f32 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v94.i8, v53.f32[0]), v85, v95), v86, v96);
            simd_float2x2 v97 = __invert_f2((simd_float2x2)v87);
            float32x4_t v98 = vmlaq_lane_f32(vmulq_n_f32(v272, v97.columns[1].f32[0]), v271, (float32x2_t)v97.columns[1], 1);
            int32x4_t v99 = (int32x4_t)vmulq_f32(v281, v273);
            int32x4_t v100 = (int32x4_t)vmulq_f32(v277, v273);
            *(int32x2_t *)v99.i8 = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v99, 2), vadd_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v100, 2), vadd_f32(*(float32x2_t *)v100.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v100.i8, 1))));
            float32x2_t v101 = vmul_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8);
            v101.i32[0] = vadd_f32(v101, (float32x2_t)vdup_lane_s32((int32x2_t)v101, 1)).u32[0];
            *(float32x2_t *)v100.i8 = vrsqrte_f32((float32x2_t)v101.u32[0]);
            *(float32x2_t *)v100.i8 = vmul_f32(*(float32x2_t *)v100.i8, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8)));
            int32x2_t v102 = (int32x2_t)vmul_f32(*(float32x2_t *)v100.i8, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8)));
            *(float32x2_t *)v99.i8 = vmul_n_f32(*(float32x2_t *)v99.i8, *(float *)v102.i32);
            int32x4_t v103 = (int32x4_t)vmulq_f32(v281, v98);
            *(float *)v102.i32 = -*(float *)&v99.i32[1];
            int32x4_t v104 = (int32x4_t)vmulq_f32(v277, v98);
            *(int32x2_t *)v99.i8 = vzip1_s32(v102, *(int32x2_t *)v99.i8);
            *(float32x2_t *)v104.i8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v103, 2), vadd_f32(*(float32x2_t *)v103.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v103.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v104, 2), vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)))), *(float32x2_t *)v99.i8);
            float32x2_t v105 = vdiv_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)), 0));
            uint64_t v106 = v287;
            if (v287 >= v288)
            {
              uint64_t v108 = ((uint64_t)v287 - *(void *)__x) >> 3;
              if ((unint64_t)(v108 + 1) >> 61) {
                goto LABEL_322;
              }
              unint64_t v109 = ((uint64_t)v288 - *(void *)__x) >> 2;
              if (v109 <= v108 + 1) {
                unint64_t v109 = v108 + 1;
              }
              if ((unint64_t)v288 - *(void *)__x >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v110 = v109;
              }
              if (v110) {
                int v111 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v288, v110);
              }
              else {
                int v111 = 0;
              }
              unsigned int v112 = (float32x2_t *)&v111[8 * v108];
              *unsigned int v112 = v105;
              unint64_t v107 = v112 + 1;
              uint64_t v114 = *(float32x2_t **)__x;
              float32x2_t v113 = v287;
              if (v287 != *(float32x2_t **)__x)
              {
                do
                {
                  float32x2_t v115 = v113[-1];
                  --v113;
                  v112[-1] = v115;
                  --v112;
                }
                while (v113 != v114);
                float32x2_t v113 = *(float32x2_t **)__x;
              }
              *(void *)std::vector<int>::value_type __x = v112;
              float64x2_t v287 = v107;
              float64x2_t v288 = (float32x2_t *)&v111[8 * v110];
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *float64x2_t v287 = v105;
              unint64_t v107 = v106 + 1;
            }
            float32x4_t v53 = v266;
            float64x2_t v287 = v107;
            ++v84;
            float32x4_t v42 = v289;
          }
          while (v84 < v290 - v289);
          uint64_t v116 = *(void *)__x;
        }
        std::vector<int> __p = 0;
        uint64_t v284 = 0;
        uint64_t v285 = 0;
        geom::half_plane_intersection_2<float>(((uint64_t)v107 - v116) >> 3, v116, (uint64_t)&__p);
        float64x2_t v145 = (float32x2_t *)__p;
        float64x2_t v146 = v284;
        float32x4_t v147 = *(float32x4_t **)(a3 + 8);
        if (__p != v284)
        {
          uint64_t v148 = (void *)(a3 + 16);
          do
          {
            float32x4_t v149 = vmlaq_n_f32(vmulq_lane_f32(v277, *v145, 1), v281, COERCE_FLOAT(*v145));
            if ((unint64_t)v147 >= *v148)
            {
              uint64_t v150 = ((uint64_t)v147 - *(void *)a3) >> 4;
              if ((unint64_t)(v150 + 1) >> 60) {
                goto LABEL_322;
              }
              uint64_t v151 = *v148 - *(void *)a3;
              uint64_t v152 = v151 >> 3;
              if (v151 >> 3 <= (unint64_t)(v150 + 1)) {
                uint64_t v152 = v150 + 1;
              }
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v153 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v152;
              }
              if (v153)
              {
                float32x4_t v274 = v149;
                unsigned int v154 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v153);
                float32x4_t v149 = v274;
              }
              else
              {
                unsigned int v154 = 0;
              }
              uint64_t v155 = (float32x4_t *)&v154[16 * v150];
              *uint64_t v155 = v149;
              float32x4_t v147 = v155 + 1;
              uint64_t v157 = *(char **)a3;
              float32x4_t v156 = *(char **)(a3 + 8);
              if (v156 != *(char **)a3)
              {
                do
                {
                  float32x4_t v158 = *((float32x4_t *)v156 - 1);
                  v156 -= 16;
                  v155[-1] = v158;
                  --v155;
                }
                while (v156 != v157);
                float32x4_t v156 = *(char **)a3;
              }
              *(void *)a3 = v155;
              *(void *)(a3 + 8) = v147;
              *(void *)(a3 + 16) = &v154[16 * v153];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              *v147++ = v149;
            }
            *(void *)(a3 + 8) = v147;
            ++v145;
          }
          while (v145 != v146);
        }
        std::vector<unsigned int>::resize((std::vector<int> *)a4, ((uint64_t)v147 - *(void *)a3) >> 3);
        uint64_t v159 = *(void *)(a3 + 8) - *(void *)a3;
        if (v159)
        {
          uint64_t v160 = 0;
          uint64_t v161 = (int *)*a4;
          uint64_t v162 = 4 * (v159 >> 4);
          uint64_t v163 = v162;
          do
          {
            v161[v160] = v160;
            ++v160;
            v163 -= 4;
          }
          while (v163);
          unint64_t v164 = (_DWORD *)(a4[1] - 4);
          do
          {
            int v165 = *v161++;
            *v164-- = v165;
            v162 -= 4;
          }
          while (v162);
        }
        unint64_t v166 = (unint64_t)v159 >> 4;
        float64x2_t v167 = a5[2];
        float64x2_t v168 = a5[1];
        if (v168 >= v167)
        {
          unint64_t v170 = *a5;
          uint64_t v171 = (v168 - *a5) >> 2;
          unint64_t v172 = v171 + 1;
          if ((unint64_t)(v171 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v173 = v167 - v170;
          if (v173 >> 1 > v172) {
            unint64_t v172 = v173 >> 1;
          }
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v174 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v174 = v172;
          }
          if (v174)
          {
            float64x2_t v175 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v174);
            unint64_t v170 = *a5;
            float64x2_t v168 = a5[1];
          }
          else
          {
            float64x2_t v175 = 0;
          }
          uint64_t v247 = &v175[4 * v171];
          float64x2_t v167 = &v175[4 * v174];
          *(_DWORD *)uint64_t v247 = v166;
          uint64_t v169 = v247 + 4;
          while (v168 != v170)
          {
            int v248 = *((_DWORD *)v168 - 1);
            v168 -= 4;
            *((_DWORD *)v247 - 1) = v248;
            v247 -= 4;
          }
          *a5 = v247;
          a5[1] = v169;
          a5[2] = v167;
          if (v170)
          {
            operator delete(v170);
            float64x2_t v167 = a5[2];
          }
        }
        else
        {
          *(_DWORD *)float64x2_t v168 = v166;
          uint64_t v169 = v168 + 4;
        }
        a5[1] = v169;
        uint64_t v249 = ((*(void *)(a3 + 8) - *(void *)a3) >> 3) & 0xFFFFFFFELL;
        if (v169 >= v167)
        {
          unint64_t v251 = *a5;
          uint64_t v252 = (v169 - *a5) >> 2;
          unint64_t v253 = v252 + 1;
          if ((unint64_t)(v252 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v254 = v167 - v251;
          if (v254 >> 1 > v253) {
            unint64_t v253 = v254 >> 1;
          }
          if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v255 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v255 = v253;
          }
          if (v255)
          {
            float64x2_t v256 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v255);
            unint64_t v251 = *a5;
            uint64_t v169 = a5[1];
          }
          else
          {
            float64x2_t v256 = 0;
          }
          int v257 = &v256[4 * v252];
          long long v258 = &v256[4 * v255];
          *(_DWORD *)int v257 = v249;
          uint64_t v250 = v257 + 4;
          if (v169 == v251)
          {
            float32x2_t v69 = a2;
          }
          else
          {
            float32x2_t v69 = a2;
            do
            {
              int v259 = *((_DWORD *)v169 - 1);
              v169 -= 4;
              *((_DWORD *)v257 - 1) = v259;
              v257 -= 4;
            }
            while (v169 != v251);
          }
          *a5 = v257;
          a5[1] = v250;
          a5[2] = v258;
          if (v251) {
            operator delete(v251);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v169 = v249;
          uint64_t v250 = v169 + 4;
          float32x2_t v69 = a2;
        }
        a5[1] = v250;
        if (__p)
        {
          uint64_t v284 = (float32x2_t *)__p;
          operator delete(__p);
        }
        if (*(void *)__x)
        {
          float64x2_t v287 = *(float32x2_t **)__x;
          operator delete(*(void **)__x);
        }
      }
      float64x2_t v260 = *(float32x4_t **)a3;
      float64x2_t v261 = *(float32x4_t **)(a3 + 8);
      while (v260 != v261)
      {
        float32x4_t *v260 = vaddq_f32(*v69, *v260);
        ++v260;
      }
      goto LABEL_288;
    }
    float32x4_t v44 = geom::kdop_axes<(unsigned char)18,float>[v13];
    float32x4_t v45 = vmulq_n_f32(v44, *(float *)(a1 + 4 * v13));
    unint64_t v46 = *(void *)(a3 + 16);
    float64x2_t v47 = *(float32x4_t **)(a3 + 8);
    if ((unint64_t)v47 >= v46)
    {
      uint64_t v59 = ((uint64_t)v47 - *(void *)a3) >> 4;
      float64x2_t v49 = a5;
      if ((unint64_t)(v59 + 1) >> 60) {
        goto LABEL_322;
      }
      float32x4_t v280 = geom::kdop_axes<(unsigned char)18,float>[v13];
      uint64_t v60 = v46 - *(void *)a3;
      uint64_t v61 = v60 >> 3;
      if (v60 >> 3 <= (unint64_t)(v59 + 1)) {
        uint64_t v61 = v59 + 1;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v62 = v61;
      }
      if (v62)
      {
        float32x4_t v276 = v45;
        uint64_t v63 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v62);
        float32x4_t v45 = v276;
      }
      else
      {
        uint64_t v63 = 0;
      }
      std::vector<int> v117 = (float32x4_t *)&v63[16 * v59];
      std::vector<int> v118 = &v63[16 * v62];
      *std::vector<int> v117 = v45;
      unint64_t v48 = v117 + 1;
      float32x4_t v120 = *(char **)a3;
      float32x4_t v119 = *(char **)(a3 + 8);
      if (v119 != *(char **)a3)
      {
        do
        {
          float32x4_t v121 = *((float32x4_t *)v119 - 1);
          v119 -= 16;
          v117[-1] = v121;
          --v117;
        }
        while (v119 != v120);
        float32x4_t v119 = *(char **)a3;
      }
      *(void *)a3 = v117;
      *(void *)(a3 + 8) = v48;
      *(void *)(a3 + 16) = v118;
      if (v119) {
        operator delete(v119);
      }
      float32x4_t v44 = v280;
    }
    else
    {
      *float64x2_t v47 = v45;
      unint64_t v48 = v47 + 1;
      float64x2_t v49 = a5;
    }
    *(void *)(a3 + 8) = v48;
    float32x4_t v122 = vmulq_n_f32(v44, *(float *)(a1 + 4 * v13 + 48));
    unint64_t v123 = *(void *)(a3 + 16);
    if ((unint64_t)v48 >= v123)
    {
      uint64_t v125 = ((uint64_t)v48 - *(void *)a3) >> 4;
      if ((unint64_t)(v125 + 1) >> 60) {
        goto LABEL_322;
      }
      uint64_t v126 = v123 - *(void *)a3;
      uint64_t v127 = v126 >> 3;
      if (v126 >> 3 <= (unint64_t)(v125 + 1)) {
        uint64_t v127 = v125 + 1;
      }
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v128 = v127;
      }
      if (v128)
      {
        float32x4_t v282 = v122;
        float64x2_t v129 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v128);
        float32x4_t v122 = v282;
      }
      else
      {
        float64x2_t v129 = 0;
      }
      float64x2_t v176 = (float32x4_t *)&v129[16 * v125];
      float64x2_t v177 = &v129[16 * v128];
      *float64x2_t v176 = v122;
      f32 = (_OWORD *)v176[1].f32;
      float64x2_t v179 = *(char **)a3;
      float32x4_t v178 = *(char **)(a3 + 8);
      if (v178 != *(char **)a3)
      {
        do
        {
          float32x4_t v180 = *((float32x4_t *)v178 - 1);
          v178 -= 16;
          v176[-1] = v180;
          --v176;
        }
        while (v178 != v179);
        float32x4_t v178 = *(char **)a3;
      }
      *(void *)a3 = v176;
      *(void *)(a3 + 8) = f32;
      *(void *)(a3 + 16) = v177;
      if (v178) {
        operator delete(v178);
      }
    }
    else
    {
      *unint64_t v48 = v122;
      f32 = (_OWORD *)v48[1].f32;
    }
    *(void *)(a3 + 8) = f32;
    __x[0] = 0;
    std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
    float64x2_t v181 = (_DWORD *)*a4;
    v181[10] = 1;
    v181[7] = 1;
    v181[4] = 1;
    float64x2_t v183 = v49 + 2;
    float64x2_t v182 = v49[2];
    float64x2_t v184 = v49[1];
    if (v184 >= v182)
    {
      unint64_t v186 = *v49;
      uint64_t v187 = (v184 - *v49) >> 2;
      unint64_t v188 = v187 + 1;
      if ((unint64_t)(v187 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v189 = v182 - v186;
      if (v189 >> 1 > v188) {
        unint64_t v188 = v189 >> 1;
      }
      if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v190 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v190 = v188;
      }
      if (v190)
      {
        int v191 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v190);
        unint64_t v186 = *v49;
        float64x2_t v184 = v49[1];
      }
      else
      {
        int v191 = 0;
      }
      float64x2_t v201 = &v191[4 * v187];
      float64x2_t v182 = &v191[4 * v190];
      *(_DWORD *)float64x2_t v201 = 3;
      uint64_t v185 = v201 + 4;
      while (v184 != v186)
      {
        int v202 = *((_DWORD *)v184 - 1);
        v184 -= 4;
        *((_DWORD *)v201 - 1) = v202;
        v201 -= 4;
      }
      *float64x2_t v49 = v201;
      v49[1] = v185;
      _OWORD v49[2] = v182;
      if (v186)
      {
        operator delete(v186);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v184 = 3;
      uint64_t v185 = v184 + 4;
    }
    v49[1] = v185;
    if (v185 >= v182)
    {
      unint64_t v204 = *v49;
      uint64_t v205 = (v185 - *v49) >> 2;
      unint64_t v206 = v205 + 1;
      if ((unint64_t)(v205 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v207 = v182 - v204;
      if (v207 >> 1 > v206) {
        unint64_t v206 = v207 >> 1;
      }
      if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v208 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v208 = v206;
      }
      if (v208)
      {
        int v209 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v208);
        unint64_t v204 = *v49;
        uint64_t v185 = v49[1];
      }
      else
      {
        int v209 = 0;
      }
      uint64_t v219 = &v209[4 * v205];
      float64x2_t v182 = &v209[4 * v208];
      *(_DWORD *)uint64_t v219 = 6;
      uint64_t v203 = v219 + 4;
      while (v185 != v204)
      {
        int v220 = *((_DWORD *)v185 - 1);
        v185 -= 4;
        *((_DWORD *)v219 - 1) = v220;
        v219 -= 4;
      }
      *float64x2_t v49 = v219;
      v49[1] = v203;
      _OWORD v49[2] = v182;
      if (v204)
      {
        operator delete(v204);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v185 = 6;
      uint64_t v203 = v185 + 4;
    }
    v49[1] = v203;
    if (v203 >= v182)
    {
      unint64_t v221 = *v49;
      uint64_t v222 = (v203 - *v49) >> 2;
      unint64_t v223 = v222 + 1;
      if ((unint64_t)(v222 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v224 = v182 - v221;
      if (v224 >> 1 > v223) {
        unint64_t v223 = v224 >> 1;
      }
      if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v225 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v225 = v223;
      }
      if (v225)
      {
        int v226 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v225);
        unint64_t v221 = *v49;
        uint64_t v203 = v49[1];
      }
      else
      {
        int v226 = 0;
      }
      float64x2_t v235 = &v226[4 * v222];
      float64x2_t v182 = &v226[4 * v225];
      *(_DWORD *)float64x2_t v235 = 9;
      uint64_t v212 = v235 + 4;
      while (v203 != v221)
      {
        int v236 = *((_DWORD *)v203 - 1);
        v203 -= 4;
        *((_DWORD *)v235 - 1) = v236;
        v235 -= 4;
      }
      *float64x2_t v49 = v235;
      v49[1] = v212;
      _OWORD v49[2] = v182;
      if (v221)
      {
        operator delete(v221);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v203 = 9;
      uint64_t v212 = v203 + 4;
    }
    v49[1] = v212;
    if (v212 < v182) {
      goto LABEL_268;
    }
    unint64_t v229 = *v49;
    uint64_t v238 = (v212 - *v49) >> 2;
    unint64_t v239 = v238 + 1;
    if (!((unint64_t)(v238 + 1) >> 62))
    {
      uint64_t v240 = v182 - v229;
      if (v240 >> 1 > v239) {
        unint64_t v239 = v240 >> 1;
      }
      if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v241 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v241 = v239;
      }
      if (v241)
      {
        float64x2_t v242 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v241);
        unint64_t v229 = *v49;
        uint64_t v212 = v49[1];
      }
      else
      {
        float64x2_t v242 = 0;
      }
      int v243 = &v242[4 * v238];
      int v244 = &v242[4 * v241];
      *(_DWORD *)int v243 = 12;
      unint64_t v237 = v243 + 4;
      while (v212 != v229)
      {
        int v246 = *((_DWORD *)v212 - 1);
        v212 -= 4;
        *((_DWORD *)v243 - 1) = v246;
        v243 -= 4;
      }
LABEL_285:
      *float64x2_t v49 = v243;
      v49[1] = v237;
      _OWORD v49[2] = v244;
      if (v229) {
        operator delete(v229);
      }
      goto LABEL_287;
    }
LABEL_322:
    abort();
  }
  unint64_t v50 = *(void *)(a3 + 16);
  float32x4_t v51 = *(float32x4_t **)(a3 + 8);
  if ((unint64_t)v51 >= v50)
  {
    uint64_t v64 = ((uint64_t)v51 - *(void *)a3) >> 4;
    float64x2_t v49 = a5;
    if ((unint64_t)(v64 + 1) >> 60) {
      goto LABEL_322;
    }
    uint64_t v65 = v50 - *(void *)a3;
    uint64_t v66 = v65 >> 3;
    if (v65 >> 3 <= (unint64_t)(v64 + 1)) {
      uint64_t v66 = v64 + 1;
    }
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v66;
    }
    if (v67) {
      int32x4_t v68 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v67);
    }
    else {
      int32x4_t v68 = 0;
    }
    float64x2_t v130 = (float32x4_t *)&v68[16 * v64];
    float64x2_t v131 = &v68[16 * v67];
    *float64x2_t v130 = *a2;
    float v52 = (_OWORD *)v130[1].f32;
    float64x2_t v133 = *(char **)a3;
    float32x4_t v132 = *(char **)(a3 + 8);
    if (v132 != *(char **)a3)
    {
      do
      {
        float32x4_t v134 = *((float32x4_t *)v132 - 1);
        v132 -= 16;
        v130[-1] = v134;
        --v130;
      }
      while (v132 != v133);
      float32x4_t v132 = *(char **)a3;
    }
    *(void *)a3 = v130;
    *(void *)(a3 + 8) = v52;
    *(void *)(a3 + 16) = v131;
    if (v132) {
      operator delete(v132);
    }
  }
  else
  {
    float64x2_t v49 = a5;
    *float32x4_t v51 = *a2;
    float v52 = (_OWORD *)v51[1].f32;
  }
  *(void *)(a3 + 8) = v52;
  __x[0] = 0;
  std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
  int v136 = v49 + 2;
  int v135 = v49[2];
  unsigned int v137 = v49[1];
  if (v137 >= v135)
  {
    unint64_t v139 = *v49;
    uint64_t v140 = (v137 - *v49) >> 2;
    unint64_t v141 = v140 + 1;
    if ((unint64_t)(v140 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v142 = v135 - v139;
    if (v142 >> 1 > v141) {
      unint64_t v141 = v142 >> 1;
    }
    if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v143 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v143 = v141;
    }
    if (v143)
    {
      float64x2_t v144 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v143);
      unint64_t v139 = *v49;
      unsigned int v137 = v49[1];
    }
    else
    {
      float64x2_t v144 = 0;
    }
    float64x2_t v192 = &v144[4 * v140];
    int v135 = &v144[4 * v143];
    *(_DWORD *)float64x2_t v192 = 3;
    uint64_t v138 = v192 + 4;
    while (v137 != v139)
    {
      int v193 = *((_DWORD *)v137 - 1);
      v137 -= 4;
      *((_DWORD *)v192 - 1) = v193;
      v192 -= 4;
    }
    *float64x2_t v49 = v192;
    v49[1] = v138;
    _OWORD v49[2] = v135;
    if (v139)
    {
      operator delete(v139);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)unsigned int v137 = 3;
    uint64_t v138 = v137 + 4;
  }
  v49[1] = v138;
  if (v138 >= v135)
  {
    unint64_t v195 = *v49;
    uint64_t v196 = (v138 - *v49) >> 2;
    unint64_t v197 = v196 + 1;
    if ((unint64_t)(v196 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v198 = v135 - v195;
    if (v198 >> 1 > v197) {
      unint64_t v197 = v198 >> 1;
    }
    if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v199 = v197;
    }
    if (v199)
    {
      int v200 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v199);
      unint64_t v195 = *v49;
      uint64_t v138 = v49[1];
    }
    else
    {
      int v200 = 0;
    }
    float64x2_t v210 = &v200[4 * v196];
    int v135 = &v200[4 * v199];
    *(_DWORD *)float64x2_t v210 = 6;
    uint64_t v194 = v210 + 4;
    while (v138 != v195)
    {
      int v211 = *((_DWORD *)v138 - 1);
      v138 -= 4;
      *((_DWORD *)v210 - 1) = v211;
      v210 -= 4;
    }
    *float64x2_t v49 = v210;
    v49[1] = v194;
    _OWORD v49[2] = v135;
    if (v195)
    {
      operator delete(v195);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v138 = 6;
    uint64_t v194 = v138 + 4;
  }
  v49[1] = v194;
  if (v194 >= v135)
  {
    unint64_t v213 = *v49;
    uint64_t v214 = (v194 - *v49) >> 2;
    unint64_t v215 = v214 + 1;
    if ((unint64_t)(v214 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v216 = v135 - v213;
    if (v216 >> 1 > v215) {
      unint64_t v215 = v216 >> 1;
    }
    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v217 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v217 = v215;
    }
    if (v217)
    {
      int v218 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v217);
      unint64_t v213 = *v49;
      uint64_t v194 = v49[1];
    }
    else
    {
      int v218 = 0;
    }
    float64x2_t v227 = &v218[4 * v214];
    int v135 = &v218[4 * v217];
    *(_DWORD *)float64x2_t v227 = 9;
    uint64_t v212 = v227 + 4;
    while (v194 != v213)
    {
      int v228 = *((_DWORD *)v194 - 1);
      v194 -= 4;
      *((_DWORD *)v227 - 1) = v228;
      v227 -= 4;
    }
    *float64x2_t v49 = v227;
    v49[1] = v212;
    _OWORD v49[2] = v135;
    if (v213)
    {
      operator delete(v213);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v194 = 9;
    uint64_t v212 = v194 + 4;
  }
  v49[1] = v212;
  if (v212 >= v135)
  {
    unint64_t v229 = *v49;
    uint64_t v230 = (v212 - *v49) >> 2;
    unint64_t v231 = v230 + 1;
    if (!((unint64_t)(v230 + 1) >> 62))
    {
      uint64_t v232 = v135 - v229;
      if (v232 >> 1 > v231) {
        unint64_t v231 = v232 >> 1;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        int v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v233);
        unint64_t v229 = *v49;
        uint64_t v212 = v49[1];
      }
      else
      {
        int v234 = 0;
      }
      int v243 = &v234[4 * v230];
      int v244 = &v234[4 * v233];
      *(_DWORD *)int v243 = 12;
      unint64_t v237 = v243 + 4;
      while (v212 != v229)
      {
        int v245 = *((_DWORD *)v212 - 1);
        v212 -= 4;
        *((_DWORD *)v243 - 1) = v245;
        v243 -= 4;
      }
      goto LABEL_285;
    }
    goto LABEL_322;
  }
LABEL_268:
  *(_DWORD *)uint64_t v212 = 12;
  unint64_t v237 = v212 + 4;
LABEL_287:
  v49[1] = v237;
LABEL_288:
  if (v289)
  {
    float64x2_t v290 = v289;
    operator delete(v289);
  }
}

void geom_dop20_polyhedron_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t a5)
{
  float32x4_t v11 = a5;
  uint64_t v8 = geom::collection_to_vector<float>(a2);
  unint64_t v9 = (unint64_t *)geom::collection_to_vector<float>(a3);
  float32x4_t v10 = (char **)geom::collection_to_vector<float>(a4);
  geom::dop<(unsigned char)20,float>::compute_polyhedron(a1, &v11, v8, v9, v10);
}

void geom::dop<(unsigned char)20,float>::compute_polyhedron(uint64_t a1, float32x4_t *a2, uint64_t a3, unint64_t *a4, char **a5)
{
  uint64_t v6 = 0;
  v291[11] = *MEMORY[0x263EF8340];
  *(void *)(a3 + 8) = *(void *)a3;
  a4[1] = *a4;
  a5[1] = *a5;
  float32x4_t v7 = *a2;
  do
  {
    float32x4_t v8 = vmulq_f32(geom::kdop_axes<(unsigned char)20,float>[v6], v7);
    v8.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
    unint64_t v9 = (float *)(a1 + 4 * v6);
    *((float *)&v291[6] + v6) = *v9 - v8.f32[0];
    *((float *)&v291[1] + v6++) = v9[12] - v8.f32[0];
  }
  while (v6 != 10);
  float64x2_t v289 = 0;
  float64x2_t v290 = 0;
  v291[0] = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm((void **)&v289, 0x14uLL);
  uint64_t v11 = 0;
  uint64_t v12 = -1;
  uint64_t v13 = -1;
  do
  {
    float v14 = *((float *)&v291[6] + v11);
    v10.i32[0] = *((_DWORD *)&v291[1] + v11);
    if (v14 == v10.f32[0])
    {
      uint64_t v12 = v11;
    }
    else
    {
      uint64_t v15 = v12;
      float v16 = fabsf(v14);
      float v17 = fabsf(v10.f32[0]);
      BOOL v18 = v16 == INFINITY || v17 == INFINITY;
      if (v18 || (uint64_t v12 = v11, vabds_f32(v14, v10.f32[0]) >= (float)((float)((float)(v16 + v17) + 1.0) * 0.00001)))
      {
        float32x4_t v19 = geom::kdop_axes<(unsigned char)20,float>[v11];
        float32x4_t v20 = vdivq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0));
        float64x2_t v21 = v290;
        if ((unint64_t)v290 >= v291[0])
        {
          uint64_t v23 = v290 - v289;
          if ((unint64_t)(v23 + 1) >> 60) {
            goto LABEL_322;
          }
          float32x4_t v278 = geom::kdop_axes<(unsigned char)20,float>[v11];
          unint64_t v24 = (uint64_t)(v291[0] - (void)v289) >> 3;
          if (v24 <= v23 + 1) {
            unint64_t v24 = v23 + 1;
          }
          if (v291[0] - (void)v289 >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            float32x4_t v275 = v20;
            int64x2_t v26 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v291, v25);
            float32x4_t v20 = v275;
          }
          else
          {
            int64x2_t v26 = 0;
          }
          double v27 = (float32x4_t *)&v26[16 * v23];
          *double v27 = v20;
          float64x2_t v22 = v27 + 1;
          uint64_t v29 = v289;
          float64x2_t v28 = v290;
          if (v290 != v289)
          {
            do
            {
              float32x4_t v30 = v28[-1];
              --v28;
              v27[-1] = v30;
              --v27;
            }
            while (v28 != v29);
            float64x2_t v28 = v289;
          }
          float64x2_t v289 = v27;
          float64x2_t v290 = v22;
          v291[0] = &v26[16 * v25];
          if (v28) {
            operator delete(v28);
          }
          float32x4_t v19 = v278;
        }
        else
        {
          *float64x2_t v290 = v20;
          float64x2_t v22 = v21 + 1;
        }
        float64x2_t v290 = v22;
        float64x2_t v31 = (const float *)&v291[6] + v11;
        float32x4_t v32 = vld1q_dup_f32(v31);
        float32x4_t v10 = vdivq_f32(v19, v32);
        if ((unint64_t)v22 >= v291[0])
        {
          uint64_t v34 = v22 - v289;
          if ((unint64_t)(v34 + 1) >> 60) {
            goto LABEL_322;
          }
          unint64_t v35 = (uint64_t)(v291[0] - (void)v289) >> 3;
          if (v35 <= v34 + 1) {
            unint64_t v35 = v34 + 1;
          }
          if (v291[0] - (void)v289 >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36)
          {
            float32x4_t v279 = v10;
            float64x2_t v37 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v291, v36);
            float32x4_t v10 = v279;
          }
          else
          {
            float64x2_t v37 = 0;
          }
          float64x2_t v38 = (float32x4_t *)&v37[16 * v34];
          float32x4_t *v38 = v10;
          unint64_t v33 = v38 + 1;
          float32x4_t v40 = v289;
          float32x4_t v39 = v290;
          if (v290 != v289)
          {
            do
            {
              float32x4_t v41 = v39[-1];
              --v39;
              v10.i32[1] = v41.i32[1];
              v38[-1] = v41;
              --v38;
            }
            while (v39 != v40);
            float32x4_t v39 = v289;
          }
          float64x2_t v289 = v38;
          float64x2_t v290 = v33;
          v291[0] = &v37[16 * v36];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *float64x2_t v22 = v10;
          unint64_t v33 = v22 + 1;
        }
        float64x2_t v290 = v33;
        uint64_t v13 = v11;
        uint64_t v12 = v15;
      }
    }
    ++v11;
  }
  while (v11 != 10);
  float32x4_t v42 = v289;
  uint64_t v43 = v290 - v289;
  if (v43)
  {
    if (v43 != 2)
    {
      if ((unint64_t)((char *)v290 - (char *)v289) > 0x13F)
      {
        geom::half_plane_intersection_3<float>(0x14uLL, v289, (char **)a3, a4, a5);
        float32x2_t v69 = a2;
      }
      else
      {
        *(void *)std::vector<int>::value_type __x = 0;
        float64x2_t v287 = 0;
        float64x2_t v288 = 0;
        float32x4_t v53 = geom::kdop_axes<(unsigned char)20,float>[v12];
        float v54 = COERCE_FLOAT(geom::kdop_axes<(unsigned char)20,float>[v12].i64[1]);
        float v55 = fabsf(v54);
        LODWORD(v56) = HIDWORD(geom::kdop_axes<(unsigned char)20,float>[v12].i64[0]);
        float v57 = -v54;
        if (v55 <= 0.00000011921)
        {
          float32x4_t v58 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v56), (int32x4_t)v53);
        }
        else
        {
          v58.i32[0] = 0;
          v58.f32[1] = v57;
          v58.i64[1] = v53.u32[1];
        }
        int32x4_t v70 = (int32x4_t)vmulq_f32(v58, v58);
        v70.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v70, 2), vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1))).u32[0];
        float32x2_t v71 = vrsqrte_f32((float32x2_t)v70.u32[0]);
        float32x2_t v72 = vmul_f32(v71, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v71, v71)));
        LODWORD(v73) = vmul_f32(v72, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v72, v72))).u32[0];
        if (v55 <= 0.00000011921)
        {
          float32x4_t v74 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v56), (int32x4_t)v53);
        }
        else
        {
          v74.i32[0] = 0;
          v74.f32[1] = v57;
          v74.i64[1] = v53.u32[1];
        }
        int32x4_t v75 = (int32x4_t)vmulq_f32(v74, v74);
        v75.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1))).u32[0];
        float32x4_t v281 = vmulq_n_f32(v58, v73);
        float32x2_t v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
        float32x2_t v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
        float32x4_t v78 = vmulq_n_f32(v74, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
        float32x4_t v269 = vnegq_f32(v53);
        float32x4_t v270 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL);
        float32x4_t v79 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL), v269), v78, v270);
        float32x4_t v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL);
        int32x4_t v81 = (int32x4_t)vmulq_f32(v79, v79);
        v81.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v81.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v81, 2), *(float32x2_t *)v81.i8)).u32[0];
        float32x2_t v82 = vrsqrte_f32((float32x2_t)v81.u32[0]);
        float32x2_t v83 = vmul_f32(v82, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v82, v82)));
        float32x4_t v277 = vmulq_n_f32(v80, vmul_f32(v83, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v83, v83))).f32[0]);
        if (v290 == v289)
        {
          uint64_t v116 = 0;
          unint64_t v107 = 0;
        }
        else
        {
          unint64_t v84 = 0;
          float32x2_t v85 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 1);
          float32x2_t v86 = (float32x2_t)vdup_laneq_s32((int32x4_t)v53, 2);
          int32x4_t v267 = vdupq_laneq_s32((int32x4_t)v53, 2);
          int32x2_t v268 = (int32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
          float32x4_t v266 = geom::kdop_axes<(unsigned char)20,float>[v12];
          do
          {
            float32x4_t v87 = v42[v84];
            float32x4_t v88 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v87, (int32x4_t)v87), (int8x16_t)v87, 0xCuLL), v269), v87, v270);
            float32x4_t v89 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL);
            int32x4_t v90 = (int32x4_t)vmulq_f32(v88, v88);
            v90.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v90, 2), *(float32x2_t *)v90.i8)).u32[0];
            float32x2_t v91 = vrsqrte_f32((float32x2_t)v90.u32[0]);
            float32x2_t v92 = vmul_f32(v91, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v91, v91)));
            float32x4_t v93 = vmulq_n_f32(v89, vmul_f32(v92, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v92, v92))).f32[0]);
            int32x4_t v94 = vzip1q_s32((int32x4_t)v53, (int32x4_t)v87);
            float32x2_t v95 = (float32x2_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
            float32x2_t v96 = (float32x2_t)vzip1_s32(v268, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL));
            float32x4_t v272 = (float32x4_t)vzip1q_s32(vzip1q_s32(v94, v267), vdupq_laneq_s32(v94, 2));
            float32x4_t v273 = v93;
            *(float32x2_t *)v90.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v94.i8, v87.f32[0]), v95, *(float32x2_t *)v87.f32, 1), v96, v87, 2);
            v87.i32[1] = vdupq_laneq_s32(v94, 3).i32[1];
            float32x4_t v271 = v87;
            *(float32x2_t *)v87.f32 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v94.i8, v53.f32[0]), v85, v95), v86, v96);
            simd_float2x2 v97 = __invert_f2((simd_float2x2)v87);
            float32x4_t v98 = vmlaq_lane_f32(vmulq_n_f32(v272, v97.columns[1].f32[0]), v271, (float32x2_t)v97.columns[1], 1);
            int32x4_t v99 = (int32x4_t)vmulq_f32(v281, v273);
            int32x4_t v100 = (int32x4_t)vmulq_f32(v277, v273);
            *(int32x2_t *)v99.i8 = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v99, 2), vadd_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v100, 2), vadd_f32(*(float32x2_t *)v100.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v100.i8, 1))));
            float32x2_t v101 = vmul_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8);
            v101.i32[0] = vadd_f32(v101, (float32x2_t)vdup_lane_s32((int32x2_t)v101, 1)).u32[0];
            *(float32x2_t *)v100.i8 = vrsqrte_f32((float32x2_t)v101.u32[0]);
            *(float32x2_t *)v100.i8 = vmul_f32(*(float32x2_t *)v100.i8, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8)));
            int32x2_t v102 = (int32x2_t)vmul_f32(*(float32x2_t *)v100.i8, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8)));
            *(float32x2_t *)v99.i8 = vmul_n_f32(*(float32x2_t *)v99.i8, *(float *)v102.i32);
            int32x4_t v103 = (int32x4_t)vmulq_f32(v281, v98);
            *(float *)v102.i32 = -*(float *)&v99.i32[1];
            int32x4_t v104 = (int32x4_t)vmulq_f32(v277, v98);
            *(int32x2_t *)v99.i8 = vzip1_s32(v102, *(int32x2_t *)v99.i8);
            *(float32x2_t *)v104.i8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v103, 2), vadd_f32(*(float32x2_t *)v103.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v103.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v104, 2), vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)))), *(float32x2_t *)v99.i8);
            float32x2_t v105 = vdiv_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)), 0));
            uint64_t v106 = v287;
            if (v287 >= v288)
            {
              uint64_t v108 = ((uint64_t)v287 - *(void *)__x) >> 3;
              if ((unint64_t)(v108 + 1) >> 61) {
                goto LABEL_322;
              }
              unint64_t v109 = ((uint64_t)v288 - *(void *)__x) >> 2;
              if (v109 <= v108 + 1) {
                unint64_t v109 = v108 + 1;
              }
              if ((unint64_t)v288 - *(void *)__x >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v110 = v109;
              }
              if (v110) {
                int v111 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v288, v110);
              }
              else {
                int v111 = 0;
              }
              unsigned int v112 = (float32x2_t *)&v111[8 * v108];
              *unsigned int v112 = v105;
              unint64_t v107 = v112 + 1;
              uint64_t v114 = *(float32x2_t **)__x;
              float32x2_t v113 = v287;
              if (v287 != *(float32x2_t **)__x)
              {
                do
                {
                  float32x2_t v115 = v113[-1];
                  --v113;
                  v112[-1] = v115;
                  --v112;
                }
                while (v113 != v114);
                float32x2_t v113 = *(float32x2_t **)__x;
              }
              *(void *)std::vector<int>::value_type __x = v112;
              float64x2_t v287 = v107;
              float64x2_t v288 = (float32x2_t *)&v111[8 * v110];
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *float64x2_t v287 = v105;
              unint64_t v107 = v106 + 1;
            }
            float32x4_t v53 = v266;
            float64x2_t v287 = v107;
            ++v84;
            float32x4_t v42 = v289;
          }
          while (v84 < v290 - v289);
          uint64_t v116 = *(void *)__x;
        }
        std::vector<int> __p = 0;
        uint64_t v284 = 0;
        uint64_t v285 = 0;
        geom::half_plane_intersection_2<float>(((uint64_t)v107 - v116) >> 3, v116, (uint64_t)&__p);
        float64x2_t v145 = (float32x2_t *)__p;
        float64x2_t v146 = v284;
        float32x4_t v147 = *(float32x4_t **)(a3 + 8);
        if (__p != v284)
        {
          uint64_t v148 = (void *)(a3 + 16);
          do
          {
            float32x4_t v149 = vmlaq_n_f32(vmulq_lane_f32(v277, *v145, 1), v281, COERCE_FLOAT(*v145));
            if ((unint64_t)v147 >= *v148)
            {
              uint64_t v150 = ((uint64_t)v147 - *(void *)a3) >> 4;
              if ((unint64_t)(v150 + 1) >> 60) {
                goto LABEL_322;
              }
              uint64_t v151 = *v148 - *(void *)a3;
              uint64_t v152 = v151 >> 3;
              if (v151 >> 3 <= (unint64_t)(v150 + 1)) {
                uint64_t v152 = v150 + 1;
              }
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v153 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v152;
              }
              if (v153)
              {
                float32x4_t v274 = v149;
                unsigned int v154 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v153);
                float32x4_t v149 = v274;
              }
              else
              {
                unsigned int v154 = 0;
              }
              uint64_t v155 = (float32x4_t *)&v154[16 * v150];
              *uint64_t v155 = v149;
              float32x4_t v147 = v155 + 1;
              uint64_t v157 = *(char **)a3;
              float32x4_t v156 = *(char **)(a3 + 8);
              if (v156 != *(char **)a3)
              {
                do
                {
                  float32x4_t v158 = *((float32x4_t *)v156 - 1);
                  v156 -= 16;
                  v155[-1] = v158;
                  --v155;
                }
                while (v156 != v157);
                float32x4_t v156 = *(char **)a3;
              }
              *(void *)a3 = v155;
              *(void *)(a3 + 8) = v147;
              *(void *)(a3 + 16) = &v154[16 * v153];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              *v147++ = v149;
            }
            *(void *)(a3 + 8) = v147;
            ++v145;
          }
          while (v145 != v146);
        }
        std::vector<unsigned int>::resize((std::vector<int> *)a4, ((uint64_t)v147 - *(void *)a3) >> 3);
        uint64_t v159 = *(void *)(a3 + 8) - *(void *)a3;
        if (v159)
        {
          uint64_t v160 = 0;
          uint64_t v161 = (int *)*a4;
          uint64_t v162 = 4 * (v159 >> 4);
          uint64_t v163 = v162;
          do
          {
            v161[v160] = v160;
            ++v160;
            v163 -= 4;
          }
          while (v163);
          unint64_t v164 = (_DWORD *)(a4[1] - 4);
          do
          {
            int v165 = *v161++;
            *v164-- = v165;
            v162 -= 4;
          }
          while (v162);
        }
        unint64_t v166 = (unint64_t)v159 >> 4;
        float64x2_t v167 = a5[2];
        float64x2_t v168 = a5[1];
        if (v168 >= v167)
        {
          unint64_t v170 = *a5;
          uint64_t v171 = (v168 - *a5) >> 2;
          unint64_t v172 = v171 + 1;
          if ((unint64_t)(v171 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v173 = v167 - v170;
          if (v173 >> 1 > v172) {
            unint64_t v172 = v173 >> 1;
          }
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v174 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v174 = v172;
          }
          if (v174)
          {
            float64x2_t v175 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v174);
            unint64_t v170 = *a5;
            float64x2_t v168 = a5[1];
          }
          else
          {
            float64x2_t v175 = 0;
          }
          uint64_t v247 = &v175[4 * v171];
          float64x2_t v167 = &v175[4 * v174];
          *(_DWORD *)uint64_t v247 = v166;
          uint64_t v169 = v247 + 4;
          while (v168 != v170)
          {
            int v248 = *((_DWORD *)v168 - 1);
            v168 -= 4;
            *((_DWORD *)v247 - 1) = v248;
            v247 -= 4;
          }
          *a5 = v247;
          a5[1] = v169;
          a5[2] = v167;
          if (v170)
          {
            operator delete(v170);
            float64x2_t v167 = a5[2];
          }
        }
        else
        {
          *(_DWORD *)float64x2_t v168 = v166;
          uint64_t v169 = v168 + 4;
        }
        a5[1] = v169;
        uint64_t v249 = ((*(void *)(a3 + 8) - *(void *)a3) >> 3) & 0xFFFFFFFELL;
        if (v169 >= v167)
        {
          unint64_t v251 = *a5;
          uint64_t v252 = (v169 - *a5) >> 2;
          unint64_t v253 = v252 + 1;
          if ((unint64_t)(v252 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v254 = v167 - v251;
          if (v254 >> 1 > v253) {
            unint64_t v253 = v254 >> 1;
          }
          if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v255 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v255 = v253;
          }
          if (v255)
          {
            float64x2_t v256 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v255);
            unint64_t v251 = *a5;
            uint64_t v169 = a5[1];
          }
          else
          {
            float64x2_t v256 = 0;
          }
          int v257 = &v256[4 * v252];
          long long v258 = &v256[4 * v255];
          *(_DWORD *)int v257 = v249;
          uint64_t v250 = v257 + 4;
          if (v169 == v251)
          {
            float32x2_t v69 = a2;
          }
          else
          {
            float32x2_t v69 = a2;
            do
            {
              int v259 = *((_DWORD *)v169 - 1);
              v169 -= 4;
              *((_DWORD *)v257 - 1) = v259;
              v257 -= 4;
            }
            while (v169 != v251);
          }
          *a5 = v257;
          a5[1] = v250;
          a5[2] = v258;
          if (v251) {
            operator delete(v251);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v169 = v249;
          uint64_t v250 = v169 + 4;
          float32x2_t v69 = a2;
        }
        a5[1] = v250;
        if (__p)
        {
          uint64_t v284 = (float32x2_t *)__p;
          operator delete(__p);
        }
        if (*(void *)__x)
        {
          float64x2_t v287 = *(float32x2_t **)__x;
          operator delete(*(void **)__x);
        }
      }
      float64x2_t v260 = *(float32x4_t **)a3;
      float64x2_t v261 = *(float32x4_t **)(a3 + 8);
      while (v260 != v261)
      {
        float32x4_t *v260 = vaddq_f32(*v69, *v260);
        ++v260;
      }
      goto LABEL_288;
    }
    float32x4_t v44 = geom::kdop_axes<(unsigned char)20,float>[v13];
    float32x4_t v45 = vmulq_n_f32(v44, *(float *)(a1 + 4 * v13));
    unint64_t v46 = *(void *)(a3 + 16);
    float64x2_t v47 = *(float32x4_t **)(a3 + 8);
    if ((unint64_t)v47 >= v46)
    {
      uint64_t v59 = ((uint64_t)v47 - *(void *)a3) >> 4;
      float64x2_t v49 = a5;
      if ((unint64_t)(v59 + 1) >> 60) {
        goto LABEL_322;
      }
      float32x4_t v280 = geom::kdop_axes<(unsigned char)20,float>[v13];
      uint64_t v60 = v46 - *(void *)a3;
      uint64_t v61 = v60 >> 3;
      if (v60 >> 3 <= (unint64_t)(v59 + 1)) {
        uint64_t v61 = v59 + 1;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v62 = v61;
      }
      if (v62)
      {
        float32x4_t v276 = v45;
        uint64_t v63 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v62);
        float32x4_t v45 = v276;
      }
      else
      {
        uint64_t v63 = 0;
      }
      std::vector<int> v117 = (float32x4_t *)&v63[16 * v59];
      std::vector<int> v118 = &v63[16 * v62];
      *std::vector<int> v117 = v45;
      unint64_t v48 = v117 + 1;
      float32x4_t v120 = *(char **)a3;
      float32x4_t v119 = *(char **)(a3 + 8);
      if (v119 != *(char **)a3)
      {
        do
        {
          float32x4_t v121 = *((float32x4_t *)v119 - 1);
          v119 -= 16;
          v117[-1] = v121;
          --v117;
        }
        while (v119 != v120);
        float32x4_t v119 = *(char **)a3;
      }
      *(void *)a3 = v117;
      *(void *)(a3 + 8) = v48;
      *(void *)(a3 + 16) = v118;
      if (v119) {
        operator delete(v119);
      }
      float32x4_t v44 = v280;
    }
    else
    {
      *float64x2_t v47 = v45;
      unint64_t v48 = v47 + 1;
      float64x2_t v49 = a5;
    }
    *(void *)(a3 + 8) = v48;
    float32x4_t v122 = vmulq_n_f32(v44, *(float *)(a1 + 4 * v13 + 48));
    unint64_t v123 = *(void *)(a3 + 16);
    if ((unint64_t)v48 >= v123)
    {
      uint64_t v125 = ((uint64_t)v48 - *(void *)a3) >> 4;
      if ((unint64_t)(v125 + 1) >> 60) {
        goto LABEL_322;
      }
      uint64_t v126 = v123 - *(void *)a3;
      uint64_t v127 = v126 >> 3;
      if (v126 >> 3 <= (unint64_t)(v125 + 1)) {
        uint64_t v127 = v125 + 1;
      }
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v128 = v127;
      }
      if (v128)
      {
        float32x4_t v282 = v122;
        float64x2_t v129 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v128);
        float32x4_t v122 = v282;
      }
      else
      {
        float64x2_t v129 = 0;
      }
      float64x2_t v176 = (float32x4_t *)&v129[16 * v125];
      float64x2_t v177 = &v129[16 * v128];
      *float64x2_t v176 = v122;
      f32 = (_OWORD *)v176[1].f32;
      float64x2_t v179 = *(char **)a3;
      float32x4_t v178 = *(char **)(a3 + 8);
      if (v178 != *(char **)a3)
      {
        do
        {
          float32x4_t v180 = *((float32x4_t *)v178 - 1);
          v178 -= 16;
          v176[-1] = v180;
          --v176;
        }
        while (v178 != v179);
        float32x4_t v178 = *(char **)a3;
      }
      *(void *)a3 = v176;
      *(void *)(a3 + 8) = f32;
      *(void *)(a3 + 16) = v177;
      if (v178) {
        operator delete(v178);
      }
    }
    else
    {
      *unint64_t v48 = v122;
      f32 = (_OWORD *)v48[1].f32;
    }
    *(void *)(a3 + 8) = f32;
    __x[0] = 0;
    std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
    float64x2_t v181 = (_DWORD *)*a4;
    v181[10] = 1;
    v181[7] = 1;
    v181[4] = 1;
    float64x2_t v183 = v49 + 2;
    float64x2_t v182 = v49[2];
    float64x2_t v184 = v49[1];
    if (v184 >= v182)
    {
      unint64_t v186 = *v49;
      uint64_t v187 = (v184 - *v49) >> 2;
      unint64_t v188 = v187 + 1;
      if ((unint64_t)(v187 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v189 = v182 - v186;
      if (v189 >> 1 > v188) {
        unint64_t v188 = v189 >> 1;
      }
      if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v190 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v190 = v188;
      }
      if (v190)
      {
        int v191 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v190);
        unint64_t v186 = *v49;
        float64x2_t v184 = v49[1];
      }
      else
      {
        int v191 = 0;
      }
      float64x2_t v201 = &v191[4 * v187];
      float64x2_t v182 = &v191[4 * v190];
      *(_DWORD *)float64x2_t v201 = 3;
      uint64_t v185 = v201 + 4;
      while (v184 != v186)
      {
        int v202 = *((_DWORD *)v184 - 1);
        v184 -= 4;
        *((_DWORD *)v201 - 1) = v202;
        v201 -= 4;
      }
      *float64x2_t v49 = v201;
      v49[1] = v185;
      _OWORD v49[2] = v182;
      if (v186)
      {
        operator delete(v186);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v184 = 3;
      uint64_t v185 = v184 + 4;
    }
    v49[1] = v185;
    if (v185 >= v182)
    {
      unint64_t v204 = *v49;
      uint64_t v205 = (v185 - *v49) >> 2;
      unint64_t v206 = v205 + 1;
      if ((unint64_t)(v205 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v207 = v182 - v204;
      if (v207 >> 1 > v206) {
        unint64_t v206 = v207 >> 1;
      }
      if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v208 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v208 = v206;
      }
      if (v208)
      {
        int v209 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v208);
        unint64_t v204 = *v49;
        uint64_t v185 = v49[1];
      }
      else
      {
        int v209 = 0;
      }
      uint64_t v219 = &v209[4 * v205];
      float64x2_t v182 = &v209[4 * v208];
      *(_DWORD *)uint64_t v219 = 6;
      uint64_t v203 = v219 + 4;
      while (v185 != v204)
      {
        int v220 = *((_DWORD *)v185 - 1);
        v185 -= 4;
        *((_DWORD *)v219 - 1) = v220;
        v219 -= 4;
      }
      *float64x2_t v49 = v219;
      v49[1] = v203;
      _OWORD v49[2] = v182;
      if (v204)
      {
        operator delete(v204);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v185 = 6;
      uint64_t v203 = v185 + 4;
    }
    v49[1] = v203;
    if (v203 >= v182)
    {
      unint64_t v221 = *v49;
      uint64_t v222 = (v203 - *v49) >> 2;
      unint64_t v223 = v222 + 1;
      if ((unint64_t)(v222 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v224 = v182 - v221;
      if (v224 >> 1 > v223) {
        unint64_t v223 = v224 >> 1;
      }
      if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v225 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v225 = v223;
      }
      if (v225)
      {
        int v226 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v225);
        unint64_t v221 = *v49;
        uint64_t v203 = v49[1];
      }
      else
      {
        int v226 = 0;
      }
      float64x2_t v235 = &v226[4 * v222];
      float64x2_t v182 = &v226[4 * v225];
      *(_DWORD *)float64x2_t v235 = 9;
      uint64_t v212 = v235 + 4;
      while (v203 != v221)
      {
        int v236 = *((_DWORD *)v203 - 1);
        v203 -= 4;
        *((_DWORD *)v235 - 1) = v236;
        v235 -= 4;
      }
      *float64x2_t v49 = v235;
      v49[1] = v212;
      _OWORD v49[2] = v182;
      if (v221)
      {
        operator delete(v221);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v203 = 9;
      uint64_t v212 = v203 + 4;
    }
    v49[1] = v212;
    if (v212 < v182) {
      goto LABEL_268;
    }
    unint64_t v229 = *v49;
    uint64_t v238 = (v212 - *v49) >> 2;
    unint64_t v239 = v238 + 1;
    if (!((unint64_t)(v238 + 1) >> 62))
    {
      uint64_t v240 = v182 - v229;
      if (v240 >> 1 > v239) {
        unint64_t v239 = v240 >> 1;
      }
      if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v241 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v241 = v239;
      }
      if (v241)
      {
        float64x2_t v242 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v241);
        unint64_t v229 = *v49;
        uint64_t v212 = v49[1];
      }
      else
      {
        float64x2_t v242 = 0;
      }
      int v243 = &v242[4 * v238];
      int v244 = &v242[4 * v241];
      *(_DWORD *)int v243 = 12;
      unint64_t v237 = v243 + 4;
      while (v212 != v229)
      {
        int v246 = *((_DWORD *)v212 - 1);
        v212 -= 4;
        *((_DWORD *)v243 - 1) = v246;
        v243 -= 4;
      }
LABEL_285:
      *float64x2_t v49 = v243;
      v49[1] = v237;
      _OWORD v49[2] = v244;
      if (v229) {
        operator delete(v229);
      }
      goto LABEL_287;
    }
LABEL_322:
    abort();
  }
  unint64_t v50 = *(void *)(a3 + 16);
  float32x4_t v51 = *(float32x4_t **)(a3 + 8);
  if ((unint64_t)v51 >= v50)
  {
    uint64_t v64 = ((uint64_t)v51 - *(void *)a3) >> 4;
    float64x2_t v49 = a5;
    if ((unint64_t)(v64 + 1) >> 60) {
      goto LABEL_322;
    }
    uint64_t v65 = v50 - *(void *)a3;
    uint64_t v66 = v65 >> 3;
    if (v65 >> 3 <= (unint64_t)(v64 + 1)) {
      uint64_t v66 = v64 + 1;
    }
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v66;
    }
    if (v67) {
      int32x4_t v68 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v67);
    }
    else {
      int32x4_t v68 = 0;
    }
    float64x2_t v130 = (float32x4_t *)&v68[16 * v64];
    float64x2_t v131 = &v68[16 * v67];
    *float64x2_t v130 = *a2;
    float v52 = (_OWORD *)v130[1].f32;
    float64x2_t v133 = *(char **)a3;
    float32x4_t v132 = *(char **)(a3 + 8);
    if (v132 != *(char **)a3)
    {
      do
      {
        float32x4_t v134 = *((float32x4_t *)v132 - 1);
        v132 -= 16;
        v130[-1] = v134;
        --v130;
      }
      while (v132 != v133);
      float32x4_t v132 = *(char **)a3;
    }
    *(void *)a3 = v130;
    *(void *)(a3 + 8) = v52;
    *(void *)(a3 + 16) = v131;
    if (v132) {
      operator delete(v132);
    }
  }
  else
  {
    float64x2_t v49 = a5;
    *float32x4_t v51 = *a2;
    float v52 = (_OWORD *)v51[1].f32;
  }
  *(void *)(a3 + 8) = v52;
  __x[0] = 0;
  std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
  int v136 = v49 + 2;
  int v135 = v49[2];
  unsigned int v137 = v49[1];
  if (v137 >= v135)
  {
    unint64_t v139 = *v49;
    uint64_t v140 = (v137 - *v49) >> 2;
    unint64_t v141 = v140 + 1;
    if ((unint64_t)(v140 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v142 = v135 - v139;
    if (v142 >> 1 > v141) {
      unint64_t v141 = v142 >> 1;
    }
    if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v143 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v143 = v141;
    }
    if (v143)
    {
      float64x2_t v144 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v143);
      unint64_t v139 = *v49;
      unsigned int v137 = v49[1];
    }
    else
    {
      float64x2_t v144 = 0;
    }
    float64x2_t v192 = &v144[4 * v140];
    int v135 = &v144[4 * v143];
    *(_DWORD *)float64x2_t v192 = 3;
    uint64_t v138 = v192 + 4;
    while (v137 != v139)
    {
      int v193 = *((_DWORD *)v137 - 1);
      v137 -= 4;
      *((_DWORD *)v192 - 1) = v193;
      v192 -= 4;
    }
    *float64x2_t v49 = v192;
    v49[1] = v138;
    _OWORD v49[2] = v135;
    if (v139)
    {
      operator delete(v139);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)unsigned int v137 = 3;
    uint64_t v138 = v137 + 4;
  }
  v49[1] = v138;
  if (v138 >= v135)
  {
    unint64_t v195 = *v49;
    uint64_t v196 = (v138 - *v49) >> 2;
    unint64_t v197 = v196 + 1;
    if ((unint64_t)(v196 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v198 = v135 - v195;
    if (v198 >> 1 > v197) {
      unint64_t v197 = v198 >> 1;
    }
    if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v199 = v197;
    }
    if (v199)
    {
      int v200 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v199);
      unint64_t v195 = *v49;
      uint64_t v138 = v49[1];
    }
    else
    {
      int v200 = 0;
    }
    float64x2_t v210 = &v200[4 * v196];
    int v135 = &v200[4 * v199];
    *(_DWORD *)float64x2_t v210 = 6;
    uint64_t v194 = v210 + 4;
    while (v138 != v195)
    {
      int v211 = *((_DWORD *)v138 - 1);
      v138 -= 4;
      *((_DWORD *)v210 - 1) = v211;
      v210 -= 4;
    }
    *float64x2_t v49 = v210;
    v49[1] = v194;
    _OWORD v49[2] = v135;
    if (v195)
    {
      operator delete(v195);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v138 = 6;
    uint64_t v194 = v138 + 4;
  }
  v49[1] = v194;
  if (v194 >= v135)
  {
    unint64_t v213 = *v49;
    uint64_t v214 = (v194 - *v49) >> 2;
    unint64_t v215 = v214 + 1;
    if ((unint64_t)(v214 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v216 = v135 - v213;
    if (v216 >> 1 > v215) {
      unint64_t v215 = v216 >> 1;
    }
    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v217 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v217 = v215;
    }
    if (v217)
    {
      int v218 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v217);
      unint64_t v213 = *v49;
      uint64_t v194 = v49[1];
    }
    else
    {
      int v218 = 0;
    }
    float64x2_t v227 = &v218[4 * v214];
    int v135 = &v218[4 * v217];
    *(_DWORD *)float64x2_t v227 = 9;
    uint64_t v212 = v227 + 4;
    while (v194 != v213)
    {
      int v228 = *((_DWORD *)v194 - 1);
      v194 -= 4;
      *((_DWORD *)v227 - 1) = v228;
      v227 -= 4;
    }
    *float64x2_t v49 = v227;
    v49[1] = v212;
    _OWORD v49[2] = v135;
    if (v213)
    {
      operator delete(v213);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v194 = 9;
    uint64_t v212 = v194 + 4;
  }
  v49[1] = v212;
  if (v212 >= v135)
  {
    unint64_t v229 = *v49;
    uint64_t v230 = (v212 - *v49) >> 2;
    unint64_t v231 = v230 + 1;
    if (!((unint64_t)(v230 + 1) >> 62))
    {
      uint64_t v232 = v135 - v229;
      if (v232 >> 1 > v231) {
        unint64_t v231 = v232 >> 1;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        int v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v233);
        unint64_t v229 = *v49;
        uint64_t v212 = v49[1];
      }
      else
      {
        int v234 = 0;
      }
      int v243 = &v234[4 * v230];
      int v244 = &v234[4 * v233];
      *(_DWORD *)int v243 = 12;
      unint64_t v237 = v243 + 4;
      while (v212 != v229)
      {
        int v245 = *((_DWORD *)v212 - 1);
        v212 -= 4;
        *((_DWORD *)v243 - 1) = v245;
        v243 -= 4;
      }
      goto LABEL_285;
    }
    goto LABEL_322;
  }
LABEL_268:
  *(_DWORD *)uint64_t v212 = 12;
  unint64_t v237 = v212 + 4;
LABEL_287:
  v49[1] = v237;
LABEL_288:
  if (v289)
  {
    float64x2_t v290 = v289;
    operator delete(v289);
  }
}

void geom_dop26_polyhedron_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float32x4_t a5)
{
  float32x4_t v11 = a5;
  uint64_t v8 = geom::collection_to_vector<float>(a2);
  unint64_t v9 = (unint64_t *)geom::collection_to_vector<float>(a3);
  float32x4_t v10 = (char **)geom::collection_to_vector<float>(a4);
  geom::dop<(unsigned char)26,float>::compute_polyhedron(a1, &v11, v8, v9, v10);
}

void geom::dop<(unsigned char)26,float>::compute_polyhedron(uint64_t a1, float32x4_t *a2, uint64_t a3, unint64_t *a4, char **a5)
{
  uint64_t v6 = 0;
  v291[14] = *MEMORY[0x263EF8340];
  *(void *)(a3 + 8) = *(void *)a3;
  a4[1] = *a4;
  a5[1] = *a5;
  float32x4_t v7 = *a2;
  do
  {
    float32x4_t v8 = vmulq_f32(geom::kdop_axes<(unsigned char)26,float>[v6], v7);
    v8.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v8, 2), vaddq_f32(v8, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v8.f32, 1))).f32[0];
    unint64_t v9 = (float *)(a1 + 4 * v6);
    *((float *)&v291[7] + v6 + 1) = *v9 - v8.f32[0];
    *((float *)&v291[1] + v6++) = v9[16] - v8.f32[0];
  }
  while (v6 != 13);
  std::vector<int> __p = 0;
  float64x2_t v290 = 0;
  v291[0] = 0;
  _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE7reserveEm(&__p, 0x1AuLL);
  uint64_t v11 = 0;
  uint64_t v12 = -1;
  uint64_t v13 = -1;
  do
  {
    float v14 = *((float *)&v291[7] + v11 + 1);
    v10.i32[0] = *((_DWORD *)&v291[1] + v11);
    if (v14 == v10.f32[0])
    {
      uint64_t v12 = v11;
    }
    else
    {
      uint64_t v15 = v12;
      float v16 = fabsf(v14);
      float v17 = fabsf(v10.f32[0]);
      BOOL v18 = v16 == INFINITY || v17 == INFINITY;
      if (v18 || (uint64_t v12 = v11, vabds_f32(v14, v10.f32[0]) >= (float)((float)((float)(v16 + v17) + 1.0) * 0.00001)))
      {
        float32x4_t v19 = geom::kdop_axes<(unsigned char)26,float>[v11];
        float32x4_t v20 = vdivq_f32(v19, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 0));
        float64x2_t v21 = v290;
        if ((unint64_t)v290 >= v291[0])
        {
          uint64_t v23 = ((char *)v290 - (unsigned char *)__p) >> 4;
          if ((unint64_t)(v23 + 1) >> 60) {
            goto LABEL_322;
          }
          float32x4_t v278 = geom::kdop_axes<(unsigned char)26,float>[v11];
          unint64_t v24 = (uint64_t)(v291[0] - (void)__p) >> 3;
          if (v24 <= v23 + 1) {
            unint64_t v24 = v23 + 1;
          }
          if (v291[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v25 = v24;
          }
          if (v25)
          {
            float32x4_t v275 = v20;
            int64x2_t v26 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v291, v25);
            float32x4_t v20 = v275;
          }
          else
          {
            int64x2_t v26 = 0;
          }
          double v27 = (float32x4_t *)&v26[16 * v23];
          *double v27 = v20;
          float64x2_t v22 = v27 + 1;
          uint64_t v29 = (float32x4_t *)__p;
          float64x2_t v28 = v290;
          if (v290 != __p)
          {
            do
            {
              float32x4_t v30 = v28[-1];
              --v28;
              v27[-1] = v30;
              --v27;
            }
            while (v28 != v29);
            float64x2_t v28 = (float32x4_t *)__p;
          }
          std::vector<int> __p = v27;
          float64x2_t v290 = v22;
          v291[0] = &v26[16 * v25];
          if (v28) {
            operator delete(v28);
          }
          float32x4_t v19 = v278;
        }
        else
        {
          *float64x2_t v290 = v20;
          float64x2_t v22 = v21 + 1;
        }
        float64x2_t v290 = v22;
        float64x2_t v31 = (const float *)&v291[7] + v11 + 1;
        float32x4_t v32 = vld1q_dup_f32(v31);
        float32x4_t v10 = vdivq_f32(v19, v32);
        if ((unint64_t)v22 >= v291[0])
        {
          uint64_t v34 = ((char *)v22 - (unsigned char *)__p) >> 4;
          if ((unint64_t)(v34 + 1) >> 60) {
            goto LABEL_322;
          }
          unint64_t v35 = (uint64_t)(v291[0] - (void)__p) >> 3;
          if (v35 <= v34 + 1) {
            unint64_t v35 = v34 + 1;
          }
          if (v291[0] - (void)__p >= 0x7FFFFFFFFFFFFFF0uLL) {
            unint64_t v36 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v36 = v35;
          }
          if (v36)
          {
            float32x4_t v279 = v10;
            float64x2_t v37 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v291, v36);
            float32x4_t v10 = v279;
          }
          else
          {
            float64x2_t v37 = 0;
          }
          float64x2_t v38 = (float32x4_t *)&v37[16 * v34];
          float32x4_t *v38 = v10;
          unint64_t v33 = v38 + 1;
          float32x4_t v40 = (float32x4_t *)__p;
          float32x4_t v39 = v290;
          if (v290 != __p)
          {
            do
            {
              float32x4_t v41 = v39[-1];
              --v39;
              v10.i32[1] = v41.i32[1];
              v38[-1] = v41;
              --v38;
            }
            while (v39 != v40);
            float32x4_t v39 = (float32x4_t *)__p;
          }
          std::vector<int> __p = v38;
          float64x2_t v290 = v33;
          v291[0] = &v37[16 * v36];
          if (v39) {
            operator delete(v39);
          }
        }
        else
        {
          *float64x2_t v22 = v10;
          unint64_t v33 = v22 + 1;
        }
        float64x2_t v290 = v33;
        uint64_t v13 = v11;
        uint64_t v12 = v15;
      }
    }
    ++v11;
  }
  while (v11 != 13);
  float32x4_t v42 = (float32x4_t *)__p;
  uint64_t v43 = ((char *)v290 - (unsigned char *)__p) >> 4;
  if (v43)
  {
    if (v43 != 2)
    {
      if ((unint64_t)((char *)v290 - (unsigned char *)__p) > 0x19F)
      {
        geom::half_plane_intersection_3<float>(0x1AuLL, (float32x4_t *)__p, (char **)a3, a4, a5);
        float32x2_t v69 = a2;
      }
      else
      {
        *(void *)std::vector<int>::value_type __x = 0;
        float64x2_t v287 = 0;
        float64x2_t v288 = 0;
        float32x4_t v53 = geom::kdop_axes<(unsigned char)26,float>[v12];
        float v54 = COERCE_FLOAT(geom::kdop_axes<(unsigned char)26,float>[v12].i64[1]);
        float v55 = fabsf(v54);
        LODWORD(v56) = HIDWORD(geom::kdop_axes<(unsigned char)26,float>[v12].i64[0]);
        float v57 = -v54;
        if (v55 <= 0.00000011921)
        {
          float32x4_t v58 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v56), (int32x4_t)v53);
        }
        else
        {
          v58.i32[0] = 0;
          v58.f32[1] = v57;
          v58.i64[1] = v53.u32[1];
        }
        int32x4_t v70 = (int32x4_t)vmulq_f32(v58, v58);
        v70.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v70, 2), vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1))).u32[0];
        float32x2_t v71 = vrsqrte_f32((float32x2_t)v70.u32[0]);
        float32x2_t v72 = vmul_f32(v71, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v71, v71)));
        LODWORD(v73) = vmul_f32(v72, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v72, v72))).u32[0];
        if (v55 <= 0.00000011921)
        {
          float32x4_t v74 = (float32x4_t)vtrn1q_s32((int32x4_t)COERCE_UNSIGNED_INT(-v56), (int32x4_t)v53);
        }
        else
        {
          v74.i32[0] = 0;
          v74.f32[1] = v57;
          v74.i64[1] = v53.u32[1];
        }
        int32x4_t v75 = (int32x4_t)vmulq_f32(v74, v74);
        v75.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), vadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1))).u32[0];
        float32x4_t v281 = vmulq_n_f32(v58, v73);
        float32x2_t v76 = vrsqrte_f32((float32x2_t)v75.u32[0]);
        float32x2_t v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v76, v76)));
        float32x4_t v78 = vmulq_n_f32(v74, vmul_f32(v77, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(v77, v77))).f32[0]);
        float32x4_t v269 = vnegq_f32(v53);
        float32x4_t v270 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL);
        float32x4_t v79 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL), v269), v78, v270);
        float32x4_t v80 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), (int8x16_t)v79, 0xCuLL);
        int32x4_t v81 = (int32x4_t)vmulq_f32(v79, v79);
        v81.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v81.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v81, 2), *(float32x2_t *)v81.i8)).u32[0];
        float32x2_t v82 = vrsqrte_f32((float32x2_t)v81.u32[0]);
        float32x2_t v83 = vmul_f32(v82, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v82, v82)));
        float32x4_t v277 = vmulq_n_f32(v80, vmul_f32(v83, vrsqrts_f32((float32x2_t)v81.u32[0], vmul_f32(v83, v83))).f32[0]);
        if (v290 == __p)
        {
          uint64_t v116 = 0;
          unint64_t v107 = 0;
        }
        else
        {
          unint64_t v84 = 0;
          float32x2_t v85 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v53.f32, 1);
          float32x2_t v86 = (float32x2_t)vdup_laneq_s32((int32x4_t)v53, 2);
          int32x4_t v267 = vdupq_laneq_s32((int32x4_t)v53, 2);
          int32x2_t v268 = (int32x2_t)vextq_s8((int8x16_t)v53, (int8x16_t)v53, 8uLL).u64[0];
          float32x4_t v266 = geom::kdop_axes<(unsigned char)26,float>[v12];
          do
          {
            float32x4_t v87 = v42[v84];
            float32x4_t v88 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v87, (int32x4_t)v87), (int8x16_t)v87, 0xCuLL), v269), v87, v270);
            float32x4_t v89 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v88, (int32x4_t)v88), (int8x16_t)v88, 0xCuLL);
            int32x4_t v90 = (int32x4_t)vmulq_f32(v88, v88);
            v90.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v90.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v90, 2), *(float32x2_t *)v90.i8)).u32[0];
            float32x2_t v91 = vrsqrte_f32((float32x2_t)v90.u32[0]);
            float32x2_t v92 = vmul_f32(v91, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v91, v91)));
            float32x4_t v93 = vmulq_n_f32(v89, vmul_f32(v92, vrsqrts_f32((float32x2_t)v90.u32[0], vmul_f32(v92, v92))).f32[0]);
            int32x4_t v94 = vzip1q_s32((int32x4_t)v53, (int32x4_t)v87);
            float32x2_t v95 = (float32x2_t)vextq_s8((int8x16_t)v94, (int8x16_t)v94, 8uLL).u64[0];
            float32x2_t v96 = (float32x2_t)vzip1_s32(v268, (int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v87, (int8x16_t)v87, 8uLL));
            float32x4_t v272 = (float32x4_t)vzip1q_s32(vzip1q_s32(v94, v267), vdupq_laneq_s32(v94, 2));
            float32x4_t v273 = v93;
            *(float32x2_t *)v90.i8 = vmla_laneq_f32(vmla_lane_f32(vmul_n_f32(*(float32x2_t *)v94.i8, v87.f32[0]), v95, *(float32x2_t *)v87.f32, 1), v96, v87, 2);
            v87.i32[1] = vdupq_laneq_s32(v94, 3).i32[1];
            float32x4_t v271 = v87;
            *(float32x2_t *)v87.f32 = vmla_f32(vmla_f32(vmul_n_f32(*(float32x2_t *)v94.i8, v53.f32[0]), v85, v95), v86, v96);
            simd_float2x2 v97 = __invert_f2((simd_float2x2)v87);
            float32x4_t v98 = vmlaq_lane_f32(vmulq_n_f32(v272, v97.columns[1].f32[0]), v271, (float32x2_t)v97.columns[1], 1);
            int32x4_t v99 = (int32x4_t)vmulq_f32(v281, v273);
            int32x4_t v100 = (int32x4_t)vmulq_f32(v277, v273);
            *(int32x2_t *)v99.i8 = vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v99, 2), vadd_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v99.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v100, 2), vadd_f32(*(float32x2_t *)v100.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v100.i8, 1))));
            float32x2_t v101 = vmul_f32(*(float32x2_t *)v99.i8, *(float32x2_t *)v99.i8);
            v101.i32[0] = vadd_f32(v101, (float32x2_t)vdup_lane_s32((int32x2_t)v101, 1)).u32[0];
            *(float32x2_t *)v100.i8 = vrsqrte_f32((float32x2_t)v101.u32[0]);
            *(float32x2_t *)v100.i8 = vmul_f32(*(float32x2_t *)v100.i8, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8)));
            int32x2_t v102 = (int32x2_t)vmul_f32(*(float32x2_t *)v100.i8, vrsqrts_f32((float32x2_t)v101.u32[0], vmul_f32(*(float32x2_t *)v100.i8, *(float32x2_t *)v100.i8)));
            *(float32x2_t *)v99.i8 = vmul_n_f32(*(float32x2_t *)v99.i8, *(float *)v102.i32);
            int32x4_t v103 = (int32x4_t)vmulq_f32(v281, v98);
            *(float *)v102.i32 = -*(float *)&v99.i32[1];
            int32x4_t v104 = (int32x4_t)vmulq_f32(v277, v98);
            *(int32x2_t *)v99.i8 = vzip1_s32(v102, *(int32x2_t *)v99.i8);
            *(float32x2_t *)v104.i8 = vmul_f32((float32x2_t)vzip1_s32((int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v103, 2), vadd_f32(*(float32x2_t *)v103.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v103.i8, 1))), (int32x2_t)vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v104, 2), vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)))), *(float32x2_t *)v99.i8);
            float32x2_t v105 = vdiv_f32(*(float32x2_t *)v99.i8, (float32x2_t)vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)), 0));
            uint64_t v106 = v287;
            if (v287 >= v288)
            {
              uint64_t v108 = ((uint64_t)v287 - *(void *)__x) >> 3;
              if ((unint64_t)(v108 + 1) >> 61) {
                goto LABEL_322;
              }
              unint64_t v109 = ((uint64_t)v288 - *(void *)__x) >> 2;
              if (v109 <= v108 + 1) {
                unint64_t v109 = v108 + 1;
              }
              if ((unint64_t)v288 - *(void *)__x >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v110 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v110 = v109;
              }
              if (v110) {
                int v111 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<double>>((uint64_t)&v288, v110);
              }
              else {
                int v111 = 0;
              }
              unsigned int v112 = (float32x2_t *)&v111[8 * v108];
              *unsigned int v112 = v105;
              unint64_t v107 = v112 + 1;
              uint64_t v114 = *(float32x2_t **)__x;
              float32x2_t v113 = v287;
              if (v287 != *(float32x2_t **)__x)
              {
                do
                {
                  float32x2_t v115 = v113[-1];
                  --v113;
                  v112[-1] = v115;
                  --v112;
                }
                while (v113 != v114);
                float32x2_t v113 = *(float32x2_t **)__x;
              }
              *(void *)std::vector<int>::value_type __x = v112;
              float64x2_t v287 = v107;
              float64x2_t v288 = (float32x2_t *)&v111[8 * v110];
              if (v113) {
                operator delete(v113);
              }
            }
            else
            {
              *float64x2_t v287 = v105;
              unint64_t v107 = v106 + 1;
            }
            float32x4_t v53 = v266;
            float64x2_t v287 = v107;
            ++v84;
            float32x4_t v42 = (float32x4_t *)__p;
          }
          while (v84 < ((char *)v290 - (unsigned char *)__p) >> 4);
          uint64_t v116 = *(void *)__x;
        }
        float64x2_t v283 = 0;
        uint64_t v284 = 0;
        uint64_t v285 = 0;
        geom::half_plane_intersection_2<float>(((uint64_t)v107 - v116) >> 3, v116, (uint64_t)&v283);
        float64x2_t v145 = (float32x2_t *)v283;
        float64x2_t v146 = v284;
        float32x4_t v147 = *(float32x4_t **)(a3 + 8);
        if (v283 != v284)
        {
          uint64_t v148 = (void *)(a3 + 16);
          do
          {
            float32x4_t v149 = vmlaq_n_f32(vmulq_lane_f32(v277, *v145, 1), v281, COERCE_FLOAT(*v145));
            if ((unint64_t)v147 >= *v148)
            {
              uint64_t v150 = ((uint64_t)v147 - *(void *)a3) >> 4;
              if ((unint64_t)(v150 + 1) >> 60) {
                goto LABEL_322;
              }
              uint64_t v151 = *v148 - *(void *)a3;
              uint64_t v152 = v151 >> 3;
              if (v151 >> 3 <= (unint64_t)(v150 + 1)) {
                uint64_t v152 = v150 + 1;
              }
              if ((unint64_t)v151 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v153 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v153 = v152;
              }
              if (v153)
              {
                float32x4_t v274 = v149;
                unsigned int v154 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v153);
                float32x4_t v149 = v274;
              }
              else
              {
                unsigned int v154 = 0;
              }
              uint64_t v155 = (float32x4_t *)&v154[16 * v150];
              *uint64_t v155 = v149;
              float32x4_t v147 = v155 + 1;
              uint64_t v157 = *(char **)a3;
              float32x4_t v156 = *(char **)(a3 + 8);
              if (v156 != *(char **)a3)
              {
                do
                {
                  float32x4_t v158 = *((float32x4_t *)v156 - 1);
                  v156 -= 16;
                  v155[-1] = v158;
                  --v155;
                }
                while (v156 != v157);
                float32x4_t v156 = *(char **)a3;
              }
              *(void *)a3 = v155;
              *(void *)(a3 + 8) = v147;
              *(void *)(a3 + 16) = &v154[16 * v153];
              if (v156) {
                operator delete(v156);
              }
            }
            else
            {
              *v147++ = v149;
            }
            *(void *)(a3 + 8) = v147;
            ++v145;
          }
          while (v145 != v146);
        }
        std::vector<unsigned int>::resize((std::vector<int> *)a4, ((uint64_t)v147 - *(void *)a3) >> 3);
        uint64_t v159 = *(void *)(a3 + 8) - *(void *)a3;
        if (v159)
        {
          uint64_t v160 = 0;
          uint64_t v161 = (int *)*a4;
          uint64_t v162 = 4 * (v159 >> 4);
          uint64_t v163 = v162;
          do
          {
            v161[v160] = v160;
            ++v160;
            v163 -= 4;
          }
          while (v163);
          unint64_t v164 = (_DWORD *)(a4[1] - 4);
          do
          {
            int v165 = *v161++;
            *v164-- = v165;
            v162 -= 4;
          }
          while (v162);
        }
        unint64_t v166 = (unint64_t)v159 >> 4;
        float64x2_t v167 = a5[2];
        float64x2_t v168 = a5[1];
        if (v168 >= v167)
        {
          unint64_t v170 = *a5;
          uint64_t v171 = (v168 - *a5) >> 2;
          unint64_t v172 = v171 + 1;
          if ((unint64_t)(v171 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v173 = v167 - v170;
          if (v173 >> 1 > v172) {
            unint64_t v172 = v173 >> 1;
          }
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v174 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v174 = v172;
          }
          if (v174)
          {
            float64x2_t v175 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v174);
            unint64_t v170 = *a5;
            float64x2_t v168 = a5[1];
          }
          else
          {
            float64x2_t v175 = 0;
          }
          uint64_t v247 = &v175[4 * v171];
          float64x2_t v167 = &v175[4 * v174];
          *(_DWORD *)uint64_t v247 = v166;
          uint64_t v169 = v247 + 4;
          while (v168 != v170)
          {
            int v248 = *((_DWORD *)v168 - 1);
            v168 -= 4;
            *((_DWORD *)v247 - 1) = v248;
            v247 -= 4;
          }
          *a5 = v247;
          a5[1] = v169;
          a5[2] = v167;
          if (v170)
          {
            operator delete(v170);
            float64x2_t v167 = a5[2];
          }
        }
        else
        {
          *(_DWORD *)float64x2_t v168 = v166;
          uint64_t v169 = v168 + 4;
        }
        a5[1] = v169;
        uint64_t v249 = ((*(void *)(a3 + 8) - *(void *)a3) >> 3) & 0xFFFFFFFELL;
        if (v169 >= v167)
        {
          unint64_t v251 = *a5;
          uint64_t v252 = (v169 - *a5) >> 2;
          unint64_t v253 = v252 + 1;
          if ((unint64_t)(v252 + 1) >> 62) {
            goto LABEL_322;
          }
          uint64_t v254 = v167 - v251;
          if (v254 >> 1 > v253) {
            unint64_t v253 = v254 >> 1;
          }
          if ((unint64_t)v254 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v255 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v255 = v253;
          }
          if (v255)
          {
            float64x2_t v256 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v255);
            unint64_t v251 = *a5;
            uint64_t v169 = a5[1];
          }
          else
          {
            float64x2_t v256 = 0;
          }
          int v257 = &v256[4 * v252];
          long long v258 = &v256[4 * v255];
          *(_DWORD *)int v257 = v249;
          uint64_t v250 = v257 + 4;
          if (v169 == v251)
          {
            float32x2_t v69 = a2;
          }
          else
          {
            float32x2_t v69 = a2;
            do
            {
              int v259 = *((_DWORD *)v169 - 1);
              v169 -= 4;
              *((_DWORD *)v257 - 1) = v259;
              v257 -= 4;
            }
            while (v169 != v251);
          }
          *a5 = v257;
          a5[1] = v250;
          a5[2] = v258;
          if (v251) {
            operator delete(v251);
          }
        }
        else
        {
          *(_DWORD *)uint64_t v169 = v249;
          uint64_t v250 = v169 + 4;
          float32x2_t v69 = a2;
        }
        a5[1] = v250;
        if (v283)
        {
          uint64_t v284 = (float32x2_t *)v283;
          operator delete(v283);
        }
        if (*(void *)__x)
        {
          float64x2_t v287 = *(float32x2_t **)__x;
          operator delete(*(void **)__x);
        }
      }
      float64x2_t v260 = *(float32x4_t **)a3;
      float64x2_t v261 = *(float32x4_t **)(a3 + 8);
      while (v260 != v261)
      {
        float32x4_t *v260 = vaddq_f32(*v69, *v260);
        ++v260;
      }
      goto LABEL_288;
    }
    float32x4_t v44 = geom::kdop_axes<(unsigned char)26,float>[v13];
    float32x4_t v45 = vmulq_n_f32(v44, *(float *)(a1 + 4 * v13));
    unint64_t v46 = *(void *)(a3 + 16);
    float64x2_t v47 = *(float32x4_t **)(a3 + 8);
    if ((unint64_t)v47 >= v46)
    {
      uint64_t v59 = ((uint64_t)v47 - *(void *)a3) >> 4;
      float64x2_t v49 = a5;
      if ((unint64_t)(v59 + 1) >> 60) {
        goto LABEL_322;
      }
      float32x4_t v280 = geom::kdop_axes<(unsigned char)26,float>[v13];
      uint64_t v60 = v46 - *(void *)a3;
      uint64_t v61 = v60 >> 3;
      if (v60 >> 3 <= (unint64_t)(v59 + 1)) {
        uint64_t v61 = v59 + 1;
      }
      if ((unint64_t)v60 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v62 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v62 = v61;
      }
      if (v62)
      {
        float32x4_t v276 = v45;
        uint64_t v63 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v62);
        float32x4_t v45 = v276;
      }
      else
      {
        uint64_t v63 = 0;
      }
      std::vector<int> v117 = (float32x4_t *)&v63[16 * v59];
      std::vector<int> v118 = &v63[16 * v62];
      *std::vector<int> v117 = v45;
      unint64_t v48 = v117 + 1;
      float32x4_t v120 = *(char **)a3;
      float32x4_t v119 = *(char **)(a3 + 8);
      if (v119 != *(char **)a3)
      {
        do
        {
          float32x4_t v121 = *((float32x4_t *)v119 - 1);
          v119 -= 16;
          v117[-1] = v121;
          --v117;
        }
        while (v119 != v120);
        float32x4_t v119 = *(char **)a3;
      }
      *(void *)a3 = v117;
      *(void *)(a3 + 8) = v48;
      *(void *)(a3 + 16) = v118;
      if (v119) {
        operator delete(v119);
      }
      float32x4_t v44 = v280;
    }
    else
    {
      *float64x2_t v47 = v45;
      unint64_t v48 = v47 + 1;
      float64x2_t v49 = a5;
    }
    *(void *)(a3 + 8) = v48;
    float32x4_t v122 = vmulq_n_f32(v44, *(float *)(a1 + 4 * v13 + 64));
    unint64_t v123 = *(void *)(a3 + 16);
    if ((unint64_t)v48 >= v123)
    {
      uint64_t v125 = ((uint64_t)v48 - *(void *)a3) >> 4;
      if ((unint64_t)(v125 + 1) >> 60) {
        goto LABEL_322;
      }
      uint64_t v126 = v123 - *(void *)a3;
      uint64_t v127 = v126 >> 3;
      if (v126 >> 3 <= (unint64_t)(v125 + 1)) {
        uint64_t v127 = v125 + 1;
      }
      if ((unint64_t)v126 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v128 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v128 = v127;
      }
      if (v128)
      {
        float32x4_t v282 = v122;
        float64x2_t v129 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v128);
        float32x4_t v122 = v282;
      }
      else
      {
        float64x2_t v129 = 0;
      }
      float64x2_t v176 = (float32x4_t *)&v129[16 * v125];
      float64x2_t v177 = &v129[16 * v128];
      *float64x2_t v176 = v122;
      f32 = (_OWORD *)v176[1].f32;
      float64x2_t v179 = *(char **)a3;
      float32x4_t v178 = *(char **)(a3 + 8);
      if (v178 != *(char **)a3)
      {
        do
        {
          float32x4_t v180 = *((float32x4_t *)v178 - 1);
          v178 -= 16;
          v176[-1] = v180;
          --v176;
        }
        while (v178 != v179);
        float32x4_t v178 = *(char **)a3;
      }
      *(void *)a3 = v176;
      *(void *)(a3 + 8) = f32;
      *(void *)(a3 + 16) = v177;
      if (v178) {
        operator delete(v178);
      }
    }
    else
    {
      *unint64_t v48 = v122;
      f32 = (_OWORD *)v48[1].f32;
    }
    *(void *)(a3 + 8) = f32;
    __x[0] = 0;
    std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
    float64x2_t v181 = (_DWORD *)*a4;
    v181[10] = 1;
    v181[7] = 1;
    v181[4] = 1;
    float64x2_t v183 = v49 + 2;
    float64x2_t v182 = v49[2];
    float64x2_t v184 = v49[1];
    if (v184 >= v182)
    {
      unint64_t v186 = *v49;
      uint64_t v187 = (v184 - *v49) >> 2;
      unint64_t v188 = v187 + 1;
      if ((unint64_t)(v187 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v189 = v182 - v186;
      if (v189 >> 1 > v188) {
        unint64_t v188 = v189 >> 1;
      }
      if ((unint64_t)v189 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v190 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v190 = v188;
      }
      if (v190)
      {
        int v191 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v190);
        unint64_t v186 = *v49;
        float64x2_t v184 = v49[1];
      }
      else
      {
        int v191 = 0;
      }
      float64x2_t v201 = &v191[4 * v187];
      float64x2_t v182 = &v191[4 * v190];
      *(_DWORD *)float64x2_t v201 = 3;
      uint64_t v185 = v201 + 4;
      while (v184 != v186)
      {
        int v202 = *((_DWORD *)v184 - 1);
        v184 -= 4;
        *((_DWORD *)v201 - 1) = v202;
        v201 -= 4;
      }
      *float64x2_t v49 = v201;
      v49[1] = v185;
      _OWORD v49[2] = v182;
      if (v186)
      {
        operator delete(v186);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v184 = 3;
      uint64_t v185 = v184 + 4;
    }
    v49[1] = v185;
    if (v185 >= v182)
    {
      unint64_t v204 = *v49;
      uint64_t v205 = (v185 - *v49) >> 2;
      unint64_t v206 = v205 + 1;
      if ((unint64_t)(v205 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v207 = v182 - v204;
      if (v207 >> 1 > v206) {
        unint64_t v206 = v207 >> 1;
      }
      if ((unint64_t)v207 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v208 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v208 = v206;
      }
      if (v208)
      {
        int v209 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v208);
        unint64_t v204 = *v49;
        uint64_t v185 = v49[1];
      }
      else
      {
        int v209 = 0;
      }
      uint64_t v219 = &v209[4 * v205];
      float64x2_t v182 = &v209[4 * v208];
      *(_DWORD *)uint64_t v219 = 6;
      uint64_t v203 = v219 + 4;
      while (v185 != v204)
      {
        int v220 = *((_DWORD *)v185 - 1);
        v185 -= 4;
        *((_DWORD *)v219 - 1) = v220;
        v219 -= 4;
      }
      *float64x2_t v49 = v219;
      v49[1] = v203;
      _OWORD v49[2] = v182;
      if (v204)
      {
        operator delete(v204);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v185 = 6;
      uint64_t v203 = v185 + 4;
    }
    v49[1] = v203;
    if (v203 >= v182)
    {
      unint64_t v221 = *v49;
      uint64_t v222 = (v203 - *v49) >> 2;
      unint64_t v223 = v222 + 1;
      if ((unint64_t)(v222 + 1) >> 62) {
        goto LABEL_322;
      }
      uint64_t v224 = v182 - v221;
      if (v224 >> 1 > v223) {
        unint64_t v223 = v224 >> 1;
      }
      if ((unint64_t)v224 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v225 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v225 = v223;
      }
      if (v225)
      {
        int v226 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v225);
        unint64_t v221 = *v49;
        uint64_t v203 = v49[1];
      }
      else
      {
        int v226 = 0;
      }
      float64x2_t v235 = &v226[4 * v222];
      float64x2_t v182 = &v226[4 * v225];
      *(_DWORD *)float64x2_t v235 = 9;
      uint64_t v212 = v235 + 4;
      while (v203 != v221)
      {
        int v236 = *((_DWORD *)v203 - 1);
        v203 -= 4;
        *((_DWORD *)v235 - 1) = v236;
        v235 -= 4;
      }
      *float64x2_t v49 = v235;
      v49[1] = v212;
      _OWORD v49[2] = v182;
      if (v221)
      {
        operator delete(v221);
        float64x2_t v182 = *v183;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v203 = 9;
      uint64_t v212 = v203 + 4;
    }
    v49[1] = v212;
    if (v212 < v182) {
      goto LABEL_268;
    }
    unint64_t v229 = *v49;
    uint64_t v238 = (v212 - *v49) >> 2;
    unint64_t v239 = v238 + 1;
    if (!((unint64_t)(v238 + 1) >> 62))
    {
      uint64_t v240 = v182 - v229;
      if (v240 >> 1 > v239) {
        unint64_t v239 = v240 >> 1;
      }
      if ((unint64_t)v240 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v241 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v241 = v239;
      }
      if (v241)
      {
        float64x2_t v242 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v241);
        unint64_t v229 = *v49;
        uint64_t v212 = v49[1];
      }
      else
      {
        float64x2_t v242 = 0;
      }
      int v243 = &v242[4 * v238];
      int v244 = &v242[4 * v241];
      *(_DWORD *)int v243 = 12;
      unint64_t v237 = v243 + 4;
      while (v212 != v229)
      {
        int v246 = *((_DWORD *)v212 - 1);
        v212 -= 4;
        *((_DWORD *)v243 - 1) = v246;
        v243 -= 4;
      }
LABEL_285:
      *float64x2_t v49 = v243;
      v49[1] = v237;
      _OWORD v49[2] = v244;
      if (v229) {
        operator delete(v229);
      }
      goto LABEL_287;
    }
LABEL_322:
    abort();
  }
  unint64_t v50 = *(void *)(a3 + 16);
  float32x4_t v51 = *(float32x4_t **)(a3 + 8);
  if ((unint64_t)v51 >= v50)
  {
    uint64_t v64 = ((uint64_t)v51 - *(void *)a3) >> 4;
    float64x2_t v49 = a5;
    if ((unint64_t)(v64 + 1) >> 60) {
      goto LABEL_322;
    }
    uint64_t v65 = v50 - *(void *)a3;
    uint64_t v66 = v65 >> 3;
    if (v65 >> 3 <= (unint64_t)(v64 + 1)) {
      uint64_t v66 = v64 + 1;
    }
    if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v67 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v67 = v66;
    }
    if (v67) {
      int32x4_t v68 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m(a3 + 16, v67);
    }
    else {
      int32x4_t v68 = 0;
    }
    float64x2_t v130 = (float32x4_t *)&v68[16 * v64];
    float64x2_t v131 = &v68[16 * v67];
    *float64x2_t v130 = *a2;
    float v52 = (_OWORD *)v130[1].f32;
    float64x2_t v133 = *(char **)a3;
    float32x4_t v132 = *(char **)(a3 + 8);
    if (v132 != *(char **)a3)
    {
      do
      {
        float32x4_t v134 = *((float32x4_t *)v132 - 1);
        v132 -= 16;
        v130[-1] = v134;
        --v130;
      }
      while (v132 != v133);
      float32x4_t v132 = *(char **)a3;
    }
    *(void *)a3 = v130;
    *(void *)(a3 + 8) = v52;
    *(void *)(a3 + 16) = v131;
    if (v132) {
      operator delete(v132);
    }
  }
  else
  {
    float64x2_t v49 = a5;
    *float32x4_t v51 = *a2;
    float v52 = (_OWORD *)v51[1].f32;
  }
  *(void *)(a3 + 8) = v52;
  __x[0] = 0;
  std::vector<unsigned int>::resize((std::vector<int> *)a4, 0xCuLL, __x);
  int v136 = v49 + 2;
  int v135 = v49[2];
  unsigned int v137 = v49[1];
  if (v137 >= v135)
  {
    unint64_t v139 = *v49;
    uint64_t v140 = (v137 - *v49) >> 2;
    unint64_t v141 = v140 + 1;
    if ((unint64_t)(v140 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v142 = v135 - v139;
    if (v142 >> 1 > v141) {
      unint64_t v141 = v142 >> 1;
    }
    if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v143 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v143 = v141;
    }
    if (v143)
    {
      float64x2_t v144 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v143);
      unint64_t v139 = *v49;
      unsigned int v137 = v49[1];
    }
    else
    {
      float64x2_t v144 = 0;
    }
    float64x2_t v192 = &v144[4 * v140];
    int v135 = &v144[4 * v143];
    *(_DWORD *)float64x2_t v192 = 3;
    uint64_t v138 = v192 + 4;
    while (v137 != v139)
    {
      int v193 = *((_DWORD *)v137 - 1);
      v137 -= 4;
      *((_DWORD *)v192 - 1) = v193;
      v192 -= 4;
    }
    *float64x2_t v49 = v192;
    v49[1] = v138;
    _OWORD v49[2] = v135;
    if (v139)
    {
      operator delete(v139);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)unsigned int v137 = 3;
    uint64_t v138 = v137 + 4;
  }
  v49[1] = v138;
  if (v138 >= v135)
  {
    unint64_t v195 = *v49;
    uint64_t v196 = (v138 - *v49) >> 2;
    unint64_t v197 = v196 + 1;
    if ((unint64_t)(v196 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v198 = v135 - v195;
    if (v198 >> 1 > v197) {
      unint64_t v197 = v198 >> 1;
    }
    if ((unint64_t)v198 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v199 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v199 = v197;
    }
    if (v199)
    {
      int v200 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v199);
      unint64_t v195 = *v49;
      uint64_t v138 = v49[1];
    }
    else
    {
      int v200 = 0;
    }
    float64x2_t v210 = &v200[4 * v196];
    int v135 = &v200[4 * v199];
    *(_DWORD *)float64x2_t v210 = 6;
    uint64_t v194 = v210 + 4;
    while (v138 != v195)
    {
      int v211 = *((_DWORD *)v138 - 1);
      v138 -= 4;
      *((_DWORD *)v210 - 1) = v211;
      v210 -= 4;
    }
    *float64x2_t v49 = v210;
    v49[1] = v194;
    _OWORD v49[2] = v135;
    if (v195)
    {
      operator delete(v195);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v138 = 6;
    uint64_t v194 = v138 + 4;
  }
  v49[1] = v194;
  if (v194 >= v135)
  {
    unint64_t v213 = *v49;
    uint64_t v214 = (v194 - *v49) >> 2;
    unint64_t v215 = v214 + 1;
    if ((unint64_t)(v214 + 1) >> 62) {
      goto LABEL_322;
    }
    uint64_t v216 = v135 - v213;
    if (v216 >> 1 > v215) {
      unint64_t v215 = v216 >> 1;
    }
    if ((unint64_t)v216 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v217 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v217 = v215;
    }
    if (v217)
    {
      int v218 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v217);
      unint64_t v213 = *v49;
      uint64_t v194 = v49[1];
    }
    else
    {
      int v218 = 0;
    }
    float64x2_t v227 = &v218[4 * v214];
    int v135 = &v218[4 * v217];
    *(_DWORD *)float64x2_t v227 = 9;
    uint64_t v212 = v227 + 4;
    while (v194 != v213)
    {
      int v228 = *((_DWORD *)v194 - 1);
      v194 -= 4;
      *((_DWORD *)v227 - 1) = v228;
      v227 -= 4;
    }
    *float64x2_t v49 = v227;
    v49[1] = v212;
    _OWORD v49[2] = v135;
    if (v213)
    {
      operator delete(v213);
      int v135 = *v136;
    }
  }
  else
  {
    *(_DWORD *)uint64_t v194 = 9;
    uint64_t v212 = v194 + 4;
  }
  v49[1] = v212;
  if (v212 >= v135)
  {
    unint64_t v229 = *v49;
    uint64_t v230 = (v212 - *v49) >> 2;
    unint64_t v231 = v230 + 1;
    if (!((unint64_t)(v230 + 1) >> 62))
    {
      uint64_t v232 = v135 - v229;
      if (v232 >> 1 > v231) {
        unint64_t v231 = v232 >> 1;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        int v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v49 + 2), v233);
        unint64_t v229 = *v49;
        uint64_t v212 = v49[1];
      }
      else
      {
        int v234 = 0;
      }
      int v243 = &v234[4 * v230];
      int v244 = &v234[4 * v233];
      *(_DWORD *)int v243 = 12;
      unint64_t v237 = v243 + 4;
      while (v212 != v229)
      {
        int v245 = *((_DWORD *)v212 - 1);
        v212 -= 4;
        *((_DWORD *)v243 - 1) = v245;
        v243 -= 4;
      }
      goto LABEL_285;
    }
    goto LABEL_322;
  }
LABEL_268:
  *(_DWORD *)uint64_t v212 = 12;
  unint64_t v237 = v212 + 4;
LABEL_287:
  v49[1] = v237;
LABEL_288:
  if (__p)
  {
    float64x2_t v290 = (float32x4_t *)__p;
    operator delete(__p);
  }
}

void geom_dop6_polyhedron_3d(uint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float64x2_t v8 = a2[1];
  v12[0] = *a2;
  v12[1] = v8;
  unint64_t v9 = (char **)geom::collection_to_vector<float>(a3);
  float32x4_t v10 = (std::vector<int> *)geom::collection_to_vector<float>(a4);
  uint64_t v11 = (char **)geom::collection_to_vector<float>(a5);
  geom::dop<(unsigned char)6,double>::compute_polyhedron(a1, v12, v9, v10, v11);
}

void geom::dop<(unsigned char)6,double>::compute_polyhedron(uint64_t a1, float64x2_t *a2, char **a3, std::vector<int> *a4, char **a5)
{
  uint64_t v6 = 0;
  v344[7] = *MEMORY[0x263EF8340];
  a3[1] = *a3;
  a4->__end_ = a4->__begin_;
  a5[1] = *a5;
  float64x2_t v8 = *a2;
  float64x2_t v7 = a2[1];
  do
  {
    float64_t v9 = vmulq_f64(geom::kdop_axes<(unsigned char)6,double>[2 * v6 + 1], v7).f64[0]
       + vaddvq_f64(vmulq_f64(geom::kdop_axes<(unsigned char)6,double>[2 * v6], v8));
    float32x4_t v10 = (double *)(a1 + 8 * v6);
    *(double *)&v344[v6 + 4] = *v10 - v9;
    *(double *)&v344[++v6] = v10[4] - v9;
  }
  while (v6 != 3);
  float64x2_t v342 = 0;
  float64x2_t v343 = 0;
  v344[0] = 0;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm((void **)&v342, 6uLL);
  uint64_t v15 = 0;
  uint64_t v16 = -1;
  uint64_t v17 = -1;
  do
  {
    *(void *)&v13.f64[0] = v344[v15 + 4];
    *(void *)&v11.f64[0] = v344[v15 + 1];
    if (v13.f64[0] == v11.f64[0])
    {
      uint64_t v16 = v15;
    }
    else
    {
      uint64_t v18 = v16;
      uint64_t v16 = v15;
      if (vabdd_f64(v13.f64[0], v11.f64[0]) > 0.000001)
      {
        float32x4_t v19 = &geom::kdop_axes<(unsigned char)6,double>[2 * v15];
        int64x2_t v14 = *(int64x2_t *)v19;
        float64x2_t v20 = v19[1];
        float64x2_t v21 = vdivq_f64(v20, v11);
        int8x16_t v22 = (int8x16_t)vdivq_f64(*v19, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0));
        unint64_t v23 = vextq_s8(v22, v22, 8uLL).u64[0];
        unint64_t v25 = (float64x2_t *)v343;
        unint64_t v24 = v344[0];
        if ((unint64_t)v343 >= v344[0])
        {
          double v27 = v342;
          uint64_t v28 = ((char *)v343 - (char *)v342) >> 5;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59) {
            goto LABEL_314;
          }
          float64x2_t v320 = v20;
          int64x2_t v325 = v14;
          float64x2_t v330 = v13;
          uint64_t v30 = v344[0] - (void)v342;
          if ((uint64_t)(v344[0] - (void)v342) >> 4 > v29) {
            unint64_t v29 = v30 >> 4;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            float64x2_t v311 = v21;
            uint64_t v315 = v22.i64[0];
            unint64_t v309 = v23;
            float32x4_t v32 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v344, v31);
            unint64_t v23 = v309;
            float64x2_t v21 = v311;
            v22.i64[0] = v315;
            unint64_t v33 = v32;
            double v27 = v342;
            unint64_t v25 = (float64x2_t *)v343;
          }
          else
          {
            unint64_t v33 = 0;
          }
          v22.i64[1] = v23;
          uint64_t v34 = (int8x16_t *)&v33[32 * v28];
          *uint64_t v34 = v22;
          v34[1] = (int8x16_t)v21;
          unint64_t v35 = v34;
          while (v25 != v27)
          {
            float64x2_t v36 = v25[-2];
            float64x2_t v37 = v25[-1];
            v25 -= 2;
            v35[-2] = (int8x16_t)v36;
            v35[-1] = (int8x16_t)v37;
            v35 -= 2;
          }
          unint64_t v24 = (unint64_t)&v33[32 * v31];
          int64x2_t v26 = (float64x2_t *)&v34[2];
          float64x2_t v342 = (float64x2_t *)v35;
          float64x2_t v343 = v34 + 2;
          v344[0] = v24;
          if (v27)
          {
            operator delete(v27);
            unint64_t v24 = v344[0];
          }
          float64x2_t v13 = v330;
          float64x2_t v20 = v320;
          int64x2_t v14 = v325;
        }
        else
        {
          v22.i64[1] = v23;
          *float64x2_t v343 = v22;
          v25[1] = v21;
          int64x2_t v26 = v25 + 2;
        }
        float64x2_t v343 = (int8x16_t *)v26;
        float64x2_t v38 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v13.f64[0], 0);
        float64x2_t v13 = vdivq_f64(v20, v13);
        v14.i64[1] = vextq_s8((int8x16_t)v14, (int8x16_t)v14, 8uLL).u64[0];
        float64x2_t v11 = vdivq_f64((float64x2_t)v14, v38);
        int64x2_t v12 = (int64x2_t)vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL);
        if ((unint64_t)v26 >= v24)
        {
          float32x4_t v40 = v342;
          uint64_t v41 = ((char *)v26 - (char *)v342) >> 5;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v43 = v24 - (void)v342;
          if (v43 >> 4 > v42) {
            unint64_t v42 = v43 >> 4;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v44 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            float64x2_t v331 = v13;
            int64x2_t v321 = v12;
            float64_t v326 = v11.f64[0];
            float32x4_t v45 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v344, v44);
            int64x2_t v12 = v321;
            v11.f64[0] = v326;
            float64x2_t v13 = v331;
            unint64_t v46 = v45;
            float32x4_t v40 = v342;
            int64x2_t v26 = (float64x2_t *)v343;
          }
          else
          {
            unint64_t v46 = 0;
          }
          *(void *)&v11.f64[1] = v12.i64[0];
          float64x2_t v47 = (float64x2_t *)&v46[32 * v41];
          *float64x2_t v47 = v11;
          v47[1] = v13;
          unint64_t v48 = v47;
          while (v26 != v40)
          {
            float64x2_t v11 = v26[-2];
            int64x2_t v12 = (int64x2_t)v26[-1];
            v26 -= 2;
            v48[-2] = v11;
            v48[-1] = (float64x2_t)v12;
            v48 -= 2;
          }
          float32x4_t v39 = (int8x16_t *)&v47[2];
          float64x2_t v342 = v48;
          float64x2_t v343 = (int8x16_t *)&v47[2];
          v344[0] = &v46[32 * v44];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)&v11.f64[1] = v12.i64[0];
          *int64x2_t v26 = v11;
          v26[1] = v13;
          float32x4_t v39 = (int8x16_t *)&v26[2];
        }
        float64x2_t v343 = v39;
        uint64_t v17 = v15;
        uint64_t v16 = v18;
      }
    }
    ++v15;
  }
  while (v15 != 3);
  float64x2_t v49 = v342;
  uint64_t v50 = ((char *)v343 - (char *)v342) >> 5;
  if (!v50)
  {
    unint64_t v61 = (unint64_t)a3[2];
    unint64_t v62 = (float64x2_t *)a3[1];
    if ((unint64_t)v62 >= v61)
    {
      uint64_t v76 = ((char *)v62 - *a3) >> 5;
      unint64_t v77 = v76 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v76 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v78 = v61 - (void)*a3;
      if (v78 >> 4 > v77) {
        unint64_t v77 = v78 >> 4;
      }
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v79 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79) {
        float32x4_t v80 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v79);
      }
      else {
        float32x4_t v80 = 0;
      }
      float64x2_t v146 = (float64x2_t *)&v80[32 * v76];
      float32x4_t v147 = &v80[32 * v79];
      float64x2_t v148 = a2[1];
      *float64x2_t v146 = *a2;
      v146[1] = v148;
      uint64_t v64 = (char *)&v146[2];
      uint64_t v150 = *a3;
      float32x4_t v149 = a3[1];
      if (v149 != *a3)
      {
        do
        {
          float64x2_t v151 = *((float64x2_t *)v149 - 2);
          float64x2_t v152 = *((float64x2_t *)v149 - 1);
          v149 -= 32;
          v146[-2] = v151;
          v146[-1] = v152;
          v146 -= 2;
        }
        while (v149 != v150);
        float32x4_t v149 = *a3;
      }
      *a3 = (char *)v146;
      a3[1] = v64;
      a3[2] = v147;
      if (v149) {
        operator delete(v149);
      }
    }
    else
    {
      float64x2_t v63 = a2[1];
      *unint64_t v62 = *a2;
      v62[1] = v63;
      uint64_t v64 = (char *)&v62[2];
      uint64_t v60 = a5;
    }
    a3[1] = v64;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    unsigned int v154 = v60 + 2;
    unint64_t v153 = v60[2];
    uint64_t v155 = v60[1];
    if (v155 >= v153)
    {
      uint64_t v157 = *v60;
      uint64_t v158 = (v155 - *v60) >> 2;
      unint64_t v159 = v158 + 1;
      if ((unint64_t)(v158 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v160 = v153 - v157;
      if (v160 >> 1 > v159) {
        unint64_t v159 = v160 >> 1;
      }
      if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v161 = v159;
      }
      if (v161)
      {
        uint64_t v162 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v161);
        uint64_t v157 = *v60;
        uint64_t v155 = v60[1];
      }
      else
      {
        uint64_t v162 = 0;
      }
      unint64_t v217 = &v162[4 * v158];
      unint64_t v153 = &v162[4 * v161];
      *(_DWORD *)unint64_t v217 = 3;
      float32x4_t v156 = v217 + 4;
      while (v155 != v157)
      {
        int v218 = *((_DWORD *)v155 - 1);
        v155 -= 4;
        *((_DWORD *)v217 - 1) = v218;
        v217 -= 4;
      }
      *uint64_t v60 = v217;
      v60[1] = v156;
      v60[2] = v153;
      if (v157)
      {
        operator delete(v157);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v155 = 3;
      float32x4_t v156 = v155 + 4;
    }
    v60[1] = v156;
    if (v156 >= v153)
    {
      int v220 = *v60;
      uint64_t v221 = (v156 - *v60) >> 2;
      unint64_t v222 = v221 + 1;
      if ((unint64_t)(v221 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v223 = v153 - v220;
      if (v223 >> 1 > v222) {
        unint64_t v222 = v223 >> 1;
      }
      if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v224 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v224 = v222;
      }
      if (v224)
      {
        unint64_t v225 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v224);
        int v220 = *v60;
        float32x4_t v156 = v60[1];
      }
      else
      {
        unint64_t v225 = 0;
      }
      float64x2_t v235 = &v225[4 * v221];
      unint64_t v153 = &v225[4 * v224];
      *(_DWORD *)float64x2_t v235 = 6;
      uint64_t v219 = v235 + 4;
      while (v156 != v220)
      {
        int v236 = *((_DWORD *)v156 - 1);
        v156 -= 4;
        *((_DWORD *)v235 - 1) = v236;
        v235 -= 4;
      }
      *uint64_t v60 = v235;
      v60[1] = v219;
      v60[2] = v153;
      if (v220)
      {
        operator delete(v220);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)float32x4_t v156 = 6;
      uint64_t v219 = v156 + 4;
    }
    v60[1] = v219;
    if (v219 >= v153)
    {
      uint64_t v238 = *v60;
      uint64_t v239 = (v219 - *v60) >> 2;
      unint64_t v240 = v239 + 1;
      if ((unint64_t)(v239 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v241 = v153 - v238;
      if (v241 >> 1 > v240) {
        unint64_t v240 = v241 >> 1;
      }
      if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v242 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v242 = v240;
      }
      if (v242)
      {
        int v243 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v242);
        uint64_t v238 = *v60;
        uint64_t v219 = v60[1];
      }
      else
      {
        int v243 = 0;
      }
      uint64_t v252 = &v243[4 * v239];
      unint64_t v153 = &v243[4 * v242];
      *(_DWORD *)uint64_t v252 = 9;
      unint64_t v237 = v252 + 4;
      while (v219 != v238)
      {
        int v253 = *((_DWORD *)v219 - 1);
        v219 -= 4;
        *((_DWORD *)v252 - 1) = v253;
        v252 -= 4;
      }
      *uint64_t v60 = v252;
      v60[1] = v237;
      v60[2] = v153;
      if (v238)
      {
        operator delete(v238);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v219 = 9;
      unint64_t v237 = v219 + 4;
    }
    v60[1] = v237;
    if (v237 < v153)
    {
LABEL_263:
      *(_DWORD *)unint64_t v237 = 12;
      float64x2_t v262 = v237 + 4;
LABEL_282:
      v60[1] = v262;
      goto LABEL_311;
    }
    uint64_t v254 = *v60;
    uint64_t v255 = (v237 - *v60) >> 2;
    unint64_t v256 = v255 + 1;
    if (!((unint64_t)(v255 + 1) >> 62))
    {
      uint64_t v257 = v153 - v254;
      if (v257 >> 1 > v256) {
        unint64_t v256 = v257 >> 1;
      }
      if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v258 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v258 = v256;
      }
      if (v258)
      {
        int v259 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v258);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int v259 = 0;
      }
      int32x2_t v268 = &v259[4 * v255];
      float32x4_t v269 = &v259[4 * v258];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v270 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v270;
        v268 -= 4;
      }
      goto LABEL_280;
    }
    goto LABEL_314;
  }
  if (v50 == 2)
  {
    float32x4_t v51 = &geom::kdop_axes<(unsigned char)6,double>[2 * v17];
    float64x2_t v52 = *v51;
    float64x2_t v53 = v51[1];
    v11.f64[0] = *(float64_t *)(a1 + 8 * v17);
    float64x2_t v54 = vmulq_f64(v53, v11);
    int8x16_t v55 = (int8x16_t)vmulq_n_f64(*v51, v11.f64[0]);
    unint64_t v56 = vextq_s8(v55, v55, 8uLL).u64[0];
    unint64_t v57 = (unint64_t)a3[2];
    float32x4_t v58 = (int8x16_t *)a3[1];
    if ((unint64_t)v58 >= v57)
    {
      uint64_t v71 = ((char *)v58 - *a3) >> 5;
      unint64_t v72 = v71 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v71 + 1) >> 59) {
        goto LABEL_314;
      }
      float64x2_t v327 = v53;
      float64x2_t v332 = v52;
      uint64_t v73 = v57 - (void)*a3;
      if (v73 >> 4 > v72) {
        unint64_t v72 = v73 >> 4;
      }
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v74 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        uint64_t v316 = v55.i64[0];
        float64x2_t v322 = v54;
        unint64_t v312 = v56;
        int32x4_t v75 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v74);
        unint64_t v56 = v312;
        v55.i64[0] = v316;
        float64x2_t v54 = v322;
      }
      else
      {
        int32x4_t v75 = 0;
      }
      float64x2_t v131 = (int8x16_t *)&v75[32 * v71];
      float32x4_t v132 = &v75[32 * v74];
      v55.i64[1] = v56;
      *float64x2_t v131 = v55;
      v131[1] = (int8x16_t)v54;
      uint64_t v59 = v131 + 2;
      float32x4_t v134 = *a3;
      float64x2_t v133 = a3[1];
      if (v133 != *a3)
      {
        do
        {
          int8x16_t v135 = *((int8x16_t *)v133 - 2);
          float64x2_t v54 = *((float64x2_t *)v133 - 1);
          v133 -= 32;
          v131[-2] = v135;
          v131[-1] = (int8x16_t)v54;
          v131 -= 2;
        }
        while (v133 != v134);
        float64x2_t v133 = *a3;
      }
      *a3 = (char *)v131;
      a3[1] = (char *)v59;
      a3[2] = v132;
      if (v133) {
        operator delete(v133);
      }
      float64x2_t v52 = v332;
      float64x2_t v53 = v327;
    }
    else
    {
      v55.i64[1] = v56;
      *float32x4_t v58 = v55;
      v58[1] = (int8x16_t)v54;
      uint64_t v59 = v58 + 2;
      uint64_t v60 = a5;
    }
    a3[1] = (char *)v59;
    v54.f64[0] = *(float64_t *)(a1 + 8 * v17 + 32);
    float64x2_t v136 = vmulq_f64(v53, v54);
    *(void *)&v52.f64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
    int8x16_t v137 = (int8x16_t)vmulq_n_f64(v52, v54.f64[0]);
    unint64_t v138 = vextq_s8(v137, v137, 8uLL).u64[0];
    unint64_t v139 = (unint64_t)a3[2];
    if ((unint64_t)v59 >= v139)
    {
      uint64_t v141 = ((char *)v59 - *a3) >> 5;
      if ((unint64_t)(v141 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v142 = v139 - (void)*a3;
      uint64_t v143 = v142 >> 4;
      if (v142 >> 4 <= (unint64_t)(v141 + 1)) {
        uint64_t v143 = v141 + 1;
      }
      if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v144 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v144 = v143;
      }
      if (v144)
      {
        float64x2_t v334 = v136;
        unint64_t v324 = v138;
        uint64_t v329 = v137.i64[0];
        float64x2_t v145 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v144);
        unint64_t v138 = v324;
        v137.i64[0] = v329;
        float64x2_t v136 = v334;
      }
      else
      {
        float64x2_t v145 = 0;
      }
      int v200 = (int8x16_t *)&v145[32 * v141];
      float64x2_t v201 = &v145[32 * v144];
      v137.i64[1] = v138;
      *int v200 = v137;
      v200[1] = (int8x16_t)v136;
      uint64_t v140 = v200 + 2;
      uint64_t v203 = *a3;
      int v202 = a3[1];
      if (v202 != *a3)
      {
        do
        {
          int8x16_t v204 = *((int8x16_t *)v202 - 2);
          int8x16_t v205 = *((int8x16_t *)v202 - 1);
          v202 -= 32;
          v200[-2] = v204;
          v200[-1] = v205;
          v200 -= 2;
        }
        while (v202 != v203);
        int v202 = *a3;
      }
      *a3 = (char *)v200;
      a3[1] = (char *)v140;
      a3[2] = v201;
      if (v202) {
        operator delete(v202);
      }
    }
    else
    {
      v137.i64[1] = v138;
      *uint64_t v59 = v137;
      v59[1] = (int8x16_t)v136;
      uint64_t v140 = v59 + 2;
    }
    a3[1] = (char *)v140;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    std::vector<int>::pointer begin = a4->__begin_;
    begin[10] = 1;
    begin[7] = 1;
    begin[4] = 1;
    unint64_t v208 = v60 + 2;
    uint64_t v207 = v60[2];
    int v209 = v60[1];
    if (v209 >= v207)
    {
      int v211 = *v60;
      uint64_t v212 = (v209 - *v60) >> 2;
      unint64_t v213 = v212 + 1;
      if ((unint64_t)(v212 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v214 = v207 - v211;
      if (v214 >> 1 > v213) {
        unint64_t v213 = v214 >> 1;
      }
      if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v215 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v215 = v213;
      }
      if (v215)
      {
        uint64_t v216 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v215);
        int v211 = *v60;
        int v209 = v60[1];
      }
      else
      {
        uint64_t v216 = 0;
      }
      int v226 = &v216[4 * v212];
      uint64_t v207 = &v216[4 * v215];
      *(_DWORD *)int v226 = 3;
      float64x2_t v210 = v226 + 4;
      while (v209 != v211)
      {
        int v227 = *((_DWORD *)v209 - 1);
        v209 -= 4;
        *((_DWORD *)v226 - 1) = v227;
        v226 -= 4;
      }
      *uint64_t v60 = v226;
      v60[1] = v210;
      v60[2] = v207;
      if (v211)
      {
        operator delete(v211);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v209 = 3;
      float64x2_t v210 = v209 + 4;
    }
    v60[1] = v210;
    if (v210 >= v207)
    {
      unint64_t v229 = *v60;
      uint64_t v230 = (v210 - *v60) >> 2;
      unint64_t v231 = v230 + 1;
      if ((unint64_t)(v230 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v232 = v207 - v229;
      if (v232 >> 1 > v231) {
        unint64_t v231 = v232 >> 1;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        int v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v233);
        unint64_t v229 = *v60;
        float64x2_t v210 = v60[1];
      }
      else
      {
        int v234 = 0;
      }
      int v244 = &v234[4 * v230];
      uint64_t v207 = &v234[4 * v233];
      *(_DWORD *)int v244 = 6;
      int v228 = v244 + 4;
      while (v210 != v229)
      {
        int v245 = *((_DWORD *)v210 - 1);
        v210 -= 4;
        *((_DWORD *)v244 - 1) = v245;
        v244 -= 4;
      }
      *uint64_t v60 = v244;
      v60[1] = v228;
      v60[2] = v207;
      if (v229)
      {
        operator delete(v229);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v210 = 6;
      int v228 = v210 + 4;
    }
    v60[1] = v228;
    if (v228 >= v207)
    {
      int v246 = *v60;
      uint64_t v247 = (v228 - *v60) >> 2;
      unint64_t v248 = v247 + 1;
      if ((unint64_t)(v247 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v249 = v207 - v246;
      if (v249 >> 1 > v248) {
        unint64_t v248 = v249 >> 1;
      }
      if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v250 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v250 = v248;
      }
      if (v250)
      {
        unint64_t v251 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v250);
        int v246 = *v60;
        int v228 = v60[1];
      }
      else
      {
        unint64_t v251 = 0;
      }
      float64x2_t v260 = &v251[4 * v247];
      uint64_t v207 = &v251[4 * v250];
      *(_DWORD *)float64x2_t v260 = 9;
      unint64_t v237 = v260 + 4;
      while (v228 != v246)
      {
        int v261 = *((_DWORD *)v228 - 1);
        v228 -= 4;
        *((_DWORD *)v260 - 1) = v261;
        v260 -= 4;
      }
      *uint64_t v60 = v260;
      v60[1] = v237;
      v60[2] = v207;
      if (v246)
      {
        operator delete(v246);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v228 = 9;
      unint64_t v237 = v228 + 4;
    }
    v60[1] = v237;
    if (v237 < v207) {
      goto LABEL_263;
    }
    uint64_t v254 = *v60;
    uint64_t v263 = (v237 - *v60) >> 2;
    unint64_t v264 = v263 + 1;
    if (!((unint64_t)(v263 + 1) >> 62))
    {
      uint64_t v265 = v207 - v254;
      if (v265 >> 1 > v264) {
        unint64_t v264 = v265 >> 1;
      }
      if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v266 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v266 = v264;
      }
      if (v266)
      {
        int32x4_t v267 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v266);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int32x4_t v267 = 0;
      }
      int32x2_t v268 = &v267[4 * v263];
      float32x4_t v269 = &v267[4 * v266];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v271 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v271;
        v268 -= 4;
      }
LABEL_280:
      *uint64_t v60 = v268;
      v60[1] = v262;
      v60[2] = v269;
      if (v254) {
        operator delete(v254);
      }
      goto LABEL_282;
    }
LABEL_314:
    abort();
  }
  if ((unint64_t)((char *)v343 - (char *)v342) > 0xBF)
  {
    geom::half_plane_intersection_3<double>(6uLL, v342, (void **)a3, (unint64_t *)a4, a5);
  }
  else
  {
    *(void *)std::vector<int>::value_type __x = 0;
    float64x2_t v340 = 0;
    float64x2_t v341 = 0;
    f64 = (_OWORD *)geom::kdop_axes<(unsigned char)6,double>[2 * v16].f64;
    int64x2_t v66 = *(int64x2_t *)f64;
    float64x2_t v67 = *((float64x2_t *)f64 + 1);
    double v68 = fabs(v67.f64[0]);
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v14.i64 = -*(double *)&v66.i64[1];
      float64x2_t v70 = 0uLL;
      float64x2_t v69 = (float64x2_t)vzip1q_s64(v14, v66);
    }
    else
    {
      v69.f64[0] = 0.0;
      v69.f64[1] = -v67.f64[0];
      float64x2_t v70 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    }
    float64x2_t v81 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    float64x2_t v82 = vmulq_f64(v70, v70);
    v82.f64[0] = 1.0 / sqrt(v82.f64[0] + vaddvq_f64(vmulq_f64(v69, v69)));
    float64x2_t v328 = vmulq_f64(v70, v82);
    int8x16_t v83 = (int8x16_t)vmulq_n_f64(v69, v82.f64[0]);
    unint64_t v289 = vextq_s8(v83, v83, 8uLL).u64[0];
    int64x2_t v333 = *((int64x2_t *)f64 + 1);
    uint64_t v296 = v83.i64[0];
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v12.i64 = -*(double *)&v66.i64[1];
      float64x2_t v85 = 0uLL;
      float64x2_t v84 = (float64x2_t)vzip1q_s64(v12, v66);
    }
    else
    {
      v84.f64[0] = 0.0;
      v84.f64[1] = -v67.f64[0];
      float64x2_t v85 = v81;
    }
    float64x2_t v86 = vmulq_f64(v85, v85);
    v86.f64[0] = 1.0 / sqrt(v86.f64[0] + vaddvq_f64(vmulq_f64(v84, v84)));
    float64x2_t v87 = vmulq_n_f64(v84, v86.f64[0]);
    float64x2_t v88 = vmulq_f64(v85, v86);
    v89.f64[0] = *((float64_t *)f64 + 2);
    v89.f64[1] = *(float64_t *)f64;
    float64x2_t v305 = vnegq_f64(v67);
    float64x2_t v90 = vmlaq_laneq_f64(vmulq_laneq_f64(v305, v87, 1), v88, (float64x2_t)v66, 1);
    v88.f64[1] = v87.f64[0];
    float64x2_t v91 = vnegq_f64((float64x2_t)v66);
    float64x2_t v92 = vmlaq_f64(vmulq_f64(v88, v91), v87, v89);
    float64x2_t v93 = vmulq_f64(v92, v92);
    double v94 = vmulq_f64(v90, v90).f64[0];
    v90.f64[1] = v92.f64[0];
    v93.f64[0] = 1.0 / sqrt(v93.f64[1] + v94 + v93.f64[0]);
    int8x16_t v95 = (int8x16_t)vmulq_n_f64(v90, v93.f64[0]);
    unint64_t v96 = vextq_s8(v95, v95, 8uLL).u64[0];
    float64x2_t v323 = vmulq_laneq_f64(v93, v92, 1);
    unint64_t v288 = v96;
    uint64_t v294 = v95.i64[0];
    if (v343 == (int8x16_t *)v342)
    {
      uint64_t v130 = 0;
      float32x4_t v121 = 0;
    }
    else
    {
      unint64_t v97 = 0;
      *(void *)&v98.f64[0] = v83.i64[0];
      *(void *)&v98.f64[1] = v289;
      v95.i64[1] = v96;
      float64x2_t v303 = (float64x2_t)v95;
      float64x2_t v304 = v98;
      int64x2_t v301 = *(int64x2_t *)f64;
      float64x2_t v302 = (float64x2_t)vdupq_lane_s64(v333.i64[0], 0);
      *(void *)&v91.f64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
      *(void *)&v89.f64[1] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
      float64x2_t v299 = v89;
      float64x2_t v300 = v81;
      float64x2_t v298 = v91;
      do
      {
        int32x4_t v99 = &v49[2 * v97];
        v100.f64[0] = v99[1].f64[0];
        v100.f64[1] = v99->f64[0];
        float64x2_t v101 = vmlaq_f64(vmulq_f64(v100, v91), *v99, v89);
        float64x2_t v102 = vmlaq_f64(vmulq_laneq_f64(v305, *v99, 1), v99[1], v81);
        int64x2_t v306 = (int64x2_t)v99[1];
        float64x2_t v103 = vmulq_f64(v101, v101);
        float64_t v104 = v101.f64[0];
        float64x2_t v308 = v101;
        v105.f64[0] = v102.f64[0];
        v103.f64[0] = 1.0 / sqrt(v103.f64[1] + vmulq_f64(v102, v102).f64[0] + v103.f64[0]);
        float64x2_t v317 = v103;
        int64x2_t v106 = vzip1q_s64(v66, *(int64x2_t *)v99);
        int64x2_t v107 = vzip2q_s64(v66, *(int64x2_t *)v99);
        float64x2_t v108 = (float64x2_t)vzip1q_s64(v333, v306);
        float64x2_t v310 = (float64x2_t)vzip1q_s64(v106, v107);
        float64x2_t v313 = (float64x2_t)vzip2q_s64(v106, v107);
        v345.columns[0] = (simd_double2)vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)v106, *(double *)v66.i64), v81, (float64x2_t)v107), v302, v108);
        v345.columns[1] = (simd_double2)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v106, v99->f64[0]), (float64x2_t)v107, *v99, 1), v108, *(double *)v306.i64);
        v105.f64[1] = v104;
        float64x2_t v307 = v105;
        float64x2_t v109 = (float64x2_t)__invert_d2(v345).columns[1];
        float64x2_t v110 = vmlaq_laneq_f64(vmulq_n_f64(v310, v109.f64[0]), v313, v109, 1);
        float64x2_t v111 = vmlaq_laneq_f64(vmulq_f64((float64x2_t)v333, v109), (float64x2_t)v306, v109, 1);
        float64x2_t v112 = vmulq_n_f64(v307, v317.f64[0]);
        float64x2_t v113 = vmulq_laneq_f64(v317, v308, 1);
        v114.f64[0] = vmulq_f64(v328, v113).f64[0] + vaddvq_f64(vmulq_f64(v304, v112));
        int64x2_t v115 = (int64x2_t)vmulq_f64(v323, v113);
        v114.f64[1] = *(double *)v115.i64 + vaddvq_f64(vmulq_f64(v303, v112));
        int64x2_t v116 = (int64x2_t)vmulq_n_f64(v114, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v114, v114))));
        *(double *)v115.i64 = -*(double *)&v116.i64[1];
        float64x2_t v117 = (float64x2_t)vzip1q_s64(v115, v116);
        *(double *)v115.i64 = vmulq_f64(v328, v111).f64[0] + vaddvq_f64(vmulq_f64(v304, v110));
        *(double *)&v115.i64[1] = vmulq_f64(v323, v111).f64[0] + vaddvq_f64(vmulq_f64(v303, v110));
        int64x2_t v118 = (int64x2_t)vmulq_f64(v117, (float64x2_t)v115);
        float64x2_t v119 = vdivq_f64(v117, (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64((float64x2_t)v118, (float64x2_t)vdupq_laneq_s64(v118, 1)), 0));
        float32x4_t v120 = v340;
        if (v340 >= v341)
        {
          uint64_t v122 = ((uint64_t)v340 - *(void *)__x) >> 4;
          if ((unint64_t)(v122 + 1) >> 60) {
            goto LABEL_314;
          }
          unint64_t v123 = ((uint64_t)v341 - *(void *)__x) >> 3;
          if (v123 <= v122 + 1) {
            unint64_t v123 = v122 + 1;
          }
          if ((unint64_t)v341 - *(void *)__x >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v124 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v124 = v123;
          }
          if (v124)
          {
            float64x2_t v318 = v119;
            uint64_t v125 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v341, v124);
            float64x2_t v119 = v318;
          }
          else
          {
            uint64_t v125 = 0;
          }
          uint64_t v126 = (float64x2_t *)&v125[16 * v122];
          *uint64_t v126 = v119;
          float32x4_t v121 = v126 + 1;
          unint64_t v128 = *(float64x2_t **)__x;
          uint64_t v127 = v340;
          if (v340 != *(float64x2_t **)__x)
          {
            do
            {
              float64x2_t v129 = v127[-1];
              --v127;
              v126[-1] = v129;
              --v126;
            }
            while (v127 != v128);
            uint64_t v127 = *(float64x2_t **)__x;
          }
          *(void *)std::vector<int>::value_type __x = v126;
          float64x2_t v340 = v121;
          float64x2_t v341 = (float64x2_t *)&v125[16 * v124];
          if (v127) {
            operator delete(v127);
          }
        }
        else
        {
          *float64x2_t v340 = v119;
          float32x4_t v121 = v120 + 1;
        }
        float64x2_t v81 = v300;
        int64x2_t v66 = v301;
        float64x2_t v91 = v298;
        float64x2_t v89 = v299;
        float64x2_t v340 = v121;
        ++v97;
        float64x2_t v49 = v342;
      }
      while (v97 < ((char *)v343 - (char *)v342) >> 5);
      uint64_t v130 = *(void *)__x;
    }
    float64x2_t v336 = 0;
    float64x2_t v337 = 0;
    uint64_t v338 = 0;
    geom::half_plane_intersection_2<double>(((uint64_t)v121 - v130) >> 4, v130, (uint64_t)&v336);
    uint64_t v163 = v336;
    unint64_t v164 = v337;
    int v165 = (int8x16_t *)a3[1];
    if (v336 != v337)
    {
      unint64_t v166 = a3 + 2;
      *(void *)&v167.f64[0] = v294;
      *(void *)&v168.f64[0] = v296;
      *(void *)&v167.f64[1] = v288;
      *(void *)&v168.f64[1] = v289;
      float64x2_t v295 = v167;
      float64x2_t v297 = v168;
      do
      {
        int8x16_t v169 = (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v167, *v163, 1), v168, v163->f64[0]);
        unint64_t v170 = vextq_s8(v169, v169, 8uLL).u64[0];
        float64x2_t v171 = vmlaq_f64(vmulq_laneq_f64(v323, *v163, 1), *v163, v328);
        if ((unint64_t)v165 >= *v166)
        {
          uint64_t v172 = ((char *)v165 - *a3) >> 5;
          if ((unint64_t)(v172 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v173 = *v166 - (void)*a3;
          uint64_t v174 = v173 >> 4;
          if (v173 >> 4 <= (unint64_t)(v172 + 1)) {
            uint64_t v174 = v172 + 1;
          }
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v175 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v175 = v174;
          }
          if (v175)
          {
            uint64_t v335 = v169.i64[0];
            unint64_t v314 = v170;
            float64x2_t v319 = v171;
            float64x2_t v176 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v175);
            unint64_t v170 = v314;
            float64x2_t v171 = v319;
            v169.i64[0] = v335;
          }
          else
          {
            float64x2_t v176 = 0;
          }
          v169.i64[1] = v170;
          float64x2_t v177 = (int8x16_t *)&v176[32 * v172];
          *float64x2_t v177 = v169;
          v177[1] = (int8x16_t)v171;
          float64x2_t v179 = *a3;
          float32x4_t v178 = a3[1];
          float32x4_t v180 = v177;
          if (v178 != *a3)
          {
            do
            {
              int8x16_t v181 = *((int8x16_t *)v178 - 2);
              int8x16_t v182 = *((int8x16_t *)v178 - 1);
              v178 -= 32;
              v180[-2] = v181;
              v180[-1] = v182;
              v180 -= 2;
            }
            while (v178 != v179);
            float32x4_t v178 = *a3;
          }
          int v165 = v177 + 2;
          *a3 = (char *)v180;
          a3[1] = v177[2].i8;
          a3[2] = &v176[32 * v175];
          if (v178) {
            operator delete(v178);
          }
          float64x2_t v167 = v295;
          float64x2_t v168 = v297;
        }
        else
        {
          v169.i64[1] = v170;
          *int v165 = v169;
          v165[1] = (int8x16_t)v171;
          v165 += 2;
        }
        a3[1] = (char *)v165;
        ++v163;
      }
      while (v163 != v164);
    }
    std::vector<unsigned int>::resize(a4, ((char *)v165 - *a3) >> 4);
    uint64_t v183 = a3[1] - *a3;
    if (v183)
    {
      uint64_t v184 = 0;
      std::vector<int>::pointer v185 = a4->__begin_;
      uint64_t v186 = 4 * (v183 >> 5);
      uint64_t v187 = v186;
      do
      {
        v185[v184] = v184;
        ++v184;
        v187 -= 4;
      }
      while (v187);
      std::vector<int>::pointer v188 = a4->__end_ - 1;
      do
      {
        int v189 = *v185++;
        *v188-- = v189;
        v186 -= 4;
      }
      while (v186);
    }
    unint64_t v190 = (unint64_t)v183 >> 5;
    int v191 = a5[2];
    float64x2_t v192 = a5[1];
    if (v192 >= v191)
    {
      uint64_t v194 = *a5;
      uint64_t v195 = (v192 - *a5) >> 2;
      unint64_t v196 = v195 + 1;
      if ((unint64_t)(v195 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v197 = v191 - v194;
      if (v197 >> 1 > v196) {
        unint64_t v196 = v197 >> 1;
      }
      if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v198 = v196;
      }
      if (v198)
      {
        unint64_t v199 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v198);
        uint64_t v194 = *a5;
        float64x2_t v192 = a5[1];
      }
      else
      {
        unint64_t v199 = 0;
      }
      float32x4_t v272 = &v199[4 * v195];
      int v191 = &v199[4 * v198];
      *(_DWORD *)float32x4_t v272 = v190;
      int v193 = v272 + 4;
      while (v192 != v194)
      {
        int v273 = *((_DWORD *)v192 - 1);
        v192 -= 4;
        *((_DWORD *)v272 - 1) = v273;
        v272 -= 4;
      }
      *a5 = v272;
      a5[1] = v193;
      a5[2] = v191;
      if (v194)
      {
        operator delete(v194);
        int v191 = a5[2];
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v192 = v190;
      int v193 = v192 + 4;
    }
    a5[1] = v193;
    uint64_t v274 = ((unint64_t)(a3[1] - *a3) >> 4) & 0xFFFFFFFE;
    if (v193 >= v191)
    {
      float32x4_t v276 = *a5;
      uint64_t v277 = (v193 - *a5) >> 2;
      unint64_t v278 = v277 + 1;
      if ((unint64_t)(v277 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v279 = v191 - v276;
      if (v279 >> 1 > v278) {
        unint64_t v278 = v279 >> 1;
      }
      if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v280 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v280 = v278;
      }
      if (v280)
      {
        float32x4_t v281 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v280);
        float32x4_t v276 = *a5;
        int v193 = a5[1];
      }
      else
      {
        float32x4_t v281 = 0;
      }
      float32x4_t v282 = &v281[4 * v277];
      float64x2_t v283 = &v281[4 * v280];
      *(_DWORD *)float32x4_t v282 = v274;
      float32x4_t v275 = v282 + 4;
      while (v193 != v276)
      {
        int v284 = *((_DWORD *)v193 - 1);
        v193 -= 4;
        *((_DWORD *)v282 - 1) = v284;
        v282 -= 4;
      }
      *a5 = v282;
      a5[1] = v275;
      a5[2] = v283;
      if (v276) {
        operator delete(v276);
      }
    }
    else
    {
      *(_DWORD *)int v193 = v274;
      float32x4_t v275 = v193 + 4;
    }
    a5[1] = v275;
    if (v336)
    {
      float64x2_t v337 = v336;
      operator delete(v336);
    }
    if (*(void *)__x)
    {
      float64x2_t v340 = *(float64x2_t **)__x;
      operator delete(*(void **)__x);
    }
  }
  uint64_t v285 = (float64x2_t *)*a3;
  float64x2_t v286 = (float64x2_t *)a3[1];
  if (*a3 != (char *)v286)
  {
    do
    {
      float64x2_t v287 = vaddq_f64(a2[1], v285[1]);
      *uint64_t v285 = vaddq_f64(*a2, *v285);
      v285[1] = v287;
      v285 += 2;
    }
    while (v285 != v286);
  }
LABEL_311:
  if (v342)
  {
    float64x2_t v343 = (int8x16_t *)v342;
    operator delete(v342);
  }
}

void geom_dop8_polyhedron_3d(uint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float64x2_t v8 = a2[1];
  v12[0] = *a2;
  v12[1] = v8;
  float64_t v9 = (char **)geom::collection_to_vector<float>(a3);
  float32x4_t v10 = (std::vector<int> *)geom::collection_to_vector<float>(a4);
  float64x2_t v11 = (char **)geom::collection_to_vector<float>(a5);
  geom::dop<(unsigned char)8,double>::compute_polyhedron(a1, v12, v9, v10, v11);
}

void geom::dop<(unsigned char)8,double>::compute_polyhedron(uint64_t a1, float64x2_t *a2, char **a3, std::vector<int> *a4, char **a5)
{
  uint64_t v6 = 0;
  v343[9] = *MEMORY[0x263EF8340];
  a3[1] = *a3;
  a4->__end_ = a4->__begin_;
  a5[1] = *a5;
  float64x2_t v8 = *a2;
  float64x2_t v7 = a2[1];
  do
  {
    float64_t v9 = vmulq_f64(geom::kdop_axes<(unsigned char)8,double>[2 * v6 + 1], v7).f64[0]
       + vaddvq_f64(vmulq_f64(geom::kdop_axes<(unsigned char)8,double>[2 * v6], v8));
    float32x4_t v10 = (double *)(a1 + 8 * v6);
    *(double *)&v343[v6 + 5] = *v10 - v9;
    *(double *)&v343[++v6] = v10[4] - v9;
  }
  while (v6 != 4);
  float64x2_t v341 = 0;
  float64x2_t v342 = 0;
  v343[0] = 0;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm((void **)&v341, 8uLL);
  uint64_t v14 = 0;
  uint64_t v15 = -1;
  uint64_t v16 = -1;
  do
  {
    double v17 = *(double *)&v343[v14 + 5];
    *(void *)&v11.f64[0] = v343[v14 + 1];
    if (v17 == v11.f64[0])
    {
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v18 = v15;
      uint64_t v15 = v14;
      if (vabdd_f64(v17, v11.f64[0]) > 0.000001)
      {
        float32x4_t v19 = &geom::kdop_axes<(unsigned char)8,double>[2 * v14];
        int64x2_t v13 = *(int64x2_t *)v19;
        float64x2_t v20 = v19[1];
        float64x2_t v21 = vdivq_f64(v20, v11);
        int8x16_t v22 = (int8x16_t)vdivq_f64(*v19, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0));
        float64x2_t v23 = (float64x2_t)vextq_s8(v22, v22, 8uLL);
        unint64_t v25 = (float64x2_t *)v342;
        unint64_t v24 = v343[0];
        if ((unint64_t)v342 >= v343[0])
        {
          double v27 = v341;
          uint64_t v28 = ((char *)v342 - (char *)v341) >> 5;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59) {
            goto LABEL_314;
          }
          float64x2_t v324 = v20;
          int64x2_t v329 = v13;
          uint64_t v30 = v343[0] - (void)v341;
          if ((uint64_t)(v343[0] - (void)v341) >> 4 > v29) {
            unint64_t v29 = v30 >> 4;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            float64x2_t v314 = v21;
            uint64_t v319 = v22.i64[0];
            float64x2_t v310 = v23;
            float32x4_t v32 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v343, v31);
            float64x2_t v23 = v310;
            float64x2_t v21 = v314;
            v22.i64[0] = v319;
            unint64_t v33 = v32;
            double v27 = v341;
            unint64_t v25 = (float64x2_t *)v342;
          }
          else
          {
            unint64_t v33 = 0;
          }
          v22.i64[1] = *(void *)&v23.f64[0];
          uint64_t v34 = (int8x16_t *)&v33[32 * v28];
          *uint64_t v34 = v22;
          v34[1] = (int8x16_t)v21;
          unint64_t v35 = v34;
          while (v25 != v27)
          {
            float64x2_t v36 = v25[-2];
            float64x2_t v23 = v25[-1];
            v25 -= 2;
            v35[-2] = (int8x16_t)v36;
            v35[-1] = (int8x16_t)v23;
            v35 -= 2;
          }
          unint64_t v24 = (unint64_t)&v33[32 * v31];
          int64x2_t v26 = (float64x2_t *)&v34[2];
          float64x2_t v341 = (float64x2_t *)v35;
          float64x2_t v342 = v34 + 2;
          v343[0] = v24;
          if (v27)
          {
            operator delete(v27);
            unint64_t v24 = v343[0];
          }
          float64x2_t v20 = v324;
          int64x2_t v13 = v329;
        }
        else
        {
          v22.i64[1] = *(void *)&v23.f64[0];
          *float64x2_t v342 = v22;
          v25[1] = v21;
          int64x2_t v26 = v25 + 2;
        }
        float64x2_t v342 = (int8x16_t *)v26;
        *(void *)&v23.f64[0] = v343[v14 + 5];
        float64x2_t v37 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23.f64[0], 0);
        int64x2_t v12 = (int64x2_t)vdivq_f64(v20, v23);
        v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
        float64x2_t v11 = vdivq_f64((float64x2_t)v13, v37);
        unint64_t v38 = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
        if ((unint64_t)v26 >= v24)
        {
          float32x4_t v40 = v341;
          uint64_t v41 = ((char *)v26 - (char *)v341) >> 5;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v43 = v24 - (void)v341;
          if (v43 >> 4 > v42) {
            unint64_t v42 = v43 >> 4;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v44 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            float64_t v325 = v11.f64[0];
            int64x2_t v330 = v12;
            unint64_t v320 = v38;
            float32x4_t v45 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v343, v44);
            unint64_t v38 = v320;
            v11.f64[0] = v325;
            int64x2_t v12 = v330;
            unint64_t v46 = v45;
            float32x4_t v40 = v341;
            int64x2_t v26 = (float64x2_t *)v342;
          }
          else
          {
            unint64_t v46 = 0;
          }
          *(void *)&v11.f64[1] = v38;
          float64x2_t v47 = (float64x2_t *)&v46[32 * v41];
          *float64x2_t v47 = v11;
          v47[1] = (float64x2_t)v12;
          unint64_t v48 = v47;
          while (v26 != v40)
          {
            float64x2_t v11 = v26[-2];
            int64x2_t v12 = (int64x2_t)v26[-1];
            v26 -= 2;
            v48[-2] = v11;
            v48[-1] = (float64x2_t)v12;
            v48 -= 2;
          }
          float32x4_t v39 = (int8x16_t *)&v47[2];
          float64x2_t v341 = v48;
          float64x2_t v342 = (int8x16_t *)&v47[2];
          v343[0] = &v46[32 * v44];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)&v11.f64[1] = v38;
          *int64x2_t v26 = v11;
          v26[1] = (float64x2_t)v12;
          float32x4_t v39 = (int8x16_t *)&v26[2];
        }
        float64x2_t v342 = v39;
        uint64_t v16 = v14;
        uint64_t v15 = v18;
      }
    }
    ++v14;
  }
  while (v14 != 4);
  float64x2_t v49 = v341;
  uint64_t v50 = ((char *)v342 - (char *)v341) >> 5;
  if (!v50)
  {
    unint64_t v61 = (unint64_t)a3[2];
    unint64_t v62 = (float64x2_t *)a3[1];
    if ((unint64_t)v62 >= v61)
    {
      uint64_t v76 = ((char *)v62 - *a3) >> 5;
      unint64_t v77 = v76 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v76 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v78 = v61 - (void)*a3;
      if (v78 >> 4 > v77) {
        unint64_t v77 = v78 >> 4;
      }
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v79 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79) {
        float32x4_t v80 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v79);
      }
      else {
        float32x4_t v80 = 0;
      }
      float64x2_t v146 = (float64x2_t *)&v80[32 * v76];
      float32x4_t v147 = &v80[32 * v79];
      float64x2_t v148 = a2[1];
      *float64x2_t v146 = *a2;
      v146[1] = v148;
      uint64_t v64 = (char *)&v146[2];
      uint64_t v150 = *a3;
      float32x4_t v149 = a3[1];
      if (v149 != *a3)
      {
        do
        {
          float64x2_t v151 = *((float64x2_t *)v149 - 2);
          float64x2_t v152 = *((float64x2_t *)v149 - 1);
          v149 -= 32;
          v146[-2] = v151;
          v146[-1] = v152;
          v146 -= 2;
        }
        while (v149 != v150);
        float32x4_t v149 = *a3;
      }
      *a3 = (char *)v146;
      a3[1] = v64;
      a3[2] = v147;
      if (v149) {
        operator delete(v149);
      }
    }
    else
    {
      float64x2_t v63 = a2[1];
      *unint64_t v62 = *a2;
      v62[1] = v63;
      uint64_t v64 = (char *)&v62[2];
      uint64_t v60 = a5;
    }
    a3[1] = v64;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    unsigned int v154 = v60 + 2;
    unint64_t v153 = v60[2];
    uint64_t v155 = v60[1];
    if (v155 >= v153)
    {
      uint64_t v157 = *v60;
      uint64_t v158 = (v155 - *v60) >> 2;
      unint64_t v159 = v158 + 1;
      if ((unint64_t)(v158 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v160 = v153 - v157;
      if (v160 >> 1 > v159) {
        unint64_t v159 = v160 >> 1;
      }
      if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v161 = v159;
      }
      if (v161)
      {
        uint64_t v162 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v161);
        uint64_t v157 = *v60;
        uint64_t v155 = v60[1];
      }
      else
      {
        uint64_t v162 = 0;
      }
      unint64_t v217 = &v162[4 * v158];
      unint64_t v153 = &v162[4 * v161];
      *(_DWORD *)unint64_t v217 = 3;
      float32x4_t v156 = v217 + 4;
      while (v155 != v157)
      {
        int v218 = *((_DWORD *)v155 - 1);
        v155 -= 4;
        *((_DWORD *)v217 - 1) = v218;
        v217 -= 4;
      }
      *uint64_t v60 = v217;
      v60[1] = v156;
      v60[2] = v153;
      if (v157)
      {
        operator delete(v157);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v155 = 3;
      float32x4_t v156 = v155 + 4;
    }
    v60[1] = v156;
    if (v156 >= v153)
    {
      int v220 = *v60;
      uint64_t v221 = (v156 - *v60) >> 2;
      unint64_t v222 = v221 + 1;
      if ((unint64_t)(v221 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v223 = v153 - v220;
      if (v223 >> 1 > v222) {
        unint64_t v222 = v223 >> 1;
      }
      if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v224 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v224 = v222;
      }
      if (v224)
      {
        unint64_t v225 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v224);
        int v220 = *v60;
        float32x4_t v156 = v60[1];
      }
      else
      {
        unint64_t v225 = 0;
      }
      float64x2_t v235 = &v225[4 * v221];
      unint64_t v153 = &v225[4 * v224];
      *(_DWORD *)float64x2_t v235 = 6;
      uint64_t v219 = v235 + 4;
      while (v156 != v220)
      {
        int v236 = *((_DWORD *)v156 - 1);
        v156 -= 4;
        *((_DWORD *)v235 - 1) = v236;
        v235 -= 4;
      }
      *uint64_t v60 = v235;
      v60[1] = v219;
      v60[2] = v153;
      if (v220)
      {
        operator delete(v220);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)float32x4_t v156 = 6;
      uint64_t v219 = v156 + 4;
    }
    v60[1] = v219;
    if (v219 >= v153)
    {
      uint64_t v238 = *v60;
      uint64_t v239 = (v219 - *v60) >> 2;
      unint64_t v240 = v239 + 1;
      if ((unint64_t)(v239 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v241 = v153 - v238;
      if (v241 >> 1 > v240) {
        unint64_t v240 = v241 >> 1;
      }
      if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v242 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v242 = v240;
      }
      if (v242)
      {
        int v243 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v242);
        uint64_t v238 = *v60;
        uint64_t v219 = v60[1];
      }
      else
      {
        int v243 = 0;
      }
      uint64_t v252 = &v243[4 * v239];
      unint64_t v153 = &v243[4 * v242];
      *(_DWORD *)uint64_t v252 = 9;
      unint64_t v237 = v252 + 4;
      while (v219 != v238)
      {
        int v253 = *((_DWORD *)v219 - 1);
        v219 -= 4;
        *((_DWORD *)v252 - 1) = v253;
        v252 -= 4;
      }
      *uint64_t v60 = v252;
      v60[1] = v237;
      v60[2] = v153;
      if (v238)
      {
        operator delete(v238);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v219 = 9;
      unint64_t v237 = v219 + 4;
    }
    v60[1] = v237;
    if (v237 < v153)
    {
LABEL_263:
      *(_DWORD *)unint64_t v237 = 12;
      float64x2_t v262 = v237 + 4;
LABEL_282:
      v60[1] = v262;
      goto LABEL_311;
    }
    uint64_t v254 = *v60;
    uint64_t v255 = (v237 - *v60) >> 2;
    unint64_t v256 = v255 + 1;
    if (!((unint64_t)(v255 + 1) >> 62))
    {
      uint64_t v257 = v153 - v254;
      if (v257 >> 1 > v256) {
        unint64_t v256 = v257 >> 1;
      }
      if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v258 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v258 = v256;
      }
      if (v258)
      {
        int v259 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v258);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int v259 = 0;
      }
      int32x2_t v268 = &v259[4 * v255];
      float32x4_t v269 = &v259[4 * v258];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v270 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v270;
        v268 -= 4;
      }
      goto LABEL_280;
    }
    goto LABEL_314;
  }
  if (v50 == 2)
  {
    float32x4_t v51 = &geom::kdop_axes<(unsigned char)8,double>[2 * v16];
    float64x2_t v52 = *v51;
    float64x2_t v53 = v51[1];
    v11.f64[0] = *(float64_t *)(a1 + 8 * v16);
    float64x2_t v54 = vmulq_f64(v53, v11);
    int8x16_t v55 = (int8x16_t)vmulq_n_f64(*v51, v11.f64[0]);
    unint64_t v56 = vextq_s8(v55, v55, 8uLL).u64[0];
    unint64_t v57 = (unint64_t)a3[2];
    float32x4_t v58 = (int8x16_t *)a3[1];
    if ((unint64_t)v58 >= v57)
    {
      uint64_t v71 = ((char *)v58 - *a3) >> 5;
      unint64_t v72 = v71 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v71 + 1) >> 59) {
        goto LABEL_314;
      }
      float64x2_t v326 = v53;
      float64x2_t v331 = v52;
      uint64_t v73 = v57 - (void)*a3;
      if (v73 >> 4 > v72) {
        unint64_t v72 = v73 >> 4;
      }
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v74 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        uint64_t v315 = v55.i64[0];
        float64x2_t v321 = v54;
        unint64_t v311 = v56;
        int32x4_t v75 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v74);
        unint64_t v56 = v311;
        v55.i64[0] = v315;
        float64x2_t v54 = v321;
      }
      else
      {
        int32x4_t v75 = 0;
      }
      float64x2_t v131 = (int8x16_t *)&v75[32 * v71];
      float32x4_t v132 = &v75[32 * v74];
      v55.i64[1] = v56;
      *float64x2_t v131 = v55;
      v131[1] = (int8x16_t)v54;
      uint64_t v59 = v131 + 2;
      float32x4_t v134 = *a3;
      float64x2_t v133 = a3[1];
      if (v133 != *a3)
      {
        do
        {
          int8x16_t v135 = *((int8x16_t *)v133 - 2);
          float64x2_t v54 = *((float64x2_t *)v133 - 1);
          v133 -= 32;
          v131[-2] = v135;
          v131[-1] = (int8x16_t)v54;
          v131 -= 2;
        }
        while (v133 != v134);
        float64x2_t v133 = *a3;
      }
      *a3 = (char *)v131;
      a3[1] = (char *)v59;
      a3[2] = v132;
      if (v133) {
        operator delete(v133);
      }
      float64x2_t v53 = v326;
      float64x2_t v52 = v331;
    }
    else
    {
      v55.i64[1] = v56;
      *float32x4_t v58 = v55;
      v58[1] = (int8x16_t)v54;
      uint64_t v59 = v58 + 2;
      uint64_t v60 = a5;
    }
    a3[1] = (char *)v59;
    v54.f64[0] = *(float64_t *)(a1 + 8 * v16 + 32);
    float64x2_t v136 = vmulq_f64(v53, v54);
    *(void *)&v52.f64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
    int8x16_t v137 = (int8x16_t)vmulq_n_f64(v52, v54.f64[0]);
    unint64_t v138 = vextq_s8(v137, v137, 8uLL).u64[0];
    unint64_t v139 = (unint64_t)a3[2];
    if ((unint64_t)v59 >= v139)
    {
      uint64_t v141 = ((char *)v59 - *a3) >> 5;
      if ((unint64_t)(v141 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v142 = v139 - (void)*a3;
      uint64_t v143 = v142 >> 4;
      if (v142 >> 4 <= (unint64_t)(v141 + 1)) {
        uint64_t v143 = v141 + 1;
      }
      if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v144 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v144 = v143;
      }
      if (v144)
      {
        uint64_t v328 = v137.i64[0];
        float64x2_t v333 = v136;
        unint64_t v323 = v138;
        float64x2_t v145 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v144);
        unint64_t v138 = v323;
        v137.i64[0] = v328;
        float64x2_t v136 = v333;
      }
      else
      {
        float64x2_t v145 = 0;
      }
      int v200 = (int8x16_t *)&v145[32 * v141];
      float64x2_t v201 = &v145[32 * v144];
      v137.i64[1] = v138;
      *int v200 = v137;
      v200[1] = (int8x16_t)v136;
      uint64_t v140 = v200 + 2;
      uint64_t v203 = *a3;
      int v202 = a3[1];
      if (v202 != *a3)
      {
        do
        {
          int8x16_t v204 = *((int8x16_t *)v202 - 2);
          int8x16_t v205 = *((int8x16_t *)v202 - 1);
          v202 -= 32;
          v200[-2] = v204;
          v200[-1] = v205;
          v200 -= 2;
        }
        while (v202 != v203);
        int v202 = *a3;
      }
      *a3 = (char *)v200;
      a3[1] = (char *)v140;
      a3[2] = v201;
      if (v202) {
        operator delete(v202);
      }
    }
    else
    {
      v137.i64[1] = v138;
      *uint64_t v59 = v137;
      v59[1] = (int8x16_t)v136;
      uint64_t v140 = v59 + 2;
    }
    a3[1] = (char *)v140;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    std::vector<int>::pointer begin = a4->__begin_;
    begin[10] = 1;
    begin[7] = 1;
    begin[4] = 1;
    unint64_t v208 = v60 + 2;
    uint64_t v207 = v60[2];
    int v209 = v60[1];
    if (v209 >= v207)
    {
      int v211 = *v60;
      uint64_t v212 = (v209 - *v60) >> 2;
      unint64_t v213 = v212 + 1;
      if ((unint64_t)(v212 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v214 = v207 - v211;
      if (v214 >> 1 > v213) {
        unint64_t v213 = v214 >> 1;
      }
      if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v215 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v215 = v213;
      }
      if (v215)
      {
        uint64_t v216 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v215);
        int v211 = *v60;
        int v209 = v60[1];
      }
      else
      {
        uint64_t v216 = 0;
      }
      int v226 = &v216[4 * v212];
      uint64_t v207 = &v216[4 * v215];
      *(_DWORD *)int v226 = 3;
      float64x2_t v210 = v226 + 4;
      while (v209 != v211)
      {
        int v227 = *((_DWORD *)v209 - 1);
        v209 -= 4;
        *((_DWORD *)v226 - 1) = v227;
        v226 -= 4;
      }
      *uint64_t v60 = v226;
      v60[1] = v210;
      v60[2] = v207;
      if (v211)
      {
        operator delete(v211);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v209 = 3;
      float64x2_t v210 = v209 + 4;
    }
    v60[1] = v210;
    if (v210 >= v207)
    {
      unint64_t v229 = *v60;
      uint64_t v230 = (v210 - *v60) >> 2;
      unint64_t v231 = v230 + 1;
      if ((unint64_t)(v230 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v232 = v207 - v229;
      if (v232 >> 1 > v231) {
        unint64_t v231 = v232 >> 1;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        int v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v233);
        unint64_t v229 = *v60;
        float64x2_t v210 = v60[1];
      }
      else
      {
        int v234 = 0;
      }
      int v244 = &v234[4 * v230];
      uint64_t v207 = &v234[4 * v233];
      *(_DWORD *)int v244 = 6;
      int v228 = v244 + 4;
      while (v210 != v229)
      {
        int v245 = *((_DWORD *)v210 - 1);
        v210 -= 4;
        *((_DWORD *)v244 - 1) = v245;
        v244 -= 4;
      }
      *uint64_t v60 = v244;
      v60[1] = v228;
      v60[2] = v207;
      if (v229)
      {
        operator delete(v229);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v210 = 6;
      int v228 = v210 + 4;
    }
    v60[1] = v228;
    if (v228 >= v207)
    {
      int v246 = *v60;
      uint64_t v247 = (v228 - *v60) >> 2;
      unint64_t v248 = v247 + 1;
      if ((unint64_t)(v247 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v249 = v207 - v246;
      if (v249 >> 1 > v248) {
        unint64_t v248 = v249 >> 1;
      }
      if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v250 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v250 = v248;
      }
      if (v250)
      {
        unint64_t v251 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v250);
        int v246 = *v60;
        int v228 = v60[1];
      }
      else
      {
        unint64_t v251 = 0;
      }
      float64x2_t v260 = &v251[4 * v247];
      uint64_t v207 = &v251[4 * v250];
      *(_DWORD *)float64x2_t v260 = 9;
      unint64_t v237 = v260 + 4;
      while (v228 != v246)
      {
        int v261 = *((_DWORD *)v228 - 1);
        v228 -= 4;
        *((_DWORD *)v260 - 1) = v261;
        v260 -= 4;
      }
      *uint64_t v60 = v260;
      v60[1] = v237;
      v60[2] = v207;
      if (v246)
      {
        operator delete(v246);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v228 = 9;
      unint64_t v237 = v228 + 4;
    }
    v60[1] = v237;
    if (v237 < v207) {
      goto LABEL_263;
    }
    uint64_t v254 = *v60;
    uint64_t v263 = (v237 - *v60) >> 2;
    unint64_t v264 = v263 + 1;
    if (!((unint64_t)(v263 + 1) >> 62))
    {
      uint64_t v265 = v207 - v254;
      if (v265 >> 1 > v264) {
        unint64_t v264 = v265 >> 1;
      }
      if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v266 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v266 = v264;
      }
      if (v266)
      {
        int32x4_t v267 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v266);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int32x4_t v267 = 0;
      }
      int32x2_t v268 = &v267[4 * v263];
      float32x4_t v269 = &v267[4 * v266];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v271 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v271;
        v268 -= 4;
      }
LABEL_280:
      *uint64_t v60 = v268;
      v60[1] = v262;
      v60[2] = v269;
      if (v254) {
        operator delete(v254);
      }
      goto LABEL_282;
    }
LABEL_314:
    abort();
  }
  if ((unint64_t)((char *)v342 - (char *)v341) > 0xFF)
  {
    geom::half_plane_intersection_3<double>(8uLL, v341, (void **)a3, (unint64_t *)a4, a5);
  }
  else
  {
    *(void *)std::vector<int>::value_type __x = 0;
    float64x2_t v339 = 0;
    float64x2_t v340 = 0;
    f64 = (_OWORD *)geom::kdop_axes<(unsigned char)8,double>[2 * v15].f64;
    int64x2_t v66 = *(int64x2_t *)f64;
    float64x2_t v67 = *((float64x2_t *)f64 + 1);
    double v68 = fabs(v67.f64[0]);
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v13.i64 = -*(double *)&v66.i64[1];
      float64x2_t v70 = 0uLL;
      float64x2_t v69 = (float64x2_t)vzip1q_s64(v13, v66);
    }
    else
    {
      v69.f64[0] = 0.0;
      v69.f64[1] = -v67.f64[0];
      float64x2_t v70 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    }
    float64x2_t v81 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    float64x2_t v82 = vmulq_f64(v70, v70);
    v82.f64[0] = 1.0 / sqrt(v82.f64[0] + vaddvq_f64(vmulq_f64(v69, v69)));
    float64x2_t v327 = vmulq_f64(v70, v82);
    int64x2_t v332 = *((int64x2_t *)f64 + 1);
    int8x16_t v83 = (int8x16_t)vmulq_n_f64(v69, v82.f64[0]);
    unint64_t v289 = vextq_s8(v83, v83, 8uLL).u64[0];
    uint64_t v296 = v83.i64[0];
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v12.i64 = -*(double *)&v66.i64[1];
      float64x2_t v85 = 0uLL;
      float64x2_t v84 = (float64x2_t)vzip1q_s64(v12, v66);
    }
    else
    {
      v84.f64[0] = 0.0;
      v84.f64[1] = -v67.f64[0];
      float64x2_t v85 = v81;
    }
    float64x2_t v86 = vmulq_f64(v85, v85);
    v86.f64[0] = 1.0 / sqrt(v86.f64[0] + vaddvq_f64(vmulq_f64(v84, v84)));
    float64x2_t v87 = vmulq_n_f64(v84, v86.f64[0]);
    float64x2_t v88 = vmulq_f64(v85, v86);
    v89.f64[0] = *((float64_t *)f64 + 2);
    v89.f64[1] = *(float64_t *)f64;
    float64x2_t v305 = vnegq_f64(v67);
    float64x2_t v90 = vmlaq_laneq_f64(vmulq_laneq_f64(v305, v87, 1), v88, (float64x2_t)v66, 1);
    v88.f64[1] = v87.f64[0];
    float64x2_t v91 = vnegq_f64((float64x2_t)v66);
    float64x2_t v92 = vmlaq_f64(vmulq_f64(v88, v91), v87, v89);
    float64x2_t v93 = vmulq_f64(v92, v92);
    double v94 = vmulq_f64(v90, v90).f64[0];
    v90.f64[1] = v92.f64[0];
    v93.f64[0] = 1.0 / sqrt(v93.f64[1] + v94 + v93.f64[0]);
    int8x16_t v95 = (int8x16_t)vmulq_n_f64(v90, v93.f64[0]);
    unint64_t v96 = vextq_s8(v95, v95, 8uLL).u64[0];
    float64x2_t v322 = vmulq_laneq_f64(v93, v92, 1);
    unint64_t v288 = v96;
    uint64_t v294 = v95.i64[0];
    if (v342 == (int8x16_t *)v341)
    {
      uint64_t v130 = 0;
      float32x4_t v121 = 0;
    }
    else
    {
      unint64_t v97 = 0;
      *(void *)&v98.f64[0] = v83.i64[0];
      *(void *)&v98.f64[1] = v289;
      v95.i64[1] = v96;
      float64x2_t v303 = (float64x2_t)v95;
      float64x2_t v304 = v98;
      int64x2_t v301 = *(int64x2_t *)f64;
      float64x2_t v302 = (float64x2_t)vdupq_lane_s64(v332.i64[0], 0);
      *(void *)&v91.f64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
      *(void *)&v89.f64[1] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
      float64x2_t v299 = v89;
      float64x2_t v300 = v81;
      float64x2_t v298 = v91;
      do
      {
        int32x4_t v99 = &v49[2 * v97];
        v100.f64[0] = v99[1].f64[0];
        v100.f64[1] = v99->f64[0];
        float64x2_t v101 = vmlaq_f64(vmulq_f64(v100, v91), *v99, v89);
        float64x2_t v102 = vmlaq_f64(vmulq_laneq_f64(v305, *v99, 1), v99[1], v81);
        int64x2_t v306 = (int64x2_t)v99[1];
        float64x2_t v103 = vmulq_f64(v101, v101);
        float64_t v104 = v101.f64[0];
        float64x2_t v308 = v101;
        v105.f64[0] = v102.f64[0];
        v103.f64[0] = 1.0 / sqrt(v103.f64[1] + vmulq_f64(v102, v102).f64[0] + v103.f64[0]);
        float64x2_t v316 = v103;
        int64x2_t v106 = vzip1q_s64(v66, *(int64x2_t *)v99);
        int64x2_t v107 = vzip2q_s64(v66, *(int64x2_t *)v99);
        float64x2_t v108 = (float64x2_t)vzip1q_s64(v332, v306);
        float64x2_t v309 = (float64x2_t)vzip1q_s64(v106, v107);
        float64x2_t v312 = (float64x2_t)vzip2q_s64(v106, v107);
        v344.columns[0] = (simd_double2)vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)v106, *(double *)v66.i64), v81, (float64x2_t)v107), v302, v108);
        v344.columns[1] = (simd_double2)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v106, v99->f64[0]), (float64x2_t)v107, *v99, 1), v108, *(double *)v306.i64);
        v105.f64[1] = v104;
        float64x2_t v307 = v105;
        float64x2_t v109 = (float64x2_t)__invert_d2(v344).columns[1];
        float64x2_t v110 = vmlaq_laneq_f64(vmulq_n_f64(v309, v109.f64[0]), v312, v109, 1);
        float64x2_t v111 = vmlaq_laneq_f64(vmulq_f64((float64x2_t)v332, v109), (float64x2_t)v306, v109, 1);
        float64x2_t v112 = vmulq_n_f64(v307, v316.f64[0]);
        float64x2_t v113 = vmulq_laneq_f64(v316, v308, 1);
        v114.f64[0] = vmulq_f64(v327, v113).f64[0] + vaddvq_f64(vmulq_f64(v304, v112));
        int64x2_t v115 = (int64x2_t)vmulq_f64(v322, v113);
        v114.f64[1] = *(double *)v115.i64 + vaddvq_f64(vmulq_f64(v303, v112));
        int64x2_t v116 = (int64x2_t)vmulq_n_f64(v114, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v114, v114))));
        *(double *)v115.i64 = -*(double *)&v116.i64[1];
        float64x2_t v117 = (float64x2_t)vzip1q_s64(v115, v116);
        *(double *)v115.i64 = vmulq_f64(v327, v111).f64[0] + vaddvq_f64(vmulq_f64(v304, v110));
        *(double *)&v115.i64[1] = vmulq_f64(v322, v111).f64[0] + vaddvq_f64(vmulq_f64(v303, v110));
        int64x2_t v118 = (int64x2_t)vmulq_f64(v117, (float64x2_t)v115);
        float64x2_t v119 = vdivq_f64(v117, (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64((float64x2_t)v118, (float64x2_t)vdupq_laneq_s64(v118, 1)), 0));
        float32x4_t v120 = v339;
        if (v339 >= v340)
        {
          uint64_t v122 = ((uint64_t)v339 - *(void *)__x) >> 4;
          if ((unint64_t)(v122 + 1) >> 60) {
            goto LABEL_314;
          }
          unint64_t v123 = ((uint64_t)v340 - *(void *)__x) >> 3;
          if (v123 <= v122 + 1) {
            unint64_t v123 = v122 + 1;
          }
          if ((unint64_t)v340 - *(void *)__x >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v124 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v124 = v123;
          }
          if (v124)
          {
            float64x2_t v317 = v119;
            uint64_t v125 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v340, v124);
            float64x2_t v119 = v317;
          }
          else
          {
            uint64_t v125 = 0;
          }
          uint64_t v126 = (float64x2_t *)&v125[16 * v122];
          *uint64_t v126 = v119;
          float32x4_t v121 = v126 + 1;
          unint64_t v128 = *(float64x2_t **)__x;
          uint64_t v127 = v339;
          if (v339 != *(float64x2_t **)__x)
          {
            do
            {
              float64x2_t v129 = v127[-1];
              --v127;
              v126[-1] = v129;
              --v126;
            }
            while (v127 != v128);
            uint64_t v127 = *(float64x2_t **)__x;
          }
          *(void *)std::vector<int>::value_type __x = v126;
          float64x2_t v339 = v121;
          float64x2_t v340 = (float64x2_t *)&v125[16 * v124];
          if (v127) {
            operator delete(v127);
          }
        }
        else
        {
          *float64x2_t v339 = v119;
          float32x4_t v121 = v120 + 1;
        }
        float64x2_t v81 = v300;
        int64x2_t v66 = v301;
        float64x2_t v91 = v298;
        float64x2_t v89 = v299;
        float64x2_t v339 = v121;
        ++v97;
        float64x2_t v49 = v341;
      }
      while (v97 < ((char *)v342 - (char *)v341) >> 5);
      uint64_t v130 = *(void *)__x;
    }
    uint64_t v335 = 0;
    float64x2_t v336 = 0;
    uint64_t v337 = 0;
    geom::half_plane_intersection_2<double>(((uint64_t)v121 - v130) >> 4, v130, (uint64_t)&v335);
    uint64_t v163 = v335;
    unint64_t v164 = v336;
    int v165 = (int8x16_t *)a3[1];
    if (v335 != v336)
    {
      unint64_t v166 = a3 + 2;
      *(void *)&v167.f64[0] = v294;
      *(void *)&v168.f64[0] = v296;
      *(void *)&v167.f64[1] = v288;
      *(void *)&v168.f64[1] = v289;
      float64x2_t v295 = v167;
      float64x2_t v297 = v168;
      do
      {
        int8x16_t v169 = (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v167, *v163, 1), v168, v163->f64[0]);
        unint64_t v170 = vextq_s8(v169, v169, 8uLL).u64[0];
        float64x2_t v171 = vmlaq_f64(vmulq_laneq_f64(v322, *v163, 1), *v163, v327);
        if ((unint64_t)v165 >= *v166)
        {
          uint64_t v172 = ((char *)v165 - *a3) >> 5;
          if ((unint64_t)(v172 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v173 = *v166 - (void)*a3;
          uint64_t v174 = v173 >> 4;
          if (v173 >> 4 <= (unint64_t)(v172 + 1)) {
            uint64_t v174 = v172 + 1;
          }
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v175 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v175 = v174;
          }
          if (v175)
          {
            uint64_t v334 = v169.i64[0];
            unint64_t v313 = v170;
            float64x2_t v318 = v171;
            float64x2_t v176 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v175);
            unint64_t v170 = v313;
            float64x2_t v171 = v318;
            v169.i64[0] = v334;
          }
          else
          {
            float64x2_t v176 = 0;
          }
          v169.i64[1] = v170;
          float64x2_t v177 = (int8x16_t *)&v176[32 * v172];
          *float64x2_t v177 = v169;
          v177[1] = (int8x16_t)v171;
          float64x2_t v179 = *a3;
          float32x4_t v178 = a3[1];
          float32x4_t v180 = v177;
          if (v178 != *a3)
          {
            do
            {
              int8x16_t v181 = *((int8x16_t *)v178 - 2);
              int8x16_t v182 = *((int8x16_t *)v178 - 1);
              v178 -= 32;
              v180[-2] = v181;
              v180[-1] = v182;
              v180 -= 2;
            }
            while (v178 != v179);
            float32x4_t v178 = *a3;
          }
          int v165 = v177 + 2;
          *a3 = (char *)v180;
          a3[1] = v177[2].i8;
          a3[2] = &v176[32 * v175];
          if (v178) {
            operator delete(v178);
          }
          float64x2_t v167 = v295;
          float64x2_t v168 = v297;
        }
        else
        {
          v169.i64[1] = v170;
          *int v165 = v169;
          v165[1] = (int8x16_t)v171;
          v165 += 2;
        }
        a3[1] = (char *)v165;
        ++v163;
      }
      while (v163 != v164);
    }
    std::vector<unsigned int>::resize(a4, ((char *)v165 - *a3) >> 4);
    uint64_t v183 = a3[1] - *a3;
    if (v183)
    {
      uint64_t v184 = 0;
      std::vector<int>::pointer v185 = a4->__begin_;
      uint64_t v186 = 4 * (v183 >> 5);
      uint64_t v187 = v186;
      do
      {
        v185[v184] = v184;
        ++v184;
        v187 -= 4;
      }
      while (v187);
      std::vector<int>::pointer v188 = a4->__end_ - 1;
      do
      {
        int v189 = *v185++;
        *v188-- = v189;
        v186 -= 4;
      }
      while (v186);
    }
    unint64_t v190 = (unint64_t)v183 >> 5;
    int v191 = a5[2];
    float64x2_t v192 = a5[1];
    if (v192 >= v191)
    {
      uint64_t v194 = *a5;
      uint64_t v195 = (v192 - *a5) >> 2;
      unint64_t v196 = v195 + 1;
      if ((unint64_t)(v195 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v197 = v191 - v194;
      if (v197 >> 1 > v196) {
        unint64_t v196 = v197 >> 1;
      }
      if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v198 = v196;
      }
      if (v198)
      {
        unint64_t v199 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v198);
        uint64_t v194 = *a5;
        float64x2_t v192 = a5[1];
      }
      else
      {
        unint64_t v199 = 0;
      }
      float32x4_t v272 = &v199[4 * v195];
      int v191 = &v199[4 * v198];
      *(_DWORD *)float32x4_t v272 = v190;
      int v193 = v272 + 4;
      while (v192 != v194)
      {
        int v273 = *((_DWORD *)v192 - 1);
        v192 -= 4;
        *((_DWORD *)v272 - 1) = v273;
        v272 -= 4;
      }
      *a5 = v272;
      a5[1] = v193;
      a5[2] = v191;
      if (v194)
      {
        operator delete(v194);
        int v191 = a5[2];
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v192 = v190;
      int v193 = v192 + 4;
    }
    a5[1] = v193;
    uint64_t v274 = ((unint64_t)(a3[1] - *a3) >> 4) & 0xFFFFFFFE;
    if (v193 >= v191)
    {
      float32x4_t v276 = *a5;
      uint64_t v277 = (v193 - *a5) >> 2;
      unint64_t v278 = v277 + 1;
      if ((unint64_t)(v277 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v279 = v191 - v276;
      if (v279 >> 1 > v278) {
        unint64_t v278 = v279 >> 1;
      }
      if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v280 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v280 = v278;
      }
      if (v280)
      {
        float32x4_t v281 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v280);
        float32x4_t v276 = *a5;
        int v193 = a5[1];
      }
      else
      {
        float32x4_t v281 = 0;
      }
      float32x4_t v282 = &v281[4 * v277];
      float64x2_t v283 = &v281[4 * v280];
      *(_DWORD *)float32x4_t v282 = v274;
      float32x4_t v275 = v282 + 4;
      while (v193 != v276)
      {
        int v284 = *((_DWORD *)v193 - 1);
        v193 -= 4;
        *((_DWORD *)v282 - 1) = v284;
        v282 -= 4;
      }
      *a5 = v282;
      a5[1] = v275;
      a5[2] = v283;
      if (v276) {
        operator delete(v276);
      }
    }
    else
    {
      *(_DWORD *)int v193 = v274;
      float32x4_t v275 = v193 + 4;
    }
    a5[1] = v275;
    if (v335)
    {
      float64x2_t v336 = v335;
      operator delete(v335);
    }
    if (*(void *)__x)
    {
      float64x2_t v339 = *(float64x2_t **)__x;
      operator delete(*(void **)__x);
    }
  }
  uint64_t v285 = (float64x2_t *)*a3;
  float64x2_t v286 = (float64x2_t *)a3[1];
  if (*a3 != (char *)v286)
  {
    do
    {
      float64x2_t v287 = vaddq_f64(a2[1], v285[1]);
      *uint64_t v285 = vaddq_f64(*a2, *v285);
      v285[1] = v287;
      v285 += 2;
    }
    while (v285 != v286);
  }
LABEL_311:
  if (v341)
  {
    float64x2_t v342 = (int8x16_t *)v341;
    operator delete(v341);
  }
}

void geom_dop12_polyhedron_3d(uint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float64x2_t v8 = a2[1];
  v12[0] = *a2;
  v12[1] = v8;
  float64_t v9 = (char **)geom::collection_to_vector<float>(a3);
  float32x4_t v10 = (std::vector<int> *)geom::collection_to_vector<float>(a4);
  float64x2_t v11 = (char **)geom::collection_to_vector<float>(a5);
  geom::dop<(unsigned char)12,double>::compute_polyhedron(a1, v12, v9, v10, v11);
}

void geom::dop<(unsigned char)12,double>::compute_polyhedron(uint64_t a1, float64x2_t *a2, char **a3, std::vector<int> *a4, char **a5)
{
  uint64_t v6 = 0;
  v343[13] = *MEMORY[0x263EF8340];
  a3[1] = *a3;
  a4->__end_ = a4->__begin_;
  a5[1] = *a5;
  float64x2_t v8 = *a2;
  float64x2_t v7 = a2[1];
  do
  {
    float64_t v9 = vmulq_f64(geom::kdop_axes<(unsigned char)12,double>[2 * v6 + 1], v7).f64[0]
       + vaddvq_f64(vmulq_f64(geom::kdop_axes<(unsigned char)12,double>[2 * v6], v8));
    float32x4_t v10 = (double *)(a1 + 8 * v6);
    *(double *)&v343[v6 + 7] = *v10 - v9;
    *(double *)&v343[++v6] = v10[6] - v9;
  }
  while (v6 != 6);
  float64x2_t v341 = 0;
  float64x2_t v342 = 0;
  v343[0] = 0;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm((void **)&v341, 0xCuLL);
  uint64_t v14 = 0;
  uint64_t v15 = -1;
  uint64_t v16 = -1;
  do
  {
    double v17 = *(double *)&v343[v14 + 7];
    *(void *)&v11.f64[0] = v343[v14 + 1];
    if (v17 == v11.f64[0])
    {
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v18 = v15;
      uint64_t v15 = v14;
      if (vabdd_f64(v17, v11.f64[0]) > 0.000001)
      {
        float32x4_t v19 = &geom::kdop_axes<(unsigned char)12,double>[2 * v14];
        int64x2_t v13 = *(int64x2_t *)v19;
        float64x2_t v20 = v19[1];
        float64x2_t v21 = vdivq_f64(v20, v11);
        int8x16_t v22 = (int8x16_t)vdivq_f64(*v19, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0));
        float64x2_t v23 = (float64x2_t)vextq_s8(v22, v22, 8uLL);
        unint64_t v25 = (float64x2_t *)v342;
        unint64_t v24 = v343[0];
        if ((unint64_t)v342 >= v343[0])
        {
          double v27 = v341;
          uint64_t v28 = ((char *)v342 - (char *)v341) >> 5;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59) {
            goto LABEL_314;
          }
          float64x2_t v324 = v20;
          int64x2_t v329 = v13;
          uint64_t v30 = v343[0] - (void)v341;
          if ((uint64_t)(v343[0] - (void)v341) >> 4 > v29) {
            unint64_t v29 = v30 >> 4;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            float64x2_t v314 = v21;
            uint64_t v319 = v22.i64[0];
            float64x2_t v310 = v23;
            float32x4_t v32 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v343, v31);
            float64x2_t v23 = v310;
            float64x2_t v21 = v314;
            v22.i64[0] = v319;
            unint64_t v33 = v32;
            double v27 = v341;
            unint64_t v25 = (float64x2_t *)v342;
          }
          else
          {
            unint64_t v33 = 0;
          }
          v22.i64[1] = *(void *)&v23.f64[0];
          uint64_t v34 = (int8x16_t *)&v33[32 * v28];
          *uint64_t v34 = v22;
          v34[1] = (int8x16_t)v21;
          unint64_t v35 = v34;
          while (v25 != v27)
          {
            float64x2_t v36 = v25[-2];
            float64x2_t v23 = v25[-1];
            v25 -= 2;
            v35[-2] = (int8x16_t)v36;
            v35[-1] = (int8x16_t)v23;
            v35 -= 2;
          }
          unint64_t v24 = (unint64_t)&v33[32 * v31];
          int64x2_t v26 = (float64x2_t *)&v34[2];
          float64x2_t v341 = (float64x2_t *)v35;
          float64x2_t v342 = v34 + 2;
          v343[0] = v24;
          if (v27)
          {
            operator delete(v27);
            unint64_t v24 = v343[0];
          }
          float64x2_t v20 = v324;
          int64x2_t v13 = v329;
        }
        else
        {
          v22.i64[1] = *(void *)&v23.f64[0];
          *float64x2_t v342 = v22;
          v25[1] = v21;
          int64x2_t v26 = v25 + 2;
        }
        float64x2_t v342 = (int8x16_t *)v26;
        *(void *)&v23.f64[0] = v343[v14 + 7];
        float64x2_t v37 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23.f64[0], 0);
        int64x2_t v12 = (int64x2_t)vdivq_f64(v20, v23);
        v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
        float64x2_t v11 = vdivq_f64((float64x2_t)v13, v37);
        unint64_t v38 = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
        if ((unint64_t)v26 >= v24)
        {
          float32x4_t v40 = v341;
          uint64_t v41 = ((char *)v26 - (char *)v341) >> 5;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v43 = v24 - (void)v341;
          if (v43 >> 4 > v42) {
            unint64_t v42 = v43 >> 4;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v44 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            float64_t v325 = v11.f64[0];
            int64x2_t v330 = v12;
            unint64_t v320 = v38;
            float32x4_t v45 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v343, v44);
            unint64_t v38 = v320;
            v11.f64[0] = v325;
            int64x2_t v12 = v330;
            unint64_t v46 = v45;
            float32x4_t v40 = v341;
            int64x2_t v26 = (float64x2_t *)v342;
          }
          else
          {
            unint64_t v46 = 0;
          }
          *(void *)&v11.f64[1] = v38;
          float64x2_t v47 = (float64x2_t *)&v46[32 * v41];
          *float64x2_t v47 = v11;
          v47[1] = (float64x2_t)v12;
          unint64_t v48 = v47;
          while (v26 != v40)
          {
            float64x2_t v11 = v26[-2];
            int64x2_t v12 = (int64x2_t)v26[-1];
            v26 -= 2;
            v48[-2] = v11;
            v48[-1] = (float64x2_t)v12;
            v48 -= 2;
          }
          float32x4_t v39 = (int8x16_t *)&v47[2];
          float64x2_t v341 = v48;
          float64x2_t v342 = (int8x16_t *)&v47[2];
          v343[0] = &v46[32 * v44];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)&v11.f64[1] = v38;
          *int64x2_t v26 = v11;
          v26[1] = (float64x2_t)v12;
          float32x4_t v39 = (int8x16_t *)&v26[2];
        }
        float64x2_t v342 = v39;
        uint64_t v16 = v14;
        uint64_t v15 = v18;
      }
    }
    ++v14;
  }
  while (v14 != 6);
  float64x2_t v49 = v341;
  uint64_t v50 = ((char *)v342 - (char *)v341) >> 5;
  if (!v50)
  {
    unint64_t v61 = (unint64_t)a3[2];
    unint64_t v62 = (float64x2_t *)a3[1];
    if ((unint64_t)v62 >= v61)
    {
      uint64_t v76 = ((char *)v62 - *a3) >> 5;
      unint64_t v77 = v76 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v76 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v78 = v61 - (void)*a3;
      if (v78 >> 4 > v77) {
        unint64_t v77 = v78 >> 4;
      }
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v79 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79) {
        float32x4_t v80 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v79);
      }
      else {
        float32x4_t v80 = 0;
      }
      float64x2_t v146 = (float64x2_t *)&v80[32 * v76];
      float32x4_t v147 = &v80[32 * v79];
      float64x2_t v148 = a2[1];
      *float64x2_t v146 = *a2;
      v146[1] = v148;
      uint64_t v64 = (char *)&v146[2];
      uint64_t v150 = *a3;
      float32x4_t v149 = a3[1];
      if (v149 != *a3)
      {
        do
        {
          float64x2_t v151 = *((float64x2_t *)v149 - 2);
          float64x2_t v152 = *((float64x2_t *)v149 - 1);
          v149 -= 32;
          v146[-2] = v151;
          v146[-1] = v152;
          v146 -= 2;
        }
        while (v149 != v150);
        float32x4_t v149 = *a3;
      }
      *a3 = (char *)v146;
      a3[1] = v64;
      a3[2] = v147;
      if (v149) {
        operator delete(v149);
      }
    }
    else
    {
      float64x2_t v63 = a2[1];
      *unint64_t v62 = *a2;
      v62[1] = v63;
      uint64_t v64 = (char *)&v62[2];
      uint64_t v60 = a5;
    }
    a3[1] = v64;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    unsigned int v154 = v60 + 2;
    unint64_t v153 = v60[2];
    uint64_t v155 = v60[1];
    if (v155 >= v153)
    {
      uint64_t v157 = *v60;
      uint64_t v158 = (v155 - *v60) >> 2;
      unint64_t v159 = v158 + 1;
      if ((unint64_t)(v158 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v160 = v153 - v157;
      if (v160 >> 1 > v159) {
        unint64_t v159 = v160 >> 1;
      }
      if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v161 = v159;
      }
      if (v161)
      {
        uint64_t v162 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v161);
        uint64_t v157 = *v60;
        uint64_t v155 = v60[1];
      }
      else
      {
        uint64_t v162 = 0;
      }
      unint64_t v217 = &v162[4 * v158];
      unint64_t v153 = &v162[4 * v161];
      *(_DWORD *)unint64_t v217 = 3;
      float32x4_t v156 = v217 + 4;
      while (v155 != v157)
      {
        int v218 = *((_DWORD *)v155 - 1);
        v155 -= 4;
        *((_DWORD *)v217 - 1) = v218;
        v217 -= 4;
      }
      *uint64_t v60 = v217;
      v60[1] = v156;
      v60[2] = v153;
      if (v157)
      {
        operator delete(v157);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v155 = 3;
      float32x4_t v156 = v155 + 4;
    }
    v60[1] = v156;
    if (v156 >= v153)
    {
      int v220 = *v60;
      uint64_t v221 = (v156 - *v60) >> 2;
      unint64_t v222 = v221 + 1;
      if ((unint64_t)(v221 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v223 = v153 - v220;
      if (v223 >> 1 > v222) {
        unint64_t v222 = v223 >> 1;
      }
      if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v224 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v224 = v222;
      }
      if (v224)
      {
        unint64_t v225 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v224);
        int v220 = *v60;
        float32x4_t v156 = v60[1];
      }
      else
      {
        unint64_t v225 = 0;
      }
      float64x2_t v235 = &v225[4 * v221];
      unint64_t v153 = &v225[4 * v224];
      *(_DWORD *)float64x2_t v235 = 6;
      uint64_t v219 = v235 + 4;
      while (v156 != v220)
      {
        int v236 = *((_DWORD *)v156 - 1);
        v156 -= 4;
        *((_DWORD *)v235 - 1) = v236;
        v235 -= 4;
      }
      *uint64_t v60 = v235;
      v60[1] = v219;
      v60[2] = v153;
      if (v220)
      {
        operator delete(v220);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)float32x4_t v156 = 6;
      uint64_t v219 = v156 + 4;
    }
    v60[1] = v219;
    if (v219 >= v153)
    {
      uint64_t v238 = *v60;
      uint64_t v239 = (v219 - *v60) >> 2;
      unint64_t v240 = v239 + 1;
      if ((unint64_t)(v239 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v241 = v153 - v238;
      if (v241 >> 1 > v240) {
        unint64_t v240 = v241 >> 1;
      }
      if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v242 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v242 = v240;
      }
      if (v242)
      {
        int v243 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v242);
        uint64_t v238 = *v60;
        uint64_t v219 = v60[1];
      }
      else
      {
        int v243 = 0;
      }
      uint64_t v252 = &v243[4 * v239];
      unint64_t v153 = &v243[4 * v242];
      *(_DWORD *)uint64_t v252 = 9;
      unint64_t v237 = v252 + 4;
      while (v219 != v238)
      {
        int v253 = *((_DWORD *)v219 - 1);
        v219 -= 4;
        *((_DWORD *)v252 - 1) = v253;
        v252 -= 4;
      }
      *uint64_t v60 = v252;
      v60[1] = v237;
      v60[2] = v153;
      if (v238)
      {
        operator delete(v238);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v219 = 9;
      unint64_t v237 = v219 + 4;
    }
    v60[1] = v237;
    if (v237 < v153)
    {
LABEL_263:
      *(_DWORD *)unint64_t v237 = 12;
      float64x2_t v262 = v237 + 4;
LABEL_282:
      v60[1] = v262;
      goto LABEL_311;
    }
    uint64_t v254 = *v60;
    uint64_t v255 = (v237 - *v60) >> 2;
    unint64_t v256 = v255 + 1;
    if (!((unint64_t)(v255 + 1) >> 62))
    {
      uint64_t v257 = v153 - v254;
      if (v257 >> 1 > v256) {
        unint64_t v256 = v257 >> 1;
      }
      if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v258 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v258 = v256;
      }
      if (v258)
      {
        int v259 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v258);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int v259 = 0;
      }
      int32x2_t v268 = &v259[4 * v255];
      float32x4_t v269 = &v259[4 * v258];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v270 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v270;
        v268 -= 4;
      }
      goto LABEL_280;
    }
    goto LABEL_314;
  }
  if (v50 == 2)
  {
    float32x4_t v51 = &geom::kdop_axes<(unsigned char)12,double>[2 * v16];
    float64x2_t v52 = *v51;
    float64x2_t v53 = v51[1];
    v11.f64[0] = *(float64_t *)(a1 + 8 * v16);
    float64x2_t v54 = vmulq_f64(v53, v11);
    int8x16_t v55 = (int8x16_t)vmulq_n_f64(*v51, v11.f64[0]);
    unint64_t v56 = vextq_s8(v55, v55, 8uLL).u64[0];
    unint64_t v57 = (unint64_t)a3[2];
    float32x4_t v58 = (int8x16_t *)a3[1];
    if ((unint64_t)v58 >= v57)
    {
      uint64_t v71 = ((char *)v58 - *a3) >> 5;
      unint64_t v72 = v71 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v71 + 1) >> 59) {
        goto LABEL_314;
      }
      float64x2_t v326 = v53;
      float64x2_t v331 = v52;
      uint64_t v73 = v57 - (void)*a3;
      if (v73 >> 4 > v72) {
        unint64_t v72 = v73 >> 4;
      }
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v74 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        uint64_t v315 = v55.i64[0];
        float64x2_t v321 = v54;
        unint64_t v311 = v56;
        int32x4_t v75 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v74);
        unint64_t v56 = v311;
        v55.i64[0] = v315;
        float64x2_t v54 = v321;
      }
      else
      {
        int32x4_t v75 = 0;
      }
      float64x2_t v131 = (int8x16_t *)&v75[32 * v71];
      float32x4_t v132 = &v75[32 * v74];
      v55.i64[1] = v56;
      *float64x2_t v131 = v55;
      v131[1] = (int8x16_t)v54;
      uint64_t v59 = v131 + 2;
      float32x4_t v134 = *a3;
      float64x2_t v133 = a3[1];
      if (v133 != *a3)
      {
        do
        {
          int8x16_t v135 = *((int8x16_t *)v133 - 2);
          float64x2_t v54 = *((float64x2_t *)v133 - 1);
          v133 -= 32;
          v131[-2] = v135;
          v131[-1] = (int8x16_t)v54;
          v131 -= 2;
        }
        while (v133 != v134);
        float64x2_t v133 = *a3;
      }
      *a3 = (char *)v131;
      a3[1] = (char *)v59;
      a3[2] = v132;
      if (v133) {
        operator delete(v133);
      }
      float64x2_t v53 = v326;
      float64x2_t v52 = v331;
    }
    else
    {
      v55.i64[1] = v56;
      *float32x4_t v58 = v55;
      v58[1] = (int8x16_t)v54;
      uint64_t v59 = v58 + 2;
      uint64_t v60 = a5;
    }
    a3[1] = (char *)v59;
    v54.f64[0] = *(float64_t *)(a1 + 8 * v16 + 48);
    float64x2_t v136 = vmulq_f64(v53, v54);
    *(void *)&v52.f64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
    int8x16_t v137 = (int8x16_t)vmulq_n_f64(v52, v54.f64[0]);
    unint64_t v138 = vextq_s8(v137, v137, 8uLL).u64[0];
    unint64_t v139 = (unint64_t)a3[2];
    if ((unint64_t)v59 >= v139)
    {
      uint64_t v141 = ((char *)v59 - *a3) >> 5;
      if ((unint64_t)(v141 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v142 = v139 - (void)*a3;
      uint64_t v143 = v142 >> 4;
      if (v142 >> 4 <= (unint64_t)(v141 + 1)) {
        uint64_t v143 = v141 + 1;
      }
      if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v144 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v144 = v143;
      }
      if (v144)
      {
        uint64_t v328 = v137.i64[0];
        float64x2_t v333 = v136;
        unint64_t v323 = v138;
        float64x2_t v145 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v144);
        unint64_t v138 = v323;
        v137.i64[0] = v328;
        float64x2_t v136 = v333;
      }
      else
      {
        float64x2_t v145 = 0;
      }
      int v200 = (int8x16_t *)&v145[32 * v141];
      float64x2_t v201 = &v145[32 * v144];
      v137.i64[1] = v138;
      *int v200 = v137;
      v200[1] = (int8x16_t)v136;
      uint64_t v140 = v200 + 2;
      uint64_t v203 = *a3;
      int v202 = a3[1];
      if (v202 != *a3)
      {
        do
        {
          int8x16_t v204 = *((int8x16_t *)v202 - 2);
          int8x16_t v205 = *((int8x16_t *)v202 - 1);
          v202 -= 32;
          v200[-2] = v204;
          v200[-1] = v205;
          v200 -= 2;
        }
        while (v202 != v203);
        int v202 = *a3;
      }
      *a3 = (char *)v200;
      a3[1] = (char *)v140;
      a3[2] = v201;
      if (v202) {
        operator delete(v202);
      }
    }
    else
    {
      v137.i64[1] = v138;
      *uint64_t v59 = v137;
      v59[1] = (int8x16_t)v136;
      uint64_t v140 = v59 + 2;
    }
    a3[1] = (char *)v140;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    std::vector<int>::pointer begin = a4->__begin_;
    begin[10] = 1;
    begin[7] = 1;
    begin[4] = 1;
    unint64_t v208 = v60 + 2;
    uint64_t v207 = v60[2];
    int v209 = v60[1];
    if (v209 >= v207)
    {
      int v211 = *v60;
      uint64_t v212 = (v209 - *v60) >> 2;
      unint64_t v213 = v212 + 1;
      if ((unint64_t)(v212 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v214 = v207 - v211;
      if (v214 >> 1 > v213) {
        unint64_t v213 = v214 >> 1;
      }
      if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v215 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v215 = v213;
      }
      if (v215)
      {
        uint64_t v216 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v215);
        int v211 = *v60;
        int v209 = v60[1];
      }
      else
      {
        uint64_t v216 = 0;
      }
      int v226 = &v216[4 * v212];
      uint64_t v207 = &v216[4 * v215];
      *(_DWORD *)int v226 = 3;
      float64x2_t v210 = v226 + 4;
      while (v209 != v211)
      {
        int v227 = *((_DWORD *)v209 - 1);
        v209 -= 4;
        *((_DWORD *)v226 - 1) = v227;
        v226 -= 4;
      }
      *uint64_t v60 = v226;
      v60[1] = v210;
      v60[2] = v207;
      if (v211)
      {
        operator delete(v211);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v209 = 3;
      float64x2_t v210 = v209 + 4;
    }
    v60[1] = v210;
    if (v210 >= v207)
    {
      unint64_t v229 = *v60;
      uint64_t v230 = (v210 - *v60) >> 2;
      unint64_t v231 = v230 + 1;
      if ((unint64_t)(v230 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v232 = v207 - v229;
      if (v232 >> 1 > v231) {
        unint64_t v231 = v232 >> 1;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        int v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v233);
        unint64_t v229 = *v60;
        float64x2_t v210 = v60[1];
      }
      else
      {
        int v234 = 0;
      }
      int v244 = &v234[4 * v230];
      uint64_t v207 = &v234[4 * v233];
      *(_DWORD *)int v244 = 6;
      int v228 = v244 + 4;
      while (v210 != v229)
      {
        int v245 = *((_DWORD *)v210 - 1);
        v210 -= 4;
        *((_DWORD *)v244 - 1) = v245;
        v244 -= 4;
      }
      *uint64_t v60 = v244;
      v60[1] = v228;
      v60[2] = v207;
      if (v229)
      {
        operator delete(v229);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v210 = 6;
      int v228 = v210 + 4;
    }
    v60[1] = v228;
    if (v228 >= v207)
    {
      int v246 = *v60;
      uint64_t v247 = (v228 - *v60) >> 2;
      unint64_t v248 = v247 + 1;
      if ((unint64_t)(v247 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v249 = v207 - v246;
      if (v249 >> 1 > v248) {
        unint64_t v248 = v249 >> 1;
      }
      if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v250 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v250 = v248;
      }
      if (v250)
      {
        unint64_t v251 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v250);
        int v246 = *v60;
        int v228 = v60[1];
      }
      else
      {
        unint64_t v251 = 0;
      }
      float64x2_t v260 = &v251[4 * v247];
      uint64_t v207 = &v251[4 * v250];
      *(_DWORD *)float64x2_t v260 = 9;
      unint64_t v237 = v260 + 4;
      while (v228 != v246)
      {
        int v261 = *((_DWORD *)v228 - 1);
        v228 -= 4;
        *((_DWORD *)v260 - 1) = v261;
        v260 -= 4;
      }
      *uint64_t v60 = v260;
      v60[1] = v237;
      v60[2] = v207;
      if (v246)
      {
        operator delete(v246);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v228 = 9;
      unint64_t v237 = v228 + 4;
    }
    v60[1] = v237;
    if (v237 < v207) {
      goto LABEL_263;
    }
    uint64_t v254 = *v60;
    uint64_t v263 = (v237 - *v60) >> 2;
    unint64_t v264 = v263 + 1;
    if (!((unint64_t)(v263 + 1) >> 62))
    {
      uint64_t v265 = v207 - v254;
      if (v265 >> 1 > v264) {
        unint64_t v264 = v265 >> 1;
      }
      if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v266 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v266 = v264;
      }
      if (v266)
      {
        int32x4_t v267 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v266);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int32x4_t v267 = 0;
      }
      int32x2_t v268 = &v267[4 * v263];
      float32x4_t v269 = &v267[4 * v266];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v271 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v271;
        v268 -= 4;
      }
LABEL_280:
      *uint64_t v60 = v268;
      v60[1] = v262;
      v60[2] = v269;
      if (v254) {
        operator delete(v254);
      }
      goto LABEL_282;
    }
LABEL_314:
    abort();
  }
  if ((unint64_t)((char *)v342 - (char *)v341) > 0x17F)
  {
    geom::half_plane_intersection_3<double>(0xCuLL, v341, (void **)a3, (unint64_t *)a4, a5);
  }
  else
  {
    *(void *)std::vector<int>::value_type __x = 0;
    float64x2_t v339 = 0;
    float64x2_t v340 = 0;
    f64 = (_OWORD *)geom::kdop_axes<(unsigned char)12,double>[2 * v15].f64;
    int64x2_t v66 = *(int64x2_t *)f64;
    float64x2_t v67 = *((float64x2_t *)f64 + 1);
    double v68 = fabs(v67.f64[0]);
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v13.i64 = -*(double *)&v66.i64[1];
      float64x2_t v70 = 0uLL;
      float64x2_t v69 = (float64x2_t)vzip1q_s64(v13, v66);
    }
    else
    {
      v69.f64[0] = 0.0;
      v69.f64[1] = -v67.f64[0];
      float64x2_t v70 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    }
    float64x2_t v81 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    float64x2_t v82 = vmulq_f64(v70, v70);
    v82.f64[0] = 1.0 / sqrt(v82.f64[0] + vaddvq_f64(vmulq_f64(v69, v69)));
    float64x2_t v327 = vmulq_f64(v70, v82);
    int64x2_t v332 = *((int64x2_t *)f64 + 1);
    int8x16_t v83 = (int8x16_t)vmulq_n_f64(v69, v82.f64[0]);
    unint64_t v289 = vextq_s8(v83, v83, 8uLL).u64[0];
    uint64_t v296 = v83.i64[0];
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v12.i64 = -*(double *)&v66.i64[1];
      float64x2_t v85 = 0uLL;
      float64x2_t v84 = (float64x2_t)vzip1q_s64(v12, v66);
    }
    else
    {
      v84.f64[0] = 0.0;
      v84.f64[1] = -v67.f64[0];
      float64x2_t v85 = v81;
    }
    float64x2_t v86 = vmulq_f64(v85, v85);
    v86.f64[0] = 1.0 / sqrt(v86.f64[0] + vaddvq_f64(vmulq_f64(v84, v84)));
    float64x2_t v87 = vmulq_n_f64(v84, v86.f64[0]);
    float64x2_t v88 = vmulq_f64(v85, v86);
    v89.f64[0] = *((float64_t *)f64 + 2);
    v89.f64[1] = *(float64_t *)f64;
    float64x2_t v305 = vnegq_f64(v67);
    float64x2_t v90 = vmlaq_laneq_f64(vmulq_laneq_f64(v305, v87, 1), v88, (float64x2_t)v66, 1);
    v88.f64[1] = v87.f64[0];
    float64x2_t v91 = vnegq_f64((float64x2_t)v66);
    float64x2_t v92 = vmlaq_f64(vmulq_f64(v88, v91), v87, v89);
    float64x2_t v93 = vmulq_f64(v92, v92);
    double v94 = vmulq_f64(v90, v90).f64[0];
    v90.f64[1] = v92.f64[0];
    v93.f64[0] = 1.0 / sqrt(v93.f64[1] + v94 + v93.f64[0]);
    int8x16_t v95 = (int8x16_t)vmulq_n_f64(v90, v93.f64[0]);
    unint64_t v96 = vextq_s8(v95, v95, 8uLL).u64[0];
    float64x2_t v322 = vmulq_laneq_f64(v93, v92, 1);
    unint64_t v288 = v96;
    uint64_t v294 = v95.i64[0];
    if (v342 == (int8x16_t *)v341)
    {
      uint64_t v130 = 0;
      float32x4_t v121 = 0;
    }
    else
    {
      unint64_t v97 = 0;
      *(void *)&v98.f64[0] = v83.i64[0];
      *(void *)&v98.f64[1] = v289;
      v95.i64[1] = v96;
      float64x2_t v303 = (float64x2_t)v95;
      float64x2_t v304 = v98;
      int64x2_t v301 = *(int64x2_t *)f64;
      float64x2_t v302 = (float64x2_t)vdupq_lane_s64(v332.i64[0], 0);
      *(void *)&v91.f64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
      *(void *)&v89.f64[1] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
      float64x2_t v299 = v89;
      float64x2_t v300 = v81;
      float64x2_t v298 = v91;
      do
      {
        int32x4_t v99 = &v49[2 * v97];
        v100.f64[0] = v99[1].f64[0];
        v100.f64[1] = v99->f64[0];
        float64x2_t v101 = vmlaq_f64(vmulq_f64(v100, v91), *v99, v89);
        float64x2_t v102 = vmlaq_f64(vmulq_laneq_f64(v305, *v99, 1), v99[1], v81);
        int64x2_t v306 = (int64x2_t)v99[1];
        float64x2_t v103 = vmulq_f64(v101, v101);
        float64_t v104 = v101.f64[0];
        float64x2_t v308 = v101;
        v105.f64[0] = v102.f64[0];
        v103.f64[0] = 1.0 / sqrt(v103.f64[1] + vmulq_f64(v102, v102).f64[0] + v103.f64[0]);
        float64x2_t v316 = v103;
        int64x2_t v106 = vzip1q_s64(v66, *(int64x2_t *)v99);
        int64x2_t v107 = vzip2q_s64(v66, *(int64x2_t *)v99);
        float64x2_t v108 = (float64x2_t)vzip1q_s64(v332, v306);
        float64x2_t v309 = (float64x2_t)vzip1q_s64(v106, v107);
        float64x2_t v312 = (float64x2_t)vzip2q_s64(v106, v107);
        v344.columns[0] = (simd_double2)vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)v106, *(double *)v66.i64), v81, (float64x2_t)v107), v302, v108);
        v344.columns[1] = (simd_double2)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v106, v99->f64[0]), (float64x2_t)v107, *v99, 1), v108, *(double *)v306.i64);
        v105.f64[1] = v104;
        float64x2_t v307 = v105;
        float64x2_t v109 = (float64x2_t)__invert_d2(v344).columns[1];
        float64x2_t v110 = vmlaq_laneq_f64(vmulq_n_f64(v309, v109.f64[0]), v312, v109, 1);
        float64x2_t v111 = vmlaq_laneq_f64(vmulq_f64((float64x2_t)v332, v109), (float64x2_t)v306, v109, 1);
        float64x2_t v112 = vmulq_n_f64(v307, v316.f64[0]);
        float64x2_t v113 = vmulq_laneq_f64(v316, v308, 1);
        v114.f64[0] = vmulq_f64(v327, v113).f64[0] + vaddvq_f64(vmulq_f64(v304, v112));
        int64x2_t v115 = (int64x2_t)vmulq_f64(v322, v113);
        v114.f64[1] = *(double *)v115.i64 + vaddvq_f64(vmulq_f64(v303, v112));
        int64x2_t v116 = (int64x2_t)vmulq_n_f64(v114, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v114, v114))));
        *(double *)v115.i64 = -*(double *)&v116.i64[1];
        float64x2_t v117 = (float64x2_t)vzip1q_s64(v115, v116);
        *(double *)v115.i64 = vmulq_f64(v327, v111).f64[0] + vaddvq_f64(vmulq_f64(v304, v110));
        *(double *)&v115.i64[1] = vmulq_f64(v322, v111).f64[0] + vaddvq_f64(vmulq_f64(v303, v110));
        int64x2_t v118 = (int64x2_t)vmulq_f64(v117, (float64x2_t)v115);
        float64x2_t v119 = vdivq_f64(v117, (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64((float64x2_t)v118, (float64x2_t)vdupq_laneq_s64(v118, 1)), 0));
        float32x4_t v120 = v339;
        if (v339 >= v340)
        {
          uint64_t v122 = ((uint64_t)v339 - *(void *)__x) >> 4;
          if ((unint64_t)(v122 + 1) >> 60) {
            goto LABEL_314;
          }
          unint64_t v123 = ((uint64_t)v340 - *(void *)__x) >> 3;
          if (v123 <= v122 + 1) {
            unint64_t v123 = v122 + 1;
          }
          if ((unint64_t)v340 - *(void *)__x >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v124 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v124 = v123;
          }
          if (v124)
          {
            float64x2_t v317 = v119;
            uint64_t v125 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v340, v124);
            float64x2_t v119 = v317;
          }
          else
          {
            uint64_t v125 = 0;
          }
          uint64_t v126 = (float64x2_t *)&v125[16 * v122];
          *uint64_t v126 = v119;
          float32x4_t v121 = v126 + 1;
          unint64_t v128 = *(float64x2_t **)__x;
          uint64_t v127 = v339;
          if (v339 != *(float64x2_t **)__x)
          {
            do
            {
              float64x2_t v129 = v127[-1];
              --v127;
              v126[-1] = v129;
              --v126;
            }
            while (v127 != v128);
            uint64_t v127 = *(float64x2_t **)__x;
          }
          *(void *)std::vector<int>::value_type __x = v126;
          float64x2_t v339 = v121;
          float64x2_t v340 = (float64x2_t *)&v125[16 * v124];
          if (v127) {
            operator delete(v127);
          }
        }
        else
        {
          *float64x2_t v339 = v119;
          float32x4_t v121 = v120 + 1;
        }
        float64x2_t v81 = v300;
        int64x2_t v66 = v301;
        float64x2_t v91 = v298;
        float64x2_t v89 = v299;
        float64x2_t v339 = v121;
        ++v97;
        float64x2_t v49 = v341;
      }
      while (v97 < ((char *)v342 - (char *)v341) >> 5);
      uint64_t v130 = *(void *)__x;
    }
    std::vector<int> __p = 0;
    float64x2_t v336 = 0;
    uint64_t v337 = 0;
    geom::half_plane_intersection_2<double>(((uint64_t)v121 - v130) >> 4, v130, (uint64_t)&__p);
    uint64_t v163 = (float64x2_t *)__p;
    unint64_t v164 = v336;
    int v165 = (int8x16_t *)a3[1];
    if (__p != v336)
    {
      unint64_t v166 = a3 + 2;
      *(void *)&v167.f64[0] = v294;
      *(void *)&v168.f64[0] = v296;
      *(void *)&v167.f64[1] = v288;
      *(void *)&v168.f64[1] = v289;
      float64x2_t v295 = v167;
      float64x2_t v297 = v168;
      do
      {
        int8x16_t v169 = (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v167, *v163, 1), v168, v163->f64[0]);
        unint64_t v170 = vextq_s8(v169, v169, 8uLL).u64[0];
        float64x2_t v171 = vmlaq_f64(vmulq_laneq_f64(v322, *v163, 1), *v163, v327);
        if ((unint64_t)v165 >= *v166)
        {
          uint64_t v172 = ((char *)v165 - *a3) >> 5;
          if ((unint64_t)(v172 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v173 = *v166 - (void)*a3;
          uint64_t v174 = v173 >> 4;
          if (v173 >> 4 <= (unint64_t)(v172 + 1)) {
            uint64_t v174 = v172 + 1;
          }
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v175 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v175 = v174;
          }
          if (v175)
          {
            uint64_t v334 = v169.i64[0];
            unint64_t v313 = v170;
            float64x2_t v318 = v171;
            float64x2_t v176 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v175);
            unint64_t v170 = v313;
            float64x2_t v171 = v318;
            v169.i64[0] = v334;
          }
          else
          {
            float64x2_t v176 = 0;
          }
          v169.i64[1] = v170;
          float64x2_t v177 = (int8x16_t *)&v176[32 * v172];
          *float64x2_t v177 = v169;
          v177[1] = (int8x16_t)v171;
          float64x2_t v179 = *a3;
          float32x4_t v178 = a3[1];
          float32x4_t v180 = v177;
          if (v178 != *a3)
          {
            do
            {
              int8x16_t v181 = *((int8x16_t *)v178 - 2);
              int8x16_t v182 = *((int8x16_t *)v178 - 1);
              v178 -= 32;
              v180[-2] = v181;
              v180[-1] = v182;
              v180 -= 2;
            }
            while (v178 != v179);
            float32x4_t v178 = *a3;
          }
          int v165 = v177 + 2;
          *a3 = (char *)v180;
          a3[1] = v177[2].i8;
          a3[2] = &v176[32 * v175];
          if (v178) {
            operator delete(v178);
          }
          float64x2_t v167 = v295;
          float64x2_t v168 = v297;
        }
        else
        {
          v169.i64[1] = v170;
          *int v165 = v169;
          v165[1] = (int8x16_t)v171;
          v165 += 2;
        }
        a3[1] = (char *)v165;
        ++v163;
      }
      while (v163 != v164);
    }
    std::vector<unsigned int>::resize(a4, ((char *)v165 - *a3) >> 4);
    uint64_t v183 = a3[1] - *a3;
    if (v183)
    {
      uint64_t v184 = 0;
      std::vector<int>::pointer v185 = a4->__begin_;
      uint64_t v186 = 4 * (v183 >> 5);
      uint64_t v187 = v186;
      do
      {
        v185[v184] = v184;
        ++v184;
        v187 -= 4;
      }
      while (v187);
      std::vector<int>::pointer v188 = a4->__end_ - 1;
      do
      {
        int v189 = *v185++;
        *v188-- = v189;
        v186 -= 4;
      }
      while (v186);
    }
    unint64_t v190 = (unint64_t)v183 >> 5;
    int v191 = a5[2];
    float64x2_t v192 = a5[1];
    if (v192 >= v191)
    {
      uint64_t v194 = *a5;
      uint64_t v195 = (v192 - *a5) >> 2;
      unint64_t v196 = v195 + 1;
      if ((unint64_t)(v195 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v197 = v191 - v194;
      if (v197 >> 1 > v196) {
        unint64_t v196 = v197 >> 1;
      }
      if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v198 = v196;
      }
      if (v198)
      {
        unint64_t v199 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v198);
        uint64_t v194 = *a5;
        float64x2_t v192 = a5[1];
      }
      else
      {
        unint64_t v199 = 0;
      }
      float32x4_t v272 = &v199[4 * v195];
      int v191 = &v199[4 * v198];
      *(_DWORD *)float32x4_t v272 = v190;
      int v193 = v272 + 4;
      while (v192 != v194)
      {
        int v273 = *((_DWORD *)v192 - 1);
        v192 -= 4;
        *((_DWORD *)v272 - 1) = v273;
        v272 -= 4;
      }
      *a5 = v272;
      a5[1] = v193;
      a5[2] = v191;
      if (v194)
      {
        operator delete(v194);
        int v191 = a5[2];
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v192 = v190;
      int v193 = v192 + 4;
    }
    a5[1] = v193;
    uint64_t v274 = ((unint64_t)(a3[1] - *a3) >> 4) & 0xFFFFFFFE;
    if (v193 >= v191)
    {
      float32x4_t v276 = *a5;
      uint64_t v277 = (v193 - *a5) >> 2;
      unint64_t v278 = v277 + 1;
      if ((unint64_t)(v277 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v279 = v191 - v276;
      if (v279 >> 1 > v278) {
        unint64_t v278 = v279 >> 1;
      }
      if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v280 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v280 = v278;
      }
      if (v280)
      {
        float32x4_t v281 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v280);
        float32x4_t v276 = *a5;
        int v193 = a5[1];
      }
      else
      {
        float32x4_t v281 = 0;
      }
      float32x4_t v282 = &v281[4 * v277];
      float64x2_t v283 = &v281[4 * v280];
      *(_DWORD *)float32x4_t v282 = v274;
      float32x4_t v275 = v282 + 4;
      while (v193 != v276)
      {
        int v284 = *((_DWORD *)v193 - 1);
        v193 -= 4;
        *((_DWORD *)v282 - 1) = v284;
        v282 -= 4;
      }
      *a5 = v282;
      a5[1] = v275;
      a5[2] = v283;
      if (v276) {
        operator delete(v276);
      }
    }
    else
    {
      *(_DWORD *)int v193 = v274;
      float32x4_t v275 = v193 + 4;
    }
    a5[1] = v275;
    if (__p)
    {
      float64x2_t v336 = (float64x2_t *)__p;
      operator delete(__p);
    }
    if (*(void *)__x)
    {
      float64x2_t v339 = *(float64x2_t **)__x;
      operator delete(*(void **)__x);
    }
  }
  uint64_t v285 = (float64x2_t *)*a3;
  float64x2_t v286 = (float64x2_t *)a3[1];
  if (*a3 != (char *)v286)
  {
    do
    {
      float64x2_t v287 = vaddq_f64(a2[1], v285[1]);
      *uint64_t v285 = vaddq_f64(*a2, *v285);
      v285[1] = v287;
      v285 += 2;
    }
    while (v285 != v286);
  }
LABEL_311:
  if (v341)
  {
    float64x2_t v342 = (int8x16_t *)v341;
    operator delete(v341);
  }
}

void geom_dop14_polyhedron_3d(uint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float64x2_t v8 = a2[1];
  v12[0] = *a2;
  v12[1] = v8;
  float64_t v9 = (char **)geom::collection_to_vector<float>(a3);
  float32x4_t v10 = (std::vector<int> *)geom::collection_to_vector<float>(a4);
  float64x2_t v11 = (char **)geom::collection_to_vector<float>(a5);
  geom::dop<(unsigned char)14,double>::compute_polyhedron(a1, v12, v9, v10, v11);
}

void geom::dop<(unsigned char)14,double>::compute_polyhedron(uint64_t a1, float64x2_t *a2, char **a3, std::vector<int> *a4, char **a5)
{
  uint64_t v6 = 0;
  void v343[15] = *MEMORY[0x263EF8340];
  a3[1] = *a3;
  a4->__end_ = a4->__begin_;
  a5[1] = *a5;
  float64x2_t v8 = *a2;
  float64x2_t v7 = a2[1];
  do
  {
    float64_t v9 = vmulq_f64(geom::kdop_axes<(unsigned char)14,double>[2 * v6 + 1], v7).f64[0]
       + vaddvq_f64(vmulq_f64(geom::kdop_axes<(unsigned char)14,double>[2 * v6], v8));
    float32x4_t v10 = (double *)(a1 + 8 * v6);
    *(double *)&v343[v6 + 8] = *v10 - v9;
    *(double *)&v343[++v6] = v10[8] - v9;
  }
  while (v6 != 7);
  float64x2_t v341 = 0;
  float64x2_t v342 = 0;
  v343[0] = 0;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm((void **)&v341, 0xEuLL);
  uint64_t v14 = 0;
  uint64_t v15 = -1;
  uint64_t v16 = -1;
  do
  {
    double v17 = *(double *)&v343[v14 + 8];
    *(void *)&v11.f64[0] = v343[v14 + 1];
    if (v17 == v11.f64[0])
    {
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v18 = v15;
      uint64_t v15 = v14;
      if (vabdd_f64(v17, v11.f64[0]) > 0.000001)
      {
        float32x4_t v19 = &geom::kdop_axes<(unsigned char)14,double>[2 * v14];
        int64x2_t v13 = *(int64x2_t *)v19;
        float64x2_t v20 = v19[1];
        float64x2_t v21 = vdivq_f64(v20, v11);
        int8x16_t v22 = (int8x16_t)vdivq_f64(*v19, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0));
        float64x2_t v23 = (float64x2_t)vextq_s8(v22, v22, 8uLL);
        unint64_t v25 = (float64x2_t *)v342;
        unint64_t v24 = v343[0];
        if ((unint64_t)v342 >= v343[0])
        {
          double v27 = v341;
          uint64_t v28 = ((char *)v342 - (char *)v341) >> 5;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59) {
            goto LABEL_314;
          }
          float64x2_t v324 = v20;
          int64x2_t v329 = v13;
          uint64_t v30 = v343[0] - (void)v341;
          if ((uint64_t)(v343[0] - (void)v341) >> 4 > v29) {
            unint64_t v29 = v30 >> 4;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            float64x2_t v314 = v21;
            uint64_t v319 = v22.i64[0];
            float64x2_t v310 = v23;
            float32x4_t v32 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v343, v31);
            float64x2_t v23 = v310;
            float64x2_t v21 = v314;
            v22.i64[0] = v319;
            unint64_t v33 = v32;
            double v27 = v341;
            unint64_t v25 = (float64x2_t *)v342;
          }
          else
          {
            unint64_t v33 = 0;
          }
          v22.i64[1] = *(void *)&v23.f64[0];
          uint64_t v34 = (int8x16_t *)&v33[32 * v28];
          *uint64_t v34 = v22;
          v34[1] = (int8x16_t)v21;
          unint64_t v35 = v34;
          while (v25 != v27)
          {
            float64x2_t v36 = v25[-2];
            float64x2_t v23 = v25[-1];
            v25 -= 2;
            v35[-2] = (int8x16_t)v36;
            v35[-1] = (int8x16_t)v23;
            v35 -= 2;
          }
          unint64_t v24 = (unint64_t)&v33[32 * v31];
          int64x2_t v26 = (float64x2_t *)&v34[2];
          float64x2_t v341 = (float64x2_t *)v35;
          float64x2_t v342 = v34 + 2;
          v343[0] = v24;
          if (v27)
          {
            operator delete(v27);
            unint64_t v24 = v343[0];
          }
          float64x2_t v20 = v324;
          int64x2_t v13 = v329;
        }
        else
        {
          v22.i64[1] = *(void *)&v23.f64[0];
          *float64x2_t v342 = v22;
          v25[1] = v21;
          int64x2_t v26 = v25 + 2;
        }
        float64x2_t v342 = (int8x16_t *)v26;
        *(void *)&v23.f64[0] = v343[v14 + 8];
        float64x2_t v37 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23.f64[0], 0);
        int64x2_t v12 = (int64x2_t)vdivq_f64(v20, v23);
        v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
        float64x2_t v11 = vdivq_f64((float64x2_t)v13, v37);
        unint64_t v38 = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
        if ((unint64_t)v26 >= v24)
        {
          float32x4_t v40 = v341;
          uint64_t v41 = ((char *)v26 - (char *)v341) >> 5;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v43 = v24 - (void)v341;
          if (v43 >> 4 > v42) {
            unint64_t v42 = v43 >> 4;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v44 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            float64_t v325 = v11.f64[0];
            int64x2_t v330 = v12;
            unint64_t v320 = v38;
            float32x4_t v45 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v343, v44);
            unint64_t v38 = v320;
            v11.f64[0] = v325;
            int64x2_t v12 = v330;
            unint64_t v46 = v45;
            float32x4_t v40 = v341;
            int64x2_t v26 = (float64x2_t *)v342;
          }
          else
          {
            unint64_t v46 = 0;
          }
          *(void *)&v11.f64[1] = v38;
          float64x2_t v47 = (float64x2_t *)&v46[32 * v41];
          *float64x2_t v47 = v11;
          v47[1] = (float64x2_t)v12;
          unint64_t v48 = v47;
          while (v26 != v40)
          {
            float64x2_t v11 = v26[-2];
            int64x2_t v12 = (int64x2_t)v26[-1];
            v26 -= 2;
            v48[-2] = v11;
            v48[-1] = (float64x2_t)v12;
            v48 -= 2;
          }
          float32x4_t v39 = (int8x16_t *)&v47[2];
          float64x2_t v341 = v48;
          float64x2_t v342 = (int8x16_t *)&v47[2];
          v343[0] = &v46[32 * v44];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)&v11.f64[1] = v38;
          *int64x2_t v26 = v11;
          v26[1] = (float64x2_t)v12;
          float32x4_t v39 = (int8x16_t *)&v26[2];
        }
        float64x2_t v342 = v39;
        uint64_t v16 = v14;
        uint64_t v15 = v18;
      }
    }
    ++v14;
  }
  while (v14 != 7);
  float64x2_t v49 = v341;
  uint64_t v50 = ((char *)v342 - (char *)v341) >> 5;
  if (!v50)
  {
    unint64_t v61 = (unint64_t)a3[2];
    unint64_t v62 = (float64x2_t *)a3[1];
    if ((unint64_t)v62 >= v61)
    {
      uint64_t v76 = ((char *)v62 - *a3) >> 5;
      unint64_t v77 = v76 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v76 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v78 = v61 - (void)*a3;
      if (v78 >> 4 > v77) {
        unint64_t v77 = v78 >> 4;
      }
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v79 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79) {
        float32x4_t v80 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v79);
      }
      else {
        float32x4_t v80 = 0;
      }
      float64x2_t v146 = (float64x2_t *)&v80[32 * v76];
      float32x4_t v147 = &v80[32 * v79];
      float64x2_t v148 = a2[1];
      *float64x2_t v146 = *a2;
      v146[1] = v148;
      uint64_t v64 = (char *)&v146[2];
      uint64_t v150 = *a3;
      float32x4_t v149 = a3[1];
      if (v149 != *a3)
      {
        do
        {
          float64x2_t v151 = *((float64x2_t *)v149 - 2);
          float64x2_t v152 = *((float64x2_t *)v149 - 1);
          v149 -= 32;
          v146[-2] = v151;
          v146[-1] = v152;
          v146 -= 2;
        }
        while (v149 != v150);
        float32x4_t v149 = *a3;
      }
      *a3 = (char *)v146;
      a3[1] = v64;
      a3[2] = v147;
      if (v149) {
        operator delete(v149);
      }
    }
    else
    {
      float64x2_t v63 = a2[1];
      *unint64_t v62 = *a2;
      v62[1] = v63;
      uint64_t v64 = (char *)&v62[2];
      uint64_t v60 = a5;
    }
    a3[1] = v64;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    unsigned int v154 = v60 + 2;
    unint64_t v153 = v60[2];
    uint64_t v155 = v60[1];
    if (v155 >= v153)
    {
      uint64_t v157 = *v60;
      uint64_t v158 = (v155 - *v60) >> 2;
      unint64_t v159 = v158 + 1;
      if ((unint64_t)(v158 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v160 = v153 - v157;
      if (v160 >> 1 > v159) {
        unint64_t v159 = v160 >> 1;
      }
      if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v161 = v159;
      }
      if (v161)
      {
        uint64_t v162 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v161);
        uint64_t v157 = *v60;
        uint64_t v155 = v60[1];
      }
      else
      {
        uint64_t v162 = 0;
      }
      unint64_t v217 = &v162[4 * v158];
      unint64_t v153 = &v162[4 * v161];
      *(_DWORD *)unint64_t v217 = 3;
      float32x4_t v156 = v217 + 4;
      while (v155 != v157)
      {
        int v218 = *((_DWORD *)v155 - 1);
        v155 -= 4;
        *((_DWORD *)v217 - 1) = v218;
        v217 -= 4;
      }
      *uint64_t v60 = v217;
      v60[1] = v156;
      v60[2] = v153;
      if (v157)
      {
        operator delete(v157);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v155 = 3;
      float32x4_t v156 = v155 + 4;
    }
    v60[1] = v156;
    if (v156 >= v153)
    {
      int v220 = *v60;
      uint64_t v221 = (v156 - *v60) >> 2;
      unint64_t v222 = v221 + 1;
      if ((unint64_t)(v221 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v223 = v153 - v220;
      if (v223 >> 1 > v222) {
        unint64_t v222 = v223 >> 1;
      }
      if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v224 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v224 = v222;
      }
      if (v224)
      {
        unint64_t v225 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v224);
        int v220 = *v60;
        float32x4_t v156 = v60[1];
      }
      else
      {
        unint64_t v225 = 0;
      }
      float64x2_t v235 = &v225[4 * v221];
      unint64_t v153 = &v225[4 * v224];
      *(_DWORD *)float64x2_t v235 = 6;
      uint64_t v219 = v235 + 4;
      while (v156 != v220)
      {
        int v236 = *((_DWORD *)v156 - 1);
        v156 -= 4;
        *((_DWORD *)v235 - 1) = v236;
        v235 -= 4;
      }
      *uint64_t v60 = v235;
      v60[1] = v219;
      v60[2] = v153;
      if (v220)
      {
        operator delete(v220);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)float32x4_t v156 = 6;
      uint64_t v219 = v156 + 4;
    }
    v60[1] = v219;
    if (v219 >= v153)
    {
      uint64_t v238 = *v60;
      uint64_t v239 = (v219 - *v60) >> 2;
      unint64_t v240 = v239 + 1;
      if ((unint64_t)(v239 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v241 = v153 - v238;
      if (v241 >> 1 > v240) {
        unint64_t v240 = v241 >> 1;
      }
      if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v242 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v242 = v240;
      }
      if (v242)
      {
        int v243 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v242);
        uint64_t v238 = *v60;
        uint64_t v219 = v60[1];
      }
      else
      {
        int v243 = 0;
      }
      uint64_t v252 = &v243[4 * v239];
      unint64_t v153 = &v243[4 * v242];
      *(_DWORD *)uint64_t v252 = 9;
      unint64_t v237 = v252 + 4;
      while (v219 != v238)
      {
        int v253 = *((_DWORD *)v219 - 1);
        v219 -= 4;
        *((_DWORD *)v252 - 1) = v253;
        v252 -= 4;
      }
      *uint64_t v60 = v252;
      v60[1] = v237;
      v60[2] = v153;
      if (v238)
      {
        operator delete(v238);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v219 = 9;
      unint64_t v237 = v219 + 4;
    }
    v60[1] = v237;
    if (v237 < v153)
    {
LABEL_263:
      *(_DWORD *)unint64_t v237 = 12;
      float64x2_t v262 = v237 + 4;
LABEL_282:
      v60[1] = v262;
      goto LABEL_311;
    }
    uint64_t v254 = *v60;
    uint64_t v255 = (v237 - *v60) >> 2;
    unint64_t v256 = v255 + 1;
    if (!((unint64_t)(v255 + 1) >> 62))
    {
      uint64_t v257 = v153 - v254;
      if (v257 >> 1 > v256) {
        unint64_t v256 = v257 >> 1;
      }
      if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v258 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v258 = v256;
      }
      if (v258)
      {
        int v259 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v258);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int v259 = 0;
      }
      int32x2_t v268 = &v259[4 * v255];
      float32x4_t v269 = &v259[4 * v258];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v270 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v270;
        v268 -= 4;
      }
      goto LABEL_280;
    }
    goto LABEL_314;
  }
  if (v50 == 2)
  {
    float32x4_t v51 = &geom::kdop_axes<(unsigned char)14,double>[2 * v16];
    float64x2_t v52 = *v51;
    float64x2_t v53 = v51[1];
    v11.f64[0] = *(float64_t *)(a1 + 8 * v16);
    float64x2_t v54 = vmulq_f64(v53, v11);
    int8x16_t v55 = (int8x16_t)vmulq_n_f64(*v51, v11.f64[0]);
    unint64_t v56 = vextq_s8(v55, v55, 8uLL).u64[0];
    unint64_t v57 = (unint64_t)a3[2];
    float32x4_t v58 = (int8x16_t *)a3[1];
    if ((unint64_t)v58 >= v57)
    {
      uint64_t v71 = ((char *)v58 - *a3) >> 5;
      unint64_t v72 = v71 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v71 + 1) >> 59) {
        goto LABEL_314;
      }
      float64x2_t v326 = v53;
      float64x2_t v331 = v52;
      uint64_t v73 = v57 - (void)*a3;
      if (v73 >> 4 > v72) {
        unint64_t v72 = v73 >> 4;
      }
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v74 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        uint64_t v315 = v55.i64[0];
        float64x2_t v321 = v54;
        unint64_t v311 = v56;
        int32x4_t v75 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v74);
        unint64_t v56 = v311;
        v55.i64[0] = v315;
        float64x2_t v54 = v321;
      }
      else
      {
        int32x4_t v75 = 0;
      }
      float64x2_t v131 = (int8x16_t *)&v75[32 * v71];
      float32x4_t v132 = &v75[32 * v74];
      v55.i64[1] = v56;
      *float64x2_t v131 = v55;
      v131[1] = (int8x16_t)v54;
      uint64_t v59 = v131 + 2;
      float32x4_t v134 = *a3;
      float64x2_t v133 = a3[1];
      if (v133 != *a3)
      {
        do
        {
          int8x16_t v135 = *((int8x16_t *)v133 - 2);
          float64x2_t v54 = *((float64x2_t *)v133 - 1);
          v133 -= 32;
          v131[-2] = v135;
          v131[-1] = (int8x16_t)v54;
          v131 -= 2;
        }
        while (v133 != v134);
        float64x2_t v133 = *a3;
      }
      *a3 = (char *)v131;
      a3[1] = (char *)v59;
      a3[2] = v132;
      if (v133) {
        operator delete(v133);
      }
      float64x2_t v53 = v326;
      float64x2_t v52 = v331;
    }
    else
    {
      v55.i64[1] = v56;
      *float32x4_t v58 = v55;
      v58[1] = (int8x16_t)v54;
      uint64_t v59 = v58 + 2;
      uint64_t v60 = a5;
    }
    a3[1] = (char *)v59;
    v54.f64[0] = *(float64_t *)(a1 + 8 * v16 + 64);
    float64x2_t v136 = vmulq_f64(v53, v54);
    *(void *)&v52.f64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
    int8x16_t v137 = (int8x16_t)vmulq_n_f64(v52, v54.f64[0]);
    unint64_t v138 = vextq_s8(v137, v137, 8uLL).u64[0];
    unint64_t v139 = (unint64_t)a3[2];
    if ((unint64_t)v59 >= v139)
    {
      uint64_t v141 = ((char *)v59 - *a3) >> 5;
      if ((unint64_t)(v141 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v142 = v139 - (void)*a3;
      uint64_t v143 = v142 >> 4;
      if (v142 >> 4 <= (unint64_t)(v141 + 1)) {
        uint64_t v143 = v141 + 1;
      }
      if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v144 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v144 = v143;
      }
      if (v144)
      {
        uint64_t v328 = v137.i64[0];
        float64x2_t v333 = v136;
        unint64_t v323 = v138;
        float64x2_t v145 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v144);
        unint64_t v138 = v323;
        v137.i64[0] = v328;
        float64x2_t v136 = v333;
      }
      else
      {
        float64x2_t v145 = 0;
      }
      int v200 = (int8x16_t *)&v145[32 * v141];
      float64x2_t v201 = &v145[32 * v144];
      v137.i64[1] = v138;
      *int v200 = v137;
      v200[1] = (int8x16_t)v136;
      uint64_t v140 = v200 + 2;
      uint64_t v203 = *a3;
      int v202 = a3[1];
      if (v202 != *a3)
      {
        do
        {
          int8x16_t v204 = *((int8x16_t *)v202 - 2);
          int8x16_t v205 = *((int8x16_t *)v202 - 1);
          v202 -= 32;
          v200[-2] = v204;
          v200[-1] = v205;
          v200 -= 2;
        }
        while (v202 != v203);
        int v202 = *a3;
      }
      *a3 = (char *)v200;
      a3[1] = (char *)v140;
      a3[2] = v201;
      if (v202) {
        operator delete(v202);
      }
    }
    else
    {
      v137.i64[1] = v138;
      *uint64_t v59 = v137;
      v59[1] = (int8x16_t)v136;
      uint64_t v140 = v59 + 2;
    }
    a3[1] = (char *)v140;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    std::vector<int>::pointer begin = a4->__begin_;
    begin[10] = 1;
    begin[7] = 1;
    begin[4] = 1;
    unint64_t v208 = v60 + 2;
    uint64_t v207 = v60[2];
    int v209 = v60[1];
    if (v209 >= v207)
    {
      int v211 = *v60;
      uint64_t v212 = (v209 - *v60) >> 2;
      unint64_t v213 = v212 + 1;
      if ((unint64_t)(v212 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v214 = v207 - v211;
      if (v214 >> 1 > v213) {
        unint64_t v213 = v214 >> 1;
      }
      if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v215 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v215 = v213;
      }
      if (v215)
      {
        uint64_t v216 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v215);
        int v211 = *v60;
        int v209 = v60[1];
      }
      else
      {
        uint64_t v216 = 0;
      }
      int v226 = &v216[4 * v212];
      uint64_t v207 = &v216[4 * v215];
      *(_DWORD *)int v226 = 3;
      float64x2_t v210 = v226 + 4;
      while (v209 != v211)
      {
        int v227 = *((_DWORD *)v209 - 1);
        v209 -= 4;
        *((_DWORD *)v226 - 1) = v227;
        v226 -= 4;
      }
      *uint64_t v60 = v226;
      v60[1] = v210;
      v60[2] = v207;
      if (v211)
      {
        operator delete(v211);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v209 = 3;
      float64x2_t v210 = v209 + 4;
    }
    v60[1] = v210;
    if (v210 >= v207)
    {
      unint64_t v229 = *v60;
      uint64_t v230 = (v210 - *v60) >> 2;
      unint64_t v231 = v230 + 1;
      if ((unint64_t)(v230 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v232 = v207 - v229;
      if (v232 >> 1 > v231) {
        unint64_t v231 = v232 >> 1;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        int v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v233);
        unint64_t v229 = *v60;
        float64x2_t v210 = v60[1];
      }
      else
      {
        int v234 = 0;
      }
      int v244 = &v234[4 * v230];
      uint64_t v207 = &v234[4 * v233];
      *(_DWORD *)int v244 = 6;
      int v228 = v244 + 4;
      while (v210 != v229)
      {
        int v245 = *((_DWORD *)v210 - 1);
        v210 -= 4;
        *((_DWORD *)v244 - 1) = v245;
        v244 -= 4;
      }
      *uint64_t v60 = v244;
      v60[1] = v228;
      v60[2] = v207;
      if (v229)
      {
        operator delete(v229);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v210 = 6;
      int v228 = v210 + 4;
    }
    v60[1] = v228;
    if (v228 >= v207)
    {
      int v246 = *v60;
      uint64_t v247 = (v228 - *v60) >> 2;
      unint64_t v248 = v247 + 1;
      if ((unint64_t)(v247 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v249 = v207 - v246;
      if (v249 >> 1 > v248) {
        unint64_t v248 = v249 >> 1;
      }
      if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v250 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v250 = v248;
      }
      if (v250)
      {
        unint64_t v251 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v250);
        int v246 = *v60;
        int v228 = v60[1];
      }
      else
      {
        unint64_t v251 = 0;
      }
      float64x2_t v260 = &v251[4 * v247];
      uint64_t v207 = &v251[4 * v250];
      *(_DWORD *)float64x2_t v260 = 9;
      unint64_t v237 = v260 + 4;
      while (v228 != v246)
      {
        int v261 = *((_DWORD *)v228 - 1);
        v228 -= 4;
        *((_DWORD *)v260 - 1) = v261;
        v260 -= 4;
      }
      *uint64_t v60 = v260;
      v60[1] = v237;
      v60[2] = v207;
      if (v246)
      {
        operator delete(v246);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v228 = 9;
      unint64_t v237 = v228 + 4;
    }
    v60[1] = v237;
    if (v237 < v207) {
      goto LABEL_263;
    }
    uint64_t v254 = *v60;
    uint64_t v263 = (v237 - *v60) >> 2;
    unint64_t v264 = v263 + 1;
    if (!((unint64_t)(v263 + 1) >> 62))
    {
      uint64_t v265 = v207 - v254;
      if (v265 >> 1 > v264) {
        unint64_t v264 = v265 >> 1;
      }
      if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v266 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v266 = v264;
      }
      if (v266)
      {
        int32x4_t v267 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v266);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int32x4_t v267 = 0;
      }
      int32x2_t v268 = &v267[4 * v263];
      float32x4_t v269 = &v267[4 * v266];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v271 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v271;
        v268 -= 4;
      }
LABEL_280:
      *uint64_t v60 = v268;
      v60[1] = v262;
      v60[2] = v269;
      if (v254) {
        operator delete(v254);
      }
      goto LABEL_282;
    }
LABEL_314:
    abort();
  }
  if ((unint64_t)((char *)v342 - (char *)v341) > 0x1BF)
  {
    geom::half_plane_intersection_3<double>(0xEuLL, v341, (void **)a3, (unint64_t *)a4, a5);
  }
  else
  {
    *(void *)std::vector<int>::value_type __x = 0;
    float64x2_t v339 = 0;
    float64x2_t v340 = 0;
    f64 = (_OWORD *)geom::kdop_axes<(unsigned char)14,double>[2 * v15].f64;
    int64x2_t v66 = *(int64x2_t *)f64;
    float64x2_t v67 = *((float64x2_t *)f64 + 1);
    double v68 = fabs(v67.f64[0]);
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v13.i64 = -*(double *)&v66.i64[1];
      float64x2_t v70 = 0uLL;
      float64x2_t v69 = (float64x2_t)vzip1q_s64(v13, v66);
    }
    else
    {
      v69.f64[0] = 0.0;
      v69.f64[1] = -v67.f64[0];
      float64x2_t v70 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    }
    float64x2_t v81 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    float64x2_t v82 = vmulq_f64(v70, v70);
    v82.f64[0] = 1.0 / sqrt(v82.f64[0] + vaddvq_f64(vmulq_f64(v69, v69)));
    float64x2_t v327 = vmulq_f64(v70, v82);
    int64x2_t v332 = *((int64x2_t *)f64 + 1);
    int8x16_t v83 = (int8x16_t)vmulq_n_f64(v69, v82.f64[0]);
    unint64_t v289 = vextq_s8(v83, v83, 8uLL).u64[0];
    uint64_t v296 = v83.i64[0];
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v12.i64 = -*(double *)&v66.i64[1];
      float64x2_t v85 = 0uLL;
      float64x2_t v84 = (float64x2_t)vzip1q_s64(v12, v66);
    }
    else
    {
      v84.f64[0] = 0.0;
      v84.f64[1] = -v67.f64[0];
      float64x2_t v85 = v81;
    }
    float64x2_t v86 = vmulq_f64(v85, v85);
    v86.f64[0] = 1.0 / sqrt(v86.f64[0] + vaddvq_f64(vmulq_f64(v84, v84)));
    float64x2_t v87 = vmulq_n_f64(v84, v86.f64[0]);
    float64x2_t v88 = vmulq_f64(v85, v86);
    v89.f64[0] = *((float64_t *)f64 + 2);
    v89.f64[1] = *(float64_t *)f64;
    float64x2_t v305 = vnegq_f64(v67);
    float64x2_t v90 = vmlaq_laneq_f64(vmulq_laneq_f64(v305, v87, 1), v88, (float64x2_t)v66, 1);
    v88.f64[1] = v87.f64[0];
    float64x2_t v91 = vnegq_f64((float64x2_t)v66);
    float64x2_t v92 = vmlaq_f64(vmulq_f64(v88, v91), v87, v89);
    float64x2_t v93 = vmulq_f64(v92, v92);
    double v94 = vmulq_f64(v90, v90).f64[0];
    v90.f64[1] = v92.f64[0];
    v93.f64[0] = 1.0 / sqrt(v93.f64[1] + v94 + v93.f64[0]);
    int8x16_t v95 = (int8x16_t)vmulq_n_f64(v90, v93.f64[0]);
    unint64_t v96 = vextq_s8(v95, v95, 8uLL).u64[0];
    float64x2_t v322 = vmulq_laneq_f64(v93, v92, 1);
    unint64_t v288 = v96;
    uint64_t v294 = v95.i64[0];
    if (v342 == (int8x16_t *)v341)
    {
      uint64_t v130 = 0;
      float32x4_t v121 = 0;
    }
    else
    {
      unint64_t v97 = 0;
      *(void *)&v98.f64[0] = v83.i64[0];
      *(void *)&v98.f64[1] = v289;
      v95.i64[1] = v96;
      float64x2_t v303 = (float64x2_t)v95;
      float64x2_t v304 = v98;
      int64x2_t v301 = *(int64x2_t *)f64;
      float64x2_t v302 = (float64x2_t)vdupq_lane_s64(v332.i64[0], 0);
      *(void *)&v91.f64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
      *(void *)&v89.f64[1] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
      float64x2_t v299 = v89;
      float64x2_t v300 = v81;
      float64x2_t v298 = v91;
      do
      {
        int32x4_t v99 = &v49[2 * v97];
        v100.f64[0] = v99[1].f64[0];
        v100.f64[1] = v99->f64[0];
        float64x2_t v101 = vmlaq_f64(vmulq_f64(v100, v91), *v99, v89);
        float64x2_t v102 = vmlaq_f64(vmulq_laneq_f64(v305, *v99, 1), v99[1], v81);
        int64x2_t v306 = (int64x2_t)v99[1];
        float64x2_t v103 = vmulq_f64(v101, v101);
        float64_t v104 = v101.f64[0];
        float64x2_t v308 = v101;
        v105.f64[0] = v102.f64[0];
        v103.f64[0] = 1.0 / sqrt(v103.f64[1] + vmulq_f64(v102, v102).f64[0] + v103.f64[0]);
        float64x2_t v316 = v103;
        int64x2_t v106 = vzip1q_s64(v66, *(int64x2_t *)v99);
        int64x2_t v107 = vzip2q_s64(v66, *(int64x2_t *)v99);
        float64x2_t v108 = (float64x2_t)vzip1q_s64(v332, v306);
        float64x2_t v309 = (float64x2_t)vzip1q_s64(v106, v107);
        float64x2_t v312 = (float64x2_t)vzip2q_s64(v106, v107);
        v344.columns[0] = (simd_double2)vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)v106, *(double *)v66.i64), v81, (float64x2_t)v107), v302, v108);
        v344.columns[1] = (simd_double2)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v106, v99->f64[0]), (float64x2_t)v107, *v99, 1), v108, *(double *)v306.i64);
        v105.f64[1] = v104;
        float64x2_t v307 = v105;
        float64x2_t v109 = (float64x2_t)__invert_d2(v344).columns[1];
        float64x2_t v110 = vmlaq_laneq_f64(vmulq_n_f64(v309, v109.f64[0]), v312, v109, 1);
        float64x2_t v111 = vmlaq_laneq_f64(vmulq_f64((float64x2_t)v332, v109), (float64x2_t)v306, v109, 1);
        float64x2_t v112 = vmulq_n_f64(v307, v316.f64[0]);
        float64x2_t v113 = vmulq_laneq_f64(v316, v308, 1);
        v114.f64[0] = vmulq_f64(v327, v113).f64[0] + vaddvq_f64(vmulq_f64(v304, v112));
        int64x2_t v115 = (int64x2_t)vmulq_f64(v322, v113);
        v114.f64[1] = *(double *)v115.i64 + vaddvq_f64(vmulq_f64(v303, v112));
        int64x2_t v116 = (int64x2_t)vmulq_n_f64(v114, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v114, v114))));
        *(double *)v115.i64 = -*(double *)&v116.i64[1];
        float64x2_t v117 = (float64x2_t)vzip1q_s64(v115, v116);
        *(double *)v115.i64 = vmulq_f64(v327, v111).f64[0] + vaddvq_f64(vmulq_f64(v304, v110));
        *(double *)&v115.i64[1] = vmulq_f64(v322, v111).f64[0] + vaddvq_f64(vmulq_f64(v303, v110));
        int64x2_t v118 = (int64x2_t)vmulq_f64(v117, (float64x2_t)v115);
        float64x2_t v119 = vdivq_f64(v117, (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64((float64x2_t)v118, (float64x2_t)vdupq_laneq_s64(v118, 1)), 0));
        float32x4_t v120 = v339;
        if (v339 >= v340)
        {
          uint64_t v122 = ((uint64_t)v339 - *(void *)__x) >> 4;
          if ((unint64_t)(v122 + 1) >> 60) {
            goto LABEL_314;
          }
          unint64_t v123 = ((uint64_t)v340 - *(void *)__x) >> 3;
          if (v123 <= v122 + 1) {
            unint64_t v123 = v122 + 1;
          }
          if ((unint64_t)v340 - *(void *)__x >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v124 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v124 = v123;
          }
          if (v124)
          {
            float64x2_t v317 = v119;
            uint64_t v125 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v340, v124);
            float64x2_t v119 = v317;
          }
          else
          {
            uint64_t v125 = 0;
          }
          uint64_t v126 = (float64x2_t *)&v125[16 * v122];
          *uint64_t v126 = v119;
          float32x4_t v121 = v126 + 1;
          unint64_t v128 = *(float64x2_t **)__x;
          uint64_t v127 = v339;
          if (v339 != *(float64x2_t **)__x)
          {
            do
            {
              float64x2_t v129 = v127[-1];
              --v127;
              v126[-1] = v129;
              --v126;
            }
            while (v127 != v128);
            uint64_t v127 = *(float64x2_t **)__x;
          }
          *(void *)std::vector<int>::value_type __x = v126;
          float64x2_t v339 = v121;
          float64x2_t v340 = (float64x2_t *)&v125[16 * v124];
          if (v127) {
            operator delete(v127);
          }
        }
        else
        {
          *float64x2_t v339 = v119;
          float32x4_t v121 = v120 + 1;
        }
        float64x2_t v81 = v300;
        int64x2_t v66 = v301;
        float64x2_t v91 = v298;
        float64x2_t v89 = v299;
        float64x2_t v339 = v121;
        ++v97;
        float64x2_t v49 = v341;
      }
      while (v97 < ((char *)v342 - (char *)v341) >> 5);
      uint64_t v130 = *(void *)__x;
    }
    std::vector<int> __p = 0;
    float64x2_t v336 = 0;
    uint64_t v337 = 0;
    geom::half_plane_intersection_2<double>(((uint64_t)v121 - v130) >> 4, v130, (uint64_t)&__p);
    uint64_t v163 = (float64x2_t *)__p;
    unint64_t v164 = v336;
    int v165 = (int8x16_t *)a3[1];
    if (__p != v336)
    {
      unint64_t v166 = a3 + 2;
      *(void *)&v167.f64[0] = v294;
      *(void *)&v168.f64[0] = v296;
      *(void *)&v167.f64[1] = v288;
      *(void *)&v168.f64[1] = v289;
      float64x2_t v295 = v167;
      float64x2_t v297 = v168;
      do
      {
        int8x16_t v169 = (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v167, *v163, 1), v168, v163->f64[0]);
        unint64_t v170 = vextq_s8(v169, v169, 8uLL).u64[0];
        float64x2_t v171 = vmlaq_f64(vmulq_laneq_f64(v322, *v163, 1), *v163, v327);
        if ((unint64_t)v165 >= *v166)
        {
          uint64_t v172 = ((char *)v165 - *a3) >> 5;
          if ((unint64_t)(v172 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v173 = *v166 - (void)*a3;
          uint64_t v174 = v173 >> 4;
          if (v173 >> 4 <= (unint64_t)(v172 + 1)) {
            uint64_t v174 = v172 + 1;
          }
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v175 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v175 = v174;
          }
          if (v175)
          {
            uint64_t v334 = v169.i64[0];
            unint64_t v313 = v170;
            float64x2_t v318 = v171;
            float64x2_t v176 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v175);
            unint64_t v170 = v313;
            float64x2_t v171 = v318;
            v169.i64[0] = v334;
          }
          else
          {
            float64x2_t v176 = 0;
          }
          v169.i64[1] = v170;
          float64x2_t v177 = (int8x16_t *)&v176[32 * v172];
          *float64x2_t v177 = v169;
          v177[1] = (int8x16_t)v171;
          float64x2_t v179 = *a3;
          float32x4_t v178 = a3[1];
          float32x4_t v180 = v177;
          if (v178 != *a3)
          {
            do
            {
              int8x16_t v181 = *((int8x16_t *)v178 - 2);
              int8x16_t v182 = *((int8x16_t *)v178 - 1);
              v178 -= 32;
              v180[-2] = v181;
              v180[-1] = v182;
              v180 -= 2;
            }
            while (v178 != v179);
            float32x4_t v178 = *a3;
          }
          int v165 = v177 + 2;
          *a3 = (char *)v180;
          a3[1] = v177[2].i8;
          a3[2] = &v176[32 * v175];
          if (v178) {
            operator delete(v178);
          }
          float64x2_t v167 = v295;
          float64x2_t v168 = v297;
        }
        else
        {
          v169.i64[1] = v170;
          *int v165 = v169;
          v165[1] = (int8x16_t)v171;
          v165 += 2;
        }
        a3[1] = (char *)v165;
        ++v163;
      }
      while (v163 != v164);
    }
    std::vector<unsigned int>::resize(a4, ((char *)v165 - *a3) >> 4);
    uint64_t v183 = a3[1] - *a3;
    if (v183)
    {
      uint64_t v184 = 0;
      std::vector<int>::pointer v185 = a4->__begin_;
      uint64_t v186 = 4 * (v183 >> 5);
      uint64_t v187 = v186;
      do
      {
        v185[v184] = v184;
        ++v184;
        v187 -= 4;
      }
      while (v187);
      std::vector<int>::pointer v188 = a4->__end_ - 1;
      do
      {
        int v189 = *v185++;
        *v188-- = v189;
        v186 -= 4;
      }
      while (v186);
    }
    unint64_t v190 = (unint64_t)v183 >> 5;
    int v191 = a5[2];
    float64x2_t v192 = a5[1];
    if (v192 >= v191)
    {
      uint64_t v194 = *a5;
      uint64_t v195 = (v192 - *a5) >> 2;
      unint64_t v196 = v195 + 1;
      if ((unint64_t)(v195 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v197 = v191 - v194;
      if (v197 >> 1 > v196) {
        unint64_t v196 = v197 >> 1;
      }
      if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v198 = v196;
      }
      if (v198)
      {
        unint64_t v199 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v198);
        uint64_t v194 = *a5;
        float64x2_t v192 = a5[1];
      }
      else
      {
        unint64_t v199 = 0;
      }
      float32x4_t v272 = &v199[4 * v195];
      int v191 = &v199[4 * v198];
      *(_DWORD *)float32x4_t v272 = v190;
      int v193 = v272 + 4;
      while (v192 != v194)
      {
        int v273 = *((_DWORD *)v192 - 1);
        v192 -= 4;
        *((_DWORD *)v272 - 1) = v273;
        v272 -= 4;
      }
      *a5 = v272;
      a5[1] = v193;
      a5[2] = v191;
      if (v194)
      {
        operator delete(v194);
        int v191 = a5[2];
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v192 = v190;
      int v193 = v192 + 4;
    }
    a5[1] = v193;
    uint64_t v274 = ((unint64_t)(a3[1] - *a3) >> 4) & 0xFFFFFFFE;
    if (v193 >= v191)
    {
      float32x4_t v276 = *a5;
      uint64_t v277 = (v193 - *a5) >> 2;
      unint64_t v278 = v277 + 1;
      if ((unint64_t)(v277 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v279 = v191 - v276;
      if (v279 >> 1 > v278) {
        unint64_t v278 = v279 >> 1;
      }
      if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v280 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v280 = v278;
      }
      if (v280)
      {
        float32x4_t v281 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v280);
        float32x4_t v276 = *a5;
        int v193 = a5[1];
      }
      else
      {
        float32x4_t v281 = 0;
      }
      float32x4_t v282 = &v281[4 * v277];
      float64x2_t v283 = &v281[4 * v280];
      *(_DWORD *)float32x4_t v282 = v274;
      float32x4_t v275 = v282 + 4;
      while (v193 != v276)
      {
        int v284 = *((_DWORD *)v193 - 1);
        v193 -= 4;
        *((_DWORD *)v282 - 1) = v284;
        v282 -= 4;
      }
      *a5 = v282;
      a5[1] = v275;
      a5[2] = v283;
      if (v276) {
        operator delete(v276);
      }
    }
    else
    {
      *(_DWORD *)int v193 = v274;
      float32x4_t v275 = v193 + 4;
    }
    a5[1] = v275;
    if (__p)
    {
      float64x2_t v336 = (float64x2_t *)__p;
      operator delete(__p);
    }
    if (*(void *)__x)
    {
      float64x2_t v339 = *(float64x2_t **)__x;
      operator delete(*(void **)__x);
    }
  }
  uint64_t v285 = (float64x2_t *)*a3;
  float64x2_t v286 = (float64x2_t *)a3[1];
  if (*a3 != (char *)v286)
  {
    do
    {
      float64x2_t v287 = vaddq_f64(a2[1], v285[1]);
      *uint64_t v285 = vaddq_f64(*a2, *v285);
      v285[1] = v287;
      v285 += 2;
    }
    while (v285 != v286);
  }
LABEL_311:
  if (v341)
  {
    float64x2_t v342 = (int8x16_t *)v341;
    operator delete(v341);
  }
}

void geom_dop18_polyhedron_3d(uint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float64x2_t v8 = a2[1];
  v12[0] = *a2;
  v12[1] = v8;
  float64_t v9 = (char **)geom::collection_to_vector<float>(a3);
  float32x4_t v10 = (std::vector<int> *)geom::collection_to_vector<float>(a4);
  float64x2_t v11 = (char **)geom::collection_to_vector<float>(a5);
  geom::dop<(unsigned char)18,double>::compute_polyhedron(a1, v12, v9, v10, v11);
}

void geom::dop<(unsigned char)18,double>::compute_polyhedron(uint64_t a1, float64x2_t *a2, char **a3, std::vector<int> *a4, char **a5)
{
  uint64_t v6 = 0;
  v343[19] = *MEMORY[0x263EF8340];
  a3[1] = *a3;
  a4->__end_ = a4->__begin_;
  a5[1] = *a5;
  float64x2_t v8 = *a2;
  float64x2_t v7 = a2[1];
  do
  {
    float64_t v9 = vmulq_f64(geom::kdop_axes<(unsigned char)18,double>[2 * v6 + 1], v7).f64[0]
       + vaddvq_f64(vmulq_f64(geom::kdop_axes<(unsigned char)18,double>[2 * v6], v8));
    float32x4_t v10 = (double *)(a1 + 8 * v6);
    *(double *)&v343[v6 + 10] = *v10 - v9;
    *(double *)&v343[++v6] = v10[10] - v9;
  }
  while (v6 != 9);
  std::vector<int> __p = 0;
  float64x2_t v342 = 0;
  v343[0] = 0;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm(&__p, 0x12uLL);
  uint64_t v14 = 0;
  uint64_t v15 = -1;
  uint64_t v16 = -1;
  do
  {
    double v17 = *(double *)&v343[v14 + 10];
    *(void *)&v11.f64[0] = v343[v14 + 1];
    if (v17 == v11.f64[0])
    {
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v18 = v15;
      uint64_t v15 = v14;
      if (vabdd_f64(v17, v11.f64[0]) > 0.000001)
      {
        float32x4_t v19 = &geom::kdop_axes<(unsigned char)18,double>[2 * v14];
        int64x2_t v13 = *(int64x2_t *)v19;
        float64x2_t v20 = v19[1];
        float64x2_t v21 = vdivq_f64(v20, v11);
        int8x16_t v22 = (int8x16_t)vdivq_f64(*v19, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0));
        float64x2_t v23 = (float64x2_t)vextq_s8(v22, v22, 8uLL);
        unint64_t v25 = (float64x2_t *)v342;
        unint64_t v24 = v343[0];
        if ((unint64_t)v342 >= v343[0])
        {
          double v27 = (float64x2_t *)__p;
          uint64_t v28 = ((char *)v342 - (unsigned char *)__p) >> 5;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59) {
            goto LABEL_314;
          }
          float64x2_t v324 = v20;
          int64x2_t v329 = v13;
          uint64_t v30 = v343[0] - (void)__p;
          if ((uint64_t)(v343[0] - (void)__p) >> 4 > v29) {
            unint64_t v29 = v30 >> 4;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            float64x2_t v314 = v21;
            uint64_t v319 = v22.i64[0];
            float64x2_t v310 = v23;
            float32x4_t v32 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v343, v31);
            float64x2_t v23 = v310;
            float64x2_t v21 = v314;
            v22.i64[0] = v319;
            unint64_t v33 = v32;
            double v27 = (float64x2_t *)__p;
            unint64_t v25 = (float64x2_t *)v342;
          }
          else
          {
            unint64_t v33 = 0;
          }
          v22.i64[1] = *(void *)&v23.f64[0];
          uint64_t v34 = (int8x16_t *)&v33[32 * v28];
          *uint64_t v34 = v22;
          v34[1] = (int8x16_t)v21;
          unint64_t v35 = v34;
          while (v25 != v27)
          {
            float64x2_t v36 = v25[-2];
            float64x2_t v23 = v25[-1];
            v25 -= 2;
            v35[-2] = (int8x16_t)v36;
            v35[-1] = (int8x16_t)v23;
            v35 -= 2;
          }
          unint64_t v24 = (unint64_t)&v33[32 * v31];
          int64x2_t v26 = (float64x2_t *)&v34[2];
          std::vector<int> __p = v35;
          float64x2_t v342 = v34 + 2;
          v343[0] = v24;
          if (v27)
          {
            operator delete(v27);
            unint64_t v24 = v343[0];
          }
          float64x2_t v20 = v324;
          int64x2_t v13 = v329;
        }
        else
        {
          v22.i64[1] = *(void *)&v23.f64[0];
          *float64x2_t v342 = v22;
          v25[1] = v21;
          int64x2_t v26 = v25 + 2;
        }
        float64x2_t v342 = (int8x16_t *)v26;
        *(void *)&v23.f64[0] = v343[v14 + 10];
        float64x2_t v37 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23.f64[0], 0);
        int64x2_t v12 = (int64x2_t)vdivq_f64(v20, v23);
        v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
        float64x2_t v11 = vdivq_f64((float64x2_t)v13, v37);
        unint64_t v38 = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
        if ((unint64_t)v26 >= v24)
        {
          float32x4_t v40 = (float64x2_t *)__p;
          uint64_t v41 = ((char *)v26 - (unsigned char *)__p) >> 5;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v43 = v24 - (void)__p;
          if (v43 >> 4 > v42) {
            unint64_t v42 = v43 >> 4;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v44 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            float64_t v325 = v11.f64[0];
            int64x2_t v330 = v12;
            unint64_t v320 = v38;
            float32x4_t v45 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v343, v44);
            unint64_t v38 = v320;
            v11.f64[0] = v325;
            int64x2_t v12 = v330;
            unint64_t v46 = v45;
            float32x4_t v40 = (float64x2_t *)__p;
            int64x2_t v26 = (float64x2_t *)v342;
          }
          else
          {
            unint64_t v46 = 0;
          }
          *(void *)&v11.f64[1] = v38;
          float64x2_t v47 = (float64x2_t *)&v46[32 * v41];
          *float64x2_t v47 = v11;
          v47[1] = (float64x2_t)v12;
          unint64_t v48 = v47;
          while (v26 != v40)
          {
            float64x2_t v11 = v26[-2];
            int64x2_t v12 = (int64x2_t)v26[-1];
            v26 -= 2;
            v48[-2] = v11;
            v48[-1] = (float64x2_t)v12;
            v48 -= 2;
          }
          float32x4_t v39 = (int8x16_t *)&v47[2];
          std::vector<int> __p = v48;
          float64x2_t v342 = (int8x16_t *)&v47[2];
          v343[0] = &v46[32 * v44];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)&v11.f64[1] = v38;
          *int64x2_t v26 = v11;
          v26[1] = (float64x2_t)v12;
          float32x4_t v39 = (int8x16_t *)&v26[2];
        }
        float64x2_t v342 = v39;
        uint64_t v16 = v14;
        uint64_t v15 = v18;
      }
    }
    ++v14;
  }
  while (v14 != 9);
  float64x2_t v49 = (char *)__p;
  uint64_t v50 = ((char *)v342 - (unsigned char *)__p) >> 5;
  if (!v50)
  {
    unint64_t v61 = (unint64_t)a3[2];
    unint64_t v62 = (float64x2_t *)a3[1];
    if ((unint64_t)v62 >= v61)
    {
      uint64_t v76 = ((char *)v62 - *a3) >> 5;
      unint64_t v77 = v76 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v76 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v78 = v61 - (void)*a3;
      if (v78 >> 4 > v77) {
        unint64_t v77 = v78 >> 4;
      }
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v79 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79) {
        float32x4_t v80 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v79);
      }
      else {
        float32x4_t v80 = 0;
      }
      float64x2_t v146 = (float64x2_t *)&v80[32 * v76];
      float32x4_t v147 = &v80[32 * v79];
      float64x2_t v148 = a2[1];
      *float64x2_t v146 = *a2;
      v146[1] = v148;
      uint64_t v64 = (char *)&v146[2];
      uint64_t v150 = *a3;
      float32x4_t v149 = a3[1];
      if (v149 != *a3)
      {
        do
        {
          float64x2_t v151 = *((float64x2_t *)v149 - 2);
          float64x2_t v152 = *((float64x2_t *)v149 - 1);
          v149 -= 32;
          v146[-2] = v151;
          v146[-1] = v152;
          v146 -= 2;
        }
        while (v149 != v150);
        float32x4_t v149 = *a3;
      }
      *a3 = (char *)v146;
      a3[1] = v64;
      a3[2] = v147;
      if (v149) {
        operator delete(v149);
      }
    }
    else
    {
      float64x2_t v63 = a2[1];
      *unint64_t v62 = *a2;
      v62[1] = v63;
      uint64_t v64 = (char *)&v62[2];
      uint64_t v60 = a5;
    }
    a3[1] = v64;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    unsigned int v154 = v60 + 2;
    unint64_t v153 = v60[2];
    uint64_t v155 = v60[1];
    if (v155 >= v153)
    {
      uint64_t v157 = *v60;
      uint64_t v158 = (v155 - *v60) >> 2;
      unint64_t v159 = v158 + 1;
      if ((unint64_t)(v158 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v160 = v153 - v157;
      if (v160 >> 1 > v159) {
        unint64_t v159 = v160 >> 1;
      }
      if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v161 = v159;
      }
      if (v161)
      {
        uint64_t v162 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v161);
        uint64_t v157 = *v60;
        uint64_t v155 = v60[1];
      }
      else
      {
        uint64_t v162 = 0;
      }
      unint64_t v217 = &v162[4 * v158];
      unint64_t v153 = &v162[4 * v161];
      *(_DWORD *)unint64_t v217 = 3;
      float32x4_t v156 = v217 + 4;
      while (v155 != v157)
      {
        int v218 = *((_DWORD *)v155 - 1);
        v155 -= 4;
        *((_DWORD *)v217 - 1) = v218;
        v217 -= 4;
      }
      *uint64_t v60 = v217;
      v60[1] = v156;
      v60[2] = v153;
      if (v157)
      {
        operator delete(v157);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v155 = 3;
      float32x4_t v156 = v155 + 4;
    }
    v60[1] = v156;
    if (v156 >= v153)
    {
      int v220 = *v60;
      uint64_t v221 = (v156 - *v60) >> 2;
      unint64_t v222 = v221 + 1;
      if ((unint64_t)(v221 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v223 = v153 - v220;
      if (v223 >> 1 > v222) {
        unint64_t v222 = v223 >> 1;
      }
      if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v224 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v224 = v222;
      }
      if (v224)
      {
        unint64_t v225 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v224);
        int v220 = *v60;
        float32x4_t v156 = v60[1];
      }
      else
      {
        unint64_t v225 = 0;
      }
      float64x2_t v235 = &v225[4 * v221];
      unint64_t v153 = &v225[4 * v224];
      *(_DWORD *)float64x2_t v235 = 6;
      uint64_t v219 = v235 + 4;
      while (v156 != v220)
      {
        int v236 = *((_DWORD *)v156 - 1);
        v156 -= 4;
        *((_DWORD *)v235 - 1) = v236;
        v235 -= 4;
      }
      *uint64_t v60 = v235;
      v60[1] = v219;
      v60[2] = v153;
      if (v220)
      {
        operator delete(v220);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)float32x4_t v156 = 6;
      uint64_t v219 = v156 + 4;
    }
    v60[1] = v219;
    if (v219 >= v153)
    {
      uint64_t v238 = *v60;
      uint64_t v239 = (v219 - *v60) >> 2;
      unint64_t v240 = v239 + 1;
      if ((unint64_t)(v239 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v241 = v153 - v238;
      if (v241 >> 1 > v240) {
        unint64_t v240 = v241 >> 1;
      }
      if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v242 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v242 = v240;
      }
      if (v242)
      {
        int v243 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v242);
        uint64_t v238 = *v60;
        uint64_t v219 = v60[1];
      }
      else
      {
        int v243 = 0;
      }
      uint64_t v252 = &v243[4 * v239];
      unint64_t v153 = &v243[4 * v242];
      *(_DWORD *)uint64_t v252 = 9;
      unint64_t v237 = v252 + 4;
      while (v219 != v238)
      {
        int v253 = *((_DWORD *)v219 - 1);
        v219 -= 4;
        *((_DWORD *)v252 - 1) = v253;
        v252 -= 4;
      }
      *uint64_t v60 = v252;
      v60[1] = v237;
      v60[2] = v153;
      if (v238)
      {
        operator delete(v238);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v219 = 9;
      unint64_t v237 = v219 + 4;
    }
    v60[1] = v237;
    if (v237 < v153)
    {
LABEL_263:
      *(_DWORD *)unint64_t v237 = 12;
      float64x2_t v262 = v237 + 4;
LABEL_282:
      v60[1] = v262;
      goto LABEL_311;
    }
    uint64_t v254 = *v60;
    uint64_t v255 = (v237 - *v60) >> 2;
    unint64_t v256 = v255 + 1;
    if (!((unint64_t)(v255 + 1) >> 62))
    {
      uint64_t v257 = v153 - v254;
      if (v257 >> 1 > v256) {
        unint64_t v256 = v257 >> 1;
      }
      if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v258 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v258 = v256;
      }
      if (v258)
      {
        int v259 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v258);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int v259 = 0;
      }
      int32x2_t v268 = &v259[4 * v255];
      float32x4_t v269 = &v259[4 * v258];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v270 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v270;
        v268 -= 4;
      }
      goto LABEL_280;
    }
    goto LABEL_314;
  }
  if (v50 == 2)
  {
    float32x4_t v51 = &geom::kdop_axes<(unsigned char)18,double>[2 * v16];
    float64x2_t v52 = *v51;
    float64x2_t v53 = v51[1];
    v11.f64[0] = *(float64_t *)(a1 + 8 * v16);
    float64x2_t v54 = vmulq_f64(v53, v11);
    int8x16_t v55 = (int8x16_t)vmulq_n_f64(*v51, v11.f64[0]);
    unint64_t v56 = vextq_s8(v55, v55, 8uLL).u64[0];
    unint64_t v57 = (unint64_t)a3[2];
    float32x4_t v58 = (int8x16_t *)a3[1];
    if ((unint64_t)v58 >= v57)
    {
      uint64_t v71 = ((char *)v58 - *a3) >> 5;
      unint64_t v72 = v71 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v71 + 1) >> 59) {
        goto LABEL_314;
      }
      float64x2_t v326 = v53;
      float64x2_t v331 = v52;
      uint64_t v73 = v57 - (void)*a3;
      if (v73 >> 4 > v72) {
        unint64_t v72 = v73 >> 4;
      }
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v74 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        uint64_t v315 = v55.i64[0];
        float64x2_t v321 = v54;
        unint64_t v311 = v56;
        int32x4_t v75 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v74);
        unint64_t v56 = v311;
        v55.i64[0] = v315;
        float64x2_t v54 = v321;
      }
      else
      {
        int32x4_t v75 = 0;
      }
      float64x2_t v131 = (int8x16_t *)&v75[32 * v71];
      float32x4_t v132 = &v75[32 * v74];
      v55.i64[1] = v56;
      *float64x2_t v131 = v55;
      v131[1] = (int8x16_t)v54;
      uint64_t v59 = v131 + 2;
      float32x4_t v134 = *a3;
      float64x2_t v133 = a3[1];
      if (v133 != *a3)
      {
        do
        {
          int8x16_t v135 = *((int8x16_t *)v133 - 2);
          float64x2_t v54 = *((float64x2_t *)v133 - 1);
          v133 -= 32;
          v131[-2] = v135;
          v131[-1] = (int8x16_t)v54;
          v131 -= 2;
        }
        while (v133 != v134);
        float64x2_t v133 = *a3;
      }
      *a3 = (char *)v131;
      a3[1] = (char *)v59;
      a3[2] = v132;
      if (v133) {
        operator delete(v133);
      }
      float64x2_t v53 = v326;
      float64x2_t v52 = v331;
    }
    else
    {
      v55.i64[1] = v56;
      *float32x4_t v58 = v55;
      v58[1] = (int8x16_t)v54;
      uint64_t v59 = v58 + 2;
      uint64_t v60 = a5;
    }
    a3[1] = (char *)v59;
    v54.f64[0] = *(float64_t *)(a1 + 8 * v16 + 80);
    float64x2_t v136 = vmulq_f64(v53, v54);
    *(void *)&v52.f64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
    int8x16_t v137 = (int8x16_t)vmulq_n_f64(v52, v54.f64[0]);
    unint64_t v138 = vextq_s8(v137, v137, 8uLL).u64[0];
    unint64_t v139 = (unint64_t)a3[2];
    if ((unint64_t)v59 >= v139)
    {
      uint64_t v141 = ((char *)v59 - *a3) >> 5;
      if ((unint64_t)(v141 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v142 = v139 - (void)*a3;
      uint64_t v143 = v142 >> 4;
      if (v142 >> 4 <= (unint64_t)(v141 + 1)) {
        uint64_t v143 = v141 + 1;
      }
      if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v144 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v144 = v143;
      }
      if (v144)
      {
        uint64_t v328 = v137.i64[0];
        float64x2_t v333 = v136;
        unint64_t v323 = v138;
        float64x2_t v145 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v144);
        unint64_t v138 = v323;
        v137.i64[0] = v328;
        float64x2_t v136 = v333;
      }
      else
      {
        float64x2_t v145 = 0;
      }
      int v200 = (int8x16_t *)&v145[32 * v141];
      float64x2_t v201 = &v145[32 * v144];
      v137.i64[1] = v138;
      *int v200 = v137;
      v200[1] = (int8x16_t)v136;
      uint64_t v140 = v200 + 2;
      uint64_t v203 = *a3;
      int v202 = a3[1];
      if (v202 != *a3)
      {
        do
        {
          int8x16_t v204 = *((int8x16_t *)v202 - 2);
          int8x16_t v205 = *((int8x16_t *)v202 - 1);
          v202 -= 32;
          v200[-2] = v204;
          v200[-1] = v205;
          v200 -= 2;
        }
        while (v202 != v203);
        int v202 = *a3;
      }
      *a3 = (char *)v200;
      a3[1] = (char *)v140;
      a3[2] = v201;
      if (v202) {
        operator delete(v202);
      }
    }
    else
    {
      v137.i64[1] = v138;
      *uint64_t v59 = v137;
      v59[1] = (int8x16_t)v136;
      uint64_t v140 = v59 + 2;
    }
    a3[1] = (char *)v140;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    std::vector<int>::pointer begin = a4->__begin_;
    begin[10] = 1;
    begin[7] = 1;
    begin[4] = 1;
    unint64_t v208 = v60 + 2;
    uint64_t v207 = v60[2];
    int v209 = v60[1];
    if (v209 >= v207)
    {
      int v211 = *v60;
      uint64_t v212 = (v209 - *v60) >> 2;
      unint64_t v213 = v212 + 1;
      if ((unint64_t)(v212 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v214 = v207 - v211;
      if (v214 >> 1 > v213) {
        unint64_t v213 = v214 >> 1;
      }
      if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v215 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v215 = v213;
      }
      if (v215)
      {
        uint64_t v216 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v215);
        int v211 = *v60;
        int v209 = v60[1];
      }
      else
      {
        uint64_t v216 = 0;
      }
      int v226 = &v216[4 * v212];
      uint64_t v207 = &v216[4 * v215];
      *(_DWORD *)int v226 = 3;
      float64x2_t v210 = v226 + 4;
      while (v209 != v211)
      {
        int v227 = *((_DWORD *)v209 - 1);
        v209 -= 4;
        *((_DWORD *)v226 - 1) = v227;
        v226 -= 4;
      }
      *uint64_t v60 = v226;
      v60[1] = v210;
      v60[2] = v207;
      if (v211)
      {
        operator delete(v211);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v209 = 3;
      float64x2_t v210 = v209 + 4;
    }
    v60[1] = v210;
    if (v210 >= v207)
    {
      unint64_t v229 = *v60;
      uint64_t v230 = (v210 - *v60) >> 2;
      unint64_t v231 = v230 + 1;
      if ((unint64_t)(v230 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v232 = v207 - v229;
      if (v232 >> 1 > v231) {
        unint64_t v231 = v232 >> 1;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        int v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v233);
        unint64_t v229 = *v60;
        float64x2_t v210 = v60[1];
      }
      else
      {
        int v234 = 0;
      }
      int v244 = &v234[4 * v230];
      uint64_t v207 = &v234[4 * v233];
      *(_DWORD *)int v244 = 6;
      int v228 = v244 + 4;
      while (v210 != v229)
      {
        int v245 = *((_DWORD *)v210 - 1);
        v210 -= 4;
        *((_DWORD *)v244 - 1) = v245;
        v244 -= 4;
      }
      *uint64_t v60 = v244;
      v60[1] = v228;
      v60[2] = v207;
      if (v229)
      {
        operator delete(v229);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v210 = 6;
      int v228 = v210 + 4;
    }
    v60[1] = v228;
    if (v228 >= v207)
    {
      int v246 = *v60;
      uint64_t v247 = (v228 - *v60) >> 2;
      unint64_t v248 = v247 + 1;
      if ((unint64_t)(v247 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v249 = v207 - v246;
      if (v249 >> 1 > v248) {
        unint64_t v248 = v249 >> 1;
      }
      if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v250 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v250 = v248;
      }
      if (v250)
      {
        unint64_t v251 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v250);
        int v246 = *v60;
        int v228 = v60[1];
      }
      else
      {
        unint64_t v251 = 0;
      }
      float64x2_t v260 = &v251[4 * v247];
      uint64_t v207 = &v251[4 * v250];
      *(_DWORD *)float64x2_t v260 = 9;
      unint64_t v237 = v260 + 4;
      while (v228 != v246)
      {
        int v261 = *((_DWORD *)v228 - 1);
        v228 -= 4;
        *((_DWORD *)v260 - 1) = v261;
        v260 -= 4;
      }
      *uint64_t v60 = v260;
      v60[1] = v237;
      v60[2] = v207;
      if (v246)
      {
        operator delete(v246);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v228 = 9;
      unint64_t v237 = v228 + 4;
    }
    v60[1] = v237;
    if (v237 < v207) {
      goto LABEL_263;
    }
    uint64_t v254 = *v60;
    uint64_t v263 = (v237 - *v60) >> 2;
    unint64_t v264 = v263 + 1;
    if (!((unint64_t)(v263 + 1) >> 62))
    {
      uint64_t v265 = v207 - v254;
      if (v265 >> 1 > v264) {
        unint64_t v264 = v265 >> 1;
      }
      if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v266 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v266 = v264;
      }
      if (v266)
      {
        int32x4_t v267 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v266);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int32x4_t v267 = 0;
      }
      int32x2_t v268 = &v267[4 * v263];
      float32x4_t v269 = &v267[4 * v266];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v271 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v271;
        v268 -= 4;
      }
LABEL_280:
      *uint64_t v60 = v268;
      v60[1] = v262;
      v60[2] = v269;
      if (v254) {
        operator delete(v254);
      }
      goto LABEL_282;
    }
LABEL_314:
    abort();
  }
  if ((unint64_t)((char *)v342 - (unsigned char *)__p) > 0x23F)
  {
    geom::half_plane_intersection_3<double>(0x12uLL, (float64x2_t *)__p, (void **)a3, (unint64_t *)a4, a5);
  }
  else
  {
    *(void *)std::vector<int>::value_type __x = 0;
    float64x2_t v339 = 0;
    float64x2_t v340 = 0;
    f64 = (_OWORD *)geom::kdop_axes<(unsigned char)18,double>[2 * v15].f64;
    int64x2_t v66 = *(int64x2_t *)f64;
    float64x2_t v67 = *((float64x2_t *)f64 + 1);
    double v68 = fabs(v67.f64[0]);
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v13.i64 = -*(double *)&v66.i64[1];
      float64x2_t v70 = 0uLL;
      float64x2_t v69 = (float64x2_t)vzip1q_s64(v13, v66);
    }
    else
    {
      v69.f64[0] = 0.0;
      v69.f64[1] = -v67.f64[0];
      float64x2_t v70 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    }
    float64x2_t v81 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    float64x2_t v82 = vmulq_f64(v70, v70);
    v82.f64[0] = 1.0 / sqrt(v82.f64[0] + vaddvq_f64(vmulq_f64(v69, v69)));
    float64x2_t v327 = vmulq_f64(v70, v82);
    int64x2_t v332 = *((int64x2_t *)f64 + 1);
    int8x16_t v83 = (int8x16_t)vmulq_n_f64(v69, v82.f64[0]);
    unint64_t v289 = vextq_s8(v83, v83, 8uLL).u64[0];
    uint64_t v296 = v83.i64[0];
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v12.i64 = -*(double *)&v66.i64[1];
      float64x2_t v85 = 0uLL;
      float64x2_t v84 = (float64x2_t)vzip1q_s64(v12, v66);
    }
    else
    {
      v84.f64[0] = 0.0;
      v84.f64[1] = -v67.f64[0];
      float64x2_t v85 = v81;
    }
    float64x2_t v86 = vmulq_f64(v85, v85);
    v86.f64[0] = 1.0 / sqrt(v86.f64[0] + vaddvq_f64(vmulq_f64(v84, v84)));
    float64x2_t v87 = vmulq_n_f64(v84, v86.f64[0]);
    float64x2_t v88 = vmulq_f64(v85, v86);
    v89.f64[0] = *((float64_t *)f64 + 2);
    v89.f64[1] = *(float64_t *)f64;
    float64x2_t v305 = vnegq_f64(v67);
    float64x2_t v90 = vmlaq_laneq_f64(vmulq_laneq_f64(v305, v87, 1), v88, (float64x2_t)v66, 1);
    v88.f64[1] = v87.f64[0];
    float64x2_t v91 = vnegq_f64((float64x2_t)v66);
    float64x2_t v92 = vmlaq_f64(vmulq_f64(v88, v91), v87, v89);
    float64x2_t v93 = vmulq_f64(v92, v92);
    double v94 = vmulq_f64(v90, v90).f64[0];
    v90.f64[1] = v92.f64[0];
    v93.f64[0] = 1.0 / sqrt(v93.f64[1] + v94 + v93.f64[0]);
    int8x16_t v95 = (int8x16_t)vmulq_n_f64(v90, v93.f64[0]);
    unint64_t v96 = vextq_s8(v95, v95, 8uLL).u64[0];
    float64x2_t v322 = vmulq_laneq_f64(v93, v92, 1);
    unint64_t v288 = v96;
    uint64_t v294 = v95.i64[0];
    if (v342 == __p)
    {
      uint64_t v130 = 0;
      float32x4_t v121 = 0;
    }
    else
    {
      unint64_t v97 = 0;
      *(void *)&v98.f64[0] = v83.i64[0];
      *(void *)&v98.f64[1] = v289;
      v95.i64[1] = v96;
      float64x2_t v303 = (float64x2_t)v95;
      float64x2_t v304 = v98;
      int64x2_t v301 = *(int64x2_t *)f64;
      float64x2_t v302 = (float64x2_t)vdupq_lane_s64(v332.i64[0], 0);
      *(void *)&v91.f64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
      *(void *)&v89.f64[1] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
      float64x2_t v299 = v89;
      float64x2_t v300 = v81;
      float64x2_t v298 = v91;
      do
      {
        int32x4_t v99 = (float64x2_t *)&v49[32 * v97];
        v100.f64[0] = v99[1].f64[0];
        v100.f64[1] = v99->f64[0];
        float64x2_t v101 = vmlaq_f64(vmulq_f64(v100, v91), *v99, v89);
        float64x2_t v102 = vmlaq_f64(vmulq_laneq_f64(v305, *v99, 1), v99[1], v81);
        int64x2_t v306 = (int64x2_t)v99[1];
        float64x2_t v103 = vmulq_f64(v101, v101);
        float64_t v104 = v101.f64[0];
        float64x2_t v308 = v101;
        v105.f64[0] = v102.f64[0];
        v103.f64[0] = 1.0 / sqrt(v103.f64[1] + vmulq_f64(v102, v102).f64[0] + v103.f64[0]);
        float64x2_t v316 = v103;
        int64x2_t v106 = vzip1q_s64(v66, *(int64x2_t *)v99);
        int64x2_t v107 = vzip2q_s64(v66, *(int64x2_t *)v99);
        float64x2_t v108 = (float64x2_t)vzip1q_s64(v332, v306);
        float64x2_t v309 = (float64x2_t)vzip1q_s64(v106, v107);
        float64x2_t v312 = (float64x2_t)vzip2q_s64(v106, v107);
        v344.columns[0] = (simd_double2)vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)v106, *(double *)v66.i64), v81, (float64x2_t)v107), v302, v108);
        v344.columns[1] = (simd_double2)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v106, v99->f64[0]), (float64x2_t)v107, *v99, 1), v108, *(double *)v306.i64);
        v105.f64[1] = v104;
        float64x2_t v307 = v105;
        float64x2_t v109 = (float64x2_t)__invert_d2(v344).columns[1];
        float64x2_t v110 = vmlaq_laneq_f64(vmulq_n_f64(v309, v109.f64[0]), v312, v109, 1);
        float64x2_t v111 = vmlaq_laneq_f64(vmulq_f64((float64x2_t)v332, v109), (float64x2_t)v306, v109, 1);
        float64x2_t v112 = vmulq_n_f64(v307, v316.f64[0]);
        float64x2_t v113 = vmulq_laneq_f64(v316, v308, 1);
        v114.f64[0] = vmulq_f64(v327, v113).f64[0] + vaddvq_f64(vmulq_f64(v304, v112));
        int64x2_t v115 = (int64x2_t)vmulq_f64(v322, v113);
        v114.f64[1] = *(double *)v115.i64 + vaddvq_f64(vmulq_f64(v303, v112));
        int64x2_t v116 = (int64x2_t)vmulq_n_f64(v114, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v114, v114))));
        *(double *)v115.i64 = -*(double *)&v116.i64[1];
        float64x2_t v117 = (float64x2_t)vzip1q_s64(v115, v116);
        *(double *)v115.i64 = vmulq_f64(v327, v111).f64[0] + vaddvq_f64(vmulq_f64(v304, v110));
        *(double *)&v115.i64[1] = vmulq_f64(v322, v111).f64[0] + vaddvq_f64(vmulq_f64(v303, v110));
        int64x2_t v118 = (int64x2_t)vmulq_f64(v117, (float64x2_t)v115);
        float64x2_t v119 = vdivq_f64(v117, (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64((float64x2_t)v118, (float64x2_t)vdupq_laneq_s64(v118, 1)), 0));
        float32x4_t v120 = v339;
        if (v339 >= v340)
        {
          uint64_t v122 = ((uint64_t)v339 - *(void *)__x) >> 4;
          if ((unint64_t)(v122 + 1) >> 60) {
            goto LABEL_314;
          }
          unint64_t v123 = ((uint64_t)v340 - *(void *)__x) >> 3;
          if (v123 <= v122 + 1) {
            unint64_t v123 = v122 + 1;
          }
          if ((unint64_t)v340 - *(void *)__x >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v124 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v124 = v123;
          }
          if (v124)
          {
            float64x2_t v317 = v119;
            uint64_t v125 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v340, v124);
            float64x2_t v119 = v317;
          }
          else
          {
            uint64_t v125 = 0;
          }
          uint64_t v126 = (float64x2_t *)&v125[16 * v122];
          *uint64_t v126 = v119;
          float32x4_t v121 = v126 + 1;
          unint64_t v128 = *(float64x2_t **)__x;
          uint64_t v127 = v339;
          if (v339 != *(float64x2_t **)__x)
          {
            do
            {
              float64x2_t v129 = v127[-1];
              --v127;
              v126[-1] = v129;
              --v126;
            }
            while (v127 != v128);
            uint64_t v127 = *(float64x2_t **)__x;
          }
          *(void *)std::vector<int>::value_type __x = v126;
          float64x2_t v339 = v121;
          float64x2_t v340 = (float64x2_t *)&v125[16 * v124];
          if (v127) {
            operator delete(v127);
          }
        }
        else
        {
          *float64x2_t v339 = v119;
          float32x4_t v121 = v120 + 1;
        }
        float64x2_t v81 = v300;
        int64x2_t v66 = v301;
        float64x2_t v91 = v298;
        float64x2_t v89 = v299;
        float64x2_t v339 = v121;
        ++v97;
        float64x2_t v49 = (char *)__p;
      }
      while (v97 < ((char *)v342 - (unsigned char *)__p) >> 5);
      uint64_t v130 = *(void *)__x;
    }
    uint64_t v335 = 0;
    float64x2_t v336 = 0;
    uint64_t v337 = 0;
    geom::half_plane_intersection_2<double>(((uint64_t)v121 - v130) >> 4, v130, (uint64_t)&v335);
    uint64_t v163 = (float64x2_t *)v335;
    unint64_t v164 = v336;
    int v165 = (int8x16_t *)a3[1];
    if (v335 != v336)
    {
      unint64_t v166 = a3 + 2;
      *(void *)&v167.f64[0] = v294;
      *(void *)&v168.f64[0] = v296;
      *(void *)&v167.f64[1] = v288;
      *(void *)&v168.f64[1] = v289;
      float64x2_t v295 = v167;
      float64x2_t v297 = v168;
      do
      {
        int8x16_t v169 = (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v167, *v163, 1), v168, v163->f64[0]);
        unint64_t v170 = vextq_s8(v169, v169, 8uLL).u64[0];
        float64x2_t v171 = vmlaq_f64(vmulq_laneq_f64(v322, *v163, 1), *v163, v327);
        if ((unint64_t)v165 >= *v166)
        {
          uint64_t v172 = ((char *)v165 - *a3) >> 5;
          if ((unint64_t)(v172 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v173 = *v166 - (void)*a3;
          uint64_t v174 = v173 >> 4;
          if (v173 >> 4 <= (unint64_t)(v172 + 1)) {
            uint64_t v174 = v172 + 1;
          }
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v175 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v175 = v174;
          }
          if (v175)
          {
            uint64_t v334 = v169.i64[0];
            unint64_t v313 = v170;
            float64x2_t v318 = v171;
            float64x2_t v176 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v175);
            unint64_t v170 = v313;
            float64x2_t v171 = v318;
            v169.i64[0] = v334;
          }
          else
          {
            float64x2_t v176 = 0;
          }
          v169.i64[1] = v170;
          float64x2_t v177 = (int8x16_t *)&v176[32 * v172];
          *float64x2_t v177 = v169;
          v177[1] = (int8x16_t)v171;
          float64x2_t v179 = *a3;
          float32x4_t v178 = a3[1];
          float32x4_t v180 = v177;
          if (v178 != *a3)
          {
            do
            {
              int8x16_t v181 = *((int8x16_t *)v178 - 2);
              int8x16_t v182 = *((int8x16_t *)v178 - 1);
              v178 -= 32;
              v180[-2] = v181;
              v180[-1] = v182;
              v180 -= 2;
            }
            while (v178 != v179);
            float32x4_t v178 = *a3;
          }
          int v165 = v177 + 2;
          *a3 = (char *)v180;
          a3[1] = v177[2].i8;
          a3[2] = &v176[32 * v175];
          if (v178) {
            operator delete(v178);
          }
          float64x2_t v167 = v295;
          float64x2_t v168 = v297;
        }
        else
        {
          v169.i64[1] = v170;
          *int v165 = v169;
          v165[1] = (int8x16_t)v171;
          v165 += 2;
        }
        a3[1] = (char *)v165;
        ++v163;
      }
      while (v163 != v164);
    }
    std::vector<unsigned int>::resize(a4, ((char *)v165 - *a3) >> 4);
    uint64_t v183 = a3[1] - *a3;
    if (v183)
    {
      uint64_t v184 = 0;
      std::vector<int>::pointer v185 = a4->__begin_;
      uint64_t v186 = 4 * (v183 >> 5);
      uint64_t v187 = v186;
      do
      {
        v185[v184] = v184;
        ++v184;
        v187 -= 4;
      }
      while (v187);
      std::vector<int>::pointer v188 = a4->__end_ - 1;
      do
      {
        int v189 = *v185++;
        *v188-- = v189;
        v186 -= 4;
      }
      while (v186);
    }
    unint64_t v190 = (unint64_t)v183 >> 5;
    int v191 = a5[2];
    float64x2_t v192 = a5[1];
    if (v192 >= v191)
    {
      uint64_t v194 = *a5;
      uint64_t v195 = (v192 - *a5) >> 2;
      unint64_t v196 = v195 + 1;
      if ((unint64_t)(v195 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v197 = v191 - v194;
      if (v197 >> 1 > v196) {
        unint64_t v196 = v197 >> 1;
      }
      if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v198 = v196;
      }
      if (v198)
      {
        unint64_t v199 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v198);
        uint64_t v194 = *a5;
        float64x2_t v192 = a5[1];
      }
      else
      {
        unint64_t v199 = 0;
      }
      float32x4_t v272 = &v199[4 * v195];
      int v191 = &v199[4 * v198];
      *(_DWORD *)float32x4_t v272 = v190;
      int v193 = v272 + 4;
      while (v192 != v194)
      {
        int v273 = *((_DWORD *)v192 - 1);
        v192 -= 4;
        *((_DWORD *)v272 - 1) = v273;
        v272 -= 4;
      }
      *a5 = v272;
      a5[1] = v193;
      a5[2] = v191;
      if (v194)
      {
        operator delete(v194);
        int v191 = a5[2];
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v192 = v190;
      int v193 = v192 + 4;
    }
    a5[1] = v193;
    uint64_t v274 = ((unint64_t)(a3[1] - *a3) >> 4) & 0xFFFFFFFE;
    if (v193 >= v191)
    {
      float32x4_t v276 = *a5;
      uint64_t v277 = (v193 - *a5) >> 2;
      unint64_t v278 = v277 + 1;
      if ((unint64_t)(v277 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v279 = v191 - v276;
      if (v279 >> 1 > v278) {
        unint64_t v278 = v279 >> 1;
      }
      if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v280 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v280 = v278;
      }
      if (v280)
      {
        float32x4_t v281 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v280);
        float32x4_t v276 = *a5;
        int v193 = a5[1];
      }
      else
      {
        float32x4_t v281 = 0;
      }
      float32x4_t v282 = &v281[4 * v277];
      float64x2_t v283 = &v281[4 * v280];
      *(_DWORD *)float32x4_t v282 = v274;
      float32x4_t v275 = v282 + 4;
      while (v193 != v276)
      {
        int v284 = *((_DWORD *)v193 - 1);
        v193 -= 4;
        *((_DWORD *)v282 - 1) = v284;
        v282 -= 4;
      }
      *a5 = v282;
      a5[1] = v275;
      a5[2] = v283;
      if (v276) {
        operator delete(v276);
      }
    }
    else
    {
      *(_DWORD *)int v193 = v274;
      float32x4_t v275 = v193 + 4;
    }
    a5[1] = v275;
    if (v335)
    {
      float64x2_t v336 = (float64x2_t *)v335;
      operator delete(v335);
    }
    if (*(void *)__x)
    {
      float64x2_t v339 = *(float64x2_t **)__x;
      operator delete(*(void **)__x);
    }
  }
  uint64_t v285 = (float64x2_t *)*a3;
  float64x2_t v286 = (float64x2_t *)a3[1];
  if (*a3 != (char *)v286)
  {
    do
    {
      float64x2_t v287 = vaddq_f64(a2[1], v285[1]);
      *uint64_t v285 = vaddq_f64(*a2, *v285);
      v285[1] = v287;
      v285 += 2;
    }
    while (v285 != v286);
  }
LABEL_311:
  if (__p)
  {
    float64x2_t v342 = (int8x16_t *)__p;
    operator delete(__p);
  }
}

void geom_dop20_polyhedron_3d(uint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float64x2_t v8 = a2[1];
  v12[0] = *a2;
  v12[1] = v8;
  float64_t v9 = (char **)geom::collection_to_vector<float>(a3);
  float32x4_t v10 = (std::vector<int> *)geom::collection_to_vector<float>(a4);
  float64x2_t v11 = (char **)geom::collection_to_vector<float>(a5);
  geom::dop<(unsigned char)20,double>::compute_polyhedron(a1, v12, v9, v10, v11);
}

void geom::dop<(unsigned char)20,double>::compute_polyhedron(uint64_t a1, float64x2_t *a2, char **a3, std::vector<int> *a4, char **a5)
{
  uint64_t v6 = 0;
  void v343[21] = *MEMORY[0x263EF8340];
  a3[1] = *a3;
  a4->__end_ = a4->__begin_;
  a5[1] = *a5;
  float64x2_t v8 = *a2;
  float64x2_t v7 = a2[1];
  do
  {
    float64_t v9 = vmulq_f64(geom::kdop_axes<(unsigned char)20,double>[2 * v6 + 1], v7).f64[0]
       + vaddvq_f64(vmulq_f64(geom::kdop_axes<(unsigned char)20,double>[2 * v6], v8));
    float32x4_t v10 = (double *)(a1 + 8 * v6);
    *(double *)&v343[v6 + 11] = *v10 - v9;
    *(double *)&v343[++v6] = v10[10] - v9;
  }
  while (v6 != 10);
  std::vector<int> __p = 0;
  float64x2_t v342 = 0;
  v343[0] = 0;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm(&__p, 0x14uLL);
  uint64_t v14 = 0;
  uint64_t v15 = -1;
  uint64_t v16 = -1;
  do
  {
    double v17 = *(double *)&v343[v14 + 11];
    *(void *)&v11.f64[0] = v343[v14 + 1];
    if (v17 == v11.f64[0])
    {
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v18 = v15;
      uint64_t v15 = v14;
      if (vabdd_f64(v17, v11.f64[0]) > 0.000001)
      {
        float32x4_t v19 = &geom::kdop_axes<(unsigned char)20,double>[2 * v14];
        int64x2_t v13 = *(int64x2_t *)v19;
        float64x2_t v20 = v19[1];
        float64x2_t v21 = vdivq_f64(v20, v11);
        int8x16_t v22 = (int8x16_t)vdivq_f64(*v19, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0));
        float64x2_t v23 = (float64x2_t)vextq_s8(v22, v22, 8uLL);
        unint64_t v25 = (float64x2_t *)v342;
        unint64_t v24 = v343[0];
        if ((unint64_t)v342 >= v343[0])
        {
          double v27 = (float64x2_t *)__p;
          uint64_t v28 = ((char *)v342 - (unsigned char *)__p) >> 5;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59) {
            goto LABEL_314;
          }
          float64x2_t v324 = v20;
          int64x2_t v329 = v13;
          uint64_t v30 = v343[0] - (void)__p;
          if ((uint64_t)(v343[0] - (void)__p) >> 4 > v29) {
            unint64_t v29 = v30 >> 4;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            float64x2_t v314 = v21;
            uint64_t v319 = v22.i64[0];
            float64x2_t v310 = v23;
            float32x4_t v32 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v343, v31);
            float64x2_t v23 = v310;
            float64x2_t v21 = v314;
            v22.i64[0] = v319;
            unint64_t v33 = v32;
            double v27 = (float64x2_t *)__p;
            unint64_t v25 = (float64x2_t *)v342;
          }
          else
          {
            unint64_t v33 = 0;
          }
          v22.i64[1] = *(void *)&v23.f64[0];
          uint64_t v34 = (int8x16_t *)&v33[32 * v28];
          *uint64_t v34 = v22;
          v34[1] = (int8x16_t)v21;
          unint64_t v35 = v34;
          while (v25 != v27)
          {
            float64x2_t v36 = v25[-2];
            float64x2_t v23 = v25[-1];
            v25 -= 2;
            v35[-2] = (int8x16_t)v36;
            v35[-1] = (int8x16_t)v23;
            v35 -= 2;
          }
          unint64_t v24 = (unint64_t)&v33[32 * v31];
          int64x2_t v26 = (float64x2_t *)&v34[2];
          std::vector<int> __p = v35;
          float64x2_t v342 = v34 + 2;
          v343[0] = v24;
          if (v27)
          {
            operator delete(v27);
            unint64_t v24 = v343[0];
          }
          float64x2_t v20 = v324;
          int64x2_t v13 = v329;
        }
        else
        {
          v22.i64[1] = *(void *)&v23.f64[0];
          *float64x2_t v342 = v22;
          v25[1] = v21;
          int64x2_t v26 = v25 + 2;
        }
        float64x2_t v342 = (int8x16_t *)v26;
        *(void *)&v23.f64[0] = v343[v14 + 11];
        float64x2_t v37 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23.f64[0], 0);
        int64x2_t v12 = (int64x2_t)vdivq_f64(v20, v23);
        v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
        float64x2_t v11 = vdivq_f64((float64x2_t)v13, v37);
        unint64_t v38 = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
        if ((unint64_t)v26 >= v24)
        {
          float32x4_t v40 = (float64x2_t *)__p;
          uint64_t v41 = ((char *)v26 - (unsigned char *)__p) >> 5;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v43 = v24 - (void)__p;
          if (v43 >> 4 > v42) {
            unint64_t v42 = v43 >> 4;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v44 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            float64_t v325 = v11.f64[0];
            int64x2_t v330 = v12;
            unint64_t v320 = v38;
            float32x4_t v45 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v343, v44);
            unint64_t v38 = v320;
            v11.f64[0] = v325;
            int64x2_t v12 = v330;
            unint64_t v46 = v45;
            float32x4_t v40 = (float64x2_t *)__p;
            int64x2_t v26 = (float64x2_t *)v342;
          }
          else
          {
            unint64_t v46 = 0;
          }
          *(void *)&v11.f64[1] = v38;
          float64x2_t v47 = (float64x2_t *)&v46[32 * v41];
          *float64x2_t v47 = v11;
          v47[1] = (float64x2_t)v12;
          unint64_t v48 = v47;
          while (v26 != v40)
          {
            float64x2_t v11 = v26[-2];
            int64x2_t v12 = (int64x2_t)v26[-1];
            v26 -= 2;
            v48[-2] = v11;
            v48[-1] = (float64x2_t)v12;
            v48 -= 2;
          }
          float32x4_t v39 = (int8x16_t *)&v47[2];
          std::vector<int> __p = v48;
          float64x2_t v342 = (int8x16_t *)&v47[2];
          v343[0] = &v46[32 * v44];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)&v11.f64[1] = v38;
          *int64x2_t v26 = v11;
          v26[1] = (float64x2_t)v12;
          float32x4_t v39 = (int8x16_t *)&v26[2];
        }
        float64x2_t v342 = v39;
        uint64_t v16 = v14;
        uint64_t v15 = v18;
      }
    }
    ++v14;
  }
  while (v14 != 10);
  float64x2_t v49 = (char *)__p;
  uint64_t v50 = ((char *)v342 - (unsigned char *)__p) >> 5;
  if (!v50)
  {
    unint64_t v61 = (unint64_t)a3[2];
    unint64_t v62 = (float64x2_t *)a3[1];
    if ((unint64_t)v62 >= v61)
    {
      uint64_t v76 = ((char *)v62 - *a3) >> 5;
      unint64_t v77 = v76 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v76 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v78 = v61 - (void)*a3;
      if (v78 >> 4 > v77) {
        unint64_t v77 = v78 >> 4;
      }
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v79 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79) {
        float32x4_t v80 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v79);
      }
      else {
        float32x4_t v80 = 0;
      }
      float64x2_t v146 = (float64x2_t *)&v80[32 * v76];
      float32x4_t v147 = &v80[32 * v79];
      float64x2_t v148 = a2[1];
      *float64x2_t v146 = *a2;
      v146[1] = v148;
      uint64_t v64 = (char *)&v146[2];
      uint64_t v150 = *a3;
      float32x4_t v149 = a3[1];
      if (v149 != *a3)
      {
        do
        {
          float64x2_t v151 = *((float64x2_t *)v149 - 2);
          float64x2_t v152 = *((float64x2_t *)v149 - 1);
          v149 -= 32;
          v146[-2] = v151;
          v146[-1] = v152;
          v146 -= 2;
        }
        while (v149 != v150);
        float32x4_t v149 = *a3;
      }
      *a3 = (char *)v146;
      a3[1] = v64;
      a3[2] = v147;
      if (v149) {
        operator delete(v149);
      }
    }
    else
    {
      float64x2_t v63 = a2[1];
      *unint64_t v62 = *a2;
      v62[1] = v63;
      uint64_t v64 = (char *)&v62[2];
      uint64_t v60 = a5;
    }
    a3[1] = v64;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    unsigned int v154 = v60 + 2;
    unint64_t v153 = v60[2];
    uint64_t v155 = v60[1];
    if (v155 >= v153)
    {
      uint64_t v157 = *v60;
      uint64_t v158 = (v155 - *v60) >> 2;
      unint64_t v159 = v158 + 1;
      if ((unint64_t)(v158 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v160 = v153 - v157;
      if (v160 >> 1 > v159) {
        unint64_t v159 = v160 >> 1;
      }
      if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v161 = v159;
      }
      if (v161)
      {
        uint64_t v162 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v161);
        uint64_t v157 = *v60;
        uint64_t v155 = v60[1];
      }
      else
      {
        uint64_t v162 = 0;
      }
      unint64_t v217 = &v162[4 * v158];
      unint64_t v153 = &v162[4 * v161];
      *(_DWORD *)unint64_t v217 = 3;
      float32x4_t v156 = v217 + 4;
      while (v155 != v157)
      {
        int v218 = *((_DWORD *)v155 - 1);
        v155 -= 4;
        *((_DWORD *)v217 - 1) = v218;
        v217 -= 4;
      }
      *uint64_t v60 = v217;
      v60[1] = v156;
      v60[2] = v153;
      if (v157)
      {
        operator delete(v157);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v155 = 3;
      float32x4_t v156 = v155 + 4;
    }
    v60[1] = v156;
    if (v156 >= v153)
    {
      int v220 = *v60;
      uint64_t v221 = (v156 - *v60) >> 2;
      unint64_t v222 = v221 + 1;
      if ((unint64_t)(v221 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v223 = v153 - v220;
      if (v223 >> 1 > v222) {
        unint64_t v222 = v223 >> 1;
      }
      if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v224 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v224 = v222;
      }
      if (v224)
      {
        unint64_t v225 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v224);
        int v220 = *v60;
        float32x4_t v156 = v60[1];
      }
      else
      {
        unint64_t v225 = 0;
      }
      float64x2_t v235 = &v225[4 * v221];
      unint64_t v153 = &v225[4 * v224];
      *(_DWORD *)float64x2_t v235 = 6;
      uint64_t v219 = v235 + 4;
      while (v156 != v220)
      {
        int v236 = *((_DWORD *)v156 - 1);
        v156 -= 4;
        *((_DWORD *)v235 - 1) = v236;
        v235 -= 4;
      }
      *uint64_t v60 = v235;
      v60[1] = v219;
      v60[2] = v153;
      if (v220)
      {
        operator delete(v220);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)float32x4_t v156 = 6;
      uint64_t v219 = v156 + 4;
    }
    v60[1] = v219;
    if (v219 >= v153)
    {
      uint64_t v238 = *v60;
      uint64_t v239 = (v219 - *v60) >> 2;
      unint64_t v240 = v239 + 1;
      if ((unint64_t)(v239 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v241 = v153 - v238;
      if (v241 >> 1 > v240) {
        unint64_t v240 = v241 >> 1;
      }
      if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v242 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v242 = v240;
      }
      if (v242)
      {
        int v243 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v242);
        uint64_t v238 = *v60;
        uint64_t v219 = v60[1];
      }
      else
      {
        int v243 = 0;
      }
      uint64_t v252 = &v243[4 * v239];
      unint64_t v153 = &v243[4 * v242];
      *(_DWORD *)uint64_t v252 = 9;
      unint64_t v237 = v252 + 4;
      while (v219 != v238)
      {
        int v253 = *((_DWORD *)v219 - 1);
        v219 -= 4;
        *((_DWORD *)v252 - 1) = v253;
        v252 -= 4;
      }
      *uint64_t v60 = v252;
      v60[1] = v237;
      v60[2] = v153;
      if (v238)
      {
        operator delete(v238);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v219 = 9;
      unint64_t v237 = v219 + 4;
    }
    v60[1] = v237;
    if (v237 < v153)
    {
LABEL_263:
      *(_DWORD *)unint64_t v237 = 12;
      float64x2_t v262 = v237 + 4;
LABEL_282:
      v60[1] = v262;
      goto LABEL_311;
    }
    uint64_t v254 = *v60;
    uint64_t v255 = (v237 - *v60) >> 2;
    unint64_t v256 = v255 + 1;
    if (!((unint64_t)(v255 + 1) >> 62))
    {
      uint64_t v257 = v153 - v254;
      if (v257 >> 1 > v256) {
        unint64_t v256 = v257 >> 1;
      }
      if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v258 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v258 = v256;
      }
      if (v258)
      {
        int v259 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v258);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int v259 = 0;
      }
      int32x2_t v268 = &v259[4 * v255];
      float32x4_t v269 = &v259[4 * v258];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v270 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v270;
        v268 -= 4;
      }
      goto LABEL_280;
    }
    goto LABEL_314;
  }
  if (v50 == 2)
  {
    float32x4_t v51 = &geom::kdop_axes<(unsigned char)20,double>[2 * v16];
    float64x2_t v52 = *v51;
    float64x2_t v53 = v51[1];
    v11.f64[0] = *(float64_t *)(a1 + 8 * v16);
    float64x2_t v54 = vmulq_f64(v53, v11);
    int8x16_t v55 = (int8x16_t)vmulq_n_f64(*v51, v11.f64[0]);
    unint64_t v56 = vextq_s8(v55, v55, 8uLL).u64[0];
    unint64_t v57 = (unint64_t)a3[2];
    float32x4_t v58 = (int8x16_t *)a3[1];
    if ((unint64_t)v58 >= v57)
    {
      uint64_t v71 = ((char *)v58 - *a3) >> 5;
      unint64_t v72 = v71 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v71 + 1) >> 59) {
        goto LABEL_314;
      }
      float64x2_t v326 = v53;
      float64x2_t v331 = v52;
      uint64_t v73 = v57 - (void)*a3;
      if (v73 >> 4 > v72) {
        unint64_t v72 = v73 >> 4;
      }
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v74 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        uint64_t v315 = v55.i64[0];
        float64x2_t v321 = v54;
        unint64_t v311 = v56;
        int32x4_t v75 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v74);
        unint64_t v56 = v311;
        v55.i64[0] = v315;
        float64x2_t v54 = v321;
      }
      else
      {
        int32x4_t v75 = 0;
      }
      float64x2_t v131 = (int8x16_t *)&v75[32 * v71];
      float32x4_t v132 = &v75[32 * v74];
      v55.i64[1] = v56;
      *float64x2_t v131 = v55;
      v131[1] = (int8x16_t)v54;
      uint64_t v59 = v131 + 2;
      float32x4_t v134 = *a3;
      float64x2_t v133 = a3[1];
      if (v133 != *a3)
      {
        do
        {
          int8x16_t v135 = *((int8x16_t *)v133 - 2);
          float64x2_t v54 = *((float64x2_t *)v133 - 1);
          v133 -= 32;
          v131[-2] = v135;
          v131[-1] = (int8x16_t)v54;
          v131 -= 2;
        }
        while (v133 != v134);
        float64x2_t v133 = *a3;
      }
      *a3 = (char *)v131;
      a3[1] = (char *)v59;
      a3[2] = v132;
      if (v133) {
        operator delete(v133);
      }
      float64x2_t v53 = v326;
      float64x2_t v52 = v331;
    }
    else
    {
      v55.i64[1] = v56;
      *float32x4_t v58 = v55;
      v58[1] = (int8x16_t)v54;
      uint64_t v59 = v58 + 2;
      uint64_t v60 = a5;
    }
    a3[1] = (char *)v59;
    v54.f64[0] = *(float64_t *)(a1 + 8 * v16 + 80);
    float64x2_t v136 = vmulq_f64(v53, v54);
    *(void *)&v52.f64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
    int8x16_t v137 = (int8x16_t)vmulq_n_f64(v52, v54.f64[0]);
    unint64_t v138 = vextq_s8(v137, v137, 8uLL).u64[0];
    unint64_t v139 = (unint64_t)a3[2];
    if ((unint64_t)v59 >= v139)
    {
      uint64_t v141 = ((char *)v59 - *a3) >> 5;
      if ((unint64_t)(v141 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v142 = v139 - (void)*a3;
      uint64_t v143 = v142 >> 4;
      if (v142 >> 4 <= (unint64_t)(v141 + 1)) {
        uint64_t v143 = v141 + 1;
      }
      if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v144 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v144 = v143;
      }
      if (v144)
      {
        uint64_t v328 = v137.i64[0];
        float64x2_t v333 = v136;
        unint64_t v323 = v138;
        float64x2_t v145 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v144);
        unint64_t v138 = v323;
        v137.i64[0] = v328;
        float64x2_t v136 = v333;
      }
      else
      {
        float64x2_t v145 = 0;
      }
      int v200 = (int8x16_t *)&v145[32 * v141];
      float64x2_t v201 = &v145[32 * v144];
      v137.i64[1] = v138;
      *int v200 = v137;
      v200[1] = (int8x16_t)v136;
      uint64_t v140 = v200 + 2;
      uint64_t v203 = *a3;
      int v202 = a3[1];
      if (v202 != *a3)
      {
        do
        {
          int8x16_t v204 = *((int8x16_t *)v202 - 2);
          int8x16_t v205 = *((int8x16_t *)v202 - 1);
          v202 -= 32;
          v200[-2] = v204;
          v200[-1] = v205;
          v200 -= 2;
        }
        while (v202 != v203);
        int v202 = *a3;
      }
      *a3 = (char *)v200;
      a3[1] = (char *)v140;
      a3[2] = v201;
      if (v202) {
        operator delete(v202);
      }
    }
    else
    {
      v137.i64[1] = v138;
      *uint64_t v59 = v137;
      v59[1] = (int8x16_t)v136;
      uint64_t v140 = v59 + 2;
    }
    a3[1] = (char *)v140;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    std::vector<int>::pointer begin = a4->__begin_;
    begin[10] = 1;
    begin[7] = 1;
    begin[4] = 1;
    unint64_t v208 = v60 + 2;
    uint64_t v207 = v60[2];
    int v209 = v60[1];
    if (v209 >= v207)
    {
      int v211 = *v60;
      uint64_t v212 = (v209 - *v60) >> 2;
      unint64_t v213 = v212 + 1;
      if ((unint64_t)(v212 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v214 = v207 - v211;
      if (v214 >> 1 > v213) {
        unint64_t v213 = v214 >> 1;
      }
      if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v215 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v215 = v213;
      }
      if (v215)
      {
        uint64_t v216 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v215);
        int v211 = *v60;
        int v209 = v60[1];
      }
      else
      {
        uint64_t v216 = 0;
      }
      int v226 = &v216[4 * v212];
      uint64_t v207 = &v216[4 * v215];
      *(_DWORD *)int v226 = 3;
      float64x2_t v210 = v226 + 4;
      while (v209 != v211)
      {
        int v227 = *((_DWORD *)v209 - 1);
        v209 -= 4;
        *((_DWORD *)v226 - 1) = v227;
        v226 -= 4;
      }
      *uint64_t v60 = v226;
      v60[1] = v210;
      v60[2] = v207;
      if (v211)
      {
        operator delete(v211);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v209 = 3;
      float64x2_t v210 = v209 + 4;
    }
    v60[1] = v210;
    if (v210 >= v207)
    {
      unint64_t v229 = *v60;
      uint64_t v230 = (v210 - *v60) >> 2;
      unint64_t v231 = v230 + 1;
      if ((unint64_t)(v230 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v232 = v207 - v229;
      if (v232 >> 1 > v231) {
        unint64_t v231 = v232 >> 1;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        int v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v233);
        unint64_t v229 = *v60;
        float64x2_t v210 = v60[1];
      }
      else
      {
        int v234 = 0;
      }
      int v244 = &v234[4 * v230];
      uint64_t v207 = &v234[4 * v233];
      *(_DWORD *)int v244 = 6;
      int v228 = v244 + 4;
      while (v210 != v229)
      {
        int v245 = *((_DWORD *)v210 - 1);
        v210 -= 4;
        *((_DWORD *)v244 - 1) = v245;
        v244 -= 4;
      }
      *uint64_t v60 = v244;
      v60[1] = v228;
      v60[2] = v207;
      if (v229)
      {
        operator delete(v229);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v210 = 6;
      int v228 = v210 + 4;
    }
    v60[1] = v228;
    if (v228 >= v207)
    {
      int v246 = *v60;
      uint64_t v247 = (v228 - *v60) >> 2;
      unint64_t v248 = v247 + 1;
      if ((unint64_t)(v247 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v249 = v207 - v246;
      if (v249 >> 1 > v248) {
        unint64_t v248 = v249 >> 1;
      }
      if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v250 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v250 = v248;
      }
      if (v250)
      {
        unint64_t v251 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v250);
        int v246 = *v60;
        int v228 = v60[1];
      }
      else
      {
        unint64_t v251 = 0;
      }
      float64x2_t v260 = &v251[4 * v247];
      uint64_t v207 = &v251[4 * v250];
      *(_DWORD *)float64x2_t v260 = 9;
      unint64_t v237 = v260 + 4;
      while (v228 != v246)
      {
        int v261 = *((_DWORD *)v228 - 1);
        v228 -= 4;
        *((_DWORD *)v260 - 1) = v261;
        v260 -= 4;
      }
      *uint64_t v60 = v260;
      v60[1] = v237;
      v60[2] = v207;
      if (v246)
      {
        operator delete(v246);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v228 = 9;
      unint64_t v237 = v228 + 4;
    }
    v60[1] = v237;
    if (v237 < v207) {
      goto LABEL_263;
    }
    uint64_t v254 = *v60;
    uint64_t v263 = (v237 - *v60) >> 2;
    unint64_t v264 = v263 + 1;
    if (!((unint64_t)(v263 + 1) >> 62))
    {
      uint64_t v265 = v207 - v254;
      if (v265 >> 1 > v264) {
        unint64_t v264 = v265 >> 1;
      }
      if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v266 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v266 = v264;
      }
      if (v266)
      {
        int32x4_t v267 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v266);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int32x4_t v267 = 0;
      }
      int32x2_t v268 = &v267[4 * v263];
      float32x4_t v269 = &v267[4 * v266];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v271 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v271;
        v268 -= 4;
      }
LABEL_280:
      *uint64_t v60 = v268;
      v60[1] = v262;
      v60[2] = v269;
      if (v254) {
        operator delete(v254);
      }
      goto LABEL_282;
    }
LABEL_314:
    abort();
  }
  if ((unint64_t)((char *)v342 - (unsigned char *)__p) > 0x27F)
  {
    geom::half_plane_intersection_3<double>(0x14uLL, (float64x2_t *)__p, (void **)a3, (unint64_t *)a4, a5);
  }
  else
  {
    *(void *)std::vector<int>::value_type __x = 0;
    float64x2_t v339 = 0;
    float64x2_t v340 = 0;
    f64 = (_OWORD *)geom::kdop_axes<(unsigned char)20,double>[2 * v15].f64;
    int64x2_t v66 = *(int64x2_t *)f64;
    float64x2_t v67 = *((float64x2_t *)f64 + 1);
    double v68 = fabs(v67.f64[0]);
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v13.i64 = -*(double *)&v66.i64[1];
      float64x2_t v70 = 0uLL;
      float64x2_t v69 = (float64x2_t)vzip1q_s64(v13, v66);
    }
    else
    {
      v69.f64[0] = 0.0;
      v69.f64[1] = -v67.f64[0];
      float64x2_t v70 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    }
    float64x2_t v81 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    float64x2_t v82 = vmulq_f64(v70, v70);
    v82.f64[0] = 1.0 / sqrt(v82.f64[0] + vaddvq_f64(vmulq_f64(v69, v69)));
    float64x2_t v327 = vmulq_f64(v70, v82);
    int64x2_t v332 = *((int64x2_t *)f64 + 1);
    int8x16_t v83 = (int8x16_t)vmulq_n_f64(v69, v82.f64[0]);
    unint64_t v289 = vextq_s8(v83, v83, 8uLL).u64[0];
    uint64_t v296 = v83.i64[0];
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v12.i64 = -*(double *)&v66.i64[1];
      float64x2_t v85 = 0uLL;
      float64x2_t v84 = (float64x2_t)vzip1q_s64(v12, v66);
    }
    else
    {
      v84.f64[0] = 0.0;
      v84.f64[1] = -v67.f64[0];
      float64x2_t v85 = v81;
    }
    float64x2_t v86 = vmulq_f64(v85, v85);
    v86.f64[0] = 1.0 / sqrt(v86.f64[0] + vaddvq_f64(vmulq_f64(v84, v84)));
    float64x2_t v87 = vmulq_n_f64(v84, v86.f64[0]);
    float64x2_t v88 = vmulq_f64(v85, v86);
    v89.f64[0] = *((float64_t *)f64 + 2);
    v89.f64[1] = *(float64_t *)f64;
    float64x2_t v305 = vnegq_f64(v67);
    float64x2_t v90 = vmlaq_laneq_f64(vmulq_laneq_f64(v305, v87, 1), v88, (float64x2_t)v66, 1);
    v88.f64[1] = v87.f64[0];
    float64x2_t v91 = vnegq_f64((float64x2_t)v66);
    float64x2_t v92 = vmlaq_f64(vmulq_f64(v88, v91), v87, v89);
    float64x2_t v93 = vmulq_f64(v92, v92);
    double v94 = vmulq_f64(v90, v90).f64[0];
    v90.f64[1] = v92.f64[0];
    v93.f64[0] = 1.0 / sqrt(v93.f64[1] + v94 + v93.f64[0]);
    int8x16_t v95 = (int8x16_t)vmulq_n_f64(v90, v93.f64[0]);
    unint64_t v96 = vextq_s8(v95, v95, 8uLL).u64[0];
    float64x2_t v322 = vmulq_laneq_f64(v93, v92, 1);
    unint64_t v288 = v96;
    uint64_t v294 = v95.i64[0];
    if (v342 == __p)
    {
      uint64_t v130 = 0;
      float32x4_t v121 = 0;
    }
    else
    {
      unint64_t v97 = 0;
      *(void *)&v98.f64[0] = v83.i64[0];
      *(void *)&v98.f64[1] = v289;
      v95.i64[1] = v96;
      float64x2_t v303 = (float64x2_t)v95;
      float64x2_t v304 = v98;
      int64x2_t v301 = *(int64x2_t *)f64;
      float64x2_t v302 = (float64x2_t)vdupq_lane_s64(v332.i64[0], 0);
      *(void *)&v91.f64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
      *(void *)&v89.f64[1] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
      float64x2_t v299 = v89;
      float64x2_t v300 = v81;
      float64x2_t v298 = v91;
      do
      {
        int32x4_t v99 = (float64x2_t *)&v49[32 * v97];
        v100.f64[0] = v99[1].f64[0];
        v100.f64[1] = v99->f64[0];
        float64x2_t v101 = vmlaq_f64(vmulq_f64(v100, v91), *v99, v89);
        float64x2_t v102 = vmlaq_f64(vmulq_laneq_f64(v305, *v99, 1), v99[1], v81);
        int64x2_t v306 = (int64x2_t)v99[1];
        float64x2_t v103 = vmulq_f64(v101, v101);
        float64_t v104 = v101.f64[0];
        float64x2_t v308 = v101;
        v105.f64[0] = v102.f64[0];
        v103.f64[0] = 1.0 / sqrt(v103.f64[1] + vmulq_f64(v102, v102).f64[0] + v103.f64[0]);
        float64x2_t v316 = v103;
        int64x2_t v106 = vzip1q_s64(v66, *(int64x2_t *)v99);
        int64x2_t v107 = vzip2q_s64(v66, *(int64x2_t *)v99);
        float64x2_t v108 = (float64x2_t)vzip1q_s64(v332, v306);
        float64x2_t v309 = (float64x2_t)vzip1q_s64(v106, v107);
        float64x2_t v312 = (float64x2_t)vzip2q_s64(v106, v107);
        v344.columns[0] = (simd_double2)vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)v106, *(double *)v66.i64), v81, (float64x2_t)v107), v302, v108);
        v344.columns[1] = (simd_double2)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v106, v99->f64[0]), (float64x2_t)v107, *v99, 1), v108, *(double *)v306.i64);
        v105.f64[1] = v104;
        float64x2_t v307 = v105;
        float64x2_t v109 = (float64x2_t)__invert_d2(v344).columns[1];
        float64x2_t v110 = vmlaq_laneq_f64(vmulq_n_f64(v309, v109.f64[0]), v312, v109, 1);
        float64x2_t v111 = vmlaq_laneq_f64(vmulq_f64((float64x2_t)v332, v109), (float64x2_t)v306, v109, 1);
        float64x2_t v112 = vmulq_n_f64(v307, v316.f64[0]);
        float64x2_t v113 = vmulq_laneq_f64(v316, v308, 1);
        v114.f64[0] = vmulq_f64(v327, v113).f64[0] + vaddvq_f64(vmulq_f64(v304, v112));
        int64x2_t v115 = (int64x2_t)vmulq_f64(v322, v113);
        v114.f64[1] = *(double *)v115.i64 + vaddvq_f64(vmulq_f64(v303, v112));
        int64x2_t v116 = (int64x2_t)vmulq_n_f64(v114, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v114, v114))));
        *(double *)v115.i64 = -*(double *)&v116.i64[1];
        float64x2_t v117 = (float64x2_t)vzip1q_s64(v115, v116);
        *(double *)v115.i64 = vmulq_f64(v327, v111).f64[0] + vaddvq_f64(vmulq_f64(v304, v110));
        *(double *)&v115.i64[1] = vmulq_f64(v322, v111).f64[0] + vaddvq_f64(vmulq_f64(v303, v110));
        int64x2_t v118 = (int64x2_t)vmulq_f64(v117, (float64x2_t)v115);
        float64x2_t v119 = vdivq_f64(v117, (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64((float64x2_t)v118, (float64x2_t)vdupq_laneq_s64(v118, 1)), 0));
        float32x4_t v120 = v339;
        if (v339 >= v340)
        {
          uint64_t v122 = ((uint64_t)v339 - *(void *)__x) >> 4;
          if ((unint64_t)(v122 + 1) >> 60) {
            goto LABEL_314;
          }
          unint64_t v123 = ((uint64_t)v340 - *(void *)__x) >> 3;
          if (v123 <= v122 + 1) {
            unint64_t v123 = v122 + 1;
          }
          if ((unint64_t)v340 - *(void *)__x >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v124 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v124 = v123;
          }
          if (v124)
          {
            float64x2_t v317 = v119;
            uint64_t v125 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v340, v124);
            float64x2_t v119 = v317;
          }
          else
          {
            uint64_t v125 = 0;
          }
          uint64_t v126 = (float64x2_t *)&v125[16 * v122];
          *uint64_t v126 = v119;
          float32x4_t v121 = v126 + 1;
          unint64_t v128 = *(float64x2_t **)__x;
          uint64_t v127 = v339;
          if (v339 != *(float64x2_t **)__x)
          {
            do
            {
              float64x2_t v129 = v127[-1];
              --v127;
              v126[-1] = v129;
              --v126;
            }
            while (v127 != v128);
            uint64_t v127 = *(float64x2_t **)__x;
          }
          *(void *)std::vector<int>::value_type __x = v126;
          float64x2_t v339 = v121;
          float64x2_t v340 = (float64x2_t *)&v125[16 * v124];
          if (v127) {
            operator delete(v127);
          }
        }
        else
        {
          *float64x2_t v339 = v119;
          float32x4_t v121 = v120 + 1;
        }
        float64x2_t v81 = v300;
        int64x2_t v66 = v301;
        float64x2_t v91 = v298;
        float64x2_t v89 = v299;
        float64x2_t v339 = v121;
        ++v97;
        float64x2_t v49 = (char *)__p;
      }
      while (v97 < ((char *)v342 - (unsigned char *)__p) >> 5);
      uint64_t v130 = *(void *)__x;
    }
    uint64_t v335 = 0;
    float64x2_t v336 = 0;
    uint64_t v337 = 0;
    geom::half_plane_intersection_2<double>(((uint64_t)v121 - v130) >> 4, v130, (uint64_t)&v335);
    uint64_t v163 = (float64x2_t *)v335;
    unint64_t v164 = v336;
    int v165 = (int8x16_t *)a3[1];
    if (v335 != v336)
    {
      unint64_t v166 = a3 + 2;
      *(void *)&v167.f64[0] = v294;
      *(void *)&v168.f64[0] = v296;
      *(void *)&v167.f64[1] = v288;
      *(void *)&v168.f64[1] = v289;
      float64x2_t v295 = v167;
      float64x2_t v297 = v168;
      do
      {
        int8x16_t v169 = (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v167, *v163, 1), v168, v163->f64[0]);
        unint64_t v170 = vextq_s8(v169, v169, 8uLL).u64[0];
        float64x2_t v171 = vmlaq_f64(vmulq_laneq_f64(v322, *v163, 1), *v163, v327);
        if ((unint64_t)v165 >= *v166)
        {
          uint64_t v172 = ((char *)v165 - *a3) >> 5;
          if ((unint64_t)(v172 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v173 = *v166 - (void)*a3;
          uint64_t v174 = v173 >> 4;
          if (v173 >> 4 <= (unint64_t)(v172 + 1)) {
            uint64_t v174 = v172 + 1;
          }
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v175 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v175 = v174;
          }
          if (v175)
          {
            uint64_t v334 = v169.i64[0];
            unint64_t v313 = v170;
            float64x2_t v318 = v171;
            float64x2_t v176 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v175);
            unint64_t v170 = v313;
            float64x2_t v171 = v318;
            v169.i64[0] = v334;
          }
          else
          {
            float64x2_t v176 = 0;
          }
          v169.i64[1] = v170;
          float64x2_t v177 = (int8x16_t *)&v176[32 * v172];
          *float64x2_t v177 = v169;
          v177[1] = (int8x16_t)v171;
          float64x2_t v179 = *a3;
          float32x4_t v178 = a3[1];
          float32x4_t v180 = v177;
          if (v178 != *a3)
          {
            do
            {
              int8x16_t v181 = *((int8x16_t *)v178 - 2);
              int8x16_t v182 = *((int8x16_t *)v178 - 1);
              v178 -= 32;
              v180[-2] = v181;
              v180[-1] = v182;
              v180 -= 2;
            }
            while (v178 != v179);
            float32x4_t v178 = *a3;
          }
          int v165 = v177 + 2;
          *a3 = (char *)v180;
          a3[1] = v177[2].i8;
          a3[2] = &v176[32 * v175];
          if (v178) {
            operator delete(v178);
          }
          float64x2_t v167 = v295;
          float64x2_t v168 = v297;
        }
        else
        {
          v169.i64[1] = v170;
          *int v165 = v169;
          v165[1] = (int8x16_t)v171;
          v165 += 2;
        }
        a3[1] = (char *)v165;
        ++v163;
      }
      while (v163 != v164);
    }
    std::vector<unsigned int>::resize(a4, ((char *)v165 - *a3) >> 4);
    uint64_t v183 = a3[1] - *a3;
    if (v183)
    {
      uint64_t v184 = 0;
      std::vector<int>::pointer v185 = a4->__begin_;
      uint64_t v186 = 4 * (v183 >> 5);
      uint64_t v187 = v186;
      do
      {
        v185[v184] = v184;
        ++v184;
        v187 -= 4;
      }
      while (v187);
      std::vector<int>::pointer v188 = a4->__end_ - 1;
      do
      {
        int v189 = *v185++;
        *v188-- = v189;
        v186 -= 4;
      }
      while (v186);
    }
    unint64_t v190 = (unint64_t)v183 >> 5;
    int v191 = a5[2];
    float64x2_t v192 = a5[1];
    if (v192 >= v191)
    {
      uint64_t v194 = *a5;
      uint64_t v195 = (v192 - *a5) >> 2;
      unint64_t v196 = v195 + 1;
      if ((unint64_t)(v195 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v197 = v191 - v194;
      if (v197 >> 1 > v196) {
        unint64_t v196 = v197 >> 1;
      }
      if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v198 = v196;
      }
      if (v198)
      {
        unint64_t v199 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v198);
        uint64_t v194 = *a5;
        float64x2_t v192 = a5[1];
      }
      else
      {
        unint64_t v199 = 0;
      }
      float32x4_t v272 = &v199[4 * v195];
      int v191 = &v199[4 * v198];
      *(_DWORD *)float32x4_t v272 = v190;
      int v193 = v272 + 4;
      while (v192 != v194)
      {
        int v273 = *((_DWORD *)v192 - 1);
        v192 -= 4;
        *((_DWORD *)v272 - 1) = v273;
        v272 -= 4;
      }
      *a5 = v272;
      a5[1] = v193;
      a5[2] = v191;
      if (v194)
      {
        operator delete(v194);
        int v191 = a5[2];
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v192 = v190;
      int v193 = v192 + 4;
    }
    a5[1] = v193;
    uint64_t v274 = ((unint64_t)(a3[1] - *a3) >> 4) & 0xFFFFFFFE;
    if (v193 >= v191)
    {
      float32x4_t v276 = *a5;
      uint64_t v277 = (v193 - *a5) >> 2;
      unint64_t v278 = v277 + 1;
      if ((unint64_t)(v277 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v279 = v191 - v276;
      if (v279 >> 1 > v278) {
        unint64_t v278 = v279 >> 1;
      }
      if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v280 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v280 = v278;
      }
      if (v280)
      {
        float32x4_t v281 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v280);
        float32x4_t v276 = *a5;
        int v193 = a5[1];
      }
      else
      {
        float32x4_t v281 = 0;
      }
      float32x4_t v282 = &v281[4 * v277];
      float64x2_t v283 = &v281[4 * v280];
      *(_DWORD *)float32x4_t v282 = v274;
      float32x4_t v275 = v282 + 4;
      while (v193 != v276)
      {
        int v284 = *((_DWORD *)v193 - 1);
        v193 -= 4;
        *((_DWORD *)v282 - 1) = v284;
        v282 -= 4;
      }
      *a5 = v282;
      a5[1] = v275;
      a5[2] = v283;
      if (v276) {
        operator delete(v276);
      }
    }
    else
    {
      *(_DWORD *)int v193 = v274;
      float32x4_t v275 = v193 + 4;
    }
    a5[1] = v275;
    if (v335)
    {
      float64x2_t v336 = (float64x2_t *)v335;
      operator delete(v335);
    }
    if (*(void *)__x)
    {
      float64x2_t v339 = *(float64x2_t **)__x;
      operator delete(*(void **)__x);
    }
  }
  uint64_t v285 = (float64x2_t *)*a3;
  float64x2_t v286 = (float64x2_t *)a3[1];
  if (*a3 != (char *)v286)
  {
    do
    {
      float64x2_t v287 = vaddq_f64(a2[1], v285[1]);
      *uint64_t v285 = vaddq_f64(*a2, *v285);
      v285[1] = v287;
      v285 += 2;
    }
    while (v285 != v286);
  }
LABEL_311:
  if (__p)
  {
    float64x2_t v342 = (int8x16_t *)__p;
    operator delete(__p);
  }
}

void geom_dop26_polyhedron_3d(uint64_t a1, float64x2_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  float64x2_t v8 = a2[1];
  v12[0] = *a2;
  v12[1] = v8;
  float64_t v9 = (char **)geom::collection_to_vector<float>(a3);
  float32x4_t v10 = (std::vector<int> *)geom::collection_to_vector<float>(a4);
  float64x2_t v11 = (char **)geom::collection_to_vector<float>(a5);
  geom::dop<(unsigned char)26,double>::compute_polyhedron(a1, v12, v9, v10, v11);
}

void geom::dop<(unsigned char)26,double>::compute_polyhedron(uint64_t a1, float64x2_t *a2, char **a3, std::vector<int> *a4, char **a5)
{
  uint64_t v6 = 0;
  v343[27] = *MEMORY[0x263EF8340];
  a3[1] = *a3;
  a4->__end_ = a4->__begin_;
  a5[1] = *a5;
  float64x2_t v8 = *a2;
  float64x2_t v7 = a2[1];
  do
  {
    float64_t v9 = vmulq_f64(geom::kdop_axes<(unsigned char)26,double>[2 * v6 + 1], v7).f64[0]
       + vaddvq_f64(vmulq_f64(geom::kdop_axes<(unsigned char)26,double>[2 * v6], v8));
    float32x4_t v10 = (double *)(a1 + 8 * v6);
    *(double *)&v343[v6 + 14] = *v10 - v9;
    *(double *)&v343[++v6] = v10[14] - v9;
  }
  while (v6 != 13);
  std::vector<int> __p = 0;
  float64x2_t v342 = 0;
  v343[0] = 0;
  _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE7reserveEm(&__p, 0x1AuLL);
  uint64_t v14 = 0;
  uint64_t v15 = -1;
  uint64_t v16 = -1;
  do
  {
    double v17 = *(double *)&v343[v14 + 14];
    *(void *)&v11.f64[0] = v343[v14 + 1];
    if (v17 == v11.f64[0])
    {
      uint64_t v15 = v14;
    }
    else
    {
      uint64_t v18 = v15;
      uint64_t v15 = v14;
      if (vabdd_f64(v17, v11.f64[0]) > 0.000001)
      {
        float32x4_t v19 = &geom::kdop_axes<(unsigned char)26,double>[2 * v14];
        int64x2_t v13 = *(int64x2_t *)v19;
        float64x2_t v20 = v19[1];
        float64x2_t v21 = vdivq_f64(v20, v11);
        int8x16_t v22 = (int8x16_t)vdivq_f64(*v19, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v11.f64[0], 0));
        float64x2_t v23 = (float64x2_t)vextq_s8(v22, v22, 8uLL);
        unint64_t v25 = (float64x2_t *)v342;
        unint64_t v24 = v343[0];
        if ((unint64_t)v342 >= v343[0])
        {
          double v27 = (float64x2_t *)__p;
          uint64_t v28 = ((char *)v342 - (unsigned char *)__p) >> 5;
          unint64_t v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 59) {
            goto LABEL_314;
          }
          float64x2_t v324 = v20;
          int64x2_t v329 = v13;
          uint64_t v30 = v343[0] - (void)__p;
          if ((uint64_t)(v343[0] - (void)__p) >> 4 > v29) {
            unint64_t v29 = v30 >> 4;
          }
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v31 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v31 = v29;
          }
          if (v31)
          {
            float64x2_t v314 = v21;
            uint64_t v319 = v22.i64[0];
            float64x2_t v310 = v23;
            float32x4_t v32 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v343, v31);
            float64x2_t v23 = v310;
            float64x2_t v21 = v314;
            v22.i64[0] = v319;
            unint64_t v33 = v32;
            double v27 = (float64x2_t *)__p;
            unint64_t v25 = (float64x2_t *)v342;
          }
          else
          {
            unint64_t v33 = 0;
          }
          v22.i64[1] = *(void *)&v23.f64[0];
          uint64_t v34 = (int8x16_t *)&v33[32 * v28];
          *uint64_t v34 = v22;
          v34[1] = (int8x16_t)v21;
          unint64_t v35 = v34;
          while (v25 != v27)
          {
            float64x2_t v36 = v25[-2];
            float64x2_t v23 = v25[-1];
            v25 -= 2;
            v35[-2] = (int8x16_t)v36;
            v35[-1] = (int8x16_t)v23;
            v35 -= 2;
          }
          unint64_t v24 = (unint64_t)&v33[32 * v31];
          int64x2_t v26 = (float64x2_t *)&v34[2];
          std::vector<int> __p = v35;
          float64x2_t v342 = v34 + 2;
          v343[0] = v24;
          if (v27)
          {
            operator delete(v27);
            unint64_t v24 = v343[0];
          }
          float64x2_t v20 = v324;
          int64x2_t v13 = v329;
        }
        else
        {
          v22.i64[1] = *(void *)&v23.f64[0];
          *float64x2_t v342 = v22;
          v25[1] = v21;
          int64x2_t v26 = v25 + 2;
        }
        float64x2_t v342 = (int8x16_t *)v26;
        *(void *)&v23.f64[0] = v343[v14 + 14];
        float64x2_t v37 = (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v23.f64[0], 0);
        int64x2_t v12 = (int64x2_t)vdivq_f64(v20, v23);
        v13.i64[1] = vextq_s8((int8x16_t)v13, (int8x16_t)v13, 8uLL).u64[0];
        float64x2_t v11 = vdivq_f64((float64x2_t)v13, v37);
        unint64_t v38 = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
        if ((unint64_t)v26 >= v24)
        {
          float32x4_t v40 = (float64x2_t *)__p;
          uint64_t v41 = ((char *)v26 - (unsigned char *)__p) >> 5;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v43 = v24 - (void)__p;
          if (v43 >> 4 > v42) {
            unint64_t v42 = v43 >> 4;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v44 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44)
          {
            float64_t v325 = v11.f64[0];
            int64x2_t v330 = v12;
            unint64_t v320 = v38;
            float32x4_t v45 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)v343, v44);
            unint64_t v38 = v320;
            v11.f64[0] = v325;
            int64x2_t v12 = v330;
            unint64_t v46 = v45;
            float32x4_t v40 = (float64x2_t *)__p;
            int64x2_t v26 = (float64x2_t *)v342;
          }
          else
          {
            unint64_t v46 = 0;
          }
          *(void *)&v11.f64[1] = v38;
          float64x2_t v47 = (float64x2_t *)&v46[32 * v41];
          *float64x2_t v47 = v11;
          v47[1] = (float64x2_t)v12;
          unint64_t v48 = v47;
          while (v26 != v40)
          {
            float64x2_t v11 = v26[-2];
            int64x2_t v12 = (int64x2_t)v26[-1];
            v26 -= 2;
            v48[-2] = v11;
            v48[-1] = (float64x2_t)v12;
            v48 -= 2;
          }
          float32x4_t v39 = (int8x16_t *)&v47[2];
          std::vector<int> __p = v48;
          float64x2_t v342 = (int8x16_t *)&v47[2];
          v343[0] = &v46[32 * v44];
          if (v40) {
            operator delete(v40);
          }
        }
        else
        {
          *(void *)&v11.f64[1] = v38;
          *int64x2_t v26 = v11;
          v26[1] = (float64x2_t)v12;
          float32x4_t v39 = (int8x16_t *)&v26[2];
        }
        float64x2_t v342 = v39;
        uint64_t v16 = v14;
        uint64_t v15 = v18;
      }
    }
    ++v14;
  }
  while (v14 != 13);
  float64x2_t v49 = (char *)__p;
  uint64_t v50 = ((char *)v342 - (unsigned char *)__p) >> 5;
  if (!v50)
  {
    unint64_t v61 = (unint64_t)a3[2];
    unint64_t v62 = (float64x2_t *)a3[1];
    if ((unint64_t)v62 >= v61)
    {
      uint64_t v76 = ((char *)v62 - *a3) >> 5;
      unint64_t v77 = v76 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v76 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v78 = v61 - (void)*a3;
      if (v78 >> 4 > v77) {
        unint64_t v77 = v78 >> 4;
      }
      if ((unint64_t)v78 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v79 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v79 = v77;
      }
      if (v79) {
        float32x4_t v80 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v79);
      }
      else {
        float32x4_t v80 = 0;
      }
      float64x2_t v146 = (float64x2_t *)&v80[32 * v76];
      float32x4_t v147 = &v80[32 * v79];
      float64x2_t v148 = a2[1];
      *float64x2_t v146 = *a2;
      v146[1] = v148;
      uint64_t v64 = (char *)&v146[2];
      uint64_t v150 = *a3;
      float32x4_t v149 = a3[1];
      if (v149 != *a3)
      {
        do
        {
          float64x2_t v151 = *((float64x2_t *)v149 - 2);
          float64x2_t v152 = *((float64x2_t *)v149 - 1);
          v149 -= 32;
          v146[-2] = v151;
          v146[-1] = v152;
          v146 -= 2;
        }
        while (v149 != v150);
        float32x4_t v149 = *a3;
      }
      *a3 = (char *)v146;
      a3[1] = v64;
      a3[2] = v147;
      if (v149) {
        operator delete(v149);
      }
    }
    else
    {
      float64x2_t v63 = a2[1];
      *unint64_t v62 = *a2;
      v62[1] = v63;
      uint64_t v64 = (char *)&v62[2];
      uint64_t v60 = a5;
    }
    a3[1] = v64;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    unsigned int v154 = v60 + 2;
    unint64_t v153 = v60[2];
    uint64_t v155 = v60[1];
    if (v155 >= v153)
    {
      uint64_t v157 = *v60;
      uint64_t v158 = (v155 - *v60) >> 2;
      unint64_t v159 = v158 + 1;
      if ((unint64_t)(v158 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v160 = v153 - v157;
      if (v160 >> 1 > v159) {
        unint64_t v159 = v160 >> 1;
      }
      if ((unint64_t)v160 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v161 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v161 = v159;
      }
      if (v161)
      {
        uint64_t v162 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v161);
        uint64_t v157 = *v60;
        uint64_t v155 = v60[1];
      }
      else
      {
        uint64_t v162 = 0;
      }
      unint64_t v217 = &v162[4 * v158];
      unint64_t v153 = &v162[4 * v161];
      *(_DWORD *)unint64_t v217 = 3;
      float32x4_t v156 = v217 + 4;
      while (v155 != v157)
      {
        int v218 = *((_DWORD *)v155 - 1);
        v155 -= 4;
        *((_DWORD *)v217 - 1) = v218;
        v217 -= 4;
      }
      *uint64_t v60 = v217;
      v60[1] = v156;
      v60[2] = v153;
      if (v157)
      {
        operator delete(v157);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v155 = 3;
      float32x4_t v156 = v155 + 4;
    }
    v60[1] = v156;
    if (v156 >= v153)
    {
      int v220 = *v60;
      uint64_t v221 = (v156 - *v60) >> 2;
      unint64_t v222 = v221 + 1;
      if ((unint64_t)(v221 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v223 = v153 - v220;
      if (v223 >> 1 > v222) {
        unint64_t v222 = v223 >> 1;
      }
      if ((unint64_t)v223 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v224 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v224 = v222;
      }
      if (v224)
      {
        unint64_t v225 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v224);
        int v220 = *v60;
        float32x4_t v156 = v60[1];
      }
      else
      {
        unint64_t v225 = 0;
      }
      float64x2_t v235 = &v225[4 * v221];
      unint64_t v153 = &v225[4 * v224];
      *(_DWORD *)float64x2_t v235 = 6;
      uint64_t v219 = v235 + 4;
      while (v156 != v220)
      {
        int v236 = *((_DWORD *)v156 - 1);
        v156 -= 4;
        *((_DWORD *)v235 - 1) = v236;
        v235 -= 4;
      }
      *uint64_t v60 = v235;
      v60[1] = v219;
      v60[2] = v153;
      if (v220)
      {
        operator delete(v220);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)float32x4_t v156 = 6;
      uint64_t v219 = v156 + 4;
    }
    v60[1] = v219;
    if (v219 >= v153)
    {
      uint64_t v238 = *v60;
      uint64_t v239 = (v219 - *v60) >> 2;
      unint64_t v240 = v239 + 1;
      if ((unint64_t)(v239 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v241 = v153 - v238;
      if (v241 >> 1 > v240) {
        unint64_t v240 = v241 >> 1;
      }
      if ((unint64_t)v241 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v242 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v242 = v240;
      }
      if (v242)
      {
        int v243 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v242);
        uint64_t v238 = *v60;
        uint64_t v219 = v60[1];
      }
      else
      {
        int v243 = 0;
      }
      uint64_t v252 = &v243[4 * v239];
      unint64_t v153 = &v243[4 * v242];
      *(_DWORD *)uint64_t v252 = 9;
      unint64_t v237 = v252 + 4;
      while (v219 != v238)
      {
        int v253 = *((_DWORD *)v219 - 1);
        v219 -= 4;
        *((_DWORD *)v252 - 1) = v253;
        v252 -= 4;
      }
      *uint64_t v60 = v252;
      v60[1] = v237;
      v60[2] = v153;
      if (v238)
      {
        operator delete(v238);
        unint64_t v153 = *v154;
      }
    }
    else
    {
      *(_DWORD *)uint64_t v219 = 9;
      unint64_t v237 = v219 + 4;
    }
    v60[1] = v237;
    if (v237 < v153)
    {
LABEL_263:
      *(_DWORD *)unint64_t v237 = 12;
      float64x2_t v262 = v237 + 4;
LABEL_282:
      v60[1] = v262;
      goto LABEL_311;
    }
    uint64_t v254 = *v60;
    uint64_t v255 = (v237 - *v60) >> 2;
    unint64_t v256 = v255 + 1;
    if (!((unint64_t)(v255 + 1) >> 62))
    {
      uint64_t v257 = v153 - v254;
      if (v257 >> 1 > v256) {
        unint64_t v256 = v257 >> 1;
      }
      if ((unint64_t)v257 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v258 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v258 = v256;
      }
      if (v258)
      {
        int v259 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v258);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int v259 = 0;
      }
      int32x2_t v268 = &v259[4 * v255];
      float32x4_t v269 = &v259[4 * v258];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v270 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v270;
        v268 -= 4;
      }
      goto LABEL_280;
    }
    goto LABEL_314;
  }
  if (v50 == 2)
  {
    float32x4_t v51 = &geom::kdop_axes<(unsigned char)26,double>[2 * v16];
    float64x2_t v52 = *v51;
    float64x2_t v53 = v51[1];
    v11.f64[0] = *(float64_t *)(a1 + 8 * v16);
    float64x2_t v54 = vmulq_f64(v53, v11);
    int8x16_t v55 = (int8x16_t)vmulq_n_f64(*v51, v11.f64[0]);
    unint64_t v56 = vextq_s8(v55, v55, 8uLL).u64[0];
    unint64_t v57 = (unint64_t)a3[2];
    float32x4_t v58 = (int8x16_t *)a3[1];
    if ((unint64_t)v58 >= v57)
    {
      uint64_t v71 = ((char *)v58 - *a3) >> 5;
      unint64_t v72 = v71 + 1;
      uint64_t v60 = a5;
      if ((unint64_t)(v71 + 1) >> 59) {
        goto LABEL_314;
      }
      float64x2_t v326 = v53;
      float64x2_t v331 = v52;
      uint64_t v73 = v57 - (void)*a3;
      if (v73 >> 4 > v72) {
        unint64_t v72 = v73 >> 4;
      }
      if ((unint64_t)v73 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v74 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v74 = v72;
      }
      if (v74)
      {
        uint64_t v315 = v55.i64[0];
        float64x2_t v321 = v54;
        unint64_t v311 = v56;
        int32x4_t v75 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v74);
        unint64_t v56 = v311;
        v55.i64[0] = v315;
        float64x2_t v54 = v321;
      }
      else
      {
        int32x4_t v75 = 0;
      }
      float64x2_t v131 = (int8x16_t *)&v75[32 * v71];
      float32x4_t v132 = &v75[32 * v74];
      v55.i64[1] = v56;
      *float64x2_t v131 = v55;
      v131[1] = (int8x16_t)v54;
      uint64_t v59 = v131 + 2;
      float32x4_t v134 = *a3;
      float64x2_t v133 = a3[1];
      if (v133 != *a3)
      {
        do
        {
          int8x16_t v135 = *((int8x16_t *)v133 - 2);
          float64x2_t v54 = *((float64x2_t *)v133 - 1);
          v133 -= 32;
          v131[-2] = v135;
          v131[-1] = (int8x16_t)v54;
          v131 -= 2;
        }
        while (v133 != v134);
        float64x2_t v133 = *a3;
      }
      *a3 = (char *)v131;
      a3[1] = (char *)v59;
      a3[2] = v132;
      if (v133) {
        operator delete(v133);
      }
      float64x2_t v53 = v326;
      float64x2_t v52 = v331;
    }
    else
    {
      v55.i64[1] = v56;
      *float32x4_t v58 = v55;
      v58[1] = (int8x16_t)v54;
      uint64_t v59 = v58 + 2;
      uint64_t v60 = a5;
    }
    a3[1] = (char *)v59;
    v54.f64[0] = *(float64_t *)(a1 + 8 * v16 + 112);
    float64x2_t v136 = vmulq_f64(v53, v54);
    *(void *)&v52.f64[1] = vextq_s8((int8x16_t)v52, (int8x16_t)v52, 8uLL).u64[0];
    int8x16_t v137 = (int8x16_t)vmulq_n_f64(v52, v54.f64[0]);
    unint64_t v138 = vextq_s8(v137, v137, 8uLL).u64[0];
    unint64_t v139 = (unint64_t)a3[2];
    if ((unint64_t)v59 >= v139)
    {
      uint64_t v141 = ((char *)v59 - *a3) >> 5;
      if ((unint64_t)(v141 + 1) >> 59) {
        goto LABEL_314;
      }
      uint64_t v142 = v139 - (void)*a3;
      uint64_t v143 = v142 >> 4;
      if (v142 >> 4 <= (unint64_t)(v141 + 1)) {
        uint64_t v143 = v141 + 1;
      }
      if ((unint64_t)v142 >= 0x7FFFFFFFFFFFFFE0) {
        unint64_t v144 = 0x7FFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v144 = v143;
      }
      if (v144)
      {
        uint64_t v328 = v137.i64[0];
        float64x2_t v333 = v136;
        unint64_t v323 = v138;
        float64x2_t v145 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v144);
        unint64_t v138 = v323;
        v137.i64[0] = v328;
        float64x2_t v136 = v333;
      }
      else
      {
        float64x2_t v145 = 0;
      }
      int v200 = (int8x16_t *)&v145[32 * v141];
      float64x2_t v201 = &v145[32 * v144];
      v137.i64[1] = v138;
      *int v200 = v137;
      v200[1] = (int8x16_t)v136;
      uint64_t v140 = v200 + 2;
      uint64_t v203 = *a3;
      int v202 = a3[1];
      if (v202 != *a3)
      {
        do
        {
          int8x16_t v204 = *((int8x16_t *)v202 - 2);
          int8x16_t v205 = *((int8x16_t *)v202 - 1);
          v202 -= 32;
          v200[-2] = v204;
          v200[-1] = v205;
          v200 -= 2;
        }
        while (v202 != v203);
        int v202 = *a3;
      }
      *a3 = (char *)v200;
      a3[1] = (char *)v140;
      a3[2] = v201;
      if (v202) {
        operator delete(v202);
      }
    }
    else
    {
      v137.i64[1] = v138;
      *uint64_t v59 = v137;
      v59[1] = (int8x16_t)v136;
      uint64_t v140 = v59 + 2;
    }
    a3[1] = (char *)v140;
    __x[0] = 0;
    std::vector<unsigned int>::resize(a4, 0xCuLL, __x);
    std::vector<int>::pointer begin = a4->__begin_;
    begin[10] = 1;
    begin[7] = 1;
    begin[4] = 1;
    unint64_t v208 = v60 + 2;
    uint64_t v207 = v60[2];
    int v209 = v60[1];
    if (v209 >= v207)
    {
      int v211 = *v60;
      uint64_t v212 = (v209 - *v60) >> 2;
      unint64_t v213 = v212 + 1;
      if ((unint64_t)(v212 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v214 = v207 - v211;
      if (v214 >> 1 > v213) {
        unint64_t v213 = v214 >> 1;
      }
      if ((unint64_t)v214 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v215 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v215 = v213;
      }
      if (v215)
      {
        uint64_t v216 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v215);
        int v211 = *v60;
        int v209 = v60[1];
      }
      else
      {
        uint64_t v216 = 0;
      }
      int v226 = &v216[4 * v212];
      uint64_t v207 = &v216[4 * v215];
      *(_DWORD *)int v226 = 3;
      float64x2_t v210 = v226 + 4;
      while (v209 != v211)
      {
        int v227 = *((_DWORD *)v209 - 1);
        v209 -= 4;
        *((_DWORD *)v226 - 1) = v227;
        v226 -= 4;
      }
      *uint64_t v60 = v226;
      v60[1] = v210;
      v60[2] = v207;
      if (v211)
      {
        operator delete(v211);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v209 = 3;
      float64x2_t v210 = v209 + 4;
    }
    v60[1] = v210;
    if (v210 >= v207)
    {
      unint64_t v229 = *v60;
      uint64_t v230 = (v210 - *v60) >> 2;
      unint64_t v231 = v230 + 1;
      if ((unint64_t)(v230 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v232 = v207 - v229;
      if (v232 >> 1 > v231) {
        unint64_t v231 = v232 >> 1;
      }
      if ((unint64_t)v232 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v233 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v233 = v231;
      }
      if (v233)
      {
        int v234 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v233);
        unint64_t v229 = *v60;
        float64x2_t v210 = v60[1];
      }
      else
      {
        int v234 = 0;
      }
      int v244 = &v234[4 * v230];
      uint64_t v207 = &v234[4 * v233];
      *(_DWORD *)int v244 = 6;
      int v228 = v244 + 4;
      while (v210 != v229)
      {
        int v245 = *((_DWORD *)v210 - 1);
        v210 -= 4;
        *((_DWORD *)v244 - 1) = v245;
        v244 -= 4;
      }
      *uint64_t v60 = v244;
      v60[1] = v228;
      v60[2] = v207;
      if (v229)
      {
        operator delete(v229);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v210 = 6;
      int v228 = v210 + 4;
    }
    v60[1] = v228;
    if (v228 >= v207)
    {
      int v246 = *v60;
      uint64_t v247 = (v228 - *v60) >> 2;
      unint64_t v248 = v247 + 1;
      if ((unint64_t)(v247 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v249 = v207 - v246;
      if (v249 >> 1 > v248) {
        unint64_t v248 = v249 >> 1;
      }
      if ((unint64_t)v249 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v250 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v250 = v248;
      }
      if (v250)
      {
        unint64_t v251 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v250);
        int v246 = *v60;
        int v228 = v60[1];
      }
      else
      {
        unint64_t v251 = 0;
      }
      float64x2_t v260 = &v251[4 * v247];
      uint64_t v207 = &v251[4 * v250];
      *(_DWORD *)float64x2_t v260 = 9;
      unint64_t v237 = v260 + 4;
      while (v228 != v246)
      {
        int v261 = *((_DWORD *)v228 - 1);
        v228 -= 4;
        *((_DWORD *)v260 - 1) = v261;
        v260 -= 4;
      }
      *uint64_t v60 = v260;
      v60[1] = v237;
      v60[2] = v207;
      if (v246)
      {
        operator delete(v246);
        uint64_t v207 = *v208;
      }
    }
    else
    {
      *(_DWORD *)int v228 = 9;
      unint64_t v237 = v228 + 4;
    }
    v60[1] = v237;
    if (v237 < v207) {
      goto LABEL_263;
    }
    uint64_t v254 = *v60;
    uint64_t v263 = (v237 - *v60) >> 2;
    unint64_t v264 = v263 + 1;
    if (!((unint64_t)(v263 + 1) >> 62))
    {
      uint64_t v265 = v207 - v254;
      if (v265 >> 1 > v264) {
        unint64_t v264 = v265 >> 1;
      }
      if ((unint64_t)v265 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v266 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v266 = v264;
      }
      if (v266)
      {
        int32x4_t v267 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(v60 + 2), v266);
        uint64_t v254 = *v60;
        unint64_t v237 = v60[1];
      }
      else
      {
        int32x4_t v267 = 0;
      }
      int32x2_t v268 = &v267[4 * v263];
      float32x4_t v269 = &v267[4 * v266];
      *(_DWORD *)int32x2_t v268 = 12;
      float64x2_t v262 = v268 + 4;
      while (v237 != v254)
      {
        int v271 = *((_DWORD *)v237 - 1);
        v237 -= 4;
        *((_DWORD *)v268 - 1) = v271;
        v268 -= 4;
      }
LABEL_280:
      *uint64_t v60 = v268;
      v60[1] = v262;
      v60[2] = v269;
      if (v254) {
        operator delete(v254);
      }
      goto LABEL_282;
    }
LABEL_314:
    abort();
  }
  if ((unint64_t)((char *)v342 - (unsigned char *)__p) > 0x33F)
  {
    geom::half_plane_intersection_3<double>(0x1AuLL, (float64x2_t *)__p, (void **)a3, (unint64_t *)a4, a5);
  }
  else
  {
    *(void *)std::vector<int>::value_type __x = 0;
    float64x2_t v339 = 0;
    float64x2_t v340 = 0;
    f64 = (_OWORD *)geom::kdop_axes<(unsigned char)26,double>[2 * v15].f64;
    int64x2_t v66 = *(int64x2_t *)f64;
    float64x2_t v67 = *((float64x2_t *)f64 + 1);
    double v68 = fabs(v67.f64[0]);
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v13.i64 = -*(double *)&v66.i64[1];
      float64x2_t v70 = 0uLL;
      float64x2_t v69 = (float64x2_t)vzip1q_s64(v13, v66);
    }
    else
    {
      v69.f64[0] = 0.0;
      v69.f64[1] = -v67.f64[0];
      float64x2_t v70 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    }
    float64x2_t v81 = (float64x2_t)vdupq_laneq_s64(v66, 1);
    float64x2_t v82 = vmulq_f64(v70, v70);
    v82.f64[0] = 1.0 / sqrt(v82.f64[0] + vaddvq_f64(vmulq_f64(v69, v69)));
    float64x2_t v327 = vmulq_f64(v70, v82);
    int64x2_t v332 = *((int64x2_t *)f64 + 1);
    int8x16_t v83 = (int8x16_t)vmulq_n_f64(v69, v82.f64[0]);
    unint64_t v289 = vextq_s8(v83, v83, 8uLL).u64[0];
    uint64_t v296 = v83.i64[0];
    if (v68 <= 2.22044605e-16)
    {
      *(double *)v12.i64 = -*(double *)&v66.i64[1];
      float64x2_t v85 = 0uLL;
      float64x2_t v84 = (float64x2_t)vzip1q_s64(v12, v66);
    }
    else
    {
      v84.f64[0] = 0.0;
      v84.f64[1] = -v67.f64[0];
      float64x2_t v85 = v81;
    }
    float64x2_t v86 = vmulq_f64(v85, v85);
    v86.f64[0] = 1.0 / sqrt(v86.f64[0] + vaddvq_f64(vmulq_f64(v84, v84)));
    float64x2_t v87 = vmulq_n_f64(v84, v86.f64[0]);
    float64x2_t v88 = vmulq_f64(v85, v86);
    v89.f64[0] = *((float64_t *)f64 + 2);
    v89.f64[1] = *(float64_t *)f64;
    float64x2_t v305 = vnegq_f64(v67);
    float64x2_t v90 = vmlaq_laneq_f64(vmulq_laneq_f64(v305, v87, 1), v88, (float64x2_t)v66, 1);
    v88.f64[1] = v87.f64[0];
    float64x2_t v91 = vnegq_f64((float64x2_t)v66);
    float64x2_t v92 = vmlaq_f64(vmulq_f64(v88, v91), v87, v89);
    float64x2_t v93 = vmulq_f64(v92, v92);
    double v94 = vmulq_f64(v90, v90).f64[0];
    v90.f64[1] = v92.f64[0];
    v93.f64[0] = 1.0 / sqrt(v93.f64[1] + v94 + v93.f64[0]);
    int8x16_t v95 = (int8x16_t)vmulq_n_f64(v90, v93.f64[0]);
    unint64_t v96 = vextq_s8(v95, v95, 8uLL).u64[0];
    float64x2_t v322 = vmulq_laneq_f64(v93, v92, 1);
    unint64_t v288 = v96;
    uint64_t v294 = v95.i64[0];
    if (v342 == __p)
    {
      uint64_t v130 = 0;
      float32x4_t v121 = 0;
    }
    else
    {
      unint64_t v97 = 0;
      *(void *)&v98.f64[0] = v83.i64[0];
      *(void *)&v98.f64[1] = v289;
      v95.i64[1] = v96;
      float64x2_t v303 = (float64x2_t)v95;
      float64x2_t v304 = v98;
      int64x2_t v301 = *(int64x2_t *)f64;
      float64x2_t v302 = (float64x2_t)vdupq_lane_s64(v332.i64[0], 0);
      *(void *)&v91.f64[1] = vextq_s8((int8x16_t)v91, (int8x16_t)v91, 8uLL).u64[0];
      *(void *)&v89.f64[1] = vextq_s8((int8x16_t)v89, (int8x16_t)v89, 8uLL).u64[0];
      float64x2_t v299 = v89;
      float64x2_t v300 = v81;
      float64x2_t v298 = v91;
      do
      {
        int32x4_t v99 = (float64x2_t *)&v49[32 * v97];
        v100.f64[0] = v99[1].f64[0];
        v100.f64[1] = v99->f64[0];
        float64x2_t v101 = vmlaq_f64(vmulq_f64(v100, v91), *v99, v89);
        float64x2_t v102 = vmlaq_f64(vmulq_laneq_f64(v305, *v99, 1), v99[1], v81);
        int64x2_t v306 = (int64x2_t)v99[1];
        float64x2_t v103 = vmulq_f64(v101, v101);
        float64_t v104 = v101.f64[0];
        float64x2_t v308 = v101;
        v105.f64[0] = v102.f64[0];
        v103.f64[0] = 1.0 / sqrt(v103.f64[1] + vmulq_f64(v102, v102).f64[0] + v103.f64[0]);
        float64x2_t v316 = v103;
        int64x2_t v106 = vzip1q_s64(v66, *(int64x2_t *)v99);
        int64x2_t v107 = vzip2q_s64(v66, *(int64x2_t *)v99);
        float64x2_t v108 = (float64x2_t)vzip1q_s64(v332, v306);
        float64x2_t v309 = (float64x2_t)vzip1q_s64(v106, v107);
        float64x2_t v312 = (float64x2_t)vzip2q_s64(v106, v107);
        v344.columns[0] = (simd_double2)vmlaq_f64(vmlaq_f64(vmulq_n_f64((float64x2_t)v106, *(double *)v66.i64), v81, (float64x2_t)v107), v302, v108);
        v344.columns[1] = (simd_double2)vmlaq_n_f64(vmlaq_laneq_f64(vmulq_n_f64((float64x2_t)v106, v99->f64[0]), (float64x2_t)v107, *v99, 1), v108, *(double *)v306.i64);
        v105.f64[1] = v104;
        float64x2_t v307 = v105;
        float64x2_t v109 = (float64x2_t)__invert_d2(v344).columns[1];
        float64x2_t v110 = vmlaq_laneq_f64(vmulq_n_f64(v309, v109.f64[0]), v312, v109, 1);
        float64x2_t v111 = vmlaq_laneq_f64(vmulq_f64((float64x2_t)v332, v109), (float64x2_t)v306, v109, 1);
        float64x2_t v112 = vmulq_n_f64(v307, v316.f64[0]);
        float64x2_t v113 = vmulq_laneq_f64(v316, v308, 1);
        v114.f64[0] = vmulq_f64(v327, v113).f64[0] + vaddvq_f64(vmulq_f64(v304, v112));
        int64x2_t v115 = (int64x2_t)vmulq_f64(v322, v113);
        v114.f64[1] = *(double *)v115.i64 + vaddvq_f64(vmulq_f64(v303, v112));
        int64x2_t v116 = (int64x2_t)vmulq_n_f64(v114, 1.0 / sqrt(vaddvq_f64(vmulq_f64(v114, v114))));
        *(double *)v115.i64 = -*(double *)&v116.i64[1];
        float64x2_t v117 = (float64x2_t)vzip1q_s64(v115, v116);
        *(double *)v115.i64 = vmulq_f64(v327, v111).f64[0] + vaddvq_f64(vmulq_f64(v304, v110));
        *(double *)&v115.i64[1] = vmulq_f64(v322, v111).f64[0] + vaddvq_f64(vmulq_f64(v303, v110));
        int64x2_t v118 = (int64x2_t)vmulq_f64(v117, (float64x2_t)v115);
        float64x2_t v119 = vdivq_f64(v117, (float64x2_t)vdupq_lane_s64(*(_OWORD *)&vaddq_f64((float64x2_t)v118, (float64x2_t)vdupq_laneq_s64(v118, 1)), 0));
        float32x4_t v120 = v339;
        if (v339 >= v340)
        {
          uint64_t v122 = ((uint64_t)v339 - *(void *)__x) >> 4;
          if ((unint64_t)(v122 + 1) >> 60) {
            goto LABEL_314;
          }
          unint64_t v123 = ((uint64_t)v340 - *(void *)__x) >> 3;
          if (v123 <= v122 + 1) {
            unint64_t v123 = v122 + 1;
          }
          if ((unint64_t)v340 - *(void *)__x >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v124 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v124 = v123;
          }
          if (v124)
          {
            float64x2_t v317 = v119;
            uint64_t v125 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_fEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)&v340, v124);
            float64x2_t v119 = v317;
          }
          else
          {
            uint64_t v125 = 0;
          }
          uint64_t v126 = (float64x2_t *)&v125[16 * v122];
          *uint64_t v126 = v119;
          float32x4_t v121 = v126 + 1;
          unint64_t v128 = *(float64x2_t **)__x;
          uint64_t v127 = v339;
          if (v339 != *(float64x2_t **)__x)
          {
            do
            {
              float64x2_t v129 = v127[-1];
              --v127;
              v126[-1] = v129;
              --v126;
            }
            while (v127 != v128);
            uint64_t v127 = *(float64x2_t **)__x;
          }
          *(void *)std::vector<int>::value_type __x = v126;
          float64x2_t v339 = v121;
          float64x2_t v340 = (float64x2_t *)&v125[16 * v124];
          if (v127) {
            operator delete(v127);
          }
        }
        else
        {
          *float64x2_t v339 = v119;
          float32x4_t v121 = v120 + 1;
        }
        float64x2_t v81 = v300;
        int64x2_t v66 = v301;
        float64x2_t v91 = v298;
        float64x2_t v89 = v299;
        float64x2_t v339 = v121;
        ++v97;
        float64x2_t v49 = (char *)__p;
      }
      while (v97 < ((char *)v342 - (unsigned char *)__p) >> 5);
      uint64_t v130 = *(void *)__x;
    }
    uint64_t v335 = 0;
    float64x2_t v336 = 0;
    uint64_t v337 = 0;
    geom::half_plane_intersection_2<double>(((uint64_t)v121 - v130) >> 4, v130, (uint64_t)&v335);
    uint64_t v163 = (float64x2_t *)v335;
    unint64_t v164 = v336;
    int v165 = (int8x16_t *)a3[1];
    if (v335 != v336)
    {
      unint64_t v166 = a3 + 2;
      *(void *)&v167.f64[0] = v294;
      *(void *)&v168.f64[0] = v296;
      *(void *)&v167.f64[1] = v288;
      *(void *)&v168.f64[1] = v289;
      float64x2_t v295 = v167;
      float64x2_t v297 = v168;
      do
      {
        int8x16_t v169 = (int8x16_t)vmlaq_n_f64(vmulq_laneq_f64(v167, *v163, 1), v168, v163->f64[0]);
        unint64_t v170 = vextq_s8(v169, v169, 8uLL).u64[0];
        float64x2_t v171 = vmlaq_f64(vmulq_laneq_f64(v322, *v163, 1), *v163, v327);
        if ((unint64_t)v165 >= *v166)
        {
          uint64_t v172 = ((char *)v165 - *a3) >> 5;
          if ((unint64_t)(v172 + 1) >> 59) {
            goto LABEL_314;
          }
          uint64_t v173 = *v166 - (void)*a3;
          uint64_t v174 = v173 >> 4;
          if (v173 >> 4 <= (unint64_t)(v172 + 1)) {
            uint64_t v174 = v172 + 1;
          }
          if ((unint64_t)v173 >= 0x7FFFFFFFFFFFFFE0) {
            unint64_t v175 = 0x7FFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v175 = v174;
          }
          if (v175)
          {
            uint64_t v334 = v169.i64[0];
            unint64_t v313 = v170;
            float64x2_t v318 = v171;
            float64x2_t v176 = (char *)_ZNSt3__119__allocate_at_leastB8nn180100INS_9allocatorIDv3_dEEEENS_19__allocation_resultINS_16allocator_traitsIT_E7pointerEEERS6_m((uint64_t)(a3 + 2), v175);
            unint64_t v170 = v313;
            float64x2_t v171 = v318;
            v169.i64[0] = v334;
          }
          else
          {
            float64x2_t v176 = 0;
          }
          v169.i64[1] = v170;
          float64x2_t v177 = (int8x16_t *)&v176[32 * v172];
          *float64x2_t v177 = v169;
          v177[1] = (int8x16_t)v171;
          float64x2_t v179 = *a3;
          float32x4_t v178 = a3[1];
          float32x4_t v180 = v177;
          if (v178 != *a3)
          {
            do
            {
              int8x16_t v181 = *((int8x16_t *)v178 - 2);
              int8x16_t v182 = *((int8x16_t *)v178 - 1);
              v178 -= 32;
              v180[-2] = v181;
              v180[-1] = v182;
              v180 -= 2;
            }
            while (v178 != v179);
            float32x4_t v178 = *a3;
          }
          int v165 = v177 + 2;
          *a3 = (char *)v180;
          a3[1] = v177[2].i8;
          a3[2] = &v176[32 * v175];
          if (v178) {
            operator delete(v178);
          }
          float64x2_t v167 = v295;
          float64x2_t v168 = v297;
        }
        else
        {
          v169.i64[1] = v170;
          *int v165 = v169;
          v165[1] = (int8x16_t)v171;
          v165 += 2;
        }
        a3[1] = (char *)v165;
        ++v163;
      }
      while (v163 != v164);
    }
    std::vector<unsigned int>::resize(a4, ((char *)v165 - *a3) >> 4);
    uint64_t v183 = a3[1] - *a3;
    if (v183)
    {
      uint64_t v184 = 0;
      std::vector<int>::pointer v185 = a4->__begin_;
      uint64_t v186 = 4 * (v183 >> 5);
      uint64_t v187 = v186;
      do
      {
        v185[v184] = v184;
        ++v184;
        v187 -= 4;
      }
      while (v187);
      std::vector<int>::pointer v188 = a4->__end_ - 1;
      do
      {
        int v189 = *v185++;
        *v188-- = v189;
        v186 -= 4;
      }
      while (v186);
    }
    unint64_t v190 = (unint64_t)v183 >> 5;
    int v191 = a5[2];
    float64x2_t v192 = a5[1];
    if (v192 >= v191)
    {
      uint64_t v194 = *a5;
      uint64_t v195 = (v192 - *a5) >> 2;
      unint64_t v196 = v195 + 1;
      if ((unint64_t)(v195 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v197 = v191 - v194;
      if (v197 >> 1 > v196) {
        unint64_t v196 = v197 >> 1;
      }
      if ((unint64_t)v197 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v198 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v198 = v196;
      }
      if (v198)
      {
        unint64_t v199 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v198);
        uint64_t v194 = *a5;
        float64x2_t v192 = a5[1];
      }
      else
      {
        unint64_t v199 = 0;
      }
      float32x4_t v272 = &v199[4 * v195];
      int v191 = &v199[4 * v198];
      *(_DWORD *)float32x4_t v272 = v190;
      int v193 = v272 + 4;
      while (v192 != v194)
      {
        int v273 = *((_DWORD *)v192 - 1);
        v192 -= 4;
        *((_DWORD *)v272 - 1) = v273;
        v272 -= 4;
      }
      *a5 = v272;
      a5[1] = v193;
      a5[2] = v191;
      if (v194)
      {
        operator delete(v194);
        int v191 = a5[2];
      }
    }
    else
    {
      *(_DWORD *)float64x2_t v192 = v190;
      int v193 = v192 + 4;
    }
    a5[1] = v193;
    uint64_t v274 = ((unint64_t)(a3[1] - *a3) >> 4) & 0xFFFFFFFE;
    if (v193 >= v191)
    {
      float32x4_t v276 = *a5;
      uint64_t v277 = (v193 - *a5) >> 2;
      unint64_t v278 = v277 + 1;
      if ((unint64_t)(v277 + 1) >> 62) {
        goto LABEL_314;
      }
      uint64_t v279 = v191 - v276;
      if (v279 >> 1 > v278) {
        unint64_t v278 = v279 >> 1;
      }
      if ((unint64_t)v279 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v280 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v280 = v278;
      }
      if (v280)
      {
        float32x4_t v281 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<float>>((uint64_t)(a5 + 2), v280);
        float32x4_t v276 = *a5;
        int v193 = a5[1];
      }
      else
      {
        float32x4_t v281 = 0;
      }
      float32x4_t v282 = &v281[4 * v277];
      float64x2_t v283 = &v281[4 * v280];
      *(_DWORD *)float32x4_t v282 = v274;
      float32x4_t v275 = v282 + 4;
      while (v193 != v276)
      {
        int v284 = *((_DWORD *)v193 - 1);
        v193 -= 4;
        *((_DWORD *)v282 - 1) = v284;
        v282 -= 4;
      }
      *a5 = v282;
      a5[1] = v275;
      a5[2] = v283;
      if (v276) {
        operator delete(v276);
      }
    }
    else
    {
      *(_DWORD *)int v193 = v274;
      float32x4_t v275 = v193 + 4;
    }
    a5[1] = v275;
    if (v335)
    {
      float64x2_t v336 = (float64x2_t *)v335;
      operator delete(v335);
    }
    if (*(void *)__x)
    {
      float64x2_t v339 = *(float64x2_t **)__x;
      operator delete(*(void **)__x);
    }
  }
  uint64_t v285 = (float64x2_t *)*a3;
  float64x2_t v286 = (float64x2_t *)a3[1];
  if (*a3 != (char *)v286)
  {
    do
    {
      float64x2_t v287 = vaddq_f64(a2[1], v285[1]);
      *uint64_t v285 = vaddq_f64(*a2, *v285);
      v285[1] = v287;
      v285 += 2;
    }
    while (v285 != v286);
  }
LABEL_311:
  if (__p)
  {
    float64x2_t v342 = (int8x16_t *)__p;
    operator delete(__p);
  }
}

void std::__introsort<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,false>(unsigned int *a1, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
LABEL_1:
  float64x2_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          uint64_t v32 = **a3;
          float32x2_t v33 = (float32x2_t)*a3[1];
          float32x2_t v34 = *(float32x2_t *)(v32 + 8 * *(a2 - 1));
          float32x2_t v35 = *(float32x2_t *)(v32 + 8 * *v11);
          float v36 = _simd_orient_pf2((simd_float2)v33, (simd_float2)v34, (simd_float2)v35);
          if (v36 == 0.0)
          {
            float32x2_t v37 = vsub_f32(v34, v33);
            int32x2_t v38 = (int32x2_t)vmul_f32(v37, v37);
            float32x2_t v39 = vsub_f32(v35, v33);
            int32x2_t v40 = (int32x2_t)vmul_f32(v39, v39);
            float32x2_t v41 = vadd_f32((float32x2_t)vzip1_s32(v38, v40), (float32x2_t)vzip2_s32(v38, v40));
            if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v41, 1), v41).u32[0] & 1) == 0) {
              return;
            }
          }
          else if (v36 <= 0.0)
          {
            return;
          }
          unsigned int v42 = *v11;
          *float64x2_t v11 = *(a2 - 1);
          *(a2 - 1) = v42;
          break;
        case 3uLL:
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, v11 + 1, a2 - 1, a3);
          return;
        case 4uLL:
          std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          return;
        case 5uLL:
          std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,unsigned int *>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    double v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, &v11[v15 >> 1], a2 - 1, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11 + 1, v17 - 1, a2 - 2, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      unsigned int v18 = *v11;
      *float64x2_t v11 = *v17;
      *double v17 = v18;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_16;
      }
    }
    uint64_t v19 = **a3;
    float32x2_t v20 = (float32x2_t)*a3[1];
    float32x2_t v21 = *(float32x2_t *)(v19 + 8 * *(v11 - 1));
    float32x2_t v22 = *(float32x2_t *)(v19 + 8 * *v11);
    float v23 = _simd_orient_pf2((simd_float2)v20, (simd_float2)v21, (simd_float2)v22);
    if (v23 == 0.0)
    {
      float32x2_t v24 = vsub_f32(v21, v20);
      int32x2_t v25 = (int32x2_t)vmul_f32(v24, v24);
      float32x2_t v26 = vsub_f32(v22, v20);
      int32x2_t v27 = (int32x2_t)vmul_f32(v26, v26);
      float32x2_t v28 = vadd_f32((float32x2_t)vzip1_s32(v25, v27), (float32x2_t)vzip2_s32(v25, v27));
      if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v28, 1), v28).u8[0] & 1) == 0) {
        goto LABEL_20;
      }
    }
    else if (v23 <= 0.0)
    {
LABEL_20:
      float64x2_t v11 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &>(v11, a2, a3);
      goto LABEL_21;
    }
LABEL_16:
    unint64_t v29 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &>(v11, a2, a3);
    if ((v30 & 1) == 0) {
      goto LABEL_19;
    }
    BOOL v31 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, v29, a3);
    float64x2_t v11 = v29 + 1;
    if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v29 + 1, a2, a3))
    {
      a4 = -v13;
      a2 = v29;
      if (v31) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v31)
    {
LABEL_19:
      std::__introsort<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,false>(a1, v29, a3, -v13, a5 & 1);
      float64x2_t v11 = v29 + 1;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, a2, a3);
  }
}

  float64x2_t v11 = a1;
LABEL_2:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    a1 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (char *)a2 - (char *)v11;
    unint64_t v15 = a2 - v11;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return;
        case 2uLL:
          unint64_t v29 = **a3;
          int32x2_t v40 = *(float64x2_t *)(v29 + 16 * *v11);
          unsigned int v42 = *(float64x2_t *)a3[1];
          int32x2_t v38 = *(float64x2_t *)(v29 + 16 * *(a2 - 1));
          char v30 = _simd_orient_pd2((simd_double2)v42, (simd_double2)v38, (simd_double2)v40);
          if (v30 == 0.0)
          {
            BOOL v31 = vsubq_f64(v38, v42);
            uint64_t v32 = (int64x2_t)vmulq_f64(v31, v31);
            float32x2_t v33 = vsubq_f64(v40, v42);
            float32x2_t v34 = (int64x2_t)vmulq_f64(v33, v33);
            float32x2_t v35 = vaddq_f64((float64x2_t)vzip1q_s64(v32, v34), (float64x2_t)vzip2q_s64(v32, v34));
            if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v35, 1), v35)).u32[0] & 1) == 0) {
              return;
            }
          }
          else if (v30 <= 0.0)
          {
            return;
          }
          float v36 = *v11;
          *float64x2_t v11 = *(a2 - 1);
          *(a2 - 1) = v36;
          break;
        case 3uLL:
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, v11 + 1, a2 - 1, a3);
          return;
        case 4uLL:
          std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, a2 - 1, a3);
          return;
        case 5uLL:
          std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, v11 + 1, v11 + 2, v11 + 3, a2 - 1, a3);
          return;
        default:
          JUMPOUT(0);
      }
      return;
    }
    if (v14 <= 95) {
      break;
    }
    if (v13 == 1)
    {
      if (v11 != a2)
      {
        std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,unsigned int *>(v11, a2, a2, a3);
      }
      return;
    }
    unint64_t v16 = v15 >> 1;
    double v17 = &v11[v15 >> 1];
    if ((unint64_t)v14 >= 0x201)
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, &v11[v15 >> 1], a2 - 1, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11 + 1, v17 - 1, a2 - 2, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11 + 2, &v11[v16 + 1], a2 - 3, a3);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v17 - 1, v17, &v11[v16 + 1], a3);
      unsigned int v18 = *v11;
      *float64x2_t v11 = *v17;
      *double v17 = v18;
      if (a5) {
        goto LABEL_16;
      }
    }
    else
    {
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(&v11[v15 >> 1], v11, a2 - 1, a3);
      if (a5) {
        goto LABEL_16;
      }
    }
    uint64_t v19 = **a3;
    float32x2_t v39 = *(float64x2_t *)(v19 + 16 * *v11);
    float32x2_t v41 = *(float64x2_t *)a3[1];
    float32x2_t v37 = *(float64x2_t *)(v19 + 16 * *(v11 - 1));
    float32x2_t v20 = _simd_orient_pd2((simd_double2)v41, (simd_double2)v37, (simd_double2)v39);
    if (v20 == 0.0)
    {
      float32x2_t v21 = vsubq_f64(v37, v41);
      float32x2_t v22 = (int64x2_t)vmulq_f64(v21, v21);
      float v23 = vsubq_f64(v39, v41);
      float32x2_t v24 = (int64x2_t)vmulq_f64(v23, v23);
      int32x2_t v25 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v24), (float64x2_t)vzip2q_s64(v22, v24));
      if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1), v25)).u8[0] & 1) == 0) {
        goto LABEL_20;
      }
    }
    else if (v20 <= 0.0)
    {
LABEL_20:
      float64x2_t v11 = std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &>(v11, a2, a3);
      goto LABEL_21;
    }
LABEL_16:
    float32x2_t v26 = std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &>(v11, a2, a3);
    if ((v27 & 1) == 0) {
      goto LABEL_19;
    }
    float32x2_t v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, v26, a3);
    float64x2_t v11 = v26 + 1;
    if (std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v26 + 1, a2, a3))
    {
      a4 = -v13;
      a2 = v26;
      if (v28) {
        return;
      }
      goto LABEL_1;
    }
    uint64_t v12 = v13 + 1;
    if (!v28)
    {
LABEL_19:
      std::__introsort<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,false>(a1, v26, a3, -v13, a5 & 1);
      float64x2_t v11 = v26 + 1;
LABEL_21:
      a5 = 0;
      a4 = -v13;
      goto LABEL_2;
    }
  }
  if (a5)
  {
    std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, a2, a3);
  }
  else
  {
    std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(v11, a2, a3);
  }
}

void std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  if (a1 == a2) {
    return;
  }
  char v5 = a1 + 1;
  if (a1 + 1 == a2) {
    return;
  }
  uint64_t v7 = 0;
  float64x2_t v8 = a1;
  do
  {
    float64_t v9 = v8;
    float64x2_t v8 = v5;
    uint64_t v10 = **a3;
    float32x2_t v11 = (float32x2_t)*a3[1];
    float32x2_t v12 = *(float32x2_t *)(v10 + 8 * v9[1]);
    float32x2_t v13 = *(float32x2_t *)(v10 + 8 * *v9);
    float v14 = _simd_orient_pf2((simd_float2)v11, (simd_float2)v12, (simd_float2)v13);
    if (v14 == 0.0)
    {
      float32x2_t v15 = vsub_f32(v12, v11);
      int32x2_t v16 = (int32x2_t)vmul_f32(v15, v15);
      float32x2_t v17 = vsub_f32(v13, v11);
      int32x2_t v18 = (int32x2_t)vmul_f32(v17, v17);
      float32x2_t v19 = vadd_f32((float32x2_t)vzip1_s32(v16, v18), (float32x2_t)vzip2_s32(v16, v18));
      if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v19, 1), v19).u32[0] & 1) == 0) {
        goto LABEL_18;
      }
    }
    else if (v14 <= 0.0)
    {
      goto LABEL_18;
    }
    uint64_t v20 = v9[1];
    v9[1] = *v9;
    float32x2_t v21 = a1;
    if (v9 == a1) {
      goto LABEL_17;
    }
    uint64_t v22 = v7;
    while (1)
    {
      uint64_t v23 = **a3;
      float32x2_t v24 = (float32x2_t)*a3[1];
      float32x2_t v25 = *(float32x2_t *)(v23 + 8 * v20);
      float32x2_t v26 = *(float32x2_t *)(v23 + 8 * *(unsigned int *)((char *)a1 + v22 - 4));
      float v27 = _simd_orient_pf2((simd_float2)v24, (simd_float2)v25, (simd_float2)v26);
      if (v27 == 0.0)
      {
        float32x2_t v28 = vsub_f32(v25, v24);
        int32x2_t v29 = (int32x2_t)vmul_f32(v28, v28);
        float32x2_t v30 = vsub_f32(v26, v24);
        int32x2_t v31 = (int32x2_t)vmul_f32(v30, v30);
        float32x2_t v32 = vadd_f32((float32x2_t)vzip1_s32(v29, v31), (float32x2_t)vzip2_s32(v29, v31));
        if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v32, 1), v32).u32[0] & 1) == 0)
        {
          float32x2_t v21 = v9;
          goto LABEL_17;
        }
        goto LABEL_14;
      }
      if (v27 <= 0.0) {
        break;
      }
LABEL_14:
      --v9;
      *(unsigned int *)((char *)a1 + v22) = *(unsigned int *)((char *)a1 + v22 - 4);
      v22 -= 4;
      if (!v22)
      {
        float32x2_t v21 = a1;
        goto LABEL_17;
      }
    }
    float32x2_t v21 = (unsigned int *)((char *)a1 + v22);
LABEL_17:
    *float32x2_t v21 = v20;
LABEL_18:
    char v5 = v8 + 1;
    v7 += 4;
  }
  while (v8 + 1 != a2);
}

void std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  if (a1 != a2)
  {
    double v4 = a1;
    for (uint64_t i = a1 + 1; v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      uint64_t v7 = v4;
      double v4 = i;
      uint64_t v8 = **a3;
      float32x2_t v9 = (float32x2_t)*a3[1];
      float32x2_t v10 = *(float32x2_t *)(v8 + 8 * v7[1]);
      float32x2_t v11 = *(float32x2_t *)(v8 + 8 * *v7);
      float v12 = _simd_orient_pf2((simd_float2)v9, (simd_float2)v10, (simd_float2)v11);
      if (v12 == 0.0)
      {
        float32x2_t v13 = vsub_f32(v10, v9);
        int32x2_t v14 = (int32x2_t)vmul_f32(v13, v13);
        float32x2_t v15 = vsub_f32(v11, v9);
        int32x2_t v16 = (int32x2_t)vmul_f32(v15, v15);
        float32x2_t v17 = vadd_f32((float32x2_t)vzip1_s32(v14, v16), (float32x2_t)vzip2_s32(v14, v16));
        if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v17, 1), v17).u32[0]) {
          goto LABEL_7;
        }
      }
      else if (v12 > 0.0)
      {
LABEL_7:
        uint64_t v18 = *v4;
        do
        {
          while (1)
          {
            float32x2_t v19 = v7;
            v7[1] = *v7;
            unsigned int v20 = *--v7;
            uint64_t v21 = **a3;
            float32x2_t v22 = (float32x2_t)*a3[1];
            float32x2_t v23 = *(float32x2_t *)(v21 + 8 * v18);
            float32x2_t v24 = *(float32x2_t *)(v21 + 8 * v20);
            float v25 = _simd_orient_pf2((simd_float2)v22, (simd_float2)v23, (simd_float2)v24);
            if (v25 != 0.0) {
              break;
            }
            float32x2_t v26 = vsub_f32(v23, v22);
            int32x2_t v27 = (int32x2_t)vmul_f32(v26, v26);
            float32x2_t v28 = vsub_f32(v24, v22);
            int32x2_t v29 = (int32x2_t)vmul_f32(v28, v28);
            float32x2_t v30 = vadd_f32((float32x2_t)vzip1_s32(v27, v29), (float32x2_t)vzip2_s32(v27, v29));
            if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v30, 1), v30).u32[0] & 1) == 0) {
              goto LABEL_12;
            }
          }
        }
        while (v25 > 0.0);
LABEL_12:
        *float32x2_t v19 = v18;
      }
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t **a4)
{
  char v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = **a4;
  float32x2_t v9 = (float32x2_t)*a4[1];
  float32x2_t v10 = *(float32x2_t *)(v8 + 8 * *a2);
  float32x2_t v11 = *(float32x2_t *)(v8 + 8 * *a1);
  float v12 = _simd_orient_pf2((simd_float2)v9, (simd_float2)v10, (simd_float2)v11);
  if (v12 != 0.0)
  {
    if (v12 > 0.0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v29 = **a4;
    float32x2_t v30 = (float32x2_t)*a4[1];
    float32x2_t v31 = *(float32x2_t *)(v29 + 8 * *a3);
    float32x2_t v32 = *(float32x2_t *)(v29 + 8 * *v6);
    float v33 = _simd_orient_pf2((simd_float2)v30, (simd_float2)v31, (simd_float2)v32);
    if (v33 == 0.0)
    {
      float32x2_t v34 = vsub_f32(v31, v30);
      int32x2_t v35 = (int32x2_t)vmul_f32(v34, v34);
      float32x2_t v36 = vsub_f32(v32, v30);
      int32x2_t v37 = (int32x2_t)vmul_f32(v36, v36);
      float32x2_t v38 = vadd_f32((float32x2_t)vzip1_s32(v35, v37), (float32x2_t)vzip2_s32(v35, v37));
      if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v38, 1), v38).u32[0]) {
        goto LABEL_9;
      }
    }
    else if (v33 > 0.0)
    {
LABEL_9:
      unsigned int v39 = *v6;
      *char v6 = *a3;
      *a3 = v39;
      uint64_t v40 = **a4;
      float32x2_t v41 = (float32x2_t)*a4[1];
      float32x2_t v42 = *(float32x2_t *)(v40 + 8 * *v6);
      float32x2_t v43 = *(float32x2_t *)(v40 + 8 * *v7);
      float v44 = _simd_orient_pf2((simd_float2)v41, (simd_float2)v42, (simd_float2)v43);
      if (v44 == 0.0)
      {
        float32x2_t v45 = vsub_f32(v42, v41);
        int32x2_t v46 = (int32x2_t)vmul_f32(v45, v45);
        float32x2_t v47 = vsub_f32(v43, v41);
        int32x2_t v48 = (int32x2_t)vmul_f32(v47, v47);
        float32x2_t v49 = vadd_f32((float32x2_t)vzip1_s32(v46, v48), (float32x2_t)vzip2_s32(v46, v48));
        if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v49, 1), v49).u32[0] & 1) == 0) {
          return 1;
        }
      }
      else if (v44 <= 0.0)
      {
        return 1;
      }
      uint64_t result = 2;
LABEL_23:
      unsigned int v61 = *v7;
      *uint64_t v7 = *v6;
      *char v6 = v61;
      return result;
    }
    return 0;
  }
  float32x2_t v13 = vsub_f32(v10, v9);
  int32x2_t v14 = (int32x2_t)vmul_f32(v13, v13);
  float32x2_t v15 = vsub_f32(v11, v9);
  int32x2_t v16 = (int32x2_t)vmul_f32(v15, v15);
  float32x2_t v17 = vadd_f32((float32x2_t)vzip1_s32(v14, v16), (float32x2_t)vzip2_s32(v14, v16));
  if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v17, 1), v17).u8[0] & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v18 = **a4;
  float32x2_t v19 = (float32x2_t)*a4[1];
  float32x2_t v20 = *(float32x2_t *)(v18 + 8 * *a3);
  float32x2_t v21 = *(float32x2_t *)(v18 + 8 * *v6);
  float v22 = _simd_orient_pf2((simd_float2)v19, (simd_float2)v20, (simd_float2)v21);
  if (v22 == 0.0)
  {
    float32x2_t v23 = vsub_f32(v20, v19);
    int32x2_t v24 = (int32x2_t)vmul_f32(v23, v23);
    float32x2_t v25 = vsub_f32(v21, v19);
    int32x2_t v26 = (int32x2_t)vmul_f32(v25, v25);
    float32x2_t v27 = vadd_f32((float32x2_t)vzip1_s32(v24, v26), (float32x2_t)vzip2_s32(v24, v26));
    if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v27, 1), v27).u32[0])
    {
LABEL_5:
      uint64_t result = 1;
LABEL_22:
      char v6 = a3;
      goto LABEL_23;
    }
  }
  else if (v22 > 0.0)
  {
    goto LABEL_5;
  }
  uint64_t v50 = *v7;
  *uint64_t v7 = *v6;
  *char v6 = v50;
  uint64_t v51 = **a4;
  float32x2_t v52 = (float32x2_t)*a4[1];
  float32x2_t v53 = *(float32x2_t *)(v51 + 8 * *a3);
  float32x2_t v54 = *(float32x2_t *)(v51 + 8 * v50);
  float v55 = _simd_orient_pf2((simd_float2)v52, (simd_float2)v53, (simd_float2)v54);
  if (v55 == 0.0)
  {
    float32x2_t v56 = vsub_f32(v53, v52);
    int32x2_t v57 = (int32x2_t)vmul_f32(v56, v56);
    float32x2_t v58 = vsub_f32(v54, v52);
    int32x2_t v59 = (int32x2_t)vmul_f32(v58, v58);
    float32x2_t v60 = vadd_f32((float32x2_t)vzip1_s32(v57, v59), (float32x2_t)vzip2_s32(v57, v59));
    if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v60, 1), v60).u32[0] & 1) == 0) {
      return 1;
    }
LABEL_21:
    uint64_t result = 2;
    uint64_t v7 = v6;
    goto LABEL_22;
  }
  if (v55 > 0.0) {
    goto LABEL_21;
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  double v4 = a2;
  uint64_t v6 = *a1;
  uint64_t v7 = **a3;
  float32x2_t v8 = (float32x2_t)*a3[1];
  float32x2_t v9 = *(float32x2_t *)(v7 + 8 * v6);
  float32x2_t v10 = *(float32x2_t *)(v7 + 8 * *(a2 - 1));
  float v11 = _simd_orient_pf2((simd_float2)v8, (simd_float2)v9, (simd_float2)v10);
  if (v11 == 0.0)
  {
    float32x2_t v12 = vsub_f32(v9, v8);
    int32x2_t v13 = (int32x2_t)vmul_f32(v12, v12);
    float32x2_t v14 = vsub_f32(v10, v8);
    int32x2_t v15 = (int32x2_t)vmul_f32(v14, v14);
    float32x2_t v16 = vadd_f32((float32x2_t)vzip1_s32(v13, v15), (float32x2_t)vzip2_s32(v13, v15));
    if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v16, 1), v16).u32[0])
    {
LABEL_3:
      for (uint64_t i = a1 + 1; ; ++i)
      {
        uint64_t v18 = **a3;
        float32x2_t v19 = (float32x2_t)*a3[1];
        float32x2_t v20 = *(float32x2_t *)(v18 + 8 * v6);
        float32x2_t v21 = *(float32x2_t *)(v18 + 8 * *i);
        float v22 = _simd_orient_pf2((simd_float2)v19, (simd_float2)v20, (simd_float2)v21);
        if (v22 == 0.0)
        {
          float32x2_t v23 = vsub_f32(v20, v19);
          int32x2_t v24 = (int32x2_t)vmul_f32(v23, v23);
          float32x2_t v25 = vsub_f32(v21, v19);
          int32x2_t v26 = (int32x2_t)vmul_f32(v25, v25);
          float32x2_t v27 = vadd_f32((float32x2_t)vzip1_s32(v24, v26), (float32x2_t)vzip2_s32(v24, v26));
          if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v27, 1), v27).u32[0]) {
            goto LABEL_17;
          }
        }
        else if (v22 > 0.0)
        {
          goto LABEL_17;
        }
      }
    }
  }
  else if (v11 > 0.0)
  {
    goto LABEL_3;
  }
  for (uint64_t i = a1 + 1; i < v4; ++i)
  {
    uint64_t v28 = **a3;
    float32x2_t v29 = (float32x2_t)*a3[1];
    float32x2_t v30 = *(float32x2_t *)(v28 + 8 * v6);
    float32x2_t v31 = *(float32x2_t *)(v28 + 8 * *i);
    float v32 = _simd_orient_pf2((simd_float2)v29, (simd_float2)v30, (simd_float2)v31);
    if (v32 == 0.0)
    {
      float32x2_t v33 = vsub_f32(v30, v29);
      int32x2_t v34 = (int32x2_t)vmul_f32(v33, v33);
      float32x2_t v35 = vsub_f32(v31, v29);
      int32x2_t v36 = (int32x2_t)vmul_f32(v35, v35);
      float32x2_t v37 = vadd_f32((float32x2_t)vzip1_s32(v34, v36), (float32x2_t)vzip2_s32(v34, v36));
      if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v37, 1), v37).u32[0]) {
        break;
      }
    }
    else if (v32 > 0.0)
    {
      break;
    }
  }
LABEL_17:
  if (i >= v4) {
    goto LABEL_32;
  }
  do
  {
    while (1)
    {
      unsigned int v38 = *--v4;
      uint64_t v39 = **a3;
      float32x2_t v40 = (float32x2_t)*a3[1];
      float32x2_t v41 = *(float32x2_t *)(v39 + 8 * v6);
      float32x2_t v42 = *(float32x2_t *)(v39 + 8 * v38);
      float v43 = _simd_orient_pf2((simd_float2)v40, (simd_float2)v41, (simd_float2)v42);
      if (v43 != 0.0) {
        break;
      }
      float32x2_t v44 = vsub_f32(v41, v40);
      int32x2_t v45 = (int32x2_t)vmul_f32(v44, v44);
      float32x2_t v46 = vsub_f32(v42, v40);
      int32x2_t v47 = (int32x2_t)vmul_f32(v46, v46);
      float32x2_t v48 = vadd_f32((float32x2_t)vzip1_s32(v45, v47), (float32x2_t)vzip2_s32(v45, v47));
      if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v48, 1), v48).u32[0] & 1) == 0) {
        goto LABEL_32;
      }
    }
  }
  while (v43 > 0.0);
LABEL_32:
  if (i < v4)
  {
    unsigned int v49 = *i;
    *i++ = *v4;
    unsigned int *v4 = v49;
    while (1)
    {
      uint64_t v50 = **a3;
      float32x2_t v51 = (float32x2_t)*a3[1];
      float32x2_t v52 = *(float32x2_t *)(v50 + 8 * v6);
      float32x2_t v53 = *(float32x2_t *)(v50 + 8 * *i);
      float v54 = _simd_orient_pf2((simd_float2)v51, (simd_float2)v52, (simd_float2)v53);
      if (v54 == 0.0)
      {
        float32x2_t v55 = vsub_f32(v52, v51);
        int32x2_t v56 = (int32x2_t)vmul_f32(v55, v55);
        float32x2_t v57 = vsub_f32(v53, v51);
        int32x2_t v58 = (int32x2_t)vmul_f32(v57, v57);
        float32x2_t v59 = vadd_f32((float32x2_t)vzip1_s32(v56, v58), (float32x2_t)vzip2_s32(v56, v58));
        if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v59, 1), v59).u8[0])
        {
          do
          {
LABEL_30:
            while (1)
            {
              unsigned int v60 = *--v4;
              uint64_t v61 = **a3;
              float32x2_t v62 = (float32x2_t)*a3[1];
              float32x2_t v63 = *(float32x2_t *)(v61 + 8 * v6);
              float32x2_t v64 = *(float32x2_t *)(v61 + 8 * v60);
              float v65 = _simd_orient_pf2((simd_float2)v62, (simd_float2)v63, (simd_float2)v64);
              if (v65 == 0.0) {
                break;
              }
              if (v65 <= 0.0) {
                goto LABEL_32;
              }
            }
            float32x2_t v66 = vsub_f32(v63, v62);
            int32x2_t v67 = (int32x2_t)vmul_f32(v66, v66);
            float32x2_t v68 = vsub_f32(v64, v62);
            int32x2_t v69 = (int32x2_t)vmul_f32(v68, v68);
            float32x2_t v70 = vadd_f32((float32x2_t)vzip1_s32(v67, v69), (float32x2_t)vzip2_s32(v67, v69));
          }
          while ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v70, 1), v70).u32[0] & 1) != 0);
          goto LABEL_32;
        }
      }
      else if (v54 > 0.0)
      {
        goto LABEL_30;
      }
      ++i;
    }
  }
  if (i - 1 != a1) {
    *a1 = *(i - 1);
  }
  *(i - 1) = v6;
  return i;
}

unsigned int *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  while (1)
  {
    uint64_t v8 = **a3;
    float32x2_t v9 = (float32x2_t)*a3[1];
    float32x2_t v10 = *(float32x2_t *)(v8 + 8 * a1[v6 + 1]);
    float32x2_t v11 = *(float32x2_t *)(v8 + 8 * v7);
    float v12 = _simd_orient_pf2((simd_float2)v9, (simd_float2)v10, (simd_float2)v11);
    if (v12 != 0.0) {
      break;
    }
    float32x2_t v13 = vsub_f32(v10, v9);
    int32x2_t v14 = (int32x2_t)vmul_f32(v13, v13);
    float32x2_t v15 = vsub_f32(v11, v9);
    int32x2_t v16 = (int32x2_t)vmul_f32(v15, v15);
    float32x2_t v17 = vadd_f32((float32x2_t)vzip1_s32(v14, v16), (float32x2_t)vzip2_s32(v14, v16));
    if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v17, 1), v17).u32[0] & 1) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    ++v6;
  }
  if (v12 > 0.0) {
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v18 = &a1[v6];
  unint64_t v19 = (unint64_t)&a1[v6 + 1];
  if (v6 * 4)
  {
    do
    {
      while (1)
      {
        unsigned int v20 = *--a2;
        uint64_t v21 = **a3;
        float32x2_t v22 = (float32x2_t)*a3[1];
        float32x2_t v23 = *(float32x2_t *)(v21 + 8 * v20);
        float32x2_t v24 = *(float32x2_t *)(v21 + 8 * v7);
        float v25 = _simd_orient_pf2((simd_float2)v22, (simd_float2)v23, (simd_float2)v24);
        if (v25 != 0.0) {
          break;
        }
        float32x2_t v26 = vsub_f32(v23, v22);
        int32x2_t v27 = (int32x2_t)vmul_f32(v26, v26);
        float32x2_t v28 = vsub_f32(v24, v22);
        int32x2_t v29 = (int32x2_t)vmul_f32(v28, v28);
        float32x2_t v30 = vadd_f32((float32x2_t)vzip1_s32(v27, v29), (float32x2_t)vzip2_s32(v27, v29));
        if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v30, 1), v30).u32[0]) {
          goto LABEL_22;
        }
      }
    }
    while (v25 <= 0.0);
  }
  else
  {
    do
    {
      if (v19 >= (unint64_t)a2) {
        break;
      }
      while (1)
      {
        unsigned int v31 = *--a2;
        uint64_t v32 = **a3;
        float32x2_t v33 = (float32x2_t)*a3[1];
        float32x2_t v34 = *(float32x2_t *)(v32 + 8 * v31);
        float32x2_t v35 = *(float32x2_t *)(v32 + 8 * v7);
        float v36 = _simd_orient_pf2((simd_float2)v33, (simd_float2)v34, (simd_float2)v35);
        if (v36 == 0.0) {
          break;
        }
        if (v36 > 0.0 || v19 >= (unint64_t)a2) {
          goto LABEL_22;
        }
      }
      float32x2_t v38 = vsub_f32(v34, v33);
      int32x2_t v39 = (int32x2_t)vmul_f32(v38, v38);
      float32x2_t v40 = vsub_f32(v35, v33);
      int32x2_t v41 = (int32x2_t)vmul_f32(v40, v40);
      float32x2_t v42 = vadd_f32((float32x2_t)vzip1_s32(v39, v41), (float32x2_t)vzip2_s32(v39, v41));
    }
    while ((vmvn_s8((int8x8_t)vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v42, 1), v42)).u32[0] & 1) != 0);
  }
LABEL_22:
  if (v19 >= (unint64_t)a2) {
    goto LABEL_35;
  }
  float v43 = &a1[v6 + 1];
  float32x2_t v44 = a2;
  while (2)
  {
    unsigned int v45 = *v43;
    *v43++ = *v44;
    *float32x2_t v44 = v45;
    while (2)
    {
      uint64_t v46 = **a3;
      float32x2_t v47 = (float32x2_t)*a3[1];
      float32x2_t v48 = *(float32x2_t *)(v46 + 8 * *v43);
      float32x2_t v49 = *(float32x2_t *)(v46 + 8 * v7);
      float v50 = _simd_orient_pf2((simd_float2)v47, (simd_float2)v48, (simd_float2)v49);
      if (v50 != 0.0)
      {
        if (v50 <= 0.0) {
          goto LABEL_31;
        }
        goto LABEL_29;
      }
      float32x2_t v51 = vsub_f32(v48, v47);
      int32x2_t v52 = (int32x2_t)vmul_f32(v51, v51);
      float32x2_t v53 = vsub_f32(v49, v47);
      int32x2_t v54 = (int32x2_t)vmul_f32(v53, v53);
      float32x2_t v55 = vadd_f32((float32x2_t)vzip1_s32(v52, v54), (float32x2_t)vzip2_s32(v52, v54));
      if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v55, 1), v55).u8[0])
      {
LABEL_29:
        ++v43;
        continue;
      }
      break;
    }
    do
    {
LABEL_31:
      while (1)
      {
        unsigned int v56 = *--v44;
        uint64_t v57 = **a3;
        float32x2_t v58 = (float32x2_t)*a3[1];
        float32x2_t v59 = *(float32x2_t *)(v57 + 8 * v56);
        float32x2_t v60 = *(float32x2_t *)(v57 + 8 * v7);
        float v61 = _simd_orient_pf2((simd_float2)v58, (simd_float2)v59, (simd_float2)v60);
        if (v61 == 0.0) {
          break;
        }
        if (v61 > 0.0) {
          goto LABEL_33;
        }
      }
      float32x2_t v62 = vsub_f32(v59, v58);
      int32x2_t v63 = (int32x2_t)vmul_f32(v62, v62);
      float32x2_t v64 = vsub_f32(v60, v58);
      int32x2_t v65 = (int32x2_t)vmul_f32(v64, v64);
      float32x2_t v66 = vadd_f32((float32x2_t)vzip1_s32(v63, v65), (float32x2_t)vzip2_s32(v63, v65));
    }
    while ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v66, 1), v66).u32[0] & 1) == 0);
LABEL_33:
    if (v43 < v44) {
      continue;
    }
    break;
  }
  uint64_t v18 = v43 - 1;
LABEL_35:
  if (v18 != a1) {
    *a1 = *v18;
  }
  *uint64_t v18 = v7;
  return v18;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = **a3;
      float32x2_t v9 = (float32x2_t)*a3[1];
      float32x2_t v10 = *(float32x2_t *)(v8 + 8 * *(a2 - 1));
      float32x2_t v11 = *(float32x2_t *)(v8 + 8 * *a1);
      float v12 = _simd_orient_pf2((simd_float2)v9, (simd_float2)v10, (simd_float2)v11);
      if (v12 == 0.0)
      {
        float32x2_t v13 = vsub_f32(v10, v9);
        int32x2_t v14 = (int32x2_t)vmul_f32(v13, v13);
        float32x2_t v15 = vsub_f32(v11, v9);
        int32x2_t v16 = (int32x2_t)vmul_f32(v15, v15);
        float32x2_t v17 = vadd_f32((float32x2_t)vzip1_s32(v14, v16), (float32x2_t)vzip2_s32(v14, v16));
        if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v17, 1), v17).u32[0] & 1) == 0) {
          return 1;
        }
      }
      else if (v12 <= 0.0)
      {
        return 1;
      }
      unsigned int v45 = *a1;
      *a1 = *(a2 - 1);
      *(a2 - 1) = v45;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v18 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unint64_t v19 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v20 = 0;
      int v21 = 0;
      break;
  }
  while (2)
  {
    uint64_t v22 = **a3;
    float32x2_t v23 = (float32x2_t)*a3[1];
    float32x2_t v24 = *(float32x2_t *)(v22 + 8 * *v19);
    float32x2_t v25 = *(float32x2_t *)(v22 + 8 * *v18);
    float v26 = _simd_orient_pf2((simd_float2)v23, (simd_float2)v24, (simd_float2)v25);
    if (v26 == 0.0)
    {
      float32x2_t v27 = vsub_f32(v24, v23);
      int32x2_t v28 = (int32x2_t)vmul_f32(v27, v27);
      float32x2_t v29 = vsub_f32(v25, v23);
      int32x2_t v30 = (int32x2_t)vmul_f32(v29, v29);
      float32x2_t v31 = vadd_f32((float32x2_t)vzip1_s32(v28, v30), (float32x2_t)vzip2_s32(v28, v30));
      if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v31, 1), v31).u32[0] & 1) == 0) {
        goto LABEL_21;
      }
    }
    else if (v26 <= 0.0)
    {
      goto LABEL_21;
    }
    uint64_t v32 = *v19;
    *unint64_t v19 = *v18;
    float32x2_t v33 = a1;
    if (v18 == a1) {
      goto LABEL_20;
    }
    uint64_t v34 = v20;
    while (1)
    {
      uint64_t v35 = **a3;
      float32x2_t v36 = (float32x2_t)*a3[1];
      float32x2_t v37 = *(float32x2_t *)(v35 + 8 * v32);
      float32x2_t v38 = *(float32x2_t *)(v35 + 8 * *(unsigned int *)((char *)a1 + v34 + 4));
      float v39 = _simd_orient_pf2((simd_float2)v36, (simd_float2)v37, (simd_float2)v38);
      if (v39 == 0.0)
      {
        float32x2_t v40 = vsub_f32(v37, v36);
        int32x2_t v41 = (int32x2_t)vmul_f32(v40, v40);
        float32x2_t v42 = vsub_f32(v38, v36);
        int32x2_t v43 = (int32x2_t)vmul_f32(v42, v42);
        float32x2_t v44 = vadd_f32((float32x2_t)vzip1_s32(v41, v43), (float32x2_t)vzip2_s32(v41, v43));
        if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v44, 1), v44).u32[0] & 1) == 0)
        {
          float32x2_t v33 = v18;
          goto LABEL_20;
        }
        goto LABEL_17;
      }
      if (v39 <= 0.0) {
        break;
      }
LABEL_17:
      --v18;
      *(unsigned int *)((char *)a1 + v34 + 8) = *(unsigned int *)((char *)a1 + v34 + 4);
      v34 -= 4;
      if (v34 == -8)
      {
        float32x2_t v33 = a1;
        goto LABEL_20;
      }
    }
    float32x2_t v33 = (unsigned int *)((char *)a1 + v34 + 8);
LABEL_20:
    *float32x2_t v33 = v32;
    if (++v21 != 8)
    {
LABEL_21:
      uint64_t v18 = v19;
      v20 += 4;
      if (++v19 == a2) {
        return 1;
      }
      continue;
    }
    return v19 + 1 == a2;
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t **a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a2, a3, a5);
  uint64_t v10 = **a5;
  float32x2_t v11 = (float32x2_t)*a5[1];
  float32x2_t v12 = *(float32x2_t *)(v10 + 8 * *a4);
  float32x2_t v13 = *(float32x2_t *)(v10 + 8 * *a3);
  float v14 = _simd_orient_pf2((simd_float2)v11, (simd_float2)v12, (simd_float2)v13);
  if (v14 == 0.0)
  {
    float32x2_t v15 = vsub_f32(v12, v11);
    int32x2_t v16 = (int32x2_t)vmul_f32(v15, v15);
    float32x2_t v17 = vsub_f32(v13, v11);
    int32x2_t v18 = (int32x2_t)vmul_f32(v17, v17);
    float32x2_t v19 = vadd_f32((float32x2_t)vzip1_s32(v16, v18), (float32x2_t)vzip2_s32(v16, v18));
    if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v19, 1), v19).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v14 <= 0.0)
  {
    return;
  }
  unsigned int v20 = *a3;
  *a3 = *a4;
  *a4 = v20;
  uint64_t v21 = **a5;
  float32x2_t v22 = (float32x2_t)*a5[1];
  float32x2_t v23 = *(float32x2_t *)(v21 + 8 * *a3);
  float32x2_t v24 = *(float32x2_t *)(v21 + 8 * *a2);
  float v25 = _simd_orient_pf2((simd_float2)v22, (simd_float2)v23, (simd_float2)v24);
  if (v25 == 0.0)
  {
    float32x2_t v26 = vsub_f32(v23, v22);
    int32x2_t v27 = (int32x2_t)vmul_f32(v26, v26);
    float32x2_t v28 = vsub_f32(v24, v22);
    int32x2_t v29 = (int32x2_t)vmul_f32(v28, v28);
    float32x2_t v30 = vadd_f32((float32x2_t)vzip1_s32(v27, v29), (float32x2_t)vzip2_s32(v27, v29));
    if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v30, 1), v30).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v25 <= 0.0)
  {
    return;
  }
  unsigned int v31 = *a2;
  *a2 = *a3;
  *a3 = v31;
  uint64_t v32 = **a5;
  float32x2_t v33 = (float32x2_t)*a5[1];
  float32x2_t v34 = *(float32x2_t *)(v32 + 8 * *a2);
  float32x2_t v35 = *(float32x2_t *)(v32 + 8 * *a1);
  float v36 = _simd_orient_pf2((simd_float2)v33, (simd_float2)v34, (simd_float2)v35);
  if (v36 == 0.0)
  {
    float32x2_t v37 = vsub_f32(v34, v33);
    int32x2_t v38 = (int32x2_t)vmul_f32(v37, v37);
    float32x2_t v39 = vsub_f32(v35, v33);
    int32x2_t v40 = (int32x2_t)vmul_f32(v39, v39);
    float32x2_t v41 = vadd_f32((float32x2_t)vzip1_s32(v38, v40), (float32x2_t)vzip2_s32(v38, v40));
    if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v41, 1), v41).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v36 <= 0.0)
  {
    return;
  }
  unsigned int v42 = *a1;
  *a1 = *a2;
  *a2 = v42;
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t **a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a2, a3, a4, a6);
  uint64_t v12 = **a6;
  float32x2_t v13 = (float32x2_t)*a6[1];
  float32x2_t v14 = *(float32x2_t *)(v12 + 8 * *a5);
  float32x2_t v15 = *(float32x2_t *)(v12 + 8 * *a4);
  float v16 = _simd_orient_pf2((simd_float2)v13, (simd_float2)v14, (simd_float2)v15);
  if (v16 == 0.0)
  {
    float32x2_t v17 = vsub_f32(v14, v13);
    int32x2_t v18 = (int32x2_t)vmul_f32(v17, v17);
    float32x2_t v19 = vsub_f32(v15, v13);
    int32x2_t v20 = (int32x2_t)vmul_f32(v19, v19);
    float32x2_t v21 = vadd_f32((float32x2_t)vzip1_s32(v18, v20), (float32x2_t)vzip2_s32(v18, v20));
    if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v21, 1), v21).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v16 <= 0.0)
  {
    return;
  }
  unsigned int v22 = *a4;
  *a4 = *a5;
  *a5 = v22;
  uint64_t v23 = **a6;
  float32x2_t v24 = (float32x2_t)*a6[1];
  float32x2_t v25 = *(float32x2_t *)(v23 + 8 * *a4);
  float32x2_t v26 = *(float32x2_t *)(v23 + 8 * *a3);
  float v27 = _simd_orient_pf2((simd_float2)v24, (simd_float2)v25, (simd_float2)v26);
  if (v27 == 0.0)
  {
    float32x2_t v28 = vsub_f32(v25, v24);
    int32x2_t v29 = (int32x2_t)vmul_f32(v28, v28);
    float32x2_t v30 = vsub_f32(v26, v24);
    int32x2_t v31 = (int32x2_t)vmul_f32(v30, v30);
    float32x2_t v32 = vadd_f32((float32x2_t)vzip1_s32(v29, v31), (float32x2_t)vzip2_s32(v29, v31));
    if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v32, 1), v32).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v27 <= 0.0)
  {
    return;
  }
  unsigned int v33 = *a3;
  *a3 = *a4;
  *a4 = v33;
  uint64_t v34 = **a6;
  float32x2_t v35 = (float32x2_t)*a6[1];
  float32x2_t v36 = *(float32x2_t *)(v34 + 8 * *a3);
  float32x2_t v37 = *(float32x2_t *)(v34 + 8 * *a2);
  float v38 = _simd_orient_pf2((simd_float2)v35, (simd_float2)v36, (simd_float2)v37);
  if (v38 == 0.0)
  {
    float32x2_t v39 = vsub_f32(v36, v35);
    int32x2_t v40 = (int32x2_t)vmul_f32(v39, v39);
    float32x2_t v41 = vsub_f32(v37, v35);
    int32x2_t v42 = (int32x2_t)vmul_f32(v41, v41);
    float32x2_t v43 = vadd_f32((float32x2_t)vzip1_s32(v40, v42), (float32x2_t)vzip2_s32(v40, v42));
    if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v43, 1), v43).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v38 <= 0.0)
  {
    return;
  }
  unsigned int v44 = *a2;
  *a2 = *a3;
  *a3 = v44;
  uint64_t v45 = **a6;
  float32x2_t v46 = (float32x2_t)*a6[1];
  float32x2_t v47 = *(float32x2_t *)(v45 + 8 * *a2);
  float32x2_t v48 = *(float32x2_t *)(v45 + 8 * *a1);
  float v49 = _simd_orient_pf2((simd_float2)v46, (simd_float2)v47, (simd_float2)v48);
  if (v49 == 0.0)
  {
    float32x2_t v50 = vsub_f32(v47, v46);
    int32x2_t v51 = (int32x2_t)vmul_f32(v50, v50);
    float32x2_t v52 = vsub_f32(v48, v46);
    int32x2_t v53 = (int32x2_t)vmul_f32(v52, v52);
    float32x2_t v54 = vadd_f32((float32x2_t)vzip1_s32(v51, v53), (float32x2_t)vzip2_s32(v51, v53));
    if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v54, 1), v54).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v49 <= 0.0)
  {
    return;
  }
  unsigned int v55 = *a1;
  *a1 = *a2;
  *a2 = v55;
}

unsigned int *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t **a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    float32x2_t v13 = a2;
    if (a2 != a3)
    {
      float32x2_t v14 = a2;
      while (1)
      {
        uint64_t v15 = **a4;
        float32x2_t v16 = (float32x2_t)*a4[1];
        float32x2_t v17 = *(float32x2_t *)(v15 + 8 * *v14);
        float32x2_t v18 = *(float32x2_t *)(v15 + 8 * *a1);
        float v19 = _simd_orient_pf2((simd_float2)v16, (simd_float2)v17, (simd_float2)v18);
        if (v19 != 0.0) {
          break;
        }
        float32x2_t v20 = vsub_f32(v17, v16);
        int32x2_t v21 = (int32x2_t)vmul_f32(v20, v20);
        float32x2_t v22 = vsub_f32(v18, v16);
        int32x2_t v23 = (int32x2_t)vmul_f32(v22, v22);
        float32x2_t v24 = vadd_f32((float32x2_t)vzip1_s32(v21, v23), (float32x2_t)vzip2_s32(v21, v23));
        if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v24, 1), v24).u32[0]) {
          goto LABEL_9;
        }
LABEL_10:
        if (++v14 == a3)
        {
          float32x2_t v13 = a3;
          goto LABEL_14;
        }
      }
      if (v19 <= 0.0) {
        goto LABEL_10;
      }
LABEL_9:
      unsigned int v25 = *v14;
      *float32x2_t v14 = *a1;
      *a1 = v25;
      std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>((uint64_t)a1, a4, v9, a1);
      goto LABEL_10;
    }
LABEL_14:
    if (v8 >= 5)
    {
      uint64_t v26 = (unint64_t)v8 >> 2;
      float v27 = a2 - 1;
      do
      {
        unsigned int v28 = *a1;
        int32x2_t v29 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a4, v26);
        if (v27 == v29)
        {
          *int32x2_t v29 = v28;
        }
        else
        {
          *int32x2_t v29 = *v27;
          *float v27 = v28;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>((uint64_t)a1, (uint64_t)(v29 + 1), a4, v29 + 1 - a1);
        }
        --v27;
      }
      while (v26-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(uint64_t a1, uint64_t **a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 2) {
    return;
  }
  uint64_t v10 = ((uint64_t)a4 - a1) >> 1;
  uint64_t v11 = v10 + 1;
  uint64_t v12 = (unsigned int *)(a1 + 4 * (v10 + 1));
  uint64_t v13 = v10 + 2;
  if (v10 + 2 < a3)
  {
    uint64_t v14 = **a2;
    float32x2_t v15 = (float32x2_t)*a2[1];
    float32x2_t v16 = *(float32x2_t *)(v14 + 8 * *v12);
    float32x2_t v17 = *(float32x2_t *)(v14 + 8 * v12[1]);
    float v18 = _simd_orient_pf2((simd_float2)v15, (simd_float2)v16, (simd_float2)v17);
    if (v18 == 0.0)
    {
      float32x2_t v19 = vsub_f32(v16, v15);
      int32x2_t v20 = (int32x2_t)vmul_f32(v19, v19);
      float32x2_t v21 = vsub_f32(v17, v15);
      int32x2_t v22 = (int32x2_t)vmul_f32(v21, v21);
      float32x2_t v23 = vadd_f32((float32x2_t)vzip1_s32(v20, v22), (float32x2_t)vzip2_s32(v20, v22));
      if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v23, 1), v23).u8[0] & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    if (v18 > 0.0)
    {
LABEL_6:
      ++v12;
      uint64_t v11 = v13;
    }
  }
LABEL_7:
  uint64_t v24 = **a2;
  float32x2_t v25 = (float32x2_t)*a2[1];
  float32x2_t v26 = *(float32x2_t *)(v24 + 8 * *v12);
  float32x2_t v27 = *(float32x2_t *)(v24 + 8 * *a4);
  float v28 = _simd_orient_pf2((simd_float2)v25, (simd_float2)v26, (simd_float2)v27);
  if (v28 == 0.0)
  {
    float32x2_t v29 = vsub_f32(v26, v25);
    int32x2_t v30 = (int32x2_t)vmul_f32(v29, v29);
    float32x2_t v31 = vsub_f32(v27, v25);
    int32x2_t v32 = (int32x2_t)vmul_f32(v31, v31);
    float32x2_t v33 = vadd_f32((float32x2_t)vzip1_s32(v30, v32), (float32x2_t)vzip2_s32(v30, v32));
    if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v33, 1), v33).u32[0]) {
      return;
    }
  }
  else if (v28 > 0.0)
  {
    return;
  }
  uint64_t v34 = *a4;
  *a4 = *v12;
  if (v7 >= v11)
  {
    while (1)
    {
      uint64_t v36 = 2 * v11;
      uint64_t v11 = (2 * v11) | 1;
      float32x2_t v35 = (unsigned int *)(a1 + 4 * v11);
      uint64_t v37 = v36 + 2;
      if (v36 + 2 < a3)
      {
        uint64_t v38 = **a2;
        float32x2_t v39 = (float32x2_t)*a2[1];
        float32x2_t v40 = *(float32x2_t *)(v38 + 8 * *v35);
        float32x2_t v41 = *(float32x2_t *)(v38 + 8 * v35[1]);
        float v42 = _simd_orient_pf2((simd_float2)v39, (simd_float2)v40, (simd_float2)v41);
        if (v42 != 0.0)
        {
          if (v42 <= 0.0) {
            goto LABEL_19;
          }
LABEL_18:
          ++v35;
          uint64_t v11 = v37;
          goto LABEL_19;
        }
        float32x2_t v43 = vsub_f32(v40, v39);
        int32x2_t v44 = (int32x2_t)vmul_f32(v43, v43);
        float32x2_t v45 = vsub_f32(v41, v39);
        int32x2_t v46 = (int32x2_t)vmul_f32(v45, v45);
        float32x2_t v47 = vadd_f32((float32x2_t)vzip1_s32(v44, v46), (float32x2_t)vzip2_s32(v44, v46));
        if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v47, 1), v47).u8[0]) {
          goto LABEL_18;
        }
      }
LABEL_19:
      uint64_t v48 = **a2;
      float32x2_t v49 = (float32x2_t)*a2[1];
      float32x2_t v50 = *(float32x2_t *)(v48 + 8 * *v35);
      float32x2_t v51 = *(float32x2_t *)(v48 + 8 * v34);
      float v52 = _simd_orient_pf2((simd_float2)v49, (simd_float2)v50, (simd_float2)v51);
      if (v52 == 0.0)
      {
        float32x2_t v53 = vsub_f32(v50, v49);
        int32x2_t v54 = (int32x2_t)vmul_f32(v53, v53);
        float32x2_t v55 = vsub_f32(v51, v49);
        int32x2_t v56 = (int32x2_t)vmul_f32(v55, v55);
        float32x2_t v57 = vadd_f32((float32x2_t)vzip1_s32(v54, v56), (float32x2_t)vzip2_s32(v54, v56));
        if (vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v57, 1), v57).u32[0]) {
          break;
        }
      }
      else if (v52 > 0.0)
      {
        break;
      }
      *uint64_t v12 = *v35;
      uint64_t v12 = v35;
      if (v7 < v11) {
        goto LABEL_13;
      }
    }
  }
  float32x2_t v35 = v12;
LABEL_13:
  *float32x2_t v35 = v34;
}

unsigned int *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1;
    a1 += v6 + 1;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 >= a3) {
      goto LABEL_8;
    }
    uint64_t v12 = **a2;
    float32x2_t v13 = (float32x2_t)*a2[1];
    float32x2_t v14 = *(float32x2_t *)(v12 + 8 * *a1);
    float32x2_t v15 = *(float32x2_t *)(v12 + 8 * a1[1]);
    float v16 = _simd_orient_pf2((simd_float2)v13, (simd_float2)v14, (simd_float2)v15);
    if (v16 == 0.0)
    {
      float32x2_t v17 = vsub_f32(v14, v13);
      int32x2_t v18 = (int32x2_t)vmul_f32(v17, v17);
      float32x2_t v19 = vsub_f32(v15, v13);
      int32x2_t v20 = (int32x2_t)vmul_f32(v19, v19);
      float32x2_t v21 = vadd_f32((float32x2_t)vzip1_s32(v18, v20), (float32x2_t)vzip2_s32(v18, v20));
      if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v21, 1), v21).u32[0] & 1) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      ++a1;
      uint64_t v6 = v11;
      goto LABEL_8;
    }
    if (v16 > 0.0) {
      goto LABEL_7;
    }
LABEL_8:
    _DWORD *v9 = *a1;
  }
  while (v6 <= v8);
  return a1;
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<float>(unsigned long,geom::vector_type<float,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (_DWORD *)(a1 + 4 * (v4 >> 1));
    uint64_t v10 = **a3;
    float32x2_t v11 = (float32x2_t)*a3[1];
    float32x2_t v12 = *(float32x2_t *)(v10 + 8 * *v9);
    float32x2_t v13 = *(float32x2_t *)(v10 + 8 * *(unsigned int *)(a2 - 4));
    float v14 = _simd_orient_pf2((simd_float2)v11, (simd_float2)v12, (simd_float2)v13);
    if (v14 == 0.0)
    {
      float32x2_t v15 = vsub_f32(v12, v11);
      int32x2_t v16 = (int32x2_t)vmul_f32(v15, v15);
      float32x2_t v17 = vsub_f32(v13, v11);
      int32x2_t v18 = (int32x2_t)vmul_f32(v17, v17);
      float32x2_t v19 = vadd_f32((float32x2_t)vzip1_s32(v16, v18), (float32x2_t)vzip2_s32(v16, v18));
      if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v19, 1), v19).u32[0] & 1) == 0) {
        return;
      }
    }
    else if (v14 <= 0.0)
    {
      return;
    }
    uint64_t v20 = *(unsigned int *)(a2 - 4);
    *(_DWORD *)(a2 - 4) = *v9;
    if (v4 >= 2)
    {
      do
      {
        unint64_t v22 = v8 - 1;
        unint64_t v8 = (v8 - 1) >> 1;
        float32x2_t v21 = (_DWORD *)(a1 + 4 * v8);
        uint64_t v23 = **a3;
        float32x2_t v24 = (float32x2_t)*a3[1];
        float32x2_t v25 = *(float32x2_t *)(v23 + 8 * *v21);
        float32x2_t v26 = *(float32x2_t *)(v23 + 8 * v20);
        float v27 = _simd_orient_pf2((simd_float2)v24, (simd_float2)v25, (simd_float2)v26);
        if (v27 == 0.0)
        {
          float32x2_t v28 = vsub_f32(v25, v24);
          int32x2_t v29 = (int32x2_t)vmul_f32(v28, v28);
          float32x2_t v30 = vsub_f32(v26, v24);
          int32x2_t v31 = (int32x2_t)vmul_f32(v30, v30);
          float32x2_t v32 = vadd_f32((float32x2_t)vzip1_s32(v29, v31), (float32x2_t)vzip2_s32(v29, v31));
          if ((vcgt_f32((float32x2_t)vdup_lane_s32((int32x2_t)v32, 1), v32).u32[0] & 1) == 0) {
            goto LABEL_7;
          }
        }
        else if (v27 <= 0.0)
        {
          goto LABEL_7;
        }
        _DWORD *v9 = *v21;
        uint64_t v9 = (_DWORD *)(a1 + 4 * v8);
      }
      while (v22 > 1);
    }
    else
    {
LABEL_7:
      float32x2_t v21 = v9;
    }
    *float32x2_t v21 = v20;
  }
}

void std::__introsort<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,false>(unsigned int *a1, unsigned int *a2, uint64_t **a3, uint64_t a4, char a5)
{
void std::__insertion_sort[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  if (a1 == a2) {
    return;
  }
  char v5 = a1 + 1;
  if (a1 + 1 == a2) {
    return;
  }
  uint64_t v7 = 0;
  unint64_t v8 = a1;
  do
  {
    uint64_t v9 = v8;
    unint64_t v8 = v5;
    uint64_t v10 = **a3;
    float64x2_t v29 = *(float64x2_t *)(v10 + 16 * *v9);
    float64x2_t v31 = *(float64x2_t *)a3[1];
    float64x2_t v27 = *(float64x2_t *)(v10 + 16 * v9[1]);
    double v11 = _simd_orient_pd2((simd_double2)v31, (simd_double2)v27, (simd_double2)v29);
    if (v11 == 0.0)
    {
      float64x2_t v12 = vsubq_f64(v27, v31);
      int64x2_t v13 = (int64x2_t)vmulq_f64(v12, v12);
      float64x2_t v14 = vsubq_f64(v29, v31);
      int64x2_t v15 = (int64x2_t)vmulq_f64(v14, v14);
      float64x2_t v16 = vaddq_f64((float64x2_t)vzip1q_s64(v13, v15), (float64x2_t)vzip2q_s64(v13, v15));
      if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v16, 1), v16)).u32[0] & 1) == 0) {
        goto LABEL_18;
      }
    }
    else if (v11 <= 0.0)
    {
      goto LABEL_18;
    }
    uint64_t v17 = v9[1];
    v9[1] = *v9;
    unsigned int v18 = a1;
    if (v9 == a1) {
      goto LABEL_17;
    }
    uint64_t v19 = v7;
    while (1)
    {
      uint64_t v20 = **a3;
      float64x2_t v30 = *(float64x2_t *)(v20 + 16 * *(unsigned int *)((char *)a1 + v19 - 4));
      float64x2_t v32 = *(float64x2_t *)a3[1];
      float64x2_t v28 = *(float64x2_t *)(v20 + 16 * v17);
      double v21 = _simd_orient_pd2((simd_double2)v32, (simd_double2)v28, (simd_double2)v30);
      if (v21 == 0.0)
      {
        float64x2_t v22 = vsubq_f64(v28, v32);
        int64x2_t v23 = (int64x2_t)vmulq_f64(v22, v22);
        float64x2_t v24 = vsubq_f64(v30, v32);
        int64x2_t v25 = (int64x2_t)vmulq_f64(v24, v24);
        float64x2_t v26 = vaddq_f64((float64x2_t)vzip1q_s64(v23, v25), (float64x2_t)vzip2q_s64(v23, v25));
        if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1), v26)).u32[0] & 1) == 0)
        {
          unsigned int v18 = v9;
          goto LABEL_17;
        }
        goto LABEL_14;
      }
      if (v21 <= 0.0) {
        break;
      }
LABEL_14:
      --v9;
      *(unsigned int *)((char *)a1 + v19) = *(unsigned int *)((char *)a1 + v19 - 4);
      v19 -= 4;
      if (!v19)
      {
        unsigned int v18 = a1;
        goto LABEL_17;
      }
    }
    unsigned int v18 = (unsigned int *)((char *)a1 + v19);
LABEL_17:
    *unsigned int v18 = v17;
LABEL_18:
    char v5 = v8 + 1;
    v7 += 4;
  }
  while (v8 + 1 != a2);
}

void std::__insertion_sort_unguarded[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  if (a1 != a2)
  {
    unint64_t v4 = a1;
    for (uint64_t i = a1 + 1; v4 + 1 != a2; uint64_t i = v4 + 1)
    {
      uint64_t v7 = v4;
      unint64_t v4 = i;
      uint64_t v8 = **a3;
      float64x2_t v27 = *(float64x2_t *)(v8 + 16 * *v7);
      float64x2_t v29 = *(float64x2_t *)a3[1];
      float64x2_t v25 = *(float64x2_t *)(v8 + 16 * v7[1]);
      double v9 = _simd_orient_pd2((simd_double2)v29, (simd_double2)v25, (simd_double2)v27);
      if (v9 == 0.0)
      {
        float64x2_t v10 = vsubq_f64(v25, v29);
        int64x2_t v11 = (int64x2_t)vmulq_f64(v10, v10);
        float64x2_t v12 = vsubq_f64(v27, v29);
        int64x2_t v13 = (int64x2_t)vmulq_f64(v12, v12);
        float64x2_t v14 = vaddq_f64((float64x2_t)vzip1q_s64(v11, v13), (float64x2_t)vzip2q_s64(v11, v13));
        if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v14, 1), v14)).u32[0]) {
          goto LABEL_7;
        }
      }
      else if (v9 > 0.0)
      {
LABEL_7:
        uint64_t v15 = *v4;
        do
        {
          while (1)
          {
            float64x2_t v16 = v7;
            v7[1] = *v7;
            unsigned int v17 = *--v7;
            uint64_t v18 = **a3;
            float64x2_t v28 = *(float64x2_t *)(v18 + 16 * v17);
            float64x2_t v30 = *(float64x2_t *)a3[1];
            float64x2_t v26 = *(float64x2_t *)(v18 + 16 * v15);
            double v19 = _simd_orient_pd2((simd_double2)v30, (simd_double2)v26, (simd_double2)v28);
            if (v19 != 0.0) {
              break;
            }
            float64x2_t v20 = vsubq_f64(v26, v30);
            int64x2_t v21 = (int64x2_t)vmulq_f64(v20, v20);
            float64x2_t v22 = vsubq_f64(v28, v30);
            int64x2_t v23 = (int64x2_t)vmulq_f64(v22, v22);
            float64x2_t v24 = vaddq_f64((float64x2_t)vzip1q_s64(v21, v23), (float64x2_t)vzip2q_s64(v21, v23));
            if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v24, 1), v24)).u32[0] & 1) == 0) {
              goto LABEL_12;
            }
          }
        }
        while (v19 > 0.0);
LABEL_12:
        *float64x2_t v16 = v15;
      }
    }
  }
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t **a4)
{
  char v6 = a2;
  uint64_t v7 = a1;
  uint64_t v8 = **a4;
  float64x2_t v52 = *(float64x2_t *)(v8 + 16 * *a1);
  float64x2_t v57 = *(float64x2_t *)a4[1];
  float64x2_t v47 = *(float64x2_t *)(v8 + 16 * *a2);
  double v9 = _simd_orient_pd2((simd_double2)v57, (simd_double2)v47, (simd_double2)v52);
  if (v9 != 0.0)
  {
    if (v9 > 0.0) {
      goto LABEL_3;
    }
LABEL_7:
    uint64_t v23 = **a4;
    float64x2_t v54 = *(float64x2_t *)(v23 + 16 * *v6);
    float64x2_t v59 = *(float64x2_t *)a4[1];
    float64x2_t v49 = *(float64x2_t *)(v23 + 16 * *a3);
    double v24 = _simd_orient_pd2((simd_double2)v59, (simd_double2)v49, (simd_double2)v54);
    if (v24 == 0.0)
    {
      float64x2_t v25 = vsubq_f64(v49, v59);
      int64x2_t v26 = (int64x2_t)vmulq_f64(v25, v25);
      float64x2_t v27 = vsubq_f64(v54, v59);
      int64x2_t v28 = (int64x2_t)vmulq_f64(v27, v27);
      float64x2_t v29 = vaddq_f64((float64x2_t)vzip1q_s64(v26, v28), (float64x2_t)vzip2q_s64(v26, v28));
      if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v29, 1), v29)).u32[0]) {
        goto LABEL_9;
      }
    }
    else if (v24 > 0.0)
    {
LABEL_9:
      unsigned int v30 = *v6;
      *char v6 = *a3;
      *a3 = v30;
      uint64_t v31 = **a4;
      float64x2_t v55 = *(float64x2_t *)(v31 + 16 * *v7);
      float64x2_t v60 = *(float64x2_t *)a4[1];
      float64x2_t v50 = *(float64x2_t *)(v31 + 16 * *v6);
      double v32 = _simd_orient_pd2((simd_double2)v60, (simd_double2)v50, (simd_double2)v55);
      if (v32 == 0.0)
      {
        float64x2_t v33 = vsubq_f64(v50, v60);
        int64x2_t v34 = (int64x2_t)vmulq_f64(v33, v33);
        float64x2_t v35 = vsubq_f64(v55, v60);
        int64x2_t v36 = (int64x2_t)vmulq_f64(v35, v35);
        float64x2_t v37 = vaddq_f64((float64x2_t)vzip1q_s64(v34, v36), (float64x2_t)vzip2q_s64(v34, v36));
        if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v37, 1), v37)).u32[0] & 1) == 0) {
          return 1;
        }
      }
      else if (v32 <= 0.0)
      {
        return 1;
      }
      uint64_t result = 2;
LABEL_23:
      unsigned int v46 = *v7;
      *uint64_t v7 = *v6;
      *char v6 = v46;
      return result;
    }
    return 0;
  }
  float64x2_t v10 = vsubq_f64(v47, v57);
  int64x2_t v11 = (int64x2_t)vmulq_f64(v10, v10);
  float64x2_t v12 = vsubq_f64(v52, v57);
  int64x2_t v13 = (int64x2_t)vmulq_f64(v12, v12);
  float64x2_t v14 = vaddq_f64((float64x2_t)vzip1q_s64(v11, v13), (float64x2_t)vzip2q_s64(v11, v13));
  if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v14, 1), v14)).u8[0] & 1) == 0) {
    goto LABEL_7;
  }
LABEL_3:
  uint64_t v15 = **a4;
  float64x2_t v53 = *(float64x2_t *)(v15 + 16 * *v6);
  float64x2_t v58 = *(float64x2_t *)a4[1];
  float64x2_t v48 = *(float64x2_t *)(v15 + 16 * *a3);
  double v16 = _simd_orient_pd2((simd_double2)v58, (simd_double2)v48, (simd_double2)v53);
  if (v16 == 0.0)
  {
    float64x2_t v17 = vsubq_f64(v48, v58);
    int64x2_t v18 = (int64x2_t)vmulq_f64(v17, v17);
    float64x2_t v19 = vsubq_f64(v53, v58);
    int64x2_t v20 = (int64x2_t)vmulq_f64(v19, v19);
    float64x2_t v21 = vaddq_f64((float64x2_t)vzip1q_s64(v18, v20), (float64x2_t)vzip2q_s64(v18, v20));
    if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v21, 1), v21)).u32[0])
    {
LABEL_5:
      uint64_t result = 1;
LABEL_22:
      char v6 = a3;
      goto LABEL_23;
    }
  }
  else if (v16 > 0.0)
  {
    goto LABEL_5;
  }
  uint64_t v38 = *v7;
  *uint64_t v7 = *v6;
  *char v6 = v38;
  uint64_t v39 = **a4;
  float64x2_t v56 = *(float64x2_t *)(v39 + 16 * v38);
  float64x2_t v61 = *(float64x2_t *)a4[1];
  float64x2_t v51 = *(float64x2_t *)(v39 + 16 * *a3);
  double v40 = _simd_orient_pd2((simd_double2)v61, (simd_double2)v51, (simd_double2)v56);
  if (v40 == 0.0)
  {
    float64x2_t v41 = vsubq_f64(v51, v61);
    int64x2_t v42 = (int64x2_t)vmulq_f64(v41, v41);
    float64x2_t v43 = vsubq_f64(v56, v61);
    int64x2_t v44 = (int64x2_t)vmulq_f64(v43, v43);
    float64x2_t v45 = vaddq_f64((float64x2_t)vzip1q_s64(v42, v44), (float64x2_t)vzip2q_s64(v42, v44));
    if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v45, 1), v45)).u32[0] & 1) == 0) {
      return 1;
    }
LABEL_21:
    uint64_t result = 2;
    uint64_t v7 = v6;
    goto LABEL_22;
  }
  if (v40 > 0.0) {
    goto LABEL_21;
  }
  return 1;
}

unsigned int *std::__partition_with_equals_on_left[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  unint64_t v4 = a2;
  uint64_t v6 = *a1;
  uint64_t v7 = **a3;
  float64x2_t v60 = *(float64x2_t *)(v7 + 16 * *(a2 - 1));
  float64x2_t v66 = *(float64x2_t *)a3[1];
  float64x2_t v54 = *(float64x2_t *)(v7 + 16 * v6);
  double v8 = _simd_orient_pd2((simd_double2)v66, (simd_double2)v54, (simd_double2)v60);
  if (v8 == 0.0)
  {
    float64x2_t v9 = vsubq_f64(v54, v66);
    int64x2_t v10 = (int64x2_t)vmulq_f64(v9, v9);
    float64x2_t v11 = vsubq_f64(v60, v66);
    int64x2_t v12 = (int64x2_t)vmulq_f64(v11, v11);
    float64x2_t v13 = vaddq_f64((float64x2_t)vzip1q_s64(v10, v12), (float64x2_t)vzip2q_s64(v10, v12));
    if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v13, 1), v13)).u32[0])
    {
LABEL_3:
      for (uint64_t i = a1 + 1; ; ++i)
      {
        uint64_t v15 = **a3;
        float64x2_t v61 = *(float64x2_t *)(v15 + 16 * *i);
        float64x2_t v67 = *(float64x2_t *)a3[1];
        float64x2_t v55 = *(float64x2_t *)(v15 + 16 * v6);
        double v16 = _simd_orient_pd2((simd_double2)v67, (simd_double2)v55, (simd_double2)v61);
        if (v16 == 0.0)
        {
          float64x2_t v17 = vsubq_f64(v55, v67);
          int64x2_t v18 = (int64x2_t)vmulq_f64(v17, v17);
          float64x2_t v19 = vsubq_f64(v61, v67);
          int64x2_t v20 = (int64x2_t)vmulq_f64(v19, v19);
          float64x2_t v21 = vaddq_f64((float64x2_t)vzip1q_s64(v18, v20), (float64x2_t)vzip2q_s64(v18, v20));
          if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v21, 1), v21)).u32[0]) {
            goto LABEL_17;
          }
        }
        else if (v16 > 0.0)
        {
          goto LABEL_17;
        }
      }
    }
  }
  else if (v8 > 0.0)
  {
    goto LABEL_3;
  }
  for (uint64_t i = a1 + 1; i < v4; ++i)
  {
    uint64_t v22 = **a3;
    float64x2_t v62 = *(float64x2_t *)(v22 + 16 * *i);
    float64x2_t v68 = *(float64x2_t *)a3[1];
    float64x2_t v56 = *(float64x2_t *)(v22 + 16 * v6);
    double v23 = _simd_orient_pd2((simd_double2)v68, (simd_double2)v56, (simd_double2)v62);
    if (v23 == 0.0)
    {
      float64x2_t v24 = vsubq_f64(v56, v68);
      int64x2_t v25 = (int64x2_t)vmulq_f64(v24, v24);
      float64x2_t v26 = vsubq_f64(v62, v68);
      int64x2_t v27 = (int64x2_t)vmulq_f64(v26, v26);
      float64x2_t v28 = vaddq_f64((float64x2_t)vzip1q_s64(v25, v27), (float64x2_t)vzip2q_s64(v25, v27));
      if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v28, 1), v28)).u32[0]) {
        break;
      }
    }
    else if (v23 > 0.0)
    {
      break;
    }
  }
LABEL_17:
  if (i >= v4) {
    goto LABEL_32;
  }
  do
  {
    while (1)
    {
      unsigned int v29 = *--v4;
      uint64_t v30 = **a3;
      float64x2_t v63 = *(float64x2_t *)(v30 + 16 * v29);
      float64x2_t v69 = *(float64x2_t *)a3[1];
      float64x2_t v57 = *(float64x2_t *)(v30 + 16 * v6);
      double v31 = _simd_orient_pd2((simd_double2)v69, (simd_double2)v57, (simd_double2)v63);
      if (v31 != 0.0) {
        break;
      }
      float64x2_t v32 = vsubq_f64(v57, v69);
      int64x2_t v33 = (int64x2_t)vmulq_f64(v32, v32);
      float64x2_t v34 = vsubq_f64(v63, v69);
      int64x2_t v35 = (int64x2_t)vmulq_f64(v34, v34);
      float64x2_t v36 = vaddq_f64((float64x2_t)vzip1q_s64(v33, v35), (float64x2_t)vzip2q_s64(v33, v35));
      if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v36, 1), v36)).u32[0] & 1) == 0) {
        goto LABEL_32;
      }
    }
  }
  while (v31 > 0.0);
LABEL_32:
  if (i < v4)
  {
    unsigned int v37 = *i;
    *i++ = *v4;
    unsigned int *v4 = v37;
    while (1)
    {
      uint64_t v38 = **a3;
      float64x2_t v64 = *(float64x2_t *)(v38 + 16 * *i);
      float64x2_t v70 = *(float64x2_t *)a3[1];
      float64x2_t v58 = *(float64x2_t *)(v38 + 16 * v6);
      double v39 = _simd_orient_pd2((simd_double2)v70, (simd_double2)v58, (simd_double2)v64);
      if (v39 == 0.0)
      {
        float64x2_t v40 = vsubq_f64(v58, v70);
        int64x2_t v41 = (int64x2_t)vmulq_f64(v40, v40);
        float64x2_t v42 = vsubq_f64(v64, v70);
        int64x2_t v43 = (int64x2_t)vmulq_f64(v42, v42);
        float64x2_t v44 = vaddq_f64((float64x2_t)vzip1q_s64(v41, v43), (float64x2_t)vzip2q_s64(v41, v43));
        if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v44, 1), v44)).u8[0])
        {
          do
          {
LABEL_30:
            while (1)
            {
              unsigned int v45 = *--v4;
              uint64_t v46 = **a3;
              float64x2_t v65 = *(float64x2_t *)(v46 + 16 * v45);
              float64x2_t v71 = *(float64x2_t *)a3[1];
              float64x2_t v59 = *(float64x2_t *)(v46 + 16 * v6);
              double v47 = _simd_orient_pd2((simd_double2)v71, (simd_double2)v59, (simd_double2)v65);
              if (v47 == 0.0) {
                break;
              }
              if (v47 <= 0.0) {
                goto LABEL_32;
              }
            }
            float64x2_t v48 = vsubq_f64(v59, v71);
            int64x2_t v49 = (int64x2_t)vmulq_f64(v48, v48);
            float64x2_t v50 = vsubq_f64(v65, v71);
            int64x2_t v51 = (int64x2_t)vmulq_f64(v50, v50);
            float64x2_t v52 = vaddq_f64((float64x2_t)vzip1q_s64(v49, v51), (float64x2_t)vzip2q_s64(v49, v51));
          }
          while ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v52, 1), v52)).u32[0] & 1) != 0);
          goto LABEL_32;
        }
      }
      else if (v39 > 0.0)
      {
        goto LABEL_30;
      }
      ++i;
    }
  }
  if (i - 1 != a1) {
    *a1 = *(i - 1);
  }
  *(i - 1) = v6;
  return i;
}

unsigned int *std::__partition_with_equals_on_right[abi:nn180100]<std::_ClassicAlgPolicy,unsigned int *,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = *a1;
  while (1)
  {
    uint64_t v8 = **a3;
    float64x2_t v58 = *(float64x2_t *)(v8 + 16 * v7);
    float64x2_t v63 = *(float64x2_t *)a3[1];
    float64x2_t v53 = *(float64x2_t *)(v8 + 16 * a1[v6 + 1]);
    double v9 = _simd_orient_pd2((simd_double2)v63, (simd_double2)v53, (simd_double2)v58);
    if (v9 != 0.0) {
      break;
    }
    float64x2_t v10 = vsubq_f64(v53, v63);
    int64x2_t v11 = (int64x2_t)vmulq_f64(v10, v10);
    float64x2_t v12 = vsubq_f64(v58, v63);
    int64x2_t v13 = (int64x2_t)vmulq_f64(v12, v12);
    float64x2_t v14 = vaddq_f64((float64x2_t)vzip1q_s64(v11, v13), (float64x2_t)vzip2q_s64(v11, v13));
    if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v14, 1), v14)).u32[0] & 1) == 0) {
      goto LABEL_7;
    }
LABEL_6:
    ++v6;
  }
  if (v9 > 0.0) {
    goto LABEL_6;
  }
LABEL_7:
  uint64_t v15 = &a1[v6];
  unint64_t v16 = (unint64_t)&a1[v6 + 1];
  if (v6 * 4)
  {
    do
    {
      while (1)
      {
        unsigned int v17 = *--a2;
        uint64_t v18 = **a3;
        float64x2_t v59 = *(float64x2_t *)(v18 + 16 * v7);
        float64x2_t v64 = *(float64x2_t *)a3[1];
        float64x2_t v54 = *(float64x2_t *)(v18 + 16 * v17);
        double v19 = _simd_orient_pd2((simd_double2)v64, (simd_double2)v54, (simd_double2)v59);
        if (v19 != 0.0) {
          break;
        }
        float64x2_t v20 = vsubq_f64(v54, v64);
        int64x2_t v21 = (int64x2_t)vmulq_f64(v20, v20);
        float64x2_t v22 = vsubq_f64(v59, v64);
        int64x2_t v23 = (int64x2_t)vmulq_f64(v22, v22);
        float64x2_t v24 = vaddq_f64((float64x2_t)vzip1q_s64(v21, v23), (float64x2_t)vzip2q_s64(v21, v23));
        if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v24, 1), v24)).u32[0]) {
          goto LABEL_22;
        }
      }
    }
    while (v19 <= 0.0);
  }
  else
  {
    do
    {
      if (v16 >= (unint64_t)a2) {
        break;
      }
      while (1)
      {
        unsigned int v25 = *--a2;
        uint64_t v26 = **a3;
        float64x2_t v60 = *(float64x2_t *)(v26 + 16 * v7);
        float64x2_t v65 = *(float64x2_t *)a3[1];
        float64x2_t v55 = *(float64x2_t *)(v26 + 16 * v25);
        double v27 = _simd_orient_pd2((simd_double2)v65, (simd_double2)v55, (simd_double2)v60);
        if (v27 == 0.0) {
          break;
        }
        if (v27 > 0.0 || v16 >= (unint64_t)a2) {
          goto LABEL_22;
        }
      }
      float64x2_t v29 = vsubq_f64(v55, v65);
      int64x2_t v30 = (int64x2_t)vmulq_f64(v29, v29);
      float64x2_t v31 = vsubq_f64(v60, v65);
      int64x2_t v32 = (int64x2_t)vmulq_f64(v31, v31);
      float64x2_t v33 = vaddq_f64((float64x2_t)vzip1q_s64(v30, v32), (float64x2_t)vzip2q_s64(v30, v32));
    }
    while ((vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v33, 1), v33))).u32[0] & 1) != 0);
  }
LABEL_22:
  if (v16 >= (unint64_t)a2) {
    goto LABEL_35;
  }
  float64x2_t v34 = &a1[v6 + 1];
  int64x2_t v35 = a2;
  while (2)
  {
    unsigned int v36 = *v34;
    *v34++ = *v35;
    *int64x2_t v35 = v36;
    while (2)
    {
      uint64_t v37 = **a3;
      float64x2_t v61 = *(float64x2_t *)(v37 + 16 * v7);
      float64x2_t v66 = *(float64x2_t *)a3[1];
      float64x2_t v56 = *(float64x2_t *)(v37 + 16 * *v34);
      double v38 = _simd_orient_pd2((simd_double2)v66, (simd_double2)v56, (simd_double2)v61);
      if (v38 != 0.0)
      {
        if (v38 <= 0.0) {
          goto LABEL_31;
        }
        goto LABEL_29;
      }
      float64x2_t v39 = vsubq_f64(v56, v66);
      int64x2_t v40 = (int64x2_t)vmulq_f64(v39, v39);
      float64x2_t v41 = vsubq_f64(v61, v66);
      int64x2_t v42 = (int64x2_t)vmulq_f64(v41, v41);
      float64x2_t v43 = vaddq_f64((float64x2_t)vzip1q_s64(v40, v42), (float64x2_t)vzip2q_s64(v40, v42));
      if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v43, 1), v43)).u8[0])
      {
LABEL_29:
        ++v34;
        continue;
      }
      break;
    }
    do
    {
LABEL_31:
      while (1)
      {
        unsigned int v44 = *--v35;
        uint64_t v45 = **a3;
        float64x2_t v62 = *(float64x2_t *)(v45 + 16 * v7);
        float64x2_t v67 = *(float64x2_t *)a3[1];
        float64x2_t v57 = *(float64x2_t *)(v45 + 16 * v44);
        double v46 = _simd_orient_pd2((simd_double2)v67, (simd_double2)v57, (simd_double2)v62);
        if (v46 == 0.0) {
          break;
        }
        if (v46 > 0.0) {
          goto LABEL_33;
        }
      }
      float64x2_t v47 = vsubq_f64(v57, v67);
      int64x2_t v48 = (int64x2_t)vmulq_f64(v47, v47);
      float64x2_t v49 = vsubq_f64(v62, v67);
      int64x2_t v50 = (int64x2_t)vmulq_f64(v49, v49);
      float64x2_t v51 = vaddq_f64((float64x2_t)vzip1q_s64(v48, v50), (float64x2_t)vzip2q_s64(v48, v50));
    }
    while ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v51, 1), v51)).u32[0] & 1) == 0);
LABEL_33:
    if (v34 < v35) {
      continue;
    }
    break;
  }
  uint64_t v15 = v34 - 1;
LABEL_35:
  if (v15 != a1) {
    *a1 = *v15;
  }
  unsigned int *v15 = v7;
  return v15;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, uint64_t **a3)
{
  uint64_t v6 = a2 - a1;
  BOOL result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      uint64_t v8 = **a3;
      float64x2_t v40 = *(float64x2_t *)(v8 + 16 * *a1);
      float64x2_t v43 = *(float64x2_t *)a3[1];
      float64x2_t v37 = *(float64x2_t *)(v8 + 16 * *(a2 - 1));
      double v9 = _simd_orient_pd2((simd_double2)v43, (simd_double2)v37, (simd_double2)v40);
      if (v9 == 0.0)
      {
        float64x2_t v10 = vsubq_f64(v37, v43);
        int64x2_t v11 = (int64x2_t)vmulq_f64(v10, v10);
        float64x2_t v12 = vsubq_f64(v40, v43);
        int64x2_t v13 = (int64x2_t)vmulq_f64(v12, v12);
        float64x2_t v14 = vaddq_f64((float64x2_t)vzip1q_s64(v11, v13), (float64x2_t)vzip2q_s64(v11, v13));
        if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v14, 1), v14)).u32[0] & 1) == 0) {
          return 1;
        }
      }
      else if (v9 <= 0.0)
      {
        return 1;
      }
      unsigned int v36 = *a1;
      *a1 = *(a2 - 1);
      *(a2 - 1) = v36;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      uint64_t v15 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a1 + 1, a1 + 2, a3);
      unint64_t v16 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      uint64_t v17 = 0;
      int v18 = 0;
      break;
  }
  while (2)
  {
    uint64_t v19 = **a3;
    float64x2_t v41 = *(float64x2_t *)(v19 + 16 * *v15);
    float64x2_t v44 = *(float64x2_t *)a3[1];
    float64x2_t v38 = *(float64x2_t *)(v19 + 16 * *v16);
    double v20 = _simd_orient_pd2((simd_double2)v44, (simd_double2)v38, (simd_double2)v41);
    if (v20 == 0.0)
    {
      float64x2_t v21 = vsubq_f64(v38, v44);
      int64x2_t v22 = (int64x2_t)vmulq_f64(v21, v21);
      float64x2_t v23 = vsubq_f64(v41, v44);
      int64x2_t v24 = (int64x2_t)vmulq_f64(v23, v23);
      float64x2_t v25 = vaddq_f64((float64x2_t)vzip1q_s64(v22, v24), (float64x2_t)vzip2q_s64(v22, v24));
      if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v25, 1), v25)).u32[0] & 1) == 0) {
        goto LABEL_21;
      }
    }
    else if (v20 <= 0.0)
    {
      goto LABEL_21;
    }
    uint64_t v26 = *v16;
    *unint64_t v16 = *v15;
    double v27 = a1;
    if (v15 == a1) {
      goto LABEL_20;
    }
    uint64_t v28 = v17;
    while (1)
    {
      uint64_t v29 = **a3;
      float64x2_t v42 = *(float64x2_t *)(v29 + 16 * *(unsigned int *)((char *)a1 + v28 + 4));
      float64x2_t v45 = *(float64x2_t *)a3[1];
      float64x2_t v39 = *(float64x2_t *)(v29 + 16 * v26);
      double v30 = _simd_orient_pd2((simd_double2)v45, (simd_double2)v39, (simd_double2)v42);
      if (v30 == 0.0)
      {
        float64x2_t v31 = vsubq_f64(v39, v45);
        int64x2_t v32 = (int64x2_t)vmulq_f64(v31, v31);
        float64x2_t v33 = vsubq_f64(v42, v45);
        int64x2_t v34 = (int64x2_t)vmulq_f64(v33, v33);
        float64x2_t v35 = vaddq_f64((float64x2_t)vzip1q_s64(v32, v34), (float64x2_t)vzip2q_s64(v32, v34));
        if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v35, 1), v35)).u32[0] & 1) == 0)
        {
          double v27 = v15;
          goto LABEL_20;
        }
        goto LABEL_17;
      }
      if (v30 <= 0.0) {
        break;
      }
LABEL_17:
      --v15;
      *(unsigned int *)((char *)a1 + v28 + 8) = *(unsigned int *)((char *)a1 + v28 + 4);
      v28 -= 4;
      if (v28 == -8)
      {
        double v27 = a1;
        goto LABEL_20;
      }
    }
    double v27 = (unsigned int *)((char *)a1 + v28 + 8);
LABEL_20:
    *double v27 = v26;
    if (++v18 != 8)
    {
LABEL_21:
      uint64_t v15 = v16;
      v17 += 4;
      if (++v16 == a2) {
        return 1;
      }
      continue;
    }
    return v16 + 1 == a2;
  }
}

void std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, uint64_t **a5)
{
  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a2, a3, a5);
  uint64_t v10 = **a5;
  float64x2_t v37 = *(float64x2_t *)(v10 + 16 * *a3);
  float64x2_t v40 = *(float64x2_t *)a5[1];
  float64x2_t v34 = *(float64x2_t *)(v10 + 16 * *a4);
  double v11 = _simd_orient_pd2((simd_double2)v40, (simd_double2)v34, (simd_double2)v37);
  if (v11 == 0.0)
  {
    float64x2_t v12 = vsubq_f64(v34, v40);
    int64x2_t v13 = (int64x2_t)vmulq_f64(v12, v12);
    float64x2_t v14 = vsubq_f64(v37, v40);
    int64x2_t v15 = (int64x2_t)vmulq_f64(v14, v14);
    float64x2_t v16 = vaddq_f64((float64x2_t)vzip1q_s64(v13, v15), (float64x2_t)vzip2q_s64(v13, v15));
    if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v16, 1), v16)).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v11 <= 0.0)
  {
    return;
  }
  unsigned int v17 = *a3;
  *a3 = *a4;
  *a4 = v17;
  uint64_t v18 = **a5;
  float64x2_t v38 = *(float64x2_t *)(v18 + 16 * *a2);
  float64x2_t v41 = *(float64x2_t *)a5[1];
  float64x2_t v35 = *(float64x2_t *)(v18 + 16 * *a3);
  double v19 = _simd_orient_pd2((simd_double2)v41, (simd_double2)v35, (simd_double2)v38);
  if (v19 == 0.0)
  {
    float64x2_t v20 = vsubq_f64(v35, v41);
    int64x2_t v21 = (int64x2_t)vmulq_f64(v20, v20);
    float64x2_t v22 = vsubq_f64(v38, v41);
    int64x2_t v23 = (int64x2_t)vmulq_f64(v22, v22);
    float64x2_t v24 = vaddq_f64((float64x2_t)vzip1q_s64(v21, v23), (float64x2_t)vzip2q_s64(v21, v23));
    if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v24, 1), v24)).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v19 <= 0.0)
  {
    return;
  }
  unsigned int v25 = *a2;
  *a2 = *a3;
  *a3 = v25;
  uint64_t v26 = **a5;
  float64x2_t v39 = *(float64x2_t *)(v26 + 16 * *a1);
  float64x2_t v42 = *(float64x2_t *)a5[1];
  float64x2_t v36 = *(float64x2_t *)(v26 + 16 * *a2);
  double v27 = _simd_orient_pd2((simd_double2)v42, (simd_double2)v36, (simd_double2)v39);
  if (v27 == 0.0)
  {
    float64x2_t v28 = vsubq_f64(v36, v42);
    int64x2_t v29 = (int64x2_t)vmulq_f64(v28, v28);
    float64x2_t v30 = vsubq_f64(v39, v42);
    int64x2_t v31 = (int64x2_t)vmulq_f64(v30, v30);
    float64x2_t v32 = vaddq_f64((float64x2_t)vzip1q_s64(v29, v31), (float64x2_t)vzip2q_s64(v29, v31));
    if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v32, 1), v32)).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v27 <= 0.0)
  {
    return;
  }
  unsigned int v33 = *a1;
  *a1 = *a2;
  *a2 = v33;
}

void std::__sort5[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, unsigned int *a4, unsigned int *a5, uint64_t **a6)
{
  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a2, a3, a4, a6);
  uint64_t v12 = **a6;
  float64x2_t v48 = *(float64x2_t *)(v12 + 16 * *a4);
  float64x2_t v52 = *(float64x2_t *)a6[1];
  float64x2_t v44 = *(float64x2_t *)(v12 + 16 * *a5);
  double v13 = _simd_orient_pd2((simd_double2)v52, (simd_double2)v44, (simd_double2)v48);
  if (v13 == 0.0)
  {
    float64x2_t v14 = vsubq_f64(v44, v52);
    int64x2_t v15 = (int64x2_t)vmulq_f64(v14, v14);
    float64x2_t v16 = vsubq_f64(v48, v52);
    int64x2_t v17 = (int64x2_t)vmulq_f64(v16, v16);
    float64x2_t v18 = vaddq_f64((float64x2_t)vzip1q_s64(v15, v17), (float64x2_t)vzip2q_s64(v15, v17));
    if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1), v18)).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v13 <= 0.0)
  {
    return;
  }
  unsigned int v19 = *a4;
  *a4 = *a5;
  *a5 = v19;
  uint64_t v20 = **a6;
  float64x2_t v49 = *(float64x2_t *)(v20 + 16 * *a3);
  float64x2_t v53 = *(float64x2_t *)a6[1];
  float64x2_t v45 = *(float64x2_t *)(v20 + 16 * *a4);
  double v21 = _simd_orient_pd2((simd_double2)v53, (simd_double2)v45, (simd_double2)v49);
  if (v21 == 0.0)
  {
    float64x2_t v22 = vsubq_f64(v45, v53);
    int64x2_t v23 = (int64x2_t)vmulq_f64(v22, v22);
    float64x2_t v24 = vsubq_f64(v49, v53);
    int64x2_t v25 = (int64x2_t)vmulq_f64(v24, v24);
    float64x2_t v26 = vaddq_f64((float64x2_t)vzip1q_s64(v23, v25), (float64x2_t)vzip2q_s64(v23, v25));
    if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1), v26)).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v21 <= 0.0)
  {
    return;
  }
  unsigned int v27 = *a3;
  *a3 = *a4;
  *a4 = v27;
  uint64_t v28 = **a6;
  float64x2_t v50 = *(float64x2_t *)(v28 + 16 * *a2);
  float64x2_t v54 = *(float64x2_t *)a6[1];
  float64x2_t v46 = *(float64x2_t *)(v28 + 16 * *a3);
  double v29 = _simd_orient_pd2((simd_double2)v54, (simd_double2)v46, (simd_double2)v50);
  if (v29 == 0.0)
  {
    float64x2_t v30 = vsubq_f64(v46, v54);
    int64x2_t v31 = (int64x2_t)vmulq_f64(v30, v30);
    float64x2_t v32 = vsubq_f64(v50, v54);
    int64x2_t v33 = (int64x2_t)vmulq_f64(v32, v32);
    float64x2_t v34 = vaddq_f64((float64x2_t)vzip1q_s64(v31, v33), (float64x2_t)vzip2q_s64(v31, v33));
    if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v34, 1), v34)).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v29 <= 0.0)
  {
    return;
  }
  unsigned int v35 = *a2;
  *a2 = *a3;
  *a3 = v35;
  uint64_t v36 = **a6;
  float64x2_t v51 = *(float64x2_t *)(v36 + 16 * *a1);
  float64x2_t v55 = *(float64x2_t *)a6[1];
  float64x2_t v47 = *(float64x2_t *)(v36 + 16 * *a2);
  double v37 = _simd_orient_pd2((simd_double2)v55, (simd_double2)v47, (simd_double2)v51);
  if (v37 == 0.0)
  {
    float64x2_t v38 = vsubq_f64(v47, v55);
    int64x2_t v39 = (int64x2_t)vmulq_f64(v38, v38);
    float64x2_t v40 = vsubq_f64(v51, v55);
    int64x2_t v41 = (int64x2_t)vmulq_f64(v40, v40);
    float64x2_t v42 = vaddq_f64((float64x2_t)vzip1q_s64(v39, v41), (float64x2_t)vzip2q_s64(v39, v41));
    if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v42, 1), v42)).u32[0] & 1) == 0) {
      return;
    }
  }
  else if (v37 <= 0.0)
  {
    return;
  }
  unsigned int v43 = *a1;
  *a1 = *a2;
  *a2 = v43;
}

unsigned int *std::__partial_sort_impl[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *,unsigned int *>(unsigned int *a1, unsigned int *a2, unsigned int *a3, uint64_t **a4)
{
  if (a1 != a2)
  {
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 5)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[v10];
      do
      {
        std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>((uint64_t)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    double v13 = a2;
    if (a2 != a3)
    {
      float64x2_t v14 = a2;
      while (1)
      {
        uint64_t v15 = **a4;
        float64x2_t v30 = *(float64x2_t *)(v15 + 16 * *a1);
        float64x2_t v31 = *(float64x2_t *)a4[1];
        float64x2_t v29 = *(float64x2_t *)(v15 + 16 * *v14);
        double v16 = _simd_orient_pd2((simd_double2)v31, (simd_double2)v29, (simd_double2)v30);
        if (v16 != 0.0) {
          break;
        }
        float64x2_t v17 = vsubq_f64(v29, v31);
        int64x2_t v18 = (int64x2_t)vmulq_f64(v17, v17);
        float64x2_t v19 = vsubq_f64(v30, v31);
        int64x2_t v20 = (int64x2_t)vmulq_f64(v19, v19);
        float64x2_t v21 = vaddq_f64((float64x2_t)vzip1q_s64(v18, v20), (float64x2_t)vzip2q_s64(v18, v20));
        if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v21, 1), v21)).u32[0]) {
          goto LABEL_9;
        }
LABEL_10:
        if (++v14 == a3)
        {
          double v13 = a3;
          goto LABEL_14;
        }
      }
      if (v16 <= 0.0) {
        goto LABEL_10;
      }
LABEL_9:
      unsigned int v22 = *v14;
      *float64x2_t v14 = *a1;
      *a1 = v22;
      std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>((uint64_t)a1, a4, v9, a1);
      goto LABEL_10;
    }
LABEL_14:
    if (v8 >= 5)
    {
      uint64_t v23 = (unint64_t)v8 >> 2;
      float64x2_t v24 = a2 - 1;
      do
      {
        unsigned int v25 = *a1;
        float64x2_t v26 = std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(a1, a4, v23);
        if (v24 == v26)
        {
          *float64x2_t v26 = v25;
        }
        else
        {
          *float64x2_t v26 = *v24;
          *float64x2_t v24 = v25;
          std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>((uint64_t)a1, (uint64_t)(v26 + 1), a4, v26 + 1 - a1);
        }
        --v24;
      }
      while (v23-- > 2);
    }
    return v13;
  }
  return a3;
}

void std::__sift_down[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(uint64_t a1, uint64_t **a2, uint64_t a3, _DWORD *a4)
{
  unint64_t v4 = a3 - 2;
  if (a3 < 2) {
    return;
  }
  uint64_t v7 = v4 >> 1;
  if ((uint64_t)(v4 >> 1) < ((uint64_t)a4 - a1) >> 2) {
    return;
  }
  uint64_t v10 = ((uint64_t)a4 - a1) >> 1;
  uint64_t v11 = v10 + 1;
  uint64_t v12 = (unsigned int *)(a1 + 4 * (v10 + 1));
  uint64_t v13 = v10 + 2;
  if (v10 + 2 < a3)
  {
    uint64_t v14 = **a2;
    float64x2_t v50 = *(float64x2_t *)(v14 + 16 * v12[1]);
    float64x2_t v54 = *(float64x2_t *)a2[1];
    float64x2_t v46 = *(float64x2_t *)(v14 + 16 * *v12);
    double v15 = _simd_orient_pd2((simd_double2)v54, (simd_double2)v46, (simd_double2)v50);
    if (v15 == 0.0)
    {
      float64x2_t v16 = vsubq_f64(v46, v54);
      int64x2_t v17 = (int64x2_t)vmulq_f64(v16, v16);
      float64x2_t v18 = vsubq_f64(v50, v54);
      int64x2_t v19 = (int64x2_t)vmulq_f64(v18, v18);
      float64x2_t v20 = vaddq_f64((float64x2_t)vzip1q_s64(v17, v19), (float64x2_t)vzip2q_s64(v17, v19));
      if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v20, 1), v20)).u8[0] & 1) == 0) {
        goto LABEL_7;
      }
      goto LABEL_6;
    }
    if (v15 > 0.0)
    {
LABEL_6:
      ++v12;
      uint64_t v11 = v13;
    }
  }
LABEL_7:
  uint64_t v21 = **a2;
  float64x2_t v51 = *(float64x2_t *)(v21 + 16 * *a4);
  float64x2_t v55 = *(float64x2_t *)a2[1];
  float64x2_t v47 = *(float64x2_t *)(v21 + 16 * *v12);
  double v22 = _simd_orient_pd2((simd_double2)v55, (simd_double2)v47, (simd_double2)v51);
  if (v22 == 0.0)
  {
    float64x2_t v23 = vsubq_f64(v47, v55);
    int64x2_t v24 = (int64x2_t)vmulq_f64(v23, v23);
    float64x2_t v25 = vsubq_f64(v51, v55);
    int64x2_t v26 = (int64x2_t)vmulq_f64(v25, v25);
    float64x2_t v27 = vaddq_f64((float64x2_t)vzip1q_s64(v24, v26), (float64x2_t)vzip2q_s64(v24, v26));
    if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v27, 1), v27)).u32[0]) {
      return;
    }
  }
  else if (v22 > 0.0)
  {
    return;
  }
  uint64_t v28 = *a4;
  *a4 = *v12;
  if (v7 >= v11)
  {
    while (1)
    {
      uint64_t v30 = 2 * v11;
      uint64_t v11 = (2 * v11) | 1;
      float64x2_t v29 = (unsigned int *)(a1 + 4 * v11);
      uint64_t v31 = v30 + 2;
      if (v30 + 2 < a3)
      {
        uint64_t v32 = **a2;
        float64x2_t v52 = *(float64x2_t *)(v32 + 16 * v29[1]);
        float64x2_t v56 = *(float64x2_t *)a2[1];
        float64x2_t v48 = *(float64x2_t *)(v32 + 16 * *v29);
        double v33 = _simd_orient_pd2((simd_double2)v56, (simd_double2)v48, (simd_double2)v52);
        if (v33 != 0.0)
        {
          if (v33 <= 0.0) {
            goto LABEL_19;
          }
LABEL_18:
          ++v29;
          uint64_t v11 = v31;
          goto LABEL_19;
        }
        float64x2_t v34 = vsubq_f64(v48, v56);
        int64x2_t v35 = (int64x2_t)vmulq_f64(v34, v34);
        float64x2_t v36 = vsubq_f64(v52, v56);
        int64x2_t v37 = (int64x2_t)vmulq_f64(v36, v36);
        float64x2_t v38 = vaddq_f64((float64x2_t)vzip1q_s64(v35, v37), (float64x2_t)vzip2q_s64(v35, v37));
        if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v38, 1), v38)).u8[0]) {
          goto LABEL_18;
        }
      }
LABEL_19:
      uint64_t v39 = **a2;
      float64x2_t v53 = *(float64x2_t *)(v39 + 16 * v28);
      float64x2_t v57 = *(float64x2_t *)a2[1];
      float64x2_t v49 = *(float64x2_t *)(v39 + 16 * *v29);
      double v40 = _simd_orient_pd2((simd_double2)v57, (simd_double2)v49, (simd_double2)v53);
      if (v40 == 0.0)
      {
        float64x2_t v41 = vsubq_f64(v49, v57);
        int64x2_t v42 = (int64x2_t)vmulq_f64(v41, v41);
        float64x2_t v43 = vsubq_f64(v53, v57);
        int64x2_t v44 = (int64x2_t)vmulq_f64(v43, v43);
        float64x2_t v45 = vaddq_f64((float64x2_t)vzip1q_s64(v42, v44), (float64x2_t)vzip2q_s64(v42, v44));
        if (vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v45, 1), v45)).u32[0]) {
          break;
        }
      }
      else if (v40 > 0.0)
      {
        break;
      }
      *uint64_t v12 = *v29;
      uint64_t v12 = v29;
      if (v7 < v11) {
        goto LABEL_13;
      }
    }
  }
  float64x2_t v29 = v12;
LABEL_13:
  *float64x2_t v29 = v28;
}

unsigned int *std::__floyd_sift_down[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(unsigned int *a1, uint64_t **a2, uint64_t a3)
{
  uint64_t v6 = 0;
  uint64_t v7 = a3 - 2;
  if (a3 < 2) {
    uint64_t v7 = a3 - 1;
  }
  uint64_t v8 = v7 >> 1;
  do
  {
    uint64_t v9 = a1;
    a1 += v6 + 1;
    uint64_t v10 = 2 * v6;
    uint64_t v6 = (2 * v6) | 1;
    uint64_t v11 = v10 + 2;
    if (v10 + 2 >= a3) {
      goto LABEL_8;
    }
    uint64_t v12 = **a2;
    float64x2_t v21 = *(float64x2_t *)(v12 + 16 * a1[1]);
    float64x2_t v22 = *(float64x2_t *)a2[1];
    float64x2_t v20 = *(float64x2_t *)(v12 + 16 * *a1);
    double v13 = _simd_orient_pd2((simd_double2)v22, (simd_double2)v20, (simd_double2)v21);
    if (v13 == 0.0)
    {
      float64x2_t v14 = vsubq_f64(v20, v22);
      int64x2_t v15 = (int64x2_t)vmulq_f64(v14, v14);
      float64x2_t v16 = vsubq_f64(v21, v22);
      int64x2_t v17 = (int64x2_t)vmulq_f64(v16, v16);
      float64x2_t v18 = vaddq_f64((float64x2_t)vzip1q_s64(v15, v17), (float64x2_t)vzip2q_s64(v15, v17));
      if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v18, 1), v18)).u32[0] & 1) == 0) {
        goto LABEL_8;
      }
LABEL_7:
      ++a1;
      uint64_t v6 = v11;
      goto LABEL_8;
    }
    if (v13 > 0.0) {
      goto LABEL_7;
    }
LABEL_8:
    _DWORD *v9 = *a1;
  }
  while (v6 <= v8);
  return a1;
}

void std::__sift_up[abi:nn180100]<std::_ClassicAlgPolicy,void geom::convex_hull_2<double>(unsigned long,geom::vector_type<double,(unsigned char)2,void>::value const*,std::vector<unsigned int> &)::{lambda(unsigned int,unsigned int)#1} &,unsigned int *>(uint64_t a1, uint64_t a2, uint64_t **a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v8 = v4 >> 1;
    uint64_t v9 = (_DWORD *)(a1 + 4 * (v4 >> 1));
    uint64_t v10 = **a3;
    float64x2_t v29 = *(float64x2_t *)(v10 + 16 * *(unsigned int *)(a2 - 4));
    float64x2_t v31 = *(float64x2_t *)a3[1];
    float64x2_t v27 = *(float64x2_t *)(v10 + 16 * *v9);
    double v11 = _simd_orient_pd2((simd_double2)v31, (simd_double2)v27, (simd_double2)v29);
    if (v11 == 0.0)
    {
      float64x2_t v12 = vsubq_f64(v27, v31);
      int64x2_t v13 = (int64x2_t)vmulq_f64(v12, v12);
      float64x2_t v14 = vsubq_f64(v29, v31);
      int64x2_t v15 = (int64x2_t)vmulq_f64(v14, v14);
      float64x2_t v16 = vaddq_f64((float64x2_t)vzip1q_s64(v13, v15), (float64x2_t)vzip2q_s64(v13, v15));
      if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v16, 1), v16)).u32[0] & 1) == 0) {
        return;
      }
    }
    else if (v11 <= 0.0)
    {
      return;
    }
    uint64_t v17 = *(unsigned int *)(a2 - 4);
    *(_DWORD *)(a2 - 4) = *v9;
    if (v4 >= 2)
    {
      do
      {
        unint64_t v19 = v8 - 1;
        unint64_t v8 = (v8 - 1) >> 1;
        float64x2_t v18 = (_DWORD *)(a1 + 4 * v8);
        uint64_t v20 = **a3;
        float64x2_t v30 = *(float64x2_t *)(v20 + 16 * v17);
        float64x2_t v32 = *(float64x2_t *)a3[1];
        float64x2_t v28 = *(float64x2_t *)(v20 + 16 * *v18);
        double v21 = _simd_orient_pd2((simd_double2)v32, (simd_double2)v28, (simd_double2)v30);
        if (v21 == 0.0)
        {
          float64x2_t v22 = vsubq_f64(v28, v32);
          int64x2_t v23 = (int64x2_t)vmulq_f64(v22, v22);
          float64x2_t v24 = vsubq_f64(v30, v32);
          int64x2_t v25 = (int64x2_t)vmulq_f64(v24, v24);
          float64x2_t v26 = vaddq_f64((float64x2_t)vzip1q_s64(v23, v25), (float64x2_t)vzip2q_s64(v23, v25));
          if ((vmovn_s64(vcgtq_f64((float64x2_t)vdupq_laneq_s64((int64x2_t)v26, 1), v26)).u32[0] & 1) == 0) {
            goto LABEL_7;
          }
        }
        else if (v21 <= 0.0)
        {
          goto LABEL_7;
        }
        _DWORD *v9 = *v18;
        uint64_t v9 = (_DWORD *)(a1 + 4 * v8);
      }
      while (v19 > 1);
    }
    else
    {
LABEL_7:
      float64x2_t v18 = v9;
    }
    *float64x2_t v18 = v17;
  }
}

BOOL geom::compute_eigendecomposition_of_symmetric_matrix<float,3ul>(__CLPK_real *__a, __CLPK_real *__w, int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  __CLPK_integer __lda = 3;
  __CLPK_integer __n = 3;
  __CLPK_integer __lwork = -1;
  if (a3) {
    char v5 = "Upper";
  }
  else {
    char v5 = "Lower";
  }
  *(void *)&v11[4] = 0;
  uint64_t v6 = ssyev_("Vectors", v5, &__n, __a, &__lda, __w, (__CLPK_real *)&v11[4], &__lwork, v10);
  __CLPK_integer __lwork = (int)*(float *)&v11[4];
  MEMORY[0x270FA5388](v6, v7);
  return ssyev_("Vectors", v5, &__n, __a, &__lda, __w, (__CLPK_real *)&v11[-v8], &__lwork, (__CLPK_integer *)&v11[8]) == 0;
}

BOOL geom::compute_eigendecomposition_of_symmetric_matrix<double,3ul>(__CLPK_doublereal *__a, __CLPK_doublereal *__w, int a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  __CLPK_integer __lda = 3;
  __CLPK_integer __n = 3;
  __CLPK_integer v12 = 0;
  __CLPK_integer __lwork = -1;
  if (a3) {
    char v5 = "Upper";
  }
  else {
    char v5 = "Lower";
  }
  __CLPK_doublereal __work = 0.0;
  uint64_t v6 = dsyev_("Vectors", v5, &__n, __a, &__lda, __w, &__work, &__lwork, v10);
  __CLPK_integer __lwork = (int)__work;
  MEMORY[0x270FA5388](v6, v7);
  return dsyev_("Vectors", v5, &__n, __a, &__lda, __w, (__CLPK_doublereal *)((char *)&__work - v8), &__lwork, &v12) == 0;
}

uint64_t geom_ddg_evaluator_create_3f(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 3 * a3;
  uint64_t v8 = geom_ddg_evaluator_3f_obj_alloc();
  geom::ddg_evaluator<float>::ddg_evaluator(v8 + 16, a2, a1, a4, v7);
  return v8;
}

uint64_t geom_ddg_evaluator_create_3d(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = 3 * a3;
  uint64_t v8 = geom_ddg_evaluator_3d_obj_alloc();
  geom::ddg_evaluator<double>::ddg_evaluator(v8 + 16, a2, a1, a4, v7);
  return v8;
}

uint64_t geom_ddg_evaluator_is_valid_3f(uint64_t a1)
{
  return geom::ddg_evaluator<float>::is_valid(a1 + 16);
}

uint64_t geom_ddg_evaluator_is_valid_3d(uint64_t a1)
{
  return geom::ddg_evaluator<float>::is_valid(a1 + 16);
}

uint64_t geom_ddg_evaluator_get_vertex_count_3f(uint64_t a1)
{
  return geom::ddg_evaluator<float>::vertex_count(a1 + 16);
}

uint64_t geom_ddg_evaluator_get_vertex_count_3d(uint64_t a1)
{
  return geom::ddg_evaluator<float>::vertex_count(a1 + 16);
}

uint64_t geom_ddg_evaluator_get_triangle_count_3f(uint64_t a1)
{
  return geom::ddg_evaluator<float>::triangle_count(a1 + 16);
}

uint64_t geom_ddg_evaluator_get_triangle_count_3d(uint64_t a1)
{
  return geom::ddg_evaluator<float>::triangle_count(a1 + 16);
}

float geom_ddg_evaluator_compute_vertex_area_3f(uint64_t a1, unsigned int a2)
{
  return geom::ddg_evaluator<float>::compute_vertex_area((uint64_t *)(a1 + 16), a2);
}

double geom_ddg_evaluator_compute_vertex_area_3d(uint64_t a1, unsigned int a2)
{
  return geom::ddg_evaluator<double>::compute_vertex_area((uint64_t *)(a1 + 16), a2);
}

void geom_ddg_evaluator_compute_laplacian_stencil_3f(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  geom::ddg_evaluator<float>::compute_laplacian_stencil((uint64_t *)(a1 + 16), a3, a2, (uint64_t)&v9);
  uint64_t v7 = (char *)geom::collection_to_vector<float>(a4);
  if (v7 != (char *)&v9) {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(v7, (char *)v9, (uint64_t)v10, (v10 - (unsigned char *)v9) >> 2);
  }
  uint64_t v8 = (char *)geom::collection_to_vector<float>(a5);
  if (v8 != (char *)&__p) {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(v8, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 2);
  }
  if (__p)
  {
    __CLPK_integer v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
}

void sub_236E7F574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t geom::ddg_evaluator<float>::stencil::~stencil(uint64_t a1)
{
  float32x4_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  long long v3 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void geom_ddg_evaluator_compute_laplacian_stencil_3d(uint64_t a1, int a2, unsigned int a3, uint64_t a4, uint64_t a5)
{
  geom::ddg_evaluator<double>::compute_laplacian_stencil((uint64_t *)(a1 + 16), a3, a2, (uint64_t)&v9);
  uint64_t v7 = (char *)geom::collection_to_vector<float>(a4);
  if (v7 != (char *)&v9) {
    std::vector<float>::__assign_with_size[abi:nn180100]<float *,float *>(v7, (char *)v9, (uint64_t)v10, (v10 - (unsigned char *)v9) >> 2);
  }
  uint64_t v8 = (char *)geom::collection_to_vector<float>(a5);
  if (v8 != (char *)&__p) {
    std::vector<double>::__assign_with_size[abi:nn180100]<double *,double *>(v8, (char *)__p, (uint64_t)v12, (v12 - (unsigned char *)__p) >> 3);
  }
  if (__p)
  {
    __CLPK_integer v12 = __p;
    operator delete(__p);
  }
  if (v9)
  {
    uint64_t v10 = v9;
    operator delete(v9);
  }
}

void sub_236E7F684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

BOOL geom_ddg_evaluator_is_boundary_vertex_3f(uint64_t a1, unsigned int a2)
{
  return geom::ddg_evaluator<float>::is_boundary_vertex(a1 + 16, a2);
}

BOOL geom_ddg_evaluator_is_boundary_vertex_3d(uint64_t a1, unsigned int a2)
{
  return geom::ddg_evaluator<float>::is_boundary_vertex(a1 + 16, a2);
}

void geom_ddg_evaluator_get_vertex_one_ring_3f(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = geom::collection_to_vector<float>(a3);
  geom::ddg_evaluator<float>::get_vertex_one_ring(a1 + 16, a2, v5);
}

void geom_ddg_evaluator_get_vertex_one_ring_3d(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = geom::collection_to_vector<float>(a3);
  geom::ddg_evaluator<float>::get_vertex_one_ring(a1 + 16, a2, v5);
}

void geom_ddg_evaluator_get_vertex_incident_faces_3f(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = geom::collection_to_vector<float>(a3);
  geom::ddg_evaluator<float>::get_vertex_incident_faces(a1 + 16, a2, v5);
}

void geom_ddg_evaluator_get_vertex_incident_faces_3d(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = geom::collection_to_vector<float>(a3);
  geom::ddg_evaluator<float>::get_vertex_incident_faces(a1 + 16, a2, v5);
}

double geom_ddg_evaluator_compute_vertex_normal_3f(uint64_t a1, unsigned int a2)
{
  return geom::ddg_evaluator<float>::compute_vertex_normal((uint64_t *)(a1 + 16), a2);
}

float64_t geom_ddg_evaluator_compute_vertex_normal_3d@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, float64x2_t *a3@<X8>)
{
  geom::ddg_evaluator<double>::compute_vertex_normal((uint64_t *)(a1 + 16), a2, v6);
  float64_t result = v6[0].f64[0];
  float64x2_t v5 = v6[1];
  *a3 = v6[0];
  a3[1] = v5;
  return result;
}

float geom_ddg_evaluator_compute_vertex_angle_defect_3f(uint64_t a1, unsigned int a2)
{
  return geom::ddg_evaluator<float>::compute_vertex_angle_defect((uint64_t *)(a1 + 16), a2);
}

double geom_ddg_evaluator_compute_vertex_angle_defect_3d(uint64_t a1, unsigned int a2)
{
  return geom::ddg_evaluator<double>::compute_vertex_angle_defect((uint64_t *)(a1 + 16), a2);
}

float geom_ddg_evaluator_compute_vertex_mean_curvature_3f(uint64_t a1, unsigned int a2)
{
  return geom::ddg_evaluator<float>::compute_vertex_mean_curvature((uint64_t *)(a1 + 16), a2);
}

double geom_ddg_evaluator_compute_vertex_mean_curvature_3d(uint64_t a1, unsigned int a2)
{
  return geom::ddg_evaluator<double>::compute_vertex_mean_curvature((uint64_t *)(a1 + 16), a2);
}

double geom_ddg_evaluator_compute_vertex_mean_curvature_vector_3f(uint64_t a1, unsigned int a2)
{
  return geom::ddg_evaluator<float>::compute_vertex_mean_curvature_vector((uint64_t *)(a1 + 16), a2);
}

double geom_ddg_evaluator_compute_vertex_mean_curvature_vector_3d@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, _OWORD *a3@<X8>)
{
  geom::ddg_evaluator<double>::compute_vertex_mean_curvature_vector((uint64_t *)(a1 + 16), a2, (uint64_t)v6);
  double result = *(double *)v6;
  long long v5 = v6[1];
  *a3 = v6[0];
  a3[1] = v5;
  return result;
}

double geom_ddg_evaluator_compute_face_gradient_3f(uint64_t a1, unsigned int a2, uint64_t a3)
{
  *(void *)&double result = geom::ddg_evaluator<float>::compute_face_gradient((uint64_t *)(a1 + 16), a2, a3).n128_u64[0];
  return result;
}

double geom_ddg_evaluator_compute_face_gradient_3d@<D0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, _OWORD *a4@<X8>)
{
  geom::ddg_evaluator<double>::compute_face_gradient((uint64_t *)(a1 + 16), a2, a3, v7);
  double result = *(double *)v7;
  long long v6 = v7[1];
  *a4 = v7[0];
  a4[1] = v6;
  return result;
}

float geom_ddg_evaluator_compute_vertex_divergence_3f(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return geom::ddg_evaluator<float>::compute_vertex_divergence(a1 + 16, a2, a3);
}

double geom_ddg_evaluator_compute_vertex_divergence_3d(uint64_t a1, unsigned int a2, uint64_t a3)
{
  return geom::ddg_evaluator<double>::compute_vertex_divergence(a1 + 16, a2, a3);
}

double geom_closest_point_to_triangle_3f(float32x4_t *a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v7 = a2;
  v6[0] = a3;
  v6[1] = a4;
  _OWORD v6[2] = a5;
  return geom::closest_point_to_triangle<float>(&v7, v6, a1);
}

float64_t geom_closest_point_to_triangle_3d@<D0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X2>, float64x2_t *a4@<X8>)
{
  float64x2_t v5 = a1[1];
  v13[0] = *a1;
  v13[1] = v5;
  float64x2_t v6 = a2[3];
  float64x2_t v12[2] = a2[2];
  v12[3] = v6;
  float64x2_t v7 = a2[5];
  v12[4] = a2[4];
  v12[5] = v7;
  float64x2_t v8 = a2[1];
  v12[0] = *a2;
  v12[1] = v8;
  geom::closest_point_to_triangle<double>(v13, v12, a3, v11);
  float64_t result = v11[0].f64[0];
  float64x2_t v10 = v11[1];
  *a4 = v11[0];
  a4[1] = v10;
  return result;
}

float64x2_t geom::closest_point_to_triangle<double>@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, uint64_t a3@<X2>, float64x2_t *a4@<X8>)
{
  float64x2_t v5 = a2[2];
  float64x2_t v4 = a2[3];
  float64x2_t result = *a2;
  float64x2_t v7 = a2[1];
  float64x2_t v8 = vsubq_f64(v5, *a2);
  float64x2_t v9 = vsubq_f64(v4, v7);
  float64x2_t v11 = a2[4];
  float64x2_t v10 = a2[5];
  float64x2_t v12 = vsubq_f64(v11, *a2);
  float64x2_t v13 = vsubq_f64(v10, v7);
  float64x2_t v15 = *a1;
  float64x2_t v14 = a1[1];
  float64x2_t v16 = vsubq_f64(*a1, *a2);
  float64x2_t v17 = vsubq_f64(v14, v7);
  double v18 = vmulq_f64(v9, v17).f64[0] + vaddvq_f64(vmulq_f64(v8, v16));
  double v19 = vmulq_f64(v13, v17).f64[0] + vaddvq_f64(vmulq_f64(v12, v16));
  if (v18 <= 0.0 && v19 <= 0.0)
  {
    if (a3)
    {
      *(_OWORD *)a3 = xmmword_236F14150;
      *(_OWORD *)(a3 + 16) = 0u;
      float64x2_t result = *a2;
      float64x2_t v7 = a2[1];
    }
LABEL_34:
    unint64_t v28 = vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
    goto LABEL_35;
  }
  float64x2_t v20 = vsubq_f64(v15, v5);
  float64x2_t v21 = vsubq_f64(v14, v4);
  double v22 = vmulq_f64(v9, v21).f64[0] + vaddvq_f64(vmulq_f64(v8, v20));
  double v23 = vmulq_f64(v13, v21).f64[0] + vaddvq_f64(vmulq_f64(v12, v20));
  if (v22 >= 0.0 && v23 <= v22)
  {
    if (a3)
    {
      v7.f64[1] = 1.0;
      *(_OWORD *)a3 = xmmword_236F14160;
      *(_OWORD *)(a3 + 16) = 0u;
      float64x2_t v5 = a2[2];
      float64x2_t v4 = a2[3];
    }
LABEL_19:
    unint64_t v28 = vextq_s8((int8x16_t)v5, (int8x16_t)v5, 8uLL).u64[0];
    result.f64[0] = v5.f64[0];
    v7.f64[0] = v4.f64[0];
    goto LABEL_35;
  }
  unint64_t v25 = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
  double v26 = v18 * v23 - v22 * v19;
  if (v18 != v22 && v22 <= 0.0 && v18 >= 0.0 && v26 <= 0.0)
  {
    v12.f64[0] = v18 / (v18 - v22);
    if (a3)
    {
      *(double *)&long long v27 = 1.0 - v12.f64[0];
      *((double *)&v27 + 1) = v18 / (v18 - v22);
      *(_OWORD *)a3 = v27;
      *(_OWORD *)(a3 + 16) = 0u;
      float64x2_t result = *a2;
      float64x2_t v7 = a2[1];
    }
    float64x2_t v7 = vmlaq_f64(v7, v9, v12);
    *(void *)&v8.f64[1] = v25;
    float64x2_t result = vmlaq_n_f64(result, v8, v12.f64[0]);
    goto LABEL_34;
  }
  float64x2_t v29 = vsubq_f64(v15, v11);
  float64x2_t v30 = vsubq_f64(v14, v10);
  double v31 = vmulq_f64(v9, v30).f64[0] + vaddvq_f64(vmulq_f64(v8, v29));
  double v32 = vmulq_f64(v13, v30).f64[0] + vaddvq_f64(vmulq_f64(v12, v29));
  if (v32 < 0.0 || v31 > v32)
  {
    unint64_t v34 = vextq_s8((int8x16_t)v12, (int8x16_t)v12, 8uLL).u64[0];
    double v35 = v31 * v19 - v18 * v32;
    if (v32 <= 0.0 && v35 <= 0.0 && v19 >= 0.0 && v19 != v32)
    {
      v8.f64[0] = v19 / (v19 - v32);
      if (a3)
      {
        *(_OWORD *)a3 = COERCE_UNSIGNED_INT64(1.0 - v8.f64[0]);
        *(float64x2_t *)(a3 + 16) = v8;
        float64x2_t result = *a2;
        float64x2_t v7 = a2[1];
      }
      float64x2_t v7 = vmlaq_f64(v7, v13, v8);
      *(void *)&v12.f64[1] = v34;
      float64x2_t result = vmlaq_n_f64(result, v12, v8.f64[0]);
      goto LABEL_34;
    }
    double v41 = v22 * v32 - v31 * v23;
    if (v41 <= 0.0)
    {
      double v42 = v23 - v22;
      if (v42 >= 0.0 && v31 - v32 >= 0.0)
      {
        result.f64[0] = v42 / (v42 + v31 - v32);
        if (a3)
        {
          *(void *)&long long v45 = 0;
          *((double *)&v45 + 1) = 1.0 - result.f64[0];
          *(_OWORD *)a3 = v45;
          *(float64x2_t *)(a3 + 16) = result;
          float64x2_t v5 = a2[2];
          float64x2_t v4 = a2[3];
          float64x2_t v11 = a2[4];
          float64x2_t v10 = a2[5];
        }
        float64x2_t v7 = vsubq_f64(v11, v5);
        *(void *)&v4.f64[0] = *(_OWORD *)&vmlaq_f64(v4, vsubq_f64(v10, v4), result);
        float64x2_t v5 = vmlaq_n_f64(v5, v7, result.f64[0]);
        goto LABEL_19;
      }
    }
    double v43 = 1.0 / (v26 + v41 + v35);
    v5.f64[0] = v35 * v43;
    v4.f64[0] = v26 * v43;
    if (a3)
    {
      *(double *)&long long v44 = 1.0 - v5.f64[0] - v4.f64[0];
      *((void *)&v44 + 1) = *(void *)&v5.f64[0];
      *(_OWORD *)a3 = v44;
      *(float64x2_t *)(a3 + 16) = v4;
      float64x2_t result = *a2;
      float64x2_t v7 = a2[1];
    }
    *(void *)&v8.f64[1] = v25;
    *(void *)&v12.f64[1] = v34;
    float64x2_t result = vmlaq_n_f64(vmlaq_n_f64(result, v8, v5.f64[0]), v12, v4.f64[0]);
    unint64_t v28 = vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
    float64x2_t v7 = vmlaq_f64(vmlaq_f64(v7, v5, v9), v4, v13);
  }
  else
  {
    if (a3)
    {
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      __asm { FMOV            V0.2D, #1.0 }
      *(_OWORD *)(a3 + 16) = _Q0;
      float64x2_t v11 = a2[4];
      float64x2_t v10 = a2[5];
    }
    unint64_t v28 = vextq_s8((int8x16_t)v11, (int8x16_t)v11, 8uLL).u64[0];
    result.f64[0] = v11.f64[0];
    v7.f64[0] = v10.f64[0];
  }
LABEL_35:
  *(void *)&result.f64[1] = v28;
  *a4 = result;
  a4[1] = v7;
  return result;
}

float32x2_t geom_closest_point_to_circle_2f(uint64_t a1, int a2, float *a3, float32x2_t result)
{
  float32x2_t v4 = vsub_f32(result, (float32x2_t)a1);
  float32x2_t v5 = vmul_f32(v4, v4);
  v5.f32[0] = sqrtf(vaddv_f32(v5));
  float v6 = v5.f32[0] - *(float *)&a2;
  if (a3) {
    *a3 = v6;
  }
  if (v6 != 0.0 && v6 > 0.000005) {
    return vmla_n_f32((float32x2_t)a1, vdiv_f32(v4, (float32x2_t)vdup_lane_s32((int32x2_t)v5, 0)), *(float *)&a2);
  }
  return result;
}

float64_t geom_closest_point_to_circle_2d(uint64_t a1, double *a2, float64x2_t a3)
{
  float64x2_t v4 = *(float64x2_t *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  float64x2_t v6 = vsubq_f64(a3, *(float64x2_t *)a1);
  double v7 = sqrt(vaddvq_f64(vmulq_f64(v6, v6)));
  double v8 = v7 - *(double *)&v5;
  if (a2) {
    *a2 = v8;
  }
  if (v8 == 0.0 || v8 <= 1.0e-10) {
    return a3.f64[0];
  }
  *(void *)&float64_t result = *(_OWORD *)&vmlaq_n_f64(v4, vdivq_f64(v6, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v7, 0)), *(double *)&v5);
  return result;
}

double geom_closest_point_to_sphere_3f(uint64_t a1, float *a2, float32x4_t a3)
{
  float32x4_t v4 = *(float32x4_t *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  float32x4_t v6 = vsubq_f32(a3, *(float32x4_t *)a1);
  float32x4_t v7 = vmulq_f32(v6, v6);
  int32x2_t v8 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).u64[0];
  *(float *)v8.i32 = sqrtf(*(float *)v8.i32);
  float v9 = *(float *)v8.i32 - *(float *)&v5;
  if (a2) {
    *a2 = v9;
  }
  if (v9 == 0.0 || v9 <= 0.000005) {
    return *(double *)a3.i64;
  }
  *(void *)&double result = vmlaq_n_f32(v4, vdivq_f32(v6, (float32x4_t)vdupq_lane_s32(v8, 0)), *(float *)&v5).u64[0];
  return result;
}

__n128 geom_closest_point_to_sphere_3d@<Q0>(float64x2_t *a1@<X0>, float64x2_t *a2@<X1>, double *a3@<X2>, uint64_t a4@<X8>, float64x2_t a5@<Q5>)
{
  __n128 result = *(__n128 *)a1;
  float64x2_t v6 = a1[1];
  float64x2_t v8 = *a2;
  float64x2_t v7 = a2[1];
  a5.f64[0] = a2[2].f64[0];
  unint64_t v9 = vextq_s8((int8x16_t)result, (int8x16_t)result, 8uLL).u64[0];
  float64x2_t v10 = vsubq_f64(*a1, *a2);
  float64x2_t v11 = vsubq_f64(v6, v7);
  float64x2_t v12 = vmulq_f64(v10, v10);
  v12.f64[0] = sqrt(vmulq_f64(v11, v11).f64[0] + vaddvq_f64(v12));
  double v13 = v12.f64[0] - a5.f64[0];
  if (a3) {
    *a3 = v13;
  }
  if (v13 != 0.0 && v13 > 1.0e-10)
  {
    result.n128_u64[1] = v9;
    float64x2_t v6 = vdivq_f64(vsubq_f64(v6, v7), v12);
    int8x16_t v14 = (int8x16_t)vmlaq_n_f64(v8, vdivq_f64(vsubq_f64((float64x2_t)result, v8), (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v12.f64[0], 0)), a5.f64[0]);
    unint64_t v9 = vextq_s8(v14, v14, 8uLL).u64[0];
    result.n128_u64[0] = v14.i64[0];
    *(void *)&v6.f64[0] = *(_OWORD *)&vmlaq_f64(v7, a5, v6);
  }
  result.n128_u64[1] = v9;
  *(__n128 *)a4 = result;
  *(float64x2_t *)(a4 + 16) = v6;
  return result;
}

void geom_find_best_rigid_transform_3f(unsigned int a1, float32x4_t *a2, float32x4_t *a3, float32x4_t *a4, float32x4_t *a5, _DWORD *a6)
{
  v7[0] = a2;
  v7[1] = (float32x4_t *)a1;
  v6[0] = a3;
  v6[1] = (float32x4_t *)a1;
  geom::find_best_rigid_transform<float>(v7, v6, a4, a5, a6);
}

void geom::find_best_rigid_transform<float>(float32x4_t **a1, float32x4_t **a2, float32x4_t *a3, float32x4_t *a4, _DWORD *a5)
{
  unint64_t v9 = (unint64_t)a1[1];
  if (v9)
  {
    float64x2_t v11 = *a1;
    uint64_t v12 = 16 * v9;
    float32x4_t v13 = 0uLL;
    do
    {
      float32x4_t v14 = *v11++;
      v15.i32[1] = v14.i32[1];
      float32x4_t v13 = vaddq_f32(v13, v14);
      v12 -= 16;
    }
    while (v12);
    *(float *)v15.i32 = (float)v9;
    float32x4_t v16 = (float32x4_t)vdupq_lane_s32(v15, 0);
    unint64_t v17 = (unint64_t)a2[1];
    if (v17)
    {
      double v18 = *a2;
      uint64_t v19 = 16 * v17;
      float32x4_t v20 = 0uLL;
      do
      {
        float32x4_t v21 = *v18++;
        float32x4_t v20 = vaddq_f32(v20, v21);
        v19 -= 16;
      }
      while (v19);
    }
    else
    {
      float32x4_t v20 = 0uLL;
    }
    float32x4_t v22 = vdivq_f32(v13, v16);
    v13.f32[0] = (float)v17;
    float32x4_t v61 = v22;
    float32x4_t v62 = vdivq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 0));
    float64x2_t v66 = 0;
    float64x2_t v67 = 0;
    uint64_t v68 = 0;
    std::vector<int> __p = 0;
    float64x2_t v64 = 0;
    uint64_t v65 = 0;
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v66, v9);
    _ZNSt3__16vectorIDv3_fNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, (unint64_t)a2[1]);
    double v23 = (float32x4_t *)v66;
    if (a1[1])
    {
      unint64_t v24 = 0;
      float v25 = 0.0;
      float v26 = 0.0;
      do
      {
        v23[v24] = vsubq_f32((*a1)[v24], v61);
        *((float32x4_t *)__p + v24) = vsubq_f32((*a2)[v24], v62);
        double v23 = (float32x4_t *)v66;
        float32x4_t v27 = vmulq_f32(*((float32x4_t *)v66 + v24), *((float32x4_t *)v66 + v24));
        unint64_t v28 = (float32x4_t *)__p;
        float v26 = v26
            + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v27, 2), vaddq_f32(v27, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v27.f32, 1))).f32[0];
        float32x4_t v29 = vmulq_f32(*((float32x4_t *)__p + v24), *((float32x4_t *)__p + v24));
        float v25 = v25
            + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).f32[0];
        ++v24;
      }
      while (v24 < (unint64_t)a1[1]);
    }
    else
    {
      float v26 = 0.0;
      unint64_t v28 = (float32x4_t *)__p;
      float v25 = 0.0;
    }
    if (v67 == v23)
    {
      float32x4_t v34 = 0uLL;
      float32x4_t v33 = 0uLL;
      float32x4_t v32 = 0uLL;
    }
    else
    {
      uint64_t v30 = 0;
      unint64_t v31 = v67 - v23;
      float32x4_t v32 = 0uLL;
      float32x4_t v33 = 0uLL;
      float32x4_t v34 = 0uLL;
      do
      {
        float32x4_t v35 = v28[v30];
        float32x4_t v36 = *v23++;
        float32x4_t v32 = vmlaq_n_f32(v32, v35, v36.f32[0]);
        float32x4_t v33 = vmlaq_lane_f32(v33, v35, *(float32x2_t *)v36.f32, 1);
        float32x4_t v34 = vmlaq_laneq_f32(v34, v35, v36, 2);
        ++v30;
      }
      while (v31 > v30);
    }
    float32x4_t v37 = v32;
    v37.f32[0] = v32.f32[0] - v33.f32[1];
    v37.i32[3] = v33.i32[2];
    float32x4_t v38 = (float32x4_t)vextq_s8((int8x16_t)v34, (int8x16_t)v34, 8uLL);
    v38.i32[1] = v33.i32[0];
    float v39 = v34.f32[2];
    int32x4_t v40 = (int32x4_t)vaddq_f32(v37, v38);
    LODWORD(v41) = vdupq_lane_s32(*(int32x2_t *)v40.i8, 1).u32[0];
    LODWORD(v42) = vdupq_laneq_s32(v40, 2).u32[0];
    int32x4_t v43 = (int32x4_t)vsubq_f32(v37, v38);
    v40.i32[0] = v43.i32[0];
    v40.i32[3] = v43.i32[3];
    *((float *)&v41 + 1) = (float)(v33.f32[1] - v32.f32[0]) - v34.f32[2];
    DWORD2(v41) = vaddq_f32(v34, (float32x4_t)vdupq_laneq_s32(*(int32x4_t *)&v33, 2)).i32[1];
    int32x4_t v44 = (int32x4_t)vsubq_f32(v34, (float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2));
    HIDWORD(v41) = v44.i32[0];
    *(int32x4_t *)__CLPK_doublereal __a = v40;
    long long v72 = v41;
    DWORD1(v41) = v32.i32[1];
    *(float *)&long long v41 = v39 - v33.f32[1];
    DWORD1(v42) = DWORD2(v41);
    *((float32x2_t *)&v42 + 1) = vsub_f32(*(float32x2_t *)&v41, (float32x2_t)vzip1_s32(*(int32x2_t *)v32.f32, *(int32x2_t *)v33.f32));
    v44.i64[0] = vzip1q_s32(vdupq_laneq_s32(v43, 3), v44).u64[0];
    v44.i32[2] = HIDWORD(v42);
    *(float *)&v44.i32[3] = v39 + (float)(v33.f32[1] + v32.f32[0]);
    long long v73 = v42;
    int32x4_t v74 = v44;
    *(void *)__w = 0;
    uint64_t v70 = 0;
    if (geom::compute_eigendecomposition_of_symmetric_matrix<float,4ul>(__a, __w, 1))
    {
      float32x4_t v45 = (float32x4_t)v74;
      int8x16_t v46 = (int8x16_t)vmulq_f32(v45, v45);
      float32x4_t v47 = (float32x4_t)vextq_s8(v46, v46, 8uLL);
      v47.f32[0] = vaddv_f32(vadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v47.f32));
      float32x4_t v49 = v61;
      float32x4_t v48 = v62;
      if (v47.f32[0] == 1.0
        || (int32x4_t v50 = vdupq_n_s32(0x7FC00000u), v47.f32[0] != INFINITY)
        && fabsf(v47.f32[0] + -1.0) < (float)((float)((float)(fabsf(v47.f32[0]) + 1.0) + 1.0) * 0.00001))
      {
        v47.i64[0] = 0;
        int32x4_t v50 = (int32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v47, (float32x4_t)vdupq_laneq_s32(v74, 3)), 0), (int8x16_t)vnegq_f32((float32x4_t)v74), (int8x16_t)v74);
      }
    }
    else
    {
      int32x4_t v50 = vdupq_n_s32(0x7FC00000u);
      float32x4_t v49 = v61;
      float32x4_t v48 = v62;
    }
    *a4 = (float32x4_t)v50;
    v45.i32[0] = 1.0;
    if (v26 > 0.0) {
      v45.f32[0] = sqrtf(v25 / v26);
    }
    *a5 = v45.i32[0];
    float32x4_t v51 = vmulq_f32(*a4, (float32x4_t)xmmword_236F1DA80);
    int32x4_t v52 = (int32x4_t)vnegq_f32(v51);
    int8x16_t v53 = (int8x16_t)vtrn2q_s32((int32x4_t)v51, vtrn1q_s32((int32x4_t)v51, v52));
    float32x4_t v54 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v51, (int8x16_t)v52, 8uLL), *(float32x2_t *)v49.f32, 1), (float32x4_t)vextq_s8(v53, v53, 8uLL), v49.f32[0]);
    float32x4_t v55 = (float32x4_t)vrev64q_s32((int32x4_t)v51);
    v55.i32[0] = v52.i32[1];
    v55.i32[3] = v52.i32[2];
    float32x4_t v56 = vmlaq_laneq_f32(v54, v55, v49, 2);
    int32x4_t v57 = (int32x4_t)vnegq_f32(v56);
    int8x16_t v58 = (int8x16_t)vtrn2q_s32((int32x4_t)v56, vtrn1q_s32((int32x4_t)v56, v57));
    float32x4_t v59 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v56, (int8x16_t)v57, 8uLL), *(float32x2_t *)a4->f32, 1), (float32x4_t)vextq_s8(v58, v58, 8uLL), COERCE_FLOAT(*a4));
    float32x4_t v60 = (float32x4_t)vrev64q_s32((int32x4_t)v56);
    v60.i32[0] = v57.i32[1];
    v60.i32[3] = v57.i32[2];
    *a3 = vmlsq_lane_f32(v48, vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v56, *a4, 3), v60, *a4, 2), v59), *(float32x2_t *)v45.f32, 0);
    if (__p)
    {
      float64x2_t v64 = __p;
      operator delete(__p);
    }
    if (v66)
    {
      float64x2_t v67 = (float32x4_t *)v66;
      operator delete(v66);
    }
  }
  else
  {
    *a3 = 0u;
    *a4 = (float32x4_t)xmmword_236F1CB30;
    *a5 = 1065353216;
  }
}

void geom_find_best_rigid_transform_3d(unsigned int a1, float64x2_t *a2, float64x2_t *a3, float64x2_t *a4, float64x2_t *a5, void *a6)
{
  v7[0] = a2;
  v7[1] = (float64x2_t *)a1;
  v6[0] = a3;
  v6[1] = (float64x2_t *)a1;
  geom::find_best_rigid_transform<double>(v7, v6, a4, a5, a6);
}

void geom::find_best_rigid_transform<double>(float64x2_t **a1, float64x2_t **a2, float64x2_t *a3, float64x2_t *a4, void *a5)
{
  unint64_t v9 = (unint64_t)a1[1];
  if (v9)
  {
    float64x2_t v11 = *a1;
    uint64_t v12 = 32 * v9;
    float64x2_t v13 = 0uLL;
    float64x2_t v14 = 0uLL;
    do
    {
      float64x2_t v15 = *v11;
      float64x2_t v16 = v11[1];
      v11 += 2;
      float64x2_t v14 = vaddq_f64(v14, v16);
      float64x2_t v13 = vaddq_f64(v13, v15);
      v12 -= 32;
    }
    while (v12);
    v15.f64[0] = (double)v9;
    int8x16_t v78 = (int8x16_t)vdivq_f64(v13, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v9), 0));
    float64x2_t v79 = vdivq_f64(v14, v15);
    *(void *)&double v77 = vextq_s8(v78, v78, 8uLL).u64[0];
    unint64_t v17 = (unint64_t)a2[1];
    if (v17)
    {
      double v18 = *a2;
      uint64_t v19 = 32 * v17;
      float64x2_t v20 = 0uLL;
      float64x2_t v21 = 0uLL;
      do
      {
        float64x2_t v15 = *v18;
        float64x2_t v22 = v18[1];
        v18 += 2;
        float64x2_t v21 = vaddq_f64(v21, v22);
        float64x2_t v20 = vaddq_f64(v20, v15);
        v19 -= 32;
      }
      while (v19);
    }
    else
    {
      float64x2_t v20 = 0uLL;
      float64x2_t v21 = 0uLL;
    }
    v15.f64[0] = (double)v17;
    int8x16_t v75 = (int8x16_t)vdivq_f64(v20, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v17), 0));
    float64x2_t v76 = vdivq_f64(v21, v15);
    int8x16_t v74 = vextq_s8(v75, v75, 8uLL);
    int8x16_t v83 = 0;
    float64x2_t v84 = 0;
    uint64_t v85 = 0;
    std::vector<int> __p = 0;
    float64x2_t v81 = 0;
    uint64_t v82 = 0;
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&v83, v9);
    _ZNSt3__16vectorIDv3_dNS_9allocatorIS1_EEE6resizeEm((uint64_t)&__p, (unint64_t)a2[1]);
    unint64_t v24 = (float64_t *)v83;
    float v25 = (char *)__p;
    if (a1[1])
    {
      unint64_t v26 = 0;
      double v27 = 0.0;
      *(void *)&v28.f64[0] = v78.i64[0];
      v28.f64[1] = v77;
      *(void *)&v23.f64[1] = v74.i64[1];
      *(void *)&v29.f64[0] = v75.i64[0];
      *(void *)&v29.f64[1] = v74.i64[0];
      double v30 = 0.0;
      do
      {
        unint64_t v31 = &(*a1)[2 * v26];
        float64x2_t v32 = vsubq_f64(*v31, v28);
        float64x2_t v33 = vsubq_f64(v31[1], v79);
        float32x4_t v34 = (float64x2_t *)&v24[4 * v26];
        *float32x4_t v34 = v32;
        v34[1] = v33;
        float32x4_t v35 = &(*a2)[2 * v26];
        float64x2_t v36 = vsubq_f64(*v35, v29);
        float64x2_t v37 = vsubq_f64(v35[1], v76);
        float32x4_t v38 = (float64x2_t *)&v25[32 * v26];
        float64x2_t *v38 = v36;
        v38[1] = v37;
        double v30 = v30 + vmulq_f64(v34[1], v34[1]).f64[0] + vaddvq_f64(vmulq_f64(*v34, *v34));
        double v27 = v27 + vmulq_f64(v37, v37).f64[0] + vaddvq_f64(vmulq_f64(v36, v36));
        ++v26;
      }
      while (v26 < (unint64_t)a1[1]);
    }
    else
    {
      double v30 = 0.0;
      double v27 = 0.0;
    }
    if (v84 == v24)
    {
      float64x2_t v45 = 0uLL;
      v46.f64[0] = 0.0;
      float64x2_t v43 = 0uLL;
      v44.f64[0] = 0.0;
      float64x2_t v41 = 0uLL;
      v42.f64[0] = 0.0;
    }
    else
    {
      uint64_t v39 = 0;
      unint64_t v40 = ((char *)v84 - (char *)v24) >> 5;
      float64x2_t v41 = 0uLL;
      float64x2_t v42 = 0uLL;
      float64x2_t v43 = 0uLL;
      float64x2_t v44 = 0uLL;
      float64x2_t v45 = 0uLL;
      float64x2_t v46 = 0uLL;
      do
      {
        float32x4_t v47 = (float64x2_t *)&v25[32 * v39];
        float64x2_t v48 = v47[1];
        v23.f64[0] = v24[2];
        float64x2_t v49 = *(float64x2_t *)v24;
        v24 += 4;
        float64x2_t v42 = vmlaq_f64(v42, v49, v48);
        float64x2_t v41 = vmlaq_n_f64(v41, *v47, v49.f64[0]);
        float64x2_t v44 = vmlaq_laneq_f64(v44, v48, v49, 1);
        float64x2_t v43 = vmlaq_laneq_f64(v43, *v47, v49, 1);
        float64x2_t v46 = vmlaq_f64(v46, v23, v48);
        float64x2_t v45 = vmlaq_n_f64(v45, *v47, v23.f64[0]);
        ++v39;
      }
      while (v40 > v39);
    }
    *(double *)&long long v50 = v41.f64[0] - v43.f64[1] - v46.f64[0];
    *(double *)&long long v51 = v43.f64[0] + v41.f64[1];
    *(double *)&long long v52 = v45.f64[0] + v42.f64[0];
    v53.f64[0] = v44.f64[0] - v45.f64[1];
    *((double *)&v50 + 1) = v43.f64[0] + v41.f64[1];
    *(double *)&long long v54 = v45.f64[0] + v42.f64[0];
    *((double *)&v54 + 1) = v44.f64[0] - v45.f64[1];
    *(_OWORD *)__CLPK_doublereal __a = v50;
    long long v89 = v54;
    *(double *)&long long v55 = v45.f64[1] + v44.f64[0];
    *((double *)&v51 + 1) = v43.f64[1] - v41.f64[0] - v46.f64[0];
    *((void *)&v52 + 1) = v55;
    *((double *)&v55 + 1) = v45.f64[0] - v42.f64[0];
    long long v90 = v51;
    long long v91 = v55;
    *(double *)&long long v56 = v46.f64[0] - v43.f64[1] - v41.f64[0];
    v43.f64[0] = v41.f64[1] - v43.f64[0];
    *((void *)&v56 + 1) = *(void *)&v43.f64[0];
    long long v92 = v52;
    long long v93 = v56;
    v53.f64[1] = *((float64_t *)&v55 + 1);
    v43.f64[1] = v46.f64[0] + v43.f64[1] + v41.f64[0];
    float64x2_t v94 = v53;
    float64x2_t v95 = v43;
    *(_OWORD *)__w = 0uLL;
    long long v87 = 0uLL;
    BOOL v57 = geom::compute_eigendecomposition_of_symmetric_matrix<double,4ul>(__a, __w, 1);
    float64x2_t v59 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL);
    int8x16_t v60 = (int8x16_t)v59;
    if (v57)
    {
      float64x2_t v58 = v94;
      float64x2_t v59 = vaddq_f64(vmulq_f64(v58, v58), vmulq_f64(v95, v95));
      v59.f64[0] = vaddvq_f64(v59);
      if (v59.f64[0] == 1.0
        || (double v61 = fabs(v59.f64[0] + -1.0),
            float64x2_t v59 = (float64x2_t)vdupq_n_s64(0x7FF8000000000000uLL),
            BOOL v62 = v61 > 0.000001,
            int8x16_t v60 = (int8x16_t)v59,
            !v62))
      {
        v59.f64[0] = 0.0;
        int8x16_t v63 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v59, (float64x2_t)vdupq_laneq_s64((int64x2_t)v95, 1)).i64[0], 0);
        int8x16_t v60 = vbslq_s8(v63, (int8x16_t)vnegq_f64(v95), (int8x16_t)v95);
        float64x2_t v59 = (float64x2_t)vbslq_s8(v63, (int8x16_t)vnegq_f64(v94), (int8x16_t)v94);
      }
    }
    *a4 = v59;
    a4[1] = (float64x2_t)v60;
    v58.f64[0] = 1.0;
    if (v30 > 0.0) {
      v58.f64[0] = sqrt(v27 / v30);
    }
    *a5 = *(void *)&v58.f64[0];
    float64x2_t v64 = a4[1];
    float64x2_t v65 = vmulq_f64(v64, (float64x2_t)xmmword_236F1DA90);
    int8x16_t v66 = (int8x16_t)vnegq_f64(*a4);
    float64x2_t v67 = (float64x2_t)vextq_s8((int8x16_t)v65, (int8x16_t)vnegq_f64(v65), 8uLL);
    float64x2_t v68 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(v65, v77), v67, *(double *)v78.i64), (float64x2_t)vextq_s8(*(int8x16_t *)a4, v66, 8uLL), v79.f64[0]);
    float64x2_t v69 = vmlaq_n_f64(vmlaq_n_f64(vmulq_n_f64(*a4, v77), (float64x2_t)vextq_s8(v66, *(int8x16_t *)a4, 8uLL), *(double *)v78.i64), v67, v79.f64[0]);
    float64x2_t v70 = vnegq_f64(v68);
    float64x2_t v71 = (float64x2_t)vextq_s8((int8x16_t)v69, (int8x16_t)vnegq_f64(v69), 8uLL);
    float64x2_t v72 = vmlaq_n_f64(vmulq_laneq_f64(v69, *a4, 1), v71, a4->f64[0]);
    float64x2_t v73 = vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v69, v64, 1), v71, v64.f64[0]), vmlaq_n_f64(vmulq_laneq_f64(v70, *a4, 1), (float64x2_t)vextq_s8((int8x16_t)v68, (int8x16_t)v70, 8uLL), a4->f64[0]));
    *(void *)&v71.f64[0] = v75.i64[0];
    *(void *)&v71.f64[1] = v74.i64[0];
    *a3 = vmlsq_lane_f64(v71, vaddq_f64(vmlaq_n_f64(vmulq_laneq_f64(v68, v64, 1), (float64x2_t)vextq_s8((int8x16_t)v70, (int8x16_t)v68, 8uLL), v64.f64[0]), v72), v58.f64[0], 0);
    a3[1] = vmlsq_f64(v76, v73, v58);
    if (__p)
    {
      float64x2_t v81 = __p;
      operator delete(__p);
    }
    if (v83)
    {
      float64x2_t v84 = (float64_t *)v83;
      operator delete(v83);
    }
  }
  else
  {
    *a3 = 0u;
    a3[1] = 0u;
    *a4 = 0u;
    a4[1] = (float64x2_t)xmmword_236F14160;
    *a5 = 0x3FF0000000000000;
  }
}

double geom_find_best_rigid_transform_matrix_3f(unsigned int a1, float32x4_t *a2, float32x4_t *a3)
{
  v5[0] = a2;
  v5[1] = (float32x4_t *)a1;
  v4[0] = a3;
  v4[1] = (float32x4_t *)a1;
  return geom::find_best_rigid_transform_matrix<float>(v5, v4);
}

double geom::find_best_rigid_transform_matrix<float>(float32x4_t **a1, float32x4_t **a2)
{
  *(uint64_t *)((char *)v16.i64 + 4) = 0;
  v16.i32[0] = 0;
  float v14 = 0.0;
  geom::find_best_rigid_transform<float>(a1, a2, &v16, &v15, &v14);
  _Q3 = v15;
  float32x4_t v3 = vmulq_f32(_Q3, _Q3);
  _S7 = v15.i32[2];
  float v5 = vmlas_n_f32(vmuls_lane_f32(v15.f32[2], v15, 3), v15.f32[1], v15.f32[0]);
  float v6 = vmlas_n_f32(-(float)(v15.f32[1] * v15.f32[3]), v15.f32[2], v15.f32[0]);
  v7.i32[3] = 0;
  v7.f32[0] = (float)((float)(v3.f32[1] + v3.f32[2]) * -2.0) + 1.0;
  v7.f32[1] = v5 + v5;
  v7.f32[2] = v6 + v6;
  *(void *)&double result = vmulq_n_f32(v7, v14).u64[0];
  __asm { FMLA            S19, S7, V3.S[1] }
  return result;
}

float64_t geom_find_best_rigid_transform_matrix_3d@<D0>(unsigned int a1@<W0>, float64x2_t *a2@<X1>, float64x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  v6[0] = a2;
  v6[1] = (float64x2_t *)a1;
  v5[0] = a3;
  v5[1] = (float64x2_t *)a1;
  return geom::find_best_rigid_transform_matrix<double>(v6, v5, a4);
}

float64_t geom::find_best_rigid_transform_matrix<double>@<D0>(float64x2_t **a1@<X0>, float64x2_t **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v30 = 0;
  float64x2_t v29 = 0uLL;
  double v26 = 0.0;
  geom::find_best_rigid_transform<double>(a1, a2, &v29, &v27, &v26);
  _Q0 = v27;
  _Q1 = v28;
  double v6 = vmulq_f64(_Q1, _Q1).f64[0];
  float64x2_t v7 = vmulq_f64(_Q0, _Q0);
  v8.f64[0] = (v7.f64[1] + v6) * -2.0 + 1.0;
  double v9 = v28.f64[1];
  double v10 = vmlad_n_f64(vmuld_lane_f64(_Q1.f64[0], _Q1, 1), v27.f64[1], v27.f64[0]);
  v11.f64[0] = vmuld_lane_f64(v27.f64[1], v28, 1);
  double v12 = vmlad_n_f64(-(v27.f64[1] * v28.f64[1]), v28.f64[0], v27.f64[0]);
  v8.f64[1] = v10 + v10;
  double v13 = vmlad_n_f64(-(v28.f64[0] * v28.f64[1]), v27.f64[1], v27.f64[0]);
  v14.f64[0] = v13 + v13;
  __asm { FMLA            D20, D1, V0.D[1] }
  v14.f64[1] = (v7.f64[0] + v6) * -2.0 + 1.0;
  *(double *)&unint64_t v20 = _D20 + _D20;
  double v21 = v26;
  float64x2_t v22 = vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(v12 + v12), v26);
  *(float64x2_t *)a3 = vmulq_n_f64(v8, v26);
  *(float64x2_t *)(a3 + 16) = v22;
  *(float64x2_t *)(a3 + 32) = vmulq_n_f64(v14, v21);
  *(float64x2_t *)(a3 + 48) = vmulq_n_f64((float64x2_t)v20, v21);
  v11.f64[1] = -(_Q0.f64[0] * v9);
  float64x2_t v23 = vmlaq_n_f64(v11, _Q0, _Q1.f64[0]);
  *(float64x2_t *)(a3 + 64) = vmulq_n_f64(vaddq_f64(v23, v23), v21);
  *(float64x2_t *)(a3 + 80) = vmulq_n_f64((float64x2_t)COERCE_UNSIGNED_INT64(vaddvq_f64(v7) * -2.0 + 1.0), v21);
  float64_t result = v29.f64[0];
  __asm { FMOV            V1.2D, #1.0 }
  *(void *)&_Q1 = v30;
  *(float64x2_t *)(a3 + 96) = v29;
  *(_OWORD *)(a3 + 112) = _Q1;
  return result;
}

BOOL geom::compute_eigendecomposition_of_symmetric_matrix<float,4ul>(__CLPK_real *__a, __CLPK_real *__w, int a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  __CLPK_integer __lda = 4;
  __CLPK_integer __n = 4;
  __CLPK_integer __lwork = -1;
  if (a3) {
    float v5 = "Upper";
  }
  else {
    float v5 = "Lower";
  }
  *(void *)&v11[4] = 0;
  uint64_t v6 = ssyev_("Vectors", v5, &__n, __a, &__lda, __w, (__CLPK_real *)&v11[4], &__lwork, v10);
  __CLPK_integer __lwork = (int)*(float *)&v11[4];
  MEMORY[0x270FA5388](v6, v7);
  return ssyev_("Vectors", v5, &__n, __a, &__lda, __w, (__CLPK_real *)&v11[-v8], &__lwork, (__CLPK_integer *)&v11[8]) == 0;
}

BOOL geom::compute_eigendecomposition_of_symmetric_matrix<double,4ul>(__CLPK_doublereal *__a, __CLPK_doublereal *__w, int a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  __CLPK_integer __lda = 4;
  __CLPK_integer __n = 4;
  __CLPK_integer v12 = 0;
  __CLPK_integer __lwork = -1;
  if (a3) {
    float v5 = "Upper";
  }
  else {
    float v5 = "Lower";
  }
  __CLPK_doublereal __work = 0.0;
  uint64_t v6 = dsyev_("Vectors", v5, &__n, __a, &__lda, __w, &__work, &__lwork, v10);
  __CLPK_integer __lwork = (int)__work;
  MEMORY[0x270FA5388](v6, v7);
  return dsyev_("Vectors", v5, &__n, __a, &__lda, __w, (__CLPK_doublereal *)((char *)&__work - v8), &__lwork, &v12) == 0;
}

double geom_apply_catmull_clark_subdivision_stencil_3f(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  geom::catmull_clark_vertex_evaluator<float>::catmull_clark_vertex_evaluator((uint64_t)v10, a1, a3, a5[a4 - 1], a5, a4);
  return geom::catmull_clark_vertex_evaluator<float>::subdivided((uint64_t)v10, a2, v6, v7, v8);
}

double geom::catmull_clark_vertex_evaluator<float>::subdivided(uint64_t a1, uint64_t a2, double a3, double a4, float32x4_t a5)
{
  uint64_t v7 = *(unsigned int *)(a1 + 4);
  if (*(unsigned char *)a1)
  {
    v8.i64[0] = 0x3E0000003E000000;
    v8.i64[1] = 0x3E0000003E000000;
    float32x4_t v9 = vmulq_f32(vaddq_f32(*(float32x4_t *)(a2 + 16 * *(unsigned int *)(a1 + 8)), *(float32x4_t *)(a2 + 16 * *(unsigned int *)(a1 + 12))), v8);
    __asm { FMOV            V2.4S, #0.75 }
    *(void *)&double result = vmlaq_f32(v9, _Q2, *(float32x4_t *)(a2 + 16 * v7)).u64[0];
  }
  else
  {
    v17.i32[2] = 0;
    v17.i64[0] = 0;
    v16.i32[2] = 0;
    v16.i64[0] = 0;
    geom::catmull_clark_vertex_evaluator<float>::compute_edge_and_face_sums(a1, a2, &v16, &v17, (float32x4_t)0, a4, a5);
    *(void *)&double result = vmlaq_n_f32(vmulq_n_f32(vaddq_f32(v16, v17), 1.0 / (float)((float)*(unsigned int *)(a1 + 24) * (float)*(unsigned int *)(a1 + 24))), *(float32x4_t *)(a2 + 16 * v7), (float)((float)*(unsigned int *)(a1 + 24) + -2.0) / (float)*(unsigned int *)(a1 + 24)).u64[0];
  }
  return result;
}

double geom_apply_catmull_clark_limit_stencil_3f(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  geom::catmull_clark_vertex_evaluator<float>::catmull_clark_vertex_evaluator((uint64_t)v10, a1, a3, a5[a4 - 1], a5, a4);
  return geom::catmull_clark_vertex_evaluator<float>::limit((uint64_t)v10, a2, v6, v7, v8);
}

double geom::catmull_clark_vertex_evaluator<float>::limit(uint64_t a1, uint64_t a2, double a3, double a4, float32x4_t a5)
{
  uint64_t v7 = *(unsigned int *)(a1 + 4);
  if (*(unsigned char *)a1)
  {
    *(void *)&double result = vmlaq_f32(vmulq_f32(vaddq_f32(*(float32x4_t *)(a2 + 16 * *(unsigned int *)(a1 + 8)), *(float32x4_t *)(a2 + 16 * *(unsigned int *)(a1 + 12))), (float32x4_t)vdupq_n_s32(0x3E2AAAABu)), (float32x4_t)vdupq_n_s32(0x3F2AAAABu), *(float32x4_t *)(a2 + 16 * v7)).u64[0];
  }
  else
  {
    v13.i32[2] = 0;
    v13.i64[0] = 0;
    v12.i32[2] = 0;
    v12.i64[0] = 0;
    float32x4_t v9 = geom::catmull_clark_vertex_evaluator<float>::compute_edge_and_face_sums(a1, a2, &v12, &v13, (float32x4_t)0, a4, a5);
    v9.f32[0] = (float)*(unsigned int *)(a1 + 24);
    v10.i64[0] = 0x4000000040000000;
    v10.i64[1] = 0x4000000040000000;
    float32x4_t v11 = vaddq_f32(v13, vmlaq_n_f32(vmlaq_f32(vmlaq_n_f32(v12, *(float32x4_t *)(a2 + 16 * v7), v9.f32[0]), v10, v13), vmlaq_n_f32(vmulq_n_f32(vaddq_f32(v12, v13), 1.0 / (float)(v9.f32[0] * v9.f32[0])), *(float32x4_t *)(a2 + 16 * v7), (float)(v9.f32[0] + -2.0) / v9.f32[0]), v9.f32[0] * v9.f32[0]));
    v9.f32[0] = (float)(v9.f32[0] + 5.0) * v9.f32[0];
    *(void *)&double result = vdivq_f32(v11, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v9.f32, 0)).u64[0];
  }
  return result;
}

double geom_apply_catmull_clark_normal_stencil_3f(int a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned int *a5)
{
  geom::catmull_clark_vertex_evaluator<float>::catmull_clark_vertex_evaluator((uint64_t)v7, a1, a3, a5[a4 - 1], a5, a4);
  return geom::catmull_clark_vertex_evaluator<float>::normal(v7, a2);
}

double geom::catmull_clark_vertex_evaluator<float>::normal(unsigned char *a1, uint64_t a2)
{
  float32x4_t v21 = 0uLL;
  int32x4_t v20 = 0uLL;
  if (!a1[1])
  {
    *(double *)v4.i64 = geom::catmull_clark_vertex_evaluator<float>::compute_average_face_normal((uint64_t)a1, a2);
    float32x4_t v19 = v4;
    if (*a1) {
      geom::catmull_clark_vertex_evaluator<float>::compute_xor_boundary_tangents((uint64_t)a1, a2, &v21, (float32x4_t *)&v20);
    }
    else {
      geom::catmull_clark_vertex_evaluator<float>::compute_xor_tangents((uint64_t)a1, a2, &v21, (float32x4_t *)&v20);
    }
    float32x4_t v10 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(v21)), (float32x4_t)v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL));
    float32x4_t v11 = vmulq_f32(v10, v10);
    if (fabsf(vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v11.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v11, 2), v11)).f32[0]) <= 1.0e-10)
    {
      float32x4_t v8 = v19;
    }
    else
    {
      float32x4_t v12 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL);
      float32x4_t v13 = vmulq_f32(v19, v12);
      float32x4_t v14 = vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1));
      float32x4_t v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), v14);
      v14.i64[0] = 0;
      float32x4_t v8 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v14, v15), 0), (int8x16_t)vnegq_f32(v12), (int8x16_t)v12);
    }
    float32x4_t v5 = vmulq_f32(v8, v8);
    goto LABEL_15;
  }
  if (*a1) {
    geom::catmull_clark_vertex_evaluator<float>::compute_bspline_boundary_tangents((uint64_t)a1, a2, &v21, (float32x4_t *)&v20);
  }
  else {
    geom::catmull_clark_vertex_evaluator<float>::compute_bspline_tangents((uint64_t)a1, a2, &v21, &v20);
  }
  float32x4_t v5 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(v21)), (float32x4_t)v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL));
  float32x4_t v6 = vmulq_f32(v5, v5);
  LODWORD(v7) = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v6.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v6, 2), v6)).u32[0];
  if (fabsf(v7) <= 1.0e-10)
  {
    *(double *)v9.i64 = geom::catmull_clark_vertex_evaluator<float>::compute_average_face_normal((uint64_t)a1, a2);
    float32x4_t v8 = v9;
    float32x4_t v5 = vmulq_f32(v9, v9);
LABEL_15:
    v5.i64[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v5, 2), vadd_f32(*(float32x2_t *)v5.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v5.f32, 1))).u32[0];
    goto LABEL_16;
  }
  float32x4_t v8 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v5, (int32x4_t)v5), (int8x16_t)v5, 0xCuLL);
  v5.i64[0] = LODWORD(v7);
LABEL_16:
  float32x2_t v16 = vrsqrte_f32(*(float32x2_t *)v5.f32);
  float32x2_t v17 = vmul_f32(v16, vrsqrts_f32(*(float32x2_t *)v5.f32, vmul_f32(v16, v16)));
  *(void *)&double result = vmulq_n_f32(v8, vmul_f32(v17, vrsqrts_f32(*(float32x2_t *)v5.f32, vmul_f32(v17, v17))).f32[0]).u64[0];
  return result;
}

double geom_apply_catmull_clark_subdivision_stencil_3d@<D0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, _OWORD *a6@<X8>)
{
  geom::catmull_clark_vertex_evaluator<float>::catmull_clark_vertex_evaluator((uint64_t)v13, a1, a3, a5[a4 - 1], a5, a4);
  geom::catmull_clark_vertex_evaluator<double>::subdivided((uint64_t)v13, a2, (uint64_t)v12, v8, v9);
  double result = *(double *)v12;
  long long v11 = v12[1];
  *a6 = v12[0];
  a6[1] = v11;
  return result;
}

int8x16_t geom::catmull_clark_vertex_evaluator<double>::subdivided@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D1>, float64x2_t a5@<Q2>)
{
  uint64_t v8 = *(unsigned int *)(a1 + 4);
  if (*(unsigned char *)a1)
  {
    float64x2_t v9 = (float64x2_t *)(a2 + 32 * v8);
    float64x2_t v10 = *v9;
    float64x2_t v11 = v9[1];
    float32x4_t v12 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(a1 + 8));
    float64x2_t v13 = *v12;
    float64x2_t v14 = v12[1];
    float32x4_t v15 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(a1 + 12));
    __asm { FMOV            V4.2D, #0.125 }
    float64x2_t v21 = vmulq_f64(vaddq_f64(v13, *v15), _Q4);
    float64x2_t v22 = vmulq_f64(vaddq_f64(v14, v15[1]), _Q4);
    __asm { FMOV            V4.2D, #0.75 }
    float64x2_t v24 = vmlaq_f64(v22, _Q4, v11);
    int8x16_t result = (int8x16_t)vmlaq_f64(v21, _Q4, v10);
  }
  else
  {
    v34.f64[0] = 0.0;
    float64x2_t v33 = 0u;
    v32.f64[0] = 0.0;
    float64x2_t v31 = 0u;
    float64x2_t v26 = geom::catmull_clark_vertex_evaluator<double>::compute_edge_and_face_sums(a1, a2, &v31, &v33, (float64x2_t)0, a4, a5);
    LODWORD(v26.f64[0]) = *(_DWORD *)(a1 + 24);
    v26.f64[0] = (double)*(unint64_t *)&v26.f64[0];
    v27.f64[0] = (v26.f64[0] + -2.0) / v26.f64[0];
    v28.f64[0] = 1.0 / (v26.f64[0] * v26.f64[0]);
    float64x2_t v29 = (float64x2_t *)(a2 + 32 * v8);
    float64x2_t v30 = vmulq_n_f64(vaddq_f64(v31, v33), v28.f64[0]);
    float64x2_t v24 = vmlaq_f64(vmulq_f64(vaddq_f64(v32, v34), v28), v29[1], v27);
    int8x16_t result = (int8x16_t)vmlaq_n_f64(v30, *v29, v27.f64[0]);
  }
  result.i64[1] = vextq_s8(result, result, 8uLL).u64[0];
  *(int8x16_t *)a3 = result;
  *(float64x2_t *)(a3 + 16) = v24;
  return result;
}

double geom_apply_catmull_clark_limit_stencil_3d@<D0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, _OWORD *a6@<X8>)
{
  geom::catmull_clark_vertex_evaluator<float>::catmull_clark_vertex_evaluator((uint64_t)v13, a1, a3, a5[a4 - 1], a5, a4);
  geom::catmull_clark_vertex_evaluator<double>::limit((uint64_t)v13, a2, (uint64_t)v12, v8, v9);
  double result = *(double *)v12;
  long long v11 = v12[1];
  *a6 = v12[0];
  a6[1] = v11;
  return result;
}

int8x16_t geom::catmull_clark_vertex_evaluator<double>::limit@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, double a4@<D1>, float64x2_t a5@<Q2>)
{
  uint64_t v8 = *(unsigned int *)(a1 + 4);
  if (*(unsigned char *)a1)
  {
    float64x2_t v9 = (float64x2_t *)(a2 + 32 * v8);
    float64x2_t v10 = *v9;
    float64x2_t v11 = v9[1];
    float32x4_t v12 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(a1 + 8));
    float64x2_t v13 = *v12;
    float64x2_t v14 = v12[1];
    float32x4_t v15 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(a1 + 12));
    float64x2_t v16 = (float64x2_t)vdupq_n_s64(0x3FC5555555555555uLL);
    float64x2_t v17 = vmulq_f64(vaddq_f64(v13, *v15), v16);
    v16.f64[0] = 0.166666667;
    float64x2_t v18 = vmulq_f64(vaddq_f64(v14, v15[1]), v16);
    v16.f64[0] = 0.666666667;
    float64x2_t v19 = vmlaq_f64(v18, v16, v11);
    int8x16_t result = (int8x16_t)vmlaq_f64(v17, (float64x2_t)vdupq_n_s64(0x3FE5555555555555uLL), v10);
  }
  else
  {
    v40.f64[0] = 0.0;
    float64x2_t v39 = 0u;
    v38.f64[0] = 0.0;
    float64x2_t v37 = 0u;
    float64x2_t v21 = geom::catmull_clark_vertex_evaluator<double>::compute_edge_and_face_sums(a1, a2, &v37, &v39, (float64x2_t)0, a4, a5);
    LODWORD(v21.f64[0]) = *(_DWORD *)(a1 + 24);
    v21.f64[0] = (double)*(unint64_t *)&v21.f64[0];
    v22.f64[0] = (v21.f64[0] + -2.0) / v21.f64[0];
    v23.f64[0] = v21.f64[0] * v21.f64[0];
    v24.f64[0] = 1.0 / (v21.f64[0] * v21.f64[0]);
    float v25 = (float64x2_t *)(a2 + 32 * v8);
    float64x2_t v26 = v25[1];
    float64x2_t v27 = vmulq_f64(vaddq_f64(v38, v40), v24);
    float64x2_t v28 = vmlaq_n_f64(vmulq_n_f64(vaddq_f64(v37, v39), v24.f64[0]), *v25, v22.f64[0]);
    float64x2_t v29 = vmlaq_f64(v27, v26, v22);
    __asm { FMOV            V1.2D, #2.0 }
    float64x2_t v35 = vmlaq_f64(vmlaq_f64(vmlaq_f64(v38, v26, v21), _Q1, v40), v29, v23);
    float64x2_t v36 = vaddq_f64(v39, vmlaq_n_f64(vmlaq_f64(vmlaq_n_f64(v37, *v25, v21.f64[0]), _Q1, v39), v28, v21.f64[0] * v21.f64[0]));
    v21.f64[0] = (v21.f64[0] + 5.0) * v21.f64[0];
    float64x2_t v19 = vdivq_f64(vaddq_f64(v40, v35), v21);
    int8x16_t result = (int8x16_t)vdivq_f64(v36, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v21.f64[0], 0));
  }
  result.i64[1] = vextq_s8(result, result, 8uLL).u64[0];
  *(int8x16_t *)a3 = result;
  *(float64x2_t *)(a3 + 16) = v19;
  return result;
}

float64_t geom_apply_catmull_clark_normal_stencil_3d@<D0>(int a1@<W0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned int *a5@<X4>, float64x2_t *a6@<X8>)
{
  geom::catmull_clark_vertex_evaluator<float>::catmull_clark_vertex_evaluator((uint64_t)v11, a1, a3, a5[a4 - 1], a5, a4);
  geom::catmull_clark_vertex_evaluator<double>::normal(v11, a2, v10);
  float64_t result = v10[0].f64[0];
  float64x2_t v9 = v10[1];
  *a6 = v10[0];
  a6[1] = v9;
  return result;
}

float64x2_t geom::catmull_clark_vertex_evaluator<double>::normal@<Q0>(unsigned char *a1@<X0>, uint64_t a2@<X1>, float64x2_t *a3@<X8>)
{
  float64x2_t v28 = 0u;
  float64x2_t v29 = 0u;
  float64x2_t v26 = 0u;
  float64x2_t v27 = 0u;
  if (!a1[1])
  {
    geom::catmull_clark_vertex_evaluator<double>::compute_average_face_normal((uint64_t)a1, a2, v24);
    float64x2_t v22 = v24[1];
    float64x2_t v23 = v24[0];
    if (*a1) {
      geom::catmull_clark_vertex_evaluator<double>::compute_xor_boundary_tangents((uint64_t)a1, a2, &v28, &v26);
    }
    else {
      geom::catmull_clark_vertex_evaluator<double>::compute_xor_tangents((uint64_t)a1, a2, &v28, &v26);
    }
    v12.f64[0] = v29.f64[0];
    v13.f64[0] = v27.f64[0];
    float64x2_t v14 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v29), v26, 1), v27, v28, 1);
    v13.f64[1] = v26.f64[0];
    v12.f64[1] = v28.f64[0];
    float64x2_t v15 = vmlaq_f64(vmulq_f64(v13, vnegq_f64(v28)), v26, v12);
    float64x2_t v16 = vmulq_f64(v15, v15);
    if (fabs(v16.f64[1] + vmulq_f64(v14, v14).f64[0] + v16.f64[0]) > 1.0e-12)
    {
      v9.f64[1] = v15.f64[0];
      float64x2_t v17 = (float64x2_t)vextq_s8((int8x16_t)v15, (int8x16_t)v15, 8uLL);
      float64x2_t v18 = vmulq_f64(v23, v9);
      float64x2_t v19 = vmulq_f64(v22, v17);
      v18.f64[0] = v19.f64[0] + vaddvq_f64(v18);
      v19.f64[0] = 0.0;
      int8x16_t v20 = (int8x16_t)vdupq_lane_s64(vcgtq_f64(v19, v18).i64[0], 0);
      float64x2_t v8 = (float64x2_t)vbslq_s8(v20, (int8x16_t)vnegq_f64(v9), (int8x16_t)v9);
      float64x2_t v11 = (float64x2_t)vbslq_s8(v20, (int8x16_t)vnegq_f64(v17), (int8x16_t)v17);
      *(void *)&v9.f64[0] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
      float64x2_t v10 = vmulq_f64(v8, v8);
      v10.f64[0] = vmulq_f64(v11, v11).f64[0] + vaddvq_f64(v10);
      goto LABEL_15;
    }
    float64x2_t v11 = v22;
    float64x2_t v8 = v23;
LABEL_14:
    *(void *)&v9.f64[0] = vextq_s8((int8x16_t)v8, (int8x16_t)v8, 8uLL).u64[0];
    float64x2_t v10 = vmulq_f64(v11, v11);
    v10.f64[0] = v10.f64[0] + vaddvq_f64(vmulq_f64(v8, v8));
    goto LABEL_15;
  }
  if (*a1) {
    geom::catmull_clark_vertex_evaluator<double>::compute_bspline_boundary_tangents((uint64_t)a1, a2, &v28, &v26);
  }
  else {
    geom::catmull_clark_vertex_evaluator<double>::compute_bspline_tangents((uint64_t)a1, a2, &v28, &v26);
  }
  v6.f64[0] = v29.f64[0];
  v7.f64[0] = v27.f64[0];
  float64x2_t v8 = vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v29), v26, 1), v27, v28, 1);
  v7.f64[1] = v26.f64[0];
  v6.f64[1] = v28.f64[0];
  float64x2_t v9 = vmlaq_f64(vmulq_f64(v7, vnegq_f64(v28)), v26, v6);
  float64x2_t v10 = vmulq_f64(v9, v9);
  v10.f64[0] = v10.f64[1] + vmulq_f64(v8, v8).f64[0] + v10.f64[0];
  if (fabs(v10.f64[0]) <= 1.0e-12)
  {
    geom::catmull_clark_vertex_evaluator<double>::compute_average_face_normal((uint64_t)a1, a2, v25);
    float64x2_t v8 = v25[0];
    float64x2_t v11 = v25[1];
    goto LABEL_14;
  }
  float64x2_t v11 = (float64x2_t)vextq_s8((int8x16_t)v9, (int8x16_t)v9, 8uLL);
LABEL_15:
  v10.f64[0] = 1.0 / sqrt(v10.f64[0]);
  v8.f64[1] = v9.f64[0];
  float64x2_t result = vmulq_n_f64(v8, v10.f64[0]);
  *a3 = result;
  a3[1] = vmulq_f64(v11, v10);
  return result;
}

uint64_t geom::catmull_clark_vertex_evaluator<float>::catmull_clark_vertex_evaluator(uint64_t result, int a2, uint64_t a3, uint64_t a4, unsigned int *a5, uint64_t a6)
{
  *(_DWORD *)(result + 4) = a2;
  *(void *)(result + 16) = a5;
  *(void *)(result + 24) = a6;
  *(void *)(result + 32) = a3;
  *(void *)(result + 40) = a4;
  uint64_t v6 = *a5;
  *(unsigned char *)(result + 2) = v6 == 4;
  if (v6)
  {
    uint64_t v7 = 0;
    while (*(_DWORD *)(a3 + 4 * v7) != a2)
    {
      if (v6 == ++v7) {
        goto LABEL_5;
      }
    }
    int v8 = *(_DWORD *)(a3 + 4 * (((int)v7 + 1) % v6));
  }
  else
  {
LABEL_5:
    int v8 = -1;
  }
  if (a6 == 1) {
    unsigned int v9 = 0;
  }
  else {
    unsigned int v9 = a5[a6 - 2];
  }
  unsigned int v10 = a5[a6 - 1];
  uint64_t v11 = v10 - v9;
  if (v11 != 4) {
    *(unsigned char *)(result + 2) = 0;
  }
  if (v10 == v9)
  {
LABEL_16:
    int v16 = -1;
  }
  else
  {
    float64x2_t v12 = (int *)(a3 + 4 * v9);
    uint64_t v13 = 1;
    float64x2_t v14 = v12;
    while (1)
    {
      int v15 = *v14++;
      if (v15 == a2) {
        break;
      }
      --v13;
      if (v11 + v13 == 1) {
        goto LABEL_16;
      }
    }
    int v16 = v12[((int)v11 - (int)v13) % v11];
  }
  *(unsigned char *)float64x2_t result = v8 != v16;
  if (v8 == v16)
  {
    *(void *)(result + 8) = -1;
    if (a6 == 4 && *a5 == 4 && a5[1] == 8 && a5[2] == 12)
    {
      a5 += 3;
      int v17 = 16;
      goto LABEL_29;
    }
LABEL_30:
    BOOL v18 = 0;
    goto LABEL_31;
  }
  *(_DWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 12) = v16;
  if (a6 != 2)
  {
    if (a6 == 1)
    {
      int v17 = 4;
      goto LABEL_29;
    }
    goto LABEL_30;
  }
  if (*a5 != 4) {
    goto LABEL_30;
  }
  ++a5;
  int v17 = 8;
LABEL_29:
  BOOL v18 = *a5 == v17;
LABEL_31:
  *(unsigned char *)(result + 1) = v18;
  return result;
}

float32x4_t geom::catmull_clark_vertex_evaluator<float>::compute_edge_and_face_sums(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4, float32x4_t result, double a6, float32x4_t a7)
{
  result.i64[0] = 0;
  *a4 = 0u;
  *a3 = 0u;
  if (*(_DWORD *)(a1 + 24))
  {
    unint64_t v7 = 0;
    do
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 16);
        unsigned int v9 = *(_DWORD *)(v8 + 4 * v7 - 4);
      }
      else
      {
        unsigned int v9 = 0;
        uint64_t v8 = *(void *)(a1 + 16);
      }
      float32x4_t v10 = 0uLL;
      uint64_t v11 = *(_DWORD *)(v8 + 4 * v7) - v9;
      if (v11)
      {
        uint64_t v12 = 0;
        uint64_t v13 = *(void *)(a1 + 32) + 4 * v9;
        float32x4_t v14 = *a3;
        do
        {
          uint64_t v15 = *(unsigned int *)(v13 + 4 * v12);
          a7 = *(float32x4_t *)(a2 + 16 * v15);
          uint64_t v16 = v12 + 1;
          if (v15 == *(_DWORD *)(a1 + 4))
          {
            if (v11 - 1 == v12) {
              uint64_t v17 = 0;
            }
            else {
              uint64_t v17 = (v12 + 1);
            }
            float32x4_t v14 = vaddq_f32(v14, *(float32x4_t *)(a2 + 16 * *(unsigned int *)(v13 + 4 * v17)));
            *a3 = v14;
          }
          float32x4_t v10 = vaddq_f32(v10, a7);
          uint64_t v12 = v16;
        }
        while (v11 != v16);
      }
      a7.f32[0] = (float)v11;
      a7 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a7.f32, 0);
      float64x2_t result = vaddq_f32(vdivq_f32(v10, a7), *a4);
      *a4 = result;
      ++v7;
    }
    while (v7 < *(unsigned int *)(a1 + 24));
  }
  return result;
}

uint64_t geom::catmull_clark_vertex_evaluator<float>::compute_bspline_boundary_tangents(uint64_t result, uint64_t a2, _OWORD *a3, float32x4_t *a4)
{
  *a3 = 0u;
  *a4 = 0u;
  float32x4_t v4 = *(unsigned int **)(result + 16);
  uint64_t v5 = *(void *)(result + 32);
  uint64_t v6 = *v4;
  uint64_t v7 = *(unsigned int *)(result + 4);
  if (v6)
  {
    uint64_t v8 = 0;
    while (*(_DWORD *)(v5 + 4 * v8) != v7)
    {
      if (v6 == ++v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    LOBYTE(v8) = 0;
  }
  uint64_t v9 = *(unsigned int *)(v5 + 4 * (((_BYTE)v8 + 1) & 3));
  uint64_t v10 = *(unsigned int *)(v5 + 4 * (((_BYTE)v8 - 1) & 3));
  int v11 = *(_DWORD *)(result + 24);
  if (v11 == 2)
  {
    uint64_t v13 = *(unsigned int *)(v5 + 4 * (((_BYTE)v8 + 2) & 3));
    uint64_t v14 = v5 + 4 * v6;
    uint64_t v15 = v4[1] - v6;
    if (v15)
    {
      uint64_t v16 = 0;
      while (*(_DWORD *)(v14 + 4 * v16) != v7)
      {
        if (v15 == ++v16) {
          goto LABEL_13;
        }
      }
    }
    else
    {
LABEL_13:
      LOBYTE(v16) = 0;
    }
    uint64_t v17 = *(unsigned int *)(v14 + 4 * (((_BYTE)v16 + 2) & 3));
    uint64_t v18 = *(unsigned int *)(v14 + 4 * (((_BYTE)v16 - 1) & 3));
    *a3 = vsubq_f32(*(float32x4_t *)(a2 + 16 * v9), *(float32x4_t *)(a2 + 16 * v18));
    __asm
    {
      FMOV            V2.4S, #4.0
      FMOV            V0.4S, #6.0
    }
    float32x4_t v12 = vdivq_f32(vmlaq_f32(vsubq_f32(vsubq_f32(vaddq_f32(*(float32x4_t *)(a2 + 16 * v13), *(float32x4_t *)(a2 + 16 * v17)), *(float32x4_t *)(a2 + 16 * v18)), *(float32x4_t *)(a2 + 16 * v9)), _Q2, vsubq_f32(*(float32x4_t *)(a2 + 16 * v10), *(float32x4_t *)(a2 + 16 * v7))), _Q0);
  }
  else
  {
    if (v11 != 1) {
      return result;
    }
    *a3 = vsubq_f32(*(float32x4_t *)(a2 + 16 * v9), *(float32x4_t *)(a2 + 16 * v7));
    float32x4_t v12 = vsubq_f32(*(float32x4_t *)(a2 + 16 * v10), *(float32x4_t *)(a2 + 16 * v7));
  }
  *a4 = v12;
  return result;
}

float32x4_t geom::catmull_clark_vertex_evaluator<float>::compute_bspline_tangents(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v4 = 0;
  uint64_t v31 = *MEMORY[0x263EF8340];
  *a3 = 0u;
  *a4 = 0u;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(unsigned int *)(a1 + 4);
  __asm { FMOV            V0.4S, #0.25 }
  uint64_t v12 = v5;
  do
  {
    unint64_t v13 = 0;
    v26[v4] = 0uLL;
    float32x4_t v14 = 0uLL;
    do
    {
      uint64_t v15 = *(unsigned int *)(v12 + 4 * v13);
      unint64_t v16 = v13 + 1;
      if (v15 == v6)
      {
        _CF = v13 >= 3;
        unint64_t v17 = v13 - 3;
        if (!_CF) {
          unint64_t v17 = v16;
        }
        v26[v4] = vaddq_f32(*(float32x4_t *)(a2 + 16 * v6), *(float32x4_t *)(a2 + 16 * *(unsigned int *)(v5 + 16 * v4 + 4 * v17)));
      }
      float32x4_t v14 = vaddq_f32(v14, *(float32x4_t *)(a2 + 16 * v15));
      unint64_t v13 = v16;
    }
    while (v16 != 4);
    *(&v27 + v4++) = vmulq_f32(v14, _Q0);
    v12 += 16;
  }
  while (v4 != 4);
  float32x4_t v18 = v27;
  float32x4_t v19 = v28;
  float32x4_t v20 = vmulq_f32(vaddq_f32(vaddq_f32(v26[0], v27), v30), _Q0);
  float32x4_t v21 = vmulq_f32(vaddq_f32(v27, vaddq_f32(v26[1], v28)), _Q0);
  float32x4_t v22 = vmulq_f32(vaddq_f32(v28, vaddq_f32(v26[2], v29)), _Q0);
  __asm { FMOV            V16.4S, #4.0 }
  float32x4_t v24 = vaddq_f32(v30, vmlaq_f32(v29, _Q16, vmulq_f32(vaddq_f32(v29, vaddq_f32(v30, v26[3])), _Q0)));
  *a3 = vsubq_f32(vaddq_f32(v27, vmlaq_f32(v30, _Q16, v20)), vaddq_f32(v29, vmlaq_f32(v28, _Q16, v22)));
  float32x4_t result = vsubq_f32(vaddq_f32(v19, vmlaq_f32(v18, _Q16, v21)), v24);
  *a4 = result;
  return result;
}

double geom::catmull_clark_vertex_evaluator<float>::compute_average_face_normal(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned int *)(a1 + 4);
  float32x4_t v3 = *(float32x4_t *)(a2 + 16 * v2);
  uint64_t v4 = *(unsigned int **)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  unint64_t v6 = *v4;
  if (v6)
  {
    unint64_t v7 = 0;
    unint64_t v8 = 1;
    while (1)
    {
      int v9 = *(_DWORD *)(v5 + 4 * v7++);
      if (v9 == v2) {
        break;
      }
      if (v6 == v7) {
        goto LABEL_8;
      }
    }
    unint64_t v8 = v7;
  }
  else
  {
    unint64_t v8 = 1;
  }
LABEL_8:
  float32x4_t v10 = vsubq_f32(*(float32x4_t *)(a2 + 16 * *(unsigned int *)(v5 + 4 * (v8 % v6))), v3);
  uint64_t v11 = *(void *)(a1 + 24);
  float32x4_t v12 = 0uLL;
  if (v11 < 2)
  {
    float32x4_t v19 = v10;
  }
  else
  {
    uint64_t v13 = 1;
    do
    {
      int v14 = v6;
      uint64_t v15 = v5 + 4 * v6;
      LODWORD(v6) = v4[v13];
      unint64_t v16 = (v6 - v14);
      if (v16)
      {
        uint64_t v17 = 0;
        while (*(_DWORD *)(v15 + 4 * v17) != v2)
        {
          if (v16 == ++v17) {
            goto LABEL_14;
          }
        }
        unint64_t v18 = (v17 + 1);
      }
      else
      {
LABEL_14:
        unint64_t v18 = 1;
      }
      float32x4_t v19 = vsubq_f32(*(float32x4_t *)(a2+ 16* *(unsigned int *)(v15+ 4* (v18 - (v18 / v16) * (unint64_t)v16))), v3);
      int32x4_t v20 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL), vnegq_f32(v10)), v19, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v10, (int32x4_t)v10), (int8x16_t)v10, 0xCuLL));
      float32x4_t v12 = vaddq_f32(v12, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v20, v20), (int8x16_t)v20, 0xCuLL));
      ++v13;
      float32x4_t v10 = v19;
    }
    while (v13 != *(void *)(a1 + 24));
  }
  if (*(unsigned char *)a1)
  {
    int v21 = v11 - 1;
    if (v11 == 1) {
      unsigned int v22 = 0;
    }
    else {
      unsigned int v22 = v4[(v11 - 2)];
    }
    uint64_t v23 = v5 + 4 * v22;
    unint64_t v24 = v4[v21] - v22;
    if (v24)
    {
      uint64_t v25 = 0;
      while (*(_DWORD *)(v23 + 4 * v25) != v2)
      {
        if (v24 == ++v25) {
          goto LABEL_27;
        }
      }
      uint64_t v26 = v25;
    }
    else
    {
LABEL_27:
      uint64_t v26 = 0;
    }
    float32x4_t v27 = vsubq_f32(*(float32x4_t *)(a2 + 16 * *(unsigned int *)(v23 + 4 * ((v24 + v26 - 1) % v24))), v3);
    int32x4_t v28 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v27, (int32x4_t)v27), (int8x16_t)v27, 0xCuLL), vnegq_f32(v19)), v27, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), (int8x16_t)v19, 0xCuLL));
    v12.i64[0] = vaddq_f32(v12, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v28, v28), (int8x16_t)v28, 0xCuLL)).u64[0];
  }
  return *(double *)v12.i64;
}

void geom::catmull_clark_vertex_evaluator<float>::compute_xor_boundary_tangents(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  *a3 = vsubq_f32(*(float32x4_t *)(a2 + 16 * v7), *(float32x4_t *)(a2 + 16 * v8));
  unsigned int v9 = *(_DWORD *)(a1 + 24);
  if (v9 == 2)
  {
    uint64_t v12 = *(void *)(a1 + 32);
    unint64_t v13 = **(unsigned int **)(a1 + 16);
    uint64_t v14 = *(unsigned int *)(a1 + 4);
    if (v13)
    {
      uint64_t v15 = 0;
      while (*(_DWORD *)(v12 + 4 * v15) != v14)
      {
        if (v13 == ++v15) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      uint64_t v15 = 0;
    }
    float32x4_t v11 = vsubq_f32(*(float32x4_t *)(a2 + 16 * *(unsigned int *)(v12 + 4 * ((v13 + v15 - 1) % v13))), *(float32x4_t *)(a2 + 16 * v14));
    goto LABEL_33;
  }
  if (v9 == 1)
  {
    v10.i64[0] = 0xC0000000C0000000;
    v10.i64[1] = 0xC0000000C0000000;
    float32x4_t v11 = vmlaq_f32(vaddq_f32(*(float32x4_t *)(a2 + 16 * v7), *(float32x4_t *)(a2 + 16 * v8)), v10, *(float32x4_t *)(a2 + 16 * *(unsigned int *)(a1 + 4)));
LABEL_33:
    *a4 = v11;
    return;
  }
  if (!*(unsigned char *)(a1 + 2))
  {
    uint64_t v34 = *(unsigned int *)(a1 + 8);
    uint64_t v35 = *(unsigned int *)(a1 + 12);
    float32x4_t v36 = vsubq_f32(*(float32x4_t *)(a2 + 16 * v34), *(float32x4_t *)(a2 + 16 * v35));
    *a3 = v36;
    v36.i32[0] = *(_DWORD *)(a1 + 24);
    float v37 = 3.14159265 / (double)v36.u64[0];
    float32x4_t v38 = 0uLL;
    *a4 = 0u;
    if ((*(_DWORD *)(a1 + 24) & 0xFFFFFFFE) != 0)
    {
      unint64_t v39 = 1;
      do
      {
        float64x2_t v40 = (_DWORD *)(*(void *)(a1 + 16) + 4 * v39);
        uint64_t v41 = *(v40 - 1);
        uint64_t v42 = *(void *)(a1 + 32) + 4 * v41;
        unint64_t v43 = (*v40 - v41);
        if (v43)
        {
          uint64_t v44 = 0;
          while (*(_DWORD *)(v42 + 4 * v44) != *(_DWORD *)(a1 + 4))
          {
            if (v43 == ++v44) {
              goto LABEL_29;
            }
          }
          unint64_t v45 = (v44 + 1);
        }
        else
        {
LABEL_29:
          unint64_t v45 = 1;
        }
        float32x4_t v38 = vmlaq_n_f32(v38, *(float32x4_t *)(a2+ 16* *(unsigned int *)(v42+ 4* (v45 - (v45 / v43)* (unint64_t)v43))), sinf(v37 * (float)v39));
        *a4 = v38;
        ++v39;
      }
      while (v39 < *(unsigned int *)(a1 + 24));
    }
    float32x4_t v50 = v38;
    __float2 v46 = __sincosf_stret(v37);
    float32x4_t v47 = vmulq_n_f32(v50, (float)(v46.__cosval * 2.0) + -2.0);
    *a4 = v47;
    float32x4_t v11 = vmlaq_n_f32(v47, vaddq_f32(*(float32x4_t *)(a2 + 16 * v34), *(float32x4_t *)(a2 + 16 * v35)), v46.__sinval);
    goto LABEL_33;
  }
  double v16 = (double)v9;
  __double2 v17 = __sincos_stret(3.14159265 / (double)v9);
  float cosval = v17.__cosval;
  float sinval = v17.__sinval;
  float v20 = (float)(3 * v9) + cosval;
  float v21 = (float)-(float)((float)((float)(cosval * 2.0) + 1.0) * sqrtf(cosval + 1.0)) / (float)(v20 * sqrtf(1.0 - cosval));
  float32x4_t v22 = vmlaq_n_f32(vmulq_n_f32(*(float32x4_t *)(a2 + 16 * v8), v21), *(float32x4_t *)(a2 + 16 * *(unsigned int *)(a1 + 4)), (float)(sinval * -4.0) / v20);
  *a4 = v22;
  if (*(_DWORD *)(a1 + 24))
  {
    uint64_t v23 = 0;
    float v24 = 0.0;
    float v25 = 1.0 / v20;
    do
    {
      float v48 = v21;
      float32x4_t v49 = v22;
      unint64_t v26 = v23 + 1;
      double v27 = sin((double)(v23 + 1) * 3.14159265 / v16);
      if (v23)
      {
        uint64_t v28 = *(void *)(a1 + 16);
        unsigned int v29 = *(_DWORD *)(v28 + 4 * v23 - 4);
      }
      else
      {
        unsigned int v29 = 0;
        uint64_t v28 = *(void *)(a1 + 16);
      }
      uint64_t v30 = *(void *)(a1 + 32) + 4 * v29;
      uint64_t v31 = *(_DWORD *)(v28 + 4 * v23) - v29;
      if (v31)
      {
        uint64_t v32 = 0;
        while (*(_DWORD *)(v30 + 4 * v32) != *(_DWORD *)(a1 + 4))
        {
          if (v31 == ++v32) {
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        LOBYTE(v32) = 0;
      }
      float v33 = v27;
      float32x4_t v22 = vmlaq_n_f32(vmlaq_n_f32(v49, *(float32x4_t *)(a2 + 16 * *(unsigned int *)(v30 + 4 * (((_BYTE)v32 + 1) & 3))), v48), *(float32x4_t *)(a2 + 16 * *(unsigned int *)(v30 + 4 * (((_BYTE)v32 + 2) & 3))), v25 * (float)(v24 + v33));
      *a4 = v22;
      float v21 = v25 * (float)(v33 * 4.0);
      ++v23;
      float v24 = v33;
    }
    while (v26 < *(unsigned int *)(a1 + 24));
  }
}

void geom::catmull_clark_vertex_evaluator<float>::compute_xor_tangents(uint64_t a1, uint64_t a2, float32x4_t *a3, float32x4_t *a4)
{
  *a3 = 0u;
  *a4 = 0u;
  unsigned int v8 = *(_DWORD *)(a1 + 24);
  double v9 = cos(6.28318531 / (double)v8);
  double v10 = cos(3.14159265 / (double)v8);
  *(double *)v15.i64 = geom::catmull_clark_vertex_evaluator<float>::edge_point(a1, 0, a2, v10, v11, v12, v13, v14);
  float32x4_t v17 = 0uLL;
  unsigned int v18 = **(_DWORD **)(a1 + 16);
  if (v18)
  {
    float32x4_t v19 = *(unsigned int **)(a1 + 32);
    uint64_t v20 = **(unsigned int **)(a1 + 16);
    do
    {
      unsigned int v21 = *v19++;
      float32x4_t v17 = vaddq_f32(v17, *(float32x4_t *)(a2 + 16 * v21));
      --v20;
    }
    while (v20);
  }
  if (v8)
  {
    unsigned int v22 = 0;
    float v23 = v9;
    *(float *)v16.i32 = (float)v18;
    float v24 = (float)(v23 + 1.0) + v10 * sqrtf((float)(v23 + 9.0) + (float)(v23 + 9.0));
    float32x4_t v25 = vdivq_f32(v17, (float32x4_t)vdupq_lane_s32(v16, 0));
    float v26 = 1.0;
    do
    {
      float32x4_t v45 = v25;
      float32x4_t v46 = v15;
      unsigned int v27 = v22 + 1;
      if (v22 + 1 == v8) {
        unsigned int v28 = 0;
      }
      else {
        unsigned int v28 = v22 + 1;
      }
      double v29 = cos((double)v28 * 6.28318531 / (double)v8);
      *(double *)v15.i64 = geom::catmull_clark_vertex_evaluator<float>::edge_point(a1, v28, a2, v29, v30, v31, v32, v33);
      if (v27 == v8)
      {
        unsigned int v34 = 0;
        uint64_t v35 = *(void *)(a1 + 16);
      }
      else
      {
        uint64_t v35 = *(void *)(a1 + 16);
        unsigned int v34 = *(_DWORD *)(v35 + 4 * v22);
      }
      v36.i32[1] = v46.i32[1];
      uint64_t v37 = *(unsigned int *)(v35 + 4 * v28);
      float32x4_t v38 = 0uLL;
      if (v37 > v34)
      {
        uint64_t v39 = v37 - v34;
        float64x2_t v40 = (unsigned int *)(*(void *)(a1 + 32) + 4 * v34);
        do
        {
          unsigned int v41 = *v40++;
          float32x4_t v38 = vaddq_f32(v38, *(float32x4_t *)(a2 + 16 * v41));
          --v39;
        }
        while (v39);
      }
      float v42 = v29;
      *(float *)v36.i32 = (float)(v37 - v34);
      float v43 = v26 + v42;
      float32x4_t v25 = vdivq_f32(v38, (float32x4_t)vdupq_lane_s32(v36, 0));
      *a3 = vmlaq_n_f32(vmlaq_n_f32(*a3, v46, v26 * v24), v45, v26 + v42);
      float32x4_t v44 = vmlaq_n_f32(*a4, v15, v26 * v24);
      float v26 = v42;
      *a4 = vmlaq_n_f32(v44, v25, v43);
      ++v22;
    }
    while (v27 != v8);
  }
}

double geom::catmull_clark_vertex_evaluator<float>::edge_point(uint64_t a1, unsigned int a2, uint64_t a3, double a4, double a5, double a6, double a7, float32x4_t a8)
{
  uint64_t v8 = *(unsigned int *)(a1 + 4);
  if (a2)
  {
    uint64_t v9 = *(void *)(a1 + 16);
    unsigned int v10 = *(_DWORD *)(v9 + 4 * (a2 - 1));
  }
  else
  {
    unsigned int v10 = 0;
    uint64_t v9 = *(void *)(a1 + 16);
  }
  uint64_t v11 = *(void *)(a1 + 32);
  uint64_t v12 = v11 + 4 * v10;
  uint64_t v13 = *(unsigned int *)(v9 + 4 * a2);
  unint64_t v14 = v13 - v10;
  if (v14)
  {
    uint64_t v16 = 0;
    unint64_t v15 = 1;
    while (*(_DWORD *)(v12 + 4 * v16) != v8)
    {
      if (v14 == ++v16) {
        goto LABEL_11;
      }
    }
    unint64_t v15 = (v16 + 1);
  }
  else
  {
    unint64_t v15 = 1;
  }
LABEL_11:
  unint64_t v17 = v15 - (v15 / v14) * (unint64_t)v14;
  unsigned int v18 = (a2 - 1 + *(_DWORD *)(a1 + 24)) % *(_DWORD *)(a1 + 24);
  if (a2) {
    unsigned int v19 = *(_DWORD *)(v9 + 4 * (a2 - 1));
  }
  else {
    unsigned int v19 = 0;
  }
  uint64_t v20 = *(unsigned int *)(v12 + 4 * v17);
  float32x4_t v21 = 0uLL;
  if (v13 > v19)
  {
    uint64_t v22 = v13 - v19;
    float v23 = (unsigned int *)(v11 + 4 * v19);
    do
    {
      unsigned int v24 = *v23++;
      float32x4_t v21 = vaddq_f32(v21, *(float32x4_t *)(a3 + 16 * v24));
      --v22;
    }
    while (v22);
  }
  if (v18) {
    unsigned int v25 = *(_DWORD *)(v9 + 4 * (v18 - 1));
  }
  else {
    unsigned int v25 = 0;
  }
  float32x4_t v26 = *(float32x4_t *)(a3 + 16 * v8);
  uint64_t v27 = *(unsigned int *)(v9 + 4 * v18);
  float32x4_t v28 = 0uLL;
  if (v27 > v25)
  {
    uint64_t v29 = v27 - v25;
    double v30 = (unsigned int *)(v11 + 4 * v25);
    do
    {
      unsigned int v31 = *v30++;
      a8 = *(float32x4_t *)(a3 + 16 * v31);
      float32x4_t v28 = vaddq_f32(v28, a8);
      --v29;
    }
    while (v29);
  }
  a8.f32[0] = (float)(v13 - v19);
  float32x4_t v32 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)a8.f32, 0);
  float32x4_t v33 = vdivq_f32(v21, v32);
  v32.f32[0] = (float)(v27 - v25);
  float32x4_t v34 = vaddq_f32(v33, vaddq_f32(vaddq_f32(v26, *(float32x4_t *)(a3 + 16 * v20)), vdivq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 0))));
  __asm { FMOV            V1.4S, #0.25 }
  *(void *)&double result = vmulq_f32(v34, _Q1).u64[0];
  return result;
}

float64x2_t geom::catmull_clark_vertex_evaluator<double>::compute_edge_and_face_sums(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4, float64x2_t result, double a6, float64x2_t a7)
{
  result.f64[0] = 0.0;
  *a4 = 0u;
  a4[1] = 0u;
  *a3 = 0u;
  a3[1] = 0u;
  if (*(_DWORD *)(a1 + 24))
  {
    unint64_t v7 = 0;
    do
    {
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 16);
        unsigned int v9 = *(_DWORD *)(v8 + 4 * v7 - 4);
      }
      else
      {
        unsigned int v9 = 0;
        uint64_t v8 = *(void *)(a1 + 16);
      }
      float64x2_t v10 = 0uLL;
      float64x2_t v11 = 0uLL;
      uint64_t v12 = *(_DWORD *)(v8 + 4 * v7) - v9;
      if (v12)
      {
        uint64_t v13 = 0;
        uint64_t v14 = *(void *)(a1 + 32) + 4 * v9;
        float64x2_t v15 = *a3;
        a7 = a3[1];
        do
        {
          uint64_t v16 = *(unsigned int *)(v14 + 4 * v13);
          unint64_t v17 = (float64x2_t *)(a2 + 32 * v16);
          float64x2_t v18 = *v17;
          float64x2_t v19 = v17[1];
          uint64_t v20 = v13 + 1;
          if (v16 == *(_DWORD *)(a1 + 4))
          {
            if (v12 - 1 == v13) {
              uint64_t v21 = 0;
            }
            else {
              uint64_t v21 = (v13 + 1);
            }
            uint64_t v22 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(v14 + 4 * v21));
            float64x2_t v15 = vaddq_f64(v15, *v22);
            a7 = vaddq_f64(a7, v22[1]);
            *a3 = v15;
            a3[1] = a7;
          }
          float64x2_t v11 = vaddq_f64(v11, v19);
          float64x2_t v10 = vaddq_f64(v10, v18);
          uint64_t v13 = v20;
        }
        while (v12 != v20);
      }
      a7.f64[0] = (double)v12;
      double result = vaddq_f64(vdivq_f64(v10, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v12), 0)), *a4);
      float64x2_t v23 = vaddq_f64(vdivq_f64(v11, a7), a4[1]);
      *a4 = result;
      a4[1] = v23;
      ++v7;
    }
    while (v7 < *(unsigned int *)(a1 + 24));
  }
  return result;
}

uint64_t geom::catmull_clark_vertex_evaluator<double>::compute_bspline_boundary_tangents(uint64_t result, uint64_t a2, _OWORD *a3, float64x2_t *a4)
{
  *a3 = 0u;
  a3[1] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  uint64_t v4 = *(unsigned int **)(result + 16);
  uint64_t v5 = *(void *)(result + 32);
  uint64_t v6 = *v4;
  uint64_t v7 = *(unsigned int *)(result + 4);
  if (v6)
  {
    uint64_t v8 = 0;
    while (*(_DWORD *)(v5 + 4 * v8) != v7)
    {
      if (v6 == ++v8) {
        goto LABEL_5;
      }
    }
  }
  else
  {
LABEL_5:
    LOBYTE(v8) = 0;
  }
  uint64_t v9 = *(unsigned int *)(v5 + 4 * (((_BYTE)v8 + 1) & 3));
  uint64_t v10 = *(unsigned int *)(v5 + 4 * (((_BYTE)v8 - 1) & 3));
  int v11 = *(_DWORD *)(result + 24);
  if (v11 == 2)
  {
    uint64_t v18 = *(unsigned int *)(v5 + 4 * (((_BYTE)v8 + 2) & 3));
    uint64_t v19 = v5 + 4 * v6;
    uint64_t v20 = v4[1] - v6;
    if (v20)
    {
      uint64_t v21 = 0;
      while (*(_DWORD *)(v19 + 4 * v21) != v7)
      {
        if (v20 == ++v21) {
          goto LABEL_13;
        }
      }
    }
    else
    {
LABEL_13:
      LOBYTE(v21) = 0;
    }
    uint64_t v22 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(v19 + 4 * (((_BYTE)v21 + 2) & 3)));
    float64x2_t v23 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(v19 + 4 * (((_BYTE)v21 - 1) & 3)));
    unsigned int v24 = (float64x2_t *)(a2 + 32 * v9);
    float64x2_t v25 = vsubq_f64(v24[1], v23[1]);
    *a3 = vsubq_f64(*v24, *v23);
    a3[1] = v25;
    float32x4_t v26 = (float64x2_t *)(a2 + 32 * v10);
    uint64_t v27 = (float64x2_t *)(a2 + 32 * v7);
    float64x2_t v28 = vsubq_f64(v26[1], v27[1]);
    float64x2_t v29 = vsubq_f64(*v26, *v27);
    double v30 = (float64x2_t *)(a2 + 32 * v18);
    __asm { FMOV            V4.2D, #4.0 }
    float64x2_t v36 = vmlaq_f64(vsubq_f64(vsubq_f64(vaddq_f64(*v30, *v22), *v23), *v24), _Q4, v29);
    float64x2_t v37 = vmlaq_f64(vsubq_f64(vsubq_f64(vaddq_f64(v30[1], v22[1]), v23[1]), v24[1]), _Q4, v28);
    __asm { FMOV            V1.2D, #6.0 }
    float64x2_t v16 = vdivq_f64(v37, _Q1);
    float64x2_t v17 = vdivq_f64(v36, _Q1);
  }
  else
  {
    if (v11 != 1) {
      return result;
    }
    uint64_t v12 = (float64x2_t *)(a2 + 32 * v9);
    uint64_t v13 = (float64x2_t *)(a2 + 32 * v7);
    float64x2_t v14 = vsubq_f64(v12[1], v13[1]);
    *a3 = vsubq_f64(*v12, *v13);
    a3[1] = v14;
    float64x2_t v15 = (float64x2_t *)(a2 + 32 * v10);
    float64x2_t v16 = vsubq_f64(v15[1], v13[1]);
    float64x2_t v17 = vsubq_f64(*v15, *v13);
  }
  *a4 = v17;
  a4[1] = v16;
  return result;
}

float64x2_t geom::catmull_clark_vertex_evaluator<double>::compute_bspline_tangents(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4)
{
  uint64_t v4 = 0;
  uint64_t v54 = *MEMORY[0x263EF8340];
  *a3 = 0u;
  a3[1] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(unsigned int *)(a1 + 4);
  __asm { FMOV            V0.2D, #0.25 }
  uint64_t v12 = v5;
  do
  {
    unint64_t v13 = 0;
    float64x2_t v14 = &v45[2 * v4];
    *float64x2_t v14 = 0uLL;
    v14[1] = 0uLL;
    float64x2_t v15 = 0uLL;
    float64x2_t v16 = 0uLL;
    do
    {
      uint64_t v17 = *(unsigned int *)(v12 + 4 * v13);
      unint64_t v18 = v13 + 1;
      if (v17 == v6)
      {
        _CF = v13 >= 3;
        unint64_t v19 = v13 - 3;
        if (!_CF) {
          unint64_t v19 = v18;
        }
        uint64_t v20 = (float64x2_t *)(a2 + 32 * v6);
        uint64_t v21 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(v5 + 16 * v4 + 4 * v19));
        float64x2_t v22 = vaddq_f64(*v20, *v21);
        float64x2_t v23 = vaddq_f64(v20[1], v21[1]);
        unsigned int v24 = &v45[2 * v4];
        *unsigned int v24 = v22;
        v24[1] = v23;
      }
      float64x2_t v25 = (float64x2_t *)(a2 + 32 * v17);
      float64x2_t v16 = vaddq_f64(v16, v25[1]);
      float64x2_t v15 = vaddq_f64(v15, *v25);
      unint64_t v13 = v18;
    }
    while (v18 != 4);
    float32x4_t v26 = &v46 + 2 * v4;
    *float32x4_t v26 = vmulq_f64(v15, _Q0);
    v26[1] = vmulq_f64(v16, _Q0);
    ++v4;
    v12 += 16;
  }
  while (v4 != 4);
  float64x2_t v27 = v46;
  float64x2_t v28 = v47;
  float64x2_t v29 = vmulq_f64(vaddq_f64(vaddq_f64(v45[1], v47), v53), _Q0);
  float64x2_t v30 = vmulq_f64(vaddq_f64(vaddq_f64(v45[0], v46), v52), _Q0);
  float64x2_t v31 = v48;
  float64x2_t v32 = v49;
  float64x2_t v33 = vmulq_f64(vaddq_f64(v47, vaddq_f64(v45[3], v49)), _Q0);
  float64x2_t v34 = vmulq_f64(vaddq_f64(v46, vaddq_f64(v45[2], v48)), _Q0);
  float64x2_t v35 = vmulq_f64(vaddq_f64(v49, vaddq_f64(v45[5], v51)), _Q0);
  float64x2_t v36 = vmulq_f64(vaddq_f64(v48, vaddq_f64(v45[4], v50)), _Q0);
  float64x2_t v37 = vmulq_f64(vaddq_f64(v51, vaddq_f64(v53, v45[7])), _Q0);
  __asm { FMOV            V23.2D, #4.0 }
  float64x2_t v39 = vaddq_f64(v52, vmlaq_f64(v50, _Q23, vmulq_f64(vaddq_f64(v50, vaddq_f64(v52, v45[6])), _Q0)));
  float64x2_t v40 = vmlaq_f64(v52, _Q23, v30);
  float64x2_t v41 = vaddq_f64(v51, vmlaq_f64(v49, _Q23, v35));
  float64x2_t v42 = vaddq_f64(v53, vmlaq_f64(v51, _Q23, v37));
  float64x2_t v43 = vaddq_f64(v47, vmlaq_f64(v53, _Q23, v29));
  *a3 = vsubq_f64(vaddq_f64(v46, v40), vaddq_f64(v50, vmlaq_f64(v48, _Q23, v36)));
  a3[1] = vsubq_f64(v43, v41);
  float64x2_t result = vsubq_f64(vaddq_f64(v31, vmlaq_f64(v27, _Q23, v34)), v39);
  *a4 = result;
  a4[1] = vsubq_f64(vaddq_f64(v32, vmlaq_f64(v28, _Q23, v33)), v42);
  return result;
}

uint64_t geom::catmull_clark_vertex_evaluator<double>::compute_average_face_normal@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, float64x2_t *a3@<X8>)
{
  uint64_t v3 = *(unsigned int *)(result + 4);
  uint64_t v4 = (float64x2_t *)(a2 + 32 * v3);
  float64x2_t v6 = *v4;
  float64x2_t v5 = v4[1];
  uint64_t v7 = *(unsigned int **)(result + 16);
  uint64_t v8 = *(void *)(result + 32);
  unint64_t v9 = *v7;
  if (v9)
  {
    unint64_t v10 = 0;
    unint64_t v11 = 1;
    while (1)
    {
      int v12 = *(_DWORD *)(v8 + 4 * v10++);
      if (v12 == v3) {
        break;
      }
      if (v9 == v10) {
        goto LABEL_8;
      }
    }
    unint64_t v11 = v10;
  }
  else
  {
    unint64_t v11 = 1;
  }
LABEL_8:
  unint64_t v13 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(v8 + 4 * (v11 % v9)));
  float64x2_t v14 = vsubq_f64(v13[1], v5);
  float64x2_t v15 = vsubq_f64(*v13, v6);
  uint64_t v16 = *(void *)(result + 24);
  float64x2_t v17 = 0uLL;
  if (v16 < 2)
  {
    float64x2_t v27 = v15;
    float64x2_t v26 = v14;
    float64x2_t v19 = 0uLL;
  }
  else
  {
    uint64_t v18 = 1;
    float64x2_t v19 = 0uLL;
    do
    {
      int v20 = v9;
      uint64_t v21 = v8 + 4 * v9;
      LODWORD(v9) = v7[v18];
      unint64_t v22 = (v9 - v20);
      if (v22)
      {
        uint64_t v23 = 0;
        while (*(_DWORD *)(v21 + 4 * v23) != v3)
        {
          if (v22 == ++v23) {
            goto LABEL_14;
          }
        }
        unint64_t v24 = (v23 + 1);
      }
      else
      {
LABEL_14:
        unint64_t v24 = 1;
      }
      float64x2_t v25 = (float64x2_t *)(a2
                          + 32
                          * *(unsigned int *)(v21
                                            + 4
                                            * (v24 - (v24 / v22) * (unint64_t)v22)));
      float64x2_t v26 = vsubq_f64(v25[1], v5);
      float64x2_t v27 = vsubq_f64(*v25, v6);
      v28.f64[0] = v26.f64[0];
      v28.f64[1] = v27.f64[0];
      float64x2_t v29 = vnegq_f64(v14);
      v14.f64[1] = v15.f64[0];
      *(void *)&v29.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(v29, v27, 1), v26, v15, 1);
      int64x2_t v30 = (int64x2_t)vmlaq_f64(vmulq_f64(v28, vnegq_f64(v15)), v27, v14);
      *(void *)&v29.f64[1] = v30.i64[0];
      float64x2_t v17 = vaddq_f64(v17, v29);
      float64x2_t v19 = vaddq_f64(v19, (float64x2_t)vdupq_laneq_s64(v30, 1));
      ++v18;
      float64x2_t v15 = v27;
      float64x2_t v14 = v26;
    }
    while (v18 != *(void *)(result + 24));
  }
  if (*(unsigned char *)result)
  {
    int v31 = v16 - 1;
    if (v16 == 1) {
      unsigned int v32 = 0;
    }
    else {
      unsigned int v32 = v7[(v16 - 2)];
    }
    uint64_t v33 = v8 + 4 * v32;
    unint64_t v34 = v7[v31] - v32;
    if (v34)
    {
      uint64_t v35 = 0;
      while (*(_DWORD *)(v33 + 4 * v35) != v3)
      {
        if (v34 == ++v35) {
          goto LABEL_27;
        }
      }
      uint64_t v36 = v35;
    }
    else
    {
LABEL_27:
      uint64_t v36 = 0;
    }
    float64x2_t v37 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(v33 + 4 * ((v34 + v36 - 1) % v34)));
    float64x2_t v38 = vsubq_f64(*v37, v6);
    float64x2_t v39 = vsubq_f64(v37[1], v5);
    v40.f64[0] = v39.f64[0];
    v40.f64[1] = v38.f64[0];
    *(void *)&v41.f64[0] = *(_OWORD *)&vmlaq_laneq_f64(vmulq_laneq_f64(vnegq_f64(v26), v38, 1), v39, v27, 1);
    v26.f64[1] = v27.f64[0];
    int64x2_t v42 = (int64x2_t)vmlaq_f64(vmulq_f64(v40, vnegq_f64(v27)), v38, v26);
    *(void *)&v41.f64[1] = v42.i64[0];
    float64x2_t v17 = vaddq_f64(v17, v41);
    float64x2_t v19 = vaddq_f64(v19, (float64x2_t)vdupq_laneq_s64(v42, 1));
  }
  *a3 = v17;
  a3[1] = v19;
  return result;
}

void geom::catmull_clark_vertex_evaluator<double>::compute_xor_boundary_tangents(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  uint64_t v7 = *(unsigned int *)(a1 + 8);
  uint64_t v8 = *(unsigned int *)(a1 + 12);
  unint64_t v9 = (float64x2_t *)(a2 + 32 * v7);
  unint64_t v10 = (float64x2_t *)(a2 + 32 * v8);
  float64x2_t v11 = vsubq_f64(v9[1], v10[1]);
  *a3 = vsubq_f64(*v9, *v10);
  a3[1] = v11;
  unsigned int v12 = *(_DWORD *)(a1 + 24);
  if (v12 == 2)
  {
    uint64_t v27 = *(void *)(a1 + 32);
    unint64_t v28 = **(unsigned int **)(a1 + 16);
    uint64_t v29 = *(unsigned int *)(a1 + 4);
    if (v28)
    {
      uint64_t v30 = 0;
      while (*(_DWORD *)(v27 + 4 * v30) != v29)
      {
        if (v28 == ++v30) {
          goto LABEL_8;
        }
      }
    }
    else
    {
LABEL_8:
      uint64_t v30 = 0;
    }
    int v31 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(v27 + 4 * ((v28 + v30 - 1) % v28)));
    float64x2_t v32 = *v31;
    float64x2_t v33 = v31[1];
    unint64_t v34 = (float64x2_t *)(a2 + 32 * v29);
    float64x2_t v25 = vsubq_f64(v33, v34[1]);
    float64x2_t v26 = vsubq_f64(v32, *v34);
    goto LABEL_35;
  }
  if (v12 == 1)
  {
    unint64_t v13 = (float64x2_t *)(a2 + 32 * v7);
    float64x2_t v15 = *v13;
    float64x2_t v14 = v13[1];
    uint64_t v16 = (float64x2_t *)(a2 + 32 * v8);
    float64x2_t v17 = vaddq_f64(v15, *v16);
    float64x2_t v18 = vaddq_f64(v14, v16[1]);
    float64x2_t v19 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(a1 + 4));
    __asm { FMOV            V4.2D, #-2.0 }
    float64x2_t v25 = vmlaq_f64(v18, _Q4, v19[1]);
    float64x2_t v26 = vmlaq_f64(v17, _Q4, *v19);
LABEL_35:
    *a4 = v26;
    a4[1] = v25;
    return;
  }
  if (!*(unsigned char *)(a1 + 2))
  {
    double v61 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(a1 + 8));
    BOOL v62 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(a1 + 12));
    float64x2_t v63 = vsubq_f64(v61[1], v62[1]);
    *a3 = vsubq_f64(*v61, *v62);
    a3[1] = v63;
    LODWORD(v63.f64[0]) = *(_DWORD *)(a1 + 24);
    double v64 = 3.14159265 / (double)*(unint64_t *)&v63.f64[0];
    float64x2_t v65 = 0uLL;
    *a4 = 0u;
    a4[1] = 0u;
    if ((*(_DWORD *)(a1 + 24) & 0xFFFFFFFE) != 0)
    {
      unint64_t v66 = 1;
      float64x2_t v67 = 0uLL;
      do
      {
        float64x2_t v68 = (_DWORD *)(*(void *)(a1 + 16) + 4 * v66);
        uint64_t v69 = *(v68 - 1);
        uint64_t v70 = *(void *)(a1 + 32) + 4 * v69;
        unint64_t v71 = (*v68 - v69);
        float64x2_t v83 = v67;
        float64x2_t v86 = v65;
        if (v71)
        {
          uint64_t v72 = 0;
          while (*(_DWORD *)(v70 + 4 * v72) != *(_DWORD *)(a1 + 4))
          {
            if (v71 == ++v72) {
              goto LABEL_29;
            }
          }
          unint64_t v73 = (v72 + 1);
        }
        else
        {
LABEL_29:
          unint64_t v73 = 1;
        }
        int8x16_t v74 = (float64x2_t *)(a2
                            + 32
                            * *(unsigned int *)(v70
                                              + 4
                                              * (v73 - (v73 / v71) * (unint64_t)v71)));
        v75.f64[0] = sin(v64 * (double)v66);
        float64x2_t v65 = vmlaq_n_f64(v86, *v74, v75.f64[0]);
        float64x2_t v67 = vmlaq_f64(v83, v74[1], v75);
        *a4 = v65;
        a4[1] = v67;
        ++v66;
      }
      while (v66 < *(unsigned int *)(a1 + 24));
    }
    else
    {
      float64x2_t v67 = 0uLL;
    }
    float64x2_t v84 = v67;
    float64x2_t v87 = v65;
    __double2 v77 = __sincos_stret(v64);
    v76.f64[0] = v77.__sinval;
    v78.f64[0] = v77.__cosval * 2.0 + -2.0;
    float64x2_t v79 = vmulq_n_f64(v87, v78.f64[0]);
    float64x2_t v80 = vmulq_f64(v78, v84);
    *a4 = v79;
    a4[1] = v80;
    float64x2_t v25 = vmlaq_f64(v80, vaddq_f64(v61[1], v62[1]), v76);
    float64x2_t v26 = vmlaq_n_f64(v79, vaddq_f64(*v61, *v62), v77.__sinval);
    goto LABEL_35;
  }
  double v35 = (double)v12;
  __double2 v36 = __sincos_stret(3.14159265 / (double)v12);
  double v37 = v36.__cosval + (double)(3 * v12);
  v38.f64[0] = v36.__sinval * -4.0 / v37;
  v39.f64[0] = -((v36.__cosval * 2.0 + 1.0) * sqrt(v36.__cosval + 1.0)) / (v37 * sqrt(1.0 - v36.__cosval));
  float64x2_t v40 = (float64x2_t *)(a2 + 32 * *(unsigned int *)(a1 + 4));
  float64x2_t v42 = *v40;
  float64x2_t v41 = v40[1];
  float64x2_t v43 = (float64x2_t *)(a2 + 32 * v8);
  float64x2_t v44 = vmlaq_n_f64(vmulq_n_f64(*v43, v39.f64[0]), v42, v38.f64[0]);
  float64x2_t v45 = vmlaq_f64(vmulq_f64(v39, v43[1]), v41, v38);
  *a4 = v44;
  a4[1] = v45;
  if (*(_DWORD *)(a1 + 24))
  {
    uint64_t v46 = 0;
    double v47 = 0.0;
    double v48 = 1.0 / v37;
    do
    {
      float64x2_t v81 = v44;
      float64x2_t v82 = v39;
      float64x2_t v85 = v45;
      unint64_t v49 = v46 + 1;
      double v50 = sin((double)(v46 + 1) * 3.14159265 / v35);
      if (v46)
      {
        uint64_t v52 = *(void *)(a1 + 16);
        unsigned int v53 = *(_DWORD *)(v52 + 4 * v46 - 4);
      }
      else
      {
        unsigned int v53 = 0;
        uint64_t v52 = *(void *)(a1 + 16);
      }
      uint64_t v54 = *(void *)(a1 + 32) + 4 * v53;
      uint64_t v55 = *(_DWORD *)(v52 + 4 * v46) - v53;
      if (v55)
      {
        uint64_t v56 = 0;
        while (*(_DWORD *)(v54 + 4 * v56) != *(_DWORD *)(a1 + 4))
        {
          if (v55 == ++v56) {
            goto LABEL_20;
          }
        }
      }
      else
      {
LABEL_20:
        LOBYTE(v56) = 0;
      }
      v51.f64[0] = v48 * (v47 + v50);
      uint64_t v57 = *(unsigned int *)(v54 + 4 * (((_BYTE)v56 + 1) & 3));
      uint64_t v58 = *(unsigned int *)(v54 + 4 * (((_BYTE)v56 + 2) & 3));
      float64x2_t v59 = (float64x2_t *)(a2 + 32 * v57);
      int8x16_t v60 = (float64x2_t *)(a2 + 32 * v58);
      float64x2_t v44 = vmlaq_n_f64(vmlaq_n_f64(v81, *v59, v82.f64[0]), *v60, v51.f64[0]);
      float64x2_t v45 = vmlaq_f64(vmlaq_f64(v85, v59[1], v82), v60[1], v51);
      *a4 = v44;
      a4[1] = v45;
      v39.f64[0] = v48 * (v50 * 4.0);
      ++v46;
      double v47 = v50;
    }
    while (v49 < *(unsigned int *)(a1 + 24));
  }
}

void geom::catmull_clark_vertex_evaluator<double>::compute_xor_tangents(uint64_t a1, uint64_t a2, float64x2_t *a3, float64x2_t *a4)
{
  *a3 = 0u;
  a3[1] = 0u;
  *a4 = 0u;
  a4[1] = 0u;
  unsigned int v8 = *(_DWORD *)(a1 + 24);
  double v9 = cos(6.28318531 / (double)v8);
  double v10 = cos(3.14159265 / (double)v8);
  geom::catmull_clark_vertex_evaluator<double>::edge_point(a1, 0, a2, v55);
  unsigned int v12 = **(_DWORD **)(a1 + 16);
  if (v12)
  {
    unint64_t v13 = *(unsigned int **)(a1 + 32);
    float64x2_t v14 = 0uLL;
    uint64_t v15 = **(unsigned int **)(a1 + 16);
    float64x2_t v16 = 0uLL;
    do
    {
      unsigned int v17 = *v13++;
      float64x2_t v18 = (float64x2_t *)(a2 + 32 * v17);
      float64x2_t v11 = *v18;
      float64x2_t v16 = vaddq_f64(v16, v18[1]);
      float64x2_t v14 = vaddq_f64(v14, *v18);
      --v15;
    }
    while (v15);
    if (!v8) {
      return;
    }
  }
  else
  {
    float64x2_t v16 = 0uLL;
    float64x2_t v14 = 0uLL;
    if (!v8) {
      return;
    }
  }
  unsigned int v19 = 0;
  v11.f64[0] = (double)v12;
  float v20 = v9;
  float v21 = (float)(v20 + 1.0) + v10 * sqrtf((float)(v20 + 9.0) + (float)(v20 + 9.0));
  float64x2_t v23 = v55[0];
  float64x2_t v22 = v55[1];
  float64x2_t v24 = vdivq_f64(v16, v11);
  float64x2_t v25 = vdivq_f64(v14, (float64x2_t)vdupq_lane_s64(COERCE__INT64((double)v12), 0));
  double v26 = v21;
  double v27 = 1.0;
  do
  {
    float64x2_t v50 = v23;
    float64x2_t v51 = v25;
    float64x2_t v52 = v24;
    float64x2_t v53 = v22;
    unsigned int v28 = v19 + 1;
    if (v19 + 1 == v8) {
      unsigned int v29 = 0;
    }
    else {
      unsigned int v29 = v19 + 1;
    }
    double v30 = cos((double)v29 * 6.28318531 / (double)v8);
    geom::catmull_clark_vertex_evaluator<double>::edge_point(a1, v29, a2, v54);
    if (v28 == v8)
    {
      unsigned int v33 = 0;
      uint64_t v34 = *(void *)(a1 + 16);
    }
    else
    {
      uint64_t v34 = *(void *)(a1 + 16);
      unsigned int v33 = *(_DWORD *)(v34 + 4 * v19);
    }
    float64x2_t v36 = v54[0];
    float64x2_t v35 = v54[1];
    uint64_t v37 = *(unsigned int *)(v34 + 4 * v29);
    float64x2_t v38 = 0uLL;
    float64x2_t v39 = 0uLL;
    v40.f64[1] = v50.f64[1];
    if (v37 > v33)
    {
      uint64_t v41 = v37 - v33;
      float64x2_t v42 = (unsigned int *)(*(void *)(a1 + 32) + 4 * v33);
      do
      {
        unsigned int v43 = *v42++;
        float64x2_t v44 = (float64x2_t *)(a2 + 32 * v43);
        float64x2_t v31 = *v44;
        float64x2_t v39 = vaddq_f64(v39, v44[1]);
        float64x2_t v38 = vaddq_f64(v38, *v44);
        --v41;
      }
      while (v41);
    }
    *(float *)v31.f64 = v27 * v26;
    v31.f64[0] = *(float *)v31.f64;
    v40.f64[0] = (double)(v37 - v33);
    *(float *)v32.f64 = v27 + v30;
    v32.f64[0] = *(float *)v32.f64;
    float64x2_t v45 = vdivq_f64(v38, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v40.f64[0], 0));
    float64x2_t v46 = vmlaq_f64(vmlaq_f64(a3[1], v53, v31), v52, v32);
    float64x2_t v47 = vdivq_f64(v39, v40);
    *a3 = vmlaq_n_f64(vmlaq_n_f64(*a3, v50, v31.f64[0]), v51, v32.f64[0]);
    a3[1] = v46;
    float64x2_t v48 = vmlaq_f64(vmlaq_f64(a4[1], v35, v31), v47, v32);
    float64x2_t v49 = vmlaq_n_f64(vmlaq_n_f64(*a4, v36, v31.f64[0]), v45, v32.f64[0]);
    double v27 = v30;
    float64x2_t v23 = v36;
    float64x2_t v22 = v35;
    *a4 = v49;
    a4[1] = v48;
    ++v19;
    float64x2_t v25 = v45;
    float64x2_t v24 = v47;
  }
  while (v28 != v8);
}

float64x2_t geom::catmull_clark_vertex_evaluator<double>::edge_point@<Q0>(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, float64x2_t *a4@<X8>)
{
  uint64_t v5 = *(unsigned int *)(a1 + 4);
  if (a2)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    unsigned int v7 = *(_DWORD *)(v6 + 4 * (a2 - 1));
  }
  else
  {
    unsigned int v7 = 0;
    uint64_t v6 = *(void *)(a1 + 16);
  }
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = v8 + 4 * v7;
  uint64_t v10 = *(unsigned int *)(v6 + 4 * a2);
  unint64_t v11 = v10 - v7;
  if (v11)
  {
    uint64_t v13 = 0;
    unint64_t v12 = 1;
    while (*(_DWORD *)(v9 + 4 * v13) != v5)
    {
      if (v11 == ++v13) {
        goto LABEL_11;
      }
    }
    unint64_t v12 = (v13 + 1);
  }
  else
  {
    unint64_t v12 = 1;
  }
LABEL_11:
  uint64_t v14 = *(unsigned int *)(v9 + 4 * (v12 - (v12 / v11) * (unint64_t)v11));
  unsigned int v15 = (a2 - 1 + *(_DWORD *)(a1 + 24)) % *(_DWORD *)(a1 + 24);
  if (a2) {
    unsigned int v16 = *(_DWORD *)(v6 + 4 * (a2 - 1));
  }
  else {
    unsigned int v16 = 0;
  }
  float64x2_t v17 = 0uLL;
  float64x2_t v18 = 0uLL;
  if (v10 > v16)
  {
    uint64_t v19 = v10 - v16;
    float v20 = (unsigned int *)(v8 + 4 * v16);
    do
    {
      unsigned int v21 = *v20++;
      float64x2_t v22 = (float64x2_t *)(a3 + 32 * v21);
      float64x2_t v18 = vaddq_f64(v18, v22[1]);
      float64x2_t v17 = vaddq_f64(v17, *v22);
      --v19;
    }
    while (v19);
  }
  float64x2_t v23 = (float64x2_t *)(a3 + 32 * v5);
  float64x2_t v24 = (float64x2_t *)(a3 + 32 * v14);
  if (v15) {
    unsigned int v25 = *(_DWORD *)(v6 + 4 * (v15 - 1));
  }
  else {
    unsigned int v25 = 0;
  }
  float64x2_t v26 = *v24;
  float64x2_t v27 = v24[1];
  uint64_t v28 = *(unsigned int *)(v6 + 4 * v15);
  float64x2_t v29 = 0uLL;
  float64x2_t v30 = 0uLL;
  if (v28 > v25)
  {
    uint64_t v31 = v28 - v25;
    float64x2_t v32 = (unsigned int *)(v8 + 4 * v25);
    do
    {
      unsigned int v33 = *v32++;
      uint64_t v34 = (float64x2_t *)(a3 + 32 * v33);
      float64x2_t v4 = *v34;
      float64x2_t v30 = vaddq_f64(v30, v34[1]);
      float64x2_t v29 = vaddq_f64(v29, *v34);
      --v31;
    }
    while (v31);
  }
  v4.f64[0] = (double)(v10 - v16);
  float64x2_t v35 = vdivq_f64(v17, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0));
  float64x2_t v36 = vdivq_f64(v18, v4);
  v4.f64[0] = (double)(v28 - v25);
  __asm { FMOV            V2.2D, #0.25 }
  float64x2_t result = vmulq_f64(vaddq_f64(v35, vaddq_f64(vaddq_f64(*v23, v26), vdivq_f64(v29, (float64x2_t)vdupq_lane_s64(*(uint64_t *)&v4.f64[0], 0)))), _Q2);
  float64x2_t v43 = vmulq_f64(vaddq_f64(v36, vaddq_f64(vaddq_f64(v23[1], v27), vdivq_f64(v30, v4))), _Q2);
  *a4 = result;
  a4[1] = v43;
  return result;
}

uint64_t geom_sparse_linear_solver_create_f(int a1, int a2)
{
  uint64_t v4 = geom_sparse_linear_solver_f_obj_alloc();
  geom::sparse_linear_solver<float>::sparse_linear_solver(v4 + 16, a1, a2);
  return v4;
}

uint64_t geom_sparse_linear_solver_create_d(int a1, int a2)
{
  uint64_t v4 = geom_sparse_linear_solver_d_obj_alloc();
  geom::sparse_linear_solver<float>::sparse_linear_solver(v4 + 16, a1, a2);
  return v4;
}

uint64_t geom_sparse_linear_solver_row_count_f(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t geom_sparse_linear_solver_row_count_d(uint64_t a1)
{
  return *(unsigned int *)(a1 + 16);
}

uint64_t geom_sparse_linear_solver_column_count_f(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

uint64_t geom_sparse_linear_solver_column_count_d(uint64_t a1)
{
  return *(unsigned int *)(a1 + 20);
}

char *geom_sparse_linear_solver_add_entry_f(uint64_t a1, unsigned int a2, unsigned int a3, float a4)
{
  return geom::sparse_linear_solver<float>::add_entry(a1 + 16, a2, a3, a4);
}

uint64_t *geom_sparse_linear_solver_add_entry_d(uint64_t a1, unsigned int a2, unsigned int a3, double a4)
{
  return geom::sparse_linear_solver<double>::add_entry(a1 + 16, a2, a3, a4);
}

BOOL geom_sparse_linear_solver_factor_f(uint64_t a1, unsigned int a2)
{
  return geom::sparse_linear_solver<float>::factor((unsigned int *)(a1 + 16), a2);
}

BOOL geom_sparse_linear_solver_factor_d(uint64_t a1, unsigned int a2)
{
  return geom::sparse_linear_solver<double>::factor((unsigned int *)(a1 + 16), a2);
}

uint64_t geom_sparse_linear_solver_solve_f(uint64_t a1, uint64_t a2, float *a3, uint64_t a4, float *a5)
{
  return geom::sparse_linear_solver<float>::solve(a1 + 16, a2, a3, a4, a5);
}

uint64_t geom_sparse_linear_solver_solve_d(uint64_t a1, uint64_t a2, double *a3, uint64_t a4, double *a5)
{
  return geom::sparse_linear_solver<double>::solve(a1 + 16, a2, a3, a4, a5);
}

uint64_t geom_sparse_linear_solver_solve_inplace_f(uint64_t a1, uint64_t a2, float *a3)
{
  return geom::sparse_linear_solver<float>::solve((unsigned int *)(a1 + 16), a2, a3);
}

uint64_t geom_sparse_linear_solver_solve_inplace_d(uint64_t a1, uint64_t a2, double *a3)
{
  return geom::sparse_linear_solver<double>::solve((unsigned int *)(a1 + 16), a2, a3);
}

uint64_t geom::z_order_code(double a1)
{
  unint64_t v1 = WORD2(a1) | ((unint64_t)HIDWORD(a1) << 16) & 0xFFFF0000FFFFLL;
  uint64_t v2 = (v1 | (v1 << 8)) & 0xF000F000F000FLL | (16 * ((v1 | (v1 << 8)) & 0xFF00FF00FF00FFLL)) & 0xF0F0F0F0F0F0F0FLL;
  unint64_t v3 = LOWORD(a1) | ((unint64_t)LODWORD(a1) << 16) & 0xFFFF0000FFFFLL;
  uint64_t v4 = (v3 | (v3 << 8)) & 0xF000F000F000FLL | (16 * ((v3 | (v3 << 8)) & 0xFF00FF00FF00FFLL)) & 0xF0F0F0F0F0F0F0FLL;
  return (v4 | (4 * v4)) & 0x1111111111111111 | (2 * ((v4 | (4 * v4)) & 0x3333333333333333)) & 0x5555555555555555 | (2 * ((v2 | (4 * v2)) & 0x1111111111111111 | (2 * ((v2 | (4 * v2)) & 0x3333333333333333)) & 0x5555555555555555));
}

uint64_t geom::z_order_code(unsigned int a1)
{
  return (4 * ((16 * (a1 | (BYTE1(a1) << 16))) & 0xF000F00 | a1 & 0xF | (BYTE1(a1) << 16) & 0xF000F)) & 0x10101010 | (16 * (a1 | (BYTE1(a1) << 16))) & 0x1000100 | a1 & 1 | (BYTE1(a1) << 16) & 0x10001 | (2 * ((4 * ((16 * (a1 | (BYTE1(a1) << 16))) & 0xF000F00 | a1 & 0xF | (BYTE1(a1) << 16) & 0xF000F)) & 0x30303030 | (16 * (a1 | (BYTE1(a1) << 16))) & 0x3000300 | a1 & 3 | (BYTE1(a1) << 16) & 0x30003)) & 0x44444444 | (2 * ((2 * ((4 * ((16 * ((a1 >> 8) & 0xFF0000 | BYTE2(a1))) & 0xF000F00 | (a1 >> 8) & 0xF0000 | BYTE2(a1) & 0xF)) & 0x30303030 | (16 * ((a1 >> 8) & 0xFF0000 | BYTE2(a1))) & 0x3000300 | (a1 >> 8) & 0x30000 | BYTE2(a1) & 3)) & 0x44444444 | (4 * ((16 * ((a1 >> 8) & 0xFF0000 | BYTE2(a1))) & 0xF000F00 | (a1 >> 8) & 0xF0000 | BYTE2(a1) & 0xF)) & 0x10101010 | (16 * ((a1 >> 8) & 0xFF0000 | BYTE2(a1))) & 0x1000100 | (a1 >> 8) & 0x10000 | BYTE2(a1) & 1));
}

{
  int v1;
  int v2;

  unint64_t v1 = (a1 >> 4) & 0xF00 | (a1 >> 8) & 0xF;
  uint64_t v2 = a1 & 0xF | (a1 >> 4 << 8);
  return (v2 | (4 * v2)) & 0xD1D1D1D1 | (2 * ((v2 | (4 * v2)) & 0xF3F3F3F3)) & 0xDDDDDDDD | (2
                                                                                           * ((v1 | (4 * v1)) & 0xD1D1D1D1 | (2 * ((v1 | (4 * v1)) & 0xF3F3F3F3)) & 0xDDDDDDDD));
}

double geom::z_order_code(uint64x2_t a1)
{
  unint64_t v1 = a1.u16[0];
  unint64_t v2 = (a1.u8[2] | ((unint64_t)a1.u8[3] << 24) | ((a1.u8[2] | ((unint64_t)a1.u8[3] << 24)) << 8)) & 0xF00F00F00FLL | (16 * ((a1.u8[2] | ((unint64_t)a1.u8[3] << 24) | ((a1.u8[2] | ((unint64_t)a1.u8[3] << 24)) << 8)) & 0xF00F00F00FLL));
  a1.i8[0] = a1.i8[4];
  a1.i8[3] = a1.i8[5];
  a1.i64[1] = v1;
  int8x16_t v3 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(a1, (uint64x2_t)xmmword_236F1DAB0), (int8x16_t)xmmword_236F1DAC0), vandq_s8((int8x16_t)a1, (int8x16_t)xmmword_236F1DAD0));
  int8x16_t v4 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)v3, (uint64x2_t)xmmword_236F1DAE0), (int8x16_t)xmmword_236F1DAF0), vandq_s8(v3, (int8x16_t)xmmword_236F1DB00));
  int64x2_t v5 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)v4, (uint64x2_t)xmmword_236F1DB10), (int8x16_t)xmmword_236F1DB20), vandq_s8(v4, (int8x16_t)xmmword_236F1DB30));
  int8x16_t v6 = (int8x16_t)vshlq_n_s64(v5, 2uLL);
  int8x16_t v7 = vandq_s8((int8x16_t)v5, (int8x16_t)vdupq_n_s64(0x41041041041uLL));
  v5.i64[0] = (4 * v2) & 0x208208208208;
  int8x16_t v8 = (int8x16_t)vdupq_n_s64(2uLL);
  v8.i64[0] = v2 & 0x41041041041;
  int64x2_t v9 = (int64x2_t)vorrq_s8((int8x16_t)v5, v8);
  v9.i64[0] = vaddq_s64(v9, v9).u64[0];
  int8x16_t v10 = vandq_s8(v6, (int8x16_t)vdupq_n_s64(0x208208208208uLL));
  v6.i64[1] = v7.i64[1];
  v9.i64[1] = v10.i64[1];
  int64x2_t v11 = (int64x2_t)vorrq_s8(v6, (int8x16_t)v9);
  *(void *)&double result = vorrq_s8((int8x16_t)v11, (int8x16_t)vdupq_laneq_s64(v11, 1)).u64[0];
  return result;
}

uint64_t geom::z_order_code(int a1)
{
  int v1 = a1 & 0xF | (a1 >> 4 << 12);
  v2.i32[0] = BYTE2(a1);
  v2.i32[1] = BYTE1(a1);
  int32x2_t v3 = (int32x2_t)vand_s8(v2, (int8x8_t)0xFF000000FFLL);
  int32x2_t v4 = (int32x2_t)vorr_s8((int8x8_t)(*(void *)&vshl_n_s32(v3, 8uLL) & 0xFFFFF0FFFFFFF0FFLL), (int8x8_t)(*(void *)&v3 & 0xFFFFFF0FFFFFFF0FLL));
  int32x2_t v5 = (int32x2_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v4, 4uLL), (int8x8_t)vdup_n_s32(0xC00C0u)), vand_s8((int8x8_t)v4, (int8x8_t)vdup_n_s32(0x3003u)));
  int32x2_t v6 = (int32x2_t)vshl_u32((uint32x2_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v5, 2uLL), (int8x8_t)vdup_n_s32(0x208208u)), vand_s8((int8x8_t)v5, (int8x8_t)vdup_n_s32(0x41041u))), (uint32x2_t)0x100000002);
  return vorr_s8((int8x8_t)v6, (int8x8_t)vdup_lane_s32(v6, 1)).u32[0] | (v1 | (16 * v1)) & 0x41041 | (4 * ((v1 | (16 * v1)) & 0xC30C3)) & 0x249249;
}

{
  int8x8_t v1;
  int32x2_t v2;
  int32x2_t v3;
  int32x2_t v4;
  uint32x2_t v5;

  v1.i32[0] = HIBYTE(a1);
  v1.i32[1] = BYTE1(a1);
  int8x8_t v2 = (int32x2_t)vand_s8(v1, (int8x8_t)0xFF000000FFLL);
  int32x2_t v3 = (int32x2_t)vorr_s8((int8x8_t)(*(void *)&vshl_n_s32(v2, 0xCuLL) & 0xFFFF0FFFFFFF0FFFLL), (int8x8_t)(*(void *)&v2 & 0xFFFFFF0FFFFFFF0FLL));
  int32x2_t v4 = (int32x2_t)vorr_s8((int8x8_t)(*(void *)&vshl_n_s32(v3, 6uLL) & 0xFF3FFF3FFF3FFF3FLL), (int8x8_t)(*(void *)&v3 & 0xFFF3FFF3FFF3FFF3));
  int32x2_t v5 = vshl_u32((uint32x2_t)vorr_s8(vand_s8((int8x8_t)vshl_n_s32(v4, 3uLL), (int8x8_t)0x1010101010101010), vand_s8((int8x8_t)v4, (int8x8_t)0x101010101010101)), (uint32x2_t)0x100000003);
  return v5.i32[0] | (4
                    * ((8
                      * (((BYTE2(a1) & 0xF | (BYTE2(a1) << 12)) << 6) & 0x3000300 | BYTE2(a1) & 3 | (BYTE2(a1) << 12) & 0x30003)) & 0x10101010 | ((BYTE2(a1) & 0xF | (BYTE2(a1) << 12)) << 6) & 0x1000100 | BYTE2(a1) & 1 | (BYTE2(a1) << 12) & 0x10001)) | ((a1 & 0xF | (a1 >> 4 << 16)) << 6) & 0x1000100 | a1 & 1 | (a1 >> 4 << 16) & 0x10001 | (8 * (((a1 & 0xF | (a1 >> 4 << 16)) << 6) & 0x3000300 | a1 & 3 | (a1 >> 4 << 16) & 0x30003)) & 0x10101010u | v5.i32[1];
}

double geom::z_order_code(double a1)
{
  uint64_t v1 = LOWORD(a1);
  unint64_t v2 = (BYTE2(a1) | ((unint64_t)WORD1(a1) << 24)) & 0xF0000000FLL | ((BYTE2(a1) | ((unint64_t)WORD1(a1) << 24)) << 12) & 0xF000F000F000FLL;
  unint64_t v3 = (BYTE6(a1) | ((unint64_t)HIWORD(a1) << 24)) & 0xF0000000FLL | ((BYTE6(a1) | ((unint64_t)HIWORD(a1) << 24)) << 12) & 0xF000F000F000FLL | (((BYTE6(a1) | ((unint64_t)HIWORD(a1) << 24)) & 0xF0000000FLL | ((BYTE6(a1) | ((unint64_t)HIWORD(a1) << 24)) << 12) & 0xF000F000F000FLL) << 6);
  v4.i64[0] = (BYTE4(a1) | ((unint64_t)WORD2(a1) << 24)) & 0xFF000000FFLL;
  v4.i64[1] = v1;
  int8x16_t v5 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64(v4, (uint64x2_t)xmmword_236F1DB40), (int8x16_t)xmmword_236F1DB50), vandq_s8((int8x16_t)v4, (int8x16_t)xmmword_236F1DB60));
  int8x16_t v6 = vorrq_s8(vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)v5, (uint64x2_t)xmmword_236F1DB70), (int8x16_t)xmmword_236F1DB80), vandq_s8(v5, (int8x16_t)xmmword_236F1DB90));
  int64x2_t v7 = (int64x2_t)vorrq_s8(vandq_s8((int8x16_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)xmmword_236F1DBA0), (int8x16_t)xmmword_236F1DBB0), vandq_s8(v6, (int8x16_t)xmmword_236F1DBC0));
  int8x16_t v8 = (int8x16_t)vshlq_u64((uint64x2_t)v7, (uint64x2_t)xmmword_236F1DBD0);
  v9.i64[0] = 0x1010101010101010;
  v9.i64[1] = 0x1010101010101010;
  v10.i64[1] = 0x1010101010101010;
  v10.i64[0] = 8 * ((v3 | (8 * v3)) & 0x1111111111111111);
  v10.i64[0] = vorrq_s8(v8, v10).u64[0];
  v10.i64[1] = vandq_s8(v8, v9).i64[1];
  v8.i64[0] = 0x101010101010101;
  v8.i64[1] = 0x101010101010101;
  int8x16_t v11 = vandq_s8((int8x16_t)v7, v8);
  v7.i64[0] = (v2 | (v2 << 6) | (8 * (v2 | (v2 << 6)))) & 0x1111111111111111;
  v7.i64[0] = vaddq_s64(v7, v7).u64[0];
  v7.i64[1] = v11.i64[1];
  int64x2_t v12 = (int64x2_t)vorrq_s8(v10, (int8x16_t)v7);
  *(void *)&double result = vorrq_s8((int8x16_t)v12, (int8x16_t)vdupq_laneq_s64(v12, 1)).u64[0];
  return result;
}

uint64_t geom_z_order_code_2u8(unsigned __int16 a1)
{
  return geom::z_order_code(a1);
}

BOOL geom::compare_z_order<float,(unsigned char)2>(double a1, double a2)
{
  int8x8_t v2 = (int8x8_t)vceq_f32(*(float32x2_t *)&a1, *(float32x2_t *)&a2);
  if ((vpmin_u32((uint32x2_t)v2, (uint32x2_t)v2).u32[0] & 0x80000000) != 0) {
    return 0;
  }
  unsigned __int8 v3 = vmvn_s8(v2).u8[0];
  char v4 = ~v3;
  float v5 = *((float *)&a1 + 1);
  float v6 = *((float *)&a2 + 1);
  if (*((float *)&a1 + 1) != *((float *)&a2 + 1))
  {
    double v11 = a1;
    double v12 = a2;
    a1 = v11;
    a2 = v12;
    unint64_t v15 = __PAIR64__(v8, v7);
    if ((v3 & (*(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v8)) == 0) {
      char v4 = 1;
    }
  }
  double v13 = a1;
  float v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  double v14 = a2;
  return v10 < *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
}

BOOL geom_compare_z_order_2f(double a1, double a2)
{
  int8x8_t v2 = (int8x8_t)vceq_f32(*(float32x2_t *)&a1, *(float32x2_t *)&a2);
  if ((vpmin_u32((uint32x2_t)v2, (uint32x2_t)v2).u32[0] & 0x80000000) != 0) {
    return 0;
  }
  unsigned __int8 v3 = vmvn_s8(v2).u8[0];
  char v4 = ~v3;
  float v5 = *((float *)&a1 + 1);
  float v6 = *((float *)&a2 + 1);
  if (*((float *)&a1 + 1) != *((float *)&a2 + 1))
  {
    double v11 = a1;
    double v12 = a2;
    a1 = v11;
    a2 = v12;
    unint64_t v15 = __PAIR64__(v8, v7);
    if ((v3 & (*(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v8)) == 0) {
      char v4 = 1;
    }
  }
  double v13 = a1;
  float v10 = *(float *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  double v14 = a2;
  return v10 < *(float *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
}

BOOL geom::compare_z_order<float,(unsigned char)3>(float32x4_t a1, float32x4_t a2)
{
  int32x4_t v2 = vceqq_f32(a1, a2);
  uint32x4_t v3 = (uint32x4_t)v2;
  v3.i32[3] = v2.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) != 0) {
    return 0;
  }
  int8x16_t v13 = (int8x16_t)v2;
  *(void *)&long long v7 = __PAIR64__(v5, v4);
  DWORD2(v7) = v6;
  unsigned __int8 v8 = vmovn_s32((int32x4_t)vmvnq_s8(v13)).u8[0];
  char v9 = (v8 & 1) - 1;
  if (a1.f32[1] != a2.f32[1])
  {
    long long v19 = v7;
    if ((v8 & (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v8 & 1) - 1) & 3))) > v5)) == 0) {
      char v9 = 1;
    }
  }
  if (a1.f32[2] != a2.f32[2])
  {
    long long v18 = v7;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) <= v6
      || ~v9 == 0)
    {
      char v9 = 2;
    }
  }
  float32x4_t v17 = a1;
  float v12 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
  float32x4_t v16 = a2;
  return v12 < *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
}

BOOL geom_compare_z_order_3f(float32x4_t a1, float32x4_t a2)
{
  int32x4_t v2 = vceqq_f32(a1, a2);
  uint32x4_t v3 = (uint32x4_t)v2;
  v3.i32[3] = v2.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) != 0) {
    return 0;
  }
  int8x16_t v13 = (int8x16_t)v2;
  *(void *)&long long v7 = __PAIR64__(v5, v4);
  DWORD2(v7) = v6;
  unsigned __int8 v8 = vmovn_s32((int32x4_t)vmvnq_s8(v13)).u8[0];
  char v9 = (v8 & 1) - 1;
  if (a1.f32[1] != a2.f32[1])
  {
    long long v19 = v7;
    if ((v8 & (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v8 & 1) - 1) & 3))) > v5)) == 0) {
      char v9 = 1;
    }
  }
  if (a1.f32[2] != a2.f32[2])
  {
    long long v18 = v7;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) <= v6
      || ~v9 == 0)
    {
      char v9 = 2;
    }
  }
  float32x4_t v17 = a1;
  float v12 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
  float32x4_t v16 = a2;
  return v12 < *(float *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
}

BOOL geom::compare_z_order<float,(unsigned char)4>(float32x4_t a1, float32x4_t a2)
{
  uint32x4_t v2 = (uint32x4_t)vceqq_f32(a1, a2);
  if ((vminvq_u32(v2) & 0x80000000) != 0) {
    return 0;
  }
  int8x16_t v14 = (int8x16_t)v2;
  *(void *)&long long v7 = __PAIR64__(v4, v3);
  *((void *)&v7 + 1) = __PAIR64__(v6, v5);
  unsigned __int8 v8 = vmovn_s32((int32x4_t)vmvnq_s8(v14)).u8[0];
  char v9 = (v8 & 1) - 1;
  if (a1.f32[1] != a2.f32[1])
  {
    long long v21 = v7;
    if ((v8 & (*(_DWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v8 & 1) - 1) & 3))) > v4)) == 0) {
      char v9 = 1;
    }
  }
  if (a1.f32[2] != a2.f32[2])
  {
    long long v20 = v7;
    if (*(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) <= v5
      || ~v9 == 0)
    {
      char v9 = 2;
    }
  }
  if (a1.f32[3] != a2.f32[3])
  {
    long long v19 = v7;
    if (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) <= v6
      || ~v9 == 0)
    {
      char v9 = 3;
    }
  }
  float32x4_t v17 = a1;
  float v13 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
  float32x4_t v18 = a2;
  return v13 < *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
}

BOOL geom_compare_z_order_4f(float32x4_t a1, float32x4_t a2)
{
  uint32x4_t v2 = (uint32x4_t)vceqq_f32(a1, a2);
  if ((vminvq_u32(v2) & 0x80000000) != 0) {
    return 0;
  }
  int8x16_t v14 = (int8x16_t)v2;
  *(void *)&long long v7 = __PAIR64__(v4, v3);
  *((void *)&v7 + 1) = __PAIR64__(v6, v5);
  unsigned __int8 v8 = vmovn_s32((int32x4_t)vmvnq_s8(v14)).u8[0];
  char v9 = (v8 & 1) - 1;
  if (a1.f32[1] != a2.f32[1])
  {
    long long v21 = v7;
    if ((v8 & (*(_DWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v8 & 1) - 1) & 3))) > v4)) == 0) {
      char v9 = 1;
    }
  }
  if (a1.f32[2] != a2.f32[2])
  {
    long long v20 = v7;
    if (*(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) <= v5
      || ~v9 == 0)
    {
      char v9 = 2;
    }
  }
  if (a1.f32[3] != a2.f32[3])
  {
    long long v19 = v7;
    if (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3))) <= v6
      || ~v9 == 0)
    {
      char v9 = 3;
    }
  }
  float32x4_t v17 = a1;
  float v13 = *(float *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
  float32x4_t v18 = a2;
  return v13 < *(float *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v9 & 3)));
}

BOOL geom::compare_z_order<double,(unsigned char)2>(float64x2_t a1, float64x2_t a2)
{
  int64x2_t v2 = vceqq_f64(a1, a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v2, 1), (int8x16_t)v2).u64[0] & 0x8000000000000000) != 0) {
    return 0;
  }
  unsigned __int8 v3 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  char v4 = ~v3;
  double v5 = a1.f64[1];
  double v6 = a2.f64[1];
  if (a1.f64[1] != a2.f64[1])
  {
    float64x2_t v11 = a1;
    float64x2_t v12 = a2;
    a1 = v11;
    a2 = v12;
    unint64_t v15 = __PAIR64__(v8, v7);
    if ((v3 & (*(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v8)) == 0) {
      char v4 = 1;
    }
  }
  float64x2_t v13 = a1;
  double v10 = *(double *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
  float64x2_t v14 = a2;
  return v10 < *(double *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
}

BOOL geom_compare_z_order_2d(float64x2_t a1, float64x2_t a2)
{
  int64x2_t v2 = vceqq_f64(a1, a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v2, 1), (int8x16_t)v2).u64[0] & 0x8000000000000000) != 0) {
    return 0;
  }
  unsigned __int8 v3 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  char v4 = ~v3;
  double v5 = a1.f64[1];
  double v6 = a2.f64[1];
  if (a1.f64[1] != a2.f64[1])
  {
    float64x2_t v11 = a1;
    float64x2_t v12 = a2;
    a1 = v11;
    a2 = v12;
    unint64_t v15 = __PAIR64__(v8, v7);
    if ((v3 & (*(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v8)) == 0) {
      char v4 = 1;
    }
  }
  float64x2_t v13 = a1;
  double v10 = *(double *)((unint64_t)&v13 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
  float64x2_t v14 = a2;
  return v10 < *(double *)((unint64_t)&v14 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
}

BOOL geom::compare_z_order<double,(unsigned char)3>(float64x2_t *a1, float64x2_t *a2)
{
  int8x16_t v2 = *(int8x16_t *)a1;
  int8x16_t v3 = *(int8x16_t *)a2;
  int64x2_t v4 = vceqq_f64(*a1, *a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v4, 1), vandq_s8((int8x16_t)vceqq_f64(a1[1], a2[1]), (int8x16_t)v4)).u64[0] & 0x8000000000000000) != 0) {
    return 0;
  }
  unint64_t v17 = vextq_s8(v2, v2, 8uLL).u64[0];
  unint64_t v18 = vextq_s8(v3, v3, 8uLL).u64[0];
  float64x2_t v21 = a2[1];
  float64x2_t v22 = *a2;
  float64x2_t v19 = a1[1];
  float64x2_t v20 = *a1;
  *(float64_t *)&long long v8 = v20.f64[0];
  *(float64_t *)&long long v9 = v22.f64[0];
  *(void *)&long long v10 = __PAIR64__(v6, v5);
  DWORD2(v10) = v7;
  if (v20.f64[0] == v22.f64[0]) {
    char v11 = -1;
  }
  else {
    char v11 = 0;
  }
  if (v20.f64[1] != v22.f64[1])
  {
    long long v26 = v10;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v6
      || v20.f64[0] == v22.f64[0])
    {
      char v11 = 1;
    }
  }
  if (v19.f64[0] != v21.f64[0])
  {
    long long v25 = v10;
    if (*(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v7
      || ~v11 == 0)
    {
      char v11 = 2;
    }
  }
  *((void *)&v8 + 1) = v17;
  v24[0] = v8;
  v24[1] = v19;
  uint64_t v15 = v11 & 3;
  double v16 = *((double *)v24 + v15);
  *((void *)&v9 + 1) = v18;
  v23[0] = v9;
  v23[1] = v21;
  return v16 < *((double *)v23 + v15);
}

BOOL geom_compare_z_order_3d(float64x2_t *a1, float64x2_t *a2)
{
  int8x16_t v2 = *(int8x16_t *)a1;
  int8x16_t v3 = *(int8x16_t *)a2;
  int64x2_t v4 = vceqq_f64(*a1, *a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v4, 1), vandq_s8((int8x16_t)vceqq_f64(a1[1], a2[1]), (int8x16_t)v4)).u64[0] & 0x8000000000000000) != 0) {
    return 0;
  }
  unint64_t v17 = vextq_s8(v2, v2, 8uLL).u64[0];
  unint64_t v18 = vextq_s8(v3, v3, 8uLL).u64[0];
  float64x2_t v21 = a2[1];
  float64x2_t v22 = *a2;
  float64x2_t v19 = a1[1];
  float64x2_t v20 = *a1;
  *(float64_t *)&long long v8 = v20.f64[0];
  *(float64_t *)&long long v9 = v22.f64[0];
  *(void *)&long long v10 = __PAIR64__(v6, v5);
  DWORD2(v10) = v7;
  if (v20.f64[0] == v22.f64[0]) {
    char v11 = -1;
  }
  else {
    char v11 = 0;
  }
  if (v20.f64[1] != v22.f64[1])
  {
    long long v26 = v10;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v6
      || v20.f64[0] == v22.f64[0])
    {
      char v11 = 1;
    }
  }
  if (v19.f64[0] != v21.f64[0])
  {
    long long v25 = v10;
    if (*(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v7
      || ~v11 == 0)
    {
      char v11 = 2;
    }
  }
  *((void *)&v8 + 1) = v17;
  v24[0] = v8;
  v24[1] = v19;
  uint64_t v15 = v11 & 3;
  double v16 = *((double *)v24 + v15);
  *((void *)&v9 + 1) = v18;
  v23[0] = v9;
  v23[1] = v21;
  return v16 < *((double *)v23 + v15);
}

BOOL geom::compare_z_order<double,(unsigned char)4>(float64x2_t *a1, float64x2_t *a2)
{
  int64x2_t v2 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(*a1, *a2), (int8x16_t)vceqq_f64(a1[1], a2[1]));
  if ((vandq_s8((int8x16_t)v2, (int8x16_t)vdupq_laneq_s64(v2, 1)).u64[0] & 0x8000000000000000) != 0) {
    return 0;
  }
  float64x2_t v15 = *a1;
  float64x2_t v16 = *a2;
  float64x2_t v17 = a1[1];
  float64x2_t v18 = a2[1];
  *(void *)&long long v7 = __PAIR64__(v4, v3);
  *((void *)&v7 + 1) = __PAIR64__(v6, v5);
  if (v15.f64[0] == v16.f64[0]) {
    char v8 = -1;
  }
  else {
    char v8 = 0;
  }
  if (v15.f64[1] != v16.f64[1])
  {
    long long v23 = v7;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) <= v4 || v15.f64[0] == v16.f64[0]) {
      char v8 = 1;
    }
  }
  if (v17.f64[0] != v18.f64[0])
  {
    long long v22 = v7;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) <= v5
      || ~v8 == 0)
    {
      char v8 = 2;
    }
  }
  if (v17.f64[1] != v18.f64[1])
  {
    long long v21 = v7;
    if (*(_DWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) <= v6
      || ~v8 == 0)
    {
      char v8 = 3;
    }
  }
  v20[0] = v15;
  v20[1] = v17;
  uint64_t v13 = v8 & 3;
  double v14 = *((double *)v20 + v13);
  v19[0] = v16;
  v19[1] = v18;
  return v14 < *((double *)v19 + v13);
}

BOOL geom_compare_z_order_4d(float64x2_t *a1, float64x2_t *a2)
{
  int64x2_t v2 = (int64x2_t)vandq_s8((int8x16_t)vceqq_f64(*a1, *a2), (int8x16_t)vceqq_f64(a1[1], a2[1]));
  if ((vandq_s8((int8x16_t)v2, (int8x16_t)vdupq_laneq_s64(v2, 1)).u64[0] & 0x8000000000000000) != 0) {
    return 0;
  }
  float64x2_t v15 = *a1;
  float64x2_t v16 = *a2;
  float64x2_t v17 = a1[1];
  float64x2_t v18 = a2[1];
  *(void *)&long long v7 = __PAIR64__(v4, v3);
  *((void *)&v7 + 1) = __PAIR64__(v6, v5);
  if (v15.f64[0] == v16.f64[0]) {
    char v8 = -1;
  }
  else {
    char v8 = 0;
  }
  if (v15.f64[1] != v16.f64[1])
  {
    long long v23 = v7;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) <= v4 || v15.f64[0] == v16.f64[0]) {
      char v8 = 1;
    }
  }
  if (v17.f64[0] != v18.f64[0])
  {
    long long v22 = v7;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) <= v5
      || ~v8 == 0)
    {
      char v8 = 2;
    }
  }
  if (v17.f64[1] != v18.f64[1])
  {
    long long v21 = v7;
    if (*(_DWORD *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF3 | (4 * (v8 & 3))) <= v6
      || ~v8 == 0)
    {
      char v8 = 3;
    }
  }
  v20[0] = v15;
  v20[1] = v17;
  uint64_t v13 = v8 & 3;
  double v14 = *((double *)v20 + v13);
  v19[0] = v16;
  v19[1] = v18;
  return v14 < *((double *)v19 + v13);
}

BOOL geom::compare_z_order<unsigned char,(unsigned char)2>(__int16 a1, __int16 a2)
{
  v2.i32[0] = a1;
  v2.i32[1] = HIBYTE(a1);
  v3.i32[0] = a2;
  v3.i32[1] = HIBYTE(a2);
  int8x8_t v4 = (int8x8_t)vceq_s32((int32x2_t)vand_s8(v2, (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8(v3, (int8x8_t)0xFF000000FFLL));
  *(int8x8_t *)v5.i8 = vdup_lane_s8(v4, 0);
  v5.u64[1] = (unint64_t)vdup_lane_s8(v4, 4);
  if ((vminv_u8((uint8x8_t)vqtbl1_s8(v5, (int8x8_t)0xF060D040B020900)) & 0x80) != 0) {
    return 0;
  }
  if (a1 == a2) {
    char v6 = -1;
  }
  else {
    char v6 = 0;
  }
  if ((v4.i8[4] & 1) == 0)
  {
    v7.i32[0] = (a2 ^ a1);
    v7.i32[1] = ((unsigned __int16)(a2 ^ a1) >> 8);
    uint32x2_t v8 = (uint32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FFLL);
    int32x2_t v9 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v8, (uint32x2_t)0xF0000000FLL), (int8x8_t)0x400000004);
    int32x2_t v10 = (int32x2_t)vshl_u32(v8, (uint32x2_t)vneg_s32(v9));
    int8x8_t v11 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)(*(void *)&v10 & 0xFFFFFF0CFFFFFF0CLL)));
    int8x8_t v17 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v9, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v11), v10)), v11), (int8x8_t)0xFF000000FFLL);
    if (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v17.i32[1]
      || a1 == a2)
    {
      char v6 = 1;
    }
  }
  int8x8_t v16 = v2;
  unsigned int v13 = *(unsigned __int8 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  int8x8_t v15 = v3;
  return v13 < *(unsigned __int8 *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom_compare_z_order_2u8(__int16 a1, __int16 a2)
{
  v2.i32[0] = a1;
  v2.i32[1] = HIBYTE(a1);
  v3.i32[0] = a2;
  v3.i32[1] = HIBYTE(a2);
  int8x8_t v4 = (int8x8_t)vceq_s32((int32x2_t)vand_s8(v2, (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8(v3, (int8x8_t)0xFF000000FFLL));
  *(int8x8_t *)v5.i8 = vdup_lane_s8(v4, 0);
  v5.u64[1] = (unint64_t)vdup_lane_s8(v4, 4);
  if ((vminv_u8((uint8x8_t)vqtbl1_s8(v5, (int8x8_t)0xF060D040B020900)) & 0x80) != 0) {
    return 0;
  }
  if (a1 == a2) {
    char v6 = -1;
  }
  else {
    char v6 = 0;
  }
  if ((v4.i8[4] & 1) == 0)
  {
    v7.i32[0] = (a2 ^ a1);
    v7.i32[1] = ((unsigned __int16)(a2 ^ a1) >> 8);
    uint32x2_t v8 = (uint32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FFLL);
    int32x2_t v9 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v8, (uint32x2_t)0xF0000000FLL), (int8x8_t)0x400000004);
    int32x2_t v10 = (int32x2_t)vshl_u32(v8, (uint32x2_t)vneg_s32(v9));
    int8x8_t v11 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)(*(void *)&v10 & 0xFFFFFF0CFFFFFF0CLL)));
    int8x8_t v17 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v9, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v11), v10)), v11), (int8x8_t)0xFF000000FFLL);
    if (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v17.i32[1]
      || a1 == a2)
    {
      char v6 = 1;
    }
  }
  int8x8_t v16 = v2;
  unsigned int v13 = *(unsigned __int8 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  int8x8_t v15 = v3;
  return v13 < *(unsigned __int8 *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom::compare_z_order<unsigned char,(unsigned char)3>(__int32 a1, __int32 a2, int8x8_t a3, int8x8_t a4)
{
  a3.i32[0] = a1;
  int8x8_t v4 = vzip1_s8(a3, a3);
  a4.i32[0] = a2;
  int8x8_t v5 = vzip1_s8(a4, a3);
  int16x4_t v6 = vceq_s16((int16x4_t)(*(void *)&v4 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(void *)&v5 & 0xFF00FF00FF00FFLL));
  v7.i8[0] = v6.i8[0];
  v7.i8[1] = v6.i8[2];
  v7.i8[2] = v6.i8[4];
  v7.i8[3] = v6.i8[4];
  v7.i8[4] = v6.i8[0];
  v7.i8[5] = v6.i8[2];
  v7.i8[6] = v6.i8[4];
  v7.i8[7] = v6.i8[4];
  if ((vminv_u8(v7) & 0x80) != 0) {
    return 0;
  }
  uint64_t v8 = *(void *)&veor_s8(v5, v4) & 0xFF00FF00FF00FFLL;
  int16x4_t v9 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v8, (uint16x4_t)0xF000F000FLL), (int8x8_t)0x4000400040004);
  int16x4_t v10 = (int16x4_t)vshl_u16((uint16x4_t)v8, (uint16x4_t)vneg_s16((int16x4_t)(*(void *)&v9 & 0xFF00FF00FF00FFLL)));
  int8x8_t v11 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v10, (int8x8_t)0xC000C000CLL)));
  int8x16_t v12 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v9, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)(*(void *)&v11 & 0xFF00FF00FF00FFLL)), v10)), v11));
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  int8x16_t v14 = vandq_s8(v12, v13);
  if (a1 == a2) {
    char v15 = -1;
  }
  else {
    char v15 = 0;
  }
  if ((v6.i8[2] & 1) == 0)
  {
    int8x16_t v23 = v14;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[1]
      || a1 == a2)
    {
      char v15 = 1;
    }
  }
  if ((v6.i8[4] & 1) == 0)
  {
    int8x16_t v22 = v14;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[2]
      || ~v15 == 0)
    {
      char v15 = 2;
    }
  }
  a3.i16[0] = a1;
  a3.i16[1] = BYTE1(a1);
  a3.i16[2] = BYTE2(a1);
  int8x8_t v20 = a3;
  unsigned int v18 = *(unsigned __int8 *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
  a3.i16[0] = a2;
  a3.i16[1] = BYTE1(a2);
  a3.i16[2] = BYTE2(a2);
  int8x8_t v21 = a3;
  return v18 < *(unsigned __int8 *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
}

BOOL geom_compare_z_order_3u8(__int32 a1, __int32 a2, int8x8_t a3, int8x8_t a4)
{
  a3.i32[0] = a1;
  int8x8_t v4 = vzip1_s8(a3, a3);
  a4.i32[0] = a2;
  int8x8_t v5 = vzip1_s8(a4, a3);
  int16x4_t v6 = vceq_s16((int16x4_t)(*(void *)&v4 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(void *)&v5 & 0xFF00FF00FF00FFLL));
  v7.i8[0] = v6.i8[0];
  v7.i8[1] = v6.i8[2];
  v7.i8[2] = v6.i8[4];
  v7.i8[3] = v6.i8[4];
  v7.i8[4] = v6.i8[0];
  v7.i8[5] = v6.i8[2];
  v7.i8[6] = v6.i8[4];
  v7.i8[7] = v6.i8[4];
  if ((vminv_u8(v7) & 0x80) != 0) {
    return 0;
  }
  uint64_t v8 = *(void *)&veor_s8(v5, v4) & 0xFF00FF00FF00FFLL;
  int16x4_t v9 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v8, (uint16x4_t)0xF000F000FLL), (int8x8_t)0x4000400040004);
  int16x4_t v10 = (int16x4_t)vshl_u16((uint16x4_t)v8, (uint16x4_t)vneg_s16((int16x4_t)(*(void *)&v9 & 0xFF00FF00FF00FFLL)));
  int8x8_t v11 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v10, (int8x8_t)0xC000C000CLL)));
  int8x16_t v12 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v9, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)(*(void *)&v11 & 0xFF00FF00FF00FFLL)), v10)), v11));
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  int8x16_t v14 = vandq_s8(v12, v13);
  if (a1 == a2) {
    char v15 = -1;
  }
  else {
    char v15 = 0;
  }
  if ((v6.i8[2] & 1) == 0)
  {
    int8x16_t v23 = v14;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[1]
      || a1 == a2)
    {
      char v15 = 1;
    }
  }
  if ((v6.i8[4] & 1) == 0)
  {
    int8x16_t v22 = v14;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[2]
      || ~v15 == 0)
    {
      char v15 = 2;
    }
  }
  a3.i16[0] = a1;
  a3.i16[1] = BYTE1(a1);
  a3.i16[2] = BYTE2(a1);
  int8x8_t v20 = a3;
  unsigned int v18 = *(unsigned __int8 *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
  a3.i16[0] = a2;
  a3.i16[1] = BYTE1(a2);
  a3.i16[2] = BYTE2(a2);
  int8x8_t v21 = a3;
  return v18 < *(unsigned __int8 *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
}

BOOL geom::compare_z_order<unsigned char,(unsigned char)4>(__int32 a1, __int32 a2, int8x8_t a3)
{
  a3.i32[0] = a1;
  int8x8_t v3 = vzip1_s8(a3, a3);
  a3.i32[0] = a2;
  int8x8_t v4 = vzip1_s8(a3, a3);
  int8x8_t v5 = (int8x8_t)vceq_s16((int16x4_t)(*(void *)&v3 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(void *)&v4 & 0xFF00FF00FF00FFLL));
  int8x8_t v6 = vuzp1_s8(v5, v5);
  if ((vminv_u8((uint8x8_t)v6) & 0x80) != 0) {
    return 0;
  }
  v6.i32[0] = a2 ^ a1;
  uint64_t v7 = *(void *)&vzip1_s8(v6, v4) & 0xFF00FF00FF00FFLL;
  int16x4_t v8 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v7, (uint16x4_t)0xF000F000F000FLL), (int8x8_t)0x4000400040004);
  int16x4_t v9 = (int16x4_t)vshl_u16((uint16x4_t)v7, (uint16x4_t)vneg_s16(v8));
  int8x8_t v10 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)(*(void *)&v9 & 0xFF0CFF0CFF0CFF0CLL)));
  int8x16_t v11 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v8, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v10), v9)), v10));
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  int8x16_t v13 = vandq_s8(v11, v12);
  if (a1 == a2) {
    char v14 = -1;
  }
  else {
    char v14 = 0;
  }
  if ((v5.i8[2] & 1) == 0)
  {
    int8x16_t v24 = v13;
    if (*(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[1]
      || a1 == a2)
    {
      char v14 = 1;
    }
  }
  if ((v5.i8[4] & 1) == 0)
  {
    int8x16_t v23 = v13;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[2]
      || ~v14 == 0)
    {
      char v14 = 2;
    }
  }
  if ((v5.i8[6] & 1) == 0)
  {
    int8x16_t v22 = v13;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[3]
      || ~v14 == 0)
    {
      char v14 = 3;
    }
  }
  int8x8_t v21 = v3;
  unsigned int v18 = *(unsigned __int8 *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
  int8x8_t v20 = v4;
  return v18 < *(unsigned __int8 *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
}

BOOL geom_compare_z_order_4u8(__int32 a1, __int32 a2, int8x8_t a3)
{
  a3.i32[0] = a1;
  int8x8_t v3 = vzip1_s8(a3, a3);
  a3.i32[0] = a2;
  int8x8_t v4 = vzip1_s8(a3, a3);
  int8x8_t v5 = (int8x8_t)vceq_s16((int16x4_t)(*(void *)&v3 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(void *)&v4 & 0xFF00FF00FF00FFLL));
  int8x8_t v6 = vuzp1_s8(v5, v5);
  if ((vminv_u8((uint8x8_t)v6) & 0x80) != 0) {
    return 0;
  }
  v6.i32[0] = a2 ^ a1;
  uint64_t v7 = *(void *)&vzip1_s8(v6, v4) & 0xFF00FF00FF00FFLL;
  int16x4_t v8 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v7, (uint16x4_t)0xF000F000F000FLL), (int8x8_t)0x4000400040004);
  int16x4_t v9 = (int16x4_t)vshl_u16((uint16x4_t)v7, (uint16x4_t)vneg_s16(v8));
  int8x8_t v10 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)(*(void *)&v9 & 0xFF0CFF0CFF0CFF0CLL)));
  int8x16_t v11 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v8, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v10), v9)), v10));
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  int8x16_t v13 = vandq_s8(v11, v12);
  if (a1 == a2) {
    char v14 = -1;
  }
  else {
    char v14 = 0;
  }
  if ((v5.i8[2] & 1) == 0)
  {
    int8x16_t v24 = v13;
    if (*(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[1]
      || a1 == a2)
    {
      char v14 = 1;
    }
  }
  if ((v5.i8[4] & 1) == 0)
  {
    int8x16_t v23 = v13;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[2]
      || ~v14 == 0)
    {
      char v14 = 2;
    }
  }
  if ((v5.i8[6] & 1) == 0)
  {
    int8x16_t v22 = v13;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[3]
      || ~v14 == 0)
    {
      char v14 = 3;
    }
  }
  int8x8_t v21 = v3;
  unsigned int v18 = *(unsigned __int8 *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
  int8x8_t v20 = v4;
  return v18 < *(unsigned __int8 *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
}

BOOL geom::compare_z_order<unsigned short,(unsigned char)2>(__int32 a1, __int32 a2, uint16x4_t a3)
{
  a3.i32[0] = a1;
  int8x8_t v3 = (int8x8_t)vmovl_u16(a3).u64[0];
  a3.i32[0] = a2;
  int8x8_t v4 = (int8x8_t)vmovl_u16(a3).u64[0];
  int16x4_t v5 = (int16x4_t)vceq_s32((int32x2_t)vand_s8(v3, (int8x8_t)0xFFFF0000FFFFLL), (int32x2_t)vand_s8(v4, (int8x8_t)0xFFFF0000FFFFLL));
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v5, v5)) & 0x8000) != 0) {
    return 0;
  }
  if ((unsigned __int16)a1 == (unsigned __int16)a2) {
    char v6 = -1;
  }
  else {
    char v6 = 0;
  }
  if ((v5.i8[4] & 1) == 0)
  {
    v5.i32[0] = a2 ^ a1;
    uint32x2_t v7 = (uint32x2_t)vmovl_u16((uint16x4_t)v5).u64[0];
    int32x2_t v8 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v7, (uint32x2_t)0xFF000000FFLL), (int8x8_t)0x800000008);
    int8x8_t v9 = (int8x8_t)vshl_u32(v7, (uint32x2_t)vneg_s32(v8));
    int32x2_t v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    int32x2_t v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    int8x8_t v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    int8x8_t v18 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v8, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8((int8x8_t)v10, v12)), (int8x8_t)0xFFFF0000FFFFLL);
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v18.i32[1]
      || (unsigned __int16)a1 == (unsigned __int16)a2)
    {
      char v6 = 1;
    }
  }
  int8x8_t v17 = v3;
  unsigned int v14 = *(unsigned __int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  int8x8_t v16 = v4;
  return v14 < *(unsigned __int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom_compare_z_order_2u16(__int32 a1, __int32 a2, uint16x4_t a3)
{
  a3.i32[0] = a1;
  int8x8_t v3 = (int8x8_t)vmovl_u16(a3).u64[0];
  a3.i32[0] = a2;
  int8x8_t v4 = (int8x8_t)vmovl_u16(a3).u64[0];
  int16x4_t v5 = (int16x4_t)vceq_s32((int32x2_t)vand_s8(v3, (int8x8_t)0xFFFF0000FFFFLL), (int32x2_t)vand_s8(v4, (int8x8_t)0xFFFF0000FFFFLL));
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v5, v5)) & 0x8000) != 0) {
    return 0;
  }
  if ((unsigned __int16)a1 == (unsigned __int16)a2) {
    char v6 = -1;
  }
  else {
    char v6 = 0;
  }
  if ((v5.i8[4] & 1) == 0)
  {
    v5.i32[0] = a2 ^ a1;
    uint32x2_t v7 = (uint32x2_t)vmovl_u16((uint16x4_t)v5).u64[0];
    int32x2_t v8 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v7, (uint32x2_t)0xFF000000FFLL), (int8x8_t)0x800000008);
    int8x8_t v9 = (int8x8_t)vshl_u32(v7, (uint32x2_t)vneg_s32(v8));
    int32x2_t v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    int32x2_t v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    int8x8_t v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    int8x8_t v18 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v8, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8((int8x8_t)v10, v12)), (int8x8_t)0xFFFF0000FFFFLL);
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v18.i32[1]
      || (unsigned __int16)a1 == (unsigned __int16)a2)
    {
      char v6 = 1;
    }
  }
  int8x8_t v17 = v3;
  unsigned int v14 = *(unsigned __int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  int8x8_t v16 = v4;
  return v14 < *(unsigned __int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom::compare_z_order<unsigned short,(unsigned char)3>(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2 = (int8x8_t)vceq_s16(a1, a2);
  uint16x4_t v3 = (uint16x4_t)v2;
  v3.i16[3] = v2.i16[2];
  if ((vminv_u16(v3) & 0x8000) != 0) {
    return 0;
  }
  uint16x4_t v4 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  int16x4_t v5 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v4, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  int8x8_t v6 = (int8x8_t)vshl_u16(v4, (uint16x4_t)vneg_s16(v5));
  int16x4_t v7 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v6, (int8x8_t)0xF000F000F000F0)));
  int16x4_t v8 = (int16x4_t)vshl_u16((uint16x4_t)v6, (uint16x4_t)vneg_s16(v7));
  int8x8_t v9 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v8, (int8x8_t)0xC000C000C000CLL)));
  uint32x4_t v10 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v5, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v9), v8)), vorr_s8((int8x8_t)v7, v9)));
  unsigned __int8 v11 = vmvn_s8(v2).u8[0];
  char v12 = (v11 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    uint32x4_t v19 = v10;
    if ((v11 & (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v11 & 1) - 1) & 3))) > v10.i32[1])) == 0) {
      char v12 = 1;
    }
  }
  if ((v2.i8[4] & 1) == 0)
  {
    uint32x4_t v18 = v10;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3))) <= v10.i32[2]
      || ~v12 == 0)
    {
      char v12 = 2;
    }
  }
  int16x4_t v17 = a1;
  unsigned int v14 = *(unsigned __int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
  int16x4_t v16 = a2;
  return v14 < *(unsigned __int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
}

BOOL geom_compare_z_order_3u16(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2 = (int8x8_t)vceq_s16(a1, a2);
  uint16x4_t v3 = (uint16x4_t)v2;
  v3.i16[3] = v2.i16[2];
  if ((vminv_u16(v3) & 0x8000) != 0) {
    return 0;
  }
  uint16x4_t v4 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  int16x4_t v5 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v4, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  int8x8_t v6 = (int8x8_t)vshl_u16(v4, (uint16x4_t)vneg_s16(v5));
  int16x4_t v7 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v6, (int8x8_t)0xF000F000F000F0)));
  int16x4_t v8 = (int16x4_t)vshl_u16((uint16x4_t)v6, (uint16x4_t)vneg_s16(v7));
  int8x8_t v9 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v8, (int8x8_t)0xC000C000C000CLL)));
  uint32x4_t v10 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v5, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v9), v8)), vorr_s8((int8x8_t)v7, v9)));
  unsigned __int8 v11 = vmvn_s8(v2).u8[0];
  char v12 = (v11 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    uint32x4_t v19 = v10;
    if ((v11 & (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v11 & 1) - 1) & 3))) > v10.i32[1])) == 0) {
      char v12 = 1;
    }
  }
  if ((v2.i8[4] & 1) == 0)
  {
    uint32x4_t v18 = v10;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3))) <= v10.i32[2]
      || ~v12 == 0)
    {
      char v12 = 2;
    }
  }
  int16x4_t v17 = a1;
  unsigned int v14 = *(unsigned __int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
  int16x4_t v16 = a2;
  return v14 < *(unsigned __int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
}

BOOL geom::compare_z_order<unsigned short,(unsigned char)4>(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2 = (int8x8_t)vceq_s16(a1, a2);
  if ((vminv_u16((uint16x4_t)v2) & 0x8000) != 0) {
    return 0;
  }
  uint16x4_t v3 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  int16x4_t v4 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v3, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  int8x8_t v5 = (int8x8_t)vshl_u16(v3, (uint16x4_t)vneg_s16(v4));
  int16x4_t v6 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v5, (int8x8_t)0xF000F000F000F0)));
  int16x4_t v7 = (int16x4_t)vshl_u16((uint16x4_t)v5, (uint16x4_t)vneg_s16(v6));
  int8x8_t v8 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v7, (int8x8_t)0xC000C000C000CLL)));
  uint32x4_t v9 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v4, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v8), v7)), vorr_s8((int8x8_t)v6, v8)));
  unsigned __int8 v10 = vmvn_s8(v2).u8[0];
  char v11 = (v10 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    uint32x4_t v20 = v9;
    if ((v10 & (*(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v10 & 1) - 1) & 3))) > v9.i32[1])) == 0) {
      char v11 = 1;
    }
  }
  if ((v2.i8[4] & 1) == 0)
  {
    uint32x4_t v19 = v9;
    if (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[2]
      || ~v11 == 0)
    {
      char v11 = 2;
    }
  }
  if ((v2.i8[6] & 1) == 0)
  {
    uint32x4_t v18 = v9;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[3]
      || ~v11 == 0)
    {
      char v11 = 3;
    }
  }
  int16x4_t v17 = a1;
  unsigned int v14 = *(unsigned __int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
  int16x4_t v16 = a2;
  return v14 < *(unsigned __int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
}

BOOL geom_compare_z_order_4u16(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2 = (int8x8_t)vceq_s16(a1, a2);
  if ((vminv_u16((uint16x4_t)v2) & 0x8000) != 0) {
    return 0;
  }
  uint16x4_t v3 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  int16x4_t v4 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v3, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  int8x8_t v5 = (int8x8_t)vshl_u16(v3, (uint16x4_t)vneg_s16(v4));
  int16x4_t v6 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v5, (int8x8_t)0xF000F000F000F0)));
  int16x4_t v7 = (int16x4_t)vshl_u16((uint16x4_t)v5, (uint16x4_t)vneg_s16(v6));
  int8x8_t v8 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v7, (int8x8_t)0xC000C000C000CLL)));
  uint32x4_t v9 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v4, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v8), v7)), vorr_s8((int8x8_t)v6, v8)));
  unsigned __int8 v10 = vmvn_s8(v2).u8[0];
  char v11 = (v10 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    uint32x4_t v20 = v9;
    if ((v10 & (*(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v10 & 1) - 1) & 3))) > v9.i32[1])) == 0) {
      char v11 = 1;
    }
  }
  if ((v2.i8[4] & 1) == 0)
  {
    uint32x4_t v19 = v9;
    if (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[2]
      || ~v11 == 0)
    {
      char v11 = 2;
    }
  }
  if ((v2.i8[6] & 1) == 0)
  {
    uint32x4_t v18 = v9;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[3]
      || ~v11 == 0)
    {
      char v11 = 3;
    }
  }
  int16x4_t v17 = a1;
  unsigned int v14 = *(unsigned __int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
  int16x4_t v16 = a2;
  return v14 < *(unsigned __int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
}

BOOL geom::compare_z_order<unsigned int,(unsigned char)2>(int32x2_t a1, int32x2_t a2)
{
  int8x8_t v2 = (int8x8_t)vceq_s32(a1, a2);
  if ((vpmin_u32((uint32x2_t)v2, (uint32x2_t)v2).u32[0] & 0x80000000) != 0) {
    return 0;
  }
  unsigned __int8 v3 = vmvn_s8(v2).u8[0];
  char v4 = ~v3;
  if ((v2.i8[4] & 1) == 0)
  {
    uint32x2_t v5 = (uint32x2_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
    int32x2_t v6 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v5, (uint32x2_t)0xFFFF0000FFFFLL), (int8x8_t)0x1000000010);
    int8x8_t v7 = (int8x8_t)vshl_u32(v5, (uint32x2_t)vneg_s32(v6));
    int32x2_t v8 = (int32x2_t)vbic_s8((int8x8_t)0x800000008, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FF00)));
    int8x8_t v9 = (int8x8_t)vshl_u32((uint32x2_t)v7, (uint32x2_t)vneg_s32(v8));
    int32x2_t v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    int32x2_t v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    int8x8_t v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    int8x8_t v17 = vorr_s8((int8x8_t)vsub_s32(v6, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8(vorr_s8((int8x8_t)v8, (int8x8_t)v10), v12));
    if ((v3 & (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v17.i32[1])) == 0) {
      char v4 = 1;
    }
  }
  int32x2_t v15 = a1;
  unsigned int v13 = *(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  int32x2_t v16 = a2;
  return v13 < *(_DWORD *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
}

BOOL geom_compare_z_order_2u(int32x2_t a1, int32x2_t a2)
{
  int8x8_t v2 = (int8x8_t)vceq_s32(a1, a2);
  if ((vpmin_u32((uint32x2_t)v2, (uint32x2_t)v2).u32[0] & 0x80000000) != 0) {
    return 0;
  }
  unsigned __int8 v3 = vmvn_s8(v2).u8[0];
  char v4 = ~v3;
  if ((v2.i8[4] & 1) == 0)
  {
    uint32x2_t v5 = (uint32x2_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
    int32x2_t v6 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v5, (uint32x2_t)0xFFFF0000FFFFLL), (int8x8_t)0x1000000010);
    int8x8_t v7 = (int8x8_t)vshl_u32(v5, (uint32x2_t)vneg_s32(v6));
    int32x2_t v8 = (int32x2_t)vbic_s8((int8x8_t)0x800000008, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FF00)));
    int8x8_t v9 = (int8x8_t)vshl_u32((uint32x2_t)v7, (uint32x2_t)vneg_s32(v8));
    int32x2_t v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    int32x2_t v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    int8x8_t v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    int8x8_t v17 = vorr_s8((int8x8_t)vsub_s32(v6, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8(vorr_s8((int8x8_t)v8, (int8x8_t)v10), v12));
    if ((v3 & (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v17.i32[1])) == 0) {
      char v4 = 1;
    }
  }
  int32x2_t v15 = a1;
  unsigned int v13 = *(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  int32x2_t v16 = a2;
  return v13 < *(_DWORD *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
}

BOOL geom::compare_z_order<unsigned int,(unsigned char)3>(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2 = vceqq_s32(a1, a2);
  uint32x4_t v3 = (uint32x4_t)v2;
  v3.i32[3] = v2.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v4 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v5.i64[0] = 0xFFFF0000FFFFLL;
  v5.i64[1] = 0xFFFF0000FFFFLL;
  v6.i64[0] = 0x1000000010;
  v6.i64[1] = 0x1000000010;
  int32x4_t v7 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v4, v5), v6);
  int8x16_t v8 = (int8x16_t)vshlq_u32(v4, (uint32x4_t)vnegq_s32(v7));
  v6.i64[0] = 0xFF000000FF00;
  v6.i64[1] = 0xFF000000FF00;
  v9.i64[0] = 0x800000008;
  v9.i64[1] = 0x800000008;
  int32x4_t v10 = (int32x4_t)vbicq_s8(v9, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v8, v6)));
  int8x16_t v11 = (int8x16_t)vshlq_u32((uint32x4_t)v8, (uint32x4_t)vnegq_s32(v10));
  v9.i64[0] = 0xF0000000F0;
  v9.i64[1] = 0xF0000000F0;
  v12.i64[0] = 0x400000004;
  v12.i64[1] = 0x400000004;
  int32x4_t v13 = (int32x4_t)vbicq_s8(v12, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v11, v9)));
  int32x4_t v14 = (int32x4_t)vshlq_u32((uint32x4_t)v11, (uint32x4_t)vnegq_s32(v13));
  v12.i64[0] = 0xC0000000CLL;
  v12.i64[1] = 0xC0000000CLL;
  v15.i64[0] = 0x200000002;
  v15.i64[1] = 0x200000002;
  int8x16_t v16 = vbicq_s8(v15, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v14, v12)));
  unsigned __int8 v17 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  int8x16_t v18 = vorrq_s8((int8x16_t)vsubq_s32(v7, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v15, (uint32x4_t)v16), v14)), vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), v16));
  char v19 = (v17 & 1) - 1;
  int16x4_t v20 = vmovn_s32(v2);
  if ((v20.i8[2] & 1) == 0)
  {
    int8x16_t v27 = v18;
    if ((v17 & (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v17 & 1) - 1) & 3))) > v18.i32[1])) == 0) {
      char v19 = 1;
    }
  }
  if ((v20.i8[4] & 1) == 0)
  {
    int8x16_t v26 = v18;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3))) <= v18.i32[2]
      || ~v19 == 0)
    {
      char v19 = 2;
    }
  }
  int32x4_t v25 = a1;
  unsigned int v22 = *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
  int32x4_t v24 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
}

BOOL geom_compare_z_order_3u(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2 = vceqq_s32(a1, a2);
  uint32x4_t v3 = (uint32x4_t)v2;
  v3.i32[3] = v2.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v4 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v5.i64[0] = 0xFFFF0000FFFFLL;
  v5.i64[1] = 0xFFFF0000FFFFLL;
  v6.i64[0] = 0x1000000010;
  v6.i64[1] = 0x1000000010;
  int32x4_t v7 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v4, v5), v6);
  int8x16_t v8 = (int8x16_t)vshlq_u32(v4, (uint32x4_t)vnegq_s32(v7));
  v6.i64[0] = 0xFF000000FF00;
  v6.i64[1] = 0xFF000000FF00;
  v9.i64[0] = 0x800000008;
  v9.i64[1] = 0x800000008;
  int32x4_t v10 = (int32x4_t)vbicq_s8(v9, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v8, v6)));
  int8x16_t v11 = (int8x16_t)vshlq_u32((uint32x4_t)v8, (uint32x4_t)vnegq_s32(v10));
  v9.i64[0] = 0xF0000000F0;
  v9.i64[1] = 0xF0000000F0;
  v12.i64[0] = 0x400000004;
  v12.i64[1] = 0x400000004;
  int32x4_t v13 = (int32x4_t)vbicq_s8(v12, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v11, v9)));
  int32x4_t v14 = (int32x4_t)vshlq_u32((uint32x4_t)v11, (uint32x4_t)vnegq_s32(v13));
  v12.i64[0] = 0xC0000000CLL;
  v12.i64[1] = 0xC0000000CLL;
  v15.i64[0] = 0x200000002;
  v15.i64[1] = 0x200000002;
  int8x16_t v16 = vbicq_s8(v15, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v14, v12)));
  unsigned __int8 v17 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  int8x16_t v18 = vorrq_s8((int8x16_t)vsubq_s32(v7, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v15, (uint32x4_t)v16), v14)), vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), v16));
  char v19 = (v17 & 1) - 1;
  int16x4_t v20 = vmovn_s32(v2);
  if ((v20.i8[2] & 1) == 0)
  {
    int8x16_t v27 = v18;
    if ((v17 & (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v17 & 1) - 1) & 3))) > v18.i32[1])) == 0) {
      char v19 = 1;
    }
  }
  if ((v20.i8[4] & 1) == 0)
  {
    int8x16_t v26 = v18;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3))) <= v18.i32[2]
      || ~v19 == 0)
    {
      char v19 = 2;
    }
  }
  int32x4_t v25 = a1;
  unsigned int v22 = *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
  int32x4_t v24 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
}

BOOL geom::compare_z_order<unsigned int,(unsigned char)4>(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2 = vceqq_s32(a1, a2);
  if ((vminvq_u32((uint32x4_t)v2) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v3 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v4.i64[0] = 0xFFFF0000FFFFLL;
  v4.i64[1] = 0xFFFF0000FFFFLL;
  v5.i64[0] = 0x1000000010;
  v5.i64[1] = 0x1000000010;
  int32x4_t v6 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v3, v4), v5);
  int8x16_t v7 = (int8x16_t)vshlq_u32(v3, (uint32x4_t)vnegq_s32(v6));
  v5.i64[0] = 0xFF000000FF00;
  v5.i64[1] = 0xFF000000FF00;
  v8.i64[0] = 0x800000008;
  v8.i64[1] = 0x800000008;
  int32x4_t v9 = (int32x4_t)vbicq_s8(v8, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v7, v5)));
  int8x16_t v10 = (int8x16_t)vshlq_u32((uint32x4_t)v7, (uint32x4_t)vnegq_s32(v9));
  v8.i64[0] = 0xF0000000F0;
  v8.i64[1] = 0xF0000000F0;
  v11.i64[0] = 0x400000004;
  v11.i64[1] = 0x400000004;
  int32x4_t v12 = (int32x4_t)vbicq_s8(v11, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v10, v8)));
  int32x4_t v13 = (int32x4_t)vshlq_u32((uint32x4_t)v10, (uint32x4_t)vnegq_s32(v12));
  v11.i64[0] = 0xC0000000CLL;
  v11.i64[1] = 0xC0000000CLL;
  v14.i64[0] = 0x200000002;
  v14.i64[1] = 0x200000002;
  int8x16_t v15 = vbicq_s8(v14, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v13, v11)));
  unsigned __int8 v16 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  int8x16_t v17 = vorrq_s8((int8x16_t)vsubq_s32(v6, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v14, (uint32x4_t)v15), v13)), vorrq_s8(vorrq_s8((int8x16_t)v9, (int8x16_t)v12), v15));
  char v18 = (v16 & 1) - 1;
  int16x4_t v19 = vmovn_s32(v2);
  if ((v19.i8[2] & 1) == 0)
  {
    int8x16_t v28 = v17;
    if ((v16 & (*(_DWORD *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v16 & 1) - 1) & 3))) > v17.i32[1])) == 0) {
      char v18 = 1;
    }
  }
  if ((v19.i8[4] & 1) == 0)
  {
    int8x16_t v27 = v17;
    if (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[2]
      || ~v18 == 0)
    {
      char v18 = 2;
    }
  }
  if ((v19.i8[6] & 1) == 0)
  {
    int8x16_t v26 = v17;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[3]
      || ~v18 == 0)
    {
      char v18 = 3;
    }
  }
  int32x4_t v24 = a1;
  unsigned int v22 = *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
  int32x4_t v25 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
}

BOOL geom_compare_z_order_4u(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2 = vceqq_s32(a1, a2);
  if ((vminvq_u32((uint32x4_t)v2) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v3 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v4.i64[0] = 0xFFFF0000FFFFLL;
  v4.i64[1] = 0xFFFF0000FFFFLL;
  v5.i64[0] = 0x1000000010;
  v5.i64[1] = 0x1000000010;
  int32x4_t v6 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v3, v4), v5);
  int8x16_t v7 = (int8x16_t)vshlq_u32(v3, (uint32x4_t)vnegq_s32(v6));
  v5.i64[0] = 0xFF000000FF00;
  v5.i64[1] = 0xFF000000FF00;
  v8.i64[0] = 0x800000008;
  v8.i64[1] = 0x800000008;
  int32x4_t v9 = (int32x4_t)vbicq_s8(v8, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v7, v5)));
  int8x16_t v10 = (int8x16_t)vshlq_u32((uint32x4_t)v7, (uint32x4_t)vnegq_s32(v9));
  v8.i64[0] = 0xF0000000F0;
  v8.i64[1] = 0xF0000000F0;
  v11.i64[0] = 0x400000004;
  v11.i64[1] = 0x400000004;
  int32x4_t v12 = (int32x4_t)vbicq_s8(v11, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v10, v8)));
  int32x4_t v13 = (int32x4_t)vshlq_u32((uint32x4_t)v10, (uint32x4_t)vnegq_s32(v12));
  v11.i64[0] = 0xC0000000CLL;
  v11.i64[1] = 0xC0000000CLL;
  v14.i64[0] = 0x200000002;
  v14.i64[1] = 0x200000002;
  int8x16_t v15 = vbicq_s8(v14, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v13, v11)));
  unsigned __int8 v16 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  int8x16_t v17 = vorrq_s8((int8x16_t)vsubq_s32(v6, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v14, (uint32x4_t)v15), v13)), vorrq_s8(vorrq_s8((int8x16_t)v9, (int8x16_t)v12), v15));
  char v18 = (v16 & 1) - 1;
  int16x4_t v19 = vmovn_s32(v2);
  if ((v19.i8[2] & 1) == 0)
  {
    int8x16_t v28 = v17;
    if ((v16 & (*(_DWORD *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v16 & 1) - 1) & 3))) > v17.i32[1])) == 0) {
      char v18 = 1;
    }
  }
  if ((v19.i8[4] & 1) == 0)
  {
    int8x16_t v27 = v17;
    if (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[2]
      || ~v18 == 0)
    {
      char v18 = 2;
    }
  }
  if ((v19.i8[6] & 1) == 0)
  {
    int8x16_t v26 = v17;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[3]
      || ~v18 == 0)
    {
      char v18 = 3;
    }
  }
  int32x4_t v24 = a1;
  unsigned int v22 = *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
  int32x4_t v25 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
}

BOOL geom::compare_z_order<unsigned long long,(unsigned char)2>(int64x2_t a1, int64x2_t a2)
{
  int64x2_t v2 = vceqq_s64(a1, a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v2, 1), (int8x16_t)v2).u64[0] & 0x8000000000000000) != 0) {
    return 0;
  }
  unsigned __int8 v3 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  char v4 = ~v3;
  if ((vmovn_s64(v2).i32[1] & 1) == 0)
  {
    uint64x2_t v5 = (uint64x2_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
    v6.i64[0] = 0xFFFFFFFFLL;
    v6.i64[1] = 0xFFFFFFFFLL;
    int64x2_t v7 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v5, v6), (int8x16_t)vdupq_n_s64(0x20uLL));
    int8x16_t v8 = (int8x16_t)vshlq_u64(v5, (uint64x2_t)vnegq_s64(v7));
    v9.i64[0] = 4294901760;
    v9.i64[1] = 4294901760;
    int64x2_t v10 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(0x10uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v8, v9)));
    int8x16_t v11 = (int8x16_t)vshlq_u64((uint64x2_t)v8, (uint64x2_t)vnegq_s64(v10));
    v12.i64[0] = 65280;
    v12.i64[1] = 65280;
    int64x2_t v13 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(8uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v11, v12)));
    int8x16_t v14 = (int8x16_t)vshlq_u64((uint64x2_t)v11, (uint64x2_t)vnegq_s64(v13));
    int64x2_t v15 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(4uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v14, (int8x16_t)vdupq_n_s64(0xF0uLL))));
    int64x2_t v16 = (int64x2_t)vshlq_u64((uint64x2_t)v14, (uint64x2_t)vnegq_s64(v15));
    int8x16_t v17 = (int8x16_t)vdupq_n_s64(2uLL);
    int8x16_t v18 = vbicq_s8(v17, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v16, (int8x16_t)vdupq_n_s64(0xCuLL))));
    int32x2_t v23 = vmovn_s64((int64x2_t)vorrq_s8((int8x16_t)vsubq_s64(v7, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v17, (uint64x2_t)v18), v16)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), (int8x16_t)v15), v18)));
    if ((v3 & (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v23.i32[1])) == 0) {
      char v4 = 1;
    }
  }
  int64x2_t v21 = a1;
  unint64_t v19 = *(void *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
  int64x2_t v22 = a2;
  return v19 < *(void *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
}

BOOL geom_compare_z_order_2u64(int64x2_t a1, int64x2_t a2)
{
  int64x2_t v2 = vceqq_s64(a1, a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64(v2, 1), (int8x16_t)v2).u64[0] & 0x8000000000000000) != 0) {
    return 0;
  }
  unsigned __int8 v3 = vmovn_s64((int64x2_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  char v4 = ~v3;
  if ((vmovn_s64(v2).i32[1] & 1) == 0)
  {
    uint64x2_t v5 = (uint64x2_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
    v6.i64[0] = 0xFFFFFFFFLL;
    v6.i64[1] = 0xFFFFFFFFLL;
    int64x2_t v7 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v5, v6), (int8x16_t)vdupq_n_s64(0x20uLL));
    int8x16_t v8 = (int8x16_t)vshlq_u64(v5, (uint64x2_t)vnegq_s64(v7));
    v9.i64[0] = 4294901760;
    v9.i64[1] = 4294901760;
    int64x2_t v10 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(0x10uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v8, v9)));
    int8x16_t v11 = (int8x16_t)vshlq_u64((uint64x2_t)v8, (uint64x2_t)vnegq_s64(v10));
    v12.i64[0] = 65280;
    v12.i64[1] = 65280;
    int64x2_t v13 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(8uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v11, v12)));
    int8x16_t v14 = (int8x16_t)vshlq_u64((uint64x2_t)v11, (uint64x2_t)vnegq_s64(v13));
    int64x2_t v15 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(4uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v14, (int8x16_t)vdupq_n_s64(0xF0uLL))));
    int64x2_t v16 = (int64x2_t)vshlq_u64((uint64x2_t)v14, (uint64x2_t)vnegq_s64(v15));
    int8x16_t v17 = (int8x16_t)vdupq_n_s64(2uLL);
    int8x16_t v18 = vbicq_s8(v17, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v16, (int8x16_t)vdupq_n_s64(0xCuLL))));
    int32x2_t v23 = vmovn_s64((int64x2_t)vorrq_s8((int8x16_t)vsubq_s64(v7, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v17, (uint64x2_t)v18), v16)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), (int8x16_t)v15), v18)));
    if ((v3 & (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v23.i32[1])) == 0) {
      char v4 = 1;
    }
  }
  int64x2_t v21 = a1;
  unint64_t v19 = *(void *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
  int64x2_t v22 = a2;
  return v19 < *(void *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF7 | (8 * (v4 & 1)));
}

BOOL geom::compare_z_order<unsigned long long,(unsigned char)3>(uint64_t a1, uint64_t a2)
{
  int8x16_t v7 = *(int8x16_t *)a1;
  int64x2_t v8 = *(int64x2_t *)(a1 + 16);
  int8x16_t v9 = *(int8x16_t *)a2;
  int64x2_t v10 = *(int64x2_t *)(a2 + 16);
  int64x2_t v11 = vceqq_s64(v8, v10);
  int32x4_t v12 = (int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v12, 1), vandq_s8((int8x16_t)v11, (int8x16_t)v12)).u64[0] & 0x8000000000000000) != 0) {
    return 0;
  }
  unint64_t v13 = vextq_s8(v7, v7, 8uLL).u64[0];
  unint64_t v14 = vextq_s8(v9, v9, 8uLL).u64[0];
  uint64x2_t v15 = (uint64x2_t)veorq_s8((int8x16_t)v10, (int8x16_t)v8);
  uint64x2_t v16 = (uint64x2_t)veorq_s8(v9, v7);
  v17.i64[0] = 0xFFFFFFFFLL;
  v17.i64[1] = 0xFFFFFFFFLL;
  int8x16_t v18 = (int8x16_t)vcgtq_u64(v16, v17);
  v2.i64[0] = 32;
  int64x2_t v19 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v15, v17), v2);
  int64x2_t v20 = (int64x2_t)vandq_s8(v18, (int8x16_t)vdupq_n_s64(0x20uLL));
  int8x16_t v21 = (int8x16_t)vshlq_u64(v16, (uint64x2_t)vnegq_s64(v20));
  uint64x2_t v22 = vshlq_u64(v15, (uint64x2_t)vnegq_s64(v19));
  LOBYTE(v23) = 0;
  LOWORD(v24) = 0;
  HIWORD(v24) = v22.i16[1];
  v25.i64[0] = 4294901760;
  v25.i64[1] = 4294901760;
  v3.i64[0] = 16;
  int64x2_t v26 = (int64x2_t)vbicq_s8(v3, (int8x16_t)vceqzq_s64((int64x2_t)v24));
  int64x2_t v27 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(0x10uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v21, v25)));
  int8x16_t v28 = (int8x16_t)vshlq_u64((uint64x2_t)v21, (uint64x2_t)vnegq_s64(v27));
  uint64x2_t v29 = vshlq_u64(v22, (uint64x2_t)vnegq_s64(v26));
  HIBYTE(v23) = v29.i8[1];
  v30.i64[0] = 65280;
  v30.i64[1] = 65280;
  v4.i64[0] = 8;
  int64x2_t v31 = (int64x2_t)vbicq_s8(v4, (int8x16_t)vceqzq_s64((int64x2_t)v23));
  int64x2_t v32 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(8uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v28, v30)));
  int8x16_t v33 = (int8x16_t)vshlq_u64((uint64x2_t)v28, (uint64x2_t)vnegq_s64(v32));
  int8x16_t v34 = (int8x16_t)vshlq_u64(v29, (uint64x2_t)vnegq_s64(v31));
  v4.i64[0] = 240;
  v5.i64[0] = 4;
  int64x2_t v35 = (int64x2_t)vbicq_s8(v5, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v34, v4)));
  int64x2_t v36 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(4uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v33, (int8x16_t)vdupq_n_s64(0xF0uLL))));
  int64x2_t v37 = (int64x2_t)vshlq_u64((uint64x2_t)v33, (uint64x2_t)vnegq_s64(v36));
  int64x2_t v38 = (int64x2_t)vshlq_u64((uint64x2_t)v34, (uint64x2_t)vnegq_s64(v35));
  v5.i64[0] = 12;
  int8x16_t v39 = (int8x16_t)vdupq_n_s64(2uLL);
  v6.i64[0] = 2;
  int8x16_t v40 = vbicq_s8(v6, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v38, v5)));
  int8x16_t v41 = vbicq_s8(v39, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v37, (int8x16_t)vdupq_n_s64(0xCuLL))));
  int32x4_t v42 = vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v20, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v39, (uint64x2_t)v41), v37)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v27, (int8x16_t)v32), (int8x16_t)v36), v41)), (int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v19, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)v40), v38)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v26, (int8x16_t)v31), (int8x16_t)v35), v40)));
  int32x4_t v43 = (int32x4_t)vmvnq_s8((int8x16_t)v12);
  *(int32x2_t *)v43.i8 = vmovn_s64((int64x2_t)v43);
  unsigned __int8 v44 = vmovn_s32(v43).u8[0];
  char v45 = (v44 & 1) - 1;
  *(int32x2_t *)v12.i8 = vmovn_s64((int64x2_t)v12);
  if ((vmovn_s32(v12).i8[2] & 1) == 0)
  {
    int32x4_t v53 = v42;
    if ((v44 & (*(_DWORD *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v44 & 1) - 1) & 3))) > v42.i32[1])) == 0) {
      char v45 = 1;
    }
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v11, v11)).i32[1] & 1) == 0)
  {
    int32x4_t v52 = v42;
    if (*(_DWORD *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF3 | (4 * (v45 & 3))) <= v42.i32[2]
      || ~v45 == 0)
    {
      char v45 = 2;
    }
  }
  v7.i64[1] = v13;
  v51[0] = v7;
  v51[1] = v8;
  uint64_t v47 = v45 & 3;
  unint64_t v48 = *((void *)v51 + v47);
  v9.i64[1] = v14;
  v50[0] = v9;
  v50[1] = v10;
  return v48 < *((void *)v50 + v47);
}

BOOL geom_compare_z_order_3u64(uint64_t a1, uint64_t a2)
{
  int8x16_t v7 = *(int8x16_t *)a1;
  int64x2_t v8 = *(int64x2_t *)(a1 + 16);
  int8x16_t v9 = *(int8x16_t *)a2;
  int64x2_t v10 = *(int64x2_t *)(a2 + 16);
  int64x2_t v11 = vceqq_s64(v8, v10);
  int32x4_t v12 = (int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2);
  if ((vandq_s8((int8x16_t)vdupq_laneq_s64((int64x2_t)v12, 1), vandq_s8((int8x16_t)v11, (int8x16_t)v12)).u64[0] & 0x8000000000000000) != 0) {
    return 0;
  }
  unint64_t v13 = vextq_s8(v7, v7, 8uLL).u64[0];
  unint64_t v14 = vextq_s8(v9, v9, 8uLL).u64[0];
  uint64x2_t v15 = (uint64x2_t)veorq_s8((int8x16_t)v10, (int8x16_t)v8);
  uint64x2_t v16 = (uint64x2_t)veorq_s8(v9, v7);
  v17.i64[0] = 0xFFFFFFFFLL;
  v17.i64[1] = 0xFFFFFFFFLL;
  int8x16_t v18 = (int8x16_t)vcgtq_u64(v16, v17);
  v2.i64[0] = 32;
  int64x2_t v19 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v15, v17), v2);
  int64x2_t v20 = (int64x2_t)vandq_s8(v18, (int8x16_t)vdupq_n_s64(0x20uLL));
  int8x16_t v21 = (int8x16_t)vshlq_u64(v16, (uint64x2_t)vnegq_s64(v20));
  uint64x2_t v22 = vshlq_u64(v15, (uint64x2_t)vnegq_s64(v19));
  LOBYTE(v23) = 0;
  LOWORD(v24) = 0;
  HIWORD(v24) = v22.i16[1];
  v25.i64[0] = 4294901760;
  v25.i64[1] = 4294901760;
  v3.i64[0] = 16;
  int64x2_t v26 = (int64x2_t)vbicq_s8(v3, (int8x16_t)vceqzq_s64((int64x2_t)v24));
  int64x2_t v27 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(0x10uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v21, v25)));
  int8x16_t v28 = (int8x16_t)vshlq_u64((uint64x2_t)v21, (uint64x2_t)vnegq_s64(v27));
  uint64x2_t v29 = vshlq_u64(v22, (uint64x2_t)vnegq_s64(v26));
  HIBYTE(v23) = v29.i8[1];
  v30.i64[0] = 65280;
  v30.i64[1] = 65280;
  v4.i64[0] = 8;
  int64x2_t v31 = (int64x2_t)vbicq_s8(v4, (int8x16_t)vceqzq_s64((int64x2_t)v23));
  int64x2_t v32 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(8uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v28, v30)));
  int8x16_t v33 = (int8x16_t)vshlq_u64((uint64x2_t)v28, (uint64x2_t)vnegq_s64(v32));
  int8x16_t v34 = (int8x16_t)vshlq_u64(v29, (uint64x2_t)vnegq_s64(v31));
  v4.i64[0] = 240;
  v5.i64[0] = 4;
  int64x2_t v35 = (int64x2_t)vbicq_s8(v5, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v34, v4)));
  int64x2_t v36 = (int64x2_t)vbicq_s8((int8x16_t)vdupq_n_s64(4uLL), (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v33, (int8x16_t)vdupq_n_s64(0xF0uLL))));
  int64x2_t v37 = (int64x2_t)vshlq_u64((uint64x2_t)v33, (uint64x2_t)vnegq_s64(v36));
  int64x2_t v38 = (int64x2_t)vshlq_u64((uint64x2_t)v34, (uint64x2_t)vnegq_s64(v35));
  v5.i64[0] = 12;
  int8x16_t v39 = (int8x16_t)vdupq_n_s64(2uLL);
  v6.i64[0] = 2;
  int8x16_t v40 = vbicq_s8(v6, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v38, v5)));
  int8x16_t v41 = vbicq_s8(v39, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v37, (int8x16_t)vdupq_n_s64(0xCuLL))));
  int32x4_t v42 = vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v20, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v39, (uint64x2_t)v41), v37)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v27, (int8x16_t)v32), (int8x16_t)v36), v41)), (int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v19, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v6, (uint64x2_t)v40), v38)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v26, (int8x16_t)v31), (int8x16_t)v35), v40)));
  int32x4_t v43 = (int32x4_t)vmvnq_s8((int8x16_t)v12);
  *(int32x2_t *)v43.i8 = vmovn_s64((int64x2_t)v43);
  unsigned __int8 v44 = vmovn_s32(v43).u8[0];
  char v45 = (v44 & 1) - 1;
  *(int32x2_t *)v12.i8 = vmovn_s64((int64x2_t)v12);
  if ((vmovn_s32(v12).i8[2] & 1) == 0)
  {
    int32x4_t v53 = v42;
    if ((v44 & (*(_DWORD *)((unint64_t)&v53 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v44 & 1) - 1) & 3))) > v42.i32[1])) == 0) {
      char v45 = 1;
    }
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v11, v11)).i32[1] & 1) == 0)
  {
    int32x4_t v52 = v42;
    if (*(_DWORD *)((unint64_t)&v52 & 0xFFFFFFFFFFFFFFF3 | (4 * (v45 & 3))) <= v42.i32[2]
      || ~v45 == 0)
    {
      char v45 = 2;
    }
  }
  v7.i64[1] = v13;
  v51[0] = v7;
  v51[1] = v8;
  uint64_t v47 = v45 & 3;
  unint64_t v48 = *((void *)v51 + v47);
  v9.i64[1] = v14;
  v50[0] = v9;
  v50[1] = v10;
  return v48 < *((void *)v50 + v47);
}

BOOL geom::compare_z_order<unsigned long long,(unsigned char)4>(uint64_t a1, uint64_t a2)
{
  int8x16_t v2 = *(int8x16_t *)a1;
  int64x2_t v3 = *(int64x2_t *)(a1 + 16);
  int8x16_t v4 = *(int8x16_t *)a2;
  int64x2_t v5 = *(int64x2_t *)(a2 + 16);
  int64x2_t v6 = vceqq_s64(v3, v5);
  int32x4_t v7 = (int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2);
  int64x2_t v8 = (int64x2_t)vandq_s8((int8x16_t)v7, (int8x16_t)v6);
  if ((vandq_s8((int8x16_t)v8, (int8x16_t)vdupq_laneq_s64(v8, 1)).u64[0] & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64x2_t v9 = (uint64x2_t)veorq_s8((int8x16_t)v5, (int8x16_t)v3);
  uint64x2_t v10 = (uint64x2_t)veorq_s8(v4, v2);
  v11.i64[0] = 0xFFFFFFFFLL;
  v11.i64[1] = 0xFFFFFFFFLL;
  int8x16_t v12 = (int8x16_t)vcgtq_u64(v10, v11);
  int8x16_t v13 = (int8x16_t)vdupq_n_s64(0x20uLL);
  int64x2_t v14 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v9, v11), v13);
  int64x2_t v15 = (int64x2_t)vandq_s8(v12, v13);
  int8x16_t v16 = (int8x16_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v15));
  int8x16_t v17 = (int8x16_t)vshlq_u64(v9, (uint64x2_t)vnegq_s64(v14));
  v13.i64[0] = 4294901760;
  v13.i64[1] = 4294901760;
  int8x16_t v18 = (int8x16_t)vdupq_n_s64(0x10uLL);
  int64x2_t v19 = (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v17, v13)));
  int64x2_t v20 = (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v16, v13)));
  int8x16_t v21 = (int8x16_t)vshlq_u64((uint64x2_t)v16, (uint64x2_t)vnegq_s64(v20));
  int8x16_t v22 = (int8x16_t)vshlq_u64((uint64x2_t)v17, (uint64x2_t)vnegq_s64(v19));
  v18.i64[0] = 65280;
  v18.i64[1] = 65280;
  int8x16_t v23 = (int8x16_t)vdupq_n_s64(8uLL);
  int64x2_t v24 = (int64x2_t)vbicq_s8(v23, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v22, v18)));
  int64x2_t v25 = (int64x2_t)vbicq_s8(v23, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v21, v18)));
  int8x16_t v26 = (int8x16_t)vshlq_u64((uint64x2_t)v21, (uint64x2_t)vnegq_s64(v25));
  int8x16_t v27 = (int8x16_t)vshlq_u64((uint64x2_t)v22, (uint64x2_t)vnegq_s64(v24));
  int8x16_t v28 = (int8x16_t)vdupq_n_s64(0xF0uLL);
  int8x16_t v29 = (int8x16_t)vdupq_n_s64(4uLL);
  int64x2_t v30 = (int64x2_t)vbicq_s8(v29, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v27, v28)));
  int64x2_t v31 = (int64x2_t)vbicq_s8(v29, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v26, v28)));
  int64x2_t v32 = (int64x2_t)vshlq_u64((uint64x2_t)v26, (uint64x2_t)vnegq_s64(v31));
  int8x16_t v33 = (int8x16_t)vdupq_n_s64(0xCuLL);
  int64x2_t v34 = (int64x2_t)vshlq_u64((uint64x2_t)v27, (uint64x2_t)vnegq_s64(v30));
  int8x16_t v35 = (int8x16_t)vdupq_n_s64(2uLL);
  int8x16_t v36 = vbicq_s8(v35, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v34, v33)));
  int8x16_t v37 = vbicq_s8(v35, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v32, v33)));
  int32x4_t v38 = vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v15, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)v37), v32)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v20, (int8x16_t)v25), (int8x16_t)v31), v37)), (int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v14, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)v36), v34)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v19, (int8x16_t)v24), (int8x16_t)v30), v36)));
  int32x4_t v39 = (int32x4_t)vmvnq_s8((int8x16_t)v7);
  *(int32x2_t *)v39.i8 = vmovn_s64((int64x2_t)v39);
  unsigned __int8 v40 = vmovn_s32(v39).u8[0];
  char v41 = (v40 & 1) - 1;
  *(int32x2_t *)v7.i8 = vmovn_s64((int64x2_t)v7);
  *(int16x4_t *)v7.i8 = vmovn_s32(v7);
  if ((v7.i8[2] & 1) == 0)
  {
    int32x4_t v51 = v38;
    if ((v40 & (*(_DWORD *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v40 & 1) - 1) & 3))) > v38.i32[1])) == 0) {
      char v41 = 1;
    }
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v7, v6)).i32[1] & 1) == 0)
  {
    int32x4_t v50 = v38;
    if (*(_DWORD *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3))) <= v38.i32[2]
      || ~v41 == 0)
    {
      char v41 = 2;
    }
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v6, v6)).i8[6] & 1) == 0)
  {
    int32x4_t v49 = v38;
    if (*(_DWORD *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3))) <= v38.i32[3]
      || ~v41 == 0)
    {
      char v41 = 3;
    }
  }
  v48[0] = v2;
  v48[1] = v3;
  uint64_t v44 = v41 & 3;
  unint64_t v45 = *((void *)v48 + v44);
  v47[0] = v4;
  v47[1] = v5;
  return v45 < *((void *)v47 + v44);
}

BOOL geom_compare_z_order_4u64(uint64_t a1, uint64_t a2)
{
  int8x16_t v2 = *(int8x16_t *)a1;
  int64x2_t v3 = *(int64x2_t *)(a1 + 16);
  int8x16_t v4 = *(int8x16_t *)a2;
  int64x2_t v5 = *(int64x2_t *)(a2 + 16);
  int64x2_t v6 = vceqq_s64(v3, v5);
  int32x4_t v7 = (int32x4_t)vceqq_s64(*(int64x2_t *)a1, *(int64x2_t *)a2);
  int64x2_t v8 = (int64x2_t)vandq_s8((int8x16_t)v7, (int8x16_t)v6);
  if ((vandq_s8((int8x16_t)v8, (int8x16_t)vdupq_laneq_s64(v8, 1)).u64[0] & 0x8000000000000000) != 0) {
    return 0;
  }
  uint64x2_t v9 = (uint64x2_t)veorq_s8((int8x16_t)v5, (int8x16_t)v3);
  uint64x2_t v10 = (uint64x2_t)veorq_s8(v4, v2);
  v11.i64[0] = 0xFFFFFFFFLL;
  v11.i64[1] = 0xFFFFFFFFLL;
  int8x16_t v12 = (int8x16_t)vcgtq_u64(v10, v11);
  int8x16_t v13 = (int8x16_t)vdupq_n_s64(0x20uLL);
  int64x2_t v14 = (int64x2_t)vandq_s8((int8x16_t)vcgtq_u64(v9, v11), v13);
  int64x2_t v15 = (int64x2_t)vandq_s8(v12, v13);
  int8x16_t v16 = (int8x16_t)vshlq_u64(v10, (uint64x2_t)vnegq_s64(v15));
  int8x16_t v17 = (int8x16_t)vshlq_u64(v9, (uint64x2_t)vnegq_s64(v14));
  v13.i64[0] = 4294901760;
  v13.i64[1] = 4294901760;
  int8x16_t v18 = (int8x16_t)vdupq_n_s64(0x10uLL);
  int64x2_t v19 = (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v17, v13)));
  int64x2_t v20 = (int64x2_t)vbicq_s8(v18, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v16, v13)));
  int8x16_t v21 = (int8x16_t)vshlq_u64((uint64x2_t)v16, (uint64x2_t)vnegq_s64(v20));
  int8x16_t v22 = (int8x16_t)vshlq_u64((uint64x2_t)v17, (uint64x2_t)vnegq_s64(v19));
  v18.i64[0] = 65280;
  v18.i64[1] = 65280;
  int8x16_t v23 = (int8x16_t)vdupq_n_s64(8uLL);
  int64x2_t v24 = (int64x2_t)vbicq_s8(v23, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v22, v18)));
  int64x2_t v25 = (int64x2_t)vbicq_s8(v23, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v21, v18)));
  int8x16_t v26 = (int8x16_t)vshlq_u64((uint64x2_t)v21, (uint64x2_t)vnegq_s64(v25));
  int8x16_t v27 = (int8x16_t)vshlq_u64((uint64x2_t)v22, (uint64x2_t)vnegq_s64(v24));
  int8x16_t v28 = (int8x16_t)vdupq_n_s64(0xF0uLL);
  int8x16_t v29 = (int8x16_t)vdupq_n_s64(4uLL);
  int64x2_t v30 = (int64x2_t)vbicq_s8(v29, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v27, v28)));
  int64x2_t v31 = (int64x2_t)vbicq_s8(v29, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8(v26, v28)));
  int64x2_t v32 = (int64x2_t)vshlq_u64((uint64x2_t)v26, (uint64x2_t)vnegq_s64(v31));
  int8x16_t v33 = (int8x16_t)vdupq_n_s64(0xCuLL);
  int64x2_t v34 = (int64x2_t)vshlq_u64((uint64x2_t)v27, (uint64x2_t)vnegq_s64(v30));
  int8x16_t v35 = (int8x16_t)vdupq_n_s64(2uLL);
  int8x16_t v36 = vbicq_s8(v35, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v34, v33)));
  int8x16_t v37 = vbicq_s8(v35, (int8x16_t)vceqzq_s64((int64x2_t)vandq_s8((int8x16_t)v32, v33)));
  int32x4_t v38 = vuzp1q_s32((int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v15, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)v37), v32)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v20, (int8x16_t)v25), (int8x16_t)v31), v37)), (int32x4_t)vorrq_s8((int8x16_t)vsubq_s64(v14, vtstq_s64((int64x2_t)vshlq_u64((uint64x2_t)v35, (uint64x2_t)v36), v34)), vorrq_s8(vorrq_s8(vorrq_s8((int8x16_t)v19, (int8x16_t)v24), (int8x16_t)v30), v36)));
  int32x4_t v39 = (int32x4_t)vmvnq_s8((int8x16_t)v7);
  *(int32x2_t *)v39.i8 = vmovn_s64((int64x2_t)v39);
  unsigned __int8 v40 = vmovn_s32(v39).u8[0];
  char v41 = (v40 & 1) - 1;
  *(int32x2_t *)v7.i8 = vmovn_s64((int64x2_t)v7);
  *(int16x4_t *)v7.i8 = vmovn_s32(v7);
  if ((v7.i8[2] & 1) == 0)
  {
    int32x4_t v51 = v38;
    if ((v40 & (*(_DWORD *)((unint64_t)&v51 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v40 & 1) - 1) & 3))) > v38.i32[1])) == 0) {
      char v41 = 1;
    }
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v7, v6)).i32[1] & 1) == 0)
  {
    int32x4_t v50 = v38;
    if (*(_DWORD *)((unint64_t)&v50 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3))) <= v38.i32[2]
      || ~v41 == 0)
    {
      char v41 = 2;
    }
  }
  if ((vmovn_s32(vmovn_hight_s64(*(int32x2_t *)&v6, v6)).i8[6] & 1) == 0)
  {
    int32x4_t v49 = v38;
    if (*(_DWORD *)((unint64_t)&v49 & 0xFFFFFFFFFFFFFFF3 | (4 * (v41 & 3))) <= v38.i32[3]
      || ~v41 == 0)
    {
      char v41 = 3;
    }
  }
  v48[0] = v2;
  v48[1] = v3;
  uint64_t v44 = v41 & 3;
  unint64_t v45 = *((void *)v48 + v44);
  v47[0] = v4;
  v47[1] = v5;
  return v45 < *((void *)v47 + v44);
}

BOOL geom::compare_z_order<signed char,(unsigned char)2>(__int16 a1, __int16 a2)
{
  v2.i32[0] = a1;
  v2.i32[1] = HIBYTE(a1);
  v3.i32[0] = a2;
  v3.i32[1] = HIBYTE(a2);
  int8x8_t v4 = (int8x8_t)vceq_s32((int32x2_t)vand_s8(v2, (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8(v3, (int8x8_t)0xFF000000FFLL));
  *(int8x8_t *)v5.i8 = vdup_lane_s8(v4, 0);
  v5.u64[1] = (unint64_t)vdup_lane_s8(v4, 4);
  if ((vminv_u8((uint8x8_t)vqtbl1_s8(v5, (int8x8_t)0xF060D040B020900)) & 0x80) != 0) {
    return 0;
  }
  if (a1 == a2) {
    char v6 = -1;
  }
  else {
    char v6 = 0;
  }
  if ((v4.i8[4] & 1) == 0)
  {
    v7.i32[0] = (a2 ^ a1);
    v7.i32[1] = ((unsigned __int16)(a2 ^ a1) >> 8);
    uint32x2_t v8 = (uint32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FFLL);
    int32x2_t v9 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v8, (uint32x2_t)0xF0000000FLL), (int8x8_t)0x400000004);
    int32x2_t v10 = (int32x2_t)vshl_u32(v8, (uint32x2_t)vneg_s32(v9));
    int8x8_t v11 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)(*(void *)&v10 & 0xFFFFFF0CFFFFFF0CLL)));
    int8x8_t v17 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v9, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v11), v10)), v11), (int8x8_t)0xFF000000FFLL);
    if (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v17.i32[1]
      || a1 == a2)
    {
      char v6 = 1;
    }
  }
  int8x8_t v16 = v2;
  int v13 = *(char *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  int8x8_t v15 = v3;
  return v13 < *(char *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom_compare_z_order_2i8(__int16 a1, __int16 a2)
{
  v2.i32[0] = a1;
  v2.i32[1] = HIBYTE(a1);
  v3.i32[0] = a2;
  v3.i32[1] = HIBYTE(a2);
  int8x8_t v4 = (int8x8_t)vceq_s32((int32x2_t)vand_s8(v2, (int8x8_t)0xFF000000FFLL), (int32x2_t)vand_s8(v3, (int8x8_t)0xFF000000FFLL));
  *(int8x8_t *)v5.i8 = vdup_lane_s8(v4, 0);
  v5.u64[1] = (unint64_t)vdup_lane_s8(v4, 4);
  if ((vminv_u8((uint8x8_t)vqtbl1_s8(v5, (int8x8_t)0xF060D040B020900)) & 0x80) != 0) {
    return 0;
  }
  if (a1 == a2) {
    char v6 = -1;
  }
  else {
    char v6 = 0;
  }
  if ((v4.i8[4] & 1) == 0)
  {
    v7.i32[0] = (a2 ^ a1);
    v7.i32[1] = ((unsigned __int16)(a2 ^ a1) >> 8);
    uint32x2_t v8 = (uint32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FFLL);
    int32x2_t v9 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v8, (uint32x2_t)0xF0000000FLL), (int8x8_t)0x400000004);
    int32x2_t v10 = (int32x2_t)vshl_u32(v8, (uint32x2_t)vneg_s32(v9));
    int8x8_t v11 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)(*(void *)&v10 & 0xFFFFFF0CFFFFFF0CLL)));
    int8x8_t v17 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v9, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v11), v10)), v11), (int8x8_t)0xFF000000FFLL);
    if (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v17.i32[1]
      || a1 == a2)
    {
      char v6 = 1;
    }
  }
  int8x8_t v16 = v2;
  int v13 = *(char *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  int8x8_t v15 = v3;
  return v13 < *(char *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom::compare_z_order<signed char,(unsigned char)3>(__int32 a1, __int32 a2, int8x8_t a3, int8x8_t a4)
{
  a3.i32[0] = a1;
  int8x8_t v4 = vzip1_s8(a3, a3);
  a4.i32[0] = a2;
  int8x8_t v5 = vzip1_s8(a4, a3);
  int16x4_t v6 = vceq_s16((int16x4_t)(*(void *)&v4 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(void *)&v5 & 0xFF00FF00FF00FFLL));
  v7.i8[0] = v6.i8[0];
  v7.i8[1] = v6.i8[2];
  v7.i8[2] = v6.i8[4];
  v7.i8[3] = v6.i8[4];
  v7.i8[4] = v6.i8[0];
  v7.i8[5] = v6.i8[2];
  v7.i8[6] = v6.i8[4];
  v7.i8[7] = v6.i8[4];
  if ((vminv_u8(v7) & 0x80) != 0) {
    return 0;
  }
  uint64_t v8 = *(void *)&veor_s8(v5, v4) & 0xFF00FF00FF00FFLL;
  int16x4_t v9 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v8, (uint16x4_t)0xF000F000FLL), (int8x8_t)0x4000400040004);
  int16x4_t v10 = (int16x4_t)vshl_u16((uint16x4_t)v8, (uint16x4_t)vneg_s16((int16x4_t)(*(void *)&v9 & 0xFF00FF00FF00FFLL)));
  int8x8_t v11 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v10, (int8x8_t)0xC000C000CLL)));
  int8x16_t v12 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v9, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)(*(void *)&v11 & 0xFF00FF00FF00FFLL)), v10)), v11));
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  int8x16_t v14 = vandq_s8(v12, v13);
  if (a1 == a2) {
    char v15 = -1;
  }
  else {
    char v15 = 0;
  }
  if ((v6.i8[2] & 1) == 0)
  {
    int8x16_t v23 = v14;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[1]
      || a1 == a2)
    {
      char v15 = 1;
    }
  }
  if ((v6.i8[4] & 1) == 0)
  {
    int8x16_t v22 = v14;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[2]
      || ~v15 == 0)
    {
      char v15 = 2;
    }
  }
  a3.i16[0] = a1;
  a3.i16[1] = BYTE1(a1);
  a3.i16[2] = BYTE2(a1);
  int8x8_t v20 = a3;
  int v18 = *(char *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
  a3.i16[0] = a2;
  a3.i16[1] = BYTE1(a2);
  a3.i16[2] = BYTE2(a2);
  int8x8_t v21 = a3;
  return v18 < *(char *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
}

BOOL geom_compare_z_order_3i8(__int32 a1, __int32 a2, int8x8_t a3, int8x8_t a4)
{
  a3.i32[0] = a1;
  int8x8_t v4 = vzip1_s8(a3, a3);
  a4.i32[0] = a2;
  int8x8_t v5 = vzip1_s8(a4, a3);
  int16x4_t v6 = vceq_s16((int16x4_t)(*(void *)&v4 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(void *)&v5 & 0xFF00FF00FF00FFLL));
  v7.i8[0] = v6.i8[0];
  v7.i8[1] = v6.i8[2];
  v7.i8[2] = v6.i8[4];
  v7.i8[3] = v6.i8[4];
  v7.i8[4] = v6.i8[0];
  v7.i8[5] = v6.i8[2];
  v7.i8[6] = v6.i8[4];
  v7.i8[7] = v6.i8[4];
  if ((vminv_u8(v7) & 0x80) != 0) {
    return 0;
  }
  uint64_t v8 = *(void *)&veor_s8(v5, v4) & 0xFF00FF00FF00FFLL;
  int16x4_t v9 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v8, (uint16x4_t)0xF000F000FLL), (int8x8_t)0x4000400040004);
  int16x4_t v10 = (int16x4_t)vshl_u16((uint16x4_t)v8, (uint16x4_t)vneg_s16((int16x4_t)(*(void *)&v9 & 0xFF00FF00FF00FFLL)));
  int8x8_t v11 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v10, (int8x8_t)0xC000C000CLL)));
  int8x16_t v12 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v9, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)(*(void *)&v11 & 0xFF00FF00FF00FFLL)), v10)), v11));
  v13.i64[0] = 0xFF000000FFLL;
  v13.i64[1] = 0xFF000000FFLL;
  int8x16_t v14 = vandq_s8(v12, v13);
  if (a1 == a2) {
    char v15 = -1;
  }
  else {
    char v15 = 0;
  }
  if ((v6.i8[2] & 1) == 0)
  {
    int8x16_t v23 = v14;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[1]
      || a1 == a2)
    {
      char v15 = 1;
    }
  }
  if ((v6.i8[4] & 1) == 0)
  {
    int8x16_t v22 = v14;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v15 & 3))) <= v14.i32[2]
      || ~v15 == 0)
    {
      char v15 = 2;
    }
  }
  a3.i16[0] = a1;
  a3.i16[1] = BYTE1(a1);
  a3.i16[2] = BYTE2(a1);
  int8x8_t v20 = a3;
  int v18 = *(char *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
  a3.i16[0] = a2;
  a3.i16[1] = BYTE1(a2);
  a3.i16[2] = BYTE2(a2);
  int8x8_t v21 = a3;
  return v18 < *(char *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v15 & 3)));
}

BOOL geom::compare_z_order<signed char,(unsigned char)4>(__int32 a1, __int32 a2, int8x8_t a3)
{
  a3.i32[0] = a1;
  int8x8_t v3 = vzip1_s8(a3, a3);
  a3.i32[0] = a2;
  int8x8_t v4 = vzip1_s8(a3, a3);
  int8x8_t v5 = (int8x8_t)vceq_s16((int16x4_t)(*(void *)&v3 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(void *)&v4 & 0xFF00FF00FF00FFLL));
  int8x8_t v6 = vuzp1_s8(v5, v5);
  if ((vminv_u8((uint8x8_t)v6) & 0x80) != 0) {
    return 0;
  }
  v6.i32[0] = a2 ^ a1;
  uint64_t v7 = *(void *)&vzip1_s8(v6, v4) & 0xFF00FF00FF00FFLL;
  int16x4_t v8 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v7, (uint16x4_t)0xF000F000F000FLL), (int8x8_t)0x4000400040004);
  int16x4_t v9 = (int16x4_t)vshl_u16((uint16x4_t)v7, (uint16x4_t)vneg_s16(v8));
  int8x8_t v10 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)(*(void *)&v9 & 0xFF0CFF0CFF0CFF0CLL)));
  int8x16_t v11 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v8, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v10), v9)), v10));
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  int8x16_t v13 = vandq_s8(v11, v12);
  if (a1 == a2) {
    char v14 = -1;
  }
  else {
    char v14 = 0;
  }
  if ((v5.i8[2] & 1) == 0)
  {
    int8x16_t v24 = v13;
    if (*(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[1]
      || a1 == a2)
    {
      char v14 = 1;
    }
  }
  if ((v5.i8[4] & 1) == 0)
  {
    int8x16_t v23 = v13;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[2]
      || ~v14 == 0)
    {
      char v14 = 2;
    }
  }
  if ((v5.i8[6] & 1) == 0)
  {
    int8x16_t v22 = v13;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[3]
      || ~v14 == 0)
    {
      char v14 = 3;
    }
  }
  int8x8_t v21 = v3;
  int v18 = *(char *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
  int8x8_t v20 = v4;
  return v18 < *(char *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
}

BOOL geom_compare_z_order_4i8(__int32 a1, __int32 a2, int8x8_t a3)
{
  a3.i32[0] = a1;
  int8x8_t v3 = vzip1_s8(a3, a3);
  a3.i32[0] = a2;
  int8x8_t v4 = vzip1_s8(a3, a3);
  int8x8_t v5 = (int8x8_t)vceq_s16((int16x4_t)(*(void *)&v3 & 0xFF00FF00FF00FFLL), (int16x4_t)(*(void *)&v4 & 0xFF00FF00FF00FFLL));
  int8x8_t v6 = vuzp1_s8(v5, v5);
  if ((vminv_u8((uint8x8_t)v6) & 0x80) != 0) {
    return 0;
  }
  v6.i32[0] = a2 ^ a1;
  uint64_t v7 = *(void *)&vzip1_s8(v6, v4) & 0xFF00FF00FF00FFLL;
  int16x4_t v8 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16((uint16x4_t)v7, (uint16x4_t)0xF000F000F000FLL), (int8x8_t)0x4000400040004);
  int16x4_t v9 = (int16x4_t)vshl_u16((uint16x4_t)v7, (uint16x4_t)vneg_s16(v8));
  int8x8_t v10 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)(*(void *)&v9 & 0xFF0CFF0CFF0CFF0CLL)));
  int8x16_t v11 = (int8x16_t)vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v8, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v10), v9)), v10));
  v12.i64[0] = 0xFF000000FFLL;
  v12.i64[1] = 0xFF000000FFLL;
  int8x16_t v13 = vandq_s8(v11, v12);
  if (a1 == a2) {
    char v14 = -1;
  }
  else {
    char v14 = 0;
  }
  if ((v5.i8[2] & 1) == 0)
  {
    int8x16_t v24 = v13;
    if (*(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[1]
      || a1 == a2)
    {
      char v14 = 1;
    }
  }
  if ((v5.i8[4] & 1) == 0)
  {
    int8x16_t v23 = v13;
    if (*(_DWORD *)((unint64_t)&v23 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[2]
      || ~v14 == 0)
    {
      char v14 = 2;
    }
  }
  if ((v5.i8[6] & 1) == 0)
  {
    int8x16_t v22 = v13;
    if (*(_DWORD *)((unint64_t)&v22 & 0xFFFFFFFFFFFFFFF3 | (4 * (v14 & 3))) <= v13.i32[3]
      || ~v14 == 0)
    {
      char v14 = 3;
    }
  }
  int8x8_t v21 = v3;
  int v18 = *(char *)((unint64_t)&v21 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
  int8x8_t v20 = v4;
  return v18 < *(char *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF9 | (2 * (v14 & 3)));
}

BOOL geom::compare_z_order<short,(unsigned char)2>(__int32 a1, __int32 a2, uint16x4_t a3)
{
  a3.i32[0] = a1;
  int8x8_t v3 = (int8x8_t)vmovl_u16(a3).u64[0];
  a3.i32[0] = a2;
  int8x8_t v4 = (int8x8_t)vmovl_u16(a3).u64[0];
  int16x4_t v5 = (int16x4_t)vceq_s32((int32x2_t)vand_s8(v3, (int8x8_t)0xFFFF0000FFFFLL), (int32x2_t)vand_s8(v4, (int8x8_t)0xFFFF0000FFFFLL));
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v5, v5)) & 0x8000) != 0) {
    return 0;
  }
  if ((unsigned __int16)a1 == (unsigned __int16)a2) {
    char v6 = -1;
  }
  else {
    char v6 = 0;
  }
  if ((v5.i8[4] & 1) == 0)
  {
    v5.i32[0] = a2 ^ a1;
    uint32x2_t v7 = (uint32x2_t)vmovl_u16((uint16x4_t)v5).u64[0];
    int32x2_t v8 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v7, (uint32x2_t)0xFF000000FFLL), (int8x8_t)0x800000008);
    int8x8_t v9 = (int8x8_t)vshl_u32(v7, (uint32x2_t)vneg_s32(v8));
    int32x2_t v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    int32x2_t v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    int8x8_t v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    int8x8_t v18 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v8, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8((int8x8_t)v10, v12)), (int8x8_t)0xFFFF0000FFFFLL);
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v18.i32[1]
      || (unsigned __int16)a1 == (unsigned __int16)a2)
    {
      char v6 = 1;
    }
  }
  int8x8_t v17 = v3;
  int v14 = *(__int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  int8x8_t v16 = v4;
  return v14 < *(__int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom_compare_z_order_2i16(__int32 a1, __int32 a2, uint16x4_t a3)
{
  a3.i32[0] = a1;
  int8x8_t v3 = (int8x8_t)vmovl_u16(a3).u64[0];
  a3.i32[0] = a2;
  int8x8_t v4 = (int8x8_t)vmovl_u16(a3).u64[0];
  int16x4_t v5 = (int16x4_t)vceq_s32((int32x2_t)vand_s8(v3, (int8x8_t)0xFFFF0000FFFFLL), (int32x2_t)vand_s8(v4, (int8x8_t)0xFFFF0000FFFFLL));
  if ((vminv_u16((uint16x4_t)vuzp1_s16(v5, v5)) & 0x8000) != 0) {
    return 0;
  }
  if ((unsigned __int16)a1 == (unsigned __int16)a2) {
    char v6 = -1;
  }
  else {
    char v6 = 0;
  }
  if ((v5.i8[4] & 1) == 0)
  {
    v5.i32[0] = a2 ^ a1;
    uint32x2_t v7 = (uint32x2_t)vmovl_u16((uint16x4_t)v5).u64[0];
    int32x2_t v8 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v7, (uint32x2_t)0xFF000000FFLL), (int8x8_t)0x800000008);
    int8x8_t v9 = (int8x8_t)vshl_u32(v7, (uint32x2_t)vneg_s32(v8));
    int32x2_t v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    int32x2_t v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    int8x8_t v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    int8x8_t v18 = vand_s8(vorr_s8((int8x8_t)vsub_s32(v8, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8((int8x8_t)v10, v12)), (int8x8_t)0xFFFF0000FFFFLL);
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1))) <= v18.i32[1]
      || (unsigned __int16)a1 == (unsigned __int16)a2)
    {
      char v6 = 1;
    }
  }
  int8x8_t v17 = v3;
  int v14 = *(__int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
  int8x8_t v16 = v4;
  return v14 < *(__int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v6 & 1)));
}

BOOL geom::compare_z_order<short,(unsigned char)3>(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2 = (int8x8_t)vceq_s16(a1, a2);
  uint16x4_t v3 = (uint16x4_t)v2;
  v3.i16[3] = v2.i16[2];
  if ((vminv_u16(v3) & 0x8000) != 0) {
    return 0;
  }
  uint16x4_t v4 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  int16x4_t v5 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v4, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  int8x8_t v6 = (int8x8_t)vshl_u16(v4, (uint16x4_t)vneg_s16(v5));
  int16x4_t v7 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v6, (int8x8_t)0xF000F000F000F0)));
  int16x4_t v8 = (int16x4_t)vshl_u16((uint16x4_t)v6, (uint16x4_t)vneg_s16(v7));
  int8x8_t v9 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v8, (int8x8_t)0xC000C000C000CLL)));
  uint32x4_t v10 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v5, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v9), v8)), vorr_s8((int8x8_t)v7, v9)));
  unsigned __int8 v11 = vmvn_s8(v2).u8[0];
  char v12 = (v11 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    uint32x4_t v19 = v10;
    if ((v11 & (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v11 & 1) - 1) & 3))) > v10.i32[1])) == 0) {
      char v12 = 1;
    }
  }
  if ((v2.i8[4] & 1) == 0)
  {
    uint32x4_t v18 = v10;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3))) <= v10.i32[2]
      || ~v12 == 0)
    {
      char v12 = 2;
    }
  }
  int16x4_t v17 = a1;
  int v14 = *(__int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
  int16x4_t v16 = a2;
  return v14 < *(__int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
}

BOOL geom_compare_z_order_3i16(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2 = (int8x8_t)vceq_s16(a1, a2);
  uint16x4_t v3 = (uint16x4_t)v2;
  v3.i16[3] = v2.i16[2];
  if ((vminv_u16(v3) & 0x8000) != 0) {
    return 0;
  }
  uint16x4_t v4 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  int16x4_t v5 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v4, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  int8x8_t v6 = (int8x8_t)vshl_u16(v4, (uint16x4_t)vneg_s16(v5));
  int16x4_t v7 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v6, (int8x8_t)0xF000F000F000F0)));
  int16x4_t v8 = (int16x4_t)vshl_u16((uint16x4_t)v6, (uint16x4_t)vneg_s16(v7));
  int8x8_t v9 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v8, (int8x8_t)0xC000C000C000CLL)));
  uint32x4_t v10 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v5, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v9), v8)), vorr_s8((int8x8_t)v7, v9)));
  unsigned __int8 v11 = vmvn_s8(v2).u8[0];
  char v12 = (v11 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    uint32x4_t v19 = v10;
    if ((v11 & (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v11 & 1) - 1) & 3))) > v10.i32[1])) == 0) {
      char v12 = 1;
    }
  }
  if ((v2.i8[4] & 1) == 0)
  {
    uint32x4_t v18 = v10;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v12 & 3))) <= v10.i32[2]
      || ~v12 == 0)
    {
      char v12 = 2;
    }
  }
  int16x4_t v17 = a1;
  int v14 = *(__int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
  int16x4_t v16 = a2;
  return v14 < *(__int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v12 & 3)));
}

BOOL geom::compare_z_order<short,(unsigned char)4>(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2 = (int8x8_t)vceq_s16(a1, a2);
  if ((vminv_u16((uint16x4_t)v2) & 0x8000) != 0) {
    return 0;
  }
  uint16x4_t v3 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  int16x4_t v4 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v3, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  int8x8_t v5 = (int8x8_t)vshl_u16(v3, (uint16x4_t)vneg_s16(v4));
  int16x4_t v6 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v5, (int8x8_t)0xF000F000F000F0)));
  int16x4_t v7 = (int16x4_t)vshl_u16((uint16x4_t)v5, (uint16x4_t)vneg_s16(v6));
  int8x8_t v8 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v7, (int8x8_t)0xC000C000C000CLL)));
  uint32x4_t v9 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v4, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v8), v7)), vorr_s8((int8x8_t)v6, v8)));
  unsigned __int8 v10 = vmvn_s8(v2).u8[0];
  char v11 = (v10 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    uint32x4_t v20 = v9;
    if ((v10 & (*(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v10 & 1) - 1) & 3))) > v9.i32[1])) == 0) {
      char v11 = 1;
    }
  }
  if ((v2.i8[4] & 1) == 0)
  {
    uint32x4_t v19 = v9;
    if (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[2]
      || ~v11 == 0)
    {
      char v11 = 2;
    }
  }
  if ((v2.i8[6] & 1) == 0)
  {
    uint32x4_t v18 = v9;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[3]
      || ~v11 == 0)
    {
      char v11 = 3;
    }
  }
  int16x4_t v17 = a1;
  int v14 = *(__int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
  int16x4_t v16 = a2;
  return v14 < *(__int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
}

BOOL geom_compare_z_order_4i16(int16x4_t a1, int16x4_t a2)
{
  int8x8_t v2 = (int8x8_t)vceq_s16(a1, a2);
  if ((vminv_u16((uint16x4_t)v2) & 0x8000) != 0) {
    return 0;
  }
  uint16x4_t v3 = (uint16x4_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
  int16x4_t v4 = (int16x4_t)vand_s8((int8x8_t)vcgt_u16(v3, (uint16x4_t)0xFF00FF00FF00FFLL), (int8x8_t)0x8000800080008);
  int8x8_t v5 = (int8x8_t)vshl_u16(v3, (uint16x4_t)vneg_s16(v4));
  int16x4_t v6 = (int16x4_t)vbic_s8((int8x8_t)0x4000400040004, (int8x8_t)vceqz_s16((int16x4_t)vand_s8(v5, (int8x8_t)0xF000F000F000F0)));
  int16x4_t v7 = (int16x4_t)vshl_u16((uint16x4_t)v5, (uint16x4_t)vneg_s16(v6));
  int8x8_t v8 = vbic_s8((int8x8_t)0x2000200020002, (int8x8_t)vceqz_s16((int16x4_t)vand_s8((int8x8_t)v7, (int8x8_t)0xC000C000C000CLL)));
  uint32x4_t v9 = vmovl_u16((uint16x4_t)vorr_s8((int8x8_t)vsub_s16(v4, vtst_s16((int16x4_t)vshl_u16((uint16x4_t)0x2000200020002, (uint16x4_t)v8), v7)), vorr_s8((int8x8_t)v6, v8)));
  unsigned __int8 v10 = vmvn_s8(v2).u8[0];
  char v11 = (v10 & 1) - 1;
  if ((v2.i8[2] & 1) == 0)
  {
    uint32x4_t v20 = v9;
    if ((v10 & (*(_DWORD *)((unint64_t)&v20 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v10 & 1) - 1) & 3))) > v9.i32[1])) == 0) {
      char v11 = 1;
    }
  }
  if ((v2.i8[4] & 1) == 0)
  {
    uint32x4_t v19 = v9;
    if (*(_DWORD *)((unint64_t)&v19 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[2]
      || ~v11 == 0)
    {
      char v11 = 2;
    }
  }
  if ((v2.i8[6] & 1) == 0)
  {
    uint32x4_t v18 = v9;
    if (*(_DWORD *)((unint64_t)&v18 & 0xFFFFFFFFFFFFFFF3 | (4 * (v11 & 3))) <= v9.i32[3]
      || ~v11 == 0)
    {
      char v11 = 3;
    }
  }
  int16x4_t v17 = a1;
  int v14 = *(__int16 *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
  int16x4_t v16 = a2;
  return v14 < *(__int16 *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFF9 | (2 * (v11 & 3)));
}

BOOL geom::compare_z_order<int,(unsigned char)2>(int32x2_t a1, int32x2_t a2)
{
  int8x8_t v2 = (int8x8_t)vceq_s32(a1, a2);
  if ((vpmin_u32((uint32x2_t)v2, (uint32x2_t)v2).u32[0] & 0x80000000) != 0) {
    return 0;
  }
  unsigned __int8 v3 = vmvn_s8(v2).u8[0];
  char v4 = ~v3;
  if ((v2.i8[4] & 1) == 0)
  {
    uint32x2_t v5 = (uint32x2_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
    int32x2_t v6 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v5, (uint32x2_t)0xFFFF0000FFFFLL), (int8x8_t)0x1000000010);
    int8x8_t v7 = (int8x8_t)vshl_u32(v5, (uint32x2_t)vneg_s32(v6));
    int32x2_t v8 = (int32x2_t)vbic_s8((int8x8_t)0x800000008, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FF00)));
    int8x8_t v9 = (int8x8_t)vshl_u32((uint32x2_t)v7, (uint32x2_t)vneg_s32(v8));
    int32x2_t v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    int32x2_t v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    int8x8_t v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    int8x8_t v17 = vorr_s8((int8x8_t)vsub_s32(v6, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8(vorr_s8((int8x8_t)v8, (int8x8_t)v10), v12));
    if ((v3 & (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v17.i32[1])) == 0) {
      char v4 = 1;
    }
  }
  int32x2_t v15 = a1;
  int v13 = *(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  int32x2_t v16 = a2;
  return v13 < *(_DWORD *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
}

BOOL geom_compare_z_order_2i(int32x2_t a1, int32x2_t a2)
{
  int8x8_t v2 = (int8x8_t)vceq_s32(a1, a2);
  if ((vpmin_u32((uint32x2_t)v2, (uint32x2_t)v2).u32[0] & 0x80000000) != 0) {
    return 0;
  }
  unsigned __int8 v3 = vmvn_s8(v2).u8[0];
  char v4 = ~v3;
  if ((v2.i8[4] & 1) == 0)
  {
    uint32x2_t v5 = (uint32x2_t)veor_s8((int8x8_t)a2, (int8x8_t)a1);
    int32x2_t v6 = (int32x2_t)vand_s8((int8x8_t)vcgt_u32(v5, (uint32x2_t)0xFFFF0000FFFFLL), (int8x8_t)0x1000000010);
    int8x8_t v7 = (int8x8_t)vshl_u32(v5, (uint32x2_t)vneg_s32(v6));
    int32x2_t v8 = (int32x2_t)vbic_s8((int8x8_t)0x800000008, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v7, (int8x8_t)0xFF000000FF00)));
    int8x8_t v9 = (int8x8_t)vshl_u32((uint32x2_t)v7, (uint32x2_t)vneg_s32(v8));
    int32x2_t v10 = (int32x2_t)vbic_s8((int8x8_t)0x400000004, (int8x8_t)vceqz_s32((int32x2_t)vand_s8(v9, (int8x8_t)0xF0000000F0)));
    int32x2_t v11 = (int32x2_t)vshl_u32((uint32x2_t)v9, (uint32x2_t)vneg_s32(v10));
    int8x8_t v12 = vbic_s8((int8x8_t)0x200000002, (int8x8_t)vceqz_s32((int32x2_t)vand_s8((int8x8_t)v11, (int8x8_t)0xC0000000CLL)));
    int8x8_t v17 = vorr_s8((int8x8_t)vsub_s32(v6, vtst_s32((int32x2_t)vshl_u32((uint32x2_t)0x200000002, (uint32x2_t)v12), v11)), vorr_s8(vorr_s8((int8x8_t)v8, (int8x8_t)v10), v12));
    if ((v3 & (*(_DWORD *)((unint64_t)&v17 & 0xFFFFFFFFFFFFFFFBLL | (4 * ((v3 & 1) == 0))) > v17.i32[1])) == 0) {
      char v4 = 1;
    }
  }
  int32x2_t v15 = a1;
  int v13 = *(_DWORD *)((unint64_t)&v15 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
  int32x2_t v16 = a2;
  return v13 < *(_DWORD *)((unint64_t)&v16 & 0xFFFFFFFFFFFFFFFBLL | (4 * (v4 & 1)));
}

BOOL geom::compare_z_order<int,(unsigned char)3>(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2 = vceqq_s32(a1, a2);
  uint32x4_t v3 = (uint32x4_t)v2;
  v3.i32[3] = v2.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v4 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v5.i64[0] = 0xFFFF0000FFFFLL;
  v5.i64[1] = 0xFFFF0000FFFFLL;
  v6.i64[0] = 0x1000000010;
  v6.i64[1] = 0x1000000010;
  int32x4_t v7 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v4, v5), v6);
  int8x16_t v8 = (int8x16_t)vshlq_u32(v4, (uint32x4_t)vnegq_s32(v7));
  v6.i64[0] = 0xFF000000FF00;
  v6.i64[1] = 0xFF000000FF00;
  v9.i64[0] = 0x800000008;
  v9.i64[1] = 0x800000008;
  int32x4_t v10 = (int32x4_t)vbicq_s8(v9, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v8, v6)));
  int8x16_t v11 = (int8x16_t)vshlq_u32((uint32x4_t)v8, (uint32x4_t)vnegq_s32(v10));
  v9.i64[0] = 0xF0000000F0;
  v9.i64[1] = 0xF0000000F0;
  v12.i64[0] = 0x400000004;
  v12.i64[1] = 0x400000004;
  int32x4_t v13 = (int32x4_t)vbicq_s8(v12, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v11, v9)));
  int32x4_t v14 = (int32x4_t)vshlq_u32((uint32x4_t)v11, (uint32x4_t)vnegq_s32(v13));
  v12.i64[0] = 0xC0000000CLL;
  v12.i64[1] = 0xC0000000CLL;
  v15.i64[0] = 0x200000002;
  v15.i64[1] = 0x200000002;
  int8x16_t v16 = vbicq_s8(v15, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v14, v12)));
  unsigned __int8 v17 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  int8x16_t v18 = vorrq_s8((int8x16_t)vsubq_s32(v7, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v15, (uint32x4_t)v16), v14)), vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), v16));
  char v19 = (v17 & 1) - 1;
  int16x4_t v20 = vmovn_s32(v2);
  if ((v20.i8[2] & 1) == 0)
  {
    int8x16_t v27 = v18;
    if ((v17 & (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v17 & 1) - 1) & 3))) > v18.i32[1])) == 0) {
      char v19 = 1;
    }
  }
  if ((v20.i8[4] & 1) == 0)
  {
    int8x16_t v26 = v18;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3))) <= v18.i32[2]
      || ~v19 == 0)
    {
      char v19 = 2;
    }
  }
  int32x4_t v25 = a1;
  int v22 = *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
  int32x4_t v24 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
}

BOOL geom_compare_z_order_3i(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2 = vceqq_s32(a1, a2);
  uint32x4_t v3 = (uint32x4_t)v2;
  v3.i32[3] = v2.i32[2];
  if ((vminvq_u32(v3) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v4 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v5.i64[0] = 0xFFFF0000FFFFLL;
  v5.i64[1] = 0xFFFF0000FFFFLL;
  v6.i64[0] = 0x1000000010;
  v6.i64[1] = 0x1000000010;
  int32x4_t v7 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v4, v5), v6);
  int8x16_t v8 = (int8x16_t)vshlq_u32(v4, (uint32x4_t)vnegq_s32(v7));
  v6.i64[0] = 0xFF000000FF00;
  v6.i64[1] = 0xFF000000FF00;
  v9.i64[0] = 0x800000008;
  v9.i64[1] = 0x800000008;
  int32x4_t v10 = (int32x4_t)vbicq_s8(v9, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v8, v6)));
  int8x16_t v11 = (int8x16_t)vshlq_u32((uint32x4_t)v8, (uint32x4_t)vnegq_s32(v10));
  v9.i64[0] = 0xF0000000F0;
  v9.i64[1] = 0xF0000000F0;
  v12.i64[0] = 0x400000004;
  v12.i64[1] = 0x400000004;
  int32x4_t v13 = (int32x4_t)vbicq_s8(v12, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v11, v9)));
  int32x4_t v14 = (int32x4_t)vshlq_u32((uint32x4_t)v11, (uint32x4_t)vnegq_s32(v13));
  v12.i64[0] = 0xC0000000CLL;
  v12.i64[1] = 0xC0000000CLL;
  v15.i64[0] = 0x200000002;
  v15.i64[1] = 0x200000002;
  int8x16_t v16 = vbicq_s8(v15, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v14, v12)));
  unsigned __int8 v17 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  int8x16_t v18 = vorrq_s8((int8x16_t)vsubq_s32(v7, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v15, (uint32x4_t)v16), v14)), vorrq_s8(vorrq_s8((int8x16_t)v10, (int8x16_t)v13), v16));
  char v19 = (v17 & 1) - 1;
  int16x4_t v20 = vmovn_s32(v2);
  if ((v20.i8[2] & 1) == 0)
  {
    int8x16_t v27 = v18;
    if ((v17 & (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v17 & 1) - 1) & 3))) > v18.i32[1])) == 0) {
      char v19 = 1;
    }
  }
  if ((v20.i8[4] & 1) == 0)
  {
    int8x16_t v26 = v18;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3))) <= v18.i32[2]
      || ~v19 == 0)
    {
      char v19 = 2;
    }
  }
  int32x4_t v25 = a1;
  int v22 = *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
  int32x4_t v24 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v19 & 3)));
}

BOOL geom::compare_z_order<int,(unsigned char)4>(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2 = vceqq_s32(a1, a2);
  if ((vminvq_u32((uint32x4_t)v2) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v3 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v4.i64[0] = 0xFFFF0000FFFFLL;
  v4.i64[1] = 0xFFFF0000FFFFLL;
  v5.i64[0] = 0x1000000010;
  v5.i64[1] = 0x1000000010;
  int32x4_t v6 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v3, v4), v5);
  int8x16_t v7 = (int8x16_t)vshlq_u32(v3, (uint32x4_t)vnegq_s32(v6));
  v5.i64[0] = 0xFF000000FF00;
  v5.i64[1] = 0xFF000000FF00;
  v8.i64[0] = 0x800000008;
  v8.i64[1] = 0x800000008;
  int32x4_t v9 = (int32x4_t)vbicq_s8(v8, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v7, v5)));
  int8x16_t v10 = (int8x16_t)vshlq_u32((uint32x4_t)v7, (uint32x4_t)vnegq_s32(v9));
  v8.i64[0] = 0xF0000000F0;
  v8.i64[1] = 0xF0000000F0;
  v11.i64[0] = 0x400000004;
  v11.i64[1] = 0x400000004;
  int32x4_t v12 = (int32x4_t)vbicq_s8(v11, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v10, v8)));
  int32x4_t v13 = (int32x4_t)vshlq_u32((uint32x4_t)v10, (uint32x4_t)vnegq_s32(v12));
  v11.i64[0] = 0xC0000000CLL;
  v11.i64[1] = 0xC0000000CLL;
  v14.i64[0] = 0x200000002;
  v14.i64[1] = 0x200000002;
  int8x16_t v15 = vbicq_s8(v14, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v13, v11)));
  unsigned __int8 v16 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  int8x16_t v17 = vorrq_s8((int8x16_t)vsubq_s32(v6, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v14, (uint32x4_t)v15), v13)), vorrq_s8(vorrq_s8((int8x16_t)v9, (int8x16_t)v12), v15));
  char v18 = (v16 & 1) - 1;
  int16x4_t v19 = vmovn_s32(v2);
  if ((v19.i8[2] & 1) == 0)
  {
    int8x16_t v28 = v17;
    if ((v16 & (*(_DWORD *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v16 & 1) - 1) & 3))) > v17.i32[1])) == 0) {
      char v18 = 1;
    }
  }
  if ((v19.i8[4] & 1) == 0)
  {
    int8x16_t v27 = v17;
    if (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[2]
      || ~v18 == 0)
    {
      char v18 = 2;
    }
  }
  if ((v19.i8[6] & 1) == 0)
  {
    int8x16_t v26 = v17;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[3]
      || ~v18 == 0)
    {
      char v18 = 3;
    }
  }
  int32x4_t v24 = a1;
  int v22 = *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
  int32x4_t v25 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
}

BOOL geom_compare_z_order_4i(int32x4_t a1, int32x4_t a2)
{
  int32x4_t v2 = vceqq_s32(a1, a2);
  if ((vminvq_u32((uint32x4_t)v2) & 0x80000000) != 0) {
    return 0;
  }
  uint32x4_t v3 = (uint32x4_t)veorq_s8((int8x16_t)a2, (int8x16_t)a1);
  v4.i64[0] = 0xFFFF0000FFFFLL;
  v4.i64[1] = 0xFFFF0000FFFFLL;
  v5.i64[0] = 0x1000000010;
  v5.i64[1] = 0x1000000010;
  int32x4_t v6 = (int32x4_t)vandq_s8((int8x16_t)vcgtq_u32(v3, v4), v5);
  int8x16_t v7 = (int8x16_t)vshlq_u32(v3, (uint32x4_t)vnegq_s32(v6));
  v5.i64[0] = 0xFF000000FF00;
  v5.i64[1] = 0xFF000000FF00;
  v8.i64[0] = 0x800000008;
  v8.i64[1] = 0x800000008;
  int32x4_t v9 = (int32x4_t)vbicq_s8(v8, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v7, v5)));
  int8x16_t v10 = (int8x16_t)vshlq_u32((uint32x4_t)v7, (uint32x4_t)vnegq_s32(v9));
  v8.i64[0] = 0xF0000000F0;
  v8.i64[1] = 0xF0000000F0;
  v11.i64[0] = 0x400000004;
  v11.i64[1] = 0x400000004;
  int32x4_t v12 = (int32x4_t)vbicq_s8(v11, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8(v10, v8)));
  int32x4_t v13 = (int32x4_t)vshlq_u32((uint32x4_t)v10, (uint32x4_t)vnegq_s32(v12));
  v11.i64[0] = 0xC0000000CLL;
  v11.i64[1] = 0xC0000000CLL;
  v14.i64[0] = 0x200000002;
  v14.i64[1] = 0x200000002;
  int8x16_t v15 = vbicq_s8(v14, (int8x16_t)vceqzq_s32((int32x4_t)vandq_s8((int8x16_t)v13, v11)));
  unsigned __int8 v16 = vmovn_s32((int32x4_t)vmvnq_s8((int8x16_t)v2)).u8[0];
  int8x16_t v17 = vorrq_s8((int8x16_t)vsubq_s32(v6, vtstq_s32((int32x4_t)vshlq_u32((uint32x4_t)v14, (uint32x4_t)v15), v13)), vorrq_s8(vorrq_s8((int8x16_t)v9, (int8x16_t)v12), v15));
  char v18 = (v16 & 1) - 1;
  int16x4_t v19 = vmovn_s32(v2);
  if ((v19.i8[2] & 1) == 0)
  {
    int8x16_t v28 = v17;
    if ((v16 & (*(_DWORD *)((unint64_t)&v28 & 0xFFFFFFFFFFFFFFF3 | (4 * (((v16 & 1) - 1) & 3))) > v17.i32[1])) == 0) {
      char v18 = 1;
    }
  }
  if ((v19.i8[4] & 1) == 0)
  {
    int8x16_t v27 = v17;
    if (*(_DWORD *)((unint64_t)&v27 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[2]
      || ~v18 == 0)
    {
      char v18 = 2;
    }
  }
  if ((v19.i8[6] & 1) == 0)
  {
    int8x16_t v26 = v17;
    if (*(_DWORD *)((unint64_t)&v26 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3))) <= v17.i32[3]
      || ~v18 == 0)
    {
      char v18 = 3;
    }
  }
  int32x4_t v24 = a1;
  int v22 = *(_DWORD *)((unint64_t)&v24 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
  int32x4_t v25 = a2;
  return v22 < *(_DWORD *)((unint64_t)&v25 & 0xFFFFFFFFFFFFFFF3 | (4 * (v18 & 3)));
}