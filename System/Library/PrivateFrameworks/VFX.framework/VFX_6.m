uint64_t memswap_pattern4(uint64_t result, uint64_t a2, unint64_t a3)
{
  uint64_t v3;
  int v4;

  if (a3 >= 4)
  {
    v3 = 0;
    do
    {
      v4 = *(_DWORD *)(a2 + 4 * v3);
      *(_DWORD *)(a2 + 4 * v3) = *(_DWORD *)(result + 4 * v3);
      *(_DWORD *)(result + 4 * v3++) = v4;
    }
    while (a3 >> 2 > v3);
  }
  return result;
}

uint64_t memswap_pattern8(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (a3 >= 8)
  {
    uint64_t v3 = 0;
    do
    {
      uint64_t v4 = *(void *)(a2 + 8 * v3);
      *(void *)(a2 + 8 * v3) = *(void *)(result + 8 * v3);
      *(void *)(result + 8 * v3++) = v4;
    }
    while (a3 >> 3 > v3);
  }
  return result;
}

__n128 memswap_pattern16(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >= 0x10)
  {
    uint64_t v3 = 0;
    do
    {
      __n128 result = *(__n128 *)(a2 + 16 * v3);
      *(_OWORD *)(a2 + 16 * v3) = *(_OWORD *)(a1 + 16 * v3);
      *(__n128 *)(a1 + 16 * v3++) = result;
    }
    while (a3 >> 4 > v3);
  }
  return result;
}

uint64_t __debugPointer(const char *a1, const void *a2)
{
  return printf("%s %p\n", a1, a2);
}

uint64_t ecs_sysctl_get_int_value(const char *a1)
{
  int v5 = 0;
  size_t v4 = 4;
  int v1 = sysctlbyname(a1, &v5, &v4, 0, 0);
  int v2 = v5;
  if (v1) {
    return 0;
  }
  return v2;
}

id sub_1B65E60D0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  for (uint64_t i = 0; i != 6; ++i)
  {
    uint64_t v8 = objc_msgSend_pixelFormat(a1, a2, a3, a4);
    id result = (id)objc_msgSend_newTextureViewWithPixelFormat_textureType_levels_slices_(a1, v9, v8, 2, a2, 1, i, 1);
    *(void *)(a3 + 8 * i) = result;
  }
  return result;
}

uint64_t sub_1B65E6140(void *a1, void *a2, uint64_t a3, uint64_t a4, const __CFData *a5, uint64_t a6)
{
  unsigned int v8 = a4;
  unsigned int v9 = a3;
  uint64_t v12 = objc_msgSend_width(a2, (const char *)a2, a3, a4);
  uint64_t v16 = objc_msgSend_height(a2, v13, v14, v15);
  uint64_t v20 = objc_msgSend_pixelFormat(a1, v17, v18, v19);
  unint64_t v21 = sub_1B64D8100();
  if ((v20 & 0xFFFFFFFFFFFFFFF8) == 0xA0) {
    unint64_t v22 = 0;
  }
  else {
    unint64_t v22 = (v21 >> 3) * v12;
  }
  if (v8)
  {
    uint64_t v23 = v8;
    do
    {
      if (v12 >> 1 <= 1) {
        uint64_t v12 = 1;
      }
      else {
        v12 >>= 1;
      }
      if (v16 >> 1 <= 1) {
        uint64_t v16 = 1;
      }
      else {
        v16 >>= 1;
      }
      if ((v20 & 0xFFFFFFFFFFFFFFF8) != 0xA0)
      {
        if (a6 && *(unsigned char *)(a6 + 7)) {
          unint64_t v22 = ((v12 + (unint64_t)*(unsigned __int8 *)(a6 + 7) - 1)
        }
               / *(unsigned __int8 *)(a6 + 7)
               * *(unsigned __int8 *)(a6 + 4)) >> 3;
        else {
          unint64_t v22 = v12 * (v21 >> 3);
        }
      }
      --v23;
    }
    while (v23);
  }
  BytePtr = CFDataGetBytePtr(a5);
  memset(v27, 0, 24);
  v27[3] = v12;
  v27[4] = v16;
  v27[5] = 1;
  return objc_msgSend_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_(a1, v25, (uint64_t)v27, v8, v9, BytePtr, v22, 0);
}

unint64_t sub_1B65E6270(void *a1, void *a2, unsigned int a3, CFArrayRef theArray, uint64_t a5)
{
  CFIndex Count = CFArrayGetCount(theArray);
  uint64_t v14 = objc_msgSend_width(a2, v11, v12, v13);
  uint64_t v18 = objc_msgSend_height(a2, v15, v16, v17);
  uint64_t v22 = objc_msgSend_pixelFormat(a1, v19, v20, v21);
  unint64_t result = sub_1B64D8100();
  if (Count >= 1)
  {
    CFIndex v24 = 0;
    unint64_t v30 = result >> 3;
    unint64_t v25 = v22 & 0xFFFFFFFFFFFFFFF8;
    do
    {
      CFDataRef ValueAtIndex = (const __CFData *)CFArrayGetValueAtIndex(theArray, v24);
      BytePtr = CFDataGetBytePtr(ValueAtIndex);
      if (v25 == 160)
      {
        unint64_t v29 = 0;
      }
      else if (a5 && *(unsigned char *)(a5 + 7))
      {
        unint64_t v29 = ((v14 + *(unsigned __int8 *)(a5 + 7) - 1)
             / *(unsigned __int8 *)(a5 + 7)
             * (unint64_t)*(unsigned __int8 *)(a5 + 4)) >> 3;
      }
      else
      {
        unint64_t v29 = v14 * v30;
      }
      memset(v31, 0, 24);
      v31[3] = v14;
      v31[4] = v18;
      v31[5] = 1;
      unint64_t result = objc_msgSend_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_(a1, v27, (uint64_t)v31, v24, a3, BytePtr, v29, 0);
      if (v14 >> 1 <= 1) {
        uint64_t v14 = 1;
      }
      else {
        v14 >>= 1;
      }
      if (v18 >> 1 <= 1) {
        uint64_t v18 = 1;
      }
      else {
        v18 >>= 1;
      }
      ++v24;
    }
    while (Count != v24);
  }
  return result;
}

void sub_1B65E67C0(void **a1, void *a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v10 = objc_msgSend_width(a2, (const char *)a2, a3, (uint64_t)a4);
  uint64_t v14 = objc_msgSend_height(a2, v11, v12, v13);
  uint64_t v18 = objc_msgSend_depth(a2, v15, v16, v17);
  uint64_t v22 = objc_msgSend_arrayLength(a2, v19, v20, v21);
  if ((unint64_t)(objc_msgSend_textureType(a2, v23, v24, v25) - 5) >= 2) {
    uint64_t v29 = v22;
  }
  else {
    uint64_t v29 = 6 * v22;
  }
  uint64_t v30 = objc_msgSend_arrayLength(a4, v26, v27, v28);
  if ((unint64_t)(objc_msgSend_textureType(a4, v31, v32, v33) - 5) >= 2) {
    uint64_t v41 = v30;
  }
  else {
    uint64_t v41 = 6 * v30;
  }
  if (v29 != v41) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. slice count must match to copy", v35, v36, v37, v38, v39, v40, (uint64_t)"sliceCount == VFXMTLComputeTextureSliceCount(dstTexture)");
  }
  if (v29)
  {
    for (uint64_t i = 0; i != v29; ++i)
    {
      v43 = *a1;
      v45[2] = v18;
      memset(v46, 0, sizeof(v46));
      v45[0] = v10;
      v45[1] = v14;
      memset(v44, 0, sizeof(v44));
      objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_(v43, v34, (uint64_t)a2, i, a3, v46, v45, a4, i, a5, v44);
    }
  }
}

uint64_t sub_1B65E7168(uint64_t a1, const char *a2, uint64_t a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  long long v4 = *(_OWORD *)(a1 + 56);
  v6[0] = *(_OWORD *)(a1 + 40);
  v6[1] = v4;
  v6[2] = *(_OWORD *)(a1 + 72);
  return objc_msgSend_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_(v3, a2, (uint64_t)v6, 0, a2, a3, *(unsigned int *)(a1 + 96), *(void *)(a1 + 88) * *(unsigned int *)(a1 + 96));
}

uint64_t sub_1B65E71C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = *(_OWORD *)(a1 + 64);
  v13[0] = *(_OWORD *)(a1 + 48);
  v13[1] = v6;
  long long v14 = *(_OWORD *)(a1 + 80);
  uint64_t v7 = a2;
  uint64_t v8 = *(void *)(a1 + 96);
  unsigned int v9 = *(void **)(a1 + 32);
  uint64_t v10 = objc_msgSend_height(*(void **)(a1 + 40), a2, a3, a4, v13[0], v6, v14);
  return objc_msgSend_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_(v9, v11, (uint64_t)v13, 0, v7, a3, v8, *(void *)(a1 + 96) * v10);
}

uint64_t sub_1B65E7240(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a2;
  uint64_t v7 = objc_msgSend_width(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v11 = objc_msgSend_height(*(void **)(a1 + 32), v8, v9, v10);
  v20[0] = 0;
  v20[1] = 0;
  uint64_t v21 = v6;
  uint64_t v22 = v7;
  uint64_t v23 = v11;
  uint64_t v24 = 1;
  uint64_t v13 = *(void **)(a1 + 40);
  uint64_t v12 = *(void *)(a1 + 48);
  uint64_t v17 = objc_msgSend_height(*(void **)(a1 + 32), v14, v15, v16, 0, 0, v21, v22, v11, 1);
  return objc_msgSend_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_(v13, v18, (uint64_t)v20, 0, 0, a3, v12, *(void *)(a1 + 48) * v17);
}

uint64_t sub_1B65E72CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  long long v6 = *(_OWORD *)(a1 + 64);
  v13[0] = *(_OWORD *)(a1 + 48);
  v13[1] = v6;
  long long v14 = *(_OWORD *)(a1 + 80);
  uint64_t v7 = a2;
  uint64_t v8 = *(void *)(a1 + 96);
  uint64_t v9 = *(void **)(a1 + 32);
  uint64_t v10 = objc_msgSend_height(*(void **)(a1 + 40), a2, a3, a4, v13[0], v6, v14);
  return objc_msgSend_replaceRegion_mipmapLevel_slice_withBytes_bytesPerRow_bytesPerImage_(v9, v11, (uint64_t)v13, 0, v7, a3, v8, *(void *)(a1 + 96) * v10);
}

void sub_1B65E77B8(void **a1, void *a2, void *a3, uint64_t a4)
{
  uint64_t v7 = objc_msgSend_width(a2, (const char *)a2, (uint64_t)a3, a4);
  if (v7 != objc_msgSend_width(a3, v8, v9, v10)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. width must match to copy", v12, v13, v14, v15, v16, v17, (uint64_t)"srcTexture.width == dstTexture.width");
  }
  uint64_t v18 = objc_msgSend_height(a2, v11, v12, v13);
  if (v18 != objc_msgSend_height(a3, v19, v20, v21)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. height must match to copy", v23, v24, v25, v26, v27, v28, (uint64_t)"srcTexture.height == dstTexture.height");
  }
  uint64_t v29 = objc_msgSend_depth(a2, v22, v23, v24);
  if (v29 != objc_msgSend_depth(a3, v30, v31, v32)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. depth must match to copy", v34, v35, v36, v37, v38, v39, (uint64_t)"srcTexture.depth == dstTexture.depth");
  }
  v88 = a1;
  uint64_t v40 = objc_msgSend_textureType(a2, v33, v34, v35);
  BOOL IsCube = VFXMTLTextureTypeIsCube(v40);
  unint64_t v45 = objc_msgSend_mipmapLevelCount(a2, v42, v43, v44);
  unint64_t v49 = objc_msgSend_mipmapLevelCount(a3, v46, v47, v48);
  if (v45 >= v49) {
    unint64_t v53 = v49;
  }
  else {
    unint64_t v53 = v45;
  }
  uint64_t v54 = objc_msgSend_arrayLength(a2, v50, v51, v52);
  if ((unint64_t)(objc_msgSend_textureType(a2, v55, v56, v57) - 5) >= 2) {
    uint64_t v61 = v54;
  }
  else {
    uint64_t v61 = 6 * v54;
  }
  uint64_t v62 = objc_msgSend_arrayLength(a3, v58, v59, v60);
  if ((unint64_t)(objc_msgSend_textureType(a3, v63, v64, v65) - 5) >= 2) {
    uint64_t v73 = v62;
  }
  else {
    uint64_t v73 = 6 * v62;
  }
  if (v61 != v73) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. slice count must match to copy", v67, v68, v69, v70, v71, v72, (uint64_t)"sliceCount == VFXMTLComputeTextureSliceCount(dstTexture)");
  }
  if (v61)
  {
    uint64_t v74 = 0;
    char v75 = IsCube;
    do
    {
      unint64_t v76 = objc_msgSend_width(a2, v66, v67, v68);
      unint64_t v80 = objc_msgSend_height(a2, v77, v78, v79);
      uint64_t v84 = objc_msgSend_depth(a2, v81, v82, v83);
      if (v53)
      {
        unint64_t v85 = v84;
        for (uint64_t i = 0; i != v53; ++i)
        {
          v87 = *v88;
          v90[2] = v85;
          memset(v91, 0, sizeof(v91));
          v90[0] = v76;
          v90[1] = v80;
          memset(v89, 0, sizeof(v89));
          objc_msgSend_copyFromTexture_sourceSlice_sourceLevel_sourceOrigin_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_(v87, v66, (uint64_t)a2, v74, i, v91, v90, a3, v74, i, v89);
          v76 >>= 1;
          v80 >>= 1;
          v85 >>= v75;
        }
      }
      ++v74;
    }
    while (v74 != v61);
  }
}

void sub_1B65E8E5C(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_1B65E8EE4(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void *sub_1B65E98EC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1E9DDBCF8 != -1) {
    dispatch_once(&qword_1E9DDBCF8, &unk_1F0FB6468);
  }
  int v5 = objc_msgSend_clone((void *)qword_1E9DDBCF0, a2, a3, a4);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1B65EE804;
  v9[3] = &unk_1E6143200;
  v9[4] = a1;
  objc_msgSend_enumerateHierarchyUsingBlock_(v5, v6, (uint64_t)v9, v7);
  return v5;
}

void *sub_1B65E99A0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1E9DDBD08 != -1) {
    dispatch_once(&qword_1E9DDBD08, &unk_1F0FB6488);
  }
  int v5 = objc_msgSend_clone((void *)qword_1E9DDBD00, a2, a3, a4);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1B65EE998;
  v9[3] = &unk_1E6143200;
  v9[4] = a1;
  objc_msgSend_enumerateHierarchyUsingBlock_(v5, v6, (uint64_t)v9, v7);
  return v5;
}

void *sub_1B65E9A54(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1E9DDBD18 != -1) {
    dispatch_once(&qword_1E9DDBD18, &unk_1F0FB64A8);
  }
  int v5 = objc_msgSend_clone((void *)qword_1E9DDBD10, a2, a3, a4);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1B65EEB68;
  v9[3] = &unk_1E6143200;
  v9[4] = a1;
  objc_msgSend_enumerateHierarchyUsingBlock_(v5, v6, (uint64_t)v9, v7);
  return v5;
}

void *sub_1B65E9B08(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (qword_1E9DDBD28 != -1) {
    dispatch_once(&qword_1E9DDBD28, &unk_1F0FB64E8);
  }
  int v5 = objc_msgSend_clone((void *)qword_1E9DDBD20, a2, a3, a4);
  v9[0] = MEMORY[0x1E4F143A8];
  v9[1] = 3221225472;
  v9[2] = sub_1B65EEE04;
  v9[3] = &unk_1E6143200;
  v9[4] = a1;
  objc_msgSend_enumerateHierarchyUsingBlock_(v5, v6, (uint64_t)v9, v7);
  return v5;
}

void *sub_1B65E9BBC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, float a5)
{
  if (qword_1E9DDBD38 != -1) {
    dispatch_once(&qword_1E9DDBD38, &unk_1F0FB6508);
  }
  uint64_t v7 = objc_msgSend_clone((void *)qword_1E9DDBD30, a2, a3, a4);
  v11[0] = MEMORY[0x1E4F143A8];
  v11[1] = 3221225472;
  v11[2] = sub_1B65EF098;
  v11[3] = &unk_1E61451B0;
  float v12 = a5;
  v11[4] = a1;
  objc_msgSend_enumerateHierarchyUsingBlock_(v7, v8, (uint64_t)v11, v9);
  return v7;
}

uint64_t sub_1B65EA04C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v59 = *MEMORY[0x1E4F143B8];
  int v5 = objc_msgSend_targets(a1, a2, a3, a4);
  uint64_t result = objc_msgSend_firstObject(v5, v6, v7, v8);
  if (result)
  {
    uint64_t v13 = (void *)result;
    uint64_t v14 = objc_msgSend_effectiveEditingSpace(a1, v10, v11, v12);
    v18.columns[3].i64[0] = 0;
    v18.columns[3].i64[1] = 0;
    v18.columns[0] = 0uLL;
    v18.columns[1].i64[0] = 0;
    v18.columns[1].i64[1] = 0;
    v18.columns[2].i64[0] = 0;
    v18.columns[2].i64[1] = 0;
    switch(v14)
    {
      case 0:
        objc_msgSend_worldTransform(v13, v15, v16, v17, 0.0, 0.0, 0.0, 0.0);
        goto LABEL_11;
      case 1:
        uint64_t v19 = objc_msgSend_parentItem(v13, v15, v16, v17, 0.0, 0.0, 0.0, 0.0);
        if (!v19) {
          uint64_t v19 = v13;
        }
        objc_msgSend_worldTransform(v19, v20, v21, v22, v23, v24, v25, v26);
        goto LABEL_11;
      case 2:
        v18.columns[2] = (simd_float4)xmmword_1B6E4F2E0;
        v18.columns[1] = (simd_float4)xmmword_1B6E4F320;
        v18.columns[0] = (simd_float4)xmmword_1B6E4F300;
        break;
      case 3:
        uint64_t v27 = objc_msgSend_authoringEnvironment(a1, v15, v16, v17, 0.0, 0.0, 0.0, 0.0);
        objc_msgSend_viewMatrix(v27, v28, v29, v30);
        simd_float4x4 v18 = __invert_f4(v60);
LABEL_11:
        v18.columns[3] = 0uLL;
        break;
      default:
        break;
    }
    simd_float4 v56 = v18.columns[3];
    simd_float4 v57 = v18.columns[3];
    simd_float4 v54 = v18.columns[3];
    simd_float4 v55 = v18.columns[3];
    uint64_t v31 = objc_msgSend_targets(a1, v15, v16, v17, v18.columns[1].i64[0], v18.columns[1].i64[1], *(_OWORD *)v18.columns, v18.columns[2].i64[0], v18.columns[2].i64[1]);
    uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v32, (uint64_t)&v54, (uint64_t)v58, 16);
    float32x4_t v36 = 0uLL;
    if (result)
    {
      uint64_t v37 = result;
      uint64_t v38 = *(void *)v55.i64[0];
      float v39 = 0.0;
      do
      {
        uint64_t v40 = 0;
        do
        {
          float32x4_t v52 = v36;
          if (*(void *)v55.i64[0] != v38) {
            objc_enumerationMutation(v31);
          }
          objc_msgSend_worldTransform(*(void **)(v54.i64[1] + 8 * v40), v33, v34, v35);
          uint64_t v43 = a1[78];
          if (v43 == 2)
          {
            float32x4_t v44 = v52;
            if (vmovn_s32(vcgtq_f32(v41, v52)).u8[0]) {
              v42.f32[0] = v41.f32[0];
            }
            else {
              v42.f32[0] = v52.f32[0];
            }
            goto LABEL_25;
          }
          float32x4_t v44 = v52;
          if (v43 == 1)
          {
            if (vmovn_s32(vcgtq_f32(v41, v52)).u8[0]) {
              v42.f32[0] = v52.f32[0];
            }
            else {
              v42.f32[0] = v41.f32[0];
            }
LABEL_25:
            v42.i32[1] = v44.i32[1];
            v42.i32[2] = v44.i32[2];
            goto LABEL_27;
          }
          float32x4_t v42 = v52;
          v42.i32[0] = vaddq_f32(v52, v41).u32[0];
LABEL_27:
          uint64_t v45 = a1[79];
          float v46 = v42.f32[1];
          if (v42.f32[1] >= v41.f32[1]) {
            float v47 = v42.f32[1];
          }
          else {
            float v47 = v41.f32[1];
          }
          if (v42.f32[1] >= v41.f32[1]) {
            float v46 = v41.f32[1];
          }
          if (v45 != 1) {
            float v46 = v41.f32[1] + v42.f32[1];
          }
          if (v45 == 2) {
            float v46 = v47;
          }
          float32x4_t v48 = v42;
          v48.f32[1] = v46;
          float v49 = v41.f32[2];
          float v50 = v41.f32[2] + v42.f32[2];
          if (v42.f32[2] >= v41.f32[2]) {
            float v51 = v42.f32[2];
          }
          else {
            float v51 = v41.f32[2];
          }
          if (v43 == 2) {
            float v50 = v51;
          }
          if (v42.f32[2] < v41.f32[2]) {
            float v49 = v42.f32[2];
          }
          if (a1[80] != 1) {
            float v49 = v50;
          }
          v48.f32[2] = v49;
          float32x4_t v36 = v48;
          v36.i32[3] = v44.i32[3];
          float v39 = v39 + 1.0;
          ++v40;
        }
        while (v37 != v40);
        float32x4_t v53 = v36;
        uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v31, v33, (uint64_t)&v54, (uint64_t)v58, 16);
        float32x4_t v36 = v53;
        uint64_t v37 = result;
      }
      while (result);
    }
  }
  return result;
}

uint64_t sub_1B65EA6D4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_blackColor(MEMORY[0x1E4FB1618], a2, a3, a4);
  uint64_t v9 = objc_msgSend_model(a2, v6, v7, v8);
  Material = objc_msgSend_firstMaterial(v9, v10, v11, v12);
  uint64_t v17 = objc_msgSend_emission(Material, v14, v15, v16);
  objc_msgSend_setContents_(v17, v18, v5, v19);
  uint64_t v23 = objc_msgSend_whiteColor(MEMORY[0x1E4FB1618], v20, v21, v22);
  uint64_t v27 = objc_msgSend_model(a2, v24, v25, v26);
  uint64_t v31 = objc_msgSend_firstMaterial(v27, v28, v29, v30);
  uint64_t v35 = objc_msgSend_multiply(v31, v32, v33, v34);

  return objc_msgSend_setContents_(v35, v36, v23, v37);
}

uint64_t sub_1B65EAA6C(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_whiteColor(MEMORY[0x1E4FB1618], a2, a3, a4);
  uint64_t v9 = objc_msgSend_model(a2, v6, v7, v8);
  Material = objc_msgSend_firstMaterial(v9, v10, v11, v12);
  uint64_t v17 = objc_msgSend_emission(Material, v14, v15, v16);
  objc_msgSend_setContents_(v17, v18, v5, v19);
  uint64_t v23 = objc_msgSend_orangeColor(MEMORY[0x1E4FB1618], v20, v21, v22);
  uint64_t v27 = objc_msgSend_model(a2, v24, v25, v26);
  uint64_t v31 = objc_msgSend_firstMaterial(v27, v28, v29, v30);
  uint64_t v35 = objc_msgSend_multiply(v31, v32, v33, v34);

  return objc_msgSend_setContents_(v35, v36, v23, v37);
}

float32x4_t sub_1B65EB968(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_initializeDraggedTransform(a2, (const char *)a2, a3, a4);
  objc_msgSend_worldTransform(a2, v7, v8, v9);
  float32x4_t v69 = v10;
  float32x4_t v70 = v11;
  float32x4_t v71 = v12;
  long long v68 = v13;
  uint64_t v14 = (_OWORD *)(*(void *)(*(void *)(a1 + 32) + 408) + (a3 << 6));
  objc_msgSend_transform(a2, v15, v16, v17);
  *uint64_t v14 = v18;
  v14[1] = v19;
  v14[2] = v20;
  v14[3] = v21;
  float32x4_t v22 = vmulq_f32(v69, v69);
  float32x4_t v23 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1)));
  float32x4_t v24 = vmulq_f32(v70, v70);
  v23.f32[0] = sqrtf(v23.f32[0]);
  float32x4_t v25 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2);
  float32x4_t v26 = vmulq_f32(v71, v71);
  v23.i32[1] = sqrtf(vaddq_f32(v25, vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0]);
  v23.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).f32[0]);
  *(float32x4_t *)(*(void *)(*(void *)(a1 + 32) + 416) + 16 * a3) = v23;
  int32x4_t v27 = vzip2q_s32((int32x4_t)v22, (int32x4_t)v26);
  float32x4_t v28 = (float32x4_t)vzip1q_s32(vzip1q_s32((int32x4_t)v22, (int32x4_t)v26), (int32x4_t)v24);
  float32x4_t v29 = (float32x4_t)vtrn2q_s32((int32x4_t)v22, (int32x4_t)v24);
  v29.i32[2] = v26.i32[1];
  float32x4_t v30 = vaddq_f32((float32x4_t)vzip1q_s32(v27, (int32x4_t)v25), vaddq_f32(v28, v29));
  v28.i64[0] = 0x80000000800000;
  v28.i64[1] = 0x80000000800000;
  int8x16_t v31 = (int8x16_t)vcgeq_f32(v28, v30);
  v30.i32[3] = 0;
  float32x4_t v32 = vrsqrteq_f32(v30);
  float32x4_t v33 = vmulq_f32(v32, vrsqrtsq_f32(v30, vmulq_f32(v32, v32)));
  int32x4_t v34 = (int32x4_t)v31;
  v34.i32[3] = 0;
  float32x4_t v35 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v34), (int8x16_t)v30, (int8x16_t)vmulq_f32(v33, vrsqrtsq_f32(v30, vmulq_f32(v33, v33))));
  float32x4_t v36 = vmulq_n_f32(v69, v35.f32[0]);
  float32x4_t v37 = vmulq_lane_f32(v70, *(float32x2_t *)v35.f32, 1);
  float32x4_t v38 = vmulq_laneq_f32(v71, v35, 2);
  int8x16_t v39 = (int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38);
  int8x16_t v40 = (int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37);
  int32x4_t v41 = (int32x4_t)v36;
  if (v31.i32[0])
  {
    int8x16_t v42 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v39, (int8x16_t)v38, 0xCuLL), vnegq_f32(v37)), v38, (float32x4_t)vextq_s8(v40, (int8x16_t)v37, 0xCuLL));
    int32x4_t v41 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42), v42, 0xCuLL);
  }
  int8x16_t v43 = (int8x16_t)vuzp1q_s32((int32x4_t)v36, (int32x4_t)v36);
  float32x4_t v44 = v37;
  if (v31.i32[1])
  {
    int8x16_t v45 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v43, (int8x16_t)v36, 0xCuLL), vnegq_f32(v38)), v36, (float32x4_t)vextq_s8(v39, (int8x16_t)v38, 0xCuLL));
    float32x4_t v44 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), v45, 0xCuLL);
  }
  if (v31.i32[2])
  {
    int8x16_t v31 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v40, (int8x16_t)v37, 0xCuLL), vnegq_f32(v36)), v37, (float32x4_t)vextq_s8(v43, (int8x16_t)v36, 0xCuLL));
    float32x4_t v38 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v31, (int32x4_t)v31), v31, 0xCuLL);
  }
  float v46 = (float)(*(float *)v41.i32 + v44.f32[1]) + v38.f32[2];
  if (v46 > 0.0)
  {
    float32x4_t v47 = (float32x4_t)vzip2q_s32((int32x4_t)v44, vuzp1q_s32((int32x4_t)v44, (int32x4_t)v38));
    v47.i32[2] = v41.i32[1];
    float32x4_t v48 = (float32x4_t)vtrn2q_s32((int32x4_t)v38, vzip2q_s32((int32x4_t)v38, v41));
    v48.i32[2] = v44.i32[0];
    float32x4_t v50 = vsubq_f32(v47, v48);
    v47.i32[3] = sqrtf(v46 + 1.0);
    v48.i32[3] = v47.i32[3];
    float32x4_t v49 = vmulq_f32(v47, v48);
    v50.i32[3] = v49.i32[3];
    v49.f32[0] = 0.5 / v47.f32[3];
    float32x4_t v51 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 0);
LABEL_16:
    long long v53 = v68;
    goto LABEL_17;
  }
  if (*(float *)v41.i32 >= v44.f32[1] && *(float *)v41.i32 >= v38.f32[2])
  {
    float v58 = sqrtf((float)((float)(*(float *)v41.i32 + 1.0) - v44.f32[1]) - v38.f32[2]);
    float32x2_t v59 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.f32, 0);
    float32x2_t v60 = vadd_f32(*(float32x2_t *)v41.i8, v59);
    v59.f32[0] = v58;
    v51.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v41.u32[1], LODWORD(v58)), v59).u32[0];
    v51.i32[1] = v60.i32[1];
    float32x2_t v61 = (float32x2_t)vzip2q_s32(v41, (int32x4_t)v44).u64[0];
    LODWORD(v62) = vadd_f32(v61, *(float32x2_t *)v38.f32).u32[0];
    int32x2_t v63 = (int32x2_t)vsub_f32(v61, *(float32x2_t *)v38.f32);
    HIDWORD(v62) = v63.i32[1];
    v51.i64[1] = v62;
    *(float *)v63.i32 = 0.5 / v58;
    float32x4_t v50 = (float32x4_t)vdupq_lane_s32(v63, 0);
    goto LABEL_16;
  }
  long long v53 = v68;
  if (v44.f32[1] <= v38.f32[2])
  {
    *(float32x2_t *)v38.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v41, (int32x4_t)v44), *(float32x2_t *)v38.f32);
    float32x2_t v65 = (float32x2_t)__PAIR64__(v41.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)((float)(v38.f32[2] + 1.0) - *(float *)v41.i32) - v44.f32[1])));
    float32x2_t v66 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v44.f32, 0);
    int32x2_t v67 = (int32x2_t)vsub_f32(*(float32x2_t *)v41.i8, v66);
    v66.i32[0] = v65.i32[0];
    v66.i32[0] = vmul_f32(v65, v66).u32[0];
    v66.i32[1] = v67.i32[1];
    *(float32x2_t *)&v50.u32[2] = v66;
    *(float *)v67.i32 = 0.5 / v65.f32[0];
    float32x4_t v51 = (float32x4_t)vdupq_lane_s32(v67, 0);
  }
  else
  {
    float v54 = sqrtf((float)((float)(v44.f32[1] + 1.0) - *(float *)v41.i32) - v38.f32[2]);
    *(int32x2_t *)v31.i8 = vdup_laneq_s32((int32x4_t)v44, 2);
    int8x16_t v55 = v31;
    *(float *)v55.i32 = v54;
    v55.i32[0] = vmul_f32(*(float32x2_t *)v55.i8, (float32x2_t)__PAIR64__(v38.u32[1], LODWORD(v54))).u32[0];
    v55.i32[1] = vadd_f32(*(float32x2_t *)&v31, *(float32x2_t *)&v38).i32[1];
    int8x16_t v56 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.i8, 1), v44);
    int32x2_t v57 = (int32x2_t)vsubq_f32(v38, (float32x4_t)vdupq_laneq_s32(v41, 2)).u64[0];
    float32x4_t v51 = (float32x4_t)vextq_s8(vextq_s8(v56, v56, 4uLL), v55, 0xCuLL);
    v51.i32[3] = v57.i32[0];
    *(float *)v57.i32 = 0.5 / v54;
    float32x4_t v50 = (float32x4_t)vdupq_lane_s32(v57, 0);
  }
LABEL_17:
  float32x4_t result = vmulq_f32(v50, v51);
  *(float32x4_t *)(*(void *)(*(void *)(a1 + 32) + 400) + 16 * a3) = result;
  *(_OWORD *)(*(void *)(*(void *)(a1 + 32) + 392) + 16 * a3) = v53;
  return result;
}

double sub_1B65EC864(float32x4_t *a1, float32x4_t a2, float32x4_t a3)
{
  int32x4_t v3 = (int32x4_t)vmulq_f32(a3, a3);
  v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  float32x2_t v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  float32x2_t v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  v5.i32[0] = vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).u32[0];
  float32x4_t v6 = a1[19];
  float32x4_t v7 = a1[20];
  int32x4_t v8 = (int32x4_t)vmulq_f32(v7, v7);
  v8.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v8, 2), vadd_f32(*(float32x2_t *)v8.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v8.i8, 1))).u32[0];
  float32x4_t v9 = vmulq_n_f32(a3, v5.f32[0]);
  float32x2_t v10 = vrsqrte_f32((float32x2_t)v8.u32[0]);
  float32x2_t v11 = vmul_f32(v10, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v10, v10)));
  float32x4_t v12 = vmulq_n_f32(v7, vmul_f32(v11, vrsqrts_f32((float32x2_t)v8.u32[0], vmul_f32(v11, v11))).f32[0]);
  float32x4_t v13 = vmulq_f32(v9, v12);
  float32x4_t v14 = vsubq_f32(v6, a2);
  float32x4_t v15 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1)));
  float32x4_t v16 = vmulq_f32(v9, v14);
  float32x4_t v17 = vmulq_f32(v14, v12);
  v17.f32[0] = vmlas_n_f32(-vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v16, 2), vaddq_f32(v16, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v16.f32, 1))).f32[0], v15.f32[0])/ (1.0 - vmulq_f32(v15, v15).f32[0]);
  *(void *)&double result = vmlaq_n_f32(v6, v12, v17.f32[0]).u64[0];
  return result;
}

double sub_1B65EC948(int a1, unsigned char *a2, float32x4_t a3, float32x4_t a4, float a5, float32x4_t a6, float32x4_t a7)
{
  float32x4_t v61 = a7;
  float32x4_t v62 = a6;
  float32x4_t v10 = vsubq_f32(a3, a4);
  __n128 v56 = (__n128)a3;
  float32x4_t v54 = v10;
  if (fabsf(v10.f32[0]) <= 0.00001)
  {
    BOOL v16 = 0;
    float32x4_t v13 = a3;
    goto LABEL_15;
  }
  if (a3.f32[0] >= 0.0) {
    float v11 = a3.f32[0];
  }
  else {
    float v11 = -a3.f32[0];
  }
  float v12 = fmodf(v11, a5);
  float v14 = a5 * 0.3;
  if (v12 >= v14)
  {
    if (v12 <= (float)(a5 - v14))
    {
      BOOL v16 = 0;
      a3 = (float32x4_t)v56;
      float32x4_t v13 = (float32x4_t)v56;
      float32x4_t v10 = v54;
      goto LABEL_15;
    }
    float v15 = v11 + (float)(a5 - v12);
  }
  else
  {
    float v15 = v11 - v12;
  }
  a3 = (float32x4_t)v56;
  float32x4_t v10 = v54;
  if (v56.n128_f32[0] >= 0.0) {
    v13.f32[0] = v15;
  }
  else {
    v13.f32[0] = -v15;
  }
  *(uint64_t *)((char *)v13.i64 + 4) = *(uint64_t *)((char *)v56.n128_i64 + 4);
  BOOL v16 = 1;
LABEL_15:
  float v53 = a3.f32[1];
  if (fabsf(v10.f32[1]) <= 0.00001)
  {
    uint64_t v21 = 0;
    goto LABEL_29;
  }
  float32x4_t v57 = v13;
  if (a3.f32[1] >= 0.0) {
    float v17 = a3.f32[1];
  }
  else {
    float v17 = -a3.f32[1];
  }
  float v18 = fmodf(v17, a5);
  float v19 = a5 * 0.3;
  if (v18 < v19)
  {
    float v20 = v17 - v18;
LABEL_24:
    a3.i32[2] = v56.n128_i32[2];
    if (v53 < 0.0) {
      float v20 = -v20;
    }
    v22.i64[0] = __PAIR64__(LODWORD(v20), v57.u32[0]);
    v22.i64[1] = v57.i64[1];
    uint64_t v21 = 1;
    float32x4_t v13 = v22;
    goto LABEL_28;
  }
  if (v18 > (float)(a5 - v19))
  {
    float v20 = v17 + (float)(a5 - v18);
    goto LABEL_24;
  }
  uint64_t v21 = 0;
  a3.i32[2] = v56.n128_i32[2];
  float32x4_t v13 = v57;
LABEL_28:
  v10.i32[2] = v54.i32[2];
LABEL_29:
  float v23 = a3.f32[2];
  if (fabsf(v10.f32[2]) <= 0.00001)
  {
    uint64_t v28 = 0;
    goto LABEL_42;
  }
  float32x4_t v58 = v13;
  if (a3.f32[2] >= 0.0) {
    float v24 = a3.f32[2];
  }
  else {
    float v24 = -a3.f32[2];
  }
  float v25 = fmodf(v24, a5);
  float v26 = a5 * 0.3;
  if (v25 >= v26)
  {
    if (v25 <= (float)(a5 - v26))
    {
      uint64_t v28 = 0;
      float32x4_t v13 = v58;
      goto LABEL_42;
    }
    float v27 = v24 + (float)(a5 - v25);
  }
  else
  {
    float v27 = v24 - v25;
  }
  if (v23 < 0.0) {
    float v27 = -v27;
  }
  v13.i64[0] = v58.i64[0];
  v13.i64[1] = __PAIR64__(v58.u32[3], LODWORD(v27));
  uint64_t v28 = 1;
LABEL_42:
  float32x4_t v29 = a7;
  if (v16)
  {
    *a2 = 1;
  }
  else
  {
    *a2 = v21 | v28;
    if (((v21 | v28) & 1) == 0) {
      return *(double *)v13.i64;
    }
  }
  if (a1)
  {
    __n128 v63 = 0u;
    __n128 v64 = 0u;
    float32x4_t v59 = v13;
    sub_1B6456E10(&v63, &v62, (__n128 *)&v61);
    sub_1B65EE438(v16, v21, v28, 0, v30, v31, v32, v33, v59, v56, v63, v64);
    v13.i64[0] = v34;
    return *(double *)v13.i64;
  }
  float32x4_t v35 = vmulq_f32(a6, a7);
  float32x4_t v36 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v35, 2), vaddq_f32(v35, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v35.f32, 1)));
  v29.f32[3] = -v36.f32[0];
  float32x4_t v69 = v29;
  if (v16 | v21 | v28)
  {
    float32x4_t v66 = v13;
    float32x4_t v67 = v13;
    __n128 v64 = 0u;
    float32x4_t v65 = v13;
    __n128 v63 = 0u;
    float32x4_t v37 = vmulq_f32(v13, v29);
    if (vsubq_f32(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v37, 2), vaddq_f32(v37, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v37.f32, 1))), v36).f32[0] >= 5.0)
    {
      float32x4_t v60 = v13;
      if (v16)
      {
        v13.f32[1] = v53;
        v67.f32[2] = v23;
        v67.i64[0] = v13.i64[0];
        long long v68 = xmmword_1B6E4F320;
        sub_1B6456E10(&v63, &v67, (__n128 *)&v68);
        if (sub_1B63F18FC((uint64_t)&v63, v69.f32, &v67))
        {
          float32x4_t v38 = vsubq_f32((float32x4_t)v56, v67);
          float32x4_t v39 = vmulq_f32(v38, v38);
          float v40 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v39, 2), vaddq_f32(v39, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v39.f32, 1))).f32[0]);
          int v41 = 1;
        }
        else
        {
          int v41 = 0;
          float v40 = 3.4028e38;
        }
        float32x4_t v13 = v60;
        if (v21) {
          goto LABEL_56;
        }
      }
      else
      {
        int v41 = 0;
        float v40 = 3.4028e38;
        if (v21)
        {
LABEL_56:
          v13.i32[0] = v56.n128_u32[0];
          v66.f32[2] = v23;
          v66.i64[0] = v13.i64[0];
          long long v68 = xmmword_1B6E4F320;
          sub_1B6456E10(&v63, &v66, (__n128 *)&v68);
          if (sub_1B63F18FC((uint64_t)&v63, v69.f32, &v66))
          {
            float32x4_t v45 = vsubq_f32((float32x4_t)v56, v66);
            float32x4_t v46 = vmulq_f32(v45, v45);
            float v43 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).f32[0]);
            int v42 = 1;
          }
          else
          {
            int v42 = 0;
            float v43 = 3.4028e38;
          }
          unsigned __int32 v44 = v56.n128_u32[0];
          float32x4_t v13 = v60;
LABEL_60:
          if (v28
            && (v65.i32[2] = v13.i32[2],
                v65.i64[0] = __PAIR64__(LODWORD(v53), v44),
                long long v68 = xmmword_1B6E4F2E0,
                sub_1B6456E10(&v63, &v65, (__n128 *)&v68),
                BOOL v47 = sub_1B63F18FC((uint64_t)&v63, v69.f32, &v65),
                v13.i64[0] = v60.i64[0],
                v47))
          {
            float32x4_t v48 = vsubq_f32((float32x4_t)v56, v65);
            float32x4_t v49 = vmulq_f32(v48, v48);
            float v50 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v49, 2), vaddq_f32(v49, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v49.f32, 1))).f32[0]);
          }
          else
          {
            if ((v41 | v42) != 1) {
              return *(double *)v13.i64;
            }
            float v50 = 3.4028e38;
          }
          if (v40 >= v43)
          {
            if (v43 < v50)
            {
              v13.i64[0] = v66.i64[0];
              return *(double *)v13.i64;
            }
          }
          else if (v40 < v50)
          {
            v13.i64[0] = v67.i64[0];
            return *(double *)v13.i64;
          }
          v13.i64[0] = v65.i64[0];
          return *(double *)v13.i64;
        }
      }
      int v42 = 0;
      float v43 = 3.4028e38;
      unsigned __int32 v44 = v56.n128_u32[0];
      goto LABEL_60;
    }
  }
  return *(double *)v13.i64;
}

void sub_1B65ED5FC(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B65ED7D4(float *a1, float *a2)
{
  if (*a1 < *a2) {
    return 0xFFFFFFFFLL;
  }
  else {
    return *a1 > *a2;
  }
}

BOOL sub_1B65EDC84(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_model(a2, (const char *)a2, a3, a4) != 0;
}

uint64_t sub_1B65EDCA8(void *a1, char *a2)
{
  uint64_t v18 = *MEMORY[0x1E4F143B8];
  if (!a2) {
    return 0;
  }
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, a2, (uint64_t)&v13, (uint64_t)v17, 16);
  if (v4)
  {
    uint64_t v8 = v4;
    uint64_t v9 = *(void *)v14;
    while (2)
    {
      uint64_t v10 = 0;
      do
      {
        if (*(void *)v14 != v9) {
          objc_enumerationMutation(a1);
        }
        if ((char *)objc_msgSend_node(*(void **)(*((void *)&v13 + 1) + 8 * v10), v5, v6, v7) == a2) {
          return 1;
        }
        ++v10;
      }
      while (v8 != v10);
      uint64_t v8 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v5, (uint64_t)&v13, (uint64_t)v17, 16);
      if (v8) {
        continue;
      }
      break;
    }
  }
  uint64_t v11 = objc_msgSend_parentNode(a2, v5, v6, v7);
  return sub_1B65EDCA8(a1, v11);
}

uint64_t sub_1B65EE0F8(uint64_t a1, uint64_t a2, float *a3, float a4)
{
  if (a2 < 2) {
    return 0;
  }
  if (a2 == 2)
  {
    uint64_t v5 = 0;
    uint64_t v6 = 1;
  }
  else
  {
    uint64_t v5 = 0;
    uint64_t v6 = a2 - 1;
    do
    {
      uint64_t v7 = v6 + v5;
      if (v6 + v5 < 0 != __OFADD__(v6, v5)) {
        ++v7;
      }
      uint64_t v8 = v7 >> 1;
      if (*(float *)(a1 + 24 * v8) > a4) {
        uint64_t v6 = v8;
      }
      else {
        uint64_t v5 = v8;
      }
    }
    while (v6 - v5 > 1);
  }
  float v9 = vabds_f32(a4, *(float *)(a1 + 24 * v5));
  float v10 = vabds_f32(*(float *)(a1 + 24 * v6), a4);
  if (v9 >= v10)
  {
    uint64_t result = v6;
  }
  else
  {
    float v10 = v9;
    uint64_t result = v5;
  }
  *a3 = v10;
  return result;
}

uint64_t sub_1B65EE184(uint64_t a1, uint64_t a2, _DWORD *a3, float a4, float a5)
{
  float v11 = 0.0;
  uint64_t result = sub_1B65EE0F8(a1, a2, &v11, a4);
  double v9 = 0.03;
  if (a5 > 0.1) {
    double v9 = a5 * 0.3;
  }
  float v10 = v9;
  if (v11 >= v10) {
    return -1;
  }
  *a3 = *(_DWORD *)(a1 + 24 * result);
  return result;
}

BOOL sub_1B65EE438(BOOL result, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float32x4_t a9, __n128 a10, __n128 a11, __n128 a12)
{
  int v13 = a3;
  int v14 = a2;
  __n128 v15 = a10;
  v22[0] = a11;
  v22[1] = a12;
  if (!result && (a2 & 1) == 0 && !a3) {
    return result;
  }
  float32x4_t v20 = a9;
  float32x4_t v21 = a9;
  float32x4_t v19 = a9;
  __n128 v18 = 0uLL;
  float32x4_t v17 = a9;
  if (!result)
  {
    if (a2) {
      goto LABEL_13;
    }
LABEL_8:
    if (!v13) {
      return result;
    }
    goto LABEL_18;
  }
  v21.i32[2] = a10.n128_i32[2];
  v21.i64[0] = __PAIR64__(a10.n128_u32[1], a9.u32[0]);
  sub_1B63F3638(&v18, a9, (float32x4_t)xmmword_1B6E4F300, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  uint64_t result = sub_1B63F18FC((uint64_t)v22, (float *)&v18, &v21);
  if (result)
  {
    __n128 v15 = a10;
  }
  else
  {
    __n128 v15 = a10;
    if (a4) {
      *a4 = -1;
    }
  }
  a9 = v17;
  if (!v14) {
    goto LABEL_8;
  }
LABEL_13:
  a9.i32[0] = v15.n128_u32[0];
  v20.i32[2] = v15.n128_i32[2];
  v20.i64[0] = a9.i64[0];
  sub_1B63F3638(&v18, v20, (float32x4_t)xmmword_1B6E4F320, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  uint64_t result = sub_1B63F18FC((uint64_t)v22, (float *)&v18, &v20);
  if (result)
  {
    v15.n128_u64[0] = a10.n128_u64[0];
  }
  else
  {
    v15.n128_u64[0] = a10.n128_u64[0];
    if (a4) {
      a4[1] = -1;
    }
  }
  a9.i32[2] = v17.i32[2];
  if (v13)
  {
LABEL_18:
    v19.i32[2] = a9.i32[2];
    v19.i64[0] = v15.n128_u64[0];
    sub_1B63F3638(&v18, v19, (float32x4_t)xmmword_1B6E4F2E0, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
    uint64_t result = sub_1B63F18FC((uint64_t)v22, (float *)&v18, &v19);
    if (!result)
    {
      if (a4) {
        a4[2] = -1;
      }
    }
  }
  return result;
}

uint64_t sub_1B65EE6C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  qword_1E9DDBCF0 = objc_msgSend_node(VFXNode, a2, a3, a4);
  LODWORD(v4) = 1014350479;
  LODWORD(v5) = 1060320051;
  uint64_t v9 = objc_msgSend_cylinderWithRadius_height_(VFXParametricModel, v6, v7, v8, v4, v5);
  float v12 = objc_msgSend_nodeWithModel_(VFXNode, v10, v9, v11);
  objc_msgSend_setPosition_(v12, v13, v14, v15);
  objc_msgSend_addChildNode_((void *)qword_1E9DDBCF0, v16, (uint64_t)v12, v17);
  LODWORD(v18) = 1031127695;
  LODWORD(v19) = 1050253722;
  uint64_t v23 = objc_msgSend_coneWithTopRadius_bottomRadius_height_(VFXParametricModel, v20, v21, v22, 0.0, v18, v19);
  float v26 = objc_msgSend_nodeWithModel_(VFXNode, v24, v23, v25);
  objc_msgSend_setPosition_(v26, v27, v28, v29, 0.00156250037);
  objc_msgSend_addChildNode_((void *)qword_1E9DDBCF0, v30, (uint64_t)v26, v31);
  qword_1E9DDBCF0 = objc_msgSend_flattenedCopy((void *)qword_1E9DDBCF0, v32, v33, v34);
  LODWORD(v35) = 1028443341;
  LODWORD(v36) = 1060320051;
  uint64_t v40 = objc_msgSend_cylinderWithRadius_height_(VFXParametricModel, v37, v38, v39, v35, v36);
  float v43 = objc_msgSend_nodeWithModel_(VFXNode, v41, v40, v42);
  objc_msgSend_setPosition_(v43, v44, v45, v46, 0.000001144409);
  objc_msgSend_setHidden_(v43, v47, 1, v48);
  objc_msgSend_setCategoryBitMask_(v43, v49, 0xFFFFLL, v50);
  float v53 = (void *)qword_1E9DDBCF0;

  return objc_msgSend_addChildNode_(v53, v51, (uint64_t)v43, v52);
}

uint64_t sub_1B65EE804(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v64[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_model(a2, (const char *)a2, a3, a4);
  id v10 = (id)objc_msgSend_copy(v6, v7, v8, v9);
  objc_msgSend_setModel_(a2, v11, (uint64_t)v10, v12);
  long long v16 = objc_msgSend_model(a2, v13, v14, v15);
  if (objc_msgSend_firstMaterial(v16, v17, v18, v19))
  {
    uint64_t v23 = objc_msgSend_model(a2, v20, v21, v22);
    Material = objc_msgSend_firstMaterial(v23, v24, v25, v26);
    v64[0] = (id)objc_msgSend_copy(Material, v28, v29, v30);
    uint64_t v32 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v31, (uint64_t)v64, 1);
  }
  else
  {
    uint64_t v32 = MEMORY[0x1E4F1CBF0];
  }
  uint64_t v33 = objc_msgSend_model(a2, v20, v21, v22);
  objc_msgSend_setMaterials_(v33, v34, v32, v35);
  uint64_t v36 = *(void *)(a1 + 32);
  uint64_t v40 = objc_msgSend_model(a2, v37, v38, v39);
  unsigned __int32 v44 = objc_msgSend_firstMaterial(v40, v41, v42, v43);
  uint64_t v48 = objc_msgSend_diffuse(v44, v45, v46, v47);
  objc_msgSend_setContents_(v48, v49, v36, v50);
  float32x4_t v54 = objc_msgSend_model(a2, v51, v52, v53);
  float32x4_t v58 = objc_msgSend_firstMaterial(v54, v55, v56, v57);
  objc_msgSend_setShadingModel_(v58, v59, 2, v60);
  return objc_msgSend_setIsAuthoring_(a2, v61, 1, v62);
}

uint64_t sub_1B65EE918(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  qword_1E9DDBD00 = objc_msgSend_node(VFXNode, a2, a3, a4);
  LODWORD(v4) = 1008981770;
  LODWORD(v5) = 1058642330;
  uint64_t v9 = objc_msgSend_cylinderWithRadius_height_(VFXParametricModel, v6, v7, v8, v4, v5);
  uint64_t v12 = objc_msgSend_nodeWithModel_(VFXNode, v10, v9, v11);
  objc_msgSend_setPosition_(v12, v13, v14, v15, 0.000000381469818);
  objc_msgSend_addChildNode_((void *)qword_1E9DDBD00, v16, (uint64_t)v12, v17);
  uint64_t result = objc_msgSend_flattenedCopy((void *)qword_1E9DDBD00, v18, v19, v20);
  qword_1E9DDBD00 = result;
  return result;
}

uint64_t sub_1B65EE998(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v64[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_model(a2, (const char *)a2, a3, a4);
  id v10 = (id)objc_msgSend_copy(v6, v7, v8, v9);
  objc_msgSend_setModel_(a2, v11, (uint64_t)v10, v12);
  long long v16 = objc_msgSend_model(a2, v13, v14, v15);
  if (objc_msgSend_firstMaterial(v16, v17, v18, v19))
  {
    uint64_t v23 = objc_msgSend_model(a2, v20, v21, v22);
    Material = objc_msgSend_firstMaterial(v23, v24, v25, v26);
    v64[0] = (id)objc_msgSend_copy(Material, v28, v29, v30);
    uint64_t v32 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v31, (uint64_t)v64, 1);
  }
  else
  {
    uint64_t v32 = MEMORY[0x1E4F1CBF0];
  }
  uint64_t v33 = objc_msgSend_model(a2, v20, v21, v22);
  objc_msgSend_setMaterials_(v33, v34, v32, v35);
  uint64_t v36 = *(void *)(a1 + 32);
  uint64_t v40 = objc_msgSend_model(a2, v37, v38, v39);
  unsigned __int32 v44 = objc_msgSend_firstMaterial(v40, v41, v42, v43);
  uint64_t v48 = objc_msgSend_diffuse(v44, v45, v46, v47);
  objc_msgSend_setContents_(v48, v49, v36, v50);
  float32x4_t v54 = objc_msgSend_model(a2, v51, v52, v53);
  float32x4_t v58 = objc_msgSend_firstMaterial(v54, v55, v56, v57);
  objc_msgSend_setShadingModel_(v58, v59, 2, v60);
  return objc_msgSend_setIsAuthoring_(a2, v61, 1, v62);
}

uint64_t sub_1B65EEAAC(double a1, double a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6)
{
  LODWORD(a1) = 1050253722;
  LODWORD(a2) = 1050253722;
  uint64_t v6 = objc_msgSend_planeWithWidth_height_(VFXParametricModel, a4, a5, a6, a1, a2);
  qword_1E9DDBD10 = (uint64_t)(id)objc_msgSend_nodeWithModel_(VFXNode, v7, v6, v8);
  LODWORD(v9) = 1046034724;
  LODWORD(v10) = 1008981770;
  uint64_t v14 = objc_msgSend_torusWithRingRadius_pipeRadius_(VFXParametricModel, v11, v12, v13, v9, v10);
  objc_msgSend_setPipeSegmentCount_(v14, v15, 3, v16);
  objc_msgSend_setRadialSegmentCount_(v14, v17, 4, v18);
  uint64_t v21 = objc_msgSend_nodeWithModel_(VFXNode, v19, (uint64_t)v14, v20);
  objc_msgSend_setEulerAngles_(v21, v22, v23, v24, COERCE_DOUBLE(1070141403));
  float v27 = (void *)qword_1E9DDBD10;

  return objc_msgSend_addChildNode_(v27, v25, (uint64_t)v21, v26);
}

uint64_t sub_1B65EEB68(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v107[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_model(a2, (const char *)a2, a3, a4);
  id v10 = (id)objc_msgSend_copy(v6, v7, v8, v9);
  objc_msgSend_setModel_(a2, v11, (uint64_t)v10, v12);
  uint64_t v16 = objc_msgSend_model(a2, v13, v14, v15);
  if (objc_msgSend_firstMaterial(v16, v17, v18, v19))
  {
    uint64_t v23 = objc_msgSend_model(a2, v20, v21, v22);
    Material = objc_msgSend_firstMaterial(v23, v24, v25, v26);
    v107[0] = (id)objc_msgSend_copy(Material, v28, v29, v30);
    uint64_t v32 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v31, (uint64_t)v107, 1);
  }
  else
  {
    uint64_t v32 = MEMORY[0x1E4F1CBF0];
  }
  uint64_t v33 = objc_msgSend_model(a2, v20, v21, v22);
  objc_msgSend_setMaterials_(v33, v34, v32, v35);
  objc_msgSend_model(a2, v36, v37, v38);
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0
    && (uint64_t v42 = objc_msgSend_model(a2, v39, v40, v41), objc_msgSend_parametricType(v42, v43, v44, v45) == 8))
  {
    uint64_t v46 = *(void *)(a1 + 32);
    uint64_t v47 = objc_msgSend_model(a2, v39, v40, v41);
    float32x4_t v51 = objc_msgSend_firstMaterial(v47, v48, v49, v50);
    int8x16_t v55 = objc_msgSend_diffuse(v51, v52, v53, v54);
    objc_msgSend_setContents_(v55, v56, v46, v57);
  }
  else
  {
    uint64_t v60 = *(void *)(a1 + 32);
    float32x4_t v61 = objc_msgSend_model(a2, v39, v40, v41);
    float32x4_t v65 = objc_msgSend_firstMaterial(v61, v62, v63, v64);
    float32x4_t v69 = objc_msgSend_diffuse(v65, v66, v67, v68);
    objc_msgSend_setContents_(v69, v70, v60, v71);
    char v75 = objc_msgSend_model(a2, v72, v73, v74);
    uint64_t v79 = objc_msgSend_firstMaterial(v75, v76, v77, v78);
    objc_msgSend_setBlendMode_(v79, v80, 1, v81);
    LODWORD(v82) = 1050253722;
    objc_msgSend_setOpacity_(a2, v83, v84, v85, v82);
    v89 = objc_msgSend_model(a2, v86, v87, v88);
    v93 = objc_msgSend_firstMaterial(v89, v90, v91, v92);
    objc_msgSend_setDoubleSided_(v93, v94, 1, v95);
  }
  objc_msgSend_setIsAuthoring_(a2, v58, 1, v59);
  v99 = objc_msgSend_model(a2, v96, v97, v98);
  v103 = objc_msgSend_firstMaterial(v99, v100, v101, v102);
  return objc_msgSend_setShadingModel_(v103, v104, 2, v105);
}

uint64_t sub_1B65EED10(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  qword_1E9DDBD20 = (uint64_t)(id)objc_msgSend_node(VFXNode, a2, a3, a4);
  LODWORD(v4) = 1050253722;
  uint64_t v8 = objc_msgSend_cylinderWithRadius_height_(VFXParametricModel, v5, v6, v7, v4, 0.0);
  LODWORD(v9) = 0.25;
  objc_msgSend_setRadialSpan_(v8, v10, v11, v12, v9);
  objc_msgSend_setRadialSegmentCount_(v8, v13, 24, v14);
  uint64_t v15 = (void *)qword_1E9DDBD20;
  uint64_t v18 = objc_msgSend_nodeWithModel_(VFXNode, v16, (uint64_t)v8, v17);
  objc_msgSend_addChildNode_(v15, v19, v18, v20);
  LODWORD(v21) = 1059984507;
  LODWORD(v22) = 1014350479;
  uint64_t v26 = objc_msgSend_torusWithRingRadius_pipeRadius_(VFXParametricModel, v23, v24, v25, v21, v22);
  LODWORD(v27) = 0.25;
  objc_msgSend_setRadialSpan_(v26, v28, v29, v30, v27);
  objc_msgSend_setRadialSegmentCount_(v26, v31, 24, v32);
  objc_msgSend_setPipeSegmentCount_(v26, v33, 6, v34);
  uint64_t v35 = (void *)qword_1E9DDBD20;
  uint64_t v39 = objc_msgSend_nodeWithModel_(VFXNode, v36, (uint64_t)v26, v37);

  return objc_msgSend_addChildNode_(v35, v38, v39, v40);
}

uint64_t sub_1B65EEE04(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v110[1] = *MEMORY[0x1E4F143B8];
  uint64_t result = objc_msgSend_model(a2, (const char *)a2, a3, a4);
  if (result)
  {
    id v10 = objc_msgSend_model(a2, v7, v8, v9);
    id v14 = (id)objc_msgSend_copy(v10, v11, v12, v13);
    objc_msgSend_setModel_(a2, v15, (uint64_t)v14, v16);
    uint64_t v20 = objc_msgSend_model(a2, v17, v18, v19);
    if (objc_msgSend_firstMaterial(v20, v21, v22, v23))
    {
      double v27 = objc_msgSend_model(a2, v24, v25, v26);
      Material = objc_msgSend_firstMaterial(v27, v28, v29, v30);
      v110[0] = (id)objc_msgSend_copy(Material, v32, v33, v34);
      uint64_t v36 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v35, (uint64_t)v110, 1);
    }
    else
    {
      uint64_t v36 = MEMORY[0x1E4F1CBF0];
    }
    uint64_t v37 = objc_msgSend_model(a2, v24, v25, v26);
    objc_msgSend_setMaterials_(v37, v38, v36, v39);
    objc_msgSend_model(a2, v40, v41, v42);
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0
      && (uint64_t v46 = objc_msgSend_model(a2, v43, v44, v45), objc_msgSend_parametricType(v46, v47, v48, v49) == 8))
    {
      uint64_t v50 = *(void *)(a1 + 32);
      float32x4_t v51 = objc_msgSend_model(a2, v43, v44, v45);
      int8x16_t v55 = objc_msgSend_firstMaterial(v51, v52, v53, v54);
      uint64_t v59 = objc_msgSend_diffuse(v55, v56, v57, v58);
      objc_msgSend_setContents_(v59, v60, v50, v61);
    }
    else
    {
      uint64_t v64 = *(void *)(a1 + 32);
      float32x4_t v65 = objc_msgSend_model(a2, v43, v44, v45);
      float32x4_t v69 = objc_msgSend_firstMaterial(v65, v66, v67, v68);
      uint64_t v73 = objc_msgSend_diffuse(v69, v70, v71, v72);
      objc_msgSend_setContents_(v73, v74, v64, v75);
      uint64_t v79 = objc_msgSend_model(a2, v76, v77, v78);
      uint64_t v83 = objc_msgSend_firstMaterial(v79, v80, v81, v82);
      objc_msgSend_setBlendMode_(v83, v84, 1, v85);
      LODWORD(v86) = 1058642330;
      objc_msgSend_setOpacity_(a2, v87, v88, v89, v86);
      v93 = objc_msgSend_model(a2, v90, v91, v92);
      uint64_t v97 = objc_msgSend_firstMaterial(v93, v94, v95, v96);
      objc_msgSend_setDoubleSided_(v97, v98, 1, v99);
    }
    objc_msgSend_setIsAuthoring_(a2, v62, 1, v63);
    v103 = objc_msgSend_model(a2, v100, v101, v102);
    v107 = objc_msgSend_firstMaterial(v103, v104, v105, v106);
    return objc_msgSend_setShadingModel_(v107, v108, 2, v109);
  }
  return result;
}

uint64_t sub_1B65EEFB8(double a1, double a2, uint64_t a3, const char *a4, uint64_t a5, uint64_t a6)
{
  LODWORD(a2) = 1008981770;
  LODWORD(a1) = 1.0;
  uint64_t v6 = objc_msgSend_torusWithRingRadius_pipeRadius_(VFXParametricModel, a4, a5, a6, a1, a2);
  objc_msgSend_setPipeSegmentCount_(v6, v7, 5, v8);
  objc_msgSend_setRadialSegmentCount_(v6, v9, 64, v10);
  qword_1E9DDBD30 = (uint64_t)(id)objc_msgSend_nodeWithModel_(VFXNode, v11, (uint64_t)v6, v12);
  objc_msgSend_setHittable_((void *)qword_1E9DDBD30, v13, 0, v14);
  LODWORD(v15) = 1032805417;
  LODWORD(v16) = 1.0;
  uint64_t v20 = objc_msgSend_torusWithRingRadius_pipeRadius_(VFXParametricModel, v17, v18, v19, v16, v15);
  objc_msgSend_setPipeSegmentCount_(v20, v21, 5, v22);
  objc_msgSend_setRadialSegmentCount_(v20, v23, 30, v24);
  double v27 = objc_msgSend_nodeWithModel_(VFXNode, v25, (uint64_t)v20, v26);
  objc_msgSend_setHidden_(v27, v28, 1, v29);
  objc_msgSend_setCategoryBitMask_(v27, v30, 0xFFFFLL, v31);
  uint64_t v34 = (void *)qword_1E9DDBD30;

  return objc_msgSend_addChildNode_(v34, v32, (uint64_t)v27, v33);
}

uint64_t sub_1B65EF098(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  v70[1] = *MEMORY[0x1E4F143B8];
  uint64_t v6 = objc_msgSend_model(a2, (const char *)a2, a3, a4);
  id v10 = (id)objc_msgSend_copy(v6, v7, v8, v9);
  objc_msgSend_setModel_(a2, v11, (uint64_t)v10, v12);
  float v16 = *(float *)(a1 + 40);
  if (v16 != 1.0)
  {
    uint64_t v17 = objc_msgSend_model(a2, v13, v14, v15);
    *(float *)&double v18 = v16;
    objc_msgSend_setRadius_(v17, v19, v20, v21, v18);
  }
  uint64_t v22 = objc_msgSend_model(a2, v13, v14, v15);
  if (objc_msgSend_firstMaterial(v22, v23, v24, v25))
  {
    uint64_t v29 = objc_msgSend_model(a2, v26, v27, v28);
    Material = objc_msgSend_firstMaterial(v29, v30, v31, v32);
    v70[0] = (id)objc_msgSend_copy(Material, v34, v35, v36);
    uint64_t v38 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v37, (uint64_t)v70, 1);
  }
  else
  {
    uint64_t v38 = MEMORY[0x1E4F1CBF0];
  }
  uint64_t v39 = objc_msgSend_model(a2, v26, v27, v28);
  objc_msgSend_setMaterials_(v39, v40, v38, v41);
  uint64_t v42 = *(void *)(a1 + 32);
  uint64_t v46 = objc_msgSend_model(a2, v43, v44, v45);
  uint64_t v50 = objc_msgSend_firstMaterial(v46, v47, v48, v49);
  uint64_t v54 = objc_msgSend_diffuse(v50, v51, v52, v53);
  objc_msgSend_setContents_(v54, v55, v42, v56);
  uint64_t v60 = objc_msgSend_model(a2, v57, v58, v59);
  uint64_t v64 = objc_msgSend_firstMaterial(v60, v61, v62, v63);
  objc_msgSend_setShadingModel_(v64, v65, 2, v66);
  return objc_msgSend_setIsAuthoring_(a2, v67, 1, v68);
}

void *sub_1B65EF1D4(uint64_t a1, uint64_t a2)
{
  uint64_t result = (void *)sub_1B6DABD0C(a1, "GBuffer");
  *uint64_t result = &unk_1F0FB5300;
  result[3] = a2;
  return result;
}

uint64_t sub_1B65EF220@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v13[1] = *MEMORY[0x1E4F143B8];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v5, *(_WORD *)(a1 + 8), 9273, 1656467160);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v6, *(_WORD *)(a1 + 8), 9273, -797957750);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v7, *(_WORD *)(a1 + 8), 9273, 1893898584);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v8, *(_WORD *)(a1 + 8), 9273, 1490954098);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v9, *(_WORD *)(a1 + 8), 9273, -287492009);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v10, *(_WORD *)(a1 + 8), 9273, 1251382574);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v11, *(_WORD *)(a1 + 8), 9273, -1170177454);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v12, *(_WORD *)(a1 + 8), 9273, -495228831);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v13, *(_WORD *)(a1 + 8), 9273, -965507924);
  return sub_1B63D0050(a2, &v5, 9);
}

uint64_t sub_1B65EF36C@<X0>(CFX::RG::ResourceIdentifier *a1@<X0>, uint64_t a2@<X8>)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  v4[0] = CFX::RG::ResourceIdentifier::finalColor(a1);
  return sub_1B63D0050(a2, v4, 1);
}

unint64_t sub_1B65EF3D8(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v3 = *(unsigned __int16 *)(a1 + 8);
  uint64_t v4 = *a3;
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)a3 + 1);
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v10 = v7;
      uint64_t v8 = CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)&v10);
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) >> 47));
      v6 -= 8;
    }
    while (v6);
  }
  return v3;
}

void sub_1B65EF460(uint64_t a1, CFX::RG::RenderGraphContext *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (void *)sub_1B6445900(*(void *)(a1 + 24), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  uint64_t v19 = sub_1B644558C(*(void *)(a1 + 24), v12, v13, v14, v15, v16, v17, v18);
  uint64_t v27 = sub_1B6446564(*(uint64_t **)(a1 + 24), v20, v21, v22, v23, v24, v25, v26);
  if (v27)
  {
    CFDictionaryRef v35 = sub_1B64A3B48((uint64_t)v27, v28, v29, v30, v31, v32, v33, v34);
    if (v35)
    {
      uint64_t v43 = (uint64_t)v35;
      int v44 = sub_1B649BF98((uint64_t)v35, v36, v37, v38, v39, v40, v41, v42);
      sub_1B64B2D5C(v19, v45, v46, v47, v48, v49, v50, v51);
      sub_1B649B788(v43, v52, v53, v54, v55, v56, v57, v58);
      int v66 = sub_1B649B548(v43, v59, v60, v61, v62, v63, v64, v65);
      sub_1B649B668(v43, v67, v68, v69, v70, v71, v72, v73);
      sub_1B649BA58(v43, v74, v75, v76, v77, v78, v79, v80);
      sub_1B649BB78(v43, v81, v82, v83, v84, v85, v86, v87);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormatIf(&v131, MTLPixelFormatRGBA16Float, v44, (uint64_t)v143);
      v110 = sub_1B63CFDE4(a3, (uint64_t)"COLOR", v143);
      CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, v110);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatDepth32Float, (uint64_t)v130);
      v112 = sub_1B63CFDE4(a3, (uint64_t)"DEPTH", v130);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatRGBA8Unorm, (uint64_t)v129);
      v113 = sub_1B63CFDE4(a3, (uint64_t)"Albedo", v129);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatRGBA16Float, (uint64_t)v128);
      uint64_t v88 = sub_1B63CFDE4(a3, (uint64_t)"Normals", v128);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatRGBA16Float, (uint64_t)v127);
      uint64_t v89 = sub_1B63CFDE4(a3, (uint64_t)"RoughnessMetalness", v127);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatRGBA16Float, (uint64_t)v126);
      v90 = sub_1B63CFDE4(a3, (uint64_t)"Emission", v126);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      if (v66) {
        MTLPixelFormat v91 = MTLPixelFormatRGBA16Float;
      }
      else {
        MTLPixelFormat v91 = MTLPixelFormatRG16Float;
      }
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, v91, (uint64_t)v125);
      uint64_t v92 = sub_1B63CFDE4(a3, (uint64_t)"Velocity", v125);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatRGBA16Float, (uint64_t)v124);
      v93 = sub_1B63CFDE4(a3, (uint64_t)"ClearCoat", v124);
      CFX::RG::TextureDescriptorReference::finalColor((uint64_t)&v131);
      CFX::RG::TextureDescriptorReference::withPixelFormat((CFX::RG::TextureDescriptorReference *)&v131, MTLPixelFormatRGBA16Float, (uint64_t)v123);
      v94 = sub_1B63CFDE4(a3, (uint64_t)"Subsurface", v123);
      objc_msgSend_setSampleCount_(v11, v95, 1, v96);
      uint64_t v97 = *(void *)(a1 + 24);
      *(void *)&long long v131 = "GBuffer";
      *((void *)&v131 + 1) = v97;
      __int16 v132 = 0;
      char v133 = 1;
      v134 = v110;
      v135 = v112;
      v136 = v113;
      unint64_t v111 = (unint64_t)v92;
      v137 = v88;
      v138 = v89;
      v139 = v90;
      v140 = v92;
      v141 = v93;
      v142 = v94;
      uint64_t v104 = sub_1B6520810(a3, (uint64_t *)&v131, v98, v99, v100, v101, v102, v103);
      uint64_t v105 = *(unsigned char **)(v104 + 24);
      char v106 = *v105;
      if (*v105)
      {
        v107 = v105 + 1;
        __int16 v108 = -25147;
        do
        {
          __int16 v108 = 403 * (v108 ^ v106);
          int v109 = *v107++;
          char v106 = v109;
        }
        while (v109);
      }
      else
      {
        __int16 v108 = -25147;
      }
      if (v110)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v122, *(_WORD *)(a1 + 8), v108, 1656467160);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v122, (unint64_t)v110, v104);
      }
      if (v112)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v121, *(_WORD *)(a1 + 8), v108, -797957750);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v121, (unint64_t)v112, v104);
      }
      if (v113)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v120, *(_WORD *)(a1 + 8), v108, 1893898584);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v120, (unint64_t)v113, v104);
      }
      if (v88)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v119, *(_WORD *)(a1 + 8), v108, 1490954098);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v119, (unint64_t)v88, v104);
      }
      if (v89)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v118, *(_WORD *)(a1 + 8), v108, -287492009);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v118, (unint64_t)v89, v104);
      }
      if (v90)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v117, *(_WORD *)(a1 + 8), v108, 1251382574);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v117, (unint64_t)v90, v104);
      }
      if (v111)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v116, *(_WORD *)(a1 + 8), v108, -1170177454);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v116, v111, v104);
      }
      if (v93)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v115, *(_WORD *)(a1 + 8), v108, -495228831);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v115, (unint64_t)v93, v104);
      }
      if (v94)
      {
        CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v114, *(_WORD *)(a1 + 8), v108, -965507924);
        CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v114, (unint64_t)v94, v104);
      }
    }
  }
}

void sub_1B65EF970()
{
}

void sub_1B65EF984(unsigned int *a1)
{
  if (*a1)
  {
    uint64_t v2 = 0;
    unint64_t v3 = 0;
    do
    {
      uint64_t v4 = *((void *)a1 + 1);
      if (*(_DWORD *)(v4 + v2)) {
        free(*(void **)(v4 + v2 + 8));
      }
      uint64_t v5 = v4 + v2;
      *(void *)(v5 + 8) = 0;
      *(_DWORD *)uint64_t v5 = 0;
      ++v3;
      unint64_t v6 = *a1;
      v2 += 16;
    }
    while (v3 < v6);
    if (v6) {
      free(*((void **)a1 + 1));
    }
  }
  *((void *)a1 + 1) = 0;
  *a1 = 0;
}

double sub_1B65EFA08(double a1, double a2, double a3, double a4, double a5, double a6)
{
  double v6 = a5 - a3;
  double v7 = a6 - a4;
  double v8 = a1 - a3;
  double v9 = a2 - a4;
  float v10 = hypot(a5 - a3, a6 - a4);
  double v11 = hypot(v8, v9);
  if (v10 == 0.0) {
    return 0.0;
  }
  float v12 = v11;
  if (v12 == 0.0) {
    return 0.0;
  }
  float v13 = (v9 * v7 + v6 * v8) / (float)(v10 * v12);
  if (v13 > 1.0) {
    float v13 = 1.0;
  }
  if (v13 < -1.0) {
    float v13 = -1.0;
  }

  *(float *)&double result = acosf(v13);
  return result;
}

__n128 sub_1B65EFACC(int *a1, uint64_t a2)
{
  int v4 = *a1;
  if (*a1 == a1[1])
  {
    unsigned int v5 = 2 * v4;
    a1[1] = v5;
    double v6 = (char *)malloc_type_realloc(*((void **)a1 + 1), 88 * v5, 0x1020040662E9E32uLL);
    *((void *)a1 + 1) = v6;
    int v4 = *a1;
  }
  else
  {
    double v6 = (char *)*((void *)a1 + 1);
  }
  *a1 = v4 + 1;
  double v7 = &v6[88 * v4];
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)double v7 = *(_OWORD *)a2;
  *((_OWORD *)v7 + 1) = v8;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v10 = *(_OWORD *)(a2 + 48);
  long long v11 = *(_OWORD *)(a2 + 64);
  *((void *)v7 + 10) = *(void *)(a2 + 80);
  *((_OWORD *)v7 + 3) = v10;
  *((_OWORD *)v7 + 4) = v11;
  *((__n128 *)v7 + 2) = result;
  return result;
}

void sub_1B65EFB64(unsigned int a1, void ***a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    int v4 = a2;
    do
    {
      unsigned int v5 = *v4++;
      free(v5[1]);
      free(v5);
      --v3;
    }
    while (v3);
  }

  free(a2);
}

void *sub_1B65EFBC8(int *a1, uint64_t a2)
{
  int v4 = *a1;
  if (*a1 == a1[1])
  {
    unsigned int v5 = 2 * v4;
    a1[1] = v5;
    __n128 result = malloc_type_realloc(*((void **)a1 + 1), 8 * v5, 0x2004093837F09uLL);
    *((void *)a1 + 1) = result;
    int v4 = *a1;
  }
  else
  {
    __n128 result = (void *)*((void *)a1 + 1);
  }
  *a1 = v4 + 1;
  result[v4] = a2;
  return result;
}

void sub_1B65EFC38(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W3>, uint64_t a4@<X8>, double a5@<D0>, double a6@<D1>, double a7@<D2>, double a8@<D3>, double a9@<D4>, double a10@<D5>)
{
  *(_OWORD *)(a4 + 56) = 0u;
  *(_OWORD *)(a4 + 72) = 0u;
  *(double *)a4 = a5;
  *(double *)(a4 + 8) = a6;
  *(void *)(a4 + 16) = a1;
  *(int64x2_t *)(a4 + 24) = vdupq_n_s64(0x47EFFFFFE0000000uLL);
  *(void *)(a4 + 40) = a2;
  *(_DWORD *)(a4 + 48) = a3;
  *(void *)(a4 + 52) = -1;
  double v16 = a5 - a7;
  double v17 = a6 - a8;
  float v18 = hypot(a5 - a7, a6 - a8);
  double v19 = v18;
  double v20 = v16 / v19;
  double v36 = a9;
  double v37 = a10;
  long double v21 = a10 - a6;
  double v22 = v17 / v19;
  float v23 = hypot(a9 - a5, v21);
  double v24 = v23;
  double v25 = (a9 - a5) / v24;
  double v26 = v21 / v24;
  float v27 = v20 + v25;
  float v28 = v22 + v26;
  float v29 = hypotf(v27, v28);
  if (v29 == 0.0)
  {
    double v30 = *MEMORY[0x1E4F1DAD8];
    long double v31 = *(double *)(MEMORY[0x1E4F1DAD8] + 8);
  }
  else
  {
    double v30 = (float)(v27 / v29);
    long double v31 = (float)(v28 / v29);
  }
  float v32 = hypot(v30, v31);
  if (v32 >= 0.00001)
  {
    *(unsigned char *)(a4 + 84) = v36 * a6 - a5 * v37 - v36 * a8 + a7 * v37 + a5 * a8 - a7 * a6 > 0.0;
    *(long double *)(a4 + 64) = -v31;
    *(double *)(a4 + 72) = v30;
    double v33 = sub_1B65EFA08(a7, a8, a5, a6, v36, v37);
    float v34 = sin(*(float *)&v33 * 0.5);
    if (fabsf(v34) >= 0.00001) {
      *(float *)(a4 + 80) = 1.0 / v34;
    }
  }
  else
  {
    *(double *)(a4 + 64) = v25;
    *(double *)(a4 + 72) = v26;
  }
}

double sub_1B65EFDFC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double v3 = *(double *)(a1 + 64);
  double v4 = *(double *)(a1 + 72);
  double v5 = *(double *)(a2 + 64);
  double v6 = *(double *)(a2 + 72);
  float v7 = v3 * v6 - v4 * v5;
  if (v7 == 0.0
    || (double v8 = *(double *)(a1 + 8),
        double v9 = v8 - *(double *)(a2 + 8),
        double v10 = *(double *)a1 - *(double *)a2,
        float v11 = (v5 * v9 - v6 * v10) / v7,
        v11 < 0.0)
    || (float v12 = (v10 * -v4 + v3 * v9) / v7, v12 < 0.0))
  {
    double result = -0.0078125;
    *(_OWORD *)a3 = xmmword_1B6E72C28;
    *(_OWORD *)(a3 + 16) = unk_1B6E72C38;
    *(void *)(a3 + 32) = 0;
  }
  else
  {
    float v13 = v11 / *(float *)(a1 + 80);
    float v14 = v12 / *(float *)(a2 + 80);
    double v15 = (float)(1.0 - v11);
    double v16 = v11;
    double result = (v8 + v4) * v16 + v15 * v8;
    *(double *)(a3 + 8) = (*(double *)a1 + v3) * v16 + v15 * *(double *)a1;
    *(double *)(a3 + 16) = result;
    if (v13 <= v14) {
      *(float *)&double result = v14;
    }
    else {
      *(float *)&double result = v13;
    }
    *(_DWORD *)(a3 + 4) = LODWORD(result);
    *(_DWORD *)a3 = 1;
    *(void *)(a3 + 24) = a1;
    *(void *)(a3 + 32) = a2;
  }
  return result;
}

void sub_1B65EFED4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  double v9 = *(double *)a1;
  double v8 = *(double *)(a1 + 8);
  double v10 = *(double *)a2;
  double v11 = *(double *)(a2 + 8);
  double v13 = *(double *)a3;
  double v12 = *(double *)(a3 + 8);
  long double v14 = *(double *)a3 - *(double *)a2;
  float v15 = hypot(v14, v12 - v11);
  double v16 = v15;
  long double v17 = v14 / v16;
  double v18 = (v12 - v11) / v16;
  float v19 = v9 - v10;
  float v20 = v8 - v11;
  double v21 = *(float *)(a2 + 80);
  double v22 = *(float *)(a1 + 80);
  double v23 = *(double *)(a1 + 64);
  double v24 = *(double *)(a1 + 72);
  float v25 = *(double *)(a2 + 64) * v21 - v23 * v22;
  float v26 = *(double *)(a2 + 72) * v21 - v24 * v22;
  float v27 = v17;
  float v28 = v18;
  double v29 = fabsf(v27);
  if (v29 <= 0.00001)
  {
    if (fabsf(v28) <= 0.00001) {
      goto LABEL_14;
    }
    float v33 = (float)(v27 * v26) / v28;
    if (vabds_f32(v25, v33) <= 0.00001) {
      goto LABEL_14;
    }
    float v31 = (float)(v19 - (float)((float)(v20 * v27) / v28)) / (float)(v25 - v33);
    float v32 = (float)(v20 - (float)(v26 * v31)) / v28;
  }
  else
  {
    float v30 = (float)(v28 * v25) / v27;
    if (vabds_f32(v26, v30) <= 0.00001) {
      goto LABEL_14;
    }
    float v31 = (float)(v20 - (float)((float)(v19 * v28) / v27)) / (float)(v26 - v30);
    float v32 = (float)(v19 - (float)(v25 * v31)) / v27;
  }
  if (v31 < 0.0 || v32 < 0.0) {
    goto LABEL_14;
  }
  double v34 = *(float *)(a3 + 80);
  if (v29 > 0.00001)
  {
    float v35 = -v27;
    double v36 = *(double *)(a3 + 64) * v34 - v23 * v22;
    double v37 = v9 - v13;
    goto LABEL_13;
  }
  if (fabsf(v28) <= 0.00001)
  {
LABEL_14:
    *(_OWORD *)a4 = xmmword_1B6E72C28;
    *(_OWORD *)(a4 + 16) = unk_1B6E72C38;
    *(void *)(a4 + 32) = 0;
    return;
  }
  float v35 = -v28;
  double v36 = *(double *)(a3 + 72) * v34 - v24 * v22;
  double v37 = v8 - v12;
LABEL_13:
  float v38 = v37;
  float v39 = v36;
  if ((float)((float)(v38 - (float)(v39 * v31)) / v35) < 0.0) {
    goto LABEL_14;
  }
  *(_DWORD *)a4 = 2;
  *(float *)(a4 + 4) = v31;
  *(double *)(a4 + 8) = v9 + v23 * v22 * v31;
  *(double *)(a4 + 16) = v8 + v24 * v22 * v31;
  *(void *)(a4 + 24) = a1;
  *(void *)(a4 + 32) = a2;
}

double sub_1B65F00E4(unsigned int a1, uint64_t a2)
{
  if (!a1) {
    return 0.0;
  }
  uint64_t v2 = 0;
  double v3 = (double *)(a2 + 8);
  LODWORD(result) = 0;
  do
  {
    if (a1 - 1 == v2) {
      uint64_t v5 = 0;
    }
    else {
      uint64_t v5 = v2 + 1;
    }
    double result = *(v3 - 1) * *(double *)(a2 + 24 * v5 + 8) - *v3 * *(double *)(a2 + 24 * v5) + *(float *)&result;
    *(float *)&double result = result;
    v3 += 3;
    ++v2;
  }
  while (a1 != v2);
  *(float *)&double result = *(float *)&result * 0.5;
  return result;
}

void sub_1B65F0150(int *a1, unsigned int a2, uint64_t a3)
{
  if (a2 >= 3 && fabsf(COERCE_FLOAT(COERCE_UNSIGNED_INT64(sub_1B65F00E4(a2, a3)))) >= 0.0001)
  {
    double v6 = (int *)malloc_type_malloc(0x10uLL, 0x10200405730B0C9uLL);
    *(void *)double v6 = 0x400000000;
    float v7 = malloc_type_malloc(0x160uLL, 0x1020040662E9E32uLL);
    uint64_t v8 = 0;
    *((void *)v6 + 1) = v7;
    uint64_t v9 = a3 + 8;
    do
    {
      uint64_t v20 = 0;
      long long v18 = 0u;
      long long v19 = 0u;
      long long v16 = 0u;
      long long v17 = 0u;
      long long v15 = 0u;
      uint64_t v11 = v8 + 1;
      if (a2 - 1 == v8) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = v8 + 1;
      }
      double v10 = (double *)(a3 + 24 * ((a2 - 1 + v8) % a2));
      sub_1B65EFC38(*(void *)(v9 + 8), (uint64_t)v6, v8, (uint64_t)&v15, *(double *)(v9 - 8), *(double *)v9, *v10, v10[1], *(double *)(a3 + 24 * v12), *(double *)(a3 + 24 * v12 + 8));
      void v13[2] = v17;
      v13[3] = v18;
      v13[4] = v19;
      uint64_t v14 = v20;
      v13[0] = v15;
      v13[1] = v16;
      sub_1B65EFACC(v6, (uint64_t)v13);
      v9 += 24;
      uint64_t v8 = v11;
    }
    while (a2 != v11);
    sub_1B65EFBC8(a1, (uint64_t)v6);
  }
}

void sub_1B65F02EC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>, float a4@<S0>)
{
  *(void *)(a3 + 48) = 0;
  *(float *)(a3 + 52) = a4;
  double v6 = malloc_type_malloc(0xE0uLL, 0x10A0040E17462F8uLL);
  *(void *)(a3 + 16) = 0x400000000;
  *(void *)(a3 + 24) = v6;
  *(void *)(a3 + 32) = a1;
  *(void *)(a3 + 40) = a2;
  float v7 = malloc_type_malloc(0x20uLL, 0x2004093837F09uLL);
  *(void *)a3 = 0x400000000;
  *(void *)(a3 + 8) = v7;
  a1 = a1;
  if (a1)
  {
    uint64_t v9 = (uint64_t *)(a2 + 8);
    do
    {
      sub_1B65F0150((int *)a3, *(v9 - 1), *v9);
      v9 += 2;
      --a1;
    }
    while (a1);
  }
}

void sub_1B65F0388(uint64_t a1)
{
  sub_1B65F03D0(*(void *)(a1 + 16), *(_OWORD **)(a1 + 24));
  sub_1B65EFB64(*(void *)a1, *(void ****)(a1 + 8));

  sub_1B65EF984((unsigned int *)(a1 + 32));
}

void sub_1B65F03D0(unsigned int a1, _OWORD *a2)
{
  uint64_t v3 = a1;
  if (a1)
  {
    double v4 = a2;
    do
    {
      long long v5 = v4[1];
      v6[0] = *v4;
      v6[1] = v5;
      v6[2] = v4[2];
      uint64_t v7 = *((void *)v4 + 6);
      sub_1B65F0388(v6);
      double v4 = (_OWORD *)((char *)v4 + 56);
      --v3;
    }
    while (v3);
  }

  free(a2);
}

__n128 sub_1B65F044C(int *a1, uint64_t a2)
{
  int v4 = *a1;
  if (*a1 == a1[1])
  {
    unsigned int v5 = 2 * v4;
    a1[1] = v5;
    double v6 = (char *)malloc_type_realloc(*((void **)a1 + 1), 56 * v5, 0x10A0040E17462F8uLL);
    *((void *)a1 + 1) = v6;
    int v4 = *a1;
  }
  else
  {
    double v6 = (char *)*((void *)a1 + 1);
  }
  *a1 = v4 + 1;
  uint64_t v7 = &v6[56 * v4];
  __n128 result = *(__n128 *)a2;
  long long v9 = *(_OWORD *)(a2 + 16);
  long long v10 = *(_OWORD *)(a2 + 32);
  *((void *)v7 + 6) = *(void *)(a2 + 48);
  *((_OWORD *)v7 + 1) = v9;
  *((_OWORD *)v7 + 2) = v10;
  *(__n128 *)uint64_t v7 = result;
  return result;
}

float sub_1B65F04DC(unsigned int *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(_DWORD *)a4 = 0;
  sub_1B65EFDFC(a2, *(void *)(*(void *)(a2 + 40) + 8) + 88 * ((*(_DWORD *)(a2 + 48) + 1) % **(_DWORD **)(a2 + 40)), (uint64_t)&v25);
  long long v8 = v26;
  *(_OWORD *)a3 = v25;
  *(_OWORD *)(a3 + 16) = v8;
  *(void *)(a3 + 32) = v27;
  if (*(_DWORD *)a3) {
    float v9 = *(float *)(a3 + 4);
  }
  else {
    float v9 = 3.4028e38;
  }
  if (*(unsigned char *)(a2 + 84))
  {
    unint64_t v10 = *a1;
    if (v10)
    {
      for (unint64_t i = 0; i < v10; ++i)
      {
        uint64_t v12 = *(unsigned int **)(*((void *)a1 + 1) + 8 * i);
        unint64_t v13 = *v12;
        if (v13)
        {
          uint64_t v14 = 0;
          unint64_t v15 = 1;
          do
          {
            uint64_t v16 = *((void *)v12 + 1);
            uint64_t v17 = v16 + v14;
            if (v15 == v13) {
              unint64_t v18 = 0;
            }
            else {
              unint64_t v18 = v15;
            }
            uint64_t v19 = v16 + 88 * v18;
            if (v17 != a2 && v19 != a2)
            {
              uint64_t v27 = 0;
              long long v25 = 0u;
              long long v26 = 0u;
              sub_1B65EFED4(a2, v17, v19, (uint64_t)&v25);
              if (v25)
              {
                float v21 = *((float *)&v25 + 1);
                if (v9 + -0.00001 > *((float *)&v25 + 1))
                {
                  *(_DWORD *)a3 = 0;
                  long long v22 = v26;
                  *(_OWORD *)a4 = v25;
                  *(_OWORD *)(a4 + 16) = v22;
                  *(void *)(a4 + 32) = v27;
                  float v9 = v21;
                }
              }
              unint64_t v13 = *v12;
            }
            v14 += 88;
          }
          while (v15++ < v13);
          unint64_t v10 = *a1;
        }
      }
    }
  }
  return v9;
}

uint64_t sub_1B65F0668(unsigned int *a1, int a2, float a3, float a4)
{
  LODWORD(v4) = *a1;
  if (*a1)
  {
    unint64_t v8 = 0;
    unsigned int v9 = 0;
    unint64_t v10 = 0;
    for (uint64_t i = 80; ; i += 88)
    {
      uint64_t v12 = *((void *)a1 + 1);
      uint64_t v13 = v12 + i;
      double v14 = (float)(*(float *)(v12 + i) * a3);
      double v15 = *(double *)(v12 + i - 80) + v14 * *(double *)(v12 + i - 16);
      double v16 = *(double *)(v12 + i - 72) + v14 * *(double *)(v12 + i - 8);
      uint64_t v17 = *(void *)(v12 + i - 64);
      if (v17)
      {
        *(double *)(v17 + 48) = v15;
        *(double *)(v17 + 56) = v16;
        *(float *)(v17 + 64) = a4;
      }
      *(double *)(v13 - 56) = v15;
      *(double *)(v13 - 48) = v16;
      *(_DWORD *)(v13 - 28) = a2;
      if (!v9) {
        break;
      }
      unsigned int v18 = v9 - 1;
      float v19 = hypot(v10[3 * v18] - v15, v10[3 * v18 + 1] - v16);
      if (v19 >= 1.0)
      {
        if (v8 != v4 - 1 || (float v20 = hypot(*v10 - v15, v10[1] - v16), v20 >= 1.0))
        {
          int v22 = v9 + 1;
          unint64_t v10 = (double *)malloc_type_realloc(v10, 24 * (v9 + 1), 0x10200403ED2C137uLL);
          double v23 = &v10[3 * v9];
          *double v23 = v15;
          v23[1] = v16;
          float v21 = v23 + 2;
          goto LABEL_12;
        }
        unsigned int v18 = 0;
      }
LABEL_13:
      *(_DWORD *)(v12 + i - 24) = v18;
      ++v8;
      unint64_t v4 = *a1;
      if (v8 >= v4) {
        return v9;
      }
    }
    unint64_t v10 = (double *)malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
    *unint64_t v10 = v15;
    v10[1] = v16;
    float v21 = v10 + 2;
    int v22 = 1;
LABEL_12:
    *float v21 = v17;
    unsigned int v18 = v9;
    unsigned int v9 = v22;
    goto LABEL_13;
  }
  return 0;
}

uint64_t sub_1B65F0828(unsigned int *a1, float a2)
{
  if (*a1)
  {
    unint64_t v4 = 0;
    unsigned int v5 = 0;
    unsigned int v6 = 0;
    do
    {
      uint64_t v7 = sub_1B65F0668(*(unsigned int **)(*((void *)a1 + 1) + 8 * v4), v4, a2, *((float *)a1 + 13) + a2);
      uint64_t v9 = v7;
      uint64_t v10 = (uint64_t)v8;
      if (v7 < 3)
      {
        if (v7) {
          free(v8);
        }
      }
      else
      {
        unsigned int v5 = (char *)malloc_type_realloc(v5, 16 * (v6 + 1), 0x1020040D5A9D86FuLL);
        uint64_t v11 = (uint64_t *)&v5[16 * v6];
        uint64_t *v11 = v9;
        v11[1] = v10;
        ++v6;
      }
      ++v4;
    }
    while (v4 < *a1);
  }
  else
  {
    return 0;
  }
  return v6;
}

uint64_t sub_1B65F0910(uint64_t a1, unsigned int a2, uint64_t a3, uint64_t a4, _DWORD *a5, _DWORD *a6, unsigned int *a7, unsigned int *a8)
{
  uint64_t v9 = *(void *)(a4 + 24);
  uint64_t v8 = *(void *)(a4 + 32);
  *a5 = *(_DWORD *)(v9 + 52);
  *a6 = *(_DWORD *)(v8 + 52);
  uint64_t v10 = *(unsigned int *)(v9 + 52);
  if (v10 >= a2 || (uint64_t v11 = *(unsigned int *)(v8 + 52), v11 >= a2))
  {
    sub_1B63F2F54(16, @"Error: boundaryOfVerticesIndex out of bound", a3, a4, (uint64_t)a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8, v90);
    return 0;
  }
  else
  {
    double v14 = (_DWORD *)(a3 + 16 * v11);
    unsigned int v15 = *(_DWORD *)(a3 + 16 * v10);
    unsigned int v16 = *(_DWORD *)(v9 + 56);
    unsigned int v17 = *(_DWORD *)(v8 + 56);
    unint64_t v96 = *v14;
    unint64_t v18 = (v17 + 1) % *v14;
    *a8 = 0;
    *a7 = 0;
    unsigned int v19 = (v16 + 1) % v15;
    *((void *)a8 + 1) = 0;
    *((void *)a7 + 1) = 0;
    if (v10 == v11)
    {
      uint64_t result = 3;
      if (v16 != v17 && v16 != v18)
      {
        uint64_t v94 = a3 + 16 * v10;
        float v21 = (void **)(v94 + 8);
        int v22 = (uint64_t *)(*(void *)(v94 + 8) + 24 * v16);
        uint64_t v23 = *v22;
        uint64_t v24 = v22[1];
        *a7 = 1;
        long long v25 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
        *((void *)a7 + 1) = v25;
        void *v25 = v23;
        v25[1] = v24;
        v25[2] = 0;
        unsigned int v26 = *a7;
        do
        {
          uint64_t v27 = (uint64_t *)((char *)*v21 + 24 * v18);
          uint64_t v28 = v27[2];
          uint64_t v29 = *v27;
          uint64_t v30 = v27[1];
          long long v25 = malloc_type_realloc(v25, 24 * (v26 + 1), 0x10200403ED2C137uLL);
          *((void *)a7 + 1) = v25;
          int v31 = *a7;
          float v32 = &v25[3 * *a7];
          *float v32 = v29;
          v32[1] = v30;
          v32[2] = v28;
          unsigned int v26 = v31 + 1;
          *a7 = v26;
          LODWORD(v18) = ((int)v18 + 1) % v15;
        }
        while (v18 != v16);
        float v33 = (uint64_t *)((char *)*v21 + 24 * v16);
        uint64_t v34 = *v33;
        uint64_t v35 = v33[1];
        *a8 = 1;
        double v36 = malloc_type_malloc(0x18uLL, 0x10200403ED2C137uLL);
        *((void *)a8 + 1) = v36;
        *double v36 = v34;
        v36[1] = v35;
        v36[2] = 0;
        unsigned int v37 = *a8;
        while (v19 != v17)
        {
          float v38 = (uint64_t *)((char *)*v21 + 24 * v19);
          uint64_t v39 = v38[2];
          uint64_t v40 = *v38;
          uint64_t v41 = v38[1];
          double v36 = malloc_type_realloc(v36, 24 * (v37 + 1), 0x10200403ED2C137uLL);
          *((void *)a8 + 1) = v36;
          int v42 = *a8;
          uint64_t v43 = &v36[3 * *a8];
          void *v43 = v40;
          v43[1] = v41;
          v43[2] = v39;
          unsigned int v37 = v42 + 1;
          *a8 = v37;
          if (v19 + 1 == v15) {
            unsigned int v19 = 0;
          }
          else {
            ++v19;
          }
        }
        uint64_t v65 = (uint64_t *)((char *)*v21 + 24 * v17);
        uint64_t v66 = *v65;
        uint64_t v67 = v65[1];
        uint64_t v68 = (char *)malloc_type_realloc(v36, 24 * (v37 + 1), 0x10200403ED2C137uLL);
        *((void *)a8 + 1) = v68;
        int v69 = *a8;
        uint64_t v70 = &v68[24 * *a8];
        *(void *)uint64_t v70 = v66;
        *((void *)v70 + 1) = v67;
        *((void *)v70 + 2) = 0;
        *a8 = v69 + 1;
        if (*(_DWORD *)v94) {
          free(*v21);
        }
        *float v21 = 0;
        *(_DWORD *)uint64_t v94 = 0;
        return 1;
      }
    }
    else
    {
      unsigned int v92 = v16;
      v93 = (_DWORD *)(a3 + 16 * v11);
      uint64_t v95 = (_DWORD *)(a3 + 16 * v10);
      int v44 = 0;
      uint64_t v45 = 0;
      unsigned int v46 = 0;
      uint64_t v47 = (void **)(v14 + 2);
      do
      {
        uint64_t v48 = (uint64_t *)((char *)*v47 + 24 * v46);
        uint64_t v49 = v48[2];
        uint64_t v50 = *v48;
        uint64_t v51 = v48[1];
        uint64_t v45 = (char *)malloc_type_realloc(v45, 24 * (v44 + 1), 0x10200403ED2C137uLL);
        *((void *)a7 + 1) = v45;
        int v52 = *a7;
        uint64_t v53 = &v45[24 * *a7];
        *(void *)uint64_t v53 = v50;
        *((void *)v53 + 1) = v51;
        *((void *)v53 + 2) = v49;
        int v44 = v52 + 1;
        *a7 = v52 + 1;
        ++v46;
      }
      while (v46 <= v17);
      uint64_t v54 = a3 + 16 * v10;
      uint64_t v56 = *(void *)(v54 + 8);
      uint64_t v55 = (void **)(v54 + 8);
      uint64_t v57 = (uint64_t *)(v56 + 24 * v92);
      uint64_t v58 = *v57;
      uint64_t v59 = v57[1];
      uint64_t v60 = (char *)malloc_type_realloc(v45, 24 * (v52 + 2), 0x10200403ED2C137uLL);
      *((void *)a7 + 1) = v60;
      int v61 = *a7;
      uint64_t v62 = &v60[24 * *a7];
      *(void *)uint64_t v62 = v58;
      *((void *)v62 + 1) = v59;
      *((void *)v62 + 2) = 0;
      unsigned int v63 = v61 + 1;
      *a7 = v63;
      if (v19 == v92)
      {
        uint64_t v64 = v95;
      }
      else
      {
        uint64_t v64 = v95;
        do
        {
          uint64_t v71 = (uint64_t *)((char *)*v55 + 24 * v19);
          uint64_t v72 = v71[2];
          uint64_t v73 = *v71;
          uint64_t v74 = v71[1];
          uint64_t v60 = (char *)malloc_type_realloc(v60, 24 * (v63 + 1), 0x10200403ED2C137uLL);
          *((void *)a7 + 1) = v60;
          int v75 = *a7;
          uint64_t v76 = &v60[24 * *a7];
          *(void *)uint64_t v76 = v73;
          *((void *)v76 + 1) = v74;
          *((void *)v76 + 2) = v72;
          unsigned int v63 = v75 + 1;
          *a7 = v63;
          if (v19 + 1 == v15) {
            unsigned int v19 = 0;
          }
          else {
            ++v19;
          }
        }
        while (v19 != v92);
      }
      uint64_t v77 = (uint64_t *)((char *)*v55 + 24 * v92);
      uint64_t v78 = *v77;
      uint64_t v79 = v77[1];
      uint64_t v80 = (char *)malloc_type_realloc(v60, 24 * (v63 + 1), 0x10200403ED2C137uLL);
      *((void *)a7 + 1) = v80;
      int v81 = *a7;
      uint64_t v82 = &v80[24 * *a7];
      *(void *)uint64_t v82 = v78;
      *((void *)v82 + 1) = v79;
      *((void *)v82 + 2) = 0;
      unsigned int v83 = v81 + 1;
      *a7 = v83;
      if (v18)
      {
        do
        {
          uint64_t v84 = (uint64_t *)((char *)*v47 + 24 * v18);
          uint64_t v85 = v84[2];
          uint64_t v86 = *v84;
          uint64_t v87 = v84[1];
          uint64_t v80 = (char *)malloc_type_realloc(v80, 24 * (v83 + 1), 0x10200403ED2C137uLL);
          *((void *)a7 + 1) = v80;
          int v88 = *a7;
          uint64_t v89 = &v80[24 * *a7];
          *(void *)uint64_t v89 = v86;
          *((void *)v89 + 1) = v87;
          *((void *)v89 + 2) = v85;
          unsigned int v83 = v88 + 1;
          *a7 = v83;
          ++v18;
        }
        while (v18 < v96);
      }
      if (*v64) {
        free(*v55);
      }
      const char *v55 = 0;
      *uint64_t v64 = 0;
      if (*v93) {
        free(*v47);
      }
      *uint64_t v47 = 0;
      _DWORD *v93 = 0;
      return 2;
    }
  }
  return result;
}

void sub_1B65F0DD0(unsigned int *a1, float a2)
{
  uint64_t v3 = a1;
  unint64_t v4 = *a1;
  if (v4)
  {
    unint64_t v5 = 0;
    unsigned int v6 = 0;
    uint64_t v7 = 0;
    int v8 = 0;
    unsigned int v9 = 0;
    float v10 = 3.4028e38;
    do
    {
      uint64_t v11 = *(unsigned int **)(*((void *)v3 + 1) + 8 * v5);
      if (*v11)
      {
        unint64_t v50 = v5;
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        do
        {
          uint64_t v14 = *((void *)v11 + 1) + v12;
          uint64_t v67 = 0;
          long long v65 = 0u;
          long long v66 = 0u;
          uint64_t v64 = 0;
          long long v62 = 0u;
          long long v63 = 0u;
          float v15 = sub_1B65F04DC(v3, v14, (uint64_t)&v65, (uint64_t)&v62);
          if (v10 + -0.00001 > v15)
          {
            if (v6) {
              free(v6);
            }
            if (v7)
            {
              free(v7);
              unsigned int v9 = 0;
              int v8 = 0;
              uint64_t v7 = 0;
            }
            else
            {
              unsigned int v9 = 0;
              int v8 = 0;
            }
            unsigned int v6 = 0;
            float v10 = v15;
          }
          if (vabds_f32(v15, v10) < 0.00001)
          {
            if (v65)
            {
              unsigned int v6 = (char *)malloc_type_realloc(v6, 40 * (v8 + 1), 0x1020040BD065CB0uLL);
              unsigned int v16 = &v6[40 * v8];
              long long v17 = v66;
              *(_OWORD *)unsigned int v16 = v65;
              *((_OWORD *)v16 + 1) = v17;
              *((void *)v16 + 4) = v67;
              ++v8;
            }
            if (v62)
            {
              uint64_t v7 = (long long *)malloc_type_realloc(v7, 40 * (v9 + 1), 0x1020040BD065CB0uLL);
              unint64_t v18 = (char *)v7 + 40 * v9;
              long long v19 = v63;
              *(_OWORD *)unint64_t v18 = v62;
              *((_OWORD *)v18 + 1) = v19;
              *((void *)v18 + 4) = v64;
              ++v9;
            }
            uint64_t v3 = a1;
          }
          ++v13;
          v12 += 88;
        }
        while (v13 < *v11);
        unint64_t v4 = *v3;
        unint64_t v5 = v50;
      }
      ++v5;
    }
    while (v5 < v4);
  }
  else
  {
    uint64_t v7 = 0;
    unsigned int v6 = 0;
    float v10 = 3.4028e38;
  }
  if (fabsf(v10) >= 0.00001)
  {
    *((float *)v3 + 12) = v10;
    long long v59 = 0uLL;
    v58[0] = 0;
    v58[1] = 0;
    long long v57 = 0uLL;
    uint64_t v55 = 0;
    uint64_t v56 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    if (v10 <= a2)
    {
      uint64_t v22 = sub_1B65F0828(v3, v10);
      unsigned int v21 = v22;
      uint64_t v30 = v29;
      *(void *)&long long v59 = v22;
      *((void *)&v59 + 1) = v29;
      if (!v6 || v7)
      {
        if (!v22) {
          goto LABEL_50;
        }
        if (!v7) {
          sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v23, v24, v25, v26, v27, v28, (uint64_t)"bestSplitEvents");
        }
        if (*(_DWORD *)(*((void *)v7 + 3) + 52) < v21 && *(_DWORD *)(*((void *)v7 + 4) + 52) < v21)
        {
          long long v38 = *v7;
          long long v39 = v7[1];
          uint64_t v67 = *((void *)v7 + 4);
          long long v65 = v38;
          long long v66 = v39;
          int v40 = sub_1B65F0910(v22, v21, v30, (uint64_t)&v65, &v61, &v60, (unsigned int *)&v55, (unsigned int *)&v53);
          if (v40 == 2 || v40 == 1)
          {
            if (v55) {
              free(v56);
            }
            if (v53) {
              free(v54);
            }
            unsigned int v37 = (unsigned int *)&v59;
            goto LABEL_37;
          }
        }
LABEL_29:
        float v31 = *((float *)v3 + 12);
        float v32 = v31 + *((float *)v3 + 13);
        float v33 = a2 - v31;
        v34.n128_u64[1] = *((void *)&v59 + 1);
        long long v57 = v59;
        v34.n128_f64[0] = v33;
        if (v33 > 0.00001)
        {
          if (v57)
          {
            sub_1B65F02EC(v57, *((uint64_t *)&v57 + 1), (uint64_t)v52, v32);
            sub_1B65F044C((int *)v3 + 4, (uint64_t)v52);
          }
          if (v3[4])
          {
            uint64_t v35 = 0;
            unint64_t v36 = 0;
            do
            {
              sub_1B65F0DD0(*((void *)v3 + 3) + v35, v33, v34);
              ++v36;
              v35 += 56;
            }
            while (v36 < v3[4]);
          }
          goto LABEL_50;
        }
        sub_1B65EF984((unsigned int *)&v57);
        unsigned int v37 = (unsigned int *)v58;
LABEL_37:
        sub_1B65EF984(v37);
        goto LABEL_50;
      }
    }
    else
    {
      *((float *)v3 + 12) = a2;
      *(void *)&long long v59 = sub_1B65F0828(v3, a2);
      *((void *)&v59 + 1) = v20;
      unsigned int v21 = v59;
    }
    if (!v21) {
      goto LABEL_50;
    }
    goto LABEL_29;
  }
LABEL_50:
  if (v6) {
    free(v6);
  }
  if (v7) {
    free(v7);
  }
  if (byte_1E9DDBD40 == 1 && *v3)
  {
    unint64_t v41 = 0;
    int v42 = (char *)qword_1E9DDBD48;
    do
    {
      uint64_t v43 = *(unsigned int **)(*((void *)v3 + 1) + 8 * v41);
      int v42 = (char *)malloc_type_realloc(v42, 32 * (*v43 + dword_1E9DDBD50), 0x1000040E0EAB150uLL);
      qword_1E9DDBD48 = (uint64_t)v42;
      uint64_t v44 = *v43;
      if (v44)
      {
        unsigned int v45 = dword_1E9DDBD50;
        unsigned int v46 = (_OWORD *)*((void *)v43 + 1);
        do
        {
          uint64_t v47 = v45++;
          long long v48 = *(_OWORD *)((char *)v46 + 24);
          uint64_t v49 = &v42[32 * v47];
          *(_OWORD *)uint64_t v49 = *v46;
          *((_OWORD *)v49 + 1) = v48;
          unsigned int v46 = (_OWORD *)((char *)v46 + 88);
          --v44;
        }
        while (v44);
        dword_1E9DDBD50 = v45;
      }
      ++v41;
    }
    while (v41 < *v3);
  }
}

void sub_1B65F1250(uint64_t *a1, float a2)
{
  uint64_t v4 = *((unsigned int *)a1 + 2);
  unint64_t v5 = malloc_type_malloc(16 * v4, 0x1020040D5A9D86FuLL);
  if (v4)
  {
    uint64_t v6 = 0;
    uint64_t v7 = *a1;
    do
    {
      int v8 = malloc_type_malloc(24 * *(unsigned int *)(v7 + 40 * v6 + 8), 0x10200403ED2C137uLL);
      unsigned int v9 = (char *)&v5[4 * v6];
      *((void *)v9 + 1) = v8;
      float v10 = v9 + 8;
      uint64_t v7 = *a1;
      LODWORD(v11) = *(_DWORD *)(*a1 + 40 * v6 + 8);
      v5[4 * v6] = v11;
      if (v11)
      {
        uint64_t v12 = 0;
        unint64_t v13 = 0;
        int v14 = -1;
        do
        {
          float v15 = (_OWORD *)(*(void *)(v7 + 40 * v6) + 80 * (v11 + v14));
          uint64_t v16 = *v10 + v12;
          *(void *)(v16 + 16) = v15;
          *(_OWORD *)uint64_t v16 = *v15;
          ++v13;
          uint64_t v7 = *a1;
          unint64_t v11 = *(unsigned int *)(*a1 + 40 * v6 + 8);
          --v14;
          v12 += 24;
        }
        while (v13 < v11);
      }
      ++v6;
    }
    while (v6 != v4);
  }
  uint64_t v22 = 0;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v19 = 0u;
  sub_1B65F02EC(v4, (uint64_t)v5, (uint64_t)&v19, 0.0);
  sub_1B65F0DD0((unsigned int *)&v19, a2);
  v17[0] = v19;
  v17[1] = v20;
  v17[2] = v21;
  uint64_t v18 = v22;
  sub_1B65F0388((uint64_t)v17);
}

float sub_1B65F13BC(_OWORD *a1, double a2)
{
  byte_1E9DDBD40 = 0;
  float v2 = a2;
  long long v3 = a1[1];
  v5[0] = *a1;
  v5[1] = v3;
  sub_1B65F1250((uint64_t *)v5, v2);
  return result;
}

void sub_1B65F1644(uint64_t a1)
{
}

uint64_t sub_1B65F1708(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_addWorldReference_(a2, (const char *)a2, *(void *)(a1 + 32), a4);
}

uint64_t sub_1B65F17DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_removeWorldReference_(a2, (const char *)a2, *(void *)(a1 + 32), a4);
}

CFStringRef sub_1B65F18C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  CFStringRef v12 = *(const __CFString **)(a1 + 40);

  return sub_1B65834BC(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B65F1EB4(void *a1, const char *a2, void *a3, unsigned char *a4)
{
  unsigned int v11 = objc_msgSend_count(a1, a2, (uint64_t)a3, (uint64_t)a4);
  if (v11)
  {
    uint64_t v19 = objc_msgSend_count(a3, v8, v9, v10);
    if (v19)
    {
      uint64_t v20 = 0;
      int v21 = 0;
      do
      {
        uint64_t v22 = objc_msgSend_objectAtIndexedSubscript_(a3, v12, v20, v14);
        unsigned __int8 v26 = objc_msgSend_indicesChannelCount(v22, v23, v24, v25);
        if (v20)
        {
          unsigned int v27 = v26;
          if (v26 != v21)
          {
            sub_1B63F2F54(0, @"Warning: Found elements with different channel counts in the same geometry", v13, v14, v15, v16, v17, v18, v35);
            if (v27 < v21) {
              int v21 = v27;
            }
          }
        }
        else
        {
          int v21 = v26;
        }
        ++v20;
      }
      while (v19 != v20);
      if (!a2) {
        return;
      }
    }
    else
    {
      int v21 = 0;
      if (!a2) {
        return;
      }
    }
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    while (v29 < v11)
    {
      uint64_t v30 = objc_msgSend_objectAtIndexedSubscript_(a1, v12, v28, v14);
      uint64_t v34 = objc_msgSend_intValue(v30, v31, v32, v33);
      if ((v34 & 0x80000000) != 0 || (int)v34 > v21)
      {
        sub_1B63F2F54(16, @"Error: Invalid channel (%d) for source at index %u", v13, v14, v15, v16, v17, v18, v34);
        goto LABEL_24;
      }
      a4[v28] = v34;
LABEL_25:
      unint64_t v28 = (v29 + 1);
      uint64_t v29 = v28;
      if (v28 >= (unint64_t)a2) {
        return;
      }
    }
    sub_1B63F2F54(16, @"Error: Missing channel for source at index %u", v13, v14, v15, v16, v17, v18, v29);
LABEL_24:
    a4[v28] = 0;
    goto LABEL_25;
  }

  bzero(a4, (size_t)a2);
}

uint64_t sub_1B65F2E9C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v8 = sub_1B6DABD0C(a1, "PostRender");
  *(void *)uint64_t v8 = &unk_1F0FB2EB0;
  *(_WORD *)(v8 + 24) = 0;
  *(void *)(v8 + 32) = a2;
  *(void *)(a1 + 40) = a3;
  *(void *)(a1 + 48) = a4;
  return a1;
}

uint64_t sub_1B65F2F18(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB2EB0;

  return a1;
}

void sub_1B65F2F68(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB2EB0;

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B65F2FD8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = a1 + 2;
}

void sub_1B65F2FE4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = a1 + 2;
}

unint64_t sub_1B65F2FF0(uint64_t a1, const char *a2)
{
  uint64_t v16 = *MEMORY[0x1E4F143B8];
  unint64_t v2 = *(unsigned __int16 *)(a1 + 8);
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v3 = *(void **)(a1 + 40);
  uint64_t v4 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, a2, (uint64_t)&v11, (uint64_t)v15, 16);
  if (v4)
  {
    uint64_t v6 = v4;
    uint64_t v7 = *(void *)v12;
    do
    {
      for (uint64_t i = 0; i != v6; ++i)
      {
        if (*(void *)v12 != v7) {
          objc_enumerationMutation(v3);
        }
        unint64_t v9 = 0x9DDFEA08EB382D69 * (v2 ^ *(void *)(*((void *)&v11 + 1) + 8 * i));
        unint64_t v2 = 0x9DDFEA08EB382D69
           * ((0x9DDFEA08EB382D69 * (v2 ^ (v9 >> 47) ^ v9)) ^ ((0x9DDFEA08EB382D69 * (v2 ^ (v9 >> 47) ^ v9)) >> 47));
      }
      uint64_t v6 = objc_msgSend_countByEnumeratingWithState_objects_count_(v3, v5, (uint64_t)&v11, (uint64_t)v15, 16);
    }
    while (v6);
  }
  return v2;
}

__n128 sub_1B65F310C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v40[0] = *(void *)(a2 + 16);
  v40[1] = 0;
  v40[2] = v41;
  if (objc_msgSend_count(*(void **)(a1 + 40), (const char *)a2, a3, a4))
  {
    uint64_t v13 = 0;
    unsigned int v14 = 1;
    do
    {
      uint64_t v15 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 40), v7, v13, v8);
      v37[0] = objc_msgSend_nodeRef(v15, v16, v17, v18);
      sub_1B64EA528(v40, v37);
      uint64_t v13 = v14;
    }
    while (objc_msgSend_count(*(void **)(a1 + 40), v19, v20, v21) > (unint64_t)v14++);
  }
  v37[0] = *(void *)(a1 + 32);
  v37[1] = v40;
  int v38 = 3;
  uint64_t v39 = 0;
  sub_1B64EA3F8((uint64_t *)a3, a2, (uint64_t)v37, v8, v9, v10, v11, v12, (uint64_t)&v34);
  uint64_t v24 = *(void *)(a3 + 8);
  v41[0] = *(void *)a3;
  uint64_t v23 = v41[0];
  v41[1] = v24;
  uint64_t v25 = (uint64_t *)sub_1B63C8330(v41, 0x198u, 8u);
  unsigned __int8 v26 = (void *)CFX::RG::Pass::Pass((uint64_t)v25, v23, v24, (uint64_t)"Register probes", 1, 0, 0);
  void *v26 = &unk_1F0FB5410;
  v26[45] = v23;
  v26[46] = v24;
  unsigned int v27 = (__n128 *)(v26 + 49);
  v26[49] = 0;
  v26[50] = 0;
  v26[47] = 0;
  v26[48] = v26 + 49;
  unsigned int v28 = *(_DWORD *)(a3 + 160);
  unsigned int v29 = v28 + 1;
  if (v28 + 1 > *(_DWORD *)(a3 + 164))
  {
    sub_1B63C8928(a3 + 144, 1, 0);
    unsigned int v28 = *(_DWORD *)(a3 + 160);
    unsigned int v29 = v28 + 1;
  }
  *(void *)(*(void *)(a3 + 168) + 8 * v28) = v25;
  *(_DWORD *)(a3 + 160) = v29;
  if (v35)
  {
    uint64_t v30 = v36;
    uint64_t v31 = 8 * v35;
    do
    {
      uint64_t v32 = *v30++;
      v41[0] = *((void *)v32 + 50);
      sub_1B63C88CC(v25 + 45, v41);
      CFX::RG::Pass::dependsOn(v25, v32);
      v31 -= 8;
    }
    while (v31);
  }
  __n128 result = *(__n128 *)(a1 + 40);
  __n128 *v27 = result;
  return result;
}

void sub_1B65F32C4(CFX::RG::Pass *a1)
{
  *(void *)a1 = &unk_1F0FB5410;
  sub_1B65504F0((uint64_t)a1 + 360);

  CFX::RG::Pass::~Pass(a1);
}

void sub_1B65F331C(CFX::RG::Pass *a1)
{
  *(void *)a1 = &unk_1F0FB5410;
  sub_1B65504F0((uint64_t)a1 + 360);
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B65F3388(uint64_t result, const char *a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    v7[6] = v4;
    v7[7] = v5;
    uint64_t v6 = *(void **)(a4 + 24);
    v7[0] = MEMORY[0x1E4F143A8];
    v7[1] = 3221225472;
    v7[2] = sub_1B65F3408;
    v7[3] = &unk_1E61451D0;
    v7[4] = result;
    v7[5] = a2;
    return objc_msgSend_addCompletedHandler_(v6, a2, (uint64_t)v7, a4);
  }
  return result;
}

uint64_t sub_1B65F3408(uint64_t result)
{
  uint64_t v80 = *MEMORY[0x1E4F143B8];
  uint64_t v73 = result;
  uint64_t v1 = *(void *)(result + 32);
  if (*(_DWORD *)(v1 + 376))
  {
    unint64_t v2 = 0;
    uint64_t v72 = *(void *)(result + 32);
    do
    {
      *(void *)&double v3 = CFX::GPUResourceManager::getBuffer((CFX::GPUResourceManager *)*(void *)(*(void *)(v73 + 40) + 24), (const CFX::RG::Resource *)*(void *)(*(void *)(v1 + 384) + 8 * v2), v78).n128_u64[0];
      uint64_t v7 = objc_msgSend_contents(v78[0], v4, v5, v6, v3);
      uint64_t v8 = (float *)(v7 + ((unint64_t)v78[1] & 0xFFFFFFFFFFFFFFFCLL));
      sub_1B63F2F54(0, @"Info: Irradiance: %f, %f, %f", v9, v10, v11, v12, v13, v14, COERCE__INT64(*v8));
      uint64_t v17 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v1 + 392), v15, v2, v16);
      uint64_t v21 = objc_msgSend_nodeRef(v17, v18, v19, v20);
      uint64_t v24 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v1 + 392), v22, v2, v23);
      unsigned int v28 = objc_msgSend_light(v24, v25, v26, v27);
      uint64_t v32 = objc_msgSend_lightRef(v28, v29, v30, v31);
      long long v74 = 0u;
      long long v75 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      uint64_t v33 = *(void **)(v1 + 400);
      uint64_t v35 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v34, (uint64_t)&v74, (uint64_t)v79, 16);
      if (v35)
      {
        uint64_t v39 = v35;
        uint64_t v40 = *(void *)v75;
        do
        {
          for (uint64_t i = 0; i != v39; ++i)
          {
            if (*(void *)v75 != v40) {
              objc_enumerationMutation(v33);
            }
            int v42 = *(void **)(*((void *)&v74 + 1) + 8 * i);
            uint64_t v43 = objc_msgSend_light(v42, v36, v37, v38);
            uint64_t v47 = (float32x4_t *)objc_msgSend_lightRef(v43, v44, v45, v46);
            uint64_t v51 = objc_msgSend_nodeRef(v42, v48, v49, v50);
            sub_1B6497EA0(v32, v21, v47, v51, 3, (uint64_t)v8, v52, v53);
          }
          uint64_t v39 = objc_msgSend_countByEnumeratingWithState_objects_count_(v33, v36, (uint64_t)&v74, (uint64_t)v79, 16);
        }
        while (v39);
      }
      uint64_t v54 = v78[2];
      if (v54 != (void *)CFX::ConstantBufferAlignSize((CFX *)0x6C)) {
        sub_1B63F2F54(17, @"Assertion '%s' failed. MTLBuffer containing the SH coefficients has not the expected size", v56, v57, v58, v59, v60, v61, (uint64_t)"bufferView.length == CFX::ConstantBufferAlignSize((shOrder * shOrder) * 3 * sizeof(float))");
      }
      uint64_t v62 = objc_msgSend_dataWithBytes_length_(MEMORY[0x1E4F1C9B8], v55, (uint64_t)v8, 108);
      uint64_t v1 = v72;
      long long v65 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(v72 + 392), v63, v2, v64);
      int v69 = objc_msgSend_light(v65, v66, v67, v68);
      __n128 result = objc_msgSend_set_sphericalHarmonics_(v69, v70, v62, v71);
      ++v2;
    }
    while (v2 < *(unsigned int *)(v72 + 376));
  }
  return result;
}

uint64_t sub_1B65F3640(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_requiresSecureCoding(a1, a2, a3, a4))
  {
    return MEMORY[0x1F4181798](a1, sel_decodeArrayOfObjectsOfClass_forKey_, a3, a4);
  }
  else
  {
    uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v8 = objc_opt_class();
    uint64_t v12 = objc_msgSend_setWithObjects_(v7, v9, v8, v10, a3, 0);
    return objc_msgSend_decodeObjectOfClasses_forKey_(a1, v11, v12, a4);
  }
}

uint64_t sub_1B65F36F0(void *a1, const char *a2, void *a3, uint64_t a4)
{
  if (objc_msgSend_requiresSecureCoding(a1, a2, (uint64_t)a3, a4))
  {
    return MEMORY[0x1F4181798](a1, sel_decodeArrayOfObjectsOfClasses_forKey_, a3, a4);
  }
  else
  {
    uint64_t v7 = objc_opt_class();
    uint64_t v11 = objc_msgSend_setByAddingObject_(a3, v8, v7, v9);
    return objc_msgSend_decodeObjectOfClasses_forKey_(a1, v10, v11, a4);
  }
}

uint64_t sub_1B65F3788(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v16[2] = *MEMORY[0x1E4F143B8];
  uint64_t v7 = (void *)MEMORY[0x1E4F1CAD0];
  v16[0] = objc_opt_class();
  v16[1] = a3;
  uint64_t v9 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v8, (uint64_t)v16, 2);
  uint64_t v12 = objc_msgSend_setWithArray_(v7, v10, v9, v11);
  uint64_t v14 = objc_msgSend_decodeObjectOfClasses_forKey_(a1, v13, v12, a4);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return v14;
  }
  else {
    return 0;
  }
}

uint64_t sub_1B65F3858(void *a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v7 = objc_opt_class();
  uint64_t v10 = objc_msgSend_setByAddingObject_(a3, v8, v7, v9);
  uint64_t v12 = objc_msgSend_decodeObjectOfClasses_forKey_(a1, v11, v10, a4);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return v12;
  }
  else {
    return 0;
  }
}

uint64_t sub_1B65F38D0(void *a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (objc_msgSend_requiresSecureCoding(a1, a2, a3, a4))
  {
    return MEMORY[0x1F4181798](a1, sel_decodeDictionaryWithKeysOfClass_objectsOfClass_forKey_, a3, a4);
  }
  else
  {
    uint64_t v9 = (void *)MEMORY[0x1E4F1CAD0];
    uint64_t v10 = objc_opt_class();
    uint64_t v14 = objc_msgSend_setWithObjects_(v9, v11, v10, v12, a3, a4, 0);
    return objc_msgSend_decodeObjectOfClasses_forKey_(a1, v13, v14, a5);
  }
}

uint64_t sub_1B65F3998(void *a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  if (objc_msgSend_requiresSecureCoding(a1, a2, (uint64_t)a3, a4))
  {
    return MEMORY[0x1F4181798](a1, sel_decodeDictionaryWithKeysOfClasses_objectsOfClasses_forKey_, a3, a4);
  }
  else
  {
    uint64_t v11 = objc_msgSend_setByAddingObjectsFromSet_(a3, v9, a4, v10);
    uint64_t v12 = objc_opt_class();
    uint64_t v16 = objc_msgSend_setByAddingObject_(v11, v13, v12, v14);
    return objc_msgSend_decodeObjectOfClasses_forKey_(a1, v15, v16, a5);
  }
}

uint64_t sub_1B65F3A48(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v18[3] = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (void *)MEMORY[0x1E4F1CAD0];
  v18[0] = objc_opt_class();
  v18[1] = a3;
  v18[2] = a4;
  uint64_t v11 = objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], v10, (uint64_t)v18, 3);
  uint64_t v14 = objc_msgSend_setWithArray_(v9, v12, v11, v13);
  uint64_t v16 = objc_msgSend_decodeObjectOfClasses_forKey_(a1, v15, v14, a5);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return v16;
  }
  else {
    return 0;
  }
}

uint64_t sub_1B65F3B24(void *a1, const char *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = objc_msgSend_setByAddingObjectsFromSet_(a3, a2, a4, a4);
  uint64_t v8 = objc_opt_class();
  uint64_t v11 = objc_msgSend_setByAddingObject_(v7, v9, v8, v10);
  uint64_t v13 = objc_msgSend_decodeObjectOfClasses_forKey_(a1, v12, v11, a5);
  objc_opt_class();
  if (objc_opt_isKindOfClass()) {
    return v13;
  }
  else {
    return 0;
  }
}

void sub_1B65F3BA8(NSMapTable *a1, uint64_t a2, uint64_t a3)
{
  memset(&enumerator, 0, sizeof(enumerator));
  NSEnumerateMapTable(&enumerator, a1);
  value = 0;
  key = 0;
  do
  {
    if (!NSNextMapEnumeratorPair(&enumerator, &key, &value)) {
      break;
    }
    char v4 = 0;
    (*(void (**)(uint64_t, void *, void *, char *))(a3 + 16))(a3, key, value, &v4);
  }
  while (!v4);
  NSEndMapTableEnumeration(&enumerator);
}

void *sub_1B65F3C24(uint64_t a1, uint64_t a2)
{
  __n128 result = (void *)sub_1B6DABD0C(a1, "PathTracer");
  *__n128 result = &unk_1F0FB2D90;
  result[3] = a2;
  return result;
}

uint64_t sub_1B65F3C70@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v4[1] = *MEMORY[0x1E4F143B8];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v4, *(_WORD *)(a1 + 8), 9273, 1656467160);
  return sub_1B63D0050(a2, v4, 1);
}

uint64_t sub_1B65F3CEC@<X0>(uint64_t a1@<X8>)
{
  v8[1] = *MEMORY[0x1E4F143B8];
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v3, 53296, 9273, 1893898584);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v4, 53296, 9273, 1490954098);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v5, 53296, 9273, -287492009);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v6, 53296, 9273, 1251382574);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v7, 53296, 9273, -1170177454);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)v8, 53296, 9273, -797957750);
  return sub_1B63D0050(a1, &v3, 6);
}

unint64_t sub_1B65F3DE4(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  unint64_t v3 = *(unsigned __int16 *)(a1 + 8);
  uint64_t v4 = *a3;
  if (v4)
  {
    uint64_t v5 = (uint64_t *)*((void *)a3 + 1);
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v10 = v7;
      uint64_t v8 = CFX::RG::ResourceIdentifier::id((CFX::RG::ResourceIdentifier *)&v10);
      unint64_t v3 = 0x9DDFEA08EB382D69
         * ((0x9DDFEA08EB382D69
           * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) ^ ((0x9DDFEA08EB382D69 * (v3 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v3)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v3)))) >> 47));
      v6 -= 8;
    }
    while (v6);
  }
  return v3;
}

void sub_1B65F3E6C(uint64_t a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  sub_1B6447FBC(*(void *)(a1 + 24), 1);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v26, 9273, 9273, 1251382574);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v27, v26);
  uint64_t v6 = sub_1B63EF7BC((uint64_t)a3, (uint64_t)"PathTracer input emission", (CFX::RG::ResourceReference *)v27);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v24, 9273, 9273, 1490954098);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v25, v24);
  uint64_t v7 = sub_1B63EF7BC((uint64_t)a3, (uint64_t)"PathTracer input normals", (CFX::RG::ResourceReference *)v25);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v22, 9273, 9273, 1893898584);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v23, v22);
  uint64_t v8 = sub_1B63EF7BC((uint64_t)a3, (uint64_t)"PathTracer input albedo", (CFX::RG::ResourceReference *)v23);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v20, 9273, 9273, -287492009);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v21, v20);
  uint64_t v9 = sub_1B63EF7BC((uint64_t)a3, (uint64_t)"PathTracer input roughmetalTarget", (CFX::RG::ResourceReference *)v21);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v18, 9273, 9273, -1170177454);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v19, v18);
  uint64_t v10 = sub_1B63EF7BC((uint64_t)a3, (uint64_t)"PathTracer input velocityTarget", (CFX::RG::ResourceReference *)v19);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v16, 9273, 9273, -797957750);
  CFX::RG::ResourceReference::ResourceReference((uint64_t)v17, v16);
  uint64_t v11 = sub_1B63EF7BC((uint64_t)a3, (uint64_t)"PathTracer input depthTarget", (CFX::RG::ResourceReference *)v17);
  v15[0] = *(void *)(a1 + 24);
  v15[1] = CFX::RG::ResourceIdentifier::finalColor(v11);
  uint64_t v12 = (uint64_t *)sub_1B6539584(a3, a2, v15);
  sub_1B6539564(v12, v11, 0);
  sub_1B6539564(v12, v7, 1u);
  sub_1B6539564(v12, v8, 2u);
  sub_1B6539564(v12, v9, 3u);
  sub_1B6539564(v12, v6, 4u);
  sub_1B6539564(v12, v10, 7u);
  CFX::RG::ResourceIdentifier::ResourceIdentifier((uint64_t)&v14, *(_WORD *)(a1 + 8), 21755, 1656467160);
  unint64_t v13 = sub_1B6539570((uint64_t)v12);
  CFX::RG::RenderGraphBuilder::publishResourceReference((uint64_t)a3, v14, v13, (uint64_t)v12);
}

void sub_1B65F40E8()
{
}

uint64_t sub_1B65F40FC(uint64_t a1)
{
  if (!off_1E9DDBD58
    || ((v2 = off_1E9DDBD58(a1, qword_1E9DDBD68), unint64_t v3 = off_1E9DDBD60, v2) ? (v4 = off_1E9DDBD60 == 0) : (v4 = 1), v4))
  {
    id v5 = objc_alloc(MEMORY[0x1E4F1C9B8]);
    return MEMORY[0x1F4181798](v5, sel_initWithContentsOfURL_options_error_, a1, 0);
  }
  else
  {
    uint64_t v6 = qword_1E9DDBD68;
    return v3(a1, v6);
  }
}

CGImageSourceRef sub_1B65F41A8(const __CFURL *a1)
{
  if (off_1E9DDBD58)
  {
    if (off_1E9DDBD58(a1, qword_1E9DDBD68) && off_1E9DDBD60 != 0)
    {
      CFDataRef v4 = (const __CFData *)off_1E9DDBD60(a1, qword_1E9DDBD68);
      if (v4)
      {
        CFDataRef v5 = v4;
        CGImageSourceRef v6 = CGImageSourceCreateWithData(v4, 0);
        CFRelease(v5);
        return v6;
      }
      return 0;
    }
  }
  if (!sub_1B65D7E88(a1)) {
    return 0;
  }

  return CGImageSourceCreateWithURL(a1, 0);
}

void sub_1B65F425C()
{
}

void sub_1B65F42B4(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9B6D80](v1, 0x10F0C403D4FC5B6);
  _Unwind_Resume(a1);
}

uint64_t sub_1B65F42D8(uint64_t result)
{
  if (result)
  {
    sub_1B65F5334(result);
    JUMPOUT(0x1BA9B6D80);
  }
  return result;
}

void sub_1B65F4318(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFDataRef v5 = *(void **)(a1 + 56);
  unsigned int v6 = sub_1B6447B50((uint64_t)v5, a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"CRenderGraphEngineContextRenderFrame", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 699, v6 | 0x300000000);
  sub_1B65F4454(a1, v7, v8, v9);
  if (sub_1B65F44E4((void *)a1))
  {
    int v17 = sub_1B6446A8C((uint64_t)v5, v10, v11, v12, v13, v14, v15, v16);
    int v25 = sub_1B6446B60((uint64_t)v5, v18, v19, v20, v21, v22, v23, v24);
    if (!*(unsigned char *)(a1 + 368) || (uint64_t v28 = *(void *)(a1 + 664)) == 0)
    {
      if (v17 == 1)
      {
        uint64_t v28 = a1 + 440;
      }
      else if (v25)
      {
        uint64_t v28 = a1 + 496;
      }
      else if (v17 == 3)
      {
        uint64_t v28 = a1 + 608;
      }
      else if (v17 == 2)
      {
        uint64_t v28 = a1 + 552;
      }
      else
      {
        uint64_t v28 = a1 + 384;
      }
    }
    sub_1B65F5458(a1, v28, v26, v27);
  }
  else
  {
    sub_1B65F56BC(a1, v10, v11, v12, v13, v14, v15, v16);
    CFX::RG::RenderGraph::resolveResourceDescriptors(*(const CFX::RG::Resource ****)(a1 + 48), (CFX::GPUResourceManager **)(a1 + 112));
  }
  if (*(void *)(a1 + 48))
  {
    sub_1B6447C38(v5, v29, v30, v31, v32, v33, v34, v35);
    sub_1B65F4544(a1, v36, v37, v38);
    sub_1B65F45BC(a1, v39, v40, v41);
    sub_1B65F4630((void *)a1, v42, v43, v44);
  }

  prof_endFlame();
}

void sub_1B65F443C(_Unwind_Exception *a1)
{
}

void sub_1B65F4454(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = sub_1B6447B50(*(void *)(a1 + 56), a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Resources nextFrame", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 155, v5 | 0x300000000);
  if (*(unsigned char *)(a1 + 685))
  {
    *(unsigned char *)(a1 + 685) = 0;
    uint64_t v6 = *(void *)(a1 + 672);
    if (v6) {
      ++*(void *)(v6 + 48);
    }
  }
  CFX::RG::RenderGraphContext::nextFrame((CFX::RG::RenderGraphContext *)(a1 + 112));

  prof_endFlame();
}

void sub_1B65F44D4(_Unwind_Exception *a1)
{
}

uint64_t sub_1B65F44E4(void *a1)
{
  int v2 = (CFX::RG::RenderGraphProvider *)a1[84];
  if (v2 && *((unsigned char *)v2 + 41))
  {
    uint64_t v3 = a1[6];
    unint64_t v4 = CFX::RG::RenderGraphProvider::hash(v2, (CFX::RG::RenderGraphContext *)(a1 + 14));
    if (v3 && v4 && a1[5] == v4) {
      return 0;
    }
    a1[5] = v4;
  }
  return 1;
}

void sub_1B65F4544(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = sub_1B6447B50(*(void *)(a1 + 56), a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"setup", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 323, v5 | 0x300000000);
  CFX::RG::RenderGraph::execute(*(void *)(a1 + 48), a1 + 112, 0);

  prof_endFlame();
}

void sub_1B65F45AC(_Unwind_Exception *a1)
{
}

void sub_1B65F45BC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  unsigned int v5 = sub_1B6447B50(*(void *)(a1 + 56), a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"compile", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 329, v5 | 0x300000000);
  sub_1B65F580C(a1, *(void *)(a1 + 48));

  prof_endFlame();
}

void sub_1B65F4620(_Unwind_Exception *a1)
{
}

void sub_1B65F4630(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B65F590C(a1, a1[6], a3, a4);
  unsigned int v8 = sub_1B6447B50(a1[7], v5, v6, v7);
  prof_beginFlameSmallData((uint64_t)"Destroy graph", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 341, v8 | 0x300000000);
  if (!a1[44])
  {
    sub_1B65F5414(*(void *)a1[6], *(void **)(a1[6] + 8), (CFX::RG::RenderGraph *)a1[6]);
    a1[6] = 0;
  }

  prof_endFlame();
}

void sub_1B65F46A8(_Unwind_Exception *a1)
{
}

void sub_1B65F46B8(uint64_t a1)
{
}

uint64_t sub_1B65F46C0(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 672);
  if (v1) {
    ++*(void *)(v1 + 48);
  }
  return result;
}

id sub_1B65F46D8(uint64_t a1, int a2)
{
  return CFX::GPUResourceManager::getRegisteredFrameTextureNamed(*(CFX::GPUResourceManager **)(a1 + 136), a2);
}

id sub_1B65F46E0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = (unsigned __int8 *)objc_msgSend_UTF8String(a2, (const char *)a2, a3, a4);
  unsigned int v9 = objc_msgSend_lengthOfBytesUsingEncoding_(a2, v7, 4, v8);
  if (v6)
  {
    unint64_t v10 = 0xC6A4A7935BD1E995 * v9;
    if (v9 >= 8)
    {
      uint64_t v11 = v9 >> 3;
      uint64_t v12 = &v6[8 * v11];
      uint64_t v13 = 8 * v11;
      do
      {
        uint64_t v14 = *(void *)v6;
        v6 += 8;
        unint64_t v10 = 0xC6A4A7935BD1E995
            * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v14) ^ ((0xC6A4A7935BD1E995 * v14) >> 47))) ^ v10);
        v13 -= 8;
      }
      while (v13);
      uint64_t v6 = v12;
    }
    switch(v9 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v10 ^= (unint64_t)v6[6] << 48;
LABEL_8:
        v10 ^= (unint64_t)v6[5] << 40;
LABEL_9:
        v10 ^= (unint64_t)v6[4] << 32;
LABEL_10:
        v10 ^= (unint64_t)v6[3] << 24;
LABEL_11:
        v10 ^= (unint64_t)v6[2] << 16;
LABEL_12:
        v10 ^= (unint64_t)v6[1] << 8;
LABEL_13:
        unint64_t v10 = 0xC6A4A7935BD1E995 * (v10 ^ *v6);
        break;
      default:
        break;
    }
    int v15 = (((0xC6A4A7935BD1E995 * (v10 ^ (v10 >> 47))) >> 32) >> 15) ^ (1540483477 * (v10 ^ (v10 >> 47)));
  }
  else
  {
    int v15 = 0;
  }
  uint64_t v16 = *(CFX::GPUResourceManager **)(a1 + 136);

  return CFX::GPUResourceManager::getRegisteredFrameTextureNamed(v16, v15);
}

id sub_1B65F482C(uint64_t a1, const CFX::RG::Resource *a2)
{
  return CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a1 + 136), a2);
}

double sub_1B65F4834(uint64_t a1, uint64_t a2)
{
  sub_1B6DA9CE4(a2, (uint64_t)&v4);
  double result = *(double *)&v4;
  *(_OWORD *)(a1 + 16) = v4;
  *(void *)(a1 + 32) = v5;
  return result;
}

void sub_1B65F4878(uint64_t a1, uint64_t a2, void *a3)
{
  if (a2)
  {
    uint64_t v5 = (CFX::RG::RenderGraphProvider *)sub_1B63D45F0(*(void *)(a1 + 56), a1 + 112, a2, a3);
    if (*((unsigned char *)v5 + 40))
    {
      sub_1B65F4940(a1, (uint64_t)v5);
    }
    else
    {
      CFX::RG::RenderGraphProvider::~RenderGraphProvider(v5);
      free(v15);
    }
  }
  else
  {
    sub_1B65F4940(a1, 0);
    if (a3)
    {
      uint64_t v13 = (id *)sub_1B644558C(*(void *)(a1 + 56), v6, v7, v8, v9, v10, v11, v12);
      uint64_t v14 = sub_1B6583674(v13);
      sub_1B68BD33C(v14, a3);
    }
  }
}

void sub_1B65F4940(uint64_t a1, uint64_t a2)
{
  long long v4 = *(CFX::RG::RenderGraphProvider **)(a1 + 664);
  if (v4)
  {
    CFX::RG::RenderGraphProvider::~RenderGraphProvider(v4);
    free(v5);
  }
  *(void *)(a1 + 664) = a2;
  *(_DWORD *)(a1 + 680) = 0;
  *(void *)(a1 + 672) = 0;
}

void sub_1B65F4980(uint64_t a1, uint64_t *a2)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v11 = 0;
  if (CFX::RG::RenderGraphProvider::resolve((uint64_t)a2, a1 + 112, (uint64_t)__p)) {
    sub_1B65F4940(a1, (uint64_t)a2);
  }
  else {
    sub_1B63F2F54(16, @"Error: Unable to resolve custom provider %s: %s", v4, v5, v6, v7, v8, v9, *a2);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1B65F4A14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1B65F4A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = (void *)sub_1B6445900(*(void *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v13 = objc_msgSend__finalRenderTexture(v9, v10, v11, v12);
  if (v13)
  {
    uint64_t v17 = v13;
    uint64_t v18 = 0;
    uint64_t v19 = *(void **)(a1 + 96);
    do
    {
      uint64_t v20 = objc_msgSend_colorAttachments(v19, v14, v15, v16);
      uint64_t v23 = objc_msgSend_objectAtIndexedSubscript_(v20, v21, v18, v22);
      objc_msgSend_setTexture_(v23, v24, 0, v25);
      uint64_t v29 = objc_msgSend_colorAttachments(v19, v26, v27, v28);
      uint64_t v32 = objc_msgSend_objectAtIndexedSubscript_(v29, v30, v18, v31);
      objc_msgSend_setResolveTexture_(v32, v33, 0, v34);
      ++v18;
    }
    while (v18 != 8);
    uint64_t v35 = objc_msgSend_depthAttachment(v19, v14, v15, v16);
    objc_msgSend_setTexture_(v35, v36, 0, v37);
    uint64_t v41 = objc_msgSend_depthAttachment(v19, v38, v39, v40);
    objc_msgSend_setResolveTexture_(v41, v42, 0, v43);
    uint64_t v47 = objc_msgSend_stencilAttachment(v19, v44, v45, v46);
    objc_msgSend_setTexture_(v47, v48, 0, v49);
    objc_msgSend_setRenderTargetArrayLength_(v19, v50, 0, v51);
    uint64_t v55 = objc_msgSend_colorAttachments(v19, v52, v53, v54);
    uint64_t v58 = objc_msgSend_objectAtIndexedSubscript_(v55, v56, 0, v57);
    objc_msgSend_setTexture_(v58, v59, v17, v60);
    uint64_t v64 = objc_msgSend_colorAttachments(v19, v61, v62, v63);
    uint64_t v67 = objc_msgSend_objectAtIndexedSubscript_(v64, v65, 0, v66);
    objc_msgSend_setStoreAction_(v67, v68, 1, v69);
    uint64_t v73 = objc_msgSend_colorAttachments(v19, v70, v71, v72);
    long long v76 = objc_msgSend_objectAtIndexedSubscript_(v73, v74, 0, v75);
    objc_msgSend_setLoadAction_(v76, v77, 2, v78);
    double v79 = sub_1B644780C(*(float32x4_t **)(a1 + 56));
    double v80 = *(float *)&v79;
    double v81 = *((float *)&v79 + 1);
    double v83 = v82;
    double v85 = v84;
    uint64_t v89 = objc_msgSend_colorAttachments(v19, v86, v87, v88);
    unsigned int v92 = objc_msgSend_objectAtIndexedSubscript_(v89, v90, 0, v91);
    objc_msgSend_setClearColor_(v92, v93, v94, v95, v80, v81, v83, v85);
    uint64_t v99 = objc_msgSend_currentCommandBuffer(v9, v96, v97, v98);
    uint64_t v103 = objc_msgSend_frameConstantBufferPool(v9, v100, v101, v102);
    unint64_t v119 = objc_alloc_init(RGCachedRenderCommandEncoder);
    objc_msgSend_setDeferredBindingEnabled_(v119, v104, 1, v105);
    uint64_t v118 = v99;
    objc_msgSend_loadWithCommandBuffer_renderPassDescriptor_(v119, v106, v99, (uint64_t)v19);
    uint64_t v120 = v103;
    int v116 = 1;
    char v117 = 1;
    char v121 = 0;
    objc_msgSend_setLabel_(v119, v107, @"Clear drawable", v108);
    sub_1B65F4C30((uint64_t)&v116, v109, v110, v111, v112, v113, v114, v115);
  }
}

void sub_1B65F4C1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1B65F4C30(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void **)(a1 + 16);
  if (!v9)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"_encoder != nil");
    uint64_t v9 = *(void **)(a1 + 16);
  }
  objc_msgSend_endEncoding(v9, a2, a3, a4);
  *(void *)(a1 + 8) = 0;
  uint64_t v12 = *(void **)(a1 + 16);

  return objc_msgSend_setEncoder_(v12, v10, 0, v11);
}

uint64_t sub_1B65F4CA0(uint64_t a1, uint64_t a2, void *a3)
{
  *(unsigned char *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = a2;
  id v6 = a3;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = &unk_1F0FB0F20;
  *(void *)(a1 + 80) = sub_1B653A10C((uint64_t)VFXMTLResourceManager, (uint64_t)a3);
  *(void *)(a1 + 88) = a3;
  *(void *)(a1 + 96) = objc_alloc_init(MEMORY[0x1E4F352E0]);
  *(void *)(a1 + 104) = objc_alloc_init(RGCachedComputeCommandEncoder);
  uint64_t v12 = sub_1B6446934(a2, @"maxInFlightFrameCount", 3, v7, v8, v9, v10, v11);
  CFX::RG::RenderGraphContext::RenderGraphContext(a1 + 112, a1 + 72, v12);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  *(_WORD *)(a1 + 368) = 1;
  *(void *)(a1 + 370) = 0x100010101010101;
  CFX::RG::RenderGraphProvider::RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 384));
  CFX::RG::RenderGraphProvider::RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 440));
  CFX::RG::RenderGraphProvider::RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 496));
  CFX::RG::RenderGraphProvider::RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 552));
  CFX::RG::RenderGraphProvider::RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 608));
  *(void *)(a1 + 678) = 0;
  *(_OWORD *)(a1 + 664) = 0u;
  sub_1B63D3E78(*(void *)(a1 + 56), (CFX::RG::RenderGraphProvider *)&v24);
  *(void *)(a1 + 384) = v24;
  sub_1B65F523C(a1 + 392, v25);
  sub_1B65F523C(a1 + 408, v26);
  *(_OWORD *)(a1 + 424) = v27;
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)&v24);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v23 = 0;
  if ((CFX::RG::RenderGraphProvider::resolve(a1 + 384, a1 + 112, (uint64_t)__p) & 1) == 0)
  {
    uint64_t v20 = __p;
    if (v23 < 0) {
      uint64_t v20 = (void **)__p[0];
    }
    uint64_t v21 = @"Error: Builtin forward rendergraph provider resolve failed: %s";
LABEL_24:
    sub_1B63F2F54(16, (uint64_t)v21, v13, v14, v15, v16, v17, v18, (uint64_t)v20);
    abort();
  }
  sub_1B63D411C(*(void *)(a1 + 56), (CFX::RG::RenderGraphProvider *)&v24);
  *(void *)(a1 + 440) = v24;
  sub_1B65F523C(a1 + 448, v25);
  sub_1B65F523C(a1 + 464, v26);
  *(_OWORD *)(a1 + 480) = v27;
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)&v24);
  if ((CFX::RG::RenderGraphProvider::resolve(a1 + 440, a1 + 112, (uint64_t)__p) & 1) == 0)
  {
    uint64_t v20 = __p;
    if (v23 < 0) {
      uint64_t v20 = (void **)__p[0];
    }
    uint64_t v21 = @"Error: Builtin pathTracer rendergraph provider resolve failed: %s";
    goto LABEL_24;
  }
  sub_1B63D4390(*(void *)(a1 + 56), (CFX::RG::RenderGraphProvider *)&v24);
  *(void *)(a1 + 496) = v24;
  sub_1B65F523C(a1 + 504, v25);
  sub_1B65F523C(a1 + 520, v26);
  *(_OWORD *)(a1 + 536) = v27;
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)&v24);
  if ((CFX::RG::RenderGraphProvider::resolve(a1 + 496, a1 + 112, (uint64_t)__p) & 1) == 0)
  {
    uint64_t v20 = __p;
    if (v23 < 0) {
      uint64_t v20 = (void **)__p[0];
    }
    uint64_t v21 = @"Error: Builtin stereo rendergraph provider resolve failed: %s";
    goto LABEL_24;
  }
  sub_1B63D4478(*(void *)(a1 + 56), (CFX::RG::RenderGraphProvider *)&v24);
  *(void *)(a1 + 552) = v24;
  sub_1B65F523C(a1 + 560, v25);
  sub_1B65F523C(a1 + 576, v26);
  *(_OWORD *)(a1 + 592) = v27;
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)&v24);
  if ((CFX::RG::RenderGraphProvider::resolve(a1 + 552, a1 + 112, (uint64_t)__p) & 1) == 0)
  {
    uint64_t v20 = __p;
    if (v23 < 0) {
      uint64_t v20 = (void **)__p[0];
    }
    uint64_t v21 = @"Error: Builtin holographic rendergraph provider resolve failed: %s";
    goto LABEL_24;
  }
  sub_1B63D427C(*(void *)(a1 + 56), (CFX::RG::RenderGraphProvider *)&v24);
  *(void *)(a1 + 608) = v24;
  sub_1B65F523C(a1 + 616, v25);
  sub_1B65F523C(a1 + 632, v26);
  *(_OWORD *)(a1 + 648) = v27;
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)&v24);
  if ((CFX::RG::RenderGraphProvider::resolve(a1 + 608, a1 + 112, (uint64_t)__p) & 1) == 0)
  {
    uint64_t v20 = __p;
    if (v23 < 0) {
      uint64_t v20 = (void **)__p[0];
    }
    uint64_t v21 = @"Error: Builtin hybrid renderer rendergraph provider resolve failed: %s";
    goto LABEL_24;
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  return a1;
}

void sub_1B65F5074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v23);
  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v22);
  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v21);
  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v20);
  CFX::RG::RenderGraphProvider::~RenderGraphProvider(v19);
  uint64_t v25 = *(std::__shared_weak_count **)(v17 + 360);
  if (v25) {
    sub_1B65F52C0(v25);
  }
  CFX::RG::RenderGraphContext::~RenderGraphContext(v18);
  _Unwind_Resume(a1);
}

void sub_1B65F513C()
{
}

id sub_1B65F5150(uint64_t a1, _OWORD *a2)
{
  id v4 = objc_alloc_init(MEMORY[0x1E4F35330]);
  long long v5 = a2[3];
  v10[2] = a2[2];
  v10[3] = v5;
  v10[4] = a2[4];
  long long v6 = a2[1];
  v10[0] = *a2;
  v10[1] = v6;
  RGTextureDescriptorFillMTLDescriptor((unsigned __int16 *)v10, v4);
  return (id)objc_msgSend_newTextureWithDescriptor_(*(void **)(a1 + 8), v7, (uint64_t)v4, v8);
}

id sub_1B65F51CC(uint64_t a1, uint64_t a2)
{
  int v2 = (void *)sub_1B653D7E8(*(void *)(a1 + 8), *(const char **)a2, *(void *)(a2 + 8));

  return v2;
}

uint64_t sub_1B65F5200(uint64_t a1)
{
  uint64_t v1 = (void *)sub_1B653EFAC(*(void *)(a1 + 8));

  return objc_msgSend_frameworkLibrary(v1, v2, v3, v4);
}

uint64_t sub_1B65F522C(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uint64_t sub_1B65F5234(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_supportsMemorylessRenderTargets(*(void **)(a1 + 16), a2, a3, a4);
}

uint64_t sub_1B65F523C(uint64_t a1, void *a2)
{
  if (a2 != (void *)a1)
  {
    if (*(_DWORD *)(a1 + 4))
    {
      free(*(void **)(a1 + 8));
      *(void *)(a1 + 8) = a1 + 16;
    }
    *(void *)a1 = *a2;
    uint64_t v4 = (void *)a2[1];
    if (v4 == a2 + 2) {
      memcpy((void *)(a1 + 16), v4, 8 * *(unsigned int *)a2);
    }
    else {
      *(void *)(a1 + 8) = v4;
    }
    *a2 = 0;
    a2[1] = a2 + 2;
  }
  return a1;
}

void sub_1B65F52C0(std::__shared_weak_count *a1)
{
  if (!atomic_fetch_add(&a1->__shared_owners_, 0xFFFFFFFFFFFFFFFFLL))
  {
    ((void (*)(std::__shared_weak_count *))a1->__on_zero_shared)(a1);
    std::__shared_weak_count::__release_weak(a1);
  }
}

uint64_t sub_1B65F5334(uint64_t a1)
{
  int v2 = *(CFX::RG::RenderGraph **)(a1 + 48);
  if (v2) {
    sub_1B65F5414(*(void *)v2, *((void **)v2 + 1), v2);
  }
  uint64_t v3 = *(CFX::RG::RenderGraphProvider **)(a1 + 664);
  if (v3)
  {
    CFX::RG::RenderGraphProvider::~RenderGraphProvider(v3);
    free(v4);
  }

  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 608));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 552));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 496));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 440));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(a1 + 384));
  long long v5 = *(std::__shared_weak_count **)(a1 + 360);
  if (v5) {
    sub_1B65F52C0(v5);
  }
  CFX::RG::RenderGraphContext::~RenderGraphContext((CFX::RG::RenderGraphContext *)(a1 + 112));
  return a1;
}

void sub_1B65F53CC(_Unwind_Exception *a1)
{
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(v1 + 76));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(v1 + 69));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(v1 + 62));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(v1 + 55));
  CFX::RG::RenderGraphProvider::~RenderGraphProvider((CFX::RG::RenderGraphProvider *)(v1 + 48));
  uint64_t v3 = (std::__shared_weak_count *)v1[45];
  if (v3) {
    sub_1B65F52C0(v3);
  }
  CFX::RG::RenderGraphContext::~RenderGraphContext((CFX::RG::RenderGraphContext *)(v1 + 14));
  _Unwind_Resume(a1);
}

void sub_1B65F5414(int a1, void *a2, CFX::RG::RenderGraph *this)
{
  CFX::RG::RenderGraph::~RenderGraph(this);
  uint64_t v5 = v4;
  if (a2) {
    sub_1B63C89D4(a2, &v5);
  }
}

void sub_1B65F5458(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = sub_1B6447B50(*(void *)(a1 + 56), (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"loadGraphProvider", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 171, v6 | 0x300000000);
  CFX::RG::RenderGraphContext::clearReferenceDescriptors((void **)(a1 + 112));
  CFX::GPUResourceManager::clearResourcesMapping(*(void ***)(a1 + 136));
  uint64_t v7 = *(CFX::RG::RenderGraph **)(a1 + 48);
  if (v7) {
    sub_1B65F5414(*(void *)v7, *((void **)v7 + 1), v7);
  }
  uint64_t v8 = *(void *)(a1 + 664);
  if (*(unsigned char *)(a2 + 41)) {
    CFX::RG::RenderGraphContext::createPersistentRenderGraphBuilder((CFX::RG::RenderGraphContext *)(a1 + 112), (uint64_t *)__p);
  }
  uint64_t v9 = *(void *)(a1 + 112);
  uint64_t v10 = *(void *)(a1 + 120);
  uint64_t Aligned = CScratchAllocatorAllocateAligned(v9, 328, 8);
  CFX::RG::RenderGraphBuilder::RenderGraphBuilder(Aligned, v9, v10);
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 360);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  if (v12) {
    sub_1B65F52C0(v12);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v33 = 0;
  uint64_t v13 = CFX::RG::RenderGraphProvider::encodeIfNeeded(a2, a1 + 112, Aligned, (uint64_t)__p);
  uint64_t v21 = v13;
  uint64_t v22 = *(unsigned int *)(a2 + 8);
  if (v22)
  {
    uint64_t v23 = *(void *)(a2 + 16);
    uint64_t v24 = 8 * v22;
    while (*(_WORD *)(*(void *)v23 + 8) != 14151)
    {
      v23 += 8;
      v24 -= 8;
      if (!v24) {
        goto LABEL_11;
      }
    }
    id v25 = *(id *)(*(void *)v23 + 56);
    if (!v21) {
      goto LABEL_14;
    }
LABEL_12:
    *(_DWORD *)(a1 + 680) = 0;
    uint64_t v26 = a2;
    goto LABEL_21;
  }
LABEL_11:
  id v25 = 0;
  if (v13) {
    goto LABEL_12;
  }
LABEL_14:
  long long v27 = __p;
  if (v33 < 0) {
    long long v27 = (void **)__p[0];
  }
  sub_1B63F2F54(16, @"Error: Unable to build graph %s\n", v15, v16, v17, v18, v19, v20, (uint64_t)v27);
  *(void *)(a1 + 40) = 0;
  uint64_t v28 = *(std::__shared_weak_count **)(a1 + 360);
  *(void *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 0;
  if (v28) {
    sub_1B65F52C0(v28);
  }
  uint64_t v26 = 0;
  unsigned int v29 = *(_DWORD *)(a1 + 680) + 1;
  *(_DWORD *)(a1 + 680) = v29;
  if (v8 == a2 && v29 >= 3)
  {
    sub_1B65F4940(a1, 0);
    uint64_t v26 = 0;
  }
LABEL_21:
  *(void *)(a1 + 672) = v26;
  *(void *)(a1 + 48) = v21;
  if (v25)
  {
    uint64_t v30 = (id *)sub_1B644558C(*(void *)(a1 + 56), v14, v15, v16, v17, v18, v19, v20);
    uint64_t v31 = sub_1B6583674(v30);
    sub_1B68BD33C(v31, v25);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  prof_endFlame();
}

void sub_1B65F567C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  prof_endFlame();
  _Unwind_Resume(a1);
}

void sub_1B65F56BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v36 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (void *)sub_1B6445900(*(void *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
  sub_1B64E0788(&v31, v9, v10, v11);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  RGTextureDescriptorMake2D(v32, v33, v34, (uint64_t)&v25);
  *((void *)&v27 + 1) = v35;
  uint64_t v12 = (CFX::RG::ResourceIdentifier *)CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v30, &v25);
  uint64_t v13 = *(void *)(a1 + 352);
  uint64_t v14 = CFX::RG::ResourceIdentifier::finalColor(v12);
  CFX::RG::RenderGraphBuilder::findPublishedResource(v13, v14);
  uint64_t v16 = (CFX::RG::ResourceIdentifier *)CFX::RG::Resource::textureDesc(v15);
  long long v17 = v30[1];
  *(_OWORD *)uint64_t v16 = v30[0];
  *((_OWORD *)v16 + 1) = v17;
  long long v18 = v30[5];
  long long v20 = v30[2];
  long long v19 = v30[3];
  *((_OWORD *)v16 + 4) = v30[4];
  *((_OWORD *)v16 + 5) = v18;
  *((_OWORD *)v16 + 2) = v20;
  *((_OWORD *)v16 + 3) = v19;
  long long v21 = v30[9];
  long long v23 = v30[6];
  long long v22 = v30[7];
  *((_OWORD *)v16 + 8) = v30[8];
  *((_OWORD *)v16 + 9) = v21;
  *((_OWORD *)v16 + 6) = v23;
  *((_OWORD *)v16 + 7) = v22;
  uint64_t v24 = CFX::RG::ResourceIdentifier::finalColor(v16);
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v25 = 0u;
  RGTextureDescriptorMake2D(v32, v33, v34, (uint64_t)&v25);
  *((void *)&v27 + 1) = v35;
  CFX::RG::TextureDescriptorReference::TextureDescriptorReference(v30, &v25);
  CFX::RG::RenderGraphContext::registerReferenceDescriptor(a1 + 112, v24, (unsigned __int16 *)v30);
}

uint64_t sub_1B65F580C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(unsigned int **)(a1 + 128);
  uint64_t v8 = a2;
  uint64_t v5 = &v8;
  uint64_t v6 = a1;
  sub_1B65F5868(&v7, (uint64_t)&v5);
  uint64_t v3 = *(unsigned int **)(a1 + 128);
  uint64_t v6 = a1;
  uint64_t v7 = v3;
  uint64_t v5 = &v8;
  return sub_1B65F58B8(&v7, (uint64_t)&v5);
}

uint64_t sub_1B65F5868(unsigned int **a1, uint64_t a2)
{
  CStackAllocatorPushFrame(*a1);
  CFX::RG::AllocateResources(**(CFX::RG ***)a2, (CFX::RG::RenderGraph *)(*(void *)(a2 + 8) + 112), v4);
  uint64_t v5 = *a1;

  return CStackAllocatorPopFrame((uint64_t)v5);
}

uint64_t sub_1B65F58B8(unsigned int **a1, uint64_t a2)
{
  CStackAllocatorPushFrame(*a1);
  CFX::RG::RenderGraph::execute(**(void **)a2, *(void *)(a2 + 8) + 112, 1);
  uint64_t v4 = *a1;

  return CStackAllocatorPopFrame((uint64_t)v4);
}

void sub_1B65F590C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = sub_1B6447B50(a1[7], (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Execute", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 430, v6 | 0x300000000);
  if (*((unsigned char *)a1 + 684) || *(unsigned char *)a1)
  {
    CFX::RG::RenderGraph::log((CFX::RG::RenderGraph *)a2, __p);
    if (v22 >= 0) {
      uint64_t v7 = __p;
    }
    else {
      uint64_t v7 = (void **)__p[0];
    }
    printf("%s", (const char *)v7);
    if (v22 < 0) {
      operator delete(__p[0]);
    }
    *((unsigned char *)a1 + 684) = 0;
  }
  uint64_t v8 = *(unsigned int *)(a2 + 256);
  if (v8)
  {
    uint64_t v9 = *(void *)(a2 + 264);
    uint64_t v10 = v9 + 32 * v8;
    do
    {
      uint64_t v11 = *(unsigned int *)(v9 + 16);
      if (v11)
      {
        uint64_t v12 = *(uint64_t **)(v9 + 24);
        uint64_t v13 = 8 * v11;
        do
        {
          uint64_t v14 = *v12;
          sub_1B65F5AAC(a1, *v12);
          switch(*(unsigned char *)(v14 + 344))
          {
            case 1:
              sub_1B65F5B98((uint64_t)a1, v14, v15, v16, v17, v18, v19, v20);
              break;
            case 2:
              sub_1B65F5C30((uint64_t)a1, (uint64_t *)v14, v15, v16, v17, v18, v19, v20);
              break;
            case 3:
              sub_1B65F5D90((uint64_t)a1, (_DWORD *)a2, (uint64_t *)v14, v16, v17, v18, v19, v20);
              break;
            case 4:
              sub_1B65F5CDC((uint64_t)a1, (uint64_t *)v14, v15, v16, v17, v18, v19, v20);
              break;
            default:
              break;
          }
          ++v12;
          v13 -= 8;
        }
        while (v13);
      }
      v9 += 32;
    }
    while (v9 != v10);
  }
  prof_endFlame();
}

void sub_1B65F5A88(_Unwind_Exception *a1)
{
}

id sub_1B65F5AAC(id result, uint64_t a2)
{
  uint64_t v3 = (CFX::GPUResourceManager **)result;
  uint64_t v4 = *(unsigned int *)(a2 + 168);
  if (v4)
  {
    uint64_t v5 = *(CFX::RG::Resource ***)(a2 + 176);
    uint64_t v6 = 8 * v4;
    do
    {
      uint64_t v7 = *v5;
      double result = (id)CFX::RG::Resource::isExternal(*v5);
      if (result)
      {
        double result = CFX::GPUResourceManager::getTexture(v3[17], v7);
        if (!result)
        {
          CFX::GPUResourceManager::allocate(v3[17], v7, (const CFX::RG::RenderGraphContext *)(v3 + 14));
          double result = CFX::GPUResourceManager::getTexture(v3[17], v7);
        }
      }
      ++v5;
      v6 -= 8;
    }
    while (v6);
  }
  uint64_t v8 = *(unsigned int *)(a2 + 72);
  if (v8)
  {
    uint64_t v9 = *(CFX::RG::Resource ***)(a2 + 80);
    uint64_t v10 = 8 * v8;
    do
    {
      uint64_t v11 = *v9;
      double result = (id)CFX::RG::Resource::isExternal(*v9);
      if (result)
      {
        double result = CFX::GPUResourceManager::getTexture(v3[17], v11);
        if (!result)
        {
          CFX::GPUResourceManager::allocate(v3[17], v11, (const CFX::RG::RenderGraphContext *)(v3 + 14));
          double result = CFX::GPUResourceManager::getTexture(v3[17], v11);
        }
      }
      ++v9;
      v10 -= 8;
    }
    while (v10);
  }
  return result;
}

uint64_t sub_1B65F5B98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (void *)sub_1B6445900(*(void *)(a1 + 56), a2, a3, a4, a5, a6, a7, a8);
  uint64_t v14 = objc_msgSend_commandQueue(v10, v11, v12, v13);
  uint64_t v18 = objc_msgSend_currentCommandBuffer(v10, v15, v16, v17);
  uint64_t v19 = *(void *)(a1 + 64);
  v21[0] = 1;
  uint64_t v22 = v19;
  uint64_t v23 = v14;
  uint64_t v24 = v18;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)a2 + 24))(a2, a1 + 112, 2, v21);
}

uint64_t sub_1B65F5C30(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (void *)sub_1B6445900(*(void *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v14 = objc_msgSend_currentCommandBuffer(v10, v11, v12, v13);
  uint64_t v18 = objc_msgSend_blitCommandEncoder(v14, v15, v16, v17);
  uint64_t v21 = objc_msgSend_stringWithUTF8String_(NSString, v19, a2[3], v20);
  objc_msgSend_setLabel_(v18, v22, v21, v23);
  v28[0] = 2;
  long long v29 = v18;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, char *))(*a2 + 24))(a2, a1 + 112, 2, v28);
  return objc_msgSend_endEncoding(v18, v24, v25, v26);
}

uint64_t sub_1B65F5CDC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (void *)sub_1B6445900(*(void *)(a1 + 56), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v14 = objc_msgSend_currentCommandBuffer(v10, v11, v12, v13);
  uint64_t v15 = *(void **)(a1 + 104);
  uint64_t v18 = objc_msgSend_stringWithUTF8String_(NSString, v16, a2[3], v17);
  objc_msgSend_loadWithCommandBuffer_label_(v15, v19, v14, v18);
  uint64_t v20 = *(void *)(a1 + 104);
  v25[0] = 4;
  uint64_t v26 = v20;
  (*(void (**)(uint64_t *, uint64_t, uint64_t, char *))(*a2 + 24))(a2, a1 + 112, 2, v25);
  return objc_msgSend_endEncoding(*(void **)(a1 + 104), v21, v22, v23);
}

void sub_1B65F5D90(uint64_t a1, _DWORD *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (void *)sub_1B6445900(*(void *)(a1 + 56), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  uint64_t v47 = objc_msgSend_frameConstantBufferPool(v10, v11, v12, v13);
  uint64_t v14 = objc_alloc_init(RGCachedRenderCommandEncoder);
  uint64_t v59 = v14;
  objc_msgSend_setDeferredBindingEnabled_(v14, v15, 1, v16);
  long long v54 = *(_OWORD *)(a1 + 16);
  uint64_t v55 = *(void *)(a1 + 32);
  objc_msgSend_setCounters_(v14, v17, (uint64_t)&v54, v18);
  uint64_t v19 = *(void *)(a1 + 96);
  uint64_t v23 = objc_msgSend_currentCommandBuffer(v10, v20, v21, v22);
  int v24 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t *))(*a3 + 32))(a3) + 274);
  int v25 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t *))(*a3 + 32))(a3) + 275);
  int v46 = *(unsigned __int8 *)((*(uint64_t (**)(uint64_t *))(*a3 + 32))(a3) + 276);
  uint64_t v26 = (*(uint64_t (**)(uint64_t *))(*a3 + 32))(a3);
  if (v25)
  {
    unsigned int v44 = v25 + v24;
    int v45 = *(unsigned __int8 *)(v26 + 277);
    do
    {
      unsigned __int8 v27 = v46;
      if (v45)
      {
        do
        {
          sub_1B65F609C(a1, *(char **)(a1 + 96), a2, (CFX::RG::Pass *)a3, v24, v27);
          prof_beginFlame((uint64_t)"Begin encoding", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 628);
          uint64_t v30 = objc_msgSend_stringWithUTF8String_(NSString, v28, a3[3], v29);
          uint64_t v58 = v23;
          objc_msgSend_loadWithCommandBuffer_renderPassDescriptor_(v59, v31, v23, v19);
          uint64_t v60 = v47;
          int v56 = 1;
          char v57 = 1;
          char v61 = 0;
          if (v30) {
            objc_msgSend_setLabel_(v59, v32, v30, v33);
          }
          objc_msgSend_beginRenderPass_renderEncoder_(v10, v32, v19, (uint64_t)&v56);
          prof_endFlame();
          v49[0] = 3;
          uint64_t v50 = v59;
          uint64_t v51 = v19;
          char v52 = v24;
          unsigned __int8 v53 = v27;
          (*(void (**)(uint64_t *, uint64_t, uint64_t, char *))(*a3 + 24))(a3, a1 + 112, 2, v49);
          prof_beginFlame((uint64_t)"End encoding", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 643);
          sub_1B65F4C30((uint64_t)&v56, v34, v35, v36, v37, v38, v39, v40);
          objc_msgSend_endRenderPass(v10, v41, v42, v43);
          prof_endFlame();
          ++v27;
        }
        while (v45 + v46 > v27);
      }
      LOBYTE(v24) = v24 + 1;
    }
    while (v44 > v24);
    uint64_t v14 = v59;
  }
}

void sub_1B65F6054(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24)
{
  _Unwind_Resume(a1);
}

void sub_1B65F609C(uint64_t a1, char *a2, _DWORD *a3, CFX::RG::Pass *a4, unsigned int a5, unsigned int a6)
{
  unsigned int v10 = sub_1B6447B50(*(void *)(a1 + 56), a2, (uint64_t)a3, (uint64_t)a4);
  prof_beginFlameSmallData((uint64_t)"setupRenderPassDescriptor", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/CRenderGraphEngineContext.mm", 512, v10 | 0x300000000);
  for (uint64_t i = 0; i != 8; ++i)
  {
    uint64_t v15 = objc_msgSend_colorAttachments(a2, v11, v12, v13);
    uint64_t v18 = objc_msgSend_objectAtIndexedSubscript_(v15, v16, i, v17);
    objc_msgSend_setTexture_(v18, v19, 0, v20);
    int v24 = objc_msgSend_colorAttachments(a2, v21, v22, v23);
    unsigned __int8 v27 = objc_msgSend_objectAtIndexedSubscript_(v24, v25, i, v26);
    objc_msgSend_setResolveTexture_(v27, v28, 0, v29);
  }
  uint64_t v30 = objc_msgSend_depthAttachment(a2, v11, v12, v13);
  objc_msgSend_setTexture_(v30, v31, 0, v32);
  uint64_t v36 = objc_msgSend_depthAttachment(a2, v33, v34, v35);
  objc_msgSend_setResolveTexture_(v36, v37, 0, v38);
  uint64_t v42 = objc_msgSend_stencilAttachment(a2, v39, v40, v41);
  objc_msgSend_setTexture_(v42, v43, 0, v44);
  uint64_t v45 = (*(uint64_t (**)(CFX::RG::Pass *))(*(void *)a4 + 32))(a4);
  objc_msgSend_setRenderTargetArrayLength_(a2, v46, *(unsigned __int8 *)(v45 + 268), v47);
  int v116 = a2;
  uint64_t v48 = *((unsigned int *)a4 + 42);
  if (v48)
  {
    uint64_t v49 = (CFX::RG::Resource **)*((void *)a4 + 22);
    uint64_t v50 = 8 * v48;
    uint64_t v114 = a6;
    uint64_t v115 = a5;
    do
    {
      uint64_t v51 = *v49;
      uint64_t v52 = CFX::RG::Pass::renderTargetInfo(a4, *v49);
      if (v52)
      {
        id Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a1 + 136), v51);
        int v54 = *(_DWORD *)v52;
        if (*(_DWORD *)v52) {
          uint64_t v55 = 1;
        }
        else {
          uint64_t v55 = *(_DWORD *)v52 & 2;
        }
        if (CFX::RG::Resource::isExternal(v51))
        {
          int v56 = (CFX::RG::ExternalResourceDesc *)CFX::RG::Resource::externalResourceDesc(v51);
          if (CFX::RG::ExternalResourceDesc::requireLoad(v56)) {
            uint64_t v55 = 1;
          }
        }
        unint64_t v6 = v6 & 0xFFFFFFFFFFFFFF00 | *(unsigned __int8 *)(a1 + 377);
        uint64_t v60 = CFX::RG::DeduceStoreAction(a3, a4, v51, *(unsigned int **)(a1 + 128), *(void *)(a1 + 369));
        int v61 = *(unsigned __int8 *)(v52 + 4);
        switch(v61)
        {
          case 1:
            long long v74 = objc_msgSend_colorAttachments(v116, v57, v58, v59);
            long long v77 = objc_msgSend_objectAtIndexedSubscript_(v74, v75, *(unsigned int *)(v52 + 8), v76);
            uint64_t v78 = (*(uint64_t (**)(CFX::RG::Pass *))(*(void *)a4 + 32))(a4);
            if ((v54 & 4) != 0)
            {
              objc_msgSend_setResolveTexture_(v77, v79, (uint64_t)Texture, v80);
              objc_msgSend_setResolveLevel_(v77, v110, v115, v111);
              objc_msgSend_setResolveSlice_(v77, v112, v114, v113);
            }
            else
            {
              uint64_t v81 = v78;
              uint64_t v82 = *(unsigned int *)(v52 + 8);
              objc_msgSend_setTexture_(v77, v79, (uint64_t)Texture, v80);
              objc_msgSend_setLoadAction_(v77, v83, v55, v84);
              objc_msgSend_setStoreAction_(v77, v85, v60, v86);
              objc_msgSend_setClearColor_(v77, v87, v88, v89, *(double *)(v81 + 32 * v82), *(double *)(v81 + 32 * v82 + 8), *(double *)(v81 + 32 * v82 + 16), *(double *)(v81 + 32 * v82 + 24));
              objc_msgSend_setLevel_(v77, v90, v115, v91);
              objc_msgSend_setSlice_(v77, v92, v114, v93);
            }
            break;
          case 2:
            uint64_t v62 = objc_msgSend_depthAttachment(v116, v57, v58, v59);
            long long v65 = v62;
            if ((v54 & 4) != 0)
            {
LABEL_21:
              objc_msgSend_setResolveTexture_(v62, v63, (uint64_t)Texture, v64);
              objc_msgSend_setResolveLevel_(v65, v106, v115, v107);
              objc_msgSend_setResolveSlice_(v65, v108, v114, v109);
              break;
            }
            objc_msgSend_setTexture_(v62, v63, (uint64_t)Texture, v64);
            objc_msgSend_setLoadAction_(v65, v94, v55, v95);
            objc_msgSend_setStoreAction_(v65, v96, v60, v97);
            uint64_t v98 = (*(uint64_t (**)(CFX::RG::Pass *))(*(void *)a4 + 32))(a4);
            objc_msgSend_setClearDepth_(v65, v99, v100, v101, *(double *)(v98 + 256));
            objc_msgSend_setLevel_(v65, v102, v115, v103);
            objc_msgSend_setSlice_(v65, v104, v114, v105);
            break;
          case 3:
            uint64_t v62 = objc_msgSend_stencilAttachment(v116, v57, v58, v59);
            long long v65 = v62;
            if ((v54 & 4) != 0) {
              goto LABEL_21;
            }
            objc_msgSend_setTexture_(v62, v63, (uint64_t)Texture, v64);
            objc_msgSend_setLoadAction_(v65, v66, v55, v67);
            objc_msgSend_setStoreAction_(v65, v68, v60, v69);
            objc_msgSend_setLevel_(v65, v70, v115, v71);
            objc_msgSend_setSlice_(v65, v72, v114, v73);
            break;
        }
      }
      ++v49;
      v50 -= 8;
    }
    while (v50);
  }

  prof_endFlame();
}

void sub_1B65F649C(_Unwind_Exception *a1)
{
}

uint64_t sub_1B65F64D0(uint64_t result, __int16 *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v4 = (uint64_t *)result;
    uint64_t v5 = a3;
    do
    {
      __int16 v6 = *a2++;
      if (v6)
      {
        double result = *v4;
        *uint64_t v4 = 0;
        if (result) {
          double result = (*(uint64_t (**)(uint64_t))(*(void *)result + 8))(result);
        }
      }
      ++v4;
      --v5;
    }
    while (v5);
  }
  return result;
}

void sub_1B65F654C()
{
  if (!qword_1E9DDBD70)
  {
    qword_1E9DDBD70 = sub_1B63C8D10(&qword_1E9DDBD70);
    qword_1EB974E68 = (uint64_t)sub_1B65F92BC;
  }
}

uint64_t sub_1B65F65A4()
{
  if (qword_1E9DDBD78 != -1) {
    dispatch_once(&qword_1E9DDBD78, &unk_1F0FB5FE8);
  }
  uint64_t result = sub_1B63C8D44(qword_1E9DDBD70, 0x68uLL);
  *(_DWORD *)(result + 16) = 0;
  *(void *)(result + 40) = -1;
  *(void *)(result + 24) = 1;
  return result;
}

uint64_t sub_1B65F6604(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"input");
  }
  uint64_t result = *(void *)(a1 + 56);
  if ((CFStringRef)result != theString)
  {
    if (result)
    {
      CFRelease((CFTypeRef)result);
      *(void *)(a1 + 56) = 0;
    }
    if (theString) {
      uint64_t result = (uint64_t)CFRetain(theString);
    }
    else {
      uint64_t result = 0;
    }
    *(void *)(a1 + 56) = result;
  }
  if (theString && (CStringPtr = CFStringGetCStringPtr(theString, 0x8000100u), uint64_t result = strlen(CStringPtr), CStringPtr))
  {
    unint64_t v12 = 0xC6A4A7935BD1E995 * result;
    if (result >= 8)
    {
      uint64_t v13 = result >> 3;
      uint64_t v14 = &CStringPtr[8 * v13];
      uint64_t v15 = 8 * v13;
      do
      {
        uint64_t v16 = *(void *)CStringPtr;
        CStringPtr += 8;
        unint64_t v12 = 0xC6A4A7935BD1E995
            * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v16) ^ ((0xC6A4A7935BD1E995 * v16) >> 47))) ^ v12);
        v15 -= 8;
      }
      while (v15);
      CStringPtr = v14;
    }
    switch(result & 7)
    {
      case 1:
        goto LABEL_23;
      case 2:
        goto LABEL_22;
      case 3:
        goto LABEL_21;
      case 4:
        goto LABEL_20;
      case 5:
        goto LABEL_19;
      case 6:
        goto LABEL_18;
      case 7:
        v12 ^= (unint64_t)*((unsigned __int8 *)CStringPtr + 6) << 48;
LABEL_18:
        v12 ^= (unint64_t)*((unsigned __int8 *)CStringPtr + 5) << 40;
LABEL_19:
        v12 ^= (unint64_t)*((unsigned __int8 *)CStringPtr + 4) << 32;
LABEL_20:
        v12 ^= (unint64_t)*((unsigned __int8 *)CStringPtr + 3) << 24;
LABEL_21:
        v12 ^= (unint64_t)*((unsigned __int8 *)CStringPtr + 2) << 16;
LABEL_22:
        v12 ^= (unint64_t)*((unsigned __int8 *)CStringPtr + 1) << 8;
LABEL_23:
        unint64_t v12 = 0xC6A4A7935BD1E995 * (v12 ^ *(unsigned __int8 *)CStringPtr);
        break;
      default:
        break;
    }
    unint64_t v17 = (0xC6A4A7935BD1E995 * (v12 ^ (v12 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v12 ^ (v12 >> 47))) >> 47);
  }
  else
  {
    unint64_t v17 = 0;
  }
  *(void *)(a1 + 64) = v17;
  return result;
}

void sub_1B65F6790(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  unsigned int v9 = *(_DWORD *)(a1 + 24);
  BOOL v10 = v9 > 6;
  int v11 = (1 << v9) & 0x4C;
  BOOL v12 = v10 || v11 == 0;
  if (v12
    || (uint64_t v13 = *(void *)(a1 + 96)) != 0
    && ((uint64_t v14 = sub_1B64AF488(v13, a2, a3, a4, a5, a6, a7, a8)) == 0
     || sub_1B64757A4(v14, v15, v16, v17, v18, v19, v20, v21) == 2))
  {
    unsigned int v22 = *(_DWORD *)(a1 + 184) & 0xFFFF7FFF;
  }
  else
  {
    unsigned int v22 = *(_DWORD *)(a1 + 184) | 0x8000;
  }
  *(_DWORD *)(a1 + 184) = v22;
}

void sub_1B65F682C()
{
  if (!qword_1E9DDBD80)
  {
    qword_1E9DDBD80 = sub_1B63C8D10(&qword_1E9DDBD80);
    qword_1EB974D90 = (uint64_t)sub_1B65F9864;
  }
}

uint64_t sub_1B65F6884()
{
  if (qword_1E9DDBD88 != -1) {
    dispatch_once(&qword_1E9DDBD88, &unk_1F0FB6CE8);
  }
  uint64_t v0 = sub_1B63C8D44(qword_1E9DDBD80, 0x230uLL);
  *(void *)(v0 + 536) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v1 = *(_DWORD *)(v0 + 184);
  *(void *)(v0 + 376) = 0x3FF0000000000000;
  *(void *)(v0 + 384) = 0x3FF0000000000000;
  *(unsigned char *)(v0 + 368) = *(unsigned char *)(v0 + 368) & 0xF8 | 1;
  *(unsigned char *)(v0 + 480) = 1;
  *(unsigned char *)(v0 + 32) = 1;
  *(_DWORD *)(v0 + 180) = 1;
  *(_DWORD *)(v0 + 184) = v1 | 0x310B;
  return v0;
}

uint64_t sub_1B65F6934(uint64_t result, char a2)
{
  *(unsigned char *)(result + 32) = a2;
  return result;
}

CFTypeRef sub_1B65F693C(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 48);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 48) = 0;
    }
    if (cf) {
      CFTypeRef result = CFRetain(cf);
    }
    else {
      CFTypeRef result = 0;
    }
    *(void *)(a1 + 48) = result;
  }
  return result;
}

CFTypeRef sub_1B65F69B8(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 56);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 56) = 0;
    }
    if (cf) {
      CFTypeRef result = CFRetain(cf);
    }
    else {
      CFTypeRef result = 0;
    }
    *(void *)(a1 + 56) = result;
  }
  return result;
}

CFTypeRef sub_1B65F6A34(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 64);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 64) = 0;
    }
    if (cf) {
      CFTypeRef result = CFRetain(cf);
    }
    else {
      CFTypeRef result = 0;
    }
    *(void *)(a1 + 64) = result;
  }
  return result;
}

CFTypeRef sub_1B65F6AB0(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 72);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 72) = 0;
    }
    if (cf) {
      CFTypeRef result = CFRetain(cf);
    }
    else {
      CFTypeRef result = 0;
    }
    *(void *)(a1 + 72) = result;
  }
  return result;
}

void sub_1B65F6B2C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  *(unsigned char *)(a1 + 80) = a2;
}

CFTypeRef sub_1B65F6B7C(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 88);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 88) = 0;
    }
    if (cf) {
      CFTypeRef result = CFRetain(cf);
    }
    else {
      CFTypeRef result = 0;
    }
    *(void *)(a1 + 88) = result;
  }
  return result;
}

uint64_t sub_1B65F6BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  return *(void *)(a1 + 88);
}

BOOL sub_1B65F6C44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  return *(_DWORD *)(a1 + 180) != 0;
}

void sub_1B65F6C98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a2;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  *(_DWORD *)(a1 + 24) = v8;

  sub_1B65F6790(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B65F6CFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1B65F6D48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  return *(void *)(a1 + 96);
}

CFStringRef sub_1B65F6D94(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (theString) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
    if (theString) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"name");
LABEL_3:
  CFStringRef result = *(CFStringRef *)(a1 + 16);
  if (result != theString)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 16) = 0;
    }
    if (theString) {
      CFStringRef result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString);
    }
    else {
      CFStringRef result = 0;
    }
    *(void *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_1B65F6E44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  return *(void *)(a1 + 16);
}

uint64_t sub_1B65F6E90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  return (*(unsigned __int8 *)(a1 + 186) >> 5) & 1;
}

void sub_1B65F6EE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  *(void *)(a1 + 448) = a2;
}

CFTypeRef sub_1B65F6F30(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 456);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 456) = 0;
    }
    if (cf) {
      CFTypeRef result = CFRetain(cf);
    }
    else {
      CFTypeRef result = 0;
    }
    *(void *)(a1 + 456) = result;
  }
  return result;
}

CFTypeRef sub_1B65F6FAC(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 472);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 472) = 0;
    }
    if (cf) {
      CFTypeRef result = CFRetain(cf);
    }
    else {
      CFTypeRef result = 0;
    }
    *(void *)(a1 + 472) = result;
  }
  return result;
}

uint64_t sub_1B65F7028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  return (*(unsigned __int8 *)(a1 + 185) >> 2) & 1;
}

uint64_t sub_1B65F7078(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9 && (uint64_t v10 = *(void *)(v9 + 96)) != 0) {
    return *(void *)v10;
  }
  else {
    return 0;
  }
}

double sub_1B65F70DC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFDictionaryRef v8 = (const __CFDictionary *)a3;
  uint64_t v10 = a1;
  uint64_t v298 = *MEMORY[0x1E4F143B8];
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  int v11 = objc_msgSend_valueForKey_(a2, (const char *)a2, @"draw", a4);
  uint64_t v15 = objc_msgSend_lowercaseString(v11, v12, v13, v14);
  if ((objc_msgSend_isEqualToString_(v15, v16, @"draw_world", v17) & 1) != 0
    || (objc_msgSend_isEqualToString_(v15, v18, @"draw_node", v20) & 1) != 0)
  {
    uint64_t isEqualToString = 3;
  }
  else if (objc_msgSend_isEqualToString_(v15, v25, @"draw_main_world", v20))
  {
    uint64_t isEqualToString = 8;
  }
  else if (objc_msgSend_isEqualToString_(v15, v39, @"draw_nodes", v20))
  {
    uint64_t isEqualToString = 6;
  }
  else if (objc_msgSend_isEqualToString_(v15, v40, @"draw_geometry", v20))
  {
    uint64_t isEqualToString = 2;
  }
  else if (objc_msgSend_isEqualToString_(v15, v279, @"draw_quad", v20))
  {
    uint64_t isEqualToString = 4;
  }
  else if (objc_msgSend_isEqualToString_(v15, v285, @"metal_custom", v20))
  {
    uint64_t isEqualToString = 7;
  }
  else if ((objc_msgSend_isEqualToString_(v15, v286, @"draw_none", v20) & 1) != 0 {
         || (objc_msgSend_isEqualToString_(v15, v287, @"none", v20) & 1) != 0)
  }
  {
    uint64_t isEqualToString = 1;
  }
  else
  {
    uint64_t isEqualToString = objc_msgSend_isEqualToString_(v15, v288, @"custom", v20);
  }
  sub_1B65F6C98(v10, isEqualToString, v19, v20, v21, v22, v23, v24);
  uint64_t v29 = objc_msgSend_valueForKey_(a2, v27, @"stage", v28);
  uint64_t v33 = objc_msgSend_lowercaseString(v29, v30, v31, v32);
  if (objc_msgSend_isEqualToString_(v33, v34, @"preDraw", v35))
  {
    int v38 = 1;
  }
  else if (objc_msgSend_isEqualToString_(v33, v36, @"preFX", v37))
  {
    int v38 = 2;
  }
  else if (objc_msgSend_isEqualToString_(v33, v36, @"preToneMap", v37))
  {
    int v38 = 3;
  }
  else
  {
    objc_msgSend_isEqualToString_(v33, v36, @"postFX", v37);
    int v38 = 4;
  }
  *(_DWORD *)(v10 + 28) = v38;
  uint64_t v41 = objc_msgSend_objectForKey_(a2, v36, @"ignoreFloors", v37);
  if (v41)
  {
    uint64_t v44 = objc_msgSend_objectForKey_(a2, v42, @"ignoreFloors", v43);
    LOBYTE(v41) = objc_msgSend_BOOLValue(v44, v45, v46, v47);
  }
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFFFDF | (32 * (v41 & 1));
  uint64_t v48 = objc_msgSend_objectForKey_(a2, v42, @"onlyShadowCasters", v43);
  if (v48)
  {
    uint64_t v51 = objc_msgSend_objectForKey_(a2, v49, @"onlyShadowCasters", v50);
    LOBYTE(v48) = objc_msgSend_BOOLValue(v51, v52, v53, v54);
  }
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFFBFF | ((v48 & 1) << 10);
  uint64_t v55 = objc_msgSend_objectForKey_(a2, v49, @"onlyMovableNodes", v50);
  if (v55)
  {
    uint64_t v58 = objc_msgSend_objectForKey_(a2, v56, @"onlyMovableNodes", v57);
    LOBYTE(v55) = objc_msgSend_BOOLValue(v58, v59, v60, v61);
  }
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFF7FF | ((v55 & 1) << 11);
  if (objc_msgSend_objectForKey_(a2, v56, @"hasConstantAlpha", v57))
  {
    uint64_t v64 = objc_msgSend_objectForKey_(a2, v62, @"hasConstantAlpha", v63);
    char v68 = objc_msgSend_BOOLValue(v64, v65, v66, v67);
  }
  else
  {
    char v68 = 1;
  }
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFFEFF | ((v68 & 1) << 8);
  if (objc_msgSend_objectForKey_(a2, v62, @"installViewport", v63))
  {
    uint64_t v71 = objc_msgSend_objectForKey_(a2, v69, @"installViewport", v70);
    char v75 = objc_msgSend_BOOLValue(v71, v72, v73, v74);
  }
  else
  {
    char v75 = 1;
  }
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFEFFF | ((v75 & 1) << 12);
  if (objc_msgSend_objectForKey_(a2, v69, @"isViewDependant", v70))
  {
    uint64_t v78 = objc_msgSend_objectForKey_(a2, v76, @"isViewDependant", v77);
    char v82 = objc_msgSend_BOOLValue(v78, v79, v80, v81);
  }
  else
  {
    char v82 = 1;
  }
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFDFFF | ((v82 & 1) << 13);
  double v83 = objc_msgSend_objectForKey_(a2, v76, @"overridesCustomProgram", v77);
  if (objc_msgSend_BOOLValue(v83, v84, v85, v86)) {
    int v89 = 0x100000;
  }
  else {
    int v89 = 0;
  }
  *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFEFFFFF | v89;
  uint64_t v90 = objc_msgSend_objectForKey_(a2, v87, @"layerMask", v88);
  if (v90) {
    *(unsigned char *)(v10 + 480) = sub_1B65F7CE8(v90);
  }
  uint64_t v93 = objc_msgSend_objectForKey_(a2, v91, @"includeCategoryMask", v92);
  if (v93) {
    uint64_t v96 = sub_1B65F7CE8(v93);
  }
  else {
    uint64_t v96 = -1;
  }
  *(void *)(v10 + 200) = v96;
  uint64_t v97 = objc_msgSend_objectForKey_(a2, v94, @"excludeCategoryMask", v95);
  if (v97) {
    uint64_t v97 = (void *)sub_1B65F7CE8(v97);
  }
  *(void *)(v10 + 208) = v97;
  uint64_t v100 = objc_msgSend_objectForKey_(a2, v98, @"viewport", v99);
  if (v100)
  {
    *(_DWORD *)(v10 + 184) |= 0x40000u;
    *(_DWORD *)context = 0;
    LODWORD(v292[0]) = 0;
    uint64_t v293 = 0;
    uint64_t v104 = (const char *)objc_msgSend_UTF8String(v100, v101, v102, v103);
    sscanf(v104, "%f %f %f %f", context, v292, (char *)&v293 + 4, &v293);
    *(void *)&long long v105 = __PAIR64__(v292[0], *(unsigned int *)context);
    *((void *)&v105 + 1) = __PAIR64__(v293, HIDWORD(v293));
    *(_OWORD *)(v10 + 144) = v105;
  }
  char v106 = objc_msgSend_objectForKey_(a2, v101, @"samples", v103);
  int v110 = objc_msgSend_intValue(v106, v107, v108, v109);
  if (!v110) {
    LOBYTE(v110) = (*(_DWORD *)(v10 + 24) & 0xFFFFFFFB) == 0;
  }
  *(unsigned char *)(v10 + 176) = v110;
  memset(v292, 0, 28);
  double v111 = sub_1B64513F4(v292);
  uint64_t v114 = objc_msgSend_objectForKey_(a2, v112, @"cullMode", v113, v111);
  BOOL v117 = v114 != 0;
  if (v114)
  {
    uint64_t v118 = v114;
    if ((objc_msgSend_isEqualToString_(v114, v115, @"cullFront", v116) & 1) != 0
      || (objc_msgSend_isEqualToString_(v118, v115, @"front", v116) & 1) != 0)
    {
      int v119 = 1;
    }
    else if ((objc_msgSend_isEqualToString_(v118, v115, @"cullNone", v116) & 1) != 0 {
           || (objc_msgSend_isEqualToString_(v118, v115, @"none", v116) & 1) != 0)
    }
    {
      int v119 = 2;
    }
    else
    {
      if ((objc_msgSend_isEqualToString_(v118, v115, @"cullBack", v116) & 1) == 0
        && (objc_msgSend_isEqualToString_(v118, v115, @"back", v116) & 1) == 0)
      {
        sub_1B63F2F54(16, @"Error: unknown cull mode named %@", v280, v116, v281, v282, v283, v284, (uint64_t)v118);
      }
      int v119 = 0;
    }
    LODWORD(v292[0]) = v119;
  }
  uint64_t v120 = objc_msgSend_objectForKey_(a2, v115, @"colorStates", v116);
  if (v120)
  {
    v123 = v120;
    v124 = objc_msgSend_objectForKey_(v120, v121, @"clearColor", v122);
    if (v124)
    {
      v127 = v124;
      int v128 = objc_msgSend_isEqualToString_(v124, v125, @"worldBackground", v126);
      int v130 = *(_DWORD *)(v10 + 184);
      if (v128)
      {
        int v131 = v130 | 0x200;
      }
      else
      {
        *(_DWORD *)(v10 + 184) = v130 & 0xFFFFFDFF;
        __int16 v132 = (const char *)objc_msgSend_UTF8String(v127, v125, v129, v126);
        sscanf(v132, "%f %f %f %f", v10 + 128, v10 + 132, v10 + 136, v10 + 140);
        int v131 = *(_DWORD *)(v10 + 184);
      }
      *(_DWORD *)(v10 + 184) = v131 | 1;
    }
    char v133 = objc_msgSend_objectForKey_(v123, v125, @"clear", v126);
    if (v133) {
      *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFFFFE | objc_msgSend_BOOLValue(v133, v121, v134, v122);
    }
  }
  v135 = objc_msgSend_objectForKey_(a2, v121, @"depthStates", v122);
  if (!v135) {
    goto LABEL_72;
  }
  v138 = v135;
  v139 = objc_msgSend_objectForKey_(v135, v136, @"enableWrite", v137);
  if (v139)
  {
    BYTE9(v292[0]) = objc_msgSend_BOOLValue(v139, v140, v141, v142);
    BOOL v117 = 1;
  }
  v143 = objc_msgSend_objectForKey_(v138, v140, @"enableRead", v142);
  if (v143)
  {
    BYTE8(v292[0]) = objc_msgSend_BOOLValue(v143, v144, v145, v146);
    BOOL v117 = 1;
  }
  v147 = objc_msgSend_objectForKey_(v138, v144, @"clear", v146);
  if (v147)
  {
    if (objc_msgSend_BOOLValue(v147, v148, v149, v150)) {
      int v151 = 2;
    }
    else {
      int v151 = 0;
    }
    *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFFFFD | v151;
  }
  v152 = objc_msgSend_objectForKey_(v138, v148, @"func", v150);
  if (!v152)
  {
LABEL_72:
    v158 = objc_msgSend_objectForKey_(a2, v136, @"stencilStates", v137);
    if (!v158)
    {
      BOOL v159 = 0;
      if (!v117) {
        goto LABEL_87;
      }
      goto LABEL_86;
    }
    goto LABEL_73;
  }
  BYTE10(v292[0]) = sub_1B65F7DB0(v152, v136, v153, v137);
  v158 = objc_msgSend_objectForKey_(a2, v154, @"stencilStates", v155);
  if (v158)
  {
LABEL_73:
    v160 = objc_msgSend_objectForKey_(v158, v156, @"enable", v157);
    if (v160) {
      int v164 = objc_msgSend_BOOLValue(v160, v161, v162, v163);
    }
    else {
      int v164 = 1;
    }
    BYTE11(v292[0]) = v164;
    BOOL v159 = v164 != 0;
    v165 = objc_msgSend_objectForKey_(v158, v161, @"clear", v163);
    if (v165)
    {
      if (objc_msgSend_BOOLValue(v165, v166, v167, v168)) {
        int v169 = 4;
      }
      else {
        int v169 = 0;
      }
      *(_DWORD *)(v10 + 184) = *(_DWORD *)(v10 + 184) & 0xFFFFFFF3 | v169;
    }
    v170 = objc_msgSend_objectForKey_(v158, v166, @"behavior", v168);
    if (v170) {
      sub_1B65F7EC4(v170, (uint64_t)v292 + 13, v172, v173);
    }
    v174 = objc_msgSend_objectForKey_(v158, v171, @"backFaceBehavior", v173);
    if (v174)
    {
      BYTE12(v292[0]) = 1;
      sub_1B65F7EC4(v174, (uint64_t)&v292[1] + 4, v175, v176);
    }
    goto LABEL_86;
  }
  BOOL v159 = 0;
LABEL_86:
  *(_OWORD *)context = v292[0];
  *(_OWORD *)&context[12] = *(_OWORD *)((char *)v292 + 12);
  v177 = (const void *)sub_1B6451514((uint64_t)context);
  sub_1B65F7FA8(v10, v177, v178, v179, v180, v181, v182, v183);
  sub_1B64516BC(v177);
LABEL_87:
  uint64_t v184 = objc_msgSend_objectForKey_(a2, v156, @"blendStates", v157);
  if (!v184) {
    goto LABEL_117;
  }
  v185 = (void *)v184;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0) {
    v185 = objc_msgSend_arrayWithObject_(MEMORY[0x1E4F1C978], v186, (uint64_t)v185, v188);
  }
  CFDictionaryRef v291 = v8;
  uint64_t v189 = objc_msgSend_count(v185, v186, v187, v188);
  if (v189 >= 5)
  {
    uint64_t v197 = 4;
    sub_1B63F2F54(16, @"Error: too many blend states: max render target is %d", v191, v192, v193, v194, v195, v196, 4);
    goto LABEL_93;
  }
  uint64_t v197 = v189;
  if (v189 >= 1)
  {
LABEL_93:
    BOOL v289 = v159;
    uint64_t v290 = v10;
    uint64_t v198 = 0;
    v199 = &context[3];
    do
    {
      v200 = objc_msgSend_objectAtIndex_(v185, v190, v198, v192);
      v203 = objc_msgSend_objectForKey_(v200, v201, @"enable", v202);
      if (v203) {
        char v207 = objc_msgSend_BOOLValue(v203, v204, v205, v206);
      }
      else {
        char v207 = 1;
      }
      *(v199 - 3) = v207;
      v208 = objc_msgSend_objectForKey_(v200, v204, @"colorSrc", v206);
      if (v208) {
        char v212 = sub_1B65FA110(v208, v209, v210, v211);
      }
      else {
        char v212 = 1;
      }
      *(v199 - 1) = v212;
      v213 = objc_msgSend_objectForKey_(v200, v209, @"colorDst", v211);
      if (v213) {
        char v217 = sub_1B65FA110(v213, v214, v215, v216);
      }
      else {
        char v217 = 5;
      }
      char *v199 = v217;
      *(v199 - 2) = 0;
      v218 = objc_msgSend_objectForKey_(v200, v214, @"alphaSrc", v216);
      if (v218)
      {
        char v222 = sub_1B65FA110(v218, v219, v220, v221);
        *(v199 - 2) = 1;
      }
      else
      {
        char v222 = 1;
      }
      v199[2] = v222;
      v223 = objc_msgSend_objectForKey_(v200, v219, @"alphaDst", v221);
      if (v223)
      {
        char v227 = sub_1B65FA110(v223, v224, v225, v226);
        *(v199 - 2) = 1;
      }
      else
      {
        char v227 = 5;
      }
      v199[3] = v227;
      v228 = objc_msgSend_objectForKey_(v200, v224, @"colorOp", v226);
      if (v228) {
        LOBYTE(v228) = sub_1B65FA2EC(v228, v229, v230, v231);
      }
      v199[1] = (char)v228;
      v232 = objc_msgSend_objectForKey_(v200, v229, @"alphaOp", v231);
      if (v232)
      {
        LOBYTE(v232) = sub_1B65FA2EC(v232, v190, v233, v192);
        *(v199 - 2) = 1;
      }
      v199[4] = (char)v232;
      ++v198;
      v199 += 8;
    }
    while (v197 != v198);
    uint64_t v10 = v290;
    BOOL v159 = v289;
  }
  v234 = (const void *)sub_1B64E3240((uint64_t)context, v197);
  sub_1B65F801C(v10, v234, v235, v236, v237, v238, v239, v240);
  CFRelease(v234);
  CFDictionaryRef v8 = v291;
  if (!v10) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v241, v242, v243, v244, v245, v246, (uint64_t)"fxPass");
  }
LABEL_117:
  v247 = *(const void **)(v10 + 16);
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v8, @"passes");
  v249 = CFDictionaryGetValue(v8, @"targets");
  if (Value)
  {
    v251 = v249;
    CFDictionaryRef v252 = (const __CFDictionary *)CFDictionaryGetValue(Value, v247);
    if (v252)
    {
      CFDictionaryRef v259 = (const __CFDictionary *)CFDictionaryGetValue(v252, @"outputs");
      if (v259)
      {
        CFDictionaryRef v260 = v259;
        memset(v296, 0, sizeof(v296));
        *(_OWORD *)&context[16] = 0u;
        memset(v295, 0, sizeof(v295));
        *(void *)&context[8] = v251;
        *(void *)context = 0x1003F800000;
        memset_pattern16(v295, &xmmword_1B6E4F380, 0x20uLL);
        char v261 = 0;
        __asm { FMOV            V0.2S, #1.0 }
        *(void *)&v296[12] = _D0;
        uint64_t v297 = 0;
        v296[22] = v159;
        unsigned int v267 = *(_DWORD *)(v10 + 24);
        if (v267 <= 6 && ((1 << v267) & 0x4C) != 0)
        {
          context[4] = 1;
          char v261 = 41;
        }
        *(void *)&context[24] = 0;
        v296[8] = v261;
        CFDictionaryApplyFunction(v260, (CFDictionaryApplierFunction)sub_1B65F8098, context);
        uint64_t v274 = 0;
        *(unsigned char *)(v10 + 363) = (*(unsigned char *)(v10 + 363) & 0xFC | context[4] | (2 * v296[21])) ^ 1;
        *(unsigned char *)(v10 + 360) = v296[8];
        *(_DWORD *)(v10 + 424) = *(_DWORD *)&v296[12];
        char v275 = v297;
        v276 = (unsigned char *)(v10 + 299);
        char v277 = context[5] | (2 * v296[20]);
        do
        {
          if (context[v274 + 24])
          {
            char v278 = *v276 & 0xEC | v277;
            *(v276 - 3) = context[v274 + 24];
            unsigned char *v276 = (v278 | (16 * v296[v274])) ^ 1;
            *(_DWORD *)(v10 + 4 * v274 + 392) = *(_DWORD *)&context[4 * v274 + 32];
            *(v276 - 1) = v275;
            *(unsigned char *)(v10 + 368) = *(unsigned char *)(v10 + 368) & 0xF8 | (v274 + 1) & 7;
          }
          ++v274;
          v276 += 8;
        }
        while (v274 != 8);
        if (*(float *)&context[16] == 0.0 || *(float *)&context[20] == 0.0)
        {
          sub_1B644E8FC(v10 + 288, 1, v268, v269, v270, v271, v272, v273);
        }
        else
        {
          sub_1B644E8FC(v10 + 288, 0, v268, v269, v270, v271, v272, v273);
          *(void *)(v10 + 288) = *(void *)&context[16];
        }
        double result = *(float *)context;
        *(double *)(v10 + 376) = *(float *)context;
        *(double *)(v10 + 384) = result;
      }
      else
      {
        *(unsigned char *)(v10 + 360) = 0;
        *(unsigned char *)(v10 + 296) = 0;
      }
    }
    else
    {
      sub_1B63F2F54(0, @"Warning: can't create a fbo description for pass %@ - can't find pass description with name %@", v253, v254, v255, v256, v257, v258, v10);
    }
  }
  return result;
}

uint64_t sub_1B65F7CE8(void *a1)
{
  objc_opt_class();
  if (objc_opt_isKindOfClass())
  {
    return objc_msgSend_unsignedIntegerValue(a1, v2, v3, v4);
  }
  else if (objc_msgSend_hasPrefix_(a1, v2, @"0x", v4))
  {
    uint64_t v10 = 0;
    uint64_t v9 = (const char *)objc_msgSend_cStringUsingEncoding_(a1, v6, 4, v8);
    sscanf(v9, "%lu", &v10);
    return v10;
  }
  else
  {
    return objc_msgSend_integerValue(a1, v6, v7, v8);
  }
}

uint64_t sub_1B65F7DB0(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_isEqualToString_(a1, a2, @"never", a4)) {
    return 0;
  }
  if (objc_msgSend_isEqualToString_(a1, v5, @"always", v6)) {
    return 1;
  }
  if (objc_msgSend_isEqualToString_(a1, v8, @"equal", v9)) {
    return 2;
  }
  if (objc_msgSend_isEqualToString_(a1, v10, @"notEqual", v11)) {
    return 3;
  }
  if (objc_msgSend_isEqualToString_(a1, v12, @"less", v13)) {
    return 4;
  }
  if (objc_msgSend_isEqualToString_(a1, v14, @"lessEqual", v15)) {
    return 5;
  }
  if ((objc_msgSend_isEqualToString_(a1, v16, @"greater", v17) & 1) == 0)
  {
    if (objc_msgSend_isEqualToString_(a1, v18, @"greaterEqual", v19)) {
      return 7;
    }
    sub_1B63F2F54(16, @"Error: unknown depth comparison function named %@", v20, v21, v22, v23, v24, v25, (uint64_t)a1);
  }
  return 6;
}

void *sub_1B65F7EC4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = objc_msgSend_valueForKey_(a1, (const char *)a2, @"depthFail", a4);
  if (v6) {
    *(unsigned char *)(a2 + 5) = sub_1B65F9FF8(v6, v7, v8, v9);
  }
  uint64_t v10 = objc_msgSend_valueForKey_(a1, v7, @"fail", v9);
  if (v10) {
    *(unsigned char *)(a2 + 6) = sub_1B65F9FF8(v10, v11, v12, v13);
  }
  uint64_t v14 = objc_msgSend_valueForKey_(a1, v11, @"pass", v13);
  if (v14) {
    *(unsigned char *)(a2 + 4) = sub_1B65F9FF8(v14, v15, v16, v17);
  }
  uint64_t v18 = objc_msgSend_valueForKey_(a1, v15, @"function", v17);
  if (v18) {
    *(unsigned char *)a2 = sub_1B65F7DB0(v18, v19, v20, v21);
  }
  uint64_t v22 = objc_msgSend_valueForKey_(a1, v19, @"readMask", v21);
  if (v22) {
    *(unsigned char *)(a2 + 1) = objc_msgSend_unsignedCharValue(v22, v23, v24, v25);
  }
  uint64_t v26 = objc_msgSend_valueForKey_(a1, v23, @"writeMask", v25);
  if (v26) {
    *(unsigned char *)(a2 + 2) = objc_msgSend_unsignedCharValue(v26, v27, v28, v29);
  }
  double result = objc_msgSend_valueForKey_(a1, v27, @"referenceValue", v29);
  if (result)
  {
    double result = objc_msgSend_unsignedCharValue(result, v31, v32, v33);
    *(unsigned char *)(a2 + 3) = (_BYTE)result;
  }
  return result;
}

CFTypeRef sub_1B65F7FA8(uint64_t a1, CFTypeRef a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 112);
  if (result != a2)
  {
    sub_1B64516BC(result);
    if (a2) {
      CFTypeRef result = CFRetain(a2);
    }
    else {
      CFTypeRef result = 0;
    }
    *(void *)(a1 + 112) = result;
  }
  return result;
}

CFTypeRef sub_1B65F801C(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 104);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 104) = 0;
    }
    if (cf) {
      CFTypeRef result = CFRetain(cf);
    }
    else {
      CFTypeRef result = 0;
    }
    *(void *)(a1 + 104) = result;
  }
  return result;
}

void sub_1B65F8098(const void *a1, const void *a2, uint64_t a3)
{
  CFDictionaryRef v5 = *(const __CFDictionary **)(a3 + 8);
  if (v5) {
    CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v5, a2);
  }
  else {
    CFDictionaryRef Value = 0;
  }
  if (CFEqual(a1, @"color") || CFEqual(a1, @"color0"))
  {
    int v9 = 1;
LABEL_7:
    *(unsigned char *)(a3 + 5) = 0;
    if (Value)
    {
      uint64_t v10 = (void *)CFDictionaryGetValue(Value, @"format");
      if (v10)
      {
        uint64_t v12 = (uint64_t)v10;
        int v13 = sub_1B644E9A0(v10, v7, v11, v8);
        if (v13)
        {
LABEL_12:
          uint64_t v19 = (v9 - 1);
          *(unsigned char *)(a3 + v19 + 24) = v13;
          uint64_t v20 = objc_msgSend_objectForKeyedSubscript_(Value, v7, @"mipmapped", v8);
          *(unsigned char *)(a3 + v19 + 64) = objc_msgSend_BOOLValue(v20, v21, v22, v23);
          if (!Value) {
            return;
          }
          CFNumberRef v24 = (const __CFNumber *)CFDictionaryGetValue(Value, @"scaleFactor");
          if (v24) {
            CFNumberGetValue(v24, kCFNumberFloatType, (void *)(a3 + 4 * v19 + 32));
          }
          goto LABEL_15;
        }
        sub_1B63F2F54(0, @"Warning: unknown texture format : %@", v14, v8, v15, v16, v17, v18, v12);
      }
    }
    LOBYTE(v13) = 1;
    goto LABEL_12;
  }
  if (CFEqual(a1, @"color1"))
  {
    int v9 = 2;
    goto LABEL_7;
  }
  if (CFEqual(a1, @"color2"))
  {
    int v9 = 3;
    goto LABEL_7;
  }
  if (CFEqual(a1, @"color3"))
  {
    int v9 = 4;
    goto LABEL_7;
  }
  if (!CFEqual(a1, @"depth"))
  {
    if (CFEqual(a1, @"stencil"))
    {
      *(unsigned char *)(a3 + 4) = 0;
      *(unsigned char *)(a3 + 72) = 44;
      if (!Value) {
        return;
      }
      CFNumberRef v49 = (const __CFNumber *)CFDictionaryGetValue(Value, @"scaleFactor");
      if (v49) {
        CFNumberGetValue(v49, kCFNumberFloatType, (void *)(a3 + 80));
      }
      int v9 = 5;
      goto LABEL_15;
    }
    sub_1B63F2F54(16, @"Error: _bufferTypeFromName - unknown output type: %@", v43, v44, v45, v46, v47, v48, (uint64_t)a1);
  }
  *(unsigned char *)(a3 + 4) = 0;
  if (!Value)
  {
    if (*(unsigned char *)(a3 + 86)) {
      char v50 = 44;
    }
    else {
      char v50 = 41;
    }
    *(unsigned char *)(a3 + 72) = v50;
    return;
  }
  uint64_t v30 = (void *)CFDictionaryGetValue(Value, @"format");
  if (!v30) {
    goto LABEL_38;
  }
  uint64_t v34 = (uint64_t)v30;
  int v35 = sub_1B644E9A0(v30, v31, v32, v33);
  if (!v35)
  {
    sub_1B63F2F54(0, @"Warning: unknown depth texture format : %@", v36, v37, v38, v39, v40, v41, v34);
LABEL_38:
    if (*(unsigned char *)(a3 + 86)) {
      LOBYTE(v35) = 44;
    }
    else {
      LOBYTE(v35) = 41;
    }
  }
  *(unsigned char *)(a3 + 72) = v35;
  CFNumberRef v42 = (const __CFNumber *)CFDictionaryGetValue(Value, @"scaleFactor");
  if (v42) {
    CFNumberGetValue(v42, kCFNumberFloatType, (void *)(a3 + 76));
  }
  int v9 = 0;
LABEL_15:
  CFNumberRef v25 = (const __CFNumber *)CFDictionaryGetValue(Value, @"scaleFactor");
  if (v25) {
    CFNumberGetValue(v25, kCFNumberFloatType, (void *)a3);
  }
  uint64_t v26 = (const char *)CFDictionaryGetValue(Value, @"size");
  if (v26)
  {
    uint64_t v51 = 0;
    unsigned __int8 v27 = sub_1B63CB55C(v26);
    sscanf(v27, "%fx%f", (char *)&v51 + 4, &v51);
    *(void *)(a3 + 16) = __PAIR64__(v51, HIDWORD(v51));
  }
  uint64_t v28 = CFDictionaryGetValue(Value, @"target");
  if (v28 && CFEqual(v28, @"texture_rectangle"))
  {
    if (v9 == 1) {
      *(unsigned char *)(a3 + 84) = 1;
    }
    else {
      *(unsigned char *)(a3 + 85) = 1;
    }
  }
  CFArrayRef v29 = (const __CFArray *)CFDictionaryGetValue(Value, @"usage");
  if (v29) {
    *(void *)(a3 + 88) = sub_1B64D9420(v29);
  }
}

void *sub_1B65F83B8(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"pass");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"inputName");
LABEL_3:
  uint64_t v10 = *(void *)(a1 + 520);
  if (v10 == *(void *)(a1 + 528))
  {
    uint64_t v11 = 2 * v10;
    if (v11 <= 1) {
      uint64_t v11 = 1;
    }
    *(void *)(a1 + 528) = v11;
    *(void *)(a1 + 512) = malloc_type_realloc(*(void **)(a1 + 512), 8 * v11, 0x2004093837F09uLL);
  }
  uint64_t v12 = (void *)sub_1B65F65A4();
  uint64_t v13 = *(void *)(a1 + 512);
  uint64_t v14 = *(void *)(a1 + 520);
  *(void *)(a1 + 520) = v14 + 1;
  *(void *)(v13 + 8 * v14) = v12;
  v12[6] = CFRetain(a2);
  CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 536), a2, v12);
  return v12;
}

const void *sub_1B65F84B0(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (key) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"pass");
    if (key) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"inputName");
LABEL_3:
  CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 536);

  return CFDictionaryGetValue(v10, key);
}

uint64_t sub_1B65F853C(uint64_t result, uint64_t a2)
{
  *(void *)(result + 216) = a2;
  return result;
}

uint64_t sub_1B65F8544(uint64_t result, uint64_t a2)
{
  *(void *)(result + 232) = a2;
  return result;
}

uint64_t sub_1B65F854C(uint64_t result)
{
  int v1 = *(uint64_t (**)(void))(*(void *)result + 240);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_1B65F8560(uint64_t result)
{
  int v1 = *(uint64_t (**)(void))(*(void *)result + 248);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_1B65F8574(uint64_t result)
{
  int v1 = *(uint64_t (**)(void))(*(void *)result + 256);
  if (v1) {
    return v1();
  }
  return result;
}

void sub_1B65F8588(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  context[2] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
    if (theDict) {
      goto LABEL_3;
    }
LABEL_6:
    *(void *)(a1 + 520) = 0;
    return;
  }
  if (!theDict) {
    goto LABEL_6;
  }
LABEL_3:
  CFIndex Count = CFDictionaryGetCount(theDict);
  CFIndex v18 = Count;
  *(void *)(a1 + 520) = 0;
  if (Count < 1)
  {
    uint64_t v19 = 0;
  }
  else
  {
    *(void *)(a1 + 512) = malloc_type_malloc(8 * Count, 0x2004093837F09uLL);
    context[0] = a1;
    context[1] = a3;
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sub_1B65F86A0, context);
    uint64_t v19 = *(void *)(a1 + 520);
  }
  if (v19 != v18) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. unexpected error in CFXFXPassSetInputs", v12, v13, v14, v15, v16, v17, (uint64_t)"fxPass->_inputCount == count");
  }
}

void sub_1B65F86A0(const void *a1, __CFString *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v44[1] = *MEMORY[0x1E4F143B8];
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  uint64_t v12 = sub_1B65F83B8(*a3, a1, (uint64_t)a3, a4, a5, a6, a7, a8);
  CFTypeID v13 = CFGetTypeID(a2);
  if (v13 == CFDictionaryGetTypeID())
  {
    CFDictionaryRef Value = (__CFString *)CFDictionaryGetValue((CFDictionaryRef)a2, @"target");
    CFDictionaryRef v21 = (const __CFDictionary *)CFDictionaryGetValue((CFDictionaryRef)a2, @"sampler");
    if (!v21) {
      CFDictionaryRef v21 = (const __CFDictionary *)a2;
    }
    v12[10] = sub_1B643D8D8(v21);
    a2 = Value;
  }
  if (!a2) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v14, v15, v16, v17, v18, v19, (uint64_t)"targetName");
  }
  sub_1B65F6604((uint64_t)v12, a2, v14, v15, v16, v17, v18, v19);
  if (!CFEqual(a2, @"COLOR"))
  {
    if (CFEqual(a2, @"DEPTH"))
    {
      *((unsigned char *)v12 + 88) |= 2u;
      int v25 = *(_DWORD *)(v11 + 184) | 0x4000000;
      goto LABEL_11;
    }
    CFDictionaryRef v30 = (const __CFDictionary *)sub_1B65154C8(v10, v26, v27, v28, v29, v22, v23, v24);
    if (v30)
    {
      CFDictionaryRef v34 = v30;
      CFDictionaryRef v35 = (const __CFDictionary *)CFDictionaryGetValue(v30, @"targets");
      if (v35)
      {
        uint64_t v36 = (void *)CFDictionaryGetValue(v35, a2);
        if (v36) {
          goto LABEL_23;
        }
      }
      CFDictionaryRef v37 = (const __CFDictionary *)CFDictionaryGetValue(v34, @"symbols");
      if (v37)
      {
        uint64_t v41 = (uint64_t)CFDictionaryGetValue(v37, a2);
LABEL_21:
        uint64_t v36 = (void *)v41;
LABEL_23:
        sub_1B65FA3B0(v11, (uint64_t)v12, (uint64_t)a1, v10, v36, v31, v32, v33);
        return;
      }
      if (sub_1B65FA5E4(a2, v38, v39, v40))
      {
        uint64_t v43 = @"semantic";
        v44[0] = a2;
        uint64_t v41 = objc_msgSend_dictionaryWithObjects_forKeys_count_(MEMORY[0x1E4F1C9E8], v42, (uint64_t)v44, (uint64_t)&v43, 1);
        goto LABEL_21;
      }
    }
    uint64_t v36 = 0;
    goto LABEL_23;
  }
  *((unsigned char *)v12 + 88) |= 1u;
  int v25 = *(_DWORD *)(v11 + 184) | 0x2000000;
LABEL_11:
  *(_DWORD *)(v11 + 184) = v25;

  sub_1B65FA3B0(v11, (uint64_t)v12, (uint64_t)a1, v10, 0, v22, v23, v24);
}

void sub_1B65F88E4(uint64_t a1, CFDictionaryRef theDict, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  void context[3] = *MEMORY[0x1E4F143B8];
  if (!a1)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
    if (theDict) {
      goto LABEL_3;
    }
LABEL_6:
    *(_DWORD *)(a1 + 440) = 0;
    return;
  }
  if (!theDict) {
    goto LABEL_6;
  }
LABEL_3:
  CFIndex Count = CFDictionaryGetCount(theDict);
  CFIndex v18 = Count;
  *(_DWORD *)(a1 + 440) = 0;
  if (Count < 1)
  {
    CFIndex v19 = 0;
  }
  else
  {
    *(void *)(a1 + 432) = malloc_type_malloc(Count << 6, 0x1060040C031C1FFuLL);
    context[1] = a3;
    context[2] = 0;
    context[0] = a1;
    CFDictionaryApplyFunction(theDict, (CFDictionaryApplierFunction)sub_1B65F8A00, context);
    CFIndex v19 = *(unsigned int *)(a1 + 440);
  }
  if (v18 < v19) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. unexpected error in CFXFXPassSetOutput", v12, v13, v14, v15, v16, v17, (uint64_t)"(CFIndex)fxPass->_outputCount <= count");
  }
}

void sub_1B65F8A00(const void *a1, CFTypeRef cf1, uint64_t *a3)
{
  uint64_t v6 = *a3;
  uint64_t v5 = a3[1];
  if (CFEqual(cf1, @"COLOR"))
  {
    *(_DWORD *)(v6 + 184) |= 0xA00000u;
    if (!CFEqual(cf1, @"DEPTH"))
    {
      CFDictionaryRef v7 = 0;
LABEL_6:
      char v15 = 1;
      goto LABEL_7;
    }
LABEL_5:
    CFDictionaryRef v7 = 0;
    *(_DWORD *)(v6 + 184) |= 0x1200000u;
    goto LABEL_6;
  }
  if (CFEqual(cf1, @"DEPTH")) {
    goto LABEL_5;
  }
  CFDictionaryRef v31 = (const __CFDictionary *)sub_1B65154C8(v5, v8, v9, v10, v11, v12, v13, v14);
  if (!v31) {
    goto LABEL_33;
  }
  CFDictionaryRef v38 = v31;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(v31, @"targets");
  if (!Value || (CFDictionaryRef v40 = (const __CFDictionary *)CFDictionaryGetValue(Value, cf1)) == 0)
  {
    CFDictionaryRef v41 = (const __CFDictionary *)CFDictionaryGetValue(v38, @"symbols");
    if (v41)
    {
      CFDictionaryRef v42 = (const __CFDictionary *)CFDictionaryGetValue(v41, cf1);
      if (v42)
      {
        CFDictionaryRef v7 = v42;
        sub_1B63F2F54(0, @"Warning: symbol named %@ should be in \"targets\" not \"symbols\"", v32, v33, v34, v35, v36, v37, (uint64_t)cf1);
        goto LABEL_32;
      }
    }
LABEL_33:
    sub_1B63F2F54(0, @"Warning: _convertOutputsDescriptionToOutputs - can't find output named %@", v32, v33, v34, v35, v36, v37, (uint64_t)cf1);
    return;
  }
  CFDictionaryRef v7 = v40;
LABEL_32:
  char v15 = 0;
LABEL_7:
  uint64_t v16 = *(void *)(v6 + 432);
  uint64_t v17 = *(unsigned int *)(v6 + 440);
  uint64_t v18 = v16 + (v17 << 6);
  *(unsigned char *)(v18 + 48) = 0;
  CFIndex v19 = (unsigned char *)(v18 + 48);
  *(_DWORD *)(v18 + 20) = 0;
  uint64_t v20 = (_DWORD *)(v18 + 20);
  *(_DWORD *)(v16 + (v17 << 6)) = 1065353216;
  if (v7)
  {
    CFBooleanRef v21 = (const __CFBoolean *)CFDictionaryGetValue(v7, @"global");
    if (v21 && CFBooleanGetValue(v21)) {
      *uint64_t v20 = 2147483646;
    }
    CFBooleanRef v22 = (const __CFBoolean *)CFDictionaryGetValue(v7, @"persistent");
    if (v22 && CFBooleanGetValue(v22)) {
      *uint64_t v20 = 0x7FFFFFFF;
    }
    uint64_t v23 = (void *)CFDictionaryGetValue(v7, @"clearColor");
    if (v23)
    {
      uint64_t v27 = (const char *)objc_msgSend_UTF8String(v23, v24, v25, v26);
      sscanf(v27, "%f %f %f %f", v16 + (v17 << 6) + 32, v16 + (v17 << 6) + 36, v16 + (v17 << 6) + 40, v16 + (v17 << 6) + 44);
      *CFIndex v19 = 1;
    }
  }
  if (CFEqual(a1, @"color") || CFEqual(a1, @"color0"))
  {
    int v28 = 1;
  }
  else if (CFEqual(a1, @"color1"))
  {
    int v28 = 2;
  }
  else if (CFEqual(a1, @"color2"))
  {
    int v28 = 3;
  }
  else if (CFEqual(a1, @"color3"))
  {
    int v28 = 4;
  }
  else if (CFEqual(a1, @"depth"))
  {
    int v28 = 0;
  }
  else
  {
    if (!CFEqual(a1, @"stencil"))
    {
      sub_1B63F2F54(16, @"Error: _convertOutputsDescriptionToOutputs - unknown output type: %@", v43, v44, v45, v46, v47, v48, (uint64_t)a1);
      return;
    }
    int v28 = 5;
  }
  uint64_t v29 = v16 + (v17 << 6);
  *(_DWORD *)(v29 + 16) = v28;
  *(_DWORD *)(v6 + 184) |= 0x200000u;
  if (v15) {
    CFTypeRef v30 = 0;
  }
  else {
    CFTypeRef v30 = CFRetain(cf1);
  }
  *(void *)(v29 + 8) = v30;
  ++*(_DWORD *)(v6 + 440);
}

BOOL sub_1B65F8D04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"pass");
  }
  return *(void *)(a1 + 96) != 0;
}

const void *sub_1B65F8D58(uint64_t a1, uint64_t a2, char *key, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)key, a4, a5, a6, a7, a8, (uint64_t)"pass");
  }
  if (!*(void *)(a2 + 96)) {
    return 0;
  }
  CFDictionaryRef v11 = *(const __CFDictionary **)(a2 + 560);
  if (!v11)
  {
    long long v12 = *(_OWORD *)(MEMORY[0x1E4F1D540] + 16);
    *(_OWORD *)&valueCallBacks.version = *MEMORY[0x1E4F1D540];
    *(_OWORD *)&valueCallBacks.release = v12;
    valueCallBacks.equal = *(CFDictionaryEqualCallBack *)(MEMORY[0x1E4F1D540] + 32);
    valueCallBacks.release = (CFDictionaryReleaseCallBack)sub_1B65F9074;
    *(void *)(a2 + 560) = CFDictionaryCreateMutable(0, 0, 0, &valueCallBacks);
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterAddObserver(LocalCenter, (const void *)a2, (CFNotificationCallback)sub_1B65F907C, @"kCFXNotificationRendererElementWillDie", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
    CFDictionaryRef v11 = *(const __CFDictionary **)(a2 + 560);
  }
  CFDictionaryRef Value = CFDictionaryGetValue(v11, key);
  if (!Value)
  {
    uint64_t v22 = *(void *)(a2 + 96);
    if (v22 && sub_1B64AF488(*(void *)(a2 + 96), v14, v15, v16, v17, v18, v19, v20))
    {
      uint64_t v30 = sub_1B63F1678((uint64_t)key);
      if (a1)
      {
        sub_1B6445900(a1, v23, v24, v25, v26, v27, v28, v29);
        CFDictionaryRef v31 = (__int16 *)(key + 80);
        int v32 = (*((unsigned __int16 *)key + 40) >> 11) & 7;
        int v33 = sub_1B6447B70(a1);
        char v34 = sub_1B6446D64(a1);
        int v35 = 8 * (v34 & 3);
        if ((v34 & 3) != 0) {
          int v36 = 32 * (sub_1B6447B7C(a1) & 3);
        }
        else {
          int v36 = 0;
        }
        int v38 = v35 | v32 | v36;
        unsigned int v39 = sub_1B63CBCB0(a1) << 16;
      }
      else
      {
        int v33 = 0;
        CFDictionaryRef v31 = (__int16 *)(key + 80);
        int v38 = (*((unsigned __int16 *)key + 40) >> 11) & 7;
        unsigned int v39 = 0x10000;
      }
      uint64_t v40 = sub_1B63F1710((uint64_t)key);
      uint64_t v41 = sub_1B63F16EC((uint64_t)key);
      if ((!sub_1B63F16E0((uint64_t)key) || (v38 & 0x18) != 0) && (*(unsigned char *)(a2 + 185) & 4) != 0
        || v40 && (sub_1B6584A30(v40, 0, v43, v44, v45, v46, v47, v48) & 1) != 0)
      {
        __int16 v49 = *v31;
LABEL_32:
        *((_WORD *)key + 40) = v49 | 0x400;
        int v75 = v33 | (v38 << 24);
        uint64_t v76 = sub_1B63F16EC((uint64_t)key);
        uint64_t v77 = sub_1B63F1730((uint64_t)key);
        uint64_t v78 = sub_1B63F1750((uint64_t)key);
        uint64_t v74 = sub_1B63F1710((uint64_t)key);
        unint64_t v70 = v75 | v39 | 0x10;
        uint64_t v71 = (void *)v30;
        uint64_t v72 = (__n128 *)v76;
        uint64_t v73 = v77;
        char v68 = v78;
LABEL_33:
        CFDictionaryRef Value = (const void *)sub_1B659DD34(v71, v72, v73, (uint64_t)v68, 0, v74, v70, v69);
        double v79 = *(__CFDictionary **)(a2 + 560);
        if (Value)
        {
          CFDictionarySetValue(v79, key, Value);
          CFRelease(Value);
        }
        else
        {
          CFDictionaryRemoveValue(v79, key);
        }
        return Value;
      }
      if (v41)
      {
        unsigned int v50 = sub_1B6584A30(v41, 0, v43, v44, v45, v46, v47, v48) ^ 1;
        if (!v40) {
          goto LABEL_31;
        }
      }
      else
      {
        unsigned int v50 = 1;
        if (!v40) {
          goto LABEL_31;
        }
      }
      if (v50)
      {
        uint64_t v51 = sub_1B64AF43C(v40, v42, v43, v44, v45, v46, v47, v48);
        uint64_t v57 = sub_1B6475290(v51, 16, 0, v52, v53, v54, v55, v56);
        if (v57)
        {
          BOOL v65 = sub_1B6475F88(v57, v58, v59, v60, v61, v62, v63, v64);
          __int16 v49 = *v31;
          if (v65) {
            goto LABEL_32;
          }
LABEL_30:
          *((_WORD *)key + 40) = v49 & 0xFBFF;
          uint64_t v66 = sub_1B63F16EC((uint64_t)key);
          uint64_t v67 = sub_1B63F1730((uint64_t)key);
          char v68 = sub_1B63F1750((uint64_t)key);
          unint64_t v70 = v33 | (v38 << 24) | v39;
          uint64_t v71 = (void *)v30;
          uint64_t v72 = (__n128 *)v66;
          uint64_t v73 = v67;
          uint64_t v74 = v22;
          goto LABEL_33;
        }
      }
LABEL_31:
      __int16 v49 = *v31;
      if (!v50) {
        goto LABEL_32;
      }
      goto LABEL_30;
    }
    return 0;
  }
  return Value;
}

void sub_1B65F9074(uint64_t a1, uint64_t a2)
{
}

void sub_1B65F907C(int a1, uint64_t a2, uint64_t a3, void *key, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(__CFDictionary **)(a2 + 560);
  if (!v9)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, (uint64_t)key, a5, a6, a7, a8, (uint64_t)"pass->_overridedRendererElementsProgramHashcodes");
    uint64_t v9 = *(__CFDictionary **)(a2 + 560);
  }

  CFDictionaryRemoveValue(v9, key);
}

uint64_t sub_1B65F90E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  return *(void *)(a1 + 104);
}

uint64_t sub_1B65F9130(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"fxPass");
  }
  return *(void *)(a1 + 112);
}

uint64_t sub_1B65F917C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1) {
    return *(void *)a1;
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"passInstance");
  return 0;
}

void sub_1B65F91C8(void *a1)
{
  int v2 = (const void *)a1[10];
  if (v2)
  {
    CFRelease(v2);
    a1[10] = 0;
  }
  uint64_t v3 = (const void *)a1[7];
  if (v3)
  {
    CFRelease(v3);
    a1[7] = 0;
  }
  uint64_t v4 = (const void *)a1[9];
  if (v4)
  {
    CFRelease(v4);
    a1[9] = 0;
  }
  uint64_t v5 = (const void *)a1[13];
  if (v5) {
    _Block_release(v5);
  }
  uint64_t v6 = (const void *)a1[6];
  if (v6)
  {
    CFRelease(v6);
    a1[6] = 0;
  }
}

CFStringRef sub_1B65F9234(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXFXPassInput %@>", a1[7]);
}

CFStringRef sub_1B65F9278(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXFXPassInput %@>", a1[7]);
}

__CFArray *sub_1B65F92BC(uint64_t a1)
{
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 2, MEMORY[0x1E4F1D510]);
  uint64_t v3 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v17 = 2;
  int valuePtr = 5;
  uint64_t v16 = a1 + 80;
  CFNumberRef v4 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v5 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v3, @"name", @"sampler");
  CFDictionarySetValue(v3, @"type", v4);
  CFDictionarySetValue(v3, @"address", v6);
  CFDictionarySetValue(v3, @"semantic", v5);
  CFArrayAppendValue(Mutable, v3);
  CFRelease(v5);
  CFRelease(v3);
  CFRelease(v6);
  CFRelease(v4);
  CFDictionaryRef v7 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v17 = 2;
  int valuePtr = 5;
  uint64_t v16 = a1 + 56;
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v9 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v7, @"name", @"symbolName");
  CFDictionarySetValue(v7, @"type", v8);
  CFDictionarySetValue(v7, @"address", v10);
  CFDictionarySetValue(v7, @"semantic", v9);
  CFArrayAppendValue(Mutable, v7);
  CFRelease(v9);
  CFRelease(v7);
  CFRelease(v10);
  CFRelease(v8);
  CFDictionaryRef v11 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v17 = 2;
  int valuePtr = 5;
  uint64_t v16 = a1 + 48;
  CFNumberRef v12 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v13 = CFNumberCreate(0, kCFNumberSInt32Type, &v17);
  CFNumberRef v14 = CFNumberCreate(0, kCFNumberLongType, &v16);
  CFDictionarySetValue(v11, @"name", @"uniformName");
  CFDictionarySetValue(v11, @"type", v12);
  CFDictionarySetValue(v11, @"address", v14);
  CFDictionarySetValue(v11, @"semantic", v13);
  CFArrayAppendValue(Mutable, v11);
  CFRelease(v13);
  CFRelease(v11);
  CFRelease(v14);
  CFRelease(v12);
  return Mutable;
}

void sub_1B65F95EC(uint64_t a1)
{
  CFAllocatorRef v2 = *(void (**)(uint64_t *))(a1 + 272);
  if (v2)
  {
    uint64_t v26 = a1;
    long long v27 = 0u;
    long long v28 = 0u;
    uint64_t v29 = 0;
    unint64_t v30 = 0xBFF0000000000000;
    uint64_t v3 = *(void *)(a1 + 280);
    uint64_t v33 = 0;
    uint64_t v31 = v3;
    uint64_t v32 = 0;
    uint64_t v34 = 0;
    v2(&v26);
  }
  CFNumberRef v4 = *(const void **)(a1 + 16);
  if (v4)
  {
    CFRelease(v4);
    *(void *)(a1 + 16) = 0;
  }
  CFNumberRef v5 = *(const void **)(a1 + 536);
  if (v5)
  {
    CFRelease(v5);
    *(void *)(a1 + 536) = 0;
  }
  CFNumberRef v6 = *(const void **)(a1 + 48);
  if (v6)
  {
    CFRelease(v6);
    *(void *)(a1 + 48) = 0;
  }
  CFDictionaryRef v7 = *(const void **)(a1 + 56);
  if (v7)
  {
    CFRelease(v7);
    *(void *)(a1 + 56) = 0;
  }
  CFNumberRef v8 = *(const void **)(a1 + 64);
  if (v8)
  {
    CFRelease(v8);
    *(void *)(a1 + 64) = 0;
  }
  CFNumberRef v9 = *(const void **)(a1 + 72);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 72) = 0;
  }
  CFNumberRef v10 = *(const void **)(a1 + 88);
  if (v10)
  {
    CFRelease(v10);
    *(void *)(a1 + 88) = 0;
  }
  CFDictionaryRef v11 = *(const void **)(a1 + 96);
  if (v11)
  {
    CFRelease(v11);
    *(void *)(a1 + 96) = 0;
  }
  CFNumberRef v12 = *(const void **)(a1 + 104);
  if (v12)
  {
    CFRelease(v12);
    *(void *)(a1 + 104) = 0;
  }
  sub_1B64516BC(*(CFTypeRef *)(a1 + 112));
  CFNumberRef v13 = *(const void **)(a1 + 456);
  if (v13)
  {
    CFRelease(v13);
    *(void *)(a1 + 456) = 0;
  }
  CFNumberRef v14 = *(const void **)(a1 + 472);
  if (v14)
  {
    CFRelease(v14);
    *(void *)(a1 + 472) = 0;
  }
  uint64_t v15 = *(const void **)(a1 + 464);
  if (v15)
  {
    CFRelease(v15);
    *(void *)(a1 + 464) = 0;
  }
  if (*(void *)(a1 + 560))
  {
    LocalCenter = CFNotificationCenterGetLocalCenter();
    CFNotificationCenterRemoveObserver(LocalCenter, (const void *)a1, @"kCFXNotificationRendererElementWillDie", 0);
    int v17 = *(const void **)(a1 + 560);
    if (v17)
    {
      CFRelease(v17);
      *(void *)(a1 + 560) = 0;
    }
  }
  if (*(uint64_t *)(a1 + 520) >= 1)
  {
    uint64_t v18 = 0;
    do
      CFRelease(*(CFTypeRef *)(*(void *)(a1 + 512) + 8 * v18++));
    while (*(void *)(a1 + 520) > v18);
  }
  unint64_t v19 = *(unsigned int *)(a1 + 440);
  if (v19)
  {
    unint64_t v20 = 0;
    uint64_t v21 = *(void *)(a1 + 432);
    uint64_t v22 = 8;
    do
    {
      uint64_t v23 = *(const void **)(v21 + v22);
      if (v23)
      {
        CFRelease(v23);
        uint64_t v21 = *(void *)(a1 + 432);
        *(void *)(v21 + v22) = 0;
        unint64_t v19 = *(unsigned int *)(a1 + 440);
      }
      ++v20;
      v22 += 64;
    }
    while (v20 < v19);
  }
  free(*(void **)(a1 + 512));
  free(*(void **)(a1 + 432));
  uint64_t v24 = *(const void **)(a1 + 544);
  if (v24) {
    _Block_release(v24);
  }
  uint64_t v25 = *(const void **)(a1 + 552);
  if (v25) {
    _Block_release(v25);
  }
}

CFStringRef sub_1B65F97DC(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXFXPass %@>", a1[2]);
}

CFStringRef sub_1B65F9820(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXFXPass %@>", a1[2]);
}

__CFArray *sub_1B65F9864(uint64_t a1)
{
  Mutable = CFArrayCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D510]);
  uint64_t v3 = (const CFDictionaryKeyCallBacks *)MEMORY[0x1E4F1D530];
  CFNumberRef v4 = (const CFDictionaryValueCallBacks *)MEMORY[0x1E4F1D540];
  CFNumberRef v5 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v39 = 2;
  int valuePtr = 5;
  uint64_t v38 = a1 + 16;
  CFNumberRef v6 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v7 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  CFNumberRef v8 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v5, @"name", @"name");
  CFDictionarySetValue(v5, @"type", v6);
  CFDictionarySetValue(v5, @"address", v8);
  CFDictionarySetValue(v5, @"semantic", v7);
  CFArrayAppendValue(Mutable, v5);
  CFRelease(v7);
  CFRelease(v5);
  CFRelease(v8);
  CFRelease(v6);
  CFNumberRef v9 = CFDictionaryCreateMutable(0, 4, v3, v4);
  int v39 = 2;
  int valuePtr = 5;
  uint64_t v38 = a1 + 88;
  CFNumberRef v10 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v11 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  CFNumberRef v12 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v9, @"name", @"program");
  CFDictionarySetValue(v9, @"type", v10);
  CFDictionarySetValue(v9, @"address", v12);
  CFDictionarySetValue(v9, @"semantic", v11);
  CFArrayAppendValue(Mutable, v9);
  CFRelease(v11);
  CFRelease(v9);
  CFRelease(v12);
  CFRelease(v10);
  CFNumberRef v13 = CFDictionaryCreateMutable(0, 4, v3, v4);
  int v39 = 0;
  int valuePtr = 2;
  uint64_t v38 = a1 + 24;
  CFNumberRef v14 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v15 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  CFNumberRef v16 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v13, @"name", @"draw");
  CFDictionarySetValue(v13, @"type", v14);
  CFDictionarySetValue(v13, @"address", v16);
  CFDictionarySetValue(v13, @"semantic", v15);
  CFArrayAppendValue(Mutable, v13);
  CFRelease(v15);
  CFRelease(v13);
  CFRelease(v16);
  CFRelease(v14);
  int v17 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v39 = 2;
  int valuePtr = 5;
  uint64_t v38 = a1 + 448;
  CFNumberRef v18 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v19 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  CFNumberRef v20 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v17, @"name", @"pointOfView");
  CFDictionarySetValue(v17, @"type", v18);
  CFDictionarySetValue(v17, @"address", v20);
  CFDictionarySetValue(v17, @"semantic", v19);
  CFArrayAppendValue(Mutable, v17);
  CFRelease(v19);
  CFRelease(v17);
  CFRelease(v20);
  CFRelease(v18);
  uint64_t v21 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v39 = 2;
  int valuePtr = 5;
  uint64_t v38 = a1 + 456;
  CFNumberRef v22 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v23 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  CFNumberRef v24 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v21, @"name", @"rootNode");
  CFDictionarySetValue(v21, @"type", v22);
  CFDictionarySetValue(v21, @"address", v24);
  CFDictionarySetValue(v21, @"semantic", v23);
  CFArrayAppendValue(Mutable, v21);
  CFRelease(v23);
  CFRelease(v21);
  CFRelease(v24);
  CFRelease(v22);
  uint64_t v25 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v39 = 2;
  int valuePtr = 5;
  uint64_t v38 = a1 + 472;
  CFNumberRef v26 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v27 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  CFNumberRef v28 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v25, @"name", @"mirrorNode");
  CFDictionarySetValue(v25, @"type", v26);
  CFDictionarySetValue(v25, @"address", v28);
  CFDictionarySetValue(v25, @"semantic", v27);
  CFArrayAppendValue(Mutable, v25);
  CFRelease(v27);
  CFRelease(v25);
  CFRelease(v28);
  CFRelease(v26);
  uint64_t v29 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v39 = 2;
  int valuePtr = 5;
  uint64_t v38 = a1 + 96;
  CFNumberRef v30 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v31 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  CFNumberRef v32 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v29, @"name", @"material");
  CFDictionarySetValue(v29, @"type", v30);
  CFDictionarySetValue(v29, @"address", v32);
  CFDictionarySetValue(v29, @"semantic", v31);
  CFArrayAppendValue(Mutable, v29);
  CFRelease(v31);
  CFRelease(v29);
  CFRelease(v32);
  CFRelease(v30);
  uint64_t v33 = CFDictionaryCreateMutable(0, 4, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  int v39 = 2;
  int valuePtr = 5;
  uint64_t v38 = a1 + 536;
  CFNumberRef v34 = CFNumberCreate(0, kCFNumberSInt32Type, &valuePtr);
  CFNumberRef v35 = CFNumberCreate(0, kCFNumberSInt32Type, &v39);
  CFNumberRef v36 = CFNumberCreate(0, kCFNumberLongType, &v38);
  CFDictionarySetValue(v33, @"name", @"nameToInput");
  CFDictionarySetValue(v33, @"type", v34);
  CFDictionarySetValue(v33, @"address", v36);
  CFDictionarySetValue(v33, @"semantic", v35);
  CFArrayAppendValue(Mutable, v33);
  CFRelease(v35);
  CFRelease(v33);
  CFRelease(v36);
  CFRelease(v34);
  return Mutable;
}

uint64_t sub_1B65F9FF8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_isEqualToString_(a1, a2, @"keep", a4)) {
    return 0;
  }
  if (objc_msgSend_isEqualToString_(a1, v5, @"zero", v6)) {
    return 1;
  }
  if (objc_msgSend_isEqualToString_(a1, v8, @"replace", v9)) {
    return 2;
  }
  if (objc_msgSend_isEqualToString_(a1, v10, @"increment", v11)) {
    return 3;
  }
  if (objc_msgSend_isEqualToString_(a1, v12, @"decrement", v13)) {
    return 4;
  }
  if (objc_msgSend_isEqualToString_(a1, v14, @"invert", v15)) {
    return 5;
  }
  if (objc_msgSend_isEqualToString_(a1, v16, @"incrementWrap", v17)) {
    return 6;
  }
  if ((objc_msgSend_isEqualToString_(a1, v18, @"decrementWrap", v19) & 1) == 0)
  {
    sub_1B63F2F54(16, @"Error: unknown depth comparison function named %@", v20, v21, v22, v23, v24, v25, (uint64_t)a1);
    return 0;
  }
  return 7;
}

uint64_t sub_1B65FA110(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_isEqualToString_(a1, a2, @"zero", a4)) {
    return 0;
  }
  if (objc_msgSend_isEqualToString_(a1, v5, @"one", v6)) {
    return 1;
  }
  if (objc_msgSend_isEqualToString_(a1, v8, @"srcColor", v9)) {
    return 2;
  }
  if (objc_msgSend_isEqualToString_(a1, v10, @"oneMinusSrcColor", v11)) {
    return 3;
  }
  if (objc_msgSend_isEqualToString_(a1, v12, @"srcAlpha", v13)) {
    return 4;
  }
  if (objc_msgSend_isEqualToString_(a1, v14, @"oneMinusSrcAlpha", v15)) {
    return 5;
  }
  if (objc_msgSend_isEqualToString_(a1, v16, @"dstColor", v17)) {
    return 6;
  }
  if (objc_msgSend_isEqualToString_(a1, v18, @"oneMinusDstColor", v19)) {
    return 7;
  }
  if (objc_msgSend_isEqualToString_(a1, v20, @"dstAlpha", v21)) {
    return 8;
  }
  if (objc_msgSend_isEqualToString_(a1, v22, @"oneMinusDstAlpha", v23)) {
    return 9;
  }
  if (objc_msgSend_isEqualToString_(a1, v24, @"constantColor", v25)) {
    return 10;
  }
  if (objc_msgSend_isEqualToString_(a1, v26, @"oneMinusConstantColor", v27)) {
    return 11;
  }
  if (objc_msgSend_isEqualToString_(a1, v28, @"constantAlpha", v29)) {
    return 12;
  }
  if (objc_msgSend_isEqualToString_(a1, v30, @"oneMinusConstantAlpha", v31)) {
    return 13;
  }
  if ((objc_msgSend_isEqualToString_(a1, v32, @"alphaSaturate", v33) & 1) == 0)
  {
    sub_1B63F2F54(16, @"Error: unknown blend factor named %@", v34, v35, v36, v37, v38, v39, (uint64_t)a1);
    return 1;
  }
  return 14;
}

uint64_t sub_1B65FA2EC(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_isEqualToString_(a1, a2, @"add", a4)) {
    return 0;
  }
  if (objc_msgSend_isEqualToString_(a1, v5, @"substract", v6)) {
    return 1;
  }
  if (objc_msgSend_isEqualToString_(a1, v8, @"reverseSubstract", v9)) {
    return 2;
  }
  if (objc_msgSend_isEqualToString_(a1, v10, @"min", v11)) {
    return 3;
  }
  if ((objc_msgSend_isEqualToString_(a1, v12, @"max", v13) & 1) == 0)
  {
    sub_1B63F2F54(16, @"Error: unknown blend op named %@", v14, v15, v16, v17, v18, v19, (uint64_t)a1);
    return 0;
  }
  return 4;
}

void sub_1B65FA3B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)"pass");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, (uint64_t)a5, a6, a7, a8, (uint64_t)"input");
LABEL_3:
  *(_DWORD *)(a2 + 16) = 0;
  CFNumberRef v12 = objc_msgSend_valueForKey_(a5, (const char *)a2, @"semantic", a4);
  if (v12)
  {
    int v20 = sub_1B65FA5E4(v12, v13, v14, v15);
    if (v20)
    {
      *(_DWORD *)(a2 + 32) = v20;
      uint64_t v23 = objc_msgSend_valueForKey_(a5, v21, @"channel", v22);
      *(_DWORD *)(a2 + 112) = objc_msgSend_intValue(v23, v24, v25, v26);
    }
  }
  else
  {
    if ((*(unsigned char *)(a2 + 88) & 3) != 0) {
      goto LABEL_9;
    }
    if (!a5)
    {
      sub_1B63F2F54(16, @"Error: description for input named %@ is missing", v14, v15, v16, v17, v18, v19, a3);
      return;
    }
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue((CFDictionaryRef)a5, @"type");
    if (!Value)
    {
      sub_1B63F2F54(16, @"Error: 'type' is required for symbol %@", v28, v29, v30, v31, v32, v33, a3);
      return;
    }
    CFStringRef v34 = Value;
    if (CFEqual(Value, @"color") || CFEqual(v34, @"depth") || CFEqual(v34, @"stencil"))
    {
LABEL_9:
      *(_DWORD *)(a2 + 16) = 1;
      return;
    }
    *(_DWORD *)(a2 + 16) = 2;
    *(void *)(a2 + 24) = sub_1B63CA58C(v34);
    *(_WORD *)(a2 + 20) = sub_1B63CA610(v34);
    unsigned __int16 v66 = 0;
    uint64_t v39 = sub_1B6515A60(a4, *(void **)(a2 + 56), &v66, 0, v35, v36, v37, v38);
    *(void *)(a2 + 96) = v39;
    if (v39 == -1)
    {
      *(_DWORD *)(a2 + 16) = 0;
    }
    else
    {
      int v47 = v66;
      if (v66 != *(unsigned __int16 *)(a2 + 20))
      {
        sub_1B63F2F54(17, @"Assertion '%s' failed. pass:_setupInput unexpected type", v41, v42, v43, v44, v45, v46, (uint64_t)"typeTest == input->_baseType");
        int v47 = *(unsigned __int16 *)(a2 + 20);
      }
      if (v47 == 5)
      {
        uint64_t v48 = objc_msgSend_valueForKey_(a5, v40, @"image", v42);
        if (v48)
        {
          CFURLRef v52 = sub_1B643AE68(v48, v49, v50, v51);
          if (v52)
          {
            CFURLRef v53 = v52;
            uint64_t v54 = (const void *)sub_1B6564EC0();
            sub_1B6564F64((uint64_t)v54, v53, v55, v56, v57, v58, v59, v60);
            CFRelease(v53);
            sub_1B6515A58(a4, *(void **)(a2 + 56), v54, v61, v62, v63, v64, v65);
            CFRelease(v54);
          }
        }
      }
    }
  }
}

uint64_t sub_1B65FA5E4(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_isEqualToString_(a1, a2, @"position", a4)) {
    return 1;
  }
  if (objc_msgSend_isEqualToString_(a1, v5, @"normal", v6)) {
    return 2;
  }
  if (objc_msgSend_isEqualToString_(a1, v8, @"color", v9)) {
    return 3;
  }
  if (objc_msgSend_isEqualToString_(a1, v10, @"texcoord", v11)) {
    return 4;
  }
  if (objc_msgSend_isEqualToString_(a1, v12, @"tangent", v13)) {
    return 5;
  }
  if (objc_msgSend_isEqualToString_(a1, v14, @"modelViewProjectionTransform", v15)) {
    return 6;
  }
  if (objc_msgSend_isEqualToString_(a1, v16, @"modelViewTransform", v17)) {
    return 7;
  }
  if (objc_msgSend_isEqualToString_(a1, v18, @"modelTransform", v19)) {
    return 8;
  }
  if (objc_msgSend_isEqualToString_(a1, v20, @"viewTransform", v21)) {
    return 9;
  }
  if (objc_msgSend_isEqualToString_(a1, v22, @"projectionTransform", v23)) {
    return 10;
  }
  if (objc_msgSend_isEqualToString_(a1, v24, @"normalTransform", v25)) {
    return 11;
  }
  if (objc_msgSend_isEqualToString_(a1, v26, @"modelViewProjectionInverseTransform", v27)) {
    return 12;
  }
  if (objc_msgSend_isEqualToString_(a1, v28, @"modelViewInverseTransform", v29)) {
    return 13;
  }
  if (objc_msgSend_isEqualToString_(a1, v30, @"modelInverseTransform", v31)) {
    return 14;
  }
  if (objc_msgSend_isEqualToString_(a1, v32, @"viewInverseTransform", v33)) {
    return 15;
  }
  if (objc_msgSend_isEqualToString_(a1, v34, @"projectionInverseTransform", v35)) {
    return 16;
  }
  if (objc_msgSend_isEqualToString_(a1, v36, @"normalInverseTransform", v37)) {
    return 17;
  }
  return 0;
}

void sub_1B65FA9EC(uint64_t a1)
{
}

uint64_t sub_1B65FAC44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B6535824(*(void *)(*(void *)(a1 + 32) + 16), *(CFTypeRef *)(*(void *)(a1 + 32) + 32), a3, a4, a5, a6, a7, a8);
}

void sub_1B65FB194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B6535C68(*(void *)(*(void *)(a1 + 32) + 16), *(const void **)(a1 + 40), *(void *)(a1 + 48), a4, a5, a6, a7, a8);
  uint64_t v9 = *(const void **)(a1 + 48);

  CFRelease(v9);
}

uint64_t sub_1B65FB3D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(unsigned char *)(a1 + 8) = 0;
  *(void *)a1 = &unk_1F0FB40B8;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 208) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(_OWORD *)(a1 + 320) = 0u;
  *(_OWORD *)(a1 + 336) = 0u;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 480) = 0u;
  *(_OWORD *)(a1 + 496) = 0u;
  *(_OWORD *)(a1 + 512) = 0u;
  *(_OWORD *)(a1 + 528) = 0u;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(void *)(a1 + 688) = 0;
  *(void *)(a1 + 728) = 0;
  *(_DWORD *)(a1 + 736) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 704) = 0u;
  *(unsigned char *)(a1 + 720) = 0;
  *(void *)(a1 + 16) = a2;
  uint64_t v9 = sub_1B644558C(a2, a2, a3, a4, a5, a6, a7, a8);
  *(void *)(a1 + 24) = v9;
  uint64_t v17 = sub_1B64B28FC(v9, v10, v11, v12, v13, v14, v15, v16);
  *(void *)(a1 + 32) = v17;
  *(_WORD *)(a1 + 48) = 15;
  sub_1B6624920(v17, 0xFu);
  return a1;
}

void sub_1B65FB4BC(_Unwind_Exception *a1)
{
  sub_1B644E78C(v4, 0);
  sub_1B6E306F8(v3, v2, v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B65FB4E4(uint64_t a1)
{
  *(void *)a1 = &unk_1F0FB40B8;
  sub_1B6624994(*(int16x4_t **)(a1 + 32), *(unsigned __int16 *)(a1 + 48));
  sub_1B644E78C((CFX::RG::Resource **)(a1 + 728), 0);
  for (uint64_t i = 712; i != 696; i -= 8)
  {
    uint64_t v3 = *(void **)(a1 + i);
    if (v3) {
  }
    }
  CFNumberRef v4 = *(void **)(a1 + 688);
  if (v4) {

  }
  return a1;
}

void sub_1B65FB564(_Unwind_Exception *a1)
{
  sub_1B644E78C((CFX::RG::Resource **)(v1 + 728), 0);
  sub_1B6E3086C(v1 + 720, v1 + 704, v1);
  _Unwind_Resume(a1);
}

void sub_1B65FB590(uint64_t a1)
{
  sub_1B65FB4E4(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B65FB5C8(uint64_t a1, CFX::RG::RenderGraphContext *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11 = (void *)sub_1B6445900(*(void *)(a1 + 16), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v15 = objc_msgSend_resourceManager(v11, v12, v13, v14);
  uint64_t v23 = sub_1B644558C(*(void *)(a1 + 16), v16, v17, v18, v19, v20, v21, v22);
  uint64_t v31 = sub_1B6446564(*(uint64_t **)(a1 + 16), v24, v25, v26, v27, v28, v29, v30);
  if (v31 && sub_1B64A3B48((uint64_t)v31, v32, v33, v34, v35, v36, v37, v38))
  {
    BOOL v39 = sub_1B64B2810(v23, 0) != 0;
    BOOL v94 = v39;
    unsigned int v93 = sub_1B6626FAC(*(void *)(a1 + 32));
    BOOL v40 = sub_1B6626FBC(*(void *)(a1 + 32)) != 0;
    unsigned int v91 = *(_DWORD *)(a3 + 172);
    BOOL v92 = v40;
    unint64_t v41 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v93) ^ ((0x9DDFEA08EB382D69 * v93) >> 47));
    unint64_t v42 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                          * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ v40)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v41 ^ (v41 >> 47))) ^ v40)));
    unint64_t v43 = 0x9DDFEA08EB382D69 * (v42 ^ (v42 >> 47));
    unint64_t v44 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69
          * (v43 ^ ((0x9DDFEA08EB382D69 * (v43 ^ v39)) >> 47) ^ (0x9DDFEA08EB382D69 * (v43 ^ v39)))) ^ ((0x9DDFEA08EB382D69 * (v43 ^ ((0x9DDFEA08EB382D69 * (v43 ^ v39)) >> 47) ^ (0x9DDFEA08EB382D69 * (v43 ^ v39)))) >> 47));
    unint64_t v45 = 0x9DDFEA08EB382D69
        * (v44 ^ ((0x9DDFEA08EB382D69 * (v44 ^ v91)) >> 47) ^ (0x9DDFEA08EB382D69 * (v44 ^ v91)));
    unint64_t v46 = 0x9DDFEA08EB382D69 * (v45 ^ (v45 >> 47));
    if (*(void *)(a1 + 680) != v46)
    {
      *(void *)(a1 + 680) = v46;
      sub_1B6626AF8(*(void *)(a1 + 32), *(void *)(a1 + 16));
      id v47 = objc_alloc_init(MEMORY[0x1E4F35228]);
      objc_msgSend_setConstantValue_type_withName_(v47, v48, (uint64_t)&v93, 33, @"LightCount");
      objc_msgSend_setConstantValue_type_withName_(v47, v49, (uint64_t)&v94, 53, @"has_IBL");
      objc_msgSend_setConstantValue_type_withName_(v47, v50, (uint64_t)&v92, 33, @"raytracing_use_function_constant");
      objc_msgSend_setConstantValue_type_withName_(v47, v51, (uint64_t)&v91, 33, @"quality_mode");
      uint64_t v52 = sub_1B6626EDC(*(void *)(a1 + 32));
      uint64_t v54 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_linkedFunctions_(v15, v53, @"vfx_rt_specular_trace", (uint64_t)v47, v52);

      uint64_t v55 = *(void **)(a1 + 688);
      if (v55 != (void *)v54)
      {
        if (v55) {

        }
        *(void *)(a1 + 688) = v54;
      }
      *(_DWORD *)(a1 + 588) = 0;
      sub_1B6626E64(*(void *)(a1 + 32));
    }
    uint64_t v56 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, *(const CFX::RG::Resource **)(a3 + 248));
    uint64_t v60 = *v56;
    uint64_t v61 = v56[1];
    unint64_t v62 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v60) ^ ((0x9DDFEA08EB382D69 * v60) >> 47));
    unint64_t v63 = 0x9DDFEA08EB382D69
        * ((0x9DDFEA08EB382D69 * (v62 ^ (v62 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                          * ((0x9DDFEA08EB382D69 * (v62 ^ (v62 >> 47))) ^ v61)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v62 ^ (v62 >> 47))) ^ v61)));
    unint64_t v64 = 0x9DDFEA08EB382D69 * (v63 ^ (v63 >> 47));
    if (*(void *)(a1 + 696) != v64)
    {
      *(void *)(a1 + 696) = v64;
      unsigned int v65 = v60 >> 1;
      unsigned int v66 = v61 >> 1;
      unsigned int v67 = (v61 >> 1) * (v60 >> 1);
      char v68 = objc_msgSend_device(v11, v57, v58, v59);
      uint64_t v69 = 96 * v67;
      uint64_t v71 = objc_msgSend_newBufferWithLength_options_(v68, v70, v69, 32);
      int v75 = *(void **)(a1 + 704);
      if (v75 != (void *)v71)
      {
        uint64_t v76 = v71;
        if (v75) {

        }
        *(void *)(a1 + 704) = v76;
      }
      uint64_t v77 = objc_msgSend_device(v11, v72, v73, v74);
      uint64_t v79 = objc_msgSend_newBufferWithLength_options_(v77, v78, v69, 32);
      uint64_t v80 = *(void **)(a1 + 712);
      if (v80 != (void *)v79)
      {
        uint64_t v81 = v79;
        if (v80) {

        }
        *(void *)(a1 + 712) = v81;
      }
      *(_DWORD *)(a1 + 588) = 0;
      long long v89 = 0u;
      long long v90 = 0u;
      long long v87 = 0u;
      long long v88 = 0u;
      long long v86 = 0u;
      if (v65 <= 1) {
        __int16 v82 = 1;
      }
      else {
        __int16 v82 = v65;
      }
      if (v66 <= 1) {
        __int16 v83 = 1;
      }
      else {
        __int16 v83 = v66;
      }
      RGTextureDescriptorMake2D(v82, v83, 25, (uint64_t)&v86);
      CFX::RG::RenderGraphContext::currentBuilder(a2);
      v85[2] = v88;
      v85[3] = v89;
      v85[4] = v90;
      v85[0] = v86;
      v85[1] = v87;
      uint64_t v96 = "distanceTex";
      char v95 = 2;
      sub_1B6458BE8((uint64_t *)&v96, (uint64_t)v85, &v95);
      sub_1B644E78C((CFX::RG::Resource **)(a1 + 728), v84);
    }
    *(unsigned char *)(a1 + 720) ^= 1u;
  }
}

uint64_t sub_1B65FB930(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  uint64_t v8 = *(void *)a5;
  v35[0] = (uint64_t)"RTSpecularTracePass";
  v35[1] = v8;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBD98, memory_order_acquire) & 1) == 0)
  {
    uint64_t v34 = a3;
    uint64_t v32 = a2;
    int v33 = __cxa_guard_acquire(&qword_1E9DDBD98);
    a2 = v32;
    a3 = v34;
    if (v33)
    {
      byte_1E9DDBD90 = 1;
      __cxa_guard_release(&qword_1E9DDBD98);
      a2 = v32;
      a3 = v34;
    }
  }
  if (byte_1E9DDBD90) {
    uint64_t v9 = 0x4C296BE714C36EAFLL;
  }
  else {
    uint64_t v9 = 0;
  }
  sub_1B653860C(a1, a2, a3, v35, v9, 0);
  *(void *)a1 = &unk_1F0FB40D8;
  *(void *)(a1 + 376) = a5;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  uint64_t v17 = (void *)sub_1B6445900(*(void *)(a1 + 368), v10, v11, v12, v13, v14, v15, v16);
  *(void *)(a1 + 392) = v17;
  *(void *)(a1 + 400) = objc_msgSend_resourceManager(v17, v18, v19, v20);
  uint64_t v21 = a4[4];
  unint64_t v22 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  uint64_t v23 = CFX::CrossFrameResourceManager::get(v21, v22);
  *(void *)(a1 + 384) = v23;
  if (!v23)
  {
    CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
    v35[0] = *(void *)(a1 + 368);
    sub_1B65FBB20();
  }
  sub_1B65FB5C8(v23, (CFX::RG::RenderGraphContext *)a4, a5, v24, v25, v26, v27, v28);
  uint64_t v29 = sub_1B63BE410(*(void **)(a1 + 392), a4[4]);
  uint64_t v30 = *(void *)(a1 + 384);
  *(void *)(v30 + 672) = v29;
  *(void *)(*(void *)(a1 + 376) + 320) = v30 + 64;
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(v30 + 728));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(*(void *)(a1 + 384) + 728));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(void *)(a1 + 376) + 264));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a5 + 248));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a5 + 272));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(a5 + 176));
  return a1;
}

void sub_1B65FBB08(_Unwind_Exception *a1)
{
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B65FBB20()
{
}

void sub_1B65FBB88(_Unwind_Exception *a1)
{
  MEMORY[0x1BA9B6D80](v1, 0x10A1C40D943C058);
  _Unwind_Resume(a1);
}

void sub_1B65FBBB0(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(void *)(*(void *)(a1 + 384) + 688))
  {
    uint64_t v10 = *a3;
    uint64_t v11 = sub_1B644558C(*(void *)(a1 + 368), a2, (uint64_t)a3, a4, a5, a6, a7, a8);
    uint64_t v19 = sub_1B6446564(*(uint64_t **)(a1 + 368), v12, v13, v14, v15, v16, v17, v18);
    if (v19)
    {
      if (sub_1B64A3B48((uint64_t)v19, v20, v21, v22, v23, v24, v25, v26))
      {
        uint64_t v34 = sub_1B6446564(*(uint64_t **)(a1 + 368), v27, v28, v29, v30, v31, v32, v33);
        sub_1B63E0460((uint64_t)v34, (uint64_t)v184, v35, v36, v37, v38, v39, v40);
        unint64_t v41 = (long long *)sub_1B6447988(*(void *)(a1 + 368), 1);
        long long v177 = v41[1];
        long long v178 = *v41;
        long long v175 = v41[3];
        long long v176 = v41[2];
        __n128 v183 = sub_1B64471F4(*(void *)(a1 + 368), 0, v42, v43, v44, v45, v46, v47);
        uint64_t v179 = sub_1B64B28FC(v11, v48, v49, v50, v51, v52, v53, v54);
        sub_1B6626AF8(v179, *(void *)(a1 + 368));
        id Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(a1 + 376) + 256));
        id v181 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(a1 + 376) + 248));
        id v56 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(a1 + 376) + 280));
        id v57 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(a1 + 376) + 176));
        id v58 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(a1 + 376) + 264));
        id v59 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(a1 + 376) + 272));
        uint64_t v60 = *(const CFX::RG::Resource **)(*(void *)(a1 + 376) + 288);
        if (v60) {
          id v61 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v60);
        }
        else {
          id v61 = 0;
        }
        id v62 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(a1 + 384) + 728));
        objc_msgSend_setTexture_atIndex_(v10, v63, (uint64_t)Texture, 0);
        objc_msgSend_setTexture_atIndex_(v10, v64, (uint64_t)v181, 1);
        objc_msgSend_setTexture_atIndex_(v10, v65, (uint64_t)v56, 2);
        objc_msgSend_setTexture_atIndex_(v10, v66, (uint64_t)v57, 3);
        objc_msgSend_setTexture_atIndex_(v10, v67, (uint64_t)v58, 4);
        objc_msgSend_setTexture_atIndex_(v10, v68, (uint64_t)v59, 5);
        objc_msgSend_setTexture_atIndex_(v10, v69, (uint64_t)v62, 7);
        objc_msgSend_setTexture_atIndex_(v10, v70, (uint64_t)v61, 10);
        uint64_t v71 = sub_1B64B2810(v11, 0);
        if (v71)
        {
          uint64_t v75 = objc_msgSend_textureForMaterialProperty_(*(void **)(a1 + 392), v72, v71, v74);
          if (v75) {
            objc_msgSend_setTexture_atIndex_(v10, v76, v75, 6);
          }
        }
        float32x2_t v180 = sub_1B6447FE4(**(float32x2_t ***)(a1 + 376), 0, v73, v74);
        uint64_t v77 = *(_OWORD **)(*(void *)(a1 + 376) + 320);
        v77[8] = v178;
        v77[9] = v177;
        v77[10] = v176;
        v77[11] = v175;
        uint64_t v84 = sub_1B649CD50(v184, (uint64_t)&v183, v78, v79, v80, v81, v82, v83);
        uint64_t v85 = 0;
        long long v86 = *((_OWORD *)v84 + 1);
        long long v87 = *((_OWORD *)v84 + 2);
        long long v88 = *((_OWORD *)v84 + 3);
        long long v89 = *(_OWORD **)(*(void *)(a1 + 376) + 320);
        v89[20] = *(_OWORD *)v84;
        v89[21] = v86;
        v89[22] = v87;
        v89[23] = v88;
        long long v90 = *(float32x4_t **)(a1 + 384);
        float32x4_t v91 = v90[24];
        float32x4_t v92 = v90[25];
        float32x4_t v93 = v90[26];
        float32x4_t v94 = v90[27];
        float32x4_t v95 = v90[13];
        float32x4_t v96 = v90[14];
        float32x4_t v97 = v90[15];
        v185[0] = v90[12];
        v185[1] = v95;
        v185[2] = v96;
        v185[3] = v97;
        do
        {
          v186[v85] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v91, COERCE_FLOAT(*(_OWORD *)&v185[v85])), v92, *(float32x2_t *)v185[v85].f32, 1), v93, v185[v85], 2), v94, v185[v85], 3);
          ++v85;
        }
        while (v85 != 4);
        long long v98 = v186[1];
        long long v99 = v186[2];
        long long v100 = v186[3];
        uint64_t v101 = *(_OWORD **)(*(void *)(a1 + 376) + 320);
        *uint64_t v101 = v186[0];
        v101[1] = v98;
        v101[2] = v99;
        v101[3] = v100;
        *(simd_float4x4 *)(*(void *)(*(void *)(a1 + 376) + 320) + 192) = __invert_f4(*(simd_float4x4 *)(*(void *)(a1 + 384) + 192));
        *(simd_float4x4 *)(*(void *)(*(void *)(a1 + 376) + 320) + 384) = __invert_f4(*(simd_float4x4 *)(*(void *)(a1 + 384) + 64));
        *(float *)(*(void *)(*(void *)(a1 + 376) + 320) + 512) = (float)((float)(unint64_t)objc_msgSend_width(v181, v102, v103, v104)
                                                                               * v180.f32[0])
                                                                       * 0.5;
        *(float *)(*(void *)(*(void *)(a1 + 376) + 320) + 516) = vmuls_lane_f32((float)(unint64_t)objc_msgSend_height(v181, v105, v106, v107), v180, 1)* 0.5;
        *(_OWORD *)(*(void *)(*(void *)(a1 + 376) + 320) + 528) = *(_OWORD *)(*(void *)(a1 + 376) + 208);
        *(_OWORD *)(*(void *)(*(void *)(a1 + 376) + 320) + 544) = *(_OWORD *)(*(void *)(a1 + 376) + 224);
        *(_OWORD *)(*(void *)(*(void *)(a1 + 376) + 320) + 576) = *(_OWORD *)(*(void *)(a1 + 376) + 192);
        *(float *)(*(void *)(*(void *)(a1 + 376) + 320) + 560) = (float)*(int *)(*(void *)(a1 + 376) + 184);
        uint64_t v108 = sub_1B64B2810(v11, 0);
        if (v108) {
          float v116 = sub_1B64763AC(v108, (uint64_t)v109, v110, v111, v112, v113, v114, v115);
        }
        else {
          float v116 = 0.0;
        }
        uint64_t v117 = *(void *)(*(void *)(a1 + 376) + 320);
        *(float *)(v117 + 592) = v116;
        objc_msgSend_setBytes_length_atIndex_(v10, v109, v117, 608, 8);
        objc_msgSend_setTexture_atIndex_(v10, v118, *(void *)(*(void *)(a1 + 384) + 672), 9);
        objc_msgSend_setBuffer_offset_atIndex_(v10, v119, *(void *)(*(void *)(a1 + 384) + 8 * *(unsigned __int8 *)(*(void *)(a1 + 384) + 720) + 704), 0, 10);
        objc_msgSend_setBuffer_offset_atIndex_(v10, v120, *(void *)(*(void *)(a1 + 384) + 8 * (*(unsigned char *)(*(void *)(a1 + 384) + 720) == 0) + 704), 0, 11);
        uint64_t v121 = sub_1B6626EB4(v179);
        objc_msgSend_useHeap_(v10, v122, v121, v123);
        uint64_t v124 = sub_1B6626EC4(v179);
        objc_msgSend_setBuffer_offset_atIndex_(v10, v125, v124, 0, 0);
        uint64_t v126 = sub_1B6626EBC(v179);
        objc_msgSend_setAccelerationStructure_atBufferIndex_(v10, v127, v126, 1);
        if (sub_1B6626FAC(v179))
        {
          uint64_t v128 = sub_1B6626ECC(v179);
          objc_msgSend_setBuffer_offset_atIndex_(v10, v129, v128, 0, 2);
        }
        if (sub_1B6626FBC(v179))
        {
          uint64_t v136 = *(void *)(a1 + 384);
          uint64_t v137 = *(void *)(v136 + 688);
          if (!v137)
          {
            sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v130, v131, v132, v133, v134, v135, (uint64_t)"_ptr != NULL");
            uint64_t v137 = *(void *)(v136 + 688);
          }
          v138 = (void *)sub_1B653EFB8(v137);
          v139 = sub_1B6626EE4(v179, v138);
          objc_msgSend_setIntersectionFunctionTable_atBufferIndex_(v10, v140, (uint64_t)v139, 3);
        }
        else
        {
          v139 = 0;
        }
        uint64_t v141 = sub_1B6626ED4(v179);
        unsigned int v145 = sub_1B6626FCC(v179, v142, v143, v144);
        objc_msgSend_useResources_count_usage_(v10, v146, v141, v145, 1);
        uint64_t v153 = *(void *)(a1 + 384);
        uint64_t v154 = *(void *)(v153 + 688);
        if (!v154)
        {
          sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v147, v148, v149, v150, v151, v152, (uint64_t)"_ptr != NULL");
          uint64_t v154 = *(void *)(v153 + 688);
        }
        uint64_t v155 = sub_1B653EFB8(v154);
        objc_msgSend_setComputePipelineState_(v10, v156, v155, v157);
        unint64_t v161 = (unint64_t)objc_msgSend_width(v181, v158, v159, v160) >> 1;
        unint64_t v171 = (unint64_t)objc_msgSend_height(v181, v162, v163, v164) >> 1;
        uint64_t v172 = *(void *)(a1 + 384);
        uint64_t v173 = *(void *)(v172 + 688);
        if (!v173)
        {
          sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v165, v166, v167, v168, v169, v170, (uint64_t)"_ptr != NULL");
          uint64_t v173 = *(void *)(v172 + 688);
        }
        v174 = (void *)sub_1B653EFB8(v173);
        v182[0] = v161;
        v182[1] = v171;
        v182[2] = 1;
        RGMTLComputeCommandEncoderDispatchOnGrid2D(v10, v174, (uint64_t)v182, 1);

        ++*(_DWORD *)(*(void *)(a1 + 384) + 736);
        sub_1B6626E64(v179);
      }
    }
  }
}

uint64_t sub_1B65FC1DC(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8 = *a5;
  uint64_t v33 = "RTSpecularSpatialReSTIRPass";
  uint64_t v34 = v8;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBDA8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v30 = a3;
    uint64_t v31 = a2;
    int v32 = __cxa_guard_acquire(&qword_1E9DDBDA8);
    a2 = v31;
    a3 = v30;
    if (v32)
    {
      qword_1E9DDBDA0 = (uint64_t)sub_1B65FD604("RT_SPECULAR_SPATIAL_RESTIR", 0x1Au);
      __cxa_guard_release(&qword_1E9DDBDA8);
      a2 = v31;
      a3 = v30;
    }
  }
  sub_1B653860C(a1, a2, a3, (uint64_t *)&v33, qword_1E9DDBDA0, 0);
  *(void *)a1 = &unk_1F0FB4960;
  *(void *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 416) = 0;
  uint64_t v9 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a4, (const CFX::RG::Resource *)a5[31]);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v19 = (void *)sub_1B6445900(*(void *)(a1 + 368), v12, v13, v14, v15, v16, v17, v18);
  *(void *)(a1 + 408) = v19;
  *(void *)(a1 + 416) = objc_msgSend_resourceManager(v19, v20, v21, v22, v33, v34);
  unint64_t v23 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  uint64_t v24 = CFX::CrossFrameResourceManager::get(a4[4], v23);
  *(void *)(a1 + 384) = v24;
  if (!v24) {
    operator new();
  }
  unint64_t v25 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  unint64_t v26 = 0x9DDFEA08EB382D69
      * (v25 ^ ((0x9DDFEA08EB382D69 * (v25 ^ v10)) >> 47) ^ (0x9DDFEA08EB382D69 * (v25 ^ v10)));
  unint64_t v27 = 0x9DDFEA08EB382D69 * (v26 ^ (v26 >> 47));
  uint64_t v28 = CFX::CrossFrameResourceManager::get(a4[4], 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69* (v27 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v11)))) ^ ((0x9DDFEA08EB382D69 * (v27 ^ ((0x9DDFEA08EB382D69 * (v27 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v27 ^ v11)))) >> 47)));
  *(void *)(a1 + 392) = v28;
  if (!v28) {
    operator new();
  }
  return a1;
}

void sub_1B65FC568(_Unwind_Exception *a1)
{
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B65FC590(uint64_t result, uint64_t a2, void **a3)
{
  uint64_t v3 = *(void *)(result + 384);
  if (*(void *)(v3 + 16) && *(void *)(v3 + 24))
  {
    uint64_t v5 = result;
    uint64_t v6 = *a3;
    objc_msgSend_setBytes_length_atIndex_(*a3, (const char *)a2, *(void *)(*(void *)(result + 376) + 320), 608, 8);
    id Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(v5 + 376) + 256));
    id v8 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(v5 + 376) + 248));
    id v9 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v5 + 400));
    id v10 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(v5 + 376) + 272));
    objc_msgSend_setTexture_atIndex_(v6, v11, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v6, v12, (uint64_t)v8, 1);
    objc_msgSend_setTexture_atIndex_(v6, v13, (uint64_t)v9, 2);
    objc_msgSend_setTexture_atIndex_(v6, v14, (uint64_t)v10, 3);
    objc_msgSend_setBuffer_offset_atIndex_(v6, v15, *(void *)(*(void *)(v5 + 376) + 304), 0, 0);
    objc_msgSend_setBuffer_offset_atIndex_(v6, v16, *(void *)(*(void *)(v5 + 392) + 16), 0, 1);
    uint64_t v23 = *(void *)(v5 + 384);
    uint64_t v24 = *(void *)(v23 + 16);
    if (!v24)
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v17, v18, v19, v20, v21, v22, (uint64_t)"_ptr != NULL");
      uint64_t v24 = *(void *)(v23 + 16);
    }
    uint64_t v25 = sub_1B653EFB8(v24);
    objc_msgSend_setComputePipelineState_(v6, v26, v25, v27);
    unint64_t v31 = (unint64_t)objc_msgSend_width(v8, v28, v29, v30) >> 1;
    unint64_t v41 = (unint64_t)objc_msgSend_height(v8, v32, v33, v34) >> 1;
    uint64_t v42 = *(void *)(v5 + 384);
    uint64_t v43 = *(void *)(v42 + 16);
    if (!v43)
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v35, v36, v37, v38, v39, v40, (uint64_t)"_ptr != NULL");
      uint64_t v43 = *(void *)(v42 + 16);
    }
    uint64_t v44 = (void *)sub_1B653EFB8(v43);
    v68[0] = v31;
    v68[1] = v41;
    v68[2] = 1;
    RGMTLComputeCommandEncoderDispatchOnGrid2D(v6, v44, (uint64_t)v68, 1);
    objc_msgSend_setBuffer_offset_atIndex_(v6, v45, *(void *)(*(void *)(v5 + 392) + 16), 0, 0);
    objc_msgSend_setBuffer_offset_atIndex_(v6, v46, *(void *)(*(void *)(v5 + 392) + 24), 0, 1);
    uint64_t v53 = *(void *)(v5 + 384);
    uint64_t v54 = *(void *)(v53 + 24);
    if (!v54)
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v47, v48, v49, v50, v51, v52, (uint64_t)"_ptr != NULL");
      uint64_t v54 = *(void *)(v53 + 24);
    }
    uint64_t v55 = sub_1B653EFB8(v54);
    objc_msgSend_setComputePipelineState_(v6, v56, v55, v57);
    uint64_t v64 = *(void *)(v5 + 384);
    uint64_t v65 = *(void *)(v64 + 24);
    if (!v65)
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v58, v59, v60, v61, v62, v63, (uint64_t)"_ptr != NULL");
      uint64_t v65 = *(void *)(v64 + 24);
    }
    unsigned int v66 = (void *)sub_1B653EFB8(v65);
    v67[0] = v31;
    v67[1] = v41;
    v67[2] = 1;
    return RGMTLComputeCommandEncoderDispatchOnGrid2D(v6, v66, (uint64_t)v67, 1);
  }
  return result;
}

uint64_t sub_1B65FC818(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v8 = *a5;
  v48[0] = (uint64_t)"RTSpecularUpscalePass";
  v48[1] = v8;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBDB8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v45 = a3;
    uint64_t v43 = a2;
    int v44 = __cxa_guard_acquire(&qword_1E9DDBDB8);
    a2 = v43;
    a3 = v45;
    if (v44)
    {
      qword_1E9DDBDB0 = (uint64_t)sub_1B65FD604("RT_SPECULAR_UPSCALE", 0x13u);
      __cxa_guard_release(&qword_1E9DDBDB8);
      a2 = v43;
      a3 = v45;
    }
  }
  sub_1B653860C(a1, a2, a3, v48, qword_1E9DDBDB0, 0);
  *(void *)a1 = &unk_1F0FB42B0;
  *(void *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 416) = 0;
  uint64_t v16 = (void *)sub_1B6445900(*(void *)(a1 + 368), v9, v10, v11, v12, v13, v14, v15);
  *(void *)(a1 + 408) = v16;
  *(void *)(a1 + 416) = objc_msgSend_resourceManager(v16, v17, v18, v19);
  unint64_t v20 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  uint64_t v21 = CFX::CrossFrameResourceManager::get(a4[4], v20);
  *(void *)(a1 + 384) = v21;
  if (!v21)
  {
    *(void *)(a1 + 384) = sub_1B65FCA30(a4[4], v20);
    uint64_t v29 = (void *)sub_1B6445900(*(void *)(a1 + 368), v22, v23, v24, v25, v26, v27, v28);
    uint64_t v33 = objc_msgSend_resourceManager(v29, v30, v31, v32);
    uint64_t v34 = *(void *)(a1 + 384);
    uint64_t v37 = objc_msgSend_newComputePipelineStateWithFunctionName_(v33, v35, @"vfx_rt_specular_upscale", v36);
    uint64_t v38 = *(void **)(v34 + 16);
    if (v38 != (void *)v37)
    {
      if (v38) {

      }
      *(void *)(v34 + 16) = v37;
    }
  }
  uint64_t v39 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
  uint64_t v40 = (CFX::RG::TextureDescriptorReference *)(a5 + 1);
  CFX::RG::TextureDescriptorReference::withPixelFormat(v40, MTLPixelFormatRGBA16Float, (uint64_t)v47);
  *(void *)(a1 + 392) = sub_1B63CFDE4(v39, (uint64_t)"SpecularUpscale", v47);
  unint64_t v41 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder((CFX::RG::RenderGraphContext *)a4);
  CFX::RG::TextureDescriptorReference::withPixelFormat(v40, MTLPixelFormatR16Float, (uint64_t)v46);
  *(void *)(a1 + 400) = sub_1B63CFDE4(v41, (uint64_t)"SpecularUpscaleDistance", v46);
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 392));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(a1 + 400));
  return a1;
}

void sub_1B65FCA10(_Unwind_Exception *a1)
{
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B65FCA30(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v2 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v2) {
    operator new();
  }
  return v2;
}

uint64_t sub_1B65FCABC(uint64_t result, uint64_t a2, void **a3)
{
  if (*(void *)(*(void *)(result + 384) + 16))
  {
    uint64_t v4 = result;
    uint64_t v5 = *a3;
    objc_msgSend_setBytes_length_atIndex_(*a3, (const char *)a2, *(void *)(*(void *)(result + 376) + 320), 608, 8);
    id Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(v4 + 376) + 256));
    id v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(v4 + 376) + 248));
    id v8 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(v4 + 376) + 272));
    objc_msgSend_setTexture_atIndex_(v5, v9, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v5, v10, (uint64_t)v7, 1);
    objc_msgSend_setTexture_atIndex_(v5, v11, (uint64_t)v8, 2);
    objc_msgSend_setBuffer_offset_atIndex_(v5, v12, *(void *)(*(void *)(v4 + 376) + 312), 0, 0);
    id v13 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v4 + 392));
    objc_msgSend_setTexture_atIndex_(v5, v14, (uint64_t)v13, 10);
    id v15 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v4 + 400));
    objc_msgSend_setTexture_atIndex_(v5, v16, (uint64_t)v15, 11);
    uint64_t v23 = *(void *)(v4 + 384);
    uint64_t v24 = *(void *)(v23 + 16);
    if (!v24)
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v17, v18, v19, v20, v21, v22, (uint64_t)"_ptr != NULL");
      uint64_t v24 = *(void *)(v23 + 16);
    }
    uint64_t v26 = sub_1B653EFB8(v24);
    return objc_msgSend_dispatch_onTexture2D_(v5, v25, v26, (uint64_t)v13);
  }
  return result;
}

uint64_t sub_1B65FCC44(uint64_t a1, uint64_t a2, uint64_t a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  uint64_t v9 = *a5;
  *(void *)&v35[0] = "RTSpecularTemporalDenoisePass";
  *((void *)&v35[0] + 1) = v9;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBDC8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v33 = a3;
    int v34 = __cxa_guard_acquire(&qword_1E9DDBDC8);
    a3 = v33;
    if (v34)
    {
      qword_1E9DDBDC0 = (uint64_t)sub_1B65FD604("RT_SPECULAR_TEMPORAL_DENOISE", 0x1Cu);
      __cxa_guard_release(&qword_1E9DDBDC8);
      a3 = v33;
    }
  }
  sub_1B653860C(a1, a2, a3, (uint64_t *)v35, qword_1E9DDBDC0, 0);
  *(void *)a1 = &unk_1F0FB4BD0;
  *(void *)(a1 + 376) = a5;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_OWORD *)(a1 + 416) = 0u;
  uint64_t v17 = (void *)sub_1B6445900(*(void *)(a1 + 368), v10, v11, v12, v13, v14, v15, v16);
  *(void *)(a1 + 416) = v17;
  *(void *)(a1 + 424) = objc_msgSend_resourceManager(v17, v18, v19, v20);
  uint64_t v21 = (unsigned __int16 *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a4, (const CFX::RG::Resource *)a5[31]);
  unsigned int v22 = *v21;
  unsigned int v23 = v21[1];
  unint64_t v24 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  uint64_t v25 = CFX::CrossFrameResourceManager::get(a4[4], v24);
  *(void *)(a1 + 384) = v25;
  if (!v25) {
    operator new();
  }
  memset(v35, 0, sizeof(v35));
  if (v22 <= 1) {
    __int16 v26 = 1;
  }
  else {
    __int16 v26 = v22;
  }
  if (v23 <= 1) {
    __int16 v27 = 1;
  }
  else {
    __int16 v27 = v23;
  }
  RGTextureDescriptorMake2D(v26, v27, 115, (uint64_t)v35);
  unint64_t v28 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  unint64_t v29 = 0x9DDFEA08EB382D69
      * (v28 ^ ((0x9DDFEA08EB382D69 * (v28 ^ LOWORD(v35[0]))) >> 47) ^ (0x9DDFEA08EB382D69 * (v28 ^ LOWORD(v35[0]))));
  unint64_t v30 = 0x9DDFEA08EB382D69 * (v29 ^ (v29 >> 47));
  uint64_t v31 = CFX::CrossFrameResourceManager::get(a4[4], 0x9DDFEA08EB382D69* ((0x9DDFEA08EB382D69* (v30 ^ ((0x9DDFEA08EB382D69 * (v30 ^ WORD1(v35[0]))) >> 47) ^ (0x9DDFEA08EB382D69 * (v30 ^ WORD1(v35[0]))))) ^ ((0x9DDFEA08EB382D69 * (v30 ^ ((0x9DDFEA08EB382D69 * (v30 ^ WORD1(v35[0]))) >> 47) ^ (0x9DDFEA08EB382D69 * (v30 ^ WORD1(v35[0]))))) >> 47)));
  *(void *)(a1 + 392) = v31;
  if (!v31) {
    operator new();
  }
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(void *)(a1 + 376) + 264));
  CFX::RG::Pass::readFrom((uint64_t *)a1, *(CFX::RG::Resource **)(*(void *)(a1 + 392) + 8 * (*(unsigned char *)(*(void *)(a1 + 384) + 24) == 0) + 16));
  CFX::RG::Pass::writeTo((uint64_t *)a1, *(CFX::RG::Resource **)(*(void *)(a1 + 392) + 8 * *(unsigned __int8 *)(*(void *)(a1 + 384) + 24) + 16));
  return a1;
}

void sub_1B65FCFE8(_Unwind_Exception *a1)
{
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

__n128 sub_1B65FD014(uint64_t a1, uint64_t a2, void **a3)
{
  if (*(void *)(*(void *)(a1 + 384) + 16))
  {
    uint64_t v5 = *a3;
    objc_msgSend_setBytes_length_atIndex_(*a3, (const char *)a2, *(void *)(*(void *)(a1 + 376) + 320), 608, 8);
    id Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 400));
    id v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 408));
    id v8 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(a1 + 376) + 256));
    uint64_t v9 = *(void *)(a1 + 376);
    uint64_t v10 = *(const CFX::RG::Resource **)(v9 + 288);
    if (v10)
    {
      id v11 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v10);
      uint64_t v9 = *(void *)(a1 + 376);
    }
    else
    {
      id v11 = 0;
    }
    id v12 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(v9 + 264));
    id v13 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(a1 + 376) + 272));
    id v14 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(a1 + 376) + 248));
    objc_msgSend_setTexture_atIndex_(v5, v15, (uint64_t)Texture, 0);
    objc_msgSend_setTexture_atIndex_(v5, v16, (uint64_t)v8, 1);
    objc_msgSend_setTexture_atIndex_(v5, v17, (uint64_t)v11, 2);
    objc_msgSend_setTexture_atIndex_(v5, v18, (uint64_t)v12, 3);
    objc_msgSend_setTexture_atIndex_(v5, v19, (uint64_t)v13, 4);
    objc_msgSend_setTexture_atIndex_(v5, v20, (uint64_t)v7, 5);
    objc_msgSend_setTexture_atIndex_(v5, v21, (uint64_t)v14, 6);
    id v22 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(a1 + 392)+ 8 * (*(unsigned char *)(*(void *)(a1 + 384) + 24) == 0)+ 16));
    id v23 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(*(void *)(a1 + 392)+ 8 * *(unsigned __int8 *)(*(void *)(a1 + 384) + 24)+ 16));
    objc_msgSend_setTexture_atIndex_(v5, v24, (uint64_t)v23, 10);
    objc_msgSend_setTexture_atIndex_(v5, v25, (uint64_t)v22, 11);
    uint64_t v32 = *(void *)(a1 + 384);
    uint64_t v33 = *(void *)(v32 + 16);
    if (!v33)
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v26, v27, v28, v29, v30, v31, (uint64_t)"_ptr != NULL");
      uint64_t v33 = *(void *)(v32 + 16);
    }
    uint64_t v34 = sub_1B653EFB8(v33);
    objc_msgSend_dispatch_onTexture2D_(v5, v35, v34, (uint64_t)v23);
    uint64_t v36 = *(_OWORD **)(*(void *)(a1 + 376) + 320);
    long long v37 = v36[13];
    v36[16] = v36[12];
    v36[17] = v37;
    long long v38 = v36[15];
    v36[18] = v36[14];
    v36[19] = v38;
    uint64_t v39 = *(_OWORD **)(*(void *)(a1 + 376) + 320);
    long long v40 = v39[1];
    v39[4] = *v39;
    v39[5] = v40;
    long long v41 = v39[3];
    v39[6] = v39[2];
    v39[7] = v41;
    uint64_t v42 = *(void *)(*(void *)(a1 + 376) + 320);
    long long v43 = *(_OWORD *)(v42 + 400);
    *(_OWORD *)(v42 + 448) = *(_OWORD *)(v42 + 384);
    *(_OWORD *)(v42 + 464) = v43;
    __n128 result = *(__n128 *)(v42 + 416);
    long long v45 = *(_OWORD *)(v42 + 432);
    *(__n128 *)(v42 + 480) = result;
    *(_OWORD *)(v42 + 496) = v45;
    uint64_t v46 = *(void *)(a1 + 384);
    ++*(_DWORD *)(*(void *)(*(void *)(a1 + 376) + 320) + 524);
    *(unsigned char *)(v46 + 24) ^= 1u;
  }
  return result;
}

CFX::RG::Pass *sub_1B65FD290(CFX::RG::RenderGraphContext *a1, uint64_t *a2)
{
  uint64_t v4 = (uint64_t *)CFX::RG::RenderGraphContext::currentBuilder(a1);
  uint64_t v5 = (CFX::RG::Pass *)sub_1B65FD3B4(v4, (CFX::CrossFrameResourceManager **)a1, (uint64_t)a2);
  a2[38] = *(void *)(*((void *)v5 + 48) + 8 * *(unsigned __int8 *)(*((void *)v5 + 48) + 720) + 704);
  uint64_t v6 = (uint64_t *)sub_1B65FD40C(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  id v7 = *(CFX::RG::Resource **)(*((void *)v5 + 48) + 728);
  v6[50] = (uint64_t)v7;
  CFX::RG::Pass::readFrom(v6, v7);
  CFX::RG::Pass::dependsOn(v6, v5);
  a2[39] = *(void *)(v6[49] + 24);
  id v8 = (uint64_t *)sub_1B65FD464(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  uint64_t v9 = *(CFX::RG::Resource **)(*((void *)v5 + 48) + 728);
  v8[50] = (uint64_t)v9;
  CFX::RG::Pass::readFrom(v8, v9);
  CFX::RG::Pass::dependsOn(v8, (CFX::RG::Pass *)v6);
  uint64_t v10 = (uint64_t *)sub_1B65FD4BC(v4, (CFX::CrossFrameResourceManager **)a1, a2);
  id v11 = (CFX::RG::Resource *)v8[49];
  v10[50] = (uint64_t)v11;
  CFX::RG::Pass::readFrom(v10, v11);
  id v12 = *(CFX::RG::Resource **)(*((void *)v5 + 48) + 728);
  v10[51] = (uint64_t)v12;
  CFX::RG::Pass::readFrom(v10, v12);
  CFX::RG::Pass::dependsOn(v10, (CFX::RG::Pass *)v8);
  a2[37] = *(void *)(v10[49] + 8 * *(unsigned __int8 *)(v10[48] + 24) + 16);
  return v5;
}

uint64_t sub_1B65FD3B4(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t a3)
{
  uint64_t v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B65FDAE8(v7[0], v5, v7, a2, a3);
  sub_1B63C88CC(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B65FD40C(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B65FDB48(v7[0], v5, v7, a2, a3);
  sub_1B63C88CC(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B65FD464(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B65FDBA8(v7[0], v5, v7, a2, a3);
  sub_1B63C88CC(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B65FD4BC(uint64_t *a1, CFX::CrossFrameResourceManager **a2, uint64_t *a3)
{
  uint64_t v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B65FDC08(v7[0], v5, v7, a2, a3);
  sub_1B63C88CC(a1 + 18, v7);
  return v7[0];
}

void sub_1B65FD518(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B65FD554(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B65FD590(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B65FD5CC(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

unsigned __int8 *sub_1B65FD604(unsigned __int8 *result, unsigned int a2)
{
  if (result)
  {
    unint64_t v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      uint64_t v3 = a2 >> 3;
      uint64_t v4 = &result[8 * v3];
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *(void *)result;
        result += 8;
        unint64_t v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      __n128 result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        unint64_t v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

void *sub_1B65FD6F0(void *a1)
{
  *a1 = &unk_1F0FB4920;
  for (uint64_t i = 3; i != 1; --i)
  {
    uint64_t v3 = (void *)a1[i];
    if (v3) {
  }
    }
  return a1;
}

void sub_1B65FD74C(void *a1)
{
  *a1 = &unk_1F0FB4920;
  uint64_t v2 = 3;
  while (1)
  {
    uint64_t v3 = (void *)a1[v2];
    if (v3) {

    }
    if (--v2 == 1)
    {
      JUMPOUT(0x1BA9B6D80);
    }
  }
}

void *sub_1B65FD7C8(void *a1)
{
  *a1 = &unk_1F0FB4940;
  for (uint64_t i = 3; i != 1; --i)
  {
    uint64_t v3 = (void *)a1[i];
    if (v3) {
  }
    }
  return a1;
}

void sub_1B65FD824(void *a1)
{
  *a1 = &unk_1F0FB4940;
  uint64_t v2 = 3;
  while (1)
  {
    uint64_t v3 = (void *)a1[v2];
    if (v3) {

    }
    if (--v2 == 1)
    {
      JUMPOUT(0x1BA9B6D80);
    }
  }
}

void *sub_1B65FD8A0(void *a1)
{
  *a1 = &unk_1F0FB4290;
  uint64_t v2 = (void *)a1[2];
  if (v2) {

  }
  return a1;
}

void sub_1B65FD8EC(void *a1)
{
  *a1 = &unk_1F0FB4290;
  uint64_t v1 = (void *)a1[2];
  if (v1) {

  }
  JUMPOUT(0x1BA9B6D80);
}

void *sub_1B65FD958(void *a1)
{
  *a1 = &unk_1F0FB4B90;
  uint64_t v2 = (void *)a1[2];
  if (v2) {

  }
  return a1;
}

void sub_1B65FD9A4(void *a1)
{
  *a1 = &unk_1F0FB4B90;
  uint64_t v1 = (void *)a1[2];
  if (v1) {

  }
  JUMPOUT(0x1BA9B6D80);
}

void *sub_1B65FDA10(void *a1)
{
  *a1 = &unk_1F0FB4BB0;
  for (uint64_t i = 3; i != 1; --i)
    sub_1B644E78C((CFX::RG::Resource **)&a1[i], 0);
  return a1;
}

void sub_1B65FDA6C(void *a1)
{
  *a1 = &unk_1F0FB4BB0;
  for (uint64_t i = 3; i != 1; --i)
    sub_1B644E78C((CFX::RG::Resource **)&a1[i], 0);

  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B65FDAE8(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t a5)
{
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = sub_1B63C8330(v10, 0x198u, 8u);
  return sub_1B65FB930(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B65FDB48(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = sub_1B63C8330(v10, 0x1A8u, 8u);
  return sub_1B65FC1DC(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B65FDBA8(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = sub_1B63C8330(v10, 0x1A8u, 8u);
  return sub_1B65FC818(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B65FDC08(uint64_t a1, uint64_t a2, uint64_t *a3, CFX::CrossFrameResourceManager **a4, uint64_t *a5)
{
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = sub_1B63C8330(v10, 0x1B0u, 8u);
  return sub_1B65FCC44(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B65FDC68(uint64_t a1, const char *a2)
{
  v3[5] = *MEMORY[0x1E4F143B8];
  v3[0] = @"kGeometrySourceSemanticPosition";
  v3[1] = @"kGeometrySourceSemanticNormal";
  v3[2] = @"kGeometrySourceSemanticColor";
  v3[3] = @"kGeometrySourceSemanticTexcoord";
  v3[4] = @"kGeometrySourceSemanticTangent";
  return objc_msgSend_arrayWithObjects_count_(MEMORY[0x1E4F1C978], a2, (uint64_t)v3, 5);
}

uint64_t sub_1B65FDCF8(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (objc_msgSend_isEqualToString_(a1, a2, @"kGeometrySourceSemanticPosition", a4)) {
    return 0;
  }
  if (objc_msgSend_isEqualToString_(a1, v5, @"kGeometrySourceSemanticNormal", v6)) {
    return 1;
  }
  if (objc_msgSend_isEqualToString_(a1, v8, @"kGeometrySourceSemanticColor", v9)) {
    return 2;
  }
  if (objc_msgSend_isEqualToString_(a1, v10, @"kGeometrySourceSemanticTexcoord", v11)) {
    return 3;
  }
  if (objc_msgSend_isEqualToString_(a1, v12, @"kGeometrySourceSemanticTangent", v13)) {
    return 4;
  }
  if (objc_msgSend_isEqualToString_(a1, v14, @"kGeometrySourceSemanticVertexCrease", v15)) {
    return 7;
  }
  if (objc_msgSend_isEqualToString_(a1, v16, @"kGeometrySourceSemanticEdgeCrease", v17)) {
    return 8;
  }
  if (objc_msgSend_isEqualToString_(a1, v18, @"kGeometrySourceSemanticBoneIndices", v19)) {
    return 5;
  }
  if (objc_msgSend_isEqualToString_(a1, v20, @"kGeometrySourceSemanticBoneWeights", v21)) {
    return 6;
  }
  return 0;
}

void sub_1B65FE04C(uint64_t a1)
{
}

uint64_t vfx_setOwnerWithIdentity(void *a1, uint64_t a2, uint64_t a3)
{
  id v5 = a1;
  if (objc_opt_respondsToSelector()) {
    objc_msgSend_setResponsibleProcess_(v5, v6, a2, v7);
  }
  if (objc_opt_respondsToSelector()) {
    uint64_t v10 = objc_msgSend_setOwnerWithIdentity_(v5, v8, a3, v9);
  }
  else {
    uint64_t v10 = 0;
  }

  return v10;
}

void sph_compute_pressures_and_densitites_2d(long long *a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v6 = a3[3];
  uint64_t v7 = a3[4];
  float v8 = *((float *)a1 + 4);
  float32x4_t v23 = *(float32x4_t *)((char *)a1 + 20);
  float v9 = *((float *)a1 + 9);
  float v10 = *((float *)a1 + 10);
  long long v11 = *(long long *)((char *)a1 + 44);
  long long v12 = *(long long *)((char *)a1 + 60);
  long long v41 = *a1;
  long long v42 = v11;
  long long v43 = v12;
  int v44 = *((_DWORD *)a1 + 19);
  unsigned int v13 = a5 - a4;
  if (a5 <= a4)
  {
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  }
  else
  {
    float v14 = v9 * (float)(v9 * (float)(v9 * vmuls_lane_f32(v10, v23, 2)));
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = a4;
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    do
    {
      uint64_t v17 = *(void *)(v5 + 8 * v16);
      uint64_t v37 = 0;
      long long v38 = (float *)&v37;
      uint64_t v39 = 0x2020000000;
      float v40 = v14;
      v25[0] = v15;
      v25[1] = 3221225472;
      void v25[2] = sub_1B65FFD60;
      v25[3] = &unk_1E61452D8;
      uint64_t v36 = v17;
      long long v26 = v41;
      float v27 = v8;
      float32x4_t v28 = v23;
      float v29 = v9;
      float v30 = v10;
      int v33 = v44;
      long long v31 = v42;
      long long v32 = v43;
      uint64_t v34 = &v37;
      uint64_t v35 = v5;
      vfx_uniform_grid_apply(a2, v16, (uint64_t)v25);
      uint64_t v18 = v38;
      *(float *)(v6 + 4 * v16) = v38[6];
      v19.i64[1] = v23.i64[1];
      float v20 = v23.f32[0] * (float)(v18[6] - v8);
      *(float *)(v7 + 4 * v16) = v20;
      v19.i32[0] = *(_DWORD *)(v6 + 4 * v16);
      v19.f32[1] = v20;
      v19.i64[1] = vnegq_f32(v19).u64[0];
      float32x4_t v24 = vminnmq_f32(v24, v19);
      _Block_object_dispose(&v37, 8);
      ++v16;
      --v13;
    }
    while (v13);
  }
  *((_DWORD *)a1 + 15) = v24.i32[1];
  *((_DWORD *)a1 + 13) = v24.i32[0];
  *((float *)a1 + 14) = -v24.f32[2];
  *((float *)a1 + 16) = -v24.f32[3];
}

void sub_1B65FFD48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

float32x2_t *sub_1B65FFD60(float32x2_t *result, unsigned int *a2, unsigned int a3)
{
  if (a3)
  {
    float32x2_t v3 = result[15];
    uint64_t v4 = a3;
    do
    {
      unsigned int v5 = *a2++;
      float32x2_t v6 = vsub_f32(*(float32x2_t *)(*(void *)&v3 + 8 * v5), result[16]);
      float v7 = vaddv_f32(vmul_f32(v6, v6));
      float v8 = result[8].f32[1];
      if (v8 > v7) {
        *(float *)(*(void *)(*(void *)&result[14] + 8) + 24) = *(float *)(*(void *)(*(void *)&result[14]
      }
                                                                                            + 8)
                                                                                + 24)
                                                                     + (float)((float)((float)(v8 - v7)
                                                                                     * (float)((float)(v8 - v7)
                                                                                             * (float)(result[7].f32[1] * result[9].f32[0])))
                                                                             * (float)(v8 - v7));
      --v4;
    }
    while (v4);
  }
  return result;
}

void sph_compute_forces_2d(long long *a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v57 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = a3[1];
  uint64_t v25 = *a3;
  uint64_t v5 = a3[2];
  uint64_t v22 = a3[4];
  uint64_t v23 = a3[3];
  long long v6 = *a1;
  long long v7 = *(long long *)((char *)a1 + 28);
  long long v8 = *(long long *)((char *)a1 + 60);
  long long v54 = *(long long *)((char *)a1 + 44);
  long long v55 = v8;
  int v56 = *((_DWORD *)a1 + 19);
  long long v52 = *(long long *)((char *)a1 + 12);
  long long v53 = v7;
  if (a4 < a5)
  {
    uint64_t v9 = 0;
    uint64_t v19 = MEMORY[0x1E4F143A8];
    uint64_t v18 = v25 + 8 * a4;
    uint64_t v10 = v24 + 8 * a4;
    uint64_t v11 = v23 + 4 * a4;
    uint64_t v12 = v22 + 4 * a4;
    uint64_t v13 = v5 + 8 * a4;
    unsigned int v14 = a4 - a5;
    long long v27 = v6;
    do
    {
      uint64_t v15 = *(void *)(v18 + 8 * v9);
      uint64_t v16 = *(void *)(v10 + 8 * v9);
      float v26 = *(float *)(v11 + 4 * v9);
      int v17 = *(_DWORD *)(v12 + 4 * v9);
      uint64_t v48 = 0;
      uint64_t v49 = (float32x2_t *)&v48;
      uint64_t v50 = 0x2020000000;
      uint64_t v51 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = (float32x2_t *)&v44;
      uint64_t v46 = 0x2020000000;
      uint64_t v47 = 0;
      v28[0] = v19;
      v28[1] = 3221225472;
      v28[2] = sub_1B660002C;
      v28[3] = &unk_1E6145300;
      uint64_t v37 = v25;
      uint64_t v38 = v15;
      int v29 = DWORD2(v6);
      v28[4] = v6;
      long long v32 = v54;
      long long v33 = v55;
      int v34 = v56;
      long long v30 = v52;
      long long v31 = v53;
      uint64_t v39 = v24;
      uint64_t v40 = v23;
      uint64_t v41 = v22;
      int v43 = v17;
      uint64_t v35 = &v48;
      uint64_t v36 = &v44;
      uint64_t v42 = v16;
      vfx_uniform_grid_apply(a2, a4 + v9, (uint64_t)v28);
      *(float32x2_t *)(v13 + 8 * v9) = vadd_f32(vmul_n_f32(*(float32x2_t *)&v27, v26), vadd_f32(v49[3], v45[3]));
      _Block_object_dispose(&v44, 8);
      _Block_object_dispose(&v48, 8);
      ++v9;
      long long v6 = v27;
    }
    while (v14 + v9);
  }
}

void sub_1B6600008(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  _Block_object_dispose(&a45, 8);
  _Block_object_dispose((const void *)(v45 - 240), 8);
  _Unwind_Resume(a1);
}

float32x2_t *sub_1B660002C(float32x2_t *result, unsigned int *a2, unsigned int a3, double a4, double a5, double a6, double a7, double a8, double a9)
{
  if (a3)
  {
    uint64_t v9 = a3;
    do
    {
      unsigned int v11 = *a2++;
      uint64_t v10 = v11;
      float32x2_t v12 = vsub_f32(*(float32x2_t *)(*(void *)&result[16] + 8 * v11), result[17]);
      *(float *)&a9 = sqrtf(vaddv_f32(vmul_f32(v12, v12))) + 0.0000001;
      float v13 = result[7].f32[0] - *(float *)&a9;
      if (v13 > 0.0)
      {
        float32x2_t v14 = *(float32x2_t *)(*(void *)&result[18] + 8 * v10);
        float v15 = 1.0 / *(float *)(*(void *)&result[19] + 4 * v10);
        *(float *)&a9 = (float)(v13 * (float)(v13 * result[9].f32[1]))
                      * (float)((float)(result[7].f32[1] / *(float *)&a9)
                              * (float)(v15
                                      * (float)((float)(*(float *)(*(void *)&result[20] + 4 * v10) + result[22].f32[0])
                                              * 0.5)));
        *(float32x2_t *)(*(void *)(*(void *)&result[14] + 8) + 24) = vmls_lane_f32(*(float32x2_t *)(*(void *)(*(void *)&result[14] + 8)+ 24), v12, *(float32x2_t *)&a9, 0);
        uint64_t v16 = *(float32x2_t **)(*(void *)&result[15] + 8);
        a9 = COERCE_DOUBLE(vmla_n_f32(v16[3], vsub_f32(v14, result[21]), (float)(v13 * v15) * (float)((float)(result[10].f32[0] * result[8].f32[0]) * result[7].f32[1])));
        *(double *)&void v16[3] = a9;
      }
      --v9;
    }
    while (v9);
  }
  return result;
}

void sph_compute_pressures_and_densitites_3d(long long *a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v45 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a3;
  uint64_t v6 = a3[3];
  uint64_t v7 = a3[4];
  float v8 = *((float *)a1 + 4);
  float32x4_t v23 = *(float32x4_t *)((char *)a1 + 20);
  float v9 = *((float *)a1 + 9);
  float v10 = *((float *)a1 + 10);
  long long v11 = *(long long *)((char *)a1 + 44);
  long long v12 = *(long long *)((char *)a1 + 60);
  long long v41 = *a1;
  long long v42 = v11;
  long long v43 = v12;
  int v44 = *((_DWORD *)a1 + 19);
  unsigned int v13 = a5 - a4;
  if (a5 <= a4)
  {
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
  }
  else
  {
    float v14 = v9 * (float)(v9 * (float)(v9 * vmuls_lane_f32(v10, v23, 2)));
    uint64_t v15 = MEMORY[0x1E4F143A8];
    uint64_t v16 = a4;
    float32x4_t v24 = (float32x4_t)vdupq_n_s32(0x7F7FFFFFu);
    do
    {
      long long v17 = *(_OWORD *)(v5 + 16 * v16);
      uint64_t v37 = 0;
      uint64_t v38 = (float *)&v37;
      uint64_t v39 = 0x2020000000;
      float v40 = v14;
      v25[0] = v15;
      v25[1] = 3221225472;
      void v25[2] = sub_1B6600350;
      v25[3] = &unk_1E6145328;
      long long v26 = v17;
      long long v27 = v41;
      float v28 = v8;
      float32x4_t v29 = v23;
      float v30 = v9;
      float v31 = v10;
      int v34 = v44;
      long long v32 = v42;
      long long v33 = v43;
      uint64_t v35 = &v37;
      uint64_t v36 = v5;
      vfx_uniform_grid_apply(a2, v16, (uint64_t)v25);
      uint64_t v18 = v38;
      *(float *)(v6 + 4 * v16) = v38[6];
      v19.i64[1] = v23.i64[1];
      float v20 = v23.f32[0] * (float)(v18[6] - v8);
      *(float *)(v7 + 4 * v16) = v20;
      v19.i32[0] = *(_DWORD *)(v6 + 4 * v16);
      v19.f32[1] = v20;
      v19.i64[1] = vnegq_f32(v19).u64[0];
      float32x4_t v24 = vminnmq_f32(v24, v19);
      _Block_object_dispose(&v37, 8);
      ++v16;
      --v13;
    }
    while (v13);
  }
  *((_DWORD *)a1 + 15) = v24.i32[1];
  *((_DWORD *)a1 + 13) = v24.i32[0];
  *((float *)a1 + 14) = -v24.f32[2];
  *((float *)a1 + 16) = -v24.f32[3];
}

void sub_1B6600338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

float32x4_t *sub_1B6600350(float32x4_t *result, unsigned int *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = result[8].i64[1];
    uint64_t v4 = a3;
    do
    {
      unsigned int v5 = *a2++;
      float32x4_t v6 = vsubq_f32(*(float32x4_t *)(v3 + 16 * v5), result[2]);
      float32x4_t v7 = vmulq_f32(v6, v6);
      float v8 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1))).f32[0];
      float v9 = result[5].f32[1];
      if (v9 > v8) {
        *(float *)(*(void *)(result[8].i64[0] + 8) + 24) = *(float *)(*(void *)(result[8].i64[0] + 8) + 24)
      }
                                                             + (float)((float)((float)(v9 - v8)
                                                                             * (float)((float)(v9 - v8)
                                                                                     * (float)(result[4].f32[3]
                                                                                             * result[5].f32[2])))
                                                                     * (float)(v9 - v8));
      --v4;
    }
    while (v4);
  }
  return result;
}

void sph_compute_forces_3d(float32x4_t *a1, uint64_t a2, uint64_t *a3, unsigned int a4, unsigned int a5)
{
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v25 = a3[1];
  uint64_t v26 = *a3;
  uint64_t v5 = a3[2];
  uint64_t v23 = a3[4];
  uint64_t v24 = a3[3];
  float32x4_t v6 = *a1;
  float32x4_t v7 = a1[2];
  float32x4_t v8 = a1[3];
  float32x4_t v54 = a1[1];
  float32x4_t v55 = v7;
  float32x4_t v9 = a1[4];
  float32x4_t v56 = v8;
  float32x4_t v57 = v9;
  if (a4 < a5)
  {
    uint64_t v10 = 0;
    uint64_t v20 = v26 + 16 * a4;
    uint64_t v19 = MEMORY[0x1E4F143A8];
    uint64_t v11 = v25 + 16 * a4;
    uint64_t v12 = v24 + 4 * a4;
    uint64_t v13 = v23 + 4 * a4;
    uint64_t v14 = v5 + 16 * a4;
    unsigned int v15 = a4 - a5;
    float32x4_t v28 = v6;
    do
    {
      long long v16 = *(_OWORD *)(v20 + 16 * v10);
      long long v17 = *(_OWORD *)(v11 + 16 * v10);
      float v27 = *(float *)(v12 + 4 * v10);
      int v18 = *(_DWORD *)(v13 + 4 * v10);
      uint64_t v49 = 0;
      uint64_t v50 = (float32x4_t *)&v49;
      uint64_t v51 = 0x3020000000;
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = (float32x4_t *)&v44;
      uint64_t v46 = 0x3020000000;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      v29[0] = v19;
      v29[1] = 3221225472;
      v29[2] = sub_1B660060C;
      v29[3] = &unk_1E6145350;
      long long v30 = v16;
      float32x4_t v31 = v6;
      float32x4_t v32 = v54;
      float32x4_t v33 = v55;
      float32x4_t v34 = v56;
      float32x4_t v35 = v57;
      uint64_t v39 = v26;
      uint64_t v40 = v25;
      uint64_t v41 = v24;
      uint64_t v42 = v23;
      int v43 = v18;
      uint64_t v37 = &v49;
      uint64_t v38 = &v44;
      long long v36 = v17;
      vfx_uniform_grid_apply(a2, a4 + v10, (uint64_t)v29);
      *(float32x4_t *)(v14 + 16 * v10) = vaddq_f32(vmulq_n_f32(v28, v27), vaddq_f32(v50[2], v45[2]));
      _Block_object_dispose(&v44, 8);
      _Block_object_dispose(&v49, 8);
      ++v10;
      float32x4_t v6 = v28;
    }
    while (v15 + v10);
  }
}

void sub_1B66005E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,char a47)
{
  _Block_object_dispose(&a47, 8);
  _Block_object_dispose((const void *)(v47 - 224), 8);
  _Unwind_Resume(a1);
}

float32x4_t *sub_1B660060C(float32x4_t *result, unsigned int *a2, unsigned int a3)
{
  if (a3)
  {
    uint64_t v3 = a3;
    do
    {
      unsigned int v5 = *a2++;
      uint64_t v4 = v5;
      float32x4_t v6 = vsubq_f32(*(float32x4_t *)(result[10].i64[0] + 16 * v5), result[2]);
      float32x4_t v7 = vmulq_f32(v6, v6);
      float32x4_t v8 = vaddq_f32(v7, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v7.f32, 1));
      v8.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v7, 2), v8).f32[0]) + 0.0000001;
      float v9 = result[4].f32[2] - v8.f32[0];
      if (v9 > 0.0)
      {
        float32x4_t v10 = *(float32x4_t *)(result[10].i64[1] + 16 * v4);
        float v11 = 1.0 / *(float *)(result[11].i64[0] + 4 * v4);
        v8.f32[0] = (float)(v9 * (float)(v9 * result[5].f32[3]))
                  * (float)((float)(result[4].f32[3] / v8.f32[0])
                          * (float)(v11
                                  * (float)((float)(*(float *)(result[11].i64[1] + 4 * v4) + result[12].f32[0]) * 0.5)));
        *(float32x4_t *)(*(void *)(result[9].i64[0] + 8) + 32) = vmlsq_lane_f32(*(float32x4_t *)(*(void *)(result[9].i64[0] + 8)+ 32), v6, *(float32x2_t *)v8.f32, 0);
        *(float32x4_t *)(*(void *)(result[9].i64[1] + 8) + 32) = vmlaq_n_f32(*(float32x4_t *)(*(void *)(result[9].i64[1] + 8)+ 32), vsubq_f32(v10, result[8]), (float)(v9 * v11)* (float)((float)(result[6].f32[0]* result[5].f32[0])* result[4].f32[3]));
      }
      --v3;
    }
    while (v3);
  }
  return result;
}

uint64_t sub_1B66006FC(const __CFArray *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_18:
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"engineContext");
    if (a3) {
      goto LABEL_4;
    }
    goto LABEL_19;
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"nodes");
  if (!a2) {
    goto LABEL_18;
  }
LABEL_3:
  if (a3) {
    goto LABEL_4;
  }
LABEL_19:
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"scratchAllocator");
LABEL_4:
  uint64_t v11 = sub_1B644558C(a2, a2, a3, a4, a5, a6, a7, a8);
  uint64_t Aligned = CScratchAllocatorAllocateAligned(a3, 32, 8);
  *(void *)uint64_t Aligned = a3;
  *(void *)(Aligned + 8) = 0;
  *(void *)(Aligned + 16) = 0;
  *(void *)(Aligned + 24) = Aligned + 32;
  CFIndex Count = CFArrayGetCount(a1);
  unsigned int v20 = *(_DWORD *)(Aligned + 20);
  uint64_t v21 = Count - v20;
  if (Count > v20) {
    sub_1B63C8928(Aligned, v21, 1);
  }
  uint64_t v22 = (unsigned int *)sub_1B64468E8(a2, v21, v13, v14, v15, v16, v17, v18);
  CStackAllocatorPushFrame(v22);
  uint64_t v23 = CStackAllocatorAllocate((uint64_t *)v22, 0x28uLL);
  uint64_t v37 = (uint64_t)v22;
  *(void *)uint64_t v23 = v22;
  sub_1B66025E0((uint64_t)v23, 32);
  if (Count >= 1)
  {
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(a1, i);
      if (sub_1B63F4F54(ValueAtIndex, v26, v27, v28, v29, v30, v31, v32) == v11)
      {
        v38[0] = MEMORY[0x1E4F143A8];
        v38[1] = 3221225472;
        v38[2] = sub_1B6600920;
        v38[3] = &unk_1E6141E90;
        v38[4] = v23;
        sub_1B64A18A4((uint64_t)ValueAtIndex, (uint64_t)v38);
      }
    }
  }
  int v33 = v23[9];
  if (v33 != -15)
  {
    uint64_t v34 = 0;
    unint64_t v35 = 0;
    do
    {
      if (*(_WORD *)(*((void *)v23 + 3) + 2 * v35))
      {
        sub_1B63C88CC((uint64_t *)Aligned, (void *)(*((void *)v23 + 2) + v34));
        int v33 = v23[9];
      }
      ++v35;
      v34 += 8;
    }
    while (v35 < (v33 + 15));
  }
  CStackAllocatorPopFrame(v37);
  return Aligned;
}

BOOL sub_1B6600920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  BOOL result = 0;
  if (a2)
  {
    if (sub_1B64A3270(a2, a2, a3, a4, a5, a6, a7, a8)) {
      return 1;
    }
    unint64_t v10 = 0xC6A4A7935BD1E995
        * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * a2) ^ ((0xC6A4A7935BD1E995 * a2) >> 47))) ^ 0x35253C9ADE8F4CA8);
    uint64_t v11 = *(void *)(a1 + 32);
    uint64_t v13 = a2;
    if (!sub_1B660268C(v11, (0xC6A4A7935BD1E995 * (v10 ^ (v10 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v10 ^ (v10 >> 47))) >> 47), &v13))return 1; {
  }
    }
  return result;
}

unsigned __int8 *sub_1B66009BC(unsigned __int8 *result, unsigned int a2)
{
  if (result)
  {
    unint64_t v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      uint64_t v3 = a2 >> 3;
      uint64_t v4 = &result[8 * v3];
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *(void *)result;
        result += 8;
        unint64_t v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      BOOL result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        unint64_t v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

BOOL sub_1B6600AA8(uint64_t a1, void *a2)
{
  if ((sub_1B6446228(a1) & 0x10000) == 0) {
    return 0;
  }
  unint64_t v10 = (void *)sub_1B642F9DC(a2, v3, v4, v5);
  unint64_t v11 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = &v17;
  uint64_t v19 = 0x2020000000;
  char v20 = 0;
  while (v11 < objc_msgSend_count(v10, v7, v8, v9))
  {
    uint64_t v14 = objc_msgSend_objectAtIndexedSubscript_(v10, v12, v11, v13);
    v16[0] = MEMORY[0x1E4F143A8];
    v16[1] = 3221225472;
    v16[2] = sub_1B6600BE0;
    void v16[3] = &unk_1E61443C8;
    v16[4] = &v17;
    sub_1B64A18A4(v14, (uint64_t)v16);
    ++v11;
    if (*((unsigned char *)v18 + 24))
    {
      BOOL v6 = 1;
      goto LABEL_8;
    }
  }
  BOOL v6 = *((unsigned char *)v18 + 24) != 0;
LABEL_8:
  _Block_object_dispose(&v17, 8);
  return v6;
}

void sub_1B6600BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  _Block_object_dispose(va, 8);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6600BE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a2) {
    return 0;
  }
  if (sub_1B64A3270(a2, a2, a3, a4, a5, a6, a7, a8)) {
    return 1;
  }
  uint64_t result = sub_1B649F5F4(a2, v10, v11, v12, v13, v14, v15, v16);
  if (result)
  {
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
    return 2;
  }
  return result;
}

uint64_t sub_1B6600C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v20 = a2;
  *((void *)&v20 + 1) = a3;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBDD8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v18 = a3;
    uint64_t v15 = a2;
    int v16 = __cxa_guard_acquire(&qword_1E9DDBDD8);
    a2 = v15;
    a3 = v18;
    if (v16)
    {
      byte_1E9DDBDD0 = 1;
      __cxa_guard_release(&qword_1E9DDBDD8);
      a2 = v15;
      a3 = v18;
    }
  }
  if (byte_1E9DDBDD0) {
    uint64_t v6 = 0xA5BDF038E97191F5;
  }
  else {
    uint64_t v6 = 0;
  }
  sub_1B645DCC0(a1, a2, a3, (uint64_t *)a4, v6, 0);
  *(void *)a1 = &unk_1F0FB3398;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)(a1 + 416) = 0;
  long long v7 = *(_OWORD *)(a4 + 24);
  long long v8 = *(_OWORD *)(a4 + 40);
  *(void *)(a1 + 456) = *(void *)(a4 + 56);
  *(_OWORD *)(a1 + 424) = v7;
  *(_OWORD *)(a1 + 440) = v8;
  *(void *)&long long v21 = *(void *)(a1 + 368);
  LOBYTE(v25) = 0;
  char v26 = 0;
  uint64_t v23 = 0;
  long long v22 = 0uLL;
  long long v27 = xmmword_1B6E4FC80;
  char v28 = *(unsigned char *)(a1 + 376);
  char v29 = 2;
  uint64_t v30 = 8;
  int v31 = 2;
  __int16 v32 = 1;
  *(void *)(a1 + 384) = sub_1B63F9384(v20, *((uint64_t *)&v20 + 1), (uint64_t *)&v20, (uint64_t *)&v21, &v22);
  long long v9 = v20;
  uint64_t v10 = *(void *)(a1 + 368);
  *(void *)&long long v22 = 0;
  WORD4(v22) = 0;
  BYTE10(v22) = *(unsigned char *)(a1 + 377);
  uint64_t v23 = 0;
  __int16 v24 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBDD8, memory_order_acquire) & 1) == 0)
  {
    long long v19 = v9;
    int v17 = __cxa_guard_acquire(&qword_1E9DDBDD8);
    long long v9 = v19;
    if (v17)
    {
      byte_1E9DDBDD0 = 1;
      __cxa_guard_release(&qword_1E9DDBDD8);
      long long v9 = v19;
    }
  }
  if (byte_1E9DDBDD0) {
    unint64_t v11 = 0xA5BDF038E97191F5;
  }
  else {
    unint64_t v11 = 0;
  }
  unint64_t v25 = v11;
  long long v21 = v9;
  uint64_t v12 = sub_1B63C8330(&v21, 0x40u, 8u);
  sub_1B6460520(v12, v10, (uint64_t)&v22, *(void *)(a1 + 384));
  *(void *)(a1 + 392) = v13;
  return a1;
}

void sub_1B6600E74(_Unwind_Exception *a1)
{
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B6600E8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B65A8594(*(__n128 **)(a1 + 384), (const char *)a2, a3, a4);
  sub_1B65A88F8(*(void *)(a1 + 384), v6, v7, v8, v9, v10, v11, v12);
  sub_1B65A8D10(*(void *)(a1 + 384));
  uint64_t v14 = *(uint64_t **)(a1 + 384);
  uint64_t v15 = *(const char **)a2;
  uint64_t v16 = *(void *)(a2 + 8);

  sub_1B65A8F34(v14, v15, v16, v13);
}

void sub_1B6600EE0(uint64_t a1, CFX::CrossFrameResourceManager **a2)
{
  unint64_t v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  uint64_t v5 = CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 416));
  uint64_t v6 = *(unsigned __int8 *)(v5 + 9);
  uint64_t v7 = *(void *)(v5 + 16);
  uint64_t v8 = *(void *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 440))+ 16);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v4 ^ ((0x9DDFEA08EB382D69 * (v7 ^ v4)) >> 47) ^ (0x9DDFEA08EB382D69 * (v7 ^ v4)));
  unint64_t v10 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47))) ^ ((0x9DDFEA08EB382D69
                                                      * ((0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47))) ^ v8)) >> 47) ^ (0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47))) ^ v8)));
  unint64_t v11 = 0x9DDFEA08EB382D69 * (v10 ^ (v10 >> 47));
  uint64_t v12 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v11 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v6)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v6)))) ^ ((0x9DDFEA08EB382D69 * (v11 ^ ((0x9DDFEA08EB382D69 * (v11 ^ v6)) >> 47) ^ (0x9DDFEA08EB382D69 * (v11 ^ v6)))) >> 47));
  uint64_t v13 = CFX::CrossFrameResourceManager::get(a2[4], v12);
  *(void *)(a1 + 400) = v13;
  if (!v13)
  {
    *(void *)(a1 + 400) = sub_1B6601234(a2[4], v12);
    uint64_t v76 = (void *)sub_1B6445900(*(void *)(a1 + 368), v16, v17, v18, v19, v20, v21, v22);
    char v26 = objc_msgSend_resourceManager(v76, v23, v24, v25);
    uint64_t v27 = sub_1B6522AAC(0, 12, 0, 1.0, 1.0);
    uint64_t v28 = *(void *)(a1 + 400);
    char v29 = *(const void **)(v28 + 40);
    if (v29 != (const void *)v27)
    {
      if (v29) {
        CFRelease(v29);
      }
      *(void *)(v28 + 40) = v27;
    }
    uint64_t v30 = sub_1B653C844((uint64_t)v26, v27, 1);
    BOOL v31 = sub_1B6447A04(*(void *)(a1 + 368), 256);
    uint64_t v32 = *(void *)(a1 + 400);
    memset(v95, 0, sizeof(v95));
    uint64_t v96 = 0;
    long long v98 = 0u;
    long long v99 = 0u;
    long long v100 = 0u;
    long long v101 = 0u;
    long long v102 = 0u;
    long long v103 = 0u;
    long long v104 = 0u;
    long long v105 = 0u;
    long long v106 = 0u;
    long long v107 = 0u;
    long long v108 = 0u;
    long long v111 = 0u;
    uint64_t v112 = 0;
    uint64_t v33 = (void *)sub_1B653EFAC((uint64_t)v26);
    uint64_t v97 = objc_msgSend_frameworkLibrary(v33, v34, v35, v36);
    *(void *)&long long v98 = v7;
    *(void *)&long long v102 = v8;
    LOBYTE(v103) = v6;
    uint64_t v109 = sub_1B653EFC4((uint64_t)v30);
    uint64_t v110 = @"debug_probe_vert";
    uint64_t v39 = @"debug_probe_frag_cube_array";
    if (!v31) {
      uint64_t v39 = @"debug_probe_frag_2d_array";
    }
    *(void *)&long long v111 = v39;
    uint64_t v40 = objc_msgSend_newRenderPipelineStateWithDesc_(v26, v37, (uint64_t)v95, v38);
    uint64_t v41 = *(void **)(v32 + 16);
    if (v41 != (void *)v40)
    {
      uint64_t v42 = v40;
      if (v41) {

      }
      *(void *)(v32 + 16) = v42;
    }
    sub_1B66012C4((void **)(*(void *)(a1 + 400) + 24), v30);
    CFArrayRef v49 = (const __CFArray *)sub_1B64AD3C4(v27, 1, v43, v44, v45, v46, v47, v48);
    if (v49)
    {
      CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v49, 0);
      if (ValueAtIndex)
      {
        uint64_t v51 = sub_1B653C040((uint64_t)v26, (uint64_t)ValueAtIndex);
        sub_1B66012C4((void **)(*(void *)(a1 + 400) + 32), v51);
      }
    }
    uint64_t v52 = objc_opt_new();
    objc_msgSend_setDepthCompareFunction_(v52, v53, 7, v54);
    objc_msgSend_setDepthWriteEnabled_(v52, v55, 0, v56);
    uint64_t v60 = objc_msgSend_device(v76, v57, v58, v59);
    uint64_t v63 = objc_msgSend_newDepthStencilStateWithDescriptor_(v60, v61, (uint64_t)v52, v62);

    uint64_t v64 = *(void *)(a1 + 400);
    uint64_t v65 = *(void **)(v64 + 48);
    if (v65 != (void *)v63)
    {
      uint64_t v66 = *(void *)(a1 + 400);
      if (v65)
      {

        uint64_t v66 = *(void *)(a1 + 400);
      }
      *(void *)(v64 + 48) = v63;
      uint64_t v64 = v66;
    }
    uint64_t v94 = 0;
    uint64_t v91 = 0;
    long long v93 = 0u;
    long long v89 = 0u;
    long long v90 = 0u;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    uint64_t v78 = 0;
    long long v80 = 0u;
    memset(v77, 0, sizeof(v77));
    unsigned int v67 = (void *)sub_1B653EFAC((uint64_t)v26);
    uint64_t v79 = objc_msgSend_frameworkLibrary(v67, v68, v69, v70);
    *(void *)&long long v80 = v7;
    *(void *)&long long v84 = v8;
    LOBYTE(v85) = v6;
    float32x4_t v92 = @"vfx_draw_fullscreen_triangle_vertex";
    *(void *)&long long v93 = @"vfx_draw_fullscreen_fragment";
    uint64_t v73 = objc_msgSend_newRenderPipelineStateWithDesc_(v26, v71, (uint64_t)v77, v72);
    uint64_t v74 = *(void **)(v64 + 56);
    if (v74 != (void *)v73)
    {
      uint64_t v75 = v73;
      if (v74) {

      }
      *(void *)(v64 + 56) = v75;
    }
  }
  sub_1B6460548(*(void *)(a1 + 392), (const char *)a2, v14, v15);
}

uint64_t sub_1B6601234(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v2 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v2) {
    operator new();
  }
  return v2;
}

void **sub_1B66012C4(void **a1, void *a2)
{
  if (a2) {
    id v4 = a2;
  }
  uint64_t v5 = *a1;
  *a1 = a2;
  if (v5) {

  }
  return a1;
}

uint64_t sub_1B6601304(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a3;
  unint64_t v9 = a2;
  unint64_t v11 = (void *)sub_1B6445900(a1[46], a2, a3, a4, a5, a6, a7, a8);
  uint64_t v21 = objc_msgSend_renderEncoder(v11, v12, v13, v14);
  uint64_t v22 = (const CFX::RG::Resource *)a1[51];
  if (v22)
  {
    id Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(v9 + 24), v22);
    uint64_t v30 = a1[50];
    uint64_t v31 = *(void *)(v30 + 48);
    if (!v31)
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", 0, v24, v25, v26, v27, v28, (uint64_t)"_ptr != NULL");
      uint64_t v31 = *(void *)(v30 + 48);
    }
    objc_msgSend_setDepthStencilState_(*(void **)(v21 + 16), v23, v31, v24);
    uint64_t v39 = a1[50];
    uint64_t v40 = *(void **)(v39 + 56);
    if (!v40)
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v33, v34, v35, v36, v37, v38, (uint64_t)"_ptr != NULL");
      uint64_t v40 = *(void **)(v39 + 56);
    }
    uint64_t v41 = objc_msgSend_state(v40, v32, v33, v34);
    objc_msgSend_setRenderPipelineState_(*(void **)(v21 + 16), v42, v41, v43);
    sub_1B63C6ED0(v21, Texture, 0, v44);
    sub_1B63C6F54(v21, v45);
  }
  uint64_t v46 = sub_1B644558C(a1[46], (uint64_t)v22, v15, v16, v17, v18, v19, v20);
  uint64_t v53 = (void *)sub_1B6446254(a1[46], 1, v47, v48, v49, v50, v51, v52);
  uint64_t v61 = sub_1B64B2864(v46, v54, v55, v56, v57, v58, v59, v60);
  uint64_t v69 = sub_1B6453580(v61, v62, v63, v64, v65, v66, v67, v68);
  if ((sub_1B6446228(a1[46]) & 0x200) != 0)
  {
    uint64_t v77 = sub_1B64B0F40(v46, v70, v71, v72, v73, v74, v75, v76);
    sub_1B660C200(v77, (uint64_t)v53, v78, v79, v80, v81, v82, v83);
  }
  long long v84 = *(CFX::CrossFrameResourceManager **)(v9 + 32);
  __guard v85 = sub_1B65A837C();
  uint64_t v86 = CFX::CrossFrameResourceManager::get(v84, v85);
  if (v86)
  {
    uint64_t v93 = v86;
    uint64_t v171 = v46;
    unint64_t v172 = v9;
    uint64_t v173 = v8;
    uint64_t v94 = *(void *)(v86 + 16);
    if (v94)
    {
      uint64_t v95 = *(unsigned int *)(v94 + 12824);
      if (v95)
      {
        uint64_t v96 = *(unsigned int **)(v94 + 12816);
        do
        {
          unsigned int v97 = *v96++;
          unint64_t v9 = v9 & 0xFFFFFFFF00000000 | v97;
          uint64_t v98 = sub_1B661BF3C(v69, v9, v87, v88, v89, v90, v91, v92);
          long long v99 = (float32x4_t *)sub_1B63F1678(v98);
          if (v99) {
            sub_1B642C918(v53, v99);
          }
          --v95;
        }
        while (v95);
      }
    }
    *(void *)(v93 + 16) = 0;
    unint64_t v9 = v172;
    uint64_t v8 = v173;
    uint64_t v46 = v171;
  }
  sub_1B642ADCC((uint64_t)v53);
  sub_1B642B4F0((uint64_t)v53, v100, v101, v102, v103, v104, v105, v106);
  uint64_t v113 = a1[50];
  uint64_t v114 = *(void *)(v113 + 48);
  if (!v114)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", 0, v108, v109, v110, v111, v112, (uint64_t)"_ptr != NULL");
    uint64_t v114 = *(void *)(v113 + 48);
  }
  objc_msgSend_setDepthStencilState_(*(void **)(v21 + 16), v107, v114, v108);
  sub_1B642B354((uint64_t)v53, v122, v115, v116, v117, v118, v119, v120, v121);
  sub_1B642B4F0((uint64_t)v53, v123, v124, v125, v126, v127, v128, v129);
  uint64_t v130 = sub_1B645179C();
  uint64_t v134 = objc_msgSend_resourceManager(v11, v131, v132, v133);
  uint64_t v135 = sub_1B653B9C4(v134, v130);
  objc_msgSend_setDepthStencilState_(*(void **)(v21 + 16), v136, (uint64_t)v135, v137);
  objc_msgSend_setRasterizerStates_(v11, v138, v130, v139);
  if (v53 && (sub_1B6446228(a1[46]) & 8) != 0) {
    sub_1B66015E4((uint64_t)a1, v21, v141, v142, v143, v144, v145, v146);
  }
  if ((objc_msgSend_features(v11, v140, v141, v142) & 0x1000) != 0) {
    objc_msgSend_setDepthClipMode_(*(void **)(v21 + 16), v147, 1, v148);
  }
  sub_1B6460C38(a1[49], (const char *)v9, v8, 0);
  sub_1B6429A2C(v53, v149, v150, v151, v152, v153, v154, v155);
  uint64_t result = sub_1B64B20C4(v46, v156, v157, v158, v159, v160, v161, v162);
  if (result)
  {
    uint64_t v169 = a1[46];
    uint64_t v170 = *(void *)(v21 + 16);
    return sub_1B6511960(result, v169, v170, v164, v165, v166, v167, v168);
  }
  return result;
}

uint64_t sub_1B66015E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v10 = (void *)sub_1B6445900(*(void *)(a1 + 368), a2, a3, a4, a5, a6, a7, a8);
  uint64_t result = objc_msgSend__clusterInfo(v10, v11, v12, v13);
  uint64_t v18 = *(void *)(result + 104);
  uint64_t v19 = HIDWORD(v18);
  if (HIDWORD(v18))
  {
    uint64_t v20 = result;
    unsigned int v62 = *(void *)(result + 104);
    uint64_t result = objc_msgSend__reflectionProbeArrayTexture(v10, v15, v16, v17);
    if (result)
    {
      uint64_t v24 = (void *)result;
      __int16 v25 = objc_msgSend_features(v10, v21, v22, v23);
      objc_msgSend_setCullMode_(*(void **)(a2 + 16), v26, 2, v27);
      if ((v25 & 0x1000) != 0) {
        objc_msgSend_setDepthClipMode_(*(void **)(a2 + 16), v28, 1, v30);
      }
      uint64_t v35 = *(void *)(a1 + 400);
      uint64_t v36 = *(void **)(v35 + 16);
      if (!v36)
      {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v29, v30, v31, v32, v33, v34, (uint64_t)"_ptr != NULL");
        uint64_t v36 = *(void **)(v35 + 16);
      }
      uint64_t v37 = objc_msgSend_state(v36, v28, v29, v30);
      objc_msgSend_setRenderPipelineState_(*(void **)(a2 + 16), v38, v37, v39);
      sub_1B63C6ED0(a2, v24, 0, v40);
      objc_msgSend__setWorldBufferAtVertexIndex_fragmentIndex_(v10, v41, 0, -1);
      objc_msgSend_setVertexBuffer_offset_atIndex_(*(void **)(a2 + 16), v42, *(void *)(v20 + 120), *(void *)(v20 + 128) + 368 * v62, 1);
      uint64_t v49 = *(void *)(a1 + 400);
      uint64_t v50 = *(void *)(v49 + 24);
      if (!v50)
      {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", 0, v44, v45, v46, v47, v48, (uint64_t)"_ptr != NULL");
        uint64_t v50 = *(void *)(v49 + 24);
      }
      objc_msgSend__setMeshBuffers_(v10, v43, v50, v44);
      uint64_t v57 = *(void *)(a1 + 400);
      uint64_t v58 = *(void *)(v57 + 32);
      if (!v58)
      {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", 0, v52, v53, v54, v55, v56, (uint64_t)"_ptr != NULL");
        uint64_t v58 = *(void *)(v57 + 32);
      }
      uint64_t result = objc_msgSend__drawMeshElement_instanceCount_(v10, v51, v58, v19);
      if ((v25 & 0x1000) != 0)
      {
        uint64_t v61 = *(void **)(a2 + 16);
        return objc_msgSend_setDepthClipMode_(v61, v59, 0, v60);
      }
    }
  }
  return result;
}

uint64_t sub_1B66017B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  *(void *)&long long v20 = a2;
  *((void *)&v20 + 1) = a3;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBDE8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v16 = a2;
    int v14 = __cxa_guard_acquire(&qword_1E9DDBDE8);
    a2 = v16;
    if (v14)
    {
      qword_1E9DDBDE0 = (uint64_t)sub_1B66009BC("PICKED_OBJECT", 0xDu);
      __cxa_guard_release(&qword_1E9DDBDE8);
      a2 = v16;
    }
  }
  sub_1B645DCC0(a1, a2, a3, (uint64_t *)a5, qword_1E9DDBDE0, 0);
  *(void *)a1 = &unk_1F0FB3A28;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(void *)&long long v21 = *(void *)(a1 + 368);
  LOBYTE(v25) = 0;
  char v26 = 0;
  uint64_t v23 = 0;
  long long v22 = 0uLL;
  long long v27 = xmmword_1B6E4FC80;
  char v28 = *(unsigned char *)(a1 + 376);
  char v29 = 2;
  uint64_t v30 = 128;
  int v31 = 1;
  __int16 v32 = 1;
  *(void *)(a1 + 384) = sub_1B63F9384(v20, *((uint64_t *)&v20 + 1), (uint64_t *)&v20, (uint64_t *)&v21, &v22);
  long long v9 = v20;
  uint64_t v10 = *(void *)(a1 + 368);
  *(void *)&long long v22 = 0;
  WORD4(v22) = 16;
  BYTE10(v22) = *(unsigned char *)(a1 + 377);
  uint64_t v23 = 8;
  __int16 v24 = 0;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBDE8, memory_order_acquire) & 1) == 0)
  {
    long long v17 = v9;
    int v15 = __cxa_guard_acquire(&qword_1E9DDBDE8);
    long long v9 = v17;
    if (v15)
    {
      qword_1E9DDBDE0 = (uint64_t)sub_1B66009BC("PICKED_OBJECT", 0xDu);
      __cxa_guard_release(&qword_1E9DDBDE8);
      long long v9 = v17;
    }
  }
  uint64_t v25 = qword_1E9DDBDE0;
  long long v21 = v9;
  uint64_t v11 = sub_1B63C8330(&v21, 0x40u, 8u);
  sub_1B6460520(v11, v10, (uint64_t)&v22, *(void *)(a1 + 384));
  *(void *)(a1 + 392) = v12;
  CFX::RG::TextureDescriptorReference::withSampleCount((_OWORD *)(a5 + 24), 1, (uint64_t)v19);
  *(void *)(a1 + 400) = sub_1B63CFDE4(a4, (uint64_t)"COLOR_PICKED", v19);
  CFX::RG::TextureDescriptorReference::withSampleCount((_OWORD *)(a5 + 184), 1, (uint64_t)v18);
  *(void *)(a1 + 408) = sub_1B63CFDE4(a4, (uint64_t)"DEPTH_PICKED", v18);
  CFX::RG::Pass::renderTo(a1, *(void *)(a1 + 400), 0x100000002, 0);
  CFX::RG::Pass::renderTo(a1, *(void *)(a1 + 408), 0x200000002, -1);
  return a1;
}

void sub_1B6601A44(_Unwind_Exception *a1)
{
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B6601A60(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (void *)sub_1B6446254(a1[46], 0, a3, a4, a5, a6, a7, a8);
  CFArrayRef v14 = (const __CFArray *)sub_1B642F9DC(v10, v11, v12, v13);
  uint64_t v20 = sub_1B66006FC(v14, a1[46], a1[1], v15, v16, v17, v18, v19);
  long long v21 = (__n128 *)a1[48];
  v21[3].n128_u64[0] = v20;
  sub_1B65A8594(v21, v22, v23, v24);
  sub_1B65A88F8(a1[48], v25, v26, v27, v28, v29, v30, v31);
  sub_1B65A8D10(a1[48]);
  uint64_t v33 = (uint64_t *)a1[48];
  uint64_t v34 = *(const char **)a2;
  uint64_t v35 = *(void *)(a2 + 8);

  sub_1B65A8F34(v33, v34, v35, v32);
}

void sub_1B6601AD8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B6601AE0(uint64_t a1, const char *a2, uint64_t a3)
{
}

uint64_t sub_1B6601AEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8 = &qword_1E9DDB000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBDF8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v19 = a2;
    uint64_t v20 = a3;
    int v18 = __cxa_guard_acquire(&qword_1E9DDBDF8);
    uint64_t v8 = &qword_1E9DDB000;
    a2 = v19;
    a3 = v20;
    if (v18)
    {
      qword_1E9DDBDF0 = (uint64_t)sub_1B66009BC("OUTLINE", 7u);
      __cxa_guard_release(&qword_1E9DDBDF8);
      uint64_t v8 = &qword_1E9DDB000;
      a2 = v19;
      a3 = v20;
    }
  }
  sub_1B645DCC0(a1, a2, a3, (uint64_t *)a5, v8[446], 0);
  *(void *)a1 = &unk_1F0FB31C0;
  long long v9 = *(_OWORD *)(a5 + 40);
  *(_OWORD *)(a1 + 384) = *(_OWORD *)(a5 + 24);
  *(_OWORD *)(a1 + 400) = v9;
  long long v10 = *(_OWORD *)(a5 + 56);
  long long v11 = *(_OWORD *)(a5 + 72);
  long long v12 = *(_OWORD *)(a5 + 104);
  *(_OWORD *)(a1 + 448) = *(_OWORD *)(a5 + 88);
  *(_OWORD *)(a1 + 464) = v12;
  *(_OWORD *)(a1 + 416) = v10;
  *(_OWORD *)(a1 + 432) = v11;
  long long v13 = *(_OWORD *)(a5 + 120);
  long long v14 = *(_OWORD *)(a5 + 136);
  long long v15 = *(_OWORD *)(a5 + 168);
  *(_OWORD *)(a1 + 512) = *(_OWORD *)(a5 + 152);
  *(_OWORD *)(a1 + 528) = v15;
  *(_OWORD *)(a1 + 480) = v13;
  *(_OWORD *)(a1 + 496) = v14;
  *(_OWORD *)(a1 + 544) = 0u;
  *(_OWORD *)(a1 + 560) = 0u;
  *(_OWORD *)(a1 + 576) = 0u;
  CFX::RG::TextureDescriptorReference::withSampleCount((_OWORD *)(a5 + 24), 1, (uint64_t)v21);
  uint64_t v16 = sub_1B63CFDE4(a4, (uint64_t)"COLOR_OUTLINE", v21);
  *(void *)(a1 + 584) = v16;
  CFX::RG::Pass::renderTo(a1, (uint64_t)v16, 0x100000000, 0);
  return a1;
}

void sub_1B6601C3C(_Unwind_Exception *a1)
{
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B6601C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = sub_1B6447B50(*(void *)(a1 + 368), (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Authoring", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/AuthoringPass.mm", 406, v6 | 0x300000000);
  unint64_t v7 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  uint64_t v8 = *(void *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 584))+ 16);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v7 ^ ((0x9DDFEA08EB382D69 * (v8 ^ v7)) >> 47) ^ (0x9DDFEA08EB382D69 * (v8 ^ v7)));
  unint64_t v10 = 0x9DDFEA08EB382D69 * (v9 ^ (v9 >> 47));
  BOOL v11 = *(void *)(a1 + 576) != 0;
  uint64_t v12 = 0x9DDFEA08EB382D69
      * ((0x9DDFEA08EB382D69
        * (v10 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v11)))) ^ ((0x9DDFEA08EB382D69 * (v10 ^ ((0x9DDFEA08EB382D69 * (v10 ^ v11)) >> 47) ^ (0x9DDFEA08EB382D69 * (v10 ^ v11)))) >> 47));
  uint64_t v13 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v12);
  *(void *)(a1 + 544) = v13;
  if (!v13)
  {
    *(void *)(a1 + 544) = sub_1B6601E40(*(CFX::CrossFrameResourceManager **)(a2 + 32), v12);
    long long v21 = (void *)sub_1B6445900(*(void *)(a1 + 368), v14, v15, v16, v17, v18, v19, v20);
    uint64_t v25 = objc_msgSend_resourceManager(v21, v22, v23, v24);
    id v26 = objc_alloc_init(MEMORY[0x1E4F35228]);
    BOOL v44 = *(void *)(a1 + 576) != 0;
    objc_msgSend_setConstantValue_type_atIndex_(v26, v27, (uint64_t)&v44, 53, 0);
    uint64_t v28 = *(void *)(a1 + 544);
    uint64_t v29 = (void *)sub_1B653EFAC((uint64_t)v25);
    *((void *)&v38 + 1) = objc_msgSend_frameworkLibrary(v29, v30, v31, v32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0,
                              0);
    *(void *)&long long v39 = v8;
    LOBYTE(v40) = 1;
    *((void *)&v41 + 1) = v26;
    *((void *)&v42 + 1) = @"vfx_outline_vert";
    *(void *)&long long v43 = @"vfx_outline_frag";
    uint64_t v35 = objc_msgSend_newRenderPipelineStateWithDesc_(v25, v33, (uint64_t)&v37, v34);
    uint64_t v36 = *(void **)(v28 + 16);
    if (v36 != (void *)v35)
    {
      if (v36) {

      }
      *(void *)(v28 + 16) = v35;
    }
  }
  prof_endFlame();
}

void sub_1B6601E1C(_Unwind_Exception *a1)
{
}

uint64_t sub_1B6601E40(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v2 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v2) {
    operator new();
  }
  return v2;
}

void sub_1B6601EC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v6 = sub_1B6447B50(*(void *)(a1 + 368), (const char *)a2, a3, a4);
  prof_beginFlameSmallData((uint64_t)"Authoring", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/RenderGraphV2/Passes/AuthoringPass.mm", 442, v6 | 0x300000000);
  uint64_t v14 = (void *)sub_1B6445900(*(void *)(a1 + 368), v7, v8, v9, v10, v11, v12, v13);
  uint64_t v25 = objc_msgSend_renderEncoder(v14, v15, v16, v17);
  uint64_t v26 = *(void *)(a1 + 544);
  uint64_t v27 = *(void **)(v26 + 16);
  if (!v27)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v19, v20, v21, v22, v23, v24, (uint64_t)"_ptr != NULL");
    uint64_t v27 = *(void **)(v26 + 16);
  }
  uint64_t v28 = objc_msgSend_state(v27, v18, v19, v20);
  objc_msgSend_setRenderPipelineState_(*(void **)(v25 + 16), v29, v28, v30);
  id Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 552));
  sub_1B63C6ED0(v25, Texture, 0, v32);
  id v33 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 568));
  sub_1B63C6ED0(v25, v33, 1, v34);
  uint64_t v35 = *(const CFX::RG::Resource **)(a1 + 576);
  if (v35)
  {
    id v36 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v35);
    sub_1B63C6ED0(v25, v36, 2, v37);
  }
  id v38 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 560));
  sub_1B63C6ED0(v25, v38, 3, v39);
  sub_1B63C6F54(v25, v40);

  prof_endFlame();
}

void sub_1B6601FFC(_Unwind_Exception *a1)
{
}

uint64_t *sub_1B6602020(CFX::RG::RenderGraphContext *a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v12 = (void *)sub_1B6446254(*(void *)(a3 + 8), 0, a3, a4, a5, a6, a7, a8);
  BOOL v13 = sub_1B6600AA8(*(void *)(a3 + 8), v12);
  uint64_t v14 = (long long *)CFX::RG::Resource::constTextureDesc(*(CFX::RG::Resource **)a4);
  long long v15 = v14[1];
  long long v116 = *v14;
  long long v117 = v15;
  long long v16 = v14[5];
  long long v18 = v14[2];
  long long v17 = v14[3];
  long long v120 = v14[4];
  long long v121 = v16;
  long long v118 = v18;
  long long v119 = v17;
  long long v19 = v14[9];
  long long v21 = v14[6];
  long long v20 = v14[7];
  long long v124 = v14[8];
  long long v125 = v19;
  long long v122 = v21;
  long long v123 = v20;
  uint64_t v22 = (long long *)CFX::RG::Resource::constTextureDesc(*(CFX::RG::Resource **)(a4 + 16));
  long long v23 = v22[1];
  long long v106 = *v22;
  long long v107 = v23;
  long long v24 = v22[5];
  long long v26 = v22[2];
  long long v25 = v22[3];
  long long v110 = v22[4];
  long long v111 = v24;
  long long v108 = v26;
  long long v109 = v25;
  long long v27 = v22[8];
  long long v29 = v22[6];
  long long v28 = v22[7];
  long long v115 = v22[9];
  long long v114 = v27;
  long long v112 = v29;
  long long v113 = v28;
  unsigned int v30 = *(unsigned __int8 *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a1, *(const CFX::RG::Resource **)a4)
                           + 9);
  unsigned int v31 = *(unsigned __int8 *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a1, *(const CFX::RG::Resource **)(a4 + 16))+ 9);
  uint64_t v39 = (void *)sub_1B6445900(*(void *)(a3 + 8), v32, v33, v34, v35, v36, v37, v38);
  uint64_t v43 = objc_msgSend_sampleCount(v39, v40, v41, v42);
  if (v31 < 2) {
    unsigned __int8 v44 = 1;
  }
  else {
    unsigned __int8 v44 = v43;
  }
  BOOL v45 = v43 < 2 || v31 < 2;
  long long v99 = *(_OWORD *)a3;
  __int16 v100 = *(_WORD *)(a3 + 16);
  uint64_t v102 = 0;
  uint64_t v101 = 0;
  uint64_t v103 = *(void *)(a4 + 16);
  uint64_t v104 = 0;
  char v105 = 0;
  uint64_t v46 = sub_1B6602428(a2, (uint64_t)&v99);
  uint64_t v47 = (uint64_t *)v46;
  if (*(unsigned char *)(a4 + 32)) {
    uint64_t v48 = 0x200000002;
  }
  else {
    uint64_t v48 = 0x200000001;
  }
  CFX::RG::Pass::renderTo(v46, *(void *)(a4 + 16), v48, -1);
  uint64_t v49 = *(CFX::RG::Pass **)(a4 + 8);
  if (v49) {
    CFX::RG::Pass::dependsOn(v47, v49);
  }
  if (v13)
  {
    long long v85 = v122;
    long long v86 = v123;
    long long v87 = v124;
    long long v88 = v125;
    long long v81 = v118;
    long long v82 = v119;
    long long v83 = v120;
    long long v84 = v121;
    long long v79 = v116;
    long long v80 = v117;
    long long v96 = v113;
    long long v97 = v114;
    long long v98 = v115;
    long long v94 = v111;
    long long v95 = v112;
    long long v91 = v108;
    long long v92 = v109;
    long long v93 = v110;
    long long v89 = v106;
    uint64_t v50 = *(void *)(a3 + 8);
    v77[0] = "Picked object";
    v77[1] = v50;
    __int16 v78 = 0;
    long long v90 = v107;
    uint64_t v51 = (CFX::RG::Pass *)sub_1B660247C(a2, a2, (uint64_t)v77);
    uint64_t v52 = *(CFX::RG::RenderGraphBuilder **)a4;
    uint64_t v53 = *(CFX::RG::Resource **)(a4 + 8);
    CFX::RG::TextureDescriptorReference::withSampleCount(&v116, 1, (uint64_t)v74);
    uint64_t v55 = (CFX::RG::Resource *)CFX::RG::copyIfNeeded((CFX::RG *)a2, v52, v53, (CFX::RG::Pass *)v74, 0, v54);
    uint64_t v56 = *(CFX::RG::RenderGraphBuilder **)(a4 + 16);
    uint64_t v57 = *(CFX::RG::Resource **)(a4 + 24);
    CFX::RG::TextureDescriptorReference::withSampleCount(&v106, 1, (uint64_t)v74);
    uint64_t v59 = (CFX::RG::Resource *)CFX::RG::copyIfNeeded((CFX::RG *)a2, v56, v57, (CFX::RG::Pass *)v74, 0, v58);
    uint64_t v60 = *(void *)(a3 + 8);
    v74[0] = "Outline";
    v74[1] = v60;
    __int16 v75 = 0;
    CFX::RG::TextureDescriptorReference::withSampleCount(&v116, 1, (uint64_t)&v76);
    uint64_t v61 = (uint64_t *)sub_1B66024D4(a2, a2, (uint64_t)v74);
    unsigned int v62 = (CFX::RG::Resource *)*((void *)v51 + 50);
    v61[69] = (uint64_t)v62;
    CFX::RG::Pass::readFrom(v61, v62);
    uint64_t v63 = (CFX::RG::Resource *)*((void *)v51 + 51);
    v61[70] = (uint64_t)v63;
    CFX::RG::Pass::readFrom(v61, v63);
    v61[71] = (uint64_t)v55;
    CFX::RG::Pass::readFrom(v61, v55);
    if (!*(unsigned char *)(a4 + 32))
    {
      v61[72] = (uint64_t)v59;
      CFX::RG::Pass::readFrom(v61, v59);
    }
    CFX::RG::Pass::dependsOn(v61, v51);
    uint64_t v64 = *(CFX::RG::Pass **)(a4 + 24);
    if (v64) {
      CFX::RG::Pass::dependsOn(v61, v64);
    }
    CFX::RG::TextureDescriptorReference::withSampleCount(&v116, v44, (uint64_t)v73);
    uint64_t v65 = sub_1B63CFDE4(a2, (uint64_t)"AUTHORING COLOR OUTPUT", v73);
    uint64_t v66 = (CFX::RG::Resource *)v61[73];
    v47[51] = (uint64_t)v66;
    CFX::RG::Pass::readFrom(v47, v66);
    CFX::RG::Pass::renderTo((uint64_t)v47, (uint64_t)v65, 0x100000000, 0);
    v47[52] = (uint64_t)v65;
    CFX::RG::Pass::dependsOn(v47, (CFX::RG::Pass *)v61);
  }
  else
  {
    char v67 = v30 > 1 || v45;
    if (v67)
    {
      CFX::RG::Pass::renderTo((uint64_t)v47, *(void *)a4, 0x100000001, 0);
      v47[52] = *(void *)a4;
    }
    else
    {
      uint64_t v68 = (_OWORD *)CFX::RG::Resource::constTextureDesc(*(CFX::RG::Resource **)a4);
      CFX::RG::TextureDescriptorReference::withSampleCount(v68, v44, (uint64_t)v72);
      uint64_t v69 = sub_1B63CFDE4(a2, (uint64_t)"AUTHORING COLOR OUTPUT", v72);
      uint64_t v70 = *(CFX::RG::Resource **)a4;
      v47[51] = *(void *)a4;
      CFX::RG::Pass::readFrom(v47, v70);
      CFX::RG::Pass::renderTo((uint64_t)v47, (uint64_t)v69, 0x100000000, 0);
      v47[52] = (uint64_t)v69;
    }
  }
  return v47;
}

uint64_t sub_1B6602428(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  v6[0] = sub_1B6602B0C(v6[0], v4, v6, a2);
  sub_1B63C88CC(a1 + 18, v6);
  return v6[0];
}

uint64_t sub_1B660247C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B6602B5C(v7[0], v5, v7, a2, a3);
  sub_1B63C88CC(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B66024D4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B6602BBC(v7[0], v5, v7, a2, a3);
  sub_1B63C88CC(a1 + 18, v7);
  return v7[0];
}

void sub_1B6602530(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B660256C(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B66025A8(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B66025E0(uint64_t a1, int a2)
{
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 36) = a2;
  unsigned int v3 = a2 + 15;
  size_t v4 = 2 * (a2 + 15);
  *(void *)(a1 + 24) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, (2 * (a2 + 15)), 4, 2);
  size_t v5 = 8 * v3;
  *(void *)(a1 + 8) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, v5 & 0xFFFFFFF8, 8, 2);
  *(void *)(a1 + 16) = CStackAllocatorAllocateAligned(*(uint64_t **)a1, v5 & 0xFFFFFFF8, 8, 2);
  memset(*(void **)(a1 + 8), 255, v5);
  unsigned int v6 = *(void **)(a1 + 24);

  bzero(v6, v4);
}

uint64_t sub_1B660268C(uint64_t a1, uint64_t a2, void *a3)
{
  while (1)
  {
    int v6 = *(_DWORD *)(a1 + 36);
    uint64_t v7 = (v6 - 1) & a2;
    uint64_t v8 = *(void *)(a1 + 24);
    unsigned int v9 = *(unsigned __int16 *)(v8 + 2 * v7);
    if (v9 >= 2) {
      break;
    }
LABEL_6:
    unsigned int v12 = v7 + 496;
    unsigned int v13 = v6 + 15;
    if (v13 < (int)v7 + 496) {
      unsigned int v12 = v13;
    }
    if (v7 >= v12)
    {
      unsigned int v15 = v7;
    }
    else
    {
      uint64_t v14 = (__int16 *)(v8 + 2 * v7);
      unsigned int v15 = v7;
      while (1)
      {
        __int16 v16 = *v14++;
        if ((v16 & 1) == 0) {
          break;
        }
        if (v12 == ++v15) {
          goto LABEL_33;
        }
      }
    }
    if (v15 != v12)
    {
      *(_WORD *)(v8 + 2 * v15) |= 1u;
      if (v15 <= (int)v7 + 14)
      {
        uint64_t v21 = v15;
      }
      else
      {
        while (2)
        {
          if (v15 >= 0xF) {
            unsigned int v17 = v15 - 14;
          }
          else {
            unsigned int v17 = 0;
          }
          unsigned int v18 = v17 - 1;
          if (v17 <= v15) {
            unsigned int v19 = v15;
          }
          else {
            unsigned int v19 = v17;
          }
          char v20 = 1;
          while (1)
          {
            uint64_t v21 = v18 + 1;
            if (v17 <= v21) {
              break;
            }
LABEL_27:
            ++v20;
            unsigned int v18 = v21;
            if (v21 == v19) {
              goto LABEL_32;
            }
          }
          int v22 = 1 << (v18 - v17 + 2);
          char v23 = v20;
          unsigned int v24 = v17;
          while (1)
          {
            unsigned int v25 = v24;
            if (((unsigned __int16)v22 & *(_WORD *)(v8 + 2 * v24)) != 0) {
              break;
            }
            ++v24;
            LOWORD(v22) = (unsigned __int16)v22 >> 1;
            --v23;
            if (v25 + 1 > v21) {
              goto LABEL_27;
            }
          }
          if (v21 >= v15)
          {
LABEL_32:
            *(_WORD *)(v8 + 2 * v15) ^= 1u;
            goto LABEL_33;
          }
          uint64_t v26 = *(void *)(a1 + 16);
          *(void *)(*(void *)(a1 + 8) + 8 * v15) = *(void *)(*(void *)(a1 + 8) + 8 * v21);
          *(void *)(v26 + 8 * v15) = *(void *)(v26 + 8 * v21);
          uint64_t v8 = *(void *)(a1 + 24);
          *(_WORD *)(v8 + 2 * v24) = (*(_WORD *)(v8 + 2 * v24) | (1 << (v15 - v24 + 1))) ^ (1 << v23);
          unsigned int v15 = v21;
          if (v21 > (int)v7 + 14) {
            continue;
          }
          break;
        }
        LOBYTE(v15) = v21;
      }
      *(void *)(*(void *)(a1 + 16) + 8 * v21) = *a3;
      *(void *)(*(void *)(a1 + 8) + 8 * v21) = a2;
      uint64_t v28 = *(void *)(a1 + 24);
      *(_WORD *)(v28 + 2 * v21) |= 1u;
      uint64_t result = 1;
      *(_WORD *)(v28 + 2 * v7) |= 1 << (v15 - v7 + 1);
      ++*(_DWORD *)(a1 + 32);
      return result;
    }
LABEL_33:
    sub_1B66028B0(a1);
  }
  unsigned int v10 = (v6 - 1) & a2;
  while ((v9 & 2) == 0 || *(void *)(*(void *)(a1 + 8) + 8 * v10) != a2)
  {
    ++v10;
    BOOL v11 = v9 > 3;
    v9 >>= 1;
    if (!v11) {
      goto LABEL_6;
    }
  }
  uint64_t result = 0;
  *(void *)(*(void *)(a1 + 16) + 8 * v10) = *a3;
  return result;
}

void sub_1B66028B0(uint64_t a1)
{
  unsigned int v3 = *(void **)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  size_t v4 = *(__int16 **)(a1 + 24);
  int v5 = *(_DWORD *)(a1 + 36);
  sub_1B66025E0(a1, 2 * v5);
  uint64_t v6 = (v5 + 15);
  if (v6)
  {
    do
    {
      __int16 v7 = *v4++;
      if (v7) {
        sub_1B660268C(a1, *v3, v2);
      }
      ++v3;
      v2 += 8;
      --v6;
    }
    while (v6);
  }
}

void *sub_1B6602924(void *a1)
{
  *a1 = &unk_1F0FB3378;
  uint64_t v2 = (void *)a1[7];
  if (v2) {

  }
  unsigned int v3 = (void *)a1[6];
  if (v3) {

  }
  size_t v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
  int v5 = (void *)a1[4];
  if (v5) {

  }
  uint64_t v6 = (void *)a1[3];
  if (v6) {

  }
  __int16 v7 = (void *)a1[2];
  if (v7) {

  }
  return a1;
}

void sub_1B66029AC(void *a1)
{
  *a1 = &unk_1F0FB3378;
  uint64_t v2 = (void *)a1[7];
  if (v2) {

  }
  unsigned int v3 = (void *)a1[6];
  if (v3) {

  }
  size_t v4 = (const void *)a1[5];
  if (v4) {
    CFRelease(v4);
  }
  int v5 = (void *)a1[4];
  if (v5) {

  }
  uint64_t v6 = (void *)a1[3];
  if (v6) {

  }
  __int16 v7 = (void *)a1[2];
  if (v7) {

  }
  JUMPOUT(0x1BA9B6D80);
}

void *sub_1B6602A54(void *a1)
{
  *a1 = &unk_1F0FB31A0;
  uint64_t v2 = (void *)a1[2];
  if (v2) {

  }
  return a1;
}

void sub_1B6602AA0(void *a1)
{
  *a1 = &unk_1F0FB31A0;
  uint64_t v1 = (void *)a1[2];
  if (v1) {

  }
  JUMPOUT(0x1BA9B6D80);
}

uint64_t sub_1B6602B0C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v6 = sub_1B63C8330(v8, 0x1D0u, 8u);
  return sub_1B6600C48(v6, *a3, a3[1], a4);
}

uint64_t sub_1B6602B5C(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = sub_1B63C8330(v10, 0x1A0u, 8u);
  return sub_1B66017B0(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B6602BBC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = sub_1B63C8330(v10, 0x250u, 8u);
  return sub_1B6601AEC(v8, *a3, a3[1], a4, a5);
}

const void *sub_1B6602C1C(void *key)
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  CFDictionaryRef v2 = (const __CFDictionary *)qword_1E9DDBE00;
  if (!qword_1E9DDBE00)
  {
    long long v11 = xmmword_1E61453D0;
    long long v12 = *(_OWORD *)&off_1E61453E0;
    long long v13 = xmmword_1E61453F0;
    long long v7 = xmmword_1E6145390;
    long long v8 = *(_OWORD *)&off_1E61453A0;
    long long v9 = xmmword_1E61453B0;
    long long v10 = *(_OWORD *)&off_1E61453C0;
    *(_OWORD *)keys = xmmword_1E6145370;
    long long v6 = *(_OWORD *)&off_1E6145380;
    v4[6] = xmmword_1E6145460;
    v4[7] = *(_OWORD *)&off_1E6145470;
    v4[8] = xmmword_1E6145480;
    uint64_t v4[2] = xmmword_1E6145420;
    v4[3] = *(_OWORD *)&off_1E6145430;
    v4[4] = xmmword_1E6145440;
    v4[5] = *(_OWORD *)&off_1E6145450;
    v4[0] = xmmword_1E6145400;
    v4[1] = *(_OWORD *)&off_1E6145410;
    CFDictionaryRef v2 = CFDictionaryCreate(0, (const void **)keys, (const void **)v4, 17, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
    qword_1E9DDBE00 = (uint64_t)v2;
  }
  return CFDictionaryGetValue(v2, key);
}

uint64_t sub_1B6602D10(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

void sub_1B6602D40()
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)keys = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v40 = 0u;
  uint64_t v41 = 0;
  uint64_t v23 = 0;
  long long v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  *(_OWORD *)values = 0u;
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 100);
  for (uint64_t i = 0; i != 35; ++i)
  {
    CFStringRef v3 = off_1E61454B0[i];
    keys[i] = (void *)CFStringCreateWithFormat(v0, 0, @"_surface.%@", v3);
    CFStringReplaceAll(Mutable, v3);
    CFStringUppercase(Mutable, 0);
    values[i] = (void *)CFStringCreateWithFormat(v0, 0, @"USE_%@", Mutable);
  }
  CFRelease(Mutable);
  CFDictionaryRef v4 = CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 35, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v5 = 0;
  qword_1E9DDBE18 = (uint64_t)v4;
  do
  {
    CFRelease(keys[v5]);
    CFRelease(values[v5++]);
  }
  while (v5 != 35);
}

void sub_1B6602EF8()
{
  uint64_t v14 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)keys = 0u;
  long long v11 = 0u;
  long long v12 = 0u;
  long long v13 = 0u;
  *(_OWORD *)values = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  CFAllocatorRef v0 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
  Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 100);
  for (uint64_t i = 0; i != 8; ++i)
  {
    CFStringRef v3 = off_1E61455E8[i];
    keys[i] = (void *)CFStringCreateWithFormat(v0, 0, @"u_%@Texture", v3);
    CFStringReplaceAll(Mutable, v3);
    CFStringUppercase(Mutable, 0);
    values[i] = (void *)CFStringCreateWithFormat(v0, 0, @"USE_%@_MAP", Mutable);
  }
  CFRelease(Mutable);
  CFDictionaryRef v4 = CFDictionaryCreate(v0, (const void **)keys, (const void **)values, 8, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  uint64_t v5 = 0;
  qword_1E9DDBE28 = (uint64_t)v4;
  do
  {
    CFRelease(keys[v5]);
    CFRelease(values[v5++]);
  }
  while (v5 != 8);
}

CFDictionaryRef sub_1B6603070()
{
  uint64_t v7 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)keys = xmmword_1E6145648;
  long long v4 = *(_OWORD *)&off_1E6145658;
  long long v6 = @"_geometry.clipDistance3";
  long long v5 = xmmword_1E6145668;
  v1[0] = xmmword_1E6145680;
  v1[1] = *(_OWORD *)&off_1E6145690;
  v1[2] = xmmword_1E61456A0;
  CFDictionaryRef v2 = @"USE_CLIP_DISTANCE3";
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)v1, 7, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  qword_1E9DDBE38 = (uint64_t)result;
  return result;
}

CFDictionaryRef sub_1B660312C()
{
  uint64_t v3 = *MEMORY[0x1E4F143B8];
  long long v1 = xmmword_1E61456E8;
  *(_OWORD *)keys = xmmword_1E61456D8;
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&v1, 2, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  qword_1E9DDBE48 = (uint64_t)result;
  return result;
}

CFDictionaryRef sub_1B66031C4()
{
  keys[1] = *(void **)MEMORY[0x1E4F143B8];
  values = @"USE_BARYCENTRIC_COORD";
  keys[0] = @"u_barycentricCoord";
  CFDictionaryRef result = CFDictionaryCreate((CFAllocatorRef)*MEMORY[0x1E4F1CF80], (const void **)keys, (const void **)&values, 1, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  qword_1E9DDBE58 = (uint64_t)result;
  return result;
}

uint64_t sub_1B6603254(const __CFString *a1, int a2, int a3, __int16 a4)
{
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v53 = 0u;
  sub_1B64EB724(0, (uint64_t)&v53);
  sub_1B64EA9C0(a1, (uint64_t)&v53, 0);
  long long v6 = v53;
  uint64_t v7 = (const void *)v54;
  if (a3) {
    long long v8 = (const void *)*((void *)&v54 + 1);
  }
  else {
    long long v8 = 0;
  }
  long long v9 = v55;
  long long v10 = (const void *)v56;
  long long v11 = (const void *)v57;
  __int16 v12 = WORD4(v57);
  if (qword_1E9DDBE10 != -1) {
    dispatch_once_f(&qword_1E9DDBE10, &qword_1E9DDBE08, (dispatch_function_t)sub_1B6602D10);
  }
  uint64_t v19 = sub_1B63C8D44(qword_1E9DDBE08, 0x70uLL);
  if ((void)v6)
  {
    if (CFStringGetLength((CFStringRef)v6))
    {
      long long v20 = *(const void **)(v19 + 16);
      if (v20 != (const void *)v6)
      {
        if (v20)
        {
          CFRelease(v20);
          *(void *)(v19 + 16) = 0;
        }
        *(void *)(v19 + 16) = CFRetain((CFTypeRef)v6);
      }
    }
  }
  if ((void)v9)
  {
    if (CFDictionaryGetCount((CFDictionaryRef)v9))
    {
      long long v21 = *(const void **)(v19 + 56);
      if (v21 != (const void *)v9)
      {
        if (v21)
        {
          CFRelease(v21);
          *(void *)(v19 + 56) = 0;
        }
        *(void *)(v19 + 56) = CFRetain((CFTypeRef)v9);
      }
    }
  }
  if (*((void *)&v9 + 1))
  {
    if (CFDictionaryGetCount(*((CFDictionaryRef *)&v9 + 1)))
    {
      long long v22 = *(const void **)(v19 + 64);
      if (v22 != *((const void **)&v9 + 1))
      {
        if (v22)
        {
          CFRelease(v22);
          *(void *)(v19 + 64) = 0;
        }
        *(void *)(v19 + 64) = CFRetain(*((CFTypeRef *)&v9 + 1));
      }
    }
  }
  if (v10)
  {
    if (CFDictionaryGetCount((CFDictionaryRef)v10))
    {
      uint64_t v23 = *(const void **)(v19 + 72);
      if (v23 != v10)
      {
        if (v23)
        {
          CFRelease(v23);
          *(void *)(v19 + 72) = 0;
        }
        *(void *)(v19 + 72) = CFRetain(v10);
      }
    }
  }
  if (*((void *)&v6 + 1) && CFStringGetLength(*((CFStringRef *)&v6 + 1)))
  {
    unsigned int v24 = *(const void **)(v19 + 24);
    if (v24 != *((const void **)&v6 + 1))
    {
      if (v24)
      {
        CFRelease(v24);
        *(void *)(v19 + 24) = 0;
      }
      *(void *)(v19 + 24) = CFRetain(*((CFTypeRef *)&v6 + 1));
    }
  }
  else
  {
    sub_1B63F2F54(16, @"Error: modifier without code is invalid", v13, v14, v15, v16, v17, v18, v50);
  }
  if (v7)
  {
    if (CFDictionaryGetCount((CFDictionaryRef)v7))
    {
      long long v25 = *(const void **)(v19 + 32);
      if (v25 != v7)
      {
        if (v25)
        {
          CFRelease(v25);
          *(void *)(v19 + 32) = 0;
        }
        *(void *)(v19 + 32) = CFRetain(v7);
      }
    }
  }
  if (v8)
  {
    if (CFDictionaryGetCount((CFDictionaryRef)v8))
    {
      long long v26 = *(const void **)(v19 + 48);
      if (v26 != v8)
      {
        if (v26)
        {
          CFRelease(v26);
          *(void *)(v19 + 48) = 0;
        }
        *(void *)(v19 + 48) = CFRetain(v8);
      }
    }
  }
  if (v11)
  {
    if (CFDictionaryGetCount((CFDictionaryRef)v11))
    {
      long long v27 = *(const void **)(v19 + 40);
      if (v27 != v11)
      {
        if (v27)
        {
          CFRelease(v27);
          *(void *)(v19 + 40) = 0;
        }
        *(void *)(v19 + 40) = CFRetain(v11);
      }
    }
  }
  __int16 v28 = v12 | a4;
  *(_DWORD *)(v19 + 88) = a2;
  *(_WORD *)(v19 + 94) = 0;
  uint64_t v29 = *(void *)(v19 + 24);
  if (v29)
  {
    *(void *)&context.hash[2] = 0;
    uint64_t v30 = *(void *)(v19 + 16);
    *(void *)context.count = v29;
    *(void *)context.hash = v30;
    CFDictionaryRef v31 = *(const __CFDictionary **)(v19 + 32);
    CFAllocatorRef v32 = (const __CFAllocator *)*MEMORY[0x1E4F1CF80];
    if (v31)
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, v31);
      CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(v19 + 32));
    }
    else
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
      CFIndex Count = 0;
    }
    *(void *)&context.hash[2] = MutableCopy;
    if (qword_1E9DDBE20 != -1) {
      dispatch_once(&qword_1E9DDBE20, &unk_1F0FB6008);
    }
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1E9DDBE18, (CFDictionaryApplierFunction)sub_1B66044DC, &context);
    if (qword_1E9DDBE30 != -1) {
      dispatch_once(&qword_1E9DDBE30, &unk_1F0FB6148);
    }
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1E9DDBE28, (CFDictionaryApplierFunction)sub_1B66044DC, &context);
    if (qword_1E9DDBE40 != -1) {
      dispatch_once(&qword_1E9DDBE40, &unk_1F0FB61A8);
    }
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1E9DDBE38, (CFDictionaryApplierFunction)sub_1B66044DC, &context);
    if (qword_1E9DDBE50 != -1) {
      dispatch_once(&qword_1E9DDBE50, &unk_1F0FB62A8);
    }
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1E9DDBE48, (CFDictionaryApplierFunction)sub_1B66044DC, &context);
    if (qword_1E9DDBE60 != -1) {
      dispatch_once(&qword_1E9DDBE60, &unk_1F0FB6328);
    }
    CFDictionaryApplyFunction((CFDictionaryRef)qword_1E9DDBE58, (CFDictionaryApplierFunction)sub_1B66044DC, &context);
    if (CFDictionaryGetCount(*(CFDictionaryRef *)&context.hash[2]) != Count)
    {
      CFDictionaryRef Copy = CFDictionaryCreateCopy(v32, *(CFDictionaryRef *)&context.hash[2]);
      if (!Copy) {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v35, v36, v37, v38, v39, v40, (uint64_t)"newDefines");
      }
      CFDictionaryRef v42 = *(CFDictionaryRef *)(v19 + 32);
      if (v42 != Copy)
      {
        if (v42)
        {
          CFRelease(v42);
          *(void *)(v19 + 32) = 0;
        }
        if (Copy) {
          CFTypeRef v43 = CFRetain(Copy);
        }
        else {
          CFTypeRef v43 = 0;
        }
        *(void *)(v19 + 32) = v43;
      }
      CFRelease(Copy);
    }
    CFRelease(*(CFTypeRef *)&context.hash[2]);
  }
  CFDictionaryRef v44 = *(const __CFDictionary **)(v19 + 32);
  if (v44)
  {
    if (CFDictionaryGetCountOfKey(v44, @"USE_TANGENT")
      || CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_TANGENT"))
    {
      v28 |= 2u;
    }
    CFDictionaryRef v45 = *(const __CFDictionary **)(v19 + 32);
    *(_WORD *)(v19 + 92) = v28;
    if (v45)
    {
      if (CFDictionaryGetCountOfKey(v45, @"USE_EMISSIVETEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 1u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_DIFFUSETEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 2u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_SPECULARTEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 4u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_REFLECTIVETEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 8u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_TRANSPARENTTEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 0x10u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_FILTERTEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 0x20u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_NORMALTEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 0x40u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_METALNESSTEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 0x200u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_ROUGHNESSTEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 0x400u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_CLEARCOATTEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 0x800u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_CLEARCOATROUGHNESSTEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 0x1000u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_CLEARCOATNORMALTEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 0x2000u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_SUBSURFACETEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 0x4000u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_SUBSURFACERADIUSTEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 0x8000u;
      }
      if (CFDictionaryGetCountOfKey(*(CFDictionaryRef *)(v19 + 32), @"USE_AMBIENTOCCLUSIONTEXCOORD")) {
        *(_WORD *)(v19 + 94) |= 0x80u;
      }
    }
  }
  else
  {
    *(_WORD *)(v19 + 92) = v28;
  }
  memset(&context, 0, sizeof(context));
  CC_SHA256_Init(&context);
  CC_SHA256_Update(&context, (const void *)(v19 + 88), 4u);
  uint64_t v46 = *(void *)(v19 + 24);
  if (v46) {
    sub_1B6604178(v46, (uint64_t)&context);
  }
  uint64_t v47 = *(void *)(v19 + 16);
  if (v47) {
    sub_1B6604178(v47, (uint64_t)&context);
  }
  CFDictionaryRef v48 = *(const __CFDictionary **)(v19 + 32);
  if (v48) {
    CFDictionaryApplyFunction(v48, (CFDictionaryApplierFunction)sub_1B66042D0, &context);
  }
  CC_SHA256_Final((unsigned __int8 *)(v19 + 96), &context);
  sub_1B64EB864((uint64_t)&v53);
  return v19;
}

uint64_t sub_1B6603A04(CFStringRef theString, int a2, CFDictionaryRef theDict, int a4, __int16 a5)
{
  v24[1] = *MEMORY[0x1E4F143B8];
  if (theDict && CFDictionaryGetCount(theDict) >= 1)
  {
    CFIndex Count = CFDictionaryGetCount(theDict);
    v24[0] = v24;
    MEMORY[0x1F4188790](Count, v11);
    unint64_t v12 = (8 * Count + 15) & 0xFFFFFFFFFFFFFFF0;
    uint64_t v13 = (void *)((char *)v24 - v12);
    if ((unint64_t)(8 * Count) >= 0x200) {
      size_t v14 = 512;
    }
    else {
      size_t v14 = 8 * Count;
    }
    bzero((char *)v24 - v12, v14);
    MEMORY[0x1F4188790](v15, v16);
    uint64_t v17 = (void *)((char *)v24 - v12);
    bzero((char *)v24 - v12, v14);
    CFDictionaryGetKeysAndValues(theDict, (const void **)((char *)v24 - v12), (const void **)((char *)v24 - v12));
    CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
    if (Count >= 1)
    {
      do
      {
        uint64_t v20 = *v13++;
        uint64_t v19 = v20;
        uint64_t v21 = *v17++;
        CFStringAppendFormat(Mutable, 0, @"#define %@ %@\n", v19, v21);
        --Count;
      }
      while (Count);
    }
    CFStringAppend(Mutable, theString);
  }
  else
  {
    CFMutableStringRef Mutable = CFStringCreateMutableCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, theString);
  }
  uint64_t v22 = sub_1B6603254(Mutable, a2, a4, a5);
  CFRelease(Mutable);
  return v22;
}

uint64_t sub_1B6603BD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  }
  return *(void *)(a1 + 16);
}

uint64_t sub_1B6603C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  }
  return *(void *)(a1 + 40);
}

uint64_t sub_1B6603C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  }
  return *(void *)(a1 + 56);
}

uint64_t sub_1B6603CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  }
  return *(void *)(a1 + 72);
}

uint64_t sub_1B6603D08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  }
  return *(void *)(a1 + 24);
}

uint64_t sub_1B6603D54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  }
  return *(void *)(a1 + 32);
}

void sub_1B6603DA0(uint64_t a1)
{
  if (qword_1E9DDBE20 != -1) {
    dispatch_once(&qword_1E9DDBE20, &unk_1F0FB6008);
  }
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  uint64_t v6[2] = sub_1B6604030;
  _OWORD v6[3] = &unk_1E6145720;
  v6[4] = a1;
  sub_1B63CCA7C((const __CFDictionary *)qword_1E9DDBE18, (uint64_t)v6);
  if (qword_1E9DDBE30 != -1) {
    dispatch_once(&qword_1E9DDBE30, &unk_1F0FB6148);
  }
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  _OWORD v5[2] = sub_1B6604044;
  v5[3] = &unk_1E6145748;
  v5[4] = a1;
  sub_1B63CCA7C((const __CFDictionary *)qword_1E9DDBE28, (uint64_t)v5);
  if (qword_1E9DDBE40 != -1) {
    dispatch_once(&qword_1E9DDBE40, &unk_1F0FB61A8);
  }
  v4[0] = MEMORY[0x1E4F143A8];
  v4[1] = 0x40000000;
  uint64_t v4[2] = sub_1B6604058;
  v4[3] = &unk_1E6145770;
  v4[4] = a1;
  sub_1B63CCA7C((const __CFDictionary *)qword_1E9DDBE38, (uint64_t)v4);
  if (qword_1E9DDBE50 != -1) {
    dispatch_once(&qword_1E9DDBE50, &unk_1F0FB62A8);
  }
  v3[0] = MEMORY[0x1E4F143A8];
  v3[1] = 0x40000000;
  v3[2] = sub_1B660406C;
  v3[3] = &unk_1E6145798;
  v3[4] = a1;
  sub_1B63CCA7C((const __CFDictionary *)qword_1E9DDBE48, (uint64_t)v3);
  if (qword_1E9DDBE60 != -1) {
    dispatch_once(&qword_1E9DDBE60, &unk_1F0FB6328);
  }
  v2[0] = MEMORY[0x1E4F143A8];
  v2[1] = 0x40000000;
  v2[2] = sub_1B6604080;
  v2[3] = &unk_1E61457C0;
  v2[4] = a1;
  sub_1B63CCA7C((const __CFDictionary *)qword_1E9DDBE58, (uint64_t)v2);
}

uint64_t sub_1B6604030(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1B6604044(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1B6604058(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1B660406C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1B6604080(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1B6604094(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  }
  return *(__int16 *)(a1 + 92);
}

uint64_t sub_1B66040E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  }
  return *(unsigned __int16 *)(a1 + 94);
}

uint64_t sub_1B660412C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"iModifier");
  }
  return *(unsigned int *)(a1 + 88);
}

CFIndex sub_1B6604178(uint64_t a1, uint64_t a2)
{
  MEMORY[0x1F4188790](a1, a2);
  uint64_t v3 = v2;
  CFStringRef v5 = v4;
  uint64_t v12 = *MEMORY[0x1E4F143B8];
  CStringPtr = CFStringGetCStringPtr(v4, 0x600u);
  CFIndex result = CFStringGetLength(v5);
  CFIndex v8 = result;
  if (CStringPtr)
  {
    return CC_SHA256_Update(v3, CStringPtr, result);
  }
  else
  {
    do
    {
      if (!v8) {
        break;
      }
      CFIndex usedBufLen = 0;
      v14.location = (CFIndex)CStringPtr;
      v14.length = v8;
      CFIndex result = CFStringGetBytes(v5, v14, 0x8000100u, 0, 0, buffer, 0x8000, &usedBufLen);
      CFIndex v9 = result;
      if (usedBufLen) {
        CFIndex result = CC_SHA256_Update(v3, buffer, usedBufLen);
      }
      CStringPtr += v9;
      v8 -= v9;
    }
    while (v9);
  }
  return result;
}

CFIndex sub_1B66042D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  CFIndex result = sub_1B6604178(a1, a3);
  if (a2)
  {
    return sub_1B6604178(a2, a3);
  }
  return result;
}

uint64_t sub_1B6604324(uint64_t a1, CC_SHA256_CTX *c)
{
  return CC_SHA256_Update(c, (const void *)(a1 + 96), 0x20u);
}

void sub_1B660433C(void *a1)
{
  CFDictionaryRef v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  CFStringRef v4 = (const void *)a1[7];
  if (v4)
  {
    CFRelease(v4);
    a1[7] = 0;
  }
  CFStringRef v5 = (const void *)a1[8];
  if (v5)
  {
    CFRelease(v5);
    a1[8] = 0;
  }
  long long v6 = (const void *)a1[9];
  if (v6)
  {
    CFRelease(v6);
    a1[9] = 0;
  }
  uint64_t v7 = (const void *)a1[4];
  if (v7)
  {
    CFRelease(v7);
    a1[4] = 0;
  }
  CFIndex v8 = (const void *)a1[5];
  if (v8)
  {
    CFRelease(v8);
    a1[5] = 0;
  }
  CFIndex v9 = (const void *)a1[6];
  if (v9)
  {
    CFRelease(v9);
    a1[6] = 0;
  }
}

__CFString *sub_1B66043E0(uint64_t a1)
{
  CFMutableStringRef Mutable = CFStringCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0);
  CFStringAppendFormat(Mutable, 0, @"<CFXShaderModifier %p language:%s, entryPoint:\"%d\" flags:%x\n", a1, "Metal", *(unsigned int *)(a1 + 88), *(__int16 *)(a1 + 92));
  if (*(void *)(a1 + 16)) {
    CFStringAppendFormat(Mutable, 0, @"  declaration : %@\n", *(void *)(a1 + 16));
  }
  if (*(void *)(a1 + 56)) {
    CFStringAppendFormat(Mutable, 0, @"  arguments : %@\n", *(void *)(a1 + 56));
  }
  if (*(void *)(a1 + 72)) {
    CFStringAppendFormat(Mutable, 0, @"  varyings : %@\n", *(void *)(a1 + 72));
  }
  if (*(void *)(a1 + 24)) {
    CFStringAppendFormat(Mutable, 0, @"  code : %@\n", *(void *)(a1 + 24));
  }
  CFStringAppend(Mutable, @">");
  return Mutable;
}

void sub_1B66044DC(CFStringRef stringToFind, const void *a2, uint64_t a3)
{
  if ((unint64_t)CFStringFind((CFStringRef)*(void *)a3, stringToFind, 0).length
    || (CFStringRef v7 = *(const __CFString **)(a3 + 8)) != 0 && (unint64_t)CFStringFind(v7, stringToFind, 0).length)
  {
    long long v6 = *(__CFDictionary **)(a3 + 16);
    CFDictionarySetValue(v6, a2, @"2");
  }
}

uint64_t sub_1B6604568(const char *a1)
{
  if (!strcmp(a1, "f")) {
    return 1;
  }
  if (!strcmp(a1, "i") || !strcmp(a1, "I") || !strcmp(a1, "q") || !strcmp(a1, "Q")) {
    return 2;
  }
  if (!strcmp(a1, "s") || !strcmp(a1, "S")) {
    return 13;
  }
  if (!strcmp(a1, "B")) {
    return 3;
  }
  if (!strcmp(a1, "c") || !strcmp(a1, "C")) {
    return 4;
  }
  if (!strcmp(a1, "d")) {
    return 6;
  }
  if (!strcmp(a1, "{CATransform3D=dddddddddddddddd}")) {
    return 10;
  }
  if (!strcmp(a1, "{CGPoint=dd}")) {
    return 7;
  }
  if (!strcmp(a1, "{?=ffff}") || !strcmp(a1, "{CGRect={CGPoint=dd}{CGSize=dd}}")) {
    return 9;
  }
  if (!strcmp(a1, "{?=fff}")) {
    return 8;
  }
  if (*a1 == 64) {
    return 5;
  }
  return 0;
}

const void *sub_1B660472C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v10 = (const void *)sub_1B65623D0(a2, 1, a3, a4, a5, a6, a7, a8);
  uint64_t v18 = sub_1B6562568((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
  if ((sub_1B66047AC(a1, v18, a2, v19) & 1) == 0)
  {
    sub_1B63F2F54(16, @"Error: unexpected value (%@)", v20, v21, v22, v23, v24, v25, (uint64_t)a1);
    CFRelease(v10);
    return 0;
  }
  return v10;
}

uint64_t sub_1B66047AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = 0;
  switch((int)a3)
  {
    case 1:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          return 0;
        }
      }
      objc_msgSend_floatValue(a1, v17, v18, v19);
      *(_DWORD *)a2 = v20;
      return 1;
    case 2:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          return 0;
        }
      }
      *(_DWORD *)a2 = objc_msgSend_intValue(a1, v21, v22, v23);
      return 1;
    case 3:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          return 0;
        }
      }
      char v27 = objc_msgSend_BOOLValue(a1, v24, v25, v26);
      goto LABEL_31;
    case 4:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        return 0;
      }
      char v27 = objc_msgSend_charValue(a1, v28, v29, v30);
      goto LABEL_31;
    case 5:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        return 0;
      }
      uint64_t v34 = objc_msgSend_pointerValue(a1, v31, v32, v33);
      goto LABEL_37;
    case 6:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0)
      {
        objc_opt_class();
        if ((objc_opt_isKindOfClass() & 1) == 0) {
          return 0;
        }
      }
      objc_msgSend_doubleValue(a1, v35, v36, v37);
      *(void *)a2 = v38;
      return 1;
    case 7:
    case 17:
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        long long v52 = 0uLL;
        sub_1B6562870((char *)a1, (uint64_t)&v52, 2);
        goto LABEL_27;
      }
      objc_msgSend_CGPointValue(a1, v7, v8, v9);
      *(float *)&double v46 = v46;
      *(float *)&double v47 = v47;
      *(_DWORD *)a2 = LODWORD(v46);
      *(_DWORD *)(a2 + 4) = LODWORD(v47);
      return 1;
    case 8:
    case 18:
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        long long v52 = 0uLL;
        sub_1B6562774((const char *)a1, (int *)&v52, 3);
        *(void *)a2 = v52;
        *(_DWORD *)(a2 + 8) = DWORD2(v52);
      }
      else
      {
        objc_msgSend_VFXFloat3Value(a1, v10, v11, v12);
        *(void *)a2 = v48;
        *(_DWORD *)(a2 + 8) = v49;
      }
      return 1;
    case 9:
    case 19:
      objc_opt_class();
      if (objc_opt_isKindOfClass()) {
        goto LABEL_26;
      }
      objc_msgSend_VFXFloat4Value(a1, v13, v14, v15);
      goto LABEL_28;
    case 10:
      objc_msgSend_VFXMatrix4Value(a1, (const char *)a2, a3, a4);
      *(_OWORD *)a2 = v39;
      *(_OWORD *)(a2 + 16) = v40;
      *(_OWORD *)(a2 + 32) = v41;
      *(_OWORD *)(a2 + 48) = v42;
      return 1;
    case 12:
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
LABEL_26:
        long long v52 = 0uLL;
        sub_1B6562774((const char *)a1, (int *)&v52, 4);
LABEL_27:
        long long v16 = v52;
LABEL_28:
        *(_OWORD *)a2 = v16;
      }
      else
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          uint64_t v34 = objc_msgSend_vfx_CFXColorIgnoringColorSpace_success_(a1, v50, 0, 0);
          *(void *)(a2 + 8) = v51;
LABEL_37:
          *(void *)a2 = v34;
        }
      }
      return 1;
    case 15:
      objc_opt_class();
      if ((objc_opt_isKindOfClass() & 1) == 0) {
        return 0;
      }
      char v27 = objc_msgSend_unsignedCharValue(a1, v43, v44, v45);
LABEL_31:
      *(unsigned char *)a2 = v27;
      return 1;
    default:
      return result;
  }
}

const void *sub_1B6604B4C(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  CFStringRef v5 = (const char *)objc_msgSend_objCType(a1, a2, a3, a4);
  uint64_t v6 = sub_1B6604568(v5);
  if (!v6) {
    return 0;
  }

  return sub_1B660472C(a1, v6, v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1B6604BA0(double *a1, const char *a2, double a3, uint64_t a4, uint64_t a5)
{
  switch((int)a2)
  {
    case 1:
      LODWORD(a3) = *(_DWORD *)a1;
      uint64_t result = objc_msgSend_numberWithFloat_(NSNumber, a2, (uint64_t)a1, a5, a3);
      break;
    case 2:
      uint64_t result = objc_msgSend_numberWithInteger_(NSNumber, a2, *(int *)a1, a5);
      break;
    case 3:
      uint64_t result = objc_msgSend_numberWithBool_(NSNumber, a2, *(unsigned __int8 *)a1, a5);
      break;
    case 4:
      uint64_t result = MEMORY[0x1F4181798](NSNumber, sel_numberWithChar_, *(char *)a1, a5);
      break;
    case 5:
      uint64_t result = objc_msgSend_valueWithPointer_(MEMORY[0x1E4F29238], a2, *(void *)a1, a5);
      break;
    case 6:
      uint64_t result = objc_msgSend_numberWithDouble_(NSNumber, a2, (uint64_t)a1, a5, *a1);
      break;
    case 7:
      uint64_t result = objc_msgSend_valueWithCGPoint_(MEMORY[0x1E4F29238], a2, (uint64_t)a1, a5, *(float *)a1, *((float *)a1 + 1));
      break;
    case 8:
      uint64_t result = objc_msgSend_valueWithVFXFloat3_(MEMORY[0x1E4F29238], a2, (uint64_t)a1, a5, *a1);
      break;
    case 9:
      uint64_t result = objc_msgSend_valueWithVFXFloat4_(MEMORY[0x1E4F29238], a2, (uint64_t)a1, a5, *a1);
      break;
    case 10:
      uint64_t result = objc_msgSend_valueWithVFXMatrix4_(MEMORY[0x1E4F29238], a2, (uint64_t)a1, a5, *a1, a1[2], a1[4], a1[6]);
      break;
    case 12:
      uint64_t result = objc_msgSend_vfx_colorWithCFXColor_(MEMORY[0x1E4FB1618], a2, (uint64_t)a1, a5);
      break;
    case 15:
      uint64_t result = objc_msgSend_numberWithUnsignedChar_(NSNumber, a2, *(unsigned __int8 *)a1, a5);
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

uint64_t sub_1B6604CE4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch((int)a1)
  {
    case 1:
    case 14:
      uint64_t v11 = NSNumber;
      uint64_t result = objc_msgSend_numberWithFloat_(v11, a2, a3, a4, 0.0);
      break;
    case 2:
      long long v16 = NSNumber;
      uint64_t result = objc_msgSend_numberWithInteger_(v16, a2, 0, a4);
      break;
    case 3:
      uint64_t v17 = NSNumber;
      uint64_t result = objc_msgSend_numberWithBool_(v17, a2, 0, a4);
      break;
    case 4:
    case 15:
    case 20:
    case 21:
      uint64_t v8 = NSNumber;
      uint64_t result = objc_msgSend_numberWithUnsignedChar_(v8, a2, 0, a4);
      break;
    case 5:
      uint64_t v18 = NSNumber;
      uint64_t result = objc_msgSend_numberWithUnsignedLong_(v18, a2, 0, a4);
      break;
    case 6:
      uint64_t v19 = NSNumber;
      uint64_t result = objc_msgSend_numberWithDouble_(v19, a2, a3, a4, 0.0);
      break;
    case 7:
    case 17:
      uint64_t v12 = (void *)MEMORY[0x1E4F29238];
      uint64_t result = objc_msgSend_valueWithCGPoint_(v12, a2, a3, a4, 0.0, 0.0);
      break;
    case 8:
    case 18:
      uint64_t v13 = (void *)MEMORY[0x1E4F29238];
      uint64_t result = objc_msgSend_valueWithVFXFloat3_(v13, a2, a3, a4, 0.0);
      break;
    case 9:
    case 12:
    case 19:
      uint64_t v10 = (void *)MEMORY[0x1E4F29238];
      uint64_t result = objc_msgSend_valueWithVFXFloat4_(v10, a2, a3, a4, 0.0);
      break;
    case 10:
    case 11:
      uint64_t v15 = (void *)MEMORY[0x1E4F29238];
      uint64_t result = objc_msgSend_valueWithVFXMatrix4_(v15, a2, a3, a4, *(double *)&VFXMatrix4Identity, 0.0078125, 0.0, 0.0);
      break;
    case 13:
    case 16:
      uint64_t v14 = NSNumber;
      uint64_t result = objc_msgSend_numberWithUnsignedShort_(v14, a2, 0, a4);
      break;
    default:
      sub_1B63F2F54(0, @"Warning: VFXDefaultValueWithBaseType - unknwon base type %d", a3, a4, a5, a6, a7, a8, a1);
      uint64_t result = 0;
      break;
  }
  return result;
}

objc_property *sub_1B6604F60(objc_class *a1, void *a2, uint64_t a3, uint64_t a4)
{
  CFStringRef v5 = (const char *)objc_msgSend_UTF8String(a2, (const char *)a2, a3, a4);
  uint64_t result = class_getProperty(a1, v5);
  if (result)
  {
    Attributes = property_getAttributes(result);
    uint64_t v10 = objc_msgSend_stringWithUTF8String_(NSString, v8, (uint64_t)Attributes, v9);
    uint64_t v13 = objc_msgSend_componentsSeparatedByString_(v10, v11, @",", v12);
    long long v16 = objc_msgSend_objectAtIndex_(v13, v14, 0, v15);
    uint64_t v19 = objc_msgSend_substringFromIndex_(v16, v17, 1, v18);
    uint64_t v23 = (const char *)objc_msgSend_UTF8String(v19, v20, v21, v22);
    return (objc_property *)sub_1B6604568(v23);
  }
  return result;
}

uint64_t sub_1B6604FE8(void *a1, void *a2)
{
  CFStringRef v4 = (objc_class *)objc_opt_class();
  uint64_t v7 = sub_1B6604F60(v4, a2, v5, v6);
  if (!v7) {
    return 0;
  }
  uint64_t v10 = (uint64_t)v7;
  uint64_t v11 = objc_msgSend_valueForKey_(a1, v8, (uint64_t)a2, v9);
  if (v11)
  {
    uint64_t v19 = (void *)v11;
    int v20 = (const void *)sub_1B65623D0(v10, 1, v13, v14, v15, v16, v17, v18);
    uint64_t v28 = sub_1B6562568((uint64_t)v20, v21, v22, v23, v24, v25, v26, v27);
    if (sub_1B66047AC(v19, v28, v10, v29)) {
      return (uint64_t)v20;
    }
    sub_1B63F2F54(16, @"Error: unexpected returned value for property %@ of object %@", v30, v31, v32, v33, v34, v35, (uint64_t)a2);
    CFRelease(v20);
    return 0;
  }

  return sub_1B65624DC(v10, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_1B66050C4()
{
  if (qword_1EB995418 != -1) {
    dispatch_once(&qword_1EB995418, &unk_1F0FB6F88);
  }
  return qword_1EB995420;
}

uint64_t sub_1B6605108()
{
  if (qword_1EB9953E8 != -1) {
    dispatch_once(&qword_1EB9953E8, &unk_1F0FB6368);
  }
  return qword_1EB9953F0;
}

uint64_t sub_1B660514C()
{
  if (qword_1E9DDBE80 != -1) {
    dispatch_once_f(&qword_1E9DDBE80, &qword_1EB995428, (dispatch_function_t)sub_1B6608418);
  }
  return qword_1EB995428;
}

uint64_t sub_1B66051A0()
{
  if (qword_1EB995408 != -1) {
    dispatch_once(&qword_1EB995408, &unk_1F0FB6288);
  }
  return qword_1EB995410;
}

uint64_t sub_1B66051E4()
{
  if (qword_1EB9953C0 != -1) {
    dispatch_once(&qword_1EB9953C0, &unk_1F0FB6448);
  }
  return qword_1EB9953C8;
}

uint64_t sub_1B6605228()
{
  if (qword_1EB995430 != -1) {
    dispatch_once(&qword_1EB995430, &unk_1F0FB6568);
  }
  return qword_1EB995438;
}

uint64_t sub_1B660526C()
{
  if (qword_1EB9953D0 != -1) {
    dispatch_once(&qword_1EB9953D0, &unk_1F0FB6128);
  }
  return qword_1EB9953D8;
}

uint64_t sub_1B66052B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  unsigned __int32 v9 = a9.n128_u32[0];
  if (a2)
  {
    if (a4) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"constraintController");
    if (a4) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"target");
LABEL_3:
  uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(*(void *)(a2 + 16) + 88);
  a9.n128_u32[0] = v9;

  return v14(a1, a2, a3, a4, a9);
}

uint64_t sub_1B660536C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"constraint");
  }
  unsigned __int32 v9 = *(uint64_t (**)(uint64_t))(a1 + 96);

  return v9(a1);
}

uint64_t sub_1B66053CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"constraint");
  }
  return *(void *)(a1 + 64);
}

CFStringRef sub_1B6605418(uint64_t a1, CFStringRef theString, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"constraint");
  }
  CFStringRef result = *(CFStringRef *)(a1 + 64);
  if (result != theString)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 64) = 0;
    }
    if (theString) {
      CFStringRef result = CFStringCreateCopy((CFAllocatorRef)*MEMORY[0x1E4F1CF80], theString);
    }
    else {
      CFStringRef result = 0;
    }
    *(void *)(a1 + 64) = result;
  }
  return result;
}

uint64_t sub_1B66054A0(uint64_t result, char a2)
{
  *(unsigned char *)(result + 76) = a2;
  return result;
}

uint64_t sub_1B66054A8(uint64_t result, char a2)
{
  *(unsigned char *)(result + 77) = a2;
  return result;
}

uint64_t sub_1B66054B0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 77);
}

uint64_t sub_1B66054B8(uint64_t result, float a2)
{
  *(float *)(result + 72) = a2;
  return result;
}

uint64_t sub_1B66054C0(uint64_t result)
{
  long long v1 = *(uint64_t (**)(void))(result + 112);
  if (v1) {
    return v1();
  }
  return result;
}

uint64_t sub_1B66054D0(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

void *sub_1B6605500(const void *a1, const void *a2, const void *a3)
{
  if (qword_1E9DDBE70 != -1) {
    dispatch_once_f(&qword_1E9DDBE70, &qword_1E9DDBE68, (dispatch_function_t)sub_1B66054D0);
  }
  uint64_t v6 = (void *)sub_1B63C8D44(qword_1E9DDBE68, 0x30uLL);
  uint64_t v13 = CFRetain(a1);
  uint64_t v6[2] = v13;
  if (!v13) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v7, v8, v9, v10, v11, v12, (uint64_t)"constraint");
  }
  uint64_t v14 = (void (*)(void *, void *, const void *))v13[10];
  if (v14) {
    v14(v13, v6, a2);
  }
  v6[4] = CFRetain(a3);
  _OWORD v6[3] = CFRetain(a2);
  return v6;
}

void sub_1B66055EC(uint64_t a1)
{
  CFDictionaryRef v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 64) = 0;
  }
}

void sub_1B660561C()
{
  if (!qword_1EB995400)
  {
    CFAllocatorRef v0 = (void *)sub_1B63C8D10(&qword_1EB995400);
    qword_1EB995400 = (uint64_t)v0;
    long long v1 = (const void *)sub_1B65833C8();
    sub_1B660E380(v0, v1);
    sub_1B660E400(@"influenceFactor", 0x48u, 1, 0, 0, 0, v2, v3);
    sub_1B660E3EC();
  }
}

uint64_t sub_1B66056B0(uint64_t result)
{
  *(_DWORD *)(result + 72) = 1065353216;
  *(_WORD *)(result + 76) = 257;
  return result;
}

void sub_1B66056C4()
{
  if (!qword_1EB995420)
  {
    CFAllocatorRef v0 = (void *)sub_1B63C8D10(&qword_1EB995420);
    qword_1EB995420 = (uint64_t)v0;
    if (qword_1EB9953F8 != -1) {
      dispatch_once(&qword_1EB9953F8, &unk_1F0FB6028);
    }
    sub_1B660E380(v0, (const void *)qword_1EB995400);
    sub_1B660E400(@"targetOffset", 0xB0u, 9, 0, 0, 0, v1, v2);
    sub_1B660E400(@"worldUp", 0xA0u, 9, 0, 0, 0, v3, v4);
    sub_1B660E400(@"localFront", 0xC0u, 8, 0, 0, 0, v5, v6);
    sub_1B660E3EC();
  }
}

uint64_t sub_1B66057C0(const void *a1)
{
  if (qword_1EB995418 != -1) {
    dispatch_once(&qword_1EB995418, &unk_1F0FB6F88);
  }
  uint64_t v2 = sub_1B63C8D44(qword_1EB995420, 0xC0uLL);
  *(_DWORD *)(v2 + 72) = 1065353216;
  *(_WORD *)(v2 + 76) = 257;
  if (a1) {
    CFTypeRef v3 = CFRetain(a1);
  }
  else {
    CFTypeRef v3 = 0;
  }
  *(void *)(v2 + 136) = v3;
  *(unsigned char *)(v2 + 144) = 0;
  *(_OWORD *)(v2 + 176) = xmmword_1B6E4F370;
  *(_OWORD *)(v2 + 192) = xmmword_1B6E4F340;
  *(_OWORD *)(v2 + 160) = xmmword_1B6E4F320;
  *(void *)(v2 + 88) = sub_1B660588C;
  *(void *)(v2 + 96) = sub_1B6606178;
  return v2;
}

uint64_t sub_1B660588C(float a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a3) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a4, a5, a6, a7, a8, a9, (uint64_t)"constraintController");
  }
  uint64_t v13 = *(void *)(a3 + 16);
  uint64_t v14 = *(void *)(v13 + 136);
  if (v14) {
    _ZF = v14 == (void)a4;
  }
  else {
    _ZF = 1;
  }
  if (_ZF) {
    return 0;
  }
  BOOL v17 = sub_1B64A0A1C(v14, a3, (uint64_t)a4, a5, a6, a7, a8, a9);
  BOOL v25 = v17;
  uint64_t v26 = *(void *)(v13 + 136);
  if (v25)
  {
    *(double *)v27.i64 = sub_1B64A2650(v26, v18, v19, v20, v21, v22, v23, v24);
    float32x4_t v237 = v28;
    float32x4_t v242 = v27;
    float32x4_t v225 = v30;
    float32x4_t v229 = v29;
    uint64_t v38 = sub_1B64A1E7C(*(void *)(v13 + 136), v31, v32, v33, v34, v35, v36, v37);
    if (v38)
    {
      double v46 = (_OWORD *)sub_1B64A01D4(v38, v39, v40, v41, v42, v43, v44, v45);
      uint64_t v47 = 0;
      long long v48 = v46[1];
      long long v49 = v46[2];
      long long v50 = v46[3];
      v248[0] = *v46;
      v248[1] = v48;
      v248[2] = v49;
      v248[3] = v50;
      float32x4_t v249 = 0u;
      float32x4_t v250 = 0u;
      float32x4_t v251 = 0u;
      float32x4_t v252 = 0u;
      do
      {
        *(float32x4_t *)((char *)&v249 + v47 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v242, COERCE_FLOAT(v248[v47])), v237, *(float32x2_t *)&v248[v47], 1), v229, (float32x4_t)v248[v47], 2), v225, (float32x4_t)v248[v47], 3);
        ++v47;
      }
      while (v47 != 4);
      float32x4_t v51 = v249;
      float32x4_t v52 = v250;
      float32x4_t v53 = v251;
      float32x4_t v54 = v252;
    }
    else
    {
      float32x4_t v52 = v237;
      float32x4_t v51 = v242;
      float32x4_t v54 = v225;
      float32x4_t v53 = v229;
    }
  }
  else
  {
    long long v55 = (float32x4_t *)sub_1B64A01D4(v26, v18, v19, v20, v21, v22, v23, v24);
    float32x4_t v51 = *v55;
    float32x4_t v52 = v55[1];
    float32x4_t v53 = v55[2];
    float32x4_t v54 = v55[3];
  }
  float32x4_t v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, COERCE_FLOAT(*(_OWORD *)(v13 + 176))), v52, *(float32x2_t *)(v13 + 176), 1), v53, *(float32x4_t *)(v13 + 176), 2), v54, *(float32x4_t *)(v13 + 176), 3);
  float32x4_t v249 = (float32x4_t)xmmword_1B6E4F370;
  float32x4_t v238 = v56;
  if (!*(unsigned char *)(v13 + 144))
  {
    *(double *)v132.i64 = sub_1B64A2220((uint64_t)a4, v39, v40, v41, v42, v43, v44, v45);
    float32x4_t v136 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v134, v133, v238, 2), v135, *(float32x2_t *)v238.f32, 1), v132, v238.f32[0]);
    int32x4_t v137 = (int32x4_t)vmulq_f32(v136, v136);
    v137.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v137, 2), vadd_f32(*(float32x2_t *)v137.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v137.i8, 1))).u32[0];
    *(float32x2_t *)v135.f32 = vrsqrte_f32((float32x2_t)v137.u32[0]);
    *(float32x2_t *)v135.f32 = vmul_f32(*(float32x2_t *)v135.f32, vrsqrts_f32((float32x2_t)v137.u32[0], vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32)));
    float32x4_t v138 = vmulq_n_f32(v136, vmul_f32(*(float32x2_t *)v135.f32, vrsqrts_f32((float32x2_t)v137.u32[0], vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32))).f32[0]);
    float32x4_t v139 = *(float32x4_t *)(v13 + 192);
    int8x16_t v140 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v138, (int32x4_t)v138), (int8x16_t)v138, 0xCuLL), vnegq_f32(v139)), v138, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v139, (int32x4_t)v139), (int8x16_t)v139, 0xCuLL));
    float32x4_t v141 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v140, (int32x4_t)v140), v140, 0xCuLL);
    float32x4_t v142 = vmulq_f32(v139, v138);
    v141.f32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v142, 2), vaddq_f32(v142, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v142.f32, 1))).f32[0]+ 1.0;
    int8x16_t v143 = (int8x16_t)vmulq_f32(v141, v141);
    *(float32x2_t *)v143.i8 = vadd_f32(*(float32x2_t *)v143.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v143, v143, 8uLL));
    float32x4_t v144 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v143.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v143.i8, 1)), 0);
    float32x4_t v145 = vrsqrteq_f32(v144);
    float32x4_t v146 = vmulq_f32(v145, vrsqrtsq_f32(v144, vmulq_f32(v145, v145)));
    __asm { FMOV            V3.4S, #1.0 }
    float32x4_t v245 = vmulq_f32(v141, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v144), _Q3, (int8x16_t)vmulq_f32(v146, vrsqrtsq_f32(v144, vmulq_f32(v146, v146)))));
    *(double *)_Q0.i64 = sub_1B64A2500(a4, v148, v149, v150, v151, v152, v153, v154);
    _S1 = v245.i32[3];
    int8x16_t v157 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v245, (int32x4_t)v245), (int8x16_t)v245, 0xCuLL), vnegq_f32(_Q0)), v245, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
    float32x4_t v76 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(_Q0, v245, 3), v245, _Q0, 3), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v157, (int32x4_t)v157), v157, 0xCuLL));
    __asm { FMLA            S2, S1, V0.S[3] }
    v76.i32[3] = _S2;
LABEL_24:
    float32x4_t v249 = v76;
    goto LABEL_25;
  }
  uint64_t result = sub_1B64A1E7C((uint64_t)a4, v39, v40, v41, v42, v43, v44, v45);
  if (!result) {
    return result;
  }
  *(double *)v64.i64 = sub_1B64A2220(result, v57, v58, v59, v60, v61, v62, v63);
  float32x4_t v226 = v65;
  float32x4_t v230 = v66;
  float32x4_t v223 = v64;
  float32x4_t v224 = v67;
  float32x4_t v239 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v66, v65, v238, 2), v67, *(float32x2_t *)v238.f32, 1), v64, v238.f32[0]);
  float32x4_t v222 = *(float32x4_t *)(v13 + 160);
  *(double *)v75.i64 = sub_1B64A230C((__n128 *)a4);
  float32x4_t v76 = (float32x4_t)xmmword_1B6E4F370;
  uint32x4_t v77 = (uint32x4_t)vcgeq_f32((float32x4_t)vdupq_n_s32(0x3727C5ACu), vabdq_f32(v239, v75));
  v77.i32[3] = v77.i32[2];
  if ((vminvq_u32(v77) & 0x80000000) == 0)
  {
    float32x4_t v78 = vsubq_f32(v239, v75);
    float32x4_t v79 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v223, v222.f32[0]), v224, *(float32x2_t *)v222.f32, 1), v226, v222, 2), v230, v222, 3);
    int32x4_t v80 = (int32x4_t)vmulq_f32(v79, v79);
    v80.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v80, 2), vadd_f32(*(float32x2_t *)v80.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.i8, 1))).u32[0];
    float32x2_t v81 = vrsqrte_f32((float32x2_t)v80.u32[0]);
    float32x2_t v82 = vmul_f32(v81, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v81, v81)));
    float32x4_t v231 = vmulq_n_f32(v79, vmul_f32(v82, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(v82, v82))).f32[0]);
    int32x4_t v83 = (int32x4_t)vmulq_f32(v78, v78);
    v83.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v83, 2), vadd_f32(*(float32x2_t *)v83.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.i8, 1))).u32[0];
    *(float32x2_t *)v80.i8 = vrsqrte_f32((float32x2_t)v83.u32[0]);
    *(float32x2_t *)v80.i8 = vmul_f32(*(float32x2_t *)v80.i8, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(*(float32x2_t *)v80.i8, *(float32x2_t *)v80.i8)));
    float32x4_t v243 = vmulq_n_f32(v78, vmul_f32(*(float32x2_t *)v80.i8, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(*(float32x2_t *)v80.i8, *(float32x2_t *)v80.i8))).f32[0]);
    *(double *)v84.i64 = sub_1B660B520(*(float32x4_t *)(v13 + 192), v243);
    float32x4_t v240 = v84;
    float32x4_t v85 = vmulq_f32(v84, (float32x4_t)xmmword_1B6E4F550);
    int8x16_t v86 = (int8x16_t)vnegq_f32(v85);
    int8x16_t v87 = (int8x16_t)vtrn2q_s32((int32x4_t)v85, vtrn1q_s32((int32x4_t)v85, (int32x4_t)v86));
    float32x4_t v88 = (float32x4_t)vextq_s8((int8x16_t)v85, v86, 8uLL);
    float32x4_t v89 = (float32x4_t)vrev64q_s32((int32x4_t)v85);
    v89.i32[0] = v86.i32[1];
    v89.i32[3] = v86.i32[2];
    float32x4_t v90 = vmlaq_f32(vmlaq_f32(v88, (float32x4_t)0, (float32x4_t)vextq_s8(v87, v87, 8uLL)), (float32x4_t)0, v89);
    int8x16_t v91 = (int8x16_t)vnegq_f32(v90);
    int8x16_t v92 = (int8x16_t)vtrn2q_s32((int32x4_t)v90, vtrn1q_s32((int32x4_t)v90, (int32x4_t)v91));
    float32x4_t v93 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v90, v91, 8uLL), *(float32x2_t *)v84.f32, 1), (float32x4_t)vextq_s8(v92, v92, 8uLL), v84.f32[0]);
    float32x4_t v94 = (float32x4_t)vrev64q_s32((int32x4_t)v90);
    v94.i32[0] = v91.i32[1];
    v94.i32[3] = v91.i32[2];
    float32x4_t v95 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v90, v84, 3), v94, v84, 2), v93);
    float32x4_t v96 = vmulq_f32(v95, v243);
    float32x4_t v97 = vmlsq_lane_f32(v95, v243, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 2), vaddq_f32(v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 1))), 0);
    float32x4_t v98 = vmulq_f32(v97, v97);
    v98.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1))).u64[0];
    float32x4_t v99 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 0);
    v99.i32[3] = 0;
    float32x4_t v100 = vrsqrteq_f32(v99);
    float32x4_t v101 = vmulq_f32(v100, vrsqrtsq_f32(v99, vmulq_f32(v100, v100)));
    float32x4_t v102 = vmulq_f32(v101, vrsqrtsq_f32(v99, vmulq_f32(v101, v101)));
    int32x4_t v103 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v98.f32[0] != 0.0)), 0x1FuLL));
    v103.i32[3] = 0;
    float32x4_t v104 = vmulq_f32(v231, v243);
    float32x4_t v105 = vmlsq_lane_f32(v231, v243, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v104, 2), vaddq_f32(v104, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v104.f32, 1))), 0);
    float32x4_t v106 = vmulq_f32(v105, v105);
    v106.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v106, 2), vaddq_f32(v106, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 1))).u64[0];
    float32x4_t v107 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v106.f32, 0);
    float32x4_t v108 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v103), (int8x16_t)vmulq_f32(v102, v97), (int8x16_t)v97);
    v107.i32[3] = 0;
    float32x4_t v109 = vrsqrteq_f32(v107);
    float32x4_t v110 = vmulq_f32(v109, vrsqrtsq_f32(v107, vmulq_f32(v109, v109)));
    int32x4_t v111 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v106.f32[0] != 0.0)), 0x1FuLL));
    v111.i32[3] = 0;
    float32x4_t v112 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v111), (int8x16_t)vmulq_f32(vmulq_f32(v110, vrsqrtsq_f32(v107, vmulq_f32(v110, v110))), v105), (int8x16_t)v105);
    int8x16_t v113 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), (int8x16_t)v112, 0xCuLL), vnegq_f32(v108)), v112, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v108, (int32x4_t)v108), (int8x16_t)v108, 0xCuLL));
    float32x4_t v232 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v113, (int32x4_t)v113), v113, 0xCuLL);
    float32x4_t v114 = vmulq_f32(v112, v108);
    float v115 = acosf(fminf(fmaxf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v114, 2), vaddq_f32(v114, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 1))).f32[0], -1.0), 1.0));
    float32x4_t v116 = vmulq_f32(v243, v232);
    BOOL v117 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v116, 2), vaddq_f32(v116, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v116.f32, 1))).f32[0] <= 0.0;
    float32x4_t v118 = vmulq_f32(v243, v243);
    int32x2_t v119 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v118, 2), vaddq_f32(v118, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v118.f32, 1))).u64[0];
    float32x4_t v120 = (float32x4_t)vdupq_lane_s32(v119, 0);
    if (v117) {
      float v115 = -v115;
    }
    v120.i32[3] = 0;
    float32x4_t v121 = vrsqrteq_f32(v120);
    float32x4_t v122 = vmulq_f32(v121, vrsqrtsq_f32(v120, vmulq_f32(v121, v121)));
    int32x4_t v123 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(*(float *)v119.i32 != 0.0)), 0x1FuLL));
    v123.i32[3] = 0;
    float32x4_t v244 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v123), (int8x16_t)vmulq_f32(vmulq_f32(v122, vrsqrtsq_f32(v120, vmulq_f32(v122, v122))), v243), (int8x16_t)v243);
    __float2 v125 = __sincosf_stret(v115 * 0.5);
    _S1 = v125.__cosval;
    _Q6 = (int32x4_t)v240;
    _Q0 = vmulq_n_f32(v244, v125.__sinval);
    int8x16_t v128 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(_Q6, _Q6), (int8x16_t)v240, 0xCuLL), vnegq_f32(_Q0)), v240, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
    float32x4_t v76 = vaddq_f32(vmlaq_n_f32(vmulq_laneq_f32(_Q0, v240, 3), v240, v125.__cosval), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v128, (int32x4_t)v128), v128, 0xCuLL));
    __asm { FMLA            S0, S1, V6.S[3] }
    v76.i32[3] = _Q0.i32[0];
    goto LABEL_24;
  }
LABEL_25:
  if (a1 != 1.0)
  {
    float32x4_t v246 = v76;
    *(double *)v159.i64 = sub_1B64A2500(a4, v68, v69, v70, v71, v72, v73, v74);
    float32x4_t v160 = v159;
    int8x16_t v161 = (int8x16_t)vmulq_f32(v159, v246);
    float32x4_t v241 = v160;
    float v162 = 1.0;
    float v163 = 1.0 - a1;
    if (vaddv_f32(vadd_f32(*(float32x2_t *)v161.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v161, v161, 8uLL))) >= 0.0)
    {
      float32x4_t v183 = vsubq_f32(v160, v246);
      int8x16_t v184 = (int8x16_t)vmulq_f32(v183, v183);
      float32x4_t v185 = vaddq_f32(v160, v246);
      int8x16_t v186 = (int8x16_t)vmulq_f32(v185, v185);
      float v187 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v184.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v184, v184, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v186.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v186, v186, 8uLL)))));
      float v188 = v187 + v187;
      _ZF = (float)(v187 + v187) == 0.0;
      float v189 = 1.0;
      if (!_ZF) {
        float v189 = sinf(v188) / v188;
      }
      float v190 = v189;
      float32x2_t v191 = vrecpe_f32((float32x2_t)LODWORD(v189));
      int32x2_t v192 = (int32x2_t)vmul_f32(v191, vrecps_f32((float32x2_t)LODWORD(v190), v191));
      LODWORD(v193) = vmul_f32((float32x2_t)v192, vrecps_f32((float32x2_t)LODWORD(v190), (float32x2_t)v192)).u32[0];
      if ((float)(v163 * v188) != 0.0)
      {
        float v235 = v193;
        *(float *)v192.i32 = sinf(v163 * v188);
        float v193 = v235;
        float v162 = *(float *)v192.i32 / (float)(v163 * v188);
      }
      *(float *)v192.i32 = v163 * (float)(v193 * v162);
      float32x4_t v194 = (float32x4_t)vdupq_lane_s32(v192, 0);
      float v195 = v188 * a1;
      float v196 = 1.0;
      if (v195 != 0.0)
      {
        float32x4_t v228 = v194;
        float v236 = v193;
        float v197 = sinf(v195);
        float32x4_t v194 = v228;
        float v193 = v236;
        float v196 = v197 / v195;
      }
      float32x4_t v182 = vmlaq_f32(vmulq_n_f32(v246, (float)(v193 * v196) * a1), v241, v194);
    }
    else
    {
      float32x4_t v164 = vaddq_f32(v160, v246);
      int8x16_t v165 = (int8x16_t)vmulq_f32(v164, v164);
      float32x4_t v166 = vsubq_f32(v160, v246);
      int8x16_t v167 = (int8x16_t)vmulq_f32(v166, v166);
      float v168 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v165.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v165, v165, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v167.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v167, v167, 8uLL)))));
      float v169 = v168 + v168;
      _ZF = (float)(v168 + v168) == 0.0;
      float v170 = 1.0;
      if (!_ZF) {
        float v170 = sinf(v169) / v169;
      }
      float v171 = v170;
      float32x2_t v172 = vrecpe_f32((float32x2_t)LODWORD(v170));
      float32x2_t v173 = vmul_f32(v172, vrecps_f32((float32x2_t)LODWORD(v171), v172));
      LODWORD(v174) = vmul_f32(v173, vrecps_f32((float32x2_t)LODWORD(v171), v173)).u32[0];
      if ((float)(v163 * v169) != 0.0)
      {
        float v233 = v174;
        float v175 = sinf(v163 * v169);
        float v174 = v233;
        float v162 = v175 / (float)(v163 * v169);
      }
      v176.i32[1] = v246.i32[1];
      float32x4_t v177 = vnegq_f32(v246);
      *(float *)v176.i32 = v163 * (float)(v174 * v162);
      float32x4_t v178 = (float32x4_t)vdupq_lane_s32(v176, 0);
      float v179 = v169 * a1;
      float v180 = 1.0;
      if (v179 != 0.0)
      {
        float32x4_t v227 = v178;
        float v234 = v174;
        float32x4_t v247 = v177;
        float v181 = sinf(v179);
        float32x4_t v178 = v227;
        float v174 = v234;
        float32x4_t v177 = v247;
        float v180 = v181 / v179;
      }
      float32x4_t v182 = vmlaq_f32(vmulq_n_f32(v177, (float)(v174 * v180) * a1), v241, v178);
    }
    int8x16_t v198 = (int8x16_t)vmulq_f32(v182, v182);
    *(float32x2_t *)v198.i8 = vadd_f32(*(float32x2_t *)v198.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v198, v198, 8uLL));
    float32x4_t v199 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v198.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v198.i8, 1)), 0);
    float32x4_t v200 = vrsqrteq_f32(v199);
    float32x4_t v201 = vmulq_f32(v200, vrsqrtsq_f32(v199, vmulq_f32(v200, v200)));
    __asm { FMOV            V3.4S, #1.0 }
    float32x4_t v249 = vmulq_f32(v182, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v199), _Q3, (int8x16_t)vmulq_f32(v201, vrsqrtsq_f32(v199, vmulq_f32(v201, v201)))));
  }
  v203 = (const void *)sub_1B660F878(a5, v68, v69, v70, v71, v72, v73, v74);
  uint64_t v211 = (void *)sub_1B660F8C4(a5, v204, v205, v206, v207, v208, v209, v210);
  size_t v219 = sub_1B63CA534(9, v212, v213, v214, v215, v216, v217, v218);
  sub_1B63F4524(v203, v211, &v249, v219, 3, 0, v220, v221);
  return 1;
}

__CFString *sub_1B6606178()
{
  return @"transform";
}

void sub_1B6606188(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  }
  *(unsigned char *)(a1 + 144) = a2;
}

__n128 sub_1B66061D8(__n128 *a1, __n128 result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
  {
    __n128 v10 = result;
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"c");
    uint64_t result = v10;
  }
  result.n128_u32[3] = a1[11].n128_u32[3];
  a1[11] = result;
  return result;
}

__n128 sub_1B6606234(__n128 *a1, __n128 result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
  {
    __n128 v10 = result;
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"c");
    uint64_t result = v10;
  }
  result.n128_u32[3] = a1[10].n128_u32[3];
  a1[10] = result;
  return result;
}

void sub_1B6606290(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
  {
    __n128 v10 = a2;
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"c");
    a2 = v10;
  }
  a1[12] = a2;
}

void sub_1B66062E4()
{
  if (!qword_1EB9953D8) {
    qword_1EB9953D8 = sub_1B63C8D10(&qword_1EB9953D8);
  }
}

uint64_t sub_1B6606328()
{
  if (qword_1EB9953D0 != -1) {
    dispatch_once(&qword_1EB9953D0, &unk_1F0FB6128);
  }
  uint64_t result = sub_1B63C8D44(qword_1EB9953D8, 0x80uLL);
  *(_DWORD *)(result + 72) = 1065353216;
  *(_WORD *)(result + 76) = 257;
  *(void *)(result + 88) = sub_1B66063B4;
  *(void *)(result + 96) = sub_1B66064A4;
  *(unsigned char *)(result + 140) = 1;
  *(_DWORD *)(result + 136) = 7;
  return result;
}

BOOL sub_1B66063B4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a2) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  }
  uint64_t v18 = sub_1B6446564(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v18)
  {
    uint64_t v19 = *(void *)(a2 + 16);
    if (*(_DWORD *)(v19 + 136))
    {
      memset(v47, 0, sizeof(v47));
      sub_1B66064B4(a1, v19, a3, v47, v14, v15, v16, v17, a9);
      float32x4_t v27 = (const void *)sub_1B660F878(a4, v20, v21, v22, v23, v24, v25, v26);
      uint64_t v35 = (void *)sub_1B660F8C4(a4, v28, v29, v30, v31, v32, v33, v34);
      size_t v43 = sub_1B63CA534(10, v36, v37, v38, v39, v40, v41, v42);
      sub_1B63F4524(v27, v35, v47, v43, *(char *)(a4 + 34), *(unsigned __int8 *)(a4 + 35), v44, v45);
    }
  }
  return v18 != 0;
}

__CFString *sub_1B66064A4()
{
  return @"transform";
}

BOOL sub_1B66064B4(uint64_t *a1, uint64_t a2, uint64_t a3, float32x4_t *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v19 = sub_1B6446564(a1, a2, a3, (uint64_t)a4, a5, a6, a7, a8);
  if (v19)
  {
    *(double *)v20.i64 = sub_1B64A2650(a3, v12, v13, v14, v15, v16, v17, v18);
    float32x4_t v311 = v21;
    float32x4_t v317 = v20;
    float32x4_t v307 = v22;
    int8x16_t v321 = v23;
    uint64_t v31 = (_OWORD *)sub_1B64A01D4(a3, v24, v25, v26, v27, v28, v29, v30);
    if (*(unsigned char *)(a2 + 140))
    {
      float32x4_t v40 = vmulq_f32(v317, v317);
      float32x4_t v41 = vmulq_f32(v311, v311);
      v39.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v40, 2), vaddq_f32(v40, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v40.f32, 1))).f32[0]);
      v40.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v41, 2), vaddq_f32(v41, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v41.f32, 1))).f32[0]);
      float32x4_t v42 = vmulq_f32(v307, v307);
      v39.i32[1] = v40.i32[0];
      v39.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0]);
      float32x4_t v303 = v39;
    }
    else
    {
      float32x4_t v303 = 0u;
    }
    float32x4_t v305 = *((float32x4_t *)v31 + 1);
    float32x4_t v306 = *(float32x4_t *)v31;
    float32x4_t v304 = *((float32x4_t *)v31 + 2);
    __n128 v323 = *((__n128 *)v31 + 3);
    size_t v43 = (float32x4_t *)sub_1B64A01D4((uint64_t)v19, v32, v33, v34, v35, v36, v37, v38);
    float32x4_t v52 = *v43;
    float32x4_t v51 = v43[1];
    float32x4_t v53 = v43[2];
    float32x4_t v54 = v311;
    float32x4_t v55 = v317;
    float32x4_t v56 = v307;
    switch(*(_DWORD *)(a2 + 136))
    {
      case 0:
        goto LABEL_57;
      case 1:
        float32x4_t v57 = vmulq_f32(v53, (float32x4_t)0);
        float32x4_t v58 = vmlaq_f32(vaddq_f32(v51, v57), (float32x4_t)0, v52);
        float32x4_t v59 = vmulq_f32(v58, v58);
        v59.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1))).u64[0];
        float32x4_t v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 0);
        v60.i32[3] = 0;
        float32x4_t v61 = vrsqrteq_f32(v60);
        float32x4_t v62 = vmulq_f32(v61, vrsqrtsq_f32(v60, vmulq_f32(v61, v61)));
        int8x16_t v63 = (int8x16_t)vmulq_f32(v58, vmulq_f32(v62, vrsqrtsq_f32(v60, vmulq_f32(v62, v62))));
        int32x4_t v64 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v59.f32[0] != 0.0)), 0x1FuLL));
        v64.i32[3] = 0;
        float32x4_t v65 = vaddq_f32(v52, vmlaq_f32(v57, (float32x4_t)0, v51));
        float32x4_t v66 = vmulq_f32(v65, v65);
        v66.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).u64[0];
        float32x4_t v67 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 0);
        v67.i32[3] = 0;
        float32x4_t v68 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v64), v63, (int8x16_t)v58);
        float32x4_t v69 = vrsqrteq_f32(v67);
        float32x4_t v70 = vmulq_f32(v69, vrsqrtsq_f32(v67, vmulq_f32(v69, v69)));
        int32x4_t v71 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v66.f32[0] != 0.0)), 0x1FuLL));
        v71.i32[3] = 0;
        float32x4_t v72 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v71), (int8x16_t)vmulq_f32(v65, vmulq_f32(v70, vrsqrtsq_f32(v67, vmulq_f32(v70, v70)))), (int8x16_t)v65);
        float32x4_t v73 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v68, (int32x4_t)v68), (int8x16_t)v68, 0xCuLL), vnegq_f32(v72)), v68, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), (int8x16_t)v72, 0xCuLL));
        float32x4_t v74 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v73, (int32x4_t)v73), (int8x16_t)v73, 0xCuLL);
        int32x4_t v75 = (int32x4_t)vmulq_f32(v73, v73);
        v75.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v75.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v75, 2), *(float32x2_t *)v75.i8)).u32[0];
        *(float32x2_t *)v68.f32 = vrsqrte_f32((float32x2_t)v75.u32[0]);
        *(float32x2_t *)v68.f32 = vmul_f32(*(float32x2_t *)v68.f32, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32)));
        float32x4_t v76 = vmulq_n_f32(v74, vmul_f32(*(float32x2_t *)v68.f32, vrsqrts_f32((float32x2_t)v75.u32[0], vmul_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32))).f32[0]);
        int8x16_t v77 = (int8x16_t)vmulq_f32(v76, (float32x4_t)xmmword_1B6E4F4F0);
        float32x4_t v78 = vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v77, (int32x4_t)v77), v77, 0xCuLL), (float32x4_t)xmmword_1B6E4F320, v76);
        float32x4_t v79 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v78, (int32x4_t)v78), (int8x16_t)v78, 0xCuLL);
        int32x4_t v80 = (int32x4_t)vmulq_f32(v78, v78);
        v80.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v80.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v80, 2), *(float32x2_t *)v80.i8)).u32[0];
        *(float32x2_t *)v63.i8 = vrsqrte_f32((float32x2_t)v80.u32[0]);
        *(float32x2_t *)v63.i8 = vmul_f32(*(float32x2_t *)v63.i8, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8)));
        float32x4_t v81 = vmulq_n_f32(v79, vmul_f32(*(float32x2_t *)v63.i8, vrsqrts_f32((float32x2_t)v80.u32[0], vmul_f32(*(float32x2_t *)v63.i8, *(float32x2_t *)v63.i8))).f32[0]);
        int8x16_t v82 = (int8x16_t)vmulq_f32(v81, (float32x4_t)xmmword_1B6E4F4F0);
        int8x16_t v83 = (int8x16_t)vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v82, (int32x4_t)v82), v82, 0xCuLL), (float32x4_t)xmmword_1B6E4F320, v81);
        long long v84 = xmmword_1B6E4F300;
        HIDWORD(v84) = HIDWORD(*(unsigned long long *)v43);
        v81.i32[3] = HIDWORD(*(_OWORD *)&v43[1]);
        int8x16_t v85 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v83, (int32x4_t)v83), v83, 0xCuLL);
        v85.i32[3] = HIDWORD(*(_OWORD *)&v43[2]);
        float32x4_t v52 = (float32x4_t)v84;
        float32x4_t v51 = v81;
        goto LABEL_8;
      case 2:
        float32x4_t v86 = vmulq_f32(v53, (float32x4_t)0);
        float32x4_t v87 = vaddq_f32(v51, v86);
        float32x4_t v88 = vaddq_f32(v52, vmlaq_f32(v86, (float32x4_t)0, v51));
        float32x4_t v89 = vmulq_f32(v88, v88);
        v89.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v89, 2), vaddq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 1))).u64[0];
        float32x4_t v90 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 0);
        v90.i32[3] = 0;
        float32x4_t v91 = vrsqrteq_f32(v90);
        float32x4_t v92 = vmulq_f32(v91, vrsqrtsq_f32(v90, vmulq_f32(v91, v91)));
        int32x4_t v93 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v89.f32[0] != 0.0)), 0x1FuLL));
        v93.i32[3] = 0;
        float32x4_t v94 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v93), (int8x16_t)vmulq_f32(v88, vmulq_f32(v92, vrsqrtsq_f32(v90, vmulq_f32(v92, v92)))), (int8x16_t)v88);
        float32x4_t v95 = vmlaq_f32(v87, (float32x4_t)0, v52);
        float32x4_t v96 = vmulq_f32(v95, v95);
        v96.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v96, 2), vaddq_f32(v96, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 1))).u64[0];
        float32x4_t v97 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v96.f32, 0);
        v97.i32[3] = 0;
        float32x4_t v98 = vrsqrteq_f32(v97);
        float32x4_t v99 = vmulq_f32(v98, vrsqrtsq_f32(v97, vmulq_f32(v98, v98)));
        int32x4_t v100 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v96.f32[0] != 0.0)), 0x1FuLL));
        v100.i32[3] = 0;
        float32x4_t v101 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v100), (int8x16_t)vmulq_f32(v95, vmulq_f32(v99, vrsqrtsq_f32(v97, vmulq_f32(v99, v99)))), (int8x16_t)v95);
        float32x4_t v102 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v101, (int32x4_t)v101), (int8x16_t)v101, 0xCuLL), vnegq_f32(v94)), v101, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v94, (int32x4_t)v94), (int8x16_t)v94, 0xCuLL));
        float32x4_t v103 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v102, (int32x4_t)v102), (int8x16_t)v102, 0xCuLL);
        int32x4_t v104 = (int32x4_t)vmulq_f32(v102, v102);
        v104.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v104, 2), *(float32x2_t *)v104.i8)).u32[0];
        *(float32x2_t *)v95.f32 = vrsqrte_f32((float32x2_t)v104.u32[0]);
        *(float32x2_t *)v95.f32 = vmul_f32(*(float32x2_t *)v95.f32, vrsqrts_f32((float32x2_t)v104.u32[0], vmul_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32)));
        float32x4_t v105 = vmulq_n_f32(v103, vmul_f32(*(float32x2_t *)v95.f32, vrsqrts_f32((float32x2_t)v104.u32[0], vmul_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32))).f32[0]);
        int8x16_t v106 = (int8x16_t)vmulq_f32(v105, (float32x4_t)xmmword_1B6E4F4C0);
        float32x4_t v107 = vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v106, (int32x4_t)v106), v106, 0xCuLL), (float32x4_t)xmmword_1B6E4F2E0, v105);
        float32x4_t v108 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v107, (int32x4_t)v107), (int8x16_t)v107, 0xCuLL);
        int32x4_t v109 = (int32x4_t)vmulq_f32(v107, v107);
        v109.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v109.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v109, 2), *(float32x2_t *)v109.i8)).u32[0];
        *(float32x2_t *)v95.f32 = vrsqrte_f32((float32x2_t)v109.u32[0]);
        *(float32x2_t *)v95.f32 = vmul_f32(*(float32x2_t *)v95.f32, vrsqrts_f32((float32x2_t)v109.u32[0], vmul_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32)));
        float32x4_t v110 = vmulq_n_f32(v108, vmul_f32(*(float32x2_t *)v95.f32, vrsqrts_f32((float32x2_t)v109.u32[0], vmul_f32(*(float32x2_t *)v95.f32, *(float32x2_t *)v95.f32))).f32[0]);
        long long v111 = xmmword_1B6E4F320;
        int8x16_t v112 = (int8x16_t)vmlaq_f32(vmulq_f32(v110, (float32x4_t)xmmword_1B6E4F4F0), (float32x4_t)xmmword_1B6E4F320, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110), (int8x16_t)v110, 0xCuLL));
        v110.i32[3] = HIDWORD(*(unsigned long long *)v43);
        HIDWORD(v111) = HIDWORD(*(_OWORD *)&v43[1]);
        int8x16_t v85 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v112, (int32x4_t)v112), v112, 0xCuLL);
        v85.i32[3] = HIDWORD(*(_OWORD *)&v43[2]);
        float32x4_t v52 = v110;
        float32x4_t v51 = (float32x4_t)v111;
LABEL_8:
        float32x4_t v53 = (float32x4_t)v85;
        goto LABEL_13;
      case 3:
        float32x4_t v113 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL);
        float32x4_t v114 = vmlaq_f32(vmulq_f32(v113, (float32x4_t)xmmword_1B6E4F4D0), (float32x4_t)xmmword_1B6E4F2E0, v53);
        float32x4_t v115 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v114, (int32x4_t)v114), (int8x16_t)v114, 0xCuLL);
        int32x4_t v116 = (int32x4_t)vmulq_f32(v114, v114);
        v116.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v116, 2), *(float32x2_t *)v116.i8)).u32[0];
        float32x2_t v117 = vrsqrte_f32((float32x2_t)v116.u32[0]);
        float32x2_t v118 = vmul_f32(v117, vrsqrts_f32((float32x2_t)v116.u32[0], vmul_f32(v117, v117)));
        float32x4_t v119 = vmulq_n_f32(v115, vmul_f32(v118, vrsqrts_f32((float32x2_t)v116.u32[0], vmul_f32(v118, v118))).f32[0]);
        float32x4_t v120 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v119, (int32x4_t)v119), (int8x16_t)v119, 0xCuLL), vnegq_f32(v53)), v119, v113);
        float32x4_t v121 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v120, (int32x4_t)v120), (int8x16_t)v120, 0xCuLL);
        int32x4_t v122 = (int32x4_t)vmulq_f32(v120, v120);
        v122.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v122.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v122, 2), *(float32x2_t *)v122.i8)).u32[0];
        float32x2_t v123 = vrsqrte_f32((float32x2_t)v122.u32[0]);
        float32x2_t v124 = vmul_f32(v123, vrsqrts_f32((float32x2_t)v122.u32[0], vmul_f32(v123, v123)));
        float32x4_t v125 = vmulq_n_f32(v121, vmul_f32(v124, vrsqrts_f32((float32x2_t)v122.u32[0], vmul_f32(v124, v124))).f32[0]);
        v119.i32[3] = HIDWORD(*(unsigned long long *)v43);
        v125.i32[3] = HIDWORD(*(_OWORD *)&v43[1]);
        float32x4_t v52 = v119;
        float32x4_t v51 = v125;
        goto LABEL_13;
      case 4:
        float32x4_t v126 = vaddq_f32(v52, vmlaq_f32(vmulq_f32(v53, (float32x4_t)0), (float32x4_t)0, v51));
        float32x4_t v127 = vmulq_f32(v126, v126);
        v127.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1))).u64[0];
        float32x4_t v128 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 0);
        v128.i32[3] = 0;
        float32x4_t v129 = vrsqrteq_f32(v128);
        float32x4_t v130 = vmulq_f32(v129, vrsqrtsq_f32(v128, vmulq_f32(v129, v129)));
        int32x4_t v131 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v127.f32[0] != 0.0)), 0x1FuLL));
        v131.i32[3] = 0;
        float32x4_t v132 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v131), (int8x16_t)vmulq_f32(v126, vmulq_f32(v130, vrsqrtsq_f32(v128, vmulq_f32(v130, v130)))), (int8x16_t)v126);
        float32x4_t v133 = vmlaq_f32(vmlaq_f32(v53, (float32x4_t)0, v51), (float32x4_t)0, v52);
        float32x4_t v134 = vmulq_f32(v133, v133);
        v134.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v134, 2), vaddq_f32(v134, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 1))).u64[0];
        float32x4_t v135 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v134.f32, 0);
        v135.i32[3] = 0;
        float32x4_t v136 = vrsqrteq_f32(v135);
        float32x4_t v137 = vmulq_f32(v136, vrsqrtsq_f32(v135, vmulq_f32(v136, v136)));
        int32x4_t v138 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v134.f32[0] != 0.0)), 0x1FuLL));
        v138.i32[3] = 0;
        float32x4_t v139 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v138), (int8x16_t)vmulq_f32(v133, vmulq_f32(v137, vrsqrtsq_f32(v135, vmulq_f32(v137, v137)))), (int8x16_t)v133);
        float32x4_t v140 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v139, (int32x4_t)v139), (int8x16_t)v139, 0xCuLL), vnegq_f32(v132)), v139, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v132, (int32x4_t)v132), (int8x16_t)v132, 0xCuLL));
        float32x4_t v141 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v140, (int32x4_t)v140), (int8x16_t)v140, 0xCuLL);
        int32x4_t v142 = (int32x4_t)vmulq_f32(v140, v140);
        v142.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v142.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v142, 2), *(float32x2_t *)v142.i8)).u32[0];
        *(float32x2_t *)v133.f32 = vrsqrte_f32((float32x2_t)v142.u32[0]);
        *(float32x2_t *)v133.f32 = vmul_f32(*(float32x2_t *)v133.f32, vrsqrts_f32((float32x2_t)v142.u32[0], vmul_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32)));
        float32x4_t v143 = vmulq_n_f32(v141, vmul_f32(*(float32x2_t *)v133.f32, vrsqrts_f32((float32x2_t)v142.u32[0], vmul_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v133.f32))).f32[0]);
        long long v144 = xmmword_1B6E4F2E0;
        float32x4_t v145 = vmlaq_f32(vmulq_f32(v143, (float32x4_t)xmmword_1B6E4F4C0), (float32x4_t)xmmword_1B6E4F2E0, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v143, (int32x4_t)v143), (int8x16_t)v143, 0xCuLL));
        float32x4_t v146 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v145, (int32x4_t)v145), (int8x16_t)v145, 0xCuLL);
        int32x4_t v147 = (int32x4_t)vmulq_f32(v145, v145);
        v147.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v147.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v147, 2), *(float32x2_t *)v147.i8)).u32[0];
        *(float32x2_t *)v135.f32 = vrsqrte_f32((float32x2_t)v147.u32[0]);
        *(float32x2_t *)v135.f32 = vmul_f32(*(float32x2_t *)v135.f32, vrsqrts_f32((float32x2_t)v147.u32[0], vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32)));
        float32x4_t v148 = vmulq_n_f32(v146, vmul_f32(*(float32x2_t *)v135.f32, vrsqrts_f32((float32x2_t)v147.u32[0], vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32))).f32[0]);
        int8x16_t v149 = (int8x16_t)vmulq_f32(v148, (float32x4_t)xmmword_1B6E4F4D0);
        int8x16_t v150 = (int8x16_t)vmlaq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v149, (int32x4_t)v149), v149, 0xCuLL), (float32x4_t)xmmword_1B6E4F300, v148);
        int8x16_t v151 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v150, (int32x4_t)v150), v150, 0xCuLL);
        v148.i32[3] = HIDWORD(*(unsigned long long *)v43);
        v151.i32[3] = HIDWORD(*(_OWORD *)&v43[1]);
        HIDWORD(v144) = HIDWORD(*(_OWORD *)&v43[2]);
        float32x4_t v52 = v148;
        float32x4_t v51 = (float32x4_t)v151;
        float32x4_t v53 = (float32x4_t)v144;
        goto LABEL_13;
      case 5:
        float32x4_t v152 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL);
        float32x4_t v153 = vmlaq_f32(vmulq_f32(v51, (float32x4_t)xmmword_1B6E4F4C0), (float32x4_t)xmmword_1B6E4F2E0, v152);
        float32x4_t v154 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v153, (int32x4_t)v153), (int8x16_t)v153, 0xCuLL);
        int32x4_t v155 = (int32x4_t)vmulq_f32(v153, v153);
        v155.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v155.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v155, 2), *(float32x2_t *)v155.i8)).u32[0];
        float32x2_t v156 = vrsqrte_f32((float32x2_t)v155.u32[0]);
        float32x2_t v157 = vmul_f32(v156, vrsqrts_f32((float32x2_t)v155.u32[0], vmul_f32(v156, v156)));
        float32x4_t v158 = vmulq_n_f32(v154, vmul_f32(v157, vrsqrts_f32((float32x2_t)v155.u32[0], vmul_f32(v157, v157))).f32[0]);
        float32x4_t v159 = vmlaq_f32(vmulq_f32(v152, vnegq_f32(v158)), v51, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v158, (int32x4_t)v158), (int8x16_t)v158, 0xCuLL));
        float32x4_t v160 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v159, (int32x4_t)v159), (int8x16_t)v159, 0xCuLL);
        int32x4_t v161 = (int32x4_t)vmulq_f32(v159, v159);
        v161.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v161.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v161, 2), *(float32x2_t *)v161.i8)).u32[0];
        float32x2_t v162 = vrsqrte_f32((float32x2_t)v161.u32[0]);
        float32x2_t v163 = vmul_f32(v162, vrsqrts_f32((float32x2_t)v161.u32[0], vmul_f32(v162, v162)));
        float32x4_t v164 = vmulq_n_f32(v160, vmul_f32(v163, vrsqrts_f32((float32x2_t)v161.u32[0], vmul_f32(v163, v163))).f32[0]);
        v158.i32[3] = HIDWORD(*(unsigned long long *)v43);
        v164.i32[3] = HIDWORD(*(_OWORD *)&v43[2]);
        float32x4_t v52 = v158;
        float32x4_t v53 = v164;
        goto LABEL_13;
      case 6:
        float32x4_t v165 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53), (int8x16_t)v53, 0xCuLL);
        float32x4_t v166 = vmlaq_f32(vmulq_f32(v165, (float32x4_t)xmmword_1B6E4F4C0), (float32x4_t)xmmword_1B6E4F320, v53);
        float32x4_t v167 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v166, (int32x4_t)v166), (int8x16_t)v166, 0xCuLL);
        int32x4_t v168 = (int32x4_t)vmulq_f32(v166, v166);
        v168.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v168.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v168, 2), *(float32x2_t *)v168.i8)).u32[0];
        float32x2_t v169 = vrsqrte_f32((float32x2_t)v168.u32[0]);
        float32x2_t v170 = vmul_f32(v169, vrsqrts_f32((float32x2_t)v168.u32[0], vmul_f32(v169, v169)));
        float32x4_t v171 = vmulq_n_f32(v167, vmul_f32(v170, vrsqrts_f32((float32x2_t)v168.u32[0], vmul_f32(v170, v170))).f32[0]);
        float32x4_t v172 = vmlaq_f32(vmulq_f32(v165, vnegq_f32(v171)), v53, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v171, (int32x4_t)v171), (int8x16_t)v171, 0xCuLL));
        float32x4_t v173 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v172, (int32x4_t)v172), (int8x16_t)v172, 0xCuLL);
        int32x4_t v174 = (int32x4_t)vmulq_f32(v172, v172);
        v174.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v174.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v174, 2), *(float32x2_t *)v174.i8)).u32[0];
        float32x2_t v175 = vrsqrte_f32((float32x2_t)v174.u32[0]);
        float32x2_t v176 = vmul_f32(v175, vrsqrts_f32((float32x2_t)v174.u32[0], vmul_f32(v175, v175)));
        float32x4_t v177 = vmulq_n_f32(v173, vmul_f32(v176, vrsqrts_f32((float32x2_t)v174.u32[0], vmul_f32(v176, v176))).f32[0]);
        v177.i32[3] = HIDWORD(*(unsigned long long *)v43);
        v171.i32[3] = HIDWORD(*(_OWORD *)&v43[1]);
        float32x4_t v52 = v177;
        float32x4_t v51 = v171;
        goto LABEL_13;
      default:
LABEL_13:
        float32x4_t v308 = v52;
        float32x4_t v312 = v51;
        float32x4_t v318 = v53;
        if (a9 != 1.0)
        {
          float32x4_t v326 = 0uLL;
          v325[0] = 0uLL;
          v333.i32[2] = 0;
          v333.i64[0] = 0;
          v332.i32[2] = 0;
          v332.i64[0] = 0;
          v331.i32[2] = 0;
          v331.i64[0] = 0;
          v330.i32[2] = 0;
          v330.i64[0] = 0;
          int v178 = sub_1B64329E8(&v326, (__n128 *)&v333, &v331, v306, v305, v304, v323);
          int v179 = sub_1B64329E8(v325, (__n128 *)&v332, &v330, v308, v312, v318, v323);
          if (v178 && v179)
          {
            int8x16_t v180 = (int8x16_t)vmulq_f32(v326, v325[0]);
            float32x4_t v324 = v326;
            float32x4_t v319 = v325[0];
            float v181 = 1.0;
            if (vaddv_f32(vadd_f32(*(float32x2_t *)v180.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v180, v180, 8uLL))) >= 0.0)
            {
              float v204 = 1.0 - a9;
              float32x4_t v205 = vsubq_f32(v326, v325[0]);
              int8x16_t v206 = (int8x16_t)vmulq_f32(v205, v205);
              float32x4_t v207 = vaddq_f32(v326, v325[0]);
              int8x16_t v208 = (int8x16_t)vmulq_f32(v207, v207);
              float v209 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v206.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v206, v206, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v208.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v208, v208, 8uLL)))));
              float v210 = v209 + v209;
              _ZF = (float)(v209 + v209) == 0.0;
              float v211 = 1.0;
              if (!_ZF) {
                float v211 = sinf(v210) / v210;
              }
              float v212 = v211;
              float32x2_t v213 = vrecpe_f32((float32x2_t)LODWORD(v211));
              int32x2_t v214 = (int32x2_t)vmul_f32(v213, vrecps_f32((float32x2_t)LODWORD(v212), v213));
              LODWORD(v215) = vmul_f32((float32x2_t)v214, vrecps_f32((float32x2_t)LODWORD(v212), (float32x2_t)v214)).u32[0];
              if ((float)(v204 * v210) != 0.0)
              {
                float v315 = v215;
                *(float *)v214.i32 = sinf(v204 * v210);
                float v215 = v315;
                float v181 = *(float *)v214.i32 / (float)(v204 * v210);
              }
              *(float *)v214.i32 = v204 * (float)(v215 * v181);
              float32x4_t v216 = (float32x4_t)vdupq_lane_s32(v214, 0);
              float v199 = a9;
              float v217 = v210 * a9;
              float v218 = 1.0;
              if (v217 != 0.0)
              {
                float32x4_t v310 = v216;
                float v316 = v215;
                float v219 = sinf(v217);
                float32x4_t v216 = v310;
                float v215 = v316;
                float v199 = a9;
                float v218 = v219 / v217;
              }
              float32x4_t v203 = vmlaq_f32(vmulq_n_f32(v319, (float)(v215 * v218) * v199), v324, v216);
            }
            else
            {
              float v182 = 1.0 - a9;
              float32x4_t v183 = vaddq_f32(v326, v325[0]);
              int8x16_t v184 = (int8x16_t)vmulq_f32(v183, v183);
              float32x4_t v185 = vsubq_f32(v326, v325[0]);
              int8x16_t v186 = (int8x16_t)vmulq_f32(v185, v185);
              float v187 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v184.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v184, v184, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v186.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v186, v186, 8uLL)))));
              float v188 = v187 + v187;
              _ZF = (float)(v187 + v187) == 0.0;
              float v190 = 1.0;
              if (!_ZF) {
                float v190 = sinf(v188) / v188;
              }
              float v191 = v190;
              float32x2_t v192 = vrecpe_f32((float32x2_t)LODWORD(v190));
              float32x2_t v193 = vmul_f32(v192, vrecps_f32((float32x2_t)LODWORD(v191), v192));
              LODWORD(v194) = vmul_f32(v193, vrecps_f32((float32x2_t)LODWORD(v191), v193)).u32[0];
              if ((float)(v182 * v188) != 0.0)
              {
                float v313 = v194;
                float v195 = sinf(v182 * v188);
                float v194 = v313;
                float v181 = v195 / (float)(v182 * v188);
              }
              v196.i32[1] = v319.i32[1];
              float32x4_t v197 = vnegq_f32(v319);
              *(float *)v196.i32 = v182 * (float)(v194 * v181);
              float32x4_t v198 = (float32x4_t)vdupq_lane_s32(v196, 0);
              float v199 = a9;
              float v200 = v188 * a9;
              float v201 = 1.0;
              if (v200 != 0.0)
              {
                float v314 = v194;
                float32x4_t v320 = v197;
                float32x4_t v309 = v198;
                float v202 = sinf(v200);
                float32x4_t v198 = v309;
                float v194 = v314;
                float32x4_t v197 = v320;
                float v199 = a9;
                float v201 = v202 / v200;
              }
              float32x4_t v203 = vmlaq_f32(vmulq_n_f32(v197, (float)(v194 * v201) * v199), v324, v198);
            }
            int8x16_t v220 = (int8x16_t)vmulq_f32(v203, v203);
            *(float32x2_t *)v220.i8 = vadd_f32(*(float32x2_t *)v220.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v220, v220, 8uLL));
            float32x4_t v221 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v220.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v220.i8, 1)), 0);
            float32x4_t v222 = vrsqrteq_f32(v221);
            float32x4_t v223 = vmulq_f32(v222, vrsqrtsq_f32(v221, vmulq_f32(v222, v222)));
            __asm { FMOV            V3.4S, #1.0 }
            float32x4_t v227 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v221), _Q3, (int8x16_t)vmulq_f32(v223, vrsqrtsq_f32(v221, vmulq_f32(v223, v223))));
            float32x4_t v228 = vmlaq_n_f32(v333, vsubq_f32(v332, v333), v199);
            float32x4_t v229 = vmlaq_n_f32(v331, vsubq_f32(v330, v331), v199);
            v228.i32[3] = 1.0;
            __n128 v323 = (__n128)v228;
            float32x4_t v230 = vabsq_f32(v229);
            v230.i32[3] = 0;
            float32x4_t v231 = vmulq_f32(v203, v227);
            float32x4_t v232 = vmaxnmq_f32(v230, (float32x4_t)xmmword_1B6E4FCD0);
            v230.i64[0] = 0x8000000080000000;
            v230.i64[1] = 0x8000000080000000;
            float32x4_t v233 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v229, (int8x16_t)v230), (int8x16_t)(*(_OWORD *)&v232 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
            float32x4_t v234 = vmulq_f32(v231, v231);
            float32x4_t v235 = vmulq_laneq_f32(v231, v231, 3);
            float v236 = vmulq_lane_f32(v231, *(float32x2_t *)v231.f32, 1).f32[0];
            float32x4_t v237 = vaddq_f32(v233, v233);
            v234.f32[0] = 0.5 - v234.f32[0];
            *(float32x2_t *)v231.f32 = vmul_laneq_f32(*(float32x2_t *)v231.f32, v231, 2);
            v238.i32[3] = 0;
            v238.f32[0] = (float)(0.5 - v234.f32[1]) - v234.f32[2];
            v238.f32[1] = v236 + v235.f32[2];
            v239.i32[3] = 0;
            v238.f32[2] = v231.f32[0] - v235.f32[1];
            v239.f32[0] = v236 - v235.f32[2];
            v239.f32[1] = v234.f32[0] - v234.f32[2];
            v239.f32[2] = v231.f32[1] + v235.f32[0];
            float32x4_t v305 = vmulq_lane_f32(v239, *(float32x2_t *)v237.f32, 1);
            float32x4_t v306 = vmulq_n_f32(v238, v237.f32[0]);
            *(int32x2_t *)v235.f32 = vrev64_s32(*(int32x2_t *)v235.f32);
            v240.i32[0] = vadd_f32(*(float32x2_t *)v231.f32, *(float32x2_t *)v235.f32).u32[0];
            v240.i32[1] = vsub_f32(*(float32x2_t *)&v231, *(float32x2_t *)&v235).i32[1];
            v240.f32[2] = v234.f32[0] - v234.f32[1];
            v240.i32[3] = 0;
            float32x4_t v304 = vmulq_laneq_f32(v240, v237, 2);
          }
          float32x4_t v308 = v306;
          float32x4_t v312 = v305;
          float32x4_t v318 = v304;
        }
        uint64_t v241 = sub_1B64A1E7C(a3, v44, v45, v46, v47, v48, v49, v50);
        if (v241)
        {
          simd_float4x4 v249 = *(simd_float4x4 *)sub_1B64A01D4(v241, v242, v243, v244, v245, v246, v247, v248);
        }
        else
        {
          v249.columns[0] = (simd_float4)xmmword_1B6E4F300;
          v249.columns[1] = (simd_float4)xmmword_1B6E4F320;
          v249.columns[2] = (simd_float4)xmmword_1B6E4F2E0;
          v249.columns[3] = (simd_float4)xmmword_1B6E4F370;
        }
        simd_float4x4 v334 = __invert_f4(v249);
        uint64_t v250 = 0;
        v325[0] = v308;
        v325[1] = v312;
        v325[2] = v318;
        v325[3] = (float32x4_t)v323;
        float32x4_t v326 = 0u;
        float32x4_t v327 = 0u;
        float32x4_t v328 = 0u;
        long long v329 = 0u;
        do
        {
          *(float32x4_t *)((char *)&v326 + v250 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v334.columns[0], COERCE_FLOAT(*(_OWORD *)&v325[v250])), (float32x4_t)v334.columns[1], *(float32x2_t *)v325[v250].f32, 1), (float32x4_t)v334.columns[2], v325[v250], 2), (float32x4_t)v334.columns[3], v325[v250], 3);
          ++v250;
        }
        while (v250 != 4);
        float32x4_t v55 = v326;
        float32x4_t v54 = v327;
        float32x4_t v56 = v328;
        if (!*(unsigned char *)(a2 + 140)) {
          goto LABEL_57;
        }
        int32x4_t v251 = (int32x4_t)vmulq_f32(v326, v326);
        float32x4_t v252 = vmulq_f32(v327, v327);
        int32x4_t v253 = (int32x4_t)vmulq_f32(v328, v328);
        int32x4_t v254 = vzip2q_s32(v251, v253);
        float32x4_t v255 = (float32x4_t)vzip1q_s32(vzip1q_s32(v251, v253), (int32x4_t)v252);
        float32x4_t v256 = (float32x4_t)vtrn2q_s32(v251, (int32x4_t)v252);
        v256.i32[2] = v253.i32[1];
        float32x4_t v257 = vaddq_f32((float32x4_t)vzip1q_s32(v254, vdupq_laneq_s32((int32x4_t)v252, 2)), vaddq_f32(v255, v256));
        v252.i64[0] = 0x80000000800000;
        v252.i64[1] = 0x80000000800000;
        int8x16_t v258 = (int8x16_t)vcgeq_f32(v252, v257);
        v257.i32[3] = 0;
        float32x4_t v259 = vrsqrteq_f32(v257);
        float32x4_t v260 = vmulq_f32(v259, vrsqrtsq_f32(v257, vmulq_f32(v259, v259)));
        int32x4_t v261 = (int32x4_t)v258;
        v261.i32[3] = 0;
        float32x4_t v262 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v261), (int8x16_t)v257, (int8x16_t)vmulq_f32(v260, vrsqrtsq_f32(v257, vmulq_f32(v260, v260))));
        float32x4_t v263 = vmulq_n_f32(v326, v262.f32[0]);
        float32x4_t v264 = vmulq_lane_f32(v327, *(float32x2_t *)v262.f32, 1);
        float32x4_t v265 = vmulq_laneq_f32(v328, v262, 2);
        int8x16_t v266 = (int8x16_t)vuzp1q_s32((int32x4_t)v265, (int32x4_t)v265);
        int8x16_t v267 = (int8x16_t)vuzp1q_s32((int32x4_t)v264, (int32x4_t)v264);
        int32x4_t v268 = (int32x4_t)v263;
        if (v258.i32[0])
        {
          int8x16_t v269 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v266, (int8x16_t)v265, 0xCuLL), vnegq_f32(v264)), v265, (float32x4_t)vextq_s8(v267, (int8x16_t)v264, 0xCuLL));
          int32x4_t v268 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v269, (int32x4_t)v269), v269, 0xCuLL);
        }
        int8x16_t v270 = (int8x16_t)vuzp1q_s32((int32x4_t)v263, (int32x4_t)v263);
        float32x4_t v271 = v264;
        if (v258.i32[1])
        {
          int8x16_t v272 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v270, (int8x16_t)v263, 0xCuLL), vnegq_f32(v265)), v263, (float32x4_t)vextq_s8(v266, (int8x16_t)v265, 0xCuLL));
          float32x4_t v271 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v272, (int32x4_t)v272), v272, 0xCuLL);
        }
        if (v258.i32[2])
        {
          int8x16_t v258 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v267, (int8x16_t)v264, 0xCuLL), vnegq_f32(v263)), v264, (float32x4_t)vextq_s8(v270, (int8x16_t)v263, 0xCuLL));
          float32x4_t v265 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v258, (int32x4_t)v258), v258, 0xCuLL);
        }
        float v273 = (float)(*(float *)v268.i32 + v271.f32[1]) + v265.f32[2];
        if (v273 > 0.0)
        {
          float32x4_t v274 = (float32x4_t)vzip2q_s32((int32x4_t)v271, vuzp1q_s32((int32x4_t)v271, (int32x4_t)v265));
          v274.i32[2] = v268.i32[1];
          float v275 = sqrtf(v273 + 1.0);
          float32x4_t v276 = (float32x4_t)vtrn2q_s32((int32x4_t)v265, vzip2q_s32((int32x4_t)v265, v268));
          v276.i32[2] = v271.i32[0];
          float32x4_t v278 = vsubq_f32(v274, v276);
          v274.f32[3] = v275;
          v276.f32[3] = v275;
          float32x4_t v277 = vmulq_f32(v274, v276);
          v278.i32[3] = v277.i32[3];
LABEL_47:
          v277.f32[0] = 0.5 / v275;
          float32x4_t v279 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v277.f32, 0);
          goto LABEL_56;
        }
        if (*(float *)v268.i32 < v271.f32[1] || *(float *)v268.i32 < v265.f32[2])
        {
          if (v271.f32[1] <= v265.f32[2])
          {
            float v275 = sqrtf((float)((float)(v265.f32[2] + 1.0) - *(float *)v268.i32) - v271.f32[1]);
            *(float32x2_t *)v278.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v268, (int32x4_t)v271), *(float32x2_t *)v265.f32);
            float32x2_t v301 = (float32x2_t)__PAIR64__(v268.u32[1], LODWORD(v275));
            float32x2_t v302 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v271.f32, 0);
            *(float32x2_t *)v277.f32 = vsub_f32(*(float32x2_t *)v268.i8, v302);
            v302.f32[0] = v275;
            v302.i32[0] = vmul_f32(v301, v302).u32[0];
            v302.i32[1] = v277.i32[1];
            *(float32x2_t *)&v278.u32[2] = v302;
            goto LABEL_47;
          }
          float v283 = sqrtf((float)((float)(v271.f32[1] + 1.0) - *(float *)v268.i32) - v265.f32[2]);
          *(int32x2_t *)v258.i8 = vdup_laneq_s32((int32x4_t)v271, 2);
          int8x16_t v281 = v258;
          *(float *)v281.i32 = v283;
          v281.i32[0] = vmul_f32(*(float32x2_t *)v281.i8, (float32x2_t)__PAIR64__(v265.u32[1], LODWORD(v283))).u32[0];
          v281.i32[1] = vadd_f32(*(float32x2_t *)&v258, *(float32x2_t *)&v265).i32[1];
          int8x16_t v282 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v268.i8, 1), v271);
          int32x2_t v288 = (int32x2_t)vsubq_f32(v265, (float32x4_t)vdupq_laneq_s32(v268, 2)).u64[0];
          float32x4_t v279 = (float32x4_t)vextq_s8(vextq_s8(v282, v282, 4uLL), v281, 0xCuLL);
          v279.i32[3] = v288.i32[0];
        }
        else
        {
          float v283 = sqrtf((float)((float)(*(float *)v268.i32 + 1.0) - v271.f32[1]) - v265.f32[2]);
          float32x2_t v284 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v271.f32, 0);
          float32x2_t v285 = vadd_f32(*(float32x2_t *)v268.i8, v284);
          v284.f32[0] = v283;
          v279.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v268.u32[1], LODWORD(v283)), v284).u32[0];
          v279.i32[1] = v285.i32[1];
          float32x2_t v286 = (float32x2_t)vzip2q_s32(v268, (int32x4_t)v271).u64[0];
          LODWORD(v287) = vadd_f32(v286, *(float32x2_t *)v265.f32).u32[0];
          int32x2_t v288 = (int32x2_t)vsub_f32(v286, *(float32x2_t *)v265.f32);
          HIDWORD(v287) = v288.i32[1];
          v279.i64[1] = v287;
        }
        *(float *)v288.i32 = 0.5 / v283;
        float32x4_t v278 = (float32x4_t)vdupq_lane_s32(v288, 0);
LABEL_56:
        int8x16_t v289 = v321;
        v289.i32[3] = 1.0;
        int8x16_t v321 = v289;
        float32x4_t v290 = vabsq_f32(v303);
        v290.i32[3] = 0;
        float32x4_t v291 = vmulq_f32(v278, v279);
        v289.i64[0] = 0x8000000080000000;
        v289.i64[1] = 0x8000000080000000;
        float32x4_t v292 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v290, (float32x4_t)xmmword_1B6E4FCD0) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v303, v289));
        float32x4_t v293 = vmulq_f32(v291, v291);
        float32x4_t v294 = vmulq_laneq_f32(v291, v291, 3);
        float v295 = vmulq_lane_f32(v291, *(float32x2_t *)v291.f32, 1).f32[0];
        float32x4_t v296 = vaddq_f32(v292, v292);
        v293.f32[0] = 0.5 - v293.f32[0];
        *(float32x2_t *)v291.f32 = vmul_laneq_f32(*(float32x2_t *)v291.f32, v291, 2);
        v297.i32[3] = 0;
        v297.f32[0] = (float)(0.5 - v293.f32[1]) - v293.f32[2];
        v297.f32[1] = v295 + v294.f32[2];
        v298.i32[3] = 0;
        v297.f32[2] = v291.f32[0] - v294.f32[1];
        float32x4_t v55 = vmulq_n_f32(v297, v296.f32[0]);
        v298.f32[0] = v295 - v294.f32[2];
        v298.f32[1] = v293.f32[0] - v293.f32[2];
        v298.f32[2] = v291.f32[1] + v294.f32[0];
        float32x4_t v54 = vmulq_lane_f32(v298, *(float32x2_t *)v296.f32, 1);
        *(int32x2_t *)v294.f32 = vrev64_s32(*(int32x2_t *)v294.f32);
        v299.i32[0] = vadd_f32(*(float32x2_t *)v291.f32, *(float32x2_t *)v294.f32).u32[0];
        v299.i32[1] = vsub_f32(*(float32x2_t *)&v291, *(float32x2_t *)&v294).i32[1];
        v299.f32[2] = v293.f32[0] - v293.f32[1];
        v299.i32[3] = 0;
        float32x4_t v56 = vmulq_laneq_f32(v299, v296, 2);
LABEL_57:
        *a4 = v55;
        a4[1] = v54;
        a4[2] = v56;
        a4[3] = (float32x4_t)v321;
        break;
    }
  }
  return v19 != 0;
}

uint64_t sub_1B660758C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 136) = a2;
  return result;
}

uint64_t sub_1B6607594(uint64_t result, char a2)
{
  *(unsigned char *)(result + 140) = a2;
  return result;
}

uint64_t sub_1B660759C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 140);
}

uint64_t sub_1B66075A4(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B66075D4()
{
  if (qword_1E9DDBE78 != -1) {
    dispatch_once_f(&qword_1E9DDBE78, &qword_1EB9953E0, (dispatch_function_t)sub_1B66075A4);
  }
  return qword_1EB9953E0;
}

uint64_t sub_1B6607628()
{
  if (qword_1E9DDBE78 != -1) {
    dispatch_once_f(&qword_1E9DDBE78, &qword_1EB9953E0, (dispatch_function_t)sub_1B66075A4);
  }
  uint64_t result = sub_1B63C8D44(qword_1EB9953E0, 0x80uLL);
  *(_DWORD *)(result + 72) = 1065353216;
  *(_WORD *)(result + 76) = 257;
  *(void *)(result + 88) = sub_1B66076B8;
  *(void *)(result + 96) = sub_1B6608400;
  *(_DWORD *)(result + 136) = 1065353216;
  return result;
}

uint64_t sub_1B66076B8(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  uint64_t v12 = *(void *)(a2 + 16);
  *(double *)v20.i64 = sub_1B649FE9C(a3, a2, a3, a4, a5, a6, a7, a8);
  float32x4_t v324 = 0u;
  float32x4_t v325 = 0u;
  float32x4_t v322 = 0u;
  float32x4_t v323 = 0u;
  float32x4_t v317 = v20;
  __n128 v320 = v21;
  float32x4_t v309 = v23;
  float32x4_t v312 = v22;
  if (*(unsigned char *)(v12 + 140))
  {
    uint64_t result = (uint64_t)sub_1B6446564((uint64_t *)a1, v13, v14, v15, v16, v17, v18, v19);
    if (!result) {
      return result;
    }
    uint64_t v32 = result;
    uint64_t result = (uint64_t)sub_1B64A3B48(result, v25, v26, v27, v28, v29, v30, v31);
    if (!result) {
      return result;
    }
    uint64_t result = sub_1B649D3DC(result, v33, v34, v35, v36, v37, v38, v39);
    if (!result) {
      return result;
    }
    uint64_t v48 = (unsigned __int8 *)result;
    if (*(unsigned char *)result)
    {
      float v76 = *(float *)(result + 40);
    }
    else
    {
      simd_float4x4 v338 = *(simd_float4x4 *)sub_1B64A01D4(v32, v40, v41, v42, v43, v44, v45, v46);
      simd_float4x4 v339 = __invert_f4(v338);
      float32x4_t v294 = (float32x4_t)v339.columns[0];
      float32x4_t v297 = (float32x4_t)v339.columns[1];
      float32x4_t v305 = (float32x4_t)v339.columns[2];
      float32x4_t v300 = (float32x4_t)v339.columns[3];
      v330.i32[2] = 0;
      v330.i64[0] = 0;
      sub_1B64A1EC8(a3, (__n128 *)&v330, v49, v50, v51, v52, v53, v54);
      float32x4_t v55 = vmulq_f32(vaddq_f32(v300, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v294, v330.f32[0]), v297, *(float32x2_t *)v330.f32, 1), v305, v330, 2)), (float32x4_t)xmmword_1B6E4F340);
      v305.f32[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 2), vaddq_f32(v55, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v55.f32, 1))).f32[0];
      double v63 = sub_1B649CBB0((uint64_t)v48, v56, v57, v58, v59, v60, v61, v62);
      float v64 = 1.0 / (tan(v63 * 3.14159265 / 180.0 * 0.5) + v305.f32[0]);
      __n128 v73 = sub_1B64479C4(a1);
      unint64_t v72 = v73.n128_u64[1];
      v73.n128_f64[0] = v73.n128_f32[3];
      if (v73.n128_f32[3] < 0.000001) {
        v73.n128_f64[0] = 0.000001;
      }
      float v74 = v73.n128_f32[2] / v73.n128_f64[0];
      if (sub_1B649C80C(v48, v74, v65, v66, v67, v68, v69, v70, v71)) {
        float v75 = *(float *)&v72;
      }
      else {
        float v75 = *((float *)&v72 + 1);
      }
      float v76 = v75 * v64;
    }
    __n128 v134 = v320;
    if (v76 == 0.0) {
      return 0;
    }
    int32x4_t v135 = (int32x4_t)vmulq_f32(v317, v317);
    float32x4_t v136 = vmulq_f32(v312, v312);
    int32x4_t v137 = (int32x4_t)vmulq_f32(v309, v309);
    int32x4_t v138 = vzip2q_s32(v135, v137);
    float32x4_t v139 = (float32x4_t)vzip1q_s32(vzip1q_s32(v135, v137), (int32x4_t)v136);
    float32x4_t v140 = (float32x4_t)vtrn2q_s32(v135, (int32x4_t)v136);
    v140.i32[2] = v137.i32[1];
    float32x4_t v141 = vaddq_f32((float32x4_t)vzip1q_s32(v138, vdupq_laneq_s32((int32x4_t)v136, 2)), vaddq_f32(v139, v140));
    v136.i64[0] = 0x80000000800000;
    v136.i64[1] = 0x80000000800000;
    int8x16_t v142 = (int8x16_t)vcgeq_f32(v136, v141);
    v141.i32[3] = 0;
    float32x4_t v143 = vrsqrteq_f32(v141);
    float32x4_t v144 = vmulq_f32(v143, vrsqrtsq_f32(v141, vmulq_f32(v143, v143)));
    int32x4_t v145 = (int32x4_t)v142;
    v145.i32[3] = 0;
    float32x4_t v146 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v145), (int8x16_t)v141, (int8x16_t)vmulq_f32(v144, vrsqrtsq_f32(v141, vmulq_f32(v144, v144))));
    float32x4_t v147 = vmulq_n_f32(v317, v146.f32[0]);
    float32x4_t v148 = vmulq_lane_f32(v312, *(float32x2_t *)v146.f32, 1);
    float32x4_t v149 = vmulq_laneq_f32(v309, v146, 2);
    int8x16_t v150 = (int8x16_t)vuzp1q_s32((int32x4_t)v149, (int32x4_t)v149);
    int8x16_t v151 = (int8x16_t)vuzp1q_s32((int32x4_t)v148, (int32x4_t)v148);
    int32x4_t v152 = (int32x4_t)v147;
    if (v142.i32[0])
    {
      int8x16_t v153 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v150, (int8x16_t)v149, 0xCuLL), vnegq_f32(v148)), v149, (float32x4_t)vextq_s8(v151, (int8x16_t)v148, 0xCuLL));
      int32x4_t v152 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v153, (int32x4_t)v153), v153, 0xCuLL);
    }
    int8x16_t v154 = (int8x16_t)vuzp1q_s32((int32x4_t)v147, (int32x4_t)v147);
    float32x4_t v155 = v148;
    if (v142.i32[1])
    {
      int8x16_t v156 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v154, (int8x16_t)v147, 0xCuLL), vnegq_f32(v149)), v147, (float32x4_t)vextq_s8(v150, (int8x16_t)v149, 0xCuLL));
      float32x4_t v155 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v156, (int32x4_t)v156), v156, 0xCuLL);
    }
    v47.f32[0] = *(float *)(v12 + 136) / v76;
    if (v142.i32[2])
    {
      int8x16_t v142 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v151, (int8x16_t)v148, 0xCuLL), vnegq_f32(v147)), v148, (float32x4_t)vextq_s8(v154, (int8x16_t)v147, 0xCuLL));
      float32x4_t v149 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v142, (int32x4_t)v142), v142, 0xCuLL);
    }
    float v157 = (float)(*(float *)v152.i32 + v155.f32[1]) + v149.f32[2];
    if (v157 > 0.0)
    {
      float32x4_t v158 = (float32x4_t)vzip2q_s32((int32x4_t)v155, vuzp1q_s32((int32x4_t)v155, (int32x4_t)v149));
      v158.i32[2] = v152.i32[1];
      float v159 = sqrtf(v157 + 1.0);
      float32x4_t v160 = (float32x4_t)vtrn2q_s32((int32x4_t)v149, vzip2q_s32((int32x4_t)v149, v152));
      v160.i32[2] = v155.i32[0];
      float32x4_t v162 = vsubq_f32(v158, v160);
      v158.f32[3] = v159;
      v160.f32[3] = v159;
      float32x4_t v161 = vmulq_f32(v158, v160);
      v162.i32[3] = v161.i32[3];
LABEL_83:
      v161.f32[0] = 0.5 / v159;
      float32x4_t v280 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v161.f32, 0);
      goto LABEL_84;
    }
    if (*(float *)v152.i32 < v155.f32[1] || *(float *)v152.i32 < v149.f32[2])
    {
      if (v155.f32[1] <= v149.f32[2])
      {
        float v159 = sqrtf((float)((float)(v149.f32[2] + 1.0) - *(float *)v152.i32) - v155.f32[1]);
        *(float32x2_t *)v162.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v152, (int32x4_t)v155), *(float32x2_t *)v149.f32);
        float32x2_t v281 = (float32x2_t)__PAIR64__(v152.u32[1], LODWORD(v159));
        float32x2_t v282 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v155.f32, 0);
        *(float32x2_t *)v161.f32 = vsub_f32(*(float32x2_t *)v152.i8, v282);
        v282.f32[0] = v159;
        v282.i32[0] = vmul_f32(v281, v282).u32[0];
        v282.i32[1] = v161.i32[1];
        *(float32x2_t *)&v162.u32[2] = v282;
        goto LABEL_83;
      }
      float v274 = sqrtf((float)((float)(v155.f32[1] + 1.0) - *(float *)v152.i32) - v149.f32[2]);
      *(int32x2_t *)v142.i8 = vdup_laneq_s32((int32x4_t)v155, 2);
      int8x16_t v272 = v142;
      *(float *)v272.i32 = v274;
      v272.i32[0] = vmul_f32(*(float32x2_t *)v272.i8, (float32x2_t)__PAIR64__(v149.u32[1], LODWORD(v274))).u32[0];
      v272.i32[1] = vadd_f32(*(float32x2_t *)&v142, *(float32x2_t *)&v149).i32[1];
      int8x16_t v273 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v152.i8, 1), v155);
      int32x2_t v279 = (int32x2_t)vsubq_f32(v149, (float32x4_t)vdupq_laneq_s32(v152, 2)).u64[0];
      float32x4_t v280 = (float32x4_t)vextq_s8(vextq_s8(v273, v273, 4uLL), v272, 0xCuLL);
      v280.i32[3] = v279.i32[0];
    }
    else
    {
      float v274 = sqrtf((float)((float)(*(float *)v152.i32 + 1.0) - v155.f32[1]) - v149.f32[2]);
      float32x2_t v275 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v155.f32, 0);
      float32x2_t v276 = vadd_f32(*(float32x2_t *)v152.i8, v275);
      v275.f32[0] = v274;
      v280.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v152.u32[1], LODWORD(v274)), v275).u32[0];
      v280.i32[1] = v276.i32[1];
      float32x2_t v277 = (float32x2_t)vzip2q_s32(v152, (int32x4_t)v155).u64[0];
      LODWORD(v278) = vadd_f32(v277, *(float32x2_t *)v149.f32).u32[0];
      int32x2_t v279 = (int32x2_t)vsub_f32(v277, *(float32x2_t *)v149.f32);
      HIDWORD(v278) = v279.i32[1];
      v280.i64[1] = v278;
    }
    *(float *)v279.i32 = 0.5 / v274;
    float32x4_t v162 = (float32x4_t)vdupq_lane_s32(v279, 0);
LABEL_84:
    float32x4_t v283 = vmulq_f32(v162, v280);
    __n128 v166 = v320;
    v166.n128_u32[3] = 1.0;
    float32x4_t v284 = (float32x4_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vabsq_f32(v47), 0);
    v284.i32[3] = 0;
    v285.i64[0] = 0x8000000080000000;
    v285.i64[1] = 0x8000000080000000;
    float32x4_t v286 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v284, (float32x4_t)xmmword_1B6E4FCD0) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vandq_s8((int8x16_t)v47, v285), 0));
    float32x4_t v287 = vmulq_f32(v283, v283);
    float32x4_t v288 = vmulq_laneq_f32(v283, v283, 3);
    float v289 = vmulq_lane_f32(v283, *(float32x2_t *)v283.f32, 1).f32[0];
    float32x4_t v290 = vaddq_f32(v286, v286);
    v287.f32[0] = 0.5 - v287.f32[0];
    *(float32x2_t *)v283.f32 = vmul_laneq_f32(*(float32x2_t *)v283.f32, v283, 2);
    v291.i32[3] = 0;
    v291.f32[0] = (float)(0.5 - v287.f32[1]) - v287.f32[2];
    v291.f32[1] = v289 + v288.f32[2];
    v292.i32[3] = 0;
    v291.f32[2] = v283.f32[0] - v288.f32[1];
    float32x4_t v179 = vmulq_n_f32(v291, v290.f32[0]);
    v292.f32[0] = v289 - v288.f32[2];
    v292.f32[1] = v287.f32[0] - v287.f32[2];
    v292.f32[2] = v283.f32[1] + v288.f32[0];
    float32x4_t v180 = vmulq_lane_f32(v292, *(float32x2_t *)v290.f32, 1);
    *(int32x2_t *)v288.f32 = vrev64_s32(*(int32x2_t *)v288.f32);
    v293.i32[0] = vadd_f32(*(float32x2_t *)v283.f32, *(float32x2_t *)v288.f32).u32[0];
    v293.i32[1] = vsub_f32(*(float32x2_t *)&v283, *(float32x2_t *)&v288).i32[1];
    v293.f32[2] = v287.f32[0] - v287.f32[1];
    v293.i32[3] = 0;
    float32x4_t v181 = vmulq_laneq_f32(v293, v290, 2);
    float v187 = a9;
    goto LABEL_49;
  }
  uint64_t v77 = sub_1B64A1E7C(a3, v13, v14, v15, v16, v17, v18, v19);
  uint64_t v85 = v77;
  float32x4_t v86 = v317;
  __n128 v87 = v320;
  float32x4_t v88 = v309;
  float32x4_t v89 = v312;
  if (v77)
  {
    float32x4_t v90 = (float32x4_t *)sub_1B64A01D4(v77, v78, v79, v80, v81, v82, v83, v84);
    unint64_t v91 = 0;
    float32x4_t v92 = *v90;
    float32x4_t v93 = v90[1];
    float32x4_t v94 = v90[2];
    float32x4_t v95 = v90[3];
    float32x4_t v326 = v317;
    float32x4_t v327 = v312;
    float32x4_t v328 = v309;
    __n128 v329 = v320;
    float32x4_t v330 = 0u;
    float32x4_t v331 = 0u;
    float32x4_t v332 = 0u;
    __n128 v333 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v330 + v91) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v92, COERCE_FLOAT(*(_OWORD *)((char *)&v326 + v91))), v93, *(float32x2_t *)&v326.f32[v91 / 4], 1), v94, *(float32x4_t *)((char *)&v326 + v91), 2), v95, *(float32x4_t *)((char *)&v326 + v91), 3);
      v91 += 16;
    }
    while (v91 != 64);
    float32x4_t v86 = v330;
    float32x4_t v89 = v331;
    float32x4_t v88 = v332;
    __n128 v87 = v333;
  }
  int32x4_t v96 = (int32x4_t)vmulq_f32(v86, v86);
  int32x4_t v97 = (int32x4_t)vmulq_f32(v89, v89);
  int32x4_t v98 = (int32x4_t)vmulq_f32(v88, v88);
  int32x4_t v99 = vzip2q_s32(v96, v98);
  float32x4_t v100 = (float32x4_t)vzip1q_s32(vzip1q_s32(v96, v98), v97);
  float32x4_t v101 = (float32x4_t)vtrn2q_s32(v96, v97);
  v101.i32[2] = v98.i32[1];
  float32x4_t v102 = vaddq_f32((float32x4_t)vzip1q_s32(v99, vdupq_laneq_s32(v97, 2)), vaddq_f32(v100, v101));
  v101.i64[0] = 0x80000000800000;
  v101.i64[1] = 0x80000000800000;
  int8x16_t v103 = (int8x16_t)vcgeq_f32(v101, v102);
  v102.i32[3] = 0;
  float32x4_t v104 = vrsqrteq_f32(v102);
  float32x4_t v105 = vmulq_f32(v104, vrsqrtsq_f32(v102, vmulq_f32(v104, v104)));
  int32x4_t v106 = (int32x4_t)v103;
  v106.i32[3] = 0;
  float32x4_t v107 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v106), (int8x16_t)v102, (int8x16_t)vmulq_f32(v105, vrsqrtsq_f32(v102, vmulq_f32(v105, v105))));
  float32x4_t v108 = vmulq_n_f32(v86, v107.f32[0]);
  float32x4_t v109 = vmulq_lane_f32(v89, *(float32x2_t *)v107.f32, 1);
  float32x4_t v110 = vmulq_laneq_f32(v88, v107, 2);
  int8x16_t v111 = (int8x16_t)vuzp1q_s32((int32x4_t)v110, (int32x4_t)v110);
  int8x16_t v112 = (int8x16_t)vuzp1q_s32((int32x4_t)v109, (int32x4_t)v109);
  int32x4_t v113 = (int32x4_t)v108;
  if (v103.i32[0])
  {
    int8x16_t v114 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v111, (int8x16_t)v110, 0xCuLL), vnegq_f32(v109)), v110, (float32x4_t)vextq_s8(v112, (int8x16_t)v109, 0xCuLL));
    int32x4_t v113 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v114, (int32x4_t)v114), v114, 0xCuLL);
  }
  int8x16_t v115 = (int8x16_t)vuzp1q_s32((int32x4_t)v108, (int32x4_t)v108);
  float32x4_t v116 = v109;
  if (v103.i32[1])
  {
    int8x16_t v117 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v115, (int8x16_t)v108, 0xCuLL), vnegq_f32(v110)), v108, (float32x4_t)vextq_s8(v111, (int8x16_t)v110, 0xCuLL));
    float32x4_t v116 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v117, (int32x4_t)v117), v117, 0xCuLL);
  }
  if (v103.i32[2])
  {
    int8x16_t v103 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v112, (int8x16_t)v109, 0xCuLL), vnegq_f32(v108)), v109, (float32x4_t)vextq_s8(v115, (int8x16_t)v108, 0xCuLL));
    float32x4_t v110 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v103, (int32x4_t)v103), v103, 0xCuLL);
  }
  float v118 = (float)(*(float *)v113.i32 + v116.f32[1]) + v110.f32[2];
  __n128 v306 = v87;
  if (v118 > 0.0)
  {
    float32x4_t v119 = (float32x4_t)vzip2q_s32((int32x4_t)v116, vuzp1q_s32((int32x4_t)v116, (int32x4_t)v110));
    v119.i32[2] = v113.i32[1];
    float v120 = sqrtf(v118 + 1.0);
    float32x4_t v121 = (float32x4_t)vtrn2q_s32((int32x4_t)v110, vzip2q_s32((int32x4_t)v110, v113));
    v121.i32[2] = v116.i32[0];
    float32x4_t v123 = vsubq_f32(v119, v121);
    v119.f32[3] = v120;
    v121.f32[3] = v120;
    float32x4_t v122 = vmulq_f32(v119, v121);
    v123.i32[3] = v122.i32[3];
LABEL_44:
    v122.f32[0] = 0.5 / v120;
    float32x4_t v133 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v122.f32, 0);
    goto LABEL_45;
  }
  if (*(float *)v113.i32 < v116.f32[1] || *(float *)v113.i32 < v110.f32[2])
  {
    if (v116.f32[1] <= v110.f32[2])
    {
      float v120 = sqrtf((float)((float)(v110.f32[2] + 1.0) - *(float *)v113.i32) - v116.f32[1]);
      *(float32x2_t *)v123.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v113, (int32x4_t)v116), *(float32x2_t *)v110.f32);
      float32x2_t v163 = (float32x2_t)__PAIR64__(v113.u32[1], LODWORD(v120));
      float32x2_t v164 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.f32, 0);
      *(float32x2_t *)v122.f32 = vsub_f32(*(float32x2_t *)v113.i8, v164);
      v164.f32[0] = v120;
      v164.i32[0] = vmul_f32(v163, v164).u32[0];
      v164.i32[1] = v122.i32[1];
      *(float32x2_t *)&v123.u32[2] = v164;
      goto LABEL_44;
    }
    float v127 = sqrtf((float)((float)(v116.f32[1] + 1.0) - *(float *)v113.i32) - v110.f32[2]);
    *(int32x2_t *)v103.i8 = vdup_laneq_s32((int32x4_t)v116, 2);
    int8x16_t v125 = v103;
    *(float *)v125.i32 = v127;
    v125.i32[0] = vmul_f32(*(float32x2_t *)v125.i8, (float32x2_t)__PAIR64__(v110.u32[1], LODWORD(v127))).u32[0];
    v125.i32[1] = vadd_f32(*(float32x2_t *)&v103, *(float32x2_t *)&v110).i32[1];
    int8x16_t v126 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.i8, 1), v116);
    int32x2_t v132 = (int32x2_t)vsubq_f32(v110, (float32x4_t)vdupq_laneq_s32(v113, 2)).u64[0];
    float32x4_t v133 = (float32x4_t)vextq_s8(vextq_s8(v126, v126, 4uLL), v125, 0xCuLL);
    v133.i32[3] = v132.i32[0];
  }
  else
  {
    float v127 = sqrtf((float)((float)(*(float *)v113.i32 + 1.0) - v116.f32[1]) - v110.f32[2]);
    float32x2_t v128 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.f32, 0);
    float32x2_t v129 = vadd_f32(*(float32x2_t *)v113.i8, v128);
    v128.f32[0] = v127;
    v133.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v113.u32[1], LODWORD(v127)), v128).u32[0];
    v133.i32[1] = v129.i32[1];
    float32x2_t v130 = (float32x2_t)vzip2q_s32(v113, (int32x4_t)v116).u64[0];
    LODWORD(v131) = vadd_f32(v130, *(float32x2_t *)v110.f32).u32[0];
    int32x2_t v132 = (int32x2_t)vsub_f32(v130, *(float32x2_t *)v110.f32);
    HIDWORD(v131) = v132.i32[1];
    v133.i64[1] = v131;
  }
  *(float *)v132.i32 = 0.5 / v127;
  float32x4_t v123 = (float32x4_t)vdupq_lane_s32(v132, 0);
LABEL_45:
  float32x4_t v301 = vmulq_f32(v123, v133);
  *(double *)v165.i64 = sub_1B64A2478(a3, v78, v79, v80, v81, v82, v83, v84);
  __n128 v166 = v306;
  v166.n128_u32[3] = 1.0;
  float32x4_t v167 = vabsq_f32(v165);
  v167.i32[3] = 0;
  v168.i64[0] = 0x8000000080000000;
  v168.i64[1] = 0x8000000080000000;
  float32x4_t v169 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v167, (float32x4_t)xmmword_1B6E4FCD0) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v165, v168));
  float32x4_t v170 = v301;
  float32x4_t v171 = vmulq_f32(v170, v170);
  float32x4_t v172 = vmulq_laneq_f32(v170, v170, 3);
  float v173 = vmulq_lane_f32(v170, *(float32x2_t *)v170.f32, 1).f32[0];
  float32x4_t v174 = vaddq_f32(v169, v169);
  v171.f32[0] = 0.5 - v171.f32[0];
  float32x2_t v175 = vmul_laneq_f32(*(float32x2_t *)v301.f32, v301, 2);
  v176.i32[3] = 0;
  v176.f32[0] = (float)(0.5 - v171.f32[1]) - v171.f32[2];
  v176.f32[1] = v173 + v172.f32[2];
  v176.f32[2] = v175.f32[0] - v172.f32[1];
  v177.i32[3] = 0;
  v177.f32[0] = v173 - v172.f32[2];
  v177.f32[1] = v171.f32[0] - v171.f32[2];
  v177.f32[2] = v175.f32[1] + v172.f32[0];
  *(int32x2_t *)v172.f32 = vrev64_s32(*(int32x2_t *)v172.f32);
  v178.i32[0] = vadd_f32(v175, *(float32x2_t *)v172.f32).u32[0];
  v178.i32[1] = vsub_f32(v175, *(float32x2_t *)&v172).i32[1];
  float32x4_t v179 = vmulq_n_f32(v176, v174.f32[0]);
  v178.i64[1] = COERCE_UNSIGNED_INT(v171.f32[0] - v171.f32[1]);
  float32x4_t v180 = vmulq_lane_f32(v177, *(float32x2_t *)v174.f32, 1);
  float32x4_t v322 = v179;
  float32x4_t v323 = v180;
  float32x4_t v181 = vmulq_laneq_f32(v178, v174, 2);
  float32x4_t v324 = v181;
  float32x4_t v325 = (float32x4_t)v166;
  if (!v85)
  {
    float v187 = a9;
    __n128 v134 = v320;
    goto LABEL_51;
  }
  __n128 v307 = v166;
  float32x4_t v295 = v180;
  float32x4_t v298 = v179;
  float32x4_t v302 = v181;
  *(double *)v182.i64 = sub_1B64A2220(v85, v40, v41, v42, v43, v44, v45, v46);
  unint64_t v186 = 0;
  float32x4_t v326 = v298;
  float32x4_t v327 = v295;
  float32x4_t v328 = v302;
  __n128 v329 = v307;
  float32x4_t v330 = 0u;
  float32x4_t v331 = 0u;
  float32x4_t v332 = 0u;
  __n128 v333 = 0u;
  do
  {
    *(float32x4_t *)((char *)&v330 + v186) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v182, COERCE_FLOAT(*(_OWORD *)((char *)&v326 + v186))), v183, *(float32x2_t *)&v326.f32[v186 / 4], 1), v184, *(float32x4_t *)((char *)&v326 + v186), 2), v185, *(float32x4_t *)((char *)&v326 + v186), 3);
    v186 += 16;
  }
  while (v186 != 64);
  float32x4_t v179 = v330;
  float32x4_t v180 = v331;
  float32x4_t v181 = v332;
  __n128 v166 = v333;
  float v187 = a9;
  __n128 v134 = v320;
LABEL_49:
  float32x4_t v322 = v179;
  float32x4_t v323 = v180;
  float32x4_t v324 = v181;
  float32x4_t v325 = (float32x4_t)v166;
LABEL_51:
  if (v187 != 1.0)
  {
    float32x4_t v330 = 0uLL;
    float32x4_t v326 = 0uLL;
    v337.i32[2] = 0;
    v337.i64[0] = 0;
    v336.i32[2] = 0;
    v336.i64[0] = 0;
    v335.i32[2] = 0;
    v335.i64[0] = 0;
    v334.i32[2] = 0;
    v334.i64[0] = 0;
    float32x4_t v299 = v179;
    float32x4_t v303 = v181;
    __n128 v308 = v166;
    float32x4_t v296 = v180;
    int v188 = sub_1B64329E8(&v330, (__n128 *)&v337, &v335, v317, v312, v309, v134);
    int v189 = sub_1B64329E8(&v326, (__n128 *)&v336, &v334, v299, v296, v303, v308);
    if (v188)
    {
      float32x4_t v190 = (float32x4_t)v320;
      float32x4_t v191 = v309;
      if (v189)
      {
        int8x16_t v192 = (int8x16_t)vmulq_f32(v330, v326);
        float32x4_t v318 = v326;
        float32x4_t v321 = v330;
        float v193 = 1.0;
        if (vaddv_f32(vadd_f32(*(float32x2_t *)v192.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v192, v192, 8uLL))) >= 0.0)
        {
          float v216 = 1.0 - a9;
          float32x4_t v217 = vsubq_f32(v330, v326);
          int8x16_t v218 = (int8x16_t)vmulq_f32(v217, v217);
          float32x4_t v219 = vaddq_f32(v330, v326);
          int8x16_t v220 = (int8x16_t)vmulq_f32(v219, v219);
          float v221 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v218.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v218, v218, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v220.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v220, v220, 8uLL)))));
          float v222 = v221 + v221;
          _ZF = (float)(v221 + v221) == 0.0;
          float v223 = 1.0;
          if (!_ZF) {
            float v223 = sinf(v222) / v222;
          }
          float v224 = v223;
          float32x2_t v225 = vrecpe_f32((float32x2_t)LODWORD(v223));
          int32x2_t v226 = (int32x2_t)vmul_f32(v225, vrecps_f32((float32x2_t)LODWORD(v224), v225));
          LODWORD(v227) = vmul_f32((float32x2_t)v226, vrecps_f32((float32x2_t)LODWORD(v224), (float32x2_t)v226)).u32[0];
          if ((float)(v216 * v222) != 0.0)
          {
            float v315 = v227;
            *(float *)v226.i32 = sinf(v216 * v222);
            float v227 = v315;
            float v193 = *(float *)v226.i32 / (float)(v216 * v222);
          }
          *(float *)v226.i32 = v216 * (float)(v227 * v193);
          float32x4_t v228 = (float32x4_t)vdupq_lane_s32(v226, 0);
          float v211 = a9;
          float v229 = v222 * a9;
          float v230 = 1.0;
          if (v229 != 0.0)
          {
            float32x4_t v311 = v228;
            float v316 = v227;
            float v231 = sinf(v229);
            float32x4_t v228 = v311;
            float v227 = v316;
            float v211 = a9;
            float v230 = v231 / v229;
          }
          float32x4_t v215 = vmlaq_f32(vmulq_n_f32(v318, (float)(v227 * v230) * v211), v321, v228);
        }
        else
        {
          float v194 = 1.0 - a9;
          float32x4_t v195 = vaddq_f32(v330, v326);
          int8x16_t v196 = (int8x16_t)vmulq_f32(v195, v195);
          float32x4_t v197 = vsubq_f32(v330, v326);
          int8x16_t v198 = (int8x16_t)vmulq_f32(v197, v197);
          float v199 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v196.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v196, v196, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v198.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v198, v198, 8uLL)))));
          float v200 = v199 + v199;
          _ZF = (float)(v199 + v199) == 0.0;
          float v202 = 1.0;
          if (!_ZF) {
            float v202 = sinf(v200) / v200;
          }
          float v203 = v202;
          float32x2_t v204 = vrecpe_f32((float32x2_t)LODWORD(v202));
          float32x2_t v205 = vmul_f32(v204, vrecps_f32((float32x2_t)LODWORD(v203), v204));
          LODWORD(v206) = vmul_f32(v205, vrecps_f32((float32x2_t)LODWORD(v203), v205)).u32[0];
          if ((float)(v194 * v200) != 0.0)
          {
            float v313 = v206;
            float v207 = sinf(v194 * v200);
            float v206 = v313;
            float v193 = v207 / (float)(v194 * v200);
          }
          v208.i32[1] = v318.i32[1];
          float32x4_t v209 = vnegq_f32(v318);
          *(float *)v208.i32 = v194 * (float)(v206 * v193);
          float32x4_t v210 = (float32x4_t)vdupq_lane_s32(v208, 0);
          float v211 = a9;
          float v212 = v200 * a9;
          float v213 = 1.0;
          if (v212 != 0.0)
          {
            float v314 = v206;
            float32x4_t v319 = v209;
            float32x4_t v310 = v210;
            float v214 = sinf(v212);
            float32x4_t v210 = v310;
            float v206 = v314;
            float32x4_t v209 = v319;
            float v211 = a9;
            float v213 = v214 / v212;
          }
          float32x4_t v215 = vmlaq_f32(vmulq_n_f32(v209, (float)(v206 * v213) * v211), v321, v210);
        }
        int8x16_t v232 = (int8x16_t)vmulq_f32(v215, v215);
        *(float32x2_t *)v232.i8 = vadd_f32(*(float32x2_t *)v232.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v232, v232, 8uLL));
        float32x4_t v233 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v232.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v232.i8, 1)), 0);
        float32x4_t v234 = vrsqrteq_f32(v233);
        float32x4_t v235 = vmulq_f32(v234, vrsqrtsq_f32(v233, vmulq_f32(v234, v234)));
        __asm { FMOV            V3.4S, #1.0 }
        float32x4_t v239 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v233), _Q3, (int8x16_t)vmulq_f32(v235, vrsqrtsq_f32(v233, vmulq_f32(v235, v235))));
        float32x4_t v190 = vmlaq_n_f32(v337, vsubq_f32(v336, v337), v211);
        float32x4_t v240 = vmlaq_n_f32(v335, vsubq_f32(v334, v335), v211);
        v190.i32[3] = 1.0;
        float32x4_t v241 = vabsq_f32(v240);
        v241.i32[3] = 0;
        float32x4_t v242 = vmulq_f32(v215, v239);
        float32x4_t v243 = vmaxnmq_f32(v241, (float32x4_t)xmmword_1B6E4FCD0);
        v241.i64[0] = 0x8000000080000000;
        v241.i64[1] = 0x8000000080000000;
        float32x4_t v244 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v240, (int8x16_t)v241), (int8x16_t)(*(_OWORD *)&v243 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
        float32x4_t v245 = vmulq_f32(v242, v242);
        float32x4_t v246 = vmulq_laneq_f32(v242, v242, 3);
        float v247 = vmulq_lane_f32(v242, *(float32x2_t *)v242.f32, 1).f32[0];
        float32x4_t v248 = vaddq_f32(v244, v244);
        v245.f32[0] = 0.5 - v245.f32[0];
        *(float32x2_t *)v242.f32 = vmul_laneq_f32(*(float32x2_t *)v242.f32, v242, 2);
        v249.i32[3] = 0;
        v249.f32[0] = (float)(0.5 - v245.f32[1]) - v245.f32[2];
        v249.f32[1] = v247 + v246.f32[2];
        v250.i32[3] = 0;
        v249.f32[2] = v242.f32[0] - v246.f32[1];
        v250.f32[0] = v247 - v246.f32[2];
        v250.f32[1] = v245.f32[0] - v245.f32[2];
        v250.f32[2] = v242.f32[1] + v246.f32[0];
        float32x4_t v312 = vmulq_lane_f32(v250, *(float32x2_t *)v248.f32, 1);
        float32x4_t v317 = vmulq_n_f32(v249, v248.f32[0]);
        *(int32x2_t *)v246.f32 = vrev64_s32(*(int32x2_t *)v246.f32);
        v251.i32[0] = vadd_f32(*(float32x2_t *)v242.f32, *(float32x2_t *)v246.f32).u32[0];
        v251.i32[1] = vsub_f32(*(float32x2_t *)&v242, *(float32x2_t *)&v246).i32[1];
        v251.f32[2] = v245.f32[0] - v245.f32[1];
        v251.i32[3] = 0;
        float32x4_t v191 = vmulq_laneq_f32(v251, v248, 2);
      }
    }
    else
    {
      float32x4_t v190 = (float32x4_t)v320;
      float32x4_t v191 = v309;
    }
    float32x4_t v322 = v317;
    float32x4_t v323 = v312;
    float32x4_t v324 = v191;
    float32x4_t v325 = v190;
  }
  float32x4_t v252 = (const void *)sub_1B660F878(a4, v40, v41, v42, v43, v44, v45, v46);
  float32x4_t v260 = (void *)sub_1B660F8C4(a4, v253, v254, v255, v256, v257, v258, v259);
  size_t v268 = sub_1B63CA534(10, v261, v262, v263, v264, v265, v266, v267);
  sub_1B63F4524(v252, v260, &v322, v268, *(char *)(a4 + 34), *(unsigned __int8 *)(a4 + 35), v269, v270);
  return 1;
}

__CFString *sub_1B6608400()
{
  return @"transform";
}

uint64_t sub_1B6608410(uint64_t result, float a2)
{
  *(float *)(result + 136) = a2;
  return result;
}

uint64_t sub_1B6608418(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B6608448(const void *a1, const void *a2)
{
  if (qword_1E9DDBE80 != -1) {
    dispatch_once_f(&qword_1E9DDBE80, &qword_1EB995428, (dispatch_function_t)sub_1B6608418);
  }
  uint64_t v4 = sub_1B63C8D44(qword_1EB995428, 0x88uLL);
  *(_DWORD *)(v4 + 72) = 1065353216;
  *(_WORD *)(v4 + 76) = 257;
  *(void *)(v4 + 136) = _Block_copy(a1);
  *(void *)(v4 + 144) = CFRetain(a2);
  *(void *)(v4 + 88) = sub_1B6608518;
  *(void *)(v4 + 96) = sub_1B6608544;
  *(_DWORD *)(v4 + 72) = 1065353216;
  *(unsigned char *)(v4 + 76) = 1;
  return v4;
}

uint64_t sub_1B6608518(uint64_t a1, uint64_t a2)
{
  return 1;
}

uint64_t sub_1B6608544(uint64_t a1)
{
  return *(void *)(a1 + 144);
}

void *sub_1B660854C(uint64_t a1)
{
  if (qword_1E9DDBE80 != -1) {
    dispatch_once_f(&qword_1E9DDBE80, &qword_1EB995428, (dispatch_function_t)sub_1B6608418);
  }
  uint64_t v2 = (void *)sub_1B63C8D44(qword_1EB995428, 0x88uLL);
  v2[17] = _Block_copy(*(const void **)(a1 + 136));
  v2[18] = CFRetain(*(CFTypeRef *)(a1 + 144));
  v2[11] = sub_1B6608518;
  v2[12] = sub_1B6608544;
  return v2;
}

void sub_1B66085F4()
{
  if (!qword_1EB995410)
  {
    CFAllocatorRef v0 = (void *)sub_1B63C8D10(&qword_1EB995410);
    qword_1EB995410 = (uint64_t)v0;
    if (qword_1EB9953F8 != -1) {
      dispatch_once(&qword_1EB9953F8, &unk_1F0FB6028);
    }
    sub_1B660E380(v0, (const void *)qword_1EB995400);
    sub_1B660E400(@"targetPosition", 0x90u, 8, 0, 0, 0, v1, v2);
    sub_1B660E3EC();
  }
}

uint64_t sub_1B66086B0()
{
  if (qword_1EB995408 != -1) {
    dispatch_once(&qword_1EB995408, &unk_1F0FB6288);
  }
  uint64_t result = sub_1B63C8D44(qword_1EB995410, 0xB0uLL);
  *(_DWORD *)(result + 72) = 1065353216;
  *(_WORD *)(result + 76) = 257;
  *(void *)(result + 88) = sub_1B660872C;
  *(void *)(result + 96) = sub_1B6608C94;
  return result;
}

uint64_t sub_1B660872C(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9 = *(__n128 **)(a3 + 16);
  __n128 v10 = (void *)v9[8].n128_u64[1];
  if (!v10) {
    return 0;
  }
  uint64_t v12 = (__n128 **)v9[10].n128_u64[0];
  if (!v12)
  {
    int8x16_t v112 = (float32x4_t *)a4;
    if (v10 == (void *)a4)
    {
      float32x2_t v129 = &byte_1E9DDBE89;
      if (byte_1E9DDBE89) {
        return 0;
      }
      float32x2_t v130 = @"Error: CFXConstraintApplyIK root and leaf nodes are the same node";
    }
    else
    {
      size_t v113 = 0;
      unint64_t v114 = 0;
      uint64_t v115 = a4;
      while (v115)
      {
        ++v114;
        uint64_t v115 = sub_1B64A1E7C(v115, a3, a4, a5, a6, a7, a8, a9);
        v113 += 48;
        if ((void *)v115 == v10)
        {
          float32x4_t v116 = malloc_type_malloc(v113, 0x102004031CE6520uLL);
          uint64_t v117 = 0;
          v9[10].n128_u64[0] = (unint64_t)v116;
          v9[10].n128_u64[1] = v114;
          do
          {
            unint64_t v118 = v9[10].n128_u64[0];
            *(_DWORD *)(v118 + v117 + 8) = 1078530011;
            CFDictionaryRef v119 = (const __CFDictionary *)v9[11].n128_u64[0];
            if (v119)
            {
              CFStringRef Value = CFDictionaryGetValue(v119, v112);
              unint64_t v118 = v9[10].n128_u64[0];
              if (Value) {
                *(_DWORD *)(v118 + v117 + 8) = Value;
              }
            }
            *(void *)(v118 + v117) = v112;
            *(double *)&long long v121 = sub_1B64A2500(v112, a3, a4, a5, a6, a7, a8, a9);
            *(_OWORD *)(v9[10].n128_u64[0] + v117 + 16) = v121;
            int8x16_t v112 = (float32x4_t *)sub_1B64A1E7C((uint64_t)v112, v122, v123, v124, v125, v126, v127, v128);
            v117 += 48;
            --v114;
          }
          while (v114);
          uint64_t v12 = (__n128 **)v9[10].n128_u64[0];
          goto LABEL_3;
        }
      }
      float32x2_t v129 = &byte_1E9DDBE88;
      if (byte_1E9DDBE88) {
        return 0;
      }
      float32x2_t v130 = @"Error: CFXConstraintApplyIK leef is not a child of root";
    }
    *float32x2_t v129 = 1;
    sub_1B63F2F54(16, (uint64_t)v130, a4, a5, a6, a7, a8, a9, v131);
    return 0;
  }
LABEL_3:
  uint64_t v132 = v9[10].n128_i64[1];
  uint64_t v13 = sub_1B63F4F54(v10, a3, a4, a5, a6, a7, a8, a9);
  if (v13 && (uint64_t v21 = sub_1B64B2770(v13, v14, v15, v16, v17, v18, v19, v20)) != 0)
  {
    uint64_t v23 = v21;
    char v24 = 0;
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v15, v16, v17, v18, v19, v20, (uint64_t)"storage");
    uint64_t v23 = 0;
    char v24 = 1;
  }
  if (a1 != 1.0 && v132 >= 1)
  {
    uint64_t v25 = v132;
    uint64_t v26 = v12;
    do
    {
      sub_1B6610480(v23, (uint64_t)*v26);
      *(double *)&long long v34 = sub_1B64A2500((float32x4_t *)*v26, v27, v28, v29, v30, v31, v32, v33);
      *((_OWORD *)v26 + 2) = v34;
      v26 += 6;
      --v25;
    }
    while (v25);
  }
  int v35 = 0;
  uint64_t v36 = v132 - 1;
  float32x4_t v133 = 0u;
  float32x4_t v136 = 0u;
  do
  {
    uint64_t v37 = (float32x4_t *)(v12 + 8);
    if (v132 >= 2)
    {
      do
      {
        uint64_t v38 = *v12;
        uint64_t v39 = (float32x4_t *)v37[-1].i64[0];
        if (!v35) {
          sub_1B6610480(v23, v37[-1].i64[0]);
        }
        v40.n128_f64[0] = sub_1B64A230C(v38);
        __n128 v137 = v40;
        uint64_t v48 = sub_1B64A1E7C((uint64_t)v38, v41, v42, v43, v44, v45, v46, v47);
        *(double *)v55.i64 = sub_1B6608DEC(v48, (uint64_t)v39, v49, v50, v51, v52, v53, v54, v137);
        float32x4_t v136 = v55;
        *(double *)v62.i64 = sub_1B6608DEC(0, (uint64_t)v39, v56, v57, v58, v59, v60, v61, v9[9]);
        int32x4_t v63 = (int32x4_t)vmulq_f32(v136, v136);
        v63.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v63, 2), vadd_f32(*(float32x2_t *)v63.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v63.i8, 1))).u32[0];
        float32x2_t v64 = vrsqrte_f32((float32x2_t)v63.u32[0]);
        float32x2_t v65 = vmul_f32(v64, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v64, v64)));
        LODWORD(v66) = vmul_f32(v65, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(v65, v65))).u32[0];
        int32x4_t v67 = (int32x4_t)vmulq_f32(v62, v62);
        v63.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v67, 2), vadd_f32(*(float32x2_t *)v67.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v67.i8, 1))).u32[0];
        *(float32x2_t *)v67.i8 = vrsqrte_f32((float32x2_t)v63.u32[0]);
        *(float32x2_t *)v67.i8 = vmul_f32(*(float32x2_t *)v67.i8, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8)));
        float32x4_t v133 = v62;
        float32x4_t v134 = vmulq_n_f32(v62, vmul_f32(*(float32x2_t *)v67.i8, vrsqrts_f32((float32x2_t)v63.u32[0], vmul_f32(*(float32x2_t *)v67.i8, *(float32x2_t *)v67.i8))).f32[0]);
        float32x4_t v135 = vmulq_n_f32(v136, v66);
        float32x4_t v68 = vmulq_f32(v135, v134);
        float v69 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).f32[0];
        if (v69 > 1.0) {
          float v69 = 1.0;
        }
        if (v69 < -1.0) {
          float v69 = -1.0;
        }
        float v70 = acosf(v69);
        if (v9[11].n128_u8[8] || v70 > 0.00001)
        {
          float32x4_t v71 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v134, (int32x4_t)v134), (int8x16_t)v134, 0xCuLL), vnegq_f32(v135)), v134, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v135, (int32x4_t)v135), (int8x16_t)v135, 0xCuLL));
          float32x4_t v72 = vmulq_f32(v71, v71);
          v72.i64[0] = vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 1), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v72, 2), v72)).u64[0];
          float32x4_t v73 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v72.f32, 0);
          v73.i32[3] = 0;
          float32x4_t v74 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v71, (int32x4_t)v71), (int8x16_t)v71, 0xCuLL);
          float32x4_t v75 = vrsqrteq_f32(v73);
          float32x4_t v76 = vmulq_f32(v75, vrsqrtsq_f32(v73, vmulq_f32(v75, v75)));
          int32x4_t v77 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v72.f32[0] != 0.0)), 0x1FuLL));
          v77.i32[3] = 0;
          int8x16_t v78 = vbslq_s8((int8x16_t)vcltzq_s32(v77), (int8x16_t)vmulq_f32(v74, vmulq_f32(v76, vrsqrtsq_f32(v73, vmulq_f32(v76, v76)))), (int8x16_t)v74);
          v143[0] = 0u;
          *(float *)&v78.i32[3] = v70;
          float32x4_t v142 = (float32x4_t)v78;
          sub_1B63F894C(v143, &v142);
          float32x4_t v141 = 0u;
          *(double *)v86.i64 = sub_1B64A2500(v39, v79, v80, v81, v82, v83, v84, v85);
          float32x4_t v141 = v86;
          float32x4_t v140 = 0u;
          sub_1B63F8AE4(&v141, (int32x4_t *)v143, &v140);
          sub_1B63F8A94(&v140);
          float v94 = v37[-1].f32[2];
          if (v94 < 3.14159265)
          {
            float32x4_t v139 = 0uLL;
            *(double *)v95.i64 = sub_1B63F8E60(*v37, v140);
            float32x4_t v139 = v95;
            sub_1B63F8A94(&v139);
            float v96 = acosf(v139.f32[3]);
            float v97 = fabsf(v96 + v96);
            if (v97 > v94)
            {
              float32x4_t v138 = v140;
              sub_1B63F8B48(v37, &v138, &v140, v94 / v97);
              sub_1B63F8A94(&v140);
            }
          }
          sub_1B64A2590(v39, v87, v88, v89, v90, v91, v92, v93, (__n128)v140);
        }
        if ((v24 & 1) == 0) {
          sub_1B6610420(v23, (uint64_t)v39);
        }
        v37 += 3;
        --v36;
      }
      while (v36);
    }
    float32x4_t v98 = vsubq_f32(v136, v133);
    float32x4_t v99 = vmulq_f32(v98, v98);
    BOOL v100 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1))).f32[0]) < 0.9|| ++v35 == 10;
    uint64_t v36 = v132 - 1;
  }
  while (!v100);
  uint64_t result = 1;
  if (a1 != 1.0 && v132 >= 2)
  {
    float32x4_t v102 = (float32x4_t *)(v12 + 10);
    do
    {
      int8x16_t v103 = (float32x4_t *)v102[-2].i64[0];
      v143[0] = 0uLL;
      v104.n128_f64[0] = sub_1B64A2500(v103, v22, v15, v16, v17, v18, v19, v20);
      v143[0] = v104;
      sub_1B63F8B48(v102, (float32x4_t *)v143, (float32x4_t *)v143, a1);
      sub_1B63F8A94((float32x4_t *)v143);
      sub_1B64A2590(v103, v105, v106, v107, v108, v109, v110, v111, v143[0]);
      v102 += 3;
      --v36;
    }
    while (v36);
    return 1;
  }
  return result;
}

__CFString *sub_1B6608C94()
{
  return @"transform";
}

void sub_1B6608CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  }
  *(void *)(a1 + 136) = a2;
  __n128 v10 = *(void **)(a1 + 160);
  if (v10)
  {
    free(v10);
    *(void *)(a1 + 160) = 0;
  }
}

void sub_1B6608D04(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
  {
    __n128 v10 = a2;
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"c");
    a2 = v10;
  }
  a1[9] = a2;
}

void sub_1B6608D58(uint64_t a1, void *key, float a3)
{
  CFMutableStringRef Mutable = *(__CFDictionary **)(a1 + 176);
  if (!Mutable)
  {
    CFMutableStringRef Mutable = CFDictionaryCreateMutable(0, 0, 0, 0);
    *(void *)(a1 + 176) = Mutable;
  }
  CFDictionarySetValue(Mutable, key, (const void *)LODWORD(a3));
  *(unsigned char *)(a1 + 184) = 1;
  uint64_t v7 = *(void *)(a1 + 160);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 168);
    if (v8 >= 1)
    {
      uint64_t v9 = (float *)(v7 + 8);
      do
      {
        float *v9 = a3;
        v9 += 12;
        --v8;
      }
      while (v8);
    }
  }
}

double sub_1B6608DEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  if (a1 != a2)
  {
    uint64_t v45 = v9;
    uint64_t v46 = v10;
    __n128 v36 = a9;
    simd_float4x4 v47 = *(simd_float4x4 *)sub_1B64A01D4(a2, a2, a3, a4, a5, a6, a7, a8);
    simd_float4x4 v48 = __invert_f4(v47);
    if (a1)
    {
      simd_float4 v34 = v48.columns[1];
      simd_float4 v35 = v48.columns[0];
      simd_float4 v32 = v48.columns[3];
      simd_float4 v33 = v48.columns[2];
      uint64_t v19 = (long long *)sub_1B64A01D4(a1, v12, v13, v14, v15, v16, v17, v18);
      v48.columns[3] = v32;
      v48.columns[2] = v33;
      v48.columns[1] = v34;
      v48.columns[0] = v35;
      long long v20 = *v19;
      long long v21 = v19[1];
      long long v22 = v19[2];
      long long v23 = v19[3];
    }
    else
    {
      long long v20 = xmmword_1B6E4F300;
      long long v21 = xmmword_1B6E4F320;
      long long v22 = xmmword_1B6E4F2E0;
      long long v23 = xmmword_1B6E4F370;
    }
    uint64_t v24 = 0;
    __n128 v25 = v36;
    v25.n128_u32[3] = 1.0;
    long long v37 = v20;
    long long v38 = v21;
    long long v39 = v22;
    long long v40 = v23;
    float32x4_t v41 = 0u;
    float32x4_t v42 = 0u;
    float32x4_t v43 = 0u;
    float32x4_t v44 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v41 + v24) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)v48.columns[0], COERCE_FLOAT(*(long long *)((char *)&v37 + v24))), (float32x4_t)v48.columns[1], *(float32x2_t *)((char *)&v37 + v24), 1), (float32x4_t)v48.columns[2], *(float32x4_t *)((char *)&v37 + v24), 2), (float32x4_t)v48.columns[3], *(float32x4_t *)((char *)&v37 + v24), 3);
      v24 += 16;
    }
    while (v24 != 64);
    uint64_t v26 = 0;
    float32x4_t v27 = v41;
    float32x4_t v28 = v42;
    float32x4_t v29 = v43;
    float32x4_t v30 = v44;
    long long v37 = xmmword_1B6E4F300;
    long long v38 = xmmword_1B6E4F320;
    long long v39 = xmmword_1B6E4F2E0;
    long long v40 = (__int128)v25;
    float32x4_t v41 = 0u;
    float32x4_t v42 = 0u;
    float32x4_t v43 = 0u;
    float32x4_t v44 = 0u;
    do
    {
      *(float32x4_t *)((char *)&v41 + v26) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, COERCE_FLOAT(*(long long *)((char *)&v37 + v26))), v28, *(float32x2_t *)((char *)&v37 + v26), 1), v29, *(float32x4_t *)((char *)&v37 + v26), 2), v30, *(float32x4_t *)((char *)&v37 + v26), 3);
      v26 += 16;
    }
    while (v26 != 64);
    a9.n128_u64[0] = v44.i64[0];
  }
  return a9.n128_f64[0];
}

void sub_1B6608F3C()
{
  if (!qword_1EB9953F0)
  {
    CFAllocatorRef v0 = (void *)sub_1B63C8D10(&qword_1EB9953F0);
    qword_1EB9953F0 = (uint64_t)v0;
    if (qword_1EB9953F8 != -1) {
      dispatch_once(&qword_1EB9953F8, &unk_1F0FB6028);
    }
    sub_1B660E380(v0, (const void *)qword_1EB995400);
    sub_1B660E400(@"minimumDistance", 0x90u, 1, 0, 0, 0, v1, v2);
    sub_1B660E400(@"maximumDistance", 0x94u, 1, 0, 0, 0, v3, v4);
    sub_1B660E3EC();
  }
}

void sub_1B6609018(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
  {
    __n128 v10 = a2;
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"c");
    a2 = v10;
  }
  a1[11] = a2;
}

void sub_1B660906C(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  }
  *(unsigned char *)(a1 + 152) = a2;
}

void sub_1B66090BC(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"c");
  }
  *(float *)(a1 + 144) = a2;
}

void sub_1B6609114(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"c");
  }
  *(float *)(a1 + 148) = a2;
}

BOOL sub_1B660916C(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a3) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"controller");
  }
  uint64_t v12 = *(float32x4_t **)(a3 + 16);
  uint64_t v13 = v12[8].i64[1];
  if (v13)
  {
    v179.i32[2] = 0;
    v179.i64[0] = 0;
    v178.i32[2] = 0;
    v178.i64[0] = 0;
    sub_1B64A1EC8(v13, (__n128 *)&v179, a4, a5, a6, a7, a8, a9);
    sub_1B64A1EC8(a4, (__n128 *)&v178, v14, v15, v16, v17, v18, v19);
    float32x4_t v27 = vsubq_f32(v178, v179);
    float32x4_t v28 = vmulq_f32(v27, v27);
    float32x4_t v29 = vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1));
    float32x4_t v30 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), v29);
    v30.f32[0] = sqrtf(v30.f32[0]);
    float32x4_t v174 = v30;
    if (v30.f32[0] == 0.0)
    {
      uint32_t v31 = arc4random();
      *(float32x2_t *)v32.f32 = vcvt_f32_u32((uint32x2_t)__PAIR64__(arc4random(), v31));
      float32x4_t v172 = v32;
      uint32_t v33 = arc4random();
      float32x4_t v34 = v172;
      v34.f32[2] = (float)v33;
      int32x4_t v35 = (int32x4_t)vmulq_f32(v34, v34);
      float32x4_t v36 = v34;
      float32x4_t v37 = (float32x4_t)vdupq_laneq_s32(v35, 2);
      v35.i32[0] = vadd_f32(*(float32x2_t *)v37.f32, vadd_f32(*(float32x2_t *)v35.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v35.i8, 1))).u32[0];
      *(float32x2_t *)v37.f32 = vrsqrte_f32((float32x2_t)v35.u32[0]);
      *(float32x2_t *)v37.f32 = vmul_f32(*(float32x2_t *)v37.f32, vrsqrts_f32((float32x2_t)v35.u32[0], vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32)));
      *(float32x2_t *)v29.f32 = vmul_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v37.f32);
      float32x4_t v38 = vmulq_n_f32(v36, vmul_f32(*(float32x2_t *)v37.f32, vrsqrts_f32((float32x2_t)v35.u32[0], *(float32x2_t *)v29.f32)).f32[0]);
    }
    else
    {
      float32x4_t v37 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 0);
      float32x4_t v38 = vdivq_f32(v27, v37);
    }
    if (v12[9].i8[8])
    {
      float32x4_t v177 = 0uLL;
      float32x4_t v168 = v38;
      sub_1B64A1F4C(v12[8].i64[1], &v177, v21, v22, v23, v24, v25, v26);
      float32x4_t v173 = v177;
      float32x4_t v39 = vmulq_f32(v177, (float32x4_t)xmmword_1B6E4F550);
      int8x16_t v40 = (int8x16_t)vmulq_f32(v39, v39);
      *(float32x2_t *)v40.i8 = vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v40, v40, 8uLL));
      float32x4_t v41 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v40.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v40.i8, 1)), 0);
      float32x4_t v42 = vrsqrteq_f32(v41);
      float32x4_t v43 = vmulq_f32(v42, vrsqrtsq_f32(v41, vmulq_f32(v42, v42)));
      __asm { FMOV            V2.4S, #1.0 }
      int8x16_t v170 = _Q2;
      float32x4_t v171 = v39;
      float32x4_t v49 = vmulq_f32(v39, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v41), _Q2, (int8x16_t)vmulq_f32(v43, vrsqrtsq_f32(v41, vmulq_f32(v43, v43)))));
      float32x4_t v50 = vmulq_f32(v49, (float32x4_t)xmmword_1B6E4F550);
      int8x16_t v51 = (int8x16_t)vnegq_f32(v50);
      int8x16_t v52 = (int8x16_t)vtrn2q_s32((int32x4_t)v50, vtrn1q_s32((int32x4_t)v50, (int32x4_t)v51));
      float32x4_t v53 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v50, v51, 8uLL), (float32x2_t)*(_OWORD *)&vnegq_f32(v168), 1);
      float32x4_t v54 = (float32x4_t)vrev64q_s32((int32x4_t)v50);
      v54.i32[0] = v51.i32[1];
      v54.i32[3] = v51.i32[2];
      float32x4_t v55 = vmlsq_laneq_f32(vmlsq_lane_f32(v53, (float32x4_t)vextq_s8(v52, v52, 8uLL), *(float32x2_t *)v168.f32, 0), v54, v168, 2);
      int8x16_t v56 = (int8x16_t)vnegq_f32(v55);
      int8x16_t v57 = (int8x16_t)vtrn2q_s32((int32x4_t)v55, vtrn1q_s32((int32x4_t)v55, (int32x4_t)v56));
      float32x4_t v58 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v55, v56, 8uLL), *(float32x2_t *)v49.f32, 1), (float32x4_t)vextq_s8(v57, v57, 8uLL), v49.f32[0]);
      float32x4_t v59 = (float32x4_t)vrev64q_s32((int32x4_t)v55);
      v59.i32[0] = v56.i32[1];
      v59.i32[3] = v56.i32[2];
      float32x4_t v169 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v55, v49, 3), v59, v49, 2), v58);
      *(double *)v60.i64 = sub_1B660B520(v169, v12[11]);
      float32x4_t v61 = v60;
      int8x16_t v62 = (int8x16_t)vmulq_f32(v60, (float32x4_t)xmmword_1B6E4F370);
      float32x4_t v166 = v61;
      float v63 = 1.0;
      if (vaddv_f32(vadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v62, v62, 8uLL))) >= 0.0)
      {
        float v85 = 1.0 - a1;
        float32x4_t v86 = vsubq_f32((float32x4_t)xmmword_1B6E4F370, v61);
        int8x16_t v87 = (int8x16_t)vmulq_f32(v86, v86);
        float32x4_t v88 = vaddq_f32(v61, (float32x4_t)xmmword_1B6E4F370);
        int8x16_t v89 = (int8x16_t)vmulq_f32(v88, v88);
        float v90 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v87.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v87, v87, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v89.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v89, v89, 8uLL)))));
        float v91 = v90 + v90;
        _ZF = (float)(v90 + v90) == 0.0;
        float v92 = 1.0;
        if (!_ZF) {
          float v92 = sinf(v91) / v91;
        }
        float v93 = v92;
        float32x2_t v94 = vrecpe_f32((float32x2_t)LODWORD(v92));
        int32x2_t v95 = (int32x2_t)vmul_f32(v94, vrecps_f32((float32x2_t)LODWORD(v93), v94));
        LODWORD(v96) = vmul_f32((float32x2_t)v95, vrecps_f32((float32x2_t)LODWORD(v93), (float32x2_t)v95)).u32[0];
        if ((float)(v85 * v91) != 0.0)
        {
          float v164 = v96;
          *(float *)v95.i32 = sinf(v85 * v91);
          float v96 = v164;
          float v63 = *(float *)v95.i32 / (float)(v85 * v91);
        }
        *(float *)v95.i32 = v85 * (float)(v96 * v63);
        float32x4_t v97 = (float32x4_t)vdupq_lane_s32(v95, 0);
        float v80 = a1;
        float v98 = v91 * a1;
        float v99 = 1.0;
        if (v98 != 0.0)
        {
          float32x4_t v161 = v97;
          float v165 = v96;
          float v100 = sinf(v98);
          float32x4_t v97 = v161;
          float v96 = v165;
          float v80 = a1;
          float v99 = v100 / v98;
        }
        float32x4_t v84 = vmlaq_f32(vmulq_n_f32(v166, (float)(v96 * v99) * v80), (float32x4_t)xmmword_1B6E4F370, v97);
      }
      else
      {
        float v64 = 1.0 - a1;
        float32x4_t v65 = vaddq_f32(v61, (float32x4_t)xmmword_1B6E4F370);
        int8x16_t v66 = (int8x16_t)vmulq_f32(v65, v65);
        float32x4_t v67 = vsubq_f32((float32x4_t)xmmword_1B6E4F370, v61);
        int8x16_t v68 = (int8x16_t)vmulq_f32(v67, v67);
        float v69 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v66.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v66, v66, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)))));
        float v70 = v69 + v69;
        _ZF = (float)(v69 + v69) == 0.0;
        float v71 = 1.0;
        if (!_ZF) {
          float v71 = sinf(v70) / v70;
        }
        float v72 = v71;
        float32x2_t v73 = vrecpe_f32((float32x2_t)LODWORD(v71));
        float32x2_t v74 = vmul_f32(v73, vrecps_f32((float32x2_t)LODWORD(v72), v73));
        LODWORD(v75) = vmul_f32(v74, vrecps_f32((float32x2_t)LODWORD(v72), v74)).u32[0];
        if ((float)(v64 * v70) != 0.0)
        {
          float v162 = v75;
          float v76 = sinf(v64 * v70);
          float v75 = v162;
          float v63 = v76 / (float)(v64 * v70);
        }
        v77.i32[1] = v166.i32[1];
        float32x4_t v78 = vnegq_f32(v166);
        *(float *)v77.i32 = v64 * (float)(v75 * v63);
        float32x4_t v79 = (float32x4_t)vdupq_lane_s32(v77, 0);
        float v80 = a1;
        float v81 = v70 * a1;
        float v82 = 1.0;
        if (v81 != 0.0)
        {
          float v163 = v75;
          float32x4_t v167 = v78;
          float32x4_t v160 = v79;
          float v83 = sinf(v81);
          float32x4_t v79 = v160;
          float v75 = v163;
          float32x4_t v78 = v167;
          float v80 = a1;
          float v82 = v83 / v81;
        }
        float32x4_t v84 = vmlaq_f32(vmulq_n_f32(v78, (float)(v75 * v82) * v80), (float32x4_t)xmmword_1B6E4F370, v79);
      }
      int8x16_t v101 = (int8x16_t)vmulq_f32(v84, v84);
      *(float32x2_t *)v101.i8 = vadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v101, v101, 8uLL));
      float32x4_t v102 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v101.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v101.i8, 1)), 0);
      float32x4_t v103 = vrsqrteq_f32(v102);
      float32x4_t v104 = vmulq_f32(v103, vrsqrtsq_f32(v102, vmulq_f32(v103, v103)));
      float32x4_t v105 = vmulq_f32(v84, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v102), v170, (int8x16_t)vmulq_f32(v104, vrsqrtsq_f32(v102, vmulq_f32(v104, v104)))));
      float32x4_t v106 = vmulq_f32(v105, (float32x4_t)xmmword_1B6E4F550);
      int8x16_t v107 = (int8x16_t)vnegq_f32(v106);
      int8x16_t v108 = (int8x16_t)vtrn2q_s32((int32x4_t)v106, vtrn1q_s32((int32x4_t)v106, (int32x4_t)v107));
      float32x4_t v109 = vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v106, v107, 8uLL), *(float32x2_t *)v169.f32, 1);
      float32x4_t v110 = (float32x4_t)vrev64q_s32((int32x4_t)v106);
      v110.i32[0] = v107.i32[1];
      v110.i32[3] = v107.i32[2];
      float32x4_t v111 = vmlaq_laneq_f32(vmlaq_n_f32(v109, (float32x4_t)vextq_s8(v108, v108, 8uLL), v169.f32[0]), v110, v169, 2);
      int8x16_t v112 = (int8x16_t)vnegq_f32(v111);
      int8x16_t v113 = (int8x16_t)vtrn2q_s32((int32x4_t)v111, vtrn1q_s32((int32x4_t)v111, (int32x4_t)v112));
      float32x4_t v114 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v111, v112, 8uLL), *(float32x2_t *)v105.f32, 1), (float32x4_t)vextq_s8(v113, v113, 8uLL), v105.f32[0]);
      float32x4_t v115 = (float32x4_t)vrev64q_s32((int32x4_t)v111);
      v115.i32[0] = v112.i32[1];
      v115.i32[3] = v112.i32[2];
      float32x4_t v116 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v111, v105, 3), v115, v105, 2), v114);
      int8x16_t v117 = (int8x16_t)vnegq_f32(v171);
      int8x16_t v118 = (int8x16_t)vtrn2q_s32((int32x4_t)v171, vtrn1q_s32((int32x4_t)v171, (int32x4_t)v117));
      float32x4_t v119 = vmlsq_lane_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v171, v117, 8uLL), (float32x2_t)*(_OWORD *)&vnegq_f32(v116), 1), (float32x4_t)vextq_s8(v118, v118, 8uLL), *(float32x2_t *)v116.f32, 0);
      float32x4_t v120 = (float32x4_t)vrev64q_s32((int32x4_t)v171);
      v120.i32[0] = v117.i32[1];
      v120.i32[3] = v117.i32[2];
      float32x4_t v37 = vmlsq_laneq_f32(v119, v120, v116, 2);
      int8x16_t v121 = (int8x16_t)vnegq_f32(v37);
      int8x16_t v122 = (int8x16_t)vtrn2q_s32((int32x4_t)v37, vtrn1q_s32((int32x4_t)v37, (int32x4_t)v121));
      float32x4_t v29 = (float32x4_t)vextq_s8(v122, v122, 8uLL);
      float32x4_t v123 = (float32x4_t)vrev64q_s32((int32x4_t)v37);
      v123.i32[0] = v121.i32[1];
      v123.i32[3] = v121.i32[2];
      float32x4_t v38 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v37, v173, 3), v123, v173, 2), vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v37, v121, 8uLL), *(float32x2_t *)v173.f32, 1), v29, v173.f32[0]));
    }
    else
    {
      float v80 = a1;
    }
    v37.i32[0] = v12[9].i32[0];
    v29.i32[0] = v12[9].i32[1];
    float32x4_t v176 = vmlaq_n_f32(v178, vsubq_f32((float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v37, v174), 0), (int8x16_t)vmlaq_n_f32(v179, v38, v37.f32[0]), vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v174, v29), 0), (int8x16_t)vmlaq_n_f32(v179, v38, v29.f32[0]), (int8x16_t)vmlaq_n_f32(v179, v38, v174.f32[0]))), v178), v80);
    uint64_t v124 = sub_1B64A1E7C(a4, v20, v21, v22, v23, v24, v25, v26);
    if (v124)
    {
      simd_float4x4 v132 = *(simd_float4x4 *)sub_1B64A01D4(v124, v125, v126, v127, v128, v129, v130, v131);
    }
    else
    {
      v132.columns[0] = (simd_float4)xmmword_1B6E4F300;
      v132.columns[1] = (simd_float4)xmmword_1B6E4F320;
      v132.columns[2] = (simd_float4)xmmword_1B6E4F2E0;
      v132.columns[3] = (simd_float4)xmmword_1B6E4F370;
    }
    simd_float4x4 v180 = __invert_f4(v132);
    float32x4_t v177 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32((float32x4_t)v180.columns[3], (float32x4_t)v180.columns[2], v176, 2), (float32x4_t)v180.columns[1], *(float32x2_t *)v176.f32, 1), (float32x4_t)v180.columns[0], v176.f32[0]);
    float32x4_t v140 = (const void *)sub_1B660F878(a5, v133, v134, v135, v136, v137, v138, v139);
    float32x4_t v148 = (void *)sub_1B660F8C4(a5, v141, v142, v143, v144, v145, v146, v147);
    size_t v156 = sub_1B63CA534(8, v149, v150, v151, v152, v153, v154, v155);
    sub_1B63F4524(v140, v148, &v177, v156, 6, 0, v157, v158);
  }
  return v13 != 0;
}

__CFString *sub_1B66097AC()
{
  return @"transform";
}

int32x2_t sub_1B66097BC()
{
  if (qword_1EB9953E8 != -1) {
    dispatch_once(&qword_1EB9953E8, &unk_1F0FB6368);
  }
  uint64_t v0 = sub_1B63C8D44(qword_1EB9953F0, 0xB0uLL);
  *(_DWORD *)(v0 + 72) = 1065353216;
  *(_WORD *)(v0 + 76) = 257;
  *(void *)(v0 + 136) = 0;
  *(void *)(v0 + 144) = 0x7F7FFFFF00000000;
  *(unsigned char *)(v0 + 152) = 0;
  *(_OWORD *)(v0 + 176) = xmmword_1B6E4F340;
  int32x2_t result = vdup_n_s32(0x43B40000u);
  *(int32x2_t *)(v0 + 156) = result;
  *(void *)(v0 + 88) = sub_1B660916C;
  *(void *)(v0 + 96) = sub_1B66097AC;
  return result;
}

void sub_1B6609864()
{
  if (!qword_1EB9953C8)
  {
    uint64_t v0 = (void *)sub_1B63C8D10(&qword_1EB9953C8);
    qword_1EB9953C8 = (uint64_t)v0;
    if (qword_1EB9953F8 != -1) {
      dispatch_once(&qword_1EB9953F8, &unk_1F0FB6028);
    }
    sub_1B660E380(v0, (const void *)qword_1EB995400);
    sub_1B660E400(@"maximumLinearAcceleration", 0x8Cu, 1, 0, 0, 0, v1, v2);
    sub_1B660E400(@"maximumLinearVelocity", 0x88u, 1, 0, 0, 0, v3, v4);
    sub_1B660E400(@"decelerationDistance", 0x90u, 1, 0, 0, 0, v5, v6);
    sub_1B660E400(@"damping", 0x94u, 1, 0, 0, 0, v7, v8);
    sub_1B660E3EC();
  }
}

void sub_1B6609980(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"c");
  }
  *(float *)(a1 + 136) = a2;
}

void sub_1B66099D8(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"c");
  }
  *(float *)(a1 + 140) = a2;
}

uint64_t sub_1B6609A30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"constraint");
  }
  __n128 v10 = malloc_type_calloc(1uLL, 0x60uLL, 0x100004084AB7CDAuLL);
  *(void *)(a2 + 56) = v10;
  v25.n128_u32[2] = 0;
  v25.n128_u64[0] = 0;
  sub_1B64A1EC8(a3, &v25, v11, v12, v13, v14, v15, v16);
  *__n128 v10 = v25;
  v10[1] = 0u;
  float32x4_t v24 = 0uLL;
  sub_1B64A1F4C(a3, &v24, v17, v18, v19, v20, v21, v22);
  void v10[2] = v24;
  v10[3] = 0u;
  return 1;
}

uint64_t sub_1B6609AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (!a2) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  }
  uint64_t v13 = *(void *)(a2 + 56);
  double v21 = sub_1B6447728(a1);
  if (v21 != *(double *)(v13 + 72))
  {
    uint64_t v22 = sub_1B64A1E7C(a3, v14, v15, v16, v17, v18, v19, v20);
    if (v22)
    {
      simd_float4x4 v30 = *(simd_float4x4 *)sub_1B64A01D4(v22, v23, v24, v25, v26, v27, v28, v29);
    }
    else
    {
      v30.columns[0] = (simd_float4)xmmword_1B6E4F300;
      v30.columns[1] = (simd_float4)xmmword_1B6E4F320;
      v30.columns[2] = (simd_float4)xmmword_1B6E4F2E0;
      v30.columns[3] = (simd_float4)xmmword_1B6E4F370;
    }
    simd_float4x4 v107 = __invert_f4(v30);
    float32x4_t v102 = (float32x4_t)v107.columns[3];
    float32x4_t v103 = (float32x4_t)v107.columns[2];
    float32x4_t v100 = (float32x4_t)v107.columns[0];
    float32x4_t v101 = (float32x4_t)v107.columns[1];
    if (*(unsigned char *)(v13 + 80))
    {
      *(double *)v107.columns[0].i64 = v21 - *(double *)(v13 + 72);
      v107.columns[0].f32[0] = *(double *)v107.columns[0].i64;
    }
    else
    {
      v107.columns[0].i32[0] = 1015580809;
    }
    int32x2_t v99 = *(int32x2_t *)v107.columns[0].f32;
    float32x4_t v37 = *(float **)(a2 + 16);
    *(uint64_t *)((char *)v106.i64 + 4) = 0;
    v106.i32[0] = 0;
    sub_1B64A1EC8(a3, (__n128 *)&v106, v31, v32, v33, v34, v35, v36);
    if (!*(unsigned char *)(v13 + 80))
    {
      *(float32x4_t *)uint64_t v13 = v106;
      *(unsigned char *)(v13 + 80) = 1;
    }
    *(double *)(v13 + 72) = sub_1B6447728(a1);
    float v45 = v37[34];
    float v46 = v37[35];
    float32x4_t v47 = v106;
    float32x4_t v48 = *(float32x4_t *)v13;
    float32x4_t v49 = *(float32x4_t *)(v13 + 16);
    float32x4_t v50 = vsubq_f32(v106, *(float32x4_t *)v13);
    float32x4_t v51 = (float32x4_t)vdupq_lane_s32(v99, 0);
    float32x4_t v52 = vdivq_f32(v50, v51);
    float32x4_t v53 = vdivq_f32(vsubq_f32(v52, v49), v51);
    float32x4_t v54 = vmulq_f32(v53, v53);
    LODWORD(v55) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v54, 2), vaddq_f32(v54, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 1))).u32[0];
    if (sqrtf(v55) > v46)
    {
      float v56 = v55;
      float32x2_t v57 = vrsqrte_f32((float32x2_t)LODWORD(v55));
      float32x2_t v58 = vmul_f32(v57, vrsqrts_f32((float32x2_t)LODWORD(v56), vmul_f32(v57, v57)));
      float32x4_t v52 = vmlaq_f32(v49, v51, vmulq_n_f32(vmulq_n_f32(v53, vmul_f32(v58, vrsqrts_f32((float32x2_t)LODWORD(v56), vmul_f32(v58, v58))).f32[0]), v46));
    }
    float32x4_t v59 = vmulq_f32(v52, v52);
    LODWORD(v60) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1))).u32[0];
    if (sqrtf(v60) > v45)
    {
      float v61 = v60;
      float32x2_t v62 = vrsqrte_f32((float32x2_t)LODWORD(v60));
      float32x2_t v63 = vmul_f32(v62, vrsqrts_f32((float32x2_t)LODWORD(v61), vmul_f32(v62, v62)));
      float32x4_t v52 = vmulq_n_f32(vmulq_n_f32(v52, vmul_f32(v63, vrsqrts_f32((float32x2_t)LODWORD(v61), vmul_f32(v63, v63))).f32[0]), v45);
    }
    float v64 = v37[36];
    float32x4_t v65 = vmulq_n_f32(v52, 1.0 - v37[37]);
    if (v64 != 0.0)
    {
      float32x4_t v66 = vmulq_f32(v50, v50);
      float v67 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).f32[0]);
      float32x4_t v68 = vmulq_f32(v65, v65);
      LODWORD(v69) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).u32[0];
      float v70 = sqrtf(v69);
      if (v67 >= v64)
      {
        *(float *)(v13 + 64) = v70;
      }
      else
      {
        float v71 = v67 / v64;
        if (v71 >= 1.0) {
          float v72 = 1.0;
        }
        else {
          float v72 = v71 * v71;
        }
        float v73 = v72 * *(float *)(v13 + 64);
        if (v70 > v73)
        {
          float v74 = v69;
          float32x2_t v75 = vrsqrte_f32((float32x2_t)LODWORD(v69));
          float32x2_t v76 = vmul_f32(v75, vrsqrts_f32((float32x2_t)LODWORD(v74), vmul_f32(v75, v75)));
          float32x4_t v65 = vmulq_n_f32(vmulq_n_f32(v65, vmul_f32(v76, vrsqrts_f32((float32x2_t)LODWORD(v74), vmul_f32(v76, v76))).f32[0]), v73);
        }
      }
    }
    float32x4_t v77 = vmlaq_f32(v48, v51, v65);
    if (a9 != 0.0)
    {
      float32x4_t v78 = vmlaq_n_f32(v47, vsubq_f32(v77, v47), a9);
      float32x4_t v65 = vdivq_f32(vsubq_f32(v78, v48), v51);
      float32x4_t v77 = v78;
    }
    *(float32x4_t *)uint64_t v13 = v77;
    *(float32x4_t *)(v13 + 16) = v65;
    float32x4_t v105 = vaddq_f32(v102, vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v100, v77.f32[0]), v101, *(float32x2_t *)v77.f32, 1), v103, v77, 2));
    float32x4_t v79 = (const void *)sub_1B660F878(a4, v38, v39, v40, v41, v42, v43, v44);
    int8x16_t v87 = (void *)sub_1B660F8C4(a4, v80, v81, v82, v83, v84, v85, v86);
    size_t v95 = sub_1B63CA534(8, v88, v89, v90, v91, v92, v93, v94);
    sub_1B63F4524(v79, v87, &v105, v95, 6, 0, v96, v97);
  }
  return 1;
}

__CFString *sub_1B6609E10()
{
  return @"transform";
}

double sub_1B6609E20()
{
  if (qword_1EB9953C0 != -1) {
    dispatch_once(&qword_1EB9953C0, &unk_1F0FB6448);
  }
  uint64_t v0 = sub_1B63C8D44(qword_1EB9953C8, 0x88uLL);
  *(_DWORD *)(v0 + 72) = 1065353216;
  *(_WORD *)(v0 + 76) = 257;
  double result = 1.40444743e306;
  *(_OWORD *)(v0 + 136) = xmmword_1B6E72C60;
  *(void *)(v0 + 88) = sub_1B6609AE8;
  *(void *)(v0 + 96) = sub_1B6609E10;
  *(void *)(v0 + 80) = sub_1B6609A30;
  return result;
}

void sub_1B6609EB8()
{
  if (!qword_1EB995438)
  {
    uint64_t v0 = (void *)sub_1B63C8D10(&qword_1EB995438);
    qword_1EB995438 = (uint64_t)v0;
    if (qword_1EB9953F8 != -1) {
      dispatch_once(&qword_1EB9953F8, &unk_1F0FB6028);
    }
    sub_1B660E380(v0, (const void *)qword_1EB995400);
    sub_1B660E400(@"orientationOffset", 0xC0u, 9, 3, 0, 0, v1, v2);
    sub_1B660E400(@"positionOffset", 0xA0u, 8, 6, 0, 0, v3, v4);
    sub_1B660E400(@"scaleOffset", 0xB0u, 8, 7, 0, 0, v5, v6);
    sub_1B660E3EC();
  }
}

void sub_1B6609FB4(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  }
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a1 + 144) & 0xFE | a2;
}

void sub_1B660A010(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  }
  if (a2) {
    char v10 = 2;
  }
  else {
    char v10 = 0;
  }
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a1 + 144) & 0xFD | v10;
}

void sub_1B660A078(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"c");
  }
  if (a2) {
    char v10 = 4;
  }
  else {
    char v10 = 0;
  }
  *(unsigned char *)(a1 + 144) = *(unsigned char *)(a1 + 144) & 0xFB | v10;
}

void sub_1B660A0E0(__n128 *a1, __n128 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1)
  {
    __n128 v10 = a2;
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"c");
    a2 = v10;
  }
  a1[10] = a2;
}

uint64_t sub_1B660A134(float a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a3) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"controller");
  }
  uint64_t v12 = *(float32x4_t **)(a3 + 16);
  if (!v12[8].i64[1]) {
    return 0;
  }
  uint64_t v13 = sub_1B64A1E7C(a4, a3, a4, a5, a6, a7, a8, a9);
  uint64_t result = sub_1B64A01D4(a4, v14, v15, v16, v17, v18, v19, v20);
  if (!result) {
    return result;
  }
  uint64_t v29 = (float32x4_t *)result;
  if (v13)
  {
    simd_float4x4 v30 = *(simd_float4x4 *)sub_1B64A01D4(v13, v22, v23, v24, v25, v26, v27, v28);
  }
  else
  {
    v30.columns[0] = (simd_float4)xmmword_1B6E4F300;
    v30.columns[1] = (simd_float4)xmmword_1B6E4F320;
    v30.columns[2] = (simd_float4)xmmword_1B6E4F2E0;
    v30.columns[3] = (simd_float4)xmmword_1B6E4F370;
  }
  simd_float4x4 v317 = __invert_f4(v30);
  __int8 v38 = v12[9].i8[0];
  float32x4_t v312 = (float32x4_t)v317.columns[1];
  float32x4_t v313 = (float32x4_t)v317.columns[0];
  float32x4_t v310 = (float32x4_t)v317.columns[3];
  float32x4_t v311 = (float32x4_t)v317.columns[2];
  if (v38)
  {
    v316.i32[2] = 0;
    v316.i64[0] = 0;
    sub_1B64A1EC8(v12[8].i64[1], (__n128 *)&v316, v32, v33, v34, v35, v36, v37);
    v315[0].n128_u32[2] = 0;
    v315[0].n128_u64[0] = 0;
    sub_1B64A1EC8(a4, v315, v40, v41, v42, v43, v44, v45);
    float32x4_t v39 = vmlaq_n_f32((float32x4_t)v315[0], vsubq_f32(vaddq_f32(v316, v12[10]), (float32x4_t)v315[0]), a1);
    __int8 v38 = v12[9].i8[0];
  }
  else
  {
    float32x4_t v39 = v29[3];
  }
  float32x4_t v309 = v39;
  if ((v38 & 2) != 0)
  {
    uint64_t v76 = sub_1B64A01D4(v12[8].i64[1], v31, v32, v33, v34, v35, v36, v37);
    float32x4_t v84 = *(float32x4_t *)(v76 + 16);
    float32x4_t v85 = *(float32x4_t *)(v76 + 32);
    int32x4_t v86 = (int32x4_t)vmulq_f32(*(float32x4_t *)v76, *(float32x4_t *)v76);
    int32x4_t v87 = (int32x4_t)vmulq_f32(v84, v84);
    int32x4_t v88 = (int32x4_t)vmulq_f32(v85, v85);
    int32x4_t v89 = vzip2q_s32(v86, v88);
    float32x4_t v90 = (float32x4_t)vzip1q_s32(vzip1q_s32(v86, v88), v87);
    float32x4_t v91 = (float32x4_t)vtrn2q_s32(v86, v87);
    v91.i32[2] = v88.i32[1];
    float32x4_t v92 = vaddq_f32((float32x4_t)vzip1q_s32(v89, vdupq_laneq_s32(v87, 2)), vaddq_f32(v90, v91));
    v91.i64[0] = 0x80000000800000;
    v91.i64[1] = 0x80000000800000;
    int32x4_t v93 = vcgeq_f32(v91, v92);
    v92.i32[3] = 0;
    float32x4_t v94 = vrsqrteq_f32(v92);
    float32x4_t v95 = vmulq_f32(v94, vrsqrtsq_f32(v92, vmulq_f32(v94, v94)));
    int32x4_t v96 = v93;
    v96.i32[3] = 0;
    float32x4_t v97 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v96), (int8x16_t)v92, (int8x16_t)vmulq_f32(v95, vrsqrtsq_f32(v92, vmulq_f32(v95, v95))));
    float32x4_t v98 = vmulq_n_f32(*(float32x4_t *)v76, v97.f32[0]);
    float32x4_t v99 = vmulq_lane_f32(v84, *(float32x2_t *)v97.f32, 1);
    float32x4_t v100 = vmulq_laneq_f32(v85, v97, 2);
    int8x16_t v101 = (int8x16_t)vuzp1q_s32((int32x4_t)v100, (int32x4_t)v100);
    int8x16_t v102 = (int8x16_t)vuzp1q_s32((int32x4_t)v99, (int32x4_t)v99);
    int32x4_t v103 = (int32x4_t)v98;
    if (v93.i32[0])
    {
      int8x16_t v104 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v101, (int8x16_t)v100, 0xCuLL), vnegq_f32(v99)), v100, (float32x4_t)vextq_s8(v102, (int8x16_t)v99, 0xCuLL));
      int32x4_t v103 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), v104, 0xCuLL);
    }
    int8x16_t v105 = (int8x16_t)vuzp1q_s32((int32x4_t)v98, (int32x4_t)v98);
    float32x4_t v106 = v99;
    if (v93.i32[1])
    {
      int8x16_t v107 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v105, (int8x16_t)v98, 0xCuLL), vnegq_f32(v100)), v98, (float32x4_t)vextq_s8(v101, (int8x16_t)v100, 0xCuLL));
      float32x4_t v106 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v107, (int32x4_t)v107), v107, 0xCuLL);
    }
    if (v93.i32[2])
    {
      int8x16_t v108 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v102, (int8x16_t)v99, 0xCuLL), vnegq_f32(v98)), v99, (float32x4_t)vextq_s8(v105, (int8x16_t)v98, 0xCuLL));
      float32x4_t v100 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v108, (int32x4_t)v108), v108, 0xCuLL);
    }
    float v109 = (float)(*(float *)v103.i32 + v106.f32[1]) + v100.f32[2];
    if (v109 > 0.0)
    {
      float32x4_t v110 = (float32x4_t)vzip2q_s32((int32x4_t)v106, vuzp1q_s32((int32x4_t)v106, (int32x4_t)v100));
      v110.i32[2] = v103.i32[1];
      float v111 = sqrtf(v109 + 1.0);
      float32x4_t v112 = (float32x4_t)vtrn2q_s32((int32x4_t)v100, vzip2q_s32((int32x4_t)v100, v103));
      v112.i32[2] = v106.i32[0];
      float32x4_t v113 = vsubq_f32(v110, v112);
      v110.f32[3] = v111;
      v112.f32[3] = v111;
      float32x4_t v114 = vmulq_f32(v110, v112);
      v113.i32[3] = v114.i32[3];
      float32x4_t v306 = v113;
LABEL_47:
      v114.f32[0] = 0.5 / v111;
      float32x4_t v302 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v114.f32, 0);
LABEL_48:
      uint64_t v145 = sub_1B64A01D4(a4, v77, v78, v79, v80, v81, v82, v83);
      float32x4_t v146 = *(float32x4_t *)(v145 + 16);
      float32x4_t v147 = *(float32x4_t *)(v145 + 32);
      int32x4_t v148 = (int32x4_t)vmulq_f32(*(float32x4_t *)v145, *(float32x4_t *)v145);
      int32x4_t v149 = (int32x4_t)vmulq_f32(v146, v146);
      int32x4_t v150 = (int32x4_t)vmulq_f32(v147, v147);
      int32x4_t v151 = vzip2q_s32(v148, v150);
      float32x4_t v152 = (float32x4_t)vzip1q_s32(vzip1q_s32(v148, v150), v149);
      float32x4_t v153 = (float32x4_t)vtrn2q_s32(v148, v149);
      v153.i32[2] = v150.i32[1];
      float32x4_t v154 = vaddq_f32((float32x4_t)vzip1q_s32(v151, vdupq_laneq_s32(v149, 2)), vaddq_f32(v152, v153));
      v153.i64[0] = 0x80000000800000;
      v153.i64[1] = 0x80000000800000;
      int32x4_t v155 = vcgeq_f32(v153, v154);
      v154.i32[3] = 0;
      float32x4_t v156 = vrsqrteq_f32(v154);
      float32x4_t v157 = vmulq_f32(v156, vrsqrtsq_f32(v154, vmulq_f32(v156, v156)));
      int32x4_t v158 = v155;
      v158.i32[3] = 0;
      float32x4_t v159 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v158), (int8x16_t)v154, (int8x16_t)vmulq_f32(v157, vrsqrtsq_f32(v154, vmulq_f32(v157, v157))));
      float32x4_t v160 = vmulq_n_f32(*(float32x4_t *)v145, v159.f32[0]);
      float32x4_t v161 = vmulq_lane_f32(v146, *(float32x2_t *)v159.f32, 1);
      float32x4_t v162 = vmulq_laneq_f32(v147, v159, 2);
      int8x16_t v163 = (int8x16_t)vuzp1q_s32((int32x4_t)v162, (int32x4_t)v162);
      int8x16_t v164 = (int8x16_t)vuzp1q_s32((int32x4_t)v161, (int32x4_t)v161);
      int32x4_t v165 = (int32x4_t)v160;
      if (v155.i32[0])
      {
        int8x16_t v166 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v163, (int8x16_t)v162, 0xCuLL), vnegq_f32(v161)), v162, (float32x4_t)vextq_s8(v164, (int8x16_t)v161, 0xCuLL));
        int32x4_t v165 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v166, (int32x4_t)v166), v166, 0xCuLL);
      }
      int8x16_t v167 = (int8x16_t)vuzp1q_s32((int32x4_t)v160, (int32x4_t)v160);
      float32x4_t v168 = v161;
      if (v155.i32[1])
      {
        int8x16_t v169 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v167, (int8x16_t)v160, 0xCuLL), vnegq_f32(v162)), v160, (float32x4_t)vextq_s8(v163, (int8x16_t)v162, 0xCuLL));
        float32x4_t v168 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v169, (int32x4_t)v169), v169, 0xCuLL);
      }
      if (v155.i32[2])
      {
        int8x16_t v170 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v164, (int8x16_t)v161, 0xCuLL), vnegq_f32(v160)), v161, (float32x4_t)vextq_s8(v167, (int8x16_t)v160, 0xCuLL));
        float32x4_t v162 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v170, (int32x4_t)v170), v170, 0xCuLL);
      }
      v171.i64[1] = v302.i64[1];
      _Q0 = vmulq_f32(v306, v302);
      float v173 = (float)(*(float *)v165.i32 + v168.f32[1]) + v162.f32[2];
      if (v173 > 0.0)
      {
        float32x4_t v174 = (float32x4_t)vzip2q_s32((int32x4_t)v168, vuzp1q_s32((int32x4_t)v168, (int32x4_t)v162));
        v174.i32[2] = v165.i32[1];
        float v175 = sqrtf(v173 + 1.0);
        float32x4_t v176 = (float32x4_t)vtrn2q_s32((int32x4_t)v162, vzip2q_s32((int32x4_t)v162, v165));
        v176.i32[2] = v168.i32[0];
        float32x4_t v178 = vsubq_f32(v174, v176);
        v174.f32[3] = v175;
        v176.f32[3] = v175;
        float32x4_t v177 = vmulq_f32(v174, v176);
        v178.i32[3] = v177.i32[3];
LABEL_65:
        v177.f32[0] = 0.5 / v175;
        float32x4_t v188 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v177.f32, 0);
        goto LABEL_66;
      }
      if (*(float *)v165.i32 < v168.f32[1] || *(float *)v165.i32 < v162.f32[2])
      {
        if (v168.f32[1] <= v162.f32[2])
        {
          float v175 = sqrtf((float)((float)(v162.f32[2] + 1.0) - *(float *)v165.i32) - v168.f32[1]);
          *(float32x2_t *)v178.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v165, (int32x4_t)v168), *(float32x2_t *)v162.f32);
          float32x2_t v189 = (float32x2_t)__PAIR64__(v165.u32[1], LODWORD(v175));
          float32x2_t v190 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v168.f32, 0);
          *(float32x2_t *)v177.f32 = vsub_f32(*(float32x2_t *)v165.i8, v190);
          v190.f32[0] = v175;
          v190.i32[0] = vmul_f32(v189, v190).u32[0];
          v190.i32[1] = v177.i32[1];
          *(float32x2_t *)&v178.u32[2] = v190;
          goto LABEL_65;
        }
        float v182 = sqrtf((float)((float)(v168.f32[1] + 1.0) - *(float *)v165.i32) - v162.f32[2]);
        *(int32x2_t *)v171.i8 = vdup_laneq_s32((int32x4_t)v168, 2);
        int8x16_t v180 = v171;
        *(float *)v180.i32 = v182;
        v180.i32[0] = vmul_f32(*(float32x2_t *)v180.i8, (float32x2_t)__PAIR64__(v162.u32[1], LODWORD(v182))).u32[0];
        v180.i32[1] = vadd_f32(*(float32x2_t *)&v171, *(float32x2_t *)&v162).i32[1];
        int8x16_t v181 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v165.i8, 1), v168);
        int32x2_t v187 = (int32x2_t)vsubq_f32(v162, (float32x4_t)vdupq_laneq_s32(v165, 2)).u64[0];
        float32x4_t v188 = (float32x4_t)vextq_s8(vextq_s8(v181, v181, 4uLL), v180, 0xCuLL);
        v188.i32[3] = v187.i32[0];
      }
      else
      {
        float v182 = sqrtf((float)((float)(*(float *)v165.i32 + 1.0) - v168.f32[1]) - v162.f32[2]);
        float32x2_t v183 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v168.f32, 0);
        float32x2_t v184 = vadd_f32(*(float32x2_t *)v165.i8, v183);
        v183.f32[0] = v182;
        v188.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v165.u32[1], LODWORD(v182)), v183).u32[0];
        v188.i32[1] = v184.i32[1];
        float32x2_t v185 = (float32x2_t)vzip2q_s32(v165, (int32x4_t)v168).u64[0];
        LODWORD(v186) = vadd_f32(v185, *(float32x2_t *)v162.f32).u32[0];
        int32x2_t v187 = (int32x2_t)vsub_f32(v185, *(float32x2_t *)v162.f32);
        HIDWORD(v186) = v187.i32[1];
        v188.i64[1] = v186;
      }
      *(float *)v187.i32 = 0.5 / v182;
      float32x4_t v178 = (float32x4_t)vdupq_lane_s32(v187, 0);
LABEL_66:
      _Q1 = v12[12];
      _S3 = _Q1.i32[3];
      int8x16_t v193 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q1, (int32x4_t)_Q1), (int8x16_t)_Q1, 0xCuLL), vnegq_f32(_Q0)), _Q1, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
      float32x4_t v197 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(_Q0, _Q1, 3), _Q1, _Q0, 3), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v193, (int32x4_t)v193), v193, 0xCuLL));
      __asm { FMLA            S1, S3, V0.S[3] }
      v197.i32[3] = _Q1.i32[0];
      float32x4_t v198 = vmulq_f32(v178, v188);
      int8x16_t v199 = (int8x16_t)vmulq_f32(v198, v197);
      float32x4_t v303 = v197;
      float32x4_t v307 = v198;
      float v200 = 1.0;
      float v201 = 1.0 - a1;
      if (vaddv_f32(vadd_f32(*(float32x2_t *)v199.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v199, v199, 8uLL))) >= 0.0)
      {
        float32x4_t v222 = vsubq_f32(v198, v197);
        int8x16_t v223 = (int8x16_t)vmulq_f32(v222, v222);
        float32x4_t v224 = vaddq_f32(v198, v197);
        int8x16_t v225 = (int8x16_t)vmulq_f32(v224, v224);
        float v226 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v223.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v223, v223, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v225.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v225, v225, 8uLL)))));
        float v227 = v226 + v226;
        _ZF = (float)(v226 + v226) == 0.0;
        float v228 = 1.0;
        if (!_ZF) {
          float v228 = sinf(v227) / v227;
        }
        float v229 = v228;
        float32x2_t v230 = vrecpe_f32((float32x2_t)LODWORD(v228));
        int32x2_t v231 = (int32x2_t)vmul_f32(v230, vrecps_f32((float32x2_t)LODWORD(v229), v230));
        LODWORD(v232) = vmul_f32((float32x2_t)v231, vrecps_f32((float32x2_t)LODWORD(v229), (float32x2_t)v231)).u32[0];
        if ((float)(v201 * v227) != 0.0)
        {
          float v300 = v232;
          *(float *)v231.i32 = sinf(v201 * v227);
          float v232 = v300;
          float v200 = *(float *)v231.i32 / (float)(v201 * v227);
        }
        *(float *)v231.i32 = v201 * (float)(v232 * v200);
        float32x4_t v233 = (float32x4_t)vdupq_lane_s32(v231, 0);
        float v234 = a1;
        float v235 = v227 * a1;
        float v236 = 1.0;
        if (v235 != 0.0)
        {
          float32x4_t v297 = v233;
          float v301 = v232;
          float v237 = sinf(v235);
          float32x4_t v233 = v297;
          float v232 = v301;
          float v234 = a1;
          float v236 = v237 / v235;
        }
        float32x4_t v221 = vmlaq_f32(vmulq_n_f32(v303, (float)(v232 * v236) * v234), v307, v233);
      }
      else
      {
        float32x4_t v202 = vaddq_f32(v198, v197);
        int8x16_t v203 = (int8x16_t)vmulq_f32(v202, v202);
        float32x4_t v204 = vsubq_f32(v198, v197);
        int8x16_t v205 = (int8x16_t)vmulq_f32(v204, v204);
        float v206 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v203.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v203, v203, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v205.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v205, v205, 8uLL)))));
        float v207 = v206 + v206;
        _ZF = (float)(v206 + v206) == 0.0;
        float v208 = 1.0;
        if (!_ZF) {
          float v208 = sinf(v207) / v207;
        }
        float v209 = v208;
        float32x2_t v210 = vrecpe_f32((float32x2_t)LODWORD(v208));
        float32x2_t v211 = vmul_f32(v210, vrecps_f32((float32x2_t)LODWORD(v209), v210));
        LODWORD(v212) = vmul_f32(v211, vrecps_f32((float32x2_t)LODWORD(v209), v211)).u32[0];
        if ((float)(v201 * v207) != 0.0)
        {
          float v298 = v212;
          float v213 = sinf(v201 * v207);
          float v212 = v298;
          float v200 = v213 / (float)(v201 * v207);
        }
        v214.i32[1] = v303.i32[1];
        float32x4_t v215 = vnegq_f32(v303);
        *(float *)v214.i32 = v201 * (float)(v212 * v200);
        float32x4_t v216 = (float32x4_t)vdupq_lane_s32(v214, 0);
        float v217 = a1;
        float v218 = v207 * a1;
        float v219 = 1.0;
        if (v218 != 0.0)
        {
          float v299 = v212;
          float32x4_t v304 = v215;
          float32x4_t v296 = v216;
          float v220 = sinf(v218);
          float32x4_t v216 = v296;
          float v212 = v299;
          float32x4_t v215 = v304;
          float v217 = a1;
          float v219 = v220 / v218;
        }
        float32x4_t v221 = vmlaq_f32(vmulq_n_f32(v215, (float)(v212 * v219) * v217), v307, v216);
      }
      int8x16_t v238 = (int8x16_t)vmulq_f32(v221, v221);
      *(float32x2_t *)v238.i8 = vadd_f32(*(float32x2_t *)v238.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v238, v238, 8uLL));
      float32x4_t v239 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v238.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v238.i8, 1)), 0);
      float32x4_t v240 = vrsqrteq_f32(v239);
      float32x4_t v241 = vmulq_f32(v240, vrsqrtsq_f32(v239, vmulq_f32(v240, v240)));
      __asm { FMOV            V3.4S, #1.0 }
      float32x4_t v129 = vmulq_f32(v221, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v239), _Q3, (int8x16_t)vmulq_f32(v241, vrsqrtsq_f32(v239, vmulq_f32(v241, v241)))));
      float32x4_t v39 = v309;
      goto LABEL_82;
    }
    if (*(float *)v103.i32 < v106.f32[1] || *(float *)v103.i32 < v100.f32[2])
    {
      if (v106.f32[1] <= v100.f32[2])
      {
        float v111 = sqrtf((float)((float)(v100.f32[2] + 1.0) - *(float *)v103.i32) - v106.f32[1]);
        *(float32x2_t *)v142.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v103, (int32x4_t)v106), *(float32x2_t *)v100.f32);
        float32x2_t v143 = (float32x2_t)__PAIR64__(v103.u32[1], LODWORD(v111));
        float32x2_t v144 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 0);
        *(float32x2_t *)v114.f32 = vsub_f32(*(float32x2_t *)v103.i8, v144);
        v144.f32[0] = v111;
        v143.i32[0] = vmul_f32(v143, v144).u32[0];
        v143.i32[1] = v114.i32[1];
        *(float32x2_t *)&v142.u32[2] = v143;
        float32x4_t v306 = v142;
        goto LABEL_47;
      }
      float v130 = sqrtf((float)((float)(v106.f32[1] + 1.0) - *(float *)v103.i32) - v100.f32[2]);
      *(int32x2_t *)v99.f32 = vdup_laneq_s32((int32x4_t)v106, 2);
      int8x16_t v120 = (int8x16_t)v99;
      *(float *)v120.i32 = v130;
      v120.i32[0] = vmul_f32(*(float32x2_t *)v120.i8, (float32x2_t)__PAIR64__(v100.u32[1], LODWORD(v130))).u32[0];
      v120.i32[1] = vadd_f32(*(float32x2_t *)&v99, *(float32x2_t *)&v100).i32[1];
      int8x16_t v121 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v103.i8, 1), v106);
      int32x2_t v136 = (int32x2_t)vsubq_f32(v100, (float32x4_t)vdupq_laneq_s32(v103, 2)).u64[0];
      int8x16_t v122 = vextq_s8(vextq_s8(v121, v121, 4uLL), v120, 0xCuLL);
      v122.i32[3] = v136.i32[0];
      float32x4_t v302 = (float32x4_t)v122;
    }
    else
    {
      float v130 = sqrtf((float)((float)(*(float *)v103.i32 + 1.0) - v106.f32[1]) - v100.f32[2]);
      float32x2_t v131 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v106.f32, 0);
      float32x2_t v132 = vadd_f32(*(float32x2_t *)v103.i8, v131);
      v131.f32[0] = v130;
      v133.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v103.u32[1], LODWORD(v130)), v131).u32[0];
      v133.i32[1] = v132.i32[1];
      float32x2_t v134 = (float32x2_t)vzip2q_s32(v103, (int32x4_t)v106).u64[0];
      LODWORD(v135) = vadd_f32(v134, *(float32x2_t *)v100.f32).u32[0];
      int32x2_t v136 = (int32x2_t)vsub_f32(v134, *(float32x2_t *)v100.f32);
      HIDWORD(v135) = v136.i32[1];
      v133.i64[1] = v135;
      float32x4_t v302 = v133;
    }
    *(float *)v136.i32 = 0.5 / v130;
    float32x4_t v306 = (float32x4_t)vdupq_lane_s32(v136, 0);
    goto LABEL_48;
  }
  float32x4_t v46 = v29[1];
  float32x4_t v47 = v29[2];
  int32x4_t v48 = (int32x4_t)vmulq_f32(*v29, *v29);
  int32x4_t v49 = (int32x4_t)vmulq_f32(v46, v46);
  int32x4_t v50 = (int32x4_t)vmulq_f32(v47, v47);
  int32x4_t v51 = vzip2q_s32(v48, v50);
  float32x4_t v52 = (float32x4_t)vzip1q_s32(vzip1q_s32(v48, v50), v49);
  float32x4_t v53 = (float32x4_t)vtrn2q_s32(v48, v49);
  v53.i32[2] = v50.i32[1];
  float32x4_t v54 = vaddq_f32((float32x4_t)vzip1q_s32(v51, vdupq_laneq_s32(v49, 2)), vaddq_f32(v52, v53));
  v53.i64[0] = 0x80000000800000;
  v53.i64[1] = 0x80000000800000;
  int32x4_t v55 = vcgeq_f32(v53, v54);
  v54.i32[3] = 0;
  float32x4_t v56 = vrsqrteq_f32(v54);
  float32x4_t v57 = vmulq_f32(v56, vrsqrtsq_f32(v54, vmulq_f32(v56, v56)));
  int32x4_t v58 = v55;
  v58.i32[3] = 0;
  float32x4_t v59 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v58), (int8x16_t)v54, (int8x16_t)vmulq_f32(v57, vrsqrtsq_f32(v54, vmulq_f32(v57, v57))));
  float32x4_t v60 = vmulq_n_f32(*v29, v59.f32[0]);
  float32x4_t v61 = vmulq_lane_f32(v46, *(float32x2_t *)v59.f32, 1);
  float32x4_t v62 = vmulq_laneq_f32(v47, v59, 2);
  int8x16_t v63 = (int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62);
  int8x16_t v64 = (int8x16_t)vuzp1q_s32((int32x4_t)v61, (int32x4_t)v61);
  int32x4_t v65 = (int32x4_t)v60;
  if (v55.i32[0])
  {
    int8x16_t v66 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v63, (int8x16_t)v62, 0xCuLL), vnegq_f32(v61)), v62, (float32x4_t)vextq_s8(v64, (int8x16_t)v61, 0xCuLL));
    int32x4_t v65 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v66, (int32x4_t)v66), v66, 0xCuLL);
  }
  int8x16_t v67 = (int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60);
  float32x4_t v68 = v61;
  if (v55.i32[1])
  {
    int8x16_t v69 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v67, (int8x16_t)v60, 0xCuLL), vnegq_f32(v62)), v60, (float32x4_t)vextq_s8(v63, (int8x16_t)v62, 0xCuLL));
    float32x4_t v68 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v69, (int32x4_t)v69), v69, 0xCuLL);
  }
  if (v55.i32[2])
  {
    int8x16_t v70 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v64, (int8x16_t)v61, 0xCuLL), vnegq_f32(v60)), v61, (float32x4_t)vextq_s8(v67, (int8x16_t)v60, 0xCuLL));
    float32x4_t v62 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v70, (int32x4_t)v70), v70, 0xCuLL);
  }
  float v71 = (float)(*(float *)v65.i32 + v68.f32[1]) + v62.f32[2];
  if (v71 > 0.0)
  {
    float v72 = sqrtf(v71 + 1.0);
    float32x4_t v73 = (float32x4_t)vzip2q_s32((int32x4_t)v68, vuzp1q_s32((int32x4_t)v68, (int32x4_t)v62));
    v73.i32[2] = v65.i32[1];
    float32x4_t v74 = (float32x4_t)vtrn2q_s32((int32x4_t)v62, vzip2q_s32((int32x4_t)v62, v65));
    v74.i32[2] = v68.i32[0];
    float32x4_t v75 = vsubq_f32(v73, v74);
    v73.f32[3] = v72;
    v74.f32[3] = v72;
    v75.i32[3] = vmulq_f32(v73, v74).i32[3];
LABEL_36:
    float32x4_t v129 = vmulq_n_f32(v75, 0.5 / v72);
    goto LABEL_82;
  }
  if (*(float *)v65.i32 < v68.f32[1] || *(float *)v65.i32 < v62.f32[2])
  {
    if (v68.f32[1] <= v62.f32[2])
    {
      float32x2_t v137 = (float32x2_t)vzip2q_s32(v65, (int32x4_t)v68).u64[0];
      float32x2_t v138 = (float32x2_t)__PAIR64__(v65.u32[1], COERCE_UNSIGNED_INT(sqrtf((float)((float)(v62.f32[2] + 1.0) - *(float *)v65.i32) - v68.f32[1])));
      float32x2_t v139 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v68.f32, 0);
      float32x2_t v140 = vsub_f32(*(float32x2_t *)v65.i8, v139);
      v139.i32[0] = v138.i32[0];
      v139.i32[0] = vmul_f32(v138, v139).u32[0];
      v139.i32[1] = v140.i32[1];
      *(float32x2_t *)v141.f32 = vadd_f32(v137, *(float32x2_t *)v62.f32);
      *(float32x2_t *)&v141.u32[2] = v139;
      float32x4_t v129 = vmulq_n_f32(v141, 0.5 / v138.f32[0]);
      goto LABEL_82;
    }
    float v72 = sqrtf((float)((float)(v68.f32[1] + 1.0) - *(float *)v65.i32) - v62.f32[2]);
    int8x16_t v116 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.i8, 1), v68);
    *(int32x2_t *)v68.f32 = vdup_laneq_s32((int32x4_t)v68, 2);
    float32x2_t v117 = vadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v62.f32);
    v68.f32[0] = v72;
    v68.i32[0] = vmul_f32(*(float32x2_t *)v68.f32, (float32x2_t)__PAIR64__(v62.u32[1], LODWORD(v72))).u32[0];
    v68.i32[1] = v117.i32[1];
    unsigned __int32 v118 = vsubq_f32(v62, (float32x4_t)vdupq_laneq_s32(v65, 2)).u32[0];
    float32x4_t v75 = (float32x4_t)vextq_s8(vextq_s8(v116, v116, 4uLL), (int8x16_t)v68, 0xCuLL);
    v75.i32[3] = v118;
    goto LABEL_36;
  }
  float v123 = sqrtf((float)((float)(*(float *)v65.i32 + 1.0) - v68.f32[1]) - v62.f32[2]);
  float32x2_t v124 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v68.f32, 0);
  float32x2_t v125 = vadd_f32(*(float32x2_t *)v65.i8, v124);
  v124.f32[0] = v123;
  v126.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v65.u32[1], LODWORD(v123)), v124).u32[0];
  v126.i32[1] = v125.i32[1];
  float32x2_t v127 = (float32x2_t)vzip2q_s32(v65, (int32x4_t)v68).u64[0];
  LODWORD(v128) = vadd_f32(v127, *(float32x2_t *)v62.f32).u32[0];
  HIDWORD(v128) = vsub_f32(v127, *(float32x2_t *)&v62).i32[1];
  v126.i64[1] = v128;
  float32x4_t v129 = vmulq_n_f32(v126, 0.5 / v123);
LABEL_82:
  if ((v12[9].i8[0] & 4) != 0)
  {
    float32x4_t v308 = v129;
    float v247 = (float32x4_t *)sub_1B64A01D4(v12[8].i64[1], v31, v32, v33, v34, v35, v36, v37);
    float32x4_t v248 = vmulq_f32(*v247, *v247);
    float32x4_t v249 = vmulq_f32(v247[1], v247[1]);
    v250.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v248, 2), vaddq_f32(v248, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v248.f32, 1))).f32[0]);
    v248.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v249, 2), vaddq_f32(v249, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v249.f32, 1))).f32[0]);
    float32x4_t v251 = vmulq_f32(v247[2], v247[2]);
    v250.i32[1] = v248.i32[0];
    v250.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v251, 2), vaddq_f32(v251, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v251.f32, 1))).f32[0]);
    float32x4_t v305 = v250;
    uint64_t v259 = (float32x4_t *)sub_1B64A01D4(a4, v252, v253, v254, v255, v256, v257, v258);
    float32x4_t v129 = v308;
    float32x4_t v39 = v309;
    float32x4_t v260 = vmulq_f32(*v259, *v259);
    float32x4_t v261 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v260, 2), vaddq_f32(v260, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v260.f32, 1)));
    v261.f32[0] = sqrtf(v261.f32[0]);
    float32x4_t v262 = vmulq_f32(v259[1], v259[1]);
    float32x4_t v263 = vmulq_f32(v259[2], v259[2]);
    v261.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v262, 2), vaddq_f32(v262, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v262.f32, 1))).f32[0]);
    v261.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v263, 2), vaddq_f32(v263, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v263.f32, 1))).f32[0]);
    float32x4_t v246 = vmlaq_n_f32(v261, vsubq_f32(vmulq_f32(v305, v12[11]), v261), a1);
  }
  else
  {
    float32x4_t v243 = vmulq_f32(*v29, *v29);
    float32x4_t v246 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v243, 2), vaddq_f32(v243, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v243.f32, 1)));
    float32x4_t v244 = vmulq_f32(v29[1], v29[1]);
    v246.f32[0] = sqrtf(v246.f32[0]);
    float32x4_t v245 = vmulq_f32(v29[2], v29[2]);
    v246.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v244, 2), vaddq_f32(v244, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v244.f32, 1))).f32[0]);
    v246.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v245, 2), vaddq_f32(v245, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v245.f32, 1))).f32[0]);
  }
  uint64_t v264 = 0;
  v39.i32[3] = 1.0;
  float32x4_t v265 = vabsq_f32(v246);
  v265.i32[3] = 0;
  v266.i64[0] = 0x8000000080000000;
  v266.i64[1] = 0x8000000080000000;
  int8x16_t v267 = vandq_s8((int8x16_t)v246, v266);
  float32x4_t v268 = vmulq_f32(v129, v129);
  float32x4_t v269 = vmulq_laneq_f32(v129, v129, 3);
  float v270 = vmulq_lane_f32(v129, *(float32x2_t *)v129.f32, 1).f32[0];
  v268.f32[0] = 0.5 - v268.f32[0];
  float32x2_t v271 = vmul_laneq_f32(*(float32x2_t *)v129.f32, v129, 2);
  v272.i32[3] = 0;
  v272.f32[0] = (float)(0.5 - v268.f32[1]) - v268.f32[2];
  v272.f32[1] = v270 + v269.f32[2];
  v272.f32[2] = v271.f32[0] - v269.f32[1];
  v273.i32[3] = 0;
  v273.f32[0] = v270 - v269.f32[2];
  v273.f32[1] = v268.f32[0] - v268.f32[2];
  v273.f32[2] = v271.f32[1] + v269.f32[0];
  *(int32x2_t *)v269.f32 = vrev64_s32(*(int32x2_t *)v269.f32);
  v274.i32[0] = vadd_f32(v271, *(float32x2_t *)v269.f32).u32[0];
  v274.i32[1] = vsub_f32(v271, *(float32x2_t *)&v269).i32[1];
  v274.f32[2] = v268.f32[0] - v268.f32[1];
  float32x4_t v275 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v265, (float32x4_t)xmmword_1B6E4FCD0) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), v267);
  v274.i32[3] = 0;
  float32x4_t v276 = vaddq_f32(v275, v275);
  v315[0] = (__n128)vmulq_n_f32(v272, v276.f32[0]);
  v315[1] = (__n128)vmulq_lane_f32(v273, *(float32x2_t *)v276.f32, 1);
  v315[2] = (__n128)vmulq_laneq_f32(v274, v276, 2);
  v315[3] = (__n128)v39;
  memset(&v316, 0, 64);
  do
  {
    *(float32x4_t *)((char *)&v316 + v264 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v313, COERCE_FLOAT(*(_OWORD *)&v315[v264])), v312, (float32x2_t)v315[v264].n128_u64[0], 1), v311, (float32x4_t)v315[v264], 2), v310, (float32x4_t)v315[v264], 3);
    ++v264;
  }
  while (v264 != 4);
  float32x2_t v277 = (const void *)sub_1B660F878(a5, v31, v32, v33, v34, v35, v36, v37);
  int8x16_t v285 = (void *)sub_1B660F8C4(a5, v278, v279, v280, v281, v282, v283, v284);
  size_t v293 = sub_1B63CA534(10, v286, v287, v288, v289, v290, v291, v292);
  sub_1B63F4524(v277, v285, &v316, v293, *(char *)(a5 + 34), *(unsigned __int8 *)(a5 + 35), v294, v295);
  return 1;
}

__CFString *sub_1B660AEE4()
{
  return @"transform";
}

double sub_1B660AEF4()
{
  if (qword_1EB995430 != -1) {
    dispatch_once(&qword_1EB995430, &unk_1F0FB6568);
  }
  uint64_t v0 = sub_1B63C8D44(qword_1EB995438, 0xC0uLL);
  *(_DWORD *)(v0 + 72) = 1065353216;
  *(_WORD *)(v0 + 76) = 257;
  *(unsigned char *)(v0 + 144) = 7;
  __asm { FMOV            V1.4S, #1.0 }
  *(_OWORD *)(v0 + 160) = 0u;
  *(_OWORD *)(v0 + 176) = _Q1;
  double result = 0.0;
  *(_OWORD *)(v0 + 192) = xmmword_1B6E4F370;
  *(void *)(v0 + 88) = sub_1B660A134;
  *(void *)(v0 + 96) = sub_1B660AEE4;
  return result;
}

void sub_1B660AF94(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  uint64_t v3 = (const void *)a1[4];
  if (v3)
  {
    CFRelease(v3);
    a1[4] = 0;
  }
  uint64_t v4 = (const void *)a1[3];
  if (v4)
  {
    CFRelease(v4);
    a1[3] = 0;
  }
  uint64_t v5 = (void *)a1[7];

  free(v5);
}

CFStringRef sub_1B660AFF8(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintController>");
}

CFStringRef sub_1B660B02C(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintController>");
}

CFStringRef sub_1B660B060(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXConstraint %@ %p>", a1[8], a1);
}

CFStringRef sub_1B660B0A4(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXConstraint %@ %p>", a1[8], a1);
}

void sub_1B660B0EC(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 136);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 136) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B660B12C(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXConstraintLookAt %p>", a1);
}

CFStringRef sub_1B660B16C(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXConstraintLookAt %p>", a1);
}

void sub_1B660B1B0(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B660B1E0(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXConstraintBillboard %p>", a1);
}

CFStringRef sub_1B660B220(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXConstraintBillboard %p>", a1);
}

void sub_1B660B264(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B660B294(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintConstantScale>");
}

CFStringRef sub_1B660B2C8(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintConstantScale>");
}

void sub_1B660B300(uint64_t a1)
{
  _Block_release(*(const void **)(a1 + 136));
  CFAllocatorRef v2 = *(const void **)(a1 + 144);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 144) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B660B348(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintProcedural>");
}

CFStringRef sub_1B660B37C(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintProcedural>");
}

void sub_1B660B3B4(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 176);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 176) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B660B3F4(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXConstraintIK %p>", a1);
}

CFStringRef sub_1B660B434(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXConstraintIK %p>", a1);
}

void sub_1B660B478(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 136);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 136) = 0;
  }
  uint64_t v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B660B4B8(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintDistance>");
}

CFStringRef sub_1B660B4EC(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintDistance>");
}

double sub_1B660B520(float32x4_t a1, float32x4_t a2)
{
  float32x4_t v2 = vmulq_f32(a1, a2);
  if (vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v2, 2), vaddq_f32(v2, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v2.f32, 1))).f32[0] >= 0.0)
  {
    float32x4_t v33 = vaddq_f32(a1, a2);
    int32x4_t v34 = (int32x4_t)vmulq_f32(v33, v33);
    v34.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v34, 2), vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v34.i8, 1))).u32[0];
    float32x2_t v35 = vrsqrte_f32((float32x2_t)v34.u32[0]);
    float32x2_t v36 = vmul_f32(v35, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v35, v35)));
    float32x4_t v37 = vmulq_n_f32(v33, vmul_f32(v36, vrsqrts_f32((float32x2_t)v34.u32[0], vmul_f32(v36, v36))).f32[0]);
    int32x4_t v38 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v37, (int32x4_t)v37), (int8x16_t)v37, 0xCuLL), vnegq_f32(a1)), v37, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
    unint64_t v32 = vextq_s8((int8x16_t)vuzp1q_s32(v38, v38), (int8x16_t)v38, 0xCuLL).u64[0];
  }
  else
  {
    int32x4_t v3 = (int32x4_t)vmulq_f32(a1, a1);
    v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
    float32x2_t v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
    float32x2_t v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
    v3.i32[0] = vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).u32[0];
    int32x4_t v6 = (int32x4_t)vmulq_f32(a2, a2);
    v6.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v6, 2), vadd_f32(*(float32x2_t *)v6.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v6.i8, 1))).u32[0];
    float32x2_t v7 = vrsqrte_f32((float32x2_t)v6.u32[0]);
    float32x2_t v8 = vmul_f32(v7, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v7, v7)));
    float32x4_t v9 = vaddq_f32(vmulq_n_f32(a1, *(float *)v3.i32), vmulq_n_f32(a2, vmul_f32(v8, vrsqrts_f32((float32x2_t)v6.u32[0], vmul_f32(v8, v8))).f32[0]));
    float32x4_t v10 = vmulq_f32(v9, v9);
    float v11 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0];
    if (v11 <= 1.4211e-14)
    {
      float32x4_t v39 = vabsq_f32(a1);
      float v40 = v39.f32[1];
      float v41 = v39.f32[2];
      if (v39.f32[0] > v39.f32[1] || v39.f32[0] > v39.f32[2])
      {
        float32x4_t v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL);
        if (v40 <= v41)
        {
          float32x4_t v43 = vmulq_f32(a1, (float32x4_t)xmmword_1B6E4F4F0);
          float32x4_t v44 = (float32x4_t)xmmword_1B6E4F320;
        }
        else
        {
          float32x4_t v43 = vmulq_f32(a1, (float32x4_t)xmmword_1B6E4F4C0);
          float32x4_t v44 = (float32x4_t)xmmword_1B6E4F2E0;
        }
      }
      else
      {
        float32x4_t v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL);
        float32x4_t v43 = vmulq_f32(a1, (float32x4_t)xmmword_1B6E4F4D0);
        float32x4_t v44 = (float32x4_t)xmmword_1B6E4F300;
      }
      float32x4_t v45 = vmlaq_f32(v43, v44, v42);
      float32x4_t v46 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), (int8x16_t)v45, 0xCuLL);
      int32x4_t v47 = (int32x4_t)vmulq_f32(v45, v45);
      v47.i32[0] = vadd_f32((float32x2_t)vdup_lane_s32(*(int32x2_t *)v47.i8, 1), vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v47, 2), *(float32x2_t *)v47.i8)).u32[0];
      float32x2_t v48 = vrsqrte_f32((float32x2_t)v47.u32[0]);
      float32x2_t v49 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v48, v48)));
      unint64_t v32 = vmulq_n_f32(v46, vmul_f32(v49, vrsqrts_f32((float32x2_t)v47.u32[0], vmul_f32(v49, v49))).f32[0]).u64[0];
    }
    else
    {
      float v12 = v11;
      float32x2_t v13 = vrsqrte_f32((float32x2_t)LODWORD(v11));
      float32x2_t v14 = vmul_f32(v13, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v13, v13)));
      float32x4_t v15 = vmulq_n_f32(v9, vmul_f32(v14, vrsqrts_f32((float32x2_t)LODWORD(v12), vmul_f32(v14, v14))).f32[0]);
      float32x4_t v16 = vaddq_f32(a1, v15);
      int32x4_t v17 = (int32x4_t)vmulq_f32(v16, v16);
      v17.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v17, 2), vadd_f32(*(float32x2_t *)v17.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.i8, 1))).u32[0];
      float32x2_t v18 = vrsqrte_f32((float32x2_t)v17.u32[0]);
      float32x2_t v19 = vmul_f32(v18, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v18, v18)));
      float32x4_t v20 = vmulq_n_f32(v16, vmul_f32(v19, vrsqrts_f32((float32x2_t)v17.u32[0], vmul_f32(v19, v19))).f32[0]);
      float32x4_t v21 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v20, (int32x4_t)v20), (int8x16_t)v20, 0xCuLL), vnegq_f32(a1)), v20, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)a1, (int32x4_t)a1), (int8x16_t)a1, 0xCuLL));
      float32x4_t v22 = vmulq_f32(v20, a1);
      float32x4_t v23 = vaddq_f32(a2, v15);
      int32x4_t v24 = (int32x4_t)vmulq_f32(v23, v23);
      v24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v24, 2), vadd_f32(*(float32x2_t *)v24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v24.i8, 1))).u32[0];
      *(float32x2_t *)v20.f32 = vrsqrte_f32((float32x2_t)v24.u32[0]);
      *(float32x2_t *)v20.f32 = vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32)));
      float32x4_t v25 = vmulq_n_f32(v23, vmul_f32(*(float32x2_t *)v20.f32, vrsqrts_f32((float32x2_t)v24.u32[0], vmul_f32(*(float32x2_t *)v20.f32, *(float32x2_t *)v20.f32))).f32[0]);
      int32x4_t v26 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v25, (int32x4_t)v25), (int8x16_t)v25, 0xCuLL), vnegq_f32(v15)), v25, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v15, (int32x4_t)v15), (int8x16_t)v15, 0xCuLL));
      float32x4_t v27 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v26, v26), (int8x16_t)v26, 0xCuLL);
      float32x4_t v28 = vmulq_f32(v15, v25);
      v27.i32[3] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).u32[0];
      int32x4_t v29 = (int32x4_t)vnegq_f32(v27);
      int8x16_t v30 = (int8x16_t)vtrn2q_s32((int32x4_t)v27, vtrn1q_s32((int32x4_t)v27, v29));
      float32x4_t v31 = (float32x4_t)vrev64q_s32((int32x4_t)v27);
      v31.i32[0] = v29.i32[1];
      v31.i32[3] = v29.i32[2];
      unint64_t v32 = vaddq_f32(vmlaq_lane_f32(vmulq_n_f32(v27, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v22, 2), vaddq_f32(v22, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v22.f32, 1))).f32[0]), v31, *(float32x2_t *)v21.f32, 1), vmlaq_laneq_f32(vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)v27, (int8x16_t)v29, 8uLL), v21.f32[0]), (float32x4_t)vextq_s8(v30, v30, 8uLL), v21, 2)).u64[0];
    }
  }
  return *(double *)&v32;
}

void sub_1B660B860(uint64_t a1)
{
  float32x4_t v2 = *(const void **)(a1 + 64);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B660B890(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintAcceleration>");
}

CFStringRef sub_1B660B8C4(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintAcceleration>");
}

void sub_1B660B8FC(uint64_t a1)
{
  float32x4_t v2 = *(const void **)(a1 + 136);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 136) = 0;
  }
  int32x4_t v3 = *(const void **)(a1 + 64);
  if (v3)
  {
    CFRelease(v3);
    *(void *)(a1 + 64) = 0;
  }
}

CFStringRef sub_1B660B93C(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintReplicator>");
}

CFStringRef sub_1B660B970(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintReplicator>");
}

uint64_t sub_1B660B9A4(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B660B9D4(uint64_t a1)
{
  if (qword_1E9DDBE98 != -1) {
    dispatch_once_f(&qword_1E9DDBE98, &qword_1E9DDBE90, (dispatch_function_t)sub_1B660B9A4);
  }
  uint64_t result = sub_1B63C8D44(qword_1E9DDBE90, 0x18uLL);
  *(void *)(result + 24) = a1;
  return result;
}

void sub_1B660BA40(uint64_t a1, const __CFArray *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x2_t v8 = (const char *)a4;
  uint64_t v11 = a1;
  if (a1)
  {
    if (a4) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
    if (v8)
    {
LABEL_3:
      if (v11) {
        goto LABEL_5;
      }
      goto LABEL_4;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"key");
  if (!v11) {
LABEL_4:
  }
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", (uint64_t)a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
LABEL_5:
  float v12 = *(VFXOrderedDictionary **)(v11 + 16);
  if (!v12)
  {
    float v12 = sub_1B64FD428();
    *(void *)(v11 + 16) = v12;
  }
  uint64_t v13 = sub_1B64FD404(v12, v8, (uint64_t)a3, a4);
  uint64_t v284 = v11;
  CFArrayRef v285 = a2;
  uint64_t v278 = v8;
  if (v13)
  {
    CFArrayRef v20 = (const __CFArray *)v13;
    double v23 = sub_1B65C3764();
    if (v23 > 0.0)
    {
      double v24 = v23;
      uint64_t Count = CFArrayGetCount(v20);
      uint64_t v277 = sub_1B64B2770(*(void *)(v11 + 24), v26, v27, v28, v29, v30, v31, v32);
      CFMutableStringRef Mutable = CFSetCreateMutable(0, Count, 0);
      uint64_t v286 = Count;
      if (Count >= 1)
      {
        CFIndex v34 = 0;
        float v35 = v24;
        CFArrayRef v276 = v20;
        do
        {
          CFDataRef ValueAtIndex = CFArrayGetValueAtIndex(v20, v34);
          float32x4_t v37 = (const void *)*((void *)ValueAtIndex + 4);
          float32x4_t v45 = (float32x4_t *)sub_1B660F8C4((uint64_t)v37, v38, v39, v40, v41, v42, v43, v44);
          if (!CFSetContainsValue(Mutable, v45))
          {
            if (sub_1B660FA40((uint64_t)v37, v46, v47, v48, v49, v50, v51, v52) == 10)
            {
              CFSetAddValue(Mutable, v45);
              uint64_t v67 = sub_1B64B2008(*(void *)(v284 + 24), v60, v61, v62, v63, v64, v65, v66);
              long long v289 = 0u;
              long long v290 = 0u;
              long long cf = 0u;
              long long v288 = 0u;
              float32x4_t v281 = v45[1];
              float32x4_t v282 = *v45;
              float32x4_t v279 = v45[3];
              float32x4_t v280 = v45[2];
              sub_1B6610004(v277, *((void *)ValueAtIndex + 5), v68, v69, v70, v71, v72, v73);
              uint64_t v283 = v67;
              sub_1B6423070(v67, (uint64_t)v37, v74, v75, v76, v77, v78, v79);
              simd_float4x4 v296 = __invert_f4(*(simd_float4x4 *)v45->f32);
              uint64_t v86 = 0;
              simd_float4x4 v291 = v296;
              long long v292 = 0u;
              long long v293 = 0u;
              long long v294 = 0u;
              long long v295 = 0u;
              do
              {
                *(long long *)((char *)&v292 + v86 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v282, COERCE_FLOAT(*(_OWORD *)&v291.columns[v86])), v281, *(float32x2_t *)v291.columns[v86].f32, 1), v280, (float32x4_t)v291.columns[v86], 2), v279, (float32x4_t)v291.columns[v86], 3);
                ++v86;
              }
              while (v86 != 4);
              long long cf = v292;
              long long v288 = v293;
              long long v289 = v294;
              long long v290 = v295;
              int32x4_t v87 = (const void *)sub_1B65623D0(10, 1, v80, v81, v82, v83, v84, v85);
              float32x4_t v94 = (const void *)sub_1B65623D0(10, 1, v88, v89, v90, v91, v92, v93);
              sub_1B656264C((uint64_t)v87, &cf, v95, v96, v97, v98, v99, v100);
              sub_1B656264C((uint64_t)v94, MEMORY[0x1E4F149A0], v101, v102, v103, v104, v105, v106);
              int8x16_t v107 = (const void *)sub_1B6494178();
              sub_1B6493080((uint64_t)v107, 1, v108, v109, v110, v111, v112, v113);
              sub_1B6493240((uint64_t)v107, 1, v114, v115, v116, v117, v118, v119);
              sub_1B6492D2C((uint64_t)v107, v35, v120, v121, v122, v123, v124, v125, v126);
              sub_1B65C3720();
              sub_1B6492FB8((uint64_t)v107, v127, v128, v129, v130, v131, v132, v133);
              sub_1B6494414((uint64_t)v107, (uint64_t)v87, v134, v135, v136, v137, v138, v139);
              sub_1B6494324((uint64_t)v107, (uint64_t)v94, v140, v141, v142, v143, v144, v145);
              CFRelease(v87);
              CFRelease(v94);
              sub_1B6423958(v283, v107, v37, *((void **)ValueAtIndex + 3), @"__controller", v146, v147, v148);
              CFRelease(v107);
              a2 = v285;
              CFArrayRef v20 = v276;
            }
            else
            {
              int v149 = sub_1B660FA40((uint64_t)v37, v53, v54, v55, v56, v57, v58, v59);
              sub_1B63F2F54(0, @"Warning: unsupported ease out for contraint applied on base type %d", v150, v151, v152, v153, v154, v155, v149);
            }
          }
          ++v34;
        }
        while (v34 != v286);
      }
      CFRelease(Mutable);
      float32x2_t v8 = v278;
      uint64_t v11 = v284;
    }
    CFArrayRef v156 = (const __CFArray *)sub_1B64FD404(*(void **)(v11 + 16), v8, v21, v22);
    if (v156)
    {
      CFArrayRef v157 = v156;
      CFIndex v158 = CFArrayGetCount(v156);
      uint64_t v166 = sub_1B64B2770(*(void *)(v11 + 24), v159, v160, v161, v162, v163, v164, v165);
      if (v158 >= 1)
      {
        uint64_t v169 = v166;
        for (CFIndex i = 0; i != v158; ++i)
        {
          int8x16_t v171 = CFArrayGetValueAtIndex(v157, i);
          sub_1B6610004(v169, v171[5], v172, v173, v174, v175, v176, v177);
          sub_1B66100EC(v169, v171[5], v178, v179, v180, v181, v182, v183);
        }
      }
      sub_1B64FD414(*(void **)(v11 + 16), v8, v167, v168);
      a2 = v285;
    }
  }
  if (a2)
  {
    if (!a3) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v14, v15, v16, v17, v18, v19, (uint64_t)"target");
    }
    uint64_t v184 = CFArrayGetCount(a2);
    float32x2_t v185 = CFArrayCreateMutable(0, v184, MEMORY[0x1E4F1D510]);
    uint64_t v193 = sub_1B64B2770(*(void *)(v11 + 24), v186, v187, v188, v189, v190, v191, v192);
    if (v184 >= 1)
    {
      uint64_t v194 = v193;
      for (CFIndex j = 0; j != v184; ++j)
      {
        int8x16_t v196 = CFArrayGetValueAtIndex(a2, j);
        CFStringRef v210 = (const __CFString *)sub_1B660536C((uint64_t)v196, v197, v198, v199, v200, v201, v202, v203);
        if (!v210) {
          sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v204, v205, v206, v207, v208, v209, (uint64_t)"path");
        }
        CFStringRef v211 = sub_1B660CA68(a3, v210, 0);
        float v212 = sub_1B6605500(v196, a3, v211);
        v212[5] = sub_1B660FCB0(v194, v211, v213, v214, v215, v216, v217, v218);
        CFArrayAppendValue(v185, v212);
        CFRelease(v212);
        CFRelease(v211);
        if (+[VFXTransaction disableActions]_0() || (double v226 = sub_1B65C3764(), v226 <= 0.0))
        {
          *((_DWORD *)v212 + 12) = 1065353216;
        }
        else
        {
          double v227 = v226;
          uint64_t v228 = sub_1B64B2008(*(void *)(v11 + 24), v219, v220, v221, v222, v223, v224, v225);
          LODWORD(v292) = 1065353216;
          float v235 = (const void *)sub_1B65623D0(1, 1, v229, v230, v231, v232, v233, v234);
          sub_1B656264C((uint64_t)v235, &v292, v236, v237, v238, v239, v240, v241);
          float32x4_t v242 = (_WORD *)sub_1B6494178();
          sub_1B64935F8(v242, 1, v243, v244, v245, v246, v247, v248);
          float v249 = v227;
          sub_1B6492D2C((uint64_t)v242, v249, v250, v251, v252, v253, v254, v255, v256);
          sub_1B65C3720();
          sub_1B6492FB8((uint64_t)v242, v257, v258, v259, v260, v261, v262, v263);
          sub_1B6494324((uint64_t)v242, (uint64_t)v235, v264, v265, v266, v267, v268, v269);
          CFRelease(v235);
          float v270 = (const void *)sub_1B660F6B0(v212, (uint64_t)(v212 + 6), 1, 0);
          sub_1B6423958(v228, v242, v270, v212, @"__controller", v271, v272, v273);
          float32x4_t v274 = v242;
          uint64_t v11 = v284;
          CFRelease(v274);
          float32x4_t v275 = v270;
          a2 = v285;
          CFRelease(v275);
        }
      }
    }
    sub_1B64FD40C(*(void **)(v11 + 16), v278, (uint64_t)v185);
    CFRelease(v185);
  }
}

BOOL sub_1B660BFF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  }
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9) {
    sub_1B64FD41C(*(void *)(a1 + 16), (uint64_t)sub_1B660C068, a1);
  }
  return v9 != 0;
}

void sub_1B660C068(uint64_t a1, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = *(void *)(a3 + 32);
  uint64_t v10 = sub_1B64B2770(*(void *)(a3 + 24), (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  CFIndex Count = CFArrayGetCount(a2);
  if (Count >= 1)
  {
    CFIndex v12 = Count;
    CFIndex v13 = 0;
    while (1)
    {
      CFDataRef ValueAtIndex = (float *)CFArrayGetValueAtIndex(a2, v13);
      uint64_t v15 = *((void *)ValueAtIndex + 2);
      if (!*(unsigned char *)(v15 + 76)) {
        goto LABEL_14;
      }
      float v16 = ValueAtIndex[12] * *(float *)(v15 + 72);
      if (v16 <= 0.0) {
        goto LABEL_14;
      }
      int v24 = sub_1B66054B0(v15);
      if (v24) {
        break;
      }
      if (!sub_1B64A4838(*((void *)ValueAtIndex + 3), v17, v18, v19, v20, v21, v22, v23)
        || !sub_1B6545280(*((void *)ValueAtIndex + 3), v30, v31, v32))
      {
        sub_1B66104F8(v10, *((void *)ValueAtIndex + 5), v31, v32, v33, v34, v35, v36);
LABEL_12:
        v29.n128_f32[0] = v16;
        if ((v24 & sub_1B66052B0(v9, (uint64_t)ValueAtIndex, *((void *)ValueAtIndex + 3), *((void *)ValueAtIndex + 4), v25, v26, v27, v28, v29)) == 1)sub_1B660FE2C(v10, *((void *)ValueAtIndex + 5), v38, v39, v40, v41, v42, v43); {
        goto LABEL_14;
        }
      }
      if ((sub_1B6545248(*((void *)ValueAtIndex + 3), v37, v31, v32) & 1) == 0) {
        break;
      }
LABEL_14:
      if (v12 == ++v13) {
        return;
      }
    }
    sub_1B6610414(v10, *((void *)ValueAtIndex + 5));
    goto LABEL_12;
  }
}

CFIndex sub_1B660C184(int a1, CFArrayRef theArray)
{
  CFIndex result = CFArrayGetCount(theArray);
  if (result >= 1)
  {
    CFIndex v4 = result;
    for (CFIndex i = 0; i != v4; ++i)
    {
      CFIndex result = *((void *)CFArrayGetValueAtIndex(theArray, i) + 2);
      if (*(unsigned char *)(result + 76))
      {
        if (*(float *)(result + 72) > 0.0) {
          CFIndex result = sub_1B66054C0(result);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B660C200(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"manager");
  }
  uint64_t result = *(void *)(a1 + 16);
  if (result)
  {
    v11[0] = a2;
    v11[1] = a1;
    return sub_1B64FD41C(result, (uint64_t)sub_1B660C184, (uint64_t)v11);
  }
  return result;
}

void sub_1B660C274(uint64_t a1)
{
  float32x4_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

CFStringRef sub_1B660C2A4(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintManagerRef>");
}

CFStringRef sub_1B660C2D8(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXConstraintManagerRef>");
}

uint64_t sub_1B660C30C(char *cf, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a6;
  int v10 = a4;
  int v11 = a3;
  sub_1B660F764(a5, cf, a3, a4, a5, a6, a7, a8);
  if (v11 >= v10)
  {
    *(void *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
    return 1;
  }
  else
  {
    CFDataRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, v11);
    unsigned int v22 = sub_1B660C490(ValueAtIndex) - 67;
    uint64_t result = 0;
    switch(v22)
    {
      case 0u:
      case 1u:
        uint64_t v24 = sub_1B6476F6C((uint64_t)cf, v15, v16, v17, v18, v19, v20, v21);
        sub_1B660C4E8(v24, a2, v11 + 1, v10, a5);
        return 1;
      case 2u:
        return result;
      case 4u:
        uint64_t v25 = sub_1B647721C((uint64_t)cf, v15, v16, v17, v18, v19, v20, v21);
        if (!v25)
        {
          v39[0] = (float32x4_t)xmmword_1B6E4F300;
          v39[1] = (float32x4_t)xmmword_1B6E4F320;
          v39[2] = (float32x4_t)xmmword_1B6E4F2E0;
          v39[3] = (float32x4_t)xmmword_1B6E4F370;
          sub_1B6477278((uint64_t)cf, v39, v26, v27, v28, v29, v30, v31);
          uint64_t v25 = sub_1B647721C((uint64_t)cf, v32, v33, v34, v35, v36, v37, v38);
        }
        sub_1B660C5D8(v25, a2, v11 + 1, v10, a5);
        return 1;
      case 5u:
        *(void *)(a5 + 24) = cf + 80;
        uint64_t result = 1;
        *(_WORD *)(a5 + 32) = 1;
        break;
      default:
        if (v8) {
          sub_1B63F2F54(16, @"Error: CFXModelPathResolveCommonProfileProperty unknown path %@", v16, v17, v18, v19, v20, v21, (uint64_t)ValueAtIndex);
        }
        uint64_t result = 0;
        break;
    }
  }
  return result;
}

const void *sub_1B660C490(void *key)
{
  if (qword_1E9DDBEB8 != -1) {
    dispatch_once(&qword_1E9DDBEB8, &unk_1F0FB6588);
  }
  return CFDictionaryGetValue((CFDictionaryRef)qword_1E9DDBEB0, key);
}

void sub_1B660C4E8(uint64_t a1, CFArrayRef theArray, int a3, int a4, uint64_t a5)
{
  if (a3 >= a4)
  {
    *(void *)(a5 + 24) = a1;
    *(_WORD *)(a5 + 32) = 12;
  }
  else
  {
    CFDataRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
    unsigned int v8 = sub_1B660C490(ValueAtIndex);
    *(_WORD *)(a5 + 32) = 1;
    switch(v8)
    {
      case 0xEu:
      case 0x12u:
        *(void *)(a5 + 24) = a1;
        return;
      case 0xFu:
      case 0x13u:
        uint64_t v15 = a1 + 4;
        goto LABEL_8;
      case 0x10u:
      case 0x14u:
        uint64_t v15 = a1 + 8;
        goto LABEL_8;
      case 0x11u:
      case 0x15u:
        uint64_t v15 = a1 + 12;
LABEL_8:
        *(void *)(a5 + 24) = v15;
        break;
      default:
        sub_1B63F2F54(16, @"Error: _CFXModelPathResolveColor4 unknown path %@", v9, v10, v11, v12, v13, v14, (uint64_t)ValueAtIndex);
        break;
    }
  }
}

void sub_1B660C5D8(uint64_t a1, CFArrayRef theArray, int a3, int a4, uint64_t a5)
{
  if (a3 >= a4)
  {
    *(void *)(a5 + 24) = a1;
    *(_WORD *)(a5 + 32) = 10;
  }
  else
  {
    CFDataRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
    unsigned int v8 = sub_1B660C490(ValueAtIndex);
    *(_WORD *)(a5 + 32) = 1;
    signed int v15 = v8 - 22;
    if (v8 - 22 >= 0x10)
    {
      sub_1B63F2F54(16, @"Error: _CFXModelPathResolveMatrix unknown path %@", v9, v10, v11, v12, v13, v14, (uint64_t)ValueAtIndex);
    }
    else
    {
      char v16 = byte_1B6E72C80[v15];
      uint64_t v17 = qword_1B6E72C90[v15];
      *(unsigned char *)(a5 + 35) = v16;
      *(void *)(a5 + 24) = a1 + 4 * v17;
    }
  }
}

uint64_t sub_1B660C68C(const __CFArray *a1, const void *a2, unsigned char *a3)
{
  if (a1
    && CFArrayGetCount(a1) >= 2
    && (CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, 0),
        CFIndex Length = CFStringGetLength(ValueAtIndex),
        Length >= 2)
    && (CFIndex v8 = Length, CFStringGetCharacterAtIndex(ValueAtIndex, 0) == 47))
  {
    if (a3) {
      *a3 = 1;
    }
    v12.length = v8 - 1;
    v12.location = 1;
    CFStringRef v9 = CFStringCreateWithSubstring(0, ValueAtIndex, v12);
    uint64_t v10 = sub_1B63F4FC8(a2, (uint64_t)v9);
    CFRelease(v9);
    return v10;
  }
  else
  {
    if (a3) {
      *a3 = 0;
    }
    return 0;
  }
}

void sub_1B660C750(uint64_t a1, CFArrayRef theArray, int a3, int a4, uint64_t a5, int a6)
{
  *(unsigned char *)(a5 + 34) = 8;
  *(unsigned char *)(a5 + 37) = 1;
  if (a3 >= a4)
  {
    *(void *)(a5 + 24) = a1;
    *(_WORD *)(a5 + 32) = 10;
  }
  else
  {
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
    unsigned int v13 = sub_1B660C490(ValueAtIndex);
    if (v13 - 22 >= 0x10)
    {
      switch(v13)
      {
        case 5u:
          int v22 = a3 + 1;
          uint64_t v20 = a1;
          CFArrayRef v21 = theArray;
          goto LABEL_4;
        case 6u:
          int v26 = 0;
          uint64_t v25 = 0;
          sub_1B660CE08((uint64_t)&v25, theArray, a3 + 1, a4, a5);
          *(unsigned char *)(a5 + 34) = 6;
          goto LABEL_5;
        case 7u:
          int v24 = a3 + 1;
          CFArrayRef v23 = theArray;
          goto LABEL_13;
        case 8u:
          *(unsigned char *)(a5 + 34) = 7;
          *(_WORD *)(a5 + 32) = 8;
          *(unsigned char *)(a5 + 35) = sub_1B660EFAC(theArray, a3 + 1, a4, a5);
          goto LABEL_5;
        case 0xCu:
        case 0xDu:
          CFArrayRef v23 = theArray;
          int v24 = a3;
LABEL_13:
          sub_1B660EE1C(v23, v24, a4, a5);
          goto LABEL_5;
        default:
          if (a6) {
            sub_1B63F2F54(16, @"Error: _CFXModelPathResolveTransform unknown path %@", v14, v15, v16, v17, v18, v19, (uint64_t)ValueAtIndex);
          }
          return;
      }
    }
    uint64_t v20 = a1;
    CFArrayRef v21 = theArray;
    int v22 = a3;
LABEL_4:
    sub_1B660C5D8(v20, v21, v22, a4, a5);
LABEL_5:
    *(void *)(a5 + 24) = a1;
  }
}

uint64_t sub_1B660C900(void *a1, const __CFArray *a2, uint64_t a3)
{
  if (!a1) {
    return 0;
  }
  float32x2_t v5 = a1;
  char v19 = 0;
  uint64_t v6 = sub_1B660F6B0(0, 0, 0, 0);
  uint64_t v7 = sub_1B660C68C(a2, v5, &v19);
  if (v7) {
    float32x2_t v5 = (void *)v7;
  }
  CFIndex Count = CFArrayGetCount(a2);
  uint64_t v9 = Count;
  if (v19)
  {
    uint64_t v9 = Count - 1;
    a2 = (const __CFArray *)sub_1B63CC8C4(a2, (const char *)1, Count - 1);
  }
  uint64_t v10 = (void *)CFGetTypeID(v5);
  sub_1B660CECC(v5, v10, a2, 0, v9, v6, a3);
  if (*(void *)(v6 + 24)) {
    *(unsigned char *)(v6 + 36) = sub_1B63CA534(*(__int16 *)(v6 + 32), v11, v12, v13, v14, v15, v16, v17);
  }
  return v6;
}

const void *sub_1B660C9EC(const void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    uint64_t v11 = result;
    CFTypeID v12 = CFGetTypeID(result);
    return (const void *)sub_1B660CECC(v11, v12, a2, a3, a4, a5, a6);
  }
  return result;
}

CFStringRef sub_1B660CA68(void *a1, CFStringRef theString, uint64_t a3)
{
  CFStringRef result = sub_1B63CC80C(theString);
  if (result)
  {
    CFStringRef v6 = result;
    uint64_t v7 = sub_1B660C900(a1, (const __CFArray *)result, a3);
    CFRelease(v6);
    return (const __CFString *)v7;
  }
  return result;
}

uint64_t sub_1B660CAC4(const void *a1, const __CFString *a2, uint64_t a3, uint64_t a4)
{
  if (!a1) {
    return 0;
  }
  uint64_t v8 = sub_1B660F6B0(0, 0, 0, 0);
  CFTypeID v9 = CFGetTypeID(a1);
  sub_1B660E058((uint64_t)a1, v9, a2, a3, v8, a4);
  if (*(void *)(v8 + 24)) {
    *(unsigned char *)(v8 + 36) = sub_1B63CA534(*(__int16 *)(v8 + 32), v10, v11, v12, v13, v14, v15, v16);
  }
  return v8;
}

uint64_t sub_1B660CB60(const void *a1, const __CFString *a2, void *a3, uint64_t a4)
{
  if (!a1) {
    return 0;
  }
  uint64_t v8 = sub_1B660F6B0(0, 0, 0, 0);
  CFTypeID v9 = CFGetTypeID(a1);
  sub_1B660E1DC((uint64_t)a1, v9, a2, a3, v8, a4);
  if (*(void *)(v8 + 24)) {
    *(unsigned char *)(v8 + 36) = sub_1B63CA534(*(__int16 *)(v8 + 32), v10, v11, v12, v13, v14, v15, v16);
  }
  return v8;
}

const void *sub_1B660CBFC(void *key)
{
  CFDictionaryRef Mutable = (const __CFDictionary *)qword_1EB995F60;
  if (!qword_1EB995F60)
  {
    CFDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, 0, MEMORY[0x1E4F1D540]);
    qword_1EB995F60 = (uint64_t)Mutable;
  }
  CFStringRef Value = CFDictionaryGetValue(Mutable, key);
  if (!Value)
  {
    CFStringRef Value = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 0, MEMORY[0x1E4F1D530], 0);
    CFDictionarySetValue((CFMutableDictionaryRef)qword_1EB995F60, key, Value);
  }
  return Value;
}

uint64_t sub_1B660CC9C(CFArrayRef theArray, int a2, int a3, uint64_t a4)
{
  uint64_t result = 0;
  switch(*(_WORD *)(a4 + 32))
  {
    case 8:
      sub_1B660CE08(*(void *)(a4 + 24), theArray, a2, a3, a4);
      goto LABEL_14;
    case 9:
      if (a2 >= a3)
      {
        *(_WORD *)(a4 + 32) = 9;
      }
      else
      {
        uint64_t v7 = *(void *)(a4 + 24);
        CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a2);
        unsigned int v9 = sub_1B660C490(ValueAtIndex);
        *(_WORD *)(a4 + 32) = 1;
        switch(v9)
        {
          case 0xEu:
            *(void *)(a4 + 24) = v7;
            goto LABEL_14;
          case 0xFu:
            uint64_t v16 = v7 + 4;
            goto LABEL_13;
          case 0x10u:
            uint64_t v16 = v7 + 8;
            goto LABEL_13;
          case 0x11u:
            uint64_t v16 = v7 + 12;
LABEL_13:
            *(void *)(a4 + 24) = v16;
            break;
          default:
            sub_1B63F2F54(16, @"Error: _CFXModelPathResolveVector4 unknown path %@", v10, v11, v12, v13, v14, v15, (uint64_t)ValueAtIndex);
            break;
        }
      }
      goto LABEL_14;
    case 0xA:
      sub_1B660C5D8(*(void *)(a4 + 24), theArray, a2, a3, a4);
      goto LABEL_14;
    case 0xC:
      sub_1B660C4E8(*(void *)(a4 + 24), theArray, a2, a3, a4);
LABEL_14:
      uint64_t result = 1;
      break;
    default:
      return result;
  }
  return result;
}

void sub_1B660CE08(uint64_t a1, CFArrayRef theArray, int a3, int a4, uint64_t a5)
{
  if (a3 >= a4)
  {
    *(void *)(a5 + 24) = a1;
    *(_WORD *)(a5 + 32) = 8;
    return;
  }
  CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
  unsigned int v8 = sub_1B660C490(ValueAtIndex);
  *(_WORD *)(a5 + 32) = 1;
  switch(v8)
  {
    case 0xEu:
      *(void *)(a5 + 24) = a1;
      return;
    case 0xFu:
      *(void *)(a5 + 24) = a1 + 4;
      char v15 = 1;
      goto LABEL_9;
    case 0x10u:
      *(void *)(a5 + 24) = a1 + 8;
      char v15 = 2;
LABEL_9:
      *(unsigned char *)(a5 + 35) = v15;
      return;
  }
  sub_1B63F2F54(16, @"Error: _CFXModelPathResolveVector3 unknown path %@", v9, v10, v11, v12, v13, v14, (uint64_t)ValueAtIndex);
}

uint64_t sub_1B660CECC(void *a1, void *a2, const __CFArray *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if ((void *)sub_1B65833C8() == a2)
  {
    if (sub_1B660D398(a1, a3, a4, a5, a6)) {
      return 1;
    }
  }
  else if ((void *)sub_1B64A06D4() == a2)
  {
    if (sub_1B660D544(a1, a3, a4, a5, a6, a7)) {
      return 1;
    }
  }
  else if ((void *)sub_1B64AEBD0() == a2)
  {
    if (sub_1B660D8B4((uint64_t)a1, a3, a4, a5, a6, a7)) {
      return 1;
    }
  }
  else
  {
    if ((void *)sub_1B6494820() == a2)
    {
      if (a1)
      {
        if ((sub_1B660D398(a1, a3, a4, a5, a6) & 1) == 0)
        {
          sub_1B660F764(a6, a1, v14, v15, v16, v17, v18, v19);
          if ((int)a4 < (int)a5)
          {
            CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a3, (int)a4);
            switch(sub_1B660C490(ValueAtIndex))
            {
              case 'L':
                uint64_t v27 = 1;
                uint64_t v28 = (char *)sub_1B6494EB8((uint64_t)a1, 1, v21, v22, v23, v24, v25, v26);
                goto LABEL_57;
              case 'M':
                uint64_t v27 = 1;
                uint64_t v28 = (char *)sub_1B6494F20((uint64_t)a1, 1, v21, v22, v23, v24, v25, v26);
LABEL_57:
                sub_1B660C30C(v28, a3, (a4 + 1), a5, a6, a7, v29, v30);
                return v27;
              case 'O':
                uint64_t v27 = 1;
                *(_WORD *)(a6 + 32) = 1;
                uint64_t v61 = (void *)((char *)a1 + 84);
                goto LABEL_62;
              case 'P':
                uint64_t v27 = 1;
                *(_WORD *)(a6 + 32) = 1;
                uint64_t v61 = (void *)((char *)a1 + 308);
                goto LABEL_62;
              case 'Q':
                uint64_t v27 = 1;
                *(_WORD *)(a6 + 32) = 1;
                uint64_t v61 = a1 + 38;
                goto LABEL_62;
              case 'R':
                uint64_t v27 = 1;
                *(_WORD *)(a6 + 32) = 1;
                uint64_t v61 = a1 + 39;
LABEL_62:
                *(void *)(a6 + 24) = v61;
                break;
              default:
                goto LABEL_21;
            }
            return v27;
          }
          *(void *)(a6 + 24) = 0;
          *(_WORD *)(a6 + 32) = 0;
        }
        return 1;
      }
      goto LABEL_21;
    }
    if ((void *)sub_1B6588A68() == a2)
    {
      uint64_t v31 = sub_1B63CD09C((uint64_t)a1);
    }
    else
    {
      if ((void *)sub_1B6586A68() != a2)
      {
        if ((void *)sub_1B63CD970() == a2)
        {
          if (sub_1B660DB84(a1, a3, a4, a5, a6, a7, v54, v55)) {
            return 1;
          }
        }
        else if ((void *)sub_1B65362E4() == a2)
        {
          if (sub_1B660DCE0(a1, a3, a4, a5, a6, v56, v57, v58)) {
            return 1;
          }
        }
        else if ((void *)sub_1B64B19F4() == a2)
        {
          if (sub_1B660DD94(a1, a3, a4, a5, a6, a7, v59, v60)) {
            return 1;
          }
        }
        else if ((void *)sub_1B6514638() == a2)
        {
          if (sub_1B660DE6C(a1, a3, a4, a5, a6)) {
            return 1;
          }
        }
        else if (void *)sub_1B653569C() == a2 && (sub_1B660DEE8((uint64_t)a1, a3, a4, a5, a6))
        {
          return 1;
        }
        goto LABEL_21;
      }
      uint64_t v31 = (uint64_t)a1;
    }
    if (sub_1B660D9A8(v31, a3, a4, a5, a6, a7)) {
      return 1;
    }
  }
LABEL_21:
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1E9DDBEA0);
  CFDictionaryRef v32 = (const __CFDictionary *)sub_1B660CBFC(a2);
  if ((int)a4 >= (int)a5 || (CFDictionaryRef v33 = v32) == 0)
  {
    os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E9DDBEA0);
LABEL_31:
    uint64_t v27 = 0;
    if (!a7 || a4 + 1 != a5) {
      return v27;
    }
    sub_1B63F2F54(16, @"Error: _CFXModelPathResolverRegistryResolvePathWithClassName unknown path %@", v47, v48, v49, v50, v51, v52, (uint64_t)a3);
    return 0;
  }
  uint64_t v34 = CFArrayGetValueAtIndex(a3, (int)a4);
  CFStringRef Value = CFDictionaryGetValue(v33, v34);
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E9DDBEA0);
  if (!Value)
  {
    uint64_t v53 = CFDictionaryGetValue(v33, @"superClass");
    if (v53 && (sub_1B660CECC(a1, v53, a3, a4, a5, a6, a7) & 1) != 0) {
      return 1;
    }
    goto LABEL_31;
  }
  sub_1B660F764(a6, a1, v36, v37, v38, v39, v40, v41);
  int v42 = *((unsigned __int16 *)Value + 4);
  *(_WORD *)(a6 + 32) = v42;
  *(unsigned char *)(a6 + 34) = Value[10];
  uint64_t v43 = (const void **)((char *)a1 + *(void *)Value);
  *(void *)(a6 + 24) = v43;
  *(_OWORD *)(a6 + 40) = *((_OWORD *)Value + 1);
  uint64_t v44 = (a4 + 1);
  if ((int)v44 >= (int)a5) {
    return 1;
  }
  if (v42 == 5)
  {
    if (a1)
    {
      float32x4_t v45 = *v43;
      return (uint64_t)sub_1B660C9EC(v45, (uint64_t)a3, v44, a5, a6, a7);
    }
    return 0;
  }

  return sub_1B660CC9C(a3, (int)a4 + 1, a5, a6);
}

uint64_t sub_1B660D398(void *a1, CFArrayRef theArray, int a3, int a4, uint64_t a5)
{
  if (a3 >= a4) {
    return 0;
  }
  CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
  unsigned int v11 = sub_1B660C490(ValueAtIndex);
  if (v11 == 89)
  {
    if (a3 + 1 < a4)
    {
      uint64_t v50 = CFArrayGetValueAtIndex(theArray, a3 + 1);
      uint64_t result = sub_1B63F4F54(a1, v51, v52, v53, v54, v55, v56, v57);
      if (result)
      {
        uint64_t v65 = sub_1B64B2008(result, v58, v59, v60, v61, v62, v63, v64);
        uint64_t result = (uint64_t)sub_1B6424084(v65, a1, v50, v66, v67, v68, v69, v70);
        if (result)
        {
          *(void *)(a5 + 24) = result + 52;
          sub_1B660F764(a5, (CFTypeRef)result, v71, v72, v73, v74, v75, v76);
          uint64_t result = 1;
          *(_WORD *)(a5 + 32) = 1;
          *(unsigned char *)(a5 + 34) = 0;
        }
      }
      return result;
    }
    return 0;
  }
  if (v11 == 88)
  {
    if (a3 + 1 < a4)
    {
      uint64_t v19 = CFArrayGetValueAtIndex(theArray, a3 + 1);
      uint64_t v26 = sub_1B6584D68((uint64_t)a1, v19, v20, v21, v22, v23, v24, v25);
      if (v26)
      {
        CFDictionaryRef v33 = v26;
        CFTypeID v34 = CFGetTypeID(v26);
        if (v34 == sub_1B6562334())
        {
          sub_1B660F764(a5, v33, v27, v28, v29, v30, v31, v32);
          *(void *)(a5 + 24) = sub_1B6562568((uint64_t)v33, v35, v36, v37, v38, v39, v40, v41);
          *(_WORD *)(a5 + 32) = sub_1B65625B4((uint64_t)v33, v42, v43, v44, v45, v46, v47, v48);
          *(unsigned char *)(a5 + 34) = 0;
          return 1;
        }
      }
      sub_1B63F2F54(17, @"Assertion '%s' failed. _CFXModelPathResolveEntity inconsistent cftype", v27, v28, v29, v30, v31, v32, (uint64_t)"0");
    }
    return 0;
  }
  uint64_t result = sub_1B6583E2C(a1, v12, v13, v14, v15, v16, v17, v18);
  if (result)
  {
    sub_1B65849C8((uint64_t)a1, v77, v78, v79, v80, v81, v82, v83);
    return sub_1B6584F2C((uint64_t)a1, theArray, a3, a5);
  }
  return result;
}

uint64_t sub_1B660D544(void *a1, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (!a1) {
    return 0;
  }
  if ((sub_1B660D398(a1, a2, a3, a4, a5) & 1) == 0)
  {
    sub_1B660F764(a5, a1, v12, v13, v14, v15, v16, v17);
    if ((int)a3 < (int)a4)
    {
      CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, (int)a3);
      int v19 = sub_1B660C490(ValueAtIndex);
      if (v19 <= 38)
      {
        switch(v19)
        {
          case 1:
            uint64_t v29 = (a3 + 1);
            uint64_t v27 = (char *)a1;
            CFArrayRef v28 = a2;
            goto LABEL_7;
          case 2:
            *(void *)(a5 + 24) = (char *)a1 + 204;
            uint64_t v30 = 1;
            *(_WORD *)(a5 + 32) = 1;
            return v30;
          case 3:
            *(void *)(a5 + 24) = a1 + 25;
            *(_WORD *)(a5 + 32) = 3;
            return 1;
          case 4:
          case 11:
            goto LABEL_32;
          case 5:
          case 6:
          case 7:
          case 8:
          case 12:
          case 13:
            uint64_t v27 = (char *)a1;
            CFArrayRef v28 = a2;
            uint64_t v29 = a3;
LABEL_7:
            sub_1B660F004(v27, v28, v29, a4, a5, a6, v25, v26);
            return 1;
          case 9:
            *(unsigned char *)(a5 + 34) = 8;
            uint64_t v33 = a1[24];
            if (!v33)
            {
              *(_OWORD *)long long cf = xmmword_1B6E4F300;
              long long v46 = xmmword_1B6E4F320;
              long long v47 = xmmword_1B6E4F2E0;
              long long v48 = xmmword_1B6E4F370;
              sub_1B64A0A70((uint64_t)a1, (long long *)cf, v21, v22, v23, v24, v25, v26);
              uint64_t v33 = a1[24];
            }
            sub_1B660C5D8(v33, a2, a3 + 1, a4, a5);
            return 1;
          case 10:
            if ((int)a3 + 1 >= (int)a4) {
              goto LABEL_32;
            }
            CFDictionaryRef v34 = sub_1B64A4CCC((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
            if (!v34) {
              goto LABEL_32;
            }
            sub_1B660F0C8(v34, a2, a3 + 1, a4, a5, a6);
            return 1;
          default:
            if (v19 != 38) {
              goto LABEL_32;
            }
            uint64_t v31 = sub_1B64A3B48((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
            goto LABEL_22;
        }
      }
      switch(v19)
      {
        case 'T':
          uint64_t v31 = (const void *)sub_1B64A14EC((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
          goto LABEL_22;
        case 'U':
          CFDictionaryRef v32 = sub_1B64A04D4((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
          goto LABEL_20;
        case 'V':
          CFDictionaryRef v32 = sub_1B64A4AF4((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
          goto LABEL_20;
        case 'W':
          CFDictionaryRef v32 = sub_1B64A4B14((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
LABEL_20:
          sub_1B660DEE8((uint64_t)v32, a2, a3 + 1, a4, a5);
          return 1;
        default:
          if (v19 == 39)
          {
            uint64_t v31 = (const void *)sub_1B649F5F4((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
            goto LABEL_22;
          }
          if (v19 == 73)
          {
            uint64_t v31 = sub_1B649F640((uint64_t)a1, v20, v21, v22, v23, v24, v25, v26);
LABEL_22:
            sub_1B660C9EC(v31, (uint64_t)a2, (a3 + 1), a4, a5, a6);
            return 1;
          }
LABEL_32:
          cf[0] = 0;
          unsigned int v44 = 0;
          if (!sub_1B660F1D0(a2, a3, a4, (SInt32 *)&v44, (CFStringRef *)cf)) {
            goto LABEL_38;
          }
          if (sub_1B660C490((void *)cf[0]) == 11)
          {
            unsigned int v41 = sub_1B64A180C((uint64_t)a1);
            if (v41 <= v44)
            {
              uint64_t v30 = 0;
            }
            else
            {
              uint64_t v42 = sub_1B64A1A44((uint64_t)a1, v44);
              uint64_t v30 = sub_1B660D544(v42, a2, (a3 + 1), a4, a5, a6);
            }
            if (cf[0]) {
              CFRelease(cf[0]);
            }
            return v30;
          }
          if (cf[0]) {
            CFRelease(cf[0]);
          }
LABEL_38:
          if (a6) {
            sub_1B63F2F54(16, @"Error: _CFXModelPathResolveNode unknown path %@", v35, v36, v37, v38, v39, v40, (uint64_t)ValueAtIndex);
          }
          break;
      }
      return 0;
    }
    *(void *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
  }
  return 1;
}

uint64_t sub_1B660D8B4(uint64_t result, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (result)
  {
    unsigned int v11 = (const void *)result;
    if (sub_1B660D398((void *)result, a2, a3, a4, a5)) {
      return 1;
    }
    sub_1B660F764(a5, v11, v12, v13, v14, v15, v16, v17);
    if ((int)a3 >= (int)a4)
    {
      *(void *)(a5 + 24) = 0;
      *(_WORD *)(a5 + 32) = 0;
      return 1;
    }
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, (int)a3);
    unsigned int v19 = sub_1B660C490(ValueAtIndex);
    uint64_t v27 = (char *)sub_1B64AF43C((uint64_t)v11, v20, v21, v22, v23, v24, v25, v26);
    if (v19 == 42)
    {
      sub_1B660F400(v27, a2, (a3 + 1), a4, a5, a6, v28, v29);
      return 1;
    }
    return sub_1B660F400(v27, a2, a3, a4, a5, a6, v28, v29);
  }
  return result;
}

uint64_t sub_1B660D9A8(uint64_t result, const __CFArray *a2, int a3, uint64_t a4, uint64_t a5, int a6)
{
  if (!result) {
    return result;
  }
  unsigned int v11 = (const void *)result;
  if (sub_1B660D398((void *)result, a2, a3, a4, a5)) {
    return 1;
  }
  sub_1B660F764(a5, v11, v12, v13, v14, v15, v16, v17);
  if (a3 >= (int)a4)
  {
    *(void *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
    return 1;
  }
  CFStringRef ValueAtIndex = (__CFString *)CFArrayGetValueAtIndex(a2, a3);
  unsigned int v19 = sub_1B660C490(ValueAtIndex);
  CFRange v26 = CFStringFind(ValueAtIndex, @"weights", 0);
  if (v26.length <= 0) {
    int v27 = 0;
  }
  else {
    int v27 = -1;
  }
  if (v26.length > 0 || v19 == 83)
  {
    uint64_t v28 = (const void *)sub_1B65873BC((uint64_t)v11);
    CFRange v32 = CFStringFind(ValueAtIndex, @"[\"", 0);
    if (v32.length >= 1)
    {
      CFRange v33 = CFStringFind(ValueAtIndex, @"\"]", 0);
      if (v33.length >= 1 && v33.location > v32.location + 2)
      {
        v54.location = v32.location + 2;
        v54.length = v33.location - (v32.location + 2);
        CFDictionaryRef v34 = (__CFString *)CFStringCreateWithSubstring(0, ValueAtIndex, v54);
        uint64_t v35 = sub_1B65881D8((uint64_t)v11, v34);
        if (v35 != -1)
        {
          uint64_t v39 = v35;
          sub_1B660F764(a5, v28, v36, v37, v38, v29, v30, v31);
          long long v47 = (void *)sub_1B6536C44((uint64_t)v28, v40, v41, v42, v43, v44, v45, v46);
          *(void *)(a5 + 24) = sub_1B6534884(v47, v39, v48, v49, v50, v51, v52, v53);
          *(_WORD *)(a5 + 32) = sub_1B6534654((uint64_t)v47);
          if (v34) {
            CFRelease(v34);
          }
          return 1;
        }
        if (v34) {
          CFRelease(v34);
        }
      }
    }
    if (v28) {
      sub_1B660DCE0(v28, a2, (a3 + v27 + 1), a4, a5, v29, v30, v31);
    }
    return 1;
  }
  if (a6) {
    sub_1B63F2F54(16, @"Error: _CFXModelPathResolveMorpher unknown path %@", v20, v21, v22, v23, v24, v25, (uint64_t)ValueAtIndex);
  }
  return 0;
}

uint64_t sub_1B660DB84(CFTypeRef cf, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!cf) {
    return 0;
  }
  int v11 = a3;
  sub_1B660F764(a5, cf, a3, a4, a5, a6, a7, a8);
  if (v11 >= (int)a4)
  {
    *(void *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
    return 1;
  }
  CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, v11);
  if (sub_1B660C490(ValueAtIndex) == 40)
  {
    if ((uint64_t)sub_1B63CCEC4((uint64_t)cf, v15, v16, v17, v18, v19, v20, v21) >= 1)
    {
      CFArrayRef v28 = sub_1B63CCF34((uint64_t)cf, 0, v22, v23, v24, v25, v26, v27);
      sub_1B660D8B4((uint64_t)v28, a2, (v11 + 1), a4, a5, a6);
    }
    return 1;
  }
  CFTypeRef cfa = 0;
  SInt32 v46 = 0;
  uint64_t v29 = 0;
  if (sub_1B660F1D0(a2, v11, a4, &v46, (CFStringRef *)&cfa))
  {
    if (sub_1B660C490((void *)cfa) == 41
      && (CFArrayRef v38 = sub_1B63CCEC4((uint64_t)cf, v31, v32, v33, v34, v35, v36, v37), (uint64_t)v38 > v46))
    {
      CFArrayRef v45 = sub_1B63CCF34((uint64_t)cf, v46, v39, v40, v41, v42, v43, v44);
      uint64_t v29 = sub_1B660C9EC(v45, (uint64_t)a2, (v11 + 1), a4, a5, a6);
    }
    else
    {
      uint64_t v29 = 0;
    }
    if (cfa) {
      CFRelease(cfa);
    }
  }
  return (uint64_t)v29;
}

uint64_t sub_1B660DCE0(CFTypeRef cf, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a4;
  int v10 = a3;
  sub_1B660F764(a5, cf, a3, a4, a5, a6, a7, a8);
  if (!cf) {
    return 0;
  }
  *(void *)(a5 + 24) = 0;
  *(_WORD *)(a5 + 32) = 0;
  SInt32 v29 = 0;
  uint64_t v20 = sub_1B660F1D0(a2, v10, v9, &v29, 0);
  if (v20)
  {
    uint64_t v21 = (void *)sub_1B6536C44((uint64_t)cf, v13, v14, v15, v16, v17, v18, v19);
    *(void *)(a5 + 24) = sub_1B6534884(v21, v29, v22, v23, v24, v25, v26, v27);
    *(_WORD *)(a5 + 32) = sub_1B6534654((uint64_t)v21);
  }
  return v20;
}

uint64_t sub_1B660DD94(CFTypeRef cf, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = a3;
  sub_1B660F764(a5, cf, a3, a4, a5, a6, a7, a8);
  if (v11 >= (int)a4)
  {
    *(void *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
    return 1;
  }
  else
  {
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, v11);
    unsigned int v15 = sub_1B660C490(ValueAtIndex);
    if (v15 == 90)
    {
      uint64_t v16 = 1;
      uint64_t v17 = (char *)sub_1B64B27BC((uint64_t)cf, 1);
    }
    else
    {
      if (v15 != 91) {
        return 0;
      }
      uint64_t v16 = 1;
      uint64_t v17 = (char *)sub_1B64B2810((uint64_t)cf, 1);
    }
    sub_1B660C30C(v17, a2, (v11 + 1), a4, a5, a6, v18, v19);
  }
  return v16;
}

BOOL sub_1B660DE6C(const void *a1, CFArrayRef theArray, int a3, int a4, uint64_t a5)
{
  if (a3 >= a4) {
    return 0;
  }
  CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(theArray, a3);
  sub_1B660F764(a5, a1, v8, v9, v10, v11, v12, v13);
  uint64_t v19 = sub_1B6515B48((uint64_t)a1, ValueAtIndex, (_WORD *)(a5 + 32), v14, v15, v16, v17, v18);
  *(void *)(a5 + 24) = v19;
  return v19 != 0;
}

uint64_t sub_1B660DEE8(uint64_t result, void *a2, int a3, int a4, uint64_t a5)
{
  if (result)
  {
    uint64_t v7 = (const void *)result;
    int v8 = a4 - a3;
    CFArrayRef v9 = (const __CFArray *)sub_1B63CC8C4(a2, (const char *)a3, a4 - a3);
    CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v9, 0);
    if (v8 == 2 && (uint64_t v16 = CFArrayGetValueAtIndex(v9, 1)) != 0)
    {
      uint64_t v17 = v16;
      if (CFEqual(v16, @"x"))
      {
        uint64_t v23 = 0;
      }
      else if (CFEqual(v17, @"y"))
      {
        uint64_t v23 = 1;
      }
      else if (CFEqual(v17, @"z"))
      {
        uint64_t v23 = 2;
      }
      else
      {
        if (!CFEqual(v17, @"w"))
        {
          sub_1B63F2F54(16, @"Error: unknown field type in path %@", v38, v18, v19, v20, v21, v22, (uint64_t)a2);
          return 0;
        }
        uint64_t v23 = 3;
      }
      CFDictionaryRef v24 = sub_1B6535C10((uint64_t)v7, ValueAtIndex, v23, v18, v19, v20, v21, v22);
      int v37 = 1;
    }
    else
    {
      CFDictionaryRef v24 = sub_1B6535C10((uint64_t)v7, ValueAtIndex, 0, v10, v11, v12, v13, v14);
      int v37 = sub_1B65359E0((uint64_t)v7, ValueAtIndex, v25, v26, v27, v28, v29, v30);
    }
    uint64_t result = 0;
    if (v24)
    {
      if (v37)
      {
        sub_1B660F764(a5, v7, v31, v32, v33, v34, v35, v36);
        *(void *)(a5 + 24) = v24;
        *(_WORD *)(a5 + 32) = v37;
        uint64_t result = 1;
        *(unsigned char *)(a5 + 34) = 0;
      }
    }
  }
  return result;
}

uint64_t sub_1B660E058(uint64_t a1, CFTypeID a2, const __CFString *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (sub_1B6588A68() == a2)
  {
    uint64_t v12 = (const void *)sub_1B63CD09C(a1);
  }
  else
  {
    if (sub_1B6586A68() != a2)
    {
      CFStringRef v16 = CFCopyTypeIDDescription(a2);
      sub_1B63F2F54(16, @"Unreachable code: Support for subscript model path is not implemented for %@", v17, v18, v19, v20, v21, v22, (uint64_t)v16);
      CFRelease(v16);
      return 0;
    }
    uint64_t v12 = (const void *)a1;
  }
  sub_1B660E110(v12, a3, a4, a5, a6, v13, v14, v15);
  return 0;
}

void sub_1B660E110(CFTypeRef cf, const __CFString *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (cf)
  {
    int v8 = a5;
    sub_1B660F764(a4, cf, a3, a4, a5, a6, a7, a8);
    if (CFStringCompare(a2, @"weights", 0))
    {
      if (v8) {
        sub_1B63F2F54(16, @"Error: _CFXModelPathResolveMorpher unknown key subscript %@[%ld]", v13, v14, v15, v16, v17, v18, (uint64_t)a2);
      }
    }
    else
    {
      uint64_t v19 = (const void *)sub_1B65873BC((uint64_t)cf);
      sub_1B660F764(a4, v19, v20, v21, v22, v23, v24, v25);
      uint64_t v33 = (void *)sub_1B6536C44((uint64_t)v19, v26, v27, v28, v29, v30, v31, v32);
      *(void *)(a4 + 24) = sub_1B6534884(v33, a3, v34, v35, v36, v37, v38, v39);
      *(_WORD *)(a4 + 32) = sub_1B6534654((uint64_t)v33);
    }
  }
}

uint64_t sub_1B660E1DC(uint64_t a1, CFTypeID a2, const __CFString *a3, void *a4, uint64_t a5, uint64_t a6)
{
  if (sub_1B6588A68() == a2)
  {
    uint64_t v12 = (const void *)sub_1B63CD09C(a1);
  }
  else
  {
    if (sub_1B6586A68() != a2)
    {
      CFStringRef v16 = CFCopyTypeIDDescription(a2);
      sub_1B63F2F54(16, @"Unreachable code: Support for subscript model path is not implemented for %@", v17, v18, v19, v20, v21, v22, (uint64_t)v16);
      CFRelease(v16);
      return 0;
    }
    uint64_t v12 = (const void *)a1;
  }
  sub_1B660E294(v12, a3, a4, a5, a6, v13, v14, v15);
  return 0;
}

void sub_1B660E294(CFTypeRef cf, const __CFString *a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (cf)
  {
    int v8 = a5;
    sub_1B660F764(a4, cf, (uint64_t)a3, a4, a5, a6, a7, a8);
    if (CFStringCompare(a2, @"weights", 0))
    {
      if (!v8) {
        return;
      }
LABEL_8:
      sub_1B63F2F54(16, @"Error: _CFXModelPathResolveMorpher unknown key subscript %@[%@]", v13, v14, v15, v16, v17, v18, (uint64_t)a2);
      return;
    }
    uint64_t v19 = (const void *)sub_1B65873BC((uint64_t)cf);
    sub_1B660F764(a4, v19, v20, v21, v22, v23, v24, v25);
    uint64_t v26 = sub_1B65881D8((uint64_t)cf, a3);
    if (v26 != -1)
    {
      uint64_t v28 = v26;
      uint64_t v29 = (void *)sub_1B6536C44((uint64_t)v19, v27, v13, v14, v15, v16, v17, v18);
      *(void *)(a4 + 24) = sub_1B6534884(v29, v28, v30, v31, v32, v33, v34, v35);
      *(_WORD *)(a4 + 32) = sub_1B6534654((uint64_t)v29);
      return;
    }
    if (v8) {
      goto LABEL_8;
    }
  }
}

void sub_1B660E380(void *a1, const void *a2)
{
  os_unfair_lock_lock((os_unfair_lock_t)&unk_1E9DDBEA0);
  CFIndex v4 = (__CFDictionary *)sub_1B660CBFC(a1);
  qword_1E9DDBEA8 = (uint64_t)v4;
  if (a2)
  {
    CFDictionaryAddValue(v4, @"superClass", a2);
  }
}

void sub_1B660E3EC()
{
  qword_1E9DDBEA8 = 0;
  os_unfair_lock_unlock((os_unfair_lock_t)&unk_1E9DDBEA0);
}

void sub_1B660E400(const void *a1, unsigned int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v10 = a4;
  __int16 v11 = a3;
  if (!qword_1E9DDBEA8) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"_currentClassRegistry");
  }
  uint64_t v14 = malloc_type_malloc(0x20uLL, 0x1080040FF9D436EuLL);
  v14[4] = v11;
  *(void *)uint64_t v14 = a2;
  *((unsigned char *)v14 + 10) = v10;
  *((void *)v14 + 2) = a5;
  *((void *)v14 + 3) = a6;
  if (CFDictionaryGetCountOfKey((CFDictionaryRef)qword_1E9DDBEA8, a1)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Cannot register twice the same propertyName : %@", v15, v16, v17, v18, v19, v20, (uint64_t)"CFDictionaryGetCountOfKey(_currentClassRegistry, propertyName) == 0");
  }
  uint64_t v21 = (__CFDictionary *)qword_1E9DDBEA8;

  CFDictionarySetValue(v21, a1, v14);
}

void sub_1B660E4F4()
{
  qword_1E9DDBEB0 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 110, MEMORY[0x1E4F1D530], 0);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"transform", (const void *)1);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"opacity", (const void *)2);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"hidden", (const void *)3);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"attributes", (const void *)4);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"matrix", (const void *)5);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"translation", (const void *)6);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"position", (const void *)6);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"rotation", (const void *)7);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"orientation", (const void *)0xD);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"scale", (const void *)8);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"eulerAngles", (const void *)0xC);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"quaternion", (const void *)0xD);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"pivot", (const void *)9);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"filters", (const void *)0xA);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"nodes", (const void *)0xB);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"childNodes", (const void *)0xB);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"x", (const void *)0xE);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"y", (const void *)0xF);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"z", (const void *)0x10);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"w", (const void *)0x11);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"(0)", (const void *)0xE);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"(1)", (const void *)0xF);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"(2)", (const void *)0x10);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"(3)", (const void *)0x11);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"r", (const void *)0x12);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"g", (const void *)0x13);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"b", (const void *)0x14);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"a", (const void *)0x15);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m11", (const void *)0x16);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m12", (const void *)0x1A);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m13", (const void *)0x1E);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m14", (const void *)0x22);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m21", (const void *)0x17);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m22", (const void *)0x1B);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m23", (const void *)0x1F);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m24", (const void *)0x23);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m31", (const void *)0x18);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m32", (const void *)0x1C);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m33", (const void *)0x20);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m34", (const void *)0x24);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m41", (const void *)0x19);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m42", (const void *)0x1D);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m43", (const void *)0x21);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"m44", (const void *)0x25);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"camera", (const void *)0x26);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"geometry", (const void *)0x27);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"firstMaterial", (const void *)0x28);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"materials", (const void *)0x29);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"commonProfile", (const void *)0x2A);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"diffuse", (const void *)0x2B);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"specular", (const void *)0x2C);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"emission", (const void *)0x2D);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"reflective", (const void *)0x2E);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"normal", (const void *)0x2F);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"ambientOcclusion", (const void *)0x30);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"selfIllumination", (const void *)0x31);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"metalness", (const void *)0x32);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"roughness", (const void *)0x33);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"selfIlluminationOcclusion", (const void *)0x3A);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"clearCoat", (const void *)0x34);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"clearCoatRoughness", (const void *)0x35);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"clearCoatNormal", (const void *)0x36);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"subsurface", (const void *)0x37);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"subsurfaceRadius", (const void *)0x38);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"displacement", (const void *)0x39);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"transparent", (const void *)0x3B);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"multiply", (const void *)0x3C);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"shininess", (const void *)0x3D);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"fresnelExponent", (const void *)0x3E);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"shaderModifiers", (const void *)0x42);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"doubleSided", (const void *)0x3F);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"litPerPixel", (const void *)0x40);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"cullMode", (const void *)0x41);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"color", (const void *)0x43);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"contents", (const void *)0x44);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"texture", (const void *)0x45);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"image", (const void *)0x46);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"contentsTransform", (const void *)0x47);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"intensity", (const void *)0x48);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"light", (const void *)0x49);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"shadowIntensity", (const void *)0x4A);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"shadowRadius", (const void *)0x4B);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"attenuation", (const void *)0x4F);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"spotInnerAngle", (const void *)0x50);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"spotOuterAngle", (const void *)0x51);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"spotFalloffExponent", (const void *)0x52);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"weights", (const void *)0x53);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"morpher", (const void *)0x54);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"particleEmitter", (const void *)0x55);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"particleCollider", (const void *)0x56);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"behaviorGraph", (const void *)0x57);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"background", (const void *)0x5A);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"environment", (const void *)0x5B);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"gobo", (const void *)0x4C);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"probeEnvironment", (const void *)0x4D);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"ies", (const void *)0x4E);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"customProperty", (const void *)0x58);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"animations", (const void *)0x59);
  CFDictionaryAddValue((CFMutableDictionaryRef)qword_1E9DDBEB0, @"euler", (const void *)0xC);
  uint64_t v0 = (__CFDictionary *)qword_1E9DDBEB0;

  CFDictionaryAddValue(v0, @"axisAngle", (const void *)7);
}

void sub_1B660EE1C(const __CFArray *a1, int a2, int a3, uint64_t a4)
{
  *(unsigned char *)(a4 + 34) = 4;
  if (a2 >= a3)
  {
    *(void *)(a4 + 24) = 0;
    *(_WORD *)(a4 + 32) = 9;
  }
  else
  {
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, a2);
    switch(sub_1B660C490(ValueAtIndex))
    {
      case 7u:
        *(_WORD *)(a4 + 32) = 9;
        *(unsigned char *)(a4 + 35) = sub_1B660EFAC(a1, a2 + 1, a3, a4);
        goto LABEL_9;
      case 0xCu:
        *(_WORD *)(a4 + 32) = 8;
        *(unsigned char *)(a4 + 35) = sub_1B660EFAC(a1, a2 + 1, a3, a4);
        char v15 = 5;
        goto LABEL_10;
      case 0xDu:
        *(_WORD *)(a4 + 32) = 9;
        *(unsigned char *)(a4 + 35) = sub_1B660EFAC(a1, a2 + 1, a3, a4);
        char v15 = 3;
        goto LABEL_10;
      case 0xEu:
        *(_WORD *)(a4 + 32) = 1;
LABEL_9:
        char v15 = 4;
LABEL_10:
        *(unsigned char *)(a4 + 34) = v15;
        return;
      case 0xFu:
        int v16 = 17039361;
        goto LABEL_14;
      case 0x10u:
        int v16 = 33816577;
        goto LABEL_14;
      case 0x11u:
        int v16 = 50593793;
LABEL_14:
        *(_DWORD *)(a4 + 32) = v16;
        break;
      default:
        sub_1B63F2F54(16, @"Error: _CFXModelPathResolveRotation unknown path %@", v9, v10, v11, v12, v13, v14, (uint64_t)ValueAtIndex);
        break;
    }
  }
}

uint64_t sub_1B660EFAC(const __CFArray *a1, int a2, int a3, uint64_t a4)
{
  if (a2 >= a3) {
    return 0;
  }
  CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a1, a2);
  unsigned int v6 = sub_1B660C490(ValueAtIndex);
  *(_WORD *)(a4 + 32) = 1;
  if (v6 - 15 >= 3) {
    return 0;
  }
  else {
    return v6 - 14;
  }
}

void sub_1B660F004(char *cf, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a6;
  int v10 = a4;
  int v11 = a3;
  sub_1B660F764(a5, cf, a3, a4, a5, a6, a7, a8);
  *(unsigned char *)(a5 + 34) = 8;
  *(unsigned char *)(a5 + 37) = 1;
  if (v11 >= v10)
  {
    *(void *)(a5 + 24) = cf + 96;
    *(_WORD *)(a5 + 32) = 10;
  }
  else
  {
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, v11);
    sub_1B660C490(ValueAtIndex);
    sub_1B660C750((uint64_t)(cf + 96), a2, v11, v10, a5, v8);
  }
}

void sub_1B660F0C8(const void *a1, const __CFArray *a2, int a3, int a4, uint64_t a5, int a6)
{
  CFDictionaryRef Mutable = CFArrayCreateMutable(0, 0, MEMORY[0x1E4F1D510]);
  v29.location = a3;
  v29.length = a4 - a3;
  CFArrayAppendArray(Mutable, a2, v29);
  uint64_t v13 = (__CFString *)CFStringCreateByCombiningStrings(0, Mutable, @".");
  uint64_t v20 = sub_1B661E388((uint64_t)a1, v13, v14, v15, v16, v17, v18, v19);
  if (v20)
  {
    uint64_t v27 = v20;
    sub_1B660F764(a5, a1, v21, v22, v23, v24, v25, v26);
    *(_WORD *)(a5 + 32) = *(_WORD *)(v27 + 32);
    *(void *)(a5 + 24) = *(void *)(v27 + 24);
    *(unsigned char *)(a5 + 34) = *(unsigned char *)(v27 + 34);
    CFRelease(Mutable);
  }
  else if (a6)
  {
    sub_1B63F2F54(16, @"Error: _CFXModelPathResolveDynamicParameter unknown path %@", v21, v22, v23, v24, v25, v26, (uint64_t)v13);
  }

  CFRelease(v13);
}

uint64_t sub_1B660F1D0(const __CFArray *a1, int a2, int a3, SInt32 *a4, CFStringRef *a5)
{
  if (a2 >= a3) {
    return 0;
  }
  CFStringRef ValueAtIndex = (const __CFString *)CFArrayGetValueAtIndex(a1, a2);
  CFRange v8 = CFStringFind(ValueAtIndex, @"[", 0);
  if (v8.length >= 1)
  {
    CFRange v9 = CFStringFind(ValueAtIndex, @"]", 0);
    if (v9.length >= 1 && v9.location > v8.location)
    {
      v29.location = 0;
      v29.length = v8.location;
      CFStringRef v10 = CFStringCreateWithSubstring(0, ValueAtIndex, v29);
      v30.location = v8.location + 1;
      v30.length = v9.location - (v8.location + 1);
      CFStringRef v11 = CFStringCreateWithSubstring(0, ValueAtIndex, v30);
      CFStringRef v18 = v11;
      if (v10)
      {
        if (!v11)
        {
          sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v12, v13, v14, v15, v16, v17, (uint64_t)"indexString");
          goto LABEL_21;
        }
        goto LABEL_15;
      }
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v12, v13, v14, v15, v16, v17, (uint64_t)"prefix");
      if (v18)
      {
        CFStringRef v10 = 0;
LABEL_15:
        if (CFStringGetLength(v18) && CFStringGetCharacterAtIndex(v18, 0) - 48 < 0xA)
        {
          *a4 = CFStringGetIntValue(v18);
          if (a5)
          {
            *a5 = v10;
          }
          else if (v10)
          {
            CFRelease(v10);
          }
          uint64_t v27 = 1;
          CFStringRef v10 = v18;
LABEL_26:
          CFRelease(v10);
          return v27;
        }
        CFRelease(v18);
LABEL_21:
        uint64_t v27 = 0;
        if (!v10) {
          return v27;
        }
        goto LABEL_26;
      }
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v19, v20, v21, v22, v23, v24, (uint64_t)"indexString");
    }
  }
  CFRange v25 = CFStringFind(ValueAtIndex, @"("), 0;
  if (v25.length < 1) {
    return 0;
  }
  CFRange v26 = CFStringFind(ValueAtIndex, @""), 0);
  uint64_t v27 = 0;
  if (v26.length >= 1 && v26.location > v25.location)
  {
    v31.location = 0;
    v31.length = v25.location;
    CFStringRef v10 = CFStringCreateWithSubstring(0, ValueAtIndex, v31);
    v32.location = v25.location + 1;
    v32.length = v26.location - (v25.location + 1);
    CFStringRef v18 = CFStringCreateWithSubstring(0, ValueAtIndex, v32);
    if (!v18) {
      goto LABEL_21;
    }
    goto LABEL_15;
  }
  return v27;
}

uint64_t sub_1B660F400(char *cf, const __CFArray *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v11 = a3;
  sub_1B660F764(a5, cf, a3, a4, a5, a6, a7, a8);
  if (v11 >= (int)a4)
  {
    *(void *)(a5 + 24) = 0;
    *(_WORD *)(a5 + 32) = 0;
    return 1;
  }
  else
  {
    CFStringRef ValueAtIndex = (void *)CFArrayGetValueAtIndex(a2, v11);
    uint64_t v20 = 0;
    switch(sub_1B660C490(ValueAtIndex))
    {
      case '+':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 1;
        goto LABEL_23;
      case ',':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 2;
        goto LABEL_23;
      case '-':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 0;
        goto LABEL_23;
      case '.':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 3;
        goto LABEL_23;
      case '/':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 6;
        goto LABEL_23;
      case '0':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 7;
        goto LABEL_23;
      case '1':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 8;
        goto LABEL_23;
      case '2':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 9;
        goto LABEL_23;
      case '3':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 10;
        goto LABEL_23;
      case '4':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 11;
        goto LABEL_23;
      case '5':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 12;
        goto LABEL_23;
      case '6':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 13;
        goto LABEL_23;
      case '7':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 14;
        goto LABEL_23;
      case '8':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 15;
        goto LABEL_23;
      case '9':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 16;
        goto LABEL_23;
      case ':':
        uint64_t v20 = 1;
        *(_WORD *)(a5 + 32) = 1;
        uint64_t v23 = cf + 180;
        goto LABEL_27;
      case ';':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 4;
        goto LABEL_23;
      case '<':
        uint64_t v20 = 1;
        uint64_t v21 = (uint64_t)cf;
        int v22 = 5;
LABEL_23:
        uint64_t v24 = (char *)sub_1B6475290(v21, v22, 1, v15, v16, v17, v18, v19);
        sub_1B660C30C(v24, a2, (v11 + 1), a4, a5, a6, v25, v26);
        return v20;
      case '=':
        uint64_t v20 = 1;
        *(_WORD *)(a5 + 32) = 1;
        uint64_t v23 = cf + 168;
        goto LABEL_27;
      case '>':
        uint64_t v20 = 1;
        *(_WORD *)(a5 + 32) = 1;
        uint64_t v23 = cf + 176;
LABEL_27:
        *(void *)(a5 + 24) = v23;
        break;
      case '@':
        *(_WORD *)(a5 + 32) = 3;
        *(void *)(a5 + 24) = cf + 200;
        return 1;
      default:
        return v20;
    }
  }
  return v20;
}

uint64_t sub_1B660F680(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B660F6B0(const void *a1, uint64_t a2, int a3, char a4)
{
  if (qword_1E9DDBEC8 != -1) {
    dispatch_once_f(&qword_1E9DDBEC8, &qword_1E9DDBEC0, (dispatch_function_t)sub_1B660F680);
  }
  uint64_t v8 = sub_1B63C8D44(qword_1E9DDBEC0, 0x28uLL);
  uint64_t v16 = v8;
  if (a1) {
    sub_1B660F764(v8, a1, v10, v11, v12, v13, v14, v15);
  }
  *(void *)(v16 + 24) = a2;
  *(_WORD *)(v16 + 32) = a3;
  *(unsigned char *)(v16 + 34) = a4;
  *(unsigned char *)(v16 + 36) = sub_1B63CA534(a3, v9, v10, v11, v12, v13, v14, v15);
  return v16;
}

CFTypeRef sub_1B660F764(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  }
  CFTypeRef result = *(CFTypeRef *)(a1 + 16);
  if (result != cf)
  {
    if (result)
    {
      CFRelease(result);
      *(void *)(a1 + 16) = 0;
    }
    if (cf) {
      CFTypeRef result = CFRetain(cf);
    }
    else {
      CFTypeRef result = 0;
    }
    *(void *)(a1 + 16) = result;
  }
  return result;
}

uint64_t sub_1B660F7E0(uint64_t a1)
{
  if (qword_1E9DDBEC8 != -1) {
    dispatch_once_f(&qword_1E9DDBEC8, &qword_1E9DDBEC0, (dispatch_function_t)sub_1B660F680);
  }
  uint64_t v2 = sub_1B63C8D44(qword_1E9DDBEC0, 0x28uLL);
  sub_1B660F764(v2, *(CFTypeRef *)(a1 + 16), v3, v4, v5, v6, v7, v8);
  *(void *)(v2 + 24) = *(void *)(a1 + 24);
  *(_WORD *)(v2 + 32) = *(_WORD *)(a1 + 32);
  *(_DWORD *)(v2 + 34) = *(_DWORD *)(a1 + 34);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  return v2;
}

uint64_t sub_1B660F878(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
  }
  return *(void *)(a1 + 16);
}

uint64_t sub_1B660F8C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  }
  return *(void *)(a1 + 24);
}

void *sub_1B660F910(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"target");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"output");
LABEL_3:
  uint64_t v10 = *(const void **)(a1 + 16);
  uint64_t v11 = *(const void **)(a1 + 24);
  size_t v12 = *(unsigned __int8 *)(a1 + 36);
  uint64_t v13 = *(char *)(a1 + 34);
  uint64_t v14 = *(unsigned __int8 *)(a1 + 35);

  return sub_1B63F4434(v10, v11, a2, v12, v13, v14, a7, a8);
}

uint64_t sub_1B660F9A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  }
  return *(char *)(a1 + 34);
}

uint64_t sub_1B660F9F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  }
  return *(unsigned __int8 *)(a1 + 35);
}

uint64_t sub_1B660FA40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"animation");
  }
  return *(__int16 *)(a1 + 32);
}

void sub_1B660FA90(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

CFStringRef sub_1B660FAC0(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXModelTarget>");
}

CFStringRef sub_1B660FAF4(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXModelTarget>");
}

uint64_t sub_1B660FB28(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B660FB58(const void *a1)
{
  if (qword_1E9DDBED8 != -1) {
    dispatch_once_f(&qword_1E9DDBED8, &qword_1E9DDBED0, (dispatch_function_t)sub_1B660FB28);
  }
  uint64_t v2 = sub_1B63C8D44(qword_1E9DDBED0, 0x90uLL);
  if (v2)
  {
    *(void *)(v2 + 24) = CFRetain(a1);
    *(_WORD *)(v2 + 16) = 1;
    int v10 = sub_1B660FA40((uint64_t)a1, v3, v4, v5, v6, v7, v8, v9);
    *(_WORD *)(v2 + 128) = v10;
    *(_WORD *)(v2 + 130) = sub_1B63CA534(v10, v11, v12, v13, v14, v15, v16, v17);
  }
  return v2;
}

uint64_t sub_1B660FBF4(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B660FC24()
{
  if (qword_1E9DDBEE8 != -1) {
    dispatch_once_f(&qword_1E9DDBEE8, &qword_1E9DDBEE0, (dispatch_function_t)sub_1B660FBF4);
  }
  uint64_t v0 = sub_1B63C8D44(qword_1E9DDBEE0, 0x20uLL);
  if (v0) {
    *(void *)(v0 + 16) = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
  }
  return v0;
}

uint64_t sub_1B660FCB0(uint64_t a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
  if (!a2) {
LABEL_3:
  }
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"target");
LABEL_4:
  int v10 = (const void *)sub_1B660F8C4((uint64_t)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  uint64_t v11 = v10;
  if (*(const void **)(a1 + 24) == v10)
  {
    uint64_t Value = *(void *)(a1 + 32);
    if (Value) {
      goto LABEL_6;
    }
LABEL_10:
    uint64_t Value = sub_1B660FB58(a2);
    uint64_t v20 = (const void *)sub_1B660F878((uint64_t)a2, v13, v14, v15, v16, v17, v18, v19);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 16), v11, (const void *)Value);
    *(void *)(Value + 136) = sub_1B63F4614(v20);
    uint64_t v21 = sub_1B63F4668(v20);
    *(void *)(Value + 144) = v21;
    if (*(void *)(Value + 136))
    {
      if (v21)
      {
LABEL_12:
        sub_1B660FE2C(a1, Value, v22, v23, v24, v25, v26, v27);
        CFRelease((CFTypeRef)Value);
        *(void *)(a1 + 24) = v11;
        *(void *)(a1 + 32) = Value;
        return Value;
      }
    }
    else
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v22, v23, v24, v25, v26, v27, (uint64_t)"item->_getter");
      if (*(void *)(Value + 144)) {
        goto LABEL_12;
      }
    }
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v22, v23, v24, v25, v26, v27, (uint64_t)"item->_setter");
    goto LABEL_12;
  }
  *(void *)(a1 + 24) = v10;
  uint64_t Value = (uint64_t)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v10);
  *(void *)(a1 + 32) = Value;
  if (!Value) {
    goto LABEL_10;
  }
LABEL_6:
  ++*(_WORD *)(Value + 16);
  return Value;
}

void sub_1B660FE2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_8:
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"item");
    return;
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
  if (!a2) {
    goto LABEL_8;
  }
LABEL_3:
  uint64_t v9 = *(void *)(a2 + 24);
  if (*(unsigned char *)(v9 + 37))
  {
    CFTypeID v10 = CFGetTypeID(*(CFTypeRef *)(v9 + 16));
    if (v10 != sub_1B64A06D4()) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. CFXModelValueStorageUpdateModelValueFromPresentationValue - unexpected class", v11, v12, v13, v14, v15, v16, (uint64_t)"CFGetTypeID(target->_owner) == CFXNodeGetTypeID()");
    }
    uint64_t v17 = (_OWORD *)sub_1B64A260C(*(void *)(v9 + 16));
    long long v18 = v17[1];
    *(_OWORD *)(a2 + 32) = *v17;
    *(_OWORD *)(a2 + 48) = v18;
    long long v19 = v17[5];
    long long v21 = v17[2];
    long long v20 = v17[3];
    *(_OWORD *)(a2 + 96) = v17[4];
    *(_OWORD *)(a2 + 112) = v19;
    *(_OWORD *)(a2 + 64) = v21;
    *(_OWORD *)(a2 + 80) = v20;
  }
  else
  {
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 136);
    uint64_t v22 = sub_1B660F878(v9, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v30 = sub_1B660F8C4(v9, v23, v24, v25, v26, v27, v28, v29);
    uint64_t v31 = *(__int16 *)(a2 + 130);
    uint64_t v32 = *(char *)(v9 + 34);
    uint64_t v33 = *(unsigned __int8 *)(v9 + 35);
    v34(v22, v30, a2 + 32, v31, v32, v33);
  }
}

void sub_1B660FF60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"item");
LABEL_3:
  if (*(_WORD *)(a2 + 16) == 1) {
    sub_1B6610004(a1, a2, a3, a4, a5, a6, a7, a8);
  }

  sub_1B66100EC(a1, a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B6610004(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"item");
LABEL_3:
  uint64_t v10 = sub_1B660F8C4(*(void *)(a2 + 24), a2, a3, a4, a5, a6, a7, a8);
  *(void *)(a2 + 152) = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a2 + 24);
  int v12 = *(unsigned __int8 *)(v11 + 37);
  uint64_t v26 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 144);
  uint64_t v19 = sub_1B660F878(v11, (uint64_t)v26, v13, v14, v15, v16, v17, v18);
  if (v12)
  {
    uint64_t v20 = v10;
    uint64_t v21 = 96;
    uint64_t v22 = 8;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v21 = *(__int16 *)(a2 + 130);
    uint64_t v24 = *(void *)(a2 + 24);
    uint64_t v22 = *(char *)(v24 + 34);
    uint64_t v23 = *(unsigned __int8 *)(v24 + 35);
    uint64_t v20 = v10;
  }

  return v26(v19, v20, a2 + 32, v21, v22, v23);
}

void sub_1B66100EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"item");
LABEL_3:
  uint64_t v10 = (const void *)sub_1B660F8C4(*(void *)(a2 + 24), a2, a3, a4, a5, a6, a7, a8);
  __int16 v11 = *(_WORD *)(a2 + 16) - 1;
  *(_WORD *)(a2 + 16) = v11;
  if (!v11)
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), v10);
    *(void *)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
}

const void *sub_1B661018C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"target");
LABEL_3:
  uint64_t v10 = (const void *)sub_1B660F8C4(a2, a2, a3, a4, a5, a6, a7, a8);
  if (*(const void **)(a1 + 24) == v10) {
    return *(const void **)(a1 + 32);
  }
  *(void *)(a1 + 24) = v10;
  uint64_t result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v10);
  *(void *)(a1 + 32) = result;
  return result;
}

void sub_1B6610230(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
LABEL_9:
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"target");
    if (a3) {
      goto LABEL_4;
    }
    goto LABEL_10;
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"item");
  if (!a2) {
    goto LABEL_9;
  }
LABEL_3:
  if (a3) {
    goto LABEL_4;
  }
LABEL_10:
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"aValue");
LABEL_4:
  int v12 = *(unsigned __int8 *)(a1[1].n128_u64[1] + 37);
  uint64_t v20 = (long long *)sub_1B6562568(a3, a2, a3, a4, a5, a6, a7, a8);
  if (v12)
  {
    unint64_t v21 = sub_1B63CA534(*(__int16 *)(a2 + 32), v13, v14, v15, v16, v17, v18, v19);
    uint64_t v26 = *(char *)(a2 + 34);
    uint64_t v27 = *(unsigned __int8 *)(a2 + 35);
    sub_1B6456160(a1 + 2, v20, v21, v26, v27, v22, v23, v24, v25, a9);
  }
  else
  {
    size_t v28 = a1[8].n128_i16[1];
    memcpy(&a1[2], v20, v28);
  }
}

void sub_1B6610358(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"target");
LABEL_3:
  int v12 = (__n128 *)sub_1B661018C(a1, a2, a3, a4, a5, a6, a7, a8);
  if (v12)
  {
    sub_1B6610230(v12, a2, a3, v13, v14, v15, v16, v17, a9);
  }
}

uint64_t sub_1B6610414(uint64_t result, uint64_t a2)
{
  *(void *)(a2 + 152) = *(void *)(result + 40);
  return result;
}

void *sub_1B6610420(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const void *)sub_1B64A260C(a2);
  if (*(const void **)(a1 + 24) == v3)
  {
    uint64_t result = *(void **)(a1 + 32);
    if (!result) {
      return result;
    }
  }
  else
  {
    *(void *)(a1 + 24) = v3;
    uint64_t result = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v3);
    *(void *)(a1 + 32) = result;
    if (!result) {
      return result;
    }
  }
  result[19] = *(void *)(a1 + 40);
  return result;
}

void sub_1B6610480(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (const void *)sub_1B64A260C(a2);
  if (*(const void **)(a1 + 24) == v3)
  {
    uint64_t Value = *(const void **)(a1 + 32);
    if (!Value) {
      return;
    }
  }
  else
  {
    *(void *)(a1 + 24) = v3;
    uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v3);
    *(void *)(a1 + 32) = Value;
    if (!Value) {
      return;
    }
  }

  sub_1B66104F8(a1, (uint64_t)Value, v4, v5, v6, v7, v8, v9);
}

void sub_1B66104F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (a2) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
    if (a2) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"item");
LABEL_3:
  uint64_t v10 = *(void *)(a1 + 40);
  if (*(void *)(a2 + 152) != v10)
  {
    *(void *)(a2 + 152) = v10;
    uint64_t v18 = sub_1B660F8C4(*(void *)(a2 + 24), a2, a3, a4, a5, a6, a7, a8);
    uint64_t v19 = *(void *)(a2 + 24);
    if (*(unsigned char *)(v19 + 37))
    {
      v38[0] = sub_1B6454C84((unsigned char *)(a2 + 32), v11, v12, v13, v14, v15, v16, v17);
      v38[1] = v20;
      v38[2] = v21;
      v38[3] = v22;
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, _OWORD *, uint64_t, uint64_t, void))(a2 + 144);
      uint64_t v31 = sub_1B660F878(*(void *)(a2 + 24), v24, v25, v26, v27, v28, v29, v30);
      v23(v31, v18, v38, 64, 8, 0);
    }
    else
    {
      uint64_t v37 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 144);
      uint64_t v32 = sub_1B660F878(v19, (uint64_t)v37, v12, v13, v14, v15, v16, v17);
      uint64_t v33 = *(__int16 *)(a2 + 130);
      uint64_t v34 = *(void *)(a2 + 24);
      uint64_t v35 = *(char *)(v34 + 34);
      uint64_t v36 = *(unsigned __int8 *)(v34 + 35);
      v37(v32, v18, a2 + 32, v33, v35, v36);
    }
  }
}

uint64_t sub_1B6610620(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v14 = sub_1B660F8C4(a2[3], (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  a2[19] = *(void *)(a1 + 40);
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))a2[18];
  uint64_t v22 = sub_1B660F878(a2[3], v15, v16, v17, v18, v19, v20, v21);

  return v24(v22, v14, a5, a6, a3, a4);
}

uint64_t sub_1B66106C0(uint64_t a1, uint64_t *a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = a2[3];
  uint64_t v12 = *(void *)(result + 24);
  a2[19] = *(void *)(a1 + 40);
  if (a4 == 7)
  {
    uint64_t v69 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, void))a2[18];
    uint64_t v13 = sub_1B660F878(result, (uint64_t)v69, (uint64_t)a3, a4, a5, a6, a7, a8);
    return v69(v13, v12, a3, 96, 8, 0);
  }
  char v14 = a4;
  if (a4)
  {
    __n128 v70 = sub_1B64556B4(a3);
    uint64_t v15 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, void))a2[18];
    uint64_t v23 = sub_1B660F878(a2[3], v16, v17, v18, v19, v20, v21, v22);
    uint64_t result = v15(v23, v12, &v70, 16, 6, 0);
    if ((v14 & 4) == 0)
    {
LABEL_7:
      if ((v14 & 2) == 0) {
        return result;
      }
      goto LABEL_11;
    }
  }
  else if ((a4 & 4) == 0)
  {
    goto LABEL_7;
  }
  __n128 v70 = sub_1B64556CC((uint64_t)a3, (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  uint64_t v24 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, void))a2[18];
  uint64_t v32 = sub_1B660F878(a2[3], v25, v26, v27, v28, v29, v30, v31);
  uint64_t result = v24(v32, v12, &v70, 16, 7, 0);
  if ((v14 & 2) == 0) {
    return result;
  }
LABEL_11:
  uint64_t result = sub_1B6454C5C((uint64_t)a3);
  switch(result)
  {
    case 2:
      sub_1B64555C8((float32x4_t *)a3, v33, v34, v35, v36, v37, v38, v39);
      __n128 v70 = v50;
      uint64_t v51 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, void))a2[18];
      uint64_t v59 = sub_1B660F878(a2[3], v52, v53, v54, v55, v56, v57, v58);
      return v51(v59, v12, &v70, 16, 4, 0);
    case 1:
      __n128 v70 = sub_1B64554E4((float32x4_t *)a3, v33, v34, v35, v36, v37, v38, v39);
      uint64_t v67 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, void))a2[18];
      uint64_t v68 = sub_1B660F878(a2[3], v60, v61, v62, v63, v64, v65, v66);
      return v67(v68, v12, &v70, 16, 5, 0);
    case 0:
      v40.n128_f64[0] = sub_1B6454F54((float32x4_t *)a3, v33, v34, v35, v36, v37, v38, v39);
      __n128 v70 = v40;
      uint64_t v41 = (uint64_t (*)(uint64_t, uint64_t, __n128 *, uint64_t, uint64_t, void))a2[18];
      uint64_t v49 = sub_1B660F878(a2[3], v42, v43, v44, v45, v46, v47, v48);
      return v41(v49, v12, &v70, 16, 3, 0);
  }
  return result;
}

void sub_1B6610884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"storage");
  }
  ++*(void *)(a1 + 40);
}

void sub_1B66108DC(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 24) = 0;
  }
}

CFStringRef sub_1B661090C(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXModelValueStorageItem %p>", a1);
}

CFStringRef sub_1B661094C(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXModelValueStorageItem %p>", a1);
}

void sub_1B6610990(uint64_t a1)
{
  CFAllocatorRef v2 = *(const void **)(a1 + 16);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 16) = 0;
  }
}

CFStringRef sub_1B66109C0(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXModelValueStorage>");
}

CFStringRef sub_1B66109F4(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXModelValueStorage>");
}

__n128 sub_1B6610A28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v6 = *a4;
  uint64_t v7 = &qword_1E9DDB000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBEF8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v12 = a2;
    uint64_t v13 = a3;
    uint64_t v14 = v6;
    int v11 = __cxa_guard_acquire(&qword_1E9DDBEF8);
    uint64_t v7 = &qword_1E9DDB000;
    a3 = v13;
    uint64_t v6 = v14;
    a2 = v12;
    if (v11)
    {
      byte_1E9DDBEF0 = 1;
      __cxa_guard_release(&qword_1E9DDBEF8);
      uint64_t v7 = &qword_1E9DDB000;
      a3 = v13;
      uint64_t v6 = v14;
      a2 = v12;
    }
  }
  if (*((unsigned char *)v7 + 3824)) {
    uint64_t v8 = 0x942F6080D78D35A4;
  }
  else {
    uint64_t v8 = 0;
  }
  CFX::RG::Pass::Pass(a1, a2, a3, v6, 1, v8, 0);
  *(void *)a1 = &unk_1F0FB4080;
  __n128 result = *(__n128 *)a4;
  uint64_t v10 = a4[2];
  *(_OWORD *)(a1 + 360) = *(_OWORD *)a4;
  *(void *)(a1 + 376) = v10;
  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  *(void *)(a1 + 400) = 0;
  return result;
}

void sub_1B6610B14(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (unint64_t)*(float *)(a1 + 368));
  uint64_t v6 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) ^ ((0x9DDFEA08EB382D69 * (v4 ^ (v5 >> 47) ^ v5)) >> 47));
  uint64_t v7 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v6);
  *(void *)(a1 + 384) = v7;
  if (!v7)
  {
    *(void *)(a1 + 384) = sub_1B6610BF0(*(CFX::CrossFrameResourceManager **)(a2 + 32), v6);
    uint64_t v15 = (void *)sub_1B6445900(*(void *)(a1 + 376), v8, v9, v10, v11, v12, v13, v14);
    uint64_t v16 = *(void *)(a1 + 384);
    id v17 = objc_alloc(MEMORY[0x1E4F35588]);
    uint64_t v21 = objc_msgSend_device(v15, v18, v19, v20);
    LODWORD(v22) = *(_DWORD *)(a1 + 368);
    uint64_t v25 = objc_msgSend_initWithDevice_sigma_(v17, v23, v21, v24, v22);
    uint64_t v26 = *(void **)(v16 + 16);
    if (v26 != (void *)v25)
    {
      uint64_t v27 = v25;
      if (v26) {

      }
      *(void *)(v16 + 16) = v27;
    }
  }
}

uint64_t sub_1B6610BF0(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v2 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v2) {
    operator new();
  }
  return v2;
}

uint64_t sub_1B6610C78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  id Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 392));
  CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 400));
  uint64_t v7 = *(void *)(*(void *)(a1 + 384) + 16);
  uint64_t v8 = *(void *)(a3 + 16);

  return MEMORY[0x1F4181798](v7, sel_encodeToCommandBuffer_sourceTexture_destinationTexture_, v8, Texture);
}

void sub_1B6610CE8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  if (a3 == 2)
  {
    sub_1B6610C78(a1, a2, a4 + 8);
  }
  else if (a3 == 1)
  {
    sub_1B6610B14(a1, a2);
  }
}

uint64_t *sub_1B6610D08(uint64_t *a1, uint64_t a2, uint64_t a3, float a4)
{
  v29[0] = a2;
  v29[1] = LODWORD(a4);
  v29[2] = *(void *)a3;
  uint64_t v6 = (uint64_t *)sub_1B6610E20(a1, v29);
  uint64_t v7 = (_OWORD *)CFX::RG::Resource::constTextureDesc(*(CFX::RG::Resource **)(a3 + 8));
  long long v8 = v7[1];
  v22[0] = *v7;
  v22[1] = v8;
  long long v9 = v7[5];
  long long v11 = v7[2];
  long long v10 = v7[3];
  long long v23 = v7[4];
  long long v24 = v9;
  _OWORD v22[2] = v11;
  v22[3] = v10;
  long long v12 = v7[9];
  long long v14 = v7[6];
  long long v13 = v7[7];
  long long v27 = v7[8];
  long long v28 = v12;
  long long v25 = v14;
  long long v26 = v13;
  uint64_t v15 = *(CFX::RG::RenderGraphBuilder **)(a3 + 8);
  CFX::RG::TextureDescriptorReference::withSampleCount(v22, 1, (uint64_t)v21);
  id v17 = (CFX::RG::Resource *)CFX::RG::copyIfNeeded((CFX::RG *)a1, v15, 0, (CFX::RG::Pass *)v21, (const CFX::RG::TextureDescriptorReference *)"MPSGaussianBlur color input resolve", v16);
  v6[49] = (uint64_t)v17;
  CFX::RG::Pass::readFrom(v6, v17);
  if (!(_BYTE)v24) {
    LOBYTE(v24) = 1;
  }
  *((void *)&v23 + 1) = 2;
  CFX::RG::TextureDescriptorReference::withSampleCount(v22, 1, (uint64_t)v20);
  uint64_t v18 = sub_1B63CFDE4(a1, (uint64_t)"color", v20);
  v6[50] = (uint64_t)v18;
  CFX::RG::Pass::writeTo(v6, v18);
  return v6;
}

uint64_t sub_1B6610E20(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = a1[1];
  v7[0] = *a1;
  v7[1] = v4;
  sub_1B6610F68(v7[0], v4, v7, a2);
  v7[0] = v5;
  sub_1B63C88CC(a1 + 18, v7);
  return v7[0];
}

void sub_1B6610E78(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

void *sub_1B6610EB0(void *a1)
{
  *a1 = &unk_1F0FB4060;
  uint64_t v2 = (void *)a1[2];
  if (v2) {

  }
  return a1;
}

void sub_1B6610EFC(void *a1)
{
  *a1 = &unk_1F0FB4060;
  CFAllocatorRef v1 = (void *)a1[2];
  if (v1) {

  }
  JUMPOUT(0x1BA9B6D80);
}

double sub_1B6610F68(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v6 = sub_1B63C8330(v8, 0x198u, 8u);
  *(void *)&double result = sub_1B6610A28(v6, *a3, a3[1], a4).n128_u64[0];
  return result;
}

uint64_t sub_1B6611240(uint64_t a1)
{
  return sub_1B66054A0(*(void *)(*(void *)(a1 + 32) + 8), *(unsigned char *)(a1 + 40));
}

uint64_t sub_1B6611300(uint64_t a1)
{
  return sub_1B66054A8(*(void *)(*(void *)(a1 + 32) + 8), *(unsigned char *)(a1 + 40));
}

uint64_t sub_1B66113D4(uint64_t a1)
{
  return sub_1B66054B8(*(void *)(*(void *)(a1 + 32) + 8), *(float *)(a1 + 40));
}

void sub_1B6611788(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  objc_msgSend_prepareWithTarget_implicitDuration_(*(void **)(a1 + 32), a2, *(void *)(a1 + 40), a4);
  if ((sub_1B65005BC(*(void **)(a1 + 32), *(char **)(a1 + 40), *(void **)(a1 + 48), v5, v6, v7, v8, v9) & 1) == 0)
  {
    os_unfair_lock_lock((os_unfair_lock_t)(*(void *)(a1 + 40) + 16));
    objc_msgSend_removeObjectForKey_(*(void **)(*(void *)(a1 + 40) + 24), v10, *(void *)(a1 + 48), v11);
    long long v12 = (os_unfair_lock_s *)(*(void *)(a1 + 40) + 16);
    os_unfair_lock_unlock(v12);
  }
}

void sub_1B661199C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B6611A64(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B6611B40(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B6611C24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1B6612164(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  long long v24 = objc_alloc_init(CFXBinding);
  uint64_t v9 = objc_msgSend___CFObject(*(void **)(a1 + 40), v6, v7, v8);
  objc_msgSend_setSourceObject_(v24, v10, v9, v11);
  objc_msgSend_setKeyPathDst_(v24, v12, *(void *)(a1 + 48), v13);
  objc_msgSend_setKeyPathSrc_(v24, v14, *(void *)(a1 + 56), v15);
  objc_msgSend_setOptions_(v24, v16, *(void *)(a1 + 64), v17);
  sub_1B65844C0(v5, v24, v18, v19, v20, v21, v22, v23);
}

void sub_1B66122C0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);
  CFStringRef v12 = *(const __CFString **)(a1 + 40);

  sub_1B6584728(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B661239C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = (CFTypeRef *)objc_msgSend___CFObject(*(void **)(a1 + 32), a2, a3, a4);

  sub_1B658469C(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B66126C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

CFTypeRef sub_1B66127B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B6463220(*(void *)(*(void *)(a1 + 32) + 8), *(CFTypeRef *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

double sub_1B6612884(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)&double result = sub_1B66061D8((__n128 *)*(void *)(a1[3].n128_u64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
  return result;
}

double sub_1B6612958(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)&double result = sub_1B6606234((__n128 *)*(void *)(a1[3].n128_u64[0] + 8), a1[2], a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
  return result;
}

void sub_1B6612A34(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

CFTypeRef sub_1B6613224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B6463220(*(void *)(*(void *)(a1 + 32) + 8), *(CFTypeRef *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B66132F0(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B66133C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B6613498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B6613570(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

CFTypeRef sub_1B6613ADC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B6463220(*(void *)(*(void *)(a1 + 32) + 8), *(CFTypeRef *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B6613C00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B6613CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B6613DA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B6613E74(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B6613F48(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B661401C(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B6614724(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B66147FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B66148C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B66149AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B6614D3C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B6614E0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

double sub_1B6614ED4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  *(void *)&double result = sub_1B64630C4((__n128 *)*(void *)(*(void *)(a1 + 32) + 8), *(__n128 *)(*(void *)(a1 + 32) + 64), a2, a3, a4, a5, a6, a7, a8).n128_u64[0];
  return result;
}

uint64_t sub_1B6615570(void *a1, char *a2, id *a3, uint64_t a4)
{
  uint64_t v7 = objc_msgSend_delegate(a1, a2, (uint64_t)a3, a4);
  uint64_t v8 = sub_1B6583674((id *)a2);
  uint64_t v9 = sub_1B6583674(a3);
  if (!v8 || !v9) {
    return 1;
  }

  return MEMORY[0x1F4181798](v7, sel_avoidOccluderConstraint_shouldAvoidOccluder_forNode_, a1, v8);
}

void sub_1B66155FC(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = sub_1B64611F0(a1[4], a1[5], a1[6], a4, a5, a6, a7, a8);
  sub_1B64631A4(*(void *)(a1[4] + 8), v9, v10, v11, v12, v13, v14, v15);

  CFRelease(v9);
}

CFTypeRef sub_1B6615734(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B6463220(*(void *)(*(void *)(a1 + 32) + 8), *(CFTypeRef *)(a1 + 40), a3, a4, a5, a6, a7, a8);
}

void sub_1B66157F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B66158C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

uint64_t sub_1B6615C50(uint64_t a1)
{
  return sub_1B660758C(*(void *)(*(void *)(a1 + 32) + 8), *(_DWORD *)(a1 + 40));
}

uint64_t sub_1B6615D10(uint64_t a1)
{
  return sub_1B6607594(*(void *)(*(void *)(a1 + 32) + 8), *(unsigned char *)(a1 + 40));
}

uint64_t sub_1B661604C(uint64_t a1)
{
  return sub_1B6608410(*(void *)(*(void *)(a1 + 32) + 8), *(float *)(a1 + 40));
}

uint64_t sub_1B661611C(uint64_t a1)
{
  return sub_1B6607594(*(void *)(*(void *)(a1 + 32) + 8), *(unsigned char *)(a1 + 40));
}

void *sub_1B6616390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v12 = (__n128 *)sub_1B64A01D4(a3, a2, a3, a4, a5, a6, a7, a8);
    __n128 v151 = v12[1];
    __n128 v155 = *v12;
    __n128 v141 = v12[3];
    __n128 v145 = v12[2];
  }
  else
  {
    v15.n128_f64[0] = sub_1B649FE9C(a3, a2, a3, a4, a5, a6, a7, a8);
    __n128 v151 = v16;
    __n128 v155 = v15;
    __n128 v141 = v18;
    __n128 v145 = v17;
  }
  objc_msgSend_nodeWithNodeRef_(VFXNode, v13, a3, v14);
  v19.n128_f64[0] = (*(double (**)(__n128, __n128, __n128, __n128))(*(void *)(a1 + 32) + 16))(v155, v151, v145, v141);
  __n128 v20 = v19;
  __n128 v22 = v21;
  __n128 v24 = v23;
  __n128 v26 = v25;
  __n128 v28 = v151;
  __n128 v27 = v155;
  __n128 v30 = v141;
  __n128 v29 = v145;
  float32x4_t v152 = (float32x4_t)v22;
  float32x4_t v156 = (float32x4_t)v20;
  __n128 v142 = v26;
  float32x4_t v146 = (float32x4_t)v24;
  double result = (void *)VFXMatrix4EqualToMatrix4(v27, v28, v29, v30, v20, v22, v24, v26);
  if ((result & 1) == 0)
  {
    float32x4_t v158 = v156;
    float32x4_t v159 = v152;
    float32x4_t v160 = v146;
    __n128 v161 = v142;
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t v39 = sub_1B64A1E7C(a3, v32, v33, v34, v35, v36, v37, v38);
      if (v39)
      {
        *(double *)v40.i64 = sub_1B64A2220(v39, v32, v33, v34, v35, v36, v37, v38);
        uint64_t v44 = 0;
        v162[0] = v156;
        v162[1] = v152;
        v162[2] = v146;
        v162[3] = (float32x4_t)v142;
        float32x4_t v163 = 0u;
        float32x4_t v164 = 0u;
        float32x4_t v165 = 0u;
        __n128 v166 = 0u;
        do
        {
          *(float32x4_t *)((char *)&v163 + v44 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, COERCE_FLOAT(*(_OWORD *)&v162[v44])), v41, *(float32x2_t *)v162[v44].f32, 1), v42, v162[v44], 2), v43, v162[v44], 3);
          ++v44;
        }
        while (v44 != 4);
        float32x4_t v156 = v163;
        float32x4_t v158 = v163;
        float32x4_t v146 = v165;
        float32x4_t v152 = v164;
        float32x4_t v159 = v164;
        float32x4_t v160 = v165;
        __n128 v142 = v166;
        __n128 v161 = v166;
      }
    }
    uint64_t v45 = (_OWORD *)sub_1B660F8C4(a4, v32, v33, v34, v35, v36, v37, v38);
    uint64_t v53 = v45;
    if (a9 != 1.0)
    {
      float32x4_t v54 = *(float32x4_t *)v45;
      float32x4_t v55 = *((float32x4_t *)v45 + 1);
      float32x4_t v56 = *((float32x4_t *)v45 + 2);
      __n128 v57 = *((__n128 *)v45 + 3);
      float32x4_t v163 = 0uLL;
      v162[0] = 0uLL;
      v170.i32[2] = 0;
      v170.i64[0] = 0;
      v169.i32[2] = 0;
      v169.i64[0] = 0;
      v168.i32[2] = 0;
      v168.i64[0] = 0;
      v167.i32[2] = 0;
      v167.i64[0] = 0;
      float32x4_t v137 = v55;
      float32x4_t v138 = v54;
      float32x4_t v136 = v56;
      __n128 v139 = v57;
      int v58 = sub_1B64329E8(&v163, (__n128 *)&v170, &v168, v54, v55, v56, v57);
      int v59 = sub_1B64329E8(v162, (__n128 *)&v169, &v167, v156, v152, v146, v142);
      if (v58)
      {
        float32x4_t v60 = v138;
        float32x4_t v61 = (float32x4_t)v139;
        float32x4_t v62 = v136;
        float32x4_t v63 = v137;
        if (v59)
        {
          int8x16_t v64 = (int8x16_t)vmulq_f32(v163, v162[0]);
          float32x4_t v153 = v162[0];
          float32x4_t v157 = v163;
          float v65 = 1.0;
          if (vaddv_f32(vadd_f32(*(float32x2_t *)v64.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v64, v64, 8uLL))) >= 0.0)
          {
            float v88 = 1.0 - a9;
            float32x4_t v89 = vsubq_f32(v163, v162[0]);
            int8x16_t v90 = (int8x16_t)vmulq_f32(v89, v89);
            float32x4_t v91 = vaddq_f32(v163, v162[0]);
            int8x16_t v92 = (int8x16_t)vmulq_f32(v91, v91);
            float v93 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v90.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v92.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)))));
            float v94 = v93 + v93;
            _ZF = (float)(v93 + v93) == 0.0;
            float v95 = 1.0;
            if (!_ZF) {
              float v95 = sinf(v94) / v94;
            }
            float v96 = v95;
            float32x2_t v97 = vrecpe_f32((float32x2_t)LODWORD(v95));
            int32x2_t v98 = (int32x2_t)vmul_f32(v97, vrecps_f32((float32x2_t)LODWORD(v96), v97));
            LODWORD(v99) = vmul_f32((float32x2_t)v98, vrecps_f32((float32x2_t)LODWORD(v96), (float32x2_t)v98)).u32[0];
            if ((float)(v88 * v94) != 0.0)
            {
              float v149 = v99;
              *(float *)v98.i32 = sinf(v88 * v94);
              float v99 = v149;
              float v65 = *(float *)v98.i32 / (float)(v88 * v94);
            }
            *(float *)v98.i32 = v88 * (float)(v99 * v65);
            float32x4_t v100 = (float32x4_t)vdupq_lane_s32(v98, 0);
            float v83 = a9;
            float v101 = v94 * a9;
            float v102 = 1.0;
            if (v101 != 0.0)
            {
              float32x4_t v144 = v100;
              float v150 = v99;
              float v103 = sinf(v101);
              float32x4_t v100 = v144;
              float v99 = v150;
              float v83 = a9;
              float v102 = v103 / v101;
            }
            float32x4_t v87 = vmlaq_f32(vmulq_n_f32(v153, (float)(v99 * v102) * v83), v157, v100);
          }
          else
          {
            float v66 = 1.0 - a9;
            float32x4_t v67 = vaddq_f32(v163, v162[0]);
            int8x16_t v68 = (int8x16_t)vmulq_f32(v67, v67);
            float32x4_t v69 = vsubq_f32(v163, v162[0]);
            int8x16_t v70 = (int8x16_t)vmulq_f32(v69, v69);
            float v71 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v68.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v70, v70, 8uLL)))));
            float v72 = v71 + v71;
            _ZF = (float)(v71 + v71) == 0.0;
            float v74 = 1.0;
            if (!_ZF) {
              float v74 = sinf(v72) / v72;
            }
            float v75 = v74;
            float32x2_t v76 = vrecpe_f32((float32x2_t)LODWORD(v74));
            float32x2_t v77 = vmul_f32(v76, vrecps_f32((float32x2_t)LODWORD(v75), v76));
            LODWORD(v78) = vmul_f32(v77, vrecps_f32((float32x2_t)LODWORD(v75), v77)).u32[0];
            if ((float)(v66 * v72) != 0.0)
            {
              float v147 = v78;
              float v79 = sinf(v66 * v72);
              float v78 = v147;
              float v65 = v79 / (float)(v66 * v72);
            }
            v80.i32[1] = v153.i32[1];
            float32x4_t v81 = vnegq_f32(v153);
            *(float *)v80.i32 = v66 * (float)(v78 * v65);
            float32x4_t v82 = (float32x4_t)vdupq_lane_s32(v80, 0);
            float v83 = a9;
            float v84 = v72 * a9;
            float v85 = 1.0;
            if (v84 != 0.0)
            {
              float v148 = v78;
              float32x4_t v154 = v81;
              float32x4_t v143 = v82;
              float v86 = sinf(v84);
              float32x4_t v82 = v143;
              float v78 = v148;
              float32x4_t v81 = v154;
              float v83 = a9;
              float v85 = v86 / v84;
            }
            float32x4_t v87 = vmlaq_f32(vmulq_n_f32(v81, (float)(v78 * v85) * v83), v157, v82);
          }
          int8x16_t v104 = (int8x16_t)vmulq_f32(v87, v87);
          *(float32x2_t *)v104.i8 = vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v104, v104, 8uLL));
          float32x4_t v105 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v104.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v104.i8, 1)), 0);
          float32x4_t v106 = vrsqrteq_f32(v105);
          float32x4_t v107 = vmulq_f32(v106, vrsqrtsq_f32(v105, vmulq_f32(v106, v106)));
          __asm { FMOV            V3.4S, #1.0 }
          float32x4_t v112 = (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v105), _Q3, (int8x16_t)vmulq_f32(v107, vrsqrtsq_f32(v105, vmulq_f32(v107, v107))));
          float32x4_t v61 = vmlaq_n_f32(v170, vsubq_f32(v169, v170), v83);
          float32x4_t v113 = vmlaq_n_f32(v168, vsubq_f32(v167, v168), v83);
          v61.i32[3] = 1.0;
          float32x4_t v114 = vabsq_f32(v113);
          v114.i32[3] = 0;
          float32x4_t v115 = vmulq_f32(v87, v112);
          float32x4_t v116 = vmaxnmq_f32(v114, (float32x4_t)xmmword_1B6E4FCD0);
          v114.i64[0] = 0x8000000080000000;
          v114.i64[1] = 0x8000000080000000;
          float32x4_t v117 = (float32x4_t)vorrq_s8(vandq_s8((int8x16_t)v113, (int8x16_t)v114), (int8x16_t)(*(_OWORD *)&v116 & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)));
          float32x4_t v118 = vmulq_f32(v115, v115);
          float32x4_t v119 = vmulq_laneq_f32(v115, v115, 3);
          float v120 = vmulq_lane_f32(v115, *(float32x2_t *)v115.f32, 1).f32[0];
          float32x4_t v121 = vaddq_f32(v117, v117);
          v118.f32[0] = 0.5 - v118.f32[0];
          *(float32x2_t *)v115.f32 = vmul_laneq_f32(*(float32x2_t *)v115.f32, v115, 2);
          v122.i32[3] = 0;
          v122.f32[0] = (float)(0.5 - v118.f32[1]) - v118.f32[2];
          v122.f32[1] = v120 + v119.f32[2];
          v123.i32[3] = 0;
          v122.f32[2] = v115.f32[0] - v119.f32[1];
          float32x4_t v60 = vmulq_n_f32(v122, v121.f32[0]);
          v123.f32[0] = v120 - v119.f32[2];
          v123.f32[1] = v118.f32[0] - v118.f32[2];
          v123.f32[2] = v115.f32[1] + v119.f32[0];
          float32x4_t v63 = vmulq_lane_f32(v123, *(float32x2_t *)v121.f32, 1);
          *(int32x2_t *)v119.f32 = vrev64_s32(*(int32x2_t *)v119.f32);
          v124.i32[0] = vadd_f32(*(float32x2_t *)v115.f32, *(float32x2_t *)v119.f32).u32[0];
          v124.i32[1] = vsub_f32(*(float32x2_t *)&v115, *(float32x2_t *)&v119).i32[1];
          v124.f32[2] = v118.f32[0] - v118.f32[1];
          v124.i32[3] = 0;
          float32x4_t v62 = vmulq_laneq_f32(v124, v121, 2);
        }
      }
      else
      {
        float32x4_t v60 = v138;
        float32x4_t v61 = (float32x4_t)v139;
        float32x4_t v62 = v136;
        float32x4_t v63 = v137;
      }
      float32x4_t v158 = v60;
      float32x4_t v159 = v63;
      float32x4_t v160 = v62;
      __n128 v161 = (__n128)v61;
    }
    uint64_t v125 = (const void *)sub_1B660F878(a4, v46, v47, v48, v49, v50, v51, v52);
    size_t v133 = sub_1B63CA534(10, v126, v127, v128, v129, v130, v131, v132);
    return sub_1B63F4524(v125, v53, &v158, v133, *(char *)(a4 + 34), *(unsigned __int8 *)(a4 + 35), v134, v135);
  }
  return result;
}

uint64_t sub_1B66169C0(uint64_t a1, uint64_t a2, __n128 *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, __n128 a9)
{
  if (*(unsigned char *)(a1 + 40)) {
    __n128 v14 = *(__n128 *)(sub_1B64A01D4((uint64_t)a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8) + 48);
  }
  else {
    v14.n128_f64[0] = sub_1B64A230C(a3);
  }
  __n128 v52 = v14;
  objc_msgSend_nodeWithNodeRef_(VFXNode, v12, (uint64_t)a3, v13, *(_OWORD *)&a9);
  *(double *)v15.i64 = (*(double (**)(__n128))(*(void *)(a1 + 32) + 16))(v52);
  float32x4_t v51 = v15;
  uint64_t result = VFXVector3EqualToVector3(v15, (float32x4_t)v52);
  if ((result & 1) == 0)
  {
    float32x4_t v53 = v51;
    if (*(unsigned char *)(a1 + 40))
    {
      uint64_t v24 = sub_1B64A1E7C((uint64_t)a3, v17, v18, v19, v20, v21, v22, v23);
      if (v24)
      {
        *(double *)v25.i64 = sub_1B64A2220(v24, v17, v18, v19, v20, v21, v22, v23);
        float32x4_t v53 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v27, v26, v51, 2), v28, *(float32x2_t *)v51.f32, 1), v25, v51.f32[0]);
        float32x4_t v51 = v53;
      }
    }
    if (v50 != 1.0)
    {
      *(double *)v29.i64 = sub_1B64A230C(a3);
      float32x4_t v53 = vmlaq_n_f32(v29, vsubq_f32(v51, v29), v50);
    }
    __n128 v30 = (const void *)sub_1B660F878(a4, v17, v18, v19, v20, v21, v22, v23);
    uint64_t v38 = (void *)sub_1B660F8C4(a4, v31, v32, v33, v34, v35, v36, v37);
    size_t v46 = sub_1B63CA534(8, v39, v40, v41, v42, v43, v44, v45);
    return (uint64_t)sub_1B63F4524(v30, v38, &v53, v46, *(char *)(a4 + 34), *(unsigned __int8 *)(a4 + 35), v47, v48);
  }
  return result;
}

void sub_1B6616BB0(uint64_t a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, float a9)
{
  if (*(unsigned char *)(a1 + 40))
  {
    float32x4_t v149 = 0uLL;
    sub_1B64A1F4C((uint64_t)a3, &v149, (uint64_t)a3, a4, a5, a6, a7, a8);
    float32x4_t v15 = v149;
  }
  else
  {
    *(double *)v15.i64 = sub_1B64A2500(a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  }
  __n128 v146 = (__n128)v15;
  objc_msgSend_nodeWithNodeRef_(VFXNode, v13, (uint64_t)a3, v14);
  *(double *)v23.i64 = (*(double (**)(__n128))(*(void *)(a1 + 32) + 16))(v146);
  if ((vminvq_u32((uint32x4_t)vceqq_f32(v23, (float32x4_t)v146)) & 0x80000000) != 0) {
    return;
  }
  float32x4_t v147 = v23;
  float32x4_t v149 = v23;
  if (*(unsigned char *)(a1 + 40))
  {
    uint64_t v24 = sub_1B64A1E7C((uint64_t)a3, v16, v17, v18, v19, v20, v21, v22);
    if (v24)
    {
      *(double *)v25.i64 = sub_1B64A2220(v24, v16, v17, v18, v19, v20, v21, v22);
      int32x4_t v26 = (int32x4_t)vmulq_f32(v25, v25);
      int32x4_t v28 = (int32x4_t)vmulq_f32(v27, v27);
      int32x4_t v30 = (int32x4_t)vmulq_f32(v29, v29);
      int32x4_t v31 = vzip2q_s32(v26, v30);
      float32x4_t v32 = (float32x4_t)vzip1q_s32(vzip1q_s32(v26, v30), v28);
      float32x4_t v33 = (float32x4_t)vtrn2q_s32(v26, v28);
      v33.i32[2] = v30.i32[1];
      float32x4_t v34 = vaddq_f32((float32x4_t)vzip1q_s32(v31, vdupq_laneq_s32(v28, 2)), vaddq_f32(v32, v33));
      v33.i64[0] = 0x80000000800000;
      v33.i64[1] = 0x80000000800000;
      int8x16_t v35 = (int8x16_t)vcgeq_f32(v33, v34);
      v34.i32[3] = 0;
      float32x4_t v36 = vrsqrteq_f32(v34);
      float32x4_t v37 = vmulq_f32(v36, vrsqrtsq_f32(v34, vmulq_f32(v36, v36)));
      int32x4_t v38 = (int32x4_t)v35;
      v38.i32[3] = 0;
      float32x4_t v39 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v38), (int8x16_t)v34, (int8x16_t)vmulq_f32(v37, vrsqrtsq_f32(v34, vmulq_f32(v37, v37))));
      float32x4_t v40 = vmulq_n_f32(v25, v39.f32[0]);
      float32x4_t v41 = vmulq_lane_f32(v27, *(float32x2_t *)v39.f32, 1);
      float32x4_t v42 = vmulq_laneq_f32(v29, v39, 2);
      int8x16_t v43 = (int8x16_t)vuzp1q_s32((int32x4_t)v42, (int32x4_t)v42);
      int8x16_t v44 = (int8x16_t)vuzp1q_s32((int32x4_t)v41, (int32x4_t)v41);
      int32x4_t v45 = (int32x4_t)v40;
      if (v35.i32[0])
      {
        int8x16_t v46 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v43, (int8x16_t)v42, 0xCuLL), vnegq_f32(v41)), v42, (float32x4_t)vextq_s8(v44, (int8x16_t)v41, 0xCuLL));
        int32x4_t v45 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v46, (int32x4_t)v46), v46, 0xCuLL);
      }
      int8x16_t v47 = (int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40);
      float32x4_t v48 = v41;
      if (v35.i32[1])
      {
        int8x16_t v49 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v47, (int8x16_t)v40, 0xCuLL), vnegq_f32(v42)), v40, (float32x4_t)vextq_s8(v43, (int8x16_t)v42, 0xCuLL));
        float32x4_t v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v49, (int32x4_t)v49), v49, 0xCuLL);
      }
      if (v35.i32[2])
      {
        int8x16_t v35 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v44, (int8x16_t)v41, 0xCuLL), vnegq_f32(v40)), v41, (float32x4_t)vextq_s8(v47, (int8x16_t)v40, 0xCuLL));
        float32x4_t v42 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), v35, 0xCuLL);
      }
      float v50 = (float)(*(float *)v45.i32 + v48.f32[1]) + v42.f32[2];
      if (v50 > 0.0)
      {
        float32x4_t v51 = (float32x4_t)vzip2q_s32((int32x4_t)v48, vuzp1q_s32((int32x4_t)v48, (int32x4_t)v42));
        v51.i32[2] = v45.i32[1];
        float v52 = sqrtf(v50 + 1.0);
        float32x4_t v53 = (float32x4_t)vtrn2q_s32((int32x4_t)v42, vzip2q_s32((int32x4_t)v42, v45));
        v53.i32[2] = v48.i32[0];
        float32x4_t v55 = vsubq_f32(v51, v53);
        v51.f32[3] = v52;
        v53.f32[3] = v52;
        float32x4_t v54 = vmulq_f32(v51, v53);
        v55.i32[3] = v54.i32[3];
LABEL_24:
        v54.f32[0] = 0.5 / v52;
        float32x4_t v65 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v54.f32, 0);
        goto LABEL_25;
      }
      if (*(float *)v45.i32 < v48.f32[1] || *(float *)v45.i32 < v42.f32[2])
      {
        if (v48.f32[1] <= v42.f32[2])
        {
          float v52 = sqrtf((float)((float)(v42.f32[2] + 1.0) - *(float *)v45.i32) - v48.f32[1]);
          *(float32x2_t *)v55.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v45, (int32x4_t)v48), *(float32x2_t *)v42.f32);
          float32x2_t v66 = (float32x2_t)__PAIR64__(v45.u32[1], LODWORD(v52));
          float32x2_t v67 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.f32, 0);
          *(float32x2_t *)v54.f32 = vsub_f32(*(float32x2_t *)v45.i8, v67);
          v67.f32[0] = v52;
          v67.i32[0] = vmul_f32(v66, v67).u32[0];
          v67.i32[1] = v54.i32[1];
          *(float32x2_t *)&v55.u32[2] = v67;
          goto LABEL_24;
        }
        float v59 = sqrtf((float)((float)(v48.f32[1] + 1.0) - *(float *)v45.i32) - v42.f32[2]);
        *(int32x2_t *)v35.i8 = vdup_laneq_s32((int32x4_t)v48, 2);
        int8x16_t v57 = v35;
        *(float *)v57.i32 = v59;
        v57.i32[0] = vmul_f32(*(float32x2_t *)v57.i8, (float32x2_t)__PAIR64__(v42.u32[1], LODWORD(v59))).u32[0];
        v57.i32[1] = vadd_f32(*(float32x2_t *)&v35, *(float32x2_t *)&v42).i32[1];
        int8x16_t v58 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v45.i8, 1), v48);
        int32x2_t v64 = (int32x2_t)vsubq_f32(v42, (float32x4_t)vdupq_laneq_s32(v45, 2)).u64[0];
        float32x4_t v65 = (float32x4_t)vextq_s8(vextq_s8(v58, v58, 4uLL), v57, 0xCuLL);
        v65.i32[3] = v64.i32[0];
      }
      else
      {
        float v59 = sqrtf((float)((float)(*(float *)v45.i32 + 1.0) - v48.f32[1]) - v42.f32[2]);
        float32x2_t v60 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v48.f32, 0);
        float32x2_t v61 = vadd_f32(*(float32x2_t *)v45.i8, v60);
        v60.f32[0] = v59;
        v65.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v45.u32[1], LODWORD(v59)), v60).u32[0];
        v65.i32[1] = v61.i32[1];
        float32x2_t v62 = (float32x2_t)vzip2q_s32(v45, (int32x4_t)v48).u64[0];
        LODWORD(v63) = vadd_f32(v62, *(float32x2_t *)v42.f32).u32[0];
        int32x2_t v64 = (int32x2_t)vsub_f32(v62, *(float32x2_t *)v42.f32);
        HIDWORD(v63) = v64.i32[1];
        v65.i64[1] = v63;
      }
      *(float *)v64.i32 = 0.5 / v59;
      float32x4_t v55 = (float32x4_t)vdupq_lane_s32(v64, 0);
LABEL_25:
      _Q0 = vmulq_f32(v55, v65);
      _S1 = v147.i32[3];
      int8x16_t v70 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v147, (int32x4_t)v147), (int8x16_t)v147, 0xCuLL), vnegq_f32(_Q0)), v147, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q0, (int32x4_t)_Q0), (int8x16_t)_Q0, 0xCuLL));
      float32x4_t v71 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(_Q0, v147, 3), v147, _Q0, 3), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v70, (int32x4_t)v70), v70, 0xCuLL));
      __asm { FMLA            S3, S1, V0.S[3] }
      v71.i32[3] = _S3;
      float32x4_t v147 = v71;
      float32x4_t v149 = v71;
    }
  }
  float32x2_t v76 = (float32x4_t *)sub_1B660F8C4(a4, v16, v17, v18, v19, v20, v21, v22);
  float v84 = v76;
  if (a9 != 1.0)
  {
    float32x4_t v85 = *v76;
    int8x16_t v86 = (int8x16_t)vmulq_f32(*v76, v147);
    float32x4_t v145 = *v76;
    float v87 = 1.0;
    float v88 = 1.0 - a9;
    if (vaddv_f32(vadd_f32(*(float32x2_t *)v86.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v86, v86, 8uLL))) >= 0.0)
    {
      float32x4_t v108 = vsubq_f32(v85, v147);
      int8x16_t v109 = (int8x16_t)vmulq_f32(v108, v108);
      float32x4_t v110 = vaddq_f32(v85, v147);
      int8x16_t v111 = (int8x16_t)vmulq_f32(v110, v110);
      float v112 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v109.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v109, v109, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v111.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v111, v111, 8uLL)))));
      float v113 = v112 + v112;
      _ZF = (float)(v112 + v112) == 0.0;
      float v114 = 1.0;
      if (!_ZF) {
        float v114 = sinf(v113) / v113;
      }
      float v115 = v114;
      float32x2_t v116 = vrecpe_f32((float32x2_t)LODWORD(v114));
      int32x2_t v117 = (int32x2_t)vmul_f32(v116, vrecps_f32((float32x2_t)LODWORD(v115), v116));
      LODWORD(v118) = vmul_f32((float32x2_t)v117, vrecps_f32((float32x2_t)LODWORD(v115), (float32x2_t)v117)).u32[0];
      if ((float)(v88 * v113) != 0.0)
      {
        float v143 = v118;
        *(float *)v117.i32 = sinf(v88 * v113);
        float v118 = v143;
        float v87 = *(float *)v117.i32 / (float)(v88 * v113);
      }
      *(float *)v117.i32 = v88 * (float)(v118 * v87);
      float32x4_t v119 = (float32x4_t)vdupq_lane_s32(v117, 0);
      float v120 = v113 * a9;
      float v121 = 1.0;
      if (v120 != 0.0)
      {
        float32x4_t v140 = v119;
        float v144 = v118;
        float v122 = sinf(v120);
        float32x4_t v119 = v140;
        float v118 = v144;
        float v121 = v122 / v120;
      }
      float32x4_t v107 = vmlaq_f32(vmulq_n_f32(v147, (float)(v118 * v121) * a9), v145, v119);
    }
    else
    {
      float32x4_t v89 = vaddq_f32(v85, v147);
      int8x16_t v90 = (int8x16_t)vmulq_f32(v89, v89);
      float32x4_t v91 = vsubq_f32(v85, v147);
      int8x16_t v92 = (int8x16_t)vmulq_f32(v91, v91);
      float v93 = atan2f(sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v90.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v90, v90, 8uLL)))), sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v92.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v92, v92, 8uLL)))));
      float v94 = v93 + v93;
      _ZF = (float)(v93 + v93) == 0.0;
      float v95 = 1.0;
      if (!_ZF) {
        float v95 = sinf(v94) / v94;
      }
      float v96 = v95;
      float32x2_t v97 = vrecpe_f32((float32x2_t)LODWORD(v95));
      float32x2_t v98 = vmul_f32(v97, vrecps_f32((float32x2_t)LODWORD(v96), v97));
      LODWORD(v99) = vmul_f32(v98, vrecps_f32((float32x2_t)LODWORD(v96), v98)).u32[0];
      if ((float)(v88 * v94) != 0.0)
      {
        float v141 = v99;
        float v100 = sinf(v88 * v94);
        float v99 = v141;
        float v87 = v100 / (float)(v88 * v94);
      }
      v101.i32[1] = v147.i32[1];
      float32x4_t v102 = vnegq_f32(v147);
      *(float *)v101.i32 = v88 * (float)(v99 * v87);
      float32x4_t v103 = (float32x4_t)vdupq_lane_s32(v101, 0);
      float v104 = v94 * a9;
      float v105 = 1.0;
      if (v104 != 0.0)
      {
        float32x4_t v139 = v103;
        float v142 = v99;
        float32x4_t v148 = v102;
        float v106 = sinf(v104);
        float32x4_t v103 = v139;
        float v99 = v142;
        float32x4_t v102 = v148;
        float v105 = v106 / v104;
      }
      float32x4_t v107 = vmlaq_f32(vmulq_n_f32(v102, (float)(v99 * v105) * a9), v145, v103);
    }
    int8x16_t v123 = (int8x16_t)vmulq_f32(v107, v107);
    *(float32x2_t *)v123.i8 = vadd_f32(*(float32x2_t *)v123.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v123, v123, 8uLL));
    float32x4_t v124 = (float32x4_t)vdupq_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v123.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v123.i8, 1)), 0);
    float32x4_t v125 = vrsqrteq_f32(v124);
    float32x4_t v126 = vmulq_f32(v125, vrsqrtsq_f32(v124, vmulq_f32(v125, v125)));
    __asm { FMOV            V3.4S, #1.0 }
    float32x4_t v149 = vmulq_f32(v107, (float32x4_t)vbslq_s8((int8x16_t)vceqzq_f32(v124), _Q3, (int8x16_t)vmulq_f32(v126, vrsqrtsq_f32(v124, vmulq_f32(v126, v126)))));
  }
  uint64_t v128 = (const void *)sub_1B660F878(a4, v77, v78, v79, v80, v81, v82, v83);
  size_t v136 = sub_1B63CA534(9, v129, v130, v131, v132, v133, v134, v135);
  sub_1B63F4524(v128, v84, &v149, v136, *(char *)(a4 + 34), *(unsigned __int8 *)(a4 + 35), v137, v138);
}

void sub_1B66175F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v5 = objc_msgSend_nodeRef(*(void **)(a1 + 40), a2, a3, a4);

  sub_1B6608CA4(v4, v5, v6, v7, v8, v9, v10, v11);
}

void sub_1B66176F8(__n128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
}

void sub_1B66178C8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  float v5 = *(float *)(a1 + 48) / 180.0 * 3.14159265;
  uint64_t v6 = objc_msgSend_nodeRef(*(void **)(a1 + 40), a2, a3, a4);

  sub_1B6608D58(v4, v6, v5);
}

uint64_t sub_1B66182A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8 = &qword_1E9DDB000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBF08, memory_order_acquire) & 1) == 0)
  {
    uint64_t v22 = a2;
    uint64_t v23 = a3;
    int v21 = __cxa_guard_acquire(&qword_1E9DDBF08);
    uint64_t v8 = &qword_1E9DDB000;
    a2 = v22;
    a3 = v23;
    if (v21)
    {
      byte_1E9DDBF00 = 1;
      __cxa_guard_release(&qword_1E9DDBF08);
      uint64_t v8 = &qword_1E9DDB000;
      a2 = v22;
      a3 = v23;
    }
  }
  if (*((unsigned char *)v8 + 3840)) {
    uint64_t v9 = 0xF406179A13730E78;
  }
  else {
    uint64_t v9 = 0;
  }
  sub_1B653860C(a1, a2, a3, (uint64_t *)a5, v9, 0);
  *(void *)a1 = &unk_1F0FB4400;
  long long v10 = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a5 + 16);
  long long v11 = *(_OWORD *)(a5 + 48);
  long long v12 = *(_OWORD *)(a5 + 64);
  long long v13 = *(_OWORD *)(a5 + 80);
  *(void *)(a1 + 456) = *(void *)(a5 + 96);
  *(_OWORD *)(a1 + 424) = v12;
  *(_OWORD *)(a1 + 440) = v13;
  *(_OWORD *)(a1 + 392) = v10;
  *(_OWORD *)(a1 + 408) = v11;
  *(void *)(a1 + 472) = 0;
  *(void *)(a1 + 480) = 0;
  unsigned int v14 = *(unsigned __int8 *)(a1 + 456);
  unsigned int v15 = *(unsigned __int16 *)(a1 + 376) / v14;
  if (v15 <= 1) {
    LOWORD(v15) = 1;
  }
  unsigned int v16 = *(unsigned __int16 *)(a1 + 378);
  int v26 = *(_DWORD *)(a1 + 388);
  uint64_t v25 = *(void *)(a1 + 380);
  long long v28 = *(_OWORD *)(a1 + 400);
  long long v17 = *(_OWORD *)(a1 + 440);
  int v18 = v16 / v14;
  long long v30 = *(_OWORD *)(a1 + 424);
  long long v31 = v17;
  if (v16 / v14 <= 1) {
    LOWORD(v18) = 1;
  }
  v24[0] = v15;
  v24[1] = v18;
  uint64_t v27 = 115;
  uint64_t v29 = 3;
  uint64_t v19 = sub_1B63C7D8C(a4, (uint64_t)"LENS_BLUR_DOWNSAMPLE", (uint64_t)v24);
  *(void *)(a1 + 480) = v19;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v19);
  return a1;
}

void sub_1B6618424(_Unwind_Exception *a1)
{
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

void sub_1B6618438(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  uint64_t v5 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v4);
  a1[58] = v5;
  if (!v5)
  {
    a1[58] = sub_1B6618574(*(CFX::CrossFrameResourceManager **)(a2 + 32), v4);
    long long v13 = (void *)sub_1B6445900(a1[46], v6, v7, v8, v9, v10, v11, v12);
    long long v17 = objc_msgSend_resourceManager(v13, v14, v15, v16);
    char v35 = 0;
    id v18 = objc_alloc_init(MEMORY[0x1E4F35228]);
    objc_msgSend_setConstantValue_type_atIndex_(v18, v19, (uint64_t)&v35, 53, 20501);
    uint64_t v20 = a1[58];
    uint64_t v22 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v17, v21, @"compute_downsample2", (uint64_t)v18);
    uint64_t v24 = *(void **)(v20 + 16);
    if (v24 != (void *)v22)
    {
      uint64_t v25 = v22;
      if (v24) {

      }
      *(void *)(v20 + 16) = v25;
    }
    uint64_t v26 = a1[58];
    uint64_t v27 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v17, v23, @"compute_downsample4", (uint64_t)v18);
    uint64_t v29 = *(void **)(v26 + 24);
    if (v29 != (void *)v27)
    {
      uint64_t v30 = v27;
      if (v29) {

      }
      *(void *)(v26 + 24) = v30;
    }
    uint64_t v31 = a1[58];
    uint64_t v32 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v17, v28, @"compute_downsample8", (uint64_t)v18);
    float32x4_t v33 = *(void **)(v31 + 32);
    if (v33 != (void *)v32)
    {
      uint64_t v34 = v32;
      if (v33) {

      }
      *(void *)(v31 + 32) = v34;
    }
  }
}

uint64_t sub_1B6618574(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v2 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v2) {
    operator new();
  }
  return v2;
}

void sub_1B6618600(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v5 = *a3;
  id Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 472));
  id v7 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 480));
  objc_msgSend_setTexture_atIndex_(v5, v8, (uint64_t)Texture, 0);
  objc_msgSend_setTexture_atIndex_(v5, v9, (uint64_t)v7, 1);
  long long v28 = 0;
  int v16 = *(unsigned __int8 *)(a1 + 456);
  switch(v16)
  {
    case 8:
      long long v17 = (void **)(*(void *)(a1 + 464) + 32);
      goto LABEL_7;
    case 4:
      long long v17 = (void **)(*(void *)(a1 + 464) + 24);
      goto LABEL_7;
    case 2:
      long long v17 = (void **)(*(void *)(a1 + 464) + 16);
LABEL_7:
      sub_1B66012C4(&v28, *v17);
      goto LABEL_9;
  }
  sub_1B63F2F54(16, @"Unreachable code: Invalid downsample rate", v10, v11, v12, v13, v14, v15, v27);
LABEL_9:
  uint64_t v24 = (uint64_t)v28;
  if (!v28)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v18, v19, v20, v21, v22, v23, (uint64_t)"_ptr != NULL");
    uint64_t v24 = (uint64_t)v28;
  }
  uint64_t v25 = sub_1B653EFB8(v24);
  objc_msgSend_dispatch_onTexture2D_(v5, v26, v25, (uint64_t)v7);
  if (v28) {
}
  }

void sub_1B6618720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  if (a10) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B6618738(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBF18, memory_order_acquire) & 1) == 0)
  {
    uint64_t v26 = a3;
    uint64_t v27 = a2;
    int v28 = __cxa_guard_acquire(&qword_1E9DDBF18);
    a2 = v27;
    a3 = v26;
    if (v28)
    {
      byte_1E9DDBF10 = 1;
      __cxa_guard_release(&qword_1E9DDBF18);
      a2 = v27;
      a3 = v26;
    }
  }
  if (byte_1E9DDBF10) {
    uint64_t v8 = 0x3B7BCF15DA1D0A80;
  }
  else {
    uint64_t v8 = 0;
  }
  sub_1B653860C(a1, a2, a3, (uint64_t *)a5, v8, 0);
  *(void *)a1 = &unk_1F0FB4470;
  long long v9 = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a5 + 16);
  long long v10 = *(_OWORD *)(a5 + 48);
  long long v11 = *(_OWORD *)(a5 + 64);
  long long v12 = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(a1 + 456) = v12;
  *(_OWORD *)(a1 + 408) = v10;
  *(_OWORD *)(a1 + 424) = v11;
  *(_OWORD *)(a1 + 392) = v9;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  unsigned int v13 = *(unsigned __int8 *)(a1 + 456);
  if (*(unsigned __int16 *)(a1 + 376) / v13 <= 1) {
    __int16 v14 = 1;
  }
  else {
    __int16 v14 = *(_WORD *)(a1 + 376) / *(unsigned __int8 *)(a1 + 456);
  }
  unsigned int v15 = *(unsigned __int16 *)(a1 + 378);
  __int16 v16 = *(_WORD *)(a1 + 380);
  uint64_t v17 = *(void *)(a1 + 384);
  uint64_t v18 = *(void *)(a1 + 408);
  long long v19 = *(_OWORD *)(a1 + 424);
  long long v20 = *(_OWORD *)(a1 + 440);
  long long v43 = v19;
  long long v44 = v20;
  if (v15 / v13 <= 1) {
    __int16 v21 = 1;
  }
  else {
    __int16 v21 = v15 / v13;
  }
  int v22 = *(_DWORD *)(a1 + 464);
  v36[0] = v14;
  v36[1] = v21;
  v36[2] = v16;
  v36[3] = v22;
  uint64_t v37 = v17;
  long long v38 = xmmword_1B6E72D10;
  uint64_t v39 = v18;
  uint64_t v40 = 3;
  long long v41 = v19;
  long long v42 = v20;
  uint64_t v23 = sub_1B63C7D8C(a4, (uint64_t)"LENS_BLUR_HORIZONTAL_REAL", (uint64_t)v36);
  *(void *)(a1 + 488) = v23;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v23);
  v29[0] = v14;
  v29[1] = v21;
  v29[2] = v16;
  uint64_t v29[3] = v22;
  uint64_t v30 = v17;
  long long v31 = xmmword_1B6E72D10;
  uint64_t v32 = v18;
  uint64_t v33 = 3;
  long long v34 = v43;
  long long v35 = v44;
  uint64_t v24 = sub_1B63C7D8C(a4, (uint64_t)"LENS_BLUR_HORIZONTAL_IMAGINARY", (uint64_t)v29);
  *(void *)(a1 + 496) = v24;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v24);
  return a1;
}

void sub_1B6618930(_Unwind_Exception *a1)
{
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1B6618944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v10 = (void *)sub_1B6445900(*(void *)(a1 + 368), a2, a3, a4, a5, a6, a7, a8);
  unint64_t v11 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  uint64_t v12 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v11);
  *(void *)(a1 + 472) = v12;
  if (!v12)
  {
    *(void *)(a1 + 472) = sub_1B6618A94(*(CFX::CrossFrameResourceManager **)(a2 + 32), v11);
    __int16 v16 = objc_msgSend_resourceManager(v10, v13, v14, v15);
    long long v20 = objc_msgSend_device(v10, v17, v18, v19);
    if (j__objc_msgSend_supportsWritableArrayOfTextures(v20, v21, v22, v23)) {
      uint64_t v24 = @"compute_lens_blur_horizontal";
    }
    else {
      uint64_t v24 = @"compute_lens_blur_horizontal_no_array_write";
    }
    int v36 = 1;
    do
    {
      id v25 = objc_alloc_init(MEMORY[0x1E4F35228]);
      objc_msgSend_setConstantValue_type_atIndex_(v25, v26, (uint64_t)&v36, 29, 20500);
      uint64_t v27 = *(void *)(a1 + 472) + 8 * v36;
      uint64_t v29 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v16, v28, (uint64_t)v24, (uint64_t)v25);
      uint64_t v32 = *(void **)(v27 + 8);
      long long v31 = (uint64_t *)(v27 + 8);
      uint64_t v30 = v32;
      if (v32 != (void *)v29)
      {
        uint64_t v33 = v29;
        if (v30) {

        }
        uint64_t *v31 = v33;
      }

      int v34 = v36++;
    }
    while (v34 < 3);
  }
  uint64_t result = sub_1B63BECF0(v10, *(CFX::CrossFrameResourceManager **)(a2 + 32), *(unsigned __int8 *)(a1 + 464), 0, *(float *)(a1 + 460));
  *(void *)(*(void *)(a1 + 472) + 40) = result;
  return result;
}

uint64_t sub_1B6618A94(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v2 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v2) {
    operator new();
  }
  return v2;
}

void sub_1B6618B2C(uint64_t a1, CFX::GPUResourceManager **a2, void **a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v10 = *a3;
  unint64_t v11 = (void *)sub_1B6445900(*(void *)(a1 + 368), (uint64_t)a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  id Texture = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 480));
  id v12 = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 488));
  id v13 = CFX::GPUResourceManager::getTexture(a2[3], *(const CFX::RG::Resource **)(a1 + 496));
  uint64_t v14 = *(void *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 488))+ 16);
  uint64_t v15 = *(void *)(CFX::RG::RenderGraphContext::resolvedTextureDescriptor((CFX::RG::RenderGraphContext *)a2, *(const CFX::RG::Resource **)(a1 + 496))+ 16);
  unsigned int v48 = vcvtps_s32_f32(*(float *)(a1 + 460));
  uint64_t v19 = objc_msgSend_device(v11, v16, v17, v18);
  if (j__objc_msgSend_supportsWritableArrayOfTextures(v19, v20, v21, v22))
  {
    objc_msgSend_setTexture_atIndex_(v10, v23, (uint64_t)v12, 1);
    objc_msgSend_setTexture_atIndex_(v10, v25, (uint64_t)v13, 2);
  }
  else if (*(int *)(a1 + 464) >= 1)
  {
    uint64_t v26 = 4;
    do
    {
      id v27 = (id)objc_msgSend_newTextureViewWithPixelFormat_(v12, v23, v14, v24);
      id v30 = (id)objc_msgSend_newTextureViewWithPixelFormat_(v13, v28, v15, v29);
      uint64_t v31 = v26 - 3;
      objc_msgSend_setTexture_atIndex_(v10, v32, (uint64_t)v27, v26 - 3);
      objc_msgSend_setTexture_atIndex_(v10, v33, (uint64_t)v30, v26++);
    }
    while (v31 < *(int *)(a1 + 464));
  }
  objc_msgSend_setTexture_atIndex_(v10, v23, (uint64_t)Texture, 0);
  objc_msgSend_setBytes_length_atIndex_(v10, v34, (uint64_t)v47, 40, 0);
  objc_msgSend_setBuffer_offset_atIndex_(v10, v35, *(void *)(*(void *)(a1 + 472) + 40), 0, 1);
  long long v42 = *(void **)(*(void *)(a1 + 472) + 8 * *(int *)(a1 + 464) + 8);
  if (v42) {
    id v43 = v42;
  }
  else {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v36, v37, v38, v39, v40, v41, (uint64_t)"_ptr != NULL");
  }
  uint64_t v44 = sub_1B653EFB8((uint64_t)v42);
  objc_msgSend_dispatch_onTexture2D_(v10, v45, v44, (uint64_t)Texture);
  if (v42) {
}
  }

void sub_1B6618D1C(_Unwind_Exception *exception_object)
{
  if (v1) {

  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1B6618D30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8 = &qword_1E9DDB000;
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_1E9DDBF28, memory_order_acquire) & 1) == 0)
  {
    uint64_t v21 = a2;
    uint64_t v22 = a3;
    int v20 = __cxa_guard_acquire(&qword_1E9DDBF28);
    uint64_t v8 = &qword_1E9DDB000;
    a2 = v21;
    a3 = v22;
    if (v20)
    {
      qword_1E9DDBF20 = (uint64_t)sub_1B6619760("LENS_BLUR_VERTICAL_PASS", 0x17u);
      __cxa_guard_release(&qword_1E9DDBF28);
      uint64_t v8 = &qword_1E9DDB000;
      a2 = v21;
      a3 = v22;
    }
  }
  sub_1B653860C(a1, a2, a3, (uint64_t *)a5, v8[484], 0);
  *(void *)a1 = &unk_1F0FB4148;
  long long v9 = *(_OWORD *)(a5 + 32);
  *(_OWORD *)(a1 + 376) = *(_OWORD *)(a5 + 16);
  long long v10 = *(_OWORD *)(a5 + 48);
  long long v11 = *(_OWORD *)(a5 + 64);
  long long v12 = *(_OWORD *)(a5 + 96);
  *(_OWORD *)(a1 + 440) = *(_OWORD *)(a5 + 80);
  *(_OWORD *)(a1 + 456) = v12;
  *(_OWORD *)(a1 + 408) = v10;
  *(_OWORD *)(a1 + 424) = v11;
  *(_OWORD *)(a1 + 392) = v9;
  *(void *)(a1 + 488) = 0;
  *(void *)(a1 + 496) = 0;
  *(void *)(a1 + 480) = 0;
  unsigned int v13 = *(unsigned __int8 *)(a1 + 456);
  unsigned int v14 = *(unsigned __int16 *)(a1 + 376) / v13;
  if (v14 <= 1) {
    LOWORD(v14) = 1;
  }
  unsigned int v15 = *(unsigned __int16 *)(a1 + 378);
  int v25 = *(_DWORD *)(a1 + 388);
  uint64_t v24 = *(void *)(a1 + 380);
  long long v27 = *(_OWORD *)(a1 + 400);
  long long v16 = *(_OWORD *)(a1 + 440);
  int v17 = v15 / v13;
  long long v29 = *(_OWORD *)(a1 + 424);
  long long v30 = v16;
  if (v15 / v13 <= 1) {
    LOWORD(v17) = 1;
  }
  v23[0] = v14;
  v23[1] = v17;
  uint64_t v26 = 115;
  uint64_t v28 = 3;
  uint64_t v18 = sub_1B63C7D8C(a4, (uint64_t)"LENS_BLUR_OUTPUT", (uint64_t)v23);
  *(void *)(a1 + 496) = v18;
  CFX::RG::Pass::writeTo((uint64_t *)a1, v18);
  return a1;
}

void sub_1B6618EA4(_Unwind_Exception *a1)
{
  CFX::RG::Pass::~Pass(v1);
  _Unwind_Resume(a1);
}

double sub_1B6618EB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  long long v10 = (void *)sub_1B6445900(*(void *)(a1 + 368), a2, a3, a4, a5, a6, a7, a8);
  unint64_t v11 = CFX::RG::Pass::hash((CFX::RG::Pass *)a1);
  uint64_t v12 = CFX::CrossFrameResourceManager::get(*(CFX::CrossFrameResourceManager **)(a2 + 32), v11);
  *(void *)(a1 + 472) = v12;
  if (!v12)
  {
    *(void *)(a1 + 472) = sub_1B661905C(*(CFX::CrossFrameResourceManager **)(a2 + 32), v11);
    long long v16 = objc_msgSend_resourceManager(v10, v13, v14, v15);
    v30.i32[0] = 1;
    do
    {
      id v17 = objc_alloc_init(MEMORY[0x1E4F35228]);
      objc_msgSend_setConstantValue_type_atIndex_(v17, v18, (uint64_t)&v30, 29, 20500);
      uint64_t v19 = *(void *)(a1 + 472) + 8 * v30.i32[0];
      uint64_t v21 = objc_msgSend_newComputePipelineStateWithFunctionName_constantValues_(v16, v20, @"compute_lens_blur_vertical", (uint64_t)v17);
      uint64_t v24 = *(void **)(v19 + 8);
      uint64_t v23 = (uint64_t *)(v19 + 8);
      uint64_t v22 = v24;
      if (v24 != (void *)v21)
      {
        uint64_t v25 = v21;
        if (v22) {

        }
        *uint64_t v23 = v25;
      }

      int v26 = v30.i32[0]++;
    }
    while (v26 < 3);
  }
  uint64_t v27 = sub_1B63BECF0(v10, *(CFX::CrossFrameResourceManager **)(a2 + 32), *(unsigned __int8 *)(a1 + 464), &v30, *(float *)(a1 + 460));
  uint64_t v28 = *(void *)(a1 + 472);
  *(void *)(v28 + 40) = v27;
  *(void *)&double result = vextq_s8(v30, v30, 8uLL).u64[0];
  *(double *)(v28 + 48) = result;
  if (*(int *)(a1 + 464) >= 2)
  {
    *(void *)&double result = vextq_s8(v31, v31, 8uLL).u64[0];
    *(double *)(*(void *)(a1 + 472) + 56) = result;
    if (*(int *)(a1 + 464) >= 3)
    {
      *(void *)&double result = vextq_s8(v32, v32, 8uLL).u64[0];
      *(double *)(*(void *)(a1 + 472) + 64) = result;
    }
  }
  return result;
}

uint64_t sub_1B661905C(CFX::CrossFrameResourceManager *a1, uint64_t a2)
{
  uint64_t v2 = CFX::CrossFrameResourceManager::get(a1, a2);
  if (!v2) {
    operator new();
  }
  return v2;
}

uint64_t sub_1B66190F8(uint64_t a1, uint64_t a2, void **a3)
{
  uint64_t v5 = *a3;
  unsigned int v6 = vcvtps_s32_f32(*(float *)(a1 + 460));
  unsigned int v53 = v6;
  uint64_t v8 = *(void *)(a1 + 472);
  id v7 = *(const CFX::RG::Resource **)(a1 + 480);
  long long v51 = *(_OWORD *)(v8 + 48);
  uint64_t v52 = *(void *)(v8 + 64);
  id Texture = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), v7);
  id v10 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 488));
  id v11 = CFX::GPUResourceManager::getTexture(*(CFX::GPUResourceManager **)(a2 + 24), *(const CFX::RG::Resource **)(a1 + 496));
  objc_msgSend_setTexture_atIndex_(v5, v12, (uint64_t)Texture, 0);
  objc_msgSend_setTexture_atIndex_(v5, v13, (uint64_t)v10, 1);
  objc_msgSend_setTexture_atIndex_(v5, v14, (uint64_t)v11, 2);
  objc_msgSend_setBytes_length_atIndex_(v5, v15, (uint64_t)v50, 40, 0);
  objc_msgSend_setBuffer_offset_atIndex_(v5, v16, *(void *)(*(void *)(a1 + 472) + 40), 0, 1);
  uint64_t v23 = *(void *)(a1 + 472) + 8 * *(int *)(a1 + 464);
  uint64_t v26 = *(void *)(v23 + 8);
  uint64_t v25 = (uint64_t *)(v23 + 8);
  uint64_t v24 = v26;
  if (!v26)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Dereferencing null pointer", v17, v18, v19, v20, v21, v22, (uint64_t)"_ptr != NULL");
    uint64_t v24 = *v25;
  }
  uint64_t v27 = (void *)sub_1B653EFB8(v24);
  unint64_t v31 = objc_msgSend_threadExecutionWidth(v27, v28, v29, v30);
  unint64_t v32 = (v31 + 126) / v31 * v31;
  uint64_t v36 = objc_msgSend_width(v11, v33, v34, v35);
  uint64_t v40 = objc_msgSend_height(v11, v37, v38, v39);
  uint64_t v41 = 16 * *(int *)(a1 + 464) * (v32 + (int)(2 * v6));
  unint64_t v42 = (v32 + v40 - 1) / v32;
  objc_msgSend_setThreadgroupMemoryLength_atIndex_(v5, v43, v41, 0);
  objc_msgSend_setComputePipelineState_(v5, v44, (uint64_t)v27, v45);
  v49[0] = v36;
  v49[1] = v42;
  v49[2] = 1;
  v48[0] = 1;
  v48[1] = v32;
  uint64_t v48[2] = 1;
  return objc_msgSend_dispatchThreadgroups_threadsPerThreadgroup_(v5, v46, (uint64_t)v49, (uint64_t)v48);
}

uint64_t *sub_1B66192A4(CFX::RG *a1, CFX::RG::RenderGraphContext *a2, uint64_t *a3, CFX::RG::Resource *a4)
{
  uint64_t v61 = *MEMORY[0x1E4F143B8];
  uint64_t v8 = (_OWORD *)CFX::RG::Resource::constTextureDesc((CFX::RG::Resource *)a3[1]);
  long long v9 = v8[1];
  v56[0] = *v8;
  v56[1] = v9;
  long long v10 = v8[5];
  long long v12 = v8[2];
  long long v11 = v8[3];
  v56[4] = v8[4];
  v56[5] = v10;
  v56[2] = v12;
  v56[3] = v11;
  long long v13 = v8[9];
  long long v15 = v8[6];
  long long v14 = v8[7];
  v56[8] = v8[8];
  v56[9] = v13;
  v56[6] = v15;
  v56[7] = v14;
  CFX::RG::TextureDescriptorReference::withSampleCount(v56, 1, (uint64_t)v55);
  uint64_t v17 = (const CFX::RG::Resource *)CFX::RG::copyIfNeeded(a1, (CFX::RG::RenderGraphBuilder *)a3[1], a4, (CFX::RG::Pass *)v55, 0, v16);
  unint64_t v18 = 0x3F847AE147AE147BLL;
  LOWORD(v18) = *((_WORD *)a3 + 18);
  float v19 = *((float *)a3 + 4) * 0.01 * (double)v18;
  int v20 = *((_DWORD *)a3 + 6) + 1;
  float v21 = 8.0;
  if (v19 <= 128.0)
  {
    float v21 = 4.0;
    if (v19 <= 32.0)
    {
      float v21 = 2.0;
      if (v19 < 4.0) {
        int v20 = 1;
      }
    }
  }
  uint64_t v22 = (_OWORD *)CFX::RG::RenderGraphContext::resolvedTextureDescriptor(a2, v17);
  unsigned int v23 = *(unsigned __int16 *)v22;
  long long v24 = *(_OWORD *)((char *)v22 + 18);
  long long v25 = *(_OWORD *)((char *)v22 + 50);
  long long v59 = *(_OWORD *)((char *)v22 + 34);
  v60[0] = v25;
  *(_OWORD *)((char *)v60 + 14) = v22[4];
  long long v57 = *(_OWORD *)((char *)v22 + 2);
  long long v58 = v24;
  LOWORD(v24) = *((_WORD *)a3 + 16);
  float v26 = (float)v24 / (float)v23;
  unsigned int v27 = (int)fmax((float)(v21 / v26), 1.0);
  if (v27 >= 2)
  {
    long long v50 = v58;
    long long v51 = v59;
    *(_OWORD *)uint64_t v52 = v60[0];
    *(_OWORD *)&v52[14] = *(_OWORD *)((char *)v60 + 14);
    uint64_t v53 = 0;
    uint64_t v28 = *a3;
    int8x16_t v46 = "Lens blur downsample pass";
    uint64_t v47 = v28;
    __int16 v48 = v23;
    long long v49 = v57;
    LOBYTE(v53) = v27;
    uint64_t v29 = (uint64_t *)sub_1B66195A4((uint64_t *)a1, (uint64_t *)a1, (uint64_t)&v46);
    v29[59] = (uint64_t)v17;
    CFX::RG::Pass::readFrom(v29, v17);
    uint64_t v17 = (const CFX::RG::Resource *)v29[60];
  }
  long long v50 = v58;
  long long v51 = v59;
  *(_OWORD *)uint64_t v52 = v60[0];
  *(_OWORD *)&v52[14] = *(_OWORD *)((char *)v60 + 14);
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  uint64_t v30 = *a3;
  int8x16_t v46 = "Lens blur horizontal pass";
  uint64_t v47 = v30;
  __int16 v48 = v23;
  long long v49 = v57;
  LOBYTE(v53) = v27;
  float v31 = fminf(v19 / fmaxf(v21, v26), 63.0);
  *((float *)&v53 + 1) = v31;
  LODWORD(v54) = v20;
  unint64_t v32 = (uint64_t *)sub_1B66195FC((uint64_t *)a1, (uint64_t *)a1, (uint64_t)&v46);
  v32[60] = (uint64_t)v17;
  CFX::RG::Pass::readFrom(v32, v17);
  long long v41 = v58;
  long long v42 = v59;
  *(_OWORD *)id v43 = v60[0];
  *(_OWORD *)&v43[14] = *(_OWORD *)((char *)v60 + 14);
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v33 = *a3;
  v38[0] = "Lens blur vertical pass";
  v38[1] = v33;
  __int16 v39 = v23;
  long long v40 = v57;
  LOBYTE(v44) = v27;
  *((float *)&v44 + 1) = v31;
  LODWORD(v45) = v20;
  uint64_t v34 = (uint64_t *)sub_1B6619654((uint64_t *)a1, (uint64_t *)a1, (uint64_t)v38);
  uint64_t v35 = (CFX::RG::Resource *)v32[61];
  v34[60] = (uint64_t)v35;
  CFX::RG::Pass::readFrom(v34, v35);
  uint64_t v36 = (CFX::RG::Resource *)v32[62];
  v34[61] = (uint64_t)v36;
  CFX::RG::Pass::readFrom(v34, v36);
  return v34;
}

uint64_t sub_1B66195A4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B6619AE4(v7[0], v5, v7, a2, a3);
  sub_1B63C88CC(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B66195FC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B6619B44(v7[0], v5, v7, a2, a3);
  sub_1B63C88CC(a1 + 18, v7);
  return v7[0];
}

uint64_t sub_1B6619654(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1[1];
  v7[0] = *a1;
  v7[1] = v5;
  v7[0] = sub_1B6619BA4(v7[0], v5, v7, a2, a3);
  sub_1B63C88CC(a1 + 18, v7);
  return v7[0];
}

void sub_1B66196B0(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B66196EC(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

void sub_1B6619728(CFX::RG::Pass *a1)
{
  CFX::RG::Pass::~Pass(a1);

  JUMPOUT(0x1BA9B6D80);
}

unsigned __int8 *sub_1B6619760(unsigned __int8 *result, unsigned int a2)
{
  if (result)
  {
    unint64_t v2 = 0xC6A4A7935BD1E995 * a2;
    if (a2 >= 8)
    {
      uint64_t v3 = a2 >> 3;
      unint64_t v4 = &result[8 * v3];
      uint64_t v5 = 8 * v3;
      do
      {
        uint64_t v6 = *(void *)result;
        result += 8;
        unint64_t v2 = 0xC6A4A7935BD1E995
           * ((0xC6A4A7935BD1E995 * ((0xC6A4A7935BD1E995 * v6) ^ ((0xC6A4A7935BD1E995 * v6) >> 47))) ^ v2);
        v5 -= 8;
      }
      while (v5);
      double result = v4;
    }
    switch(a2 & 7)
    {
      case 1u:
        goto LABEL_13;
      case 2u:
        goto LABEL_12;
      case 3u:
        goto LABEL_11;
      case 4u:
        goto LABEL_10;
      case 5u:
        goto LABEL_9;
      case 6u:
        goto LABEL_8;
      case 7u:
        v2 ^= (unint64_t)result[6] << 48;
LABEL_8:
        v2 ^= (unint64_t)result[5] << 40;
LABEL_9:
        v2 ^= (unint64_t)result[4] << 32;
LABEL_10:
        v2 ^= (unint64_t)result[3] << 24;
LABEL_11:
        v2 ^= (unint64_t)result[2] << 16;
LABEL_12:
        v2 ^= (unint64_t)result[1] << 8;
LABEL_13:
        unint64_t v2 = 0xC6A4A7935BD1E995 * (v2 ^ *result);
        break;
      default:
        return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995
                                                                                * (v2 ^ (v2 >> 47))) >> 47));
    }
    return (unsigned __int8 *)((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) ^ ((0xC6A4A7935BD1E995 * (v2 ^ (v2 >> 47))) >> 47));
  }
  return result;
}

void *sub_1B661984C(void *a1)
{
  *a1 = &unk_1F0FB43E0;
  unint64_t v2 = (void *)a1[4];
  if (v2) {

  }
  uint64_t v3 = (void *)a1[3];
  if (v3) {

  }
  unint64_t v4 = (void *)a1[2];
  if (v4) {

  }
  return a1;
}

void sub_1B66198B0(void *a1)
{
  *a1 = &unk_1F0FB43E0;
  unint64_t v2 = (void *)a1[4];
  if (v2) {

  }
  uint64_t v3 = (void *)a1[3];
  if (v3) {

  }
  unint64_t v4 = (void *)a1[2];
  if (v4) {

  }
  JUMPOUT(0x1BA9B6D80);
}

void *sub_1B6619934(void *a1)
{
  *a1 = &unk_1F0FB4450;
  for (uint64_t i = 4; i != 1; --i)
  {
    uint64_t v3 = (void *)a1[i];
    if (v3) {
  }
    }
  return a1;
}

void sub_1B6619990(void *a1)
{
  *a1 = &unk_1F0FB4450;
  uint64_t v2 = 4;
  while (1)
  {
    uint64_t v3 = (void *)a1[v2];
    if (v3) {

    }
    if (--v2 == 1)
    {
      JUMPOUT(0x1BA9B6D80);
    }
  }
}

void *sub_1B6619A0C(void *a1)
{
  *a1 = &unk_1F0FB4128;
  for (uint64_t i = 4; i != 1; --i)
  {
    uint64_t v3 = (void *)a1[i];
    if (v3) {
  }
    }
  return a1;
}

void sub_1B6619A68(void *a1)
{
  *a1 = &unk_1F0FB4128;
  uint64_t v2 = 4;
  while (1)
  {
    uint64_t v3 = (void *)a1[v2];
    if (v3) {

    }
    if (--v2 == 1)
    {
      JUMPOUT(0x1BA9B6D80);
    }
  }
}

uint64_t sub_1B6619AE4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = sub_1B63C8330(v10, 0x1E8u, 8u);
  return sub_1B66182A8(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B6619B44(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = sub_1B63C8330(v10, 0x1F8u, 8u);
  return sub_1B6618738(v8, *a3, a3[1], a4, a5);
}

uint64_t sub_1B6619BA4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5)
{
  v10[0] = a1;
  v10[1] = a2;
  uint64_t v8 = sub_1B63C8330(v10, 0x1F8u, 8u);
  return sub_1B6618D30(v8, *a3, a3[1], a4, a5);
}

float sub_1B6619C04(uint64_t a1, unsigned int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v48 = *MEMORY[0x1E4F143B8];
  LODWORD(v6) = 0;
  uint64_t v7 = (a4 * a4);
  memset(v40, 0, sizeof(v40));
  if (a2)
  {
    unsigned int v8 = 0;
    double v9 = (float)a2;
    double v6 = 1.0;
    float v10 = 1.0 / v9 + -1.0;
    float v11 = (1.0 - 1.0 / v9 + 1.0 - 1.0 / v9) / (v9 + -1.0);
    __asm
    {
      FMOV            V4.4S, #-1.0
      FMOV            V5.4S, #1.0
    }
    _S17 = 3.0;
    do
    {
      uint64_t v19 = 0;
      float v20 = v10 + (float)((float)v8 * v11);
      LODWORD(v21) = _Q4.i32[0];
      float32x4_t v22 = _Q5;
      do
      {
        *(float *)_Q24.i32 = v10 + (float)((float)v19 * v11);
        v23.f32[0] = *(float *)_Q24.i32;
        switch(a3)
        {
          case 0:
            v22.f32[1] = -v20;
            float32x4_t v24 = v22;
            v24.f32[2] = -*(float *)_Q24.i32;
            break;
          case 1:
            *((float *)&v21 + 1) = -v20;
            v24.i64[0] = v21;
            v24.i64[1] = _Q24.i64[0];
            break;
          case 2:
            float32x4_t v24 = _Q5;
            v24.f32[2] = v10 + (float)((float)v8 * v11);
            v24.i32[0] = _Q24.i32[0];
            break;
          case 3:
            float32x4_t v24 = _Q4;
            v24.f32[0] = v10 + (float)((float)v19 * v11);
            v24.f32[2] = -v20;
            break;
          case 4:
            v24.i64[1] = _Q5.i64[1];
            goto LABEL_11;
          case 5:
            *(float *)_Q24.i32 = -*(float *)_Q24.i32;
            v24.i64[1] = _Q4.i64[1];
LABEL_11:
            v24.i32[0] = _Q24.i32[0];
            v24.f32[1] = -v20;
            break;
          default:
            float32x4_t v24 = 0uLL;
            break;
        }
        if (a4 < 1) {
          goto LABEL_17;
        }
        int v41 = 1049652929;
        if (a4 != 1)
        {
          _Q24 = (int32x4_t)vmulq_f32(v24, v24);
          _Q24.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(_Q24, 2), vadd_f32(*(float32x2_t *)_Q24.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)_Q24.i8, 1))).u32[0];
          float32x2_t v25 = vrsqrte_f32((float32x2_t)_Q24.u32[0]);
          float32x2_t v26 = vmul_f32(v25, vrsqrts_f32((float32x2_t)_Q24.u32[0], vmul_f32(v25, v25)));
          float32x4_t v27 = vmulq_n_f32(v24, vmul_f32(v26, vrsqrts_f32((float32x2_t)_Q24.u32[0], vmul_f32(v26, v26))).f32[0]);
          _Q24.i64[0] = vextq_s8((int8x16_t)v27, (int8x16_t)v27, 4uLL).u64[0];
          float32x2_t v42 = vmul_f32(*(float32x2_t *)_Q24.i8, (float32x2_t)0x3EFA2A2CBEFA2A2CLL);
          float v43 = -0.4886 * v27.f32[0];
          if (a4 >= 3)
          {
            _Q25 = vmulq_f32(v27, v27);
            *(float32x2_t *)_Q24.i8 = vmul_f32(*(float32x2_t *)_Q24.i8, vmul_f32(*(float32x2_t *)v27.f32, (float32x2_t)0xBF8BD89D3F8BD89DLL));
            uint64_t v44 = _Q24.i64[0];
            __asm { FMLA            S24, S17, V25.S[2] }
            float v45 = *(float *)_Q24.i32 * 0.31539;
            float v46 = vmuls_lane_f32(v27.f32[0] * -1.0925, v27, 2);
            float v47 = 0.54627 * vsubq_f32(_Q25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)_Q25.f32, 1)).f32[0];
          }
LABEL_17:
          if (!v7) {
            goto LABEL_20;
          }
        }
        v23.f32[1] = v10 + (float)((float)v8 * v11);
        double v29 = vaddv_f32(vmul_f32(v23, v23)) + 1.0;
        *(float *)&double v29 = (float)(4.0 / (float)((float)a2 * (float)a2)) / (v29 * sqrt(v29));
        float32x4_t v30 = vmulq_n_f32(*(float32x4_t *)(a1 + 16 * (v8 * a2 + v19)), *(float *)&v29);
        float v31 = (float *)&v41;
        unint64_t v32 = (float32x4_t *)v40;
        uint64_t v33 = (a4 * a4);
        do
        {
          float v34 = *v31++;
          _Q24 = (int32x4_t)vmlaq_n_f32(*v32, v30, v34);
          *v32++ = (float32x4_t)_Q24;
          --v33;
        }
        while (v33);
LABEL_20:
        ++v19;
      }
      while (v19 != a2);
      ++v8;
    }
    while (v8 != a2);
  }
  if (v7)
  {
    uint64_t v35 = 0;
    int v36 = 2 * v7;
    uint64_t v37 = v40;
    do
    {
      long long v38 = *v37++;
      *(float *)(a5 + 4 * v35) = *(float *)(a5 + 4 * v35) + *(float *)&v38;
      *(float *)(a5 + 4 * (v7 + v35)) = *((float *)&v38 + 1)
                                                      + *(float *)(a5 + 4 * (v7 + v35));
      *(float *)&double v6 = *((float *)&v38 + 2) + *(float *)(a5 + 4 * (v36 + v35));
      *(float *)(a5 + 4 * (v36 + v35++)) = *(float *)&v6;
    }
    while (v7 != v35);
  }
  return *(float *)&v6;
}

void sub_1B6619F40(uint64_t a1, int a2, uint64_t a3, int a4, int a5, unsigned int a6)
{
  if (a6)
  {
    uint64_t v11 = 0;
    uint32x4_t v12 = (uint32x4_t)xmmword_1B6E50360;
    float32x4_t v13 = (float32x4_t)vdupq_n_s32(0x3B808081u);
    float32x4_t v14 = (float32x4_t)vdupq_n_s32(0x3D6147AEu);
    float32x4_t v15 = (float32x4_t)vdupq_n_s32(0x3F870A3Du);
    simd_float4 v16 = (simd_float4)xmmword_1B6E72D40;
    uint64_t v17 = a6;
    v18.i64[0] = 0xFF000000FFLL;
    v18.i64[1] = 0xFF000000FFLL;
    float32x4_t v31 = v13;
    float32x4_t v29 = v15;
    float32x4_t v30 = v14;
    float32x4_t v28 = (float32x4_t)vdupq_n_s32(0x414EB852u);
    float32x4_t v27 = (float32x4_t)vdupq_n_s32(0x3D25AEE6u);
    do
    {
      if (a5)
      {
        uint64_t v19 = (int8x16_t *)(a1 + (v11 * a2));
        float v20 = (const float *)(a3 + (v11 * a4));
        int v21 = a5;
        do
        {
          uint32x4_t v22 = (uint32x4_t)vld1q_dup_f32(v20++);
          float32x4_t v32 = vmulq_f32(vcvtq_f32_u32((uint32x4_t)vandq_s8((int8x16_t)vshlq_u32(v22, v12), v18)), v13);
          simd_float4 v23 = (simd_float4)vdivq_f32(vaddq_f32(v32, v14), v15);
          v23.i32[3] = 0;
          simd_float4 v24 = _simd_pow_f4(v23, v16);
          v18.i64[0] = 0xFF000000FFLL;
          v18.i64[1] = 0xFF000000FFLL;
          simd_float4 v16 = (simd_float4)xmmword_1B6E72D40;
          float32x4_t v15 = v29;
          int32x4_t v25 = vcgeq_f32(v27, v32);
          v25.i32[3] = 0;
          int8x16_t v26 = vbslq_s8((int8x16_t)vcltzq_s32(v25), (int8x16_t)vdivq_f32(v32, v28), (int8x16_t)v24);
          float32x4_t v14 = v30;
          float32x4_t v13 = v31;
          uint32x4_t v12 = (uint32x4_t)xmmword_1B6E50360;
          v26.i32[3] = v32.i32[3];
          *v19++ = v26;
          --v21;
        }
        while (v21);
      }
      ++v11;
    }
    while (v11 != v17);
  }
}

uint64_t sub_1B661A090(uint64_t result, int a2, uint64_t a3, int a4, int a5, int a6)
{
  if (a6)
  {
    uint64_t v6 = 0;
    v7.i64[0] = 0x8000000080000000;
    v7.i64[1] = 0x8000000080000000;
    int8x16_t v8 = (int8x16_t)vdupq_n_s32(0x7FE000u);
    int8x16_t v9 = (int8x16_t)vdupq_n_s32(0xF800000u);
    v10.i64[0] = 0x3800000038000000;
    v10.i64[1] = 0x3800000038000000;
    do
    {
      if (a5)
      {
        uint64_t v11 = (int32x4_t *)(result + (v6 * a2));
        uint32x4_t v12 = (int16x4_t *)(a3 + (v6 * a4));
        int v13 = a5;
        do
        {
          int16x4_t v14 = *v12++;
          int8x16_t v15 = (int8x16_t)vshll_n_u16((uint16x4_t)v14, 0xDuLL);
          *v11++ = vaddq_s32((int32x4_t)vorrq_s8(vandq_s8(v15, v9), vorrq_s8(vandq_s8((int8x16_t)vmovl_s16(v14), v7), vandq_s8(v15, v8))), v10);
          --v13;
        }
        while (v13);
      }
      ++v6;
    }
    while (v6 != a6);
  }
  return result;
}

uint64_t sub_1B661A758(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B661A788(size_t a1)
{
  if (qword_1E9DDBF38 != -1) {
    dispatch_once_f(&qword_1E9DDBF38, &qword_1E9DDBF30, (dispatch_function_t)sub_1B661A758);
  }
  uint64_t v2 = sub_1B63C8D44(qword_1E9DDBF30, 0x18uLL);
  *(void *)(v2 + 16) = malloc_type_calloc(0x10uLL, a1, 0x26DF777CuLL);
  *(void *)(v2 + 24) = a1;
  return v2;
}

void *sub_1B661A810(void *a1, void *aBlock, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  }
  uint64_t v12 = a1[4];
  if (v12 >= a1[3])
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. CFXAnimationEventsAddEvent - index out of bounds", a3, a4, a5, a6, a7, a8, (uint64_t)"events->_eventCount < events->_eventCapacity");
    uint64_t v12 = a1[4];
  }
  *(double *)(a1[2] + 16 * v12) = a9;
  uint64_t result = _Block_copy(aBlock);
  uint64_t v14 = a1[4];
  *(void *)(a1[2] + 16 * v14 + 8) = result;
  a1[4] = v14 + 1;
  return result;
}

void sub_1B661A8C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  int v11 = a4;
  int v12 = a3;
  if (!a2) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  }
  if (v12 != v11)
  {
    if (v12)
    {
      double v17 = 0.0;
      int8x16_t v18 = a1;
      uint64_t v19 = a2;
      double v20 = a9;
      uint64_t v21 = 1;
      goto LABEL_12;
    }
    sub_1B661AA3C(a1, a2, 0, a5, a5, a6, a7, a8, a9, 1.0);
    double v22 = 1.0;
    simd_float4 v23 = a1;
    uint64_t v24 = a2;
    double v25 = a10;
LABEL_14:
    uint64_t v26 = 1;
    goto LABEL_18;
  }
  if (!v11)
  {
    if (a10 >= a9)
    {
      simd_float4 v23 = a1;
      uint64_t v24 = a2;
      double v25 = a9;
      goto LABEL_16;
    }
    double v20 = 1.0;
    int8x16_t v18 = a1;
    uint64_t v19 = a2;
    double v17 = a9;
    uint64_t v21 = 0;
LABEL_12:
    sub_1B661AA3C(v18, v19, v21, a5, a5, a6, a7, a8, v17, v20);
    double v25 = 0.0;
    simd_float4 v23 = a1;
    uint64_t v24 = a2;
LABEL_16:
    double v22 = a10;
    goto LABEL_17;
  }
  if (a9 >= a10)
  {
    simd_float4 v23 = a1;
    uint64_t v24 = a2;
    double v25 = a10;
    double v22 = a9;
    goto LABEL_14;
  }
  sub_1B661AA3C(a1, a2, 0, a5, a5, a6, a7, a8, 0.0, a9);
  double v22 = 1.0;
  simd_float4 v23 = a1;
  uint64_t v24 = a2;
  double v25 = a10;
LABEL_17:
  uint64_t v26 = 0;
LABEL_18:

  sub_1B661AA3C(v23, v24, v26, a5, a5, a6, a7, a8, v25, v22);
}

void sub_1B661AA3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10)
{
  if (!a2) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  }
  if (a9 > a10) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. _CFXAnimationEventsTriggerEventsWithTimeChanges invalid time", a3, a4, a5, a6, a7, a8, (uint64_t)"t0 <= t1");
  }
  if (a9 != a10)
  {
    uint64_t v16 = sub_1B661AD74(a2, a3, a3, a4, a5, a6, a7, a8, a9);
    uint64_t v23 = sub_1B661AD74(a2, a3, v17, v18, v19, v20, v21, v22, a10);
    uint64_t v30 = v16 & ~(v16 >> 63);
    uint64_t v31 = v23 >= *(void *)(a2 + 32) ? *(void *)(a2 + 32) : v23;
    if (v30 < v31)
    {
      uint64_t v32 = (16 * v30) | 8;
      do
      {
        if (*(void *)(a2 + 32) <= v30) {
          sub_1B63F2F54(17, @"Assertion '%s' failed. _CFXAnimationEventsTriggerEventAtIndex - index out of bounds", v24, v25, v26, v27, v28, v29, (uint64_t)"index < events->_eventCount");
        }
        sub_1B6422604(a1, *(void *)(*(void *)(a2 + 16) + v32), a4, a3, v26, v27, v28, v29);
        ++v30;
        v32 += 16;
      }
      while (v31 != v30);
    }
  }
}

uint64_t sub_1B661AB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  }
  return *(void *)(a1 + 32);
}

uint64_t sub_1B661ABD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  }
  return *(void *)(*(void *)(a1 + 16) + 16 * a2 + 8);
}

double sub_1B661AC28(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  }
  return *(double *)(*(void *)(a1 + 16) + 16 * a2);
}

void sub_1B661AC84(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (v2 >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 8;
    do
    {
      uint64_t v5 = *(const void **)(*(void *)(a1 + 16) + v4);
      if (v5)
      {
        _Block_release(v5);
        uint64_t v2 = *(void *)(a1 + 32);
      }
      ++v3;
      v4 += 16;
    }
    while (v3 < v2);
  }
  uint64_t v6 = *(void **)(a1 + 16);
  if (v6)
  {
    free(v6);
  }
}

CFStringRef sub_1B661AD0C(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXAnimationEvents>");
}

CFStringRef sub_1B661AD40(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXAnimationEvents>");
}

uint64_t sub_1B661AD74(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"events");
  }
  uint64_t v12 = *(void *)(a1 + 32);
  uint64_t v13 = *(void *)(a1 + 16);
  if (v12 < 2)
  {
    uint64_t v14 = 0;
    uint64_t result = 1;
  }
  else
  {
    uint64_t v14 = 0;
    do
    {
      if (*(double *)(v13 + 16 * (uint64_t)((double)v14 + (double)(v12 - v14) * 0.5)) > a9) {
        uint64_t v12 = (uint64_t)((double)v14 + (double)(v12 - v14) * 0.5);
      }
      else {
        uint64_t v14 = (uint64_t)((double)v14 + (double)(v12 - v14) * 0.5);
      }
      uint64_t result = v14 + 1;
    }
    while (v12 > v14 + 1);
  }
  double v16 = *(double *)(v13 + 16 * v14);
  if (v16 >= a9)
  {
    BOOL v17 = a9 != 1.0;
    if (v16 != a9) {
      BOOL v17 = 1;
    }
    if (v17 | a2) {
      return v14;
    }
  }
  return result;
}

uint64_t sub_1B661AE54(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

void *sub_1B661AE84()
{
  if (qword_1E9DDBF48 != -1) {
    dispatch_once_f(&qword_1E9DDBF48, &qword_1E9DDBF40, (dispatch_function_t)sub_1B661AE54);
  }
  uint64_t v0 = (void *)sub_1B63C8D44(qword_1E9DDBF40, 0x18uLL);
  v0[3] = sub_1B661D7EC(0x7FFFFFFFLL);
  v0[4] = sub_1B661D7EC(0x7FFFFFFFLL);
  v0[2] = sub_1B6404438(96, 4096);
  return v0;
}

uint64_t sub_1B661AF18(int a1, int a2)
{
  return (a2 + (a1 << 12));
}

void sub_1B661AF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a3)
  {
    unsigned int v8 = a3;
    if ((*(_WORD *)(a2 + 80) & 0x20) != 0) {
      sub_1B661AFB8(a1, a2, a3, a4, a5, a6, a7, a8);
    }
    sub_1B63F1414(a2, v8, a1, a4, a5, a6, a7, a8);
    if ((v8 & 4) != 0) {
      sub_1B661D908(*(void *)(a1 + 24), (void *)*(int *)(a2 + 72), v11, v12, v13, v14, v15, v16);
    }
    if ((v8 & 1) != 0 && !sub_1B63F1400(a2)) {
      sub_1B661D908(*(void *)(a1 + 32), *(void **)(a2 + 32), v17, v18, v19, v20, v21, v22);
    }
    *(_WORD *)(a2 + 80) |= 0x20u;
  }
}

void sub_1B661AFB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a3;
  if ((a3 & 4) != 0) {
    sub_1B661DA28(*(void *)(a1 + 24), (void *)*(int *)(a2 + 72), a3, a4, a5, a6, a7, a8);
  }
  if ((v8 & 1) != 0 && !sub_1B63F1400(a2))
  {
    uint64_t v17 = *(void *)(a1 + 32);
    uint64_t v18 = *(void **)(a2 + 32);
    sub_1B661DA28(v17, v18, v11, v12, v13, v14, v15, v16);
  }
}

void sub_1B661B030(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v11 = HIDWORD(a2);
  if (!HIDWORD(a2)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. CFXRendererElementStoreDeallocateSpan - null span", a3, a4, a5, a6, a7, a8, (uint64_t)"span.count > 0");
  }
  uint64_t v12 = sub_1B6355ECC(a3);
  if (v12)
  {
    v27[0] = MEMORY[0x1E4F143A8];
    v27[1] = 0x40000000;
    v27[2] = sub_1B661BC38;
    v27[3] = &unk_1E6145928;
    int v28 = a2;
    int v29 = v11;
    sub_1B64B0E00(v12, (uint64_t)v27, v13, v14, v15, v16, v17, v18);
  }
  uint64_t v19 = sub_1B6404D50(*(void *)(a1 + 16), a2, 0, v14, v15, v16, v17, v18);
  if (v11)
  {
    uint64_t v26 = v19;
    do
    {
      sub_1B661BC88(v26, a1, v20, v21, v22, v23, v24, v25);
      v26 += 96;
      --v11;
    }
    while (v11);
  }
  sub_1B6404D34(*(void *)(a1 + 16), a2, v20, v21, v22, v23, v24, v25);
}

unint64_t sub_1B661B124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  char v8 = a4;
  unsigned int v12 = a4 & 2;
  if (!a3 && (a4 & 2) == 0)
  {
LABEL_44:
    unint64_t v101 = 0;
    unsigned __int16 v102 = -1;
    int v103 = -65536;
    return v103 & 0xFFFF0000 | v101 | v102;
  }
  if (a3)
  {
    if (*(_DWORD *)(a3 + 228)) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. RendererElement should not be in span already", a3, a4, a5, a6, a7, a8, (uint64_t)"node == NULL || node->_rendererElementSpan.count == 0");
    }
    CFDictionaryRef v13 = sub_1B649F640(a3, a2, a3, a4, a5, a6, a7, a8);
    CFTypeRef cf = (CFTypeRef)sub_1B649F5F4(a3, v14, v15, v16, v17, v18, v19, v20);
    BOOL v28 = v13 != 0;
    if (v13) {
      uint64_t v135 = (const void *)sub_1B649683C((uint64_t)v13);
    }
    else {
      uint64_t v135 = 0;
    }
    CFDictionaryRef v29 = sub_1B64A04D4(a3, v21, v22, v23, v24, v25, v26, v27);
    if ((v8 & 1) == 0) {
      goto LABEL_12;
    }
LABEL_9:
    unsigned int v30 = sub_1B661B5D8(a2, a3, (uint64_t)cf, a4, a5, a6, a7, a8);
    goto LABEL_13;
  }
  uint64_t v135 = 0;
  CFTypeRef cf = 0;
  BOOL v28 = 0;
  CFDictionaryRef v29 = 0;
  if (a4) {
    goto LABEL_9;
  }
LABEL_12:
  unsigned int v30 = 0;
LABEL_13:
  unsigned int v31 = v30 + (v12 >> 1);
  unsigned int v134 = v30;
  if ((v8 & 4) != 0)
  {
    uint64_t v33 = sub_1B649F5F4(a3, a2, a3, a4, a5, a6, a7, a8);
    int v32 = sub_1B661B5D8(a2, a3, v33, v34, v35, v36, v37, v38) + 1;
  }
  else
  {
    int v32 = 0;
  }
  int v39 = v32 + v31;
  char v40 = !v28;
  if ((v8 & 8) == 0) {
    char v40 = 1;
  }
  if (v40)
  {
    int v41 = 0;
  }
  else
  {
    int v41 = sub_1B661B5D8(a2, a3, (uint64_t)v135, a4, a5, a6, a7, a8);
    int v39 = v32 + v31;
  }
  int v42 = 0;
  int v43 = v41 + v39;
  unsigned __int16 v131 = v39;
  int v133 = v41;
  if ((v8 & 0x10) != 0 && v29)
  {
    uint64_t v44 = sub_1B644558C(a2, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v52 = sub_1B64B20C4(v44, v45, v46, v47, v48, v49, v50, v51);
    int v42 = sub_1B651204C((uint64_t)v29, v52, v53, v54, v55, v56, v57, v58);
  }
  uint64_t v59 = (v42 + v43);
  unsigned __int16 v129 = v43;
  int v132 = v42;
  if ((v8 & 0x21) == 0x21) {
    int v60 = sub_1B661B5D8(a2, a3, (uint64_t)cf, a4, a5, a6, a7, a8);
  }
  else {
    int v60 = 0;
  }
  uint64_t v61 = (v60 + v59);
  if (!(v60 + v59)) {
    goto LABEL_44;
  }
  int v130 = v8 & 0x21;
  uint64_t v62 = sub_1B6453580(a1, a2, a3, a4, a5, a6, a7, a8);
  unint64_t v69 = sub_1B6404D2C(*(void *)(v62 + 16), v61, v63, v64, v65, v66, v67, v68);
  unint64_t v77 = v69;
  if ((v8 & 4) != 0)
  {
    if (cf)
    {
      sub_1B661B6BC(v62, v69, (unsigned __int16)v31, cf, a3, 0, v75, v76);
      if (sub_1B649F94C(a3)) {
        sub_1B661B818(a2, v62, a3, v72, v73, v74, v75, v76);
      }
    }
    uint64_t v78 = sub_1B63F4F54((void *)a3, v70, v71, v72, v73, v74, v75, v76);
    float32x4_t v85 = sub_1B64B1370(v78, (void *)a3, v79, v80, v81, v82, v83, v84);
    if (!v85) {
      float32x4_t v85 = (const void *)sub_1B651528C();
    }
    sub_1B661B968(v62, v77, v31 + v32 - 1, a3, 2, 0, 0, v85, 0, 0);
  }
  if (v8)
  {
    sub_1B661B6BC(v62, v77, 0, cf, a3, 0, v75, v76);
    if (sub_1B649F94C(a3)) {
      sub_1B661B818(a2, v62, a3, v86, v87, v88, v89, v90);
    }
    CFTypeID v91 = CFGetTypeID(cf);
    if (v91 == sub_1B651930C())
    {
      int8x16_t v92 = (const void *)sub_1B6533D50(a2, a3);
      uint64_t v98 = sub_1B6404D50(*(void *)(v62 + 16), v77, 0, v93, v94, v95, v96, v97);
      float v99 = *(const void **)(v98 + 40);
      if (v99 != v92)
      {
        if (v99)
        {
          CFRelease(v99);
          *(void *)(v98 + 40) = 0;
        }
        if (v92) {
          CFTypeRef v100 = CFRetain(v92);
        }
        else {
          CFTypeRef v100 = 0;
        }
        *(void *)(v98 + 40) = v100;
      }
      CFRelease(v92);
      sub_1B661AF20(v62, v98, 2, v104, v105, v106, v107, v108);
    }
  }
  if (v12) {
    sub_1B661B968(v62, v77, v134, a3, 1, 0, 0, 0, 0, 0);
  }
  if (v133) {
    sub_1B661B6BC(v62, v77, v131, v135, a3, 0, v75, v76);
  }
  int v103 = v77 & 0xFFFF0000;
  unint64_t v101 = v77 & 0xFFFFFFFF00000000;
  if (v132 && (_WORD)v132)
  {
    uint64_t v109 = 0;
    do
    {
      sub_1B661B968(v62, v77, v129 + v109, a3, 4, 0, 0, 0, 0, 0);
      uint64_t v115 = sub_1B6404D50(*(void *)(v62 + 16), v77, v109, v110, v111, v112, v113, v114);
      sub_1B6511CC0(a2, v115, v109++, v116, v117, v118, v119, v120);
    }
    while ((unsigned __int16)v132 != v109);
  }
  if (v130 != 33) {
    goto LABEL_60;
  }
  unsigned __int16 v102 = v77;
  sub_1B661B6BC(v62, v77, (unsigned __int16)v59, cf, a3, 5, v75, v76);
  if (v134)
  {
    uint64_t v126 = v134;
    do
    {
      uint64_t v127 = sub_1B6404D50(*(void *)(v62 + 16), v77, v59, v121, v122, v123, v124, v125);
      *(_WORD *)(v127 + 80) = *(_WORD *)(v127 + 80) & 0xBFA7 | 0x4008;
      ++v59;
      --v126;
    }
    while (v126);
LABEL_60:
    unsigned __int16 v102 = v77;
  }
  return v103 & 0xFFFF0000 | v101 | v102;
}

uint64_t sub_1B661B5D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a3) {
    return 0;
  }
  CFTypeRef v10 = sub_1B661C254(a2, a3, a3, a4, a5, a6, a7, a8);
  if (!v10) {
    return 0;
  }
  uint64_t v18 = (uint64_t)v10;
  CFArrayRef v19 = sub_1B64ABD08((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
  if ((uint64_t)v19 < 1) {
    return 0;
  }
  CFArrayRef v25 = v19;
  CFIndex v26 = 0;
  uint64_t v27 = 0;
  do
  {
    BOOL v28 = sub_1B64ABD78(v18, v26, 0, v20, v21, v22, v23, v24);
    if (sub_1B63D11E8((uint64_t)v28)) {
      ++v27;
    }
    ++v26;
  }
  while (v25 != (const __CFArray *)v26);
  if (v27 && sub_1B647F740(a3, v29, v30, v20, v21, v22, v23, v24))
  {
    uint64_t v31 = 0;
    int v32 = 1;
    do
    {
      sub_1B65A2BE0(a3, 1, a1);
      unsigned int v33 = v32;
      v31 += sub_1B659F760(a3, v32++);
    }
    while (v33 < 6);
    v27 *= v31;
  }
  return v27;
}

void sub_1B661B6BC(uint64_t a1, unint64_t a2, uint64_t a3, const void *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unsigned int v39 = a6;
  unsigned int v9 = a3;
  CFTypeRef v12 = sub_1B661C254(a5, (uint64_t)a4, a3, (uint64_t)a4, a5, a6, a7, a8);
  CFArrayRef v20 = sub_1B64ABD08((uint64_t)v12, v13, v14, v15, v16, v17, v18, v19);
  if ((uint64_t)v20 >= 1)
  {
    CFArrayRef v26 = v20;
    CFIndex v27 = 0;
    uint64_t v28 = 0;
    uint64_t v29 = a2;
    uint64_t v30 = v9;
    CFArrayRef v36 = v20;
    do
    {
      uint64_t v31 = sub_1B64ABD78((uint64_t)v12, v27, 0, v21, v22, v23, v24, v25);
      if (sub_1B63D11E8((uint64_t)v31))
      {
        if (sub_1B647F740((uint64_t)a4, v32, v33, v21, v22, v23, v24, v25))
        {
          unsigned __int8 v34 = 1;
          do
          {
            unsigned int v35 = v34;
            if (sub_1B659F760((uint64_t)a4, v34))
            {
              a2 = a2 & 0xFFFFFFFF00000000 | v29;
              sub_1B661B968(a1, a2, v28 + v30, a5, v39, a4, v12, 0, v27, v34);
              ++v28;
            }
            ++v34;
          }
          while (v35 < 6);
          CFArrayRef v26 = v36;
        }
        else
        {
          unint64_t v37 = v37 & 0xFFFFFFFF00000000 | v29;
          sub_1B661B968(a1, v29, v28 + v30, a5, v39, a4, v12, 0, v27, 0);
          ++v28;
        }
      }
      ++v27;
    }
    while ((const __CFArray *)v27 != v26);
  }
}

void sub_1B661B818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v19 = sub_1B649F5F4(a3, a2, a3, a4, a5, a6, a7, a8);
  if (!v19) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v13, v14, v15, v16, v17, v18, (uint64_t)"geometry");
  }
  CFArrayRef v20 = (const __CFArray *)sub_1B63CE0D8(v19, v12, v13, v14, v15, v16, v17, v18);
  CFIndex Count = CFArrayGetCount(v20);
  if (Count != **(unsigned __int16 **)(a3 + 232)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. __AllocateSpansForNodeGeometryLOD unexpected lod count", v21, v22, v23, v24, v25, v26, (uint64_t)"node->_rendererLOD->count == count");
  }
  if (Count >= 1)
  {
    uint64_t v28 = 0;
    for (CFIndex i = 0; i != Count; ++i)
    {
      CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(v20, i);
      uint64_t v38 = sub_1B647B264((uint64_t)ValueAtIndex, v31, v32, v33, v34, v35, v36, v37);
      if (v38)
      {
        uint64_t v44 = (const void *)v38;
        uint64_t v45 = sub_1B661B5D8(a1, a3, v38, v39, v40, v41, v42, v43);
        unint64_t v52 = sub_1B6404D2C(*(void *)(a2 + 16), v45, v46, v47, v48, v49, v50, v51);
        *(void *)(*(void *)(a3 + 232) + v28 + 12) = v52;
        unint64_t v8 = v8 & 0xFFFFFFFF00000000 | v52;
        sub_1B661B6BC(a2, v8, 0, v44, a3, 0, v53, v54);
      }
      else
      {
        *(void *)(*(void *)(a3 + 232) + v28 + 12) = 0xFFFFFFFFLL;
      }
      v28 += 12;
    }
  }
}

void sub_1B661B968(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, const void *a6, const void *a7, const void *a8, CFIndex a9, char a10)
{
  int v13 = a5;
  __int16 v15 = a3;
  uint64_t v17 = sub_1B6404D50(*(void *)(a1 + 16), a2, a3, a4, a5, (uint64_t)a6, (uint64_t)a7, (uint64_t)a8);
  *(_OWORD *)uint64_t v17 = 0u;
  *(_OWORD *)(v17 + 32) = 0u;
  *(_OWORD *)(v17 + 48) = 0u;
  *(_OWORD *)(v17 + 64) = 0u;
  *(_OWORD *)(v17 + 80) = 0u;
  *(_OWORD *)(v17 + 16) = 0u;
  uint64_t v18 = (_OWORD *)(v17 + 16);
  sub_1B63F1314(v17);
  *(_DWORD *)uint64_t v17 = ((unsigned __int16)a2 << 12) + (unsigned __int16)(v15 + HIWORD(a2));
  __int16 v26 = *(_WORD *)(v17 + 80) & 0xC7F8 | ((a10 & 7) << 11);
  *(void *)(v17 + 8) = a4;
  *(_WORD *)(v17 + 80) = v26 & 0xFFF8 | v13 & 7;
  if (v13 == 4)
  {
    *(void *)(v17 + 48) = 0;
    uint64_t v27 = 4;
    *uint64_t v18 = 0u;
    *(_OWORD *)(v17 + 32) = 0u;
    goto LABEL_61;
  }
  uint64_t v28 = *(const void **)v18;
  if (*(const void **)v18 != a6)
  {
    if (v28)
    {
      CFRelease(v28);
      *(void *)uint64_t v18 = 0;
    }
    if (a6) {
      CFTypeRef v29 = CFRetain(a6);
    }
    else {
      CFTypeRef v29 = 0;
    }
    *(void *)uint64_t v18 = v29;
  }
  uint64_t v30 = *(const void **)(v17 + 24);
  if (v30 != a7)
  {
    if (v30)
    {
      CFRelease(v30);
      *(void *)(v17 + 24) = 0;
    }
    if (a7) {
      CFTypeRef v31 = CFRetain(a7);
    }
    else {
      CFTypeRef v31 = 0;
    }
    *(void *)(v17 + 24) = v31;
  }
  uint64_t v32 = *(const void **)(v17 + 32);
  if (v32)
  {
    CFRelease(v32);
    *(void *)(v17 + 32) = 0;
  }
  uint64_t v33 = *(const void **)(v17 + 40);
  if (v33 != a8)
  {
    if (v33)
    {
      CFRelease(v33);
      *(void *)(v17 + 40) = 0;
    }
    if (a8) {
      CFTypeRef v34 = CFRetain(a8);
    }
    else {
      CFTypeRef v34 = 0;
    }
    *(void *)(v17 + 40) = v34;
  }
  if (a7)
  {
    BOOL v35 = !a6 || (uint64_t)sub_1B63CF130((uint64_t)a6, v19, v20, v21, v22, v23, v24, v25);
    uint64_t v36 = sub_1B64ABD78((uint64_t)a7, a9, v35, v21, v22, v23, v24, v25);
    uint64_t v37 = *(const void **)(v17 + 48);
    if (v37 != v36)
    {
      if (v37)
      {
        CFRelease(v37);
        *(void *)(v17 + 48) = 0;
      }
      if (v36) {
        CFTypeRef v38 = CFRetain(v36);
      }
      else {
        CFTypeRef v38 = 0;
      }
      *(void *)(v17 + 48) = v38;
    }
  }
  if (a6)
  {
    CFArrayRef v39 = sub_1B63CCEC4((uint64_t)a6, v19, v20, v21, v22, v23, v24, v25);
    if (!v39)
    {
      uint64_t v46 = (const void *)sub_1B64AF438();
      uint64_t v47 = *(const void **)(v17 + 32);
      if (v47 != v46)
      {
        if (v47)
        {
          CFRelease(v47);
          *(void *)(v17 + 32) = 0;
        }
        if (v46) {
          CFTypeRef v48 = CFRetain(v46);
        }
        else {
          CFTypeRef v48 = 0;
        }
        *(void *)(v17 + 32) = v48;
      }
      if (v46) {
        CFRelease(v46);
      }
      goto LABEL_60;
    }
    CFArrayRef v40 = v39;
    uint64_t v41 = sub_1B63CD09C((uint64_t)a6);
    if (v41)
    {
      CFArrayRef v43 = (const __CFArray *)v41;
      CFArrayRef v44 = *(const __CFArray **)(v17 + 32);
      if (v44 != v43)
      {
        if (v44)
        {
          CFRelease(v44);
          *(void *)(v17 + 32) = 0;
        }
        CFArrayRef v45 = v43;
        goto LABEL_54;
      }
    }
    else
    {
      CFArrayRef v49 = sub_1B63CCF34((uint64_t)a6, a9 % (uint64_t)v40, v42, v21, v22, v23, v24, v25);
      CFArrayRef v50 = *(const __CFArray **)(v17 + 32);
      if (v50 != v49)
      {
        if (v50)
        {
          CFRelease(v50);
          *(void *)(v17 + 32) = 0;
        }
        if (!v49)
        {
          CFTypeRef v51 = 0;
          goto LABEL_55;
        }
        CFArrayRef v45 = v49;
LABEL_54:
        CFTypeRef v51 = CFRetain(v45);
LABEL_55:
        *(void *)(v17 + 32) = v51;
      }
    }
  }
LABEL_60:
  uint64_t v27 = 0xFFFFFFFFLL;
LABEL_61:

  sub_1B661AF20(a1, v17, v27, v21, v22, v23, v24, v25);
}

uint64_t sub_1B661BC38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = sub_1B6446190(a2, a2, a3, a4, a5, a6, a7, a8);
  sub_1B63F6B20(v10, *(void *)(a1 + 32));
  uint64_t v18 = sub_1B64461DC(a2, v11, v12, v13, v14, v15, v16, v17);
  unint64_t v25 = *(void *)(a1 + 32);

  return sub_1B6512D14(v18, v25, v19, v20, v21, v22, v23, v24);
}

void sub_1B661BC88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if ((*(_WORD *)(a1 + 80) & 0x20) != 0) {
    sub_1B661AFB8(a2, a1, 0xFFFFFFFFLL, a4, a5, a6, a7, a8);
  }
  *(void *)(a1 + 8) = 0;

  sub_1B63F1324(a1);
}

void sub_1B661BCD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"enginePipeline");
  }
  uint64_t v16 = sub_1B6453580(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v16) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v10, v11, v12, v13, v14, v15, (uint64_t)"store");
  }
  if (*(_DWORD *)(a2 + 228))
  {
    sub_1B661B030(v16, *(void *)(a2 + 224), a1, v11, v12, v13, v14, v15);
    *(void *)(a2 + 224) = 0xFFFFFFFFLL;
  }
  if (sub_1B649F94C(a2))
  {
    uint64_t v24 = sub_1B649F5F4(a2, v17, v18, v19, v20, v21, v22, v23);
    if (v24)
    {
      CFArrayRef v32 = (const __CFArray *)sub_1B63CE0D8(v24, v25, v26, v27, v28, v29, v30, v31);
      CFIndex Count = CFArrayGetCount(v32);
      if (Count != **(unsigned __int16 **)(a2 + 232)) {
        sub_1B63F2F54(17, @"Assertion '%s' failed. CFXRendererElementStoreDeallocateSpanForNodeGeometryLOD unexpected lod count", v33, v34, v35, v36, v37, v38, (uint64_t)"node->_rendererLOD->count == count");
      }
      if (Count >= 1)
      {
        uint64_t v40 = 0;
        uint64_t v41 = *(void *)(a2 + 232);
        do
        {
          if (*(_DWORD *)(v41 + v40 + 16))
          {
            sub_1B661B030(v16, *(void *)(v41 + v40 + 12), a1, v34, v35, v36, v37, v38);
            uint64_t v41 = *(void *)(a2 + 232);
          }
          *(void *)(v41 + v40 + 12) = 0xFFFFFFFFLL;
          v40 += 12;
          --Count;
        }
        while (Count);
      }
    }
  }
}

void sub_1B661BE18(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"store");
  }
  sub_1B6404570(a1[2]);
  sub_1B661DB58(a1[3], v9, v10, v11, v12, v13, v14, v15);
  uint64_t v23 = a1[4];

  sub_1B661DB58(v23, v16, v17, v18, v19, v20, v21, v22);
}

uint64_t sub_1B661BE84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"store");
  }
  uint64_t v9 = *(void *)(a1 + 16);

  return sub_1B6404D38(v9);
}

uint64_t sub_1B661BEE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"store");
  }
  uint64_t v9 = *(void *)(a1 + 16);

  return sub_1B6404D40(v9);
}

uint64_t sub_1B661BF3C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"store");
  }
  uint64_t v10 = *(void *)(a1 + 16);

  return sub_1B6404D50(v10, a2, 0, a4, a5, a6, a7, a8);
}

uint64_t sub_1B661BFA4(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v9 = a2;
  uint64_t v11 = HIDWORD(a2);
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"store");
  }
  if (v11 <= a3) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. wrong index in rendererElements span", a3, a4, a5, a6, a7, a8, (uint64_t)"index < (CFIndex)span.count");
  }
  uint64_t v12 = *(void *)(a1 + 16);

  return sub_1B6404D50(v12, v9, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B661C040(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = *(void *)(a1 + 16);
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 0x40000000;
  _OWORD v5[2] = sub_1B661C0B0;
  v5[3] = &unk_1E6145948;
  v5[4] = a2;
  void v5[5] = a3;
  return sub_1B6404E44(v3, (uint64_t)v5);
}

uint64_t sub_1B661C0B0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void))(a1 + 32))(a2, *(void *)(a1 + 40));
}

uint64_t sub_1B661C0C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B661DBD4(*(void *)(a1 + 24), (void *)*(int *)(a2 + 72), a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B661C0CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B661D8A0(*(void *)(a1 + 32), *(void **)(a2 + 32), a3, a4, a5, a6, a7, a8);
}

CFIndex sub_1B661C0D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B661DAFC(*(void *)(a1 + 24), a2, a3, a4, a5, a6, a7, a8);
}

CFIndex sub_1B661C0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B661DAFC(*(void *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B661C110(uint64_t a1)
{
  return sub_1B63CD09C(*(void *)(a1 + 24));
}

void sub_1B661C11C(void *a1)
{
  uint64_t v2 = a1[2];
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 0x40000000;
  uint64_t v6[2] = sub_1B661C0B0;
  _OWORD v6[3] = &unk_1E6145948;
  v6[4] = sub_1B661BC88;
  void v6[5] = a1;
  sub_1B6404E44(v2, (uint64_t)v6);
  uint64_t v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  uint64_t v4 = (const void *)a1[4];
  if (v4)
  {
    CFRelease(v4);
    a1[4] = 0;
  }
  uint64_t v5 = (const void *)a1[2];
  if (v5)
  {
    CFRelease(v5);
    a1[2] = 0;
  }
}

CFStringRef sub_1B661C1D4(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXRendererElementStore %p>", a1);
}

CFStringRef sub_1B661C214(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXRendererElementStore %p>", a1);
}

CFTypeRef sub_1B661C254(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (sub_1B649F5F4(a1, a2, a3, a4, a5, a6, a7, a8) == a2)
  {
    return sub_1B64A3954(a1, v10, v11, v12, v13, v14, v15, v16);
  }
  else
  {
    return sub_1B63CE23C(a2, v10, v11, v12, v13, v14, v15, v16);
  }
}

void sub_1B661C2B8(uint64_t a1, uint64_t a2)
{
  if (a2 && a1 + 544 != a2)
  {
    sub_1B661C2B8();
    free((void *)(a2 - 32));
  }
}

void ecs_stack_allocator_destroy(uint64_t *a1)
{
  sub_1B661C2B8((uint64_t)a1, *a1);

  free(a1);
}

BOOL ecs_stack_allocator_includes(unint64_t *a1, unint64_t a2)
{
  return *a1 <= a2 && *a1 + a1[1] > a2;
}

uint64_t ecs_stack_allocator_get_snapshot_depth(uint64_t a1)
{
  return *(unsigned int *)(a1 + 536);
}

uint64_t ecs_stack_allocator_get_allocated_size(uint64_t a1)
{
  return *(void *)(a1 + 16);
}

uLong sub_1B661D778(const Bytef *a1, uInt a2)
{
  unsigned int v4 = crc32(0, 0, 0);
  return crc32(v4, a1, a2);
}

uint64_t sub_1B661D7BC(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

void *sub_1B661D7EC(uint64_t a1)
{
  if (qword_1EB996E70 != -1) {
    dispatch_once_f(&qword_1EB996E70, &qword_1EB9885F0, (dispatch_function_t)sub_1B661D7BC);
  }
  CFAllocatorRef v2 = (void *)sub_1B63C8D44(qword_1EB9885F0, 0x40uLL);
  v2[2] = CFDictionaryCreateMutable(0, 0, 0, 0);
  v2[3] = sub_1B649185C();
  v2[4] = 0;
  void v2[5] = a1;
  v2[6] = sub_1B661DE68(16, 4096);
  sub_1B6491E48(v2[3], 0, a1);
  return v2;
}

uint64_t sub_1B661D8A0(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"indexStore");
  }
  uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
  if (Value) {
    return *(void *)Value;
  }
  else {
    return -1;
  }
}

uint64_t sub_1B661D908(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"indexStore");
  }
  uint64_t Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
  if (Value)
  {
    uint64_t v18 = (char *)Value;
    uint64_t result = *Value;
  }
  else
  {
    uint64_t v18 = sub_1B661DEF0(*(void *)(a1 + 48), v11, v12, v13, v14, v15, v16, v17);
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 16), key, v18);
    *((void *)v18 + 1) = 0;
    uint64_t result = sub_1B661D9BC(a1);
    *(void *)uint64_t v18 = result;
    ++*(void *)(a1 + 72);
  }
  ++*((void *)v18 + 1);
  return result;
}

uint64_t sub_1B661D9BC(uint64_t a1)
{
  uint64_t v8 = sub_1B64918B0(*(void *)(a1 + 24));
  if (v8 == -1)
  {
    sub_1B63F2F54(16, @"Error: indexstore::_getNextFreeIndex - no more free index", v2, v3, v4, v5, v6, v7, v11);
  }
  else
  {
    sub_1B649282C(*(void *)(a1 + 24), v8, v2, v3, v4, v5, v6, v7);
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9 <= v8) {
      uint64_t v9 = v8;
    }
    *(void *)(a1 + 32) = v9;
    *(unsigned char *)(a1 + 56) = 0;
  }
  return v8;
}

void sub_1B661DA28(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"indexStore");
  }
  uint64_t Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), key);
  if (Value)
  {
    unint64_t v11 = (unint64_t)Value;
    uint64_t v12 = Value[1] - 1;
    Value[1] = v12;
    if (!v12)
    {
      uint64_t v13 = *Value;
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 16), key);
      sub_1B661E084(*(void *)(a1 + 48), v11, v14, v15, v16, v17, v18, v19, v22);
      *(unsigned char *)(a1 + 56) = 0;
      sub_1B6492824(*(void *)(a1 + 24), v13);
      if (*(void *)(a1 + 32) == v13)
      {
        uint64_t v20 = sub_1B64918E0(*(void *)(a1 + 24));
        if (v20 <= 1) {
          uint64_t v21 = 1;
        }
        else {
          uint64_t v21 = v20;
        }
        *(void *)(a1 + 32) = v21 - 1;
      }
      ++*(void *)(a1 + 72);
    }
  }
}

CFIndex sub_1B661DAFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"indexStore");
  }
  CFDictionaryRef v9 = *(const __CFDictionary **)(a1 + 16);

  return CFDictionaryGetCount(v9);
}

void sub_1B661DB58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"indexStore");
  }
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 56) = 0;
  sub_1B64924FC(*(void *)(a1 + 24));
  sub_1B6491E48(*(void *)(a1 + 24), 0, *(void *)(a1 + 40));
  CFDictionaryRef v9 = *(__CFDictionary **)(a1 + 16);

  CFDictionaryRemoveAllValues(v9);
}

uint64_t sub_1B661DBD4(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!*(unsigned char *)(a1 + 56))
  {
    CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 16));
    unint64_t v11 = *(void **)(a1 + 64);
    if (v11)
    {
      free(v11);
      *(void *)(a1 + 64) = 0;
    }
    if (Count >= 1)
    {
      uint64_t v12 = *(void *)(a1 + 32);
      *(void *)(a1 + 64) = malloc_type_malloc(8 * v12 + 8, 0x100004000313F17uLL);
      uint64_t v13 = (const void **)malloc_type_malloc(8 * Count, 0x80040B8603338uLL);
      CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)(a1 + 16), v13, 0);
      qsort(v13, Count, 8uLL, (int (__cdecl *)(const void *, const void *))sub_1B661DE1C);
      uint64_t v14 = 0;
      while (1)
      {
        uint64_t Value = (uint64_t *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 16), v13[v14]);
        if (Value)
        {
          uint64_t v22 = *Value;
          if ((*Value & 0x8000000000000000) == 0 && v22 <= v12) {
            goto LABEL_12;
          }
        }
        else
        {
          uint64_t v22 = -1;
        }
        sub_1B63F2F54(17, @"Assertion '%s' failed. CFXIndexStoreGetOrderedIndexForKey index out of bounds", v16, v17, v18, v19, v20, v21, (uint64_t)"alignedIndex >= 0 && alignedIndex < bufferLength");
LABEL_12:
        *(void *)(*(void *)(a1 + 64) + 8 * v22) = v14++;
        if (Count == v14)
        {
          free(v13);
          break;
        }
      }
    }
    *(unsigned char *)(a1 + 56) = 1;
  }
  uint64_t result = sub_1B661D8A0(a1, key, a3, a4, a5, a6, a7, a8);
  if (result != -1)
  {
    uint64_t v24 = *(void *)(a1 + 64);
    if (v24) {
      return *(void *)(v24 + 8 * result);
    }
  }
  return result;
}

void sub_1B661DD50(void *a1)
{
  uint64_t v2 = (const void *)a1[2];
  if (v2)
  {
    CFRelease(v2);
    a1[2] = 0;
  }
  uint64_t v3 = (const void *)a1[3];
  if (v3)
  {
    CFRelease(v3);
    a1[3] = 0;
  }
  uint64_t v4 = (const void *)a1[6];
  if (v4)
  {
    CFRelease(v4);
    a1[6] = 0;
  }
  uint64_t v5 = (void *)a1[8];

  free(v5);
}

CFStringRef sub_1B661DDB4(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXIndexStore>");
}

CFStringRef sub_1B661DDE8(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXIndexStore>");
}

uint64_t sub_1B661DE1C(void *a1, void *a2)
{
  if (*a1 < *a2) {
    unsigned int v2 = -1;
  }
  else {
    unsigned int v2 = 1;
  }
  if (*a1 == *a2) {
    return 0;
  }
  else {
    return v2;
  }
}

uint64_t sub_1B661DE38(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

void *sub_1B661DE68(uint64_t a1, uint64_t a2)
{
  if (qword_1EB996E50 != -1) {
    dispatch_once_f(&qword_1EB996E50, &qword_1EB9952A0, (dispatch_function_t)sub_1B661DE38);
  }
  uint64_t v4 = (void *)sub_1B63C8D44(qword_1EB9952A0, 0x38uLL);
  void v4[5] = sub_1B649185C();
  uint64_t v4[2] = a1;
  v4[3] = a2;
  return v4;
}

char *sub_1B661DEF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"allocator");
  }
  uint64_t v15 = sub_1B64918B0(*(void *)(a1 + 40));
  if (v15 == -1)
  {
    uint64_t v16 = *(void *)(a1 + 48);
    if (v16)
    {
      *(void *)(a1 + 48) = v16 + 1;
      uint64_t v17 = (char *)malloc_type_realloc(*(void **)(a1 + 32), 16 * (v16 + 1), 0x10800409227ACB4uLL);
      *(void *)(a1 + 32) = v17;
      uint64_t v18 = &v17[16 * v16];
      *(void *)uint64_t v18 = malloc_type_malloc(*(void *)(a1 + 24) * *(void *)(a1 + 16), 0x9F927EBDuLL);
      uint64_t v19 = *(void *)(a1 + 24);
      *((_DWORD *)v18 + 2) = v19;
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v21 = v19 * v16;
    }
    else
    {
      uint64_t v22 = malloc_type_calloc(0x10uLL, 1uLL, 0x6EAFF678uLL);
      *(void *)(a1 + 32) = v22;
      *(void *)uint64_t v22 = malloc_type_malloc(*(void *)(a1 + 24) * *(void *)(a1 + 16), 0x9F927EBDuLL);
      uint64_t v19 = *(void *)(a1 + 24);
      _OWORD v22[2] = v19;
      *(void *)(a1 + 48) = 1;
      uint64_t v20 = *(void *)(a1 + 40);
      uint64_t v21 = 0;
    }
    sub_1B6491E48(v20, v21, v19);
    uint64_t v15 = sub_1B64918B0(*(void *)(a1 + 40));
  }
  sub_1B649282C(*(void *)(a1 + 40), v15, v9, v10, v11, v12, v13, v14);
  uint64_t v23 = *(void *)(a1 + 24);
  uint64_t v24 = *(void *)(a1 + 32) + 16 * (v15 / v23);
  --*(_DWORD *)(v24 + 8);
  uint64_t v25 = *(char **)v24;
  if (!*(void *)v24)
  {
    uint64_t v25 = (char *)malloc_type_malloc(*(void *)(a1 + 16) * v23, 0x9F927EBDuLL);
    *(void *)uint64_t v24 = v25;
    *(_DWORD *)(v24 + 8) = *(_DWORD *)(a1 + 24) - 1;
    --*(void *)(a1 + 56);
  }
  return &v25[*(void *)(a1 + 16) * (v15 % v23)];
}

void sub_1B661E084(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"allocator");
  }
  uint64_t v12 = (uint64_t *)(a1 + 48);
  uint64_t v11 = *(void *)(a1 + 48);
  if (v11 < 1)
  {
LABEL_10:
    sub_1B63F2F54(16, @"Error: CFXAllocatorDelete - unknown address", a3, a4, a5, a6, a7, a8, a9);
  }
  else
  {
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    unint64_t v15 = *(void *)(a1 + 16);
    uint64_t v16 = *(void *)(a1 + 24);
    uint64_t v17 = *(void *)(a1 + 32);
    while (1)
    {
      unint64_t v18 = *(void *)(v17 + v13);
      if (v18 <= a2 && v18 + v16 * v15 > a2) {
        break;
      }
      ++v14;
      v13 += 16;
      if (!--v11) {
        goto LABEL_10;
      }
    }
    sub_1B6492824(*(void *)(a1 + 40), (a2 - v18) / v15 + v14 * v16);
    uint64_t v20 = *(int *)(v17 + v13 + 8) + 1;
    *(_DWORD *)(v17 + v13 + 8) = v20;
    if (*(void *)(a1 + 24) == v20 && (!*(unsigned char *)(a1 + 64) || *v12 >= 2))
    {
      ++*(void *)(a1 + 56);
      free(*(void **)(*(void *)(a1 + 32) + v13));
      uint64_t v21 = *(char **)(a1 + 32);
      *(void *)&v21[v13] = 0;
      if (*(void *)(a1 + 56) == *(void *)(a1 + 48))
      {
        free(v21);
        *(void *)(a1 + 32) = 0;
        sub_1B64924FC(*(void *)(a1 + 40));
        *uint64_t v12 = 0;
        *(void *)(a1 + 56) = 0;
      }
    }
  }
}

void sub_1B661E1E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"allocator");
  }
  if (*(uint64_t *)(a1 + 48) >= 1)
  {
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    do
    {
      uint64_t v11 = *(void *)(a1 + 32);
      free(*(void **)(v11 + v9));
      *(void *)(v11 + v9) = 0;
      ++v10;
      v9 += 16;
    }
    while (v10 < *(void *)(a1 + 48));
  }
  free(*(void **)(a1 + 32));
  *(void *)(a1 + 32) = 0;
  sub_1B64924FC(*(void *)(a1 + 40));
  *(void *)(a1 + 48) = 0;
  *(void *)(a1 + 56) = 0;
}

void sub_1B661E290(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B661E1E0(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t v9 = *(const void **)(a1 + 40);
  if (v9)
  {
    CFRelease(v9);
    *(void *)(a1 + 40) = 0;
  }
}

CFStringRef sub_1B661E2C4(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXAllocator>");
}

CFStringRef sub_1B661E2F8(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXAllocator>");
}

uint64_t sub_1B661E388(uint64_t a1, void *key, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1)
  {
    if (key) {
      goto LABEL_3;
    }
  }
  else
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"controller");
    if (key) {
      goto LABEL_3;
    }
  }
  sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"name");
LABEL_3:
  CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 48);
  if (!v10)
  {
    *(void *)(a1 + 48) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], 0);
    *(void *)(a1 + 56) = CFDictionaryCreateMutable(0, 0, 0, MEMORY[0x1E4F1D540]);
    CFDictionaryRef v10 = *(const __CFDictionary **)(a1 + 48);
  }
  uint64_t Value = CFDictionaryGetValue(v10, key);
  if (Value) {
    return *Value;
  }
  CFTypeRef v35 = 0;
  CFTypeRef cf = 0;
  int v12 = (*(uint64_t (**)(void, void *, CFTypeRef *, CFTypeRef *))(a1 + 24))(*(void *)(a1 + 16), key, &cf, &v35);
  if (v12)
  {
    int v13 = v12;
    uint64_t Value = malloc_type_calloc(0x18uLL, 1uLL, 0x9BFD30A1uLL);
    CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)(a1 + 56));
    uint64_t v21 = a1 + Count;
    if (Count >= 64) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. CFXAnimatableParamControllerGetParamDescription - address out of bounds", v15, v16, v17, v18, v19, v20, (uint64_t)"address < (void*) ((unsigned char*)controller+sizeof(struct __CFXAnimatableParamController))");
    }
    uint64_t v22 = sub_1B660F6B0((const void *)a1, v21, v13, 0);
    *uint64_t Value = v22;
    CFTypeRef v23 = cf;
    if (!cf)
    {
      CFTypeRef v23 = *(CFTypeRef *)(a1 + 16);
      if (v23) {
        CFTypeRef v23 = CFRetain(v23);
      }
    }
    Value[1] = v23;
    CFTypeRef v24 = v35;
    if (!v35) {
      CFTypeRef v24 = CFRetain(key);
    }
    Value[2] = v24;
    CFDictionaryAddValue(*(CFMutableDictionaryRef *)(a1 + 48), key, Value);
    uint64_t v25 = *(__CFDictionary **)(a1 + 56);
    uint64_t v33 = (const void *)sub_1B660F8C4(v22, v26, v27, v28, v29, v30, v31, v32);
    CFDictionaryAddValue(v25, v33, key);
    return *Value;
  }
  if (cf)
  {
    CFRelease(cf);
    CFTypeRef cf = 0;
  }
  if (v35) {
    CFRelease(v35);
  }
  return 0;
}

void sub_1B661E560(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = &a1[a2];
  uint64_t v74 = v8 + 801;
  __int16 v9 = *(_WORD *)(a3 + 224);
  __int16 v10 = *(_WORD *)(a3 + 226);
  int v11 = *(_DWORD *)(a3 + 220);
  int v12 = *(_DWORD *)(a3 + 228) + (v11 << 18 >> 31);
  if ((v11 & 0x4000) != 0)
  {
    if (sub_1B6447978(a1[790].i64[1]))
    {
      uint64_t v22 = &a1[a2];
      CFTypeRef v23 = &v22[801].i32[2];
      unsigned int v24 = v22[801].u32[2];
      if (v24 + v12 > v22[801].i32[3])
      {
        sub_1B63F2F54(17, @"Assertion '%s' failed. Not enough space allocated", v16, v17, v18, v19, v20, v21, (uint64_t)"sequence->count + count <= sequence->allocatedCount");
        unsigned int v24 = *v23;
      }
      if (v12)
      {
        int v25 = 0;
        uint64_t v26 = (_WORD *)(v74->i64[0] + 4 * v24);
        do
        {
          _WORD *v26 = v9;
          v26[1] = v10 + v25++;
          v26 += 2;
        }
        while (v12 != v25);
      }
      unsigned int v27 = v24 + v12;
      *CFTypeRef v23 = v27;
      uint64_t v28 = *(_WORD **)(a3 + 232);
      uint64_t v29 = (unsigned __int16)*v28;
      if (*v28)
      {
        uint64_t v30 = 0;
        do
        {
          uint64_t v31 = *(void *)(a3 + 232) + 12 * v30;
          __int16 v32 = *(_WORD *)(v31 + 12);
          __int16 v33 = *(_WORD *)(v31 + 14);
          int v34 = *(_DWORD *)(v31 + 16);
          if (v27 + v34 > v22[801].i32[3])
          {
            sub_1B63F2F54(17, @"Assertion '%s' failed. Not enough space allocated", v16, v17, v18, v19, v20, v21, (uint64_t)"sequence->count + count <= sequence->allocatedCount");
            unsigned int v27 = *v23;
          }
          if (v34)
          {
            int v35 = 0;
            uint64_t v36 = (_WORD *)(v74->i64[0] + 4 * v27);
            do
            {
              *uint64_t v36 = v32;
              v36[1] = v33 + v35++;
              v36 += 2;
            }
            while (v34 != v35);
          }
          v27 += v34;
          *CFTypeRef v23 = v27;
          ++v30;
        }
        while (v30 != v29);
      }
      return;
    }
    uint64_t v37 = *(float **)(a3 + 232);
    uint64_t v38 = *(unsigned __int16 *)v37;
    if (*((unsigned char *)v37 + 2))
    {
      float32x4_t v76 = 0uLL;
      sub_1B63F49F8((CFTypeRef)a3, 0, (uint64_t)&v76, v17, v18, v19, v20, v21);
      float32x4_t v75 = 0uLL;
      uint64_t v46 = (float32x4_t *)sub_1B64A01D4(a3, v39, v40, v41, v42, v43, v44, v45);
      sub_1B6403C2C(&v76, v46, &v75);
      float32x4_t v47 = vaddq_f32(vaddq_f32(v75, vmulq_laneq_f32(a1[793], v75, 3)), vmulq_laneq_f32(a1[794], v75, 3));
      float32x4_t v48 = a1[797];
      float32x4_t v49 = a1[798];
      float32x4_t v50 = a1[799];
      float32x4_t v51 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a1[800], v50, v75, 2), v49, *(float32x2_t *)v75.f32, 1), v48, v75.f32[0]);
      float32x4_t v52 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 3);
      v53.i64[0] = 0;
      int8x16_t v54 = (int8x16_t)vdupq_n_s32(0x322BCC77u);
      float32x4_t v55 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a1[800], v50, v47, 2), v49, *(float32x2_t *)v47.f32, 1), v48, v47.f32[0]);
      float32x4_t v56 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v55, 3);
      float32x4_t v57 = vsubq_f32(vdivq_f32(v51, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v52, v53)), 0), (int8x16_t)v52, v54)), vdivq_f32(v55, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v56, v53)), 0), (int8x16_t)v56, v54)));
      float32x4_t v58 = vmulq_f32(v57, v57);
      float v59 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v58, 2), vaddq_f32(v58, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.f32, 1))).f32[0])* 0.5;
      __n128 v61 = sub_1B64479C4((__n128 *)a1[790].i64[1]);
      LODWORD(v60) = 0;
      v61.n128_u32[0] = v61.n128_u32[3];
      if (v61.n128_f32[2] > v61.n128_f32[3]) {
        v61.n128_f32[0] = v61.n128_f32[2];
      }
      float v62 = v61.n128_f32[0] * v59;
      if (v37[2] < v62) {
        goto LABEL_35;
      }
      if (v38 >= 2)
      {
        uint64_t v63 = v37 + 5;
        uint64_t v60 = 1;
        while (*v63 >= v62)
        {
          ++v60;
          v63 += 3;
          if (v38 == v60)
          {
            LODWORD(v60) = v38;
            goto LABEL_35;
          }
        }
        goto LABEL_35;
      }
    }
    else
    {
      v76.i32[2] = 0;
      v76.i64[0] = 0;
      sub_1B64A1EC8(a3, (__n128 *)&v76, v16, v17, v18, v19, v20, v21);
      LODWORD(v60) = 0;
      float32x4_t v64 = a1[792];
      float32x4_t v65 = vmulq_f32(v76, v64);
      float v66 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v64, 3), vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v65, 2), vaddq_f32(v65, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v65.f32, 1)))).f32[0];
      if (v66 < 0.0) {
        float v66 = 0.0;
      }
      if (v37[2] > v66) {
        goto LABEL_35;
      }
      if (v38 >= 2)
      {
        LODWORD(v60) = v38;
        uint64_t v67 = v37 + 5;
        uint64_t v68 = 1;
        while (*v67 <= v66)
        {
          ++v68;
          v67 += 3;
          if (v38 == v68) {
            goto LABEL_35;
          }
        }
        LODWORD(v60) = v68;
        goto LABEL_35;
      }
    }
    LODWORD(v60) = 1;
LABEL_35:
    if ((int)v60 >= 1)
    {
      uint64_t v69 = *(void *)(a3 + 232) + 12 * v60;
      __int16 v9 = *(_WORD *)v69;
      __int16 v10 = *(_WORD *)(v69 + 2);
      int v12 = *(_DWORD *)(v69 + 4);
    }
  }
  uint64_t v70 = &v8[801].i32[2];
  unsigned int v71 = v8[801].u32[2];
  if (v71 + v12 > v8[801].i32[3])
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Not enough space allocated", a3, a4, a5, a6, a7, a8, (uint64_t)"sequence->count + count <= sequence->allocatedCount");
    unsigned int v71 = *v70;
  }
  if (v12)
  {
    int v72 = 0;
    uint64_t v73 = (_WORD *)(v74->i64[0] + 4 * v71);
    do
    {
      *uint64_t v73 = v9;
      v73[1] = v10 + v72++;
      v73 += 2;
    }
    while (v12 != v72);
  }
  *uint64_t v70 = v71 + v12;
}

void sub_1B661E988(uint64_t a1, __int16 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v8 = a4;
  __int16 v9 = a3;
  unsigned int v12 = *(_DWORD *)(a1 + 8);
  if (v12 + a4 > *(_DWORD *)(a1 + 12))
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Not enough space allocated", a3, a4, a5, a6, a7, a8, (uint64_t)"sequence->count + count <= sequence->allocatedCount");
    unsigned int v12 = *(_DWORD *)(a1 + 8);
  }
  if (v8)
  {
    int v13 = 0;
    uint64_t v14 = (_WORD *)(*(void *)a1 + 4 * v12);
    do
    {
      *uint64_t v14 = a2;
      v14[1] = v13++ + v9;
      v14 += 2;
    }
    while (v8 != v13);
  }
  *(_DWORD *)(a1 + 8) = v12 + v8;
}

uint64_t sub_1B661EA28(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a1[789].i64[0] & *(void *)(a3 + 208) | ((a1[788].i64[1] & *(void *)(a3 + 208)) == 0)) {
    return 0;
  }
  int v11 = *(_DWORD *)(a3 + 228);
  if (!v11) {
    return 0;
  }
  __int16 v14 = *(_WORD *)(a3 + 224);
  __int16 v15 = *(_WORD *)(a3 + 226);
  if (sub_1B64A3270(a3, a2, a3, a4, a5, a6, a7, a8)) {
    return 1;
  }
  int v23 = *(_DWORD *)(a3 + 220);
  if ((v23 & 0x1000) == 0)
  {
    if ((v23 & 0x2000) != 0) {
      goto LABEL_9;
    }
LABEL_18:
    sub_1B661E560(a1, a2, a3, v18, v19, v20, v21, v22);
    return 0;
  }
  a1[817].i8[0] = 1;
  if (a1[788].i8[0] || a1[787].i64[0]) {
    return 0;
  }
  if ((*(_DWORD *)(a3 + 220) & 0x2000) == 0) {
    goto LABEL_18;
  }
LABEL_9:
  a1[817].i8[0] = 1;
  if (a1[786].i64[1] == a3 || sub_1B65F6D48(a1[785].i64[1], v16, v17, v18, v19, v20, v21, v22)) {
    goto LABEL_18;
  }
  uint64_t v26 = sub_1B63F4F54((void *)a3, v24, v25, v18, v19, v20, v21, v22);
  CFDictionaryRef v33 = sub_1B64B1370(v26, (void *)a3, v27, v28, v29, v30, v31, v32);
  if (v33)
  {
    uint64_t v41 = sub_1B651605C((uint64_t)v33, v34, v35, v36, v37, v38, v39, v40);
    if (!v41 || sub_1B6515F54(v41, v42, v43, v44, v45, v46, v47, v48))
    {
      uint64_t v49 = (uint64_t)&a1[a2 + 801];
      uint64_t v8 = 1;
      sub_1B661E988(v49, v14, (unsigned __int16)(v15 + v11 - 1), 1, v45, v46, v47, v48);
      return v8;
    }
    return 1;
  }
  uint64_t v8 = 1;
  if ((byte_1E9DDBF50 & 1) == 0)
  {
    byte_1E9DDBF50 = 1;
    sub_1B63F2F54(16, @"Error: renderGraph should not be null", v35, v36, v37, v38, v39, v40, v50);
  }
  return v8;
}

uint64_t sub_1B661EB8C(float32x4_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1B661EA28(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!result)
  {
    v12[0] = MEMORY[0x1E4F143A8];
    v12[1] = 0x40000000;
    v12[2] = sub_1B661EC20;
    v12[3] = &unk_1E6145968;
    v12[4] = a1;
    v12[5] = a2;
    return sub_1B649FD10(a3, (uint64_t)v12);
  }
  return result;
}

uint64_t sub_1B661EC20(uint64_t a1, uint64_t a2)
{
  return sub_1B661EB8C(*(void *)(a1 + 32), *(void *)(a1 + 40), a2);
}

uint64_t sub_1B661EC30(float32x4_t *a1, uint64_t a2, float32x4_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (sub_1B649FA1C((uint64_t)a3, a2, (uint64_t)a3, a4, a5, a6, a7, a8))
  {
    int v16 = 2;
  }
  else
  {
    float32x4_t v30 = 0u;
    float32x4_t v31 = 0u;
    uint64_t result = sub_1B64A00F0(a3, 0, &v30, v11, v12, v13, v14, v15);
    if ((result & 1) == 0) {
      return result;
    }
    uint64_t v24 = &a1[6 * a2];
    float32x4_t v25 = v24[4];
    v29[2] = v24[3];
    uint64_t v29[3] = v25;
    float32x4_t v26 = v24[6];
    _WORD v29[4] = v24[5];
    v29[5] = v26;
    float32x4_t v27 = v24[2];
    v29[0] = v24[1];
    v29[1] = v27;
    uint64_t result = vfx_frustum_classify_aabb(v29, v30, v31);
    int v16 = result;
    if (result == 1) {
      return result;
    }
  }
  uint64_t result = sub_1B661EA28(a1, a2, (uint64_t)a3, v11, v12, v13, v14, v15);
  if (!result)
  {
    if (v16 == 2)
    {
      uint64_t result = sub_1B6477268((uint64_t)a3);
      if (result)
      {
        for (uint64_t i = a3[4].i64[1]; i; uint64_t i = *(void *)(i + 80))
          uint64_t result = sub_1B661EC30(a1, a2, i);
      }
    }
    else if (!v16)
    {
      uint64_t result = sub_1B6477268((uint64_t)a3);
      if (result)
      {
        for (uint64_t j = a3[4].i64[1]; j; uint64_t j = *(void *)(j + 80))
          uint64_t result = sub_1B661EB8C(a1, a2, j, v18, v19, v20, v21, v22);
      }
    }
  }
  return result;
}

uint64_t sub_1B661ED4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    return -1;
  }
  CFDictionaryRef v8 = sub_1B64A3B48(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!v8) {
    return -1;
  }

  return sub_1B649BDD0((uint64_t)v8, v9, v10, v11, v12, v13, v14, v15);
}

double sub_1B661ED84(uint64_t a1, __n128 *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = sub_1B644678C((uint64_t *)a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  if (v10)
  {
    uint64_t v19 = (uint64_t)v10;
    uint64_t v20 = (float32x4_t *)sub_1B64A01D4((uint64_t)v10, v11, v12, v13, v14, v15, v16, v17);
    float32x4_t v21 = v20[2];
    float32x4_t v22 = v20[3];
    float32x4_t v23 = vnegq_f32(v21);
    float32x4_t v24 = vmulq_f32(v22, v23);
    v23.f32[3] = -vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v24, 2), vaddq_f32(v24, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v24.f32, 1))).f32[0];
    float32x4_t v25 = *v20;
    float32x4_t v26 = v20[1];
    *(float32x4_t *)(a1 + 12672) = v23;
    *(float32x4_t *)(a1 + 12688) = v25;
    *(float32x4_t *)(a1 + 12704) = v26;
    *(float32x4_t *)(a1 + 12720) = v21;
    *(float32x4_t *)(a1 + 12736) = v22;
    __n128 v53 = sub_1B64479C4(a2);
    memset(v52, 0, sizeof(v52));
    if ((sub_1B63E0460(v19, (uint64_t)v52, v27, v28, v29, v30, v31, v32) & 1) == 0) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Invalid point of view", v34, v35, v36, v37, v38, v39, (uint64_t)"NULL");
    }
    if ((v52[0] & 2) != 0 || sub_1B6447410((uint64_t)a2, v33, v34, v35, v36, v37, v38, v39)) {
      sub_1B63E0578((uint64_t)v52, v19, (uint64_t)&v53, *(void *)(a1 + 12640), v36, v37, v38, v39, v47);
    }
    if (*(unsigned char *)(a1 + 12612)) {
      *(float32x2_t *)((char *)v52 + 4) = vcvt_f32_f64(*(float64x2_t *)(a1 + 12656));
    }
    uint64_t v42 = sub_1B649CD50((unsigned __int8 *)v52, (uint64_t)&v53, v40, v41, v36, v37, v38, v39);
    float32x4_t v50 = *((float32x4_t *)v42 + 1);
    float32x4_t v51 = *(float32x4_t *)v42;
    float32x4_t v48 = *((float32x4_t *)v42 + 3);
    float32x4_t v49 = *((float32x4_t *)v42 + 2);
    simd_float4x4 v59 = __invert_f4(*(simd_float4x4 *)(a1 + 12688));
    uint64_t v43 = 0;
    simd_float4x4 v54 = v59;
    long long v55 = 0u;
    long long v56 = 0u;
    long long v57 = 0u;
    long long v58 = 0u;
    do
    {
      *(long long *)((char *)&v55 + v43 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v51, COERCE_FLOAT(*(_OWORD *)&v54.columns[v43])), v50, *(float32x2_t *)v54.columns[v43].f32, 1), v49, (float32x4_t)v54.columns[v43], 2), v48, (float32x4_t)v54.columns[v43], 3);
      ++v43;
    }
    while (v43 != 4);
    double result = *(double *)&v55;
    long long v44 = v56;
    long long v45 = v57;
    long long v46 = v58;
    *(_OWORD *)(a1 + 12752) = v55;
    *(_OWORD *)(a1 + 12768) = v44;
    *(_OWORD *)(a1 + 12784) = v45;
    *(_OWORD *)(a1 + 12800) = v46;
  }
  return result;
}

double sub_1B661EF38(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = (_OWORD *)(a1 + 9232);
  do
  {
    if (v2)
    {
      uint64_t v4 = (_OWORD *)(a1 + (v2 << 6));
      long long v5 = v3[1];
      v4[577] = *v3;
      v4[578] = v5;
      long long v6 = v3[3];
      v4[579] = v3[2];
      v4[580] = v6;
    }
    uint64_t v7 = a1 + (v2 << 6);
    simd_float4x4 v23 = __invert_f4(*(simd_float4x4 *)(v7 + 7184));
    uint64_t v8 = 0;
    *(simd_float4x4 *)(v7 + 8208) = v23;
    float32x4_t v9 = *(float32x4_t *)(v7 + 9232);
    float32x4_t v10 = *(float32x4_t *)(v7 + 9248);
    float32x4_t v11 = *(float32x4_t *)(v7 + 9264);
    float32x4_t v12 = *(float32x4_t *)(v7 + 9280);
    simd_float4x4 v18 = v23;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    do
    {
      *(long long *)((char *)&v19 + v8 * 16) = (__int128)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v9, COERCE_FLOAT(*(_OWORD *)&v18.columns[v8])), v10, *(float32x2_t *)v18.columns[v8].f32, 1), v11, (float32x4_t)v18.columns[v8], 2), v12, (float32x4_t)v18.columns[v8], 3);
      ++v8;
    }
    while (v8 != 4);
    uint64_t v13 = (_OWORD *)(a1 + (v2 << 6));
    double result = *(double *)&v19;
    long long v15 = v20;
    long long v16 = v21;
    long long v17 = v22;
    v13[641] = v19;
    v13[642] = v15;
    v13[643] = v16;
    v13[644] = v17;
    ++v2;
  }
  while (v2 != 6);
  return result;
}

uint64_t sub_1B661F040(uint64_t result)
{
  for (uint64_t i = 0; i != 1024; i += 64)
  {
    uint64_t v2 = (_OWORD *)(result + i);
    v2[97] = xmmword_1B6E4F300;
    v2[98] = xmmword_1B6E4F320;
    v2[99] = xmmword_1B6E4F2E0;
    v2[100] = xmmword_1B6E4F370;
    v2[161] = xmmword_1B6E4F300;
    v2[162] = xmmword_1B6E4F320;
    v2[163] = xmmword_1B6E4F2E0;
    v2[164] = xmmword_1B6E4F370;
    v2[225] = xmmword_1B6E4F300;
    v2[226] = xmmword_1B6E4F320;
    v2[227] = xmmword_1B6E4F2E0;
    v2[228] = xmmword_1B6E4F370;
    v2[289] = xmmword_1B6E4F300;
    v2[290] = xmmword_1B6E4F320;
    v2[291] = xmmword_1B6E4F2E0;
    v2[292] = xmmword_1B6E4F370;
    v2[449] = xmmword_1B6E4F300;
    v2[450] = xmmword_1B6E4F320;
    v2[451] = xmmword_1B6E4F2E0;
    v2[452] = xmmword_1B6E4F370;
    v2[513] = xmmword_1B6E4F300;
    v2[514] = xmmword_1B6E4F320;
    v2[515] = xmmword_1B6E4F2E0;
    v2[516] = xmmword_1B6E4F370;
    v2[577] = xmmword_1B6E4F300;
    v2[578] = xmmword_1B6E4F320;
    v2[579] = xmmword_1B6E4F2E0;
    v2[580] = xmmword_1B6E4F370;
    v2[641] = xmmword_1B6E4F300;
    v2[642] = xmmword_1B6E4F320;
    v2[643] = xmmword_1B6E4F2E0;
    v2[644] = xmmword_1B6E4F370;
  }
  return result;
}

__n128 sub_1B661F0F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  float32x4_t v11 = (unsigned __int8 *)(a1 + 12560);
  int v12 = *(unsigned __int8 *)(a1 + 12615);
  if (*(unsigned char *)(a1 + 12613)) {
    BOOL v13 = 0;
  }
  else {
    BOOL v13 = v12 == 2;
  }
  if (!v13)
  {
    int v14 = sub_1B63CBCB0(a2);
    unsigned __int8 *v11 = v14;
    if (v12)
    {
      if (v12 == 1)
      {
        memset(&v142, 0, sizeof(v142));
        sub_1B64A27C4(a3, (uint64_t)&v142, v15, v16, v17, v18, v19, v20);
        simd_float4x4 v21 = __invert_f4(v142);
        simd_float4 v140 = v21.columns[1];
        simd_float4 v141 = v21.columns[0];
        simd_float4 v138 = v21.columns[3];
        simd_float4 v139 = v21.columns[2];
        if (*v11)
        {
          unint64_t v27 = 0;
          do
          {
            uint64_t v28 = (_OWORD *)(a1 + (v27 << 6));
            uint64_t v29 = (_OWORD *)sub_1B6446D74(a2, 0, v27, v22, v23, v24, v25, v26);
            long long v30 = v29[2];
            long long v31 = v29[3];
            long long v32 = v29[1];
            v28[577] = *v29;
            v28[580] = v31;
            v28[579] = v30;
            v28[578] = v32;
            uint64_t v38 = (float32x4_t *)sub_1B6446D74(a2, 1, v27, v33, v34, v35, v36, v37);
            uint64_t v39 = 0;
            float32x4_t v40 = *v38;
            float32x4_t v41 = v38[1];
            float32x4_t v42 = v38[2];
            float32x4_t v43 = v38[3];
            v151[0] = v141;
            v151[1] = v140;
            v151[2] = v139;
            v151[3] = v138;
            memset(&v143, 0, sizeof(v143));
            do
            {
              v143.columns[v39] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v40, COERCE_FLOAT(v151[v39])), v41, *(float32x2_t *)&v151[v39], 1), v42, (float32x4_t)v151[v39], 2), v43, (float32x4_t)v151[v39], 3);
              ++v39;
            }
            while (v39 != 4);
            simd_float4x4 v152 = v143;
            uint64_t v44 = a1 + (v27 << 6);
            *(simd_float4 *)(v44 + 8208) = v143.columns[0];
            *(simd_float4 *)(v44 + 8224) = v152.columns[1];
            *(simd_float4 *)(v44 + 8240) = v152.columns[2];
            *(simd_float4 *)(v44 + 8256) = v152.columns[3];
            *(simd_float4x4 *)(v44 + 7184) = __invert_f4(v152);
            *(_OWORD *)(v44 + 1552) = *(_OWORD *)(v44 + 7184);
            *(_OWORD *)(v44 + 1568) = *(_OWORD *)(v44 + 7200);
            *(_OWORD *)(v44 + 1584) = *(_OWORD *)(v44 + 7216);
            *(_OWORD *)(v44 + 1600) = *(_OWORD *)(v44 + 7232);
            long long v45 = v28[577];
            long long v46 = v28[578];
            long long v47 = v28[579];
            *(_OWORD *)(v44 + 3648) = v28[580];
            *(_OWORD *)(v44 + 3632) = v47;
            *(_OWORD *)(v44 + 3616) = v46;
            *(_OWORD *)(v44 + 3600) = v45;
            v21.columns[0] = (simd_float4)sub_1B64471F4(a2, v27, v48, v49, v50, v51, v52, v53);
            *(simd_float4 *)(a1 + 16 * v27++ + 11280) = v21.columns[0];
          }
          while (v27 < *v11);
        }
        goto LABEL_39;
      }
      if (!v11[53])
      {
        sub_1B63F2F54(16, @"Unreachable code: Unsupported configuration", v15, v16, v17, v18, v19, v20, v137);
LABEL_39:
        float v133 = *(float *)(a1 + 9272);
        double v134 = v133;
        float v135 = *(float *)(a1 + 9288);
        *(double *)v21.columns[3].i64 = v135;
        v21.columns[0].f32[0] = v135 / v133;
        *(double *)v21.columns[2].i64 = v135 / (v134 + 1.0);
        *(double *)v21.columns[1].i64 = (*(double *)v21.columns[3].i64 + -1.0) / v134;
        if (*(float *)(a1 + 9276) != 0.0) {
          v21.columns[1].i64[0] = v21.columns[2].i64[0];
        }
        v21.columns[1].f32[0] = *(double *)v21.columns[1].i64;
        *(int32x2_t *)v21.columns[2].f32 = vcgt_f32(*(float32x2_t *)v21.columns[0].f32, *(float32x2_t *)v21.columns[1].f32);
        v21.columns[0].i32[1] = v21.columns[1].i32[0];
        v21.columns[0] = (simd_float4)vcvtq_f64_f32((float32x2_t)vbsl_s8((int8x8_t)vdup_lane_s32(*(int32x2_t *)v21.columns[2].f32, 0), (int8x8_t)vrev64_s32(*(int32x2_t *)v21.columns[0].f32), *(int8x8_t *)v21.columns[0].f32));
        *(simd_float4 *)(a1 + 12656) = v21.columns[0];
        return (__n128)v21.columns[0];
      }
    }
    if (v14)
    {
      uint64_t v108 = 0;
      unint64_t v109 = 0;
      uint64_t v110 = a1 + 11280;
      do
      {
        uint64_t v111 = (simd_float4 *)(v110 + v108 - 3072);
        uint64_t v112 = (simd_float4 *)sub_1B6446D74(a2, 1, v109, v16, v17, v18, v19, v20);
        simd_float4 v113 = v112[3];
        simd_float4 v115 = *v112;
        simd_float4 v114 = v112[1];
        *(simd_float4 *)(v110 + v108 - 3040) = v112[2];
        *(simd_float4 *)(v110 + v108 - 3024) = v113;
        *uint64_t v111 = v115;
        *(simd_float4 *)(v110 + v108 - 3056) = v114;
        uint64_t v116 = a1 + v108;
        uint64_t v122 = (_OWORD *)sub_1B6446D74(a2, 0, v109, v117, v118, v119, v120, v121);
        long long v123 = v122[2];
        long long v124 = v122[3];
        long long v125 = v122[1];
        *(_OWORD *)(v116 + 9232) = *v122;
        *(_OWORD *)(v116 + 9280) = v124;
        *(_OWORD *)(v116 + 9248) = v125;
        *(_OWORD *)(v116 + 9264) = v123;
        uint64_t v126 = (simd_float4 *)(v110 + v108 - 4096);
        v153.columns[0] = *v111;
        v153.columns[1] = *(simd_float4 *)(a1 + v108 + 8224);
        v153.columns[2] = *(simd_float4 *)(a1 + v108 + 8240);
        v153.columns[3] = *(simd_float4 *)(a1 + v108 + 8256);
        simd_float4x4 v154 = __invert_f4(v153);
        *uint64_t v126 = v154.columns[0];
        *(simd_float4 *)(v116 + 7200) = v154.columns[1];
        *(simd_float4 *)(v116 + 7216) = v154.columns[2];
        *(simd_float4 *)(v116 + 7232) = v154.columns[3];
        v154.columns[1] = *(simd_float4 *)(v110 + v108 - 4080);
        *(simd_float4 *)(v116 + 1552) = *v126;
        *(simd_float4 *)(v116 + 1568) = v154.columns[1];
        v154.columns[1] = *(simd_float4 *)(v110 + v108 - 4048);
        *(_OWORD *)(v116 + 1584) = *(_OWORD *)(v110 + v108 - 4064);
        *(simd_float4 *)(v116 + 1600) = v154.columns[1];
        v154.columns[0] = *(simd_float4 *)(a1 + v108 + 9232);
        v154.columns[1] = *(simd_float4 *)(a1 + v108 + 9248);
        v154.columns[2] = *(simd_float4 *)(a1 + v108 + 9264);
        *(_OWORD *)(v116 + 3648) = *(_OWORD *)(v116 + 9280);
        *(simd_float4 *)(v116 + 3632) = v154.columns[2];
        *(simd_float4 *)(v116 + 3616) = v154.columns[1];
        *(simd_float4 *)(v116 + 3600) = v154.columns[0];
        v21.columns[0] = (simd_float4)sub_1B64471F4(a2, v109, v127, v128, v129, v130, v131, v132);
        *(simd_float4 *)(v110 + 16 * v109++) = v21.columns[0];
        v108 += 64;
      }
      while (v109 < *v11);
    }
    goto LABEL_39;
  }
  long long v149 = 0u;
  long long v150 = 0u;
  long long v147 = 0u;
  long long v148 = 0u;
  long long v145 = 0u;
  long long v146 = 0u;
  long long v144 = 0u;
  memset(&v143, 0, sizeof(v143));
  if ((sub_1B63E0460(a3, (uint64_t)&v143, a3, a4, a5, a6, a7, a8) & 1) == 0) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Invalid point of view", v56, v57, v58, v59, v60, v61, (uint64_t)"NULL");
  }
  if ((v143.columns[0].i8[0] & 2) != 0 || sub_1B6447410(a2, v55, v56, v57, v58, v59, v60, v61)) {
    sub_1B63E0578((uint64_t)&v143, a3, a1 + 11280, *(void *)(a1 + 12640), v58, v59, v60, v61, v137);
  }
  if (v11[52]) {
    *(float32x2_t *)&v143.columns[0].i32[1] = vcvt_f32_f64(*(float64x2_t *)(a1 + 12656));
  }
  else {
    *(float64x2_t *)(a1 + 12656) = vcvtq_f64_f32(*(float32x2_t *)&v143.columns[0].i32[1]);
  }
  float32x4_t v64 = (_OWORD *)(a1 + 9232);
  float32x4_t v65 = sub_1B649CD50((unsigned __int8 *)&v143, a1 + 11280, v62, v63, v58, v59, v60, v61);
  long long v66 = *((_OWORD *)v65 + 2);
  long long v67 = *((_OWORD *)v65 + 3);
  long long v68 = *((_OWORD *)v65 + 1);
  *(_OWORD *)(a1 + 9232) = *(_OWORD *)v65;
  *(_OWORD *)(a1 + 9280) = v67;
  *(_OWORD *)(a1 + 9264) = v66;
  *(_OWORD *)(a1 + 9248) = v68;
  uint64_t v69 = (_OWORD *)(a1 + 7184);
  sub_1B64A27C4(a3, a1 + 7184, v70, v71, v72, v73, v74, v75);
  if (a3 == a4)
  {
    long long v101 = *(_OWORD *)(a1 + 7200);
    *(_OWORD *)(a1 + 1552) = *v69;
    *(_OWORD *)(a1 + 1568) = v101;
    long long v102 = *(_OWORD *)(a1 + 7232);
    *(_OWORD *)(a1 + 1584) = *(_OWORD *)(a1 + 7216);
    *(_OWORD *)(a1 + 1600) = v102;
    long long v103 = *(_OWORD *)(a1 + 9248);
    *(_OWORD *)(a1 + 3600) = *v64;
    *(_OWORD *)(a1 + 3616) = v103;
    v21.columns[0] = *(simd_float4 *)(a1 + 9264);
    v21.columns[1] = *(simd_float4 *)(a1 + 9280);
    *(simd_float4 *)(a1 + 3632) = v21.columns[0];
    *(simd_float4 *)(a1 + 3648) = v21.columns[1];
  }
  else
  {
    if ((sub_1B63E0460(a4, (uint64_t)&v143, v76, v77, v78, v79, v80, v81) & 1) == 0) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Invalid point of view", v83, v84, v85, v86, v87, v88, (uint64_t)"NULL");
    }
    if ((v143.columns[0].i8[0] & 2) != 0 || sub_1B6447410(a2, v82, v83, v84, v85, v86, v87, v88)) {
      sub_1B63E0578((uint64_t)&v143, a3, a1 + 11280, *(void *)(a1 + 12640), v85, v86, v87, v88, v137);
    }
    *(float64x2_t *)(a1 + 12656) = vcvtq_f64_f32(*(float32x2_t *)&v143.columns[0].i32[1]);
    CFTypeID v91 = sub_1B649CD50((unsigned __int8 *)&v143, a1 + 11280, v89, v90, v85, v86, v87, v88);
    long long v92 = *((_OWORD *)v91 + 2);
    long long v93 = *((_OWORD *)v91 + 3);
    long long v94 = *((_OWORD *)v91 + 1);
    *(_OWORD *)(a1 + 3600) = *(_OWORD *)v91;
    *(_OWORD *)(a1 + 3648) = v93;
    *(_OWORD *)(a1 + 3632) = v92;
    *(_OWORD *)(a1 + 3616) = v94;
    v21.columns[0].i64[0] = sub_1B64A27C4(a4, a1 + 1552, v95, v96, v97, v98, v99, v100).n128_u64[0];
  }
  if (*v11 >= 2u)
  {
    uint64_t v104 = a1 + 7248;
    unint64_t v105 = 1;
    do
    {
      long long v106 = *v64;
      long long v107 = *(_OWORD *)(a1 + 9248);
      v21.columns[2] = *(simd_float4 *)(a1 + 9264);
      *(_OWORD *)(v104 + 2096) = *(_OWORD *)(a1 + 9280);
      *(simd_float4 *)(v104 + 2080) = v21.columns[2];
      *(_OWORD *)(v104 + 2064) = v107;
      *(_OWORD *)(v104 + 2048) = v106;
      v21.columns[0] = (simd_float4)*v69;
      v21.columns[1] = *(simd_float4 *)(a1 + 7200);
      v21.columns[3] = *(simd_float4 *)(a1 + 7232);
      *(_OWORD *)(v104 + 32) = *(_OWORD *)(a1 + 7216);
      *(simd_float4 *)(v104 + 48) = v21.columns[3];
      *(simd_float4 *)uint64_t v104 = v21.columns[0];
      *(simd_float4 *)(v104 + 16) = v21.columns[1];
      v104 += 64;
      ++v105;
    }
    while (v105 < *v11);
  }
  return (__n128)v21.columns[0];
}

uint64_t sub_1B661F650(unsigned char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v8 = a1 + 12560;
  if (a1[12613])
  {
    if (*v8 != 2) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Multiple viewport is for stereo only", a3, a4, a5, a6, a7, a8, (uint64_t)"cullingContext->eyeCount == 2");
    }
  }
  else
  {
    if (!a1[12614]) {
      return *v8;
    }
    if (a1[12563] != 1 || *v8 != 6) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. singlePassCubeMapRendering require renderMode == Layered and eyeCount == 6", a3, a4, a5, a6, a7, a8, (uint64_t)"cullingContext->viewMapping == kCFXViewMappingLayered && cullingContext->eyeCount == 6");
    }
  }
  return 1;
}

void sub_1B661F6E8(uint64_t a1, float32x2_t *a2, uint64_t a3, uint64_t a4, int a5)
{
  long long v5 = (unsigned __int8 *)(a1 + 12560);
  if (*(unsigned char *)(a1 + 12560))
  {
    unint64_t v9 = 0;
    do
    {
      if (v5[3] && !v5[4])
      {
        uint64_t v13 = a1 + (v9 << 6);
        float32x4_t v11 = (simd_float4x4 *)(v13 + 7184);
        int v12 = (simd_float4x4 *)(v13 + 8208);
      }
      else
      {
        uint64_t v10 = a1 + (v9 << 6);
        float32x4_t v11 = (simd_float4x4 *)(v10 + 8208);
        int v12 = (simd_float4x4 *)(v10 + 7184);
      }
      simd_float4x4 *v11 = __invert_f4(*v12);
      if (a5)
      {
        if (sub_1B6447D40((uint64_t)a2))
        {
          uint64_t v19 = sub_1B6447D58((uint64_t)a2);
          *(double *)v26.i64 = sub_1B6447D78((uint64_t)a2, v19, v20, v21, v22, v23, v24, v25);
          uint64_t v30 = 0;
          long long v31 = (simd_float4 *)(a1 + (v9 << 6));
          simd_float4 v32 = v31[577];
          simd_float4 v33 = v31[578];
          simd_float4 v34 = v31[579];
          simd_float4 v35 = v31[580];
          uint64_t v36 = (int32x4_t *)&v31[577];
          v237.columns[0] = v32;
          v237.columns[1] = v33;
          v237.columns[2] = v34;
          v237.columns[3] = v35;
          int32x4_t v238 = 0u;
          int32x4_t v239 = 0u;
          int32x4_t v240 = 0u;
          int32x4_t v241 = 0u;
          do
          {
            *(float32x4_t *)((char *)&v238 + v30 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v26, COERCE_FLOAT(*(_OWORD *)&v237.columns[v30])), v27, *(float32x2_t *)v237.columns[v30].f32, 1), v28, (float32x4_t)v237.columns[v30], 2), v29, (float32x4_t)v237.columns[v30], 3);
            ++v30;
          }
          while (v30 != 4);
          int32x4_t v37 = v239;
          int32x4_t v38 = v240;
          int32x4_t v39 = v241;
          *uint64_t v36 = v238;
          v36[1] = v37;
          v36[2] = v38;
          v36[3] = v39;
        }
        if (sub_1B6447FD4((uint64_t)a2))
        {
          float32x2_t v42 = sub_1B6447FE4(a2, 0, v40, v41);
          float32x4_t v43 = (int8x16_t *)(a1 + (v9 << 6));
          int8x16_t v44 = v43[579];
          *(float32x2_t *)v45.i8 = vadd_f32(v42, *(float32x2_t *)v44.i8);
          v45.i64[1] = vextq_s8(v44, v44, 8uLL).u64[0];
          v43[579] = v45;
        }
      }
      uint64_t v46 = 0;
      long long v47 = (_OWORD *)(a1 + (v9 << 6));
      float32x4_t v48 = *((float32x4_t *)v47 + 577);
      float32x4_t v49 = *((float32x4_t *)v47 + 578);
      float32x4_t v50 = *((float32x4_t *)v47 + 579);
      float32x4_t v51 = *((float32x4_t *)v47 + 580);
      simd_float4 v52 = *((simd_float4 *)v47 + 514);
      simd_float4 v53 = *((simd_float4 *)v47 + 515);
      simd_float4 v54 = *((simd_float4 *)v47 + 516);
      v237.columns[0] = (simd_float4)v47[513];
      v237.columns[1] = v52;
      v237.columns[2] = v53;
      v237.columns[3] = v54;
      int32x4_t v238 = 0u;
      int32x4_t v239 = 0u;
      int32x4_t v240 = 0u;
      int32x4_t v241 = 0u;
      do
      {
        float32x4_t v55 = (float32x4_t)v237.columns[v46];
        *(float32x4_t *)((char *)&v238 + v46 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v48, v55.f32[0]), v49, *(float32x2_t *)v55.f32, 1), v50, v55, 2), v51, v55, 3);
        ++v46;
      }
      while (v46 != 4);
      uint64_t v56 = (_OWORD *)(a1 + (v9 << 6));
      int32x4_t v57 = v238;
      int32x4_t v58 = v239;
      int32x4_t v60 = v240;
      int32x4_t v59 = v241;
      v56[641] = v238;
      v56[642] = v58;
      v56[643] = v60;
      v14.f32[0] = *(float *)&v57.i32[3] - *(float *)v57.i32;
      v14.f32[1] = *(float *)&v58.i32[3] - *(float *)v58.i32;
      v14.f32[2] = *(float *)&v60.i32[3] - *(float *)v60.i32;
      int32x4_t v61 = (int32x4_t)vmulq_f32(v14, v14);
      v14.f32[3] = *(float *)&v59.i32[3] - *(float *)v59.i32;
      v15.f32[0] = *(float *)&v57.i32[3] + *(float *)v57.i32;
      v15.f32[1] = *(float *)&v58.i32[3] + *(float *)v58.i32;
      v15.f32[2] = *(float *)&v60.i32[3] + *(float *)v60.i32;
      int32x4_t v62 = (int32x4_t)vmulq_f32(v15, v15);
      v15.f32[3] = *(float *)&v59.i32[3] + *(float *)v59.i32;
      v16.f32[0] = *(float *)&v57.i32[3] + *(float *)&v57.i32[1];
      v16.f32[1] = *(float *)&v58.i32[3] + *(float *)&v58.i32[1];
      v16.f32[2] = *(float *)&v60.i32[3] + *(float *)&v60.i32[1];
      int32x4_t v64 = (int32x4_t)vmulq_f32(v16, v16);
      v16.f32[3] = *(float *)&v59.i32[3] + *(float *)&v59.i32[1];
      v17.f32[0] = *(float *)&v57.i32[3] - *(float *)&v57.i32[1];
      v17.f32[1] = *(float *)&v58.i32[3] - *(float *)&v58.i32[1];
      v17.f32[2] = *(float *)&v60.i32[3] - *(float *)&v60.i32[1];
      int32x4_t v66 = (int32x4_t)vmulq_f32(v17, v17);
      v17.f32[3] = *(float *)&v59.i32[3] - *(float *)&v59.i32[1];
      v55.f32[0] = *(float *)&v57.i32[3] - *(float *)&v57.i32[2];
      v55.f32[1] = *(float *)&v58.i32[3] - *(float *)&v58.i32[2];
      v55.f32[2] = *(float *)&v60.i32[3] - *(float *)&v60.i32[2];
      float32x4_t v83 = vmulq_f32(v55, v55);
      v55.f32[3] = *(float *)&v59.i32[3] - *(float *)&v59.i32[2];
      v56[644] = v59;
      float32x4_t v69 = (float32x4_t)vzip2q_s32(v57, v58);
      v69.i32[2] = v60.i32[2];
      int32x4_t v70 = (int32x4_t)vmulq_f32(v69, v69);
      v69.i32[3] = v59.i32[2];
      uint64_t v71 = (float32x4_t *)(a1 + 96 * v9);
      v59.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v61, 2), vadd_f32(*(float32x2_t *)v61.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.i8, 1))).u32[0];
      *(float32x2_t *)v60.i8 = vrsqrte_f32((float32x2_t)v59.u32[0]);
      *(float32x2_t *)v60.i8 = vmul_f32(*(float32x2_t *)v60.i8, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8)));
      float32x4_t v72 = vmulq_n_f32(v14, vmul_f32(*(float32x2_t *)v60.i8, vrsqrts_f32((float32x2_t)v59.u32[0], vmul_f32(*(float32x2_t *)v60.i8, *(float32x2_t *)v60.i8))).f32[0]);
      v60.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v62, 2), vadd_f32(*(float32x2_t *)v62.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v62.i8, 1))).u32[0];
      float32x2_t v73 = vrsqrte_f32((float32x2_t)v60.u32[0]);
      float32x2_t v74 = vmul_f32(v73, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(v73, v73)));
      v60.i32[0] = vmul_f32(v74, vrsqrts_f32((float32x2_t)v60.u32[0], vmul_f32(v74, v74))).u32[0];
      v74.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v64, 2), vadd_f32(*(float32x2_t *)v64.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v64.i8, 1))).u32[0];
      float32x2_t v75 = vrsqrte_f32((float32x2_t)v74.u32[0]);
      float32x2_t v76 = vmul_f32(v75, vrsqrts_f32((float32x2_t)v74.u32[0], vmul_f32(v75, v75)));
      v74.i32[0] = vmul_f32(v76, vrsqrts_f32((float32x2_t)v74.u32[0], vmul_f32(v76, v76))).u32[0];
      v76.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v66, 2), vadd_f32(*(float32x2_t *)v66.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1))).u32[0];
      float32x2_t v77 = vrsqrte_f32((float32x2_t)v76.u32[0]);
      float32x2_t v78 = vmul_f32(v77, vrsqrts_f32((float32x2_t)v76.u32[0], vmul_f32(v77, v77)));
      float32x4_t v79 = vmulq_n_f32(v17, vmul_f32(v78, vrsqrts_f32((float32x2_t)v76.u32[0], vmul_f32(v78, v78))).f32[0]);
      v70.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v70, 2), vadd_f32(*(float32x2_t *)v70.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v70.i8, 1))).u32[0];
      float32x2_t v80 = vrsqrte_f32((float32x2_t)v70.u32[0]);
      float32x2_t v81 = vmul_f32(v80, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v80, v80)));
      v70.i32[0] = vmul_f32(v81, vrsqrts_f32((float32x2_t)v70.u32[0], vmul_f32(v81, v81))).u32[0];
      float32x4_t v82 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2);
      v83.i32[0] = vadd_f32(*(float32x2_t *)v82.f32, vadd_f32(*(float32x2_t *)v83.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v83.f32, 1))).u32[0];
      float32x4_t v84 = vmulq_n_f32(v69, *(float *)v70.i32);
      *(float32x2_t *)v70.i8 = vrsqrte_f32((float32x2_t)v83.u32[0]);
      *(float32x2_t *)v70.i8 = vmul_f32(*(float32x2_t *)v70.i8, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8)));
      v71[353] = v72;
      v71[354] = vmulq_n_f32(v15, *(float *)v60.i32);
      v71[355] = vmulq_n_f32(v16, v74.f32[0]);
      v71[356] = v79;
      v71[357] = v84;
      v71[358] = vmulq_n_f32(v55, vmul_f32(*(float32x2_t *)v70.i8, vrsqrts_f32((float32x2_t)v83.u32[0], vmul_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v70.i8))).f32[0]);
      ++v9;
    }
    while (v9 < *v5);
    if (*v5)
    {
      unint64_t v85 = 0;
      __asm { FMOV            V0.4S, #1.0 }
      unsigned int v234 = HIDWORD(_Q0);
      uint64_t v91 = a1 + 10256;
      uint64_t v92 = a1 + 4624;
      do
      {
        if (a3 == a4)
        {
          if (!v5[54])
          {
            uint64_t v230 = (_OWORD *)(a1 + (v85 << 6));
            v230[161] = v230[513];
            v230[162] = v230[514];
            v230[163] = v230[515];
            v230[164] = v230[516];
            v230[225] = v230[577];
            v230[226] = v230[578];
            v230[227] = v230[579];
            v230[228] = v230[580];
            long long v231 = v230[641];
            long long v232 = v230[642];
            long long v233 = v230[643];
            v230[292] = v230[644];
            v230[291] = v233;
            v230[290] = v232;
            v230[289] = v231;
            goto LABEL_30;
          }
          uint64_t v97 = 0;
          simd_float4 v98 = *(simd_float4 *)(a1 + 7504);
          simd_float4 v99 = *(simd_float4 *)(a1 + 7520);
          simd_float4 v100 = *(simd_float4 *)(a1 + 7536);
          long long v101 = (simd_float4 *)(a1 + (v85 << 6));
          v101[100] = *(simd_float4 *)(a1 + 7552);
          v101[99] = v100;
          v101[98] = v99;
          v101[97] = v98;
          simd_float4 v103 = *(simd_float4 *)(a1 + 8528);
          simd_float4 v102 = *(simd_float4 *)(a1 + 8544);
          simd_float4 v104 = *(simd_float4 *)(a1 + 8560);
          v101[164] = *(simd_float4 *)(a1 + 8576);
          v101[163] = v104;
          v101[162] = v102;
          float v105 = *(double *)(a1 + 12664);
          double v106 = (float)-v105;
          double v107 = v105;
          if (v105 > 0.0) {
            double v108 = v105;
          }
          else {
            double v108 = v106 + 1.0;
          }
          *(float *)&unsigned int v109 = 2.0 / (v107 - v106);
          float32x4_t v110 = (float32x4_t)v109;
          v111.i32[0] = 0;
          v111.i64[1] = 0;
          v111.i32[1] = v109;
          double v112 = v106 - v108;
          *(float *)&unsigned int v113 = 1.0 / (v106 - v108);
          v114.i64[0] = 0;
          v114.i64[1] = v113;
          v101[161] = v103;
          float32_t v115 = -(v106 + v107) / (v107 - v106);
          v117.f32[0] = v115;
          v117.f32[1] = v115;
          *(float *)&unsigned int v116 = v106 / v112;
          v117.i64[1] = __PAIR64__(v234, v116);
          v101[225] = (simd_float4)v110.u32[0];
          v101[226] = (simd_float4)v111.u64[0];
          v101[227] = (simd_float4)v114;
          v101[228] = (simd_float4)v117;
          simd_float4 v118 = v101[162];
          simd_float4 v119 = v101[163];
          simd_float4 v120 = v101[164];
          v237.columns[0] = v101[161];
          v237.columns[1] = v118;
          v237.columns[2] = v119;
          v237.columns[3] = v120;
          int32x4_t v238 = 0u;
          int32x4_t v239 = 0u;
          int32x4_t v240 = 0u;
          int32x4_t v241 = 0u;
          do
          {
            float32x4_t v55 = (float32x4_t)v237.columns[v97];
            float32x4_t v83 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v110, v55.f32[0]), v111, *(float32x2_t *)v55.f32, 1), v114, v55, 2), v117, v55, 3);
            *(float32x4_t *)((char *)&v238 + v97 * 16) = v83;
            ++v97;
          }
          while (v97 != 4);
        }
        else
        {
          uint64_t v93 = a1 + (v85 << 6);
          simd_float4x4 v242 = __invert_f4(*(simd_float4x4 *)(v93 + 1552));
          uint64_t v94 = 0;
          *(simd_float4x4 *)(v93 + 2576) = v242;
          float32x4_t v55 = *(float32x4_t *)(v93 + 3600);
          float32x4_t v83 = *(float32x4_t *)(v93 + 3616);
          float32x4_t v95 = *(float32x4_t *)(v93 + 3632);
          float32x4_t v96 = *(float32x4_t *)(v93 + 3648);
          simd_float4x4 v237 = v242;
          int32x4_t v238 = 0u;
          int32x4_t v239 = 0u;
          int32x4_t v240 = 0u;
          int32x4_t v241 = 0u;
          do
          {
            *(float32x4_t *)((char *)&v238 + v94 * 16) = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, COERCE_FLOAT(*(_OWORD *)&v237.columns[v94])), v83, *(float32x2_t *)v237.columns[v94].f32, 1), v95, (float32x4_t)v237.columns[v94], 2), v96, (float32x4_t)v237.columns[v94], 3);
            ++v94;
          }
          while (v94 != 4);
        }
        uint64_t v121 = (_OWORD *)(a1 + (v85 << 6));
        int32x4_t v122 = v239;
        int32x4_t v123 = v240;
        int32x4_t v124 = v241;
        v121[289] = v238;
        v121[290] = v122;
        v121[291] = v123;
        v121[292] = v124;
LABEL_30:
        if (v5[53])
        {
          if (v85)
          {
            unint64_t v125 = v85 - 1;
            uint64_t v126 = (int32x4_t *)(v91 + ((v85 - 1) << 6));
            uint64_t v127 = (float32x4_t *)(v91 + (v85 << 6));
            int32x4_t v128 = *v126;
            int32x4_t v129 = v126[1];
            int32x4_t v131 = v126[2];
            int32x4_t v130 = v126[3];
            float32x4_t v132 = *v127;
            float32x4_t v133 = v127[1];
            float32x4_t v135 = v127[2];
            float32x4_t v134 = v127[3];
            float v136 = v134.f32[3];
            float v137 = v134.f32[3] - v134.f32[0];
            v83.i32[0] = HIDWORD(*(unsigned long long *)v126);
            v18.i32[0] = HIDWORD(*(unsigned long long *)v127);
            float v138 = v133.f32[3];
            float v139 = v135.f32[3];
            if ((float)(*(float *)&v130.i32[3] - *(float *)v130.i32) >= (float)(v134.f32[3] - v134.f32[0]))
            {
              float v137 = *(float *)&v130.i32[3] - *(float *)v130.i32;
              float v140 = v135.f32[0];
              LODWORD(v141) = HIDWORD(*(_OWORD *)&v127[2]);
              float v142 = v133.f32[0];
              LODWORD(v143) = HIDWORD(*(_OWORD *)&v127[1]);
              LODWORD(v144) = *(float32x4_t *)v127->f32;
              LODWORD(v145) = HIDWORD(*(unsigned long long *)v127);
              v135.i32[0] = v131.i32[0];
              LODWORD(v139) = HIDWORD(*(_OWORD *)&v126[2]);
              v133.i32[0] = v129.i32[0];
              LODWORD(v138) = HIDWORD(*(_OWORD *)&v126[1]);
              v132.i32[0] = (__int32)*v126;
              v18.i32[0] = HIDWORD(*(unsigned long long *)v126);
            }
            else
            {
              v134.i32[0] = v130.i32[0];
              LODWORD(v136) = HIDWORD(*(_OWORD *)&v126[3]);
              float v140 = *(float *)v131.i32;
              LODWORD(v141) = HIDWORD(*(_OWORD *)&v126[2]);
              float v142 = *(float *)v129.i32;
              LODWORD(v143) = HIDWORD(*(_OWORD *)&v126[1]);
              LODWORD(v144) = *v126;
              LODWORD(v145) = HIDWORD(*(unsigned long long *)v126);
            }
            uint64_t v172 = a1 + 96 * v125 + 5648;
            v18.f32[0] = v18.f32[0] - v132.f32[0];
            v18.f32[1] = v138 - v133.f32[0];
            v18.f32[2] = v139 - v135.f32[0];
            int32x4_t v173 = (int32x4_t)vmulq_f32(v18, v18);
            v18.f32[3] = v137;
            v173.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v173, 2), vadd_f32(*(float32x2_t *)v173.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v173.i8, 1))).u32[0];
            *(float32x2_t *)v135.f32 = vrsqrte_f32((float32x2_t)v173.u32[0]);
            *(float32x2_t *)v135.f32 = vmul_f32(*(float32x2_t *)v135.f32, vrsqrts_f32((float32x2_t)v173.u32[0], vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32)));
            float32x4_t v174 = vmulq_n_f32(v18, vmul_f32(*(float32x2_t *)v135.f32, vrsqrts_f32((float32x2_t)v173.u32[0], vmul_f32(*(float32x2_t *)v135.f32, *(float32x2_t *)v135.f32))).f32[0]);
            v135.f32[0] = v144 + v145;
            float32_t v175 = v134.f32[0] + v136;
            v135.f32[1] = v142 + v143;
            v135.f32[2] = v140 + v141;
            float32x4_t v176 = vmulq_f32(v135, v135);
            v135.f32[3] = v175;
            unsigned __int32 v177 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v176, 2), vadd_f32(*(float32x2_t *)v176.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v176.f32, 1))).u32[0];
            *(float32x2_t *)v176.f32 = vrsqrte_f32((float32x2_t)v177);
            *(float32x2_t *)v176.f32 = vmul_f32(*(float32x2_t *)v176.f32, vrsqrts_f32((float32x2_t)v177, vmul_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32)));
            LODWORD(v178) = vmul_f32(*(float32x2_t *)v176.f32, vrsqrts_f32((float32x2_t)v177, vmul_f32(*(float32x2_t *)v176.f32, *(float32x2_t *)v176.f32))).u32[0];
            v176.f32[0] = v83.f32[0] + *(float *)&v128.i32[1];
            v176.f32[1] = *(float *)&v129.i32[3] + *(float *)&v129.i32[1];
            v176.f32[2] = *(float *)&v131.i32[3] + *(float *)&v131.i32[1];
            float32x4_t v17 = vmulq_f32(v176, v176);
            v176.f32[3] = *(float *)&v130.i32[3] + *(float *)&v130.i32[1];
            *(float32x4_t *)uint64_t v172 = v174;
            *(float32x4_t *)(v172 + 16) = vmulq_n_f32(v135, v178);
            unsigned __int32 v179 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v17, 2), vadd_f32(*(float32x2_t *)v17.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v17.f32, 1))).u32[0];
            float32x2_t v180 = vrsqrte_f32((float32x2_t)v179);
            float32x2_t v181 = vmul_f32(v180, vrsqrts_f32((float32x2_t)v179, vmul_f32(v180, v180)));
            float32x4_t v182 = vmulq_n_f32(v176, vmul_f32(v181, vrsqrts_f32((float32x2_t)v179, vmul_f32(v181, v181))).f32[0]);
            v176.f32[0] = v83.f32[0] - *(float *)&v128.i32[1];
            v176.f32[1] = *(float *)&v129.i32[3] - *(float *)&v129.i32[1];
            v176.f32[2] = *(float *)&v131.i32[3] - *(float *)&v131.i32[1];
            float32x4_t v184 = vmulq_f32(v176, v176);
            v176.f32[3] = *(float *)&v130.i32[3] - *(float *)&v130.i32[1];
            unsigned __int32 v183 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v184, 2), vadd_f32(*(float32x2_t *)v184.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v184.f32, 1))).u32[0];
            *(float32x2_t *)v184.f32 = vrsqrte_f32((float32x2_t)v183);
            *(float32x2_t *)v184.f32 = vmul_f32(*(float32x2_t *)v184.f32, vrsqrts_f32((float32x2_t)v183, vmul_f32(*(float32x2_t *)v184.f32, *(float32x2_t *)v184.f32)));
            v83.f32[0] = v83.f32[0] - *(float *)&v128.i32[2];
            v83.f32[1] = *(float *)&v129.i32[3] - *(float *)&v129.i32[2];
            v83.f32[2] = *(float *)&v131.i32[3] - *(float *)&v131.i32[2];
            int32x4_t v185 = (int32x4_t)vmulq_f32(v83, v83);
            v83.f32[3] = *(float *)&v130.i32[3] - *(float *)&v130.i32[2];
            *(float32x4_t *)(v172 + 32) = v182;
            *(float32x4_t *)(v172 + 48) = vmulq_n_f32(v176, vmul_f32(*(float32x2_t *)v184.f32, vrsqrts_f32((float32x2_t)v183, vmul_f32(*(float32x2_t *)v184.f32, *(float32x2_t *)v184.f32))).f32[0]);
            unsigned __int32 v186 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v185, 2), vadd_f32(*(float32x2_t *)v185.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v185.i8, 1))).u32[0];
            *(float32x2_t *)v185.i8 = vrsqrte_f32((float32x2_t)v186);
            *(float32x2_t *)v185.i8 = vmul_f32(*(float32x2_t *)v185.i8, vrsqrts_f32((float32x2_t)v186, vmul_f32(*(float32x2_t *)v185.i8, *(float32x2_t *)v185.i8)));
            *(float32x4_t *)(v172 + 64) = vmulq_n_f32(v83, vmul_f32(*(float32x2_t *)v185.i8, vrsqrts_f32((float32x2_t)v186, vmul_f32(*(float32x2_t *)v185.i8, *(float32x2_t *)v185.i8))).f32[0]);
            float32x4_t v187 = (float32x4_t)vzip2q_s32(v128, v129);
            v187.i32[2] = v131.i32[2];
            int32x4_t v188 = (int32x4_t)vmulq_f32(v187, v187);
            v187.i32[3] = v130.i32[2];
            long long v189 = *(_OWORD *)(a1 + 96 * v125 + 5712);
            unsigned __int32 v190 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v188, 2), vadd_f32(*(float32x2_t *)v188.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v188.i8, 1))).u32[0];
            *(float32x2_t *)v188.i8 = vrsqrte_f32((float32x2_t)v190);
            *(float32x2_t *)v188.i8 = vmul_f32(*(float32x2_t *)v188.i8, vrsqrts_f32((float32x2_t)v190, vmul_f32(*(float32x2_t *)v188.i8, *(float32x2_t *)v188.i8)));
            *(float32x4_t *)(v172 + 64) = vmulq_n_f32(v187, vmul_f32(*(float32x2_t *)v188.i8, vrsqrts_f32((float32x2_t)v190, vmul_f32(*(float32x2_t *)v188.i8, *(float32x2_t *)v188.i8))).f32[0]);
            *(_OWORD *)(v172 + 80) = v189;
            uint64_t v191 = (int32x4_t *)(v92 + (v125 << 6));
            uint64_t v192 = (float32x4_t *)(v92 + (v85 << 6));
            int32x4_t v193 = *v191;
            int32x4_t v194 = v191[1];
            int32x4_t v196 = v191[2];
            int32x4_t v195 = v191[3];
            float32x4_t v197 = *v192;
            float32x4_t v198 = v192[1];
            float32x4_t v200 = v192[2];
            float32x4_t v199 = v192[3];
            float v201 = v199.f32[3];
            float v202 = v199.f32[3] - v199.f32[0];
            LODWORD(v203) = HIDWORD(*(unsigned long long *)v191);
            LODWORD(v204) = HIDWORD(*(unsigned long long *)v192);
            float v205 = v198.f32[3];
            float v206 = v200.f32[3];
            if ((float)(*(float *)&v195.i32[3] - *(float *)v195.i32) >= (float)(v199.f32[3] - v199.f32[0]))
            {
              float v202 = *(float *)&v195.i32[3] - *(float *)v195.i32;
              float v207 = v200.f32[0];
              LODWORD(v208) = HIDWORD(*(_OWORD *)&v192[2]);
              float v209 = v198.f32[0];
              LODWORD(v210) = HIDWORD(*(_OWORD *)&v192[1]);
              LODWORD(v211) = *(float32x4_t *)v192->f32;
              LODWORD(v212) = HIDWORD(*(unsigned long long *)v192);
              v200.i32[0] = v196.i32[0];
              LODWORD(v206) = HIDWORD(*(_OWORD *)&v191[2]);
              v198.i32[0] = v194.i32[0];
              LODWORD(v205) = HIDWORD(*(_OWORD *)&v191[1]);
              v197.i32[0] = (__int32)*v191;
              LODWORD(v204) = HIDWORD(*(unsigned long long *)v191);
            }
            else
            {
              v199.i32[0] = v195.i32[0];
              LODWORD(v201) = HIDWORD(*(_OWORD *)&v191[3]);
              float v207 = *(float *)v196.i32;
              LODWORD(v208) = HIDWORD(*(_OWORD *)&v191[2]);
              float v209 = *(float *)v194.i32;
              LODWORD(v210) = HIDWORD(*(_OWORD *)&v191[1]);
              LODWORD(v211) = *v191;
              LODWORD(v212) = HIDWORD(*(unsigned long long *)v191);
            }
            uint64_t v213 = a1 + 96 * v125;
            v197.f32[0] = v204 - v197.f32[0];
            v197.f32[1] = v205 - v198.f32[0];
            v197.f32[2] = v206 - v200.f32[0];
            float32x4_t v214 = vmulq_f32(v197, v197);
            v197.f32[3] = v202;
            unsigned __int32 v215 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v214, 2), vadd_f32(*(float32x2_t *)v214.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v214.f32, 1))).u32[0];
            *(float32x2_t *)v214.f32 = vrsqrte_f32((float32x2_t)v215);
            *(float32x2_t *)v214.f32 = vmul_f32(*(float32x2_t *)v214.f32, vrsqrts_f32((float32x2_t)v215, vmul_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32)));
            LODWORD(v216) = vmul_f32(*(float32x2_t *)v214.f32, vrsqrts_f32((float32x2_t)v215, vmul_f32(*(float32x2_t *)v214.f32, *(float32x2_t *)v214.f32))).u32[0];
            v214.f32[0] = v211 + v212;
            v214.f32[1] = v209 + v210;
            v214.f32[2] = v207 + v208;
            float32_t v217 = v199.f32[0] + v201;
            int32x4_t v218 = (int32x4_t)vmulq_f32(v214, v214);
            v214.f32[3] = v217;
            unsigned __int32 v219 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v218, 2), vadd_f32(*(float32x2_t *)v218.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v218.i8, 1))).u32[0];
            float32x2_t v220 = vrsqrte_f32((float32x2_t)v219);
            float32x2_t v221 = vmul_f32(v220, vrsqrts_f32((float32x2_t)v219, vmul_f32(v220, v220)));
            float32x4_t v222 = vmulq_n_f32(v214, vmul_f32(v221, vrsqrts_f32((float32x2_t)v219, vmul_f32(v221, v221))).f32[0]);
            *(float32x4_t *)(v213 + 16) = vmulq_n_f32(v197, v216);
            *(float32x4_t *)(v213 + 32) = v222;
            v213 += 16;
            v222.f32[0] = *(float *)&v203 + *(float *)&v193.i32[1];
            v222.f32[1] = *(float *)&v194.i32[3] + *(float *)&v194.i32[1];
            v222.f32[2] = *(float *)&v196.i32[3] + *(float *)&v196.i32[1];
            int32x4_t v223 = (int32x4_t)vmulq_f32(v222, v222);
            v222.f32[3] = *(float *)&v195.i32[3] + *(float *)&v195.i32[1];
            v218.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v223, 2), vadd_f32(*(float32x2_t *)v223.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v223.i8, 1))).u32[0];
            *(float32x2_t *)v223.i8 = vrsqrte_f32((float32x2_t)v218.u32[0]);
            *(float32x2_t *)v223.i8 = vmul_f32(*(float32x2_t *)v223.i8, vrsqrts_f32((float32x2_t)v218.u32[0], vmul_f32(*(float32x2_t *)v223.i8, *(float32x2_t *)v223.i8)));
            v184.f32[0] = *(float *)&v203 - *(float *)&v193.i32[1];
            v184.f32[1] = *(float *)&v194.i32[3] - *(float *)&v194.i32[1];
            v184.f32[2] = *(float *)&v196.i32[3] - *(float *)&v196.i32[1];
            float32x4_t v15 = vmulq_f32(v184, v184);
            v184.f32[3] = *(float *)&v195.i32[3] - *(float *)&v195.i32[1];
            float32x4_t v16 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v15, 2);
            float32x4_t v82 = vmulq_n_f32(v222, vmul_f32(*(float32x2_t *)v223.i8, vrsqrts_f32((float32x2_t)v218.u32[0], vmul_f32(*(float32x2_t *)v223.i8, *(float32x2_t *)v223.i8))).f32[0]);
            v218.i32[0] = vadd_f32(*(float32x2_t *)v16.f32, vadd_f32(*(float32x2_t *)v15.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v15.f32, 1))).u32[0];
            *(float32x2_t *)v15.f32 = vrsqrte_f32((float32x2_t)v218.u32[0]);
            *(float32x2_t *)v15.f32 = vmul_f32(*(float32x2_t *)v15.f32, vrsqrts_f32((float32x2_t)v218.u32[0], vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32)));
            *(float32x4_t *)(v213 + 32) = v82;
            *(float32x4_t *)(v213 + 48) = vmulq_n_f32(v184, vmul_f32(*(float32x2_t *)v15.f32, vrsqrts_f32((float32x2_t)v218.u32[0], vmul_f32(*(float32x2_t *)v15.f32, *(float32x2_t *)v15.f32))).f32[0]);
            v83.f32[0] = *(float *)&v203 - *(float *)&v193.i32[2];
            v83.f32[1] = *(float *)&v194.i32[3] - *(float *)&v194.i32[2];
            v83.f32[2] = *(float *)&v196.i32[3] - *(float *)&v196.i32[2];
            int32x4_t v224 = (int32x4_t)vmulq_f32(v83, v83);
            v83.f32[3] = *(float *)&v195.i32[3] - *(float *)&v195.i32[2];
            unsigned __int32 v225 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v224, 2), vadd_f32(*(float32x2_t *)v224.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v224.i8, 1))).u32[0];
            *(float32x2_t *)v224.i8 = vrsqrte_f32((float32x2_t)v225);
            *(float32x2_t *)v224.i8 = vmul_f32(*(float32x2_t *)v224.i8, vrsqrts_f32((float32x2_t)v225, vmul_f32(*(float32x2_t *)v224.i8, *(float32x2_t *)v224.i8)));
            float32x4_t v55 = vmulq_n_f32(v83, vmul_f32(*(float32x2_t *)v224.i8, vrsqrts_f32((float32x2_t)v225, vmul_f32(*(float32x2_t *)v224.i8, *(float32x2_t *)v224.i8))).f32[0]);
            *(float32x4_t *)(v213 + 64) = v55;
            float32x4_t v226 = (float32x4_t)vzip2q_s32(v193, v194);
            v226.i32[2] = v196.i32[2];
            long long v227 = *(_OWORD *)(v213 + 64);
            int32x4_t v228 = (int32x4_t)vmulq_f32(v226, v226);
            v226.i32[3] = v195.i32[2];
            unsigned __int32 v229 = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v228, 2), vadd_f32(*(float32x2_t *)v228.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v228.i8, 1))).u32[0];
            *(float32x2_t *)v228.i8 = vrsqrte_f32((float32x2_t)v229);
            *(float32x2_t *)v228.i8 = vmul_f32(*(float32x2_t *)v228.i8, vrsqrts_f32((float32x2_t)v229, vmul_f32(*(float32x2_t *)v228.i8, *(float32x2_t *)v228.i8)));
            *(float32x4_t *)(v213 + 64) = vmulq_n_f32(v226, vmul_f32(*(float32x2_t *)v228.i8, vrsqrts_f32((float32x2_t)v229, vmul_f32(*(float32x2_t *)v228.i8, *(float32x2_t *)v228.i8))).f32[0]);
            *(_OWORD *)(v213 + 80) = v227;
          }
        }
        else
        {
          long long v146 = (int32x4_t *)(a1 + (v85 << 6));
          int32x4_t v147 = v146[289];
          int32x4_t v148 = v146[290];
          int32x4_t v149 = v146[291];
          int32x4_t v150 = v146[292];
          v82.f32[0] = *(float *)&v147.i32[3] - *(float *)v147.i32;
          v82.f32[1] = *(float *)&v148.i32[3] - *(float *)v148.i32;
          v82.f32[2] = *(float *)&v149.i32[3] - *(float *)v149.i32;
          int32x4_t v151 = (int32x4_t)vmulq_f32(v82, v82);
          v82.f32[3] = *(float *)&v150.i32[3] - *(float *)v150.i32;
          v15.f32[0] = *(float *)&v147.i32[3] + *(float *)v147.i32;
          v15.f32[1] = *(float *)&v148.i32[3] + *(float *)v148.i32;
          v15.f32[2] = *(float *)&v149.i32[3] + *(float *)v149.i32;
          int32x4_t v152 = (int32x4_t)vmulq_f32(v15, v15);
          v15.f32[3] = *(float *)&v150.i32[3] + *(float *)v150.i32;
          v17.i32[0] = HIDWORD(v146[289].i64[0]);
          v16.f32[0] = *(float *)&v147.i32[3] + v17.f32[0];
          LODWORD(v153) = HIDWORD(v146[290].i64[0]);
          LODWORD(v154) = HIDWORD(v146[291].i64[0]);
          LODWORD(v155) = HIDWORD(v146[292].i64[0]);
          v16.f32[1] = *(float *)&v148.i32[3] + v153;
          v16.f32[2] = *(float *)&v149.i32[3] + v154;
          int32x4_t v156 = (int32x4_t)vmulq_f32(v16, v16);
          v16.f32[3] = *(float *)&v150.i32[3] + v155;
          v17.f32[0] = *(float *)&v147.i32[3] - v17.f32[0];
          v17.f32[1] = *(float *)&v148.i32[3] - v153;
          v17.f32[2] = *(float *)&v149.i32[3] - v154;
          int32x4_t v157 = (int32x4_t)vmulq_f32(v17, v17);
          v17.f32[3] = *(float *)&v150.i32[3] - v155;
          float32x4_t v158 = (float32x4_t *)(a1 + 96 * v85);
          v55.f32[0] = *(float *)&v147.i32[3] - *(float *)&v147.i32[2];
          v55.f32[1] = *(float *)&v148.i32[3] - *(float *)&v148.i32[2];
          v55.f32[2] = *(float *)&v149.i32[3] - *(float *)&v149.i32[2];
          int32x4_t v159 = (int32x4_t)vmulq_f32(v55, v55);
          v55.f32[3] = *(float *)&v150.i32[3] - *(float *)&v150.i32[2];
          float32x4_t v160 = (float32x4_t)vzip2q_s32(v147, v148);
          v160.i32[2] = v149.i32[2];
          int32x4_t v161 = (int32x4_t)vmulq_f32(v160, v160);
          v160.i32[3] = v150.i32[2];
          v150.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v151, 2), vadd_f32(*(float32x2_t *)v151.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v151.i8, 1))).u32[0];
          *(float32x2_t *)v149.i8 = vrsqrte_f32((float32x2_t)v150.u32[0]);
          *(float32x2_t *)v149.i8 = vmul_f32(*(float32x2_t *)v149.i8, vrsqrts_f32((float32x2_t)v150.u32[0], vmul_f32(*(float32x2_t *)v149.i8, *(float32x2_t *)v149.i8)));
          float32x4_t v162 = vmulq_n_f32(v82, vmul_f32(*(float32x2_t *)v149.i8, vrsqrts_f32((float32x2_t)v150.u32[0], vmul_f32(*(float32x2_t *)v149.i8, *(float32x2_t *)v149.i8))).f32[0]);
          v149.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v152, 2), vadd_f32(*(float32x2_t *)v152.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v152.i8, 1))).u32[0];
          float32x2_t v163 = vrsqrte_f32((float32x2_t)v149.u32[0]);
          float32x2_t v164 = vmul_f32(v163, vrsqrts_f32((float32x2_t)v149.u32[0], vmul_f32(v163, v163)));
          float32x4_t v165 = vmulq_n_f32(v15, vmul_f32(v164, vrsqrts_f32((float32x2_t)v149.u32[0], vmul_f32(v164, v164))).f32[0]);
          v164.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v156, 2), vadd_f32(*(float32x2_t *)v156.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v156.i8, 1))).u32[0];
          float32x2_t v166 = vrsqrte_f32((float32x2_t)v164.u32[0]);
          float32x2_t v167 = vmul_f32(v166, vrsqrts_f32((float32x2_t)v164.u32[0], vmul_f32(v166, v166)));
          float32x4_t v83 = vmulq_n_f32(v16, vmul_f32(v167, vrsqrts_f32((float32x2_t)v164.u32[0], vmul_f32(v167, v167))).f32[0]);
          v167.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v157, 2), vadd_f32(*(float32x2_t *)v157.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v157.i8, 1))).u32[0];
          float32x2_t v168 = vrsqrte_f32((float32x2_t)v167.u32[0]);
          float32x2_t v169 = vmul_f32(v168, vrsqrts_f32((float32x2_t)v167.u32[0], vmul_f32(v168, v168)));
          float32x4_t v170 = vmulq_n_f32(v17, vmul_f32(v169, vrsqrts_f32((float32x2_t)v167.u32[0], vmul_f32(v169, v169))).f32[0]);
          float32x4_t v82 = (float32x4_t)vdupq_laneq_s32(v161, 2);
          v161.i32[0] = vadd_f32(*(float32x2_t *)v82.f32, vadd_f32(*(float32x2_t *)v161.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v161.i8, 1))).u32[0];
          *(float32x2_t *)v82.f32 = vrsqrte_f32((float32x2_t)v161.u32[0]);
          *(float32x2_t *)v82.f32 = vmul_f32(*(float32x2_t *)v82.f32, vrsqrts_f32((float32x2_t)v161.u32[0], vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32)));
          float32x4_t v171 = vmulq_n_f32(v160, vmul_f32(*(float32x2_t *)v82.f32, vrsqrts_f32((float32x2_t)v161.u32[0], vmul_f32(*(float32x2_t *)v82.f32, *(float32x2_t *)v82.f32))).f32[0]);
          v161.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v159, 2), vadd_f32(*(float32x2_t *)v159.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v159.i8, 1))).u32[0];
          *(float32x2_t *)v159.i8 = vrsqrte_f32((float32x2_t)v161.u32[0]);
          *(float32x2_t *)v159.i8 = vmul_f32(*(float32x2_t *)v159.i8, vrsqrts_f32((float32x2_t)v161.u32[0], vmul_f32(*(float32x2_t *)v159.i8, *(float32x2_t *)v159.i8)));
          v158[1] = v162;
          v158[2] = v165;
          v158[3] = v83;
          v158[4] = v170;
          v158[5] = v171;
          v158[6] = vmulq_n_f32(v55, vmul_f32(*(float32x2_t *)v159.i8, vrsqrts_f32((float32x2_t)v161.u32[0], vmul_f32(*(float32x2_t *)v159.i8, *(float32x2_t *)v159.i8))).f32[0]);
        }
        ++v85;
      }
      while (v85 < *v5);
    }
  }
}

void sub_1B662057C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = (unsigned __int8 *)(a1 + 12560);
  float32x4_t v36 = 0u;
  float32x4_t v37 = 0u;
  float32x4_t v34 = 0u;
  float32x4_t v35 = 0u;
  sub_1B63E09B8(*(__n128 **)(a1 + 12640), a2, (uint64_t)&v34, a4, a5, a6, a7, a8);
  simd_float4 v10 = 0uLL;
  if (*v9)
  {
    unint64_t v11 = 0;
    do
    {
      unint64_t v12 = 0;
      uint64_t v13 = (simd_float4 *)(a1 + (v11 << 6));
      simd_float4 v14 = v13[449];
      simd_float4 v15 = v13[450];
      simd_float4 v16 = v13[451];
      simd_float4 v17 = v13[452];
      float32x4_t v18 = v13 + 449;
      float32x4_t v19 = v34;
      float32x4_t v20 = v35;
      float32x4_t v21 = v36;
      float32x4_t v22 = v37;
      simd_float4 v38 = v14;
      simd_float4 v39 = v15;
      simd_float4 v40 = v16;
      simd_float4 v41 = v17;
      v42.columns[0] = v10;
      v42.columns[1] = v10;
      v42.columns[2] = v10;
      v42.columns[3] = v10;
      do
      {
        v42.columns[v12 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(*(_OWORD *)((char *)&v38 + v12 * 4))), v20, *(float32x2_t *)&v38.f32[v12], 1), v21, *(float32x4_t *)((char *)&v38 + v12 * 4), 2), v22, *(float32x4_t *)((char *)&v38 + v12 * 4), 3);
        v12 += 4;
      }
      while (v12 != 16);
      unint64_t v23 = 0;
      simd_float4x4 v24 = v42;
      *float32x4_t v18 = v42.columns[0];
      v18[1] = v24.columns[1];
      v18[2] = v24.columns[2];
      v18[3] = v24.columns[3];
      uint64_t v25 = (simd_float4 *)(a1 + (v11 << 6));
      simd_float4 v26 = v25[97];
      simd_float4 v27 = v25[98];
      simd_float4 v28 = v25[99];
      simd_float4 v29 = v25[100];
      uint64_t v30 = v25 + 97;
      simd_float4 v38 = v26;
      simd_float4 v39 = v27;
      simd_float4 v40 = v28;
      simd_float4 v41 = v29;
      v42.columns[0] = v10;
      v42.columns[1] = v10;
      v42.columns[2] = v10;
      v42.columns[3] = v10;
      do
      {
        v42.columns[v23 / 4] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, COERCE_FLOAT(*(_OWORD *)((char *)&v38 + v23 * 4))), v20, *(float32x2_t *)&v38.f32[v23], 1), v21, *(float32x4_t *)((char *)&v38 + v23 * 4), 2), v22, *(float32x4_t *)((char *)&v38 + v23 * 4), 3);
        v23 += 4;
      }
      while (v23 != 16);
      simd_float4 v31 = v42.columns[1];
      simd_float4 v32 = v42.columns[2];
      simd_float4 v33 = v42.columns[3];
      *uint64_t v30 = v42.columns[0];
      v30[1] = v31;
      v30[2] = v32;
      v30[3] = v33;
      if (v9[53])
      {
        simd_float4x4 v43 = __invert_f4(v24);
        simd_float4 v10 = 0uLL;
        *(simd_float4x4 *)(a1 + (v11 << 6) + 8208) = v43;
      }
      ++v11;
    }
    while (v11 < *v9);
  }
}

void sub_1B66206F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v19.n128_u32[2] = 0;
  v19.n128_u64[0] = 0;
  sub_1B64B2438(*(__n128 **)(a1 + 12640), &v19, a3, a4, a5, a6, a7, a8);
  __n128 v18 = 0uLL;
  sub_1B63E08F4(a2, (float32x4_t *)&v19, &v18, v10, v11, v12, v13, v14);
  uint64_t v15 = *(unsigned __int8 *)(a1 + 12560);
  if (*(unsigned char *)(a1 + 12560))
  {
    __n128 v16 = v18;
    simd_float4 v17 = (__n128 *)(a1 + 96);
    do
    {
      __n128 *v17 = v16;
      v17 += 6;
      --v15;
    }
    while (v15);
  }
}

void sub_1B6620768(uint64_t a1)
{
  os_signpost_id_t v2 = sub_1B64454CC(*(void *)(a1 + 12648));
  uint64_t v3 = sub_1B63F2EE0();
  if (v2 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v11 = v3;
    if (os_signpost_enabled(v3))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1B6287000, v11, OS_SIGNPOST_INTERVAL_BEGIN, v2, "Culling", "", buf, 2u);
    }
  }
  uint64_t v12 = sub_1B6445480(*(void *)(a1 + 12648), v4, v5, v6, v7, v8, v9, v10);
  double v13 = CACurrentMediaTime();
  prof_beginFlame((uint64_t)"Culling", (uint64_t)"/Library/Caches/com.apple.xbs/Sources/VFX/sources/vfx/CFX/AppleEngine/CFXCullingContext.c", 712);
  uint64_t v14 = *(void *)(a1 + 12584);
  uint64_t v22 = sub_1B64B1FBC(*(void *)(a1 + 12640), v15, v16, v17, v18, v19, v20, v21);
  if (sub_1B661F650((unsigned char *)a1, v23, v24, v25, v26, v27, v28, v29))
  {
    unint64_t v37 = 0;
    simd_float4 v38 = (unsigned __int8 *)(a1 + 12562);
    do
    {
      if (*(unsigned char *)(a1 + 12610))
      {
        if (v14 == v22)
        {
          for (int i = 0; i != 4; ++i)
          {
            if ((*v38 >> i))
            {
              uint64_t v40 = sub_1B64B36FC(*(void *)(a1 + 12640), i, v31, v32, v33, v34, v35, v36);
              if (v40) {
                sub_1B661EB8C((float32x4_t *)a1, v37, v40, v32, v33, v34, v35, v36);
              }
            }
          }
        }
        else
        {
          sub_1B661EB8C((float32x4_t *)a1, 0, *(void *)(a1 + 12584), v32, v33, v34, v35, v36);
        }
      }
      else if (v14 == v22)
      {
        uint64_t v41 = sub_1B64B2994(*(void *)(a1 + 12640), v30, v31, v32, v33, v34, v35, v36);
        uint64_t v47 = 0;
        *(_OWORD *)buf = 0u;
        long long v46 = 0u;
        v44[0] = MEMORY[0x1E4F143A8];
        v44[1] = 0x40000000;
        void v44[2] = sub_1B6620A10;
        void v44[3] = &unk_1E6145988;
        v44[4] = a1;
        v44[5] = v37;
        sub_1B65C4C3C((uint64_t)v44, (uint64_t)buf);
        *(_OWORD *)buf = *(_OWORD *)(a1 + 12616);
        DWORD1(v46) = 2;
        if (*(unsigned char *)(a1 + 12609)) {
          LODWORD(v46) = 4;
        }
        DWORD2(v46) = *v38;
        sub_1B65C5604(v41, a1 + 96 * v37 + 16);
      }
      else
      {
        sub_1B661EC30((float32x4_t *)a1, 0, *(float32x4_t **)(a1 + 12584), v32, v33, v34, v35, v36);
      }
      ++v37;
    }
    while (v37 < sub_1B661F650((unsigned char *)a1, v30, v31, v32, v33, v34, v35, v36));
  }
  *(double *)(v12 + 104) = *(double *)(v12 + 104) + CACurrentMediaTime() - v13;
  prof_endFlame();
  simd_float4x4 v42 = sub_1B63F2EE0();
  if (v2 - 1 < 0xFFFFFFFFFFFFFFFELL)
  {
    simd_float4x4 v43 = v42;
    if (os_signpost_enabled(v42))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1B6287000, v43, OS_SIGNPOST_INTERVAL_END, v2, "Culling", "", buf, 2u);
    }
  }
}

void sub_1B6620A10(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  if (a3 >= 1)
  {
    uint64_t v3 = a3;
    do
    {
      if ((*(unsigned int (**)(void))(*(void *)(a1 + 32) + 13080))()) {
        sub_1B661E560(*(float32x4_t **)(a1 + 32), *(void *)(a1 + 40), *a2, v6, v7, v8, v9, v10);
      }
      ++a2;
      --v3;
    }
    while (v3);
  }
}

uint64_t sub_1B6620A78()
{
  if (qword_1EB995500 != -1) {
    dispatch_once(&qword_1EB995500, &unk_1F0FB6068);
  }
  return qword_1EB995508;
}

double sub_1B6620ABC()
{
  if (!qword_1EB995508)
  {
    qword_1EB995508 = sub_1B63C8D10(&qword_1EB995508);
    double result = *(double *)&xmmword_1F0FB88D0;
    xmmword_1EB984168 = xmmword_1F0FB88D0;
  }
  return result;
}

uint64_t sub_1B6620B14()
{
  if (qword_1EB995500 != -1) {
    dispatch_once(&qword_1EB995500, &unk_1F0FB6068);
  }
  uint64_t v0 = sub_1B63C8D44(qword_1EB995508, 0x40uLL);
  *(void *)(v0 + 64) = CFDictionaryCreateMutable(0, 0, MEMORY[0x1E4F1D530], MEMORY[0x1E4F1D540]);
  return v0;
}

uint64_t sub_1B6620B90(CFDictionaryRef *a1, CFArrayRef theArray, int a3, uint64_t a4)
{
  CFIndex Count = CFArrayGetCount(theArray);
  int v9 = a3 + 1;
  CFIndex v10 = a3;
  CFStringRef ValueAtIndex = CFArrayGetValueAtIndex(theArray, a3);
  uint64_t Value = (char *)CFDictionaryGetValue(a1[8], ValueAtIndex);
  double v13 = Value;
  if (Value)
  {
    CFTypeID v14 = CFGetTypeID(Value);
    if (v14 == sub_1B6477C48())
    {
      if (sub_1B660C30C(v13, theArray, (a3 + 1), Count, a4, 0, v15, v16))
      {
        sub_1B660F764(a4, a1, v17, v18, v19, v20, v21, v22);
        return 1;
      }
    }
  }
  if (v9 >= (int)Count)
  {
    unsigned int v24 = 0;
    char v25 = 0;
    goto LABEL_19;
  }
  if (Count - 2 != a3) {
    goto LABEL_17;
  }
  uint64_t v23 = CFArrayGetValueAtIndex(theArray, v9);
  if (CFEqual(v23, @"x"))
  {
    unsigned int v24 = 0;
LABEL_12:
    char v25 = 1;
    goto LABEL_19;
  }
  if (CFEqual(v23, @"y"))
  {
    unsigned int v24 = 1;
    goto LABEL_12;
  }
  if (CFEqual(v23, @"z"))
  {
    char v25 = 1;
    unsigned int v24 = 2;
    goto LABEL_19;
  }
  if (!CFEqual(v23, @"w"))
  {
LABEL_17:
    int v26 = Count - a3;
    CFIndex v27 = (int)Count - a3;
    CFDictionaryRef Mutable = CFArrayCreateMutable(0, v26, MEMORY[0x1E4F1D510]);
    v55.location = v10;
    v55.length = v27;
    CFArrayAppendArray(Mutable, theArray, v55);
    uint64_t v29 = (__CFString *)CFStringCreateByCombiningStrings(0, Mutable, @".");
    uint64_t v30 = v29;
    CFRelease(Mutable);
    uint64_t v31 = (char *)CFDictionaryGetValue(a1[8], v29);
    unsigned int v24 = 0;
    char v25 = 0;
    if (v31) {
      double v13 = v31;
    }
    goto LABEL_19;
  }
  char v25 = 1;
  unsigned int v24 = 3;
LABEL_19:
  if (!v13) {
    return 0;
  }
  CFTypeID v32 = CFGetTypeID(v13);
  if (v32 != sub_1B6562334()) {
    return 0;
  }
  sub_1B660F764(a4, a1, v33, v34, v35, v36, v37, v38);
  if (v25) {
    __int16 v46 = 1;
  }
  else {
    __int16 v46 = sub_1B65625B4((uint64_t)v13, v39, v40, v41, v42, v43, v44, v45);
  }
  *(_WORD *)(a4 + 32) = v46;
  *(unsigned char *)(a4 + 34) = sub_1B6562600((uint64_t)v13, v39, v40, v41, v42, v43, v44, v45);
  *(void *)(a4 + 24) = sub_1B6562568((uint64_t)v13, v48, v49, v50, v51, v52, v53, v54) + 4 * v24;
  *(unsigned char *)(a4 + 35) = v24;
  return 1;
}

const void *sub_1B6620DDC(uint64_t a1, const void *a2)
{
  return CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
}

void sub_1B6620DE4(uint64_t a1, const void *a2)
{
  uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), a2);
  if (Value)
  {
    uint64_t v5 = Value;
    CFTypeID v6 = CFGetTypeID(Value);
    if (v6 == sub_1B6562334())
    {
      int v14 = *((unsigned __int16 *)v5 + 8);
      uint64_t v15 = (_OWORD *)v5[3];
      if (v14 == 10)
      {
        *uint64_t v15 = xmmword_1B6E4F300;
        v15[1] = xmmword_1B6E4F320;
        uint64_t v15[2] = xmmword_1B6E4F2E0;
        v15[3] = xmmword_1B6E4F370;
      }
      else
      {
        uint64_t v16 = sub_1B63CA534((__int16)v14, v7, v8, v9, v10, v11, v12, v13);
        bzero(v15, v5[4] * v16);
      }
    }
    else
    {
      CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 64), a2);
    }
    ++*(_DWORD *)(a1 + 72);
  }
}

void sub_1B6620EA4(uint64_t a1, void *key, __int16 *a3)
{
  if (!a3)
  {
    CFDictionaryRemoveValue(*(CFMutableDictionaryRef *)(a1 + 64), key);
    ++*(_DWORD *)(a1 + 72);
    return;
  }
  ++*(_DWORD *)(a1 + 72);
  uint64_t Value = CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 64), key);
  CFTypeID v7 = CFGetTypeID(a3);
  if (Value)
  {
    CFTypeID v8 = CFGetTypeID(Value);
    if (v8 == sub_1B6562334()) {
      uint64_t v9 = Value;
    }
    else {
      uint64_t v9 = 0;
    }
    if (v7 == sub_1B6562334())
    {
      if (v9)
      {
        int v17 = (unsigned __int16)v9[8];
        if (v17 != (unsigned __int16)a3[8] && (byte_1E9DDBF58 & 1) == 0)
        {
          byte_1E9DDBF58 = 1;
          sub_1B63CA8A4((__int16)v17, v10, v11, v12, v13, v14, v15, v16);
          sub_1B63CA8A4(a3[8], v18, v19, v20, v21, v22, v23, v24);
          sub_1B63F2F54(16, @"Error: type for key %@ is switching from %@ to %@, this will lead to improper animation", v25, v26, v27, v28, v29, v30, (uint64_t)key);
        }
        goto LABEL_14;
      }
LABEL_13:
      uint64_t Value = (_WORD *)sub_1B65623D0(10, 1, v11, v12, v13, v14, v15, v16);
      CFDictionarySetValue(*(CFMutableDictionaryRef *)(a1 + 64), key, Value);
      CFRelease(Value);
LABEL_14:
      uint64_t v31 = (void *)sub_1B6562568((uint64_t)Value, v10, v11, v12, v13, v14, v15, v16);
      sub_1B6562704((uint64_t)a3, v31, v32, v33, v34, v35, v36, v37);
      Value[8] = sub_1B65625B4((uint64_t)a3, v38, v39, v40, v41, v42, v43, v44);
      return;
    }
  }
  else if (v7 == sub_1B6562334())
  {
    goto LABEL_13;
  }
  uint64_t v45 = *(__CFDictionary **)(a1 + 64);

  CFDictionarySetValue(v45, key, a3);
}

uint64_t sub_1B6621034(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_1B662103C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void **)(a1 + 64);
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  uint64_t v6[2] = sub_1B66210AC;
  _OWORD v6[3] = &unk_1E61459B0;
  v6[4] = a2;
  return objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v4, a2, (uint64_t)v6, a4);
}

uint64_t sub_1B66210AC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1B66210BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *(void **)(a1 + 64);
  if ((unint64_t)objc_msgSend_count(v5, (const char *)a2, a3, a4) > 1)
  {
    uint64_t v10 = objc_msgSend_allKeys(v5, v6, v7, v8);
    uint64_t v13 = objc_msgSend_sortedArrayUsingSelector_(v10, v11, (uint64_t)sel_compare_, v12);
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    long long v25 = 0u;
    uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v14, (uint64_t)&v22, (uint64_t)v27, 16);
    if (result)
    {
      uint64_t v17 = result;
      uint64_t v18 = *(void *)v23;
      do
      {
        uint64_t v19 = 0;
        do
        {
          if (*(void *)v23 != v18) {
            objc_enumerationMutation(v13);
          }
          uint64_t v20 = *(void *)(*((void *)&v22 + 1) + 8 * v19);
          uint64_t v21 = objc_msgSend_objectForKeyedSubscript_(v5, v15, v20, v16);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(a2, v20, v21);
          ++v19;
        }
        while (v17 != v19);
        uint64_t result = objc_msgSend_countByEnumeratingWithState_objects_count_(v13, v15, (uint64_t)&v22, (uint64_t)v27, 16);
        uint64_t v17 = result;
      }
      while (result);
    }
  }
  else
  {
    v26[0] = MEMORY[0x1E4F143A8];
    v26[1] = 3221225472;
    void v26[2] = sub_1B6621250;
    v26[3] = &unk_1E61459B0;
    v26[4] = a2;
    return objc_msgSend_enumerateKeysAndObjectsUsingBlock_(v5, v6, (uint64_t)v26, v8);
  }
  return result;
}

uint64_t sub_1B6621250(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

id sub_1B6621264(uint64_t a1)
{
  CFRelease(*(CFTypeRef *)(a1 + 64));

  return sub_1B658325C(a1, v2, v3, v4, v5, v6, v7, v8);
}

CFStringRef sub_1B66212A0(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXKeyValueStore>");
}

CFStringRef sub_1B66212D4(const void *a1)
{
  CFAllocatorRef v1 = CFGetAllocator(a1);

  return CFStringCreateWithFormat(v1, 0, @"<CFXKeyValueStore>");
}

void *sub_1B6621308(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  uint64_t result = memcpy(__dst, __src, __n);
  ++*(_DWORD *)(a1 + 72);
  return result;
}

uint64_t sub_1B6621344(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B6621374(int a1, int a2)
{
  if (qword_1EB996E58 != -1) {
    dispatch_once_f(&qword_1EB996E58, &qword_1EB9952D8, (dispatch_function_t)sub_1B6621344);
  }
  uint64_t v4 = sub_1B63C8D44(qword_1EB9952D8, 0x18uLL);
  uint64_t v5 = v4;
  *(_DWORD *)(v4 + 32) = a1;
  int v6 = *(_DWORD *)(v4 + 28);
  if (v6 != a2)
  {
    sub_1B662176C(v4, v6 * a1, (a2 * a1));
    *(_DWORD *)(v5 + 28) = a2;
  }
  return v5;
}

uint64_t sub_1B6621414(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"array");
  }
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1B6621460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"array");
  }
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_1B66214AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1)
  {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"array");
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v10, v11, v12, v13, v14, v15, (uint64_t)"array");
  }
  if (*(unsigned int *)(a1 + 24) <= a2) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. index out of bounds", a3, a4, a5, a6, a7, a8, (uint64_t)"index < CFXArrayGetCount(array)");
  }
  return *(void *)(a1 + 16) + *(unsigned int *)(a1 + 32) * a2;
}

uint64_t sub_1B6621548(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"array");
  }
  return *(void *)(a1 + 16);
}

void sub_1B6621594(uint64_t a1, int a2)
{
  int v3 = *(_DWORD *)(a1 + 28);
  if (v3 != a2)
  {
    sub_1B662176C(a1, *(_DWORD *)(a1 + 32) * v3, (*(_DWORD *)(a1 + 32) * a2));
    *(_DWORD *)(a1 + 28) = a2;
  }
}

void sub_1B66215D8(_DWORD *a1, unsigned int a2)
{
  if (a1[6] != a2)
  {
    unsigned int v4 = a1[7];
    if (v4 < a2)
    {
      sub_1B662176C((uint64_t)a1, a1[8] * v4, a1[8] * a2);
      a1[7] = a2;
    }
    a1[6] = a2;
  }
}

void *sub_1B6621630(uint64_t a1, void *__src)
{
  int v4 = *(_DWORD *)(a1 + 24);
  if (v4 == *(_DWORD *)(a1 + 28))
  {
    int v5 = v4 ? 2 * v4 : 4;
    if (v4 != v5)
    {
      sub_1B662176C(a1, *(_DWORD *)(a1 + 32) * v4, (*(_DWORD *)(a1 + 32) * v5));
      *(_DWORD *)(a1 + 28) = v5;
      int v4 = *(_DWORD *)(a1 + 24);
    }
  }
  size_t v6 = *(unsigned int *)(a1 + 32);
  uint64_t v7 = (void *)(*(void *)(a1 + 16) + (v6 * v4));
  if (__src) {
    memcpy(v7, __src, v6);
  }
  else {
    bzero(v7, *(unsigned int *)(a1 + 32));
  }
  ++*(_DWORD *)(a1 + 24);
  return v7;
}

void sub_1B66216D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"array");
  }
  if (*(_DWORD *)(a1 + 24))
  {
    unint64_t v10 = 0;
    do
    {
      (*(void (**)(uint64_t, unint64_t, void))(a2 + 16))(a2, v10, *(void *)(a1 + 16) + (*(_DWORD *)(a1 + 32) * v10));
      ++v10;
    }
    while (v10 < *(unsigned int *)(a1 + 24));
  }
}

void sub_1B662176C(uint64_t a1, unsigned int a2, size_t size)
{
  int v4 = *(void **)(a1 + 16);
  if (size)
  {
    unsigned int v5 = size;
    size_t v6 = size;
    if (v4)
    {
      uint64_t v8 = (char *)malloc_type_realloc(v4, size, 0xA4107331uLL);
      *(void *)(a1 + 16) = v8;
      size_t v9 = v5 - a2;
      if (v5 <= a2) {
        return;
      }
      unint64_t v10 = &v8[a2];
    }
    else
    {
      unint64_t v10 = (char *)sub_1B63CA528(size);
      *(void *)(a1 + 16) = v10;
      size_t v9 = v6;
    }
    bzero(v10, v9);
  }
  else
  {
    free(v4);
    *(void *)(a1 + 16) = 0;
  }
}

void sub_1B6621814(uint64_t a1)
{
}

CFStringRef sub_1B662181C(unsigned int *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXArray %p:, %d objects>", a1, a1[6]);
}

CFStringRef sub_1B6621860(unsigned int *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXArray %p:, %d objects>", a1, a1[6]);
}

void sub_1B6621F4C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  int v12 = *(unsigned __int8 *)(a1 + 40);

  sub_1B662AA80(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B66220C4(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  float v13 = *(float *)(a1 + 40);

  sub_1B662A13C(v5, v13, v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B6622234(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  float v13 = *(float *)(a1 + 40);

  sub_1B662A218(v5, v13, v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B66223AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  float v13 = *(float *)(a1 + 40);

  sub_1B662A2F4(v5, v13, v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B6622518(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  float v13 = *(float *)(a1 + 40);

  sub_1B662A5F0(v5, v13, v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B6622678(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  unsigned __int8 v12 = *(unsigned char *)(a1 + 40);

  sub_1B662A3D0(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B66227FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 208);

  sub_1B662A740(v5, v6);
}

void sub_1B6622974(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  int v12 = *(unsigned __int8 *)(a1 + 40);

  sub_1B662A8D0(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B6622BC0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v6 = *(void **)(a1 + 40);

  sub_1B662A7AC(v5, v6);
}

void sub_1B6622DE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  sub_1B662A92C(v5, 1, v6, v7, v8, v9, v10, v11);
  uint64_t v15 = objc_msgSend_geometryRef(*(void **)(a1 + 32), v12, v13, v14);
  CGFloat v16 = *(double *)(*(void *)(a1 + 32) + 240);
  CGFloat v17 = *(double *)(*(void *)(a1 + 32) + 248);
  CGFloat v18 = *(double *)(*(void *)(a1 + 32) + 256);
  CGFloat v19 = *(double *)(*(void *)(a1 + 32) + 264);

  sub_1B662A948(v15, v16, v17, v18, v19);
}

uint64_t sub_1B6622EC0(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a1)
  {
    case 0:
      uint64_t v8 = (uint64_t *)MEMORY[0x1E4F3A5E8];
      goto LABEL_7;
    case 1:
      uint64_t v8 = (uint64_t *)MEMORY[0x1E4F3A5F0];
      goto LABEL_7;
    case 2:
      uint64_t v8 = (uint64_t *)MEMORY[0x1E4F3A5D8];
      goto LABEL_7;
    case 3:
      uint64_t v8 = (uint64_t *)MEMORY[0x1E4F3A5E0];
LABEL_7:
      uint64_t result = *v8;
      break;
    default:
      sub_1B63F2F54(16, @"Unreachable code: CATextAlignmentModeFromCFXTextAlignmentMode unknown mode", a3, a4, a5, a6, a7, a8, vars0);
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_1B66230A8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  int v12 = *(_DWORD *)(a1 + 40);

  sub_1B662A874(v5, v12, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1B6623164(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  switch(a1)
  {
    case 0:
      uint64_t v8 = (uint64_t *)MEMORY[0x1E4F39D50];
      goto LABEL_8;
    case 1:
      uint64_t v8 = (uint64_t *)MEMORY[0x1E4F39D48];
      goto LABEL_8;
    case 2:
      uint64_t v8 = (uint64_t *)MEMORY[0x1E4F39D58];
      goto LABEL_8;
    case 3:
      uint64_t v8 = (uint64_t *)MEMORY[0x1E4F39D38];
      goto LABEL_8;
    case 4:
      uint64_t v8 = (uint64_t *)MEMORY[0x1E4F39D40];
LABEL_8:
      uint64_t result = *v8;
      break;
    default:
      sub_1B63F2F54(16, @"Unreachable code: CATextAlignmentModeFromCFXTextAlignmentMode unknown mode", a3, a4, a5, a6, a7, a8, vars0);
      uint64_t result = 0;
      break;
  }
  return result;
}

void sub_1B662337C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  int v12 = *(_DWORD *)(a1 + 40);

  sub_1B662A818(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B66234F8(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v6 = *(void **)(a1 + 40);

  sub_1B662A564(v5, v6);
}

uint64_t sub_1B6623F20(uint64_t a1, uint64_t a2, const void *a3)
{
  if (!a3) {
    return 0;
  }
  long long v18 = xmmword_1F0FBAD50;
  uint64_t v4 = sub_1B6451D68();
  sub_1B6451F1C(v4, &v18, v5, v6, v7, v8, v9, v10);
  sub_1B6451E98(v4, a3, v11, v12, v13, v14, v15, v16);
  return v4;
}

uint64_t sub_1B6623F84()
{
  return 1;
}

uint64_t sub_1B6623F8C()
{
  return 1;
}

uint64_t sub_1B6624044(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  v7[0] = MEMORY[0x1E4F143A8];
  v7[1] = 3221225472;
  uint64_t v7[2] = sub_1B66242D0;
  v7[3] = &unk_1E61459D8;
  v7[4] = a4;
  v5[4] = a4;
  v6[0] = MEMORY[0x1E4F143A8];
  v6[1] = 3221225472;
  uint64_t v6[2] = sub_1B662435C;
  _OWORD v6[3] = &unk_1E6145A00;
  v6[4] = a4;
  v5[0] = MEMORY[0x1E4F143A8];
  v5[1] = 3221225472;
  _OWORD v5[2] = sub_1B66243DC;
  v5[3] = &unk_1E6145A28;
  return objc_msgSend_renderToTexture_computeCommandHandler_blitCommandHandler_completionHandler_helper_(a1, a2, (uint64_t)a2, (uint64_t)v7, v6, v5, a3);
}

uint64_t sub_1B66242D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v5 = (void **)objc_msgSend_resourceComputeEncoder(*(void **)(result + 32), (const char *)a2, a3, a4);
    if ((objc_msgSend_isEncoding(*v5, v6, v7, v8) & 1) == 0) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. We should have a compute command encoder open at this point", v10, v11, v12, v13, v14, v15, (uint64_t)"vfxComputeEncoder->isEncoding()");
    }
    uint64_t EncoderAndResetCache = objc_msgSend_getEncoderAndResetCache(*v5, v9, v10, v11);
    CGFloat v17 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 16);
    return v17(a2, EncoderAndResetCache);
  }
  return result;
}

uint64_t sub_1B662435C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (!*objc_msgSend_resourceBlitEncoder(*(void **)(result + 32), (const char *)a2, a3, a4)) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. We should have a blit command encoder open at this point", v5, v6, v7, v8, v9, v10, (uint64_t)"vfxBlitEncoder->isEncoding()");
    }
    uint64_t v11 = *(uint64_t (**)(uint64_t))(a2 + 16);
    return v11(a2);
  }
  return result;
}

uint64_t sub_1B66243DC(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v5 = objc_msgSend_resourceComputeEncoder(*(void **)(result + 32), a2, a3, a4);
    if ((objc_msgSend_isEncoding(*(void **)v5, v6, v7, v8) & 1) == 0) {
      sub_1B63F2F54(17, @"Assertion '%s' failed. We should have a compute command encoder open at this point", v10, v11, v12, v13, v14, v15, (uint64_t)"vfxComputeEncoder->isEncoding()");
    }
    uint64_t v16 = *(void **)(v5 + 8);
    return objc_msgSend_addCompletedHandler_(v16, v9, (uint64_t)a2, v11);
  }
  return result;
}

uint64_t sub_1B6624458(uint64_t a1)
{
  for (int i = *(void **)(a1 + 160); i; int i = (void *)*i)
  {
    uint64_t v3 = i[3];
    if (v3) {
      MEMORY[0x1BA9B6D80](v3, 0x1020C4055CCDE27);
    }
  }
  for (uint64_t j = *(void **)(a1 + 120); j; uint64_t j = (void *)*j)
    sub_1B66245BC((uint64_t *)a1, j[2], 0);
  for (k = *(void **)(a1 + 200); k; k = (void *)*k)
  {
    uint64_t v6 = k[3];
    if (v6) {
      MEMORY[0x1BA9B6D80](v6, 0x20C40A4A59CD2);
    }
  }
  for (m = *(void **)(a1 + 80); m; m = (void *)*m)
    sub_1B662471C((uint64_t *)a1, m[2], 0);
  sub_1B66271AC((void *)(a1 + 144));
  sub_1B66271AC((void *)(a1 + 104));
  sub_1B66271AC((void *)(a1 + 184));
  sub_1B66271AC((void *)(a1 + 224));
  *(void *)(a1 + 272) = *(void *)(a1 + 264);
  *(void *)(a1 + 296) = *(void *)(a1 + 288);
  *(void *)(a1 + 320) = *(void *)(a1 + 312);
  *(void *)(a1 + 344) = *(void *)(a1 + 336);
  sub_1B66271AC((void *)(a1 + 64));

  objc_msgSend_removeAllObjects(*(void **)(a1 + 384), v8, v9, v10);
  uint64_t result = objc_msgSend_removeAllObjects(*(void **)(a1 + 392), v11, v12, v13);
  *(void *)(a1 + 440) = 0;
  *(void *)(a1 + 360) = 0;
  *(void *)(a1 + 368) = 0;
  *(void *)(a1 + 416) = 0;
  *(void *)(a1 + 424) = 0;
  *(void *)(a1 + 408) = 0;
  return result;
}

uint64_t *sub_1B66245BC(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t v21 = a2;
  if (a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = result + 13;
    uint64_t result = sub_1B63C8A0C(result + 13, &v21);
    if (result)
    {
      uint64_t v8 = result;
      uint64_t v9 = result[3];
      int v10 = *(_DWORD *)(v9 + 12) - 1;
      *(_DWORD *)(v9 + 12) = v10;
      if (!v10)
      {
        uint64_t v11 = *(void *)(v9 + 24);
        if (v11) {
          objc_msgSend_removeObject_((void *)v4[48], v6, v11, v7);
        }
        uint64_t v12 = *(void *)(v9 + 32);
        if (v12) {
          objc_msgSend_removeObject_((void *)v4[48], v6, v12, v7);
        }
        uint64_t v13 = *(void *)(v9 + 40);
        if (v13) {
          objc_msgSend_removeObject_((void *)v4[48], v6, v13, v7);
        }
        uint64_t v14 = *(void **)(v9 + 48);
        if (v14)
        {
          objc_msgSend_removeObject_((void *)v4[48], v6, *(void *)(v9 + 48), v7);
        }
        uint64_t v15 = *(void **)(v9 + 56);
        if (v15)
        {
          objc_msgSend_removeObject_((void *)v4[48], v6, *(void *)(v9 + 56), v7);
        }
        uint64_t v16 = *(void **)(v9 + 72);
        if (v16 != *(void **)(v9 + 64))
        {
          unint64_t v17 = 0;
          unsigned int v18 = 1;
          uint64_t v16 = *(void **)(v9 + 64);
          do
          {
            uint64_t v19 = v16[v17];
            uint64_t v20 = *(void *)(v19 + 8);
            if (v20) {
              objc_msgSend_removeObject_((void *)v4[48], v6, v20, v7);
            }
            sub_1B662471C(v4, *(void *)(v19 + 16), 1);
            unint64_t v17 = v18;
            uint64_t v16 = *(void **)(v9 + 64);
            ++v18;
          }
          while (v17 < (uint64_t)(*(void *)(v9 + 72) - (void)v16) >> 3);
        }
        if (v16)
        {
          *(void *)(v9 + 72) = v16;
          operator delete(v16);
        }
        uint64_t result = (uint64_t *)MEMORY[0x1BA9B6D80](v9, 0x10A0C40E64107A1);
        if (a3) {
          return (uint64_t *)sub_1B63C8AF8(v5, v8);
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1B662471C(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t v14 = a2;
  if (a2)
  {
    uint64_t v4 = result;
    uint64_t v5 = result + 8;
    uint64_t result = sub_1B63C8A0C(result + 8, &v14);
    if (result)
    {
      uint64_t v8 = result;
      uint64_t v9 = result[3];
      int v10 = *(_DWORD *)(v9 + 8) - 1;
      *(_DWORD *)(v9 + 8) = v10;
      if (!v10)
      {
        uint64_t v11 = *(void **)(v9 + 208);
        if (v11)
        {
          objc_msgSend_removeObject_((void *)v4[48], v6, *(void *)(v9 + 208), v7);
        }
        for (uint64_t i = 48; i != 240; i += 48)
        {
          uint64_t v13 = *(void *)(v9 + i);
          if (v13) {
            objc_msgSend_removeObject_((void *)v4[48], v6, v13, v7);
          }
        }
        uint64_t result = (uint64_t *)MEMORY[0x1BA9B6D80](v9, 0x10A0C403610E37CLL);
        if (a3) {
          return (uint64_t *)sub_1B63C8AF8(v5, v8);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B66247EC(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B662481C()
{
  if (qword_1E9DDBF68 != -1) {
    dispatch_once_f(&qword_1E9DDBF68, &qword_1E9DDBF60, (dispatch_function_t)sub_1B66247EC);
  }
  uint64_t v0 = sub_1B63C8D44(qword_1E9DDBF60, 0x1D0uLL);
  *(_OWORD *)(v0 + 64) = 0u;
  *(_OWORD *)(v0 + 80) = 0u;
  *(_DWORD *)(v0 + 96) = 1065353216;
  *(_OWORD *)(v0 + 104) = 0u;
  *(_OWORD *)(v0 + 120) = 0u;
  *(_DWORD *)(v0 + 136) = 1065353216;
  *(_OWORD *)(v0 + 144) = 0u;
  *(_OWORD *)(v0 + 160) = 0u;
  *(_DWORD *)(v0 + 176) = 1065353216;
  *(_OWORD *)(v0 + 184) = 0u;
  *(_OWORD *)(v0 + 200) = 0u;
  *(_DWORD *)(v0 + 216) = 1065353216;
  *(_OWORD *)(v0 + 224) = 0u;
  *(_OWORD *)(v0 + 240) = 0u;
  *(_DWORD *)(v0 + 256) = 1065353216;
  *(void *)(v0 + 464) = 0;
  *(void *)(v0 + 472) = 0;
  *(void *)(v0 + 456) = 0;
  *(unsigned char *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(_OWORD *)(v0 + 264) = 0u;
  *(_OWORD *)(v0 + 280) = 0u;
  *(_OWORD *)(v0 + 296) = 0u;
  *(_OWORD *)(v0 + 312) = 0u;
  *(_OWORD *)(v0 + 328) = 0u;
  *(_OWORD *)(v0 + 344) = 0u;
  *(void *)(v0 + 56) = 0xBFF0000000000000;
  *(void *)(v0 + 360) = 0;
  *(void *)(v0 + 368) = 0;
  *(_OWORD *)(v0 + 384) = 0u;
  *(_OWORD *)(v0 + 400) = 0u;
  *(_OWORD *)(v0 + 416) = 0u;
  *(_OWORD *)(v0 + 432) = 0u;
  *(_DWORD *)(v0 + 448) = 16843009;
  *(_DWORD *)(v0 + 451) = 16843009;
  *(void *)(v0 + 384) = objc_opt_new();
  *(void *)(v0 + 392) = objc_opt_new();
  return v0;
}

uint64_t sub_1B6624920(uint64_t result, unsigned int a2)
{
  uint64_t v2 = 0;
  *(int16x4_t *)(result + 40) = vadd_s16(*(int16x4_t *)(result + 40), (int16x4_t)vand_s8((int8x8_t)vmovn_s32((int32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(a2), (uint32x4_t)xmmword_1B6E72DD0)), (int8x8_t)0x1000100010001));
  *(unsigned char *)(result + 48) = 0;
  while (!*(_WORD *)(result + 40 + v2))
  {
    v2 += 2;
    if (v2 == 8) {
      goto LABEL_6;
    }
  }
  *(unsigned char *)(result + 448) = 1;
  *(unsigned char *)(result + 48) = 1;
LABEL_6:
  *(_WORD *)(result + 449) = 257;
  *(unsigned char *)(result + 451) = 1;
  *(unsigned char *)(result + 453) = 1;
  return result;
}

int16x4_t *sub_1B6624994(int16x4_t *result, unsigned int a2)
{
  uint64_t v2 = 0;
  result[5] = vadd_s16(result[5], vmovn_s32(vcltzq_s32((int32x4_t)vshlq_u32((uint32x4_t)vdupq_n_s32(a2), (uint32x4_t)xmmword_1B6E72DE0))));
  result[6].i8[0] = 0;
  while (!result[5].i16[v2])
  {
    if (++v2 == 4) {
      return result;
    }
  }
  result[56].i8[0] = 1;
  result[6].i8[0] = 1;
  return result;
}

uint64_t sub_1B66249EC(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  if (!*(void *)(result + 432))
  {
    uint64_t v4 = result;
    uint64_t v5 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], a2, 1, a4);
    uint64_t v7 = objc_msgSend_newFunctionWithName_constants_library_(*(void **)(v4 + 32), v6, @"sphereIntersectionFunction", 0, 0);
    objc_msgSend_setObject_atIndexedSubscript_(v5, v8, v7, 0);
    uint64_t result = objc_msgSend_copy(v5, v9, v10, v11);
    *(void *)(v4 + 432) = result;
  }
  return result;
}

void sub_1B6624A5C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(char **)(a1 + 456);
  uint64_t v5 = *(char **)(a1 + 464);
  if (v5 != v4)
  {
    unsigned int v6 = a2;
    uint64_t v8 = 0;
    unsigned int v9 = 0;
    do
    {
      uint64_t v10 = &v4[16 * v8];
      unsigned int v11 = *((_DWORD *)v10 + 2) + 1;
      *((_DWORD *)v10 + 2) = v11;
      if (v11 <= v6)
      {
        ++v9;
      }
      else
      {
        objc_msgSend_setPurgeableState_(*(void **)&v4[16 * v8], a2, 4, a4);

        uint64_t v4 = *(char **)(a1 + 456);
        uint64_t v12 = *(char **)(a1 + 464);
        uint64_t v13 = &v4[16 * v8];
        *(void *)uint64_t v13 = 0;
        a2 = v13 + 16;
        int64_t v14 = v12 - (v13 + 16);
        if (v12 != v13 + 16)
        {
          memmove(v13, a2, v14 - 4);
          uint64_t v4 = *(char **)(a1 + 456);
        }
        uint64_t v5 = &v13[v14];
        *(void *)(a1 + 464) = &v13[v14];
      }
      uint64_t v8 = v9;
    }
    while (v9 < (unint64_t)((v5 - v4) >> 4));
  }
}

uint64_t sub_1B6624B20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v62 = a2;
  uint64_t result = sub_1B64A31E8(a2, a2, a3, a4, a5, a6, a7, a8);
  if ((result & 1) == 0)
  {
    uint64_t result = sub_1B64A4DAC(a2);
    if ((int)result <= 0)
    {
      CFDictionaryRef v18 = sub_1B649F640(a2, v11, v12, v13, v14, v15, v16, v17);
      if (v18
        && sub_1B6496680((uint64_t)v18, v19, v20, v21, v22, v23, v24, v25) - 1 <= 2
        && !sub_1B63C8A0C((void *)(a1 + 184), &v62))
      {
        operator new();
      }
      if (sub_1B64A04D4(v62, v19, v20, v21, v22, v23, v24, v25) && !sub_1B63C8A0C((void *)(a1 + 224), &v62)) {
        operator new();
      }
      uint64_t result = sub_1B649F5F4(v62, v26, v27, v28, v29, v30, v31, v32);
      uint64_t v61 = result;
      if (result)
      {
        uint64_t v40 = result;
        uint64_t v41 = sub_1B63CCE68(result, v33, v34, v35, v36, v37, v38, v39);
        __int16 v46 = sub_1B64AC5F8(v41, 0, 0, 1, v42, v43, v44, v45);
        LODWORD(v41) = sub_1B64ABD08(v41, v47, v48, v49, v50, v51, v52, v53);
        uint64_t result = (uint64_t)sub_1B63CCEC4(v40, v54, v55, v56, v57, v58, v59, v60);
        if (v41)
        {
          if (result && v46)
          {
            if (!sub_1B63C8A0C((void *)(a1 + 104), &v61)) {
              sub_1B6624E24(a1, v61);
            }
            uint64_t result = (uint64_t)sub_1B63C8A0C((void *)(a1 + 144), &v62);
            if (!result) {
              operator new();
            }
            *(_WORD *)(a1 + 449) = 257;
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B6624E24(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = sub_1B63C8A0C((void *)(a1 + 104), &v5);
  if (!v2) {
    operator new();
  }
  uint64_t v3 = v2[3];
  ++*(_DWORD *)(v3 + 12);
  return v3;
}

uint64_t sub_1B6624F54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B6624B20(a1, a2, a3, a4, a5, a6, a7, a8);
  uint64_t result = sub_1B64A180C(a2);
  if (result)
  {
    int v11 = result;
    for (unsigned int i = 0; i != v11; ++i)
    {
      uint64_t v13 = sub_1B64A1A44(a2, i);
      uint64_t result = sub_1B6624F54(a1, v13);
    }
  }
  return result;
}

void sub_1B6624FBC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 450))
  {
    uint64_t v2 = *(char **)(a1 + 288);
    *(void *)(a1 + 296) = v2;
    uint64_t v3 = *(void **)(a1 + 120);
    if (v3)
    {
      uint64_t v4 = (void *)(a1 + 304);
      uint64_t v5 = v2;
      do
      {
        if ((unint64_t)v5 >= *v4)
        {
          uint64_t v6 = (v5 - v2) >> 3;
          if ((unint64_t)(v6 + 1) >> 61) {
LABEL_82:
          }
            abort();
          uint64_t v7 = *v4 - (void)v2;
          uint64_t v8 = v7 >> 2;
          if (v7 >> 2 <= (unint64_t)(v6 + 1)) {
            uint64_t v8 = v6 + 1;
          }
          if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v9 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v9 = v8;
          }
          if (v9) {
            uint64_t v10 = (char *)sub_1B64285D4(a1 + 304, v9);
          }
          else {
            uint64_t v10 = 0;
          }
          int v11 = &v10[8 * v6];
          *(void *)int v11 = v3[3];
          uint64_t v5 = v11 + 8;
          uint64_t v13 = *(char **)(a1 + 288);
          uint64_t v12 = *(char **)(a1 + 296);
          if (v12 != v13)
          {
            do
            {
              uint64_t v14 = *((void *)v12 - 1);
              v12 -= 8;
              *((void *)v11 - 1) = v14;
              v11 -= 8;
            }
            while (v12 != v13);
            uint64_t v12 = *(char **)(a1 + 288);
          }
          *(void *)(a1 + 288) = v11;
          *(void *)(a1 + 296) = v5;
          *(void *)(a1 + 304) = &v10[8 * v9];
          if (v12) {
            operator delete(v12);
          }
        }
        else
        {
          *(void *)uint64_t v5 = v3[3];
          v5 += 8;
        }
        *(void *)(a1 + 296) = v5;
        uint64_t v2 = *(char **)(a1 + 288);
        *(_DWORD *)(*((void *)v5 - 1) + 8) = ((unint64_t)(v5 - v2) >> 3) - 1;
        uint64_t v3 = (void *)*v3;
      }
      while (v3);
    }
  }
  if (*(unsigned char *)(a1 + 452))
  {
    uint64_t v15 = *(char **)(a1 + 336);
    *(void *)(a1 + 344) = v15;
    uint64_t v16 = *(void **)(a1 + 240);
    if (v16)
    {
      uint64_t v17 = (void *)(a1 + 352);
      CFDictionaryRef v18 = v15;
      do
      {
        if ((unint64_t)v18 >= *v17)
        {
          uint64_t v19 = (v18 - v15) >> 3;
          if ((unint64_t)(v19 + 1) >> 61) {
            goto LABEL_82;
          }
          uint64_t v20 = *v17 - (void)v15;
          uint64_t v21 = v20 >> 2;
          if (v20 >> 2 <= (unint64_t)(v19 + 1)) {
            uint64_t v21 = v19 + 1;
          }
          if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v22 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            uint64_t v23 = (char *)sub_1B64285D4(a1 + 352, v22);
          }
          else {
            uint64_t v23 = 0;
          }
          uint64_t v24 = &v23[8 * v19];
          *(void *)uint64_t v24 = v16[3];
          CFDictionaryRef v18 = v24 + 8;
          uint64_t v26 = *(char **)(a1 + 336);
          uint64_t v25 = *(char **)(a1 + 344);
          if (v25 != v26)
          {
            do
            {
              uint64_t v27 = *((void *)v25 - 1);
              v25 -= 8;
              *((void *)v24 - 1) = v27;
              v24 -= 8;
            }
            while (v25 != v26);
            uint64_t v25 = *(char **)(a1 + 336);
          }
          *(void *)(a1 + 336) = v24;
          *(void *)(a1 + 344) = v18;
          *(void *)(a1 + 352) = &v23[8 * v22];
          if (v25) {
            operator delete(v25);
          }
        }
        else
        {
          *(void *)CFDictionaryRef v18 = v16[3];
          v18 += 8;
        }
        *(void *)(a1 + 344) = v18;
        uint64_t v15 = *(char **)(a1 + 336);
        **((_DWORD **)v18 - 1) = ((unint64_t)(v18 - v15) >> 3) - 1;
        uint64_t v16 = (void *)*v16;
      }
      while (v16);
    }
  }
  if (*(unsigned char *)(a1 + 449))
  {
    uint64_t v28 = *(void **)(a1 + 264);
    *(void *)(a1 + 272) = v28;
    uint64_t v29 = *(void **)(a1 + 160);
    if (v29)
    {
      uint64_t v30 = (void *)(a1 + 280);
      do
      {
        if ((unint64_t)v28 >= *v30)
        {
          uint64_t v31 = *(void *)(a1 + 264);
          uint64_t v32 = ((uint64_t)v28 - v31) >> 3;
          if ((unint64_t)(v32 + 1) >> 61) {
            goto LABEL_82;
          }
          uint64_t v33 = *v30 - v31;
          uint64_t v34 = v33 >> 2;
          if (v33 >> 2 <= (unint64_t)(v32 + 1)) {
            uint64_t v34 = v32 + 1;
          }
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v35 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v35 = v34;
          }
          if (v35) {
            uint64_t v36 = (char *)sub_1B64285D4(a1 + 280, v35);
          }
          else {
            uint64_t v36 = 0;
          }
          uint64_t v37 = &v36[8 * v32];
          *(void *)uint64_t v37 = v29[3];
          uint64_t v28 = v37 + 8;
          uint64_t v39 = *(char **)(a1 + 264);
          uint64_t v38 = *(char **)(a1 + 272);
          if (v38 != v39)
          {
            do
            {
              uint64_t v40 = *((void *)v38 - 1);
              v38 -= 8;
              *((void *)v37 - 1) = v40;
              v37 -= 8;
            }
            while (v38 != v39);
            uint64_t v38 = *(char **)(a1 + 264);
          }
          *(void *)(a1 + 264) = v37;
          *(void *)(a1 + 272) = v28;
          *(void *)(a1 + 280) = &v36[8 * v35];
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          *v28++ = v29[3];
        }
        *(void *)(a1 + 272) = v28;
        uint64_t v29 = (void *)*v29;
      }
      while (v29);
    }
  }
  if (*(unsigned char *)(a1 + 451))
  {
    uint64_t v41 = *(void **)(a1 + 312);
    *(void *)(a1 + 320) = v41;
    uint64_t v42 = *(void **)(a1 + 200);
    if (v42)
    {
      uint64_t v43 = (void *)(a1 + 328);
      do
      {
        if ((unint64_t)v41 >= *v43)
        {
          uint64_t v44 = *(void *)(a1 + 312);
          uint64_t v45 = ((uint64_t)v41 - v44) >> 3;
          if ((unint64_t)(v45 + 1) >> 61) {
            goto LABEL_82;
          }
          uint64_t v46 = *v43 - v44;
          uint64_t v47 = v46 >> 2;
          if (v46 >> 2 <= (unint64_t)(v45 + 1)) {
            uint64_t v47 = v45 + 1;
          }
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v48 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v48 = v47;
          }
          if (v48) {
            uint64_t v49 = (char *)sub_1B64285D4(a1 + 328, v48);
          }
          else {
            uint64_t v49 = 0;
          }
          uint64_t v50 = &v49[8 * v45];
          *(void *)uint64_t v50 = v42[3];
          uint64_t v41 = v50 + 8;
          uint64_t v52 = *(char **)(a1 + 312);
          uint64_t v51 = *(char **)(a1 + 320);
          if (v51 != v52)
          {
            do
            {
              uint64_t v53 = *((void *)v51 - 1);
              v51 -= 8;
              *((void *)v50 - 1) = v53;
              v50 -= 8;
            }
            while (v51 != v52);
            uint64_t v51 = *(char **)(a1 + 312);
          }
          *(void *)(a1 + 312) = v50;
          *(void *)(a1 + 320) = v41;
          *(void *)(a1 + 328) = &v49[8 * v48];
          if (v51) {
            operator delete(v51);
          }
        }
        else
        {
          *v41++ = v42[3];
        }
        *(void *)(a1 + 320) = v41;
        uint64_t v42 = (void *)*v42;
      }
      while (v42);
    }
  }
}

__n128 sub_1B6625370(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = *(void *)(a2 + 8);
  if (v10)
  {
    uint64_t v11 = objc_msgSend_gpuAddress(*(void **)(v10 + 48), (const char *)a2, a3, a4);
    long long v12 = 0uLL;
  }
  else
  {
    uint64_t v11 = 0;
    long long v12 = *(_OWORD *)(a3 + 16 * **(unsigned int **)(a2 + 16));
  }
  *(void *)a1 = v11;
  *(_OWORD *)(a1 + 8) = v12;
  uint64_t v13 = sub_1B64A01D4(*(void *)a2, a2, a3, a4, a5, a6, a7, a8);
  __n128 result = *(__n128 *)(v13 + 32);
  long long v15 = *(_OWORD *)(v13 + 48);
  long long v17 = *(_OWORD *)v13;
  long long v16 = *(_OWORD *)(v13 + 16);
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v15;
  *(_OWORD *)(a1 + 32) = v17;
  *(_OWORD *)(a1 + 48) = v16;
  return result;
}

void sub_1B66253DC(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  unint64_t v9 = (float32x4_t *)a2[1];
  uint64_t v10 = sub_1B64A01D4(*a2, (uint64_t)a2, a3, a4, a5, a6, a7, a8);
  int v18 = sub_1B6496680((uint64_t)v9, v11, v12, v13, v14, v15, v16, v17);
  switch(v18)
  {
    case 3:
      *(_DWORD *)a1 = 2;
      *(_OWORD *)(a1 + 16) = *(_OWORD *)(v10 + 48);
      float32x4_t v28 = *(float32x4_t *)(v10 + 32);
      int32x4_t v29 = (int32x4_t)vmulq_f32(v28, v28);
      v29.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v29, 2), vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v29.i8, 1))).u32[0];
      float32x2_t v30 = vrsqrte_f32((float32x2_t)v29.u32[0]);
      float32x2_t v31 = vmul_f32(v30, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v30, v30)));
      *(float32x4_t *)(a1 + 32) = vmulq_n_f32(v28, vmul_f32(v31, vrsqrts_f32((float32x2_t)v29.u32[0], vmul_f32(v31, v31))).f32[0]);
      sub_1B64959FC((uint64_t)v9);
      *(void *)(a1 + 64) = v26.i64[0];
      break;
    case 2:
      *(_DWORD *)a1 = 0;
      float32x4_t v32 = *(float32x4_t *)(v10 + 32);
      float32x4_t v27 = vmulq_f32(v32, v32);
      v27.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32((int32x4_t)v27, 2), vadd_f32(*(float32x2_t *)v27.f32, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v27.f32, 1))).u32[0];
      float32x2_t v33 = vrsqrte_f32((float32x2_t)v27.u32[0]);
      float32x2_t v34 = vmul_f32(v33, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v33, v33)));
      *(float32x2_t *)v27.f32 = vmul_f32(v34, vrsqrts_f32((float32x2_t)v27.u32[0], vmul_f32(v34, v34)));
      float32x4_t v26 = vmulq_n_f32(v32, v27.f32[0]);
      *(float32x4_t *)(a1 + 32) = v26;
      break;
    case 1:
      *(_DWORD *)a1 = 1;
      float32x4_t v26 = *(float32x4_t *)(v10 + 48);
      *(float32x4_t *)(a1 + 16) = v26;
      break;
  }
  sub_1B64972C4(v9, v19, v20, v21, v22, v23, v24, v25, v26, v27);
  *(void *)(a1 + 48) = v35;
  *(void *)(a1 + 56) = v36;
  float v43 = sub_1B6495408((uint64_t)v9, v36, v37, v38, v39, v40, v41, v42) * 0.015;
  *(float *)(a1 + 72) = v43;
  sub_1B649597C((uint64_t)v9, 1, 1.0);
  *(_DWORD *)(a1 + 76) = v44;
}

uint64_t sub_1B662552C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v10 = (void *)sub_1B6535608(*(void **)(a2 + 16), 1, a3, a4, a5, a6, a7, a8);
  uint64_t v14 = objc_msgSend_particleHeaderBuffer(v10, v11, v12, v13);
  if (v14)
  {
    uint64_t v18 = (uint64_t)v14;
    uint64_t v19 = objc_msgSend_gpuAddress(v14, v15, v16, v17);
    *a1 = objc_msgSend_particleHeaderBufferOffset(v10, v20, v21, v22) + v19;
    objc_msgSend_addObject_(*(void **)(a3 + 392), v23, v18, v24);
  }
  else
  {
    *a1 = 0;
  }
  uint64_t result = objc_msgSend_particleDataBuffer(v10, v15, v16, v17);
  if (result)
  {
    float32x4_t v28 = (void *)result;
    objc_msgSend_addObject_(*(void **)(a3 + 392), v26, result, v27);
    uint64_t v32 = objc_msgSend_gpuAddress(v28, v29, v30, v31);
    uint64_t result = objc_msgSend_particleDataBufferOffset(v10, v33, v34, v35);
    uint64_t v36 = result + v32;
  }
  else
  {
    uint64_t v36 = 0;
  }
  a1[1] = v36;
  return result;
}

uint64_t sub_1B66255E8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = a2;
  uint64_t v2 = sub_1B63C8A0C((void *)(a1 + 64), &v5);
  if (!v2) {
    operator new();
  }
  uint64_t v3 = v2[3];
  ++*(_DWORD *)(v3 + 8);
  return v3;
}

uint64_t sub_1B66256E4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(result + 44))
  {
    uint64_t v9 = result;
    if (!*(void *)(a2 + 208))
    {
      uint64_t v10 = (void *)sub_1B653D7E8(*(void *)(result + 32), (const char *)0xC0, 0);
      objc_msgSend_setLabel_(v10, v11, @"MaterialBuffer", v12);
      objc_msgSend_addObject_(*(void **)(v9 + 384), v13, (uint64_t)v10, v14);
      *(void *)(a2 + 208) = v10;
    }
    uint64_t v15 = (uint64_t *)(a2 + 48);
    uint64_t v21 = sub_1B64AF43C(*(void *)a2, a2, a3, a4, a5, a6, a7, a8);
    for (uint64_t i = 0; i != 4; ++i)
    {
      uint64_t v23 = sub_1B6475290(v21, asc_1B6F2D8DB[i], 1, v16, v17, v18, v19, v20);
      uint64_t v31 = (_OWORD *)sub_1B6475E50(v23, v24, v25, v26, v27, v28, v29, v30);
      float v40 = sub_1B64763AC(v23, v32, v33, v34, v35, v36, v37, v38);
      uint64_t v41 = *v15;
      if (*v15) {
        objc_msgSend_removeObject_(*(void **)(v9 + 384), v39, v41, v16);
      }
      if (v31)
      {
        *((unsigned char *)v15 - 24) = 0;
        *((_OWORD *)v15 - 1) = *v31;
        *uint64_t v15 = 0;
      }
      else
      {
        *((unsigned char *)v15 - 24) = 1;
        uint64_t v42 = objc_msgSend_textureForMaterialProperty_(*(void **)(v9 + 24), v39, v23, v16);
        *uint64_t v15 = v42;
        if (v42) {
          objc_msgSend_addObject_(*(void **)(v9 + 384), v39, v42, v16);
        }
      }
      *((float *)v15 - 1) = v40;
      v15 += 6;
    }
    uint64_t v46 = objc_msgSend_contents(*(void **)(a2 + 208), v39, v41, v16);
    for (uint64_t j = 0; j != 192; j += 48)
    {
      uint64_t v48 = v46 + j;
      *(_OWORD *)(v48 + 16) = *(_OWORD *)(a2 + j + 32);
      *(unsigned char *)uint64_t v48 = *(unsigned char *)(a2 + j + 24);
      uint64_t result = objc_msgSend_gpuResourceID(*(void **)(a2 + j + 48), v43, v44, v45);
      *(void *)(v48 + 32) = result;
    }
    *(unsigned char *)(a2 + 12) = 0;
  }
  return result;
}

uint64_t sub_1B662585C(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(result + 42))
  {
    uint64_t v9 = result;
    uint64_t v141 = *(void *)a2;
    uint64_t v10 = sub_1B63CCE68(*(void *)a2, a2, a3, a4, a5, a6, a7, a8);
    unsigned int v21 = sub_1B64ABD08(v10, v11, v12, v13, v14, v15, v16, v17);
    uint64_t v22 = *(void **)(a2 + 48);
    if (!v22)
    {
      uint64_t v22 = (void *)sub_1B653D7E8(*(void *)(v9 + 32), (const char *)0x28, 0);
      objc_msgSend_setLabel_(v22, v23, @"MeshBuffer", v24);
      objc_msgSend_addObject_(*(void **)(v9 + 384), v25, (uint64_t)v22, v26);
      *(void *)(a2 + 48) = v22;
    }
    if (!*(void *)(a2 + 56))
    {
      uint64_t v27 = (void *)sub_1B653D7E8(*(void *)(v9 + 32), (const char *)(24 * v21), 0);
      objc_msgSend_setLabel_(v27, v28, @"MeshElementBuffer", v29);
      objc_msgSend_addObject_(*(void **)(v9 + 384), v30, (uint64_t)v27, v31);
      *(void *)(a2 + 56) = v27;
      uint64_t v22 = *(void **)(a2 + 48);
    }
    uint64_t v32 = objc_msgSend_contents(v22, v18, v19, v20);
    if (sub_1B63DF24C(v10, v33, v34, v35, v36, v37, v38, v39)) {
      uint64_t v10 = sub_1B63DF298(v10, v40, v41, v42, v43, v44, v45, v46);
    }
    uint64_t v47 = sub_1B64AC5F8(v10, 0, 0, 1, v43, v44, v45, v46);
    if (v47)
    {
      uint64_t v54 = (uint64_t)v47;
      uint64_t v55 = *(void *)(a2 + 24);
      if (v55) {
        objc_msgSend_removeObject_(*(void **)(v9 + 384), v48, v55, v49);
      }
      uint64_t v56 = sub_1B653BEF8(*(void *)(v9 + 32), v54);
      *(void *)(a2 + 24) = v56;
      *(void *)uint64_t v32 = objc_msgSend_gpuAddress(v56, v57, v58, v59);
      uint64_t v62 = *(void *)(a2 + 24);
      if (v62) {
        objc_msgSend_addObject_(*(void **)(v9 + 384), v60, v62, v61);
      }
    }
    uint64_t v63 = sub_1B64AC5F8(v10, 1, 0, 1, v50, v51, v52, v53);
    if (v63)
    {
      uint64_t v70 = (uint64_t)v63;
      uint64_t v71 = *(void *)(a2 + 32);
      if (v71) {
        objc_msgSend_removeObject_(*(void **)(v9 + 384), v64, v71, v65);
      }
      float32x4_t v72 = sub_1B653BEF8(*(void *)(v9 + 32), v70);
      *(void *)(a2 + 32) = v72;
      *(void *)(v32 + 8) = objc_msgSend_gpuAddress(v72, v73, v74, v75);
      uint64_t v78 = *(void *)(a2 + 32);
      if (v78) {
        objc_msgSend_addObject_(*(void **)(v9 + 384), v76, v78, v77);
      }
    }
    float32x4_t v79 = sub_1B64AC5F8(v10, 3, 0, 1, v66, v67, v68, v69);
    if (v79)
    {
      uint64_t v87 = (uint64_t)v79;
      uint64_t v88 = *(void *)(a2 + 40);
      if (v88) {
        objc_msgSend_removeObject_(*(void **)(v9 + 384), v80, v88, v82);
      }
      uint64_t v89 = sub_1B653BEF8(*(void *)(v9 + 32), v87);
      *(void *)(a2 + 40) = v89;
      *(void *)(v32 + 16) = objc_msgSend_gpuAddress(v89, v90, v91, v92);
      uint64_t v81 = *(void *)(a2 + 40);
      if (v81) {
        objc_msgSend_addObject_(*(void **)(v9 + 384), v80, v81, v82);
      }
    }
    uint64_t v93 = *(void *)(a2 + 40);
    *(unsigned char *)(v32 + 24) = *(void *)(a2 + 32) != 0;
    *(unsigned char *)(v32 + 25) = v93 != 0;
    uint64_t v94 = v21;
    if (v21)
    {
      CFIndex v95 = 0;
      uint64_t v96 = 8;
      do
      {
        uint64_t v97 = sub_1B64ABD78(v10, v95, 1, v82, v83, v84, v85, v86);
        simd_float4 v98 = sub_1B653C040(*(void *)(v9 + 32), (uint64_t)v97);
        simd_float4 v99 = *(BOOL **)(*(void *)(a2 + 64) + 8 * v95);
        uint64_t v103 = objc_msgSend_contents(*(void **)(a2 + 56), v100, v101, v102);
        BOOL *v99 = sub_1B659C6F8((uint64_t)v98) != 1;
        uint64_t v106 = *((void *)v99 + 1);
        if (v106) {
          objc_msgSend_removeObject_(*(void **)(v9 + 384), v104, v106, v105);
        }
        double v107 = (void *)sub_1B659CBE8((uint64_t)v98);
        uint64_t v111 = objc_msgSend_buffer(v107, v108, v109, v110);
        *((void *)v99 + 1) = v111;
        if (v111) {
          objc_msgSend_addObject_(*(void **)(v9 + 384), v112, v111, v114);
        }
        unsigned int v119 = sub_1B63CCEC4(v141, (uint64_t)v112, v113, v114, v115, v116, v117, v118);
        CFArrayRef v126 = sub_1B63CCF34(v141, (uint64_t)fmin((double)(v119 - 1), (double)v95), v120, v121, v122, v123, v124, v125);
        uint64_t v127 = sub_1B66255E8(v9, (uint64_t)v126);
        *((void *)v99 + 2) = v126;
        *((void *)v99 + 3) = v127;
        sub_1B66256E4(v9, v127, v128, v129, v130, v131, v132, v133);
        *(_DWORD *)(v103 + v96 - 8) = *v99;
        *(void *)(v103 + v96) = objc_msgSend_gpuAddress(*((void **)v99 + 1), v134, v135, v136);
        *(void *)(v103 + v96 + 8) = objc_msgSend_gpuAddress(*(void **)(*((void *)v99 + 3) + 208), v137, v138, v139);
        ++v95;
        v96 += 24;
      }
      while (v94 != v95);
    }
    uint64_t result = objc_msgSend_gpuAddress(*(void **)(a2 + 56), v80, v81, v82, v32);
    *(void *)(v140 + 32) = result;
    *(unsigned char *)(a2 + 16) = 0;
  }
  return result;
}

void sub_1B6625BAC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a1 + 272) - *(void *)(a1 + 264);
  if (v4)
  {
    uint64_t v6 = 0;
    unint64_t v7 = v4 >> 3;
    unsigned int v8 = 1;
    do
    {
      uint64_t v9 = *(void *)(*(void *)(a1 + 264) + 8 * v6);
      uint64_t v10 = objc_msgSend_contents(*(void **)(a1 + 368), a2, a3, a4) + 96 * v6;
      uint64_t v14 = objc_msgSend_contents(*(void **)(a1 + 376), v11, v12, v13);
      sub_1B6625370(v10, v9, v14, v15, v16, v17, v18, v19);
      uint64_t v6 = v8;
    }
    while (v7 > v8++);
  }
}

void sub_1B6625C34(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (*(_WORD *)(a1 + 42))
  {
    uint64_t v5 = *(void **)(a1 + 368);
    if (v5)
    {
      objc_msgSend_removeObject_(*(void **)(a1 + 384), a2, (uint64_t)v5, a4);
    }
    *(void *)(a1 + 368) = 0;
    uint64_t v6 = *(void *)(a1 + 272) - *(void *)(a1 + 264);
    if (v6)
    {
      unint64_t v7 = (void *)sub_1B653D7E8(*(void *)(a1 + 32), (const char *)(32 * ((v6 >> 2) + (v6 >> 3))), 0);
      objc_msgSend_setLabel_(v7, v8, @"InstanceBuffer", v9);
      objc_msgSend_addObject_(*(void **)(a1 + 384), v10, (uint64_t)v7, v11);
      *(void *)(a1 + 368) = v7;
      sub_1B6625BAC(a1, v12, v13, v14);
    }
  }
}

uint64_t sub_1B6625CDC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(result + 42))
  {
    uint64_t v8 = result;
    uint64_t v10 = *(void *)(result + 288);
    uint64_t v9 = *(void *)(result + 296);
    if (v9 != v10)
    {
      unint64_t v11 = 0;
      unsigned int v12 = 1;
      do
      {
        uint64_t v13 = *(void *)(v10 + 8 * v11);
        if (*(unsigned char *)(v13 + 16))
        {
          uint64_t result = sub_1B662585C(v8, v13, a3, a4, a5, a6, a7, a8);
          uint64_t v10 = *(void *)(v8 + 288);
          uint64_t v9 = *(void *)(v8 + 296);
        }
        unint64_t v11 = v12++;
      }
      while (v11 < (v9 - v10) >> 3);
    }
  }
  return result;
}

uint64_t sub_1B6625D44(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(result + 44))
  {
    uint64_t v8 = result;
    for (uint64_t i = *(void **)(result + 80); i; uint64_t i = (void *)*i)
    {
      uint64_t v10 = i[3];
      if (*(unsigned char *)(v10 + 12)) {
        uint64_t result = sub_1B66256E4(v8, v10, a3, a4, a5, a6, a7, a8);
      }
    }
  }
  return result;
}

void sub_1B6625D90(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  if (*(_WORD *)(a1 + 46))
  {
    uint64_t v5 = *(void **)(a1 + 360);
    if (v5)
    {
      objc_msgSend_removeObject_(*(void **)(a1 + 384), a2, (uint64_t)v5, a4);
    }
    *(void *)(a1 + 360) = 0;
    uint64_t v6 = *(void *)(a1 + 320) - *(void *)(a1 + 312);
    if (v6)
    {
      unint64_t v7 = (void *)sub_1B653D7E8(*(void *)(a1 + 32), (const char *)(16 * ((v6 >> 1) + (v6 >> 3))), 0);
      objc_msgSend_setLabel_(v7, v8, @"LightBuffer", v9);
      objc_msgSend_addObject_(*(void **)(a1 + 384), v10, (uint64_t)v7, v11);
      *(void *)(a1 + 360) = v7;
      uint64_t v15 = *(void *)(a1 + 312);
      if (*(void *)(a1 + 320) != v15)
      {
        unint64_t v16 = 0;
        unsigned int v17 = 1;
        do
        {
          uint64_t v18 = *(uint64_t **)(v15 + 8 * v16);
          uint64_t v19 = objc_msgSend_contents(*(void **)(a1 + 360), v12, v13, v14);
          sub_1B66253DC(v19 + 80 * v16, v18, v20, v21, v22, v23, v24, v25);
          unint64_t v16 = v17;
          uint64_t v15 = *(void *)(a1 + 312);
          ++v17;
        }
        while (v16 < (*(void *)(a1 + 320) - v15) >> 3);
      }
    }
  }
}

uint64_t sub_1B6625E70(uint64_t result, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(result + 344) - *(void *)(result + 336);
  if (v4)
  {
    uint64_t v5 = result;
    unint64_t v6 = v4 >> 3;
    uint64_t v12 = objc_msgSend_contents(*(void **)(result + 376), a2, a3, a4);
    uint64_t v13 = 0;
    unsigned int v14 = 1;
    do
    {
      uint64_t result = sub_1B662552C((void *)(v12 + 16 * v13), *(void *)(*(void *)(v5 + 336) + 8 * v13), v5, v7, v8, v9, v10, v11);
      uint64_t v13 = v14;
    }
    while (v6 > v14++);
  }
  return result;
}

void sub_1B6625EE0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = *(void **)(a1 + 376);
  if (v5)
  {
    objc_msgSend_removeObject_(*(void **)(a1 + 384), a2, (uint64_t)v5, a4);
  }
  *(void *)(a1 + 376) = 0;
  uint64_t v6 = *(void *)(a1 + 344) - *(void *)(a1 + 336);
  if (v6)
  {
    uint64_t v7 = (void *)sub_1B653D7E8(*(void *)(a1 + 32), (const char *)(2 * v6), 0);
    objc_msgSend_setLabel_(v7, v8, @"EmitterBuffer", v9);
    objc_msgSend_addObject_(*(void **)(a1 + 384), v10, (uint64_t)v7, v11);
    *(void *)(a1 + 376) = v7;
    sub_1B6625E70(a1, v12, v13, v14);
  }
}

void sub_1B6625F78(uint64_t a1, uint64_t a2)
{
  uint64_t v225 = *MEMORY[0x1E4F143B8];
  if (*(_WORD *)(a1 + 40))
  {
    float32x4_t v214 = &v212;
    unint64_t v2 = *(void *)(a1 + 296) - *(void *)(a1 + 288);
    uint64_t v4 = *(void *)(a1 + 336);
    uint64_t v3 = *(void *)(a1 + 344);
    uint64_t v221 = a1;
    unint64_t v213 = v3 - v4;
    unint64_t v215 = (unint64_t)(v3 - v4) >> 3;
    uint64_t v217 = v215 + (v2 >> 3);
    MEMORY[0x1F4188790](a1, a2);
    uint64_t v14 = (uint64_t *)((char *)&v212 - v13);
    unint64_t v15 = 0x1E4F35000;
    unsigned __int32 v219 = (uint64_t *)((char *)&v212 - v13);
    uint64_t v216 = v16;
    if (v16)
    {
      uint64_t v17 = 0;
      uint64_t v218 = (v12 >> 3);
      uint64_t v18 = v221;
      do
      {
        uint64_t v19 = *(void *)(v18 + 288);
        uint64_t v220 = v17;
        uint64_t v20 = sub_1B63CDE70(**(void **)(v19 + 8 * v17), v5, v6, v7, v8, v9, v10, v11);
        uint64_t v25 = sub_1B64AC5F8(v20, 0, 0, 1, v21, v22, v23, v24);
        uint64_t v26 = sub_1B653BEF8(*(void *)(v18 + 32), (uint64_t)v25);
        uint64_t v34 = sub_1B64ABD08(v20, v27, v28, v29, v30, v31, v32, v33);
        uint64_t v44 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], v35, v34, v36);
        if (v34)
        {
          for (CFIndex i = 0; i != v34; ++i)
          {
            uint64_t v46 = sub_1B64ABD78(v20, i, 1, v39, v40, v41, v42, v43);
            uint64_t v47 = sub_1B653C040(*(void *)(v18 + 32), (uint64_t)v46);
            uint64_t v51 = objc_msgSend_descriptor(MEMORY[0x1E4F351B0], v48, v49, v50);
            objc_msgSend_setVertexBuffer_(v51, v52, (uint64_t)v26, v53);
            objc_msgSend_setVertexBufferOffset_(v51, v54, 0, v55);
            uint64_t v63 = sub_1B641E1AC((uint64_t)v25, v56, v57, v58, v59, v60, v61, v62);
            objc_msgSend_setVertexStride_(v51, v64, v63, v65);
            uint64_t v66 = (void *)sub_1B659CBE8((uint64_t)v47);
            uint64_t v70 = objc_msgSend_buffer(v66, v67, v68, v69);
            objc_msgSend_setIndexBuffer_(v51, v71, v70, v72);
            float32x2_t v73 = (void *)sub_1B659CBE8((uint64_t)v47);
            uint64_t v77 = objc_msgSend_offset(v73, v74, v75, v76);
            objc_msgSend_setIndexBufferOffset_(v51, v78, v77, v79);
            uint64_t v80 = sub_1B659C6F8((uint64_t)v47);
            objc_msgSend_setIndexType_(v51, v81, v80, v82);
            uint64_t v83 = sub_1B659CA94((uint64_t)v47);
            objc_msgSend_setTriangleCount_(v51, v84, v83, v85);
            objc_msgSend_addObject_(v44, v86, (uint64_t)v51, v87);
          }
        }
        unint64_t v15 = 0x1E4F35000uLL;
        uint64_t v88 = objc_msgSend_descriptor(MEMORY[0x1E4F352C0], v37, v38, v39);
        objc_msgSend_setGeometryDescriptors_(v88, v89, (uint64_t)v44, v90);
        uint64_t v14 = v219;
        uint64_t v91 = v220;
        v219[v220] = (uint64_t)v88;
        uint64_t v17 = v91 + 1;
      }
      while (v17 != v218);
    }
    uint64_t v92 = v221;
    uint64_t v93 = sub_1B644558C(*(void *)(v221 + 16), v5, v6, v7, v8, v9, v10, v11);
    uint64_t v101 = sub_1B64B20C4(v93, v94, v95, v96, v97, v98, v99, v100);
    int v109 = v216;
    if (v215)
    {
      uint64_t v110 = v101;
      uint64_t v111 = 0;
      uint64_t v112 = (v213 >> 3);
      do
      {
        uint64_t v113 = (void *)sub_1B6535608(*(void **)(*(void *)(*(void *)(v92 + 336) + 8 * v111) + 16), 1, v103, v104, v105, v106, v107, v108);
        uint64_t v117 = objc_msgSend_objectID(v113, v114, v115, v116);
        uint64_t v120 = sub_1B6511940(v110, v117, v118, v119);
        uint64_t v124 = objc_msgSend_descriptor(*(void **)(v15 + 704), v121, v122, v123);
        objc_msgSend_setGeometryDescriptors_(v124, v125, v120, v126);
        v14[(v109 + v111++)] = (uint64_t)v124;
      }
      while (v112 != v111);
    }
    uint64_t v127 = v217;
    uint64_t v128 = 8 * v217;
    if (v217)
    {
      unint64_t v129 = 0;
      unint64_t v130 = 0;
      uint64_t v131 = 8 * v217;
      do
      {
        uint64_t v132 = *v14;
        uint64_t v133 = v221;
        float32x4_t v134 = objc_msgSend_device(*(void **)(v221 + 24), v102, v103, v104);
        uint64_t v137 = objc_msgSend_heapAccelerationStructureSizeAndAlignWithDescriptor_(v134, v135, v132, v136);
        uint64_t v139 = v138;
        uint64_t v222 = 0;
        unint64_t v223 = 0;
        uint64_t v224 = 0;
        float v142 = objc_msgSend_device(*(void **)(v133 + 24), v138, v140, v141);
        if (v142)
        {
          objc_msgSend_accelerationStructureSizesWithDescriptor_(v142, v102, v132, v104);
          unint64_t v143 = v223;
        }
        else
        {
          unint64_t v143 = 0;
        }
        v129 += (unint64_t)&v139[v137];
        if (v143 > v130) {
          unint64_t v130 = v143;
        }
        ++v14;
        v131 -= 8;
      }
      while (v131);
    }
    else
    {
      unint64_t v130 = 0;
      unint64_t v129 = 0;
    }
    id v144 = objc_alloc_init(MEMORY[0x1E4F35290]);
    int32x4_t v147 = v144;
    if (v129 <= 1) {
      objc_msgSend_setSize_(v144, v145, 1, v146);
    }
    else {
      objc_msgSend_setSize_(v144, v145, v129, v146);
    }
    uint64_t v151 = *(void *)(v221 + 408);
    unint64_t v153 = *(void *)(v221 + 464);
    unint64_t v152 = *(void *)(v221 + 472);
    if (v153 >= v152)
    {
      uint64_t v155 = *(void *)(v221 + 456);
      uint64_t v156 = (uint64_t)(v153 - v155) >> 4;
      unint64_t v157 = v156 + 1;
      if ((unint64_t)(v156 + 1) >> 60) {
        abort();
      }
      uint64_t v158 = v152 - v155;
      if (v158 >> 3 > v157) {
        unint64_t v157 = v158 >> 3;
      }
      if ((unint64_t)v158 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v148 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v148 = v157;
      }
      if (v148) {
        int32x4_t v159 = (char *)sub_1B6427C8C(v221 + 472, v148);
      }
      else {
        int32x4_t v159 = 0;
      }
      float32x4_t v160 = &v159[16 * v156];
      int32x4_t v161 = &v159[16 * v148];
      *(void *)float32x4_t v160 = v151;
      *((_DWORD *)v160 + 2) = 0;
      float v154 = v160 + 16;
      float32x2_t v163 = *(_DWORD **)(v221 + 456);
      float32x4_t v162 = *(_DWORD **)(v221 + 464);
      if (v162 == v163)
      {
        float32x2_t v166 = (void *)v221;
      }
      else
      {
        do
        {
          uint64_t v164 = *((void *)v162 - 2);
          v162 -= 4;
          int v165 = v162[2];
          *((void *)v160 - 2) = v164;
          v160 -= 16;
          *((_DWORD *)v160 + 2) = v165;
        }
        while (v162 != v163);
        float32x2_t v166 = (void *)v221;
        float32x4_t v162 = *(_DWORD **)(v221 + 456);
      }
      v166[57] = v160;
      v166[58] = v154;
      v166[59] = v161;
      if (v162) {
        operator delete(v162);
      }
    }
    else
    {
      *(void *)unint64_t v153 = v151;
      *(_DWORD *)(v153 + 8) = 0;
      float v154 = (char *)(v153 + 16);
    }
    BOOL v167 = v127 == 0;
    float32x2_t v169 = (void **)(v221 + 24);
    float32x2_t v168 = *(void **)(v221 + 24);
    *(void *)(v221 + 464) = v154;
    float32x4_t v170 = objc_msgSend_device(v168, (const char *)v148, v149, v150);
    uint64_t v173 = objc_msgSend_newHeapWithDescriptor_(v170, v171, (uint64_t)v147, v172);
    *(void *)(v221 + 408) = v173;
    float32x4_t v176 = objc_msgSend_arrayWithCapacity_(MEMORY[0x1E4F1CA48], v174, v127, v175);
    if (v130 <= 1) {
      uint64_t v177 = 1;
    }
    else {
      uint64_t v177 = v130;
    }
    float v178 = (void *)sub_1B653D7E8(*(void *)(v221 + 32), (const char *)v177, 32);
    float32x4_t v182 = objc_msgSend_commandQueue(*v169, v179, v180, v181);
    unsigned __int32 v186 = objc_msgSend_commandBuffer(v182, v183, v184, v185);
    int32x4_t v193 = objc_msgSend_accelerationStructureCommandEncoder(v186, v187, v188, v189);
    int32x4_t v194 = v219;
    if (!v167)
    {
      do
      {
        int32x4_t v195 = v194;
        uint64_t v196 = *v194;
        float32x4_t v197 = objc_msgSend_device(*(void **)(v221 + 24), v190, v191, v192);
        uint64_t v200 = objc_msgSend_heapAccelerationStructureSizeAndAlignWithDescriptor_(v197, v198, v196, v199);
        uint64_t v203 = objc_msgSend_newAccelerationStructureWithSize_(*(void **)(v221 + 408), v201, v200, v202);
        objc_msgSend_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset_(v193, v204, v203, v196, v178, 0);
        objc_msgSend_addObject_(v176, v205, v203, v206);
        int32x4_t v194 = v195 + 1;
        v128 -= 8;
      }
      while (v128);
    }
    objc_msgSend_endEncoding(v193, v190, v191, v192);
    objc_msgSend_encodeSignalEvent_value_(v186, v207, *(void *)(v221 + 440), 1);
    objc_msgSend_commit(v186, v208, v209, v210);

    id v211 = v176;
    *(void *)(v221 + 416) = v211;
  }
}

void sub_1B66264F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_WORD *)(a1 + 40))
  {
    uint64_t v9 = (void *)sub_1B6445900(*(void *)(a1 + 16), a2, a3, a4, a5, a6, a7, a8);
    uint64_t v13 = objc_msgSend_descriptor(MEMORY[0x1E4F352A0], v10, v11, v12);
    objc_msgSend_setInstancedAccelerationStructures_(v13, v14, *(void *)(a1 + 416), v15);
    objc_msgSend_setInstanceCount_(v13, v16, (uint64_t)(*(void *)(a1 + 272) - *(void *)(a1 + 264)) >> 3, v17);
    uint64_t v18 = *(void *)(a1 + 264);
    if ((unint64_t)(8 * (*(void *)(a1 + 272) - v18)) <= 1) {
      uint64_t v19 = 1;
    }
    else {
      uint64_t v19 = 8 * (*(void *)(a1 + 272) - v18);
    }
    uint64_t v20 = (void *)sub_1B653D7E8(*(void *)(a1 + 32), (const char *)v19, 0);
    uint64_t v24 = objc_msgSend_contents(v20, v21, v22, v23);
    uint64_t v32 = *(void *)(a1 + 264);
    if (*(void *)(a1 + 272) != v32)
    {
      uint64_t v33 = v24;
      unint64_t v34 = 0;
      unsigned int v35 = 1;
      long long v82 = xmmword_1B6E4F320;
      long long v81 = xmmword_1B6E4F370;
      do
      {
        uint64_t v36 = *(void *)(v32 + 8 * v34);
        uint64_t v37 = *(void *)(v36 + 8);
        if (v37)
        {
          LODWORD(v38) = *(_DWORD *)(v37 + 8);
          LODWORD(v37) = 4;
        }
        else
        {
          uint64_t v38 = **(unsigned int **)(v36 + 16) + ((uint64_t)(*(void *)(a1 + 296) - *(void *)(a1 + 288)) >> 3);
        }
        unint64_t v39 = v33 + (v34 << 6);
        *(_DWORD *)(v39 + 60) = v38;
        *(void *)(v39 + 52) = 255;
        *(_DWORD *)(v39 + 48) = v37;
        if (*(_DWORD *)(v36 + 24))
        {
          int v40 = 0;
          float v41 = 1.0;
          int v42 = 0;
          long long v43 = xmmword_1B6E4F370;
          long long v44 = xmmword_1B6E4F320;
          int v45 = 0;
        }
        else
        {
          uint64_t v46 = sub_1B64A01D4(*(void *)v36, (uint64_t)v25, v26, v27, v28, v29, v30, v31);
          float v41 = *(float *)v46;
          *(void *)&long long v43 = *(void *)(v46 + 4);
          int v40 = *(_DWORD *)(v46 + 24);
          int v42 = *(_DWORD *)(v46 + 32);
          *(void *)&long long v44 = *(void *)(v46 + 36);
          int v45 = *(void *)(v46 + 56);
          *((void *)&v43 + 1) = *(void *)(v46 + 16);
          *((void *)&v44 + 1) = *(void *)(v46 + 48);
        }
        *(float *)unint64_t v39 = v41;
        *(_OWORD *)(v39 + 4) = v43;
        *(_DWORD *)(v39 + 20) = v40;
        *(_DWORD *)(v39 + 24) = v42;
        *(_OWORD *)(v39 + 28) = v44;
        *(_DWORD *)(v39 + 44) = v45;
        unint64_t v34 = v35;
        uint64_t v32 = *(void *)(a1 + 264);
        ++v35;
      }
      while (v34 < (*(void *)(a1 + 272) - v32) >> 3);
    }
    objc_msgSend_setInstanceDescriptorBuffer_(v13, v25, (uint64_t)v20, v27, v81, v82);
    uint64_t v50 = objc_msgSend_commandQueue(v9, v47, v48, v49);
    uint64_t v54 = objc_msgSend_commandBuffer(v50, v51, v52, v53);
    uint64_t v58 = v54;
    if (*(unsigned char *)(a1 + 450)) {
      objc_msgSend_encodeWaitForEvent_value_(v54, v55, *(void *)(a1 + 440), 1);
    }
    uint64_t v59 = objc_msgSend_device(v9, v55, v56, v57);
    if (v59) {
      objc_msgSend_accelerationStructureSizesWithDescriptor_(v59, v60, (uint64_t)v13, v61);
    }
    uint64_t v62 = (void *)sub_1B653D7E8(*(void *)(a1 + 32), 0, 32);

    uint64_t v66 = objc_msgSend_device(v9, v63, v64, v65);
    *(void *)(a1 + 424) = objc_msgSend_newAccelerationStructureWithSize_(v66, v67, 0, v68);
    uint64_t v72 = objc_msgSend_accelerationStructureCommandEncoder(v58, v69, v70, v71);
    objc_msgSend_buildAccelerationStructure_descriptor_scratchBuffer_scratchBufferOffset_(v72, v73, *(void *)(a1 + 424), (uint64_t)v13, v62, 0);
    objc_msgSend_endEncoding(v72, v74, v75, v76);
    objc_msgSend_encodeSignalEvent_value_(v58, v77, *(void *)(a1 + 440), 2);
    objc_msgSend_commit(v58, v78, v79, v80);
  }
}

uint64_t sub_1B662676C(uint64_t result, uint64_t a2)
{
  if (*(unsigned char *)(result + 48))
  {
    uint64_t v3 = result;
    sub_1B6624458(result);
    uint64_t v11 = sub_1B64B1FBC(a2, v4, v5, v6, v7, v8, v9, v10);
    uint64_t result = sub_1B6624F54(v3, v11, v12, v13, v14, v15, v16, v17);
    *(_DWORD *)(v3 + 449) = 16843009;
  }
  return result;
}

uint64_t sub_1B66267BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(a1 + 48)) {
    return sub_1B6624B20(a1, a2, a3, a4, a5, a6, a7, a8);
  }
  return a1;
}

uint64_t sub_1B66267CC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v13 = a2;
  if (*(unsigned char *)(result + 48))
  {
    uint64_t v9 = result;
    uint64_t result = sub_1B64A31E8(a2, a2, a3, a4, a5, a6, a7, a8);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_1B64A4DAC(a2);
      if ((int)result <= 0)
      {
        if (sub_1B63C8A0C((void *)(v9 + 144), &v13)) {
          *(unsigned char *)(v9 + 449) = 1;
        }
        if (sub_1B63C8A0C((void *)(v9 + 184), &v13)) {
          *(unsigned char *)(v9 + 451) = 1;
        }
        if (sub_1B63C8A0C((void *)(v9 + 224), &v13)) {
          *(unsigned char *)(v9 + 452) = 1;
        }
        uint64_t result = sub_1B64A180C(v13);
        if (result)
        {
          int v10 = result;
          for (unsigned int i = 0; i != v10; ++i)
          {
            uint64_t v12 = sub_1B64A1A44(v13, i);
            uint64_t result = sub_1B66267CC(v9, v12);
          }
        }
      }
    }
  }
  return result;
}

uint64_t sub_1B66268A8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned char *)(result + 48))
  {
    uint64_t v8 = result;
    uint64_t result = sub_1B649F5F4(a2, a2, a3, a4, a5, a6, a7, a8);
    uint64_t v45 = result;
    if (result)
    {
      uint64_t v16 = sub_1B63CCE68(result, v9, v10, v11, v12, v13, v14, v15);
      uint64_t result = (uint64_t)sub_1B63C8A0C((void *)(v8 + 104), &v45);
      if (result)
      {
        uint64_t v24 = *(void *)(result + 24);
        uint64_t result = (uint64_t)sub_1B64ABD08(v16, v17, v18, v19, v20, v21, v22, v23);
        uint64_t v32 = result;
        if (result)
        {
          uint64_t v33 = 0;
          do
          {
            unsigned int v34 = sub_1B63CCEC4(v45, v25, v26, v27, v28, v29, v30, v31);
            CFArrayRef v41 = sub_1B63CCF34(v45, (uint64_t)fmin((double)(v34 - 1), (double)v33), v35, v36, v37, v38, v39, v40);
            uint64_t v42 = (uint64_t)v41;
            uint64_t v43 = *(void *)(*(void *)(*(void *)(v24 + 64) + 8 * v33) + 16);
            if (v41 == (const __CFArray *)v43)
            {
              CFArrayRef v46 = v41;
              uint64_t result = (uint64_t)sub_1B63C8A0C((void *)(v8 + 64), &v46);
              *(unsigned char *)(*(void *)(result + 24) + 12) = 1;
            }
            else
            {
              sub_1B662471C((uint64_t *)v8, v43, 1);
              uint64_t result = sub_1B66255E8(v8, v42);
              uint64_t v44 = *(void *)(v24 + 64);
              *(void *)(*(void *)(v44 + 8 * v33) + 24) = result;
              *(void *)(*(void *)(v44 + 8 * v33) + 16) = v42;
            }
            ++v33;
          }
          while (v32 != v33);
        }
        *(unsigned char *)(v8 + 453) = 1;
      }
    }
  }
  return result;
}

uint64_t sub_1B66269D0(uint64_t result, uint64_t a2)
{
  uint64_t v11 = a2;
  if (*(unsigned char *)(result + 48))
  {
    uint64_t v2 = result;
    uint64_t v3 = (void *)(result + 144);
    uint64_t v4 = sub_1B63C8A0C((void *)(result + 144), &v11);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = v4[3];
      uint64_t v7 = *(uint64_t **)(v6 + 8);
      if (v7) {
        sub_1B66245BC((uint64_t *)v2, *v7, 1);
      }
      MEMORY[0x1BA9B6D80](v6, 0x1020C4055CCDE27);
      sub_1B63C8AF8(v3, v5);
      *(_WORD *)(v2 + 449) = 257;
    }
    uint64_t v8 = sub_1B63C8A0C((void *)(v2 + 184), &v11);
    if (v8)
    {
      uint64_t v9 = v8;
      uint64_t v10 = v8[3];
      if (v10) {
        MEMORY[0x1BA9B6D80](v10, 0x20C40A4A59CD2);
      }
      sub_1B63C8AF8((void *)(v2 + 184), v9);
      *(unsigned char *)(v2 + 451) = 1;
    }
    uint64_t result = (uint64_t)sub_1B63C8A0C((void *)(v2 + 224), &v11);
    if (result)
    {
      uint64_t result = sub_1B63C8AF8((void *)(v2 + 224), (uint64_t *)result);
      *(unsigned char *)(v2 + 452) = 1;
      *(unsigned char *)(v2 + 449) = 1;
    }
  }
  return result;
}

uint64_t sub_1B6626AE4(uint64_t result)
{
  if (*(unsigned char *)(result + 48)) {
    *(unsigned char *)(result + 451) = 1;
  }
  return result;
}

double sub_1B6626AF8(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 16) = a2;
  double result = sub_1B6447728(a2);
  if (*(double *)(a1 + 56) != result)
  {
    if (*(void *)(a1 + 16) != a2) {
      *(_DWORD *)(a1 + 449) = 16843009;
    }
    if (*(void *)(a1 + 336) != *(void *)(a1 + 344))
    {
      *(unsigned char *)(a1 + 452) = 1;
      *(unsigned char *)(a1 + 449) = 1;
    }
    uint64_t v12 = (void *)sub_1B6445900(a2, v4, v5, v6, v7, v8, v9, v10);
    *(void *)(a1 + 24) = v12;
    *(void *)(a1 + 32) = objc_msgSend_resourceManager(v12, v13, v14, v15);
    sub_1B66249EC(a1, v16, v17, v18);
    if (*(unsigned char *)(a1 + 448))
    {
      uint64_t v26 = sub_1B644558C(*(void *)(a1 + 16), (uint64_t)v19, v20, v21, v22, v23, v24, v25);
      sub_1B662676C(a1, v26);
    }
    if (*(unsigned char *)(a1 + 449)
      || *(unsigned char *)(a1 + 450)
      || *(unsigned char *)(a1 + 451)
      || *(unsigned char *)(a1 + 452)
      || *(unsigned char *)(a1 + 453))
    {
      *(unsigned char *)(a1 + 454) = 1;
    }
    else
    {
      uint64_t v49 = *(void *)(a1 + 336);
      uint64_t v50 = *(void *)(a1 + 344);
      *(unsigned char *)(a1 + 454) = v49 != v50;
      if (v49 == v50) {
        goto LABEL_26;
      }
    }
    sub_1B6624FBC(a1);

    uint64_t v30 = objc_msgSend_device(*(void **)(a1 + 24), v27, v28, v29);
    *(void *)(a1 + 440) = objc_msgSend_newEvent(v30, v31, v32, v33);
    if (*(unsigned char *)(a1 + 451)) {
      sub_1B6625D90(a1, v19, v20, v21);
    }
    if (*(unsigned char *)(a1 + 452)) {
      sub_1B6625EE0(a1, v19, v20, v21);
    }
    if (*(unsigned char *)(a1 + 450) && (sub_1B6625CDC(a1, (uint64_t)v19, v20, v21, v34, v35, v36, v37), *(unsigned char *)(a1 + 450))
      || *(unsigned char *)(a1 + 452))
    {
      sub_1B6625F78(a1, (uint64_t)v19);
    }
    if (*(unsigned char *)(a1 + 449))
    {
      sub_1B6625C34(a1, v19, v20, v21);
      sub_1B66264F4(a1, v38, v39, v40, v41, v42, v43, v44);
    }
    if (*(unsigned char *)(a1 + 453)) {
      sub_1B6625D44(a1, (uint64_t)v19, v20, v21, v34, v35, v36, v37);
    }
LABEL_26:
    uint64_t v45 = *(void *)(a1 + 400);
    if (v45) {
      MEMORY[0x1BA9B6D60](v45, 0x80C80B8603338);
    }
    objc_msgSend_count(*(void **)(a1 + 384), v19, v20, v21);
    objc_msgSend_count(*(void **)(a1 + 392), v46, v47, v48);
    operator new[]();
  }
  return result;
}

uint64_t sub_1B6626E5C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 454);
}

void sub_1B6626E64(uint64_t a1)
{
  double v4 = sub_1B6447728(*(void *)(a1 + 16));
  if (*(double *)(a1 + 56) != v4)
  {
    sub_1B6624A5C(a1, (const char *)3, v2, v3);
    *(double *)(a1 + 56) = v4;
  }
}

uint64_t sub_1B6626EB4(uint64_t a1)
{
  return *(void *)(a1 + 408);
}

uint64_t sub_1B6626EBC(uint64_t a1)
{
  return *(void *)(a1 + 424);
}

uint64_t sub_1B6626EC4(uint64_t a1)
{
  return *(void *)(a1 + 368);
}

uint64_t sub_1B6626ECC(uint64_t a1)
{
  return *(void *)(a1 + 360);
}

uint64_t sub_1B6626ED4(uint64_t a1)
{
  return *(void *)(a1 + 400);
}

uint64_t sub_1B6626EDC(uint64_t a1)
{
  return *(void *)(a1 + 432);
}

void *sub_1B6626EE4(uint64_t a1, void *a2)
{
  double v4 = objc_opt_new();
  uint64_t v8 = objc_msgSend_count(*(void **)(a1 + 432), v5, v6, v7);
  objc_msgSend_setFunctionCount_(v4, v9, v8, v10);
  uint64_t v13 = objc_msgSend_newIntersectionFunctionTableWithDescriptor_(a2, v11, (uint64_t)v4, v12);

  if (objc_msgSend_count(*(void **)(a1 + 432), v14, v15, v16))
  {
    unint64_t v19 = 0;
    do
    {
      uint64_t v20 = objc_msgSend_objectAtIndexedSubscript_(*(void **)(a1 + 432), v17, v19, v18);
      uint64_t v23 = objc_msgSend_functionHandleWithFunction_(a2, v21, v20, v22);
      objc_msgSend_setFunction_atIndex_(v13, v24, v23, v19++);
    }
    while (v19 < objc_msgSend_count(*(void **)(a1 + 432), v25, v26, v27));
  }
  objc_msgSend_setBuffer_offset_atIndex_(v13, v17, *(void *)(a1 + 376), 0, 0);
  return v13;
}

uint64_t sub_1B6626FAC(uint64_t a1)
{
  return (*(void *)(a1 + 320) - *(void *)(a1 + 312)) >> 3;
}

uint64_t sub_1B6626FBC(uint64_t a1)
{
  return (*(void *)(a1 + 344) - *(void *)(a1 + 336)) >> 3;
}

uint64_t sub_1B6626FCC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v5 = objc_msgSend_count(*(void **)(a1 + 384), a2, a3, a4);
  return objc_msgSend_count(*(void **)(a1 + 392), v6, v7, v8) + v5;
}

void *sub_1B6627008(uint64_t a1)
{
  sub_1B6624458(a1);
  sub_1B6624A5C(a1, 0, v2, v3);

  *(void *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 0;
  uint64_t v4 = *(void *)(a1 + 400);
  if (v4)
  {
    MEMORY[0x1BA9B6D60](v4, 0x80C80B8603338);
    *(void *)(a1 + 400) = 0;
  }

  *(void *)(a1 + 432) = 0;

  return sub_1B6627110((void *)a1);
}

CFStringRef sub_1B6627090(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXRaytracingSystem %p>", a1);
}

CFStringRef sub_1B66270D0(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXRaytracingSystem %p>", a1);
}

void *sub_1B6627110(void *a1)
{
  CFAllocatorRef v2 = (void *)a1[57];
  if (v2)
  {
    a1[58] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[42];
  if (v3)
  {
    a1[43] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[39];
  if (v4)
  {
    a1[40] = v4;
    operator delete(v4);
  }
  int v5 = (void *)a1[36];
  if (v5)
  {
    a1[37] = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)a1[33];
  if (v6)
  {
    a1[34] = v6;
    operator delete(v6);
  }
  sub_1B6491404((uint64_t)(a1 + 28));
  sub_1B6491404((uint64_t)(a1 + 23));
  sub_1B6491404((uint64_t)(a1 + 18));
  sub_1B6491404((uint64_t)(a1 + 13));
  sub_1B6491404((uint64_t)(a1 + 8));
  return a1;
}

void *sub_1B66271AC(void *result)
{
  if (result[3])
  {
    CFAllocatorRef v1 = result;
    double result = (void *)result[2];
    if (result)
    {
      do
      {
        CFAllocatorRef v2 = (void *)*result;
        operator delete(result);
        double result = v2;
      }
      while (v2);
    }
    v1[2] = 0;
    uint64_t v3 = v1[1];
    if (v3)
    {
      for (uint64_t i = 0; i != v3; ++i)
        *(void *)(*v1 + 8 * i) = 0;
    }
    _OWORD v1[3] = 0;
  }
  return result;
}

void *sub_1B6627214(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_1B63C8630(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B6627458(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1B662746C(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_1B63C8630(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B66276B0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1B66276C4(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_1B63C8630(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B6627908(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1B662791C(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_1B63C8630(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B6627B60(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1B6627B74(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_1B63C8630(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B6627DB8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B66282CC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  int v12 = *(_DWORD *)(a1 + 40);

  sub_1B662A06C(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B6628440(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  float v13 = *(float *)(a1 + 40);

  sub_1B662A13C(v5, v13, v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B66285AC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  float v13 = *(float *)(a1 + 40);

  sub_1B662A218(v5, v13, v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B6628720(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  float v13 = *(float *)(a1 + 40);

  sub_1B662A2F4(v5, v13, v6, v7, v8, v9, v10, v11, v12);
}

void sub_1B6628880(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  unsigned __int8 v12 = *(unsigned char *)(a1 + 40);

  sub_1B662A3D0(v5, v12, v6, v7, v8, v9, v10, v11);
}

void sub_1B66289FC(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 216);

  sub_1B662A4D0(v5, v6);
}

void sub_1B6628B84(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend_geometryRef(*(void **)(a1 + 32), a2, a3, a4);
  uint64_t v6 = *(void **)(*(void *)(a1 + 32) + 192);

  sub_1B662A564(v5, v6);
}

uint64_t sub_1B6629184(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (sub_1B643B460(a1, a2, a3, a4, a5, a6, a7, a8)) {
    return 1;
  }
  BOOL v17 = sub_1B6439E60(a1, v9, v10, v11, v12, v13, v14, v15);
  if (!v17) {
    return 0;
  }
  unint64_t v18 = v17;
  BOOL v16 = CFEqual(v17, @"pvr") || CFEqual(v18, @"pvrtc");
  CFRelease(v18);
  return v16;
}

uint64_t sub_1B6629208(uint64_t a1)
{
  uint64_t v55 = *MEMORY[0x1E4F143B8];
  CFAllocatorRef v2 = sub_1B63F2EE0();
  os_signpost_id_t v3 = os_signpost_id_generate(v2);
  unint64_t v4 = sub_1B63F2EE0();
  unint64_t v12 = v3 - 1;
  if (v3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v13 = v4;
    if (os_signpost_enabled(v4))
    {
      *(_DWORD *)buf = 138412290;
      uint64_t v54 = sub_1B6439EF8(a1, v5, v6, v7, v8, v9, v10, v11);
      _os_signpost_emit_with_name_impl(&dword_1B6287000, v13, OS_SIGNPOST_INTERVAL_BEGIN, v3, "LoadImage (PVRTC)", "url=%@", buf, 0xCu);
    }
  }
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v6, v7, v8, v9, v10, v11, (uint64_t)"image");
  }
  CFDataRef v14 = (const __CFData *)sub_1B643B460(a1, v5, v6, v7, v8, v9, v10, v11);
  if (v14)
  {
    CFDataRef v22 = v14;
    CFRetain(v14);
  }
  else
  {
    uint64_t v33 = sub_1B6439EF8(a1, v15, v16, v17, v18, v19, v20, v21);
    if (!v33 || (CFDataRef v22 = (const __CFData *)sub_1B65F40FC(v33)) == 0)
    {
      uint64_t v32 = 0;
      goto LABEL_22;
    }
  }
  if (CFDataGetLength(v22) >= 52)
  {
    BytePtr = CFDataGetBytePtr(v22);
    if (*((_DWORD *)BytePtr + 11) == 559044176)
    {
      uint64_t v24 = BytePtr;
      int v25 = *((_DWORD *)BytePtr + 4);
      if ((v25 & 0xFE) == 0x18)
      {
        int v26 = *((_DWORD *)BytePtr + 4);
        sub_1B643BD50(a1);
        int v27 = v25 & 0x8000 | (*((_DWORD *)v24 + 10) != 0);
        uint32x2_t v51 = *(uint32x2_t *)(v24 + 4);
        sub_1B643A0DC(a1, 1, v27 != 0, COERCE_DOUBLE(vrev64_s32((int32x2_t)vcvt_f32_u32(v51))));
        uint64_t v28 = sub_1B643A1CC(a1);
        uint64_t v29 = v28;
        if (v26 == 24)
        {
          if (v27) {
            int v30 = 164;
          }
          else {
            int v30 = 160;
          }
          char v31 = 8;
        }
        else
        {
          if (v26 != 25) {
            goto LABEL_31;
          }
          if (v27) {
            int v30 = 166;
          }
          else {
            int v30 = 162;
          }
          char v31 = 4;
        }
        *(_DWORD *)(v28 + 24) = v30;
        *(unsigned char *)(v28 + 7) = v31;
        *(unsigned char *)(v28 + 8) = 4;
LABEL_31:
        *(unsigned char *)(v28 + 4) = *((_DWORD *)v24 + 6);
        unsigned int v37 = *((_DWORD *)v24 + 5);
        uint64_t v32 = 1;
        if (v37)
        {
          unint64_t v49 = v3 - 1;
          os_signpost_id_t v50 = v3;
          unsigned int v38 = 0;
          uint64_t v52 = v24 + 52;
          if (v26 == 25) {
            char v39 = 2;
          }
          else {
            char v39 = 1;
          }
          unsigned int v40 = v51.i32[0];
          unsigned int v41 = v51.u32[1];
          do
          {
            unsigned int v42 = *(unsigned __int8 *)(v29 + 7);
            unsigned int v43 = *(unsigned __int8 *)(v29 + 8);
            int v44 = v43 * v42;
            unsigned int v45 = v40 / v43;
            unsigned int v46 = v41 / v42;
            if (v46 <= 2) {
              unsigned int v46 = 2;
            }
            if (v45 <= 2) {
              unsigned int v45 = 2;
            }
            CFIndex v47 = v46 * v45 * ((v44 << v39) >> 3);
            CFDataRef v48 = CFDataCreate(0, &v52[v38], v47);
            CFArrayAppendValue(*(CFMutableArrayRef *)(v29 + 32), v48);
            CFRelease(v48);
            v38 += v47;
            if (v41 <= 1) {
              unsigned int v41 = 1;
            }
            else {
              v41 >>= 1;
            }
            if (v40 <= 1) {
              unsigned int v40 = 1;
            }
            else {
              v40 >>= 1;
            }
          }
          while (v38 < v37);
          uint64_t v32 = 1;
          unint64_t v12 = v49;
          os_signpost_id_t v3 = v50;
        }
        goto LABEL_18;
      }
    }
  }
  uint64_t v32 = 0;
LABEL_18:
  CFRelease(v22);
LABEL_22:
  uint64_t v34 = sub_1B63F2EE0();
  if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v35 = v34;
    if (os_signpost_enabled(v34))
    {
      *(_WORD *)buf = 0;
      _os_signpost_emit_with_name_impl(&dword_1B6287000, v35, OS_SIGNPOST_INTERVAL_END, v3, "LoadImage (PVRTC)", "", buf, 2u);
    }
  }
  return v32;
}

uint64_t sub_1B6629548(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B6629578(uint64_t a1)
{
  if (qword_1E9DDBF78 != -1) {
    dispatch_once_f(&qword_1E9DDBF78, &qword_1E9DDBF70, (dispatch_function_t)sub_1B6629548);
  }
  uint64_t v2 = sub_1B63C8D44(qword_1E9DDBF70, 0x28uLL);
  long long v3 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v3;
  _OWORD v5[2] = *(_OWORD *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 48);
  sub_1B6629610(v2, (uint64_t)v5);
  return v2;
}

void sub_1B6629610(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 16) = CGPathRetain(*(CGPathRef *)(a2 + 24));
  long long v4 = *(_OWORD *)(a2 + 16);
  v5[0] = *(_OWORD *)a2;
  v5[1] = v4;
  _OWORD v5[2] = *(_OWORD *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  sub_1B65DBB20(a1, (uint64_t)v5);
  sub_1B65DC220(a1);
}

void sub_1B662967C(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = *(void **)(a1 + 32);
    if (v2) {
      free(v2);
    }
    if (*(_DWORD *)(a1 + 48))
    {
      unint64_t v3 = 0;
      do
      {
        uint64_t v4 = *(void *)(a1 + 40) + 32 * v3;
        if (*(_DWORD *)(v4 + 8))
        {
          uint64_t v5 = 0;
          unint64_t v6 = 0;
          do
          {
            free(*(void **)(*(void *)v4 + v5));
            ++v6;
            uint64_t v4 = *(void *)(a1 + 40) + 32 * v3;
            v5 += 40;
          }
          while (v6 < *(unsigned int *)(v4 + 8));
        }
        free(*(void **)v4);
        free(*(void **)(*(void *)(a1 + 40) + 32 * v3++ + 16));
      }
      while (v3 < *(unsigned int *)(a1 + 48));
    }
    free(*(void **)(a1 + 40));
    uint64_t v7 = *(const CGPath **)(a1 + 16);
    CGPathRelease(v7);
  }
}

CFStringRef sub_1B6629750(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXShape '%@'>", a1[2]);
}

CFStringRef sub_1B6629794(void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXShape '%@'>", a1[2]);
}

const void *sub_1B66297D8(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t result = *(const void **)(a1 + 64);
  if (!result
    || (*(void *)a2 == *a3 ? (BOOL v8 = *(void *)(a2 + 8) == a3[1]) : (BOOL v8 = 0),
        v8 ? (BOOL v9 = *(void *)(a2 + 16) == a3[2]) : (BOOL v9 = 0),
        v9 ? (BOOL v10 = *(void *)(a2 + 24) == a3[3]) : (BOOL v10 = 0),
        !v10))
  {
    uint64_t result = *(const void **)(a1 + 264);
    if (*(void *)a2 != *(void *)(a1 + 272)
      || *(void *)(a2 + 8) != *(void *)(a1 + 280)
      || *(void *)(a2 + 16) != *(void *)(a1 + 288)
      || *(void *)(a2 + 24) != *(void *)(a1 + 296))
    {
      if (result) {
        CFRelease(result);
      }
      long long v14 = *(_OWORD *)(a2 + 16);
      *(_OWORD *)(a1 + 272) = *(_OWORD *)a2;
      *(_OWORD *)(a1 + 288) = v14;
      uint64_t result = (const void *)(*(uint64_t (**)(uint64_t))(a4 + 16))(a4);
      *(void *)(a1 + 264) = result;
    }
  }
  return result;
}

double sub_1B6629884(void *a1, void *a2)
{
  if (!a1[8])
  {
    unint64_t v3 = (const void *)a1[33];
    if (v3)
    {
      if (*a2 == a1[34] && a2[1] == a1[35] && a2[2] == a1[36] && a2[3] == a1[37])
      {
        a1[8] = CFRetain(v3);
        unint64_t v3 = (const void *)a1[33];
      }
      CFRelease(v3);
      a1[33] = 0;
      double result = 0.0;
      *((_OWORD *)a1 + 17) = 0u;
      *((_OWORD *)a1 + 18) = 0u;
    }
  }
  return result;
}

void sub_1B66298F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  memset(md, 0, sizeof(md));
  sub_1B6629A6C(a1, a3, a4, a5, a6, a7, a8, (uint64_t)data);
  CC_SHA256(data, 0x28u, (unsigned __int8 *)md);
  sub_1B6629884((void *)a1, md);
  if (!*(void *)(a1 + 64))
  {
    uint64_t v9 = *(void *)(a1 + 208);
    float v11 = *(float *)(a1 + 216);
    float v10 = *(float *)(a1 + 220);
    long long v12 = *(_OWORD *)(a1 + 240);
    long long v37 = *(_OWORD *)(a1 + 224);
    long long v38 = v12;
    uint64_t v39 = *(void *)(a1 + 256);
    double v13 = v11 * 0.5;
    BOOL v14 = v13 <= v10;
    float v15 = v13;
    if (v14) {
      float v16 = v15;
    }
    else {
      float v16 = v10;
    }
    *(void *)&long long v33 = v9;
    *((void *)&v33 + 1) = __PAIR64__(LODWORD(v16), LODWORD(v11));
    long long v17 = *(_OWORD *)(a1 + 240);
    long long v34 = *(_OWORD *)(a1 + 224);
    long long v35 = v17;
    uint64_t v36 = *(void *)(a1 + 256);
    uint64_t v18 = (const void *)sub_1B6629578((uint64_t)&v33);
    *(void *)&long long v33 = v9;
    *((void *)&v33 + 1) = __PAIR64__(LODWORD(v16), LODWORD(v11));
    long long v34 = v37;
    long long v35 = v38;
    uint64_t v36 = v39;
    uint64_t v19 = sub_1B65E143C((uint64_t)v18, &v33);
    if (v19)
    {
      int v26 = (const void *)v19;
      sub_1B63CDBD0(a1, v19, v20, v21, v22, v23, v24, v25);
      CFRelease(v26);
      if (!v18) {
        return;
      }
    }
    else
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v20, v21, v22, v23, v24, v25, (uint64_t)"newMesh");
      sub_1B63CDBD0(a1, 0, v27, v28, v29, v30, v31, v32);
      if (!v18) {
        return;
      }
    }
    CFRelease(v18);
  }
}

float sub_1B6629A6C@<S0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  *(void *)(a8 + 32) = 0;
  *(_OWORD *)a8 = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a2, a3, a4, a5, a6, a7, (uint64_t)"shapeGeometry");
  }
  *(unsigned char *)a8 = *(unsigned char *)(a1 + 208);
  *(void *)(a8 + 4) = *(void *)(a1 + 216);
  float result = *(float *)(a1 + 228);
  *(float *)(a8 + 16) = result;
  uint64_t v11 = *(void *)(a1 + 256);
  *(void *)(a8 + 24) = *(void *)(a1 + 240);
  *(void *)(a8 + 32) = v11;
  return result;
}

void sub_1B6629AE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v60 = *MEMORY[0x1E4F143B8];
  uint64_t v9 = (_OWORD *)(a1 + 312);
  *(_OWORD *)md = 0u;
  long long v59 = 0u;
  memset(data, 0, sizeof(data));
  sub_1B6629A6C(a1, a3, a4, a5, a6, a7, a8, (uint64_t)data);
  *(_OWORD *)((char *)&data[2] + 8) = *v9;
  *((void *)&data[3] + 1) = *(void *)(a1 + 328);
  long long v10 = v9[2];
  LOWORD(data[4]) = *(_WORD *)(a1 + 336);
  *(_OWORD *)((char *)&data[4] + 8) = v10;
  *(_OWORD *)((char *)&data[5] + 8) = v9[3];
  DWORD2(data[6]) = *(_DWORD *)(a1 + 212);
  CC_SHA256(data, 0x70u, md);
  sub_1B6629884((void *)a1, md);
  if (!*(void *)(a1 + 64))
  {
    sub_1B6629D98(a1);
    uint64_t v11 = (double *)MEMORY[0x1E4F1DAD8];
    long long v12 = (double *)(a1 + 352);
    if (*(unsigned char *)(a1 + 337)) {
      uint64_t v11 = (double *)(v9 + 2);
    }
    else {
      long long v12 = (double *)(MEMORY[0x1E4F1DAD8] + 8);
    }
    float64_t v13 = *v12;
    float64_t v14 = *v11;
    uint64_t v15 = *(void *)(a1 + 208);
    float v17 = *(float *)(a1 + 216);
    float v16 = *(float *)(a1 + 220);
    long long v18 = *(_OWORD *)(a1 + 240);
    long long v54 = *(_OWORD *)(a1 + 224);
    long long v55 = v18;
    uint64_t v56 = *(void *)(a1 + 256);
    double v19 = v17 * 0.5;
    BOOL v20 = v19 <= v16;
    float v21 = v19;
    if (v20) {
      float v22 = v21;
    }
    else {
      float v22 = v16;
    }
    uint64_t v23 = *(const void **)(a1 + 304);
    *(void *)&long long v47 = v15;
    *((void *)&v47 + 1) = __PAIR64__(LODWORD(v22), LODWORD(v17));
    long long v24 = *(_OWORD *)(a1 + 240);
    long long v48 = *(_OWORD *)(a1 + 224);
    long long v49 = v24;
    *(void *)&long long v50 = *(void *)(a1 + 256);
    uint64_t v25 = (const void *)sub_1B65DF850(v23, (uint64_t)&v47);
    *((void *)&v52[0] + 1) = __PAIR64__(LODWORD(v22), LODWORD(v17));
    v52[1] = v54;
    v52[2] = v55;
    uint64_t v53 = v56;
    long long v26 = *(_OWORD *)(a1 + 352);
    long long v49 = *(_OWORD *)(a1 + 336);
    long long v50 = v26;
    uint64_t v51 = *(void *)(a1 + 368);
    *(void *)&v52[0] = v15;
    long long v27 = *(_OWORD *)(a1 + 320);
    long long v47 = *(_OWORD *)(a1 + 304);
    long long v48 = v27;
    uint64_t v33 = sub_1B65E15A0((uint64_t)v25, v52, (uint64_t)&v47, v28, v29, v30, v31, v32, v14, v13);
    if (v33)
    {
      unsigned int v40 = (const void *)v33;
      sub_1B63CDBD0(a1, v33, v34, v35, v36, v37, v38, v39);
      CFRelease(v40);
      if (!v25) {
        return;
      }
    }
    else
    {
      sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v34, v35, v36, v37, v38, v39, (uint64_t)"newMesh");
      sub_1B63CDBD0(a1, 0, v41, v42, v43, v44, v45, v46);
      if (!v25) {
        return;
      }
    }
    CFRelease(v25);
  }
}

float sub_1B6629D04@<S0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, uint64_t a7@<X7>, uint64_t a8@<X8>)
{
  *(_OWORD *)(a8 + 80) = 0u;
  *(_OWORD *)(a8 + 96) = 0u;
  long long v10 = (_OWORD *)(a1 + 312);
  *(_OWORD *)(a8 + 48) = 0u;
  *(_OWORD *)(a8 + 64) = 0u;
  *(_OWORD *)(a8 + 16) = 0u;
  *(_OWORD *)(a8 + 32) = 0u;
  *(_OWORD *)a8 = 0u;
  sub_1B6629A6C(a1, a2, a3, a4, a5, a6, a7, (uint64_t)v14);
  long long v11 = v14[1];
  *(_OWORD *)a8 = v14[0];
  *(_OWORD *)(a8 + 16) = v11;
  *(_OWORD *)(a8 + 40) = *v10;
  *(void *)(a8 + 56) = *(void *)(a1 + 328);
  long long v12 = v10[3];
  *(_OWORD *)(a8 + 72) = v10[2];
  *(void *)(a8 + 32) = v15;
  *(_WORD *)(a8 + 64) = *(_WORD *)(a1 + 336);
  *(_OWORD *)(a8 + 88) = v12;
  float result = *(float *)(a1 + 212);
  *(float *)(a8 + 104) = result;
  return result;
}

void sub_1B6629D98(uint64_t a1)
{
  if (*(void *)(a1 + 304)) {
    return;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v3 = objc_alloc_init(MEMORY[0x1E4FB1378]);
    id v6 = v3;
    if (*(unsigned char *)(a1 + 336))
    {
      if (*(unsigned char *)(a1 + 337) && (int v7 = *(_DWORD *)(a1 + 328) - 1, v7 <= 3)) {
        objc_msgSend_setAlignment_(v3, v4, qword_1B6E72DF8[v7], v5);
      }
      else {
        objc_msgSend_setAlignment_(v3, v4, 4, v5);
      }
    }
    else if (*(unsigned char *)(a1 + 337) && (uint64_t v8 = (*(_DWORD *)(a1 + 332) - 1), v8 < 3))
    {
      objc_msgSend_setLineBreakMode_(v3, v4, v8 + 3, v5);
    }
    else
    {
      objc_msgSend_setLineBreakMode_(v3, v4, 2, v5);
    }
    objc_opt_class();
    char isKindOfClass = objc_opt_isKindOfClass();
    long long v12 = (void *)MEMORY[0x1E4FB12B0];
    if (isKindOfClass)
    {
      uint64_t v13 = objc_msgSend_attribute_atIndex_effectiveRange_(*(void **)(a1 + 312), v10, *MEMORY[0x1E4FB12B0], 0, 0);
    }
    else
    {
      uint64_t v14 = *(void *)(a1 + 320);
      if (v14)
      {
LABEL_19:
        uint64_t v15 = objc_msgSend_dictionaryWithObjectsAndKeys_(MEMORY[0x1E4F1C9E8], v10, v14, v11, *v12, v6, *MEMORY[0x1E4FB12D0], 0);
        id v16 = objc_alloc(MEMORY[0x1E4F28B18]);
        if (*(void *)(a1 + 312)) {
          long long v18 = objc_msgSend_initWithString_attributes_(v16, v17, *(void *)(a1 + 312), v15);
        }
        else {
          long long v18 = objc_msgSend_initWithString_attributes_(v16, v17, (uint64_t)&stru_1F0FCDBB0, v15);
        }
        CFAttributedStringRef v2 = v18;
        goto LABEL_23;
      }
      uint64_t v13 = objc_msgSend_fontWithName_size_(MEMORY[0x1E4FB1798], v10, @"Helvetica", v11, 12.0);
    }
    uint64_t v14 = v13;
    goto LABEL_19;
  }
  CFAttributedStringRef v2 = *(const __CFAttributedString **)(a1 + 312);
LABEL_23:
  double v19 = CTFramesetterCreateWithAttributedString(v2);
  v39.CGFloat width = 1.79769313e308;
  v37.location = 0;
  v37.length = 0;
  v39.CGFloat height = 1.79769313e308;
  CGSize v20 = CTFramesetterSuggestFrameSizeWithConstraints(v19, v37, 0, v39, 0);
  CGFloat width = v20.width;
  CGFloat height = v20.height;
  CFDictionaryRef Mutable = CGPathCreateMutable();
  long long v24 = Mutable;
  if (*(unsigned char *)(a1 + 337))
  {
    uint64_t v25 = *(void *)(a1 + 344);
    uint64_t v26 = *(void *)(a1 + 352);
    CGFloat width = *(double *)(a1 + 360);
    CGFloat height = *(double *)(a1 + 368);
  }
  else
  {
    uint64_t v25 = 0;
    uint64_t v26 = 0;
  }
  CGFloat v27 = width;
  CGFloat v28 = height;
  CGPathAddRect(Mutable, 0, *(CGRect *)&v25);
  v38.location = 0;
  v38.length = 0;
  CTFrameRef Frame = CTFramesetterCreateFrame(v19, v38, v24, 0);
  sub_1B662A9E8(a1, Frame, v30, v31, v32, v33, v34, v35);
  CFRelease(v19);
  CFRelease(Frame);

  CFRelease(v24);
}

uint64_t sub_1B662A00C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 337);
}

double sub_1B662A014(uint64_t a1)
{
  return *(double *)(a1 + 344);
}

uint64_t sub_1B662A020(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  }
  return *(unsigned int *)(a1 + 224);
}

void sub_1B662A06C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  }
  if (*(_DWORD *)(a1 + 224) != a2)
  {
    *(_DWORD *)(a1 + 224) = a2;
    sub_1B63CDBD0(a1, 0, a3, a4, a5, a6, a7, a8);
  }
}

float sub_1B662A0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  }
  return *(float *)(a1 + 220);
}

void sub_1B662A13C(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"shapeGeometry");
  }
  if (*(float *)(a1 + 220) != a2)
  {
    *(float *)(a1 + 220) = a2;
    sub_1B63CDBD0(a1, 0, a4, a5, a6, a7, a8, a9);
  }
}

float sub_1B662A1CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  }
  return *(float *)(a1 + 228);
}

void sub_1B662A218(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"shapeGeometry");
  }
  if (*(float *)(a1 + 228) != a2)
  {
    *(float *)(a1 + 228) = a2;
    sub_1B63CDBD0(a1, 0, a4, a5, a6, a7, a8, a9);
  }
}

float sub_1B662A2A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  }
  return *(float *)(a1 + 216);
}

void sub_1B662A2F4(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a4, a5, a6, a7, a8, a9, (uint64_t)"shapeGeometry");
  }
  if (*(float *)(a1 + 216) != a2)
  {
    *(float *)(a1 + 216) = a2;
    sub_1B63CDBD0(a1, 0, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1B662A384(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  }
  return *(char *)(a1 + 208);
}

void sub_1B662A3D0(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"shapeGeometry");
  }
  if (*(unsigned __int8 *)(a1 + 208) != a2)
  {
    *(unsigned char *)(a1 + 208) = a2;
    sub_1B63CDBD0(a1, 0, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B662A454(uint64_t a1)
{
  return *(void *)(a1 + 256);
}

void sub_1B662A45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B662A3D0(a1, *(unsigned char *)a2, a3, a4, a5, a6, a7, a8);
  sub_1B662A2F4(a1, *(float *)(a2 + 4), v10, v11, v12, v13, v14, v15, v16);
  sub_1B662A13C(a1, *(float *)(a2 + 8), v17, v18, v19, v20, v21, v22, v23);
  sub_1B662A218(a1, *(float *)(a2 + 16), v24, v25, v26, v27, v28, v29, v30);
  sub_1B662A4D0(a1, *(void **)(a2 + 24));
  uint64_t v31 = *(void **)(a2 + 32);

  sub_1B662A564(a1, v31);
}

void sub_1B662A4D0(uint64_t a1, void *a2)
{
  CFAttributedStringRef v2 = *(void **)(a1 + 240);
  if (v2 != a2)
  {

    *(void *)(a1 + 240) = a2;
    objc_msgSend_flatness(a2, v5, v6, v7);
    *(float *)&double v8 = v8;
    *(_DWORD *)(a1 + 212) = LODWORD(v8);
    CGPathRelease(*(CGPathRef *)(a1 + 232));
    if (a2)
    {
      uint64_t v16 = (const void *)objc_msgSend_CGPath(a2, v9, v10, v11);
      CFTypeRef v17 = CFRetain(v16);
    }
    else
    {
      CFTypeRef v17 = 0;
    }
    *(void *)(a1 + 232) = v17;
    sub_1B63CDBD0(a1, 0, v10, v11, v12, v13, v14, v15);
  }
}

void sub_1B662A564(uint64_t a1, void *a2)
{
  CFAttributedStringRef v2 = *(void **)(a1 + 256);
  if (v2 != a2)
  {

    *(void *)(a1 + 256) = a2;
    CGPathRelease(*(CGPathRef *)(a1 + 248));
    if (a2)
    {
      uint64_t v12 = (const void *)objc_msgSend_CGPath(a2, v5, v6, v7);
      CFTypeRef v13 = CFRetain(v12);
    }
    else
    {
      CFTypeRef v13 = 0;
    }
    *(void *)(a1 + 248) = v13;
    sub_1B63CDBD0(a1, 0, v6, v7, v8, v9, v10, v11);
  }
}

float sub_1B662A5E8(uint64_t a1)
{
  return *(float *)(a1 + 212);
}

void sub_1B662A5F0(uint64_t a1, float a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a2 <= 0.0) {
    a2 = 0.001;
  }
  if (*(float *)(a1 + 212) != a2)
  {
    *(float *)(a1 + 212) = a2;
    sub_1B63CDBD0(a1, 0, a4, a5, a6, a7, a8, a9);
  }
}

uint64_t sub_1B662A61C(uint64_t a1)
{
  return *(void *)(a1 + 312);
}

uint64_t sub_1B662A624(uint64_t a1)
{
  return *(void *)(a1 + 320);
}

uint64_t sub_1B662A62C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 328);
}

uint64_t sub_1B662A634(uint64_t a1)
{
  return *(unsigned int *)(a1 + 332);
}

uint64_t sub_1B662A63C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 336);
}

void sub_1B662A644(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v10 = *(_OWORD *)(a2 + 16);
  v43[0] = *(_OWORD *)a2;
  v43[1] = v10;
  uint64_t v44 = *(void *)(a2 + 32);
  sub_1B662A45C(a1, (uint64_t)v43, a3, a4, a5, a6, a7, a8);
  sub_1B662A740(a1, *(void **)(a2 + 40));
  sub_1B662A7AC(a1, *(void **)(a2 + 48));
  sub_1B662A818(a1, *(_DWORD *)(a2 + 56), v11, v12, v13, v14, v15, v16);
  sub_1B662A874(a1, *(_DWORD *)(a2 + 60), v17, v18, v19, v20, v21, v22);
  sub_1B662A8D0(a1, *(unsigned __int8 *)(a2 + 64), v23, v24, v25, v26, v27, v28);
  int v35 = *(unsigned __int8 *)(a2 + 65);
  if (*(unsigned __int8 *)(a1 + 337) != v35)
  {
    *(unsigned char *)(a1 + 337) = v35;
    sub_1B63CDBD0(a1, 0, v29, v30, v31, v32, v33, v34);
  }
  sub_1B662A948(a1, *(CGFloat *)(a2 + 72), *(CGFloat *)(a2 + 80), *(CGFloat *)(a2 + 88), *(CGFloat *)(a2 + 96));
  float v42 = *(float *)(a2 + 104);
  if (v42 <= 0.0) {
    float v42 = 0.001;
  }
  if (*(float *)(a1 + 212) != v42)
  {
    *(float *)(a1 + 212) = v42;
    sub_1B63CDBD0(a1, 0, v36, v37, v38, v39, v40, v41);
  }
}

void sub_1B662A740(uint64_t a1, void *a2)
{
  CFAttributedStringRef v2 = *(void **)(a1 + 312);
  if (v2 != a2)
  {

    *(void *)(a1 + 312) = a2;
    sub_1B662A9E8(a1, 0, v5, v6, v7, v8, v9, v10);
    sub_1B63CDBD0(a1, 0, v11, v12, v13, v14, v15, v16);
  }
}

void sub_1B662A7AC(uint64_t a1, void *a2)
{
  CFAttributedStringRef v2 = *(void **)(a1 + 320);
  if (v2 != a2)
  {

    *(void *)(a1 + 320) = a2;
    sub_1B662A9E8(a1, 0, v5, v6, v7, v8, v9, v10);
    sub_1B63CDBD0(a1, 0, v11, v12, v13, v14, v15, v16);
  }
}

void sub_1B662A818(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 328) != a2)
  {
    *(_DWORD *)(a1 + 328) = a2;
    sub_1B662A9E8(a1, 0, a3, a4, a5, a6, a7, a8);
    sub_1B63CDBD0(a1, 0, v9, v10, v11, v12, v13, v14);
  }
}

void sub_1B662A874(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(_DWORD *)(a1 + 332) != a2)
  {
    *(_DWORD *)(a1 + 332) = a2;
    sub_1B662A9E8(a1, 0, a3, a4, a5, a6, a7, a8);
    sub_1B63CDBD0(a1, 0, v9, v10, v11, v12, v13, v14);
  }
}

void sub_1B662A8D0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned __int8 *)(a1 + 336) != a2)
  {
    *(unsigned char *)(a1 + 336) = a2;
    sub_1B662A9E8(a1, 0, a3, a4, a5, a6, a7, a8);
    sub_1B63CDBD0(a1, 0, v9, v10, v11, v12, v13, v14);
  }
}

void sub_1B662A92C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned __int8 *)(a1 + 337) != a2)
  {
    *(unsigned char *)(a1 + 337) = a2;
    sub_1B63CDBD0(a1, 0, a3, a4, a5, a6, a7, a8);
  }
}

void sub_1B662A948(uint64_t a1, CGFloat a2, CGFloat a3, CGFloat a4, CGFloat a5)
{
  v23.origin.x = a2;
  v23.origin.y = a3;
  v23.size.CGFloat width = a4;
  v23.size.CGFloat height = a5;
  if (!CGRectEqualToRect(*(CGRect *)(a1 + 344), v23))
  {
    *(CGFloat *)(a1 + 344) = a2;
    *(CGFloat *)(a1 + 352) = a3;
    *(CGFloat *)(a1 + 360) = a4;
    *(CGFloat *)(a1 + 368) = a5;
    sub_1B662A9E8(a1, 0, v10, v11, v12, v13, v14, v15);
    sub_1B63CDBD0(a1, 0, v16, v17, v18, v19, v20, v21);
  }
}

void sub_1B662A9E8(uint64_t a1, CFTypeRef cf, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  CFTypeRef v9 = *(CFTypeRef *)(a1 + 304);
  if (v9 != cf)
  {
    if (v9)
    {
      CFRelease(v9);
      *(void *)(a1 + 304) = 0;
    }
    if (cf) {
      CFTypeRef v11 = CFRetain(cf);
    }
    else {
      CFTypeRef v11 = 0;
    }
    *(void *)(a1 + 304) = v11;
    sub_1B63CDBD0(a1, 0, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B662AA60(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  return objc_msgSend_fontWithName_size_(MEMORY[0x1E4FB1798], a2, @"Helvetica", a4, 12.0);
}

uint64_t sub_1B662AA78(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 338);
}

void sub_1B662AA80(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (*(unsigned __int8 *)(a1 + 338) != a2)
  {
    *(unsigned char *)(a1 + 338) = a2;
    sub_1B63CDBD0(a1, 0, a3, a4, a5, a6, a7, a8);
  }
}

uint64_t sub_1B662AA9C()
{
  if (qword_1EB995660 != -1) {
    dispatch_once(&qword_1EB995660, &unk_1F0FB6088);
  }
  return qword_1EB995668;
}

double sub_1B662AAE0()
{
  if (!qword_1EB995668)
  {
    uint64_t v0 = (void *)sub_1B63C8D10(&qword_1EB995668);
    qword_1EB995668 = (uint64_t)v0;
    CFAllocatorRef v1 = (const void *)sub_1B63CD970();
    sub_1B660E380(v0, v1);
    sub_1B660E400(@"chamferRadius", 0xDCu, 1, 0, 0, 0, v2, v3);
    sub_1B660E400(@"extrusionDepth", 0xD8u, 1, 0, 0, 0, v4, v5);
    sub_1B660E3EC();
    unk_1EB981A68 = xmmword_1F0FB8A70;
    xmmword_1EB981A50 = xmmword_1F0FB8A60;
    double result = *(double *)&xmmword_1F0FB8A80;
    unk_1EB981A78 = xmmword_1F0FB8A80;
    unk_1EB981A88 = *(_OWORD *)algn_1F0FB8A90;
    qword_1EB981A98 = qword_1F0FB8AA0;
    qword_1EB981AA8 = (uint64_t)sub_1B662B6E4;
  }
  return result;
}

uint64_t sub_1B662ABD4()
{
  if (qword_1EB995698 != -1) {
    dispatch_once(&qword_1EB995698, &unk_1F0FB6228);
  }
  return qword_1EB9956A0;
}

double sub_1B662AC18()
{
  if (!qword_1EB9956A0)
  {
    uint64_t v0 = (void *)sub_1B63C8D10(&qword_1EB9956A0);
    qword_1EB9956A0 = (uint64_t)v0;
    if (qword_1EB995660 != -1) {
      dispatch_once(&qword_1EB995660, &unk_1F0FB6088);
    }
    sub_1B660E380(v0, (const void *)qword_1EB995668);
    sub_1B660E3EC();
    unk_1EB984C78 = xmmword_1F0FB8B08;
    xmmword_1EB984C60 = xmmword_1F0FB8AF8;
    double result = *(double *)&xmmword_1F0FB8B18;
    unk_1EB984C88 = xmmword_1F0FB8B18;
    unk_1EB984C98 = unk_1F0FB8B28;
    qword_1EB984CA8 = qword_1F0FB8B38;
    qword_1EB984CB8 = (uint64_t)sub_1B662B828;
  }
  return result;
}

uint64_t sub_1B662ACF0(uint64_t a1)
{
  sub_1B63CDA84(a1);
  uint64_t v2 = (void *)sub_1B64AF438();
  sub_1B63CE298(a1, v2, v3, v4, v5, v6, v7, v8);
  CFRelease(v2);
  *(unsigned char *)(a1 + 208) = 0;
  *(void *)(a1 + 212) = 1065353216;
  *(_DWORD *)(a1 + 220) = 0;
  *(_DWORD *)(a1 + 228) = 2139095039;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;

  return sub_1B63CE3B8(a1, (uint64_t)sub_1B66298F8);
}

void sub_1B662ADDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B63CDCE8(a1, a2, a3, a4, a5, a6, a7, a8);
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", v10, v11, v12, v13, v14, v15, (uint64_t)"shapeGeometry");
  }
  sub_1B662A3D0(a2, *(unsigned char *)(a1 + 208), v10, v11, v12, v13, v14, v15);
  float v23 = *(float *)(a1 + 212);
  if (v23 <= 0.0) {
    float v23 = 0.001;
  }
  if (*(float *)(a2 + 212) != v23)
  {
    *(float *)(a2 + 212) = v23;
    sub_1B63CDBD0(a2, 0, v17, v18, v19, v20, v21, v22);
  }
  sub_1B662A2F4(a2, *(float *)(a1 + 216), v16, v17, v18, v19, v20, v21, v22);
  sub_1B662A13C(a2, *(float *)(a1 + 220), v24, v25, v26, v27, v28, v29, v30);
  sub_1B662A218(a2, *(float *)(a1 + 228), v31, v32, v33, v34, v35, v36, v37);
  sub_1B662A4D0(a2, *(void **)(a1 + 240));
  uint64_t v38 = *(void **)(a1 + 256);

  sub_1B662A564(a2, v38);
}

void sub_1B662AEB0(uint64_t a1)
{
  sub_1B662A4D0(a1, 0);
  sub_1B662A564(a1, 0);
  uint64_t v2 = *(const void **)(a1 + 264);
  if (v2)
  {
    CFRelease(v2);
    *(void *)(a1 + 264) = 0;
  }
}

void sub_1B662AF94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B662ADDC(a1, a2, a3, a4, a5, a6, a7, a8);
  sub_1B662A9E8(a2, *(CFTypeRef *)(a1 + 304), v10, v11, v12, v13, v14, v15);
  sub_1B662A740(a2, *(void **)(a1 + 312));
  sub_1B662A7AC(a2, *(void **)(a1 + 320));
  sub_1B662A818(a2, *(_DWORD *)(a1 + 328), v16, v17, v18, v19, v20, v21);
  sub_1B662A874(a2, *(_DWORD *)(a1 + 332), v22, v23, v24, v25, v26, v27);
  sub_1B662A8D0(a2, *(unsigned __int8 *)(a1 + 336), v28, v29, v30, v31, v32, v33);
  int v40 = *(unsigned __int8 *)(a1 + 337);
  if (*(unsigned __int8 *)(a2 + 337) != v40)
  {
    *(unsigned char *)(a2 + 337) = v40;
    sub_1B63CDBD0(a2, 0, v34, v35, v36, v37, v38, v39);
  }
  CGFloat v41 = *(double *)(a1 + 344);
  CGFloat v42 = *(double *)(a1 + 352);
  CGFloat v43 = *(double *)(a1 + 360);
  CGFloat v44 = *(double *)(a1 + 368);

  sub_1B662A948(a2, v41, v42, v43, v44);
}

void sub_1B662B040(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B662A9E8(a1, 0, a3, a4, a5, a6, a7, a8);
  sub_1B662A740(a1, 0);
  sub_1B662A7AC(a1, 0);

  sub_1B662AEB0(a1);
}

const void *sub_1B662B094(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v22 = *MEMORY[0x1E4F143B8];
  memset(md, 0, sizeof(md));
  memset(v20, 0, sizeof(v20));
  sub_1B6629A6C(a1, a3, a4, a5, a6, a7, a8, (uint64_t)data);
  CC_SHA256(data, 0x28u, (unsigned __int8 *)md);
  long long v10 = a2[1];
  v17[0] = *a2;
  v17[1] = v10;
  uint64_t v18 = *((void *)a2 + 4);
  CC_SHA256(v17, 0x28u, (unsigned __int8 *)v20);
  v13[0] = MEMORY[0x1E4F143A8];
  v13[1] = 3221225472;
  void v13[2] = sub_1B662B1A8;
  v13[3] = &unk_1E6145A48;
  long long v11 = a2[1];
  long long v14 = *a2;
  long long v15 = v11;
  uint64_t v16 = *((void *)a2 + 4);
  return sub_1B66297D8(a1, (uint64_t)v20, md, (uint64_t)v13);
}

const void *sub_1B662B1A8(uint64_t a1)
{
  uint64_t v2 = (const void *)-[VFXShape __createCFObject]_0();
  long long v3 = *(_OWORD *)(a1 + 48);
  v19[0] = *(_OWORD *)(a1 + 32);
  v19[1] = v3;
  uint64_t v20 = *(void *)(a1 + 64);
  sub_1B662A45C((uint64_t)v2, (uint64_t)v19, v4, v5, v6, v7, v8, v9);
  uint64_t v17 = (const void *)sub_1B63CCE68((uint64_t)v2, v10, v11, v12, v13, v14, v15, v16);
  CFRetain(v17);
  CFRelease(v2);
  return v17;
}

uint64_t sub_1B662B20C(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v10 = *(_OWORD *)(a4 + 16);
  v18[0] = *(_OWORD *)a4;
  v18[1] = v10;
  uint64_t v19 = *(void *)(a4 + 32);
  uint64_t v11 = sub_1B662B094(a1, v18, (uint64_t)a3, a4, a5, a6, a7, a8);

  return sub_1B64AB620((uint64_t)v11, a2, a3, v12, v13, v14, v15, v16);
}

uint64_t sub_1B662B268(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v9 = *(_OWORD *)(a3 + 16);
  v18[0] = *(_OWORD *)a3;
  v18[1] = v9;
  uint64_t v19 = *(void *)(a3 + 32);
  long long v10 = sub_1B662B094(a1, v18, a3, a4, a5, a6, a7, a8);

  return sub_1B64AB7A0((uint64_t)v10, a2, v11, v12, v13, v14, v15, v16);
}

const void *sub_1B662B2BC(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = *MEMORY[0x1E4F143B8];
  *(_OWORD *)md = 0u;
  long long v32 = 0u;
  long long v10 = (_OWORD *)(a1 + 312);
  *(_OWORD *)uint64_t v29 = 0u;
  long long v30 = 0u;
  memset(data, 0, sizeof(data));
  sub_1B6629A6C(a1, a3, a4, a5, a6, a7, a8, (uint64_t)data);
  *(_OWORD *)((char *)&data[2] + 8) = *v10;
  *((void *)&data[3] + 1) = *(void *)(a1 + 328);
  LOWORD(data[4]) = *(_WORD *)(a1 + 336);
  long long v11 = v10[3];
  *(_OWORD *)((char *)&data[4] + 8) = v10[2];
  *(_OWORD *)((char *)&data[5] + 8) = v11;
  DWORD2(data[6]) = *(_DWORD *)(a1 + 212);
  CC_SHA256(data, 0x70u, md);
  long long v12 = a2[5];
  void v27[4] = a2[4];
  v27[5] = v12;
  void v27[6] = a2[6];
  long long v13 = a2[1];
  v27[0] = *a2;
  v27[1] = v13;
  long long v14 = a2[3];
  v27[2] = a2[2];
  v27[3] = v14;
  CC_SHA256(v27, 0x70u, v29);
  v19[0] = MEMORY[0x1E4F143A8];
  v19[1] = 3221225472;
  _OWORD v19[2] = sub_1B662B434;
  v19[3] = &unk_1E6145A68;
  long long v15 = a2[5];
  long long v24 = a2[4];
  long long v25 = v15;
  long long v26 = a2[6];
  long long v16 = a2[1];
  long long v20 = *a2;
  long long v21 = v16;
  long long v17 = a2[3];
  long long v22 = a2[2];
  long long v23 = v17;
  return sub_1B66297D8(a1, (uint64_t)v29, md, (uint64_t)v19);
}

const void *sub_1B662B434(_OWORD *a1)
{
  uint64_t v2 = (const void *)-[VFXText __createCFObject]_0();
  long long v3 = a1[7];
  v21[4] = a1[6];
  v21[5] = v3;
  v21[6] = a1[8];
  long long v4 = a1[3];
  v21[0] = a1[2];
  v21[1] = v4;
  long long v5 = a1[5];
  v21[2] = a1[4];
  v21[3] = v5;
  sub_1B662A644((uint64_t)v2, (uint64_t)v21, v6, v7, v8, v9, v10, v11);
  uint64_t v19 = (const void *)sub_1B63CCE68((uint64_t)v2, v12, v13, v14, v15, v16, v17, v18);
  CFRetain(v19);
  CFRelease(v2);
  return v19;
}

uint64_t sub_1B662B4A8(uint64_t a1, _OWORD *a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v10 = a4[5];
  v20[4] = a4[4];
  v20[5] = v10;
  v20[6] = a4[6];
  long long v11 = a4[1];
  v20[0] = *a4;
  v20[1] = v11;
  long long v12 = a4[3];
  _OWORD v20[2] = a4[2];
  v20[3] = v12;
  uint64_t v13 = sub_1B662B2BC(a1, v20, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);

  return sub_1B64AB620((uint64_t)v13, a2, a3, v14, v15, v16, v17, v18);
}

uint64_t sub_1B662B514(uint64_t a1, _OWORD *a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  long long v9 = a3[5];
  v20[4] = a3[4];
  v20[5] = v9;
  v20[6] = a3[6];
  long long v10 = a3[1];
  v20[0] = *a3;
  v20[1] = v10;
  long long v11 = a3[3];
  _OWORD v20[2] = a3[2];
  v20[3] = v11;
  long long v12 = sub_1B662B2BC(a1, v20, (uint64_t)a3, a4, a5, a6, a7, a8);

  return sub_1B64AB7A0((uint64_t)v12, a2, v13, v14, v15, v16, v17, v18);
}

id sub_1B662B57C(void *a1)
{
  sub_1B662AEB0((uint64_t)a1);

  return sub_1B63CCC14(a1);
}

id sub_1B662B5C0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  sub_1B662B040((uint64_t)a1, a2, a3, a4, a5, a6, a7, a8);

  return sub_1B63CCC14(a1);
}

uint64_t sub_1B662B600(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1B63CCE68(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (result)
  {
    return sub_1B64AB620(result, a3, a4, v11, v12, v13, v14, v15);
  }
  return result;
}

uint64_t sub_1B662B650(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1B63CCE68(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (result)
  {
    return sub_1B64AB7A0(result, a3, v10, v11, v12, v13, v14, v15);
  }
  return result;
}

void sub_1B662B698(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  memcpy(__dst, __src, __n);

  sub_1B63CDBD0(a1, 0, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B662B6E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"src");
  }
  uint64_t v9 = -[VFXShape __createCFObject]_0();
  sub_1B662ADDC(a1, v9, v10, v11, v12, v13, v14, v15);
  return v9;
}

uint64_t sub_1B662B744(uint64_t a1, uint64_t a2, _OWORD *a3, _OWORD *a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1B63CCE68(a1, a2, (uint64_t)a3, (uint64_t)a4, a5, a6, a7, a8);
  if (result)
  {
    return sub_1B64AB620(result, a3, a4, v11, v12, v13, v14, v15);
  }
  return result;
}

uint64_t sub_1B662B794(uint64_t a1, uint64_t a2, _OWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1B63CCE68(a1, a2, (uint64_t)a3, a4, a5, a6, a7, a8);
  if (result)
  {
    return sub_1B64AB7A0(result, a3, v10, v11, v12, v13, v14, v15);
  }
  return result;
}

void sub_1B662B7DC(uint64_t a1, void *__dst, void *__src, size_t __n)
{
  memcpy(__dst, __src, __n);

  sub_1B63CDBD0(a1, 0, v5, v6, v7, v8, v9, v10);
}

uint64_t sub_1B662B828(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (!a1) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. Null argument", a3, a4, a5, a6, a7, a8, (uint64_t)"src");
  }
  uint64_t v9 = -[VFXText __createCFObject]_0();
  sub_1B662AF94(a1, v9, v10, v11, v12, v13, v14, v15);
  return v9;
}

void *VFXNodeGetBoundingSphere(void *a1, const char *a2, uint64_t a3, uint64_t a4)
{
  int v4 = (int)a2;
  uint64_t v107 = *MEMORY[0x1E4F143B8];
  uint64_t result = objc_msgSend_count(a1, a2, a3, a4);
  if (result)
  {
    Object = objc_msgSend_firstObject(a1, v7, v8, v9, 0.0);
    uint64_t result = objc_msgSend_nodeRef(Object, v11, v12, v13);
    if (result)
    {
      uint64_t result = (void *)sub_1B63F4F54(result, v14, v15, v16, v17, v18, v19, v20);
      if (result)
      {
        uint64_t v28 = result;
        sub_1B64B0C28((uint64_t)result, v21, v22, v23, v24, v25, v26, v27);
        v101[0] = MEMORY[0x1E4F143A8];
        v101[1] = 3221225472;
        uint64_t v102 = sub_1B662BEA4;
        uint64_t v103 = &unk_1E6143EB8;
        uint64_t v104 = v28;
        memset(v99, 0, sizeof(v99));
        int v100 = 1065353216;
        uint64_t v32 = objc_msgSend_count(a1, v29, v30, v31);
        sub_1B63C8630((uint64_t)v99, vcvtps_u32_f32((float)(unint64_t)v32 / 1.0));
        long long v97 = 0u;
        long long v98 = 0u;
        long long v95 = 0u;
        long long v96 = 0u;
        uint64_t v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v33, (uint64_t)&v95, (uint64_t)v106, 16);
        if (v37)
        {
          uint64_t v38 = *(void *)v96;
          do
          {
            for (uint64_t i = 0; i != v37; ++i)
            {
              if (*(void *)v96 != v38) {
                objc_enumerationMutation(a1);
              }
              int v40 = *(void **)(*((void *)&v95 + 1) + 8 * i);
              uint64_t v92 = objc_msgSend_nodeRef(v40, v34, v35, v36);
              uint64_t v83 = (uint64_t)&v92;
              sub_1B662BF74((uint64_t)v99, &v92, (uint64_t)&unk_1B6E4FDF8, (void **)&v83)[3] = v40;
            }
            uint64_t v37 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v34, (uint64_t)&v95, (uint64_t)v106, 16);
          }
          while (v37);
        }
        int v79 = v4;
        uint64_t v92 = 0xA00000000;
        uint64_t v93 = v94;
        long long v88 = 0u;
        long long v89 = 0u;
        long long v90 = 0u;
        long long v91 = 0u;
        uint64_t v48 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v34, (uint64_t)&v88, (uint64_t)v105, 16);
        if (v48)
        {
          uint64_t v49 = *(void *)v89;
          do
          {
            for (uint64_t j = 0; j != v48; ++j)
            {
              if (*(void *)v89 != v49) {
                objc_enumerationMutation(a1);
              }
              uint64_t v51 = *(void **)(*((void *)&v88 + 1) + 8 * j);
              uint64_t v83 = 0;
              uint64_t v83 = objc_msgSend_nodeRef(v51, v41, v42, v43);
              uint64_t v52 = sub_1B63C8A0C(v99, &v83);
              sub_1B63C8AF8(v99, v52);
              uint64_t v53 = (void *)v83;
              v86[0] = MEMORY[0x1E4F143A8];
              v86[1] = 3321888768;
              v86[2] = sub_1B662BEAC;
              v86[3] = &unk_1F0FB54A0;
              sub_1B662C2B8((uint64_t)v87, (uint64_t)v99);
              v87[5] = &v92;
              sub_1B64A19B0((uint64_t)v53, (uint64_t)v86);
              sub_1B6491404((uint64_t)v87);
            }
            uint64_t v48 = objc_msgSend_countByEnumeratingWithState_objects_count_(a1, v41, (uint64_t)&v88, (uint64_t)v105, 16);
          }
          while (v48);
        }
        uint64_t v83 = 0xA00000000;
        uint64_t v84 = (float32x4_t *)v85;
        unsigned int v54 = v92;
        if (v92)
        {
          char v55 = 0;
          uint64_t v56 = (CFTypeRef *)v93;
          uint64_t v57 = 8 * v92;
          float32x4_t v80 = 0u;
          do
          {
            CFTypeRef v58 = *v56;
            if (sub_1B63F49F8(*v56, 0, (uint64_t)&v82, v43, v44, v45, v46, v47))
            {
              uint64_t v61 = (float32x4_t *)sub_1B64A01D4((uint64_t)v58, v59, v60, v43, v44, v45, v46, v47);
              sub_1B6403C2C(&v82, v61, &v82);
              if ((v55 & 1) != 0
                && (float32x4_t v62 = vsubq_f32(v80, v82),
                    float32x4_t v63 = vmulq_f32(v62, v62),
                    float v64 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v63, 2), vaddq_f32(v63, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v63.f32, 1))).f32[0]), (float)(v80.f32[3] + v64) >= v82.f32[3]))
              {
                if ((float)(v82.f32[3] + v64) > v80.f32[3])
                {
                  float32_t v65 = (float)((float)(v80.f32[3] + v82.f32[3]) + v64) * 0.5;
                  float32x4_t v66 = vmlaq_n_f32(v80, v62, (float)(v80.f32[3] - v65) / v64);
                  v66.f32[3] = v65;
                  float32x4_t v80 = v66;
                }
                char v55 = 1;
              }
              else
              {
                char v55 = 1;
                float32x4_t v80 = v82;
              }
            }
            else if ((v79 & 1) != 0 && (sub_1B64A3BCC((uint64_t)v58) & 1) != 0 {
                   || (v79 & 0x100) != 0 && (sub_1B64A3964((uint64_t)v58, v59, v60, v43, v44, v45, v46, v47) & 1) != 0
            }
                   || (v79 & 0x1000000) != 0 && !sub_1B6477268((uint64_t)v58))
            {
              v81.n128_u32[2] = 0;
              v81.n128_u64[0] = 0;
              sub_1B64A1EC8((uint64_t)v58, &v81, v60, v43, v44, v45, v46, v47);
              sub_1B662BF14((uint64_t)&v83, &v81);
            }
            ++v56;
            v57 -= 8;
          }
          while (v57);
          uint64_t v67 = v84;
          unsigned int v54 = v83;
          float32x4_t v68 = v80;
        }
        else
        {
          char v55 = 0;
          float32x4_t v68 = 0uLL;
          uint64_t v67 = (float32x4_t *)v85;
        }
        float v69 = v68.f32[3];
        if (v68.f32[3] >= 1.0 || v68.f32[3] <= 0.0) {
          float v69 = 1.0;
        }
        if (v54)
        {
          uint64_t v71 = 16 * v54;
          uint64_t v72 = v67;
          do
          {
            float32x4_t v73 = *v72;
            v73.f32[3] = v69;
            if (v55)
            {
              float32x4_t v74 = vsubq_f32(v68, *v72);
              float32x4_t v75 = vmulq_f32(v74, v74);
              float v76 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v75, 2), vaddq_f32(v75, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v75.f32, 1))).f32[0]);
              if ((float)(v68.f32[3] + v76) >= v69)
              {
                if ((float)(v69 + v76) > v68.f32[3])
                {
                  float32_t v77 = (float)((float)(v69 + v68.f32[3]) + v76) * 0.5;
                  float32x4_t v68 = vmlaq_n_f32(v68, v74, (float)(v68.f32[3] - v77) / v76);
                  v68.f32[3] = v77;
                }
                float32x4_t v73 = v68;
              }
            }
            ++v72;
            char v55 = 1;
            float32x4_t v68 = v73;
            v71 -= 16;
          }
          while (v71);
        }
        if (HIDWORD(v83)) {
          BOOL v78 = v67 == (float32x4_t *)v85;
        }
        else {
          BOOL v78 = 1;
        }
        if (!v78) {
          free(v67);
        }
        if (HIDWORD(v92))
        {
          if (v93 != v94) {
            free(v93);
          }
        }
        sub_1B6491404((uint64_t)v99);
        return (void *)((uint64_t (*)(void *))v102)(v101);
      }
    }
  }
  return result;
}

void sub_1B662BE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,int a59,int a60,void *a61)
{
  if (a60)
  {
    if (a61 != (void *)a11) {
      free(a61);
    }
  }
  sub_1B6491404((uint64_t)&STACK[0x230]);
  ((void (*)(unint64_t *))STACK[0x268])(&STACK[0x258]);
  _Unwind_Resume(a1);
}

uint64_t sub_1B662BEA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  return sub_1B64B0CB4(*(void *)(a1 + 32), a2, a3, a4, a5, a6, a7, a8);
}

uint64_t sub_1B662BEAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  if (sub_1B662C1CC((void *)(a1 + 32), &v4)) {
    return 1;
  }
  sub_1B63D4868(*(void *)(a1 + 72), &v4);
  return 0;
}

uint64_t sub_1B662BF00(uint64_t a1, uint64_t a2)
{
  return sub_1B662C2B8(a1 + 32, a2 + 32);
}

uint64_t sub_1B662BF0C(uint64_t a1)
{
  return sub_1B6491404(a1 + 32);
}

__n128 sub_1B662BF14(uint64_t a1, __n128 *a2)
{
  unsigned int v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 + 1) > *(_DWORD *)(a1 + 4))
  {
    sub_1B662C584((unsigned int *)a1, 1, 0);
    unsigned int v4 = *(_DWORD *)a1;
  }
  __n128 result = *a2;
  *(__n128 *)(*(void *)(a1 + 8) + 16 * v4) = *a2;
  ++*(_DWORD *)a1;
  return result;
}

void *sub_1B662BF74(uint64_t a1, void *a2, uint64_t a3, void **a4)
{
  unint64_t v7 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v8 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v7 >> 47) ^ v7);
  unint64_t v9 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
  unint64_t v10 = *(void *)(a1 + 8);
  if (v10)
  {
    uint8x8_t v11 = (uint8x8_t)vcnt_s8((int8x8_t)v10);
    v11.i16[0] = vaddlv_u8(v11);
    if (v11.u32[0] > 1uLL)
    {
      unint64_t v4 = 0x9DDFEA08EB382D69 * (v8 ^ (v8 >> 47));
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
    }
    else
    {
      unint64_t v4 = v9 & (v10 - 1);
    }
    uint64_t v12 = *(void ***)(*(void *)a1 + 8 * v4);
    if (v12)
    {
      for (uint64_t i = *v12; i; uint64_t i = (void *)*i)
      {
        unint64_t v14 = i[1];
        if (v14 == v9)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v11.u32[0] > 1uLL)
          {
            if (v14 >= v10) {
              v14 %= v10;
            }
          }
          else
          {
            v14 &= v10 - 1;
          }
          if (v14 != v4) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v9;
  i[2] = **a4;
  i[3] = 0;
  float v15 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v16 = *(float *)(a1 + 32);
  if (!v10 || (float)(v16 * (float)v10) < v15)
  {
    BOOL v17 = 1;
    if (v10 >= 3) {
      BOOL v17 = (v10 & (v10 - 1)) != 0;
    }
    unint64_t v18 = v17 | (2 * v10);
    unint64_t v19 = vcvtps_u32_f32(v15 / v16);
    if (v18 <= v19) {
      size_t v20 = v19;
    }
    else {
      size_t v20 = v18;
    }
    sub_1B63C8630(a1, v20);
    unint64_t v10 = *(void *)(a1 + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v9 >= v10) {
        unint64_t v4 = v9 % v10;
      }
      else {
        unint64_t v4 = v9;
      }
    }
    else
    {
      unint64_t v4 = (v10 - 1) & v9;
    }
  }
  uint64_t v21 = *(void *)a1;
  uint64_t v22 = *(void **)(*(void *)a1 + 8 * v4);
  if (v22)
  {
    *uint64_t i = *v22;
LABEL_38:
    *uint64_t v22 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v21 + 8 * v4) = a1 + 16;
  if (*i)
  {
    unint64_t v23 = *(void *)(*i + 8);
    if ((v10 & (v10 - 1)) != 0)
    {
      if (v23 >= v10) {
        v23 %= v10;
      }
    }
    else
    {
      v23 &= v10 - 1;
    }
    uint64_t v22 = (void *)(*(void *)a1 + 8 * v23);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B662C1B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1B662C1CC(void *a1, void *a2)
{
  int8x8_t v2 = (int8x8_t)a1[1];
  if (!*(void *)&v2) {
    return 0;
  }
  unint64_t v3 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v4 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v3 >> 47) ^ v3);
  unint64_t v5 = 0x9DDFEA08EB382D69 * (v4 ^ (v4 >> 47));
  uint8x8_t v6 = (uint8x8_t)vcnt_s8(v2);
  v6.i16[0] = vaddlv_u8(v6);
  if (v6.u32[0] > 1uLL)
  {
    unint64_t v7 = v5;
    if (v5 >= *(void *)&v2) {
      unint64_t v7 = v5 % *(void *)&v2;
    }
  }
  else
  {
    unint64_t v7 = v5 & (*(void *)&v2 - 1);
  }
  unint64_t v8 = *(void **)(*a1 + 8 * v7);
  if (!v8) {
    return 0;
  }
  __n128 result = (void *)*v8;
  if (*v8)
  {
    do
    {
      unint64_t v10 = result[1];
      if (v5 == v10)
      {
        if (result[2] == *a2) {
          return result;
        }
      }
      else
      {
        if (v6.u32[0] > 1uLL)
        {
          if (v10 >= *(void *)&v2) {
            v10 %= *(void *)&v2;
          }
        }
        else
        {
          v10 &= *(void *)&v2 - 1;
        }
        if (v10 != v7) {
          return 0;
        }
      }
      __n128 result = (void *)*result;
    }
    while (result);
  }
  return result;
}

uint64_t sub_1B662C2B8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  sub_1B63C8630(a1, *(void *)(a2 + 8));
  for (uint64_t i = *(void **)(a2 + 16); i; uint64_t i = (void *)*i)
    sub_1B662C330(a1, i + 2, (_OWORD *)i + 1);
  return a1;
}

void sub_1B662C318(_Unwind_Exception *a1)
{
  sub_1B6491404(v1);
  _Unwind_Resume(a1);
}

void *sub_1B662C330(uint64_t a1, void *a2, _OWORD *a3)
{
  unint64_t v6 = 0x9DDFEA08EB382D69 * ((8 * *a2 + 8) ^ HIDWORD(*a2));
  unint64_t v7 = 0x9DDFEA08EB382D69 * (HIDWORD(*a2) ^ (v6 >> 47) ^ v6);
  unint64_t v8 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v3 = 0x9DDFEA08EB382D69 * (v7 ^ (v7 >> 47));
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
    }
    else
    {
      unint64_t v3 = v8 & (v9 - 1);
    }
    uint8x8_t v11 = *(void ***)(*(void *)a1 + 8 * v3);
    if (v11)
    {
      for (uint64_t i = *v11; i; uint64_t i = (void *)*i)
      {
        unint64_t v13 = i[1];
        if (v13 == v8)
        {
          if (i[2] == *a2) {
            return i;
          }
        }
        else
        {
          if (v10.u32[0] > 1uLL)
          {
            if (v13 >= v9) {
              v13 %= v9;
            }
          }
          else
          {
            v13 &= v9 - 1;
          }
          if (v13 != v3) {
            break;
          }
        }
      }
    }
  }
  uint64_t i = operator new(0x20uLL);
  *uint64_t i = 0;
  i[1] = v8;
  *((_OWORD *)i + 1) = *a3;
  float v14 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v15 = *(float *)(a1 + 32);
  if (!v9 || (float)(v15 * (float)v9) < v14)
  {
    BOOL v16 = 1;
    if (v9 >= 3) {
      BOOL v16 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v17 = v16 | (2 * v9);
    unint64_t v18 = vcvtps_u32_f32(v14 / v15);
    if (v17 <= v18) {
      size_t v19 = v18;
    }
    else {
      size_t v19 = v17;
    }
    sub_1B63C8630(a1, v19);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v3 = v8 % v9;
      }
      else {
        unint64_t v3 = v8;
      }
    }
    else
    {
      unint64_t v3 = (v9 - 1) & v8;
    }
  }
  uint64_t v20 = *(void *)a1;
  uint64_t v21 = *(void **)(*(void *)a1 + 8 * v3);
  if (v21)
  {
    *uint64_t i = *v21;
LABEL_38:
    *uint64_t v21 = i;
    goto LABEL_39;
  }
  *uint64_t i = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = i;
  *(void *)(v20 + 8 * v3) = a1 + 16;
  if (*i)
  {
    unint64_t v22 = *(void *)(*i + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v22 >= v9) {
        v22 %= v9;
      }
    }
    else
    {
      v22 &= v9 - 1;
    }
    uint64_t v21 = (void *)(*(void *)a1 + 8 * v22);
    goto LABEL_38;
  }
LABEL_39:
  ++*(void *)(a1 + 24);
  return i;
}

void sub_1B662C570(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_1B662C584(unsigned int *a1, int a2, int a3)
{
  unint64_t v4 = (unsigned int *)*((void *)a1 + 1);
  unint64_t v5 = a1 + 4;
  double v6 = 1.5;
  if (a3) {
    double v6 = 1.0;
  }
  unsigned int v7 = (v6 * (double)(a1[1] + a2));
  unint64_t v8 = malloc_type_malloc(16 * v7, 0xD5346062uLL);
  memset(v8, 255, 16 * v7);
  memcpy(v8, v4, 16 * *a1);
  *((void *)a1 + 1) = v8;
  a1[1] = v7;
  if (v4 != v5)
  {
    free(v4);
  }
}

double sub_1B662C928(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend__hingeHandle(*(void **)(a1 + 48), a2, a3, a4);
  if (v5)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 40);
    v8.i64[0] = *(void *)(a1 + 32);
    v8.i64[1] = v7;
    *(void *)&double result = sub_1B662C978(v5, &v8).u64[0];
  }
  return result;
}

float32x4_t sub_1B662C978(uint64_t a1, float32x4_t *a2)
{
  float v2 = a2->f32[2];
  float v3 = a2->f32[1];
  if (fabsf(v2) <= 0.70711)
  {
    float v12 = (float)(v3 * v3) + (float)(a2->f32[0] * a2->f32[0]);
    float v13 = 1.0 / sqrtf(v12);
    v9.i64[1] = 0;
    *(float *)v9.i32 = -(float)(v3 * v13);
    *(float *)&v9.i32[1] = a2->f32[0] * v13;
    float v8 = -(float)(v2 * *(float *)&v9.i32[1]);
    float v10 = v2 * *(float *)v9.i32;
    float v11 = v12 * v13;
  }
  else
  {
    float v4 = (float)(v2 * v2) + (float)(v3 * v3);
    float v5 = 1.0 / sqrtf(v4);
    *(float *)&__int32 v6 = -(float)(v2 * v5);
    *(float *)&unsigned int v7 = v3 * v5;
    float v8 = v4 * v5;
    v9.i32[0] = 0;
    v9.i32[1] = v6;
    v9.i64[1] = v7;
    float v10 = -(float)(a2->f32[0] * *(float *)&v7);
    float v11 = a2->f32[0] * *(float *)&v6;
  }
  float32x4_t v14 = *(float32x4_t *)(a1 + 704);
  *(_DWORD *)(a1 + 656) = v9.i32[0];
  *(float *)(a1 + 660) = v8;
  *(_DWORD *)(a1 + 664) = a2->i32[0];
  *(_DWORD *)(a1 + 668) = 0;
  *(_DWORD *)(a1 + 672) = v9.i32[1];
  *(float *)(a1 + 676) = v10;
  *(_DWORD *)(a1 + 680) = a2->i32[1];
  *(_DWORD *)(a1 + 684) = 0;
  *(_DWORD *)(a1 + 688) = v9.i32[2];
  *(float *)(a1 + 692) = v11;
  *(_DWORD *)(a1 + 696) = a2->i32[2];
  *(_DWORD *)(a1 + 700) = 0;
  float v15 = *(float32x4_t **)(a1 + 40);
  float32x4_t v16 = *a2;
  float32x4_t v17 = v15[1];
  float32x4_t v18 = v15[2];
  int8x16_t v19 = (int8x16_t)vmulq_f32(v17, *a2);
  int8x16_t v20 = (int8x16_t)vmulq_f32(*a2, v18);
  float32x4_t v21 = v15[3];
  int8x16_t v22 = (int8x16_t)vmulq_f32(*a2, v21);
  v22.i32[3] = 0;
  int8x8_t v23 = (int8x8_t)vadd_f32(vpadd_f32(*(float32x2_t *)v19.i8, *(float32x2_t *)v20.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v19, v19, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v20, v20, 8uLL)));
  int8x8_t v24 = (int8x8_t)vpadd_f32(vpadd_f32(*(float32x2_t *)v22.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v22, v22, 8uLL)), 0);
  *(int8x8_t *)v25.f32 = vext_s8(v23, v24, 4uLL);
  *(int8x8_t *)&v25.u32[2] = v23;
  *(int8x8_t *)v26.f32 = v23;
  *(int8x8_t *)&v26.u32[2] = v24;
  int8x16_t v27 = (int8x16_t)vmulq_f32(*a2, v26);
  float v28 = vadd_f32(vpadd_f32(*(float32x2_t *)v27.i8, *(float32x2_t *)v27.i8), (float32x2_t)*(_OWORD *)&vextq_s8(v27, v27, 8uLL)).f32[0];
  if (v28 >= -1.0)
  {
    v38.i64[0] = vextq_s8((int8x16_t)v16, (int8x16_t)v16, 4uLL).u64[0];
    v38.i64[1] = a2->i64[0];
    int8x16_t v39 = (int8x16_t)vsubq_f32(vmulq_f32(v16, v25), vmulq_f32(v38, v26));
    float32x4_t v40 = (float32x4_t)vextq_s8(vextq_s8(v39, v39, 0xCuLL), v39, 8uLL);
    v40.i32[3] = sqrtf((float)(v28 + 1.0) + (float)(v28 + 1.0));
    v41.i32[1] = 1056964608;
    v41.i64[1] = 0x3F0000003F000000;
    *(float *)v41.i32 = 1.0 / v40.f32[3];
    float32x4_t v42 = (float32x4_t)vzip1q_s32(v41, v41);
    v42.f32[2] = 1.0 / v40.f32[3];
    float32x4_t v37 = vmulq_f32(v40, v42);
  }
  else
  {
    LODWORD(v29) = HIDWORD(a2->i64[0]);
    float v30 = fabsf(v16.f32[2]);
    float v31 = 1.0 / sqrtf((float)(v29 * v29) + (float)(v16.f32[0] * v16.f32[0]));
    float v32 = -(float)(v16.f32[1] * v31);
    float v33 = v16.f32[0] * v31;
    float v34 = v32;
    v16.f32[0] = 1.0 / sqrtf((float)(v16.f32[2] * v16.f32[2]) + (float)(v29 * v29));
    float v35 = v16.f32[1] * v16.f32[0];
    if (v30 <= 0.70711)
    {
      float v36 = v33;
    }
    else
    {
      float v34 = 0.0;
      float v36 = -(float)(v16.f32[2] * v16.f32[0]);
    }
    if (v30 <= 0.70711) {
      float v35 = 0.0;
    }
    v37.i64[0] = __PAIR64__(LODWORD(v36), LODWORD(v34));
    v37.i64[1] = LODWORD(v35);
  }
  int32x2_t v43 = (int32x2_t)vextq_s8((int8x16_t)v37, (int8x16_t)v37, 8uLL).u64[0];
  float32x2_t v44 = (float32x2_t)vext_s8((int8x8_t)v43, *(int8x8_t *)v37.f32, 4uLL);
  float32x2_t v45 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 8uLL), *(int32x2_t *)v9.i8);
  float32x2_t v46 = (float32x2_t)vzip1_s32(v43, *(int32x2_t *)v37.f32);
  float32x2_t v47 = (float32x2_t)vext_s8(*(int8x8_t *)v37.f32, (int8x8_t)v43, 4uLL);
  *(float32x2_t *)v48.f32 = vmul_f32((float32x2_t)*(_OWORD *)&vextq_s8(v9, v9, 4uLL), v46);
  *(float32x2_t *)&v48.u32[2] = vmul_f32((float32x2_t)vrev64_s32((int32x2_t)v45), v47);
  *(float32x2_t *)v49.i8 = vadd_f32(vmul_laneq_f32(*(float32x2_t *)v9.i8, v37, 3), vmul_f32(v45, v47));
  v49.u64[1] = (unint64_t)vadd_f32(vmul_lane_f32(*(float32x2_t *)v37.f32, *(float32x2_t *)v9.i8, 1), vmul_f32(v45, v44));
  float32x4_t v50 = vsubq_f32((float32x4_t)veorq_s8(v49, (int8x16_t)xmmword_1B6E72E20), v48);
  float32x4_t v51 = (float32x4_t)veorq_s8((int8x16_t)v37, (int8x16_t)xmmword_1B6E72E30);
  float32x2_t v52 = (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v50, (int8x16_t)v50, 8uLL), *(int32x2_t *)v50.f32);
  int32x2_t v53 = (int32x2_t)vextq_s8((int8x16_t)v51, (int8x16_t)v51, 8uLL).u64[0];
  *(int32x2_t *)v48.f32 = vzip1_s32(v53, *(int32x2_t *)v51.f32);
  float32x2_t v54 = (float32x2_t)vextq_s8((int8x16_t)v50, (int8x16_t)v50, 4uLL).u64[0];
  float32x2_t v55 = vmul_laneq_f32(*(float32x2_t *)v50.f32, v51, 3);
  float32x2_t v56 = vmul_f32((float32x2_t)vext_s8((int8x8_t)v53, *(int8x8_t *)v51.f32, 4uLL), v52);
  *(float32x2_t *)v57.f32 = vmul_f32((float32x2_t)vext_s8(*(int8x8_t *)v51.f32, (int8x8_t)v53, 4uLL), v52);
  *(float32x2_t *)&v57.u32[2] = vmul_f32((float32x2_t)vrev64_s32(*(int32x2_t *)v48.f32), v54);
  float32x2_t v58 = vmul_lane_f32(*(float32x2_t *)v50.f32, *(float32x2_t *)v51.f32, 1);
  float32x4_t v59 = vmulq_laneq_f32(v51, v50, 3);
  *(float32x2_t *)v50.f32 = vadd_f32(v55, vmul_f32(*(float32x2_t *)v48.f32, v54));
  *(float32x2_t *)&v50.u32[2] = vadd_f32(v58, v56);
  float32x4_t v60 = vaddq_f32(vsubq_f32(v59, v57), (float32x4_t)veorq_s8((int8x16_t)v50, (int8x16_t)xmmword_1B6E72E20));
  v59.i64[0] = vextq_s8((int8x16_t)v60, (int8x16_t)v60, 8uLL).u64[0];
  v60.i32[3] = 0;
  *(int8x8_t *)v59.f32 = vext_s8(*(int8x8_t *)v60.f32, *(int8x8_t *)v59.f32, 4uLL);
  v59.i64[1] = v60.i64[0];
  uint64_t v61 = *(void *)(a1 + 48);
  float32x4_t v62 = *(float32x4_t *)(v61 + 16);
  int32x4_t v63 = *(int32x4_t *)(v61 + 32);
  int8x16_t v64 = *(int8x16_t *)(v61 + 48);
  float32x4_t v65 = (float32x4_t)vtrn1q_s32((int32x4_t)v62, v63);
  int32x2_t v66 = vzip2_s32(*(int32x2_t *)v64.i8, 0);
  unsigned __int32 v67 = vextq_s8(v64, v64, 8uLL).u32[0];
  _Q25.i64[0] = vextq_s8((int8x16_t)v65, (int8x16_t)v65, 8uLL).u64[0];
  v65.i64[1] = v64.u32[0];
  v64.i64[0] = 0x8000000080000000;
  v64.i64[1] = 0x8000000080000000;
  float32x4_t v69 = (float32x4_t)veorq_s8(*(int8x16_t *)(v61 + 64), v64);
  _Q21 = (int8x16_t)vmulq_f32(v65, v69);
  *(int32x2_t *)v62.f32 = vzip2_s32(*(int32x2_t *)v62.f32, *(int32x2_t *)v63.i8);
  *(int32x2_t *)&v62.u32[2] = v66;
  _Q19 = (int8x16_t)vmulq_f32(v62, v69);
  _Q25.i64[1] = v67;
  _Q20 = (int8x16_t)vmulq_f32(_Q25, v69);
  _Q20.i32[3] = 0;
  float32x4_t v73 = vmulq_f32(v14, v17);
  int8x16_t v74 = (int8x16_t)vmulq_f32(v14, v18);
  int8x16_t v75 = (int8x16_t)vmulq_f32(v14, v21);
  v75.i32[3] = 0;
  *(float32x2_t *)v73.f32 = vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8((int8x16_t)v73, (int8x16_t)v73, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v74, v74, 8uLL)), vpadd_f32(*(float32x2_t *)v73.f32, *(float32x2_t *)v74.i8));
  *(float32x2_t *)&v73.u32[2] = vpadd_f32(vpadd_f32(*(float32x2_t *)v75.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v75, v75, 8uLL)), 0);
  float32x4_t v76 = vaddq_f32(v73, v15[4]);
  int8x16_t v77 = (int8x16_t)vmulq_f32(v65, v76);
  _Q4 = (int8x16_t)vmulq_f32(v62, v76);
  int8x16_t v79 = (int8x16_t)vmulq_f32(_Q25, v76);
  v79.i32[3] = 0;
  *(float32x2_t *)v77.i8 = vadd_f32(vadd_f32(vpadd_f32(*(float32x2_t *)_Q21.i8, *(float32x2_t *)_Q19.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(_Q21, _Q21, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(_Q19, _Q19, 8uLL))), vadd_f32(vpadd_f32(*(float32x2_t *)v77.i8, *(float32x2_t *)_Q4.i8), (float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v77, v77, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(_Q4, _Q4, 8uLL))));
  v77.u64[1] = (unint64_t)vadd_f32(vpadd_f32(vpadd_f32(*(float32x2_t *)_Q20.i8, (float32x2_t)*(_OWORD *)&vextq_s8(_Q20, _Q20, 8uLL)), 0), vpadd_f32(vpadd_f32(*(float32x2_t *)v79.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v79, v79, 8uLL)), 0));
  _Q2 = (int32x4_t)vsubq_f32(vmulq_f32(v26, v59), vmulq_f32(v25, v60));
  *(int8x16_t *)(a1 + 768) = v77;
  *(int8x8_t *)v77.i8 = vext_s8(*(int8x8_t *)v60.f32, (int8x8_t)*(_OWORD *)&vextq_s8((int8x16_t)_Q2, (int8x16_t)_Q2, 8uLL), 4uLL);
  _Q4.i64[0] = vzip2q_s32((int32x4_t)v60, vuzp1q_s32((int32x4_t)v60, _Q2)).u64[0];
  v60.i32[1] = _Q2.i32[1];
  *(void *)(a1 + 720) = v60.i64[0];
  *(_DWORD *)(a1 + 728) = v23.i32[0];
  *(_DWORD *)(a1 + 732) = 0;
  *(void *)(a1 + 736) = v77.i64[0];
  *(_DWORD *)(a1 + 744) = v23.i32[1];
  *(_DWORD *)(a1 + 748) = 0;
  *(void *)(a1 + 752) = _Q4.i64[0];
  *(_DWORD *)(a1 + 760) = v24.i32[0];
  *(_DWORD *)(a1 + 764) = 0;
  _S1 = *(float *)(v61 + 52);
  _Q2.i32[0] = *(_DWORD *)(v61 + 56);
  float v82 = *(float *)(v61 + 36);
  _Q4.i32[0] = *(_DWORD *)(v61 + 40);
  _Q19.i32[0] = *(_DWORD *)(v61 + 48);
  _Q20.i32[0] = *(_DWORD *)(v61 + 32);
  _Q5 = *(float32x4_t *)(v61 + 16);
  float32x4_t v85 = *(float32x4_t *)(a1 + 720);
  float32x4_t v84 = *(float32x4_t *)(a1 + 736);
  float32x4_t result = *(float32x4_t *)(a1 + 752);
  result.i32[3] = 0;
  v62.f32[0] = (float)(v82 * *(float *)_Q2.i32) - (float)(*(float *)_Q4.i32 * _S1);
  v87.i32[3] = 0;
  v87.f32[0] = v62.f32[0];
  v87.f32[1] = (float)(*(float *)_Q4.i32 * *(float *)_Q19.i32) - (float)(*(float *)_Q20.i32 * *(float *)_Q2.i32);
  v87.f32[2] = (float)(*(float *)_Q20.i32 * _S1) - (float)(v82 * *(float *)_Q19.i32);
  int8x16_t v88 = (int8x16_t)vmulq_f32(_Q5, v87);
  *(float *)v88.i32 = 1.0
                    / vadd_f32((float32x2_t)*(_OWORD *)&vextq_s8(v88, v88, 8uLL), vpadd_f32(*(float32x2_t *)v88.i8, *(float32x2_t *)v88.i8)).f32[0];
  v84.i32[3] = 0;
  __asm { FMLA            S25, S19, V5.S[1] }
  v85.i32[3] = 0;
  float32x4_t v93 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v85, (float)((float)(*(float *)_Q20.i32 * _S1) - (float)(v82 * *(float *)_Q19.i32)) * *(float *)v88.i32), v84, _Q25.f32[0] * *(float *)v88.i32), result, vmlas_n_f32(-(float)(COERCE_FLOAT(HIDWORD(*(void *)(v61 + 16))) * *(float *)_Q20.i32), v82, _Q5.f32[0])* *(float *)v88.i32);
  __asm { FMLA            S21, S20, V5.S[2] }
  float32x4_t v94 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v85, (float)((float)(*(float *)_Q4.i32 * *(float *)_Q19.i32) - (float)(*(float *)_Q20.i32 * *(float *)_Q2.i32))* *(float *)v88.i32), v84, vmlas_n_f32(-(float)(COERCE_FLOAT(*(void *)(v61 + 24)) * *(float *)_Q19.i32), *(float *)_Q2.i32, _Q5.f32[0])* *(float *)v88.i32), result, *(float *)_Q21.i32 * *(float *)v88.i32);
  __asm
  {
    FMLA            S16, S4, V5.S[1]
    FMLA            S2, S1, V5.S[2]
  }
  *(float32x4_t *)(a1 + 720) = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(v85, v62.f32[0] * *(float *)v88.i32), v84, *(float *)_Q2.i32 * *(float *)v88.i32), result, _S16 * *(float *)v88.i32);
  *(float32x4_t *)(a1 + 736) = v94;
  *(float32x4_t *)(a1 + 752) = v93;
  return result;
}

double sub_1B662CF14(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = objc_msgSend__hingeHandle(*(void **)(a1 + 48), a2, a3, a4);
  if (v5)
  {
    unsigned int v7 = *(_DWORD *)(a1 + 40);
    v8.i64[0] = *(void *)(a1 + 32);
    v8.i64[1] = v7;
    *(void *)&double result = sub_1B662C978(v5, &v8).u64[0];
  }
  return result;
}

_OWORD *sub_1B662D008(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  double result = (_OWORD *)objc_msgSend__hingeHandle(*(void **)(a1 + 48), a2, a3, a4);
  if (result)
  {
    long long v6 = result[42];
    v12[0] = result[41];
    v12[1] = v6;
    long long v7 = result[43];
    long long v8 = result[46];
    v11[0] = result[45];
    v11[1] = v8;
    long long v9 = result[48];
    void v11[2] = result[47];
    v11[3] = v9;
    long long v10 = *(_OWORD *)(a1 + 32);
    HIDWORD(v10) = 0;
    v12[2] = v7;
    v12[3] = v10;
    return (_OWORD *)sub_1B6DFBC3C(result, v12, v11);
  }
  return result;
}

_OWORD *sub_1B662D11C(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4)
{
  double result = (_OWORD *)objc_msgSend__hingeHandle(*(void **)(a1 + 48), a2, a3, a4);
  if (result)
  {
    long long v6 = result[42];
    v11[0] = result[41];
    v11[1] = v6;
    long long v7 = result[44];
    void v11[2] = result[43];
    v11[3] = v7;
    long long v8 = result[46];
    v10[0] = result[45];
    v10[1] = v8;
    long long v9 = *(_OWORD *)(a1 + 32);
    HIDWORD(v9) = 0;
    void v10[2] = result[47];
    v10[3] = v9;
    return (_OWORD *)sub_1B6DFBC3C(result, v11, v10);
  }
  return result;
}

void sub_1B662D2D0(_Unwind_Exception *a1)
{
  sub_1B6E073C4(v1);
  _Unwind_Resume(a1);
}

void sub_1B662DCA0(const __CFDictionary *a1, const void *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (CFDictionaryGetValue(a1, a2)) {
    sub_1B63F2F54(17, @"Assertion '%s' failed. uniform %@ already set", v10, v11, v12, v13, v14, v15, (uint64_t)"CFDictionaryGetValue(dic, uniformName) == NULL");
  }
  float32x4_t v16 = sub_1B63CA51C(0x18uLL);
  v16[1] = a4;
  v16[2] = a5;
  *float32x4_t v16 = a3;

  CFDictionarySetValue(a1, a2, v16);
}

uint64_t sub_1B662DD38()
{
  if (qword_1E9DDBF88 != -1) {
    dispatch_once(&qword_1E9DDBF88, &unk_1F0FB60A8);
  }
  return qword_1E9DDBF80;
}

void sub_1B662DD7C()
{
  qword_1E9DDBF80 = (uint64_t)CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x1E4F1CF80], 20, MEMORY[0x1E4F1D530], 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_frame.time", @"float", 0, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_frame.invScreenPixelSize", @"float2", 1, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_node.modelTransform", @"float4x4", 2, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_node.inverseModelTransform", @"float4x4", 3, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_node.modelViewTransform", @"float4x4", 4, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_node.inverseModelViewTransform", @"float4x4", 5, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_node.normalTransform", @"float4x4", 6, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_node.modelViewProjectionTransform", @"float4x4", 7, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_node.inverseModelViewProjectionTransform", @"float4x4", 8, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_node.boundingBox", @"float2x3", 10, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_node.worldBoundingBox", @"float2x3", 11, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_frame.viewTransform", @"float4x4", 12, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_frame.inverseViewTransform", @"float4x4", 13, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_frame.projectionTransform", @"float4x4", 14, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_frame.inverseProjectionTransform", @"float4x4", 15, 0);
  sub_1B662DCA0((const __CFDictionary *)qword_1E9DDBF80, @"vfx_frame.cameraPosition", @"float3", 17, 0);
  CFDictionaryRef v0 = (const __CFDictionary *)qword_1E9DDBF80;

  sub_1B662DCA0(v0, @"vfx_frame.viewToCubeWorld", @"float4x4", 16, 0);
}

uint64_t sub_1B662DFC8(uint64_t *a1)
{
  uint64_t result = sub_1B63C8D10(a1);
  *a1 = result;
  return result;
}

uint64_t sub_1B662DFF8()
{
  if (qword_1E9DDBF98[0] != -1) {
    dispatch_once_f(qword_1E9DDBF98, &qword_1E9DDBF90, (dispatch_function_t)sub_1B662DFC8);
  }
  CFTypeID v0 = qword_1E9DDBF90;

  return sub_1B63C8D44(v0, 0x90uLL);
}

uint64_t sub_1B662E060(uint64_t a1)
{
  return (*(void *)(a1 + 24) - *(void *)(a1 + 16)) >> 4;
}

uint64_t sub_1B662E070(uint64_t a1)
{
  return ((int)((*(void *)(a1 + 48) - *(void *)(a1 + 40)) >> 2) / 2);
}

void sub_1B662E08C(void *a1, uint64_t a2, int a3, uint64_t a4, int a5)
{
  long long v9 = (char **)(a1 + 2);
  sub_1B6427B4C((uint64_t)(a1 + 2), 0);
  if (a3 >= 1)
  {
    uint64_t v10 = 0;
    uint64_t v11 = a1 + 4;
    uint64_t v12 = (char *)a1[3];
    do
    {
      if ((unint64_t)v12 >= *v11)
      {
        uint64_t v13 = (v12 - *v9) >> 4;
        if ((unint64_t)(v13 + 1) >> 60) {
LABEL_56:
        }
          abort();
        uint64_t v14 = *v11 - (void)*v9;
        uint64_t v15 = v14 >> 3;
        if (v14 >> 3 <= (unint64_t)(v13 + 1)) {
          uint64_t v15 = v13 + 1;
        }
        if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v16 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v16 = v15;
        }
        if (v16) {
          float32x4_t v17 = (char *)sub_1B6427C8C((uint64_t)(a1 + 4), v16);
        }
        else {
          float32x4_t v17 = 0;
        }
        float32x4_t v18 = &v17[16 * v13];
        *(_OWORD *)float32x4_t v18 = *(_OWORD *)(a2 + 16 * v10);
        uint64_t v12 = v18 + 16;
        int8x16_t v20 = (char *)a1[2];
        int8x16_t v19 = (char *)a1[3];
        if (v19 != v20)
        {
          do
          {
            long long v21 = *((_OWORD *)v19 - 1);
            v19 -= 16;
            *((_OWORD *)v18 - 1) = v21;
            v18 -= 16;
          }
          while (v19 != v20);
          int8x16_t v19 = *v9;
        }
        a1[2] = v18;
        a1[3] = v12;
        a1[4] = &v17[16 * v16];
        if (v19) {
          operator delete(v19);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v12 = *(_OWORD *)(a2 + 16 * v10);
        v12 += 16;
      }
      a1[3] = v12;
      ++v10;
    }
    while (v10 != a3);
  }
  int8x16_t v22 = (void **)(a1 + 5);
  sub_1B642863C((uint64_t)(a1 + 5), 0);
  if (a5 >= 1)
  {
    uint64_t v23 = 0;
    int8x8_t v24 = (char **)(a1 + 7);
    float32x4_t v25 = (char *)a1[6];
    do
    {
      float32x4_t v26 = *v24;
      if (v25 >= *v24)
      {
        float v28 = (char *)*v22;
        uint64_t v29 = (v25 - (unsigned char *)*v22) >> 2;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 62) {
          goto LABEL_56;
        }
        uint64_t v31 = v26 - v28;
        if (v31 >> 1 > v30) {
          unint64_t v30 = v31 >> 1;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v32 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32)
        {
          float v33 = (char *)sub_1B64282E0((uint64_t)(a1 + 7), v32);
          float v28 = (char *)a1[5];
          float32x4_t v25 = (char *)a1[6];
        }
        else
        {
          float v33 = 0;
        }
        float v34 = &v33[4 * v29];
        *(_DWORD *)float v34 = *(_DWORD *)(a4 + 8 * v23);
        int8x16_t v27 = v34 + 4;
        while (v25 != v28)
        {
          int v35 = *((_DWORD *)v25 - 1);
          v25 -= 4;
          *((_DWORD *)v34 - 1) = v35;
          v34 -= 4;
        }
        float32x4_t v26 = &v33[4 * v32];
        a1[5] = v34;
        a1[6] = v27;
        a1[7] = v26;
        if (v28)
        {
          operator delete(v28);
          float32x4_t v26 = *v24;
        }
      }
      else
      {
        *(_DWORD *)float32x4_t v25 = *(_DWORD *)(a4 + 8 * v23);
        int8x16_t v27 = v25 + 4;
      }
      a1[6] = v27;
      uint64_t v36 = (2 * v23) | 1;
      if (v27 >= v26)
      {
        float32x4_t v37 = (char *)*v22;
        uint64_t v38 = (v27 - (unsigned char *)*v22) >> 2;
        unint64_t v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 62) {
          goto LABEL_56;
        }
        uint64_t v40 = v26 - v37;
        if (v40 >> 1 > v39) {
          unint64_t v39 = v40 >> 1;
        }
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v41 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v41 = v39;
        }
        if (v41)
        {
          float32x4_t v42 = (char *)sub_1B64282E0((uint64_t)(a1 + 7), v41);
          float32x4_t v37 = (char *)a1[5];
          int8x16_t v27 = (char *)a1[6];
        }
        else
        {
          float32x4_t v42 = 0;
        }
        int32x2_t v43 = &v42[4 * v38];
        *(_DWORD *)int32x2_t v43 = *(_DWORD *)(a4 + 4 * v36);
        float32x4_t v25 = v43 + 4;
        while (v27 != v37)
        {
          int v44 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *((_DWORD *)v43 - 1) = v44;
          v43 -= 4;
        }
        a1[5] = v43;
        a1[6] = v25;
        a1[7] = &v42[4 * v41];
        if (v37) {
          operator delete(v37);
        }
      }
      else
      {
        *(_DWORD *)int8x16_t v27 = *(_DWORD *)(a4 + 4 * v36);
        float32x4_t v25 = v27 + 4;
      }
      a1[6] = v25;
      ++v23;
    }
    while (v23 != a5);
  }
}

__n128 sub_1B662E360(void *a1, float32x4_t a2, float32x4_t a3)
{
  uint64_t v17 = *MEMORY[0x1E4F143B8];
  float32x4_t v3 = vsubq_f32(a2, a3);
  int8x16_t v4 = (int8x16_t)vaddq_f32(a3, a3);
  float32x4_t v5 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v4, 3);
  v5.i32[0] = v4.i32[0];
  float32x4_t v9 = v3;
  float32x4_t v10 = vaddq_f32(v3, v5);
  float32x4_t v11 = vaddq_f32(v3, (float32x4_t)vextq_s8(v4, (int8x16_t)vuzp2q_s32((int32x4_t)v4, (int32x4_t)v4), 0xCuLL));
  float32x4_t v12 = vaddq_f32(v5, v11);
  int8x16_t v6 = (int8x16_t)vzip2q_s32((int32x4_t)v4, (int32x4_t)v4);
  float32x4_t v7 = (float32x4_t)vextq_s8(v6, v6, 8uLL);
  float32x4_t v13 = vaddq_f32(v3, v7);
  float32x4_t v14 = vaddq_f32(v7, v10);
  float32x4_t v15 = vaddq_f32(v7, v11);
  float32x4_t v16 = vaddq_f32(v7, v12);
  sub_1B662E08C(a1, (uint64_t)&v9, 8, (uint64_t)&unk_1B6E72E44, 12);
  return result;
}

void sub_1B662E40C(void *a1, uint64_t a2)
{
  uint64_t v142 = *MEMORY[0x1E4F143B8];
  float32x4_t v2 = *(float32x4_t *)(a2 + 80);
  int8x16_t v3 = *(int8x16_t *)(a2 + 16);
  int8x16_t v4 = *(int8x16_t *)(a2 + 32);
  float32x4_t v5 = (float32x4_t)vextq_s8(vextq_s8(v4, v4, 0xCuLL), v4, 8uLL);
  float32x4_t v6 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), v3, 0xCuLL);
  float32x4_t v7 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), v4, 0xCuLL);
  float32x4_t v8 = (float32x4_t)vextq_s8(vextq_s8(v3, v3, 0xCuLL), v3, 8uLL);
  float32x4_t v9 = vmlaq_f32(vmulq_f32(v8, vnegq_f32(v7)), v6, v5);
  float32x4_t v10 = vmulq_f32(v2, v9);
  int32x2_t v11 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).u64[0];
  if (*(float *)v11.i32 != 0.0)
  {
    float32x4_t v12 = *(float32x4_t *)(a2 + 80);
    v12.f32[0] = -v2.f32[3];
    int8x16_t v13 = *(int8x16_t *)(a2 + 32);
    *(float *)v13.i32 = -*(float *)&v4.i32[3];
    int8x16_t v14 = *(int8x16_t *)(a2 + 16);
    *(float *)v14.i32 = -*(float *)&v3.i32[3];
    float32x4_t v15 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v14, v14, 0xCuLL), v14, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v13, (int32x4_t)v13), v13, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v14, (int32x4_t)v14), v14, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v13, v13, 0xCuLL), v13, 8uLL));
    float32x4_t v16 = *(float32x4_t *)(a2 + 80);
    v16.f32[1] = -v2.f32[3];
    int8x16_t v17 = *(int8x16_t *)(a2 + 32);
    *(float *)&v17.i32[1] = -*(float *)&v4.i32[3];
    int32x4_t v18 = (int32x4_t)vmulq_f32(v12, v15);
    int8x16_t v19 = *(int8x16_t *)(a2 + 16);
    *(float *)&v19.i32[1] = -*(float *)&v3.i32[3];
    int32x4_t v20 = (int32x4_t)vmulq_f32(v16, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v19, v19, 0xCuLL), v19, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v17, (int32x4_t)v17), v17, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v19, (int32x4_t)v19), v19, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v17, v17, 0xCuLL), v17, 8uLL)));
    *(float32x2_t *)v16.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)v20.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v18.i8, *(int32x2_t *)v20.i8));
    float32x4_t v21 = (float32x4_t)vzip2q_s32(v18, v20);
    *(float32x2_t *)v21.f32 = vadd_f32(*(float32x2_t *)v21.f32, *(float32x2_t *)v16.f32);
    float32x4_t v22 = *(float32x4_t *)(a2 + 80);
    v22.f32[2] = -v2.f32[3];
    int8x16_t v23 = *(int8x16_t *)(a2 + 32);
    *(float *)&v23.i32[2] = -*(float *)&v4.i32[3];
    int8x16_t v24 = *(int8x16_t *)(a2 + 16);
    *(float *)&v24.i32[2] = -*(float *)&v3.i32[3];
    float32x4_t v25 = vmulq_f32(v22, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v24, v24, 0xCuLL), v24, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v23, (int32x4_t)v23), v23, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v24, (int32x4_t)v24), v24, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v23, v23, 0xCuLL), v23, 8uLL)));
    v21.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v25, 2), vaddq_f32(v25, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v25.f32, 1))).u32[0];
    v141[0] = vdivq_f32(v21, (float32x4_t)vdupq_lane_s32(v11, 0));
  }
  int8x16_t v26 = *(int8x16_t *)a2;
  float32x4_t v27 = (float32x4_t)vextq_s8(vextq_s8(v26, v26, 0xCuLL), *(int8x16_t *)a2, 8uLL);
  float32x4_t v28 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), *(int8x16_t *)a2, 0xCuLL);
  float32x4_t v29 = vmlaq_f32(vmulq_f32(v5, vnegq_f32(v28)), v7, v27);
  float32x4_t v30 = vmulq_f32(v2, v29);
  int32x2_t v31 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v30, 2), vaddq_f32(v30, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v30.f32, 1))).u64[0];
  LODWORD(v32) = HIDWORD(*(_OWORD *)a2);
  if (*(float *)v31.i32 != 0.0)
  {
    float32x4_t v33 = v2;
    v33.f32[0] = -v2.f32[3];
    int8x16_t v34 = *(int8x16_t *)a2;
    *(float *)v34.i32 = -v32;
    int8x16_t v35 = v4;
    *(float *)v35.i32 = -*(float *)&v4.i32[3];
    float32x4_t v36 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v35, v35, 0xCuLL), v35, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v34, (int32x4_t)v34), v34, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v35, (int32x4_t)v35), v35, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v34, v34, 0xCuLL), v34, 8uLL));
    float32x4_t v37 = v2;
    v37.f32[1] = -v2.f32[3];
    int8x16_t v38 = *(int8x16_t *)a2;
    *(float *)&v38.i32[1] = -v32;
    int32x4_t v39 = (int32x4_t)vmulq_f32(v33, v36);
    int8x16_t v40 = v4;
    *(float *)&v40.i32[1] = -*(float *)&v4.i32[3];
    int32x4_t v41 = (int32x4_t)vmulq_f32(v37, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v40, v40, 0xCuLL), v40, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v38, (int32x4_t)v38), v38, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v40, (int32x4_t)v40), v40, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v38, v38, 0xCuLL), v38, 8uLL)));
    *(float32x2_t *)v37.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v39.i8, *(int32x2_t *)v41.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v39.i8, *(int32x2_t *)v41.i8));
    float32x4_t v42 = (float32x4_t)vzip2q_s32(v39, v41);
    *(float32x2_t *)v42.f32 = vadd_f32(*(float32x2_t *)v42.f32, *(float32x2_t *)v37.f32);
    float32x4_t v43 = v2;
    v43.f32[2] = -v2.f32[3];
    int8x16_t v44 = *(int8x16_t *)a2;
    *(float *)&v44.i32[2] = -v32;
    int8x16_t v45 = v4;
    *(float *)&v45.i32[2] = -*(float *)&v4.i32[3];
    float32x4_t v46 = vmulq_f32(v43, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v45, v45, 0xCuLL), v45, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v44, (int32x4_t)v44), v44, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v45, (int32x4_t)v45), v45, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v44, v44, 0xCuLL), v44, 8uLL)));
    v42.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v46, 2), vaddq_f32(v46, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v46.f32, 1))).u32[0];
    v141[1] = vdivq_f32(v42, (float32x4_t)vdupq_lane_s32(v31, 0));
  }
  int8x16_t v47 = *(int8x16_t *)(a2 + 48);
  float32x4_t v48 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), v47, 0xCuLL);
  float32x4_t v49 = (float32x4_t)vextq_s8(vextq_s8(v47, v47, 0xCuLL), v47, 8uLL);
  float32x4_t v50 = vmlaq_f32(vmulq_f32(v49, vnegq_f32(v6)), v48, v8);
  float32x4_t v51 = vmulq_f32(v2, v50);
  int32x2_t v52 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v51, 2), vaddq_f32(v51, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v51.f32, 1))).u64[0];
  if (*(float *)v52.i32 != 0.0)
  {
    float32x4_t v53 = v2;
    v53.f32[0] = -v2.f32[3];
    int8x16_t v54 = v3;
    *(float *)v54.i32 = -*(float *)&v3.i32[3];
    int8x16_t v55 = *(int8x16_t *)(a2 + 48);
    *(float *)v55.i32 = -*(float *)&v47.i32[3];
    float32x4_t v56 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v55, v55, 0xCuLL), v55, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54), v54, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55), v55, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v54, v54, 0xCuLL), v54, 8uLL));
    float32x4_t v57 = v2;
    v57.f32[1] = -v2.f32[3];
    int8x16_t v58 = v3;
    *(float *)&v58.i32[1] = -*(float *)&v3.i32[3];
    int32x4_t v59 = (int32x4_t)vmulq_f32(v53, v56);
    int8x16_t v60 = *(int8x16_t *)(a2 + 48);
    *(float *)&v60.i32[1] = -*(float *)&v47.i32[3];
    int32x4_t v61 = (int32x4_t)vmulq_f32(v57, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v60, v60, 0xCuLL), v60, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v58, (int32x4_t)v58), v58, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v60, (int32x4_t)v60), v60, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v58, v58, 0xCuLL), v58, 8uLL)));
    *(float32x2_t *)v57.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v59.i8, *(int32x2_t *)v61.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v59.i8, *(int32x2_t *)v61.i8));
    float32x4_t v62 = (float32x4_t)vzip2q_s32(v59, v61);
    *(float32x2_t *)v62.f32 = vadd_f32(*(float32x2_t *)v62.f32, *(float32x2_t *)v57.f32);
    float32x4_t v63 = v2;
    v63.f32[2] = -v2.f32[3];
    int8x16_t v64 = v3;
    *(float *)&v64.i32[2] = -*(float *)&v3.i32[3];
    int8x16_t v65 = *(int8x16_t *)(a2 + 48);
    *(float *)&v65.i32[2] = -*(float *)&v47.i32[3];
    float32x4_t v66 = vmulq_f32(v63, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v65, v65, 0xCuLL), v65, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v64, (int32x4_t)v64), v64, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v65, (int32x4_t)v65), v65, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v64, v64, 0xCuLL), v64, 8uLL)));
    v62.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v66, 2), vaddq_f32(v66, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v66.f32, 1))).u32[0];
    v141[2] = vdivq_f32(v62, (float32x4_t)vdupq_lane_s32(v52, 0));
  }
  float32x4_t v67 = vmlaq_f32(vmulq_f32(v27, vnegq_f32(v48)), v28, v49);
  float32x4_t v68 = vmulq_f32(v2, v67);
  int32x2_t v69 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v68, 2), vaddq_f32(v68, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 1))).u64[0];
  if (*(float *)v69.i32 != 0.0)
  {
    float32x4_t v70 = v2;
    v70.f32[0] = -v2.f32[3];
    int8x16_t v71 = v47;
    *(float *)v71.i32 = -*(float *)&v47.i32[3];
    int8x16_t v72 = v26;
    *(float *)v72.i32 = -v32;
    int32x4_t v73 = (int32x4_t)vmulq_f32(v70, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v72, v72, 0xCuLL), v72, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v71, (int32x4_t)v71), v71, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v72, (int32x4_t)v72), v72, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v71, v71, 0xCuLL), v71, 8uLL)));
    float32x4_t v74 = v2;
    v74.f32[1] = -v2.f32[3];
    int8x16_t v75 = v47;
    *(float *)&v75.i32[1] = -*(float *)&v47.i32[3];
    int8x16_t v76 = v26;
    *(float *)&v76.i32[1] = -v32;
    int32x4_t v77 = (int32x4_t)vmulq_f32(v74, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v76, v76, 0xCuLL), v76, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), v75, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), v76, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v75, v75, 0xCuLL), v75, 8uLL)));
    *(float32x2_t *)v75.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v73.i8, *(int32x2_t *)v77.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v73.i8, *(int32x2_t *)v77.i8));
    float32x4_t v78 = (float32x4_t)vzip2q_s32(v73, v77);
    *(float32x2_t *)v78.f32 = vadd_f32(*(float32x2_t *)v78.f32, *(float32x2_t *)v75.i8);
    v2.f32[2] = -v2.f32[3];
    int8x16_t v79 = v47;
    *(float *)&v79.i32[2] = -*(float *)&v47.i32[3];
    int8x16_t v80 = v26;
    *(float *)&v80.i32[2] = -v32;
    float32x4_t v81 = vmulq_f32(v2, vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v80, v80, 0xCuLL), v80, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v79, (int32x4_t)v79), v79, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v80, (int32x4_t)v80), v80, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v79, v79, 0xCuLL), v79, 8uLL)));
    v78.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v81, 2), vaddq_f32(v81, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v81.f32, 1))).u32[0];
    v141[3] = vdivq_f32(v78, (float32x4_t)vdupq_lane_s32(v69, 0));
  }
  float32x4_t v82 = *(float32x4_t *)(a2 + 64);
  float32x4_t v83 = vmulq_f32(v9, v82);
  int32x2_t v84 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v83, 2), vaddq_f32(v83, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v83.f32, 1))).u64[0];
  if (*(float *)v84.i32 != 0.0)
  {
    float32x4_t v85 = *(float32x4_t *)(a2 + 64);
    v85.f32[0] = -v82.f32[3];
    int8x16_t v86 = v4;
    *(float *)v86.i32 = -*(float *)&v4.i32[3];
    int8x16_t v87 = v3;
    *(float *)v87.i32 = -*(float *)&v3.i32[3];
    float32x4_t v88 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v87, v87, 0xCuLL), v87, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v86, (int32x4_t)v86), v86, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v87, (int32x4_t)v87), v87, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v86, v86, 0xCuLL), v86, 8uLL));
    float32x4_t v89 = *(float32x4_t *)(a2 + 64);
    v89.f32[1] = -v82.f32[3];
    int8x16_t v90 = v4;
    *(float *)&v90.i32[1] = -*(float *)&v4.i32[3];
    int32x4_t v91 = (int32x4_t)vmulq_f32(v88, v85);
    int8x16_t v92 = v3;
    *(float *)&v92.i32[1] = -*(float *)&v3.i32[3];
    int32x4_t v93 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v92, v92, 0xCuLL), v92, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v90, (int32x4_t)v90), v90, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v92, (int32x4_t)v92), v92, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v90, v90, 0xCuLL), v90, 8uLL)), v89);
    *(float32x2_t *)v89.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v91.i8, *(int32x2_t *)v93.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v91.i8, *(int32x2_t *)v93.i8));
    float32x4_t v94 = (float32x4_t)vzip2q_s32(v91, v93);
    *(float32x2_t *)v94.f32 = vadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v89.f32);
    float32x4_t v95 = *(float32x4_t *)(a2 + 64);
    v95.f32[2] = -v82.f32[3];
    int8x16_t v96 = v4;
    *(float *)&v96.i32[2] = -*(float *)&v4.i32[3];
    int8x16_t v97 = v3;
    *(float *)&v97.i32[2] = -*(float *)&v3.i32[3];
    float32x4_t v98 = vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v97, v97, 0xCuLL), v97, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v96, (int32x4_t)v96), v96, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v97, (int32x4_t)v97), v97, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v96, v96, 0xCuLL), v96, 8uLL)), v95);
    v94.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v98, 2), vaddq_f32(v98, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v98.f32, 1))).u32[0];
    v141[4] = vdivq_f32(v94, (float32x4_t)vdupq_lane_s32(v84, 0));
  }
  float32x4_t v99 = vmulq_f32(v29, v82);
  float32x4_t v100 = vaddq_f32(v99, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v99.f32, 1));
  int32x2_t v101 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v99, 2), v100).u64[0];
  if (*(float *)v101.i32 != 0.0)
  {
    float32x4_t v102 = v82;
    v102.f32[0] = -v82.f32[3];
    int8x16_t v103 = v26;
    *(float *)v103.i32 = -v32;
    int8x16_t v104 = v4;
    *(float *)v104.i32 = -*(float *)&v4.i32[3];
    int32x4_t v105 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v104, v104, 0xCuLL), v104, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v103, (int32x4_t)v103), v103, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v104, (int32x4_t)v104), v104, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v103, v103, 0xCuLL), v103, 8uLL)), v102);
    float32x4_t v106 = v82;
    v106.f32[1] = -v82.f32[3];
    int8x16_t v107 = v26;
    *(float *)&v107.i32[1] = -v32;
    int8x16_t v108 = v4;
    *(float *)&v108.i32[1] = -*(float *)&v4.i32[3];
    int32x4_t v109 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v108, v108, 0xCuLL), v108, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v107, (int32x4_t)v107), v107, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v108, (int32x4_t)v108), v108, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v107, v107, 0xCuLL), v107, 8uLL)), v106);
    *(float32x2_t *)v107.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v109.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v105.i8, *(int32x2_t *)v109.i8));
    v105.i64[0] = vzip2q_s32(v105, v109).u64[0];
    float32x4_t v110 = v82;
    v110.f32[2] = -v82.f32[3];
    *(float32x2_t *)v100.f32 = vadd_f32(*(float32x2_t *)v105.i8, *(float32x2_t *)v107.i8);
    int8x16_t v111 = v26;
    *(float *)&v111.i32[2] = -v32;
    *(float *)&v4.i32[2] = -*(float *)&v4.i32[3];
    float32x4_t v112 = vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v4, v4, 0xCuLL), v4, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v111, (int32x4_t)v111), v111, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v4, (int32x4_t)v4), v4, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v111, v111, 0xCuLL), v111, 8uLL)), v110);
    v100.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 2), vaddq_f32(v112, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 1))).u32[0];
    v141[5] = vdivq_f32(v100, (float32x4_t)vdupq_lane_s32(v101, 0));
  }
  float32x4_t v113 = vmulq_f32(v50, v82);
  float32x4_t v114 = vaddq_f32(v113, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v113.f32, 1));
  int32x2_t v115 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v113, 2), v114).u64[0];
  if (*(float *)v115.i32 != 0.0)
  {
    float32x4_t v116 = v82;
    v116.f32[0] = -v82.f32[3];
    int8x16_t v117 = v3;
    *(float *)v117.i32 = -*(float *)&v3.i32[3];
    int8x16_t v118 = v47;
    *(float *)v118.i32 = -*(float *)&v47.i32[3];
    int32x4_t v119 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v118, v118, 0xCuLL), v118, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v117, (int32x4_t)v117), v117, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), v118, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v117, v117, 0xCuLL), v117, 8uLL)), v116);
    float32x4_t v120 = v82;
    v120.f32[1] = -v82.f32[3];
    int8x16_t v121 = v3;
    *(float *)&v121.i32[1] = -*(float *)&v3.i32[3];
    int8x16_t v122 = v47;
    *(float *)&v122.i32[1] = -*(float *)&v47.i32[3];
    int32x4_t v123 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v122, v122, 0xCuLL), v122, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v121, (int32x4_t)v121), v121, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v122, (int32x4_t)v122), v122, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v121, v121, 0xCuLL), v121, 8uLL)), v120);
    *(float32x2_t *)v121.i8 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v119.i8, *(int32x2_t *)v123.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v119.i8, *(int32x2_t *)v123.i8));
    v119.i64[0] = vzip2q_s32(v119, v123).u64[0];
    float32x4_t v124 = v82;
    v124.f32[2] = -v82.f32[3];
    *(float32x2_t *)v114.f32 = vadd_f32(*(float32x2_t *)v119.i8, *(float32x2_t *)v121.i8);
    *(float *)&v3.i32[2] = -*(float *)&v3.i32[3];
    int8x16_t v125 = v47;
    *(float *)&v125.i32[2] = -*(float *)&v47.i32[3];
    float32x4_t v126 = vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v125, v125, 0xCuLL), v125, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v3, (int32x4_t)v3), v3, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v125, (int32x4_t)v125), v125, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v3, v3, 0xCuLL), v3, 8uLL)), v124);
    v114.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v126, 2), vaddq_f32(v126, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v126.f32, 1))).u32[0];
    v141[6] = vdivq_f32(v114, (float32x4_t)vdupq_lane_s32(v115, 0));
  }
  float32x4_t v127 = vmulq_f32(v67, v82);
  int32x2_t v128 = (int32x2_t)vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v127, 2), vaddq_f32(v127, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v127.f32, 1))).u64[0];
  if (*(float *)v128.i32 != 0.0)
  {
    float32x4_t v129 = v82;
    v129.f32[0] = -v82.f32[3];
    int8x16_t v130 = v47;
    *(float *)v130.i32 = -*(float *)&v47.i32[3];
    *(float *)&__int32 v131 = -v32;
    int8x16_t v132 = v26;
    v132.i32[0] = v131;
    float32x4_t v133 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v132, v132, 0xCuLL), v132, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v130, (int32x4_t)v130), v130, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v132, (int32x4_t)v132), v132, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v130, v130, 0xCuLL), v130, 8uLL));
    float32x4_t v134 = v82;
    v134.f32[1] = -v82.f32[3];
    int8x16_t v135 = v47;
    *(float *)&v135.i32[1] = -*(float *)&v47.i32[3];
    int8x16_t v136 = v26;
    v136.i32[1] = v131;
    int32x4_t v137 = (int32x4_t)vmulq_f32(v133, v129);
    int32x4_t v138 = (int32x4_t)vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v136, v136, 0xCuLL), v136, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v135, (int32x4_t)v135), v135, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v136, (int32x4_t)v136), v136, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v135, v135, 0xCuLL), v135, 8uLL)), v134);
    *(float32x2_t *)v134.f32 = vadd_f32((float32x2_t)vzip1_s32(*(int32x2_t *)v137.i8, *(int32x2_t *)v138.i8), (float32x2_t)vzip2_s32(*(int32x2_t *)v137.i8, *(int32x2_t *)v138.i8));
    float32x4_t v139 = (float32x4_t)vzip2q_s32(v137, v138);
    *(float32x2_t *)v139.f32 = vadd_f32(*(float32x2_t *)v139.f32, *(float32x2_t *)v134.f32);
    v82.f32[2] = -v82.f32[3];
    *(float *)&v47.i32[2] = -*(float *)&v47.i32[3];
    v26.i32[2] = v131;
    float32x4_t v140 = vmulq_f32(vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(vextq_s8(v26, v26, 0xCuLL), v26, 8uLL), vnegq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v47, (int32x4_t)v47), v47, 0xCuLL))), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v26, (int32x4_t)v26), v26, 0xCuLL), (float32x4_t)vextq_s8(vextq_s8(v47, v47, 0xCuLL), v47, 8uLL)), v82);
    v139.i32[2] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v140, 2), vaddq_f32(v140, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v140.f32, 1))).u32[0];
    v141[7] = vdivq_f32(v139, (float32x4_t)vdupq_lane_s32(v128, 0));
  }
  sub_1B662E08C(a1, (uint64_t)v141, 8, (uint64_t)&unk_1B6E72E44, 12);
}

void sub_1B662EEA0(void *a1, float32x4_t a2)
{
  int32x4_t v3 = (int32x4_t)vmulq_f32(a2, a2);
  v3.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v3, 2), vadd_f32(*(float32x2_t *)v3.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v3.i8, 1))).u32[0];
  float32x2_t v4 = vrsqrte_f32((float32x2_t)v3.u32[0]);
  float32x2_t v5 = vmul_f32(v4, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v4, v4)));
  LODWORD(v267) = vmul_f32(v5, vrsqrts_f32((float32x2_t)v3.u32[0], vmul_f32(v5, v5))).u32[0];
  float32x4_t v6 = (void **)(a1 + 14);
  sub_1B642863C((uint64_t)(a1 + 14), (uint64_t)(a1[3] - a1[2]) >> 4);
  unint64_t v7 = a1[3] - a1[2];
  if ((int)(v7 >> 4) >= 1) {
    memset(*v6, 255, (v7 >> 2) & 0x3FFFFFFFCLL);
  }
  int32x4_t v270 = (int32x4_t)vmulq_n_f32(a2, v267);
  uint64_t v268 = (char **)(a1 + 17);
  sub_1B6428494((uint64_t)(a1 + 17), 0);
  unint64_t v8 = a1[6] - a1[5];
  if ((int)(v8 >> 2) > 1)
  {
    uint64_t v9 = 0;
    uint64_t v260 = (uint64_t)(a1 + 10);
    float32x4_t v10 = a1 + 13;
    uint64_t v257 = (uint64_t)(a1 + 19);
    uint64_t v11 = (v8 >> 3) & 0x7FFFFFFF;
    do
    {
      float32x4_t v12 = (int *)(a1[5] + 8 * v9);
      uint64_t v13 = *v12;
      uint64_t v14 = v12[1];
      uint64_t v15 = a1[2];
      float32x4_t v16 = *(float32x4_t *)(v15 + 16 * v13);
      float32x4_t v17 = *(float32x4_t *)(v15 + 16 * v14);
      float32x4_t v18 = vmulq_f32((float32x4_t)v270, v16);
      float v19 = *(float *)&v270.i32[3]
          + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), vaddq_f32(v18, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v18.f32, 1))).f32[0];
      float32x4_t v20 = vmulq_f32((float32x4_t)v270, v17);
      float v21 = *(float *)&v270.i32[3]
          + vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v20, 2), vaddq_f32(v20, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v20.f32, 1))).f32[0];
      if (v19 > 0.0 || v21 > 0.0)
      {
        if (v19 <= 0.0 || v21 > 0.0)
        {
          if (v19 <= 0.0 && v21 > 0.0)
          {
            int v29 = *((_DWORD *)*v6 + v13);
            if (v29 == -1)
            {
              int32x2_t v31 = (float32x4_t *)a1[9];
              unint64_t v30 = a1[10];
              if ((unint64_t)v31 >= v30)
              {
                uint64_t v123 = a1[8];
                uint64_t v124 = ((uint64_t)v31 - v123) >> 4;
                if ((unint64_t)(v124 + 1) >> 60) {
                  goto LABEL_301;
                }
                float32x4_t v258 = *(float32x4_t *)(v15 + 16 * v14);
                uint64_t v125 = v30 - v123;
                uint64_t v126 = v125 >> 3;
                if (v125 >> 3 <= (unint64_t)(v124 + 1)) {
                  uint64_t v126 = v124 + 1;
                }
                if ((unint64_t)v125 >= 0x7FFFFFFFFFFFFFF0) {
                  unint64_t v127 = 0xFFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v127 = v126;
                }
                float32x4_t v263 = *(float32x4_t *)(v15 + 16 * v13);
                if (v127)
                {
                  int32x2_t v128 = (char *)sub_1B6427C8C(v260, v127);
                  float32x4_t v16 = v263;
                }
                else
                {
                  int32x2_t v128 = 0;
                }
                id v144 = &v128[16 * v124];
                *(_OWORD *)id v144 = *(_OWORD *)(v15 + 16 * v13);
                f32 = v144 + 16;
                uint64_t v146 = (char *)a1[8];
                float v145 = (char *)a1[9];
                if (v145 != v146)
                {
                  do
                  {
                    long long v147 = *((_OWORD *)v145 - 1);
                    v145 -= 16;
                    *((_OWORD *)v144 - 1) = v147;
                    v144 -= 16;
                  }
                  while (v145 != v146);
                  float v145 = (char *)a1[8];
                }
                a1[8] = v144;
                a1[9] = f32;
                a1[10] = &v128[16 * v127];
                if (v145)
                {
                  operator delete(v145);
                  float32x4_t v16 = v263;
                }
                float32x4_t v17 = v258;
              }
              else
              {
                float32x4_t *v31 = v16;
                f32 = (_OWORD *)v31[1].f32;
              }
              a1[9] = f32;
              int v29 = (((unint64_t)f32 - a1[8]) >> 4) - 1;
              *(_DWORD *)(a1[14] + 4 * v13) = v29;
            }
            uint64_t v149 = (char *)a1[12];
            unint64_t v148 = a1[13];
            if ((unint64_t)v149 >= v148)
            {
              uint64_t v151 = (char *)a1[11];
              uint64_t v152 = (v149 - v151) >> 2;
              unint64_t v153 = v152 + 1;
              if ((unint64_t)(v152 + 1) >> 62) {
                goto LABEL_301;
              }
              float32x4_t v259 = v17;
              float32x4_t v264 = v16;
              uint64_t v154 = v148 - (void)v151;
              if (v154 >> 1 > v153) {
                unint64_t v153 = v154 >> 1;
              }
              if ((unint64_t)v154 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v155 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v155 = v153;
              }
              if (v155)
              {
                uint64_t v156 = (char *)sub_1B64282E0((uint64_t)(a1 + 13), v155);
                uint64_t v151 = (char *)a1[11];
                uint64_t v149 = (char *)a1[12];
              }
              else
              {
                uint64_t v156 = 0;
              }
              unint64_t v157 = &v156[4 * v152];
              *(_DWORD *)unint64_t v157 = v29;
              uint64_t v150 = v157 + 4;
              while (v149 != v151)
              {
                int v158 = *((_DWORD *)v149 - 1);
                v149 -= 4;
                *((_DWORD *)v157 - 1) = v158;
                v157 -= 4;
              }
              a1[11] = v157;
              a1[12] = v150;
              a1[13] = &v156[4 * v155];
              if (v151) {
                operator delete(v151);
              }
              float32x4_t v16 = v264;
              float32x4_t v17 = v259;
            }
            else
            {
              *(_DWORD *)uint64_t v149 = v29;
              uint64_t v150 = v149 + 4;
            }
            a1[12] = v150;
            if ((float)(v21 - v19) != 0.0) {
              float32x4_t v16 = vmlaq_n_f32(v16, vsubq_f32(v17, v16), (float)-v19 / (float)(v21 - v19));
            }
            float32x4_t v160 = (float32x4_t *)a1[9];
            unint64_t v159 = a1[10];
            if ((unint64_t)v160 >= v159)
            {
              uint64_t v162 = a1[8];
              uint64_t v163 = ((uint64_t)v160 - v162) >> 4;
              if ((unint64_t)(v163 + 1) >> 60) {
                goto LABEL_301;
              }
              uint64_t v164 = v159 - v162;
              uint64_t v165 = v164 >> 3;
              if (v164 >> 3 <= (unint64_t)(v163 + 1)) {
                uint64_t v165 = v163 + 1;
              }
              if ((unint64_t)v164 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v166 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v166 = v165;
              }
              if (v166)
              {
                float32x4_t v265 = v16;
                BOOL v167 = (char *)sub_1B6427C8C(v260, v166);
                float32x4_t v16 = v265;
              }
              else
              {
                BOOL v167 = 0;
              }
              float32x2_t v168 = (float32x4_t *)&v167[16 * v163];
              *float32x2_t v168 = v16;
              int32x4_t v161 = (_OWORD *)v168[1].f32;
              float32x4_t v170 = (float32x4_t *)a1[8];
              float32x2_t v169 = (float32x4_t *)a1[9];
              if (v169 != v170)
              {
                do
                {
                  float32x4_t v171 = v169[-1];
                  --v169;
                  v168[-1] = v171;
                  --v168;
                }
                while (v169 != v170);
                float32x2_t v169 = (float32x4_t *)a1[8];
              }
              a1[8] = v168;
              a1[9] = v161;
              a1[10] = &v167[16 * v166];
              if (v169) {
                operator delete(v169);
              }
            }
            else
            {
              float32x4_t *v160 = v16;
              int32x4_t v161 = (_OWORD *)v160[1].f32;
            }
            a1[9] = v161;
            uint64_t v172 = (((unint64_t)v161 - a1[8]) >> 4) - 1;
            float32x4_t v174 = (char *)a1[12];
            unint64_t v173 = a1[13];
            if ((unint64_t)v174 >= v173)
            {
              float32x4_t v176 = (char *)a1[11];
              uint64_t v177 = (v174 - v176) >> 2;
              unint64_t v178 = v177 + 1;
              if ((unint64_t)(v177 + 1) >> 62) {
                goto LABEL_301;
              }
              uint64_t v179 = v173 - (void)v176;
              if (v179 >> 1 > v178) {
                unint64_t v178 = v179 >> 1;
              }
              if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFFCLL) {
                unint64_t v180 = 0x3FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v180 = v178;
              }
              if (v180)
              {
                uint64_t v181 = (char *)sub_1B64282E0((uint64_t)(a1 + 13), v180);
                float32x4_t v176 = (char *)a1[11];
                float32x4_t v174 = (char *)a1[12];
              }
              else
              {
                uint64_t v181 = 0;
              }
              float32x4_t v182 = &v181[4 * v177];
              *(_DWORD *)float32x4_t v182 = v172;
              uint64_t v175 = v182 + 4;
              while (v174 != v176)
              {
                int v183 = *((_DWORD *)v174 - 1);
                v174 -= 4;
                *((_DWORD *)v182 - 1) = v183;
                v182 -= 4;
              }
              a1[11] = v182;
              a1[12] = v175;
              a1[13] = &v181[4 * v180];
              if (v176) {
                operator delete(v176);
              }
            }
            else
            {
              *(_DWORD *)float32x4_t v174 = v172;
              uint64_t v175 = v174 + 4;
            }
            a1[12] = v175;
            uint64_t v185 = (void *)a1[18];
            unint64_t v184 = a1[19];
            if ((unint64_t)v185 >= v184)
            {
              uint64_t v187 = ((char *)v185 - *v268) >> 3;
              if ((unint64_t)(v187 + 1) >> 61) {
LABEL_301:
              }
                abort();
              uint64_t v188 = v184 - (void)*v268;
              uint64_t v189 = v188 >> 2;
              if (v188 >> 2 <= (unint64_t)(v187 + 1)) {
                uint64_t v189 = v187 + 1;
              }
              if ((unint64_t)v188 >= 0x7FFFFFFFFFFFFFF8) {
                unint64_t v190 = 0x1FFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v190 = v189;
              }
              if (v190) {
                uint64_t v191 = (char *)sub_1B64285D4(v257, v190);
              }
              else {
                uint64_t v191 = 0;
              }
              uint64_t v192 = &v191[8 * v187];
              *(void *)uint64_t v192 = v172 << 32;
              unsigned __int32 v186 = v192 + 8;
              int32x4_t v194 = (char *)a1[17];
              int32x4_t v193 = (char *)a1[18];
              if (v193 != v194)
              {
                do
                {
                  uint64_t v195 = *((void *)v193 - 1);
                  v193 -= 8;
                  *((void *)v192 - 1) = v195;
                  v192 -= 8;
                }
                while (v193 != v194);
                int32x4_t v193 = *v268;
              }
              a1[17] = v192;
              a1[18] = v186;
              a1[19] = &v191[8 * v190];
              if (v193) {
                operator delete(v193);
              }
            }
            else
            {
              void *v185 = v172 << 32;
              unsigned __int32 v186 = v185 + 1;
            }
            a1[18] = v186;
          }
        }
        else
        {
          if ((float)(v21 - v19) != 0.0) {
            float32x4_t v16 = vmlaq_n_f32(v16, vsubq_f32(v17, v16), (float)-v19 / (float)(v21 - v19));
          }
          float32x4_t v27 = (float32x4_t *)a1[9];
          unint64_t v26 = a1[10];
          if ((unint64_t)v27 >= v26)
          {
            uint64_t v33 = a1[8];
            uint64_t v34 = ((uint64_t)v27 - v33) >> 4;
            if ((unint64_t)(v34 + 1) >> 60) {
              goto LABEL_301;
            }
            uint64_t v35 = v26 - v33;
            uint64_t v36 = v35 >> 3;
            if (v35 >> 3 <= (unint64_t)(v34 + 1)) {
              uint64_t v36 = v34 + 1;
            }
            if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v37 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v37 = v36;
            }
            if (v37)
            {
              float32x4_t v262 = v16;
              int8x16_t v38 = (char *)sub_1B6427C8C(v260, v37);
              float32x4_t v16 = v262;
            }
            else
            {
              int8x16_t v38 = 0;
            }
            int8x16_t v45 = (float32x4_t *)&v38[16 * v34];
            *int8x16_t v45 = v16;
            float32x4_t v28 = (_OWORD *)v45[1].f32;
            int8x16_t v47 = (float32x4_t *)a1[8];
            float32x4_t v46 = (float32x4_t *)a1[9];
            if (v46 != v47)
            {
              do
              {
                float32x4_t v48 = v46[-1];
                --v46;
                v45[-1] = v48;
                --v45;
              }
              while (v46 != v47);
              float32x4_t v46 = (float32x4_t *)a1[8];
            }
            a1[8] = v45;
            a1[9] = v28;
            a1[10] = &v38[16 * v37];
            if (v46) {
              operator delete(v46);
            }
          }
          else
          {
            float32x4_t *v27 = v16;
            float32x4_t v28 = (_OWORD *)v27[1].f32;
          }
          a1[9] = v28;
          uint64_t v49 = (((unint64_t)v28 - a1[8]) >> 4) - 1;
          float32x4_t v51 = (char *)a1[12];
          unint64_t v50 = a1[13];
          if ((unint64_t)v51 >= v50)
          {
            float32x4_t v53 = (char *)a1[11];
            uint64_t v54 = (v51 - v53) >> 2;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 62) {
              goto LABEL_301;
            }
            uint64_t v56 = v50 - (void)v53;
            if (v56 >> 1 > v55) {
              unint64_t v55 = v56 >> 1;
            }
            if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v57 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v57 = v55;
            }
            if (v57)
            {
              int8x16_t v58 = (char *)sub_1B64282E0((uint64_t)(a1 + 13), v57);
              float32x4_t v53 = (char *)a1[11];
              float32x4_t v51 = (char *)a1[12];
            }
            else
            {
              int8x16_t v58 = 0;
            }
            int32x4_t v59 = &v58[4 * v54];
            *(_DWORD *)int32x4_t v59 = v49;
            int32x2_t v52 = v59 + 4;
            while (v51 != v53)
            {
              int v60 = *((_DWORD *)v51 - 1);
              v51 -= 4;
              *((_DWORD *)v59 - 1) = v60;
              v59 -= 4;
            }
            a1[11] = v59;
            a1[12] = v52;
            a1[13] = &v58[4 * v57];
            if (v53) {
              operator delete(v53);
            }
          }
          else
          {
            *(_DWORD *)float32x4_t v51 = v49;
            int32x2_t v52 = v51 + 4;
          }
          a1[12] = v52;
          float32x4_t v62 = (void *)a1[18];
          unint64_t v61 = a1[19];
          if ((unint64_t)v62 >= v61)
          {
            uint64_t v64 = ((char *)v62 - *v268) >> 3;
            if ((unint64_t)(v64 + 1) >> 61) {
              goto LABEL_301;
            }
            uint64_t v65 = v61 - (void)*v268;
            uint64_t v66 = v65 >> 2;
            if (v65 >> 2 <= (unint64_t)(v64 + 1)) {
              uint64_t v66 = v64 + 1;
            }
            if ((unint64_t)v65 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v67 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v67 = v66;
            }
            if (v67) {
              float32x4_t v68 = (char *)sub_1B64285D4(v257, v67);
            }
            else {
              float32x4_t v68 = 0;
            }
            int32x2_t v69 = &v68[8 * v64];
            *(void *)int32x2_t v69 = v49 << 32;
            float32x4_t v63 = v69 + 8;
            int8x16_t v71 = (char *)a1[17];
            float32x4_t v70 = (char *)a1[18];
            if (v70 != v71)
            {
              do
              {
                uint64_t v72 = *((void *)v70 - 1);
                v70 -= 8;
                *((void *)v69 - 1) = v72;
                v69 -= 8;
              }
              while (v70 != v71);
              float32x4_t v70 = *v268;
            }
            a1[17] = v69;
            a1[18] = v63;
            a1[19] = &v68[8 * v67];
            if (v70) {
              operator delete(v70);
            }
          }
          else
          {
            *float32x4_t v62 = v49 << 32;
            float32x4_t v63 = v62 + 1;
          }
          a1[18] = v63;
          int v73 = *(_DWORD *)(a1[14] + 4 * v14);
          if (v73 == -1)
          {
            uint64_t v74 = a1[2];
            int8x16_t v76 = (_OWORD *)a1[9];
            unint64_t v75 = a1[10];
            if ((unint64_t)v76 >= v75)
            {
              uint64_t v78 = a1[8];
              uint64_t v79 = ((uint64_t)v76 - v78) >> 4;
              if ((unint64_t)(v79 + 1) >> 60) {
                goto LABEL_301;
              }
              uint64_t v80 = v75 - v78;
              uint64_t v81 = v80 >> 3;
              if (v80 >> 3 <= (unint64_t)(v79 + 1)) {
                uint64_t v81 = v79 + 1;
              }
              if ((unint64_t)v80 >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v82 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v82 = v81;
              }
              if (v82) {
                float32x4_t v83 = (char *)sub_1B6427C8C(v260, v82);
              }
              else {
                float32x4_t v83 = 0;
              }
              float32x4_t v129 = &v83[16 * v79];
              *(_OWORD *)float32x4_t v129 = *(_OWORD *)(v74 + 16 * v14);
              int32x4_t v77 = v129 + 16;
              __int32 v131 = (char *)a1[8];
              int8x16_t v130 = (char *)a1[9];
              if (v130 != v131)
              {
                do
                {
                  long long v132 = *((_OWORD *)v130 - 1);
                  v130 -= 16;
                  *((_OWORD *)v129 - 1) = v132;
                  v129 -= 16;
                }
                while (v130 != v131);
                int8x16_t v130 = (char *)a1[8];
              }
              a1[8] = v129;
              a1[9] = v77;
              a1[10] = &v83[16 * v82];
              if (v130) {
                operator delete(v130);
              }
            }
            else
            {
              *int8x16_t v76 = *(_OWORD *)(v74 + 16 * v14);
              int32x4_t v77 = v76 + 1;
            }
            a1[9] = v77;
            int v73 = (((unint64_t)v77 - a1[8]) >> 4) - 1;
            *(_DWORD *)(a1[14] + 4 * v14) = v73;
          }
          float32x4_t v134 = (char *)a1[12];
          unint64_t v133 = a1[13];
          if ((unint64_t)v134 >= v133)
          {
            int8x16_t v136 = (char *)a1[11];
            uint64_t v137 = (v134 - v136) >> 2;
            unint64_t v138 = v137 + 1;
            if ((unint64_t)(v137 + 1) >> 62) {
              goto LABEL_301;
            }
            uint64_t v139 = v133 - (void)v136;
            if (v139 >> 1 > v138) {
              unint64_t v138 = v139 >> 1;
            }
            if ((unint64_t)v139 >= 0x7FFFFFFFFFFFFFFCLL) {
              unint64_t v140 = 0x3FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v140 = v138;
            }
            if (v140)
            {
              uint64_t v141 = (char *)sub_1B64282E0((uint64_t)(a1 + 13), v140);
              int8x16_t v136 = (char *)a1[11];
              float32x4_t v134 = (char *)a1[12];
            }
            else
            {
              uint64_t v141 = 0;
            }
            uint64_t v142 = &v141[4 * v137];
            *(_DWORD *)uint64_t v142 = v73;
            int8x16_t v135 = v142 + 4;
            while (v134 != v136)
            {
              int v143 = *((_DWORD *)v134 - 1);
              v134 -= 4;
              *((_DWORD *)v142 - 1) = v143;
              v142 -= 4;
            }
            a1[11] = v142;
            a1[12] = v135;
            a1[13] = &v141[4 * v140];
            if (v136) {
              operator delete(v136);
            }
          }
          else
          {
            *(_DWORD *)float32x4_t v134 = v73;
            int8x16_t v135 = v134 + 4;
          }
          a1[12] = v135;
        }
      }
      else
      {
        int v22 = *((_DWORD *)*v6 + v13);
        if (v22 == -1)
        {
          int8x16_t v24 = (float32x4_t *)a1[9];
          unint64_t v23 = a1[10];
          if ((unint64_t)v24 >= v23)
          {
            uint64_t v39 = a1[8];
            uint64_t v40 = ((uint64_t)v24 - v39) >> 4;
            if ((unint64_t)(v40 + 1) >> 60) {
              goto LABEL_301;
            }
            uint64_t v41 = v23 - v39;
            uint64_t v42 = v41 >> 3;
            if (v41 >> 3 <= (unint64_t)(v40 + 1)) {
              uint64_t v42 = v40 + 1;
            }
            if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v43 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v43 = v42;
            }
            if (v43)
            {
              int8x16_t v44 = (char *)sub_1B6427C8C(v260, v43);
              float32x4_t v16 = *(float32x4_t *)(v15 + 16 * v13);
            }
            else
            {
              int8x16_t v44 = 0;
            }
            int32x2_t v84 = (float32x4_t *)&v44[16 * v40];
            *int32x2_t v84 = v16;
            float32x4_t v25 = (_OWORD *)v84[1].f32;
            int8x16_t v86 = (float32x4_t *)a1[8];
            float32x4_t v85 = (float32x4_t *)a1[9];
            if (v85 != v86)
            {
              do
              {
                float32x4_t v87 = v85[-1];
                --v85;
                v84[-1] = v87;
                --v84;
              }
              while (v85 != v86);
              float32x4_t v85 = (float32x4_t *)a1[8];
            }
            a1[8] = v84;
            a1[9] = v25;
            a1[10] = &v44[16 * v43];
            if (v85) {
              operator delete(v85);
            }
          }
          else
          {
            *int8x16_t v24 = v16;
            float32x4_t v25 = (_OWORD *)v24[1].f32;
          }
          a1[9] = v25;
          int v22 = (((unint64_t)v25 - a1[8]) >> 4) - 1;
          *(_DWORD *)(a1[14] + 4 * v13) = v22;
        }
        float32x4_t v89 = (char *)a1[12];
        unint64_t v88 = a1[13];
        if ((unint64_t)v89 >= v88)
        {
          int32x4_t v91 = (unsigned char *)a1[11];
          uint64_t v92 = (v89 - v91) >> 2;
          unint64_t v93 = v92 + 1;
          if ((unint64_t)(v92 + 1) >> 62) {
            goto LABEL_301;
          }
          uint64_t v94 = v88 - (void)v91;
          if (v94 >> 1 > v93) {
            unint64_t v93 = v94 >> 1;
          }
          if ((unint64_t)v94 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v95 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v95 = v93;
          }
          if (v95)
          {
            int8x16_t v96 = (char *)sub_1B64282E0((uint64_t)(a1 + 13), v95);
            int32x4_t v91 = (unsigned char *)a1[11];
            float32x4_t v89 = (char *)a1[12];
          }
          else
          {
            int8x16_t v96 = 0;
          }
          int8x16_t v97 = &v96[4 * v92];
          *(_DWORD *)int8x16_t v97 = v22;
          int8x16_t v90 = v97 + 4;
          while (v89 != v91)
          {
            int v98 = *((_DWORD *)v89 - 1);
            v89 -= 4;
            *((_DWORD *)v97 - 1) = v98;
            v97 -= 4;
          }
          a1[11] = v97;
          a1[12] = v90;
          a1[13] = &v96[4 * v95];
          if (v91) {
            operator delete(v91);
          }
        }
        else
        {
          *(_DWORD *)float32x4_t v89 = v22;
          int8x16_t v90 = v89 + 4;
        }
        a1[12] = v90;
        int v99 = *(_DWORD *)(a1[14] + 4 * v14);
        if (v99 == -1)
        {
          uint64_t v100 = a1[2];
          float32x4_t v102 = (_OWORD *)a1[9];
          unint64_t v101 = a1[10];
          if ((unint64_t)v102 >= v101)
          {
            uint64_t v104 = a1[8];
            uint64_t v105 = ((uint64_t)v102 - v104) >> 4;
            if ((unint64_t)(v105 + 1) >> 60) {
              goto LABEL_301;
            }
            uint64_t v106 = v101 - v104;
            uint64_t v107 = v106 >> 3;
            if (v106 >> 3 <= (unint64_t)(v105 + 1)) {
              uint64_t v107 = v105 + 1;
            }
            if ((unint64_t)v106 >= 0x7FFFFFFFFFFFFFF0) {
              unint64_t v108 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v108 = v107;
            }
            if (v108) {
              int32x4_t v109 = (char *)sub_1B6427C8C(v260, v108);
            }
            else {
              int32x4_t v109 = 0;
            }
            float32x4_t v110 = &v109[16 * v105];
            *(_OWORD *)float32x4_t v110 = *(_OWORD *)(v100 + 16 * v14);
            int8x16_t v103 = v110 + 16;
            float32x4_t v112 = (char *)a1[8];
            int8x16_t v111 = (char *)a1[9];
            if (v111 != v112)
            {
              do
              {
                long long v113 = *((_OWORD *)v111 - 1);
                v111 -= 16;
                *((_OWORD *)v110 - 1) = v113;
                v110 -= 16;
              }
              while (v111 != v112);
              int8x16_t v111 = (char *)a1[8];
            }
            a1[8] = v110;
            a1[9] = v103;
            a1[10] = &v109[16 * v108];
            if (v111) {
              operator delete(v111);
            }
          }
          else
          {
            *float32x4_t v102 = *(_OWORD *)(v100 + 16 * v14);
            int8x16_t v103 = v102 + 1;
          }
          a1[9] = v103;
          int v99 = (((unint64_t)v103 - a1[8]) >> 4) - 1;
          *(_DWORD *)(a1[14] + 4 * v14) = v99;
          int8x16_t v90 = (char *)a1[12];
        }
        if ((unint64_t)v90 >= *v10)
        {
          int32x2_t v115 = (char *)a1[11];
          uint64_t v116 = (v90 - v115) >> 2;
          unint64_t v117 = v116 + 1;
          if ((unint64_t)(v116 + 1) >> 62) {
            goto LABEL_301;
          }
          uint64_t v118 = *v10 - (void)v115;
          if (v118 >> 1 > v117) {
            unint64_t v117 = v118 >> 1;
          }
          if ((unint64_t)v118 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v119 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v119 = v117;
          }
          if (v119)
          {
            float32x4_t v120 = (char *)sub_1B64282E0((uint64_t)(a1 + 13), v119);
            int32x2_t v115 = (char *)a1[11];
            int8x16_t v90 = (char *)a1[12];
          }
          else
          {
            float32x4_t v120 = 0;
          }
          int8x16_t v121 = &v120[4 * v116];
          *(_DWORD *)int8x16_t v121 = v99;
          float32x4_t v114 = v121 + 4;
          while (v90 != v115)
          {
            int v122 = *((_DWORD *)v90 - 1);
            v90 -= 4;
            *((_DWORD *)v121 - 1) = v122;
            v121 -= 4;
          }
          a1[11] = v121;
          a1[12] = v114;
          a1[13] = &v120[4 * v119];
          if (v115) {
            operator delete(v115);
          }
        }
        else
        {
          *(_DWORD *)int8x16_t v90 = v99;
          float32x4_t v114 = v90 + 4;
        }
        a1[12] = v114;
      }
      ++v9;
    }
    while (v9 != v11);
  }
  uint64_t v197 = a1[17];
  uint64_t v196 = (float *)a1[18];
  unint64_t v198 = (unint64_t)v196 - v197;
  if ((unint64_t)v196 - v197 > 0x10)
  {
    if (v198 >= 0x19)
    {
      uint64_t v199 = a1[8];
      float32x4_t v200 = *(float32x4_t *)(v199 + 16 * *(int *)(v197 + 4));
      uint64_t v201 = (v198 >> 3);
      if ((int)(v198 >> 3) > 1)
      {
        uint64_t v202 = (int *)(v197 + 12);
        uint64_t v203 = v201 - 1;
        do
        {
          uint64_t v204 = *v202;
          v202 += 2;
          float32x4_t v200 = vaddq_f32(v200, *(float32x4_t *)(v199 + 16 * v204));
          --v203;
        }
        while (v203);
      }
      unint64_t v205 = (uint64_t)v198 >> 3;
      if ((int)(v198 >> 3) >= 1)
      {
        float32x4_t v206 = vmulq_f32((float32x4_t)v270, (float32x4_t)xmmword_1B6E4F2E0);
        float32x4_t v207 = vaddq_f32(v206, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v206.f32, 1));
        float32x4_t v208 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v206, 2), v207);
        v208.f32[0] = fabsf(v208.f32[0]);
        v207.i32[0] = 1064514355;
        float32x4_t v209 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vcgtq_f32(v208, v207), 0), (int8x16_t)xmmword_1B6E4F320, (int8x16_t)xmmword_1B6E4F2E0);
        float32x4_t v210 = vnegq_f32((float32x4_t)v270);
        float32x4_t v211 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v270, v270), (int8x16_t)v270, 0xCuLL);
        int8x16_t v212 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v209, (int32x4_t)v209), (int8x16_t)v209, 0xCuLL), v210), v209, v211);
        float32x4_t v213 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v212, (int32x4_t)v212), v212, 0xCuLL);
        float32x4_t v214 = vmulq_f32((float32x4_t)v270, v213);
        float32x4_t v215 = vmlsq_lane_f32(v213, (float32x4_t)v270, (float32x2_t)*(_OWORD *)&vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v214, 2), vaddq_f32(v214, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v214.f32, 1))), 0);
        int32x4_t v216 = (int32x4_t)vmulq_f32(v215, v215);
        v216.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v216, 2), vadd_f32(*(float32x2_t *)v216.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v216.i8, 1))).u32[0];
        float32x2_t v217 = vrsqrte_f32((float32x2_t)v216.u32[0]);
        float32x2_t v218 = vmul_f32(v217, vrsqrts_f32((float32x2_t)v216.u32[0], vmul_f32(v217, v217)));
        float32x4_t v271 = vmulq_n_f32(v215, vmul_f32(v218, vrsqrts_f32((float32x2_t)v216.u32[0], vmul_f32(v218, v218))).f32[0]);
        int8x16_t v219 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v271, (int32x4_t)v271), (int8x16_t)v271, 0xCuLL), v210), v271, v211);
        int8x16_t v220 = vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v219, (int32x4_t)v219), v219, 0xCuLL);
        *(float *)v219.i32 = (float)v205;
        float32x4_t v261 = vdivq_f32(v200, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v219.i8, 0));
        float32x4_t v266 = (float32x4_t)v220;
        uint64_t v221 = (float *)(v197 + 4);
        do
        {
          float32x4_t v222 = vsubq_f32(*(float32x4_t *)(v199 + 16 * *(int *)v221), v261);
          float32x4_t v223 = vmulq_f32(v271, v222);
          float32x4_t v224 = vmulq_f32(v266, v222);
          *(v221 - 1) = atan2f(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v223, 2), vaddq_f32(v223, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v223.f32, 1))).f32[0], vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v224, 2), vaddq_f32(v224, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v224.f32, 1))).f32[0]);
          v221 += 2;
          --v201;
        }
        while (v201);
      }
      unint64_t v225 = 126 - 2 * __clz(v205);
      if (v196 == (float *)v197) {
        uint64_t v226 = 0;
      }
      else {
        uint64_t v226 = v225;
      }
      sub_1B66301B8(v197, v196, (uint64_t)&v272, v226, 1);
      uint64_t v197 = a1[17];
      unint64_t v198 = a1[18] - v197;
    }
    if ((int)(v198 >> 3) >= 1)
    {
      uint64_t v227 = 0;
      int32x4_t v228 = (char **)(a1 + 13);
      unsigned __int32 v229 = (char *)a1[12];
      do
      {
        uint64_t v230 = (_DWORD *)(v197 + 8 * v227 + 4);
        long long v231 = *v228;
        if (v229 >= *v228)
        {
          long long v233 = (unsigned char *)a1[11];
          uint64_t v234 = (v229 - v233) >> 2;
          unint64_t v235 = v234 + 1;
          if ((unint64_t)(v234 + 1) >> 62) {
            goto LABEL_301;
          }
          uint64_t v236 = v231 - v233;
          if (v236 >> 1 > v235) {
            unint64_t v235 = v236 >> 1;
          }
          if ((unint64_t)v236 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v237 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v237 = v235;
          }
          if (v237)
          {
            int32x4_t v238 = (char *)sub_1B64282E0((uint64_t)(a1 + 13), v237);
            long long v233 = (unsigned char *)a1[11];
            unsigned __int32 v229 = (char *)a1[12];
          }
          else
          {
            int32x4_t v238 = 0;
          }
          int32x4_t v239 = &v238[4 * v234];
          *(_DWORD *)int32x4_t v239 = *v230;
          long long v232 = v239 + 4;
          while (v229 != v233)
          {
            int v240 = *((_DWORD *)v229 - 1);
            v229 -= 4;
            *((_DWORD *)v239 - 1) = v240;
            v239 -= 4;
          }
          long long v231 = &v238[4 * v237];
          a1[11] = v239;
          a1[12] = v232;
          a1[13] = v231;
          if (v233)
          {
            operator delete(v233);
            long long v231 = *v228;
          }
        }
        else
        {
          *(_DWORD *)unsigned __int32 v229 = *v230;
          long long v232 = v229 + 4;
        }
        a1[12] = v232;
        int32x4_t v241 = (_DWORD *)(a1[17] + 8 * (++v227 % (unint64_t)((uint64_t)(a1[18] - a1[17]) >> 3)) + 4);
        if (v232 >= v231)
        {
          simd_float4x4 v242 = (unsigned char *)a1[11];
          uint64_t v243 = (v232 - v242) >> 2;
          unint64_t v244 = v243 + 1;
          if ((unint64_t)(v243 + 1) >> 62) {
            goto LABEL_301;
          }
          uint64_t v245 = v231 - v242;
          if (v245 >> 1 > v244) {
            unint64_t v244 = v245 >> 1;
          }
          if ((unint64_t)v245 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v246 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v246 = v244;
          }
          if (v246)
          {
            uint64_t v247 = (char *)sub_1B64282E0((uint64_t)(a1 + 13), v246);
            simd_float4x4 v242 = (unsigned char *)a1[11];
            long long v232 = (char *)a1[12];
          }
          else
          {
            uint64_t v247 = 0;
          }
          uint64_t v248 = &v247[4 * v243];
          *(_DWORD *)uint64_t v248 = *v241;
          unsigned __int32 v229 = v248 + 4;
          while (v232 != v242)
          {
            int v249 = *((_DWORD *)v232 - 1);
            v232 -= 4;
            *((_DWORD *)v248 - 1) = v249;
            v248 -= 4;
          }
          a1[11] = v248;
          a1[12] = v229;
          a1[13] = &v247[4 * v246];
          if (v242) {
            operator delete(v242);
          }
        }
        else
        {
          *(_DWORD *)long long v232 = *v241;
          unsigned __int32 v229 = v232 + 4;
        }
        a1[12] = v229;
        uint64_t v197 = a1[17];
      }
      while (v227 < (int)((unint64_t)(a1[18] - v197) >> 3));
    }
  }
  long long v251 = *((_OWORD *)a1 + 4);
  uint64_t v250 = a1 + 8;
  long long v252 = *(v250 - 1);
  long long v253 = v250[1];
  long long v254 = v250[2];
  long long v255 = *(v250 - 3);
  long long v256 = *(v250 - 2);
  *(v250 - 3) = v251;
  *(v250 - 2) = v253;
  *(v250 - 1) = v254;
  *uint64_t v250 = v255;
  v250[1] = v256;
  v250[2] = v252;
  sub_1B642863C((uint64_t)v250 + 24, 0);
  sub_1B6427B4C((uint64_t)v250, 0);
  sub_1B642863C((uint64_t)v6, 0);
  sub_1B6428494((uint64_t)v268, 0);
}

BOOL sub_1B662FE8C(void *a1, float32x4_t a2, float32x4_t a3)
{
  float32x4_t v14 = vaddq_f32(a2, a3);
  v4.i64[0] = 0;
  v4.i32[2] = 1.0;
  v4.f32[3] = -v14.f32[2];
  sub_1B662EEA0(a1, v4);
  if (a1[5] == a1[6]) {
    return 0;
  }
  v5.i64[0] = COERCE_UNSIGNED_INT(1.0);
  v5.i32[2] = 0;
  v5.f32[3] = -v14.f32[0];
  sub_1B662EEA0(a1, v5);
  if (a1[5] == a1[6]) {
    return 0;
  }
  float32x4_t v6 = (float32x4_t)xmmword_1B6E4F310;
  float32x4_t v13 = vsubq_f32(a2, a3);
  v6.i32[3] = v13.i32[0];
  sub_1B662EEA0(a1, v6);
  if (a1[5] == a1[6]) {
    return 0;
  }
  v7.i32[0] = 0;
  v7.i32[1] = 1.0;
  v7.i32[2] = 0;
  v7.f32[3] = -v14.f32[1];
  sub_1B662EEA0(a1, v7);
  if (a1[5] == a1[6]) {
    return 0;
  }
  float32x4_t v8 = (float32x4_t)xmmword_1B6E4F330;
  v8.i32[3] = v13.i32[1];
  sub_1B662EEA0(a1, v8);
  if (a1[5] == a1[6]) {
    return 0;
  }
  float32x4_t v9 = (float32x4_t)xmmword_1B6E4F340;
  v9.i32[3] = v13.i32[2];
  sub_1B662EEA0(a1, v9);
  return a1[5] != a1[6];
}

__n128 sub_1B662FFC8(uint64_t a1, float32x4_t *a2)
{
  unint64_t v2 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
  if ((int)(v2 >> 4) >= 1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = v2 & 0xFFFFFFFF0;
    do
    {
      __n128 result = *(__n128 *)a2;
      *(float32x4_t *)(*(void *)(a1 + 16) + v3) = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a2[3], a2[2], *(float32x4_t *)(*(void *)(a1 + 16) + v3), 2), a2[1], *(float32x2_t *)(*(void *)(a1 + 16) + v3), 1), *a2, COERCE_FLOAT(*(_OWORD *)(*(void *)(a1 + 16) + v3)));
      v3 += 16;
    }
    while (v4 != v3);
  }
  return result;
}

double sub_1B6630014(uint64_t a1, float32x4_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5)
{
  float32x4_t v5 = *(float32x4_t **)(a1 + 16);
  unint64_t v6 = *(void *)(a1 + 24) - (void)v5;
  if ((int)(v6 >> 4) < 1)
  {
    v7.i64[0] = 0;
  }
  else
  {
    float32x4_t v7 = (float32x4_t)xmmword_1B6E4F370;
    float32x4_t v8 = (float32x4_t)xmmword_1B6E51230;
    uint64_t v9 = (v6 >> 4);
    v10.i64[0] = 0x3F0000003F000000;
    v10.i64[1] = 0x3F0000003F000000;
    do
    {
      float32x4_t v11 = *v5++;
      float32x4_t v12 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a5, a4, v11, 2), a3, *(float32x2_t *)v11.f32, 1), a2, v11.f32[0]);
      v12.i32[3] = 1.0;
      float32x4_t v13 = vminnmq_f32(vsubq_f32(v7, v8), v12);
      float32x4_t v14 = vmaxnmq_f32(vaddq_f32(v7, v8), v12);
      float32x4_t v7 = vmulq_f32(vaddq_f32(v13, v14), v10);
      float32x4_t v8 = vmulq_f32(vsubq_f32(v14, v13), v10);
      --v9;
    }
    while (v9);
  }
  return *(double *)v7.i64;
}

void sub_1B66300A0(void *a1)
{
  unint64_t v2 = (void *)a1[17];
  if (v2)
  {
    a1[18] = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)a1[14];
  if (v3)
  {
    a1[15] = v3;
    operator delete(v3);
  }
  uint64_t v4 = (void *)a1[11];
  if (v4)
  {
    a1[12] = v4;
    operator delete(v4);
  }
  float32x4_t v5 = (void *)a1[8];
  if (v5)
  {
    a1[9] = v5;
    operator delete(v5);
  }
  unint64_t v6 = (void *)a1[5];
  if (v6)
  {
    a1[6] = v6;
    operator delete(v6);
  }
  float32x4_t v7 = (void *)a1[2];
  if (v7)
  {
    a1[3] = v7;
    operator delete(v7);
  }
}

CFStringRef sub_1B6630138(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXConvexPolyhedron %p>", a1);
}

CFStringRef sub_1B6630178(const void *a1)
{
  CFAllocatorRef v2 = CFGetAllocator(a1);
  return CFStringCreateWithFormat(v2, 0, @"<CFXConvexPolyhedron %p>", a1);
}

uint64_t sub_1B66301B8(uint64_t result, float *a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v10 = result;
LABEL_2:
  uint64_t v11 = v10;
LABEL_3:
  uint64_t v12 = 1 - a4;
  while (1)
  {
    uint64_t v10 = v11;
    uint64_t v13 = v12;
    uint64_t v14 = (uint64_t)a2 - v11;
    unint64_t v15 = ((uint64_t)a2 - v11) >> 3;
    if (!(!v6 & v5))
    {
      switch(v15)
      {
        case 0uLL:
        case 1uLL:
          return result;
        case 2uLL:
          if (*(a2 - 2) < *(float *)v11)
          {
            uint64_t v22 = *(void *)v11;
            *(void *)uint64_t v11 = *((void *)a2 - 1);
            *((void *)a2 - 1) = v22;
          }
          break;
        case 3uLL:
          __n128 result = sub_1B663062C((float *)v11, (float *)(v11 + 8), a2 - 2);
          break;
        case 4uLL:
          __n128 result = sub_1B66309E4((float *)v11, (float *)(v11 + 8), (float *)(v11 + 16), (void *)a2 - 1);
          break;
        case 5uLL:
          __n128 result = sub_1B6630A80((float *)v11, (float *)(v11 + 8), (float *)(v11 + 16), (uint64_t *)(v11 + 24), (uint64_t *)a2 - 1);
          break;
        default:
          JUMPOUT(0);
      }
      return result;
    }
    if (v14 <= 191) {
      break;
    }
    if (v13 == 1)
    {
      if ((float *)v11 != a2)
      {
        return (uint64_t)sub_1B6630B48((float *)v11, a2, a2, a3);
      }
      return result;
    }
    unint64_t v16 = v15 >> 1;
    float32x4_t v17 = (float *)(v11 + 8 * (v15 >> 1));
    if ((unint64_t)v14 >= 0x401)
    {
      sub_1B663062C((float *)v11, (float *)(v11 + 8 * (v15 >> 1)), a2 - 2);
      sub_1B663062C((float *)(v11 + 8), v17 - 2, a2 - 4);
      sub_1B663062C((float *)(v11 + 16), (float *)(v11 + 8 + 8 * v16), a2 - 6);
      sub_1B663062C(v17 - 2, v17, (float *)(v11 + 8 + 8 * v16));
      uint64_t v18 = *(void *)v11;
      *(void *)uint64_t v11 = *(void *)v17;
      *(void *)float32x4_t v17 = v18;
      if (a5) {
        goto LABEL_14;
      }
    }
    else
    {
      sub_1B663062C((float *)(v11 + 8 * (v15 >> 1)), (float *)v11, a2 - 2);
      if (a5) {
        goto LABEL_14;
      }
    }
    if (*(float *)(v11 - 8) >= *(float *)v11)
    {
      __n128 result = (uint64_t)sub_1B66306D8((float *)v11, a2);
      uint64_t v11 = result;
      goto LABEL_19;
    }
LABEL_14:
    float v19 = sub_1B6630784((float *)v11, a2);
    if ((v20 & 1) == 0) {
      goto LABEL_17;
    }
    BOOL v21 = sub_1B663083C(v11, (uint64_t)v19);
    uint64_t v11 = (uint64_t)(v19 + 2);
    __n128 result = sub_1B663083C((uint64_t)(v19 + 2), (uint64_t)a2);
    if (result)
    {
      a4 = -v13;
      a2 = v19;
      if (v21) {
        return result;
      }
      goto LABEL_2;
    }
    uint64_t v12 = v13 + 1;
    if (!v21)
    {
LABEL_17:
      __n128 result = sub_1B66301B8(v10, v19, a3, -v13, a5 & 1);
      uint64_t v11 = (uint64_t)(v19 + 2);
LABEL_19:
      a5 = 0;
      a4 = -v13;
      goto LABEL_3;
    }
  }
  if (a5)
  {
    return sub_1B66305A4(v11, (uint64_t)a2);
  }
  else if ((float *)v11 != a2)
  {
    unint64_t v23 = (float *)(v11 + 8);
    while (v23 != a2)
    {
      int8x16_t v24 = v23;
      float v25 = *(float *)(v10 + 8);
      if (v25 < *(float *)v10)
      {
        int v26 = *(_DWORD *)(v10 + 12);
        float32x4_t v27 = v24;
        do
        {
          float32x4_t v28 = v27;
          uint64_t v29 = *((void *)v27 - 1);
          v27 -= 2;
          *(void *)float32x4_t v28 = v29;
        }
        while (*(v28 - 4) > v25);
        float *v27 = v25;
        *((_DWORD *)v27 + 1) = v26;
      }
      unint64_t v23 = v24 + 2;
      uint64_t v10 = (uint64_t)v24;
    }
  }
  return result;
}

uint64_t sub_1B66305A4(uint64_t result, uint64_t a2)
{
  if (result != a2)
  {
    uint64_t v2 = result + 8;
    if (result + 8 != a2)
    {
      uint64_t v3 = 0;
      uint64_t v4 = result;
      do
      {
        uint64_t v5 = v2;
        float v6 = *(float *)(v4 + 8);
        if (v6 < *(float *)v4)
        {
          int v7 = *(_DWORD *)(v4 + 12);
          uint64_t v8 = v3;
          while (1)
          {
            *(void *)(result + v8 + 8) = *(void *)(result + v8);
            if (!v8) {
              break;
            }
            float v9 = *(float *)(result + v8 - 8);
            v8 -= 8;
            if (v9 <= v6)
            {
              uint64_t v10 = result + v8 + 8;
              goto LABEL_10;
            }
          }
          uint64_t v10 = result;
LABEL_10:
          *(float *)uint64_t v10 = v6;
          *(_DWORD *)(v10 + 4) = v7;
        }
        uint64_t v2 = v5 + 8;
        v3 += 8;
        uint64_t v4 = v5;
      }
      while (v5 + 8 != a2);
    }
  }
  return result;
}

uint64_t sub_1B663062C(float *a1, float *a2, float *a3)
{
  float v3 = *a2;
  float v4 = *a3;
  if (*a2 < *a1)
  {
    uint64_t v5 = *(void *)a1;
    if (v4 < v3)
    {
      *(void *)a1 = *(void *)a3;
      *(void *)a3 = v5;
      return 1;
    }
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v5;
    if (*a3 >= *(float *)&v5) {
      return 1;
    }
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v5;
    return 2;
  }
  if (v4 < v3)
  {
    uint64_t v6 = *(void *)a2;
    *(void *)a2 = *(void *)a3;
    *(void *)a3 = v6;
    if (*a2 >= *a1) {
      return 1;
    }
    uint64_t v7 = *(void *)a1;
    *(void *)a1 = *(void *)a2;
    *(void *)a2 = v7;
    return 2;
  }
  return 0;
}

float *sub_1B66306D8(float *a1, float *a2)
{
  uint64_t v2 = *(void *)a1;
  if (*(a2 - 2) <= COERCE_FLOAT(*(void *)a1))
  {
    uint64_t v5 = a1 + 2;
    do
    {
      float v3 = v5;
      if (v5 >= a2) {
        break;
      }
      v5 += 2;
    }
    while (*v3 <= *(float *)&v2);
  }
  else
  {
    float v3 = a1;
    do
    {
      float v4 = v3[2];
      v3 += 2;
    }
    while (v4 <= *(float *)&v2);
  }
  if (v3 < a2)
  {
    do
    {
      float v6 = *(a2 - 2);
      a2 -= 2;
    }
    while (v6 > *(float *)&v2);
  }
  while (v3 < a2)
  {
    uint64_t v7 = *(void *)v3;
    *(void *)float v3 = *(void *)a2;
    *(void *)a2 = v7;
    do
    {
      float v8 = v3[2];
      v3 += 2;
    }
    while (v8 <= *(float *)&v2);
    do
    {
      float v9 = *(a2 - 2);
      a2 -= 2;
    }
    while (v9 > *(float *)&v2);
  }
  if (v3 - 2 != a1) {
    *(void *)a1 = *((void *)v3 - 1);
  }
  *((void *)v3 - 1) = v2;
  return v3;
}

float *sub_1B6630784(float *a1, float *a2)
{
  uint64_t v2 = 0;
  uint64_t v3 = *(void *)a1;
  do
  {
    float v4 = a1[v2 + 2];
    v2 += 2;
  }
  while (v4 < *(float *)&v3);
  uint64_t v5 = &a1[v2];
  float v6 = &a1[v2 - 2];
  if (v2 == 2)
  {
    do
    {
      if (v5 >= a2) {
        break;
      }
      float v8 = *(a2 - 2);
      a2 -= 2;
    }
    while (v8 >= *(float *)&v3);
  }
  else
  {
    do
    {
      float v7 = *(a2 - 2);
      a2 -= 2;
    }
    while (v7 >= *(float *)&v3);
  }
  if (v5 < a2)
  {
    float v9 = &a1[v2];
    uint64_t v10 = a2;
    do
    {
      uint64_t v11 = *(void *)v9;
      *(void *)float v9 = *(void *)v10;
      *(void *)uint64_t v10 = v11;
      do
      {
        float v12 = v9[2];
        v9 += 2;
      }
      while (v12 < *(float *)&v3);
      do
      {
        float v13 = *(v10 - 2);
        v10 -= 2;
      }
      while (v13 >= *(float *)&v3);
    }
    while (v9 < v10);
    float v6 = v9 - 2;
  }
  if (v6 != a1) {
    *(void *)a1 = *(void *)v6;
  }
  *(void *)float v6 = v3;
  return v6;
}

BOOL sub_1B663083C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (a2 - a1) >> 3;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(float *)(a2 - 8) < *(float *)a1)
      {
        uint64_t v6 = *(void *)a1;
        *(void *)a1 = *(void *)(a2 - 8);
        *(void *)(a2 - 8) = v6;
      }
      return result;
    case 3:
      sub_1B663062C((float *)a1, (float *)(a1 + 8), (float *)(a2 - 8));
      return 1;
    case 4:
      sub_1B66309E4((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (void *)(a2 - 8));
      return 1;
    case 5:
      sub_1B6630A80((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16), (uint64_t *)(a1 + 24), (uint64_t *)(a2 - 8));
      return 1;
    default:
      float v7 = (float *)(a1 + 16);
      sub_1B663062C((float *)a1, (float *)(a1 + 8), (float *)(a1 + 16));
      uint64_t v8 = a1 + 24;
      if (a1 + 24 == a2) {
        return 1;
      }
      uint64_t v9 = 0;
      int v10 = 0;
      break;
  }
  while (1)
  {
    float v11 = *(float *)v8;
    if (*(float *)v8 < *v7)
    {
      int v12 = *(_DWORD *)(v8 + 4);
      uint64_t v13 = v9;
      while (1)
      {
        *(void *)(a1 + v13 + 24) = *(void *)(a1 + v13 + 16);
        if (v13 == -16) {
          break;
        }
        float v14 = *(float *)(a1 + v13 + 8);
        v13 -= 8;
        if (v14 <= v11)
        {
          uint64_t v15 = a1 + v13 + 24;
          goto LABEL_12;
        }
      }
      uint64_t v15 = a1;
LABEL_12:
      *(float *)uint64_t v15 = v11;
      *(_DWORD *)(v15 + 4) = v12;
      if (++v10 == 8) {
        return v8 + 8 == a2;
      }
    }
    float v7 = (float *)v8;
    v9 += 8;
    v8 += 8;
    if (v8 == a2) {
      return 1;
    }
  }
}

uint64_t sub_1B66309E4(float *a1, float *a2, float *a3, void *a4)
{
  uint64_t result = sub_1B663062C(a1, a2, a3);
  if (*(float *)a4 < *a3)
  {
    uint64_t v9 = *(void *)a3;
    *(void *)a3 = *a4;
    *a4 = v9;
    if (*a3 < *a2)
    {
      uint64_t v10 = *(void *)a2;
      *(void *)a2 = *(void *)a3;
      *(void *)a3 = v10;
      if (*a2 < *a1)
      {
        uint64_t v11 = *(void *)a1;
        *(void *)a1 = *(void *)a2;
        *(void *)a2 = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1B6630A80(float *a1, float *a2, float *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result = sub_1B66309E4(a1, a2, a3, a4);
  if (*(float *)a5 < *(float *)a4)
  {
    uint64_t v11 = *a4;
    *a4 = *a5;
    *a5 = v11;
    if (*(float *)a4 < *a3)
    {
      uint64_t v12 = *(void *)a3;
      *(void *)a3 = *a4;
      *a4 = v12;
      if (*a3 < *a2)
      {
        uint64_t v13 = *(void *)a2;
        *(void *)a2 = *(void *)a3;
        *(void *)a3 = v13;
        if (*a2 < *a1)
        {
          uint64_t v14 = *(void *)a1;
          *(void *)a1 = *(void *)a2;
          *(void *)a2 = v14;
        }
      }
    }
  }
  return result;
}

float *sub_1B6630B48(float *a1, float *a2, float *a3, uint64_t a4)
{
  if (a1 != a2)
  {
    uint64_t v6 = a2;
    uint64_t v8 = (char *)a2 - (char *)a1;
    uint64_t v9 = ((char *)a2 - (char *)a1) >> 3;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      unint64_t v10 = (unint64_t)(v9 - 2) >> 1;
      unint64_t v11 = v10 + 1;
      uint64_t v12 = &a1[2 * v10];
      do
      {
        sub_1B6630CE8((uint64_t)a1, a4, v9, v12);
        v12 -= 2;
        --v11;
      }
      while (v11);
    }
    uint64_t v13 = v6;
    if (v6 != a3)
    {
      uint64_t v14 = v6;
      do
      {
        if (*v14 < *a1)
        {
          uint64_t v15 = *(void *)v14;
          *(void *)uint64_t v14 = *(void *)a1;
          *(void *)a1 = v15;
          sub_1B6630CE8((uint64_t)a1, a4, v9, a1);
        }
        v14 += 2;
      }
      while (v14 != a3);
      uint64_t v13 = a3;
    }
    if (v8 >= 9)
    {
      uint64_t v16 = (unint64_t)v8 >> 3;
      do
      {
        uint64_t v17 = 0;
        uint64_t v18 = *(void *)a1;
        float v19 = a1;
        do
        {
          char v20 = v19;
          v19 += 2 * v17 + 2;
          uint64_t v21 = 2 * v17;
          uint64_t v17 = (2 * v17) | 1;
          uint64_t v22 = v21 + 2;
          if (v22 < v16 && *v19 < v19[2])
          {
            v19 += 2;
            uint64_t v17 = v22;
          }
          *(void *)char v20 = *(void *)v19;
        }
        while (v17 <= (uint64_t)((unint64_t)(v16 - 2) >> 1));
        v6 -= 2;
        if (v19 == v6)
        {
          *(void *)float v19 = v18;
        }
        else
        {
          *(void *)float v19 = *(void *)v6;
          *(void *)uint64_t v6 = v18;
          sub_1B6630DB4((uint64_t)a1, (uint64_t)(v19 + 2), a4, ((char *)(v19 + 2) - (char *)a1) >> 3);
        }
      }
      while (v16-- > 2);
    }
    return v13;
  }
  return a3;
}

uint64_t sub_1B6630CE8(uint64_t result, uint64_t a2, uint64_t a3, float *a4)
{
  if (a3 >= 2)
  {
    uint64_t v4 = (uint64_t)a4 - result;
    int64_t v5 = (unint64_t)(a3 - 2) >> 1;
    if (v5 >= ((uint64_t)a4 - result) >> 3)
    {
      uint64_t v6 = v4 >> 2;
      uint64_t v7 = (v4 >> 2) + 1;
      uint64_t v8 = (float *)(result + 8 * v7);
      uint64_t v9 = v6 + 2;
      if (v9 < a3 && *v8 < v8[2])
      {
        v8 += 2;
        uint64_t v7 = v9;
      }
      float v10 = *a4;
      if (*v8 >= *a4)
      {
        int v11 = *((_DWORD *)a4 + 1);
        do
        {
          uint64_t v12 = a4;
          a4 = v8;
          *(void *)uint64_t v12 = *(void *)v8;
          if (v5 < v7) {
            break;
          }
          uint64_t v13 = 2 * v7;
          uint64_t v7 = (2 * v7) | 1;
          uint64_t v8 = (float *)(result + 8 * v7);
          uint64_t v14 = v13 + 2;
          if (v14 < a3 && *v8 < v8[2])
          {
            v8 += 2;
            uint64_t v7 = v14;
          }
        }
        while (*v8 >= v10);
        *a4 = v10;
        *((_DWORD *)a4 + 1) = v11;
      }
    }
  }
  return result;
}

uint64_t sub_1B6630DB4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v4 = a4 - 2;
  if (a4 >= 2)
  {
    unint64_t v5 = v4 >> 1;
    uint64_t v6 = (void *)(result + 8 * (v4 >> 1));
    uint64_t v7 = (void *)(a2 - 8);
    float v8 = *(float *)(a2 - 8);
    if (*(float *)v6 < v8)
    {
      int v9 = *(_DWORD *)(a2 - 4);
      do
      {
        float v10 = v7;
        uint64_t v7 = v6;
        *float v10 = *v6;
        if (!v5) {
          break;
        }
        unint64_t v5 = (v5 - 1) >> 1;
        uint64_t v6 = (void *)(result + 8 * v5);
      }
      while (*(float *)v6 < v8);
      *(float *)uint64_t v7 = v8;
      *((_DWORD *)v7 + 1) = v9;
    }
  }
  return result;
}

BOOL sub_1B6630E14(int a1, int a2)
{
  return ((a2 ^ a1) & 1) == 0;
}

uint64_t sub_1B6630E24()
{
  return sub_1B6E33928();
}

uint64_t sub_1B6630E4C()
{
  return sub_1B6E33988();
}

BOOL sub_1B6630E94(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6630E14(*a1, *a2);
}

uint64_t sub_1B6630EA0()
{
  return sub_1B6630E4C();
}

uint64_t sub_1B6630EA8()
{
  return sub_1B6630E24();
}

uint64_t sub_1B6630EB0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6630EF0()
{
  sub_1B6630F24();
  sub_1B62C6A50(*(void *)(v0 + 40));

  return v0;
}

void sub_1B6630F24()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(void *)(v0 + 40) = 0;
  *(void *)(v0 + 48) = 0;
  sub_1B62C6A50(v1);
  objc_msgSend(*(id *)(v0 + 64), sel_invalidate);
  uint64_t v2 = *(void **)(v0 + 64);
  *(void *)(v0 + 64) = 0;
}

uint64_t sub_1B6630F6C()
{
  sub_1B6630EF0();

  return swift_deallocClassInstance();
}

BOOL sub_1B6630FA0()
{
  return *(void *)(v0 + 64) == 0;
}

BOOL sub_1B6630FB0()
{
  return sub_1B6630FA0();
}

void sub_1B6630FD8()
{
}

uint64_t sub_1B6630FFC()
{
  return swift_initClassMetadata2();
}

uint64_t type metadata accessor for TimeThrottledInvocation()
{
  return sub_1B62C36EC();
}

void type metadata accessor for MTLColorWriteMask(uint64_t a1)
{
}

void type metadata accessor for MTLPrimitiveTopologyClass(uint64_t a1)
{
}

void *initializeBufferWithCopyOfBuffer for CommandQueue(void *result, void *a2)
{
  *uint64_t result = *a2;
  return result;
}

void type metadata accessor for RGTextureReferenceDescriptor(uint64_t a1)
{
}

void type metadata accessor for MTLVertexFormat(uint64_t a1)
{
}

void type metadata accessor for CFRunLoopSource(uint64_t a1)
{
}

void type metadata accessor for CFRunLoop(uint64_t a1)
{
}

void *sub_1B6631114(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x2000uLL);
}

uint64_t sub_1B663111C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 0x2000)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B6631140(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8184) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 4344) = 0u;
    *(_OWORD *)(result + 4328) = 0u;
    *(_OWORD *)(result + 4312) = 0u;
    *(_OWORD *)(result + 4296) = 0u;
    *(_OWORD *)(result + 4280) = 0u;
    *(_OWORD *)(result + 4264) = 0u;
    *(_OWORD *)(result + 4248) = 0u;
    *(_OWORD *)(result + 4232) = 0u;
    *(_OWORD *)(result + 4216) = 0u;
    *(_OWORD *)(result + 4200) = 0u;
    *(_OWORD *)(result + 4184) = 0u;
    *(_OWORD *)(result + 4168) = 0u;
    *(_OWORD *)(result + 4152) = 0u;
    *(_OWORD *)(result + 4136) = 0u;
    *(_OWORD *)(result + 4120) = 0u;
    *(_OWORD *)(result + 4104) = 0u;
    *(_OWORD *)(result + 4088) = 0u;
    *(_OWORD *)(result + 4072) = 0u;
    *(_OWORD *)(result + 4056) = 0u;
    *(_OWORD *)(result + 4040) = 0u;
    *(_OWORD *)(result + 4024) = 0u;
    *(_OWORD *)(result + 4008) = 0u;
    *(_OWORD *)(result + 3992) = 0u;
    *(_OWORD *)(result + 3976) = 0u;
    *(_OWORD *)(result + 3960) = 0u;
    *(_OWORD *)(result + 3944) = 0u;
    *(_OWORD *)(result + 3928) = 0u;
    *(_OWORD *)(result + 3912) = 0u;
    *(_OWORD *)(result + 3896) = 0u;
    *(_OWORD *)(result + 3880) = 0u;
    *(_OWORD *)(result + 3864) = 0u;
    *(_OWORD *)(result + 3848) = 0u;
    *(_OWORD *)(result + 3832) = 0u;
    *(_OWORD *)(result + 3816) = 0u;
    *(_OWORD *)(result + 3800) = 0u;
    *(_OWORD *)(result + 3784) = 0u;
    *(_OWORD *)(result + 3768) = 0u;
    *(_OWORD *)(result + 3752) = 0u;
    *(_OWORD *)(result + 3736) = 0u;
    *(_OWORD *)(result + 3720) = 0u;
    *(_OWORD *)(result + 3704) = 0u;
    *(_OWORD *)(result + 3688) = 0u;
    *(_OWORD *)(result + 3672) = 0u;
    *(_OWORD *)(result + 3656) = 0u;
    *(_OWORD *)(result + 3640) = 0u;
    *(_OWORD *)(result + 3624) = 0u;
    *(_OWORD *)(result + 3608) = 0u;
    *(_OWORD *)(result + 3592) = 0u;
    *(_OWORD *)(result + 3576) = 0u;
    *(_OWORD *)(result + 3560) = 0u;
    *(_OWORD *)(result + 3544) = 0u;
    *(_OWORD *)(result + 3528) = 0u;
    *(_OWORD *)(result + 3512) = 0u;
    *(_OWORD *)(result + 3496) = 0u;
    *(_OWORD *)(result + 3480) = 0u;
    *(_OWORD *)(result + 3464) = 0u;
    *(_OWORD *)(result + 3448) = 0u;
    *(_OWORD *)(result + 3432) = 0u;
    *(_OWORD *)(result + 3416) = 0u;
    *(_OWORD *)(result + 3400) = 0u;
    *(_OWORD *)(result + 3384) = 0u;
    *(_OWORD *)(result + 3368) = 0u;
    *(_OWORD *)(result + 3352) = 0u;
    *(_OWORD *)(result + 3336) = 0u;
    *(_OWORD *)(result + 3320) = 0u;
    *(_OWORD *)(result + 3304) = 0u;
    *(_OWORD *)(result + 3288) = 0u;
    *(_OWORD *)(result + 3272) = 0u;
    *(_OWORD *)(result + 3256) = 0u;
    *(_OWORD *)(result + 3240) = 0u;
    *(_OWORD *)(result + 3224) = 0u;
    *(_OWORD *)(result + 3208) = 0u;
    *(_OWORD *)(result + 3192) = 0u;
    *(_OWORD *)(result + 3176) = 0u;
    *(_OWORD *)(result + 3160) = 0u;
    *(_OWORD *)(result + 3144) = 0u;
    *(_OWORD *)(result + 3128) = 0u;
    *(_OWORD *)(result + 3112) = 0u;
    *(_OWORD *)(result + 3096) = 0u;
    *(_OWORD *)(result + 3080) = 0u;
    *(_OWORD *)(result + 3064) = 0u;
    *(_OWORD *)(result + 3048) = 0u;
    *(_OWORD *)(result + 3032) = 0u;
    *(_OWORD *)(result + 3016) = 0u;
    *(_OWORD *)(result + 3000) = 0u;
    *(_OWORD *)(result + 2984) = 0u;
    *(_OWORD *)(result + 2968) = 0u;
    *(_OWORD *)(result + 2952) = 0u;
    *(_OWORD *)(result + 2936) = 0u;
    *(_OWORD *)(result + 2920) = 0u;
    *(_OWORD *)(result + 2904) = 0u;
    *(_OWORD *)(result + 2888) = 0u;
    *(_OWORD *)(result + 2872) = 0u;
    *(_OWORD *)(result + 2856) = 0u;
    *(_OWORD *)(result + 2840) = 0u;
    *(_OWORD *)(result + 2824) = 0u;
    *(_OWORD *)(result + 2808) = 0u;
    *(_OWORD *)(result + 2792) = 0u;
    *(_OWORD *)(result + 2776) = 0u;
    *(_OWORD *)(result + 2760) = 0u;
    *(_OWORD *)(result + 2744) = 0u;
    *(_OWORD *)(result + 2728) = 0u;
    *(_OWORD *)(result + 2712) = 0u;
    *(_OWORD *)(result + 2696) = 0u;
    *(_OWORD *)(result + 2680) = 0u;
    *(_OWORD *)(result + 2664) = 0u;
    *(_OWORD *)(result + 2648) = 0u;
    *(_OWORD *)(result + 2632) = 0u;
    *(_OWORD *)(result + 2616) = 0u;
    *(_OWORD *)(result + 2600) = 0u;
    *(_OWORD *)(result + 2584) = 0u;
    *(_OWORD *)(result + 2568) = 0u;
    *(_OWORD *)(result + 2552) = 0u;
    *(_OWORD *)(result + 2536) = 0u;
    *(_OWORD *)(result + 2520) = 0u;
    *(_OWORD *)(result + 2504) = 0u;
    *(_OWORD *)(result + 2488) = 0u;
    *(_OWORD *)(result + 2472) = 0u;
    *(_OWORD *)(result + 2456) = 0u;
    *(_OWORD *)(result + 2440) = 0u;
    *(_OWORD *)(result + 2424) = 0u;
    *(_OWORD *)(result + 2408) = 0u;
    *(_OWORD *)(result + 2392) = 0u;
    *(_OWORD *)(result + 2376) = 0u;
    *(_OWORD *)(result + 2360) = 0u;
    *(_OWORD *)(result + 2344) = 0u;
    *(_OWORD *)(result + 2328) = 0u;
    *(_OWORD *)(result + 2312) = 0u;
    *(_OWORD *)(result + 2296) = 0u;
    *(_OWORD *)(result + 2280) = 0u;
    *(_OWORD *)(result + 2264) = 0u;
    *(_OWORD *)(result + 2248) = 0u;
    *(_OWORD *)(result + 2232) = 0u;
    *(_OWORD *)(result + 2216) = 0u;
    *(_OWORD *)(result + 2200) = 0u;
    *(_OWORD *)(result + 2184) = 0u;
    *(_OWORD *)(result + 2168) = 0u;
    *(_OWORD *)(result + 2152) = 0u;
    *(_OWORD *)(result + 2136) = 0u;
    *(_OWORD *)(result + 2120) = 0u;
    *(_OWORD *)(result + 2104) = 0u;
    *(_OWORD *)(result + 2088) = 0u;
    *(_OWORD *)(result + 2072) = 0u;
    *(_OWORD *)(result + 2056) = 0u;
    *(_OWORD *)(result + 2040) = 0u;
    *(_OWORD *)(result + 2024) = 0u;
    *(_OWORD *)(result + 2008) = 0u;
    *(_OWORD *)(result + 1992) = 0u;
    *(_OWORD *)(result + 1976) = 0u;
    *(_OWORD *)(result + 1960) = 0u;
    *(_OWORD *)(result + 1944) = 0u;
    *(_OWORD *)(result + 1928) = 0u;
    *(_OWORD *)(result + 1912) = 0u;
    *(_OWORD *)(result + 1896) = 0u;
    *(_OWORD *)(result + 1880) = 0u;
    *(_OWORD *)(result + 1864) = 0u;
    *(_OWORD *)(result + 1848) = 0u;
    *(_OWORD *)(result + 1832) = 0u;
    *(_OWORD *)(result + 1816) = 0u;
    *(_OWORD *)(result + 1800) = 0u;
    *(_OWORD *)(result + 1784) = 0u;
    *(_OWORD *)(result + 1768) = 0u;
    *(_OWORD *)(result + 1752) = 0u;
    *(_OWORD *)(result + 1736) = 0u;
    *(_OWORD *)(result + 1720) = 0u;
    *(_OWORD *)(result + 1704) = 0u;
    *(_OWORD *)(result + 1688) = 0u;
    *(_OWORD *)(result + 1672) = 0u;
    *(_OWORD *)(result + 1656) = 0u;
    *(_OWORD *)(result + 1640) = 0u;
    *(_OWORD *)(result + 1624) = 0u;
    *(_OWORD *)(result + 1608) = 0u;
    *(_OWORD *)(result + 1592) = 0u;
    *(_OWORD *)(result + 1576) = 0u;
    *(_OWORD *)(result + 1560) = 0u;
    *(_OWORD *)(result + 1544) = 0u;
    *(_OWORD *)(result + 1528) = 0u;
    *(_OWORD *)(result + 1512) = 0u;
    *(_OWORD *)(result + 1496) = 0u;
    *(_OWORD *)(result + 1480) = 0u;
    *(_OWORD *)(result + 1464) = 0u;
    *(_OWORD *)(result + 1448) = 0u;
    *(_OWORD *)(result + 1432) = 0u;
    *(_OWORD *)(result + 1416) = 0u;
    *(_OWORD *)(result + 1400) = 0u;
    *(_OWORD *)(result + 1384) = 0u;
    *(_OWORD *)(result + 1368) = 0u;
    *(_OWORD *)(result + 1352) = 0u;
    *(_OWORD *)(result + 1336) = 0u;
    *(_OWORD *)(result + 1320) = 0u;
    *(_OWORD *)(result + 1304) = 0u;
    *(_OWORD *)(result + 1288) = 0u;
    *(_OWORD *)(result + 1272) = 0u;
    *(_OWORD *)(result + 1256) = 0u;
    *(_OWORD *)(result + 1240) = 0u;
    *(_OWORD *)(result + 1224) = 0u;
    *(_OWORD *)(result + 1208) = 0u;
    *(_OWORD *)(result + 1192) = 0u;
    *(_OWORD *)(result + 1176) = 0u;
    *(_OWORD *)(result + 1160) = 0u;
    *(_OWORD *)(result + 1144) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(_OWORD *)(result + 8168) = 0u;
    *(_OWORD *)(result + 8152) = 0u;
    *(_OWORD *)(result + 8136) = 0u;
    *(_OWORD *)(result + 8120) = 0u;
    *(_OWORD *)(result + 8104) = 0u;
    *(_OWORD *)(result + 8088) = 0u;
    *(_OWORD *)(result + 8072) = 0u;
    *(_OWORD *)(result + 8056) = 0u;
    *(_OWORD *)(result + 8040) = 0u;
    *(_OWORD *)(result + 8024) = 0u;
    *(_OWORD *)(result + 8008) = 0u;
    *(_OWORD *)(result + 7992) = 0u;
    *(_OWORD *)(result + 7976) = 0u;
    *(_OWORD *)(result + 7960) = 0u;
    *(_OWORD *)(result + 7944) = 0u;
    *(_OWORD *)(result + 7928) = 0u;
    *(_OWORD *)(result + 7912) = 0u;
    *(_OWORD *)(result + 7896) = 0u;
    *(_OWORD *)(result + 7880) = 0u;
    *(_OWORD *)(result + 7864) = 0u;
    *(_OWORD *)(result + 7848) = 0u;
    *(_OWORD *)(result + 7832) = 0u;
    *(_OWORD *)(result + 7816) = 0u;
    *(_OWORD *)(result + 7800) = 0u;
    *(_OWORD *)(result + 7784) = 0u;
    *(_OWORD *)(result + 7768) = 0u;
    *(_OWORD *)(result + 7752) = 0u;
    *(_OWORD *)(result + 7736) = 0u;
    *(_OWORD *)(result + 7720) = 0u;
    *(_OWORD *)(result + 7704) = 0u;
    *(_OWORD *)(result + 7688) = 0u;
    *(_OWORD *)(result + 7672) = 0u;
    *(_OWORD *)(result + 7656) = 0u;
    *(_OWORD *)(result + 7640) = 0u;
    *(_OWORD *)(result + 7624) = 0u;
    *(_OWORD *)(result + 7608) = 0u;
    *(_OWORD *)(result + 7592) = 0u;
    *(_OWORD *)(result + 7576) = 0u;
    *(_OWORD *)(result + 7560) = 0u;
    *(_OWORD *)(result + 7544) = 0u;
    *(_OWORD *)(result + 7528) = 0u;
    *(_OWORD *)(result + 7512) = 0u;
    *(_OWORD *)(result + 7496) = 0u;
    *(_OWORD *)(result + 7480) = 0u;
    *(_OWORD *)(result + 7464) = 0u;
    *(_OWORD *)(result + 7448) = 0u;
    *(_OWORD *)(result + 7432) = 0u;
    *(_OWORD *)(result + 7416) = 0u;
    *(_OWORD *)(result + 7400) = 0u;
    *(_OWORD *)(result + 7384) = 0u;
    *(_OWORD *)(result + 7368) = 0u;
    *(_OWORD *)(result + 7352) = 0u;
    *(_OWORD *)(result + 7336) = 0u;
    *(_OWORD *)(result + 7320) = 0u;
    *(_OWORD *)(result + 7304) = 0u;
    *(_OWORD *)(result + 7288) = 0u;
    *(_OWORD *)(result + 7272) = 0u;
    *(_OWORD *)(result + 7256) = 0u;
    *(_OWORD *)(result + 7240) = 0u;
    *(_OWORD *)(result + 7224) = 0u;
    *(_OWORD *)(result + 7208) = 0u;
    *(_OWORD *)(result + 7192) = 0u;
    *(_OWORD *)(result + 7176) = 0u;
    *(_OWORD *)(result + 7160) = 0u;
    *(_OWORD *)(result + 7144) = 0u;
    *(_OWORD *)(result + 7128) = 0u;
    *(_OWORD *)(result + 7112) = 0u;
    *(_OWORD *)(result + 7096) = 0u;
    *(_OWORD *)(result + 7080) = 0u;
    *(_OWORD *)(result + 7064) = 0u;
    *(_OWORD *)(result + 7048) = 0u;
    *(_OWORD *)(result + 7032) = 0u;
    *(_OWORD *)(result + 7016) = 0u;
    *(_OWORD *)(result + 7000) = 0u;
    *(_OWORD *)(result + 6984) = 0u;
    *(_OWORD *)(result + 6968) = 0u;
    *(_OWORD *)(result + 6952) = 0u;
    *(_OWORD *)(result + 6936) = 0u;
    *(_OWORD *)(result + 6920) = 0u;
    *(_OWORD *)(result + 6904) = 0u;
    *(_OWORD *)(result + 6888) = 0u;
    *(_OWORD *)(result + 6872) = 0u;
    *(_OWORD *)(result + 6856) = 0u;
    *(_OWORD *)(result + 6840) = 0u;
    *(_OWORD *)(result + 6824) = 0u;
    *(_OWORD *)(result + 6808) = 0u;
    *(_OWORD *)(result + 6792) = 0u;
    *(_OWORD *)(result + 6776) = 0u;
    *(_OWORD *)(result + 6760) = 0u;
    *(_OWORD *)(result + 6744) = 0u;
    *(_OWORD *)(result + 6728) = 0u;
    *(_OWORD *)(result + 6712) = 0u;
    *(_OWORD *)(result + 6696) = 0u;
    *(_OWORD *)(result + 6680) = 0u;
    *(_OWORD *)(result + 6664) = 0u;
    *(_OWORD *)(result + 6648) = 0u;
    *(_OWORD *)(result + 6632) = 0u;
    *(_OWORD *)(result + 6616) = 0u;
    *(_OWORD *)(result + 6600) = 0u;
    *(_OWORD *)(result + 6584) = 0u;
    *(_OWORD *)(result + 6568) = 0u;
    *(_OWORD *)(result + 6552) = 0u;
    *(_OWORD *)(result + 6536) = 0u;
    *(_OWORD *)(result + 6520) = 0u;
    *(_OWORD *)(result + 6504) = 0u;
    *(_OWORD *)(result + 6488) = 0u;
    *(_OWORD *)(result + 6472) = 0u;
    *(_OWORD *)(result + 6456) = 0u;
    *(_OWORD *)(result + 6440) = 0u;
    *(_OWORD *)(result + 6424) = 0u;
    *(_OWORD *)(result + 6408) = 0u;
    *(_OWORD *)(result + 6392) = 0u;
    *(_OWORD *)(result + 6376) = 0u;
    *(_OWORD *)(result + 6360) = 0u;
    *(_OWORD *)(result + 6344) = 0u;
    *(_OWORD *)(result + 6328) = 0u;
    *(_OWORD *)(result + 6312) = 0u;
    *(_OWORD *)(result + 6296) = 0u;
    *(_OWORD *)(result + 6280) = 0u;
    *(_OWORD *)(result + 6264) = 0u;
    *(_OWORD *)(result + 6248) = 0u;
    *(_OWORD *)(result + 6232) = 0u;
    *(_OWORD *)(result + 6216) = 0u;
    *(_OWORD *)(result + 6200) = 0u;
    *(_OWORD *)(result + 6184) = 0u;
    *(_OWORD *)(result + 6168) = 0u;
    *(_OWORD *)(result + 6152) = 0u;
    *(_OWORD *)(result + 6136) = 0u;
    *(_OWORD *)(result + 6120) = 0u;
    *(_OWORD *)(result + 6104) = 0u;
    *(_OWORD *)(result + 6088) = 0u;
    *(_OWORD *)(result + 6072) = 0u;
    *(_OWORD *)(result + 6056) = 0u;
    *(_OWORD *)(result + 6040) = 0u;
    *(_OWORD *)(result + 6024) = 0u;
    *(_OWORD *)(result + 6008) = 0u;
    *(_OWORD *)(result + 5992) = 0u;
    *(_OWORD *)(result + 5976) = 0u;
    *(_OWORD *)(result + 5960) = 0u;
    *(_OWORD *)(result + 5944) = 0u;
    *(_OWORD *)(result + 5928) = 0u;
    *(_OWORD *)(result + 5912) = 0u;
    *(_OWORD *)(result + 5896) = 0u;
    *(_OWORD *)(result + 5880) = 0u;
    *(_OWORD *)(result + 5864) = 0u;
    *(_OWORD *)(result + 5848) = 0u;
    *(_OWORD *)(result + 5832) = 0u;
    *(_OWORD *)(result + 5816) = 0u;
    *(_OWORD *)(result + 5800) = 0u;
    *(_OWORD *)(result + 5784) = 0u;
    *(_OWORD *)(result + 5768) = 0u;
    *(_OWORD *)(result + 5752) = 0u;
    *(_OWORD *)(result + 5736) = 0u;
    *(_OWORD *)(result + 5720) = 0u;
    *(_OWORD *)(result + 5704) = 0u;
    *(_OWORD *)(result + 5688) = 0u;
    *(_OWORD *)(result + 5672) = 0u;
    *(_OWORD *)(result + 5656) = 0u;
    *(_OWORD *)(result + 5640) = 0u;
    *(_OWORD *)(result + 5624) = 0u;
    *(_OWORD *)(result + 5608) = 0u;
    *(_OWORD *)(result + 5592) = 0u;
    *(_OWORD *)(result + 5576) = 0u;
    *(_OWORD *)(result + 5560) = 0u;
    *(_OWORD *)(result + 5544) = 0u;
    *(_OWORD *)(result + 5528) = 0u;
    *(_OWORD *)(result + 5512) = 0u;
    *(_OWORD *)(result + 5496) = 0u;
    *(_OWORD *)(result + 5480) = 0u;
    *(_OWORD *)(result + 5464) = 0u;
    *(_OWORD *)(result + 5448) = 0u;
    *(_OWORD *)(result + 5432) = 0u;
    *(_OWORD *)(result + 5416) = 0u;
    *(_OWORD *)(result + 5400) = 0u;
    *(_OWORD *)(result + 5384) = 0u;
    *(_OWORD *)(result + 5368) = 0u;
    *(_OWORD *)(result + 5352) = 0u;
    *(_OWORD *)(result + 5336) = 0u;
    *(_OWORD *)(result + 5320) = 0u;
    *(_OWORD *)(result + 5304) = 0u;
    *(_OWORD *)(result + 5288) = 0u;
    *(_OWORD *)(result + 5272) = 0u;
    *(_OWORD *)(result + 5256) = 0u;
    *(_OWORD *)(result + 5240) = 0u;
    *(_OWORD *)(result + 5224) = 0u;
    *(_OWORD *)(result + 5208) = 0u;
    *(_OWORD *)(result + 5192) = 0u;
    *(_OWORD *)(result + 5176) = 0u;
    *(_OWORD *)(result + 5160) = 0u;
    *(_OWORD *)(result + 5144) = 0u;
    *(_OWORD *)(result + 5128) = 0u;
    *(_OWORD *)(result + 5112) = 0u;
    *(_OWORD *)(result + 5096) = 0u;
    *(_OWORD *)(result + 5080) = 0u;
    *(_OWORD *)(result + 5064) = 0u;
    *(_OWORD *)(result + 5048) = 0u;
    *(_OWORD *)(result + 5032) = 0u;
    *(_OWORD *)(result + 5016) = 0u;
    *(_OWORD *)(result + 5000) = 0u;
    *(_OWORD *)(result + 4984) = 0u;
    *(_OWORD *)(result + 4968) = 0u;
    *(_OWORD *)(result + 4952) = 0u;
    *(_OWORD *)(result + 4936) = 0u;
    *(_OWORD *)(result + 4920) = 0u;
    *(_OWORD *)(result + 4904) = 0u;
    *(_OWORD *)(result + 4888) = 0u;
    *(_OWORD *)(result + 4872) = 0u;
    *(_OWORD *)(result + 4856) = 0u;
    *(_OWORD *)(result + 4840) = 0u;
    *(_OWORD *)(result + 4824) = 0u;
    *(_OWORD *)(result + 4808) = 0u;
    *(_OWORD *)(result + 4792) = 0u;
    *(_OWORD *)(result + 4776) = 0u;
    *(_OWORD *)(result + 4760) = 0u;
    *(_OWORD *)(result + 4744) = 0u;
    *(_OWORD *)(result + 4728) = 0u;
    *(_OWORD *)(result + 4712) = 0u;
    *(_OWORD *)(result + 4696) = 0u;
    *(_OWORD *)(result + 4680) = 0u;
    *(_OWORD *)(result + 4664) = 0u;
    *(_OWORD *)(result + 4648) = 0u;
    *(_OWORD *)(result + 4632) = 0u;
    *(_OWORD *)(result + 4616) = 0u;
    *(_OWORD *)(result + 4600) = 0u;
    *(_OWORD *)(result + 4584) = 0u;
    *(_OWORD *)(result + 4568) = 0u;
    *(_OWORD *)(result + 4552) = 0u;
    *(_OWORD *)(result + 4536) = 0u;
    *(_OWORD *)(result + 4520) = 0u;
    *(_OWORD *)(result + 4504) = 0u;
    *(_OWORD *)(result + 4488) = 0u;
    *(_OWORD *)(result + 4472) = 0u;
    *(_OWORD *)(result + 4456) = 0u;
    *(_OWORD *)(result + 4440) = 0u;
    *(_OWORD *)(result + 4424) = 0u;
    *(_OWORD *)(result + 4408) = 0u;
    *(_OWORD *)(result + 4392) = 0u;
    *(_OWORD *)(result + 4376) = 0u;
    *(_OWORD *)(result + 4360) = 0u;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 0x2000) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_t(uint64_t a1)
{
}

void type metadata accessor for MTLDepthClipMode(uint64_t a1)
{
}

void type metadata accessor for MTLTriangleFillMode(uint64_t a1)
{
}

void type metadata accessor for MTLIndexType(uint64_t a1)
{
}

void type metadata accessor for MTLPrimitiveType(uint64_t a1)
{
}

void type metadata accessor for RGBuilder(uint64_t a1)
{
}

void type metadata accessor for RGContext(uint64_t a1)
{
}

void type metadata accessor for vfx_counters(uint64_t a1)
{
}

__n128 initializeWithCopy for TextureCPURuntime.Slice(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

void type metadata accessor for _opaque_pthread_mutex_t(uint64_t a1)
{
}

void type metadata accessor for CFXWorld(uint64_t a1)
{
}

void type metadata accessor for IOSurfaceRef(uint64_t a1)
{
}

void type metadata accessor for CMSampleBuffer(uint64_t a1)
{
}

void type metadata accessor for CVMetalTextureCache(uint64_t a1)
{
}

void type metadata accessor for CMTime(uint64_t a1)
{
}

void type metadata accessor for CGSize(uint64_t a1)
{
}

void type metadata accessor for MTLLoadAction(uint64_t a1)
{
}

uint64_t sub_1B6631B7C(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 20);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1B6631BD0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 20) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for vfx_memory_entry_t(uint64_t a1)
{
}

uint64_t sub_1B6631C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 8);
}

unsigned char *sub_1B6631C30(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *__n128 result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6631CFCLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 1;
        break;
    }
  }
  return result;
}

uint64_t sub_1B6631D24(unsigned __int8 *a1)
{
  return *a1;
}

unsigned char *sub_1B6631D2C(unsigned char *result, char a2)
{
  *__n128 result = a2 & 1;
  return result;
}

uint64_t type metadata accessor for TimeThrottledInvocation.Variant()
{
  return sub_1B62C36EC();
}

uint64_t storeEnumTagSinglePayload for QueryHeader.Field(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)__n128 result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 4) = v3;
  return result;
}

void type metadata accessor for MTLTextureSwizzleChannels(uint64_t a1)
{
}

void type metadata accessor for MTLHazardTrackingMode(uint64_t a1)
{
}

void type metadata accessor for MTLWinding(uint64_t a1)
{
}

void type metadata accessor for MTLCPUCacheMode(uint64_t a1)
{
}

void type metadata accessor for MTLTextureUsage(uint64_t a1)
{
}

void type metadata accessor for MTLStorageMode(uint64_t a1)
{
}

void type metadata accessor for MTLResourceOptions(uint64_t a1)
{
}

void type metadata accessor for MTLTextureType(uint64_t a1)
{
}

__n128 _s17CodeSourceSnippetC9ParameterVwtk(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for RotateAction(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RotateAction(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 32) = v3;
  return result;
}

void type metadata accessor for MTLClearColor(uint64_t a1)
{
}

void type metadata accessor for MTLPixelFormat(uint64_t a1)
{
}

void type metadata accessor for MTLDataType(uint64_t a1)
{
}

__n128 initializeWithCopy for Float3x3Coder(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v3;
  *(__n128 *)a1 = result;
  return result;
}

void type metadata accessor for external_entity_constants(uint64_t a1)
{
}

void type metadata accessor for external_scene_buffers(uint64_t a1)
{
}

void type metadata accessor for external_scene_constants(uint64_t a1)
{
}

void type metadata accessor for global_constants(uint64_t a1)
{
}

void type metadata accessor for VFXTriggerType(uint64_t a1)
{
}

void type metadata accessor for VFXCameraToneMappingMode(uint64_t a1)
{
}

void type metadata accessor for VFXCameraLensBlurFilterQuality(uint64_t a1)
{
}

void type metadata accessor for VFXCameraFillMode(uint64_t a1)
{
}

void type metadata accessor for VFXCameraProjectionDirection(uint64_t a1)
{
}

void type metadata accessor for VFXForceFieldType(uint64_t a1)
{
}

void type metadata accessor for MTLCompareFunction(uint64_t a1)
{
}

void type metadata accessor for MTLCullMode(uint64_t a1)
{
}

void type metadata accessor for ForceFieldCullMode(uint64_t a1)
{
}

void type metadata accessor for ForceFieldShape(uint64_t a1)
{
}

void type metadata accessor for ForceFieldScope(uint64_t a1)
{
}

void type metadata accessor for ForceFieldType(uint64_t a1)
{
}

__n128 initializeWithTake for BufferPool.PaddedConstantBuffer(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(__n128 *)(a1 + 32) = result;
  *(_OWORD *)(a1 + 48) = v4;
  return result;
}

uint64_t sub_1B663201C(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 72);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1B6632078(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 96) = 0;
    }
    if (a2) {
      *(void *)(result + 72) = a2;
    }
  }
  return result;
}

void type metadata accessor for __vfx_sampler3d(uint64_t a1)
{
}

uint64_t sub_1B66320F8(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 56)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 40);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1B6632154(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 56) = 0;
    }
    if (a2) {
      *(void *)(result + 40) = a2;
    }
  }
  return result;
}

void type metadata accessor for __vfx_sampler2d(uint64_t a1)
{
}

void type metadata accessor for MTLTextureSwizzle(uint64_t a1)
{
}

uint64_t sub_1B66321DC(uint64_t a1, uint64_t a2)
{
  return sub_1B6635500(a1, a2, MEMORY[0x1E4F27EB8]);
}

uint64_t sub_1B6632200(uint64_t a1, uint64_t a2)
{
  return sub_1B6635500(a1, a2, MEMORY[0x1E4FBB198]);
}

uint64_t sub_1B6632220(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return MEMORY[0x1F4184B08](a1, a4, a2, a5, a3);
}

uint64_t sub_1B6632238()
{
  return sub_1B6632C68(&qword_1E9DCD060, type metadata accessor for MTLCompareFunction);
}

uint64_t sub_1B6632280()
{
  swift_getWitnessTable();

  return sub_1B6E31148();
}

uint64_t sub_1B66322F0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1B6E31798();
  *a1 = result;
  a1[1] = v3;
  return result;
}

uint64_t sub_1B663231C(uint64_t a1)
{
  uint64_t v2 = sub_1B6632C68(&qword_1E9DCD6B8, type metadata accessor for MTLLibraryError);

  return MEMORY[0x1F40E6E20](a1, v2);
}

uint64_t sub_1B6632388(uint64_t a1)
{
  uint64_t v2 = sub_1B6632C68(&qword_1E9DCD6B8, type metadata accessor for MTLLibraryError);

  return MEMORY[0x1F40E6E10](a1, v2);
}

uint64_t sub_1B66323F8(uint64_t a1)
{
  uint64_t v2 = sub_1B6632C68((unint64_t *)&qword_1E9DCD6F0, type metadata accessor for MTLLibraryError);

  return MEMORY[0x1F40E4480](a1, v2);
}

id sub_1B6632464()
{
  return *v0;
}

uint64_t sub_1B663246C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  *a2 = result;
  return result;
}

void *sub_1B6632474@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

void *sub_1B6632488@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

void *sub_1B663249C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1B66324B0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

void *sub_1B66324E0@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v3 == 0;
  return result;
}

uint64_t *sub_1B663250C@<X0>(uint64_t *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  *v2 |= *result;
  uint64_t v5 = v4 & v3;
  *(void *)a2 = v5;
  *(unsigned char *)(a2 + 8) = v5 == 0;
  return result;
}

void *sub_1B6632530(void *result)
{
  *v1 |= *result;
  return result;
}

void *sub_1B6632544(void *result)
{
  *v1 &= *result;
  return result;
}

void *sub_1B6632558(void *result)
{
  *v1 ^= *result;
  return result;
}

void *sub_1B663256C@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1B6632580(void *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1B6632594(void *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1B66325A8(void *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1B66325BC()
{
  return *v0 == 0;
}

void *sub_1B66325CC(void *result)
{
  *v1 &= ~*result;
  return result;
}

void *sub_1B66325E0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result;
  return result;
}

BOOL sub_1B66325EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return *a1 == *a2;
}

void sub_1B6632600(unsigned char *a1@<X8>)
{
  *a1 = *v1;
}

BOOL sub_1B663260C(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B663262C(uint64_t a1, id *a2)
{
  uint64_t result = sub_1B6E31778();
  *a2 = 0;
  return result;
}

uint64_t sub_1B66326A4(uint64_t a1, id *a2)
{
  char v3 = sub_1B6E31788();
  *a2 = 0;
  return v3 & 1;
}

uint64_t sub_1B6632724@<X0>(uint64_t *a1@<X8>)
{
  sub_1B6E31798();
  uint64_t v2 = sub_1B6E31768();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

uint64_t sub_1B6632768()
{
  return sub_1B6E33928();
}

void *sub_1B6632794@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = *result;
  *(unsigned char *)(a2 + 8) = 0;
  return result;
}

void sub_1B66327A4(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1B66327B0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B66327F8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6632840()
{
  return sub_1B6E31798();
}

uint64_t sub_1B6632850(uint64_t a1)
{
  uint64_t v2 = sub_1B6632C68((unint64_t *)&qword_1E9DCD6F0, type metadata accessor for MTLLibraryError);

  return MEMORY[0x1F40E44F0](a1, v2);
}

uint64_t sub_1B66328BC(uint64_t a1)
{
  uint64_t v2 = sub_1B6632C68((unint64_t *)&qword_1E9DCD6F0, type metadata accessor for MTLLibraryError);

  return MEMORY[0x1F40E44A8](a1, v2);
}

uint64_t sub_1B6632928(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6632C68((unint64_t *)&qword_1E9DCD6F0, type metadata accessor for MTLLibraryError);
  id v5 = a1;

  return MEMORY[0x1F40E4498](v5, a2, v4);
}

uint64_t sub_1B66329B8()
{
  id v1 = *v0;
  uint64_t v2 = sub_1B6E32378();

  return v2;
}

uint64_t sub_1B66329F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6632C68((unint64_t *)&qword_1E9DCD6F0, type metadata accessor for MTLLibraryError);

  return MEMORY[0x1F40E44D8](a1, a2, v4);
}

uint64_t sub_1B6632A6C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6632ACC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = 0;
    id v5 = (uint64_t *)(a1 + 32);
    do
    {
      uint64_t v7 = *v5++;
      uint64_t v6 = v7;
      if ((v7 & ~v4) == 0) {
        uint64_t v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    uint64_t v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

unsigned __int8 *sub_1B6632B24@<X0>(unsigned __int8 *result@<X0>, _WORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

void sub_1B6632B34(_DWORD *a1@<X8>)
{
  *a1 = *v1;
}

_DWORD *sub_1B6632B40@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  *(_DWORD *)a2 = *result;
  *(unsigned char *)(a2 + 4) = 0;
  return result;
}

BOOL sub_1B6632B50(void *a1, void *a2)
{
  return *a1 == *a2;
}

uint64_t sub_1B6632B64(uint64_t a1)
{
  uint64_t v2 = sub_1B6632C68(&qword_1E9DCD230, type metadata accessor for VFXTriggerType);
  uint64_t v3 = sub_1B6632C68(&qword_1E9DCD238, type metadata accessor for VFXTriggerType);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1B6632C20()
{
  return sub_1B6632C68(&qword_1E9DCD068, type metadata accessor for VFXTriggerType);
}

uint64_t sub_1B6632C68(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6632CB0()
{
  return sub_1B6632C68(&qword_1E9DCD070, type metadata accessor for VFXTriggerType);
}

uint64_t sub_1B6632CF8()
{
  return sub_1B6632C68(&qword_1E9DCD078, type metadata accessor for VFXTriggerType);
}

uint64_t sub_1B6632D40()
{
  return sub_1B6632C68(&qword_1E9DCD080, type metadata accessor for MTLDataType);
}

uint64_t sub_1B6632D88()
{
  return sub_1B6632C68(&qword_1E9DCD088, type metadata accessor for MTLPixelFormat);
}

uint64_t sub_1B6632DD0()
{
  return sub_1B6632C68(&qword_1E9DCD090, type metadata accessor for MTLTextureType);
}

uint64_t sub_1B6632E18()
{
  return sub_1B6632C68(&qword_1E9DCD098, type metadata accessor for MTLResourceOptions);
}

uint64_t sub_1B6632E60()
{
  return sub_1B6632C68(&qword_1E9DCD0A0, type metadata accessor for MTLResourceOptions);
}

uint64_t sub_1B6632EA8()
{
  return sub_1B6632C68(&qword_1E9DCD0A8, type metadata accessor for MTLResourceOptions);
}

uint64_t sub_1B6632EF0()
{
  return sub_1B6632C68(&qword_1E9DCD0B0, type metadata accessor for MTLResourceOptions);
}

uint64_t sub_1B6632F38()
{
  return sub_1B6632C68(&qword_1E9DCD0B8, type metadata accessor for MTLTextureUsage);
}

uint64_t sub_1B6632F80()
{
  return sub_1B6632C68(&qword_1E9DCD0C0, type metadata accessor for MTLTextureUsage);
}

uint64_t sub_1B6632FC8()
{
  return sub_1B6632C68(&qword_1E9DCD0C8, type metadata accessor for MTLTextureUsage);
}

uint64_t sub_1B6633010()
{
  return sub_1B6632C68(&qword_1E9DCD0D0, type metadata accessor for MTLTextureUsage);
}

uint64_t sub_1B6633058()
{
  return sub_1B6632C68(&qword_1E9DCD0D8, type metadata accessor for MTLWinding);
}

uint64_t sub_1B66330A0()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B66330BC()
{
  return sub_1B6632C68(&qword_1E9DCD0E0, type metadata accessor for MTLPrimitiveTopologyClass);
}

uint64_t sub_1B6633104()
{
  return sub_1B6632C68(&qword_1E9DCD0E8, type metadata accessor for MTLColorWriteMask);
}

uint64_t sub_1B663314C()
{
  return sub_1B6632C68(&qword_1E9DCD0F0, type metadata accessor for MTLColorWriteMask);
}

uint64_t sub_1B6633194()
{
  return sub_1B6632C68(&qword_1E9DCD0F8, type metadata accessor for MTLColorWriteMask);
}

uint64_t sub_1B66331DC()
{
  return sub_1B6632C68((unint64_t *)&unk_1E9DCD100, type metadata accessor for MTLColorWriteMask);
}

uint64_t sub_1B6633224()
{
  return sub_1B6E31168();
}

uint64_t sub_1B6633270()
{
  return sub_1B6E31158();
}

uint64_t sub_1B66332C8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6633330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1B6632C68((unint64_t *)&qword_1E9DCD6F0, type metadata accessor for MTLLibraryError);

  return MEMORY[0x1F40E44B8](a1, a2, a3, v6);
}

uint64_t sub_1B66333B4(uint64_t a1)
{
  uint64_t v2 = sub_1B6632C68(&qword_1E9DCD718, type metadata accessor for URLResourceKey);
  uint64_t v3 = sub_1B6632C68(&qword_1E9DCD720, type metadata accessor for URLResourceKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1B6633470(uint64_t a1)
{
  uint64_t v2 = sub_1B6632C68((unint64_t *)&qword_1E9DD0720, type metadata accessor for VFXWorldLoaderOption);
  uint64_t v3 = sub_1B6632C68(&qword_1E9DCD740, type metadata accessor for VFXWorldLoaderOption);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1B663352C(uint64_t a1)
{
  uint64_t v2 = sub_1B6632C68(&qword_1E9DCD748, type metadata accessor for VFXMeshSourceSemantic);
  uint64_t v3 = sub_1B6632C68(&qword_1E9DCD750, type metadata accessor for VFXMeshSourceSemantic);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1B66335E8(uint64_t a1)
{
  uint64_t v2 = sub_1B6632C68((unint64_t *)&qword_1E9DD6690, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v3 = sub_1B6632C68((unint64_t *)&unk_1E9DCD700, type metadata accessor for NSKeyValueChangeKey);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1B66336A4(uint64_t a1)
{
  uint64_t v2 = sub_1B6632C68(&qword_1E9DCD728, type metadata accessor for LoadingOption);
  uint64_t v3 = sub_1B6632C68((unint64_t *)&unk_1E9DCD730, type metadata accessor for LoadingOption);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1B6633760@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = sub_1B6E31768();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2;
  return result;
}

void type metadata accessor for RGResource(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for FairRecursiveLock(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 8)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for FairRecursiveLock(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)uint64_t result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = 0;
    }
  }
  return result;
}

void type metadata accessor for RGPass(uint64_t a1)
{
}

void type metadata accessor for RGExecutionPhase(uint64_t a1)
{
}

void type metadata accessor for CGColor(uint64_t a1)
{
}

void type metadata accessor for VFXLightProbeType(uint64_t a1)
{
}

void type metadata accessor for VFXColorMask(uint64_t a1)
{
}

void type metadata accessor for VFXShadingModel(uint64_t a1)
{
}

void type metadata accessor for NSKeyValueChangeKey(uint64_t a1)
{
}

__n128 initializeWithTake for RenderGraph.RenderTargetDesc(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

void type metadata accessor for particle_primitive_material_constants(uint64_t a1)
{
}

__n128 initializeWithCopy for ParticleBoxCollider.OBBFeature(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(__n128 *)(a1 + 80) = result;
  *(_OWORD *)(a1 + 96) = v6;
  return result;
}

uint64_t sub_1B6633924(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 144)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 136);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1B6633978(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 136) = 0;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 144) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 144) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 136) = a2 + 1;
    }
  }
  return result;
}

__n128 initializeWithCopy for _StructContextDescriptor(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)(a2 + 12);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for _StructContextDescriptor(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 28)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _StructContextDescriptor(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(_DWORD *)(result + 24) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 28) = v3;
  return result;
}

void type metadata accessor for particle_set_size_uniforms(uint64_t a1)
{
}

void type metadata accessor for Option(uint64_t a1)
{
}

uint64_t initializeBufferWithCopyOfBuffer for EntityManager.EntityEntry(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_DWORD *)(result + 8) = *((_DWORD *)a2 + 2);
  *(void *)__n128 result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for EntityManager.EntityEntry(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for EntityManager.EntityEntry(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 12) = v3;
  return result;
}

void type metadata accessor for particle_orientation_over_velocity_uniforms(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for PerspectiveCamera(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PerspectiveCamera(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 48) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for particle_set_color_uniforms(uint64_t a1)
{
}

__n128 sub_1B6633B98(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  long long v5 = *(_OWORD *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 128) = v7;
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 96) = v6;
  __n128 result = *(__n128 *)(a2 + 144);
  long long v9 = *(_OWORD *)(a2 + 160);
  long long v10 = *(_OWORD *)(a2 + 192);
  *(_OWORD *)(a1 + 176) = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 192) = v10;
  *(__n128 *)(a1 + 144) = result;
  *(_OWORD *)(a1 + 160) = v9;
  return result;
}

uint64_t sub_1B6633BD4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 208)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B6633BF4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 200) = 0;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 208) = v3;
  return result;
}

void type metadata accessor for pbr_material_constants(uint64_t a1)
{
}

void type metadata accessor for URLResourceKey(uint64_t a1)
{
}

__n128 initializeWithTake for ParticleFlockingSolverData.Grid(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

void type metadata accessor for pointcache_spawner_uniforms(uint64_t a1)
{
}

uint64_t sub_1B6633CB4(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 112)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B6633CD4(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 104) = 0;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 112) = v3;
  return result;
}

void type metadata accessor for emitter_pointcache_uniforms(uint64_t a1)
{
}

__n128 sub_1B6633D30(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  long long v5 = a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 80) = v6;
  __n128 result = (__n128)a2[8];
  long long v9 = a2[9];
  long long v10 = a2[11];
  *(_OWORD *)(a1 + 160) = a2[10];
  *(_OWORD *)(a1 + 176) = v10;
  *(__n128 *)(a1 + 128) = result;
  *(_OWORD *)(a1 + 144) = v9;
  return result;
}

void type metadata accessor for particle_wrap_around_camera_perspective_uniforms(uint64_t a1)
{
}

__n128 initializeWithTake for MeshPart(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[1];
  long long v4 = a2[3];
  *(_OWORD *)(a1 + 32) = a2[2];
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = v3;
  __n128 result = (__n128)a2[4];
  long long v6 = a2[5];
  long long v7 = a2[7];
  *(_OWORD *)(a1 + 96) = a2[6];
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 64) = result;
  *(_OWORD *)(a1 + 80) = v6;
  return result;
}

void type metadata accessor for particle_wrap_around_camera_orthographic_uniforms(uint64_t a1)
{
}

void type metadata accessor for LoadingOption(uint64_t a1)
{
}

void type metadata accessor for particle_set_angular_velocity_uniforms(uint64_t a1)
{
}

void type metadata accessor for particle_set_velocity_uniforms(uint64_t a1)
{
}

uint64_t sub_1B6633DEC(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 192)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B6633E0C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 192) = v3;
  return result;
}

void type metadata accessor for particle_plane_collider_uniforms(uint64_t a1)
{
}

uint64_t sub_1B6633E7C(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 64)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 52);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1B6633ED0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 64) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 64) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 52) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for particle_sphere_collider_uniforms(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for MeshBatch(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 64);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for MeshBatch(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 64) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for particle_aabb_collider_uniforms(uint64_t a1)
{
}

uint64_t sub_1B6633FF8(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 192)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 180);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1B663404C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 184) = 0;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 192) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 192) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 180) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for particle_obb_collider_uniforms(uint64_t a1)
{
}

__n128 sub_1B66340D4(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

void type metadata accessor for particle_cylinder_collider_uniforms(uint64_t a1)
{
}

uint64_t sub_1B663411C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 176)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B663413C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 176) = v3;
  return result;
}

void type metadata accessor for particle_sdf_collider_uniforms(uint64_t a1)
{
}

void type metadata accessor for particle_drag_uniforms(uint64_t a1)
{
}

void type metadata accessor for VFXWorldLoaderOption(uint64_t a1)
{
}

void type metadata accessor for VFXFilterMode(uint64_t a1)
{
}

void type metadata accessor for VFXWrapMode(uint64_t a1)
{
}

void type metadata accessor for CGColorSpace(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for _Metadata._Struct(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 24) = v3;
  return result;
}

void type metadata accessor for particle_set_pivot_uniforms(uint64_t a1)
{
}

void type metadata accessor for VFXForceFieldCullMode(uint64_t a1)
{
}

void type metadata accessor for VFXForceFieldScope(uint64_t a1)
{
}

void type metadata accessor for VFXForceFieldShape(uint64_t a1)
{
}

void type metadata accessor for VFXParametricModelType(uint64_t a1)
{
}

void type metadata accessor for VFXLightType(uint64_t a1)
{
}

void type metadata accessor for particle_integrate_uniforms(uint64_t a1)
{
}

void type metadata accessor for particle_force_uniforms(uint64_t a1)
{
}

void type metadata accessor for particle_set_life_uniforms(uint64_t a1)
{
}

void type metadata accessor for particle_textureframe_evolution_uniforms(uint64_t a1)
{
}

void type metadata accessor for VFXMeshSourceSemantic(uint64_t a1)
{
}

void type metadata accessor for VFXMeshPrimitiveType(uint64_t a1)
{
}

void type metadata accessor for particle_set_angle_uniforms(uint64_t a1)
{
}

void type metadata accessor for particle_set_angle_velocity_uniforms(uint64_t a1)
{
}

void type metadata accessor for vfx_vertex_attribute(uint64_t a1)
{
}

void type metadata accessor for particle_noise_uniforms(uint64_t a1)
{
}

void type metadata accessor for particle_set_texture_frame_uniforms(uint64_t a1)
{
}

void *sub_1B663438C(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x190uLL);
}

uint64_t sub_1B6634394(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 400)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 388);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1B66343E8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 392) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 400) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 400) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 388) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for emitter_shape_uniforms(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for PointCacheSpawner(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 12)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PointCacheSpawner(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(_DWORD *)(result + 8) = 0;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 12) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for particle_color_over_life_uniforms(uint64_t a1)
{
}

void *sub_1B6634554(void *a1, const void *a2)
{
  return memcpy(a1, a2, 0x480uLL);
}

uint64_t sub_1B663455C(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 1152)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t sub_1B663457C(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 1144) = 0;
    *(_OWORD *)(result + 248) = 0u;
    *(_OWORD *)(result + 232) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 1128) = 0u;
    *(_OWORD *)(result + 1112) = 0u;
    *(_OWORD *)(result + 1096) = 0u;
    *(_OWORD *)(result + 1080) = 0u;
    *(_OWORD *)(result + 1064) = 0u;
    *(_OWORD *)(result + 1048) = 0u;
    *(_OWORD *)(result + 1032) = 0u;
    *(_OWORD *)(result + 1016) = 0u;
    *(_OWORD *)(result + 1000) = 0u;
    *(_OWORD *)(result + 984) = 0u;
    *(_OWORD *)(result + 968) = 0u;
    *(_OWORD *)(result + 952) = 0u;
    *(_OWORD *)(result + 936) = 0u;
    *(_OWORD *)(result + 920) = 0u;
    *(_OWORD *)(result + 904) = 0u;
    *(_OWORD *)(result + 888) = 0u;
    *(_OWORD *)(result + 872) = 0u;
    *(_OWORD *)(result + 856) = 0u;
    *(_OWORD *)(result + 840) = 0u;
    *(_OWORD *)(result + 824) = 0u;
    *(_OWORD *)(result + 808) = 0u;
    *(_OWORD *)(result + 792) = 0u;
    *(_OWORD *)(result + 776) = 0u;
    *(_OWORD *)(result + 760) = 0u;
    *(_OWORD *)(result + 744) = 0u;
    *(_OWORD *)(result + 728) = 0u;
    *(_OWORD *)(result + 712) = 0u;
    *(_OWORD *)(result + 696) = 0u;
    *(_OWORD *)(result + 680) = 0u;
    *(_OWORD *)(result + 664) = 0u;
    *(_OWORD *)(result + 648) = 0u;
    *(_OWORD *)(result + 632) = 0u;
    *(_OWORD *)(result + 616) = 0u;
    *(_OWORD *)(result + 600) = 0u;
    *(_OWORD *)(result + 584) = 0u;
    *(_OWORD *)(result + 568) = 0u;
    *(_OWORD *)(result + 552) = 0u;
    *(_OWORD *)(result + 536) = 0u;
    *(_OWORD *)(result + 520) = 0u;
    *(_OWORD *)(result + 504) = 0u;
    *(_OWORD *)(result + 488) = 0u;
    *(_OWORD *)(result + 472) = 0u;
    *(_OWORD *)(result + 456) = 0u;
    *(_OWORD *)(result + 440) = 0u;
    *(_OWORD *)(result + 424) = 0u;
    *(_OWORD *)(result + 408) = 0u;
    *(_OWORD *)(result + 392) = 0u;
    *(_OWORD *)(result + 376) = 0u;
    *(_OWORD *)(result + 360) = 0u;
    *(_OWORD *)(result + 344) = 0u;
    *(_OWORD *)(result + 328) = 0u;
    *(_OWORD *)(result + 312) = 0u;
    *(_OWORD *)(result + 296) = 0u;
    *(_OWORD *)(result + 280) = 0u;
    *(_OWORD *)(result + 264) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 1152) = v3;
  return result;
}

void type metadata accessor for view_constants(uint64_t a1)
{
}

void type metadata accessor for MTLRenderStages(uint64_t a1)
{
}

__n128 initializeBufferWithCopyOfBuffer for RelationPair(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t storeEnumTagSinglePayload for ShaderCache.Stats(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)__n128 result = (a2 - 1);
    *(void *)(result + 8) = 0;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 16) = v3;
  return result;
}

void type metadata accessor for indirect_draw_arguments_uniforms(uint64_t a1)
{
}

void type metadata accessor for indirect_draw_mesh_arguments_uniforms(uint64_t a1)
{
}

uint64_t storeEnumTagSinglePayload for SkinnedMeshBinding(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 80) = v3;
  return result;
}

void type metadata accessor for particle_attach_uniforms(uint64_t a1)
{
}

void type metadata accessor for simd_double3x3(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for WorldFromScene(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for WorldFromScene(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 128) = v3;
  return result;
}

void type metadata accessor for simd_double4x4(uint64_t a1)
{
}

void type metadata accessor for pbr_lighting_parameters(uint64_t a1)
{
}

void type metadata accessor for MTLLibraryError(uint64_t a1)
{
}

void type metadata accessor for particle_set_float3_generic_uniforms(uint64_t a1)
{
}

void type metadata accessor for particle_set_orientation_uniforms(uint64_t a1)
{
}

void type metadata accessor for particle_set_mass_uniforms(uint64_t a1)
{
}

uint64_t sub_1B66348A8(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 65);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1B66348FC(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 65) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for emitter_killshape_uniforms(uint64_t a1)
{
}

void type metadata accessor for MTLBlendOperation(uint64_t a1)
{
}

void type metadata accessor for MTLBlendFactor(uint64_t a1)
{
}

void type metadata accessor for particle_size_over_life_uniforms(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for Float3x3Coder(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 48)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for Float3x3Coder(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 48) = v3;
  return result;
}

void type metadata accessor for MTLViewport(uint64_t a1)
{
}

uint64_t sub_1B6634A10(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 176)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 160);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1B6634A64(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 176) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 160) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for particle_force_field_uniforms(uint64_t a1)
{
}

uint64_t sub_1B6634AE8(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1B6634B3C(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for frame_constants(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for CommandQueue.IterationContext(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 40)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 24);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CommandQueue.IterationContext(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 40) = 0;
    }
    if (a2) {
      *(void *)(result + 24) = a2;
    }
  }
  return result;
}

void type metadata accessor for __vfx_sampler1d(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for ShaderCache.Stats(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t getEnumTagSinglePayload for _Metadata._Struct(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for CGImage(uint64_t a1)
{
}

void type metadata accessor for MTLTessellationFactorStepFunction(uint64_t a1)
{
}

void type metadata accessor for MTLTessellationControlPointIndexType(uint64_t a1)
{
}

void type metadata accessor for MTLTessellationPartitionMode(uint64_t a1)
{
}

uint64_t sub_1B6634CEC(uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *((unsigned char *)a1 + 24)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  uint64_t v3 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t sub_1B6634D48(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(void *)__n128 result = a2;
    }
  }
  return result;
}

void type metadata accessor for __darwin_pthread_handler_rec(uint64_t a1)
{
}

__n128 initializeWithTake for Renderer.Options(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t _s3VFX19TextureRenderTargetVwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 10);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t _s3VFX19TextureRenderTargetVwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 80) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 10) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for os_unfair_recursive_lock_s(uint64_t a1)
{
}

void type metadata accessor for CVBuffer(uint64_t a1)
{
}

void type metadata accessor for CMTimeFlags(uint64_t a1)
{
}

uint64_t getEnumTagSinglePayload for RenderVariantDescriptor(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 96)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for RenderVariantDescriptor(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 96) = v3;
  return result;
}

void type metadata accessor for vfx_frustum(uint64_t a1)
{
}

uint64_t sub_1B6634F2C(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 128)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t sub_1B6634F80(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 120) = 0;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 128) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 128) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = a2 + 1;
    }
  }
  return result;
}

void type metadata accessor for ForceFieldSettings(uint64_t a1)
{
}

__n128 sub_1B6634FF8(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  __n128 result = *(__n128 *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(__n128 *)(a1 + 16) = result;
  *(_OWORD *)(a1 + 32) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for SkinnedMeshBinding(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for ShaderStatistics(uint64_t a1)
{
}

void type metadata accessor for os_unfair_lock_s(uint64_t a1)
{
}

_DWORD *initializeBufferWithCopyOfBuffer for QueryHeader.Field(_DWORD *result, _DWORD *a2)
{
  *__n128 result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for QueryHeader.Field(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

void type metadata accessor for REVFXClippingIndexSlice(uint64_t a1)
{
}

uint64_t sub_1B663509C()
{
  return sub_1B6632C68(&qword_1E9DCD5A8, type metadata accessor for MTLTessellationPartitionMode);
}

uint64_t sub_1B66350E4()
{
  return sub_1B6632C68(&qword_1E9DCD5B0, type metadata accessor for MTLTessellationControlPointIndexType);
}

uint64_t sub_1B663512C()
{
  return sub_1B6632C68(&qword_1E9DCD5B8, type metadata accessor for MTLTessellationFactorStepFunction);
}

uint64_t sub_1B6635174()
{
  return sub_1B6632C68(&qword_1E9DCD5C0, type metadata accessor for MTLBlendFactor);
}

uint64_t sub_1B66351BC()
{
  return sub_1B6632C68(&qword_1E9DCD5C8, type metadata accessor for MTLBlendOperation);
}

uint64_t sub_1B6635204()
{
  return sub_1B6632C68(&qword_1E9DCD5D0, type metadata accessor for MTLLibraryError);
}

uint64_t sub_1B663524C()
{
  return sub_1B6632C68(&qword_1E9DCD5D8, type metadata accessor for MTLLibraryError);
}

uint64_t sub_1B6635294()
{
  return sub_1B6632C68(&qword_1E9DCD5E0, type metadata accessor for MTLRenderStages);
}

uint64_t sub_1B66352DC()
{
  return sub_1B6632C68(&qword_1E9DCD5E8, type metadata accessor for MTLRenderStages);
}

uint64_t sub_1B6635324()
{
  return sub_1B6632C68(&qword_1E9DCD5F0, type metadata accessor for MTLRenderStages);
}

uint64_t sub_1B663536C()
{
  return sub_1B6632C68(&qword_1E9DCD5F8, type metadata accessor for MTLRenderStages);
}

uint64_t sub_1B66353B4()
{
  return sub_1B6632C68(&qword_1E9DCD600, type metadata accessor for VFXMeshSourceSemantic);
}

uint64_t sub_1B66353FC()
{
  return sub_1B6632C68(&qword_1E9DCD608, type metadata accessor for VFXMeshSourceSemantic);
}

uint64_t sub_1B6635444(uint64_t a1)
{
  uint64_t v2 = sub_1B6632C68((unint64_t *)&qword_1E9DD0EC0, type metadata accessor for Option);
  uint64_t v3 = sub_1B6632C68(&qword_1E9DCD710, type metadata accessor for Option);
  uint64_t v4 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4185450](a1, v2, v3, v4);
}

uint64_t sub_1B6635500(uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t))
{
  uint64_t v4 = sub_1B6E31798();
  uint64_t v5 = a3(v4);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1B6635544()
{
  sub_1B6E31798();
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6635598()
{
  sub_1B6E31798();
  sub_1B6E33918();
  sub_1B6E318B8();
  uint64_t v0 = sub_1B6E33988();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B663560C()
{
  uint64_t v0 = sub_1B6E31798();
  uint64_t v2 = v1;
  if (v0 == sub_1B6E31798() && v2 == v3) {
    char v5 = 1;
  }
  else {
    char v5 = sub_1B6E334B8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v5 & 1;
}

uint64_t sub_1B6635698()
{
  return sub_1B6632C68((unint64_t *)&unk_1E9DCD610, type metadata accessor for VFXMeshSourceSemantic);
}

uint64_t sub_1B66356E0()
{
  return sub_1B6632C68((unint64_t *)&unk_1EB97D828, type metadata accessor for CGColorSpace);
}

uint64_t sub_1B6635728()
{
  return sub_1B6632C68(&qword_1E9DCD620, type metadata accessor for VFXWorldLoaderOption);
}

uint64_t sub_1B6635770()
{
  return sub_1B6632C68(&qword_1E9DCD628, type metadata accessor for VFXWorldLoaderOption);
}

uint64_t sub_1B66357B8()
{
  return sub_1B6632C68(&qword_1E9DCD630, type metadata accessor for LoadingOption);
}

uint64_t sub_1B6635800()
{
  return sub_1B6632C68(&qword_1E9DCD638, type metadata accessor for LoadingOption);
}

uint64_t sub_1B6635848()
{
  return sub_1B6632C68(&qword_1E9DCD640, type metadata accessor for URLResourceKey);
}

uint64_t sub_1B6635890()
{
  return sub_1B6632C68(&qword_1E9DCD648, type metadata accessor for URLResourceKey);
}

uint64_t sub_1B66358D8()
{
  return sub_1B6632C68(&qword_1E9DCD650, type metadata accessor for Option);
}

uint64_t sub_1B6635920()
{
  return sub_1B6632C68(&qword_1E9DCD658, type metadata accessor for Option);
}

uint64_t sub_1B6635968()
{
  return sub_1B6632C68(&qword_1E9DCD660, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_1B66359B0()
{
  return sub_1B6632C68(&qword_1E9DCD668, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_1B66359F8()
{
  return sub_1B6632C68((unint64_t *)&unk_1E9DCD670, type metadata accessor for NSKeyValueChangeKey);
}

uint64_t sub_1B6635A40()
{
  return sub_1B6632C68(&qword_1EB985228, type metadata accessor for Option);
}

uint64_t sub_1B6635A88()
{
  return sub_1B6632C68(&qword_1E9DCD680, type metadata accessor for URLResourceKey);
}

uint64_t sub_1B6635AD0()
{
  return sub_1B6632C68(&qword_1E9DCD688, type metadata accessor for LoadingOption);
}

uint64_t sub_1B6635B18()
{
  return sub_1B6632C68(&qword_1E9DCD690, type metadata accessor for VFXWorldLoaderOption);
}

uint64_t sub_1B6635B60()
{
  return sub_1B6632C68(&qword_1E9DCD698, type metadata accessor for VFXFilterMode);
}

uint64_t sub_1B6635BA8()
{
  return sub_1B6632C68((unint64_t *)&unk_1E9DCD6A0, type metadata accessor for VFXWrapMode);
}

uint64_t sub_1B6635BF0()
{
  return sub_1B6632C68(&qword_1EB980598, type metadata accessor for CGColorSpace);
}

uint64_t sub_1B6635C38()
{
  return sub_1B6632C68(&qword_1E9DCD6B0, type metadata accessor for vfx_vertex_attribute);
}

uint64_t sub_1B6635C80()
{
  return sub_1B6632C68(&qword_1E9DCD6B8, type metadata accessor for MTLLibraryError);
}

uint64_t sub_1B6635CC8()
{
  return sub_1B6632C68(&qword_1E9DCD6C0, type metadata accessor for MTLLibraryError);
}

uint64_t sub_1B6635D10()
{
  return sub_1B6632C68(&qword_1E9DCD6C8, type metadata accessor for MTLLibraryError);
}

uint64_t sub_1B6635D58()
{
  return sub_1B6632C68(&qword_1E9DCD6D0, type metadata accessor for Code);
}

void type metadata accessor for Code(uint64_t a1)
{
}

uint64_t sub_1B6635DB4()
{
  return sub_1B6632C68(&qword_1E9DCD6D8, type metadata accessor for Code);
}

unint64_t sub_1B6635E00()
{
  unint64_t result = qword_1E9DCD6E0;
  if (!qword_1E9DCD6E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCD6E0);
  }
  return result;
}

uint64_t sub_1B6635E54()
{
  return sub_1B6632C68(&qword_1E9DCD6E8, type metadata accessor for Code);
}

uint64_t sub_1B6635E9C()
{
  return sub_1B6632C68((unint64_t *)&qword_1E9DCD6F0, type metadata accessor for MTLLibraryError);
}

void type metadata accessor for particle_ribbon_material_constants(uint64_t a1)
{
}

void type metadata accessor for particle_line_material_constants(uint64_t a1)
{
}

void type metadata accessor for particle_box_material_constants(uint64_t a1)
{
}

void type metadata accessor for particle_point_material_constants(uint64_t a1)
{
}

void type metadata accessor for particle_decal_material_constants(uint64_t a1)
{
}

__n128 sub_1B6635F48(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v2 = *(_OWORD *)(a2 + 16);
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v4;
  *(_OWORD *)(a1 + 16) = v2;
  *(_OWORD *)(a1 + 32) = v3;
  __n128 result = *(__n128 *)(a2 + 80);
  long long v6 = *(_OWORD *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 112) = v7;
  *(__n128 *)(a1 + 80) = result;
  return result;
}

uint64_t sub_1B6635F7C(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 136)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t sub_1B6635FC0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(void *)__n128 result = a2 - 2;
    if (a3 >= 2) {
      *(unsigned char *)(result + 136) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 136) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0;
    }
  }
  return result;
}

void type metadata accessor for RGPassAndOutputs(uint64_t a1)
{
}

void type metadata accessor for PBR1(uint64_t a1)
{
}

void type metadata accessor for PBR4(uint64_t a1)
{
}

void type metadata accessor for vfx_scale_bias(uint64_t a1)
{
}

void type metadata accessor for vfx_float_range(uint64_t a1)
{
}

void type metadata accessor for composition_t(uint64_t a1)
{
}

void type metadata accessor for argument_buffer_index(uint64_t a1)
{
}

void type metadata accessor for MTLSize(uint64_t a1)
{
}

void type metadata accessor for MTLStencilOperation(uint64_t a1)
{
}

void type metadata accessor for MTLBindingType(uint64_t a1)
{
}

void type metadata accessor for MTLTextureCompressionType(uint64_t a1)
{
}

void type metadata accessor for vfx_plane(uint64_t a1)
{
}

uint64_t sub_1B6636110()
{
  return sub_1B6632C68(&qword_1E9DCD7E8, type metadata accessor for MTLStencilOperation);
}

uint64_t sub_1B6636220()
{
  return swift_initClassMetadata2();
}

uint64_t sub_1B6636274()
{
  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for EventGuard()
{
  return sub_1B62C36EC();
}

unint64_t VFXSceneLightType.init(rawValue:)(unint64_t a1)
{
  return sub_1B663AAF8(a1);
}

unint64_t sub_1B66362E4@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1B663AAF8(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B6636318()
{
  return *(void *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type);
}

uint64_t sub_1B6636328(uint64_t result)
{
  *(void *)(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type) = result;
  return result;
}

uint64_t (*sub_1B6636338())(void)
{
  return nullsub_1;
}

float sub_1B6636360()
{
  return *(float *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity);
}

void sub_1B6636370(float a1)
{
  *(float *)(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity) = a1;
}

uint64_t (*sub_1B6636380())(void)
{
  return nullsub_1;
}

uint64_t sub_1B66363A8()
{
  return *(void *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color);
}

uint64_t sub_1B66363C0(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4 = v3 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color;
  *(void *)uint64_t v4 = result;
  *(void *)(v4 + 8) = a2;
  *(unsigned char *)(v4 + 16) = a3 & 1;
  return result;
}

uint64_t (*sub_1B66363DC())(void)
{
  return nullsub_1;
}

uint64_t sub_1B6636404()
{
  return *(void *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation);
}

uint64_t sub_1B663641C(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4 = v3 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation;
  *(void *)uint64_t v4 = result;
  *(void *)(v4 + 8) = a2;
  *(unsigned char *)(v4 + 16) = a3 & 1;
  return result;
}

uint64_t (*sub_1B6636438())(void)
{
  return nullsub_1;
}

uint64_t sub_1B6636460()
{
  return *(void *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position);
}

uint64_t sub_1B6636478(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4 = v3 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position;
  *(void *)uint64_t v4 = result;
  *(void *)(v4 + 8) = a2;
  *(unsigned char *)(v4 + 16) = a3 & 1;
  return result;
}

uint64_t (*sub_1B6636494())(void)
{
  return nullsub_1;
}

unint64_t sub_1B66364BC()
{
  return sub_1B6636658(&OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius);
}

uint64_t sub_1B66364C8(uint64_t result)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius;
  *(_DWORD *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*sub_1B66364E4())(void)
{
  return nullsub_1;
}

unint64_t sub_1B663650C()
{
  return sub_1B6636658(&OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear);
}

uint64_t sub_1B6636518(uint64_t result)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear;
  *(_DWORD *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*sub_1B6636534())(void)
{
  return nullsub_1;
}

unint64_t sub_1B663655C()
{
  return sub_1B6636658(&OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar);
}

uint64_t sub_1B6636568(uint64_t result)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar;
  *(_DWORD *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*sub_1B6636584())(void)
{
  return nullsub_1;
}

unint64_t sub_1B66365AC()
{
  return sub_1B6636658(&OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale);
}

uint64_t sub_1B66365B8(uint64_t result)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale;
  *(_DWORD *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*sub_1B66365D4())(void)
{
  return nullsub_1;
}

unint64_t sub_1B66365FC()
{
  return sub_1B6636658(&OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle);
}

uint64_t sub_1B6636608(uint64_t result)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle;
  *(_DWORD *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*sub_1B6636624())(void)
{
  return nullsub_1;
}

unint64_t sub_1B663664C()
{
  return sub_1B6636658(&OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle);
}

unint64_t sub_1B6636658(void *a1)
{
  return *(unsigned int *)(v1 + *a1) | ((unint64_t)*(unsigned __int8 *)(v1 + *a1 + 4) << 32);
}

uint64_t sub_1B6636680(uint64_t result)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle;
  *(_DWORD *)uint64_t v2 = result;
  *(unsigned char *)(v2 + 4) = BYTE4(result) & 1;
  return result;
}

uint64_t (*sub_1B663669C())(void)
{
  return nullsub_1;
}

uint64_t sub_1B66366C4()
{
  return *(void *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents);
}

uint64_t sub_1B66366DC(uint64_t result, char a2)
{
  uint64_t v3 = v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents;
  *(void *)uint64_t v3 = result;
  *(unsigned char *)(v3 + 8) = a2 & 1;
  return result;
}

uint64_t (*sub_1B66366F8())(void)
{
  return nullsub_1;
}

uint64_t sub_1B6636720()
{
  return *(unsigned __int8 *)(v0 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided);
}

uint64_t sub_1B6636730(uint64_t result)
{
  *(unsigned char *)(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided) = result;
  return result;
}

uint64_t (*sub_1B6636740())(void)
{
  return nullsub_1;
}

uint64_t sub_1B6636768(uint64_t a1, void *a2)
{
  sub_1B638BEC8(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  long long v7 = (char *)&v9 - v6;
  sub_1B663AB08(a1, (uint64_t)&v9 - v6);
  return sub_1B63BE06C((uint64_t)v7, *a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url);
}

uint64_t sub_1B663682C@<X0>(uint64_t a1@<X8>)
{
  return sub_1B663AB08(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url, a1);
}

uint64_t sub_1B6636840(uint64_t a1)
{
  return sub_1B63BE06C(a1, v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url);
}

uint64_t (*sub_1B6636850())(void)
{
  return nullsub_1;
}

uint64_t sub_1B6636878()
{
  return swift_unknownObjectRetain();
}

uint64_t sub_1B6636888(uint64_t a1)
{
  *(void *)(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture) = a1;
  return swift_unknownObjectRelease();
}

uint64_t (*sub_1B66368A0())(void)
{
  return nullsub_1;
}

id VFXSceneLightParameters.__allocating_init(type:)(uint64_t a1)
{
  id v3 = objc_allocWithZone(v1);
  return VFXSceneLightParameters.init(type:)(a1);
}

id VFXSceneLightParameters.init(type:)(uint64_t a1)
{
  *(_DWORD *)&v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity] = 1065353216;
  id v3 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color];
  *(void *)id v3 = 0;
  *((void *)v3 + 1) = 0;
  v3[16] = 1;
  uint64_t v4 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation];
  *(void *)uint64_t v4 = 0;
  *((void *)v4 + 1) = 0;
  v4[16] = 1;
  uint64_t v5 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position];
  *(void *)uint64_t v5 = 0;
  *((void *)v5 + 1) = 0;
  v5[16] = 1;
  uint64_t v6 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius];
  *(_DWORD *)uint64_t v6 = 0;
  v6[4] = 1;
  long long v7 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear];
  *(_DWORD *)long long v7 = 0;
  v7[4] = 1;
  long long v8 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar];
  *(_DWORD *)long long v8 = 0;
  v8[4] = 1;
  uint64_t v9 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale];
  *(_DWORD *)uint64_t v9 = 0;
  v9[4] = 1;
  long long v10 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle];
  *(_DWORD *)long long v10 = 0;
  _OWORD v10[4] = 1;
  int v11 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle];
  *(_DWORD *)int v11 = 0;
  _OWORD v11[4] = 1;
  uint64_t v12 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents];
  *(void *)uint64_t v12 = 0;
  v12[8] = 1;
  v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided] = 2;
  uint64_t v13 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url];
  uint64_t v14 = sub_1B6E30F48();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56))(v13, 1, 1, v14);
  *(void *)&v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture] = 0;
  uint64_t v15 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_ibl];
  *(void *)uint64_t v15 = 0;
  v15[8] = 1;
  uint64_t v16 = &v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_textureTag];
  *uint64_t v16 = 0;
  v16[1] = 0;
  *(void *)&v1[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type] = a1;
  v18.receiver = v1;
  v18.super_class = (Class)type metadata accessor for VFXSceneLightParameters();
  return objc_msgSendSuper2(&v18, sel_init);
}

id VFXSceneLightParameters.__allocating_init(type:intensity:color:)(uint64_t a1, float a2, __n128 a3)
{
  id v6 = objc_allocWithZone(v3);
  return VFXSceneLightParameters.init(type:intensity:color:)(a1, a2, a3);
}

id VFXSceneLightParameters.init(type:intensity:color:)(uint64_t a1, float a2, __n128 a3)
{
  uint64_t v6 = OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity;
  long long v7 = (__n128 *)&v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color];
  long long v8 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation];
  *(void *)long long v8 = 0;
  *((void *)v8 + 1) = 0;
  v8[16] = 1;
  uint64_t v9 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position];
  *(void *)uint64_t v9 = 0;
  *((void *)v9 + 1) = 0;
  v9[16] = 1;
  long long v10 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius];
  *(_DWORD *)long long v10 = 0;
  _OWORD v10[4] = 1;
  int v11 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear];
  *(_DWORD *)int v11 = 0;
  _OWORD v11[4] = 1;
  uint64_t v12 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar];
  *(_DWORD *)uint64_t v12 = 0;
  _OWORD v12[4] = 1;
  uint64_t v13 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale];
  *(_DWORD *)uint64_t v13 = 0;
  void v13[4] = 1;
  uint64_t v14 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle];
  *(_DWORD *)uint64_t v14 = 0;
  v14[4] = 1;
  uint64_t v15 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle];
  *(_DWORD *)uint64_t v15 = 0;
  v15[4] = 1;
  uint64_t v16 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents];
  *(void *)uint64_t v16 = 0;
  v16[8] = 1;
  v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided] = 2;
  uint64_t v17 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url];
  uint64_t v18 = sub_1B6E30F48();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56))(v17, 1, 1, v18);
  *(void *)&v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture] = 0;
  float v19 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_ibl];
  *(void *)float v19 = 0;
  v19[8] = 1;
  char v20 = &v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_textureTag];
  *char v20 = 0;
  v20[1] = 0;
  *(void *)&v3[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type] = a1;
  *(float *)&v3[v6] = a2;
  *long long v7 = a3;
  v7[1].n128_u8[0] = 0;
  v23.receiver = v3;
  v23.super_class = (Class)type metadata accessor for VFXSceneLightParameters();
  return objc_msgSendSuper2(&v23, sel_init);
}

void sub_1B6636D48(__n128 a1)
{
  uint64_t v2 = (__n128 *)(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation);
  *uint64_t v2 = a1;
  v2[1].n128_u8[0] = 0;
}

void sub_1B6636D78(__n128 a1)
{
  uint64_t v2 = (__n128 *)(v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position);
  *uint64_t v2 = a1;
  v2[1].n128_u8[0] = 0;
}

void sub_1B6636DA8(float a1)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius;
  *(float *)uint64_t v2 = a1;
  *(unsigned char *)(v2 + 4) = 0;
}

void sub_1B6636DD8(float a1, float a2, float a3)
{
  uint64_t v4 = v3 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale;
  *(float *)uint64_t v4 = a1;
  *(unsigned char *)(v4 + 4) = 0;
  uint64_t v5 = v3 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear;
  *(float *)uint64_t v5 = a2;
  *(unsigned char *)(v5 + 4) = 0;
  uint64_t v6 = v3 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar;
  *(float *)uint64_t v6 = a3;
  *(unsigned char *)(v6 + 4) = 0;
}

void sub_1B6636E58(float a1, float a2, float a3, float a4)
{
  uint64_t v5 = v4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle;
  *(float *)uint64_t v5 = a1;
  *(unsigned char *)(v5 + 4) = 0;
  uint64_t v6 = v4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle;
  *(float *)uint64_t v6 = a2;
  *(unsigned char *)(v6 + 4) = 0;
  uint64_t v7 = v4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear;
  *(float *)uint64_t v7 = a3;
  *(unsigned char *)(v7 + 4) = 0;
  uint64_t v8 = v4 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar;
  *(float *)uint64_t v8 = a4;
  *(unsigned char *)(v8 + 4) = 0;
}

void sub_1B6636F00(float a1, float a2)
{
  uint64_t v3 = v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear;
  *(float *)uint64_t v3 = a1;
  *(unsigned char *)(v3 + 4) = 0;
  uint64_t v4 = v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar;
  *(float *)uint64_t v4 = a2;
  *(unsigned char *)(v4 + 4) = 0;
}

uint64_t sub_1B6636F58(uint64_t result, double a2)
{
  uint64_t v3 = v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents;
  *(double *)uint64_t v3 = a2;
  *(unsigned char *)(v3 + 8) = 0;
  *(unsigned char *)(v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided) = result;
  return result;
}

uint64_t sub_1B6636FA0(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url;
  sub_1B663ABE8(v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url);
  sub_1B663AB08(a1, v5);
  *(void *)(v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture) = a2;
  swift_unknownObjectRetain();

  return swift_unknownObjectRelease();
}

uint64_t sub_1B6637194(uint64_t result)
{
  uint64_t v2 = 0xFFFFFFFFLL;
  if (result) {
    uint64_t v2 = result;
  }
  uint64_t v3 = v1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_ibl;
  *(void *)uint64_t v3 = v2;
  *(unsigned char *)(v3 + 8) = 0;
  return result;
}

uint64_t sub_1B66371E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(v2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_textureTag);
  *uint64_t v3 = a1;
  v3[1] = a2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

id VFXSceneLightParameters.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

void VFXSceneLightParameters.init()()
{
}

id VFXSceneLightParameters.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXSceneLightParameters();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

uint64_t VFXScene.addLight(type:)(unint64_t a1)
{
  uint64_t v3 = *(void *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  uint64_t v4 = v1;
  sub_1B69E26CC(v3, a1, v4);
  uint64_t v6 = v5;

  return v6;
}

unint64_t sub_1B6637420@<X0>(unint64_t result@<X0>, unint64_t *a2@<X8>)
{
  unint64_t v3 = 0;
  switch(result)
  {
    case 0uLL:
      unint64_t result = sub_1B6638E50(0, 1, (float32x4_t)xmmword_1B6E768F0);
      goto LABEL_7;
    case 1uLL:
      unint64_t result = sub_1B6639408(0, 1, (float32x4_t)xmmword_1B6E768F0);
      goto LABEL_7;
    case 2uLL:
      unint64_t result = sub_1B66399C8(0, 1, (float32x4_t)xmmword_1B6E768F0);
      goto LABEL_7;
    case 3uLL:
      unint64_t result = sub_1B6639F80(0, 1, (float32x4_t)xmmword_1B6E768F0);
      goto LABEL_7;
    case 4uLL:
      unint64_t result = sub_1B663A540(0, 1, (float32x4_t)xmmword_1B6E768F0);
LABEL_7:
      if (result == 0xFFFFFFFF) {
        unint64_t v3 = 0;
      }
      else {
        unint64_t v3 = result;
      }
      break;
    case 5uLL:
      break;
    default:
      sub_1B6E337C8();
      __break(1u);
      JUMPOUT(0x1B6637578);
  }
  *a2 = v3;
  return result;
}

Swift::Void __swiftcall VFXScene.removeLight(id:)(Swift::Int64 id)
{
  sub_1B69D6180(*(void *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], id, v1);
}

uint64_t sub_1B6637650(uint64_t a1)
{
  if (!a1) {
    a1 = 0xFFFFFFFFLL;
  }
  return sub_1B69DE144(a1);
}

uint64_t sub_1B6637708(uint64_t a1)
{
  if (sub_1B62EC0CC((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1F0F6BC38, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1F0F6BBC0, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for PointLight, (uint64_t)&off_1F0F536F0, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1F0F53678, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1F0F58F60, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1F0F58EE8, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1F0FA9D60, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1F0FA9CE8, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1F0F616D8, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1F0F616A8, a1, 0);
  }

  return sub_1B62E364C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1F0F616A8, a1);
}

uint64_t sub_1B6637864(uint64_t a1)
{
  if (sub_1B62EC0CC((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1F0F6BC38, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1F0F6BBC0, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for PointLight, (uint64_t)&off_1F0F536F0, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1F0F53678, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1F0F58F60, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1F0F58EE8, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1F0FA9D60, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1F0FA9CE8, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1F0F616D8, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1F0F616A8, a1, 0);
  }

  return sub_1B62E364C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1F0FA9CE8, a1);
}

uint64_t sub_1B66379C0(uint64_t a1)
{
  if (sub_1B62EC0CC((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1F0F6BC38, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1F0F6BBC0, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for PointLight, (uint64_t)&off_1F0F536F0, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1F0F53678, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1F0F58F60, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1F0F58EE8, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1F0FA9D60, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1F0FA9CE8, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1F0F616D8, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1F0F616A8, a1, 0);
  }

  return sub_1B62E364C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1F0F58EE8, a1);
}

uint64_t sub_1B6637B1C(uint64_t a1)
{
  if (sub_1B62EC0CC((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1F0F6BC38, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1F0F6BBC0, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for PointLight, (uint64_t)&off_1F0F536F0, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1F0F53678, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1F0F58F60, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1F0F58EE8, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1F0FA9D60, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1F0FA9CE8, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1F0F616D8, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1F0F616A8, a1, 0);
  }

  return sub_1B62E364C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1F0F53678, a1);
}

uint64_t sub_1B6637C78(uint64_t a1)
{
  if (sub_1B62EC0CC((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1F0F6BC38, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1F0F6BBC0, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for PointLight, (uint64_t)&off_1F0F536F0, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for PointLight, (uint64_t)&off_1F0F53678, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1F0F58F60, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1F0F58EE8, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1F0FA9D60, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1F0FA9CE8, a1, 0);
  }
  if (sub_1B62EC0CC((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1F0F616D8, a1)) {
    sub_1B62E280C((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1F0F616A8, a1, 0);
  }

  return sub_1B62E364C((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1F0F6BBC0, a1);
}

void VFXScene.setLightParameters(on:parameters:)(unint64_t a1, void *a2)
{
  sub_1B69D6318(*(void *)&v2[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], a1, a2, v2);
}

void sub_1B6637E38(unint64_t a1, char *a2, uint64_t a3)
{
  if (a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = 0xFFFFFFFFLL;
  }
  switch(*(void *)&a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type])
  {
    case 0:
      uint64_t v6 = *(void *)(a3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      if (!sub_1B62EC0CC((uint64_t)&type metadata for DirectionalLight, (uint64_t)&off_1F0F6BC38, a1 & 0xFFFFFFFF00000000 | v4))sub_1B6637C78(a1 & 0xFFFFFFFF00000000 | v4); {
      sub_1B6BFDCA0(a1 & 0xFFFFFFFF00000000 | v4, v6, a2);
      }
      break;
    case 1:
      uint64_t v6 = *(void *)(a3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      if (!sub_1B62EC0CC((uint64_t)&type metadata for PointLight, (uint64_t)&off_1F0F536F0, a1 & 0xFFFFFFFF00000000 | v4))sub_1B6637B1C(a1 & 0xFFFFFFFF00000000 | v4); {
      sub_1B6BFDDC0(a1 & 0xFFFFFFFF00000000 | v4, v6, a2);
      }
      break;
    case 2:
      uint64_t v6 = *(void *)(a3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      if (!sub_1B62EC0CC((uint64_t)&type metadata for AmbientLight, (uint64_t)&off_1F0F58F60, a1 & 0xFFFFFFFF00000000 | v4))sub_1B66379C0(a1 & 0xFFFFFFFF00000000 | v4); {
      sub_1B6BFDE08(a1 & 0xFFFFFFFF00000000 | v4, v6, a2);
      }
      break;
    case 3:
      uint64_t v6 = *(void *)(a3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      if (!sub_1B62EC0CC((uint64_t)&type metadata for SpotLight, (uint64_t)&off_1F0FA9D60, a1 & 0xFFFFFFFF00000000 | v4))sub_1B6637864(a1 & 0xFFFFFFFF00000000 | v4); {
      sub_1B6BFE080(a1 & 0xFFFFFFFF00000000 | v4, v6, a2);
      }
      break;
    case 4:
      uint64_t v6 = *(void *)(a3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      if (!sub_1B62EC0CC((uint64_t)&type metadata for RectAreaLight, (uint64_t)&off_1F0F616D8, a1 & 0xFFFFFFFF00000000 | v4))sub_1B6637708(a1 & 0xFFFFFFFF00000000 | v4); {
      sub_1B6BFE180(a1 & 0xFFFFFFFF00000000 | v4, v6, a2);
      }
      break;
    case 5:
      uint64_t v6 = *(void *)(a3 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
      sub_1B6BFE388(a1 & 0xFFFFFFFF00000000 | v4, v6, a2);
      break;
    default:
      sub_1B6E337C8();
      __break(1u);
      JUMPOUT(0x1B6638300);
  }

  if ((a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color + 16] & 1) == 0) {
    sub_1B6BF0434(a1 & 0xFFFFFFFF00000000 | v4, v6, *(__n128 *)&a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color]);
  }
  if ((a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation + 16] & 1) == 0)
  {
    uint64_t v7 = (uint64_t *)&a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position];
    if ((a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position + 16] & 1) == 0)
    {
      unint64_t v8 = HIDWORD(a1);
      float32x2_t v9 = *(float32x2_t *)&a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation];
      *(float32x2_t *)v10.f32 = v9;
      v10.i64[1] = *(void *)&a2[OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation + 8];
      v17.columns[3].i64[0] = *v7;
      v17.columns[3].i64[1] = v7[1];
      v17.columns[3].i32[3] = 1.0;
      float32x4_t v11 = vmulq_f32(v10, v10);
      float32x4_t v12 = vmulq_laneq_f32(v10, v10, 3);
      v17.columns[0].f32[0] = vmuls_lane_f32(v9.f32[0], v9, 1);
      float32_t v13 = v17.columns[0].f32[0] - v12.f32[2];
      v11.f32[0] = 0.5 - v11.f32[0];
      float32x2_t v14 = vmul_n_f32(v9, v10.f32[2]);
      v15.i32[3] = 0;
      v16.i32[3] = 0;
      v16.f32[0] = (float)(0.5 - v11.f32[1]) - v11.f32[2];
      v16.f32[1] = v17.columns[0].f32[0] + v12.f32[2];
      v16.f32[2] = v14.f32[0] - v12.f32[1];
      v17.columns[0] = (simd_float4)vaddq_f32(v16, v16);
      v15.f32[0] = v13;
      v15.f32[1] = v11.f32[0] - v11.f32[2];
      v15.f32[2] = v14.f32[1] + v12.f32[0];
      v17.columns[1] = (simd_float4)vaddq_f32(v15, v15);
      *(int32x2_t *)v12.f32 = vrev64_s32(*(int32x2_t *)v12.f32);
      v17.columns[2].i32[0] = vadd_f32(v14, *(float32x2_t *)v12.f32).u32[0];
      v17.columns[2].i32[1] = vsub_f32(v14, *(float32x2_t *)&v12).i32[1];
      v17.columns[2].i64[1] = COERCE_UNSIGNED_INT(v11.f32[0] - v11.f32[1]);
      v17.columns[2] = (simd_float4)vaddq_f32((float32x4_t)v17.columns[2], (float32x4_t)v17.columns[2]);
      BOOL v18 = v4 == -1 && v8 == 0;
      int v19 = v18;
      if (!v18)
      {
        simd_float4 v26 = v17.columns[0];
        simd_float4 v27 = v17.columns[3];
        simd_float4 v24 = v17.columns[2];
        simd_float4 v25 = v17.columns[1];
        uint64_t v20 = swift_retain();
        MEMORY[0x1F4188790](v20, v21);
        sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C0DC);
        swift_release();
        v17.columns[2] = v24;
        v17.columns[1] = v25;
        v17.columns[0] = v26;
        v17.columns[3] = v27;
      }
      __invert_f4(v17);
      if (!v19)
      {
        uint64_t v22 = swift_retain();
        MEMORY[0x1F4188790](v22, v23);
        sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C0FC);
        swift_release();
      }
    }
  }
}

float sub_1B6638318(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned char *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius + 4) & 1) == 0
    && (*(unsigned char *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle + 4) & 1) == 0
    && (*(unsigned char *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle + 4) & 1) == 0
    && (*(unsigned char *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear + 4) & 1) == 0
    && (*(unsigned char *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar + 4) & 1) == 0)
  {
    float result = *(float *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius);
    int v3 = *(_DWORD *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle);
    int v4 = *(_DWORD *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle);
    int v5 = *(_DWORD *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar);
    int v6 = *(_DWORD *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear);
    *(_DWORD *)a1 = *(_DWORD *)(a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity);
    *(float *)(a1 + 4) = result;
    *(_DWORD *)(a1 + 8) = v4;
    *(_DWORD *)(a1 + 12) = v3;
    *(_DWORD *)(a1 + 16) = v6;
    *(_DWORD *)(a1 + 20) = v5;
  }
  return result;
}

void VFXScene.setShadowParameters(on:castsShadows:tiles:count:depthBias:)(uint64_t a1, char a2, uint64_t a3, uint64_t a4, float a5)
{
  sub_1B69D653C(*(void *)&v5[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], a1, v5, a2, a4, a3, a5);
}

uint64_t sub_1B66384C8(uint64_t a1, uint64_t a2, char a3, uint64_t a4, float a5)
{
  unint64_t v5 = a1 & 0xFFFFFFFF00000000;
  uint64_t v6 = a1;
  if (!a1) {
    uint64_t v6 = 0xFFFFFFFFLL;
  }
  uint64_t v7 = *(void *)(a2 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  uint64_t v8 = v6 | v5;
  if ((a3 & 1) == 0) {
    return sub_1B62E280C((uint64_t)&type metadata for Shadow, (uint64_t)&off_1F0FA18B0, v6 | v5, 0);
  }
  sub_1B62E364C((uint64_t)&type metadata for Shadow, (uint64_t)&off_1F0FA18B0, v6 | v5);
  return sub_1B6BF0554(v8, v7, a4, a5);
}

uint64_t sub_1B6638590(uint64_t a1, uint64_t a2, float a3)
{
  uint64_t v6 = *(char **)(a1 + 8);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || a2 > *((void *)v6 + 3) >> 1)
  {
    if (*((void *)v6 + 2) <= a2) {
      uint64_t v8 = a2;
    }
    else {
      uint64_t v8 = *((void *)v6 + 2);
    }
    uint64_t v6 = sub_1B629CE28(isUniquelyReferenced_nonNull_native, v8, 0, v6);
  }
  sub_1B663C088();
  uint64_t result = sub_1B6E30AC8();
  *(void *)(a1 + 8) = v6;
  *(float *)a1 = a3;
  return result;
}

void VFXScene.setDirectionalLightUniformOverrides(on:world:proj:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_1B69D6758(*(void *)&v3[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], a1, a2, a3, v3);
}

uint64_t *sub_1B663877C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = 0xFFFFFFFFLL;
  if (a1) {
    uint64_t v4 = a1;
  }
  return sub_1B69CC7D4(*(void *)(a4 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager), v4);
}

uint64_t VFXScene.createSkybox(parameters:)(void *a1)
{
  uint64_t v2 = *(void *)&v1[OBJC_IVAR____TtC3VFX8VFXScene_entityManager];
  id v3 = a1;
  uint64_t v4 = v1;
  sub_1B69E28BC(v2, v3, v4);
  uint64_t v6 = v5;

  return v6;
}

void sub_1B66388CC(uint64_t a1@<X0>, void *a2@<X1>, unint64_t *a3@<X8>)
{
  sub_1B638BEC8(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8, v7);
  float32x2_t v9 = (char *)&v22 - v8;
  uint64_t v10 = sub_1B6E30F48();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  float32x2_t v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B663AB08(a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1B663ABE8((uint64_t)v9);
    if (*(void *)(a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture))
    {
LABEL_3:
      unint64_t v15 = 0;
      goto LABEL_7;
    }
    if (*(unsigned char *)(a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_ibl + 8))
    {
      if (!*(void *)(a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_textureTag + 8)) {
        goto LABEL_3;
      }
      swift_bridgeObjectRetain();
      simd_float4x4 v17 = (void *)sub_1B6E31768();
      swift_bridgeObjectRelease();
      unint64_t v18 = (unint64_t)objc_msgSend(a2, sel_entityWithTag_, v17);

      uint64_t v19 = v18 ? v18 : 0xFFFFFFFFLL;
      if (!HIDWORD(v18) && v19 == -1) {
        goto LABEL_3;
      }
      unint64_t v20 = v18 & 0xFFFFFFFF00000000 | v19;
    }
    else
    {
      unint64_t v20 = *(void *)(a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_ibl);
    }
    unint64_t v21 = sub_1B6832EF8(v20, 1, 1, 1.0, 0.0);
    if (v21 == 0xFFFFFFFF) {
      unint64_t v15 = 0;
    }
    else {
      unint64_t v15 = v21;
    }
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    uint64_t v16 = sub_1B6832C4C((uint64_t)v14, 1, 1, 1.0, 0.0);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    if (v16 == 0xFFFFFFFFLL) {
      unint64_t v15 = 0;
    }
    else {
      unint64_t v15 = v16;
    }
  }
LABEL_7:
  *a3 = v15;
}

Swift::Void __swiftcall VFXScene.removeSkyboxes()()
{
  sub_1B69D693C(*(void *)&v0[OBJC_IVAR____TtC3VFX8VFXScene_entityManager], v0);
}

uint64_t *sub_1B6638C68(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + OBJC_IVAR____TtC3VFX8VFXScene_entityManager);
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v9 = qword_1EB997A18;
  int v10 = 0;
  char v11 = 2;
  uint64_t v12 = 0;
  char v13 = 2;
  uint64_t v14 = 0;
  swift_retain();
  sub_1B6A6D8E0(1, (uint64_t)v3);
  swift_release();
  v7[0] = v3[0];
  v7[1] = v3[1];
  uint64_t v8 = v4;
  sub_1B62C9DA8(v1, (uint64_t)v7, 0x200000000, v5);
  sub_1B6309B40((uint64_t)v5, (uint64_t)v6);
  if (!*(void *)&v6[0]) {
    return (uint64_t *)sub_1B62CA064((uint64_t)v3);
  }
  v6[8] = v6[2];
  v6[9] = v6[3];
  v6[10] = v6[4];
  v6[11] = v6[5];
  void v6[6] = v6[0];
  v6[7] = v6[1];
  sub_1B62CA064((uint64_t)v3);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1B6365460(0);
  sub_1B632F170(v5);
  return sub_1B632F170(v5);
}

unint64_t sub_1B6638E50(char a1, char a2, float32x4_t a3)
{
  uint64_t v4 = v3;
  sub_1B638BEC8(0, (unint64_t *)&qword_1EB980BA0, (uint64_t (*)(uint64_t))sub_1B663C11C, MEMORY[0x1E4FBBE00]);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B6E76900;
  *(void *)(v7 + 32) = &type metadata for DirectionalLight;
  *(void *)(v7 + 40) = &off_1F0F6BBC0;
  *(void *)(v7 + 48) = &type metadata for Name;
  *(void *)(v7 + 56) = &off_1F0F9E630;
  *(void *)(v7 + 64) = &type metadata for WorldTransform;
  *(void *)(v7 + 72) = &off_1F0F67720;
  *(void *)(v7 + 80) = &type metadata for Color;
  *(void *)(v7 + 88) = &off_1F0F9ECD8;
  *(void *)(v7 + 96) = type metadata accessor for VFXObjectTag();
  *(void *)(v7 + 104) = &off_1F0F5D1E8;
  if (a2)
  {
    uint64_t v8 = sub_1B62D1B88(1, 6, 1, (char *)v7);
    *((void *)v8 + 2) = 6;
    *((void *)v8 + 14) = &type metadata for Beamed;
    *((void *)v8 + 15) = &off_1F0F9FB50;
    if ((a1 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v8 = sub_1B62D1B88(1, 7, 1, (char *)v7);
  unint64_t v10 = *((void *)v8 + 2);
  unint64_t v9 = *((void *)v8 + 3);
  int64_t v11 = v9 >> 1;
  unint64_t v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    uint64_t v8 = sub_1B62D1B88(v9 > 1, v10 + 1, 1, v8);
    unint64_t v9 = *((void *)v8 + 3);
    int64_t v11 = v9 >> 1;
  }
  *((void *)v8 + 2) = v12;
  char v13 = &v8[16 * v10];
  *((void *)v13 + 4) = &type metadata for Position;
  *((void *)v13 + 5) = &off_1F0FA6EE0;
  uint64_t v14 = v10 + 2;
  if (v11 < v14) {
    uint64_t v8 = sub_1B62D1B88(v9 > 1, v14, 1, v8);
  }
  *((void *)v8 + 2) = v14;
  unint64_t v15 = &v8[16 * v12];
  *((void *)v15 + 4) = &type metadata for Orientation;
  *((void *)v15 + 5) = &off_1F0F560A8;
  if (a1)
  {
LABEL_9:
    unint64_t v17 = *((void *)v8 + 2);
    unint64_t v16 = *((void *)v8 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v8 = sub_1B62D1B88(v16 > 1, v17 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v17 + 1;
    unint64_t v18 = &v8[16 * v17];
    *((void *)v18 + 4) = &type metadata for Shadow;
    *((void *)v18 + 5) = &off_1F0FA18B0;
  }
LABEL_12:
  uint64_t v19 = **(void **)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v22 = *(os_unfair_lock_s **)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v22);
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = sub_1B63B7CC4(v23, MEMORY[0x1E4FBC860]);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1B637FE60(v24);
  if ((v28 & 1) != 0 || (unint64_t v29 = sub_1B63581E4(v26, v27), v30 = v29, (v29 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    int v30 = sub_1B637C7BC(v24, v26, (uint64_t)v8, MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRelease();
  }
  uint64_t v31 = *(void *)(*(void *)(v20 + 80) + 8 * v30 + 32);
  float v32 = *(os_unfair_lock_s **)(v21 + 24);
  swift_retain();
  os_unfair_lock_unlock(v32);
  swift_release();
  swift_retain();
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62F06B8(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  uint64_t v34 = swift_getKeyPath();
  sub_1B62F06B8(v34, 1);
  swift_release();
  swift_release();
  signed int v35 = *(_DWORD *)(v31 + 204);
  if (*(unsigned char *)(v31 + 208))
  {
    unint64_t v36 = 0;
    LODWORD(v37) = -1;
  }
  else
  {
    swift_retain();
    unint64_t v37 = sub_1B69E07A0();
    swift_release();
    unint64_t v36 = HIDWORD(v37);
  }
  int v50 = -1;
  uint64_t v38 = *(void *)(v19 + 16);
  swift_retain();
  swift_retain();
  v49.i8[0] = 1;
  sub_1B68E9170(v35, 0x100000000uLL, 1, v38, v49.i64, v37, &v50, v31, v19, v35, SHIWORD(v35), 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  v49.i64[0] = 0xD000000000000014;
  v49.i64[1] = 0x80000001B6F31510;
  if (v37 != -1 || v36)
  {
    uint64_t v39 = swift_retain();
    MEMORY[0x1F4188790](v39, v40);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C1B0);
    swift_release();
    simd_float4 v41 = (simd_float4)vdivq_f32(vaddq_f32(a3, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), (float32x4_t)vdupq_n_s32(0x3F870A3Du));
    v41.i32[3] = 0;
    simd_float4 v42 = _simd_pow_f4(v41, (simd_float4)xmmword_1B6E72D40);
    int32x4_t v43 = vcgeq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), a3);
    v43.i32[3] = 0;
    int8x16_t v44 = vbslq_s8((int8x16_t)vcltzq_s32(v43), (int8x16_t)vdivq_f32(a3, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)v42);
    v44.i32[3] = 1.0;
    int8x16_t v49 = v44;
    uint64_t v45 = swift_retain();
    MEMORY[0x1F4188790](v45, v46);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C1D0);
    swift_release();
  }
  return v37 | (v36 << 32);
}

unint64_t sub_1B6639408(char a1, char a2, float32x4_t a3)
{
  uint64_t v4 = v3;
  sub_1B638BEC8(0, (unint64_t *)&qword_1EB980BA0, (uint64_t (*)(uint64_t))sub_1B663C11C, MEMORY[0x1E4FBBE00]);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B6E76900;
  *(void *)(v7 + 32) = &type metadata for PointLight;
  *(void *)(v7 + 40) = &off_1F0F53678;
  *(void *)(v7 + 48) = &type metadata for Name;
  *(void *)(v7 + 56) = &off_1F0F9E630;
  *(void *)(v7 + 64) = &type metadata for WorldTransform;
  *(void *)(v7 + 72) = &off_1F0F67720;
  *(void *)(v7 + 80) = &type metadata for Color;
  *(void *)(v7 + 88) = &off_1F0F9ECD8;
  *(void *)(v7 + 96) = type metadata accessor for VFXObjectTag();
  *(void *)(v7 + 104) = &off_1F0F5D1E8;
  if (a2)
  {
    uint64_t v8 = sub_1B62D1B88(1, 6, 1, (char *)v7);
    *((void *)v8 + 2) = 6;
    *((void *)v8 + 14) = &type metadata for Beamed;
    *((void *)v8 + 15) = &off_1F0F9FB50;
    if ((a1 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v8 = sub_1B62D1B88(1, 7, 1, (char *)v7);
  unint64_t v10 = *((void *)v8 + 2);
  unint64_t v9 = *((void *)v8 + 3);
  int64_t v11 = v9 >> 1;
  unint64_t v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    uint64_t v8 = sub_1B62D1B88(v9 > 1, v10 + 1, 1, v8);
    unint64_t v9 = *((void *)v8 + 3);
    int64_t v11 = v9 >> 1;
  }
  *((void *)v8 + 2) = v12;
  char v13 = &v8[16 * v10];
  *((void *)v13 + 4) = &type metadata for Position;
  *((void *)v13 + 5) = &off_1F0FA6EE0;
  uint64_t v14 = v10 + 2;
  if (v11 < v14) {
    uint64_t v8 = sub_1B62D1B88(v9 > 1, v14, 1, v8);
  }
  *((void *)v8 + 2) = v14;
  unint64_t v15 = &v8[16 * v12];
  *((void *)v15 + 4) = &type metadata for Orientation;
  *((void *)v15 + 5) = &off_1F0F560A8;
  if (a1)
  {
LABEL_9:
    unint64_t v17 = *((void *)v8 + 2);
    unint64_t v16 = *((void *)v8 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v8 = sub_1B62D1B88(v16 > 1, v17 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v17 + 1;
    unint64_t v18 = &v8[16 * v17];
    *((void *)v18 + 4) = &type metadata for Shadow;
    *((void *)v18 + 5) = &off_1F0FA18B0;
  }
LABEL_12:
  uint64_t v19 = **(void **)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v22 = *(os_unfair_lock_s **)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v22);
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = sub_1B63B7CC4(v23, MEMORY[0x1E4FBC860]);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1B637FE60(v24);
  if ((v28 & 1) != 0 || (unint64_t v29 = sub_1B63581E4(v26, v27), v30 = v29, (v29 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    int v30 = sub_1B637C7BC(v24, v26, (uint64_t)v8, MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRelease();
  }
  uint64_t v31 = *(void *)(*(void *)(v20 + 80) + 8 * v30 + 32);
  float v32 = *(os_unfair_lock_s **)(v21 + 24);
  swift_retain();
  os_unfair_lock_unlock(v32);
  swift_release();
  swift_retain();
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62F06B8(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  uint64_t v34 = swift_getKeyPath();
  sub_1B62F06B8(v34, 1);
  swift_release();
  swift_release();
  signed int v35 = *(_DWORD *)(v31 + 204);
  if (*(unsigned char *)(v31 + 208))
  {
    unint64_t v36 = 0;
    LODWORD(v37) = -1;
  }
  else
  {
    swift_retain();
    unint64_t v37 = sub_1B69E07A0();
    swift_release();
    unint64_t v36 = HIDWORD(v37);
  }
  int v50 = -1;
  uint64_t v38 = *(void *)(v19 + 16);
  swift_retain();
  swift_retain();
  v49.i8[0] = 1;
  sub_1B68E9170(v35, 0x100000000uLL, 1, v38, v49.i64, v37, &v50, v31, v19, v35, SHIWORD(v35), 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  strcpy(v49.i8, "VFX.PointLight");
  v49.i8[15] = -18;
  if (v37 != -1 || v36)
  {
    uint64_t v39 = swift_retain();
    MEMORY[0x1F4188790](v39, v40);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C220);
    swift_release();
    simd_float4 v41 = (simd_float4)vdivq_f32(vaddq_f32(a3, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), (float32x4_t)vdupq_n_s32(0x3F870A3Du));
    v41.i32[3] = 0;
    simd_float4 v42 = _simd_pow_f4(v41, (simd_float4)xmmword_1B6E72D40);
    int32x4_t v43 = vcgeq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), a3);
    v43.i32[3] = 0;
    int8x16_t v44 = vbslq_s8((int8x16_t)vcltzq_s32(v43), (int8x16_t)vdivq_f32(a3, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)v42);
    v44.i32[3] = 1.0;
    int8x16_t v49 = v44;
    uint64_t v45 = swift_retain();
    MEMORY[0x1F4188790](v45, v46);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C1D0);
    swift_release();
  }
  return v37 | (v36 << 32);
}

unint64_t sub_1B66399C8(char a1, char a2, float32x4_t a3)
{
  uint64_t v4 = v3;
  sub_1B638BEC8(0, (unint64_t *)&qword_1EB980BA0, (uint64_t (*)(uint64_t))sub_1B663C11C, MEMORY[0x1E4FBBE00]);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B6E76900;
  *(void *)(v7 + 32) = &type metadata for AmbientLight;
  *(void *)(v7 + 40) = &off_1F0F58EE8;
  *(void *)(v7 + 48) = &type metadata for Name;
  *(void *)(v7 + 56) = &off_1F0F9E630;
  *(void *)(v7 + 64) = &type metadata for WorldTransform;
  *(void *)(v7 + 72) = &off_1F0F67720;
  *(void *)(v7 + 80) = &type metadata for Color;
  *(void *)(v7 + 88) = &off_1F0F9ECD8;
  *(void *)(v7 + 96) = type metadata accessor for VFXObjectTag();
  *(void *)(v7 + 104) = &off_1F0F5D1E8;
  if (a2)
  {
    uint64_t v8 = sub_1B62D1B88(1, 6, 1, (char *)v7);
    *((void *)v8 + 2) = 6;
    *((void *)v8 + 14) = &type metadata for Beamed;
    *((void *)v8 + 15) = &off_1F0F9FB50;
    if ((a1 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v8 = sub_1B62D1B88(1, 7, 1, (char *)v7);
  unint64_t v10 = *((void *)v8 + 2);
  unint64_t v9 = *((void *)v8 + 3);
  int64_t v11 = v9 >> 1;
  unint64_t v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    uint64_t v8 = sub_1B62D1B88(v9 > 1, v10 + 1, 1, v8);
    unint64_t v9 = *((void *)v8 + 3);
    int64_t v11 = v9 >> 1;
  }
  *((void *)v8 + 2) = v12;
  char v13 = &v8[16 * v10];
  *((void *)v13 + 4) = &type metadata for Position;
  *((void *)v13 + 5) = &off_1F0FA6EE0;
  uint64_t v14 = v10 + 2;
  if (v11 < v14) {
    uint64_t v8 = sub_1B62D1B88(v9 > 1, v14, 1, v8);
  }
  *((void *)v8 + 2) = v14;
  unint64_t v15 = &v8[16 * v12];
  *((void *)v15 + 4) = &type metadata for Orientation;
  *((void *)v15 + 5) = &off_1F0F560A8;
  if (a1)
  {
LABEL_9:
    unint64_t v17 = *((void *)v8 + 2);
    unint64_t v16 = *((void *)v8 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v8 = sub_1B62D1B88(v16 > 1, v17 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v17 + 1;
    unint64_t v18 = &v8[16 * v17];
    *((void *)v18 + 4) = &type metadata for Shadow;
    *((void *)v18 + 5) = &off_1F0FA18B0;
  }
LABEL_12:
  uint64_t v19 = **(void **)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v22 = *(os_unfair_lock_s **)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v22);
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = sub_1B63B7CC4(v23, MEMORY[0x1E4FBC860]);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1B637FE60(v24);
  if ((v28 & 1) != 0 || (unint64_t v29 = sub_1B63581E4(v26, v27), v30 = v29, (v29 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    int v30 = sub_1B637C7BC(v24, v26, (uint64_t)v8, MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRelease();
  }
  uint64_t v31 = *(void *)(*(void *)(v20 + 80) + 8 * v30 + 32);
  float v32 = *(os_unfair_lock_s **)(v21 + 24);
  swift_retain();
  os_unfair_lock_unlock(v32);
  swift_release();
  swift_retain();
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62F06B8(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  uint64_t v34 = swift_getKeyPath();
  sub_1B62F06B8(v34, 1);
  swift_release();
  swift_release();
  signed int v35 = *(_DWORD *)(v31 + 204);
  if (*(unsigned char *)(v31 + 208))
  {
    unint64_t v36 = 0;
    LODWORD(v37) = -1;
  }
  else
  {
    swift_retain();
    unint64_t v37 = sub_1B69E07A0();
    swift_release();
    unint64_t v36 = HIDWORD(v37);
  }
  int v50 = -1;
  uint64_t v38 = *(void *)(v19 + 16);
  swift_retain();
  swift_retain();
  v49.i8[0] = 1;
  sub_1B68E9170(v35, 0x100000000uLL, 1, v38, v49.i64, v37, &v50, v31, v19, v35, SHIWORD(v35), 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  v49.i64[0] = 0xD000000000000010;
  v49.i64[1] = 0x80000001B6F31530;
  if (v37 != -1 || v36)
  {
    uint64_t v39 = swift_retain();
    MEMORY[0x1F4188790](v39, v40);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C220);
    swift_release();
    simd_float4 v41 = (simd_float4)vdivq_f32(vaddq_f32(a3, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), (float32x4_t)vdupq_n_s32(0x3F870A3Du));
    v41.i32[3] = 0;
    simd_float4 v42 = _simd_pow_f4(v41, (simd_float4)xmmword_1B6E72D40);
    int32x4_t v43 = vcgeq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), a3);
    v43.i32[3] = 0;
    int8x16_t v44 = vbslq_s8((int8x16_t)vcltzq_s32(v43), (int8x16_t)vdivq_f32(a3, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)v42);
    v44.i32[3] = 1.0;
    int8x16_t v49 = v44;
    uint64_t v45 = swift_retain();
    MEMORY[0x1F4188790](v45, v46);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C1D0);
    swift_release();
  }
  return v37 | (v36 << 32);
}

unint64_t sub_1B6639F80(char a1, char a2, float32x4_t a3)
{
  uint64_t v4 = v3;
  sub_1B638BEC8(0, (unint64_t *)&qword_1EB980BA0, (uint64_t (*)(uint64_t))sub_1B663C11C, MEMORY[0x1E4FBBE00]);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B6E76900;
  *(void *)(v7 + 32) = &type metadata for SpotLight;
  *(void *)(v7 + 40) = &off_1F0FA9CE8;
  *(void *)(v7 + 48) = &type metadata for Name;
  *(void *)(v7 + 56) = &off_1F0F9E630;
  *(void *)(v7 + 64) = &type metadata for WorldTransform;
  *(void *)(v7 + 72) = &off_1F0F67720;
  *(void *)(v7 + 80) = &type metadata for Color;
  *(void *)(v7 + 88) = &off_1F0F9ECD8;
  *(void *)(v7 + 96) = type metadata accessor for VFXObjectTag();
  *(void *)(v7 + 104) = &off_1F0F5D1E8;
  if (a2)
  {
    uint64_t v8 = sub_1B62D1B88(1, 6, 1, (char *)v7);
    *((void *)v8 + 2) = 6;
    *((void *)v8 + 14) = &type metadata for Beamed;
    *((void *)v8 + 15) = &off_1F0F9FB50;
    if ((a1 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v8 = sub_1B62D1B88(1, 7, 1, (char *)v7);
  unint64_t v10 = *((void *)v8 + 2);
  unint64_t v9 = *((void *)v8 + 3);
  int64_t v11 = v9 >> 1;
  unint64_t v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    uint64_t v8 = sub_1B62D1B88(v9 > 1, v10 + 1, 1, v8);
    unint64_t v9 = *((void *)v8 + 3);
    int64_t v11 = v9 >> 1;
  }
  *((void *)v8 + 2) = v12;
  char v13 = &v8[16 * v10];
  *((void *)v13 + 4) = &type metadata for Position;
  *((void *)v13 + 5) = &off_1F0FA6EE0;
  uint64_t v14 = v10 + 2;
  if (v11 < v14) {
    uint64_t v8 = sub_1B62D1B88(v9 > 1, v14, 1, v8);
  }
  *((void *)v8 + 2) = v14;
  unint64_t v15 = &v8[16 * v12];
  *((void *)v15 + 4) = &type metadata for Orientation;
  *((void *)v15 + 5) = &off_1F0F560A8;
  if (a1)
  {
LABEL_9:
    unint64_t v17 = *((void *)v8 + 2);
    unint64_t v16 = *((void *)v8 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v8 = sub_1B62D1B88(v16 > 1, v17 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v17 + 1;
    unint64_t v18 = &v8[16 * v17];
    *((void *)v18 + 4) = &type metadata for Shadow;
    *((void *)v18 + 5) = &off_1F0FA18B0;
  }
LABEL_12:
  uint64_t v19 = **(void **)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v22 = *(os_unfair_lock_s **)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v22);
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = sub_1B63B7CC4(v23, MEMORY[0x1E4FBC860]);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1B637FE60(v24);
  if ((v28 & 1) != 0 || (unint64_t v29 = sub_1B63581E4(v26, v27), v30 = v29, (v29 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    int v30 = sub_1B637C7BC(v24, v26, (uint64_t)v8, MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRelease();
  }
  uint64_t v31 = *(void *)(*(void *)(v20 + 80) + 8 * v30 + 32);
  float v32 = *(os_unfair_lock_s **)(v21 + 24);
  swift_retain();
  os_unfair_lock_unlock(v32);
  swift_release();
  swift_retain();
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62F06B8(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  uint64_t v34 = swift_getKeyPath();
  sub_1B62F06B8(v34, 1);
  swift_release();
  swift_release();
  signed int v35 = *(_DWORD *)(v31 + 204);
  if (*(unsigned char *)(v31 + 208))
  {
    unint64_t v36 = 0;
    LODWORD(v37) = -1;
  }
  else
  {
    swift_retain();
    unint64_t v37 = sub_1B69E07A0();
    swift_release();
    unint64_t v36 = HIDWORD(v37);
  }
  int v50 = -1;
  uint64_t v38 = *(void *)(v19 + 16);
  swift_retain();
  swift_retain();
  v49.i8[0] = 1;
  sub_1B68E9170(v35, 0x100000000uLL, 1, v38, v49.i64, v37, &v50, v31, v19, v35, SHIWORD(v35), 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  strcpy(v49.i8, "VFX.SpotLight");
  v49.i16[7] = -4864;
  if (v37 != -1 || v36)
  {
    uint64_t v39 = swift_retain();
    MEMORY[0x1F4188790](v39, v40);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C220);
    swift_release();
    simd_float4 v41 = (simd_float4)vdivq_f32(vaddq_f32(a3, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), (float32x4_t)vdupq_n_s32(0x3F870A3Du));
    v41.i32[3] = 0;
    simd_float4 v42 = _simd_pow_f4(v41, (simd_float4)xmmword_1B6E72D40);
    int32x4_t v43 = vcgeq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), a3);
    v43.i32[3] = 0;
    int8x16_t v44 = vbslq_s8((int8x16_t)vcltzq_s32(v43), (int8x16_t)vdivq_f32(a3, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)v42);
    v44.i32[3] = 1.0;
    int8x16_t v49 = v44;
    uint64_t v45 = swift_retain();
    MEMORY[0x1F4188790](v45, v46);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C1D0);
    swift_release();
  }
  return v37 | (v36 << 32);
}

unint64_t sub_1B663A540(char a1, char a2, float32x4_t a3)
{
  uint64_t v4 = v3;
  sub_1B638BEC8(0, (unint64_t *)&qword_1EB980BA0, (uint64_t (*)(uint64_t))sub_1B663C11C, MEMORY[0x1E4FBBE00]);
  uint64_t v7 = swift_allocObject();
  *(_OWORD *)(v7 + 16) = xmmword_1B6E76900;
  *(void *)(v7 + 32) = &type metadata for RectAreaLight;
  *(void *)(v7 + 40) = &off_1F0F616A8;
  *(void *)(v7 + 48) = &type metadata for Name;
  *(void *)(v7 + 56) = &off_1F0F9E630;
  *(void *)(v7 + 64) = &type metadata for WorldTransform;
  *(void *)(v7 + 72) = &off_1F0F67720;
  *(void *)(v7 + 80) = &type metadata for Color;
  *(void *)(v7 + 88) = &off_1F0F9ECD8;
  *(void *)(v7 + 96) = type metadata accessor for VFXObjectTag();
  *(void *)(v7 + 104) = &off_1F0F5D1E8;
  if (a2)
  {
    uint64_t v8 = sub_1B62D1B88(1, 6, 1, (char *)v7);
    *((void *)v8 + 2) = 6;
    *((void *)v8 + 14) = &type metadata for Beamed;
    *((void *)v8 + 15) = &off_1F0F9FB50;
    if ((a1 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  uint64_t v8 = sub_1B62D1B88(1, 7, 1, (char *)v7);
  unint64_t v10 = *((void *)v8 + 2);
  unint64_t v9 = *((void *)v8 + 3);
  int64_t v11 = v9 >> 1;
  unint64_t v12 = v10 + 1;
  if (v9 >> 1 <= v10)
  {
    uint64_t v8 = sub_1B62D1B88(v9 > 1, v10 + 1, 1, v8);
    unint64_t v9 = *((void *)v8 + 3);
    int64_t v11 = v9 >> 1;
  }
  *((void *)v8 + 2) = v12;
  char v13 = &v8[16 * v10];
  *((void *)v13 + 4) = &type metadata for Position;
  *((void *)v13 + 5) = &off_1F0FA6EE0;
  uint64_t v14 = v10 + 2;
  if (v11 < v14) {
    uint64_t v8 = sub_1B62D1B88(v9 > 1, v14, 1, v8);
  }
  *((void *)v8 + 2) = v14;
  unint64_t v15 = &v8[16 * v12];
  *((void *)v15 + 4) = &type metadata for Orientation;
  *((void *)v15 + 5) = &off_1F0F560A8;
  if (a1)
  {
LABEL_9:
    unint64_t v17 = *((void *)v8 + 2);
    unint64_t v16 = *((void *)v8 + 3);
    if (v17 >= v16 >> 1) {
      uint64_t v8 = sub_1B62D1B88(v16 > 1, v17 + 1, 1, v8);
    }
    *((void *)v8 + 2) = v17 + 1;
    unint64_t v18 = &v8[16 * v17];
    *((void *)v18 + 4) = &type metadata for Shadow;
    *((void *)v18 + 5) = &off_1F0FA18B0;
  }
LABEL_12:
  uint64_t v19 = **(void **)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  uint64_t v20 = *(void *)(v19 + 16);
  uint64_t v21 = v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v22 = *(os_unfair_lock_s **)(v20 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v22);
  uint64_t v23 = swift_bridgeObjectRetain();
  uint64_t v24 = sub_1B63B7CC4(v23, MEMORY[0x1E4FBC860]);
  uint64_t v26 = v25;
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1B637FE60(v24);
  if ((v28 & 1) != 0 || (unint64_t v29 = sub_1B63581E4(v26, v27), v30 = v29, (v29 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    int v30 = sub_1B637C7BC(v24, v26, (uint64_t)v8, MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRelease();
  }
  uint64_t v31 = *(void *)(*(void *)(v20 + 80) + 8 * v30 + 32);
  float v32 = *(os_unfair_lock_s **)(v21 + 24);
  swift_retain();
  os_unfair_lock_unlock(v32);
  swift_release();
  swift_retain();
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62F06B8(KeyPath, 1);
  swift_release();
  swift_release();
  swift_retain();
  uint64_t v34 = swift_getKeyPath();
  sub_1B62F06B8(v34, 1);
  swift_release();
  swift_release();
  signed int v35 = *(_DWORD *)(v31 + 204);
  if (*(unsigned char *)(v31 + 208))
  {
    unint64_t v36 = 0;
    LODWORD(v37) = -1;
  }
  else
  {
    swift_retain();
    unint64_t v37 = sub_1B69E07A0();
    swift_release();
    unint64_t v36 = HIDWORD(v37);
  }
  int v50 = -1;
  uint64_t v38 = *(void *)(v19 + 16);
  swift_retain();
  swift_retain();
  v49.i8[0] = 1;
  sub_1B68E9170(v35, 0x100000000uLL, 1, v38, v49.i64, v37, &v50, v31, v19, v35, SHIWORD(v35), 1);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release_n();
  v49.i64[0] = 0xD000000000000011;
  v49.i64[1] = 0x80000001B6F31550;
  if (v37 != -1 || v36)
  {
    uint64_t v39 = swift_retain();
    MEMORY[0x1F4188790](v39, v40);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C220);
    swift_release();
    simd_float4 v41 = (simd_float4)vdivq_f32(vaddq_f32(a3, (float32x4_t)vdupq_n_s32(0x3D6147AEu)), (float32x4_t)vdupq_n_s32(0x3F870A3Du));
    v41.i32[3] = 0;
    simd_float4 v42 = _simd_pow_f4(v41, (simd_float4)xmmword_1B6E72D40);
    int32x4_t v43 = vcgeq_f32((float32x4_t)vdupq_n_s32(0x3D25AEE6u), a3);
    v43.i32[3] = 0;
    int8x16_t v44 = vbslq_s8((int8x16_t)vcltzq_s32(v43), (int8x16_t)vdivq_f32(a3, (float32x4_t)vdupq_n_s32(0x414EB852u)), (int8x16_t)v42);
    v44.i32[3] = 1.0;
    int8x16_t v49 = v44;
    uint64_t v45 = swift_retain();
    MEMORY[0x1F4188790](v45, v46);
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B663C1D0);
    swift_release();
  }
  return v37 | (v36 << 32);
}

unint64_t sub_1B663AAF8(unint64_t result)
{
  if (result > 5) {
    return 0;
  }
  return result;
}

uint64_t sub_1B663AB08(uint64_t a1, uint64_t a2)
{
  sub_1B638BEC8(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t type metadata accessor for VFXSceneLightParameters()
{
  uint64_t result = qword_1E9DCD9B0;
  if (!qword_1E9DCD9B0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1B663ABE8(uint64_t a1)
{
  sub_1B638BEC8(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

unint64_t sub_1B663AC78()
{
  unint64_t result = qword_1E9DCD9A0;
  if (!qword_1E9DCD9A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCD9A0);
  }
  return result;
}

void *sub_1B663ACCC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type);
  return result;
}

void *sub_1B663ACE4(void *result, void *a2)
{
  *(void *)(*a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_type) = *result;
  return result;
}

float sub_1B663ACFC@<S0>(void *a1@<X0>, float *a2@<X8>)
{
  float result = *(float *)(*a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity);
  *a2 = result;
  return result;
}

float sub_1B663AD14(float *a1, void *a2)
{
  float result = *a1;
  *(float *)(*a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_intensity) = *a1;
  return result;
}

__n128 sub_1B663AD2C@<Q0>(void *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = (__n128 *)(*a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color);
  unsigned __int8 v3 = v2[1].n128_u8[0];
  __n128 result = *v2;
  *a2 = *v2;
  a2[1].n128_u8[0] = v3;
  return result;
}

double sub_1B663AD50(__n128 *a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)&double result = sub_1B663ADBC(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_color).n128_u64[0];
  return result;
}

__n128 sub_1B663AD5C@<Q0>(void *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = (__n128 *)(*a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation);
  unsigned __int8 v3 = v2[1].n128_u8[0];
  __n128 result = *v2;
  *a2 = *v2;
  a2[1].n128_u8[0] = v3;
  return result;
}

double sub_1B663AD80(__n128 *a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)&double result = sub_1B663ADBC(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orientation).n128_u64[0];
  return result;
}

__n128 sub_1B663AD8C@<Q0>(void *a1@<X0>, __n128 *a2@<X8>)
{
  uint64_t v2 = (__n128 *)(*a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position);
  unsigned __int8 v3 = v2[1].n128_u8[0];
  __n128 result = *v2;
  *a2 = *v2;
  a2[1].n128_u8[0] = v3;
  return result;
}

double sub_1B663ADB0(__n128 *a1, void *a2, uint64_t a3, uint64_t a4)
{
  *(void *)&double result = sub_1B663ADBC(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_position).n128_u64[0];
  return result;
}

__n128 sub_1B663ADBC(__n128 *a1, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  unsigned __int8 v5 = a1[1].n128_u8[0];
  uint64_t v6 = (__n128 *)(*a2 + *a5);
  __n128 result = *a1;
  *uint64_t v6 = *a1;
  v6[1].n128_u8[0] = v5;
  return result;
}

void *sub_1B663ADDC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius;
  int v3 = *(_DWORD *)v2;
  LOBYTE(v2) = *(unsigned char *)(v2 + 4);
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_1B663AE00(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B663AEFC(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_attenuationRadius);
}

void *sub_1B663AE0C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear;
  int v3 = *(_DWORD *)v2;
  LOBYTE(v2) = *(unsigned char *)(v2 + 4);
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_1B663AE30(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B663AEFC(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zNear);
}

void *sub_1B663AE3C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar;
  int v3 = *(_DWORD *)v2;
  LOBYTE(v2) = *(unsigned char *)(v2 + 4);
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_1B663AE60(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B663AEFC(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_zFar);
}

void *sub_1B663AE6C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale;
  int v3 = *(_DWORD *)v2;
  LOBYTE(v2) = *(unsigned char *)(v2 + 4);
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_1B663AE90(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B663AEFC(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_orthoScale);
}

void *sub_1B663AE9C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle;
  int v3 = *(_DWORD *)v2;
  LOBYTE(v2) = *(unsigned char *)(v2 + 4);
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_1B663AEC0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B663AEFC(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_outerAngle);
}

void *sub_1B663AECC@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle;
  int v3 = *(_DWORD *)v2;
  LOBYTE(v2) = *(unsigned char *)(v2 + 4);
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v2;
  return result;
}

uint64_t sub_1B663AEF0(uint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  return sub_1B663AEFC(a1, a2, a3, a4, &OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_innerAngle);
}

uint64_t sub_1B663AEFC(uint64_t result, void *a2, uint64_t a3, uint64_t a4, void *a5)
{
  char v5 = *(unsigned char *)(result + 4);
  uint64_t v6 = *a2 + *a5;
  *(_DWORD *)uint64_t v6 = *(_DWORD *)result;
  *(unsigned char *)(v6 + 4) = v5;
  return result;
}

void *sub_1B663AF1C@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents;
  uint64_t v3 = *(void *)v2;
  LOBYTE(v2) = *(unsigned char *)(v2 + 8);
  *(void *)a2 = v3;
  *(unsigned char *)(a2 + 8) = v2;
  return result;
}

uint64_t sub_1B663AF40(uint64_t result, void *a2)
{
  char v2 = *(unsigned char *)(result + 8);
  uint64_t v3 = *a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_extents;
  *(void *)uint64_t v3 = *(void *)result;
  *(unsigned char *)(v3 + 8) = v2;
  return result;
}

void *sub_1B663AF64@<X0>(void *result@<X0>, unsigned char *a2@<X8>)
{
  *a2 = *(unsigned char *)(*result + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided);
  return result;
}

unsigned char *sub_1B663AF7C(unsigned char *result, void *a2)
{
  *(unsigned char *)(*a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_doubleSided) = *result;
  return result;
}

uint64_t sub_1B663AF94@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B663AB08(*a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_url, a2);
}

uint64_t sub_1B663AFB0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  *a2 = *(void *)(*a1 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture);
  return swift_unknownObjectRetain();
}

uint64_t sub_1B663AFC8(void *a1, void *a2)
{
  *(void *)(*a2 + OBJC_IVAR____TtC3VFX23VFXSceneLightParameters_texture) = *a1;
  swift_unknownObjectRetain();

  return swift_unknownObjectRelease();
}

ValueMetadata *type metadata accessor for VFXSceneLightType()
{
  return &type metadata for VFXSceneLightType;
}

uint64_t sub_1B663B024()
{
  return type metadata accessor for VFXSceneLightParameters();
}

void sub_1B663B02C()
{
  sub_1B638BEC8(319, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

uint64_t method lookup function for VFXSceneLightParameters(uint64_t a1, uint64_t a2)
{
  return MEMORY[0x1F4186708](a1, a2, &nominal type descriptor for VFXSceneLightParameters);
}

uint64_t dispatch thunk of VFXSceneLightParameters.type.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xD8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.type.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.type.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xE8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.intensity.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.intensity.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0xF8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.intensity.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x100))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.color.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x108))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.color.setter(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x110))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of VFXSceneLightParameters.color.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x118))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.orientation.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x120))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.orientation.setter(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x128))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of VFXSceneLightParameters.orientation.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x130))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.position.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x138))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.position.setter(uint64_t a1, uint64_t a2, char a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v3) + 0x140))(a1, a2, a3 & 1);
}

uint64_t dispatch thunk of VFXSceneLightParameters.position.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x148))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.attenuationRadius.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x150))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of VFXSceneLightParameters.attenuationRadius.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x158))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of VFXSceneLightParameters.attenuationRadius.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x160))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.zNear.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x168))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of VFXSceneLightParameters.zNear.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x170))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of VFXSceneLightParameters.zNear.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x178))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.zFar.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x180))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of VFXSceneLightParameters.zFar.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x188))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of VFXSceneLightParameters.zFar.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x190))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.orthoScale.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x198))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of VFXSceneLightParameters.orthoScale.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1A0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of VFXSceneLightParameters.orthoScale.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1A8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.outerAngle.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1B0))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of VFXSceneLightParameters.outerAngle.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1B8))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of VFXSceneLightParameters.outerAngle.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.innerAngle.getter()
{
  unint64_t v1 = (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1C8))();
  return v1 | ((HIDWORD(v1) & 1) << 32);
}

uint64_t dispatch thunk of VFXSceneLightParameters.innerAngle.setter(unint64_t a1)
{
  return (*(uint64_t (**)(unint64_t))((*MEMORY[0x1E4FBC8C8] & *v1) + 0x1D0))(a1 | ((HIDWORD(a1) & 1) << 32));
}

uint64_t dispatch thunk of VFXSceneLightParameters.innerAngle.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1D8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.extents.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1E0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.extents.setter(uint64_t a1, char a2)
{
  return (*(uint64_t (**)(uint64_t, void))((*MEMORY[0x1E4FBC8C8] & *v2) + 0x1E8))(a1, a2 & 1);
}

uint64_t dispatch thunk of VFXSceneLightParameters.extents.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.doubleSided.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x1F8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.doubleSided.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x200))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.doubleSided.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x208))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.url.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x210))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.url.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x218))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.url.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x220))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.texture.getter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x228))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.texture.setter()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x230))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.texture.modify()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x238))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.__allocating_init(type:)()
{
  return (*(uint64_t (**)(void))(v0 + 624))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.__allocating_init(type:intensity:color:)()
{
  return (*(uint64_t (**)(void))(v0 + 632))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setIntensity(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x280))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setOrientation(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x288))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setPosition(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x290))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setAttenuationRadius(_:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x298))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setDirectionalParameters(scale:zNear:zFar:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setSpotLightParameters(outerAngle:innerAngle:zNear:zFar:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2A8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setPointLightParameters(zNear:zFar:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setAreaLightParameters(extents:doubleSided:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2B8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setIBLParameters(url:texture:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C0))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setIBLParameters(entity:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2C8))();
}

uint64_t dispatch thunk of VFXSceneLightParameters.setIBLParameters(tag:)()
{
  return (*(uint64_t (**)(void))((*MEMORY[0x1E4FBC8C8] & *v0) + 0x2D0))();
}

unint64_t sub_1B663C088()
{
  unint64_t result = qword_1E9DCD9C8;
  if (!qword_1E9DCD9C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCD9C8);
  }
  return result;
}

void *sub_1B663C0DC(void *a1)
{
  return sub_1B69FFF08(a1, *(__n128 **)(v1 + 16), *(void *)(v1 + 24));
}

void *sub_1B663C0FC(void *a1)
{
  return sub_1B69FFF30(a1, *(__n128 **)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_1B663C11C()
{
  unint64_t result = qword_1EB97EB00;
  if (!qword_1EB97EB00)
  {
    sub_1B663C158();
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB97EB00);
  }
  return result;
}

unint64_t sub_1B663C158()
{
  unint64_t result = qword_1EB97EAE0;
  if (!qword_1EB97EAE0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB97EAE0);
  }
  return result;
}

uint64_t sub_1B663C1B0(uint64_t a1)
{
  return sub_1B6B6D570(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24));
}

unint64_t sub_1B663C1D0()
{
  return sub_1B663C1E8();
}

unint64_t sub_1B663C1E8()
{
  return sub_1B68523D0(*(void *)(v0 + 24), *(__n128 *)*(void *)(v0 + 16));
}

uint64_t sub_1B663C220(uint64_t a1)
{
  return sub_1B663C1B0(a1);
}

uint64_t sub_1B663C238@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Position;
  *(void *)(inited + 40) = &off_1F0FA6F58;
  *(void *)(inited + 48) = &type metadata for Color;
  *(void *)(inited + 56) = &off_1F0F9ED50;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663C458@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Rect2D;
  *(void *)(inited + 40) = &off_1F0FA0CE0;
  *(void *)(inited + 48) = &type metadata for Color;
  *(void *)(inited + 56) = &off_1F0F9ED50;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663C678@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Orientation;
  *(void *)(inited + 40) = &off_1F0F56120;
  *(void *)(inited + 48) = &type metadata for AngularVelocity;
  *(void *)(inited + 56) = &off_1F0F67D60;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663C898@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Position;
  *(void *)(inited + 40) = &off_1F0FA6F58;
  *(void *)(inited + 48) = &type metadata for Velocity;
  *(void *)(inited + 56) = &off_1F0FA7C80;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663CAB8@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Position;
  *(void *)(inited + 40) = &off_1F0FA6F58;
  *(void *)(inited + 48) = &type metadata for Scale;
  *(void *)(inited + 56) = &off_1F0F9F580;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663CCD8@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Position;
  *(void *)(inited + 40) = &off_1F0FA6F58;
  *(void *)(inited + 48) = &type metadata for ParticleCustomEmitter;
  *(void *)(inited + 56) = &off_1F0F890C8;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663CEF8@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Scale1;
  *(void *)(inited + 40) = &off_1F0FA0E48;
  *(void *)(inited + 48) = &type metadata for ParticleAge;
  *(void *)(inited + 56) = &off_1F0F563A8;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663D118@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Scale2;
  *(void *)(inited + 40) = &off_1F0FA0FB0;
  *(void *)(inited + 48) = &type metadata for ParticleAge;
  *(void *)(inited + 56) = &off_1F0F563A8;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663D338@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Scale;
  *(void *)(inited + 40) = &off_1F0F9F580;
  *(void *)(inited + 48) = &type metadata for ParticleAge;
  *(void *)(inited + 56) = &off_1F0F563A8;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663D558@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Orientation;
  *(void *)(inited + 40) = &off_1F0F56120;
  *(void *)(inited + 48) = &type metadata for Position;
  *(void *)(inited + 56) = &off_1F0FA6F58;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663D778@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for KillShape;
  *(void *)(inited + 40) = &off_1F0FA89F0;
  *(void *)(inited + 48) = &type metadata for WorldTransform;
  *(void *)(inited + 56) = &off_1F0F67798;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663D998@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for ParticleCollisionEvent;
  *(void *)(inited + 40) = &off_1F0F8CB90;
  *(void *)(inited + 48) = &type metadata for OldEvent;
  *(void *)(inited + 56) = &off_1F0FA6C00;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663DBB8@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for ParticleLifetime;
  *(void *)(inited + 40) = &off_1F0F6DCC0;
  *(void *)(inited + 48) = &type metadata for ParticleAge;
  *(void *)(inited + 56) = &off_1F0F563A8;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663DDD8@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for ParticleAge;
  *(void *)(inited + 40) = &off_1F0F563A8;
  *(void *)(inited + 48) = &type metadata for ParticleLifetime;
  *(void *)(inited + 56) = &off_1F0F6DCC0;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663DFF8@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Color;
  *(void *)(inited + 40) = &off_1F0F9ED50;
  *(void *)(inited + 48) = &type metadata for ParticleAge;
  *(void *)(inited + 56) = &off_1F0F563A8;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663E218@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for ParticleAngle;
  *(void *)(inited + 40) = &off_1F0F60948;
  *(void *)(inited + 48) = &type metadata for ParticleAngleVelocity;
  *(void *)(inited + 56) = &off_1F0F889D8;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663E438@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for ParticleTextureFrame;
  *(void *)(inited + 40) = &off_1F0F82C30;
  *(void *)(inited + 48) = &type metadata for ParticleAge;
  *(void *)(inited + 56) = &off_1F0F563A8;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663E658@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Velocity;
  *(void *)(inited + 40) = &off_1F0FA7C80;
  *(void *)(inited + 48) = &type metadata for Orientation;
  *(void *)(inited + 56) = &off_1F0F56120;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663E878@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for ParticleMeshCollider;
  *(void *)(inited + 40) = &off_1F0F815C8;
  *(void *)(inited + 48) = &type metadata for WorldTransform;
  *(void *)(inited + 56) = &off_1F0F67798;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663EA98@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Orientation;
  *(void *)(inited + 40) = &off_1F0F56120;
  *(void *)(inited + 48) = &type metadata for Velocity;
  *(void *)(inited + 56) = &off_1F0FA7C80;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663ECB8@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Color;
  *(void *)(inited + 40) = &off_1F0F9ED50;
  *(void *)(inited + 48) = &type metadata for Position;
  *(void *)(inited + 56) = &off_1F0FA6F58;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663EED8@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Scale;
  *(void *)(inited + 40) = &off_1F0F9F580;
  *(void *)(inited + 48) = &type metadata for Velocity;
  *(void *)(inited + 56) = &off_1F0FA7C80;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663F0F8@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Scale1;
  *(void *)(inited + 40) = &off_1F0FA0E48;
  *(void *)(inited + 48) = &type metadata for Velocity;
  *(void *)(inited + 56) = &off_1F0FA7C80;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663F318@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Color;
  *(void *)(inited + 40) = &off_1F0F9ED50;
  *(void *)(inited + 48) = &type metadata for Velocity;
  *(void *)(inited + 56) = &off_1F0FA7C80;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663F538@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Position;
  *(void *)(inited + 40) = &off_1F0FA6F58;
  *(void *)(inited + 48) = &type metadata for ParticleTarget;
  *(void *)(inited + 56) = &off_1F0F64E60;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663F758@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for ParticleAngle;
  *(void *)(inited + 40) = &off_1F0F60948;
  *(void *)(inited + 48) = &type metadata for ParticleAge;
  *(void *)(inited + 56) = &off_1F0F563A8;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663F978@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Position;
  *(void *)(inited + 40) = &off_1F0FA6F58;
  *(void *)(inited + 48) = &type metadata for Particle;
  *(void *)(inited + 56) = &off_1F0FA6CF0;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t sub_1B663FB98@<X0>(uint64_t a1@<X8>)
{
  char v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = (uint64_t)*v1 + 41;
  uint64_t v6 = (*v1)[8];
  unint64_t v7 = v4[9];
  sub_1B62F9218(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for Position;
  *(void *)(inited + 40) = &off_1F0FA6F58;
  *(void *)(inited + 48) = &type metadata for Orientation;
  *(void *)(inited + 56) = &off_1F0F56120;
  if (v7 > 0xF)
  {
    uint64_t v25 = sub_1B62F79D4((char *)(v5 + v6), v7 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v25;
  }
  uint64_t v9 = v4[10];
  int64_t v10 = v4[11];
  unint64_t v11 = 2;
  uint64_t v12 = sub_1B6E31C98();
  *(void *)(v12 + 16) = 2;
  *(_WORD *)(v12 + 32) = 771;
  if (v10)
  {
    uint64_t v25 = sub_1B62F7C94((char *)(v5 + v9), v10);
    sub_1B62F81D8(v12);
    uint64_t v12 = v25;
    unint64_t v11 = *(void *)(v25 + 16);
  }
  uint64_t v13 = (uint64_t)*v2 + 41;
  uint64_t v14 = (char *)(v13 + (*v2)[12]);
  unint64_t v15 = (unint64_t)(*v2)[13] >> 4;
  unint64_t v16 = (char *)(v13 + (*v2)[14]);
  uint64_t v17 = (*v2)[15] / 0x18u;
  int v18 = *((_DWORD *)v2 + 2);
  char v19 = *((unsigned char *)v2 + 12);
  uint64_t v20 = v2[4];
  uint64_t v21 = v2[2];
  char v22 = *((unsigned char *)v2 + 24);
  uint64_t v23 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v12 + 32), v11, v14, v15, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a1 = v23;
  *(_DWORD *)(a1 + 8) = v18;
  *(unsigned char *)(a1 + 12) = v19;
  *(_WORD *)(a1 + 13) = v26;
  *(unsigned char *)(a1 + 15) = v27;
  *(void *)(a1 + 16) = v21;
  *(unsigned char *)(a1 + 24) = v22;
  *(_DWORD *)(a1 + 25) = v25;
  *(_DWORD *)(a1 + 28) = *(_DWORD *)((char *)&v25 + 3);
  *(void *)(a1 + 32) = v20;
  return result;
}

uint64_t *sub_1B663FDB8(uint64_t a1)
{
  float v2 = *(float *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
  long long v3 = *(_OWORD *)(v1 + 32);
  v49[0] = *(_OWORD *)(v1 + 16);
  v49[1] = v3;
  uint64_t v50 = *(void *)(v1 + 48);
  sub_1B62C9DA8(a1, (uint64_t)v49, 0x200000000, v38);
  uint64_t result = (uint64_t *)sub_1B62CA210((uint64_t)v38, (uint64_t)v39, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v39[0])
  {
    if (v45 >= 1)
    {
      uint64_t v33 = v42;
      if (v42)
      {
        uint64_t v5 = v44;
        uint64_t v36 = v44[4];
        int v35 = *(unsigned __int8 *)(v43 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v46[0] = v39[0];
        v46[1] = v39[1];
        uint64_t v47 = v40;
        uint64_t v31 = (uint64_t)(v44 + 6);
        uint64_t v32 = v41;
        int v30 = v44 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v6 = 0;
        uint64_t v7 = 0;
        do
        {
          uint64_t v8 = (unsigned int *)(v32 + 48 * v6);
          uint64_t v9 = *v8;
          int64_t v10 = (uint64_t *)*((void *)v8 + 2);
          uint64_t v11 = *((void *)v8 + 3);
          uint64_t v13 = *((void *)v8 + 4);
          uint64_t v12 = *((void *)v8 + 5);
          uint64_t v34 = v7;
          uint64_t v37 = v8[1];
          if (v35)
          {
            uint64_t v14 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v14);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v36);
          sub_1B62CA210(v31, (uint64_t)v48, &qword_1EB97DE20);
          uint64_t v15 = v5[4];
          uint64_t v16 = *(void *)(*(void *)(*(void *)(*(void *)(v12 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          void v5[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
          v5[7] = v16;
          v30[1] = 0;
          v30[2] = 0;
          *int v30 = 0;
          swift_release();
          uint64_t v17 = sub_1B62C9024((uint64_t)&type metadata for RotateAction, (uint64_t)&off_1F0F5B238, v10, v11, v13, (uint64_t)v5);
          uint64_t v18 = sub_1B62C9024((uint64_t)&type metadata for Orientation, (uint64_t)&off_1F0F560A8, v10, v11, v13, (uint64_t)v5);
          if (v9 == v37)
          {
            uint64_t v7 = v34;
          }
          else
          {
            char v19 = (float32x4_t *)(v17 + 32 * v9 + 16);
            uint64_t v20 = v37 - v9;
            uint64_t v21 = (float32x2_t *)(v18 + 16 * v9);
            uint64_t v7 = v34;
            do
            {
              float v22 = v2 * v19[-1].f32[0];
              float32x4_t v23 = *v19;
              v19 += 2;
              __float2 v24 = __sincosf_stret(v22 * 0.5);
              float32x4_t v25 = vmulq_n_f32(v23, v24.__sinval);
              v25.i32[3] = LODWORD(v24.__cosval);
              int8x16_t v26 = (int8x16_t)vnegq_f32(v25);
              int8x16_t v27 = (int8x16_t)vtrn2q_s32((int32x4_t)v25, vtrn1q_s32((int32x4_t)v25, (int32x4_t)v26));
              float32x4_t v28 = vmlaq_n_f32(vmulq_lane_f32((float32x4_t)vextq_s8((int8x16_t)v25, v26, 8uLL), *v21, 1), (float32x4_t)vextq_s8(v27, v27, 8uLL), COERCE_FLOAT(*(_OWORD *)v21->f32));
              float32x4_t v29 = (float32x4_t)vrev64q_s32((int32x4_t)v25);
              v29.i32[0] = v26.i32[1];
              v29.i32[3] = v26.i32[2];
              *(float32x4_t *)v21->f32 = vaddq_f32(vmlaq_laneq_f32(vmulq_laneq_f32(v25, *(float32x4_t *)v21->f32, 3), v29, *(float32x4_t *)v21->f32, 2), v28);
              v21 += 2;
              --v20;
            }
            while (v20);
          }
          sub_1B6345178(v5, (unsigned __int16 **)v46, (uint64_t)v48);
          sub_1B634507C((char *)v12);
          ecs_stack_allocator_pop_snapshot(v36);
          if (v35)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
          }
          swift_release();
          ++v6;
        }
        while (v6 != v33);
        sub_1B632F170(v38);
      }
    }
    return sub_1B632F170(v38);
  }
  return result;
}

uint64_t *sub_1B6640120(uint64_t a1)
{
  float v2 = *(float *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
  long long v3 = *(_OWORD *)(v1 + 40);
  v49[0] = *(_OWORD *)(v1 + 24);
  v49[1] = v3;
  uint64_t v50 = *(void *)(v1 + 56);
  sub_1B62C9DA8(a1, (uint64_t)v49, 0x200000000, v38);
  uint64_t result = (uint64_t *)sub_1B62CA210((uint64_t)v38, (uint64_t)v39, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v39[0])
  {
    if (v45 >= 1)
    {
      uint64_t v31 = v42;
      if (v42)
      {
        uint64_t v5 = v44;
        uint64_t v6 = v44[4];
        int v34 = *(unsigned __int8 *)(v43 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v46[0] = v39[0];
        v46[1] = v39[1];
        uint64_t v47 = v40;
        uint64_t v28 = (uint64_t)(v44 + 6);
        uint64_t v29 = v41;
        int8x16_t v27 = v44 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        uint64_t v30 = v6;
        do
        {
          uint64_t v9 = (unsigned int *)(v29 + 48 * v7);
          uint64_t v10 = *v9;
          uint64_t v12 = (uint64_t *)*((void *)v9 + 2);
          uint64_t v11 = *((void *)v9 + 3);
          uint64_t v13 = *((void *)v9 + 4);
          uint64_t v14 = *((void *)v9 + 5);
          uint64_t v33 = v8;
          uint64_t v36 = v9[1];
          if (v34)
          {
            uint64_t v15 = *(os_unfair_lock_s **)(v14 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v6);
          sub_1B62CA210(v28, (uint64_t)v48, &qword_1EB97DE20);
          uint64_t v16 = v5[4];
          uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(v14 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          void v5[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
          v5[7] = v17;
          v27[1] = 0;
          v27[2] = 0;
          void *v27 = 0;
          swift_release();
          uint64_t v18 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v12, v11, v13, (uint64_t)v5);
          uint64_t v19 = sub_1B62C9024((uint64_t)&type metadata for SineMoveAction, (uint64_t)&off_1F0F665C8, v12, v11, v13, (uint64_t)v5);
          float v20 = v2 + *(float *)(v32 + 16);
          *(float *)(v32 + 16) = v20;
          if (v10 == v36)
          {
            float32x4_t v21 = v35;
          }
          else
          {
            uint64_t v22 = v19 + 32 * v10 + 8;
            float32x4_t v23 = (float32x4_t *)(v18 + 16 * v10);
            uint64_t v24 = v36 - v10;
            __int32 v25 = v35.i32[3];
            do
            {
              __int32 v37 = v25;
              float32x4_t v21 = vmulq_n_f32(*(float32x4_t *)(v22 + 8), *(float *)(v22 - 8) * sinf((float)(v20 * *(float *)(v22 - 4)) + *(float *)v22));
              v21.i32[3] = v37;
              float32x4_t v26 = v21;
              v26.i32[3] = 1.0;
              *v23++ = v26;
              v22 += 32;
              __int32 v25 = v37;
              --v24;
            }
            while (v24);
          }
          float32x4_t v35 = v21;
          uint64_t v8 = v33;
          sub_1B6345178(v5, (unsigned __int16 **)v46, (uint64_t)v48);
          sub_1B634507C((char *)v14);
          uint64_t v6 = v30;
          ecs_stack_allocator_pop_snapshot(v30);
          if (v34)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
          }
          swift_release();
          ++v7;
        }
        while (v7 != v31);
        sub_1B632F170(v38);
      }
    }
    return sub_1B632F170(v38);
  }
  return result;
}

uint64_t sub_1B6640494()
{
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t *sub_1B66404D0(uint64_t a1)
{
  double v2 = *(double *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
  long long v3 = *(_OWORD *)(v1 + 32);
  v51[0] = *(_OWORD *)(v1 + 16);
  v51[1] = v3;
  uint64_t v52 = *(void *)(v1 + 48);
  sub_1B62C9DA8(a1, (uint64_t)v51, 0x200000000, v40);
  uint64_t result = (uint64_t *)sub_1B62CA210((uint64_t)v40, (uint64_t)v41, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v41[0])
  {
    if (v47 >= 1)
    {
      uint64_t v33 = v44;
      if (v44)
      {
        uint64_t v5 = v46;
        uint64_t v37 = v46[4];
        int v36 = *(unsigned __int8 *)(v45 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        float v6 = v2;
        v48[0] = v41[0];
        v48[1] = v41[1];
        uint64_t v49 = v42;
        uint64_t v31 = (uint64_t)(v46 + 6);
        uint64_t v32 = v43;
        uint64_t v30 = v46 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        do
        {
          uint64_t v9 = (unsigned int *)(v32 + 48 * v7);
          uint64_t v10 = *v9;
          uint64_t v11 = (uint64_t *)*((void *)v9 + 2);
          uint64_t v12 = *((void *)v9 + 3);
          uint64_t v14 = *((void *)v9 + 4);
          uint64_t v13 = *((void *)v9 + 5);
          uint64_t v35 = v8;
          uint64_t v38 = v9[1];
          if (v36)
          {
            uint64_t v15 = *(os_unfair_lock_s **)(v13 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v37);
          sub_1B62CA210(v31, (uint64_t)v50, &qword_1EB97DE20);
          uint64_t v16 = v5[4];
          uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(v13 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          void v5[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
          v5[7] = v17;
          v30[1] = 0;
          v30[2] = 0;
          *uint64_t v30 = 0;
          swift_release();
          uint64_t v18 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v11, v12, v14, (uint64_t)v5);
          uint64_t v19 = sub_1B62C9024((uint64_t)&type metadata for SineYAction, (uint64_t)&off_1F0F585D0, v11, v12, v14, (uint64_t)v5);
          if (v10 == v38)
          {
            uint64_t v8 = v35;
            long long v20 = v34;
          }
          else
          {
            float32x4_t v21 = (float *)(v19 + 12 * v10 + 8);
            uint64_t v22 = v38 - v10;
            float32x4_t v23 = (long long *)(v18 + 16 * v10);
            int v24 = HIDWORD(v34);
            uint64_t v8 = v35;
            do
            {
              int v39 = v24;
              float v25 = *(v21 - 2);
              float v26 = *(v21 - 1) * v6;
              float v27 = *v21;
              v21 += 3;
              float v28 = sinf(v26 + v27);
              long long v20 = *v23;
              HIDWORD(v20) = v39;
              long long v29 = v20;
              *((float *)&v29 + 1) = v25 * v28;
              HIDWORD(v29) = 1.0;
              *v23++ = v29;
              int v24 = v39;
              --v22;
            }
            while (v22);
          }
          long long v34 = v20;
          sub_1B6345178(v5, (unsigned __int16 **)v48, (uint64_t)v50);
          sub_1B634507C((char *)v13);
          ecs_stack_allocator_pop_snapshot(v37);
          if (v36)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
          }
          swift_release();
          ++v7;
        }
        while (v7 != v33);
        sub_1B632F170(v40);
      }
    }
    return sub_1B632F170(v40);
  }
  return result;
}

uint64_t type metadata accessor for SineYWaveSystem()
{
  return self;
}

uint64_t sub_1B6640848(uint64_t a1, uint64_t a2)
{
  return sub_1B63B484C(a1, a2, (void (*)(_OWORD *__return_ptr, uint64_t))sub_1B63A08C8);
}

const char *sub_1B6640860()
{
  return "SineY.Regular";
}

uint64_t sub_1B6640874(unint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  else
  {
    if (a2)
    {
      uint64_t v4 = (void *)sub_1B6E31C98();
      uint64_t v5 = v4;
      uint64_t v4[2] = a2;
      v4[4] = a1;
      if (a2 != 1)
      {
        void v4[5] = a1;
        uint64_t v6 = a2 - 2;
        if (v6)
        {
          uint64_t v7 = v4 + 6;
          do
          {
            sub_1B66456F8(a1);
            *v7++ = a1;
            --v6;
          }
          while (v6);
        }
        sub_1B66456F8(a1);
      }
    }
    else
    {
      sub_1B6645740(a1);
      return MEMORY[0x1E4FBC860];
    }
    return (uint64_t)v5;
  }
  return result;
}

uint64_t sub_1B6640960(unint64_t a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t result = sub_1B6E31C98();
  *(void *)(result + 16) = a2;
  uint64_t v5 = (unint64_t *)(result + 32);
  if (a2 < 4)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  v5 += a2 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v7 = vdupq_n_s64(a1);
  uint64_t v8 = (int64x2_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFFCLL;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 4;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1B6640A4C(unint64_t a1, int32x2_t a2)
{
  if ((a1 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
    return result;
  }
  if (!a1) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t result = sub_1B6E31C98();
  *(void *)(result + 16) = a1;
  uint64_t v4 = (__int32 *)(result + 32);
  if (a1 < 8)
  {
    unint64_t v5 = 0;
    __int32 v6 = a2.i32[0];
LABEL_9:
    unint64_t v10 = a1 - v5;
    do
    {
      *v4++ = v6;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v5 = a1 & 0xFFFFFFFFFFFFFFF8;
  v4 += a1 & 0xFFFFFFFFFFFFFFF8;
  __int32 v6 = a2.i32[0];
  int32x4_t v7 = vdupq_lane_s32(a2, 0);
  uint64_t v8 = (int32x4_t *)(result + 48);
  unint64_t v9 = a1 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v5 != a1) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1B6640B40(void *a1, uint64_t a2)
{
  if ((a2 & 0x8000000000000000) == 0)
  {
    if (a2)
    {
      sub_1B62D82E0(0, &qword_1EB97F650);
      uint64_t v4 = sub_1B6E31C98();
      *(void *)(v4 + 16) = a2;
      sub_1B62CA210((uint64_t)a1, v4 + 32, &qword_1EB97F650);
      if (a2 == 1) {
        return v4;
      }
      sub_1B62CA210((uint64_t)a1, v4 + 72, &qword_1EB97F650);
      uint64_t v5 = a2 - 2;
      if (a2 == 2)
      {
        __int32 v6 = sub_1B62C7CE8;
      }
      else
      {
        uint64_t v7 = v4 + 112;
        do
        {
          __int32 v6 = sub_1B62C7CE8;
          sub_1B66456A8(a1, (void (*)(void, void, void, void, void))sub_1B62C7CE8);
          sub_1B62CA210((uint64_t)a1, v7, &qword_1EB97F650);
          v7 += 40;
          --v5;
        }
        while (v5);
      }
    }
    else
    {
      __int32 v6 = sub_1B66456E4;
      uint64_t v4 = MEMORY[0x1E4FBC860];
    }
    sub_1B66456A8(a1, (void (*)(void, void, void, void, void))v6);
    return v4;
  }
  uint64_t result = sub_1B6E32BD8();
  __break(1u);
  return result;
}

uint64_t sub_1B6640CE4(unsigned int a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t result = sub_1B6E31C98();
  *(void *)(result + 16) = a2;
  uint64_t v5 = (unsigned int *)(result + 32);
  if (a2 < 8)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF8;
  v5 += a2 & 0xFFFFFFFFFFFFFFF8;
  int32x4_t v7 = vdupq_n_s32(a1);
  uint64_t v8 = (int32x4_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF8;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 8;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1B6640DD0(unsigned int a1, unint64_t a2)
{
  if ((a2 & 0x8000000000000000) != 0)
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
    return result;
  }
  if (!a2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t result = sub_1B6E31C98();
  *(void *)(result + 16) = a2;
  uint64_t v5 = (_WORD *)(result + 32);
  if (a2 < 0x10)
  {
    unint64_t v6 = 0;
LABEL_9:
    unint64_t v10 = a2 - v6;
    do
    {
      *v5++ = a1;
      --v10;
    }
    while (v10);
    return result;
  }
  unint64_t v6 = a2 & 0xFFFFFFFFFFFFFFF0;
  v5 += a2 & 0xFFFFFFFFFFFFFFF0;
  int16x8_t v7 = vdupq_n_s16(a1);
  uint64_t v8 = (int16x8_t *)(result + 48);
  unint64_t v9 = a2 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v8[-1] = v7;
    *uint64_t v8 = v7;
    v8 += 2;
    v9 -= 16;
  }
  while (v9);
  if (v6 != a2) {
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_1B6640EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < 0)
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  else
  {
    if (a3)
    {
      unint64_t v6 = (void *)sub_1B6E31C98();
      int16x8_t v7 = v6;
      uint64_t v6[2] = a3;
      v6[4] = a1;
      void v6[5] = a2;
      if (a3 != 1)
      {
        void v6[6] = a1;
        v6[7] = a2;
        uint64_t v8 = a3 - 2;
        if (v8)
        {
          unint64_t v9 = v6 + 9;
          do
          {
            *(v9 - 1) = a1;
            void *v9 = a2;
            swift_bridgeObjectRetain();
            v9 += 2;
            --v8;
          }
          while (v8);
        }
        swift_bridgeObjectRetain();
      }
    }
    else
    {
      swift_bridgeObjectRelease();
      return MEMORY[0x1E4FBC860];
    }
    return (uint64_t)v7;
  }
  return result;
}

uint64_t sub_1B6640FB8(uint64_t a1, __n128 a2)
{
  return sub_1B6641294(a1, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8], a2);
}

uint64_t sub_1B6640FD8(uint64_t a1, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  if (a1 < 0)
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  else
  {
    uint64_t v5 = a1;
    if (a1)
    {
      type metadata accessor for simd_float4x4(0);
      uint64_t result = sub_1B6E31C98();
      *(void *)(result + 16) = v5;
      uint64_t v7 = 32;
      do
      {
        uint64_t v8 = (__n128 *)(result + v7);
        *uint64_t v8 = a2;
        v8[1] = a3;
        void v8[2] = a4;
        v8[3] = a5;
        v7 += 64;
        --v5;
      }
      while (v5);
    }
    else
    {
      return MEMORY[0x1E4FBC860];
    }
  }
  return result;
}

uint64_t sub_1B66410A0(uint64_t a1, double a2)
{
  if (a1 < 0)
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  else if (a1)
  {
    sub_1B66458D8(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
    uint64_t result = sub_1B6E31C98();
    uint64_t v5 = 0;
    *(void *)(result + 16) = a1;
    do
    {
      uint64_t v6 = result + 8 * v5++;
      *(double *)(v6 + 32) = a2;
    }
    while (a1 != v5);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t sub_1B6641198(uint64_t a1, uint64_t a2)
{
  if (a2 < 0)
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  else
  {
    uint64_t v2 = a2;
    if (a2)
    {
      uint64_t result = sub_1B6E31C98();
      *(void *)(result + 16) = v2;
      uint64_t v5 = 32;
      do
      {
        uint64_t v6 = result + v5;
        long long v7 = *(_OWORD *)(a1 + 80);
        *(_OWORD *)(v6 + 64) = *(_OWORD *)(a1 + 64);
        *(_OWORD *)(v6 + 80) = v7;
        *(void *)(v6 + 96) = *(void *)(a1 + 96);
        long long v8 = *(_OWORD *)(a1 + 16);
        *(_OWORD *)uint64_t v6 = *(_OWORD *)a1;
        *(_OWORD *)(v6 + 16) = v8;
        long long v9 = *(_OWORD *)(a1 + 48);
        v5 += 112;
        *(_OWORD *)(v6 + 32) = *(_OWORD *)(a1 + 32);
        *(_OWORD *)(v6 + 48) = v9;
        --v2;
      }
      while (v2);
    }
    else
    {
      return MEMORY[0x1E4FBC860];
    }
  }
  return result;
}

uint64_t sub_1B6641268(int a1, size_t a2)
{
  return sub_1B62F7910(a1, a2);
}

uint64_t sub_1B6641274(uint64_t a1, __n128 a2)
{
  return sub_1B6641294(a1, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8], a2);
}

uint64_t sub_1B6641294(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t, uint64_t), __n128 a4)
{
  if (a1 < 0)
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  else if (a1)
  {
    sub_1B66458D8(0, a2, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], a3);
    uint64_t result = sub_1B6E31C98();
    uint64_t v6 = 0;
    *(void *)(result + 16) = a1;
    do
    {
      long long v7 = (__n128 *)(result + 16 * v6++);
      _OWORD v7[2] = a4;
    }
    while (a1 != v6);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t sub_1B6641370(uint64_t a1, double a2)
{
  if (a1 < 0)
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  else if (a1)
  {
    sub_1B66458D8(0, &qword_1EB980F00, (uint64_t (*)(void))sub_1B6645884, MEMORY[0x1E4FBC0F8], MEMORY[0x1E4FBC2F8]);
    uint64_t result = sub_1B6E31C98();
    uint64_t v5 = 0;
    *(void *)(result + 16) = a1;
    do
    {
      uint64_t v6 = result + 8 * v5++;
      *(double *)(v6 + 32) = a2;
    }
    while (a1 != v5);
  }
  else
  {
    return MEMORY[0x1E4FBC860];
  }
  return result;
}

uint64_t sub_1B6641468(uint64_t a1)
{
  long long v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + *(void *)(a1 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    long long v3 = sub_1B68C0B40(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v7 = v3[3] >> 1;
  }
  sub_1B66442F0((unint64_t)&v3[4 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1) {
    v3[2] += v9;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B6641518(uint64_t a1)
{
  long long v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + *(void *)(a1 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    long long v3 = sub_1B6335858(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v7 = v3[3] >> 1;
  }
  sub_1B66443A0((unint64_t)&v3[2 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1) {
    v3[2] += v9;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B66415C8(unint64_t a1)
{
  return sub_1B66415F8(a1, (void (*)(uint64_t, void, unint64_t))sub_1B6644450);
}

uint64_t sub_1B66415E0(unint64_t a1)
{
  return sub_1B66415F8(a1, (void (*)(uint64_t, void, unint64_t))sub_1B6644658);
}

uint64_t sub_1B66415F8(unint64_t a1, void (*a2)(uint64_t, void, unint64_t))
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v5 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  unint64_t v6 = *v2;
  if ((unint64_t)*v2 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v7 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
    unint64_t v6 = *v2;
  }
  else
  {
    uint64_t v7 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  uint64_t v8 = v7 + v5;
  int isUniquelyReferenced_nonNull_bridgeObject = swift_isUniquelyReferenced_nonNull_bridgeObject();
  *uint64_t v2 = v6;
  uint64_t v10 = 0;
  if (isUniquelyReferenced_nonNull_bridgeObject && (v6 & 0x8000000000000000) == 0 && (v6 & 0x4000000000000000) == 0)
  {
    uint64_t v11 = v6 & 0xFFFFFFFFFFFFFF8;
    if (v8 <= *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      goto LABEL_15;
    }
    uint64_t v10 = 1;
  }
  if (v6 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v12 = *(void *)((v6 & 0xFFFFFFFFFFFFFF8) + 0x10);
  }
  if (v12 <= v8) {
    uint64_t v12 = v8;
  }
  swift_bridgeObjectRetain();
  uint64_t v13 = MEMORY[0x1BA9B4590](v10, v12, 1, v6);
  swift_bridgeObjectRelease();
  *uint64_t v2 = v13;
  uint64_t v11 = v13 & 0xFFFFFFFFFFFFFF8;
LABEL_15:
  a2(v11 + 8 * *(void *)(v11 + 16) + 32, (*(void *)(v11 + 24) >> 1) - *(void *)(v11 + 16), a1);
  if (v14 >= 1) {
    *(void *)((*v2 & 0xFFFFFFFFFFFFFF8) + 0x10) += v14;
  }
  swift_bridgeObjectRelease();

  return sub_1B6E31C48();
}

uint64_t sub_1B66417AC(uint64_t a1)
{
  long long v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + *(void *)(a1 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    long long v3 = sub_1B68C13D0(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v7 = v3[3] >> 1;
  }
  sub_1B6644860((unint64_t)&v3[6 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1) {
    v3[2] += v9;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B6641860(unint64_t a1)
{
  return sub_1B66415F8(a1, (void (*)(uint64_t, void, unint64_t))sub_1B6644B1C);
}

uint64_t sub_1B6641878(uint64_t a1)
{
  long long v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + *(void *)(a1 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    long long v3 = sub_1B68C167C(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v7 = v3[3] >> 1;
  }
  sub_1B6644D24((unint64_t)&v3[4 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1) {
    v3[2] += v9;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B6641928(uint64_t a1)
{
  long long v3 = *v1;
  uint64_t v4 = *((void *)*v1 + 2);
  uint64_t v5 = v4 + *(void *)(a1 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v7 = *((void *)v3 + 3) >> 1, v7 < v5))
  {
    if (v4 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    long long v3 = sub_1B68C1AE0(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v7 = *((void *)v3 + 3) >> 1;
  }
  sub_1B6644DEC(&v3[24 * *((void *)v3 + 2) + 32], v7 - *((void *)v3 + 2), a1);
  if (v9 >= 1) {
    *((void *)v3 + 2) += v9;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B66419DC(uint64_t a1)
{
  long long v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + *(void *)(a1 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    long long v3 = sub_1B68C26CC(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v7 = v3[3] >> 1;
  }
  sub_1B6644E94((unint64_t)&v3[3 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1) {
    v3[2] += v9;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B6641A90(uint64_t a1)
{
  return sub_1B6641ECC(a1, (uint64_t (*)(void))sub_1B68C2A54, (unint64_t *)&qword_1EB980110);
}

uint64_t sub_1B6641AB8(uint64_t a1)
{
  return sub_1B6641D10(a1, (uint64_t (*)(void))sub_1B68C2A40);
}

uint64_t sub_1B6641AD8(uint64_t a1)
{
  long long v3 = *(void **)v1;
  int64_t v4 = *(void *)(*(void *)v1 + 16);
  int64_t v5 = v4 + *(void *)(a1 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (int64_t v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5) {
      int64_t v8 = v5;
    }
    else {
      int64_t v8 = v4;
    }
    long long v3 = sub_1B68C0FD8(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    int64_t v7 = v3[3] >> 1;
  }
  sub_1B6644F48((unint64_t)&v3[4 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1) {
    v3[2] += v9;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B6641B88(uint64_t a1)
{
  long long v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + *(void *)(a1 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    long long v3 = sub_1B68C33D4(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v7 = v3[3] >> 1;
  }
  sub_1B6644FF8((unint64_t)&v3[5 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1) {
    v3[2] += v9;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B6641C3C(uint64_t a1)
{
  long long v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + *(void *)(a1 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    long long v3 = sub_1B68C3720(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v7 = v3[3] >> 1;
  }
  sub_1B66450AC((unint64_t)&v3[6 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1) {
    v3[2] += v9;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B6641CF0(uint64_t a1)
{
  return sub_1B6641D10(a1, (uint64_t (*)(void))sub_1B68C3E20);
}

uint64_t sub_1B6641D10(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v5 = *v2;
  uint64_t v6 = *(void *)(*v2 + 16) + *(void *)(a1 + 16);
  if (!swift_isUniquelyReferenced_nonNull_native() || (uint64_t v7 = *(void *)(v5 + 24) >> 1, v7 < v6))
  {
    uint64_t v5 = a2();
    uint64_t v7 = *(void *)(v5 + 24) >> 1;
  }
  sub_1B6645160(v5 + 8 * *(void *)(v5 + 16) + 32, v7 - *(void *)(v5 + 16), a1);
  if (v8 >= 1) {
    *(void *)(v5 + 16) += v8;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v2 = v5;
  return result;
}

uint64_t sub_1B6641DD8(uint64_t a1)
{
  long long v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + *(void *)(a1 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    long long v3 = sub_1B68C407C(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v7 = v3[3] >> 1;
  }
  sub_1B6645208((unint64_t)&v3[7 * v3[2] + 4], v7 - v3[2], a1);
  if (v9 >= 1) {
    v3[2] += v9;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B6641E8C(unint64_t a1)
{
  return sub_1B66415F8(a1, (void (*)(uint64_t, void, unint64_t))sub_1B66452BC);
}

uint64_t sub_1B6641EA4(uint64_t a1)
{
  return sub_1B6641ECC(a1, (uint64_t (*)(void))sub_1B68C3CE8, (unint64_t *)&qword_1E9DCDA48);
}

uint64_t sub_1B6641ECC(uint64_t a1, uint64_t (*a2)(void), unint64_t *a3)
{
  uint64_t v7 = *v3;
  uint64_t v8 = *(void *)(*v3 + 16) + *(void *)(a1 + 16);
  if (!swift_isUniquelyReferenced_nonNull_native() || (uint64_t v9 = *(void *)(v7 + 24) >> 1, v9 < v8))
  {
    uint64_t v7 = a2();
    uint64_t v9 = *(void *)(v7 + 24) >> 1;
  }
  sub_1B66454C4(v7 + 16 * *(void *)(v7 + 16) + 32, v9 - *(void *)(v7 + 16), a1, a3);
  if (v10 >= 1) {
    *(void *)(v7 + 16) += v10;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *long long v3 = v7;
  return result;
}

uint64_t sub_1B6641F9C(uint64_t a1, int32x2_t a2)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 16);
  uint64_t v6 = v5 + a1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  if (!result || (uint64_t v8 = *(void *)(v4 + 24) >> 1, v8 < v6))
  {
    if (v5 <= v6) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = v5;
    }
    uint64_t result = (uint64_t)sub_1B6397840(result, v9, 1, (char *)v4);
    uint64_t v4 = result;
    uint64_t v8 = *(void *)(result + 24) >> 1;
  }
  int64_t v10 = *(void *)(v4 + 16);
  uint64_t v11 = v8 - v10;
  __int32 v12 = a2.i32[0];
  if (v8 == v10)
  {
    if (!a1) {
      goto LABEL_64;
    }
    uint64_t v16 = 0;
    goto LABEL_17;
  }
  if (!a1) {
    goto LABEL_64;
  }
  uint64_t v13 = v4 + 4 * v10;
  *(_DWORD *)(v13 + 32) = a2.i32[0];
  uint64_t v14 = (_DWORD *)(v13 + 32);
  if (v11 == 1 || a1 == 1)
  {
    uint64_t v16 = 1;
LABEL_62:
    v10 += v16;
    *(void *)(v4 + 16) = v10;
    goto LABEL_63;
  }
  v14[1] = a2.i32[0];
  if (v11 == 2 || a1 == 2)
  {
    uint64_t v16 = 2;
    goto LABEL_62;
  }
  _OWORD v14[2] = a2.i32[0];
  if (v11 == 3 || a1 == 3)
  {
    uint64_t v16 = 3;
    goto LABEL_62;
  }
  long long v29 = v14 + 3;
  uint64_t v30 = a1 - 4;
  if (a1 - 4 >= (unint64_t)(v11 - 4)) {
    uint64_t v30 = v11 - 4;
  }
  unint64_t v31 = v30 + 1;
  if (v31 >= 9)
  {
    uint64_t v33 = v31 & 7;
    if ((v31 & 7) == 0) {
      uint64_t v33 = 8;
    }
    unint64_t v34 = v31 - v33;
    v29 += v34;
    uint64_t v32 = v34 + 3;
    int32x4_t v35 = vdupq_lane_s32(a2, 0);
    int v36 = (int32x4_t *)(v4 + 4 * v10 + 60);
    do
    {
      v36[-1] = v35;
      *int v36 = v35;
      v36 += 2;
      v34 -= 8;
    }
    while (v34);
  }
  else
  {
    uint64_t v32 = 3;
  }
  int64_t v37 = ~v10 + v8;
  while (1)
  {
    *long long v29 = a2.i32[0];
    if (v37 == v32) {
      break;
    }
    ++v32;
    ++v29;
    if (a1 == v32)
    {
      uint64_t v16 = a1;
      goto LABEL_61;
    }
  }
  uint64_t v16 = v11;
LABEL_61:
  if (v16 > 0) {
    goto LABEL_62;
  }
LABEL_63:
  if (v16 == v11 && v16 != a1)
  {
LABEL_17:
    uint64_t v17 = v16 + 1;
    int32x4_t v18 = vdupq_lane_s32(a2, 0);
    while (1)
    {
      unint64_t v19 = *(void *)(v4 + 24);
      int64_t v20 = v19 >> 1;
      int64_t v21 = v10 + 1;
      if ((uint64_t)(v19 >> 1) < v10 + 1)
      {
        int32x4_t v38 = v18;
        uint64_t result = (uint64_t)sub_1B6397840(v19 > 1, v10 + 1, 1, (char *)v4);
        int32x4_t v18 = v38;
        __int32 v12 = a2.i32[0];
        uint64_t v4 = result;
        int64_t v20 = *(void *)(result + 24) >> 1;
        if (v10 >= v20) {
          goto LABEL_18;
        }
LABEL_21:
        *(_DWORD *)(v4 + 32 + 4 * v10) = v12;
        if (v17 == a1)
        {
LABEL_35:
          *(void *)(v4 + 16) = v21;
          break;
        }
        unint64_t v22 = a1 + ~v17;
        if (v22 >= v20 + ~v10) {
          unint64_t v22 = v20 + ~v10;
        }
        unint64_t v23 = v22 + 1;
        if (v23 > 8)
        {
          uint64_t v24 = v23 & 7;
          if ((v23 & 7) == 0) {
            uint64_t v24 = 8;
          }
          unint64_t v25 = v23 - v24;
          v17 += v25;
          v21 += v25;
          float v26 = (int32x4_t *)(v4 + 4 * v10 + 52);
          do
          {
            v26[-1] = v18;
            int32x4_t *v26 = v18;
            v26 += 2;
            v25 -= 8;
          }
          while (v25);
        }
        while (1)
        {
          ++v17;
          if (v20 == v21) {
            break;
          }
          *(_DWORD *)(v4 + 32 + 4 * v21++) = v12;
          if (a1 == v17) {
            goto LABEL_35;
          }
        }
        int64_t v10 = v20;
        *(void *)(v4 + 16) = v20;
      }
      else
      {
        if (v10 < v20) {
          goto LABEL_21;
        }
LABEL_18:
        *(void *)(v4 + 16) = v10;
      }
    }
  }
LABEL_64:
  *uint64_t v2 = v4;
  return result;
}

uint64_t sub_1B6642244(uint64_t a1)
{
  long long v3 = *(void **)v1;
  uint64_t v4 = *(void *)(*(void *)v1 + 16);
  uint64_t v5 = v4 + *(void *)(a1 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v7 = v3[3] >> 1, v7 < v5))
  {
    if (v4 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    long long v3 = sub_1B6335858(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v7 = v3[3] >> 1;
  }
  uint64_t v9 = v3[2];
  uint64_t v10 = v7 - v9;
  uint64_t v11 = sub_1B6643F08(&v35, &v3[2 * v9 + 4], v7 - v9, a1);
  if (v11 >= 1) {
    v3[2] += v11;
  }
  if (v11 != v10) {
    goto LABEL_10;
  }
  int64_t v13 = v3[2];
  uint64_t v14 = v35;
  uint64_t v34 = v36;
  uint64_t v15 = v38;
  if (v39)
  {
    unint64_t v16 = (v39 - 1) & v39;
    unint64_t v17 = __clz(__rbit64(v39)) | (v38 << 6);
    int64_t v33 = (unint64_t)(v37 + 64) >> 6;
  }
  else
  {
    uint64_t v30 = v38 + 1;
    int64_t v33 = (unint64_t)(v37 + 64) >> 6;
    if (v38 + 1 >= v33) {
      goto LABEL_10;
    }
    unint64_t v31 = *(void *)(v36 + 8 * v30);
    if (!v31)
    {
      uint64_t v30 = v38 + 2;
      if (v38 + 2 >= v33) {
        goto LABEL_10;
      }
      unint64_t v31 = *(void *)(v36 + 8 * v30);
      if (!v31)
      {
        uint64_t v30 = v38 + 3;
        if (v38 + 3 >= v33) {
          goto LABEL_10;
        }
        unint64_t v31 = *(void *)(v36 + 8 * v30);
        if (!v31)
        {
          uint64_t v30 = v38 + 4;
          if (v38 + 4 >= v33) {
            goto LABEL_10;
          }
          unint64_t v31 = *(void *)(v36 + 8 * v30);
          if (!v31)
          {
            uint64_t v30 = v38 + 5;
            if (v38 + 5 >= v33) {
              goto LABEL_10;
            }
            unint64_t v31 = *(void *)(v36 + 8 * v30);
            if (!v31)
            {
              uint64_t v32 = v38 + 6;
              do
              {
                if (v33 == v32) {
                  goto LABEL_10;
                }
                unint64_t v31 = *(void *)(v36 + 8 * v32++);
              }
              while (!v31);
              uint64_t v30 = v32 - 1;
            }
          }
        }
      }
    }
    unint64_t v16 = (v31 - 1) & v31;
    unint64_t v17 = __clz(__rbit64(v31)) + (v30 << 6);
    uint64_t v15 = v30;
  }
  int32x4_t v18 = (uint64_t *)(*(void *)(v35 + 48) + 16 * v17);
  uint64_t v20 = *v18;
  uint64_t v19 = v18[1];
  swift_bridgeObjectRetain();
  while (1)
  {
    unint64_t v21 = v3[3];
    int64_t v22 = v21 >> 1;
    if ((uint64_t)(v21 >> 1) < v13 + 1) {
      break;
    }
    if (v13 < v22) {
      goto LABEL_18;
    }
LABEL_15:
    _OWORD v3[2] = v13;
  }
  long long v3 = sub_1B6335858(v21 > 1, v13 + 1, 1, v3);
  int64_t v22 = v3[3] >> 1;
  if (v13 >= v22) {
    goto LABEL_15;
  }
  while (1)
  {
LABEL_18:
    unint64_t v23 = &v3[2 * v13 + 4];
    *unint64_t v23 = v20;
    v23[1] = v19;
    ++v13;
    if (v16)
    {
      unint64_t v24 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v25 = v24 | (v15 << 6);
      goto LABEL_35;
    }
    uint64_t v26 = v15 + 1;
    if (v15 + 1 >= v33) {
      goto LABEL_39;
    }
    unint64_t v27 = *(void *)(v34 + 8 * v26);
    if (!v27)
    {
      uint64_t v26 = v15 + 2;
      if (v15 + 2 >= v33) {
        goto LABEL_39;
      }
      unint64_t v27 = *(void *)(v34 + 8 * v26);
      if (!v27)
      {
        uint64_t v26 = v15 + 3;
        if (v15 + 3 >= v33) {
          goto LABEL_39;
        }
        unint64_t v27 = *(void *)(v34 + 8 * v26);
        if (!v27)
        {
          uint64_t v26 = v15 + 4;
          if (v15 + 4 >= v33) {
            goto LABEL_39;
          }
          unint64_t v27 = *(void *)(v34 + 8 * v26);
          if (!v27)
          {
            uint64_t v26 = v15 + 5;
            if (v15 + 5 >= v33) {
              goto LABEL_39;
            }
            unint64_t v27 = *(void *)(v34 + 8 * v26);
            if (!v27) {
              break;
            }
          }
        }
      }
    }
LABEL_34:
    unint64_t v16 = (v27 - 1) & v27;
    unint64_t v25 = __clz(__rbit64(v27)) + (v26 << 6);
    uint64_t v15 = v26;
LABEL_35:
    long long v29 = (uint64_t *)(*(void *)(v14 + 48) + 16 * v25);
    uint64_t v20 = *v29;
    uint64_t v19 = v29[1];
    if (v13 >= v22)
    {
      swift_bridgeObjectRetain();
      goto LABEL_15;
    }
    swift_bridgeObjectRetain();
  }
  uint64_t v28 = v15 + 6;
  while (v33 != v28)
  {
    unint64_t v27 = *(void *)(v34 + 8 * v28++);
    if (v27)
    {
      uint64_t v26 = v28 - 1;
      goto LABEL_34;
    }
  }
LABEL_39:
  _OWORD v3[2] = v13;
LABEL_10:
  uint64_t result = sub_1B62BB588();
  *(void *)uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B66425E0(uint64_t a1)
{
  long long v3 = *v1;
  uint64_t v4 = *((void *)*v1 + 2);
  uint64_t v5 = v4 + *(void *)(a1 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || (uint64_t v7 = *((void *)v3 + 3) >> 1, v7 < v5))
  {
    if (v4 <= v5) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v4;
    }
    long long v3 = sub_1B633F784(isUniquelyReferenced_nonNull_native, v8, 1, v3);
    uint64_t v7 = *((void *)v3 + 3) >> 1;
  }
  uint64_t v9 = *((void *)v3 + 2);
  uint64_t v10 = v7 - v9;
  uint64_t v11 = sub_1B66439D8(&v44, &v3[8 * v9 + 32], v7 - v9, a1);
  if (v11 >= 1) {
    *((void *)v3 + 2) += v11;
  }
  if (v11 != v10) {
    goto LABEL_10;
  }
  int64_t v13 = *((void *)v3 + 2);
  uint64_t v14 = v44;
  uint64_t v15 = v45;
  uint64_t v16 = v46;
  uint64_t v17 = v47;
  if (v48)
  {
    unint64_t v18 = (v48 - 1) & v48;
    unint64_t v19 = __clz(__rbit64(v48)) | (v47 << 6);
    int64_t v20 = (unint64_t)(v46 + 64) >> 6;
  }
  else
  {
    int64_t v20 = (unint64_t)(v46 + 64) >> 6;
    uint64_t v37 = v47 + 1;
    if (v47 + 1 >= v20) {
      goto LABEL_10;
    }
    unint64_t v38 = *(void *)(v45 + 8 * v37);
    if (!v38)
    {
      uint64_t v37 = v47 + 2;
      if (v47 + 2 >= v20) {
        goto LABEL_10;
      }
      unint64_t v38 = *(void *)(v45 + 8 * v37);
      if (!v38)
      {
        uint64_t v37 = v47 + 3;
        if (v47 + 3 >= v20) {
          goto LABEL_10;
        }
        uint64_t v15 = v45;
        unint64_t v38 = *(void *)(v45 + 8 * v37);
        uint64_t v16 = v46;
        uint64_t v14 = v44;
        if (!v38)
        {
          uint64_t v37 = v47 + 4;
          if (v47 + 4 >= v20) {
            goto LABEL_10;
          }
          uint64_t v15 = v45;
          unint64_t v38 = *(void *)(v45 + 8 * v37);
          uint64_t v16 = v46;
          uint64_t v14 = v44;
          if (!v38)
          {
            uint64_t v37 = v47 + 5;
            if (v47 + 5 >= v20) {
              goto LABEL_10;
            }
            uint64_t v15 = v45;
            unint64_t v38 = *(void *)(v45 + 8 * v37);
            uint64_t v16 = v46;
            uint64_t v14 = v44;
            if (!v38)
            {
              uint64_t v39 = v47 + 6;
              do
              {
                if (v20 == v39) {
                  goto LABEL_10;
                }
                unint64_t v38 = *(void *)(v45 + 8 * v39++);
              }
              while (!v38);
              uint64_t v37 = v39 - 1;
              uint64_t v16 = v46;
              uint64_t v15 = v45;
              uint64_t v14 = v44;
            }
          }
        }
      }
    }
    unint64_t v18 = (v38 - 1) & v38;
    unint64_t v19 = __clz(__rbit64(v38)) + (v37 << 6);
    uint64_t v17 = v37;
  }
  unint64_t v21 = *(void *)(*(void *)(v14 + 56) + 8 * v19);
  while (1)
  {
    unint64_t v22 = *((void *)v3 + 3);
    int64_t v23 = v22 >> 1;
    if ((uint64_t)(v22 >> 1) < v13 + 1) {
      break;
    }
    if (v13 < v23) {
      goto LABEL_18;
    }
LABEL_15:
    *((void *)v3 + 2) = v13;
  }
  uint64_t v42 = v15;
  uint64_t v43 = v14;
  uint64_t v40 = v17;
  uint64_t v41 = v16;
  uint64_t v34 = v3;
  unint64_t v35 = v18;
  uint64_t v36 = sub_1B633F784(v22 > 1, v13 + 1, 1, v34);
  unint64_t v18 = v35;
  uint64_t v17 = v40;
  uint64_t v16 = v41;
  long long v3 = v36;
  uint64_t v15 = v42;
  uint64_t v14 = v43;
  int64_t v23 = *((void *)v3 + 3) >> 1;
  if (v13 >= v23) {
    goto LABEL_15;
  }
LABEL_18:
  unint64_t v24 = HIDWORD(v21);
  LODWORD(v25) = v21;
  while (1)
  {
    long long v29 = &v3[8 * v13 + 32];
    *(_DWORD *)long long v29 = v25;
    *((_DWORD *)v29 + 1) = v24;
    ++v13;
    if (!v18) {
      break;
    }
    unint64_t v26 = __clz(__rbit64(v18));
    v18 &= v18 - 1;
    unint64_t v27 = v26 | (v17 << 6);
LABEL_20:
    uint64_t v28 = (unsigned int *)(*(void *)(v14 + 56) + 8 * v27);
    uint64_t v25 = *v28;
    unint64_t v24 = v28[1];
    if (v13 >= v23)
    {
      unint64_t v21 = v25 | (v24 << 32);
      goto LABEL_15;
    }
  }
  uint64_t v30 = v17 + 1;
  if (v17 + 1 >= v20) {
    goto LABEL_39;
  }
  unint64_t v31 = *(void *)(v15 + 8 * v30);
  if (v31) {
    goto LABEL_36;
  }
  uint64_t v30 = v17 + 2;
  if (v17 + 2 >= v20) {
    goto LABEL_39;
  }
  unint64_t v31 = *(void *)(v15 + 8 * v30);
  if (v31) {
    goto LABEL_36;
  }
  uint64_t v30 = v17 + 3;
  if (v17 + 3 >= v20) {
    goto LABEL_39;
  }
  unint64_t v31 = *(void *)(v15 + 8 * v30);
  if (v31) {
    goto LABEL_36;
  }
  uint64_t v30 = v17 + 4;
  if (v17 + 4 >= v20) {
    goto LABEL_39;
  }
  unint64_t v31 = *(void *)(v15 + 8 * v30);
  if (v31) {
    goto LABEL_36;
  }
  uint64_t v30 = v17 + 5;
  if (v17 + 5 >= v20) {
    goto LABEL_39;
  }
  unint64_t v31 = *(void *)(v15 + 8 * v30);
  if (v31)
  {
LABEL_36:
    unint64_t v33 = __clz(__rbit64(v31));
    unint64_t v18 = (v31 - 1) & v31;
    unint64_t v27 = v33 + (v30 << 6);
    uint64_t v17 = v30;
    goto LABEL_20;
  }
  uint64_t v32 = v17 + 6;
  while (v20 != v32)
  {
    unint64_t v31 = *(void *)(v15 + 8 * v32++);
    if (v31)
    {
      uint64_t v30 = v32 - 1;
      goto LABEL_36;
    }
  }
LABEL_39:
  *((void *)v3 + 2) = v13;
LABEL_10:
  uint64_t result = sub_1B62BB588();
  *uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B6642968(uint64_t a1)
{
  unint64_t v3 = *v1;
  uint64_t v4 = *(void *)(*v1 + 16);
  uint64_t v5 = v4 + *(void *)(a1 + 16);
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if (!isUniquelyReferenced_nonNull_native || v5 > *(void *)(v3 + 24) >> 1)
  {
    if (v4 <= v5) {
      uint64_t v7 = v5;
    }
    else {
      uint64_t v7 = v4;
    }
    unint64_t v3 = sub_1B68C6CEC(isUniquelyReferenced_nonNull_native, v7, 1, v3);
  }
  uint64_t v8 = *(void *)(v3 + 16);
  uint64_t v9 = *(void *)(type metadata accessor for EdgeCoder(0) - 8);
  sub_1B6645594(v3+ ((*(unsigned __int8 *)(v9 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))+ *(void *)(v9 + 72) * v8, (*(void *)(v3 + 24) >> 1) - v8, a1);
  if (v10 >= 1) {
    *(void *)(v3 + 16) += v10;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v1 = v3;
  return result;
}

uint64_t sub_1B6642A68(uint64_t a1, uint64_t a2)
{
  return sub_1B62C9024((uint64_t)&type metadata for Orientation, (uint64_t)&off_1F0F560A8, *(uint64_t **)(a2 + 88), *(void *)(a2 + 96), *(void *)(a2 + 104), *(void *)(a2 + 16));
}

uint64_t sub_1B6642ACC(uint64_t a1, uint64_t a2)
{
  return sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, *(uint64_t **)(a2 + 88), *(void *)(a2 + 96), *(void *)(a2 + 104), *(void *)(a2 + 16));
}

uint64_t sub_1B6642B30(uint64_t a1, uint64_t a2)
{
  return sub_1B6642BA8(a1, a2, (unint64_t *)&unk_1EB97E740, (void (*)(uint64_t))type metadata accessor for SimpleScript);
}

uint64_t sub_1B6642B6C(uint64_t a1, uint64_t a2)
{
  return sub_1B6642BA8(a1, a2, (unint64_t *)&unk_1EB97E720, (void (*)(uint64_t))type metadata accessor for GraphScript);
}

uint64_t sub_1B6642BA8(uint64_t a1, uint64_t a2, unint64_t *a3, void (*a4)(uint64_t))
{
  sub_1B6645940(0, a3, a4);
  return sub_1B62C9024(v5, (uint64_t)&off_1F0F61BF0, *(uint64_t **)(a2 + 88), *(void *)(a2 + 96), *(void *)(a2 + 104), *(void *)(a2 + 16));
}

uint64_t sub_1B6642C38(uint64_t a1, uint64_t a2)
{
  return sub_1B6642BA8(a1, a2, &qword_1EB981070, (void (*)(uint64_t))type metadata accessor for TriggerScript);
}

uint64_t sub_1B6642C74(uint64_t a1, uint64_t a2)
{
  return sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, *(uint64_t **)(a2 + 88), *(void *)(a2 + 96), *(void *)(a2 + 104), *(void *)(a2 + 16));
}

uint64_t sub_1B6642CD8(uint64_t a1, uint64_t a2)
{
  return sub_1B6642D0C(a1, a2, type metadata accessor for ShaderScript, (uint64_t)&off_1F0F5C050);
}

uint64_t sub_1B6642D0C(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v6 = a3(0);
  return sub_1B62C9024(v6, a4, *(uint64_t **)(a2 + 88), *(void *)(a2 + 96), *(void *)(a2 + 104), *(void *)(a2 + 16));
}

uint64_t sub_1B6642D9C(uint64_t a1, uint64_t a2)
{
  return sub_1B62C9024((uint64_t)&type metadata for Scale, (uint64_t)&off_1F0F9F508, *(uint64_t **)(a2 + 88), *(void *)(a2 + 96), *(void *)(a2 + 104), *(void *)(a2 + 16));
}

uint64_t sub_1B6642E00(uint64_t a1, uint64_t a2)
{
  return sub_1B6642D0C(a1, a2, type metadata accessor for MovieRuntime, (uint64_t)&off_1F0F5A998);
}

uint64_t sub_1B6642E34(uint64_t a1, uint64_t a2)
{
  return sub_1B6642D0C(a1, a2, type metadata accessor for AudioPlayerComponent, (uint64_t)&off_1F0F7FC88);
}

uint64_t sub_1B6642E68(uint64_t a1, uint64_t a2)
{
  return sub_1B6642BA8(a1, a2, &qword_1EB97E710, (void (*)(uint64_t))type metadata accessor for ParticleUpdateScript);
}

uint64_t sub_1B6642EA4(uint64_t a1, uint64_t a2)
{
  return sub_1B6642BA8(a1, a2, &qword_1EB97E700, (void (*)(uint64_t))type metadata accessor for ParticleInitScript);
}

uint64_t sub_1B6642EE0(uint64_t a1, uint64_t a2)
{
  return sub_1B6642BA8(a1, a2, (unint64_t *)&unk_1EB97E750, (void (*)(uint64_t))type metadata accessor for EmitterScript);
}

uint64_t sub_1B6642F1C(uint64_t a1, uint64_t a2)
{
  return sub_1B6642BA8(a1, a2, (unint64_t *)&qword_1EB981060, (void (*)(uint64_t))type metadata accessor for MetalFunctionScript);
}

uint64_t sub_1B6642F58(uint64_t a1, uint64_t a2)
{
  return sub_1B6642D0C(a1, a2, (uint64_t (*)(void))type metadata accessor for SDFFileAsset, (uint64_t)&off_1F0F5B430);
}

uint64_t sub_1B6642F8C(uint64_t a1, uint64_t a2)
{
  return sub_1B6642D0C(a1, a2, type metadata accessor for SceneKitRenderer, (uint64_t)&off_1F0F6F3D0);
}

unint64_t sub_1B6642FC0()
{
  unint64_t result = qword_1EB980000;
  if (!qword_1EB980000)
  {
    sub_1B6642FFC();
    unint64_t result = swift_getExistentialMetatypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB980000);
  }
  return result;
}

unint64_t sub_1B6642FFC()
{
  unint64_t result = qword_1EB97FFF0;
  if (!qword_1EB97FFF0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB97FFF0);
  }
  return result;
}

uint64_t sub_1B6643054(void *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  if (!a2) {
    goto LABEL_9;
  }
  if (!a3)
  {
LABEL_8:
    uint64_t v5 = a3;
    goto LABEL_10;
  }
  if (!a4)
  {
LABEL_9:
    uint64_t v5 = 0;
    goto LABEL_10;
  }
  uint64_t v4 = -a4 & a4;
  a4 ^= v4;
  *a2 = v4;
  if (a3 == 1) {
    goto LABEL_8;
  }
  uint64_t v5 = 1;
  while (a4)
  {
    uint64_t v6 = a4 & -a4;
    a2[v5] = v6;
    a4 ^= v6;
    if (a3 == ++v5) {
      goto LABEL_8;
    }
  }
LABEL_10:
  *a1 = a4;
  return v5;
}

uint64_t sub_1B66430B8(void *a1, int64_t *a2, uint64_t a3)
{
  if (!a2)
  {
    a3 = 0;
    goto LABEL_20;
  }
  if (!a3)
  {
LABEL_20:
    int64_t v6 = -1;
    goto LABEL_21;
  }
  uint64_t v4 = *(void *)(v3 + 24);
  if (v4 < 1)
  {
    int64_t v6 = 0;
    a3 = 0;
  }
  else
  {
    uint64_t v5 = 0;
    int64_t v6 = 0;
    uint64_t v7 = 0;
    char v8 = 0;
    uint64_t v9 = *(void **)(v3 + 32);
    uint64_t v10 = 1;
    uint64_t v11 = v9;
    while (1)
    {
      unint64_t v12 = *v11 >> v8;
      if (v12)
      {
        v6 += __clz(__rbit64(v12));
      }
      else
      {
        uint64_t v13 = v7 + 1;
        if (v7 + 1 >= v4) {
          goto LABEL_23;
        }
        unint64_t v14 = v9[v13];
        if (!v14)
        {
          uint64_t v13 = v7 + 2;
          if (v7 + 2 >= v4) {
            goto LABEL_23;
          }
          unint64_t v14 = v9[v13];
          if (!v14)
          {
            uint64_t v15 = v7 + 3;
            while (v4 != v15)
            {
              unint64_t v14 = v9[v15++];
              if (v14)
              {
                uint64_t v13 = v15 - 1;
                goto LABEL_15;
              }
            }
LABEL_23:
            a3 = v5;
            goto LABEL_21;
          }
        }
LABEL_15:
        int64_t v6 = __clz(__rbit64(v14)) + (v13 << 6);
      }
      *a2 = v6;
      if (v10 == a3) {
        goto LABEL_21;
      }
      uint64_t v7 = ++v6 >> 6;
      uint64_t v4 = *(void *)(v3 + 24);
      if (v6 >> 6 >= v4) {
        break;
      }
      char v8 = v6 & 0x3F;
      uint64_t v9 = *(void **)(v3 + 32);
      uint64_t v11 = &v9[v7];
      ++a2;
      uint64_t v5 = v10++;
    }
    a3 = v10;
  }
LABEL_21:
  *a1 = v3;
  a1[1] = v6;
  return a3;
}

uint64_t sub_1B66431C4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v32 = a4 + 64;
  uint64_t v5 = -1 << *(unsigned char *)(a4 + 32);
  if (-v5 < 64) {
    uint64_t v6 = ~(-1 << -(char)v5);
  }
  else {
    uint64_t v6 = -1;
  }
  unint64_t v7 = v6 & *(void *)(a4 + 64);
  if (!a2)
  {
    unint64_t v11 = 0;
    uint64_t v10 = 0;
    goto LABEL_33;
  }
  if (!a3)
  {
    unint64_t v11 = 0;
    uint64_t v10 = 0;
    goto LABEL_33;
  }
  uint64_t v9 = a2;
  uint64_t v29 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v30 = a1;
  uint64_t v10 = 0;
  unint64_t v11 = 0;
  unint64_t v12 = (unint64_t)(63 - v5) >> 6;
  int64_t v31 = v12;
  unint64_t v28 = v12 - 6;
  unint64_t v26 = v12 - 1;
  uint64_t v27 = a4 + 112;
  if (!v7) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v13 = __clz(__rbit64(v7));
  v7 &= v7 - 1;
  unint64_t v14 = v13 | (v11 << 6);
  while (1)
  {
    ++v10;
    unint64_t v18 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v14);
    uint64_t v20 = *v18;
    uint64_t v19 = v18[1];
    sub_1B66459A4(*(void *)(a4 + 56) + 88 * v14, (uint64_t)v34);
    *(void *)&long long v33 = v20;
    *((void *)&v33 + 1) = v19;
    long long v42 = v35;
    long long v43 = v36;
    uint64_t v21 = v37;
    uint64_t v44 = v37;
    long long v40 = v34[1];
    long long v41 = v34[2];
    long long v38 = v33;
    long long v39 = v34[0];
    long long v22 = v36;
    *(_OWORD *)(v9 + 64) = v35;
    *(_OWORD *)(v9 + 80) = v22;
    *(void *)(v9 + 96) = v21;
    long long v23 = v39;
    *(_OWORD *)uint64_t v9 = v38;
    *(_OWORD *)(v9 + 16) = v23;
    long long v24 = v41;
    *(_OWORD *)(v9 + 32) = v40;
    *(_OWORD *)(v9 + 48) = v24;
    if (v10 == a3)
    {
      swift_bridgeObjectRetain();
      uint64_t v10 = a3;
      goto LABEL_32;
    }
    v9 += 104;
    swift_bridgeObjectRetain();
    if (v7) {
      goto LABEL_7;
    }
LABEL_8:
    unint64_t v15 = v11 + 1;
    if ((uint64_t)(v11 + 1) >= v31)
    {
      unint64_t v15 = v11;
      goto LABEL_31;
    }
    unint64_t v16 = *(void *)(v32 + 8 * v15);
    if (!v16)
    {
      unint64_t v17 = v11 + 2;
      if ((uint64_t)(v11 + 2) >= v31) {
        goto LABEL_31;
      }
      unint64_t v16 = *(void *)(v32 + 8 * v17);
      if (v16) {
        goto LABEL_12;
      }
      unint64_t v15 = v11 + 2;
      if ((uint64_t)(v11 + 3) >= v31) {
        goto LABEL_31;
      }
      unint64_t v16 = *(void *)(v32 + 8 * (v11 + 3));
      if (v16)
      {
        unint64_t v15 = v11 + 3;
        goto LABEL_16;
      }
      unint64_t v17 = v11 + 4;
      unint64_t v15 = v11 + 3;
      if ((uint64_t)(v11 + 4) >= v31) {
        goto LABEL_31;
      }
      unint64_t v16 = *(void *)(v32 + 8 * v17);
      if (v16)
      {
LABEL_12:
        unint64_t v15 = v17;
        goto LABEL_16;
      }
      unint64_t v15 = v11 + 4;
      if ((uint64_t)(v11 + 5) >= v31) {
        goto LABEL_31;
      }
      unint64_t v16 = *(void *)(v32 + 8 * (v11 + 5));
      unint64_t v15 = v11 + 5;
      if (!v16) {
        break;
      }
    }
LABEL_16:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v14 = __clz(__rbit64(v16)) + (v15 << 6);
    unint64_t v11 = v15;
  }
  while (v28 != v11)
  {
    unint64_t v16 = *(void *)(v27 + 8 * v11++);
    if (v16)
    {
      unint64_t v15 = v11 + 5;
      goto LABEL_16;
    }
  }
  unint64_t v15 = v26;
LABEL_31:
  unint64_t v7 = 0;
  unint64_t v11 = v15;
LABEL_32:
  uint64_t v5 = v29;
  a1 = v30;
LABEL_33:
  *a1 = a4;
  a1[1] = v32;
  a1[2] = ~v5;
  a1[3] = v11;
  a1[4] = v7;
  return v10;
}

uint64_t sub_1B6643464(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v13 = 0;
    uint64_t v10 = 0;
    goto LABEL_34;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v13 = 0;
    goto LABEL_34;
  }
  unint64_t v11 = a2;
  uint64_t v12 = 0;
  int64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v24 = a4 + 112;
  if (!v9) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v13 << 6);
  while (1)
  {
    ++v12;
    uint64_t v20 = *(void **)(*(void *)(a4 + 56) + 8 * v16);
    void *v11 = v20;
    if (v12 == v10)
    {
      id v22 = v20;
      goto LABEL_34;
    }
    ++v11;
    id v21 = v20;
    if (v9) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v17 = v13 + 1;
    if (v13 + 1 >= v14)
    {
      unint64_t v9 = 0;
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      int64_t v19 = v13 + 2;
      if (v13 + 2 >= v14) {
        goto LABEL_30;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v19);
      if (v18) {
        goto LABEL_12;
      }
      int64_t v17 = v13 + 3;
      if (v13 + 3 >= v14) {
        goto LABEL_31;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v17);
      if (!v18)
      {
        int64_t v19 = v13 + 4;
        if (v13 + 4 >= v14)
        {
LABEL_30:
          unint64_t v9 = 0;
          int64_t v13 = v17;
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_12:
          int64_t v17 = v19;
          goto LABEL_15;
        }
        int64_t v17 = v13 + 5;
        if (v13 + 5 >= v14)
        {
LABEL_31:
          unint64_t v9 = 0;
          int64_t v13 = v19;
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v17);
        if (!v18) {
          break;
        }
      }
    }
LABEL_15:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v13 = v17;
  }
  while (v14 - 6 != v13)
  {
    unint64_t v18 = *(void *)(v24 + 8 * v13++);
    if (v18)
    {
      int64_t v17 = v13 + 5;
      goto LABEL_15;
    }
  }
  unint64_t v9 = 0;
  int64_t v13 = v14 - 1;
LABEL_33:
  uint64_t v10 = v12;
LABEL_34:
  *a1 = a4;
  a1[1] = v6;
  a1[2] = ~v7;
  a1[3] = v13;
  a1[4] = v9;
  return v10;
}

uint64_t sub_1B6643654(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v13 = 0;
    uint64_t v10 = 0;
    goto LABEL_34;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v13 = 0;
    goto LABEL_34;
  }
  unint64_t v11 = a2;
  uint64_t v12 = 0;
  int64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v21 = a4 + 112;
  if (!v9) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v13 << 6);
  while (1)
  {
    ++v12;
    void *v11 = *(void *)(*(void *)(a4 + 56) + 8 * v16);
    if (v12 == v10)
    {
      swift_retain();
      goto LABEL_34;
    }
    ++v11;
    swift_retain();
    if (v9) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v17 = v13 + 1;
    if (v13 + 1 >= v14)
    {
      unint64_t v9 = 0;
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      int64_t v19 = v13 + 2;
      if (v13 + 2 >= v14) {
        goto LABEL_30;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v19);
      if (v18) {
        goto LABEL_12;
      }
      int64_t v17 = v13 + 3;
      if (v13 + 3 >= v14) {
        goto LABEL_31;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v17);
      if (!v18)
      {
        int64_t v19 = v13 + 4;
        if (v13 + 4 >= v14)
        {
LABEL_30:
          unint64_t v9 = 0;
          int64_t v13 = v17;
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_12:
          int64_t v17 = v19;
          goto LABEL_15;
        }
        int64_t v17 = v13 + 5;
        if (v13 + 5 >= v14)
        {
LABEL_31:
          unint64_t v9 = 0;
          int64_t v13 = v19;
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v17);
        if (!v18) {
          break;
        }
      }
    }
LABEL_15:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v13 = v17;
  }
  while (v14 - 6 != v13)
  {
    unint64_t v18 = *(void *)(v21 + 8 * v13++);
    if (v18)
    {
      int64_t v17 = v13 + 5;
      goto LABEL_15;
    }
  }
  unint64_t v9 = 0;
  int64_t v13 = v14 - 1;
LABEL_33:
  uint64_t v10 = v12;
LABEL_34:
  *a1 = a4;
  a1[1] = v6;
  a1[2] = ~v7;
  a1[3] = v13;
  a1[4] = v9;
  return v10;
}

uint64_t sub_1B6643844(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v9 = 0;
    a3 = 0;
    goto LABEL_31;
  }
  if (!a3)
  {
    int64_t v9 = 0;
    goto LABEL_31;
  }
  uint64_t v8 = 0;
  int64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v9 << 6);
LABEL_7:
    ++v8;
    uint64_t v13 = *(void *)(a4 + 48) + 8 * v12;
    int v14 = *(_DWORD *)v13;
    LOBYTE(v13) = *(unsigned char *)(v13 + 4);
    *(_DWORD *)a2 = v14;
    *(unsigned char *)(a2 + 4) = v13;
    a2 += 8;
    if (v8 == a3) {
      goto LABEL_31;
    }
  }
  int64_t v15 = v9 + 1;
  if (v9 + 1 >= v10)
  {
    unint64_t v7 = 0;
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v15);
  if (v16)
  {
LABEL_16:
    unint64_t v18 = __clz(__rbit64(v16));
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v12 = v18 + (v15 << 6);
    int64_t v9 = v15;
    goto LABEL_7;
  }
  int64_t v17 = v9 + 2;
  if (v9 + 2 >= v10) {
    goto LABEL_27;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16) {
    goto LABEL_13;
  }
  int64_t v15 = v9 + 3;
  if (v9 + 3 >= v10) {
    goto LABEL_28;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v15);
  if (v16) {
    goto LABEL_16;
  }
  int64_t v17 = v9 + 4;
  if (v9 + 4 >= v10)
  {
LABEL_27:
    unint64_t v7 = 0;
    int64_t v9 = v15;
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v17);
  if (v16)
  {
LABEL_13:
    int64_t v15 = v17;
    goto LABEL_16;
  }
  int64_t v15 = v9 + 5;
  if (v9 + 5 >= v10)
  {
LABEL_28:
    unint64_t v7 = 0;
    int64_t v9 = v17;
    goto LABEL_30;
  }
  unint64_t v16 = *(void *)(v4 + 8 * v15);
  if (v16) {
    goto LABEL_16;
  }
  while (v10 - 6 != v9)
  {
    unint64_t v16 = *(void *)(a4 + 112 + 8 * v9++);
    if (v16)
    {
      int64_t v15 = v9 + 5;
      goto LABEL_16;
    }
  }
  unint64_t v7 = 0;
  int64_t v9 = v10 - 1;
LABEL_30:
  a3 = v8;
LABEL_31:
  *a1 = a4;
  a1[1] = v4;
  a1[2] = ~v6;
  a1[3] = v9;
  a1[4] = v7;
  return a3;
}

uint64_t sub_1B66439D8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v9 = 0;
    a3 = 0;
    goto LABEL_31;
  }
  if (!a3)
  {
    int64_t v9 = 0;
    goto LABEL_31;
  }
  uint64_t v8 = 0;
  int64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v9 << 6);
LABEL_7:
    ++v8;
    *a2++ = *(void *)(*(void *)(a4 + 56) + 8 * v12);
    if (v8 == a3) {
      goto LABEL_31;
    }
  }
  int64_t v13 = v9 + 1;
  if (v9 + 1 >= v10)
  {
    unint64_t v7 = 0;
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14)
  {
LABEL_16:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v9 = v13;
    goto LABEL_7;
  }
  int64_t v15 = v9 + 2;
  if (v9 + 2 >= v10) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_13;
  }
  int64_t v13 = v9 + 3;
  if (v9 + 3 >= v10) {
    goto LABEL_28;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v9 + 4;
  if (v9 + 4 >= v10)
  {
LABEL_27:
    unint64_t v7 = 0;
    int64_t v9 = v13;
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_13:
    int64_t v13 = v15;
    goto LABEL_16;
  }
  int64_t v13 = v9 + 5;
  if (v9 + 5 >= v10)
  {
LABEL_28:
    unint64_t v7 = 0;
    int64_t v9 = v15;
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_16;
  }
  while (v10 - 6 != v9)
  {
    unint64_t v14 = *(void *)(a4 + 112 + 8 * v9++);
    if (v14)
    {
      int64_t v13 = v9 + 5;
      goto LABEL_16;
    }
  }
  unint64_t v7 = 0;
  int64_t v9 = v10 - 1;
LABEL_30:
  a3 = v8;
LABEL_31:
  *a1 = a4;
  a1[1] = v4;
  a1[2] = ~v6;
  a1[3] = v9;
  a1[4] = v7;
  return a3;
}

uint64_t sub_1B6643B58(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4 + 64;
  uint64_t v5 = -1;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v5 = ~(-1 << -(char)v6);
  }
  unint64_t v7 = v5 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v9 = 0;
    a3 = 0;
    goto LABEL_31;
  }
  if (!a3)
  {
    int64_t v9 = 0;
    goto LABEL_31;
  }
  uint64_t v8 = 0;
  int64_t v9 = 0;
  int64_t v10 = (unint64_t)(63 - v6) >> 6;
  while (v7)
  {
    unint64_t v11 = __clz(__rbit64(v7));
    v7 &= v7 - 1;
    unint64_t v12 = v11 | (v9 << 6);
LABEL_7:
    ++v8;
    *a2++ = *(void *)(*(void *)(a4 + 48) + 8 * v12);
    if (v8 == a3) {
      goto LABEL_31;
    }
  }
  int64_t v13 = v9 + 1;
  if (v9 + 1 >= v10)
  {
    unint64_t v7 = 0;
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14)
  {
LABEL_16:
    unint64_t v16 = __clz(__rbit64(v14));
    unint64_t v7 = (v14 - 1) & v14;
    unint64_t v12 = v16 + (v13 << 6);
    int64_t v9 = v13;
    goto LABEL_7;
  }
  int64_t v15 = v9 + 2;
  if (v9 + 2 >= v10) {
    goto LABEL_27;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14) {
    goto LABEL_13;
  }
  int64_t v13 = v9 + 3;
  if (v9 + 3 >= v10) {
    goto LABEL_28;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_16;
  }
  int64_t v15 = v9 + 4;
  if (v9 + 4 >= v10)
  {
LABEL_27:
    unint64_t v7 = 0;
    int64_t v9 = v13;
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v15);
  if (v14)
  {
LABEL_13:
    int64_t v13 = v15;
    goto LABEL_16;
  }
  int64_t v13 = v9 + 5;
  if (v9 + 5 >= v10)
  {
LABEL_28:
    unint64_t v7 = 0;
    int64_t v9 = v15;
    goto LABEL_30;
  }
  unint64_t v14 = *(void *)(v4 + 8 * v13);
  if (v14) {
    goto LABEL_16;
  }
  while (v10 - 6 != v9)
  {
    unint64_t v14 = *(void *)(a4 + 112 + 8 * v9++);
    if (v14)
    {
      int64_t v13 = v9 + 5;
      goto LABEL_16;
    }
  }
  unint64_t v7 = 0;
  int64_t v9 = v10 - 1;
LABEL_30:
  a3 = v8;
LABEL_31:
  *a1 = a4;
  a1[1] = v4;
  a1[2] = ~v6;
  a1[3] = v9;
  a1[4] = v7;
  return a3;
}

uint64_t sub_1B6643CD8(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a4 + 64;
  uint64_t v6 = -1 << *(unsigned char *)(a4 + 32);
  if (-v6 < 64) {
    uint64_t v7 = ~(-1 << -(char)v6);
  }
  else {
    uint64_t v7 = -1;
  }
  unint64_t v8 = v7 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v12 = 0;
    uint64_t v9 = 0;
    goto LABEL_35;
  }
  uint64_t v9 = a3;
  if (!a3)
  {
    int64_t v12 = 0;
    goto LABEL_35;
  }
  int64_t v10 = a2;
  uint64_t v28 = -1 << *(unsigned char *)(a4 + 32);
  uint64_t v29 = a1;
  uint64_t v11 = 0;
  int64_t v12 = 0;
  int64_t v13 = (unint64_t)(63 - v6) >> 6;
  uint64_t v27 = a4 + 112;
  if (!v8) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v14 = __clz(__rbit64(v8));
  v8 &= v8 - 1;
  unint64_t v15 = v14 | (v12 << 6);
  while (1)
  {
    ++v11;
    int64_t v19 = (uint64_t *)(*(void *)(a4 + 48) + 16 * v15);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    id v22 = (uint64_t *)(*(void *)(a4 + 56) + 24 * v15);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    uint64_t v25 = v22[2];
    *int64_t v10 = v20;
    v10[1] = v21;
    void v10[2] = v23;
    v10[3] = v24;
    _OWORD v10[4] = v25;
    if (v11 == v9)
    {
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      goto LABEL_34;
    }
    v10 += 5;
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v8) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v16 = v12 + 1;
    if (v12 + 1 >= v13)
    {
      unint64_t v8 = 0;
      goto LABEL_33;
    }
    unint64_t v17 = *(void *)(v5 + 8 * v16);
    if (!v17)
    {
      int64_t v18 = v12 + 2;
      if (v12 + 2 >= v13) {
        goto LABEL_30;
      }
      unint64_t v17 = *(void *)(v5 + 8 * v18);
      if (v17) {
        goto LABEL_12;
      }
      int64_t v16 = v12 + 3;
      if (v12 + 3 >= v13) {
        goto LABEL_31;
      }
      unint64_t v17 = *(void *)(v5 + 8 * v16);
      if (!v17)
      {
        int64_t v18 = v12 + 4;
        if (v12 + 4 >= v13)
        {
LABEL_30:
          unint64_t v8 = 0;
          int64_t v12 = v16;
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v18);
        if (v17)
        {
LABEL_12:
          int64_t v16 = v18;
          goto LABEL_15;
        }
        int64_t v16 = v12 + 5;
        if (v12 + 5 >= v13)
        {
LABEL_31:
          unint64_t v8 = 0;
          int64_t v12 = v18;
          goto LABEL_33;
        }
        unint64_t v17 = *(void *)(v5 + 8 * v16);
        if (!v17) {
          break;
        }
      }
    }
LABEL_15:
    unint64_t v8 = (v17 - 1) & v17;
    unint64_t v15 = __clz(__rbit64(v17)) + (v16 << 6);
    int64_t v12 = v16;
  }
  while (v13 - 6 != v12)
  {
    unint64_t v17 = *(void *)(v27 + 8 * v12++);
    if (v17)
    {
      int64_t v16 = v12 + 5;
      goto LABEL_15;
    }
  }
  unint64_t v8 = 0;
  int64_t v12 = v13 - 1;
LABEL_33:
  uint64_t v9 = v11;
LABEL_34:
  uint64_t v6 = v28;
  a1 = v29;
LABEL_35:
  *a1 = a4;
  a1[1] = v5;
  a1[2] = ~v6;
  a1[3] = v12;
  a1[4] = v8;
  return v9;
}

uint64_t sub_1B6643F08(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 64;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 64);
  if (!a2)
  {
    int64_t v13 = 0;
    uint64_t v10 = 0;
    goto LABEL_34;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v13 = 0;
    goto LABEL_34;
  }
  uint64_t v11 = a2;
  uint64_t v12 = 0;
  int64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v23 = a4 + 112;
  if (!v9) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v13 << 6);
  while (1)
  {
    ++v12;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v12 == v10)
    {
      swift_bridgeObjectRetain();
      goto LABEL_34;
    }
    v11 += 2;
    swift_bridgeObjectRetain();
    if (v9) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v17 = v13 + 1;
    if (v13 + 1 >= v14)
    {
      unint64_t v9 = 0;
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      int64_t v19 = v13 + 2;
      if (v13 + 2 >= v14) {
        goto LABEL_30;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v19);
      if (v18) {
        goto LABEL_12;
      }
      int64_t v17 = v13 + 3;
      if (v13 + 3 >= v14) {
        goto LABEL_31;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v17);
      if (!v18)
      {
        int64_t v19 = v13 + 4;
        if (v13 + 4 >= v14)
        {
LABEL_30:
          unint64_t v9 = 0;
          int64_t v13 = v17;
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_12:
          int64_t v17 = v19;
          goto LABEL_15;
        }
        int64_t v17 = v13 + 5;
        if (v13 + 5 >= v14)
        {
LABEL_31:
          unint64_t v9 = 0;
          int64_t v13 = v19;
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v17);
        if (!v18) {
          break;
        }
      }
    }
LABEL_15:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v13 = v17;
  }
  while (v14 - 6 != v13)
  {
    unint64_t v18 = *(void *)(v23 + 8 * v13++);
    if (v18)
    {
      int64_t v17 = v13 + 5;
      goto LABEL_15;
    }
  }
  unint64_t v9 = 0;
  int64_t v13 = v14 - 1;
LABEL_33:
  uint64_t v10 = v12;
LABEL_34:
  *a1 = a4;
  a1[1] = v6;
  a1[2] = ~v7;
  a1[3] = v13;
  a1[4] = v9;
  return v10;
}

uint64_t sub_1B66440FC(void *a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = a4 + 56;
  uint64_t v7 = -1 << *(unsigned char *)(a4 + 32);
  if (-v7 < 64) {
    uint64_t v8 = ~(-1 << -(char)v7);
  }
  else {
    uint64_t v8 = -1;
  }
  unint64_t v9 = v8 & *(void *)(a4 + 56);
  if (!a2)
  {
    int64_t v13 = 0;
    uint64_t v10 = 0;
    goto LABEL_34;
  }
  uint64_t v10 = a3;
  if (!a3)
  {
    int64_t v13 = 0;
    goto LABEL_34;
  }
  uint64_t v11 = a2;
  uint64_t v12 = 0;
  int64_t v13 = 0;
  int64_t v14 = (unint64_t)(63 - v7) >> 6;
  uint64_t v23 = a4 + 104;
  if (!v9) {
    goto LABEL_8;
  }
LABEL_7:
  unint64_t v15 = __clz(__rbit64(v9));
  v9 &= v9 - 1;
  unint64_t v16 = v15 | (v13 << 6);
  while (1)
  {
    ++v12;
    uint64_t v20 = (void *)(*(void *)(a4 + 48) + 16 * v16);
    uint64_t v21 = v20[1];
    void *v11 = *v20;
    v11[1] = v21;
    if (v12 == v10)
    {
      swift_retain();
      goto LABEL_34;
    }
    v11 += 2;
    swift_retain();
    if (v9) {
      goto LABEL_7;
    }
LABEL_8:
    int64_t v17 = v13 + 1;
    if (v13 + 1 >= v14)
    {
      unint64_t v9 = 0;
      goto LABEL_33;
    }
    unint64_t v18 = *(void *)(v6 + 8 * v17);
    if (!v18)
    {
      int64_t v19 = v13 + 2;
      if (v13 + 2 >= v14) {
        goto LABEL_30;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v19);
      if (v18) {
        goto LABEL_12;
      }
      int64_t v17 = v13 + 3;
      if (v13 + 3 >= v14) {
        goto LABEL_31;
      }
      unint64_t v18 = *(void *)(v6 + 8 * v17);
      if (!v18)
      {
        int64_t v19 = v13 + 4;
        if (v13 + 4 >= v14)
        {
LABEL_30:
          unint64_t v9 = 0;
          int64_t v13 = v17;
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v19);
        if (v18)
        {
LABEL_12:
          int64_t v17 = v19;
          goto LABEL_15;
        }
        int64_t v17 = v13 + 5;
        if (v13 + 5 >= v14)
        {
LABEL_31:
          unint64_t v9 = 0;
          int64_t v13 = v19;
          goto LABEL_33;
        }
        unint64_t v18 = *(void *)(v6 + 8 * v17);
        if (!v18) {
          break;
        }
      }
    }
LABEL_15:
    unint64_t v9 = (v18 - 1) & v18;
    unint64_t v16 = __clz(__rbit64(v18)) + (v17 << 6);
    int64_t v13 = v17;
  }
  while (v14 - 6 != v13)
  {
    unint64_t v18 = *(void *)(v23 + 8 * v13++);
    if (v18)
    {
      int64_t v17 = v13 + 5;
      goto LABEL_15;
    }
  }
  unint64_t v9 = 0;
  int64_t v13 = v14 - 1;
LABEL_33:
  uint64_t v10 = v12;
LABEL_34:
  *a1 = a4;
  a1[1] = v6;
  a1[2] = ~v7;
  a1[3] = v13;
  a1[4] = v9;
  return v10;
}

uint64_t sub_1B66442F0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return a3;
  }
  if (a3 + 32 >= a1 + 32 * v4 || a3 + 32 + 32 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B66443A0(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return a3;
  }
  if (a3 + 32 >= a1 + 16 * v4 || a3 + 32 + 16 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6644450(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_bridgeObjectRetain();
      sub_1B6E32C18();
      swift_bridgeObjectRelease();
      sub_1B62F9218(0, &qword_1E9DCDA08, (uint64_t (*)(uint64_t))type metadata accessor for AuthoringNode, MEMORY[0x1E4FBB320]);
      sub_1B6645A78((unint64_t *)&unk_1E9DCDA10, &qword_1E9DCDA08, (uint64_t (*)(uint64_t))type metadata accessor for AuthoringNode);
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v10; ++i)
      {
        uint64_t v12 = sub_1B68C8C2C(v16, i, a3);
        uint64_t v14 = *v13;
        swift_retain();
        ((void (*)(uint64_t **, void))v12)(v16, 0);
        *(void *)(a1 + 8 * i) = v14;
      }
      swift_bridgeObjectRelease();
    }
    return a3;
  }
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6) {
    return a3;
  }
  unint64_t v7 = v5 + 32;
  unint64_t v8 = v5 + 32 + 8 * v6;
  if (v7 >= a1 + 8 * v6 || v8 <= a1)
  {
    type metadata accessor for AuthoringNode();
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6644658(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_bridgeObjectRetain();
      sub_1B6E32C18();
      swift_bridgeObjectRelease();
      sub_1B62F9218(0, &qword_1E9DCD9F0, (uint64_t (*)(uint64_t))type metadata accessor for Node, MEMORY[0x1E4FBB320]);
      sub_1B6645A78((unint64_t *)&unk_1E9DCD9F8, &qword_1E9DCD9F0, (uint64_t (*)(uint64_t))type metadata accessor for Node);
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v10; ++i)
      {
        uint64_t v12 = sub_1B68C8C2C(v16, i, a3);
        uint64_t v14 = *v13;
        swift_retain();
        ((void (*)(uint64_t **, void))v12)(v16, 0);
        *(void *)(a1 + 8 * i) = v14;
      }
      swift_bridgeObjectRelease();
    }
    return a3;
  }
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6) {
    return a3;
  }
  unint64_t v7 = v5 + 32;
  unint64_t v8 = v5 + 32 + 8 * v6;
  if (v7 >= a1 + 8 * v6 || v8 <= a1)
  {
    type metadata accessor for Node();
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6644860(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return a3;
  }
  if (a3 + 32 >= a1 + 48 * v4 || a3 + 32 + 48 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6644914(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_bridgeObjectRetain();
      sub_1B6E32C18();
      swift_bridgeObjectRelease();
      sub_1B62F9218(0, &qword_1E9DCDA50, (uint64_t (*)(uint64_t))type metadata accessor for EntityFamily, MEMORY[0x1E4FBB320]);
      sub_1B6645A78(&qword_1E9DCDA58, &qword_1E9DCDA50, (uint64_t (*)(uint64_t))type metadata accessor for EntityFamily);
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v10; ++i)
      {
        uint64_t v12 = sub_1B68C8C98(v16, i, a3);
        uint64_t v14 = *v13;
        swift_retain();
        ((void (*)(uint64_t **, void))v12)(v16, 0);
        *(void *)(a1 + 8 * i) = v14;
      }
      swift_bridgeObjectRelease();
    }
    return a3;
  }
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6) {
    return a3;
  }
  unint64_t v7 = v5 + 32;
  unint64_t v8 = v5 + 32 + 8 * v6;
  if (v7 >= a1 + 8 * v6 || v8 <= a1)
  {
    type metadata accessor for EntityFamily();
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6644B1C(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_bridgeObjectRetain();
      sub_1B6E32C18();
      swift_bridgeObjectRelease();
      sub_1B62F9218(0, &qword_1E9DCD9D0, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDescription, MEMORY[0x1E4FBB320]);
      sub_1B6645A78(&qword_1E9DCD9D8, &qword_1E9DCD9D0, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDescription);
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v10; ++i)
      {
        uint64_t v12 = sub_1B68C8C2C(v16, i, a3);
        uint64_t v14 = *v13;
        swift_retain();
        ((void (*)(uint64_t **, void))v12)(v16, 0);
        *(void *)(a1 + 8 * i) = v14;
      }
      swift_bridgeObjectRelease();
    }
    return a3;
  }
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6) {
    return a3;
  }
  unint64_t v7 = v5 + 32;
  unint64_t v8 = v5 + 32 + 8 * v6;
  if (v7 >= a1 + 8 * v6 || v8 <= a1)
  {
    type metadata accessor for PropertyDescription();
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6644D24(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return a3;
  }
  if (a3 + 32 >= a1 + 32 * v4 || a3 + 32 + 32 * v4 <= a1)
  {
    sub_1B6645A00();
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6644DEC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return a3;
  }
  if (a3 + 32 >= (unint64_t)a1 + 24 * v4 || a3 + 32 + 24 * v4 <= (unint64_t)a1)
  {
    memcpy(a1, (const void *)(a3 + 32), 24 * v4);
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6644E94(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return a3;
  }
  if (a3 + 32 >= a1 + 24 * v4 || a3 + 32 + 24 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6644F48(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return a3;
  }
  if (a3 + 32 >= a1 + 32 * v4 || a3 + 32 + 32 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6644FF8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return a3;
  }
  if (a3 + 32 >= a1 + 40 * v4 || a3 + 32 + 40 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B66450AC(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return a3;
  }
  if (a3 + 32 >= a1 + 48 * v4 || a3 + 32 + 48 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6645160(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return a3;
  }
  if (a3 + 32 >= a1 + 8 * v4 || a3 + 32 + 8 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6645208(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return a3;
  }
  if (a3 + 32 >= a1 + 56 * v4 || a3 + 32 + 56 * v4 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B66452BC(unint64_t a1, uint64_t a2, unint64_t a3)
{
  if (a3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
    if (v10)
    {
      swift_bridgeObjectRetain();
      sub_1B6E32C18();
      swift_bridgeObjectRelease();
      sub_1B62F9218(0, &qword_1E9DCDA20, (uint64_t (*)(uint64_t))_s13ParameterBaseCMa, MEMORY[0x1E4FBB320]);
      sub_1B6645A78((unint64_t *)&unk_1E9DCDA28, &qword_1E9DCDA20, (uint64_t (*)(uint64_t))_s13ParameterBaseCMa);
      swift_bridgeObjectRetain();
      for (uint64_t i = 0; i != v10; ++i)
      {
        uint64_t v12 = sub_1B68C8C2C(v16, i, a3);
        uint64_t v14 = *v13;
        swift_retain();
        ((void (*)(uint64_t **, void))v12)(v16, 0);
        *(void *)(a1 + 8 * i) = v14;
      }
      swift_bridgeObjectRelease();
    }
    return a3;
  }
  uint64_t v5 = a3 & 0xFFFFFFFFFFFFFF8;
  uint64_t v6 = *(void *)((a3 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v6) {
    return a3;
  }
  unint64_t v7 = v5 + 32;
  unint64_t v8 = v5 + 32 + 8 * v6;
  if (v7 >= a1 + 8 * v6 || v8 <= a1)
  {
    _s13ParameterBaseCMa();
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B66454C4(unint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5 = *(void *)(a3 + 16);
  if (!v5) {
    return a3;
  }
  if (a3 + 32 >= a1 + 16 * v5 || a3 + 32 + 16 * v5 <= a1)
  {
    sub_1B62D82E0(0, a4);
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6645594(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a3 + 16);
  if (!v4) {
    return a3;
  }
  uint64_t v6 = *(void *)(type metadata accessor for EdgeCoder(0) - 8);
  unint64_t v7 = a3 + ((*(unsigned __int8 *)(v6 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
  uint64_t v8 = *(void *)(v6 + 72) * v4;
  unint64_t v9 = a1 + v8;
  unint64_t v10 = v7 + v8;
  if (v7 >= v9 || v10 <= a1)
  {
    swift_arrayInitWithCopy();
    return a3;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

void *sub_1B66456A8(void *a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1B66456E4(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4)
{
  if ((~a4 & 0xFC) != 0) {
    return sub_1B62C6AE0(a1, a2, a3, a4);
  }
  return a1;
}

unint64_t sub_1B66456F8(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
      uint64_t result = swift_retain();
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B6645740(unint64_t result)
{
  switch(result >> 61)
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 3uLL:
      uint64_t result = swift_release();
      break;
    default:
      return result;
  }
  return result;
}

void sub_1B6645788(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  if (!*a2)
  {
    sub_1B62F3064(255, a3);
    unint64_t v4 = sub_1B6E31D18();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1B66457E0(unint64_t *a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6645788(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B6645830()
{
  unint64_t result = qword_1EB97D960;
  if (!qword_1EB97D960)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97D960);
  }
  return result;
}

unint64_t sub_1B6645884()
{
  unint64_t result = qword_1EB980E48;
  if (!qword_1EB980E48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB980E48);
  }
  return result;
}

void sub_1B66458D8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

void sub_1B6645940(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = type metadata accessor for ScriptRuntime();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1B66459A4(uint64_t a1, uint64_t a2)
{
  return a2;
}

void sub_1B6645A00()
{
  if (!qword_1EB9803E8)
  {
    sub_1B62D82E0(255, &qword_1EB9803E0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB9803E8);
    }
  }
}

uint64_t sub_1B6645A78(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B62F9218(255, a2, a3, MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6645ADC()
{
  uint64_t v1 = v0;
  unint64_t v2 = *(void *)(v0 + 56);
  if (!(v2 >> 62))
  {
    uint64_t v3 = *(void *)((v2 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    uint64_t v38 = v0;
    if (v3) {
      goto LABEL_3;
    }
LABEL_12:
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1B6E32C18();
  uint64_t v38 = v0;
  if (!v3) {
    goto LABEL_12;
  }
LABEL_3:
  uint64_t v55 = MEMORY[0x1E4FBC860];
  sub_1B6C3C3B8(0, v3 & ~(v3 >> 63), 0);
  uint64_t v4 = 0;
  uint64_t v5 = v55;
  do
  {
    if ((v2 & 0xC000000000000001) != 0)
    {
      uint64_t v6 = MEMORY[0x1BA9B4580](v4, v2);
    }
    else
    {
      uint64_t v6 = *(void *)(v2 + 8 * v4 + 32);
      swift_retain();
    }
    uint64_t v8 = *(void *)(v6 + 24);
    uint64_t v7 = *(void *)(v6 + 32);
    swift_bridgeObjectRetain();
    swift_release();
    uint64_t v55 = v5;
    unint64_t v10 = *(void *)(v5 + 16);
    unint64_t v9 = *(void *)(v5 + 24);
    if (v10 >= v9 >> 1)
    {
      sub_1B6C3C3B8(v9 > 1, v10 + 1, 1);
      uint64_t v5 = v55;
    }
    ++v4;
    *(void *)(v5 + 16) = v10 + 1;
    unint64_t v11 = v5 + 16 * v10;
    *(void *)(v11 + 32) = v8;
    *(void *)(v11 + 40) = v7;
  }
  while (v3 != v4);
  swift_bridgeObjectRelease();
  uint64_t v1 = v38;
LABEL_13:
  sub_1B6646CE4();
  sub_1B6646D3C();
  sub_1B6E31638();
  swift_bridgeObjectRelease();
  uint64_t v55 = 0x5B203D2074756FLL;
  unint64_t v56 = 0xE700000000000000;
  sub_1B6E31948();
  sub_1B6E31948();
  uint64_t v12 = *(void *)(v1 + 136);
  swift_retain();
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v55 = *(void *)(v12 + 216);
  *(void *)(v12 + 216) = 0x8000000000000000;
  sub_1B67E3B6C(0x5B203D2074756FLL, 0xE700000000000000, 0x7466697773, 0xE500000000000000, isUniquelyReferenced_nonNull_native);
  *(void *)(v12 + 216) = v55;
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v14 = v1 + 144;
  sub_1B629C37C(v1 + 144, (uint64_t)v45);
  sub_1B629C37C((uint64_t)v45, (uint64_t)v46);
  if (v47 >= 0x3B)
  {
    if (!*(void *)(v48 + 16)) {
      goto LABEL_30;
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B69FA7C0(1u);
    char v15 = v16;
  }
  else
  {
    sub_1B6646D94(v45, (void (*)(void, void, void, void, void))sub_1B629C9E8);
    char v15 = sub_1B68A2B8C((uint64_t)v45);
  }
  sub_1B6646D94(v45, (void (*)(void, void, void, void, void))sub_1B629DCAC);
  if (v15)
  {
    uint64_t v55 = 0;
    unint64_t v56 = 0xE000000000000000;
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    uint64_t v55 = 0x20646165726874;
    unint64_t v56 = 0xE700000000000000;
    sub_1B629C37C(v1 + 144, (uint64_t)v44);
    sub_1B629C37C((uint64_t)v44, (uint64_t)v49);
    if (v50 >= 0x3B)
    {
      uint64_t v18 = *(void *)(v51 + 16);
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v18 && (sub_1B69FA7C0(1u), (v19 & 1) != 0))
      {
        swift_bridgeObjectRetain();
        sub_1B6646D94(v44, (void (*)(void, void, void, void, void))sub_1B629DCAC);
      }
      else
      {
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        uint64_t v52 = 0;
        unint64_t v53 = 0xE000000000000000;
        swift_retain();
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        uint64_t v52 = 0xD00000000000001BLL;
        unint64_t v53 = 0x80000001B6F31700;
        swift_bridgeObjectRetain();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        sub_1B6E31948();
        uint64_t v20 = v52;
        uint64_t v21 = v53;
        int v22 = sub_1B6E32158();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        uint64_t v52 = 0;
        swift_retain();
        sub_1B6B33E34(v22, &v52, v20, v21);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        sub_1B6646D94(v44, (void (*)(void, void, void, void, void))sub_1B629DCAC);
      }
      uint64_t v17 = v38;
    }
    else
    {
      sub_1B6646D94(v44, (void (*)(void, void, void, void, void))sub_1B629C9E8);
      sub_1B68A1DAC((uint64_t)v44);
      sub_1B6646D94(v44, (void (*)(void, void, void, void, void))sub_1B629DCAC);
      uint64_t v17 = v38;
    }
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    uint64_t v23 = v55;
    uint64_t v24 = v56;
    uint64_t v25 = *(void *)(v17 + 136);
    swift_retain();
    swift_bridgeObjectRetain();
    char v26 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v55 = *(void *)(v25 + 216);
    *(void *)(v25 + 216) = 0x8000000000000000;
    sub_1B67E3B6C(v23, v24, 0x6C6174656DLL, 0xE500000000000000, v26);
    *(void *)(v25 + 216) = v55;
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
  }
LABEL_30:
  sub_1B629C37C(v14, (uint64_t)v43);
  sub_1B629C37C((uint64_t)v43, (uint64_t)&v52);
  if (v53 >= 0x3B)
  {
    if (!*(void *)(v54 + 16)) {
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B69FA7C0(0);
    char v27 = v28;
  }
  else
  {
    sub_1B6646D94(v43, (void (*)(void, void, void, void, void))sub_1B629C9E8);
    char v27 = sub_1B68A2BB0((uint64_t)v43);
  }
  sub_1B6646D94(v43, (void (*)(void, void, void, void, void))sub_1B629DCAC);
  if ((v27 & 1) == 0) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v55 = 0;
  unint64_t v56 = 0xE000000000000000;
  sub_1B6E328C8();
  uint64_t v40 = v55;
  unint64_t v41 = v56;
  sub_1B629C37C(v14, (uint64_t)v42);
  sub_1B629C37C((uint64_t)v42, (uint64_t)&v55);
  if (v56 >= 0x3B)
  {
    uint64_t v29 = *(void *)(v57 + 16);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (!v29 || (sub_1B69FA7C0(1u), (v30 & 1) == 0))
    {
      uint64_t v31 = v38;
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      swift_retain();
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      v39[1] = 0x80000001B6F31700;
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      sub_1B6E31948();
      int v32 = sub_1B6E32158();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      v39[0] = 0;
      swift_retain();
      sub_1B6B33E34(v32, v39, 0xD00000000000001BLL, 0x80000001B6F31700);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      sub_1B6646D94(v42, (void (*)(void, void, void, void, void))sub_1B629DCAC);
      goto LABEL_47;
    }
    swift_bridgeObjectRetain();
  }
  else
  {
    sub_1B6646D94(v42, (void (*)(void, void, void, void, void))sub_1B629C9E8);
    sub_1B68A1DAC((uint64_t)v42);
  }
  sub_1B6646D94(v42, (void (*)(void, void, void, void, void))sub_1B629DCAC);
  uint64_t v31 = v38;
LABEL_47:
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  uint64_t v33 = v40;
  uint64_t v34 = v41;
  uint64_t v35 = *(void *)(v31 + 136);
  swift_retain();
  swift_bridgeObjectRetain();
  char v36 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v40 = *(void *)(v35 + 216);
  *(void *)(v35 + 216) = 0x8000000000000000;
  sub_1B67E3B6C(v33, v34, 99, 0xE100000000000000, v36);
  *(void *)(v35 + 216) = v40;
  swift_bridgeObjectRelease();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6646538()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6646584()
{
  return sub_1B6E318B8();
}

uint64_t sub_1B6646594()
{
  return sub_1B6E33988();
}

uint64_t sub_1B66465DC@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B6646630(void *a1@<X8>)
{
  *a1 = 1701869940;
  a1[1] = 0xE400000000000000;
}

uint64_t sub_1B6646644()
{
  return 1701869940;
}

uint64_t sub_1B6646654@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B66466AC(unsigned char *a1@<X8>)
{
  *a1 = 1;
}

uint64_t sub_1B66466B8(uint64_t a1)
{
  unint64_t v2 = sub_1B6646BD8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B66466F4(uint64_t a1)
{
  unint64_t v2 = sub_1B6646BD8();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *sub_1B6646730(void *a1)
{
  return sub_1B664677C(a1);
}

void *sub_1B664677C(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6646C80(0, &qword_1E9DCDA78, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)v15 - v9;
  unint64_t v11 = sub_1B62C14BC(a1, a1[3]);
  sub_1B6646BD8();
  swift_retain();
  sub_1B6E33A48();
  if (v2)
  {
    swift_release();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    _s17TypedArraySnippetCMa();
    swift_deallocPartialClassInstance();
  }
  else
  {
    sub_1B629DD00();
    sub_1B6E32DF8();
    uint64_t v13 = v16;
    long long v14 = v15[1];
    *(_OWORD *)(v3 + 144) = v15[0];
    *(_OWORD *)(v3 + 160) = v14;
    *(void *)(v3 + 176) = v13;
    swift_release();
    sub_1B62C1550((uint64_t)a1, (uint64_t)v15);
    unint64_t v11 = sub_1B68124D8(v15);
    swift_retain();
    sub_1B6BD38B0();
    sub_1B6645ADC();
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_release();
  }
  return v11;
}

uint64_t sub_1B66469CC(void *a1)
{
  sub_1B6646C80(0, &qword_1E9DCDA60, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)v13 - v8;
  uint64_t result = sub_1B68127FC(a1);
  if (!v2)
  {
    sub_1B62C14BC(a1, a1[3]);
    sub_1B6646BD8();
    sub_1B6E33A88();
    uint64_t v11 = *(void *)(v1 + 176);
    long long v12 = *(_OWORD *)(v1 + 160);
    v13[0] = *(_OWORD *)(v1 + 144);
    v13[1] = v12;
    uint64_t v14 = v11;
    sub_1B6646C2C();
    sub_1B6E32FA8();
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_1B6646B4C()
{
  return sub_1B629DCAC(*(void *)(v0 + 144), *(void *)(v0 + 152));
}

uint64_t sub_1B6646B5C()
{
  uint64_t v0 = sub_1B6BD807C();
  swift_release();
  sub_1B629DCAC(*(void *)(v0 + 144), *(void *)(v0 + 152));

  return swift_deallocClassInstance();
}

uint64_t _s17TypedArraySnippetCMa()
{
  return self;
}

unint64_t sub_1B6646BD8()
{
  unint64_t result = qword_1E9DCDA68;
  if (!qword_1E9DCDA68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDA68);
  }
  return result;
}

unint64_t sub_1B6646C2C()
{
  unint64_t result = qword_1E9DCDA70;
  if (!qword_1E9DCDA70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDA70);
  }
  return result;
}

void sub_1B6646C80(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6646BD8();
    unint64_t v7 = a3(a1, &_s17TypedArraySnippetC10CodingKeysON, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

void sub_1B6646CE4()
{
  if (!qword_1EB9802F0)
  {
    unint64_t v0 = sub_1B6E31D18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB9802F0);
    }
  }
}

unint64_t sub_1B6646D3C()
{
  unint64_t result = qword_1EB980300;
  if (!qword_1EB980300)
  {
    sub_1B6646CE4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB980300);
  }
  return result;
}

void *sub_1B6646D94(void *a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t _s17TypedArraySnippetC10CodingKeysOwet(unsigned int *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if ((a2 + 1) >= 0x10000) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 1) < 0x100) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4) {
    return *a1;
  }
  if (v3 == 2) {
    return *(unsigned __int16 *)a1;
  }
  return *(unsigned __int8 *)a1;
}

unsigned char *_s17TypedArraySnippetC10CodingKeysOwst(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6646EC0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *_s17TypedArraySnippetC10CodingKeysOMa()
{
  return &_s17TypedArraySnippetC10CodingKeysON;
}

unint64_t sub_1B6646EFC()
{
  unint64_t result = qword_1E9DCDA80;
  if (!qword_1E9DCDA80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDA80);
  }
  return result;
}

unint64_t sub_1B6646F54()
{
  unint64_t result = qword_1E9DCDA88;
  if (!qword_1E9DCDA88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDA88);
  }
  return result;
}

unint64_t sub_1B6646FAC()
{
  unint64_t result = qword_1E9DCDA90;
  if (!qword_1E9DCDA90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDA90);
  }
  return result;
}

uint64_t sub_1B6647000(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != result)
  {
    uint64_t v3 = *(void *)(a3 + 8 * ((a2 - 1) >> 6)) & (1 << (a2 - 1));
    if (result + 1 != a2)
    {
      uint64_t v4 = a2 - 2;
      do
      {
        uint64_t v7 = 1 << (v4 + 1);
        uint64_t v8 = 8 * ((v4 + 1) >> 6);
        if ((*(void *)(a3 + 8 * (v4 >> 6)) >> v4)) {
          uint64_t v5 = *(void *)(a3 + v8) | v7;
        }
        else {
          uint64_t v5 = *(void *)(a3 + v8) & ~v7;
        }
        *(void *)(a3 + v8) = v5;
        uint64_t v6 = v4-- + 1;
      }
      while (v6 != result + 1);
    }
    uint64_t v9 = result >> 6;
    uint64_t v10 = 1 << result;
    if (v3)
    {
      uint64_t v11 = 8 * v9;
      uint64_t v12 = *(void *)(a3 + 8 * v9) | v10;
    }
    else
    {
      uint64_t v11 = 8 * v9;
      uint64_t v12 = *(void *)(a3 + 8 * v9) & ~v10;
    }
    *(void *)(a3 + v11) = v12;
  }
  return result;
}

uint64_t sub_1B66470B4(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (result != a2)
  {
    uint64_t v3 = result >> 6;
    uint64_t v4 = 8 * (a2 >> 6);
    uint64_t v5 = *(void *)(a3 + v4);
    uint64_t v6 = 1 << result;
    if ((*(void *)(a3 + 8 * (result >> 6)) & (1 << result)) != 0) {
      uint64_t v7 = v5 | (1 << a2);
    }
    else {
      uint64_t v7 = v5 & ~(1 << a2);
    }
    *(void *)(a3 + v4) = v7;
    if ((v5 & (1 << a2)) != 0) {
      uint64_t v8 = *(void *)(a3 + 8 * v3) | v6;
    }
    else {
      uint64_t v8 = *(void *)(a3 + 8 * v3) & ~v6;
    }
    *(void *)(a3 + 8 * v3) = v8;
  }
  return result;
}

unint64_t sub_1B6647114(unint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  if (a4 + 63 <= 127) {
    unint64_t v4 = 1;
  }
  else {
    unint64_t v4 = (a4 + 63) >> 6;
  }
  if (v4 < 4 || (result + 8 * v4 > a3 ? (BOOL v5 = a3 + 8 * v4 > result) : (BOOL v5 = 0), v5))
  {
    unint64_t v6 = 0;
  }
  else
  {
    unint64_t v6 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    uint64_t v7 = (int8x16_t *)(a3 + 16);
    uint64_t v8 = (int8x16_t *)(result + 16);
    unint64_t v9 = v4 & 0xFFFFFFFFFFFFFFFCLL;
    do
    {
      int8x16_t v10 = vbicq_s8(*v7, *v8);
      v7[-1] = vbicq_s8(v7[-1], v8[-1]);
      *uint64_t v7 = v10;
      v7 += 2;
      v8 += 2;
      v9 -= 4;
    }
    while (v9);
    if (v4 == v6) {
      goto LABEL_16;
    }
  }
  unint64_t v11 = v4 - v6;
  uint64_t v12 = 8 * v6;
  uint64_t v13 = (uint64_t *)(result + 8 * v6);
  uint64_t v14 = (void *)(a3 + v12);
  do
  {
    uint64_t v15 = *v13++;
    *v14++ &= ~v15;
    --v11;
  }
  while (v11);
LABEL_16:
  if (a4 + 63 <= 127) {
    uint64_t v16 = 0;
  }
  else {
    uint64_t v16 = ((a4 + 63) >> 6) - 1;
  }
  *(void *)(a3 + 8 * v16) &= ~(-1 << a4);
  return result;
}

unsigned char *sub_1B66471DC(unsigned char *result, uint64_t *a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = 1 << *a2;
  uint64_t v5 = 8 * (*a2 >> 6);
  if (*result == 1) {
    *(void *)(v3 + v5) |= v4;
  }
  else {
    *(void *)(v3 + v5) &= ~v4;
  }
  return result;
}

uint64_t (*sub_1B6647220(uint64_t a1, uint64_t *a2))(uint64_t result)
{
  uint64_t v3 = *a2;
  *(void *)a1 = v2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = (*(void *)(*v2 + 8 * (v3 >> 6)) >> v3) & 1;
  return sub_1B6647260;
}

uint64_t sub_1B6647260(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 8);
  uint64_t v2 = 1 << v1;
  uint64_t v3 = (uint64_t *)(**(void **)result + 8 * (v1 >> 6));
  if (*(unsigned char *)(result + 16)) {
    uint64_t v4 = v2 | *v3;
  }
  else {
    uint64_t v4 = *v3 & ~v2;
  }
  *uint64_t v3 = v4;
  return result;
}

uint64_t *sub_1B66472A0(uint64_t *a1, uint64_t *a2)
{
  return sub_1B66480E0(v2, *a2, a2[1], *a1, a1[1], a1[2]);
}

void (*sub_1B66472B8(void *a1, uint64_t *a2))(uint64_t **a1)
{
  uint64_t v5 = malloc(0x38uLL);
  *a1 = v5;
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  v5[4] = v2;
  void v5[5] = v6;
  void v5[6] = v7;
  uint64_t v8 = *v2;
  uint64_t v9 = v2[1];
  *uint64_t v5 = v6;
  v5[1] = v7;
  _OWORD v5[2] = v8;
  _OWORD v5[3] = v9;
  return sub_1B6647324;
}

void sub_1B6647324(uint64_t **a1)
{
  uint64_t v1 = *a1;
  sub_1B66480E0((uint64_t *)(*a1)[4], (*a1)[5], (*a1)[6], *v1, v1[1], v1[2]);

  free(v1);
}

uint64_t sub_1B664736C@<X0>(uint64_t (*a1)(char *)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1B6647FB0(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1B6647398(uint64_t *a1, uint64_t *a2)
{
  return sub_1B68E6104(*a1, *a2);
}

uint64_t sub_1B66473A4()
{
  return sub_1B6E316B8();
}

uint64_t sub_1B66473C8()
{
  return sub_1B6E316A8();
}

void *sub_1B66473EC@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result - 1;
  return result;
}

void *sub_1B66473FC(void *result)
{
  return result;
}

void *sub_1B664740C@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  *a3 = *result + a2;
  return result;
}

uint64_t sub_1B664741C(void *a1, void *a2)
{
  return *a2 - *a1;
}

void sub_1B664742C(void *a1@<X8>)
{
  *a1 = *(void *)(v1 + 8);
}

void (*sub_1B6647438(void *a1))(void *a1)
{
  uint64_t v2 = malloc(0x30uLL);
  *a1 = v2;
  uint64_t v3 = sub_1B66474F0();
  v2[40] = v4 & 1;
  *((void *)v2 + 4) = v3;
  return sub_1B66474A8;
}

void sub_1B66474A8(void *a1)
{
  uint64_t v1 = (void *)*a1;
  (*(void (**)(void))(*a1 + 32))(*a1);

  free(v1);
}

uint64_t (*sub_1B66474F0())(void)
{
  return nullsub_1;
}

__n128 sub_1B664751C@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  unint64_t v3 = *v2;
  unint64_t v4 = v2[1];
  __n128 result = *a1;
  *a2 = *a1;
  a2[1].n128_u64[0] = v3;
  a2[1].n128_u64[1] = v4;
  return result;
}

void sub_1B6647530(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 8);
  *a1 = 0;
  a1[1] = v2;
}

BOOL sub_1B664753C()
{
  return sub_1B62CB4AC(*(void **)v0, *(void *)(v0 + 8));
}

void sub_1B6647544(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(_WORD *)(a1 + 8) = 256;
}

void *sub_1B6647554@<X0>(void *result@<X0>, uint64_t a2@<X1>, void *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *a3 - *result;
  if (a2 < 1)
  {
    if (v4 <= 0 && v4 > a2) {
      goto LABEL_4;
    }
LABEL_10:
    char v6 = 0;
    uint64_t v5 = *result + a2;
    goto LABEL_11;
  }
  if (v4 < 0 || v4 >= (unint64_t)a2) {
    goto LABEL_10;
  }
LABEL_4:
  uint64_t v5 = 0;
  char v6 = 1;
LABEL_11:
  *(void *)a4 = v5;
  *(unsigned char *)(a4 + 8) = v6;
  return result;
}

void *sub_1B66475A0@<X0>(void *result@<X0>, void *a2@<X8>)
{
  *a2 = *result + 1;
  return result;
}

void *sub_1B66475B0(void *result)
{
  return result;
}

void sub_1B66475C0(void *a1@<X8>)
{
  uint64_t v2 = v1[1];
  *a1 = *v1;
  a1[1] = v2;
  a1[2] = 0;
}

uint64_t sub_1B66475D0()
{
  return *(void *)(v0 + 8);
}

uint64_t sub_1B66475D8()
{
  return 2;
}

uint64_t sub_1B66475E0()
{
  return sub_1B69FEC5C(*(unsigned char **)v0, *(void *)(v0 + 8));
}

uint64_t sub_1B66475E8(void *a1, unsigned char *a2, uint64_t a3)
{
  return sub_1B6B9813C(a1, a2, a3, *(unsigned char **)v3, *(void *)(v3 + 8));
}

uint64_t sub_1B66475F0()
{
  return sub_1B6E31A98();
}

uint64_t sub_1B6647614(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    for (uint64_t i = 1; ; ++i)
    {
      sub_1B6E33098();
      sub_1B6E31948();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (a2 == i) {
        break;
      }
    }
  }
  return 0;
}

uint64_t sub_1B6647764()
{
  return sub_1B6647614(*v0, v0[1]);
}

uint64_t sub_1B664776C(int8x16_t *a1, uint64_t a2)
{
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  uint64_t v4 = 0;
  unint64_t v5 = 0;
  if (a2 + 63 <= 127) {
    unint64_t v6 = 1;
  }
  else {
    unint64_t v6 = (a2 + 63) >> 6;
  }
  if (v6 < 4) {
    goto LABEL_8;
  }
  unint64_t v5 = v6 & 0xFFFFFFFFFFFFFFFCLL;
  uint64_t v7 = a1 + 1;
  int64x2_t v8 = 0uLL;
  unint64_t v9 = v6 & 0xFFFFFFFFFFFFFFFCLL;
  int64x2_t v10 = 0uLL;
  do
  {
    int64x2_t v8 = (int64x2_t)vpadalq_u32((uint64x2_t)v8, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v7[-1]))));
    int64x2_t v10 = (int64x2_t)vpadalq_u32((uint64x2_t)v10, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(*v7))));
    v7 += 2;
    v9 -= 4;
  }
  while (v9);
  uint64_t v4 = vaddvq_s64(vaddq_s64(v10, v8));
  if (v6 != v5)
  {
LABEL_8:
    unint64_t v11 = v6 - v5;
    uint64_t v12 = (int8x8_t *)a1 + v5;
    do
    {
      int8x8_t v13 = *v12++;
      uint8x8_t v14 = (uint8x8_t)vcnt_s8(v13);
      v14.i16[0] = vaddlv_u8(v14);
      v4 += v14.u32[0];
      --v11;
    }
    while (v11);
  }
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  return 0x203A746E756F63;
}

uint64_t sub_1B66478F8()
{
  return sub_1B664776C(*(int8x16_t **)v0, *(void *)(v0 + 8));
}

uint64_t getEnumTagSinglePayload for UnsafeFixedBitSet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 != 1 && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2);
  }
  if (*(void *)a1) {
    int v3 = -1;
  }
  else {
    int v3 = 0;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for UnsafeFixedBitSet(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 1)
  {
    *(void *)__n128 result = a2 - 2;
    *(void *)(result + 8) = 0;
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 2) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)__n128 result = 0;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for UnsafeFixedBitSet()
{
  return &type metadata for UnsafeFixedBitSet;
}

uint64_t sub_1B6647990()
{
  return sub_1B6647BD0(&qword_1E9DCDA98, &qword_1E9DCDAA0, MEMORY[0x1E4FBBC18]);
}

unint64_t sub_1B66479E0()
{
  unint64_t result = qword_1E9DCDAA8;
  if (!qword_1E9DCDAA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDAA8);
  }
  return result;
}

unint64_t sub_1B6647A38()
{
  unint64_t result = qword_1E9DCDAB0;
  if (!qword_1E9DCDAB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDAB0);
  }
  return result;
}

uint64_t sub_1B6647A8C()
{
  return MEMORY[0x1E4FBB568];
}

uint64_t sub_1B6647A98()
{
  return sub_1B6647EA8(&qword_1E9DCDAB8);
}

void sub_1B6647ACC()
{
  if (!qword_1EB980420)
  {
    unint64_t v0 = sub_1B6E320E8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980420);
    }
  }
}

unint64_t sub_1B6647B2C()
{
  unint64_t result = qword_1E9DD3390;
  if (!qword_1E9DD3390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3390);
  }
  return result;
}

uint64_t sub_1B6647B80()
{
  return sub_1B6647BD0(&qword_1E9DCDAC0, &qword_1E9DCDAC8, MEMORY[0x1E4FBC320]);
}

uint64_t sub_1B6647BD0(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6647C14(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1B6647C14(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B66479E0();
    unint64_t v7 = a3(a1, &type metadata for UnsafeFixedBitSet, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1B6647C7C()
{
  return sub_1B6647EA8(&qword_1E9DCDAD0);
}

uint64_t sub_1B6647CB0()
{
  return sub_1B6647D94(&qword_1E9DCDAD8, (void (*)(void))sub_1B6647CF8);
}

unint64_t sub_1B6647CF8()
{
  unint64_t result = qword_1E9DCDAE0;
  if (!qword_1E9DCDAE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDAE0);
  }
  return result;
}

uint64_t sub_1B6647D4C()
{
  return sub_1B6647D94(&qword_1E9DCDAE8, (void (*)(void))sub_1B6647E1C);
}

uint64_t sub_1B6647D94(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6647C14(255, &qword_1E9DCDAC8, MEMORY[0x1E4FBC320]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B6647E1C()
{
  unint64_t result = qword_1E9DCDAF0;
  if (!qword_1E9DCDAF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDAF0);
  }
  return result;
}

uint64_t sub_1B6647E74()
{
  return sub_1B6647EA8(&qword_1E9DCDAF8);
}

uint64_t sub_1B6647EA8(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6647ACC();
    sub_1B6647B2C();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6647F14()
{
  return sub_1B6647D94(&qword_1E9DCDB00, (void (*)(void))sub_1B6647F5C);
}

unint64_t sub_1B6647F5C()
{
  unint64_t result = qword_1E9DCDB08;
  if (!qword_1E9DCDB08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDB08);
  }
  return result;
}

uint64_t sub_1B6647FB0(uint64_t (*a1)(char *))
{
  uint64_t v4 = v1[1];
  if (v4 < 1) {
    return 0;
  }
  unint64_t v6 = (unsigned char *)*v1;
  char v10 = *(unsigned char *)*v1 & 1;
  char v7 = a1(&v10);
  if (!v2)
  {
    uint64_t v3 = 0;
    while ((v7 & 1) == 0)
    {
LABEL_11:
      if (++v3 >= v4) {
        return v3;
      }
      char v10 = (*(void *)&v6[((unint64_t)v3 >> 3) & 0x1FFFFFFFFFFFFFF8] >> v3) & 1;
      char v7 = a1(&v10);
    }
    while (v3 < --v4)
    {
      char v9 = (*(void *)&v6[8 * (v4 >> 6)] >> v4) & 1;
      if ((a1(&v9) & 1) == 0)
      {
        sub_1B68E6104(v3, v4);
        goto LABEL_11;
      }
    }
  }
  return v3;
}

uint64_t *sub_1B66480E0(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 != a3 && a4 != a5)
  {
    uint64_t v6 = *result;
    do
    {
      uint64_t v7 = 1 << a2;
      uint64_t v8 = 8 * (a2 >> 6);
      if ((*(void *)(a6 + 8 * (a4 >> 6)) >> a4)) {
        uint64_t v9 = *(void *)(v6 + v8) | v7;
      }
      else {
        uint64_t v9 = *(void *)(v6 + v8) & ~v7;
      }
      *(void *)(v6 + v8) = v9;
      if (a3 - 1 == a2) {
        break;
      }
      ++a2;
    }
    while (a5 - 1 != a4++);
  }
  return result;
}

uint64_t sub_1B6648164(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v5 = v4;
  swift_getObjectType();
  uint64_t v9 = sub_1B6BBAFE8();
  uint64_t v10 = (void)objc_msgSend(a3, sel_height) * v9;
  if (a4) {
    id v11 = a4;
  }
  else {
    id v11 = objc_msgSend(objc_msgSend(*(id *)(v5 + OBJC_IVAR____TtC3VFX9GPUHelper_commandQueue), sel_commandBuffer), sel_blitCommandEncoder);
  }
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  id v12 = objc_msgSend(a3, sel_width);
  id v13 = objc_msgSend(a3, sel_height);
  id v14 = objc_msgSend(a3, sel_depth);
  sub_1B66483DC(&v21);
  id v15 = v22;
  long long v16 = v21;
  *(void *)&long long v21 = v12;
  *((void *)&v21 + 1) = v13;
  id v22 = v14;
  long long v19 = v16;
  id v20 = v15;
  objc_msgSend(v11, sel_copyFromBuffer_sourceOffset_sourceBytesPerRow_sourceBytesPerImage_sourceSize_toTexture_destinationSlice_destinationLevel_destinationOrigin_, a1, a2, v9, v10, &v21, a3, 0, 0, &v19);
  swift_unknownObjectRelease();
  if (!a4)
  {
    objc_msgSend(v11, sel_endEncoding);
    objc_msgSend((id)swift_unknownObjectRetain(), sel_commit);
    swift_unknownObjectRelease();
  }
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

id sub_1B664834C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for GPUHelper();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

void sub_1B66483DC(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_1B66483E8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t inited = type metadata accessor for ParticleInitScript(0);
  uint64_t v68 = *(void *)(inited - 8);
  uint64_t v69 = inited;
  MEMORY[0x1F4188790](inited, v7);
  uint64_t v63 = (uint64_t)&v60 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B63BDD28(0, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  MEMORY[0x1F4188790](v9 - 8, v10);
  uint64_t v67 = (uint64_t)&v60 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v72 = (char *)&v60 - v14;
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v70 = (uint64_t)&v60 - v17;
  uint64_t updated = type metadata accessor for ParticleUpdateScript(0);
  uint64_t v71 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated, v19);
  long long v21 = (char *)&v60 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B63BDD28(0, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  MEMORY[0x1F4188790](v22 - 8, v23);
  uint64_t v25 = (char *)&v60 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26, v27);
  uint64_t v29 = (char *)&v60 - v28;
  MEMORY[0x1F4188790](v30, v31);
  uint64_t v33 = (char *)&v60 - v32;
  sub_1B633A0FC((uint64_t)v3, (uint64_t)a2, (uint64_t (*)(void))type metadata accessor for VFXObjectScriptsDiff);
  uint64_t v34 = *v3;
  swift_unknownObjectRetain();
  uint64_t v35 = sub_1B664E168(v34, a1);
  swift_unknownObjectRelease();
  swift_bridgeObjectRelease();
  *a2 = v35;
  uint64_t v36 = updated;
  uint64_t v65 = type metadata accessor for VFXObjectScriptsDiff();
  uint64_t v66 = a2;
  uint64_t v64 = (uint64_t)a2 + *(int *)(v65 + 20);
  sub_1B63B14BC(v64, (uint64_t)v29, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript);
  uint64_t v37 = v71;
  sub_1B63B14BC((uint64_t)v29, (uint64_t)v25, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript);
  int v38 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v37 + 48))(v25, 2, updated);
  uint64_t v62 = a1;
  if (v38)
  {
    sub_1B63B14BC((uint64_t)v29, (uint64_t)v33, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript);
    uint64_t v39 = (uint64_t)v72;
    uint64_t v40 = v69;
  }
  else
  {
    sub_1B6650424((uint64_t)v25, (uint64_t)v21, type metadata accessor for ParticleUpdateScript);
    sub_1B633A0FC((uint64_t)v21, (uint64_t)v33, type metadata accessor for ParticleUpdateScript);
    uint64_t v41 = sub_1B6A69708();
    long long v42 = (void *)*((void *)v33 + 4);
    uint64_t v43 = v42[2];
    if (v43)
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v61 = updated;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        long long v42 = sub_1B6C166E4(v42);
      }
      uint64_t v45 = v42 + 4;
      do
      {
        unint64_t v46 = *v45;
        uint64_t v47 = sub_1B664DCE8(v41, *v45);
        swift_retain();
        sub_1B62C6A70(v46);
        *uint64_t v45 = v47;
        v45[2] = 0;
        *((unsigned char *)v45 + 24) = 1;
        swift_release();
        v45 += 4;
        --v43;
      }
      while (v43);
      swift_release();
      *((void *)v33 + 4) = v42;
      uint64_t v40 = v69;
      uint64_t v37 = v71;
      uint64_t v39 = (uint64_t)v72;
      uint64_t v36 = v61;
    }
    else
    {
      swift_release();
      uint64_t v39 = (uint64_t)v72;
      uint64_t v40 = v69;
    }
    sub_1B62E2D10((uint64_t)v21, type metadata accessor for ParticleUpdateScript);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v37 + 56))(v33, 0, 2, v36);
  }
  sub_1B665496C((uint64_t)v29, (uint64_t)&qword_1E9DCDB40, (uint64_t)type metadata accessor for ParticleUpdateScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void))sub_1B63BDD28);
  sub_1B66549CC((uint64_t)v33, v64, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  uint64_t v48 = (uint64_t)v66 + *(int *)(v65 + 24);
  sub_1B63B14BC(v48, v39, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript);
  uint64_t v49 = v67;
  sub_1B63B14BC(v39, v67, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript);
  uint64_t v50 = v68;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v68 + 48))(v49, 2, v40))
  {
    uint64_t v51 = v70;
    sub_1B63B14BC(v39, v70, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript);
  }
  else
  {
    uint64_t v52 = v63;
    sub_1B6650424(v49, v63, type metadata accessor for ParticleInitScript);
    uint64_t v51 = v70;
    sub_1B633A0FC(v52, v70, type metadata accessor for ParticleInitScript);
    uint64_t v53 = sub_1B6A69708();
    uint64_t v54 = *(void **)(v51 + 32);
    uint64_t v55 = v54[2];
    if (v55)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v54 = sub_1B6C166E4(v54);
      }
      unint64_t v56 = v54 + 4;
      do
      {
        unint64_t v57 = *v56;
        uint64_t v58 = sub_1B664DCE8(v53, *v56);
        swift_retain();
        sub_1B62C6A70(v57);
        *unint64_t v56 = v58;
        v56[2] = 0;
        *((unsigned char *)v56 + 24) = 1;
        swift_release();
        v56 += 4;
        --v55;
      }
      while (v55);
      swift_release();
      uint64_t v51 = v70;
      *(void *)(v70 + 32) = v54;
      uint64_t v39 = (uint64_t)v72;
    }
    else
    {
      swift_release();
    }
    sub_1B62E2D10(v63, type metadata accessor for ParticleInitScript);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v50 + 56))(v51, 0, 2, v40);
  }
  sub_1B665496C(v39, (uint64_t)&qword_1E9DCDB48, (uint64_t)type metadata accessor for ParticleInitScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void))sub_1B63BDD28);
  return sub_1B66549CC(v51, v48, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
}

void *sub_1B6648B78@<X0>(uint64_t a1@<X8>)
{
  swift_unknownObjectWeakInit();
  v5[1] = 0;
  swift_unknownObjectWeakAssign();
  _OWORD v5[2] = 0x3E6C6C756E3CLL;
  _OWORD v5[3] = 0xE600000000000000;
  sub_1B6649008((uint64_t)v5, a1);
  type metadata accessor for AuthoringGraph();
  objc_super v2 = (void *)swift_allocObject();
  uint64_t v3 = MEMORY[0x1E4FBC860];
  v2[2] = 0;
  v2[3] = v3;
  v2[4] = 0;
  void v2[5] = 0;
  unint64_t result = sub_1B67DD1F0(v3);
  v2[6] = result;
  *(void *)(a1 + 32) = v2;
  return result;
}

uint64_t sub_1B6648C14(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 16))(v2, ObjectType, a2);
  void v11[2] = a1;
  v11[3] = a2;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  sub_1B68B708C((uint64_t)sub_1B66546B8, (uint64_t)v11, 0, 0x1000000000000000uLL, 1, MEMORY[0x1E4FBC860]);
  uint64_t v8 = sub_1B68C70AC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  type metadata accessor for AuthoringGraph();
  uint64_t v9 = (void *)swift_allocObject();
  v9[2] = 0;
  v9[3] = v7;
  v9[4] = 0;
  void v9[5] = 0;
  v9[6] = sub_1B67DD1F0(v7);
  v9[3] = v8;
  uint64_t result = swift_release();
  *(void *)(v3 + 32) = v9;
  return result;
}

uint64_t sub_1B6648D38@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A18();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B62C550C((uint64_t)v7, v8);
  sub_1B6648FB4();
  sub_1B6E33168();
  sub_1B6649008((uint64_t)v6, (uint64_t)v9);
  sub_1B62C550C((uint64_t)v7, v8);
  sub_1B6649064();
  sub_1B6E33168();
  v9[4] = v6[0];
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  sub_1B664910C(v9, a2);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B6649144((uint64_t)v9);
}

uint64_t sub_1B6648E98(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  sub_1B62C550C((uint64_t)v4, v5);
  sub_1B6649174();
  sub_1B6E332B8();
  if (!v2)
  {
    uint64_t v6 = *(void *)(v1 + 32);
    sub_1B62C550C((uint64_t)v4, v5);
    sub_1B66491C8();
    sub_1B6E332B8();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B6648F84@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B6648D38(a1, a2);
}

uint64_t sub_1B6648F9C(void *a1)
{
  return sub_1B6648E98(a1);
}

unint64_t sub_1B6648FB4()
{
  unint64_t result = qword_1E9DD6680;
  if (!qword_1E9DD6680)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD6680);
  }
  return result;
}

uint64_t sub_1B6649008(uint64_t a1, uint64_t a2)
{
  return a2;
}

unint64_t sub_1B6649064()
{
  unint64_t result = qword_1E9DD2070;
  if (!qword_1E9DD2070)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD2070);
  }
  return result;
}

uint64_t sub_1B66490B8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B664910C(void *a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B6649144(uint64_t a1)
{
  return a1;
}

unint64_t sub_1B6649174()
{
  unint64_t result = qword_1E9DCDB28;
  if (!qword_1E9DCDB28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDB28);
  }
  return result;
}

unint64_t sub_1B66491C8()
{
  unint64_t result = qword_1E9DCDB30;
  if (!qword_1E9DCDB30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDB30);
  }
  return result;
}

uint64_t sub_1B664921C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v223 = a5;
  int v249 = a4;
  int32x4_t v241 = a6;
  sub_1B63BDD28(0, (unint64_t *)&unk_1E9DD5350, type metadata accessor for TriggerScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  uint64_t v229 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v236 = (uint64_t)v194 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v14, v15);
  uint64_t v228 = (uint64_t)v194 - v16;
  uint64_t v227 = type metadata accessor for TriggerScript(0);
  unint64_t v230 = *(void *)(v227 - 8);
  MEMORY[0x1F4188790](v227, v17);
  uint64_t v232 = (uint64_t)v194 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t updated = type metadata accessor for ParticleUpdateScript(0);
  uint64_t v19 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated, v20);
  float32x4_t v222 = (char *)v194 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t inited = type metadata accessor for ParticleInitScript(0);
  uint64_t v22 = *(void *)(inited - 8);
  MEMORY[0x1F4188790](inited, v23);
  uint64_t v221 = (char *)v194 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v239 = type metadata accessor for GraphScript(0);
  uint64_t v220 = *(void *)(v239 - 8);
  MEMORY[0x1F4188790](v239, v25);
  uint64_t v231 = (uint64_t)v194 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B63BDD28(0, (unint64_t *)&unk_1E9DD0AF0, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  uint64_t v238 = *(void *)(v27 - 8);
  MEMORY[0x1F4188790](v27 - 8, v28);
  uint64_t v235 = (uint64_t)v194 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v30, v31);
  uint64_t v226 = (uint64_t)v194 - v32;
  MEMORY[0x1F4188790](v33, v34);
  uint64_t v234 = (uint64_t)v194 - v35;
  MEMORY[0x1F4188790](v36, v37);
  unint64_t v225 = (char *)v194 - v38;
  MEMORY[0x1F4188790](v39, v40);
  uint64_t v233 = (uint64_t)v194 - v41;
  MEMORY[0x1F4188790](v42, v43);
  float32x4_t v224 = (char *)v194 - v44;
  if (a2)
  {
    swift_getObjectType();
    uint64_t v45 = sub_1B6B6FCDC();
  }
  else
  {
    uint64_t v45 = 0;
  }
  uint64_t result = sub_1B698C884(a1, v45, a2 == 0);
  if (v7) {
    return result;
  }
  uint64_t v47 = sub_1B6C48864(1, v249);
  uint64_t v48 = v249;
  sub_1B6BC1F5C(a2, a3, (uint64_t)v249);
  uint64_t v50 = sub_1B6BC20C4(a2, v49, a3, v6, (uint64_t)v48);
  v194[2] = 0;
  sub_1B6BC2264(v50, v51);
  uint64_t v52 = sub_1B67F48EC(MEMORY[0x1E4FBC860]);
  uint64_t v53 = v241;
  *int32x4_t v241 = (uint64_t)v52;
  uint64_t v54 = (int *)type metadata accessor for VFXObjectScriptsDiff();
  uint64_t v55 = *(void (**)(void))(v19 + 56);
  uint64_t v207 = (uint64_t)v53 + v54[5];
  uint64_t v208 = v19 + 56;
  float32x4_t v206 = v55;
  v55();
  unint64_t v56 = *(void (**)(void))(v22 + 56);
  uint64_t v199 = (uint64_t)v53 + v54[6];
  uint64_t v200 = v22 + 56;
  unint64_t v198 = v56;
  v56();
  uint64_t v57 = v54[7];
  uint64_t v58 = sub_1B67F491C(MEMORY[0x1E4FBC860]);
  uint64_t v203 = v57;
  *(uint64_t *)((char *)v53 + v57) = (uint64_t)v58;
  v194[1] = v47;
  uint64_t v215 = sub_1B664F67C();
  BOOL v219 = a2
      && v45 != 0xFFFFFFFFLL
      && (swift_retain(), sub_1B695D774(v45, (uint64_t)&v242), swift_release(), v242)
      && (uint64_t v59 = v246, sub_1B665066C((uint64_t)v242), (v59 & 0x10000000000) != 0);
  uint64_t v60 = sub_1B6B67860((uint64_t)&unk_1F0F5F0B8);
  swift_arrayDestroy();
  uint64_t v61 = v215;
  uint64_t v62 = swift_bridgeObjectRetain();
  uint64_t v63 = sub_1B664B0FC(v62, v60);
  uint64_t v64 = 0;
  uint64_t v65 = *(void *)(v63 + 56);
  uint64_t v211 = v63 + 56;
  uint64_t v66 = 1 << *(unsigned char *)(v63 + 32);
  uint64_t v67 = -1;
  if (v66 < 64) {
    uint64_t v67 = ~(-1 << v66);
  }
  unint64_t v68 = v67 & v65;
  unint64_t v205 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v220 + 56);
  uint64_t v197 = (void (**)(uint64_t, void, uint64_t, int *))(v230 + 56);
  int64_t v212 = (unint64_t)(v66 + 63) >> 6;
  int64_t v196 = v212 - 5;
  uint64_t v220 = v63;
  uint64_t v195 = v63 + 96;
  long long v204 = xmmword_1B6E77050;
  while (1)
  {
    while (1)
    {
      while (1)
      {
        if (v68)
        {
          unint64_t v74 = __clz(__rbit64(v68));
          v68 &= v68 - 1;
          unint64_t v75 = v74 | (v64 << 6);
        }
        else
        {
          uint64_t v76 = v64 + 1;
          if (v64 + 1 >= v212) {
            goto LABEL_113;
          }
          unint64_t v77 = *(void *)(v211 + 8 * v76);
          if (!v77)
          {
            uint64_t v76 = v64 + 2;
            if (v64 + 2 >= v212) {
              goto LABEL_113;
            }
            unint64_t v77 = *(void *)(v211 + 8 * v76);
            if (!v77)
            {
              uint64_t v76 = v64 + 3;
              if (v64 + 3 >= v212) {
                goto LABEL_113;
              }
              unint64_t v77 = *(void *)(v211 + 8 * v76);
              if (!v77)
              {
                uint64_t v76 = v64 + 4;
                if (v64 + 4 >= v212) {
                  goto LABEL_113;
                }
                unint64_t v77 = *(void *)(v211 + 8 * v76);
                if (!v77)
                {
                  while (v196 != v64)
                  {
                    unint64_t v77 = *(void *)(v195 + 8 * v64++);
                    if (v77)
                    {
                      uint64_t v76 = v64 + 4;
                      goto LABEL_32;
                    }
                  }
LABEL_113:
                  swift_release();
                  swift_release();
                  return swift_bridgeObjectRelease();
                }
              }
            }
          }
LABEL_32:
          unint64_t v68 = (v77 - 1) & v77;
          unint64_t v75 = __clz(__rbit64(v77)) + (v76 << 6);
          uint64_t v64 = v76;
        }
        uint64_t v78 = *(void *)(v220 + 48) + 24 * v75;
        uint64_t v80 = *(void *)v78;
        uint64_t v79 = *(void *)(v78 + 8);
        unint64_t v81 = *(unsigned int *)(v78 + 16) | ((unint64_t)*(unsigned __int8 *)(v78 + 20) << 32);
        if (*(unsigned __int8 *)(v78 + 20) >> 6) {
          BOOL v82 = 0;
        }
        else {
          BOOL v82 = v219;
        }
        if (!v82) {
          sub_1B6650588((id)v80, (void *)v79, v81);
        }
        if (!*(void *)(v61 + 16)) {
          goto LABEL_46;
        }
        sub_1B6650588((id)v80, (void *)v79, v81);
        unint64_t v83 = sub_1B69FA920((void *)v80, (void *)v79, v81);
        if ((v84 & 1) == 0)
        {
          sub_1B66505D0((void *)v80, (void *)v79, v81);
LABEL_46:
          uint64_t v99 = 0;
          uint64_t v100 = 0;
          uint64_t v101 = 0;
          uint64_t v102 = 0;
          unint64_t v91 = 1;
          unint64_t v103 = v81 >> 38;
          if (!(v81 >> 38)) {
            goto LABEL_100;
          }
          goto LABEL_49;
        }
        unint64_t v230 = v68;
        uint64_t v85 = v64;
        uint64_t v86 = *(void *)(*(void *)(v61 + 56) + 8 * v83);
        swift_retain();
        sub_1B66505D0((void *)v80, (void *)v79, v81);
        swift_retain();
        char v87 = sub_1B6CD299C((uint64_t)v48);
        type metadata accessor for ScopeChecker();
        swift_allocObject();
        swift_retain();
        sub_1B6CD3320(v86, v48);
        char v88 = sub_1B6CD3E20();
        swift_release();
        if ((v87 & 1) == 0 || (v88 & 1) == 0)
        {
          swift_release_n();
          uint64_t v99 = 0;
          unint64_t v91 = 0;
          uint64_t v100 = 0;
          uint64_t v101 = 0;
          uint64_t v102 = 0;
          uint64_t v48 = v249;
          uint64_t v61 = v215;
          uint64_t v64 = v85;
          unint64_t v68 = v230;
          unint64_t v103 = v81 >> 38;
          if (v81 >> 38) {
            goto LABEL_49;
          }
          goto LABEL_100;
        }
        uint64_t v217 = v80;
        uint64_t v216 = v79;
        uint64_t v89 = sub_1B664FC2C(v80, v79, v81);
        unint64_t v91 = v90;
        swift_release();
        type metadata accessor for GraphCodeGen();
        uint64_t v92 = swift_allocObject();
        *(void *)(v92 + 16) = MEMORY[0x1E4FBC870];
        uint64_t v93 = MEMORY[0x1E4FBC860];
        *(void *)(v92 + 40) = MEMORY[0x1E4FBC860];
        swift_retain_n();
        *(void *)(v92 + 48) = sub_1B67DD364(v93);
        *(void *)(v92 + 56) = sub_1B67F4D68(v93);
        *(void *)(v92 + 64) = sub_1B67DD49C(v93);
        *(unsigned char *)(v92 + 32) = v82;
        *(unsigned char *)(v92 + 33) = 0;
        *(void *)(v92 + 16) = v223;
        *(void *)(v92 + 24) = v86;
        swift_bridgeObjectRetain();
        swift_bridgeObjectRelease();
        uint64_t v214 = v89;
        uint64_t v213 = sub_1B68262EC(v89, v91);
        uint64_t v95 = v94;
        uint64_t v97 = v96;
        LOBYTE(v89) = v98;
        swift_release();
        swift_release_n();
        if (v89) {
          break;
        }
        uint64_t v48 = v249;
        uint64_t v61 = v215;
        uint64_t v64 = v85;
        unint64_t v68 = v230;
        uint64_t v102 = v97;
        uint64_t v79 = v216;
        uint64_t v99 = v214;
        uint64_t v101 = v95;
        uint64_t v80 = v217;
        uint64_t v100 = v213;
        unint64_t v103 = v81 >> 38;
        if (v81 >> 38) {
          goto LABEL_49;
        }
LABEL_100:
        if (v80 == 3)
        {
          if (!v91)
          {
            uint64_t v184 = v199;
            sub_1B665496C(v199, (uint64_t)&qword_1E9DCDB48, (uint64_t)type metadata accessor for ParticleInitScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void))sub_1B63BDD28);
            uint64_t v70 = v184;
            uint64_t v71 = 2;
            goto LABEL_110;
          }
          if (v91 != 1)
          {
            uint64_t v218 = v64;
            uint64_t v172 = (uint64_t)v221;
            uint64_t v185 = &v221[*(int *)(inited + 36)];
            uint64_t v186 = v99;
            uint64_t v187 = v101;
            uint64_t v188 = v102;
            uint64_t v213 = v100;
            uint64_t v189 = type metadata accessor for ScriptIndex();
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v189 - 8) + 56))(v185, 1, 1, v189);
            *(unsigned char *)(v172 + 40) = 1;
            *(unsigned char *)uint64_t v172 = v82;
            sub_1B62D8328(0, (unint64_t *)&qword_1EB980C90, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
            uint64_t v190 = swift_allocObject();
            *(_OWORD *)(v190 + 16) = v204;
            *(void *)(v190 + 32) = v186;
            *(void *)(v190 + 40) = v91;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            unint64_t v191 = v91;
            uint64_t v192 = v213;
            sub_1B6650618(v186, v191);
            *(void *)(v172 + 24) = v190;
            *(void *)(v172 + 32) = v188;
            *(void *)(v172 + 8) = v192;
            *(void *)(v172 + 16) = v187;
            uint64_t v48 = v249;
            uint64_t v193 = v199;
            sub_1B665496C(v199, (uint64_t)&qword_1E9DCDB48, (uint64_t)type metadata accessor for ParticleInitScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void))sub_1B63BDD28);
            sub_1B633A0FC(v172, v193, type metadata accessor for ParticleInitScript);
            uint64_t v64 = v218;
            ((void (*)(uint64_t, void, uint64_t, uint64_t))v198)(v193, 0, 2, inited);
            float32x4_t v182 = type metadata accessor for ParticleInitScript;
            goto LABEL_112;
          }
          uint64_t v171 = v199;
          sub_1B665496C(v199, (uint64_t)&qword_1E9DCDB48, (uint64_t)type metadata accessor for ParticleInitScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void))sub_1B63BDD28);
          uint64_t v70 = v171;
          uint64_t v71 = 1;
LABEL_110:
          uint64_t v72 = inited;
          int v73 = &v228;
LABEL_18:
          ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*(v73 - 32))(v70, v71, 2, v72);
        }
        else
        {
          if (v80 != 5) {
            goto LABEL_116;
          }
          if (!v91) {
            goto LABEL_108;
          }
          if (v91 == 1) {
            goto LABEL_16;
          }
          uint64_t v172 = (uint64_t)v222;
          unint64_t v173 = &v222[*(int *)(updated + 36)];
          uint64_t v214 = v99;
          uint64_t v174 = v101;
          uint64_t v175 = v102;
          uint64_t v213 = v100;
          uint64_t v176 = type metadata accessor for ScriptIndex();
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v176 - 8) + 56))(v173, 1, 1, v176);
          *(unsigned char *)(v172 + 40) = 1;
          *(unsigned char *)(v172 + 24) = v82;
          sub_1B62D8328(0, (unint64_t *)&qword_1EB980C90, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
          uint64_t v177 = swift_allocObject();
          *(_OWORD *)(v177 + 16) = v204;
          uint64_t v178 = v214;
          *(void *)(v177 + 32) = v214;
          *(void *)(v177 + 40) = v91;
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          swift_bridgeObjectRetain();
          unint64_t v179 = v91;
          uint64_t v180 = v213;
          sub_1B6650618(v178, v179);
          *(void *)(v172 + 8) = v174;
          *(void *)(v172 + 16) = v177;
          *(void *)(v172 + 32) = v175;
          *(void *)uint64_t v172 = v180;
          uint64_t v48 = v249;
          uint64_t v181 = v207;
          sub_1B665496C(v207, (uint64_t)&qword_1E9DCDB40, (uint64_t)type metadata accessor for ParticleUpdateScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void))sub_1B63BDD28);
          sub_1B633A0FC(v172, v181, type metadata accessor for ParticleUpdateScript);
          ((void (*)(uint64_t, void, uint64_t, uint64_t))v206)(v181, 0, 2, updated);
          float32x4_t v182 = type metadata accessor for ParticleUpdateScript;
LABEL_112:
          sub_1B62E2D10(v172, v182);
        }
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v99 = 0;
      uint64_t v100 = 0;
      uint64_t v101 = 0;
      uint64_t v102 = 0;
      unint64_t v91 = 1;
      uint64_t v48 = v249;
      uint64_t v61 = v215;
      uint64_t v64 = v85;
      unint64_t v68 = v230;
      uint64_t v79 = v216;
      uint64_t v80 = v217;
      unint64_t v103 = v81 >> 38;
      if (!(v81 >> 38)) {
        goto LABEL_100;
      }
LABEL_49:
      if (v103 == 1)
      {
        if (v91)
        {
          if (v91 != 1)
          {
            unint64_t v230 = v68;
            uint64_t v218 = v64;
            uint64_t v104 = (int *)v227;
            uint64_t v105 = (void *)v79;
            uint64_t v106 = v232;
            uint64_t v107 = v232 + *(int *)(v227 + 40);
            uint64_t v214 = v99;
            uint64_t v210 = v101;
            uint64_t v209 = v102;
            uint64_t v108 = v100;
            uint64_t v109 = type metadata accessor for ScriptIndex();
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v109 - 8) + 56))(v107, 1, 1, v109);
            *(unsigned char *)(v106 + 41) = 1;
            uint64_t v110 = v106 + v104[13];
            uint64_t v217 = v104[12];
            uint64_t v216 = v104[11];
            *(unsigned char *)(v106 + 24) = v82;
            sub_1B62D8328(0, (unint64_t *)&qword_1EB980C90, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
            uint64_t v111 = swift_allocObject();
            *(_OWORD *)(v111 + 16) = v204;
            *(void *)(v106 + 32) = v111;
            *(void *)uint64_t v106 = v209;
            *(void *)(v106 + 8) = v108;
            uint64_t v213 = v108;
            *(void *)(v106 + 16) = v210;
            *(unsigned char *)(v106 + 40) = 0;
            *(void *)(v106 + v216) = v80;
            *(void *)(v111 + 32) = v214;
            *(void *)(v111 + 40) = v91;
            *(void *)(v106 + v217) = v105;
            *(_DWORD *)uint64_t v110 = v81;
            *(unsigned char *)(v110 + 4) = BYTE4(v81) & 1;
            uint64_t v216 = (uint64_t)v105;
            id v112 = v105;
            uint64_t v217 = v80;
            id v113 = (id)v80;
            id v201 = v112;
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            swift_bridgeObjectRetain();
            id v202 = v113;
            uint64_t v80 = sub_1B6CEE02C();
            uint64_t v114 = v228;
            sub_1B633A0FC(v106, v228, type metadata accessor for TriggerScript);
            (*v197)(v114, 0, 2, v104);
            sub_1B62D739C(v114, v236, (uint64_t)&unk_1E9DD5350, (uint64_t)type metadata accessor for TriggerScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B63BDD28);
            int32x2_t v115 = v241;
            uint64_t v116 = v203;
            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            simd_float4x4 v242 = *(void **)((char *)v115 + v116);
            uint64_t v118 = (uint64_t)v242;
            *(uint64_t *)((char *)v115 + v116) = 0x8000000000000000;
            unint64_t v119 = sub_1B6383F34(v80);
            char v121 = v120;
            uint64_t v122 = *(void *)(v118 + 16) + ((v120 & 1) == 0);
            if (*(void *)(v118 + 24) >= v122)
            {
              uint64_t v79 = (uint64_t)v201;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                sub_1B6ACCD88();
              }
            }
            else
            {
              uint64_t v79 = (uint64_t)v201;
              sub_1B6AB7FB8(v122, isUniquelyReferenced_nonNull_native);
              unint64_t v123 = sub_1B6383F34(v80);
              if ((v121 & 1) != (v124 & 1)) {
                goto LABEL_115;
              }
              unint64_t v119 = v123;
            }
            unint64_t v68 = v230;
            uint64_t v165 = v242;
            if (v121)
            {
              sub_1B66549CC(v236, v242[7] + *(void *)(v229 + 72) * v119, (unint64_t *)&unk_1E9DD5350, type metadata accessor for TriggerScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
            }
            else
            {
              v242[(v119 >> 6) + 8] |= 1 << v119;
              *(unsigned char *)(v165[6] + v119) = v80;
              sub_1B62D739C(v236, v165[7] + *(void *)(v229 + 72) * v119, (uint64_t)&unk_1E9DD5350, (uint64_t)type metadata accessor for TriggerScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B63BDD28);
              ++v165[2];
            }
            *(uint64_t *)((char *)v241 + v203) = (uint64_t)v165;

            swift_bridgeObjectRelease();
            sub_1B6650618(v214, v91);
            sub_1B66505D0((void *)v217, (void *)v216, v81);
            sub_1B62E2D10(v232, type metadata accessor for TriggerScript);
            uint64_t v48 = v249;
            goto LABEL_91;
          }
          sub_1B66505D0((void *)v80, (void *)v79, v81);
LABEL_16:
          uint64_t v69 = v207;
          sub_1B665496C(v207, (uint64_t)&qword_1E9DCDB40, (uint64_t)type metadata accessor for ParticleUpdateScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void))sub_1B63BDD28);
          uint64_t v70 = v69;
          uint64_t v71 = 1;
        }
        else
        {
          sub_1B66505D0((void *)v80, (void *)v79, v81);
LABEL_108:
          uint64_t v183 = v207;
          sub_1B665496C(v207, (uint64_t)&qword_1E9DCDB40, (uint64_t)type metadata accessor for ParticleUpdateScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void))sub_1B63BDD28);
          uint64_t v70 = v183;
          uint64_t v71 = 2;
        }
        uint64_t v72 = updated;
        int v73 = &v238;
        goto LABEL_18;
      }
      BOOL v125 = !(v79 | v80) && v81 == 0x8000000000;
      BOOL v126 = !v125;
      LODWORD(v217) = v126;
      uint64_t v218 = v64;
      if (v91) {
        break;
      }
      uint64_t v137 = (void *)v79;
      uint64_t v138 = (uint64_t)v225;
      (*v205)(v225, 2, 2, v239);
      sub_1B62D739C(v138, v234, (uint64_t)&unk_1E9DD0AF0, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B63BDD28);
      uint64_t v139 = v241;
      int v140 = swift_isUniquelyReferenced_nonNull_native();
      simd_float4x4 v242 = (void *)*v139;
      uint64_t v141 = (uint64_t)v242;
      uint64_t *v139 = 0x8000000000000000;
      uint64_t v79 = v217;
      unint64_t v142 = sub_1B6383F34(v217);
      char v144 = v143;
      uint64_t v145 = *(void *)(v141 + 16) + ((v143 & 1) == 0);
      if (*(void *)(v141 + 24) >= v145)
      {
        if ((v140 & 1) == 0) {
          sub_1B6ACCDBC();
        }
      }
      else
      {
        sub_1B6AB7FEC(v145, v140);
        unint64_t v146 = sub_1B6383F34(v79);
        if ((v144 & 1) != (v147 & 1)) {
          goto LABEL_115;
        }
        unint64_t v142 = v146;
      }
      uint64_t v48 = v249;
      float32x2_t v168 = v242;
      if (v144)
      {
        sub_1B66549CC(v234, v242[7] + *(void *)(v238 + 72) * v142, (unint64_t *)&unk_1E9DD0AF0, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
      }
      else
      {
        v242[(v142 >> 6) + 8] |= 1 << v142;
        *(unsigned char *)(v168[6] + v142) = v217;
        sub_1B62D739C(v234, v168[7] + *(void *)(v238 + 72) * v142, (uint64_t)&unk_1E9DD0AF0, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B63BDD28);
        ++v168[2];
      }
      *int32x4_t v241 = (uint64_t)v168;
      swift_bridgeObjectRelease();
      sub_1B66505D0((void *)v80, v137, v81);
LABEL_91:
      uint64_t v61 = v215;
      uint64_t v64 = v218;
    }
    uint64_t v216 = v79;
    unint64_t v230 = v68;
    if (v91 != 1) {
      break;
    }
    uint64_t v127 = (uint64_t)v224;
    (*v205)(v224, 1, 2, v239);
    sub_1B62D739C(v127, v233, (uint64_t)&unk_1E9DD0AF0, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B63BDD28);
    int32x2_t v128 = v241;
    int v129 = swift_isUniquelyReferenced_nonNull_native();
    simd_float4x4 v242 = (void *)*v128;
    uint64_t v130 = (uint64_t)v242;
    *int32x2_t v128 = 0x8000000000000000;
    uint64_t v79 = v217;
    unint64_t v131 = sub_1B6383F34(v217);
    char v133 = v132;
    uint64_t v134 = *(void *)(v130 + 16) + ((v132 & 1) == 0);
    if (*(void *)(v130 + 24) >= v134)
    {
      if ((v129 & 1) == 0) {
        sub_1B6ACCDBC();
      }
    }
    else
    {
      sub_1B6AB7FEC(v134, v129);
      unint64_t v135 = sub_1B6383F34(v79);
      if ((v133 & 1) != (v136 & 1)) {
        goto LABEL_115;
      }
      unint64_t v131 = v135;
    }
    uint64_t v48 = v249;
    unint64_t v166 = (void *)v216;
    BOOL v167 = v242;
    if (v133)
    {
      sub_1B66549CC(v233, v242[7] + *(void *)(v238 + 72) * v131, (unint64_t *)&unk_1E9DD0AF0, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    }
    else
    {
      v242[(v131 >> 6) + 8] |= 1 << v131;
      *(unsigned char *)(v167[6] + v131) = v217;
      sub_1B62D739C(v233, v167[7] + *(void *)(v238 + 72) * v131, (uint64_t)&unk_1E9DD0AF0, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B63BDD28);
      ++v167[2];
    }
    *int32x4_t v241 = (uint64_t)v167;
    swift_bridgeObjectRelease();
    sub_1B66505D0((void *)v80, v166, v81);
LABEL_98:
    uint64_t v61 = v215;
    uint64_t v64 = v218;
    unint64_t v68 = v230;
  }
  uint64_t v148 = v231;
  uint64_t v149 = v231 + *(int *)(v239 + 40);
  uint64_t v150 = v99;
  uint64_t v151 = v101;
  uint64_t v209 = v102;
  uint64_t v152 = v100;
  uint64_t v153 = type metadata accessor for ScriptIndex();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v153 - 8) + 56))(v149, 1, 1, v153);
  *(unsigned char *)(v148 + 41) = 1;
  *(unsigned char *)(v148 + 24) = v82;
  sub_1B62D8328(0, (unint64_t *)&qword_1EB980C90, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
  uint64_t v154 = swift_allocObject();
  *(_OWORD *)(v154 + 16) = v204;
  uint64_t v214 = v150;
  *(void *)(v154 + 32) = v150;
  *(void *)(v154 + 40) = v91;
  *(void *)(v148 + 32) = v154;
  *(void *)uint64_t v148 = v209;
  *(void *)(v148 + 8) = v152;
  uint64_t v213 = v152;
  *(void *)(v148 + 16) = v151;
  *(unsigned char *)(v148 + 40) = 0;
  uint64_t v155 = v226;
  sub_1B633A0FC(v148, v226, type metadata accessor for GraphScript);
  (*v205)((char *)v155, 0, 2, v239);
  sub_1B62D739C(v155, v235, (uint64_t)&unk_1E9DD0AF0, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B63BDD28);
  swift_bridgeObjectRetain();
  uint64_t v210 = v151;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v156 = v241;
  int v157 = swift_isUniquelyReferenced_nonNull_native();
  simd_float4x4 v242 = (void *)*v156;
  uint64_t v158 = (uint64_t)v242;
  uint64_t *v156 = 0x8000000000000000;
  uint64_t v79 = v217;
  unint64_t v159 = sub_1B6383F34(v217);
  char v161 = v160;
  uint64_t v162 = *(void *)(v158 + 16) + ((v160 & 1) == 0);
  if (*(void *)(v158 + 24) >= v162)
  {
    if ((v157 & 1) == 0) {
      sub_1B6ACCDBC();
    }
    goto LABEL_94;
  }
  sub_1B6AB7FEC(v162, v157);
  unint64_t v163 = sub_1B6383F34(v79);
  if ((v161 & 1) == (v164 & 1))
  {
    unint64_t v159 = v163;
LABEL_94:
    float32x2_t v169 = (void *)v216;
    float32x4_t v170 = v242;
    if (v161)
    {
      sub_1B66549CC(v235, v242[7] + *(void *)(v238 + 72) * v159, (unint64_t *)&unk_1E9DD0AF0, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    }
    else
    {
      v242[(v159 >> 6) + 8] |= 1 << v159;
      *(unsigned char *)(v170[6] + v159) = v217;
      sub_1B62D739C(v235, v170[7] + *(void *)(v238 + 72) * v159, (uint64_t)&unk_1E9DD0AF0, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B63BDD28);
      ++v170[2];
    }
    *int32x4_t v241 = (uint64_t)v170;
    swift_bridgeObjectRelease();
    sub_1B6650618(v214, v91);
    sub_1B66505D0((void *)v80, v169, v81);
    sub_1B62E2D10(v231, type metadata accessor for GraphScript);
    uint64_t v48 = v249;
    goto LABEL_98;
  }
LABEL_115:
  sub_1B6E33838();
  __break(1u);
LABEL_116:
  simd_float4x4 v242 = 0;
  unint64_t v243 = 0xE000000000000000;
  sub_1B6E328C8();
  uint64_t v247 = (uint64_t)v242;
  unint64_t v248 = v243;
  sub_1B6E31948();
  simd_float4x4 v242 = (void *)v80;
  unint64_t v243 = v79;
  char v245 = BYTE4(v81);
  int v244 = v81;
  sub_1B6E32B18();
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B664B0FC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = 0;
  uint64_t v22 = a2;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v18 = a1 + 112;
  while (1)
  {
    if (v7)
    {
      unint64_t v9 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v10 = v9 | (v3 << 6);
      goto LABEL_5;
    }
    uint64_t v15 = v3 + 1;
    if (v3 + 1 >= v8) {
      goto LABEL_21;
    }
    unint64_t v16 = *(void *)(v4 + 8 * v15);
    if (!v16)
    {
      uint64_t v15 = v3 + 2;
      if (v3 + 2 >= v8) {
        goto LABEL_21;
      }
      unint64_t v16 = *(void *)(v4 + 8 * v15);
      if (!v16)
      {
        uint64_t v15 = v3 + 3;
        if (v3 + 3 >= v8) {
          goto LABEL_21;
        }
        unint64_t v16 = *(void *)(v4 + 8 * v15);
        if (!v16)
        {
          uint64_t v15 = v3 + 4;
          if (v3 + 4 >= v8) {
            goto LABEL_21;
          }
          unint64_t v16 = *(void *)(v4 + 8 * v15);
          if (!v16)
          {
            uint64_t v15 = v3 + 5;
            if (v3 + 5 >= v8) {
              goto LABEL_21;
            }
            unint64_t v16 = *(void *)(v4 + 8 * v15);
            if (!v16) {
              break;
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v16 - 1) & v16;
    unint64_t v10 = __clz(__rbit64(v16)) + (v15 << 6);
    uint64_t v3 = v15;
LABEL_5:
    uint64_t v11 = *(void *)(a1 + 48) + 24 * v10;
    id v12 = *(id *)v11;
    uint64_t v13 = *(void **)(v11 + 8);
    unint64_t v14 = *(unsigned int *)(v11 + 16) | ((unint64_t)*(unsigned __int8 *)(v11 + 20) << 32);
    sub_1B6650588(*(id *)v11, v13, v14);
    sub_1B67E9A30((uint64_t)v19, (unint64_t)v12, (unint64_t)v13, v14);
    sub_1B66505D0(v19[0], v19[1], v20 | ((unint64_t)v21 << 32));
  }
  while (v8 - 6 != v3)
  {
    unint64_t v16 = *(void *)(v18 + 8 * v3++);
    if (v16)
    {
      uint64_t v15 = v3 + 5;
      goto LABEL_20;
    }
  }
LABEL_21:
  swift_release();
  return v22;
}

uint64_t sub_1B664B2A8(unint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v53 = a2;
  unint64_t v9 = HIDWORD(a1);
  uint64_t v10 = type metadata accessor for GraphScript(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  unint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = 0;
  sub_1B63BDD28(0, (unint64_t *)&unk_1E9DD0AF0, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  MEMORY[0x1F4188790](v15 - 8, v16);
  uint64_t v18 = (char *)&v50 - v17;
  unint64_t v55 = a1;
  unint64_t v51 = v9;
  BOOL v19 = a1 == -1 && v9 == 0;
  int v20 = v19;
  int v54 = v20;
  if (v19 || (swift_retain(), uint64_t v21 = sub_1B695D868(v55), swift_release(), !v21))
  {
    uint64_t v21 = (uint64_t)sub_1B67F4314(MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRelease();
  }
  sub_1B63B14BC(a4, (uint64_t)v18, (unint64_t *)&unk_1E9DD0AF0, type metadata accessor for GraphScript);
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v18, 2, v10);
  if (!v22)
  {
    unint64_t v28 = sub_1B6650424((uint64_t)v18, (uint64_t)v14, type metadata accessor for GraphScript);
    if (*(void *)(v21 + 16) && (unint64_t v28 = sub_1B6383F34(a3), (v29 & 1) != 0))
    {
      uint64_t v30 = (unsigned int *)(*(void *)(v21 + 56) + 8 * v28);
      unsigned int v32 = *v30;
      unint64_t v31 = v30[1];
    }
    else
    {
      MEMORY[0x1F4188790](v28, v29);
      *(&v50 - 2) = (uint64_t)v14;
      LOBYTE(v56) = 1;
      uint64_t v33 = v52;
      unint64_t v35 = sub_1B664BD8C(0x100000000uLL, (void (*)(uint64_t))sub_1B665048C, (uint64_t)(&v50 - 4), v34);
      unsigned int v32 = v35;
      uint64_t v52 = v33;
      unint64_t v31 = HIDWORD(v35);
      sub_1B6C31078(v35, (uint64_t)&type metadata for IsSubEntityOf, (uint64_t)&off_1F0F5FCE0, v55);
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v56 = v21;
    uint64_t v37 = v32 | (v31 << 32);
    sub_1B67E46AC(v37, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v21 = v56;
    swift_bridgeObjectRelease();
    sub_1B6850390((uint64_t)v14, v37);
    sub_1B62E2D10((uint64_t)v14, type metadata accessor for GraphScript);
    goto LABEL_28;
  }
  if (v22 != 1) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v21 + 16);
  if (!v23) {
    goto LABEL_21;
  }
  unint64_t v24 = sub_1B6383F34(a3);
  if ((v25 & 1) == 0)
  {
    unint64_t v23 = 0;
LABEL_21:
    uint64_t v27 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  uint64_t v26 = (unsigned int *)(*(void *)(v21 + 56) + 8 * v24);
  uint64_t v27 = *v26;
  unint64_t v23 = (unint64_t)v26[1] << 32;
LABEL_22:
  uint64_t v38 = v23 | v27;
  uint64_t v39 = sub_1B695D840(v23 | v27);
  if (v39)
  {
    sub_1B691FFF0(v5, v39, v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1B69DE144(v38);
  unint64_t v41 = sub_1B6383F34(a3);
  if (v42)
  {
    unint64_t v43 = v41;
    char v44 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v56 = v21;
    if ((v44 & 1) == 0)
    {
      sub_1B6ACD608();
      uint64_t v21 = v56;
    }
    sub_1B6AC89D4(v43, v21);
    swift_bridgeObjectRelease();
  }
LABEL_28:
  if (!v54)
  {
    uint64_t v56 = v21;
    uint64_t v45 = v53;
    uint64_t v46 = swift_retain();
    MEMORY[0x1F4188790](v46, v47);
    *(&v50 - 4) = (uint64_t)&v56;
    int v48 = v51;
    *((_DWORD *)&v50 - 6) = v55;
    *((_DWORD *)&v50 - 5) = v48;
    *(&v50 - 2) = v45;
    swift_bridgeObjectRetain_n();
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B66504F8);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B664B754(unint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v53 = a2;
  unint64_t v9 = HIDWORD(a1);
  uint64_t v10 = type metadata accessor for TriggerScript(0);
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  unint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v52 = 0;
  sub_1B63BDD28(0, (unint64_t *)&unk_1E9DD5350, type metadata accessor for TriggerScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  MEMORY[0x1F4188790](v15 - 8, v16);
  uint64_t v18 = (char *)&v50 - v17;
  unint64_t v55 = a1;
  unint64_t v51 = v9;
  BOOL v19 = a1 == -1 && v9 == 0;
  int v20 = v19;
  int v54 = v20;
  if (v19 || (swift_retain(), uint64_t v21 = sub_1B695D868(v55), swift_release(), !v21))
  {
    uint64_t v21 = (uint64_t)sub_1B67F4314(MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRelease();
  }
  sub_1B63B14BC(a4, (uint64_t)v18, (unint64_t *)&unk_1E9DD5350, type metadata accessor for TriggerScript);
  int v22 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 48))(v18, 2, v10);
  if (!v22)
  {
    unint64_t v28 = sub_1B6650424((uint64_t)v18, (uint64_t)v14, type metadata accessor for TriggerScript);
    if (*(void *)(v21 + 16) && (unint64_t v28 = sub_1B6383F34(a3), (v29 & 1) != 0))
    {
      uint64_t v30 = (unsigned int *)(*(void *)(v21 + 56) + 8 * v28);
      unsigned int v32 = *v30;
      unint64_t v31 = v30[1];
    }
    else
    {
      MEMORY[0x1F4188790](v28, v29);
      *(&v50 - 2) = (uint64_t)v14;
      LOBYTE(v56) = 1;
      uint64_t v33 = v52;
      unint64_t v35 = sub_1B664BC00(0x100000000uLL, (void (*)(uint64_t))sub_1B665051C, (uint64_t)(&v50 - 4), v34);
      unsigned int v32 = v35;
      uint64_t v52 = v33;
      unint64_t v31 = HIDWORD(v35);
      sub_1B6C31078(v35, (uint64_t)&type metadata for IsSubEntityOf, (uint64_t)&off_1F0F5FCE0, v55);
    }
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v56 = v21;
    uint64_t v37 = v32 | (v31 << 32);
    sub_1B67E46AC(v37, a3, isUniquelyReferenced_nonNull_native);
    uint64_t v21 = v56;
    swift_bridgeObjectRelease();
    sub_1B6850378((uint64_t)v14, v37);
    sub_1B62E2D10((uint64_t)v14, type metadata accessor for TriggerScript);
    goto LABEL_28;
  }
  if (v22 != 1) {
    goto LABEL_28;
  }
  unint64_t v23 = *(void *)(v21 + 16);
  if (!v23) {
    goto LABEL_21;
  }
  unint64_t v24 = sub_1B6383F34(a3);
  if ((v25 & 1) == 0)
  {
    unint64_t v23 = 0;
LABEL_21:
    uint64_t v27 = 0xFFFFFFFFLL;
    goto LABEL_22;
  }
  uint64_t v26 = (unsigned int *)(*(void *)(v21 + 56) + 8 * v24);
  uint64_t v27 = *v26;
  unint64_t v23 = (unint64_t)v26[1] << 32;
LABEL_22:
  uint64_t v38 = v23 | v27;
  uint64_t v39 = sub_1B695D840(v23 | v27);
  if (v39)
  {
    sub_1B691FFF0(v5, v39, v40);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  sub_1B69DE144(v38);
  unint64_t v41 = sub_1B6383F34(a3);
  if (v42)
  {
    unint64_t v43 = v41;
    char v44 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v56 = v21;
    if ((v44 & 1) == 0)
    {
      sub_1B6ACD608();
      uint64_t v21 = v56;
    }
    sub_1B6AC89D4(v43, v21);
    swift_bridgeObjectRelease();
  }
LABEL_28:
  if (!v54)
  {
    uint64_t v56 = v21;
    uint64_t v45 = v53;
    uint64_t v46 = swift_retain();
    MEMORY[0x1F4188790](v46, v47);
    *(&v50 - 4) = (uint64_t)&v56;
    int v48 = v51;
    *((_DWORD *)&v50 - 6) = v55;
    *((_DWORD *)&v50 - 5) = v48;
    *(&v50 - 2) = v45;
    swift_bridgeObjectRetain_n();
    sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6654A3C);
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B664BC00(unint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 32);
  ecs_stack_allocator_push_snapshot(v7);
  int64_t v8 = ecs_stack_allocator_allocate(v7, 16, 8);
  *int64_t v8 = type metadata accessor for TriggerScript(0);
  v8[1] = &off_1F0F625B0;
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v10 = v9 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v11 = *(os_unfair_lock_s **)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v11);
  uint64_t v12 = sub_1B69E2E04((uint64_t)v8, 1, MEMORY[0x1E4FBC860]);
  uint64_t v14 = v13;
  uint64_t v15 = sub_1B637FE60(v12);
  if ((v16 & 1) != 0 || (v17 = sub_1B63581E4(v14, v15), int v18 = v17, (v17 & 0x100000000) != 0))
  {
    uint64_t v19 = sub_1B6A00108(v8, 1);
    int v18 = sub_1B637C7BC(v12, v14, v19, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v20 = *(void *)(*(void *)(v9 + 80) + 8 * v18 + 32);
  uint64_t v21 = *(os_unfair_lock_s **)(v10 + 24);
  swift_retain();
  os_unfair_lock_unlock(v21);
  swift_release();
  uint64_t v22 = sub_1B6B22F4C(v20, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a4, a2, a3);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a4 + 32));
  return v22;
}

uint64_t sub_1B664BD8C(unint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a4 + 32);
  ecs_stack_allocator_push_snapshot(v7);
  int64_t v8 = ecs_stack_allocator_allocate(v7, 16, 8);
  *int64_t v8 = type metadata accessor for GraphScript(0);
  v8[1] = &off_1F0F55610;
  uint64_t v9 = *(void *)(a4 + 16);
  uint64_t v10 = v9 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  uint64_t v11 = *(os_unfair_lock_s **)(v9 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
  swift_retain();
  os_unfair_lock_lock(v11);
  uint64_t v12 = sub_1B69E2E04((uint64_t)v8, 1, MEMORY[0x1E4FBC860]);
  uint64_t v14 = v13;
  uint64_t v15 = sub_1B637FE60(v12);
  if ((v16 & 1) != 0 || (v17 = sub_1B63581E4(v14, v15), int v18 = v17, (v17 & 0x100000000) != 0))
  {
    uint64_t v19 = sub_1B6A00108(v8, 1);
    int v18 = sub_1B637C7BC(v12, v14, v19, MEMORY[0x1E4FBC860]);
    swift_release();
  }
  uint64_t v20 = *(void *)(*(void *)(v9 + 80) + 8 * v18 + 32);
  uint64_t v21 = *(os_unfair_lock_s **)(v10 + 24);
  swift_retain();
  os_unfair_lock_unlock(v21);
  swift_release();
  uint64_t v22 = sub_1B6B22F20(v20, 1, 1, a1 | ((HIDWORD(a1) & 1) << 32), a4, a2, a3);
  swift_release();
  ecs_stack_allocator_pop_snapshot(*(void *)(a4 + 32));
  return v22;
}

void sub_1B664BF18(unint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = v3;
  uint64_t v116 = a3;
  uint64_t v117 = a2;
  unint64_t v6 = HIDWORD(a1);
  sub_1B63BDD28(0, (unint64_t *)&unk_1E9DD5350, type metadata accessor for TriggerScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  uint64_t v112 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7 - 8, v8);
  uint64_t v111 = (uint64_t)&v104 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v106 = (char *)&v104 - v12;
  sub_1B63BDD28(0, (unint64_t *)&unk_1E9DD0AF0, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  uint64_t v110 = *(void *)(v13 - 8);
  MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v109 = (uint64_t)&v104 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16, v17);
  int32x2_t v115 = (char *)&v104 - v18;
  uint64_t updated = type metadata accessor for ParticleUpdateScript(0);
  uint64_t v114 = *(void *)(updated - 8);
  MEMORY[0x1F4188790](updated, v20);
  unint64_t v113 = (unint64_t)&v104 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B63BDD28(0, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  MEMORY[0x1F4188790](v22 - 8, v23);
  char v25 = (char *)&v104 - v24;
  uint64_t inited = type metadata accessor for ParticleInitScript(0);
  uint64_t v27 = *(void *)(inited - 8);
  MEMORY[0x1F4188790](inited, v28);
  uint64_t v30 = (char *)&v104 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B63BDD28(0, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  MEMORY[0x1F4188790](v31 - 8, v32);
  uint64_t v34 = (char *)&v104 - v33;
  unint64_t v118 = a1;
  unint64_t v105 = v6;
  BOOL v35 = a1 == -1 && v6 == 0;
  int v36 = v35;
  int v107 = v36;
  if (!v35)
  {
    swift_retain();
    BOOL v37 = sub_1B62EC0CC((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1F0F76688, v118);
    swift_release();
    if (v37)
    {
      uint64_t v124 = 0;
      v125[0] = 0;
      unint64_t v123 = MEMORY[0x1E4FBC860];
      uint64_t v38 = v117;
      uint64_t v39 = v118;
      sub_1B6CCEC50(inited, (uint64_t)&off_1F0F796D0, 5u, v118, v117, v125);
      uint64_t v40 = updated;
      sub_1B6CCEC7C(updated, (uint64_t)&off_1F0F82FB8, 5u, v39, v38, &v124);
      uint64_t v41 = type metadata accessor for VFXObjectScriptsDiff();
      sub_1B63B14BC((uint64_t)v116 + *(int *)(v41 + 24), (uint64_t)v34, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript);
      int v42 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 48))(v34, 2, inited);
      if (v42)
      {
        uint64_t v43 = v114;
        if (v42 == 1 && v125[0])
        {
          uint64_t v44 = swift_retain_n();
          MEMORY[0x1BA9B3870](v44);
          if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_1B6E31C78();
          }
          sub_1B6E31CC8();
          sub_1B6E31C48();
          swift_release();
        }
      }
      else
      {
        sub_1B6650424((uint64_t)v34, (uint64_t)v30, type metadata accessor for ParticleInitScript);
        uint64_t v43 = v114;
        if (v125[0])
        {
          uint64_t v45 = *(void *)(v125[0] + 24);
          swift_retain();
          sub_1B6850240((uint64_t)v30, v45);
        }
        else
        {
          uint64_t v46 = v117;
          swift_retain();
          uint64_t v47 = sub_1B664FDD4(inited, (uint64_t)&off_1F0F796D0, 2, v118, v46);
          sub_1B6850240((uint64_t)v30, *(void *)(v47 + 24));
          swift_release();
        }
        swift_release();
        sub_1B62E2D10((uint64_t)v30, type metadata accessor for ParticleInitScript);
      }
      sub_1B63B14BC((uint64_t)v116 + *(int *)(v41 + 20), (uint64_t)v25, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript);
      int v48 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v43 + 48))(v25, 2, v40);
      if (v48)
      {
        if (v48 == 1 && v124)
        {
          uint64_t v49 = swift_retain_n();
          MEMORY[0x1BA9B3870](v49);
          if (*(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
            sub_1B6E31C78();
          }
          sub_1B6E31CC8();
          sub_1B6E31C48();
          swift_release();
        }
      }
      else
      {
        uint64_t v50 = v113;
        sub_1B6650424((uint64_t)v25, v113, type metadata accessor for ParticleUpdateScript);
        if (v124)
        {
          uint64_t v51 = *(void *)(v124 + 24);
          swift_retain();
          sub_1B6850258(v50, v51);
        }
        else
        {
          uint64_t v52 = v117;
          swift_retain();
          uint64_t v53 = sub_1B664FDD4(v40, (uint64_t)&off_1F0F82FB8, 3, v118, v52);
          sub_1B6850258(v50, *(void *)(v53 + 24));
          swift_release();
        }
        swift_release();
        sub_1B62E2D10(v50, type metadata accessor for ParticleUpdateScript);
      }
      unint64_t v54 = v123;
      if (v123 >> 62)
      {
        swift_bridgeObjectRetain();
        uint64_t v55 = sub_1B6E32C18();
        swift_bridgeObjectRelease();
        if (v55) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v55 = *(void *)((v123 & 0xFFFFFFFFFFFFFF8) + 0x10);
        if (v55)
        {
LABEL_31:
          uint64_t v56 = 0;
          unint64_t v113 = v54 & 0xC000000000000001;
          unint64_t v108 = v54 + 32;
          uint64_t v114 = v4;
          do
          {
            if (v113)
            {
              uint64_t v57 = MEMORY[0x1BA9B4580](v56, v54);
            }
            else
            {
              uint64_t v57 = *(void *)(v108 + 8 * v56);
              swift_retain();
            }
            uint64_t v58 = *(void *)(v57 + 16);
            swift_unownedRetainStrong();
            int v59 = *(_DWORD *)(v57 + 24);
            int v60 = *(_DWORD *)(v57 + 28);
            swift_release();
            uint64_t v61 = *(void *)(v58 + 208);
            uint64_t v62 = *(void *)(v61 + 16);
            swift_retain();
            if (v62)
            {
              unint64_t v63 = sub_1B62C1A30((uint64_t)&type metadata for IsSubEntityOf);
              if (v64)
              {
                uint64_t v65 = *(void *)(*(void *)(v61 + 56) + 24 * v63);
                uint64_t v66 = *(void *)(v65 + 16);
                swift_bridgeObjectRetain();
                if (!v66)
                {
LABEL_44:
                  swift_release();
                  swift_bridgeObjectRelease();
                  goto LABEL_57;
                }
                uint64_t v67 = (unsigned int *)(v65 + 44);
                while (*(v67 - 3) != v59 || *(v67 - 2) != v60)
                {
                  v67 += 4;
                  if (!--v66) {
                    goto LABEL_44;
                  }
                }
                unsigned int v70 = *(v67 - 1);
                unsigned int v69 = *v67;
                swift_release();
                swift_bridgeObjectRelease();
                uint64_t v71 = *(void *)(v57 + 16);
                swift_unownedRetainStrong();
                swift_release();
                uint64_t v4 = v114;
                if (v70 == -1)
                {
                  if (!v69) {
                    goto LABEL_63;
                  }
                  swift_retain();
LABEL_62:
                  swift_release();
                  swift_release();
                  goto LABEL_58;
                }
                uint64_t v72 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
                swift_retain();
                if ((v70 & 0x80000000) != 0) {
                  goto LABEL_62;
                }
                if (*(void *)(v71 + v72 + 8) <= (int)v70) {
                  goto LABEL_62;
                }
                uint64_t v73 = *(void *)(v71 + v72);
                if (v69 != -1 && *(_DWORD *)(v73 + 12 * (int)v70 + 8) != v69) {
                  goto LABEL_62;
                }
                uint64_t v74 = *(void *)(*(void *)(*(void *)(v71 + 80) + 8 * *(__int16 *)(v73 + 12 * (int)v70 + 6) + 32)
                                + 16);
                uint64_t v75 = *(void *)(v74 + 128);
                if (*(void *)(v75 + 16))
                {
                  unint64_t v76 = sub_1B62C1A30((uint64_t)&type metadata for EmitterDescription);
                  if (v77)
                  {
                    uint64_t v78 = *(ValueMetadata **)(*(void *)(v74 + 24)
                                            + 16 * *(void *)(*(void *)(v75 + 56) + 8 * v76)
                                            + 32);
                    swift_release();
                    if (v78 == &type metadata for EmitterDescription)
                    {
                      char v121 = &off_1F0F53E58;
                      *(void *)&long long v119 = __PAIR64__(v69, v70);
                      char v120 = &type metadata for VFXEmitter;
                      *((void *)&v119 + 1) = v71;
                      sub_1B62C15C4(&v119, (uint64_t)v122);
                      uint64_t v79 = sub_1B62C14BC(v122, v122[3]);
                      sub_1B664D4E0(v57, *v79, v79[1]);
                      char v81 = v80;
                      int v82 = v80;
                      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v122);
                      uint64_t v4 = v114;
                      if (v82 != 5) {
                        sub_1B664D668(v57, v81, v118, v117);
                      }
LABEL_63:
                      swift_release();
                      goto LABEL_58;
                    }
                    goto LABEL_57;
                  }
                }
              }
            }
            swift_release();
LABEL_57:
            swift_release();
            uint64_t v4 = v114;
LABEL_58:
            ++v56;
          }
          while (v56 != v55);
        }
      }
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
    }
  }
  uint64_t v83 = (uint64_t)v106;
  uint64_t v84 = qword_1F0F6F698;
  uint64_t v85 = (uint64_t)v115;
  if (qword_1F0F6F698)
  {
    uint64_t v86 = &byte_1F0F6F6A8;
    uint64_t v87 = v4;
    do
    {
      while (1)
      {
        unsigned int v90 = *v86++;
        char v89 = v90;
        if (v90 > 1) {
          break;
        }
        uint64_t v91 = *v116;
        if (*(void *)(*v116 + 16) && (unint64_t v92 = sub_1B6383F34(v89), (v93 & 1) != 0))
        {
          uint64_t v94 = v109;
          sub_1B63B14BC(*(void *)(v91 + 56) + *(void *)(v110 + 72) * v92, v109, (unint64_t *)&unk_1E9DD0AF0, type metadata accessor for GraphScript);
          uint64_t v95 = v94;
          uint64_t v4 = v87;
          sub_1B62D739C(v95, v85, (uint64_t)&unk_1E9DD0AF0, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B63BDD28);
        }
        else
        {
          uint64_t v88 = type metadata accessor for GraphScript(0);
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56))(v85, 1, 2, v88);
        }
        sub_1B664B2A8(v118, v117, v89, v85);
        sub_1B665496C(v85, (uint64_t)&unk_1E9DD0AF0, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void))sub_1B63BDD28);
        if (!--v84) {
          goto LABEL_79;
        }
      }
      uint64_t v96 = *(uint64_t *)((char *)v116 + *(int *)(type metadata accessor for VFXObjectScriptsDiff() + 28));
      if (*(void *)(v96 + 16) && (unint64_t v97 = sub_1B6383F34(v89), (v98 & 1) != 0))
      {
        uint64_t v99 = v111;
        sub_1B63B14BC(*(void *)(v96 + 56) + *(void *)(v112 + 72) * v97, v111, (unint64_t *)&unk_1E9DD5350, type metadata accessor for TriggerScript);
        uint64_t v100 = v99;
        uint64_t v4 = v87;
        uint64_t v101 = v83;
        sub_1B62D739C(v100, v83, (uint64_t)&unk_1E9DD5350, (uint64_t)type metadata accessor for TriggerScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B63BDD28);
      }
      else
      {
        uint64_t v102 = type metadata accessor for TriggerScript(0);
        uint64_t v101 = v83;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v102 - 8) + 56))(v83, 1, 2, v102);
      }
      sub_1B664B754(v118, v117, v89, v101);
      sub_1B665496C(v101, (uint64_t)&unk_1E9DD5350, (uint64_t)type metadata accessor for TriggerScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void))sub_1B63BDD28);
      uint64_t v85 = (uint64_t)v115;
      --v84;
    }
    while (v84);
  }
LABEL_79:
  if (!v107
    && (uint64_t)(v118 << 32) >= (uint64_t)0xFFFFFFFF00000001
    && (int)v118 < *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    uint64_t v103 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v105 == -1 || *(_DWORD *)(v103 + 12 * (int)v118 + 8) == v105) {
      sub_1B635ACD8(*(uint64_t **)(*(void *)(v4 + 136) + 8 * *(int *)(v103 + 12 * (int)v118) + 32));
    }
  }
}

uint64_t *sub_1B664CCC0()
{
  uint64_t v2 = v1;
  uint64_t v3 = v0;
  uint64_t v4 = type metadata accessor for VFXObjectScriptsDiff();
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (uint64_t *)((char *)&v54 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0));
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v11 = (uint64_t *)((char *)&v54 - v10);
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v79 = qword_1EB997A18;
  int v80 = 0;
  char v81 = 2;
  uint64_t v82 = 0;
  char v83 = 2;
  uint64_t v84 = 0;
  swift_retain();
  sub_1B6A6DCF0(3, (uint64_t)v69);
  swift_release();
  v77[0] = v69[0];
  v77[1] = v69[1];
  uint64_t v78 = v70;
  uint64_t v12 = *(void *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  sub_1B62C9DA8(v0, (uint64_t)v77, 0x200000000, v71);
  sub_1B62D739C((uint64_t)v71, (uint64_t)v76, (uint64_t)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8328);
  if (*(void *)&v76[0])
  {
    v76[8] = v76[2];
    v76[9] = v76[3];
    v76[10] = v76[4];
    v76[11] = v76[5];
    v76[6] = v76[0];
    v76[7] = v76[1];
    uint64_t v13 = sub_1B6363800();
    sub_1B632F170(v71);
    uint64_t v14 = *(void *)(v13 + 16);
    if (v14)
    {
LABEL_5:
      uint64_t v62 = v12;
      uint64_t v58 = v11;
      int v59 = v7;
      uint64_t v15 = 0;
      uint64_t v16 = (void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      uint64_t v17 = v13 + 32;
      unint64_t v56 = 0x80000001B6F317B0;
      uint64_t v57 = OBJC_IVAR____TtC3VFX13EntityManager_logger;
      uint64_t v63 = v13;
      uint64_t v64 = v3;
      do
      {
        uint64_t v18 = (int *)(v17 + 8 * v15);
        int v19 = v18[1];
        uint64_t v20 = *v18;
        BOOL v21 = v20 == -1 && v19 == 0;
        if (!v21 && (v20 & 0x80000000) == 0 && v16[1] > v20)
        {
          uint64_t v22 = *v16 + 12 * (int)v20;
          if (v19 == -1 || *(_DWORD *)(v22 + 8) == v19)
          {
            uint64_t v24 = *(void *)(*(void *)(v3 + 136) + 8 * *(int *)(*v16 + 12 * (int)v20) + 32);
            uint64_t v25 = *(void *)(v24 + 48);
            uint64_t v26 = *(void *)(v25 + 16);
            if (v26)
            {
              int v27 = *(__int16 *)(v22 + 4);
              uint64_t v28 = (void *)(v25 + 56);
              while ((ValueMetadata *)*(v28 - 3) != &type metadata for GraphComponent)
              {
                v28 += 5;
                if (!--v26) {
                  goto LABEL_9;
                }
              }
              uint64_t v29 = v2;
              sub_1B664910C((void *)(*(void *)(v24 + 128) + *v28 + 40 * v27), (uint64_t)v67);
              sub_1B664D9F0((uint64_t)v67, (uint64_t)v66);
              uint64_t v30 = MEMORY[0x1BA9B8670](v66);
              uint64_t v31 = v66[1];
              sub_1B66490B8((uint64_t)v66);
              if (v30)
              {
                id v85 = v29;
                uint64_t v61 = (char *)objc_msgSend(objc_allocWithZone((Class)type metadata accessor for GraphDiagnostics()), sel_init);
                swift_getObjectType();
                uint64_t v60 = v30;
                uint64_t v32 = sub_1B6B6FCDC();
                if (v32 == 0xFFFFFFFFLL)
                {
                  id v33 = v85;
                  uint64_t v3 = v64;
                }
                else
                {
                  unint64_t v34 = v32;
                  uint64_t v55 = v31;
                  uint64_t v3 = v64;
                  sub_1B695D880(v32, (uint64_t)v65);
                  if (v65[0] || v65[1] != 1)
                  {
                    sub_1B664DA4C((uint64_t)v65, (uint64_t)v66);
                    swift_retain();
                    unint64_t v54 = sub_1B6D413A0(1);
                    swift_release();
                    id v35 = v85;
                    sub_1B664921C((uint64_t)v54, v60, v55, v61, MEMORY[0x1E4FBC870], v59);
                    id v85 = v35;
                    if (v35)
                    {
                      if (*(void *)(*(void *)&v61[OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics] + 16))
                      {
                        sub_1B6649144((uint64_t)v66);
                        swift_release();
                      }
                      else
                      {
                        uint64_t v37 = *(void *)(v3 + v57);
                        swift_retain();
                        uint64_t v38 = sub_1B6E32148();
                        v65[0] = 0;
                        (*(void (**)(uint64_t, void *, unint64_t, unint64_t))(*(void *)v37 + 88))(v38, v65, 0xD00000000000003ELL, v56);
                        swift_release();
                        swift_release();

                        sub_1B6649144((uint64_t)v66);
                      }
                      id v33 = 0;
                    }
                    else
                    {
                      int v36 = v58;
                      sub_1B6650424((uint64_t)v59, (uint64_t)v58, (uint64_t (*)(void))type metadata accessor for VFXObjectScriptsDiff);
                      sub_1B664BF18(v34, v3, v36);
                      swift_release();
                      sub_1B6649144((uint64_t)v66);
                      sub_1B62E2D10((uint64_t)v36, (uint64_t (*)(void))type metadata accessor for VFXObjectScriptsDiff);
                      id v33 = v85;
                    }
                  }
                  else
                  {
                    sub_1B665496C((uint64_t)v65, (uint64_t)&unk_1E9DCDB38, (uint64_t)&type metadata for GraphComponent, MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1B62D8328);
                    id v33 = v85;
                  }
                }
                uint64_t v39 = v61;
                uint64_t v40 = *(void *)&v61[OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics];
                if (*(void *)(v40 + 16))
                {
                  id v53 = *(id *)(v40 + 32);
                  swift_willThrow();

                  swift_unknownObjectRelease();
                  sub_1B62CA064((uint64_t)v69);
                  sub_1B6649144((uint64_t)v67);
                  return (uint64_t *)swift_bridgeObjectRelease();
                }
                sub_1B6649144((uint64_t)v67);

                swift_unknownObjectRelease();
                uint64_t v2 = v33;
              }
              else
              {
                sub_1B6649144((uint64_t)v67);
                uint64_t v2 = v29;
                uint64_t v3 = v64;
              }
            }
          }
        }
LABEL_9:
        ++v15;
      }
      while (v15 != v14);
    }
  }
  else
  {
    uint64_t v13 = MEMORY[0x1E4FBC860];
    uint64_t v14 = *(void *)(MEMORY[0x1E4FBC860] + 16);
    if (v14) {
      goto LABEL_5;
    }
  }
  swift_bridgeObjectRelease();
  sub_1B62C9DA8(v3, (uint64_t)v77, 0x200000000, v72);
  sub_1B62D739C((uint64_t)v72, (uint64_t)v73, (uint64_t)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8328);
  if (!v73[0]) {
    return (uint64_t *)sub_1B62CA064((uint64_t)v69);
  }
  if (v75 >= 1 && (uint64_t v41 = v74) != 0)
  {
    id v85 = v2;
    uint64_t v42 = v73[5];
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v43 = 48 * v41;
    uint64_t v44 = (uint64_t *)(v42 + 40);
    do
    {
      uint64_t v49 = *v44;
      uint64_t v50 = *(os_unfair_lock_s **)(*v44 + 376);
      swift_retain();
      os_unfair_lock_lock(v50);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v49 + 344));
      LODWORD(v50) = *(_DWORD *)(v49 + 24);
      swift_retain();
      uint64_t v68 = 0;
      memset(v67, 0, sizeof(v67));
      memset(v66, 0, 40);
      int v51 = sub_1B637F628((int)v50, 0, 0, (uint64_t)&type metadata for GraphComponent, (uint64_t)&off_1F0F64250, (uint64_t)v67, (uint64_t)v66);
      swift_release();
      sub_1B62E2D10((uint64_t)v66, (uint64_t (*)(void))sub_1B63864B4);
      sub_1B62E2D10((uint64_t)v67, (uint64_t (*)(void))sub_1B63864B4);
      if (sub_1B63B4340(v51))
      {
        sub_1B66603E4(v51);
      }
      else
      {
        uint64_t v45 = *(void *)(v49 + 232);
        uint64_t v46 = *(void *)(v49 + 240);
        char v47 = *(unsigned char *)(v49 + 120);
        uint64_t v48 = *(unsigned int *)(v49 + 28);
        v67[0] = *(unsigned char *)(v49 + 32);
        sub_1B628EEF4(v45, v46, v51, v47, v48 | ((unint64_t)v67[0] << 32));
      }
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 376));
      swift_release();
      v44 += 6;
      v43 -= 48;
    }
    while (v43);
    sub_1B632F170(v72);
    sub_1B62CA064((uint64_t)v69);
    return sub_1B632F170(v72);
  }
  else
  {
    sub_1B62CA064((uint64_t)v69);
    return sub_1B632F170(v72);
  }
}

uint64_t sub_1B664D4E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1B6C2C804(byte_1F0F5BD40, a2, a3);
  uint64_t v7 = *(void *)(v6 + 16);
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = (_DWORD *)(v6 + 36);
    while (*(v9 - 1) != *(_DWORD *)(a1 + 24) || *v9 != *(_DWORD *)(a1 + 28))
    {
      v9 += 4;
      if (v7 == ++v8) {
        goto LABEL_8;
      }
    }
    goto LABEL_30;
  }
LABEL_8:
  swift_bridgeObjectRelease();
  uint64_t v11 = sub_1B6C2C804(byte_1F0F5BD41, a2, a3);
  uint64_t v12 = *(void *)(v11 + 16);
  if (v12)
  {
    uint64_t v8 = 0;
    uint64_t v13 = (_DWORD *)(v11 + 36);
    while (*(v13 - 1) != *(_DWORD *)(a1 + 24) || *v13 != *(_DWORD *)(a1 + 28))
    {
      v13 += 4;
      if (v12 == ++v8) {
        goto LABEL_15;
      }
    }
    goto LABEL_30;
  }
LABEL_15:
  swift_bridgeObjectRelease();
  uint64_t v15 = sub_1B6C2C804(byte_1F0F5BD42, a2, a3);
  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    uint64_t v8 = 0;
    uint64_t v17 = (_DWORD *)(v15 + 36);
    while (*(v17 - 1) != *(_DWORD *)(a1 + 24) || *v17 != *(_DWORD *)(a1 + 28))
    {
      v17 += 4;
      if (v16 == ++v8) {
        goto LABEL_22;
      }
    }
    goto LABEL_30;
  }
LABEL_22:
  swift_bridgeObjectRelease();
  uint64_t v19 = sub_1B6C2C804(byte_1F0F5BD43, a2, a3);
  uint64_t v20 = *(void *)(v19 + 16);
  if (v20)
  {
    uint64_t v8 = 0;
    BOOL v21 = (_DWORD *)(v19 + 36);
    while (*(v21 - 1) != *(_DWORD *)(a1 + 24) || *v21 != *(_DWORD *)(a1 + 28))
    {
      v21 += 4;
      if (v20 == ++v8) {
        goto LABEL_29;
      }
    }
LABEL_30:
    swift_bridgeObjectRelease();
    return v8;
  }
LABEL_29:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B664D668(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 32);
  uint64_t v9 = swift_conformsToProtocol2();
  if (v9) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 0;
  }
  if (!v9) {
    uint64_t v8 = 0;
  }
  swift_retain();
  if (v8 && (uint64_t v11 = *((void *)sub_1B666EA80(v8, v10) + 2), swift_bridgeObjectRelease(), v11))
  {
    char v32 = a2;
    unint64_t v33 = a3;
    uint64_t v12 = sub_1B6C2C804(a2, a3, a4);
    uint64_t v37 = v12;
    uint64_t v13 = *(void *)(v12 + 16);
    if (v13)
    {
      uint64_t v14 = (char *)v12;
      uint64_t v15 = 0;
      uint64_t v16 = 0;
      while (1)
      {
        uint64_t v17 = v16 + 1;
        if (*(_DWORD *)(v12 + v15 + 32) == *(_DWORD *)(a1 + 24) && *(_DWORD *)(v12 + v15 + 36) == *(_DWORD *)(a1 + 28)) {
          break;
        }
        v15 += 16;
        ++v16;
        if (v13 == v17)
        {
          uint64_t v16 = *(void *)(v12 + 16);
          goto LABEL_21;
        }
      }
      if (v13 - 1 != v16)
      {
        uint64_t v13 = v16 + 1;
        do
        {
          int v25 = *(_DWORD *)&v14[v15 + 48];
          int v26 = *(_DWORD *)&v14[v15 + 52];
          if (v25 != *(_DWORD *)(a1 + 24) || v26 != *(_DWORD *)(a1 + 28))
          {
            if (v13 != v16)
            {
              uint64_t v28 = &v14[16 * v16 + 32];
              uint64_t v29 = *(void *)v28;
              uint64_t v30 = *((void *)v28 + 1);
              uint64_t v31 = *(void *)&v14[v15 + 56];
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                uint64_t v14 = sub_1B6C16748((uint64_t)v14);
              }
              uint64_t v23 = &v14[16 * v16];
              *((_DWORD *)v23 + 8) = v25;
              *((_DWORD *)v23 + 9) = v26;
              *((void *)v23 + 5) = v31;
              uint64_t v24 = &v14[v15];
              *((void *)v24 + 6) = v29;
              *((void *)v24 + 7) = v30;
              uint64_t v37 = (uint64_t)v14;
            }
            ++v16;
          }
          ++v13;
          v15 += 16;
        }
        while (v13 != *((void *)v14 + 2));
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
LABEL_21:
    sub_1B68E9E60(v16, v13);
    uint64_t v20 = v37;
    uint64_t v21 = *(void *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
    swift_retain();
    if (v21)
    {
      char v22 = *(unsigned char *)(v21 + 80);
      MEMORY[0x1BA9B8670](v21 + 48);
      uint64_t v21 = *(void *)(v21 + 56);
    }
    else
    {
      char v22 = 0;
    }
    swift_unknownObjectUnownedInit();
    v34[0] = a4;
    v34[2] = v21;
    swift_unknownObjectUnownedAssign();
    swift_bridgeObjectRetain();
    swift_unownedRetain();
    swift_unknownObjectRelease();
    char v35 = v22;
    sub_1B636C4E0((uint64_t)v34, (uint64_t)v36);
    sub_1B6C2CF84((uint64_t)v36, v32, v20, v33);
    sub_1B636C450((uint64_t)v36);
    if (v22) {
      sub_1B6A667F0(1);
    }
    swift_bridgeObjectRelease();
    swift_release();
    sub_1B6AAEAC4(*(void *)(a1 + 24), v33);
    swift_retain();
    sub_1B6A60D04(0, a4, a1);
    swift_bridgeObjectRelease();
    return swift_release();
  }
  else
  {
    swift_retain();
    sub_1B6A60CD8(0, a4, a1);
    return swift_release();
  }
}

uint64_t type metadata accessor for VFXObjectScriptsDiff()
{
  uint64_t result = qword_1E9DCDBD8;
  if (!qword_1E9DCDBD8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

uint64_t sub_1B664D9F0(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B664DA4C(uint64_t a1, uint64_t a2)
{
  *(void *)(a2 + 8) = *(void *)(a1 + 8);
  *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
  *(void *)(a2 + 32) = *(void *)(a1 + 32);
  return a2;
}

uint64_t type metadata accessor for VFXObjectScriptsDiff.Diff()
{
  return sub_1B62C36EC();
}

void *sub_1B664DAB0(uint64_t a1)
{
  sub_1B665077C();
  uint64_t v2 = sub_1B6E32C28();
  uint64_t v3 = 0;
  uint64_t v26 = a1;
  int v27 = (void *)v2;
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v5 = a1 + 64;
  uint64_t v4 = v6;
  uint64_t v7 = 1 << *(unsigned char *)(v5 - 32);
  uint64_t v8 = -1;
  if (v7 < 64) {
    uint64_t v8 = ~(-1 << v7);
  }
  unint64_t v9 = v8 & v4;
  int64_t v24 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v25 = v2 + 64;
  uint64_t v23 = v5;
  uint64_t v22 = v5 + 40;
  while (1)
  {
    if (v9)
    {
      uint64_t v28 = (v9 - 1) & v9;
      uint64_t v29 = v3;
      unint64_t v10 = __clz(__rbit64(v9)) | (v3 << 6);
      goto LABEL_5;
    }
    uint64_t v19 = v3 + 1;
    if (v3 + 1 >= v24) {
      return v27;
    }
    unint64_t v20 = *(void *)(v23 + 8 * v19);
    if (!v20)
    {
      uint64_t v19 = v3 + 2;
      if (v3 + 2 >= v24) {
        return v27;
      }
      unint64_t v20 = *(void *)(v23 + 8 * v19);
      if (!v20)
      {
        uint64_t v19 = v3 + 3;
        if (v3 + 3 >= v24) {
          return v27;
        }
        unint64_t v20 = *(void *)(v23 + 8 * v19);
        if (!v20)
        {
          uint64_t v19 = v3 + 4;
          if (v3 + 4 >= v24) {
            return v27;
          }
          unint64_t v20 = *(void *)(v23 + 8 * v19);
          if (!v20) {
            break;
          }
        }
      }
    }
LABEL_18:
    uint64_t v28 = (v20 - 1) & v20;
    unint64_t v10 = __clz(__rbit64(v20)) + (v19 << 6);
    uint64_t v29 = v19;
LABEL_5:
    uint64_t v11 = *(void *)(v26 + 48) + 24 * v10;
    uint64_t v12 = *(void **)v11;
    uint64_t v13 = *(void **)(v11 + 8);
    uint64_t v14 = *(unsigned __int8 *)(v11 + 20);
    uint64_t v15 = *(unsigned int *)(v11 + 16);
    uint64_t v16 = *(void *)(*(void *)(v26 + 56) + 8 * v10);
    type metadata accessor for Graph();
    uint64_t v17 = swift_allocObject();
    *(void *)(v17 + 16) = v16;
    *(void *)(v25 + ((v10 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v10;
    uint64_t v18 = v27[6] + 24 * v10;
    *(void *)uint64_t v18 = v12;
    *(void *)(v18 + 8) = v13;
    *(unsigned char *)(v18 + 20) = v14;
    *(_DWORD *)(v18 + 16) = v15;
    *(void *)(v27[7] + 8 * v10) = v17;
    ++v27[2];
    sub_1B6650588(v12, v13, v15 | (v14 << 32));
    swift_bridgeObjectRetain();
    uint64_t v3 = v29;
    unint64_t v9 = v28;
  }
  while (v24 - 5 != v3)
  {
    unint64_t v20 = *(void *)(v22 + 8 * v3++);
    if (v20)
    {
      uint64_t v19 = v3 + 4;
      goto LABEL_18;
    }
  }
  return v27;
}

uint64_t sub_1B664DCE8(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = a2;
  switch(a2 >> 60)
  {
    case 1uLL:
      uint64_t v3 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x30);
      uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      uint64_t v5 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x50);
      char v6 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x58);
      __int16 v7 = *(_WORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x5A);
      long long v61 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      sub_1B664D9F0((a2 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v66);
      uint64_t v8 = swift_allocObject();
      sub_1B6649008((uint64_t)v66, v8 + 16);
      *(void *)(v8 + 48) = v3;
      *(void *)(v8 + 56) = v4;
      *(_OWORD *)(v8 + 64) = v61;
      *(void *)(v8 + 80) = v5;
      *(unsigned char *)(v8 + 88) = v6;
      unint64_t v2 = v8 | 0x1000000000000000;
      *(_WORD *)(v8 + 90) = v7;
      goto LABEL_13;
    case 2uLL:
      sub_1B664D9F0((a2 & 0xFFFFFFFFFFFFFFFLL) + 16, (uint64_t)v66);
      uint64_t v9 = swift_allocObject();
      sub_1B6649008((uint64_t)v66, v9 + 16);
      return v9 | 0x2000000000000000;
    case 3uLL:
      uint64_t v10 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v11 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v59 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      long long v62 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
      uint64_t v12 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      char v13 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      __int16 v14 = *(_WORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x42);
      uint64_t v15 = *(void *)(a1 + 24);
      if (*(void *)(v15 + 16))
      {
        uint64_t v16 = sub_1B62BE38C(*(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10));
        if (v17) {
          uint64_t v59 = *(void *)(*(void *)(v15 + 56) + 8 * v16);
        }
      }
      uint64_t v18 = swift_allocObject();
      *(void *)(v18 + 16) = v59;
      *(void *)(v18 + 24) = v10;
      *(void *)(v18 + 32) = v11;
      *(_OWORD *)(v18 + 40) = v62;
      *(void *)(v18 + 56) = v12;
      *(unsigned char *)(v18 + 64) = v13;
      unint64_t v2 = v18 | 0x3000000000000000;
      *(_WORD *)(v18 + 66) = v14;
      goto LABEL_13;
    case 4uLL:
      uint64_t v19 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v20 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      uint64_t v60 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      long long v63 = *(_OWORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x28);
      uint64_t v21 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x38);
      char v22 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x40);
      __int16 v23 = *(_WORD *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x42);
      char v24 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x44);
      uint64_t v25 = *(void *)(a1 + 24);
      if (*(void *)(v25 + 16))
      {
        uint64_t v26 = sub_1B62BE38C(*(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10));
        if (v27) {
          uint64_t v60 = *(void *)(*(void *)(v25 + 56) + 8 * v26);
        }
      }
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = v60;
      *(void *)(v28 + 24) = v19;
      *(void *)(v28 + 32) = v20;
      *(_OWORD *)(v28 + 40) = v63;
      *(void *)(v28 + 56) = v21;
      *(unsigned char *)(v28 + 64) = v22;
      *(_WORD *)(v28 + 66) = v23;
      unint64_t v2 = v28 | 0x4000000000000000;
      *(unsigned char *)(v28 + 68) = v24;
LABEL_13:
      swift_bridgeObjectRetain();
      swift_retain();
      break;
    case 7uLL:
      unint64_t v29 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      int v30 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      char v31 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x21);
      char v32 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x22);
      char v33 = *(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x23);
      if (*(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20))
      {
        uint64_t v34 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        if (v30 == 1) {
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        unint64_t v46 = HIDWORD(v29);
        uint64_t v47 = *(void *)(a1 + 24);
        if (*(void *)(v47 + 16))
        {
          uint64_t v48 = sub_1B62BE38C(*(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10));
          if (v49)
          {
            uint64_t v50 = (_DWORD *)(*(void *)(v47 + 56) + 8 * v48);
            LODWORD(v29) = *v50;
            unint64_t v46 = v50[1];
          }
        }
        uint64_t v34 = 0;
        unint64_t v29 = v29 | (v46 << 32);
      }
      uint64_t v51 = swift_allocObject();
      *(void *)(v51 + 16) = v29;
      *(void *)(v51 + 24) = v34;
      *(unsigned char *)(v51 + 32) = v30;
      *(unsigned char *)(v51 + 33) = v31;
      *(unsigned char *)(v51 + 34) = v32;
      unint64_t v2 = v51 | 0x7000000000000000;
      *(unsigned char *)(v51 + 35) = v33;
      break;
    case 8uLL:
      unint64_t v35 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      int v36 = *(unsigned __int8 *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20);
      if (*(unsigned char *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x20))
      {
        uint64_t v37 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
        if (v36 == 1) {
          swift_bridgeObjectRetain();
        }
      }
      else
      {
        unint64_t v52 = HIDWORD(v35);
        uint64_t v53 = *(void *)(a1 + 24);
        if (*(void *)(v53 + 16))
        {
          uint64_t v54 = sub_1B62BE38C(*(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10));
          if (v55)
          {
            unint64_t v56 = (_DWORD *)(*(void *)(v53 + 56) + 8 * v54);
            LODWORD(v35) = *v56;
            unint64_t v52 = v56[1];
          }
        }
        uint64_t v37 = 0;
        unint64_t v35 = v35 | (v52 << 32);
      }
      uint64_t v57 = swift_allocObject();
      *(void *)(v57 + 16) = v35;
      *(void *)(v57 + 24) = v37;
      *(unsigned char *)(v57 + 32) = v36;
      unint64_t v2 = v57 | 0x8000000000000000;
      break;
    case 0xBuLL:
      uint64_t v38 = *(void *)(a1 + 24);
      uint64_t v64 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      if (*(void *)(v38 + 16))
      {
        uint64_t v39 = sub_1B62BE38C(*(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10));
        if (v40) {
          uint64_t v64 = *(void *)(*(void *)(v38 + 56) + 8 * v39);
        }
      }
      uint64_t v41 = swift_allocObject();
      *(void *)(v41 + 16) = v64;
      unint64_t v2 = v41 | 0xB000000000000000;
      break;
    case 0xCuLL:
      uint64_t v42 = *(void *)(a1 + 24);
      uint64_t v65 = *(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      if (*(void *)(v42 + 16))
      {
        uint64_t v43 = sub_1B62BE38C(*(void *)((a2 & 0xFFFFFFFFFFFFFFFLL) + 0x10));
        if (v44) {
          uint64_t v65 = *(void *)(*(void *)(v42 + 56) + 8 * v43);
        }
      }
      uint64_t v45 = swift_allocObject();
      *(void *)(v45 + 16) = v65;
      unint64_t v2 = v45 | 0xC000000000000000;
      break;
    case 0xFuLL:
      if (a2 != 0xF000000000000000) {
        unint64_t v2 = 0xF000000000000008;
      }
      break;
    default:
      swift_retain();
      break;
  }
  return v2;
}

uint64_t sub_1B664E168(uint64_t a1, uint64_t a2)
{
  uint64_t v181 = a2;
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  char v160 = (char *)&v149 - v6;
  uint64_t v176 = type metadata accessor for ScriptIndex();
  uint64_t v7 = *(void *)(v176 - 8);
  MEMORY[0x1F4188790](v176, v8);
  uint64_t v166 = (uint64_t)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v171 = (uint64_t)&v149 - v12;
  sub_1B63BDD28(0, (unint64_t *)&qword_1EB97D9C0, MEMORY[0x1E4F27990], v3);
  MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v153 = (char *)&v149 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16, v17);
  int v157 = (char *)&v149 - v18;
  MEMORY[0x1F4188790](v19, v20);
  uint64_t v156 = (char *)&v149 - v21;
  MEMORY[0x1F4188790](v22, v23);
  uint64_t v175 = (char *)&v149 - v24;
  uint64_t v178 = sub_1B6E31118();
  uint64_t v25 = *(void *)(v178 - 8);
  MEMORY[0x1F4188790](v178, v26);
  uint64_t v155 = (char *)&v149 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v28, v29);
  char v161 = (char *)&v149 - v30;
  MEMORY[0x1F4188790](v31, v32);
  unint64_t v163 = (char *)&v149 - v33;
  MEMORY[0x1F4188790](v34, v35);
  uint64_t v151 = (char *)&v149 - v36;
  MEMORY[0x1F4188790](v37, v38);
  float32x2_t v168 = (char *)&v149 - v39;
  uint64_t v40 = type metadata accessor for GraphScript(0);
  uint64_t v41 = *(void *)(v40 - 8);
  MEMORY[0x1F4188790](v40, v42);
  uint64_t v184 = (uint64_t)&v149 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B63BDD28(0, (unint64_t *)&unk_1E9DD0AF0, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  uint64_t v187 = *(void *)(v44 - 8);
  MEMORY[0x1F4188790](v44 - 8, v45);
  uint64_t v189 = (char *)&v149 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v47, v48);
  unint64_t v191 = (void (**)(int64_t, uint64_t))((char *)&v149 - v49);
  MEMORY[0x1F4188790](v50, v51);
  uint64_t v190 = (char *)&v149 - v52;
  sub_1B665487C();
  uint64_t v53 = sub_1B6E32C28();
  uint64_t v54 = 0;
  uint64_t v55 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v56 = -1;
  if (v55 < 64) {
    uint64_t v56 = ~(-1 << v55);
  }
  unint64_t v57 = v56 & *(void *)(a1 + 64);
  uint64_t v186 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v41 + 48);
  uint64_t v174 = (unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  uint64_t v177 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v25 + 56);
  float32x4_t v170 = (void (**)(char *, uint64_t, uint64_t))(v25 + 32);
  float32x2_t v169 = (uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  uint64_t v158 = (void (**)(char *, uint64_t, uint64_t))(v25 + 16);
  uint64_t v152 = v25;
  char v164 = (void (**)(uint64_t, uint64_t))(v25 + 8);
  unint64_t v159 = (void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  unint64_t v179 = (void (**)(void *, void, uint64_t, uint64_t))(v41 + 56);
  uint64_t v188 = v53;
  uint64_t v185 = v53 + 64;
  int64_t v183 = (unint64_t)(v55 + 63) >> 6;
  int64_t v173 = v183 - 5;
  uint64_t v182 = a1 + 64;
  uint64_t v172 = a1 + 104;
  uint64_t v58 = a1;
  uint64_t v180 = a1;
  uint64_t v192 = v40;
  while (1)
  {
    if (v57)
    {
      uint64_t v195 = (v57 - 1) & v57;
      unint64_t v62 = __clz(__rbit64(v57)) | (v54 << 6);
      uint64_t v63 = (uint64_t)v189;
      uint64_t v64 = (uint64_t)v190;
    }
    else
    {
      uint64_t v65 = v54 + 1;
      uint64_t v63 = (uint64_t)v189;
      uint64_t v64 = (uint64_t)v190;
      if (v54 + 1 >= v183) {
        return v188;
      }
      unint64_t v66 = *(void *)(v182 + 8 * v65);
      if (!v66)
      {
        uint64_t v65 = v54 + 2;
        if (v54 + 2 >= v183) {
          return v188;
        }
        unint64_t v66 = *(void *)(v182 + 8 * v65);
        if (!v66)
        {
          uint64_t v65 = v54 + 3;
          if (v54 + 3 >= v183) {
            return v188;
          }
          unint64_t v66 = *(void *)(v182 + 8 * v65);
          if (!v66)
          {
            uint64_t v65 = v54 + 4;
            if (v54 + 4 >= v183) {
              return v188;
            }
            unint64_t v66 = *(void *)(v182 + 8 * v65);
            if (!v66)
            {
              while (v173 != v54)
              {
                unint64_t v66 = *(void *)(v172 + 8 * v54++);
                if (v66)
                {
                  uint64_t v65 = v54 + 4;
                  goto LABEL_19;
                }
              }
              return v188;
            }
          }
        }
      }
LABEL_19:
      uint64_t v195 = (v66 - 1) & v66;
      unint64_t v62 = __clz(__rbit64(v66)) + (v65 << 6);
      uint64_t v54 = v65;
    }
    uint64_t v67 = *(void *)(v58 + 56);
    int v193 = *(unsigned __int8 *)(*(void *)(v58 + 48) + v62);
    unint64_t v68 = *(void *)(v187 + 72) * v62;
    sub_1B63B14BC(v67 + v68, v64, (unint64_t *)&unk_1E9DD0AF0, type metadata accessor for GraphScript);
    sub_1B63B14BC(v64, v63, (unint64_t *)&unk_1E9DD0AF0, type metadata accessor for GraphScript);
    int v69 = (*v186)(v63, 2, v192);
    unint64_t v194 = v68;
    if (v69)
    {
      uint64_t v59 = v54;
      uint64_t v60 = v191;
      sub_1B63B14BC(v64, (uint64_t)v191, (unint64_t *)&unk_1E9DD0AF0, type metadata accessor for GraphScript);
      goto LABEL_5;
    }
    uint64_t v70 = v184;
    sub_1B6650424(v63, v184, type metadata accessor for GraphScript);
    uint64_t v71 = v191;
    sub_1B633A0FC(v70, (uint64_t)v191, type metadata accessor for GraphScript);
    uint64_t v72 = v181;
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v74 = Strong;
      int v75 = *(unsigned __int8 *)(v72 + OBJC_IVAR____TtC3VFX15DefaultRemapper_isReversed);
      unint64_t v76 = *(void **)(Strong + 16);
      objc_msgSend(v76, sel_lock);
      uint64_t v77 = 24;
      if (v75) {
        uint64_t v77 = 32;
      }
      uint64_t v78 = *(void *)(v74 + v77);
      swift_bridgeObjectRetain();
      uint64_t v79 = v76;
      uint64_t v80 = v192;
      objc_msgSend(v79, sel_unlock);
      swift_release();
    }
    else
    {
      uint64_t v78 = MEMORY[0x1E4FBC868];
      uint64_t v80 = v192;
    }
    type metadata accessor for RemapContext();
    uint64_t inited = swift_initStackObject();
    uint64_t v82 = sub_1B67DD1D8(MEMORY[0x1E4FBC860]);
    *(void *)(inited + 24) = v78;
    *(void *)(inited + 32) = v82;
    *(unsigned char *)(inited + 16) = 0;
    char v83 = (void *)*v71;
    uint64_t v84 = *(void *)(*v71 + 16);
    if (v84)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        char v83 = sub_1B6C166E4(v83);
      }
      id v85 = v83 + 4;
      do
      {
        unint64_t v86 = *v85;
        uint64_t v87 = sub_1B664DCE8(inited, *v85);
        swift_retain();
        sub_1B62C6A70(v86);
        *id v85 = v87;
        v85[2] = 0;
        *((unsigned char *)v85 + 24) = 1;
        swift_release();
        v85 += 4;
        --v84;
      }
      while (v84);
      uint64_t v71 = v191;
      uint64_t v80 = v192;
      *unint64_t v191 = v83;
      uint64_t v64 = (uint64_t)v190;
      if (*(unsigned char *)(inited + 16) == 1) {
        break;
      }
    }
LABEL_40:
    uint64_t v59 = v54;
    swift_release();
    sub_1B62E2D10(v184, type metadata accessor for GraphScript);
    (*v179)(v71, 0, 2, v80);
    uint64_t v58 = v180;
    uint64_t v60 = v71;
LABEL_5:
    sub_1B665496C(v64, (uint64_t)&unk_1E9DD0AF0, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void))sub_1B63BDD28);
    *(void *)(v185 + ((v62 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v62;
    uint64_t v61 = v188;
    *(unsigned char *)(*(void *)(v188 + 48) + v62) = v193;
    sub_1B62D739C((uint64_t)v60, *(void *)(v61 + 56) + v194, (uint64_t)&unk_1E9DD0AF0, (uint64_t)type metadata accessor for GraphScript, (uint64_t)type metadata accessor for VFXObjectScriptsDiff.Diff, (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B63BDD28);
    ++*(void *)(v61 + 16);
    uint64_t v54 = v59;
    unint64_t v57 = v195;
  }
  uint64_t v88 = (uint64_t)v71 + *(int *)(v80 + 40);
  if ((*v174)(v88, 1, v176))
  {
    uint64_t v89 = (uint64_t)v175;
    (*v177)(v175, 1, 1, v178);
LABEL_38:
    sub_1B665496C(v89, (uint64_t)&qword_1EB97D9C0, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1B63BDD28);
LABEL_39:
    uint64_t v80 = v192;
    goto LABEL_40;
  }
  uint64_t v167 = v88;
  uint64_t v90 = v171;
  sub_1B633A0FC(v88, v171, (uint64_t (*)(void))type metadata accessor for ScriptIndex);
  uint64_t v91 = v166;
  sub_1B633A0FC(v90, v166, (uint64_t (*)(void))type metadata accessor for ScriptIndex);
  if (swift_getEnumCaseMultiPayload() == 1)
  {
    uint64_t v89 = (uint64_t)v175;
    uint64_t v92 = v178;
    (*v170)(v175, v91, v178);
    char v93 = *v177;
    (*v177)((char *)v89, 0, 1, v92);
  }
  else
  {
    char v93 = *v177;
    uint64_t v89 = (uint64_t)v175;
    uint64_t v92 = v178;
    (*v177)(v175, 1, 1, v178);
  }
  sub_1B62E2D10(v171, (uint64_t (*)(void))type metadata accessor for ScriptIndex);
  uint64_t v165 = *v169;
  int v94 = v165(v89, 1, v92);
  uint64_t v71 = v191;
  if (v94 == 1) {
    goto LABEL_38;
  }
  uint64_t v162 = v93;
  uint64_t v95 = *v170;
  uint64_t v96 = (uint64_t)v168;
  (*v170)(v168, v89, v92);
  if (*(unsigned char *)(inited + 16) != 1)
  {
    uint64_t v106 = (uint64_t)v160;
    (*v158)(v160, v96, v92);
    uint64_t v107 = v176;
    uint64_t v108 = v96;
    uint64_t v71 = v191;
LABEL_70:
    (*v164)(v108, v92);
    swift_storeEnumTagMultiPayload();
    (*v159)(v106, 0, 1, v107);
    sub_1B66549CC(v106, v167, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
    goto LABEL_39;
  }
  uint64_t v154 = v95;
  uint64_t v97 = *(void *)(inited + 32);
  uint64_t v71 = v191;
  if (!*(void *)(v97 + 16)) {
    goto LABEL_49;
  }
  swift_bridgeObjectRetain();
  uint64_t v98 = sub_1B62B2CE0(0x6E49747069726353, 0xEB00000000786564);
  if ((v99 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_49:
    uint64_t v104 = (uint64_t)v156;
    uint64_t v109 = v178;
    v162(v156, 1, 1, v178);
    goto LABEL_50;
  }
  int64_t v100 = *(void *)(*(void *)(v97 + 56) + 8 * v98);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v101 = *(void *)(v100 + 16);
  int64_t v150 = v100;
  if (v101 && (uint64_t v102 = sub_1B69FA874((uint64_t)v168), (v103 & 1) != 0))
  {
    uint64_t v104 = (uint64_t)v156;
    (*(void (**)(char *, uint64_t, uint64_t))(v152 + 16))(v156, *(void *)(v100 + 56) + *(void *)(v152 + 72) * v102, v178);
    uint64_t v105 = 0;
  }
  else
  {
    uint64_t v105 = 1;
    uint64_t v104 = (uint64_t)v156;
  }
  uint64_t v109 = v178;
  v162((char *)v104, v105, 1, v178);
  swift_bridgeObjectRelease();
  if (v165(v104, 1, v109) != 1)
  {
    uint64_t v145 = v151;
    unint64_t v146 = (void (*)(char *, char *, uint64_t))v154;
    v154(v151, v104, v109);
    uint64_t v106 = (uint64_t)v160;
    char v147 = v145;
    uint64_t v92 = v109;
    v146(v160, v147, v109);
    uint64_t v108 = (uint64_t)v168;
LABEL_69:
    uint64_t v107 = v176;
    goto LABEL_70;
  }
LABEL_50:
  sub_1B665496C(v104, (uint64_t)&qword_1EB97D9C0, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1B63BDD28);
  sub_1B6E31108();
  uint64_t v110 = *v158;
  (*v158)(v161, (uint64_t)v168, v109);
  uint64_t v111 = v157;
  v110(v157, (uint64_t)v163, v109);
  v162(v111, 0, 1, v109);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v196 = *(void *)(inited + 32);
  uint64_t v113 = v196;
  *(void *)(inited + 32) = 0x8000000000000000;
  unint64_t v114 = sub_1B62B2CE0(0x6E49747069726353, 0xEB00000000786564);
  char v116 = v115;
  uint64_t v117 = *(void *)(v113 + 16) + ((v115 & 1) == 0);
  if (*(void *)(v113 + 24) >= v117)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1B6ACC3F4();
      uint64_t v113 = v196;
    }
    goto LABEL_55;
  }
  sub_1B6AB6A54(v117, isUniquelyReferenced_nonNull_native);
  uint64_t v113 = v196;
  uint64_t v118 = sub_1B62B2CE0(0x6E49747069726353, 0xEB00000000786564);
  if ((v116 & 1) == (v119 & 1))
  {
    unint64_t v114 = v118;
LABEL_55:
    *(void *)(inited + 32) = v113;
    swift_bridgeObjectRelease();
    if (v116)
    {
      uint64_t v120 = swift_bridgeObjectRetain();
    }
    else
    {
      char v121 = (void *)swift_bridgeObjectRetain();
      sub_1B6B1C878(&v196);
      uint64_t v120 = (uint64_t)v121;
      uint64_t v122 = v196;
      v121[(v114 >> 6) + 8] |= 1 << v114;
      unint64_t v123 = (void *)(v121[6] + 16 * v114);
      void *v123 = 0x6E49747069726353;
      v123[1] = 0xEB00000000786564;
      *(void *)(v121[7] + 8 * v114) = v122;
      ++v121[2];
    }
    uint64_t v124 = (uint64_t)v157;
    uint64_t v125 = *(void *)(v120 + 56);
    swift_bridgeObjectRelease();
    uint64_t v126 = v178;
    if (v165(v124, 1, v178) == 1)
    {
      sub_1B665496C(v124, (uint64_t)&qword_1EB97D9C0, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1B63BDD28);
      swift_bridgeObjectRetain();
      int64_t v150 = sub_1B69FA874((uint64_t)v161);
      char v128 = v127;
      swift_bridgeObjectRelease();
      uint64_t v129 = v125;
      uint64_t v130 = v164;
      uint64_t v165 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((unint64_t)v164 & 0xFFFFFFFFFFFFLL | 0x4F8000000000000);
      unint64_t v131 = v114;
      uint64_t v71 = v191;
      if (v128)
      {
        uint64_t v132 = 8 * v131;
        char v133 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v134 = *(void *)(v129 + v132);
        uint64_t v196 = v134;
        *(void *)(v129 + v132) = 0x8000000000000000;
        if ((v133 & 1) == 0)
        {
          sub_1B6ACC0D4();
          uint64_t v134 = v196;
        }
        int64_t v135 = *(void *)(v152 + 72) * v150;
        int64_t v136 = *(void *)(v134 + 48) + v135;
        uint64_t v149 = *(void (**)(int64_t, uint64_t))(v152 + 8);
        uint64_t v137 = v178;
        v149(v136, v178);
        uint64_t v138 = v196;
        int64_t v139 = *(void *)(v196 + 56) + v135;
        int v140 = v153;
        v154(v153, v139, v137);
        sub_1B6AC86D4(v150, v138);
        *(void *)(v129 + v132) = v138;
        uint64_t v141 = (uint64_t)v140;
        swift_bridgeObjectRelease();
        uint64_t v92 = v137;
        v162(v140, 0, 1, v137);
        uint64_t v108 = (uint64_t)v168;
        uint64_t v64 = (uint64_t)v190;
        v149((int64_t)v161, v137);
      }
      else
      {
        uint64_t v141 = (uint64_t)v153;
        uint64_t v92 = v178;
        ((void (*)(char *, uint64_t, uint64_t))v162)(v153, 1, 1);
        uint64_t v108 = (uint64_t)v168;
        (*v130)((uint64_t)v161, v92);
      }
      sub_1B665496C(v141, (uint64_t)&qword_1EB97D9C0, MEMORY[0x1E4F27990], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1B63BDD28);
      uint64_t v106 = (uint64_t)v160;
      v154(v160, (uint64_t)v163, v92);
    }
    else
    {
      v154(v155, v124, v126);
      uint64_t v142 = 8 * v114;
      char v143 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v196 = *(void *)(v125 + 8 * v114);
      *(void *)(v125 + 8 * v114) = 0x8000000000000000;
      uint64_t v144 = (uint64_t)v161;
      sub_1B67E3CB4((uint64_t)v155, (uint64_t)v161, v143);
      *(void *)(v125 + v142) = v196;
      swift_bridgeObjectRelease();
      uint64_t v92 = v178;
      ((void (*)(uint64_t))*v164)(v144);
      uint64_t v106 = (uint64_t)v160;
      uint64_t v108 = (uint64_t)v168;
      uint64_t v71 = v191;
      v154(v160, (uint64_t)v163, v92);
    }
    goto LABEL_69;
  }
  uint64_t result = sub_1B6E33838();
  __break(1u);
  return result;
}

uint64_t sub_1B664F67C()
{
  uint64_t v0 = sub_1B67DD22C(MEMORY[0x1E4FBC860]);
  unint64_t v1 = sub_1B6B65B6C();
  unint64_t v2 = v1;
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v3 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
    if (v3) {
      goto LABEL_3;
    }
LABEL_49:
    swift_bridgeObjectRelease();
    uint64_t v33 = sub_1B664DAB0((uint64_t)v0);
    swift_bridgeObjectRelease();
    return (uint64_t)v33;
  }
  uint64_t v3 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v3) {
    goto LABEL_49;
  }
LABEL_3:
  uint64_t v4 = 0;
  unint64_t v35 = v2 & 0xC000000000000001;
  uint64_t v36 = v3;
  unint64_t v37 = v2;
  while (1)
  {
    if (v35) {
      MEMORY[0x1BA9B4580](v4, v2);
    }
    else {
      swift_retain();
    }
    type metadata accessor for DoNode(0);
    if (swift_dynamicCastClass())
    {
      type metadata accessor for OnTriggerNode(0);
      uint64_t v6 = swift_dynamicCastClass();
      if (!v6) {
        goto LABEL_17;
      }
      uint64_t v7 = v6;
      if (*(void *)(*(void *)(v6 + 16) + 16) >= 2uLL
        && (type metadata accessor for WorldReferenceNode(0), (uint64_t v8 = swift_dynamicCastClass()) != 0))
      {
        sub_1B664D9F0(v8 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, (uint64_t)&v38);
        uint64_t v9 = MEMORY[0x1BA9B8670](&v38);
        swift_retain();
        swift_retain();
        sub_1B66490B8((uint64_t)&v38);
        if (v9)
        {
          self;
          uint64_t v10 = (void *)swift_dynamicCastObjCClass();
          if (!v10) {
            swift_unknownObjectRelease();
          }
          goto LABEL_20;
        }
      }
      else
      {
        swift_retain();
        swift_retain();
      }
      uint64_t v10 = 0;
LABEL_20:
      type metadata accessor for OnTickTriggerNode(0);
      uint64_t v13 = swift_dynamicCastClass();
      if (v13
        && (uint64_t v14 = *(__objc2_class ***)(*(void *)(v13 + 16) + 48),
            swift_retain(),
            swift_release(),
            *v14 == _TtC3VFX20ImplicitConstantNode))
      {
        sub_1B66506CC((uint64_t)v14 + OBJC_IVAR____TtC3VFX12ConstantNode_holder, (uint64_t)&v38);
        swift_release();
        sub_1B62CAAD8((uint64_t)&v39, (uint64_t)&v40);
        sub_1B6650728((uint64_t)&v38);
        int v18 = swift_dynamicCast();
        if (v18) {
          unsigned int v15 = v38;
        }
        else {
          unsigned int v15 = 0;
        }
        int v16 = v18 ^ 1;
      }
      else
      {
        swift_release();
        unsigned int v15 = 0;
        int v16 = 1;
      }
      id v11 = *(id *)(v7 + OBJC_IVAR____TtC3VFX13OnTriggerNode_eventType);
      swift_release();
      uint64_t v19 = 0x100000000;
      if (!v16) {
        uint64_t v19 = 0;
      }
      uint64_t v12 = v19 | v15 | 0x4000000000;
      goto LABEL_32;
    }
    type metadata accessor for OnUpdateNode(0);
    if (swift_dynamicCastClass()
      || (type metadata accessor for OnParticleStageNode(0), (uint64_t v17 = swift_dynamicCastClass()) == 0))
    {
LABEL_17:
      id v11 = 0;
      uint64_t v10 = 0;
      uint64_t v12 = 0x8000000000;
      goto LABEL_32;
    }
    uint64_t v10 = 0;
    uint64_t v12 = 0;
    id v11 = (id)*(unsigned __int8 *)(v17 + OBJC_IVAR____TtC3VFX19OnParticleStageNode_stage);
LABEL_32:
    if (v0[2])
    {
      sub_1B6650588(v11, v10, v12);
      unint64_t v20 = sub_1B69FA920(v11, v10, v12);
      uint64_t v21 = MEMORY[0x1E4FBC860];
      if (v22)
      {
        uint64_t v21 = *(void *)(v0[7] + 8 * v20);
        swift_bridgeObjectRetain();
      }
      sub_1B66505D0(v11, v10, v12);
    }
    else
    {
      uint64_t v21 = MEMORY[0x1E4FBC860];
    }
    uint64_t v38 = v21;
    uint64_t v23 = swift_retain();
    MEMORY[0x1BA9B3870](v23);
    if (*(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((v38 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
      sub_1B6E31C78();
    }
    sub_1B6E31CC8();
    sub_1B6E31C48();
    uint64_t v24 = v38;
    sub_1B6650588(v11, v10, v12);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v40 = v0;
    unint64_t v27 = sub_1B69FA920(v11, v10, v12);
    char v28 = v26;
    uint64_t v29 = v0[2] + ((v26 & 1) == 0);
    if (v0[3] < v29) {
      break;
    }
    if (isUniquelyReferenced_nonNull_native)
    {
      uint64_t v0 = v40;
      if (v26) {
        goto LABEL_45;
      }
    }
    else
    {
      sub_1B6ACC7E4();
      uint64_t v0 = v40;
      if (v28)
      {
LABEL_45:
        uint64_t v32 = v0[7];
        swift_bridgeObjectRelease();
        *(void *)(v32 + 8 * v27) = v24;
        goto LABEL_5;
      }
    }
LABEL_4:
    v0[(v27 >> 6) + 8] |= 1 << v27;
    uint64_t v5 = v0[6] + 24 * v27;
    *(void *)uint64_t v5 = v11;
    *(void *)(v5 + 8) = v10;
    *(unsigned char *)(v5 + 20) = BYTE4(v12);
    *(_DWORD *)(v5 + 16) = v12;
    *(void *)(v0[7] + 8 * v27) = v24;
    ++v0[2];
    sub_1B6650588(v11, v10, v12);
LABEL_5:
    ++v4;
    swift_bridgeObjectRelease();
    sub_1B66505D0(v11, v10, v12);
    sub_1B66505D0(v11, v10, v12);
    swift_release();
    unint64_t v2 = v37;
    if (v36 == v4) {
      goto LABEL_49;
    }
  }
  sub_1B6AB7278(v29, isUniquelyReferenced_nonNull_native);
  unint64_t v30 = sub_1B69FA920(v11, v10, v12);
  if ((v28 & 1) == (v31 & 1))
  {
    unint64_t v27 = v30;
    uint64_t v0 = v40;
    if (v28) {
      goto LABEL_45;
    }
    goto LABEL_4;
  }
  uint64_t result = sub_1B6E33838();
  __break(1u);
  return result;
}

uint64_t sub_1B664FC2C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  char v3 = a1;
  uint64_t v4 = (a3 >> 38) & 3;
  if (v4)
  {
    if (v4 == 1)
    {
      return 0x67676972745F6E6FLL;
    }
    else if ((a2 | a1) == 0 && (a3 & 0xFFFFFFFFFFLL) == 0x8000000000)
    {
      return 0x74616470755F6E6FLL;
    }
    else
    {
      return 0x74737269665F6E6FLL;
    }
  }
  else
  {
    uint64_t result = 0xD000000000000010;
    if (v3 != 3)
    {
      if (v3 == 5)
      {
        return 0xD000000000000012;
      }
      else
      {
        sub_1B6E328C8();
        sub_1B6E31948();
        sub_1B6E32B18();
        uint64_t result = sub_1B6E32BE8();
        __break(1u);
      }
    }
  }
  return result;
}

uint64_t sub_1B664FDD4(uint64_t a1, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  swift_retain();
  sub_1B63BDD28(0, (unint64_t *)&qword_1EB980BA0, (uint64_t (*)(uint64_t))sub_1B663C11C, MEMORY[0x1E4FBBE00]);
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B6E77050;
  *(void *)(v10 + 32) = a1;
  *(void *)(v10 + 40) = a2;
  uint64_t v61 = a2;
  uint64_t v65 = v10;
  uint64_t v11 = swift_conformsToProtocol2();
  if (v11) {
    uint64_t v12 = v11;
  }
  else {
    uint64_t v12 = 0;
  }
  uint64_t v60 = a1;
  if (v11) {
    uint64_t v13 = a1;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13)
  {
    uint64_t v14 = *(uint64_t (**)(uint64_t, uint64_t))(v12 + 64);
    if ((~v14(v13, v12) & 0x2F00000) != 0)
    {
      int v32 = v14(v13, v12);
    }
    else
    {
      uint64_t v58 = v14;
      char v59 = a3;
      unint64_t v16 = *(void *)(v10 + 16);
      unint64_t v15 = *(void *)(v10 + 24);
      int64_t v17 = v15 >> 1;
      unint64_t v18 = v16 + 1;
      if (v15 >> 1 <= v16)
      {
        uint64_t v10 = (uint64_t)sub_1B62D1B88(v15 > 1, v16 + 1, 1, (char *)v10);
        unint64_t v15 = *(void *)(v10 + 24);
        int64_t v17 = v15 >> 1;
      }
      *(void *)(v10 + 16) = v18;
      uint64_t v19 = v10 + 16 * v16;
      *(void *)(v19 + 32) = &type metadata for Position;
      *(void *)(v19 + 40) = &off_1F0FA6EE0;
      uint64_t v20 = v16 + 2;
      if (v17 < v20) {
        uint64_t v10 = (uint64_t)sub_1B62D1B88(v15 > 1, v20, 1, (char *)v10);
      }
      *(void *)(v10 + 16) = v20;
      uint64_t v21 = v10 + 16 * v18;
      *(void *)(v21 + 32) = &type metadata for Orientation;
      *(void *)(v21 + 40) = &off_1F0F560A8;
      unint64_t v23 = *(void *)(v10 + 16);
      unint64_t v22 = *(void *)(v10 + 24);
      int64_t v24 = v22 >> 1;
      unint64_t v25 = v23 + 1;
      if (v22 >> 1 <= v23)
      {
        uint64_t v10 = (uint64_t)sub_1B62D1B88(v22 > 1, v23 + 1, 1, (char *)v10);
        unint64_t v22 = *(void *)(v10 + 24);
        int64_t v24 = v22 >> 1;
      }
      *(void *)(v10 + 16) = v25;
      uint64_t v26 = v10 + 16 * v23;
      *(void *)(v26 + 32) = &type metadata for Scale3;
      *(void *)(v26 + 40) = &off_1F0FA10A0;
      uint64_t v27 = v23 + 2;
      if (v24 < v27) {
        uint64_t v10 = (uint64_t)sub_1B62D1B88(v22 > 1, v27, 1, (char *)v10);
      }
      *(void *)(v10 + 16) = v27;
      uint64_t v28 = v10 + 16 * v25;
      *(void *)(v28 + 32) = &type metadata for WorldTransform;
      *(void *)(v28 + 40) = &off_1F0F67720;
      unint64_t v30 = *(void *)(v10 + 16);
      unint64_t v29 = *(void *)(v10 + 24);
      if (v30 >= v29 >> 1) {
        uint64_t v10 = (uint64_t)sub_1B62D1B88(v29 > 1, v30 + 1, 1, (char *)v10);
      }
      *(void *)(v10 + 16) = v30 + 1;
      uint64_t v31 = v10 + 16 * v30;
      *(void *)(v31 + 32) = &type metadata for Parent;
      *(void *)(v31 + 40) = &off_1F0FA0430;
      uint64_t v65 = v10;
      a3 = v59;
      int v32 = v58(v13, v12);
    }
    if ((~v32 & 0x1700000) == 0)
    {
      unint64_t v34 = *(void *)(v10 + 16);
      unint64_t v33 = *(void *)(v10 + 24);
      int64_t v35 = v33 >> 1;
      unint64_t v36 = v34 + 1;
      if (v33 >> 1 <= v34)
      {
        uint64_t v10 = (uint64_t)sub_1B62D1B88(v33 > 1, v34 + 1, 1, (char *)v10);
        unint64_t v33 = *(void *)(v10 + 24);
        int64_t v35 = v33 >> 1;
      }
      *(void *)(v10 + 16) = v36;
      uint64_t v37 = v10 + 16 * v34;
      *(void *)(v37 + 32) = &type metadata for Position;
      *(void *)(v37 + 40) = &off_1F0FA6EE0;
      if (v35 < (uint64_t)(v34 + 2)) {
        uint64_t v10 = (uint64_t)sub_1B62D1B88(v33 > 1, v34 + 2, 1, (char *)v10);
      }
      *(void *)(v10 + 16) = v34 + 2;
      uint64_t v38 = v10 + 16 * v36;
      *(void *)(v38 + 32) = &type metadata for Orientation;
      *(void *)(v38 + 40) = &off_1F0F560A8;
      unint64_t v40 = *(void *)(v10 + 16);
      unint64_t v39 = *(void *)(v10 + 24);
      int64_t v41 = v39 >> 1;
      unint64_t v42 = v40 + 1;
      if (v39 >> 1 <= v40)
      {
        uint64_t v10 = (uint64_t)sub_1B62D1B88(v39 > 1, v40 + 1, 1, (char *)v10);
        unint64_t v39 = *(void *)(v10 + 24);
        int64_t v41 = v39 >> 1;
      }
      *(void *)(v10 + 16) = v42;
      uint64_t v43 = v10 + 16 * v40;
      *(void *)(v43 + 32) = &type metadata for Scale3;
      *(void *)(v43 + 40) = &off_1F0FA10A0;
      if (v41 < (uint64_t)(v40 + 2)) {
        uint64_t v10 = (uint64_t)sub_1B62D1B88(v39 > 1, v40 + 2, 1, (char *)v10);
      }
      *(void *)(v10 + 16) = v40 + 2;
      uint64_t v44 = v10 + 16 * v42;
      *(void *)(v44 + 32) = &type metadata for NotInHierarchy;
      *(void *)(v44 + 40) = &off_1F0F64B60;
      uint64_t v65 = v10;
    }
  }
  unint64_t v45 = sub_1B6A61A0C(0, a5, (uint64_t)&v65, a4);
  int v46 = v45;
  unint64_t v47 = HIDWORD(v45);
  sub_1B6AAEFA4(v45, a4);
  char v48 = a3;
  uint64_t v49 = sub_1B6C2C804(a3, a4, a5);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v49 = (uint64_t)sub_1B68C18B8(0, *(void *)(v49 + 16) + 1, 1, (char *)v49);
  }
  unint64_t v51 = *(void *)(v49 + 16);
  unint64_t v50 = *(void *)(v49 + 24);
  if (v51 >= v50 >> 1) {
    uint64_t v49 = (uint64_t)sub_1B68C18B8(v50 > 1, v51 + 1, 1, (char *)v49);
  }
  *(void *)(v49 + 16) = v51 + 1;
  uint64_t v52 = v49 + 16 * v51;
  *(_DWORD *)(v52 + 32) = v46;
  *(_DWORD *)(v52 + 36) = v47;
  *(void *)(v52 + 40) = a5;
  uint64_t v53 = *(void *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
  swift_retain();
  if (v53)
  {
    char v54 = *(unsigned char *)(v53 + 80);
    MEMORY[0x1BA9B8670](v53 + 48);
    uint64_t v53 = *(void *)(v53 + 56);
  }
  else
  {
    char v54 = 0;
  }
  swift_unknownObjectUnownedInit();
  v62[0] = a5;
  v62[2] = v53;
  swift_unknownObjectUnownedAssign();
  swift_unownedRetain();
  swift_unknownObjectRelease();
  char v63 = v54;
  sub_1B636C4E0((uint64_t)v62, (uint64_t)v64);
  sub_1B6C2CF84((uint64_t)v64, v48, v49, a4);
  sub_1B636C450((uint64_t)v64);
  if (v54) {
    sub_1B6A667F0(1);
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v55 = *(void *)(v61 + 8);
  type metadata accessor for VFXAttribute();
  uint64_t v56 = swift_allocObject();
  *(void *)(v56 + 16) = a5;
  swift_unownedRetain();
  swift_release();
  *(_DWORD *)(v56 + 24) = v46;
  *(_DWORD *)(v56 + 28) = v47;
  *(void *)(v56 + 32) = v60;
  *(void *)(v56 + 40) = v55;
  swift_bridgeObjectRelease();
  return v56;
}

uint64_t sub_1B6650424(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

uint64_t sub_1B665048C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  sub_1B62E2D10(a1, type metadata accessor for GraphScript);
  return sub_1B633A0FC(v3, a1, type metadata accessor for GraphScript);
}

void *sub_1B66504F8(void *a1)
{
  return sub_1B6D61640(a1, **(void **)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1B665051C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  sub_1B62E2D10(a1, type metadata accessor for TriggerScript);
  return sub_1B633A0FC(v3, a1, type metadata accessor for TriggerScript);
}

id sub_1B6650588(id result, void *a2, unint64_t a3)
{
  if (((a3 >> 38) & 3) == 1)
  {
    id v5 = result;
    id v4 = a2;
    return v5;
  }
  return result;
}

void sub_1B66505D0(void *a1, void *a2, unint64_t a3)
{
  if (((a3 >> 38) & 3) == 1)
  {
  }
}

uint64_t sub_1B6650618(uint64_t a1, unint64_t a2)
{
  if (a2 >= 2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B665066C(uint64_t result)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B66506CC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1B6650728(uint64_t a1)
{
  return a1;
}

void sub_1B665077C()
{
  if (!qword_1E9DCDB50[0])
  {
    type metadata accessor for Graph();
    sub_1B66507E8();
    unint64_t v0 = sub_1B6E32C68();
    if (!v1) {
      atomic_store(v0, qword_1E9DCDB50);
    }
  }
}

unint64_t sub_1B66507E8()
{
  unint64_t result = qword_1E9DD5360;
  if (!qword_1E9DD5360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD5360);
  }
  return result;
}

uint64_t sub_1B665083C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initEnumMetadataSinglePayload();
    return 0;
  }
  return result;
}

uint64_t *sub_1B66508B8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  unint64_t v9 = v8;
  if (v7 <= 1)
  {
    if (v8 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    unint64_t v9 = v10 + v8;
  }
  uint64_t v14 = *(_DWORD *)(v6 + 80);
  if (v14 <= 7 && v9 <= 0x18 && (*(_DWORD *)(v6 + 80) & 0x100000) == 0)
  {
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
    {
      if (v7 <= 1)
      {
        if (v8 <= 3)
        {
          unsigned int v19 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
          if (v19 > 0xFFFE)
          {
            uint64_t v18 = 4;
          }
          else
          {
            BOOL v20 = v19 != 0;
            BOOL v13 = v19 >= 0xFF;
            uint64_t v18 = 2;
            if (!v13) {
              uint64_t v18 = v20;
            }
          }
        }
        else
        {
          uint64_t v18 = 1;
        }
        v8 += v18;
      }
      memcpy(a1, a2, v8);
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
    }
  }
  else
  {
    uint64_t v17 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v17 + ((v14 + 16) & ~v14));
    swift_retain();
  }
  return a1;
}

uint64_t sub_1B6650AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(v3 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(a1, 2, v3);
  if (!result)
  {
    uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t))(v6 + 8);
    return v5(a1, v3);
  }
  return result;
}

void *sub_1B6650B74(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_1B6650CC4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
  }
  return a1;
}

void *sub_1B6650E94(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 2, v5))
  {
    unsigned int v7 = *(_DWORD *)(v6 + 84);
    size_t v8 = *(void *)(v6 + 64);
    if (v7 <= 1)
    {
      if (v8 <= 3)
      {
        unsigned int v10 = (~(-1 << (8 * v8)) - v7 + 2) >> (8 * v8);
        if (v10 > 0xFFFE)
        {
          uint64_t v9 = 4;
        }
        else
        {
          BOOL v11 = v10 != 0;
          BOOL v12 = v10 >= 0xFF;
          uint64_t v9 = 2;
          if (!v12) {
            uint64_t v9 = v11;
          }
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      v8 += v9;
    }
    memcpy(a1, a2, v8);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  return a1;
}

void *sub_1B6650FE4(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  unsigned int v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 2, v5);
  int v9 = v7(a2, 2, v5);
  if (v8)
  {
    if (v9)
    {
      unsigned int v10 = *(_DWORD *)(v6 + 84);
      size_t v11 = *(void *)(v6 + 64);
      if (v10 <= 1)
      {
        if (v11 > 3)
        {
LABEL_5:
          uint64_t v12 = 1;
LABEL_16:
          v11 += v12;
          goto LABEL_17;
        }
LABEL_9:
        unsigned int v15 = (~(-1 << (8 * v11)) - v10 + 2) >> (8 * v11);
        if (v15 > 0xFFFE)
        {
          uint64_t v12 = 4;
        }
        else
        {
          BOOL v16 = v15 != 0;
          BOOL v17 = v15 >= 0xFF;
          uint64_t v12 = 2;
          if (!v17) {
            uint64_t v12 = v16;
          }
        }
        goto LABEL_16;
      }
      goto LABEL_17;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 2, v5);
  }
  else
  {
    if (v9)
    {
      uint64_t v14 = *(void (**)(void *, uint64_t))(v6 + 8);
      uint64_t v13 = v6 + 8;
      v14(a1, v5);
      unsigned int v10 = *(_DWORD *)(v13 + 76);
      size_t v11 = *(void *)(v13 + 56);
      if (v10 <= 1)
      {
        if (v11 > 3) {
          goto LABEL_5;
        }
        goto LABEL_9;
      }
LABEL_17:
      memcpy(a1, a2, v11);
      return a1;
    }
    (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
  }
  return a1;
}

uint64_t sub_1B66511B4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = v5 - 2;
  uint64_t v7 = *(void *)(v4 + 64);
  if (v5 <= 1)
  {
    unsigned int v6 = 0;
    if (v7 <= 3)
    {
      unsigned int v9 = (~(-1 << (8 * v7)) - v5 + 2) >> (8 * v7);
      if (v9 > 0xFFFE)
      {
        uint64_t v8 = 4;
      }
      else
      {
        BOOL v10 = v9 != 0;
        BOOL v11 = v9 >= 0xFF;
        uint64_t v8 = 2;
        if (!v11) {
          uint64_t v8 = v10;
        }
      }
    }
    else
    {
      uint64_t v8 = 1;
    }
    v7 += v8;
  }
  if (!a2) {
    return 0;
  }
  int v12 = a2 - v6;
  if (a2 <= v6) {
    goto LABEL_30;
  }
  char v13 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v15 = ((v12 + ~(-1 << v13)) >> v13) + 1;
    if (HIWORD(v15))
    {
      int v14 = *(_DWORD *)((char *)a1 + v7);
      if (!v14) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 > 0xFF)
    {
      int v14 = *(unsigned __int16 *)((char *)a1 + v7);
      if (!*(unsigned __int16 *)((char *)a1 + v7)) {
        goto LABEL_30;
      }
      goto LABEL_20;
    }
    if (v15 < 2)
    {
LABEL_30:
      if (v6)
      {
        unsigned int v19 = (*(uint64_t (**)(void))(v4 + 48))();
        if (v19 >= 3) {
          return v19 - 2;
        }
        else {
          return 0;
        }
      }
      return 0;
    }
  }
  int v14 = *((unsigned __int8 *)a1 + v7);
  if (!*((unsigned char *)a1 + v7)) {
    goto LABEL_30;
  }
LABEL_20:
  int v16 = (v14 - 1) << v13;
  if (v7 > 3) {
    int v16 = 0;
  }
  if (v7)
  {
    if (v7 <= 3) {
      int v17 = v7;
    }
    else {
      int v17 = 4;
    }
    switch(v17)
    {
      case 2:
        int v18 = *a1;
        break;
      case 3:
        int v18 = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        int v18 = *(_DWORD *)a1;
        break;
      default:
        int v18 = *(unsigned __int8 *)a1;
        break;
    }
  }
  else
  {
    int v18 = 0;
  }
  return v6 + (v18 | v16) + 1;
}

void sub_1B66513A8(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  unsigned int v8 = v7 - 2;
  size_t v9 = *(void *)(v6 + 64);
  if (v7 <= 1)
  {
    unsigned int v8 = 0;
    if (v9 <= 3)
    {
      unsigned int v11 = (~(-1 << (8 * v9)) - v7 + 2) >> (8 * v9);
      if (v11 > 0xFFFE)
      {
        uint64_t v10 = 4;
      }
      else
      {
        BOOL v12 = v11 != 0;
        BOOL v13 = v11 >= 0xFF;
        uint64_t v10 = 2;
        if (!v13) {
          uint64_t v10 = v12;
        }
      }
    }
    else
    {
      uint64_t v10 = 1;
    }
    v9 += v10;
  }
  BOOL v13 = a3 >= v8;
  unsigned int v14 = a3 - v8;
  if (v14 != 0 && v13)
  {
    if (v9 <= 3)
    {
      unsigned int v18 = ((v14 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v18))
      {
        int v15 = 4;
      }
      else if (v18 >= 0x100)
      {
        int v15 = 2;
      }
      else
      {
        int v15 = v18 > 1;
      }
    }
    else
    {
      int v15 = 1;
    }
  }
  else
  {
    int v15 = 0;
  }
  if (v8 < a2)
  {
    unsigned int v16 = ~v8 + a2;
    if (v9 < 4)
    {
      int v17 = (v16 >> (8 * v9)) + 1;
      if (v9)
      {
        int v19 = v16 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v19;
          a1[2] = BYTE2(v19);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v19;
        }
        else
        {
          *a1 = v19;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v16;
      int v17 = 1;
    }
    switch(v15)
    {
      case 1:
        a1[v9] = v17;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v17;
        return;
      case 3:
        goto LABEL_43;
      case 4:
        *(_DWORD *)&a1[v9] = v17;
        return;
      default:
        return;
    }
  }
  switch(v15)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_30;
    case 3:
LABEL_43:
      __break(1u);
      JUMPOUT(0x1B665162CLL);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_29;
    default:
LABEL_29:
      if (a2)
      {
LABEL_30:
        BOOL v20 = *(void (**)(void))(v6 + 56);
        v20();
      }
      return;
  }
}

uint64_t sub_1B6651654(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 48))(a1, 2);
}

uint64_t sub_1B6651684(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(*(void *)(a3 + 16) - 8) + 56))(a1, a2, 2);
}

void *sub_1B66516B4(void *a1, void *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    unsigned int v7 = (void *)(v4 + ((v3 + 16) & ~(unint64_t)v3));
    swift_retain();
  }
  else
  {
    uint64_t v5 = a3;
    uint64_t v6 = a2;
    unsigned int v7 = a1;
    uint64_t v8 = *(int *)(a3 + 20);
    size_t v9 = (void *)((char *)a1 + v8);
    uint64_t v10 = (void *)((char *)a2 + v8);
    uint64_t updated = type metadata accessor for ParticleUpdateScript(0);
    uint64_t v12 = *(void *)(updated - 8);
    BOOL v13 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v12 + 48);
    swift_bridgeObjectRetain();
    if (v13(v10, 2, updated))
    {
      sub_1B63BDD28(0, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64));
    }
    else
    {
      uint64_t v43 = v6;
      uint64_t v45 = v12;
      uint64_t v15 = v10[1];
      void *v9 = *v10;
      v9[1] = v15;
      v9[2] = v10[2];
      *((unsigned char *)v9 + 24) = *((unsigned char *)v10 + 24);
      v9[4] = v10[4];
      *((unsigned char *)v9 + 40) = *((unsigned char *)v10 + 40);
      uint64_t v16 = *(int *)(updated + 36);
      __dst = (char *)v9 + v16;
      int v17 = (char *)v10 + v16;
      uint64_t v18 = type metadata accessor for ScriptIndex();
      uint64_t v39 = *(void *)(v18 - 8);
      unint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
      int v19 = v17;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v47(v17, 1, v18))
      {
        sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
        memcpy(__dst, v17, *(void *)(*(void *)(v20 - 8) + 64));
        uint64_t v6 = v43;
        uint64_t v21 = v45;
      }
      else
      {
        uint64_t v6 = v43;
        uint64_t v21 = v45;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v22 = sub_1B6E31118();
          (*(void (**)(char *, const void *, uint64_t))(*(void *)(v22 - 8) + 16))(__dst, v19, v22);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dst, v19, *(void *)(v39 + 64));
        }
        (*(void (**)(char *, void, uint64_t, uint64_t))(v39 + 56))(__dst, 0, 1, v18);
      }
      (*(void (**)(void *, void, uint64_t, uint64_t))(v21 + 56))(v9, 0, 2, updated);
    }
    uint64_t v23 = *(int *)(v5 + 24);
    int64_t v24 = (char *)v7 + v23;
    unint64_t v25 = (char *)v6 + v23;
    uint64_t inited = type metadata accessor for ParticleInitScript(0);
    uint64_t v27 = *(void *)(inited - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48))(v25, 2, inited))
    {
      sub_1B63BDD28(0, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
      memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
    }
    else
    {
      uint64_t v44 = v5;
      uint64_t v46 = v27;
      *int64_t v24 = *v25;
      uint64_t v29 = *((void *)v25 + 2);
      *((void *)v24 + 1) = *((void *)v25 + 1);
      *((void *)v24 + 2) = v29;
      uint64_t v30 = *((void *)v25 + 4);
      *((void *)v24 + 3) = *((void *)v25 + 3);
      *((void *)v24 + 4) = v30;
      v24[40] = v25[40];
      uint64_t v31 = *(int *)(inited + 36);
      __dsta = &v24[v31];
      int v32 = &v25[v31];
      uint64_t v33 = type metadata accessor for ScriptIndex();
      uint64_t v40 = *(void *)(v33 - 8);
      char v48 = *(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v40 + 48);
      unint64_t v34 = v32;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      if (v48(v32, 1, v33))
      {
        sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
        memcpy(__dsta, v32, *(void *)(*(void *)(v35 - 8) + 64));
        uint64_t v5 = v44;
        uint64_t v36 = v46;
      }
      else
      {
        uint64_t v5 = v44;
        uint64_t v36 = v46;
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v37 = sub_1B6E31118();
          (*(void (**)(unsigned char *, const void *, uint64_t))(*(void *)(v37 - 8) + 16))(__dsta, v34, v37);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(__dsta, v34, *(void *)(v40 + 64));
        }
        (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v40 + 56))(__dsta, 0, 1, v33);
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v36 + 56))(v24, 0, 2, inited);
    }
    *(void *)((char *)v7 + *(int *)(v5 + 28)) = *(void *)((char *)v6 + *(int *)(v5 + 28));
    swift_bridgeObjectRetain();
  }
  return v7;
}

uint64_t sub_1B6651CCC(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t updated = type metadata accessor for ParticleUpdateScript(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(updated - 8) + 48))(v4, 2, updated))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v6 = v4 + *(int *)(updated + 36);
    uint64_t v7 = type metadata accessor for ScriptIndex();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48))(v6, 1, v7)
      && swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v8 = sub_1B6E31118();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8))(v6, v8);
    }
  }
  uint64_t v9 = a1 + *(int *)(a2 + 24);
  uint64_t inited = type metadata accessor for ParticleInitScript(0);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(inited - 8) + 48))(v9, 2, inited))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v11 = v9 + *(int *)(inited + 36);
    uint64_t v12 = type metadata accessor for ScriptIndex();
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48))(v11, 1, v12)
      && swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v13 = sub_1B6E31118();
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8))(v11, v13);
    }
  }

  return swift_bridgeObjectRelease();
}

void *sub_1B6651F10(void *a1, void *a2, int *a3)
{
  uint64_t v4 = a2;
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (void *)((char *)a1 + v6);
  uint64_t v8 = (void *)((char *)a2 + v6);
  uint64_t updated = type metadata accessor for ParticleUpdateScript(0);
  uint64_t v10 = *(void *)(updated - 8);
  uint64_t v11 = *(unsigned int (**)(void *, uint64_t, uint64_t))(v10 + 48);
  swift_bridgeObjectRetain();
  if (v11(v8, 2, updated))
  {
    sub_1B63BDD28(0, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64));
  }
  else
  {
    uint64_t v44 = v5;
    uint64_t v46 = v4;
    uint64_t v13 = v8[1];
    *uint64_t v7 = *v8;
    v7[1] = v13;
    _OWORD v7[2] = v8[2];
    *((unsigned char *)v7 + 24) = *((unsigned char *)v8 + 24);
    v7[4] = v8[4];
    *((unsigned char *)v7 + 40) = *((unsigned char *)v8 + 40);
    uint64_t v14 = *(int *)(updated + 36);
    __dst = (char *)v7 + v14;
    uint64_t v15 = (char *)v8 + v14;
    uint64_t v16 = type metadata accessor for ScriptIndex();
    uint64_t v17 = *(void *)(v16 - 8);
    uint64_t v18 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48);
    int v19 = v15;
    uint64_t v20 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v18(v19, 1, v20))
    {
      sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
      memcpy(__dst, v19, *(void *)(*(void *)(v21 - 8) + 64));
      uint64_t v4 = v46;
    }
    else
    {
      uint64_t v4 = v46;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v22 = sub_1B6E31118();
        (*(void (**)(char *, const void *, uint64_t))(*(void *)(v22 - 8) + 16))(__dst, v19, v22);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dst, v19, *(void *)(v17 + 64));
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v20);
    }
    uint64_t v5 = v44;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 2, updated);
  }
  uint64_t v23 = a3[6];
  int64_t v24 = (char *)v5 + v23;
  unint64_t v25 = (char *)v4 + v23;
  uint64_t inited = type metadata accessor for ParticleInitScript(0);
  uint64_t v27 = *(void *)(inited - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v27 + 48))(v25, 2, inited))
  {
    sub_1B63BDD28(0, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    memcpy(v24, v25, *(void *)(*(void *)(v28 - 8) + 64));
  }
  else
  {
    uint64_t v45 = v27;
    *int64_t v24 = *v25;
    uint64_t v29 = *((void *)v25 + 2);
    *((void *)v24 + 1) = *((void *)v25 + 1);
    *((void *)v24 + 2) = v29;
    uint64_t v30 = *((void *)v25 + 4);
    *((void *)v24 + 3) = *((void *)v25 + 3);
    *((void *)v24 + 4) = v30;
    v24[40] = v25[40];
    uint64_t v31 = *(int *)(inited + 36);
    __dsta = &v24[v31];
    int v32 = &v25[v31];
    uint64_t v33 = type metadata accessor for ScriptIndex();
    uint64_t v34 = *(void *)(v33 - 8);
    uint64_t v35 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v34 + 48);
    uint64_t v36 = v32;
    uint64_t v37 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    if (v35(v36, 1, v37))
    {
      sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
      memcpy(__dsta, v36, *(void *)(*(void *)(v38 - 8) + 64));
      uint64_t v39 = v45;
    }
    else
    {
      uint64_t v39 = v45;
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v40 = sub_1B6E31118();
        (*(void (**)(unsigned char *, const void *, uint64_t))(*(void *)(v40 - 8) + 16))(__dsta, v36, v40);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(__dsta, v36, *(void *)(v34 + 64));
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v34 + 56))(__dsta, 0, 1, v37);
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v39 + 56))(v24, 0, 2, inited);
  }
  *(void *)((char *)v5 + a3[7]) = *(void *)((char *)v4 + a3[7]);
  swift_bridgeObjectRetain();
  return v5;
}

void *sub_1B66524D0(void *a1, void *a2, int *a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (uint64_t)v5 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t updated = type metadata accessor for ParticleUpdateScript(0);
  uint64_t v10 = *(void *)(updated - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 2, updated);
  int v13 = v11((uint64_t)v8, 2, updated);
  if (!v12)
  {
    if (v13)
    {
      sub_1B62E2D10(v7, type metadata accessor for ParticleUpdateScript);
      goto LABEL_7;
    }
    *(void *)uint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = *((void *)v8 + 1);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v7 + 16) = *((void *)v8 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v7 + 24) = v8[24];
    *(void *)(v7 + 32) = *((void *)v8 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v7 + 40) = v8[40];
    uint64_t v23 = *(int *)(updated + 36);
    int64_t v24 = (void *)(v7 + v23);
    unint64_t v25 = &v8[v23];
    uint64_t v26 = type metadata accessor for ScriptIndex();
    uint64_t v27 = *(void *)(v26 - 8);
    uint64_t v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
    int v29 = v28(v24, 1, v26);
    int v30 = v28(v25, 1, v26);
    if (v29)
    {
      if (!v30)
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v31 = sub_1B6E31118();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v31 - 8) + 16))(v24, v25, v31);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v24, v25, *(void *)(v27 + 64));
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0, 1, v26);
        goto LABEL_22;
      }
    }
    else
    {
      if (!v30)
      {
        if (v5 == a2) {
          goto LABEL_22;
        }
        sub_1B62E2D10((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ScriptIndex);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v66 = sub_1B6E31118();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v66 - 8) + 16))(v24, v25, v66);
          swift_storeEnumTagMultiPayload();
          goto LABEL_22;
        }
        size_t v20 = *(void *)(v27 + 64);
        goto LABEL_18;
      }
      sub_1B62E2D10((uint64_t)v24, (uint64_t (*)(void))type metadata accessor for ScriptIndex);
    }
    sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
    size_t v20 = *(void *)(*(void *)(v33 - 8) + 64);
LABEL_18:
    uint64_t v21 = v24;
    uint64_t v22 = v25;
    goto LABEL_8;
  }
  if (v13)
  {
LABEL_7:
    sub_1B63BDD28(0, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    size_t v20 = *(void *)(*(void *)(v19 - 8) + 64);
    uint64_t v21 = (void *)v7;
    uint64_t v22 = v8;
LABEL_8:
    memcpy(v21, v22, v20);
    goto LABEL_22;
  }
  *(void *)uint64_t v7 = *(void *)v8;
  *(void *)(v7 + 8) = *((void *)v8 + 1);
  *(void *)(v7 + 16) = *((void *)v8 + 2);
  *(unsigned char *)(v7 + 24) = v8[24];
  *(void *)(v7 + 32) = *((void *)v8 + 4);
  *(unsigned char *)(v7 + 40) = v8[40];
  uint64_t v14 = *(int *)(updated + 36);
  unint64_t v68 = v5;
  __dst = (void *)(v7 + v14);
  uint64_t v15 = &v8[v14];
  uint64_t v16 = type metadata accessor for ScriptIndex();
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v71 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v71(v15, 1, v16))
  {
    sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
    memcpy(__dst, v15, *(void *)(*(void *)(v18 - 8) + 64));
    uint64_t v5 = v68;
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v32 = sub_1B6E31118();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v32 - 8) + 16))(__dst, v15, v32);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(__dst, v15, *(void *)(v17 + 64));
    }
    uint64_t v5 = v68;
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(__dst, 0, 1, v16);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 2, updated);
LABEL_22:
  uint64_t v34 = a3[6];
  uint64_t v35 = (uint64_t)v5 + v34;
  uint64_t v36 = (char *)a2 + v34;
  uint64_t inited = type metadata accessor for ParticleInitScript(0);
  uint64_t v38 = *(void *)(inited - 8);
  uint64_t v39 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 2, inited);
  int v41 = v39((uint64_t)v36, 2, inited);
  if (!v40)
  {
    if (v41)
    {
      sub_1B62E2D10(v35, type metadata accessor for ParticleInitScript);
      goto LABEL_28;
    }
    *(unsigned char *)uint64_t v35 = *v36;
    *(void *)(v35 + 8) = *((void *)v36 + 1);
    *(void *)(v35 + 16) = *((void *)v36 + 2);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v35 + 24) = *((void *)v36 + 3);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(void *)(v35 + 32) = *((void *)v36 + 4);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    *(unsigned char *)(v35 + 40) = v36[40];
    uint64_t v54 = *(int *)(inited + 36);
    uint64_t v55 = (void *)(v35 + v54);
    uint64_t v56 = &v36[v54];
    uint64_t v57 = type metadata accessor for ScriptIndex();
    uint64_t v58 = *(void *)(v57 - 8);
    char v59 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v58 + 48);
    int v60 = v59(v55, 1, v57);
    int v61 = v59(v56, 1, v57);
    if (v60)
    {
      if (!v61)
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v62 = sub_1B6E31118();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v62 - 8) + 16))(v55, v56, v62);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v55, v56, *(void *)(v58 + 64));
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v55, 0, 1, v57);
        goto LABEL_43;
      }
    }
    else
    {
      if (!v61)
      {
        if (v5 == a2) {
          goto LABEL_43;
        }
        sub_1B62E2D10((uint64_t)v55, (uint64_t (*)(void))type metadata accessor for ScriptIndex);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v67 = sub_1B6E31118();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v67 - 8) + 16))(v55, v56, v67);
          swift_storeEnumTagMultiPayload();
          goto LABEL_43;
        }
        size_t v51 = *(void *)(v58 + 64);
        goto LABEL_39;
      }
      sub_1B62E2D10((uint64_t)v55, (uint64_t (*)(void))type metadata accessor for ScriptIndex);
    }
    sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
    size_t v51 = *(void *)(*(void *)(v64 - 8) + 64);
LABEL_39:
    uint64_t v52 = v55;
    uint64_t v53 = v56;
    goto LABEL_29;
  }
  if (v41)
  {
LABEL_28:
    sub_1B63BDD28(0, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    size_t v51 = *(void *)(*(void *)(v50 - 8) + 64);
    uint64_t v52 = (void *)v35;
    uint64_t v53 = v36;
LABEL_29:
    memcpy(v52, v53, v51);
    goto LABEL_43;
  }
  uint64_t v72 = v38;
  *(unsigned char *)uint64_t v35 = *v36;
  *(void *)(v35 + 8) = *((void *)v36 + 1);
  *(void *)(v35 + 16) = *((void *)v36 + 2);
  *(void *)(v35 + 24) = *((void *)v36 + 3);
  *(void *)(v35 + 32) = *((void *)v36 + 4);
  *(unsigned char *)(v35 + 40) = v36[40];
  uint64_t v42 = *(int *)(inited + 36);
  __dsta = (void *)(v35 + v42);
  uint64_t v43 = &v36[v42];
  uint64_t v44 = type metadata accessor for ScriptIndex();
  uint64_t v45 = *(void *)(v44 - 8);
  uint64_t v46 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v45 + 48);
  unint64_t v47 = v43;
  uint64_t v48 = v44;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  if (v46(v47, 1, v48))
  {
    sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
    memcpy(__dsta, v47, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v63 = sub_1B6E31118();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v63 - 8) + 16))(__dsta, v47, v63);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(__dsta, v47, *(void *)(v45 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v45 + 56))(__dsta, 0, 1, v48);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v72 + 56))(v35, 0, 2, inited);
LABEL_43:
  *(void *)((char *)v5 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return v5;
}

void *sub_1B6653040(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = (_OWORD *)((char *)a1 + v6);
  uint64_t v8 = (_OWORD *)((char *)a2 + v6);
  uint64_t updated = type metadata accessor for ParticleUpdateScript(0);
  uint64_t v10 = *(void *)(updated - 8);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, uint64_t))(v10 + 48))(v8, 2, updated))
  {
    sub_1B63BDD28(0, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64));
  }
  else
  {
    *uint64_t v7 = *v8;
    *((void *)v7 + 2) = *((void *)v8 + 2);
    *((unsigned char *)v7 + 24) = *((unsigned char *)v8 + 24);
    *((void *)v7 + 4) = *((void *)v8 + 4);
    *((unsigned char *)v7 + 40) = *((unsigned char *)v8 + 40);
    uint64_t v12 = *(int *)(updated + 36);
    int v13 = (char *)v7 + v12;
    uint64_t v14 = (char *)v8 + v12;
    uint64_t v15 = type metadata accessor for ScriptIndex();
    uint64_t v16 = *(void *)(v15 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1, v15))
    {
      sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
      memcpy(v13, v14, *(void *)(*(void *)(v17 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v18 = sub_1B6E31118();
        (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 32))(v13, v14, v18);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v13, v14, *(void *)(v16 + 64));
      }
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    (*(void (**)(_OWORD *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 2, updated);
  }
  uint64_t v19 = a3[6];
  size_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  uint64_t inited = type metadata accessor for ParticleInitScript(0);
  uint64_t v23 = *(void *)(inited - 8);
  if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v23 + 48))(v21, 2, inited))
  {
    sub_1B63BDD28(0, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    memcpy(v20, v21, *(void *)(*(void *)(v24 - 8) + 64));
  }
  else
  {
    *size_t v20 = *v21;
    *(_OWORD *)(v20 + 8) = *(_OWORD *)(v21 + 8);
    *(_OWORD *)(v20 + 24) = *(_OWORD *)(v21 + 24);
    v20[40] = v21[40];
    uint64_t v25 = *(int *)(inited + 36);
    uint64_t v26 = &v20[v25];
    uint64_t v27 = &v21[v25];
    uint64_t v28 = type metadata accessor for ScriptIndex();
    uint64_t v29 = *(void *)(v28 - 8);
    if ((*(unsigned int (**)(unsigned char *, uint64_t, uint64_t))(v29 + 48))(v27, 1, v28))
    {
      sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
      memcpy(v26, v27, *(void *)(*(void *)(v30 - 8) + 64));
    }
    else
    {
      if (swift_getEnumCaseMultiPayload() == 1)
      {
        uint64_t v31 = sub_1B6E31118();
        (*(void (**)(unsigned char *, unsigned char *, uint64_t))(*(void *)(v31 - 8) + 32))(v26, v27, v31);
        swift_storeEnumTagMultiPayload();
      }
      else
      {
        memcpy(v26, v27, *(void *)(v29 + 64));
      }
      (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
    }
    (*(void (**)(unsigned char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 2, inited);
  }
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  return a1;
}

void *sub_1B6653574(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  uint64_t v6 = a3[5];
  uint64_t v7 = (uint64_t)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t updated = type metadata accessor for ParticleUpdateScript(0);
  uint64_t v10 = *(void *)(updated - 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 2, updated);
  int v13 = v11((uint64_t)v8, 2, updated);
  if (!v12)
  {
    if (v13)
    {
      sub_1B62E2D10(v7, type metadata accessor for ParticleUpdateScript);
      goto LABEL_7;
    }
    uint64_t v24 = *((void *)v8 + 1);
    *(void *)uint64_t v7 = *(void *)v8;
    *(void *)(v7 + 8) = v24;
    swift_bridgeObjectRelease();
    *(void *)(v7 + 16) = *((void *)v8 + 2);
    swift_bridgeObjectRelease();
    *(unsigned char *)(v7 + 24) = v8[24];
    *(void *)(v7 + 32) = *((void *)v8 + 4);
    swift_bridgeObjectRelease();
    *(unsigned char *)(v7 + 40) = v8[40];
    uint64_t v25 = *(int *)(updated + 36);
    uint64_t v26 = (void *)(v7 + v25);
    uint64_t v27 = &v8[v25];
    uint64_t v28 = type metadata accessor for ScriptIndex();
    uint64_t v29 = *(void *)(v28 - 8);
    uint64_t v30 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v29 + 48);
    int v31 = v30(v26, 1, v28);
    int v32 = v30(v27, 1, v28);
    if (v31)
    {
      if (!v32)
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v33 = sub_1B6E31118();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v33 - 8) + 32))(v26, v27, v33);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v26, v27, *(void *)(v29 + 64));
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v26, 0, 1, v28);
        goto LABEL_22;
      }
    }
    else
    {
      if (!v32)
      {
        if (a1 == a2) {
          goto LABEL_22;
        }
        sub_1B62E2D10((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ScriptIndex);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v67 = sub_1B6E31118();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v67 - 8) + 32))(v26, v27, v67);
          swift_storeEnumTagMultiPayload();
          goto LABEL_22;
        }
        size_t v21 = *(void *)(v29 + 64);
        goto LABEL_18;
      }
      sub_1B62E2D10((uint64_t)v26, (uint64_t (*)(void))type metadata accessor for ScriptIndex);
    }
    sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
    size_t v21 = *(void *)(*(void *)(v35 - 8) + 64);
LABEL_18:
    uint64_t v22 = v26;
    uint64_t v23 = v27;
    goto LABEL_8;
  }
  if (v13)
  {
LABEL_7:
    sub_1B63BDD28(0, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    size_t v21 = *(void *)(*(void *)(v20 - 8) + 64);
    uint64_t v22 = (void *)v7;
    uint64_t v23 = v8;
LABEL_8:
    memcpy(v22, v23, v21);
    goto LABEL_22;
  }
  *(_OWORD *)uint64_t v7 = *(_OWORD *)v8;
  *(void *)(v7 + 16) = *((void *)v8 + 2);
  *(unsigned char *)(v7 + 24) = v8[24];
  *(void *)(v7 + 32) = *((void *)v8 + 4);
  *(unsigned char *)(v7 + 40) = v8[40];
  uint64_t v14 = *(int *)(updated + 36);
  uint64_t v15 = (void *)(v7 + v14);
  uint64_t v16 = &v8[v14];
  uint64_t v17 = type metadata accessor for ScriptIndex();
  uint64_t v18 = *(void *)(v17 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1, v17))
  {
    sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
    memcpy(v15, v16, *(void *)(*(void *)(v19 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v34 = sub_1B6E31118();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v34 - 8) + 32))(v15, v16, v34);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v15, v16, *(void *)(v18 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v15, 0, 1, v17);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 2, updated);
LABEL_22:
  uint64_t v36 = a3[6];
  uint64_t v37 = (uint64_t)a1 + v36;
  uint64_t v38 = (char *)a2 + v36;
  uint64_t inited = type metadata accessor for ParticleInitScript(0);
  uint64_t v40 = *(void *)(inited - 8);
  int v41 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v40 + 48);
  int v42 = v41(v37, 2, inited);
  int v43 = v41((uint64_t)v38, 2, inited);
  if (!v42)
  {
    if (v43)
    {
      sub_1B62E2D10(v37, type metadata accessor for ParticleInitScript);
      goto LABEL_28;
    }
    *(unsigned char *)uint64_t v37 = *v38;
    uint64_t v54 = *((void *)v38 + 2);
    *(void *)(v37 + 8) = *((void *)v38 + 1);
    *(void *)(v37 + 16) = v54;
    swift_bridgeObjectRelease();
    *(void *)(v37 + 24) = *((void *)v38 + 3);
    swift_bridgeObjectRelease();
    *(void *)(v37 + 32) = *((void *)v38 + 4);
    swift_bridgeObjectRelease();
    *(unsigned char *)(v37 + 40) = v38[40];
    uint64_t v55 = *(int *)(inited + 36);
    uint64_t v56 = (void *)(v37 + v55);
    uint64_t v57 = &v38[v55];
    uint64_t v58 = type metadata accessor for ScriptIndex();
    uint64_t v59 = *(void *)(v58 - 8);
    int v60 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v59 + 48);
    int v61 = v60(v56, 1, v58);
    int v62 = v60(v57, 1, v58);
    if (v61)
    {
      if (!v62)
      {
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v63 = sub_1B6E31118();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v63 - 8) + 32))(v56, v57, v63);
          swift_storeEnumTagMultiPayload();
        }
        else
        {
          memcpy(v56, v57, *(void *)(v59 + 64));
        }
        (*(void (**)(void *, void, uint64_t, uint64_t))(v59 + 56))(v56, 0, 1, v58);
        goto LABEL_43;
      }
    }
    else
    {
      if (!v62)
      {
        if (a1 == a2) {
          goto LABEL_43;
        }
        sub_1B62E2D10((uint64_t)v56, (uint64_t (*)(void))type metadata accessor for ScriptIndex);
        if (swift_getEnumCaseMultiPayload() == 1)
        {
          uint64_t v68 = sub_1B6E31118();
          (*(void (**)(void *, char *, uint64_t))(*(void *)(v68 - 8) + 32))(v56, v57, v68);
          swift_storeEnumTagMultiPayload();
          goto LABEL_43;
        }
        size_t v51 = *(void *)(v59 + 64);
        goto LABEL_39;
      }
      sub_1B62E2D10((uint64_t)v56, (uint64_t (*)(void))type metadata accessor for ScriptIndex);
    }
    sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
    size_t v51 = *(void *)(*(void *)(v65 - 8) + 64);
LABEL_39:
    uint64_t v52 = v56;
    uint64_t v53 = v57;
    goto LABEL_29;
  }
  if (v43)
  {
LABEL_28:
    sub_1B63BDD28(0, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    size_t v51 = *(void *)(*(void *)(v50 - 8) + 64);
    uint64_t v52 = (void *)v37;
    uint64_t v53 = v38;
LABEL_29:
    memcpy(v52, v53, v51);
    goto LABEL_43;
  }
  *(unsigned char *)uint64_t v37 = *v38;
  *(_OWORD *)(v37 + 8) = *(_OWORD *)(v38 + 8);
  *(_OWORD *)(v37 + 24) = *(_OWORD *)(v38 + 24);
  *(unsigned char *)(v37 + 40) = v38[40];
  uint64_t v44 = *(int *)(inited + 36);
  uint64_t v45 = (void *)(v37 + v44);
  uint64_t v46 = &v38[v44];
  uint64_t v47 = type metadata accessor for ScriptIndex();
  uint64_t v48 = *(void *)(v47 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v48 + 48))(v46, 1, v47))
  {
    sub_1B63BDD28(0, qword_1EB97DC70, (uint64_t (*)(uint64_t))type metadata accessor for ScriptIndex, MEMORY[0x1E4FBB718]);
    memcpy(v45, v46, *(void *)(*(void *)(v49 - 8) + 64));
  }
  else
  {
    if (swift_getEnumCaseMultiPayload() == 1)
    {
      uint64_t v64 = sub_1B6E31118();
      (*(void (**)(void *, char *, uint64_t))(*(void *)(v64 - 8) + 32))(v45, v46, v64);
      swift_storeEnumTagMultiPayload();
    }
    else
    {
      memcpy(v45, v46, *(void *)(v48 + 64));
    }
    (*(void (**)(void *, void, uint64_t, uint64_t))(v48 + 56))(v45, 0, 1, v47);
  }
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v40 + 56))(v37, 0, 2, inited);
LABEL_43:
  *(void *)((char *)a1 + a3[7]) = *(void *)((char *)a2 + a3[7]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1B6654008(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B665401C);
}

uint64_t sub_1B665401C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }
  else
  {
    sub_1B63BDD28(0, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)a1 + *(int *)(a3 + 20);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
      return v12(v11, a2, v10);
    }
    else
    {
      sub_1B63BDD28(0, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 48);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)a1 + *(int *)(a3 + 24);
      return v14(v16, a2, v15);
    }
  }
}

uint64_t sub_1B66541A8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B66541BC);
}

void *sub_1B66541BC(void *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *uint64_t result = (a2 - 1);
  }
  else
  {
    sub_1B63BDD28(0, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = (char *)v5 + *(int *)(a4 + 20);
      int v12 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56);
      return (void *)v12(v11, a2, a2, v10);
    }
    else
    {
      sub_1B63BDD28(0, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
      uint64_t v14 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56);
      uint64_t v15 = v13;
      uint64_t v16 = (char *)v5 + *(int *)(a4 + 24);
      return (void *)v14(v16, a2, a2, v15);
    }
  }
  return result;
}

void sub_1B6654348()
{
  sub_1B63BDD28(319, &qword_1E9DCDB40, type metadata accessor for ParticleUpdateScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
  if (v0 <= 0x3F)
  {
    sub_1B63BDD28(319, &qword_1E9DCDB48, type metadata accessor for ParticleInitScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    if (v1 <= 0x3F) {
      swift_initStructMetadata();
    }
  }
}

uint64_t destroy for GraphComponent()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t initializeWithCopy for GraphComponent(uint64_t a1, void *a2)
{
  uint64_t v4 = swift_unknownObjectWeakCopyInit();
  uint64_t v5 = a2[2];
  *(void *)(v4 + 8) = a2[1];
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  *(void *)(a1 + 24) = v6;
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for GraphComponent(uint64_t a1, void *a2)
{
  uint64_t v4 = swift_unknownObjectWeakCopyAssign();
  *(void *)(v4 + 8) = a2[1];
  *(void *)(v4 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  swift_retain();
  swift_release();
  return a1;
}

__n128 initializeWithTake for GraphComponent(uint64_t a1, __n128 *a2)
{
  int v3 = (__n128 *)swift_unknownObjectWeakTakeInit();
  v3->n128_u64[1] = a2->n128_u64[1];
  __n128 result = a2[1];
  v3[1] = result;
  v3[2].n128_u64[0] = a2[2].n128_u64[0];
  return result;
}

uint64_t assignWithTake for GraphComponent(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)(swift_unknownObjectWeakTakeAssign() + 8) = *(_OWORD *)(a2 + 8);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for GraphComponent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for GraphComponent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 40) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      *(void *)(result + 8) = 1;
      return result;
    }
    *(unsigned char *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GraphComponent()
{
  return &type metadata for GraphComponent;
}

uint64_t sub_1B66546B8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B69C4A4C(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

uint64_t sub_1B6654710()
{
  return sub_1B6654748(36);
}

uint64_t sub_1B6654718(uint64_t a1, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B6654730()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B6654740()
{
  return sub_1B6654748(33);
}

uint64_t sub_1B6654748(uint64_t a1)
{
  sub_1B6654718(*(void *)(v1 + 16), *(void *)(v1 + 24), *(unsigned char *)(v1 + 32));

  return MEMORY[0x1F4186498](v1, a1, 7);
}

uint64_t sub_1B6654790()
{
  return sub_1B66547A0(69);
}

uint64_t sub_1B6654798()
{
  return sub_1B66547A0(68);
}

uint64_t sub_1B66547A0(uint64_t a1)
{
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v1, a1, 7);
}

uint64_t sub_1B66547EC()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1B665482C()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 92, 7);
}

void sub_1B665487C()
{
  if (!qword_1E9DCDBE8)
  {
    sub_1B63BDD28(255, (unint64_t *)&unk_1E9DD0AF0, type metadata accessor for GraphScript, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for VFXObjectScriptsDiff.Diff);
    sub_1B6654918();
    unint64_t v0 = sub_1B6E32C68();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DCDBE8);
    }
  }
}

unint64_t sub_1B6654918()
{
  unint64_t result = qword_1E9DD0A60;
  if (!qword_1E9DD0A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD0A60);
  }
  return result;
}

uint64_t sub_1B665496C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(void))
{
  uint64_t v6 = a5(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8))(a1, v6);
  return a1;
}

uint64_t sub_1B66549CC(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t), uint64_t (*a5)(uint64_t, uint64_t))
{
  sub_1B63BDD28(0, a3, a4, a5);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 40))(a2, a1, v7);
  return a2;
}

void *sub_1B6654A3C(void *a1)
{
  return sub_1B66504F8(a1);
}

char *sub_1B6654A54()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = v1 + 64;
  uint64_t v3 = 1 << *(unsigned char *)(v1 + 32);
  uint64_t v4 = -1;
  if (v3 < 64) {
    uint64_t v4 = ~(-1 << v3);
  }
  unint64_t v5 = v4 & *(void *)(v1 + 64);
  int64_t v6 = (unint64_t)(v3 + 63) >> 6;
  swift_bridgeObjectRetain_n();
  uint64_t v7 = 0;
  uint64_t v8 = (char *)MEMORY[0x1E4FBC860];
  if (!v5) {
    goto LABEL_13;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v5));
  v5 &= v5 - 1;
  unint64_t v10 = v9 | (v7 << 6);
  while (1)
  {
    uint64_t v11 = *(void *)(*(void *)(v1 + 56) + 24 * v10);
    uint64_t v12 = swift_conformsToProtocol2();
    uint64_t v13 = v12 ? v12 : 0;
    uint64_t v14 = v12 ? v11 : 0;
    if (v14)
    {
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v8 = sub_1B62F94D0(0, *((void *)v8 + 2) + 1, 1, v8);
      }
      uint64_t v17 = v8;
      unint64_t v18 = *((void *)v8 + 2);
      uint64_t v19 = v17;
      unint64_t v20 = *((void *)v17 + 3);
      if (v18 >= v20 >> 1) {
        uint64_t v19 = sub_1B62F94D0(v20 > 1, v18 + 1, 1, v19);
      }
      *((void *)v19 + 2) = v18 + 1;
      size_t v21 = &v19[16 * v18];
      uint64_t v8 = v19;
      *((void *)v21 + 4) = v14;
      *((void *)v21 + 5) = v13;
      if (v5) {
        goto LABEL_4;
      }
    }
    else if (v5)
    {
      goto LABEL_4;
    }
LABEL_13:
    uint64_t v15 = v7 + 1;
    if (v7 + 1 >= v6) {
      goto LABEL_35;
    }
    unint64_t v16 = *(void *)(v2 + 8 * v15);
    if (!v16)
    {
      uint64_t v15 = v7 + 2;
      if (v7 + 2 >= v6) {
        goto LABEL_35;
      }
      unint64_t v16 = *(void *)(v2 + 8 * v15);
      if (!v16)
      {
        uint64_t v15 = v7 + 3;
        if (v7 + 3 >= v6) {
          goto LABEL_35;
        }
        unint64_t v16 = *(void *)(v2 + 8 * v15);
        if (!v16)
        {
          uint64_t v15 = v7 + 4;
          if (v7 + 4 >= v6) {
            goto LABEL_35;
          }
          unint64_t v16 = *(void *)(v2 + 8 * v15);
          if (!v16)
          {
            uint64_t v15 = v7 + 5;
            if (v7 + 5 >= v6) {
              goto LABEL_35;
            }
            unint64_t v16 = *(void *)(v2 + 8 * v15);
            if (!v16)
            {
              uint64_t v15 = v7 + 6;
              if (v7 + 6 >= v6) {
                goto LABEL_35;
              }
              unint64_t v16 = *(void *)(v2 + 8 * v15);
              if (!v16) {
                break;
              }
            }
          }
        }
      }
    }
LABEL_28:
    unint64_t v5 = (v16 - 1) & v16;
    unint64_t v10 = __clz(__rbit64(v16)) + (v15 << 6);
    uint64_t v7 = v15;
  }
  while (v6 - 7 != v7)
  {
    unint64_t v16 = *(void *)(v1 + 120 + 8 * v7++);
    if (v16)
    {
      uint64_t v15 = v7 + 6;
      goto LABEL_28;
    }
  }
LABEL_35:
  swift_release();
  swift_bridgeObjectRelease();
  return v8;
}

char *sub_1B6654C8C()
{
  uint64_t v0 = sub_1B6654A54();
  uint64_t v1 = *((void *)v0 + 2);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(v0 + 32);
    uint64_t v3 = (char *)MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v5 = *v2;
      uint64_t v6 = swift_conformsToProtocol2();
      if (v6) {
        uint64_t v7 = v6;
      }
      else {
        uint64_t v7 = 0;
      }
      if (v6) {
        uint64_t v8 = v5;
      }
      else {
        uint64_t v8 = 0;
      }
      if (v8)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v3 = sub_1B68C1658(0, *((void *)v3 + 2) + 1, 1, v3);
        }
        unint64_t v10 = *((void *)v3 + 2);
        unint64_t v9 = *((void *)v3 + 3);
        if (v10 >= v9 >> 1) {
          uint64_t v3 = sub_1B68C1658(v9 > 1, v10 + 1, 1, v3);
        }
        *((void *)v3 + 2) = v10 + 1;
        uint64_t v4 = &v3[16 * v10];
        *((void *)v4 + 4) = v8;
        *((void *)v4 + 5) = v7;
      }
      v2 += 2;
      --v1;
    }
    while (v1);
  }
  else
  {
    uint64_t v3 = (char *)MEMORY[0x1E4FBC860];
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B6654DA4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v5 = sub_1B6C82C84();
  uint64_t v7 = v6;
  if (*(void *)(*(void *)(v2 + 16) + 16))
  {
    swift_bridgeObjectRetain();
    sub_1B62B2CE0(v5, v7);
    if (v8)
    {
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    }
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRetain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v48 = *(void *)(v2 + 16);
  *(void *)(v2 + 16) = 0x8000000000000000;
  sub_1B67E443C(a1, 0, 1, v5, v7, isUniquelyReferenced_nonNull_native);
  *(void *)(v2 + 16) = v48;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B665545C();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
  *(void *)(inited + 32) = 0;
  *(unsigned char *)(inited + 40) = 1;
  *(void *)(inited + 48) = v5;
  *(void *)(inited + 56) = v7;
  uint64_t v12 = sub_1B68ACF90(a2);
  sub_1B6641878(v12);
  uint64_t v44 = *(void *)(inited + 16);
  if (!v44) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v43 = inited + 32;
  sub_1B6655BC0(0, (unint64_t *)&qword_1EB980C90, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
  uint64_t v13 = 0;
  while (1)
  {
    uint64_t v14 = v43 + 32 * v13;
    uint64_t v47 = *(void *)v14;
    char v15 = *(unsigned char *)(v14 + 8);
    uint64_t v16 = *(void *)(v14 + 16);
    uint64_t v17 = *(void *)(v14 + 24);
    uint64_t v18 = swift_initStackObject();
    *(_OWORD *)(v18 + 16) = xmmword_1B6E77050;
    *(void *)(v18 + 32) = v16;
    *(void *)(v18 + 40) = v17;
    swift_bridgeObjectRetain_n();
    uint64_t v19 = sub_1B66554B4();
    swift_bridgeObjectRelease();
    uint64_t v20 = v19[2];
    if (v20)
    {
      uint64_t v39 = sub_1B6335858(1, v20 + 1, 1, (void *)v18);
      uint64_t v18 = (uint64_t)v39;
      uint64_t v40 = v19[2];
      if (v40) {
        break;
      }
    }
LABEL_12:
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void *)(v18 + 16);
    if (v21)
    {
      uint64_t v45 = v13;
      uint64_t v22 = (uint64_t *)(v18 + 40);
      while (1)
      {
        uint64_t v26 = *(v22 - 1);
        uint64_t v25 = *v22;
        uint64_t v27 = *(void *)(*(void *)(v3 + 24) + 16);
        swift_bridgeObjectRetain();
        if (v27)
        {
          swift_bridgeObjectRetain();
          sub_1B62B2CE0(v26, v25);
          if (v28) {
            goto LABEL_16;
          }
          swift_bridgeObjectRelease();
        }
        char v29 = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v30 = *(void **)(v3 + 24);
        *(void *)(v3 + 24) = 0x8000000000000000;
        unint64_t v32 = sub_1B62B2CE0(v26, v25);
        char v33 = v31;
        uint64_t v34 = v30[2] + ((v31 & 1) == 0);
        if (v30[3] >= v34)
        {
          if (v29)
          {
            uint64_t v37 = v30;
            if (v31) {
              goto LABEL_26;
            }
          }
          else
          {
            sub_1B6ACD0AC();
            uint64_t v37 = v30;
            if (v33) {
              goto LABEL_26;
            }
          }
        }
        else
        {
          sub_1B6AB83F8(v34, v29);
          uint64_t v35 = sub_1B62B2CE0(v26, v25);
          if ((v33 & 1) != (v36 & 1))
          {
            sub_1B6E33838();
            __break(1u);
            goto LABEL_39;
          }
          unint64_t v32 = v35;
          uint64_t v37 = v30;
          if (v33)
          {
LABEL_26:
            uint64_t v38 = v37[7] + 24 * v32;
            *(void *)uint64_t v38 = a1;
            *(void *)(v38 + 8) = v47;
            *(unsigned char *)(v38 + 16) = v15;
            goto LABEL_15;
          }
        }
        v37[(v32 >> 6) + 8] |= 1 << v32;
        uint64_t v23 = (uint64_t *)(v37[6] + 16 * v32);
        *uint64_t v23 = v26;
        v23[1] = v25;
        uint64_t v24 = v37[7] + 24 * v32;
        *(void *)uint64_t v24 = a1;
        *(void *)(v24 + 8) = v47;
        *(unsigned char *)(v24 + 16) = v15;
        ++v37[2];
        swift_bridgeObjectRetain();
LABEL_15:
        *(void *)(v3 + 24) = v37;
LABEL_16:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        v22 += 2;
        if (!--v21)
        {
          swift_bridgeObjectRelease();
          uint64_t v13 = v45;
          goto LABEL_10;
        }
      }
    }
    swift_bridgeObjectRelease();
LABEL_10:
    if (++v13 == v44) {
      return swift_bridgeObjectRelease();
    }
  }
  unint64_t v41 = (unint64_t)&v39[2 * v39[2] + 4];
  if ((unint64_t)(v19 + 4) >= v41 + 16 * v40 || v41 >= (unint64_t)&v19[2 * v40 + 4])
  {
    swift_arrayInitWithCopy();
    *(void *)(v18 + 16) += v40;
    goto LABEL_12;
  }
LABEL_39:
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6655288()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for TypeRegistry()
{
  return self;
}

uint64_t getEnumTagSinglePayload for TypeRegistry.TypeInfo(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 17)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for TypeRegistry.TypeInfo(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(unsigned char *)(result + 16) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 17) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 17) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for TypeRegistry.TypeInfo()
{
  return &type metadata for TypeRegistry.TypeInfo;
}

unint64_t sub_1B665538C()
{
  unint64_t result = qword_1E9DCDBF8;
  if (!qword_1E9DCDBF8)
  {
    sub_1B6655BC0(255, (unint64_t *)&qword_1E9DCDBF0, MEMORY[0x1E4FBB7A8], MEMORY[0x1E4FBB908]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDBF8);
  }
  return result;
}

unint64_t sub_1B6655408()
{
  unint64_t result = qword_1E9DD3A40;
  if (!qword_1E9DD3A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD3A40);
  }
  return result;
}

void sub_1B665545C()
{
  if (!qword_1EB980D50)
  {
    sub_1B6645A00();
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980D50);
    }
  }
}

void *sub_1B66554B4()
{
  if (sub_1B6E319F8())
  {
    sub_1B633AF88();
    uint64_t v0 = sub_1B6E32618();
    uint64_t v2 = v1;
    uint64_t v3 = sub_1B6335858(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v5 = v3[2];
    unint64_t v4 = v3[3];
    if (v5 >= v4 >> 1) {
      uint64_t v3 = sub_1B6335858(v4 > 1, v5 + 1, 1, v3);
    }
    _OWORD v3[2] = v5 + 1;
    uint64_t v6 = &v3[2 * v5];
    void v6[4] = v0;
    void v6[5] = v2;
    uint64_t v7 = sub_1B6E32618();
    uint64_t v9 = v8;
    unint64_t v11 = v3[2];
    unint64_t v10 = v3[3];
    if (v11 >= v10 >> 1) {
      uint64_t v3 = sub_1B6335858(v10 > 1, v11 + 1, 1, v3);
    }
    _OWORD v3[2] = v11 + 1;
    uint64_t v12 = &v3[2 * v11];
    _OWORD v12[4] = v7;
    v12[5] = v9;
    uint64_t v13 = sub_1B6E32618();
    uint64_t v15 = v14;
    unint64_t v17 = v3[2];
    unint64_t v16 = v3[3];
    if (v17 >= v16 >> 1) {
      uint64_t v3 = sub_1B6335858(v16 > 1, v17 + 1, 1, v3);
    }
    _OWORD v3[2] = v17 + 1;
    uint64_t v18 = &v3[2 * v17];
    void v18[4] = v13;
    v18[5] = v15;
  }
  else
  {
    uint64_t v3 = (void *)MEMORY[0x1E4FBC860];
  }
  if (sub_1B6E319F8())
  {
    sub_1B633AF88();
    uint64_t v19 = sub_1B6E32618();
    uint64_t v21 = v20;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = sub_1B6335858(0, v3[2] + 1, 1, v3);
    }
    unint64_t v23 = v3[2];
    unint64_t v22 = v3[3];
    if (v23 >= v22 >> 1) {
      uint64_t v3 = sub_1B6335858(v22 > 1, v23 + 1, 1, v3);
    }
    _OWORD v3[2] = v23 + 1;
    uint64_t v24 = &v3[2 * v23];
    v24[4] = v19;
    v24[5] = v21;
    uint64_t v25 = sub_1B6E32618();
    uint64_t v27 = v26;
    unint64_t v29 = v3[2];
    unint64_t v28 = v3[3];
    if (v29 >= v28 >> 1) {
      uint64_t v3 = sub_1B6335858(v28 > 1, v29 + 1, 1, v3);
    }
    _OWORD v3[2] = v29 + 1;
    uint64_t v30 = &v3[2 * v29];
    v30[4] = v25;
    v30[5] = v27;
  }
  if (sub_1B6E319F8())
  {
    sub_1B633AF88();
    uint64_t v31 = sub_1B6E32618();
    uint64_t v33 = v32;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = sub_1B6335858(0, v3[2] + 1, 1, v3);
    }
    unint64_t v35 = v3[2];
    unint64_t v34 = v3[3];
    if (v35 >= v34 >> 1) {
      uint64_t v3 = sub_1B6335858(v34 > 1, v35 + 1, 1, v3);
    }
    _OWORD v3[2] = v35 + 1;
    char v36 = &v3[2 * v35];
    _WORD v36[4] = v31;
    v36[5] = v33;
    uint64_t v37 = sub_1B6E32618();
    uint64_t v39 = v38;
    unint64_t v41 = v3[2];
    unint64_t v40 = v3[3];
    if (v41 >= v40 >> 1) {
      uint64_t v3 = sub_1B6335858(v40 > 1, v41 + 1, 1, v3);
    }
    _OWORD v3[2] = v41 + 1;
    int v42 = &v3[2 * v41];
    v42[4] = v37;
    void v42[5] = v39;
    uint64_t v43 = sub_1B6E32618();
    uint64_t v45 = v44;
    unint64_t v47 = v3[2];
    unint64_t v46 = v3[3];
    if (v47 >= v46 >> 1) {
      uint64_t v3 = sub_1B6335858(v46 > 1, v47 + 1, 1, v3);
    }
    _OWORD v3[2] = v47 + 1;
    uint64_t v48 = &v3[2 * v47];
    v48[4] = v43;
    v48[5] = v45;
  }
  sub_1B633AF88();
  if (sub_1B6E32678())
  {
    uint64_t v49 = sub_1B6E325F8();
    uint64_t v50 = *(void *)(v49 + 16);
    if (v50)
    {
      uint64_t v51 = v49 + 16 * v50;
      uint64_t v53 = *(void *)(v51 + 16);
      uint64_t v52 = *(void *)(v51 + 24);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v53 = 0;
      uint64_t v52 = 0;
    }
    swift_bridgeObjectRelease();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v3 = sub_1B6335858(0, v3[2] + 1, 1, v3);
    }
    unint64_t v55 = v3[2];
    unint64_t v54 = v3[3];
    if (v55 >= v54 >> 1) {
      uint64_t v3 = sub_1B6335858(v54 > 1, v55 + 1, 1, v3);
    }
    _OWORD v3[2] = v55 + 1;
    uint64_t v56 = &v3[2 * v55];
    v56[4] = v53;
    v56[5] = v52;
  }
  return v3;
}

void sub_1B6655BC0(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1B6655C0C(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6657958(0, &qword_1E9DCDC18, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B66578B0();
  sub_1B6E33A88();
  LODWORD(v12) = *(_DWORD *)v3;
  char v13 = 0;
  sub_1B66579BC();
  sub_1B6E32FA8();
  if (!v2)
  {
    LODWORD(v12) = *(_DWORD *)(v3 + 4);
    char v13 = 1;
    sub_1B6E32FA8();
    LOBYTE(v12) = 2;
    sub_1B6E32F78();
    LOBYTE(v12) = 3;
    sub_1B6E32F58();
    LOBYTE(v12) = 4;
    sub_1B6E32F78();
    LOBYTE(v12) = 5;
    sub_1B6E32F78();
    LOBYTE(v12) = 6;
    sub_1B6E32F78();
    uint64_t v12 = *(void *)(v3 + 28);
    char v13 = 7;
    sub_1B6657A10();
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B6655EB8(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB445C(*a1, *a2);
}

uint64_t sub_1B6655EC4()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6655F0C()
{
  return sub_1B6E33928();
}

uint64_t sub_1B6655F38()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6655F7C()
{
  uint64_t result = 0x676E4172656E6E69;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x676E41726574756FLL;
      break;
    case 2:
      uint64_t result = 0x6152746365707361;
      break;
    case 3:
      uint64_t result = 0x75676E6174636572;
      break;
    case 4:
      uint64_t result = 1918985582;
      break;
    case 5:
      uint64_t result = 7496038;
      break;
    case 6:
      uint64_t result = 0x7469736E65746E69;
      break;
    case 7:
      uint64_t result = 0x65727574786574;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6656080@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6656274(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B66560A8(unsigned char *a1@<X8>)
{
  *a1 = 8;
}

uint64_t sub_1B66560B4(uint64_t a1)
{
  unint64_t v2 = sub_1B66578B0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B66560F0(uint64_t a1)
{
  unint64_t v2 = sub_1B66578B0();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B665612C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B66565F4(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B6656174(void *a1)
{
  return sub_1B6655C0C(a1);
}

uint64_t sub_1B665618C()
{
  return type metadata accessor for ProjectorSystem();
}

uint64_t sub_1B66561AC(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(a2 + 8))(v2 + 28, 0, ObjectType, a2);
}

double sub_1B6656204@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0x3FC90FDA3F9C61A9;
  *(_DWORD *)(a1 + 8) = 1065353216;
  *(unsigned char *)(a1 + 12) = 0;
  *(void *)(a1 + 16) = 0x3F8000003DCCCCCDLL;
  *(_DWORD *)(a1 + 24) = 1065353216;
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)(a1 + 28) = 0xFFFFFFFFLL;
  return result;
}

uint64_t type metadata accessor for ProjectorSystem()
{
  return self;
}

const char *sub_1B6656260()
{
  return "Projector";
}

uint64_t sub_1B6656274(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x676E4172656E6E69 && a2 == 0xEA0000000000656CLL;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x676E41726574756FLL && a2 == 0xEA0000000000656CLL || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6152746365707361 && a2 == 0xEB000000006F6974 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x75676E6174636572 && a2 == 0xEB0000000072616CLL || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 1918985582 && a2 == 0xE400000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 7496038 && a2 == 0xE300000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x7469736E65746E69 && a2 == 0xE900000000000079 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else if (a1 == 0x65727574786574 && a2 == 0xE700000000000000)
  {
    swift_bridgeObjectRelease();
    return 7;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 7;
    }
    else {
      return 8;
    }
  }
}

uint64_t sub_1B66565F4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6657958(0, &qword_1E9DCDC00, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)&v24 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B66578B0();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  char v25 = 0;
  sub_1B6657904();
  sub_1B6E32DF8();
  int v11 = v24;
  char v25 = 1;
  sub_1B6E32DF8();
  int v12 = v24;
  LOBYTE(v24) = 2;
  sub_1B6E32DC8();
  int v14 = v13;
  LOBYTE(v24) = 3;
  char v15 = sub_1B6E32DA8();
  LOBYTE(v24) = 4;
  sub_1B6E32DC8();
  int v17 = v16;
  LOBYTE(v24) = 5;
  sub_1B6E32DC8();
  int v19 = v18;
  LOBYTE(v24) = 6;
  sub_1B6E32DC8();
  int v21 = v20;
  char v25 = 7;
  sub_1B62B1EA8();
  sub_1B6E32DF8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v22 = v24;
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(_DWORD *)a2 = v11;
  *(_DWORD *)(a2 + 4) = v12;
  *(_DWORD *)(a2 + 8) = v14;
  *(unsigned char *)(a2 + 12) = v15 & 1;
  *(_DWORD *)(a2 + 16) = v17;
  *(_DWORD *)(a2 + 20) = v19;
  *(_DWORD *)(a2 + 24) = v21;
  *(void *)(a2 + 28) = v22;
  return result;
}

void sub_1B6656920(float32x2_t *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, float32x4_t a7, float32x4_t a8, float32x4_t a9, float32x4_t a10, float a11, float a12)
{
  int32x4_t v13 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(a7, COERCE_FLOAT(*(_OWORD *)a1->f32)), a8, *a1, 1), a9, *(float32x4_t *)a1->f32, 2), a10, *(float32x4_t *)a1->f32, 3);
  float v14 = *(float *)&v13.i32[3];
  float v15 = *(float *)&v13.i32[2] / *(float *)&v13.i32[3];
  if ((float)(*(float *)&v13.i32[2] / *(float *)&v13.i32[3]) > 0.0)
  {
    *(float32x2_t *)a9.f32 = vdiv_f32(*(float32x2_t *)v13.i8, (float32x2_t)vdup_laneq_s32(v13, 3));
    float32x4_t v16 = a9;
    v16.f32[2] = v15;
    __asm { FMOV            V1.4S, #1.0 }
    int32x4_t v22 = vcgtq_f32(_Q1, vabsq_f32(v16));
    int v23 = v22.i32[1];
    if (v22.i32[1] <= v22.i32[0]) {
      int v23 = v22.i32[0];
    }
    if (v22.i32[2] > v23) {
      int v23 = v22.i32[2];
    }
    if (v23 < 0)
    {
      float32x2_t v32 = *(float32x2_t *)a9.f32;
      *(double *)v29.i64 = (*(double (**)(uint64_t, double))(a3 + 40))(a3, COERCE_DOUBLE(vadd_f32(vmul_f32(*(float32x2_t *)a9.f32, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000)));
      float v30 = 1.0;
      float v31 = 0.0;
      if (vaddv_f32(vmul_f32(v32, v32)) < 1.0) {
        float v31 = 1.0;
      }
      if ((*(unsigned char *)(a4 + 12) & 1) == 0) {
        float v30 = v31;
      }
      *a2 = vaddq_f32(*a2, vmulq_n_f32(vsubq_f32(vmulq_n_f32(v29, COERCE_FLOAT(*(void *)(a4 + 24))), *a2), COERCE_FLOAT(COERCE_UNSIGNED_INT64(sub_1B6995964(a5, a6 & 0xFFFFFFFFFFLL, (float)((float)(v14 * a11)+ a12) * v30)))));
    }
  }
}

float32x4_t sub_1B6656A58(float32x2_t *a1, float32x4_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, float32x4_t result, float32x4_t a7, float32x4_t a8, float32x4_t a9, float a10, float a11, float32x4_t a12)
{
  int32x4_t v12 = (int32x4_t)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(result, COERCE_FLOAT(*(_OWORD *)a1->f32)), a7, *a1, 1), a8, *(float32x4_t *)a1->f32, 2), a9, *(float32x4_t *)a1->f32, 3);
  result.i32[0] = v12.i32[3];
  if ((float)(*(float *)&v12.i32[2] / *(float *)&v12.i32[3]) > 0.0)
  {
    *(float32x2_t *)a7.f32 = vdiv_f32(*(float32x2_t *)v12.i8, (float32x2_t)vdup_laneq_s32(v12, 3));
    float32x4_t v13 = a7;
    v13.f32[2] = *(float *)&v12.i32[2] / *(float *)&v12.i32[3];
    float32x4_t v14 = vabsq_f32(v13);
    __asm { FMOV            V3.4S, #1.0 }
    int32x4_t v20 = vcgtq_f32(_Q3, v14);
    int v21 = v20.i32[1];
    if (v20.i32[1] <= v20.i32[0]) {
      int v21 = v20.i32[0];
    }
    if (v20.i32[2] > v21) {
      int v21 = v20.i32[2];
    }
    if (v21 < 0)
    {
      float v23 = 1.0;
      if ((*(unsigned char *)(a3 + 12) & 1) == 0 && vaddv_f32(vmul_f32(*(float32x2_t *)a7.f32, *(float32x2_t *)a7.f32)) >= 1.0) {
        float v23 = 0.0;
      }
      uint64_t result = vaddq_f32(*a2, vmulq_n_f32(vsubq_f32(a12, *a2), COERCE_FLOAT(COERCE_UNSIGNED_INT64(sub_1B6995964(a4, a5 & 0xFFFFFFFFFFLL, (float)((float)(*(float *)&v12.i32[3] * a10) + a11) * v23)))));
      *a2 = result;
    }
  }
  return result;
}

void *sub_1B6656B38(uint64_t a1)
{
  uint64_t v145 = *MEMORY[0x1E4F143B8];
  uint64_t v4 = *(void *)a1;
  swift_retain();
  uint64_t v5 = *(void **)(a1 + 8);
  swift_retain();
  sub_1B695DA1C((uint64_t)v5, &v134);
  swift_release();
  if ((v134.n128_u64[1] & 0xFF00000000) == 0x200000000)
  {
    LOBYTE(v7) = 0;
    uint64_t v8 = 0;
    unsigned int v9 = -1;
    float v10 = 1.0;
    unsigned __int32 v11 = 1067213225;
    float v12 = 0.1;
    float v13 = 1.5708;
    float v14 = 1.0;
    v6.i32[0] = 1.0;
  }
  else
  {
    uint64_t v8 = v136;
    unsigned int v9 = HIDWORD(v135);
    unsigned __int32 v11 = v134.n128_u32[0];
    float v10 = v134.n128_f32[2];
    unint64_t v7 = HIDWORD(v134.n128_u64[1]) & 1;
    float v13 = v134.n128_f32[1];
    float v14 = *((float *)&v135 + 1);
    float v12 = *(float *)&v135;
    v6.i32[0] = DWORD2(v135);
  }
  v107[0] = v11;
  *(float *)&v107[1] = v13;
  *(float *)&void v107[2] = v10;
  char v108 = v7;
  float v109 = v12;
  float v110 = v14;
  int32x2_t v86 = v6;
  __int32 v111 = v6.i32[0];
  unsigned int v112 = v9;
  int v113 = v8;
  sub_1B62E9D50(v5, (uint64_t)v116);
  sub_1B62CA210((uint64_t)v116, (uint64_t)&v142, qword_1EB97EA20);
  if (v143) {
    float32x4_t v15 = (float32x4_t)xmmword_1B6E4F300;
  }
  else {
    float32x4_t v15 = v142;
  }
  *(double *)v146.columns[0].i64 = sub_1B688AAF0((float32x4_t)xmmword_1B6E50C80, v15);
  simd_float4x4 v147 = __invert_f4(v146);
  float32x4_t v93 = (float32x4_t)v147.columns[1];
  float32x4_t v95 = (float32x4_t)v147.columns[0];
  float32x4_t v89 = (float32x4_t)v147.columns[3];
  float32x4_t v91 = (float32x4_t)v147.columns[2];
  if (v14 >= v12) {
    float v16 = v12;
  }
  else {
    float v16 = v14;
  }
  if (v12 > v14) {
    float v17 = v12;
  }
  else {
    float v17 = v14;
  }
  float v18 = fmaxf(v13, 0.0);
  if (v18 > 3.1416) {
    float v18 = 3.1416;
  }
  sub_1B6333B58(0, 1, fmaxf(v18, 0.0), fmaxf(v10, 0.00000011921), v16, v17, 0, 0, 1);
  float32x4_t v96 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v95.f32[0]), v20, *(float32x2_t *)v95.f32, 1), v21, v95, 2), v22, v95, 3);
  float32x4_t v94 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v93.f32[0]), v20, *(float32x2_t *)v93.f32, 1), v21, v93, 2), v22, v93, 3);
  float32x4_t v92 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v91.f32[0]), v20, *(float32x2_t *)v91.f32, 1), v21, v91, 2), v22, v91, 3);
  float32x4_t v90 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v19, v89.f32[0]), v20, *(float32x2_t *)v89.f32, 1), v21, v89, 2), v22, v89, 3);
  float v23 = -1.0 / (float)(v14 - v12);
  float v24 = 1.0 - (float)(v12 * v23);
  long long v25 = *(_OWORD *)(a1 + 104);
  long long v104 = *(_OWORD *)(a1 + 88);
  long long v105 = v25;
  uint64_t v106 = *(void *)(a1 + 120);
  sub_1B663C238((uint64_t)&v97);
  if (v9 != -1 || v8)
  {
    sub_1B6CEE8E8(v9 | (unint64_t)(v8 << 32), v117);
    sub_1B62CA210((uint64_t)v117, (uint64_t)v132, (unint64_t *)&unk_1EB97EFD0);
    if (v133)
    {
      long long v138 = v132[4];
      long long v139 = v132[5];
      long long v140 = v132[6];
      uint64_t v141 = v133;
      __n128 v134 = (__n128)v132[0];
      long long v135 = v132[1];
      long long v136 = v132[2];
      long long v137 = v132[3];
      sub_1B6AFEFC8((uint64_t)&v134, 0, 1, (uint64_t)v118);
      sub_1B6657630((uint64_t)v118, (uint64_t)v129);
      if (*((void *)&v130 + 1) != 1)
      {
        v114[0] = v129[0];
        v114[1] = v129[1];
        v114[2] = v130;
        uint64_t v115 = v131;
        v102[0] = v97;
        v102[1] = v98;
        uint64_t v103 = v99;
        sub_1B62C9DA8(v4, (uint64_t)v102, 0x200000000, v119);
        sub_1B62CA210((uint64_t)v119, (uint64_t)&v121, (unint64_t *)&qword_1EB97DC50);
        if ((void)v121)
        {
          if (v128 > 0 && (uint64_t v77 = v125) != 0)
          {
            uint64_t v45 = v127[4];
            char v46 = *(unsigned char *)(v126 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            v100[0] = v121;
            v100[1] = v122;
            uint64_t v101 = v123;
            uint64_t v69 = (uint64_t)(v127 + 6);
            uint64_t v71 = v124;
            uint64_t v88 = v127;
            uint64_t v67 = v127 + 8;
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v47 = 0;
            uint64_t i = 0;
            char v73 = v46;
            uint64_t v75 = v45;
            do
            {
              uint64_t v83 = i;
              uint64_t v85 = v47;
              uint64_t v49 = (unsigned int *)(v71 + 48 * v47);
              uint64_t v81 = *v49;
              uint64_t v79 = v49[1];
              uint64_t v51 = (uint64_t *)*((void *)v49 + 2);
              uint64_t v50 = *((void *)v49 + 3);
              uint64_t v53 = *((void *)v49 + 4);
              uint64_t v52 = *((void *)v49 + 5);
              if (v46)
              {
                unint64_t v54 = *(os_unfair_lock_s **)(v52 + 376);
                swift_retain_n();
                os_unfair_lock_lock(v54);
                os_unfair_lock_lock(*(os_unfair_lock_t *)(v52 + 344));
                swift_release();
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v45);
              sub_1B62CA210(v69, (uint64_t)v144, &qword_1EB97DE20);
              uint64_t v55 = v88[4];
              uint64_t v56 = *(void *)(*(void *)(*(void *)(*(void *)(v52 + 40) + 16) + 32) + 16) + 1;
              swift_retain();
              v88[6] = ecs_stack_allocator_allocate(v55, 48 * v56, 8);
              v88[7] = v56;
              v67[1] = 0;
              v67[2] = 0;
              *uint64_t v67 = 0;
              swift_release();
              uint64_t v57 = (float32x2_t *)sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v51, v50, v53, (uint64_t)v88);
              uint64_t v58 = sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v51, v50, v53, (uint64_t)v88);
              uint64_t v59 = (float32x4_t *)v58;
              if (v51)
              {
                uint64_t v45 = v75;
                for (uint64_t i = v83; v53; --v53)
                {
                  unint64_t v1 = v1 & 0xFFFFFF0000000000 | 0x700000000;
                  sub_1B6656920(v57, v59++, (uint64_t)v114, (uint64_t)v107, 0, v1, v96, v94, v92, v90, v23, v24);
                  v57 += 2;
                }
              }
              else
              {
                uint64_t v45 = v75;
                uint64_t i = v83;
                if (v81 != v79)
                {
                  uint64_t v60 = v79 - v81;
                  int v61 = (float32x4_t *)(v58 + 16 * v81);
                  int v62 = &v57[2 * v81];
                  do
                  {
                    unint64_t v2 = v2 & 0xFFFFFF0000000000 | 0x700000000;
                    sub_1B6656920(v62, v61++, (uint64_t)v114, (uint64_t)v107, 0, v2, v96, v94, v92, v90, v23, v24);
                    v62 += 2;
                    --v60;
                  }
                  while (v60);
                }
              }
              char v46 = v73;
              sub_1B6345178(v88, (unsigned __int16 **)v100, (uint64_t)v144);
              sub_1B634507C((char *)v52);
              ecs_stack_allocator_pop_snapshot(v45);
              if (v73)
              {
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v52 + 344));
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v52 + 376));
              }
              swift_release();
              uint64_t v47 = v85 + 1;
            }
            while (v85 + 1 != v77);
            sub_1B66576EC(v117[0].i64);
            sub_1B62CA064((uint64_t)&v97);
          }
          else
          {
            sub_1B6657794(v119, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F2C8);
            sub_1B66576EC(v117[0].i64);
            sub_1B62CA064((uint64_t)&v97);
          }
          swift_release();
          sub_1B6657794(v119, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
          uint64_t v64 = v119;
          return sub_1B6657794(v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
        }
      }
      sub_1B66576EC(v117[0].i64);
    }
    goto LABEL_57;
  }
  long long v121 = v97;
  long long v122 = v98;
  uint64_t v123 = v99;
  sub_1B62C9DA8(v4, (uint64_t)&v121, 0x200000000, v132);
  sub_1B62CA210((uint64_t)v132, (uint64_t)&v134, (unint64_t *)&qword_1EB97DC50);
  if (!v134.n128_u64[0])
  {
LABEL_57:
    sub_1B62CA064((uint64_t)&v97);
    return (void *)swift_release();
  }
  if ((uint64_t)v139 <= 0 || (uint64_t v74 = *((void *)&v137 + 1)) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B62CA064((uint64_t)&v97);
    goto LABEL_60;
  }
  float32x4_t v87 = (float32x4_t)vdupq_lane_s32(v86, 0);
  uint64_t v26 = *(void *)(*((void *)&v138 + 1) + 32);
  char v27 = *(unsigned char *)(v138 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v119[0] = v134;
  v119[1] = v135;
  uint64_t v120 = v136;
  uint64_t v70 = *((void *)&v138 + 1) + 48;
  uint64_t v72 = *((void *)&v136 + 1);
  uint64_t v84 = (void *)*((void *)&v138 + 1);
  uint64_t v68 = (void *)(*((void *)&v138 + 1) + 64);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  char v65 = v27;
  uint64_t v66 = v26;
  do
  {
    uint64_t v80 = v29;
    uint64_t v82 = v28;
    float v30 = (unsigned int *)(v72 + 48 * v28);
    uint64_t v78 = *v30;
    uint64_t v76 = v30[1];
    float v31 = (uint64_t *)*((void *)v30 + 2);
    uint64_t v32 = *((void *)v30 + 3);
    uint64_t v34 = *((void *)v30 + 4);
    uint64_t v33 = *((void *)v30 + 5);
    if (v27)
    {
      unint64_t v35 = *(os_unfair_lock_s **)(v33 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v35);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v33 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v26);
    sub_1B62CA210(v70, (uint64_t)v117, &qword_1EB97DE20);
    uint64_t v36 = v84[4];
    uint64_t v37 = *(void *)(*(void *)(*(void *)(*(void *)(v33 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v84[6] = ecs_stack_allocator_allocate(v36, 48 * v37, 8);
    v84[7] = v37;
    v68[1] = 0;
    v68[2] = 0;
    *uint64_t v68 = 0;
    swift_release();
    uint64_t v38 = (float32x2_t *)sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v31, v32, v34, (uint64_t)v84);
    uint64_t v39 = sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v31, v32, v34, (uint64_t)v84);
    unint64_t v40 = (float32x4_t *)v39;
    if (v31)
    {
      uint64_t v29 = v80;
      if (v34)
      {
        uint64_t v26 = v66;
        uint64_t v41 = v82;
        do
        {
          unint64_t v2 = v2 & 0xFFFFFF0000000000 | 0x700000000;
          sub_1B6656A58(v38, v40++, (uint64_t)v107, 0, v2, v96, v94, v92, v90, v23, v24, v87);
          v38 += 2;
          --v34;
        }
        while (v34);
        char v27 = v65;
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v29 = v80;
      if (v78 != v76)
      {
        uint64_t v42 = v76 - v78;
        uint64_t v43 = (float32x4_t *)(v39 + 16 * v78);
        uint64_t v44 = &v38[2 * v78];
        uint64_t v26 = v66;
        do
        {
          unint64_t v1 = v1 & 0xFFFFFF0000000000 | 0x700000000;
          sub_1B6656A58(v44, v43++, (uint64_t)v107, 0, v1, v96, v94, v92, v90, v23, v24, v87);
          v44 += 2;
          --v42;
        }
        while (v42);
        goto LABEL_34;
      }
    }
    uint64_t v26 = v66;
LABEL_34:
    char v27 = v65;
    uint64_t v41 = v82;
LABEL_35:
    sub_1B6345178(v84, (unsigned __int16 **)v119, (uint64_t)v117);
    sub_1B634507C((char *)v33);
    ecs_stack_allocator_pop_snapshot(v26);
    if (v27)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v33 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v33 + 376));
    }
    swift_release();
    uint64_t v28 = v41 + 1;
  }
  while (v28 != v74);
  sub_1B62CA064((uint64_t)&v97);
LABEL_60:
  swift_release();
  sub_1B6657794(v132, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  uint64_t v64 = v132;
  return sub_1B6657794(v64, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
}

uint64_t sub_1B6657630(uint64_t a1, uint64_t a2)
{
  sub_1B6657694();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B6657694()
{
  if (!qword_1E9DD6DC0)
  {
    type metadata accessor for __vfx_sampler2d(255);
    unint64_t v0 = sub_1B6E324B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD6DC0);
    }
  }
}

uint64_t *sub_1B66576EC(uint64_t *a1)
{
  return a1;
}

uint64_t sub_1B6657748(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  uint64_t result = a15;
  if (a15)
  {
    swift_bridgeObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

void *sub_1B6657794(void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

__n128 initializeWithCopy for ProjectorParameters(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for ProjectorParameters(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 36)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 12);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ProjectorParameters(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)__n128 result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 36) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 12) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ProjectorParameters()
{
  return &type metadata for ProjectorParameters;
}

unint64_t sub_1B66578B0()
{
  unint64_t result = qword_1E9DCDC08;
  if (!qword_1E9DCDC08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC08);
  }
  return result;
}

unint64_t sub_1B6657904()
{
  unint64_t result = qword_1E9DCDC10;
  if (!qword_1E9DCDC10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC10);
  }
  return result;
}

void sub_1B6657958(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B66578B0();
    unint64_t v7 = a3(a1, &type metadata for ProjectorParameters.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unint64_t sub_1B66579BC()
{
  unint64_t result = qword_1E9DCDC20;
  if (!qword_1E9DCDC20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC20);
  }
  return result;
}

unint64_t sub_1B6657A10()
{
  unint64_t result = qword_1E9DD29F0;
  if (!qword_1E9DD29F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD29F0);
  }
  return result;
}

uint64_t getEnumTagSinglePayload for ShaderScriptParameter.VertexProperty(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xF9) {
    goto LABEL_17;
  }
  if (a2 + 7 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 7) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 7;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 7;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 8;
  int v8 = v6 - 8;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for ProjectorParameters.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF8)
  {
    unsigned int v6 = ((a2 - 249) >> 8) + 1;
    *unint64_t result = a2 + 7;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6657BC0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 7;
        break;
    }
  }
  return result;
}

unsigned char *sub_1B6657BE8(unsigned char *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

ValueMetadata *type metadata accessor for ProjectorParameters.CodingKeys()
{
  return &type metadata for ProjectorParameters.CodingKeys;
}

unint64_t sub_1B6657C04()
{
  unint64_t result = qword_1E9DCDC28;
  if (!qword_1E9DCDC28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC28);
  }
  return result;
}

unint64_t sub_1B6657C5C()
{
  unint64_t result = qword_1E9DCDC30;
  if (!qword_1E9DCDC30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC30);
  }
  return result;
}

unint64_t sub_1B6657CB4()
{
  unint64_t result = qword_1E9DCDC38;
  if (!qword_1E9DCDC38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC38);
  }
  return result;
}

ValueMetadata *type metadata accessor for Position()
{
  return &type metadata for Position;
}

uint64_t sub_1B6657D18(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  uint64_t v1 = sub_1B6E33A68();
  nullsub_1(v1);
  sub_1B62C550C((uint64_t)v4, v5);
  int v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
  sub_1B62AF4C8(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  sub_1B62AEEDC((unint64_t *)&qword_1EB97D1D8, (unint64_t *)&qword_1EB980EB0, v2);
  sub_1B6E335C8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

double sub_1B6657E40@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = xmmword_1B6E4F370;
  return result;
}

uint64_t sub_1B6657E50(void *a1, __n128 a2)
{
  v11[0] = a2;
  sub_1B62AF4C8(0, &qword_1E9DCDC58, (uint64_t (*)(void))sub_1B6658820, (uint64_t)&type metadata for Normal.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  int v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6658820();
  sub_1B6E33A88();
  v11[1] = v11[0];
  unsigned int v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
  sub_1B62AF4C8(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
  sub_1B62AEEDC((unint64_t *)&qword_1EB97D1F8, (unint64_t *)&qword_1EB980EF0, v9);
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6658034()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6658078()
{
  return sub_1B6E33928();
}

uint64_t sub_1B66580A0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B66580E0()
{
  return 0x30775F65756C6176;
}

uint64_t sub_1B66580F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x30775F65756C6176 && a2 == 0xE800000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1B6E334B8();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B6658190(uint64_t a1)
{
  unint64_t v2 = sub_1B6658820();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B66581CC(uint64_t a1)
{
  unint64_t v2 = sub_1B6658820();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6658208@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_1B66585F0(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6658234(void *a1)
{
  return sub_1B6657E50(a1, *v1);
}

void sub_1B6658250(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
}

uint64_t sub_1B6658258()
{
  return sub_1B6E33988();
}

uint64_t sub_1B66582AC()
{
  return sub_1B6E318B8();
}

uint64_t sub_1B66582C4()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6658314@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B6658368(void *a1@<X8>)
{
  *a1 = 0x31775F65756C6176;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1B6658384()
{
  return 0x31775F65756C6176;
}

uint64_t sub_1B665839C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B66583F4(uint64_t a1)
{
  unint64_t v2 = sub_1B665846C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6658430(uint64_t a1)
{
  unint64_t v2 = sub_1B665846C();

  return MEMORY[0x1F41862B0](a1, v2);
}

unint64_t sub_1B665846C()
{
  unint64_t result = qword_1EB97FF60;
  if (!qword_1EB97FF60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97FF60);
  }
  return result;
}

ValueMetadata *type metadata accessor for Position.CodingKeys()
{
  return &type metadata for Position.CodingKeys;
}

ValueMetadata *type metadata accessor for Normal()
{
  return &type metadata for Normal;
}

unint64_t sub_1B66584EC()
{
  unint64_t result = qword_1E9DCDC40;
  if (!qword_1E9DCDC40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC40);
  }
  return result;
}

unint64_t sub_1B6658544()
{
  unint64_t result = qword_1EB97FF70;
  if (!qword_1EB97FF70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97FF70);
  }
  return result;
}

unint64_t sub_1B665859C()
{
  unint64_t result = qword_1EB97FF68;
  if (!qword_1EB97FF68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97FF68);
  }
  return result;
}

uint64_t sub_1B66585F0(void *a1)
{
  sub_1B62AF4C8(0, &qword_1E9DCDC48, (uint64_t (*)(void))sub_1B6658820, (uint64_t)&type metadata for Normal.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  int v8 = (char *)v11 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6658820();
  sub_1B6E33A48();
  if (!v1)
  {
    unsigned int v9 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
    sub_1B62AF4C8(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
    sub_1B62AEEDC((unint64_t *)&qword_1EB97D210, (unint64_t *)&qword_1EB980EF0, v9);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v11[1];
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B6658820()
{
  unint64_t result = qword_1E9DCDC50;
  if (!qword_1E9DCDC50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC50);
  }
  return result;
}

unsigned char *_s3VFX8PositionV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6658910);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Normal.CodingKeys()
{
  return &type metadata for Normal.CodingKeys;
}

unint64_t sub_1B665894C()
{
  unint64_t result = qword_1E9DCDC60;
  if (!qword_1E9DCDC60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC60);
  }
  return result;
}

unint64_t sub_1B66589A4()
{
  unint64_t result = qword_1E9DCDC68;
  if (!qword_1E9DCDC68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC68);
  }
  return result;
}

unint64_t sub_1B66589FC()
{
  unint64_t result = qword_1E9DCDC70;
  if (!qword_1E9DCDC70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC70);
  }
  return result;
}

uint64_t sub_1B6658EFC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_1B6E32738();
  uint64_t result = swift_conformsToProtocol2();
  if (!result)
  {
    __break(1u);
    goto LABEL_9;
  }
  uint64_t result = swift_conformsToProtocol2();
  if (!result)
  {
LABEL_9:
    __break(1u);
    return result;
  }
  uint64_t v4 = result;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v5 = result;
    swift_retain();
    swift_retain();
    sub_1B69DD80C(v5, v5, v1, v2, v4, v11);
    sub_1B62B31E8((uint64_t)v11, (uint64_t)&v8);
    if (v9)
    {
      sub_1B62B57A8(&v8, v10);
      int v6 = sub_1B66593E0((uint64_t)v10, *(void **)(v1 + 96));
      *(void *)&long long v8 = sub_1B6CD9DCC(v6);
      *((void *)&v8 + 1) = v7;
      MEMORY[0x1F4188790](v8, v7);
      sub_1B665C6C8((uint64_t (*)(uint64_t, uint64_t))sub_1B665D770);
      swift_release();
      sub_1B62B32CC((uint64_t)v11);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v10);
      return v8;
    }
    else
    {
      sub_1B62B32CC((uint64_t)v11);
      swift_release();
      sub_1B62B32CC((uint64_t)&v8);
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B6659134(uint64_t result, unint64_t a2)
{
  if (a2 >> 60 != 15)
  {
    uint64_t v3 = v2;
    uint64_t v5 = result;
    uint64_t v17 = result;
    unint64_t v18 = a2;
    uint64_t Strong = swift_weakLoadStrong();
    if (Strong)
    {
      uint64_t v7 = Strong;
      sub_1B62FFBB0(v5, a2);
      uint64_t v8 = sub_1B6E32738();
      uint64_t result = swift_conformsToProtocol2();
      if (result)
      {
        uint64_t result = swift_conformsToProtocol2();
        if (result)
        {
          uint64_t v9 = result;
          swift_retain();
          sub_1B665C9BC(&v17, v3, (uint64_t)v16);
          sub_1B62B31E8((uint64_t)v16, (uint64_t)&v13);
          if (v14)
          {
            float v10 = sub_1B62B57A8(&v13, v15);
            MEMORY[0x1F4188790](v10, v11);
            v12[2] = v7;
            v12[3] = v15;
            _OWORD v12[4] = v3;
            v12[5] = v8;
            void v12[6] = v9;
            sub_1B63BA2B0((void (*)(void))sub_1B665D6AC, (uint64_t)v12);
            sub_1B665D488(v5, a2);
            sub_1B62B32CC((uint64_t)v16);
            sub_1B62C2360(v17, v18);
            swift_release();
            return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
          }
          else
          {
            swift_release();
            sub_1B665D488(v5, a2);
            sub_1B62B32CC((uint64_t)v16);
            sub_1B62C2360(v17, v18);
            return sub_1B62B32CC((uint64_t)&v13);
          }
        }
      }
      else
      {
        __break(1u);
      }
      __break(1u);
      return result;
    }
    return sub_1B665D488(v5, a2);
  }
  return result;
}

uint64_t sub_1B6659358@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _OWORD *a3@<X8>)
{
  if (*(void *)(a1 + 40)) {
    uint64_t v5 = *(void *)(a1 + 40);
  }
  else {
    uint64_t v5 = 0xFFFFFFFFLL;
  }
  uint64_t v6 = *(void *)(*(void *)(a1 + 160) + 32);
  swift_retain();
  sub_1B62CD2F0(v5, a2, v6, a3);
  return swift_release();
}

uint64_t sub_1B66593E0(uint64_t a1, void *a2)
{
  uint64_t v4 = sub_1B6E31808();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v9 = 1;
  switch((unint64_t)a2)
  {
    case 0uLL:
      sub_1B62CAAD8(a1, (uint64_t)v19);
      swift_dynamicCast();
      sub_1B6E317E8();
      uint64_t v11 = sub_1B6E317A8();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      if (v13 >> 60 == 15)
      {
LABEL_19:
        LODWORD(v14) = 0;
      }
      else
      {
        switch(v13 >> 62)
        {
          case 1uLL:
            sub_1B665D488(v11, v13);
            uint64_t v14 = (uint64_t)(0xFFFFFFFF00000001 * v11) >> 32;
            break;
          case 2uLL:
            uint64_t v16 = *(void *)(v11 + 16);
            uint64_t v15 = *(void *)(v11 + 24);
            sub_1B665D488(v11, v13);
            LODWORD(v14) = v15 - v16;
            break;
          case 3uLL:
            sub_1B665D488(v11, v13);
            goto LABEL_19;
          default:
            sub_1B665D488(v11, v13);
            LODWORD(v14) = BYTE6(v13);
            break;
        }
      }
      uint64_t v9 = (v14 + 1);
      break;
    case 1uLL:
    case 2uLL:
    case 7uLL:
      return v9;
    case 3uLL:
    case 8uLL:
      uint64_t v9 = 2;
      break;
    case 4uLL:
    case 9uLL:
    case 0xCuLL:
      uint64_t v9 = 4;
      break;
    case 5uLL:
    case 6uLL:
    case 0xAuLL:
    case 0xBuLL:
    case 0xDuLL:
      uint64_t v9 = 8;
      break;
    case 0xEuLL:
    case 0xFuLL:
    case 0x12uLL:
      uint64_t v9 = 16;
      break;
    case 0x10uLL:
      uint64_t v9 = 48;
      break;
    case 0x11uLL:
      uint64_t v9 = 64;
      break;
    case 0x13uLL:
    case 0x14uLL:
      uint64_t v9 = 32;
      break;
    case 0x15uLL:
      uint64_t v9 = 96;
      break;
    case 0x16uLL:
      uint64_t v9 = 128;
      break;
    case 0x17uLL:
      uint64_t v9 = 0;
      break;
    case 0x18uLL:
    case 0x19uLL:
      sub_1B62CAAD8(a1, (uint64_t)v19);
      sub_1B665D6D0();
      swift_dynamicCast();
      id v10 = v18;
      uint64_t v9 = (uint64_t)objc_msgSend(v18, sel_serializedVFXBindingSize);

      break;
    default:
      v19[0] = 0;
      v19[1] = 0xE000000000000000;
      sub_1B6E31948();
      id v18 = a2;
      sub_1B6E32B18();
      sub_1B6E32BE8();
      __break(1u);
      JUMPOUT(0x1B6659704);
  }
  return v9;
}

void sub_1B665977C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v44 = *MEMORY[0x1E4F143B8];
  switch(a3)
  {
    case 0:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      swift_dynamicCast();
      _s3VFX22VFXMemorySerializationC11writeString_2toySS_SvtFZ_0(*(uint64_t *)&v43[0], *((uint64_t *)&v43[0] + 1), a2);
      swift_bridgeObjectRelease();
      return;
    case 1:
    case 2:
    case 7:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      swift_dynamicCast();
      *(unsigned char *)a2 = v43[0];
      return;
    case 3:
    case 8:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      swift_dynamicCast();
      *(_WORD *)a2 = v43[0];
      return;
    case 4:
    case 9:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      swift_dynamicCast();
      *(_DWORD *)a2 = v43[0];
      return;
    case 5:
    case 6:
    case 10:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      goto LABEL_11;
    case 11:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      goto LABEL_11;
    case 12:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      swift_dynamicCast();
      *(_DWORD *)a2 = v43[0];
      return;
    case 13:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      sub_1B665D644(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
LABEL_11:
      swift_dynamicCast();
      *(void *)a2 = *(void *)&v43[0];
      return;
    case 14:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      id v10 = &qword_1EB980EB0;
      uint64_t v11 = MEMORY[0x1E4FBB470];
      unint64_t v12 = sub_1B6645830;
      unint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
      goto LABEL_22;
    case 15:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      id v10 = &qword_1EB980EF0;
      uint64_t v11 = MEMORY[0x1E4FBB470];
      unint64_t v12 = sub_1B6645830;
      unint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
      goto LABEL_22;
    case 16:
      sub_1B62CAAD8(a1, (uint64_t)v43);
      type metadata accessor for simd_float3x3(0);
      swift_dynamicCast();
      long long v14 = v36;
      long long v15 = v37;
      *(_OWORD *)a2 = v35;
      *(_OWORD *)(a2 + 16) = v14;
      *(_OWORD *)(a2 + 32) = v15;
      return;
    case 17:
      sub_1B62CAAD8(a1, (uint64_t)v43);
      type metadata accessor for simd_float4x4(0);
      swift_dynamicCast();
      long long v16 = v36;
      long long v17 = v37;
      long long v18 = v38;
      *(_OWORD *)a2 = v35;
      *(_OWORD *)(a2 + 16) = v16;
      *(_OWORD *)(a2 + 32) = v17;
      *(_OWORD *)(a2 + 48) = v18;
      return;
    case 18:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      id v10 = (uint64_t *)&unk_1E9DCDCA0;
      uint64_t v11 = MEMORY[0x1E4FBB3D0];
      unint64_t v12 = sub_1B665D5F0;
      unint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
LABEL_22:
      sub_1B665D644(0, (unint64_t *)v10, (uint64_t (*)(void))v12, v11, v13);
      swift_dynamicCast();
      *(_OWORD *)a2 = v43[0];
      return;
    case 19:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      float32x4_t v19 = (unint64_t *)&unk_1E9DCDC98;
      uint64_t v20 = MEMORY[0x1E4FBB3D0];
      float32x4_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
      goto LABEL_19;
    case 20:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      float32x4_t v19 = (unint64_t *)&unk_1E9DCDC88;
      uint64_t v20 = MEMORY[0x1E4FBB3D0];
      float32x4_t v21 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
LABEL_19:
      sub_1B665D644(0, v19, (uint64_t (*)(void))sub_1B665D5F0, v20, v21);
      swift_dynamicCast();
      long long v22 = v43[1];
      *(_OWORD *)a2 = v43[0];
      *(_OWORD *)(a2 + 16) = v22;
      break;
    case 21:
      sub_1B62CAAD8(a1, (uint64_t)v43);
      type metadata accessor for simd_double3x3(0);
      swift_dynamicCast();
      long long v23 = v36;
      long long v24 = v37;
      long long v25 = v38;
      long long v26 = v39;
      long long v27 = v40;
      *(_OWORD *)a2 = v35;
      *(_OWORD *)(a2 + 16) = v23;
      *(_OWORD *)(a2 + 32) = v24;
      *(_OWORD *)(a2 + 48) = v25;
      *(_OWORD *)(a2 + 64) = v26;
      *(_OWORD *)(a2 + 80) = v27;
      break;
    case 22:
      sub_1B62CAAD8(a1, (uint64_t)v43);
      type metadata accessor for simd_double4x4(0);
      swift_dynamicCast();
      long long v28 = v36;
      long long v29 = v37;
      long long v30 = v38;
      long long v31 = v39;
      long long v32 = v40;
      long long v33 = v41;
      long long v34 = v42;
      *(_OWORD *)a2 = v35;
      *(_OWORD *)(a2 + 16) = v28;
      *(_OWORD *)(a2 + 32) = v29;
      *(_OWORD *)(a2 + 48) = v30;
      *(_OWORD *)(a2 + 64) = v31;
      *(_OWORD *)(a2 + 80) = v32;
      *(_OWORD *)(a2 + 96) = v33;
      *(_OWORD *)(a2 + 112) = v34;
      break;
    case 23:
      return;
    case 24:
    case 25:
      sub_1B62CAAD8(a1, (uint64_t)&v35);
      sub_1B665D6D0();
      swift_dynamicCast();
      uint64_t v5 = *(void **)&v43[0];
      id v6 = objc_msgSend(*(id *)&v43[0], sel_serializedVFXBindingData);
      uint64_t v7 = sub_1B6E30FD8();
      unint64_t v9 = v8;

      sub_1B6E31048();
      sub_1B62C2360(v7, v9);

      break;
    default:
      *(void *)&long long v35 = 0;
      *((void *)&v35 + 1) = 0xE000000000000000;
      sub_1B6E31948();
      *(void *)&v43[0] = a3;
      sub_1B6E32B18();
      sub_1B6E32BE8();
      __break(1u);
      JUMPOUT(0x1B6659ECCLL);
  }
}

void sub_1B6659F44(char *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  switch(a2)
  {
    case 0:
      uint64_t v19 = sub_1B6E31758();
      if (v20) {
        uint64_t v21 = v19;
      }
      else {
        uint64_t v21 = 0;
      }
      unint64_t v22 = 0xE000000000000000;
      *(void *)(a3 + 24) = MEMORY[0x1E4FBB1A0];
      if (v20) {
        unint64_t v22 = v20;
      }
      *(void *)a3 = v21;
      *(void *)(a3 + 8) = v22;
      return;
    case 1:
      char v12 = *a1 & 1;
      uint64_t v13 = MEMORY[0x1E4FBB390];
      goto LABEL_21;
    case 2:
      char v12 = *a1;
      uint64_t v13 = MEMORY[0x1E4FBC358];
      goto LABEL_21;
    case 3:
      __int16 v14 = *(_WORD *)a1;
      uint64_t v15 = MEMORY[0x1E4FBC450];
      goto LABEL_25;
    case 4:
      int v16 = *(_DWORD *)a1;
      uint64_t v17 = MEMORY[0x1E4FBC4C0];
      goto LABEL_11;
    case 5:
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = MEMORY[0x1E4FBC538];
      goto LABEL_27;
    case 6:
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = MEMORY[0x1E4FBB550];
      goto LABEL_27;
    case 7:
      char v12 = *a1;
      uint64_t v13 = MEMORY[0x1E4FBC098];
LABEL_21:
      *(void *)(a3 + 24) = v13;
      *(unsigned char *)a3 = v12;
      return;
    case 8:
      __int16 v14 = *(_WORD *)a1;
      uint64_t v15 = MEMORY[0x1E4FBC0F8];
LABEL_25:
      *(void *)(a3 + 24) = v15;
      *(_WORD *)a3 = v14;
      return;
    case 9:
      int v16 = *(_DWORD *)a1;
      uint64_t v17 = MEMORY[0x1E4FBC150];
LABEL_11:
      *(void *)(a3 + 24) = v17;
      *(_DWORD *)a3 = v16;
      return;
    case 10:
      uint64_t v23 = *(void *)a1;
      uint64_t v24 = MEMORY[0x1E4FBC1C8];
LABEL_27:
      *(void *)(a3 + 24) = v24;
      *(void *)a3 = v23;
      return;
    case 11:
      uint64_t v11 = *(void *)a1;
      *(void *)(a3 + 24) = MEMORY[0x1E4FBB3D0];
      *(void *)a3 = v11;
      return;
    case 12:
      int v18 = *(_DWORD *)a1;
      *(void *)(a3 + 24) = MEMORY[0x1E4FBB470];
      *(_DWORD *)a3 = v18;
      return;
    case 13:
      uint64_t v25 = *(void *)a1;
      sub_1B665D644(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
      *(void *)(a3 + 24) = v26;
      *(void *)a3 = v25;
      return;
    case 14:
      long long v57 = *(_OWORD *)a1;
      uint64_t v5 = &qword_1EB980EB0;
      uint64_t v6 = MEMORY[0x1E4FBB470];
      uint64_t v7 = sub_1B6645830;
      unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
      goto LABEL_31;
    case 15:
      long long v57 = *(_OWORD *)a1;
      uint64_t v5 = &qword_1EB980EF0;
      uint64_t v6 = MEMORY[0x1E4FBB470];
      uint64_t v7 = sub_1B6645830;
      unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
      goto LABEL_31;
    case 16:
      long long v52 = *((_OWORD *)a1 + 1);
      long long v58 = *(_OWORD *)a1;
      long long v48 = *((_OWORD *)a1 + 2);
      type metadata accessor for simd_float3x3(0);
      *(void *)(a3 + 24) = v9;
      id v10 = (_OWORD *)swift_allocObject();
      *(void *)a3 = v10;
      v10[1] = v58;
      _OWORD v10[2] = v52;
      v10[3] = v48;
      return;
    case 17:
      long long v53 = *((_OWORD *)a1 + 1);
      long long v59 = *(_OWORD *)a1;
      long long v45 = *((_OWORD *)a1 + 3);
      long long v49 = *((_OWORD *)a1 + 2);
      type metadata accessor for simd_float4x4(0);
      *(void *)(a3 + 24) = v27;
      long long v28 = (_OWORD *)swift_allocObject();
      *(void *)a3 = v28;
      v28[1] = v59;
      v28[2] = v53;
      v28[3] = v49;
      v28[4] = v45;
      return;
    case 18:
      long long v57 = *(_OWORD *)a1;
      uint64_t v5 = (uint64_t *)&unk_1E9DCDCA0;
      uint64_t v6 = MEMORY[0x1E4FBB3D0];
      uint64_t v7 = sub_1B665D5F0;
      unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
LABEL_31:
      sub_1B665D644(0, (unint64_t *)v5, (uint64_t (*)(void))v7, v6, v8);
      *(void *)(a3 + 24) = v29;
      uint64_t v30 = swift_allocObject();
      *(void *)a3 = v30;
      goto LABEL_37;
    case 19:
      long long v54 = *((_OWORD *)a1 + 1);
      long long v57 = *(_OWORD *)a1;
      long long v31 = (unint64_t *)&unk_1E9DCDC98;
      uint64_t v32 = MEMORY[0x1E4FBB3D0];
      long long v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
      goto LABEL_36;
    case 20:
      long long v54 = *((_OWORD *)a1 + 1);
      long long v57 = *(_OWORD *)a1;
      long long v31 = (unint64_t *)&unk_1E9DCDC88;
      uint64_t v32 = MEMORY[0x1E4FBB3D0];
      long long v33 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
LABEL_36:
      sub_1B665D644(0, v31, (uint64_t (*)(void))sub_1B665D5F0, v32, v33);
      *(void *)(a3 + 24) = v38;
      uint64_t v30 = swift_allocObject();
      *(void *)a3 = v30;
      *(_OWORD *)(v30 + 32) = v54;
LABEL_37:
      *(_OWORD *)(v30 + 16) = v57;
      break;
    case 21:
      long long v60 = *(_OWORD *)a1;
      long long v46 = *((_OWORD *)a1 + 1);
      long long v55 = *((_OWORD *)a1 + 2);
      long long v50 = *((_OWORD *)a1 + 4);
      long long v41 = *((_OWORD *)a1 + 5);
      long long v43 = *((_OWORD *)a1 + 3);
      type metadata accessor for simd_double3x3(0);
      *(void *)(a3 + 24) = v34;
      long long v35 = (_OWORD *)swift_allocObject();
      *(void *)a3 = v35;
      v35[1] = v60;
      uint64_t v35[2] = v46;
      v35[3] = v55;
      v35[4] = v43;
      _OWORD v35[5] = v50;
      v35[6] = v41;
      break;
    case 22:
      long long v61 = *(_OWORD *)a1;
      long long v44 = *((_OWORD *)a1 + 1);
      long long v56 = *((_OWORD *)a1 + 2);
      long long v40 = *((_OWORD *)a1 + 5);
      long long v42 = *((_OWORD *)a1 + 3);
      long long v47 = *((_OWORD *)a1 + 6);
      long long v51 = *((_OWORD *)a1 + 4);
      long long v39 = *((_OWORD *)a1 + 7);
      type metadata accessor for simd_double4x4(0);
      *(void *)(a3 + 24) = v36;
      long long v37 = (_OWORD *)swift_allocObject();
      *(void *)a3 = v37;
      v37[1] = v61;
      void v37[2] = v44;
      v37[3] = v56;
      v37[4] = v42;
      v37[5] = v51;
      v37[6] = v40;
      v37[7] = v47;
      v37[8] = v39;
      break;
    case 23:
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      break;
    case 24:
    case 25:
      id v4 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F39BD8]), sel_initWithSerializedVFXBindingDataPointer_, a1);
      *(void *)(a3 + 24) = sub_1B665D6D0();
      *(void *)a3 = v4;
      break;
    default:
      sub_1B6E31948();
      sub_1B6E32B18();
      sub_1B6E32BE8();
      __break(1u);
      JUMPOUT(0x1B665A568);
  }
}

uint64_t sub_1B665A5D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a3 + 40)) {
    uint64_t v8 = *(void *)(a3 + 40);
  }
  else {
    uint64_t v8 = 0xFFFFFFFFLL;
  }
  uint64_t v9 = *(void *)(*(void *)(a3 + 160) + 32);
  swift_retain();
  sub_1B633D2DC(a2, v8, a4, a5, v9);
  return swift_release();
}

uint64_t sub_1B665A658()
{
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_1B665A6B0()
{
  sub_1B665A658();

  return swift_deallocClassInstance();
}

unint64_t VFXBindingType.init(rawValue:)(unint64_t a1)
{
  return sub_1B665D378(a1);
}

unint64_t sub_1B665A704@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1B665D378(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t sub_1B665A738()
{
  return sub_1B6E31BA8();
}

uint64_t sub_1B665A798()
{
  return sub_1B6E31B08();
}

void sub_1B665A7E8(uint64_t a1)
{
  switch(a1)
  {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 23:
    case 24:
      return;
    case 13:
      uint64_t v1 = &qword_1EB980E90;
      uint64_t v2 = MEMORY[0x1E4FBB470];
      uint64_t v5 = sub_1B6645830;
      goto LABEL_9;
    case 14:
      uint64_t v1 = (unint64_t *)&qword_1EB980EB0;
      uint64_t v2 = MEMORY[0x1E4FBB470];
      uint64_t v3 = sub_1B6645830;
      goto LABEL_15;
    case 15:
      uint64_t v1 = (unint64_t *)&qword_1EB980EF0;
      uint64_t v2 = MEMORY[0x1E4FBB470];
      char v4 = sub_1B6645830;
      goto LABEL_11;
    case 16:
      type metadata accessor for simd_float3x3(0);
      return;
    case 17:
      type metadata accessor for simd_float4x4(0);
      return;
    case 18:
      uint64_t v1 = (unint64_t *)&unk_1E9DCDCA0;
      uint64_t v2 = MEMORY[0x1E4FBB3D0];
      uint64_t v5 = sub_1B665D5F0;
LABEL_9:
      uint64_t v6 = (uint64_t (*)(void))v5;
      uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
      goto LABEL_16;
    case 19:
      uint64_t v1 = (unint64_t *)&unk_1E9DCDC98;
      uint64_t v2 = MEMORY[0x1E4FBB3D0];
      uint64_t v3 = sub_1B665D5F0;
LABEL_15:
      uint64_t v6 = (uint64_t (*)(void))v3;
      uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
      goto LABEL_16;
    case 20:
      uint64_t v1 = (unint64_t *)&unk_1E9DCDC88;
      uint64_t v2 = MEMORY[0x1E4FBB3D0];
      char v4 = sub_1B665D5F0;
LABEL_11:
      uint64_t v6 = (uint64_t (*)(void))v4;
      uint64_t v7 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
LABEL_16:
      sub_1B665D644(0, v1, v6, v2, v7);
      break;
    case 21:
      type metadata accessor for simd_double3x3(0);
      break;
    case 22:
      type metadata accessor for simd_double4x4(0);
      break;
    case 25:
      sub_1B665D590();
      break;
    default:
      sub_1B6E337C8();
      __break(1u);
      JUMPOUT(0x1B665AA60);
  }
}

uint64_t static VFXMemorySerialization.readString(_:)()
{
  uint64_t result = sub_1B6E31758();
  if (!v1) {
    return 0;
  }
  return result;
}

id static VFXMemorySerialization.readKeyframeAnimation(_:)(uint64_t a1)
{
  id v2 = objc_allocWithZone(MEMORY[0x1E4F39BD8]);

  return objc_msgSend(v2, sel_initWithSerializedVFXBindingDataPointer_, a1);
}

id VFXMemorySerialization.__allocating_init()()
{
  id v1 = objc_allocWithZone(v0);

  return objc_msgSend(v1, sel_init);
}

id VFXMemorySerialization.init()()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXMemorySerialization();
  return objc_msgSendSuper2(&v2, sel_init);
}

id VFXMemorySerialization.__deallocating_deinit()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for VFXMemorySerialization();
  return objc_msgSendSuper2(&v2, sel_dealloc);
}

unint64_t VFXBindingSemantic.init(rawValue:)(unint64_t a1)
{
  return sub_1B665D478(a1);
}

unint64_t sub_1B665AD78@<X0>(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1B665D478(*a1);
  *(void *)a2 = result;
  *(unsigned char *)(a2 + 8) = v4 & 1;
  return result;
}

uint64_t static VFXMemorySerialization.readBool(_:)(unsigned char *a1)
{
  return *a1 & 1;
}

uint64_t static VFXMemorySerialization.writeBool(_:to:)(uint64_t result, unsigned char *a2)
{
  *a2 = result;
  return result;
}

uint64_t static VFXMemorySerialization.writeUInt8(_:to:)(uint64_t result, unsigned char *a2)
{
  *a2 = result;
  return result;
}

uint64_t static VFXMemorySerialization.readUInt16(_:)(unsigned __int16 *a1)
{
  return *a1;
}

uint64_t static VFXMemorySerialization.readUInt32(_:)(unsigned int *a1)
{
  return *a1;
}

uint64_t static VFXMemorySerialization.readUInt64(_:)(uint64_t a1)
{
  return *(void *)a1;
}

uint64_t static VFXMemorySerialization.readInt8(_:)(unsigned __int8 *a1)
{
  return *a1;
}

uint64_t static VFXMemorySerialization.writeInt16(_:to:)(uint64_t result, _WORD *a2)
{
  *a2 = result;
  return result;
}

uint64_t static VFXMemorySerialization.writeInt32(_:to:)(uint64_t result, _DWORD *a2)
{
  *a2 = result;
  return result;
}

uint64_t static VFXMemorySerialization.writeInt64(_:to:)(uint64_t result, void *a2)
{
  *a2 = result;
  return result;
}

double static VFXMemorySerialization.readDouble(_:)(uint64_t a1)
{
  return *(double *)a1;
}

double *static VFXMemorySerialization.writeDouble(_:to:)(double *result, double a2)
{
  *unint64_t result = a2;
  return result;
}

float static VFXMemorySerialization.readFloat(_:)(uint64_t a1)
{
  return *(float *)a1;
}

float *static VFXMemorySerialization.writeFloat(_:to:)(float *result, float a2)
{
  *unint64_t result = a2;
  return result;
}

double static VFXMemorySerialization.readSIMD2F(_:)(uint64_t a1)
{
  return *(double *)a1;
}

double *static VFXMemorySerialization.writeSIMD2F(_:to:)(double *result, double a2)
{
  *unint64_t result = a2;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD3F(_:)(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 *static VFXMemorySerialization.writeSIMD3F(_:to:)(__n128 *result, __n128 a2)
{
  *unint64_t result = a2;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD4F(_:)(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 static VFXMemorySerialization.readSIMD3x3F(_:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  return result;
}

__n128 static VFXMemorySerialization.writeSIMD3x3F(_:to:)(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v2;
  __n128 result = *(__n128 *)(a1 + 32);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD4x4F(_:)(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 *static VFXMemorySerialization.writeSIMD4x4F(_:to:)(__n128 *result, __n128 a2, __n128 a3, __n128 a4, __n128 a5)
{
  *__n128 result = a2;
  result[1] = a3;
  result[2] = a4;
  result[3] = a5;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD2D(_:)(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 *static VFXMemorySerialization.writeSIMD2D(_:to:)(__n128 *result, __n128 a2)
{
  *__n128 result = a2;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD3D(_:)(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 *static VFXMemorySerialization.writeSIMD3D(_:to:)(__n128 *result, __n128 a2, __n128 a3)
{
  return sub_1B665C008(result, a2, a3);
}

__n128 static VFXMemorySerialization.readSIMD4D(_:)(uint64_t a1)
{
  return *(__n128 *)a1;
}

__n128 *static VFXMemorySerialization.writeSIMD4D(_:to:)(__n128 *result, __n128 a2, __n128 a3)
{
  return sub_1B665C008(result, a2, a3);
}

__n128 *sub_1B665C008(__n128 *result, __n128 a2, __n128 a3)
{
  *__n128 result = a2;
  result[1] = a3;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD3x3D(_:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v6 = *(_OWORD *)(a1 + 64);
  long long v7 = *(_OWORD *)(a1 + 80);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  return result;
}

__n128 static VFXMemorySerialization.writeSIMD3x3D(_:to:)(uint64_t a1, _OWORD *a2)
{
  long long v2 = *(_OWORD *)(a1 + 48);
  a2[2] = *(_OWORD *)(a1 + 32);
  a2[3] = v2;
  long long v3 = *(_OWORD *)(a1 + 80);
  a2[4] = *(_OWORD *)(a1 + 64);
  a2[5] = v3;
  __n128 result = *(__n128 *)a1;
  long long v5 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v5;
  return result;
}

__n128 static VFXMemorySerialization.readSIMD4x4D(_:)@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  long long v4 = *(_OWORD *)(a1 + 32);
  long long v5 = *(_OWORD *)(a1 + 48);
  long long v6 = *(_OWORD *)(a1 + 64);
  long long v7 = *(_OWORD *)(a1 + 80);
  long long v8 = *(_OWORD *)(a1 + 96);
  long long v9 = *(_OWORD *)(a1 + 112);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  a2[2] = v4;
  a2[3] = v5;
  a2[4] = v6;
  a2[5] = v7;
  a2[6] = v8;
  a2[7] = v9;
  return result;
}

__n128 static VFXMemorySerialization.writeSIMD4x4D(_:to:)(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v2;
  long long v3 = *(_OWORD *)(a1 + 112);
  *(_OWORD *)(a2 + 96) = *(_OWORD *)(a1 + 96);
  *(_OWORD *)(a2 + 112) = v3;
  long long v4 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v4;
  __n128 result = *(__n128 *)(a1 + 32);
  long long v6 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v6;
  return result;
}

uint64_t static VFXMemorySerialization.VFXSerializedBufferSize(_:type:)(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_1B6E31808();
  uint64_t v5 = *(void *)(v4 - 8);
  double v7 = MEMORY[0x1F4188790](v4, v6);
  long long v9 = (char *)v17 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t result = 1;
  switch(a2)
  {
    case 0:
      swift_bridgeObjectRetain();
      sub_1B6E317E8();
      uint64_t v11 = sub_1B6E317A8();
      unint64_t v13 = v12;
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v5 + 8))(v9, v4);
      if (v13 >> 60 == 15)
      {
LABEL_21:
        LODWORD(v14) = 0;
      }
      else
      {
        switch(v13 >> 62)
        {
          case 1uLL:
            sub_1B665D488(v11, v13);
            uint64_t v14 = (uint64_t)(0xFFFFFFFF00000001 * v11) >> 32;
            break;
          case 2uLL:
            uint64_t v16 = *(void *)(v11 + 16);
            uint64_t v15 = *(void *)(v11 + 24);
            sub_1B665D488(v11, v13);
            LODWORD(v14) = v15 - v16;
            break;
          case 3uLL:
            sub_1B665D488(v11, v13);
            goto LABEL_21;
          default:
            sub_1B665D488(v11, v13);
            LODWORD(v14) = BYTE6(v13);
            break;
        }
      }
      uint64_t result = (v14 + 1);
      break;
    case 1:
    case 2:
    case 7:
      return result;
    case 3:
    case 8:
      uint64_t result = 2;
      break;
    case 4:
    case 9:
    case 12:
      uint64_t result = 4;
      break;
    case 5:
    case 6:
    case 10:
    case 11:
    case 13:
      uint64_t result = 8;
      break;
    case 14:
    case 15:
    case 18:
      uint64_t result = 16;
      break;
    case 16:
      uint64_t result = 48;
      break;
    case 17:
      uint64_t result = 64;
      break;
    case 19:
    case 20:
      uint64_t result = 32;
      break;
    case 21:
      uint64_t result = 96;
      break;
    case 22:
      uint64_t result = 128;
      break;
    case 23:
      uint64_t result = 0;
      break;
    case 24:
    case 25:
      uint64_t result = (uint64_t)objc_msgSend(a1, sel_serializedVFXBindingSize, v7);
      break;
    default:
      strcpy((char *)v17, "Unknown type ");
      v17[7] = -4864;
      sub_1B6E33B48();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E32BE8();
      __break(1u);
      JUMPOUT(0x1B665C614);
  }
  return result;
}

uint64_t sub_1B665C6C8(uint64_t (*a1)(uint64_t, uint64_t))
{
  uint64_t v23 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *v1;
  unint64_t v2 = v1[1];
  switch(v2 >> 62)
  {
    case 1uLL:
      uint64_t v14 = v2 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)id v1 = xmmword_1B6E77700;
      if (swift_isUniquelyReferenced_nonNull_native())
      {
        uint64_t v15 = (v3 >> 32) - (int)v3;
        uint64_t v16 = v14;
      }
      else
      {
        if (sub_1B6E30B98()) {
          sub_1B6E30BC8();
        }
        uint64_t v15 = (v3 >> 32) - (int)v3;
        sub_1B6E30BD8();
        swift_allocObject();
        uint64_t v16 = sub_1B6E30B78();
        swift_release();
      }
      uint64_t v17 = sub_1B6E30B98();
      uint64_t v18 = sub_1B6E30BC8();
      uint64_t v19 = sub_1B6E30BB8();
      if (v19 >= v15) {
        uint64_t v20 = v15;
      }
      else {
        uint64_t v20 = v19;
      }
      uint64_t result = a1(v17 + (int)v3 - v18, v17 + (int)v3 - v18 + v20);
      *id v1 = v3;
      v1[1] = v16 | 0x4000000000000000;
      break;
    case 2uLL:
      *(void *)&long long v22 = *v1;
      *((void *)&v22 + 1) = v2 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1B6E30F58();
      uint64_t v6 = *((void *)&v22 + 1);
      uint64_t v8 = *(void *)(v22 + 16);
      uint64_t v7 = *(void *)(v22 + 24);
      uint64_t v9 = sub_1B6E30B98();
      uint64_t v10 = sub_1B6E30BC8();
      uint64_t v11 = v7 - v8;
      uint64_t v12 = sub_1B6E30BB8();
      if (v12 >= v11) {
        uint64_t v13 = v11;
      }
      else {
        uint64_t v13 = v12;
      }
      uint64_t result = a1(v9 + v8 - v10, v9 + v8 - v10 + v13);
      *id v1 = v22;
      v1[1] = v6 | 0x8000000000000000;
      break;
    case 3uLL:
      *(void *)((char *)&v22 + 7) = 0;
      *(void *)&long long v22 = 0;
      uint64_t result = a1((uint64_t)&v22, (uint64_t)&v22);
      break;
    default:
      *(void *)&long long v22 = *v1;
      WORD4(v22) = v2;
      BYTE10(v22) = BYTE2(v2);
      BYTE11(v22) = BYTE3(v2);
      BYTE12(v22) = BYTE4(v2);
      BYTE13(v22) = BYTE5(v2);
      BYTE14(v22) = BYTE6(v2);
      uint64_t result = a1((uint64_t)&v22, (uint64_t)&v22 + BYTE6(v2));
      unint64_t v5 = DWORD2(v22) | ((unint64_t)BYTE12(v22) << 32) | ((unint64_t)BYTE13(v22) << 40) | ((unint64_t)BYTE14(v22) << 48);
      *id v1 = v22;
      v1[1] = v5;
      break;
  }
  return result;
}

uint64_t sub_1B665C9BC@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v19 = *MEMORY[0x1E4F143B8];
  uint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  switch(v4 >> 62)
  {
    case 1uLL:
      uint64_t v14 = v4 & 0x3FFFFFFFFFFFFFFFLL;
      *(_OWORD *)a1 = xmmword_1B6E77700;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        if (sub_1B6E30B98()) {
          sub_1B6E30BC8();
        }
        sub_1B6E30BD8();
        swift_allocObject();
        uint64_t v15 = sub_1B6E30B78();
        swift_release();
        uint64_t v14 = v15;
      }
      uint64_t v16 = sub_1B6E30B98();
      uint64_t v17 = (char *)(v16 + (int)v5 - sub_1B6E30BC8());
      sub_1B6E30BB8();
      sub_1B6659F44(v17, *(void *)(a2 + 96), a3);
      uint64_t result = swift_release();
      *a1 = v5;
      a1[1] = v14 | 0x4000000000000000;
      break;
    case 2uLL:
      *(void *)&long long v18 = *a1;
      *((void *)&v18 + 1) = v4 & 0x3FFFFFFFFFFFFFFFLL;
      sub_1B6E30F58();
      uint64_t v10 = *((void *)&v18 + 1);
      uint64_t v11 = *(void *)(v18 + 16);
      uint64_t v12 = sub_1B6E30B98();
      uint64_t v13 = (char *)(v12 + v11 - sub_1B6E30BC8());
      sub_1B6E30BB8();
      sub_1B6659F44(v13, *(void *)(a2 + 96), a3);
      uint64_t result = swift_release();
      *a1 = v18;
      a1[1] = v10 | 0x8000000000000000;
      break;
    case 3uLL:
      *(void *)((char *)&v18 + 7) = 0;
      *(void *)&long long v18 = 0;
      sub_1B6659F44((char *)&v18, *(void *)(a2 + 96), a3);
      uint64_t result = swift_release();
      break;
    default:
      *(void *)&long long v18 = *a1;
      WORD4(v18) = v4;
      BYTE10(v18) = BYTE2(v4);
      BYTE11(v18) = BYTE3(v4);
      BYTE12(v18) = BYTE4(v4);
      BYTE13(v18) = BYTE5(v4);
      BYTE14(v18) = BYTE6(v4);
      sub_1B6659F44((char *)&v18, *(void *)(a2 + 96), a3);
      uint64_t result = swift_release();
      unint64_t v9 = DWORD2(v18) | ((unint64_t)BYTE12(v18) << 32) | ((unint64_t)BYTE13(v18) << 40) | ((unint64_t)BYTE14(v18) << 48);
      *a1 = v18;
      a1[1] = v9;
      break;
  }
  return result;
}

uint64_t sub_1B665CC74()
{
  if (swift_dynamicCastMetatype()) {
    return 0;
  }
  if (swift_dynamicCastMetatype()) {
    return 1;
  }
  if (swift_dynamicCastMetatype()) {
    return 2;
  }
  if (swift_dynamicCastMetatype()) {
    return 3;
  }
  if (swift_dynamicCastMetatype()) {
    return 4;
  }
  if (swift_dynamicCastMetatype()) {
    return 5;
  }
  if (swift_dynamicCastMetatype()) {
    return 6;
  }
  if (swift_dynamicCastMetatype()) {
    return 7;
  }
  if (swift_dynamicCastMetatype()) {
    return 8;
  }
  if (swift_dynamicCastMetatype()) {
    return 9;
  }
  if (swift_dynamicCastMetatype()) {
    return 10;
  }
  if (swift_dynamicCastMetatype()) {
    return 11;
  }
  if (swift_dynamicCastMetatype()) {
    return 12;
  }
  sub_1B665D644(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
  if (swift_dynamicCastMetatype()) {
    return 13;
  }
  sub_1B665D644(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  if (swift_dynamicCastMetatype()) {
    return 14;
  }
  sub_1B665D644(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
  if (swift_dynamicCastMetatype()) {
    return 15;
  }
  type metadata accessor for simd_float3x3(0);
  if (swift_dynamicCastMetatype()) {
    return 16;
  }
  type metadata accessor for simd_float4x4(0);
  if (swift_dynamicCastMetatype()) {
    return 17;
  }
  sub_1B665D644(0, &qword_1E9DCDCA0, (uint64_t (*)(void))sub_1B665D5F0, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBC280]);
  if (swift_dynamicCastMetatype()) {
    return 18;
  }
  sub_1B665D644(0, &qword_1E9DCDC98, (uint64_t (*)(void))sub_1B665D5F0, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBC2A8]);
  if (swift_dynamicCastMetatype()) {
    return 19;
  }
  sub_1B665D644(0, &qword_1E9DCDC88, (uint64_t (*)(void))sub_1B665D5F0, MEMORY[0x1E4FBB3D0], MEMORY[0x1E4FBC2F8]);
  if (swift_dynamicCastMetatype()) {
    return 20;
  }
  type metadata accessor for simd_double3x3(0);
  if (swift_dynamicCastMetatype()) {
    return 21;
  }
  type metadata accessor for simd_double4x4(0);
  if (swift_dynamicCastMetatype()) {
    return 22;
  }
  if (swift_dynamicCastMetatype()) {
    return 24;
  }
  sub_1B665D590();
  if (swift_dynamicCastMetatype()) {
    return 25;
  }
  else {
    return 23;
  }
}

uint64_t sub_1B665D0A0(uint64_t a1)
{
  if ((unint64_t)(a1 - 2) > 0x13) {
    return 0;
  }
  else {
    return qword_1B6E77988[a1 - 2];
  }
}

uint64_t sub_1B665D0C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, double a9, double a10, long long a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  swift_weakInit();
  *(void *)(v17 + 144) = a15;
  *(void *)(v17 + 152) = 0;
  *(void *)(v17 + 24) = a1;
  *(void *)(v17 + 32) = a2;
  *(void *)(v17 + 40) = a3;
  *(void *)(v17 + 48) = a4;
  *(void *)(v17 + 56) = a5;
  *(void *)(v17 + 64) = a6;
  *(void *)(v17 + 72) = a7;
  *(void *)(v17 + 80) = a8;
  *(_OWORD *)(v17 + 88) = a11;
  *(void *)(v17 + 104) = a12;
  *(double *)(v17 + 112) = a9;
  *(double *)(v17 + 120) = a10;
  *(unsigned char *)(v17 + 128) = a13;
  *(void *)(v17 + 136) = a14;
  swift_bridgeObjectRelease();
  *(void *)(v17 + 152) = a16;
  swift_bridgeObjectRelease();
  *(void *)(v17 + 160) = a17;
  swift_weakAssign();
  return v17;
}

uint64_t _s3VFX22VFXMemorySerializationC11writeString_2toySS_SvtFZ_0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_1B6E31808();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v14 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B6E317E8();
  uint64_t v9 = sub_1B6E317A8();
  unint64_t v11 = v10;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  if (v11 >> 60 != 15)
  {
    switch(v11 >> 62)
    {
      case 1uLL:
        uint64_t v13 = (uint64_t)(0xFFFFFFFF00000001 * v9) >> 32;
        goto LABEL_7;
      case 2uLL:
        sub_1B6E31048();
        uint64_t v13 = *(void *)(v9 + 24) - *(void *)(v9 + 16);
        break;
      case 3uLL:
        sub_1B6E31048();
        uint64_t v13 = 0;
        break;
      default:
        uint64_t v13 = BYTE6(v11);
LABEL_7:
        sub_1B6E31048();
        break;
    }
    *(unsigned char *)(a3 + v13) = 0;
    return sub_1B665D488(v9, v11);
  }
  return result;
}

unint64_t sub_1B665D378(unint64_t result)
{
  if (result > 0x19) {
    return 0;
  }
  return result;
}

uint64_t _s3VFX22VFXMemorySerializationC22writeKeyframeAnimation_2toySo010CAKeyframeF0C_SvtFZ_0(void *a1)
{
  id v1 = objc_msgSend(a1, sel_serializedVFXBindingData);
  uint64_t v2 = sub_1B6E30FD8();
  unint64_t v4 = v3;

  sub_1B6E31048();

  return sub_1B62C2360(v2, v4);
}

uint64_t type metadata accessor for VFXMemorySerialization()
{
  return self;
}

unint64_t sub_1B665D478(unint64_t result)
{
  if (result > 0xB) {
    return 0;
  }
  return result;
}

uint64_t sub_1B665D488(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 != 15) {
    return sub_1B62C2360(a1, a2);
  }
  return a1;
}

unint64_t sub_1B665D4A0()
{
  unint64_t result = qword_1E9DCDC78;
  if (!qword_1E9DCDC78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC78);
  }
  return result;
}

unint64_t sub_1B665D4F8()
{
  unint64_t result = qword_1E9DCDC80;
  if (!qword_1E9DCDC80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC80);
  }
  return result;
}

uint64_t type metadata accessor for BindingImpl()
{
  return self;
}

ValueMetadata *type metadata accessor for VFXBindingType()
{
  return &type metadata for VFXBindingType;
}

ValueMetadata *type metadata accessor for VFXBindingSemantic()
{
  return &type metadata for VFXBindingSemantic;
}

void sub_1B665D590()
{
  if (!qword_1EB97FDA0)
  {
    unint64_t v0 = type metadata accessor for Curve();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB97FDA0);
    }
  }
}

unint64_t sub_1B665D5F0()
{
  unint64_t result = qword_1E9DCDC90;
  if (!qword_1E9DCDC90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDC90);
  }
  return result;
}

void sub_1B665D644(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_1B665D6AC()
{
  return sub_1B665A5D0(v0[2], v0[3], v0[4], v0[5], v0[6]);
}

unint64_t sub_1B665D6D0()
{
  unint64_t result = qword_1EB9805E0;
  if (!qword_1EB9805E0)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB9805E0);
  }
  return result;
}

uint64_t sub_1B665D710()
{
  return MEMORY[0x1F4186498](v0, 144, 15);
}

uint64_t sub_1B665D720()
{
  return MEMORY[0x1F4186498](v0, 112, 15);
}

uint64_t sub_1B665D730()
{
  return MEMORY[0x1F4186498](v0, 48, 15);
}

uint64_t sub_1B665D740()
{
  return MEMORY[0x1F4186498](v0, 32, 15);
}

uint64_t sub_1B665D750()
{
  return MEMORY[0x1F4186498](v0, 80, 15);
}

uint64_t sub_1B665D760()
{
  return MEMORY[0x1F4186498](v0, 64, 15);
}

void sub_1B665D770(uint64_t a1)
{
  sub_1B665977C(*(void *)(v1 + 24), a1, *(void *)(*(void *)(v1 + 16) + 96));
}

unint64_t sub_1B665D7A4()
{
  unint64_t result = qword_1E9DCDCA8;
  if (!qword_1E9DCDCA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDCA8);
  }
  return result;
}

uint64_t static VFXMemorySerialization.readInt(_:)(uint64_t a1)
{
  return static VFXMemorySerialization.readUInt64(_:)(a1);
}

uint64_t static VFXMemorySerialization.readUInt8(_:)(unsigned __int8 *a1)
{
  return static VFXMemorySerialization.readInt8(_:)(a1);
}

uint64_t static VFXMemorySerialization.readInt16(_:)(unsigned __int16 *a1)
{
  return static VFXMemorySerialization.readUInt16(_:)(a1);
}

uint64_t static VFXMemorySerialization.readInt32(_:)(unsigned int *a1)
{
  return static VFXMemorySerialization.readUInt32(_:)(a1);
}

uint64_t static VFXMemorySerialization.readInt64(_:)(uint64_t a1)
{
  return static VFXMemorySerialization.readUInt64(_:)(a1);
}

uint64_t static VFXMemorySerialization.writeInt(_:to:)(uint64_t result, void *a2)
{
  return static VFXMemorySerialization.writeInt64(_:to:)(result, a2);
}

uint64_t static VFXMemorySerialization.writeInt8(_:to:)(uint64_t result, unsigned char *a2)
{
  return static VFXMemorySerialization.writeUInt8(_:to:)(result, a2);
}

uint64_t static VFXMemorySerialization.writeUInt16(_:to:)(uint64_t result, _WORD *a2)
{
  return static VFXMemorySerialization.writeInt16(_:to:)(result, a2);
}

uint64_t static VFXMemorySerialization.writeUInt32(_:to:)(uint64_t result, _DWORD *a2)
{
  return static VFXMemorySerialization.writeInt32(_:to:)(result, a2);
}

uint64_t static VFXMemorySerialization.writeUInt64(_:to:)(uint64_t result, void *a2)
{
  return static VFXMemorySerialization.writeInt64(_:to:)(result, a2);
}

__n128 *static VFXMemorySerialization.writeSIMD4F(_:to:)(__n128 *result, __n128 a2)
{
  return static VFXMemorySerialization.writeSIMD3F(_:to:)(result, a2);
}

void sub_1B665DE84()
{
  uint64_t v0 = (void *)sub_1B6E31768();
  id v1 = objc_msgSend(self, sel_bundleWithIdentifier_, v0);

  qword_1E9DCDCB0 = (uint64_t)v1;
}

uint64_t static VFXScene.vfxAssetsFrameworkBundle.getter()
{
  if (qword_1E9DCBF90 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E9DCDCB0;
  id v1 = (id)qword_1E9DCDCB0;
  return v0;
}

void *sub_1B665DFAC()
{
  unint64_t result = sub_1B665DFCC();
  qword_1E9DCDCB8 = (uint64_t)result;
  return result;
}

void *sub_1B665DFCC()
{
  uint64_t v0 = sub_1B6E30F48();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  long long v44 = (char *)v34 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v7 = (char *)v34 - v6;
  sub_1B63BE100();
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v11 = (char *)v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1E9DCBF90 != -1) {
    swift_once();
  }
  uint64_t v12 = (void *)qword_1E9DCDCB0;
  if (!qword_1E9DCDCB0) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = (void *)sub_1B6E31768();
  id v14 = objc_msgSend(v12, sel_URLsForResourcesWithExtension_subdirectory_, v13, 0);

  if (!v14) {
    return (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v15 = sub_1B6E31C28();

  uint64_t v16 = *(void *)(v15 + 16);
  if (v16)
  {
    long long v18 = *(void (**)(char *, unint64_t, uint64_t))(v1 + 16);
    uint64_t v17 = v1 + 16;
    long long v43 = v18;
    unint64_t v19 = (*(unsigned __int8 *)(v17 + 64) + 32) & ~(unint64_t)*(unsigned __int8 *)(v17 + 64);
    v34[1] = v15;
    unint64_t v20 = v15 + v19;
    uint64_t v21 = *(void *)(v17 + 56);
    long long v41 = (unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 32);
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v17 + 16);
    uint64_t v37 = v21;
    long long v22 = (void (**)(char *, uint64_t))(v17 - 8);
    uint64_t v23 = (void *)MEMORY[0x1E4FBC860];
    long long v42 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 40);
    v34[0] = (v17 + 40) & 0xFFFFFFFFFFFFLL | 0xA0D1000000000000;
    long long v39 = v11;
    uint64_t v40 = v17;
    uint64_t v38 = v7;
    long long v35 = (void (**)(char *, uint64_t))(v17 - 8);
    while (1)
    {
      v43(v11, v20, v0);
      uint64_t v24 = *v42;
      (*v42)(v11, 0, 1, v0);
      if ((*v41)(v11, 1, v0) == 1) {
        break;
      }
      (*v36)(v7, v11, v0);
      uint64_t v25 = v44;
      sub_1B6E30E98();
      uint64_t v26 = sub_1B6E30E58();
      uint64_t v28 = v27;
      uint64_t v29 = *v22;
      (*v22)(v25, v0);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v23 = sub_1B6335858(0, v23[2] + 1, 1, v23);
      }
      unint64_t v31 = v23[2];
      unint64_t v30 = v23[3];
      if (v31 >= v30 >> 1) {
        uint64_t v23 = sub_1B6335858(v30 > 1, v31 + 1, 1, v23);
      }
      _WORD v23[2] = v31 + 1;
      uint64_t v32 = &v23[2 * v31];
      v32[4] = v26;
      v32[5] = v28;
      uint64_t v7 = v38;
      long long v22 = v35;
      v29(v38, v0);
      v20 += v37;
      --v16;
      uint64_t v11 = v39;
      if (!v16)
      {
        v24(v39, 1, 1, v0);
        break;
      }
    }
  }
  else
  {
    uint64_t v23 = (void *)MEMORY[0x1E4FBC860];
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56))(v11, 1, 1, v0);
  }
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t static VFXScene.builtinEffectIdentifiers.getter()
{
  if (qword_1E9DCBF98 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t static VFXScene.builtinEffectIdentifiers.setter(uint64_t a1)
{
  if (qword_1E9DCBF98 != -1) {
    swift_once();
  }
  qword_1E9DCDCB8 = a1;

  return swift_bridgeObjectRelease();
}

double (*static VFXScene.builtinEffectIdentifiers.modify())(void)
{
  if (qword_1E9DCBF98 != -1) {
    swift_once();
  }
  return nullsub_1;
}

id VFXScene.__allocating_init(identifier:)()
{
  v7[1] = *(id *)MEMORY[0x1E4F143B8];
  id v1 = objc_allocWithZone(v0);
  uint64_t v2 = (void *)sub_1B6E31768();
  swift_bridgeObjectRelease();
  v7[0] = 0;
  id v3 = objc_msgSend(v1, sel_initWithIdentifier_error_, v2, v7);

  if (v3)
  {
    id v4 = v7[0];
  }
  else
  {
    id v5 = v7[0];
    sub_1B6E30D78();

    swift_willThrow();
  }
  return v3;
}

id VFXScene.init(identifier:)(uint64_t a1, unint64_t a2)
{
  id v3 = v2;
  uint64_t v25 = *MEMORY[0x1E4F143B8];
  sub_1B63BE100();
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = sub_1B6E30F48();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  id v14 = (char *)&v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VFXScene(0);
  sub_1B665E9C0(a1, a2, (uint64_t)v9);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v9, 1, v10) == 1)
  {
    sub_1B663ABE8((uint64_t)v9);
    id v23 = 0;
    unint64_t v24 = 0xE000000000000000;
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    id v23 = (id)0xD00000000000001FLL;
    unint64_t v24 = 0x80000001B6F31CD0;
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    id v15 = v23;
    unint64_t v16 = v24;
    sub_1B665ECF8();
    swift_allocError();
    *(void *)uint64_t v17 = v15;
    *(void *)(v17 + 8) = v16;
    *(unsigned char *)(v17 + 16) = 0;
    swift_willThrow();
    swift_getObjectType();
    swift_deallocPartialClassInstance();
  }
  else
  {
    swift_bridgeObjectRelease();
    (*(void (**)(char *, char *, uint64_t))(v11 + 32))(v14, v9, v10);
    long long v18 = (void *)sub_1B6E30E78();
    id v23 = 0;
    id v3 = objc_msgSend(v3, sel_initWithContentsOf_error_, v18, &v23);

    if (v3)
    {
      unint64_t v19 = *(void (**)(char *, uint64_t))(v11 + 8);
      id v20 = v23;
      v19(v14, v10);
    }
    else
    {
      id v3 = v23;
      sub_1B6E30D78();

      swift_willThrow();
      (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
    }
  }
  return v3;
}

uint64_t sub_1B665E9C0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1B63BE100();
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (char *)&v32 - v12;
  id v14 = sub_1B665F0D0(a1, a2);
  if (v14)
  {
    id v15 = v14;
    unint64_t v16 = (void *)sub_1B6E31768();
    uint64_t v17 = (void *)sub_1B6E31768();
    id v18 = objc_msgSend(v15, sel_URLForResource_withExtension_, v16, v17);

    if (v18)
    {
      sub_1B6E30EE8();

      uint64_t v19 = sub_1B6E30F48();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v13, 0, 1, v19);
    }
    else
    {

      uint64_t v26 = sub_1B6E30F48();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56))(v13, 1, 1, v26);
    }
    uint64_t v27 = (uint64_t)v13;
    return sub_1B665F41C(v27, a3);
  }
  id v20 = (void *)sub_1B6E31768();
  id v21 = objc_msgSend(self, sel_bundleWithIdentifier_, v20);

  if (v21)
  {
    uint64_t v22 = (void *)sub_1B6E31768();
    id v23 = (void *)sub_1B6E31768();
    id v24 = objc_msgSend(v21, sel_URLForResource_withExtension_, v22, v23);

    if (v24)
    {
      sub_1B6E30EE8();

      uint64_t v25 = sub_1B6E30F48();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56))(v9, 0, 1, v25);
    }
    else
    {
      uint64_t v31 = sub_1B6E30F48();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v9, 1, 1, v31);
    }
    uint64_t v27 = (uint64_t)v9;
    return sub_1B665F41C(v27, a3);
  }
  uint64_t v28 = sub_1B6E30F48();
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56);

  return v29(a3, 1, 1, v28);
}

unint64_t sub_1B665ECF8()
{
  unint64_t result = qword_1E9DCDCC0;
  if (!qword_1E9DCDCC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDCC0);
  }
  return result;
}

uint64_t static VFXScene.vfxLibraryURL(for:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1B63BE100();
  MEMORY[0x1F4188790](v6 - 8, v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v10 = sub_1B665F0D0(a1, a2);
  if (v10)
  {
    uint64_t v11 = v10;
    uint64_t v12 = (void *)sub_1B6E31768();
    uint64_t v13 = (void *)sub_1B6E31768();
    id v14 = objc_msgSend(v11, sel_URLForResource_withExtension_, v12, v13);

    if (v14)
    {
      sub_1B6E30EE8();

      uint64_t v15 = sub_1B6E30F48();
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v9, 0, 1, v15);
    }
    else
    {

      uint64_t v19 = sub_1B6E30F48();
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 56))(v9, 1, 1, v19);
    }
    return sub_1B665F41C((uint64_t)v9, a3);
  }
  else
  {
    uint64_t v16 = sub_1B6E30F48();
    uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56);
    return v17(a3, 1, 1, v16);
  }
}

id sub_1B665F0D0(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = sub_1B6E30F48();
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  uint64_t v8 = (char *)&v30 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v12 = (char *)&v30 - v11;
  uint64_t v30 = a1;
  unint64_t v31 = a2;
  sub_1B633AF88();
  uint64_t v13 = sub_1B6E32688();
  if (*(void *)(v13 + 16) >= 4uLL)
  {
    uint64_t v30 = v13;
    unint64_t v31 = v13 + 32;
    long long v32 = xmmword_1B6E77A30;
    sub_1B665F480();
    sub_1B665538C();
    sub_1B6655408();
    uint64_t v15 = sub_1B6E31AD8();
    unint64_t v17 = v16;
    swift_bridgeObjectRelease();
    uint64_t v30 = v15;
    unint64_t v31 = v17;
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    id v18 = objc_msgSend(self, sel_processInfo);
    id v19 = objc_msgSend(v18, sel_environment);

    uint64_t v20 = sub_1B6E314C8();
    if (*(void *)(v20 + 16) && (uint64_t v21 = sub_1B62B2CE0(0x4F54414C554D4953, 0xEE00544F4F525F52), (v22 & 1) != 0))
    {
      id v23 = (uint64_t *)(*(void *)(v20 + 56) + 16 * v21);
      uint64_t v25 = *v23;
      unint64_t v24 = v23[1];
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v25 = 0;
      unint64_t v24 = 0xE000000000000000;
    }
    swift_bridgeObjectRelease();
    uint64_t v30 = v25;
    unint64_t v31 = v24;
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E30E48();
    swift_bridgeObjectRelease();
    sub_1B6E30EB8();
    swift_bridgeObjectRelease();
    id v26 = objc_allocWithZone(MEMORY[0x1E4F28B50]);
    uint64_t v27 = (void *)sub_1B6E30E78();
    id v14 = objc_msgSend(v26, sel_initWithURL_, v27);

    uint64_t v28 = *(void (**)(char *, uint64_t))(v5 + 8);
    v28(v8, v4);
    v28(v12, v4);
  }
  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  return v14;
}

uint64_t sub_1B665F41C(uint64_t a1, uint64_t a2)
{
  sub_1B63BE100();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B665F480()
{
  if (!qword_1E9DCDBF0)
  {
    unint64_t v0 = sub_1B6E32778();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DCDBF0);
    }
  }
}

uint64_t sub_1B665F4D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = v2[2];
  if (v3)
  {
    uint64_t v4 = 0;
    do
    {
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v1 + 16) = v2;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v2 = sub_1B6C1675C(v2);
        *(void *)(v1 + 16) = v2;
      }
      uint64_t v6 = v2[v4 + 7];
      uint64_t v7 = v2[v4 + 8];
      sub_1B62C550C((uint64_t)&v2[v4 + 4], v6);
      (*(void (**)(uint64_t, uint64_t))(v7 + 16))(v6, v7);
      uint64_t v2 = *(void **)(v1 + 16);
      v4 += 5;
      --v3;
    }
    while (v3);
  }
  *(void *)(v1 + 16) = MEMORY[0x1E4FBC860];

  return swift_bridgeObjectRelease();
}

void sub_1B665F5A4()
{
  sub_1B665FC58();
  uint64_t v2 = v1;
  uint64_t v3 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v4);
  long long v58 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v70 = sub_1B6E31118();
  uint64_t v62 = *(void *)(v70 - 8);
  MEMORY[0x1F4188790](v70, v6);
  long long v61 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B665FCCC();
  MEMORY[0x1F4188790](v8 - 8, v9);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v13);
  char v65 = (char *)&v51 - v14;
  MEMORY[0x1F4188790](v15, v16);
  id v18 = (char *)&v51 - v17;
  if ((*(unsigned char *)(v0 + 33) & 1) == 0)
  {
    if (*(unsigned char *)(v0 + 32))
    {
      id v19 = *(char **)(v0 + 24);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      *(void *)(v0 + 24) = v19;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        id v19 = sub_1B68C1C38(0, *((void *)v19 + 2) + 1, 1, v19);
        *(void *)(v0 + 24) = v19;
      }
      unint64_t v22 = *((void *)v19 + 2);
      unint64_t v21 = *((void *)v19 + 3);
      unint64_t v23 = v22 + 1;
      if (v22 >= v21 >> 1) {
        id v19 = sub_1B68C1C38(v21 > 1, v22 + 1, 1, v19);
      }
      *((void *)v19 + 2) = v23;
      *(void *)(v0 + 24) = v19;
    }
    else
    {
      uint64_t v24 = *(void *)(v0 + 16);
      uint64_t v25 = *(void *)(v24 + 64);
      uint64_t v54 = v24 + 64;
      uint64_t v26 = 1 << *(unsigned char *)(v24 + 32);
      uint64_t v27 = -1;
      if (v26 < 64) {
        uint64_t v27 = ~(-1 << v26);
      }
      unint64_t v28 = v27 & v25;
      unint64_t v29 = (unint64_t)(v26 + 63) >> 6;
      uint64_t v68 = (void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56);
      uint64_t v59 = v62 + 16;
      uint64_t v30 = (unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48);
      uint64_t v63 = (void (**)(char *, uint64_t))(v62 + 8);
      uint64_t v64 = (void (**)(void))(v62 + 32);
      unint64_t v51 = v29 - 1;
      uint64_t v31 = swift_bridgeObjectRetain();
      unint64_t v32 = 0;
      int64_t v55 = v29;
      long long v56 = v30;
      uint64_t v60 = v31;
      uint64_t v52 = v31 + 104;
      unint64_t v53 = v29 - 5;
      long long v57 = v18;
      if (!v28) {
        goto LABEL_13;
      }
LABEL_11:
      uint64_t v66 = (v28 - 1) & v28;
      unint64_t v67 = v32;
      unint64_t v33 = __clz(__rbit64(v28)) | (v32 << 6);
LABEL_12:
      uint64_t v34 = v60;
      long long v35 = v61;
      uint64_t v36 = v62;
      uint64_t v37 = v70;
      (*(void (**)(char *, unint64_t, uint64_t))(v62 + 16))(v61, *(void *)(v60 + 48) + *(void *)(v62 + 72) * v33, v70);
      uint64_t v38 = *(void *)(v34 + 56);
      uint64_t v39 = *(int *)(v2 + 48);
      uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
      long long v69 = *(_OWORD *)(v38 + 16 * v33);
      v40(v11, v35, v37);
      *(_OWORD *)&v11[v39] = v69;
      long long v41 = *v68;
      (*v68)(v11, 0, 1, v2);
      swift_retain();
      while (1)
      {
        long long v44 = *v30;
        uint64_t v45 = 1;
        if ((*v30)(v11, 1, v2) != 1)
        {
          uint64_t v46 = *(int *)(v2 + 48);
          long long v47 = *v64;
          ((void (*)(char *, char *, uint64_t))*v64)(v58, v11, v70);
          uint64_t v48 = swift_allocObject();
          *(_OWORD *)(v48 + 16) = *(_OWORD *)&v11[v46];
          long long v49 = (uint64_t (**)())&v65[*(int *)(v2 + 48)];
          id v18 = v57;
          v47();
          uint64_t v45 = 0;
          *long long v49 = sub_1B665FDC0;
          v49[1] = (uint64_t (*)())v48;
          uint64_t v30 = v56;
        }
        uint64_t v50 = (uint64_t)v65;
        v41(v65, v45, 1, v2);
        sub_1B665FD24(v50, (uint64_t)v18);
        if (v44(v18, 1, v2) == 1) {
          break;
        }
        (*(void (**)(void))&v18[*(int *)(v2 + 48)])();
        swift_release();
        (*v63)(v18, v70);
        unint64_t v28 = v66;
        unint64_t v32 = v67;
        if (v66) {
          goto LABEL_11;
        }
LABEL_13:
        unint64_t v42 = v32 + 1;
        if ((uint64_t)(v32 + 1) >= v55)
        {
          unint64_t v42 = v32;
        }
        else
        {
          unint64_t v43 = *(void *)(v54 + 8 * v42);
          if (v43) {
            goto LABEL_15;
          }
          if ((uint64_t)(v32 + 2) < v55)
          {
            unint64_t v43 = *(void *)(v54 + 8 * (v32 + 2));
            if (v43)
            {
              unint64_t v42 = v32 + 2;
LABEL_15:
              uint64_t v66 = (v43 - 1) & v43;
              unint64_t v67 = v42;
              unint64_t v33 = __clz(__rbit64(v43)) + (v42 << 6);
              goto LABEL_12;
            }
            unint64_t v42 = v32 + 2;
            if ((uint64_t)(v32 + 3) < v55)
            {
              unint64_t v43 = *(void *)(v54 + 8 * (v32 + 3));
              if (v43)
              {
                unint64_t v42 = v32 + 3;
                goto LABEL_15;
              }
              unint64_t v42 = v32 + 3;
              if ((uint64_t)(v32 + 4) < v55)
              {
                unint64_t v43 = *(void *)(v54 + 8 * (v32 + 4));
                unint64_t v42 = v32 + 4;
                if (v43) {
                  goto LABEL_15;
                }
                while (v53 != v32)
                {
                  unint64_t v43 = *(void *)(v52 + 8 * v32++);
                  if (v43)
                  {
                    unint64_t v42 = v32 + 4;
                    goto LABEL_15;
                  }
                }
                unint64_t v42 = v51;
              }
            }
          }
        }
        long long v41 = *v68;
        (*v68)(v11, 1, 1, v2);
        uint64_t v66 = 0;
        unint64_t v67 = v42;
      }
      swift_release();
    }
  }
}

uint64_t sub_1B665FB88()
{
  sub_1B665F4D8();
  swift_retain();
  sub_1B665F5A4();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ScopeLevel()
{
  return self;
}

BOOL sub_1B665FC1C()
{
  return *(void *)(*(void *)(*(void *)v0 + 16) + 16) == 0;
}

uint64_t sub_1B665FC34()
{
  return sub_1B665F4D8();
}

void sub_1B665FC58()
{
  if (!qword_1E9DCDCC8)
  {
    sub_1B6E31118();
    sub_1B62CB664();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9DCDCC8);
    }
  }
}

void sub_1B665FCCC()
{
  if (!qword_1E9DCDCD0)
  {
    sub_1B665FC58();
    unint64_t v0 = sub_1B6E324B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DCDCD0);
    }
  }
}

uint64_t sub_1B665FD24(uint64_t a1, uint64_t a2)
{
  sub_1B665FCCC();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B665FD88()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B665FDC0()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

uint64_t sub_1B665FDE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t result = sub_1B62CD034(a8);
  if (result >= 1 && a7 != 0)
  {
    uint64_t v15 = 0;
    uint64_t v16 = -1;
    uint64_t v17 = -1;
    do
    {
      uint64_t v19 = *a5++;
      uint64_t v18 = v19;
      if (v19 != v16)
      {
        uint64_t v20 = v16 - v17;
        if (v16 > v17)
        {
          uint64_t result = sub_1B62CEB54(a1, v15, a3, v17, v16 - v17, a8);
          v15 += v20;
        }
        uint64_t v17 = v18;
      }
      uint64_t v16 = v18 + 1;
      --a7;
    }
    while (a7);
    if (v16 > v17)
    {
      return sub_1B62CEB54(a1, v15, a3, v17, v16 - v17, a8);
    }
  }
  return result;
}

uint64_t sub_1B665FEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = sub_1B62CD034(a8);
  if (result >= 1 && a7 != 0)
  {
    uint64_t v15 = 0;
    uint64_t result = a9 + 32;
    uint64_t v16 = -1;
    uint64_t v17 = -1;
    do
    {
      uint64_t v19 = *a5++;
      uint64_t v18 = v19;
      if (v19 != v16)
      {
        uint64_t v20 = v16 - v17;
        if (v16 > v17)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 32))(a1, a2, v15, a3, a4);
          v15 += v20;
        }
        uint64_t v17 = v18;
      }
      uint64_t v16 = v18 + 1;
      --a7;
    }
    while (a7);
    if (v16 > v17)
    {
      unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(a9 + 32);
      return v21(a1, a2, v15, a3, a4);
    }
  }
  return result;
}

uint64_t sub_1B6660040(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result = sub_1B62CD034(a8);
  if (result >= 1 && a5 != 0)
  {
    uint64_t v15 = 0;
    uint64_t result = a9 + 40;
    uint64_t v16 = -1;
    uint64_t v17 = -1;
    do
    {
      uint64_t v19 = *a3++;
      uint64_t v18 = v19;
      if (v19 != v16)
      {
        uint64_t v20 = v16 - v17;
        if (v16 > v17)
        {
          uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(a9 + 40))(a1, a2);
          v15 += v20;
        }
        uint64_t v17 = v18;
      }
      uint64_t v16 = v18 + 1;
      --a5;
    }
    while (a5);
    if (v16 > v17)
    {
      unint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(a9 + 40);
      return v21(a1, a2);
    }
  }
  return result;
}

void sub_1B666018C(char *a1, char *a2)
{
  uint64_t v3 = v2;
  if (a2 != a1)
  {
    uint64_t v6 = *(void *)(v2 + 56);
    uint64_t v7 = *(void *)(v6 + 16);
    if (v7)
    {
      swift_retain();
      swift_retain_n();
      swift_retain();
      uint64_t v8 = v6 + 56;
      do
      {
        sub_1B633B0E8();
        v8 += 40;
        --v7;
      }
      while (v7);
      swift_release();
      swift_release();
      swift_release_n();
    }
  }
  if ((*(unsigned char *)(v2 + 184) & 1) == 0)
  {
    uint64_t v9 = *(void *)(v2 + 168);
    uint64_t v10 = *(void *)(v2 + 16);
    uint64_t v11 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_retain();
    os_unfair_lock_lock(v11);
    swift_release();
    swift_retain();
    sub_1B6660340(a1, a2, v9);
    swift_release();
    uint64_t v12 = *(os_unfair_lock_s **)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
    swift_retain();
    os_unfair_lock_unlock(v12);
    swift_release();
  }
  uint64_t v13 = *(void *)(v3 + 192);
  if (v13)
  {
    uint64_t v14 = *(void *)(v3 + 208);
    sub_1B62C9D00((uint64_t)a1, (uint64_t)a2, v13);
    sub_1B62C9D00((uint64_t)a1, (uint64_t)a2, v14);
  }
}

char *sub_1B6660340(char *result, char *a2, uint64_t a3)
{
  int64_t v4 = a2 - result;
  if (a2 != result)
  {
    uint64_t v5 = OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex;
    uint64_t v6 = OBJC_IVAR____TtC3VFX13EntityManager_entityCount;
    uint64_t v7 = *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    uint64_t v8 = &result[*(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount)];
    int v9 = *(_DWORD *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_firstFreeIndex);
    uint64_t v10 = (int *)(a3 + 4 * (void)result);
    do
    {
      int v11 = *v10++;
      uint64_t result = (char *)(v7 + 12 * v11);
      *(_DWORD *)uint64_t result = v9;
      *((_DWORD *)result + 1) = -1;
      ++*((_DWORD *)result + 2);
      *(_DWORD *)(v3 + v5) = v11;
      int v9 = v11;
      --v4;
    }
    while (v4);
    *(void *)(v3 + v6) = v8 - a2;
  }
  return result;
}

void sub_1B66603B4()
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v0 + 376));
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 344);

  os_unfair_lock_lock(v1);
}

uint64_t sub_1B66603E4(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)(v1 + 40);
  unsigned int v5 = *(_DWORD *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 16);
  uint64_t v7 = 8 * a1;
  uint64_t v8 = *(void *)(*(void *)(v6 + 80) + v7 + 32);
  int v35 = *(unsigned __int8 *)(v4 + 212);
  unsigned int v36 = v5;
  swift_retain();
  swift_retain();
  int v9 = *(unsigned __int8 *)(v8 + 212);
  *(_DWORD *)(v2 + 24) = a1;
  *(void *)(v2 + 40) = *(void *)(*(void *)(v6 + 80) + v7 + 32);
  uint64_t v10 = *(void *)(v8 + 32);
  uint64_t v11 = *(void *)(v8 + 40);
  uint64_t v12 = *(void *)(v8 + 80);
  char v13 = *(unsigned char *)(v8 + 88);
  long long v14 = *(_OWORD *)(v8 + 48);
  long long v15 = *(_OWORD *)(v8 + 64);
  *(void *)(v2 + 48) = *(void *)(v8 + 24);
  *(void *)(v2 + 56) = v10;
  *(void *)(v2 + 64) = v11;
  *(_OWORD *)(v2 + 72) = v14;
  *(_OWORD *)(v2 + 88) = v15;
  *(void *)(v2 + 104) = v12;
  *(unsigned char *)(v2 + 112) = v13;
  swift_retain();
  swift_retain();
  swift_retain();
  swift_release();
  swift_release();
  swift_release();
  if ((v35 & 1) != 0 || !v9)
  {
    if (((v35 ^ 1 | v9) & 1) == 0)
    {
      uint64_t v25 = *(void **)(v2 + 192);
      if (v25)
      {
        uint64_t v26 = *(void **)(v2 + 208);
        free(v25);
        free(v26);
      }
      *(_OWORD *)(v2 + 192) = 0u;
      *(_OWORD *)(v2 + 208) = 0u;
    }
  }
  else
  {
    uint64_t v16 = *(void *)(v2 + 88);
    uint64_t v17 = (v16 + 63) >> 6;
    if (v17 <= 1) {
      uint64_t v17 = 1;
    }
    size_t v18 = 8 * v17;
    uint64_t v19 = aligned_alloc(8uLL, 8 * v17);
    bzero(v19, v18);
    uint64_t v20 = aligned_alloc(8uLL, v18);
    bzero(v20, v18);
    *(void *)(v2 + 192) = v19;
    *(void *)(v2 + 200) = v16;
    *(void *)(v2 + 208) = v20;
    *(void *)(v2 + 216) = v16;
    uint64_t v21 = *(void *)(v2 + 232);
    uint64_t v22 = *(void *)(v2 + 240);
    if (v22 != v21)
    {
      uint64_t v23 = *(void *)(v2 + 192);
      if (v23)
      {
        uint64_t v24 = *(void *)(v2 + 208);
        sub_1B63B52E8(*(void *)(v2 + 232), *(void *)(v2 + 240), v23);
        sub_1B62C9D00(v21, v22, v24);
      }
      sub_1B63658B4(*(void *)(v2 + 40), v2, v21, v22);
    }
  }
  swift_retain();
  BOOL v27 = sub_1B68E62A8(a1);
  swift_release();
  int v28 = *(_DWORD *)(v2 + 188);
  char v29 = *(unsigned char *)(v2 + 120);
  swift_retain();
  sub_1B68E62FC(v28, v36, a1, v29);
  swift_release();
  if (!v27)
  {
    swift_retain();
    sub_1B6358028(a1);
    swift_release();
  }
  if (*(unsigned char *)(v2 + 184) != 1)
  {
    uint64_t v30 = *(void *)(v2 + 232);
    uint64_t v31 = *(void *)(v2 + 240) - v30;
    if (v31)
    {
      unint64_t v32 = (int *)(*(void *)(v2 + 168) + 4 * v30);
      do
      {
        int v33 = *v32++;
        *(_WORD *)(*(void *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v33 + 6) = a1;
        --v31;
      }
      while (v31);
    }
  }
  swift_release();

  return swift_release();
}

uint64_t sub_1B6660684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a3 + 192);
  if (v8)
  {
    uint64_t v9 = *(void *)(a3 + 208);
    sub_1B66470B4(a1, a2, v8);
    sub_1B66470B4(a1, a2, v9);
  }
  if (a1 != a2)
  {
    int v10 = *(_DWORD *)(a4 + 4 * a1);
    *(_DWORD *)(a4 + 4 * a1) = *(_DWORD *)(a4 + 4 * a2);
    *(_DWORD *)(a4 + 4 * a2) = v10;
  }
  uint64_t v11 = *(void *)(a3 + 16);
  int v12 = *(_DWORD *)(a4 + 4 * a2);
  int v13 = *(_DWORD *)(a3 + 188);
  uint64_t v14 = *(void *)(v11 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  int v15 = *(_DWORD *)(v14 + 12 * v12);
  swift_retain();
  if (v15 == v13) {
    *(_WORD *)(v14 + 12 * v12 + 4) = a2;
  }
  swift_release();
  int v16 = *(_DWORD *)(a4 + 4 * a1);
  uint64_t v17 = *(void *)(v11 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  int v18 = *(_DWORD *)(v17 + 12 * v16);
  swift_retain();
  if (v18 == v13) {
    *(_WORD *)(v17 + 12 * v16 + 4) = a1;
  }

  return swift_release();
}

void sub_1B66607B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 < a1 || a3 >= a2)
  {
    sub_1B63B3344(v3[5], a1, a2, 1, (uint64_t)v3);
    return;
  }
  uint64_t v4 = a2 - a1;
  uint64_t v5 = v3[29];
  uint64_t v6 = v5 + a2 - a1;
  uint64_t v7 = v3[30] - v5;
  uint64_t v8 = v6;
  if (a2 - a1 < 1)
  {
    if (v7 <= 0)
    {
      BOOL v9 = v4 < v7;
LABEL_9:
      if (v9) {
        uint64_t v8 = v3[30];
      }
      else {
        uint64_t v8 = v5 + a2 - a1;
      }
    }
  }
  else if ((v7 & 0x8000000000000000) == 0)
  {
    BOOL v9 = v7 < (unint64_t)v4;
    goto LABEL_9;
  }
  v3[29] = v8;
  uint64_t v10 = v3[31];
  if (v8 > v10) {
    uint64_t v10 = v8;
  }
  v3[31] = v10;
  uint64_t v11 = v3[24];
  if (v11)
  {
    uint64_t v12 = v3[26];
    sub_1B62C9D00(v5, v6, v11);
    sub_1B62C9D00(v5, v6, v12);
  }
}

void sub_1B66608C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(v3[5] + 24);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v8 = v3[16];
    uint64_t v9 = *(void *)(a3 + 128);
    swift_retain();
    uint64_t v10 = (unsigned char *)(v4 + 64);
    do
    {
      size_t v11 = *((void *)v10 - 2);
      uint64_t v12 = *((void *)v10 - 1);
      int v13 = (const void *)(v8 + v12 + v11 * a1);
      uint64_t v14 = (void *)(v9 + v12 + v11 * a2);
      if (*v10 == 1) {
        memmove(v14, v13, v11);
      }
      else {
        sub_1B6B3BE38();
      }
      v10 += 40;
      --v5;
    }
    while (v5);
    swift_release();
  }
  uint64_t v15 = v3[2] + OBJC_IVAR____TtC3VFX13EntityManager_counters;
  if (*(void *)v15)
  {
    Swift::Int v16 = v3[9];
    Swift::UInt32 v17 = *(_DWORD *)(v15 + 60);
    vfx_counters.add(_:_:)(v17, v16);
  }
}

void sub_1B66609DC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2[5] + 24);
  uint64_t v4 = *(void *)(v3 + 16);
  if (v4)
  {
    uint64_t v6 = v2[16];
    uint64_t v7 = *(void *)(a1 + 96);
    uint64_t v8 = v3 + 32;
    uint64_t v9 = *(void *)(a1 + 16);
    uint64_t v10 = *(void *)(v9 + 16);
    size_t v11 = (uint64_t *)(v9 + 56);
    swift_retain();
    for (uint64_t i = 0; i != v4; ++i)
    {
      uint64_t v13 = v8 + 40 * i;
      uint64_t v14 = v11;
      uint64_t v15 = v10;
      if (v10)
      {
        while (*(v14 - 3) != *(void *)v13)
        {
          v14 += 5;
          if (!--v15) {
            goto LABEL_8;
          }
        }
        uint64_t v16 = *v14;
      }
      else
      {
LABEL_8:
        uint64_t v16 = 0;
      }
      Swift::UInt32 v17 = (void *)(v7 + v16);
      if (*(unsigned char *)(v13 + 32)) {
        memcpy(v17, (const void *)(v6 + *(void *)(v13 + 24) + *(void *)(v13 + 16) * a2), *(void *)(v13 + 16));
      }
      else {
        sub_1B62CD04C();
      }
    }
    swift_release();
    uint64_t v2 = v21;
  }
  uint64_t v18 = v2[2] + OBJC_IVAR____TtC3VFX13EntityManager_counters;
  if (*(void *)v18)
  {
    Swift::Int v19 = v2[9];
    Swift::UInt32 v20 = *(_DWORD *)(v18 + 72);
    vfx_counters.add(_:_:)(v20, v19);
  }
}

void sub_1B6660B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(v2[5] + 24);
  uint64_t v5 = *(void *)(v4 + 16);
  if (v5)
  {
    uint64_t v6 = *(void *)(a2 + 96);
    uint64_t v7 = v2[16];
    uint64_t v8 = v4 + 32;
    uint64_t v9 = *(void *)(a2 + 16);
    uint64_t v10 = *(void *)(v9 + 16);
    size_t v11 = (uint64_t *)(v9 + 56);
    swift_retain();
    for (uint64_t i = 0; i != v5; ++i)
    {
      uint64_t v13 = v8 + 40 * i;
      uint64_t v14 = v11;
      uint64_t v15 = v10;
      if (v10)
      {
        while (*(v14 - 3) != *(void *)v13)
        {
          v14 += 5;
          if (!--v15) {
            goto LABEL_8;
          }
        }
        uint64_t v16 = *v14;
      }
      else
      {
LABEL_8:
        uint64_t v16 = 0;
      }
      if (*(unsigned char *)(v13 + 32)) {
        memcpy((void *)(v7 + *(void *)(v13 + 24) + *(void *)(v13 + 16) * a1), (const void *)(v6 + v16), *(void *)(v13 + 16));
      }
      else {
        sub_1B6B3BE38();
      }
    }
    swift_release();
    uint64_t v2 = v20;
  }
  uint64_t v17 = v2[2] + OBJC_IVAR____TtC3VFX13EntityManager_counters;
  if (*(void *)v17)
  {
    Swift::Int v18 = v2[9];
    Swift::UInt32 v19 = *(_DWORD *)(v17 + 60);
    vfx_counters.add(_:_:)(v19, v18);
  }
}

void sub_1B6660CA8(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(v2 + 40);
  if (*(unsigned char *)(v5 + 200) == 1)
  {
    *(unsigned char *)(*(void *)(v2 + 16) + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 1;
    uint64_t v5 = *(void *)(v2 + 40);
  }
  sub_1B63658B4(v5, v2, a1, a2);
  sub_1B66607B0(a1, a2, *(void *)(v2 + 232));
  uint64_t v6 = *(void *)(v2 + 16);
  Swift::Int v7 = a2 - a1;
  if (*(void *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_counters)) {
    vfx_counters.add(_:_:)(*(_DWORD *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 44), v7);
  }
  if (*(void *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_counters)) {
    vfx_counters.add(_:_:)(*(_DWORD *)(v6 + OBJC_IVAR____TtC3VFX13EntityManager_counters + 48), -v7);
  }
  ++*(_DWORD *)(v2 + 116);
}

uint64_t sub_1B6660D84(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7)
{
  if (((*(uint64_t (**)(void))(*(void *)(a2 + 8) + 48))() & 1) != 0 && (a7 & 1) == 0) {
    sub_1B6BF3528(a3, a4, a5, a1, a2, 1);
  }
  int v14 = *(_DWORD *)(v7 + 24);
  swift_retain();
  uint64_t v20 = 0;
  memset(v19, 0, sizeof(v19));
  uint64_t v18 = 0;
  memset(v17, 0, sizeof(v17));
  signed int v15 = sub_1B637F628(v14, 0, 0, a1, a2, (uint64_t)v19, (uint64_t)v17);
  swift_release();
  sub_1B6386458((uint64_t)v17);
  sub_1B6386458((uint64_t)v19);
  return sub_1B63B325C(a3, a4, a5, v15);
}

uint64_t sub_1B6660EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v12 = *(void *)(v6 + 48);
  uint64_t v13 = *(void *)(v12 + 16);
  if (v13)
  {
    int v14 = (uint64_t *)(v12 + 56);
    while (*(v14 - 3) != a4)
    {
      v14 += 5;
      if (!--v13) {
        goto LABEL_5;
      }
    }
    uint64_t v15 = *v14;
  }
  else
  {
LABEL_5:
    uint64_t v15 = 0;
  }
  uint64_t v16 = *(void *)(a4 - 8);
  uint64_t v17 = *(void *)(v6 + 128) + v15 + *(void *)(v16 + 72) * a1;
  uint64_t v18 = (*(uint64_t (**)(uint64_t))(*(void *)(a5 + 8) + 48))(a4);
  if (v18)
  {
    MEMORY[0x1F4188790](v18, v19);
    _OWORD v22[2] = a4;
    v22[3] = a5;
    _OWORD v22[4] = v6;
    v22[5] = a1;
    v22[6] = v17;
    v22[7] = a3;
    sub_1B62FD7BC(a2, (uint64_t)sub_1B6661D40, (uint64_t)v22, a4, MEMORY[0x1E4FBC248], MEMORY[0x1E4FBC848] + 8, MEMORY[0x1E4FBC278], v20);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 24))(v17, a2, a4);
}

uint64_t sub_1B666103C()
{
  return 0;
}

uint64_t sub_1B66612E0()
{
  return sub_1B666103C();
}

unint64_t sub_1B6661308()
{
  unint64_t result = qword_1E9DCDCD8;
  if (!qword_1E9DCDCD8)
  {
    type metadata accessor for ComponentsDataChunk();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDCD8);
  }
  return result;
}

void *sub_1B666135C()
{
  uint64_t v2 = *(void *)(v0 + 8);
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v3 = *(void **)v0;
  uint64_t v4 = v2 - v1;
  if (v2 != v1)
  {
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = *(void *)(v0 + 16);
    do
    {
      if (v7 < v1 && v3[v7] == v6)
      {
        uint64_t v10 = v1 + v6 - v7;
        while (v1 - 1 != v7)
        {
          ++v6;
          uint64_t v9 = v7 + 1;
          uint64_t v11 = v3[++v7];
          if (v6 != v11) {
            goto LABEL_5;
          }
        }
        uint64_t v6 = v10;
        uint64_t v9 = v1;
      }
      else
      {
        uint64_t v9 = v7;
      }
LABEL_5:
      v3[v8] = v6++;
      uint64_t v7 = v9;
      ++v8;
    }
    while (v8 != v2);
  }
  *(void *)(v0 + 16) = v4;
  return memmove(v3, &v3[v1], 8 * v4);
}

uint64_t sub_1B6661400(void *a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 256;
  if (a3) {
    uint64_t v6 = 232;
  }
  uint64_t v7 = *(void *)(a4 + v6);
  if (v7 == *a1)
  {
    uint64_t v8 = v7 + 1;
    if (a2 >= 2)
    {
      if (v8 == a1[1])
      {
        uint64_t v8 = v7 + 2;
        if ((unint64_t)a2 >= 3 && v8 == a1[2])
        {
          if ((unint64_t)a2 < 4)
          {
            uint64_t v8 = v7 + 3;
            uint64_t v9 = 3;
          }
          else
          {
            uint64_t v8 = v7 + a2;
            uint64_t v9 = 3;
            while (v7 + v9 == a1[v9])
            {
              if (a2 == ++v9)
              {
                uint64_t v9 = a2;
                goto LABEL_19;
              }
            }
            uint64_t v8 = v7 + v9;
          }
        }
        else
        {
          uint64_t v9 = 2;
        }
      }
      else
      {
        uint64_t v9 = 1;
      }
      goto LABEL_19;
    }
    uint64_t v9 = 1;
    if (!a2) {
      return 0;
    }
  }
  else
  {
    uint64_t v9 = 0;
    uint64_t v8 = v7;
    if (!a2) {
      return 0;
    }
  }
LABEL_19:
  uint64_t v10 = 0;
  uint64_t v59 = a2 + 1;
  uint64_t v11 = *(void *)(a4 + 240);
  uint64_t v12 = a2;
  uint64_t v62 = a5;
  uint64_t v63 = a1;
  do
  {
    while (1)
    {
      while (1)
      {
        uint64_t v13 = a1[--v12];
        if (v13 < *(void *)(a4 + 248)) {
          break;
        }
        if (v13 >= --v11)
        {
LABEL_20:
          if (!v12) {
            return v10;
          }
        }
        else
        {
          uint64_t v23 = *(void *)(a5 + 192);
          if (v23)
          {
            uint64_t v24 = *(void *)(a5 + 208);
            uint64_t v25 = 8 * (v11 >> 6);
            uint64_t v26 = *(void *)(v23 + v25);
            uint64_t v27 = 1 << v11;
            uint64_t v28 = v13 >> 6;
            uint64_t v29 = 1 << v13;
            if ((*(void *)(v23 + 8 * (v13 >> 6)) & (1 << v13)) != 0) {
              uint64_t v30 = v26 | (1 << v11);
            }
            else {
              uint64_t v30 = v26 & ~(1 << v11);
            }
            *(void *)(v23 + v25) = v30;
            if ((v26 & v27) != 0) {
              uint64_t v31 = *(void *)(v23 + 8 * v28) | v29;
            }
            else {
              uint64_t v31 = *(void *)(v23 + 8 * v28) & ~v29;
            }
            *(void *)(v23 + 8 * v28) = v31;
            uint64_t v46 = *(void *)(v24 + v25);
            uint64_t v47 = v46 & ~v27;
            if ((*(void *)(v24 + 8 * v28) & v29) != 0) {
              uint64_t v47 = v46 | v27;
            }
            *(void *)(v24 + v25) = v47;
            if ((v46 & v27) != 0) {
              uint64_t v48 = *(void *)(v24 + 8 * v28) | v29;
            }
            else {
              uint64_t v48 = *(void *)(v24 + 8 * v28) & ~v29;
            }
            *(void *)(v24 + 8 * v28) = v48;
          }
          uint64_t v61 = v8;
          uint64_t v49 = v11;
          int v50 = *(_DWORD *)(a6 + 4 * v13);
          if (v13 != v11)
          {
            *(_DWORD *)(a6 + 4 * v13) = *(_DWORD *)(a6 + 4 * v11);
            *(_DWORD *)(a6 + 4 * v11) = v50;
          }
          uint64_t v51 = *(void *)(a5 + 16);
          int v52 = *(_DWORD *)(a5 + 188);
          uint64_t v53 = *(void *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          int v54 = *(_DWORD *)(v53 + 12 * v50);
          swift_retain();
          if (v54 == v52) {
            *(_WORD *)(v53 + 12 * v50 + 4) = v49;
          }
          swift_release();
          int v55 = *(_DWORD *)(a6 + 4 * v13);
          uint64_t v56 = *(void *)(v51 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          int v57 = *(_DWORD *)(v56 + 12 * v55);
          swift_retain();
          if (v57 == v52) {
            *(_WORD *)(v56 + 12 * v55 + 4) = v13;
          }
          swift_release();
          ++v10;
          a5 = v62;
          a1 = v63;
          uint64_t v11 = v49;
          uint64_t v8 = v61;
          if (!v12) {
            return v10;
          }
        }
      }
      if (v8 >= v13) {
        return v10;
      }
      uint64_t v14 = *(void *)(a5 + 192);
      if (v14)
      {
        uint64_t v15 = *(void *)(a5 + 208);
        uint64_t v16 = 8 * (v8 >> 6);
        uint64_t v17 = *(void *)(v14 + v16);
        uint64_t v18 = 1 << v8;
        uint64_t v19 = v13 >> 6;
        uint64_t v20 = 1 << v13;
        if ((*(void *)(v14 + 8 * (v13 >> 6)) & (1 << v13)) != 0) {
          uint64_t v21 = v17 | (1 << v8);
        }
        else {
          uint64_t v21 = v17 & ~(1 << v8);
        }
        *(void *)(v14 + v16) = v21;
        if ((v17 & v18) != 0) {
          uint64_t v22 = *(void *)(v14 + 8 * v19) | v20;
        }
        else {
          uint64_t v22 = *(void *)(v14 + 8 * v19) & ~v20;
        }
        *(void *)(v14 + 8 * v19) = v22;
        uint64_t v32 = *(void *)(v15 + v16);
        uint64_t v33 = v32 & ~v18;
        if ((*(void *)(v15 + 8 * v19) & v20) != 0) {
          uint64_t v33 = v32 | v18;
        }
        *(void *)(v15 + v16) = v33;
        if ((v32 & v18) != 0) {
          uint64_t v34 = *(void *)(v15 + 8 * v19) | v20;
        }
        else {
          uint64_t v34 = *(void *)(v15 + 8 * v19) & ~v20;
        }
        *(void *)(v15 + 8 * v19) = v34;
      }
      uint64_t v64 = v11;
      uint64_t v35 = v8;
      if (v13 == v8)
      {
        int v36 = *(_DWORD *)(a6 + 4 * v8);
      }
      else
      {
        int v36 = *(_DWORD *)(a6 + 4 * v13);
        *(_DWORD *)(a6 + 4 * v13) = *(_DWORD *)(a6 + 4 * v8);
        *(_DWORD *)(a6 + 4 * v8) = v36;
      }
      uint64_t v37 = *(void *)(a5 + 16);
      int v38 = *(_DWORD *)(a5 + 188);
      uint64_t v39 = *(void *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      int v40 = *(_DWORD *)(v39 + 12 * v36);
      swift_retain();
      if (v40 == v38) {
        *(_WORD *)(v39 + 12 * v36 + 4) = v35;
      }
      swift_release();
      int v41 = *(_DWORD *)(a6 + 4 * v13);
      uint64_t v42 = *(void *)(v37 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      int v43 = *(_DWORD *)(v42 + 12 * v41);
      swift_retain();
      if (v43 == v38) {
        *(_WORD *)(v42 + 12 * v41 + 4) = v13;
      }
      swift_release();
      ++v10;
      a1 = v63;
      if (v35 + 1 == v63[v9]) {
        break;
      }
      uint64_t v8 = v35 + 1;
      a5 = v62;
      uint64_t v11 = v64;
      if (!v12) {
        return v10;
      }
    }
    uint64_t v44 = v35 + 2;
    uint64_t v45 = v9 + 1;
    a5 = v62;
    uint64_t v11 = v64;
    if (v9 + 1 < a2 && v44 == v63[v45])
    {
      uint64_t v44 = v35 + 3;
      uint64_t v45 = v9 + 2;
      if (v9 + 2 < a2)
      {
        uint64_t v8 = v59 + v35 - v9;
        while (v44 == v63[v45])
        {
          ++v44;
          if (a2 == ++v45)
          {
            uint64_t v9 = a2;
            goto LABEL_20;
          }
        }
      }
    }
    uint64_t v8 = v44;
    uint64_t v9 = v45;
  }
  while (v12);
  return v10;
}

uint64_t sub_1B66618EC(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = 256;
  if (a3) {
    uint64_t v6 = 232;
  }
  uint64_t v7 = *(void *)(a4 + v6);
  uint64_t v8 = a1 + 2;
  if (a1 + 2 <= a2) {
    uint64_t v8 = a2;
  }
  if (a1 + 1 >= a2) {
    uint64_t v9 = a1 + 1;
  }
  else {
    uint64_t v9 = v8;
  }
  if (v7 == a1) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = v7;
  }
  if (v7 == a1) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = a1;
  }
  if (a2 != a1)
  {
    uint64_t v12 = 0;
    uint64_t v60 = a2 + 1;
    uint64_t v13 = *(void *)(a4 + 240);
    uint64_t v14 = a2;
    uint64_t v62 = a5;
    uint64_t v63 = a4;
    while (1)
    {
      uint64_t v15 = v14--;
      if (v14 >= *(void *)(a4 + 248))
      {
        uint64_t v25 = v13 - 1;
        if (v14 < v13 - 1)
        {
          uint64_t v26 = *(void *)(a5 + 192);
          if (v26 && v15 != v13)
          {
            uint64_t v27 = *(void *)(a5 + 208);
            uint64_t v28 = 8 * (v25 >> 6);
            uint64_t v29 = *(void *)(v26 + v28);
            uint64_t v30 = 1 << v25;
            uint64_t v31 = v14 >> 6;
            uint64_t v32 = 1 << v14;
            if ((*(void *)(v26 + 8 * (v14 >> 6)) & (1 << v14)) != 0) {
              uint64_t v33 = v29 | (1 << v25);
            }
            else {
              uint64_t v33 = v29 & ~(1 << v25);
            }
            *(void *)(v26 + v28) = v33;
            if ((v29 & v30) != 0) {
              uint64_t v34 = *(void *)(v26 + 8 * v31) | v32;
            }
            else {
              uint64_t v34 = *(void *)(v26 + 8 * v31) & ~v32;
            }
            *(void *)(v26 + 8 * v31) = v34;
            uint64_t v48 = *(void *)(v27 + v28);
            uint64_t v49 = v48 & ~v30;
            if ((*(void *)(v27 + 8 * v31) & v32) != 0) {
              uint64_t v49 = v48 | v30;
            }
            *(void *)(v27 + v28) = v49;
            if ((v48 & v30) != 0) {
              uint64_t v50 = *(void *)(v27 + 8 * v31) | v32;
            }
            else {
              uint64_t v50 = *(void *)(v27 + 8 * v31) & ~v32;
            }
            *(void *)(v27 + 8 * v31) = v50;
          }
          if (v15 == v13)
          {
            int v51 = *(_DWORD *)(a6 + 4 * v25);
          }
          else
          {
            int v51 = *(_DWORD *)(a6 + 4 * v14);
            *(_DWORD *)(a6 + 4 * v14) = *(_DWORD *)(a6 + 4 * v25);
            *(_DWORD *)(a6 + 4 * v25) = v51;
          }
          uint64_t v52 = *(void *)(a5 + 16);
          int v53 = *(_DWORD *)(a5 + 188);
          uint64_t v54 = *(void *)(v52 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          int v55 = *(_DWORD *)(v54 + 12 * v51);
          swift_retain();
          if (v55 == v53) {
            *(_WORD *)(v54 + 12 * v51 + 4) = v25;
          }
          swift_release();
          int v56 = *(_DWORD *)(a6 + 4 * v14);
          uint64_t v57 = *(void *)(v52 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
          int v58 = *(_DWORD *)(v57 + 12 * v56);
          swift_retain();
          if (v58 == v53) {
            *(_WORD *)(v57 + 12 * v56 + 4) = v14;
          }
          swift_release();
          ++v12;
          a5 = v62;
          a4 = v63;
        }
      }
      else
      {
        if (v10 >= v14) {
          return v12;
        }
        uint64_t v16 = *(void *)(a5 + 192);
        if (v16)
        {
          uint64_t v17 = *(void *)(a5 + 208);
          uint64_t v18 = 8 * (v10 >> 6);
          uint64_t v19 = *(void *)(v16 + v18);
          uint64_t v20 = 1 << v10;
          uint64_t v21 = v14 >> 6;
          uint64_t v22 = 1 << v14;
          if ((*(void *)(v16 + 8 * (v14 >> 6)) & (1 << v14)) != 0) {
            uint64_t v23 = v19 | (1 << v10);
          }
          else {
            uint64_t v23 = v19 & ~(1 << v10);
          }
          *(void *)(v16 + v18) = v23;
          if ((v19 & v20) != 0) {
            uint64_t v24 = *(void *)(v16 + 8 * v21) | v22;
          }
          else {
            uint64_t v24 = *(void *)(v16 + 8 * v21) & ~v22;
          }
          *(void *)(v16 + 8 * v21) = v24;
          uint64_t v35 = *(void *)(v17 + v18);
          uint64_t v36 = v35 & ~v20;
          if ((*(void *)(v17 + 8 * v21) & v22) != 0) {
            uint64_t v36 = v35 | v20;
          }
          *(void *)(v17 + v18) = v36;
          if ((v35 & v20) != 0) {
            uint64_t v37 = *(void *)(v17 + 8 * v21) | v22;
          }
          else {
            uint64_t v37 = *(void *)(v17 + 8 * v21) & ~v22;
          }
          *(void *)(v17 + 8 * v21) = v37;
        }
        if (v14 == v10)
        {
          int v38 = *(_DWORD *)(a6 + 4 * v10);
        }
        else
        {
          int v38 = *(_DWORD *)(a6 + 4 * v14);
          *(_DWORD *)(a6 + 4 * v14) = *(_DWORD *)(a6 + 4 * v10);
          *(_DWORD *)(a6 + 4 * v10) = v38;
        }
        uint64_t v39 = *(void *)(a5 + 16);
        int v40 = *(_DWORD *)(a5 + 188);
        uint64_t v41 = *(void *)(v39 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        int v42 = *(_DWORD *)(v41 + 12 * v38);
        swift_retain();
        if (v42 == v40) {
          *(_WORD *)(v41 + 12 * v38 + 4) = v10;
        }
        swift_release();
        int v43 = *(_DWORD *)(a6 + 4 * v14);
        uint64_t v44 = *(void *)(v39 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        int v45 = *(_DWORD *)(v44 + 12 * v43);
        swift_retain();
        if (v45 == v40) {
          *(_WORD *)(v44 + 12 * v43 + 4) = v14;
        }
        swift_release();
        ++v12;
        if (v10 + 1 == v11)
        {
          a5 = v62;
          a4 = v63;
          if (v11 + 1 < a2 && v10 + 2 == v11 + 1)
          {
            uint64_t v46 = v10 + 3;
            uint64_t v47 = v11 + 2;
            if (v11 + 2 < a2)
            {
              uint64_t v10 = v60 + v10 - v11;
              while (v46 == v47)
              {
                uint64_t v47 = ++v46;
                if (a2 == v46)
                {
                  uint64_t v25 = v13;
                  uint64_t v11 = a2;
                  goto LABEL_17;
                }
              }
            }
            uint64_t v10 = v46;
            uint64_t v25 = v13;
            uint64_t v11 = v47;
          }
          else
          {
            v10 += 2;
            uint64_t v25 = v13;
            ++v11;
          }
        }
        else
        {
          ++v10;
          uint64_t v25 = v13;
          a5 = v62;
          a4 = v63;
        }
      }
LABEL_17:
      uint64_t v13 = v25;
      if (v14 == a1) {
        return v12;
      }
    }
  }
  return 0;
}

uint64_t sub_1B6661D40(uint64_t a1)
{
  return sub_1B6979248(v1[5], v1[6], a1, v1[2], v1[7], v1[2], v1[3]);
}

uint64_t sub_1B6661D80(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (*(void *)(a3 + 248) <= a1)
  {
    uint64_t v7 = *(void *)(a3 + 240) - 1;
    if (v7 <= a1) {
      return 0;
    }
  }
  else
  {
    uint64_t v5 = 256;
    if (a2) {
      uint64_t v5 = 232;
    }
    uint64_t v6 = *(void *)(a3 + v5);
    if (v6 == a1) {
      uint64_t v7 = v6 + 1;
    }
    else {
      uint64_t v7 = v6;
    }
    if (v7 >= a1) {
      return 0;
    }
  }
  sub_1B6660684(a1, v7, a4, a5);
  return 1;
}

ValueMetadata *type metadata accessor for PackedRewriter()
{
  return &type metadata for PackedRewriter;
}

uint64_t sub_1B6661E04(void *a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = 256;
  if (a2) {
    uint64_t v6 = 232;
  }
  uint64_t v7 = *(void *)(a3 + v6);
  uint64_t v8 = a1 + 4;
  if (v7 == a1[4])
  {
    uint64_t v9 = v7 + 1;
    unint64_t v10 = a1[2];
    if (v10 >= 2)
    {
      if (v9 == a1[5])
      {
        uint64_t v9 = v7 + 2;
        if (v10 < 3)
        {
          uint64_t v13 = 2;
          unint64_t v10 = 2;
        }
        else if (v9 == a1[6])
        {
          uint64_t v11 = v7 + 3;
          if (v10 < 4)
          {
            uint64_t v13 = 3;
            uint64_t v9 = v7 + 3;
            unint64_t v10 = 3;
          }
          else
          {
            uint64_t v12 = 0;
            uint64_t v9 = v7 + v10;
            while (v11 + v12 == a1[v12 + 7])
            {
              if (v10 - 3 == ++v12)
              {
                uint64_t v13 = a1[2];
                goto LABEL_22;
              }
            }
            uint64_t v13 = v12 + 3;
            uint64_t v9 = v11 + v12;
          }
        }
        else
        {
          uint64_t v13 = 2;
        }
      }
      else
      {
        uint64_t v13 = 1;
      }
      goto LABEL_22;
    }
    uint64_t v13 = 1;
    if (!v10) {
      return 0;
    }
  }
  else
  {
    uint64_t v13 = 0;
    unint64_t v10 = a1[2];
    uint64_t v9 = v7;
    if (!v10) {
      return 0;
    }
  }
LABEL_22:
  uint64_t v14 = *(void *)(a3 + 240);
  unint64_t v61 = v10 + 1;
  uint64_t v15 = 0;
  int64_t v62 = v10;
  unint64_t v63 = v10 - 2;
  uint64_t v65 = swift_bridgeObjectRetain() + 48;
  uint64_t v66 = v8;
  uint64_t v67 = a4;
  while (1)
  {
    uint64_t v16 = v8[--v10];
    if (v16 < *(void *)(a3 + 248)) {
      break;
    }
    if (v16 < --v14)
    {
      uint64_t v26 = *(void *)(a4 + 192);
      if (v26)
      {
        uint64_t v27 = *(void *)(a4 + 208);
        uint64_t v28 = 8 * (v14 >> 6);
        uint64_t v29 = *(void *)(v26 + v28);
        uint64_t v30 = 1 << v14;
        uint64_t v31 = v16 >> 6;
        uint64_t v32 = 1 << v16;
        if ((*(void *)(v26 + 8 * (v16 >> 6)) & (1 << v16)) != 0) {
          uint64_t v33 = v29 | (1 << v14);
        }
        else {
          uint64_t v33 = v29 & ~(1 << v14);
        }
        *(void *)(v26 + v28) = v33;
        if ((v29 & v30) != 0) {
          uint64_t v34 = *(void *)(v26 + 8 * v31) | v32;
        }
        else {
          uint64_t v34 = *(void *)(v26 + 8 * v31) & ~v32;
        }
        *(void *)(v26 + 8 * v31) = v34;
        uint64_t v48 = *(void *)(v27 + v28);
        uint64_t v49 = v48 & ~v30;
        if ((*(void *)(v27 + 8 * v31) & v32) != 0) {
          uint64_t v49 = v48 | v30;
        }
        *(void *)(v27 + v28) = v49;
        if ((v48 & v30) != 0) {
          uint64_t v50 = *(void *)(v27 + 8 * v31) | v32;
        }
        else {
          uint64_t v50 = *(void *)(v27 + 8 * v31) & ~v32;
        }
        *(void *)(v27 + 8 * v31) = v50;
      }
      uint64_t v64 = v9;
      uint64_t v51 = v14;
      int v52 = *(_DWORD *)(a5 + 4 * v16);
      if (v16 != v14)
      {
        *(_DWORD *)(a5 + 4 * v16) = *(_DWORD *)(a5 + 4 * v14);
        *(_DWORD *)(a5 + 4 * v14) = v52;
      }
      uint64_t v53 = *(void *)(a4 + 16);
      int v54 = *(_DWORD *)(a4 + 188);
      uint64_t v55 = *(void *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      int v56 = *(_DWORD *)(v55 + 12 * v52);
      swift_retain();
      if (v56 == v54) {
        *(_WORD *)(v55 + 12 * v52 + 4) = v51;
      }
      swift_release();
      int v57 = *(_DWORD *)(a5 + 4 * v16);
      uint64_t v58 = *(void *)(v53 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      int v59 = *(_DWORD *)(v58 + 12 * v57);
      swift_retain();
      if (v59 == v54) {
        *(_WORD *)(v58 + 12 * v57 + 4) = v16;
      }
      swift_release();
      ++v15;
      uint64_t v8 = v66;
      a4 = v67;
      uint64_t v14 = v51;
      uint64_t v9 = v64;
    }
LABEL_24:
    if (!v10) {
      goto LABEL_79;
    }
  }
  if (v9 < v16)
  {
    uint64_t v17 = *(void *)(a4 + 192);
    if (v17)
    {
      uint64_t v18 = *(void *)(a4 + 208);
      uint64_t v19 = 8 * (v9 >> 6);
      uint64_t v20 = *(void *)(v17 + v19);
      uint64_t v21 = 1 << v9;
      uint64_t v22 = v16 >> 6;
      uint64_t v23 = 1 << v16;
      if ((*(void *)(v17 + 8 * (v16 >> 6)) & (1 << v16)) != 0) {
        uint64_t v24 = v20 | (1 << v9);
      }
      else {
        uint64_t v24 = v20 & ~(1 << v9);
      }
      *(void *)(v17 + v19) = v24;
      if ((v20 & v21) != 0) {
        uint64_t v25 = *(void *)(v17 + 8 * v22) | v23;
      }
      else {
        uint64_t v25 = *(void *)(v17 + 8 * v22) & ~v23;
      }
      *(void *)(v17 + 8 * v22) = v25;
      uint64_t v35 = *(void *)(v18 + v19);
      uint64_t v36 = v35 & ~v21;
      if ((*(void *)(v18 + 8 * v22) & v23) != 0) {
        uint64_t v36 = v35 | v21;
      }
      *(void *)(v18 + v19) = v36;
      if ((v35 & v21) != 0) {
        uint64_t v37 = *(void *)(v18 + 8 * v22) | v23;
      }
      else {
        uint64_t v37 = *(void *)(v18 + 8 * v22) & ~v23;
      }
      *(void *)(v18 + 8 * v22) = v37;
    }
    uint64_t v68 = v14;
    uint64_t v38 = v9;
    if (v16 == v9)
    {
      int v39 = *(_DWORD *)(a5 + 4 * v9);
    }
    else
    {
      int v39 = *(_DWORD *)(a5 + 4 * v16);
      *(_DWORD *)(a5 + 4 * v16) = *(_DWORD *)(a5 + 4 * v9);
      *(_DWORD *)(a5 + 4 * v9) = v39;
    }
    uint64_t v40 = *(void *)(a4 + 16);
    int v41 = *(_DWORD *)(a4 + 188);
    uint64_t v42 = *(void *)(v40 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    int v43 = *(_DWORD *)(v42 + 12 * v39);
    swift_retain();
    if (v43 == v41) {
      *(_WORD *)(v42 + 12 * v39 + 4) = v38;
    }
    swift_release();
    int v44 = *(_DWORD *)(a5 + 4 * v16);
    uint64_t v45 = *(void *)(v40 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    int v46 = *(_DWORD *)(v45 + 12 * v44);
    swift_retain();
    if (v46 == v41) {
      *(_WORD *)(v45 + 12 * v44 + 4) = v16;
    }
    swift_release();
    ++v15;
    uint64_t v8 = v66;
    if (v38 + 1 == v66[v13])
    {
      a4 = v67;
      uint64_t v14 = v68;
      if (v13 + 1 < v62 && v38 + 2 == v66[v13 + 1])
      {
        uint64_t v47 = v38 + 3;
        if (v13 + 2 >= v62)
        {
          uint64_t v9 = v38 + 3;
          v13 += 2;
        }
        else
        {
          uint64_t v9 = v61 + v38 - v13;
          while (v47 == *(void *)(v65 + 8 * v13))
          {
            ++v47;
            if (v63 == ++v13)
            {
              uint64_t v13 = v62;
              goto LABEL_24;
            }
          }
          v13 += 2;
          uint64_t v9 = v47;
        }
      }
      else
      {
        uint64_t v9 = v38 + 2;
        ++v13;
      }
    }
    else
    {
      uint64_t v9 = v38 + 1;
      a4 = v67;
      uint64_t v14 = v68;
    }
    goto LABEL_24;
  }
LABEL_79:
  swift_bridgeObjectRelease();
  return v15;
}

double sub_1B6662354@<D0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  uint64_t v4 = swift_conformsToProtocol2();
  if (v4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (!v4) {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    swift_unownedRetainStrong();
    sub_1B6BF85D0(v3, v5, *(void *)(v1 + 24), (uint64_t)v11);
    swift_release();
    uint64_t v6 = v12;
    if (v12)
    {
      uint64_t v7 = v13;
      uint64_t v8 = sub_1B62C14BC(v11, v12);
      *(void *)(a1 + 24) = v6;
      *(void *)(a1 + 32) = *(void *)(v7 + 8);
      uint64_t v9 = sub_1B62C12C4((uint64_t *)a1);
      (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v8, v6);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v11);
      return result;
    }
    sub_1B666254C((uint64_t)v11);
  }
  *(void *)(a1 + 32) = 0;
  double result = 0.0;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  return result;
}

uint64_t sub_1B6662468()
{
  swift_unownedRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for VFXAttribute()
{
  return self;
}

BOOL sub_1B66624C4(uint64_t *a1, uint64_t *a2)
{
  return sub_1B66624D0(*a1, *a2);
}

BOOL sub_1B66624D0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = *(_DWORD *)(a1 + 24) == *(_DWORD *)(a2 + 24) && *(_DWORD *)(a1 + 28) == *(_DWORD *)(a2 + 28);
  if (!v2 || *(void *)(a1 + 32) != *(void *)(a2 + 32)) {
    return 0;
  }
  uint64_t v5 = *(void *)(a1 + 16);
  swift_unownedRetainStrong();
  uint64_t v6 = *(void *)(a2 + 16);
  swift_unownedRetainStrong();
  swift_release();
  swift_release();
  return v5 == v6;
}

uint64_t sub_1B666254C(uint64_t a1)
{
  sub_1B66625A8();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

void sub_1B66625A8()
{
  if (!qword_1EB97EAF0)
  {
    sub_1B663C158();
    unint64_t v0 = sub_1B6E324B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB97EAF0);
    }
  }
}

uint64_t sub_1B66626C0@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  unint64_t v10 = *v4;
  uint64_t v11 = (uint64_t)*v4 + 41;
  uint64_t v12 = (*v4)[8];
  unint64_t v13 = v10[9];
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
  *(void *)(inited + 32) = &type metadata for Position;
  *(void *)(inited + 40) = &off_1F0FA6F58;
  *(void *)(inited + 48) = &type metadata for Scale1;
  *(void *)(inited + 56) = &off_1F0FA0E48;
  *(void *)(inited + 64) = &type metadata for Velocity;
  *(void *)(inited + 72) = &off_1F0FA7C80;
  if (v13 > 0xF)
  {
    uint64_t v31 = sub_1B62F79D4((char *)(v11 + v12), v13 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v31;
  }
  uint64_t v15 = v10[10];
  int64_t v16 = v10[11];
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v17 + 32) = a1;
  *(unsigned char *)(v17 + 33) = a2;
  *(unsigned char *)(v17 + 34) = a3;
  if (v16)
  {
    uint64_t v31 = sub_1B62F7C94((char *)(v11 + v15), v16);
    sub_1B62F81D8(v17);
    uint64_t v17 = v31;
    unint64_t v18 = *(void *)(v31 + 16);
  }
  else
  {
    unint64_t v18 = 3;
  }
  uint64_t v19 = (uint64_t)*v5 + 41;
  uint64_t v20 = (char *)(v19 + (*v5)[12]);
  unint64_t v21 = (unint64_t)(*v5)[13] >> 4;
  uint64_t v22 = (char *)(v19 + (*v5)[14]);
  uint64_t v23 = (*v5)[15] / 0x18u;
  int v24 = *((_DWORD *)v5 + 2);
  char v25 = *((unsigned char *)v5 + 12);
  uint64_t v26 = v5[4];
  uint64_t v27 = v5[2];
  char v28 = *((unsigned char *)v5 + 24);
  uint64_t v29 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(unsigned char *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(unsigned char *)(a4 + 15) = v33;
  *(void *)(a4 + 16) = v27;
  *(unsigned char *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(void *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B6662900@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  unint64_t v10 = *v4;
  uint64_t v11 = (uint64_t)*v4 + 41;
  uint64_t v12 = (*v4)[8];
  unint64_t v13 = v10[9];
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
  *(void *)(inited + 32) = &type metadata for ProjectionMatrix;
  *(void *)(inited + 40) = &off_1F0F6EF58;
  *(void *)(inited + 48) = &type metadata for PointOfCulling;
  *(void *)(inited + 56) = &off_1F0F64F58;
  *(void *)(inited + 64) = &type metadata for WorldTransform;
  *(void *)(inited + 72) = &off_1F0F67798;
  if (v13 > 0xF)
  {
    uint64_t v31 = sub_1B62F79D4((char *)(v11 + v12), v13 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v31;
  }
  uint64_t v15 = v10[10];
  int64_t v16 = v10[11];
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v17 + 32) = a1;
  *(unsigned char *)(v17 + 33) = a2;
  *(unsigned char *)(v17 + 34) = a3;
  if (v16)
  {
    uint64_t v31 = sub_1B62F7C94((char *)(v11 + v15), v16);
    sub_1B62F81D8(v17);
    uint64_t v17 = v31;
    unint64_t v18 = *(void *)(v31 + 16);
  }
  else
  {
    unint64_t v18 = 3;
  }
  uint64_t v19 = (uint64_t)*v5 + 41;
  uint64_t v20 = (char *)(v19 + (*v5)[12]);
  unint64_t v21 = (unint64_t)(*v5)[13] >> 4;
  uint64_t v22 = (char *)(v19 + (*v5)[14]);
  uint64_t v23 = (*v5)[15] / 0x18u;
  int v24 = *((_DWORD *)v5 + 2);
  char v25 = *((unsigned char *)v5 + 12);
  uint64_t v26 = v5[4];
  uint64_t v27 = v5[2];
  char v28 = *((unsigned char *)v5 + 24);
  uint64_t v29 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(unsigned char *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(unsigned char *)(a4 + 15) = v33;
  *(void *)(a4 + 16) = v27;
  *(unsigned char *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(void *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B6662B40@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = type metadata accessor for TriggerScript(0);
  sub_1B6666AD8(0, &qword_1EB981070, type metadata accessor for TriggerScript, (uint64_t)&off_1EB984DC8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  uint64_t v9 = v8;
  sub_1B6666AD8(0, &qword_1EB981130, type metadata accessor for TriggerScript, (uint64_t)&off_1EB984DC8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  uint64_t v11 = v10;
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 41;
  uint64_t v14 = *(unsigned __int16 *)(*v5 + 16);
  unint64_t v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = &off_1F0F625E0;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = &off_1F0F61C20;
  *(void *)(inited + 64) = v11;
  *(void *)(inited + 72) = &off_1F0F836E8;
  if (v15 > 0xF)
  {
    uint64_t v36 = sub_1B62F79D4((char *)(v13 + v14), v15 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v36;
  }
  uint64_t v17 = *(unsigned __int16 *)(v12 + 20);
  int64_t v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v19 + 32) = a1;
  *(unsigned char *)(v19 + 33) = a2;
  *(unsigned char *)(v19 + 34) = a3;
  if (v18)
  {
    uint64_t v36 = sub_1B62F7C94((char *)(v13 + v17), v18);
    sub_1B62F81D8(v19);
    uint64_t v19 = v36;
    unint64_t v20 = *(void *)(v36 + 16);
  }
  else
  {
    unint64_t v20 = 3;
  }
  uint64_t v21 = *v5 + 41;
  uint64_t v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  unint64_t v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  int v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  uint64_t v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  int v26 = *((_DWORD *)v5 + 2);
  char v27 = *((unsigned char *)v5 + 12);
  uint64_t v28 = v5[4];
  uint64_t v29 = v5[2];
  char v30 = *((unsigned char *)v5 + 24);
  uint64_t v31 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(unsigned char *)(a4 + 15) = v38;
  *(void *)(a4 + 16) = v29;
  *(unsigned char *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(void *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B6662DF8@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t updated = type metadata accessor for ParticleUpdateScript(0);
  sub_1B6666AD8(0, &qword_1EB97E710, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1EB983100, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  uint64_t v9 = v8;
  sub_1B6666AD8(0, &qword_1EB97F4B0, type metadata accessor for ParticleUpdateScript, (uint64_t)&off_1EB983100, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  uint64_t v11 = v10;
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 41;
  uint64_t v14 = *(unsigned __int16 *)(*v5 + 16);
  unint64_t v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
  *(void *)(inited + 32) = updated;
  *(void *)(inited + 40) = &off_1F0F83030;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = &off_1F0F61C20;
  *(void *)(inited + 64) = v11;
  *(void *)(inited + 72) = &off_1F0F836E8;
  if (v15 > 0xF)
  {
    uint64_t v36 = sub_1B62F79D4((char *)(v13 + v14), v15 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v36;
  }
  uint64_t v17 = *(unsigned __int16 *)(v12 + 20);
  int64_t v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v19 + 32) = a1;
  *(unsigned char *)(v19 + 33) = a2;
  *(unsigned char *)(v19 + 34) = a3;
  if (v18)
  {
    uint64_t v36 = sub_1B62F7C94((char *)(v13 + v17), v18);
    sub_1B62F81D8(v19);
    uint64_t v19 = v36;
    unint64_t v20 = *(void *)(v36 + 16);
  }
  else
  {
    unint64_t v20 = 3;
  }
  uint64_t v21 = *v5 + 41;
  uint64_t v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  unint64_t v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  int v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  uint64_t v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  int v26 = *((_DWORD *)v5 + 2);
  char v27 = *((unsigned char *)v5 + 12);
  uint64_t v28 = v5[4];
  uint64_t v29 = v5[2];
  char v30 = *((unsigned char *)v5 + 24);
  uint64_t v31 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(unsigned char *)(a4 + 15) = v38;
  *(void *)(a4 + 16) = v29;
  *(unsigned char *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(void *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B66630B0@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t inited = type metadata accessor for ParticleInitScript(0);
  sub_1B6666AD8(0, &qword_1EB97E700, type metadata accessor for ParticleInitScript, (uint64_t)&off_1EB982C10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  uint64_t v9 = v8;
  sub_1B6666AD8(0, (unint64_t *)&unk_1EB97F4A0, type metadata accessor for ParticleInitScript, (uint64_t)&off_1EB982C10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  uint64_t v11 = v10;
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 41;
  uint64_t v14 = *(unsigned __int16 *)(*v5 + 16);
  unint64_t v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B636E080();
  uint64_t v16 = swift_initStackObject();
  *(_OWORD *)(v16 + 16) = xmmword_1B6E77D10;
  *(void *)(v16 + 32) = inited;
  *(void *)(v16 + 40) = &off_1F0F79748;
  *(void *)(v16 + 48) = v9;
  *(void *)(v16 + 56) = &off_1F0F61C20;
  *(void *)(v16 + 64) = v11;
  *(void *)(v16 + 72) = &off_1F0F836E8;
  if (v15 > 0xF)
  {
    uint64_t v36 = sub_1B62F79D4((char *)(v13 + v14), v15 >> 4);
    sub_1B62F8084(v16);
    uint64_t v16 = v36;
  }
  uint64_t v17 = *(unsigned __int16 *)(v12 + 20);
  int64_t v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v19 + 32) = a1;
  *(unsigned char *)(v19 + 33) = a2;
  *(unsigned char *)(v19 + 34) = a3;
  if (v18)
  {
    uint64_t v36 = sub_1B62F7C94((char *)(v13 + v17), v18);
    sub_1B62F81D8(v19);
    uint64_t v19 = v36;
    unint64_t v20 = *(void *)(v36 + 16);
  }
  else
  {
    unint64_t v20 = 3;
  }
  uint64_t v21 = *v5 + 41;
  uint64_t v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  unint64_t v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  int v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  uint64_t v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  int v26 = *((_DWORD *)v5 + 2);
  char v27 = *((unsigned char *)v5 + 12);
  uint64_t v28 = v5[4];
  uint64_t v29 = v5[2];
  char v30 = *((unsigned char *)v5 + 24);
  uint64_t v31 = sub_1B62C8668((char *)(v16 + 32), *(void *)(v16 + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(unsigned char *)(a4 + 15) = v38;
  *(void *)(a4 + 16) = v29;
  *(unsigned char *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(void *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B6663368@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = type metadata accessor for EmitterScript(0);
  sub_1B6666AD8(0, (unint64_t *)&unk_1EB97E750, type metadata accessor for EmitterScript, (uint64_t)&off_1EB982298, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  uint64_t v9 = v8;
  sub_1B6666AD8(0, &qword_1EB97F4E0, type metadata accessor for EmitterScript, (uint64_t)&off_1EB982298, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  uint64_t v11 = v10;
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 41;
  uint64_t v14 = *(unsigned __int16 *)(*v5 + 16);
  unint64_t v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = &off_1F0F5EC90;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = &off_1F0F61C20;
  *(void *)(inited + 64) = v11;
  *(void *)(inited + 72) = &off_1F0F836E8;
  if (v15 > 0xF)
  {
    uint64_t v36 = sub_1B62F79D4((char *)(v13 + v14), v15 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v36;
  }
  uint64_t v17 = *(unsigned __int16 *)(v12 + 20);
  int64_t v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v19 + 32) = a1;
  *(unsigned char *)(v19 + 33) = a2;
  *(unsigned char *)(v19 + 34) = a3;
  if (v18)
  {
    uint64_t v36 = sub_1B62F7C94((char *)(v13 + v17), v18);
    sub_1B62F81D8(v19);
    uint64_t v19 = v36;
    unint64_t v20 = *(void *)(v36 + 16);
  }
  else
  {
    unint64_t v20 = 3;
  }
  uint64_t v21 = *v5 + 41;
  uint64_t v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  unint64_t v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  int v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  uint64_t v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  int v26 = *((_DWORD *)v5 + 2);
  char v27 = *((unsigned char *)v5 + 12);
  uint64_t v28 = v5[4];
  uint64_t v29 = v5[2];
  char v30 = *((unsigned char *)v5 + 24);
  uint64_t v31 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(unsigned char *)(a4 + 15) = v38;
  *(void *)(a4 + 16) = v29;
  *(unsigned char *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(void *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B6663620@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = type metadata accessor for ShaderScript(0);
  sub_1B6666AD8(0, (unint64_t *)&qword_1EB97E730, type metadata accessor for ShaderScript, (uint64_t)&off_1EB981F10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  uint64_t v9 = v8;
  sub_1B6666AD8(0, (unint64_t *)&unk_1EB97F4C0, type metadata accessor for ShaderScript, (uint64_t)&off_1EB981F10, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  uint64_t v11 = v10;
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 41;
  uint64_t v14 = *(unsigned __int16 *)(*v5 + 16);
  unint64_t v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = &off_1F0F5C080;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = &off_1F0F61C20;
  *(void *)(inited + 64) = v11;
  *(void *)(inited + 72) = &off_1F0F836E8;
  if (v15 > 0xF)
  {
    uint64_t v36 = sub_1B62F79D4((char *)(v13 + v14), v15 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v36;
  }
  uint64_t v17 = *(unsigned __int16 *)(v12 + 20);
  int64_t v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v19 + 32) = a1;
  *(unsigned char *)(v19 + 33) = a2;
  *(unsigned char *)(v19 + 34) = a3;
  if (v18)
  {
    uint64_t v36 = sub_1B62F7C94((char *)(v13 + v17), v18);
    sub_1B62F81D8(v19);
    uint64_t v19 = v36;
    unint64_t v20 = *(void *)(v36 + 16);
  }
  else
  {
    unint64_t v20 = 3;
  }
  uint64_t v21 = *v5 + 41;
  uint64_t v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  unint64_t v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  int v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  uint64_t v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  int v26 = *((_DWORD *)v5 + 2);
  char v27 = *((unsigned char *)v5 + 12);
  uint64_t v28 = v5[4];
  uint64_t v29 = v5[2];
  char v30 = *((unsigned char *)v5 + 24);
  uint64_t v31 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(unsigned char *)(a4 + 15) = v38;
  *(void *)(a4 + 16) = v29;
  *(unsigned char *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(void *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B66638D8@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = type metadata accessor for MetalFunctionScript(0);
  sub_1B6666AD8(0, (unint64_t *)&qword_1EB981060, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1EB984EE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  uint64_t v9 = v8;
  sub_1B6666AD8(0, (unint64_t *)&unk_1EB981120, type metadata accessor for MetalFunctionScript, (uint64_t)&off_1EB984EE8, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  uint64_t v11 = v10;
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 41;
  uint64_t v14 = *(unsigned __int16 *)(*v5 + 16);
  unint64_t v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = &off_1F0F7CE60;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = &off_1F0F61C20;
  *(void *)(inited + 64) = v11;
  *(void *)(inited + 72) = &off_1F0F836E8;
  if (v15 > 0xF)
  {
    uint64_t v36 = sub_1B62F79D4((char *)(v13 + v14), v15 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v36;
  }
  uint64_t v17 = *(unsigned __int16 *)(v12 + 20);
  int64_t v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v19 + 32) = a1;
  *(unsigned char *)(v19 + 33) = a2;
  *(unsigned char *)(v19 + 34) = a3;
  if (v18)
  {
    uint64_t v36 = sub_1B62F7C94((char *)(v13 + v17), v18);
    sub_1B62F81D8(v19);
    uint64_t v19 = v36;
    unint64_t v20 = *(void *)(v36 + 16);
  }
  else
  {
    unint64_t v20 = 3;
  }
  uint64_t v21 = *v5 + 41;
  uint64_t v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  unint64_t v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  int v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  uint64_t v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  int v26 = *((_DWORD *)v5 + 2);
  char v27 = *((unsigned char *)v5 + 12);
  uint64_t v28 = v5[4];
  uint64_t v29 = v5[2];
  char v30 = *((unsigned char *)v5 + 24);
  uint64_t v31 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(unsigned char *)(a4 + 15) = v38;
  *(void *)(a4 + 16) = v29;
  *(unsigned char *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(void *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B6663B90@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = type metadata accessor for SimpleScript(0);
  sub_1B6666AD8(0, (unint64_t *)&unk_1EB97E740, type metadata accessor for SimpleScript, (uint64_t)&off_1EB982058, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  uint64_t v9 = v8;
  sub_1B6666AD8(0, (unint64_t *)&unk_1EB97F4D0, type metadata accessor for SimpleScript, (uint64_t)&off_1EB982058, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  uint64_t v11 = v10;
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 41;
  uint64_t v14 = *(unsigned __int16 *)(*v5 + 16);
  unint64_t v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = &off_1F0F5C338;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = &off_1F0F61C20;
  *(void *)(inited + 64) = v11;
  *(void *)(inited + 72) = &off_1F0F836E8;
  if (v15 > 0xF)
  {
    uint64_t v36 = sub_1B62F79D4((char *)(v13 + v14), v15 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v36;
  }
  uint64_t v17 = *(unsigned __int16 *)(v12 + 20);
  int64_t v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v19 + 32) = a1;
  *(unsigned char *)(v19 + 33) = a2;
  *(unsigned char *)(v19 + 34) = a3;
  if (v18)
  {
    uint64_t v36 = sub_1B62F7C94((char *)(v13 + v17), v18);
    sub_1B62F81D8(v19);
    uint64_t v19 = v36;
    unint64_t v20 = *(void *)(v36 + 16);
  }
  else
  {
    unint64_t v20 = 3;
  }
  uint64_t v21 = *v5 + 41;
  uint64_t v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  unint64_t v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  int v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  uint64_t v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  int v26 = *((_DWORD *)v5 + 2);
  char v27 = *((unsigned char *)v5 + 12);
  uint64_t v28 = v5[4];
  uint64_t v29 = v5[2];
  char v30 = *((unsigned char *)v5 + 24);
  uint64_t v31 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(unsigned char *)(a4 + 15) = v38;
  *(void *)(a4 + 16) = v29;
  *(unsigned char *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(void *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B6663E48@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v7 = type metadata accessor for GraphScript(0);
  sub_1B6666AD8(0, (unint64_t *)&unk_1EB97E720, type metadata accessor for GraphScript, (uint64_t)&off_1EB981C00, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptRuntime);
  uint64_t v9 = v8;
  sub_1B6666AD8(0, &qword_1EB97F4B8, type metadata accessor for GraphScript, (uint64_t)&off_1EB981C00, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for ScriptCompileAttempt);
  uint64_t v11 = v10;
  uint64_t v12 = *v5;
  uint64_t v13 = *v5 + 41;
  uint64_t v14 = *(unsigned __int16 *)(*v5 + 16);
  unint64_t v15 = *(unsigned __int16 *)(*v5 + 18);
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
  *(void *)(inited + 32) = v7;
  *(void *)(inited + 40) = &off_1F0F55688;
  *(void *)(inited + 48) = v9;
  *(void *)(inited + 56) = &off_1F0F61C20;
  *(void *)(inited + 64) = v11;
  *(void *)(inited + 72) = &off_1F0F836E8;
  if (v15 > 0xF)
  {
    uint64_t v36 = sub_1B62F79D4((char *)(v13 + v14), v15 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v36;
  }
  uint64_t v17 = *(unsigned __int16 *)(v12 + 20);
  int64_t v18 = *(unsigned __int16 *)(v12 + 22);
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v19 = swift_initStackObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v19 + 32) = a1;
  *(unsigned char *)(v19 + 33) = a2;
  *(unsigned char *)(v19 + 34) = a3;
  if (v18)
  {
    uint64_t v36 = sub_1B62F7C94((char *)(v13 + v17), v18);
    sub_1B62F81D8(v19);
    uint64_t v19 = v36;
    unint64_t v20 = *(void *)(v36 + 16);
  }
  else
  {
    unint64_t v20 = 3;
  }
  uint64_t v21 = *v5 + 41;
  uint64_t v22 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 24));
  unint64_t v23 = (unint64_t)*(unsigned __int16 *)(*v5 + 26) >> 4;
  int v24 = (char *)(v21 + *(unsigned __int16 *)(*v5 + 28));
  uint64_t v25 = *(unsigned __int16 *)(*v5 + 30) / 0x18u;
  int v26 = *((_DWORD *)v5 + 2);
  char v27 = *((unsigned char *)v5 + 12);
  uint64_t v28 = v5[4];
  uint64_t v29 = v5[2];
  char v30 = *((unsigned char *)v5 + 24);
  uint64_t v31 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v19 + 32), v20, v22, v23, v24, v25);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v31;
  *(_DWORD *)(a4 + 8) = v26;
  *(unsigned char *)(a4 + 12) = v27;
  *(_WORD *)(a4 + 13) = v37;
  *(unsigned char *)(a4 + 15) = v38;
  *(void *)(a4 + 16) = v29;
  *(unsigned char *)(a4 + 24) = v30;
  *(_DWORD *)(a4 + 25) = v36;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v36 + 3);
  *(void *)(a4 + 32) = v28;
  return result;
}

uint64_t sub_1B6664100@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  uint64_t v11 = (uint64_t)*v4 + 41;
  uint64_t v12 = (*v4)[8];
  unint64_t v13 = v10[9];
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
  *(void *)(inited + 32) = &type metadata for ParticleSphereCollider;
  *(void *)(inited + 40) = &off_1F0F8D980;
  *(void *)(inited + 48) = &type metadata for WorldTransform;
  *(void *)(inited + 56) = &off_1F0F67798;
  *(void *)(inited + 64) = &type metadata for LastFrameWorldTransform;
  *(void *)(inited + 72) = &off_1F0F8F510;
  if (v13 > 0xF)
  {
    uint64_t v31 = sub_1B62F79D4((char *)(v11 + v12), v13 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v31;
  }
  uint64_t v15 = v10[10];
  int64_t v16 = v10[11];
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v17 + 32) = a1;
  *(unsigned char *)(v17 + 33) = a2;
  *(unsigned char *)(v17 + 34) = a3;
  if (v16)
  {
    uint64_t v31 = sub_1B62F7C94((char *)(v11 + v15), v16);
    sub_1B62F81D8(v17);
    uint64_t v17 = v31;
    unint64_t v18 = *(void *)(v31 + 16);
  }
  else
  {
    unint64_t v18 = 3;
  }
  uint64_t v19 = (uint64_t)*v5 + 41;
  unint64_t v20 = (char *)(v19 + (*v5)[12]);
  unint64_t v21 = (unint64_t)(*v5)[13] >> 4;
  uint64_t v22 = (char *)(v19 + (*v5)[14]);
  uint64_t v23 = (*v5)[15] / 0x18u;
  int v24 = *((_DWORD *)v5 + 2);
  char v25 = *((unsigned char *)v5 + 12);
  int v26 = v5[4];
  char v27 = v5[2];
  char v28 = *((unsigned char *)v5 + 24);
  uint64_t v29 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(unsigned char *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(unsigned char *)(a4 + 15) = v33;
  *(void *)(a4 + 16) = v27;
  *(unsigned char *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(void *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B6664340@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  uint64_t v11 = (uint64_t)*v4 + 41;
  uint64_t v12 = (*v4)[8];
  unint64_t v13 = v10[9];
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
  *(void *)(inited + 32) = &type metadata for Velocity;
  *(void *)(inited + 40) = &off_1F0FA7C80;
  *(void *)(inited + 48) = &type metadata for Position;
  *(void *)(inited + 56) = &off_1F0FA6F58;
  *(void *)(inited + 64) = &type metadata for ParticleTarget;
  *(void *)(inited + 72) = &off_1F0F64E60;
  if (v13 > 0xF)
  {
    uint64_t v31 = sub_1B62F79D4((char *)(v11 + v12), v13 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v31;
  }
  uint64_t v15 = v10[10];
  int64_t v16 = v10[11];
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v17 + 32) = a1;
  *(unsigned char *)(v17 + 33) = a2;
  *(unsigned char *)(v17 + 34) = a3;
  if (v16)
  {
    uint64_t v31 = sub_1B62F7C94((char *)(v11 + v15), v16);
    sub_1B62F81D8(v17);
    uint64_t v17 = v31;
    unint64_t v18 = *(void *)(v31 + 16);
  }
  else
  {
    unint64_t v18 = 3;
  }
  uint64_t v19 = (uint64_t)*v5 + 41;
  unint64_t v20 = (char *)(v19 + (*v5)[12]);
  unint64_t v21 = (unint64_t)(*v5)[13] >> 4;
  uint64_t v22 = (char *)(v19 + (*v5)[14]);
  uint64_t v23 = (*v5)[15] / 0x18u;
  int v24 = *((_DWORD *)v5 + 2);
  char v25 = *((unsigned char *)v5 + 12);
  int v26 = v5[4];
  char v27 = v5[2];
  char v28 = *((unsigned char *)v5 + 24);
  uint64_t v29 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(unsigned char *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(unsigned char *)(a4 + 15) = v33;
  *(void *)(a4 + 16) = v27;
  *(unsigned char *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(void *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B6664580@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  uint64_t v11 = (uint64_t)*v4 + 41;
  uint64_t v12 = (*v4)[8];
  unint64_t v13 = v10[9];
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
  *(void *)(inited + 32) = &type metadata for DrawCallComponent;
  *(void *)(inited + 40) = &off_1F0F70A08;
  *(void *)(inited + 48) = &type metadata for WorldAABB;
  *(void *)(inited + 56) = &off_1F0FAABA0;
  *(void *)(inited + 64) = &type metadata for VFXDrawCallHandler;
  *(void *)(inited + 72) = &off_1F0F7B538;
  if (v13 > 0xF)
  {
    uint64_t v31 = sub_1B62F79D4((char *)(v11 + v12), v13 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v31;
  }
  uint64_t v15 = v10[10];
  int64_t v16 = v10[11];
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v17 + 32) = a1;
  *(unsigned char *)(v17 + 33) = a2;
  *(unsigned char *)(v17 + 34) = a3;
  if (v16)
  {
    uint64_t v31 = sub_1B62F7C94((char *)(v11 + v15), v16);
    sub_1B62F81D8(v17);
    uint64_t v17 = v31;
    unint64_t v18 = *(void *)(v31 + 16);
  }
  else
  {
    unint64_t v18 = 3;
  }
  uint64_t v19 = (uint64_t)*v5 + 41;
  unint64_t v20 = (char *)(v19 + (*v5)[12]);
  unint64_t v21 = (unint64_t)(*v5)[13] >> 4;
  uint64_t v22 = (char *)(v19 + (*v5)[14]);
  uint64_t v23 = (*v5)[15] / 0x18u;
  int v24 = *((_DWORD *)v5 + 2);
  char v25 = *((unsigned char *)v5 + 12);
  int v26 = v5[4];
  char v27 = v5[2];
  char v28 = *((unsigned char *)v5 + 24);
  uint64_t v29 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(unsigned char *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(unsigned char *)(a4 + 15) = v33;
  *(void *)(a4 + 16) = v27;
  *(unsigned char *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(void *)(a4 + 32) = v26;
  return result;
}

uint64_t sub_1B66647C0@<X0>(char a1@<W0>, char a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v5 = v4;
  uint64_t v10 = *v4;
  uint64_t v11 = (uint64_t)*v4 + 41;
  uint64_t v12 = (*v4)[8];
  unint64_t v13 = v10[9];
  sub_1B636E080();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77D10;
  *(void *)(inited + 32) = &type metadata for CodeGenerationInitialized;
  *(void *)(inited + 40) = &off_1F0F94368;
  *(void *)(inited + 48) = &type metadata for GraphEntityComponentPropertyReferences;
  *(void *)(inited + 56) = &off_1F0F9D9B0;
  *(void *)(inited + 64) = &type metadata for CodeGenerationComponent;
  *(void *)(inited + 72) = &off_1F0F8ECE8;
  if (v13 > 0xF)
  {
    uint64_t v31 = sub_1B62F79D4((char *)(v11 + v12), v13 >> 4);
    sub_1B62F8084(inited);
    uint64_t inited = v31;
  }
  uint64_t v15 = v10[10];
  int64_t v16 = v10[11];
  sub_1B62D8328(0, &qword_1EB980B40, (uint64_t)&type metadata for AccessControl, MEMORY[0x1E4FBBE00]);
  uint64_t v17 = swift_initStackObject();
  *(_OWORD *)(v17 + 16) = xmmword_1B6E77D10;
  *(unsigned char *)(v17 + 32) = a1;
  *(unsigned char *)(v17 + 33) = a2;
  *(unsigned char *)(v17 + 34) = a3;
  if (v16)
  {
    uint64_t v31 = sub_1B62F7C94((char *)(v11 + v15), v16);
    sub_1B62F81D8(v17);
    uint64_t v17 = v31;
    unint64_t v18 = *(void *)(v31 + 16);
  }
  else
  {
    unint64_t v18 = 3;
  }
  uint64_t v19 = (uint64_t)*v5 + 41;
  unint64_t v20 = (char *)(v19 + (*v5)[12]);
  unint64_t v21 = (unint64_t)(*v5)[13] >> 4;
  uint64_t v22 = (char *)(v19 + (*v5)[14]);
  uint64_t v23 = (*v5)[15] / 0x18u;
  int v24 = *((_DWORD *)v5 + 2);
  char v25 = *((unsigned char *)v5 + 12);
  int v26 = v5[4];
  char v27 = v5[2];
  char v28 = *((unsigned char *)v5 + 24);
  uint64_t v29 = sub_1B62C8668((char *)(inited + 32), *(void *)(inited + 16), (char *)(v17 + 32), v18, v20, v21, v22, v23);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a4 = v29;
  *(_DWORD *)(a4 + 8) = v24;
  *(unsigned char *)(a4 + 12) = v25;
  *(_WORD *)(a4 + 13) = v32;
  *(unsigned char *)(a4 + 15) = v33;
  *(void *)(a4 + 16) = v27;
  *(unsigned char *)(a4 + 24) = v28;
  *(_DWORD *)(a4 + 25) = v31;
  *(_DWORD *)(a4 + 28) = *(_DWORD *)((char *)&v31 + 3);
  *(void *)(a4 + 32) = v26;
  return result;
}

uint64_t *sub_1B6664A00(uint64_t a1)
{
  sub_1B6665764(a1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B6A6DFE0, (void (*)(uint64_t *, uint64_t))sub_1B6D9229C, (uint64_t (*)(void))sub_1B63B8DA4, (uint64_t (*)(void))sub_1B63B13F0, (void (*)(_OWORD *))sub_1B63061D4, (void (*)(uint64_t *))sub_1B63061D4, (void (*)(void *, uint64_t))sub_1B6665518);
  sub_1B6665764(a1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B6A6DF6C, (void (*)(uint64_t *, uint64_t))sub_1B6D92E8C, (uint64_t (*)(void))sub_1B63B8CF0, (uint64_t (*)(void))sub_1B63B133C, (void (*)(_OWORD *))sub_1B63061D4, (void (*)(uint64_t *))sub_1B63061D4, (void (*)(void *, uint64_t))sub_1B6665E58);
  return sub_1B6665764(a1, (void (*)(uint64_t *__return_ptr, uint64_t))sub_1B6A6DEF8, (void (*)(uint64_t *, uint64_t))sub_1B6D93B94, (uint64_t (*)(void))sub_1B63B8C3C, (uint64_t (*)(void))sub_1B63B1288, (void (*)(_OWORD *))sub_1B63061D4, (void (*)(uint64_t *))sub_1B63061D4, (void (*)(void *, uint64_t))sub_1B66660CC);
}

uint64_t sub_1B6664BE0()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

void *sub_1B6664C30(void *a1, uint64_t a2)
{
  sub_1B636BBA0(0, (unint64_t *)&unk_1EB97E7F0, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for BasicAnimation);
  uint64_t v3 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  uint64_t v6 = a1[2];
  uint64_t v8 = sub_1B62C9024(v7, (uint64_t)&off_1F0F62C88, v3, v4, v5, v6);
  sub_1B636BBA0(0, &qword_1EB97F598, (uint64_t (*)(void, void, _UNKNOWN **))type metadata accessor for BasicAnimationRuntime);
  uint64_t v10 = sub_1B62C9024(v9, (uint64_t)&off_1F0F84760, v3, v4, v5, v6);
  uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1F0F7C290, v3, v4, v5, v6);
  uint64_t v12 = a1[6];
  uint64_t v13 = a1[7];
  uint64_t result = ecs_stack_allocator_allocate(*(void *)(v6 + 32), 8 * (v13 - v12), 8);
  if (v13 != v12)
  {
    uint64_t v15 = 0;
    int64_t v16 = (unsigned char *)(v11 + 60 * v12 + 57);
    uint64_t v17 = v10 + 32 * v12 + 16;
    uint64_t v18 = v8 + 40 * v12 + 8;
    int v26 = result;
    uint64_t v27 = v13;
    do
    {
      if (*(v16 - 1) == 1)
      {
        uint64_t v20 = *(unsigned int *)(v17 + 8);
        uint64_t v19 = *(unsigned int *)(v17 + 12);
        BOOL v21 = v20 == -1 && v19 == 0;
        if (!v21 && *(void *)(v17 - 8))
        {
          float v22 = *(float *)(v16 - 5);
          uint64_t v23 = *(void *)v17;
          uint64_t ObjectType = swift_getObjectType();
          float v24 = v22 * *(float *)(v17 - 12);
          uint64_t v32 = MEMORY[0x1E4FBB470];
          v31[0] = v24 + *(float *)(v17 - 16);
          uint64_t v29 = *(void (**)(uint64_t, uint64_t, float *, uint64_t, uint64_t))(v23 + 16);
          swift_retain();
          swift_unknownObjectRetain();
          uint64_t v25 = v23;
          uint64_t v13 = v27;
          v29(v20 | (v19 << 32), a2, v31, ObjectType, v25);
          swift_unknownObjectRelease();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v31);
          swift_release();
          uint64_t result = v26;
        }
      }
      if (*v16 == 1) {
        result[v15++] = v12;
      }
      ++v12;
      v16 += 60;
      v17 += 32;
      v18 += 40;
    }
    while (v13 != v12);
  }
  return result;
}

uint64_t *sub_1B6664E84(uint64_t a1)
{
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v117 = qword_1EB997A18;
  int v118 = 0;
  char v119 = 2;
  uint64_t v120 = 0;
  char v121 = 2;
  uint64_t v122 = 0;
  swift_retain();
  sub_1B6A6E054(1, (uint64_t)&v62);
  swift_release();
  uint64_t v111 = v62;
  int v112 = v63;
  char v113 = v64;
  uint64_t v114 = v65 | 4;
  char v115 = 2;
  uint64_t v116 = v66;
  sub_1B62C9DA8(a1, (uint64_t)&v111, 0x200000000, v67);
  sub_1B62D7410((uint64_t)v67, (uint64_t)&v76, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (v76)
  {
    uint64_t v100 = v76;
    int v101 = v77;
    char v102 = v78;
    uint64_t v103 = v79;
    char v104 = v80;
    uint64_t v105 = v81;
    uint64_t v106 = v82;
    long long v107 = v83;
    long long v108 = v84;
    uint64_t v109 = v85;
    uint64_t v110 = v86;
    swift_retain();
    sub_1B6D916D0((uint64_t)&v100, a1);
    swift_release();
    sub_1B632F170(v67);
  }
  uint64_t v94 = qword_1EB997A18;
  int v95 = 0;
  char v96 = 2;
  uint64_t v97 = 0;
  char v98 = 2;
  uint64_t v99 = 0;
  swift_retain();
  sub_1B636B668(1, 1, 1, (uint64_t)v68);
  swift_release();
  v87[0] = v68[0];
  v87[1] = v68[1];
  uint64_t v88 = v69;
  uint64_t v49 = a1;
  sub_1B62C9DA8(a1, (uint64_t)v87, 0x200000000, v70);
  sub_1B62D7410((uint64_t)v70, (uint64_t)v71, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (v71[0])
  {
    uint64_t v48 = v75;
    if (v75 > 0)
    {
      uint64_t v47 = v72;
      if (v72)
      {
        uint64_t v46 = v71[5];
        uint64_t v2 = v74;
        uint64_t v59 = v74[4];
        int v58 = *(unsigned __int8 *)(v73 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        int v44 = v74 + 8;
        uint64_t v45 = v73;
        uint64_t v60 = v71[0] + 41;
        unint64_t v61 = (unsigned __int16 *)v71[0];
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v3 = 0;
        while (1)
        {
          uint64_t v57 = v3;
          uint64_t v4 = (unsigned int *)(v46 + 48 * v3);
          uint64_t v5 = *v4;
          uint64_t v6 = v4[1];
          uint64_t v7 = v4[2];
          uint64_t v8 = *((void *)v4 + 3);
          uint64_t v53 = *((void *)v4 + 2);
          uint64_t v9 = *((void *)v4 + 4);
          uint64_t v10 = *((void *)v4 + 5);
          if (v58)
          {
            uint64_t v11 = *(os_unfair_lock_s **)(v10 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v11);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v59);
          uint64_t v51 = v2[7];
          uint64_t v52 = v2[6];
          uint64_t v50 = v2[8];
          uint64_t v54 = v2[10];
          uint64_t v55 = v2[9];
          uint64_t v12 = v2[4];
          uint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)(v10 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v2[6] = ecs_stack_allocator_allocate(v12, 48 * v13, 8);
          v2[7] = v13;
          v44[1] = 0;
          void v44[2] = 0;
          *int v44 = 0;
          swift_release();
          v89[0] = v45;
          uint64_t v56 = v10;
          v89[1] = v10;
          v89[2] = v2;
          void v89[3] = v7;
          v89[4] = (v6 - v5 + v7);
          v89[5] = v48;
          v89[6] = v5;
          v89[7] = v6;
          v89[8] = 0;
          v89[9] = 0;
          char v90 = 1;
          uint64_t v91 = v53;
          uint64_t v92 = v8;
          uint64_t v93 = v9;
          sub_1B6664C30(v89, v49);
          unint64_t v14 = v2[6];
          uint64_t v15 = v2[8];
          if (!v15)
          {
            uint64_t v41 = v2[7];
            uint64_t v42 = (void *)v2[4];
            goto LABEL_50;
          }
          for (uint64_t i = 0; i != v15; ++i)
          {
            uint64_t v18 = (uint64_t *)(v14 + 48 * i);
            uint64_t v19 = *v18;
            uint64_t v20 = (void (*)(uint64_t))v18[4];
            uint64_t v21 = v2[9];
            if (v21) {
              BOOL v22 = v19 == v21;
            }
            else {
              BOOL v22 = 0;
            }
            if (v22 || !v61[11]) {
              goto LABEL_15;
            }
            unint64_t v23 = v61[9];
            float v24 = (void *)(v60 + v61[8]);
            uint64_t v25 = v18[2];
            int v26 = v24;
            unint64_t v27 = v23 >> 4;
            uint64_t v28 = v60;
            if (v23 >= 0x10)
            {
              while (*v26 != v19)
              {
                ++v28;
                v26 += 2;
                if (!--v27) {
                  goto LABEL_30;
                }
              }
              unsigned int v29 = *(unsigned __int8 *)(v28 + v61[10]);
              BOOL v30 = v29 > 5;
              int v31 = (1 << v29) & 0x23;
              if (v30 || v31 == 0)
              {
LABEL_15:
                uint64_t v17 = swift_retain();
                v20(v17);
                swift_release();
                continue;
              }
            }
LABEL_30:
            if (swift_conformsToProtocol2()) {
              uint64_t v33 = v25;
            }
            else {
              uint64_t v33 = 0;
            }
            if (v33)
            {
              if (v23 < 0x10) {
                goto LABEL_15;
              }
              uint64_t v34 = v24;
              unint64_t v35 = v23 >> 4;
              uint64_t v36 = v60;
              while (*v34 != v33)
              {
                ++v36;
                v34 += 2;
                if (!--v35) {
                  goto LABEL_43;
                }
              }
              unsigned int v37 = *(unsigned __int8 *)(v36 + v61[10]);
              BOOL v30 = v37 > 5;
              int v38 = (1 << v37) & 0x23;
              if (v30 || v38 == 0) {
                goto LABEL_15;
              }
LABEL_43:
              uint64_t v40 = 16 * (v23 >> 4);
              while (*v24 != v33)
              {
                v24 += 2;
                v40 -= 16;
                if (!v40) {
                  goto LABEL_15;
                }
              }
            }
          }
          uint64_t v41 = v2[7];
          unint64_t v14 = v2[6];
          uint64_t v42 = (void *)v2[4];
          if ((uint64_t)v2[8] >= 1) {
            swift_arrayDestroy();
          }
LABEL_50:
          ecs_stack_allocator_deallocate(v42, v14, 48 * v41);
          v2[6] = v52;
          v2[7] = v51;
          v2[8] = v50;
          v2[9] = v55;
          v2[10] = v54;
          sub_1B634507C((char *)v56);
          ecs_stack_allocator_pop_snapshot(v59);
          if (v58)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v56 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v56 + 376));
          }
          swift_release();
          uint64_t v3 = v57 + 1;
          if (v57 + 1 == v47) {
            goto LABEL_53;
          }
        }
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_53:
    sub_1B62CA064((uint64_t)v68);
    sub_1B62CA064((uint64_t)&v62);
    sub_1B632F170(v70);
    return sub_1B632F170(v70);
  }
  else
  {
    sub_1B62CA064((uint64_t)v68);
    return (uint64_t *)sub_1B62CA064((uint64_t)&v62);
  }
}

void *sub_1B6665518(void *a1, uint64_t a2)
{
  sub_1B63B8DA4();
  uint64_t v3 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  uint64_t v6 = a1[2];
  uint64_t v8 = sub_1B62C9024(v7, (uint64_t)&off_1F0F62C88, v3, v4, v5, v6);
  sub_1B63B13F0();
  uint64_t v10 = sub_1B62C9024(v9, (uint64_t)&off_1F0F84760, v3, v4, v5, v6);
  uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1F0F7C290, v3, v4, v5, v6);
  uint64_t v13 = a1[6];
  uint64_t v12 = a1[7];
  uint64_t result = ecs_stack_allocator_allocate(*(void *)(v6 + 32), 8 * (v12 - v13), 8);
  uint64_t v31 = v12;
  if (v12 != v13)
  {
    uint64_t v15 = 0;
    uint64_t v16 = v8;
    uint64_t v17 = (unsigned char *)(v11 + 60 * v13 + 57);
    uint64_t v18 = v10 + 40 * v13 + 24;
    uint64_t v19 = v16 + 56 * v13 + 8;
    int v26 = result;
    do
    {
      if (*(v17 - 1) == 1)
      {
        uint64_t v21 = *(unsigned int *)(v18 + 8);
        uint64_t v20 = *(unsigned int *)(v18 + 12);
        BOOL v22 = v21 == -1 && v20 == 0;
        if (!v22 && *(void *)(v18 - 8))
        {
          float v28 = *(float *)(v17 - 5);
          uint64_t v23 = *(void *)v18;
          uint64_t ObjectType = swift_getObjectType();
          float32x2_t v24 = vmul_n_f32(*(float32x2_t *)(v18 - 16), v28);
          sub_1B63958F8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
          v32[3] = v25;
          v32[0] = vadd_f32(v24, *(float32x2_t *)(v18 - 24));
          unsigned int v29 = *(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v23 + 16);
          swift_retain();
          swift_unknownObjectRetain();
          v29(v21 | (v20 << 32), a2, v32, ObjectType, v23);
          swift_unknownObjectRelease();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v32);
          swift_release();
          uint64_t result = v26;
        }
      }
      if (*v17 == 1) {
        result[v15++] = v13;
      }
      ++v13;
      v17 += 60;
      v18 += 40;
      v19 += 56;
    }
    while (v31 != v13);
  }
  return result;
}

uint64_t *sub_1B6665764(uint64_t a1, void (*a2)(uint64_t *__return_ptr, uint64_t), void (*a3)(uint64_t *, uint64_t), uint64_t (*a4)(void), uint64_t (*a5)(void), void (*a6)(_OWORD *), void (*a7)(uint64_t *), void (*a8)(void *, uint64_t))
{
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v132 = qword_1EB997A18;
  int v133 = 0;
  char v134 = 2;
  uint64_t v135 = 0;
  char v136 = 2;
  uint64_t v137 = 0;
  swift_retain();
  a2(&v77, 1);
  swift_release();
  uint64_t v126 = v77;
  int v127 = v78;
  char v128 = v79;
  uint64_t v129 = v80 | 4;
  char v130 = 2;
  uint64_t v131 = v81;
  sub_1B62C9DA8(a1, (uint64_t)&v126, 0x200000000, v82);
  sub_1B62D7410((uint64_t)v82, (uint64_t)&v91, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (v91)
  {
    uint64_t v115 = v91;
    int v116 = v92;
    char v117 = v93;
    uint64_t v118 = v94;
    char v119 = v95;
    uint64_t v120 = v96;
    uint64_t v121 = v97;
    long long v122 = v98;
    long long v123 = v99;
    uint64_t v124 = v100;
    uint64_t v125 = v101;
    swift_retain();
    a3(&v115, a1);
    swift_release();
    sub_1B632F170(v82);
  }
  uint64_t v109 = qword_1EB997A18;
  int v110 = 0;
  char v111 = 2;
  uint64_t v112 = 0;
  char v113 = 2;
  uint64_t v114 = 0;
  swift_retain();
  sub_1B62A411C(1, 1, 1, a4, a5, (uint64_t)v83);
  swift_release();
  v102[0] = v83[0];
  v102[1] = v83[1];
  uint64_t v103 = v84;
  sub_1B62C9DA8(a1, (uint64_t)v102, 0x200000000, v85);
  sub_1B62D7410((uint64_t)v85, (uint64_t)v86, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (v86[0])
  {
    uint64_t v63 = v90;
    if (v90 > 0)
    {
      uint64_t v62 = v87;
      if (v87)
      {
        uint64_t v60 = v86[5];
        uint64_t v61 = a1;
        uint64_t v13 = v89;
        uint64_t v73 = v89[4];
        int v72 = *(unsigned __int8 *)(v88 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        int v58 = v89 + 8;
        uint64_t v59 = v88;
        uint64_t v75 = v86[0] + 41;
        uint64_t v76 = (unsigned __int16 *)v86[0];
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v14 = 0;
        while (1)
        {
          uint64_t v71 = v14;
          uint64_t v15 = (unsigned int *)(v60 + 48 * v14);
          uint64_t v16 = *v15;
          uint64_t v17 = v15[1];
          uint64_t v18 = v15[2];
          uint64_t v19 = *((void *)v15 + 3);
          uint64_t v69 = *((void *)v15 + 2);
          uint64_t v21 = *((void *)v15 + 4);
          uint64_t v20 = *((void *)v15 + 5);
          uint64_t v74 = v20;
          if (v72)
          {
            BOOL v22 = *(os_unfair_lock_s **)(v20 + 376);
            swift_retain_n();
            uint64_t v23 = v22;
            uint64_t v20 = v74;
            os_unfair_lock_lock(v23);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v74 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v73);
          uint64_t v67 = v13[7];
          uint64_t v68 = v13[6];
          uint64_t v65 = v13[9];
          uint64_t v66 = v13[8];
          uint64_t v70 = v13[10];
          uint64_t v24 = v13[4];
          uint64_t v25 = *(void *)(*(void *)(*(void *)(*(void *)(v20 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v13[6] = ecs_stack_allocator_allocate(v24, 48 * v25, 8);
          v13[7] = v25;
          v58[1] = 0;
          void v58[2] = 0;
          void *v58 = 0;
          swift_release();
          v104[0] = v59;
          v104[1] = v20;
          v104[2] = v13;
          v104[3] = v18;
          v104[4] = (v17 - v16 + v18);
          v104[5] = v63;
          v104[6] = v16;
          v104[7] = v17;
          v104[8] = 0;
          v104[9] = 0;
          char v105 = 1;
          uint64_t v106 = v69;
          uint64_t v107 = v19;
          uint64_t v108 = v21;
          a8(v104, v61);
          unint64_t v26 = v13[6];
          uint64_t v27 = v13[8];
          if (!v27)
          {
            uint64_t v53 = v13[7];
            uint64_t v54 = (void *)v13[4];
            goto LABEL_50;
          }
          for (uint64_t i = 0; i != v27; ++i)
          {
            BOOL v30 = (uint64_t *)(v26 + 48 * i);
            uint64_t v31 = *v30;
            uint64_t v32 = (void (*)(uint64_t))v30[4];
            uint64_t v33 = v13[9];
            if (v33) {
              BOOL v34 = v31 == v33;
            }
            else {
              BOOL v34 = 0;
            }
            if (v34 || !v76[11]) {
              goto LABEL_15;
            }
            unint64_t v35 = v76[9];
            uint64_t v36 = (void *)(v75 + v76[8]);
            uint64_t v37 = v30[2];
            int v38 = v36;
            unint64_t v39 = v35 >> 4;
            uint64_t v40 = v75;
            if (v35 >= 0x10)
            {
              while (*v38 != v31)
              {
                ++v40;
                v38 += 2;
                if (!--v39) {
                  goto LABEL_30;
                }
              }
              unsigned int v41 = *(unsigned __int8 *)(v40 + v76[10]);
              BOOL v42 = v41 > 5;
              int v43 = (1 << v41) & 0x23;
              if (v42 || v43 == 0)
              {
LABEL_15:
                uint64_t v29 = swift_retain();
                v32(v29);
                swift_release();
                continue;
              }
            }
LABEL_30:
            if (swift_conformsToProtocol2()) {
              uint64_t v45 = v37;
            }
            else {
              uint64_t v45 = 0;
            }
            if (v45)
            {
              if (v35 < 0x10) {
                goto LABEL_15;
              }
              uint64_t v46 = v36;
              unint64_t v47 = v35 >> 4;
              uint64_t v48 = v75;
              while (*v46 != v45)
              {
                ++v48;
                v46 += 2;
                if (!--v47) {
                  goto LABEL_43;
                }
              }
              unsigned int v49 = *(unsigned __int8 *)(v48 + v76[10]);
              BOOL v42 = v49 > 5;
              int v50 = (1 << v49) & 0x23;
              if (v42 || v50 == 0) {
                goto LABEL_15;
              }
LABEL_43:
              uint64_t v52 = 16 * (v35 >> 4);
              while (*v36 != v45)
              {
                v36 += 2;
                v52 -= 16;
                if (!v52) {
                  goto LABEL_15;
                }
              }
            }
          }
          uint64_t v53 = v13[7];
          unint64_t v26 = v13[6];
          uint64_t v54 = (void *)v13[4];
          if ((uint64_t)v13[8] >= 1) {
            swift_arrayDestroy();
          }
LABEL_50:
          ecs_stack_allocator_deallocate(v54, v26, 48 * v53);
          v13[6] = v68;
          v13[7] = v67;
          v13[8] = v66;
          v13[9] = v65;
          v13[10] = v70;
          sub_1B634507C((char *)v74);
          ecs_stack_allocator_pop_snapshot(v73);
          if (v72)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v74 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v74 + 376));
          }
          swift_release();
          uint64_t v14 = v71 + 1;
          if (v71 + 1 == v62) {
            goto LABEL_53;
          }
        }
      }
    }
    swift_retain();
    swift_retain();
    swift_retain();
LABEL_53:
    a6(v83);
    a7(&v77);
    sub_1B632F170(v85);
    return sub_1B632F170(v85);
  }
  else
  {
    a6(v83);
    return (uint64_t *)((uint64_t (*)(uint64_t *))a7)(&v77);
  }
}

void *sub_1B6665E58(void *a1, uint64_t a2)
{
  sub_1B63B8CF0();
  uint64_t v3 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  uint64_t v6 = a1[2];
  uint64_t v8 = sub_1B62C9024(v7, (uint64_t)&off_1F0F62C88, v3, v4, v5, v6);
  sub_1B63B133C();
  uint64_t v10 = sub_1B62C9024(v9, (uint64_t)&off_1F0F84760, v3, v4, v5, v6);
  uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1F0F7C290, v3, v4, v5, v6);
  uint64_t v13 = a1[6];
  uint64_t v12 = a1[7];
  uint64_t result = ecs_stack_allocator_allocate(*(void *)(v6 + 32), 8 * (v12 - v13), 8);
  uint64_t v32 = v12;
  if (v12 != v13)
  {
    uint64_t v15 = v8;
    uint64_t v16 = 0;
    uint64_t v17 = (float32x4_t *)(v10 + (v13 << 6));
    uint64_t v18 = (unsigned char *)(v11 + 60 * v13 + 57);
    uint64_t v19 = v15 + 96 * v13 + 8;
    unint64_t v26 = result;
    do
    {
      if (*(v18 - 1) == 1)
      {
        uint64_t v21 = v17[3].u32[0];
        uint64_t v20 = v17[3].u32[1];
        BOOL v22 = v21 == -1 && v20 == 0;
        if (!v22 && v17[2].i64[0])
        {
          float v28 = *(float *)(v18 - 5);
          uint64_t v23 = v17[2].i64[1];
          uint64_t ObjectType = swift_getObjectType();
          float32x4_t v29 = vmulq_n_f32(v17[1], v28);
          sub_1B63958F8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
          v33[3] = v24;
          v33[0] = swift_allocObject();
          float32x4_t v25 = vaddq_f32(v29, *v17);
          v25.i32[3] = v31;
          *(float32x4_t *)(v33[0] + 16) = v25;
          v29.i64[0] = *(void *)(v23 + 16);
          swift_retain();
          swift_unknownObjectRetain();
          ((void (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t))v29.i64[0])(v21 | (v20 << 32), a2, v33, ObjectType, v23);
          swift_unknownObjectRelease();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v33);
          swift_release();
          uint64_t result = v26;
        }
      }
      if (*v18 == 1) {
        result[v16++] = v13;
      }
      ++v13;
      v17 += 4;
      v18 += 60;
      v19 += 96;
    }
    while (v32 != v13);
  }
  return result;
}

void *sub_1B66660CC(void *a1, uint64_t a2)
{
  sub_1B63B8C3C();
  uint64_t v3 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  uint64_t v6 = a1[2];
  uint64_t v8 = sub_1B62C9024(v7, (uint64_t)&off_1F0F62C88, v3, v4, v5, v6);
  sub_1B63B1288();
  uint64_t v10 = sub_1B62C9024(v9, (uint64_t)&off_1F0F84760, v3, v4, v5, v6);
  uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1F0F7C290, v3, v4, v5, v6);
  uint64_t v13 = a1[6];
  uint64_t v12 = a1[7];
  uint64_t result = ecs_stack_allocator_allocate(*(void *)(v6 + 32), 8 * (v12 - v13), 8);
  uint64_t v31 = v12;
  if (v12 != v13)
  {
    uint64_t v15 = v8;
    uint64_t v16 = 0;
    uint64_t v17 = v10;
    uint64_t v18 = (unsigned char *)(v11 + 60 * v13 + 57);
    uint64_t v19 = (unsigned int *)(v17 + (v13 << 6) + 52);
    uint64_t v20 = v15 + 96 * v13 + 8;
    unint64_t v26 = result;
    do
    {
      if (*(v18 - 1) == 1)
      {
        uint64_t v22 = *(v19 - 1);
        uint64_t v21 = *v19;
        BOOL v23 = v22 == -1 && v21 == 0;
        if (!v23 && *(void *)(v19 - 5))
        {
          float v28 = *(float *)(v18 - 5);
          uint64_t v24 = *(void *)(v19 - 3);
          uint64_t ObjectType = swift_getObjectType();
          float32x4_t v29 = vmulq_n_f32(*(float32x4_t *)(v19 - 9), v28);
          sub_1B63958F8(0, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8]);
          v32[3] = v25;
          v32[0] = swift_allocObject();
          *(float32x4_t *)(v32[0] + 16) = vaddq_f32(v29, *(float32x4_t *)(v19 - 13));
          v29.i64[0] = *(void *)(v24 + 16);
          swift_retain();
          swift_unknownObjectRetain();
          ((void (*)(uint64_t, uint64_t, void *, uint64_t, uint64_t))v29.i64[0])(v22 | (v21 << 32), a2, v32, ObjectType, v24);
          swift_unknownObjectRelease();
          _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v32);
          swift_release();
          uint64_t result = v26;
        }
      }
      if (*v18 == 1) {
        result[v16++] = v13;
      }
      ++v13;
      v18 += 60;
      v19 += 16;
      v20 += 96;
    }
    while (v31 != v13);
  }
  return result;
}

uint64_t sub_1B6666330()
{
  return MEMORY[0x1F4186498](v0, 32, 15);
}

uint64_t sub_1B6666340(unint64_t *a1, unint64_t *a2, uint64_t (*a3)(uint64_t, void, unint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B63958F8(255, a2, a3);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void *sub_1B6666384(void *a1, uint64_t a2)
{
  sub_1B63B6730();
  uint64_t v3 = (uint64_t *)a1[11];
  uint64_t v4 = a1[12];
  uint64_t v5 = a1[13];
  uint64_t v6 = a1[2];
  uint64_t v8 = sub_1B62C9024(v7, (uint64_t)&off_1F0F719D8, v3, v4, v5, v6);
  sub_1B6666A24();
  uint64_t v10 = sub_1B62C9024(v9, (uint64_t)&off_1F0F920F8, v3, v4, v5, v6);
  uint64_t v11 = sub_1B62C9024((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1F0F7C290, v3, v4, v5, v6);
  uint64_t v13 = a1[6];
  uint64_t v12 = a1[7];
  uint64_t result = ecs_stack_allocator_allocate(*(void *)(v6 + 32), 8 * (v12 - v13), 8);
  if (v12 != v13)
  {
    uint64_t v15 = 0;
    uint64_t v16 = (unsigned char *)(v11 + 60 * v13 + 57);
    uint64_t v17 = v10 + 48 * v13 + 24;
    uint64_t v18 = v8 + 152 * v13;
    uint64_t v33 = result;
    uint64_t v34 = v12;
    do
    {
      if (*(v16 - 1) == 1)
      {
        long long v19 = *(_OWORD *)(v18 + 16);
        v39[0] = *(_OWORD *)v18;
        v39[1] = v19;
        long long v20 = *(_OWORD *)(v18 + 32);
        long long v21 = *(_OWORD *)(v18 + 48);
        long long v22 = *(_OWORD *)(v18 + 80);
        float32x4_t v39[4] = *(_OWORD *)(v18 + 64);
        v39[5] = v22;
        uint64_t v39[2] = v20;
        v39[3] = v21;
        long long v23 = *(_OWORD *)(v18 + 96);
        long long v24 = *(_OWORD *)(v18 + 112);
        long long v25 = *(_OWORD *)(v18 + 128);
        char v40 = *(unsigned char *)(v18 + 144);
        v39[7] = v24;
        v39[8] = v25;
        v39[6] = v23;
        if (*(void *)(v17 - 24))
        {
          float v26 = *(float *)(v16 - 5);
          uint64_t v28 = *(unsigned int *)(v17 + 16);
          uint64_t v27 = *(unsigned int *)(v17 + 20);
          if (__PAIR64__(v27, v28) != 0xFFFFFFFF)
          {
            swift_retain();
            sub_1B636BFA4((uint64_t)v39);
            sub_1B636BC58((uint64_t *)(v17 - 16), (void *)(v17 - 8), v26);
            if (*(void *)v17)
            {
              uint64_t v37 = v15;
              uint64_t v29 = *(void *)(v17 + 8);
              uint64_t ObjectType = swift_getObjectType();
              sub_1B63958F8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
              v38[3] = v30;
              v38[0] = *(void *)(v17 - 8);
              unint64_t v35 = *(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v29 + 16);
              swift_unknownObjectRetain();
              uint64_t v31 = v29;
              uint64_t v15 = v37;
              v35(v28 | (v27 << 32), a2, v38, ObjectType, v31);
              swift_release();
              swift_unknownObjectRelease();
              _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v38);
            }
            else
            {
              swift_release();
            }
            sub_1B636BEC8((uint64_t)v39);
            uint64_t result = v33;
            uint64_t v12 = v34;
          }
        }
      }
      if (*v16 == 1) {
        result[v15++] = v13;
      }
      ++v13;
      v16 += 60;
      v17 += 48;
      v18 += 152;
    }
    while (v12 != v13);
  }
  return result;
}

void *sub_1B6666618(void *a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), unint64_t *a5, uint64_t (*a6)(uint64_t, void, unint64_t))
{
  uint64_t v8 = a3(0);
  uint64_t v9 = (uint64_t *)a1[11];
  uint64_t v10 = a1[12];
  uint64_t v11 = a1[13];
  uint64_t v12 = a1[2];
  uint64_t v13 = sub_1B62C9024(v8, (uint64_t)&off_1F0F719D8, v9, v10, v11, v12);
  uint64_t v14 = a4(0);
  uint64_t v15 = sub_1B62C9024(v14, (uint64_t)&off_1F0F920F8, v9, v10, v11, v12);
  uint64_t v16 = sub_1B62C9024((uint64_t)&type metadata for AnimationTimeSource, (uint64_t)&off_1F0F7C290, v9, v10, v11, v12);
  uint64_t v18 = a1[6];
  uint64_t v17 = a1[7];
  uint64_t result = ecs_stack_allocator_allocate(*(void *)(v12 + 32), 8 * (v17 - v18), 8);
  if (v17 != v18)
  {
    uint64_t v20 = v13;
    uint64_t v21 = 0;
    long long v22 = (unsigned char *)(v16 + 60 * v18 + 57);
    long long v23 = (unsigned int *)(v15 + (v18 << 6) + 52);
    uint64_t v24 = v20 + 152 * v18;
    unsigned int v41 = result;
    uint64_t v42 = v17;
    do
    {
      if (*(v22 - 1) == 1)
      {
        long long v25 = *(_OWORD *)(v24 + 16);
        v47[0] = *(_OWORD *)v24;
        v47[1] = v25;
        long long v26 = *(_OWORD *)(v24 + 32);
        long long v27 = *(_OWORD *)(v24 + 48);
        long long v28 = *(_OWORD *)(v24 + 80);
        float32x4_t v47[4] = *(_OWORD *)(v24 + 64);
        v47[5] = v28;
        v47[2] = v26;
        v47[3] = v27;
        long long v29 = *(_OWORD *)(v24 + 96);
        long long v30 = *(_OWORD *)(v24 + 112);
        long long v31 = *(_OWORD *)(v24 + 128);
        char v48 = *(unsigned char *)(v24 + 144);
        v47[7] = v30;
        v47[8] = v31;
        v47[6] = v29;
        if (*(void *)(v23 - 13))
        {
          float v32 = *(float *)(v22 - 5);
          uint64_t v33 = *(v23 - 1);
          uint64_t v34 = *v23;
          if (__PAIR64__(v34, v33) != 0xFFFFFFFF)
          {
            swift_retain();
            sub_1B636BFA4((uint64_t)v47);
            sub_1B636BC58((uint64_t *)(v23 - 11), v23 - 9, v32);
            if (*(void *)(v23 - 5))
            {
              uint64_t v45 = v21;
              uint64_t v35 = *(void *)(v23 - 3);
              uint64_t ObjectType = swift_getObjectType();
              sub_1B63958F8(0, a5, a6);
              void v46[3] = v36;
              v46[0] = swift_allocObject();
              *(_OWORD *)(v46[0] + 16) = *(_OWORD *)(v23 - 9);
              int v43 = *(void (**)(uint64_t, uint64_t, void *, uint64_t, uint64_t))(v35 + 16);
              swift_unknownObjectRetain();
              uint64_t v37 = v35;
              uint64_t v21 = v45;
              v43(v33 | (v34 << 32), a2, v46, ObjectType, v37);
              swift_release();
              swift_unknownObjectRelease();
              _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v46);
            }
            else
            {
              swift_release();
            }
            sub_1B636BEC8((uint64_t)v47);
            uint64_t result = v41;
            uint64_t v17 = v42;
          }
        }
      }
      if (*v22 == 1) {
        result[v21++] = v18;
      }
      ++v18;
      v22 += 60;
      v23 += 16;
      v24 += 152;
    }
    while (v17 != v18);
  }
  return result;
}

void sub_1B66668BC()
{
  if (!qword_1E9DCDCE0[0])
  {
    uint64_t v0 = (uint64_t (*)(uint64_t, void, unint64_t))MEMORY[0x1E4FBC2F8];
    sub_1B63958F8(255, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8]);
    sub_1B6666340((unint64_t *)&unk_1EB980EE0, (unint64_t *)&qword_1EB980EF0, v0);
    unint64_t v1 = type metadata accessor for KeyframeAnimationRuntime();
    if (!v2) {
      atomic_store(v1, qword_1E9DCDCE0);
    }
  }
}

void sub_1B6666970()
{
  if (!qword_1E9DDA430)
  {
    uint64_t v0 = (uint64_t (*)(uint64_t, void, unint64_t))MEMORY[0x1E4FBC2A8];
    sub_1B63958F8(255, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
    sub_1B6666340(&qword_1EB980EA8, (unint64_t *)&qword_1EB980EB0, v0);
    unint64_t v1 = type metadata accessor for KeyframeAnimationRuntime();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_1E9DDA430);
    }
  }
}

void sub_1B6666A24()
{
  if (!qword_1E9DDA440)
  {
    uint64_t v0 = (uint64_t (*)(uint64_t, void, unint64_t))MEMORY[0x1E4FBC280];
    sub_1B63958F8(255, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
    sub_1B6666340((unint64_t *)&unk_1EB980E80, &qword_1EB980E90, v0);
    unint64_t v1 = type metadata accessor for KeyframeAnimationRuntime();
    if (!v2) {
      atomic_store(v1, (unint64_t *)&qword_1E9DDA440);
    }
  }
}

void sub_1B6666AD8(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3(255);
    unint64_t v10 = a5(a1, v9, a4);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

__n128 initializeWithCopy for _ClassContextDescriptor(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 28) = *(_OWORD *)(a2 + 28);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  return result;
}

uint64_t getEnumTagSinglePayload for _ClassContextDescriptor(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 44)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for _ClassContextDescriptor(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 40) = 0;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 44) = v3;
  return result;
}

ValueMetadata *type metadata accessor for _ClassContextDescriptor()
{
  return &type metadata for _ClassContextDescriptor;
}

ValueMetadata *type metadata accessor for _StructContextDescriptor()
{
  return &type metadata for _StructContextDescriptor;
}

uint64_t type metadata accessor for ContextDescriptor()
{
  return sub_1B62C36EC();
}

uint64_t sub_1B6666BE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  LODWORD(a3) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 16))(a2, a3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  return (int)a3;
}

uint64_t sub_1B6666CE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  LODWORD(a3) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  return (int)a3;
}

uint64_t sub_1B6666DD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a1);
  uint64_t v7 = (char *)&v9 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  (*(void (**)(char *))(v5 + 16))(v7);
  LODWORD(a3) = (*(uint64_t (**)(uint64_t, uint64_t))(a3 + 40))(a2, a3);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, a2);
  return (int)a3;
}

uint64_t sub_1B6666ED0(uint64_t a1)
{
  return sub_1B6666BE8(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_1B6666EE0(uint64_t a1)
{
  return sub_1B6666CE0(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_1B6666EF0(uint64_t a1)
{
  return sub_1B6666DD8(*v1, *(void *)(a1 + 16), *(void *)(a1 + 24));
}

uint64_t sub_1B6666F00()
{
  return *(void *)v0;
}

BOOL sub_1B6666F08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return sub_1B6B03680(a1, a2, a3, WitnessTable);
}

uint64_t sub_1B6666F74(uint64_t a1)
{
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B6666FB0()
{
  return *(unsigned int *)(v0 + 20);
}

uint64_t sub_1B6666FB8()
{
  return *(unsigned int *)(v0 + 24);
}

uint64_t sub_1B6666FC0()
{
  return *(unsigned int *)(v0 + 16);
}

uint64_t sub_1B6666FC8()
{
  return *(unsigned int *)(v0 + 36);
}

uint64_t sub_1B6666FD0()
{
  return *(unsigned int *)(v0 + 40);
}

uint64_t sub_1B6666FD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F41863F8](a1, a2, a3, 16);
}

uint64_t type metadata accessor for WeakReference()
{
  return sub_1B62C36EC();
}

uint64_t sub_1B6667000(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    sub_1B6E32A48();
    unint64_t v4 = sub_1B6860A50(a1);
    uint64_t v5 = 0;
    uint64_t v6 = a1 + 64;
    while (1)
    {
      swift_retain();
      sub_1B6E32A08();
      sub_1B6E32A68();
      sub_1B6E32A78();
      sub_1B6E32A28();
      unint64_t v7 = v4 >> 6;
      if ((*(void *)(v6 + 8 * (v4 >> 6)) & (-2 << v4)) != 0)
      {
        unint64_t v4 = __clz(__rbit64(*(void *)(v6 + 8 * (v4 >> 6)) & (-2 << v4))) | v4 & 0xFFFFFFFFFFFFFFC0;
      }
      else
      {
        unint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
        unint64_t v8 = v7 + 1;
        unint64_t v9 = (v4 + 63) >> 6;
        if (v7 + 1 < v9)
        {
          unint64_t v10 = *(void *)(v6 + 8 * v8);
          if (!v10)
          {
            unint64_t v8 = v7 + 2;
            if (v7 + 2 >= v9) {
              goto LABEL_4;
            }
            unint64_t v10 = *(void *)(v6 + 8 * v8);
            if (!v10)
            {
              while (v9 - 3 != v7)
              {
                unint64_t v10 = *(void *)(a1 + 88 + 8 * v7++);
                if (v10)
                {
                  unint64_t v8 = v7 + 2;
                  goto LABEL_8;
                }
              }
              goto LABEL_4;
            }
          }
LABEL_8:
          unint64_t v4 = __clz(__rbit64(v10)) + (v8 << 6);
        }
      }
LABEL_4:
      if (++v5 == v2) {
        return v11;
      }
    }
  }
  return result;
}

void *sub_1B666717C(uint64_t a1, uint64_t a2)
{
  v2[2] = 0;
  v2[3] = 0;
  uint64_t v5 = MEMORY[0x1E4FBC860];
  v2[4] = &unk_1F0F87930;
  void v2[5] = v5;
  v2[6] = sub_1B67DDF84(v5);
  v2[7] = 0;
  v2[2] = a1;
  v2[3] = a2;
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1B66671D8(void *a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t *a6, unsigned char *a7, uint64_t *a8)
{
  uint64_t v9 = v8;
  int v92 = a7;
  char v93 = a8;
  uint64_t v91 = a6;
  uint64_t v104 = sub_1B6E30AB8();
  uint64_t v15 = *(void *)(v104 - 8);
  double v17 = MEMORY[0x1F4188790](v104, v16);
  long long v98 = (char *)v86 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v19 = MEMORY[0x1BA9B34C0](*a1, a1[1], a1[2], a1[3], v17);
  unint64_t v21 = v20;
  uint64_t v102 = v19;
  unint64_t v103 = v20;
  uint64_t v94 = a2;
  unint64_t v95 = a3;
  uint64_t v100 = a2;
  unint64_t v101 = a3;
  sub_1B666BDC4();
  sub_1B666BE18();
  swift_bridgeObjectRetain();
  if ((sub_1B6E31618() & 1) == 0)
  {
    uint64_t v102 = v19;
    unint64_t v103 = v21;
    uint64_t v100 = 12079;
    unint64_t v101 = 0xE200000000000000;
    if (sub_1B6E31618()) {
      return swift_bridgeObjectRelease_n();
    }
  }
  uint64_t v89 = v15;
  uint64_t v102 = v19;
  unint64_t v103 = v21;
  uint64_t v100 = v94;
  unint64_t v101 = v95;
  if ((sub_1B6E31618() & 1) == 0)
  {
    uint64_t v47 = v91[1];
    if (v47)
    {
      uint64_t v90 = v8;
      uint64_t v48 = *v91;
      uint64_t v102 = v19;
      unint64_t v103 = v21;
      uint64_t v100 = 8995;
      unint64_t v101 = 0xE200000000000000;
      sub_1B633AF88();
      swift_bridgeObjectRetain();
      *int v92 = (*v92 | sub_1B6E32678()) & 1;
      uint64_t v102 = v19;
      unint64_t v103 = v21;
      uint64_t v100 = 8995;
      unint64_t v101 = 0xE200000000000000;
      strcpy((char *)v99, "_%SCRIPT_ID%");
      BYTE5(v99[1]) = 0;
      HIWORD(v99[1]) = -5120;
      uint64_t v49 = sub_1B6E32618();
      unint64_t v51 = v50;
      swift_bridgeObjectRelease();
      uint64_t v102 = v49;
      unint64_t v103 = v51;
      sub_1B6E31948();
      swift_bridgeObjectRetain();
      uint64_t v52 = v93;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v100 = *v52;
      uint64_t v54 = v100;
      *uint64_t v52 = 0x8000000000000000;
      swift_bridgeObjectRetain();
      unint64_t v56 = sub_1B62B2CE0(v48, v47);
      char v57 = v55;
      uint64_t v58 = *(void *)(v54 + 16) + ((v55 & 1) == 0);
      if (*(void *)(v54 + 24) < v58)
      {
        sub_1B6AB6018(v58, isUniquelyReferenced_nonNull_native);
        uint64_t v59 = sub_1B62B2CE0(v48, v47);
        if ((v57 & 1) != (v60 & 1))
        {
LABEL_37:
          uint64_t result = sub_1B6E33838();
          __break(1u);
          return result;
        }
        unint64_t v56 = v59;
        if ((v57 & 1) == 0) {
          goto LABEL_32;
        }
LABEL_22:
        uint64_t v62 = (uint64_t *)(*(void *)(v100 + 56) + 16 * v56);
        uint64_t v63 = *v62;
        unint64_t v64 = v62[1];
LABEL_33:
        uint64_t v102 = v63;
        unint64_t v103 = v64;
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6860674(&v102, v57 & 1, &v100, v56, v48, v47);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t *v93 = v100;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_bridgeObjectRelease();
      }
      if (isUniquelyReferenced_nonNull_native)
      {
        if (v55) {
          goto LABEL_22;
        }
      }
      else
      {
        sub_1B6ACBEF0();
        if (v57) {
          goto LABEL_22;
        }
      }
LABEL_32:
      uint64_t v63 = 0;
      unint64_t v64 = 0;
      goto LABEL_33;
    }
    return swift_bridgeObjectRelease_n();
  }
  uint64_t v102 = v19;
  unint64_t v103 = v21;
  uint64_t v100 = a4;
  unint64_t v101 = a5;
  unint64_t v22 = sub_1B633AF88();
  if (sub_1B6E32678())
  {
    uint64_t v102 = v19;
    unint64_t v103 = v21;
    uint64_t v100 = a4;
    unint64_t v101 = a5;
    long long v23 = (void *)sub_1B6E325F8();
    swift_bridgeObjectRelease();
    unint64_t v24 = v23[5];
    uint64_t v102 = v23[4];
    unint64_t v103 = v24;
    swift_bridgeObjectRetain();
    unint64_t v97 = v22;
    uint64_t v87 = sub_1B6E31A68();
    unint64_t v26 = v25;
    swift_bridgeObjectRelease();
    unint64_t v88 = v26;
    uint64_t v27 = v23[6];
    unint64_t v28 = v23[7];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v102 = v27;
    unint64_t v103 = v28;
    uint64_t v102 = sub_1B6E31A68();
    unint64_t v103 = v29;
    uint64_t v30 = sub_1B6E32688();
    swift_bridgeObjectRelease();
    int64_t v31 = *(void *)(v30 + 16);
    if (v31)
    {
      uint64_t v90 = v8;
      uint64_t v100 = MEMORY[0x1E4FBC860];
      sub_1B6C3C3B8(0, v31, 0);
      uint64_t v96 = (void (**)(char *, uint64_t))(v89 + 8);
      v86[1] = v30;
      float v32 = (uint64_t *)(v30 + 56);
      uint64_t v33 = v98;
      do
      {
        uint64_t v35 = *(v32 - 3);
        uint64_t v34 = *(v32 - 2);
        uint64_t v36 = *(v32 - 1);
        uint64_t v37 = *v32;
        swift_bridgeObjectRetain();
        uint64_t v102 = MEMORY[0x1BA9B34C0](v35, v34, v36, v37);
        unint64_t v103 = v38;
        v99[0] = &unk_1F0F87810;
        sub_1B666B050(&qword_1E9DCDDC0, 255, MEMORY[0x1E4F26E08]);
        sub_1B666BE6C(0, &qword_1E9DCDDC8, MEMORY[0x1E4FBC6E0], MEMORY[0x1E4FBB320]);
        sub_1B666BEB8();
        uint64_t v39 = v104;
        sub_1B6E327B8();
        uint64_t v40 = sub_1B6E32608();
        uint64_t v42 = v41;
        (*v96)(v33, v39);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v43 = v100;
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
        {
          sub_1B6C3C3B8(0, *(void *)(v43 + 16) + 1, 1);
          uint64_t v43 = v100;
        }
        unint64_t v45 = *(void *)(v43 + 16);
        unint64_t v44 = *(void *)(v43 + 24);
        if (v45 >= v44 >> 1)
        {
          sub_1B6C3C3B8(v44 > 1, v45 + 1, 1);
          uint64_t v43 = v100;
        }
        *(void *)(v43 + 16) = v45 + 1;
        uint64_t v46 = v43 + 16 * v45;
        *(void *)(v46 + 32) = v40;
        *(void *)(v46 + 40) = v42;
        v32 += 4;
        --v31;
      }
      while (v31);
      swift_bridgeObjectRelease();
      uint64_t v9 = v90;
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v43 = MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    uint64_t v87 = v19;
    unint64_t v88 = v21;
    swift_bridgeObjectRelease();
    uint64_t v43 = 0;
  }
  uint64_t v65 = v91;
  uint64_t v90 = v9;
  uint64_t v66 = v93;
  if (v91[1] && (*v92 & 1) == 0)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v102 = 0;
    unint64_t v103 = 0xE000000000000000;
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
LABEL_36:
    sub_1B6E32BE8();
    __break(1u);
    goto LABEL_37;
  }
  uint64_t v102 = v87;
  unint64_t v103 = v88;
  uint64_t v100 = v94;
  unint64_t v101 = v95;
  uint64_t v67 = sub_1B6E325F8();
  uint64_t v69 = *(void *)(v67 + 48);
  unint64_t v68 = *(void *)(v67 + 56);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v102 = v69;
  unint64_t v103 = v68;
  uint64_t v102 = sub_1B6E31A68();
  unint64_t v103 = v70;
  uint64_t v100 = (uint64_t)&unk_1F0F877E8;
  sub_1B666B050(&qword_1E9DCDDC0, 255, MEMORY[0x1E4F26E08]);
  sub_1B666BE6C(0, &qword_1E9DCDDC8, MEMORY[0x1E4FBC6E0], MEMORY[0x1E4FBB320]);
  sub_1B666BEB8();
  uint64_t v71 = v98;
  uint64_t v72 = v104;
  sub_1B6E327B8();
  uint64_t v73 = sub_1B6E32608();
  uint64_t v75 = v74;
  (*(void (**)(char *, uint64_t))(v89 + 8))(v71, v72);
  swift_bridgeObjectRelease();
  *uint64_t v65 = v73;
  v65[1] = v75;
  swift_bridgeObjectRelease();
  if (*(void *)(*v66 + 16))
  {
    uint64_t v77 = *v65;
    uint64_t v76 = v65[1];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    sub_1B62B2CE0(v77, v76);
    char v79 = v78;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if (v79)
    {
      swift_bridgeObjectRelease();
      uint64_t v102 = 0;
      unint64_t v103 = 0xE000000000000000;
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      uint64_t v102 = 0xD000000000000020;
      unint64_t v103 = 0x80000001B6F32390;
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      goto LABEL_36;
    }
  }
  uint64_t v80 = *v65;
  uint64_t v81 = v65[1];
  swift_bridgeObjectRetain();
  char v82 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v102 = *v66;
  uint64_t *v66 = 0x8000000000000000;
  sub_1B67E3B6C(0, 0xE000000000000000, v80, v81, v82);
  uint64_t *v66 = v102;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v43)
  {
    uint64_t v83 = *v65;
    uint64_t v84 = v65[1];
    swift_bridgeObjectRetain();
    char v85 = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v102 = v66[1];
    v66[1] = 0x8000000000000000;
    sub_1B67E4C3C(v43, v83, v84, v85);
    v66[1] = v102;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  uint64_t result = swift_bridgeObjectRelease();
  *int v92 = 0;
  return result;
}

uint64_t sub_1B6667CAC(char *a1, char *a2)
{
  return sub_1B6BB6174(*a1, *a2);
}

uint64_t sub_1B6667CB8()
{
  if (*v0) {
    return 0x7374657070696E73;
  }
  else {
    return 0x726F6C6F63;
  }
}

uint64_t sub_1B6667CF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B666B78C(a1, a2);
  *a3 = result;
  return result;
}

void sub_1B6667D18(unsigned char *a1@<X8>)
{
  *a1 = 2;
}

uint64_t sub_1B6667D24(uint64_t a1)
{
  unint64_t v2 = sub_1B666AEAC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6667D60(uint64_t a1)
{
  unint64_t v2 = sub_1B666AEAC();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *sub_1B6667D9C(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = sub_1B6E31808();
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v6 = sub_1B6E30F48();
  uint64_t v7 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  unint64_t v10 = (char *)v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  v1[2] = 0;
  _OWORD v1[3] = 0;
  uint64_t v11 = MEMORY[0x1E4FBC860];
  v1[4] = &unk_1F0F878C0;
  v1[5] = v11;
  v1[6] = sub_1B67DDF84(v11);
  v1[7] = 0;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v10, a1, v6);
  sub_1B6E30E88();
  v21[6] = sub_1B6E30E58();
  _OWORD v21[7] = v12;
  v21[4] = 1600285036;
  v21[5] = 0xE400000000000000;
  v21[2] = 0;
  v21[3] = 0xE000000000000000;
  sub_1B633AF88();
  uint64_t v13 = sub_1B6E32618();
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  v2[2] = v13;
  v2[3] = v15;
  swift_bridgeObjectRelease();
  sub_1B6E317E8();
  sub_1B6E31738();
  uint64_t v16 = sub_1B666B098();
  swift_bridgeObjectRelease();
  if (v16)
  {
    double v17 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v17(a1, v6);
    v17((uint64_t)v10, v6);
    v2[4] = *(void *)(v16 + 32);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void *)(v16 + 40);
    swift_bridgeObjectRetain();
    swift_release();
    void v2[5] = v18;
  }
  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v19(a1, v6);
    v19((uint64_t)v10, v6);
    *((_OWORD *)v2 + 1) = xmmword_1B6E77F80;
  }
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_1B66681D8()
{
  sub_1B666849C();
  unint64_t v1 = *(void *)(v0 + 40);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1B6E32C18();
    if (!v2) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_9;
    }
  }
  for (uint64_t i = 0; i != v2; ++i)
  {
    if ((v1 & 0xC000000000000001) != 0) {
      MEMORY[0x1BA9B4580](i, v1);
    }
    else {
      swift_retain();
    }
    sub_1B6AF41B8();
    swift_release();
  }
LABEL_9:
  swift_bridgeObjectRelease();
  unint64_t v4 = *(void *)(v0 + 40);
  if (v4 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v5 = sub_1B6E32C18();
    if (!v5) {
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v5) {
      goto LABEL_17;
    }
  }
  for (uint64_t j = 0; j != v5; ++j)
  {
    if ((v4 & 0xC000000000000001) != 0) {
      MEMORY[0x1BA9B4580](j, v4);
    }
    else {
      swift_retain();
    }
    sub_1B6AF5E48();
    swift_release();
  }
LABEL_17:
  swift_bridgeObjectRelease_n();
  sub_1B66685EC();
  sub_1B6668978();
  unint64_t v7 = *(void *)(v0 + 40);
  if (v7 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v8 = sub_1B6E32C18();
    if (!v8) {
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v8 = *(void *)((v7 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v8) {
      goto LABEL_25;
    }
  }
  for (uint64_t k = 0; k != v8; ++k)
  {
    if ((v7 & 0xC000000000000001) != 0) {
      MEMORY[0x1BA9B4580](k, v7);
    }
    else {
      swift_retain();
    }
    sub_1B6AF3558();
    swift_release();
  }
LABEL_25:
  swift_bridgeObjectRelease_n();
  unint64_t v10 = *(void *)(v0 + 40);
  if (v10 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v11 = sub_1B6E32C18();
    if (!v11) {
      return swift_bridgeObjectRelease_n();
    }
  }
  else
  {
    uint64_t v11 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain_n();
    if (!v11) {
      return swift_bridgeObjectRelease_n();
    }
  }
  for (uint64_t m = 0; m != v11; ++m)
  {
    if ((v10 & 0xC000000000000001) != 0) {
      MEMORY[0x1BA9B4580](m, v10);
    }
    else {
      swift_retain();
    }
    sub_1B6AF4E00();
    swift_release();
  }
  return swift_bridgeObjectRelease_n();
}

uint64_t sub_1B666849C()
{
  unint64_t v1 = v0[5];
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v2 = sub_1B6E32C18();
    if (!v2) {
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (!v2) {
      goto LABEL_9;
    }
  }
  if ((v1 & 0xC000000000000001) != 0)
  {
    uint64_t v3 = 0;
    do
    {
      unint64_t v4 = (void *)MEMORY[0x1BA9B4580](v3++, v1);
      uint64_t v5 = v0[3];
      v4[42] = v0[2];
      v4[43] = v5;
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v4[44] = v0[4];
      swift_bridgeObjectRetain();
      swift_unknownObjectRelease();
      swift_bridgeObjectRelease();
    }
    while (v2 != v3);
  }
  else
  {
    uint64_t v6 = 0;
    do
    {
      unint64_t v7 = *(void **)(v1 + 8 * v6++ + 32);
      uint64_t v8 = v0[3];
      v7[42] = v0[2];
      v7[43] = v8;
      swift_retain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      v7[44] = v0[4];
      swift_bridgeObjectRetain();
      swift_release();
      swift_bridgeObjectRelease();
    }
    while (v2 != v6);
  }
LABEL_9:

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B66685EC()
{
  unint64_t v1 = v0;
  _s7ContextCMa();
  swift_allocObject();
  uint64_t v2 = sub_1B6A1FD28(0);
  unint64_t v3 = v0[5];
  uint64_t v4 = MEMORY[0x1E4FBC860];
  v24[0] = MEMORY[0x1E4FBC860];
  if (v3 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v5 = sub_1B6E32C18();
    if (v5) {
      goto LABEL_3;
    }
  }
  else
  {
    uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5)
    {
LABEL_3:
      uint64_t v6 = 0;
      while (1)
      {
        if ((v3 & 0xC000000000000001) != 0)
        {
          if (!*(void *)(MEMORY[0x1BA9B4580](v6, v3) + 144)) {
            goto LABEL_10;
          }
        }
        else
        {
          uint64_t v7 = *(void *)(v3 + 8 * v6 + 32);
          swift_retain();
          if (!*(void *)(v7 + 144))
          {
LABEL_10:
            swift_release();
            goto LABEL_5;
          }
        }
        sub_1B6E32A08();
        sub_1B6E32A68();
        sub_1B6E32A78();
        sub_1B6E32A28();
LABEL_5:
        if (v5 == ++v6)
        {
          swift_bridgeObjectRelease();
          uint64_t v8 = v24[0];
          uint64_t v4 = MEMORY[0x1E4FBC860];
          goto LABEL_14;
        }
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v8 = MEMORY[0x1E4FBC860];
LABEL_14:
  unint64_t v9 = v0[5];
  v24[0] = v4;
  if (v9 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v10 = sub_1B6E32C18();
    if (v10) {
      goto LABEL_16;
    }
LABEL_26:
    swift_bridgeObjectRelease();
    uint64_t v13 = MEMORY[0x1E4FBC860];
    goto LABEL_27;
  }
  uint64_t v10 = *(void *)((v9 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (!v10) {
    goto LABEL_26;
  }
LABEL_16:
  for (uint64_t i = 0; i != v10; ++i)
  {
    if ((v9 & 0xC000000000000001) != 0)
    {
      if (!*(void *)(MEMORY[0x1BA9B4580](i, v9) + 144)) {
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v12 = *(void *)(v9 + 8 * i + 32);
      swift_retain();
      if (!*(void *)(v12 + 144))
      {
LABEL_17:
        sub_1B6E32A08();
        sub_1B6E32A68();
        sub_1B6E32A78();
        sub_1B6E32A28();
        continue;
      }
    }
    swift_release();
  }
  swift_bridgeObjectRelease();
  uint64_t v13 = v24[0];
LABEL_27:
  v0[5] = v13;
  swift_bridgeObjectRelease();
  if (v8 < 0 || (v8 & 0x4000000000000000) != 0)
  {
    swift_retain();
    uint64_t v14 = sub_1B6E32C18();
    if (!v14) {
      goto LABEL_42;
    }
LABEL_30:
    uint64_t v15 = 0;
    unint64_t v16 = v8 & 0xC000000000000001;
    uint64_t v23 = v14;
    while (1)
    {
      if (v16)
      {
        uint64_t v17 = MEMORY[0x1BA9B4580](v15, v8);
        uint64_t v18 = *(void *)(v17 + 144);
        if (!v18) {
          goto LABEL_31;
        }
      }
      else
      {
        uint64_t v17 = *(void *)(v8 + 32 + 8 * v15);
        swift_retain();
        uint64_t v18 = *(void *)(v17 + 144);
        if (!v18) {
          goto LABEL_31;
        }
      }
      uint64_t v19 = *(void *)(v18 + 16);
      if (v19)
      {
        swift_bridgeObjectRetain();
        unint64_t v20 = (uint64_t *)(v18 + 40);
        do
        {
          uint64_t v21 = *v20;
          v24[0] = *(v20 - 1);
          v24[1] = v21;
          swift_bridgeObjectRetain();
          sub_1B6669124((uint64_t)v24, v17, (uint64_t)v2, v1);
          swift_bridgeObjectRelease();
          v20 += 2;
          --v19;
        }
        while (v19);
        swift_release();
        swift_bridgeObjectRelease();
        unint64_t v16 = v8 & 0xC000000000000001;
        uint64_t v14 = v23;
        goto LABEL_32;
      }
LABEL_31:
      swift_release();
LABEL_32:
      if (++v15 == v14) {
        goto LABEL_42;
      }
    }
  }
  uint64_t v14 = *(void *)(v8 + 16);
  swift_retain();
  if (v14) {
    goto LABEL_30;
  }
LABEL_42:
  swift_release();
  return swift_release_n();
}

uint64_t sub_1B6668978()
{
  unint64_t v1 = *(void *)(v0 + 40);
  if (v1 >> 62)
  {
    swift_bridgeObjectRetain_n();
    uint64_t v2 = sub_1B6E32C18();
    if (v2) {
      goto LABEL_3;
    }
LABEL_21:
    swift_bridgeObjectRelease_n();
    uint64_t v17 = swift_bridgeObjectRetain();
    uint64_t v18 = sub_1B6667000(v17);
    swift_bridgeObjectRelease();
    *(void *)(v20 + 40) = v18;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain_n();
  if (!v2) {
    goto LABEL_21;
  }
LABEL_3:
  uint64_t v3 = 0;
  unint64_t v22 = v1 & 0xC000000000000001;
  uint64_t v4 = (void *)MEMORY[0x1E4FBC868];
  unint64_t v21 = v1;
  while (1)
  {
    if (v22)
    {
      uint64_t v6 = MEMORY[0x1BA9B4580](v3, v1);
    }
    else
    {
      uint64_t v6 = *(void *)(v1 + 8 * v3 + 32);
      swift_retain();
    }
    uint64_t v23 = *(void *)(v6 + 16);
    uint64_t v24 = *(void *)(v6 + 24);
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    sub_1B6AF3AD8();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    if (!v4[2]) {
      break;
    }
    sub_1B62B2CE0(v23, v24);
    if ((v7 & 1) == 0) {
      break;
    }
    swift_retain();
    swift_bridgeObjectRelease();
    sub_1B6AF4094(v6);
    swift_release();
    swift_release();
LABEL_6:
    if (v2 == ++v3) {
      goto LABEL_21;
    }
  }
  uint64_t v8 = v2;
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  unint64_t v10 = sub_1B62B2CE0(v23, v24);
  char v12 = v11;
  uint64_t v13 = v4[2] + ((v11 & 1) == 0);
  if (v4[3] >= v13)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_1B6ACDF98();
    }
    goto LABEL_18;
  }
  sub_1B6ABA068(v13, isUniquelyReferenced_nonNull_native);
  uint64_t v14 = sub_1B62B2CE0(v23, v24);
  if ((v12 & 1) == (v15 & 1))
  {
    unint64_t v10 = v14;
LABEL_18:
    uint64_t v2 = v8;
    unint64_t v1 = v21;
    if (v12)
    {
      uint64_t v16 = v4[7];
      swift_release();
      *(void *)(v16 + 8 * v10) = v6;
    }
    else
    {
      v4[(v10 >> 6) + 8] |= 1 << v10;
      uint64_t v5 = (uint64_t *)(v4[6] + 16 * v10);
      *uint64_t v5 = v23;
      v5[1] = v24;
      *(void *)(v4[7] + 8 * v10) = v6;
      ++v4[2];
      swift_bridgeObjectRetain();
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  uint64_t result = sub_1B6E33838();
  __break(1u);
  return result;
}

uint64_t sub_1B6668C60(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t *a8)
{
  swift_bridgeObjectRetain();
  uint64_t v9 = sub_1B6C86104();
  uint64_t v11 = v10;
  uint64_t v13 = v12;
  uint64_t result = swift_bridgeObjectRelease();
  if (v13)
  {
    uint64_t v15 = *a8;
    uint64_t v16 = a8[1];
    uint64_t v17 = a8[2];
    *a8 = v9;
    a8[1] = v11;
    a8[2] = v13;
    return sub_1B666BB24(v15, v16, v17);
  }
  return result;
}

uint64_t sub_1B6668D20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1B67DE4B0(MEMORY[0x1E4FBC860]);
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_1B666B3D0(v4, (void (*)(uint64_t, uint64_t, uint64_t))sub_1B666BB68);
  swift_bridgeObjectRelease();
  *(void *)(a3 + 40) = v6;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6668DDC(uint64_t a1, uint64_t a2, uint64_t a3, void **a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t *a9)
{
  uint64_t v13 = *(void *)(a3 + 24);
  unint64_t v12 = *(void *)(a3 + 32);
  uint64_t v14 = HIBYTE(v12) & 0xF;
  if ((v12 & 0x2000000000000000) == 0) {
    uint64_t v14 = v13 & 0xFFFFFFFFFFFFLL;
  }
  if (v14 && (sub_1B69EEF08(v13, v12, *a4) & 1) == 0)
  {
    swift_bridgeObjectRetain();
    sub_1B6AB4684(v13, v12);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v19 = *a9;
    *a9 = 0x8000000000000000;
    sub_1B67E4C7C(a3, a1, a2, isUniquelyReferenced_nonNull_native);
    *a9 = v19;
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    uint64_t v19 = 0;
    uint64_t v20 = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    uint64_t v17 = v19;
    int v18 = sub_1B6E32168();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    uint64_t v19 = 0;
    swift_retain();
    sub_1B6B33E34(v18, &v19, v17, v20);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_release();
  }
}

uint64_t sub_1B6669124(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v5 = MEMORY[0x1E4FBC860];
  uint64_t v94 = sub_1B67DDFA4(MEMORY[0x1E4FBC860]);
  uint64_t v91 = sub_1B67DDFA4(v5);
  uint64_t v6 = swift_bridgeObjectRetain();
  sub_1B6A2E570(v6, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B666BB9C);
  char v7 = (void *)a2;
  uint64_t v8 = swift_bridgeObjectRelease();
  if (*(void *)(a2 + 224))
  {
    MEMORY[0x1F4188790](v8, v9);
    uint64_t v10 = swift_bridgeObjectRetain();
    sub_1B6A2E570(v10, (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))sub_1B666BBA8);
    swift_bridgeObjectRelease();
  }
  uint64_t v11 = *(void *)(a2 + 24);
  uint64_t v92 = *(void *)(a2 + 16);
  uint64_t v93 = v11;
  sub_1B633AF88();
  uint64_t v83 = sub_1B6E32618();
  uint64_t v84 = v12;
  uint64_t v13 = *(void *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 40);
  if (v14)
  {
    uint64_t v92 = *(void *)(a2 + 32);
    uint64_t v93 = v14;
    uint64_t v13 = sub_1B6E32618();
    uint64_t v81 = v15;
  }
  else
  {
    uint64_t v81 = 0;
  }
  uint64_t v82 = v13;
  uint64_t v80 = *(void *)(a2 + 64);
  char v78 = *(unsigned char *)(a2 + 105);
  char v77 = *(unsigned char *)(a2 + 106);
  char v76 = *(unsigned char *)(a2 + 107);
  char v75 = *(unsigned char *)(a2 + 108);
  char v74 = *(unsigned char *)(a2 + 109);
  char v73 = *(unsigned char *)(a2 + 110);
  uint64_t v72 = *(void *)(a2 + 112);
  uint64_t v16 = *(void *)(a2 + 136);
  uint64_t v79 = *(void *)(a2 + 72);
  uint64_t v71 = *(void *)(a2 + 120);
  if (v16)
  {
    uint64_t v92 = *(void *)(a2 + 128);
    uint64_t v93 = v16;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v70 = sub_1B6E32618();
    uint64_t v69 = v17;
  }
  else
  {
    uint64_t v70 = *(void *)(a2 + 128);
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v69 = 0;
  }
  uint64_t v18 = *(void *)(a2 + 168);
  uint64_t v68 = *(void *)(a2 + 184);
  uint64_t v66 = *(void *)(a2 + 192);
  uint64_t v86 = (void *)a2;
  uint64_t v67 = *(void *)(a2 + 152);
  uint64_t v65 = *(void *)(a2 + 160);
  if (v18)
  {
    int64_t v19 = *(void *)(v18 + 16);
    if (v19)
    {
      uint64_t v88 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B6C3C3B8(0, v19, 0);
      uint64_t v20 = v18;
      uint64_t v18 = v88;
      unint64_t v21 = (uint64_t *)(v20 + 40);
      do
      {
        uint64_t v22 = *v21;
        uint64_t v92 = *(v21 - 1);
        uint64_t v93 = v22;
        uint64_t v23 = sub_1B6E32618();
        uint64_t v25 = v24;
        unint64_t v27 = *(void *)(v88 + 16);
        unint64_t v26 = *(void *)(v88 + 24);
        if (v27 >= v26 >> 1) {
          sub_1B6C3C3B8(v26 > 1, v27 + 1, 1);
        }
        v21 += 2;
        *(void *)(v88 + 16) = v27 + 1;
        unint64_t v28 = v88 + 16 * v27;
        *(void *)(v28 + 32) = v23;
        *(void *)(v28 + 40) = v25;
        --v19;
      }
      while (v19);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v7 = v86;
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v18 = MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
  }
  uint64_t v29 = v7[26];
  uint64_t v64 = v18;
  uint64_t v63 = v7[25];
  if (v29)
  {
    int64_t v30 = *(void *)(v29 + 16);
    if (v30)
    {
      uint64_t v89 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B6C3C3B8(0, v30, 0);
      int64_t v31 = (uint64_t *)(v29 + 40);
      do
      {
        uint64_t v32 = *v31;
        uint64_t v92 = *(v31 - 1);
        uint64_t v93 = v32;
        uint64_t v33 = sub_1B6E32618();
        uint64_t v35 = v34;
        unint64_t v37 = *(void *)(v89 + 16);
        unint64_t v36 = *(void *)(v89 + 24);
        if (v37 >= v36 >> 1) {
          sub_1B6C3C3B8(v36 > 1, v37 + 1, 1);
        }
        v31 += 2;
        *(void *)(v89 + 16) = v37 + 1;
        unint64_t v38 = v89 + 16 * v37;
        *(void *)(v38 + 32) = v33;
        *(void *)(v38 + 40) = v35;
        --v30;
      }
      while (v30);
      uint64_t v61 = v89;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v7 = v86;
    }
    else
    {
      swift_bridgeObjectRetain();
      uint64_t v61 = MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    swift_bridgeObjectRetain();
    uint64_t v61 = 0;
  }
  uint64_t v87 = v94;
  if (v91[2]) {
    uint64_t v62 = swift_bridgeObjectRetain();
  }
  else {
    uint64_t v62 = 0;
  }
  uint64_t v39 = v7[11];
  if (v39)
  {
    int64_t v40 = *(void *)(v39 + 16);
    if (v40)
    {
      uint64_t v90 = MEMORY[0x1E4FBC860];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      sub_1B6C3C3B8(0, v40, 0);
      uint64_t v41 = v90;
      uint64_t v42 = (uint64_t *)(v39 + 40);
      do
      {
        uint64_t v43 = *v42;
        uint64_t v92 = *(v42 - 1);
        uint64_t v93 = v43;
        uint64_t v44 = sub_1B6E32618();
        uint64_t v46 = v45;
        unint64_t v48 = *(void *)(v90 + 16);
        unint64_t v47 = *(void *)(v90 + 24);
        if (v48 >= v47 >> 1) {
          sub_1B6C3C3B8(v47 > 1, v48 + 1, 1);
        }
        v42 += 2;
        *(void *)(v90 + 16) = v48 + 1;
        unint64_t v49 = v90 + 16 * v48;
        *(void *)(v49 + 32) = v44;
        *(void *)(v49 + 40) = v46;
        --v40;
      }
      while (v40);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      unint64_t v50 = v86;
      uint64_t v51 = (uint64_t)v87;
    }
    else
    {
      uint64_t v51 = (uint64_t)v94;
      swift_bridgeObjectRetain();
      unint64_t v50 = v7;
      uint64_t v41 = MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    uint64_t v51 = (uint64_t)v94;
    swift_bridgeObjectRetain();
    unint64_t v50 = v7;
    uint64_t v41 = 0;
  }
  uint64_t v52 = v50[12];
  sub_1B666BBB4((uint64_t)(v50 + 31), (uint64_t)&v92);
  uint64_t v54 = v50[36];
  uint64_t v53 = v50[37];
  char v55 = *((unsigned char *)v50 + 304);
  _s17CodeSourceSnippetCMa();
  swift_allocObject();
  swift_bridgeObjectRetain();
  sub_1B666BC4C(&v92, (void (*)(void, void, void, void, void))sub_1B666BC3C);
  swift_bridgeObjectRetain();
  HIBYTE(v60) = v73;
  BYTE2(v60) = v74;
  BYTE1(v60) = v75;
  LOBYTE(v60) = v76;
  unint64_t v56 = (void *)sub_1B6AF6CDC(v83, v84, v82, v81, v80, v79, v78, v77, v60, v72, v71, v70, v69, v67, v68, v66, v65, v64, v63,
                    v61,
                    v51,
                    v62,
                    v41,
                    v52,
                    (uint64_t)&v92,
                    v54,
                    v53,
                    v55);
  v56[22] = v50[22];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v57 = a4[3];
  v56[42] = a4[2];
  v56[43] = v57;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  v56[44] = a4[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v58 = swift_retain();
  MEMORY[0x1BA9B3870](v58);
  if (*(void *)((a4[5] & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((a4[5] & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
    sub_1B6E31C78();
  }
  sub_1B6E31CC8();
  sub_1B6E31C48();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_release();
}

void *sub_1B6669B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7, uint64_t a8)
{
  swift_bridgeObjectRetain();
  sub_1B629C678(a5, a6, v70);
  uint64_t result = (void *)sub_1B666BBB4((uint64_t)v70, (uint64_t)v71);
  if (v72 == 59) {
    return result;
  }
  uint64_t v63 = a7;
  sub_1B629C37C((uint64_t)v71, (uint64_t)v73);
  swift_bridgeObjectRetain();
  uint64_t v62 = a1;
  unint64_t v17 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v17 >= 3) {
    return sub_1B666BC4C(v70, (void (*)(void, void, void, void, void))sub_1B666BC88);
  }
  sub_1B629C37C((uint64_t)v73, (uint64_t)v74);
  if (v75 >= 0x3B)
  {
    if (!*(void *)(v76 + 16)) {
      return sub_1B666BC4C(v70, (void (*)(void, void, void, void, void))sub_1B666BC88);
    }
    sub_1B69FA7C0(v17);
    if ((v18 & 1) == 0) {
      return sub_1B666BC4C(v70, (void (*)(void, void, void, void, void))sub_1B666BC88);
    }
    goto LABEL_14;
  }
  if (!(_BYTE)v17)
  {
    if ((sub_1B68A2BB0((uint64_t)v73) & 1) == 0) {
      return sub_1B666BC4C(v70, (void (*)(void, void, void, void, void))sub_1B666BC88);
    }
    goto LABEL_14;
  }
  if (v17 == 1)
  {
    if ((sub_1B68A2B8C((uint64_t)v73) & 1) == 0) {
      return sub_1B666BC4C(v70, (void (*)(void, void, void, void, void))sub_1B666BC88);
    }
    goto LABEL_14;
  }
  if ((sub_1B68A3000((uint64_t)v73) & 1) == 0) {
    return sub_1B666BC4C(v70, (void (*)(void, void, void, void, void))sub_1B666BC88);
  }
LABEL_14:
  uint64_t v60 = a8;
  unint64_t v19 = sub_1B68952E0((uint64_t)v73, v17);
  unint64_t v21 = v20;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  uint64_t v61 = a4;
  sub_1B633AF88();
  sub_1B6E32618();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  uint64_t v22 = sub_1B6E32618();
  uint64_t v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)&v66[0] = v22;
  *((void *)&v66[0] + 1) = v24;
  *(void *)&v64[0] = 0x254550595425;
  *((void *)&v64[0] + 1) = 0xE600000000000000;
  uint64_t v68 = v19;
  unint64_t v69 = v21;
  uint64_t v25 = sub_1B6E32618();
  uint64_t v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)&v66[0] = *v63;
  void *v63 = 0x8000000000000000;
  sub_1B67E3B6C(v25, v27, v62, a2, isUniquelyReferenced_nonNull_native);
  void *v63 = *(void *)&v66[0];
  uint64_t v29 = a4;
  swift_bridgeObjectRelease();
  uint64_t v30 = a3;
  swift_bridgeObjectRelease();
  *(void *)&v66[0] = a3;
  *((void *)&v66[0] + 1) = a4;
  *(void *)&v64[0] = 0xD000000000000014;
  *((void *)&v64[0] + 1) = 0x80000001B6F32280;
  if (sub_1B6E32678())
  {
    sub_1B6A3C6F4(v73, 1, (uint64_t)v64);
    if (*((void *)&v64[0] + 1))
    {
      v66[2] = v64[2];
      v66[3] = v64[3];
      v66[4] = v64[4];
      uint64_t v67 = v65;
      v66[0] = v64[0];
      v66[1] = v64[1];
      swift_retain();
      int64_t v31 = sub_1B67DDFA4(MEMORY[0x1E4FBC860]);
      _s7ContextC14GenerationDataCMa();
      swift_allocObject();
      uint64_t v32 = sub_1B6A22BE8(v60, v17, 0, 0xE000000000000000, (uint64_t)v31, 0, 1);
      uint64_t v33 = *v63;
      if (*(void *)(*v63 + 16))
      {
        swift_bridgeObjectRetain();
        uint64_t v34 = sub_1B62B2CE0(v62, a2);
        if (v35)
        {
          unint64_t v36 = (uint64_t *)(*(void *)(v33 + 56) + 16 * v34);
          uint64_t v37 = *v36;
          uint64_t v38 = v36[1];
          swift_bridgeObjectRetain();
        }
        else
        {
          uint64_t v37 = 0;
          uint64_t v38 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v37 = 0;
        uint64_t v38 = 0;
      }
      *(void *)&v64[0] = v37;
      *((void *)&v64[0] + 1) = v38;
      uint64_t v68 = 0xD000000000000014;
      unint64_t v69 = 0x80000001B6F32280;
      int v39 = v17;
      if ((_BYTE)v17)
      {
        uint64_t v41 = v62;
        int64_t v40 = v63;
        if (v39 == 1) {
          sub_1B68A3024((uint64_t)v66, v32);
        }
        else {
          sub_1B6896AAC(v66, v32, 0, 0, 2);
        }
      }
      else
      {
        sub_1B689B45C(v66, v32, 0, 0, 0);
        uint64_t v41 = v62;
        int64_t v40 = v63;
      }
      swift_bridgeObjectRelease();
      uint64_t v42 = sub_1B6E32618();
      uint64_t v44 = v43;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain();
      char v45 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)&v64[0] = *v40;
      *int64_t v40 = 0x8000000000000000;
      sub_1B67E3B6C(v42, v44, v41, a2, v45);
      *int64_t v40 = *(void *)&v64[0];
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1B666BD18((uint64_t)v66);
      uint64_t v29 = v61;
    }
    else
    {
      sub_1B666BC98((uint64_t)v64);
    }
    uint64_t v30 = a3;
  }
  *(void *)&v66[0] = v30;
  *((void *)&v66[0] + 1) = v29;
  strcpy((char *)v64, "%TYPE_INDEX%");
  BYTE13(v64[0]) = 0;
  HIWORD(v64[0]) = -5120;
  if ((sub_1B6E32678() & 1) == 0) {
    return sub_1B666BC4C(v70, (void (*)(void, void, void, void, void))sub_1B666BC88);
  }
  uint64_t v46 = sub_1B6A3D1B0();
  char v48 = v47;
  uint64_t result = sub_1B666BC4C(v70, (void (*)(void, void, void, void, void))sub_1B666BC88);
  if ((v48 & 1) == 0)
  {
    uint64_t v49 = *v63;
    if (*(void *)(*v63 + 16))
    {
      swift_bridgeObjectRetain();
      uint64_t v50 = sub_1B62B2CE0(v62, a2);
      if (v51)
      {
        uint64_t v52 = (uint64_t *)(*(void *)(v49 + 56) + 16 * v50);
        uint64_t v53 = *v52;
        uint64_t v54 = v52[1];
        swift_bridgeObjectRetain();
      }
      else
      {
        uint64_t v53 = 0;
        uint64_t v54 = 0;
      }
      swift_bridgeObjectRelease();
    }
    else
    {
      uint64_t v53 = 0;
      uint64_t v54 = 0;
    }
    *(void *)&v66[0] = v53;
    *((void *)&v66[0] + 1) = v54;
    strcpy((char *)v64, "%TYPE_INDEX%");
    BYTE13(v64[0]) = 0;
    HIWORD(v64[0]) = -5120;
    uint64_t v68 = v46;
    uint64_t v68 = sub_1B6E33098();
    unint64_t v69 = v55;
    uint64_t v56 = sub_1B6E32618();
    uint64_t v58 = v57;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain();
    char v59 = swift_isUniquelyReferenced_nonNull_native();
    *(void *)&v66[0] = *v63;
    void *v63 = 0x8000000000000000;
    sub_1B67E3B6C(v56, v58, v62, a2, v59);
    void *v63 = *(void *)&v66[0];
    swift_bridgeObjectRelease();
    return (void *)swift_bridgeObjectRelease();
  }
  return result;
}

void *sub_1B666A300(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t *a7)
{
  swift_bridgeObjectRetain();
  sub_1B629C678(a5, a6, v20);
  uint64_t result = (void *)sub_1B666BBB4((uint64_t)v20, (uint64_t)v21);
  if (v22 != 59)
  {
    sub_1B629C37C((uint64_t)v21, (uint64_t)v23);
    swift_bridgeObjectRetain();
    unint64_t v13 = sub_1B6E32CC8();
    swift_bridgeObjectRelease();
    if (v13 < 3)
    {
      sub_1B629C37C((uint64_t)v23, (uint64_t)v24);
      if (v25 >= 0x3B)
      {
        if (!*(void *)(v26 + 16)) {
          return sub_1B666BC4C(v20, (void (*)(void, void, void, void, void))sub_1B666BC88);
        }
        sub_1B69FA7C0(v13);
        if ((v14 & 1) == 0) {
          return sub_1B666BC4C(v20, (void (*)(void, void, void, void, void))sub_1B666BC88);
        }
        goto LABEL_10;
      }
      if ((_BYTE)v13)
      {
        if (v13 == 1)
        {
          if ((sub_1B68A2B8C((uint64_t)v23) & 1) == 0) {
            return sub_1B666BC4C(v20, (void (*)(void, void, void, void, void))sub_1B666BC88);
          }
        }
        else if ((sub_1B68A3000((uint64_t)v23) & 1) == 0)
        {
          return sub_1B666BC4C(v20, (void (*)(void, void, void, void, void))sub_1B666BC88);
        }
LABEL_10:
        sub_1B68952E0((uint64_t)v23, v13);
        sub_1B666BC4C(v20, (void (*)(void, void, void, void, void))sub_1B666BC88);
        swift_bridgeObjectRetain();
        swift_bridgeObjectRetain();
        sub_1B6E31948();
        sub_1B633AF88();
        sub_1B6E32618();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRetain();
        sub_1B6E31948();
        sub_1B6E32618();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v15 = sub_1B6E32618();
        uint64_t v17 = v16;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v19 = *a7;
        *a7 = 0x8000000000000000;
        sub_1B67E3B6C(v15, v17, a1, a2, isUniquelyReferenced_nonNull_native);
        *a7 = v19;
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }
      if (sub_1B68A2BB0((uint64_t)v23)) {
        goto LABEL_10;
      }
    }
    return sub_1B666BC4C(v20, (void (*)(void, void, void, void, void))sub_1B666BC88);
  }
  return result;
}

uint64_t sub_1B666A660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    unint64_t v9 = swift_bridgeObjectRetain();
    uint64_t v10 = sub_1B666B9A0(v9, a1, a2, a3, a4);
    LOBYTE(a3) = v11;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((a3 & 1) == 0) {
      goto LABEL_3;
    }
    return 0;
  }
  swift_bridgeObjectRetain();
  unint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_1B666B878(v13, a1, a2);
  char v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v15) {
    return 0;
  }
LABEL_3:
  if ((*(void *)(v4 + 40) & 0xC000000000000001) != 0) {
    return MEMORY[0x1BA9B4580](v10);
  }
  else {
    return swift_retain();
  }
}

uint64_t sub_1B666A768(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v7 = *(void *)(*(void *)a1 + 16) == a2 && *(void *)(*(void *)a1 + 24) == a3;
  if (v7 || (char v8 = 0, (sub_1B6E334B8() & 1) != 0))
  {
    if (sub_1B6AF3AD8() == a4 && v9 == a5) {
      char v8 = 1;
    }
    else {
      char v8 = sub_1B6E334B8();
    }
    swift_bridgeObjectRelease();
  }
  return v8 & 1;
}

uint64_t sub_1B666A810()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t _s7LibraryCMa()
{
  return self;
}

void *assignWithCopy for Node.Typing(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for Node.Typing(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *_s7LibraryC11FunctionSetVMa()
{
  return &_s7LibraryC11FunctionSetVN;
}

uint64_t sub_1B666A93C(void *a1)
{
  uint64_t v3 = v1;
  sub_1B666AF58(0, &qword_1E9DCDD90, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B666AEAC();
  sub_1B6E33A88();
  uint64_t v13 = *(void *)(v3 + 32);
  HIBYTE(v12) = 0;
  sub_1B666BE6C(0, (unint64_t *)&qword_1EB980320, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBB320]);
  sub_1B6399770((unint64_t *)&qword_1E9DCDD98);
  sub_1B6E32FA8();
  if (!v2)
  {
    uint64_t v13 = *(void *)(v3 + 40);
    HIBYTE(v12) = 1;
    sub_1B666AF00();
    sub_1B666AFBC(&qword_1E9DCDDA0, &qword_1E9DCDDA8);
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

void *sub_1B666AB70(void *a1)
{
  sub_1B666AF58(0, &qword_1E9DCDD68, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v12 - v8;
  v1[2] = 0;
  _OWORD v1[3] = 0;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  v1[4] = &unk_1F0F878F8;
  v1[5] = v10;
  v1[6] = sub_1B67DDF84(v10);
  v1[7] = 0;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B666AEAC();
  sub_1B6E33A48();
  if (v2)
  {
    swift_release();
  }
  else
  {
    sub_1B666BE6C(0, (unint64_t *)&qword_1EB980320, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBB320]);
    char v13 = 0;
    sub_1B6399770((unint64_t *)&qword_1EB980328);
    sub_1B6E32DF8();
    v1[4] = v14;
    swift_bridgeObjectRelease();
    sub_1B666AF00();
    char v13 = 1;
    sub_1B666AFBC(&qword_1E9DCDD80, &qword_1E9DCDD88);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    v1[5] = v14;
    swift_bridgeObjectRelease();
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v1;
}

void *sub_1B666AE30@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_1B666AB70(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B666AE88(void *a1)
{
  return sub_1B666A93C(a1);
}

unint64_t sub_1B666AEAC()
{
  unint64_t result = qword_1E9DCDD70;
  if (!qword_1E9DCDD70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDD70);
  }
  return result;
}

void sub_1B666AF00()
{
  if (!qword_1E9DCDD78)
  {
    _s17CodeSourceSnippetCMa();
    unint64_t v0 = sub_1B6E31D18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DCDD78);
    }
  }
}

void sub_1B666AF58(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B666AEAC();
    unint64_t v7 = a3(a1, &_s7LibraryC10CodingKeysON, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1B666AFBC(unint64_t *a1, unint64_t *a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B666AF00();
    sub_1B666B050(a2, 255, (void (*)(uint64_t))_s17CodeSourceSnippetCMa);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B666B050(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B666B098()
{
  uint64_t v0 = sub_1B6E31808();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  uint64_t v4 = (char *)v10 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B6E317E8();
  uint64_t v5 = sub_1B6E317A8();
  unint64_t v7 = v6;
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  sub_1B6E30978();
  swift_allocObject();
  sub_1B6E30968();
  if (v7 >> 60 == 15)
  {
    swift_release();
    return 0;
  }
  else
  {
    _s7LibraryCMa();
    sub_1B62FFBB0(v5, v7);
    sub_1B666B050(&qword_1E9DCDDB8, v8, (void (*)(uint64_t))_s7LibraryCMa);
    sub_1B6E30938();
    sub_1B665D488(v5, v7);
    sub_1B665D488(v5, v7);
    swift_release();
    return v10[1];
  }
}

uint64_t sub_1B666B3D0(uint64_t a1, void (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v6 = -1;
  if (v5 < 64) {
    uint64_t v6 = ~(-1 << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v8 = (unint64_t)(v5 + 63) >> 6;
  uint64_t v9 = 0;
  uint64_t v19 = swift_bridgeObjectRetain() + 112;
  while (1)
  {
    if (v7)
    {
      unint64_t v10 = __clz(__rbit64(v7));
      v7 &= v7 - 1;
      unint64_t v11 = v10 | (v9 << 6);
      goto LABEL_5;
    }
    uint64_t v16 = v9 + 1;
    if (v9 + 1 >= v8) {
      return swift_release();
    }
    unint64_t v17 = *(void *)(v4 + 8 * v16);
    if (!v17)
    {
      uint64_t v16 = v9 + 2;
      if (v9 + 2 >= v8) {
        return swift_release();
      }
      unint64_t v17 = *(void *)(v4 + 8 * v16);
      if (!v17)
      {
        uint64_t v16 = v9 + 3;
        if (v9 + 3 >= v8) {
          return swift_release();
        }
        unint64_t v17 = *(void *)(v4 + 8 * v16);
        if (!v17)
        {
          uint64_t v16 = v9 + 4;
          if (v9 + 4 >= v8) {
            return swift_release();
          }
          unint64_t v17 = *(void *)(v4 + 8 * v16);
          if (!v17)
          {
            uint64_t v16 = v9 + 5;
            if (v9 + 5 >= v8) {
              return swift_release();
            }
            unint64_t v17 = *(void *)(v4 + 8 * v16);
            if (!v17) {
              break;
            }
          }
        }
      }
    }
LABEL_20:
    unint64_t v7 = (v17 - 1) & v17;
    unint64_t v11 = __clz(__rbit64(v17)) + (v16 << 6);
    uint64_t v9 = v16;
LABEL_5:
    uint64_t v12 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v11);
    uint64_t v13 = *v12;
    uint64_t v14 = v12[1];
    uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * v11);
    swift_bridgeObjectRetain();
    swift_retain();
    a2(v13, v14, v15);
    swift_release();
    swift_bridgeObjectRelease();
  }
  while (v8 - 6 != v9)
  {
    unint64_t v17 = *(void *)(v19 + 8 * v9++);
    if (v17)
    {
      uint64_t v16 = v9 + 5;
      goto LABEL_20;
    }
  }
  return swift_release();
}

uint64_t sub_1B666B578(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = MEMORY[0x1E4FBC860];
  v17[0] = (uint64_t)sub_1B67DDFA4(MEMORY[0x1E4FBC860]);
  v17[1] = (uint64_t)sub_1B67DE0B4(v4);
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  char v14 = 1;
  *(void *)&long long v11 = a1;
  *((void *)&v11 + 1) = a2;
  sub_1B633AF88();
  uint64_t v5 = sub_1B6E32688();
  swift_bridgeObjectRelease();
  uint64_t v6 = *(void *)(v5 + 16);
  if (!v6) {
    goto LABEL_6;
  }
  swift_bridgeObjectRetain();
  unint64_t v7 = (uint64_t *)(v5 + 56);
  do
  {
    uint64_t v8 = *(v7 - 1);
    uint64_t v9 = *v7;
    long long v11 = *(_OWORD *)(v7 - 3);
    uint64_t v12 = v8;
    uint64_t v13 = v9;
    swift_bridgeObjectRetain();
    sub_1B66671D8(&v11, 0xD000000000000014, 0x80000001B6F32300, 0x65646E6570656420, 0xEF203A736569636ELL, &v15, &v14, v17);
    swift_bridgeObjectRelease();
    v7 += 4;
    --v6;
  }
  while (v6);
  swift_bridgeObjectRelease_n();
  if (!v16) {
    return v17[0];
  }
  if (v14)
  {
LABEL_6:
    swift_bridgeObjectRelease();
    return v17[0];
  }
  *(void *)&long long v11 = 0;
  *((void *)&v11 + 1) = 0xE000000000000000;
  swift_bridgeObjectRetain();
  sub_1B6E328C8();
  sub_1B6E31948();
  sub_1B6E31948();
  sub_1B6E31948();
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

uint64_t sub_1B666B78C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x726F6C6F63 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7374657070696E73 && a2 == 0xE800000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1B666B878(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v6 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
    uint64_t v7 = 0;
    if (v6)
    {
      while (1)
      {
LABEL_3:
        if ((a1 & 0xC000000000000001) != 0)
        {
          uint64_t v8 = MEMORY[0x1BA9B4580](v7, a1);
        }
        else
        {
          uint64_t v8 = *(void *)(a1 + 8 * v7 + 32);
          swift_retain();
        }
        if (*(void *)(v8 + 16) == a2 && *(void *)(v8 + 24) == a3) {
          break;
        }
        char v10 = sub_1B6E334B8();
        swift_release();
        if (v10) {
          return v7;
        }
        if (v6 == ++v7) {
          return 0;
        }
      }
      swift_release();
    }
  }
  else
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    uint64_t v7 = 0;
    if (v6) {
      goto LABEL_3;
    }
  }
  return v7;
}

uint64_t sub_1B666B9A0(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1B6E32C18();
    swift_bridgeObjectRelease();
    if (v9) {
      goto LABEL_3;
    }
    return 0;
  }
  uint64_t v9 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (!v9) {
    return 0;
  }
LABEL_3:
  uint64_t v10 = 0;
  while (1)
  {
    if ((a1 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = MEMORY[0x1BA9B4580](v10, a1);
    }
    else
    {
      uint64_t v12 = *(void *)(a1 + 8 * v10 + 32);
      swift_retain();
    }
    BOOL v13 = *(void *)(v12 + 16) == a2 && *(void *)(v12 + 24) == a3;
    if (v13 || (sub_1B6E334B8() & 1) != 0) {
      break;
    }
    swift_release();
LABEL_5:
    if (v9 == ++v10) {
      return 0;
    }
  }
  if (sub_1B6AF3AD8() != a4 || v14 != a5)
  {
    char v11 = sub_1B6E334B8();
    swift_release();
    swift_bridgeObjectRelease();
    if (v11) {
      return v10;
    }
    goto LABEL_5;
  }
  swift_release();
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t sub_1B666BB24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
  {
    swift_bridgeObjectRelease();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B666BB68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6668DDC(a1, a2, a3, *(void ***)(v3 + 16), *(void *)(v3 + 24), *(unsigned __int8 *)(v3 + 32), *(void *)(v3 + 40), *(void *)(v3 + 48), *(uint64_t **)(v3 + 56));
}

void *sub_1B666BB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B6669B78(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(void **)(v4 + 32), *(void *)(v4 + 40));
}

void *sub_1B666BBA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666A300(a1, a2, a3, a4, *(void *)(v4 + 16), *(void *)(v4 + 24), *(uint64_t **)(v4 + 32));
}

uint64_t sub_1B666BBB4(uint64_t a1, uint64_t a2)
{
  sub_1B666BE6C(0, &qword_1E9DCDDB0, (uint64_t)&_s12MetadataTypeON, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B666BC3C(uint64_t a1, unint64_t a2)
{
  if (a2 != 59) {
    return sub_1B629C9E8(a1, a2);
  }
  return a1;
}

void *sub_1B666BC4C(void *a1, void (*a2)(void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1B666BC88(uint64_t a1, unint64_t a2)
{
  if (a2 != 59) {
    return sub_1B629DCAC(a1, a2);
  }
  return a1;
}

uint64_t sub_1B666BC98(uint64_t a1)
{
  sub_1B666BE6C(0, (unint64_t *)&unk_1EB981180, (uint64_t)&_s8MetadataVN, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B666BD18(uint64_t a1)
{
  return a1;
}

unint64_t sub_1B666BD6C()
{
  unint64_t result = qword_1EB980E40;
  if (!qword_1EB980E40)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB980E40);
  }
  return result;
}

unint64_t sub_1B666BDC4()
{
  unint64_t result = qword_1EB9800A0;
  if (!qword_1EB9800A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB9800A0);
  }
  return result;
}

unint64_t sub_1B666BE18()
{
  unint64_t result = qword_1EB97D7D8;
  if (!qword_1EB97D7D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97D7D8);
  }
  return result;
}

void sub_1B666BE6C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

unint64_t sub_1B666BEB8()
{
  unint64_t result = qword_1E9DCDDD0;
  if (!qword_1E9DCDDD0)
  {
    sub_1B666BE6C(255, &qword_1E9DCDDC8, MEMORY[0x1E4FBC6E0], MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDDD0);
  }
  return result;
}

unsigned char *_s7LibraryC10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B666C000);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s7LibraryC10CodingKeysOMa()
{
  return &_s7LibraryC10CodingKeysON;
}

unint64_t sub_1B666C03C()
{
  unint64_t result = qword_1E9DCDDD8;
  if (!qword_1E9DCDDD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDDD8);
  }
  return result;
}

unint64_t sub_1B666C094()
{
  unint64_t result = qword_1E9DCDDE0;
  if (!qword_1E9DCDDE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDDE0);
  }
  return result;
}

unint64_t sub_1B666C0EC()
{
  unint64_t result = qword_1E9DCDDE8;
  if (!qword_1E9DCDDE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DCDDE8);
  }
  return result;
}

uint64_t sub_1B666C140(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v9 = MEMORY[0x1E4FBC860];
    sub_1B6C3C3B8(0, v1, 0);
    uint64_t v2 = v9;
    uint64_t v4 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      unint64_t v6 = *(void *)(v9 + 16);
      unint64_t v5 = *(void *)(v9 + 24);
      if (v6 >= v5 >> 1) {
        sub_1B6C3C3B8(v5 > 1, v6 + 1, 1);
      }
      v4 += 16;
      *(void *)(v9 + 16) = v6 + 1;
      uint64_t v7 = v9 + 16 * v6;
      *(void *)(v7 + 32) = 2109231;
      *(void *)(v7 + 40) = 0xE300000000000000;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B666C24C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    sub_1B6C3D358(0, v1, 0);
    uint64_t v2 = v14;
    uint64_t v4 = (unsigned char *)(a1 + 56);
    do
    {
      uint64_t v6 = *((void *)v4 - 3);
      uint64_t v5 = *((void *)v4 - 2);
      uint64_t v12 = *((void *)v4 - 1);
      char v7 = *v4;
      unint64_t v9 = *(void *)(v14 + 16);
      unint64_t v8 = *(void *)(v14 + 24);
      swift_bridgeObjectRetain();
      if (v9 >= v8 >> 1) {
        sub_1B6C3D358(v8 > 1, v9 + 1, 1);
      }
      v4 += 32;
      *(void *)(v14 + 16) = v9 + 1;
      uint64_t v10 = v14 + 48 * v9;
      *(void *)(v10 + 32) = v6;
      *(void *)(v10 + 40) = v5;
      *(void *)(v10 + 48) = v12;
      *(unsigned char *)(v10 + 56) = v7;
      *(void *)(v10 + 57) = *(void *)v13;
      *(void *)(v10 + 64) = *(void *)&v13[7];
      *(void *)(v10 + 72) = &type metadata for EvolutionMode;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B666C368(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v15 = MEMORY[0x1E4FBC860];
    sub_1B6C3D358(0, v1, 0);
    uint64_t v2 = v15;
    uint64_t v4 = (unsigned char *)(a1 + 60);
    do
    {
      uint64_t v5 = *(void *)(v4 - 28);
      uint64_t v6 = *(void *)(v4 - 20);
      uint64_t v13 = *(void *)(v4 - 12);
      int v12 = *((_DWORD *)v4 - 1);
      char v7 = *v4;
      unint64_t v8 = *(void *)(v15 + 16);
      unint64_t v9 = *(void *)(v15 + 24);
      swift_bridgeObjectRetain();
      if (v8 >= v9 >> 1) {
        sub_1B6C3D358(v9 > 1, v8 + 1, 1);
      }
      v4 += 32;
      *(void *)(v15 + 16) = v8 + 1;
      uint64_t v10 = v15 + 48 * v8;
      *(void *)(v10 + 32) = v5;
      *(void *)(v10 + 40) = v6;
      *(void *)(v10 + 48) = v13;
      *(_DWORD *)(v10 + 56) = v12;
      *(unsigned char *)(v10 + 60) = v7;
      *(void *)(v10 + 61) = *(void *)v14;
      *(_DWORD *)(v10 + 68) = *(_DWORD *)&v14[7];
      *(void *)(v10 + 72) = &type metadata for EasingFunction;
      --v1;
    }
    while (v1);
  }
  return v2;
}

uint64_t sub_1B666C498(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    sub_1B6C3D358(0, v3, 0);
    uint64_t v4 = v19;
    uint64_t v6 = (unsigned char *)(a1 + 64);
    do
    {
      uint64_t v7 = *((void *)v6 - 4);
      uint64_t v8 = *((void *)v6 - 3);
      uint64_t v9 = *((void *)v6 - 2);
      uint64_t v10 = *((void *)v6 - 1);
      char v11 = *v6;
      uint64_t v12 = swift_allocObject();
      *(void *)(v12 + 16) = v9;
      *(void *)(v12 + 24) = v10;
      *(unsigned char *)(v12 + 32) = v11;
      unint64_t v14 = *(void *)(v19 + 16);
      unint64_t v13 = *(void *)(v19 + 24);
      swift_bridgeObjectRetain();
      if (v14 >= v13 >> 1) {
        sub_1B6C3D358(v13 > 1, v14 + 1, 1);
      }
      v6 += 48;
      *(void *)(v19 + 16) = v14 + 1;
      uint64_t v15 = v19 + 48 * v14;
      *(void *)(v15 + 32) = v7;
      *(void *)(v15 + 40) = v8;
      *(void *)(v15 + 48) = v12;
      *(_OWORD *)(v15 + 56) = v18;
      *(void *)(v15 + 72) = a3;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1B666C5BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v17 = MEMORY[0x1E4FBC860];
    sub_1B6C3D358(0, v3, 0);
    uint64_t v4 = v17;
    uint64_t v6 = (unsigned char *)(a1 + 48);
    uint64_t v7 = a3;
    do
    {
      uint64_t v9 = *((void *)v6 - 2);
      uint64_t v8 = *((void *)v6 - 1);
      char v10 = *v6;
      unint64_t v12 = *(void *)(v17 + 16);
      unint64_t v11 = *(void *)(v17 + 24);
      swift_bridgeObjectRetain();
      if (v12 >= v11 >> 1)
      {
        sub_1B6C3D358(v11 > 1, v12 + 1, 1);
        uint64_t v7 = a3;
      }
      v6 += 24;
      *(void *)(v17 + 16) = v12 + 1;
      uint64_t v13 = v17 + 48 * v12;
      *(void *)(v13 + 32) = v9;
      *(void *)(v13 + 40) = v8;
      *(unsigned char *)(v13 + 48) = v10;
      *(void *)(v13 + 64) = *(void *)&v16[15];
      *(void *)(v13 + 72) = v7;
      *(_OWORD *)(v13 + 49) = *(_OWORD *)v16;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1B666C6C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    sub_1B6C3D358(0, v3, 0);
    uint64_t v4 = v18;
    uint64_t v6 = (unsigned char *)(a1 + 52);
    uint64_t v7 = a3;
    do
    {
      uint64_t v8 = *(void *)(v6 - 20);
      uint64_t v9 = *(void *)(v6 - 12);
      int v10 = *((_DWORD *)v6 - 1);
      char v17 = *v6;
      unint64_t v12 = *(void *)(v18 + 16);
      unint64_t v11 = *(void *)(v18 + 24);
      swift_bridgeObjectRetain();
      if (v12 >= v11 >> 1)
      {
        sub_1B6C3D358(v11 > 1, v12 + 1, 1);
        uint64_t v7 = a3;
      }
      *(void *)(v18 + 16) = v12 + 1;
      uint64_t v13 = v18 + 48 * v12;
      *(void *)(v13 + 32) = v8;
      *(void *)(v13 + 40) = v9;
      *(_DWORD *)(v13 + 48) = v10;
      *(unsigned char *)(v13 + 52) = v17;
      *(_DWORD *)(v13 + 68) = *(_DWORD *)&v16[15];
      *(_OWORD *)(v13 + 53) = *(_OWORD *)v16;
      *(void *)(v13 + 72) = v7;
      v6 += 24;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1B666C7E4(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  int64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (v3)
  {
    uint64_t v17 = MEMORY[0x1E4FBC860];
    sub_1B6C3D358(0, v3, 0);
    uint64_t v4 = v17;
    uint64_t v7 = a3(0);
    uint64_t v8 = (uint64_t *)(a1 + 48);
    do
    {
      uint64_t v10 = *(v8 - 2);
      uint64_t v9 = *(v8 - 1);
      uint64_t v11 = *v8;
      unint64_t v13 = *(void *)(v17 + 16);
      unint64_t v12 = *(void *)(v17 + 24);
      swift_bridgeObjectRetain();
      if (v13 >= v12 >> 1) {
        sub_1B6C3D358(v12 > 1, v13 + 1, 1);
      }
      v8 += 3;
      *(void *)(v17 + 16) = v13 + 1;
      uint64_t v14 = v17 + 48 * v13;
      *(void *)(v14 + 32) = v10;
      *(void *)(v14 + 40) = v9;
      *(void *)(v14 + 48) = v11;
      *(_OWORD *)(v14 + 56) = v16;
      *(void *)(v14 + 72) = v7;
      --v3;
    }
    while (v3);
  }
  return v4;
}

uint64_t sub_1B666C8F0(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  uint64_t v2 = MEMORY[0x1E4FBC860];
  if (v1)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    sub_1B6C3C3B8(0, v1, 0);
    uint64_t v2 = v14;
    uint64_t v4 = *(void *)(sub_1B6E30F48() - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      uint64_t v7 = sub_1B6E30E18();
      uint64_t v9 = v8;
      unint64_t v11 = *(void *)(v14 + 16);
      unint64_t v10 = *(void *)(v14 + 24);
      if (v11 >= v10 >> 1) {
        sub_1B6C3C3B8(v10 > 1, v11 + 1, 1);
      }
      *(void *)(v14 + 16) = v11 + 1;
      uint64_t v12 = v14 + 16 * v11;
      *(void *)(v12 + 32) = v7;
      *(void *)(v12 + 40) = v9;
      v5 += v6;
      --v1;
    }
    while (v1);
  }
  return v2;
}

unint64_t sub_1B666CA28(uint64_t a1)
{
  sub_1B633C62C(0, (unint64_t *)&qword_1EB9857F0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v3 - 8, v4);
  uint64_t v6 = (char *)v26 - v5;
  uint64_t v7 = sub_1B6E30F48();
  MEMORY[0x1F4188790](v7, v8);
  unint64_t v10 = (char *)v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v11, v12);
  uint64_t v30 = (char *)v26 - v14;
  uint64_t v15 = *(void *)(a1 + 16);
  if (!v15) {
    return MEMORY[0x1E4FBC860];
  }
  void v26[2] = v1;
  long long v16 = (unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  uint64_t v29 = v13;
  uint64_t v17 = (void (**)(char *, char *, uint64_t))(v13 + 32);
  swift_bridgeObjectRetain();
  v26[1] = a1;
  uint64_t v18 = a1 + 40;
  unint64_t v19 = MEMORY[0x1E4FBC860];
  uint64_t v27 = v16;
  unint64_t v28 = v10;
  do
  {
    swift_bridgeObjectRetain();
    sub_1B6E30F18();
    swift_bridgeObjectRelease();
    if ((*v16)(v6, 1, v7) == 1)
    {
      sub_1B639553C((uint64_t)v6, (uint64_t)&qword_1EB9857F0, MEMORY[0x1E4F276F0], MEMORY[0x1E4FBB718], (uint64_t (*)(void))sub_1B633C62C);
    }
    else
    {
      unint64_t v20 = *v17;
      unint64_t v21 = v30;
      (*v17)(v30, v6, v7);
      v20(v10, v21, v7);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        unint64_t v19 = sub_1B68C2198(0, *(void *)(v19 + 16) + 1, 1, v19);
      }
      unint64_t v23 = *(void *)(v19 + 16);
      unint64_t v22 = *(void *)(v19 + 24);
      if (v23 >= v22 >> 1) {
        unint64_t v19 = sub_1B68C2198(v22 > 1, v23 + 1, 1, v19);
      }
      *(void *)(v19 + 16) = v23 + 1;
      unint64_t v24 = v19
          + ((*(unsigned __int8 *)(v29 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80))
          + *(void *)(v29 + 72) * v23;
      unint64_t v10 = v28;
      v20((char *)v24, v28, v7);
      long long v16 = v27;
    }
    v18 += 16;
    --v15;
  }
  while (v15);
  swift_bridgeObjectRelease();
  return v19;
}

uint64_t sub_1B666CD4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v12[3] = a1;
  _OWORD v12[4] = a2;
  sub_1B62C12C4(v12);
  uint64_t v8 = *(void *)(a2 + 8);
  sub_1B6A5DD6C(a1, v8);
  uint64_t v9 = sub_1B6A5DDA4(a3, a4, a1, v8);
  if (v9)
  {
    uint64_t v10 = v9;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
    return v10;
  }
  else
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
    v12[0] = 0;
    v12[1] = 0xE000000000000000;
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    strcpy((char *)v12, "new property ");
    HIWORD(v12[1]) = -4864;
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E33B48();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B666CEC0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, char a6, uint64_t a7, char a8, uint64_t *a9, uint64_t *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, _OWORD *a15, __int16 a16, uint64_t a17)
{
  char v18 = a4 & 1;
  char v19 = a6 & 1;
  char v20 = a8 & 1;
  unint64_t v21 = (_OWORD *)swift_allocObject();
  long long v22 = a15[1];
  v21[14] = *a15;
  v21[15] = v22;
  v21[16] = a15[2];
  return sub_1B62B3628(a1, a2, a3, v18, a5, v19, a7, v20, a9, a10, a11, a12, a13, a14, a16, a17);
}

uint64_t sub_1B666CF94()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  swift_bridgeObjectRelease();

  return sub_1B677C3D4(v1, v2);
}

uint64_t sub_1B666CFE4()
{
  uint64_t v0 = sub_1B684D068();
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 256);
  swift_bridgeObjectRelease();
  sub_1B677C3D4(v1, v2);

  return swift_deallocClassInstance();
}

uint64_t sub_1B666D04C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_1B6B88708();
  unint64_t v9 = v8;
  if (v8 >> 62)
  {
    uint64_t v10 = sub_1B6E32C18();
    if (!v10) {
      goto LABEL_7;
    }
LABEL_3:
    unint64_t v11 = v9 & 0xC000000000000001;
    if ((v9 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = MEMORY[0x1BA9B4580](0, v9);
    }
    else
    {
      uint64_t v12 = *(void *)(v9 + 32);
      swift_retain();
    }
    if ((sub_1B6741358(*(void *)(v12 + 16), *(void *)(v12 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      swift_release();
      if (v10 == 1) {
        goto LABEL_7;
      }
      if (v11)
      {
        uint64_t v12 = MEMORY[0x1BA9B4580](1, v9);
      }
      else
      {
        uint64_t v12 = *(void *)(v9 + 40);
        swift_retain();
      }
      if ((sub_1B6741358(*(void *)(v12 + 16), *(void *)(v12 + 24), a1, a2, a3, a4) & 1) == 0)
      {
        swift_release();
        uint64_t v14 = v10 - 2;
        if (!v14) {
          goto LABEL_7;
        }
        uint64_t v15 = 0;
        unint64_t v16 = a1 >> 16;
        unint64_t v17 = a2 >> 16;
        while (1)
        {
          if (v11)
          {
            uint64_t v12 = MEMORY[0x1BA9B4580](v15 + 2, v9);
          }
          else
          {
            uint64_t v12 = *(void *)(v9 + 8 * v15 + 48);
            swift_retain();
          }
          uint64_t v18 = *(void *)(v12 + 16);
          unint64_t v19 = *(void *)(v12 + 24);
          uint64_t v20 = (v19 & 0x2000000000000000) != 0 ? HIBYTE(v19) & 0xF : v18 & 0xFFFFFFFFFFFFLL;
          BOOL v21 = v18 == a3 && v19 == a4;
          BOOL v22 = v21 && v16 == 0;
          BOOL v23 = v22 && v20 == v17;
          if (v23 || (sub_1B6E33078() & 1) != 0) {
            break;
          }
          swift_release();
          if (v14 == ++v15) {
            goto LABEL_7;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    return v12;
  }
  uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v10) {
    goto LABEL_3;
  }
LABEL_7:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B666D22C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, __int16 a6)
{
  unint64_t v10 = sub_1B667D138(a1, a6 & 0x101);
  unint64_t v11 = v10;
  if (v10 >> 62)
  {
    uint64_t v12 = sub_1B6E32C18();
    if (!v12) {
      goto LABEL_7;
    }
LABEL_3:
    unint64_t v13 = v11 & 0xC000000000000001;
    if ((v11 & 0xC000000000000001) != 0)
    {
      uint64_t v14 = MEMORY[0x1BA9B4580](0, v11);
    }
    else
    {
      uint64_t v14 = *(void *)(v11 + 32);
      swift_retain();
    }
    if ((sub_1B6741358(*(void *)(v14 + 16), *(void *)(v14 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      swift_release();
      if (v12 == 1) {
        goto LABEL_7;
      }
      if (v13)
      {
        uint64_t v14 = MEMORY[0x1BA9B4580](1, v11);
      }
      else
      {
        uint64_t v14 = *(void *)(v11 + 40);
        swift_retain();
      }
      if ((sub_1B6741358(*(void *)(v14 + 16), *(void *)(v14 + 24), a1, a2, a3, a4) & 1) == 0)
      {
        swift_release();
        uint64_t v16 = v12 - 2;
        if (!v16) {
          goto LABEL_7;
        }
        uint64_t v17 = 0;
        unint64_t v18 = a1 >> 16;
        unint64_t v19 = a2 >> 16;
        while (1)
        {
          if (v13)
          {
            uint64_t v14 = MEMORY[0x1BA9B4580](v17 + 2, v11);
          }
          else
          {
            uint64_t v14 = *(void *)(v11 + 8 * v17 + 48);
            swift_retain();
          }
          uint64_t v20 = *(void *)(v14 + 16);
          unint64_t v21 = *(void *)(v14 + 24);
          uint64_t v22 = (v21 & 0x2000000000000000) != 0 ? HIBYTE(v21) & 0xF : v20 & 0xFFFFFFFFFFFFLL;
          BOOL v23 = v20 == a3 && v21 == a4;
          BOOL v24 = v23 && v18 == 0;
          BOOL v25 = v24 && v22 == v19;
          if (v25 || (sub_1B6E33078() & 1) != 0) {
            break;
          }
          swift_release();
          if (v16 == ++v17) {
            goto LABEL_7;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    return v14;
  }
  uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v12) {
    goto LABEL_3;
  }
LABEL_7:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B666D414(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_1B6B8BC94();
  unint64_t v9 = v8;
  if (v8 >> 62)
  {
    uint64_t v10 = sub_1B6E32C18();
    if (!v10) {
      goto LABEL_7;
    }
LABEL_3:
    unint64_t v11 = v9 & 0xC000000000000001;
    if ((v9 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = MEMORY[0x1BA9B4580](0, v9);
    }
    else
    {
      uint64_t v12 = *(void *)(v9 + 32);
      swift_retain();
    }
    if ((sub_1B6741358(*(void *)(v12 + 16), *(void *)(v12 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      swift_release();
      if (v10 == 1) {
        goto LABEL_7;
      }
      if (v11)
      {
        uint64_t v12 = MEMORY[0x1BA9B4580](1, v9);
      }
      else
      {
        uint64_t v12 = *(void *)(v9 + 40);
        swift_retain();
      }
      if ((sub_1B6741358(*(void *)(v12 + 16), *(void *)(v12 + 24), a1, a2, a3, a4) & 1) == 0)
      {
        swift_release();
        uint64_t v14 = v10 - 2;
        if (!v14) {
          goto LABEL_7;
        }
        uint64_t v15 = 0;
        unint64_t v16 = a1 >> 16;
        unint64_t v17 = a2 >> 16;
        while (1)
        {
          if (v11)
          {
            uint64_t v12 = MEMORY[0x1BA9B4580](v15 + 2, v9);
          }
          else
          {
            uint64_t v12 = *(void *)(v9 + 8 * v15 + 48);
            swift_retain();
          }
          uint64_t v18 = *(void *)(v12 + 16);
          unint64_t v19 = *(void *)(v12 + 24);
          uint64_t v20 = (v19 & 0x2000000000000000) != 0 ? HIBYTE(v19) & 0xF : v18 & 0xFFFFFFFFFFFFLL;
          BOOL v21 = v18 == a3 && v19 == a4;
          BOOL v22 = v21 && v16 == 0;
          BOOL v23 = v22 && v20 == v17;
          if (v23 || (sub_1B6E33078() & 1) != 0) {
            break;
          }
          swift_release();
          if (v14 == ++v15) {
            goto LABEL_7;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    return v12;
  }
  uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v10) {
    goto LABEL_3;
  }
LABEL_7:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B666D5F4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unint64_t v8 = sub_1B6B8753C();
  unint64_t v9 = v8;
  if (v8 >> 62)
  {
    uint64_t v10 = sub_1B6E32C18();
    if (!v10) {
      goto LABEL_7;
    }
LABEL_3:
    unint64_t v11 = v9 & 0xC000000000000001;
    if ((v9 & 0xC000000000000001) != 0)
    {
      uint64_t v12 = MEMORY[0x1BA9B4580](0, v9);
    }
    else
    {
      uint64_t v12 = *(void *)(v9 + 32);
      swift_retain();
    }
    if ((sub_1B6741358(*(void *)(v12 + 16), *(void *)(v12 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      swift_release();
      if (v10 == 1) {
        goto LABEL_7;
      }
      if (v11)
      {
        uint64_t v12 = MEMORY[0x1BA9B4580](1, v9);
      }
      else
      {
        uint64_t v12 = *(void *)(v9 + 40);
        swift_retain();
      }
      if ((sub_1B6741358(*(void *)(v12 + 16), *(void *)(v12 + 24), a1, a2, a3, a4) & 1) == 0)
      {
        swift_release();
        uint64_t v14 = v10 - 2;
        if (!v14) {
          goto LABEL_7;
        }
        uint64_t v15 = 0;
        unint64_t v16 = a1 >> 16;
        unint64_t v17 = a2 >> 16;
        while (1)
        {
          if (v11)
          {
            uint64_t v12 = MEMORY[0x1BA9B4580](v15 + 2, v9);
          }
          else
          {
            uint64_t v12 = *(void *)(v9 + 8 * v15 + 48);
            swift_retain();
          }
          uint64_t v18 = *(void *)(v12 + 16);
          unint64_t v19 = *(void *)(v12 + 24);
          uint64_t v20 = (v19 & 0x2000000000000000) != 0 ? HIBYTE(v19) & 0xF : v18 & 0xFFFFFFFFFFFFLL;
          BOOL v21 = v18 == a3 && v19 == a4;
          BOOL v22 = v21 && v16 == 0;
          BOOL v23 = v22 && v20 == v17;
          if (v23 || (sub_1B6E33078() & 1) != 0) {
            break;
          }
          swift_release();
          if (v14 == ++v15) {
            goto LABEL_7;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    return v12;
  }
  uint64_t v10 = *(void *)((v8 & 0xFFFFFFFFFFFFFF8) + 0x10);
  if (v10) {
    goto LABEL_3;
  }
LABEL_7:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B666D7D4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  if (qword_1E9DCC0E8 != -1) {
    swift_once();
  }
  uint64_t v8 = qword_1E9E48F30;
  if ((unint64_t)qword_1E9E48F30 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v9 = sub_1B6E32C18();
    if (!v9) {
      goto LABEL_9;
    }
LABEL_5:
    unint64_t v10 = v8 & 0xC000000000000001;
    if ((v8 & 0xC000000000000001) != 0)
    {
      uint64_t v11 = MEMORY[0x1BA9B4580](0, v8);
    }
    else
    {
      uint64_t v11 = *(void *)(v8 + 32);
      swift_retain();
    }
    if ((sub_1B6741358(*(void *)(v11 + 16), *(void *)(v11 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      swift_release();
      if (v9 == 1) {
        goto LABEL_9;
      }
      if (v10)
      {
        uint64_t v11 = MEMORY[0x1BA9B4580](1, v8);
      }
      else
      {
        uint64_t v11 = *(void *)(v8 + 40);
        swift_retain();
      }
      if ((sub_1B6741358(*(void *)(v11 + 16), *(void *)(v11 + 24), a1, a2, a3, a4) & 1) == 0)
      {
        swift_release();
        uint64_t v13 = v9 - 2;
        if (!v13) {
          goto LABEL_9;
        }
        uint64_t v14 = 0;
        unint64_t v15 = a1 >> 16;
        unint64_t v16 = a2 >> 16;
        while (1)
        {
          if (v10)
          {
            uint64_t v11 = MEMORY[0x1BA9B4580](v14 + 2, v8);
          }
          else
          {
            uint64_t v11 = *(void *)(v8 + 8 * v14 + 48);
            swift_retain();
          }
          uint64_t v17 = *(void *)(v11 + 16);
          unint64_t v18 = *(void *)(v11 + 24);
          uint64_t v19 = (v18 & 0x2000000000000000) != 0 ? HIBYTE(v18) & 0xF : v17 & 0xFFFFFFFFFFFFLL;
          BOOL v20 = v17 == a3 && v18 == a4;
          BOOL v21 = v20 && v15 == 0;
          BOOL v22 = v21 && v19 == v16;
          if (v22 || (sub_1B6E33078() & 1) != 0) {
            break;
          }
          swift_release();
          if (v13 == ++v14) {
            goto LABEL_9;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    return v11;
  }
  uint64_t v9 = *(void *)((qword_1E9E48F30 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v9) {
    goto LABEL_5;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B666D9F8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, void *a5, unint64_t *a6)
{
  if (*a5 != -1) {
    swift_once();
  }
  unint64_t v11 = *a6;
  if (v11 >> 62)
  {
    swift_bridgeObjectRetain();
    uint64_t v12 = sub_1B6E32C18();
    if (!v12) {
      goto LABEL_9;
    }
LABEL_5:
    unint64_t v13 = v11 & 0xC000000000000001;
    if ((v11 & 0xC000000000000001) != 0)
    {
      uint64_t v14 = MEMORY[0x1BA9B4580](0, v11);
    }
    else
    {
      uint64_t v14 = *(void *)(v11 + 32);
      swift_retain();
    }
    if ((sub_1B6741358(*(void *)(v14 + 16), *(void *)(v14 + 24), a1, a2, a3, a4) & 1) == 0)
    {
      swift_release();
      if (v12 == 1) {
        goto LABEL_9;
      }
      if (v13)
      {
        uint64_t v14 = MEMORY[0x1BA9B4580](1, v11);
      }
      else
      {
        uint64_t v14 = *(void *)(v11 + 40);
        swift_retain();
      }
      if ((sub_1B6741358(*(void *)(v14 + 16), *(void *)(v14 + 24), a1, a2, a3, a4) & 1) == 0)
      {
        swift_release();
        uint64_t v16 = v12 - 2;
        if (!v16) {
          goto LABEL_9;
        }
        uint64_t v17 = 0;
        unint64_t v18 = a1 >> 16;
        unint64_t v19 = a2 >> 16;
        while (1)
        {
          if (v13)
          {
            uint64_t v14 = MEMORY[0x1BA9B4580](v17 + 2, v11);
          }
          else
          {
            uint64_t v14 = *(void *)(v11 + 8 * v17 + 48);
            swift_retain();
          }
          uint64_t v20 = *(void *)(v14 + 16);
          unint64_t v21 = *(void *)(v14 + 24);
          uint64_t v22 = (v21 & 0x2000000000000000) != 0 ? HIBYTE(v21) & 0xF : v20 & 0xFFFFFFFFFFFFLL;
          BOOL v23 = v20 == a3 && v21 == a4;
          BOOL v24 = v23 && v18 == 0;
          BOOL v25 = v24 && v22 == v19;
          if (v25 || (sub_1B6E33078() & 1) != 0) {
            break;
          }
          swift_release();
          if (v16 == ++v17) {
            goto LABEL_9;
          }
        }
      }
    }
    swift_bridgeObjectRelease();
    return v14;
  }
  uint64_t v12 = *(void *)((v11 & 0xFFFFFFFFFFFFFF8) + 0x10);
  swift_bridgeObjectRetain();
  if (v12) {
    goto LABEL_5;
  }
LABEL_9:
  swift_bridgeObjectRelease();
  return 0;
}

uint64_t sub_1B666DC08(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v10 = (*(uint64_t (**)(uint64_t))(*(void *)(a6 + 8) + 24))(a5);
  unint64_t v11 = v10;
  if (v10 >> 62)
  {
    uint64_t v12 = sub_1B6E32C18();
    if (!v12) {
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v12 = *(void *)((v10 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (!v12) {
      goto LABEL_27;
    }
  }
  if ((v11 & 0xC000000000000001) != 0)
  {
    uint64_t v13 = MEMORY[0x1BA9B4580](0, v11);
  }
  else
  {
    uint64_t v13 = *(void *)(v11 + 32);
    swift_retain();
  }
  if ((sub_1B6741358(*(void *)(v13 + 16), *(void *)(v13 + 24), a1, a2, a3, a4) & 1) == 0)
  {
    swift_release();
    uint64_t v14 = v12 - 1;
    if (v14)
    {
      uint64_t v15 = 0;
      unint64_t v16 = a1 >> 16;
      unint64_t v17 = a2 >> 16;
      do
      {
        if ((v11 & 0xC000000000000001) != 0)
        {
          uint64_t v13 = MEMORY[0x1BA9B4580](v15 + 1, v11);
        }
        else
        {
          uint64_t v13 = *(void *)(v11 + 8 * v15 + 40);
          swift_retain();
        }
        uint64_t v18 = *(void *)(v13 + 16);
        unint64_t v19 = *(void *)(v13 + 24);
        uint64_t v20 = (v19 & 0x2000000000000000) != 0 ? HIBYTE(v19) & 0xF : v18 & 0xFFFFFFFFFFFFLL;
        BOOL v21 = v18 == a3 && v19 == a4;
        BOOL v22 = v21 && v16 == 0;
        BOOL v23 = v22 && v20 == v17;
        if (v23 || (sub_1B6E33078() & 1) != 0) {
          goto LABEL_6;
        }
        swift_release();
      }
      while (v14 != ++v15);
    }
LABEL_27:
    swift_bridgeObjectRelease();
    return 0;
  }
LABEL_6:
  swift_bridgeObjectRelease();
  return v13;
}

uint64_t sub_1B666DDAC(uint64_t a1, uint64_t a2, __int16 a3)
{
  unint64_t v3 = sub_1B667D138(a1, a3 & 0x101);
  unint64_t v4 = v3;
  if (!(v3 >> 62))
  {
    uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v5 = sub_1B6E32C18();
  if (!v5) {
    goto LABEL_9;
  }
LABEL_3:
  sub_1B6E32768();
  uint64_t v6 = 0;
  while (1)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = MEMORY[0x1BA9B4580](v6, v4);
    }
    else
    {
      uint64_t v7 = *(void *)(v4 + 8 * v6 + 32);
      swift_retain();
    }
    swift_retain_n();
    char v8 = sub_1B6E31708();
    swift_release();
    swift_release();
    if (v8) {
      break;
    }
    swift_release();
    if (v5 == ++v6) {
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1B666DEE8()
{
  if (qword_1E9DCC0D8 != -1) {
    swift_once();
  }
  unint64_t v1 = qword_1E9E48F20;
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v2 = *(void *)(v0 + 96);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  unint64_t v4 = sub_1B68C75F8(v3, v2, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B6712824);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B6641860((unint64_t)v4);
  if (!(v1 >> 62))
  {
    uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1B6E32C18();
  swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_11;
  }
LABEL_5:
  sub_1B6E32768();
  uint64_t v6 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = MEMORY[0x1BA9B4580](v6, v1);
    }
    else
    {
      uint64_t v7 = *(void *)(v1 + 8 * v6 + 32);
      swift_retain();
    }
    swift_retain_n();
    char v8 = sub_1B6E31708();
    swift_release();
    swift_release();
    if (v8) {
      break;
    }
    swift_release();
    if (v5 == ++v6) {
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1B666E0D0()
{
  if (qword_1E9DCC0E8 != -1) {
    swift_once();
  }
  uint64_t v0 = qword_1E9E48F30;
  if (!((unint64_t)qword_1E9E48F30 >> 62))
  {
    uint64_t v1 = *(void *)((qword_1E9E48F30 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v1) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v1 = sub_1B6E32C18();
  if (!v1) {
    goto LABEL_11;
  }
LABEL_5:
  sub_1B6E32768();
  uint64_t v2 = 0;
  while (1)
  {
    if ((v0 & 0xC000000000000001) != 0)
    {
      uint64_t v3 = MEMORY[0x1BA9B4580](v2, v0);
    }
    else
    {
      uint64_t v3 = *(void *)(v0 + 8 * v2 + 32);
      swift_retain();
    }
    swift_retain_n();
    char v4 = sub_1B6E31708();
    swift_release();
    swift_release();
    if (v4) {
      break;
    }
    swift_release();
    if (v1 == ++v2) {
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B666E248(uint64_t a1, void *a2, uint64_t *a3)
{
  if (*a2 != -1) {
    swift_once();
  }
  uint64_t v4 = *a3;
  if (!((unint64_t)*a3 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v5) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1B6E32C18();
  if (!v5) {
    goto LABEL_11;
  }
LABEL_5:
  sub_1B6E32768();
  uint64_t v6 = 0;
  while (1)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = MEMORY[0x1BA9B4580](v6, v4);
    }
    else
    {
      uint64_t v7 = *(void *)(v4 + 8 * v6 + 32);
      swift_retain();
    }
    swift_retain_n();
    char v8 = sub_1B6E31708();
    swift_release();
    swift_release();
    if (v8) {
      break;
    }
    swift_release();
    if (v5 == ++v6) {
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1B666E3AC()
{
  unint64_t v0 = sub_1B6B88708();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v2 = sub_1B6E32C18();
  if (!v2) {
    goto LABEL_9;
  }
LABEL_3:
  sub_1B6E32768();
  uint64_t v3 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = MEMORY[0x1BA9B4580](v3, v1);
    }
    else
    {
      uint64_t v4 = *(void *)(v1 + 8 * v3 + 32);
      swift_retain();
    }
    swift_retain_n();
    char v5 = sub_1B6E31708();
    swift_release();
    swift_release();
    if (v5) {
      break;
    }
    swift_release();
    if (v2 == ++v3) {
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B666E4E0()
{
  unint64_t v0 = sub_1B6B8BC94();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v2 = sub_1B6E32C18();
  if (!v2) {
    goto LABEL_9;
  }
LABEL_3:
  sub_1B6E32768();
  uint64_t v3 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = MEMORY[0x1BA9B4580](v3, v1);
    }
    else
    {
      uint64_t v4 = *(void *)(v1 + 8 * v3 + 32);
      swift_retain();
    }
    swift_retain_n();
    char v5 = sub_1B6E31708();
    swift_release();
    swift_release();
    if (v5) {
      break;
    }
    swift_release();
    if (v2 == ++v3) {
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B666E614()
{
  unint64_t v0 = sub_1B6B8753C();
  unint64_t v1 = v0;
  if (!(v0 >> 62))
  {
    uint64_t v2 = *(void *)((v0 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v2) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v2 = sub_1B6E32C18();
  if (!v2) {
    goto LABEL_9;
  }
LABEL_3:
  sub_1B6E32768();
  uint64_t v3 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v4 = MEMORY[0x1BA9B4580](v3, v1);
    }
    else
    {
      uint64_t v4 = *(void *)(v1 + 8 * v3 + 32);
      swift_retain();
    }
    swift_retain_n();
    char v5 = sub_1B6E31708();
    swift_release();
    swift_release();
    if (v5) {
      break;
    }
    swift_release();
    if (v2 == ++v3) {
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B666E748()
{
  if (qword_1E9DCC720 != -1) {
    swift_once();
  }
  unint64_t v1 = qword_1E9E49848;
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v4 = sub_1B68C75F8(v3, v2, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B6712824);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain();
  sub_1B6641860((unint64_t)v4);
  if (!(v1 >> 62))
  {
    uint64_t v5 = *(void *)((v1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_5;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v5 = sub_1B6E32C18();
  swift_bridgeObjectRelease();
  if (!v5) {
    goto LABEL_11;
  }
LABEL_5:
  sub_1B6E32768();
  uint64_t v6 = 0;
  while (1)
  {
    if ((v1 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = MEMORY[0x1BA9B4580](v6, v1);
    }
    else
    {
      uint64_t v7 = *(void *)(v1 + 8 * v6 + 32);
      swift_retain();
    }
    swift_retain_n();
    char v8 = sub_1B6E31708();
    swift_release();
    swift_release();
    if (v8) {
      break;
    }
    swift_release();
    if (v5 == ++v6) {
      goto LABEL_11;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1B666E930(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v3 = (*(uint64_t (**)(uint64_t))(*(void *)(a3 + 8) + 24))(a2);
  unint64_t v4 = v3;
  if (!(v3 >> 62))
  {
    uint64_t v5 = *(void *)((v3 & 0xFFFFFFFFFFFFFF8) + 0x10);
    if (v5) {
      goto LABEL_3;
    }
LABEL_9:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v5 = sub_1B6E32C18();
  if (!v5) {
    goto LABEL_9;
  }
LABEL_3:
  sub_1B6E32768();
  uint64_t v6 = 0;
  while (1)
  {
    if ((v4 & 0xC000000000000001) != 0)
    {
      uint64_t v7 = MEMORY[0x1BA9B4580](v6, v4);
    }
    else
    {
      uint64_t v7 = *(void *)(v4 + 8 * v6 + 32);
      swift_retain();
    }
    swift_retain_n();
    char v8 = sub_1B6E31708();
    swift_release();
    swift_release();
    if (v8) {
      break;
    }
    swift_release();
    if (v5 == ++v6) {
      goto LABEL_9;
    }
  }
  swift_bridgeObjectRelease();
  return v7;
}

char *sub_1B666EA80(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(uint64_t (**)(void))(a2 + 64);
  if ((v4() & 0x20) != 0)
  {
    uint64_t v5 = sub_1B68C19D0(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v7 = *((void *)v5 + 2);
    unint64_t v6 = *((void *)v5 + 3);
    if (v7 >= v6 >> 1) {
      uint64_t v5 = sub_1B68C19D0(v6 > 1, v7 + 1, 1, v5);
    }
    *((void *)v5 + 2) = v7 + 1;
    v5[v7 + 32] = 2;
  }
  else
  {
    uint64_t v5 = (char *)MEMORY[0x1E4FBC860];
  }
  if ((((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2) & 0x10) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_1B68C19D0(0, *((void *)v5 + 2) + 1, 1, v5);
    }
    unint64_t v9 = *((void *)v5 + 2);
    unint64_t v8 = *((void *)v5 + 3);
    if (v9 >= v8 >> 1) {
      uint64_t v5 = sub_1B68C19D0(v8 > 1, v9 + 1, 1, v5);
    }
    *((void *)v5 + 2) = v9 + 1;
    v5[v9 + 32] = 1;
  }
  if ((((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2) & 0x40) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_1B68C19D0(0, *((void *)v5 + 2) + 1, 1, v5);
    }
    unint64_t v11 = *((void *)v5 + 2);
    unint64_t v10 = *((void *)v5 + 3);
    if (v11 >= v10 >> 1) {
      uint64_t v5 = sub_1B68C19D0(v10 > 1, v11 + 1, 1, v5);
    }
    *((void *)v5 + 2) = v11 + 1;
    v5[v11 + 32] = 3;
  }
  if ((((uint64_t (*)(uint64_t, uint64_t))v4)(a1, a2) & 0x80) != 0)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v5 = sub_1B68C19D0(0, *((void *)v5 + 2) + 1, 1, v5);
    }
    unint64_t v13 = *((void *)v5 + 2);
    unint64_t v12 = *((void *)v5 + 3);
    if (v13 >= v12 >> 1) {
      uint64_t v5 = sub_1B68C19D0(v12 > 1, v13 + 1, 1, v5);
    }
    *((void *)v5 + 2) = v13 + 1;
    v5[v13 + 32] = 4;
  }
  return v5;
}

BOOL sub_1B666ECCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = sub_1B6A5DDA4(a1, a2, a4, *(void *)(a5 + 8));
  BOOL result = 0;
  if (v6)
  {
    uint64_t v7 = *(void *)(v6 + 40);
    swift_release();
    if (v7 == a3 || a3 == MEMORY[0x1E4FBC840] + 8) {
      return 1;
    }
  }
  return result;
}

uint64_t sub_1B666ED2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, char a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17)
{
  return sub_1B62B2E34(a3, a14, a1, a2, a6, a7 & 1, a8, a9 & 1, a10, a11 & 1, a4, a5, a12, a13, a15, a16, a3, a17);
}

uint64_t sub_1B666EDB4@<X0>(uint64_t a1@<X2>, uint64_t a2@<X4>, uint64_t a3@<X8>)
{
  (*(void (**)(void *__return_ptr))(a1 + 32))(v9);
  uint64_t v5 = MEMORY[0x1E4FBC840] + 8;
  sub_1B674CA9C((uint64_t)v9, (uint64_t)&v8, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8);
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980F60, v5, MEMORY[0x1E4FBB718]);
  int v6 = swift_dynamicCast();
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(a2 - 8) + 56))(a3, v6 ^ 1u, 1, a2);
}

uint64_t sub_1B666EE94(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (v3 == *a1 && v4 == a1[1]) {
    return 1;
  }
  else {
    return sub_1B6E334B8();
  }
}

uint64_t sub_1B666EEBC(void *a1)
{
  return MEMORY[0x1F4183B40](*a1, a1[1]);
}

uint64_t sub_1B666EEC8(uint64_t a1, void *a2, uint64_t a3)
{
  return (*(uint64_t (**)(void, void, void))(*(void *)((char *)a2 + a3 - 8) + 24))(*a2, a2[1], *(void *)((char *)a2 + a3 - 24));
}

uint64_t sub_1B666EF0C()
{
  return 0x4520746F4E206F44;
}

uint64_t sub_1B666EF30()
{
  return MEMORY[0x1E4FBC860];
}

void sub_1B666EF3C()
{
}

uint64_t sub_1B666EF78()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DF70, MEMORY[0x1E4FBB550], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6741FAC;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6741FEC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B6738FA8(0x726564726FLL, 0xE500000000000000, 0xC059000000000000, 0, 0x4059000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0xD000000000000011, 0x80000001B6F32510,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B674201C);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E18 = v0;
  return result;
}

uint64_t sub_1B666F144()
{
  return 0x696C756465686353;
}

uint64_t sub_1B666F160()
{
  return 8;
}

uint64_t sub_1B666F168(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, qword_1E9DCBFA0);
}

uint64_t sub_1B666F18C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, qword_1E9DCBFA0, (unint64_t *)&qword_1E9E48E18);
}

uint64_t sub_1B666F1C4(uint64_t a1)
{
  return sub_1B666E248(a1, qword_1E9DCBFA0, &qword_1E9E48E18);
}

uint64_t sub_1B666F1FC()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78140;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v2 = swift_getKeyPath();
  sub_1B67426AC();
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B6E77050;
  *(void *)(v3 + 32) = 0;
  *(void *)(v3 + 40) = 0xE000000000000000;
  uint64_t v4 = MEMORY[0x1E4FBC4C0];
  *(void *)(v3 + 72) = MEMORY[0x1E4FBC4C0];
  *(_DWORD *)(v3 + 48) = 0;
  sub_1B62CB19C(0, (unint64_t *)&unk_1EB97DFE8, v4, (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v5 = (void *)swift_allocObject();
  void v5[4] = sub_1B6742718;
  void v5[5] = KeyPath;
  _OWORD v5[2] = sub_1B6742758;
  _OWORD v5[3] = KeyPath;
  void v5[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1B673A0F0(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v2, 1, 0, (uint64_t)v5, KeyPath, 0, 0,
         0,
         v3,
         0,
         (uint64_t)sub_1B6742924);
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 32) = v6;
  uint64_t v7 = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DF60, MEMORY[0x1E4FBB390], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v8 = (void *)swift_allocObject();
  v8[4] = sub_1B6742788;
  v8[5] = v7;
  void v8[2] = sub_1B67427C8;
  v8[3] = v7;
  v8[6] = v7;
  swift_allocObject();
  swift_retain_n();
  uint64_t v9 = sub_1B6741564(0x7A696D6F646E6172, 0xE900000000000065, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v8, v7, 0xD000000000000027, 0x80000001B6F325B0,
         32,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B67427F8);
  swift_release();
  *(void *)(v0 + 40) = v9;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997E08 = v0;
  return result;
}

BOOL sub_1B666F55C(uint64_t a1)
{
  return (a1 & 0x100000000) == 0;
}

uint64_t sub_1B666F568()
{
  return 0x53206D6F646E6152;
}

uint64_t sub_1B666F588(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, qword_1EB97FC68);
}

uint64_t sub_1B666F5AC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, qword_1EB97FC68, (unint64_t *)&qword_1EB997E08);
}

uint64_t sub_1B666F5E4(uint64_t a1)
{
  return sub_1B666E248(a1, qword_1EB97FC68, &qword_1EB997E08);
}

uint64_t sub_1B666F61C()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78150;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DF60, MEMORY[0x1E4FBB390], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6742A84;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6742AC4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B6741564(0x2073657461647055, 0xEE00555047206E4FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 19, 0, (uint64_t)v2, KeyPath, 0xD000000000000036, 0x80000001B6F325E0,
         32,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B6743394);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t v4 = swift_getKeyPath();
  uint64_t v5 = (void *)swift_allocObject();
  void v5[4] = sub_1B6742A84;
  void v5[5] = v4;
  _OWORD v5[2] = sub_1B6742AC4;
  _OWORD v5[3] = v4;
  void v5[6] = v4;
  swift_allocObject();
  swift_retain_n();
  uint64_t v6 = MEMORY[0x1E4FBC860];
  uint64_t v7 = sub_1B6741564(0x206E6F20736E7552, 0xEB00000000555047, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 19, 0, (uint64_t)v5, v4, 0, 0,
         4,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B6743394);
  swift_release();
  *(void *)(v0 + 40) = v7;
  *(void *)(v0 + 48) = sub_1B671F688(1087, 1684366675, 0xE400000000000000, (uint64_t)&type metadata for Seed, (uint64_t)&off_1F0F9EA48, 0x65756C6176, 0xE500000000000000);
  *(void *)(v0 + 56) = sub_1B671F688(1087, 0xD000000000000014, 0x80000001B6F32620, (uint64_t)&type metadata for Seed, (uint64_t)&off_1F0F9EA48, 0x7A696D6F646E6172, 0xE900000000000065);
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = swift_getKeyPath();
  sub_1B62CB19C(0, (unint64_t *)&unk_1EB97DFB0, MEMORY[0x1E4FBC1C8], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  unint64_t v10 = (void *)swift_allocObject();
  _OWORD v10[4] = sub_1B6742B14;
  _OWORD v10[5] = v9;
  void v10[2] = sub_1B6742B54;
  v10[3] = v9;
  v10[6] = v9;
  swift_allocObject();
  swift_retain_n();
  uint64_t v11 = sub_1B673EA58(0x6974616C756D6973, 0xEF7865646E496E6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v10, v9, 0, 0,
          0,
          v6,
          0,
          (uint64_t)sub_1B6743218);
  swift_release();
  sub_1B62CB19C(0, &qword_1E9DCE0D0, (uint64_t)&type metadata for EmitterDescription.PhysicsSimulation, (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  unint64_t v12 = (void *)swift_allocObject();
  _OWORD v12[4] = sub_1B6742B84;
  uint64_t v12[5] = v8;
  v12[2] = sub_1B6742BC4;
  v12[3] = v8;
  void v12[6] = v8;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  uint64_t v13 = sub_1B672215C(0x73636973796850, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v12, v8, 0, 0,
          32,
          v6,
          v11);
  swift_release();
  swift_release();
  *(void *)(v0 + 64) = v13;
  uint64_t v14 = swift_getKeyPath();
  uint64_t v15 = (void *)swift_allocObject();
  v15[4] = sub_1B6742A84;
  v15[5] = v14;
  _OWORD v15[2] = sub_1B6742AC4;
  v15[3] = v14;
  v15[6] = v14;
  swift_allocObject();
  swift_retain_n();
  uint64_t v16 = sub_1B6741564(0x6C61636F4C7369, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v15, v14, 0, 0,
          0,
          v6,
          0,
          (uint64_t)sub_1B6743394);
  swift_release();
  *(void *)(v0 + 72) = v16;
  uint64_t v17 = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DF68, MEMORY[0x1E4FBB470], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v18 = (void *)swift_allocObject();
  void v18[4] = sub_1B6742BF4;
  v18[5] = v17;
  long long v18[2] = sub_1B6742C34;
  v18[3] = v17;
  v18[6] = v17;
  swift_allocObject();
  swift_retain_n();
  uint64_t v19 = MEMORY[0x1E4FBC860];
  uint64_t v20 = sub_1B673F678(0x754470756D726157, 0xEE006E6F69746172, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v18, v17, 0, 0,
          32,
          MEMORY[0x1E4FBC860],
          0,
          (uint64_t)sub_1B6742FB4);
  swift_release();
  *(void *)(v0 + 80) = v20;
  uint64_t v21 = swift_getKeyPath();
  BOOL v22 = (void *)swift_allocObject();
  _OWORD v22[4] = sub_1B6742BF4;
  v22[5] = v21;
  _OWORD v22[2] = sub_1B6742C34;
  v22[3] = v21;
  v22[6] = v21;
  swift_allocObject();
  swift_retain_n();
  uint64_t v23 = sub_1B673F678(0x6974616C756D6953, 0xEE00657461526E6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v22, v21, 0, 0,
          0,
          v19,
          0,
          (uint64_t)sub_1B6742FB4);
  swift_release();
  *(void *)(v0 + 88) = v23;
  uint64_t v24 = swift_getKeyPath();
  sub_1B67426AC();
  uint64_t v25 = swift_allocObject();
  *(_OWORD *)(v25 + 16) = xmmword_1B6E77050;
  *(void *)(v25 + 32) = 0;
  *(void *)(v25 + 40) = 0xE000000000000000;
  uint64_t v26 = MEMORY[0x1E4FBB550];
  *(void *)(v25 + 72) = MEMORY[0x1E4FBB550];
  *(void *)(v25 + 48) = 10;
  sub_1B6742CC0();
  uint64_t v27 = (void *)swift_allocObject();
  void v27[4] = sub_1B6742C64;
  v27[5] = v24;
  v27[2] = sub_1B6742C90;
  v27[3] = v24;
  void v27[6] = v24;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v28 = sub_1B671D47C(0xD000000000000010, 0x80000001B6F32640, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v27, v24, 0, 0,
          32,
          v25,
          0,
          &qword_1EB9803E0,
          v26,
          (uint64_t)sub_1B6742D78);
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 96) = v28;
  uint64_t v29 = swift_getKeyPath();
  uint64_t v30 = (void *)swift_allocObject();
  v30[4] = sub_1B6742A84;
  v30[5] = v29;
  v30[2] = sub_1B6742AC4;
  v30[3] = v29;
  v30[6] = v29;
  swift_allocObject();
  swift_retain_n();
  uint64_t v31 = MEMORY[0x1E4FBC860];
  uint64_t v32 = sub_1B6741564(0x6E756F426576694CLL, 0xEF786F42676E6964, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v30, v29, 0, 0,
          32,
          MEMORY[0x1E4FBC860],
          0,
          (uint64_t)sub_1B6743394);
  swift_release();
  *(void *)(v0 + 104) = v32;
  uint64_t v33 = swift_getKeyPath();
  uint64_t v34 = (void *)swift_allocObject();
  v34[4] = sub_1B6742A84;
  v34[5] = v33;
  void v34[2] = sub_1B6742AC4;
  void v34[3] = v33;
  v34[6] = v33;
  swift_allocObject();
  swift_retain_n();
  uint64_t v35 = sub_1B6741564(0xD000000000000011, 0x80000001B6F32660, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v34, v33, 0, 0,
          32,
          v31,
          0,
          (uint64_t)sub_1B6743394);
  swift_release();
  *(void *)(v0 + 112) = v35;
  uint64_t v36 = swift_getKeyPath();
  uint64_t v37 = (void *)swift_allocObject();
  v37[4] = sub_1B6742A84;
  v37[5] = v36;
  void v37[2] = sub_1B6742AC4;
  v37[3] = v36;
  v37[6] = v36;
  swift_allocObject();
  swift_retain_n();
  uint64_t v38 = sub_1B6741564(0x6E756F42776F6853, 0xEF786F42676E6964, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v37, v36, 0, 0,
          32,
          v31,
          0,
          (uint64_t)sub_1B6743394);
  swift_release();
  *(void *)(v0 + 120) = v38;
  uint64_t v39 = swift_getKeyPath();
  int64_t v40 = (void *)swift_allocObject();
  v40[4] = sub_1B6742A84;
  v40[5] = v39;
  v40[2] = sub_1B6742AC4;
  void v40[3] = v39;
  v40[6] = v39;
  swift_allocObject();
  swift_retain_n();
  uint64_t v41 = MEMORY[0x1E4FBC860];
  uint64_t v42 = sub_1B6741564(0xD000000000000011, 0x80000001B6F2EBB0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v40, v39, 0, 0,
          0,
          MEMORY[0x1E4FBC860],
          0,
          (uint64_t)sub_1B6743394);
  swift_release();
  *(void *)(v0 + 128) = v42;
  uint64_t v43 = swift_getKeyPath();
  uint64_t v44 = swift_getKeyPath();
  char v45 = (void *)swift_allocObject();
  v45[4] = sub_1B6742BF4;
  void v45[5] = v43;
  v45[2] = sub_1B6742C34;
  void v45[3] = v43;
  v45[6] = v43;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  uint64_t v46 = sub_1B673F678(0xD000000000000017, 0x80000001B6F2EBD0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v44, 1, 0, (uint64_t)v45, v43, 0, 0,
          0,
          v41,
          0,
          (uint64_t)sub_1B6742FB4);
  swift_release();
  swift_release();
  *(void *)(v0 + 136) = v46;
  uint64_t v47 = swift_getKeyPath();
  uint64_t v48 = swift_getKeyPath();
  uint64_t v49 = (void *)swift_allocObject();
  v49[4] = sub_1B6742A84;
  v49[5] = v47;
  _OWORD v49[2] = sub_1B6742AC4;
  void v49[3] = v47;
  v49[6] = v47;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  uint64_t v50 = sub_1B6741564(0xD000000000000015, 0x80000001B6F32680, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, v48, 1, 0, (uint64_t)v49, v47, 0, 0,
          32,
          MEMORY[0x1E4FBC860],
          0,
          (uint64_t)sub_1B6743394);
  swift_release();
  swift_release();
  *(void *)(v0 + 144) = v50;
  uint64_t v51 = swift_getKeyPath();
  uint64_t v52 = (void *)swift_allocObject();
  v52[4] = sub_1B6742A84;
  v52[5] = v51;
  v52[2] = sub_1B6742AC4;
  long long v52[3] = v51;
  v52[6] = v51;
  swift_allocObject();
  swift_retain_n();
  uint64_t v53 = MEMORY[0x1E4FBC860];
  uint64_t v54 = sub_1B6741564(0xD000000000000014, 0x80000001B6F326A0, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v52, v51, 0xD000000000000045, 0x80000001B6F326C0,
          32,
          MEMORY[0x1E4FBC860],
          0,
          (uint64_t)sub_1B6743394);
  swift_release();
  *(void *)(v0 + 152) = v54;
  uint64_t v55 = swift_getKeyPath();
  uint64_t v56 = (void *)swift_allocObject();
  v56[4] = sub_1B6742A84;
  v56[5] = v55;
  v56[2] = sub_1B6742AC4;
  v56[3] = v55;
  v56[6] = v55;
  swift_allocObject();
  swift_retain_n();
  uint64_t v57 = sub_1B6741564(0x6E7568436F6E6F4DLL, 0xE90000000000006BLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v56, v55, 0xD000000000000034, 0x80000001B6F32710,
          32,
          v53,
          0,
          (uint64_t)sub_1B6743394);
  swift_release();
  *(void *)(v0 + 160) = v57;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E20 = v0;
  return result;
}

uint64_t sub_1B667081C()
{
  return *(unsigned __int8 *)(v0 + 76);
}

uint64_t sub_1B6670824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(*(void *)(a4 + 24) + 16);
  swift_getAssociatedTypeWitness();
  uint64_t v66 = v4;
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness();
  MEMORY[0x1F4188790](AssociatedTypeWitness, v5);
  uint64_t v65 = (char *)v62 - v6;
  uint64_t v7 = swift_checkMetadataState();
  uint64_t v8 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v9);
  uint64_t v11 = (char *)v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v67 = (char *)v62 - v14;
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v70 = (char *)v62 - v17;
  MEMORY[0x1F4188790](v18, v19);
  uint64_t v71 = (char *)v62 - v20;
  MEMORY[0x1F4188790](v21, v22);
  uint64_t v68 = (char *)v62 - v23;
  MEMORY[0x1F4188790](v24, v25);
  uint64_t v27 = (char *)v62 - v26;
  MEMORY[0x1F4188790](v28, v29);
  uint64_t v31 = (char *)v62 - v30;
  MEMORY[0x1F4188790](v32, v33);
  uint64_t v35 = (char *)v62 - v34;
  sub_1B6E31AE8();
  char v36 = sub_1B6E326E8();
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
  uint64_t v72 = v35;
  v37(v31, v35, v7);
  if ((v36 & 1) == 0)
  {
    int64_t v40 = *(void (**)(char *, uint64_t))(v8 + 8);
    v40(v31, v7);
LABEL_8:
    uint64_t v43 = v71;
    uint64_t v44 = v72;
    goto LABEL_14;
  }
  uint64_t v63 = v11;
  uint64_t v38 = sub_1B6E326D8();
  uint64_t v64 = v8;
  uint64_t v41 = *(void (**)(char *, uint64_t))(v8 + 8);
  uint64_t v39 = v8 + 8;
  int64_t v40 = v41;
  v41(v31, v7);
  if (v38 <= 64)
  {
    uint64_t v8 = v64;
    goto LABEL_8;
  }
  v62[1] = v39;
  uint64_t v42 = v27;
  v37(v27, v72, v7);
  unint64_t v74 = 0x8000000000000000;
  if ((sub_1B6E326E8() & 1) == 0)
  {
    char v45 = sub_1B6E326E8();
    uint64_t v46 = sub_1B6E326D8();
    if ((v45 & 1) == 0)
    {
      uint64_t v44 = v72;
      if (v46 < 64) {
        sub_1B6E326C8();
      }
      uint64_t v43 = v71;
      goto LABEL_13;
    }
    if (v46 <= 64)
    {
      swift_getAssociatedConformanceWitness();
      sub_1B6E337E8();
      char v59 = v68;
      sub_1B6E33488();
      char v60 = sub_1B6E31658();
      v40(v59, v7);
      uint64_t v61 = v63;
      (*(void (**)(char *, char *, uint64_t))(v64 + 32))(v63, v42, v7);
      uint64_t v43 = v71;
      uint64_t v44 = v72;
      if ((v60 & 1) == 0) {
        sub_1B6E326C8();
      }
      uint64_t v42 = v61;
      goto LABEL_13;
    }
    goto LABEL_11;
  }
  if (sub_1B6E326D8() >= 64)
  {
LABEL_11:
    sub_1B674EC6C();
    uint64_t v47 = v68;
    sub_1B6E32698();
    sub_1B6E31658();
    v40(v47, v7);
    uint64_t v43 = v71;
    goto LABEL_12;
  }
  sub_1B6E326C8();
  uint64_t v43 = v71;
LABEL_12:
  uint64_t v44 = v72;
LABEL_13:
  v40(v42, v7);
  uint64_t v8 = v64;
LABEL_14:
  uint64_t v48 = sub_1B6E326D8();
  v37(v43, v44, v7);
  if (v48 < 65)
  {
    uint64_t v54 = sub_1B6E326D8();
    v40(v43, v7);
    if (v54 != 64 || (sub_1B6E326E8() & 1) != 0) {
      goto LABEL_26;
    }
  }
  else
  {
    v40(v43, v7);
  }
  uint64_t v49 = v70;
  v37(v70, v44, v7);
  unint64_t v74 = 0x7FFFFFFFFFFFFFFFLL;
  char v50 = sub_1B6E326E8();
  uint64_t v51 = sub_1B6E326D8();
  if (v50)
  {
    if (v51 >= 65)
    {
      sub_1B674EC6C();
      uint64_t v52 = v68;
      sub_1B6E32698();
      sub_1B6E31658();
      v40(v52, v7);
      uint64_t v53 = v49;
LABEL_25:
      v40(v53, v7);
      goto LABEL_26;
    }
  }
  else if (v51 > 63)
  {
    uint64_t v73 = 0x7FFFFFFFFFFFFFFFLL;
    uint64_t v55 = v68;
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v68, v49, v7);
    sub_1B674EC6C();
    uint64_t v56 = v67;
    sub_1B6E32698();
    sub_1B6E31658();
    v40(v56, v7);
    uint64_t v53 = v55;
    goto LABEL_25;
  }
  sub_1B6E326C8();
  v40(v49, v7);
LABEL_26:
  uint64_t v57 = sub_1B6E326C8();
  v40(v44, v7);
  return v57;
}

uint64_t sub_1B6670FE8(uint64_t result)
{
  char v2 = result;
  if (result >= 5u) {
    char v2 = 5;
  }
  *unint64_t v1 = v2;
  return result;
}

unint64_t sub_1B6671000(unint64_t result)
{
  char v2 = 3;
  if (result < 3) {
    char v2 = result;
  }
  *unint64_t v1 = v2;
  return result;
}

unint64_t sub_1B6671014(unint64_t result)
{
  char v2 = 4;
  if (result < 4) {
    char v2 = result;
  }
  *unint64_t v1 = v2;
  return result;
}

uint64_t sub_1B6671028(uint64_t result)
{
  char v2 = result;
  if (result >= 3u) {
    char v2 = 3;
  }
  *unint64_t v1 = v2;
  return result;
}

uint64_t sub_1B6671040(uint64_t result)
{
  char v2 = result;
  if ((result & 0xFC) != 0) {
    char v2 = 4;
  }
  *unint64_t v1 = v2;
  return result;
}

uint64_t sub_1B6671058(uint64_t result)
{
  char v2 = result;
  if (result >= 6u) {
    char v2 = 6;
  }
  *unint64_t v1 = v2;
  return result;
}

uint64_t sub_1B6671070(uint64_t result)
{
  char v2 = result;
  if (result >= 7u) {
    char v2 = 7;
  }
  *unint64_t v1 = v2;
  return result;
}

uint64_t sub_1B6671088()
{
  return 0x73676E6974746553;
}

uint64_t sub_1B66710A0()
{
  return 49283080;
}

uint64_t sub_1B66710AC()
{
  if (qword_1E9DCBFB0 != -1) {
    swift_once();
  }

  return swift_bridgeObjectRetain();
}

uint64_t sub_1B6671108(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1E9DCBFB0);
}

uint64_t sub_1B667112C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1E9DCBFB0, (unint64_t *)&qword_1E9E48E20);
}

uint64_t sub_1B6671164(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1E9DCBFB0, &qword_1E9E48E20);
}

uint64_t sub_1B667119C()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78160;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1E9DCE138, (uint64_t)&type metadata for AABB, (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  char v2 = (void *)swift_allocObject();
  v2[4] = sub_1B67434E0;
  void v2[5] = KeyPath;
  v2[2] = sub_1B674350C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = MEMORY[0x1E4FBC860];
  uint64_t v4 = sub_1B6740B30(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         4,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B67439EC);
  swift_release();
  *(void *)(v0 + 32) = v4;
  uint64_t v5 = swift_getKeyPath();
  sub_1B6743614();
  uint64_t v6 = (void *)swift_allocObject();
  void v6[4] = sub_1B674359C;
  void v6[5] = v5;
  _OWORD v6[2] = sub_1B67435E4;
  _OWORD v6[3] = v5;
  void v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  uint64_t v7 = sub_1B673F248(7235949, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(void *)(v0 + 40) = v7;
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = (void *)swift_allocObject();
  void v9[4] = sub_1B674359C;
  void v9[5] = v8;
  v9[2] = sub_1B67435E4;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  uint64_t v10 = sub_1B673F248(7889261, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(void *)(v0 + 48) = v10;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E28 = v0;
  return result;
}

__n128 sub_1B6671520@<Q0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

__n128 sub_1B667152C(uint64_t a1, _OWORD *a2)
{
  __n128 result = *(__n128 *)a1;
  long long v3 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v3;
  return result;
}

void sub_1B6671538(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  *(double *)&long long v3 = sub_1B6743730(*a1, a1[1]);
  *a2 = v3;
}

void sub_1B6671564(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v6 = *a1;
  *(double *)v3.i64 = sub_1B6743760(*a2, a2[1]);
  *(double *)v4.i64 = sub_1B6743738(v6, v3);
  *a2 = v4;
  a2[1] = v5;
}

void sub_1B66715AC(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  *(double *)&long long v3 = sub_1B6743760(*a1, a1[1]);
  *a2 = v3;
}

void sub_1B66715D8(float32x4_t *a1, float32x4_t *a2)
{
  float32x4_t v6 = *a1;
  *(double *)v3.i64 = sub_1B6743730(*a2, a2[1]);
  *(double *)v4.i64 = sub_1B6743738(v3, v6);
  *a2 = v4;
  a2[1] = v5;
}

uint64_t sub_1B667161C()
{
  return 0x676E69646E756F42;
}

uint64_t sub_1B667163C(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1E9DCBFB8);
}

uint64_t sub_1B6671660(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1E9DCBFB8, (unint64_t *)&qword_1E9E48E28);
}

uint64_t sub_1B6671698(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1E9DCBFB8, &qword_1E9E48E28);
}

uint64_t sub_1B66716D0()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78160;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1E9DCE138, (uint64_t)&type metadata for AABB, (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  char v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6743B80;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6743BAC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = MEMORY[0x1E4FBC860];
  uint64_t v4 = sub_1B6740B30(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         4,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B6743D64);
  swift_release();
  *(void *)(v0 + 32) = v4;
  uint64_t v5 = swift_getKeyPath();
  sub_1B6743614();
  float32x4_t v6 = (void *)swift_allocObject();
  void v6[4] = sub_1B6743BDC;
  void v6[5] = v5;
  _OWORD v6[2] = sub_1B6743C24;
  _OWORD v6[3] = v5;
  void v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  uint64_t v7 = sub_1B6740F28(7235949, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, (uint64_t)v6, v5, 0, 0,
         0,
         v3,
         0);
  swift_release();
  *(void *)(v0 + 40) = v7;
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = (void *)swift_allocObject();
  void v9[4] = sub_1B6743BDC;
  void v9[5] = v8;
  v9[2] = sub_1B6743C24;
  v9[3] = v8;
  v9[6] = v8;
  swift_allocObject();
  swift_retain_n();
  uint64_t v10 = sub_1B6740F28(7889261, 0xE300000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, (uint64_t)v9, v8, 0, 0,
          0,
          v3,
          0);
  swift_release();
  *(void *)(v0 + 48) = v10;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E30 = v0;
  return result;
}

unint64_t sub_1B6671A54()
{
  return 0xD000000000000010;
}

uint64_t sub_1B6671A70(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1E9DCBFC0);
}

uint64_t sub_1B6671A94(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1E9DCBFC0, (unint64_t *)&qword_1E9E48E30);
}

uint64_t sub_1B6671ACC(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1E9DCBFC0, &qword_1E9E48E30);
}

uint64_t sub_1B6671B04()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78140;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B633C62C(0, (unint64_t *)&unk_1EB97DFA0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  char v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6743EDC;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6743F08;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = MEMORY[0x1E4FBC860];
  uint64_t v4 = sub_1B673CDE8(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         24,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t (*)(void))type metadata accessor for simd_float4x4,
         (uint64_t)sub_1B6743F40);
  swift_release();
  *(void *)(v0 + 32) = v4;
  uint64_t v5 = swift_getKeyPath();
  float32x4_t v6 = (void *)swift_allocObject();
  void v6[4] = sub_1B6743EDC;
  void v6[5] = v5;
  _OWORD v6[2] = sub_1B6743F08;
  _OWORD v6[3] = v5;
  void v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  uint64_t v7 = sub_1B673CDE8(0x65737265766E69, 0xE700000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         152,
         v3,
         0,
         (uint64_t (*)(void))type metadata accessor for simd_float4x4,
         (uint64_t)sub_1B6743F40);
  swift_release();
  *(void *)(v0 + 40) = v7;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E38 = v0;
  return result;
}

uint64_t sub_1B6671DEC()
{
  return 0x617254646C726F57;
}

uint64_t sub_1B6671E10(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1E9DCBFC8);
}

uint64_t sub_1B6671E34(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1E9DCBFC8, (unint64_t *)&qword_1E9E48E38);
}

uint64_t sub_1B6671E6C(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1E9DCBFC8, &qword_1E9E48E38);
}

uint64_t sub_1B6671EA4()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78140;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B6743614();
  char v2 = (void *)swift_allocObject();
  v2[4] = sub_1B67440A4;
  void v2[5] = KeyPath;
  v2[2] = sub_1B67440EC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = MEMORY[0x1E4FBC860];
  uint64_t v4 = sub_1B672C870(0x6E6F697469736F70, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, (uint64_t)v2, KeyPath, 0, 0,
         16,
         MEMORY[0x1E4FBC860],
         0);
  swift_release();
  *(void *)(v0 + 32) = v4;
  uint64_t v5 = swift_getKeyPath();
  sub_1B633C62C(0, (unint64_t *)&unk_1EB97DFA0, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  float32x4_t v6 = (void *)swift_allocObject();
  void v6[4] = sub_1B674411C;
  void v6[5] = v5;
  _OWORD v6[2] = sub_1B6744148;
  _OWORD v6[3] = v5;
  void v6[6] = v5;
  swift_allocObject();
  swift_retain_n();
  uint64_t v7 = sub_1B673CDE8(0x65756C6176, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, v5, 0, 0,
         16,
         v3,
         0,
         (uint64_t (*)(void))type metadata accessor for simd_float4x4,
         (uint64_t)sub_1B6744178);
  swift_release();
  *(void *)(v0 + 40) = v7;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E40 = v0;
  return result;
}

unint64_t sub_1B6672174()
{
  return 0xD000000000000017;
}

uint64_t sub_1B6672190(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, qword_1E9DCBFD0);
}

uint64_t sub_1B66721B4(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, qword_1E9DCBFD0, (unint64_t *)&qword_1E9E48E40);
}

uint64_t sub_1B66721EC(uint64_t a1)
{
  return sub_1B666E248(a1, qword_1E9DCBFD0, &qword_1E9E48E40);
}

uint64_t sub_1B6672224()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B6743614();
  char v2 = (void *)swift_allocObject();
  v2[4] = sub_1B67443A4;
  void v2[5] = KeyPath;
  v2[2] = sub_1B67443EC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673E1F8(0x6E6F697469736F70, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 4, 0, (uint64_t)v2, KeyPath, 0, 0,
         1,
         MEMORY[0x1E4FBC860],
         0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997E80 = v0;
  return result;
}

void sub_1B66723A8(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  *(double *)&long long v3 = nullsub_1(a1);
  *a2 = v3;
}

void sub_1B66723D4(uint64_t a1, _OWORD *a2)
{
  sub_1B6744340();
  *a2 = v3;
}

uint64_t sub_1B6672404()
{
  return 0x6E6F697469736F50;
}

uint64_t sub_1B667241C(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1EB97FF58);
}

uint64_t sub_1B6672440(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1EB97FF58, (unint64_t *)&qword_1EB997E80);
}

uint64_t sub_1B6672478(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1EB97FF58, &qword_1EB997E80);
}

uint64_t sub_1B66724B0()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B6743614();
  char v2 = (void *)swift_allocObject();
  v2[4] = sub_1B674458C;
  void v2[5] = KeyPath;
  v2[2] = sub_1B67445D4;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673AD48(0x6C616D726F6ELL, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E48 = v0;
  return result;
}

uint64_t sub_1B667262C()
{
  return 0x6C616D726F4ELL;
}

uint64_t sub_1B6672640(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, qword_1E9DCBFE0);
}

uint64_t sub_1B6672664(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, qword_1E9DCBFE0, (unint64_t *)&qword_1E9E48E48);
}

uint64_t sub_1B667269C(uint64_t a1)
{
  return sub_1B666E248(a1, qword_1E9DCBFE0, &qword_1E9E48E48);
}

uint64_t sub_1B66726D4()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78160;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B67426AC();
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E77050;
  *(void *)(v2 + 32) = 0x797469746E656469;
  *(void *)(v2 + 40) = 0xE800000000000000;
  type metadata accessor for simd_quatf(0);
  *(void *)(v2 + 72) = v3;
  uint64_t v4 = swift_allocObject();
  *(void *)(v2 + 48) = v4;
  *(_OWORD *)(v4 + 16) = xmmword_1B6E4F370;
  sub_1B633C62C(0, &qword_1EB97DF88, (uint64_t (*)(uint64_t))type metadata accessor for simd_quatf, (uint64_t (*)(uint64_t, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v5 = (void *)swift_allocObject();
  void v5[4] = sub_1B6744724;
  void v5[5] = KeyPath;
  _OWORD v5[2] = sub_1B6744764;
  _OWORD v5[3] = KeyPath;
  void v5[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1B673CDE8(0x7461746E6569726FLL, 0xEB000000006E6F69, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v5, KeyPath, 0, 0,
         0,
         v2,
         0,
         (uint64_t (*)(void))type metadata accessor for simd_quatf,
         (uint64_t)sub_1B6744E54);
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 32) = v6;
  uint64_t v7 = swift_getKeyPath();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B6E77050;
  *(void *)(v8 + 32) = 0x797469746E656469;
  *(void *)(v8 + 40) = 0xE800000000000000;
  sub_1B6758FA4(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  *(void *)(v8 + 72) = v9;
  uint64_t v10 = swift_allocObject();
  *(void *)(v8 + 48) = v10;
  *(void *)(v10 + 16) = 0;
  *(void *)(v10 + 24) = 0;
  sub_1B6743614();
  uint64_t v11 = (void *)swift_allocObject();
  _OWORD v11[4] = sub_1B67447C4;
  void v11[5] = v7;
  _OWORD v11[2] = sub_1B674480C;
  void v11[3] = v7;
  void v11[6] = v7;
  swift_allocObject();
  swift_retain_n();
  swift_bridgeObjectRetain();
  uint64_t v12 = sub_1B6716FE0(0x72656C7565, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v11, v7, 0, 0,
          4,
          v8,
          0);
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v0 + 40) = v12;
  uint64_t v13 = swift_getKeyPath();
  sub_1B67448CC();
  uint64_t v14 = (void *)swift_allocObject();
  v14[4] = sub_1B6744854;
  v14[5] = v13;
  _OWORD v14[2] = sub_1B674489C;
  v14[3] = v13;
  v14[6] = v13;
  swift_allocObject();
  swift_retain_n();
  uint64_t v15 = sub_1B6717410(0x696E726574617571, 0xEA00000000006E6FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v14, v13, 0, 0,
          4,
          MEMORY[0x1E4FBC860],
          0);
  swift_release();
  *(void *)(v0 + 48) = v15;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997A08 = v0;
  return result;
}

void sub_1B6672BC0(float32x4_t *a1@<X0>, _OWORD *a2@<X8>)
{
  *(double *)&long long v3 = sub_1B6744D00(*a1);
  *a2 = v3;
}

void sub_1B6672BEC(float32x4_t *a1, _OWORD *a2)
{
  *(double *)&long long v3 = sub_1B6744C6C(*a1);
  *a2 = v3;
}

__n128 sub_1B6672C18@<Q0>(__n128 *a1@<X0>, __n128 *a2@<X8>)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

__n128 sub_1B6672C24(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

uint64_t sub_1B6672C30()
{
  return 0x7461746E6569724FLL;
}

uint64_t sub_1B6672C50(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1EB97DC18);
}

uint64_t sub_1B6672C74(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1EB97DC18, (unint64_t *)&qword_1EB997A08);
}

uint64_t sub_1B6672CAC(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1EB97DC18, &qword_1EB997A08);
}

uint64_t sub_1B6672CE4()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DEB0, (uint64_t)&type metadata for Entity, (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6744EEC;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6744F2C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673C5F8(0x746E65726170, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B6744F5C);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E50 = v0;
  return result;
}

uint64_t sub_1B6672E98()
{
  return 0x746E65726150;
}

uint64_t sub_1B6672EAC()
{
  return 49283072;
}

uint64_t sub_1B6672EB4(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1E9DCBFF0);
}

uint64_t sub_1B6672ED8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1E9DCBFF0, (unint64_t *)&qword_1E9E48E50);
}

uint64_t sub_1B6672F10(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1E9DCBFF0, &qword_1E9E48E50);
}

uint64_t sub_1B6672F48()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B67450F0();
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6745084;
  void v2[5] = KeyPath;
  v2[2] = sub_1B67450C0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B6717840(0x6E6572646C696863, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         &qword_1EB9802C0,
         (uint64_t)&type metadata for Entity,
         (uint64_t)sub_1B674516C);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E58 = v0;
  return result;
}

uint64_t sub_1B66730F0()
{
  uint64_t v0 = *(void *)aChildren_5;
  swift_bridgeObjectRetain();
  return v0;
}

uint64_t sub_1B6673128(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1E9DCBFF8);
}

uint64_t sub_1B667314C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1E9DCBFF8, (unint64_t *)&qword_1E9E48E58);
}

uint64_t sub_1B6673184(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1E9DCBFF8, &qword_1E9E48E58);
}

uint64_t sub_1B66731BC()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DEB0, (uint64_t)&type metadata for Entity, (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6745378;
  void v2[5] = KeyPath;
  v2[2] = sub_1B67453B8;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673C5F8(0x746567726174, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B67453E8);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E60 = v0;
  return result;
}

uint64_t sub_1B6673370()
{
  return 0x74416B6F6F4CLL;
}

uint64_t sub_1B6673384(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1E9DCC000);
}

uint64_t sub_1B66733A8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1E9DCC000, (unint64_t *)&qword_1E9E48E60);
}

uint64_t sub_1B66733E0(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1E9DCC000, &qword_1E9E48E60);
}

uint64_t sub_1B6673418()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DF68, MEMORY[0x1E4FBB470], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B67454F8;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6745538;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673F678(0x726F74636166, 0xE600000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B6745568);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E68 = v0;
  return result;
}

uint64_t sub_1B66735CC()
{
  return 0x6F4D68746F6F6D53;
}

uint64_t sub_1B66735EC(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1E9DCC008);
}

uint64_t sub_1B6673610(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1E9DCC008, (unint64_t *)&qword_1E9E48E68);
}

uint64_t sub_1B6673648(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1E9DCC008, &qword_1E9E48E68);
}

uint64_t sub_1B6673680()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1E9DCE218, MEMORY[0x1E4FBC150], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6745690;
  void v2[5] = KeyPath;
  v2[2] = sub_1B67456D0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B671BDC0(0x726564726FLL, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E70 = v0;
  return result;
}

uint64_t sub_1B6673820()
{
  return 0x6E697265646E6552;
}

uint64_t sub_1B6673844(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, qword_1E9DCC010);
}

uint64_t sub_1B6673868(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, qword_1E9DCC010, (unint64_t *)&qword_1E9E48E70);
}

uint64_t sub_1B66738A0(uint64_t a1)
{
  return sub_1B666E248(a1, qword_1E9DCC010, &qword_1E9E48E70);
}

uint64_t sub_1B66738D8()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DF68, MEMORY[0x1E4FBB470], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B674586C;
  void v2[5] = KeyPath;
  v2[2] = sub_1B67458AC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673F678(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B67458DC);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997E18 = v0;
  return result;
}

uint64_t sub_1B6673A8C()
{
  return 0x443120656C616353;
}

uint64_t sub_1B6673AA4(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1EB97FDD8);
}

uint64_t sub_1B6673AC8(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1EB97FDD8, (unint64_t *)&qword_1EB997E18);
}

uint64_t sub_1B6673B00(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1EB97FDD8, &qword_1EB997E18);
}

uint64_t sub_1B6673B38()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B6745A5C();
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B67459EC;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6745A2C;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673B5A8(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997E20 = v0;
  return result;
}

uint64_t sub_1B6673CB4()
{
  return 0x443220656C616353;
}

uint64_t sub_1B6673CCC(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1EB97FDE0);
}

uint64_t sub_1B6673CF0(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1EB97FDE0, (unint64_t *)&qword_1EB997E20);
}

uint64_t sub_1B6673D28(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1EB97FDE0, &qword_1EB997E20);
}

uint64_t sub_1B6673D60()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B6743614();
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6745D94;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6745DDC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673B9D8(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997E28 = v0;
  return result;
}

uint64_t sub_1B6673EDC()
{
  return 0x443320656C616353;
}

uint64_t sub_1B6673EF4(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1EB97FDE8);
}

uint64_t sub_1B6673F18(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1EB97FDE8, (unint64_t *)&qword_1EB997E28);
}

uint64_t sub_1B6673F50(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1EB97FDE8, &qword_1EB997E28);
}

uint64_t sub_1B6673F88()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B6743614();
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6745F1C;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6745F64;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673A918(0x656C616373, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E78 = v0;
  return result;
}

uint64_t sub_1B6674104()
{
  return 0x656C616353;
}

uint64_t sub_1B6674118(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1E9DCC020);
}

uint64_t sub_1B667413C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1E9DCC020, (unint64_t *)&qword_1E9E48E78);
}

uint64_t sub_1B6674174(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1E9DCC020, &qword_1E9E48E78);
}

uint64_t sub_1B66741AC()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B6743614();
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B67460A4;
  void v2[5] = KeyPath;
  v2[2] = sub_1B67460EC;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673E628(0x797469636F6C6576, 0xE800000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         2,
         MEMORY[0x1E4FBC860],
         0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997E98 = v0;
  return result;
}

uint64_t sub_1B6674330()
{
  return 0x797469636F6C6556;
}

uint64_t sub_1B6674348(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1EB97FF98);
}

uint64_t sub_1B667436C(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1EB97FF98, (unint64_t *)&qword_1EB997E98);
}

uint64_t sub_1B66743A4(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1EB97FF98, &qword_1EB997E98);
}

uint64_t sub_1B66743DC()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B67448CC();
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B674622C;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6746274;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B671C5E8(0x5672616C75676E61, 0xEF797469636F6C65, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 3, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997C18 = v0;
  return result;
}

uint64_t sub_1B6674574()
{
  return 0x5672616C75676E41;
}

uint64_t sub_1B6674598(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, qword_1EB97EAC0);
}

uint64_t sub_1B66745BC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, qword_1EB97EAC0, (unint64_t *)&qword_1EB997C18);
}

uint64_t sub_1B66745F4(uint64_t a1)
{
  return sub_1B666E248(a1, qword_1EB97EAC0, &qword_1EB997C18);
}

unint64_t sub_1B667462C()
{
  return 0xD000000000000014;
}

uint64_t sub_1B6674648()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  uint64_t v2 = swift_getKeyPath();
  sub_1B62CB19C(0, (unint64_t *)&unk_1EB97DFB0, MEMORY[0x1E4FBC1C8], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v3 = (void *)swift_allocObject();
  v3[4] = sub_1B67463E8;
  void v3[5] = v2;
  _OWORD v3[2] = sub_1B6746428;
  v3[3] = v2;
  void v3[6] = v2;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v4 = MEMORY[0x1E4FBC860];
  uint64_t v5 = sub_1B673EA58(0x646E496563617073, 0xEA00000000007865, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v3, v2, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B67465F8);
  swift_release();
  sub_1B62CB19C(0, &qword_1E9DCE268, (uint64_t)&type metadata for EntitySpace, (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v6 = (void *)swift_allocObject();
  void v6[4] = sub_1B6746458;
  void v6[5] = KeyPath;
  _OWORD v6[2] = sub_1B6746498;
  _OWORD v6[3] = KeyPath;
  void v6[6] = KeyPath;
  swift_allocObject();
  swift_retain_n();
  swift_retain();
  uint64_t v7 = sub_1B671AD78(0x6563617073, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v6, KeyPath, 0, 0,
         0,
         v4,
         v5,
         (uint64_t)sub_1B67464C8);
  swift_release();
  swift_release();
  *(void *)(v0 + 32) = v7;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E80 = v0;
  return result;
}

uint64_t sub_1B6674934(uint64_t result)
{
  return result;
}

uint64_t sub_1B667493C()
{
  return 0x65764F6563617053;
}

uint64_t sub_1B6674960(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1E9DCC028);
}

uint64_t sub_1B6674984(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1E9DCC028, (unint64_t *)&qword_1E9E48E80);
}

uint64_t sub_1B66749BC(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1E9DCC028, &qword_1E9E48E80);
}

uint64_t sub_1B66749F4()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, (unint64_t *)&unk_1EB97DF50, MEMORY[0x1E4FBB1A0], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B67466F4;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6746720;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B6739CF8(1701667182, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         32,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B6746750);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E88 = v0;
  return result;
}

uint64_t sub_1B6674BA8()
{
  return 1701667150;
}

uint64_t sub_1B6674BB8(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, qword_1E9DCC030);
}

uint64_t sub_1B6674BDC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, qword_1E9DCC030, (unint64_t *)&qword_1E9E48E88);
}

uint64_t sub_1B6674C14(uint64_t a1)
{
  return sub_1B666E248(a1, qword_1E9DCC030, &qword_1E9E48E88);
}

uint64_t sub_1B6674C4C()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B67448CC();
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6746888;
  void v2[5] = KeyPath;
  v2[2] = sub_1B67468D0;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673A4E8(0x726F6C6F63, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 6, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997E10 = v0;
  return result;
}

uint64_t sub_1B6674DCC()
{
  return 0x726F6C6F43;
}

uint64_t sub_1B6674DE0(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, qword_1EB97FC78);
}

uint64_t sub_1B6674E04(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, qword_1EB97FC78, (unint64_t *)&qword_1EB997E10);
}

uint64_t sub_1B6674E3C(uint64_t a1)
{
  return sub_1B666E248(a1, qword_1EB97FC78, &qword_1EB997E10);
}

uint64_t sub_1B6674E74()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DF68, MEMORY[0x1E4FBB470], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6746A40;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6746A80;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673F678(0x73656E6867756F72, 0xE900000000000073, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B6746AB0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997F28 = v0;
  return result;
}

uint64_t sub_1B6675030()
{
  return 0x73656E6867756F52;
}

uint64_t sub_1B667504C(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, qword_1EB9810F0);
}

uint64_t sub_1B6675070(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, qword_1EB9810F0, (unint64_t *)&qword_1EB997F28);
}

uint64_t sub_1B66750A8(uint64_t a1)
{
  return sub_1B666E248(a1, qword_1EB9810F0, &qword_1EB997F28);
}

uint64_t sub_1B66750E0()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DF68, MEMORY[0x1E4FBB470], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6746BC0;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6746C00;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673F678(0x73656E6C6174656DLL, 0xE900000000000073, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B6746C30);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997F20 = v0;
  return result;
}

uint64_t sub_1B667529C()
{
  return 0x73656E6C6174654DLL;
}

uint64_t sub_1B66752B8(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1EB9810E8);
}

uint64_t sub_1B66752DC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1EB9810E8, (unint64_t *)&qword_1EB997F20);
}

uint64_t sub_1B6675314(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1EB9810E8, &qword_1EB997F20);
}

uint64_t sub_1B667534C()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DF68, MEMORY[0x1E4FBB470], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6746D40;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6746D80;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673F678(0x6E6F697373696D65, 0xE800000000000000, 0, 0, 0x3FF0000000000000, 0, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B6746DB0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997F18 = v0;
  return result;
}

uint64_t sub_1B6675504()
{
  return 0x6E6F697373696D45;
}

uint64_t sub_1B667551C(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1EB981090);
}

uint64_t sub_1B6675540(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1EB981090, (unint64_t *)&qword_1EB997F18);
}

uint64_t sub_1B6675578(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1EB981090, &qword_1EB997F18);
}

uint64_t sub_1B66755B0()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DF68, MEMORY[0x1E4FBB470], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6746EC0;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6746F00;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673F678(0x656C676E61, 0xE500000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B6746F30);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997BE0 = v0;
  return result;
}

uint64_t sub_1B6675764()
{
  return 0x656C636974726150;
}

uint64_t sub_1B6675788(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1EB97E698);
}

uint64_t sub_1B66757AC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1EB97E698, (unint64_t *)&qword_1EB997BE0);
}

uint64_t sub_1B66757E4(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1EB97E698, &qword_1EB997BE0);
}

uint64_t sub_1B667581C()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DF68, MEMORY[0x1E4FBB470], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6747040;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6747080;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673F678(0x6C6556656C676E61, 0xED0000797469636FLL, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B67470B0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997DB0 = v0;
  return result;
}

unint64_t sub_1B66759E0()
{
  return 0xD000000000000015;
}

uint64_t sub_1B66759FC(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1EB97F680);
}

uint64_t sub_1B6675A20(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1EB97F680, (unint64_t *)&qword_1EB997DB0);
}

uint64_t sub_1B6675A58(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1EB97F680, &qword_1EB997DB0);
}

uint64_t sub_1B6675A90()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DF68, MEMORY[0x1E4FBB470], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B67471C0;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6747200;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673F678(0x4665727574786574, 0xEC000000656D6172, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B6747230);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997DA8 = v0;
  return result;
}

unint64_t sub_1B6675C50()
{
  return 0xD000000000000014;
}

uint64_t sub_1B6675C6C(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1EB97F478);
}

uint64_t sub_1B6675C90(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1EB97F478, (unint64_t *)&qword_1EB997DA8);
}

uint64_t sub_1B6675CC8(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1EB97F478, &qword_1EB997DA8);
}

uint64_t sub_1B6675D00()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, (unint64_t *)&unk_1EB97DFE8, MEMORY[0x1E4FBC4C0], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6747340;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6747380;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673A0F0(25705, 0xE200000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B67473B0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB9979E8 = v0;
  return result;
}

uint64_t sub_1B6675EAC()
{
  return 0x656C636974726150;
}

uint64_t sub_1B6675EC8(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, &qword_1EB97DA50);
}

uint64_t sub_1B6675EEC(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, &qword_1EB97DA50, (unint64_t *)&qword_1EB9979E8);
}

uint64_t sub_1B6675F24(uint64_t a1)
{
  return sub_1B666E248(a1, &qword_1EB97DA50, &qword_1EB9979E8);
}

uint64_t sub_1B6675F5C()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B62CB19C(0, &qword_1EB97DF68, MEMORY[0x1E4FBB470], (uint64_t (*)(void, uint64_t))type metadata accessor for EntityGetSet);
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B6747548;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6747588;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B673F678(1936941421, 0xE400000000000000, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0,
         (uint64_t)sub_1B67475B8);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1EB997E00 = v0;
  return result;
}

uint64_t sub_1B667610C()
{
  return 1936941389;
}

uint64_t sub_1B667611C(uint64_t a1, uint64_t a2)
{
  return sub_1B6689CC4(a1, a2, qword_1EB97FC38);
}

uint64_t sub_1B6676140(unint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1B666D9F8(a1, a2, a3, a4, qword_1EB97FC38, (unint64_t *)&qword_1EB997E00);
}

uint64_t sub_1B6676178(uint64_t a1)
{
  return sub_1B666E248(a1, qword_1EB97FC38, &qword_1EB997E00);
}

uint64_t sub_1B66761B0()
{
  sub_1B62CB19C(0, (unint64_t *)&qword_1EB980DF0, MEMORY[0x1E4FBC838] + 8, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E78130;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B6743614();
  uint64_t v2 = (void *)swift_allocObject();
  v2[4] = sub_1B67476C8;
  void v2[5] = KeyPath;
  v2[2] = sub_1B6747710;
  v2[3] = KeyPath;
  v2[6] = KeyPath;
  type metadata accessor for PropertyDescription();
  swift_allocObject();
  swift_retain_n();
  uint64_t v3 = sub_1B67198C0(0x61467261656E696CLL, 0xEC000000726F7463, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, 1, 0, (uint64_t)v2, KeyPath, 0, 0,
         0,
         MEMORY[0x1E4FBC860],
         0);
  swift_release();
  *(void *)(v0 + 32) = v3;
  uint64_t result = sub_1B6E31C48();
  qword_1E9E48E90 = v0;
  return result;
}