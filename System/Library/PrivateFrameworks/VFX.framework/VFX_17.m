unint64_t sub_1B6C148E4()
{
  unint64_t result;

  result = qword_1E9DD7148;
  if (!qword_1E9DD7148)
  {
    result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7148);
  }
  return result;
}

unint64_t sub_1B6C1493C()
{
  unint64_t result = qword_1E9DD7150;
  if (!qword_1E9DD7150)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7150);
  }
  return result;
}

void sub_1B6C14990(float a1)
{
  unint64_t v2 = *(void *)(*(void *)(v1 + 8) + 16);
  if (v2)
  {
    v3 = *(char **)v1;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      v3 = sub_1B6C1683C((uint64_t)v3);
    }
    if (v2 >= 8)
    {
      uint64_t v4 = v2 & 0x7FFFFFFFFFFFFFF8;
      v5 = (float32x4_t *)(v3 + 48);
      uint64_t v6 = v2 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v7 = vmulq_n_f32(*v5, a1);
        v5[-1] = vmulq_n_f32(v5[-1], a1);
        float32x4_t *v5 = v7;
        v5 += 2;
        v6 -= 8;
      }
      while (v6);
      if (v2 == v4) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v4 = 0;
    }
    unint64_t v8 = v2 - v4;
    v9 = (float *)&v3[4 * v4 + 32];
    do
    {
      float *v9 = *v9 * a1;
      ++v9;
      --v8;
    }
    while (v8);
LABEL_11:
    *(void *)uint64_t v1 = v3;
  }
}

uint64_t static ScriptingSupport.scriptIterationRange(_:)(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t static ScriptingSupport.scriptArgumentsBuffer(_:)(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t static ScriptingSupport.debugMode.getter()
{
  return 0;
}

__n128 static ScriptingSupport.pointOfViewMatrices(_:)@<Q0>(long long *a1@<X8>)
{
  swift_retain();
  sub_1B636051C(v11);
  long long v9 = v11[1];
  long long v10 = v11[0];
  long long v7 = v11[3];
  long long v8 = v11[2];
  long long v5 = v11[5];
  long long v6 = v11[4];
  long long v3 = v11[7];
  long long v4 = v11[6];
  swift_release();
  *a1 = v10;
  a1[1] = v9;
  a1[2] = v8;
  a1[3] = v7;
  a1[4] = v6;
  a1[5] = v5;
  __n128 result = (__n128)v3;
  a1[6] = v4;
  a1[7] = v3;
  return result;
}

double static ScriptingSupport.pointOfViewPosition(_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)a1 + 176);
  swift_retain();
  swift_retain();
  uint64_t v2 = sub_1B63273D0(v1);
  uint64_t v4 = v3;
  char v6 = v5;
  swift_release();
  swift_release();
  v7.i32[0] = 0;
  v8.i32[0] = v6 & 1;
  int8x16_t v9 = vdupq_lane_s8((int8x8_t)*(_OWORD *)&vceqq_s8(v8, v7), 0);
  v8.i64[0] = v2;
  v8.i64[1] = v4;
  *(void *)&double result = vandq_s8(v8, v9).u64[0];
  return result;
}

uint64_t static ScriptingSupport.texture_sample2d(texture2DSampler:uv:)(uint64_t a1, double a2)
{
  v5[7] = *MEMORY[0x1E4F143B8];
  sub_1B62B31E8(a1, (uint64_t)v4);
  if (!v4[3]) {
    return sub_1B62B32CC((uint64_t)v4);
  }
  type metadata accessor for __vfx_sampler2d(0);
  uint64_t result = swift_dynamicCast();
  if (result) {
    return ((uint64_t (*)(void *, double))v5[5])(v5, a2);
  }
  return result;
}

double static ScriptingSupport.texture_sample3d(texture3DSampler:uvw:)(uint64_t a1, __n128 a2)
{
  uint64_t v8 = *MEMORY[0x1E4F143B8];
  sub_1B62B31E8(a1, (uint64_t)v4);
  if (v5)
  {
    type metadata accessor for __vfx_sampler3d(0);
    if (swift_dynamicCast())
    {
      v7(&v6, a2);
      return result;
    }
  }
  else
  {
    sub_1B62B32CC((uint64_t)v4);
  }
  return 0.0;
}

uint64_t static ScriptingSupport.curlNoise(_:uvw:intensity:scale:clockDeltaTime:)(void *a1, float32x4_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (!v4) {
    return swift_release();
  }
  uint64_t v5 = *(void *)(v4 + 240);
  swift_retain();
  swift_retain();
  sub_1B6BCB1C0(0, 3, v5, v4, 0, 3, (uint64_t)&v22);
  uint64_t v6 = v22;
  uint64_t v7 = v23;
  uint64_t v8 = v24;
  char v9 = v25;
  __int16 v10 = v27;
  char v19 = v28;
  long long v17 = v30;
  long long v18 = v29;
  long long v16 = v31;
  uint64_t v15 = v32;
  uint64_t v11 = v34;
  uint64_t v12 = v26;
  int v13 = v33;
  swift_release();
  swift_release();
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  char v25 = v9;
  uint64_t v26 = v12;
  __int16 v27 = v10;
  char v28 = v19;
  long long v29 = v18;
  long long v30 = v17;
  long long v31 = v16;
  uint64_t v32 = v15;
  int v33 = v13;
  uint64_t v34 = v11;
  swift_release();
  swift_unknownObjectRelease();
  sub_1B6CF1100((__n128)vmulq_n_f32(a2, a4));
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t static ScriptingSupport.fbmNoise(_:uvw:intensity:scale:clockDeltaTime:)(void *a1, float32x4_t a2, double a3, float a4)
{
  uint64_t v4 = *(void *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (!v4) {
    return swift_release();
  }
  uint64_t v5 = *(void *)(v4 + 240);
  swift_retain();
  swift_retain();
  sub_1B6BCB1C0(1u, 3, v5, v4, 1u, 3, (uint64_t)&v22);
  uint64_t v6 = v22;
  uint64_t v7 = v23;
  uint64_t v8 = v24;
  char v9 = v25;
  __int16 v10 = v27;
  char v19 = v28;
  long long v17 = v30;
  long long v18 = v29;
  long long v16 = v31;
  uint64_t v15 = v32;
  uint64_t v11 = v34;
  uint64_t v12 = v26;
  int v13 = v33;
  swift_release();
  swift_release();
  uint64_t v22 = v6;
  uint64_t v23 = v7;
  uint64_t v24 = v8;
  char v25 = v9;
  uint64_t v26 = v12;
  __int16 v27 = v10;
  char v28 = v19;
  long long v29 = v18;
  long long v30 = v17;
  long long v31 = v16;
  uint64_t v32 = v15;
  int v33 = v13;
  uint64_t v34 = v11;
  swift_release();
  swift_unknownObjectRelease();
  sub_1B6CF1100((__n128)vmulq_n_f32(a2, a4));
  swift_bridgeObjectRelease();
  return swift_unknownObjectRelease();
}

void *static ScriptingSupport.makeCurlNoiseCPUTexture(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 240);
    swift_retain();
    swift_retain();
    sub_1B6BCB1C0(0, 3, v4, v3, 0, 3, (uint64_t)v28);
    v21 = a2;
    uint64_t v5 = v28[2];
    uint64_t v19 = v28[1];
    uint64_t v20 = v29;
    uint64_t v6 = v30;
    int v18 = v32;
    uint64_t v7 = v33;
    uint64_t v8 = v34;
    uint64_t v9 = v35;
    uint64_t v26 = v37;
    uint64_t v27 = v36;
    uint64_t v24 = v39;
    uint64_t v25 = v38;
    uint64_t v23 = v40;
    uint64_t v22 = v41;
    uint64_t v10 = v31;
    uint64_t v11 = v28[0];
    swift_release();
    uint64_t v12 = v5;
    swift_unknownObjectRelease();
    uint64_t v13 = v19;
    a2 = v21;
    swift_release();
    swift_release();
    uint64_t v14 = 0x10000;
    if (!v18) {
      uint64_t v14 = 0;
    }
    uint64_t v3 = v10 | v14;
    uint64_t v15 = v20;
  }
  else
  {
    swift_release();
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    uint64_t v15 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  sub_1B62D82E0(0, (unint64_t *)&unk_1EB97EFD0);
  a2[3] = v16;
  double result = (void *)swift_allocObject();
  *a2 = result;
  result[2] = v11;
  result[3] = v13;
  result[4] = v12;
  result[5] = v15;
  result[6] = v6;
  result[7] = v3;
  result[8] = v7;
  result[9] = v8;
  result[10] = v9;
  result[11] = v27;
  result[12] = v26;
  result[13] = v25;
  result[14] = v24;
  result[15] = v23;
  result[16] = v22;
  return result;
}

void *static ScriptingSupport.makeFbmNoiseCPUTexture(_:)@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (v3)
  {
    uint64_t v4 = *(void *)(v3 + 240);
    swift_retain();
    swift_retain();
    sub_1B6BCB1C0(1u, 3, v4, v3, 1u, 3, (uint64_t)v28);
    v21 = a2;
    uint64_t v5 = v28[2];
    uint64_t v19 = v28[1];
    uint64_t v20 = v29;
    uint64_t v6 = v30;
    int v18 = v32;
    uint64_t v7 = v33;
    uint64_t v8 = v34;
    uint64_t v9 = v35;
    uint64_t v26 = v37;
    uint64_t v27 = v36;
    uint64_t v24 = v39;
    uint64_t v25 = v38;
    uint64_t v23 = v40;
    uint64_t v22 = v41;
    uint64_t v10 = v31;
    uint64_t v11 = v28[0];
    swift_release();
    uint64_t v12 = v5;
    swift_unknownObjectRelease();
    uint64_t v13 = v19;
    a2 = v21;
    swift_release();
    swift_release();
    uint64_t v14 = 0x10000;
    if (!v18) {
      uint64_t v14 = 0;
    }
    uint64_t v3 = v10 | v14;
    uint64_t v15 = v20;
  }
  else
  {
    swift_release();
    uint64_t v11 = 0;
    uint64_t v13 = 0;
    uint64_t v12 = 0;
    uint64_t v15 = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    uint64_t v9 = 0;
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v24 = 0;
    uint64_t v25 = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  sub_1B62D82E0(0, (unint64_t *)&unk_1EB97EFD0);
  a2[3] = v16;
  double result = (void *)swift_allocObject();
  *a2 = result;
  result[2] = v11;
  result[3] = v13;
  result[4] = v12;
  result[5] = v15;
  result[6] = v6;
  result[7] = v3;
  result[8] = v7;
  result[9] = v8;
  result[10] = v9;
  result[11] = v27;
  result[12] = v26;
  result[13] = v25;
  result[14] = v24;
  result[15] = v23;
  result[16] = v22;
  return result;
}

double static ScriptingSupport.texture_sample3dLinearRepeat(cpuTexture:uvw:)(uint64_t a1, __n128 a2)
{
  return sub_1B6C154B8(a1, (double (*)(__n128))sub_1B6CF1100, a2);
}

double static ScriptingSupport.texture_sample3dLinearRepeatMirror(cpuTexture:uvw:)(uint64_t a1, __n128 a2)
{
  return sub_1B6C154B8(a1, (double (*)(__n128))sub_1B6CF115C, a2);
}

double static ScriptingSupport.texture_sample3dLinearClampToZero(cpuTexture:uvw:)(uint64_t a1, __n128 a2)
{
  return sub_1B6C154B8(a1, (double (*)(__n128))sub_1B6CF11B8, a2);
}

double static ScriptingSupport.texture_sample3dLinearClampToEdge(cpuTexture:uvw:)(uint64_t a1, __n128 a2)
{
  return sub_1B6C154B8(a1, (double (*)(__n128))sub_1B6CF1214, a2);
}

double sub_1B6C154B8(uint64_t a1, double (*a2)(__n128), __n128 a3)
{
  sub_1B62B31E8(a1, (uint64_t)v15);
  if (v16)
  {
    if (swift_dynamicCast())
    {
      v17[4] = v11;
      v17[5] = v12;
      v17[6] = v13;
      uint64_t v18 = v14;
      v17[0] = v7;
      v17[1] = v8;
      v17[2] = v9;
      v17[3] = v10;
      double v6 = a2(a3);
      sub_1B628D3FC((uint64_t)v17);
      return v6;
    }
  }
  else
  {
    sub_1B62B32CC((uint64_t)v15);
  }
  return 0.0;
}

uint64_t static ScriptingSupport.makeColorRamp(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  *(void *)(a3 + 24) = &type metadata for ColorRamp;
  *(void *)a3 = a1;
  *(void *)(a3 + 8) = a2;
  *(unsigned char *)(a3 + 16) = 1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

uint64_t static ScriptingSupport.makeColorRamp(_:_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned __int8 a3@<W2>, uint64_t a4@<X8>)
{
  char v4 = a3;
  *(void *)(a4 + 24) = &type metadata for ColorRamp;
  if (a3 >= 3u) {
    char v4 = 3;
  }
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(unsigned char *)(a4 + 16) = v4;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

__n128 static ScriptingSupport.colorRampEvaluate(_:_:)(uint64_t a1, float a2)
{
  sub_1B62CAAD8(a1, (uint64_t)v12);
  swift_dynamicCast();
  sub_1B6CD5D6C(v9, v10, v11, a2, v3, v4, v5);
  long long v8 = v6;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return (__n128)v8;
}

uint64_t static ScriptingSupport.colorRampSetColor(_:color:at:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>, __n128 a4@<Q0>)
{
  sub_1B62CAAD8(a1, (uint64_t)v11);
  uint64_t result = swift_dynamicCast();
  uint64_t v7 = v12;
  if ((a2 & 0x8000000000000000) == 0 && *(void *)(v12 + 16) > a2)
  {
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v12 = v7;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1B629CC8C(v7);
      uint64_t v7 = result;
    }
    *(__n128 *)(v7 + 16 * a2 + 32) = a4;
  }
  uint64_t v8 = v13;
  char v9 = v14;
  *(void *)(a3 + 24) = &type metadata for ColorRamp;
  *(void *)a3 = v7;
  *(void *)(a3 + 8) = v8;
  *(unsigned char *)(a3 + 16) = v9;
  return result;
}

uint64_t static ScriptingSupport.makeCurve(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  sub_1B665D590();
  a3[3] = v6;
  uint64_t v7 = swift_allocObject();
  *a3 = v7;
  *(void *)(v7 + 16) = a1;
  *(void *)(v7 + 24) = a2;
  *(void *)(v7 + 32) = 0;
  *(unsigned char *)(v7 + 40) = 1;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRetain();
}

float static ScriptingSupport.curveEvaluate(_:_:)(uint64_t a1, float a2)
{
  sub_1B62CAAD8(a1, (uint64_t)v10);
  sub_1B665D590();
  swift_dynamicCast();
  sub_1B631A2E0(v6, v7, v8, v9, a2);
  float v4 = v3;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t static ScriptingSupport.curveSetValue(_:value:at:)@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t *a3@<X8>, float a4@<S0>)
{
  sub_1B62CAAD8(a1, (uint64_t)&v15);
  sub_1B665D590();
  uint64_t v8 = v7;
  swift_dynamicCast();
  char v9 = v16;
  if ((a2 & 0x8000000000000000) == 0 && *((void *)v16 + 2) > a2)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v16 = v9;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      char v9 = sub_1B6C1683C((uint64_t)v9);
    }
    *(float *)&v9[4 * a2 + 32] = a4;
  }
  uint64_t v11 = v17;
  uint64_t v12 = v18;
  char v13 = v19;
  a3[3] = v8;
  uint64_t result = swift_allocObject();
  *a3 = result;
  *(void *)(result + 16) = v9;
  *(void *)(result + 24) = v11;
  *(void *)(result + 32) = v12;
  *(unsigned char *)(result + 40) = v13;
  return result;
}

uint64_t static ScriptingSupport.curveScale(_:_:)@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>, float a3@<S0>)
{
  sub_1B62CAAD8(a1, (uint64_t)v20);
  sub_1B665D590();
  uint64_t v5 = v4;
  swift_dynamicCast();
  uint64_t v6 = v21;
  uint64_t v7 = v22;
  unint64_t v8 = *(void *)(v22 + 16);
  if (v8)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    v21 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v6 = sub_1B6C1683C((uint64_t)v6);
    }
    if (v8 >= 8)
    {
      uint64_t v10 = v8 & 0x7FFFFFFFFFFFFFF8;
      uint64_t v11 = (float32x4_t *)(v6 + 48);
      uint64_t v12 = v8 & 0x7FFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v13 = vmulq_n_f32(*v11, a3);
        v11[-1] = vmulq_n_f32(v11[-1], a3);
        *uint64_t v11 = v13;
        v11 += 2;
        v12 -= 8;
      }
      while (v12);
      if (v8 == v10) {
        goto LABEL_11;
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    unint64_t v14 = v8 - v10;
    uint64_t v15 = (float *)&v6[4 * v10 + 32];
    do
    {
      *uint64_t v15 = *v15 * a3;
      ++v15;
      --v14;
    }
    while (v14);
LABEL_11:
    uint64_t v7 = v22;
  }
  uint64_t v16 = v23;
  char v17 = v24;
  a2[3] = v5;
  uint64_t result = swift_allocObject();
  *a2 = result;
  *(void *)(result + 16) = v6;
  *(void *)(result + 24) = v7;
  *(void *)(result + 32) = v16;
  *(unsigned char *)(result + 40) = v17;
  return result;
}

double static ScriptingSupport.clockTime(_:)(void *a1)
{
  return *(double *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
}

float static ScriptingSupport.clockDeltaTime(_:)(void *a1)
{
  return *(float *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
}

BOOL static ScriptingSupport.clockIsFirstFrame(_:)(void *a1)
{
  uint64_t v1 = *a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v2 = *(void *)(v1 + 16);
  return v3 == 1 && v2 == 0;
}

void *static ScriptingSupport.makeRandomNumberGeneratorXoshiro(seed:)@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = a1 + 0x76E15D3EFEFDCBBFLL;
  unint64_t v4 = 0xC5004E441C522FB3 * a1 - 0x3AFFB1BBE3ADD04DLL;
  uint64_t v5 = 0x77710069854EE241 - a1;
  uint64_t v6 = 0x39109BB02ACBE635 * a1;
  a2[3] = &type metadata for RandomNumberGeneratorXoshiro;
  uint64_t result = (void *)swift_allocObject();
  *a2 = result;
  result[2] = v3;
  result[3] = v4;
  result[4] = v5;
  result[5] = v6;
  return result;
}

float static ScriptingSupport.randomNumberGeneratorGetFloatRandomFast(_:_:)(void *a1, uint64_t a2, float a3, float a4)
{
  sub_1B62CAAD8(a2, (uint64_t)&v14);
  swift_dynamicCast();
  uint64_t v7 = v17 ^ v15 ^ v16;
  uint64_t v8 = v18 ^ v16 ^ v15;
  uint64_t v9 = v17 ^ v15 ^ (v16 << 17);
  uint64_t v10 = __ROR8__(v18 ^ v16, 19);
  float v11 = (float)((float)(a4 - a3)
              * (float)((float)((9 * ((((unint64_t)(5 * v16) >> 32) >> 25) | (640 * v16))) & 0xFFFFFF)
                      * 0.000000059605))
      + a3;
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  uint64_t v12 = (void *)swift_allocObject();
  *a1 = v12;
  v12[2] = v8;
  v12[3] = v7;
  v12[4] = v9;
  v12[5] = v10;
  return v11;
}

float static ScriptingSupport.randomNumberGeneratorGetFloatRandom01(_:)(void *a1, uint64_t a2)
{
  sub_1B62CAAD8(a2, (uint64_t)&v10);
  swift_dynamicCast();
  uint64_t v3 = v13 ^ v11 ^ v12;
  uint64_t v4 = v14 ^ v12 ^ v11;
  uint64_t v5 = v13 ^ v11 ^ (v12 << 17);
  uint64_t v6 = __ROR8__(v14 ^ v12, 19);
  float v7 = (float)((9 * ((((unint64_t)(5 * v12) >> 32) >> 25) | (640 * v12))) & 0xFFFFFF)
     * 0.000000059605;
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  uint64_t v8 = (void *)swift_allocObject();
  *a1 = v8;
  v8[2] = v4;
  v8[3] = v3;
  v8[4] = v5;
  v8[5] = v6;
  return v7;
}

__n128 static ScriptingSupport.randomNumberGeneratorGetFloat2Random01(_:)(void *a1, uint64_t a2)
{
  sub_1B62CAAD8(a2, (uint64_t)v15);
  swift_dynamicCast();
  uint64_t v3 = v18 ^ v16 ^ v17;
  uint64_t v4 = v19 ^ v17 ^ v16;
  *(float *)&long long v5 = (float)((9 * ((((unint64_t)(5 * v17) >> 32) >> 25) | (640 * v17))) & 0xFFFFFF)
                * 0.000000059605;
  uint64_t v6 = v4 ^ v18 ^ v16 ^ (v17 << 17);
  uint64_t v7 = __ROR8__(v19 ^ v17, 19);
  uint64_t v8 = v6 ^ v3;
  uint64_t v9 = v3 ^ v7 ^ v4;
  uint64_t v10 = v6 ^ (v3 << 17);
  uint64_t v11 = __ROR8__(v3 ^ v7, 19);
  *((float *)&v5 + 1) = (float)((9 * ((((unint64_t)(5 * v3) >> 32) >> 25) | (640 * v3))) & 0xFFFFFF)
                      * 0.000000059605;
  long long v14 = v5;
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  uint64_t v12 = (void *)swift_allocObject();
  *a1 = v12;
  v12[2] = v9;
  v12[3] = v8;
  v12[4] = v10;
  v12[5] = v11;
  return (__n128)v14;
}

__n128 static ScriptingSupport.randomNumberGeneratorGetFloat3Random01(_:)(void *a1, uint64_t a2)
{
  sub_1B62CAAD8(a2, (uint64_t)v19);
  swift_dynamicCast();
  uint64_t v3 = v22 ^ v20 ^ v21;
  uint64_t v4 = v23 ^ v21 ^ v20;
  uint64_t v5 = v4 ^ v22 ^ v20 ^ (v21 << 17);
  uint64_t v6 = v3 ^ __ROR8__(v23 ^ v21, 19);
  uint64_t v7 = v5 ^ v3;
  uint64_t v8 = v6 ^ v4;
  uint64_t v9 = v5 ^ (v3 << 17) ^ v8;
  uint64_t v10 = __ROR8__(v6, 19);
  uint64_t v11 = v9 ^ v7;
  uint64_t v12 = v7 ^ v10 ^ v8;
  uint64_t v13 = v9 ^ (v7 << 17);
  uint64_t v14 = __ROR8__(v7 ^ v10, 19);
  HIDWORD(v15) = 0;
  *(float *)&long long v15 = (float)((9 * ((((unint64_t)(5 * v21) >> 32) >> 25) | (640 * v21))) & 0xFFFFFF)
                 * 0.000000059605;
  *((float *)&v15 + 1) = (float)((9 * ((((unint64_t)(5 * v3) >> 32) >> 25) | (640 * v3))) & 0xFFFFFF)
                       * 0.000000059605;
  *((float *)&v15 + 2) = (float)((9 * ((((unint64_t)(5 * v7) >> 32) >> 25) | (640 * v7))) & 0xFFFFFF)
                       * 0.000000059605;
  long long v18 = v15;
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  uint64_t v16 = (void *)swift_allocObject();
  *a1 = v16;
  v16[2] = v12;
  v16[3] = v11;
  v16[4] = v13;
  v16[5] = v14;
  return (__n128)v18;
}

__n128 static ScriptingSupport.randomNumberGeneratorGetFloat4Random01(_:)(uint64_t *a1, uint64_t a2)
{
  sub_1B62CAAD8(a2, (uint64_t)v10);
  swift_dynamicCast();
  *(double *)&long long v3 = sub_1B6C160E0();
  long long v9 = v3;
  long long v8 = v11;
  uint64_t v4 = v12;
  uint64_t v5 = v13;
  a1[3] = (uint64_t)&type metadata for RandomNumberGeneratorXoshiro;
  uint64_t v6 = swift_allocObject();
  *a1 = v6;
  *(_OWORD *)(v6 + 16) = v8;
  *(void *)(v6 + 32) = v4;
  *(void *)(v6 + 40) = v5;
  return (__n128)v9;
}

double sub_1B6C160E0()
{
  uint64_t v0 = sub_1B6D27950();
  uint64_t v1 = sub_1B6D27950();
  uint64_t v2 = sub_1B6D27950();
  uint64_t v3 = sub_1B6D27950();
  v4.i64[0] = v0;
  v4.i64[1] = v1;
  v5.i64[0] = v2;
  v5.i64[1] = v3;
  v6.i64[0] = 0xFFFFFFLL;
  v6.i64[1] = 0xFFFFFFLL;
  *(void *)&double result = vmulq_f32(vcvt_hight_f32_f64((int32x2_t)vcvt_f32_f64(vcvtq_f64_u64((uint64x2_t)vandq_s8(v4, v6))), vcvtq_f64_u64((uint64x2_t)vandq_s8(v5, v6))), (float32x4_t)vdupq_n_s32(0x33800000u)).u64[0];
  return result;
}

float static ScriptingSupport.randomNumberGeneratorGetFloatWhiteNoise(_:_:_:)(void *a1, uint64_t a2, float a3, float a4)
{
  sub_1B62CAAD8(a2, (uint64_t)&v15);
  swift_dynamicCast();
  int v7 = 9 * ((((unint64_t)(5 * v17) >> 32) >> 25) | (640 * v17));
  uint64_t v8 = v18 ^ v16 ^ v17;
  uint64_t v9 = v19 ^ v17 ^ v16;
  uint64_t v10 = __ROR8__(v19 ^ v17, 19);
  uint64_t v11 = v18 ^ v16 ^ (v17 << 17);
  float v12 = (float)(a3 * a4)
      * (float)((float)((float)((float)(*(void *)&v7 & 0xFFFFFFLL) * 0.000000059605)
                      + (float)((float)(*(void *)&v7 & 0xFFFFFFLL) * 0.000000059605))
              + -1.0);
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  uint64_t v13 = (void *)swift_allocObject();
  *a1 = v13;
  v13[2] = v9;
  v13[3] = v8;
  v13[4] = v11;
  v13[5] = v10;
  return v12;
}

double static ScriptingSupport.randomNumberGeneratorGetFloat2WhiteNoise(_:_:_:)(void *a1, uint64_t a2, float a3, float a4)
{
  sub_1B62CAAD8(a2, (uint64_t)&v24);
  swift_dynamicCast();
  uint64_t v7 = v27 ^ v25 ^ v26;
  uint64_t v8 = v28 ^ v26 ^ v25;
  v9.f32[0] = (float)((9 * ((((unint64_t)(5 * v26) >> 32) >> 25) | (640 * v26))) & 0xFFFFFF)
            * 0.000000059605;
  uint64_t v10 = v8 ^ v27 ^ v25 ^ (v26 << 17);
  uint64_t v11 = __ROR8__(v28 ^ v26, 19);
  uint64_t v12 = v10 ^ v7;
  uint64_t v13 = v7 ^ v11 ^ v8;
  uint64_t v14 = __ROR8__(v7 ^ v11, 19);
  v9.f32[1] = (float)((9 * ((((unint64_t)(5 * v7) >> 32) >> 25) | (640 * v7))) & 0xFFFFFF)
            * 0.000000059605;
  uint64_t v15 = v10 ^ (v7 << 17);
  __asm { FMOV            V2.2S, #-1.0 }
  double v21 = COERCE_DOUBLE(vmul_n_f32(vadd_f32(vadd_f32(v9, v9), _D2), a3 * a4));
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  uint64_t v22 = (void *)swift_allocObject();
  *a1 = v22;
  v22[2] = v13;
  v22[3] = v12;
  v22[4] = v15;
  v22[5] = v14;
  return v21;
}

__n128 static ScriptingSupport.randomNumberGeneratorGetFloat3WhiteNoise(_:_:_:)(void *a1, uint64_t a2, float a3, float a4)
{
  sub_1B62CAAD8(a2, (uint64_t)v28);
  swift_dynamicCast();
  uint64_t v7 = v31 ^ v29 ^ v30;
  uint64_t v8 = v32 ^ v30 ^ v29;
  v9.f32[0] = (float)((9 * ((((unint64_t)(5 * v30) >> 32) >> 25) | (640 * v30))) & 0xFFFFFF)
            * 0.000000059605;
  uint64_t v10 = v8 ^ v31 ^ v29 ^ (v30 << 17);
  uint64_t v11 = v7 ^ __ROR8__(v32 ^ v30, 19);
  uint64_t v12 = v10 ^ v7;
  uint64_t v13 = v11 ^ v8;
  uint64_t v14 = v10 ^ (v7 << 17) ^ v13;
  uint64_t v15 = v12 ^ __ROR8__(v11, 19);
  uint64_t v16 = v14 ^ v12;
  uint64_t v17 = __ROR8__(v15, 19);
  uint64_t v18 = v15 ^ v13;
  v9.f32[1] = (float)((9 * ((((unint64_t)(5 * v7) >> 32) >> 25) | (640 * v7))) & 0xFFFFFF)
            * 0.000000059605;
  v9.f32[2] = (float)((9 * ((((unint64_t)(5 * v12) >> 32) >> 25) | (640 * v12))) & 0xFFFFFF)
            * 0.000000059605;
  uint64_t v19 = v14 ^ (v12 << 17);
  __asm { FMOV            V2.4S, #-1.0 }
  float32x4_t v27 = vmulq_n_f32(vaddq_f32(vaddq_f32(v9, v9), _Q2), a3 * a4);
  a1[3] = &type metadata for RandomNumberGeneratorXoshiro;
  uint64_t v25 = (void *)swift_allocObject();
  *a1 = v25;
  v25[2] = v18;
  v25[3] = v16;
  v25[4] = v19;
  v25[5] = v17;
  return (__n128)v27;
}

__n128 static ScriptingSupport.randomNumberGeneratorGetFloat4WhiteNoise(_:_:_:)(uint64_t *a1, uint64_t a2, float a3, float a4)
{
  sub_1B62CAAD8(a2, (uint64_t)v19);
  swift_dynamicCast();
  *(double *)v7.i64 = sub_1B6C160E0();
  __asm { FMOV            V1.4S, #-1.0 }
  long long v17 = v20;
  float32x4_t v18 = vmulq_n_f32(vaddq_f32(vaddq_f32(v7, v7), _Q1), a3 * a4);
  uint64_t v13 = v21;
  uint64_t v14 = v22;
  a1[3] = (uint64_t)&type metadata for RandomNumberGeneratorXoshiro;
  uint64_t v15 = swift_allocObject();
  *a1 = v15;
  *(_OWORD *)(v15 + 16) = v17;
  *(void *)(v15 + 32) = v13;
  *(void *)(v15 + 40) = v14;
  return (__n128)v18;
}

uint64_t sub_1B6C165E8()
{
  return sub_1B6C16630((uint64_t (*)(uint64_t))sub_1B6C1683C);
}

uint64_t sub_1B6C16600()
{
  return sub_1B6C16630((uint64_t (*)(uint64_t))sub_1B6C1692C);
}

uint64_t sub_1B6C16618()
{
  return sub_1B6C16630((uint64_t (*)(uint64_t))sub_1B6C16940);
}

uint64_t sub_1B6C16630(uint64_t (*a1)(uint64_t))
{
  uint64_t v3 = *v1;
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *uint64_t v1 = v3;
  if (!result)
  {
    uint64_t result = a1(v3);
    *uint64_t v1 = result;
  }
  return result;
}

char *sub_1B6C16680(uint64_t a1)
{
  return sub_1B68C0634(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1B6C16694(void *a1)
{
  return sub_1B68C0888(0, a1[2], 0, a1);
}

char *sub_1B6C166A8(uint64_t a1)
{
  return sub_1B68C09B4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1B6C166BC(unint64_t a1)
{
  return sub_1B68C09C8(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_1B6C166D0(void *a1)
{
  return sub_1B6397958(0, a1[2], 0, a1);
}

void *sub_1B6C166E4(void *a1)
{
  return sub_1B68C0FD8(0, a1[2], 0, a1);
}

char *sub_1B6C166F8(uint64_t a1)
{
  return sub_1B68C1000(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1B6C1670C(void *a1)
{
  return sub_1B68C12C8(0, a1[2], 0, a1);
}

void *sub_1B6C16720(void *a1)
{
  return sub_1B6335858(0, a1[2], 0, a1);
}

void *sub_1B6C16734(void *a1)
{
  return sub_1B68C1194(0, a1[2], 0, a1);
}

char *sub_1B6C16748(uint64_t a1)
{
  return sub_1B68C18B8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1B6C1675C(void *a1)
{
  return sub_1B68C1C1C(0, a1[2], 0, a1);
}

char *sub_1B6C16770(uint64_t a1)
{
  return sub_1B633F784(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B6C16784(uint64_t a1)
{
  return sub_1B68C1E4C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1B6C16798(void *a1)
{
  return sub_1B68C257C(0, a1[2], 0, a1);
}

void *sub_1B6C167AC(void *a1)
{
  return sub_1B68C2464(0, a1[2], 0, a1);
}

void *sub_1B6C167C4(void *a1)
{
  return sub_1B68C2928(0, a1[2], 0, a1);
}

void *sub_1B6C167D8(void *a1)
{
  return sub_1B68C0C6C(0, a1[2], 0, a1);
}

void *sub_1B6C167EC(void *a1)
{
  return sub_1B68C0D7C(0, a1[2], 0, a1);
}

void *sub_1B6C16800(void *a1)
{
  return sub_1B68C3A9C(0, a1[2], 0, a1);
}

char *sub_1B6C16814(uint64_t a1)
{
  return sub_1B68C370C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B6C16828(uint64_t a1)
{
  return sub_1B68C3BD4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B6C1683C(uint64_t a1)
{
  return sub_1B6397840(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1B6C16850(void *a1)
{
  return sub_1B637C5BC(0, a1[2], 0, a1);
}

void *sub_1B6C16864(void *a1)
{
  return sub_1B68C3CE8(0, a1[2], 0, a1);
}

void *sub_1B6C16878(void *a1)
{
  return sub_1B68C27FC(0, a1[2], 0, a1);
}

char *sub_1B6C1688C(uint64_t a1)
{
  return sub_1B68C0EA8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1B6C168A0(void *a1)
{
  return sub_1B68C4CC4(0, a1[2], 0, a1);
}

void *sub_1B6C168B4(void *a1)
{
  return sub_1B68C4CEC(0, a1[2], 0, a1);
}

void *sub_1B6C168C8(void *a1)
{
  return sub_1B62E95AC(0, a1[2], 0, a1);
}

void *sub_1B6C168DC(void *a1)
{
  return sub_1B68C4F6C(0, a1[2], 0, a1);
}

void *sub_1B6C168F0(void *a1)
{
  return sub_1B68C5194(0, a1[2], 0, a1);
}

void *sub_1B6C16904(void *a1)
{
  return sub_1B68C5650(0, a1[2], 0, a1);
}

char *sub_1B6C16918(uint64_t a1)
{
  return sub_1B68C1F74(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1B6C1692C(void *a1)
{
  return sub_1B68C5ABC(0, a1[2], 0, a1);
}

char *sub_1B6C16940(uint64_t a1)
{
  return sub_1B68C59A4(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void sub_1B6C16954(unint64_t a1)
{
  if (a1 >> 62)
  {
    swift_bridgeObjectRetain();
    sub_1B6E32C18();
    swift_bridgeObjectRelease();
  }

  JUMPOUT(0x1BA9B4590);
}

void *sub_1B6C169D0(void *a1)
{
  return sub_1B68C5C38(0, a1[2], 0, a1);
}

char *sub_1B6C169E4(uint64_t a1)
{
  return sub_1B68C17A0(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B6C169F8(uint64_t a1)
{
  return sub_1B68C60D8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

void *sub_1B6C16A0C(void *a1)
{
  return sub_1B62B0BD0(0, a1[2], 0, a1);
}

void *sub_1B6C16A20(void *a1)
{
  return sub_1B68C3E20(0, a1[2], 0, a1);
}

char *sub_1B6C16A34(uint64_t a1)
{
  return sub_1B68C66EC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B6C16A48(uint64_t a1)
{
  return sub_1B68C6810(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B6C16A5C(uint64_t a1)
{
  return sub_1B68C6904(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B6C16A70(uint64_t a1)
{
  return sub_1B68C6B04(0, *(void *)(a1 + 16), 0, (char *)a1);
}

char *sub_1B6C16A84(uint64_t a1)
{
  return sub_1B6364C2C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1B6C16A98()
{
  if (*(void *)(v0 + 128))
  {
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }

  return MEMORY[0x1F4186498](v0, 136, 7);
}

uint64_t sub_1B6C16AE0()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 41, 7);
}

uint64_t sub_1B6C16B28()
{
  return MEMORY[0x1F4186498](v0, 48, 7);
}

ValueMetadata *type metadata accessor for ScriptingSupport()
{
  return &type metadata for ScriptingSupport;
}

id sub_1B6C16B48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int8x16_t v4 = v3;
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1B6C17FCC(0, &qword_1E9DD7200, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v9 - 8, v10);
  v45 = (char *)v39 - v11;
  sub_1B6C17FCC(0, &qword_1E9DD7208, MEMORY[0x1E4F27400], v8);
  MEMORY[0x1F4188790](v12 - 8, v13);
  uint64_t v15 = (char *)v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16, v17);
  uint64_t v19 = (char *)v39 - v18;
  uint64_t v20 = (uint64_t)&v4[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_lastModificationDate];
  uint64_t v21 = sub_1B6E31098();
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v22 + 56);
  uint64_t v41 = v21;
  uint64_t v42 = v20;
  v39[1] = v22 + 56;
  unsigned int v40 = v23;
  ((void (*)(uint64_t, uint64_t, uint64_t))v23)(v20, 1, 1);
  swift_weakInit();
  uint64_t v24 = &v4[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_url];
  uint64_t v25 = sub_1B6E30F48();
  uint64_t v26 = *(void *)(v25 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v26 + 16))(v24, a1, v25);
  *(void *)&v4[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_entity] = a2;
  swift_retain();
  swift_weakAssign();
  float32x4_t v27 = v4;
  swift_release();
  v27[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_shouldReplicate] = sub_1B6A62BFC(a2, a3);
  sub_1B6C17FCC(0, (unint64_t *)&unk_1E9DD7210, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
  uint64_t v29 = (void *)*MEMORY[0x1E4F1C530];
  *(void *)(inited + 32) = *MEMORY[0x1E4F1C530];
  id v30 = v29;
  sub_1B6B074A4(inited);
  swift_setDeallocating();
  type metadata accessor for URLResourceKey(0);
  swift_arrayDestroy();
  uint64_t v44 = a1;
  sub_1B6E30E28();
  swift_bridgeObjectRelease();
  uint64_t v31 = sub_1B6E30C38();
  (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56))(v19, 0, 1, v31);
  sub_1B6C17E74((uint64_t)v19, (uint64_t)v15, &qword_1E9DD7208, MEMORY[0x1E4F27400]);
  sub_1B6E30C38();
  uint64_t v32 = *(void *)(v31 - 8);
  int v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v15, 1, v31);
  uint64_t v34 = (uint64_t)v45;
  if (v33 == 1)
  {
    sub_1B6C17EF4((uint64_t)v15, &qword_1E9DD7208, MEMORY[0x1E4F27400]);
    v40(v34, 1, 1, v41);
  }
  else
  {
    sub_1B6E30C28();
    (*(void (**)(char *, uint64_t))(v32 + 8))(v15, v31);
  }
  uint64_t v35 = (objc_class *)ObjectType;
  uint64_t v36 = v44;
  sub_1B6C17DE0(v34, v42);

  v46.receiver = v27;
  v46.super_class = v35;
  id v37 = objc_msgSendSuper2(&v46, sel_init);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v36, v25);
  sub_1B6C17EF4((uint64_t)v19, &qword_1E9DD7208, MEMORY[0x1E4F27400]);
  return v37;
}

uint64_t sub_1B6C17224()
{
  uint64_t v1 = sub_1B6E31098();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  int8x16_t v5 = (char *)&v55 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v55 - v8;
  uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t))MEMORY[0x1E4FBB718];
  sub_1B6C17FCC(0, &qword_1E9DD7200, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v11 - 8, v12);
  uint64_t v14 = (char *)&v55 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v18 = (char *)&v55 - v17;
  MEMORY[0x1F4188790](v19, v20);
  uint64_t v60 = (uint64_t)&v55 - v21;
  sub_1B6C17FCC(0, &qword_1E9DD7208, MEMORY[0x1E4F27400], v10);
  MEMORY[0x1F4188790](v22 - 8, v23);
  uint64_t v25 = (char *)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v26, v27);
  uint64_t v29 = (char *)&v55 - v28;
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v31 = result;
    v56 = v5;
    v57 = v14;
    uint64_t v58 = v2;
    v59 = v0;
    sub_1B6C17FCC(0, (unint64_t *)&unk_1E9DD7210, (uint64_t (*)(uint64_t))type metadata accessor for URLResourceKey, MEMORY[0x1E4FBBE00]);
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
    int v33 = (void *)*MEMORY[0x1E4F1C530];
    *(void *)(inited + 32) = *MEMORY[0x1E4F1C530];
    id v34 = v33;
    sub_1B6B074A4(inited);
    swift_setDeallocating();
    type metadata accessor for URLResourceKey(0);
    swift_arrayDestroy();
    sub_1B6E30E28();
    swift_bridgeObjectRelease();
    uint64_t v35 = sub_1B6E30C38();
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56))(v29, 0, 1, v35);
    sub_1B6C17E74((uint64_t)v29, (uint64_t)v25, &qword_1E9DD7208, MEMORY[0x1E4F27400]);
    sub_1B6E30C38();
    uint64_t v36 = *(void *)(v35 - 8);
    int v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v36 + 48))(v25, 1, v35);
    uint64_t v38 = v58;
    if (v37 == 1)
    {
      sub_1B6C17EF4((uint64_t)v25, &qword_1E9DD7208, MEMORY[0x1E4F27400]);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v60, 1, 1, v1);
    }
    else
    {
      sub_1B6E30C28();
      (*(void (**)(char *, uint64_t))(v36 + 8))(v25, v35);
    }
    sub_1B6C17E74((uint64_t)v59+ OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_lastModificationDate, (uint64_t)v18, &qword_1E9DD7200, MEMORY[0x1E4F27928]);
    uint64_t v39 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v38 + 48);
    if (v39(v18, 1, v1) == 1)
    {
      swift_release();
      unsigned int v40 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
      uint64_t v41 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
      uint64_t v42 = v60;
    }
    else
    {
      uint64_t v55 = v31;
      v43 = *(void (**)(char *, char *, uint64_t))(v38 + 32);
      v43(v9, v18, v1);
      uint64_t v44 = v60;
      uint64_t v18 = v57;
      sub_1B6C17E74(v60, (uint64_t)v57, &qword_1E9DD7200, MEMORY[0x1E4F27928]);
      if (v39(v18, 1, v1) != 1)
      {
        v48 = v56;
        v43(v56, v18, v1);
        v49 = v48;
        if (sub_1B6E31068())
        {
          uint64_t v50 = swift_allocObject();
          v51 = v59;
          uint64_t v52 = v55;
          *(void *)(v50 + 16) = v59;
          *(void *)(v50 + 24) = v52;
          id v53 = v51;
          swift_retain();
          sub_1B69DECC8((uint64_t)sub_1B6C17FA4, v50);
          swift_release();
        }
        swift_release();
        v54 = *(void (**)(char *, uint64_t))(v38 + 8);
        v54(v49, v1);
        v54(v9, v1);
        sub_1B6C17EF4(v60, &qword_1E9DD7200, MEMORY[0x1E4F27928]);
        objc_super v46 = &qword_1E9DD7208;
        v47 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27400];
        uint64_t v45 = (uint64_t)v29;
        return sub_1B6C17EF4(v45, v46, v47);
      }
      swift_release();
      (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v1);
      unsigned int v40 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
      uint64_t v41 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F27928];
      uint64_t v42 = v44;
    }
    sub_1B6C17EF4(v42, &qword_1E9DD7200, v40);
    sub_1B6C17EF4((uint64_t)v29, &qword_1E9DD7208, MEMORY[0x1E4F27400]);
    uint64_t v45 = (uint64_t)v18;
    objc_super v46 = &qword_1E9DD7200;
    v47 = v41;
    return sub_1B6C17EF4(v45, v46, v47);
  }
  return result;
}

void sub_1B6C1791C(char *a1, uint64_t a2)
{
  if (a1[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_shouldReplicate] == 1)
  {
    sub_1B6A618E4(0, a2, a1);
  }
  else
  {
    int v4 = *(_DWORD *)&a1[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_entity + 4];
    uint64_t v5 = *(int *)&a1[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_entity];
    BOOL v6 = v5 == -1 && v4 == 0;
    if (!v6 && (v5 & 0x80000000) == 0 && *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v5)
    {
      uint64_t v7 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (v4 == -1 || *(_DWORD *)(v7 + 12 * (int)v5 + 8) == v4) {
        sub_1B635ACD8(*(uint64_t **)(*(void *)(a2 + 136) + 8 * *(int *)(v7 + 12 * (int)v5) + 32));
      }
    }
  }
  uint64_t v9 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v9)
  {
    uint64_t v10 = *(void *)(v9 + 240);
    uint64_t v11 = &a1[OBJC_IVAR____TtCC3VFX10URLWatcherP33_98C17C331D2C865219A0B9EDA6B0BCC59Presenter_url];
    uint64_t v12 = *(os_unfair_lock_s **)(v10 + 48);
    swift_retain();
    os_unfair_lock_lock(v12);
    uint64_t v13 = *(void *)(v10 + 72);
    MEMORY[0x1F4188790](v14, v15);
    v17[2] = v11;
    swift_bridgeObjectRetain();
    uint64_t v16 = sub_1B6D00908((uint64_t)sub_1B6C17FAC, v17, v13);
    swift_bridgeObjectRelease();
    *(void *)(v10 + 72) = v16;
    swift_bridgeObjectRelease();
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 48));
    swift_release();
  }
}

uint64_t sub_1B6C17BF8()
{
  uint64_t v1 = self;
  uint64_t v2 = *(void **)(v0 + 16);
  objc_msgSend(v1, sel_removeFilePresenter_, v2);

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for URLWatcher()
{
  return self;
}

uint64_t sub_1B6C17C78()
{
  return type metadata accessor for URLWatcher.Presenter();
}

uint64_t type metadata accessor for URLWatcher.Presenter()
{
  uint64_t result = qword_1E9DD71F0;
  if (!qword_1E9DD71F0) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1B6C17CCC()
{
  sub_1B6E30F48();
  if (v0 <= 0x3F)
  {
    sub_1B6C17FCC(319, &qword_1E9DD7200, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
    if (v1 <= 0x3F) {
      swift_updateClassMetadata2();
    }
  }
}

uint64_t sub_1B6C17DE0(uint64_t a1, uint64_t a2)
{
  sub_1B6C17FCC(0, &qword_1E9DD7200, MEMORY[0x1E4F27928], MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B6C17E74(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t (*a4)(uint64_t))
{
  sub_1B6C17FCC(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16))(a2, a1, v6);
  return a2;
}

uint64_t sub_1B6C17EF4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t))
{
  sub_1B6C17FCC(0, a2, a3, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8))(a1, v4);
  return a1;
}

uint64_t sub_1B6C17F64()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1B6C17FA4()
{
  sub_1B6C1791C(*(char **)(v0 + 16), *(void *)(v0 + 24));
}

BOOL sub_1B6C17FAC(uint64_t a1, uint64_t a2)
{
  return sub_1B6BCAEB8(a1, a2, *(void *)(v2 + 16));
}

void sub_1B6C17FCC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v7 = a3(255);
    unint64_t v8 = a4(a1, v7);
    if (!v9) {
      atomic_store(v8, a2);
    }
  }
}

Swift::Void __swiftcall VFXInitialize()()
{
  if (qword_1EB97F010 != -1) {
    swift_once();
  }
}

uint64_t sub_1B6C18064()
{
  meshopt_initialize();
  if (qword_1EB97D5D0 != -1) {
    swift_once();
  }
  if (qword_1EB97F1E0 != -1) {
    swift_once();
  }
  qword_1EB997EC8 = qword_1EB9979A0;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  sub_1B69F06B0();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v2 = (uint64_t *)(v0 + 32);
    uint64_t v3 = MEMORY[0x1E4FBC860];
    do
    {
      uint64_t v4 = *v2;
      v2 += 2;
      swift_retain();
      sub_1B6654DA4(v4, v3);
      swift_release();
      --v1;
    }
    while (v1);
  }

  return swift_bridgeObjectRelease();
}

uint64_t VFXInitialize()
{
  if (qword_1EB97F010 != -1) {
    return swift_once();
  }
  return result;
}

uint64_t sub_1B6C181B0()
{
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v1 = sub_1B636E9A8((uint64_t)&type metadata for DebugCullingSystemState);
  if (v3)
  {
    uint64_t v5 = (unsigned __int8 *)(*(void *)(v0 + 16) + v1);
    uint64_t v6 = 32 * v2;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)(v0 + 32) + 32 * v2 + 24));
    os_unfair_recursive_lock_unlock();
    if (v5[1]) {
      int v7 = 256;
    }
    else {
      int v7 = 0;
    }
    int v8 = v7 | *v5;
    if (v5[2]) {
      int v9 = 0x10000;
    }
    else {
      int v9 = 0;
    }
    uint64_t v4 = v8 | v9;
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)(v0 + 32) + v6 + 24));
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    return 2;
  }
  return v4;
}

void sub_1B6C1826C(uint64_t a1@<X8>)
{
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v3 = sub_1B636E9A8((uint64_t)&type metadata for FrameConstantsStorage);
  if (v5)
  {
    uint64_t v6 = (const void *)(*(void *)(v1 + 16) + v3);
    uint64_t v7 = 32 * v4;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)(v1 + 32) + 32 * v4 + 24));
    os_unfair_recursive_lock_unlock();
    memcpy(v9, v6, 0x64BuLL);
    memmove(__dst, v6, 0x64BuLL);
    nullsub_1(__dst);
    sub_1B62D7DE8((uint64_t)__dst, a1, &qword_1E9DD77F0, (uint64_t)&type metadata for FrameConstantsStorage);
    int v8 = *(os_unfair_lock_s **)(*(void *)(v1 + 32) + v7 + 24);
    sub_1B6C20378((uint64_t)v9);
    os_unfair_lock_unlock(v8);
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    sub_1B6C20370(__dst);
    sub_1B62D7DE8((uint64_t)__dst, a1, &qword_1E9DD77F0, (uint64_t)&type metadata for FrameConstantsStorage);
  }
}

void sub_1B6C18374(uint64_t a1@<X8>)
{
  os_unfair_recursive_lock_lock_with_options();
  uint64_t v3 = sub_1B636E9A8((uint64_t)&type metadata for LightsUniforms);
  if (v5)
  {
    uint64_t v9 = *(void *)(v1 + 16) + v3;
    uint64_t v10 = 32 * v4;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)(v1 + 32) + 32 * v4 + 24));
    os_unfair_recursive_lock_unlock();
    uint64_t v11 = *(void *)(v9 + 16);
    long long v16 = *(_OWORD *)(v9 + 24);
    uint64_t v6 = *(void *)(v9 + 40);
    if (*(unsigned char *)(v9 + 49)) {
      int v12 = 256;
    }
    else {
      int v12 = 0;
    }
    int v13 = v12 | *(unsigned __int8 *)(v9 + 48);
    if (*(unsigned char *)(v9 + 50)) {
      int v14 = 0x10000;
    }
    else {
      int v14 = 0;
    }
    int v7 = v13 | v14;
    *(_OWORD *)a1 = *(_OWORD *)v9;
    *(void *)(a1 + 16) = v11;
    uint64_t v15 = *(os_unfair_lock_s **)(*(void *)(v1 + 32) + v10 + 24);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    os_unfair_lock_unlock(v15);
    long long v8 = v16;
  }
  else
  {
    os_unfair_recursive_lock_unlock();
    uint64_t v6 = 0;
    int v7 = 0;
    *(void *)a1 = 1;
    long long v8 = 0uLL;
    *(_OWORD *)(a1 + 8) = 0u;
  }
  *(_OWORD *)(a1 + 24) = v8;
  *(void *)(a1 + 40) = v6;
  *(_WORD *)(a1 + 48) = v7;
  *(unsigned char *)(a1 + 50) = BYTE2(v7);
}

uint64_t sub_1B6C184A0()
{
  swift_retain();
  sub_1B636E62C();
  unsigned __int8 v2 = v1;
  int v3 = v1;
  swift_release();
  if (v3 == 2) {
    return 0;
  }
  uint64_t v5 = *(void *)(*(void *)(v0 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                 + 8 * *(void *)thread_worker_index(&thread_worker_index, v4)
                 + 8);
  sub_1B62F7B88(0, (unint64_t *)&qword_1EB980BA0, (unint64_t *)&qword_1EB97EB00, (unint64_t *)&qword_1EB97EAE0);
  uint64_t v6 = swift_allocObject();
  int v7 = &type metadata for DebugInfoA;
  *(_OWORD *)(v6 + 16) = xmmword_1B6E77050;
  if ((v2 & 1) == 0) {
    int v7 = &type metadata for DebugInfoB;
  }
  long long v8 = &off_1F0F52198;
  if (v2) {
    long long v8 = &off_1F0F520A8;
  }
  *(void *)(v6 + 32) = v7;
  *(void *)(v6 + 40) = v8;
  return v5;
}

void sub_1B6C1863C(_DWORD *a1@<X8>)
{
  *(_DWORD *)((char *)a1 + 3) = 0;
  *a1 = 0;
}

uint64_t sub_1B6C18648(void *a1, __n128 a2, __n128 a3, __n128 a4, uint64_t a5, int a6, uint64_t a7, uint64_t a8)
{
  uint64_t v93 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a1[2];
  uint64_t v13 = *(void *)(v12 + 24);
  uint64_t result = sub_1B6388ED8(v13);
  if (!result) {
    return result;
  }
  uint64_t v15 = (void *)result;
  uint64_t v76 = a8;
  uint64_t v78 = a1[6];
  uint64_t v83 = a1[7];
  uint64_t v80 = v83 - v78;
  uint64_t v16 = a1[1];
  uint64_t v17 = (uint64_t *)a1[11];
  uint64_t v18 = a1[12];
  uint64_t v19 = a1[13];
  swift_unknownObjectRetain();
  uint64_t v20 = sub_1B62C9024((uint64_t)&type metadata for WorldAABB, (uint64_t)&off_1F0FAAB28, v17, v18, v19, v12);
  if (a6)
  {
    if ((a6 & 0x100) != 0)
    {
      uint64_t v21 = v80 + 2;
      if (v80 + 2 <= 0) {
        goto LABEL_23;
      }
    }
    else
    {
      uint64_t v21 = v83 - v78;
      if (v80 <= 0) {
        goto LABEL_23;
      }
    }
  }
  else
  {
    if ((a6 & 0x100) == 0) {
      goto LABEL_23;
    }
    uint64_t v21 = 2;
  }
  uint64_t v22 = 32 * v21;
  swift_retain();
  uint64_t v23 = (void *)sub_1B62F1868(v13, v22);
  uint64_t v25 = v24;
  uint64_t v75 = v26;
  swift_unknownObjectRetain();
  swift_release();
  uint64_t v74 = v20;
  if (a6)
  {
    uint64_t v73 = v25;
    uint64_t v29 = *(void *)(v12 + 24);
    swift_retain();
    id v30 = (void *)sub_1B62F1868(v29, 16 * v80);
    uint64_t v32 = v31;
    uint64_t v70 = v33;
    swift_unknownObjectRetain();
    swift_release();
    uint64_t v72 = (uint64_t)v30;
    if (objc_msgSend(v30, sel_storageMode) == (id)2)
    {
      id v34 = 0;
    }
    else
    {
      uint64_t v35 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents, v70);
      id v36 = v30;
      id v34 = (__n128 *)&v35[v32];
    }
    sub_1B6345398(*(void *)(v16 + 40), (uint64_t)&type metadata for LODCulled, v91);
    uint64_t v71 = v32;
    if (LOBYTE(v91[0]) == 1)
    {
      uint64_t v37 = v83 - v78;
      if (v83 != v78)
      {
        do
        {
          *v34++ = a2;
          --v37;
        }
        while (v37);
      }
    }
    else if (v83 != v78)
    {
      uint64_t v51 = v78;
      uint64_t v52 = &v34[-v78];
      do
      {
        int v54 = *(_DWORD *)(v16 + 188);
        uint64_t v55 = *(void *)(*(void *)(*(void *)(v16 + 16) + 96) + 40 * *(int *)(v16 + 24) + 48);
        swift_retain();
        if (a7 < 0
          || *(void *)(v55 + 16) <= a7
          || (uint64_t v56 = *(void *)(v55 + 8 * a7 + 32), (v57 = *(void *)(v56 + 16)) == 0))
        {
LABEL_30:
          swift_release();
          __n128 v53 = a4;
        }
        else
        {
          uint64_t v58 = (void *)(v56 + 40);
          while (*((_DWORD *)v58 - 2) != v54 || *v58 && (*(void *)(*v58 + 8 * (v51 >> 6)) & (1 << v51)) == 0)
          {
            v58 += 3;
            if (!--v57) {
              goto LABEL_30;
            }
          }
          swift_release();
          __n128 v53 = a3;
        }
        v52[v51++] = v53;
      }
      while (v51 != v83);
    }
    swift_getObjectType();
    sub_1B6CC87A0(v72, v71, v70, 0);
    swift_unknownObjectRelease();
    uint64_t v25 = v73;
    sub_1B6CC87A0((uint64_t)v23, v73, v75, 0);
    id v38 = objc_msgSend(v23, sel_storageMode);
    uint64_t v39 = 0;
    if (v38 != (id)2)
    {
      unsigned int v40 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v41 = v23;
      uint64_t v39 = &v40[v73];
    }
    memcpy(v39, (const void *)(v74 + 32 * v78), 32 * v80);
    sub_1B6CC87B8(12, v80);
  }
  if ((a6 & 0x100) == 0)
  {
    swift_unknownObjectRelease();
LABEL_23:
    return swift_unknownObjectRelease();
  }
  v27.i32[0] = *(_DWORD *)(v16 + 116);
  v28.i32[0] = *(_DWORD *)(v16 + 304);
  int8x16_t v90 = vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_s32(v28, v27), 0), (int8x16_t)xmmword_1B6EB4070, (int8x16_t)xmmword_1B6EB4060);
  swift_getObjectType();
  objc_msgSend(v15, sel_setVertexBytes_length_atIndex_, &v90, 16, v76);
  objc_msgSend(v23, sel_storageMode);
  uint64_t v42 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v43 = v23;
  float32x4_t v44 = vaddq_f32(*(float32x4_t *)(v16 + 288), (float32x4_t)xmmword_1B6E963D0);
  uint64_t v45 = &v42[32 * v80 + v25];
  *(_OWORD *)uint64_t v45 = *(_OWORD *)(v16 + 272);
  *((float32x4_t *)v45 + 1) = v44;
  sub_1B6CC87A0((uint64_t)v43, v25, v75, 32 * v80);
  sub_1B6CC87B8(12, 1);
  if ((a6 & 0x10000) != 0)
  {
    sub_1B6E33918();
    sub_1B6E33928();
    *(void *)&v91[0] = sub_1B6E33988();
    sub_1B6E33098();
    sub_1B6E33998();
    sub_1B6E318B8();
    swift_bridgeObjectRelease();
    v91[2] = v87;
    v91[3] = v88;
    uint64_t v92 = v89;
    v91[0] = v85;
    v91[1] = v86;
    uint64_t v46 = sub_1B6E33978();
    *(double *)v47.i64 = sub_1B6748838(v46 | 0xFF000000);
    int8x16_t v90 = v47;
    objc_msgSend(v15, sel_setVertexBytes_length_atIndex_, &v90, 16, v76);
    uint64_t v48 = v83 - v78;
    if (v83 == v78)
    {
      long long v82 = xmmword_1B6E4F370;
      float32x4_t v84 = (float32x4_t)xmmword_1B6E51230;
      v49 = &selRef_setToShift_;
      uint64_t v50 = &selRef_bufferIndex;
    }
    else
    {
      v59 = (float32x4_t *)(v74 + 32 * v78 + 16);
      float32x4_t v60 = (float32x4_t)xmmword_1B6E4F370;
      float32x4_t v61 = (float32x4_t)xmmword_1B6E77AF0;
      v62.i64[0] = 0x3F0000003F000000;
      v62.i64[1] = 0x3F0000003F000000;
      uint64_t v50 = &selRef_bufferIndex;
      do
      {
        float32x4_t v63 = v59[-1];
        float32x4_t v64 = vminnmq_f32(vsubq_f32(v60, v61), vsubq_f32(v63, *v59));
        float32x4_t v65 = vmaxnmq_f32(vaddq_f32(v61, v60), vaddq_f32(v63, *v59));
        float32x4_t v60 = vmulq_f32(vaddq_f32(v64, v65), v62);
        float32x4_t v61 = vmulq_f32(vsubq_f32(v65, v64), v62);
        v59 += 2;
        --v48;
      }
      while (v48);
      long long v82 = (__int128)v60;
      float32x4_t v84 = vaddq_f32(v61, (float32x4_t)xmmword_1B6E963D0);
      v49 = &selRef_setToShift_;
    }
    uint64_t v66 = 32 * v80 + 32;
    objc_msgSend(v43, v49[253], v70);
    v67 = (char *)[(id)swift_unknownObjectRetain() v50[171]];
    id v68 = v43;
    v69 = (long long *)&v67[v25 + v66];
    long long *v69 = v82;
    v69[1] = (__int128)v84;
    sub_1B6CC87A0((uint64_t)v68, v25, v75, v66);
    sub_1B6CC87B8(12, 1);
  }
  swift_unknownObjectRelease();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B6C18D54()
{
  return swift_deallocClassInstance();
}

uint64_t sub_1B6C18D68(uint64_t a1)
{
  if (a1 == 1)
  {
    int v1 = 0;
  }
  else
  {
    if (!a1)
    {
      int v1 = 255;
LABEL_10:
      int v2 = 255;
      int v3 = 255;
      return sub_1B67ADC80(v1, v2, v3);
    }
    if ((a1 & 0xFFFFFFFFFFFFFFFELL) == 2)
    {
      int v1 = 0;
      goto LABEL_10;
    }
    if ((a1 & 0xFFFFFFFFFFFFFFFCLL) == 4)
    {
      int v1 = 0;
LABEL_15:
      int v2 = 255;
      int v3 = 0;
      return sub_1B67ADC80(v1, v2, v3);
    }
    if ((a1 & 0xFFFFFFFFFFFFFFF8) == 8)
    {
      int v1 = 255;
      goto LABEL_15;
    }
    if ((a1 & 0xFFFFFFFFFFFFFFF0) == 0x10) {
      return sub_1B67ADC80(255, 128, 0);
    }
    if ((a1 & 0xFFFFFFFFFFFFFFE0) == 0x20)
    {
      int v1 = 255;
LABEL_23:
      int v2 = 0;
      int v3 = 0;
      return sub_1B67ADC80(v1, v2, v3);
    }
    if ((a1 & 0xFFFFFFFFFFFFFFC0) != 0x40)
    {
      int v1 = 0;
      goto LABEL_23;
    }
    int v1 = 255;
  }
  int v2 = 0;
  int v3 = 255;
  return sub_1B67ADC80(v1, v2, v3);
}

uint64_t sub_1B6C18E2C(unsigned int a1, uint64_t a2, uint64_t a3, float32x4_t a4, float32x4_t a5)
{
  a4.i32[3] = 1.0;
  a5.i32[3] = 1.0;
  v7.i64[0] = 0x3F0000003F000000;
  v7.i64[1] = 0x3F0000003F000000;
  float32x4_t v10 = vmulq_f32(vsubq_f32(a5, a4), v7);
  float32x4_t v11 = vmulq_f32(vaddq_f32(a4, a5), v7);
  int v8 = sub_1B6C18D68(a1);
  v12[0] = (__int128)v11;
  v12[1] = (__int128)v10;
  memset(&v12[2], 0, 64);
  char v13 = 6;
  return sub_1B6D7E4E0(a3, 0x100000000uLL, a2, v12, v8);
}

uint64_t sub_1B6C18ED4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 32))(a2);
}

uint64_t sub_1B6C18F00(uint64_t a1)
{
  unint64_t v2 = sub_1B6C208BC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C18F3C(uint64_t a1)
{
  unint64_t v2 = sub_1B6C208BC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C18F78(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6C19070(a1, a2, a3, &qword_1E9DD7298, (void (*)(void))sub_1B6C208BC, (uint64_t)&type metadata for DebugInfoA.CodingKeys, (void (*)(void))sub_1B6C208BC);
}

uint64_t sub_1B6C18FB8(uint64_t a1)
{
  unint64_t v2 = sub_1B6C20970();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C18FF4(uint64_t a1)
{
  unint64_t v2 = sub_1B6C20970();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C19030(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6C19070(a1, a2, a3, &qword_1E9DD72A8, (void (*)(void))sub_1B6C20970, (uint64_t)&type metadata for DebugInfoB.CodingKeys, (void (*)(void))sub_1B6C20970);
}

uint64_t sub_1B6C19070(void *a1, uint64_t a2, uint64_t a3, unint64_t *a4, void (*a5)(void), uint64_t a6, void (*a7)(void))
{
  sub_1B6C20910(0, a4, a5);
  uint64_t v10 = v9;
  uint64_t v11 = *(void *)(v9 - 8);
  MEMORY[0x1F4188790](v9, v12);
  int v14 = (char *)&v16 - v13;
  sub_1B62C14BC(a1, a1[3]);
  a7();
  sub_1B6E33A88();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

void sub_1B6C19198(uint64_t a1@<X8>)
{
  *(double *)&long long v2 = sub_1B638DF64((float32x4_t)xmmword_1B6E4F370, 0.5);
  *(_OWORD *)a1 = v2;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(unsigned char *)(a1 + 96) = 3;
}

uint64_t sub_1B6C191E0@<X0>(_DWORD *a1@<X8>)
{
  uint64_t result = sub_1B67ADC80(255, 255, 255);
  *a1 = result;
  return result;
}

void sub_1B6C19214(uint64_t a1@<X8>)
{
  *(void *)a1 = -1;
  *(unsigned char *)(a1 + 8) = 0;
}

__n128 sub_1B6C19224(uint64_t a1, _DWORD *a2, __n128 *a3, __n128 a4, __n128 a5, __n128 a6, __n128 a7, uint64_t a8, long long *a9, int a10)
{
  sub_1B6C1E33C(a9, (uint64_t)v23);
  char v14 = v24;
  long long v15 = v23[1];
  *(_OWORD *)a1 = v23[0];
  *(_OWORD *)(a1 + 16) = v15;
  long long v16 = v23[3];
  *(_OWORD *)(a1 + 32) = v23[2];
  *(_OWORD *)(a1 + 48) = v16;
  long long v17 = v23[5];
  *(_OWORD *)(a1 + 64) = v23[4];
  *(_OWORD *)(a1 + 80) = v17;
  *(unsigned char *)(a1 + 96) = v14;
  *a2 = a10;
  *a3 = a4;
  a3[1] = a5;
  __n128 result = a7;
  a3[2] = a6;
  a3[3] = a7;
  return result;
}

double sub_1B6C192C0(uint64_t a1, _DWORD *a2, long long *a3, int a4)
{
  sub_1B6C1E33C(a3, (uint64_t)v12);
  char v7 = v15;
  long long v8 = v12[1];
  *(_OWORD *)a1 = v12[0];
  *(_OWORD *)(a1 + 16) = v8;
  long long v9 = v12[3];
  *(_OWORD *)(a1 + 32) = v12[2];
  *(_OWORD *)(a1 + 48) = v9;
  double result = *(double *)&v13;
  long long v11 = v14;
  *(_OWORD *)(a1 + 64) = v13;
  *(_OWORD *)(a1 + 80) = v11;
  *(unsigned char *)(a1 + 96) = v7;
  *a2 = a4;
  return result;
}

__n128 sub_1B6C19330(uint64_t a1, __n128 *a2, __n128 a3, __n128 a4, __n128 a5, __n128 a6, uint64_t a7, long long *a8)
{
  sub_1B6C1E33C(a8, (uint64_t)v19);
  char v10 = v20;
  long long v11 = v19[1];
  *(_OWORD *)a1 = v19[0];
  *(_OWORD *)(a1 + 16) = v11;
  long long v12 = v19[3];
  *(_OWORD *)(a1 + 32) = v19[2];
  *(_OWORD *)(a1 + 48) = v12;
  long long v13 = v19[5];
  *(_OWORD *)(a1 + 64) = v19[4];
  *(_OWORD *)(a1 + 80) = v13;
  *(unsigned char *)(a1 + 96) = v10;
  *a2 = a3;
  a2[1] = a4;
  __n128 result = a6;
  a2[2] = a5;
  a2[3] = a6;
  return result;
}

void sub_1B6C193B8()
{
  off_1E9DD7220 = &unk_1F0F540F0;
}

uint64_t sub_1B6C193CC()
{
  sub_1B6C1E33C(v0, (uint64_t)v4);
  float v1 = *(float *)&v4[5];
  sub_1B6C1E33C(v0, (uint64_t)v5);
  uint64_t result = 18;
  uint64_t v3 = 144;
  switch(v9)
  {
    case 1:
    case 2:
      uint64_t result = 6;
      break;
    case 3:
      goto LABEL_10;
    case 4:
      uint64_t result = 48;
      break;
    case 5:
      uint64_t v3 = 2 * (uint64_t)(float)(v1 * 24.0);
LABEL_10:
      uint64_t result = v3;
      break;
    case 6:
    case 8:
      if (qword_1E9DCC6C8 != -1) {
        swift_once();
      }
      uint64_t result = *((void *)off_1E9DD7220 + 2);
      break;
    case 7:
      uint64_t result = 2 * v6 + 96;
      break;
    case 9:
      uint64_t result = 48 * (v8 + v7);
      break;
    case 10:
      uint64_t result = 4;
      break;
    case 11:
      uint64_t result = 2;
      break;
    case 12:
      return result;
    default:
      if ((unint64_t)(char)v6 >= 3) {
        uint64_t result = 10;
      }
      else {
        uint64_t result = qword_1B6EB47F8[(char)v6];
      }
      break;
  }
  return result;
}

void sub_1B6C19534(unint64_t a1, uint64_t a2, float32x4_t *a3)
{
  uint64_t v290 = *MEMORY[0x1E4F143B8];
  sub_1B633C598(a2, (uint64_t)v274);
  uint64_t v4 = v274[0];
  uint64_t v5 = v274[1];
  uint64_t v6 = v274[2];
  uint64_t v7 = v274[3];
  uint64_t v8 = v274[4];
  uint64_t v9 = v274[5];
  uint64_t v10 = v274[6];
  uint64_t v11 = v274[7];
  sub_1B6C1E33C(v3, (uint64_t)v272);
  float v12 = *((float *)&v273 + 1);
  sub_1B6C1E33C(v3, (uint64_t)&v277);
  switch(v283)
  {
    case 1:
      float32x4_t v79 = (float32x4_t)v277;
      float32x4_t v80 = v278;
      float32x4_t v81 = v279;
      unsigned int v82 = a1;
      if ((a1 & 0x100000000) != 0)
      {
        float32x4_t v252 = v278;
        float32x4_t v261 = (float32x4_t)v277;
        float32x4_t v244 = v279;
        unsigned int v82 = sub_1B67ADC80(255, 0, 0);
        float32x4_t v81 = v244;
        float32x4_t v80 = v252;
        float32x4_t v79 = v261;
      }
      v284.i8[0] = 0;
      sub_1B6C1AB5C(v82, a2, a3, v79, v80, v81);
      return;
    case 2:
      float v32 = *(float *)v277.i32;
      __int8 v33 = v277.i8[4];
      sub_1B633C598(a2, (uint64_t)v275);
      if (v276)
      {
        uint64_t v5 = 0;
        uint64_t v7 = 0;
        uint64_t v8 = 0;
        uint64_t v10 = 0;
        float32x4_t v36 = (float32x4_t)xmmword_1B6E4F370;
        float32x4_t v37 = (float32x4_t)xmmword_1B6E4F2E0;
        float32x4_t v38 = (float32x4_t)xmmword_1B6E4F320;
        float32x4_t v39 = (float32x4_t)xmmword_1B6E4F300;
        uint64_t v6 = 0x3F80000000000000;
        uint64_t v4 = 1065353216;
        uint64_t v9 = 1065353216;
        uint64_t v11 = 0x3F80000000000000;
      }
      else
      {
        v36.i64[0] = v10;
        v36.i64[1] = v11;
        v39.i64[0] = v4;
        v39.i64[1] = v5;
        v38.i64[0] = v6;
        v38.i64[1] = v7;
        v37.i64[0] = v8;
        v37.i64[1] = v9;
      }
      v268.i64[0] = v4;
      v268.i64[1] = v5;
      v269.i64[0] = v6;
      v269.i64[1] = v7;
      v270.i64[0] = v8;
      v270.i64[1] = v9;
      v271.i64[0] = v10;
      v271.i64[1] = v11;
      if (v33)
      {
        v162.i64[0] = v10;
        v162.i64[1] = v11;
        v163.i64[0] = v4;
        v163.i64[1] = v5;
        v164 = (uint64_t *)a3;
      }
      else
      {
        v164 = (uint64_t *)a3;
        float32x4_t v175 = a3[12];
        float32x4_t v176 = a3[13];
        float32x4_t v177 = a3[14];
        float32x4_t v178 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a3[15], v177, v36, 2), v176, *(float32x2_t *)v36.f32, 1), v175, v36.f32[0]);
        float32x4_t v179 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v178, 3);
        v34.i64[0] = 0;
        int8x16_t v180 = (int8x16_t)vceqq_f32(v179, v34);
        v35.i32[0] = 841731191;
        float32x4_t v181 = vaddq_f32(v36, (float32x4_t)xmmword_1B6E4F300);
        float32x4_t v182 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a3[15], v177, v181, 2), v176, *(float32x2_t *)v181.f32, 1), v175, v181.f32[0]);
        float32x4_t v183 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v182, 3);
        int8x16_t v184 = (int8x16_t)vceqq_f32(v183, v34);
        float v185 = (float)(v32 + v32)
             / (float)(fabsf(vsubq_f32(vdivq_f32(v178, (float32x4_t)vorrq_s8(vbicq_s8((int8x16_t)v179, v180), vbicq_s8(v35, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8(v180), 0)))), vdivq_f32(v182, (float32x4_t)vorrq_s8(vbicq_s8((int8x16_t)v183, v184), vbicq_s8(v35, (int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8(v184), 0))))).f32[0])* 1024.0);
        if (v185 <= 0.000001) {
          return;
        }
        float32x4_t v186 = vmulq_f32(v39, v39);
        float32x4_t v187 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v186, 2), vaddq_f32(v186, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v186.f32, 1)));
        v187.f32[0] = sqrtf(v187.f32[0]);
        float32x4_t v188 = vmulq_f32(v38, v38);
        float32x4_t v189 = vmulq_f32(v37, v37);
        v187.i32[1] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v188, 2), vaddq_f32(v188, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v188.f32, 1))).f32[0]);
        v187.i32[2] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v189, 2), vaddq_f32(v189, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v189.f32, 1))).f32[0]);
        float32x4_t v190 = vabsq_f32(v187);
        v190.f32[0] = v185 / fmaxf(fmaxf(v190.f32[0], v190.f32[2]), v190.f32[1]);
        float32x4_t v191 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v190.f32, 0);
        v191.i32[3] = 0;
        sub_1B688ABDC(v191);
        float32x4_t v162 = v271;
        float32x4_t v163 = v268;
      }
      v192.i64[0] = 0xBF000000BF000000;
      v192.i64[1] = 0xBF000000BF000000;
      float32x4_t v266 = v162;
      float32x4_t v193 = vaddq_f32(v162, vmulq_f32(v163, v192));
      v193.i32[3] = 1.0;
      unsigned int v194 = a1;
      unsigned int v195 = a1;
      if ((a1 & 0x100000000) != 0)
      {
        float32x4_t v248 = v193;
        float32x4_t v257 = v163;
        unsigned int v195 = sub_1B67ADC80(255, 0, 0);
        float32x4_t v193 = v248;
        float32x4_t v163 = v257;
      }
      v163.i32[3] = 0;
      float32x4_t v286 = 0u;
      float32x4_t v287 = 0u;
      float32x4_t v284 = 0u;
      float32x4_t v285 = 0u;
      LOBYTE(v288) = 1;
      sub_1B6C1A764(0, v195, (uint64_t)&v284, v164, v193, v163);
      float32x4_t v196 = v269;
      v197.i64[0] = 0xBF000000BF000000;
      v197.i64[1] = 0xBF000000BF000000;
      float32x4_t v198 = vaddq_f32(v266, vmulq_f32(v269, v197));
      v198.i32[3] = 1.0;
      unsigned int v199 = a1;
      if ((a1 & 0x100000000) != 0)
      {
        float32x4_t v249 = v198;
        unsigned int v199 = sub_1B67ADC80(255, 0, 0);
        float32x4_t v198 = v249;
        float32x4_t v196 = v269;
      }
      v196.i32[3] = 0;
      sub_1B6C1A764(0, v199, (uint64_t)&v284, v164, v198, v196);
      float32x4_t v200 = v270;
      v201.i64[0] = 0xBF000000BF000000;
      v201.i64[1] = 0xBF000000BF000000;
      float32x4_t v173 = vaddq_f32(v266, vmulq_f32(v270, v201));
      v173.i32[3] = 1.0;
      if ((a1 & 0x100000000) != 0)
      {
        float32x4_t v258 = v173;
        unsigned int v202 = sub_1B67ADC80(255, 0, 0);
        float32x4_t v173 = v258;
        float32x4_t v200 = v270;
        unsigned int v194 = v202;
      }
      v200.i32[3] = 0;
      uint64_t v172 = v194;
      float32x4_t v170 = v200;
      char v174 = 0;
LABEL_103:
      sub_1B6C1A764(v174, v172, (uint64_t)&v284, v164, v173, v170);
      return;
    case 3:
      int8x16_t v262 = v277;
      int v83 = a1;
      if ((a1 & 0x100000000) != 0)
      {
        int v84 = sub_1B67ADC80(255, 0, 0);
        float v85 = *(float *)&v262.i32[3];
        uint64_t v86 = a2;
        long long v87 = (uint64_t *)a3;
        sub_1B6C1AD78(v84, 24, a2, a3, v262, *(float *)&v262.i32[3], (__n128)xmmword_1B6E4F300, v88);
        int v89 = sub_1B67ADC80(0, 255, 0);
        sub_1B6C1AD78(v89, 24, a2, a3, v262, *(float *)&v262.i32[3], (__n128)xmmword_1B6E4F320, v90);
        int v83 = sub_1B67ADC80(0, 0, 255);
      }
      else
      {
        float v85 = *(float *)&v277.i32[3];
        uint64_t v86 = a2;
        long long v87 = (uint64_t *)a3;
        sub_1B6C1AD78(a1, 24, a2, a3, v277, *(float *)&v277.i32[3], (__n128)xmmword_1B6E4F300, v14);
        sub_1B6C1AD78(a1, 24, a2, a3, v262, *(float *)&v262.i32[3], (__n128)xmmword_1B6E4F320, v203);
      }
      sub_1B6C1AD78(v83, 24, v86, v87, v262, v85, (__n128)xmmword_1B6E4F2E0, v91);
      return;
    case 4:
      float32x4_t v40 = (float32x4_t)v277;
      float32x4_t v41 = v278;
      uint64_t v42 = v279.i64[0];
      int v43 = a1;
      if ((a1 & 0x100000000) != 0)
      {
        float32x4_t v250 = v278;
        float32x4_t v260 = (float32x4_t)v277;
        int v43 = sub_1B67ADC80(255, 255, 255);
        float32x4_t v41 = v250;
        float32x4_t v40 = v260;
      }
      sub_1B6C1B1C0(v43, 24, a2, a3, v40, v41, *(float *)&v42, *((float *)&v42 + 1));
      return;
    case 5:
      int8x16_t v92 = v277;
      uint64_t v93 = v278.i64[0];
      int v94 = a1;
      if ((a1 & 0x100000000) != 0)
      {
        float32x4_t v263 = (float32x4_t)v277;
        int v94 = sub_1B67ADC80(255, 255, 255);
        int8x16_t v92 = (int8x16_t)v263;
      }
      v13.i32[0] = v93;
      sub_1B6C1AF94(v94, (uint64_t)(float)(v12 * 24.0), a2, a3, v92, v13, *((float *)&v93 + 1), (__n128)xmmword_1B6E4F2E0, v15, *(double *)v16.i64, v17, v18);
      return;
    case 6:
      float32x4_t v245 = (float32x4_t)v277;
      float32x4_t v253 = v278;
      v95 = a3;
      unint64_t v97 = a3[2].u64[0];
      uint64_t v96 = a3[2].i64[1];
      uint64_t v98 = a3[4].i64[1] + 16 * v97;
      uint64_t v99 = a3[6].i64[1];
      uint64_t v100 = a3[8].i64[1];
      sub_1B633C598(a2, (uint64_t)&v284);
      if (v288)
      {
        float32x4_t v101 = vsubq_f32(v245, v253);
        int32x4_t v102 = (int32x4_t)vaddq_f32(v253, v253);
        float32x4_t v103 = (float32x4_t)vdupq_laneq_s32(v102, 3);
        v103.i32[0] = v102.i32[0];
        float32x4_t v104 = vaddq_f32(v101, v103);
        *(float32x4_t *)uint64_t v98 = v101;
        *(float32x4_t *)(v98 + 16) = v104;
        float32x4_t v105 = vaddq_f32(v101, (float32x4_t)vtrn2q_s32(vuzp2q_s32(v102, v102), v102));
        float32x4_t v106 = vaddq_f32(v103, v105);
        *(float32x4_t *)(v98 + 32) = v105;
        *(float32x4_t *)(v98 + 48) = v106;
        v107.i64[1] = v102.i64[1];
        v107.i32[0] = v102.i32[3];
        v107.i32[1] = v102.i32[3];
        *(float32x4_t *)(v98 + 64) = vaddq_f32(v101, v107);
        *(float32x4_t *)(v98 + 80) = vaddq_f32(v107, v104);
        *(float32x4_t *)(v98 + 96) = vaddq_f32(v107, v105);
        *(float32x4_t *)(v98 + 112) = vaddq_f32(v107, v106);
      }
      else
      {
        sub_1B684C1C8((float32x4_t *)v98, v284, v285, v286, v287, v245, v253);
      }
      unsigned int v204 = a1;
      v205 = (int32x4_t *)(v99 + 4 * v97);
      if ((a1 & 0x100000000) != 0) {
        unsigned int v204 = sub_1B67ADC80(255, 255, 255);
      }
      int32x4_t v206 = vdupq_n_s32(v204);
      int32x4_t *v205 = v206;
      v205[1] = v206;
      if ((v97 & 0x8000000000000000) != 0 || v97 >= 0x10000) {
        goto LABEL_130;
      }
      if (qword_1E9DCC6C8 != -1) {
        swift_once();
      }
      v207 = (char *)off_1E9DD7220;
      unint64_t v208 = *((void *)off_1E9DD7220 + 2);
      if (!v208) {
        goto LABEL_119;
      }
      if (v208 < 0x10 || (unint64_t)(v100 + 2 * v96 - (void)off_1E9DD7220 - 32) < 0x20)
      {
        uint64_t v209 = 0;
LABEL_117:
        unint64_t v210 = v208 - v209;
        uint64_t v211 = 2 * v209;
        v212 = (_WORD *)(v100 + 2 * v209 + 2 * v96);
        v213 = &v207[v211 + 32];
        do
        {
          __int16 v214 = *(_WORD *)v213;
          v213 += 2;
          *v212++ = v214 + v97;
          --v210;
        }
        while (v210);
        goto LABEL_119;
      }
      uint64_t v209 = v208 & 0x7FFFFFFFFFFFFFF0;
      int16x8_t v220 = vdupq_n_s16(v97);
      v221 = (int16x8_t *)((char *)off_1E9DD7220 + 48);
      v222 = (int16x8_t *)(2 * v96 + v100 + 16);
      uint64_t v223 = v208 & 0x7FFFFFFFFFFFFFF0;
      do
      {
        int16x8_t v224 = vaddq_s16(*v221, v220);
        v222[-1] = vaddq_s16(v221[-1], v220);
        int16x8_t *v222 = v224;
        v221 += 2;
        v222 += 2;
        v223 -= 16;
      }
      while (v223);
      if (v208 != v209) {
        goto LABEL_117;
      }
LABEL_119:
      a3[2].i64[0] = v97 + 8;
      uint64_t v154 = sub_1B6C193CC() + v96;
      goto LABEL_120;
    case 7:
      int8x16_t v108 = v277;
      float32x4_t v109 = vsubq_f32(v278, (float32x4_t)v277);
      int8x16_t v264 = (int8x16_t)v278;
      int8x16_t v110 = (int8x16_t)vabdq_f32(v278, (float32x4_t)v277);
      BOOL v111 = *(float *)v110.i32 > 0.00000011921;
      v110.i32[0] = vextq_s8(v110, v110, 8uLL).u32[0];
      int32x2_t v112 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v110.i8);
      int v113 = !v111;
      __int32 v114 = v113 & v112.i32[0] & v112.i32[1];
      __n128 v115 = 0uLL;
      if (v114 != 1)
      {
        int32x4_t v116 = (int32x4_t)vmulq_f32(v109, v109);
        v116.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v116, 2), vadd_f32(*(float32x2_t *)v116.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v116.i8, 1))).u32[0];
        float32x2_t v117 = vrsqrte_f32((float32x2_t)v116.u32[0]);
        float32x2_t v118 = vmul_f32(v117, vrsqrts_f32((float32x2_t)v116.u32[0], vmul_f32(v117, v117)));
        __n128 v115 = (__n128)vmulq_n_f32(v109, vmul_f32(v118, vrsqrts_f32((float32x2_t)v116.u32[0], vmul_f32(v118, v118))).f32[0]);
      }
      float32x4_t v254 = v109;
      int v119 = a1;
      uint64_t v19 = a3;
      unint64_t v120 = a3[2].u64[0];
      uint64_t v121 = v279.i64[0];
      int v122 = a1;
      if ((a1 & 0x100000000) != 0)
      {
        __n128 v240 = v115;
        float32x4_t v246 = (float32x4_t)v277;
        int v122 = sub_1B67ADC80(255, 255, 255);
        __n128 v115 = v240;
        int8x16_t v108 = (int8x16_t)v246;
      }
      sub_1B6C1AD78(v122, 24, a2, a3, v108, *(float *)&v108.i32[3], v115, (int8x16_t)v109);
      __n128 v124 = 0uLL;
      if (!v114)
      {
        float32x4_t v123 = v254;
        int32x4_t v125 = (int32x4_t)vmulq_f32(v123, v123);
        v125.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v125, 2), vadd_f32(*(float32x2_t *)v125.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v125.i8, 1))).u32[0];
        float32x2_t v126 = vrsqrte_f32((float32x2_t)v125.u32[0]);
        float32x2_t v127 = vmul_f32(v126, vrsqrts_f32((float32x2_t)v125.u32[0], vmul_f32(v126, v126)));
        __n128 v124 = (__n128)vmulq_n_f32(v254, vmul_f32(v127, vrsqrts_f32((float32x2_t)v125.u32[0], vmul_f32(v127, v127))).f32[0]);
      }
      unint64_t v128 = a3[2].u64[0];
      if ((a1 & 0x100000000) != 0)
      {
        __n128 v255 = v124;
        int v129 = sub_1B67ADC80(255, 255, 255);
        __n128 v124 = v255;
        int v119 = v129;
      }
      sub_1B6C1AD78(v119, 24, a2, a3, v264, *(float *)&v264.i32[3], v124, (int8x16_t)v123);
      if (v121 < 1) {
        return;
      }
      if ((v120 & 0x8000000000000000) != 0) {
        goto LABEL_130;
      }
      if (v120 >> 16) {
        goto LABEL_130;
      }
      uint64_t v130 = a3[8].i64[1];
      uint64_t v131 = a3[2].i64[1];
      *(_WORD *)(v130 + 2 * v131) = v120;
      if ((v128 & 0x8000000000000000) != 0 || v128 >> 16) {
        goto LABEL_130;
      }
      uint64_t v132 = v130 + 2 * v131;
      *(_WORD *)(v132 + 2) = v128;
      uint64_t v133 = v121 - 1;
      if (v121 != 1)
      {
        v134 = (_WORD *)(v132 + 6);
        uint64_t v135 = 1;
        unint64_t v136 = 0x18uLL / v121;
        do
        {
          uint64_t v137 = v135 * v136 + v120;
          if (v137 < 0
            || (unint64_t)v137 >> 16
            || (*(v134 - 1) = v137, uint64_t v138 = v135 * v136 + v128, v138 < 0)
            || (unint64_t)v138 >> 16)
          {
LABEL_130:
            sub_1B6E32BD8();
            __break(1u);
            JUMPOUT(0x1B6C1A730);
          }
          _WORD *v134 = v138;
          v134 += 2;
          ++v135;
          --v133;
        }
        while (v133);
      }
      uint64_t v139 = v131 + 2 * v121;
      goto LABEL_82;
    case 8:
      float32x4_t v286 = v279;
      float32x4_t v287 = v280;
      long long v288 = v281;
      long long v289 = v282;
      float32x4_t v284 = (float32x4_t)v277;
      float32x4_t v285 = v278;
      v95 = a3;
      uint64_t v140 = a3[6].i64[1];
      unint64_t v142 = a3[2].u64[0];
      uint64_t v141 = a3[2].i64[1];
      uint64_t v143 = a3[8].i64[1];
      sub_1B684C420((void *)(a3[4].i64[1] + 16 * v142));
      unsigned int v144 = a1;
      if ((a1 & 0x100000000) != 0) {
        unsigned int v144 = sub_1B67ADC80(255, 255, 255);
      }
      int32x4_t v145 = vdupq_n_s32(v144);
      v146 = (int32x4_t *)(v140 + 4 * v142);
      int32x4_t *v146 = v145;
      v146[1] = v145;
      if ((v142 & 0x8000000000000000) != 0 || v142 >= 0x10000) {
        goto LABEL_130;
      }
      if (qword_1E9DCC6C8 != -1) {
        swift_once();
      }
      v147 = (char *)off_1E9DD7220;
      unint64_t v148 = *((void *)off_1E9DD7220 + 2);
      if (!v148) {
        goto LABEL_75;
      }
      if (v148 < 0x10 || (unint64_t)(v143 + 2 * v141 - (void)off_1E9DD7220 - 32) < 0x20)
      {
        uint64_t v149 = 0;
LABEL_73:
        v150 = (_WORD *)(v143 + 2 * (v149 + v141));
        unint64_t v151 = v148 - v149;
        v152 = &v147[2 * v149 + 32];
        do
        {
          __int16 v153 = *(_WORD *)v152;
          v152 += 2;
          *v150++ = v153 + v142;
          --v151;
        }
        while (v151);
        goto LABEL_75;
      }
      uint64_t v149 = v148 & 0x7FFFFFFFFFFFFFF0;
      int16x8_t v215 = vdupq_n_s16(v142);
      v216 = (int16x8_t *)((char *)off_1E9DD7220 + 48);
      v217 = (int16x8_t *)(2 * v141 + v143 + 16);
      uint64_t v218 = v148 & 0x7FFFFFFFFFFFFFF0;
      do
      {
        int16x8_t v219 = vaddq_s16(*v216, v215);
        v217[-1] = vaddq_s16(v216[-1], v215);
        int16x8_t *v217 = v219;
        v216 += 2;
        v217 += 2;
        v218 -= 16;
      }
      while (v218);
      if (v148 != v149) {
        goto LABEL_73;
      }
LABEL_75:
      a3[2].i64[0] = v142 + 8;
      uint64_t v154 = sub_1B6C193CC() + v141;
LABEL_120:
      v95[2].i64[1] = v154;
      return;
    case 9:
      float32x4_t v239 = (float32x4_t)v277;
      uint64_t v44 = v279.i64[0];
      float v228 = v279.f32[1];
      uint64_t v45 = v279.i64[1];
      uint64_t v46 = v280.i64[0];
      int32x4_t v49 = (int32x4_t)vmulq_f32(v278, v278);
      v49.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v49, 2), vadd_f32(*(float32x2_t *)v49.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v49.i8, 1))).u32[0];
      float32x2_t v47 = vrsqrte_f32((float32x2_t)v49.u32[0]);
      float32x2_t v48 = vmul_f32(v47, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(v47, v47)));
      *(float32x2_t *)v49.i8 = vmul_f32(v48, vrsqrts_f32((float32x2_t)v49.u32[0], vmul_f32(v48, v48)));
      int8x16_t v50 = (int8x16_t)vmulq_n_f32(v278, *(float *)v49.i32);
      __n128 v227 = (__n128)v50;
      if (v279.i64[1] >= 1)
      {
        float v51 = 2.0 / (float)v279.i64[1];
        v50.i32[0] = v50.i32[2];
        v49.i32[0] = 1.0;
        v52.i64[0] = 0x8000000080000000;
        v52.i64[1] = 0x8000000080000000;
        v52.i32[0] = vbslq_s8(v52, (int8x16_t)v49, v50).i32[0];
        *(float *)v14.i32 = v227.n128_f32[1] / (float)(fabsf(v227.n128_f32[2]) + 1.0);
        float v53 = vmuls_lane_f32(*(float *)v14.i32, (float32x2_t)v227.n128_u64[0], 1);
        *(float *)v14.i32 = -(float)(v227.n128_f32[0] * *(float *)v14.i32);
        v54.f32[0] = v227.n128_f32[2] + (float)(*(float *)v52.i32 * v53);
        v54.f32[1] = *(float *)v52.i32 * *(float *)v14.i32;
        *(float32x2_t *)v16.f32 = vmul_n_f32(v54, v279.f32[1]);
        v16.f32[2] = -(float)(v227.n128_f32[0] * v279.f32[1]);
        *(float *)v14.i32 = v279.f32[1] * *(float *)v14.i32;
        *(float *)&v14.i32[1] = v279.f32[1] * (float)(1.0 - v53);
        *(float *)&v14.i32[2] = v279.f32[1] * vmuls_lane_f32(-*(float *)v52.i32, (float32x2_t)v227.n128_u64[0], 1);
        float32x4_t v237 = (float32x4_t)v14;
        float32x4_t v238 = v16;
        float v55 = 0.0;
        do
        {
          __float2 v56 = __sincospif_stret(v55);
          float32x4_t v57 = vmulq_n_f32(v238, v56.__cosval);
          v57.i32[3] = v236;
          float32x4_t v58 = vaddq_f32(vmulq_n_f32(v237, v56.__sinval), vaddq_f32(v239, v57));
          v58.i32[3] = v242.i32[3];
          float32x4_t v242 = v58;
          __float2 v59 = __sincospif_stret(v55 + 0.01);
          float32x4_t v60 = vmulq_n_f32(v238, v59.__cosval);
          v60.i32[3] = v233;
          int8x16_t v61 = (int8x16_t)v242;
          float32x4_t v62 = vaddq_f32(vmulq_n_f32(v237, v59.__sinval), vaddq_f32(v239, v60));
          v62.i32[3] = v234;
          int8x16_t v63 = (int8x16_t)vabdq_f32(v62, v242);
          if (*(float *)v63.i32 > 0.00000011921
            || (v63.i32[0] = vextq_s8(v63, v63, 8uLL).u32[0],
                *(int32x2_t *)v63.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v63.i8),
                (v63.i8[4] & 1) == 0)
            || (__n128 v64 = 0uLL, (v63.i8[0] & 1) == 0))
          {
            float32x4_t v65 = vsubq_f32(v62, v242);
            int32x4_t v66 = (int32x4_t)vmulq_f32(v65, v65);
            v66.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v66, 2), vadd_f32(*(float32x2_t *)v66.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v66.i8, 1))).u32[0];
            float32x2_t v67 = vrsqrte_f32((float32x2_t)v66.u32[0]);
            float32x2_t v68 = vmul_f32(v67, vrsqrts_f32((float32x2_t)v66.u32[0], vmul_f32(v67, v67)));
            *(float32x2_t *)v60.f32 = vmul_f32(v68, v68);
            __n128 v64 = (__n128)vmulq_n_f32(v65, vmul_f32(v68, vrsqrts_f32((float32x2_t)v66.u32[0], *(float32x2_t *)v60.f32)).f32[0]);
            v64.n128_u32[3] = v226;
          }
          int v69 = a1;
          if ((a1 & 0x100000000) != 0)
          {
            __n128 v225 = v64;
            int v69 = sub_1B67ADC80(255, 255, 255);
            __n128 v64 = v225;
            int8x16_t v61 = (int8x16_t)v242;
          }
          __int32 v267 = v232;
          __int32 v259 = v235;
          sub_1B6C1AD78(v69, 24, a2, a3, v61, *(float *)&v44, v64, (int8x16_t)v60);
          float v55 = v51 + v55;
          --v45;
        }
        while (v45);
      }
      if (v46 >= 1)
      {
        float v72 = 2.0 / (float)v46;
        float v73 = 0.0;
        do
        {
          __float2 v77 = __sincospif_stret(v73);
          float sinval = v77.__sinval;
          int v78 = a1;
          if ((a1 & 0x100000000) != 0)
          {
            int v78 = sub_1B67ADC80(255, 255, 255);
            float sinval = v77.__sinval;
          }
          float32x4_t v74 = vmulq_n_f32(vmulq_n_f32((float32x4_t)v227, sinval), *(float *)&v44);
          int8x16_t v75 = (int8x16_t)vaddq_f32(v239, v74);
          v74.i32[3] = v259;
          v75.i32[3] = v267;
          sub_1B6C1AD78(v78, 24, a2, a3, v75, v228 + (float)(*(float *)&v44 * v77.__cosval), v227, (int8x16_t)v74);
          float v73 = v72 + v73;
          --v46;
        }
        while (v46);
      }
      return;
    case 10:
      uint64_t v19 = a3;
      unint64_t v155 = a3[2].u64[0];
      uint64_t v21 = a3[2].i64[1];
      v156 = (float32x4_t *)(a3[4].i64[1] + 16 * v155);
      v157 = (int32x4_t *)(a3[6].i64[1] + 4 * v155);
      uint64_t v158 = a3[8].i64[1];
      float32x4_t v159 = vaddq_f32(vaddq_f32(a3[9], vmulq_n_f32(a3[10], *(float *)v277.i32)), vmulq_lane_f32(a3[11], *(float32x2_t *)v277.i8, 1));
      float32x4_t *v156 = vaddq_f32(v159, (float32x4_t)xmmword_1B6EB4080);
      v156[1] = vaddq_f32(v159, (float32x4_t)xmmword_1B6EB4090);
      v156[2] = vaddq_f32(v159, (float32x4_t)xmmword_1B6EB40A0);
      v156[3] = vaddq_f32(v159, (float32x4_t)xmmword_1B6EB40B0);
      unsigned int v160 = a1;
      if ((a1 & 0x100000000) != 0) {
        unsigned int v160 = sub_1B67ADC80(255, 255, 255);
      }
      int32x4_t *v157 = vdupq_n_s32(v160);
      if ((v155 & 0x8000000000000000) != 0 || v155 >= 0x10000) {
        goto LABEL_130;
      }
      v161 = (_WORD *)(v158 + 2 * v21);
      _WORD *v161 = v155;
      v161[1] = v155 + 1;
      v161[2] = v155 + 2;
      v161[3] = v155 + 3;
      unint64_t v31 = v155 + 4;
      goto LABEL_81;
    case 11:
      uint64_t v19 = a3;
      unint64_t v20 = a3[2].u64[0];
      uint64_t v21 = a3[2].i64[1];
      uint64_t v22 = a3[4].i64[1] + 16 * v20;
      uint64_t v23 = (_DWORD *)(a3[6].i64[1] + 4 * v20);
      uint64_t v24 = a3[8].i64[1];
      float32x4_t v25 = a3[9];
      float32x4_t v26 = a3[10];
      float32x4_t v27 = a3[11];
      float32x4_t v28 = vaddq_f32(vaddq_f32(v25, vmulq_n_f32(v26, *(float *)&v277.i32[2])), vmulq_lane_f32(v27, (float32x2_t)v277.u64[1], 1));
      *(float32x4_t *)uint64_t v22 = vaddq_f32(vaddq_f32(v25, vmulq_n_f32(v26, *(float *)v277.i32)), vmulq_lane_f32(v27, *(float32x2_t *)v277.i8, 1));
      *(float32x4_t *)(v22 + 16) = v28;
      int v29 = a1;
      if ((a1 & 0x100000000) != 0) {
        int v29 = sub_1B67ADC80(255, 255, 255);
      }
      *uint64_t v23 = v29;
      v23[1] = v29;
      if ((v20 & 0x8000000000000000) != 0 || v20 >= 0x10000) {
        goto LABEL_130;
      }
      id v30 = (_WORD *)(v24 + 2 * v21);
      *id v30 = v20;
      v30[1] = v20 + 1;
      unint64_t v31 = v20 + 2;
LABEL_81:
      v19[2].i64[0] = v31;
      uint64_t v139 = sub_1B6C193CC() + v21;
LABEL_82:
      v19[2].i64[1] = v139;
      return;
    case 12:
      sub_1B633C598(a2, (uint64_t)v275);
      if (v276)
      {
        float32x4_t v70 = (float32x4_t)xmmword_1B6E4F370;
        long long v251 = xmmword_1B6E4F2E0;
        long long v243 = xmmword_1B6E4F320;
        float32x4_t v71 = (float32x4_t)xmmword_1B6E4F300;
      }
      else
      {
        v71.i64[0] = v4;
        v71.i32[2] = v5;
        *(void *)&long long v165 = v6;
        *((void *)&v165 + 1) = v7;
        long long v243 = v165;
        *(void *)&long long v165 = v8;
        *((void *)&v165 + 1) = v9;
        long long v251 = v165;
        v70.i64[0] = v10;
        v70.i32[2] = v11;
      }
      v70.i32[3] = 1.0;
      v71.i32[3] = 0;
      unsigned int v166 = a1;
      v164 = (uint64_t *)a3;
      unsigned int v167 = a1;
      float32x4_t v265 = v70;
      if ((a1 & 0x100000000) != 0)
      {
        float32x4_t v241 = v71;
        unsigned int v167 = sub_1B67ADC80(255, 0, 0);
        float32x4_t v71 = v241;
        float32x4_t v70 = v265;
      }
      float32x4_t v286 = 0u;
      float32x4_t v287 = 0u;
      float32x4_t v284 = 0u;
      float32x4_t v285 = 0u;
      LOBYTE(v288) = 1;
      sub_1B6C1A764(2, v167, (uint64_t)&v284, a3, v70, v71);
      float32x4_t v168 = (float32x4_t)v243;
      v168.i32[3] = 0;
      unsigned int v169 = a1;
      if ((a1 & 0x100000000) != 0)
      {
        float32x4_t v247 = v168;
        unsigned int v169 = sub_1B67ADC80(0, 255, 0);
        float32x4_t v168 = v247;
      }
      sub_1B6C1A764(2, v169, (uint64_t)&v284, a3, v265, v168);
      float32x4_t v170 = (float32x4_t)v251;
      v170.i32[3] = 0;
      if ((a1 & 0x100000000) != 0)
      {
        float32x4_t v256 = v170;
        unsigned int v171 = sub_1B67ADC80(0, 0, 255);
        float32x4_t v170 = v256;
        unsigned int v166 = v171;
      }
      uint64_t v172 = v166;
      float32x4_t v173 = v265;
      char v174 = 2;
      goto LABEL_103;
    default:
      sub_1B6C1A764(v279.i8[0], a1 | ((HIDWORD(a1) & 1) << 32), a2, a3, (float32x4_t)v277, v278);
      return;
  }
}

void sub_1B6C1A764(char a1, uint64_t a2, uint64_t a3, void *a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v9 = a4[9];
  uint64_t v10 = a4[13];
  uint64_t v11 = a4[17];
  unint64_t v13 = a4[4];
  uint64_t v12 = a4[5];
  sub_1B633C598(a3, (uint64_t)v61);
  if (v62)
  {
    float32x4_t v14 = a6;
    float32x4_t v15 = a5;
  }
  else
  {
    *(double *)v16.i64 = sub_1B684BA34(a5, *(double *)a6.i64, v61[0], v61[1], v61[2], v61[3]);
    float32x4_t v15 = v16;
  }
  float32x4_t v60 = v15;
  float32x4_t v17 = vmulq_f32(v14, v14);
  float32x4_t v18 = v14;
  float32x4_t v19 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v17.f32, 1);
  v17.f32[0] = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v17, 2), vaddq_f32(v17, v19)).f32[0]);
  v19.i64[0] = 0;
  v20.i64[0] = 0;
  v20.i32[3] = 0;
  *(float *)&v20.i32[2] = v17.f32[0] * 0.2;
  float32x4_t v21 = (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vceqq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v18, 2), v19), 0), v20, (int8x16_t)COERCE_UNSIGNED_INT(v17.f32[0] * 0.2));
  uint64_t v22 = (float32x4_t *)(v9 + 16 * v13);
  int32x4_t v23 = (int32x4_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v21, (int32x4_t)v21), (int8x16_t)v21, 0xCuLL), vnegq_f32(v18)), v21, (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v18, (int32x4_t)v18), (int8x16_t)v18, 0xCuLL));
  float32x4_t v56 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(v23, v23), (int8x16_t)v23, 0xCuLL);
  float32x4_t v58 = v18;
  *(float32x2_t *)v24.f32 = sub_1B684BA0C(0.1, v15, v18);
  float32x4_t v55 = v24;
  *(float32x2_t *)v25.f32 = sub_1B684BA0C(0.9, v60, v58);
  switch(a1)
  {
    case 1:
      char v30 = 0;
      float32x4_t v47 = v60;
      float32x4_t v48 = vaddq_f32(v60, v58);
      float v37 = 1.0;
      v48.i32[3] = 1.0;
      v47.i32[3] = 1.0;
      *uint64_t v22 = v48;
      v22[1] = v47;
      float32x4_t v49 = vaddq_f32(v55, v56);
      v49.i32[3] = 1.0;
      v22[2] = v49;
      float32x4_t v41 = vsubq_f32(v55, v56);
      goto LABEL_13;
    case 2:
      char v30 = 0;
      float v37 = 1.0;
      float32x4_t v38 = v60;
      float32x4_t v39 = vaddq_f32(v60, v58);
      v38.i32[3] = 1.0;
      v39.i32[3] = 1.0;
      *uint64_t v22 = v38;
      v22[1] = v39;
      float32x4_t v40 = vaddq_f32(v25, v56);
      v40.i32[3] = 1.0;
      v22[2] = v40;
      float32x4_t v41 = vsubq_f32(v25, v56);
LABEL_13:
      v41.f32[3] = v37;
      char v26 = 1;
      uint64_t v31 = 6;
      uint64_t v29 = 4;
      v22[3] = v41;
      if ((a2 & 0x100000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_17;
    case 3:
      char v30 = 0;
      char v26 = 0;
      float32x4_t v42 = v60;
      float32x4_t v43 = vaddq_f32(v60, v58);
      v42.i32[3] = 1.0;
      v43.i32[3] = 1.0;
      *uint64_t v22 = v42;
      v22[1] = v43;
      float32x4_t v44 = vaddq_f32(v25, v56);
      v44.i32[3] = 1.0;
      float32x4_t v45 = vsubq_f32(v25, v56);
      v45.i32[3] = 1.0;
      v22[2] = v44;
      v22[3] = v45;
      float32x4_t v46 = vaddq_f32(v55, v56);
      v46.i32[3] = 1.0;
      v22[4] = v46;
      float32x4_t v36 = vsubq_f32(v55, v56);
      v36.i32[3] = 1.0;
      goto LABEL_10;
    case 4:
      *(float32x2_t *)v32.f32 = sub_1B684BA0C(0.5, v60, v58);
      char v30 = 0;
      char v26 = 0;
      float32x4_t v33 = v60;
      float32x4_t v34 = vaddq_f32(v60, v58);
      v33.i32[3] = 1.0;
      v34.i32[3] = 1.0;
      *uint64_t v22 = v33;
      v22[1] = v34;
      float32x4_t v35 = vaddq_f32(v56, v32);
      v35.i32[3] = 1.0;
      float32x4_t v36 = vsubq_f32(v32, v56);
      v36.i32[3] = 1.0;
      v22[2] = v35;
      v22[3] = v36;
      v22[4] = v35;
LABEL_10:
      uint64_t v31 = 10;
      uint64_t v29 = 6;
      v22[5] = v36;
      if ((a2 & 0x100000000) != 0) {
        goto LABEL_17;
      }
      goto LABEL_14;
    default:
      char v26 = 0;
      float32x4_t v27 = v60;
      float32x4_t v28 = vaddq_f32(v60, v58);
      v27.i32[3] = 1.0;
      *uint64_t v22 = v27;
      v28.i32[3] = 1.0;
      uint64_t v29 = 2;
      char v30 = 1;
      uint64_t v31 = 2;
      v22[1] = v28;
      if ((a2 & 0x100000000) != 0) {
        goto LABEL_17;
      }
LABEL_14:
      int8x16_t v50 = (_DWORD *)(v10 + 4 * v13);
      *int8x16_t v50 = a2;
      v50[1] = a2;
      if ((v30 & 1) == 0)
      {
        v50[2] = a2;
        v50[3] = a2;
        if ((v26 & 1) == 0)
        {
          v50[4] = a2;
          v50[5] = a2;
        }
      }
LABEL_17:
      if ((v13 & 0x8000000000000000) != 0 || v13 >= 0x10000)
      {
        sub_1B6E32BD8();
        __break(1u);
        JUMPOUT(0x1B6C1AB48);
      }
      float v51 = (_WORD *)(v11 + 2 * v12);
      if (qword_1E9DCC6D0 != -1) {
        swift_once();
      }
      int8x16_t v52 = (__int16 *)(qword_1E9DD7228 + 32);
      uint64_t v53 = v31;
      do
      {
        __int16 v54 = *v52++;
        *v51++ = v54 + v13;
        --v53;
      }
      while (v53);
      a4[4] = v29 + v13;
      a4[5] = v31 + v12;
      return;
  }
}

uint64_t sub_1B6C1AB5C(uint64_t a1, uint64_t a2, void *a3, float32x4_t a4, float32x4_t a5, float32x4_t a6)
{
  uint64_t v9 = a3[9];
  uint64_t v10 = a3[13];
  uint64_t v11 = a3[17];
  unint64_t v13 = a3[4];
  uint64_t v12 = a3[5];
  sub_1B633C598(a2, (uint64_t)v28);
  float32x4_t v14 = a4;
  if ((v29 & 1) == 0) {
    float32x4_t v14 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v28[3], v28[2], a4, 2), v28[1], *(float32x2_t *)a4.f32, 1), v28[0], a4.f32[0]);
  }
  float32x4_t v15 = (float32x4_t *)(v9 + 16 * v13);
  v14.i32[3] = 1.0;
  *float32x4_t v15 = v14;
  sub_1B633C598(a2, (uint64_t)v26);
  float32x4_t v16 = a5;
  if ((v27 & 1) == 0) {
    float32x4_t v16 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v26[3], v26[2], a5, 2), v26[1], *(float32x2_t *)a5.f32, 1), v26[0], a5.f32[0]);
  }
  v16.i32[3] = 1.0;
  v15[1] = v16;
  uint64_t result = sub_1B633C598(a2, (uint64_t)v24);
  float32x4_t v18 = a6;
  if ((v25 & 1) == 0) {
    float32x4_t v18 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v24[3], v24[2], a6, 2), v24[1], *(float32x2_t *)a6.f32, 1), v24[0], a6.f32[0]);
  }
  float32x4_t v19 = (_DWORD *)(v10 + 4 * v13);
  v18.i32[3] = 1.0;
  v15[2] = v18;
  if ((a1 & 0x100000000) != 0)
  {
    uint64_t result = sub_1B67ADC80(255, 255, 255);
    LODWORD(a1) = result;
  }
  *float32x4_t v19 = a1;
  v19[1] = a1;
  v19[2] = a1;
  if ((v13 & 0x8000000000000000) != 0
    || v13 >> 16
    || (int8x16_t v20 = (_WORD *)(v11 + 2 * v12), *int8x16_t v20 = v13, v13 == 0xFFFF)
    || (v20[1] = v13 + 1, v20[2] = v13 + 1, v13 > 0xFFFD))
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  else
  {
    v20[3] = v13 + 2;
    v20[4] = v13 + 2;
    v20[5] = v13;
    a3[4] = v13 + 3;
    a3[5] = v12 + 6;
  }
  return result;
}

uint64_t sub_1B6C1AD78(int a1, uint64_t a2, uint64_t a3, void *a4, int8x16_t a5, float a6, __n128 a7, int8x16_t a8)
{
  float32x4_t v43 = (float32x4_t)a5;
  uint64_t v53 = *MEMORY[0x1E4F143B8];
  uint64_t v11 = a4[9];
  uint64_t v12 = a4[13];
  a5.i32[0] = a7.n128_i32[2];
  a8.i32[0] = 1.0;
  v13.i64[0] = 0x8000000080000000;
  v13.i64[1] = 0x8000000080000000;
  v13.i32[0] = vbslq_s8(v13, a8, a5).i32[0];
  float v14 = a7.n128_f32[1] / (float)(fabsf(a7.n128_f32[2]) + 1.0);
  float v15 = vmuls_lane_f32(v14, (float32x2_t)a7.n128_u64[0], 1);
  float v16 = -(float)(a7.n128_f32[0] * v14);
  float v17 = a7.n128_f32[2] + (float)(*(float *)v13.i32 * v15);
  float v18 = *(float *)v13.i32 * v16;
  float v19 = 1.0 - v15;
  *(float *)v13.i32 = vmuls_lane_f32(-*(float *)v13.i32, (float32x2_t)a7.n128_u64[0], 1);
  v20.f32[0] = v17 * a6;
  long long v47 = COERCE_UNSIGNED_INT(v17 * a6);
  v20.f32[1] = v18 * a6;
  float32_t v21 = -(float)(a7.n128_f32[0] * a6);
  float32x4_t v22 = (float32x4_t)(unint64_t)v20;
  v22.f32[2] = v21;
  float32x4_t v41 = v22;
  v22.f32[0] = v16 * a6;
  float32x2_t v45 = v20;
  long long v46 = COERCE_UNSIGNED_INT(v16 * a6);
  v22.f32[1] = v19 * a6;
  float32_t v23 = *(float *)v13.i32 * a6;
  float32x4_t v24 = (float32x4_t)v22.u64[0];
  v24.f32[2] = v23;
  float32x2_t v38 = *(float32x2_t *)v22.f32;
  float32x4_t v39 = v24;
  sub_1B633C598(a3, (uint64_t)&v48);
  if (v52)
  {
    float32x4_t v26 = v41;
    float32x4_t v25 = v43;
    float32x4_t v27 = v39;
    uint64_t v28 = a4[4];
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    float32x4_t v26 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v50, v41, 2), v49, v45, 1), v48, *(float *)&v47);
    float32x4_t v27 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v50, v39, 2), v49, v38, 1), v48, *(float *)&v46);
    float32x4_t v25 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v51, v50, v43, 2), v49, *(float32x2_t *)v43.f32, 1), v48, v43.f32[0]);
    uint64_t v28 = a4[4];
    if (!a2) {
      goto LABEL_7;
    }
  }
  char v29 = (_DWORD *)(v12 + 4 * v28);
  char v30 = (float32x4_t *)(v11 + 16 * v28);
  float v31 = 0.0;
  uint64_t v32 = a2;
  float32x4_t v42 = v26;
  float32x4_t v44 = v25;
  float32x4_t v40 = v27;
  do
  {
    __float2 v33 = __sincospif_stret(v31);
    float32x4_t v34 = vaddq_f32(v44, vmulq_n_f32(v42, v33.__cosval));
    v34.i32[3] = HIDWORD(v46);
    float32x4_t v35 = vmulq_n_f32(v40, v33.__sinval);
    v35.i32[3] = HIDWORD(v47);
    float32x4_t v36 = vaddq_f32(v35, v34);
    v36.i32[3] = 1.0;
    *v30++ = v36;
    *v29++ = a1;
    float v31 = (float)(2.0 / (float)a2) + v31;
    --v32;
  }
  while (v32);
LABEL_7:
  uint64_t result = sub_1B6C1B68C(a2, 1);
  a4[4] = v28 + a2;
  return result;
}

uint64_t sub_1B6C1AF94(int a1, uint64_t a2, uint64_t a3, void *a4, int8x16_t a5, int8x16_t a6, float a7, __n128 a8, __n128 a9, double a10, double a11, __n128 a12)
{
  float v16 = *(float *)a6.i32;
  float32x4_t v44 = (float32x4_t)a5;
  uint64_t v54 = *MEMORY[0x1E4F143B8];
  uint64_t v17 = a4[9];
  a5.i32[0] = a8.n128_i32[2];
  a6.i32[0] = 1.0;
  v18.i64[0] = 0x8000000080000000;
  v18.i64[1] = 0x8000000080000000;
  v18.i32[0] = vbslq_s8(v18, a6, a5).i32[0];
  a9.n128_f32[0] = a8.n128_f32[1] / (float)(fabsf(a8.n128_f32[2]) + 1.0);
  float v19 = vmuls_lane_f32(a9.n128_f32[0], (float32x2_t)a8.n128_u64[0], 1);
  a9.n128_f32[0] = -(float)(a8.n128_f32[0] * a9.n128_f32[0]);
  a12.n128_f32[0] = a8.n128_f32[2] + (float)(*(float *)v18.i32 * v19);
  __n128 v47 = a12;
  __n128 v48 = a9;
  a12.n128_f32[1] = *(float *)v18.i32 * a9.n128_f32[0];
  float32x2_t v46 = (float32x2_t)a12.n128_u64[0];
  __n128 v20 = a12;
  v20.n128_f32[2] = -a8.n128_f32[0];
  float32x4_t v42 = (float32x4_t)v20;
  a9.n128_f32[1] = 1.0 - v19;
  uint64_t v21 = a4[13];
  __n128 v22 = a9;
  v22.n128_u32[2] = vmuls_lane_f32(-*(float *)v18.i32, (float32x2_t)a8.n128_u64[0], 1);
  float32x2_t v39 = (float32x2_t)a9.n128_u64[0];
  float32x4_t v40 = (float32x4_t)v22;
  sub_1B633C598(a3, (uint64_t)&v49);
  if (v53)
  {
    float32x4_t v24 = v42;
    float32x4_t v23 = v44;
    float32x4_t v25 = v40;
    uint64_t v26 = a4[4];
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    float32x4_t v24 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v51, v42, 2), v50, v46, 1), v49, v47.n128_f32[0]);
    float32x4_t v25 = vmlaq_n_f32(vmlaq_lane_f32(vmulq_laneq_f32(v51, v40, 2), v50, v39, 1), v49, v48.n128_f32[0]);
    float32x4_t v23 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v52, v51, v44, 2), v50, *(float32x2_t *)v44.f32, 1), v49, v44.f32[0]);
    uint64_t v26 = a4[4];
    if (!a2) {
      goto LABEL_7;
    }
  }
  uint64_t v27 = 0;
  float v28 = (float)(a7 + a7) / (float)a2;
  uint64_t v29 = v21 + 4 * v26;
  uint64_t v30 = v17 + 16 * v26;
  float v31 = 0.0;
  float v32 = v16 / (float)a2;
  float32x4_t v43 = v24;
  float32x4_t v45 = v23;
  float32x4_t v41 = v25;
  do
  {
    __float2 v33 = __sincospif_stret(v31);
    float v34 = v32 * (float)v27;
    float32x4_t v35 = vaddq_f32(v45, vmulq_n_f32(v43, v34 * v33.__cosval));
    v35.i32[3] = v47.n128_i32[3];
    float32x4_t v36 = vmulq_n_f32(v41, v34 * v33.__sinval);
    v36.i32[3] = v48.n128_i32[3];
    float32x4_t v37 = vaddq_f32(v36, v35);
    v37.i32[3] = 1.0;
    *(float32x4_t *)(v30 + 16 * v27) = v37;
    *(_DWORD *)(v29 + 4 * v27) = a1;
    float v31 = v28 + v31;
    ++v27;
  }
  while (a2 != v27);
LABEL_7:
  uint64_t result = sub_1B6C1B68C(a2, 0);
  a4[4] = v26 + a2;
  return result;
}

uint64_t sub_1B6C1B1C0(int a1, uint64_t a2, uint64_t a3, void *a4, float32x4_t a5, float32x4_t a6, float a7, float a8)
{
  uint64_t v46 = *MEMORY[0x1E4F143B8];
  uint64_t v12 = a4[9];
  uint64_t v13 = a4[13];
  sub_1B633C598(a3, (uint64_t)v44);
  if (v45)
  {
    float32x4_t v16 = a5;
    float32x4_t v17 = a6;
    uint64_t v18 = a4[4];
    if (!a2) {
      goto LABEL_7;
    }
  }
  else
  {
    *(double *)v19.i64 = sub_1B684BA34(a5, *(double *)a6.i64, v44[0], v44[1], v44[2], v44[3]);
    float32x4_t v16 = v19;
    uint64_t v18 = a4[4];
    if (!a2) {
      goto LABEL_7;
    }
  }
  v15.i32[0] = 1.0;
  float v20 = a7 * 6.2832;
  int32x4_t v21 = (int32x4_t)vmulq_f32(v17, v17);
  int8x16_t v22 = (int8x16_t)vdupq_laneq_s32(v21, 2);
  v21.i32[0] = vadd_f32(*(float32x2_t *)v22.i8, vadd_f32(*(float32x2_t *)v21.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v21.i8, 1))).u32[0];
  *(float32x2_t *)v22.i8 = vrsqrte_f32((float32x2_t)v21.u32[0]);
  *(float32x2_t *)v22.i8 = vmul_f32(*(float32x2_t *)v22.i8, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8)));
  float32x4_t v23 = vmulq_n_f32(v17, vmul_f32(*(float32x2_t *)v22.i8, vrsqrts_f32((float32x2_t)v21.u32[0], vmul_f32(*(float32x2_t *)v22.i8, *(float32x2_t *)v22.i8))).f32[0]);
  v14.f32[0] = v23.f32[1] / (float)(fabsf(v23.f32[2]) + 1.0);
  float v24 = vmuls_lane_f32(v14.f32[0], *(float32x2_t *)v23.f32, 1);
  v14.f32[0] = -(float)(v23.f32[0] * v14.f32[0]);
  *(float *)v22.i32 = -v23.f32[2];
  v25.i64[0] = 0x8000000080000000;
  v25.i64[1] = 0x8000000080000000;
  int8x16_t v26 = vbslq_s8(v25, v15, v22);
  v14.f32[1] = 1.0 - v24;
  v14.i32[2] = vmuls_lane_f32(*(float *)v26.i32, *(float32x2_t *)v23.f32, 1);
  float v27 = v16.f32[2];
  float32x4_t v35 = vsubq_f32(vaddq_f32(v16, v17), v16);
  float32x4_t v36 = vmulq_n_f32(v14, a8);
  float v28 = (_DWORD *)(v13 + 4 * v18);
  uint64_t v29 = (float32x4_t *)(v12 + 16 * v18);
  v17.i64[0] = 0;
  uint64_t v30 = a2;
  uint64_t v38 = v16.i64[0];
  do
  {
    float32x4_t v43 = v17;
    *(float32x2_t *)v26.i8 = vadd_f32(*(float32x2_t *)v16.f32, vmul_n_f32(*(float32x2_t *)v35.f32, v17.f32[0]));
    *(float *)&v26.i32[2] = v27 + (float)(v35.f32[2] * v17.f32[0]);
    float32x4_t v39 = (float32x4_t)v26;
    float v31 = sinf(v20 * v17.f32[0]);
    v16.i64[0] = v38;
    float32x4_t v32 = vmulq_n_f32(v36, v31);
    v32.i32[3] = v41;
    float32x4_t v33 = vaddq_f32(v39, v32);
    v33.i32[3] = 1.0;
    *v29++ = v33;
    float32x4_t v17 = v43;
    *v28++ = a1;
    v17.f32[0] = (float)(1.0 / (float)(a2 - 1)) + v43.f32[0];
    --v30;
  }
  while (v30);
LABEL_7:
  uint64_t result = sub_1B6C1B68C(a2, 0);
  a4[4] = v18 + a2;
  return result;
}

id sub_1B6C1B3E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)v2;
  if (a2)
  {
    if (*(uint64_t *)(v2 + 32) >= 1)
    {
      uint64_t v4 = *(void *)(v2 + 48);
      if (v4)
      {
        uint64_t v6 = *(void *)(v2 + 56);
        uint64_t v5 = *(void *)(v2 + 64);
        uint64_t ObjectType = swift_getObjectType();
        swift_unknownObjectRetain();
        sub_1B6CC87A0(v4, v6, v5, 0);
        sub_1B6CC87A0(*(void *)(v2 + 80), *(void *)(v2 + 88), *(void *)(v2 + 96), 0);
        sub_1B6CC8638(1, *(void *)(v2 + 40), 0, *(void *)(v2 + 112), *(void *)(v2 + 120), *(void *)(v2 + 128), 1, 0, 0, ObjectType);
        id result = (id)swift_unknownObjectRelease();
      }
    }
  }
  int8x16_t v9 = (int8x16_t)vsubq_s64(*(int64x2_t *)v2, *(int64x2_t *)(v2 + 32));
  *(int8x16_t *)uint64_t v2 = v9;
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  if (v9.i64[0] >= 1)
  {
    v10.i64[0] = 0xFFFFLL;
    v10.i64[1] = 0xFFFFLL;
    int8x16_t v11 = vbslq_s8((int8x16_t)vcgtq_s64(v10, (int64x2_t)v9), v9, (int8x16_t)v10);
    *(int8x16_t *)(v2 + 16) = v11;
    uint64_t v12 = 16 * v11.i64[0];
    swift_retain();
    uint64_t v13 = (void *)sub_1B62F1868(0, v12);
    uint64_t v15 = v14;
    uint64_t v17 = v16;
    swift_unknownObjectRetain();
    swift_release();
    swift_unknownObjectRelease();
    v3[6] = v13;
    v3[7] = v15;
    v3[8] = v17;
    id v18 = objc_msgSend(v13, sel_storageMode);
    float32x4_t v19 = 0;
    if (v18 != (id)2)
    {
      float v20 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v21 = v13;
      float32x4_t v19 = &v20[v15];
    }
    v3[9] = v19;
    uint64_t v22 = 4 * v3[2];
    swift_retain();
    float32x4_t v23 = (void *)sub_1B62F1868(0, v22);
    uint64_t v25 = v24;
    uint64_t v27 = v26;
    swift_unknownObjectRetain();
    swift_release();
    swift_unknownObjectRelease();
    v3[10] = v23;
    v3[11] = v25;
    v3[12] = v27;
    id v28 = objc_msgSend(v23, sel_storageMode);
    uint64_t v29 = 0;
    if (v28 != (id)2)
    {
      uint64_t v30 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v31 = v23;
      uint64_t v29 = &v30[v25];
    }
    v3[13] = v29;
    uint64_t v32 = 2 * v3[3];
    swift_retain();
    float32x4_t v33 = (void *)sub_1B62F1868(0, v32);
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    swift_unknownObjectRetain();
    swift_release();
    swift_unknownObjectRelease();
    v3[14] = v33;
    v3[15] = v35;
    v3[16] = v37;
    id result = objc_msgSend(v33, sel_storageMode);
    uint64_t v38 = 0;
    if (result != (id)2)
    {
      float32x4_t v39 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id result = v33;
      uint64_t v38 = &v39[v35];
    }
    v3[17] = v38;
  }
  return result;
}

uint64_t sub_1B6C1B68C(uint64_t result, char a2)
{
  uint64_t v3 = v2[17];
  unint64_t v5 = v2[4];
  uint64_t v4 = v2[5];
  uint64_t v6 = result - 1;
  if (result == 1)
  {
    uint64_t v8 = v2[5];
LABEL_13:
    if ((a2 & 1) == 0) {
      goto LABEL_35;
    }
LABEL_31:
    unint64_t v26 = v5 + v6;
    if (v26 < 0x10000)
    {
      *(_WORD *)(v3 + 2 * v8) = v26;
      if ((v5 & 0x8000000000000000) == 0 && v5 < 0x10000)
      {
        *(_WORD *)(v3 + 2 * v8 + 2) = v5;
        uint64_t v6 = result;
        goto LABEL_35;
      }
    }
    while (1)
    {
LABEL_36:
      sub_1B6E32BD8();
      __break(1u);
    }
  }
  if ((v5 & 0x8000000000000000) != 0) {
    goto LABEL_36;
  }
  if (v5 >> 16) {
    goto LABEL_36;
  }
  *(_WORD *)(v3 + 2 * v4) = v5;
  if (v5 == 0xFFFF) {
    goto LABEL_36;
  }
  uint64_t v7 = v4 + 1;
  *(_WORD *)(v3 + 2 * (v4 + 1)) = v5 + 1;
  uint64_t v8 = v4 + 2;
  if (result == 2) {
    goto LABEL_13;
  }
  unint64_t v9 = result - 3;
  unint64_t v10 = 0xFFFF - v5;
  if (result - 3 < 0xFFFF - v5) {
    unint64_t v10 = result - 3;
  }
  if (v10 >= 65534 - v5) {
    unint64_t v10 = 65534 - v5;
  }
  unint64_t v11 = v10 + 1;
  if (v10 + 1 > 0x18)
  {
    if (v9 >= 0xFFFF - v5) {
      unint64_t v9 = 0xFFFF - v5;
    }
    if (v9 >= 65534 - v5) {
      unint64_t v13 = 65534 - v5;
    }
    else {
      unint64_t v13 = v9;
    }
    uint64_t v14 = v3 + 2 * v4;
    uint64_t v15 = (__int16 *)(v14 + 4);
    uint64_t v12 = 1;
    if (v14 + 4 + 4 * v13 >= v14 + 4 && v14 + 6 + 4 * v13 >= v14 + 6 && !(v13 >> 62))
    {
      uint64_t v16 = v11 & 7;
      if ((v11 & 7) == 0) {
        uint64_t v16 = 8;
      }
      unint64_t v17 = v11 - v16;
      v8 += 2 * v17;
      v7 += 2 * v17;
      uint64_t v12 = v17 + 1;
      int64x2_t v18 = (int64x2_t)xmmword_1B6EB40C0;
      int64x2_t v19 = (int64x2_t)xmmword_1B6EB40D0;
      int64x2_t v20 = (int64x2_t)xmmword_1B6EAABD0;
      int64x2_t v21 = (int64x2_t)xmmword_1B6E77050;
      int64x2_t v22 = vdupq_n_s64(v5);
      v23.i64[0] = 0x1000100010001;
      v23.i64[1] = 0x1000100010001;
      do
      {
        v27.val[0] = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v21, v22), (int32x4_t)vaddq_s64(v20, v22)), (int16x8_t)vuzp1q_s32((int32x4_t)vaddq_s64(v19, v22), (int32x4_t)vaddq_s64(v18, v22)));
        v27.val[1] = vaddq_s16(v27.val[0], v23);
        vst2q_s16(v15, v27);
        v15 += 16;
        v27.val[0] = (int16x8_t)vdupq_n_s64(8uLL);
        int64x2_t v19 = vaddq_s64(v19, (int64x2_t)v27.val[0]);
        int64x2_t v20 = vaddq_s64(v20, (int64x2_t)v27.val[0]);
        int64x2_t v21 = vaddq_s64(v21, (int64x2_t)v27.val[0]);
        int64x2_t v18 = vaddq_s64(v18, (int64x2_t)v27.val[0]);
        v17 -= 8;
      }
      while (v17);
    }
  }
  else
  {
    uint64_t v12 = 1;
  }
  do
  {
    if (0x10000 - v5 == v12) {
      goto LABEL_36;
    }
    __int16 v24 = v5 + v12;
    *(_WORD *)(v3 + 2 * v8) = v5 + v12;
    if (0xFFFF - v5 == v12) {
      goto LABEL_36;
    }
    ++v12;
    uint64_t v25 = v7 + 2;
    *(_WORD *)(v3 + 4 + 2 * v7) = v24 + 1;
    uint64_t v8 = v7 + 3;
    v7 += 2;
  }
  while (v6 != v12);
  uint64_t v8 = v25 + 1;
  if (a2) {
    goto LABEL_31;
  }
LABEL_35:
  v2[5] = v4 + 2 * v6;
  return result;
}

void *sub_1B6C1B914(uint64_t a1)
{
  swift_retain();
  sub_1B636E62C();
  unsigned __int8 v3 = v2;
  int v4 = v2;
  id result = (void *)swift_release();
  if (v4 == 2) {
    return result;
  }
  uint64_t v7 = *(void *)(*(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                 + 8 * *(void *)thread_worker_index(&thread_worker_index, v6)
                 + 8);
  sub_1B62F7B88(0, (unint64_t *)&qword_1EB980BA0, (unint64_t *)&qword_1EB97EB00, (unint64_t *)&qword_1EB97EAE0);
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = v8;
  unint64_t v10 = &type metadata for DebugInfoA;
  *(_OWORD *)(v8 + 16) = xmmword_1B6E77050;
  if ((v3 & 1) == 0) {
    unint64_t v10 = &type metadata for DebugInfoB;
  }
  *(void *)(v8 + 32) = v10;
  v494.n128_u64[0] = v8 + 32;
  unint64_t v11 = &off_1F0F520A8;
  if ((v3 & 1) == 0) {
    unint64_t v11 = &off_1F0F52198;
  }
  *(void *)(v8 + 40) = v11;
  int v492 = sub_1B67ADC80(0, 255, 0);
  if (qword_1E9DCC520 != -1) {
    swift_once();
  }
  v614[0] = xmmword_1E9E49498;
  v614[1] = unk_1E9E494A8;
  uint64_t v615 = qword_1E9E494B8;
  uint64_t v12 = *(char **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_queryManager);
  uint64_t v472 = a1;
  sub_1B62C9DA8(a1, (uint64_t)v614, 0x200000000, v506);
  sub_1B62D7DE8((uint64_t)v506, (uint64_t)v552, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  uint64_t v478 = v9;
  uint64_t v491 = v7;
  v476 = v12;
  if (!*(void *)&v552[0]) {
    goto LABEL_21;
  }
  long long v559 = v552[0];
  long long v560 = v552[1];
  uint64_t v561 = v553;
  v499.n128_u64[0] = v558;
  if (v558 <= 0)
  {
    sub_1B632F1C4(v506, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
LABEL_21:
    v505 = 0;
    goto LABEL_22;
  }
  unint64_t v13 = v555;
  if (v555)
  {
    uint64_t v14 = v554;
    unint64_t v15 = v557;
    v504.n128_u64[0] = v557;
    uint64_t v16 = *(void *)(v557 + 32);
    v498.n128_u64[0] = v556;
    unsigned __int32 v17 = *(unsigned __int8 *)(v556 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    v496.n128_u64[0] = v557 + 48;
    swift_bridgeObjectRetain();
    sub_1B632F1C4(v506, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F2C8);
    v505 = 0;
    v495.n128_u64[0] = v15 + 64;
    v493.n128_u64[0] = (unint64_t)v610;
    int64x2_t v18 = (unint64_t *)(v14 + 24);
    v497.n128_u32[0] = v17;
    do
    {
      uint64_t v19 = *((unsigned int *)v18 - 6);
      uint64_t v20 = *((unsigned int *)v18 - 5);
      uint64_t v21 = *((unsigned int *)v18 - 4);
      unint64_t v22 = *(v18 - 1);
      unint64_t v23 = *v18;
      unint64_t v24 = v18[1];
      uint64_t v25 = v18[2];
      v503.n128_u64[0] = v13;
      v502.n128_u64[0] = v22;
      v501.n128_u64[0] = v23;
      v500.n128_u64[0] = v24;
      if (v17)
      {
        unint64_t v26 = *(os_unfair_lock_s **)(v25 + 376);
        swift_retain();
        os_unfair_lock_lock(v26);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v25 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v16);
      sub_1B62D7DE8(v496.n128_i64[0], (uint64_t)v608, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
      uint64_t v27 = *(void *)(v504.n128_u64[0] + 32);
      uint64_t v28 = v16;
      uint64_t v29 = *(void *)(*(void *)(*(void *)(*(void *)(v25 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      uint64_t v30 = v27;
      uint64_t v31 = v504.n128_u64[0];
      *(void *)(v504.n128_u64[0] + 48) = ecs_stack_allocator_allocate(v30, 48 * v29, 8);
      *(void *)(v31 + 56) = v29;
      uint64_t v32 = (void *)v495.n128_u64[0];
      *(void *)(v495.n128_u64[0] + 8) = 0;
      v32[2] = 0;
      *uint64_t v32 = 0;
      swift_release();
      v609[0] = v498.n128_u64[0];
      v609[1] = v25;
      v609[2] = v31;
      v609[3] = v21;
      v609[4] = (v20 - v19 + v21);
      v609[5] = v499.n128_u64[0];
      v609[6] = v19;
      v609[7] = v20;
      unint64_t v33 = v493.n128_u64[0];
      *(void *)v493.n128_u64[0] = 0;
      *(void *)(v33 + 8) = 0;
      v610[16] = 1;
      unint64_t v611 = v502.n128_u64[0];
      unint64_t v612 = v501.n128_u64[0];
      unint64_t v613 = v500.n128_u64[0];
      uint64_t v9 = v478;
      swift_bridgeObjectRetain();
      uint64_t v34 = v505;
      sub_1B6DA22FC(v609, v491, v478, v492);
      if (v505) {
        goto LABEL_324;
      }
      swift_bridgeObjectRelease();
      v562[0] = v559;
      v562[1] = v560;
      uint64_t v563 = v561;
      sub_1B6345178((void *)v31, (unsigned __int16 **)v562, (uint64_t)v608);
      v505 = 0;
      sub_1B634507C((char *)v25);
      ecs_stack_allocator_pop_snapshot(v28);
      uint64_t v16 = v28;
      unsigned __int32 v17 = v497.n128_u32[0];
      if (v497.n128_u8[0])
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 376));
      }
      swift_release();
      v18 += 6;
      unint64_t v13 = v503.n128_u64[0] - 1;
    }
    while (v503.n128_u64[0] != 1);
    sub_1B632F1C4(v506, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
    sub_1B632F1C4(v506, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
    swift_bridgeObjectRelease();
    uint64_t v7 = v491;
  }
  else
  {
    sub_1B632F1C4(v506, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
    v505 = 0;
    uint64_t v7 = v491;
  }
LABEL_22:
  uint64_t v35 = v472;
  if (qword_1E9DCC518 != -1)
  {
    swift_once();
    uint64_t v35 = v472;
  }
  v606[0] = xmmword_1E9E49460;
  v606[1] = *(_OWORD *)algn_1E9E49470;
  uint64_t v607 = qword_1E9E49480;
  sub_1B62C9DA8(v35, (uint64_t)v606, 0x200000000, v507);
  sub_1B62D7DE8((uint64_t)v507, (uint64_t)v542, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (*(void *)&v542[0])
  {
    long long v549 = v542[0];
    long long v550 = v542[1];
    uint64_t v551 = v543;
    v499.n128_u64[0] = v548;
    if (v548 <= 0)
    {
      sub_1B632F1C4(v507, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
    }
    else
    {
      unint64_t v36 = v545;
      if (v545)
      {
        uint64_t v37 = v544;
        unint64_t v38 = v547;
        v504.n128_u64[0] = v547;
        uint64_t v39 = *(void *)(v547 + 32);
        v498.n128_u64[0] = v546;
        unsigned __int32 v40 = *(unsigned __int8 *)(v546 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v496.n128_u64[0] = v547 + 48;
        swift_bridgeObjectRetain();
        sub_1B632F1C4(v507, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F2C8);
        v495.n128_u64[0] = v38 + 64;
        v493.n128_u64[0] = (unint64_t)v602;
        __int32 v41 = (unint64_t *)(v37 + 24);
        v497.n128_u32[0] = v40;
        do
        {
          uint64_t v42 = *((unsigned int *)v41 - 6);
          uint64_t v43 = *((unsigned int *)v41 - 5);
          uint64_t v44 = *((unsigned int *)v41 - 4);
          v502.n128_u64[0] = *(v41 - 1);
          v501.n128_u64[0] = *v41;
          uint64_t v25 = v41[2];
          v500.n128_u64[0] = v41[1];
          v503.n128_u64[0] = v36;
          if (v40)
          {
            char v45 = *(os_unfair_lock_s **)(v25 + 376);
            swift_retain();
            os_unfair_lock_lock(v45);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v25 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v39);
          sub_1B62D7DE8(v496.n128_i64[0], (uint64_t)v595, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
          uint64_t v46 = *(void *)(v504.n128_u64[0] + 32);
          uint64_t v28 = v39;
          uint64_t v47 = *(void *)(*(void *)(*(void *)(*(void *)(v25 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          uint64_t v48 = v46;
          uint64_t v31 = v504.n128_u64[0];
          *(void *)(v504.n128_u64[0] + 48) = ecs_stack_allocator_allocate(v48, 48 * v47, 8);
          *(void *)(v31 + 56) = v47;
          float32x4_t v49 = (void *)v495.n128_u64[0];
          *(void *)(v495.n128_u64[0] + 8) = 0;
          v49[2] = 0;
          void *v49 = 0;
          swift_release();
          *(void *)&long long v596 = v498.n128_u64[0];
          *((void *)&v596 + 1) = v25;
          *(void *)&long long v597 = v31;
          *((void *)&v597 + 1) = v44;
          uint64_t v598 = (v43 - v42 + v44);
          unint64_t v599 = v499.n128_u64[0];
          uint64_t v600 = v42;
          uint64_t v601 = v43;
          unint64_t v50 = v493.n128_u64[0];
          *(void *)v493.n128_u64[0] = 0;
          *(void *)(v50 + 8) = 0;
          v602[16] = 1;
          unint64_t v603 = v502.n128_u64[0];
          unint64_t v604 = v501.n128_u64[0];
          unint64_t v605 = v500.n128_u64[0];
          uint64_t v9 = v478;
          swift_bridgeObjectRetain();
          sub_1B6DA2624(&v596, v491, v478, v492);
          if (v505)
          {
            swift_bridgeObjectRelease_n();

            long long v576 = v549;
            long long v577 = v550;
            uint64_t v578 = v551;
            v451 = (unsigned __int16 **)&v576;
            v452 = v595;
            goto LABEL_327;
          }
          swift_bridgeObjectRelease();
          v564[0] = v549;
          v564[1] = v550;
          uint64_t v565 = v551;
          sub_1B6345178((void *)v31, (unsigned __int16 **)v564, (uint64_t)v595);
          v505 = 0;
          sub_1B634507C((char *)v25);
          ecs_stack_allocator_pop_snapshot(v28);
          uint64_t v39 = v28;
          unsigned __int32 v40 = v497.n128_u32[0];
          if (v497.n128_u8[0])
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 376));
          }
          swift_release();
          v41 += 6;
          unint64_t v36 = v503.n128_u64[0] - 1;
        }
        while (v503.n128_u64[0] != 1);
        sub_1B632F1C4(v507, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
        sub_1B632F1C4(v507, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
        swift_bridgeObjectRelease();
        uint64_t v7 = v491;
      }
      else
      {
        sub_1B632F1C4(v507, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
        uint64_t v7 = v491;
      }
    }
  }
  uint64_t v51 = v472;
  if (qword_1E9DCC4F0 != -1)
  {
    swift_once();
    uint64_t v51 = v472;
  }
  v593[0] = xmmword_1E9E493D0;
  v593[1] = unk_1E9E493E0;
  uint64_t v594 = qword_1E9E493F0;
  sub_1B62C9DA8(v51, (uint64_t)v593, 0x200000000, v508);
  sub_1B62D7DE8((uint64_t)v508, (uint64_t)v532, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (*(void *)&v532[0])
  {
    long long v539 = v532[0];
    long long v540 = v532[1];
    uint64_t v541 = v533;
    if (v538 >= 1)
    {
      v484.n128_u64[0] = v535;
      if (v535)
      {
        v483.n128_u64[0] = v534;
        uint64_t v52 = *(void *)(v537 + 32);
        v490.n128_u32[0] = *(unsigned __int8 *)(v536 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v481.n128_u64[0] = v537 + 48;
        v493.n128_u64[0] = v537;
        v480.n128_u64[0] = v537 + 64;
        v477 = v590;
        v475 = v592;
        swift_retain();
        swift_retain();
        swift_retain();
        unint64_t v53 = 0;
        v499.n128_u64[0] = v9 + 32;
        v486.n128_u64[0] = v9 + 64;
        long long v479 = xmmword_1B6E4F370;
        int64x2_t v474 = vdupq_n_s64(0x3F000000uLL);
        v482.n128_u64[0] = v52;
        while (1)
        {
          uint64_t v54 = (unsigned int *)(v483.n128_u64[0] + 48 * v53);
          uint64_t v55 = *v54;
          v503.n128_u64[0] = v54[1];
          float32x4_t v56 = (uint64_t *)*((void *)v54 + 2);
          uint64_t v57 = *((void *)v54 + 3);
          unint64_t v58 = *((void *)v54 + 5);
          v501.n128_u64[0] = *((void *)v54 + 4);
          v489.n128_u64[0] = v53;
          if (v490.n128_u32[0])
          {
            __float2 v59 = *(os_unfair_lock_s **)(v58 + 376);
            swift_retain();
            os_unfair_lock_lock(v59);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v58 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v52);
          sub_1B62D7DE8(v481.n128_i64[0], (uint64_t)v588, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
          uint64_t v60 = v493.n128_u64[0];
          uint64_t v61 = *(void *)(v493.n128_u64[0] + 32);
          uint64_t v62 = *(void *)(*(void *)(*(void *)(*(void *)(v58 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          *(void *)(v60 + 48) = ecs_stack_allocator_allocate(v61, 48 * v62, 8);
          *(void *)(v60 + 56) = v62;
          int8x16_t v63 = (void *)v480.n128_u64[0];
          *(void *)(v480.n128_u64[0] + 8) = 0;
          v63[2] = 0;
          *int8x16_t v63 = 0;
          swift_release();
          uint64_t v64 = v501.n128_u64[0];
          sub_1B62C9024((uint64_t)&type metadata for ParticlePlaneCollider, (uint64_t)&off_1F0F895A0, v56, v57, v501.n128_i64[0], v60);
          v488.n128_u64[0] = v58;
          uint64_t v65 = sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v56, v57, v64, v60);
          v502.n128_u64[0] = v65;
          if (!v56) {
            break;
          }
          if (v64)
          {
            uint64_t v67 = 0;
            v589[0] = v479;
            v589[1] = vdupq_n_s64(0x3F000000uLL);
            float32x2_t v68 = v477;
            _OWORD *v477 = 0u;
            v68[1] = 0u;
            v68[2] = 0u;
            v68[3] = 0u;
            v590[64] = 6;
            unint64_t v69 = *(void *)(v478 + 16);
            v500.n128_u64[0] = 16 * v69 + 64;
            v487.n128_u64[0] = 16 * v69;
            v496.n128_u64[0] = v499.n128_u64[0] + 16 * v69;
            v497.n128_u64[0] = v69 - 1;
            v498.n128_u64[0] = 16 * (v69 - 1);
            v495.n128_u64[0] = v69 & 0x7FFFFFFFFFFFFFFCLL;
            v485.n128_u64[0] = (v69 & 0x7FFFFFFFFFFFFFFCLL) + 4;
            while (1)
            {
              *(double *)&long long v75 = MEMORY[0x1F4188790](v65, v66);
              *(&v454 - 10) = (uint64_t)v589;
              *((_DWORD *)&v454 - 18) = v492;
              *((_OWORD *)&v454 - 4) = v75;
              *((_OWORD *)&v454 - 3) = v76;
              *((_OWORD *)&v454 - 2) = v77;
              long long v453 = v78;
              uint64_t v79 = *(void *)(v7 + 32);
              ecs_stack_allocator_push_snapshot(v79);
              float32x4_t v80 = ecs_stack_allocator_allocate(v79, v500.n128_i64[0], 8);
              float32x4_t v81 = v80;
              *float32x4_t v80 = &type metadata for DebugInfoWireframePrimitive;
              v80[1] = &off_1F0F974E8;
              v80[2] = &type metadata for DebugInfoColor;
              v80[3] = &off_1F0F63878;
              v80[4] = &type metadata for WorldTransform;
              v80[5] = &off_1F0F67720;
              v80[6] = &type metadata for Beamed;
              v80[7] = &off_1F0F9FB50;
              v504.n128_u64[0] = (unint64_t)&v454;
              v503.n128_u64[0] = (unint64_t)(&v454 - 12);
              if (!v69)
              {
                uint64_t v83 = 4;
                goto LABEL_62;
              }
              if (v69 < 0x10) {
                break;
              }
              unint64_t v82 = 0;
              if ((void *)((char *)v80 + v498.n128_u64[0] + 64) < v80 + 8
                || (void *)((char *)v80 + v498.n128_u64[0] + 72) < v80 + 9
                || v497.n128_u64[0] >> 60)
              {
                goto LABEL_57;
              }
              if ((unint64_t)(v80 + 8) < v496.n128_u64[0]
                && v494.n128_u64[0] < (unint64_t)v80 + v487.n128_u64[0] + 64)
              {
                break;
              }
              uint64_t v100 = v80 + 12;
              unint64_t v101 = v495.n128_u64[0];
              int32x4_t v102 = (long long *)v486.n128_u64[0];
              do
              {
                long long v104 = *(v102 - 2);
                long long v103 = *(v102 - 1);
                long long v106 = *v102;
                long long v105 = v102[1];
                v102 += 4;
                *(v100 - 2) = v104;
                *(v100 - 1) = v103;
                *uint64_t v100 = v106;
                v100[1] = v105;
                v100 += 4;
                v101 -= 4;
              }
              while (v101);
              unint64_t v82 = v495.n128_u64[0];
              uint64_t v83 = v485.n128_u64[0];
              if (v69 != v495.n128_u64[0]) {
                goto LABEL_58;
              }
LABEL_62:
              uint64_t v87 = *(void *)(v7 + 16);
              uint64_t v88 = v87 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
              int v89 = *(os_unfair_lock_s **)(v87 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
              swift_retain();
              os_unfair_lock_lock(v89);
              uint64_t v90 = sub_1B69E2E04((uint64_t)v81, v83, MEMORY[0x1E4FBC860]);
              uint64_t v92 = v90;
              uint64_t v93 = v91;
              int v94 = *(void **)(v87 + 72);
              uint64_t v95 = v94[2];
              if (v95)
              {
                uint64_t v96 = v94[4];
                if (*(void *)(v96 + 144) != v90)
                {
                  uint64_t v107 = v95 - 1;
                  if (!v107) {
                    goto LABEL_52;
                  }
                  int8x16_t v108 = v94 + 5;
                  while (1)
                  {
                    uint64_t v96 = *v108;
                    if (*(void *)(*v108 + 144) == v90) {
                      break;
                    }
                    ++v108;
                    if (!--v107) {
                      goto LABEL_52;
                    }
                  }
                }
                uint64_t v97 = *(void *)(v96 + 16);
                if (*(void *)(v97 + 16))
                {
                  unint64_t v98 = sub_1B62C1A30(v91);
                  if (v99)
                  {
                    int v71 = *(_DWORD *)(*(void *)(v97 + 56) + 4 * v98);
                    goto LABEL_53;
                  }
                }
              }
LABEL_52:
              uint64_t v70 = sub_1B6A00108(v81, v83);
              int v71 = sub_1B637C7BC(v92, v93, v70, MEMORY[0x1E4FBC860]);
              swift_release();
LABEL_53:
              uint64_t v72 = *(void *)(*(void *)(v87 + 80) + 8 * v71 + 32);
              float v73 = *(os_unfair_lock_s **)(v88 + 24);
              swift_retain();
              os_unfair_lock_unlock(v73);
              swift_release();
              LOBYTE(v576) = 1;
              uint64_t v7 = v491;
              float32x4_t v74 = v505;
              sub_1B6B2866C(v72, 1, 1, 0x100000000uLL, v491, (uint64_t)sub_1B6C1F994, v503.n128_i64[0]);
              v505 = v74;
              swift_release();
              uint64_t v65 = ecs_stack_allocator_pop_snapshot(*(void *)(v7 + 32));
              if (++v67 == v501.n128_u64[0]) {
                goto LABEL_83;
              }
            }
            unint64_t v82 = 0;
LABEL_57:
            uint64_t v83 = 4;
LABEL_58:
            unint64_t v84 = v69 - v82;
            float v85 = (long long *)(v499.n128_u64[0] + 16 * v82);
            do
            {
              long long v86 = *v85++;
              *(_OWORD *)&v80[2 * v83++] = v86;
              --v84;
            }
            while (v84);
            goto LABEL_62;
          }
LABEL_83:
          v566[0] = v539;
          v566[1] = v540;
          uint64_t v567 = v541;
          float32x4_t v109 = v505;
          sub_1B6345178(v493.n128_u64[0], (unsigned __int16 **)v566, (uint64_t)v588);
          v505 = v109;
          unint64_t v110 = v488.n128_u64[0];
          sub_1B634507C((char *)v488.n128_u64[0]);
          uint64_t v52 = v482.n128_u64[0];
          ecs_stack_allocator_pop_snapshot(v482.n128_i64[0]);
          if (v490.n128_u8[0])
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v110 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v110 + 376));
          }
          swift_release();
          unint64_t v53 = v489.n128_u64[0] + 1;
          if (v489.n128_u64[0] + 1 == v484.n128_u64[0])
          {
            sub_1B632F1C4(v508, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
            goto LABEL_116;
          }
        }
        if (v55 == v503.n128_u32[0]) {
          goto LABEL_83;
        }
        v591[0] = v479;
        v591[1] = v474;
        BOOL v111 = v475;
        _OWORD *v475 = 0u;
        v111[1] = 0u;
        v111[2] = 0u;
        v111[3] = 0u;
        v592[64] = 6;
        unint64_t v112 = *(void *)(v478 + 16);
        v500.n128_u64[0] = 16 * v112 + 64;
        v487.n128_u64[0] = 16 * v112;
        v496.n128_u64[0] = v499.n128_u64[0] + 16 * v112;
        v497.n128_u64[0] = v112 - 1;
        v498.n128_u64[0] = 16 * (v112 - 1);
        v495.n128_u64[0] = v112 & 0x7FFFFFFFFFFFFFFCLL;
        v485.n128_u64[0] = (v112 & 0x7FFFFFFFFFFFFFFCLL) + 4;
        v501.n128_u64[0] = v112;
        while (1)
        {
          *(double *)&long long v118 = MEMORY[0x1F4188790](v65, v66);
          *(&v454 - 10) = (uint64_t)v591;
          *((_DWORD *)&v454 - 18) = v492;
          *((_OWORD *)&v454 - 4) = v118;
          *((_OWORD *)&v454 - 3) = v119;
          *((_OWORD *)&v454 - 2) = v120;
          long long v453 = v121;
          uint64_t v122 = *(void *)(v7 + 32);
          ecs_stack_allocator_push_snapshot(v122);
          float32x4_t v123 = ecs_stack_allocator_allocate(v122, v500.n128_i64[0], 8);
          __n128 v124 = v123;
          *float32x4_t v123 = &type metadata for DebugInfoWireframePrimitive;
          v123[1] = &off_1F0F974E8;
          v123[2] = &type metadata for DebugInfoColor;
          v123[3] = &off_1F0F63878;
          v123[4] = &type metadata for WorldTransform;
          v123[5] = &off_1F0F67720;
          v123[6] = &type metadata for Beamed;
          v123[7] = &off_1F0F9FB50;
          v504.n128_u64[0] = (unint64_t)&v454;
          if (!v112)
          {
            uint64_t v126 = 4;
            goto LABEL_95;
          }
          if (v112 < 0x10) {
            break;
          }
          unint64_t v125 = 0;
          if ((void *)((char *)v123 + v498.n128_u64[0] + 64) < v123 + 8
            || (void *)((char *)v123 + v498.n128_u64[0] + 72) < v123 + 9
            || v497.n128_u64[0] >> 60)
          {
            goto LABEL_90;
          }
          if ((unint64_t)(v123 + 8) < v496.n128_u64[0]
            && v494.n128_u64[0] < (unint64_t)v123 + v487.n128_u64[0] + 64)
          {
            break;
          }
          uint64_t v143 = v123 + 12;
          unint64_t v144 = v495.n128_u64[0];
          int32x4_t v145 = (long long *)v486.n128_u64[0];
          do
          {
            long long v147 = *(v145 - 2);
            long long v146 = *(v145 - 1);
            long long v149 = *v145;
            long long v148 = v145[1];
            v145 += 4;
            *(v143 - 2) = v147;
            *(v143 - 1) = v146;
            *uint64_t v143 = v149;
            v143[1] = v148;
            v143 += 4;
            v144 -= 4;
          }
          while (v144);
          unint64_t v125 = v495.n128_u64[0];
          uint64_t v126 = v485.n128_u64[0];
          if (v112 != v495.n128_u64[0]) {
            goto LABEL_91;
          }
LABEL_95:
          uint64_t v130 = *(void *)(v7 + 16);
          uint64_t v131 = v130 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
          uint64_t v132 = *(os_unfair_lock_s **)(v130 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24);
          swift_retain();
          os_unfair_lock_lock(v132);
          uint64_t v133 = sub_1B69E2E04((uint64_t)v124, v126, MEMORY[0x1E4FBC860]);
          uint64_t v135 = v133;
          uint64_t v136 = v134;
          uint64_t v137 = *(void **)(v130 + 72);
          uint64_t v138 = v137[2];
          if (v138)
          {
            uint64_t v139 = v137[4];
            if (*(void *)(v139 + 144) != v133)
            {
              uint64_t v150 = v138 - 1;
              if (!v150) {
                goto LABEL_85;
              }
              unint64_t v151 = v137 + 5;
              while (1)
              {
                uint64_t v139 = *v151;
                if (*(void *)(*v151 + 144) == v133) {
                  break;
                }
                ++v151;
                if (!--v150) {
                  goto LABEL_85;
                }
              }
            }
            uint64_t v140 = *(void *)(v139 + 16);
            if (*(void *)(v140 + 16))
            {
              unint64_t v141 = sub_1B62C1A30(v134);
              if (v142)
              {
                int v114 = *(_DWORD *)(*(void *)(v140 + 56) + 4 * v141);
                goto LABEL_86;
              }
            }
          }
LABEL_85:
          uint64_t v113 = sub_1B6A00108(v124, v126);
          int v114 = sub_1B637C7BC(v135, v136, v113, MEMORY[0x1E4FBC860]);
          swift_release();
LABEL_86:
          ++v55;
          uint64_t v115 = *(void *)(*(void *)(v130 + 80) + 8 * v114 + 32);
          int32x4_t v116 = *(os_unfair_lock_s **)(v131 + 24);
          swift_retain();
          os_unfair_lock_unlock(v116);
          swift_release();
          LOBYTE(v576) = 1;
          uint64_t v7 = v491;
          float32x2_t v117 = v505;
          sub_1B6B2866C(v115, 1, 1, 0x100000000uLL, v491, (uint64_t)sub_1B6C1F994, (uint64_t)(&v454 - 12));
          v505 = v117;
          swift_release();
          uint64_t v65 = ecs_stack_allocator_pop_snapshot(*(void *)(v7 + 32));
          unint64_t v112 = v501.n128_u64[0];
          if (v55 == v503.n128_u64[0]) {
            goto LABEL_83;
          }
        }
        unint64_t v125 = 0;
LABEL_90:
        uint64_t v126 = 4;
LABEL_91:
        unint64_t v127 = v112 - v125;
        unint64_t v128 = (long long *)(v499.n128_u64[0] + 16 * v125);
        do
        {
          long long v129 = *v128++;
          *(_OWORD *)&v123[2 * v126++] = v129;
          --v127;
        }
        while (v127);
        goto LABEL_95;
      }
    }
LABEL_116:
    sub_1B632F1C4(v508, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  }
  uint64_t v152 = v472;
  if (qword_1E9DCC540 != -1)
  {
    swift_once();
    uint64_t v152 = v472;
  }
  v586[0] = xmmword_1E9E494E0;
  v586[1] = *(_OWORD *)algn_1E9E494F0;
  uint64_t v587 = qword_1E9E49500;
  sub_1B62C9DA8(v152, (uint64_t)v586, 0x200000000, v509);
  sub_1B62D7DE8((uint64_t)v509, (uint64_t)v522, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (*(void *)&v522[0])
  {
    long long v529 = v522[0];
    long long v530 = v522[1];
    uint64_t v531 = v523;
    v499.n128_u64[0] = v528;
    if (v528 > 0 && (unint64_t v153 = v525) != 0)
    {
      uint64_t v154 = v524;
      unint64_t v155 = v527;
      v504.n128_u64[0] = v527;
      uint64_t v156 = *(void *)(v527 + 32);
      v498.n128_u64[0] = v526;
      unsigned __int32 v157 = *(unsigned __int8 *)(v526 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      v496.n128_u64[0] = v527 + 48;
      swift_bridgeObjectRetain();
      sub_1B632F1C4(v509, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F2C8);
      v495.n128_u64[0] = v155 + 64;
      v494.n128_u64[0] = (unint64_t)v582;
      uint64_t v158 = (unint64_t *)(v154 + 24);
      v497.n128_u32[0] = v157;
      do
      {
        uint64_t v159 = *((unsigned int *)v158 - 6);
        uint64_t v160 = *((unsigned int *)v158 - 5);
        uint64_t v161 = *((unsigned int *)v158 - 4);
        unint64_t v162 = *(v158 - 1);
        unint64_t v163 = *v158;
        unint64_t v164 = v158[1];
        uint64_t v25 = v158[2];
        v503.n128_u64[0] = v153;
        v502.n128_u64[0] = v162;
        v501.n128_u64[0] = v163;
        v500.n128_u64[0] = v164;
        if (v157)
        {
          long long v165 = *(os_unfair_lock_s **)(v25 + 376);
          swift_retain();
          os_unfair_lock_lock(v165);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v25 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v156);
        sub_1B62D7DE8(v496.n128_i64[0], (uint64_t)v575, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
        uint64_t v166 = *(void *)(v504.n128_u64[0] + 32);
        uint64_t v28 = v156;
        uint64_t v167 = *(void *)(*(void *)(*(void *)(*(void *)(v25 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        uint64_t v168 = v166;
        uint64_t v31 = v504.n128_u64[0];
        *(void *)(v31 + 48) = ecs_stack_allocator_allocate(v168, 48 * v167, 8);
        *(void *)(v31 + 56) = v167;
        unsigned int v169 = (void *)v495.n128_u64[0];
        *(void *)(v495.n128_u64[0] + 8) = 0;
        v169[2] = 0;
        *unsigned int v169 = 0;
        swift_release();
        *(void *)&long long v576 = v498.n128_u64[0];
        *((void *)&v576 + 1) = v25;
        *(void *)&long long v577 = v31;
        *((void *)&v577 + 1) = v161;
        uint64_t v578 = (v160 - v159 + v161);
        unint64_t v579 = v499.n128_u64[0];
        uint64_t v580 = v159;
        uint64_t v581 = v160;
        unint64_t v170 = v494.n128_u64[0];
        *(void *)v494.n128_u64[0] = 0;
        *(void *)(v170 + 8) = 0;
        v582[16] = 1;
        unint64_t v583 = v502.n128_u64[0];
        unint64_t v584 = v501.n128_u64[0];
        unint64_t v585 = v500.n128_u64[0];
        uint64_t v171 = v478;
        swift_bridgeObjectRetain();
        uint64_t v172 = v505;
        sub_1B6DA27F4(&v576, v491, v171, v492);
        if (v172)
        {
          swift_bridgeObjectRelease_n();

          long long v511 = v529;
          long long v512 = v530;
          uint64_t v513 = v531;
          v451 = (unsigned __int16 **)&v511;
          v452 = v575;
          goto LABEL_327;
        }
        swift_bridgeObjectRelease();
        v568[0] = v529;
        v568[1] = v530;
        uint64_t v569 = v531;
        sub_1B6345178((void *)v31, (unsigned __int16 **)v568, (uint64_t)v575);
        v505 = 0;
        sub_1B634507C((char *)v25);
        ecs_stack_allocator_pop_snapshot(v28);
        uint64_t v156 = v28;
        unsigned __int32 v157 = v497.n128_u32[0];
        if (v497.n128_u8[0])
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 376));
        }
        swift_release();
        v158 += 6;
        unint64_t v153 = v503.n128_u64[0] - 1;
      }
      while (v503.n128_u64[0] != 1);
      sub_1B632F1C4(v509, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
      sub_1B632F1C4(v509, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B632F1C4(v509, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
    }
  }
  uint64_t v173 = v472;
  if (qword_1E9DCC580 != -1)
  {
    swift_once();
    uint64_t v173 = v472;
  }
  v573[0] = xmmword_1E9E495E8;
  v573[1] = unk_1E9E495F8;
  uint64_t v574 = qword_1E9E49608;
  sub_1B62C9DA8(v173, (uint64_t)v573, 0x200000000, v510);
  sub_1B62D7DE8((uint64_t)v510, (uint64_t)&v511, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if ((void)v511)
  {
    long long v519 = v511;
    long long v520 = v512;
    uint64_t v521 = v513;
    if (v518 <= 0)
    {
      swift_setDeallocating();
      swift_deallocClassInstance();
    }
    else
    {
      uint64_t v462 = v515;
      if (v515)
      {
        uint64_t v461 = v514;
        LODWORD(v174) = *(unsigned __int8 *)(v516 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        uint64_t v469 = (uint64_t)v517[4];
        v470 = v517;
        v465 = (void *)(v472 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        v458 = v517 + 8;
        v459 = v517 + 6;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v175 = 0;
        int v460 = (int)v174;
        while (1)
        {
          float32x4_t v176 = (unsigned int *)(v461 + 48 * v175);
          uint64_t v178 = *v176;
          float32x4_t v177 = (_OWORD *)v176[1];
          float32x4_t v179 = (uint64_t *)*((void *)v176 + 2);
          uint64_t v25 = *((void *)v176 + 3);
          int8x16_t v180 = (char *)*((void *)v176 + 5);
          v474.i64[0] = *((void *)v176 + 4);
          v475 = v177;
          v476 = v180;
          uint64_t v468 = v175;
          if (v174)
          {
            float32x4_t v181 = (os_unfair_lock_s *)*((void *)v476 + 47);
            swift_retain();
            int8x16_t v180 = v476;
            os_unfair_lock_lock(v181);
            os_unfair_lock_lock(*((os_unfair_lock_t *)v180 + 43));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v469);
          sub_1B62D7DE8((uint64_t)v459, (uint64_t)v572, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
          uint64_t v28 = (uint64_t)v470;
          uint64_t v182 = (uint64_t)v470[4];
          uint64_t v183 = *(void *)(*(void *)(*(void *)(*((void *)v180 + 5) + 16) + 32) + 16) + 1;
          uint64_t v31 = 48 * v183;
          swift_retain();
          *(void *)(v28 + 48) = ecs_stack_allocator_allocate(v182, 48 * v183, 8);
          *(void *)(v28 + 56) = v183;
          int8x16_t v184 = v458;
          v458[1] = 0;
          v184[2] = 0;
          *int8x16_t v184 = 0;
          swift_release();
          uint64_t v34 = (char *)v474.i64[0];
          uint64_t v471 = sub_1B62C9024((uint64_t)&type metadata for ParticleMeshCollider, (uint64_t)&off_1F0F81550, v179, v25, v474.i64[0], v28);
          uint64_t v185 = sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v179, v25, (uint64_t)v34, v28);
          if (v179)
          {
            uint64_t v186 = v472;
            float32x4_t v187 = v465;
            if (!v34) {
              goto LABEL_312;
            }
            uint64_t v188 = 0;
            uint64_t v189 = v471;
            while (2)
            {
              uint64_t v196 = v189 + 32 * v188;
              int v197 = *(_DWORD *)(v196 + 24);
              int v198 = *(_DWORD *)(v196 + 28);
              BOOL v199 = v197 == -1 && v198 == 0;
              if (v199 || v197 < 0 || v187[1] <= v197) {
                goto LABEL_150;
              }
              uint64_t v200 = *v187 + 12 * v197;
              if (v198 != -1 && *(_DWORD *)(v200 + 8) != v198) {
                goto LABEL_150;
              }
              uint64_t v202 = *(void *)(*(void *)(v186 + 136) + 8 * *(int *)(*v187 + 12 * v197) + 32);
              uint64_t v203 = *(void *)(v202 + 48);
              uint64_t v204 = *(void *)(v203 + 16);
              if (!v204) {
                goto LABEL_150;
              }
              uint64_t v205 = *(__int16 *)(v200 + 4);
              int32x4_t v206 = (void *)(v203 + 56);
              while ((ValueMetadata *)*(v206 - 3) != &type metadata for MeshModel)
              {
                v206 += 5;
                if (!--v204) {
                  goto LABEL_150;
                }
              }
              uint64_t v207 = *(void *)(*(void *)(v202 + 128) + *v206 + 16 * v205);
              if (!v207) {
                goto LABEL_150;
              }
              v473 = (__n128 *)(v185 + (v188 << 6));
              uint64_t v455 = v188;
              uint64_t v456 = v185;
              uint64_t v208 = v207;
              swift_retain();
              uint64_t v457 = v208;
              uint64_t v209 = sub_1B6A565A8(0);
              if (!v209) {
                goto LABEL_328;
              }
              uint64_t v28 = v209;
              uint64_t v212 = v210;
              uint64_t v213 = v211;
              if (v210 == 30)
              {
                uint64_t v214 = *(void *)(v457 + 40);
                uint64_t v215 = sub_1B6355ED4(v214);
                if (v215)
                {
                  uint64_t v25 = v215;
                  uint64_t v216 = v214 + 32;
                  swift_bridgeObjectRetain();
                  v217 = 0;
                  v466 = (char *)v214;
                  v463 = (char *)(v214 + 32);
                  uint64_t v464 = v25;
                  while (2)
                  {
                    uint64_t v218 = (void *)(v216 + ((void)v217 << 7));
                    int16x8_t v219 = (_OWORD *)v218[4];
                    if (*v218 != 3 || v219 == 0) {
                      goto LABEL_173;
                    }
                    uint64_t v34 = (char *)v218[5];
                    uint64_t v221 = v218[9];
                    uint64_t v223 = v218 + 10;
                    uint64_t v222 = v218[10];
                    uint64_t v31 = v223[1];
                    v475 = v219;
                    v477 = (_OWORD *)v31;
                    if (v222 == 4)
                    {
                      swift_unknownObjectRetain_n();
                      swift_bridgeObjectRetain();
                      if (objc_msgSend(v219, sel_storageMode) == (id)2) {
                        goto LABEL_321;
                      }
                      id v224 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                      __n128 v225 = v219;
                      id v226 = v224;
                      id v227 = v225;
                      if (v221 >= 1)
                      {
                        v467 = v217;
                        uint64_t v228 = 0;
                        v229 = &v34[(void)v226];
                        uint64_t v230 = v478;
                        uint64_t v231 = v491;
                        int v232 = v492;
                        unsigned __int32 v233 = v504.n128_u32[3];
                        unsigned __int32 v234 = v500.n128_u32[3];
                        unsigned __int32 v235 = v495.n128_u32[3];
                        uint64_t v31 = (uint64_t)v473;
                        do
                        {
                          if (__OFADD__(v228, 3)) {
                            uint64_t v236 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            uint64_t v236 = v228 + 3;
                          }
                          float32x4_t v237 = &v229[4 * v228];
                          uint64_t v238 = *(unsigned int *)v237;
                          uint64_t v239 = *((unsigned int *)v237 + 1);
                          uint64_t v240 = *((unsigned int *)v237 + 2);
                          float32x4_t v241 = (char *)(v28 + v213 * v238);
                          v242.n128_u64[0] = *(void *)v241;
                          v242.n128_u32[2] = *((_DWORD *)v241 + 2);
                          v242.n128_u32[3] = v233;
                          __n128 v504 = v242;
                          long long v243 = (char *)(v28 + v213 * v239);
                          v244.n128_u64[0] = *(void *)v243;
                          v244.n128_u32[2] = *((_DWORD *)v243 + 2);
                          v244.n128_u32[3] = v234;
                          __n128 v245 = v244;
                          __n128 v500 = v244;
                          float32x4_t v246 = (char *)(v28 + v213 * v240);
                          v244.n128_u64[0] = *(void *)v246;
                          v244.n128_u32[2] = *((_DWORD *)v246 + 2);
                          v244.n128_u32[3] = v235;
                          __n128 v495 = v244;
                          sub_1B6C1E2A8(v231, v230, (__n128 *)v31, v232, v242, v245, v244);
                          unsigned __int32 v235 = v495.n128_u32[3];
                          unsigned __int32 v234 = v500.n128_u32[3];
                          unsigned __int32 v233 = v504.n128_u32[3];
                          uint64_t v228 = v236;
                        }
                        while (v236 < v221);
                        goto LABEL_195;
                      }
                    }
                    else
                    {
                      if (v222 != 2) {
                        goto LABEL_322;
                      }
                      swift_unknownObjectRetain_n();
                      swift_bridgeObjectRetain();
                      if (objc_msgSend(v219, sel_storageMode) == (id)2) {
                        goto LABEL_321;
                      }
                      id v247 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                      float32x4_t v248 = v219;
                      id v249 = v247;
                      id v250 = v248;
                      if (v221 >= 1)
                      {
                        v467 = v217;
                        uint64_t v251 = 0;
                        float32x4_t v252 = &v34[(void)v249];
                        uint64_t v253 = v478;
                        uint64_t v254 = v491;
                        int v255 = v492;
                        unsigned __int32 v256 = v502.n128_u32[3];
                        unsigned __int32 v257 = v498.n128_u32[3];
                        unsigned __int32 v258 = v493.n128_u32[3];
                        uint64_t v31 = (uint64_t)v473;
                        do
                        {
                          if (__OFADD__(v251, 3)) {
                            uint64_t v259 = 0x7FFFFFFFFFFFFFFFLL;
                          }
                          else {
                            uint64_t v259 = v251 + 3;
                          }
                          float32x4_t v260 = &v252[2 * v251];
                          uint64_t v261 = *(unsigned __int16 *)v260;
                          uint64_t v262 = *((unsigned __int16 *)v260 + 1);
                          uint64_t v263 = *((unsigned __int16 *)v260 + 2);
                          int8x16_t v264 = (char *)(v28 + v213 * v261);
                          v265.n128_u64[0] = *(void *)v264;
                          v265.n128_u32[2] = *((_DWORD *)v264 + 2);
                          v265.n128_u32[3] = v256;
                          __n128 v502 = v265;
                          float32x4_t v266 = (char *)(v28 + v213 * v262);
                          v267.n128_u64[0] = *(void *)v266;
                          v267.n128_u32[2] = *((_DWORD *)v266 + 2);
                          v267.n128_u32[3] = v257;
                          __n128 v268 = v267;
                          __n128 v498 = v267;
                          float32x4_t v269 = (char *)(v28 + v213 * v263);
                          v267.n128_u64[0] = *(void *)v269;
                          v267.n128_u32[2] = *((_DWORD *)v269 + 2);
                          v267.n128_u32[3] = v258;
                          __n128 v493 = v267;
                          sub_1B6C1E2A8(v254, v253, (__n128 *)v31, v255, v265, v268, v267);
                          unsigned __int32 v258 = v493.n128_u32[3];
                          unsigned __int32 v257 = v498.n128_u32[3];
                          unsigned __int32 v256 = v502.n128_u32[3];
                          uint64_t v251 = v259;
                        }
                        while (v259 < v221);
LABEL_195:
                        v217 = v467;
                        uint64_t v216 = (uint64_t)v463;
                        uint64_t v25 = v464;
                      }
                    }
                    swift_bridgeObjectRelease();
                    swift_unknownObjectRelease_n();
LABEL_173:
                    v217 = (uint16x4_t *)((char *)v217 + 1);
                    if (v217 == (uint16x4_t *)v25)
                    {
                      swift_release();
                      swift_bridgeObjectRelease();
                      uint64_t v186 = v472;
                      goto LABEL_149;
                    }
                    continue;
                  }
                }
LABEL_228:
                swift_release();
                uint64_t v186 = v472;
LABEL_149:
                float32x4_t v187 = v465;
                uint64_t v189 = v471;
                uint64_t v188 = v455;
                uint64_t v185 = v456;
                uint64_t v34 = (char *)v474.i64[0];
LABEL_150:
                if ((char *)++v188 == v34) {
                  goto LABEL_312;
                }
                continue;
              }
              break;
            }
            uint64_t v270 = v457;
            uint64_t v271 = swift_slowAlloc();
            uint64_t v275 = v271;
            uint64_t v276 = *(void *)(v270 + 48);
            if (v276)
            {
              int8x16_t v277 = (_DWORD *)(v271 + 8);
              do
              {
                *(double *)v272.i64 = sub_1B6A8B6FC((uint16x4_t *)v28, v212, v272, v273, v274);
                *((void *)v277 - 1) = v272.i64[0];
                *int8x16_t v277 = v272.i32[2];
                v277 += 3;
                v28 += v213;
                --v276;
              }
              while (v276);
            }
            uint64_t v278 = *(void *)(v457 + 40);
            uint64_t v279 = sub_1B6355ED4(v278);
            if (!v279)
            {
LABEL_227:
              MEMORY[0x1BA9B84C0](v275, -1, -1);
              goto LABEL_228;
            }
            uint64_t v31 = v279;
            uint64_t v280 = v278 + 32;
            v463 = (char *)v278;
            swift_bridgeObjectRetain();
            uint64_t v25 = 0;
            uint64_t v281 = v491;
            v466 = (char *)v31;
            uint64_t v464 = v278 + 32;
            while (2)
            {
              long long v282 = (void *)(v280 + (v25 << 7));
              uint64_t v28 = v282[4];
              if (*v282 == 3 && v28 != 0)
              {
                uint64_t v34 = (char *)v282[5];
                uint64_t v284 = v282[9];
                float32x4_t v286 = v282 + 10;
                uint64_t v285 = v282[10];
                v477 = (_OWORD *)v286[1];
                if (v285 == 4)
                {
                  swift_unknownObjectRetain_n();
                  swift_bridgeObjectRetain();
                  if (objc_msgSend((id)v28, sel_storageMode) == (id)2) {
                    goto LABEL_321;
                  }
                  id v287 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                  long long v288 = (uint16x4_t *)(id)v28;
                  if (v284 >= 1)
                  {
                    v467 = (uint16x4_t *)v28;
                    v475 = (_OWORD *)v25;
                    uint64_t v289 = 0;
                    uint64_t v290 = &v34[(void)v287];
                    uint64_t v291 = v478;
                    int v292 = v492;
                    unsigned __int32 v293 = v501.n128_u32[3];
                    unsigned __int32 v294 = v497.n128_u32[3];
                    unsigned __int32 v295 = v494.n128_u32[3];
                    v296 = v473;
                    do
                    {
                      if (__OFADD__(v289, 3)) {
                        uint64_t v297 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        uint64_t v297 = v289 + 3;
                      }
                      v298 = &v290[4 * v289];
                      unsigned int v299 = *(_DWORD *)v298;
                      unsigned int v300 = *((_DWORD *)v298 + 1);
                      LODWORD(v298) = *((_DWORD *)v298 + 2);
                      uint64_t v301 = v275 + 12 * v299;
                      v302.n128_u64[0] = *(void *)v301;
                      v302.n128_u32[2] = *(_DWORD *)(v301 + 8);
                      v302.n128_u32[3] = v293;
                      __n128 v303 = v302;
                      __n128 v501 = v302;
                      uint64_t v304 = v275 + 12 * v300;
                      v302.n128_u64[0] = *(void *)v304;
                      v302.n128_u32[2] = *(_DWORD *)(v304 + 8);
                      v302.n128_u32[3] = v294;
                      __n128 v497 = v302;
                      uint64_t v305 = v275 + 12 * v298;
                      v306.n128_u64[0] = *(void *)v305;
                      v306.n128_u32[2] = *(_DWORD *)(v305 + 8);
                      v306.n128_u32[3] = v295;
                      __n128 v494 = v306;
                      sub_1B6C1E2A8(v281, v291, v296, v292, v303, v302, v306);
                      unsigned __int32 v295 = v494.n128_u32[3];
                      unsigned __int32 v294 = v497.n128_u32[3];
                      unsigned __int32 v293 = v501.n128_u32[3];
                      uint64_t v289 = v297;
                    }
                    while (v297 < v284);
                    goto LABEL_201;
                  }
                }
                else
                {
                  if (v285 != 2) {
                    goto LABEL_322;
                  }
                  swift_unknownObjectRetain_n();
                  swift_bridgeObjectRetain();
                  if (objc_msgSend((id)v28, sel_storageMode) == (id)2) {
                    goto LABEL_321;
                  }
                  id v307 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                  v308 = (uint16x4_t *)(id)v28;
                  if (v284 >= 1)
                  {
                    v467 = (uint16x4_t *)v28;
                    v475 = (_OWORD *)v25;
                    uint64_t v309 = 0;
                    v310 = &v34[(void)v307];
                    uint64_t v311 = v478;
                    int v312 = v492;
                    unsigned __int32 v313 = v503.n128_u32[3];
                    unsigned __int32 v314 = v499.n128_u32[3];
                    unsigned __int32 v315 = v496.n128_u32[3];
                    v316 = v473;
                    do
                    {
                      if (__OFADD__(v309, 3)) {
                        uint64_t v317 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        uint64_t v317 = v309 + 3;
                      }
                      v318 = &v310[2 * v309];
                      unsigned int v319 = *(unsigned __int16 *)v318;
                      unsigned int v320 = *((unsigned __int16 *)v318 + 1);
                      LODWORD(v318) = *((unsigned __int16 *)v318 + 2);
                      uint64_t v321 = v275 + 12 * v319;
                      v322.n128_u64[0] = *(void *)v321;
                      v322.n128_u32[2] = *(_DWORD *)(v321 + 8);
                      v322.n128_u32[3] = v313;
                      __n128 v323 = v322;
                      __n128 v503 = v322;
                      uint64_t v324 = v275 + 12 * v320;
                      v322.n128_u64[0] = *(void *)v324;
                      v322.n128_u32[2] = *(_DWORD *)(v324 + 8);
                      v322.n128_u32[3] = v314;
                      __n128 v499 = v322;
                      uint64_t v325 = v275 + 12 * v318;
                      v326.n128_u64[0] = *(void *)v325;
                      v326.n128_u32[2] = *(_DWORD *)(v325 + 8);
                      v326.n128_u32[3] = v315;
                      __n128 v496 = v326;
                      sub_1B6C1E2A8(v281, v311, v316, v312, v323, v322, v326);
                      unsigned __int32 v315 = v496.n128_u32[3];
                      unsigned __int32 v314 = v499.n128_u32[3];
                      unsigned __int32 v313 = v503.n128_u32[3];
                      uint64_t v309 = v317;
                    }
                    while (v317 < v284);
LABEL_201:
                    uint64_t v31 = (uint64_t)v466;
                    uint64_t v28 = (uint64_t)v467;
                    uint64_t v280 = v464;
                    uint64_t v25 = (uint64_t)v475;
                  }
                }
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease_n();
              }
              if (++v25 == v31)
              {
                swift_bridgeObjectRelease();
                goto LABEL_227;
              }
              continue;
            }
          }
          uint64_t v190 = v178;
          float32x4_t v191 = v475;
          uint64_t v192 = v472;
          float32x4_t v193 = v465;
          if (v178 == v475)
          {
            unsigned int v194 = v505;
            goto LABEL_313;
          }
          uint64_t v195 = v471;
          while (2)
          {
            uint64_t v327 = v195 + 32 * v190;
            int v328 = *(_DWORD *)(v327 + 24);
            int v329 = *(_DWORD *)(v327 + 28);
            BOOL v330 = v328 == -1 && v329 == 0;
            if (v330 || v328 < 0 || v193[1] <= v328) {
              goto LABEL_232;
            }
            uint64_t v331 = *v193 + 12 * v328;
            if (v329 != -1 && *(_DWORD *)(v331 + 8) != v329) {
              goto LABEL_232;
            }
            uint64_t v333 = *(void *)(*(void *)(v192 + 136) + 8 * *(int *)(*v193 + 12 * v328) + 32);
            uint64_t v334 = *(void *)(v333 + 48);
            uint64_t v335 = *(void *)(v334 + 16);
            if (!v335) {
              goto LABEL_232;
            }
            uint64_t v336 = *(__int16 *)(v331 + 4);
            v337 = (void *)(v334 + 56);
            while ((ValueMetadata *)*(v337 - 3) != &type metadata for MeshModel)
            {
              v337 += 5;
              if (!--v335) {
                goto LABEL_232;
              }
            }
            uint64_t v338 = *(void *)(*(void *)(v333 + 128) + *v337 + 16 * v336);
            if (!v338) {
              goto LABEL_232;
            }
            v473 = (__n128 *)(v185 + (v190 << 6));
            uint64_t v455 = v190;
            uint64_t v456 = v185;
            uint64_t v339 = v338;
            swift_retain();
            uint64_t v457 = v339;
            uint64_t v340 = sub_1B6A565A8(0);
            if (!v340) {
              goto LABEL_328;
            }
            uint64_t v28 = v340;
            uint64_t v343 = v341;
            uint64_t v344 = v342;
            if (v341 == 30)
            {
              uint64_t v34 = *(char **)(v457 + 40);
              uint64_t v345 = sub_1B6355ED4((uint64_t)v34);
              if (!v345)
              {
                swift_release();
                uint64_t v192 = v472;
                goto LABEL_231;
              }
              uint64_t v346 = v345;
              v347 = v34 + 32;
              swift_bridgeObjectRetain();
              v348 = 0;
              v466 = v34;
              v463 = v34 + 32;
              uint64_t v464 = v346;
              while (2)
              {
                v349 = &v347[128 * (void)v348];
                uint64_t v31 = *((void *)v349 + 4);
                if (*(void *)v349 == 3 && v31 != 0)
                {
                  uint64_t v34 = (char *)*((void *)v349 + 5);
                  uint64_t v25 = *((void *)v349 + 9);
                  v353 = v349 + 80;
                  uint64_t v351 = *((void *)v349 + 10);
                  v352 = (_OWORD *)v353[1];
                  v474.i64[0] = v31;
                  v477 = v352;
                  if (v351 == 4)
                  {
                    swift_unknownObjectRetain_n();
                    swift_bridgeObjectRetain();
                    if (objc_msgSend((id)v31, sel_storageMode) == (id)2) {
                      goto LABEL_321;
                    }
                    id v354 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                    v355 = (void *)v31;
                    uint64_t v31 = (uint64_t)v354;
                    id v356 = v355;
                    if (v25 >= 1)
                    {
                      v467 = v348;
                      uint64_t v357 = 0;
                      v358 = &v34[v31];
                      uint64_t v359 = v478;
                      uint64_t v360 = v491;
                      int v361 = v492;
                      unsigned __int32 v362 = v489.n128_u32[3];
                      unsigned __int32 v363 = v487.n128_u32[3];
                      unsigned __int32 v364 = v483.n128_u32[3];
                      v365 = v473;
                      do
                      {
                        if (__OFADD__(v357, 3)) {
                          uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
                        }
                        else {
                          uint64_t v31 = v357 + 3;
                        }
                        v366 = &v358[4 * v357];
                        uint64_t v367 = *(unsigned int *)v366;
                        uint64_t v368 = *((unsigned int *)v366 + 1);
                        uint64_t v369 = *((unsigned int *)v366 + 2);
                        v370 = (char *)(v28 + v344 * v367);
                        v371.n128_u64[0] = *(void *)v370;
                        v371.n128_u32[2] = *((_DWORD *)v370 + 2);
                        v371.n128_u32[3] = v362;
                        __n128 v372 = v371;
                        __n128 v489 = v371;
                        v373 = (char *)(v28 + v344 * v368);
                        v371.n128_u64[0] = *(void *)v373;
                        v371.n128_u32[2] = *((_DWORD *)v373 + 2);
                        v371.n128_u32[3] = v363;
                        __n128 v487 = v371;
                        v374 = (char *)(v28 + v344 * v369);
                        v375.n128_u64[0] = *(void *)v374;
                        v375.n128_u32[2] = *((_DWORD *)v374 + 2);
                        v375.n128_u32[3] = v364;
                        __n128 v483 = v375;
                        sub_1B6C1E2A8(v360, v359, v365, v361, v372, v371, v375);
                        unsigned __int32 v364 = v483.n128_u32[3];
                        unsigned __int32 v363 = v487.n128_u32[3];
                        unsigned __int32 v362 = v489.n128_u32[3];
                        uint64_t v357 = v31;
                      }
                      while (v31 < v25);
                      goto LABEL_278;
                    }
LABEL_254:
                    uint64_t v34 = v466;
                  }
                  else
                  {
                    if (v351 != 2) {
                      goto LABEL_322;
                    }
                    swift_unknownObjectRetain_n();
                    swift_bridgeObjectRetain();
                    if (objc_msgSend((id)v31, sel_storageMode) == (id)2) {
                      goto LABEL_321;
                    }
                    id v376 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                    v377 = (void *)v31;
                    uint64_t v31 = (uint64_t)v376;
                    id v378 = v377;
                    if (v25 < 1) {
                      goto LABEL_254;
                    }
                    v467 = v348;
                    uint64_t v379 = 0;
                    v380 = &v34[v31];
                    uint64_t v381 = v478;
                    uint64_t v382 = v491;
                    int v383 = v492;
                    unsigned __int32 v384 = v490.n128_u32[3];
                    unsigned __int32 v385 = v488.n128_u32[3];
                    unsigned __int32 v386 = v485.n128_u32[3];
                    v387 = v473;
                    do
                    {
                      if (__OFADD__(v379, 3)) {
                        uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        uint64_t v31 = v379 + 3;
                      }
                      v388 = &v380[2 * v379];
                      uint64_t v389 = *(unsigned __int16 *)v388;
                      uint64_t v390 = *((unsigned __int16 *)v388 + 1);
                      uint64_t v391 = *((unsigned __int16 *)v388 + 2);
                      v392 = (char *)(v28 + v344 * v389);
                      v393.n128_u64[0] = *(void *)v392;
                      v393.n128_u32[2] = *((_DWORD *)v392 + 2);
                      v393.n128_u32[3] = v384;
                      __n128 v394 = v393;
                      __n128 v490 = v393;
                      v395 = (char *)(v28 + v344 * v390);
                      v393.n128_u64[0] = *(void *)v395;
                      v393.n128_u32[2] = *((_DWORD *)v395 + 2);
                      v393.n128_u32[3] = v385;
                      __n128 v488 = v393;
                      v396 = (char *)(v28 + v344 * v391);
                      v397.n128_u64[0] = *(void *)v396;
                      v397.n128_u32[2] = *((_DWORD *)v396 + 2);
                      v397.n128_u32[3] = v386;
                      __n128 v485 = v397;
                      sub_1B6C1E2A8(v382, v381, v387, v383, v394, v393, v397);
                      unsigned __int32 v386 = v485.n128_u32[3];
                      unsigned __int32 v385 = v488.n128_u32[3];
                      unsigned __int32 v384 = v490.n128_u32[3];
                      uint64_t v379 = v31;
                    }
                    while (v31 < v25);
LABEL_278:
                    uint64_t v34 = v466;
                    v348 = v467;
                    v347 = v463;
                    uint64_t v346 = v464;
                  }
                  swift_bridgeObjectRelease();
                  swift_unknownObjectRelease_n();
                }
                v348 = (uint16x4_t *)((char *)v348 + 1);
                if (v348 == (uint16x4_t *)v346)
                {
                  swift_release();
                  swift_bridgeObjectRelease();
                  goto LABEL_230;
                }
                continue;
              }
            }
            uint64_t v398 = v457;
            uint64_t v399 = swift_slowAlloc();
            uint64_t v25 = v399;
            uint64_t v34 = *(char **)(v398 + 48);
            if (v34)
            {
              v403 = (_DWORD *)(v399 + 8);
              do
              {
                *(double *)v400.i64 = sub_1B6A8B6FC((uint16x4_t *)v28, v343, v400, v401, v402);
                *((void *)v403 - 1) = v400.i64[0];
                _DWORD *v403 = v400.i32[2];
                v403 += 3;
                v28 += v344;
                --v34;
              }
              while (v34);
            }
            uint64_t v404 = *(void *)(v457 + 40);
            uint64_t v405 = sub_1B6355ED4(v404);
            if (!v405) {
              goto LABEL_310;
            }
            uint64_t v406 = v405;
            uint64_t v407 = v404 + 32;
            swift_bridgeObjectRetain();
            uint64_t v408 = 0;
            v466 = (char *)v404;
            v463 = (char *)(v404 + 32);
            uint64_t v464 = v406;
            do
            {
              v409 = (void *)(v407 + (v408 << 7));
              v410 = (uint16x4_t *)v409[4];
              if (*v409 == 3 && v410 != 0)
              {
                uint64_t v34 = (char *)v409[5];
                uint64_t v28 = v409[9];
                v413 = v409 + 10;
                uint64_t v412 = v409[10];
                uint64_t v31 = v413[1];
                v477 = (_OWORD *)v31;
                if (v412 == 4)
                {
                  swift_unknownObjectRetain_n();
                  swift_bridgeObjectRetain();
                  if ([(uint16x4_t *)v410 storageMode] == (id)2) {
                    goto LABEL_321;
                  }
                  uint64_t v31 = (uint64_t)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                  v414 = v410;
                  if (v28 >= 1)
                  {
                    v467 = v410;
                    v474.i64[0] = v408;
                    uint64_t v415 = 0;
                    v34 += v31;
                    uint64_t v416 = v478;
                    uint64_t v417 = v491;
                    int v418 = v492;
                    unsigned __int32 v419 = v484.n128_u32[3];
                    unsigned __int32 v420 = v481.n128_u32[3];
                    unsigned __int32 v421 = HIDWORD(v479);
                    v422 = v473;
                    do
                    {
                      if (__OFADD__(v415, 3)) {
                        uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        uint64_t v31 = v415 + 3;
                      }
                      v423 = &v34[4 * v415];
                      unsigned int v424 = *(_DWORD *)v423;
                      unsigned int v425 = *((_DWORD *)v423 + 1);
                      LODWORD(v423) = *((_DWORD *)v423 + 2);
                      uint64_t v426 = v25 + 12 * v424;
                      v427.n128_u64[0] = *(void *)v426;
                      v427.n128_u32[2] = *(_DWORD *)(v426 + 8);
                      v427.n128_u32[3] = v419;
                      __n128 v428 = v427;
                      __n128 v484 = v427;
                      uint64_t v429 = v25 + 12 * v425;
                      v427.n128_u64[0] = *(void *)v429;
                      v427.n128_u32[2] = *(_DWORD *)(v429 + 8);
                      v427.n128_u32[3] = v420;
                      __n128 v481 = v427;
                      uint64_t v430 = v25 + 12 * v423;
                      v431.n128_u64[0] = *(void *)v430;
                      v431.n128_u32[2] = *(_DWORD *)(v430 + 8);
                      v431.n128_u32[3] = v421;
                      long long v479 = (__int128)v431;
                      sub_1B6C1E2A8(v417, v416, v422, v418, v428, v427, v431);
                      unsigned __int32 v421 = HIDWORD(v479);
                      unsigned __int32 v420 = v481.n128_u32[3];
                      unsigned __int32 v419 = v484.n128_u32[3];
                      uint64_t v415 = v31;
                    }
                    while (v31 < v28);
                    goto LABEL_284;
                  }
                }
                else
                {
                  if (v412 != 2)
                  {
LABEL_322:
                    DWORD2(v453) = 0;
                    for (*(void *)&long long v453 = 957; ; *(void *)&long long v453 = 184)
                    {
LABEL_323:
                      sub_1B6E32BE8();
                      __break(1u);
LABEL_324:
                      swift_bridgeObjectRelease_n();

                      long long v596 = v559;
                      long long v597 = v560;
                      uint64_t v598 = v561;
                      v451 = (unsigned __int16 **)&v596;
                      v452 = v608;
LABEL_327:
                      uint64_t v34 = 0;
                      sub_1B6345178((void *)v31, v451, (uint64_t)v452);
                      sub_1B634507C((char *)v25);
                      ecs_stack_allocator_pop_snapshot(v28);
                      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 344));
                      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 376));
                      __break(1u);
LABEL_328:
                      DWORD2(v453) = 0;
                    }
                  }
                  swift_unknownObjectRetain_n();
                  swift_bridgeObjectRetain();
                  if ([(uint16x4_t *)v410 storageMode] == (id)2)
                  {
LABEL_321:
                    DWORD2(v453) = 0;
                    *(void *)&long long v453 = 83;
                    goto LABEL_323;
                  }
                  uint64_t v31 = (uint64_t)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                  v432 = v410;
                  if (v28 >= 1)
                  {
                    v467 = v410;
                    v474.i64[0] = v408;
                    uint64_t v433 = 0;
                    v34 += v31;
                    uint64_t v434 = v478;
                    uint64_t v435 = v491;
                    int v436 = v492;
                    unsigned __int32 v437 = v486.n128_u32[3];
                    unsigned __int32 v438 = v482.n128_u32[3];
                    unsigned __int32 v439 = v480.n128_u32[3];
                    v440 = v473;
                    do
                    {
                      if (__OFADD__(v433, 3)) {
                        uint64_t v31 = 0x7FFFFFFFFFFFFFFFLL;
                      }
                      else {
                        uint64_t v31 = v433 + 3;
                      }
                      v441 = &v34[2 * v433];
                      unsigned int v442 = *(unsigned __int16 *)v441;
                      unsigned int v443 = *((unsigned __int16 *)v441 + 1);
                      LODWORD(v441) = *((unsigned __int16 *)v441 + 2);
                      uint64_t v444 = v25 + 12 * v442;
                      v445.n128_u64[0] = *(void *)v444;
                      v445.n128_u32[2] = *(_DWORD *)(v444 + 8);
                      v445.n128_u32[3] = v437;
                      __n128 v446 = v445;
                      __n128 v486 = v445;
                      uint64_t v447 = v25 + 12 * v443;
                      v445.n128_u64[0] = *(void *)v447;
                      v445.n128_u32[2] = *(_DWORD *)(v447 + 8);
                      v445.n128_u32[3] = v438;
                      __n128 v482 = v445;
                      uint64_t v448 = v25 + 12 * v441;
                      v449.n128_u64[0] = *(void *)v448;
                      v449.n128_u32[2] = *(_DWORD *)(v448 + 8);
                      v449.n128_u32[3] = v439;
                      __n128 v480 = v449;
                      sub_1B6C1E2A8(v435, v434, v440, v436, v446, v445, v449);
                      unsigned __int32 v439 = v480.n128_u32[3];
                      unsigned __int32 v438 = v482.n128_u32[3];
                      unsigned __int32 v437 = v486.n128_u32[3];
                      uint64_t v433 = v31;
                    }
                    while (v31 < v28);
LABEL_284:
                    uint64_t v407 = (uint64_t)v463;
                    uint64_t v406 = v464;
                    uint64_t v408 = v474.i64[0];
                  }
                }
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease_n();
              }
              ++v408;
            }
            while (v408 != v406);
            swift_bridgeObjectRelease();
LABEL_310:
            MEMORY[0x1BA9B84C0](v25, -1, -1);
            swift_release();
LABEL_230:
            uint64_t v192 = v472;
LABEL_231:
            float32x4_t v193 = v465;
            uint64_t v195 = v471;
            uint64_t v190 = v455;
            uint64_t v185 = v456;
            float32x4_t v191 = v475;
LABEL_232:
            if ((_OWORD *)++v190 != v191) {
              continue;
            }
            break;
          }
LABEL_312:
          unsigned int v194 = v505;
LABEL_313:
          v570[0] = v519;
          v570[1] = v520;
          uint64_t v571 = v521;
          sub_1B6345178(v470, (unsigned __int16 **)v570, (uint64_t)v572);
          v505 = v194;
          char v174 = v476;
          sub_1B634507C(v476);
          v450 = v174;
          ecs_stack_allocator_pop_snapshot(v469);
          LOBYTE(v174) = v460;
          if (v460)
          {
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v450 + 43));
            os_unfair_lock_unlock(*((os_unfair_lock_t *)v450 + 47));
          }
          swift_release();
          uint64_t v175 = v468 + 1;
          if (v468 + 1 == v462) {
            goto LABEL_318;
          }
        }
      }
      swift_retain();
      swift_retain();
      swift_retain();
LABEL_318:
      swift_bridgeObjectRelease();
      sub_1B632F1C4(v510, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
    }
    return sub_1B632F1C4(v510, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  }
  else
  {
    swift_setDeallocating();
    return (void *)swift_deallocClassInstance();
  }
}

uint64_t sub_1B6C1E2A8(uint64_t a1, uint64_t a2, __n128 *a3, int a4, __n128 a5, __n128 a6, __n128 a7)
{
  __n128 v8 = *a3;
  __n128 v7 = a3[1];
  __n128 v10 = a3[2];
  __n128 v9 = a3[3];
  v12[0] = (__int128)a5;
  v12[1] = (__int128)a6;
  v12[2] = (__int128)a7;
  memset(&v12[3], 0, 48);
  char v13 = 1;
  return sub_1B6D7E238(a2, 0x100000000uLL, a1, v12, a4, v8, v7, v10, v9);
}

void sub_1B6C1E324()
{
  qword_1E9DD7228 = (uint64_t)&unk_1F0F54140;
}

uint64_t sub_1B6C1E33C(long long *a1, uint64_t a2)
{
  long long v2 = *a1;
  long long v3 = a1[2];
  *(_OWORD *)(a2 + 16) = a1[1];
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)a2 = v2;
  long long v4 = a1[3];
  long long v5 = a1[4];
  long long v6 = a1[5];
  *(unsigned char *)(a2 + 96) = *((unsigned char *)a1 + 96);
  *(_OWORD *)(a2 + 64) = v5;
  *(_OWORD *)(a2 + 80) = v6;
  *(_OWORD *)(a2 + 48) = v4;
  return a2;
}

void sub_1B6C1E36C(uint64_t a1)
{
  v266[6] = *MEMORY[0x1E4F143B8];
  float v1 = *(void **)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v1) {
    return;
  }
  swift_retain();
  swift_retain();
  id v170 = (id)sub_1B63340E8(a1);
  swift_release();
  if (!v170)
  {
    swift_release();
    return;
  }
  swift_retain();
  int v3 = sub_1B6C181B0();
  swift_release();
  if (v3 == 2)
  {
    swift_release();

    return;
  }
  uint64_t v4 = swift_retain();
  uint64_t v5 = sub_1B63422CC(v4);
  char v7 = v6;
  swift_release();
  if (v7) {
    uint64_t v8 = 0;
  }
  else {
    uint64_t v8 = v5;
  }
  uint64_t v149 = v8;
  uint64_t v9 = sub_1B6E328F8();
  sub_1B6388754(v9, v10, v170);
  swift_bridgeObjectRelease();
  unint64_t v11 = (void *)v1[49];
  if (v11)
  {
    id v12 = v11;
    sub_1B638963C((uint64_t)v182);
    long long v175 = v182[1];
    long long v178 = v182[0];
    long long v171 = v182[2];
    long long v162 = v182[4];
    long long v166 = v182[3];
    uint64_t v13 = v183;

    long long v15 = v162;
    long long v14 = v166;
    long long v17 = v171;
    long long v16 = v175;
    long long v18 = v178;
  }
  else
  {
    uint64_t v13 = 0;
    long long v18 = 0uLL;
    long long v16 = 0uLL;
    long long v17 = 0uLL;
    long long v14 = 0uLL;
    long long v15 = 0uLL;
  }
  v189[0] = v18;
  v189[1] = v16;
  v189[2] = v17;
  v189[3] = v14;
  v189[4] = v15;
  uint64_t v190 = v13;
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v207 = qword_1EB997A18;
  int v208 = 0;
  char v209 = 2;
  uint64_t v210 = 0;
  char v211 = 2;
  uint64_t v212 = 0;
  swift_retain();
  sub_1B6A6F930(1, (uint64_t)v191);
  swift_release();
  sub_1B62F7B88(0, (unint64_t *)&qword_1EB980C70, (unint64_t *)&qword_1EB980000, (unint64_t *)&qword_1EB97FFF0);
  uint64_t v19 = swift_allocObject();
  *(_OWORD *)(v19 + 16) = xmmword_1B6E77050;
  *(void *)(v19 + 32) = &type metadata for DrawCallComponent;
  *(void *)(v19 + 40) = &off_1F0F70A08;
  sub_1B62AD184(v192);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B62CA064((uint64_t)v191);
  v199[0] = v192[0];
  v199[1] = v192[1];
  uint64_t v200 = v193;
  sub_1B62C9DA8(a1, (uint64_t)v199, 0x200000000, v235);
  sub_1B62D7DE8((uint64_t)v235, (uint64_t)v243, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  float32x4_t v179 = (unsigned __int16 *)v243[0];
  if (!v243[0])
  {
    sub_1B62CA064((uint64_t)v192);
    goto LABEL_22;
  }
  uint64_t v134 = a1;
  uint64_t v141 = v243[5];
  uint64_t v143 = v243[8];
  uint64_t v20 = (void *)v243[9];
  uint64_t v145 = v243[7];
  uint64_t v147 = v243[10];
  sub_1B62CA064((uint64_t)v192);
  *(void *)&long long v223 = 0xD00000000000001ALL;
  *((void *)&v223 + 1) = 0x80000001B6F4D8D0;
  uint64_t v224 = 0;
  uint64_t v225 = 0;
  *(void *)id v226 = MEMORY[0x1E4FBC860];
  *(_OWORD *)&v226[8] = xmmword_1B6EB4050;
  uint64_t v227 = 0;
  *(void *)&long long v228 = 0;
  *((void *)&v228 + 1) = MEMORY[0x1E4FBC860];
  long long v229 = 0u;
  long long v230 = 0u;
  long long v231 = 0u;
  long long v232 = 0u;
  long long v233 = 0u;
  long long v234 = 0u;
  v261[4] = v228;
  memset(&v261[5], 0, 96);
  v261[0] = v223;
  v261[1] = 0u;
  v261[2] = *(_OWORD *)v226;
  v261[3] = 0xEA00000000006761;
  v262[1] = 0;
  v262[0] = 0;
  long long v263 = xmmword_1B6E50D30;
  long long v264 = xmmword_1B6E50D30;
  __int16 v265 = 15;
  v266[1] = 0;
  v266[0] = 0;
  v266[2] = 2;
  memset(&v266[3], 0, 24);
  swift_retain();
  sub_1B62D5ED4((uint64_t *)v261, v189, 0, 0, 0, (uint64_t)v262, 2, (uint64_t)v266, (uint64_t)v236, 1, 1);
  sub_1B638A224((uint64_t *)&v223);
  unint64_t v21 = sub_1B638A310((uint64_t)v236, 0);
  unint64_t v23 = v22;
  if (v21 < 3)
  {
    sub_1B630B7D8(v21, v22);
    sub_1B638CE7C(v236);
    swift_release();
    sub_1B632F1C4(v235, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
LABEL_22:
    swift_release();

    return;
  }
  unint64_t v133 = swift_unknownObjectRetain();
  sub_1B630B7D8(v133, v23);
  sub_1B638CE7C(v236);
  swift_release();
  if (!*(void *)v1[62])
  {
    if (v1[47])
    {
      uint64_t v213 = &unk_1F108FFD8;
      uint64_t v120 = swift_dynamicCastObjCProtocolConditional();
      if (v120)
      {
        long long v121 = (void *)v120;
        swift_unknownObjectRetain();
        id v122 = objc_msgSend(v121, sel_renderCommandEncoder);
        *(void *)&v215[0] = 0x646F636E45627573;
        *((void *)&v215[0] + 1) = 0xEB000000005B7265;
        v214[0] = 0;
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        float32x4_t v123 = (void *)sub_1B6E31768();
        swift_bridgeObjectRelease();
        objc_msgSend(v122, sel_setLabel_, v123);

        __n128 v124 = (void *)v1[62];
        *__n128 v124 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RenderCommandEncoder()), sel_initWithEncoder_, v122);
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
        swift_unknownObjectRelease();
      }
    }
  }
  __int16 v132 = v3;
  unint64_t v24 = *(void **)v1[62];
  if (v24)
  {
    uint64_t ObjectType = swift_getObjectType();
    objc_msgSend((id)swift_unknownObjectRetain(), sel_setRenderPipelineState_, v133);
    objc_msgSend(v24, sel_setDepthStencilState_, *(void *)(v1[31] + 376));
    sub_1B635FB18(v134, ObjectType);
    swift_unknownObjectRelease();
  }
  uint64_t v151 = (uint64_t)v1;
  if (v147 > 0 && v145)
  {
    uint64_t v26 = v20[4];
    int v27 = *(unsigned __int8 *)(v143 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    sub_1B632F1C4(v235, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F2C8);
    uint64_t v28 = 0;
    int v136 = v3 & 0x10101;
    __n128 v135 = (__n128)vdupq_n_s64(0x3F80000000000000uLL);
    int v137 = v27;
    uint64_t v139 = v26;
    while (1)
    {
      uint64_t v167 = v28;
      uint64_t v29 = (unsigned int *)(v141 + 48 * v28);
      uint64_t v30 = *v29;
      uint64_t v31 = v29[1];
      uint64_t v32 = v29[2];
      uint64_t v33 = *((void *)v29 + 2);
      uint64_t v34 = *((void *)v29 + 3);
      uint64_t v35 = *((void *)v29 + 5);
      uint64_t v152 = *((void *)v29 + 4);
      if (v27)
      {
        unint64_t v36 = *(os_unfair_lock_s **)(v35 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v36);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v35 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v26);
      uint64_t v160 = v20[7];
      uint64_t v163 = v20[6];
      uint64_t v156 = v20[9];
      uint64_t v158 = v20[8];
      uint64_t v154 = v20[10];
      uint64_t v37 = v20[4];
      uint64_t v38 = *(void *)(*(void *)(*(void *)(*(void *)(v35 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v20[6] = ecs_stack_allocator_allocate(v37, 48 * v38, 8);
      v20[7] = v38;
      v20[9] = 0;
      v20[10] = 0;
      v20[8] = 0;
      swift_release();
      v256[0] = v143;
      v256[1] = v35;
      uint64_t v172 = v35;
      v256[2] = v20;
      v256[3] = v32;
      v256[4] = (v31 - v30 + v32);
      v256[5] = v147;
      v256[6] = v30;
      v256[7] = v31;
      v256[8] = 0;
      v256[9] = 0;
      char v257 = 1;
      uint64_t v258 = v33;
      uint64_t v259 = v34;
      uint64_t v260 = v152;
      sub_1B6C18648(v256, (__n128)xmmword_1B6EB40E0, v135, (__n128)xmmword_1B6EB40F0, v151, v136, v149, 5);
      unint64_t v39 = v20[6];
      uint64_t v40 = v20[8];
      if (!v40)
      {
        uint64_t v66 = v20[7];
        uint64_t v67 = (void *)v20[4];
        goto LABEL_71;
      }
      for (uint64_t i = 0; i != v40; ++i)
      {
        uint64_t v43 = (uint64_t *)(v39 + 48 * i);
        uint64_t v44 = *v43;
        char v45 = (void (*)(uint64_t))v43[4];
        uint64_t v46 = v20[9];
        if (v46) {
          BOOL v47 = v44 == v46;
        }
        else {
          BOOL v47 = 0;
        }
        if (v47 || !v179[11]) {
          goto LABEL_36;
        }
        unint64_t v48 = v179[9];
        float32x4_t v49 = (void *)((char *)v179 + v179[8] + 41);
        uint64_t v50 = v43[2];
        uint64_t v51 = v49;
        unint64_t v52 = v48 >> 4;
        unint64_t v53 = (char *)v179 + 41;
        if (v48 >= 0x10)
        {
          while (*v51 != v44)
          {
            ++v53;
            v51 += 2;
            if (!--v52) {
              goto LABEL_51;
            }
          }
          unsigned int v54 = v53[v179[10]];
          BOOL v55 = v54 > 5;
          int v56 = (1 << v54) & 0x23;
          if (v55 || v56 == 0)
          {
LABEL_36:
            uint64_t v42 = swift_retain();
            v45(v42);
            swift_release();
            continue;
          }
        }
LABEL_51:
        if (swift_conformsToProtocol2()) {
          uint64_t v58 = v50;
        }
        else {
          uint64_t v58 = 0;
        }
        if (v58)
        {
          if (v48 < 0x10) {
            goto LABEL_36;
          }
          __float2 v59 = v49;
          unint64_t v60 = v48 >> 4;
          uint64_t v61 = (char *)v179 + 41;
          while (*v59 != v58)
          {
            ++v61;
            v59 += 2;
            if (!--v60) {
              goto LABEL_64;
            }
          }
          unsigned int v62 = v61[v179[10]];
          BOOL v55 = v62 > 5;
          int v63 = (1 << v62) & 0x23;
          if (v55 || v63 == 0) {
            goto LABEL_36;
          }
LABEL_64:
          uint64_t v65 = 16 * (v48 >> 4);
          while (*v49 != v58)
          {
            v49 += 2;
            v65 -= 16;
            if (!v65) {
              goto LABEL_36;
            }
          }
        }
      }
      uint64_t v66 = v20[7];
      unint64_t v39 = v20[6];
      uint64_t v67 = (void *)v20[4];
      if ((uint64_t)v20[8] >= 1) {
        swift_arrayDestroy();
      }
LABEL_71:
      uint64_t v26 = v139;
      ecs_stack_allocator_deallocate(v67, v39, 48 * v66);
      v20[6] = v163;
      v20[7] = v160;
      v20[8] = v158;
      v20[9] = v156;
      v20[10] = v154;
      if (*(void *)(v20[13] + 16))
      {
        uint64_t v68 = swift_bridgeObjectRetain();
        sub_1B639147C(v68, v172);
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v70 = v20[13];
        if (isUniquelyReferenced_nonNull_native)
        {
          sub_1B6399BB8(0, *(void *)(v70 + 16));
        }
        else
        {
          int v71 = (void *)MEMORY[0x1E4FBC860];
          if (*(void *)(v70 + 24) >= 2uLL)
          {
            sub_1B62D2DDC(0, (unint64_t *)&qword_1EB980C00, (uint64_t (*)(uint64_t))sub_1B63B29DC, MEMORY[0x1E4FBBE00]);
            int v71 = (void *)swift_allocObject();
            size_t v72 = j__malloc_size(v71);
            v71[2] = 0;
            v71[3] = 2 * ((uint64_t)(v72 - 32) / 72);
          }
          v20[13] = v71;
          swift_bridgeObjectRelease();
        }
        if (*(unsigned __int8 *)(v20[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
        {
          float v73 = *(char **)(v172 + 232);
          float32x4_t v74 = *(char **)(v172 + 256);
          if (v73 == v74)
          {
            long long v75 = *(char **)(v172 + 240);
          }
          else
          {
            sub_1B666018C(v74, v73);
            float32x4_t v74 = *(char **)(v172 + 232);
            long long v75 = *(char **)(v172 + 240);
            if (v75 == v74)
            {
              long long v75 = 0;
              float32x4_t v74 = 0;
              *(void *)(v172 + 232) = 0;
              *(void *)(v172 + 240) = 0;
            }
          }
          *(void *)(v172 + 248) = v75;
          *(void *)(v172 + 256) = v74;
        }
      }
      ecs_stack_allocator_pop_snapshot(v139);
      int v27 = v137;
      if (v137)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v172 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v172 + 376));
      }
      swift_release();
      uint64_t v28 = v167 + 1;
      if (v167 + 1 == v145)
      {
        sub_1B632F1C4(v235, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
        break;
      }
    }
  }
  if ((v132 & 0x100) == 0)
  {
    uint64_t v76 = v151;
    goto LABEL_146;
  }
  uint64_t v77 = sub_1B635824C();
  uint64_t v148 = v78;
  uint64_t v150 = v77;
  uint64_t v76 = v151;
  if (!v77)
  {
    swift_unknownObjectRelease();
    sub_1B632F1C4(v235, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
    goto LABEL_22;
  }
  uint64_t v201 = qword_1EB997A18;
  int v202 = 0;
  char v203 = 2;
  uint64_t v204 = 0;
  char v205 = 2;
  uint64_t v206 = 0;
  swift_retain();
  sub_1B663F978((uint64_t)v194);
  swift_release();
  sub_1B62F7B88(0, (unint64_t *)&qword_1EB980B70, &qword_1EB97E870, (unint64_t *)&qword_1EB97E840);
  uint64_t v79 = swift_allocObject();
  *(_OWORD *)(v79 + 16) = xmmword_1B6E77050;
  *(void *)(v79 + 32) = &type metadata for EmitterReference;
  *(void *)(v79 + 40) = &off_1F0F6BD40;
  sub_1B63B9DD4(v195);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B62CA064((uint64_t)v194);
  v197[0] = v195[0];
  v197[1] = v195[1];
  uint64_t v198 = v196;
  sub_1B62C9DA8(v134, (uint64_t)v197, 0x200000000, v237);
  sub_1B62D7DE8((uint64_t)v237, (uint64_t)v238, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  int8x16_t v180 = (unsigned __int16 *)v238[0];
  if (!v238[0])
  {
    sub_1B62CA064((uint64_t)v195);
    goto LABEL_145;
  }
  if (v242 <= 0 || (uint64_t v146 = v239) == 0)
  {
    sub_1B62CA064((uint64_t)v195);
    goto LABEL_144;
  }
  uint64_t v144 = v238[5];
  float32x4_t v80 = v241;
  uint64_t v81 = v241[4];
  int v82 = *(unsigned __int8 *)(v240 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  uint64_t v138 = v241 + 8;
  uint64_t v176 = v238[0] + 41;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v83 = 0;
  int v140 = v82;
  uint64_t v142 = v81;
  while (2)
  {
    uint64_t v173 = v83;
    uint64_t v84 = *(void *)(v144 + 48 * v83 + 40);
    if (v82)
    {
      float v85 = *(os_unfair_lock_s **)(v84 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v85);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v84 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v81);
    uint64_t v161 = v80[7];
    uint64_t v164 = v80[6];
    uint64_t v157 = v80[9];
    uint64_t v159 = v80[8];
    uint64_t v155 = v80[10];
    uint64_t v86 = v80[4];
    uint64_t v87 = *(void *)(*(void *)(*(void *)(*(void *)(v84 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v80[6] = ecs_stack_allocator_allocate(v86, 48 * v87, 8);
    v80[7] = v87;
    v138[1] = 0;
    v138[2] = 0;
    *uint64_t v138 = 0;
    swift_release();
    long long v153 = *(_OWORD *)(v84 + 272);
    uint64_t v89 = *(void *)(v84 + 288);
    uint64_t v88 = *(void *)(v84 + 296);
    uint64_t v168 = v84;
    LODWORD(v215[0]) = *(_DWORD *)(v84 + 24);
    sub_1B6E33098();
    sub_1B6E33998();
    sub_1B6E318B8();
    swift_bridgeObjectRelease();
    long long v186 = v215[2];
    long long v187 = v216;
    uint64_t v188 = v217;
    long long v184 = v215[0];
    long long v185 = v215[1];
    uint64_t v90 = sub_1B6E33978();
    long long v248 = v153;
    uint64_t v249 = v89;
    uint64_t v250 = v88;
    long long v251 = 0u;
    long long v252 = 0u;
    long long v253 = 0u;
    long long v254 = 0u;
    char v255 = 6;
    LOBYTE(v215[0]) = 1;
    sub_1B6D7E4E0(v148, 0x100000000uLL, v150, &v248, v90 | 0xFF000000);
    unint64_t v91 = v80[6];
    uint64_t v92 = v80;
    uint64_t v93 = v80[8];
    if (!v93)
    {
      uint64_t v118 = v92[7];
      long long v119 = (void *)v92[4];
      float32x4_t v80 = v92;
      goto LABEL_135;
    }
    for (uint64_t j = 0; j != v93; ++j)
    {
      uint64_t v96 = (uint64_t *)(v91 + 48 * j);
      uint64_t v97 = *v96;
      unint64_t v98 = (void (*)(uint64_t))v96[4];
      uint64_t v99 = v92[9];
      if (v99) {
        BOOL v100 = v97 == v99;
      }
      else {
        BOOL v100 = 0;
      }
      if (v100 || !v180[11]) {
        goto LABEL_99;
      }
      unint64_t v101 = v180[9];
      int32x4_t v102 = (void *)(v176 + v180[8]);
      uint64_t v103 = v96[2];
      long long v104 = v102;
      unint64_t v105 = v101 >> 4;
      uint64_t v106 = v176;
      if (v101 >= 0x10)
      {
        while (*v104 != v97)
        {
          ++v106;
          v104 += 2;
          if (!--v105) {
            goto LABEL_114;
          }
        }
        unsigned int v107 = *(unsigned __int8 *)(v106 + v180[10]);
        BOOL v55 = v107 > 5;
        int v108 = (1 << v107) & 0x23;
        if (v55 || v108 == 0)
        {
LABEL_99:
          uint64_t v95 = swift_retain();
          v98(v95);
          swift_release();
          continue;
        }
      }
LABEL_114:
      if (swift_conformsToProtocol2()) {
        uint64_t v110 = v103;
      }
      else {
        uint64_t v110 = 0;
      }
      if (v110)
      {
        if (v101 < 0x10) {
          goto LABEL_99;
        }
        BOOL v111 = v102;
        unint64_t v112 = v101 >> 4;
        uint64_t v113 = v176;
        while (*v111 != v110)
        {
          ++v113;
          v111 += 2;
          if (!--v112) {
            goto LABEL_127;
          }
        }
        unsigned int v114 = *(unsigned __int8 *)(v113 + v180[10]);
        BOOL v55 = v114 > 5;
        int v115 = (1 << v114) & 0x23;
        if (v55 || v115 == 0) {
          goto LABEL_99;
        }
LABEL_127:
        uint64_t v117 = 16 * (v101 >> 4);
        while (*v102 != v110)
        {
          v102 += 2;
          v117 -= 16;
          if (!v117) {
            goto LABEL_99;
          }
        }
      }
    }
    float32x4_t v80 = v92;
    uint64_t v118 = v92[7];
    unint64_t v91 = v92[6];
    long long v119 = (void *)v92[4];
    if ((uint64_t)v92[8] >= 1) {
      swift_arrayDestroy();
    }
    uint64_t v76 = v151;
LABEL_135:
    uint64_t v81 = v142;
    int v82 = v140;
    ecs_stack_allocator_deallocate(v119, v91, 48 * v118);
    v80[6] = v164;
    v80[7] = v161;
    v80[8] = v159;
    v80[9] = v157;
    v80[10] = v155;
    sub_1B634507C((char *)v168);
    ecs_stack_allocator_pop_snapshot(v142);
    if (v140)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v168 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v168 + 376));
    }
    swift_release();
    uint64_t v83 = v173 + 1;
    if (v173 + 1 != v146) {
      continue;
    }
    break;
  }
  sub_1B62CA064((uint64_t)v195);
  sub_1B632F1C4(v237, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
LABEL_144:
  sub_1B632F1C4(v237, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
LABEL_145:
  sub_1B69BF5C4(v150);
LABEL_146:
  uint64_t v125 = sub_1B635824C();
  if (v125)
  {
    uint64_t v127 = v125;
    uint64_t v128 = v126;
    sub_1B62D7DE8(v76 + 624, (uint64_t)v214, (unint64_t *)&unk_1EB9852B0, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
    sub_1B62D7DE8((uint64_t)v214, (uint64_t)v215, (unint64_t *)&unk_1EB9852B0, (uint64_t)&type metadata for Renderer.CurrentRenderContext);
    if (sub_1B6388C10((uint64_t *)v215) == 1)
    {
      sub_1B6E32BE8();
      __break(1u);
    }
    else
    {
      long long v177 = v217;
      long long v181 = v216;
      long long v174 = v218;
      long long v165 = v220;
      long long v169 = v219;
      uint64_t v130 = v221;
      uint64_t v129 = v222;
      int v131 = sub_1B67ADC80(255, 255, 255);
      v244[0] = v181;
      v244[1] = v177;
      v244[2] = v174;
      v244[3] = v169;
      v244[4] = v165;
      uint64_t v245 = v130;
      uint64_t v246 = v129;
      char v247 = 8;
      sub_1B6D7E4E0(v128, 0x100000000uLL, v127, v244, v131);

      swift_unknownObjectRelease();
      sub_1B632F1C4(v235, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
      swift_release();
      sub_1B69BF5C4(v127);
    }
  }
  else
  {

    swift_unknownObjectRelease();
    sub_1B632F1C4(v235, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
    swift_release();
  }
}

uint64_t sub_1B6C1F824()
{
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B6C1F85C(unsigned int a1, float32x4_t a2, float32x4_t a3)
{
  return sub_1B6C18E2C(a1, *(void *)(v3 + 16), *(void *)(v3 + 24), a2, a3);
}

uint64_t sub_1B6C1F864()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B6C1F874()
{
  return (*(uint64_t (**)(void))(v0 + 16))();
}

__n64 sub_1B6C1F89C(float32x4_t _Q0)
{
  _Q2 = _Q0;
  _S3 = _Q0.u32[1];
  _S4 = _Q0.u32[2];
  __asm { FMLS            S0, S4, V2.S[2] }
  _S6 = _Q2.i32[3];
  __asm { FMLA            S0, S6, V2.S[3] }
  float v9 = vmlas_n_f32(vmuls_lane_f32(_Q0.f32[2], _Q2, 3), _Q0.f32[1], _Q2.f32[0]);
  __asm
  {
    FMLA            S5, S3, V2.S[1]
    FMLA            S5, S6, V2.S[3]
    FMLS            S5, S2, V2.S[0]
    FMLA            S18, S4, V2.S[1]
    FMLA            S6, S4, V2.S[2]
    FMLS            S6, S2, V2.S[0]
    FMLS            S6, S3, V2.S[1]
  }
  result.n64_f32[1] = v9 + v9;
  return result;
}

double sub_1B6C1F97C(uint64_t a1, __n128 *a2, uint64_t a3)
{
  return sub_1B6C1F9AC(a1, a2, a3);
}

double sub_1B6C1F994(uint64_t a1, _DWORD *a2, __n128 *a3, uint64_t a4)
{
  return sub_1B6C1F9D0(a1, a2, a3, a4);
}

double sub_1B6C1F9AC(uint64_t a1, __n128 *a2, uint64_t a3)
{
  *(void *)&double result = sub_1B6C19330(a1, a2, v3[2], v3[3], v3[4], v3[5], a3, (long long *)v3[1].n128_u64[0]).n128_u64[0];
  return result;
}

double sub_1B6C1F9D0(uint64_t a1, _DWORD *a2, __n128 *a3, uint64_t a4)
{
  *(void *)&double result = sub_1B6C19224(a1, a2, a3, v4[2], v4[3], v4[4], v4[5], a4, (long long *)v4[1].n128_u64[0], v4[1].n128_i32[2]).n128_u64[0];
  return result;
}

void sub_1B6C1F9F8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v1)
  {
    swift_retain();
    swift_retain();
    uint64_t v3 = (void *)sub_1B63340E8(a1);
    swift_release();
    if (v3)
    {
      uint64_t v4 = sub_1B6E328F8();
      sub_1B6388754(v4, v5, v3);
      swift_bridgeObjectRelease();
      if (!**(void **)(v1 + 496))
      {
        if (*(void *)(v1 + 376))
        {
          uint64_t v35 = swift_dynamicCastObjCProtocolConditional();
          if (v35)
          {
            unint64_t v36 = (void *)v35;
            swift_unknownObjectRetain();
            id v37 = objc_msgSend(v36, sel_renderCommandEncoder);
            *(void *)&v70[0] = 0x646F636E45627573;
            *((void *)&v70[0] + 1) = 0xEB000000005B7265;
            *(void *)&long long v63 = 0;
            sub_1B6E33098();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            uint64_t v38 = (void *)sub_1B6E31768();
            swift_bridgeObjectRelease();
            objc_msgSend(v37, sel_setLabel_, v38);

            unint64_t v39 = *(void **)(v1 + 496);
            *unint64_t v39 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RenderCommandEncoder()), sel_initWithEncoder_, v37);
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
            swift_unknownObjectRelease();
          }
        }
      }
      if (**(void **)(v1 + 496))
      {
        uint64_t ObjectType = swift_getObjectType();
        char v7 = (void *)swift_unknownObjectRetain();
        LODWORD(v8) = -998637568;
        objc_msgSend(v7, sel_setDepthBias_slopeScale_clamp_, v8, 0.0, 0.0);
        sub_1B635FB18(a1, ObjectType);
        swift_unknownObjectRelease();
      }
      uint64_t v9 = sub_1B6388ED8(0);
      if (v9)
      {
        uint64_t v10 = (void *)v9;
        uint64_t v46 = v3;
        uint64_t v47 = v1;
        uint64_t v11 = qword_1EB97DC28;
        swift_unknownObjectRetain();
        if (v11 != -1) {
          swift_once();
        }
        v89[13] = qword_1EB997A18;
        int v90 = 0;
        char v91 = 2;
        uint64_t v92 = 0;
        char v93 = 2;
        uint64_t v94 = 0;
        swift_retain();
        sub_1B62A0EB4(1, (uint64_t)v71);
        swift_release();
        sub_1B62C6034(0, (unint64_t *)&qword_1EB980B60, (unint64_t *)&qword_1EB97E840, (uint64_t)&protocol descriptor for ClassComponent, MEMORY[0x1E4FBBE00]);
        uint64_t v12 = swift_allocObject();
        *(_OWORD *)(v12 + 16) = xmmword_1B6E77050;
        *(void *)(v12 + 56) = &type metadata for DrawCallLayer;
        *(void *)(v12 + 64) = &off_1F0F5E758;
        *(unsigned char *)(v12 + 32) = 2;
        sub_1B62A1250(v12, (uint64_t)v72);
        swift_setDeallocating();
        sub_1B62C5560(0, (unint64_t *)&qword_1EB97E840);
        swift_arrayDestroy();
        swift_deallocClassInstance();
        sub_1B62CA064((uint64_t)v71);
        uint64_t v14 = *(void *)(*(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                        + 8 * *(void *)thread_worker_index(&thread_worker_index, v13)
                        + 8);
        memset(v89, 0, 40);
        memset((char *)v65 + 8, 0, 40);
        long long v66 = xmmword_1B6E50D30;
        long long v67 = 1uLL;
        *(void *)&long long v68 = 0;
        *((void *)&v68 + 1) = 1;
        long long v69 = 0uLL;
        LOBYTE(v65[0]) = 2;
        uint64_t v15 = v47;
        *(void *)&long long v63 = v47;
        *((void *)&v63 + 1) = a1;
        *(void *)&long long v64 = v14;
        *((void *)&v64 + 1) = 1;
        sub_1B635FA4C((uint64_t)v89, (uint64_t)v65 + 8);
        v70[6] = v67;
        v70[7] = v68;
        v70[8] = v69;
        v70[2] = v65[0];
        v70[3] = v65[1];
        v70[4] = v65[2];
        v70[5] = v66;
        v70[0] = v63;
        v70[1] = v64;
        swift_retain();
        sub_1B6383B70(v74);
        long long v59 = v74[1];
        long long v61 = v74[0];
        long long v55 = v74[3];
        long long v57 = v74[2];
        long long v53 = v74[4];
        uint64_t v16 = v75;
        swift_release();
        LODWORD(v89[0]) = 0;
        *(_OWORD *)&v89[1] = v61;
        *(_OWORD *)&v89[3] = v59;
        *(_OWORD *)&v89[5] = v57;
        *(_OWORD *)&v89[7] = v55;
        *(_OWORD *)&v89[9] = v53;
        v89[11] = v16;
        v86[0] = v72[0];
        v86[1] = v72[1];
        uint64_t v87 = v73;
        sub_1B62C9DA8(a1, (uint64_t)v86, 0x200000000, v76);
        sub_1B62D7DE8((uint64_t)v76, (uint64_t)v77, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
        if (*(void *)&v77[0])
        {
          if (v83 >= 1)
          {
            uint64_t v54 = v80;
            if (v80)
            {
              long long v17 = v82;
              uint64_t v18 = v82[4];
              int v19 = *(unsigned __int8 *)(v81 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
              v84[0] = v77[0];
              v84[1] = v77[1];
              uint64_t v85 = v78;
              uint64_t v49 = (uint64_t)(v82 + 6);
              uint64_t v50 = v79;
              unint64_t v48 = v82 + 8;
              swift_retain();
              swift_retain();
              swift_retain();
              uint64_t v20 = 0;
              uint64_t v21 = 0;
              int v51 = v19;
              uint64_t v52 = v18;
              do
              {
                uint64_t v62 = v21;
                unint64_t v22 = (unsigned int *)(v50 + 48 * v20);
                uint64_t v23 = *v22;
                uint64_t v24 = v22[1];
                unint64_t v60 = (uint64_t *)*((void *)v22 + 2);
                uint64_t v58 = *((void *)v22 + 3);
                uint64_t v25 = *((void *)v22 + 5);
                uint64_t v56 = *((void *)v22 + 4);
                if (v19)
                {
                  uint64_t v26 = *(os_unfair_lock_s **)(v25 + 376);
                  swift_retain_n();
                  os_unfair_lock_lock(v26);
                  os_unfair_lock_lock(*(os_unfair_lock_t *)(v25 + 344));
                  swift_release();
                }
                else
                {
                  swift_retain();
                }
                ecs_stack_allocator_push_snapshot(v18);
                sub_1B62D7DE8(v49, (uint64_t)v88, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
                uint64_t v27 = v17[4];
                uint64_t v28 = *(void *)(*(void *)(*(void *)(*(void *)(v25 + 40) + 16) + 32) + 16) + 1;
                swift_retain();
                void v17[6] = ecs_stack_allocator_allocate(v27, 48 * v28, 8);
                _OWORD v17[7] = v28;
                v48[1] = 0;
                v48[2] = 0;
                void *v48 = 0;
                swift_release();
                uint64_t v29 = sub_1B62C9024((uint64_t)&type metadata for DrawCallComponent, (uint64_t)&off_1F0F709E8, v60, v58, v56, (uint64_t)v17);
                if (v23 != v24)
                {
                  long long v66 = 0u;
                  long long v67 = 0u;
                  long long v64 = 0u;
                  memset(v65, 0, sizeof(v65));
                  uint64_t v30 = v24 - v23;
                  uint64_t v31 = (uint64_t *)(v29 + 8 * v23);
                  long long v63 = 0u;
                  do
                  {
                    uint64_t v32 = *v31++;
                    uint64_t v33 = *(void *)(v32 + 160);
                    *(void *)(v32 + 160) = 1;
                    uint64_t v34 = swift_retain();
                    sub_1B631083C(v34, (int *)v89, (uint64_t *)&v63, v10, (uint64_t)v70, 0);
                    *(void *)(v32 + 160) = v33;
                    swift_release();
                    --v30;
                  }
                  while (v30);
                }
                uint64_t v21 = v62;
                sub_1B6345178(v17, (unsigned __int16 **)v84, (uint64_t)v88);
                sub_1B634507C((char *)v25);
                uint64_t v18 = v52;
                ecs_stack_allocator_pop_snapshot(v52);
                int v19 = v51;
                if (v51)
                {
                  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 344));
                  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 376));
                }
                swift_release();
                ++v20;
              }
              while (v20 != v54);
              sub_1B632F1C4(v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
              uint64_t v15 = v47;
            }
          }
          sub_1B632F1C4(v76, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
        }
        if (!**(void **)(v15 + 496))
        {
          if (*(void *)(v15 + 376))
          {
            uint64_t v41 = swift_dynamicCastObjCProtocolConditional();
            if (v41)
            {
              uint64_t v42 = (void *)v41;
              swift_unknownObjectRetain();
              id v43 = objc_msgSend(v42, sel_renderCommandEncoder);
              sub_1B6E33098();
              sub_1B6E31948();
              swift_bridgeObjectRelease();
              sub_1B6E31948();
              uint64_t v44 = (void *)sub_1B6E31768();
              swift_bridgeObjectRelease();
              objc_msgSend(v43, sel_setLabel_, v44);

              char v45 = *(void **)(v15 + 496);
              void *v45 = objc_msgSend(objc_allocWithZone((Class)type metadata accessor for RenderCommandEncoder()), sel_initWithEncoder_, v43);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
            }
          }
        }
        uint64_t v40 = **(void ***)(v15 + 496);
        if (v40)
        {
          objc_msgSend((id)swift_unknownObjectRetain(), sel_setDepthBias_slopeScale_clamp_, 0.0, 0.0, 0.0);
          objc_msgSend(v40, sel_setTriangleFillMode_, 0);
          swift_unknownObjectRelease();
        }
        swift_unknownObjectRelease();
        sub_1B62CA064((uint64_t)v72);
        swift_release();

        sub_1B635FC14((uint64_t)v70);
      }
      else
      {
        swift_release();
      }
    }
    else
    {
      swift_release();
    }
  }
}

void sub_1B6C20370(void *a1)
{
}

uint64_t sub_1B6C20378(uint64_t a1)
{
  uint64_t v17 = *(void *)(a1 + 1336);
  uint64_t v18 = *(void *)(a1 + 1328);
  uint64_t v15 = *(void *)(a1 + 1352);
  uint64_t v16 = *(void *)(a1 + 1344);
  uint64_t v13 = *(void *)(a1 + 1368);
  uint64_t v14 = *(void *)(a1 + 1360);
  uint64_t v11 = *(void *)(a1 + 1384);
  uint64_t v12 = *(void *)(a1 + 1376);
  long long v3 = *(_OWORD *)(a1 + 1408);
  long long v4 = *(_OWORD *)(a1 + 1392);
  uint64_t v9 = *(void *)(a1 + 1440);
  uint64_t v10 = *(void *)(a1 + 1432);
  uint64_t v7 = *(void *)(a1 + 1456);
  uint64_t v8 = *(void *)(a1 + 1448);
  uint64_t v25 = *(void *)(a1 + 1496);
  uint64_t v26 = *(void *)(a1 + 1488);
  uint64_t v23 = *(void *)(a1 + 1512);
  uint64_t v24 = *(void *)(a1 + 1504);
  uint64_t v21 = *(void *)(a1 + 1528);
  uint64_t v22 = *(void *)(a1 + 1520);
  long long v5 = *(_OWORD *)(a1 + 1568);
  long long v6 = *(_OWORD *)(a1 + 1552);
  uint64_t v19 = *(void *)(a1 + 1536);
  uint64_t v20 = *(void *)(a1 + 1544);
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B6C20590(v18, v17, v16, v15, v14, v13, v12, v11, v4, *((uint64_t *)&v4 + 1), v3);
  sub_1B6C20540(v10, v9, v8, v7);
  sub_1B6C20590(v26, v25, v24, v23, v22, v21, v19, v20, v6, *((uint64_t *)&v6 + 1), v5);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t sub_1B6C20540(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B6C20590(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
  {
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t sub_1B6C205E8(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B6C20634(uint64_t a1)
{
  return a1;
}

_DWORD *initializeBufferWithCopyOfBuffer for DebugDrawingState(_DWORD *result, int *a2)
{
  int v2 = *a2;
  *(_DWORD *)((char *)result + 3) = *(int *)((char *)a2 + 3);
  *uint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for DebugDrawingState(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[7]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for DebugDrawingState(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(unsigned char *)(result + 6) = 0;
    *(_WORD *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 7) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 7) = 0;
    }
    if (a2) {
      *(unsigned char *)uint64_t result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugDrawingState()
{
  return &type metadata for DebugDrawingState;
}

ValueMetadata *type metadata accessor for DebugCullingSystemState()
{
  return &type metadata for DebugCullingSystemState;
}

ValueMetadata *type metadata accessor for DebugInfoViewDependant()
{
  return &type metadata for DebugInfoViewDependant;
}

ValueMetadata *type metadata accessor for DebugInfoState()
{
  return &type metadata for DebugInfoState;
}

ValueMetadata *type metadata accessor for DebugInfoA()
{
  return &type metadata for DebugInfoA;
}

ValueMetadata *type metadata accessor for DebugInfoB()
{
  return &type metadata for DebugInfoB;
}

uint64_t sub_1B6C20798(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 96) <= 0xBu) {
    return *(unsigned __int8 *)(a1 + 96);
  }
  else {
    return (*(_DWORD *)a1 + 12);
  }
}

uint64_t sub_1B6C207B0(uint64_t result, unsigned int a2)
{
  if (a2 >= 0xC)
  {
    *(void *)uint64_t result = a2 - 12;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    LOBYTE(a2) = 12;
    *(void *)(result + 88) = 0;
  }
  *(unsigned char *)(result + 96) = a2;
  return result;
}

ValueMetadata *type metadata accessor for DebugInfoPrimitive()
{
  return &type metadata for DebugInfoPrimitive;
}

ValueMetadata *type metadata accessor for DebugInfoColor()
{
  return &type metadata for DebugInfoColor;
}

uint64_t _s3VFX18DebugInfoPrimitiveOwet_0(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xF4 && *(unsigned char *)(a1 + 97)) {
    return (*(_DWORD *)a1 + 244);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 96);
  if (v3 <= 0xC) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t _s3VFX18DebugInfoPrimitiveOwst_0(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF3)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 96) = 0;
    *(void *)uint64_t result = a2 - 244;
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 97) = 1;
    }
  }
  else
  {
    if (a3 >= 0xF4) {
      *(unsigned char *)(result + 97) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 96) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugInfoWireframePrimitive()
{
  return &type metadata for DebugInfoWireframePrimitive;
}

unint64_t sub_1B6C208BC()
{
  unint64_t result = qword_1E9DD72A0;
  if (!qword_1E9DD72A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD72A0);
  }
  return result;
}

void sub_1B6C20910(uint64_t a1, unint64_t *a2, void (*a3)(void))
{
  if (!*a2)
  {
    a3();
    unint64_t v4 = sub_1B6E33038();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

unint64_t sub_1B6C20970()
{
  unint64_t result = qword_1E9DD72B0;
  if (!qword_1E9DD72B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD72B0);
  }
  return result;
}

ValueMetadata *type metadata accessor for DebugInfoB.CodingKeys()
{
  return &type metadata for DebugInfoB.CodingKeys;
}

ValueMetadata *type metadata accessor for DebugInfoA.CodingKeys()
{
  return &type metadata for DebugInfoA.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for ArrowHead(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C20AB0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ArrowHead()
{
  return &type metadata for ArrowHead;
}

unint64_t sub_1B6C20AEC()
{
  unint64_t result = qword_1E9DD72B8;
  if (!qword_1E9DD72B8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD72B8);
  }
  return result;
}

unint64_t sub_1B6C20B44()
{
  unint64_t result = qword_1E9DD72C0;
  if (!qword_1E9DD72C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD72C0);
  }
  return result;
}

unint64_t sub_1B6C20B9C()
{
  unint64_t result = qword_1E9DD72C8;
  if (!qword_1E9DD72C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD72C8);
  }
  return result;
}

unint64_t sub_1B6C20BF4()
{
  unint64_t result = qword_1E9DD72D0;
  if (!qword_1E9DD72D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD72D0);
  }
  return result;
}

unint64_t sub_1B6C20C4C()
{
  unint64_t result = qword_1E9DD72D8;
  if (!qword_1E9DD72D8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD72D8);
  }
  return result;
}

double sub_1B6C20CA0(uint64_t a1, _DWORD *a2)
{
  return sub_1B69C29B4(a1, a2);
}

void sub_1B6C20CBC(uint64_t a1@<X8>)
{
  int v2 = v1;
  unsigned int v4 = (void *)sub_1B6E31768();
  id v5 = objc_msgSend(v1, sel_shaderModifiersArgumentWithName_, v4);

  if (!v5)
  {
    *(void *)(a1 + 24) = MEMORY[0x1E4FBB470];
    *(_DWORD *)a1 = 0;
    return;
  }
  unsigned int v6 = (void *)sub_1B6E31768();
  id v7 = objc_msgSend(v2, sel_valueForKey_, v6);

  if (v7)
  {
    sub_1B6E32718();
    swift_unknownObjectRelease();
  }
  else
  {
    long long v53 = 0u;
    long long v54 = 0u;
  }
  sub_1B6C22C44((uint64_t)&v53, (uint64_t)v55);
  id v8 = objc_msgSend(v5, sel_type);
  uint64_t v9 = sub_1B6E31798();
  uint64_t v11 = v10;

  if ((v9 != 0x74616F6C66 || v11 != 0xE500000000000000) && (sub_1B6E334B8() & 1) == 0)
  {
    if (v9 == 0x3274616F6C66 && v11 == 0xE600000000000000 || (sub_1B6E334B8() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_1B62B31E8((uint64_t)v55, (uint64_t)&v53);
      if (*((void *)&v54 + 1))
      {
        sub_1B63989B8(0, &qword_1E9DD4DA8);
        if (swift_dynamicCast())
        {
          objc_msgSend(v52, sel_VFXFloat2Value);
          uint64_t v15 = v14;

LABEL_23:
          sub_1B6395ED8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
          *(void *)(a1 + 24) = v16;

          *(void *)a1 = v15;
          goto LABEL_49;
        }
      }
      else
      {
        sub_1B62B32CC((uint64_t)&v53);
      }
      uint64_t v15 = 0;
      goto LABEL_23;
    }
    if (v9 == 0x3374616F6C66 && v11 == 0xE600000000000000 || (sub_1B6E334B8() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_1B62B31E8((uint64_t)v55, (uint64_t)&v53);
      if (*((void *)&v54 + 1))
      {
        sub_1B63989B8(0, &qword_1E9DD4DA8);
        if (swift_dynamicCast())
        {
          objc_msgSend(v52, sel_VFXFloat3Value);
          long long v48 = v17;

          int v18 = 0;
          uint64_t v20 = *((void *)&v48 + 1);
          uint64_t v19 = v48;
LABEL_32:
          uint64_t v21 = &qword_1EB980EB0;
          uint64_t v22 = (uint64_t (*)(uint64_t, void, unint64_t))MEMORY[0x1E4FBC2A8];
LABEL_42:
          sub_1B6395ED8(0, (unint64_t *)v21, v22);
          *(void *)(a1 + 24) = v24;
          uint64_t v25 = swift_allocObject();
          *(void *)a1 = v25;

          if (v18) {
            uint64_t v26 = 0;
          }
          else {
            uint64_t v26 = v19;
          }
          if (v18) {
            uint64_t v27 = 0;
          }
          else {
            uint64_t v27 = v20;
          }
          *(void *)(v25 + 16) = v26;
          *(void *)(v25 + 24) = v27;
          goto LABEL_49;
        }
      }
      else
      {
        sub_1B62B32CC((uint64_t)&v53);
      }
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v18 = 1;
      goto LABEL_32;
    }
    if (v9 == 0x3474616F6C66 && v11 == 0xE600000000000000 || (sub_1B6E334B8() & 1) != 0)
    {
      swift_bridgeObjectRelease();
      sub_1B62B31E8((uint64_t)v55, (uint64_t)&v53);
      if (*((void *)&v54 + 1))
      {
        sub_1B63989B8(0, &qword_1E9DD4DA8);
        if (swift_dynamicCast())
        {
          objc_msgSend(v52, sel_VFXFloat4Value);
          long long v49 = v23;

          int v18 = 0;
          uint64_t v20 = *((void *)&v49 + 1);
          uint64_t v19 = v49;
LABEL_41:
          uint64_t v21 = &qword_1EB980EF0;
          uint64_t v22 = (uint64_t (*)(uint64_t, void, unint64_t))MEMORY[0x1E4FBC2F8];
          goto LABEL_42;
        }
      }
      else
      {
        sub_1B62B32CC((uint64_t)&v53);
      }
      uint64_t v19 = 0;
      uint64_t v20 = 0;
      int v18 = 1;
      goto LABEL_41;
    }
    if (v9 == 0x34783474616F6C66 && v11 == 0xE800000000000000)
    {
      swift_bridgeObjectRelease();
    }
    else
    {
      char v28 = sub_1B6E334B8();
      swift_bridgeObjectRelease();
      if ((v28 & 1) == 0)
      {
        *(void *)(a1 + 24) = MEMORY[0x1E4FBB470];

        *(_DWORD *)a1 = 0;
        goto LABEL_49;
      }
    }
    sub_1B62B31E8((uint64_t)v55, (uint64_t)&v53);
    if (*((void *)&v54 + 1))
    {
      sub_1B63989B8(0, &qword_1E9DD4DA8);
      if (swift_dynamicCast())
      {
        objc_msgSend(v52, sel_VFXMatrix4Value);
        long long v46 = v30;
        long long v50 = v29;
        long long v44 = v31;
        long long v45 = v32;

        char v33 = 0;
        uint64_t v34 = v50;
        uint64_t v51 = *((void *)&v50 + 1);
        uint64_t v35 = v46;
        uint64_t v47 = *((void *)&v46 + 1);
        uint64_t v37 = *((void *)&v44 + 1);
        uint64_t v36 = v44;
        uint64_t v38 = *((void *)&v45 + 1);
        uint64_t v39 = v45;
LABEL_59:
        type metadata accessor for simd_float4x4(0);
        *(void *)(a1 + 24) = v40;
        uint64_t v41 = (void *)swift_allocObject();
        *(void *)a1 = v41;

        if (v33)
        {
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          uint64_t v36 = 0;
          uint64_t v39 = 0;
          uint64_t v35 = 0x3F80000000000000;
          uint64_t v34 = 1065353216;
          uint64_t v37 = 1065353216;
          uint64_t v38 = 0x3F80000000000000;
        }
        else
        {
          uint64_t v42 = v51;
          uint64_t v43 = v47;
        }
        v41[2] = v34;
        v41[3] = v42;
        v41[4] = v35;
        v41[5] = v43;
        v41[6] = v36;
        v41[7] = v37;
        v41[8] = v39;
        v41[9] = v38;
        goto LABEL_49;
      }
    }
    else
    {
      sub_1B62B32CC((uint64_t)&v53);
    }
    uint64_t v34 = 0;
    uint64_t v51 = 0;
    uint64_t v35 = 0;
    uint64_t v47 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    uint64_t v39 = 0;
    uint64_t v38 = 0;
    char v33 = 1;
    goto LABEL_59;
  }
  swift_bridgeObjectRelease();
  sub_1B62B31E8((uint64_t)v55, (uint64_t)&v53);
  if (!*((void *)&v54 + 1))
  {
    sub_1B62B32CC((uint64_t)&v53);
    goto LABEL_13;
  }
  sub_1B63989B8(0, (unint64_t *)&qword_1E9DD0780);
  if ((swift_dynamicCast() & 1) == 0)
  {
LABEL_13:
    int v13 = 0;
    goto LABEL_14;
  }
  objc_msgSend(v52, sel_floatValue);
  int v13 = v12;

LABEL_14:
  *(void *)(a1 + 24) = MEMORY[0x1E4FBB470];

  *(_DWORD *)a1 = v13;
LABEL_49:
  sub_1B62B32CC((uint64_t)v55);
}

uint64_t sub_1B6C213EC(void *a1)
{
  int v3 = (void *)sub_1B6E31768();
  id v4 = objc_msgSend(v1, sel_shaderModifiersArgumentWithName_, v3);

  if (!v4)
  {
    sub_1B62C14BC(a1, a1[3]);
    uint64_t v10 = sub_1B6E33498();
    uint64_t v11 = (void *)sub_1B6E31768();
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setValue_forKey_, v10, v11);
    swift_unknownObjectRelease();

    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  memset(v28, 0, sizeof(v28));
  sub_1B62CAAD8((uint64_t)a1, (uint64_t)&v26);
  if (!swift_dynamicCast())
  {
    sub_1B6395ED8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
    if (swift_dynamicCast())
    {
      id v13 = objc_msgSend(self, sel_valueWithVFXFloat2_, v19[0]);
    }
    else
    {
      sub_1B6395ED8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
      if (swift_dynamicCast())
      {
        id v13 = objc_msgSend(self, sel_valueWithVFXFloat3_, v19[0]);
      }
      else
      {
        sub_1B6395ED8(0, (unint64_t *)&qword_1EB980EF0, MEMORY[0x1E4FBC2F8]);
        if (!swift_dynamicCast())
        {
          type metadata accessor for simd_float4x4(0);
          if (swift_dynamicCast())
          {
            id v18 = objc_msgSend(self, sel_valueWithVFXMatrix4_, *(double *)&v21, v22, *(double *)&v24, *(double *)&v25);
            uint64_t v20 = sub_1B63989B8(0, &qword_1E9DD4DA8);
            *(void *)&v19[0] = v18;
            sub_1B62B32CC((uint64_t)v28);
            uint64_t v14 = v19;
            goto LABEL_16;
          }
          if (!swift_dynamicCast())
          {
            sub_1B62B32CC((uint64_t)v28);
            swift_bridgeObjectRelease();
            _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
            long long v17 = &v26;
            return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v17);
          }
          id v7 = objc_msgSend(objc_allocWithZone(NSNumber), sel_initWithDouble_, v19[0]);
          goto LABEL_4;
        }
        id v13 = objc_msgSend(self, sel_valueWithVFXFloat4_, v19[0]);
      }
    }
    id v8 = v13;
    uint64_t v9 = &qword_1E9DD4DA8;
    goto LABEL_15;
  }
  id v5 = objc_allocWithZone(NSNumber);
  LODWORD(v6) = LODWORD(v19[0]);
  id v7 = objc_msgSend(v5, sel_initWithFloat_, v6);
LABEL_4:
  id v8 = v7;
  uint64_t v9 = (unint64_t *)&qword_1E9DD0780;
LABEL_15:
  uint64_t v23 = sub_1B63989B8(0, v9);
  *(void *)&long long v21 = v8;
  sub_1B62B32CC((uint64_t)v28);
  uint64_t v14 = (double *)&v21;
LABEL_16:
  sub_1B6C22C44((uint64_t)v14, (uint64_t)v28);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v26);
  sub_1B62B31E8((uint64_t)v28, (uint64_t)&v26);
  if (v27)
  {
    sub_1B62B57A8(&v26, &v21);
    sub_1B62C14BC(&v21, v23);
    uint64_t v15 = sub_1B6E33498();
    uint64_t v16 = (void *)sub_1B6E31768();
    swift_bridgeObjectRelease();
    objc_msgSend(v1, sel_setValue_forKey_, v15, v16);
    swift_unknownObjectRelease();

    sub_1B62B32CC((uint64_t)v28);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    long long v17 = &v21;
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v17);
  }
  sub_1B62B32CC((uint64_t)v28);
  swift_bridgeObjectRelease();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B62B32CC((uint64_t)&v26);
}

id sub_1B6C218C0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_physicsWorld);
  *a2 = result;
  return result;
}

double sub_1B6C218FC@<D0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  if (objc_msgSend(*a1, sel_contents))
  {
    sub_1B6E32718();
    swift_unknownObjectRelease();
  }
  else
  {
    double result = 0.0;
    *a2 = 0u;
    a2[1] = 0u;
  }
  return result;
}

uint64_t sub_1B6C2196C(uint64_t a1, void **a2)
{
  sub_1B62B31E8(a1, (uint64_t)v12);
  int v3 = *a2;
  uint64_t v4 = v13;
  if (v13)
  {
    id v5 = sub_1B62C14BC(v12, v13);
    uint64_t v6 = *(void *)(v4 - 8);
    double v7 = MEMORY[0x1F4188790](v5, v5);
    uint64_t v9 = (char *)v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
    (*(void (**)(char *, double))(v6 + 16))(v9, v7);
    uint64_t v10 = sub_1B6E33498();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v4);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
  }
  else
  {
    uint64_t v10 = 0;
  }
  objc_msgSend(v3, sel_setContents_, v10);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B6C21AAC()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C21AC4()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C21ADC(id *a1, uint64_t a2, uint64_t a3, SEL *a4)
{
  id v4 = [*a1 *a4];
  sub_1B6E32718();

  return swift_unknownObjectRelease();
}

uint64_t sub_1B6C21B30(void *a1, void **a2, uint64_t a3, uint64_t a4, SEL *a5)
{
  uint64_t v6 = *a2;
  sub_1B62C14BC(a1, a1[3]);
  objc_msgSend(v6, *a5, sub_1B6E33498());

  return swift_unknownObjectRelease();
}

uint64_t sub_1B6C21B98()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C21BB0()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C21BC8()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C21BE0()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E77050;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 0x7369766964627553;
  *(void *)(v0 + 40) = 0xEB000000006E6F69;
  uint64_t v2 = MEMORY[0x1E4FBB550];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  sub_1B63989B8(0, &qword_1E9DD7328);
  if (swift_dynamicCastMetatype())
  {
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B6E90350;
    uint64_t v4 = swift_getKeyPath();
    type metadata accessor for VFXParametricModelType(0);
    *(void *)(inited + 32) = 1701869908;
    *(void *)(inited + 40) = 0xE400000000000000;
    *(void *)(inited + 48) = v4;
    *(void *)(inited + 56) = v5;
    *(void *)(inited + 64) = 0;
    *(unsigned char *)(inited + 72) = 1;
    *(_WORD *)(inited + 74) = 0;
    uint64_t v6 = swift_getKeyPath();
    uint64_t v7 = MEMORY[0x1E4FBB470];
    *(void *)(inited + 80) = 0x6874646957;
    *(void *)(inited + 88) = 0xE500000000000000;
    *(void *)(inited + 96) = v6;
    *(void *)(inited + 104) = v7;
    *(void *)(inited + 112) = 0;
    *(unsigned char *)(inited + 120) = 1;
    *(_WORD *)(inited + 122) = 0;
    uint64_t v8 = swift_getKeyPath();
    *(void *)(inited + 128) = 0x746867696548;
    *(void *)(inited + 136) = 0xE600000000000000;
    *(void *)(inited + 144) = v8;
    *(void *)(inited + 152) = v7;
    *(void *)(inited + 160) = 0;
    *(unsigned char *)(inited + 168) = 1;
    *(_WORD *)(inited + 170) = 0;
    uint64_t v9 = swift_getKeyPath();
    *(void *)(inited + 176) = 0x6874676E654CLL;
    *(void *)(inited + 184) = 0xE600000000000000;
    *(void *)(inited + 192) = v9;
    *(void *)(inited + 200) = v7;
    *(void *)(inited + 208) = 0;
    *(unsigned char *)(inited + 216) = 1;
    *(_WORD *)(inited + 218) = 0;
    uint64_t v10 = swift_getKeyPath();
    strcpy((char *)(inited + 224), "Chamfer radius");
    *(unsigned char *)(inited + 239) = -18;
    *(void *)(inited + 240) = v10;
    *(void *)(inited + 248) = v7;
    *(void *)(inited + 256) = 0;
    *(unsigned char *)(inited + 264) = 1;
    *(_WORD *)(inited + 266) = 0;
    uint64_t v11 = swift_getKeyPath();
    type metadata accessor for VFXMeshPrimitiveType(0);
    *(void *)(inited + 272) = 0x79676F6C6F706F54;
    *(void *)(inited + 280) = 0xE800000000000000;
    *(void *)(inited + 288) = v11;
    *(void *)(inited + 296) = v12;
    *(void *)(inited + 304) = 0;
    *(unsigned char *)(inited + 312) = 1;
    *(_WORD *)(inited + 314) = 0;
    uint64_t v13 = swift_getKeyPath();
    strcpy((char *)(inited + 320), "Width Segment");
    *(_WORD *)(inited + 334) = -4864;
    *(void *)(inited + 336) = v13;
    *(void *)(inited + 344) = v2;
    *(void *)(inited + 352) = 0;
    *(unsigned char *)(inited + 360) = 1;
    *(_WORD *)(inited + 362) = 0;
    uint64_t v14 = swift_getKeyPath();
    strcpy((char *)(inited + 368), "Height Segment");
    *(unsigned char *)(inited + 383) = -18;
    *(void *)(inited + 384) = v14;
    *(void *)(inited + 392) = v2;
    *(void *)(inited + 400) = 0;
    *(unsigned char *)(inited + 408) = 1;
    *(_WORD *)(inited + 410) = 0;
    uint64_t v15 = swift_getKeyPath();
    strcpy((char *)(inited + 416), "Length Segment");
    *(unsigned char *)(inited + 431) = -18;
    *(void *)(inited + 432) = v15;
    *(void *)(inited + 440) = v2;
    *(void *)(inited + 448) = 0;
    *(unsigned char *)(inited + 456) = 1;
    *(_WORD *)(inited + 458) = 0;
    uint64_t v16 = swift_getKeyPath();
    *(void *)(inited + 464) = 0x7265666D616843;
    *(void *)(inited + 472) = 0xE700000000000000;
    *(void *)(inited + 480) = v16;
    *(void *)(inited + 488) = v2;
    *(void *)(inited + 496) = 0;
    *(unsigned char *)(inited + 504) = 1;
    *(_WORD *)(inited + 506) = 0;
    sub_1B6641C3C(inited);
  }
  return v0;
}

uint64_t sub_1B6C21F60()
{
  return sub_1B6C22BFC();
}

id sub_1B6C21F78()
{
  id result = objc_msgSend(v0, sel_asset);
  if (result)
  {
    self;
    id result = (id)swift_dynamicCastObjCClass();
    if (!result)
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  return result;
}

id sub_1B6C21FDC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_asset);
  if (result)
  {
    self;
    id result = (id)swift_dynamicCastObjCClass();
    if (!result)
    {
      swift_unknownObjectRelease();
      id result = 0;
    }
  }
  *a2 = result;
  return result;
}

uint64_t sub_1B6C22048(uint64_t a1, uint64_t a2)
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B6EB4810;
  swift_getKeyPath();
  sub_1B6C27E4C(0, &qword_1E9DD7300);
  uint64_t v5 = sub_1B6E32C78();
  uint64_t v44 = a1;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1B6E32748();
  char v8 = v7;
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v4 + 32) = a1;
  *(void *)(v4 + 40) = a2;
  *(void *)(v4 + 48) = v5;
  *(void *)(v4 + 56) = MEMORY[0x1E4FBB470];
  *(void *)(v4 + 64) = v6;
  *(unsigned char *)(v4 + 72) = v8 & 1;
  *(_WORD *)(v4 + 74) = 0;
  swift_getKeyPath();
  sub_1B6C27C28(0, &qword_1E9DD7308, type metadata accessor for VFXFilterMode);
  uint64_t v9 = sub_1B6E32C78();
  uint64_t v45 = a2;
  uint64_t v46 = a2;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  sub_1B6E31948();
  uint64_t v10 = a1;
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1B6E32748();
  LOBYTE(a1) = v12;
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for VFXFilterMode(0);
  uint64_t v14 = v13;
  *(void *)(v4 + 80) = v10;
  *(void *)(v4 + 88) = v46;
  *(void *)(v4 + 96) = v9;
  *(void *)(v4 + 104) = v13;
  uint64_t v43 = v13;
  *(void *)(v4 + 112) = v11;
  *(unsigned char *)(v4 + 120) = a1 & 1;
  *(_WORD *)(v4 + 122) = 0;
  swift_getKeyPath();
  uint64_t v15 = sub_1B6E32C78();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  uint64_t v16 = sub_1B6E32748();
  LOBYTE(v9) = v17;
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v4 + 128) = v44;
  *(void *)(v4 + 136) = v45;
  *(void *)(v4 + 144) = v15;
  *(void *)(v4 + 152) = v14;
  *(void *)(v4 + 160) = v16;
  *(unsigned char *)(v4 + 168) = v9 & 1;
  *(_WORD *)(v4 + 170) = 0;
  swift_getKeyPath();
  uint64_t v18 = sub_1B6E32C78();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  uint64_t v19 = sub_1B6E32748();
  char v21 = v20;
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v4 + 176) = v44;
  *(void *)(v4 + 184) = v45;
  *(void *)(v4 + 192) = v18;
  *(void *)(v4 + 200) = v43;
  *(void *)(v4 + 208) = v19;
  *(unsigned char *)(v4 + 216) = v21 & 1;
  *(_WORD *)(v4 + 218) = 0;
  swift_getKeyPath();
  sub_1B6C27C28(0, &qword_1E9DD7310, type metadata accessor for VFXWrapMode);
  uint64_t v22 = sub_1B6E32C78();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  uint64_t v23 = sub_1B6E32748();
  LOBYTE(v9) = v24;
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for VFXWrapMode(0);
  uint64_t v26 = v25;
  *(void *)(v4 + 224) = v44;
  *(void *)(v4 + 232) = v45;
  *(void *)(v4 + 240) = v22;
  *(void *)(v4 + 248) = v25;
  *(void *)(v4 + 256) = v23;
  *(unsigned char *)(v4 + 264) = v9 & 1;
  *(_WORD *)(v4 + 266) = 0;
  swift_getKeyPath();
  uint64_t v27 = sub_1B6E32C78();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  uint64_t v28 = sub_1B6E32748();
  char v30 = v29;
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v4 + 272) = v44;
  *(void *)(v4 + 280) = v45;
  *(void *)(v4 + 288) = v27;
  *(void *)(v4 + 296) = v26;
  *(void *)(v4 + 304) = v28;
  *(unsigned char *)(v4 + 312) = v30 & 1;
  *(_WORD *)(v4 + 314) = 0;
  swift_getKeyPath();
  sub_1B6C27E4C(0, &qword_1E9DD7318);
  uint64_t v31 = sub_1B6E32C78();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  uint64_t v32 = sub_1B6E32748();
  LOBYTE(v26) = v33;
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v4 + 320) = v44;
  *(void *)(v4 + 328) = v45;
  *(void *)(v4 + 336) = v31;
  *(void *)(v4 + 344) = MEMORY[0x1E4FBB550];
  *(void *)(v4 + 352) = v32;
  *(unsigned char *)(v4 + 360) = v26 & 1;
  *(_WORD *)(v4 + 362) = 0;
  swift_getKeyPath();
  uint64_t v34 = sub_1B6E32C78();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  uint64_t v35 = sub_1B6E32748();
  char v37 = v36;
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v4 + 368) = v44;
  *(void *)(v4 + 376) = v45;
  *(void *)(v4 + 384) = v34;
  *(void *)(v4 + 392) = MEMORY[0x1E4FBB470];
  *(void *)(v4 + 400) = v35;
  *(unsigned char *)(v4 + 408) = v37 & 1;
  *(_WORD *)(v4 + 410) = 0;
  swift_getKeyPath();
  sub_1B6C27C28(0, &qword_1E9DD7320, type metadata accessor for simd_float4x4);
  uint64_t v38 = sub_1B6E32C78();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  uint64_t v39 = sub_1B6E32748();
  LOBYTE(v34) = v40;
  swift_release();
  swift_bridgeObjectRelease();
  type metadata accessor for simd_float4x4(0);
  *(void *)(v4 + 416) = v44;
  *(void *)(v4 + 424) = v45;
  *(void *)(v4 + 432) = v38;
  *(void *)(v4 + 440) = v41;
  *(void *)(v4 + 448) = v39;
  *(unsigned char *)(v4 + 456) = v34 & 1;
  *(_WORD *)(v4 + 458) = 0;
  return v4;
}

uint64_t sub_1B6C227C8(uint64_t a1)
{
  sub_1B62CAAD8(a1, (uint64_t)v2);
  swift_bridgeObjectRetain();
  return sub_1B6C213EC(v2);
}

uint64_t sub_1B6C22820()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C22838@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)a4 = a1;
  *(void *)(a4 + 8) = a2;
  *(void *)(a4 + 16) = KeyPath;
  *(void *)(a4 + 24) = a3;
  *(void *)(a4 + 32) = 0;
  *(_DWORD *)(a4 + 40) = 67108865;
  return swift_bridgeObjectRetain_n();
}

id sub_1B6C228AC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_camera);
  *a2 = result;
  return result;
}

id sub_1B6C228E8(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCamera_, *a1);
}

uint64_t sub_1B6C228FC()
{
  return sub_1B6C22BFC();
}

double sub_1B6C22914()
{
  sub_1B62F7FA0(0, &qword_1E9DD72E0, (uint64_t)&type metadata for ScriptKeyPathMigration, MEMORY[0x1E4FBBE00]);
  uint64_t v1 = swift_allocObject();
  *(void *)&double result = 1;
  *(_OWORD *)(v1 + 16) = xmmword_1B6E77050;
  *(_OWORD *)(v1 + 32) = xmmword_1B6EB4820;
  *(void *)(v1 + 48) = 0xED00007765697620;
  *(void *)(v1 + 56) = 0xD000000000000014;
  *(void *)(v1 + 64) = 0x80000001B6F4D9E0;
  *(void *)(v1 + 72) = v0;
  *(void *)(v1 + 80) = &off_1F0FAFED0;
  return result;
}

uint64_t sub_1B6C229B0()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C229C8()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C229E0()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C229F8()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C22A0C(uint64_t a1, uint64_t a2)
{
  return sub_1B6C22AA0(a1, a2, (uint64_t)&unk_1B6EB57A8, (uint64_t)&unk_1B6EB57D8, 0x65756C6156, 0xE500000000000000);
}

uint64_t sub_1B6C22A30()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C22A48()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C22A60()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C22A74(uint64_t a1, uint64_t a2)
{
  return sub_1B6C22AA0(a1, a2, (uint64_t)&unk_1B6EB53E8, (uint64_t)&unk_1B6EB5410, 0x7469736E65746E49, 0xE900000000000079);
}

uint64_t sub_1B6C22AA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B6E76B30;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v8 + 32) = 0x64656C62616E45;
  *(void *)(v8 + 40) = 0xE700000000000000;
  uint64_t v10 = MEMORY[0x1E4FBB390];
  *(void *)(v8 + 48) = KeyPath;
  *(void *)(v8 + 56) = v10;
  *(void *)(v8 + 64) = 0;
  *(unsigned char *)(v8 + 72) = 1;
  *(_WORD *)(v8 + 74) = 0;
  uint64_t v11 = swift_getKeyPath();
  *(void *)(v8 + 80) = a5;
  *(void *)(v8 + 88) = a6;
  uint64_t v12 = MEMORY[0x1E4FBB470];
  *(void *)(v8 + 96) = v11;
  *(void *)(v8 + 104) = v12;
  *(void *)(v8 + 112) = 0;
  *(unsigned char *)(v8 + 120) = 1;
  *(_WORD *)(v8 + 122) = 0;
  return v8;
}

uint64_t sub_1B6C22B88()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C22BA0()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C22BB8()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C22BD0()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C22BE8()
{
  return sub_1B6C22BFC();
}

uint64_t sub_1B6C22BFC()
{
  self;
  uint64_t result = swift_dynamicCastObjCClass();
  if (result) {
    return swift_getKeyPath();
  }
  return result;
}

uint64_t sub_1B6C22C44(uint64_t a1, uint64_t a2)
{
  sub_1B62F7FA0(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B6C22CD0()
{
  return MEMORY[0x1F4186498](v0, 80, 15);
}

uint64_t sub_1B6C22CE0()
{
  return MEMORY[0x1F4186498](v0, 32, 15);
}

uint64_t sub_1B6C22CF0()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E76900;
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for VFXShadingModel(0);
  *(void *)(v0 + 32) = 0x676E6964616853;
  *(void *)(v0 + 40) = 0xE700000000000000;
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = MEMORY[0x1E4FBB470];
  strcpy((char *)(v0 + 80), "Alpha Cutoff");
  *(unsigned char *)(v0 + 93) = 0;
  *(_WORD *)(v0 + 94) = -5120;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  type metadata accessor for VFXColorMask(0);
  strcpy((char *)(v0 + 128), "Write to Color");
  *(unsigned char *)(v0 + 143) = -18;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v6;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v7 = swift_getKeyPath();
  uint64_t v8 = MEMORY[0x1E4FBB390];
  strcpy((char *)(v0 + 176), "Write to Depth");
  *(unsigned char *)(v0 + 191) = -18;
  *(void *)(v0 + 192) = v7;
  *(void *)(v0 + 200) = v8;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  uint64_t v9 = swift_getKeyPath();
  *(void *)(v0 + 224) = 0x6F72662064616552;
  *(void *)(v0 + 232) = 0xEF6874706544206DLL;
  *(void *)(v0 + 240) = v9;
  *(void *)(v0 + 248) = v8;
  *(void *)(v0 + 256) = 0;
  *(unsigned char *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  uint64_t v42 = v0;
  long long v15 = xmmword_1B6EB4830;
  uint64_t v16 = 0x6F6465626C41;
  v17[0] = 0xE600000000000000;
  v17[1] = swift_getKeyPath();
  v17[2] = 0x73656E6C6174654DLL;
  v17[3] = 0xE900000000000073;
  v17[4] = swift_getKeyPath();
  v17[5] = 0x73656E6867756F52;
  void v17[6] = 0xE900000000000073;
  _OWORD v17[7] = swift_getKeyPath();
  v17[8] = 0x72616C7563657053;
  v17[9] = 0xE800000000000000;
  v17[10] = swift_getKeyPath();
  v17[11] = 0x6C616D726F4ELL;
  v17[12] = 0xE600000000000000;
  v17[13] = swift_getKeyPath();
  v17[14] = 0x697463656C666552;
  v17[15] = 0xEA00000000006576;
  v17[16] = swift_getKeyPath();
  v17[17] = 0x726170736E617254;
  v17[18] = 0xEB00000000746E65;
  v17[19] = swift_getKeyPath();
  v17[20] = 0x6F6973756C63634FLL;
  v17[21] = 0xE90000000000006ELL;
  v17[22] = swift_getKeyPath();
  strcpy((char *)v18, "Illumination");
  HIBYTE(v18[6]) = 0;
  v18[7] = -5120;
  uint64_t v19 = swift_getKeyPath();
  uint64_t v20 = 0x6E6F697373696D45;
  unint64_t v21 = 0xE800000000000000;
  uint64_t v22 = swift_getKeyPath();
  uint64_t v23 = 0x796C7069746C754DLL;
  unint64_t v24 = 0xE800000000000000;
  uint64_t v25 = swift_getKeyPath();
  uint64_t v26 = 1952542531;
  unint64_t v27 = 0xE400000000000000;
  uint64_t v28 = swift_getKeyPath();
  uint64_t v29 = 0x726F4E2074616F43;
  unint64_t v30 = 0xEB000000006C616DLL;
  uint64_t v31 = swift_getKeyPath();
  strcpy(v32, "Coat Roughness");
  v32[15] = -18;
  uint64_t v33 = swift_getKeyPath();
  uint64_t v34 = 0x6166727573627553;
  unint64_t v35 = 0xEA00000000006563;
  uint64_t v36 = swift_getKeyPath();
  unint64_t v37 = 0xD000000000000011;
  unint64_t v38 = 0x80000001B6F4DA00;
  uint64_t v39 = swift_getKeyPath();
  strcpy((char *)v40, "Displacement");
  HIBYTE(v40[6]) = 0;
  v40[7] = -5120;
  uint64_t v10 = 0;
  uint64_t v41 = swift_getKeyPath();
  do
  {
    uint64_t v11 = v17[v10 - 1];
    uint64_t v12 = v17[v10];
    swift_bridgeObjectRetain();
    swift_retain();
    uint64_t v13 = sub_1B6C22048(v11, v12);
    swift_bridgeObjectRelease();
    sub_1B6641C3C(v13);
    swift_release();
    v10 += 3;
  }
  while (v10 != 51);
  sub_1B6C27AE4();
  swift_arrayDestroy();
  return v42;
}

uint64_t sub_1B6C23214()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E96DA0;
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for VFXForceFieldType(0);
  *(void *)(v0 + 32) = 1701869908;
  *(void *)(v0 + 40) = 0xE400000000000000;
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 80) = 0x657669746341;
  *(void *)(v0 + 88) = 0xE600000000000000;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  uint64_t v6 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 128) = 0x6874676E65727453;
  *(void *)(v0 + 136) = 0xE800000000000000;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v6;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v7 = swift_getKeyPath();
  *(void *)(v0 + 176) = 0xD000000000000010;
  *(void *)(v0 + 184) = 0x80000001B6F4DB20;
  *(void *)(v0 + 192) = v7;
  *(void *)(v0 + 200) = v6;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  uint64_t v8 = swift_getKeyPath();
  sub_1B6395ED8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
  *(void *)(v0 + 224) = 0x74657366664FLL;
  *(void *)(v0 + 232) = 0xE600000000000000;
  *(void *)(v0 + 240) = v8;
  *(void *)(v0 + 248) = v9;
  *(void *)(v0 + 256) = 0;
  *(unsigned char *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  uint64_t v10 = swift_getKeyPath();
  type metadata accessor for VFXForceFieldShape(0);
  *(void *)(v0 + 272) = 0x6570616853;
  *(void *)(v0 + 280) = 0xE500000000000000;
  *(void *)(v0 + 288) = v10;
  *(void *)(v0 + 296) = v11;
  *(void *)(v0 + 304) = 0;
  *(unsigned char *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  uint64_t v12 = swift_getKeyPath();
  type metadata accessor for VFXForceFieldCullMode(0);
  *(void *)(v0 + 320) = 0x65646F4D6C6C7543;
  *(void *)(v0 + 328) = 0xE800000000000000;
  *(void *)(v0 + 336) = v12;
  *(void *)(v0 + 344) = v13;
  *(void *)(v0 + 352) = 0;
  *(unsigned char *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  uint64_t v14 = swift_getKeyPath();
  strcpy((char *)(v0 + 368), "Affect Group");
  *(unsigned char *)(v0 + 381) = 0;
  *(_WORD *)(v0 + 382) = -5120;
  uint64_t v15 = MEMORY[0x1E4FBC538];
  *(void *)(v0 + 384) = v14;
  *(void *)(v0 + 392) = v15;
  *(void *)(v0 + 400) = 0;
  *(unsigned char *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  return v0;
}

uint64_t sub_1B6C23484()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6EB4830;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 0x6E6F697463697246;
  *(void *)(v0 + 40) = 0xE800000000000000;
  uint64_t v2 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 80) = 0x7475746974736552;
  *(void *)(v0 + 88) = 0xEB000000006E6F69;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v2;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v4 = swift_getKeyPath();
  *(void *)(v0 + 128) = 0x676E69706D6144;
  *(void *)(v0 + 136) = 0xE700000000000000;
  *(void *)(v0 + 144) = v4;
  *(void *)(v0 + 152) = v2;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v5 = swift_getKeyPath();
  *(void *)(v0 + 176) = 0x2072616C75676E41;
  *(void *)(v0 + 184) = 0xEF676E69706D6144;
  *(void *)(v0 + 192) = v5;
  *(void *)(v0 + 200) = v2;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  uint64_t v6 = swift_getKeyPath();
  *(void *)(v0 + 224) = 0xD000000000000010;
  *(void *)(v0 + 232) = 0x80000001B6F4DA40;
  *(void *)(v0 + 240) = v6;
  *(void *)(v0 + 248) = v2;
  *(void *)(v0 + 256) = 0;
  *(unsigned char *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  uint64_t v7 = swift_getKeyPath();
  *(void *)(v0 + 272) = 0x656772616843;
  *(void *)(v0 + 280) = 0xE600000000000000;
  *(void *)(v0 + 288) = v7;
  *(void *)(v0 + 296) = v2;
  *(void *)(v0 + 304) = 0;
  *(unsigned char *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 320) = 0xD000000000000013;
  *(void *)(v0 + 328) = 0x80000001B6F4DA60;
  *(void *)(v0 + 336) = v8;
  *(void *)(v0 + 344) = v9;
  *(void *)(v0 + 352) = 0;
  *(unsigned char *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  uint64_t v10 = swift_getKeyPath();
  sub_1B6395ED8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
  uint64_t v12 = v11;
  strcpy((char *)(v0 + 368), "Center of Mass");
  *(unsigned char *)(v0 + 383) = -18;
  *(void *)(v0 + 384) = v10;
  *(void *)(v0 + 392) = v11;
  *(void *)(v0 + 400) = 0;
  *(unsigned char *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  uint64_t v13 = swift_getKeyPath();
  *(void *)(v0 + 416) = 0x797469636F6C6556;
  *(void *)(v0 + 424) = 0xEF726F7463614620;
  *(void *)(v0 + 432) = v13;
  *(void *)(v0 + 440) = v12;
  *(void *)(v0 + 448) = 0;
  *(unsigned char *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  uint64_t v14 = swift_getKeyPath();
  *(void *)(v0 + 464) = 0xD000000000000017;
  *(void *)(v0 + 472) = 0x80000001B6F4DA80;
  *(void *)(v0 + 480) = v14;
  *(void *)(v0 + 488) = v12;
  *(void *)(v0 + 496) = 0;
  *(unsigned char *)(v0 + 504) = 1;
  *(_WORD *)(v0 + 506) = 0;
  uint64_t v15 = swift_getKeyPath();
  *(void *)(v0 + 512) = 0xD00000000000001ELL;
  *(void *)(v0 + 520) = 0x80000001B6F4DAA0;
  *(void *)(v0 + 528) = v15;
  *(void *)(v0 + 536) = v2;
  *(void *)(v0 + 544) = 0;
  *(unsigned char *)(v0 + 552) = 1;
  *(_WORD *)(v0 + 554) = 0;
  uint64_t v16 = swift_getKeyPath();
  strcpy((char *)(v0 + 560), "Category group");
  *(unsigned char *)(v0 + 575) = -18;
  *(void *)(v0 + 576) = v16;
  uint64_t v17 = MEMORY[0x1E4FBC538];
  *(void *)(v0 + 584) = MEMORY[0x1E4FBC538];
  *(void *)(v0 + 592) = 0;
  *(unsigned char *)(v0 + 600) = 1;
  *(_WORD *)(v0 + 602) = 0;
  uint64_t v18 = swift_getKeyPath();
  *(void *)(v0 + 608) = 0x6F6973696C6C6F43;
  *(void *)(v0 + 616) = 0xEF70756F7267206ELL;
  *(void *)(v0 + 624) = v18;
  *(void *)(v0 + 632) = v17;
  *(void *)(v0 + 640) = 0;
  *(unsigned char *)(v0 + 648) = 1;
  *(_WORD *)(v0 + 650) = 0;
  uint64_t v19 = swift_getKeyPath();
  *(void *)(v0 + 656) = 0xD000000000000011;
  *(void *)(v0 + 664) = 0x80000001B6F4DAC0;
  *(void *)(v0 + 672) = v19;
  *(void *)(v0 + 680) = v17;
  *(void *)(v0 + 688) = 0;
  *(unsigned char *)(v0 + 696) = 1;
  *(_WORD *)(v0 + 698) = 0;
  uint64_t v20 = swift_getKeyPath();
  strcpy((char *)(v0 + 704), "Allow Resting");
  *(_WORD *)(v0 + 718) = -4864;
  *(void *)(v0 + 720) = v20;
  *(void *)(v0 + 728) = v9;
  *(void *)(v0 + 736) = 0;
  *(unsigned char *)(v0 + 744) = 1;
  *(_WORD *)(v0 + 746) = 0;
  uint64_t v21 = swift_getKeyPath();
  *(void *)(v0 + 752) = 0xD000000000000011;
  *(void *)(v0 + 760) = 0x80000001B6F4DAE0;
  *(void *)(v0 + 768) = v21;
  *(void *)(v0 + 776) = v2;
  *(void *)(v0 + 784) = 0;
  *(unsigned char *)(v0 + 792) = 1;
  *(_WORD *)(v0 + 794) = 0;
  uint64_t v22 = swift_getKeyPath();
  *(void *)(v0 + 800) = 0xD000000000000019;
  *(void *)(v0 + 808) = 0x80000001B6F4DB00;
  *(void *)(v0 + 816) = v22;
  *(void *)(v0 + 824) = v2;
  *(void *)(v0 + 832) = 0;
  *(unsigned char *)(v0 + 840) = 1;
  *(_WORD *)(v0 + 842) = 0;
  return v0;
}

uint64_t sub_1B6C23944()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6EB4810;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 0x64656C62616E45;
  *(void *)(v0 + 40) = 0xE700000000000000;
  uint64_t v2 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 80) = 0x7469736E65746E49;
  *(void *)(v0 + 88) = 0xE900000000000079;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  *(void *)(v0 + 128) = 0x6C6F687365726854;
  *(void *)(v0 + 136) = 0xE900000000000064;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v4;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v6 = swift_getKeyPath();
  *(void *)(v0 + 176) = 0xD000000000000014;
  *(void *)(v0 + 184) = 0x80000001B6F4D9A0;
  *(void *)(v0 + 192) = v6;
  *(void *)(v0 + 200) = v4;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  uint64_t v7 = swift_getKeyPath();
  uint64_t v8 = MEMORY[0x1E4FBB550];
  *(void *)(v0 + 224) = 0x6F69746172657449;
  *(void *)(v0 + 232) = 0xEA0000000000736ELL;
  *(void *)(v0 + 240) = v7;
  *(void *)(v0 + 248) = v8;
  *(void *)(v0 + 256) = 0;
  *(unsigned char *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  uint64_t v9 = swift_getKeyPath();
  *(void *)(v0 + 272) = 0xD000000000000010;
  *(void *)(v0 + 280) = 0x80000001B6F4D9C0;
  *(void *)(v0 + 288) = v9;
  *(void *)(v0 + 296) = v2;
  *(void *)(v0 + 304) = 0;
  *(unsigned char *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  uint64_t v10 = swift_getKeyPath();
  sub_1B6395ED8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
  strcpy((char *)(v0 + 320), "Color filter");
  *(unsigned char *)(v0 + 333) = 0;
  *(_WORD *)(v0 + 334) = -5120;
  *(void *)(v0 + 336) = v10;
  *(void *)(v0 + 344) = v11;
  *(void *)(v0 + 352) = 0;
  *(unsigned char *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  uint64_t v12 = swift_getKeyPath();
  *(void *)(v0 + 368) = 0x74736172746E6F43;
  *(void *)(v0 + 376) = 0xE800000000000000;
  *(void *)(v0 + 384) = v12;
  *(void *)(v0 + 392) = v4;
  *(void *)(v0 + 400) = 0;
  *(unsigned char *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  uint64_t v13 = swift_getKeyPath();
  *(void *)(v0 + 416) = 0x6974617275746153;
  *(void *)(v0 + 424) = 0xEA00000000006E6FLL;
  *(void *)(v0 + 432) = v13;
  *(void *)(v0 + 440) = v4;
  *(void *)(v0 + 448) = 0;
  *(unsigned char *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  return v0;
}

uint64_t sub_1B6C23BE8()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E85730;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 0x64656C62616E45;
  *(void *)(v0 + 40) = 0xE700000000000000;
  uint64_t v2 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 80) = 0x7469736E65746E49;
  *(void *)(v0 + 88) = 0xE900000000000079;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  *(void *)(v0 + 128) = 0x656C616353;
  *(void *)(v0 + 136) = 0xE500000000000000;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v4;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v6 = swift_getKeyPath();
  *(void *)(v0 + 176) = 0x6465726F6C6F43;
  *(void *)(v0 + 184) = 0xE700000000000000;
  *(void *)(v0 + 192) = v6;
  *(void *)(v0 + 200) = v2;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  return v0;
}

uint64_t sub_1B6C23D40()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E77D10;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 0x64656C62616E45;
  *(void *)(v0 + 40) = 0xE700000000000000;
  uint64_t v2 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  type metadata accessor for VFXCameraLensBlurFilterQuality(0);
  *(void *)(v0 + 80) = 0x74736172746E6F43;
  *(void *)(v0 + 88) = 0xE800000000000000;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  *(void *)(v0 + 128) = 0x737569646152;
  *(void *)(v0 + 136) = 0xE600000000000000;
  uint64_t v6 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v6;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  return v0;
}

uint64_t sub_1B6C23E68()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E76900;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 0x64656C62616E45;
  *(void *)(v0 + 40) = 0xE700000000000000;
  uint64_t v2 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 80) = 0x7469736E65746E49;
  *(void *)(v0 + 88) = 0xE900000000000079;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  *(void *)(v0 + 128) = 0x6870726F6D616E41;
  *(void *)(v0 + 136) = 0xEA00000000006369;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v4;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v6 = swift_getKeyPath();
  *(void *)(v0 + 176) = 0x7373656E74666F53;
  *(void *)(v0 + 184) = 0xE800000000000000;
  *(void *)(v0 + 192) = v6;
  *(void *)(v0 + 200) = v4;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  uint64_t v7 = swift_getKeyPath();
  *(void *)(v0 + 224) = 0x737569646152;
  *(void *)(v0 + 232) = 0xE600000000000000;
  *(void *)(v0 + 240) = v7;
  *(void *)(v0 + 248) = v4;
  *(void *)(v0 + 256) = 0;
  *(unsigned char *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  return v0;
}

uint64_t sub_1B6C23FF4()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E77D10;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 0x64656C62616E45;
  *(void *)(v0 + 40) = 0xE700000000000000;
  uint64_t v2 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 80) = 0x6874676E65727453;
  *(void *)(v0 + 88) = 0xE800000000000000;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  *(void *)(v0 + 128) = 0x7469736E65746E49;
  *(void *)(v0 + 136) = 0xE900000000000079;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v4;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  return v0;
}

uint64_t sub_1B6C24118()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E96DA0;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 0x64656C62616E45;
  *(void *)(v0 + 40) = 0xE700000000000000;
  uint64_t v2 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  type metadata accessor for VFXCameraToneMappingMode(0);
  *(void *)(v0 + 80) = 1701080909;
  *(void *)(v0 + 88) = 0xE400000000000000;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  uint64_t v6 = MEMORY[0x1E4FBB470];
  strcpy((char *)(v0 + 128), "Toe Strength");
  *(unsigned char *)(v0 + 141) = 0;
  *(_WORD *)(v0 + 142) = -5120;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v6;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v7 = swift_getKeyPath();
  *(void *)(v0 + 176) = 0x676E654C20656F54;
  *(void *)(v0 + 184) = 0xEA00000000006874;
  *(void *)(v0 + 192) = v7;
  *(void *)(v0 + 200) = v6;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  uint64_t v8 = swift_getKeyPath();
  *(void *)(v0 + 224) = 0xD000000000000011;
  *(void *)(v0 + 232) = 0x80000001B6F4D980;
  *(void *)(v0 + 240) = v8;
  *(void *)(v0 + 248) = v6;
  *(void *)(v0 + 256) = 0;
  *(unsigned char *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  uint64_t v9 = swift_getKeyPath();
  *(void *)(v0 + 272) = 0x7265646C756F6853;
  *(void *)(v0 + 280) = 0xEF6874676E654C20;
  *(void *)(v0 + 288) = v9;
  *(void *)(v0 + 296) = v6;
  *(void *)(v0 + 304) = 0;
  *(unsigned char *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  uint64_t v10 = swift_getKeyPath();
  strcpy((char *)(v0 + 320), "Shoulder Angle");
  *(unsigned char *)(v0 + 335) = -18;
  *(void *)(v0 + 336) = v10;
  *(void *)(v0 + 344) = v6;
  *(void *)(v0 + 352) = 0;
  *(unsigned char *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  uint64_t v11 = swift_getKeyPath();
  *(void *)(v0 + 368) = 0x616D6D6147;
  *(void *)(v0 + 376) = 0xE500000000000000;
  *(void *)(v0 + 384) = v11;
  *(void *)(v0 + 392) = v6;
  *(void *)(v0 + 400) = 0;
  *(unsigned char *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  return v0;
}

uint64_t sub_1B6C24354()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E8B500;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 0x64656C62616E45;
  *(void *)(v0 + 40) = 0xE700000000000000;
  uint64_t v2 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 80) = 0x6974617275746153;
  *(void *)(v0 + 88) = 0xEA00000000006E6FLL;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  *(void *)(v0 + 128) = 0x74736172746E6F43;
  *(void *)(v0 + 136) = 0xE800000000000000;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v4;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v6 = swift_getKeyPath();
  *(void *)(v0 + 176) = 0x74617265706D6554;
  *(void *)(v0 + 184) = 0xEB00000000657275;
  *(void *)(v0 + 192) = v6;
  *(void *)(v0 + 200) = v4;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  uint64_t v7 = swift_getKeyPath();
  *(void *)(v0 + 224) = 1953392980;
  *(void *)(v0 + 232) = 0xE400000000000000;
  *(void *)(v0 + 240) = v7;
  *(void *)(v0 + 248) = v4;
  *(void *)(v0 + 256) = 0;
  *(unsigned char *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  uint64_t v8 = swift_getKeyPath();
  sub_1B6395ED8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
  uint64_t v10 = v9;
  *(void *)(v0 + 272) = 0x6F6C6F437466694CLL;
  *(void *)(v0 + 280) = 0xE900000000000072;
  *(void *)(v0 + 288) = v8;
  *(void *)(v0 + 296) = v9;
  *(void *)(v0 + 304) = 0;
  *(unsigned char *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  uint64_t v11 = swift_getKeyPath();
  *(void *)(v0 + 320) = 0x7366664F7466694CLL;
  *(void *)(v0 + 328) = 0xEA00000000007465;
  *(void *)(v0 + 336) = v11;
  *(void *)(v0 + 344) = v4;
  *(void *)(v0 + 352) = 0;
  *(unsigned char *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  uint64_t v12 = swift_getKeyPath();
  *(void *)(v0 + 368) = 0x6F4320616D6D6147;
  *(void *)(v0 + 376) = 0xEB00000000726F6CLL;
  *(void *)(v0 + 384) = v12;
  *(void *)(v0 + 392) = v10;
  *(void *)(v0 + 400) = 0;
  *(unsigned char *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  uint64_t v13 = swift_getKeyPath();
  strcpy((char *)(v0 + 416), "Gamma Offset");
  *(unsigned char *)(v0 + 429) = 0;
  *(_WORD *)(v0 + 430) = -5120;
  *(void *)(v0 + 432) = v13;
  *(void *)(v0 + 440) = v4;
  *(void *)(v0 + 448) = 0;
  *(unsigned char *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  uint64_t v14 = swift_getKeyPath();
  *(void *)(v0 + 464) = 0x6C6F43206E696147;
  *(void *)(v0 + 472) = 0xEA0000000000726FLL;
  *(void *)(v0 + 480) = v14;
  *(void *)(v0 + 488) = v10;
  *(void *)(v0 + 496) = 0;
  *(unsigned char *)(v0 + 504) = 1;
  *(_WORD *)(v0 + 506) = 0;
  uint64_t v15 = swift_getKeyPath();
  *(void *)(v0 + 512) = 0x66664F206E696147;
  *(void *)(v0 + 520) = 0xEB00000000746573;
  *(void *)(v0 + 528) = v15;
  *(void *)(v0 + 536) = v4;
  *(void *)(v0 + 544) = 0;
  *(unsigned char *)(v0 + 552) = 1;
  *(_WORD *)(v0 + 554) = 0;
  return v0;
}

uint64_t sub_1B6C24670()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E85730;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 0x64656C62616E45;
  *(void *)(v0 + 40) = 0xE700000000000000;
  uint64_t v2 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 80) = 0x706F745346;
  *(void *)(v0 + 88) = 0xE500000000000000;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  uint64_t v6 = MEMORY[0x1E4FBB550];
  *(void *)(v0 + 128) = 0x6572757472657041;
  *(void *)(v0 + 136) = 0xEF736564616C6220;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v6;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v7 = swift_getKeyPath();
  strcpy((char *)(v0 + 176), "Sample count");
  *(unsigned char *)(v0 + 189) = 0;
  *(_WORD *)(v0 + 190) = -5120;
  *(void *)(v0 + 192) = v7;
  *(void *)(v0 + 200) = v6;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  return v0;
}

uint64_t sub_1B6C247DC()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E76900;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 0x64656C62616E45;
  *(void *)(v0 + 40) = 0xE700000000000000;
  uint64_t v2 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 80) = 0x737569646152;
  *(void *)(v0 + 88) = 0xE600000000000000;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  strcpy((char *)(v0 + 128), "Mask Enabled");
  *(unsigned char *)(v0 + 141) = 0;
  *(_WORD *)(v0 + 142) = -5120;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v2;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v6 = swift_getKeyPath();
  sub_1B6395ED8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
  *(void *)(v0 + 176) = 0x6E6543206B73614DLL;
  *(void *)(v0 + 184) = 0xEB00000000726574;
  *(void *)(v0 + 192) = v6;
  *(void *)(v0 + 200) = v7;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  uint64_t v8 = swift_getKeyPath();
  *(void *)(v0 + 224) = 0x646152206B73614DLL;
  *(void *)(v0 + 232) = 0xEB00000000737569;
  *(void *)(v0 + 240) = v8;
  *(void *)(v0 + 248) = v4;
  *(void *)(v0 + 256) = 0;
  *(unsigned char *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  return v0;
}

id sub_1B6C249A0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isEnabled);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C249D4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setEnabled_, *a1);
}

char *sub_1B6C249E8()
{
  return sel_radius;
}

char *sub_1B6C249F4()
{
  return sel_maskEnabled;
}

id sub_1B6C24A00@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_maskEnabled);
  *a2 = (_BYTE)result;
  return result;
}

char *sub_1B6C24A34()
{
  return sel_maskCenter;
}

char *sub_1B6C24A40()
{
  return sel_maskRadius;
}

char *sub_1B6C24A4C()
{
  return sel_camera;
}

id sub_1B6C24A58@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_camera);
  *a2 = result;
  return result;
}

id sub_1B6C24A94(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCamera_, *a1);
}

char *sub_1B6C24AA8()
{
  return sel_doughnutBokeh;
}

id sub_1B6C24AB4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_doughnutBokeh);
  *a2 = result;
  return result;
}

id sub_1B6C24AF0(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDoughnutBokeh_, *a1);
}

uint64_t sub_1B6C24B04()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6EB4830;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 0x64656C62616E45;
  *(void *)(v0 + 40) = 0xE700000000000000;
  uint64_t v2 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = MEMORY[0x1E4FBB550];
  strcpy((char *)(v0 + 80), "Sample Count");
  *(unsigned char *)(v0 + 93) = 0;
  *(_WORD *)(v0 + 94) = -5120;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  uint64_t v6 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 128) = 0x7469736E65746E49;
  *(void *)(v0 + 136) = 0xE900000000000079;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v6;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v7 = swift_getKeyPath();
  sub_1B6395ED8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
  uint64_t v9 = v8;
  *(void *)(v0 + 176) = 0x7265746E6543;
  *(void *)(v0 + 184) = 0xE600000000000000;
  *(void *)(v0 + 192) = v7;
  *(void *)(v0 + 200) = v8;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  uint64_t v10 = swift_getKeyPath();
  *(void *)(v0 + 224) = 0x5A206D6F7246;
  *(void *)(v0 + 232) = 0xE600000000000000;
  *(void *)(v0 + 240) = v10;
  *(void *)(v0 + 248) = v6;
  *(void *)(v0 + 256) = 0;
  *(unsigned char *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  uint64_t v11 = swift_getKeyPath();
  *(void *)(v0 + 272) = 0x676E41206D6F7246;
  *(void *)(v0 + 280) = 0xEA0000000000656CLL;
  *(void *)(v0 + 288) = v11;
  *(void *)(v0 + 296) = v6;
  *(void *)(v0 + 304) = 0;
  *(unsigned char *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  uint64_t v12 = swift_getKeyPath();
  *(void *)(v0 + 320) = 0x696853206D6F7246;
  *(void *)(v0 + 328) = 0xEA00000000007466;
  *(void *)(v0 + 336) = v12;
  *(void *)(v0 + 344) = v9;
  *(void *)(v0 + 352) = 0;
  *(unsigned char *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  uint64_t v13 = swift_getKeyPath();
  *(void *)(v0 + 368) = 1512075092;
  *(void *)(v0 + 376) = 0xE400000000000000;
  *(void *)(v0 + 384) = v13;
  *(void *)(v0 + 392) = v6;
  *(void *)(v0 + 400) = 0;
  *(unsigned char *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  uint64_t v14 = swift_getKeyPath();
  *(void *)(v0 + 416) = 0x656C676E41206F54;
  *(void *)(v0 + 424) = 0xE800000000000000;
  *(void *)(v0 + 432) = v14;
  *(void *)(v0 + 440) = v6;
  *(void *)(v0 + 448) = 0;
  *(unsigned char *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  uint64_t v15 = swift_getKeyPath();
  *(void *)(v0 + 464) = 0x7466696853206F54;
  *(void *)(v0 + 472) = 0xE800000000000000;
  *(void *)(v0 + 480) = v15;
  *(void *)(v0 + 488) = v9;
  *(void *)(v0 + 496) = 0;
  *(unsigned char *)(v0 + 504) = 1;
  *(_WORD *)(v0 + 506) = 0;
  uint64_t v16 = swift_getKeyPath();
  sub_1B6395ED8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
  uint64_t v18 = v17;
  *(void *)(v0 + 512) = 0x31726F6C6F43;
  *(void *)(v0 + 520) = 0xE600000000000000;
  *(void *)(v0 + 528) = v16;
  *(void *)(v0 + 536) = v17;
  *(void *)(v0 + 544) = 0;
  *(unsigned char *)(v0 + 552) = 1;
  *(_WORD *)(v0 + 554) = 0;
  uint64_t v19 = swift_getKeyPath();
  *(void *)(v0 + 560) = 0x32726F6C6F43;
  *(void *)(v0 + 568) = 0xE600000000000000;
  *(void *)(v0 + 576) = v19;
  *(void *)(v0 + 584) = v18;
  *(void *)(v0 + 592) = 0;
  *(unsigned char *)(v0 + 600) = 1;
  *(_WORD *)(v0 + 602) = 0;
  uint64_t v20 = swift_getKeyPath();
  *(void *)(v0 + 608) = 0x33726F6C6F43;
  *(void *)(v0 + 616) = 0xE600000000000000;
  *(void *)(v0 + 624) = v20;
  *(void *)(v0 + 632) = v18;
  *(void *)(v0 + 640) = 0;
  *(unsigned char *)(v0 + 648) = 1;
  *(_WORD *)(v0 + 650) = 0;
  uint64_t v21 = swift_getKeyPath();
  strcpy((char *)(v0 + 656), "Mask Enabled");
  *(unsigned char *)(v0 + 669) = 0;
  *(_WORD *)(v0 + 670) = -5120;
  *(void *)(v0 + 672) = v21;
  *(void *)(v0 + 680) = v2;
  *(void *)(v0 + 688) = 0;
  *(unsigned char *)(v0 + 696) = 1;
  *(_WORD *)(v0 + 698) = 0;
  uint64_t v22 = swift_getKeyPath();
  *(void *)(v0 + 704) = 0x6E6543206B73614DLL;
  *(void *)(v0 + 712) = 0xEB00000000726574;
  *(void *)(v0 + 720) = v22;
  *(void *)(v0 + 728) = v9;
  *(void *)(v0 + 736) = 0;
  *(unsigned char *)(v0 + 744) = 1;
  *(_WORD *)(v0 + 746) = 0;
  uint64_t v23 = swift_getKeyPath();
  *(void *)(v0 + 752) = 0x646152206B73614DLL;
  *(void *)(v0 + 760) = 0xEB00000000737569;
  *(void *)(v0 + 768) = v23;
  *(void *)(v0 + 776) = v6;
  *(void *)(v0 + 784) = 0;
  *(unsigned char *)(v0 + 792) = 1;
  *(_WORD *)(v0 + 794) = 0;
  uint64_t v24 = swift_getKeyPath();
  *(void *)(v0 + 800) = 0xD000000000000010;
  *(void *)(v0 + 808) = 0x80000001B6F4D960;
  *(void *)(v0 + 816) = v24;
  *(void *)(v0 + 824) = v6;
  *(void *)(v0 + 832) = 0;
  *(unsigned char *)(v0 + 840) = 1;
  *(_WORD *)(v0 + 842) = 0;
  return v0;
}

char *sub_1B6C24FA0()
{
  return sel_sampleCount;
}

id sub_1B6C24FAC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_sampleCount);
  *a2 = result;
  return result;
}

id sub_1B6C24FE0(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSampleCount_, *a1);
}

char *sub_1B6C24FF4()
{
  return sel_intensity;
}

char *sub_1B6C25000()
{
  return sel_center;
}

id sub_1B6C2500C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_center);
  *a2 = v4;
  return result;
}

id sub_1B6C25040(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCenter_, *a1);
}

char *sub_1B6C25054()
{
  return sel_fromZ;
}

id sub_1B6C25060@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fromZ);
  *a2 = v4;
  return result;
}

id sub_1B6C25094(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFromZ_, a3);
}

char *sub_1B6C250A8()
{
  return sel_fromAngle;
}

id sub_1B6C250B4@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fromAngle);
  *a2 = v4;
  return result;
}

id sub_1B6C250E8(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFromAngle_, a3);
}

char *sub_1B6C250FC()
{
  return sel_fromShift;
}

id sub_1B6C25108@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fromShift);
  *a2 = v4;
  return result;
}

id sub_1B6C2513C(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFromShift_, *a1);
}

void *sub_1B6C25150()
{
  return &sel_toZ;
}

id sub_1B6C2515C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = [*a1 toZ];
  *a2 = v4;
  return result;
}

id sub_1B6C25190(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setToZ_, a3);
}

char *sub_1B6C251A4()
{
  return sel_toAngle;
}

id sub_1B6C251B0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_toAngle);
  *a2 = v4;
  return result;
}

id sub_1B6C251E4(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setToAngle_, a3);
}

char *sub_1B6C251F8()
{
  return sel_toShift;
}

id sub_1B6C25204@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_toShift);
  *a2 = v4;
  return result;
}

id sub_1B6C25238(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setToShift_, *a1);
}

char *sub_1B6C2524C()
{
  return sel_color1;
}

id sub_1B6C25258@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_color1);
  *a2 = v4;
  return result;
}

id sub_1B6C2528C(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColor1_, *a1);
}

char *sub_1B6C252A0()
{
  return sel_color2;
}

id sub_1B6C252AC@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_color2);
  *a2 = v4;
  return result;
}

id sub_1B6C252E0(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColor2_, *a1);
}

char *sub_1B6C252F4()
{
  return sel_color3;
}

id sub_1B6C25300@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_color3);
  *a2 = v4;
  return result;
}

id sub_1B6C25334(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColor3_, *a1);
}

id sub_1B6C25348(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMaskEnabled_, *a1);
}

id sub_1B6C2535C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_maskCenter);
  *a2 = v4;
  return result;
}

id sub_1B6C25390(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMaskCenter_, *a1);
}

id sub_1B6C253A4@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_maskRadius);
  *a2 = v4;
  return result;
}

id sub_1B6C253D8(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setMaskRadius_, a3);
}

char *sub_1B6C253EC()
{
  return sel_unMultBlending;
}

id sub_1B6C253F8@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_unMultBlending);
  *a2 = v4;
  return result;
}

id sub_1B6C2542C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setUnMultBlending_, a3);
}

char *sub_1B6C25440()
{
  return sel_chromaticTransform;
}

id sub_1B6C2544C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_chromaticTransform);
  *a2 = result;
  return result;
}

id sub_1B6C25488(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setChromaticTransform_, *a1);
}

char *sub_1B6C2549C()
{
  return sel_filterQuality;
}

id sub_1B6C254A8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_filterQuality);
  *a2 = result;
  return result;
}

id sub_1B6C254DC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFilterQuality_, *a1);
}

id sub_1B6C254F0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_radius);
  *a2 = v4;
  return result;
}

id sub_1B6C25524(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setRadius_, a3);
}

char *sub_1B6C25538()
{
  return sel_lensBlur;
}

id sub_1B6C25544@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_lensBlur);
  *a2 = result;
  return result;
}

id sub_1B6C25580(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLensBlur_, *a1);
}

id sub_1B6C25594@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_intensity);
  *a2 = v4;
  return result;
}

id sub_1B6C255C8(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setIntensity_, a3);
}

id sub_1B6C255DC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_scale);
  *a2 = v4;
  return result;
}

id sub_1B6C25610(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setScale_, a3);
}

char *sub_1B6C25624()
{
  return sel_isColored;
}

id sub_1B6C25630@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isColored);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C25664(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColored_, *a1);
}

char *sub_1B6C25678()
{
  return sel_grain;
}

id sub_1B6C25684@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_grain);
  *a2 = result;
  return result;
}

id sub_1B6C256C0(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setGrain_, *a1);
}

char *sub_1B6C256D4()
{
  return sel_anamorphic;
}

id sub_1B6C256E0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_anamorphic);
  *a2 = v4;
  return result;
}

id sub_1B6C25714(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setAnamorphic_, a3);
}

char *sub_1B6C25728()
{
  return sel_softness;
}

id sub_1B6C25734@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_softness);
  *a2 = v4;
  return result;
}

id sub_1B6C25768(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setSoftness_, a3);
}

char *sub_1B6C2577C()
{
  return sel_vignetting;
}

id sub_1B6C25788@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_vignetting);
  *a2 = result;
  return result;
}

id sub_1B6C257C4(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setVignetting_, *a1);
}

char *sub_1B6C257D8()
{
  return sel_motionBlur;
}

id sub_1B6C257E4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_motionBlur);
  *a2 = result;
  return result;
}

id sub_1B6C25820(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMotionBlur_, *a1);
}

char *sub_1B6C25834()
{
  return sel_strength;
}

id sub_1B6C25840@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_strength);
  *a2 = v4;
  return result;
}

id sub_1B6C25874(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setStrength_, a3);
}

char *sub_1B6C25888()
{
  return sel_colorFringe;
}

id sub_1B6C25894@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_colorFringe);
  *a2 = result;
  return result;
}

id sub_1B6C258D0(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColorFringe_, *a1);
}

char *sub_1B6C258E4()
{
  return sel_mode;
}

id sub_1B6C258F0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_mode);
  *a2 = result;
  return result;
}

id sub_1B6C25924(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMode_, *a1);
}

char *sub_1B6C25938()
{
  return sel_toeStrength;
}

id sub_1B6C25944@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_toeStrength);
  *a2 = v4;
  return result;
}

id sub_1B6C25978(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setToeStrength_, a3);
}

char *sub_1B6C2598C()
{
  return sel_toeLength;
}

id sub_1B6C25998@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_toeLength);
  *a2 = v4;
  return result;
}

id sub_1B6C259CC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setToeLength_, a3);
}

char *sub_1B6C259E0()
{
  return sel_shoulderStrength;
}

id sub_1B6C259EC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_shoulderStrength);
  *a2 = v4;
  return result;
}

id sub_1B6C25A20(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setShoulderStrength_, a3);
}

char *sub_1B6C25A34()
{
  return sel_shoulderLength;
}

id sub_1B6C25A40@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_shoulderLength);
  *a2 = v4;
  return result;
}

id sub_1B6C25A74(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setShoulderLength_, a3);
}

char *sub_1B6C25A88()
{
  return sel_shoulderAngle;
}

id sub_1B6C25A94@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_shoulderAngle);
  *a2 = v4;
  return result;
}

id sub_1B6C25AC8(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setShoulderAngle_, a3);
}

char *sub_1B6C25ADC()
{
  return sel_gamma;
}

id sub_1B6C25AE8@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_gamma);
  *a2 = v4;
  return result;
}

id sub_1B6C25B1C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setGamma_, a3);
}

char *sub_1B6C25B30()
{
  return sel_toneMapping;
}

id sub_1B6C25B3C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_toneMapping);
  *a2 = result;
  return result;
}

id sub_1B6C25B78(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setToneMapping_, *a1);
}

char *sub_1B6C25B8C()
{
  return sel_value;
}

id sub_1B6C25B98@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_value);
  *a2 = v4;
  return result;
}

id sub_1B6C25BCC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setValue_, a3);
}

char *sub_1B6C25BE0()
{
  return sel_exposure;
}

id sub_1B6C25BEC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_exposure);
  *a2 = result;
  return result;
}

id sub_1B6C25C28(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setExposure_, *a1);
}

char *sub_1B6C25C3C()
{
  return sel_saturation;
}

id sub_1B6C25C48@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_saturation);
  *a2 = v4;
  return result;
}

id sub_1B6C25C7C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setSaturation_, a3);
}

char *sub_1B6C25C90()
{
  return sel_contrast;
}

id sub_1B6C25C9C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_contrast);
  *a2 = v4;
  return result;
}

id sub_1B6C25CD0(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setContrast_, a3);
}

char *sub_1B6C25CE4()
{
  return sel_whiteBalanceTemperature;
}

id sub_1B6C25CF0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_whiteBalanceTemperature);
  *a2 = v4;
  return result;
}

id sub_1B6C25D24(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setWhiteBalanceTemperature_, a3);
}

char *sub_1B6C25D38()
{
  return sel_whiteBalanceTint;
}

id sub_1B6C25D44@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_whiteBalanceTint);
  *a2 = v4;
  return result;
}

id sub_1B6C25D78(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setWhiteBalanceTint_, a3);
}

char *sub_1B6C25D8C()
{
  return sel_liftColor;
}

id sub_1B6C25D98@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_liftColor);
  *a2 = v4;
  return result;
}

id sub_1B6C25DCC(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLiftColor_, *a1);
}

char *sub_1B6C25DE0()
{
  return sel_liftOffset;
}

id sub_1B6C25DEC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_liftOffset);
  *a2 = v4;
  return result;
}

id sub_1B6C25E20(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setLiftOffset_, a3);
}

char *sub_1B6C25E34()
{
  return sel_gammaColor;
}

id sub_1B6C25E40@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_gammaColor);
  *a2 = v4;
  return result;
}

id sub_1B6C25E74(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setGammaColor_, *a1);
}

char *sub_1B6C25E88()
{
  return sel_gammaOffset;
}

id sub_1B6C25E94@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_gammaOffset);
  *a2 = v4;
  return result;
}

id sub_1B6C25EC8(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setGammaOffset_, a3);
}

char *sub_1B6C25EDC()
{
  return sel_gainColor;
}

id sub_1B6C25EE8@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_gainColor);
  *a2 = v4;
  return result;
}

id sub_1B6C25F1C(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setGainColor_, *a1);
}

char *sub_1B6C25F30()
{
  return sel_gainOffset;
}

id sub_1B6C25F3C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_gainOffset);
  *a2 = v4;
  return result;
}

id sub_1B6C25F70(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setGainOffset_, a3);
}

char *sub_1B6C25F84()
{
  return sel_colorGrading;
}

id sub_1B6C25F90@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_colorGrading);
  *a2 = result;
  return result;
}

id sub_1B6C25FCC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColorGrading_, *a1);
}

char *sub_1B6C25FE0()
{
  return sel_fStop;
}

id sub_1B6C25FEC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fStop);
  *a2 = v4;
  return result;
}

id sub_1B6C26020(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFStop_, a3);
}

char *sub_1B6C26034()
{
  return sel_apertureBladeCount;
}

id sub_1B6C26040@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_apertureBladeCount);
  *a2 = result;
  return result;
}

id sub_1B6C26074(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setApertureBladeCount_, *a1);
}

char *sub_1B6C26088()
{
  return sel_focalBlurSampleCount;
}

id sub_1B6C26094@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_focalBlurSampleCount);
  *a2 = result;
  return result;
}

id sub_1B6C260C8(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFocalBlurSampleCount_, *a1);
}

char *sub_1B6C260DC()
{
  return sel_depthOfField;
}

id sub_1B6C260E8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_depthOfField);
  *a2 = result;
  return result;
}

id sub_1B6C26124(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDepthOfField_, *a1);
}

char *sub_1B6C26138()
{
  return sel_threshold;
}

id sub_1B6C26144@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_threshold);
  *a2 = v4;
  return result;
}

id sub_1B6C26178(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setThreshold_, a3);
}

char *sub_1B6C2618C()
{
  return sel_thresholdSmoothness;
}

id sub_1B6C26198@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_thresholdSmoothness);
  *a2 = v4;
  return result;
}

id sub_1B6C261CC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setThresholdSmoothness_, a3);
}

char *sub_1B6C261E0()
{
  return sel_iterationCount;
}

id sub_1B6C261EC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_iterationCount);
  *a2 = result;
  return result;
}

id sub_1B6C26220(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setIterationCount_, *a1);
}

char *sub_1B6C26234()
{
  return sel_useHighQuality;
}

id sub_1B6C26240@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_useHighQuality);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C26274(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setUseHighQuality_, *a1);
}

char *sub_1B6C26288()
{
  return sel_colorFilter;
}

id sub_1B6C26294@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_colorFilter);
  *a2 = v4;
  return result;
}

id sub_1B6C262C8(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColorFilter_, *a1);
}

char *sub_1B6C262DC()
{
  return sel_bloom;
}

id sub_1B6C262E8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_bloom);
  *a2 = result;
  return result;
}

id sub_1B6C26324(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setBloom_, *a1);
}

uint64_t sub_1B6C26338()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6EB4810;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 0x656C6269736956;
  *(void *)(v0 + 40) = 0xE700000000000000;
  uint64_t v2 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  sub_1B6395ED8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
  uint64_t v5 = v4;
  *(void *)(v0 + 80) = 0x6E6F697469736F50;
  *(void *)(v0 + 88) = 0xE800000000000000;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v6 = swift_getKeyPath();
  *(void *)(v0 + 128) = 0x72656C7545;
  *(void *)(v0 + 136) = 0xE500000000000000;
  *(void *)(v0 + 144) = v6;
  *(void *)(v0 + 152) = v5;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v7 = swift_getKeyPath();
  *(void *)(v0 + 176) = 0x656C616353;
  *(void *)(v0 + 184) = 0xE500000000000000;
  *(void *)(v0 + 192) = v7;
  *(void *)(v0 + 200) = v5;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  uint64_t v8 = swift_getKeyPath();
  type metadata accessor for simd_float4x4(0);
  *(void *)(v0 + 224) = 0x725420646C726F57;
  *(void *)(v0 + 232) = 0xEF6D726F66736E61;
  *(void *)(v0 + 240) = v8;
  *(void *)(v0 + 248) = v9;
  *(void *)(v0 + 256) = 0;
  *(unsigned char *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  uint64_t v10 = swift_getKeyPath();
  uint64_t v11 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 272) = 0x7974696361704FLL;
  *(void *)(v0 + 280) = 0xE700000000000000;
  *(void *)(v0 + 288) = v10;
  *(void *)(v0 + 296) = v11;
  *(void *)(v0 + 304) = 0;
  *(unsigned char *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = MEMORY[0x1E4FBB550];
  *(void *)(v0 + 320) = 0x726564724FLL;
  *(void *)(v0 + 328) = 0xE500000000000000;
  *(void *)(v0 + 336) = v12;
  *(void *)(v0 + 344) = v13;
  *(void *)(v0 + 352) = 0;
  *(unsigned char *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  uint64_t v14 = swift_getKeyPath();
  strcpy((char *)(v0 + 368), "Casts Shadow");
  *(unsigned char *)(v0 + 381) = 0;
  *(_WORD *)(v0 + 382) = -5120;
  *(void *)(v0 + 384) = v14;
  *(void *)(v0 + 392) = v2;
  *(void *)(v0 + 400) = 0;
  *(unsigned char *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  uint64_t v15 = swift_getKeyPath();
  *(void *)(v0 + 416) = 0x70756F7247;
  *(void *)(v0 + 424) = 0xE500000000000000;
  uint64_t v16 = MEMORY[0x1E4FBC538];
  *(void *)(v0 + 432) = v15;
  *(void *)(v0 + 440) = v16;
  *(void *)(v0 + 448) = 0;
  *(unsigned char *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  return v0;
}

uint64_t sub_1B6C265DC()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6EB4830;
  uint64_t KeyPath = swift_getKeyPath();
  type metadata accessor for VFXLightType(0);
  *(void *)(v0 + 32) = 1701869908;
  *(void *)(v0 + 40) = 0xE400000000000000;
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 80) = 0x726F6C6F43;
  *(void *)(v0 + 88) = 0xE500000000000000;
  uint64_t v4 = MEMORY[0x1E4FBC840] + 8;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  uint64_t v6 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 128) = 0x7469736E65746E49;
  *(void *)(v0 + 136) = 0xE900000000000079;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v6;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v7 = swift_getKeyPath();
  *(void *)(v0 + 176) = 0x74617265706D6554;
  *(void *)(v0 + 184) = 0xEB00000000657275;
  *(void *)(v0 + 192) = v7;
  *(void *)(v0 + 200) = v6;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  uint64_t v8 = swift_getKeyPath();
  uint64_t v9 = MEMORY[0x1E4FBC538];
  *(void *)(v0 + 224) = 0x70756F7247;
  *(void *)(v0 + 232) = 0xE500000000000000;
  *(void *)(v0 + 240) = v8;
  *(void *)(v0 + 248) = v9;
  *(void *)(v0 + 256) = 0;
  *(unsigned char *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  uint64_t v10 = swift_getKeyPath();
  *(void *)(v0 + 272) = 0x65636E6174736944;
  *(void *)(v0 + 280) = 0xE800000000000000;
  *(void *)(v0 + 288) = v10;
  *(void *)(v0 + 296) = v6;
  *(void *)(v0 + 304) = 0;
  *(unsigned char *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  uint64_t v11 = swift_getKeyPath();
  uint64_t v12 = MEMORY[0x1E4FBB390];
  strcpy((char *)(v0 + 320), "Enable shadows");
  *(unsigned char *)(v0 + 335) = -18;
  *(void *)(v0 + 336) = v11;
  *(void *)(v0 + 344) = v12;
  *(void *)(v0 + 352) = 0;
  *(unsigned char *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  uint64_t v13 = swift_getKeyPath();
  *(void *)(v0 + 368) = 0x6E412072656E6E49;
  *(void *)(v0 + 376) = 0xEB00000000656C67;
  *(void *)(v0 + 384) = v13;
  *(void *)(v0 + 392) = v6;
  *(void *)(v0 + 400) = 0;
  *(unsigned char *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  uint64_t v14 = swift_getKeyPath();
  *(void *)(v0 + 416) = 0x6E4120726574754FLL;
  *(void *)(v0 + 424) = 0xEB00000000656C67;
  *(void *)(v0 + 432) = v14;
  *(void *)(v0 + 440) = v6;
  *(void *)(v0 + 448) = 0;
  *(unsigned char *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  uint64_t v15 = swift_getKeyPath();
  sub_1B62F7FA0(0, (unint64_t *)&qword_1EB980F60, v4, MEMORY[0x1E4FBB718]);
  strcpy((char *)(v0 + 464), "Gobo Contents");
  *(_WORD *)(v0 + 478) = -4864;
  *(void *)(v0 + 480) = v15;
  *(void *)(v0 + 488) = v16;
  *(void *)(v0 + 496) = 0;
  *(unsigned char *)(v0 + 504) = 1;
  *(_WORD *)(v0 + 506) = 0;
  uint64_t v17 = swift_getKeyPath();
  sub_1B6395ED8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
  *(void *)(v0 + 512) = 0x73746E65747845;
  *(void *)(v0 + 520) = 0xE700000000000000;
  *(void *)(v0 + 528) = v17;
  *(void *)(v0 + 536) = v18;
  *(void *)(v0 + 544) = 0;
  *(unsigned char *)(v0 + 552) = 1;
  *(_WORD *)(v0 + 554) = 0;
  uint64_t v19 = swift_getKeyPath();
  *(void *)(v0 + 560) = 0x7241207377617244;
  *(void *)(v0 + 568) = 0xEA00000000006165;
  *(void *)(v0 + 576) = v19;
  *(void *)(v0 + 584) = v12;
  *(void *)(v0 + 592) = 0;
  *(unsigned char *)(v0 + 600) = 1;
  *(_WORD *)(v0 + 602) = 0;
  uint64_t v20 = swift_getKeyPath();
  strcpy((char *)(v0 + 608), "Double Sided");
  *(unsigned char *)(v0 + 621) = 0;
  *(_WORD *)(v0 + 622) = -5120;
  *(void *)(v0 + 624) = v20;
  *(void *)(v0 + 632) = v12;
  *(void *)(v0 + 640) = 0;
  *(unsigned char *)(v0 + 648) = 1;
  *(_WORD *)(v0 + 650) = 0;
  uint64_t v21 = swift_getKeyPath();
  sub_1B6C28F54();
  *(void *)(v0 + 656) = 0x656C69666F7250;
  *(void *)(v0 + 664) = 0xE700000000000000;
  *(void *)(v0 + 672) = v21;
  *(void *)(v0 + 680) = v22;
  *(void *)(v0 + 688) = 0;
  *(unsigned char *)(v0 + 696) = 1;
  *(_WORD *)(v0 + 698) = 0;
  uint64_t v23 = swift_getKeyPath();
  type metadata accessor for VFXLightProbeType(0);
  *(void *)(v0 + 704) = 0x79542065626F7250;
  *(void *)(v0 + 712) = 0xEA00000000006570;
  *(void *)(v0 + 720) = v23;
  *(void *)(v0 + 728) = v24;
  *(void *)(v0 + 736) = 0;
  *(unsigned char *)(v0 + 744) = 1;
  *(_WORD *)(v0 + 746) = 0;
  uint64_t v25 = swift_getKeyPath();
  *(void *)(v0 + 752) = 0x654E2065626F7250;
  *(void *)(v0 + 760) = 0xEA00000000007261;
  *(void *)(v0 + 768) = v25;
  *(void *)(v0 + 776) = v6;
  *(void *)(v0 + 784) = 0;
  *(unsigned char *)(v0 + 792) = 1;
  *(_WORD *)(v0 + 794) = 0;
  uint64_t v26 = swift_getKeyPath();
  *(void *)(v0 + 800) = 0x61462065626F7250;
  *(void *)(v0 + 808) = 0xE900000000000072;
  *(void *)(v0 + 816) = v26;
  *(void *)(v0 + 824) = v6;
  *(void *)(v0 + 832) = 0;
  *(unsigned char *)(v0 + 840) = 1;
  *(_WORD *)(v0 + 842) = 0;
  return v0;
}

uint64_t sub_1B6C26AC0()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E96DA0;
  uint64_t KeyPath = swift_getKeyPath();
  sub_1B6395ED8(0, (unint64_t *)&qword_1EB980EB0, MEMORY[0x1E4FBC2A8]);
  *(void *)(v0 + 32) = 0x79746976617247;
  *(void *)(v0 + 40) = 0xE700000000000000;
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  uint64_t v4 = MEMORY[0x1E4FBB470];
  *(void *)(v0 + 80) = 0x6465657053;
  *(void *)(v0 + 88) = 0xE500000000000000;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v4;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v5 = swift_getKeyPath();
  strcpy((char *)(v0 + 128), "Start Distance");
  *(unsigned char *)(v0 + 143) = -18;
  *(void *)(v0 + 144) = v5;
  *(void *)(v0 + 152) = v4;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v6 = swift_getKeyPath();
  strcpy((char *)(v0 + 176), "End Distance");
  *(unsigned char *)(v0 + 189) = 0;
  *(_WORD *)(v0 + 190) = -5120;
  *(void *)(v0 + 192) = v6;
  *(void *)(v0 + 200) = v4;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  uint64_t v7 = swift_getKeyPath();
  uint64_t v8 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 224) = 0xD00000000000001FLL;
  *(void *)(v0 + 232) = 0x80000001B6F4DB40;
  *(void *)(v0 + 240) = v7;
  *(void *)(v0 + 248) = v8;
  *(void *)(v0 + 256) = 0;
  *(unsigned char *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  uint64_t v9 = swift_getKeyPath();
  uint64_t v10 = MEMORY[0x1E4FBC840] + 8;
  sub_1B62F7FA0(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  uint64_t v12 = v11;
  *(void *)(v0 + 272) = 0xD000000000000014;
  *(void *)(v0 + 280) = 0x80000001B6F4DB60;
  *(void *)(v0 + 288) = v9;
  *(void *)(v0 + 296) = v11;
  *(void *)(v0 + 304) = 0;
  *(unsigned char *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  uint64_t v13 = swift_getKeyPath();
  *(void *)(v0 + 320) = 0x756F72676B636142;
  *(void *)(v0 + 328) = 0xEA0000000000646ELL;
  *(void *)(v0 + 336) = v13;
  *(void *)(v0 + 344) = v12;
  *(void *)(v0 + 352) = 0;
  *(unsigned char *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  uint64_t v14 = swift_getKeyPath();
  *(void *)(v0 + 368) = 0x726F6C6F43;
  *(void *)(v0 + 376) = 0xE500000000000000;
  *(void *)(v0 + 384) = v14;
  *(void *)(v0 + 392) = v10;
  *(void *)(v0 + 400) = 0;
  *(unsigned char *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  return v0;
}

uint64_t sub_1B6C26D6C()
{
  sub_1B62F7FA0(0, &qword_1E9DD2050, (uint64_t)&type metadata for ScriptKeyPath, MEMORY[0x1E4FBBE00]);
  uint64_t v0 = swift_allocObject();
  *(_OWORD *)(v0 + 16) = xmmword_1B6E8B500;
  uint64_t KeyPath = swift_getKeyPath();
  *(void *)(v0 + 32) = 1701869908;
  *(void *)(v0 + 40) = 0xE400000000000000;
  uint64_t v2 = MEMORY[0x1E4FBB390];
  *(void *)(v0 + 48) = KeyPath;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + 64) = 0;
  *(unsigned char *)(v0 + 72) = 1;
  *(_WORD *)(v0 + 74) = 0;
  uint64_t v3 = swift_getKeyPath();
  *(void *)(v0 + 80) = 5391432;
  *(void *)(v0 + 88) = 0xE300000000000000;
  *(void *)(v0 + 96) = v3;
  *(void *)(v0 + 104) = v2;
  *(void *)(v0 + 112) = 0;
  *(unsigned char *)(v0 + 120) = 1;
  *(_WORD *)(v0 + 122) = 0;
  uint64_t v4 = swift_getKeyPath();
  uint64_t v5 = MEMORY[0x1E4FBB470];
  strcpy((char *)(v0 + 128), "Focal length");
  *(unsigned char *)(v0 + 141) = 0;
  *(_WORD *)(v0 + 142) = -5120;
  *(void *)(v0 + 144) = v4;
  *(void *)(v0 + 152) = v5;
  *(void *)(v0 + 160) = 0;
  *(unsigned char *)(v0 + 168) = 1;
  *(_WORD *)(v0 + 170) = 0;
  uint64_t v6 = swift_getKeyPath();
  *(void *)(v0 + 176) = 0xD000000000000014;
  *(void *)(v0 + 184) = 0x80000001B6F4D9E0;
  *(void *)(v0 + 192) = v6;
  *(void *)(v0 + 200) = v5;
  *(void *)(v0 + 208) = 0;
  *(unsigned char *)(v0 + 216) = 1;
  *(_WORD *)(v0 + 218) = 0;
  uint64_t v7 = swift_getKeyPath();
  strcpy((char *)(v0 + 224), "Sensor height");
  *(_WORD *)(v0 + 238) = -4864;
  *(void *)(v0 + 240) = v7;
  *(void *)(v0 + 248) = v5;
  *(void *)(v0 + 256) = 0;
  *(unsigned char *)(v0 + 264) = 1;
  *(_WORD *)(v0 + 266) = 0;
  uint64_t v8 = swift_getKeyPath();
  type metadata accessor for VFXCameraFillMode(0);
  *(void *)(v0 + 272) = 0x646F4D206C6C6946;
  *(void *)(v0 + 280) = 0xE900000000000065;
  *(void *)(v0 + 288) = v8;
  *(void *)(v0 + 296) = v9;
  *(void *)(v0 + 304) = 0;
  *(unsigned char *)(v0 + 312) = 1;
  *(_WORD *)(v0 + 314) = 0;
  uint64_t v10 = swift_getKeyPath();
  *(void *)(v0 + 320) = 1918985550;
  *(void *)(v0 + 328) = 0xE400000000000000;
  *(void *)(v0 + 336) = v10;
  *(void *)(v0 + 344) = v5;
  *(void *)(v0 + 352) = 0;
  *(unsigned char *)(v0 + 360) = 1;
  *(_WORD *)(v0 + 362) = 0;
  uint64_t v11 = swift_getKeyPath();
  *(void *)(v0 + 368) = 7496006;
  *(void *)(v0 + 376) = 0xE300000000000000;
  *(void *)(v0 + 384) = v11;
  *(void *)(v0 + 392) = v5;
  *(void *)(v0 + 400) = 0;
  *(unsigned char *)(v0 + 408) = 1;
  *(_WORD *)(v0 + 410) = 0;
  uint64_t v12 = swift_getKeyPath();
  uint64_t v13 = MEMORY[0x1E4FBC538];
  *(void *)(v0 + 416) = 0x70756F7247;
  *(void *)(v0 + 424) = 0xE500000000000000;
  *(void *)(v0 + 432) = v12;
  *(void *)(v0 + 440) = v13;
  *(void *)(v0 + 448) = 0;
  *(unsigned char *)(v0 + 456) = 1;
  *(_WORD *)(v0 + 458) = 0;
  uint64_t v14 = swift_getKeyPath();
  sub_1B6395ED8(0, &qword_1EB980E90, MEMORY[0x1E4FBC280]);
  *(void *)(v0 + 464) = 0x66666F206D6C6946;
  *(void *)(v0 + 472) = 0xEB00000000746573;
  *(void *)(v0 + 480) = v14;
  *(void *)(v0 + 488) = v15;
  *(void *)(v0 + 496) = 0;
  *(unsigned char *)(v0 + 504) = 1;
  *(_WORD *)(v0 + 506) = 0;
  uint64_t v16 = swift_getKeyPath();
  strcpy((char *)(v0 + 512), "Focus Distance");
  *(unsigned char *)(v0 + 527) = -18;
  *(void *)(v0 + 528) = v16;
  *(void *)(v0 + 536) = v5;
  *(void *)(v0 + 544) = 0;
  *(unsigned char *)(v0 + 552) = 1;
  *(_WORD *)(v0 + 554) = 0;
  return v0;
}

char *sub_1B6C2707C()
{
  return sel_usesOrthographicProjection;
}

id sub_1B6C27088@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_usesOrthographicProjection);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C270BC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setUsesOrthographicProjection_, *a1);
}

char *sub_1B6C270D0()
{
  return sel_wantsHDR;
}

id sub_1B6C270DC@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_wantsHDR);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C27110(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWantsHDR_, *a1);
}

char *sub_1B6C27124()
{
  return sel_focalLength;
}

id sub_1B6C27130@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_focalLength);
  *a2 = v4;
  return result;
}

id sub_1B6C27164(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFocalLength_, a3);
}

char *sub_1B6C27178()
{
  return sel_fieldOfView;
}

id sub_1B6C27184@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fieldOfView);
  *a2 = v4;
  return result;
}

id sub_1B6C271B8(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFieldOfView_, a3);
}

char *sub_1B6C271CC()
{
  return sel_sensorHeight;
}

id sub_1B6C271D8@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_sensorHeight);
  *a2 = v4;
  return result;
}

id sub_1B6C2720C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setSensorHeight_, a3);
}

char *sub_1B6C27220()
{
  return sel_fillMode;
}

id sub_1B6C2722C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fillMode);
  *a2 = result;
  return result;
}

id sub_1B6C27260(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFillMode_, *a1);
}

char *sub_1B6C27274()
{
  return sel_zNear;
}

id sub_1B6C27280@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_zNear);
  *a2 = v4;
  return result;
}

id sub_1B6C272B4(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setZNear_, a3);
}

char *sub_1B6C272C8()
{
  return sel_zFar;
}

id sub_1B6C272D4@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_zFar);
  *a2 = v4;
  return result;
}

id sub_1B6C27308(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setZFar_, a3);
}

char *sub_1B6C2731C()
{
  return sel_categoryBitMask;
}

id sub_1B6C27328@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_categoryBitMask);
  *a2 = result;
  return result;
}

id sub_1B6C2735C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCategoryBitMask_, *a1);
}

char *sub_1B6C27370()
{
  return sel_filmOffset;
}

id sub_1B6C2737C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_filmOffset);
  *a2 = v4;
  return result;
}

id sub_1B6C273B0(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFilmOffset_, *a1);
}

char *sub_1B6C273C4()
{
  return sel_focusDistance;
}

id sub_1B6C273D0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_focusDistance);
  *a2 = v4;
  return result;
}

id sub_1B6C27404(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFocusDistance_, a3);
}

void sub_1B6C27418(uint64_t a1@<X8>)
{
}

uint64_t sub_1B6C27444()
{
  return 16;
}

uint64_t sub_1B6C27450()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C27460(void *a1)
{
  return MEMORY[0x1F4183B40](*a1, a1[1]);
}

__n128 sub_1B6C2746C(__n128 *a1, __n128 *a2)
{
  __n128 result = *a1;
  *a2 = *a1;
  return result;
}

char *sub_1B6C27478()
{
  return sel_shadingModel;
}

id sub_1B6C27484@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_shadingModel);
  *a2 = result;
  return result;
}

id sub_1B6C274B8(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setShadingModel_, *a1);
}

char *sub_1B6C274CC()
{
  return sel_alphaCutoff;
}

id sub_1B6C274D8@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_alphaCutoff);
  *a2 = v4;
  return result;
}

id sub_1B6C2750C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setAlphaCutoff_, a3);
}

char *sub_1B6C27520()
{
  return sel_colorBufferWriteMask;
}

id sub_1B6C2752C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_colorBufferWriteMask);
  *a2 = result;
  return result;
}

id sub_1B6C27560(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setColorBufferWriteMask_, *a1);
}

char *sub_1B6C27574()
{
  return sel_writesToDepthBuffer;
}

id sub_1B6C27580@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_writesToDepthBuffer);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C275B4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWritesToDepthBuffer_, *a1);
}

char *sub_1B6C275C8()
{
  return sel_readsFromDepthBuffer;
}

id sub_1B6C275D4@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_readsFromDepthBuffer);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C27608(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setReadsFromDepthBuffer_, *a1);
}

char *sub_1B6C2761C()
{
  return sel_diffuse;
}

id sub_1B6C27628@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_diffuse);
  *a2 = result;
  return result;
}

char *sub_1B6C27664()
{
  return sel_metalness;
}

id sub_1B6C27670@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_metalness);
  *a2 = result;
  return result;
}

char *sub_1B6C276AC()
{
  return sel_roughness;
}

id sub_1B6C276B8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_roughness);
  *a2 = result;
  return result;
}

char *sub_1B6C276F4()
{
  return sel_specular;
}

id sub_1B6C27700@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_specular);
  *a2 = result;
  return result;
}

char *sub_1B6C2773C()
{
  return sel_normal;
}

id sub_1B6C27748@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_normal);
  *a2 = result;
  return result;
}

char *sub_1B6C27784()
{
  return sel_reflective;
}

id sub_1B6C27790@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_reflective);
  *a2 = result;
  return result;
}

char *sub_1B6C277CC()
{
  return sel_transparent;
}

id sub_1B6C277D8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_transparent);
  *a2 = result;
  return result;
}

char *sub_1B6C27814()
{
  return sel_ambientOcclusion;
}

id sub_1B6C27820@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_ambientOcclusion);
  *a2 = result;
  return result;
}

char *sub_1B6C2785C()
{
  return sel_selfIllumination;
}

id sub_1B6C27868@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_selfIllumination);
  *a2 = result;
  return result;
}

char *sub_1B6C278A4()
{
  return sel_emission;
}

id sub_1B6C278B0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_emission);
  *a2 = result;
  return result;
}

char *sub_1B6C278EC()
{
  return sel_multiply;
}

id sub_1B6C278F8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_multiply);
  *a2 = result;
  return result;
}

char *sub_1B6C27934()
{
  return sel_clearCoat;
}

id sub_1B6C27940@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_clearCoat);
  *a2 = result;
  return result;
}

char *sub_1B6C2797C()
{
  return sel_clearCoatNormal;
}

id sub_1B6C27988@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_clearCoatNormal);
  *a2 = result;
  return result;
}

char *sub_1B6C279C4()
{
  return sel_clearCoatRoughness;
}

id sub_1B6C279D0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_clearCoatRoughness);
  *a2 = result;
  return result;
}

char *sub_1B6C27A0C()
{
  return sel_subsurface;
}

id sub_1B6C27A18@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_subsurface);
  *a2 = result;
  return result;
}

char *sub_1B6C27A54()
{
  return sel_subsurfaceRadius;
}

id sub_1B6C27A60@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_subsurfaceRadius);
  *a2 = result;
  return result;
}

char *sub_1B6C27A9C()
{
  return sel_displacement;
}

id sub_1B6C27AA8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_displacement);
  *a2 = result;
  return result;
}

void sub_1B6C27AE4()
{
  if (!qword_1E9DD72E8)
  {
    sub_1B6C27B4C();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9DD72E8);
    }
  }
}

void sub_1B6C27B4C()
{
  if (!qword_1E9DD72F0)
  {
    sub_1B63989B8(255, &qword_1E9DD06B0);
    sub_1B63989B8(255, &qword_1E9DD72F8);
    unint64_t v0 = sub_1B6E33A98();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD72F0);
    }
  }
}

char *sub_1B6C27BD4()
{
  return sel_minificationFilter;
}

id sub_1B6C27BE0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_minificationFilter);
  *a2 = result;
  return result;
}

id sub_1B6C27C14(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMinificationFilter_, *a1);
}

void sub_1B6C27C28(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    sub_1B63989B8(255, &qword_1E9DD06B0);
    a3(255);
    unint64_t v5 = sub_1B6E33A98();
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

char *sub_1B6C27CA8()
{
  return sel_magnificationFilter;
}

id sub_1B6C27CB4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_magnificationFilter);
  *a2 = result;
  return result;
}

id sub_1B6C27CE8(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMagnificationFilter_, *a1);
}

char *sub_1B6C27CFC()
{
  return sel_mipFilter;
}

id sub_1B6C27D08@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_mipFilter);
  *a2 = result;
  return result;
}

id sub_1B6C27D3C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMipFilter_, *a1);
}

char *sub_1B6C27D50()
{
  return sel_wrapS;
}

id sub_1B6C27D5C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_wrapS);
  *a2 = result;
  return result;
}

id sub_1B6C27D90(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWrapS_, *a1);
}

char *sub_1B6C27DA4()
{
  return sel_wrapT;
}

id sub_1B6C27DB0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_wrapT);
  *a2 = result;
  return result;
}

id sub_1B6C27DE4(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWrapT_, *a1);
}

char *sub_1B6C27DF8()
{
  return sel_mappingChannel;
}

id sub_1B6C27E04@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_mappingChannel);
  *a2 = result;
  return result;
}

id sub_1B6C27E38(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setMappingChannel_, *a1);
}

void sub_1B6C27E4C(uint64_t a1, unint64_t *a2)
{
  if (!*a2)
  {
    sub_1B63989B8(255, &qword_1E9DD06B0);
    unint64_t v3 = sub_1B6E33A98();
    if (!v4) {
      atomic_store(v3, a2);
    }
  }
}

char *sub_1B6C27EBC()
{
  return sel_maxAnisotropy;
}

id sub_1B6C27EC8@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_maxAnisotropy);
  *a2 = v4;
  return result;
}

id sub_1B6C27EFC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setMaxAnisotropy_, a3);
}

char *sub_1B6C27F10()
{
  return sel_contentsTransform;
}

id sub_1B6C27F1C@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_contentsTransform);
  *a2 = v4;
  a2[1] = v5;
  a2[2] = v6;
  a2[3] = v7;
  return result;
}

id sub_1B6C27F54(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setContentsTransform_, *a1, a1[2], a1[4], a1[6]);
}

char *sub_1B6C27F74()
{
  return sel_subdivisionLevel;
}

id sub_1B6C27F80@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_subdivisionLevel);
  *a2 = result;
  return result;
}

id sub_1B6C27FB4(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setSubdivisionLevel_, *a1);
}

char *sub_1B6C27FC8()
{
  return sel_parametricType;
}

id sub_1B6C27FD4@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_parametricType);
  *a2 = result;
  return result;
}

id sub_1B6C28008(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setParametricType_, *a1);
}

char *sub_1B6C2801C()
{
  return sel_width;
}

id sub_1B6C28028@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_width);
  *a2 = v4;
  return result;
}

id sub_1B6C2805C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setWidth_, a3);
}

char *sub_1B6C28070()
{
  return sel_height;
}

id sub_1B6C2807C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_height);
  *a2 = v4;
  return result;
}

id sub_1B6C280B0(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setHeight_, a3);
}

char *sub_1B6C280C4()
{
  return sel_length;
}

id sub_1B6C280D0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_length);
  *a2 = v4;
  return result;
}

id sub_1B6C28104(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setLength_, a3);
}

char *sub_1B6C28118()
{
  return sel_chamferRadius;
}

id sub_1B6C28124@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_chamferRadius);
  *a2 = v4;
  return result;
}

id sub_1B6C28158(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setChamferRadius_, a3);
}

char *sub_1B6C2816C()
{
  return sel_primitiveType;
}

id sub_1B6C28178@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_primitiveType);
  *a2 = result;
  return result;
}

id sub_1B6C281AC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPrimitiveType_, *a1);
}

char *sub_1B6C281C0()
{
  return sel_widthSegmentCount;
}

id sub_1B6C281CC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_widthSegmentCount);
  *a2 = result;
  return result;
}

id sub_1B6C28200(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWidthSegmentCount_, *a1);
}

char *sub_1B6C28214()
{
  return sel_heightSegmentCount;
}

id sub_1B6C28220@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_heightSegmentCount);
  *a2 = result;
  return result;
}

id sub_1B6C28254(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setHeightSegmentCount_, *a1);
}

char *sub_1B6C28268()
{
  return sel_lengthSegmentCount;
}

id sub_1B6C28274@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_lengthSegmentCount);
  *a2 = result;
  return result;
}

id sub_1B6C282A8(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLengthSegmentCount_, *a1);
}

char *sub_1B6C282BC()
{
  return sel_chamferSegmentCount;
}

id sub_1B6C282C8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_chamferSegmentCount);
  *a2 = result;
  return result;
}

id sub_1B6C282FC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setChamferSegmentCount_, *a1);
}

char *sub_1B6C28310()
{
  return sel_model;
}

id sub_1B6C2831C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_model);
  *a2 = result;
  return result;
}

id sub_1B6C28358(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setModel_, *a1);
}

char *sub_1B6C2836C()
{
  return sel_friction;
}

id sub_1B6C28378@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_friction);
  *a2 = v4;
  return result;
}

id sub_1B6C283AC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFriction_, a3);
}

char *sub_1B6C283C0()
{
  return sel_restitution;
}

id sub_1B6C283CC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_restitution);
  *a2 = v4;
  return result;
}

id sub_1B6C28400(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setRestitution_, a3);
}

char *sub_1B6C28414()
{
  return sel_damping;
}

id sub_1B6C28420@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_damping);
  *a2 = v4;
  return result;
}

id sub_1B6C28454(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setDamping_, a3);
}

char *sub_1B6C28468()
{
  return sel_angularDamping;
}

id sub_1B6C28474@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_angularDamping);
  *a2 = v4;
  return result;
}

id sub_1B6C284A8(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setAngularDamping_, a3);
}

char *sub_1B6C284BC()
{
  return sel_rollingFriction;
}

id sub_1B6C284C8@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_rollingFriction);
  *a2 = v4;
  return result;
}

id sub_1B6C284FC(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setRollingFriction_, a3);
}

char *sub_1B6C28510()
{
  return sel_charge;
}

id sub_1B6C2851C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_charge);
  *a2 = v4;
  return result;
}

id sub_1B6C28550(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setCharge_, a3);
}

char *sub_1B6C28564()
{
  return sel_isAffectedByGravity;
}

id sub_1B6C28570@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isAffectedByGravity);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C285A4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAffectedByGravity_, *a1);
}

char *sub_1B6C285B8()
{
  return sel_centerOfMassOffset;
}

id sub_1B6C285C4@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_centerOfMassOffset);
  *a2 = v4;
  return result;
}

id sub_1B6C285F8(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCenterOfMassOffset_, *a1);
}

char *sub_1B6C2860C()
{
  return sel_velocityFactor;
}

id sub_1B6C28618@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_velocityFactor);
  *a2 = v4;
  return result;
}

id sub_1B6C2864C(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setVelocityFactor_, *a1);
}

char *sub_1B6C28660()
{
  return sel_angularVelocityFactor;
}

id sub_1B6C2866C@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_angularVelocityFactor);
  *a2 = v4;
  return result;
}

id sub_1B6C286A0(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAngularVelocityFactor_, *a1);
}

char *sub_1B6C286B4()
{
  return sel_continuousCollisionDetectionThreshold;
}

id sub_1B6C286C0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_continuousCollisionDetectionThreshold);
  *a2 = v4;
  return result;
}

id sub_1B6C286F4(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setContinuousCollisionDetectionThreshold_, a3);
}

char *sub_1B6C28708()
{
  return sel_collisionBitMask;
}

id sub_1B6C28714@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_collisionBitMask);
  *a2 = result;
  return result;
}

id sub_1B6C28748(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCollisionBitMask_, *a1);
}

char *sub_1B6C2875C()
{
  return sel_contactTestBitMask;
}

id sub_1B6C28768@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_contactTestBitMask);
  *a2 = result;
  return result;
}

id sub_1B6C2879C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setContactTestBitMask_, *a1);
}

char *sub_1B6C287B0()
{
  return sel_allowsResting;
}

id sub_1B6C287BC@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_allowsResting);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C287F0(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAllowsResting_, *a1);
}

char *sub_1B6C28804()
{
  return sel_linearRestingThreshold;
}

id sub_1B6C28810@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_linearRestingThreshold);
  *a2 = v4;
  return result;
}

id sub_1B6C28844(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setLinearRestingThreshold_, a3);
}

char *sub_1B6C28858()
{
  return sel_angularRestingThreshold;
}

id sub_1B6C28864@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_angularRestingThreshold);
  *a2 = v4;
  return result;
}

id sub_1B6C28898(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setAngularRestingThreshold_, a3);
}

char *sub_1B6C288AC()
{
  return sel_physicsBody;
}

id sub_1B6C288B8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_physicsBody);
  *a2 = result;
  return result;
}

id sub_1B6C288F4(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setPhysicsBody_, *a1);
}

char *sub_1B6C28908()
{
  return sel_fieldType;
}

id sub_1B6C28914@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fieldType);
  *a2 = result;
  return result;
}

id sub_1B6C28948(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setFieldType_, *a1);
}

char *sub_1B6C2895C()
{
  return sel_isActive;
}

id sub_1B6C28968@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_isActive);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C2899C(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setActive_, *a1);
}

char *sub_1B6C289B0()
{
  return sel_falloffExponent;
}

id sub_1B6C289BC@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_falloffExponent);
  *a2 = v4;
  return result;
}

id sub_1B6C289F0(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFalloffExponent_, a3);
}

char *sub_1B6C28A04()
{
  return sel_offset;
}

id sub_1B6C28A10@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_offset);
  *a2 = v4;
  return result;
}

id sub_1B6C28A44(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setOffset_, *a1);
}

char *sub_1B6C28A58()
{
  return sel_shape;
}

id sub_1B6C28A64@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_shape);
  *a2 = result;
  return result;
}

id sub_1B6C28A98(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setShape_, *a1);
}

char *sub_1B6C28AAC()
{
  return sel_cullMode;
}

id sub_1B6C28AB8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_cullMode);
  *a2 = result;
  return result;
}

id sub_1B6C28AEC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCullMode_, *a1);
}

char *sub_1B6C28B00()
{
  return sel_forceField;
}

id sub_1B6C28B0C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_forceField);
  *a2 = result;
  return result;
}

id sub_1B6C28B48(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setForceField_, *a1);
}

char *sub_1B6C28B5C()
{
  return sel_type;
}

id sub_1B6C28B68@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_type);
  *a2 = result;
  return result;
}

id sub_1B6C28B9C(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setType_, *a1);
}

char *sub_1B6C28BB0()
{
  return sel_color;
}

uint64_t sub_1B6C28BBC(id *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6C21ADC(a1, a2, a3, (SEL *)&selRef_color);
}

uint64_t sub_1B6C28BDC(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1B6C21B30(a1, a2, a3, a4, (SEL *)&selRef_setColor_);
}

char *sub_1B6C28BFC()
{
  return sel_temperature;
}

id sub_1B6C28C08@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_temperature);
  *a2 = v4;
  return result;
}

id sub_1B6C28C3C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setTemperature_, a3);
}

char *sub_1B6C28C50()
{
  return sel_attenuationDistance;
}

id sub_1B6C28C5C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_attenuationDistance);
  *a2 = v4;
  return result;
}

id sub_1B6C28C90(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setAttenuationDistance_, a3);
}

char *sub_1B6C28CA4()
{
  return sel_castsShadow;
}

id sub_1B6C28CB0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_castsShadow);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C28CE4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setCastsShadow_, *a1);
}

char *sub_1B6C28CF8()
{
  return sel_spotInnerAngle;
}

id sub_1B6C28D04@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_spotInnerAngle);
  *a2 = v4;
  return result;
}

id sub_1B6C28D38(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setSpotInnerAngle_, a3);
}

char *sub_1B6C28D4C()
{
  return sel_spotOuterAngle;
}

id sub_1B6C28D58@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_spotOuterAngle);
  *a2 = v4;
  return result;
}

id sub_1B6C28D8C(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setSpotOuterAngle_, a3);
}

char *sub_1B6C28DA0()
{
  return sel_gobo;
}

id sub_1B6C28DAC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_gobo);
  *a2 = result;
  return result;
}

char *sub_1B6C28DE8()
{
  return sel_contents;
}

char *sub_1B6C28DFC()
{
  return sel_areaExtents;
}

id sub_1B6C28E08@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_areaExtents);
  *a2 = v4;
  return result;
}

id sub_1B6C28E3C(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setAreaExtents_, *a1);
}

char *sub_1B6C28E50()
{
  return sel_drawsArea;
}

id sub_1B6C28E5C@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_drawsArea);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C28E90(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDrawsArea_, *a1);
}

char *sub_1B6C28EA4()
{
  return sel_doubleSided;
}

id sub_1B6C28EB0@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_doubleSided);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C28EE4(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setDoubleSided_, *a1);
}

char *sub_1B6C28EF8()
{
  return sel_IESProfile;
}

id sub_1B6C28F04@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_IESProfile);
  *a2 = result;
  return result;
}

id sub_1B6C28F40(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setIESProfile_, *a1);
}

void sub_1B6C28F54()
{
  if (!qword_1E9DD7330)
  {
    sub_1B63989B8(255, &qword_1E9DD7338);
    unint64_t v0 = sub_1B6E324B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7330);
    }
  }
}

char *sub_1B6C28FBC()
{
  return sel_probeType;
}

id sub_1B6C28FC8@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_probeType);
  *a2 = result;
  return result;
}

id sub_1B6C28FFC(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setProbeType_, *a1);
}

char *sub_1B6C29010()
{
  return sel_light;
}

id sub_1B6C2901C@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_light);
  *a2 = result;
  return result;
}

id sub_1B6C29058(void *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setLight_, *a1);
}

char *sub_1B6C2906C()
{
  return sel_isHidden;
}

char *sub_1B6C29088()
{
  return sel_eulerAngles;
}

char *sub_1B6C290A4()
{
  return sel_worldTransform;
}

char *sub_1B6C290C0()
{
  return sel_renderingOrder;
}

char *sub_1B6C290E4()
{
  return sel_physicsWorld;
}

id sub_1B6C290F0@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_physicsWorld);
  *a2 = result;
  return result;
}

char *sub_1B6C2912C()
{
  return sel_gravity;
}

id sub_1B6C29138@<X0>(id *a1@<X0>, _OWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_gravity);
  *a2 = v4;
  return result;
}

id sub_1B6C2916C(double *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setGravity_, *a1);
}

char *sub_1B6C29180()
{
  return sel_speed;
}

id sub_1B6C2918C@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_speed);
  *a2 = v4;
  return result;
}

id sub_1B6C291C0(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setSpeed_, a3);
}

char *sub_1B6C291D4()
{
  return sel_fogStartDistance;
}

id sub_1B6C291E0@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fogStartDistance);
  *a2 = v4;
  return result;
}

id sub_1B6C29214(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFogStartDistance_, a3);
}

char *sub_1B6C29228()
{
  return sel_fogEndDistance;
}

id sub_1B6C29234@<X0>(id *a1@<X0>, _DWORD *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_fogEndDistance);
  *a2 = v4;
  return result;
}

id sub_1B6C29268(_DWORD *a1, id *a2, double a3)
{
  LODWORD(a3) = *a1;
  return objc_msgSend(*a2, sel_setFogEndDistance_, a3);
}

char *sub_1B6C2927C()
{
  return sel_wantsScreenSpaceReflection;
}

id sub_1B6C29288@<X0>(id *a1@<X0>, unsigned char *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_wantsScreenSpaceReflection);
  *a2 = (_BYTE)result;
  return result;
}

id sub_1B6C292BC(unsigned __int8 *a1, id *a2)
{
  return objc_msgSend(*a2, sel_setWantsScreenSpaceReflection_, *a1);
}

char *sub_1B6C292D0()
{
  return sel_lightingEnvironment;
}

id sub_1B6C292DC@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_lightingEnvironment);
  *a2 = result;
  return result;
}

char *sub_1B6C29318()
{
  return sel_background;
}

id sub_1B6C29324@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  id result = objc_msgSend(*a1, sel_background);
  *a2 = result;
  return result;
}

char *sub_1B6C29360()
{
  return sel_fogColor;
}

uint64_t sub_1B6C2936C(id *a1, uint64_t a2, uint64_t a3)
{
  return sub_1B6C21ADC(a1, a2, a3, (SEL *)&selRef_fogColor);
}

uint64_t sub_1B6C2938C(void *a1, void **a2, uint64_t a3, uint64_t a4)
{
  return sub_1B6C21B30(a1, a2, a3, a4, (SEL *)&selRef_setFogColor_);
}

uint64_t initializeWithCopy for DiagnosticsTrackerInstance(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithCopy for DiagnosticsTrackerInstance(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakCopyAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t initializeWithTake for DiagnosticsTrackerInstance(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeInit();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t assignWithTake for DiagnosticsTrackerInstance(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_unknownObjectWeakTakeAssign();
  *(void *)(result + 8) = *(void *)(a2 + 8);
  return result;
}

uint64_t getEnumTagSinglePayload for DiagnosticsTrackerInstance(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for DiagnosticsTrackerInstance(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)uint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      *(void *)(result + 8) = 1;
      return result;
    }
    *(unsigned char *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for DiagnosticsTrackerInstance()
{
  return &type metadata for DiagnosticsTrackerInstance;
}

uint64_t sub_1B6C295F4@<X0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 8) = 0;
  return swift_unknownObjectWeakInit();
}

uint64_t *initializeBufferWithCopyOfBuffer for ScriptStatus(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1B67F7C58(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

void destroy for ScriptStatus(uint64_t a1)
{
}

uint64_t *assignWithCopy for ScriptStatus(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_1B67F7C58(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_1B6959BCC(v5, v6);
  return a1;
}

uint64_t *assignWithTake for ScriptStatus(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_1B6959BCC(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for ScriptStatus(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7E && *(unsigned char *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 126);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 57) >> 5) | (4
                                                          * ((*(void *)(a1 + 8) >> 57) & 0x18 | *(void *)(a1 + 8) & 7))) ^ 0x7F;
  if (v3 >= 0x7D) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for ScriptStatus(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7D)
  {
    *(void *)uint64_t result = a2 - 126;
    *(void *)(result + 8) = 0;
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 16) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7E) {
      *(unsigned char *)(result + 16) = 0;
    }
    if (a2)
    {
      uint64_t v3 = (-a2 >> 2) & 0x1F | (32 * (-a2 & 0x7F));
      *(void *)uint64_t result = 0;
      *(void *)(result + 8) = (v3 | (v3 << 57)) & 0xF000000000000007;
    }
  }
  return result;
}

uint64_t sub_1B6C29780(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 62;
  if (v1 <= 1) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1B6C2979C(uint64_t result)
{
  *(void *)(result + 8) &= 0x3FFFFFFFFFFFFFFFuLL;
  return result;
}

void *sub_1B6C297AC(void *result, uint64_t a2)
{
  if (a2 < 2)
  {
    result[1] = result[1] & 0xFFFFFFFFFFFFFF8 | (a2 << 62);
  }
  else
  {
    *uint64_t result = (a2 - 2);
    result[1] = 0x8000000000000000;
  }
  return result;
}

ValueMetadata *type metadata accessor for ScriptStatus()
{
  return &type metadata for ScriptStatus;
}

ValueMetadata *type metadata accessor for ScriptHandle()
{
  return &type metadata for ScriptHandle;
}

unint64_t sub_1B6C297F8()
{
  unint64_t result = qword_1E9DD7340;
  if (!qword_1E9DD7340)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7340);
  }
  return result;
}

uint64_t sub_1B6C29850()
{
  return sub_1B6E31BA8();
}

uint64_t sub_1B6C298B0()
{
  return sub_1B6E31B08();
}

void sub_1B6C29900(void *a1@<X8>)
{
  *a1 = &unk_1F0F94D50;
}

uint64_t type metadata accessor for ParticleColorOverPosition.System()
{
  return self;
}

uint64_t sub_1B6C29934(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6395C30(0, &qword_1E9DD7378, (uint64_t (*)(void))sub_1B6C2C5A4, (uint64_t)&type metadata for ParticleColorOverPosition.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)v14 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C2C5A4();
  sub_1B6E33A88();
  LOBYTE(v14[0]) = *(unsigned char *)v3;
  char v16 = 0;
  sub_1B66C5300();
  sub_1B6E32FA8();
  if (!v2)
  {
    LOBYTE(v14[0]) = *(unsigned char *)(v3 + 1);
    char v16 = 1;
    sub_1B66C63C0();
    sub_1B6E32FA8();
    v14[0] = *(void *)(v3 + 4);
    char v16 = 2;
    sub_1B67FEC7C();
    sub_1B6E32FA8();
    uint64_t v11 = *(void *)(v3 + 16);
    char v12 = *(unsigned char *)(v3 + 32);
    uint64_t v18 = *(void *)(v3 + 24);
    uint64_t v17 = v11;
    v14[0] = v11;
    v14[1] = v18;
    char v15 = v12;
    char v16 = 3;
    sub_1B68709B0(v3);
    sub_1B697B9F4();
    sub_1B6E32FA8();
    sub_1B62D8C3C((uint64_t)&v17);
    sub_1B62D8C3C((uint64_t)&v18);
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

const char *sub_1B6C29BA8()
{
  return "ParticleColorOverPosition";
}

uint64_t sub_1B6C29BBC(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB80C0(*a1, *a2);
}

uint64_t sub_1B6C29BC8()
{
  uint64_t result = 1701080941;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x4D73736572646461;
      break;
    case 2:
      uint64_t result = 0x7469736F706D6F63;
      break;
    case 3:
      uint64_t result = 1886216562;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6C29C54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6C29F78(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6C29C7C(uint64_t a1)
{
  unint64_t v2 = sub_1B6C2C5A4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C29CB8(uint64_t a1)
{
  unint64_t v2 = sub_1B6C2C5A4();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B6C29CF4@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6C2BF2C(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(unsigned char *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B6C29D3C(void *a1)
{
  return sub_1B6C29934(a1);
}

uint64_t sub_1B6C29D78()
{
  return sub_1B6C2A144();
}

uint64_t sub_1B6C29DB4()
{
  return type metadata accessor for ParticleColorOverPosition.System();
}

uint64_t sub_1B6C29DD4(uint64_t a1, uint64_t a2)
{
  return (*(unsigned char *)(a1 + 4) != 0) ^ (*(unsigned char *)(a2 + 4) != 0);
}

double sub_1B6C29DF4@<D0>(uint64_t a1@<X8>)
{
  sub_1B6C29E38((uint64_t)v4);
  double result = *(double *)v4;
  long long v3 = v4[1];
  *(_OWORD *)a1 = v4[0];
  *(_OWORD *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 32) = v5;
  return result;
}

uint64_t sub_1B6C29E38@<X0>(uint64_t a1@<X8>)
{
  sub_1B62D2A54(0, (unint64_t *)&unk_1EB980D90, (uint64_t (*)(uint64_t))sub_1B6395D64, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E76B30;
  unsigned __int32 v3 = _simd_pow_f4((simd_float4)xmmword_1B6EB7A30, (simd_float4)xmmword_1B6E72D40).u32[0];
  DWORD2(v4) = 0;
  *(void *)&long long v4 = v3;
  HIDWORD(v4) = 1.0;
  *(_OWORD *)(v2 + 32) = v4;
  *(_DWORD *)(v2 + 48) = 0;
  simd_float4 v5 = _simd_pow_f4((simd_float4)xmmword_1B6EB7A40, (simd_float4)xmmword_1B6E72D40);
  LODWORD(v6) = 0;
  DWORD2(v6) = 0;
  DWORD1(v6) = v5.i32[1];
  HIDWORD(v6) = 1.0;
  *(_OWORD *)(v2 + 64) = v6;
  *(_DWORD *)(v2 + 80) = 1065353216;
  uint64_t v7 = sub_1B6397618(v2);
  swift_setDeallocating();
  swift_deallocClassInstance();
  uint64_t v8 = sub_1B639EA20(v7);
  uint64_t v10 = v9;
  uint64_t result = swift_bridgeObjectRelease();
  *(_WORD *)a1 = 259;
  *(unsigned char *)(a1 + 4) = 0;
  *(_DWORD *)(a1 + 8) = 1065353216;
  *(void *)(a1 + 16) = v8;
  *(void *)(a1 + 24) = v10;
  *(unsigned char *)(a1 + 32) = 1;
  return result;
}

uint64_t sub_1B6C29F78(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701080941 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x4D73736572646461 && a2 == 0xEB0000000065646FLL || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7469736F706D6F63 && a2 == 0xEB000000006E6F69 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 1886216562 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t sub_1B6C2A144()
{
  int v1 = *(unsigned __int8 *)(v0 + 4);
  sub_1B62D2A54(0, (unint64_t *)&qword_1EB980BA0, (uint64_t (*)(uint64_t))sub_1B663C11C, MEMORY[0x1E4FBBE00]);
  uint64_t result = swift_allocObject();
  if (v1)
  {
    *(_OWORD *)(result + 16) = xmmword_1B6E76B30;
    *(void *)(result + 32) = &type metadata for TransientOriginColor;
    *(void *)(result + 40) = &off_1F0F842D0;
    *(void *)(result + 48) = &type metadata for Color;
    unsigned __int32 v3 = (void *)(result + 56);
  }
  else
  {
    *(_OWORD *)(result + 16) = xmmword_1B6E77050;
    *(void *)(result + 32) = &type metadata for Color;
    unsigned __int32 v3 = (void *)(result + 40);
  }
  void *v3 = &off_1F0F9ECD8;
  return result;
}

uint64_t sub_1B6C2A214(float32x4_t *a1, float32x4_t *a2, char a3, uint64_t a4, float32x4_t a5, float a6, float a7)
{
  float32x4_t v9 = vsubq_f32(*a2, a5);
  float32x4_t v10 = vmulq_f32(v9, v9);
  uint64_t result = (*(uint64_t (**)(uint64_t, float))(a4 + 24))(a4, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v10, 2), vaddq_f32(v10, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v10.f32, 1))).f32[0])* a6);
  switch(a3)
  {
    case 1:
      float32x4_t v13 = vaddq_f32(vmulq_n_f32(v12, a7), *a1);
      break;
    case 2:
      float32x4_t v13 = vmulq_f32(vmulq_n_f32(v12, a7), *a1);
      break;
    case 3:
      float32x4_t v13 = vaddq_f32(*a1, vmulq_n_f32(vsubq_f32(v12, *a1), a7));
      break;
    default:
      float32x4_t v13 = vmulq_n_f32(v12, a7);
      break;
  }
  *a1 = v13;
  return result;
}

uint64_t sub_1B6C2A2F4(uint64_t a1)
{
  uint64_t v274 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (!v3)
  {
    return swift_release();
  }
  long long v4 = *(void **)(a1 + 8);
  swift_retain();
  sub_1B6960164((uint64_t)v4, (uint64_t)&v265);
  swift_retain();
  swift_release();
  uint64_t v5 = v266;
  if ((void)v266)
  {
    char v6 = v267;
    uint64_t v7 = *((void *)&v266 + 1);
    char v8 = v265;
    unint64_t v9 = (unint64_t)v265 >> 8;
    unint64_t v10 = DWORD1(v265);
    float v225 = *((float *)&v265 + 2);
  }
  else
  {
    sub_1B6C29E38((uint64_t)v226);
    char v8 = v226[0];
    LOBYTE(v9) = v226[1];
    LOBYTE(v10) = v226[4];
    float v225 = v227;
    uint64_t v5 = v228;
    uint64_t v7 = v229;
    char v6 = v230;
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B6A7C7BC(v5, v7, v6, (uint64_t)v246);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B6381788((uint64_t)v246, (uint64_t)v263, (uint64_t)&unk_1EB97EFD0, (uint64_t)&type metadata for TextureCPURuntime, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8588);
  if (!v264)
  {
    swift_release();
    goto LABEL_152;
  }
  long long v269 = v263[4];
  long long v270 = v263[5];
  long long v271 = v263[6];
  uint64_t v272 = v264;
  long long v265 = v263[0];
  long long v266 = v263[1];
  long long v267 = v263[2];
  long long v268 = v263[3];
  sub_1B628D434((uint64_t)&v265);
  sub_1B6AFF0F4((uint64_t)&v265, v9, 1, (uint64_t)v247);
  sub_1B66576EC(v246);
  sub_1B6381788((uint64_t)v247, (uint64_t)&v260, (uint64_t)&qword_1EB9811E0, (uint64_t)type metadata accessor for __vfx_sampler1d, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D2A54);
  if (*((void *)&v261 + 1) == 1)
  {
    sub_1B66576EC(v246);
    swift_release();
LABEL_152:
    swift_release();
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  long long v243 = v260;
  long long v244 = v261;
  uint64_t v245 = v262;
  long long v12 = *(_OWORD *)(a1 + 104);
  long long v240 = *(_OWORD *)(a1 + 88);
  long long v241 = v12;
  uint64_t v242 = *(void *)(a1 + 120);
  sub_1B663ECB8((uint64_t)&v231);
  *(double *)v13.i64 = sub_1B6335378();
  float32x4_t v211 = v13;
  float32x4_t v214 = v14;
  float32x4_t v218 = v15;
  float32x4_t v222 = v16;
  swift_retain();
  sub_1B62E9D50(v4, (uint64_t)v248);
  swift_release();
  sub_1B6381788((uint64_t)v248, (uint64_t)v258, (uint64_t)qword_1EB97EA20, (uint64_t)&type metadata for WorldTransform, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8588);
  if (v259)
  {
    swift_retain();
    *(double *)v18.i64 = sub_1B6AAD49C((unint64_t)v4, v17);
    float32x4_t v206 = v18;
    float32x4_t v192 = v20;
    float32x4_t v199 = v19;
    float32x4_t v186 = v21;
    swift_release();
    float32x4_t v22 = v206;
    float32x4_t v24 = v192;
    float32x4_t v23 = v199;
    float32x4_t v25 = v186;
  }
  else
  {
    float32x4_t v22 = v258[0];
    float32x4_t v23 = v258[1];
    float32x4_t v24 = v258[2];
    float32x4_t v25 = v258[3];
  }
  v276.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v211, v22.f32[0]), v214, *(float32x2_t *)v22.f32, 1), v218, v22, 2), v222, v22, 3);
  v276.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v211, v23.f32[0]), v214, *(float32x2_t *)v23.f32, 1), v218, v23, 2), v222, v23, 3);
  v276.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v211, v24.f32[0]), v214, *(float32x2_t *)v24.f32, 1), v218, v24, 2), v222, v24, 3);
  v276.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v211, v25.f32[0]), v214, *(float32x2_t *)v25.f32, 1), v218, v25, 2), v222, v25, 3);
  float32x4_t v26 = vmulq_f32((float32x4_t)v276.columns[0], (float32x4_t)v276.columns[0]);
  LODWORD(v27) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v26, 2), vaddq_f32(v26, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v26.f32, 1))).u32[0];
  float32x4_t v28 = vmulq_f32((float32x4_t)v276.columns[2], (float32x4_t)v276.columns[2]);
  float v29 = sqrtf(v27);
  float v30 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v28, 2), vaddq_f32(v28, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v28.f32, 1))).f32[0]);
  float32x4_t v193 = (float32x4_t)v276.columns[2];
  float32x4_t v200 = (float32x4_t)v276.columns[1];
  float32x4_t v207 = (float32x4_t)v276.columns[3];
  simd_float4x4 v277 = __invert_f4(v276);
  float32x4_t v219 = (float32x4_t)v277.columns[1];
  float32x4_t v223 = (float32x4_t)v277.columns[0];
  float32x4_t v212 = (float32x4_t)v277.columns[3];
  float32x4_t v215 = (float32x4_t)v277.columns[2];
  switch(v8)
  {
    case 1:
      float32x4_t v84 = vmulq_f32(v200, v200);
      float v85 = sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v84, 2), vaddq_f32(v84, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v84.f32, 1))).f32[0]);
      if (v29 != v85 || v85 != v30)
      {
        long long v237 = v231;
        long long v238 = v232;
        uint64_t v239 = v233;
        sub_1B62C9DA8(v2, (uint64_t)&v237, 0x200000000, v249);
        sub_1B6381788((uint64_t)v249, (uint64_t)&v250, (uint64_t)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8588);
        if (!(void)v250) {
          goto LABEL_154;
        }
        if (v257 > 0)
        {
          uint64_t v183 = v254;
          if (v254)
          {
            uint64_t v87 = v256;
            uint64_t v88 = v256[4];
            int v209 = *(unsigned __int8 *)(v255 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
            long long v234 = v250;
            long long v235 = v251;
            uint64_t v236 = v252;
            uint64_t v170 = (uint64_t)(v256 + 6);
            uint64_t v174 = v253;
            long long v166 = v256 + 8;
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v89 = 0;
            uint64_t v90 = 0;
            uint64_t v91 = v10;
            uint64_t v178 = v88;
            uint64_t v162 = v10;
            while (1)
            {
              uint64_t v203 = v90;
              uint64_t v92 = (unsigned int *)(v174 + 48 * v89);
              uint64_t v94 = (uint64_t *)*((void *)v92 + 2);
              uint64_t v93 = *((void *)v92 + 3);
              uint64_t v95 = *((void *)v92 + 4);
              uint64_t v96 = *((void *)v92 + 5);
              uint64_t v196 = *v92;
              uint64_t v189 = v92[1];
              if (v209)
              {
                uint64_t v97 = *(os_unfair_lock_s **)(v96 + 376);
                swift_retain_n();
                os_unfair_lock_lock(v97);
                os_unfair_lock_lock(*(os_unfair_lock_t *)(v96 + 344));
                swift_release();
              }
              else
              {
                swift_retain();
              }
              ecs_stack_allocator_push_snapshot(v88);
              sub_1B6381788(v170, (uint64_t)v273, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8588);
              uint64_t v98 = v87[4];
              uint64_t v99 = *(void *)(*(void *)(*(void *)(*(void *)(v96 + 40) + 16) + 32) + 16) + 1;
              swift_retain();
              v87[6] = ecs_stack_allocator_allocate(v98, 48 * v99, 8);
              v87[7] = v99;
              v166[1] = 0;
              v166[2] = 0;
              *long long v166 = 0;
              swift_release();
              BOOL v100 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v94, v93, v95, (uint64_t)v87);
              uint64_t v101 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v94, v93, v95, (uint64_t)v87);
              int32x4_t v102 = (float32x2_t *)v101;
              if (v94)
              {
                if (v95)
                {
                  uint64_t v90 = v203;
                  do
                  {
                    float32x4_t v104 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v223, COERCE_FLOAT(*(_OWORD *)v102->f32)), v219, *v102, 1), v215, *(float32x4_t *)v102->f32, 2), v212, *(float32x4_t *)v102->f32, 3);
                    float32x4_t v105 = vmulq_f32(v104, v104);
                    (*((void (**)(long long *, float))&v244 + 1))(&v243, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v105, 2), vaddq_f32(v105, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v105.f32, 1))).f32[0]));
                    switch(v91)
                    {
                      case 1:
                        float32x4_t v103 = vaddq_f32(vmulq_n_f32(v106, v225), *v100);
                        break;
                      case 2:
                        float32x4_t v103 = vmulq_f32(vmulq_n_f32(v106, v225), *v100);
                        break;
                      case 3:
                        float32x4_t v103 = vaddq_f32(*v100, vmulq_n_f32(vsubq_f32(v106, *v100), v225));
                        break;
                      default:
                        float32x4_t v103 = vmulq_n_f32(v106, v225);
                        break;
                    }
                    *v100++ = v103;
                    v102 += 2;
                    --v95;
                  }
                  while (v95);
                  goto LABEL_95;
                }
              }
              else if (v196 != v189)
              {
                uint64_t v107 = v189 - v196;
                int v108 = (float32x2_t *)(v101 + 16 * v196);
                float32x4_t v109 = &v100[v196];
                uint64_t v90 = v203;
                do
                {
                  float32x4_t v111 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v223, COERCE_FLOAT(*(_OWORD *)v108->f32)), v219, *v108, 1), v215, *(float32x4_t *)v108->f32, 2), v212, *(float32x4_t *)v108->f32, 3);
                  float32x4_t v112 = vmulq_f32(v111, v111);
                  (*((void (**)(long long *, float))&v244 + 1))(&v243, sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v112, 2), vaddq_f32(v112, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v112.f32, 1))).f32[0]));
                  switch(v162)
                  {
                    case 1:
                      float32x4_t v110 = vaddq_f32(vmulq_n_f32(v113, v225), *v109);
                      break;
                    case 2:
                      float32x4_t v110 = vmulq_f32(vmulq_n_f32(v113, v225), *v109);
                      break;
                    case 3:
                      float32x4_t v110 = vaddq_f32(*v109, vmulq_n_f32(vsubq_f32(v113, *v109), v225));
                      break;
                    default:
                      float32x4_t v110 = vmulq_n_f32(v113, v225);
                      break;
                  }
                  *v109++ = v110;
                  v108 += 2;
                  --v107;
                }
                while (v107);
                goto LABEL_95;
              }
              uint64_t v90 = v203;
LABEL_95:
              sub_1B6345178(v87, (unsigned __int16 **)&v234, (uint64_t)v273);
              sub_1B634507C((char *)v96);
              uint64_t v88 = v178;
              ecs_stack_allocator_pop_snapshot(v178);
              if (v209)
              {
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v96 + 344));
                os_unfair_lock_unlock(*(os_unfair_lock_t *)(v96 + 376));
              }
              swift_release();
              if (++v89 == v183) {
                goto LABEL_155;
              }
            }
          }
        }
LABEL_151:
        sub_1B6657794(v249, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F2C8);
        sub_1B66576EC(v246);
        sub_1B62CA064((uint64_t)&v231);
        swift_release();
        sub_1B6657794(v249, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
        sub_1B6657794(v249, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
        goto LABEL_152;
      }
      long long v237 = v231;
      long long v238 = v232;
      uint64_t v239 = v233;
      sub_1B62C9DA8(v2, (uint64_t)&v237, 0x200000000, v249);
      sub_1B6381788((uint64_t)v249, (uint64_t)&v250, (uint64_t)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8588);
      if (!(void)v250) {
        goto LABEL_154;
      }
      if (v257 <= 0) {
        goto LABEL_151;
      }
      uint64_t v205 = v254;
      if (!v254) {
        goto LABEL_151;
      }
      float v141 = 1.0 / v29;
      uint64_t v142 = v256;
      uint64_t v143 = v256[4];
      int v224 = *(unsigned __int8 *)(v255 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      long long v234 = v250;
      long long v235 = v251;
      uint64_t v236 = v252;
      uint64_t v185 = (uint64_t)(v256 + 6);
      uint64_t v191 = v253;
      int8x16_t v180 = v256 + 8;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v144 = 0;
      uint64_t v145 = 0;
      uint64_t v198 = v143;
      while (1)
      {
        uint64_t v221 = v145;
        uint64_t v146 = (unsigned int *)(v191 + 48 * v144);
        uint64_t v148 = (uint64_t *)*((void *)v146 + 2);
        uint64_t v147 = *((void *)v146 + 3);
        uint64_t v149 = *((void *)v146 + 4);
        uint64_t v150 = *((void *)v146 + 5);
        uint64_t v217 = *v146;
        uint64_t v213 = v146[1];
        if (v224)
        {
          uint64_t v151 = *(os_unfair_lock_s **)(v150 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v151);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v150 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v143);
        sub_1B6381788(v185, (uint64_t)v273, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8588);
        uint64_t v152 = v142[4];
        uint64_t v153 = *(void *)(*(void *)(*(void *)(*(void *)(v150 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v142[6] = ecs_stack_allocator_allocate(v152, 48 * v153, 8);
        v142[7] = v153;
        v180[1] = 0;
        v180[2] = 0;
        *int8x16_t v180 = 0;
        swift_release();
        uint64_t v154 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v148, v147, v149, (uint64_t)v142);
        uint64_t v155 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v148, v147, v149, (uint64_t)v142);
        uint64_t v156 = (float32x4_t *)v155;
        if (v148)
        {
          if (v149)
          {
            uint64_t v145 = v221;
            do
            {
              sub_1B6C2A214(v154++, v156++, v10, (uint64_t)&v243, v207, v141, v225);
              --v149;
            }
            while (v149);
            goto LABEL_149;
          }
        }
        else if (v217 != v213)
        {
          uint64_t v157 = v213 - v217;
          uint64_t v158 = (float32x4_t *)(v155 + 16 * v217);
          uint64_t v159 = &v154[v217];
          uint64_t v145 = v221;
          do
          {
            sub_1B6C2A214(v159++, v158++, v10, (uint64_t)&v243, v207, v141, v225);
            --v157;
          }
          while (v157);
          goto LABEL_149;
        }
        uint64_t v145 = v221;
LABEL_149:
        sub_1B6345178(v142, (unsigned __int16 **)&v234, (uint64_t)v273);
        sub_1B634507C((char *)v150);
        uint64_t v143 = v198;
        ecs_stack_allocator_pop_snapshot(v198);
        if (v224)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v150 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v150 + 376));
        }
        swift_release();
        if (++v144 == v205) {
          goto LABEL_155;
        }
      }
    case 2:
      long long v237 = v231;
      long long v238 = v232;
      uint64_t v239 = v233;
      sub_1B62C9DA8(v2, (uint64_t)&v237, 0x200000000, v249);
      sub_1B6381788((uint64_t)v249, (uint64_t)&v250, (uint64_t)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8588);
      if (!(void)v250) {
        goto LABEL_154;
      }
      if (v257 <= 0) {
        goto LABEL_151;
      }
      uint64_t v182 = v254;
      if (!v254) {
        goto LABEL_151;
      }
      unint64_t v60 = v256;
      uint64_t v61 = v256[4];
      int v208 = *(unsigned __int8 *)(v255 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      long long v234 = v250;
      long long v235 = v251;
      uint64_t v236 = v252;
      uint64_t v169 = (uint64_t)(v256 + 6);
      uint64_t v173 = v253;
      long long v165 = v256 + 8;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v62 = 0;
      uint64_t v63 = 0;
      uint64_t v177 = v61;
      do
      {
        long long v64 = (unsigned int *)(v173 + 48 * v62);
        uint64_t v195 = *v64;
        uint64_t v188 = v64[1];
        long long v66 = (uint64_t *)*((void *)v64 + 2);
        uint64_t v65 = *((void *)v64 + 3);
        uint64_t v67 = *((void *)v64 + 4);
        uint64_t v68 = *((void *)v64 + 5);
        uint64_t v202 = v63;
        if (v208)
        {
          long long v69 = *(os_unfair_lock_s **)(v68 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v69);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v68 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v61);
        sub_1B6381788(v169, (uint64_t)v273, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8588);
        uint64_t v70 = v60[4];
        uint64_t v71 = *(void *)(*(void *)(*(void *)(*(void *)(v68 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v60[6] = ecs_stack_allocator_allocate(v70, 48 * v71, 8);
        v60[7] = v71;
        v165[1] = 0;
        v165[2] = 0;
        *long long v165 = 0;
        swift_release();
        size_t v72 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v66, v65, v67, (uint64_t)v60);
        uint64_t v73 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v66, v65, v67, (uint64_t)v60);
        float32x4_t v74 = (float32x2_t *)v73;
        if (v66)
        {
          for (; v67; --v67)
          {
            float32x4_t v76 = vabsq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v223, COERCE_FLOAT(*(_OWORD *)v74->f32)), v219, *v74, 1), v215, *(float32x4_t *)v74->f32, 2), v212, *(float32x4_t *)v74->f32, 3));
            (*((void (**)(long long *, float32x4_t))&v244 + 1))(&v243, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v76, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v76.f32, 1), v76)));
            switch((char)v10)
            {
              case 1:
                float32x4_t v75 = vaddq_f32(vmulq_n_f32(v77, v225), *v72);
                break;
              case 2:
                float32x4_t v75 = vmulq_f32(vmulq_n_f32(v77, v225), *v72);
                break;
              case 3:
                float32x4_t v75 = vaddq_f32(*v72, vmulq_n_f32(vsubq_f32(v77, *v72), v225));
                break;
              default:
                float32x4_t v75 = vmulq_n_f32(v77, v225);
                break;
            }
            *v72++ = v75;
            v74 += 2;
          }
        }
        else if (v195 != v188)
        {
          uint64_t v78 = v188 - v195;
          uint64_t v79 = (float32x2_t *)(v73 + 16 * v195);
          uint64_t v80 = &v72[v195];
          do
          {
            float32x4_t v82 = vabsq_f32(vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v223, COERCE_FLOAT(*(_OWORD *)v79->f32)), v219, *v79, 1), v215, *(float32x4_t *)v79->f32, 2), v212, *(float32x4_t *)v79->f32, 3));
            (*((void (**)(long long *, float32x4_t))&v244 + 1))(&v243, vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v82, 2), vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v82.f32, 1), v82)));
            switch((char)v10)
            {
              case 1:
                float32x4_t v81 = vaddq_f32(vmulq_n_f32(v83, v225), *v80);
                break;
              case 2:
                float32x4_t v81 = vmulq_f32(vmulq_n_f32(v83, v225), *v80);
                break;
              case 3:
                float32x4_t v81 = vaddq_f32(*v80, vmulq_n_f32(vsubq_f32(v83, *v80), v225));
                break;
              default:
                float32x4_t v81 = vmulq_n_f32(v83, v225);
                break;
            }
            *v80++ = v81;
            v79 += 2;
            --v78;
          }
          while (v78);
        }
        uint64_t v63 = v202;
        sub_1B6345178(v60, (unsigned __int16 **)&v234, (uint64_t)v273);
        sub_1B634507C((char *)v68);
        uint64_t v61 = v177;
        ecs_stack_allocator_pop_snapshot(v177);
        if (v208)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v68 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v68 + 376));
        }
        swift_release();
        ++v62;
      }
      while (v62 != v182);
      goto LABEL_155;
    case 3:
      long long v237 = v231;
      long long v238 = v232;
      uint64_t v239 = v233;
      sub_1B62C9DA8(v2, (uint64_t)&v237, 0x200000000, v249);
      sub_1B6381788((uint64_t)v249, (uint64_t)&v250, (uint64_t)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8588);
      if (!(void)v250) {
        goto LABEL_154;
      }
      if (v257 <= 0) {
        goto LABEL_151;
      }
      uint64_t v179 = v254;
      if (!v254) {
        goto LABEL_151;
      }
      uint64_t v114 = v256[4];
      int v115 = *(unsigned __int8 *)(v255 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      long long v234 = v250;
      long long v235 = v251;
      uint64_t v236 = v252;
      uint64_t v167 = (uint64_t)(v256 + 6);
      uint64_t v171 = v253;
      uint64_t v210 = v256;
      uint64_t v163 = v256 + 8;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v116 = 0;
      uint64_t v117 = 0;
      int v175 = v115;
      uint64_t v160 = v114;
      break;
    default:
      long long v237 = v231;
      long long v238 = v232;
      uint64_t v239 = v233;
      sub_1B62C9DA8(v2, (uint64_t)&v237, 0x200000000, v249);
      sub_1B6381788((uint64_t)v249, (uint64_t)&v250, (uint64_t)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8588);
      if (!(void)v250)
      {
LABEL_154:
        sub_1B66576EC(v246);
        sub_1B62CA064((uint64_t)&v231);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return swift_release();
      }
      if (v257 <= 0) {
        goto LABEL_151;
      }
      uint64_t v176 = v254;
      if (!v254) {
        goto LABEL_151;
      }
      float v220 = 1.0 / v30;
      float32x4_t v31 = vmulq_n_f32(v193, 1.0 / v30);
      uint64_t v32 = v256;
      int v33 = *(unsigned __int8 *)(v255 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v201 = v256[4];
      long long v234 = v250;
      long long v235 = v251;
      uint64_t v236 = v252;
      uint64_t v168 = (uint64_t)(v256 + 6);
      uint64_t v172 = v253;
      uint64_t v164 = v256 + 8;
      float v34 = v31.f32[1];
      float v216 = v31.f32[0];
      float v35 = v31.f32[2];
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v36 = 0;
      uint64_t i = 0;
      int v161 = v33;
      do
      {
        unint64_t v38 = (unsigned int *)(v172 + 48 * v36);
        uint64_t v187 = *v38;
        uint64_t v181 = v38[1];
        char v40 = (uint64_t *)*((void *)v38 + 2);
        uint64_t v39 = *((void *)v38 + 3);
        uint64_t v41 = *((void *)v38 + 4);
        uint64_t v42 = *((void *)v38 + 5);
        uint64_t v194 = i;
        if (v33)
        {
          uint64_t v43 = *(os_unfair_lock_s **)(v42 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v43);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v42 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v201);
        sub_1B6381788(v168, (uint64_t)v273, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8588);
        uint64_t v44 = v32[4];
        uint64_t v45 = *(void *)(*(void *)(*(void *)(*(void *)(v42 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v32[6] = ecs_stack_allocator_allocate(v44, 48 * v45, 8);
        v32[7] = v45;
        v164[1] = 0;
        v164[2] = 0;
        void *v164 = 0;
        swift_release();
        uint64_t v46 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v40, v39, v41, (uint64_t)v32);
        uint64_t v47 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v40, v39, v41, (uint64_t)v32);
        long long v48 = (float32x4_t *)v47;
        if (v40)
        {
          float32x4_t v49 = v207;
          for (uint64_t i = v194; v41; --v41)
          {
            float32x4_t v51 = vsubq_f32(*v48, v49);
            (*((void (**)(long long *, float))&v244 + 1))(&v243, v220* (float)(vmuls_lane_f32(v35, v51, 2)+ (float)((float)(v216 * v51.f32[0]) + vmuls_lane_f32(v34, *(float32x2_t *)v51.f32, 1))));
            switch((char)v10)
            {
              case 1:
                float32x4_t v50 = vaddq_f32(vmulq_n_f32(v52, v225), *v46);
                break;
              case 2:
                float32x4_t v50 = vmulq_f32(vmulq_n_f32(v52, v225), *v46);
                break;
              case 3:
                float32x4_t v50 = vaddq_f32(*v46, vmulq_n_f32(vsubq_f32(v52, *v46), v225));
                break;
              default:
                float32x4_t v50 = vmulq_n_f32(v52, v225);
                break;
            }
            float32x4_t v49 = v207;
            *v46++ = v50;
            ++v48;
          }
          int v33 = v161;
        }
        else
        {
          float32x4_t v53 = v207;
          if (v187 == v181)
          {
            int v33 = v161;
          }
          else
          {
            uint64_t v54 = v181 - v187;
            long long v55 = (float32x4_t *)(v47 + 16 * v187);
            uint64_t v56 = &v46[v187];
            int v33 = v161;
            do
            {
              float32x4_t v58 = vsubq_f32(*v55, v53);
              (*((void (**)(long long *, float))&v244 + 1))(&v243, v220* (float)(vmuls_lane_f32(v35, v58, 2)+ (float)((float)(v216 * v58.f32[0]) + vmuls_lane_f32(v34, *(float32x2_t *)v58.f32, 1))));
              switch((char)v10)
              {
                case 1:
                  float32x4_t v57 = vaddq_f32(vmulq_n_f32(v59, v225), *v56);
                  break;
                case 2:
                  float32x4_t v57 = vmulq_f32(vmulq_n_f32(v59, v225), *v56);
                  break;
                case 3:
                  float32x4_t v57 = vaddq_f32(*v56, vmulq_n_f32(vsubq_f32(v59, *v56), v225));
                  break;
                default:
                  float32x4_t v57 = vmulq_n_f32(v59, v225);
                  break;
              }
              float32x4_t v53 = v207;
              *v56++ = v57;
              ++v55;
              --v54;
            }
            while (v54);
          }
          uint64_t i = v194;
        }
        sub_1B6345178(v32, (unsigned __int16 **)&v234, (uint64_t)v273);
        sub_1B634507C((char *)v42);
        ecs_stack_allocator_pop_snapshot(v201);
        if (v33)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v42 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v42 + 376));
        }
        swift_release();
        ++v36;
      }
      while (v36 != v176);
      goto LABEL_155;
  }
  do
  {
    uint64_t v197 = v117;
    uint64_t v204 = v116;
    uint64_t v118 = (unsigned int *)(v171 + 48 * v116);
    uint64_t v120 = (uint64_t *)*((void *)v118 + 2);
    uint64_t v119 = *((void *)v118 + 3);
    uint64_t v121 = *((void *)v118 + 4);
    uint64_t v122 = *((void *)v118 + 5);
    uint64_t v184 = v118[1];
    uint64_t v190 = *v118;
    if (v115)
    {
      float32x4_t v123 = *(os_unfair_lock_s **)(v122 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v123);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v122 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v114);
    sub_1B6381788(v167, (uint64_t)v273, (uint64_t)&qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext, MEMORY[0x1E4FBB718], (uint64_t (*)(void, uint64_t, uint64_t, uint64_t))sub_1B62D8588);
    uint64_t v124 = v210[4];
    uint64_t v125 = *(void *)(*(void *)(*(void *)(*(void *)(v122 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v210[6] = ecs_stack_allocator_allocate(v124, 48 * v125, 8);
    v210[7] = v125;
    v163[1] = 0;
    v163[2] = 0;
    *uint64_t v163 = 0;
    swift_release();
    uint64_t v126 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v120, v119, v121, (uint64_t)v210);
    uint64_t v127 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v120, v119, v121, (uint64_t)v210);
    uint64_t v128 = (float32x2_t *)v127;
    if (v120)
    {
      if (!v121) {
        goto LABEL_122;
      }
      uint64_t v114 = v160;
      uint64_t v129 = v204;
      uint64_t v117 = v197;
      do
      {
        unint64_t v131 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v223, COERCE_FLOAT(*(_OWORD *)v128->f32)), v219, *v128, 1), v215, *(float32x4_t *)v128->f32, 2), v212, *(float32x4_t *)v128->f32, 3).u64[0];
        float v132 = atan2f(*((float *)&v131 + 1), *(float *)&v131);
        (*((void (**)(long long *, float))&v244 + 1))(&v243, (float)(v132 * 0.15915) + 0.5);
        switch((char)v10)
        {
          case 1:
            float32x4_t v130 = vaddq_f32(vmulq_n_f32(v133, v225), *v126);
            break;
          case 2:
            float32x4_t v130 = vmulq_f32(vmulq_n_f32(v133, v225), *v126);
            break;
          case 3:
            float32x4_t v130 = vaddq_f32(*v126, vmulq_n_f32(vsubq_f32(v133, *v126), v225));
            break;
          default:
            float32x4_t v130 = vmulq_n_f32(v133, v225);
            break;
        }
        *v126++ = v130;
        v128 += 2;
        --v121;
      }
      while (v121);
    }
    else
    {
      if (v190 == v184)
      {
LABEL_122:
        uint64_t v114 = v160;
        uint64_t v129 = v204;
        uint64_t v117 = v197;
        goto LABEL_123;
      }
      uint64_t v134 = v184 - v190;
      __n128 v135 = (float32x2_t *)(v127 + 16 * v190);
      int v136 = &v126[v190];
      uint64_t v114 = v160;
      uint64_t v129 = v204;
      uint64_t v117 = v197;
      do
      {
        unint64_t v138 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v223, COERCE_FLOAT(*(_OWORD *)v135->f32)), v219, *v135, 1), v215, *(float32x4_t *)v135->f32, 2), v212, *(float32x4_t *)v135->f32, 3).u64[0];
        float v139 = atan2f(*((float *)&v138 + 1), *(float *)&v138);
        (*((void (**)(long long *, float))&v244 + 1))(&v243, (float)(v139 * 0.15915) + 0.5);
        switch((char)v10)
        {
          case 1:
            float32x4_t v137 = vaddq_f32(vmulq_n_f32(v140, v225), *v136);
            break;
          case 2:
            float32x4_t v137 = vmulq_f32(vmulq_n_f32(v140, v225), *v136);
            break;
          case 3:
            float32x4_t v137 = vaddq_f32(*v136, vmulq_n_f32(vsubq_f32(v140, *v136), v225));
            break;
          default:
            float32x4_t v137 = vmulq_n_f32(v140, v225);
            break;
        }
        *v136++ = v137;
        v135 += 2;
        --v134;
      }
      while (v134);
    }
LABEL_123:
    sub_1B6345178(v210, (unsigned __int16 **)&v234, (uint64_t)v273);
    sub_1B634507C((char *)v122);
    ecs_stack_allocator_pop_snapshot(v114);
    int v115 = v175;
    if (v175)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v122 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v122 + 376));
    }
    swift_release();
    uint64_t v116 = v129 + 1;
  }
  while (v116 != v179);
LABEL_155:
  sub_1B66576EC(v246);
  sub_1B62CA064((uint64_t)&v231);
  swift_release();
  sub_1B6657794(v249, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  sub_1B6657794(v249, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C2BF2C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  sub_1B6395C30(0, &qword_1E9DD7368, (uint64_t (*)(void))sub_1B6C2C5A4, (uint64_t)&type metadata for ParticleColorOverPosition.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v28 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  char v8 = (char *)&v25 - v7;
  sub_1B62D2A54(0, (unint64_t *)&unk_1EB980D90, (uint64_t (*)(uint64_t))sub_1B6395D64, MEMORY[0x1E4FBBE00]);
  uint64_t v9 = swift_allocObject();
  *(_OWORD *)(v9 + 16) = xmmword_1B6E76B30;
  simd_float4 v30 = (simd_float4)xmmword_1B6E72D40;
  unsigned __int32 v10 = _simd_pow_f4((simd_float4)xmmword_1B6EB7A30, (simd_float4)xmmword_1B6E72D40).u32[0];
  DWORD2(v11) = 0;
  *(void *)&long long v11 = v10;
  HIDWORD(v11) = 1.0;
  *(_OWORD *)(v9 + 32) = v11;
  *(_DWORD *)(v9 + 48) = 0;
  simd_float4 v12 = _simd_pow_f4((simd_float4)xmmword_1B6EB7A40, v30);
  LODWORD(v13) = 0;
  DWORD2(v13) = 0;
  DWORD1(v13) = v12.i32[1];
  HIDWORD(v13) = 1.0;
  *(_OWORD *)(v9 + 64) = v13;
  *(_DWORD *)(v9 + 80) = 1065353216;
  uint64_t v14 = sub_1B6397618(v9);
  swift_setDeallocating();
  swift_deallocClassInstance();
  sub_1B639EA20(v14);
  v30.i64[0] = v15;
  swift_bridgeObjectRelease();
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C2C5A4();
  sub_1B6E33A48();
  if (v2)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    uint64_t v17 = v28;
    uint64_t v16 = v29;
    char v34 = 0;
    sub_1B66C52AC();
    sub_1B6E32DF8();
    int v18 = v31;
    char v34 = 1;
    sub_1B62AAB40();
    sub_1B6E32DF8();
    int v27 = v18;
    int v19 = v31;
    char v34 = 2;
    sub_1B63BD348();
    sub_1B6E32DF8();
    int v26 = v19;
    LOBYTE(v19) = v31;
    int v20 = HIDWORD(v31);
    char v34 = 3;
    sub_1B639D880();
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v8, v5);
    uint64_t v21 = v31;
    uint64_t v22 = v32;
    char v23 = v33;
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    *(unsigned char *)uint64_t v16 = v27;
    *(unsigned char *)(v16 + 1) = v26;
    *(unsigned char *)(v16 + 4) = v19;
    *(_DWORD *)(v16 + 8) = v20;
    *(void *)(v16 + 16) = v21;
    *(void *)(v16 + 24) = v22;
    *(unsigned char *)(v16 + 32) = v23;
  }
  return result;
}

unint64_t sub_1B6C2C31C()
{
  unint64_t result = qword_1E9DD7348;
  if (!qword_1E9DD7348)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7348);
  }
  return result;
}

uint64_t initializeWithCopy for ParticleColorOverPosition(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(void *)(a1 + 4) = *(void *)(a2 + 4);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticleColorOverPosition(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 1) = *(unsigned char *)(a2 + 1);
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ParticleColorOverPosition(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(unsigned char *)(a1 + 4) = *(unsigned char *)(a2 + 4);
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  return a1;
}

ValueMetadata *type metadata accessor for ParticleColorOverPosition()
{
  return &type metadata for ParticleColorOverPosition;
}

ValueMetadata *type metadata accessor for ParticleColorOverPosition.GradientMode()
{
  return &type metadata for ParticleColorOverPosition.GradientMode;
}

unint64_t sub_1B6C2C4D0()
{
  unint64_t result = qword_1E9DD7350;
  if (!qword_1E9DD7350)
  {
    sub_1B62D8588(255, &qword_1E9DD7358, (uint64_t)&type metadata for ParticleColorOverPosition.GradientMode, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7350);
  }
  return result;
}

unint64_t sub_1B6C2C550()
{
  unint64_t result = qword_1E9DD7360;
  if (!qword_1E9DD7360)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7360);
  }
  return result;
}

unint64_t sub_1B6C2C5A4()
{
  unint64_t result = qword_1E9DD7370;
  if (!qword_1E9DD7370)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7370);
  }
  return result;
}

unsigned char *_s3VFX25ParticleColorOverPositionV12GradientModeOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C2C6C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleColorOverPosition.CodingKeys()
{
  return &type metadata for ParticleColorOverPosition.CodingKeys;
}

unint64_t sub_1B6C2C700()
{
  unint64_t result = qword_1E9DD7380;
  if (!qword_1E9DD7380)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7380);
  }
  return result;
}

unint64_t sub_1B6C2C758()
{
  unint64_t result = qword_1E9DD7388;
  if (!qword_1E9DD7388)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7388);
  }
  return result;
}

unint64_t sub_1B6C2C7B0()
{
  unint64_t result = qword_1E9DD7390;
  if (!qword_1E9DD7390)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7390);
  }
  return result;
}

uint64_t sub_1B6C2C804(char a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1B6C12F0C((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1F0F76610, a2, a3);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    sub_1B6662354((uint64_t)v38);
    if (v39)
    {
      sub_1B6642FFC();
      if (swift_dynamicCast())
      {
        uint64_t v7 = v34;
        switch(a1)
        {
          case 1:
            int64_t v8 = *(void *)(v34 + 16);
            if (!v8)
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_36;
            }
            swift_bridgeObjectRetain();
            sub_1B6C3D398(0, v8, 0);
            uint64_t v9 = 0;
            do
            {
              uint64_t v10 = *(void *)(v7 + 8 * v9 + 32);
              unint64_t v12 = *(void *)(v6 + 16);
              unint64_t v11 = *(void *)(v6 + 24);
              if (v12 >= v11 >> 1)
              {
                sub_1B6C3D398(v11 > 1, v12 + 1, 1);
                uint64_t v7 = v34;
              }
              ++v9;
              *(void *)(v6 + 16) = v12 + 1;
              uint64_t v13 = v6 + 16 * v12;
              *(void *)(v13 + 32) = v10;
              *(void *)(v13 + 40) = a3;
            }
            while (v8 != v9);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            break;
          case 2:
            int64_t v14 = *(void *)(v35 + 16);
            if (v14)
            {
              swift_bridgeObjectRetain();
              sub_1B6C3D398(0, v14, 0);
              uint64_t v15 = v35;
              uint64_t v16 = 0;
              do
              {
                uint64_t v17 = *(void *)(v15 + 8 * v16 + 32);
                unint64_t v19 = *(void *)(v6 + 16);
                unint64_t v18 = *(void *)(v6 + 24);
                if (v19 >= v18 >> 1)
                {
                  sub_1B6C3D398(v18 > 1, v19 + 1, 1);
                  uint64_t v15 = v35;
                }
                ++v16;
                *(void *)(v6 + 16) = v19 + 1;
                uint64_t v20 = v6 + 16 * v19;
                *(void *)(v20 + 32) = v17;
                *(void *)(v20 + 40) = a3;
              }
              while (v14 != v16);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease_n();
            }
            else
            {
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
LABEL_35:
              swift_bridgeObjectRelease();
            }
LABEL_36:
            swift_bridgeObjectRelease();
            break;
          case 3:
            int64_t v21 = *(void *)(v36 + 16);
            if (!v21) {
              goto LABEL_33;
            }
            swift_bridgeObjectRetain();
            sub_1B6C3D398(0, v21, 0);
            uint64_t v22 = 0;
            do
            {
              uint64_t v23 = *(void *)(v36 + 8 * v22 + 32);
              unint64_t v25 = *(void *)(v6 + 16);
              unint64_t v24 = *(void *)(v6 + 24);
              if (v25 >= v24 >> 1) {
                sub_1B6C3D398(v24 > 1, v25 + 1, 1);
              }
              ++v22;
              *(void *)(v6 + 16) = v25 + 1;
              uint64_t v26 = v6 + 16 * v25;
              *(void *)(v26 + 32) = v23;
              *(void *)(v26 + 40) = a3;
            }
            while (v21 != v22);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease_n();
            goto LABEL_35;
          case 4:
            int64_t v27 = *(void *)(v37 + 16);
            if (v27)
            {
              swift_bridgeObjectRetain();
              sub_1B6C3D398(0, v27, 0);
              uint64_t v28 = 0;
              do
              {
                uint64_t v29 = *(void *)(v37 + 8 * v28 + 32);
                unint64_t v31 = *(void *)(v6 + 16);
                unint64_t v30 = *(void *)(v6 + 24);
                if (v31 >= v30 >> 1) {
                  sub_1B6C3D398(v30 > 1, v31 + 1, 1);
                }
                ++v28;
                *(void *)(v6 + 16) = v31 + 1;
                uint64_t v32 = v6 + 16 * v31;
                *(void *)(v32 + 32) = v29;
                *(void *)(v32 + 40) = a3;
              }
              while (v27 != v28);
              swift_bridgeObjectRelease_n();
            }
            else
            {
LABEL_33:
              swift_bridgeObjectRelease();
            }
            swift_bridgeObjectRelease();
            goto LABEL_35;
          default:
            swift_release();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            return v6;
        }
      }
      swift_release();
    }
    else
    {
      swift_release();
      sub_1B6C2CF28((uint64_t)v38);
    }
  }
  return v6;
}

uint64_t sub_1B6C2CC94(int32x2_t *a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 0xFFFFFFFFLL)
  {
LABEL_2:
    char v5 = 0;
    return v5 & 1;
  }
  char v5 = 0;
  if (a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a3 < *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    if (HIDWORD(a3) != -1
      && *(_DWORD *)(*(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)a3 + 8) != HIDWORD(a3))
    {
      goto LABEL_2;
    }
    sub_1B62C91B8((uint64_t)&type metadata for EmitterDescription);
    if (v7) {
      goto LABEL_2;
    }
    swift_retain();
    int64_t v8 = (void (*)(uint64_t *, void))swift_modifyAtWritableKeyPath();
    uint64_t v10 = v9;
    char v11 = sub_1B69197F8(*v9, a1);
    if ((v11 & 1) == 0)
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      *uint64_t v10 = a1;
    }
    char v5 = v11 ^ 1;
    v8(&v12, 0);
    swift_release();
  }
  return v5 & 1;
}

uint64_t sub_1B6C2CDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3 == 0xFFFFFFFFLL) {
    return 0;
  }
  uint64_t v5 = 0;
  if (a3 << 32 >= (uint64_t)0xFFFFFFFF00000001
    && (int)a3 < *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
  {
    if (HIDWORD(a3) != -1
      && *(_DWORD *)(*(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)a3 + 8) != HIDWORD(a3))
    {
      return 0;
    }
    sub_1B62C91B8((uint64_t)&type metadata for Parent);
    if (v7) {
      return 0;
    }
    swift_retain();
    uint64_t v9 = (void (*)(uint64_t *, void))swift_modifyAtWritableKeyPath();
    BOOL v10 = *v8 == a1 && v8[1] == HIDWORD(a1);
    uint64_t v5 = !v10;
    if (!v10) {
      *(void *)int64_t v8 = a1;
    }
    v9(&v11, 0);
    swift_release();
  }
  return v5;
}

uint64_t sub_1B6C2CF28(uint64_t a1)
{
  sub_1B6B47570();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B6C2CF84(uint64_t result, char a2, uint64_t a3, unint64_t a4)
{
  unint64_t v4 = HIDWORD(a4);
  switch(a2)
  {
    case 1:
      sub_1B6987D8C(result, (uint64_t)v36);
      int64_t v7 = *(void *)(a3 + 16);
      int64_t v8 = (int32x2_t *)MEMORY[0x1E4FBC860];
      if (v7)
      {
        v34[0] = MEMORY[0x1E4FBC860];
        sub_1B62E1D20(0, v7, 0);
        int64_t v8 = (int32x2_t *)v34[0];
        uint64_t v9 = (int32x2_t *)(a3 + 32);
        unint64_t v10 = *(void *)(v34[0] + 16);
        do
        {
          int32x2_t v11 = *v9;
          v34[0] = v8;
          unint64_t v12 = (unint64_t)v8[3];
          if (v10 >= v12 >> 1)
          {
            sub_1B62E1D20(v12 > 1, v10 + 1, 1);
            int64_t v8 = (int32x2_t *)v34[0];
          }
          v8[2] = (int32x2_t)(v10 + 1);
          v8[v10 + 4] = v11;
          v9 += 2;
          ++v10;
          --v7;
        }
        while (v7);
      }
      goto LABEL_25;
    case 2:
      sub_1B6987D8C(result, (uint64_t)v36);
      int64_t v13 = *(void *)(a3 + 16);
      int64_t v8 = (int32x2_t *)MEMORY[0x1E4FBC860];
      if (v13)
      {
        v34[0] = MEMORY[0x1E4FBC860];
        sub_1B62E1D20(0, v13, 0);
        int64_t v8 = (int32x2_t *)v34[0];
        int64_t v14 = (int32x2_t *)(a3 + 32);
        unint64_t v15 = *(void *)(v34[0] + 16);
        do
        {
          int32x2_t v16 = *v14;
          v34[0] = v8;
          unint64_t v17 = (unint64_t)v8[3];
          if (v15 >= v17 >> 1)
          {
            sub_1B62E1D20(v17 > 1, v15 + 1, 1);
            int64_t v8 = (int32x2_t *)v34[0];
          }
          v8[2] = (int32x2_t)(v15 + 1);
          v8[v15 + 4] = v16;
          v14 += 2;
          ++v15;
          --v13;
        }
        while (v13);
      }
      goto LABEL_25;
    case 3:
      sub_1B6987D8C(result, (uint64_t)v36);
      int64_t v18 = *(void *)(a3 + 16);
      int64_t v8 = (int32x2_t *)MEMORY[0x1E4FBC860];
      if (v18)
      {
        v34[0] = MEMORY[0x1E4FBC860];
        sub_1B62E1D20(0, v18, 0);
        int64_t v8 = (int32x2_t *)v34[0];
        unint64_t v19 = (int32x2_t *)(a3 + 32);
        unint64_t v20 = *(void *)(v34[0] + 16);
        do
        {
          int32x2_t v21 = *v19;
          v34[0] = v8;
          unint64_t v22 = (unint64_t)v8[3];
          if (v20 >= v22 >> 1)
          {
            sub_1B62E1D20(v22 > 1, v20 + 1, 1);
            int64_t v8 = (int32x2_t *)v34[0];
          }
          v8[2] = (int32x2_t)(v20 + 1);
          v8[v20 + 4] = v21;
          v19 += 2;
          ++v20;
          --v18;
        }
        while (v18);
      }
      goto LABEL_25;
    case 4:
      sub_1B6987D8C(result, (uint64_t)v36);
      int64_t v23 = *(void *)(a3 + 16);
      int64_t v8 = (int32x2_t *)MEMORY[0x1E4FBC860];
      if (v23)
      {
        v34[0] = MEMORY[0x1E4FBC860];
        sub_1B62E1D20(0, v23, 0);
        int64_t v8 = (int32x2_t *)v34[0];
        unint64_t v24 = (int32x2_t *)(a3 + 32);
        unint64_t v25 = *(void *)(v34[0] + 16);
        do
        {
          int32x2_t v26 = *v24;
          v34[0] = v8;
          unint64_t v27 = (unint64_t)v8[3];
          if (v25 >= v27 >> 1)
          {
            sub_1B62E1D20(v27 > 1, v25 + 1, 1);
            int64_t v8 = (int32x2_t *)v34[0];
          }
          v8[2] = (int32x2_t)(v25 + 1);
          v8[v25 + 4] = v26;
          v24 += 2;
          ++v25;
          --v23;
        }
        while (v23);
      }
LABEL_25:
      uint64_t KeyPath = swift_getKeyPath();
      if (a4 == -1 && !v4) {
        goto LABEL_34;
      }
      uint64_t v29 = v36[0];
      swift_unownedRetainStrong();
      swift_release();
      if (swift_unknownObjectUnownedLoadStrong()) {
        swift_unknownObjectRelease();
      }
      swift_unownedRetainStrong();
      char v30 = sub_1B6C2CC94(v8, KeyPath, a4);
      swift_release();
      uint64_t Strong = swift_unknownObjectUnownedLoadStrong();
      uint64_t v32 = Strong;
      if (v30)
      {
        if (Strong) {
          swift_unknownObjectRelease();
        }
        if (v37 == 1)
        {
          swift_unownedRetainStrong();
          v34[0] = __PAIR64__(v4, a4);
          v34[1] = v29;
          sub_1B6C2DAC0();
          v34[5] = v33;
          v34[6] = &off_1F0F7FE30;
          v34[2] = KeyPath;
          v34[3] = v8;
          char v35 = 11;
          swift_bridgeObjectRetain();
          swift_retain();
          sub_1B6A62610((uint64_t)v34);
          swift_release();
          sub_1B67421B0((uint64_t)v34);
        }
LABEL_34:
        swift_bridgeObjectRelease();
        swift_release();
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_release();
        if (v32) {
          swift_unknownObjectRelease();
        }
      }
      return sub_1B636C450((uint64_t)v36);
    default:
      return result;
  }
}

uint64_t sub_1B6C2D3B0(char a1)
{
  uint64_t v2 = v1;
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v86 = qword_1EB997A18;
  int v87 = 0;
  char v88 = 2;
  uint64_t v89 = 0;
  char v90 = 2;
  uint64_t v91 = 0;
  swift_retain();
  sub_1B62A068C(1, (uint64_t)&v60);
  swift_release();
  uint64_t v80 = v60;
  int v81 = v61;
  char v82 = v62;
  unint64_t v83 = v63 & 0xFFFFFFFFFFFFFFFELL | a1 & 1;
  char v84 = v64;
  uint64_t v85 = v65;
  sub_1B62C9DA8(v1, (uint64_t)&v80, 0x200000000, v66);
  sub_1B62D7E68((uint64_t)v66, (uint64_t)v67, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (!*(void *)&v67[0])
  {
    sub_1B62CA064((uint64_t)&v60);
    return MEMORY[0x1E4FBC860];
  }
  long long v74 = v67[0];
  long long v75 = v67[1];
  uint64_t v76 = v68;
  if (v73 <= 0)
  {
    sub_1B62CA064((uint64_t)&v60);
    sub_1B632F170(v66);
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v52 = v70;
  if (!v70)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    long long v48 = (char *)MEMORY[0x1E4FBC860];
LABEL_69:
    sub_1B62CA064((uint64_t)&v60);
    sub_1B632F170(v66);
    sub_1B632F170(v66);
    return (uint64_t)v48;
  }
  uint64_t v51 = v69;
  uint64_t v59 = v72[4];
  char v58 = *(unsigned char *)(v71 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  float32x4_t v57 = v72;
  float32x4_t v49 = v72 + 8;
  uint64_t v50 = (uint64_t)(v72 + 6);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  long long v48 = (char *)MEMORY[0x1E4FBC860];
  while (1)
  {
    uint64_t v55 = v5;
    uint64_t v56 = v4;
    uint64_t v6 = (unsigned int *)(v51 + 48 * v4);
    uint64_t v7 = *v6;
    int64_t v8 = (uint64_t *)*((void *)v6 + 2);
    uint64_t v9 = *((void *)v6 + 4);
    uint64_t v10 = *((void *)v6 + 5);
    uint64_t v53 = v6[1];
    uint64_t v54 = *((void *)v6 + 3);
    if (v58)
    {
      int32x2_t v11 = *(os_unfair_lock_s **)(v10 + 376);
      swift_retain();
      os_unfair_lock_lock(v11);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v59);
    sub_1B62D7E68(v50, (uint64_t)v79, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
    uint64_t v12 = v57[4];
    uint64_t v13 = *(void *)(*(void *)(*(void *)(*(void *)(v10 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v57[6] = ecs_stack_allocator_allocate(v12, 48 * v13, 8);
    v57[7] = v13;
    v49[1] = 0;
    v49[2] = 0;
    void *v49 = 0;
    swift_release();
    sub_1B62C9024((uint64_t)&type metadata for EmitterDescription, (uint64_t)&off_1F0F76610, v8, v54, v9, (uint64_t)v57);
    if (v8)
    {
      if (!v9) {
        goto LABEL_39;
      }
      while (1)
      {
        uint64_t v15 = *v8++;
        uint64_t v14 = v15;
        uint64_t v16 = swift_retain();
        if (*(unsigned char *)(v10 + 184)) {
          goto LABEL_70;
        }
        int v17 = *(_DWORD *)(*(void *)(v10 + 168) + 4 * v14);
        int v18 = *(_DWORD *)(*(void *)(v16 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v17 + 8);
        swift_release();
        if (v17 == -1)
        {
          if (!v18) {
            goto LABEL_15;
          }
          swift_retain();
        }
        else
        {
          uint64_t v19 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
          swift_retain();
          if ((v17 & 0x80000000) == 0 && *(void *)(v2 + v19 + 8) > v17)
          {
            uint64_t v20 = *(void *)(v2 + v19);
            if (v18 == -1 || *(_DWORD *)(v20 + 12 * v17 + 8) == v18)
            {
              uint64_t v22 = *(void *)(*(void *)(*(void *)(v2 + 80) + 8 * *(__int16 *)(v20 + 12 * v17 + 6) + 32) + 16);
              uint64_t v23 = *(void *)(v22 + 128);
              if (*(void *)(v23 + 16))
              {
                unint64_t v24 = sub_1B62C1A30((uint64_t)&type metadata for EmitterDescription);
                if (v25)
                {
                  int32x2_t v26 = *(ValueMetadata **)(*(void *)(v22 + 24)
                                          + 16 * *(void *)(*(void *)(v23 + 56) + 8 * v24)
                                          + 32);
                  swift_release();
                  if (v26 == &type metadata for EmitterDescription)
                  {
                    if (swift_isUniquelyReferenced_nonNull_native()) {
                      unint64_t v27 = v48;
                    }
                    else {
                      unint64_t v27 = sub_1B68C65D4(0, *((void *)v48 + 2) + 1, 1, v48);
                    }
                    unint64_t v29 = *((void *)v27 + 2);
                    unint64_t v28 = *((void *)v27 + 3);
                    if (v29 >= v28 >> 1) {
                      unint64_t v27 = sub_1B68C65D4(v28 > 1, v29 + 1, 1, v27);
                    }
                    *((void *)v27 + 2) = v29 + 1;
                    long long v48 = v27;
                    char v30 = &v27[16 * v29];
                    *((_DWORD *)v30 + 8) = v17;
                    *((_DWORD *)v30 + 9) = v18;
                    *((void *)v30 + 5) = v2;
                  }
                  goto LABEL_15;
                }
              }
            }
          }
        }
        swift_release();
LABEL_15:
        if (!--v9) {
          goto LABEL_39;
        }
      }
    }
    uint64_t v31 = v53;
    if (v7 != v53) {
      break;
    }
LABEL_39:
    v77[0] = v74;
    v77[1] = v75;
    uint64_t v78 = v76;
    uint64_t v5 = v55;
    sub_1B6345178(v57, (unsigned __int16 **)v77, (uint64_t)v79);
    sub_1B634507C((char *)v10);
    ecs_stack_allocator_pop_snapshot(v59);
    if (v58)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v10 + 376));
    }
    swift_release();
    uint64_t v4 = v56 + 1;
    if (v56 + 1 == v52) {
      goto LABEL_69;
    }
  }
  while (1)
  {
    uint64_t v32 = swift_retain();
    if (*(unsigned char *)(v10 + 184)) {
      break;
    }
    int v33 = *(_DWORD *)(*(void *)(v10 + 168) + 4 * v7);
    int v34 = *(_DWORD *)(*(void *)(v32 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * v33 + 8);
    swift_release();
    if (v33 == -1)
    {
      if (!v34) {
        goto LABEL_42;
      }
      swift_retain();
    }
    else
    {
      uint64_t v35 = OBJC_IVAR____TtC3VFX13EntityManager__entries;
      swift_retain();
      if ((v33 & 0x80000000) == 0 && *(void *)(v2 + v35 + 8) > v33)
      {
        uint64_t v36 = *(void *)(v2 + v35);
        if (v34 == -1 || *(_DWORD *)(v36 + 12 * v33 + 8) == v34)
        {
          uint64_t v38 = *(void *)(*(void *)(*(void *)(v2 + 80) + 8 * *(__int16 *)(v36 + 12 * v33 + 6) + 32) + 16);
          uint64_t v39 = *(void *)(v38 + 128);
          if (*(void *)(v39 + 16))
          {
            unint64_t v40 = sub_1B62C1A30((uint64_t)&type metadata for EmitterDescription);
            if (v41)
            {
              uint64_t v42 = *(ValueMetadata **)(*(void *)(v38 + 24) + 16 * *(void *)(*(void *)(v39 + 56) + 8 * v40) + 32);
              swift_release();
              if (v42 == &type metadata for EmitterDescription)
              {
                uint64_t v31 = v53;
                if (swift_isUniquelyReferenced_nonNull_native()) {
                  uint64_t v43 = v48;
                }
                else {
                  uint64_t v43 = sub_1B68C65D4(0, *((void *)v48 + 2) + 1, 1, v48);
                }
                unint64_t v45 = *((void *)v43 + 2);
                unint64_t v44 = *((void *)v43 + 3);
                if (v45 >= v44 >> 1) {
                  uint64_t v43 = sub_1B68C65D4(v44 > 1, v45 + 1, 1, v43);
                }
                *((void *)v43 + 2) = v45 + 1;
                long long v48 = v43;
                uint64_t v46 = &v43[16 * v45];
                *((_DWORD *)v46 + 8) = v33;
                *((_DWORD *)v46 + 9) = v34;
                *((void *)v46 + 5) = v2;
              }
              else
              {
                uint64_t v31 = v53;
              }
            }
            else
            {
              swift_release();
              uint64_t v31 = v53;
            }
            goto LABEL_42;
          }
        }
      }
    }
    swift_release();
LABEL_42:
    if (v31 == ++v7) {
      goto LABEL_39;
    }
  }
LABEL_70:
  uint64_t result = sub_1B6E32BE8();
  __break(1u);
  return result;
}

void sub_1B6C2DAC0()
{
  if (!qword_1E9DD7398)
  {
    sub_1B63176A4(255, &qword_1EB9802C0, (uint64_t)&type metadata for Entity, MEMORY[0x1E4FBB320]);
    unint64_t v0 = type metadata accessor for ComponentValueWriter();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7398);
    }
  }
}

ValueMetadata *type metadata accessor for VFXEmitter()
{
  return &type metadata for VFXEmitter;
}

uint64_t sub_1B6C2DB5C()
{
  sub_1B633AF88();
  swift_bridgeObjectRetain();
  uint64_t v1 = (void *)sub_1B6E32688();
  swift_bridgeObjectRelease();
  if (v1[2] < 2uLL)
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = *(void *)(v0 + 24);
    swift_bridgeObjectRetain();
  }
  else
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v1 = sub_1B6C167C4(v1);
    }
    --v1[2];
    swift_bridgeObjectRelease();
    sub_1B6910794();
    sub_1B6C2E1F8((unint64_t *)&qword_1E9DD26F8, 255, (void (*)(uint64_t))sub_1B6910794);
    sub_1B6655408();
    sub_1B6E31AD8();
    swift_bridgeObjectRelease();
    return sub_1B6E31A68();
  }
  return v2;
}

uint64_t sub_1B6C2DCDC()
{
  return 0;
}

uint64_t sub_1B6C2DE14@<X0>(uint64_t a1@<X8>)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    uint64_t v4 = result;
    uint64_t v8 = *(void *)(v1 + 24);
    uint64_t v9 = *(void *)(v1 + 32);
    swift_bridgeObjectRetain_n();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t v5 = *(void *)(v4 + 16);
    if (v5 && *(void *)(v5 + 16))
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v6 = sub_1B62B2CE0(v8, v9);
      if (v7)
      {
        sub_1B66459A4(*(void *)(v5 + 56) + 88 * v6, a1);
      }
      else
      {
        *(void *)(a1 + 80) = 0;
        *(_OWORD *)(a1 + 48) = 0u;
        *(_OWORD *)(a1 + 64) = 0u;
        *(_OWORD *)(a1 + 16) = 0u;
        *(_OWORD *)(a1 + 32) = 0u;
        *(_OWORD *)a1 = 0u;
      }
      swift_release();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease_n();
    }
    else
    {
      *(void *)(a1 + 80) = 0;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(_OWORD *)(a1 + 32) = 0u;
      *(_OWORD *)a1 = 0u;
      swift_release();
      return swift_bridgeObjectRelease();
    }
  }
  else
  {
    *(void *)(a1 + 80) = 0;
    *(_OWORD *)(a1 + 48) = 0u;
    *(_OWORD *)(a1 + 64) = 0u;
    *(_OWORD *)(a1 + 16) = 0u;
    *(_OWORD *)(a1 + 32) = 0u;
    *(_OWORD *)a1 = 0u;
  }
  return result;
}

uint64_t sub_1B6C2DF80()
{
  swift_weakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B629DCAC(*(void *)(v0 + 56), *(void *)(v0 + 64));

  return swift_deallocClassInstance();
}

uint64_t _s13ParameterBaseCMa()
{
  return self;
}

uint64_t sub_1B6C2DFFC()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C2E05C()
{
  swift_bridgeObjectRetain();
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C2E0B8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C2E114(uint64_t a1, uint64_t a2)
{
  if (*(void *)(*(void *)a1 + 40) == *(void *)(*(void *)a2 + 40)
    && *(void *)(*(void *)a1 + 48) == *(void *)(*(void *)a2 + 48))
  {
    return 1;
  }
  else
  {
    return sub_1B6E334B8();
  }
}

uint64_t sub_1B6C2E140()
{
  return sub_1B6C2DCDC();
}

uint64_t _s11ParameterInCMa()
{
  return self;
}

uint64_t _s12ParameterOutCMa()
{
  return self;
}

uint64_t sub_1B6C2E1B0(uint64_t a1, uint64_t a2)
{
  return sub_1B6C2E1F8(&qword_1E9DD73A0, a2, (void (*)(uint64_t))_s13ParameterBaseCMa);
}

uint64_t sub_1B6C2E1F8(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t type metadata accessor for ParticleOpacityOverVelocity.System()
{
  return self;
}

uint64_t sub_1B6C2E264(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6C2F1EC(0, &qword_1E9DD73B8, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C2F148();
  sub_1B6E33A88();
  v14[0] = *(_OWORD *)v3;
  *(_OWORD *)((char *)v14 + 9) = *(_OWORD *)(v3 + 9);
  char v13 = 0;
  sub_1B6C2F19C(0, (unint64_t *)&qword_1EB97FDA0, (uint64_t)&off_1F0FAB230, (uint64_t (*)(void, void))type metadata accessor for Curve);
  sub_1B6C2F250((unint64_t *)&qword_1E9DD85D0);
  sub_1B6E32FA8();
  if (!v2)
  {
    *(void *)&v14[0] = *(void *)(v3 + 28);
    char v13 = 1;
    sub_1B6C2F19C(0, (unint64_t *)&qword_1EB980410, MEMORY[0x1E4FBB498], MEMORY[0x1E4FBB6A0]);
    sub_1B62AA750(qword_1E9DD02C8);
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

const char *sub_1B6C2E4AC()
{
  return "OpacityOverVelocitySystem";
}

uint64_t sub_1B6C2E4C0(char *a1, char *a2)
{
  return sub_1B6BB8608(*a1, *a2);
}

uint64_t sub_1B6C2E4CC()
{
  if (*v0) {
    return 0x65676E6172;
  }
  else {
    return 0x6576727563;
  }
}

uint64_t sub_1B6C2E4F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6C2E660(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6C2E520(uint64_t a1)
{
  unint64_t v2 = sub_1B6C2F148();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C2E55C(uint64_t a1)
{
  unint64_t v2 = sub_1B6C2F148();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B6C2E598@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6C2EE04(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B6C2E5E0(void *a1)
{
  return sub_1B6C2E264(a1);
}

uint64_t sub_1B6C2E5F8()
{
  return type metadata accessor for ParticleOpacityOverVelocity.System();
}

double sub_1B6C2E618@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = sub_1B6D3EC54((uint64_t)&unk_1F0F98190);
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = 0;
  *(unsigned char *)(a1 + 24) = 1;
  double result = 0.0078125;
  *(void *)(a1 + 28) = 0x3F80000000000000;
  return result;
}

uint64_t sub_1B6C2E660(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6576727563 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x65676E6172 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t *sub_1B6C2E744(uint64_t a1)
{
  uint64_t v67 = *MEMORY[0x1E4F143B8];
  uint64_t v2 = *(void *)a1;
  swift_retain();
  sub_1B67D20A0((uint64_t)v54);
  uint64_t v3 = v54[0];
  uint64_t v4 = v54[1];
  uint64_t v5 = v54[2];
  char v6 = v55;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B6319E94(v3, v4, v5, v6, 32, (uint64_t)v44);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  long long v7 = *(_OWORD *)(a1 + 104);
  long long v51 = *(_OWORD *)(a1 + 88);
  long long v52 = v7;
  uint64_t v53 = *(void *)(a1 + 120);
  sub_1B663F318((uint64_t)v45);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  float v8 = v56;
  float v9 = v57;
  v49[0] = v45[0];
  v49[1] = v45[1];
  uint64_t v50 = v46;
  sub_1B62C9DA8(v2, (uint64_t)v49, 0x200000000, v58);
  sub_1B62CA210((uint64_t)v58, (uint64_t)v59, (unint64_t *)&qword_1EB97DC50);
  if (!*(void *)&v59[0])
  {
    sub_1B62CA064((uint64_t)v45);
    return (uint64_t *)swift_release();
  }
  if (v65 <= 0 || (uint64_t v40 = v62) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B62CA064((uint64_t)v45);
    goto LABEL_23;
  }
  float v10 = 1.0 / (float)(v9 - v8);
  float v11 = -(float)(v8 * v10);
  uint64_t v12 = v64;
  uint64_t v13 = v64[4];
  char v43 = *(unsigned char *)(v63 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v47[0] = v59[0];
  v47[1] = v59[1];
  uint64_t v48 = v60;
  uint64_t v37 = (uint64_t)(v64 + 6);
  uint64_t v38 = v61;
  uint64_t v36 = v64 + 8;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  uint64_t v39 = v13;
  do
  {
    uint64_t v16 = (unsigned int *)(v38 + 48 * v14);
    uint64_t v17 = *v16;
    uint64_t v19 = (uint64_t *)*((void *)v16 + 2);
    uint64_t v18 = *((void *)v16 + 3);
    uint64_t v21 = *((void *)v16 + 4);
    uint64_t v20 = *((void *)v16 + 5);
    uint64_t v41 = v16[1];
    uint64_t v42 = v15;
    if (v43)
    {
      uint64_t v22 = *(os_unfair_lock_s **)(v20 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v22);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v20 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v13);
    sub_1B62CA210(v37, (uint64_t)v66, &qword_1EB97DE20);
    uint64_t v23 = v12[4];
    uint64_t v24 = *(void *)(*(void *)(*(void *)(*(void *)(v20 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    long long v12[6] = ecs_stack_allocator_allocate(v23, 48 * v24, 8);
    v12[7] = v24;
    v36[1] = 0;
    v36[2] = 0;
    *uint64_t v36 = 0;
    swift_release();
    char v25 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v19, v18, v21, (uint64_t)v12);
    uint64_t v26 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v19, v18, v21, (uint64_t)v12);
    unint64_t v27 = (float32x4_t *)v26;
    if (v19)
    {
      if (v21)
      {
        uint64_t v15 = v42;
        do
        {
          float32x4_t v28 = *v27++;
          int8x16_t v29 = (int8x16_t)vmulq_f32(v28, v28);
          *char v25 = vmulq_n_f32(*v25, fminf(fmaxf(sample_curve((uint64_t)v44, v11+ (float)(v10* sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)))))), 0.0), 1.0));
          ++v25;
          --v21;
        }
        while (v21);
        goto LABEL_18;
      }
    }
    else if (v17 != v41)
    {
      uint64_t v30 = v41 - v17;
      uint64_t v31 = (float32x4_t *)(v26 + 16 * v17);
      uint64_t v32 = &v25[v17];
      uint64_t v15 = v42;
      do
      {
        float32x4_t v33 = *v31++;
        int8x16_t v34 = (int8x16_t)vmulq_f32(v33, v33);
        *uint64_t v32 = vmulq_n_f32(*v32, fminf(fmaxf(sample_curve((uint64_t)v44, v11+ (float)(v10* sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)))))), 0.0), 1.0));
        ++v32;
        --v30;
      }
      while (v30);
      goto LABEL_18;
    }
    uint64_t v15 = v42;
LABEL_18:
    sub_1B6345178(v12, (unsigned __int16 **)v47, (uint64_t)v66);
    sub_1B634507C((char *)v20);
    uint64_t v13 = v39;
    ecs_stack_allocator_pop_snapshot(v39);
    if (v43)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v20 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v20 + 376));
    }
    swift_release();
    ++v14;
  }
  while (v14 != v40);
  sub_1B62CA064((uint64_t)v45);
LABEL_23:
  swift_release();
  sub_1B632F170(v58);
  return sub_1B632F170(v58);
}

uint64_t initializeWithCopy for ParticleOpacityOverVelocity(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticleOpacityOverVelocity(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(_DWORD *)(a1 + 28) = *(_DWORD *)(a2 + 28);
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

uint64_t assignWithTake for ParticleOpacityOverVelocity(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 28) = *(void *)(a2 + 28);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleOpacityOverVelocity(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *((unsigned char *)a1 + 36)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  if ((unint64_t)*a1 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleOpacityOverVelocity(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0;
    if (a3 < 0) {
      *(unsigned char *)(result + 36) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)double result = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 36) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleOpacityOverVelocity()
{
  return &type metadata for ParticleOpacityOverVelocity;
}

uint64_t sub_1B6C2EE04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6C2F1EC(0, &qword_1E9DD73A8, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  float v10 = (char *)&v17 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C2F148();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B6C2F19C(0, (unint64_t *)&qword_1EB97FDA0, (uint64_t)&off_1F0FAB230, (uint64_t (*)(void, void))type metadata accessor for Curve);
  char v20 = 0;
  sub_1B6C2F250((unint64_t *)&qword_1EB97FD90);
  sub_1B6E32DF8();
  uint64_t v11 = v21;
  uint64_t v18 = v22;
  uint64_t v12 = v23;
  HIDWORD(v17) = v24;
  sub_1B6C2F19C(0, (unint64_t *)&qword_1EB980410, MEMORY[0x1E4FBB498], MEMORY[0x1E4FBB6A0]);
  char v20 = 1;
  sub_1B62AA750((unint64_t *)&qword_1EB980418);
  uint64_t v19 = v11;
  uint64_t v13 = v18;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B6E32DF8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v14 = v21;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v15 = v19;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v15;
  *(void *)(a2 + 8) = v13;
  *(void *)(a2 + 16) = v12;
  *(unsigned char *)(a2 + 24) = BYTE4(v17);
  *(void *)(a2 + 28) = v14;
  return result;
}

unint64_t sub_1B6C2F148()
{
  unint64_t result = qword_1E9DD73B0;
  if (!qword_1E9DD73B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD73B0);
  }
  return result;
}

void sub_1B6C2F19C(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, MEMORY[0x1E4FBB470]);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1B6C2F1EC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6C2F148();
    unint64_t v7 = a3(a1, &type metadata for ParticleOpacityOverVelocity.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1B6C2F250(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6C2F19C(255, (unint64_t *)&qword_1EB97FDA0, (uint64_t)&off_1F0FAB230, (uint64_t (*)(void, void))type metadata accessor for Curve);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ParticleOpacityOverVelocity.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C2F384);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleOpacityOverVelocity.CodingKeys()
{
  return &type metadata for ParticleOpacityOverVelocity.CodingKeys;
}

unint64_t sub_1B6C2F3C0()
{
  unint64_t result = qword_1E9DD73C0;
  if (!qword_1E9DD73C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD73C0);
  }
  return result;
}

unint64_t sub_1B6C2F418()
{
  unint64_t result = qword_1E9DD73C8;
  if (!qword_1E9DD73C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD73C8);
  }
  return result;
}

unint64_t sub_1B6C2F470()
{
  unint64_t result = qword_1E9DD73D0[0];
  if (!qword_1E9DD73D0[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9DD73D0);
  }
  return result;
}

unint64_t sub_1B6C2F4C4(unint64_t a1)
{
  switch(a1 >> 60)
  {
    case 1uLL:
      uint64_t v11 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      if (v11 < 0) {
        goto LABEL_37;
      }
      unint64_t v12 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v13 = v11 << 8;
      sub_1B67C52A4(v12);
      uint64_t v14 = sub_1B6C2F4C4(v12);
      sub_1B678FC34(v12);
      unint64_t result = v13 | (v14 << 16) | 6;
      break;
    case 2uLL:
      unint64_t v4 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      sub_1B67C52A4(v4);
      uint64_t v5 = sub_1B6C2F4C4(v4);
      sub_1B678FC34(v4);
      return (v5 << 8) | 7;
    case 3uLL:
      uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      if (v7 < 0) {
        goto LABEL_37;
      }
      unint64_t v8 = *(void *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x18);
      uint64_t v9 = v7 << 8;
      sub_1B67C52A4(v8);
      uint64_t v10 = sub_1B6C2F4C4(v8);
      sub_1B678FC34(v8);
      unint64_t result = v9 | (v10 << 16) | 0x1B;
      break;
    case 4uLL:
      return qword_1B6EB8180[*(char *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10)];
    case 5uLL:
      if (*(unsigned char *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10)) {
        return 33;
      }
      else {
        return 31;
      }
    case 6uLL:
      return ((unint64_t)*(unsigned __int8 *)((a1 & 0xFFFFFFFFFFFFFFFLL) + 0x10) << 8) | 0x1C;
    case 7uLL:
LABEL_36:
      sub_1B6E328C8();
      sub_1B6E31948();
      sub_1B6E32B18();
      sub_1B6E31948();
      sub_1B6E32BE8();
      __break(1u);
LABEL_37:
      sub_1B6E32BD8();
      __break(1u);
      JUMPOUT(0x1B6C2F804);
    case 8uLL:
      uint64_t v6 = __ROR8__(a1, 3) ^ 0x1000000000000000;
      unint64_t result = 1;
      switch(v6)
      {
        case 1:
          return 2;
        case 2:
          return 3;
        case 3:
          return 4;
        case 4:
          return 26;
        case 5:
          return 8;
        case 6:
          return 9;
        case 7:
          return 10;
        case 8:
          return 11;
        case 9:
          return 12;
        case 10:
          return 13;
        case 11:
          return 14;
        case 12:
          return 15;
        case 13:
          return 25;
        case 14:
          return 16;
        case 15:
          return 23;
        case 16:
          return 17;
        case 17:
          return 18;
        case 18:
          return 34;
        case 19:
        case 20:
        case 22:
          return v6;
        case 21:
          return 35;
        case 23:
          return 32;
        case 24:
          goto LABEL_36;
        default:
          return result;
      }
    default:
      unint64_t v1 = *(void *)(a1 + 16);
      sub_1B67C52A4(v1);
      uint64_t v2 = sub_1B6C2F4C4(v1);
      sub_1B678FC34(v1);
      unint64_t result = (v2 << 8) | 5;
      break;
  }
  return result;
}

unint64_t sub_1B6C2F88C(unint64_t a1)
{
  int v2 = a1 - 1;
  unint64_t result = 0x8000000000000000;
  switch(v2)
  {
    case 0:
      return result;
    case 1:
      return 0x8000000000000008;
    case 2:
      return 0x8000000000000010;
    case 3:
      return 0x8000000000000018;
    case 4:
      uint64_t v8 = sub_1B6C2F88C(a1 >> 8);
      if ((~v8 & 0xF000000000000007) == 0) {
        goto LABEL_44;
      }
      uint64_t v9 = v8;
      unint64_t result = swift_allocObject();
      *(void *)(result + 16) = v9;
      return result;
    case 5:
      uint64_t v12 = sub_1B6C2F88C(a1 >> 16);
      if ((~v12 & 0xF000000000000007) == 0) {
        goto LABEL_44;
      }
      uint64_t v13 = v12;
      uint64_t v14 = swift_allocObject();
      *(void *)(v14 + 16) = BYTE1(a1);
      *(void *)(v14 + 24) = v13;
      return v14 | 0x1000000000000000;
    case 6:
      uint64_t v15 = sub_1B6C2F88C(a1 >> 8);
      if ((~v15 & 0xF000000000000007) == 0) {
        goto LABEL_44;
      }
      uint64_t v16 = v15;
      uint64_t v17 = swift_allocObject();
      *(void *)(v17 + 16) = v16;
      return v17 | 0x2000000000000000;
    case 7:
      return 0x8000000000000028;
    case 8:
      return 0x8000000000000030;
    case 9:
      return 0x8000000000000038;
    case 10:
      return 0x8000000000000040;
    case 11:
      return 0x8000000000000048;
    case 12:
      return 0x8000000000000050;
    case 13:
      uint64_t v7 = 80;
      goto LABEL_31;
    case 14:
      return 0x8000000000000060;
    case 15:
      return 0x8000000000000070;
    case 16:
      return 0x8000000000000080;
    case 17:
      return 0x8000000000000088;
    case 18:
      uint64_t v7 = 144;
      goto LABEL_31;
    case 19:
      return 0x80000000000000A0;
    case 20:
      uint64_t v10 = swift_allocObject();
      char v11 = 1;
      goto LABEL_42;
    case 21:
      return 0x80000000000000B0;
    case 22:
      return 0x8000000000000078;
    case 23:
      uint64_t v19 = swift_allocObject();
      *(unsigned char *)(v19 + 16) = 0;
      return v19 | 0x4000000000000000;
    case 24:
      return 0x8000000000000068;
    case 25:
      return 0x8000000000000020;
    case 26:
      uint64_t v20 = sub_1B6C2F88C(a1 >> 16);
      if ((~v20 & 0xF000000000000007) == 0) {
        goto LABEL_44;
      }
      uint64_t v21 = v20;
      uint64_t v22 = swift_allocObject();
      *(void *)(v22 + 16) = BYTE1(a1);
      *(void *)(v22 + 24) = v21;
      return v22 | 0x3000000000000000;
    case 27:
      if (a1 >= 0x10000)
      {
        sub_1B6E32BD8();
        __break(1u);
        JUMPOUT(0x1B6C2FC70);
      }
      char v4 = sub_1B6391FF8(a1 >> 8);
      if (v4 == 7) {
        goto LABEL_44;
      }
      char v5 = v4;
      uint64_t v6 = swift_allocObject();
      *(unsigned char *)(v6 + 16) = v5;
      return v6 | 0x6000000000000000;
    case 28:
      uint64_t v10 = swift_allocObject();
      char v11 = 3;
      goto LABEL_42;
    case 29:
      uint64_t v10 = swift_allocObject();
      char v11 = 2;
LABEL_42:
      *(unsigned char *)(v10 + 16) = v11;
      return v10 | 0x4000000000000000;
    case 30:
      uint64_t v18 = swift_allocObject();
      *(unsigned char *)(v18 + 16) = 0;
      goto LABEL_36;
    case 31:
      uint64_t v7 = 176;
      goto LABEL_31;
    case 32:
      uint64_t v18 = swift_allocObject();
      *(unsigned char *)(v18 + 16) = 1;
LABEL_36:
      unint64_t result = v18 | 0x5000000000000000;
      break;
    case 33:
      unint64_t result = 0x8000000000000090;
      break;
    case 34:
      uint64_t v7 = 160;
LABEL_31:
      unint64_t result = v7 | 0x8000000000000008;
      break;
    default:
LABEL_44:
      unint64_t result = 0xF000000000000007;
      break;
  }
  return result;
}

uint64_t sub_1B6C2FCFC(void *a1)
{
  uint64_t v3 = (uint64_t)sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A28();
  if (!v1)
  {
    sub_1B62C14BC(v9, v9[3]);
    unint64_t v4 = sub_1B6E33548();
    unint64_t v5 = v4;
    unint64_t v6 = sub_1B6C2F88C(v4);
    if ((~v6 & 0xF000000000000007) != 0)
    {
      uint64_t v3 = v6;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
      return v3;
    }
    v9[6] = v5;
    sub_1B6E33098();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t v3 = 0x3A65707954796E41;
    sub_1B67CD358();
    swift_allocError();
    *(void *)uint64_t v7 = 0x3A65707954796E41;
    *(void *)(v7 + 8) = 0xE900000000000020;
    *(unsigned char *)(v7 + 16) = 0;
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v9);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t sub_1B6C2FE54@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1B6C2FCFC(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1B6C2FE80(void *a1)
{
  unint64_t v2 = *v1;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  sub_1B6C2F4C4(v2);
  sub_1B62C550C((uint64_t)v4, v5);
  sub_1B6E335F8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B6C2FF24()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B6C2FF34()
{
  sub_1B678FC34(*(void *)(v0 + 24));

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B6C2FF6C()
{
  sub_1B678FC34(*(void *)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t type metadata accessor for OrderedDictionary()
{
  return sub_1B62C36EC();
}

void sub_1B6C2FFBC()
{
}

uint64_t sub_1B6C2FFC8()
{
  return sub_1B6E32078() & 1;
}

uint64_t sub_1B6C30030(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v25 = a2;
  uint64_t v13 = sub_1B6E324B8();
  MEMORY[0x1F4188790](v13 - 8, v14);
  uint64_t v16 = (char *)&v24 - v15;
  uint64_t v17 = *(void *)(a6 - 8);
  MEMORY[0x1F4188790](v18, v19);
  uint64_t v21 = (char *)&v24 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B6E31D78();
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 16))(a1, v21, a6);
  MEMORY[0x1BA9B31E0](v21, a4, a6, a7, a8);
  uint64_t v22 = *(void *)(a7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 48))(v16, 1, a7);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v21, a6);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v22 + 32))(v25, v16, a7);
}

void sub_1B6C30214()
{
}

void sub_1B6C30220()
{
}

uint64_t sub_1B6C30240(uint64_t result)
{
  *uint64_t v1 = result;
  return result;
}

void (*sub_1B6C30250(uint64_t **a1, uint64_t *a2, void *a3))(uint64_t *a1, uint64_t a2)
{
  uint64_t v7 = (uint64_t *)malloc(0x40uLL);
  *a1 = v7;
  uint64_t v9 = a3[2];
  uint64_t v8 = a3[3];
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  v7[4] = TupleTypeMetadata2;
  uint64_t v11 = *(void *)(TupleTypeMetadata2 - 8);
  v7[5] = v11;
  uint64_t v12 = (char *)malloc(*(void *)(v11 + 64));
  v7[6] = (uint64_t)v12;
  uint64_t v13 = sub_1B6C30440(v7, *a2, *v3, v3[1], v9, v8, a3[4]);
  uint64_t v15 = v14;
  v7[7] = (uint64_t)v13;
  (*(void (**)(char *))(*(void *)(v9 - 8) + 16))(v12);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16))(&v12[*(int *)(TupleTypeMetadata2 + 48)], v15, v8);
  return sub_1B6C303C8;
}

void sub_1B6C303C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  (*(void (**)(void, void))(*(void *)(*a1 + 40) + 8))(*(void *)(*a1 + 48), *(void *)(*a1 + 32));
  unint64_t v4 = *(void **)(v3 + 48);
  (*(void (**)(uint64_t, uint64_t))(v3 + 56))(v3, a2);
  free(v4);

  free((void *)v3);
}

void (*sub_1B6C30440(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7))(void *a1)
{
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  *a1 = TupleTypeMetadata2;
  uint64_t v15 = *(void *)(TupleTypeMetadata2 - 8);
  a1[1] = v15;
  uint64_t v16 = malloc(*(void *)(v15 + 64));
  a1[2] = (uint64_t)v16;
  sub_1B6C30030((uint64_t)v16, (uint64_t)v16 + *(int *)(TupleTypeMetadata2 + 48), a2, a3, a4, a5, a6, a7);
  return sub_1B6A86B44;
}

uint64_t sub_1B6C3055C()
{
  return sub_1B6C2FFC8();
}

void sub_1B6C30568()
{
}

uint64_t sub_1B6C30580@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v4 = sub_1B6C30720(a1, a2[2], a2[3], a2[4]);
  uint64_t v6 = v5;
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v4;
  a3[1] = v6;
  return result;
}

__n128 sub_1B6C305D0@<Q0>(__n128 *a1@<X8>)
{
  __n128 result = *v1;
  *a1 = *v1;
  a1[1].n128_u64[0] = 0;
  return result;
}

uint64_t sub_1B6C305E0(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F4184360](a1, WitnessTable);
}

uint64_t sub_1B6C30634()
{
  swift_getWitnessTable();

  return sub_1B6E32018();
}

uint64_t sub_1B6C30688()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6C306A4()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6C306C0(uint64_t a1)
{
  *(void *)(a1 + 8) = swift_getWitnessTable();
  uint64_t result = swift_getWitnessTable();
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t sub_1B6C30720(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_1B6E324B8();
  MEMORY[0x1F4188790](v8 - 8, v9);
  char v43 = (char *)v34 - v10;
  uint64_t v11 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v42 = (char *)v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v41 = (char *)v34 - v17;
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
  uint64_t v45 = *(void *)(TupleTypeMetadata2 - 8);
  double v20 = MEMORY[0x1F4188790](TupleTypeMetadata2, v19);
  uint64_t v47 = (char *)v34 - v21;
  MEMORY[0x1BA9B3940](a1, TupleTypeMetadata2, v20);
  uint64_t v46 = a3;
  uint64_t v44 = a4;
  uint64_t v49 = sub_1B6E314E8();
  v48[1] = sub_1B6E31C88();
  uint64_t v40 = sub_1B6E31D18();
  sub_1B6E31C68();
  if (MEMORY[0x1BA9B3960](a1, TupleTypeMetadata2))
  {
    uint64_t v22 = 0;
    uint64_t v23 = &v47[*(int *)(TupleTypeMetadata2 + 48)];
    uint64_t v38 = TupleTypeMetadata2;
    uint64_t v39 = v23;
    uint64_t v36 = (void (**)(char *, char *, uint64_t))(v11 + 32);
    uint64_t v37 = (void (**)(char *, void *, uint64_t))(v45 + 16);
    v34[1] = v46 - 8;
    uint64_t v35 = (void (**)(char *, char *, uint64_t))(v11 + 16);
    v34[0] = v11 + 8;
    uint64_t v24 = v41;
    uint64_t v25 = v46;
    do
    {
      char v26 = sub_1B6E31CB8();
      sub_1B6B57AF4(v26 & 1);
      if (v26)
      {
        unint64_t v27 = v47;
        (*(void (**)(char *, unint64_t, uint64_t))(v45 + 16))(v47, a1+ ((*(unsigned __int8 *)(v45 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))+ *(void *)(v45 + 72) * v22, TupleTypeMetadata2);
      }
      else
      {
        v48[0] = sub_1B6E32908();
        unint64_t v27 = v47;
        (*v37)(v47, v48, TupleTypeMetadata2);
        swift_unknownObjectRelease();
      }
      ++v22;
      (*v36)(v24, v27, a2);
      float32x4_t v28 = *v35;
      int8x16_t v29 = v42;
      (*v35)(v42, v24, a2);
      sub_1B6E31CE8();
      v28(v29, v24, a2);
      uint64_t v30 = *(void *)(v25 - 8);
      uint64_t v31 = v43;
      uint64_t v32 = v39;
      (*(void (**)(char *, char *, uint64_t))(v30 + 16))(v43, v39, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v31, 0, 1, v25);
      sub_1B6E31568();
      sub_1B6E31588();
      (*(void (**)(char *, uint64_t))(v30 + 8))(v32, v25);
      (*(void (**)(char *, uint64_t))v34[0])(v24, a2);
      TupleTypeMetadata2 = v38;
    }
    while (v22 != MEMORY[0x1BA9B3960](a1, v38));
  }
  return v49;
}

unint64_t sub_1B6C30B90(char *a1, uint64_t a2, uint64_t a3, char a4)
{
  sub_1B6E30DF8();
  uint64_t v8 = sub_1B6E31828();
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  if (v8 == 2053403509 && v10 == 0xE400000000000000
    || (sub_1B6E334B8() & 1) != 0
    || v8 == 6583157 && v10 == 0xE300000000000000
    || (sub_1B6E334B8() & 1) != 0
    || v8 == 6972015 && v10 == 0xE300000000000000
    || (sub_1B6E334B8() & 1) != 0
    || v8 == 7107699 && v10 == 0xE300000000000000
    || (sub_1B6E334B8() & 1) != 0
    || v8 == 6513249 && v10 == 0xE300000000000000
    || (sub_1B6E334B8() & 1) != 0
    || v8 == 7957616 && v10 == 0xE300000000000000)
  {
    swift_bridgeObjectRelease();
  }
  else
  {
    char v14 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if ((v14 & 1) == 0) {
      goto LABEL_10;
    }
  }
  if ((a4 & 1) == 0)
  {
LABEL_10:
    type metadata accessor for VFXCoreImporter();
    return sub_1B6B68EB8(a1, a2);
  }
  type metadata accessor for MDLImporter();
  uint64_t inited = (void *)swift_initStackObject();
  swift_retain();
  uint64_t v13 = MEMORY[0x1E4FBC860];
  inited[4] = sub_1B67DFFDC(MEMORY[0x1E4FBC860]);
  inited[5] = sub_1B67E00D4(v13);
  inited[6] = v13;
  inited[2] = a3;
  inited[3] = a2;
  sub_1B6B51774((uint64_t)a1);
  swift_release();
  return 0;
}

uint64_t _s15RelationStorageVwCP(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t _s15RelationStorageVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  return a1;
}

uint64_t _s15RelationStorageVwta(uint64_t a1, uint64_t a2)
{
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = v4;
  return a1;
}

ValueMetadata *_s15RelationStorageVMa()
{
  return &_s15RelationStorageVN;
}

unint64_t sub_1B6C31078(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  int v8 = result;
  unint64_t v9 = HIDWORD(result);
  if (result != 0xFFFFFFFF)
  {
    uint64_t v10 = swift_allocObject();
    *(void *)(v10 + 16) = a2;
    *(void *)(v10 + 24) = a3;
    uint64_t v11 = swift_allocObject();
    *(void *)(v11 + 16) = sub_1B6C31EBC;
    *(void *)(v11 + 24) = v10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v13 = *(void *)(v5 + 208);
    *(void *)(v5 + 208) = 0x8000000000000000;
    unint64_t v14 = sub_1B62C1A30(a2);
    char v16 = v15;
    uint64_t v17 = *(void *)(v13 + 16) + ((v15 & 1) == 0);
    if (*(void *)(v13 + 24) >= v17)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
        sub_1B6ACD434();
      }
    }
    else
    {
      sub_1B6AB89CC(v17, isUniquelyReferenced_nonNull_native);
      unint64_t v18 = sub_1B62C1A30(a2);
      if ((v16 & 1) != (v19 & 1))
      {
        uint64_t result = sub_1B6E33838();
        __break(1u);
        return result;
      }
      unint64_t v14 = v18;
    }
    *(void *)(v5 + 208) = v13;
    swift_bridgeObjectRelease();
    double v20 = *(void **)(v5 + 208);
    swift_bridgeObjectRetain();
    if ((v16 & 1) == 0)
    {
      uint64_t v21 = sub_1B6C31EBC();
      sub_1B62B6EFC(v14, a2, v21, v22, v23, v20);
    }
    uint64_t v24 = v20[7];
    swift_bridgeObjectRelease();
    uint64_t v25 = (char **)(v24 + 24 * v14);
    char v26 = *v25;
    char v27 = swift_isUniquelyReferenced_nonNull_native();
    *uint64_t v25 = v26;
    if ((v27 & 1) == 0)
    {
      char v26 = sub_1B68C17A0(0, *((void *)v26 + 2) + 1, 1, v26);
      *uint64_t v25 = v26;
    }
    unint64_t v29 = *((void *)v26 + 2);
    unint64_t v28 = *((void *)v26 + 3);
    if (v29 >= v28 >> 1)
    {
      char v26 = sub_1B68C17A0(v28 > 1, v29 + 1, 1, v26);
      *uint64_t v25 = v26;
    }
    *((void *)v26 + 2) = v29 + 1;
    uint64_t v30 = &v26[16 * v29];
    *((_DWORD *)v30 + 8) = v8;
    *((_DWORD *)v30 + 9) = v9;
    *((void *)v30 + 5) = a4;
    swift_release();
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6C312E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_1B6AB4470(v26, a2);
  int v8 = *v6;
  if (!*v6) {
    return ((uint64_t (*)(void *, void))v7)(v26, 0);
  }
  unint64_t v9 = v6;
  uint64_t v10 = *((void *)v8 + 2);
  if (v10)
  {
    uint64_t v11 = 0;
    uint64_t v12 = v8 + 44;
    while (1)
    {
      BOOL v13 = *(v12 - 3) == a1 && *(v12 - 2) == HIDWORD(a1);
      BOOL v14 = v13 && *(v12 - 1) == a4;
      if (v14 && *v12 == HIDWORD(a4)) {
        break;
      }
      ++v11;
      v12 += 4;
      if (v10 == v11)
      {
        uint64_t v11 = *((void *)v8 + 2);
        goto LABEL_37;
      }
    }
    if (v10 - 1 != v11)
    {
      uint64_t v17 = v11 + 3;
      do
      {
        if (*(_OWORD *)&v8[16 * v17] != a1
          || HIDWORD(*(void *)&v8[16 * v17]) != HIDWORD(a1)
          || *(void *)&v8[16 * v17 + 8] != a4
          || HIDWORD(*(_OWORD *)&v8[16 * v17]) != HIDWORD(a4))
        {
          if (v17 - 2 != v11)
          {
            long long v25 = *(_OWORD *)&v8[16 * v17];
            long long v24 = *(_OWORD *)&v8[16 * v11 + 32];
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            int32x2_t *v9 = v8;
            if ((isUniquelyReferenced_nonNull_native & 1) == 0)
            {
              int v8 = sub_1B6C169E4((uint64_t)v8);
              int32x2_t *v9 = v8;
            }
            *(_OWORD *)&v8[16 * v11 + 32] = v25;
            *(_OWORD *)&(*v9)[16 * v17] = v24;
            int v8 = *v9;
          }
          ++v11;
        }
        uint64_t v18 = v17 + 1;
        uint64_t v19 = v17++ - 1;
      }
      while (v19 != *((void *)v8 + 2));
      uint64_t v10 = v18 - 2;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
LABEL_37:
  sub_1B68E94AC(v11, v10);
  return ((uint64_t (*)(void *, void))v7)(v26, 0);
}

uint64_t sub_1B6C31490(uint64_t a1)
{
  if (*(void *)(*(void *)(v1 + 208) + 16) && (sub_1B62C1A30(a1), (v2 & 1) != 0)) {
    return swift_bridgeObjectRetain();
  }
  else {
    return MEMORY[0x1E4FBC860];
  }
}

BOOL sub_1B6C314E0(_DWORD *a1, _DWORD *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1]) {
    return 0;
  }
  return a1[2] == a2[2] && a1[3] == a2[3];
}

uint64_t sub_1B6C31514(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  sub_1B62C550C((uint64_t)v3, v4);
  sub_1B6657A10();
  sub_1B6E332B8();
  if (!v1)
  {
    sub_1B62C550C((uint64_t)v3, v4);
    sub_1B6E332B8();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B6C31604@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1B6C31EDC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B6C3163C(void *a1)
{
  return sub_1B6C31514(a1);
}

uint64_t sub_1B6C31658()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t sub_1B6C3166C@<X0>(uint64_t (*a1)(void)@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = a1();
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  return result;
}

uint64_t sub_1B6C316A0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(v2 + 208);
  if (!*(void *)(v3 + 16)) {
    return 0;
  }
  unint64_t v5 = sub_1B62C1A30(a2);
  if ((v6 & 1) == 0) {
    return 0;
  }
  uint64_t v7 = *(void *)(*(void *)(*(void *)(v3 + 56) + 24 * v5) + 16);
  uint64_t v8 = swift_bridgeObjectRetain();
  if (!v7)
  {
LABEL_10:
    swift_bridgeObjectRelease();
    return 0;
  }
  uint64_t v9 = v8 + 44;
  while (*(_DWORD *)(v9 - 12) != a1 || *(_DWORD *)(v9 - 8) != HIDWORD(a1))
  {
    v9 += 16;
    if (!--v7) {
      goto LABEL_10;
    }
  }
  uint64_t v11 = *(void *)(v9 - 4);
  swift_bridgeObjectRelease();
  return v11;
}

uint64_t sub_1B6C31738@<X0>(uint64_t result@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4 = *(void *)result;
  long long v5 = *(_OWORD *)(result + 8);
  uint64_t v6 = *(void *)(*(void *)result + 16);
  if (!v6)
  {
    uint64_t v12 = MEMORY[0x1E4FBC860];
    goto LABEL_55;
  }
  uint64_t v7 = a3;
  int v8 = a2;
  long long v32 = *(_OWORD *)(result + 8);
  uint64_t v33 = a4;
  unint64_t v9 = HIDWORD(a2);
  uint64_t v10 = (void *)(a3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  swift_bridgeObjectRetain();
  uint64_t v11 = 0;
  uint64_t v12 = MEMORY[0x1E4FBC860];
  uint64_t v34 = v7;
  do
  {
    int8x16_t v16 = *(int8x16_t *)(v4 + 16 * v11 + 32);
    int32x2_t v17 = vceq_s32(vrev64_s32(*(int32x2_t *)v16.i8), (int32x2_t)0xFFFFFFFF00000000);
    if (v17.i32[1] & v17.i32[0])
    {
LABEL_8:
      int v18 = 0;
      int v19 = 1;
      goto LABEL_9;
    }
    int v18 = 0;
    int v19 = 1;
    if ((v16.i32[0] & 0x80000000) == 0 && v10[1] > v16.i32[0])
    {
      if (v16.i32[1] != -1 && *(_DWORD *)(*v10 + 12 * v16.i32[0] + 8) != v16.i32[1]) {
        goto LABEL_8;
      }
      uint64_t v22 = *(void *)(*(void *)(v7 + 136) + 8 * *(int *)(*v10 + 12 * v16.i32[0]) + 32);
      int v18 = *(_DWORD *)(v22 + 28);
      int v19 = *(unsigned __int8 *)(v22 + 32);
    }
LABEL_9:
    if ((_BYTE)v9)
    {
      if (v9 != 1) {
        goto LABEL_25;
      }
      if (v19)
      {
        BOOL v20 = 1;
        goto LABEL_29;
      }
      if (v18 == v8)
      {
LABEL_25:
        int32x2_t v24 = vceq_s32(vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), (int32x2_t)0xFFFFFFFF00000000);
        if (v24.i32[1] & v24.i32[0]) {
          goto LABEL_6;
        }
        BOOL v20 = 1;
        goto LABEL_30;
      }
      BOOL v20 = 0;
LABEL_29:
      int32x2_t v25 = vceq_s32(vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), (int32x2_t)0xFFFFFFFF00000000);
      if (v25.i32[1] & v25.i32[0]) {
        goto LABEL_46;
      }
LABEL_30:
      int v26 = 0;
      char v27 = 1;
      if ((v16.i32[2] & 0x80000000) == 0 && v10[1] > v16.i32[2])
      {
        if (v16.i32[3] != -1 && *(_DWORD *)(*v10 + 12 * v16.i32[2] + 8) != v16.i32[3])
        {
LABEL_46:
          int v26 = 0;
          char v27 = 1;
          int v30 = v9;
          if ((_BYTE)v9)
          {
LABEL_39:
            if (v30 != 1) {
              goto LABEL_6;
            }
            char v31 = v26 == v8 ? 1 : v27;
            if ((v31 & 1) != 0 || v20) {
              goto LABEL_6;
            }
            goto LABEL_51;
          }
          goto LABEL_47;
        }
        uint64_t v29 = *(void *)(*(void *)(v7 + 136) + 8 * *(int *)(*v10 + 12 * v16.i32[2]) + 32);
        int v26 = *(_DWORD *)(v29 + 28);
        char v27 = *(unsigned char *)(v29 + 32);
      }
      int v30 = v9;
      if ((_BYTE)v9) {
        goto LABEL_39;
      }
LABEL_47:
      if (v27)
      {
        if (v20) {
          goto LABEL_6;
        }
      }
      else if (v20 || v26 == v8)
      {
        goto LABEL_6;
      }
      goto LABEL_51;
    }
    if ((v19 & 1) == 0)
    {
      BOOL v20 = v18 == v8;
      goto LABEL_29;
    }
    int32x2_t v23 = vceq_s32(vrev64_s32((int32x2_t)*(_OWORD *)&vextq_s8(v16, v16, 8uLL)), (int32x2_t)0xFFFFFFFF00000000);
    if ((v23.i32[1] & v23.i32[0] & 1) == 0)
    {
      BOOL v20 = 0;
      goto LABEL_30;
    }
LABEL_51:
    long long v35 = *(_OWORD *)(v4 + 16 * v11 + 32);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1B6C3D988(0, *(void *)(v12 + 16) + 1, 1);
    }
    unint64_t v14 = *(void *)(v12 + 16);
    unint64_t v13 = *(void *)(v12 + 24);
    long long v15 = v35;
    if (v14 >= v13 >> 1)
    {
      sub_1B6C3D988(v13 > 1, v14 + 1, 1);
      long long v15 = v35;
    }
    *(void *)(v12 + 16) = v14 + 1;
    *(_OWORD *)(v12 + 16 * v14 + 32) = v15;
    uint64_t v7 = v34;
LABEL_6:
    ++v11;
  }
  while (v6 != v11);
  uint64_t result = swift_bridgeObjectRelease();
  a4 = v33;
  long long v5 = v32;
LABEL_55:
  *(void *)a4 = v12;
  *(_OWORD *)(a4 + 8) = v5;
  return result;
}

uint64_t sub_1B6C31A58(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a4 + 16);
  if (v4)
  {
    uint64_t v5 = a4;
    uint64_t v7 = result;
    swift_bridgeObjectRetain();
    uint64_t v8 = 0;
    uint64_t v34 = v5;
    do
    {
      int32x2_t v9 = vceq_s32(vrev64_s32(*(int32x2_t *)(v5 + 16 * v8 + 32)), (int32x2_t)0xFFFFFFFF00000000);
      if ((v9.i32[1] & v9.i32[0] & 1) == 0)
      {
        long long v36 = *(_OWORD *)(v5 + 16 * v8 + 32);
        uint64_t v10 = swift_allocObject();
        *(void *)(v10 + 16) = a2;
        *(void *)(v10 + 24) = a3;
        uint64_t v11 = swift_allocObject();
        *(void *)(v11 + 16) = sub_1B6C323BC;
        *(void *)(v11 + 24) = v10;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v13 = *(void *)(v7 + 208);
        *(void *)(v7 + 208) = 0x8000000000000000;
        unint64_t v14 = sub_1B62C1A30(a2);
        char v16 = v15;
        uint64_t v17 = *(void *)(v13 + 16) + ((v15 & 1) == 0);
        if (*(void *)(v13 + 24) >= v17)
        {
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            sub_1B6ACD434();
          }
        }
        else
        {
          sub_1B6AB89CC(v17, isUniquelyReferenced_nonNull_native);
          unint64_t v18 = sub_1B62C1A30(a2);
          if ((v16 & 1) != (v19 & 1))
          {
            uint64_t result = sub_1B6E33838();
            __break(1u);
            return result;
          }
          unint64_t v14 = v18;
        }
        *(void *)(v7 + 208) = v13;
        swift_bridgeObjectRelease();
        BOOL v20 = *(void **)(v7 + 208);
        uint64_t v21 = swift_bridgeObjectRetain();
        if ((v16 & 1) == 0)
        {
          uint64_t v22 = (*(uint64_t (**)(uint64_t))(v11 + 16))(v21);
          v20[(v14 >> 6) + 8] |= 1 << v14;
          *(void *)(v20[6] + 8 * v14) = a2;
          int32x2_t v23 = (uint64_t *)(v20[7] + 24 * v14);
          *int32x2_t v23 = v22;
          v23[1] = v24;
          v23[2] = v25;
          ++v20[2];
        }
        uint64_t v26 = v20[7];
        swift_bridgeObjectRelease();
        char v27 = (char **)(v26 + 24 * v14);
        unint64_t v28 = *v27;
        char v29 = swift_isUniquelyReferenced_nonNull_native();
        *char v27 = v28;
        if ((v29 & 1) == 0)
        {
          unint64_t v28 = sub_1B68C17A0(0, *((void *)v28 + 2) + 1, 1, v28);
          *char v27 = v28;
        }
        unint64_t v31 = *((void *)v28 + 2);
        unint64_t v30 = *((void *)v28 + 3);
        long long v32 = v36;
        if (v31 >= v30 >> 1)
        {
          uint64_t v33 = sub_1B68C17A0(v30 > 1, v31 + 1, 1, v28);
          long long v32 = v36;
          unint64_t v28 = v33;
          *char v27 = v33;
        }
        uint64_t v5 = v34;
        *((void *)v28 + 2) = v31 + 1;
        *(_OWORD *)&v28[16 * v31 + 32] = v32;
        swift_release();
        swift_release();
      }
      ++v8;
    }
    while (v4 != v8);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B6C31D34(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  sub_1B62C550C((uint64_t)v3, v4);
  sub_1B67CD420();
  sub_1B6E332B8();
  if (!v1)
  {
    sub_1B62C550C((uint64_t)v3, v4);
    sub_1B6C3222C();
    sub_1B6C322D8(&qword_1E9DD7458, (void (*)(void))sub_1B6C32344);
    sub_1B6E332B8();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B6C31E5C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1B6C32070(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1B6C31E8C(void *a1)
{
  return sub_1B6C31D34(a1);
}

uint64_t sub_1B6C31EAC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B6C31EBC()
{
  return MEMORY[0x1E4FBC860];
}

uint64_t sub_1B6C31ECC()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B6C31EDC(void *a1)
{
  uint64_t v3 = a1[3];
  sub_1B62C14BC(a1, v3);
  sub_1B6E33A18();
  if (!v1)
  {
    sub_1B62C550C((uint64_t)v5, v6);
    sub_1B62B1EA8();
    sub_1B6E33168();
    uint64_t v3 = v7;
    sub_1B62C550C((uint64_t)v5, v6);
    sub_1B6E33168();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t assignWithCopy for RelationsCoder(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RelationsCoder()
{
  return &type metadata for RelationsCoder;
}

ValueMetadata *type metadata accessor for RelationPair()
{
  return &type metadata for RelationPair;
}

uint64_t sub_1B6C32070(void *a1)
{
  uint64_t v3 = a1[3];
  sub_1B62C14BC(a1, v3);
  sub_1B6E33A18();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    return v3;
  }
  sub_1B62C550C((uint64_t)v6, v7);
  sub_1B62BFBD8();
  sub_1B6E33168();
  uint64_t v3 = v5;
  uint64_t result = swift_conformsToProtocol2();
  if (result)
  {
    uint64_t result = swift_conformsToProtocol2();
    if (result)
    {
      sub_1B6C3222C();
      sub_1B62C550C((uint64_t)v6, v7);
      sub_1B6C322D8((unint64_t *)&unk_1EB9801C0, (void (*)(void))sub_1B6C32284);
      sub_1B6E33168();
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v6);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
      return v3;
    }
  }
  else
  {
    __break(1u);
  }
  __break(1u);
  return result;
}

void sub_1B6C3222C()
{
  if (!qword_1EB9801B8)
  {
    unint64_t v0 = sub_1B6E31D18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB9801B8);
    }
  }
}

unint64_t sub_1B6C32284()
{
  unint64_t result = qword_1EB97E278;
  if (!qword_1EB97E278)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97E278);
  }
  return result;
}

uint64_t sub_1B6C322D8(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6C3222C();
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B6C32344()
{
  unint64_t result = qword_1EB97E270;
  if (!qword_1EB97E270)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97E270);
  }
  return result;
}

uint64_t sub_1B6C32398()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B6C323A8()
{
  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1B6C323C0(uint64_t a1, float32x4_t *a2, float32x4_t *a3, uint64_t a4, uint64_t a5, char a6, float32x4_t a7, float32x4_t a8, float a9)
{
  char v16 = v9 + 1;
  uint64_t v18 = v9[2].i64[1];
  uint64_t v17 = v9[3].i64[0];
  sub_1B62C14BC((float32x4_t *)v9[1].i64, v18);
  float v19 = (*(float (**)(uint64_t, uint64_t))(v17 + 56))(v18, v17);
  if (v19 > 0.0)
  {
    float v20 = v19;
    if (v19 >= 1.0 || (float v21 = drand48(), v20 > v21))
    {
      uint64_t v22 = v9[12].i64[1];
      *(void *)(v9[11].i64[1] + 8 * v22) = a1;
      v9[12].i64[1] = v22 + 1;
    }
  }
  if (v9[4].i8[4] == 1)
  {
    float32x4_t v23 = vsubq_f32(a7, *a2);
    float32x4_t v58 = v23;
    float32x4_t v55 = *a3;
    v23.i32[3] = HIDWORD(*(unsigned long long *)a3);
    *a3 = v23;
    uint64_t v24 = v9[2].i64[1];
    uint64_t v25 = v9[3].i64[0];
    sub_1B62C14BC(v16, v24);
    float v26 = (*(float (**)(uint64_t, uint64_t))(v25 + 8))(v24, v25);
    uint64_t v27 = v9[2].i64[1];
    uint64_t v28 = v9[3].i64[0];
    sub_1B62C14BC(v16, v27);
    (*(void (**)(uint64_t, uint64_t))(v28 + 32))(v27, v28);
    float32x4_t v30 = v58;
    float32x4_t v31 = vaddq_f32(v58, *v9);
    float32x4_t v32 = vmulq_f32(v31, a8);
    float v33 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v32, 2), vaddq_f32(v32, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v32.f32, 1))).f32[0];
    if (v33 < 0.0)
    {
      float32x4_t v34 = vmulq_n_f32(a8, v33);
      float32x4_t v30 = vmlaq_n_f32(vmulq_n_f32(v34, -v26), vsubq_f32(v31, v34), v29);
    }
    v30.i32[3] = v55.i32[3];
    float32x4_t v59 = v30;
    *a3 = v30;
  }
  else
  {
    uint64_t v35 = v9[2].i64[1];
    uint64_t v36 = v9[3].i64[0];
    sub_1B62C14BC(v16, v35);
    float v37 = (*(float (**)(uint64_t, uint64_t))(v36 + 8))(v35, v36);
    uint64_t v38 = v9[2].i64[1];
    uint64_t v39 = v9[3].i64[0];
    sub_1B62C14BC(v16, v38);
    (*(void (**)(uint64_t, uint64_t))(v39 + 32))(v38, v39);
    float32x4_t v41 = vaddq_f32(*v9, *a3);
    float32x4_t v42 = vmulq_f32(v41, a8);
    float32x4_t v43 = *a2;
    float v44 = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v42, 2), vaddq_f32(v42, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v42.f32, 1))).f32[0];
    if (v44 >= 0.0)
    {
      float32x4_t v47 = *a2;
      float32x4_t v46 = *a3;
    }
    else
    {
      float32x4_t v45 = vmulq_n_f32(a8, v44);
      float32x4_t v46 = vmlaq_n_f32(vmulq_n_f32(v45, -v37), vsubq_f32(v41, v45), v40);
      float32x4_t v47 = vmlaq_n_f32(vmlaq_f32(a7, (float32x4_t)vdupq_n_s32(0x38D1B717u), a8), v46, (float)(1.0 - a9) * v9[4].f32[0]);
    }
    v46.i32[3] = HIDWORD(*(unsigned long long *)a3);
    float32x4_t v59 = v46;
    *a3 = v46;
    v47.i32[3] = v43.i32[3];
    *a2 = v47;
  }
  uint64_t v48 = v9[2].i64[1];
  uint64_t v49 = v9[3].i64[0];
  sub_1B62C14BC(v16, v48);
  float v50 = (*(float (**)(uint64_t, uint64_t))(v49 + 80))(v48, v49);
  if (v50 > 0.0)
  {
    float v51 = v50;
    if (v50 >= 1.0 || (float v52 = drand48(), v51 > v52))
    {
      uint64_t v53 = v9[14].i64[0];
      uint64_t v54 = v9[13].i64[0] + 80 * v53;
      *(float32x4_t *)uint64_t v54 = vaddq_f32(vmulq_f32(a8, (float32x4_t)vdupq_n_s32(0x3C23D70Au)), a7);
      *(float32x4_t *)(v54 + 16) = a8;
      *(float32x4_t *)(v54 + 32) = v59;
      *(void *)(v54 + 48) = a4;
      *(void *)(v54 + 56) = a5;
      *(unsigned char *)(v54 + 64) = a6 & 1;
      v9[14].i64[0] = v53 + 1;
    }
  }
}

BOOL sub_1B6C32748()
{
  v13[12] = *MEMORY[0x1E4F143B8];
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v1 = qword_1EB997A18;
  sub_1B62F7B88(0, (unint64_t *)&qword_1EB980C70, (unint64_t *)&qword_1EB980000, (unint64_t *)&qword_1EB97FFF0);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
  *(void *)(inited + 32) = &type metadata for ParticleCollide;
  *(void *)(inited + 40) = &off_1F0F69578;
  uint64_t v6 = v1;
  int v7 = 0;
  char v8 = 2;
  uint64_t v9 = 0;
  char v10 = 2;
  uint64_t v11 = 0;
  swift_retain();
  sub_1B62F776C(inited, 1, (uint64_t)v5);
  swift_setDeallocating();
  swift_release();
  sub_1B62C9DA8(v0, (uint64_t)v5, 0x200000000, v12);
  sub_1B62CA064((uint64_t)v5);
  sub_1B6309B40((uint64_t)v12, (uint64_t)v13);
  uint64_t v3 = v13[0];
  if (v13[0]) {
    sub_1B632F170(v12);
  }
  return v3 != 0;
}

uint64_t sub_1B6C328D0()
{
  return sub_1B6E31BF8();
}

uint64_t sub_1B6C32930()
{
  return sub_1B6E31B58();
}

_DWORD *sub_1B6C32980@<X0>(_DWORD *result@<X0>, _DWORD *a2@<X8>)
{
  *a2 = *result;
  return result;
}

_DWORD *sub_1B6C3298C@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 | *result;
  return result;
}

_DWORD *sub_1B6C329A0@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & *result;
  return result;
}

_DWORD *sub_1B6C329B4@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 ^ *result;
  return result;
}

BOOL sub_1B6C329C8(_DWORD *a1, int *a2)
{
  int v3 = *a2;
  int v4 = *v2 & *a2;
  if (v4 != *a2) {
    *v2 |= v3;
  }
  *a1 = v3;
  return v4 != v3;
}

_DWORD *sub_1B6C329F8@<X0>(_DWORD *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *v2 & *result;
  if (v3) {
    *v2 &= ~*result;
  }
  *(_DWORD *)a2 = v3;
  *(unsigned char *)(a2 + 4) = v3 == 0;
  return result;
}

int *sub_1B6C32A24@<X0>(int *result@<X0>, uint64_t a2@<X8>)
{
  int v3 = *result;
  int v4 = *v2;
  *v2 |= *result;
  int v5 = v4 & v3;
  *(_DWORD *)a2 = v5;
  *(unsigned char *)(a2 + 4) = v5 == 0;
  return result;
}

_DWORD *sub_1B6C32A48(_DWORD *result)
{
  *v1 |= *result;
  return result;
}

_DWORD *sub_1B6C32A5C(_DWORD *result)
{
  *v1 &= *result;
  return result;
}

_DWORD *sub_1B6C32A70(_DWORD *result)
{
  *v1 ^= *result;
  return result;
}

_DWORD *sub_1B6C32A84@<X0>(_DWORD *result@<X0>, int *a2@<X8>)
{
  *a2 = *v2 & ~*result;
  return result;
}

BOOL sub_1B6C32A98(_DWORD *a1)
{
  return (*v1 & ~*a1) == 0;
}

BOOL sub_1B6C32AAC(_DWORD *a1)
{
  return (*v1 & *a1) == 0;
}

BOOL sub_1B6C32AC0(_DWORD *a1)
{
  return (*a1 & ~*v1) == 0;
}

BOOL sub_1B6C32AD4()
{
  return *v0 == 0;
}

_DWORD *sub_1B6C32AE4(_DWORD *result)
{
  *v1 &= ~*result;
  return result;
}

uint64_t sub_1B6C32AF8@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (v3)
  {
    int v4 = 0;
    int v5 = (int *)(a1 + 32);
    do
    {
      int v7 = *v5++;
      int v6 = v7;
      if ((v7 & ~v4) == 0) {
        int v6 = 0;
      }
      v4 |= v6;
      --v3;
    }
    while (v3);
  }
  else
  {
    int v4 = 0;
  }
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

double sub_1B6C32B50@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  double result = 0.0078125;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E4F320;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(unsigned char *)(a1 + 64) = 1;
  return result;
}

unint64_t sub_1B6C32B74(char a1)
{
  unint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 2:
      unint64_t result = 0x6963697473616C65;
      break;
    case 3:
      unint64_t result = 0x6E6F697463697266;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x73726579616CLL;
      break;
    case 6:
      unint64_t result = 0x696E69666E497369;
      break;
    case 7:
      unint64_t result = 0x656C62756F447369;
      break;
    case 8:
      unint64_t result = 0x65747845666C6168;
      break;
    case 9:
      unint64_t result = 0x61746144666473;
      break;
    case 10:
      unint64_t result = 0x656469736E69;
      break;
    case 11:
      unint64_t result = 0x615272656E726F63;
      break;
    case 12:
      unint64_t result = 1752393069;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B6C32D28(char a1)
{
  unint64_t result = 0xD000000000000015;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000019;
      break;
    case 2:
      unint64_t result = 0x6963697473616C65;
      break;
    case 3:
      unint64_t result = 0x6E6F697463697266;
      break;
    case 4:
      unint64_t result = 0xD000000000000010;
      break;
    case 5:
      unint64_t result = 0x73726579616CLL;
      break;
    case 6:
      unint64_t result = 0x696E69666E497369;
      break;
    case 7:
      unint64_t result = 0x656C62756F447369;
      break;
    case 8:
      unint64_t result = 0x65747845666C6168;
      break;
    case 9:
      unint64_t result = 0x61746144666473;
      break;
    case 10:
      unint64_t result = 0x656469736E69;
      break;
    case 11:
      unint64_t result = 0x615272656E726F63;
      break;
    case 12:
      unint64_t result = 1752393069;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6C32EDC(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1B6C32D28(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1B6C32D28(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1B6E334B8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B6C32F68()
{
  char v1 = *v0;
  sub_1B6E33918();
  sub_1B6C32B74(v1);
  sub_1B6E318B8();
  swift_bridgeObjectRelease();
  return sub_1B6E33988();
}

uint64_t sub_1B6C32FCC()
{
  sub_1B6C32B74(*v0);
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C33020()
{
  char v1 = *v0;
  sub_1B6E33918();
  sub_1B6C32B74(v1);
  sub_1B6E318B8();
  swift_bridgeObjectRelease();
  return sub_1B6E33988();
}

uint64_t sub_1B6C33080@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C33B58();
  *a1 = result;
  return result;
}

unint64_t sub_1B6C330B0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B6C32B74(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1B6C330DC()
{
  return sub_1B6C32D28(*v0);
}

uint64_t sub_1B6C330E4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C33B58();
  *a1 = result;
  return result;
}

uint64_t sub_1B6C3310C(uint64_t a1)
{
  unint64_t v2 = sub_1B6893F78();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C33148(uint64_t a1)
{
  unint64_t v2 = sub_1B6893F78();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C33184(void *a1)
{
  uint64_t v1 = a1[10];
  uint64_t v2 = a1[11];
  uint64_t v3 = a1[23];
  uint64_t v4 = a1[24];
  uint64_t v5 = a1[25];
  uint64_t v19 = 0;
  memset(v18, 0, sizeof(v18));
  char v20 = 5;
  if (v5 < 1)
  {
    swift_retain();
  }
  else
  {
    if (v5 == *(void *)(v1 + 240) - *(void *)(v1 + 232))
    {
      sub_1B639192C((uint64_t)v18, (uint64_t)v15);
      uint64_t v17 = 0;
      long long v16 = 0uLL;
    }
    else
    {
      sub_1B639192C((uint64_t)v18, (uint64_t)v15);
      *(void *)&long long v16 = v3;
      *((void *)&v16 + 1) = v4;
      uint64_t v17 = v5;
    }
    uint64_t v6 = *(void **)(v2 + 104);
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 104) = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v6 = sub_1B68C0C6C(0, v6[2] + 1, 1, v6);
      *(void *)(v2 + 104) = v6;
    }
    unint64_t v9 = v6[2];
    unint64_t v8 = v6[3];
    if (v9 >= v8 >> 1)
    {
      uint64_t v6 = sub_1B68C0C6C(v8 > 1, v9 + 1, 1, v6);
      *(void *)(v2 + 104) = v6;
    }
    _OWORD v6[2] = v9 + 1;
    char v10 = &v6[9 * v9];
    *((_OWORD *)v10 + 2) = v15[0];
    long long v11 = v15[1];
    long long v12 = v15[2];
    long long v13 = v16;
    v10[12] = v17;
    *((_OWORD *)v10 + 4) = v12;
    *((_OWORD *)v10 + 5) = v13;
    *((_OWORD *)v10 + 3) = v11;
  }
  sub_1B6391400((uint64_t)v18);
  return swift_release();
}

__n128 sub_1B6C332D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1B62C9024((uint64_t)&type metadata for ParticleCollisionEvent, (uint64_t)&off_1F0F8CB60, *(uint64_t **)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 16));
  uint64_t v6 = *(void *)(a1 + 48);
  uint64_t v7 = *(void *)(a1 + 56) - v6;
  if (v7)
  {
    uint64_t v8 = 0;
    uint64_t v9 = *(void *)(a2 + 208) + 80 * *(void *)(a1 + 24);
    uint64_t v10 = v4 + 80 * v6;
    do
    {
      __n128 result = *(__n128 *)(v9 + v8);
      long long v11 = *(_OWORD *)(v9 + v8 + 16);
      char v12 = *(unsigned char *)(v9 + v8 + 64);
      uint64_t v13 = v10 + v8;
      long long v14 = *(_OWORD *)(v9 + v8 + 32);
      long long v15 = *(_OWORD *)(v9 + v8 + 48);
      *(__n128 *)uint64_t v13 = result;
      *(_OWORD *)(v13 + 16) = v11;
      *(_OWORD *)(v13 + 32) = v14;
      *(_OWORD *)(v13 + 48) = v15;
      *(unsigned char *)(v13 + 64) = v12;
      v8 += 80;
      --v7;
    }
    while (v7);
  }
  return result;
}

uint64_t sub_1B6C33378()
{
  return type metadata accessor for ParticleCollide.CPUSystem();
}

void sub_1B6C33398(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0xFF00000000;
}

float sub_1B6C333A8@<S0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6C33AF4(0, (unint64_t *)&unk_1E9DD6DA0, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v13 - v9;
  long long v13 = 0uLL;
  uint64_t v14 = 0xFF00000000;
  sub_1B689291C(a1, 1);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if (!v2)
  {
    (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    float result = *(float *)&v14;
    int v12 = HIDWORD(v14);
    *(_OWORD *)a2 = v13;
    *(float *)(a2 + 16) = result;
    *(_DWORD *)(a2 + 20) = v12;
  }
  return result;
}

uint64_t sub_1B6C334E8(void *a1)
{
  sub_1B6C33AF4(0, &qword_1E9DD1BC0, MEMORY[0x1E4FBBDE0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v11 - v8;
  long long v11 = *v1;
  uint64_t v12 = *((void *)v1 + 2);
  uint64_t result = sub_1B6891EB8(a1, (uint64_t)&v11 - v8);
  if (!v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
  }
  return result;
}

uint64_t sub_1B6C335FC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = a1 + 40;
  swift_retain();
  sub_1B62EA708(v5, (uint64_t)v29);
  sub_1B62EA708((uint64_t)v29, (uint64_t)&v30);
  int v6 = v31;
  uint64_t v7 = v30;
  int v8 = *(_DWORD *)(a1 + 12);
  uint64_t v9 = *(int *)(a1 + 8);
  swift_retain();
  BOOL v10 = v9 == -1 && v8 == 0;
  if (!v10
    && (v9 & 0x80000000) == 0
    && *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v9
    && ((uint64_t v11 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v8 == -1)
     || *(_DWORD *)(v11 + 12 * (int)v9 + 8) == v8))
  {
    unint64_t v12 = sub_1B6965864(*(void *)(*(void *)(v4 + 136) + 8 * *(int *)(v11 + 12 * (int)v9) + 32), *(_DWORD *)(v11 + 12 * (int)v9), *(_WORD *)(v11 + 12 * (int)v9 + 4), 24, v4);
    unint64_t v14 = v25;
    unint64_t v16 = v26;
    char v28 = v27;
    swift_release();
    if ((v28 & 1) == 0)
    {
      unint64_t v13 = HIDWORD(v12);
      unint64_t v15 = HIDWORD(v14);
      unint64_t v17 = HIDWORD(v16);
      goto LABEL_11;
    }
  }
  else
  {
    swift_release();
  }
  LODWORD(v12) = 0;
  LODWORD(v13) = 0;
  LODWORD(v14) = 0;
  LODWORD(v15) = 0;
  LODWORD(v16) = 0;
  LODWORD(v17) = 255;
LABEL_11:
  *(_DWORD *)(v2 + 64) = v12;
  *(_DWORD *)(v2 + 68) = v13;
  *(_DWORD *)(v2 + 72) = v14;
  *(_DWORD *)(v2 + 76) = v15;
  *(_DWORD *)(v2 + 80) = v16;
  *(_DWORD *)(v2 + 84) = v17;
  if (v17)
  {
    sub_1B62F46E8();
    *(float *)(v2 + 160) = v18;
    if (v18 != 0.0)
    {
      *(double *)&long long v19 = sub_1B6335378();
      *(_OWORD *)(v2 + 96) = v19;
      *(_OWORD *)(v2 + 112) = v20;
      *(_OWORD *)(v2 + 128) = v21;
      *(_OWORD *)(v2 + 144) = v22;
      if (v6) {
        uint64_t v23 = 0x200000000;
      }
      else {
        uint64_t v23 = v7 | 0x100000000;
      }
      sub_1B68929B4(v4, v23);
      sub_1B698F788(v4, v23);
      sub_1B6988F7C(v4, v23);
      sub_1B69AD880(v4, v23);
      sub_1B6BE5AE8(v4, v23);
      sub_1B6AFF634(v4, v23);
    }
  }
  return swift_release();
}

uint64_t sub_1B6C337D8()
{
  swift_release();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for ParticleCollide.CPUSystem()
{
  return self;
}

uint64_t sub_1B6C3383C(void *a1)
{
  swift_allocObject();
  uint64_t v2 = sub_1B6C33BA4(a1);
  sub_1B62F648C((uint64_t)a1);
  return v2;
}

const char *sub_1B6C3388C()
{
  return "ParticleColliders.CPU";
}

uint64_t sub_1B6C338A0()
{
  return qword_1E9DD2FD8 + 5;
}

uint64_t type metadata accessor for ParticleCollide.GPUSystem()
{
  return self;
}

ValueMetadata *type metadata accessor for ParticleCollide()
{
  return &type metadata for ParticleCollide;
}

uint64_t sub_1B6C338E4(_OWORD *a1)
{
  long long v25 = a1[1];
  uint64_t v2 = *((void *)a1 + 2);
  swift_retain();
  *(double *)v3.i64 = sub_1B6335378();
  float32x4_t v23 = v4;
  float32x4_t v24 = v3;
  float32x4_t v21 = v6;
  float32x4_t v22 = v5;
  swift_retain();
  uint64_t v7 = sub_1B695EBAC(*((unint64_t *)&v25 + 1));
  uint64_t v9 = v8;
  uint64_t v11 = v10;
  char v13 = v12;
  swift_release();
  if (v13) {
    int v14 = 0;
  }
  else {
    int v14 = v7;
  }
  if (v13) {
    float v15 = 0.0;
  }
  else {
    float v15 = *((float *)&v7 + 1);
  }
  if (v13) {
    float v16 = 0.0;
  }
  else {
    float v16 = *(float *)&v9;
  }
  if (v13) {
    float v17 = 0.0;
  }
  else {
    float v17 = *((float *)&v9 + 1);
  }
  if (v13) {
    float v18 = 0.0;
  }
  else {
    float v18 = *(float *)&v11;
  }
  v26[0] = v14;
  *(float *)&v26[1] = v15;
  *(float *)&v26[2] = v16;
  if (v13) {
    int v19 = 255;
  }
  else {
    int v19 = HIDWORD(v11);
  }
  *(float *)&v26[3] = v17;
  *(float *)&void v26[4] = v18;
  v26[5] = v19;
  sub_1B6894834(v19, v2, a1, v15, v16, v17, v18, v24, v23, v22, v21);
  sub_1B6990138(v19, v2, (uint64_t)a1, v15, v16, v17, v18, v24, v23, v22, v21);
  sub_1B698A060((uint64_t)v26, v2, (uint64_t *)a1, v24, v23, v22, v21);
  sub_1B69AE6D4(v19, v2, (uint64_t)a1, v15, v16, v17, v18, v24, v23, v22, v21);
  sub_1B6BE70C4(v19, v2, (void **)a1, v15, v16, v17, v18, v24, v23, v22, v21);

  return swift_release();
}

const char *sub_1B6C33AC0()
{
  return "ParticleColliders.GPU";
}

uint64_t sub_1B6C33AD4()
{
  return type metadata accessor for ParticleCollide.GPUSystem();
}

void sub_1B6C33AF4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6893F78();
    unint64_t v7 = a3(a1, &type metadata for ParticleCollidableCodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1B6C33B58()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 0xD) {
    return 13;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6C33BA4(void *a1)
{
  uint64_t v2 = v1;
  *(void *)(v1 + 64) = 0;
  *(void *)(v1 + 72) = 0;
  *(void *)(v1 + 80) = 0xFF00000000;
  *(_OWORD *)(v1 + 96) = xmmword_1B6E4F300;
  *(_OWORD *)(v1 + 112) = xmmword_1B6E4F320;
  *(_OWORD *)(v1 + 128) = xmmword_1B6E4F2E0;
  *(_OWORD *)(v1 + 144) = xmmword_1B6E4F370;
  *(_DWORD *)(v1 + 160) = 0;
  uint64_t v4 = *a1;
  sub_1B62F7B88(0, (unint64_t *)&qword_1EB980BA0, (unint64_t *)&qword_1EB97EB00, (unint64_t *)&qword_1EB97EAE0);
  swift_retain();
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E76B30;
  *(void *)(inited + 32) = &type metadata for ParticleCollisionEvent;
  *(void *)(inited + 40) = &off_1F0F8CB60;
  *(void *)(inited + 48) = &type metadata for NewEvent;
  *(void *)(inited + 56) = &off_1F0FA6AA8;
  sub_1B62F6E08();
  uint64_t v6 = swift_initStackObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B6E76B30;
  float32x4_t v22 = a1;
  *(void *)(v6 + 32) = a1[4];
  *(void *)(v6 + 56) = &type metadata for EmitterReference;
  *(void *)(v6 + 64) = &off_1F0F6BD40;
  *(void *)(v6 + 96) = &type metadata for AnonymousEntity;
  *(void *)(v6 + 104) = &off_1F0F67E08;
  uint64_t v7 = v4 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
  uint64_t v8 = sub_1B637F1F8(inited);
  uint64_t v9 = swift_bridgeObjectRetain();
  uint64_t v10 = sub_1B63B7CC4(v9, v6);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_1B637FE60(v10);
  if ((v14 & 1) != 0 || (unint64_t v15 = sub_1B63581E4(v12, v13), (v15 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    int v16 = sub_1B637C7BC(v10, v12, (uint64_t)v8, v6);
    swift_bridgeObjectRelease_n();
  }
  else
  {
    int v16 = v15;
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = *(void *)(*(void *)(v4 + 80) + 8 * v16 + 32);
  float v18 = *(os_unfair_lock_s **)(v7 + 24);
  swift_retain();
  os_unfair_lock_unlock(v18);
  swift_setDeallocating();
  sub_1B62C5560(0, (unint64_t *)&qword_1EB97E840);
  swift_arrayDestroy();
  swift_setDeallocating();
  swift_release();
  *(void *)(v2 + 16) = v17;
  long long v19 = *(_OWORD *)(v22 + 13);
  long long v25 = *(_OWORD *)(v22 + 11);
  long long v26 = v19;
  uint64_t v27 = v22[15];
  sub_1B663C898((uint64_t)v23);
  long long v20 = v23[1];
  *(_OWORD *)(v2 + 24) = v23[0];
  *(_OWORD *)(v2 + 40) = v20;
  *(void *)(v2 + 56) = v24;
  return v2;
}

uint64_t getEnumTagSinglePayload for ParticleCollisionEvent(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 65)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ParticleCollisionEvent(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 56) = 0;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 64) = 0;
    *(void *)uint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 65) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ParticleCollisionEvent()
{
  return &type metadata for ParticleCollisionEvent;
}

uint64_t destroy for CollisionHandler(uint64_t a1)
{
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 16);

  return swift_release();
}

uint64_t initializeWithCopy for CollisionHandler(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  long long v4 = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 40) = v4;
  (**(void (***)(uint64_t, uint64_t))(v4 - 8))(a1 + 16, a2 + 16);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(_OWORD *)(a1 + 152) = *(_OWORD *)(a2 + 152);
  *(_OWORD *)(a1 + 168) = *(_OWORD *)(a2 + 168);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a2 + 104);
  *(_OWORD *)(a1 + 184) = *(_OWORD *)(a2 + 184);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(_OWORD *)(a1 + 208) = *(_OWORD *)(a2 + 208);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  swift_retain();
  return a1;
}

uint64_t assignWithCopy for CollisionHandler(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_1B62C15DC((uint64_t *)(a1 + 16), (uint64_t *)(a2 + 16));
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_retain();
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  long long v4 = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(_OWORD *)(a1 + 136) = v4;
  long long v5 = *(_OWORD *)(a2 + 160);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = v5;
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = *(void *)(a2 + 200);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a1 + 224) = *(void *)(a2 + 224);
  return a1;
}

__n128 initializeWithTake for CollisionHandler(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  long long v7 = a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(_OWORD *)(a1 + 112) = v7;
  *(_OWORD *)(a1 + 128) = v8;
  __n128 result = (__n128)a2[11];
  long long v11 = a2[12];
  long long v12 = a2[13];
  *(void *)(a1 + 224) = *((void *)a2 + 28);
  *(_OWORD *)(a1 + 192) = v11;
  *(_OWORD *)(a1 + 208) = v12;
  *(__n128 *)(a1 + 176) = result;
  return result;
}

uint64_t assignWithTake for CollisionHandler(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_OWORD *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v5;
  swift_release();
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a2 + 64);
  *(unsigned char *)(a1 + 68) = *(unsigned char *)(a2 + 68);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  long long v6 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v6;
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
  *(unsigned char *)(a1 + 152) = *(unsigned char *)(a2 + 152);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  uint64_t v7 = *(void *)(a2 + 184);
  *(void *)(a1 + 176) = *(void *)(a2 + 176);
  *(void *)(a1 + 184) = v7;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)(a1 + 216) = *(_OWORD *)(a2 + 216);
  return a1;
}

uint64_t getEnumTagSinglePayload for CollisionHandler(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 232)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 40);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for CollisionHandler(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 216) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 232) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 40) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 232) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CollisionHandler()
{
  return &type metadata for CollisionHandler;
}

ValueMetadata *type metadata accessor for CollisionProperties()
{
  return &type metadata for CollisionProperties;
}

unsigned char *storeEnumTagSinglePayload for ParticleCollidableCodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 12 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 12) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF4) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF3)
  {
    unsigned int v6 = ((a2 - 244) >> 8) + 1;
    *__n128 result = a2 + 12;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C34364);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *__n128 result = a2 + 12;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleCollidableCodingKeys()
{
  return &type metadata for ParticleCollidableCodingKeys;
}

ValueMetadata *type metadata accessor for CollisionLayerSet()
{
  return &type metadata for CollisionLayerSet;
}

unint64_t sub_1B6C343B0()
{
  unint64_t result = qword_1E9DD7460;
  if (!qword_1E9DD7460)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7460);
  }
  return result;
}

unint64_t sub_1B6C34408()
{
  unint64_t result = qword_1E9DD7468;
  if (!qword_1E9DD7468)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7468);
  }
  return result;
}

unint64_t sub_1B6C34460()
{
  unint64_t result = qword_1E9DD7470;
  if (!qword_1E9DD7470)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7470);
  }
  return result;
}

unint64_t sub_1B6C344B8()
{
  unint64_t result = qword_1E9DD7478;
  if (!qword_1E9DD7478)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7478);
  }
  return result;
}

unint64_t sub_1B6C3450C(uint64_t a1)
{
  unint64_t result = sub_1B6C34534();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1B6C34534()
{
  unint64_t result = qword_1E9DD7480;
  if (!qword_1E9DD7480)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7480);
  }
  return result;
}

unint64_t sub_1B6C3458C()
{
  unint64_t result = qword_1E9DD7488;
  if (!qword_1E9DD7488)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7488);
  }
  return result;
}

unint64_t sub_1B6C345E4()
{
  unint64_t result = qword_1E9DD7490;
  if (!qword_1E9DD7490)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7490);
  }
  return result;
}

unint64_t sub_1B6C3463C()
{
  unint64_t result = qword_1E9DD7498;
  if (!qword_1E9DD7498)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7498);
  }
  return result;
}

uint64_t sub_1B6C346B8(unsigned __int8 a1)
{
  if (a1 > 0x65u) {
    return 0;
  }
  else {
    return qword_1B6EB8A68[(char)a1];
  }
}

uint64_t sub_1B6C346E0(unint64_t a1, unint64_t a2, uint64_t a3, unsigned char *a4, size_t a5)
{
  uint64_t v150 = *MEMORY[0x1E4F143B8];
  sub_1B63BE100();
  MEMORY[0x1F4188790](v12 - 8, v13);
  unint64_t v15 = (char *)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  unint64_t v16 = a2 >> 62;
  switch(a2 >> 62)
  {
    case 1uLL:
      if ((uint64_t)(0xFFFFFFFF00000001 * a1) >> 32 > 63) {
        goto LABEL_3;
      }
      goto LABEL_10;
    case 2uLL:
      if ((uint64_t)(*(void *)(a1 + 24) - *(void *)(a1 + 16)) <= 63) {
        goto LABEL_10;
      }
      goto LABEL_3;
    case 3uLL:
      goto LABEL_10;
    default:
      if (BYTE6(a2) <= 0x3FuLL)
      {
LABEL_10:
        sub_1B6C3583C();
        swift_allocError();
        char v22 = 0;
        *(void *)uint64_t v21 = 0xD000000000000028;
        float32x4_t v23 = "KTX file seems too small or is not a KTX";
LABEL_25:
        unint64_t v35 = (unint64_t)(v23 - 32) | 0x8000000000000000;
        goto LABEL_26;
      }
LABEL_3:
      uint64_t v145 = v5;
      unint64_t v146 = a1;
      unint64_t v144 = a2;
      uint64_t v139 = v6;
      size_t v136 = a5;
      unint64_t v141 = (unint64_t)a4;
      if (v16 == 1)
      {
        uint64_t v17 = a3;
        sub_1B62FFBB0(a1, a2);
        uint64_t v24 = sub_1B6E30B98();
        if (v24) {
          uint64_t v25 = v24 - sub_1B6E30BC8() + (int)a1;
        }
        else {
          uint64_t v25 = 0;
        }
        sub_1B6E30BB8();
        uint64_t v26 = *(void *)v25;
        v27.i32[0] = *(_DWORD *)(v25 + 8);
        int16x8_t v143 = (int16x8_t)vmovl_u8(v27);
        int v29 = *(_DWORD *)(v25 + 12);
        int v28 = *(_DWORD *)(v25 + 16);
        int v30 = *(_DWORD *)(v25 + 20);
        LODWORD(v140) = *(_DWORD *)(v25 + 28);
        LODWORD(v134) = *(_DWORD *)(v25 + 36);
        LODWORD(v138) = *(_DWORD *)(v25 + 40);
        LODWORD(v137) = *(_DWORD *)(v25 + 44);
        int v31 = *(_DWORD *)(v25 + 52);
        v142.i32[0] = *(_DWORD *)(v25 + 48);
        LODWORD(v135) = *(_DWORD *)(v25 + 56);
        LODWORD(v133) = *(_DWORD *)(v25 + 60);
        sub_1B62C2360(a1, v144);
      }
      else
      {
        if (v16 != 2)
        {
          __break(1u);
          JUMPOUT(0x1B6C357ECLL);
        }
        uint64_t v17 = a3;
        uint64_t v18 = *(void *)(a1 + 16);
        swift_retain();
        swift_retain();
        uint64_t v19 = sub_1B6E30B98();
        if (v19) {
          uint64_t v20 = v19 + v18 - sub_1B6E30BC8();
        }
        else {
          uint64_t v20 = 0;
        }
        sub_1B6E30BB8();
        uint64_t v26 = *(void *)v20;
        v32.i32[0] = *(_DWORD *)(v20 + 8);
        int16x8_t v143 = (int16x8_t)vmovl_u8(v32);
        int v29 = *(_DWORD *)(v20 + 12);
        int v28 = *(_DWORD *)(v20 + 16);
        int v30 = *(_DWORD *)(v20 + 20);
        LODWORD(v140) = *(_DWORD *)(v20 + 28);
        LODWORD(v134) = *(_DWORD *)(v20 + 36);
        LODWORD(v138) = *(_DWORD *)(v20 + 40);
        LODWORD(v137) = *(_DWORD *)(v20 + 44);
        v142.i32[0] = *(_DWORD *)(v20 + 48);
        int v33 = *(_DWORD *)(v20 + 52);
        LODWORD(v135) = *(_DWORD *)(v20 + 56);
        LODWORD(v133) = *(_DWORD *)(v20 + 60);
        int v31 = v33;
        swift_release();
        a1 = v146;
        swift_release();
      }
      if (v26 != 0xBB31312058544BABLL || vmovn_s16(v143).u32[0] != 169478669)
      {
        sub_1B6C3583C();
        swift_allocError();
        char v22 = 0;
        *(void *)uint64_t v21 = 0xD000000000000011;
        float32x4_t v23 = "file is not a KTX";
        goto LABEL_25;
      }
      if (v29 != 67305985)
      {
        sub_1B6C3583C();
        swift_allocError();
        char v22 = 0;
        *(void *)uint64_t v21 = 0xD000000000000021;
        float32x4_t v23 = "Only big endian ktx are supported";
        goto LABEL_25;
      }
      uint64_t v34 = v17;
      if (v28 && v30 == 1)
      {
        sub_1B6C3583C();
        swift_allocError();
        char v22 = 0;
        *(void *)uint64_t v21 = 0xD000000000000021;
        float32x4_t v23 = "Only compressed ktx are supported";
        goto LABEL_25;
      }
      if (v142.i32[0] < 2u)
      {
        float v37 = (char *)v141;
        int v38 = v140;
        if (v31 == 6)
        {
          v145[7] = 5;
        }
        else if (v137 < 2)
        {
          if (v138 < 2) {
            v145[7] = 0;
          }
          else {
            v145[7] = 2;
          }
        }
        else
        {
          v145[7] = 7;
        }
      }
      else
      {
        float v37 = (char *)v141;
        int v38 = v140;
        if (v31 == 6)
        {
          v145[7] = 6;
        }
        else if (v138 < 2)
        {
          v145[7] = 1;
        }
        else
        {
          v145[7] = 3;
        }
      }
      unsigned __int8 v39 = sub_1B6C35890(v38);
      if (v39 == 140)
      {
        v147.i64[0] = 0;
        v147.i64[1] = 0xE000000000000000;
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        v147.i64[0] = 0xD000000000000016;
        v147.i64[1] = 0x80000001B6F4DE40;
        LODWORD(v149) = v38;
        goto LABEL_141;
      }
      uint64_t v40 = sub_1B6C346B8(v39);
      char v41 = *v37;
      LODWORD(v132) = v31;
      if ((v41 & 4) != 0) {
        uint64_t v42 = sub_1B6398884(v40);
      }
      else {
        uint64_t v42 = sub_1B6BBD24C(v40);
      }
      uint64_t v43 = v42;
      float v44 = v145;
      v145[6] = v42;
      size_t v45 = v136;
      swift_getObjectType();
      if ((sub_1B6BBC86C() & 1) == 0)
      {
        v147.i64[0] = 0;
        v147.i64[1] = 0xE000000000000000;
        sub_1B6E328C8();
        sub_1B6E31948();
        _sSo14MTLPixelFormatV3VFXE11descriptionSSvg_0(v43);
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        unint64_t v149 = v45;
        sub_1B6C366F8();
        sub_1B6E32B18();
        unint64_t v35 = v147.u64[1];
        uint64_t v53 = v147.i64[0];
        sub_1B6C3583C();
        swift_allocError();
        *(void *)uint64_t v21 = v53;
        char v22 = 1;
        goto LABEL_26;
      }
      unsigned __int16 v46 = v134;
      if (!v134) {
        unsigned __int16 v46 = 1;
      }
      *((_WORD *)v44 + 16) = v46;
      __int16 v47 = v138;
      if (!v138) {
        __int16 v47 = 1;
      }
      *((_WORD *)v44 + 17) = v47;
      __int16 v48 = v137;
      if (!v137) {
        __int16 v48 = 1;
      }
      *((_WORD *)v44 + 18) = v48;
      char v49 = v135;
      if (!v135) {
        char v49 = 1;
      }
      *((unsigned char *)v44 + 40) = v49;
      *((unsigned char *)v44 + 41) = 1;
      __int16 v50 = v142.i16[0];
      if (v142.i32[0] <= 1u) {
        __int16 v50 = 1;
      }
      *((_WORD *)v44 + 19) = v50;
      *((_OWORD *)v44 + 4) = xmmword_1B6EA0BC0;
      int v51 = v46;
      if ((unint64_t)(v43 - 160) <= 0x3A && ((1 << (v43 + 96)) & 0x7FDF1FF7CFD54FFLL) != 0)
      {
        if ((unint64_t)(v43 - 186) > 0x20) {
          LODWORD(v52) = 1;
        }
        else {
          uint64_t v52 = qword_1B6EB8D98[v43 - 186];
        }
        uint64_t v54 = 16 * (((int)v52 + v51 - 1) / v52);
      }
      else
      {
        uint64_t v54 = sub_1B6368160(v43) * v46;
      }
      v143.i64[0] = v54;
      if (v16 == 2) {
        uint64_t v55 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
      }
      else {
        uint64_t v55 = (uint64_t)(0xFFFFFFFF00000001 * a1) >> 32;
      }
      uint64_t v56 = v133;
      id v57 = sub_1B6397BCC(v55, 0);
      uint64_t v59 = v58;
      uint64_t v61 = v60;
      uint64_t v62 = v145;
      swift_unknownObjectRelease();
      *uint64_t v62 = v57;
      v62[1] = v59;
      v62[2] = v61;
      sub_1B663AB08(v34, (uint64_t)v15);
      uint64_t v63 = sub_1B6E30F48();
      uint64_t v64 = *(void *)(v63 - 8);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v64 + 48))(v15, 1, v63) == 1)
      {
        sub_1B663ABE8((uint64_t)v15);
        unint64_t v65 = v144;
        sub_1B6E30F78();
      }
      else
      {
        sub_1B6E30E58();
        (*(void (**)(char *, uint64_t))(v64 + 8))(v15, v63);
        unint64_t v65 = v144;
      }
      uint64_t v66 = v134;
      id v67 = (id)*v145;
      uint64_t v68 = v138;
      if (*v145)
      {
        uint64_t v69 = (void *)sub_1B6E31768();
        swift_bridgeObjectRelease();
        objc_msgSend(v67, sel_setLabel_, v69);
      }
      else
      {
        swift_bridgeObjectRelease();
      }
      unint64_t v70 = v56 + 64;
      size_t v72 = (void *)*v145;
      uint64_t v71 = v145[1];
      if (objc_msgSend((id)*v145, sel_storageMode) == (id)2)
      {
        float32x4_t v133 = 0;
      }
      else
      {
        uint64_t v73 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
        id v74 = v72;
        float32x4_t v133 = &v73[v71];
      }
      uint64_t v75 = v139;
      if (v132 <= 1) {
        uint64_t v76 = 1;
      }
      else {
        uint64_t v76 = v132;
      }
      uint64_t v134 = v76;
      if (v135 <= 1) {
        uint64_t v77 = 1;
      }
      else {
        uint64_t v77 = v135;
      }
      uint64_t v117 = v77;
      if (v137 <= 1) {
        uint64_t v78 = 1;
      }
      else {
        uint64_t v78 = v137;
      }
      sub_1B638955C(v66, v68, v78, &v147);
      unint64_t v79 = 0;
      unint64_t v80 = 0;
      uint64_t v119 = (int)a1;
      int64x2_t v142 = v147;
      uint64_t v138 = v148;
      uint64_t v128 = (uint64_t)(0xFFFFFFFF00000001 * a1) >> 32;
      uint64_t v137 = BYTE6(v65);
      unint64_t v127 = v65 >> 40;
      unint64_t v126 = HIDWORD(v65);
      unint64_t v125 = v65 >> 24;
      unint64_t v124 = v65 >> 16;
      unint64_t v123 = v65 >> 8;
      unint64_t v122 = HIBYTE(a1);
      unint64_t v121 = HIWORD(a1);
      unint64_t v120 = a1 >> 40;
      unint64_t v81 = v16;
      char v82 = v145;
      unint64_t v141 = v16;
      break;
  }
LABEL_85:
  unint64_t v140 = v79;
  unint64_t v132 = HIDWORD(a1);
  unint64_t v131 = a1 >> 24;
  unint64_t v130 = a1 >> 16;
  unint64_t v129 = a1 >> 8;
  uint64_t v139 = v75;
  unint64_t v118 = v79 + 1;
  switch(v81)
  {
    case 1uLL:
      sub_1B62FFBB0(a1, v65);
      uint64_t v83 = sub_1B6E30B98();
      if (v83) {
        uint64_t v84 = v83 + v119 - sub_1B6E30BC8();
      }
      else {
        uint64_t v84 = 0;
      }
      sub_1B6E30BB8();
      size_t v88 = *(unsigned int *)(v84 + v70);
      a1 = v146;
      sub_1B62C2360(v146, v65);
      goto LABEL_97;
    case 2uLL:
      uint64_t v85 = *(void *)(a1 + 16);
      swift_retain();
      swift_retain();
      uint64_t v86 = sub_1B6E30B98();
      if (v86) {
        uint64_t v87 = v86 + v85 - sub_1B6E30BC8();
      }
      else {
        uint64_t v87 = 0;
      }
      sub_1B6E30BB8();
      size_t v88 = *(unsigned int *)(v87 + v70);
      swift_release();
      a1 = v146;
      swift_release();
LABEL_97:
      unint64_t v81 = v141;
      goto LABEL_98;
    case 3uLL:
      *(uint64_t *)((char *)v147.i64 + 6) = 0;
      v147.i64[0] = 0;
      goto LABEL_92;
    default:
      v147.i8[0] = a1;
      v147.i8[1] = v129;
      v147.i8[2] = v130;
      v147.i8[3] = v131;
      v147.i8[4] = v132;
      v147.i8[5] = v120;
      v147.i8[6] = v121;
      v147.i8[7] = v122;
      v147.i8[8] = v65;
      v147.i8[9] = v123;
      v147.i8[10] = v124;
      v147.i8[11] = v125;
      v147.i8[12] = v126;
      v147.i8[13] = v127;
LABEL_92:
      size_t v88 = *(unsigned int *)((char *)v147.u32 + v70);
LABEL_98:
      unint64_t v89 = 0;
      v70 += 4;
      uint64_t v135 = v142.i64[0] - 1;
      size_t v136 = v88 + 3;
      break;
  }
  while (2)
  {
    unint64_t v90 = v89++;
    uint64_t v91 = v70 + v88;
    uint64_t v92 = v137;
    switch(v81)
    {
      case 1uLL:
        uint64_t v92 = v128;
        goto LABEL_102;
      case 2uLL:
        uint64_t v92 = *(void *)(a1 + 24) - *(void *)(a1 + 16);
        goto LABEL_102;
      case 3uLL:
        if (v91 <= 0) {
          goto LABEL_105;
        }
        goto LABEL_136;
      default:
LABEL_102:
        if (v92 >= v91)
        {
LABEL_105:
          uint64_t v93 = v82[6];
          if ((unint64_t)(v93 - 160) <= 0x3A
            && ((1 << (v93 + 96)) & 0x7FDF1FF7CFD54FFLL) != 0)
          {
            unint64_t v95 = v93 - 186;
            if (v95 > 0x20) {
              uint64_t v96 = 1;
            }
            else {
              uint64_t v96 = qword_1B6EB8D98[v95];
            }
            v143.i64[0] = 16 * ((v135 + v96) / v96);
          }
          switch(v81)
          {
            case 1uLL:
              sub_1B62FFBB0(a1, v144);
              uint64_t v99 = sub_1B6E30B98();
              if (v99) {
                uint64_t v100 = v99 + v119 - sub_1B6E30BC8();
              }
              else {
                uint64_t v100 = 0;
              }
              char v82 = v145;
              sub_1B6E30BB8();
              memcpy(&v133[v80], (const void *)(v100 + v70), v88);
              sub_1B62C2360(v146, v144);
              break;
            case 2uLL:
              uint64_t v101 = *(void *)(a1 + 16);
              swift_retain();
              swift_retain();
              uint64_t v102 = sub_1B6E30B98();
              if (v102) {
                uint64_t v103 = v102 + v101 - sub_1B6E30BC8();
              }
              else {
                uint64_t v103 = 0;
              }
              char v82 = v145;
              sub_1B6E30BB8();
              memcpy(&v133[v80], (const void *)(v103 + v70), v88);
              swift_release();
              swift_release();
              break;
            case 3uLL:
              uint64_t v97 = &v133[v80];
              uint64_t v98 = &v147.i8[v70];
              *(uint64_t *)((char *)v147.i64 + 6) = 0;
              v147.i64[0] = 0;
              goto LABEL_120;
            default:
              v147.i8[0] = a1;
              v147.i8[1] = v129;
              v147.i8[2] = v130;
              v147.i8[3] = v131;
              v147.i8[4] = v132;
              v147.i8[5] = v120;
              v147.i8[6] = v121;
              v147.i8[7] = v122;
              v147.i8[8] = v144;
              v147.i8[9] = v123;
              v147.i8[10] = v124;
              v147.i8[11] = v125;
              v147.i8[12] = v126;
              uint64_t v97 = &v133[v80];
              uint64_t v98 = &v147.i8[v70];
              v147.i8[13] = v127;
LABEL_120:
              memcpy(v97, v98, v88);
              break;
          }
          uint64_t v104 = v82[14];
          uint64_t result = swift_isUniquelyReferenced_nonNull_native();
          if ((result & 1) == 0)
          {
            uint64_t result = (uint64_t)sub_1B68C3984(0, *(void *)(v104 + 16) + 1, 1, (char *)v104);
            uint64_t v104 = result;
          }
          unint64_t v106 = *(void *)(v104 + 16);
          unint64_t v105 = *(void *)(v104 + 24);
          unint64_t v81 = v141;
          if (v106 >= v105 >> 1)
          {
            uint64_t result = (uint64_t)sub_1B68C3984(v105 > 1, v106 + 1, 1, (char *)v104);
            unint64_t v81 = v141;
            uint64_t v104 = result;
          }
          *(void *)(v104 + 16) = v106 + 1;
          unint64_t v107 = v104 + (v106 << 6);
          uint64_t v108 = v143.i64[0];
          *(void *)(v107 + 32) = v80;
          *(void *)(v107 + 40) = v108;
          *(void *)(v107 + 48) = v88;
          *(int64x2_t *)(v107 + 56) = v142;
          *(void *)(v107 + 72) = v138;
          *(void *)(v107 + 80) = v90;
          *(void *)(v107 + 88) = v140;
          uint64_t v109 = v91 + 3;
          if (v91 + 3 < 0) {
            uint64_t v109 = v91 + 6;
          }
          unint64_t v70 = v109 & 0xFFFFFFFFFFFFFFFCLL;
          float32x4_t v110 = v145;
          a1 = v146;
          v145[14] = v104;
          char v82 = v110;
          unint64_t v80 = (v136 + v80 + ((uint64_t)(v136 + v80) < 0 ? 3uLL : 0)) & 0xFFFFFFFFFFFFFFFCLL;
          if (v134 != v89) {
            continue;
          }
          int64x2_t v111 = vshrq_n_s64(v142, 1uLL);
          int8x16_t v112 = (int8x16_t)vcgtq_s64(v111, vdupq_n_s64(1uLL));
          uint64_t v75 = v139;
          uint64_t v113 = v138 >> 1;
          int64x2_t v142 = vsubq_s64((int64x2_t)vandq_s8((int8x16_t)v111, v112), (int64x2_t)vmvnq_s8(v112));
          if (v138 >> 1 <= 1) {
            uint64_t v113 = 1;
          }
          uint64_t v138 = v113;
          v143.i64[0] >>= 1;
          unint64_t v79 = v118;
          unint64_t v65 = v144;
          if (v118 == v117) {
            return result;
          }
          goto LABEL_85;
        }
LABEL_136:
        v147.i64[0] = 0;
        v147.i64[1] = 0xE000000000000000;
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        v147.i64[0] = 0xD000000000000017;
        v147.i64[1] = 0x80000001B6F4DE90;
        unint64_t v149 = v90;
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        unint64_t v149 = v140;
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        unint64_t v149 = v70 + v88;
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        uint64_t v114 = 0;
        switch(v141)
        {
          case 1uLL:
            uint64_t v114 = v128;
            break;
          case 2uLL:
            uint64_t v114 = *(void *)(v146 + 24) - *(void *)(v146 + 16);
            break;
          case 3uLL:
            break;
          default:
            uint64_t v114 = v137;
            break;
        }
        unint64_t v149 = v114;
LABEL_141:
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        unint64_t v35 = v147.u64[1];
        uint64_t v115 = v147.i64[0];
        sub_1B6C3583C();
        swift_allocError();
        char v22 = 0;
        *(void *)uint64_t v21 = v115;
LABEL_26:
        *(void *)(v21 + 8) = v35;
        *(unsigned char *)(v21 + 16) = v22;
        return swift_willThrow();
    }
  }
}

unint64_t sub_1B6C3583C()
{
  unint64_t result = qword_1E9DD74A8;
  if (!qword_1E9DD74A8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD74A8);
  }
  return result;
}

uint64_t sub_1B6C35890(int a1)
{
  if (a1 <= 36165)
  {
    if (a1 > 33776)
    {
      if (a1 <= 35839)
      {
        if (a1 > 34835)
        {
          switch(a1)
          {
            case 35412:
              uint64_t result = 106;
              break;
            case 35413:
              uint64_t result = 107;
              break;
            case 35414:
              uint64_t result = 108;
              break;
            case 35415:
              uint64_t result = 109;
              break;
            default:
              if (a1 != 35056) {
                goto LABEL_142;
              }
              uint64_t result = 68;
              break;
          }
        }
        else
        {
          switch(a1)
          {
            case 33777:
              return 110;
            case 33778:
              return 112;
            case 33779:
              return 114;
          }
LABEL_142:
          if (a1 > 35911)
          {
            uint64_t result = 128;
            switch(a1)
            {
              case 37492:
                uint64_t result = 130;
                break;
              case 37493:
                uint64_t result = 131;
                break;
              case 37494:
                uint64_t result = 132;
                break;
              case 37495:
                uint64_t result = 133;
                break;
              case 37496:
                return result;
              case 37497:
                uint64_t result = 129;
                break;
              default:
                if (a1 == 35912)
                {
                  uint64_t result = 138;
                }
                else
                {
                  if (a1 != 35913) {
                    return 140;
                  }
                  uint64_t result = 139;
                }
                break;
            }
          }
          else
          {
            if (a1 > 34028)
            {
              if (a1 == 34029) {
                return 136;
              }
              if (a1 == 34030) {
                return 137;
              }
            }
            else
            {
              if (a1 == 33317) {
                return 134;
              }
              if (a1 == 33318) {
                return 135;
              }
            }
            return 140;
          }
        }
      }
      else
      {
        switch(a1)
        {
          case 35840:
            return 103;
          case 35841:
            return 102;
          case 35842:
            return 105;
          case 35843:
            return 104;
          case 35844:
          case 35845:
          case 35846:
          case 35847:
          case 35848:
          case 35849:
          case 35850:
          case 35851:
          case 35852:
          case 35853:
          case 35854:
          case 35855:
          case 35856:
          case 35857:
          case 35858:
          case 35859:
          case 35860:
          case 35861:
          case 35862:
          case 35863:
          case 35864:
          case 35865:
          case 35866:
          case 35867:
          case 35868:
          case 35869:
          case 35870:
          case 35871:
          case 35872:
          case 35873:
          case 35874:
          case 35875:
          case 35876:
          case 35877:
          case 35878:
          case 35879:
          case 35880:
          case 35881:
          case 35882:
          case 35883:
          case 35884:
          case 35885:
          case 35886:
          case 35887:
          case 35888:
          case 35889:
          case 35890:
          case 35891:
          case 35892:
          case 35893:
          case 35894:
          case 35895:
          case 35896:
          case 35897:
          case 35899:
          case 35900:
          case 35902:
          case 35903:
          case 35904:
          case 35906:
          case 35908:
          case 35909:
          case 35910:
          case 35911:
          case 35912:
          case 35913:
          case 35914:
          case 35915:
          case 35916:
            goto LABEL_142;
          case 35898:
            return 38;
          case 35901:
            return 39;
          case 35905:
            return 28;
          case 35907:
            return 29;
          case 35917:
            return 111;
          case 35918:
            return 113;
          case 35919:
            return 115;
          default:
            if (a1 == 36012)
            {
              uint64_t result = 67;
            }
            else
            {
              if (a1 != 36013) {
                goto LABEL_142;
              }
              uint64_t result = 69;
            }
            break;
        }
      }
    }
    else
    {
      int v3 = a1 - 33189;
      uint64_t v4 = 0;
      uint64_t result = 44;
      switch(v3)
      {
        case 0:
          uint64_t result = 64;
          break;
        case 1:
          uint64_t result = 65;
          break;
        case 2:
          uint64_t result = 66;
          break;
        case 3:
        case 4:
        case 5:
        case 6:
        case 7:
        case 8:
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 14:
        case 15:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 21:
        case 22:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 28:
        case 29:
        case 30:
        case 31:
        case 32:
        case 33:
        case 34:
        case 35:
        case 36:
        case 37:
        case 38:
        case 39:
        case 40:
        case 41:
        case 42:
        case 43:
        case 44:
        case 45:
        case 46:
        case 47:
        case 48:
        case 49:
        case 50:
        case 51:
        case 52:
        case 53:
        case 54:
        case 55:
        case 56:
        case 57:
        case 58:
        case 59:
        case 60:
        case 61:
        case 62:
        case 63:
        case 64:
        case 65:
        case 66:
        case 67:
        case 68:
        case 69:
        case 70:
        case 71:
        case 72:
        case 73:
        case 74:
        case 75:
        case 76:
        case 77:
        case 78:
        case 79:
        case 80:
        case 81:
        case 82:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 92:
        case 93:
        case 94:
        case 95:
        case 96:
        case 97:
        case 98:
        case 99:
        case 100:
        case 101:
        case 102:
        case 103:
        case 104:
        case 105:
        case 106:
        case 107:
        case 108:
        case 109:
        case 110:
        case 111:
        case 112:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 119:
        case 120:
        case 121:
        case 122:
        case 123:
        case 124:
        case 125:
        case 126:
        case 127:
        case 128:
        case 129:
        case 130:
        case 131:
          goto LABEL_142;
        case 132:
          return v4;
        case 133:
          return 2;
        case 134:
          return 4;
        case 135:
          return 6;
        case 136:
          return 30;
        case 137:
          return 34;
        case 138:
          return 31;
        case 139:
          return 35;
        case 140:
          return 40;
        case 141:
          return 41;
        case 142:
          return 42;
        case 143:
          return 43;
        case 144:
          return result;
        case 145:
          uint64_t result = 45;
          break;
        case 146:
          uint64_t result = 46;
          break;
        case 147:
          uint64_t result = 47;
          break;
        case 148:
          uint64_t result = 48;
          break;
        case 149:
          uint64_t result = 49;
          break;
        case 150:
          uint64_t result = 50;
          break;
        case 151:
          uint64_t result = 51;
          break;
        default:
          switch(a1)
          {
            case 32847:
              return 9;
            case 32848:
              return 10;
            case 32849:
              return 12;
            case 32850:
              return 14;
            case 32851:
              return 15;
            case 32852:
              return 16;
            case 32853:
              return 18;
            case 32854:
              return 19;
            case 32855:
              return 20;
            case 32856:
              return 21;
            case 32857:
              return 23;
            case 32858:
              return 25;
            case 32859:
              return 26;
            default:
              if (a1 != 10768) {
                goto LABEL_142;
              }
              uint64_t v4 = 8;
              break;
          }
          return v4;
      }
    }
  }
  else if (a1 > 36974)
  {
    switch(a1)
    {
      case 37808:
        uint64_t result = 74;
        break;
      case 37809:
        uint64_t result = 75;
        break;
      case 37810:
        uint64_t result = 76;
        break;
      case 37811:
        uint64_t result = 77;
        break;
      case 37812:
        uint64_t result = 78;
        break;
      case 37813:
        uint64_t result = 79;
        break;
      case 37814:
        uint64_t result = 80;
        break;
      case 37815:
        uint64_t result = 81;
        break;
      case 37816:
        uint64_t result = 82;
        break;
      case 37817:
        uint64_t result = 83;
        break;
      case 37818:
        uint64_t result = 84;
        break;
      case 37819:
        uint64_t result = 85;
        break;
      case 37820:
        uint64_t result = 86;
        break;
      case 37821:
        uint64_t result = 87;
        break;
      case 37822:
      case 37823:
      case 37824:
      case 37825:
      case 37826:
      case 37827:
      case 37828:
      case 37829:
      case 37830:
      case 37831:
      case 37832:
      case 37833:
      case 37834:
      case 37835:
      case 37836:
      case 37837:
      case 37838:
      case 37839:
        goto LABEL_142;
      case 37840:
        uint64_t result = 88;
        break;
      case 37841:
        uint64_t result = 89;
        break;
      case 37842:
        uint64_t result = 90;
        break;
      case 37843:
        uint64_t result = 91;
        break;
      case 37844:
        uint64_t result = 92;
        break;
      case 37845:
        uint64_t result = 93;
        break;
      case 37846:
        uint64_t result = 94;
        break;
      case 37847:
        uint64_t result = 95;
        break;
      case 37848:
        uint64_t result = 96;
        break;
      case 37849:
        uint64_t result = 97;
        break;
      case 37850:
        uint64_t result = 98;
        break;
      case 37851:
        uint64_t result = 99;
        break;
      case 37852:
        uint64_t result = 100;
        break;
      case 37853:
        uint64_t result = 101;
        break;
      default:
        switch(a1)
        {
          case 37488:
            uint64_t result = 124;
            break;
          case 37489:
            uint64_t result = 125;
            break;
          case 37490:
            uint64_t result = 126;
            break;
          case 37491:
            uint64_t result = 127;
            break;
          default:
            if (a1 != 36975) {
              goto LABEL_142;
            }
            return 24;
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 36166:
        uint64_t result = 70;
        break;
      case 36167:
        uint64_t result = 71;
        break;
      case 36168:
        uint64_t result = 72;
        break;
      case 36169:
        uint64_t result = 73;
        break;
      case 36170:
      case 36171:
      case 36172:
      case 36173:
      case 36174:
      case 36175:
      case 36176:
      case 36177:
      case 36178:
      case 36179:
      case 36180:
      case 36181:
      case 36182:
      case 36183:
      case 36184:
      case 36185:
      case 36186:
      case 36187:
      case 36188:
      case 36189:
      case 36190:
      case 36191:
      case 36192:
      case 36193:
      case 36195:
      case 36196:
      case 36197:
      case 36198:
      case 36199:
      case 36200:
      case 36201:
      case 36202:
      case 36203:
      case 36204:
      case 36205:
      case 36206:
      case 36207:
      case 36210:
      case 36211:
      case 36212:
      case 36213:
      case 36216:
      case 36217:
      case 36218:
      case 36219:
      case 36222:
      case 36223:
      case 36224:
      case 36225:
      case 36228:
      case 36229:
      case 36230:
      case 36231:
      case 36234:
      case 36235:
      case 36236:
      case 36237:
      case 36240:
      case 36241:
      case 36242:
      case 36243:
      case 36244:
      case 36245:
      case 36246:
      case 36247:
      case 36248:
      case 36249:
      case 36250:
      case 36251:
      case 36252:
      case 36253:
      case 36254:
      case 36255:
      case 36256:
      case 36257:
      case 36258:
      case 36259:
      case 36260:
      case 36261:
      case 36262:
      case 36263:
      case 36264:
      case 36265:
      case 36266:
      case 36267:
      case 36268:
      case 36269:
      case 36270:
      case 36271:
      case 36272:
      case 36273:
      case 36274:
      case 36275:
      case 36276:
      case 36277:
      case 36278:
      case 36279:
      case 36280:
      case 36281:
      case 36282:
        goto LABEL_142;
      case 36194:
        return 11;
      case 36208:
        uint64_t result = 63;
        break;
      case 36209:
        uint64_t result = 57;
        break;
      case 36214:
        uint64_t result = 61;
        break;
      case 36215:
        uint64_t result = 55;
        break;
      case 36220:
        uint64_t result = 59;
        break;
      case 36221:
        uint64_t result = 53;
        break;
      case 36226:
        uint64_t result = 62;
        break;
      case 36227:
        uint64_t result = 56;
        break;
      case 36232:
        uint64_t result = 60;
        break;
      case 36233:
        uint64_t result = 54;
        break;
      case 36238:
        uint64_t result = 58;
        break;
      case 36239:
        uint64_t result = 52;
        break;
      case 36283:
        uint64_t result = 116;
        break;
      case 36284:
        uint64_t result = 117;
        break;
      case 36285:
        uint64_t result = 118;
        break;
      case 36286:
        uint64_t result = 119;
        break;
      default:
        switch(a1)
        {
          case 36756:
            return 1;
          case 36757:
            return 5;
          case 36758:
            return 13;
          case 36759:
            return 22;
          case 36760:
            return 3;
          case 36761:
            return 7;
          case 36762:
            return 17;
          case 36763:
            return 27;
          default:
            switch(a1)
            {
              case 36492:
                uint64_t result = 122;
                break;
              case 36493:
                uint64_t result = 123;
                break;
              case 36494:
                uint64_t result = 120;
                break;
              case 36495:
                uint64_t result = 121;
                break;
              default:
                goto LABEL_142;
            }
            break;
        }
        break;
    }
  }
  return result;
}

unint64_t sub_1B6C366F8()
{
  unint64_t result = qword_1E9DD74B0;
  if (!qword_1E9DD74B0)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9DD74B0);
  }
  return result;
}

uint64_t sub_1B6C36754(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRetain();
  }
  return result;
}

uint64_t destroy for KTXLoadingError(uint64_t a1)
{
  return sub_1B6C3677C(*(void *)a1, *(void *)(a1 + 8), *(unsigned char *)(a1 + 16));
}

uint64_t sub_1B6C3677C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  if (a3 <= 2u) {
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t _s3VFX15KTXLoadingErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1B6C36754(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(unsigned char *)(a1 + 16) = v5;
  return a1;
}

uint64_t assignWithCopy for KTXLoadingError(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unsigned __int8 v5 = *(unsigned char *)(a2 + 16);
  sub_1B6C36754(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  unsigned __int8 v8 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v5;
  sub_1B6C3677C(v6, v7, v8);
  return a1;
}

uint64_t assignWithTake for KTXLoadingError(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  unsigned __int8 v6 = *(unsigned char *)(a1 + 16);
  *(unsigned char *)(a1 + 16) = v3;
  sub_1B6C3677C(v4, v5, v6);
  return a1;
}

uint64_t sub_1B6C36880(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

ValueMetadata *type metadata accessor for KTXLoadingError()
{
  return &type metadata for KTXLoadingError;
}

double (*sub_1B6C36898(void *a1, int a2, uint64_t a3))(void)
{
  if (*(void *)(a3 + 16) <= a2) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *(void *)(a3 + 8 * a2 + 32);
  }
  uint64_t result = nullsub_1;
  *a1 = v4;
  return result;
}

uint64_t sub_1B6C368F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for Position);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C36B08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for Mass);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C36D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for Color);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C36F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for Velocity);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C37138(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for Scale);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C37348(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for Scale3);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C37558(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for Scale1);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C37768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for Scale2);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C37978(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for AngularVelocity);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C37B98(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for Orientation);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C37DB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for ParticleAngle);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C37FD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for ParticleAngleVelocity);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C381E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for ParticleID);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C38400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for ParticleParentID);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C38618(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for ParticleTextureFrame);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C3882C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for ParticlePivot);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C38A4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for LinearFactor);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C38C68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for AngularFactor);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C38E88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for ParticleAge);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C390A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for ParticleTarget);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C392C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for ParticleRoughness);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C394D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for ParticleMetalness);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C396EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for ParticleEmission);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C39904(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for UserData1);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C39B1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for UserData2);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C39D34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for UserData3);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t sub_1B6C39F4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 64);
  uint64_t v7 = *(void *)(a1 + 104);
  char v8 = *(unsigned char *)(a1 + 112);
  long long v18 = *(_OWORD *)(a1 + 48);
  uint64_t v19 = v6;
  long long v20 = *(_OWORD *)(a1 + 72);
  long long v21 = *(_OWORD *)(a1 + 88);
  uint64_t v22 = v7;
  char v23 = v8;
  uint64_t v9 = sub_1B6D662D0((uint64_t)&type metadata for UserData4);
  if (v11)
  {
    uint64_t v13 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    *(void *)&long long v18 = 0;
    *((void *)&v18 + 1) = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E31948();
    sub_1B6E31948();
    long long v14 = v18;
    uint64_t v15 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, void, void))(*(void *)v13 + 88))(v15, &v18, v14, *((void *)&v14 + 1));
    swift_release();
    swift_bridgeObjectRelease();
  }
  else
  {
    if (*(void *)(a1 + 232) <= a3 && *(void *)(a1 + 240) > a3) {
      return *(void *)(a1 + 128) + v9 + v10 * a3;
    }
    uint64_t v16 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v17 = sub_1B6E32148();
    *(void *)&long long v18 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v16 + 88))(v17, &v18, 0xD000000000000032, 0x80000001B6F4E020);
    swift_release();
  }
  return 0;
}

uint64_t vfx_script_get_iteration_range(_:_:_:)(uint64_t result, _DWORD *a2, _DWORD *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  *a2 = *(void *)(result + 24);
  *a3 = v3;
  return result;
}

uint64_t vfx_script_get_arguments_buffer(_:)(uint64_t a1)
{
  return *(void *)(a1 + 48);
}

uint64_t vfx_script_event_stream_post_custom_c()
{
  sub_1B6E31968();

  return swift_bridgeObjectRelease();
}

uint64_t vfx_script_event_stream_post_custom_c(_:)()
{
  sub_1B6E31968();

  return swift_bridgeObjectRelease();
}

uint64_t vfx_script_log(_:_:)(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
  swift_retain();
  uint64_t v6 = sub_1B6E32168();
  uint64_t v8 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v5 + 88))(v6, &v8, a2, a3);

  return swift_release();
}

uint64_t vfx_script_log(void *a1)
{
  uint64_t v1 = *(void *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
  swift_retain();
  uint64_t v2 = sub_1B6E31968();
  uint64_t v4 = v3;
  uint64_t v5 = sub_1B6E32168();
  uint64_t v7 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v1 + 88))(v5, &v7, v2, v4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t vfx_script_log(_:_:)(void *a1)
{
  uint64_t v1 = *(void *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
  swift_retain();
  uint64_t v2 = sub_1B6E31968();
  uint64_t v4 = v3;
  uint64_t v5 = sub_1B6E32168();
  uint64_t v7 = 0;
  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v1 + 88))(v5, &v7, v2, v4);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t vfx_script_debug_mode()
{
  return 0;
}

Swift::Bool __swiftcall vfx_script_debug_mode()()
{
  return 0;
}

uint64_t vfx_script_graph_log(_:_:_:)(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_1B6E31968();
  uint64_t v7 = v6;
  unint64_t v8 = sub_1B6C2F88C(a2);
  if ((~v8 & 0xF000000000000007) != 0)
  {
    unint64_t v9 = v8;
    sub_1B69B27D0(v8);
    if (v10)
    {
      sub_1B6C3A5FC(v10, v5, v7, a3, v10);
      sub_1B6827B68(v9);
      return swift_bridgeObjectRelease();
    }
    sub_1B6827B68(v9);
  }
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  swift_retain();
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  uint64_t v16 = v5;
  uint64_t v17 = v7;
  sub_1B6E31948();
  unint64_t v12 = sub_1B6C2F88C(a2);
  unint64_t v13 = v12;
  if ((~v12 & 0xF000000000000007) == 0) {
    unint64_t v12 = 0x8000000000000000;
  }
  sub_1B69B0F8C(v12);
  sub_1B6827B68(v13);
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v14 = v16;
  int v15 = sub_1B6E32148();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v16 = 0;
  swift_retain();
  sub_1B6B33E34(v15, &v16, v14, v17);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t sub_1B6C3A5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = *(void *)(a5 - 8);
  MEMORY[0x1F4188790](a1, a2);
  unint64_t v9 = (char *)&v14 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  uint64_t v14 = 0;
  unint64_t v15 = 0xE000000000000000;
  swift_retain();
  sub_1B6E31948();
  sub_1B6E31948();
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a4, a5);
  sub_1B6E33458();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, a5);
  uint64_t v10 = v14;
  uint64_t v11 = v15;
  int v12 = sub_1B6E32168();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v14 = 0;
  swift_retain();
  sub_1B6B33E34(v12, &v14, v10, v11);
  swift_release();
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t vfx_script_graph_record_values(_:_:_:_:_:_:)(uint64_t *a1, uint64_t a2, unsigned int a3, uint64_t a4, unsigned int a5, uint64_t a6)
{
  unsigned __int16 v46 = a1;
  uint64_t v47 = a2;
  uint64_t v10 = sub_1B6E31118();
  uint64_t v11 = *(void *)(v10 - 8);
  MEMORY[0x1F4188790](v10, v12);
  uint64_t v14 = (char *)&v44 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = MEMORY[0x1E4FBC860];
  uint64_t v49 = v11;
  uint64_t v50 = v16;
  __int16 v48 = v14;
  if (a3)
  {
    HIDWORD(v44) = a5;
    uint64_t v45 = a6;
    uint64_t v17 = a3;
    uint64_t v54 = MEMORY[0x1E4FBC860];
    sub_1B6C3D9A8(0, a3, 0);
    uint64_t v15 = v54;
    long long v18 = (uint64_t *)(a4 + 8);
    while (1)
    {
      uint64_t v19 = *v18;
      unint64_t v20 = sub_1B6C2F88C(*(v18 - 1));
      if ((~v20 & 0xF000000000000007) != 0)
      {
        unint64_t v21 = v20;
        if (v19) {
          BOOL v22 = v19 == 1;
        }
        else {
          BOOL v22 = 1;
        }
        if (!v22)
        {
          sub_1B69B27D0(v20);
          if (v25)
          {
            sub_1B6C0D760(v21, v19, v25, (unint64_t *)&v51);
            sub_1B6827B68(v21);
            goto LABEL_11;
          }
        }
        sub_1B6827B68(v21);
      }
      uint64_t v53 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
LABEL_11:
      uint64_t v54 = v15;
      unint64_t v24 = *(void *)(v15 + 16);
      unint64_t v23 = *(void *)(v15 + 24);
      if (v24 >= v23 >> 1)
      {
        sub_1B6C3D9A8(v23 > 1, v24 + 1, 1);
        uint64_t v15 = v54;
      }
      v18 += 2;
      *(void *)(v15 + 16) = v24 + 1;
      sub_1B6C43BB8((uint64_t)&v51, v15 + 40 * v24 + 32, (unint64_t *)&qword_1E9DD1880, (uint64_t)&type metadata for AnyValue);
      if (!--v17)
      {
        uint64_t v11 = v49;
        uint64_t v10 = v50;
        uint64_t v14 = v48;
        a6 = v45;
        a5 = HIDWORD(v44);
        break;
      }
    }
  }
  uint64_t v26 = MEMORY[0x1E4FBC860];
  if (!a5) {
    goto LABEL_33;
  }
  uint64_t v27 = a5;
  uint64_t v54 = MEMORY[0x1E4FBC860];
  sub_1B6C3D9A8(0, a5, 0);
  uint64_t v26 = v54;
  int v28 = (uint64_t *)(a6 + 8);
  do
  {
    uint64_t v29 = *v28;
    unint64_t v30 = sub_1B6C2F88C(*(v28 - 1));
    if ((~v30 & 0xF000000000000007) == 0) {
      goto LABEL_26;
    }
    unint64_t v31 = v30;
    if (v29) {
      BOOL v32 = v29 == 1;
    }
    else {
      BOOL v32 = 1;
    }
    if (v32 || (sub_1B69B27D0(v30), !v35))
    {
      sub_1B6827B68(v31);
LABEL_26:
      uint64_t v53 = 0;
      long long v51 = 0u;
      long long v52 = 0u;
      goto LABEL_27;
    }
    sub_1B6C0D760(v31, v29, v35, (unint64_t *)&v51);
    sub_1B6827B68(v31);
LABEL_27:
    uint64_t v54 = v26;
    unint64_t v34 = *(void *)(v26 + 16);
    unint64_t v33 = *(void *)(v26 + 24);
    if (v34 >= v33 >> 1)
    {
      sub_1B6C3D9A8(v33 > 1, v34 + 1, 1);
      uint64_t v26 = v54;
    }
    v28 += 2;
    *(void *)(v26 + 16) = v34 + 1;
    sub_1B6C43BB8((uint64_t)&v51, v26 + 40 * v34 + 32, (unint64_t *)&qword_1E9DD1880, (uint64_t)&type metadata for AnyValue);
    --v27;
  }
  while (v27);
  uint64_t v11 = v49;
  uint64_t v10 = v50;
  uint64_t v14 = v48;
LABEL_33:
  uint64_t v36 = *v46;
  float v37 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  swift_retain();
  v37(v14, v47, v10);
  int v38 = *(void **)(v36 + 176);
  swift_retain();
  uint64_t v39 = sub_1B6B3AB14((uint64_t)&type metadata for DiagnosticsTrackerInstance, (uint64_t)&off_1F0F96208, v38);
  uint64_t v41 = v40;
  swift_release();
  if (v39)
  {
    uint64_t ObjectType = swift_getObjectType();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, uint64_t))(v41 + 32))(v14, v15, v26, ObjectType, v41);
    swift_bridgeObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_release();
  }
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v14, v10);
}

double vfx_script_clock_time(_:)(void *a1)
{
  return *(double *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
}

float vfx_script_clock_delta_time(_:)(void *a1)
{
  return *(float *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 64);
}

BOOL vfx_script_clock_is_first_frame(_:)(void *a1)
{
  uint64_t v1 = *a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock;
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v2 = *(void *)(v1 + 16);
  return v3 == 1 && v2 == 0;
}

unint64_t vfx_script_clock_simulation_index(_:)(void *a1)
{
  unint64_t result = *(void *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 24);
  if ((result & 0x8000000000000000) != 0 || HIDWORD(result))
  {
    unint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  return result;
}

unint64_t vfx_script_texture_sample1d(_:_:)(unint64_t result)
{
  if (result >= 2) {
    return (*(uint64_t (**)(void))(result + 24))();
  }
  return result;
}

unint64_t vfx_script_texture_sample1d_curve(unint64_t result, float a2)
{
  if (result > 1) {
    return sub_1B6C3D9D0(result, a2);
  }
  return result;
}

float vfx_script_texture_sample1d_curve(_:_:)(unint64_t a1, float a2)
{
  float v2 = 0.0;
  if (a1 >= 2)
  {
    double v3 = (*(double (**)(float))(a1 + 24))((float)((float)(a2 * (float)(*(float *)a1 + -1.0)) + 0.5) / *(float *)a1);
    return *(float *)&v3;
  }
  return v2;
}

uint64_t vfx_script_texture_sample2d(uint64_t a1)
{
  if ((unint64_t)a1 > 1) {
    return sub_1B6C3DA04(a1);
  }
  return a1;
}

unint64_t vfx_script_texture_sample2d(_:_:)(unint64_t result)
{
  if (result >= 2) {
    return (*(uint64_t (**)(void))(result + 40))();
  }
  return result;
}

int32x2_t vfx_script_texture_sample2d_gradient_x(unint64_t a1, float32x2_t a2)
{
  if (a1 > 1) {
    return sub_1B6C3DA0C(a1, a2);
  }
  return 0;
}

void vfx_script_texture_sample2d_gradient_x(_:_:)(unint64_t a1, float32x2_t a2)
{
  if (a1 >= 2)
  {
    (*(void (**)(double))(a1 + 40))(COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)1008981770)));
    (*(void (**)(unint64_t, double))(a1 + 40))(a1, COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)0x80000000BC23D70ALL)));
    (*(void (**)(unint64_t, double))(a1 + 40))(a1, COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)0x3C23D70A00000000)));
    (*(void (**)(unint64_t, double))(a1 + 40))(a1, COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)0xBC23D70A80000000)));
  }
}

double vfx_script_texture_get_size2d(unint64_t a1)
{
  if (a1 > 1) {
    return *(double *)a1;
  }
  __asm { FMOV            V0.2S, #1.0 }
  return result;
}

double vfx_script_texture_get_size2d(_:)(unint64_t a1)
{
  if (a1 >= 2) {
    return *(double *)a1;
  }
  __asm { FMOV            V0.2S, #1.0 }
  return result;
}

uint64_t vfx_script_texture_sample3d(uint64_t a1)
{
  if ((unint64_t)a1 > 1) {
    return sub_1B6C3DABC(a1);
  }
  return a1;
}

unint64_t vfx_script_texture_sample3d(_:_:)(unint64_t result)
{
  if (result >= 2) {
    return (*(uint64_t (**)(void))(result + 72))();
  }
  return result;
}

double vfx_script_texture_get_size3d(unint64_t a1)
{
  if (a1 > 1) {
    return nullsub_1(a1);
  }
  __asm { FMOV            V0.4S, #1.0 }
  return *(double *)&_Q0;
}

__n128 vfx_script_texture_get_size3d(_:)(unint64_t a1)
{
  if (a1 >= 2) {
    return *(__n128 *)a1;
  }
  else {
    __asm { FMOV            V0.4S, #1.0 }
  }
  return result;
}

void *vfx_script_color_ramp_destroy(_:_:)(uint64_t a1, unint64_t a2)
{
  return sub_1B638F2C4(a1, a2, (uint64_t)&type metadata for ColorRamp, 0x18uLL);
}

uint64_t vfx_script_color_ramp_copy(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  char v3 = *(unsigned char *)(a2 + 16);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v2;
  *(unsigned char *)(a1 + 16) = v3;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void vfx_script_color_ramp_evaluate(uint64_t a1, float a2, double a3, double a4, __n128 a5)
{
}

void vfx_script_color_ramp_evaluate(_:_:)(uint64_t a1, float a2, double a3, double a4, __n128 a5)
{
}

void *vfx_script_curve_create(_:_:_:_:)(uint64_t a1, char *a2, char *a3, uint64_t a4)
{
  uint64_t v7 = ecs_stack_allocator_allocate(*(void *)(a1 + 16), 25, 8);
  uint64_t v8 = sub_1B629AA38(a2, a4);
  uint64_t v9 = sub_1B629AA38(a3, a4);
  *uint64_t v7 = v8;
  v7[1] = v9;
  v7[2] = 0;
  *((unsigned char *)v7 + 24) = 1;
  return v7;
}

{
  void *v7;
  uint64_t v8;
  uint64_t v9;

  uint64_t v7 = ecs_stack_allocator_allocate(*(void *)(a1 + 16), 25, 8);
  uint64_t v8 = sub_1B629AA38(a2, a4);
  uint64_t v9 = sub_1B629AA38(a3, a4);
  *uint64_t v7 = v8;
  v7[1] = v9;
  v7[2] = 0;
  *((unsigned char *)v7 + 24) = 1;
  return v7;
}

void *vfx_script_curve_destroy(_:_:)(uint64_t a1, unint64_t a2)
{
  char v3 = *(void **)(a1 + 16);
  sub_1B665D590();
  swift_arrayDestroy();

  return ecs_stack_allocator_deallocate(v3, a2, 0x19uLL);
}

uint64_t vfx_script_curve_copy(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t vfx_script_curve_copy(_:_:)(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  char v4 = *(unsigned char *)(a2 + 24);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v2;
  *(void *)(a1 + 16) = v3;
  *(unsigned char *)(a1 + 24) = v4;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *vfx_script_curve_create_setting_value(_:_:_:_:)(uint64_t a1, uint64_t a2, unint64_t a3, float a4)
{
  uint64_t v6 = *(char **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = ecs_stack_allocator_allocate(v8, 25, 8);
  void *v9 = v6;
  v9[1] = v7;
  v9[2] = 0;
  *((unsigned char *)v9 + 24) = 1;
  if ((a3 & 0x8000000000000000) == 0 && *((void *)v6 + 2) > a3)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    void *v9 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v6 = sub_1B6C1683C((uint64_t)v6);
    }
    *(float *)&v6[4 * a3 + 32] = a4;
    void *v9 = v6;
  }
  return v9;
}

{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  void *v9;
  char isUniquelyReferenced_nonNull_native;

  uint64_t v6 = *(char **)a2;
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v9 = ecs_stack_allocator_allocate(v8, 25, 8);
  void *v9 = v6;
  v9[1] = v7;
  v9[2] = 0;
  *((unsigned char *)v9 + 24) = 1;
  if ((a3 & 0x8000000000000000) == 0 && *((void *)v6 + 2) > a3)
  {
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    void *v9 = v6;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v6 = sub_1B6C1683C((uint64_t)v6);
    }
    *(float *)&v6[4 * a3 + 32] = a4;
    void *v9 = v6;
  }
  return v9;
}

void *vfx_script_curve_create_scaled(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = ecs_stack_allocator_allocate(v6, 25, 8);
  *uint64_t v7 = v4;
  v7[1] = v5;
  v7[2] = 0;
  *((unsigned char *)v7 + 24) = 1;
  sub_1B6C14990(a3);
  return v7;
}

void *vfx_script_curve_create_scaled(_:_:_:)(uint64_t a1, uint64_t *a2, float a3)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = ecs_stack_allocator_allocate(v6, 25, 8);
  *uint64_t v7 = v4;
  v7[1] = v5;
  v7[2] = 0;
  *((unsigned char *)v7 + 24) = 1;
  sub_1B6C14990(a3);
  return v7;
}

{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;

  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v7 = ecs_stack_allocator_allocate(v6, 25, 8);
  *uint64_t v7 = v4;
  v7[1] = v5;
  v7[2] = 0;
  *((unsigned char *)v7 + 24) = 1;
  sub_1B6C14990(a3);
  return v7;
}

void vfx_script_curve_evaluate(_:_:)(uint64_t a1, float a2)
{
}

void *vfx_script_string_create(uint64_t a1)
{
  uint64_t v1 = ecs_stack_allocator_allocate(*(void *)(a1 + 16), 16, 8);
  *uint64_t v1 = sub_1B6E31968();
  v1[1] = v2;
  return v1;
}

void *vfx_script_string_create(_:_:)(uint64_t a1)
{
  uint64_t v1 = ecs_stack_allocator_allocate(*(void *)(a1 + 16), 16, 8);
  *uint64_t v1 = sub_1B6E31968();
  v1[1] = v2;
  return v1;
}

{
  void *v1;
  uint64_t v2;

  uint64_t v1 = ecs_stack_allocator_allocate(*(void *)(a1 + 16), 16, 8);
  *uint64_t v1 = sub_1B6E31968();
  v1[1] = v2;
  return v1;
}

void *vfx_script_string_destroy(uint64_t a1, unint64_t a2)
{
  return sub_1B638F2C4(a1, a2, MEMORY[0x1E4FBB1A0], 0x10uLL);
}

void *vfx_script_string_destroy(_:_:)(uint64_t a1, unint64_t a2)
{
  return sub_1B638F2C4(a1, a2, MEMORY[0x1E4FBB1A0], 0x10uLL);
}

uint64_t vfx_script_string_copy(_:_:)(void *a1, void *a2)
{
  uint64_t v2 = a2[1];
  *a1 = *a2;
  a1[1] = v2;
  swift_bridgeObjectRetain();

  return swift_bridgeObjectRelease();
}

Swift::Float __swiftcall vfx_script_array_float_sample(_:_:)(Swift::OpaquePointer a1, Swift::Float a2)
{
  uint64_t v2 = *((void *)a1._rawValue + 2);
  if (!v2) {
    return 0.0;
  }
  if (a2 < 0.0 || a2 > 1.0)
  {
    a2 = fmodf(a2, 1.0);
    float v5 = 1.0 - fabsf(a2);
    if (a2 < 0.0) {
      a2 = v5;
    }
  }
  float v6 = (float)(v2 - 1);
  uint64_t v7 = (uint64_t)(float)(a2 * v6);
  float v8 = (float)(a2 - (float)((float)v7 / v6)) / (float)(1.0 / v6);
  return (float)(*((float *)a1._rawValue + (v7 + 1) % v2 + 8) * v8)
       + (float)(*((float *)a1._rawValue + v7 + 8) * (float)(1.0 - v8));
}

uint64_t vfx_script_particle_lookup_by_id(uint64_t a1, unsigned int a2)
{
  uint64_t v3 = -1;
  sub_1B6BF97F8(*(void *)(a1 + 16), *(void *)a1, &v3, a2);
  return v3;
}

uint64_t vfx_script_particle_lookup_by_id(_:_:)(uint64_t *a1, unsigned int a2)
{
  uint64_t result = -1;
  uint64_t v9 = -1;
  int v4 = *((_DWORD *)a1 + 5);
  uint64_t v5 = *((int *)a1 + 4);
  if ((v5 != -1 || v4 != 0) && (v5 & 0x80000000) == 0)
  {
    uint64_t v7 = *a1;
    if (*(void *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v5)
    {
      uint64_t v8 = *(void *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (v4 == -1 || *(_DWORD *)(v8 + 12 * (int)v5 + 8) == v4)
      {
        sub_1B6C08A48(*(void *)(*(void *)(v7 + 136) + 8 * *(int *)(v8 + 12 * (int)v5) + 32), *(_WORD *)(v8 + 12 * (int)v5 + 4), 656, &v9, a2);
        return v9;
      }
    }
  }
  return result;
}

uint64_t vfx_script_particle_count(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

uint64_t vfx_script_particle_count(_:)(uint64_t a1)
{
  return *(void *)(a1 + 24);
}

unint64_t vfx_script_particle_find_nearest_neighbors(uint64_t a1, uint64_t a2, unint64_t a3)
{
  unint64_t v4 = 0;
  sub_1B6BF98B4(*(void *)(a1 + 16), *(void *)a1, a2, a3, &v4);
  return v4;
}

unint64_t vfx_script_particle_find_nearest_neighbors(_:_:_:_:_:)(uint64_t *a1, uint64_t a2, unint64_t a3)
{
  unint64_t result = 0;
  unint64_t v10 = 0;
  int v5 = *((_DWORD *)a1 + 5);
  uint64_t v6 = *((int *)a1 + 4);
  if (v6 != -1 || v5 != 0)
  {
    unint64_t result = 0;
    if ((v6 & 0x80000000) == 0)
    {
      uint64_t v8 = *a1;
      if (*(void *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v6)
      {
        uint64_t v9 = *(void *)(v8 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        if (v5 == -1 || *(_DWORD *)(v9 + 12 * (int)v6 + 8) == v5)
        {
          sub_1B6C08AD0(*(void *)(*(void *)(v8 + 136) + 8 * *(int *)(v9 + 12 * (int)v6) + 32), *(_WORD *)(v9 + 12 * (int)v6 + 4), 656, a2, a3, &v10);
          return v10;
        }
        else
        {
          return 0;
        }
      }
    }
  }
  return result;
}

double vfx_script_particle_get_world_position(int *a1, uint64_t a2)
{
  return vfx_script_particle_get_world_position(_:_:)(a1, a2);
}

double vfx_script_particle_get_world_position(_:_:)(int *a1, uint64_t a2)
{
  int v2 = a1[5];
  uint64_t v3 = a1[4];
  double result = 0.0;
  if ((v3 != -1 || v2 != 0) && (v3 & 0x80000000) == 0)
  {
    uint64_t v7 = (uint64_t *)(*(void *)a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v7[1] > v3)
    {
      uint64_t v9 = *v7;
      if (v2 == -1 || *(_DWORD *)(v9 + 12 * (int)v3 + 8) == v2)
      {
        sub_1B633C4F4(*(void *)(*(void *)(*(void *)a1 + 136) + 8 * *(int *)(v9 + 12 * (int)v3) + 32), *(_DWORD *)(v9 + 12 * (int)v3), *(_WORD *)(v9 + 12 * (int)v3 + 4), 64, *(void *)a1, (uint64_t)v21);
        sub_1B6C43BB8((uint64_t)v21, (uint64_t)v22, qword_1EB97EA20, (uint64_t)&type metadata for WorldTransform);
        if ((v23 & 1) == 0)
        {
          float32x4_t v16 = (float32x4_t)v22[2];
          float32x4_t v17 = (float32x4_t)v22[1];
          float32x4_t v18 = (float32x4_t)v22[3];
          float32x4_t v19 = (float32x4_t)v22[0];
          uint64_t v10 = *(void *)a1;
          unint64_t v11 = *((void *)a1 + 2);
          unint64_t v12 = sub_1B6A82538(a2);
          if (v13 != -1)
          {
            uint64_t v14 = (float32x4_t *)sub_1B6C45CD0(v10, v12 | ((HIDWORD(v12) & 1) << 32), v13, v11, sub_1B6C368F4);
            double result = 0.0;
            if (v14) {
              *(void *)&double result = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v18, v16, *v14, 2), v17, *(float32x2_t *)v14->f32, 1), v19, COERCE_FLOAT(*v14)).u64[0];
            }
            return result;
          }
          if (qword_1EB9852D0 != -1) {
            swift_once();
          }
          swift_retain();
          int v15 = sub_1B6E32148();
          if (qword_1EB9854F8 != -1) {
            swift_once();
          }
          v20[0] = 0;
          swift_retain();
          sub_1B6B33E34(v15, v20, 0xD000000000000021, 0x80000001B6F4DF50);
          swift_release();
          swift_release();
        }
        return 0.0;
      }
    }
  }
  return result;
}

int *vfx_script_particle_set_world_position(_:_:_:)(int *result, uint64_t a2, float32x4_t a3)
{
  int v3 = result[5];
  uint64_t v4 = result[4];
  if ((v4 != -1 || v3 != 0) && (v4 & 0x80000000) == 0)
  {
    uint64_t v6 = (uint64_t *)result;
    uint64_t v7 = (uint64_t *)(*(void *)result + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v7[1] > v4)
    {
      uint64_t v9 = *v7;
      if (v3 == -1 || *(_DWORD *)(v9 + 12 * (int)v4 + 8) == v3)
      {
        sub_1B631200C(*(void *)(*(void *)(*(void *)result + 136) + 8 * *(int *)(v9 + 12 * (int)v4) + 32), *(_DWORD *)(v9 + 12 * (int)v4), *(_WORD *)(v9 + 12 * (int)v4 + 4), 64, *(void *)result, (uint64_t)v22);
        double result = (int *)sub_1B6C43BB8((uint64_t)v22, (uint64_t)v23, &qword_1EB97F678, (uint64_t)&type metadata for InverseWorldTransform);
        if ((v24 & 1) == 0)
        {
          float32x4_t v17 = (float32x4_t)v23[1];
          float32x4_t v18 = (float32x4_t)v23[0];
          float32x4_t v16 = (float32x4_t)v23[2];
          float32x4_t v19 = (float32x4_t)v23[3];
          uint64_t v10 = *v6;
          unint64_t v11 = v6[2];
          unint64_t v12 = sub_1B6A82538(a2);
          if (v13 == -1)
          {
            if (qword_1EB9852D0 != -1) {
              swift_once();
            }
            swift_retain();
            int v15 = sub_1B6E32148();
            if (qword_1EB9854F8 != -1) {
              swift_once();
            }
            v21[0] = 0;
            swift_retain();
            sub_1B6B33E34(v15, v21, 0xD000000000000021, 0x80000001B6F4DF50);
            swift_release();
            return (int *)swift_release();
          }
          else
          {
            double result = (int *)sub_1B6C45CD0(v10, v12 | ((HIDWORD(v12) & 1) << 32), v13, v11, sub_1B6C368F4);
            if (result)
            {
              float32x4_t v14 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v19, v16, a3, 2), v17, *(float32x2_t *)a3.f32, 1), v18, a3.f32[0]);
              v14.i32[3] = 1.0;
              *(float32x4_t *)double result = v14;
            }
          }
        }
      }
    }
  }
  return result;
}

uint64_t vfx_script_get_call_parameter(_:_:)(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 56);
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_1B6E31968();
  if (*(void *)(v1 + 16) && (uint64_t v4 = sub_1B62B2CE0(v2, v3), (v5 & 1) != 0)) {
    uint64_t v6 = *(void *)(*(void *)(v1 + 56) + 8 * v4);
  }
  else {
    uint64_t v6 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v6;
}

void vfx_script_set_current_state(_:_:_:)(void *a1, void *a2, float a3)
{
  char v5 = *(void **)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_world);
  swift_retain();
  id v6 = v5;
  if (v5)
  {
    uint64_t v7 = v6;
    id v8 = objc_msgSend(self, sel_worldWithWorldRef_, v6);
    uint64_t v9 = v8;
    if (a2)
    {
      id v12 = a2;
      uint64_t v10 = self;
      objc_msgSend(v10, sel_begin);
      objc_msgSend(v10, sel_setAnimationDuration_, a3);
      id v11 = objc_msgSend(v9, sel_stateManager);
      objc_msgSend(v11, sel_setActiveState_, v12);

      objc_msgSend(v10, sel_commit);
    }
    else
    {
      id v12 = objc_msgSend(v8, sel_stateManager);
      objc_msgSend(v12, sel_setActiveState_, 0);
    }
    swift_release();
  }
  else
  {
    swift_release();
  }
}

void *vfx_script_get_state_by_id(_:_:)(void *a1)
{
  uint64_t v1 = *(void **)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_world);
  swift_retain();
  id v2 = v1;
  if (v1)
  {
    uint64_t v3 = v2;
    id v4 = objc_msgSend(self, sel_worldWithWorldRef_, v2);
    uint64_t v5 = sub_1B6E31968();
    uint64_t v7 = v6;
    id v8 = objc_msgSend(v4, sel_stateManager);
    id v9 = objc_msgSend(v8, sel_states);

    sub_1B69B35B4();
    unint64_t v10 = sub_1B6E31C28();

    swift_bridgeObjectRetain();
    id v11 = sub_1B6C43A38(v10, v5, v7);
    swift_bridgeObjectRelease();
    swift_release();

    swift_bridgeObjectRelease_n();
    if (v11) {
  }
    }
  else
  {
    swift_release();
    return 0;
  }
  return v11;
}

uint64_t vfx_script_tick(_:_:_:)(uint64_t *a1, int a2, float a3)
{
  uint64_t v5 = *a1;
  uint64_t v6 = *(void **)(*a1 + 176);
  swift_retain();
  swift_retain();
  uint64_t v7 = (void *)sub_1B6304AB4((uint64_t)&type metadata for IncommingTickedEventsComponent, (uint64_t)&off_1F0F9A158, v6);
  swift_release();
  double v8 = *(double *)(v5 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
  id v9 = @"VFXTriggerTypeTicked";
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1B68C26CC(0, v7[2] + 1, 1, v7);
    uint64_t v7 = (void *)isUniquelyReferenced_nonNull_native;
  }
  unint64_t v13 = v7[2];
  unint64_t v12 = v7[3];
  if (v13 >= v12 >> 1)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1B68C26CC(v12 > 1, v13 + 1, 1, v7);
    uint64_t v7 = (void *)isUniquelyReferenced_nonNull_native;
  }
  v7[2] = v13 + 1;
  float32x4_t v14 = &v7[3 * v13];
  v14[4] = v9;
  *((_DWORD *)v14 + 10) = a2;
  *((double *)v14 + 6) = v8 + a3;
  int v15 = *(void **)(v5 + 176);
  MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native, v11);
  swift_retain();
  sub_1B636E6CC((uint64_t)&type metadata for IncommingTickedEventsComponent, (uint64_t)&off_1F0F9A158, v15, (void (*)(uint64_t))sub_1B6786E80);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_release();
}

uint64_t sub_1B6C3C374(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C428E4(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44C68, &qword_1E9DD7620);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C3B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3DB64(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3C3D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C42A78(a1, a2, a3, *v3, (unint64_t *)&unk_1EB980DE0, (uint64_t (*)(uint64_t))sub_1B69E8DF4);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3C414(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C42A78(a1, a2, a3, *v3, &qword_1EB980DD8, (uint64_t (*)(uint64_t))sub_1B69E8D58);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3C450(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3DD18(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C470(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3DEA4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3C490(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3E00C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3C4B0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3E180(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3C4D0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3E310(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C4F0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3E4DC(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3C510(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3E650(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C530(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3EB30(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B68D5C4C, (unint64_t *)&qword_1E9DCDA48, (uint64_t)&type metadata for AuthoringNode.Port);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C574(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3EFCC(a1, a2, a3, (void *)*v3, &qword_1E9DD7760, (uint64_t (*)(uint64_t))sub_1B6C46150, sub_1B6C46150);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C5C4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3E998(a1, a2, a3, (void *)*v3, &qword_1E9DD76A8, (uint64_t (*)(uint64_t))sub_1B6C45060, (void (*)(void))sub_1B6C45060);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C614(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C40B70(a1, a2, a3, *v3, &qword_1E9DD7690, (uint64_t)&type metadata for Node.Port);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3C644(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3E998(a1, a2, a3, (void *)*v3, &qword_1E9DD7678, (uint64_t (*)(uint64_t))sub_1B6C44ED8, (void (*)(void))sub_1B6C44ED8);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C694(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3EB30(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B68CE434, (unint64_t *)&qword_1EB980110, MEMORY[0x1E4FBB1A0]);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C6D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C40CE4(a1, a2, a3, *v3, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3C708(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3ECCC(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3C728(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3EE5C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3C748(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3EFCC(a1, a2, a3, (void *)*v3, &qword_1E9DD7780, (uint64_t (*)(uint64_t))sub_1B6C46210, sub_1B6C46210);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C798(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44958, &qword_1E9DD75D0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C7DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44BF8, &qword_1EB980128);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C820(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C43ED8, &qword_1EB980130);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C864(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F490(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C43D88, &qword_1EB980138);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C8A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44B88, &qword_1E9DD7610);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C8EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44178, &qword_1EB980140);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C930(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F304(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C43F48, &qword_1E9DD74F0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C974(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F304(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C43DF8, &qword_1E9DD74D0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C9B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C448E8, &qword_1EB980148);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3C9FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44728, &qword_1E9DD7590);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CA40(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C445D8, &qword_1E9DD7560);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CA84(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44108, &qword_1EB980150);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CAC8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44808, &qword_1E9DD75B0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CB0C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44568, &qword_1E9DD7550);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CB50(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C43E68, &qword_1E9DD74E0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CB94(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F490(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C43D18, &qword_1EB980158);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CBD8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C441E8, &qword_1EB980160);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CC1C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44E68, &qword_1E9DD7670);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CC60(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C449C8, &qword_1EB980168);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CCA4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44798, &qword_1E9DD75A0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CCE8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44258, &qword_1EB980178);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CD2C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44AA8, &qword_1E9DD75F0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CD70(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44338, &qword_1EB980180);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CDB4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44418, &qword_1E9DD7530);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CDF8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44098, &qword_1E9DD7510);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CE3C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C443A8, &qword_1EB980188);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CE80(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44878, &qword_1E9DD75C0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CEC4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C442C8, &qword_1E9DD7520);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CF08(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44488, &qword_1E9DD7540);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CF4C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44648, &qword_1E9DD7570);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CF90(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C446B8, &qword_1E9DD7580);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3CFD4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C43FB8, &qword_1E9DD7500);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D018(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44A38, &qword_1E9DD75E0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D05C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44B18, &qword_1E9DD7600);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D0A0(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C444F8, &qword_1EB980198);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D0E4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F164(a1, a2, a3, (void *)*v3, (void (*)(void))sub_1B6C44028, &qword_1EB9801A0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D128(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F630(a1, a2, a3, (void *)*v3, (unint64_t *)&unk_1EB980D10, (uint64_t (*)(uint64_t))sub_1B6C452E8, sub_1B6C452E8);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D178(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F630(a1, a2, a3, (void *)*v3, &qword_1E9DD7710, (uint64_t (*)(uint64_t))sub_1B6C45248, sub_1B6C45248);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D1C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F630(a1, a2, a3, (void *)*v3, &qword_1E9DD7730, (uint64_t (*)(uint64_t))sub_1B6C45298, sub_1B6C45298);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D218(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F630(a1, a2, a3, (void *)*v3, &qword_1E9DD7740, (uint64_t (*)(uint64_t))sub_1B6C452C0, sub_1B6C452C0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D268(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F630(a1, a2, a3, (void *)*v3, &qword_1E9DD76F0, (uint64_t (*)(uint64_t))sub_1B6C451F8, sub_1B6C451F8);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D2B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F630(a1, a2, a3, (void *)*v3, &qword_1E9DD7720, (uint64_t (*)(uint64_t))sub_1B6C45270, sub_1B6C45270);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D308(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F630(a1, a2, a3, (void *)*v3, &qword_1E9DD7700, (uint64_t (*)(uint64_t))sub_1B6C45220, sub_1B6C45220);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D358(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F7E4(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D378(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3F988(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D398(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3FB24(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D3B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3FC8C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D3D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3FE00(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D3F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C3FF80(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D418(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C40FEC(a1, a2, a3, (void *)*v3, &qword_1E9DCE7C8, MEMORY[0x1E4F276F0], MEMORY[0x1E4F276F0]);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D468(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C4010C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D488(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C4029C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D4A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C40410(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D4C8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C40584(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D4E8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C406F8(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D508(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C4086C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D528(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C409E0(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D548(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B637EDB8(a1, a2, a3, *v3, (void (*)(void))sub_1B6C44FF0);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D57C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C40B70(a1, a2, a3, *v3, &qword_1E9DD76E8, (uint64_t)&type metadata for AuthoringNode.Port);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D5AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C40CE4(a1, a2, a3, *v3, &qword_1E9DD1FD0, (uint64_t)&type metadata for AnyType);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D5DC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C40E58(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D5FC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C40FEC(a1, a2, a3, (void *)*v3, &qword_1E9DD7650, (uint64_t (*)(uint64_t))sub_1B6873898, (uint64_t (*)(void))sub_1B6873898);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D64C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C4121C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D66C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C413B0(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D68C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C41514(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D6AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C416A4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D6CC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C417D8(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D6EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C41938(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D70C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C41ABC(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D72C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C41C30(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D74C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C41E0C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D76C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C41F80(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D78C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C42138(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D7AC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C422A8(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D7CC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C42454(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D7EC(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C425BC(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D80C(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C42A78(a1, a2, a3, *v3, (unint64_t *)&unk_1EB980E08, (uint64_t (*)(uint64_t))sub_1B68D5858);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D848(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C42BD8(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D868(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C42D68(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D888(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B62D9A70(a1, a2, a3, *v3, &qword_1E9DD77A0, (uint64_t)&_s21FunctionConstantCoderVN);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D8B8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C42EF4(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D8D8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C43084(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D8F8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C43214(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D918(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C433B0(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D938(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C4383C(a1, a2, a3, (void *)*v3, &qword_1E9DD7698, (uint64_t (*)(uint64_t))sub_1B6C44FC0, sub_1B6C44FC0);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D988(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C4352C(a1, a2, a3, *v3);
  uint64_t *v3 = (char *)result;
  return result;
}

uint64_t sub_1B6C3D9A8(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C43694(a1, a2, a3, (void *)*v3);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3D9C8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 24))();
}

uint64_t sub_1B6C3D9D0(uint64_t a1, float a2)
{
  return (*(uint64_t (**)(float))(a1 + 24))((float)((float)(a2 * (float)(*(float *)a1 + -1.0)) + 0.5) / *(float *)a1);
}

uint64_t sub_1B6C3DA04(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 40))();
}

int32x2_t sub_1B6C3DA0C(uint64_t a1, float32x2_t a2)
{
  float32x2_t v7 = COERCE_FLOAT32X2_T((*(double (**)(double))(a1 + 40))(COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)1008981770))));
  float32x2_t v6 = COERCE_FLOAT32X2_T((*(double (**)(uint64_t, double))(a1 + 40))(a1, COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)0x80000000BC23D70ALL))));
  float32x2_t v5 = COERCE_FLOAT32X2_T((*(double (**)(uint64_t, double))(a1 + 40))(a1, COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)0x3C23D70A00000000))));
  return vzip1_s32((int32x2_t)vsub_f32(v7, v6), (int32x2_t)vsub_f32(v5, COERCE_FLOAT32X2_T((*(double (**)(uint64_t, double))(a1 + 40))(a1, COERCE_DOUBLE(vadd_f32(a2, (float32x2_t)0xBC23D70A80000000))))));
}

uint64_t sub_1B6C3DABC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(a1 + 72))();
}

uint64_t sub_1B6C3DAC4(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C40FEC(a1, a2, a3, (void *)*v3, &qword_1E9DD7790, (uint64_t (*)(uint64_t))sub_1B6C46238, (uint64_t (*)(void))sub_1B6C46238);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3DB14(char a1, int64_t a2, char a3)
{
  uint64_t result = sub_1B6C4383C(a1, a2, a3, (void *)*v3, &qword_1E9DD76C0, (uint64_t (*)(uint64_t))sub_1B6C450DC, sub_1B6C450DC);
  uint64_t *v3 = result;
  return result;
}

uint64_t sub_1B6C3DB64(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, (unint64_t *)&qword_1EB980C90, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  float32x4_t v14 = v11 + 32;
  int v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3DCD8(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1B6C42A78(a1, a2, a3, a4, (unint64_t *)&unk_1EB980DE0, (uint64_t (*)(uint64_t))sub_1B69E8DF4);
}

uint64_t sub_1B6C3DCF8(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1B6C42A78(a1, a2, a3, a4, &qword_1EB980DD8, (uint64_t (*)(uint64_t))sub_1B69E8D58);
}

uint64_t sub_1B6C3DD18(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B6C44CDC();
    uint64_t v11 = (void *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v9) {
      memmove(v11 + 4, a4 + 4, 16 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    if (v15 < v14 + 16 * v9 && v14 < v15 + 16 * v9)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B62E98B4(0, &qword_1E9DD7630);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3DEA4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1E9DD74C0, (uint64_t)&type metadata for FieldRecord, MEMORY[0x1E4FBBE00]);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[8 * v9] && v14 < &v15[8 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 8 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3E00C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1E9DD1D08, (uint64_t)&type metadata for Property.Description, MEMORY[0x1E4FBBE00]);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9]) {
      memmove(v14, v15, 32 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[32 * v9] && v14 < &v15[32 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3E180(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1E9DD74B8, (uint64_t)&type metadata for Property, MEMORY[0x1E4FBBE00]);
    uint64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[48 * v9]) {
      memmove(v13, v14, 48 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[48 * v9] && v13 < &v14[48 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3E310(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62C5838(0, (unint64_t *)&qword_1EB980B60, (unint64_t *)&qword_1EB97E840);
    uint64_t v11 = (void *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v9) {
      memmove(v11 + 4, a4 + 4, 40 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 40 * v9 && v13 < v14 + 40 * v9)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B62C55B0(0, (unint64_t *)&qword_1EB97E840);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3E4C4(char a1, int64_t a2, char a3, char *a4)
{
  return sub_1B637EDB8(a1, a2, a3, a4, (void (*)(void))sub_1B62D2B64);
}

uint64_t sub_1B6C3E4DC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1E9DD7638, MEMORY[0x1E4FBAF58], MEMORY[0x1E4FBBE00]);
    uint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    uint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3E650(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B6C44D54();
    uint64_t v11 = (void *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 104);
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v11 != a4 || v13 >= v14 + 104 * v9) {
      memmove(v11 + 4, a4 + 4, 104 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 104 * v9 && v13 < v14 + 104 * v9)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B67FB8C0(0, &qword_1E9DD0538);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3E7F0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B6A026D0();
    uint64_t v11 = (void *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 104);
  }
  else
  {
    uint64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v11 != a4 || v13 >= v14 + 104 * v9) {
      memmove(v11 + 4, a4 + 4, 104 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 104 * v9 && v13 < v14 + 104 * v9)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B62E98B4(0, (unint64_t *)&qword_1E9DD3A80);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3E998(char a1, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t), void (*a7)(void))
{
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    int64_t v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (v12 <= a2) {
      int64_t v12 = a2;
    }
    if (v11 < a2) {
      a2 = v12;
    }
    else {
      a2 = v11;
    }
  }
  int64_t v13 = a4[2];
  if (a2 <= v13) {
    int64_t v14 = a4[2];
  }
  else {
    int64_t v14 = a2;
  }
  if (v14)
  {
    sub_1B62F7434(0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v15 = (void *)swift_allocObject();
    int64_t v16 = j__malloc_size(v15);
    uint64_t v17 = v16 - 32;
    if (v16 < 32) {
      uint64_t v17 = v16 - 17;
    }
    v15[2] = v13;
    _OWORD v15[3] = 2 * (v17 >> 4);
  }
  else
  {
    unint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v18 = (unint64_t)(v15 + 4);
  unint64_t v19 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v15 != a4 || v18 >= v19 + 16 * v13) {
      memmove(v15 + 4, a4 + 4, 16 * v13);
    }
    a4[2] = 0;
  }
  else
  {
    if (v19 < v18 + 16 * v13 && v18 < v19 + 16 * v13)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    a7(0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v15;
}

uint64_t sub_1B6C3EB30(char a1, int64_t a2, char a3, void *a4, void (*a5)(void), unint64_t *a6, uint64_t a7)
{
  if (a3)
  {
    unint64_t v11 = a4[3];
    int64_t v12 = v11 >> 1;
    int64_t v13 = v11 & 0xFFFFFFFFFFFFFFFELL;
    if (v13 <= a2) {
      int64_t v13 = a2;
    }
    if (v12 < a2) {
      a2 = v13;
    }
    else {
      a2 = v12;
    }
  }
  int64_t v14 = a4[2];
  if (a2 <= v14) {
    int64_t v15 = a4[2];
  }
  else {
    int64_t v15 = a2;
  }
  if (v15)
  {
    a5(0);
    int64_t v16 = (void *)swift_allocObject();
    int64_t v17 = j__malloc_size(v16);
    uint64_t v18 = v17 - 32;
    if (v17 < 32) {
      uint64_t v18 = v17 - 17;
    }
    v16[2] = v14;
    v16[3] = 2 * (v18 >> 4);
  }
  else
  {
    int64_t v16 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v19 = (unint64_t)(v16 + 4);
  unint64_t v20 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v16 != a4 || v19 >= v20 + 16 * v14) {
      memmove(v16 + 4, a4 + 4, 16 * v14);
    }
    a4[2] = 0;
  }
  else
  {
    if (v20 < v19 + 16 * v14 && v19 < v20 + 16 * v14)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B62D9BF8(0, a6, a7, MEMORY[0x1E4FBB718]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v16;
}

uint64_t sub_1B6C3ECCC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, (unint64_t *)&unk_1E9DD2000, (uint64_t)&type metadata for GraphCodeGen.CodeGenParameter, MEMORY[0x1E4FBBE00]);
    unint64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[48 * v9]) {
      memmove(v13, v14, 48 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[48 * v9] && v13 < &v14[48 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3EE5C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1EB980BA8, (uint64_t)&type metadata for ScriptParameter, MEMORY[0x1E4FBBE00]);
    unint64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    unint64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v14 = v11 + 32;
  int64_t v15 = a4 + 32;
  size_t v16 = 32 * v9;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[v16] && v14 < &v15[v16])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3EFCC(char a1, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t), void (*a7)(void))
{
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    int64_t v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (v12 <= a2) {
      int64_t v12 = a2;
    }
    if (v11 < a2) {
      a2 = v12;
    }
    else {
      a2 = v11;
    }
  }
  int64_t v13 = a4[2];
  if (a2 <= v13) {
    int64_t v14 = a4[2];
  }
  else {
    int64_t v14 = a2;
  }
  if (v14)
  {
    sub_1B62F7434(0, a5, a6, MEMORY[0x1E4FBBE00]);
    int64_t v15 = (void *)swift_allocObject();
    int64_t v16 = j__malloc_size(v15);
    uint64_t v17 = v16 - 32;
    if (v16 < 32) {
      uint64_t v17 = v16 - 17;
    }
    v15[2] = v13;
    _OWORD v15[3] = 2 * (v17 >> 4);
  }
  else
  {
    int64_t v15 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v18 = (unint64_t)(v15 + 4);
  unint64_t v19 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v15 != a4 || v18 >= v19 + 16 * v13) {
      memmove(v15 + 4, a4 + 4, 16 * v13);
    }
    a4[2] = 0;
  }
  else
  {
    if (v19 < v18 + 16 * v13 && v18 < v19 + 16 * v13)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    a7(0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v15;
}

uint64_t sub_1B6C3F164(char a1, int64_t a2, char a3, void *a4, void (*a5)(void), unint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    int64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2) {
      int64_t v11 = a2;
    }
    if (v10 < a2) {
      a2 = v11;
    }
    else {
      a2 = v10;
    }
  }
  int64_t v12 = a4[2];
  if (a2 <= v12) {
    int64_t v13 = a4[2];
  }
  else {
    int64_t v13 = a2;
  }
  if (v13)
  {
    a5(0);
    int64_t v14 = (void *)swift_allocObject();
    size_t v15 = j__malloc_size(v14);
    _OWORD v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 24);
  }
  else
  {
    int64_t v14 = (void *)MEMORY[0x1E4FBC860];
  }
  int64_t v16 = v14 + 4;
  uint64_t v17 = a4 + 4;
  size_t v18 = 3 * v12;
  if (a1)
  {
    if (v14 != a4 || v16 >= &v17[v18]) {
      memmove(v14 + 4, a4 + 4, v18 * 8);
    }
    a4[2] = 0;
  }
  else
  {
    if (v17 < &v16[v18] && v16 < &v17[v18])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B67FB8C0(0, a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v14;
}

uint64_t sub_1B6C3F304(char a1, int64_t a2, char a3, void *a4, void (*a5)(void), unint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    int64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2) {
      int64_t v11 = a2;
    }
    if (v10 < a2) {
      a2 = v11;
    }
    else {
      a2 = v10;
    }
  }
  int64_t v12 = a4[2];
  if (a2 <= v12) {
    int64_t v13 = a4[2];
  }
  else {
    int64_t v13 = a2;
  }
  if (v13)
  {
    a5(0);
    int64_t v14 = (void *)swift_allocObject();
    int64_t v15 = j__malloc_size(v14);
    uint64_t v16 = v15 - 32;
    if (v15 < 32) {
      uint64_t v16 = v15 - 1;
    }
    _OWORD v14[2] = v12;
    v14[3] = 2 * (v16 >> 5);
  }
  else
  {
    int64_t v14 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v17 = v14 + 4;
  size_t v18 = a4 + 4;
  size_t v19 = 4 * v12;
  if (a1)
  {
    if (v14 != a4 || v17 >= &v18[v19]) {
      memmove(v14 + 4, a4 + 4, v19 * 8);
    }
    a4[2] = 0;
  }
  else
  {
    if (v18 < &v17[v19] && v17 < &v18[v19])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B67FB8C0(0, a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v14;
}

uint64_t sub_1B6C3F490(char a1, int64_t a2, char a3, void *a4, void (*a5)(void), unint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    int64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2) {
      int64_t v11 = a2;
    }
    if (v10 < a2) {
      a2 = v11;
    }
    else {
      a2 = v10;
    }
  }
  int64_t v12 = a4[2];
  if (a2 <= v12) {
    int64_t v13 = a4[2];
  }
  else {
    int64_t v13 = a2;
  }
  if (v13)
  {
    a5(0);
    int64_t v14 = (void *)swift_allocObject();
    size_t v15 = j__malloc_size(v14);
    _OWORD v14[2] = v12;
    v14[3] = 2 * ((uint64_t)(v15 - 32) / 48);
  }
  else
  {
    int64_t v14 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v16 = v14 + 4;
  uint64_t v17 = a4 + 4;
  size_t v18 = 6 * v12;
  if (a1)
  {
    if (v14 != a4 || v16 >= &v17[v18]) {
      memmove(v14 + 4, a4 + 4, v18 * 8);
    }
    a4[2] = 0;
  }
  else
  {
    if (v17 < &v16[v18] && v16 < &v17[v18])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B67FB8C0(0, a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v14;
}

uint64_t sub_1B6C3F630(char a1, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t), void (*a7)(void))
{
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    int64_t v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (v12 <= a2) {
      int64_t v12 = a2;
    }
    if (v11 < a2) {
      a2 = v12;
    }
    else {
      a2 = v11;
    }
  }
  int64_t v13 = a4[2];
  if (a2 <= v13) {
    int64_t v14 = a4[2];
  }
  else {
    int64_t v14 = a2;
  }
  if (v14)
  {
    sub_1B62F7434(0, a5, a6, MEMORY[0x1E4FBBE00]);
    size_t v15 = (void *)swift_allocObject();
    size_t v16 = j__malloc_size(v15);
    v15[2] = v13;
    _OWORD v15[3] = 2 * ((uint64_t)(v16 - 32) / 24);
  }
  else
  {
    size_t v15 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v17 = (unint64_t)(v15 + 4);
  unint64_t v18 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v15 != a4 || v17 >= v18 + 24 * v13) {
      memmove(v15 + 4, a4 + 4, 24 * v13);
    }
    a4[2] = 0;
  }
  else
  {
    if (v18 < v17 + 24 * v13 && v17 < v18 + 24 * v13)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    a7(0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v15;
}

uint64_t sub_1B6C3F7E4(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B67426AC();
    int64_t v11 = (void *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 48);
  }
  else
  {
    int64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v11 != a4 || v13 >= v14 + 48 * v9) {
      memmove(v11 + 4, a4 + 4, 48 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 48 * v9 && v13 < v14 + 48 * v9)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B67FB8C0(0, (unint64_t *)&qword_1EB9801B0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3F988(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62F7434(0, (unint64_t *)&qword_1EB980D50, (uint64_t (*)(uint64_t))sub_1B6645A00, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (void *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 5);
  }
  else
  {
    int64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v11 != a4 || v14 >= v15 + 32 * v9) {
      memmove(v11 + 4, a4 + 4, 32 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    if (v15 < v14 + 32 * v9 && v14 < v15 + 32 * v9)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B6645A00();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3FB24(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1EB980B78, (uint64_t)&type metadata for EntityInstance, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 16 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3FC8C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62F7434(0, &qword_1E9DD76D0, (uint64_t (*)(uint64_t))sub_1B67FACD4, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[8 * v9]) {
      memmove(v14, v15, 8 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[8 * v9] && v14 < &v15[8 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 8 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3FE00(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1EB980BB8, (uint64_t)&type metadata for GraphScriptGroup.Reference, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  size_t v15 = 40 * v9;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[v15] && v13 < &v14[v15])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C3FF80(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, (unint64_t *)&unk_1E9DD1D90, (uint64_t)&_s12MetadataTypeON, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[40 * v9]) {
      memmove(v13, v14, 40 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[40 * v9] && v13 < &v14[40 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C4010C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, (unint64_t *)&unk_1EB980C38, (uint64_t)&type metadata for GraphEntityComponentPropertyReferences.ExportedDirectPropertyAssignment, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9]) {
      memmove(v13, v14, 24 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[24 * v9] && v13 < &v14[24 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C4029C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1EB980BB0, (uint64_t)&type metadata for ShaderParameter, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 80);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  size_t v15 = 80 * v9;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v15]) {
      memmove(v13, v14, v15);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[v15] && v13 < &v14[v15])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memcpy(v13, v14, v15);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C40410(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, (unint64_t *)&unk_1EB980C20, (uint64_t)&type metadata for EntityComponentProperty, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C40584(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1EB980BC0, (uint64_t)&type metadata for GraphScriptGroup, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9]) {
      memmove(v14, v15, 32 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[32 * v9] && v14 < &v15[32 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C406F8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, (unint64_t *)&unk_1EB980B30, (uint64_t)&type metadata for ScriptParser.Argument, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9]) {
      memmove(v14, v15, 32 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[32 * v9] && v14 < &v15[32 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C4086C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1EB980B28, (uint64_t)&type metadata for ScriptParser.ParsedScriptParameter, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 + 31;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 6);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  size_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[64 * v9]) {
      memmove(v14, v15, v9 << 6);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[64 * v9] && v14 < &v15[64 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C409E0(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B67519BC();
    int64_t v11 = (void *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v9) {
      memmove(v11 + 4, a4 + 4, 8 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    if (v15 < v14 + 8 * v9 && v14 < v15 + 8 * v9)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B62D9BF8(0, (unint64_t *)&qword_1EB9802F0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C40B70(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    int64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2) {
      int64_t v10 = a2;
    }
    if (v9 < a2) {
      a2 = v10;
    }
    else {
      a2 = v9;
    }
  }
  int64_t v11 = *((void *)a4 + 2);
  if (a2 <= v11) {
    int64_t v12 = *((void *)a4 + 2);
  }
  else {
    int64_t v12 = a2;
  }
  if (v12)
  {
    sub_1B62D9BF8(0, a5, a6, MEMORY[0x1E4FBBE00]);
    uint64_t v13 = (char *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 17;
    }
    *((void *)v13 + 2) = v11;
    *((void *)v13 + 3) = 2 * (v15 >> 4);
  }
  else
  {
    uint64_t v13 = (char *)MEMORY[0x1E4FBC860];
  }
  size_t v16 = v13 + 32;
  unint64_t v17 = a4 + 32;
  if (a1)
  {
    if (v13 != a4 || v16 >= &v17[16 * v11]) {
      memmove(v16, v17, 16 * v11);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v17 < &v16[16 * v11] && v16 < &v17[16 * v11])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v13;
}

uint64_t sub_1B6C40CE4(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t a6)
{
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    int64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2) {
      int64_t v10 = a2;
    }
    if (v9 < a2) {
      a2 = v10;
    }
    else {
      a2 = v9;
    }
  }
  int64_t v11 = *((void *)a4 + 2);
  if (a2 <= v11) {
    int64_t v12 = *((void *)a4 + 2);
  }
  else {
    int64_t v12 = a2;
  }
  if (v12)
  {
    sub_1B62D9BF8(0, a5, a6, MEMORY[0x1E4FBBE00]);
    uint64_t v13 = (char *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    *((void *)v13 + 2) = v11;
    *((void *)v13 + 3) = 2 * (v15 >> 3);
  }
  else
  {
    uint64_t v13 = (char *)MEMORY[0x1E4FBC860];
  }
  size_t v16 = v13 + 32;
  unint64_t v17 = a4 + 32;
  if (a1)
  {
    if (v13 != a4 || v16 >= &v17[8 * v11]) {
      memmove(v16, v17, 8 * v11);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v17 < &v16[8 * v11] && v16 < &v17[8 * v11])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v13;
}

uint64_t sub_1B6C40E58(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1EB980C30, (uint64_t)&type metadata for EntityComponentPropertyLite, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[56 * v9]) {
      memmove(v13, v14, 56 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[56 * v9] && v13 < &v14[56 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C40FEC(char a1, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t), uint64_t (*a7)(void))
{
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    int64_t v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (v12 <= a2) {
      int64_t v12 = a2;
    }
    if (v11 < a2) {
      a2 = v12;
    }
    else {
      a2 = v11;
    }
  }
  int64_t v13 = a4[2];
  if (a2 <= v13) {
    int64_t v14 = a4[2];
  }
  else {
    int64_t v14 = a2;
  }
  if (v14)
  {
    sub_1B62F7434(0, a5, a6, MEMORY[0x1E4FBBE00]);
    uint64_t v15 = *(void *)(a7(0) - 8);
    uint64_t v16 = *(void *)(v15 + 72);
    unint64_t v17 = (*(unsigned __int8 *)(v15 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80);
    unint64_t v18 = (void *)swift_allocObject();
    size_t v19 = j__malloc_size(v18);
    _OWORD v18[2] = v13;
    v18[3] = 2 * ((uint64_t)(v19 - v17) / v16);
  }
  else
  {
    unint64_t v18 = (void *)MEMORY[0x1E4FBC860];
  }
  uint64_t v20 = *(void *)(a7(0) - 8);
  unint64_t v21 = (*(unsigned __int8 *)(v20 + 80) + 32) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80);
  BOOL v22 = (char *)v18 + v21;
  char v23 = (char *)a4 + v21;
  if (a1)
  {
    if (v18 < a4 || v22 >= &v23[*(void *)(v20 + 72) * v13])
    {
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v18 != a4)
    {
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    int64_t v24 = *(void *)(v20 + 72) * v13;
    unint64_t v25 = &v22[v24];
    unint64_t v26 = (unint64_t)&v23[v24];
    if (v23 < v25 && (unint64_t)v22 < v26)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v18;
}

uint64_t sub_1B6C4121C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1E9DD7648, (uint64_t)&type metadata for GraphScriptingConfig.ScriptArg, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 56);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[56 * v9]) {
      memmove(v13, v14, 56 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[56 * v9] && v13 < &v14[56 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C413B0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, (unint64_t *)&unk_1E9DD1DA0, (uint64_t)&type metadata for GraphScriptingConfig.EvaluationMode, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  size_t v16 = 8 * v9;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[v16] && v14 < &v15[v16])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, v16);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C41514(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1E9DCFD28, (uint64_t)&type metadata for Scheduler.Event, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 104);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[104 * v9]) {
      memmove(v13, v14, 104 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[104 * v9] && v13 < &v14[104 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C416A4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B6C4510C();
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[v9]) {
      memmove(v13, v14, v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[v9] && v13 < &v14[v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memcpy(v13, v14, v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C417D8(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B6C44DC4();
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9]) {
      memmove(v13, v14, 24 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[24 * v9] && v13 < &v14[24 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memcpy(v13, v14, 24 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C41938(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1EB980AD8, (uint64_t)&type metadata for ChunksStorage.FilteredChunk, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  int64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9]) {
      memmove(v13, v14, 24 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[24 * v9] && v13 < &v14[24 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memcpy(v13, v14, 24 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C41ABC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62F7434(0, (unint64_t *)&qword_1EB980DA0, (uint64_t (*)(uint64_t))sub_1B62AADE8, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 16 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C41C30(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B6C460E4();
    int64_t v11 = (void *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 + 31;
    }
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 6);
  }
  else
  {
    int64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  int64_t v14 = v11 + 4;
  uint64_t v15 = a4 + 4;
  if (a1)
  {
    if (v11 < a4 || v14 >= &v15[8 * v9])
    {
      sub_1B67FB8C0(0, (unint64_t *)&qword_1E9DD3AE8);
      swift_arrayInitWithTakeFrontToBack();
    }
    else if (v11 != a4)
    {
      sub_1B67FB8C0(0, (unint64_t *)&qword_1E9DD3AE8);
      swift_arrayInitWithTakeBackToFront();
    }
    a4[2] = 0;
  }
  else
  {
    if (v15 < &v14[8 * v9] && v14 < &v15[8 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B67FB8C0(0, (unint64_t *)&qword_1E9DD3AE8);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C41E0C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1E9DD6C98, (uint64_t)&type metadata for VertexLayout, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  int64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C41F80(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62F7434(0, &qword_1EB980CE0, (uint64_t (*)(uint64_t))sub_1B6C44E40, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (void *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    int64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v11 != a4 || v13 >= v14 + 24 * v9) {
      memmove(v11 + 4, a4 + 4, 24 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 24 * v9 && v13 < v14 + 24 * v9)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B6C44E40(0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C42138(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, (unint64_t *)&unk_1EB980B80, (uint64_t)&type metadata for ShaderArgument, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 + 31;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 6);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  size_t v16 = v9 << 6;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[v16]) {
      memmove(v14, v15, v16);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[v16] && v14 < &v15[v16])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C422A8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B681A9C8();
    int64_t v11 = (void *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 88);
  }
  else
  {
    int64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v11 != a4 || v13 >= v14 + 88 * v9) {
      memmove(v11 + 4, a4 + 4, 88 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 88 * v9 && v13 < v14 + 88 * v9)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B62D9BF8(0, (unint64_t *)&unk_1EB981180, (uint64_t)&_s8MetadataVN, MEMORY[0x1E4FBB718]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C42454(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, (unint64_t *)&unk_1EB980D30, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 29;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 2);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[4 * v9]) {
      memmove(v14, v15, 4 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[4 * v9] && v14 < &v15[4 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 4 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C425BC(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62F7434(0, &qword_1E9DD1E70, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 + 31;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 6);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[64 * v9]) {
      memmove(v14, v15, v9 << 6);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[64 * v9] && v14 < &v15[64 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, v9 << 6);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C42730(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62F7434(0, &qword_1E9DD3A68, (uint64_t (*)(uint64_t))sub_1B6A02664, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (void *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    int64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v9) {
      memmove(v11 + 4, a4 + 4, 40 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 40 * v9 && v13 < v14 + 40 * v9)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B6A02664();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C428E4(char a1, int64_t a2, char a3, void *a4, void (*a5)(void), unint64_t *a6)
{
  if (a3)
  {
    unint64_t v9 = a4[3];
    int64_t v10 = v9 >> 1;
    int64_t v11 = v9 & 0xFFFFFFFFFFFFFFFELL;
    if (v11 <= a2) {
      int64_t v11 = a2;
    }
    if (v10 < a2) {
      a2 = v11;
    }
    else {
      a2 = v10;
    }
  }
  int64_t v12 = a4[2];
  if (a2 <= v12) {
    int64_t v13 = a4[2];
  }
  else {
    int64_t v13 = a2;
  }
  if (v13)
  {
    a5(0);
    unint64_t v14 = (void *)swift_allocObject();
    int64_t v15 = j__malloc_size(v14);
    uint64_t v16 = v15 - 32;
    if (v15 < 32) {
      uint64_t v16 = v15 - 1;
    }
    _OWORD v14[2] = v12;
    v14[3] = 2 * (v16 >> 5);
  }
  else
  {
    unint64_t v14 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v17 = (unint64_t)(v14 + 4);
  unint64_t v18 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v14 != a4 || v17 >= v18 + 32 * v12) {
      memmove(v14 + 4, a4 + 4, 32 * v12);
    }
    a4[2] = 0;
  }
  else
  {
    if (v18 < v17 + 32 * v12 && v17 < v18 + 32 * v12)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B62E98B4(0, a6);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v14;
}

uint64_t sub_1B6C42A78(char a1, int64_t a2, char a3, char *a4, unint64_t *a5, uint64_t (*a6)(uint64_t))
{
  if (a3)
  {
    unint64_t v8 = *((void *)a4 + 3);
    int64_t v9 = v8 >> 1;
    int64_t v10 = v8 & 0xFFFFFFFFFFFFFFFELL;
    if (v10 <= a2) {
      int64_t v10 = a2;
    }
    if (v9 < a2) {
      a2 = v10;
    }
    else {
      a2 = v9;
    }
  }
  int64_t v11 = *((void *)a4 + 2);
  if (a2 <= v11) {
    int64_t v12 = *((void *)a4 + 2);
  }
  else {
    int64_t v12 = a2;
  }
  if (v12)
  {
    sub_1B62F7434(0, a5, a6, MEMORY[0x1E4FBBE00]);
    int64_t v13 = (char *)swift_allocObject();
    int64_t v14 = j__malloc_size(v13);
    uint64_t v15 = v14 - 32;
    if (v14 < 32) {
      uint64_t v15 = v14 - 25;
    }
    *((void *)v13 + 2) = v11;
    *((void *)v13 + 3) = 2 * (v15 >> 3);
  }
  else
  {
    int64_t v13 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v16 = v13 + 32;
  unint64_t v17 = a4 + 32;
  if (a1)
  {
    if (v13 != a4 || v16 >= &v17[8 * v11]) {
      memmove(v16, v17, 8 * v11);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v17 < &v16[8 * v11] && v16 < &v17[8 * v11])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memcpy(v16, v17, 8 * v11);
  }
  swift_release();
  return (uint64_t)v13;
}

uint64_t sub_1B6C42BD8(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B68D57A8();
    int64_t v11 = (void *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 25;
    }
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 3);
  }
  else
  {
    int64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v11 != a4 || v14 >= v15 + 8 * v9) {
      memmove(v11 + 4, a4 + 4, 8 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    if (v15 < v14 + 8 * v9 && v14 < v15 + 8 * v9)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B62D9BF8(0, &qword_1EB97ED60, (uint64_t)&type metadata for ComponentProperty, MEMORY[0x1E4FBB718]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C42D68(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1E9DD77A8, (uint64_t)&_s19PipelineScriptCoderV24SpecializedFunctionCoderVN, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[40 * v9]) {
      memmove(v13, v14, 40 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[40 * v9] && v13 < &v14[40 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C42EF4(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1E9DD77B0, (uint64_t)&type metadata for RelationsCoder, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9]) {
      memmove(v13, v14, 24 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[24 * v9] && v13 < &v14[24 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C43084(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, (unint64_t *)&unk_1E9DD77B8, (uint64_t)&type metadata for EntityCoder, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * ((uint64_t)(v12 - 32) / 24);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v13 = v11 + 32;
  unint64_t v14 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v13 >= &v14[24 * v9]) {
      memmove(v13, v14, 24 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v14 < &v13[24 * v9] && v13 < &v14[24 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C43214(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62F7434(0, &qword_1E9DD7770, (uint64_t (*)(uint64_t))sub_1B6C46178, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (void *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    v11[2] = v9;
    v11[3] = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = (unint64_t)(v11 + 4);
  unint64_t v15 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v11 != a4 || v14 >= v15 + 16 * v9) {
      memmove(v11 + 4, a4 + 4, 16 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    if (v15 < v14 + 16 * v9 && v14 < v15 + 16 * v9)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B6C46178();
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C433B0(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, &qword_1EB980E00, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 1;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 5);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[32 * v9]) {
      memmove(v14, v15, 32 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[32 * v9] && v14 < &v15[32 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C4352C(char a1, int64_t a2, char a3, char *a4)
{
  if (a3)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = *((void *)a4 + 2);
  if (a2 <= v9) {
    int64_t v10 = *((void *)a4 + 2);
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B62D9BF8(0, (unint64_t *)&unk_1EB980B18, (uint64_t)&type metadata for RelationPair, MEMORY[0x1E4FBBE00]);
    int64_t v11 = (char *)swift_allocObject();
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v9;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }
  else
  {
    int64_t v11 = (char *)MEMORY[0x1E4FBC860];
  }
  unint64_t v14 = v11 + 32;
  unint64_t v15 = a4 + 32;
  if (a1)
  {
    if (v11 != a4 || v14 >= &v15[16 * v9]) {
      memmove(v14, v15, 16 * v9);
    }
    *((void *)a4 + 2) = 0;
  }
  else
  {
    if (v15 < &v14[16 * v9] && v14 < &v15[16 * v9])
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    memcpy(v14, v15, 16 * v9);
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C43694(char a1, int64_t a2, char a3, void *a4)
{
  if (a3)
  {
    unint64_t v6 = a4[3];
    int64_t v7 = v6 >> 1;
    int64_t v8 = v6 & 0xFFFFFFFFFFFFFFFELL;
    if (v8 <= a2) {
      int64_t v8 = a2;
    }
    if (v7 < a2) {
      a2 = v8;
    }
    else {
      a2 = v7;
    }
  }
  int64_t v9 = a4[2];
  if (a2 <= v9) {
    int64_t v10 = a4[2];
  }
  else {
    int64_t v10 = a2;
  }
  if (v10)
  {
    sub_1B6C46068();
    int64_t v11 = (void *)swift_allocObject();
    size_t v12 = j__malloc_size(v11);
    v11[2] = v9;
    v11[3] = 2 * ((uint64_t)(v12 - 32) / 40);
  }
  else
  {
    int64_t v11 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v13 = (unint64_t)(v11 + 4);
  unint64_t v14 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v11 != a4 || v13 >= v14 + 40 * v9) {
      memmove(v11 + 4, a4 + 4, 40 * v9);
    }
    a4[2] = 0;
  }
  else
  {
    if (v14 < v13 + 40 * v9 && v13 < v14 + 40 * v9)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    sub_1B62D9BF8(0, (unint64_t *)&qword_1E9DD1880, (uint64_t)&type metadata for AnyValue, MEMORY[0x1E4FBB718]);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v11;
}

uint64_t sub_1B6C4383C(char a1, int64_t a2, char a3, void *a4, unint64_t *a5, uint64_t (*a6)(uint64_t), void (*a7)(void))
{
  if (a3)
  {
    unint64_t v10 = a4[3];
    int64_t v11 = v10 >> 1;
    int64_t v12 = v10 & 0xFFFFFFFFFFFFFFFELL;
    if (v12 <= a2) {
      int64_t v12 = a2;
    }
    if (v11 < a2) {
      a2 = v12;
    }
    else {
      a2 = v11;
    }
  }
  int64_t v13 = a4[2];
  if (a2 <= v13) {
    int64_t v14 = a4[2];
  }
  else {
    int64_t v14 = a2;
  }
  if (v14)
  {
    sub_1B62F7434(0, a5, a6, MEMORY[0x1E4FBBE00]);
    unint64_t v15 = (void *)swift_allocObject();
    size_t v16 = j__malloc_size(v15);
    v15[2] = v13;
    _OWORD v15[3] = 2 * ((uint64_t)(v16 - 32) / 24);
  }
  else
  {
    unint64_t v15 = (void *)MEMORY[0x1E4FBC860];
  }
  unint64_t v17 = (unint64_t)(v15 + 4);
  unint64_t v18 = (unint64_t)(a4 + 4);
  if (a1)
  {
    if (v15 != a4 || v17 >= v18 + 24 * v13) {
      memmove(v15 + 4, a4 + 4, 24 * v13);
    }
    a4[2] = 0;
  }
  else
  {
    if (v18 < v17 + 24 * v13 && v17 < v18 + 24 * v13)
    {
      uint64_t result = sub_1B6E32C88();
      __break(1u);
      return result;
    }
    a7(0);
    swift_arrayInitWithCopy();
  }
  swift_release();
  return (uint64_t)v15;
}

uint64_t sub_1B6C439F0(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  swift_bridgeObjectRelease();
  *a1 = v3;
  return swift_bridgeObjectRetain();
}

void *sub_1B6C43A38(unint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!(a1 >> 62))
  {
    uint64_t v6 = *(void *)((a1 & 0xFFFFFFFFFFFFFF8) + 0x10);
    swift_bridgeObjectRetain();
    if (v6) {
      goto LABEL_3;
    }
LABEL_17:
    swift_bridgeObjectRelease();
    return 0;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = sub_1B6E32C18();
  if (!v6) {
    goto LABEL_17;
  }
LABEL_3:
  uint64_t v7 = 0;
  while (1)
  {
    id v8 = (a1 & 0xC000000000000001) != 0 ? (id)MEMORY[0x1BA9B4580](v7, a1) : *(id *)(a1 + 8 * v7 + 32);
    int64_t v9 = v8;
    id v10 = objc_msgSend(v8, sel_identifier);
    uint64_t v11 = sub_1B6E31798();
    uint64_t v13 = v12;

    if (v11 == a2 && v13 == a3) {
      break;
    }
    char v15 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v15) {
      goto LABEL_15;
    }

    if (v6 == ++v7) {
      goto LABEL_17;
    }
  }
  swift_bridgeObjectRelease();
LABEL_15:
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B6C43BB8(uint64_t a1, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  sub_1B62D9BF8(0, a3, a4, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32))(a2, a1, v6);
  return a2;
}

uint64_t sub_1B6C43C38(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C368F4);
}

void sub_1B6C43C98()
{
  if (!qword_1EB97FFF8)
  {
    sub_1B637ED20(255, (unint64_t *)&qword_1EB980000, (unint64_t *)&qword_1EB97FFF0);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1EB97FFF8);
    }
  }
}

void sub_1B6C43D18()
{
  if (!qword_1EB980CC8)
  {
    sub_1B67FB8C0(255, &qword_1EB980158);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980CC8);
    }
  }
}

void sub_1B6C43D88()
{
  if (!qword_1EB980CA8)
  {
    sub_1B67FB8C0(255, &qword_1EB980138);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980CA8);
    }
  }
}

void sub_1B6C43DF8()
{
  if (!qword_1E9DD74C8)
  {
    sub_1B67FB8C0(255, &qword_1E9DD74D0);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD74C8);
    }
  }
}

void sub_1B6C43E68()
{
  if (!qword_1E9DD74D8)
  {
    sub_1B67FB8C0(255, &qword_1E9DD74E0);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD74D8);
    }
  }
}

void sub_1B6C43ED8()
{
  if (!qword_1EB980CA0)
  {
    sub_1B67FB8C0(255, &qword_1EB980130);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980CA0);
    }
  }
}

void sub_1B6C43F48()
{
  if (!qword_1E9DD74E8)
  {
    sub_1B67FB8C0(255, &qword_1E9DD74F0);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD74E8);
    }
  }
}

void sub_1B6C43FB8()
{
  if (!qword_1E9DD74F8)
  {
    sub_1B67FB8C0(255, &qword_1E9DD7500);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD74F8);
    }
  }
}

void sub_1B6C44028()
{
  if (!qword_1EB980D08)
  {
    sub_1B67FB8C0(255, &qword_1EB9801A0);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980D08);
    }
  }
}

void sub_1B6C44098()
{
  if (!qword_1E9DD7508)
  {
    sub_1B67FB8C0(255, &qword_1E9DD7510);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7508);
    }
  }
}

void sub_1B6C44108()
{
  if (!qword_1EB980CC0)
  {
    sub_1B67FB8C0(255, &qword_1EB980150);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980CC0);
    }
  }
}

void sub_1B6C44178()
{
  if (!qword_1EB980CB0)
  {
    sub_1B67FB8C0(255, &qword_1EB980140);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980CB0);
    }
  }
}

void sub_1B6C441E8()
{
  if (!qword_1EB980CD0)
  {
    sub_1B67FB8C0(255, &qword_1EB980160);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980CD0);
    }
  }
}

void sub_1B6C44258()
{
  if (!qword_1EB980CE8)
  {
    sub_1B67FB8C0(255, &qword_1EB980178);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980CE8);
    }
  }
}

void sub_1B6C442C8()
{
  if (!qword_1E9DD7518)
  {
    sub_1B67FB8C0(255, &qword_1E9DD7520);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7518);
    }
  }
}

void sub_1B6C44338()
{
  if (!qword_1EB980CF0)
  {
    sub_1B67FB8C0(255, &qword_1EB980180);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980CF0);
    }
  }
}

void sub_1B6C443A8()
{
  if (!qword_1EB980CF8)
  {
    sub_1B67FB8C0(255, &qword_1EB980188);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980CF8);
    }
  }
}

void sub_1B6C44418()
{
  if (!qword_1E9DD7528)
  {
    sub_1B67FB8C0(255, &qword_1E9DD7530);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7528);
    }
  }
}

void sub_1B6C44488()
{
  if (!qword_1E9DD7538)
  {
    sub_1B67FB8C0(255, &qword_1E9DD7540);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7538);
    }
  }
}

void sub_1B6C444F8()
{
  if (!qword_1EB980D00)
  {
    sub_1B67FB8C0(255, &qword_1EB980198);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980D00);
    }
  }
}

void sub_1B6C44568()
{
  if (!qword_1E9DD7548)
  {
    sub_1B67FB8C0(255, &qword_1E9DD7550);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7548);
    }
  }
}

void sub_1B6C445D8()
{
  if (!qword_1E9DD7558)
  {
    sub_1B67FB8C0(255, &qword_1E9DD7560);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7558);
    }
  }
}

void sub_1B6C44648()
{
  if (!qword_1E9DD7568)
  {
    sub_1B67FB8C0(255, &qword_1E9DD7570);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7568);
    }
  }
}

void sub_1B6C446B8()
{
  if (!qword_1E9DD7578)
  {
    sub_1B67FB8C0(255, &qword_1E9DD7580);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7578);
    }
  }
}

void sub_1B6C44728()
{
  if (!qword_1E9DD7588)
  {
    sub_1B67FB8C0(255, &qword_1E9DD7590);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7588);
    }
  }
}

void sub_1B6C44798()
{
  if (!qword_1E9DD7598)
  {
    sub_1B67FB8C0(255, &qword_1E9DD75A0);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7598);
    }
  }
}

void sub_1B6C44808()
{
  if (!qword_1E9DD75A8)
  {
    sub_1B67FB8C0(255, &qword_1E9DD75B0);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD75A8);
    }
  }
}

void sub_1B6C44878()
{
  if (!qword_1E9DD75B8)
  {
    sub_1B67FB8C0(255, &qword_1E9DD75C0);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD75B8);
    }
  }
}

void sub_1B6C448E8()
{
  if (!qword_1EB980CB8)
  {
    sub_1B67FB8C0(255, &qword_1EB980148);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980CB8);
    }
  }
}

void sub_1B6C44958()
{
  if (!qword_1E9DD75C8)
  {
    sub_1B67FB8C0(255, &qword_1E9DD75D0);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD75C8);
    }
  }
}

void sub_1B6C449C8()
{
  if (!qword_1EB980CD8)
  {
    sub_1B67FB8C0(255, &qword_1EB980168);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980CD8);
    }
  }
}

void sub_1B6C44A38()
{
  if (!qword_1E9DD75D8)
  {
    sub_1B67FB8C0(255, &qword_1E9DD75E0);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD75D8);
    }
  }
}

void sub_1B6C44AA8()
{
  if (!qword_1E9DD75E8)
  {
    sub_1B67FB8C0(255, &qword_1E9DD75F0);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD75E8);
    }
  }
}

void sub_1B6C44B18()
{
  if (!qword_1E9DD75F8)
  {
    sub_1B67FB8C0(255, &qword_1E9DD7600);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD75F8);
    }
  }
}

void sub_1B6C44B88()
{
  if (!qword_1E9DD7608)
  {
    sub_1B67FB8C0(255, &qword_1E9DD7610);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7608);
    }
  }
}

void sub_1B6C44BF8()
{
  if (!qword_1EB980C98)
  {
    sub_1B67FB8C0(255, &qword_1EB980128);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980C98);
    }
  }
}

void sub_1B6C44C68()
{
  if (!qword_1E9DD7618)
  {
    sub_1B62E98B4(255, &qword_1E9DD7620);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7618);
    }
  }
}

void sub_1B6C44CDC()
{
  if (!qword_1E9DD7628)
  {
    sub_1B62E98B4(255, &qword_1E9DD7630);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7628);
    }
  }
}

void sub_1B6C44D54()
{
  if (!qword_1E9DD7640)
  {
    sub_1B67FB8C0(255, &qword_1E9DD0538);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7640);
    }
  }
}

void sub_1B6C44DC4()
{
  if (!qword_1E9DD7658)
  {
    sub_1B62D9BF8(255, &qword_1E9DD7660, (uint64_t)&type metadata for Position, (uint64_t (*)(void, uint64_t))type metadata accessor for UnsafeSparseMutableBufferPointer.BufferAndStart);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7658);
    }
  }
}

void sub_1B6C44E40(uint64_t a1)
{
}

void sub_1B6C44E68()
{
  if (!qword_1E9DD7668)
  {
    sub_1B67FB8C0(255, &qword_1E9DD7670);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7668);
    }
  }
}

void sub_1B6C44ED8()
{
  if (!qword_1E9DD7680)
  {
    sub_1B6C44F54(255, &qword_1E9DD7688, (void (*)(uint64_t))type metadata accessor for Node);
    unint64_t v0 = sub_1B6E324B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7680);
    }
  }
}

void sub_1B6C44F54(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_1B6C44FC0(uint64_t a1)
{
}

void sub_1B6C44FF0()
{
  if (!qword_1EB980BE0)
  {
    sub_1B637ED20(255, &qword_1EB97EFB8, &qword_1EB97EFB0);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB980BE0);
    }
  }
}

void sub_1B6C45060()
{
  if (!qword_1E9DD76B0)
  {
    sub_1B6C44F54(255, &qword_1E9DD76B8, (void (*)(uint64_t))type metadata accessor for AuthoringNode);
    unint64_t v0 = sub_1B6E324B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD76B0);
    }
  }
}

void sub_1B6C450DC(uint64_t a1)
{
}

void sub_1B6C4510C()
{
  if (!qword_1E9DD76D8)
  {
    sub_1B62D9BF8(255, &qword_1E9DD76E0, (uint64_t)&type metadata for RenderGraphNode.ResourceSemantic, MEMORY[0x1E4FBB718]);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD76D8);
    }
  }
}

void sub_1B6C45188(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v5) {
      atomic_store(TupleTypeMetadata2, a2);
    }
  }
}

void sub_1B6C451F8(uint64_t a1)
{
}

void sub_1B6C45220(uint64_t a1)
{
}

void sub_1B6C45248(uint64_t a1)
{
}

void sub_1B6C45270(uint64_t a1)
{
}

void sub_1B6C45298(uint64_t a1)
{
}

void sub_1B6C452C0(uint64_t a1)
{
}

void sub_1B6C452E8(uint64_t a1)
{
}

uint64_t sub_1B6C45310(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C36B08);
}

uint64_t sub_1B6C45370(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C36D14);
}

uint64_t sub_1B6C453D0(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C36F24);
}

uint64_t sub_1B6C45430(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C37138);
}

uint64_t sub_1B6C45490(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C37348);
}

uint64_t sub_1B6C454F0(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C37558);
}

uint64_t sub_1B6C45550(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C37768);
}

uint64_t sub_1B6C455B0(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C37978);
}

uint64_t sub_1B6C45610(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C37B98);
}

uint64_t sub_1B6C45670(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C37DB4);
}

uint64_t sub_1B6C456D0(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C37FD4);
}

uint64_t sub_1B6C45730(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C381E8);
}

uint64_t sub_1B6C45790(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C38400);
}

uint64_t sub_1B6C457F0(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C38618);
}

uint64_t sub_1B6C45850(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C3882C);
}

uint64_t sub_1B6C458B0(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C38A4C);
}

uint64_t sub_1B6C45910(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C38C68);
}

uint64_t sub_1B6C45970(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C38E88);
}

uint64_t sub_1B6C459D0(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C390A4);
}

uint64_t sub_1B6C45A30(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C392C4);
}

uint64_t sub_1B6C45A90(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C394D8);
}

uint64_t sub_1B6C45AF0(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C396EC);
}

uint64_t sub_1B6C45B50(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C39904);
}

uint64_t sub_1B6C45BB0(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C39B1C);
}

uint64_t sub_1B6C45C10(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C39D34);
}

uint64_t sub_1B6C45C70(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4)
{
  return sub_1B6C45CD0(a1, a2, a3, a4, sub_1B6C39F4C);
}

uint64_t sub_1B6C45CD0(uint64_t a1, uint64_t a2, unsigned int a3, unint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v5 = a5;
  uint64_t v42 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = a3;
  if ((a2 & 0x100000000) != 0)
  {
    int v9 = a4;
    uint64_t v23 = a3;
    unint64_t v10 = HIDWORD(a4);
    if (qword_1EB97DC28 != -1) {
      swift_once();
    }
    uint64_t v11 = qword_1EB997A18;
    sub_1B636E080();
    uint64_t inited = swift_initStackObject();
    *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
    *(void *)(inited + 32) = &type metadata for Particle;
    *(void *)(inited + 40) = &off_1F0FA6CF0;
    uint64_t v32 = v11;
    int v33 = 0;
    char v34 = 2;
    uint64_t v35 = 0;
    char v36 = 2;
    uint64_t v37 = 0;
    swift_retain();
    sub_1B62F776C(inited, 1, (uint64_t)v24);
    swift_setDeallocating();
    swift_release();
    sub_1B62C5838(0, (unint64_t *)&qword_1EB980B60, (unint64_t *)&qword_1EB97E840);
    uint64_t v13 = swift_initStackObject();
    *(_OWORD *)(v13 + 16) = xmmword_1B6E77050;
    *(void *)(v13 + 56) = &type metadata for EmitterReference;
    *(void *)(v13 + 64) = &off_1F0F6BD40;
    *(_DWORD *)(v13 + 32) = v9;
    *(_DWORD *)(v13 + 36) = v10;
    sub_1B62F7044(v13, (uint64_t)v25);
    swift_setDeallocating();
    sub_1B62C55B0(0, (unint64_t *)&qword_1EB97E840);
    swift_arrayDestroy();
    sub_1B62CA064((uint64_t)v24);
    sub_1B62C9DA8(a1, (uint64_t)v25, 0x200000000, v39);
    sub_1B6C43BB8((uint64_t)v39, (uint64_t)v40, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
    if (!*(void *)&v40[0])
    {
      sub_1B62CA064((uint64_t)v25);
      return 0;
    }
    long long v28 = v40[2];
    long long v29 = v40[3];
    long long v30 = v40[4];
    long long v31 = v41;
    long long v26 = v40[0];
    long long v27 = v40[1];
    if ((uint64_t)v41 <= v23)
    {
      sub_1B62CA064((uint64_t)v25);
      sub_1B632F170(v39);
      return 0;
    }
    int v8 = sub_1B637BED0(v23);
    uint64_t v7 = v14;
    sub_1B62CA064((uint64_t)v25);
    sub_1B632F170(v39);
    uint64_t v5 = a5;
  }
  else
  {
    int v8 = a2;
  }
  uint64_t v15 = *(void *)(a1 + 136);
  swift_retain();
  swift_retain();
  size_t v16 = sub_1B6C36898(v38, v8, v15);
  uint64_t v18 = *v17;
  ((void (*)(void *, void))v16)(v38, 0);
  swift_release();
  swift_release();
  if (v18) {
    return v5(v18, a1, v7);
  }
  uint64_t v20 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
  swift_retain();
  uint64_t v21 = sub_1B6E32148();
  v38[0] = 0;
  (*(void (**)(uint64_t, void *, unint64_t, unint64_t))(*(void *)v20 + 88))(v21, v38, 0xD000000000000031, 0x80000001B6F4DFE0);
  swift_release();
  return 0;
}

void sub_1B6C46068()
{
  if (!qword_1E9DD7750)
  {
    sub_1B62D9BF8(255, (unint64_t *)&qword_1E9DD1880, (uint64_t)&type metadata for AnyValue, MEMORY[0x1E4FBB718]);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7750);
    }
  }
}

void sub_1B6C460E4()
{
  if (!qword_1E9DD7758)
  {
    sub_1B67FB8C0(255, (unint64_t *)&qword_1E9DD3AE8);
    unint64_t v0 = sub_1B6E330A8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7758);
    }
  }
}

void sub_1B6C46150(uint64_t a1)
{
}

void sub_1B6C46178()
{
  if (!qword_1E9DD7778)
  {
    sub_1B62F7434(255, &qword_1E9DCD9D0, (uint64_t (*)(uint64_t))type metadata accessor for PropertyDescription, MEMORY[0x1E4FBB320]);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9DD7778);
    }
  }
}

void sub_1B6C46210(uint64_t a1)
{
}

void sub_1B6C46238(uint64_t a1)
{
}

uint64_t destroy for RenderFunctions(void *a1)
{
  if (a1[1])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[6])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[11])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  if (a1[16])
  {
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for RenderFunctions(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4)
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = *(void *)(a2 + 24);
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)(a1 + 24) = v5;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v6 = *(void *)(a2 + 48);
    if (v6) {
      goto LABEL_3;
    }
  }
  else
  {
    long long v12 = *(_OWORD *)(a2 + 16);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_OWORD *)(a1 + 16) = v12;
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    uint64_t v6 = *(void *)(a2 + 48);
    if (v6)
    {
LABEL_3:
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v6;
      uint64_t v7 = *(void *)(a2 + 64);
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      *(void *)(a1 + 64) = v7;
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRetain();
      swift_unknownObjectRetain();
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v8 = *(void *)(a2 + 88);
      if (v8) {
        goto LABEL_4;
      }
LABEL_8:
      long long v14 = *(_OWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
      *(_OWORD *)(a1 + 96) = v14;
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      uint64_t v10 = *(void *)(a2 + 128);
      if (v10) {
        goto LABEL_5;
      }
LABEL_9:
      long long v15 = *(_OWORD *)(a2 + 136);
      *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
      *(_OWORD *)(a1 + 136) = v15;
      *(void *)(a1 + 152) = *(void *)(a2 + 152);
      goto LABEL_10;
    }
  }
  long long v13 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v13;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 88);
  if (!v8) {
    goto LABEL_8;
  }
LABEL_4:
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v8;
  uint64_t v9 = *(void *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(void *)(a1 + 104) = v9;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v10 = *(void *)(a2 + 128);
  if (!v10) {
    goto LABEL_9;
  }
LABEL_5:
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  uint64_t v11 = *(void *)(a2 + 144);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(void *)(a1 + 144) = v11;
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
LABEL_10:
  uint64_t v16 = *(void *)(a2 + 160);
  uint64_t v17 = *(void *)(a2 + 168);
  *(void *)(a1 + 160) = v16;
  *(void *)(a1 + 168) = v17;
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

void *assignWithCopy for RenderFunctions(void *a1, void *a2)
{
  uint64_t v4 = a2[1];
  if (a1[1])
  {
    if (v4)
    {
      *a1 = *a2;
      a1[1] = a2[1];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[2] = a2[2];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[3] = a2[3];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[4] = a2[4];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B67A04EC((uint64_t)a1);
      uint64_t v5 = a2[4];
      long long v6 = *((_OWORD *)a2 + 1);
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *((_OWORD *)a1 + 1) = v6;
      a1[4] = v5;
    }
  }
  else if (v4)
  {
    *a1 = *a2;
    a1[1] = a2[1];
    a1[2] = a2[2];
    a1[3] = a2[3];
    a1[4] = a2[4];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v7 = *(_OWORD *)a2;
    long long v8 = *((_OWORD *)a2 + 1);
    a1[4] = a2[4];
    *(_OWORD *)a1 = v7;
    *((_OWORD *)a1 + 1) = v8;
  }
  uint64_t v9 = a1 + 5;
  uint64_t v10 = a2 + 5;
  uint64_t v11 = a2[6];
  if (a1[6])
  {
    if (v11)
    {
      a1[5] = a2[5];
      a1[6] = a2[6];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[7] = a2[7];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[8] = a2[8];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[9] = a2[9];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B67A04EC((uint64_t)(a1 + 5));
      uint64_t v12 = a2[9];
      long long v13 = *(_OWORD *)(a2 + 7);
      _OWORD *v9 = *v10;
      *(_OWORD *)(a1 + 7) = v13;
      a1[9] = v12;
    }
  }
  else if (v11)
  {
    a1[5] = a2[5];
    a1[6] = a2[6];
    a1[7] = a2[7];
    a1[8] = a2[8];
    a1[9] = a2[9];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v14 = *v10;
    long long v15 = *(_OWORD *)(a2 + 7);
    a1[9] = a2[9];
    _OWORD *v9 = v14;
    *(_OWORD *)(a1 + 7) = v15;
  }
  uint64_t v16 = a1 + 10;
  uint64_t v17 = a2 + 10;
  uint64_t v18 = a2[11];
  if (a1[11])
  {
    if (v18)
    {
      a1[10] = a2[10];
      a1[11] = a2[11];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[12] = a2[12];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[13] = a2[13];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[14] = a2[14];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B67A04EC((uint64_t)(a1 + 10));
      uint64_t v19 = a2[14];
      long long v20 = *((_OWORD *)a2 + 6);
      *uint64_t v16 = *v17;
      *((_OWORD *)a1 + 6) = v20;
      a1[14] = v19;
    }
  }
  else if (v18)
  {
    a1[10] = a2[10];
    a1[11] = a2[11];
    a1[12] = a2[12];
    a1[13] = a2[13];
    a1[14] = a2[14];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v21 = *v17;
    long long v22 = *((_OWORD *)a2 + 6);
    a1[14] = a2[14];
    *uint64_t v16 = v21;
    *((_OWORD *)a1 + 6) = v22;
  }
  uint64_t v23 = a1 + 15;
  int64_t v24 = a2 + 15;
  uint64_t v25 = a2[16];
  if (a1[16])
  {
    if (v25)
    {
      a1[15] = a2[15];
      a1[16] = a2[16];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
      a1[17] = a2[17];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[18] = a2[18];
      swift_unknownObjectRetain();
      swift_unknownObjectRelease();
      a1[19] = a2[19];
      swift_bridgeObjectRetain();
      swift_bridgeObjectRelease();
    }
    else
    {
      sub_1B67A04EC((uint64_t)(a1 + 15));
      uint64_t v26 = a2[19];
      long long v27 = *(_OWORD *)(a2 + 17);
      *uint64_t v23 = *v24;
      *(_OWORD *)(a1 + 17) = v27;
      a1[19] = v26;
    }
  }
  else if (v25)
  {
    a1[15] = a2[15];
    a1[16] = a2[16];
    a1[17] = a2[17];
    a1[18] = a2[18];
    a1[19] = a2[19];
    swift_bridgeObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_bridgeObjectRetain();
  }
  else
  {
    long long v28 = *v24;
    long long v29 = *(_OWORD *)(a2 + 17);
    a1[19] = a2[19];
    *uint64_t v23 = v28;
    *(_OWORD *)(a1 + 17) = v29;
  }
  a1[20] = a2[20];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[21] = a2[21];
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

__n128 initializeWithTake for RenderFunctions(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  long long v3 = a2[2];
  *(_OWORD *)(a1 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  long long v4 = a2[3];
  long long v5 = a2[4];
  long long v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  long long v8 = a2[8];
  long long v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for RenderFunctions(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 8))
  {
    uint64_t v4 = *(void *)(a2 + 8);
    if (v4)
    {
      *(void *)a1 = *(void *)a2;
      *(void *)(a1 + 8) = v4;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 16) = *(void *)(a2 + 16);
      swift_unknownObjectRelease();
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      swift_unknownObjectRelease();
      *(void *)(a1 + 32) = *(void *)(a2 + 32);
      swift_bridgeObjectRelease();
      goto LABEL_6;
    }
    sub_1B67A04EC(a1);
  }
  long long v5 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v5;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
LABEL_6:
  if (*(void *)(a1 + 48))
  {
    uint64_t v6 = *(void *)(a2 + 48);
    if (v6)
    {
      *(void *)(a1 + 40) = *(void *)(a2 + 40);
      *(void *)(a1 + 48) = v6;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 56) = *(void *)(a2 + 56);
      swift_unknownObjectRelease();
      *(void *)(a1 + 64) = *(void *)(a2 + 64);
      swift_unknownObjectRelease();
      *(void *)(a1 + 72) = *(void *)(a2 + 72);
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }
    sub_1B67A04EC(a1 + 40);
  }
  long long v7 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = v7;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
LABEL_11:
  if (*(void *)(a1 + 88))
  {
    uint64_t v8 = *(void *)(a2 + 88);
    if (v8)
    {
      *(void *)(a1 + 80) = *(void *)(a2 + 80);
      *(void *)(a1 + 88) = v8;
      swift_bridgeObjectRelease();
      *(void *)(a1 + 96) = *(void *)(a2 + 96);
      swift_unknownObjectRelease();
      *(void *)(a1 + 104) = *(void *)(a2 + 104);
      swift_unknownObjectRelease();
      *(void *)(a1 + 112) = *(void *)(a2 + 112);
      swift_bridgeObjectRelease();
      goto LABEL_16;
    }
    sub_1B67A04EC(a1 + 80);
  }
  long long v9 = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 96) = v9;
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
LABEL_16:
  if (!*(void *)(a1 + 128))
  {
LABEL_20:
    long long v11 = *(_OWORD *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = *(_OWORD *)(a2 + 120);
    *(_OWORD *)(a1 + 136) = v11;
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    goto LABEL_21;
  }
  uint64_t v10 = *(void *)(a2 + 128);
  if (!v10)
  {
    sub_1B67A04EC(a1 + 120);
    goto LABEL_20;
  }
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(void *)(a1 + 128) = v10;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  swift_unknownObjectRelease();
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  swift_unknownObjectRelease();
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease();
LABEL_21:
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  swift_unknownObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for RenderFunctions(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0x7FFFFFFF && *(unsigned char *)(a1 + 176)) {
    return (*(_DWORD *)a1 + 0x7FFFFFFF);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  int v4 = v3 - 1;
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for RenderFunctions(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFE)
  {
    *(void *)(result + 168) = 0;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 0x7FFFFFFF;
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 176) = 1;
    }
  }
  else
  {
    if (a3 >= 0x7FFFFFFF) {
      *(unsigned char *)(result + 176) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderFunctions()
{
  return &type metadata for RenderFunctions;
}

void sub_1B6C46C50()
{
  qword_1EB97EB60 = (uint64_t)&unk_1F0F69D28;
}

uint64_t sub_1B6C46C64()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C46CDC()
{
  return sub_1B63125E8();
}

uint64_t sub_1B6C46D38()
{
  return sub_1B6E33988();
}

BOOL sub_1B6C46DAC(_OWORD *a1, _OWORD *a2)
{
  long long v2 = a1[9];
  v13[8] = a1[8];
  v13[9] = v2;
  v13[10] = a1[10];
  long long v3 = a1[5];
  v13[4] = a1[4];
  v13[5] = v3;
  long long v4 = a1[7];
  v13[6] = a1[6];
  v13[7] = v4;
  long long v5 = a1[1];
  v13[0] = *a1;
  v13[1] = v5;
  long long v6 = a1[3];
  v13[2] = a1[2];
  v13[3] = v6;
  long long v7 = a2[9];
  v14[8] = a2[8];
  v14[9] = v7;
  v14[10] = a2[10];
  long long v8 = a2[5];
  v14[4] = a2[4];
  v14[5] = v8;
  long long v9 = a2[7];
  v14[6] = a2[6];
  v14[7] = v9;
  long long v10 = a2[1];
  v14[0] = *a2;
  v14[1] = v10;
  long long v11 = a2[3];
  _OWORD v14[2] = a2[2];
  v14[3] = v11;
  return sub_1B6C46EF0((uint64_t *)v13, (uint64_t *)v14);
}

unint64_t sub_1B6C46E44()
{
  unint64_t result = qword_1E9DD77C8;
  if (!qword_1E9DD77C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD77C8);
  }
  return result;
}

unint64_t sub_1B6C46E98()
{
  unint64_t result = qword_1EB980440;
  if (!qword_1EB980440)
  {
    unint64_t result = swift_getExistentialTypeMetadata();
    atomic_store(result, (unint64_t *)&qword_1EB980440);
  }
  return result;
}

BOOL sub_1B6C46EF0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v8 = a2[3];
  uint64_t v9 = a2[4];
  if (!v3)
  {
    if (!v6) {
      goto LABEL_17;
    }
LABEL_13:
    sub_1B6312ABC(v2, v3);
    sub_1B6312ABC(v7, v6);
    sub_1B6312CF0(v2, v3);
    uint64_t v12 = v7;
    uint64_t v13 = v6;
LABEL_56:
    sub_1B6312CF0(v12, v13);
    return 0;
  }
  if (!v6) {
    goto LABEL_13;
  }
  int v38 = a1;
  BOOL v10 = v2 == v7 && v3 == v6;
  if (v10 || (sub_1B6E334B8() & 1) != 0)
  {
    if (v4)
    {
      if (v8 && v4 == v8) {
        goto LABEL_11;
      }
    }
    else if (!v8)
    {
LABEL_11:
      sub_1B6312ABC(v2, v3);
      sub_1B6312ABC(v2, v3);
      sub_1B6312ABC(v7, v6);
      char v11 = sub_1B6918D10(v5, v9);
      goto LABEL_16;
    }
  }
  sub_1B6312ABC(v2, v3);
  sub_1B6312ABC(v2, v3);
  sub_1B6312ABC(v7, v6);
  char v11 = 0;
LABEL_16:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1B6312CF0(v2, v3);
  a1 = v38;
  if ((v11 & 1) == 0) {
    return 0;
  }
LABEL_17:
  uint64_t v14 = a1[5];
  uint64_t v15 = a1[6];
  uint64_t v16 = a1[8];
  uint64_t v17 = a1[9];
  uint64_t v18 = a2[5];
  uint64_t v19 = a2[6];
  uint64_t v20 = a2[8];
  uint64_t v21 = a2[9];
  if (v15)
  {
    if (!v19) {
      goto LABEL_55;
    }
    uint64_t v39 = a1;
    if (v14 == v18 && v15 == v19 || (sub_1B6E334B8() & 1) != 0)
    {
      if (v16)
      {
        if (v20 && v16 == v20) {
          goto LABEL_25;
        }
      }
      else if (!v20)
      {
LABEL_25:
        sub_1B6312ABC(v14, v15);
        sub_1B6312ABC(v14, v15);
        sub_1B6312ABC(v18, v19);
        char v22 = sub_1B6918D10(v17, v21);
        goto LABEL_30;
      }
    }
    sub_1B6312ABC(v14, v15);
    sub_1B6312ABC(v14, v15);
    sub_1B6312ABC(v18, v19);
    char v22 = 0;
LABEL_30:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1B6312CF0(v14, v15);
    a1 = v39;
    if ((v22 & 1) == 0) {
      return 0;
    }
    goto LABEL_31;
  }
  if (v19) {
    goto LABEL_55;
  }
LABEL_31:
  uint64_t v14 = a1[10];
  uint64_t v15 = a1[11];
  uint64_t v23 = a1[13];
  uint64_t v24 = a1[14];
  uint64_t v18 = a2[10];
  uint64_t v19 = a2[11];
  uint64_t v25 = a2[13];
  uint64_t v26 = a2[14];
  if (v15)
  {
    if (!v19) {
      goto LABEL_55;
    }
    uint64_t v40 = a1;
    if (v14 == v18 && v15 == v19 || (sub_1B6E334B8() & 1) != 0)
    {
      if (v23)
      {
        if (v25 && v23 == v25) {
          goto LABEL_39;
        }
      }
      else if (!v25)
      {
LABEL_39:
        sub_1B6312ABC(v14, v15);
        sub_1B6312ABC(v14, v15);
        sub_1B6312ABC(v18, v19);
        char v27 = sub_1B6918D10(v24, v26);
        goto LABEL_44;
      }
    }
    sub_1B6312ABC(v14, v15);
    sub_1B6312ABC(v14, v15);
    sub_1B6312ABC(v18, v19);
    char v27 = 0;
LABEL_44:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1B6312CF0(v14, v15);
    a1 = v40;
    if ((v27 & 1) == 0) {
      return 0;
    }
    goto LABEL_45;
  }
  if (v19) {
    goto LABEL_55;
  }
LABEL_45:
  uint64_t v14 = a1[15];
  uint64_t v15 = a1[16];
  uint64_t v28 = a1[18];
  uint64_t v29 = a1[19];
  uint64_t v18 = a2[15];
  uint64_t v19 = a2[16];
  uint64_t v30 = a2[18];
  uint64_t v31 = a2[19];
  if (!v15)
  {
    if (!v19) {
      goto LABEL_62;
    }
    goto LABEL_55;
  }
  if (!v19)
  {
LABEL_55:
    sub_1B6312ABC(v14, v15);
    sub_1B6312ABC(v18, v19);
    sub_1B6312CF0(v14, v15);
    uint64_t v12 = v18;
    uint64_t v13 = v19;
    goto LABEL_56;
  }
  long long v41 = a1;
  if (v14 == v18 && v15 == v19 || (sub_1B6E334B8() & 1) != 0)
  {
    if (v28)
    {
      if (v30 && v28 == v30) {
        goto LABEL_53;
      }
    }
    else if (!v30)
    {
LABEL_53:
      sub_1B6312ABC(v14, v15);
      sub_1B6312ABC(v14, v15);
      sub_1B6312ABC(v18, v19);
      char v32 = sub_1B6918D10(v29, v31);
      goto LABEL_61;
    }
  }
  sub_1B6312ABC(v14, v15);
  sub_1B6312ABC(v14, v15);
  sub_1B6312ABC(v18, v19);
  char v32 = 0;
LABEL_61:
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  sub_1B6312CF0(v14, v15);
  a1 = v41;
  if ((v32 & 1) == 0) {
    return 0;
  }
LABEL_62:
  char v34 = a1;
  uint64_t v35 = (void *)a1[20];
  char v36 = (void *)a2[20];
  if (!v35)
  {
    if (!v36) {
      goto LABEL_67;
    }
    return 0;
  }
  if (!v36 || (sub_1B6919430(v35, v36) & 1) == 0) {
    return 0;
  }
LABEL_67:
  sub_1B6313054((uint64_t)(a2 + 21), (uint64_t)v44, (uint64_t (*)(void))sub_1B6313168);
  sub_1B6313054((uint64_t)v44, (uint64_t)&v45, (uint64_t (*)(void))sub_1B6313168);
  unint64_t v37 = v45;
  sub_1B6313054((uint64_t)(v34 + 21), (uint64_t)v43, (uint64_t (*)(void))sub_1B6313168);
  sub_1B6313054((uint64_t)v43, (uint64_t)&v46, (uint64_t (*)(void))sub_1B6313168);
  BOOL result = __PAIR128__(v46, v37) == 0;
  if (v46)
  {
    if (v37) {
      return v46 == v37;
    }
  }
  return result;
}

void *sub_1B6C476AC@<X0>(uint64_t a1@<X8>)
{
  BOOL result = sub_1B68C73D8(0, 6, (void (*)(long long *__return_ptr, uint64_t *))sub_1B6C47B68);
  *(_DWORD *)a1 = 1014350479;
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1B6C47700()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C47758()
{
  return sub_1B6E318B8();
}

uint64_t sub_1B6C47774()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C477C8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

void sub_1B6C4781C(void *a1@<X8>)
{
  *a1 = 0x6169426874706564;
  a1[1] = 0xE900000000000073;
}

uint64_t sub_1B6C4783C()
{
  return 0x6169426874706564;
}

uint64_t sub_1B6C47858@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B6C478B0(uint64_t a1)
{
  unint64_t v2 = sub_1B6C47D68();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C478EC(uint64_t a1)
{
  unint64_t v2 = sub_1B6C47D68();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *sub_1B6C47928@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1B6C47B90(a1);
  if (!v2)
  {
    *(_DWORD *)a2 = v5;
    *(void *)(a2 + 8) = result;
  }
  return result;
}

uint64_t sub_1B6C47958(void *a1)
{
  sub_1B6C47DBC(0, &qword_1E9DD77E8, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C47D68();
  sub_1B6E33A88();
  sub_1B6E32F78();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t initializeBufferWithCopyOfBuffer for Shadow(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for Shadow(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Shadow(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Shadow()
{
  return &type metadata for Shadow;
}

void sub_1B6C47B68(_OWORD *a1@<X8>)
{
  *(double *)&long long v2 = sub_1B62FD26C();
  *a1 = v2;
}

void *sub_1B6C47B90(void *a1)
{
  sub_1B6C47DBC(0, &qword_1E9DD77D8, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)&v11 - v7;
  uint64_t v9 = sub_1B68C73D8(0, 6, (void (*)(long long *__return_ptr, uint64_t *))sub_1B6C47B68);
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C47D68();
  sub_1B6E33A48();
  if (v1)
  {
    swift_release();
  }
  else
  {
    sub_1B6E32D58();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

unint64_t sub_1B6C47D68()
{
  unint64_t result = qword_1E9DD77E0;
  if (!qword_1E9DD77E0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD77E0);
  }
  return result;
}

void sub_1B6C47DBC(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6C47D68();
    unint64_t v7 = a3(a1, &type metadata for Shadow.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1B6C47E20(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 1224);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_1B6C47E38(uint64_t a1)
{
  return a1;
}

uint64_t sub_1B6C48334()
{
  uint64_t result = STACK[0x618];
  if (STACK[0x618])
  {
    uint64_t v22 = STACK[0x768];
    uint64_t v23 = STACK[0x770];
    uint64_t v26 = STACK[0x758];
    uint64_t v24 = STACK[0x748];
    uint64_t v25 = STACK[0x750];
    uint64_t v20 = STACK[0x740];
    uint64_t v21 = STACK[0x760];
    uint64_t v18 = STACK[0x730];
    uint64_t v19 = STACK[0x738];
    uint64_t v17 = STACK[0x728];
    uint64_t v16 = STACK[0x720];
    uint64_t v15 = STACK[0x700];
    uint64_t v14 = STACK[0x6F8];
    uint64_t v13 = STACK[0x6F0];
    uint64_t v12 = STACK[0x6E8];
    uint64_t v8 = STACK[0x6D0];
    uint64_t v7 = STACK[0x6C8];
    uint64_t v6 = STACK[0x6C0];
    uint64_t v11 = STACK[0x6B8];
    uint64_t v10 = STACK[0x6B0];
    uint64_t v9 = STACK[0x6A8];
    uint64_t v5 = STACK[0x6A0];
    uint64_t v4 = STACK[0x698];
    uint64_t v3 = STACK[0x690];
    uint64_t v1 = STACK[0x688];
    uint64_t v2 = STACK[0x680];
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    sub_1B6B473A4(v2, v1, v3, v4, v5, v9, v10, v11, v6, v7, v8);
    sub_1B6B47354(v12, v13, v14, v15);
    sub_1B6B473A4(v16, v17, v18, v19, v20, v24, v25, v26, v21, v22, v23);
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B6C48584()
{
  swift_unownedRelease();

  return MEMORY[0x1F4186498](v0, 120, 7);
}

unsigned char *storeEnumTagSinglePayload for Shadow.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6C4865CLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Shadow.CodingKeys()
{
  return &type metadata for Shadow.CodingKeys;
}

__n128 initializeWithCopy for ShadowRenderingCommand(uint64_t a1, uint64_t a2)
{
  long long v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v2;
  long long v3 = *(_OWORD *)(a2 + 32);
  long long v4 = *(_OWORD *)(a2 + 48);
  long long v5 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v5;
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)(a1 + 48) = v4;
  __n128 result = *(__n128 *)(a2 + 96);
  long long v7 = *(_OWORD *)(a2 + 112);
  long long v8 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v8;
  *(__n128 *)(a1 + 96) = result;
  *(_OWORD *)(a1 + 112) = v7;
  return result;
}

uint64_t getEnumTagSinglePayload for ShadowRenderingCommand(uint64_t a1, int a2)
{
  if (a2 && *(unsigned char *)(a1 + 160)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0;
  }
}

uint64_t storeEnumTagSinglePayload for ShadowRenderingCommand(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(void *)(result + 152) = 0;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }
  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }
  *(unsigned char *)(result + 160) = v3;
  return result;
}

ValueMetadata *type metadata accessor for ShadowRenderingCommand()
{
  return &type metadata for ShadowRenderingCommand;
}

ValueMetadata *type metadata accessor for ShadowState()
{
  return &type metadata for ShadowState;
}

unint64_t sub_1B6C48758()
{
  unint64_t result = qword_1E9DD77F8;
  if (!qword_1E9DD77F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD77F8);
  }
  return result;
}

unint64_t sub_1B6C487B0()
{
  unint64_t result = qword_1E9DD7800;
  if (!qword_1E9DD7800)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7800);
  }
  return result;
}

unint64_t sub_1B6C48808()
{
  unint64_t result = qword_1E9DD7808;
  if (!qword_1E9DD7808)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7808);
  }
  return result;
}

uint64_t sub_1B6C48864(uint64_t a1, void *a2)
{
  long long v5 = sub_1B6D413A0(1);
  sub_1B6C4A410((uint64_t)v5, v6);
  sub_1B6C4AE4C((uint64_t)a2);
  if (v2)
  {
    swift_release();
  }
  else
  {
    type metadata accessor for GraphTypeResolver();
    uint64_t v7 = swift_allocObject();
    swift_retain();
    long long v8 = a2;
    uint64_t v9 = MEMORY[0x1E4FBC860];
    *(void *)(v7 + 32) = sub_1B67DD4B4(MEMORY[0x1E4FBC860]);
    *(void *)(v7 + 40) = sub_1B67DD6E8(v9);
    *(void *)(v7 + 48) = 0;
    *(void *)(v7 + 16) = v5;
    *(void *)(v7 + 24) = v8;
    *(unsigned char *)(v7 + 56) = a1 & 1;
    a1 = sub_1B6836968();
    uint64_t v11 = swift_bridgeObjectRetain();
    uint64_t v12 = sub_1B6C49ED0(v11);
    swift_bridgeObjectRelease();
    *(void *)&v8[OBJC_IVAR____TtC3VFX16GraphDiagnostics_rawNodesByID] = v12;
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
  }
  return a1;
}

uint64_t sub_1B6C48A80(uint64_t a1)
{
  void (*v2)(void *__return_ptr, uint64_t);
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v20;
  uint64_t v21;
  void v22[6];
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;

  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v21 = v1;
  uint64_t v2 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(v1 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                            + 152);
  char v3 = swift_retain();
  v2(v22, v3);
  long long v4 = v22[0];
  uint64_t v28 = v22[0];
  char v27 = v22[1];
  sub_1B62D8C3C((uint64_t)&v27);
  uint64_t v26 = v22[2];
  sub_1B62D8C3C((uint64_t)&v26);
  uint64_t v25 = v22[3];
  sub_1B62D8C3C((uint64_t)&v25);
  uint64_t v24 = v22[4];
  sub_1B62D8C3C((uint64_t)&v24);
  uint64_t v23 = v22[5];
  sub_1B62D8C3C((uint64_t)&v23);
  long long v5 = *(void *)(v4 + 16);
  sub_1B62D8C3C((uint64_t)&v28);
  if (*(void *)(*(void *)(v1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16) <= v5) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = *(void *)(*(void *)(v1 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
  }
  swift_retain();
  uint64_t v7 = sub_1B6D2AEA8(0, v6, v1);
  swift_release();
  long long v8 = sub_1B6C4B540(v7, (void (*)(long long *__return_ptr, uint64_t, long long *))sub_1B6C4B4DC);
  swift_bridgeObjectRelease();
  uint64_t v9 = v1;
  uint64_t v10 = *(void *)(v8 + 16);
  if (v10)
  {
    uint64_t v20 = MEMORY[0x1E4FBC860];
    sub_1B6C3C530(0, v10, 0);
    uint64_t v11 = 0;
    uint64_t v12 = v20;
    uint64_t v13 = *(void *)(v20 + 16);
    uint64_t v14 = 16 * v13;
    do
    {
      uint64_t v15 = *(void *)(v8 + v11 + 32);
      if (v15) {
        uint64_t v16 = *(void *)(v8 + v11 + 40);
      }
      else {
        uint64_t v16 = 0;
      }
      uint64_t v17 = *(void *)(v20 + 24);
      swift_retain();
      if (v13 >= v17 >> 1) {
        sub_1B6C3C530(v17 > 1, v13 + 1, 1);
      }
      *(void *)(v20 + 16) = v13 + 1;
      uint64_t v18 = v20 + v14 + v11;
      *(void *)(v18 + 32) = v15;
      *(void *)(v18 + 40) = v16;
      v11 += 16;
      ++v13;
      --v10;
    }
    while (v10);
    swift_bridgeObjectRelease();
    uint64_t v9 = v21;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v12 = MEMORY[0x1E4FBC860];
  }
  *(void *)(v9 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) = v12;
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B6C48D2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void *a7, void (*a8)(uint64_t *__return_ptr, _OWORD *, uint64_t *, uint64_t, uint64_t *), uint64_t a9, uint64_t a10)
{
  void (*v16)(void *__return_ptr, uint64_t);
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  char v21;
  char v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _OWORD v28[3];
  void v29[6];
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;

  long long v15 = *(_OWORD *)(a10 + 16);
  v28[0] = *(_OWORD *)a10;
  v28[1] = v15;
  _OWORD v28[2] = *(_OWORD *)(a10 + 32);
  uint64_t v16 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(*a7
                                                                           + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                             + 152);
  uint64_t v17 = swift_retain();
  v16(v29, v17);
  swift_release();
  uint64_t v18 = v29[0];
  char v34 = v29[1];
  uint64_t v35 = v29[0];
  sub_1B62D8C3C((uint64_t)&v34);
  int v33 = v29[2];
  sub_1B62D8C3C((uint64_t)&v33);
  char v32 = v29[3];
  sub_1B62D8C3C((uint64_t)&v32);
  uint64_t v31 = v29[4];
  sub_1B62D8C3C((uint64_t)&v31);
  uint64_t v30 = v29[5];
  sub_1B62D8C3C((uint64_t)&v30);
  uint64_t v19 = *(void *)(v18 + 8 * a1 + 32);
  sub_1B66456F8(v19);
  sub_1B62D8C3C((uint64_t)&v35);
  uint64_t v20 = (a5 >> 59) & 2 | (a5 >> 2) & 1;
  if (v20)
  {
    if (v20 == 1)
    {
      sub_1B66456F8(a5 & 0xEFFFFFFFFFFFFFFBLL);
      uint64_t v21 = sub_1B697351C(v19, a5 & 0xEFFFFFFFFFFFFFFBLL);
      sub_1B681997C(a5, (uint64_t (*)(unint64_t))sub_1B6645740);
      sub_1B6645740(v19);
      if ((v21 & 1) == 0) {
        goto LABEL_8;
      }
LABEL_6:
      swift_retain();
      return a2;
    }
    sub_1B6645740(v19);
  }
  else
  {
    sub_1B66456F8(a5);
    uint64_t v22 = sub_1B697351C(v19, a5);
    sub_1B681997C(a5, (uint64_t (*)(unint64_t))sub_1B6645740);
    sub_1B6645740(v19);
    if ((v22 & 1) == 0) {
      goto LABEL_6;
    }
  }
LABEL_8:
  uint64_t v26 = *(void *)(a10 + 8);
  if (a2)
  {
    uint64_t v24 = a2;
    uint64_t v25 = a3;
  }
  else
  {
    uint64_t v24 = 0;
    uint64_t v25 = 0;
  }
  swift_retain();
  swift_retain();
  a8(&v27, v28, &v26, a1, &v24);
  swift_release();
  swift_release();
  return v27;
}

uint64_t sub_1B6C48F80(void *a1, unint64_t a2, uint64_t *a3)
{
  void (*v4)(void *__return_ptr, uint64_t);
  uint64_t v5;
  uint64_t v6;
  int64_t v7;
  void *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  void *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char v25;
  char v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  char v30;
  unint64_t v31;
  unint64_t v32;
  void *v33;
  char isUniquelyReferenced_nonNull_native;
  void *v35;
  unint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  unint64_t v40;
  char v41;
  void *v42;
  uint64_t v43;
  uint64_t result;
  uint64_t v46;
  void *v48;
  void v49[6];
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  void *v55;

  long long v4 = *(void (**)(void *__return_ptr, uint64_t))(*a1 + 152);
  long long v5 = swift_retain();
  v4(v49, v5);
  swift_release();
  __int16 v48 = a1;
  uint64_t v6 = a1[2];
  uint64_t v7 = *(void *)(v6 + 16);
  long long v8 = (void *)MEMORY[0x1E4FBC860];
  if (v7)
  {
    uint64_t v55 = (void *)MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1B6C3C644(0, v7, 0);
    uint64_t v9 = 0;
    long long v8 = v55;
    uint64_t v10 = v55[2];
    uint64_t v11 = 2 * v10;
    do
    {
      uint64_t v12 = *(void *)(v6 + v9 * 8 + 32);
      uint64_t v13 = *(void *)(v6 + v9 * 8 + 40);
      uint64_t v55 = v8;
      uint64_t v14 = v8[3];
      long long v15 = v10 + 1;
      swift_retain();
      if (v10 >= v14 >> 1)
      {
        sub_1B6C3C644(v14 > 1, v15, 1);
        long long v8 = v55;
      }
      v8[2] = v15;
      uint64_t v16 = &v8[v11 + v9];
      v16[4] = v12;
      v16[5] = v13;
      v9 += 2;
      ++v10;
      --v7;
    }
    while (v7);
    swift_bridgeObjectRelease();
  }
  uint64_t v17 = v8[2];
  uint64_t v18 = a3;
  if (!v17)
  {
LABEL_39:
    uint64_t v55 = (void *)v49[0];
    sub_1B62D8C3C((uint64_t)&v55);
    uint64_t v54 = v49[1];
    sub_1B62D8C3C((uint64_t)&v54);
    uint64_t v53 = v49[2];
    sub_1B62D8C3C((uint64_t)&v53);
    long long v52 = v49[3];
    sub_1B62D8C3C((uint64_t)&v52);
    long long v51 = v49[4];
    sub_1B62D8C3C((uint64_t)&v51);
    uint64_t v50 = v49[5];
    sub_1B62D8C3C((uint64_t)&v50);
    return swift_bridgeObjectRelease();
  }
  uint64_t v19 = 0;
  uint64_t v20 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  uint64_t v21 = v8 + 5;
  unint64_t v46 = v8[2];
  while (1)
  {
    uint64_t v22 = *(v21 - 1);
    if (!v22) {
      goto LABEL_11;
    }
    uint64_t v23 = *v21;
    if (v19 >= *(void *)(v49[0] + 16)) {
      break;
    }
    uint64_t v24 = *(void *)(v49[0] + 8 * v19 + 32);
    sub_1B66456F8(v24);
    if (v20) {
      goto LABEL_15;
    }
LABEL_19:
    swift_retain();
    sub_1B681997C(a2, (uint64_t (*)(unint64_t))sub_1B66456F8);
    uint64_t v26 = sub_1B697351C(v24, a2);
    sub_1B681997C(a2, (uint64_t (*)(unint64_t))sub_1B6645740);
    sub_1B6645740(v24);
    if (v26) {
      goto LABEL_22;
    }
LABEL_9:
    swift_release();
LABEL_10:
    uint64_t v20 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
LABEL_11:
    ++v19;
    v21 += 2;
    if (v17 == v19) {
      goto LABEL_39;
    }
  }
  uint64_t v24 = 0x8000000000000000;
  if (!v20) {
    goto LABEL_19;
  }
LABEL_15:
  if (v20 == 1)
  {
    swift_retain();
    sub_1B681997C(a2, (uint64_t (*)(unint64_t))sub_1B66456F8);
    uint64_t v25 = sub_1B697351C(v24, a2 & 0xEFFFFFFFFFFFFFFBLL);
    sub_1B681997C(a2, (uint64_t (*)(unint64_t))sub_1B6645740);
    sub_1B6645740(v24);
    if ((v25 & 1) == 0) {
      goto LABEL_22;
    }
    goto LABEL_9;
  }
  swift_retain();
  sub_1B6645740(v24);
LABEL_22:
  char v27 = *v18;
  if (*(void *)(*v18 + 16))
  {
    uint64_t v28 = sub_1B62C1A30(v22);
    uint64_t v29 = (void *)MEMORY[0x1E4FBC860];
    if (v30)
    {
      uint64_t v29 = *(void **)(*(void *)(v27 + 56) + 8 * v28);
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    uint64_t v29 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v29 = sub_1B68C105C(0, v29[2] + 1, 1, v29);
  }
  char v32 = v29[2];
  uint64_t v31 = v29[3];
  if (v32 >= v31 >> 1) {
    uint64_t v29 = sub_1B68C105C(v31 > 1, v32 + 1, 1, v29);
  }
  v29[2] = v32 + 1;
  int v33 = &v29[3 * v32];
  v33[4] = v48;
  v33[5] = v23;
  v33[6] = v19;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v55 = (void *)*v18;
  uint64_t v35 = v55;
  *uint64_t v18 = 0x8000000000000000;
  char v36 = sub_1B62C1A30(v22);
  int v38 = v37;
  uint64_t v39 = v35[2] + ((v37 & 1) == 0);
  if (v35[3] >= v39)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_1B6ACC5DC();
    }
    goto LABEL_35;
  }
  sub_1B6AB6F98(v39, isUniquelyReferenced_nonNull_native);
  uint64_t v40 = sub_1B62C1A30(v22);
  if ((v38 & 1) == (v41 & 1))
  {
    char v36 = v40;
LABEL_35:
    uint64_t v42 = v55;
    if (v38)
    {
      uint64_t v43 = v55[7];
      swift_bridgeObjectRelease();
      *(void *)(v43 + 8 * v36) = v29;
      uint64_t v18 = a3;
    }
    else
    {
      v55[(v36 >> 6) + 8] |= 1 << v36;
      *(void *)(v42[6] + 8 * v36) = v22;
      *(void *)(v42[7] + 8 * v36) = v29;
      ++v42[2];
    }
    uint64_t v17 = v46;
    *uint64_t v18 = (uint64_t)v42;
    swift_release();
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }
  unint64_t result = sub_1B6E33838();
  __break(1u);
  return result;
}

uint64_t sub_1B6C4945C(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  void (*v5)(void *__return_ptr, uint64_t);
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  unint64_t v21;
  void *v22;
  char v23;
  unint64_t v24;
  unint64_t v25;
  void *v26;
  uint64_t v27;
  char isUniquelyReferenced_nonNull_native;
  void *v29;
  unint64_t v30;
  char v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  char v35;
  void *v36;
  uint64_t v37;
  uint64_t result;
  uint64_t v39;
  void v41[6];
  void v42[6];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;

  uint64_t v4 = a1;
  long long v5 = *(void (**)(void *__return_ptr, uint64_t))(**(void **)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                            + 152);
  uint64_t v6 = swift_retain();
  v5(v41, v6);
  uint64_t v7 = swift_release();
  v5(v42, v7);
  long long v8 = v42[0];
  uint64_t v53 = v42[1];
  uint64_t v54 = v42[0];
  sub_1B62D8C3C((uint64_t)&v53);
  long long v52 = v42[2];
  sub_1B62D8C3C((uint64_t)&v52);
  long long v51 = v42[3];
  sub_1B62D8C3C((uint64_t)&v51);
  uint64_t v50 = v42[4];
  sub_1B62D8C3C((uint64_t)&v50);
  uint64_t v49 = v42[5];
  sub_1B62D8C3C((uint64_t)&v49);
  uint64_t v9 = *(void *)(v8 + 16);
  sub_1B62D8C3C((uint64_t)&v54);
  if (*(void *)(*(void *)(v4 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16) > v9) {
    uint64_t v9 = *(void *)(*(void *)(v4 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs) + 16);
  }
  swift_retain();
  uint64_t v10 = sub_1B6D2AEA8(0, v9, v4);
  swift_release();
  uint64_t v11 = *(void *)(v10 + 16);
  if (!v11)
  {
LABEL_35:
    __int16 v48 = (void *)v41[0];
    sub_1B62D8C3C((uint64_t)&v48);
    uint64_t v47 = v41[1];
    sub_1B62D8C3C((uint64_t)&v47);
    unint64_t v46 = v41[2];
    sub_1B62D8C3C((uint64_t)&v46);
    unint64_t v45 = v41[3];
    sub_1B62D8C3C((uint64_t)&v45);
    uint64_t v44 = v41[4];
    sub_1B62D8C3C((uint64_t)&v44);
    uint64_t v43 = v41[5];
    sub_1B62D8C3C((uint64_t)&v43);
    return swift_bridgeObjectRelease();
  }
  uint64_t v12 = 0;
  uint64_t v13 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
  uint64_t v39 = *(void *)(v10 + 16);
  uint64_t v14 = (uint64_t *)(v10 + 40);
  while (1)
  {
    long long v15 = *(v14 - 1);
    if (!v15) {
      goto LABEL_7;
    }
    uint64_t v16 = *v14;
    if (v12 >= *(void *)(v41[0] + 16)) {
      break;
    }
    uint64_t v17 = *(void *)(v41[0] + 8 * v12 + 32);
    sub_1B66456F8(v17);
    if (v13) {
      goto LABEL_11;
    }
LABEL_15:
    swift_retain();
    sub_1B681997C(a2, (uint64_t (*)(unint64_t))sub_1B66456F8);
    uint64_t v19 = sub_1B697351C(v17, a2);
    sub_1B681997C(a2, (uint64_t (*)(unint64_t))sub_1B6645740);
    sub_1B6645740(v17);
    if (v19) {
      goto LABEL_18;
    }
LABEL_5:
    swift_release();
LABEL_6:
    uint64_t v13 = (a2 >> 59) & 2 | (a2 >> 2) & 1;
LABEL_7:
    ++v12;
    v14 += 2;
    if (v11 == v12) {
      goto LABEL_35;
    }
  }
  uint64_t v17 = 0x8000000000000000;
  if (!v13) {
    goto LABEL_15;
  }
LABEL_11:
  if (v13 == 1)
  {
    swift_retain();
    sub_1B681997C(a2, (uint64_t (*)(unint64_t))sub_1B66456F8);
    uint64_t v18 = sub_1B697351C(v17, a2 & 0xEFFFFFFFFFFFFFFBLL);
    sub_1B681997C(a2, (uint64_t (*)(unint64_t))sub_1B6645740);
    sub_1B6645740(v17);
    if ((v18 & 1) == 0) {
      goto LABEL_18;
    }
    goto LABEL_5;
  }
  swift_retain();
  sub_1B6645740(v17);
LABEL_18:
  uint64_t v20 = *a3;
  if (*(void *)(*a3 + 16))
  {
    uint64_t v21 = sub_1B62C1A30(v15);
    uint64_t v22 = (void *)MEMORY[0x1E4FBC860];
    if (v23)
    {
      uint64_t v22 = *(void **)(*(void *)(v20 + 56) + 8 * v21);
      swift_bridgeObjectRetain();
    }
  }
  else
  {
    uint64_t v22 = (void *)MEMORY[0x1E4FBC860];
  }
  swift_retain();
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v22 = sub_1B68C1500(0, v22[2] + 1, 1, v22);
  }
  uint64_t v25 = v22[2];
  uint64_t v24 = v22[3];
  if (v25 >= v24 >> 1) {
    uint64_t v22 = sub_1B68C1500(v24 > 1, v25 + 1, 1, v22);
  }
  v22[2] = v25 + 1;
  uint64_t v26 = &v22[3 * v25];
  char v27 = v4;
  void v26[4] = v4;
  v26[5] = v16;
  _DWORD v26[6] = v12;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  __int16 v48 = (void *)*a3;
  uint64_t v29 = v48;
  *a3 = 0x8000000000000000;
  uint64_t v30 = sub_1B62C1A30(v15);
  char v32 = v31;
  int v33 = v29[2] + ((v31 & 1) == 0);
  if (v29[3] >= v33)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      sub_1B6ACCBA0();
    }
    goto LABEL_31;
  }
  sub_1B6AB7A28(v33, isUniquelyReferenced_nonNull_native);
  char v34 = sub_1B62C1A30(v15);
  if ((v32 & 1) == (v35 & 1))
  {
    uint64_t v30 = v34;
LABEL_31:
    char v36 = v48;
    if (v32)
    {
      unint64_t v37 = v48[7];
      swift_bridgeObjectRelease();
      *(void *)(v37 + 8 * v30) = v22;
    }
    else
    {
      v48[(v30 >> 6) + 8] |= 1 << v30;
      *(void *)(v36[6] + 8 * v30) = v15;
      *(void *)(v36[7] + 8 * v30) = v22;
      ++v36[2];
    }
    uint64_t v4 = v27;
    *a3 = (uint64_t)v36;
    swift_release();
    swift_bridgeObjectRelease();
    uint64_t v11 = v39;
    goto LABEL_6;
  }
  unint64_t result = sub_1B6E33838();
  __break(1u);
  return result;
}

uint64_t sub_1B6C49948@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  sub_1B6C4B450(0, &qword_1E9DD13C8, (void (*)(uint64_t))type metadata accessor for GraphError);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (void *)((char *)v32 - v6);
  long long v8 = *(__objc2_class ***)(a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_raw);
  type metadata accessor for ImportErrorNode(0);
  uint64_t v9 = swift_dynamicCastClass();
  if (v9)
  {
    if (*(void *)(v9 + OBJC_IVAR____TtC3VFX15ImportErrorNode_message + 8))
    {
      v32[0] = 0;
      v32[1] = 0xE000000000000000;
      swift_retain();
      swift_bridgeObjectRetain();
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      strcpy((char *)v32, "Import error: ");
      HIBYTE(v32[1]) = -18;
      sub_1B6E31948();
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v11 = v32[0];
      unint64_t v10 = v32[1];
      *uint64_t v7 = a1;
      uint64_t v12 = (int *)type metadata accessor for GraphError();
      uint64_t v13 = (char *)v7 + v12[5];
      uint64_t v14 = a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
      uint64_t v15 = sub_1B6E31118();
      uint64_t v16 = *(void *)(v15 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v16 + 16))(v13, v14, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
    }
    else
    {
      *uint64_t v7 = a1;
      uint64_t v12 = (int *)type metadata accessor for GraphError();
      uint64_t v20 = (char *)v7 + v12[5];
      uint64_t v21 = a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
      uint64_t v22 = sub_1B6E31118();
      uint64_t v23 = *(void *)(v22 - 8);
      (*(void (**)(char *, uint64_t, uint64_t))(v23 + 16))(v20, v21, v22);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0, 1, v22);
      unint64_t v10 = 0xEC000000726F7272;
      uint64_t v11 = 0x652074726F706D49;
    }
    uint64_t v24 = (char *)v7 + v12[6];
    *(void *)uint64_t v24 = 1;
    v24[8] = -96;
    uint64_t v25 = (void *)((char *)v7 + v12[7]);
    *uint64_t v25 = v11;
    v25[1] = v10;
    type metadata accessor for GraphError();
    (*(void (**)(void *, void, uint64_t, int *))(*((void *)v12 - 1) + 56))(v7, 0, 1, v12);
    sub_1B6C49E50((uint64_t)v7, (uint64_t)a2);
    return swift_retain();
  }
  else if (*v8 == _TtC3VFX17DecodingErrorNode)
  {
    *a2 = a1;
    uint64_t v26 = (int *)type metadata accessor for GraphError();
    char v27 = (char *)a2 + v26[5];
    uint64_t v28 = a1 + OBJC_IVAR____TtC3VFX13AuthoringNode_authoringID;
    uint64_t v29 = sub_1B6E31118();
    uint64_t v30 = *(void *)(v29 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v30 + 16))(v27, v28, v29);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0, 1, v29);
    uint64_t v31 = (char *)a2 + v26[6];
    *(void *)uint64_t v31 = 1;
    v31[8] = -96;
    *(_OWORD *)((char *)a2 + v26[7]) = xmmword_1B6EB91B0;
    (*(void (**)(void *, void, uint64_t, int *))(*((void *)v26 - 1) + 56))(a2, 0, 1, v26);
    return swift_retain();
  }
  else
  {
    uint64_t v17 = type metadata accessor for GraphError();
    uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56);
    return v18(a2, 1, 1, v17);
  }
}

uint64_t sub_1B6C49E50(uint64_t a1, uint64_t a2)
{
  sub_1B6C4B450(0, &qword_1E9DD13C8, (void (*)(uint64_t))type metadata accessor for GraphError);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B6C49ED0(uint64_t a1)
{
  sub_1B6C4B1B0();
  uint64_t v3 = v2;
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v56 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v6, v7);
  uint64_t v9 = (char *)&v47 - v8;
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v55 = (char *)&v47 - v12;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v54 = a1 + 64;
  uint64_t v60 = MEMORY[0x1E4FBC868];
  uint64_t v14 = -1 << *(unsigned char *)(a1 + 32);
  if (-v14 < 64) {
    uint64_t v15 = ~(-1 << -(char)v14);
  }
  else {
    uint64_t v15 = -1;
  }
  unint64_t v16 = v15 & v13;
  uint64_t v47 = -1 << *(unsigned char *)(a1 + 32);
  unint64_t v17 = (unint64_t)(63 - v14) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v57 = 0;
  uint64_t v52 = a1;
  int64_t v53 = v17;
  uint64_t v48 = a1 + 112;
  unint64_t v49 = v17 - 6;
  uint64_t v50 = v9;
  uint64_t v51 = v3;
  if (v16) {
    goto LABEL_7;
  }
LABEL_8:
  uint64_t v19 = v57 + 1;
  if (v57 + 1 < v53)
  {
    unint64_t v20 = *(void *)(v54 + 8 * v19);
    if (v20) {
      goto LABEL_22;
    }
    uint64_t v19 = v57 + 2;
    if (v57 + 2 < v53)
    {
      unint64_t v20 = *(void *)(v54 + 8 * v19);
      if (v20) {
        goto LABEL_22;
      }
      uint64_t v19 = v57 + 3;
      if (v57 + 3 < v53)
      {
        unint64_t v20 = *(void *)(v54 + 8 * v19);
        if (v20) {
          goto LABEL_22;
        }
        uint64_t v19 = v57 + 4;
        if (v57 + 4 < v53)
        {
          unint64_t v20 = *(void *)(v54 + 8 * v19);
          if (v20) {
            goto LABEL_22;
          }
          uint64_t v19 = v57 + 5;
          if (v57 + 5 < v53)
          {
            unint64_t v20 = *(void *)(v54 + 8 * v19);
            if (!v20)
            {
              uint64_t v21 = v57;
              do
              {
                if (v49 == v21) {
                  goto LABEL_37;
                }
                unint64_t v20 = *(void *)(v48 + 8 * v21++);
              }
              while (!v20);
              uint64_t v19 = v21 + 5;
            }
LABEL_22:
            uint64_t v57 = v19;
            uint64_t v58 = (v20 - 1) & v20;
            for (unint64_t i = __clz(__rbit64(v20)) + (v19 << 6); ; unint64_t i = __clz(__rbit64(v16)) | (v57 << 6))
            {
              uint64_t v22 = *(void *)(a1 + 48);
              uint64_t v23 = sub_1B6E31118();
              uint64_t v24 = *(void *)(v23 - 8);
              uint64_t v25 = v24;
              uint64_t v26 = *(void *)(v24 + 72);
              uint64_t v27 = (uint64_t)v55;
              (*(void (**)(char *, unint64_t, uint64_t))(v24 + 16))(v55, v22 + v26 * i, v23);
              uint64_t v28 = *(void *)(a1 + 56) + 16 * i;
              uint64_t v29 = *(void **)v28;
              char v30 = *(unsigned char *)(v28 + 8);
              uint64_t v31 = v27 + *(int *)(v3 + 48);
              *(void *)uint64_t v31 = v29;
              *(unsigned char *)(v31 + 8) = v30;
              sub_1B6C4B224(v27, (uint64_t)v9, (uint64_t (*)(void))sub_1B6C4B1B0);
              char v32 = &v9[*(int *)(v3 + 48)];
              int v33 = *(void **)v32;
              if (v32[8] == 1)
              {
                uint64_t v59 = *(void **)v32;
                sub_1B683DFDC(v29, v30);
                sub_1B666BD6C();
                swift_willThrowTypedImpl();
                sub_1B6C4B370((uint64_t)v9, (uint64_t (*)(void))sub_1B6C4B1B0);
                unint64_t v16 = v58;
                if (!v58) {
                  goto LABEL_8;
                }
              }
              else
              {
                char v34 = *(void (**)(char *, char *, uint64_t))(v25 + 32);
                v34(v56, v9, v23);
                uint64_t v35 = v60;
                unint64_t v36 = *(void *)(v60 + 16);
                if (*(void *)(v60 + 24) <= v36)
                {
                  uint64_t v37 = v36 + 1;
                  sub_1B683DFDC(v29, v30);
                  sub_1B683DFDC(v33, 0);
                  sub_1B6AB7CF0(v37, 1);
                  uint64_t v35 = v60;
                }
                else
                {
                  sub_1B683DFDC(v29, v30);
                  sub_1B683DFDC(v33, 0);
                }
                unint64_t v16 = v58;
                sub_1B6C4B328((unint64_t *)&qword_1EB97D9A0, MEMORY[0x1E4F27990]);
                uint64_t v38 = sub_1B6E315A8();
                uint64_t v39 = v35 + 64;
                uint64_t v40 = -1 << *(unsigned char *)(v35 + 32);
                unint64_t v41 = v38 & ~v40;
                unint64_t v42 = v41 >> 6;
                if (((-1 << v41) & ~*(void *)(v35 + 64 + 8 * (v41 >> 6))) != 0)
                {
                  unint64_t v43 = __clz(__rbit64((-1 << v41) & ~*(void *)(v35 + 64 + 8 * (v41 >> 6)))) | v41 & 0x7FFFFFFFFFFFFFC0;
                }
                else
                {
                  unint64_t v44 = (unint64_t)(63 - v40) >> 6;
                  do
                  {
                    if (v42 + 1 == v44) {
                      unint64_t v42 = 0;
                    }
                    else {
                      ++v42;
                    }
                    uint64_t v45 = *(void *)(v39 + 8 * v42);
                  }
                  while (v45 == -1);
                  unint64_t v43 = __clz(__rbit64(~v45)) + (v42 << 6);
                }
                *(void *)(v39 + ((v43 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << v43;
                v34((char *)(*(void *)(v35 + 48) + v43 * v26), v56, v23);
                *(void *)(*(void *)(v35 + 56) + 8 * v43) = v33;
                ++*(void *)(v35 + 16);
                sub_1B67FAAC8(v33, 0);
                uint64_t v3 = v51;
                a1 = v52;
                uint64_t v9 = v50;
                if (!v16) {
                  goto LABEL_8;
                }
              }
LABEL_7:
              uint64_t v58 = (v16 - 1) & v16;
            }
          }
        }
      }
    }
  }
LABEL_37:
  sub_1B62BB588();
  return v60;
}

uint64_t sub_1B6C4A410(uint64_t a1, uint64_t a2)
{
  if (qword_1E9DCC4A8 != -1) {
    a1 = swift_once();
  }
  MEMORY[0x1F4188790](a1, a2);
  LOBYTE(v24) = v3;
  unint64_t v25 = v4;
  char v26 = v5;
  uint64_t v27 = sub_1B6C4A700;
  uint64_t v28 = 0;
  unint64_t v6 = MEMORY[0x1E4FBC860];
  sub_1B68B708C((uint64_t)sub_1B6C4B3D0, (uint64_t)v23, v3, v4, v5, MEMORY[0x1E4FBC860]);
  uint64_t v7 = sub_1B68C70AC();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(void *)(v2 + 24) = v7;
  swift_bridgeObjectRelease();
  char v32 = sub_1B67F4EA0(v6);
  MEMORY[0x1F4188790](v32, v8);
  uint64_t v28 = 0x1000000000000000;
  uint64_t v29 = &v32;
  MEMORY[0x1F4188790](v9, v10);
  uint64_t v24 = sub_1B6C4B428;
  unint64_t v25 = v11;
  uint64_t v30 = sub_1B68C967C(v6);
  uint64_t v31 = v12;
  sub_1B68B96F0((uint64_t)sub_1B683DFF0, (uint64_t)v23, 1, 0x1000000000000000uLL, 0, v6, (uint64_t)&v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v13 = swift_bridgeObjectRetain();
  uint64_t v14 = sub_1B6808A2C(v13);
  uint64_t v15 = swift_bridgeObjectRelease_n();
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v28 = v14;
  MEMORY[0x1F4188790](v17, v18);
  uint64_t v24 = sub_1B6C4B434;
  unint64_t v25 = v19;
  unint64_t v20 = MEMORY[0x1E4FBC860];
  uint64_t v30 = sub_1B68C967C(MEMORY[0x1E4FBC860]);
  uint64_t v31 = v21;
  sub_1B68B96F0((uint64_t)sub_1B683EDD4, (uint64_t)v23, 1, 0x1000000000000000uLL, 0, v20, (uint64_t)&v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C4A700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, long long *a3@<X3>, uint64_t a4@<X8>)
{
  void (*v13)(void *__return_ptr);
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t result;
  long long v23;
  void v24[6];
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  sub_1B6C4B450(0, (unint64_t *)&qword_1EB97D9C0, MEMORY[0x1E4F27990]);
  MEMORY[0x1F4188790](v8 - 8, v9);
  unint64_t v11 = (char *)&v24[-2] - v10;
  long long v12 = *a3;
  if (*(void *)a3) {
    goto LABEL_4;
  }
  uint64_t v13 = *(void (**)(void *__return_ptr))(**(void **)(*(void *)(a1 + 8)
                                                                  + OBJC_IVAR____TtC3VFX13AuthoringNode_raw)
                                                    + 152);
  uint64_t v23 = *a3;
  v13(v24);
  uint64_t v14 = v24[0];
  uint64_t v29 = v24[1];
  uint64_t v30 = v24[0];
  sub_1B62D8C3C((uint64_t)&v29);
  uint64_t v28 = v24[2];
  sub_1B62D8C3C((uint64_t)&v28);
  uint64_t v27 = v24[3];
  sub_1B62D8C3C((uint64_t)&v27);
  char v26 = v24[4];
  sub_1B62D8C3C((uint64_t)&v26);
  unint64_t v25 = v24[5];
  sub_1B62D8C3C((uint64_t)&v25);
  uint64_t v15 = *(void *)(v14 + 8 * a2 + 32);
  sub_1B66456F8(v15);
  sub_1B62D8C3C((uint64_t)&v30);
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = 0x8000000000000008;
  uint64_t v17 = sub_1B697351C(v15, v16 | 0x6000000000000000);
  swift_release();
  sub_1B6645740(v15);
  long long v12 = v23;
  if ((v17 & 1) == 0)
  {
LABEL_4:
    *(_OWORD *)a4 = v12;
    return swift_retain();
  }
  else
  {
    type metadata accessor for ImplicitNoopNode(0);
    uint64_t v18 = (void *)swift_allocObject();
    unint64_t v19 = MEMORY[0x1E4FBC860];
    v18[3] = 0;
    v18[4] = 0;
    _OWORD v18[2] = v19;
    sub_1B6E31108();
    unint64_t v20 = sub_1B6E31118();
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56))(v11, 1, 1, v20);
    type metadata accessor for AuthoringNode();
    swift_allocObject();
    uint64_t v21 = sub_1B6CE3580((uint64_t)v18, v19, (uint64_t)v11, 0, 0xF000000000000000);
    unint64_t result = swift_release();
    *(void *)a4 = v21;
    *(void *)(a4 + 8) = 0;
  }
  return result;
}

uint64_t sub_1B6C4A970(uint64_t a1, uint64_t a2)
{
  sub_1B6C4B450(0, (unint64_t *)&qword_1EB97D9C0, MEMORY[0x1E4F27990]);
  MEMORY[0x1F4188790](v4 - 8, v5);
  unint64_t v46 = (char *)&v44 - v6;
  uint64_t v7 = *(void *)(a1 + 8);
  uint64_t v8 = *(void **)(a1 + 40);
  uint64_t v9 = OBJC_IVAR____TtC3VFX13AuthoringNode_raw;
  swift_retain();
  swift_retain();
  char v10 = sub_1B6C0FB00();
  swift_release();
  if ((v10 & 1) == 0) {
    return swift_release();
  }
  uint64_t v45 = v8;
  unint64_t v11 = (void *)MEMORY[0x1E4FBC860];
  if (*(void *)(a2 + 16))
  {
    unint64_t v12 = sub_1B62C1A30(v7);
    if (v13)
    {
      uint64_t v14 = *(void *)(*(void *)(a2 + 56) + 8 * v12);
      swift_bridgeObjectRetain();
    }
    else
    {
      uint64_t v14 = MEMORY[0x1E4FBC860];
    }
  }
  else
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
  }
  int64_t v16 = *(void *)(v14 + 16);
  uint64_t v47 = v7;
  if (v16)
  {
    unint64_t v44 = (uint64_t *)v9;
    uint64_t v48 = v11;
    sub_1B62B7EB4(0, v16, 0);
    uint64_t v17 = v48;
    unint64_t v18 = v48[2];
    uint64_t v19 = 40;
    do
    {
      uint64_t v20 = *(void *)(v14 + v19);
      uint64_t v48 = v17;
      unint64_t v21 = v17[3];
      if (v18 >= v21 >> 1)
      {
        sub_1B62B7EB4(v21 > 1, v18 + 1, 1);
        uint64_t v17 = v48;
      }
      v17[2] = v18 + 1;
      v17[v18 + 4] = v20;
      v19 += 24;
      ++v18;
      --v16;
    }
    while (v16);
    uint64_t v22 = swift_bridgeObjectRelease();
    uint64_t v7 = v47;
    uint64_t v9 = (uint64_t)v44;
  }
  else
  {
    uint64_t v22 = swift_bridgeObjectRelease();
    uint64_t v17 = (void *)MEMORY[0x1E4FBC860];
  }
  (*(void (**)(void **__return_ptr, uint64_t))(**(void **)(v7 + v9) + 152))(&v48, v22);
  uint64_t v23 = v49;
  uint64_t v59 = v49;
  uint64_t v58 = v48;
  sub_1B62D8C3C((uint64_t)&v58);
  uint64_t v57 = v50;
  sub_1B62D8C3C((uint64_t)&v57);
  uint64_t v56 = v51;
  sub_1B62D8C3C((uint64_t)&v56);
  uint64_t v55 = v52;
  sub_1B62D8C3C((uint64_t)&v55);
  uint64_t v54 = v53;
  sub_1B62D8C3C((uint64_t)&v54);
  uint64_t v24 = *(void *)(v23 + 16);
  if (v24)
  {
    uint64_t v25 = 0;
    uint64_t v26 = v23 + 32;
    unint64_t v44 = v17 + 6;
    do
    {
      unint64_t v27 = *(void *)(v26 + 8 * v25);
      uint64_t v28 = swift_allocObject();
      *(void *)(v28 + 16) = 0x8000000000000008;
      unint64_t v29 = v28 | 0x6000000000000000;
      sub_1B66456F8(v27);
      LOBYTE(v29) = sub_1B697351C(v27, v29);
      swift_release();
      if (v29)
      {
        uint64_t v30 = v17[2];
        if (!v30) {
          goto LABEL_23;
        }
        if (v17[4] != v25)
        {
          if (v30 == 1) {
            goto LABEL_23;
          }
          if (v17[5] != v25)
          {
            uint64_t v41 = v30 - 2;
            if (!v41)
            {
LABEL_23:
              type metadata accessor for ImplicitDoNode(0);
              uint64_t v31 = (void *)swift_allocObject();
              v31[4] = 0;
              uint64_t v32 = MEMORY[0x1E4FBC860];
              v31[2] = MEMORY[0x1E4FBC860];
              v31[3] = 0;
              sub_1B6E31108();
              uint64_t v33 = sub_1B6E31118();
              uint64_t v34 = (uint64_t)v46;
              (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 56))(v46, 1, 1, v33);
              type metadata accessor for AuthoringNode();
              swift_allocObject();
              uint64_t v35 = sub_1B6CE3580((uint64_t)v31, v32, v34, 0, 0xF000000000000000);
              swift_release();
              uint64_t v36 = OBJC_IVAR____TtC3VFX13AuthoringNode_inputs;
              uint64_t v37 = *(void **)(v35 + OBJC_IVAR____TtC3VFX13AuthoringNode_inputs);
              swift_retain();
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v35 + v36) = v37;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                uint64_t v37 = sub_1B6C16864(v37);
                *(void *)(v35 + v36) = v37;
              }
              uint64_t v39 = v45;
              v37[4] = v47;
              v37[5] = v25;
              swift_release();
              uint64_t v40 = swift_retain();
              MEMORY[0x1BA9B3870](v40);
              if (*(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x10) >= *(void *)((*v39 & 0xFFFFFFFFFFFFFF8) + 0x18) >> 1) {
                sub_1B6E31C78();
              }
              sub_1B6E31CC8();
              sub_1B6E31C48();
              sub_1B6645740(v27);
              swift_release();
              goto LABEL_18;
            }
            unint64_t v42 = v44;
            while (1)
            {
              uint64_t v43 = *v42++;
              if (v43 == v25) {
                break;
              }
              if (!--v41) {
                goto LABEL_23;
              }
            }
          }
        }
      }
      sub_1B6645740(v27);
LABEL_18:
      ++v25;
    }
    while (v25 != v24);
  }
  sub_1B62D8C3C((uint64_t)&v59);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1B6C4AE4C(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v9 = a1;
  uint64_t v10 = v3;
  v7[2] = sub_1B6C4B28C;
  v7[3] = &v8;
  unint64_t v4 = MEMORY[0x1E4FBC860];
  v11[0] = sub_1B68C967C(MEMORY[0x1E4FBC860]);
  v11[1] = v5;
  sub_1B68B96F0((uint64_t)sub_1B678FEB4, (uint64_t)v7, 1, 0x1000000000000000uLL, 0, v4, (uint64_t)v11);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2) {
    __break(1u);
  }
  return result;
}

void sub_1B6C4AF34(uint64_t a1, uint64_t a2)
{
  sub_1B6C4B450(0, &qword_1E9DD13C8, (void (*)(uint64_t))type metadata accessor for GraphError);
  MEMORY[0x1F4188790](v4 - 8, v5);
  uint64_t v7 = (uint64_t *)((char *)&v21 - v6);
  uint64_t v8 = type metadata accessor for GraphError();
  uint64_t v9 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v10);
  unint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B6C49948(*(void *)(a1 + 8), v7);
  if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v9 + 48))(v7, 1, v8) == 1)
  {
    sub_1B6C4B2B0((uint64_t)v7);
  }
  else
  {
    sub_1B6C4B224((uint64_t)v7, (uint64_t)v12, (uint64_t (*)(void))type metadata accessor for GraphError);
    sub_1B6C4B328((unint64_t *)&qword_1E9DD7F00, (void (*)(uint64_t))type metadata accessor for GraphError);
    char v13 = (void *)swift_allocError();
    sub_1B683DC54((uint64_t)v12, v14);
    uint64_t v15 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
    int64_t v16 = *(void **)(a2 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
    id v17 = v13;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(a2 + v15) = v16;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      int64_t v16 = sub_1B68C1084(0, v16[2] + 1, 1, v16);
      *(void *)(a2 + v15) = v16;
    }
    unint64_t v20 = v16[2];
    unint64_t v19 = v16[3];
    if (v20 >= v19 >> 1)
    {
      int64_t v16 = sub_1B68C1084(v19 > 1, v20 + 1, 1, v16);
      *(void *)(a2 + v15) = v16;
    }
    v16[2] = v20 + 1;
    v16[v20 + 4] = v13;
    sub_1B6C4B370((uint64_t)v12, (uint64_t (*)(void))type metadata accessor for GraphError);
  }
}

void sub_1B6C4B1B0()
{
  if (!qword_1E9DD7810)
  {
    sub_1B6E31118();
    sub_1B67FAA44();
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9DD7810);
    }
  }
}

uint64_t sub_1B6C4B224(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 32))(a2, a1, v5);
  return a2;
}

void sub_1B6C4B28C(uint64_t a1)
{
  sub_1B6C4AF34(a1, *(void *)(v1 + 16));
}

uint64_t sub_1B6C4B2A8(uint64_t *a1, unint64_t a2, uint64_t *a3)
{
  return sub_1B6C4945C(*a1, a2, a3);
}

uint64_t sub_1B6C4B2B0(uint64_t a1)
{
  sub_1B6C4B450(0, &qword_1E9DD13C8, (void (*)(uint64_t))type metadata accessor for GraphError);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(a1, v2);
  return a1;
}

uint64_t sub_1B6C4B328(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6C4B370(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1B6C4B3D0@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  long long v4 = a1[1];
  v6[0] = *a1;
  v6[1] = v4;
  _OWORD v6[2] = a1[2];
  uint64_t result = sub_1B6C48A80((uint64_t)v6);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1B6C4B428(uint64_t *a1)
{
  return sub_1B6C4945C(*a1, *(void *)(v1 + 16), *(uint64_t **)(v1 + 24));
}

uint64_t sub_1B6C4B434(uint64_t a1)
{
  return sub_1B6C4A970(a1, *(void *)(v1 + 16));
}

void sub_1B6C4B450(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1B6E324B8();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1B6C4B4A4()
{
  sub_1B678FC34(*(void *)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B6C4B4DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  void (*v9)(uint64_t *__return_ptr, _OWORD *, uint64_t *, uint64_t, uint64_t *);
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  uint64_t v13;
  long long v14;
  uint64_t result;
  uint64_t v16;
  _OWORD v17[3];

  uint64_t v5 = *(unsigned __int8 *)(v3 + 16);
  unint64_t v6 = *(void *)(v3 + 24);
  uint64_t v7 = *(unsigned __int8 *)(v3 + 32);
  uint64_t v8 = *(void **)(v3 + 40);
  uint64_t v9 = *(void (**)(uint64_t *__return_ptr, _OWORD *, uint64_t *, uint64_t, uint64_t *))(v3 + 48);
  uint64_t v10 = *(void *)(v3 + 56);
  uint64_t v11 = *(_OWORD **)(v3 + 64);
  char v13 = *a2;
  unint64_t v12 = a2[1];
  uint64_t v14 = v11[1];
  v17[0] = *v11;
  v17[1] = v14;
  v17[2] = v11[2];
  uint64_t result = sub_1B6C48D2C(a1, v13, v12, v5, v6, v7, v8, v9, v10, (uint64_t)v17);
  *a3 = result;
  a3[1] = v16;
  return result;
}

uint64_t sub_1B6C4B540(uint64_t a1, void (*a2)(long long *__return_ptr, uint64_t, long long *))
{
  uint64_t v15 = MEMORY[0x1E4FBC860];
  sub_1B6C3C5C4(0, 0, 0);
  uint64_t v4 = v15;
  uint64_t v5 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain();
  if (v5)
  {
    uint64_t v6 = 0;
    uint64_t v7 = a1 + 32;
    do
    {
      long long v13 = *(_OWORD *)(v7 + 16 * v6);
      swift_retain();
      a2(&v14, v6, &v13);
      swift_release();
      long long v8 = v14;
      uint64_t v15 = v4;
      unint64_t v10 = *(void *)(v4 + 16);
      unint64_t v9 = *(void *)(v4 + 24);
      if (v10 >= v9 >> 1)
      {
        long long v12 = v14;
        sub_1B6C3C5C4(v9 > 1, v10 + 1, 1);
        long long v8 = v12;
        uint64_t v4 = v15;
      }
      ++v6;
      *(void *)(v4 + 16) = v10 + 1;
      *(_OWORD *)(v4 + 16 * v10 + 32) = v8;
    }
    while (v5 != v6);
  }
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B6C4B674(char *a1, unsigned __int8 *a2)
{
  return sub_1B6B47610(*a1, *a2);
}

void sub_1B6C4B680(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE100000000000000;
  uint64_t v4 = 0x6C6174656DLL;
  if (v2 != 1) {
    uint64_t v4 = 0x7466697773;
  }
  BOOL v5 = v2 == 0;
  if (*v1) {
    uint64_t v6 = v4;
  }
  else {
    uint64_t v6 = 99;
  }
  if (!v5) {
    unint64_t v3 = 0xE500000000000000;
  }
  *a1 = v6;
  a1[1] = v3;
}

uint64_t sub_1B6C4B6CC()
{
  return sub_1B6E31AF8();
}

uint64_t sub_1B6C4B71C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C4B7AC()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C4B828()
{
  return sub_1B6E33988();
}

void sub_1B6C4B8B4(void *a1@<X8>)
{
  *a1 = &unk_1F0FA62C0;
}

uint64_t sub_1B6C4B8C4()
{
  uint64_t v1 = 0x4C28207466697753;
  if (*v0 == 1) {
    uint64_t v1 = 0x6C6174654DLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 67;
  }
}

uint64_t sub_1B6C4B91C()
{
  sub_1B6906CE8(v0, (uint64_t)&v8);
  switch(v9)
  {
    case 1:
      v7[0] = 0;
      v7[1] = 0xE000000000000000;
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      unint64_t v1 = 0xD000000000000013;
      int v2 = "Compilation error: ";
      goto LABEL_8;
    case 2:
      unint64_t v3 = v8;
      swift_getErrorValue();
      id v4 = v3;
      uint64_t v5 = sub_1B6E33868();

      return v5;
    case 3:
      strcpy((char *)v7, "link error: ");
      BYTE5(v7[1]) = 0;
      HIWORD(v7[1]) = -5120;
      goto LABEL_9;
    case 4:
      v7[0] = 0;
      v7[1] = 0xE000000000000000;
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      unint64_t v1 = 0xD000000000000012;
      int v2 = "image load error: ";
      goto LABEL_8;
    case 5:
      v7[0] = 0;
      v7[1] = 0xE000000000000000;
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      unint64_t v1 = 0xD000000000000011;
      int v2 = "symbol not found ";
      goto LABEL_8;
    default:
      v7[0] = 0;
      v7[1] = 0xE000000000000000;
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      unint64_t v1 = 0xD000000000000015;
      int v2 = "Serialization error: ";
LABEL_8:
      v7[0] = v1;
      v7[1] = (unint64_t)(v2 - 32) | 0x8000000000000000;
LABEL_9:
      sub_1B6E31948();
      return v7[0];
  }
}

uint64_t sub_1B6C4BB00()
{
  sub_1B6906CE8(v0, (uint64_t)v2);
  return sub_1B6C4B91C();
}

uint64_t sub_1B6C4BB38()
{
  uint64_t result = sub_1B6C4BB5C();
  qword_1E9DD7820 = result;
  *(void *)algn_1E9DD7828 = v1;
  return result;
}

uint64_t sub_1B6C4BB5C()
{
  uint64_t v26 = *MEMORY[0x1E4F143B8];
  uint64_t v0 = sub_1B6E30F48();
  uint64_t v1 = *(void *)(v0 - 8);
  MEMORY[0x1F4188790](v0, v2);
  id v4 = (char *)v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v5, v6);
  long long v8 = (char *)v23 - v7;
  char v9 = self;
  id v10 = objc_msgSend(v9, sel_defaultManager);
  id v11 = objc_msgSend(v10, sel_temporaryDirectory);

  sub_1B6E30EE8();
  sub_1B6E30EB8();
  long long v12 = *(void (**)(char *, uint64_t))(v1 + 8);
  v12(v4, v0);
  uint64_t v13 = sub_1B6E30EF8();
  v12(v8, v0);
  id v14 = objc_msgSend(v9, sel_defaultManager);
  uint64_t v15 = (void *)sub_1B6E31768();
  id v24 = 0;
  LODWORD(v8) = objc_msgSend(v14, sel_createDirectoryAtPath_withIntermediateDirectories_attributes_error_, v15, 1, 0, &v24);

  if (v8)
  {
    id v16 = v24;
  }
  else
  {
    id v17 = v24;
    unint64_t v18 = (void *)sub_1B6E30D78();

    swift_willThrow();
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    id v24 = 0;
    unint64_t v25 = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    v23[1] = v18;
    sub_1B666BD6C();
    sub_1B6E32B18();
    uint64_t v19 = (uint64_t)v24;
    uint64_t v20 = v25;
    int v21 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    id v24 = 0;
    swift_retain();
    sub_1B6B33E34(v21, (uint64_t *)&v24, v19, v20);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  return v13;
}

uint64_t sub_1B6C4BED8()
{
  if (*(unsigned char *)(v0 + 56) == 1)
  {
    uint64_t v1 = *(void **)(v0 + 64);
    if (v1)
    {
      if (dlclose(v1) == -1)
      {
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        v4[1] = 0xE900000000000020;
        swift_retain();
        dlerror();
        sub_1B6E31968();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        int v2 = sub_1B6E32148();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        v4[0] = 0;
        swift_retain();
        sub_1B6B33E34(v2, v4, 0x3A65736F6C636C64, 0xE900000000000020);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
  }
  *(void *)(v0 + 64) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for CodeLoader()
{
  return self;
}

void sub_1B6C4C094()
{
}

void sub_1B6C4C0F0()
{
}

void sub_1B6C4C14C()
{
}

void sub_1B6C4C1A8()
{
}

void (*sub_1B6C4C204(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4))(char *, uint64_t)
{
  uint64_t v33 = a1;
  uint64_t v5 = v4;
  unint64_t v34 = a2;
  uint64_t v8 = sub_1B6E31808();
  uint64_t v35 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  MEMORY[0x1F4188790](v8, v9);
  id v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v12 = sub_1B6E30F48();
  uint64_t v37 = *(void *)(v12 - 8);
  uint64_t v38 = v12;
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v15 = (char *)&v32 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v16, v17);
  uint64_t v19 = (char *)&v32 - v18;
  uint64_t v20 = *(void *)(v4 + 80);
  if (v20)
  {
    uint64_t v40 = 0;
    unint64_t v41 = 0xE000000000000000;
    LOBYTE(v39) = *(unsigned char *)(v20 + 24);
    sub_1B6E32B18();
    sub_1B6E31948();
  }
  uint64_t v40 = a3;
  unint64_t v41 = a4;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v21 = v32;
  uint64_t v39 = sub_1B6C4F924(0, 5, 0xD00000000000001ALL, 0x80000001B6F4E380);
  uint64_t v22 = MEMORY[0x1E4FBAF58];
  sub_1B6C4FCB4(0, &qword_1E9DD6C10, MEMORY[0x1E4FBAF58], MEMORY[0x1E4FBB320]);
  sub_1B6C4FC5C(&qword_1E9DD7850, &qword_1E9DD6C10, v22);
  sub_1B6E31A58();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v23 = sub_1B6E31948();
  (*(uint64_t (**)(uint64_t))(*(void *)v5 + 352))(v23);
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  id v24 = objc_msgSend(self, sel_defaultManager);
  id v25 = objc_msgSend(v24, sel_temporaryDirectory);

  sub_1B6E30EE8();
  sub_1B6E30EB8();
  swift_bridgeObjectRelease();
  uint64_t v40 = v33;
  unint64_t v41 = v34;
  sub_1B6E317E8();
  sub_1B633AF88();
  sub_1B6E32668();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v11, v36);
  if (v21)
  {
    uint64_t v26 = v38;
    unint64_t v27 = *(void (**)(char *, uint64_t))(v37 + 8);
    v27(v15, v38);
    v27(v19, v26);
  }
  else
  {
    unint64_t v27 = (void (*)(char *, uint64_t))sub_1B6E30EF8();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v37 + 8);
    unint64_t v29 = v15;
    uint64_t v30 = v38;
    v28(v29, v38);
    v28(v19, v30);
  }
  return v27;
}

uint64_t sub_1B6C4C6A8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v40 = *MEMORY[0x1E4F143B8];
  if (*(void *)(v1 + 24))
  {
    uint64_t v4 = *(void *)(v1 + 16);
    unint64_t v5 = *(void *)(v1 + 24);
  }
  else
  {
    uint64_t v38 = 6449516;
    unint64_t v39 = 0xE300000000000000;
    sub_1B6E31948();
    sub_1B6C4F924(0, 5, 0xD00000000000001ALL, 0x80000001B6F4E380);
    uint64_t v6 = MEMORY[0x1E4FBAF58];
    sub_1B6C4FCB4(0, &qword_1E9DD6C10, MEMORY[0x1E4FBAF58], MEMORY[0x1E4FBB320]);
    sub_1B6C4FC5C(&qword_1E9DD7850, &qword_1E9DD6C10, v6);
    sub_1B6E31A58();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t v4 = 6449516;
    unint64_t v5 = 0xE300000000000000;
  }
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = v5;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  unint64_t v7 = *(void *)(v1 + 24);
  uint64_t v8 = qword_1E9DCC6E0;
  swift_bridgeObjectRetain();
  if (v8 != -1) {
    swift_once();
  }
  unint64_t v39 = v7;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  uint64_t v9 = (void *)sub_1B6E31768();
  uint64_t v10 = (void *)sub_1B6E31768();
  id v11 = objc_msgSend(v9, sel_stringByAppendingPathComponent_, v10);

  uint64_t v12 = sub_1B6E31798();
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  *(void *)(v2 + 32) = v12;
  *(void *)(v2 + 40) = v14;
  swift_bridgeObjectRelease();
  id v15 = objc_msgSend(self, sel_defaultManager);
  swift_bridgeObjectRetain();
  uint64_t v16 = (void *)sub_1B6E31768();
  swift_bridgeObjectRelease();
  uint64_t v38 = 0;
  unsigned int v17 = objc_msgSend(v15, sel_removeItemAtPath_error_, v16, &v38);

  if (v17)
  {
    id v18 = (id)v38;
  }
  else
  {
    id v19 = (id)v38;
    uint64_t v20 = (void *)sub_1B6E30D78();

    swift_willThrow();
  }
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  uint64_t v38 = 0x20676E696B6E696CLL;
  unint64_t v39 = 0xE800000000000000;
  int64_t v21 = *(void *)(a1 + 16);
  if (v21)
  {
    uint64_t v37 = MEMORY[0x1E4FBC860];
    swift_retain();
    sub_1B6C3C3B8(0, v21, 0);
    uint64_t v22 = a1 + 40;
    do
    {
      swift_bridgeObjectRetain();
      uint64_t v23 = (void *)sub_1B6E31768();
      id v24 = objc_msgSend(v23, sel_lastPathComponent);

      uint64_t v25 = sub_1B6E31798();
      uint64_t v27 = v26;
      swift_bridgeObjectRelease();

      unint64_t v29 = *(void *)(v37 + 16);
      unint64_t v28 = *(void *)(v37 + 24);
      if (v29 >= v28 >> 1) {
        sub_1B6C3C3B8(v28 > 1, v29 + 1, 1);
      }
      v22 += 16;
      *(void *)(v37 + 16) = v29 + 1;
      uint64_t v30 = v37 + 16 * v29;
      *(void *)(v30 + 32) = v25;
      *(void *)(v30 + 40) = v27;
      --v21;
    }
    while (v21);
  }
  else
  {
    swift_retain();
  }
  uint64_t v31 = MEMORY[0x1E4FBB1A0];
  sub_1B6C4FCB4(0, (unint64_t *)&qword_1EB9802F0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
  sub_1B6C4FC5C((unint64_t *)&qword_1EB980300, (unint64_t *)&qword_1EB9802F0, v31);
  sub_1B6E31638();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v32 = v38;
  uint64_t v33 = v39;
  int v34 = sub_1B6E32138();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v38 = 0;
  swift_retain();
  sub_1B6B33E34(v34, &v38, v32, v33);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B6831BA8();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B6959B78();
  swift_allocError();
  *(void *)uint64_t v35 = 0xD000000000000027;
  *(void *)(v35 + 8) = 0x80000001B6F4E3A0;
  *(void *)(v35 + 16) = 0;
  *(void *)(v35 + 24) = 0;
  *(unsigned char *)(v35 + 32) = 3;
  return swift_willThrow();
}

uint64_t sub_1B6C4CCF0(uint64_t a1)
{
  uint64_t v2 = sub_1B6E30F48();
  uint64_t v19 = *(void *)(v2 - 8);
  uint64_t v20 = v2;
  MEMORY[0x1F4188790](v2, v3);
  unint64_t v5 = (char *)&v18 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v22 = 0x6173726576696E75;
  unint64_t v23 = 0xE90000000000006CLL;
  sub_1B6E31948();
  uint64_t v21 = sub_1B6C4F924(0, 5, 0xD00000000000001ALL, 0x80000001B6F4E380);
  uint64_t v6 = MEMORY[0x1E4FBAF58];
  sub_1B6C4FCB4(0, &qword_1E9DD6C10, MEMORY[0x1E4FBAF58], MEMORY[0x1E4FBB320]);
  sub_1B6C4FC5C(&qword_1E9DD7850, &qword_1E9DD6C10, v6);
  sub_1B6E31A58();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  if (qword_1E9DCC6E0 != -1) {
    swift_once();
  }
  unint64_t v7 = (void *)sub_1B6E31768();
  uint64_t v8 = (void *)sub_1B6E31768();
  id v9 = objc_msgSend(v7, sel_stringByAppendingPathComponent_, v8);

  uint64_t v10 = sub_1B6E31798();
  unint64_t v12 = v11;
  swift_bridgeObjectRelease();

  uint64_t v22 = v10;
  unint64_t v23 = v12;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E30E48();
  swift_bridgeObjectRelease();
  sub_1B6E30E58();
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  uint64_t v22 = 0;
  unint64_t v23 = 0xE000000000000000;
  swift_retain();
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  uint64_t v22 = 0xD00000000000001ALL;
  unint64_t v23 = 0x80000001B6F4E400;
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v13 = v22;
  uint64_t v14 = v23;
  int v15 = sub_1B6E32138();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v22 = 0;
  swift_retain();
  sub_1B6B33E34(v15, &v22, v13, v14);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  sub_1B683208C(a1);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B67DDFA4(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B6959B78();
  swift_allocError();
  *(void *)uint64_t v16 = 0xD000000000000027;
  *(void *)(v16 + 8) = 0x80000001B6F4E3A0;
  *(void *)(v16 + 16) = 0;
  *(void *)(v16 + 24) = 0;
  *(unsigned char *)(v16 + 32) = 3;
  swift_willThrow();
  return (*(uint64_t (**)(char *, uint64_t))(v19 + 8))(v5, v20);
}

uint64_t sub_1B6C4D150(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = sub_1B6E30F48();
  uint64_t v40 = *(void *)(v7 - 8);
  uint64_t v41 = v7;
  MEMORY[0x1F4188790](v7, v8);
  unint64_t v39 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)sub_1B6E31768();
  id v11 = objc_msgSend(v10, sel_lastPathComponent);

  uint64_t v12 = sub_1B6E31798();
  unint64_t v14 = v13;

  uint64_t v43 = v12;
  unint64_t v44 = v14;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  uint64_t v15 = sub_1B6C4F924(0, 5, 0xD00000000000001ALL, 0x80000001B6F4E380);
  uint64_t v38 = v3;
  uint64_t v42 = v15;
  uint64_t v16 = MEMORY[0x1E4FBAF58];
  sub_1B6C4FCB4(0, &qword_1E9DD6C10, MEMORY[0x1E4FBAF58], MEMORY[0x1E4FBB320]);
  sub_1B6C4FC5C(&qword_1E9DD7850, &qword_1E9DD6C10, v16);
  sub_1B6E31A58();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v17 = v44;
  *(void *)(v4 + 16) = v43;
  *(void *)(v4 + 24) = v17;
  swift_bridgeObjectRelease();
  unint64_t v18 = *(void *)(v4 + 24);
  uint64_t v43 = *(void *)(v4 + 16);
  unint64_t v44 = v18;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  if (qword_1E9DCC6E0 != -1) {
    swift_once();
  }
  uint64_t v19 = (void *)sub_1B6E31768();
  uint64_t v20 = (void *)sub_1B6E31768();
  id v21 = objc_msgSend(v19, sel_stringByAppendingPathComponent_, v20);

  uint64_t v37 = sub_1B6E31798();
  swift_bridgeObjectRelease();

  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  uint64_t v43 = 0x6E696C69706D6F63;
  unint64_t v44 = 0xEA00000000002067;
  swift_retain();
  uint64_t v22 = (void *)sub_1B6E31768();
  id v23 = objc_msgSend(v22, sel_lastPathComponent);

  sub_1B6E31798();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v25 = v43;
  uint64_t v24 = v44;
  int v26 = sub_1B6E32138();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v43 = 0;
  swift_retain();
  sub_1B6B33E34(v26, &v43, v25, v24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v28 = *(void *)(v4 + 16);
  uint64_t v27 = *(void *)(v4 + 24);
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B68315F0(a1, a2, v28, v27);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B67DDFA4(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v29 = v39;
  sub_1B6E30E48();
  uint64_t v30 = v38;
  uint64_t v31 = sub_1B6E31748();
  if (v30)
  {

    uint64_t v33 = 0;
    uint64_t v34 = 0;
  }
  else
  {
    uint64_t v33 = v31;
    uint64_t v34 = v32;
  }
  (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
  sub_1B6959B78();
  swift_allocError();
  *(void *)uint64_t v35 = 0xD000000000000027;
  *(void *)(v35 + 8) = 0x80000001B6F4E3A0;
  *(void *)(v35 + 16) = v33;
  *(void *)(v35 + 24) = v34;
  *(unsigned char *)(v35 + 32) = 1;
  return swift_willThrow();
}

uint64_t sub_1B6C4D660(uint64_t a1, uint64_t a2)
{
  sub_1B6C4D150(a1, a2);
  if (!v2)
  {
    uint64_t v3 = v6;
    sub_1B6C4FCB4(0, (unint64_t *)&qword_1EB980C90, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBBE00]);
    uint64_t v4 = swift_allocObject();
    *(_OWORD *)(v4 + 16) = xmmword_1B6E77050;
    *(void *)(v4 + 32) = v7;
    *(void *)(v4 + 40) = v8;
    sub_1B6C4C6A8(v4);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n();
  }
  return v3;
}

uint64_t sub_1B6C4D754()
{
  swift_bridgeObjectRetain();
  uint64_t v2 = sub_1B6C4FB90();
  uint64_t result = swift_bridgeObjectRelease();
  if (!v1) {
    *(void *)(v0 + 64) = v2;
  }
  return result;
}

uint64_t type metadata accessor for SwiftCodeLoader()
{
  return self;
}

uint64_t sub_1B6C4D7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = sub_1B6E30F48();
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v37 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)sub_1B6E31768();
  id v11 = objc_msgSend(v10, sel_lastPathComponent);

  uint64_t v12 = sub_1B6E31798();
  unint64_t v14 = v13;

  uint64_t v41 = v12;
  unint64_t v42 = v14;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  uint64_t v15 = sub_1B6C4F924(0, 5, 0xD00000000000001ALL, 0x80000001B6F4E380);
  uint64_t v36 = v3;
  uint64_t v40 = v15;
  uint64_t v16 = MEMORY[0x1E4FBAF58];
  sub_1B6C4FCB4(0, &qword_1E9DD6C10, MEMORY[0x1E4FBAF58], MEMORY[0x1E4FBB320]);
  sub_1B6C4FC5C(&qword_1E9DD7850, &qword_1E9DD6C10, v16);
  sub_1B6E31A58();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v17 = v42;
  *(void *)(v4 + 16) = v41;
  *(void *)(v4 + 24) = v17;
  swift_bridgeObjectRelease();
  unint64_t v18 = *(void *)(v4 + 24);
  uint64_t v41 = *(void *)(v4 + 16);
  unint64_t v42 = v18;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  if (qword_1E9DCC6E0 != -1) {
    swift_once();
  }
  uint64_t v19 = (void *)sub_1B6E31768();
  uint64_t v20 = (void *)sub_1B6E31768();
  id v21 = objc_msgSend(v19, sel_stringByAppendingPathComponent_, v20);

  uint64_t v35 = sub_1B6E31798();
  swift_bridgeObjectRelease();

  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  uint64_t v41 = 0x6E696C69706D6F63;
  unint64_t v42 = 0xEA00000000002067;
  swift_retain();
  uint64_t v22 = (void *)sub_1B6E31768();
  id v23 = objc_msgSend(v22, sel_lastPathComponent);

  sub_1B6E31798();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v25 = v41;
  uint64_t v24 = v42;
  int v26 = sub_1B6E32138();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v41 = 0;
  swift_retain();
  sub_1B6B33E34(v26, &v41, v25, v24);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  sub_1B6830E5C(a1, a2);
  swift_release();
  swift_bridgeObjectRelease();
  sub_1B67DDFA4(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = v37;
  sub_1B6E30E48();
  uint64_t v28 = v36;
  uint64_t v29 = sub_1B6E31748();
  if (v28)
  {

    uint64_t v31 = 0;
    uint64_t v32 = 0;
  }
  else
  {
    uint64_t v31 = v29;
    uint64_t v32 = v30;
  }
  (*(void (**)(char *, uint64_t))(v38 + 8))(v27, v39);
  sub_1B6959B78();
  swift_allocError();
  *(void *)uint64_t v33 = 0xD000000000000027;
  *(void *)(v33 + 8) = 0x80000001B6F4E3A0;
  *(void *)(v33 + 16) = v31;
  *(void *)(v33 + 24) = v32;
  *(unsigned char *)(v33 + 32) = 1;
  return swift_willThrow();
}

uint64_t sub_1B6C4DCC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v49 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = sub_1B6E30F48();
  uint64_t v43 = *(void *)(v7 - 8);
  uint64_t v44 = v7;
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  id v11 = (void *)sub_1B6E31768();
  id v12 = objc_msgSend(v11, sel_lastPathComponent);

  uint64_t v13 = sub_1B6E31798();
  unint64_t v15 = v14;

  uint64_t v47 = v13;
  unint64_t v48 = v15;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  uint64_t v16 = sub_1B6C4F924(0, 5, 0xD00000000000001ALL, 0x80000001B6F4E380);
  uint64_t v45 = v3;
  uint64_t v46 = v16;
  uint64_t v17 = MEMORY[0x1E4FBAF58];
  sub_1B6C4FCB4(0, &qword_1E9DD6C10, MEMORY[0x1E4FBAF58], MEMORY[0x1E4FBB320]);
  sub_1B6C4FC5C(&qword_1E9DD7850, &qword_1E9DD6C10, v17);
  sub_1B6E31A58();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v18 = v48;
  uint64_t v4[2] = v47;
  v4[3] = v18;
  swift_bridgeObjectRelease();
  if (qword_1E9DCC6E0 != -1) {
    swift_once();
  }
  unint64_t v19 = v4[3];
  uint64_t v47 = v4[2];
  unint64_t v48 = v19;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  uint64_t v20 = (void *)sub_1B6E31768();
  id v21 = (void *)sub_1B6E31768();
  id v22 = objc_msgSend(v20, sel_stringByAppendingPathComponent_, v21);

  uint64_t v23 = sub_1B6E31798();
  uint64_t v25 = v24;
  swift_bridgeObjectRelease();

  void v4[4] = v23;
  v4[5] = v25;
  swift_bridgeObjectRelease();
  id v26 = objc_msgSend(self, sel_defaultManager);
  swift_bridgeObjectRetain();
  uint64_t v27 = (void *)sub_1B6E31768();
  swift_bridgeObjectRelease();
  uint64_t v47 = 0;
  LODWORD(v23) = objc_msgSend(v26, sel_removeItemAtPath_error_, v27, &v47);

  if (v23)
  {
    id v28 = (id)v47;
  }
  else
  {
    id v29 = (id)v47;
    uint64_t v30 = (void *)sub_1B6E30D78();

    swift_willThrow();
    uint64_t v45 = 0;
  }
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  uint64_t v47 = 0x6E696C69706D6F63;
  unint64_t v48 = 0xEA00000000002067;
  swift_retain();
  uint64_t v31 = (void *)sub_1B6E31768();
  id v32 = objc_msgSend(v31, sel_lastPathComponent);

  sub_1B6E31798();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v33 = v47;
  uint64_t v34 = v48;
  int v35 = sub_1B6E32138();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v47 = 0;
  swift_retain();
  sub_1B6B33E34(v35, &v47, v33, v34);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_retain();
  swift_bridgeObjectRetain();
  sub_1B68311B8(a1, a2);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B67DDFA4(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B6E30E48();
  uint64_t v36 = v45;
  uint64_t v37 = sub_1B6E31748();
  if (v36)
  {

    uint64_t v39 = 0;
    uint64_t v40 = 0;
  }
  else
  {
    uint64_t v39 = v37;
    uint64_t v40 = v38;
  }
  (*(void (**)(char *, uint64_t))(v43 + 8))(v10, v44);
  sub_1B6959B78();
  swift_allocError();
  *(void *)uint64_t v41 = 0xD000000000000027;
  *(void *)(v41 + 8) = 0x80000001B6F4E3A0;
  *(void *)(v41 + 16) = v39;
  *(void *)(v41 + 24) = v40;
  *(unsigned char *)(v41 + 32) = 1;
  return swift_willThrow();
}

uint64_t sub_1B6C4E2B4()
{
  if (*(void *)(v0 + 40)) {
    uint64_t v1 = (const char *)(sub_1B6E31848() + 32);
  }
  else {
    uint64_t v1 = 0;
  }
  uint64_t v2 = dlopen(v1, 6);
  uint64_t result = swift_unknownObjectRelease();
  *(void *)(v0 + 64) = v2;
  if (!v2)
  {
    dlerror();
    uint64_t v4 = sub_1B6E31968();
    uint64_t v6 = v5;
    sub_1B6959B78();
    swift_allocError();
    *(void *)uint64_t v7 = v4;
    *(void *)(v7 + 8) = v6;
    *(void *)(v7 + 16) = 0;
    *(void *)(v7 + 24) = 0;
    *(unsigned char *)(v7 + 32) = 4;
    return swift_willThrow();
  }
  return result;
}

uint64_t type metadata accessor for CCodeLoader()
{
  return self;
}

double sub_1B6C4E38C()
{
  *(void *)(v0 + 48) = 0;
  double result = 0.0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(void *)(v0 + 88) = 0;
  *(void *)(v0 + 96) = 0;
  *(unsigned char *)(v0 + 56) = 1;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 64) = 0;
  return result;
}

uint64_t sub_1B6C4E3B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v58 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = sub_1B6E30F48();
  uint64_t v53 = *(void *)(v7 - 8);
  uint64_t v54 = v7;
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v52 = (char *)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = (void *)sub_1B6E31768();
  id v11 = objc_msgSend(v10, sel_lastPathComponent);

  uint64_t v12 = sub_1B6E31798();
  unint64_t v14 = v13;

  uint64_t v56 = v12;
  unint64_t v57 = v14;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  uint64_t v15 = sub_1B6C4F924(0, 5, 0xD00000000000001ALL, 0x80000001B6F4E380);
  uint64_t v49 = v3;
  uint64_t v55 = v15;
  uint64_t v16 = MEMORY[0x1E4FBAF58];
  sub_1B6C4FCB4(0, &qword_1E9DD6C10, MEMORY[0x1E4FBAF58], MEMORY[0x1E4FBB320]);
  sub_1B6C4FC5C(&qword_1E9DD7850, &qword_1E9DD6C10, v16);
  sub_1B6E31A58();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v17 = v57;
  uint64_t v4[2] = v56;
  v4[3] = v17;
  swift_bridgeObjectRelease();
  if (qword_1E9DCC6E0 != -1) {
    swift_once();
  }
  unint64_t v18 = v4[3];
  uint64_t v56 = v4[2];
  unint64_t v57 = v18;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  unint64_t v19 = (void *)sub_1B6E31768();
  uint64_t v20 = (void *)sub_1B6E31768();
  id v21 = objc_msgSend(v19, sel_stringByAppendingPathComponent_, v20);

  uint64_t v50 = sub_1B6E31798();
  uint64_t v51 = v22;
  swift_bridgeObjectRelease();

  unint64_t v23 = v4[3];
  uint64_t v56 = v4[2];
  unint64_t v57 = v23;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  uint64_t v24 = (void *)sub_1B6E31768();
  uint64_t v25 = (void *)sub_1B6E31768();
  id v26 = objc_msgSend(v24, sel_stringByAppendingPathComponent_, v25);

  uint64_t v27 = sub_1B6E31798();
  uint64_t v29 = v28;
  swift_bridgeObjectRelease();

  void v4[4] = v27;
  v4[5] = v29;
  swift_bridgeObjectRelease();
  id v30 = objc_msgSend(self, sel_defaultManager);
  swift_bridgeObjectRetain();
  uint64_t v31 = (void *)sub_1B6E31768();
  swift_bridgeObjectRelease();
  uint64_t v56 = 0;
  LODWORD(v27) = objc_msgSend(v30, sel_removeItemAtPath_error_, v31, &v56);

  if (v27)
  {
    id v32 = (id)v56;
    uint64_t v33 = v49;
  }
  else
  {
    id v34 = (id)v56;
    int v35 = (void *)sub_1B6E30D78();

    swift_willThrow();
    uint64_t v33 = 0;
  }
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  uint64_t v56 = 0x6E696C69706D6F63;
  unint64_t v57 = 0xEA00000000002067;
  swift_retain();
  uint64_t v36 = (void *)sub_1B6E31768();
  id v37 = objc_msgSend(v36, sel_lastPathComponent);

  sub_1B6E31798();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v38 = v56;
  uint64_t v39 = v57;
  int v40 = sub_1B6E32138();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v56 = 0;
  swift_retain();
  sub_1B6B33E34(v40, &v56, v38, v39);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B6832600(a1, a2, v50, v51);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B67DDFA4(MEMORY[0x1E4FBC860]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v41 = v52;
  sub_1B6E30E48();
  uint64_t v42 = sub_1B6E31748();
  if (v33)
  {

    uint64_t v44 = 0;
    uint64_t v45 = 0;
  }
  else
  {
    uint64_t v44 = v42;
    uint64_t v45 = v43;
  }
  (*(void (**)(char *, uint64_t))(v53 + 8))(v41, v54);
  sub_1B6959B78();
  swift_allocError();
  *(void *)uint64_t v46 = 0xD000000000000027;
  *(void *)(v46 + 8) = 0x80000001B6F4E3A0;
  *(void *)(v46 + 16) = v44;
  *(void *)(v46 + 24) = v45;
  *(unsigned char *)(v46 + 32) = 1;
  return swift_willThrow();
}

void sub_1B6C4EA48()
{
  uint64_t v1 = v0;
  v14[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v2 = sub_1B6E30F48();
  uint64_t v3 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v4);
  uint64_t v6 = (char *)v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v7 = (void *)v1[6];
  swift_unknownObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B6E30E48();
  swift_bridgeObjectRelease();
  uint64_t v8 = (void *)sub_1B6E30E78();
  (*(void (**)(char *, uint64_t))(v3 + 8))(v6, v2);
  v14[0] = 0;
  id v9 = objc_msgSend(v7, sel_newLibraryWithURL_error_, v8, v14);
  swift_unknownObjectRelease();

  id v10 = v14[0];
  if (v9)
  {
    v1[9] = v9;
    swift_unknownObjectRelease();
    id v11 = (void *)v1[9];
    if (v1[3])
    {
      swift_unknownObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v12 = (void *)sub_1B6E31768();
      swift_bridgeObjectRelease();
    }
    else
    {
      swift_unknownObjectRetain();
      uint64_t v12 = 0;
    }
    objc_msgSend(v11, sel_setLabel_, v12);
    swift_unknownObjectRelease();
  }
  else
  {
    unint64_t v13 = v10;
    sub_1B6E30D78();

    swift_willThrow();
  }
}

id sub_1B6C4EC4C()
{
  uint64_t v1 = *(void **)(v0 + 72);
  swift_unknownObjectRetain();
  uint64_t v2 = (void *)sub_1B6E31768();
  id v3 = objc_msgSend(v1, sel_newFunctionWithName_, v2);

  swift_unknownObjectRelease();
  if (!v3)
  {
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6959B78();
    swift_allocError();
    *(void *)uint64_t v4 = 0xD00000000000001ELL;
    *(void *)(v4 + 8) = 0x80000001B6F4E340;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 24) = 0;
    *(unsigned char *)(v4 + 32) = 4;
    swift_willThrow();
  }
  return v3;
}

uint64_t sub_1B6C4ED5C()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C4ED64()
{
  if (*(unsigned char *)(v0 + 56) == 1)
  {
    uint64_t v1 = *(void **)(v0 + 64);
    if (v1)
    {
      if (dlclose(v1) == -1)
      {
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        v4[1] = 0xE900000000000020;
        swift_retain();
        dlerror();
        sub_1B6E31968();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        int v2 = sub_1B6E32148();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        v4[0] = 0;
        swift_retain();
        sub_1B6B33E34(v2, v4, 0x3A65736F6C636C64, 0xE900000000000020);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
  }
  *(void *)(v0 + 64) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for MetalToolchainCodeLoader()
{
  return self;
}

void sub_1B6C4EF28()
{
  uint64_t v43 = *MEMORY[0x1E4F143B8];
  sub_1B63BE100();
  MEMORY[0x1F4188790](v0 - 8, v1);
  id v3 = (char *)&v37 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v7 = (char *)&v37 - v6;
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  uint64_t v41 = 0;
  unint64_t v42 = 0xE000000000000000;
  swift_retain();
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  uint64_t v41 = (void *)0xD000000000000014;
  unint64_t v42 = 0x80000001B6F4E360;
  uint64_t v8 = (void *)sub_1B6E31768();
  id v9 = objc_msgSend(v8, sel_lastPathComponent);

  sub_1B6E31798();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  uint64_t v10 = (uint64_t)v41;
  uint64_t v11 = v42;
  int v12 = sub_1B6E32138();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v41 = 0;
  swift_retain();
  sub_1B6B33E34(v12, (uint64_t *)&v41, v10, v11);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  unint64_t v13 = (void *)sub_1B6E31768();
  id v14 = objc_msgSend(v13, sel_lastPathComponent);

  uint64_t v15 = sub_1B6E31798();
  unint64_t v17 = v16;

  uint64_t v41 = (void *)v15;
  unint64_t v42 = v17;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  uint64_t v18 = v39;
  id v40 = (id)sub_1B6C4F924(0, 5, 0xD00000000000001ALL, 0x80000001B6F4E380);
  uint64_t v19 = MEMORY[0x1E4FBAF58];
  sub_1B6C4FCB4(0, &qword_1E9DD6C10, MEMORY[0x1E4FBAF58], MEMORY[0x1E4FBB320]);
  sub_1B6C4FC5C(&qword_1E9DD7850, &qword_1E9DD6C10, v19);
  sub_1B6E31A58();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v20 = v42;
  id v21 = v38;
  v38[2] = v41;
  uint64_t v21[3] = v20;
  swift_bridgeObjectRelease();
  sub_1B6E30E48();
  uint64_t v22 = sub_1B6E30F48();
  uint64_t v23 = *(void *)(v22 - 8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v7, 0, 1, v22);
  uint64_t v24 = (uint64_t)v21 + OBJC_IVAR____TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader_sourceURL;
  sub_1B63BE06C((uint64_t)v7, (uint64_t)v21 + OBJC_IVAR____TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader_sourceURL);
  sub_1B663AB08(v24, (uint64_t)v3);
  (*(void (**)(char *, uint64_t, uint64_t))(v23 + 48))(v3, 1, v22);
  sub_1B6E31748();
  if (v18)
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v3, v22);
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v23 + 8))(v3, v22);
    uint64_t v25 = (void *)v21[6];
    swift_unknownObjectRetain();
    id v26 = (void *)sub_1B6E31768();
    swift_bridgeObjectRelease();
    uint64_t v41 = 0;
    id v40 = 0;
    id v27 = objc_msgSend(v25, sel_newLibraryWithSource_options_warnings_error_, v26, 0, &v41, &v40);
    swift_unknownObjectRelease();

    id v28 = v40;
    uint64_t v29 = v41;
    if (v27)
    {
      v21[9] = v27;
      id v30 = v28;
      id v31 = v29;
      swift_unknownObjectRelease();
      id v32 = (void *)v21[9];
      if (v21[3])
      {
        swift_unknownObjectRetain();
        swift_bridgeObjectRetain();
        uint64_t v33 = (void *)sub_1B6E31768();
        swift_bridgeObjectRelease();
      }
      else
      {
        swift_unknownObjectRetain();
        uint64_t v33 = 0;
      }
      objc_msgSend(v32, sel_setLabel_, v33);
      swift_unknownObjectRelease();

      if (v31)
      {
        id v36 = objc_msgSend(v31, sel_localizedDescription);
        sub_1B6E31798();
      }
    }
    else
    {
      id v34 = v40;
      id v35 = v29;
      sub_1B6E30D78();

      swift_willThrow();
    }
  }
}

uint64_t sub_1B6C4F500()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader_sourceURL;
  uint64_t v2 = sub_1B6E30F48();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56))(v1, 1, 1, v2);
  *(void *)(v0 + 48) = 0;
  *(_OWORD *)(v0 + 16) = 0u;
  *(_OWORD *)(v0 + 32) = 0u;
  *(unsigned char *)(v0 + 56) = 1;
  *(void *)(v0 + 72) = 0;
  *(void *)(v0 + 80) = 0;
  *(void *)(v0 + 64) = 0;
  return v0;
}

uint64_t sub_1B6C4F590()
{
  return sub_1B663ABE8(v0 + OBJC_IVAR____TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader_sourceURL);
}

uint64_t sub_1B6C4F5A0()
{
  if (*(unsigned char *)(v0 + 56) == 1)
  {
    uint64_t v1 = *(void **)(v0 + 64);
    if (v1)
    {
      if (dlclose(v1) == -1)
      {
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        v4[1] = 0xE900000000000020;
        swift_retain();
        dlerror();
        sub_1B6E31968();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        int v2 = sub_1B6E32148();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        v4[0] = 0;
        swift_retain();
        sub_1B6B33E34(v2, v4, 0x3A65736F6C636C64, 0xE900000000000020);
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
    }
  }
  *(void *)(v0 + 64) = 0;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  sub_1B663ABE8(v0 + OBJC_IVAR____TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader_sourceURL);

  return swift_deallocClassInstance();
}

uint64_t sub_1B6C4F76C()
{
  return type metadata accessor for MetalAPICodeLoader();
}

uint64_t type metadata accessor for MetalAPICodeLoader()
{
  uint64_t result = qword_1EB97F0B8;
  if (!qword_1EB97F0B8) {
    return swift_getSingletonMetadata();
  }
  return result;
}

void sub_1B6C4F7C0()
{
  sub_1B63BE100();
  if (v0 <= 0x3F) {
    swift_updateClassMetadata2();
  }
}

ValueMetadata *type metadata accessor for Language()
{
  return &type metadata for Language;
}

uint64_t sub_1B6C4F888()
{
  return sub_1B6C4FC5C(&qword_1E9DD7830, &qword_1E9DD7838, (uint64_t)&type metadata for Language);
}

unint64_t sub_1B6C4F8D0()
{
  unint64_t result = qword_1E9DD7840;
  if (!qword_1E9DD7840)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7840);
  }
  return result;
}

uint64_t sub_1B6C4F924(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v4 = MEMORY[0x1E4FBC860];
  if (a2 != a1)
  {
    uint64_t v19 = a2 - a1;
    uint64_t v21 = MEMORY[0x1E4FBC860];
    sub_1B6C3C4F0(0, (a2 - a1) & ~((a2 - a1) >> 63), 0);
    uint64_t v7 = 0;
    uint64_t v4 = v21;
    if ((a4 & 0x2000000000000000) != 0) {
      uint64_t v8 = HIBYTE(a4) & 0xF;
    }
    else {
      uint64_t v8 = a3 & 0xFFFFFFFFFFFFLL;
    }
    uint64_t v9 = v19;
    do
    {
      if (v8)
      {
        unint64_t v10 = sub_1B6E318C8();
        uint64_t v20 = 0;
        MEMORY[0x1BA9B84E0](&v20, 8);
        if (v10 > v20 * v10)
        {
          unint64_t v11 = -(uint64_t)v10 % v10;
          while (v11 > v20 * v10)
          {
            uint64_t v20 = 0;
            MEMORY[0x1BA9B84E0](&v20, 8);
          }
        }
        sub_1B6E31908();
        uint64_t v12 = sub_1B6E31A48();
        uint64_t v14 = v13;
        uint64_t v9 = v19;
      }
      else
      {
        uint64_t v12 = 0;
        uint64_t v14 = 0;
      }
      uint64_t v21 = v4;
      unint64_t v16 = *(void *)(v4 + 16);
      unint64_t v15 = *(void *)(v4 + 24);
      if (v16 >= v15 >> 1)
      {
        sub_1B6C3C4F0(v15 > 1, v16 + 1, 1);
        uint64_t v9 = v19;
        uint64_t v4 = v21;
      }
      ++v7;
      *(void *)(v4 + 16) = v16 + 1;
      uint64_t v17 = v4 + 16 * v16;
      *(void *)(v17 + 32) = v12;
      *(void *)(v17 + 40) = v14;
    }
    while (v7 != v9);
  }
  return v4;
}

uint64_t sub_1B6C4FAB8(char a1)
{
  if (!a1)
  {
    type metadata accessor for CCodeLoader();
LABEL_6:
    uint64_t v1 = swift_allocObject();
    goto LABEL_7;
  }
  if (a1 != 1)
  {
    type metadata accessor for SwiftCodeLoader();
    goto LABEL_6;
  }
  type metadata accessor for MetalAPICodeLoader();
  uint64_t v1 = swift_allocObject();
  uint64_t v2 = v1 + OBJC_IVAR____TtC3VFXP33_C4E2DBBBFC07D2822B3288C0270C06A818MetalAPICodeLoader_sourceURL;
  uint64_t v3 = sub_1B6E30F48();
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56))(v2, 1, 1, v3);
LABEL_7:
  *(void *)(v1 + 48) = 0;
  *(_OWORD *)(v1 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  *(unsigned char *)(v1 + 56) = 1;
  *(void *)(v1 + 72) = 0;
  *(void *)(v1 + 80) = 0;
  *(void *)(v1 + 64) = 0;
  return v1;
}

void *sub_1B6C4FB90()
{
  uint64_t v0 = sub_1B6E31848();
  uint64_t v1 = dlopen((const char *)(v0 + 32), 6);
  swift_release();
  if (v1)
  {
    uint64_t v2 = (void (*)(void))dlsym(v1, "main");
    if (v2)
    {
      v2();
    }
    else
    {
      dlerror();
      sub_1B6E31968();
      swift_bridgeObjectRelease();
    }
  }
  else
  {
    dlerror();
    uint64_t v3 = sub_1B6E31968();
    uint64_t v5 = v4;
    sub_1B6959B78();
    swift_allocError();
    *(void *)uint64_t v6 = v3;
    *(void *)(v6 + 8) = v5;
    *(void *)(v6 + 16) = 0;
    *(void *)(v6 + 24) = 0;
    *(unsigned char *)(v6 + 32) = 4;
    swift_willThrow();
  }
  return v1;
}

uint64_t sub_1B6C4FC5C(unint64_t *a1, unint64_t *a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6C4FCB4(255, a2, a3, MEMORY[0x1E4FBB320]);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1B6C4FCB4(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void *sub_1B6C4FD00(void *result, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  switch(a5)
  {
    case 0:
    case 3:
    case 4:
    case 5:
      goto LABEL_4;
    case 1:
      swift_bridgeObjectRetain();
      goto LABEL_4;
    case 2:
      id v6 = result;
LABEL_4:
      uint64_t result = (void *)swift_bridgeObjectRetain();
      break;
    default:
      return result;
  }
  return result;
}

void *destroy for CodeLoader.Error(uint64_t a1)
{
  return sub_1B6959A10(*(void **)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), *(unsigned char *)(a1 + 32));
}

uint64_t initializeWithCopy for CodeLoader.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1B6C4FD00(*(void **)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(unsigned char *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for CodeLoader.Error(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(unsigned char *)(a2 + 32);
  sub_1B6C4FD00(*(void **)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void **)a1;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  uint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v7;
  sub_1B6959A10(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for CodeLoader.Error(uint64_t a1, uint64_t a2)
{
  char v3 = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void **)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 24);
  long long v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v8;
  char v9 = *(unsigned char *)(a1 + 32);
  *(unsigned char *)(a1 + 32) = v3;
  sub_1B6959A10(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for CodeLoader.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFB && *(unsigned char *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 251);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 32);
  if (v3 <= 5) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for CodeLoader.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFA)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 251;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 33) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFB) {
      *(unsigned char *)(result + 33) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 32) = -(char)a2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for CodeLoader.Error()
{
  return &type metadata for CodeLoader.Error;
}

ValueMetadata *type metadata accessor for Scale3()
{
  return &type metadata for Scale3;
}

ValueMetadata *type metadata accessor for Scale()
{
  return &type metadata for Scale;
}

ValueMetadata *type metadata accessor for Scale2()
{
  return &type metadata for Scale2;
}

ValueMetadata *type metadata accessor for Scale1()
{
  return &type metadata for Scale1;
}

double sub_1B6C4FFB4(float32x4_t a1)
{
  v1.i64[0] = 0x3F0000003F000000;
  v1.i64[1] = 0x3F0000003F000000;
  *(void *)&double result = vmulq_f32(a1, v1).u64[0];
  return result;
}

uint64_t sub_1B6C4FFC0(uint64_t result, uint64_t a2, char a3, unint64_t a4, uint64_t a5)
{
  if (a3)
  {
    if (a4 != 0xFFFFFFFF)
    {
      uint64_t v11 = *(void *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v11)
      {
        int v12 = *(unsigned __int8 *)(v11 + 80);
        MEMORY[0x1BA9B8670](v11 + 48);
        uint64_t v11 = *(void *)(v11 + 56);
      }
      else
      {
        int v12 = 0;
      }
      swift_unknownObjectUnownedInit();
      v21[0] = a5;
      uint64_t v22 = v11;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      char v23 = v12;
      sub_1B636C4E0((uint64_t)v21, (uint64_t)v24);
      sub_1B6A61F04((uint64_t)&type metadata for Scale1, (uint64_t)&off_1F0FA0DD0, a4);
      sub_1B636C450((uint64_t)v24);
      if (v12) {
        sub_1B6A667F0(1);
      }
      swift_release();
      uint64_t v15 = *(void *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v15)
      {
        int v16 = *(unsigned __int8 *)(v15 + 80);
        MEMORY[0x1BA9B8670](v15 + 48);
        uint64_t v15 = *(void *)(v15 + 56);
      }
      else
      {
        int v16 = 0;
      }
      uint64_t v22 = 0;
      swift_unknownObjectUnownedInit();
      v21[0] = a5;
      uint64_t v22 = v15;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      char v23 = v16;
      sub_1B636C4E0((uint64_t)v21, (uint64_t)v24);
      sub_1B6A61F04((uint64_t)&type metadata for Scale2, (uint64_t)&off_1F0FA0F38, a4);
      sub_1B636C450((uint64_t)v24);
      if (v16) {
        sub_1B6A667F0(1);
      }
      swift_release();
      uint64_t v19 = *(void *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v19)
      {
        int v20 = *(unsigned __int8 *)(v19 + 80);
        MEMORY[0x1BA9B8670](v19 + 48);
        uint64_t v19 = *(void *)(v19 + 56);
      }
      else
      {
        int v20 = 0;
      }
      uint64_t v22 = 0;
      swift_unknownObjectUnownedInit();
      v21[0] = a5;
      uint64_t v22 = v19;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      char v23 = v20;
      sub_1B636C4E0((uint64_t)v21, (uint64_t)v24);
      sub_1B6A61F04((uint64_t)&type metadata for Scale3, (uint64_t)&off_1F0FA10A0, a4);
      sub_1B636C450((uint64_t)v24);
      if (v20) {
        sub_1B6A667F0(1);
      }
      return swift_release();
    }
  }
  else
  {
    uint64_t v8 = result;
    if (a4 != 0xFFFFFFFF)
    {
      uint64_t v9 = *(void *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v9)
      {
        int v10 = *(unsigned __int8 *)(v9 + 80);
        MEMORY[0x1BA9B8670](v9 + 48);
        uint64_t v9 = *(void *)(v9 + 56);
      }
      else
      {
        int v10 = 0;
      }
      swift_unknownObjectUnownedInit();
      v21[0] = a5;
      uint64_t v22 = v9;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      char v23 = v10;
      sub_1B636C4E0((uint64_t)v21, (uint64_t)v24);
      sub_1B6A61F04((uint64_t)&type metadata for Scale1, (uint64_t)&off_1F0FA0DD0, a4);
      sub_1B636C450((uint64_t)v24);
      if (v10) {
        sub_1B6A667F0(1);
      }
      swift_release();
      uint64_t v13 = *(void *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_replicationStream);
      swift_retain();
      if (v13)
      {
        int v14 = *(unsigned __int8 *)(v13 + 80);
        MEMORY[0x1BA9B8670](v13 + 48);
        uint64_t v13 = *(void *)(v13 + 56);
      }
      else
      {
        int v14 = 0;
      }
      uint64_t v22 = 0;
      swift_unknownObjectUnownedInit();
      v21[0] = a5;
      uint64_t v22 = v13;
      swift_unknownObjectUnownedAssign();
      swift_unownedRetain();
      swift_unknownObjectRelease();
      char v23 = v14;
      sub_1B636C4E0((uint64_t)v21, (uint64_t)v24);
      sub_1B6A61F04((uint64_t)&type metadata for Scale2, (uint64_t)&off_1F0FA0F38, a4);
      sub_1B636C450((uint64_t)v24);
      if (v14) {
        sub_1B6A667F0(1);
      }
      swift_release();
      v24[0] = v8;
      v24[1] = a2;
      uint64_t v17 = swift_retain();
      MEMORY[0x1F4188790](v17, v18);
      sub_1B636C318(0, (void (*)(unsigned char *))sub_1B6C50DD0);
      return swift_release();
    }
  }
  return result;
}

float sub_1B6C5043C(float a1)
{
  return a1 * 0.5;
}

float32x2_t sub_1B6C50448(float32x2_t a1)
{
  return vmul_f32(a1, (float32x2_t)0x3F0000003F000000);
}

void sub_1B6C50454(void *a1@<X0>, float *a2@<X8>)
{
  float v4 = sub_1B6C50844(a1);
  if (!v2) {
    *a2 = v4;
  }
}

uint64_t sub_1B6C50480(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  sub_1B62C550C((uint64_t)v2, v3);
  sub_1B6E33598();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

void sub_1B6C5051C(void *a1@<X0>, double *a2@<X8>)
{
  double v4 = sub_1B6C50A80(a1);
  if (!v2) {
    *a2 = v4;
  }
}

uint64_t sub_1B6C50548(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  sub_1B62C550C((uint64_t)v3, v4);
  float32x4_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
  sub_1B62AEA74(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
  sub_1B62AF28C((unint64_t *)&qword_1EB97D1B8, &qword_1EB980E90, v1);
  sub_1B6E335C8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B6C50674(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  sub_1B62C550C((uint64_t)v3, v4);
  float32x4_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
  sub_1B62AEA74(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  sub_1B62AF28C((unint64_t *)&qword_1EB97D1D8, (unint64_t *)&qword_1EB980EB0, v1);
  sub_1B6E335C8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

__n128 sub_1B6C50798@<Q0>(__n128 *a1@<X8>)
{
  __asm { FMOV            V0.4S, #1.0 }
  *a1 = result;
  return result;
}

__n128 sub_1B6C507A4(uint64_t a1, __n128 result, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  if (a8)
  {
    uint64_t v8 = (const float *)(a1 + 4 * a4);
    uint64_t v9 = (float32x4_t *)(a5 + 16 * a7);
    do
    {
      float32x4_t v10 = vld1q_dup_f32(v8++);
      v10.i32[3] = result.n128_i32[3];
      __n128 result = (__n128)v10;
      *v9++ = v10;
      --a8;
    }
    while (a8);
  }
  return result;
}

uint64_t sub_1B6C507CC(uint64_t result, double a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a9)
  {
    uint64_t v9 = (uint64_t *)(result + 8 * a5);
    __asm { FMOV            V0.4S, #1.0 }
    uint64_t v15 = (_OWORD *)(a6 + 16 * a8);
    do
    {
      uint64_t v16 = *v9++;
      *((void *)&v17 + 1) = __PAIR64__(a3.n128_u32[3], DWORD2(_Q0));
      *(void *)&long long v17 = v16;
      *v15++ = v17;
      --a9;
    }
    while (a9);
  }
  return result;
}

double sub_1B6C50804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    uint64_t v7 = (long long *)(a1 + 16 * a3);
    uint64_t v8 = (_DWORD *)(a4 + 4 * a6);
    do
    {
      long long v9 = *v7++;
      double result = *(double *)&v9;
      *v8++ = v9;
      --a7;
    }
    while (a7);
  }
  return result;
}

double sub_1B6C50824(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a7)
  {
    uint64_t v7 = (long long *)(a1 + 16 * a3);
    uint64_t v8 = (void *)(a4 + 8 * a6);
    do
    {
      long long v9 = *v7++;
      double result = *(double *)&v9;
      *v8++ = v9;
      --a7;
    }
    while (a7);
  }
  return result;
}

float sub_1B6C50844(void *a1)
{
  sub_1B62AEA74(0, (unint64_t *)&qword_1EB980930, (uint64_t (*)(void))sub_1B6AAF8B4, (uint64_t)&type metadata for ValueCodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  long long v9 = (char *)&v16[-1] - v8;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_1B62C14BC(a1, v10);
  if (sub_1B62B8F14(2000, v10, v11))
  {
    sub_1B62C14BC(a1, a1[3]);
    sub_1B6E33A28();
    if (!v1)
    {
      sub_1B62C14BC(v16, v16[3]);
      sub_1B6E334E8();
      float v2 = v12;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
    }
  }
  else
  {
    sub_1B62C14BC(a1, a1[3]);
    sub_1B6AAF8B4();
    sub_1B6E33A48();
    if (!v1)
    {
      sub_1B6E32DC8();
      float v2 = v14;
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

double sub_1B6C50A80(void *a1)
{
  sub_1B62AEA74(0, (unint64_t *)&qword_1EB980930, (uint64_t (*)(void))sub_1B6AAF8B4, (uint64_t)&type metadata for ValueCodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  long long v9 = (char *)&v16[-1] - v8;
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_1B62C14BC(a1, v10);
  if (sub_1B62B8F14(2000, v10, v11))
  {
    sub_1B62C14BC(a1, a1[3]);
    sub_1B6E33A28();
    if (!v1)
    {
      sub_1B62C14BC(v16, v16[3]);
      float v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
      sub_1B62AEA74(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
      sub_1B62AF28C((unint64_t *)&qword_1EB97D1D0, &qword_1EB980E90, v12);
      sub_1B6E33518();
      double v2 = *(double *)&v16[6];
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v16);
    }
  }
  else
  {
    sub_1B62C14BC(a1, a1[3]);
    sub_1B6AAF8B4();
    sub_1B6E33A48();
    if (!v1)
    {
      uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC280];
      sub_1B62AEA74(0, &qword_1EB980E90, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC280]);
      sub_1B62AF28C((unint64_t *)&qword_1EB97D1D0, &qword_1EB980E90, v13);
      sub_1B6E32DF8();
      (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
      double v2 = *(double *)v16;
    }
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

void *sub_1B6C50DD0(void *a1)
{
  return sub_1B6B71998(a1, *(void *)(v1 + 24), *(__n128 *)*(void *)(v1 + 16));
}

ValueMetadata *type metadata accessor for HalfSizeLegacyPatch()
{
  return &type metadata for HalfSizeLegacyPatch;
}

ValueMetadata *type metadata accessor for Velocity()
{
  return &type metadata for Velocity;
}

ValueMetadata *type metadata accessor for AngularVelocity()
{
  return &type metadata for AngularVelocity;
}

uint64_t sub_1B6C50E24@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_1B6C515AC(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6C50E50(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  uint64_t v1 = sub_1B6E33A68();
  nullsub_1(v1);
  sub_1B62C550C((uint64_t)v4, v5);
  uint64_t v2 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
  sub_1B6C51964(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  sub_1B62AF2F0((unint64_t *)&qword_1EB97D1D8, (unint64_t *)&qword_1EB980EB0, v2);
  sub_1B6E335C8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v4);
}

uint64_t sub_1B6C50F78@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t result = sub_1B6C51274(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6C50FA4(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  sub_1B62C550C((uint64_t)v3, v4);
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
  sub_1B6C51964(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
  sub_1B62AF2F0((unint64_t *)&qword_1EB97D1F8, (unint64_t *)&qword_1EB980EF0, v1);
  sub_1B6E335C8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v3);
}

uint64_t sub_1B6C510C8()
{
  return sub_1B681573C();
}

uint64_t sub_1B6C510E0()
{
  return sub_1B6E318B8();
}

uint64_t sub_1B6C510F8()
{
  return sub_1B681578C();
}

uint64_t sub_1B6C51110@<X0>(BOOL *a1@<X8>)
{
  return sub_1B68157E4(a1);
}

void sub_1B6C5111C(void *a1@<X8>)
{
  *a1 = 0x30775F65756C6176;
  a1[1] = 0xE800000000000000;
}

uint64_t sub_1B6C51138@<X0>(BOOL *a1@<X8>)
{
  return sub_1B6815840(a1);
}

uint64_t sub_1B6C51144(uint64_t a1)
{
  unint64_t v2 = sub_1B6C51910();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C51180(uint64_t a1)
{
  unint64_t v2 = sub_1B6C51910();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C511BC()
{
  return sub_1B681573C();
}

uint64_t sub_1B6C511D0()
{
  return sub_1B681578C();
}

uint64_t sub_1B6C511E4@<X0>(BOOL *a1@<X8>)
{
  return sub_1B68157E4(a1);
}

uint64_t sub_1B6C511F0@<X0>(BOOL *a1@<X8>)
{
  return sub_1B6815840(a1);
}

uint64_t sub_1B6C511FC(uint64_t a1)
{
  unint64_t v2 = sub_1B6C519CC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C51238(uint64_t a1)
{
  unint64_t v2 = sub_1B6C519CC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C51274(void *a1)
{
  sub_1B6C51964(0, &qword_1E9DD7868, (uint64_t (*)(void))sub_1B6C519CC, (uint64_t)&type metadata for AngularVelocity.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v19 - v7;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1B62C14BC(a1, v9);
  if (sub_1B62BF5E0(2017, v9, v10))
  {
    sub_1B62C14BC(a1, a1[3]);
    sub_1B6C519CC();
    sub_1B6E33A48();
    if (!v1)
    {
      sub_1B62ADC54();
      sub_1B6E32DF8();
      float32x4_t v13 = vmulq_f32(v20, v20);
      LODWORD(v14) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v13, 2), vaddq_f32(v13, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v13.f32, 1))).u32[0];
      float32x2_t v15 = vrsqrte_f32((float32x2_t)LODWORD(v14));
      float32x2_t v16 = vmul_f32(v15, vrsqrts_f32((float32x2_t)LODWORD(v14), vmul_f32(v15, v15)));
      v19[0] = vmulq_n_f32(v20, vmul_f32(v16, vrsqrts_f32((float32x2_t)LODWORD(v14), vmul_f32(v16, v16))).f32[0]);
      float v17 = atan2f(sqrtf(v14), v20.f32[3]);
      long long v18 = v19[0];
      *((float *)&v18 + 3) = v17 + v17;
      v19[0] = v18;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    }
  }
  else
  {
    sub_1B62C14BC(a1, a1[3]);
    sub_1B6E33A28();
    if (!v1)
    {
      sub_1B62C14BC(&v20, v21);
      uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
      sub_1B6C51964(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
      sub_1B62AF2F0((unint64_t *)&qword_1EB97D210, (unint64_t *)&qword_1EB980EF0, v11);
      sub_1B6E33518();
      v19[0] = v19[1];
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v20);
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

uint64_t sub_1B6C515AC(void *a1)
{
  sub_1B6C51964(0, &qword_1E9DD7858, (uint64_t (*)(void))sub_1B6C51910, (uint64_t)&type metadata for Velocity.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v16 - v7;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1B62C14BC(a1, v9);
  if (sub_1B62BF5E0(1018, v9, v10))
  {
    sub_1B62C14BC(a1, a1[3]);
    sub_1B6C51910();
    sub_1B6E33A48();
    if (!v1)
    {
      uint64_t v11 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2F8];
      sub_1B6C51964(0, (unint64_t *)&qword_1EB980EF0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2F8]);
      sub_1B62AF2F0((unint64_t *)&qword_1EB97D210, (unint64_t *)&qword_1EB980EF0, v11);
      sub_1B6E32DF8();
      v16[0] = v17;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
      long long v14 = v16[0];
      HIDWORD(v14) = 0;
      v16[0] = v14;
    }
  }
  else
  {
    sub_1B62C14BC(a1, a1[3]);
    sub_1B6E33A28();
    if (!v1)
    {
      sub_1B62C14BC(&v17, v18);
      float v12 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))MEMORY[0x1E4FBC2A8];
      sub_1B6C51964(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
      sub_1B62AF2F0((unint64_t *)&qword_1EB97D1F0, (unint64_t *)&qword_1EB980EB0, v12);
      sub_1B6E33518();
      long long v15 = v16[1];
      HIDWORD(v15) = 0;
      v16[0] = v15;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v17);
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
}

unint64_t sub_1B6C51910()
{
  unint64_t result = qword_1E9DD7860;
  if (!qword_1E9DD7860)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7860);
  }
  return result;
}

void sub_1B6C51964(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unint64_t sub_1B6C519CC()
{
  unint64_t result = qword_1E9DD7870;
  if (!qword_1E9DD7870)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7870);
  }
  return result;
}

ValueMetadata *type metadata accessor for AngularVelocity.CodingKeys()
{
  return &type metadata for AngularVelocity.CodingKeys;
}

unsigned char *_s3VFX15AngularVelocityV10CodingKeysOwst_0(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6C51AD0);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for Velocity.CodingKeys()
{
  return &type metadata for Velocity.CodingKeys;
}

unint64_t sub_1B6C51B0C()
{
  unint64_t result = qword_1E9DD7878;
  if (!qword_1E9DD7878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7878);
  }
  return result;
}

unint64_t sub_1B6C51B64()
{
  unint64_t result = qword_1E9DD7880;
  if (!qword_1E9DD7880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7880);
  }
  return result;
}

unint64_t sub_1B6C51BBC()
{
  unint64_t result = qword_1E9DD7888;
  if (!qword_1E9DD7888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7888);
  }
  return result;
}

unint64_t sub_1B6C51C14()
{
  unint64_t result = qword_1E9DD7890;
  if (!qword_1E9DD7890)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7890);
  }
  return result;
}

unint64_t sub_1B6C51C6C()
{
  unint64_t result = qword_1E9DD7898;
  if (!qword_1E9DD7898)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7898);
  }
  return result;
}

unint64_t sub_1B6C51CC4()
{
  unint64_t result = qword_1E9DD78A0;
  if (!qword_1E9DD78A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD78A0);
  }
  return result;
}

uint64_t sub_1B6C51D18(void *a1)
{
  sub_1B6C52C20(0, &qword_1E9DD78B8, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)&v10 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C52BCC();
  sub_1B6E33A88();
  char v14 = 0;
  sub_1B6E32F78();
  if (!v1)
  {
    char v13 = 1;
    sub_1B6E32F78();
    char v12 = 2;
    sub_1B6E32F78();
    char v11 = 3;
    sub_1B6E32F78();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6C51EF4(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BBA080(*a1, *a2);
}

uint64_t sub_1B6C51F00()
{
  uint64_t result = 0x737569646172;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7053646E756F7261;
      break;
    case 2:
      uint64_t result = 0x64656570536E69;
      break;
    case 3:
      uint64_t result = 0x73656E7468676974;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6C51F98@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6C520F4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6C51FC0(uint64_t a1)
{
  unint64_t v2 = sub_1B6C52BCC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C51FFC(uint64_t a1)
{
  unint64_t v2 = sub_1B6C52BCC();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B6C52038(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v4 = sub_1B6C529B0(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
    *(_DWORD *)(a2 + 12) = v7;
  }
}

uint64_t sub_1B6C52068(void *a1)
{
  return sub_1B6C51D18(a1);
}

uint64_t sub_1B6C52088()
{
  return type metadata accessor for VortexSystem();
}

double sub_1B6C520A8@<D0>(_OWORD *a1@<X8>)
{
  double result = 3.96316838e17;
  *a1 = xmmword_1B6EB9AB0;
  return result;
}

uint64_t type metadata accessor for VortexSystem()
{
  return self;
}

const char *sub_1B6C520E0()
{
  return "Vortex";
}

uint64_t sub_1B6C520F4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x737569646172 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7053646E756F7261 && a2 == 0xEB00000000646565 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x64656570536E69 && a2 == 0xE700000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x73656E7468676974 && a2 == 0xE900000000000073)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

uint64_t *sub_1B6C522CC(uint64_t a1)
{
  uint64_t v3 = *(void *)a1;
  BOOL v2 = *(void **)(a1 + 8);
  swift_retain_n();
  uint64_t v4 = sub_1B695FEC0((unint64_t)v2);
  uint64_t v6 = v5;
  char v8 = v7;
  swift_release();
  if (v8) {
    float v9 = 20.0;
  }
  else {
    float v9 = *(float *)&v4;
  }
  if (v8) {
    float v10 = 300.0;
  }
  else {
    float v10 = *((float *)&v4 + 1);
  }
  if (v8) {
    float v11 = 200.0;
  }
  else {
    float v11 = *(float *)&v6;
  }
  if (v8) {
    float v12 = 0.3;
  }
  else {
    float v12 = *((float *)&v6 + 1);
  }
  swift_retain();
  sub_1B62E9D50(v2, (uint64_t)v107);
  uint64_t v14 = v108;
  uint64_t v13 = v109;
  uint64_t v16 = v110;
  uint64_t v15 = v111;
  swift_release();
  sub_1B62CA210((uint64_t)v107, (uint64_t)v122, qword_1EB97EA20);
  if (v122[64])
  {
    float32x4_t v92 = (float32x4_t)xmmword_1B6E4F370;
    float32x4_t v93 = (float32x4_t)xmmword_1B6E4F320;
  }
  else
  {
    v17.i64[0] = v14;
    v17.i64[1] = v13;
    float32x4_t v93 = v17;
    v17.i64[0] = v16;
    v17.i64[1] = v15;
    float32x4_t v92 = v17;
  }
  sub_1B62F46E8();
  float v19 = v18;
  long long v20 = *(_OWORD *)(a1 + 104);
  long long v127 = *(_OWORD *)(a1 + 88);
  long long v128 = v20;
  uint64_t v129 = *(void *)(a1 + 120);
  sub_1B663C898((uint64_t)v112);
  v125[0] = v112[0];
  v125[1] = v112[1];
  uint64_t v126 = v113;
  sub_1B62C9DA8(v3, (uint64_t)v125, 0x200000000, v114);
  sub_1B62CA210((uint64_t)v114, (uint64_t)v115, (unint64_t *)&qword_1EB97DC50);
  if (!*(void *)&v115[0])
  {
    sub_1B62CA064((uint64_t)v112);
    return (uint64_t *)swift_release();
  }
  if (v121 <= 0 || (uint64_t v103 = v118) == 0)
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B62CA064((uint64_t)v112);
    goto LABEL_51;
  }
  float v21 = v9 * v9;
  float v91 = 1.0 - (float)(v12 * v19);
  uint64_t v22 = v120;
  uint64_t v23 = v120[4];
  char v106 = *(unsigned char *)(v119 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v123[0] = v115[0];
  v123[1] = v115[1];
  uint64_t v124 = v116;
  uint64_t v101 = (uint64_t)(v120 + 6);
  uint64_t v102 = v117;
  uint64_t v100 = v120 + 8;
  float v24 = (float)(1.0 / v9) * (float)(v12 * v19);
  float32x4_t v89 = vnegq_f32(v93);
  float32x4_t v90 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v93, (int32x4_t)v93), (int8x16_t)v93, 0xCuLL);
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v99 = v23;
  do
  {
    id v27 = (unsigned int *)(v102 + 48 * v25);
    uint64_t v28 = *v27;
    uint64_t v104 = v27[1];
    uint64_t v105 = v26;
    id v30 = (uint64_t *)*((void *)v27 + 2);
    uint64_t v29 = *((void *)v27 + 3);
    uint64_t v32 = *((void *)v27 + 4);
    uint64_t v31 = *((void *)v27 + 5);
    if (v106)
    {
      uint64_t v33 = *(os_unfair_lock_s **)(v31 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v33);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v31 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v23);
    sub_1B62CA210(v101, (uint64_t)v130, &qword_1EB97DE20);
    uint64_t v34 = v22[4];
    uint64_t v35 = *(void *)(*(void *)(*(void *)(*(void *)(v31 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v22[6] = ecs_stack_allocator_allocate(v34, 48 * v35, 8);
    v22[7] = v35;
    v100[1] = 0;
    v100[2] = 0;
    *uint64_t v100 = 0;
    swift_release();
    id v36 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v30, v29, v32, (uint64_t)v22);
    uint64_t v37 = (float32x2_t *)sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v30, v29, v32, (uint64_t)v22);
    if (v30)
    {
      if (!v32) {
        goto LABEL_36;
      }
      uint64_t v26 = v105;
      float32x4_t v38 = v97;
      float32x4_t v39 = v98;
      float32x4_t v41 = v95;
      float32x4_t v40 = v96;
      float32x4_t v42 = v94;
      do
      {
        float32x4_t v43 = vsubq_f32(*v36, v92);
        int8x16_t v44 = (int8x16_t)vmulq_f32(v93, v43);
        int8x16_t v45 = (int8x16_t)vmulq_f32(v43, v43);
        int8x16_t v46 = (int8x16_t)vzip1q_s32((int32x4_t)v44, (int32x4_t)v45);
        float32x4_t v47 = (float32x4_t)vextq_s8(v46, v46, 8uLL);
        int32x2_t v48 = (int32x2_t)vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v44, v44, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v45, v45, 8uLL)), vadd_f32(*(float32x2_t *)v46.i8, *(float32x2_t *)v47.f32));
        *(float32x2_t *)v45.i8 = vmul_f32((float32x2_t)v48, (float32x2_t)v48);
        BOOL v50 = *(float *)v45.i32 < v21;
        LODWORD(v49) = vsub_f32((float32x2_t)vdup_lane_s32(v48, 1), *(float32x2_t *)v45.i8).u32[0];
        BOOL v50 = v50 && v49 < v21;
        if (v50)
        {
          float32x4_t v51 = vsubq_f32(vmulq_n_f32(v93, *(float *)v48.i32), v43);
          int8x16_t v52 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v51, (int32x4_t)v51), (int8x16_t)v51, 0xCuLL), v89), v51, v90);
          float v53 = v24 * (float)(v9 - sqrtf(v49));
          *(float32x2_t *)v47.f32 = vmul_n_f32(*v37, v91);
          v47.i32[2] = vmuls_lane_f32(v91, *(float32x4_t *)v37->f32, 2);
          float32x4_t v54 = vmulq_n_f32(v51, v11 * v53);
          float32x4_t v55 = vaddq_f32(v54, v47);
          v47.i32[3] = v42.i32[3];
          v54.i32[3] = v41.i32[3];
          float32x4_t v56 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v52, (int32x4_t)v52), v52, 0xCuLL), v10 * v53);
          float32x4_t v57 = vaddq_f32(v56, v55);
          v55.i32[3] = v40.i32[3];
          v56.i32[3] = v38.i32[3];
          v57.i32[3] = v39.i32[3];
          float32x4_t v58 = v57;
          v58.i32[3] = 0;
          float32x4_t v39 = v57;
          *(float32x4_t *)v37->f32 = v58;
          float32x4_t v41 = v54;
          float32x4_t v42 = v47;
          float32x4_t v38 = v56;
          float32x4_t v40 = v55;
        }
        v37 += 2;
        ++v36;
        --v32;
      }
      while (v32);
      float32x4_t v94 = v42;
      float32x4_t v95 = v41;
      float32x4_t v96 = v40;
      float32x4_t v97 = v38;
      float32x4_t v98 = v39;
      uint64_t v23 = v99;
    }
    else
    {
      if (v28 == v104)
      {
LABEL_36:
        uint64_t v23 = v99;
        uint64_t v26 = v105;
        goto LABEL_46;
      }
      uint64_t v59 = v104 - v28;
      uint64_t v60 = &v37[2 * v28];
      uint64_t v61 = &v36[v28];
      uint64_t v23 = v99;
      float32x4_t v62 = v88;
      uint64_t v26 = v105;
      float32x4_t v64 = v86;
      float32x4_t v63 = v87;
      float32x4_t v66 = v84;
      float32x4_t v65 = v85;
      do
      {
        float32x4_t v67 = vsubq_f32(*v61, v92);
        int8x16_t v68 = (int8x16_t)vmulq_f32(v93, v67);
        int8x16_t v69 = (int8x16_t)vmulq_f32(v67, v67);
        int8x16_t v70 = (int8x16_t)vzip1q_s32((int32x4_t)v68, (int32x4_t)v69);
        float32x4_t v71 = (float32x4_t)vextq_s8(v70, v70, 8uLL);
        int32x2_t v72 = (int32x2_t)vadd_f32((float32x2_t)vzip1_s32((int32x2_t)*(_OWORD *)&vextq_s8(v68, v68, 8uLL), (int32x2_t)*(_OWORD *)&vextq_s8(v69, v69, 8uLL)), vadd_f32(*(float32x2_t *)v70.i8, *(float32x2_t *)v71.f32));
        *(float32x2_t *)v69.i8 = vmul_f32((float32x2_t)v72, (float32x2_t)v72);
        BOOL v50 = *(float *)v69.i32 < v21;
        LODWORD(v73) = vsub_f32((float32x2_t)vdup_lane_s32(v72, 1), *(float32x2_t *)v69.i8).u32[0];
        if (v50 && v73 < v21)
        {
          float32x4_t v75 = vsubq_f32(vmulq_n_f32(v93, *(float *)v72.i32), v67);
          int8x16_t v76 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v75, (int32x4_t)v75), (int8x16_t)v75, 0xCuLL), v89), v75, v90);
          float v77 = v24 * (float)(v9 - sqrtf(v73));
          *(float32x2_t *)v71.f32 = vmul_n_f32(*v60, v91);
          v71.i32[2] = vmuls_lane_f32(v91, *(float32x4_t *)v60->f32, 2);
          float32x4_t v78 = vmulq_n_f32(v75, v11 * v77);
          float32x4_t v79 = vaddq_f32(v78, v71);
          v71.i32[3] = v66.i32[3];
          v78.i32[3] = v65.i32[3];
          float32x4_t v80 = vmulq_n_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v76, (int32x4_t)v76), v76, 0xCuLL), v10 * v77);
          float32x4_t v81 = vaddq_f32(v80, v79);
          v79.i32[3] = v64.i32[3];
          v80.i32[3] = v63.i32[3];
          v81.i32[3] = v62.i32[3];
          float32x4_t v82 = v81;
          v82.i32[3] = 0;
          float32x4_t v62 = v81;
          *(float32x4_t *)v60->f32 = v82;
          float32x4_t v65 = v78;
          float32x4_t v66 = v71;
          float32x4_t v63 = v80;
          float32x4_t v64 = v79;
        }
        v60 += 2;
        ++v61;
        --v59;
      }
      while (v59);
      float32x4_t v84 = v66;
      float32x4_t v85 = v65;
      float32x4_t v86 = v64;
      float32x4_t v87 = v63;
      float32x4_t v88 = v62;
    }
LABEL_46:
    sub_1B6345178(v22, (unsigned __int16 **)v123, (uint64_t)v130);
    sub_1B634507C((char *)v31);
    ecs_stack_allocator_pop_snapshot(v23);
    if (v106)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v31 + 376));
    }
    swift_release();
    ++v25;
  }
  while (v25 != v103);
  sub_1B62CA064((uint64_t)v112);
LABEL_51:
  swift_release();
  sub_1B632F170(v114);
  return sub_1B632F170(v114);
}

ValueMetadata *type metadata accessor for Vortex()
{
  return &type metadata for Vortex;
}

float sub_1B6C529B0(void *a1)
{
  sub_1B6C52C20(0, &qword_1E9DD78A8, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  float v9 = &v12[-v8];
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C52BCC();
  sub_1B6E33A48();
  if (!v1)
  {
    v12[15] = 0;
    sub_1B6E32DC8();
    float v2 = v10;
    v12[14] = 1;
    sub_1B6E32DC8();
    v12[13] = 2;
    sub_1B6E32DC8();
    uint64_t v12[12] = 3;
    sub_1B6E32DC8();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B6C52BCC()
{
  unint64_t result = qword_1E9DD78B0;
  if (!qword_1E9DD78B0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD78B0);
  }
  return result;
}

void sub_1B6C52C20(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6C52BCC();
    unint64_t v7 = a3(a1, &type metadata for Vortex.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for Vortex.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C52D50);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Vortex.CodingKeys()
{
  return &type metadata for Vortex.CodingKeys;
}

unint64_t sub_1B6C52D8C()
{
  unint64_t result = qword_1E9DD78C0;
  if (!qword_1E9DD78C0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD78C0);
  }
  return result;
}

unint64_t sub_1B6C52DE4()
{
  unint64_t result = qword_1E9DD78C8;
  if (!qword_1E9DD78C8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD78C8);
  }
  return result;
}

unint64_t sub_1B6C52E3C()
{
  unint64_t result = qword_1E9DD78D0;
  if (!qword_1E9DD78D0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD78D0);
  }
  return result;
}

uint64_t sub_1B6C52E90(uint64_t a1, int a2)
{
  int v3 = v2;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v175 = v169;
  long long v176 = v170;
  long long v177 = v171;
  uint64_t v178 = v172;
  long long v174 = v168;
  uint64_t v5 = sub_1B6E33978();
  v173[0] = 0xD00000000000001CLL;
  v173[1] = 0x80000001B6F4E860;
  v173[2] = 0;
  v173[3] = 0;
  unint64_t v6 = MEMORY[0x1E4FBC860];
  v173[4] = MEMORY[0x1E4FBC860];
  v173[5] = 0;
  v173[6] = v5;
  id v7 = sub_1B679C370((uint64_t)v173, 0, a2);
  float v9 = v8;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[64] = v7;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v169 = v163;
  long long v170 = v164;
  long long v171 = v165;
  uint64_t v172 = v166;
  long long v168 = v162;
  v167[0] = 0xD000000000000015;
  v167[1] = 0x80000001B6F4E880;
  v167[3] = 0;
  v167[2] = 0;
  v167[4] = v6;
  v167[5] = 0;
  v167[6] = sub_1B6E33978();
  id v10 = sub_1B679C370((uint64_t)v167, 0, a2);
  float v12 = v11;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[65] = v10;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v163 = v157;
  long long v164 = v158;
  long long v165 = v159;
  uint64_t v166 = v160;
  long long v162 = v156;
  v161[0] = 0xD00000000000001DLL;
  v161[1] = 0x80000001B6F4E8A0;
  v161[3] = 0;
  v161[2] = 0;
  v161[4] = v6;
  v161[5] = 0;
  v161[6] = sub_1B6E33978();
  id v13 = sub_1B679C370((uint64_t)v161, 0, a2);
  uint64_t v15 = v14;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[66] = v13;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v157 = v151;
  long long v158 = v152;
  long long v159 = v153;
  uint64_t v160 = v154;
  long long v156 = v150;
  v155[0] = 0xD00000000000001ALL;
  v155[1] = 0x80000001B6F4E8C0;
  v155[3] = 0;
  v155[2] = 0;
  v155[4] = v6;
  v155[5] = 0;
  v155[6] = sub_1B6E33978();
  id v16 = sub_1B679C370((uint64_t)v155, 0, a2);
  float v18 = v17;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[67] = v16;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v151 = v145;
  long long v152 = v146;
  long long v153 = v147;
  uint64_t v154 = v148;
  long long v150 = v144;
  v149[0] = 0xD000000000000020;
  v149[1] = 0x80000001B6F4E8E0;
  v149[3] = 0;
  v149[2] = 0;
  v149[4] = v6;
  v149[5] = 0;
  v149[6] = sub_1B6E33978();
  id v19 = sub_1B679C370((uint64_t)v149, 0, a2);
  float v21 = v20;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[68] = v19;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v145 = v139;
  long long v146 = v140;
  long long v147 = v141;
  uint64_t v148 = v142;
  long long v144 = v138;
  v143[0] = 0xD000000000000018;
  v143[1] = 0x80000001B6F4E910;
  v143[3] = 0;
  v143[2] = 0;
  v143[4] = v6;
  v143[5] = 0;
  v143[6] = sub_1B6E33978();
  id v22 = sub_1B679C370((uint64_t)v143, 0, a2);
  float v24 = v23;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[73] = v22;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v139 = v133;
  long long v140 = v134;
  long long v141 = v135;
  uint64_t v142 = v136;
  long long v138 = v132;
  v137[0] = 0xD000000000000015;
  v137[1] = 0x80000001B6F4E930;
  v137[3] = 0;
  v137[2] = 0;
  v137[4] = v6;
  v137[5] = 0;
  v137[6] = sub_1B6E33978();
  id v25 = sub_1B679C370((uint64_t)v137, 0, a2);
  id v27 = v26;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[74] = v25;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v133 = v127;
  long long v134 = v128;
  long long v135 = v129;
  uint64_t v136 = v130;
  long long v132 = v126;
  v131[0] = 0xD000000000000015;
  v131[1] = 0x80000001B6F4E950;
  v131[3] = 0;
  v131[2] = 0;
  v131[4] = v6;
  v131[5] = 0;
  v131[6] = sub_1B6E33978();
  id v28 = sub_1B679C370((uint64_t)v131, 0, a2);
  id v30 = v29;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[76] = v28;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v127 = v121;
  long long v128 = v122;
  long long v129 = v123;
  uint64_t v130 = v124;
  long long v126 = v120;
  v125[0] = 0x656D5F6B636F6C62;
  v125[1] = 0xEF74726F73656772;
  _OWORD v125[2] = 0;
  v125[3] = 0;
  v125[4] = v6;
  v125[5] = 0;
  v125[6] = sub_1B6E33978();
  id v31 = sub_1B679C370((uint64_t)v125, 0, a2);
  uint64_t v33 = v32;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[77] = v31;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v122 = v116;
  long long v123 = v117;
  uint64_t v124 = v118;
  long long v120 = v114;
  long long v121 = v115;
  v119[0] = 0x75735F656772656DLL;
  v119[1] = 0xEF73796172726162;
  v119[2] = 0;
  v119[3] = 0;
  v119[4] = v6;
  v119[5] = 0;
  v119[6] = sub_1B6E33978();
  id v34 = sub_1B679C370((uint64_t)v119, 0, a2);
  id v36 = v35;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[78] = v34;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v116 = v110;
  long long v117 = v111;
  uint64_t v118 = v112;
  long long v114 = v108;
  long long v115 = v109;
  v113[0] = 0xD000000000000010;
  v113[1] = 0x80000001B6F4E970;
  v113[2] = 0;
  v113[3] = 0;
  v113[4] = v6;
  v113[5] = 0;
  v113[6] = sub_1B6E33978();
  id v37 = sub_1B679C370((uint64_t)v113, 0, a2);
  float32x4_t v39 = v38;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[79] = v37;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v110 = v104;
  long long v111 = v105;
  uint64_t v112 = v106;
  long long v108 = v102;
  long long v109 = v103;
  v107[0] = 0xD000000000000014;
  v107[1] = 0x80000001B6F4E990;
  v107[2] = 0;
  v107[3] = 0;
  v107[4] = v6;
  v107[5] = 0;
  v107[6] = sub_1B6E33978();
  id v40 = sub_1B679C370((uint64_t)v107, 0, a2);
  float32x4_t v42 = v41;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[69] = v40;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v104 = v98;
  long long v105 = v99;
  uint64_t v106 = v100;
  long long v102 = v96;
  long long v103 = v97;
  v101[0] = 0xD000000000000015;
  v101[1] = 0x80000001B6F4E9B0;
  v101[2] = 0;
  v101[3] = 0;
  v101[4] = v6;
  v101[5] = 0;
  v101[6] = sub_1B6E33978();
  id v43 = sub_1B679C370((uint64_t)v101, 0, a2);
  int8x16_t v45 = v44;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[70] = v43;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v98 = v92;
  long long v99 = v93;
  uint64_t v100 = v94;
  long long v96 = v90;
  long long v97 = v91;
  v95[0] = 0xD00000000000001BLL;
  v95[1] = 0x80000001B6F4E9D0;
  v95[2] = 0;
  v95[3] = 0;
  v95[4] = v6;
  v95[5] = 0;
  v95[6] = sub_1B6E33978();
  id v46 = sub_1B679C370((uint64_t)v95, 0, a2);
  int32x2_t v48 = v47;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[71] = v46;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v92 = v86;
  long long v93 = v87;
  uint64_t v94 = v88;
  long long v90 = v84;
  long long v91 = v85;
  v89[0] = 0xD00000000000002FLL;
  v89[1] = 0x80000001B6F4E9F0;
  v89[2] = 0;
  v89[3] = 0;
  v89[4] = v6;
  v89[5] = 0;
  v89[6] = sub_1B6E33978();
  id v49 = sub_1B679C370((uint64_t)v89, 0, a2);
  float32x4_t v51 = v50;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[72] = v49;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v86 = v80;
  long long v87 = v81;
  uint64_t v88 = v82;
  long long v84 = v78;
  long long v85 = v79;
  v83[0] = 0xD00000000000001CLL;
  v83[1] = 0x80000001B6F4EA20;
  v83[2] = 0;
  v83[3] = 0;
  v83[4] = v6;
  v83[5] = 0;
  v83[6] = sub_1B6E33978();
  id v52 = sub_1B679C370((uint64_t)v83, 0, a2);
  float32x4_t v54 = v53;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[75] = v52;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v80 = v69;
  long long v81 = v70;
  uint64_t v82 = v71;
  long long v78 = v67;
  long long v79 = v68;
  strcpy((char *)v72, "generate_keys");
  v72[7] = -4864;
  uint64_t v73 = 0;
  uint64_t v74 = 0;
  unint64_t v75 = v6;
  uint64_t v76 = 0;
  uint64_t v77 = sub_1B6E33978();
  id v55 = sub_1B679C370((uint64_t)v72, 0, a2);
  float32x4_t v57 = v56;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  swift_unknownObjectRelease();
  v3[80] = v55;
  sub_1B6E33998();
  sub_1B6E318B8();
  sub_1B6E33928();
  sub_1B6E33928();
  sub_1B6E33938();
  long long v69 = v64;
  long long v70 = v65;
  uint64_t v71 = v66;
  long long v67 = v62;
  long long v68 = v63;
  *(void *)&long long v62 = 0xD000000000000011;
  *((void *)&v62 + 1) = 0x80000001B6F4EA40;
  long long v63 = 0uLL;
  long long v64 = v6;
  *(void *)&long long v65 = sub_1B6E33978();
  id v58 = sub_1B679C370((uint64_t)&v62, 0, a2);
  uint64_t v60 = v59;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  uint64_t result = swift_unknownObjectRelease();
  v3[81] = v58;
  return result;
}

uint64_t sub_1B6C53E74(uint64_t a1, uint64_t a2)
{
  v25[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)(a2 + 512);
  swift_getObjectType();
  swift_unknownObjectRetain();
  unint64_t v4 = sub_1B6BBC91C();
  if ((v4 & 0x8000000000000000) != 0
    || (unsigned int v7 = v4, HIDWORD(v4))
    || (unsigned int v8 = v5, (v5 & 0x8000000000000000) != 0)
    || HIDWORD(v5)
    || (unsigned int v9 = v6, (v6 & 0x8000000000000000) != 0)
    || HIDWORD(v6))
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  else
  {
    swift_retain();
    id v10 = (void *)sub_1B62F1868(0, 16);
    uint64_t v12 = v11;
    uint64_t v24 = v13;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      v25[0] = 0;
      v25[1] = 0xE000000000000000;
      swift_retain();
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      int v14 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      v25[0] = 0;
      swift_retain();
      sub_1B6B33E34(v14, v25, 0xD000000000000033, 0x80000001B6F4E820);
      swift_release();
      swift_release();
    }
    else
    {
      *(void *)&long long v15 = __PAIR64__(v8, v7);
      *((void *)&v15 + 1) = v9;
      long long v23 = v15;
      id v16 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v17 = v10;
      *(_OWORD *)&v16[v12] = v23;
    }
    swift_release();
    uint64_t ObjectType = swift_getObjectType();
    sub_1B6D0E058((uint64_t)v10, v12, v24, 0, 1, ObjectType);
    uint64_t v19 = *(void *)(a2 + 368);
    uint64_t v20 = swift_unknownObjectRetain();
    sub_1B6D0E058(v20, v19, 4, 0, 6, ObjectType);
    swift_unknownObjectRelease();
    uint64_t v21 = swift_unknownObjectRetain();
    sub_1B6B59478(v21, v19 + 96, 12, 0);
    swift_unknownObjectRelease();
    sub_1B6B59510(v3);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B6C541E4(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v13 = a2[5];
  char v14 = *((unsigned char *)a2 + 48);
  char v15 = *((unsigned char *)a2 + 49);
  char v16 = *((unsigned char *)a2 + 50);
  uint64_t v17 = a2[7];
  uint64_t v83 = *a2;
  int v18 = *((_DWORD *)a2 + 16);
  uint64_t v86 = v13;
  LOBYTE(v13) = *((unsigned char *)a2 + 68);
  char v87 = v14;
  uint64_t v19 = a2[9];
  char v88 = v15;
  char v20 = *((unsigned char *)a2 + 80);
  char v89 = v16;
  uint64_t v21 = a2[11];
  int v22 = *((_DWORD *)a2 + 24);
  uint64_t v90 = v17;
  uint64_t v23 = a2[15];
  int v91 = v18;
  LOBYTE(v18) = *((unsigned char *)a2 + 128);
  char v92 = v13;
  LOBYTE(v13) = *((unsigned char *)a2 + 129);
  uint64_t v93 = v19;
  LOBYTE(v19) = *((unsigned char *)a2 + 130);
  char v94 = v20;
  uint64_t v24 = a2[19];
  uint64_t v95 = v21;
  LOBYTE(v21) = *((unsigned char *)a2 + 160);
  uint64_t v98 = v23;
  char v99 = v18;
  uint64_t v25 = a2[21];
  uint64_t v26 = a2[22];
  char v100 = v13;
  LOBYTE(v13) = *((unsigned char *)a2 + 184);
  char v101 = v19;
  uint64_t v27 = a2[26];
  uint64_t v103 = v24;
  LOBYTE(v24) = *((unsigned char *)a2 + 216);
  char v104 = v21;
  uint64_t v28 = a2[29];
  uint64_t v105 = v25;
  char v29 = *((unsigned char *)a2 + 240);
  uint64_t v106 = v26;
  uint64_t v30 = a2[33];
  char v107 = v13;
  int v31 = *((unsigned __int8 *)a2 + 272);
  uint64_t v109 = v27;
  uint64_t v32 = a2[35];
  char v110 = v24;
  uint64_t v112 = v28;
  uint64_t v33 = a2[44];
  uint64_t v34 = a2[45];
  char v113 = v29;
  uint64_t v115 = v30;
  uint64_t v36 = a2[46];
  uint64_t v35 = a2[47];
  uint64_t v117 = v32;
  uint64_t v122 = v33;
  int v131 = *((_DWORD *)a2 + 114);
  uint64_t v37 = a2[56];
  long long v84 = *(_OWORD *)(a2 + 1);
  long long v85 = *(_OWORD *)(a2 + 3);
  int v96 = v22;
  long long v97 = *(_OWORD *)(a2 + 13);
  long long v102 = *(_OWORD *)(a2 + 17);
  long long v108 = *((_OWORD *)a2 + 12);
  uint64_t v111 = *(void *)((char *)a2 + 220);
  long long v114 = *(_OWORD *)(a2 + 31);
  char v116 = v31;
  long long v38 = *((_OWORD *)a2 + 18);
  long long v39 = *((_OWORD *)a2 + 19);
  long long v118 = v38;
  long long v119 = v39;
  long long v40 = *((_OWORD *)a2 + 21);
  long long v120 = *((_OWORD *)a2 + 20);
  long long v121 = v40;
  uint64_t v123 = v34;
  uint64_t v124 = v36;
  long long v41 = *((_OWORD *)a2 + 25);
  long long v126 = *((_OWORD *)a2 + 24);
  long long v127 = v41;
  long long v42 = *((_OWORD *)a2 + 27);
  long long v128 = *((_OWORD *)a2 + 26);
  long long v129 = v42;
  long long v43 = *((_OWORD *)a2 + 30);
  long long v132 = *((_OWORD *)a2 + 29);
  long long v133 = v43;
  long long v44 = *((_OWORD *)a2 + 32);
  long long v134 = *((_OWORD *)a2 + 31);
  long long v135 = v44;
  long long v45 = *((_OWORD *)a2 + 35);
  long long v46 = *((_OWORD *)a2 + 36);
  long long v47 = *((_OWORD *)a2 + 37);
  long long v48 = *((_OWORD *)a2 + 38);
  long long v49 = *((_OWORD *)a2 + 39);
  long long v50 = *((_OWORD *)a2 + 40);
  long long v51 = *((_OWORD *)a2 + 34);
  long long v136 = *((_OWORD *)a2 + 33);
  long long v137 = v51;
  long long v138 = v45;
  long long v139 = v46;
  long long v140 = v47;
  long long v141 = v48;
  long long v142 = v49;
  long long v143 = v50;
  uint64_t v52 = v51;
  uint64_t v125 = v35;
  uint64_t v130 = v37;
  if (v34)
  {
    uint64_t v53 = v51;
    if (v31) {
      uint64_t v54 = v37;
    }
    else {
      uint64_t v54 = 0;
    }
    uint64_t v73 = v36;
    uint64_t v74 = v35;
    uint64_t v75 = v38;
    uint64_t v72 = v39;
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v56 = v75;
    uint64_t v76 = a4;
    uint64_t v57 = v56 + v54 * v72;
    uint64_t v52 = v53;
    swift_unknownObjectRetain();
    sub_1B62EEA00((uint64_t)&v83);
    swift_unknownObjectRetain();
    uint64_t v58 = swift_unknownObjectRetain();
    uint64_t v59 = v57;
    a4 = v76;
    sub_1B6D0E058(v58, v59, v72, 0, 4, ObjectType);
    swift_unknownObjectRelease();
    sub_1B6D0E058(v34, v73, v74, 0, 5, ObjectType);
    swift_unknownObjectRelease();
    sub_1B62E20E8((uint64_t)&v83);
  }
  else
  {
    swift_unknownObjectRetain();
  }
  uint64_t v60 = swift_getObjectType();
  sub_1B6B59510(v52);
  memcpy(__dst, a2, sizeof(__dst));
  sub_1B62EEA00((uint64_t)__dst);
  sub_1B6C53E74(a1, (uint64_t)__dst);
  sub_1B62E20E8((uint64_t)__dst);
  uint64_t v61 = a2[69];
  if (v61)
  {
    uint64_t v62 = a2[45];
    uint64_t v63 = a2[46];
    uint64_t v64 = a2[47];
    uint64_t v65 = a2[38];
    uint64_t v66 = a2[36] + v65 * a4;
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v67 = swift_unknownObjectRetain();
    sub_1B6D0E058(v67, v66, v65, 0, 4, v60);
    swift_unknownObjectRelease();
    sub_1B6D0E058(v62, v63, v64, 0, 5, v60);
    sub_1B6D0E058(a5, a6, a7, 0, 1, v60);
    sub_1B6D0E058(a8, a9, a10, 0, 6, v60);
    uint64_t v68 = a2[45];
    uint64_t v69 = a2[46] + 96;
    swift_unknownObjectRetain();
    sub_1B6B59728(v61, v68, v69);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v71 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    uint64_t v81 = 0;
    swift_retain();
    sub_1B6B33E34(v71, &v81, 0xD00000000000003ALL, 0x80000001B6F4E7E0);
    swift_unknownObjectRelease();
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1B6C546A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 560);
  if (v4)
  {
    uint64_t v6 = *(void *)(a2 + 360);
    uint64_t v7 = *(void *)(a2 + 368);
    uint64_t v8 = *(void *)(a2 + 376);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v10 = *(void *)(a2 + 304);
    uint64_t v11 = v10 - v10 * *(void *)(a2 + 448) + *(void *)(a2 + 288);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    uint64_t v12 = swift_unknownObjectRetain();
    sub_1B6D0E058(v12, v11, v10, 0, 4, ObjectType);
    swift_unknownObjectRelease();
    sub_1B6D0E058(v6, v7, v8, 0, 5, ObjectType);
    uint64_t v13 = *(void *)(a2 + 304);
    if (*(unsigned char *)(a2 + 272)) {
      uint64_t v14 = *(void *)(a2 + 448);
    }
    else {
      uint64_t v14 = 0;
    }
    uint64_t v15 = *(void *)(a2 + 288) + v14 * v13;
    uint64_t v16 = swift_unknownObjectRetain();
    sub_1B6D0E058(v16, v15, v13, 0, 6, ObjectType);
    swift_unknownObjectRelease();
    uint64_t v17 = swift_unknownObjectRetain();
    sub_1B6B59478(v17, v7, v8, 0);
    swift_unknownObjectRelease();
    uint64_t v18 = *(void *)(a2 + 432);
    uint64_t v19 = *(void *)(a2 + 440);
    uint64_t v20 = swift_unknownObjectRetain();
    sub_1B6B59478(v20, v18, v19, 0);
    swift_unknownObjectRelease();
    sub_1B6B59728(v4, a3, a4);
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v22 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    uint64_t v25 = 0;
    swift_retain();
    sub_1B6B33E34(v22, &v25, 0xD00000000000002BLL, 0x80000001B6F4E720);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1B6C54934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *(void *)(a2 + 568);
  if (v4)
  {
    uint64_t v5 = a4;
    uint64_t v7 = *(void *)(a2 + 40);
    char v8 = *(unsigned char *)(a2 + 48);
    char v9 = *(unsigned char *)(a2 + 49);
    uint64_t v56 = *(void *)a2;
    char v10 = *(unsigned char *)(a2 + 50);
    uint64_t v59 = v7;
    uint64_t v11 = *(void *)(a2 + 56);
    char v60 = v8;
    int v12 = *(_DWORD *)(a2 + 64);
    char v61 = v9;
    char v13 = *(unsigned char *)(a2 + 68);
    char v62 = v10;
    uint64_t v14 = *(void *)(a2 + 72);
    uint64_t v63 = v11;
    LOBYTE(v11) = *(unsigned char *)(a2 + 80);
    int v64 = v12;
    uint64_t v15 = *(void *)(a2 + 88);
    int v16 = *(_DWORD *)(a2 + 96);
    char v65 = v13;
    uint64_t v17 = *(void *)(a2 + 120);
    uint64_t v66 = v14;
    LOBYTE(v14) = *(unsigned char *)(a2 + 128);
    char v67 = v11;
    LOBYTE(v11) = *(unsigned char *)(a2 + 129);
    uint64_t v68 = v15;
    LOBYTE(v15) = *(unsigned char *)(a2 + 130);
    uint64_t v71 = v17;
    uint64_t v18 = *(void *)(a2 + 152);
    char v72 = v14;
    LOBYTE(v14) = *(unsigned char *)(a2 + 160);
    char v73 = v11;
    char v74 = v15;
    uint64_t v19 = *(void *)(a2 + 168);
    uint64_t v20 = *(void *)(a2 + 176);
    uint64_t v76 = v18;
    LOBYTE(v18) = *(unsigned char *)(a2 + 184);
    char v77 = v14;
    uint64_t v21 = *(void *)(a2 + 208);
    uint64_t v78 = v19;
    uint64_t v79 = v20;
    LOBYTE(v19) = *(unsigned char *)(a2 + 216);
    uint64_t v22 = *(void *)(a2 + 232);
    char v80 = v18;
    LOBYTE(v18) = *(unsigned char *)(a2 + 240);
    uint64_t v82 = v21;
    uint64_t v23 = *(void *)(a2 + 264);
    char v83 = v19;
    int v24 = *(unsigned __int8 *)(a2 + 272);
    uint64_t v85 = v22;
    uint64_t v25 = *(void *)(a2 + 280);
    long long v75 = *(_OWORD *)(a2 + 136);
    uint64_t v84 = *(void *)(a2 + 220);
    char v86 = v18;
    long long v87 = *(_OWORD *)(a2 + 248);
    uint64_t v26 = *(void *)(a2 + 352);
    uint64_t v27 = *(void *)(a2 + 360);
    uint64_t v88 = v23;
    LODWORD(v19) = *(_DWORD *)(a2 + 456);
    uint64_t v95 = v26;
    uint64_t v28 = *(void *)(a2 + 560);
    int v104 = v19;
    uint64_t v111 = v28;
    uint64_t v30 = *(void *)(a2 + 368);
    uint64_t v29 = *(void *)(a2 + 376);
    long long v31 = *(_OWORD *)(a2 + 24);
    long long v57 = *(_OWORD *)(a2 + 8);
    long long v58 = v31;
    int v69 = v16;
    long long v70 = *(_OWORD *)(a2 + 104);
    long long v81 = *(_OWORD *)(a2 + 192);
    long long v32 = *(_OWORD *)(a2 + 288);
    long long v33 = *(_OWORD *)(a2 + 304);
    long long v34 = *(_OWORD *)(a2 + 336);
    long long v93 = *(_OWORD *)(a2 + 320);
    long long v94 = v34;
    long long v35 = *(_OWORD *)(a2 + 400);
    long long v99 = *(_OWORD *)(a2 + 384);
    long long v100 = v35;
    long long v36 = *(_OWORD *)(a2 + 432);
    long long v101 = *(_OWORD *)(a2 + 416);
    long long v102 = v36;
    long long v37 = *(_OWORD *)(a2 + 480);
    long long v105 = *(_OWORD *)(a2 + 464);
    long long v106 = v37;
    long long v38 = *(_OWORD *)(a2 + 512);
    long long v107 = *(_OWORD *)(a2 + 496);
    long long v108 = v38;
    long long v39 = *(_OWORD *)(a2 + 528);
    long long v40 = *(_OWORD *)(a2 + 544);
    long long v41 = *(_OWORD *)(a2 + 576);
    long long v42 = *(_OWORD *)(a2 + 592);
    long long v43 = *(_OWORD *)(a2 + 608);
    long long v44 = *(_OWORD *)(a2 + 624);
    long long v45 = *(_OWORD *)(a2 + 640);
    uint64_t v46 = *(void *)(a2 + 448);
    char v89 = v24;
    uint64_t v90 = v25;
    long long v91 = v32;
    long long v92 = v33;
    uint64_t v96 = v27;
    uint64_t v97 = v30;
    uint64_t v98 = v29;
    uint64_t v103 = v46;
    long long v109 = v39;
    long long v110 = v40;
    uint64_t v112 = v4;
    long long v113 = v41;
    long long v114 = v42;
    long long v115 = v43;
    long long v116 = v44;
    long long v117 = v45;
    if (v27)
    {
      if (v24) {
        uint64_t v47 = v46;
      }
      else {
        uint64_t v47 = 0;
      }
      uint64_t v53 = v33;
      uint64_t v54 = v32;
      uint64_t ObjectType = swift_getObjectType();
      swift_unknownObjectRetain();
      sub_1B62EEA00((uint64_t)&v56);
      swift_unknownObjectRetain();
      uint64_t v49 = swift_unknownObjectRetain();
      uint64_t v50 = v54 + v47 * v53;
      uint64_t v5 = a4;
      sub_1B6D0E058(v49, v50, v53, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B6D0E058(v27, v30, v29, 0, 5, ObjectType);
      swift_unknownObjectRelease();
      sub_1B62E20E8((uint64_t)&v56);
    }
    else
    {
      swift_unknownObjectRetain();
    }
    swift_getObjectType();
    sub_1B6B59728(v4, a3, v5);
    return swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v51 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    uint64_t v56 = 0;
    swift_retain();
    sub_1B6B33E34(v51, &v56, 0xD000000000000035, 0x80000001B6F4E6E0);
    swift_release();
    return swift_release();
  }
}

uint64_t sub_1B6C54D4C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  uint64_t v29 = a24;
  uint64_t v28 = a25;
  uint64_t v30 = a2[5];
  char v31 = *((unsigned char *)a2 + 48);
  char v32 = *((unsigned char *)a2 + 49);
  char v33 = *((unsigned char *)a2 + 50);
  uint64_t v89 = *a2;
  uint64_t v34 = a2[7];
  uint64_t v92 = v30;
  LODWORD(v30) = *((_DWORD *)a2 + 16);
  char v93 = v31;
  char v35 = *((unsigned char *)a2 + 68);
  char v94 = v32;
  uint64_t v36 = a2[9];
  char v95 = v33;
  char v37 = *((unsigned char *)a2 + 80);
  uint64_t v96 = v34;
  uint64_t v38 = a2[11];
  int v39 = *((_DWORD *)a2 + 24);
  int v97 = v30;
  uint64_t v40 = a2[15];
  char v98 = v35;
  char v41 = *((unsigned char *)a2 + 128);
  uint64_t v99 = v36;
  LOBYTE(v36) = *((unsigned char *)a2 + 129);
  char v100 = v37;
  char v42 = *((unsigned char *)a2 + 130);
  uint64_t v101 = v38;
  uint64_t v43 = a2[19];
  uint64_t v104 = v40;
  LOBYTE(v40) = *((unsigned char *)a2 + 160);
  char v105 = v41;
  char v106 = v36;
  uint64_t v44 = a2[21];
  uint64_t v45 = a2[22];
  char v107 = v42;
  char v46 = *((unsigned char *)a2 + 184);
  uint64_t v109 = v43;
  uint64_t v47 = a2[26];
  char v110 = v40;
  LOBYTE(v40) = *((unsigned char *)a2 + 216);
  uint64_t v111 = v44;
  uint64_t v112 = v45;
  uint64_t v48 = a2[29];
  LOBYTE(v45) = *((unsigned char *)a2 + 240);
  char v113 = v46;
  uint64_t v49 = a2[33];
  uint64_t v115 = v47;
  int v50 = *((unsigned __int8 *)a2 + 272);
  char v116 = v40;
  uint64_t v51 = a2[35];
  uint64_t v118 = v48;
  char v119 = v45;
  uint64_t v52 = a2[44];
  uint64_t v53 = a2[45];
  long long v108 = *(_OWORD *)(a2 + 17);
  uint64_t v117 = *(uint64_t *)((char *)a2 + 220);
  long long v120 = *(_OWORD *)(a2 + 31);
  uint64_t v121 = v49;
  uint64_t v55 = a2[46];
  uint64_t v54 = a2[47];
  uint64_t v128 = v52;
  int v137 = *((_DWORD *)a2 + 114);
  uint64_t v56 = a2[56];
  long long v90 = *(_OWORD *)(a2 + 1);
  long long v91 = *(_OWORD *)(a2 + 3);
  int v102 = v39;
  long long v103 = *(_OWORD *)(a2 + 13);
  long long v114 = *((_OWORD *)a2 + 12);
  char v122 = v50;
  uint64_t v123 = v51;
  long long v57 = *((_OWORD *)a2 + 18);
  long long v58 = *((_OWORD *)a2 + 19);
  long long v124 = v57;
  long long v125 = v58;
  long long v59 = *((_OWORD *)a2 + 21);
  long long v126 = *((_OWORD *)a2 + 20);
  long long v127 = v59;
  uint64_t v129 = v53;
  uint64_t v130 = v55;
  uint64_t v131 = v54;
  long long v60 = *((_OWORD *)a2 + 25);
  long long v132 = *((_OWORD *)a2 + 24);
  long long v133 = v60;
  long long v61 = *((_OWORD *)a2 + 27);
  long long v134 = *((_OWORD *)a2 + 26);
  long long v135 = v61;
  uint64_t v136 = v56;
  long long v62 = *((_OWORD *)a2 + 30);
  long long v138 = *((_OWORD *)a2 + 29);
  long long v139 = v62;
  long long v63 = *((_OWORD *)a2 + 32);
  long long v140 = *((_OWORD *)a2 + 31);
  long long v141 = v63;
  long long v64 = *((_OWORD *)a2 + 34);
  long long v65 = *((_OWORD *)a2 + 37);
  long long v66 = *((_OWORD *)a2 + 38);
  long long v67 = *((_OWORD *)a2 + 39);
  long long v68 = *((_OWORD *)a2 + 40);
  long long v70 = *((_OWORD *)a2 + 35);
  long long v69 = *((_OWORD *)a2 + 36);
  long long v142 = *((_OWORD *)a2 + 33);
  long long v143 = v64;
  long long v144 = v70;
  long long v145 = v69;
  long long v146 = v65;
  long long v147 = v66;
  long long v148 = v67;
  long long v149 = v68;
  uint64_t v88 = v69;
  if (v53)
  {
    if (v50) {
      uint64_t v71 = v56;
    }
    else {
      uint64_t v71 = 0;
    }
    uint64_t v80 = v55;
    uint64_t v81 = v54;
    uint64_t v78 = v58;
    uint64_t v79 = v57;
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B62EEA00((uint64_t)&v89);
    swift_unknownObjectRetain();
    uint64_t v73 = swift_unknownObjectRetain();
    uint64_t v74 = v79 + v71 * v78;
    uint64_t v28 = a25;
    sub_1B6D0E058(v73, v74, v78, 0, 4, ObjectType);
    swift_unknownObjectRelease();
    uint64_t v75 = ObjectType;
    uint64_t v29 = a24;
    sub_1B6D0E058(v53, v80, v81, 0, 5, v75);
    swift_unknownObjectRelease();
    sub_1B62E20E8((uint64_t)&v89);
  }
  else
  {
    swift_unknownObjectRetain();
  }
  uint64_t v76 = swift_getObjectType();
  sub_1B6D0E058(a3, a4, a5, 0, 6, v76);
  sub_1B6B59478(a6, a7, a8, 0);
  sub_1B6B59478(a9, a10, a11, 0);
  sub_1B6B59478(a12, a13, a14, 0);
  sub_1B6B59478(a15, a16, a17, 0);
  sub_1B6B59478(a18, a19, a20, 0);
  sub_1B6B59478(a21, a22, a23, 0);
  sub_1B6D0E058(v29, v28, a26, 0, 1, v76);
  sub_1B6B59728(v88, a27, a28);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B6C55210(__n128 a1, __n128 a2, __n128 a3, __n128 a4, uint64_t a5, void *a6, unsigned __int32 a7, char a8, char a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  __dst[82] = *MEMORY[0x1E4F143B8];
  unint64_t v14 = a6[14];
  if ((v14 & 0x8000000000000000) != 0
    || HIDWORD(v14)
    || (unint64_t v16 = a6[48], (v16 & 0x8000000000000000) != 0)
    || HIDWORD(v16)
    || (swift_getObjectType(), v56 = a10, unint64_t v21 = sub_1B6BBC91C(), (v21 & 0x8000000000000000) != 0)
    || (unsigned __int32 v22 = v21, HIDWORD(v21)))
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  else
  {
    uint64_t v23 = (void *)sub_1B62F1868(0, 96);
    uint64_t v58 = v24;
    uint64_t v55 = v25;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      __dst[0] = 0;
      __dst[1] = 0xE000000000000000;
      swift_retain();
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      int v26 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      __dst[0] = 0;
      swift_retain();
      sub_1B6B33E34(v26, __dst, 0xD000000000000047, 0x80000001B6F4E750);
      swift_release();
      swift_release();
      uint64_t v27 = v58;
    }
    else
    {
      uint64_t v28 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v29 = v23;
      uint64_t v30 = (__n128 *)&v28[v58];
      uint64_t v27 = v58;
      v30->n128_u32[0] = v14;
      v30->n128_u32[1] = v16;
      v30->n128_u32[2] = a7;
      v30->n128_u8[12] = a8 & 1;
      v30->n128_u8[13] = a9 & 1;
      v30[1] = a1;
      v30[2] = a2;
      v30[3] = a3;
      v30[4] = a4;
      v30[5].n128_u32[0] = v22;
    }
    uint64_t v31 = (uint64_t)v23;
    memcpy(__dst, a6, 0x290uLL);
    uint64_t v32 = __dst[45];
    if (__dst[45])
    {
      uint64_t v33 = __dst[47];
      uint64_t v34 = __dst[46];
      if (LOBYTE(__dst[34])) {
        uint64_t v35 = __dst[56];
      }
      else {
        uint64_t v35 = 0;
      }
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v37 = __dst[38];
      uint64_t v38 = __dst[36] + __dst[38] * v35;
      sub_1B62EEA00((uint64_t)__dst);
      swift_unknownObjectRetain();
      uint64_t v39 = swift_unknownObjectRetain();
      sub_1B6D0E058(v39, v38, v37, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B6D0E058(v32, v34, v33, 0, 5, ObjectType);
      uint64_t v27 = v58;
      swift_unknownObjectRelease();
      sub_1B62E20E8((uint64_t)__dst);
    }
    uint64_t v40 = swift_getObjectType();
    sub_1B6D0E058(v31, v27, v55, 0, 1, v40);
    uint64_t v41 = *(void *)(a12 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 8);
    swift_retain();
    uint64_t v42 = sub_1B62F1868(0, 4);
    uint64_t v44 = v43;
    uint64_t v46 = v45;
    swift_unknownObjectRetain();
    swift_release();
    sub_1B6D0E058(v42, v44, v46, 0, 6, v40);
    sub_1B6B59510(v56);
    uint64_t v47 = *(void **)(a13 + 368);
    uint64_t v48 = (void *)swift_allocObject();
    void v48[2] = v42;
    v48[3] = v44;
    v48[4] = v46;
    v48[5] = a12;
    v48[6] = a14;
    v48[7] = v41;
    aBlock[4] = sub_1B6C58A60;
    aBlock[5] = v48;
    aBlock[0] = MEMORY[0x1E4F143A8];
    aBlock[1] = 1107296256;
    aBlock[2] = sub_1B638F0B8;
    aBlock[3] = &unk_1F0FBA2E8;
    uint64_t v49 = _Block_copy(aBlock);
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_retain();
    swift_release();
    objc_msgSend(v47, sel_addCompletedHandler_, v49);
    _Block_release(v49);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B6C55750(int a1, id a2, uint64_t a3, uint64_t a4, uint64_t a5, unint64_t a6, uint64_t a7)
{
  int v8 = a6;
  unint64_t v12 = HIDWORD(a6);
  objc_msgSend(a2, sel_storageMode);
  char v13 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v14 = a2;
  LODWORD(v13) = *(_DWORD *)&v13[a3];
  uint64_t v15 = swift_allocObject();
  swift_weakInit();
  uint64_t v16 = swift_allocObject();
  *(void *)(v16 + 16) = v15;
  *(_DWORD *)(v16 + 24) = v8;
  *(_DWORD *)(v16 + 28) = v12;
  *(void *)(v16 + 32) = a7;
  *(_DWORD *)(v16 + 40) = v13;
  uint64_t v17 = a5 + OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocksLock;
  uint64_t v18 = *(os_unfair_lock_s **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocksLock + 24);
  swift_retain();
  os_unfair_lock_lock(v18);
  uint64_t v19 = swift_allocObject();
  *(void *)(v19 + 16) = sub_1B6C58AE0;
  *(void *)(v19 + 24) = v16;
  uint64_t v20 = OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocks;
  unint64_t v21 = *(void **)(a5 + OBJC_IVAR____TtC3VFX13EntityManager_nextFrameBlocks);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(a5 + v20) = v21;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v21 = sub_1B62CACA8(0, v21[2] + 1, 1, v21);
    *(void *)(a5 + v20) = v21;
  }
  unint64_t v24 = v21[2];
  unint64_t v23 = v21[3];
  if (v24 >= v23 >> 1) {
    unint64_t v21 = sub_1B62CACA8(v23 > 1, v24 + 1, 1, v21);
  }
  void v21[2] = v24 + 1;
  uint64_t v25 = &v21[2 * v24];
  v25[4] = sub_1B6377A84;
  v25[5] = v19;
  *(void *)(a5 + v20) = v21;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v17 + 24));
  swift_release();

  return swift_release();
}

uint64_t sub_1B6C5592C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t result = swift_weakLoadStrong();
  if (result)
  {
    if (a2 != 0xFFFFFFFFLL
      && (a2 & 0x80000000) == 0
      && (int)a2 < *(void *)(result + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8))
    {
      uint64_t v8 = *(void *)(result + OBJC_IVAR____TtC3VFX13EntityManager__entries);
      if (HIDWORD(a2) == -1 || *(_DWORD *)(v8 + 12 * (int)a2 + 8) == HIDWORD(a2)) {
        sub_1B6C08E38(*(void *)(*(void *)(result + 136) + 8 * *(int *)(v8 + 12 * (int)a2) + 32), *(_WORD *)(v8 + 12 * (int)a2 + 4), 656, result, a3, a4);
      }
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6C55A20(uint64_t result, uint64_t *a2)
{
  if (result)
  {
    unint64_t v3 = result;
    do
    {
      unint64_t v4 = __clz(__rbit64(v3));
      if (v4 < 0x40 && ((1 << v4) & v3) != 0) {
        v3 &= ~(1 << v4);
      }
      char v6 = sub_1B62F23B8(v4);
      if (v6 == 28) {
        break;
      }
      uint64_t v7 = sub_1B62F23CC(v6);
      uint64_t v8 = *a2;
      swift_retain();
      if (v7 == &type metadata for Color)
      {
        uint64_t v14 = *(void *)(v8 + 16);
        uint64_t v15 = *(void *)(v14 + 128);
        if (*(void *)(v15 + 16))
        {
          unint64_t v16 = sub_1B62C1A30((uint64_t)&type metadata for TransientOriginColor);
          if ((v17 & 1) != 0
            && *(ValueMetadata **)(*(void *)(v14 + 24) + 16 * *(void *)(*(void *)(v15 + 56) + 8 * v16) + 32) == &type metadata for TransientOriginColor)
          {
            swift_release();
            return 1;
          }
        }
      }
      if ((v7 == &type metadata for Scale3 || v7 == &type metadata for Scale1 || v7 == &type metadata for Scale2)
        && (uint64_t v9 = *(void *)(v8 + 16), v10 = *(void *)(v9 + 128), *(void *)(v10 + 16))
        && (unint64_t v11 = sub_1B62C1A30((uint64_t)&type metadata for TransientOriginScale), (v12 & 1) != 0))
      {
        char v13 = *(ValueMetadata **)(*(void *)(v9 + 24) + 16 * *(void *)(*(void *)(v10 + 56) + 8 * v11) + 32);
        swift_release();
        if (v13 == &type metadata for TransientOriginScale) {
          return 1;
        }
      }
      else
      {
        swift_release();
      }
    }
    while (v3);
    return 0;
  }
  return result;
}

uint64_t sub_1B6C55BA8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 600);
  uint64_t v4 = *(void *)(a2 + 360);
  uint64_t v18 = *(void *)(a2 + 368);
  uint64_t v5 = *(void *)(a2 + 376);
  uint64_t v6 = *(void *)(a2 + 288);
  uint64_t v7 = *(void *)(a2 + 304);
  if (*(unsigned char *)(a2 + 272)) {
    uint64_t v8 = *(void *)(a2 + 448);
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t ObjectType = swift_getObjectType();
  swift_unknownObjectRetain();
  swift_unknownObjectRetain();
  uint64_t v10 = swift_unknownObjectRetain();
  sub_1B6D0E058(v10, v6 + v8 * v7, v7, 0, 4, ObjectType);
  swift_unknownObjectRelease();
  sub_1B6D0E058(v4, v18, v5, 0, 5, ObjectType);
  uint64_t v11 = *(void *)(a2 + 304);
  uint64_t v12 = v11 - v11 * *(void *)(a2 + 448) + *(void *)(a2 + 288);
  uint64_t v13 = swift_unknownObjectRetain();
  sub_1B6B59478(v13, v12, v11, 0);
  swift_unknownObjectRelease();
  uint64_t v14 = swift_unknownObjectRetain();
  sub_1B6B59478(v14, v18, v5, 0);
  swift_unknownObjectRelease();
  uint64_t v15 = *(void *)(a2 + 360);
  uint64_t v16 = *(void *)(a2 + 368) + 96;
  swift_unknownObjectRetain();
  sub_1B6B59728(v3, v15, v16);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t type metadata accessor for ParticlePrepareGPUSystem()
{
  return self;
}

const char *sub_1B6C55D58()
{
  return "ParticlePrepareGPUSystem";
}

uint64_t type metadata accessor for ParticlePostInitGPUSystem()
{
  return self;
}

uint64_t sub_1B6C55D90(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (v3)
  {
    uint64_t v4 = a1[4];
    swift_retain();
    sub_1B62F6B80((uint64_t)a1);
    sub_1B6C01A88(v4, v2, v3, (uint64_t)a1);
    sub_1B62F648C((uint64_t)a1);
    swift_release();
  }

  return swift_release();
}

const char *sub_1B6C55E34()
{
  return "ParticlePostInitSystem.GPU";
}

uint64_t sub_1B6C55E48()
{
  sub_1B62C6A50(*(void *)(v0 + 40));

  return swift_deallocClassInstance();
}

uint64_t sub_1B6C55E80(unint64_t a1, void *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6 = 1;
  uint64_t v7 = 1 << -(char)__clz(a3 - 1);
  if (a3) {
    uint64_t v6 = v7;
  }
  if (a3 + 4095 <= 0) {
    uint64_t v8 = -(-(a3 + 4095) & 0xFFF);
  }
  else {
    uint64_t v8 = (a3 + 4095) & 0xFFF;
  }
  if (a3 + 4095 - v8 >= v6) {
    uint64_t v9 = v6;
  }
  else {
    uint64_t v9 = a3 + 4095 - v8;
  }
  uint64_t v10 = *(void *)(*(void *)(a4 + 288) + 128);
  uint64_t v11 = v10 + 127;
  uint64_t v12 = -v10;
  uint64_t v13 = (v10 + 247) & -v10;
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  uint64_t v80 = v13;
  uint64_t v14 = sub_1B68007AC(v13, 0);
  uint64_t v83 = v15;
  uint64_t v78 = v16;
  swift_bridgeObjectRelease();
  uint64_t v84 = v14;
  id v18 = objc_msgSend(v14, sel_storageMode);
  uint64_t v19 = 0;
  if (v18 != (id)2)
  {
    uint64_t v20 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v21 = v84;
    uint64_t v19 = &v20[v83];
  }
  uint64_t v22 = v11 & v12;
  uint64_t v23 = sub_1B62F202C(v19, v17, a1, v9, 0, a4);
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  unint64_t v24 = sub_1B68007AC(v13, 0);
  uint64_t v81 = v25;
  uint64_t v77 = v26;
  swift_bridgeObjectRelease();
  uint64_t v82 = v24;
  id v28 = objc_msgSend(v24, sel_storageMode);
  id v29 = 0;
  if (v28 != (id)2)
  {
    uint64_t v30 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v31 = v82;
    id v29 = &v30[v81];
  }
  sub_1B62F202C(v29, v27, a1, v9, v23, a4);
  uint64_t v86 = 2 * v13;
  uint64_t v79 = v22 + 2 * v23;
  uint64_t v32 = 2 * v13 + 4 * v9 + v79;
  uint64_t v33 = a2[33];
  uint64_t v76 = v22;
  uint64_t v73 = v9;
  uint64_t v74 = 4 * v9;
  if (v33)
  {
    uint64_t v34 = *(void **)(v33 + 24);
    swift_retain();
    id v35 = objc_msgSend(v34, sel_label);
    uint64_t v36 = *(void **)(v33 + 16);
    id v37 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F35290]), sel_init);
    uint64_t v38 = v37;
    if (v32 <= 0x10000) {
      uint64_t v39 = 0x10000;
    }
    else {
      uint64_t v39 = 2 * v13 + 4 * v9 + v79;
    }
    objc_msgSend(v37, sel_setSize_, v39);
    objc_msgSend(v38, sel_setResourceOptions_, 544);
    id v40 = objc_msgSend(v36, sel_newHeapWithDescriptor_, v38);

    *(void *)(v33 + 24) = v40;
    swift_unknownObjectRelease();
    objc_msgSend((id)swift_unknownObjectRetain(), (SEL)&selRef_setPointOfView_updateUpTransform_, v35);
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    uint64_t v41 = *(void **)(a4 + 16);
    type metadata accessor for PrivateHeap();
    uint64_t v33 = swift_allocObject();
    *(void *)(v33 + 16) = v41;
    id v42 = objc_allocWithZone(MEMORY[0x1E4F35290]);
    swift_unknownObjectRetain_n();
    swift_bridgeObjectRetain();
    id v43 = objc_msgSend(v42, sel_init);
    uint64_t v44 = v43;
    if (v32 <= 0x10000) {
      uint64_t v45 = 0x10000;
    }
    else {
      uint64_t v45 = 2 * v13 + 4 * v9 + v79;
    }
    objc_msgSend(v43, sel_setSize_, v45);
    objc_msgSend(v44, sel_setResourceOptions_, 544);
    id v46 = objc_msgSend(v41, sel_newHeapWithDescriptor_, v44);

    *(void *)(v33 + 24) = v46;
    swift_unknownObjectRetain();
    uint64_t v47 = (void *)sub_1B6E31768();
    swift_bridgeObjectRelease();
    objc_msgSend(v46, sel_setLabel_, v47);
    swift_unknownObjectRelease();

    swift_unknownObjectRelease();
    a2[33] = v33;
  }
  uint64_t v48 = *(void **)(v33 + 24);
  swift_retain();
  id v49 = objc_msgSend(v48, sel_newBufferWithLength_options_, v86, objc_msgSend((id)swift_unknownObjectRetain(), sel_resourceOptions));
  swift_unknownObjectRelease();
  int v50 = (void *)sub_1B6E31768();
  objc_msgSend(v49, sel_setLabel_, v50);

  id v51 = objc_msgSend(*(id *)(v33 + 24), sel_newBufferWithLength_options_, v79, objc_msgSend((id)swift_unknownObjectRetain(), sel_resourceOptions));
  swift_unknownObjectRelease();
  uint64_t v52 = (void *)sub_1B6E31768();
  objc_msgSend(v51, sel_setLabel_, v52);

  id v53 = objc_msgSend(*(id *)(v33 + 24), sel_newBufferWithLength_options_, v74, objc_msgSend((id)swift_unknownObjectRetain(), sel_resourceOptions));
  swift_unknownObjectRelease();
  uint64_t v54 = (void *)sub_1B6E31768();
  uint64_t v55 = (uint64_t)v51;
  objc_msgSend(v53, sel_setLabel_, v54);

  swift_unknownObjectRelease();
  a2[53] = v53;
  a2[54] = 0;
  a2[55] = v74;
  uint64_t v56 = (void *)sub_1B634EF94(1953066050, 0xE400000000000000, 0);
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v58 = (void *)sub_1B6E31768();
  objc_msgSend(v56, sel_pushDebugGroup_, v58);

  swift_unknownObjectRetain();
  sub_1B6BBD014((uint64_t)v84, v83, v78, (uint64_t)v49, 0, v86, 0);
  swift_unknownObjectRetain();
  uint64_t v59 = v80;
  sub_1B6BBD014((uint64_t)v82, v81, v77, (uint64_t)v49, v80, v80, 0);
  swift_unknownObjectRelease();
  uint64_t v75 = v55;
  sub_1B6BBCFFC(v55, 0, v79, 0, v76, 0, ObjectType);
  swift_unknownObjectRelease();
  objc_msgSend(v56, sel_popDebugGroup);
  swift_unknownObjectRelease();
  if ((uint64_t)a2[48] >= 1 && (uint64_t)a2[58] > 0 && (uint64_t v60 = a2[35]) != 0 && (v61 = a2[45]) != 0)
  {
    uint64_t v62 = a2[36];
    uint64_t v70 = a2[37];
    uint64_t v71 = a2[46];
    uint64_t v72 = a2[47];
    long long v63 = (void *)a2[74];
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    swift_unknownObjectRetain();
    long long v64 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
    uint64_t v65 = swift_getObjectType();
    long long v66 = (void *)sub_1B6E31768();
    objc_msgSend(v64, sel_pushDebugGroup_, v66);

    uint64_t v67 = v62;
    sub_1B6D0E058(v60, v62, v70, 0, 6, v65);
    sub_1B6B59478((uint64_t)v49, 0, v86, 0);
    sub_1B6B59478(v61, v71, v72, 0);
    sub_1B6B59478(v75, 0, v79, 0);
    uint64_t v68 = v73;
    sub_1B6B597AC(v63, v73);
    objc_msgSend(v64, sel_setBufferOffset_atIndex_, v67 + v80, 6);
    uint64_t v59 = v80;
    objc_msgSend(v64, sel_setBufferOffset_atIndex_, v80, 7);
    sub_1B6B597AC(v63, v73);
    objc_msgSend(v64, sel_popDebugGroup);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    swift_release();
    swift_unknownObjectRelease();
  }
  else
  {
    swift_release();
    uint64_t v68 = v9;
  }
  swift_unknownObjectRelease();
  a2[35] = v49;
  a2[36] = 0;
  a2[37] = v86;
  a2[38] = v59;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  a2[45] = v75;
  a2[46] = 0;
  a2[47] = v79;
  swift_unknownObjectRelease();
  a2[39] = v84;
  a2[40] = v83;
  a2[41] = v78;
  swift_unknownObjectRelease();
  a2[42] = v82;
  a2[43] = v81;
  a2[44] = v77;
  uint64_t result = swift_unknownObjectRelease();
  a2[50] = v75;
  a2[51] = 0;
  a2[52] = v76;
  a2[48] = v68;
  return result;
}

void *sub_1B6C56788(void *result, uint64_t a2, float a3)
{
  void v21[2] = *MEMORY[0x1E4F143B8];
  uint64_t v3 = result[53];
  if (v3)
  {
    uint64_t v5 = result;
    uint64_t v7 = result[55];
    uint64_t v8 = 1 - result[56];
    uint64_t v9 = result[54];
    swift_unknownObjectRetain();
    swift_retain();
    uint64_t v10 = (void *)sub_1B62F1868(0, 4);
    uint64_t v12 = v11;
    uint64_t v19 = v13;
    uint64_t v20 = v7;
    if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
    {
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      v21[0] = 0;
      v21[1] = 0xE000000000000000;
      swift_retain();
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      int v14 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      v21[0] = 0;
      swift_retain();
      sub_1B6B33E34(v14, v21, 0xD00000000000003ALL, 0x80000001B6F4E7A0);
      swift_release();
      swift_release();
      swift_release();
    }
    else
    {
      uint64_t v15 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
      id v16 = v10;
      *(float *)&v15[v12] = a3;
      swift_release();
    }
    uint64_t v17 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
    id v18 = (void *)sub_1B6E31768();
    objc_msgSend(v17, sel_pushDebugGroup_, v18);

    sub_1B6C541E4((uint64_t)v17, v5, a2, v8, (uint64_t)v10, v12, v19, v3, v9, v20);
    objc_msgSend(v17, sel_popDebugGroup);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return (void *)swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B6C56A80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __n128 a5, __n128 a6, __n128 a7, __n128 a8)
{
  uint64_t v11 = *(void *)(a2 + 296);
  uint64_t v12 = *(void *)(a1 + 584);
  unsigned __int32 v13 = *(_DWORD *)(a1 + 456);
  *(_DWORD *)(a1 + 456) = sub_1B6D27950();
  swift_retain();
  int v14 = sub_1B62F1C70(&type metadata for Color);
  swift_retain();
  swift_unknownObjectRetain();
  swift_release();
  swift_retain();
  uint64_t v15 = sub_1B62F1C70(&type metadata for Scale1);
  swift_release();
  if (v15 || (swift_retain(), id v16 = sub_1B62F1C70(&type metadata for Scale2), swift_release(), v16))
  {
    char v17 = 1;
  }
  else
  {
    swift_retain();
    id v21 = sub_1B62F1C70(&type metadata for Scale3);
    swift_release();
    char v17 = v21 != 0;
  }
  id v18 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
  uint64_t v19 = (void *)sub_1B6E31768();
  objc_msgSend(v18, sel_pushDebugGroup_, v19);

  sub_1B6C55210(a5, a6, a7, a8, (uint64_t)v18, (void *)a1, v13, v14 != 0, v17, v12, v11, a3, a2, a4);
  objc_msgSend(v18, sel_popDebugGroup);
  swift_release();
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t sub_1B6C56C98(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 360);
  uint64_t v3 = *(void *)(a1 + 368) + 108;
  swift_unknownObjectRetain();
  uint64_t v4 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
  uint64_t v5 = (void *)sub_1B6E31768();
  objc_msgSend(v4, sel_pushDebugGroup_, v5);

  sub_1B6C54934((uint64_t)v4, a1, v2, v3);
  objc_msgSend(v4, sel_popDebugGroup);
  swift_unknownObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t sub_1B6C56D78(void *a1, uint64_t *a2, uint64_t a3, float a4, uint64_t a5, uint64_t a6)
{
  uint64_t v361 = *MEMORY[0x1E4F143B8];
  uint64_t v7 = *a2;
  uint64_t v351 = v7;
  uint64_t v8 = *(void *)(v7 + 16);
  if (!v8) {
    goto LABEL_30;
  }
  uint64_t v10 = (uint64_t *)(a6 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
  uint64_t v11 = v7 + 32;
  uint64_t v12 = 0;
  for (uint64_t i = 0; i != v8; ++i)
  {
    int v14 = (int *)(v11 + 8 * i);
    int v15 = *v14;
    int v16 = v14[1];
    BOOL v17 = v15 == -1 && v16 == 0;
    if (!v17 && (v15 & 0x80000000) == 0 && v10[1] > v15)
    {
      uint64_t v18 = *v10;
      if (v16 == -1 || *(_DWORD *)(*v10 + 12 * v15 + 8) == v16)
      {
        uint64_t v20 = *(void *)(*(void *)(a6 + 136) + 8 * *(int *)(v18 + 12 * v15) + 32);
        uint64_t v21 = *(void *)(v20 + 48);
        uint64_t v22 = *(void *)(v21 + 16);
        if (v22)
        {
          uint64_t v23 = (ValueMetadata **)(v21 + 32);
          uint64_t v24 = *(void *)(v21 + 16);
          while (*v23 != &type metadata for ParticleSubSpawn.State)
          {
            v23 += 5;
            if (!--v24) {
              goto LABEL_5;
            }
          }
          uint64_t v25 = *(__int16 *)(v18 + 12 * v15 + 4);
          uint64_t v26 = (void *)(v21 + 56);
          while ((ValueMetadata *)*(v26 - 3) != &type metadata for ParticleSpawnState)
          {
            v26 += 5;
            if (!--v22) {
              goto LABEL_5;
            }
          }
          if (*(uint64_t *)(*(void *)(v20 + 128) + *v26 + (v25 << 7) + 80) > 0) {
            ++v12;
          }
        }
      }
    }
LABEL_5:
    ;
  }
  if (v12 < 1)
  {
LABEL_30:
    return sub_1B6C56C98(a3);
  }
  int v305 = v12;
  uint64_t v27 = 144 * v12;
  swift_retain();
  id v28 = (void *)sub_1B62F1868(0, v27);
  uint64_t v343 = v29;
  uint64_t v334 = v30;
  swift_unknownObjectRetain();
  swift_release();
  id v31 = &selRef_setToShift_;
  uint64_t v344 = v28;
  id v32 = objc_msgSend(v28, sel_storageMode);
  uint64_t v33 = 0;
  if (v32 != (id)2)
  {
    uint64_t v34 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v35 = v344;
    uint64_t v33 = &v34[v343];
  }
  uint64_t v345 = v33;
  swift_bridgeObjectRetain();
  uint64_t v36 = 0;
  uint64_t v37 = 0;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  long long v43 = xmmword_1B6E4F370;
  long long v44 = xmmword_1B6E4F2E0;
  long long v45 = xmmword_1B6E4F320;
  long long v46 = xmmword_1B6E4F300;
  uint64_t v47 = a6;
  v348 = (uint64_t *)a3;
  do
  {
    id v49 = (int *)(v11 + 8 * v42);
    int v50 = v49[1];
    uint64_t v51 = *v49;
    if ((v51 != -1 || v50 != 0) && (v51 & 0x80000000) == 0)
    {
      uint64_t v53 = v10[1];
      if (v53 > v51)
      {
        uint64_t v54 = *v10;
        uint64_t v55 = *v10 + 12 * (int)v51;
        if (v50 == -1 || *(_DWORD *)(v55 + 8) == v50)
        {
          uint64_t v57 = *(void *)(*(void *)(v47 + 136) + 8 * *(int *)(v54 + 12 * (int)v51) + 32);
          uint64_t v58 = *(void *)(v57 + 48);
          uint64_t v59 = *(void *)(v58 + 16);
          if (v59)
          {
            uint64_t v60 = *(__int16 *)(v55 + 4);
            uint64_t v61 = (void *)(v58 + 56);
            uint64_t v62 = v61;
            uint64_t v63 = v59;
            while ((ValueMetadata *)*(v62 - 3) != &type metadata for ParticleSubSpawn.State)
            {
              v62 += 5;
              if (!--v63) {
                goto LABEL_34;
              }
            }
            uint64_t v64 = *(void *)(v57 + 128);
            uint64_t v65 = (uint64_t *)(v64 + *v62 + (v60 << 6));
            uint64_t v330 = *v65;
            uint64_t v325 = v65[1];
            uint64_t v332 = v65[2];
            uint64_t v66 = v65[4];
            uint64_t v341 = v65[3];
            uint64_t v67 = v61;
            uint64_t v68 = v59;
            while ((ValueMetadata *)*(v67 - 3) != &type metadata for ParticleSubSpawn)
            {
              v67 += 5;
              if (!--v68) {
                goto LABEL_34;
              }
            }
            uint64_t v323 = v66;
            long long v69 = (int *)(v64 + *v67 + 24 * (int)v60);
            uint64_t v70 = v69[1];
            uint64_t v71 = *v69;
            uint64_t v72 = *v69;
            int v312 = *((unsigned __int8 *)v69 + 12);
            char v73 = *((unsigned char *)v69 + 13);
            char v315 = *((unsigned char *)v69 + 14);
            char v318 = *((unsigned char *)v69 + 15);
            int v74 = v69[4];
            while ((ValueMetadata *)*(v61 - 3) != &type metadata for ParticleSpawnState)
            {
              v61 += 5;
              if (!--v59) {
                goto LABEL_33;
              }
            }
            uint64_t v75 = v64 + *v61 + (v60 << 7);
            if (*(uint64_t *)(v75 + 80) <= 0)
            {
LABEL_33:
              id v31 = &selRef_setToShift_;
              goto LABEL_34;
            }
            uint64_t v310 = v41;
            uint64_t v346 = v36;
            uint64_t v338 = v37;
            uint64_t v335 = v38;
            uint64_t v297 = v40;
            uint64_t v299 = v39;
            long long v306 = v44;
            long long v308 = v43;
            long long v301 = v46;
            long long v303 = v45;
            uint64_t v295 = *(void *)(v75 + 72);
            long long v293 = *(_OWORD *)(v75 + 88);
            int v292 = *((unsigned __int8 *)v69 + 20);
            if (v72 == -1 && !v70 || (v71 & 0x80000000) != 0)
            {
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v97 = v325;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v80 = v330;
              float32x4_t v98 = (float32x4_t)v301;
              float32x4_t v99 = (float32x4_t)v303;
              float32x4_t v100 = (float32x4_t)v306;
              long long v101 = v308;
              uint64_t v79 = v310;
              id v31 = &selRef_setToShift_;
            }
            else
            {
              if (v53 <= v71)
              {
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
              }
              else
              {
                int v76 = *(_DWORD *)(v54 + 12 * (int)v71 + 8);
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                swift_bridgeObjectRetain();
                if (v70 == -1 || v76 == v70)
                {
                  swift_retain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  swift_bridgeObjectRetain();
                  sub_1B6BFF7CC(a1, a6, a6, (uint64_t)a1, (uint64_t)v352);
                  float32x4_t v287 = (float32x4_t)v352[0];
                  float32x4_t v284 = (float32x4_t)v352[1];
                  float32x4_t v281 = (float32x4_t)v352[2];
                  float32x4_t v280 = (float32x4_t)v352[3];
                  char v290 = v353;
                  swift_release();
                  sub_1B6C5894C((uint64_t)v352, (uint64_t)v360);
                  if (v360[65]) {
                    goto LABEL_210;
                  }
                  swift_retain();
                  sub_1B6BFF980((void *)(v72 | (v70 << 32)), a6, a6, v72 | (v70 << 32), (uint64_t)v354);
                  float32x2_t v77 = (float32x2_t)v354[0];
                  uint64_t v276 = v354[1];
                  float32x4_t v277 = v355;
                  float32x4_t v278 = v356;
                  float32x4_t v279 = v357;
                  char v78 = v358;
                  swift_release();
                  sub_1B6C5894C((uint64_t)v354, (uint64_t)v359);
                  if (v359[65])
                  {
LABEL_210:
                    sub_1B6E328C8();
                    sub_1B6E31948();
                    sub_1B681F698();
                    sub_1B6E31948();
                    swift_bridgeObjectRelease();
                    sub_1B6E31948();
                    sub_1B6E31948();
                    sub_1B6E31948();
                    uint64_t result = sub_1B6E32BE8();
                    __break(1u);
                    return result;
                  }
                  uint64_t v79 = v310;
                  uint64_t v80 = v330;
                  char v81 = v318;
                  char v82 = v315;
                  int v83 = v312;
                  if (v290)
                  {
                    if (v78)
                    {
                      float32x4_t v98 = (float32x4_t)v301;
                      float32x4_t v99 = (float32x4_t)v303;
                      float32x4_t v100 = (float32x4_t)v306;
                      long long v101 = v308;
                      goto LABEL_140;
                    }
                    float32x2_t v90 = v77;
                    uint64_t v89 = v276;
                    uint64_t v91 = v277.i64[1];
                    uint64_t v92 = v277.i64[0];
                    uint64_t v93 = v278.i64[1];
                    uint64_t v94 = v278.i64[0];
                    uint64_t v95 = v279.i64[1];
                    uint64_t v96 = v279.i64[0];
                  }
                  else if (v78)
                  {
                    uint64_t v89 = v287.i64[1];
                    float32x2_t v90 = *(float32x2_t *)v287.f32;
                    uint64_t v91 = v284.i64[1];
                    uint64_t v92 = v284.i64[0];
                    uint64_t v93 = v281.i64[1];
                    uint64_t v94 = v281.i64[0];
                    uint64_t v95 = v280.i64[1];
                    uint64_t v96 = v280.i64[0];
                  }
                  else
                  {
                    *(float32x2_t *)v84.f32 = v77;
                    v84.i64[1] = v276;
                    float32x4_t v85 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v287, v77.f32[0]), v284, v77, 1), v281, v84, 2), v280, v84, 3);
                    float32x4_t v86 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v287, v277.f32[0]), v284, *(float32x2_t *)v277.f32, 1), v281, v277, 2), v280, v277, 3);
                    float32x4_t v87 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v287, v278.f32[0]), v284, *(float32x2_t *)v278.f32, 1), v281, v278, 2), v280, v278, 3);
                    float32x4_t v88 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v287, v279.f32[0]), v284, *(float32x2_t *)v279.f32, 1), v281, v279, 2), v280, v279, 3);
                    uint64_t v89 = v85.i64[1];
                    float32x2_t v90 = *(float32x2_t *)v85.f32;
                    uint64_t v91 = v86.i64[1];
                    uint64_t v92 = v86.i64[0];
                    uint64_t v93 = v87.i64[1];
                    uint64_t v94 = v87.i64[0];
                    uint64_t v95 = v88.i64[1];
                    uint64_t v96 = v88.i64[0];
                  }
                  *(float32x2_t *)v98.f32 = v90;
                  v98.i64[1] = v89;
                  v99.i64[0] = v92;
                  v99.i64[1] = v91;
                  v100.i64[0] = v94;
                  v100.i64[1] = v93;
                  *(void *)&long long v101 = v96;
                  *((void *)&v101 + 1) = v95;
LABEL_140:
                  id v31 = &selRef_setToShift_;
                  uint64_t v97 = v325;
LABEL_75:
                  uint64_t v102 = *(void *)(v80 + 16);
                  long long v103 = &v345[144 * v79];
                  *((_DWORD *)v103 + 20) = v74;
                  uint64_t v104 = (int *)(v103 + 80);
                  if (v341) {
                    int v105 = v83;
                  }
                  else {
                    int v105 = 0;
                  }
                  BOOL v106 = v105 == 1 && *(void *)(v341 + 16) != 0;
                  float32x4_t v316 = v99;
                  float32x4_t v319 = v98;
                  uint64_t v313 = v102;
                  float32x4_t v289 = (float32x4_t)v101;
                  float32x4_t v291 = v100;
                  BOOL v288 = v106;
                  uint64_t v285 = (float32x4_t *)&v345[144 * v79];
                  float32x4_t v286 = v104;
                  if (v332)
                  {
                    BOOL v107 = *(void *)(v332 + 16) != 0;
                    if ((v82 & 1) != 0 && v97)
                    {
LABEL_84:
                      BOOL v283 = v107;
                      BOOL v282 = *(void *)(v97 + 16) != 0;
                      if ((v81 & 1) == 0)
                      {
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        goto LABEL_98;
                      }
LABEL_93:
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if (v323)
                      {
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        uint64_t v112 = *(void *)(v323 + 16);
                        swift_bridgeObjectRelease();
                        BOOL v17 = v112 == 0;
                        id v31 = &selRef_setToShift_;
                        int v109 = !v17;
LABEL_99:
                        BOOL v108 = v283;
                        BOOL v111 = v283;
                        BOOL v110 = v282;
                        if (v73) {
                          goto LABEL_101;
                        }
                        goto LABEL_100;
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
LABEL_98:
                      swift_bridgeObjectRelease();
                      int v109 = 0;
                      goto LABEL_99;
                    }
                  }
                  else
                  {
                    if ((v82 & 1) == 0)
                    {
                      if (v81)
                      {
                        BOOL v282 = 0;
                        BOOL v283 = 0;
                        goto LABEL_93;
                      }
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      int v109 = 0;
                      BOOL v110 = 0;
                      BOOL v108 = 0;
                      BOOL v111 = 0;
                      goto LABEL_133;
                    }
                    BOOL v107 = 0;
                    if (v97) {
                      goto LABEL_84;
                    }
                  }
                  BOOL v283 = v107;
                  if (v81)
                  {
                    BOOL v282 = 0;
                    goto LABEL_93;
                  }
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  BOOL v108 = v283;
                  int v109 = 0;
                  BOOL v110 = 0;
                  BOOL v111 = v283;
LABEL_133:
                  if (v73)
                  {
LABEL_101:
                    int32x4_t v113 = (int32x4_t)vmulq_f32(v319, v319);
                    float32x4_t v114 = vmulq_f32(v316, v316);
                    int32x4_t v115 = (int32x4_t)vmulq_f32(v291, v291);
                    int32x4_t v116 = vzip2q_s32(v113, v115);
                    float32x4_t v117 = (float32x4_t)vzip1q_s32(vzip1q_s32(v113, v115), (int32x4_t)v114);
                    float32x4_t v118 = (float32x4_t)vtrn2q_s32(v113, (int32x4_t)v114);
                    v118.i32[2] = v115.i32[1];
                    float32x4_t v119 = vaddq_f32((float32x4_t)vzip1q_s32(v116, vdupq_laneq_s32((int32x4_t)v114, 2)), vaddq_f32(v117, v118));
                    v114.i64[0] = 0x80000000800000;
                    v114.i64[1] = 0x80000000800000;
                    int32x4_t v120 = vcgeq_f32(v114, v119);
                    v119.i32[3] = 0;
                    float32x4_t v121 = vrsqrteq_f32(v119);
                    float32x4_t v122 = vmulq_f32(v121, vrsqrtsq_f32(v119, vmulq_f32(v121, v121)));
                    int32x4_t v123 = v120;
                    v123.i32[3] = 0;
                    float32x4_t v124 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v123), (int8x16_t)v119, (int8x16_t)vmulq_f32(v122, vrsqrtsq_f32(v119, vmulq_f32(v122, v122))));
                    float32x4_t v125 = vmulq_n_f32(v319, v124.f32[0]);
                    float32x4_t v126 = vmulq_lane_f32(v316, *(float32x2_t *)v124.f32, 1);
                    float32x4_t v127 = vmulq_laneq_f32(v291, v124, 2);
                    int8x16_t v128 = (int8x16_t)vuzp1q_s32((int32x4_t)v127, (int32x4_t)v127);
                    int8x16_t v129 = (int8x16_t)vuzp1q_s32((int32x4_t)v126, (int32x4_t)v126);
                    int32x4_t v130 = (int32x4_t)v125;
                    uint64_t v47 = a6;
                    if (v120.i32[0])
                    {
                      int8x16_t v131 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v128, (int8x16_t)v127, 0xCuLL), vnegq_f32(v126)), v127, (float32x4_t)vextq_s8(v129, (int8x16_t)v126, 0xCuLL));
                      int32x4_t v130 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v131, (int32x4_t)v131), v131, 0xCuLL);
                    }
                    int8x16_t v132 = (int8x16_t)vuzp1q_s32((int32x4_t)v125, (int32x4_t)v125);
                    float32x4_t v133 = v126;
                    long long v44 = v306;
                    long long v46 = v301;
                    long long v45 = v303;
                    if (v120.i32[1])
                    {
                      int8x16_t v134 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v132, (int8x16_t)v125, 0xCuLL), vnegq_f32(v127)), v125, (float32x4_t)vextq_s8(v128, (int8x16_t)v127, 0xCuLL));
                      float32x4_t v133 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v134, (int32x4_t)v134), v134, 0xCuLL);
                    }
                    if (v120.i32[2])
                    {
                      int8x16_t v135 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v129, (int8x16_t)v126, 0xCuLL), vnegq_f32(v125)), v126, (float32x4_t)vextq_s8(v132, (int8x16_t)v125, 0xCuLL));
                      float32x4_t v127 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v135, (int32x4_t)v135), v135, 0xCuLL);
                    }
                    float v136 = (float)(*(float *)v130.i32 + v133.f32[1]) + v127.f32[2];
                    long long v43 = v308;
                    if (v136 > 0.0)
                    {
                      float v137 = sqrtf(v136 + 1.0);
                      float32x4_t v138 = (float32x4_t)vzip2q_s32((int32x4_t)v133, vuzp1q_s32((int32x4_t)v133, (int32x4_t)v127));
                      v138.i32[2] = v130.i32[1];
                      float32x4_t v139 = (float32x4_t)vtrn2q_s32((int32x4_t)v127, vzip2q_s32((int32x4_t)v127, v130));
                      v139.i32[2] = v133.i32[0];
                      float32x4_t v141 = vsubq_f32(v138, v139);
                      v138.f32[3] = v137;
                      v139.f32[3] = v137;
                      float32x4_t v140 = vmulq_f32(v138, v139);
                      v141.i32[3] = v140.i32[3];
LABEL_109:
                      v140.f32[0] = 0.5 / v137;
                      float32x4_t v142 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v140.f32, 0);
LABEL_118:
                      *uint64_t v285 = v319;
                      v285[1] = v316;
                      v285[2] = v291;
                      v285[3] = v289;
                      long long v153 = &v345[144 * v310];
                      *((float32x4_t *)v153 + 4) = vmulq_f32(v141, v142);
                      *float32x4_t v286 = v74;
                      v153[84] = v288;
                      v153[85] = v111;
                      v153[86] = v108;
                      v153[87] = v110;
                      v153[88] = v109;
                      *((_DWORD *)v153 + 28) = v313;
                      *((_DWORD *)v153 + 29) = v297;
                      uint64_t v40 = v313 + v297;
                      v153[89] = v292 == 2;
                      if (v288) {
                        uint64_t v154 = v313;
                      }
                      else {
                        uint64_t v154 = 0;
                      }
                      *((_DWORD *)v153 + 30) = v299;
                      *((_DWORD *)v153 + 31) = v335;
                      uint64_t v39 = v154 + v299;
                      if (v111) {
                        uint64_t v155 = v313;
                      }
                      else {
                        uint64_t v155 = 0;
                      }
                      uint64_t v38 = v155 + v335;
                      *((_OWORD *)v153 + 6) = v293;
                      if (v110) {
                        uint64_t v156 = v313;
                      }
                      else {
                        uint64_t v156 = 0;
                      }
                      *((_DWORD *)v153 + 32) = v338;
                      *((_DWORD *)v153 + 33) = v346;
                      uint64_t v37 = v156 + v338;
                      if (v109) {
                        uint64_t v157 = v313;
                      }
                      else {
                        uint64_t v157 = 0;
                      }
                      uint64_t v36 = v157 + v346;
                      uint64_t v41 = v310 + 1;
                      *((_DWORD *)v153 + 34) = v295;
                      goto LABEL_34;
                    }
                    if (*(float *)v130.i32 < v133.f32[1] || *(float *)v130.i32 < v127.f32[2])
                    {
                      if (v133.f32[1] <= v127.f32[2])
                      {
                        float v137 = sqrtf((float)((float)(v127.f32[2] + 1.0) - *(float *)v130.i32) - v133.f32[1]);
                        float32x2_t v158 = (float32x2_t)vzip2q_s32(v130, (int32x4_t)v133).u64[0];
                        float32x2_t v159 = (float32x2_t)__PAIR64__(v130.u32[1], LODWORD(v137));
                        float32x2_t v160 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v133.f32, 0);
                        *(float32x2_t *)v140.f32 = vsub_f32(*(float32x2_t *)v130.i8, v160);
                        v160.f32[0] = v137;
                        v160.i32[0] = vmul_f32(v159, v160).u32[0];
                        v160.i32[1] = v140.i32[1];
                        *(float32x2_t *)v141.f32 = vadd_f32(v158, *(float32x2_t *)v127.f32);
                        *(float32x2_t *)&v141.u32[2] = v160;
                        goto LABEL_109;
                      }
                      float v144 = sqrtf((float)((float)(v133.f32[1] + 1.0) - *(float *)v130.i32) - v127.f32[2]);
                      int8x16_t v145 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v130.i8, 1), v133);
                      *(int32x2_t *)v133.f32 = vdup_laneq_s32((int32x4_t)v133, 2);
                      float32x2_t v146 = vadd_f32(*(float32x2_t *)v133.f32, *(float32x2_t *)v127.f32);
                      v133.f32[0] = v144;
                      v133.i32[0] = vmul_f32(*(float32x2_t *)v133.f32, (float32x2_t)__PAIR64__(v127.u32[1], LODWORD(v144))).u32[0];
                      v133.i32[1] = v146.i32[1];
                      int32x2_t v152 = (int32x2_t)vsubq_f32(v127, (float32x4_t)vdupq_laneq_s32(v130, 2)).u64[0];
                      float32x4_t v142 = (float32x4_t)vextq_s8(vextq_s8(v145, v145, 4uLL), (int8x16_t)v133, 0xCuLL);
                      v142.i32[3] = v152.i32[0];
                      *(float *)v152.i32 = 0.5 / v144;
                    }
                    else
                    {
                      float v147 = sqrtf((float)((float)(*(float *)v130.i32 + 1.0) - v133.f32[1]) - v127.f32[2]);
                      float32x2_t v148 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v133.f32, 0);
                      float32x2_t v149 = vadd_f32(*(float32x2_t *)v130.i8, v148);
                      v148.f32[0] = v147;
                      v142.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v130.u32[1], LODWORD(v147)), v148).u32[0];
                      v142.i32[1] = v149.i32[1];
                      float32x2_t v150 = (float32x2_t)vzip2q_s32(v130, (int32x4_t)v133).u64[0];
                      LODWORD(v151) = vadd_f32(v150, *(float32x2_t *)v127.f32).u32[0];
                      int32x2_t v152 = (int32x2_t)vsub_f32(v150, *(float32x2_t *)v127.f32);
                      HIDWORD(v151) = v152.i32[1];
                      v142.i64[1] = v151;
                      *(float *)v152.i32 = 0.5 / v147;
                    }
                    float32x4_t v141 = (float32x4_t)vdupq_lane_s32(v152, 0);
                    goto LABEL_118;
                  }
LABEL_100:
                  BOOL v111 = v108;
                  LOBYTE(v108) = 0;
                  goto LABEL_101;
                }
              }
              swift_bridgeObjectRetain();
              uint64_t v97 = v325;
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              swift_bridgeObjectRetain();
              uint64_t v80 = v330;
              float32x4_t v98 = (float32x4_t)v301;
              float32x4_t v99 = (float32x4_t)v303;
              float32x4_t v100 = (float32x4_t)v306;
              long long v101 = v308;
              id v31 = &selRef_setToShift_;
              uint64_t v79 = v310;
            }
            char v81 = v318;
            char v82 = v315;
            int v83 = v312;
            goto LABEL_75;
          }
        }
      }
    }
LABEL_34:
    ++v42;
  }
  while (v42 != v8);
  uint64_t v161 = v39;
  uint64_t v336 = v38;
  uint64_t v339 = v37;
  uint64_t v347 = v36;
  uint64_t v162 = v40;
  sub_1B62D8C3C((uint64_t)&v351);
  swift_retain();
  long long v163 = (void *)sub_1B62F1868(0, 16 * v162);
  uint64_t v342 = v164;
  uint64_t v331 = v165;
  id v166 = [(id)swift_unknownObjectRetain() v31[253]];
  uint64_t v167 = 0;
  if (v166 != (id)2)
  {
    long long v168 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v169 = v163;
    uint64_t v167 = &v168[v342];
  }
  uint64_t v304 = v167;
  uint64_t v333 = (uint64_t)v163;
  long long v170 = (void *)sub_1B62F1868(0, 16 * v161);
  uint64_t v172 = v171;
  uint64_t v327 = v173;
  id v174 = [(id)swift_unknownObjectRetain() (SEL)v31 + 1304];
  long long v175 = 0;
  if (v174 != (id)2)
  {
    long long v176 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v177 = v170;
    long long v175 = &v176[v172];
  }
  unsigned int v300 = v175;
  uint64_t v328 = v172;
  uint64_t v329 = (uint64_t)v170;
  uint64_t v178 = (void *)sub_1B62F1868(0, 16 * v336);
  uint64_t v180 = v179;
  uint64_t v324 = v181;
  id v182 = [(id)swift_unknownObjectRetain() (SEL)v31 + 1304];
  uint64_t v183 = 0;
  if (v182 != (id)2)
  {
    uint64_t v184 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v185 = v178;
    uint64_t v183 = &v184[v180];
  }
  v298 = v183;
  uint64_t v337 = (uint64_t)v178;
  float32x4_t v186 = (void *)sub_1B62F1868(0, 16 * v339);
  uint64_t v340 = v187;
  uint64_t v320 = v188;
  id v189 = [(id)swift_unknownObjectRetain() (SEL)v31 + 1304];
  uint64_t v190 = 0;
  if (v189 != (id)2)
  {
    uint64_t v191 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v192 = v186;
    uint64_t v190 = &v191[v340];
  }
  v296 = v190;
  uint64_t v322 = (uint64_t)v186;
  float32x4_t v193 = (void *)sub_1B62F1868(0, 16 * v347);
  uint64_t v195 = v194;
  uint64_t v314 = v196;
  id v197 = [(id)swift_unknownObjectRetain() (SEL)v31 + 1304];
  uint64_t v198 = 0;
  if (v197 != (id)2)
  {
    float32x4_t v199 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v200 = v193;
    uint64_t v198 = &v199[v195];
  }
  unsigned __int32 v294 = v198;
  uint64_t v311 = v195;
  uint64_t v317 = (uint64_t)v193;
  uint64_t v326 = v180;
  uint64_t v201 = (void *)sub_1B62F1868(0, 4 * v348[14]);
  uint64_t v203 = v202;
  uint64_t v309 = v204;
  id v205 = objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode);
  float32x4_t v206 = 0;
  float32x4_t v207 = v345;
  if (v205 != (id)2)
  {
    int v208 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v209 = v201;
    float32x4_t v206 = &v208[v203];
  }
  __n128 v302 = v206;
  uint64_t v307 = v203;
  swift_bridgeObjectRetain();
  uint64_t v210 = 0;
  uint64_t v211 = 0;
  uint64_t v212 = 0;
  uint64_t v213 = a6;
  do
  {
    float32x4_t v214 = (int *)(v11 + 8 * v212);
    int v215 = v214[1];
    uint64_t v216 = *v214;
    BOOL v217 = v216 == -1 && v215 == 0;
    if (!v217 && (v216 & 0x80000000) == 0 && v10[1] > v216)
    {
      uint64_t v218 = *v10 + 12 * (int)v216;
      if (v215 == -1 || *(_DWORD *)(v218 + 8) == v215)
      {
        uint64_t v220 = *(void *)(*(void *)(v213 + 136) + 8 * *(int *)(*v10 + 12 * (int)v216) + 32);
        uint64_t v221 = *(void *)(v220 + 48);
        uint64_t v222 = *(void *)(v221 + 16);
        if (v222)
        {
          uint64_t v223 = *(__int16 *)(v218 + 4);
          int v224 = (void *)(v221 + 56);
          float v225 = (void *)(v221 + 56);
          uint64_t v226 = *(void *)(v221 + 16);
          while ((ValueMetadata *)*(v225 - 3) != &type metadata for ParticleSubSpawn.State)
          {
            v225 += 5;
            if (!--v226) {
              goto LABEL_155;
            }
          }
          uint64_t v227 = *(void *)(v220 + 128);
          uint64_t v228 = (uint64_t *)(v227 + *v225 + (v223 << 6));
          uint64_t v230 = *v228;
          uint64_t v229 = v228[1];
          uint64_t v231 = v228[2];
          uint64_t v232 = v228[3];
          uint64_t v233 = v228[4];
          uint64_t v234 = v228[7];
          while ((ValueMetadata *)*(v224 - 3) != &type metadata for ParticleSpawnState)
          {
            v224 += 5;
            if (!--v222) {
              goto LABEL_155;
            }
          }
          if (*(uint64_t *)(v227 + *v224 + (v223 << 7) + 80) > 0)
          {
            uint64_t v235 = *(void *)(v230 + 16);
            uint64_t v236 = (int *)&v207[144 * v211];
            uint64_t v237 = v236[30];
            uint64_t v238 = v236[31];
            uint64_t v240 = v236[32];
            uint64_t v239 = v236[33];
            if (v235)
            {
              long long v241 = (long long *)(v230 + 32);
              uint64_t v242 = &v304[16 * *(int *)&v207[144 * v211 + 116]];
              uint64_t v243 = v235;
              do
              {
                long long v244 = *v241++;
                *(_OWORD *)uint64_t v242 = v244;
                v242 += 16;
                --v243;
              }
              while (v243);
            }
            if (v232 && v235 && v207[144 * v211 + 84])
            {
              uint64_t v245 = (long long *)(v232 + 32);
              uint64_t v246 = &v300[16 * v237];
              uint64_t v247 = v235;
              do
              {
                long long v248 = *v245++;
                *(_OWORD *)uint64_t v246 = v248;
                v246 += 16;
                --v247;
              }
              while (v247);
            }
            if (v231 && v235 && *(void *)(v231 + 16))
            {
              uint64_t v249 = (long long *)(v231 + 32);
              long long v250 = &v298[16 * v238];
              uint64_t v251 = v235;
              do
              {
                long long v252 = *v249++;
                *(_OWORD *)long long v250 = v252;
                v250 += 16;
                --v251;
              }
              while (v251);
            }
            if (v229 && v235 && v207[144 * v211 + 87])
            {
              uint64_t v253 = (long long *)(v229 + 32);
              uint64_t v254 = &v296[16 * v240];
              uint64_t v255 = v235;
              do
              {
                long long v256 = *v253++;
                *(_OWORD *)uint64_t v254 = v256;
                v254 += 16;
                --v255;
              }
              while (v255);
            }
            if (v233 && v235 && v207[144 * v211 + 88])
            {
              uint64_t v257 = (long long *)(v233 + 32);
              uint64_t v258 = &v294[16 * v239];
              do
              {
                long long v259 = *v257++;
                *(_OWORD *)uint64_t v258 = v259;
                v258 += 16;
                --v235;
              }
              while (v235);
            }
            uint64_t v260 = *(void *)(v234 + 16);
            if (v260)
            {
              long long v261 = v201;
              uint64_t v262 = v211;
              memcpy(&v302[4 * v210], (const void *)(v234 + 32), 4 * v260);
              uint64_t v211 = v262;
              uint64_t v201 = v261;
              uint64_t v213 = a6;
              v210 += v260;
            }
            ++v211;
            float32x4_t v207 = v345;
          }
        }
      }
    }
LABEL_155:
    ++v212;
  }
  while (v212 != v8);
  sub_1B62D8C3C((uint64_t)&v351);
  swift_retain();
  long long v263 = (void *)sub_1B62F1868(0, 8);
  uint64_t v265 = v264;
  uint64_t v267 = v266;
  if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    v350[0] = 0;
    v350[1] = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    int v268 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v350[0] = 0;
    swift_retain();
    sub_1B6B33E34(v268, v350, 0xD000000000000048, 0x80000001B6F4E670);
    swift_release();
    swift_release();
  }
  else
  {
    long long v269 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v270 = v263;
    long long v271 = &v269[v265];
    *(float *)long long v271 = a4;
    *((_DWORD *)v271 + 1) = v305;
  }
  swift_release();
  uint64_t v272 = v348[45];
  uint64_t v273 = v348[46] + 108;
  swift_unknownObjectRetain();
  uint64_t v274 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
  uint64_t v275 = (void *)sub_1B6E31768();
  objc_msgSend(v274, sel_pushDebugGroup_, v275);

  sub_1B6C54D4C((uint64_t)v274, v348, v333, v342, v331, v329, v328, v327, v337, v326, v324, v322, v340, v320, v317, v311, v314, (uint64_t)v344, v343,
    v334,
    (uint64_t)v201,
    v307,
    v309,
    (uint64_t)v263,
    v265,
    v267,
    v272,
    v273);
  objc_msgSend(v274, sel_popDebugGroup);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_release();
  return swift_unknownObjectRelease();
}

uint64_t sub_1B6C58468(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, float a5)
{
  if (!*(void *)(a1 + 512)) {
    sub_1B6C52E90(a2, 0);
  }
  *(void *)(a1 + 448) = 1 - *(void *)(a1 + 448);
  uint64_t v10 = *(void *)(a1 + 464) + *(void *)(a1 + 112);
  *(void *)(a1 + 464) = v10;
  uint64_t v11 = swift_retain();
  uint64_t result = sub_1B62EC92C(v11);
  uint64_t v13 = *(void *)(a1 + 384);
  if (v13 < v10)
  {
    unint64_t v14 = result;
    sub_1B636A9A0(*(void *)(a4 + 32));
    sub_1B6C55E80(v14, (void *)a1, v10, a2);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v13 = *(void *)(a1 + 384);
  }
  if (v13 >= 1)
  {
    sub_1B6C56788((void *)a1, a2, a5);
    int v15 = *(void **)(a4 + 32);
    v16.n128_f64[0] = sub_1B62E9BFC();
    sub_1B6C56A80(a1, a2, a3, (uint64_t)v15, v16, v17, v18, v19);
    uint64_t v20 = *(void *)(a1 + 360);
    uint64_t v21 = *(void *)(a1 + 368) + 96;
    swift_unknownObjectRetain();
    uint64_t v22 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
    uint64_t v23 = (void *)sub_1B6E31768();
    objc_msgSend(v22, sel_pushDebugGroup_, v23);

    sub_1B6C546A4((uint64_t)v22, a1, v20, v21);
    objc_msgSend(v22, sel_popDebugGroup);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    if (*(unsigned char *)(a1 + 50) == 1)
    {
      uint64_t result = sub_1B695D774((uint64_t)v15, (uint64_t)v27);
      uint64_t v24 = v27[0];
      if (v27[0])
      {
        v39[0] = v27[0];
        v39[1] = v27[1];
        void v39[2] = v27[2];
        v39[3] = v27[3];
        v39[4] = v27[4];
        char v40 = v28 & 1;
        uint64x2_t v25 = (uint64x2_t)vdupq_n_s64(v28);
        int16x8_t v26 = (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v25, (uint64x2_t)xmmword_1B6E9D8C0), (int32x4_t)vshlq_u64(v25, (uint64x2_t)xmmword_1B6E9D8B0));
        *(int8x8_t *)v26.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v26), (int8x8_t)0x1000100010001);
        unsigned __int32 v41 = vmovn_s16(v26).u32[0];
        char v42 = BYTE5(v28) & 1;
        uint64_t v43 = v29;
        char v44 = v30 & 1;
        char v45 = v31 & 1;
        char v46 = v32 & 1;
        uint64_t v47 = v33;
        char v48 = v34 & 1;
        __int16 v49 = v35;
        char v50 = v36 & 1;
        char v51 = v37 & 1;
        int v52 = v38;
        sub_1B6C56D78(v15, v39, a1, a5, a2, a3);
        return sub_1B665066C(v24);
      }
    }
    else
    {
      return sub_1B6C56C98(a1);
    }
  }
  return result;
}

uint64_t sub_1B6C5879C(uint64_t result)
{
  if (*(uint64_t *)(result + 384) >= 1)
  {
    uint64_t v1 = (uint64_t *)result;
    uint64_t v2 = swift_retain();
    uint64_t v3 = sub_1B62EC92C(v2);
    uint64_t result = sub_1B6C55A20(v3, v1);
    if (result)
    {
      uint64_t v4 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
      uint64_t v5 = (void *)sub_1B6E31768();
      objc_msgSend(v4, sel_pushDebugGroup_, v5);

      sub_1B6C55BA8((uint64_t)v4, (uint64_t)v1);
      objc_msgSend(v4, sel_popDebugGroup);
      return swift_unknownObjectRelease();
    }
  }
  return result;
}

uint64_t sub_1B6C58878(uint64_t *a1)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *(void *)(*a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  swift_retain();
  if (v3)
  {
    swift_retain();
    sub_1B62F46E8();
    float v5 = v4;
    uint64_t v6 = a1[4];
    swift_retain();
    swift_retain();
    sub_1B62F6B80((uint64_t)a1);
    sub_1B6C01830(v6, v2, v3, v2, (uint64_t)a1, v5);
    sub_1B62F648C((uint64_t)a1);
    swift_release_n();
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1B6C5894C(uint64_t a1, uint64_t a2)
{
  sub_1B6C589CC(0, &qword_1E9DD6E78, (void (*)(uint64_t))sub_1B68947DC);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B6C589CC(uint64_t a1, unint64_t *a2, void (*a3)(uint64_t))
{
  if (!*a2)
  {
    a3(255);
    unint64_t v4 = sub_1B6E324B8();
    if (!v5) {
      atomic_store(v4, a2);
    }
  }
}

uint64_t sub_1B6C58A20()
{
  swift_unknownObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 64, 7);
}

uint64_t sub_1B6C58A60(int a1)
{
  return sub_1B6C55750(a1, *(id *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), *(void *)(v1 + 56));
}

uint64_t sub_1B6C58A70()
{
  swift_weakDestroy();

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B6C58AA8()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 44, 7);
}

uint64_t sub_1B6C58AE0()
{
  return sub_1B6C5592C(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32), *(_DWORD *)(v0 + 40));
}

uint64_t sub_1B6C58AF0()
{
  swift_release();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

void sub_1B6C58B28()
{
  uint64_t v1 = *v0;
  if (*v0)
  {
    uint64_t v2 = *(void *)(*(void *)(v1 + 16) + 16);
    uint64_t v3 = *(void *)(v1 + 32);
    swift_retain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    v0[1] = v3;
    uint64_t v4 = sub_1B6640FD8(v2, (__n128)xmmword_1B6E4F300, (__n128)xmmword_1B6E4F320, (__n128)xmmword_1B6E4F2E0, (__n128)xmmword_1B6E4F370);
    swift_bridgeObjectRelease();
    v0[2] = v4;
    uint64_t v5 = sub_1B6640FD8(v2, (__n128)xmmword_1B6E4F300, (__n128)xmmword_1B6E4F320, (__n128)xmmword_1B6E4F2E0, (__n128)xmmword_1B6E4F370);
    swift_bridgeObjectRelease();
    v0[3] = v5;
    uint64_t v6 = sub_1B6640FD8(v2, (__n128)xmmword_1B6E4F300, (__n128)xmmword_1B6E4F320, (__n128)xmmword_1B6E4F2E0, (__n128)xmmword_1B6E4F370);
    swift_release();
    swift_bridgeObjectRelease();
    v0[4] = v6;
  }
}

uint64_t sub_1B6C58C20()
{
  uint64_t v1 = v0;
  swift_retain();
  uint64_t v2 = swift_bridgeObjectRetain();
  uint64_t v3 = sub_1B6C5A974(v2, v0);
  swift_bridgeObjectRelease();
  swift_release();
  *(void *)(v0 + 40) = v3;
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(v0 + 24);
  int64_t v5 = *(void *)(v4 + 16);
  uint64_t v6 = MEMORY[0x1E4FBC860];
  if (v5)
  {
    uint64_t v19 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1B6C3D7EC(0, v5, 0);
    uint64_t v7 = 0;
    uint64_t v6 = v19;
    unint64_t v8 = *(void *)(v19 + 16);
    unint64_t v9 = v8 << 6;
    uint64_t v10 = v4 + 80;
    do
    {
      simd_float4x4 v11 = *(simd_float4x4 *)(v10 + v7 - 48);
      unint64_t v12 = *(void *)(v19 + 24);
      unint64_t v13 = v8 + 1;
      if (v8 >= v12 >> 1)
      {
        simd_float4 v17 = *(simd_float4 *)(v10 + v7 - 32);
        simd_float4 v18 = *(simd_float4 *)(v10 + v7 - 48);
        simd_float4 v15 = *(simd_float4 *)(v10 + v7);
        simd_float4 v16 = *(simd_float4 *)(v10 + v7 - 16);
        sub_1B6C3D7EC(v12 > 1, v8 + 1, 1);
        v11.columns[3] = v15;
        v11.columns[2] = v16;
        v11.columns[1] = v17;
        v11.columns[0] = v18;
      }
      simd_float4x4 v20 = __invert_f4(v11);
      *(void *)(v19 + 16) = v13;
      *(simd_float4x4 *)(v19 + v9 + v7 + 32) = v20;
      v7 += 64;
      unint64_t v8 = v13;
      --v5;
    }
    while (v5);
    swift_bridgeObjectRelease();
  }
  *(void *)(v1 + 48) = v6;
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C58D7C()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SkeletonData()
{
  return self;
}

void sub_1B6C58DF8(void *a1@<X8>)
{
  uint64_t v1 = MEMORY[0x1E4FBC860];
  *a1 = 0;
  a1[1] = v1;
  a1[2] = v1;
  a1[3] = v1;
  a1[4] = v1;
}

void sub_1B6C58E10(float32x4_t *a1, double a2, __n128 a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unint64_t v8 = *(void *)(a6 + 16);
  unint64_t v9 = *(void *)(a5 + 16);
  unint64_t v10 = v8 / v9;
  unint64_t v13 = v9 - 1;
  unint64_t v14 = (float *)(a5 + 32);
  float v15 = *(float *)(a5 + 32 + 4 * (v9 - 1));
  int32x2_t v16 = 0;
  if (v15 > 0.0)
  {
    float v17 = a2;
    *(float *)v16.i32 = fmodf(v17, v15);
  }
  float v18 = *v14;
  if (*(float *)v16.i32 < *v14)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    if (v9 > v8) {
      return;
    }
    goto LABEL_15;
  }
  if (v9 == 1)
  {
LABEL_10:
    if (v9 <= v8)
    {
      uint64_t v22 = (float32x4_t *)(a6 + 16 * v10 * v13 + 32);
      do
      {
        float32x4_t v23 = *v22++;
        *a1++ = v23;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    uint64_t v21 = 0;
    while (1)
    {
      float v18 = *(float *)(a5 + 36 + 4 * v21);
      if (*(float *)v16.i32 < v18) {
        break;
      }
      if (v13 == ++v21) {
        goto LABEL_10;
      }
    }
    uint64_t v19 = v21 & ~(v21 >> 63);
    uint64_t v20 = v21 + 1;
    if (v9 <= v8)
    {
LABEL_15:
      uint64_t v24 = 0;
      *(float *)v16.i32 = fminf(fmaxf((float)(*(float *)v16.i32 - v14[v19]) / (float)(v18 - v14[v19]), 0.0), 1.0);
      uint64_t v25 = v19 * v10;
      uint64_t v26 = v20 * v10;
      float32x4_t v27 = (float32x4_t)vdupq_lane_s32(v16, 0);
      do
      {
        float32x4_t v28 = vmlaq_f32(*(float32x4_t *)(a6 + 32 + 16 * (v24 + v25)), v27, vsubq_f32(*(float32x4_t *)(a6 + 32 + 16 * (v24 + v26)), *(float32x4_t *)(a6 + 32 + 16 * (v24 + v25))));
        v28.i32[3] = a3.n128_i32[3];
        ++v24;
        *a1++ = v28;
        --v10;
      }
      while (v10);
    }
  }
}

void sub_1B6C58F70(_OWORD *a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v7 = *(void *)(a5 + 16);
  unint64_t v8 = *(void *)(a4 + 16);
  unint64_t v9 = v7 / v8;
  unint64_t v12 = v8 - 1;
  unint64_t v13 = (float *)(a4 + 32);
  float v14 = *(float *)(a4 + 32 + 4 * (v8 - 1));
  float v15 = 0.0;
  if (v14 > 0.0)
  {
    float v16 = a2;
    float v15 = fmodf(v16, v14);
  }
  float v17 = *v13;
  if (v15 < *v13)
  {
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    float v20 = *v13;
    if (v8 > v7) {
      return;
    }
    goto LABEL_15;
  }
  if (v8 == 1)
  {
LABEL_10:
    if (v8 <= v7)
    {
      uint64_t v22 = (long long *)(a5 + 16 * v9 * v12 + 32);
      do
      {
        long long v23 = *v22++;
        *a1++ = v23;
        --v9;
      }
      while (v9);
    }
  }
  else
  {
    uint64_t v21 = 0;
    while (1)
    {
      float v17 = *(float *)(a4 + 36 + 4 * v21);
      if (v15 < v17) {
        break;
      }
      if (v12 == ++v21) {
        goto LABEL_10;
      }
    }
    uint64_t v18 = v21 & ~(v21 >> 63);
    float v20 = v13[v18];
    uint64_t v19 = v21 + 1;
    if (v8 <= v7)
    {
LABEL_15:
      uint64_t v24 = 0;
      float v25 = fminf(fmaxf((float)(v15 - v20) / (float)(v17 - v20), 0.0), 1.0);
      uint64_t v26 = v18 * v9;
      uint64_t v27 = v19 * v9;
      uint64_t v28 = a5 + 32;
      do
      {
        uint64_t v29 = v24 + 1;
        sub_1B683FC58(*(float32x4_t *)(v28 + 16 * (v24 + v26)), *(float32x4_t *)(v28 + 16 * (v24 + v27)), v25);
        *a1++ = v30;
        uint64_t v24 = v29;
        --v9;
      }
      while (v9);
    }
  }
}

uint64_t sub_1B6C590D4()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t type metadata accessor for SkeletonAnimation()
{
  return self;
}

uint64_t sub_1B6C59168(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(a2 + 8))(v2, 1, ObjectType, a2);
}

double sub_1B6C591C0@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0xFFFFFFFFLL;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E4F300;
  *(_OWORD *)(a1 + 32) = xmmword_1B6E4F320;
  double result = 0.0;
  *(_OWORD *)(a1 + 48) = xmmword_1B6E4F2E0;
  *(_OWORD *)(a1 + 64) = xmmword_1B6E4F370;
  return result;
}

uint64_t *sub_1B6C591F4(uint64_t a1)
{
  double v2 = *(double *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
  long long v3 = *(_OWORD *)(v1 + 32);
  v70[0] = *(_OWORD *)(v1 + 16);
  v70[1] = v3;
  uint64_t v71 = *(void *)(v1 + 48);
  sub_1B62C9DA8(a1, (uint64_t)v70, 0x200000000, v56);
  double result = (uint64_t *)sub_1B62CA210((uint64_t)v56, (uint64_t)v57, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v57[0])
  {
    long long v64 = v57[0];
    long long v65 = v57[1];
    uint64_t v66 = v58;
    if (v63 >= 1)
    {
      uint64_t v47 = v60;
      if (v60)
      {
        uint64_t v46 = v59;
        int64_t v5 = v62;
        int v54 = *(unsigned __int8 *)(v61 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        uint64_t v53 = v62[4];
        uint64_t v6 = (void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        char v44 = v62 + 8;
        uint64_t v45 = (uint64_t)(v62 + 6);
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v7 = 0;
        do
        {
          unint64_t v8 = (unsigned int *)(v46 + 48 * v7);
          uint64_t v9 = *v8;
          uint64_t v48 = v8[1];
          uint64_t v49 = v7;
          uint64_t v11 = *((void *)v8 + 4);
          uint64_t v10 = *((void *)v8 + 5);
          uint64_t v50 = *((void *)v8 + 3);
          int v52 = (uint64_t *)*((void *)v8 + 2);
          if (v54)
          {
            unint64_t v12 = *(os_unfair_lock_s **)(v10 + 376);
            swift_retain();
            os_unfair_lock_lock(v12);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v10 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v53);
          sub_1B62CA210(v45, (uint64_t)v69, &qword_1EB97DE20);
          uint64_t v13 = v5[4];
          uint64_t v14 = *(void *)(*(void *)(*(void *)(*(void *)(v10 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v5[6] = ecs_stack_allocator_allocate(v13, 48 * v14, 8);
          v5[7] = v14;
          v44[1] = 0;
          v44[2] = 0;
          *char v44 = 0;
          swift_release();
          uint64_t v15 = v50;
          uint64_t v51 = v10;
          uint64_t v16 = sub_1B62C9024((uint64_t)&type metadata for SkeletalAnimationPlayer, (uint64_t)&off_1F0F91658, v52, v15, v11, (uint64_t)v5);
          if (v52)
          {
            if (v11)
            {
              for (uint64_t i = 0; i != v11; ++i)
              {
                uint64_t v19 = (int *)(v16 + 16 * i);
                float v20 = (uint64_t *)*((void *)v19 + 1);
                if (v20)
                {
                  int v21 = v19[1];
                  uint64_t v22 = *v19;
                  BOOL v23 = v22 == -1 && v21 == 0;
                  if (v23 || (v22 & 0x80000000) != 0 || v6[1] <= v22) {
                    goto LABEL_56;
                  }
                  uint64_t v24 = *v6 + 12 * (int)v22;
                  if (v21 != -1 && *(_DWORD *)(v24 + 8) != v21) {
                    goto LABEL_56;
                  }
                  uint64_t v26 = *(void *)(*(void *)(a1 + 136) + 8 * *(int *)(*v6 + 12 * (int)v22) + 32);
                  uint64_t v27 = *(void *)(v26 + 48);
                  uint64_t v28 = *(void *)(v27 + 16);
                  if (!v28) {
                    goto LABEL_56;
                  }
                  int v29 = *(__int16 *)(v24 + 4);
                  long long v30 = (void *)(v27 + 56);
                  while ((ValueMetadata *)*(v30 - 3) != &type metadata for Skeleton)
                  {
                    v30 += 5;
                    if (!--v28) {
                      goto LABEL_56;
                    }
                  }
                  uint64_t v18 = *(void *)(v26 + 128) + *v30 + 40 * v29;
                  swift_retain();
                  sub_1B6C5AB84(v18, (uint64_t)v5, v20, v2);
                  swift_release();
                }
              }
            }
          }
          else if (v9 != v48)
          {
            do
            {
              char v32 = (int *)(v16 + 16 * v9);
              uint64_t v33 = (uint64_t *)*((void *)v32 + 1);
              if (v33)
              {
                int v34 = v32[1];
                uint64_t v35 = *v32;
                BOOL v36 = v35 == -1 && v34 == 0;
                if (v36
                  || (v35 & 0x80000000) != 0
                  || v6[1] <= v35
                  || ((uint64_t v37 = *v6 + 12 * (int)v35, v34 != -1) ? (v38 = *(_DWORD *)(v37 + 8) == v34) : (v38 = 1),
                      !v38
                   || (uint64_t v39 = *(void *)(*(void *)(a1 + 136) + 8 * *(int *)(*v6 + 12 * (int)v35) + 32),
                       uint64_t v40 = *(void *)(v39 + 48),
                       (uint64_t v41 = *(void *)(v40 + 16)) == 0)))
                {
LABEL_56:
                  swift_retain();
                  sub_1B6E328C8();
                  sub_1B6E31948();
                  sub_1B681F698();
                  sub_1B6E31948();
                  swift_bridgeObjectRelease();
                  sub_1B6E31948();
                  sub_1B6E31948();
                  sub_1B6E31948();
                  double result = (uint64_t *)sub_1B6E32BE8();
                  __break(1u);
                  return result;
                }
                int v42 = *(__int16 *)(v37 + 4);
                uint64_t v43 = (void *)(v40 + 56);
                while ((ValueMetadata *)*(v43 - 3) != &type metadata for Skeleton)
                {
                  v43 += 5;
                  if (!--v41) {
                    goto LABEL_56;
                  }
                }
                uint64_t v31 = *(void *)(v39 + 128) + *v43 + 40 * v42;
                swift_retain();
                sub_1B6C5AB84(v31, (uint64_t)v5, v33, v2);
                swift_release();
              }
              ++v9;
            }
            while (v9 != v48);
          }
          v67[0] = v64;
          v67[1] = v65;
          uint64_t v68 = v66;
          sub_1B6345178(v5, (unsigned __int16 **)v67, (uint64_t)v69);
          sub_1B634507C((char *)v51);
          ecs_stack_allocator_pop_snapshot(v53);
          if (v54)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v51 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v51 + 376));
          }
          swift_release();
          uint64_t v7 = v49 + 1;
        }
        while (v49 + 1 != v47);
        sub_1B632F170(v56);
      }
    }
    return sub_1B632F170(v56);
  }
  return result;
}

uint64_t *sub_1B6C597F4(uint64_t a1)
{
  long long v2 = *(_OWORD *)(v1 + 32);
  v160[0] = *(_OWORD *)(v1 + 16);
  v160[1] = v2;
  uint64_t v161 = *(void *)(v1 + 48);
  sub_1B62C9DA8(a1, (uint64_t)v160, 0x200000000, v149);
  double result = (uint64_t *)sub_1B62CA210((uint64_t)v149, (uint64_t)v150, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v150[0])
  {
    if (v156 >= 1)
    {
      uint64_t v99 = v153;
      if (v153)
      {
        uint64_t v104 = v155[4];
        int v103 = *(unsigned __int8 *)(v154 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v157[0] = v150[0];
        v157[1] = v150[1];
        uint64_t v158 = v151;
        uint64_t v97 = (uint64_t)(v155 + 6);
        uint64_t v98 = v152;
        int v105 = v155;
        uint64_t v96 = v155 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v4 = 0;
        uint64_t v5 = 0;
        do
        {
          uint64_t v101 = v5;
          uint64_t v102 = v4;
          uint64_t v6 = (unsigned int *)(v98 + 48 * v4);
          uint64_t v7 = *v6;
          uint64_t v8 = v6[1];
          uint64_t v10 = (uint64_t *)*((void *)v6 + 2);
          uint64_t v9 = *((void *)v6 + 3);
          uint64_t v12 = *((void *)v6 + 4);
          uint64_t v11 = *((void *)v6 + 5);
          if (v103)
          {
            uint64_t v13 = *(os_unfair_lock_s **)(v11 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v13);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v11 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v104);
          sub_1B62CA210(v97, (uint64_t)v159, &qword_1EB97DE20);
          uint64_t v14 = v105[4];
          uint64_t v15 = *(void *)(*(void *)(*(void *)(*(void *)(v11 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v105[6] = ecs_stack_allocator_allocate(v14, 48 * v15, 8);
          v105[7] = v15;
          v96[1] = 0;
          v96[2] = 0;
          *uint64_t v96 = 0;
          swift_release();
          uint64_t v100 = v11;
          uint64_t v16 = sub_1B62C9024((uint64_t)&type metadata for Skeleton, (uint64_t)&off_1F0FA7750, v10, v9, v12, (uint64_t)v105);
          uint64_t v108 = v16;
          if (v10)
          {
            if (v12)
            {
              uint64_t v17 = 0;
              uint64_t v107 = v12;
              do
              {
                uint64_t v18 = *(void *)(v16 + 40 * v17);
                if (v18)
                {
                  uint64_t v19 = v16 + 40 * v17;
                  uint64_t v22 = *(void *)(v19 + 16);
                  float v20 = (char **)(v19 + 16);
                  uint64_t v21 = v22;
                  uint64_t v23 = *(void *)(v22 + 16);
                  if (v23)
                  {
                    uint64_t v24 = *(void *)(v16 + 40 * v17 + 8);
                    swift_retain();
                    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
                    *float v20 = (char *)v21;
                    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
                      *float v20 = sub_1B6C16A34(v21);
                    }
                    uint64_t v26 = v16 + 40 * v17;
                    uint64_t v29 = *(void *)(v26 + 32);
                    uint64_t v27 = (char **)(v26 + 32);
                    uint64_t v28 = v29;
                    char v30 = swift_isUniquelyReferenced_nonNull_native();
                    *uint64_t v27 = (char *)v29;
                    if ((v30 & 1) == 0) {
                      *uint64_t v27 = sub_1B6C16A34(v28);
                    }
                    uint64_t v31 = v16 + 40 * v17;
                    uint64_t v34 = *(void *)(v31 + 24);
                    char v32 = (char **)(v31 + 24);
                    uint64_t v33 = v34;
                    char v35 = swift_isUniquelyReferenced_nonNull_native();
                    *char v32 = (char *)v34;
                    if ((v35 & 1) == 0) {
                      *char v32 = sub_1B6C16A34(v33);
                    }
                    uint64_t v36 = 0;
                    uint64_t v37 = 48;
                    do
                    {
                      float32x4_t v109 = *(float32x4_t *)(v24 + v37 - 16);
                      float32x4_t v137 = *(float32x4_t *)(v24 + v37);
                      float32x4_t v141 = *(float32x4_t *)(v24 + v37 + 16);
                      float32x4_t v145 = *(float32x4_t *)(v24 + v37 + 32);
                      uint64_t v38 = *(void *)(*(void *)(v18 + 40) + 8 * v36 + 32);
                      long long v39 = xmmword_1B6E4F300;
                      long long v40 = xmmword_1B6E4F320;
                      uint64_t v41 = *v20;
                      long long v42 = xmmword_1B6E4F2E0;
                      long long v43 = xmmword_1B6E4F370;
                      if (v38 != -1)
                      {
                        char v44 = &v41[64 * v38];
                        long long v39 = *((_OWORD *)v44 + 2);
                        long long v40 = *((_OWORD *)v44 + 3);
                        long long v42 = *((_OWORD *)v44 + 4);
                        long long v43 = *((_OWORD *)v44 + 5);
                      }
                      float32x4_t v115 = (float32x4_t)v43;
                      float32x4_t v121 = (float32x4_t)v42;
                      float32x4_t v127 = (float32x4_t)v40;
                      float32x4_t v133 = (float32x4_t)v39;
                      char v45 = swift_isUniquelyReferenced_nonNull_native();
                      *float v20 = v41;
                      if ((v45 & 1) == 0)
                      {
                        uint64_t v41 = sub_1B6C16A34((uint64_t)v41);
                        *float v20 = v41;
                      }
                      float32x4_t v46 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v133, v141.f32[0]), v127, *(float32x2_t *)v141.f32, 1), v121, v141, 2), v115, v141, 3);
                      float32x4_t v47 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v133, v145.f32[0]), v127, *(float32x2_t *)v145.f32, 1), v121, v145, 2), v115, v145, 3);
                      uint64_t v48 = (float32x4_t *)&v41[v37];
                      float32x4_t v142 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v133, v137.f32[0]), v127, *(float32x2_t *)v137.f32, 1), v121, v137, 2), v115, v137, 3);
                      float32x4_t v146 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v133, v109.f32[0]), v127, *(float32x2_t *)v109.f32, 1), v121, v109, 2), v115, v109, 3);
                      v48[-1] = v146;
                      float32x4_t *v48 = v142;
                      float32x4_t v134 = v47;
                      float32x4_t v138 = v46;
                      v48[1] = v46;
                      void v48[2] = v47;
                      uint64_t v49 = &(*v32)[v37];
                      long long v122 = *(_OWORD *)v49;
                      long long v128 = *((_OWORD *)v49 - 1);
                      long long v110 = *((_OWORD *)v49 + 2);
                      long long v116 = *((_OWORD *)v49 + 1);
                      uint64_t v50 = *v27;
                      char v51 = swift_isUniquelyReferenced_nonNull_native();
                      *uint64_t v27 = v50;
                      if ((v51 & 1) == 0)
                      {
                        uint64_t v50 = sub_1B6C16A34((uint64_t)v50);
                        *uint64_t v27 = v50;
                      }
                      int v52 = &v50[v37];
                      *((_OWORD *)v52 - 1) = v128;
                      *(_OWORD *)int v52 = v122;
                      *((_OWORD *)v52 + 1) = v116;
                      *((_OWORD *)v52 + 2) = v110;
                      uint64_t v53 = (float32x4_t *)(*(void *)(v18 + 48) + v37);
                      float32x4_t v111 = v53[-1];
                      float32x4_t v117 = *v53;
                      float32x4_t v123 = v53[1];
                      float32x4_t v129 = v53[2];
                      int v54 = *v32;
                      char v55 = swift_isUniquelyReferenced_nonNull_native();
                      *char v32 = v54;
                      if ((v55 & 1) == 0)
                      {
                        int v54 = sub_1B6C16A34((uint64_t)v54);
                        *char v32 = v54;
                      }
                      ++v36;
                      uint64_t v56 = (float32x4_t *)&v54[v37];
                      v56[-1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v111.f32[0]), v142, *(float32x2_t *)v111.f32, 1), v138, v111, 2), v134, v111, 3);
                      float32x4_t *v56 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v117.f32[0]), v142, *(float32x2_t *)v117.f32, 1), v138, v117, 2), v134, v117, 3);
                      v56[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v123.f32[0]), v142, *(float32x2_t *)v123.f32, 1), v138, v123, 2), v134, v123, 3);
                      v56[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v146, v129.f32[0]), v142, *(float32x2_t *)v129.f32, 1), v138, v129, 2), v134, v129, 3);
                      v37 += 64;
                    }
                    while (v23 != v36);
                    swift_release();
                    uint64_t v12 = v107;
                    uint64_t v16 = v108;
                  }
                }
                ++v17;
              }
              while (v17 != v12);
            }
          }
          else if (v7 != v8)
          {
            uint64_t v106 = v8;
            do
            {
              uint64_t v57 = *(void *)(v16 + 40 * v7);
              if (v57)
              {
                uint64_t v58 = v16 + 40 * v7;
                uint64_t v61 = *(void *)(v58 + 16);
                uint64_t v60 = (char **)(v58 + 16);
                uint64_t v59 = v61;
                uint64_t v62 = *(void *)(v61 + 16);
                if (v62)
                {
                  uint64_t v63 = *(void *)(v16 + 40 * v7 + 8);
                  swift_retain();
                  char v64 = swift_isUniquelyReferenced_nonNull_native();
                  *uint64_t v60 = (char *)v59;
                  if ((v64 & 1) == 0) {
                    *uint64_t v60 = sub_1B6C16A34(v59);
                  }
                  uint64_t v65 = v16 + 40 * v7;
                  uint64_t v68 = *(void *)(v65 + 32);
                  uint64_t v66 = (char **)(v65 + 32);
                  uint64_t v67 = v68;
                  char v69 = swift_isUniquelyReferenced_nonNull_native();
                  *uint64_t v66 = (char *)v68;
                  if ((v69 & 1) == 0) {
                    *uint64_t v66 = sub_1B6C16A34(v67);
                  }
                  uint64_t v70 = v16 + 40 * v7;
                  uint64_t v73 = *(void *)(v70 + 24);
                  uint64_t v71 = (char **)(v70 + 24);
                  uint64_t v72 = v73;
                  char v74 = swift_isUniquelyReferenced_nonNull_native();
                  *uint64_t v71 = (char *)v73;
                  if ((v74 & 1) == 0) {
                    *uint64_t v71 = sub_1B6C16A34(v72);
                  }
                  uint64_t v75 = 0;
                  uint64_t v76 = 48;
                  do
                  {
                    float32x4_t v112 = *(float32x4_t *)(v63 + v76 - 16);
                    float32x4_t v139 = *(float32x4_t *)(v63 + v76);
                    float32x4_t v143 = *(float32x4_t *)(v63 + v76 + 16);
                    float32x4_t v147 = *(float32x4_t *)(v63 + v76 + 32);
                    uint64_t v77 = *(void *)(*(void *)(v57 + 40) + 8 * v75 + 32);
                    long long v78 = xmmword_1B6E4F300;
                    long long v79 = xmmword_1B6E4F320;
                    uint64_t v80 = *v60;
                    long long v81 = xmmword_1B6E4F2E0;
                    long long v82 = xmmword_1B6E4F370;
                    if (v77 != -1)
                    {
                      int v83 = &v80[64 * v77];
                      long long v78 = *((_OWORD *)v83 + 2);
                      long long v79 = *((_OWORD *)v83 + 3);
                      long long v81 = *((_OWORD *)v83 + 4);
                      long long v82 = *((_OWORD *)v83 + 5);
                    }
                    float32x4_t v118 = (float32x4_t)v82;
                    float32x4_t v124 = (float32x4_t)v81;
                    float32x4_t v130 = (float32x4_t)v79;
                    float32x4_t v135 = (float32x4_t)v78;
                    char v84 = swift_isUniquelyReferenced_nonNull_native();
                    *uint64_t v60 = v80;
                    if ((v84 & 1) == 0)
                    {
                      uint64_t v80 = sub_1B6C16A34((uint64_t)v80);
                      *uint64_t v60 = v80;
                    }
                    float32x4_t v85 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v135, v143.f32[0]), v130, *(float32x2_t *)v143.f32, 1), v124, v143, 2), v118, v143, 3);
                    float32x4_t v86 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v135, v147.f32[0]), v130, *(float32x2_t *)v147.f32, 1), v124, v147, 2), v118, v147, 3);
                    float32x4_t v87 = (float32x4_t *)&v80[v76];
                    float32x4_t v144 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v135, v139.f32[0]), v130, *(float32x2_t *)v139.f32, 1), v124, v139, 2), v118, v139, 3);
                    float32x4_t v148 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v135, v112.f32[0]), v130, *(float32x2_t *)v112.f32, 1), v124, v112, 2), v118, v112, 3);
                    v87[-1] = v148;
                    *float32x4_t v87 = v144;
                    float32x4_t v136 = v86;
                    float32x4_t v140 = v85;
                    v87[1] = v85;
                    v87[2] = v86;
                    float32x4_t v88 = &(*v71)[v76];
                    long long v125 = *(_OWORD *)v88;
                    long long v131 = *((_OWORD *)v88 - 1);
                    long long v113 = *((_OWORD *)v88 + 2);
                    long long v119 = *((_OWORD *)v88 + 1);
                    uint64_t v89 = *v66;
                    char v90 = swift_isUniquelyReferenced_nonNull_native();
                    *uint64_t v66 = v89;
                    if ((v90 & 1) == 0)
                    {
                      uint64_t v89 = sub_1B6C16A34((uint64_t)v89);
                      *uint64_t v66 = v89;
                    }
                    uint64_t v91 = &v89[v76];
                    *((_OWORD *)v91 - 1) = v131;
                    *(_OWORD *)uint64_t v91 = v125;
                    *((_OWORD *)v91 + 1) = v119;
                    *((_OWORD *)v91 + 2) = v113;
                    uint64_t v92 = (float32x4_t *)(*(void *)(v57 + 48) + v76);
                    float32x4_t v114 = v92[-1];
                    float32x4_t v120 = *v92;
                    float32x4_t v126 = v92[1];
                    float32x4_t v132 = v92[2];
                    uint64_t v93 = *v71;
                    char v94 = swift_isUniquelyReferenced_nonNull_native();
                    *uint64_t v71 = v93;
                    if ((v94 & 1) == 0)
                    {
                      uint64_t v93 = sub_1B6C16A34((uint64_t)v93);
                      *uint64_t v71 = v93;
                    }
                    ++v75;
                    uint64_t v95 = (float32x4_t *)&v93[v76];
                    v95[-1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v114.f32[0]), v144, *(float32x2_t *)v114.f32, 1), v140, v114, 2), v136, v114, 3);
                    float32x4_t *v95 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v120.f32[0]), v144, *(float32x2_t *)v120.f32, 1), v140, v120, 2), v136, v120, 3);
                    v95[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v126.f32[0]), v144, *(float32x2_t *)v126.f32, 1), v140, v126, 2), v136, v126, 3);
                    v95[2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v148, v132.f32[0]), v144, *(float32x2_t *)v132.f32, 1), v140, v132, 2), v136, v132, 3);
                    v76 += 64;
                  }
                  while (v62 != v75);
                  swift_release();
                  uint64_t v16 = v108;
                  uint64_t v8 = v106;
                }
              }
              ++v7;
            }
            while (v7 != v8);
          }
          uint64_t v5 = v101;
          sub_1B6345178(v105, (unsigned __int16 **)v157, (uint64_t)v159);
          sub_1B634507C((char *)v100);
          ecs_stack_allocator_pop_snapshot(v104);
          if (v103)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v100 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v100 + 376));
          }
          swift_release();
          uint64_t v4 = v102 + 1;
        }
        while (v102 + 1 != v99);
        sub_1B632F170(v149);
      }
    }
    return sub_1B632F170(v149);
  }
  return result;
}

uint64_t sub_1B6C5A05C(uint64_t result)
{
  uint64_t v2 = *(void *)(result + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (v2)
  {
    uint64_t v3 = result;
    long long v4 = *(_OWORD *)(v1 + 32);
    v30[0] = *(_OWORD *)(v1 + 16);
    v30[1] = v4;
    uint64_t v31 = *(void *)(v1 + 48);
    swift_retain();
    sub_1B62C9DA8(v3, (uint64_t)v30, 0x200000000, v7);
    sub_1B62CA210((uint64_t)v7, (uint64_t)&v8, (unint64_t *)&qword_1EB97DC50);
    if (v8)
    {
      uint64_t v19 = v8;
      int v20 = v9;
      char v21 = v10;
      uint64_t v22 = v11;
      char v23 = v12;
      uint64_t v24 = v13;
      uint64_t v25 = v14;
      long long v26 = v15;
      long long v27 = v16;
      uint64_t v28 = v17;
      uint64_t v29 = v18;
      uint64_t v5 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
      uint64_t v6 = (void *)sub_1B6E31768();
      objc_msgSend(v5, sel_pushDebugGroup_, v6);

      sub_1B6C5A1D8(v5, v2, (uint64_t)&v19, v3);
      objc_msgSend(v5, sel_popDebugGroup);
      swift_unknownObjectRelease();
      sub_1B632F170(v7);
    }
    return swift_release();
  }
  return result;
}

uint64_t sub_1B6C5A1D8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_1B6A5CBE4(0x73656D5F6E696B73, 0xE900000000000068, 0, (uint64_t)&unk_1F0F667F0, v42);
  id v7 = sub_1B679C370((uint64_t)v42, 0, 0);
  int v9 = v8;
  sub_1B6786968((uint64_t)v42);

  objc_msgSend(a1, sel_setComputePipelineState_, v7);
  long long v10 = *(_OWORD *)(a3 + 16);
  long long v43 = *(_OWORD *)a3;
  long long v44 = v10;
  uint64_t v45 = *(void *)(a3 + 32);
  if (*(uint64_t *)(a3 + 80) <= 0) {
    return swift_unknownObjectRelease();
  }
  uint64_t v35 = *(void *)(a3 + 56);
  if (!v35) {
    return swift_unknownObjectRelease();
  }
  uint64_t v33 = *(void *)(a3 + 40);
  uint64_t v11 = *(void **)(a3 + 72);
  uint64_t v12 = v11[4];
  int v13 = *(unsigned __int8 *)(*(void *)(a3 + 64) + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  sub_1B62F1F58(a3);
  uint64_t v14 = 0;
  int v32 = v13;
  uint64_t v34 = v12;
  do
  {
    long long v15 = (unsigned int *)(v33 + 48 * v14);
    uint64_t v37 = *v15;
    uint64_t v36 = v15[1];
    uint64_t v16 = *((void *)v15 + 3);
    uint64_t v18 = *((void *)v15 + 4);
    uint64_t v17 = *((void *)v15 + 5);
    uint64_t v40 = v14;
    uint64_t v38 = (uint64_t *)*((void *)v15 + 2);
    if (v13)
    {
      uint64_t v19 = *(os_unfair_lock_s **)(v17 + 376);
      swift_retain();
      os_unfair_lock_lock(v19);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v12);
    sub_1B62CA210((uint64_t)(v11 + 6), (uint64_t)v48, &qword_1EB97DE20);
    uint64_t v20 = v11[4];
    uint64_t v21 = v17;
    uint64_t v22 = *(void *)(*(void *)(*(void *)(*(void *)(v17 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v11[6] = ecs_stack_allocator_allocate(v20, 48 * v22, 8);
    v11[7] = v22;
    v11[9] = 0;
    v11[10] = 0;
    long long v11[8] = 0;
    swift_release();
    char v23 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for SkinnedMeshBinding, (uint64_t)&off_1F0F7A8B8, v38, v16, v18, (uint64_t)v11);
    uint64_t v24 = (uint64_t *)sub_1B62C9024((uint64_t)&type metadata for MeshModel, (uint64_t)&off_1F0FA8FD8, v38, v16, v18, (uint64_t)v11);
    uint64_t v39 = v21;
    uint64_t v25 = sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v38, v16, v18, (uint64_t)v11);
    long long v26 = (simd_float4x4 *)v25;
    if (v38)
    {
      for (; v18; --v18)
      {
        sub_1B6C5AD6C((uint64_t)v11, v23, v24, v26++, a4, a2, (uint64_t)a1, v7);
        v24 += 2;
        v23 += 5;
      }
    }
    else if (v37 != v36)
    {
      uint64_t v27 = v36 - v37;
      uint64_t v28 = (simd_float4x4 *)(v25 + (v37 << 6));
      uint64_t v29 = &v23[5 * v37];
      char v30 = &v24[2 * v37];
      do
      {
        sub_1B6C5AD6C((uint64_t)v11, v29, v30, v28++, a4, a2, (uint64_t)a1, v7);
        v30 += 2;
        v29 += 5;
        --v27;
      }
      while (v27);
    }
    v46[0] = v43;
    v46[1] = v44;
    uint64_t v47 = v45;
    sub_1B6345178(v11, (unsigned __int16 **)v46, (uint64_t)v48);
    sub_1B634507C((char *)v39);
    uint64_t v12 = v34;
    ecs_stack_allocator_pop_snapshot(v34);
    int v13 = v32;
    if (v32)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v39 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v39 + 376));
    }
    swift_release();
    uint64_t v14 = v40 + 1;
  }
  while (v40 + 1 != v35);
  swift_unknownObjectRelease();
  return sub_1B62F073C(a3);
}

ValueMetadata *type metadata accessor for SkinnedMeshBinding()
{
  return &type metadata for SkinnedMeshBinding;
}

uint64_t destroy for Skeleton()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for Skeleton(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  a1[4] = a2[4];
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for Skeleton(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for Skeleton(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for Skeleton()
{
  return &type metadata for Skeleton;
}

uint64_t assignWithCopy for SkeletalAnimationPlayer(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_retain();
  swift_release();
  return a1;
}

void *assignWithTake for SkeletalAnimationPlayer(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_release();
  return a1;
}

ValueMetadata *type metadata accessor for SkeletalAnimationPlayer()
{
  return &type metadata for SkeletalAnimationPlayer;
}

ValueMetadata *type metadata accessor for QuatfArrayAnimation()
{
  return &type metadata for QuatfArrayAnimation;
}

ValueMetadata *type metadata accessor for Float3ArrayAnimation()
{
  return &type metadata for Float3ArrayAnimation;
}

uint64_t sub_1B6C5A8A4(uint64_t a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    return 0;
  }
  uint64_t v8 = 0;
  unint64_t v9 = a2 >> 16;
  unint64_t v10 = a3 >> 16;
  for (uint64_t i = (void *)(a1 + 40); ; i += 2)
  {
    uint64_t v12 = *(i - 1);
    uint64_t v13 = (*i & 0x2000000000000000) != 0 ? HIBYTE(*i) & 0xFLL : v12 & 0xFFFFFFFFFFFFLL;
    BOOL v14 = v12 == a4 && *i == a5;
    BOOL v15 = v14 && v9 == 0;
    BOOL v16 = v15 && v13 == v10;
    if (v16 || (sub_1B6E33078() & 1) != 0) {
      break;
    }
    if (v5 == ++v8) {
      return 0;
    }
  }
  return v8;
}

uint64_t sub_1B6C5A974(uint64_t a1, uint64_t a2)
{
  int64_t v2 = *(void *)(a1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v28 = MEMORY[0x1E4FBC860];
    sub_1B62B7EB4(0, v2, 0);
    uint64_t v5 = 0;
    uint64_t v3 = v28;
    uint64_t v27 = a1 + 32;
    do
    {
      uint64_t v6 = (uint64_t *)(v27 + 16 * v5);
      uint64_t v8 = *v6;
      unint64_t v7 = v6[1];
      uint64_t v9 = HIBYTE(v7) & 0xF;
      if ((v7 & 0x2000000000000000) == 0) {
        uint64_t v9 = v8 & 0xFFFFFFFFFFFFLL;
      }
      if (v9)
      {
        swift_bridgeObjectRetain();
        while (1)
        {
          unint64_t v10 = sub_1B6E318E8();
          if (sub_1B6E31A48() == 47 && v11 == 0xE100000000000000) {
            break;
          }
          char v13 = sub_1B6E334B8();
          swift_bridgeObjectRelease();
          if (v13) {
            goto LABEL_16;
          }
          if (!(v10 >> 14))
          {
            swift_bridgeObjectRelease();
            goto LABEL_14;
          }
        }
        swift_bridgeObjectRelease();
LABEL_16:
        swift_bridgeObjectRetain();
        unint64_t v15 = sub_1B6E31A78();
        unint64_t v17 = v16;
        uint64_t v19 = v18;
        uint64_t v21 = v20;
        swift_bridgeObjectRelease();
        uint64_t v14 = sub_1B6C5A8A4(*(void *)(a2 + 16), v15, v17, v19, v21);
        LOBYTE(v17) = v22;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v17) {
          uint64_t v14 = -1;
        }
      }
      else
      {
LABEL_14:
        uint64_t v14 = -1;
      }
      unint64_t v24 = *(void *)(v28 + 16);
      unint64_t v23 = *(void *)(v28 + 24);
      if (v24 >= v23 >> 1) {
        sub_1B62B7EB4(v23 > 1, v24 + 1, 1);
      }
      ++v5;
      *(void *)(v28 + 16) = v24 + 1;
      *(void *)(v28 + 8 * v24 + 32) = v14;
    }
    while (v5 != v2);
  }
  return v3;
}

uint64_t sub_1B6C5AB84(uint64_t a1, uint64_t a2, uint64_t *a3, double a4)
{
  uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 16);
  uint64_t v8 = *(void *)(a2 + 32);
  ecs_stack_allocator_push_snapshot(v8);
  uint64_t v9 = (float32x4_t *)ecs_stack_allocator_allocate(v8, 16 * v7, 16);
  unint64_t v10 = (float32x4_t *)ecs_stack_allocator_allocate(v8, 16 * v7, 16);
  uint64_t v11 = (float32x4_t *)ecs_stack_allocator_allocate(v8, 16 * v7, 16);
  sub_1B6C58E10(v9, a4, v13, v12, a3[3], a3[4]);
  sub_1B6C58F70(v10, a4, v14, a3[5], a3[6]);
  sub_1B6C58E10(v11, a4, v16, v15, a3[7], a3[8]);
  if (v7)
  {
    unint64_t v17 = *(char **)(a1 + 8);
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      unint64_t v17 = sub_1B6C16A34((uint64_t)v17);
    }
    uint64_t v18 = (float32x4_t *)(v17 + 80);
    v19.i64[0] = 0x8000000080000000;
    v19.i64[1] = 0x8000000080000000;
    do
    {
      float32x4_t v20 = *v9++;
      float32x4_t v21 = v20;
      float32x4_t v22 = *v10++;
      float32x4_t v23 = v22;
      float32x4_t v24 = *v11++;
      v21.i32[3] = 1.0;
      float32x4_t v25 = vabsq_f32(v24);
      v25.i32[3] = 0;
      float32x4_t v26 = vmulq_f32(v23, v23);
      float32x4_t v27 = vmulq_laneq_f32(v23, v23, 3);
      float v28 = vmulq_lane_f32(v23, *(float32x2_t *)v23.f32, 1).f32[0];
      float32x4_t v29 = (float32x4_t)vorrq_s8((int8x16_t)(*(_OWORD *)&vmaxnmq_f32(v25, (float32x4_t)xmmword_1B6E4FCD0) & __PAIR128__(0x7FFFFFFF7FFFFFFFLL, 0x7FFFFFFF7FFFFFFFLL)), vandq_s8((int8x16_t)v24, v19));
      v26.f32[0] = 0.5 - v26.f32[0];
      *(float32x2_t *)v23.f32 = vmul_laneq_f32(*(float32x2_t *)v23.f32, v23, 2);
      float32x4_t v30 = vaddq_f32(v29, v29);
      v31.i32[3] = 0;
      v31.f32[0] = (float)(0.5 - v26.f32[1]) - v26.f32[2];
      v31.f32[1] = v28 + v27.f32[2];
      v32.i32[3] = 0;
      v32.f32[0] = v28 - v27.f32[2];
      v31.f32[2] = v23.f32[0] - v27.f32[1];
      v32.f32[1] = v26.f32[0] - v26.f32[2];
      v32.f32[2] = v23.f32[1] + v27.f32[0];
      *(int32x2_t *)v27.f32 = vrev64_s32(*(int32x2_t *)v27.f32);
      v33.i32[0] = vadd_f32(*(float32x2_t *)v23.f32, *(float32x2_t *)v27.f32).u32[0];
      v33.i32[1] = vsub_f32(*(float32x2_t *)&v23, *(float32x2_t *)&v27).i32[1];
      v33.i64[1] = COERCE_UNSIGNED_INT(v26.f32[0] - v26.f32[1]);
      v18[-3] = vmulq_n_f32(v31, v30.f32[0]);
      v18[-2] = vmulq_lane_f32(v32, *(float32x2_t *)v30.f32, 1);
      v18[-1] = vmulq_laneq_f32(v33, v30, 2);
      *uint64_t v18 = v21;
      v18 += 4;
      --v7;
    }
    while (v7);
    *(void *)(a1 + 8) = v17;
  }
  return ecs_stack_allocator_pop_snapshot(v8);
}

uint64_t sub_1B6C5AD6C(uint64_t result, float32x4_t *a2, uint64_t *a3, simd_float4x4 *a4, uint64_t a5, uint64_t a6, uint64_t a7, void *a8)
{
  int v8 = a2->i32[1];
  uint64_t v9 = a2->i32[0];
  if ((v9 != -1 || v8 != 0)
    && (v9 & 0x80000000) == 0
    && *(void *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8) > v9)
  {
    uint64_t v15 = result;
    uint64_t v16 = *(void *)(a5 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    if (v8 == -1 || *(_DWORD *)(v16 + 12 * (int)v9 + 8) == v8)
    {
      sub_1B6965298(*(void *)(*(void *)(a5 + 136) + 8 * *(int *)(v16 + 12 * (int)v9) + 32), *(_DWORD *)(v16 + 12 * (int)v9), *(_WORD *)(v16 + 12 * (int)v9 + 4), 40, a5, v60);
      double result = sub_1B62CA210((uint64_t)v60, (uint64_t)&v72, &qword_1E9DD78D8);
      if (*((void *)&v72 + 1))
      {
        int v54 = a8;
        uint64_t v77 = v74;
        long long v75 = v72;
        long long v76 = v73;
        v82[0] = v73;
        unint64_t v17 = *(void *)(v73 + 16);
        uint64_t v18 = *(void *)(v15 + 32);
        ecs_stack_allocator_push_snapshot(v18);
        uint64_t v83 = v18;
        int8x16_t v19 = (int32x4_t *)ecs_stack_allocator_allocate(v18, v17 << 6, 16);
        float32x4_t v55 = a2[1];
        float32x4_t v56 = a2[2];
        float32x4_t v57 = a2[3];
        float32x4_t v58 = a2[4];
        simd_float4x4 v84 = __invert_f4(*a4);
        if (v17)
        {
          float32x4_t v20 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, v84.columns[0].f32[0]), v56, *(float32x2_t *)v84.columns[0].f32, 1), v57, (float32x4_t)v84.columns[0], 2), v58, (float32x4_t)v84.columns[0], 3);
          float32x4_t v21 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, v84.columns[1].f32[0]), v56, *(float32x2_t *)v84.columns[1].f32, 1), v57, (float32x4_t)v84.columns[1], 2), v58, (float32x4_t)v84.columns[1], 3);
          float32x4_t v22 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, v84.columns[2].f32[0]), v56, *(float32x2_t *)v84.columns[2].f32, 1), v57, (float32x4_t)v84.columns[2], 2), v58, (float32x4_t)v84.columns[2], 3);
          float32x4_t v23 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v55, v84.columns[3].f32[0]), v56, *(float32x2_t *)v84.columns[3].f32, 1), v57, (float32x4_t)v84.columns[3], 2), v58, (float32x4_t)v84.columns[3], 3);
          float32x4_t v24 = (float32x2_t *)(*((void *)&v76 + 1) + 48);
          float32x4_t v25 = (float32x4_t *)&v19[2];
          unint64_t v26 = v17;
          do
          {
            float32x4_t v27 = *(float32x4_t *)v24[4].f32;
            float32x4_t v28 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(*(_OWORD *)v24->f32)), v21, *v24, 1), v22, *(float32x4_t *)v24->f32, 2), v23, *(float32x4_t *)v24->f32, 3);
            float32x4_t v29 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(*(_OWORD *)v24[2].f32)), v21, v24[2], 1), v22, *(float32x4_t *)v24[2].f32, 2), v23, *(float32x4_t *)v24[2].f32, 3);
            v25[-2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, COERCE_FLOAT(*(_OWORD *)v24[-2].f32)), v21, v24[-2], 1), v22, *(float32x4_t *)v24[-2].f32, 2), v23, *(float32x4_t *)v24[-2].f32, 3);
            v25[-1] = v28;
            *float32x4_t v25 = v29;
            v25[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v20, v27.f32[0]), v21, *(float32x2_t *)v27.f32, 1), v22, v27, 2), v23, v27, 3);
            v25 += 4;
            v24 += 8;
            --v26;
          }
          while (v26);
        }
        uint64_t v30 = *(void *)(v15 + 24);
        swift_retain();
        float32x4_t v31 = (void *)sub_1B62F1868(v30, 48 * v17);
        uint64_t v33 = v32;
        uint64_t v35 = v34;
        swift_unknownObjectRetain();
        swift_release();
        uint64_t v59 = v35;
        if (objc_msgSend(v31, sel_storageMode) == (id)2)
        {
          uint64_t v36 = 0;
        }
        else
        {
          id v37 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
          id v38 = v31;
          uint64_t v36 = (uint64_t)v37 + v33;
        }
        matrix_transpose_batch(v36, v19, v17);
        uint64_t v39 = *a3;
        if (v39)
        {
          sub_1B6A56764(0, (uint64_t)v61);
          sub_1B62CA210((uint64_t)v61, (uint64_t)v67, &qword_1E9DD78E0);
          if (*(void *)&v67[0])
          {
            long long v69 = v67[0];
            long long v70 = v67[1];
            char v71 = v68;
            sub_1B6A56764(9, (uint64_t)v62);
            sub_1B62CA210((uint64_t)v62, (uint64_t)v66, &qword_1E9DD78E0);
            uint64_t v40 = v66[0];
            if (v66[0])
            {
              uint64_t v41 = v66[1];
              uint64_t v42 = v66[2];
              sub_1B6A56764(8, (uint64_t)v63);
              sub_1B62CA210((uint64_t)v63, (uint64_t)v65, &qword_1E9DD78E0);
              if (v65[0])
              {
                uint64_t v52 = v65[2];
                uint64_t v53 = v65[1];
                uint64_t v51 = v65[0];
                swift_retain();
                sub_1B6801348((uint64_t)&v69, (uint64_t)v64);
                swift_getObjectType();
                long long v43 = v69;
                uint64_t v50 = v42;
                uint64_t v44 = v70;
                swift_unknownObjectRetain();
                sub_1B6B59478(v43, *((uint64_t *)&v43 + 1), v44, 0);
                sub_1B62D8C10((uint64_t)v61);
                uint64_t v45 = v64[1];
                uint64_t v46 = v64[2];
                uint64_t v47 = swift_unknownObjectRetain();
                sub_1B6B59478(v47, v45, v46, 0);
                sub_1B62D8C10((uint64_t)v64);
                swift_unknownObjectRetain();
                sub_1B6B59478(v40, v41, v50, 0);
                sub_1B62D8C10((uint64_t)v62);
                uint64_t v48 = swift_unknownObjectRetain();
                sub_1B6B59478(v48, v33, v59, 0);
                swift_unknownObjectRelease();
                swift_unknownObjectRetain();
                sub_1B6B59478(v51, v53, v52, 0);
                sub_1B62D8C10((uint64_t)v63);
                sub_1B6B597AC(v54, *(void *)(v39 + 48));
                sub_1B62D8C10((uint64_t)v64);
                sub_1B62D8C10((uint64_t)v63);
                sub_1B62D8C10((uint64_t)v62);
                sub_1B62D8C10((uint64_t)v61);
                swift_unknownObjectRelease();
                swift_release();
                ecs_stack_allocator_pop_snapshot(v83);
                sub_1B6B52C30((uint64_t)&v75, (uint64_t)&v81);
                sub_1B62CA064((uint64_t)&v81);
                uint64_t v80 = *((void *)&v75 + 1);
                sub_1B62D8C3C((uint64_t)&v80);
                sub_1B62D8C3C((uint64_t)v82);
                uint64_t v79 = *((void *)&v76 + 1);
                sub_1B62D8C3C((uint64_t)&v79);
                uint64_t v78 = v77;
                uint64_t v49 = &v78;
              }
              else
              {
                swift_retain();
                sub_1B62D8C10((uint64_t)v62);
                sub_1B62D8C10((uint64_t)v61);
                swift_unknownObjectRelease();
                swift_release();
                ecs_stack_allocator_pop_snapshot(v83);
                sub_1B6B52C30((uint64_t)&v75, (uint64_t)v64);
                sub_1B62CA064((uint64_t)v64);
                uint64_t v81 = *((void *)&v75 + 1);
                sub_1B62D8C3C((uint64_t)&v81);
                sub_1B62D8C3C((uint64_t)v82);
                uint64_t v80 = *((void *)&v76 + 1);
                sub_1B62D8C3C((uint64_t)&v80);
                uint64_t v79 = v77;
                uint64_t v49 = &v79;
              }
            }
            else
            {
              sub_1B62D8C10((uint64_t)v61);
              swift_unknownObjectRelease();
              ecs_stack_allocator_pop_snapshot(v83);
              sub_1B6B52C30((uint64_t)&v75, (uint64_t)v65);
              sub_1B62CA064((uint64_t)v65);
              v64[0] = *((void *)&v75 + 1);
              sub_1B62D8C3C((uint64_t)v64);
              sub_1B62D8C3C((uint64_t)v82);
              v63[0] = *((void *)&v76 + 1);
              sub_1B62D8C3C((uint64_t)v63);
              uint64_t v81 = v77;
              uint64_t v49 = &v81;
            }
          }
          else
          {
            swift_unknownObjectRelease();
            ecs_stack_allocator_pop_snapshot(v83);
            sub_1B6B52C30((uint64_t)&v75, (uint64_t)&v69);
            sub_1B62CA064((uint64_t)&v69);
            v66[0] = *((void *)&v75 + 1);
            sub_1B62D8C3C((uint64_t)v66);
            sub_1B62D8C3C((uint64_t)v82);
            v65[0] = *((void *)&v76 + 1);
            sub_1B62D8C3C((uint64_t)v65);
            v64[0] = v77;
            uint64_t v49 = v64;
          }
        }
        else
        {
          swift_unknownObjectRelease();
          ecs_stack_allocator_pop_snapshot(v83);
          sub_1B6B52C30((uint64_t)&v75, (uint64_t)&v69);
          sub_1B62CA064((uint64_t)&v69);
          *(void *)&v67[0] = *((void *)&v75 + 1);
          sub_1B62D8C3C((uint64_t)v67);
          sub_1B62D8C3C((uint64_t)v82);
          v66[0] = *((void *)&v76 + 1);
          sub_1B62D8C3C((uint64_t)v66);
          v65[0] = v77;
          uint64_t v49 = v65;
        }
        return sub_1B62D8C3C((uint64_t)v49);
      }
    }
  }
  return result;
}

uint64_t sub_1B6C5B458(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6C5CA04(0, &qword_1E9DD78F8, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C5C9B0();
  sub_1B6E33A88();
  uint64_t v13 = *v3;
  HIBYTE(v12) = 0;
  sub_1B62AA858();
  sub_1B62AA5EC(qword_1E9DD02C8);
  sub_1B6E32FA8();
  if (!v2)
  {
    uint64_t v13 = v3[1];
    HIBYTE(v12) = 1;
    sub_1B6E32FA8();
    uint64_t v13 = v3[2];
    HIBYTE(v12) = 2;
    sub_1B67FEC7C();
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B6C5B664(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BB562C(*a1, *a2);
}

uint64_t sub_1B6C5B670()
{
  uint64_t v1 = 0x6E69646165727073;
  if (*v0 != 1) {
    uint64_t v1 = 0x7469736F706D6F63;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x65676E6172;
  }
}

uint64_t sub_1B6C5B6DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6C5C3E4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6C5B704(uint64_t a1)
{
  unint64_t v2 = sub_1B6C5C9B0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C5B740(uint64_t a1)
{
  unint64_t v2 = sub_1B6C5C9B0();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B6C5B77C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6C5C740(a1, (uint64_t)&v5);
  if (!v2)
  {
    double result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B6C5B7C0(void *a1)
{
  return sub_1B6C5B458(a1);
}

uint64_t sub_1B6C5B7D8()
{
  return type metadata accessor for ParticleVelocityInit.System();
}

double sub_1B6C5B7F8()
{
  sub_1B62D2B64();
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_1B6E76B30;
  *(void *)(v0 + 32) = &type metadata for Velocity;
  *(void *)(v0 + 40) = &off_1F0FA7C08;
  *(void *)(v0 + 48) = &type metadata for Orientation;
  *(void *)(v0 + 56) = &off_1F0F560A8;
  return result;
}

double sub_1B6C5B854@<D0>(uint64_t a1@<X8>)
{
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)a1 = result;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 20) = 1065353216;
  return result;
}

void sub_1B6C5B870(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v5 = v4;
  long long v6 = *(_OWORD *)(a3 + 104);
  v49[0] = *(_OWORD *)(a3 + 88);
  v49[1] = v6;
  uint64_t v50 = *(void *)(a3 + 120);
  sub_1B62C9DA8(a2, (uint64_t)v49, 0x200000000, v34);
  sub_1B62CA210((uint64_t)v34, (uint64_t)v35, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v35[0])
  {
    long long v42 = v35[0];
    long long v43 = v35[1];
    uint64_t v44 = v36;
    uint64_t v27 = v41;
    if (v41 >= 1 && (uint64_t v7 = v38) != 0)
    {
      uint64_t v8 = v40[4];
      uint64_t v26 = v39;
      int v9 = *(unsigned __int8 *)(v39 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      float32x4_t v23 = v40 + 8;
      uint64_t v24 = (uint64_t)(v40 + 6);
      unint64_t v10 = (uint64_t *)(v37 + 24);
      int v25 = v9;
      uint64_t v11 = v40;
      while (1)
      {
        uint64_t v13 = *((unsigned int *)v10 - 6);
        uint64_t v12 = *((unsigned int *)v10 - 5);
        uint64_t v14 = *((unsigned int *)v10 - 4);
        uint64_t v15 = *(v10 - 1);
        uint64_t v16 = *v10;
        uint64_t v17 = v10[1];
        uint64_t v18 = v10[2];
        float32x4_t v57 = v5;
        uint64_t v32 = v16;
        uint64_t v33 = v15;
        uint64_t v30 = v12;
        uint64_t v31 = v17;
        if (v9)
        {
          int8x16_t v19 = *(os_unfair_lock_s **)(v18 + 376);
          swift_retain();
          os_unfair_lock_lock(v19);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v8);
        sub_1B62CA210(v24, (uint64_t)v51, &qword_1EB97DE20);
        uint64_t v20 = v11[4];
        uint64_t v21 = *(void *)(*(void *)(*(void *)(*(void *)(v18 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v11[6] = ecs_stack_allocator_allocate(v20, 48 * v21, 8);
        v11[7] = v21;
        v23[1] = 0;
        void v23[2] = 0;
        *float32x4_t v23 = 0;
        swift_release();
        v52[0] = v26;
        v52[1] = v18;
        v52[2] = v11;
        v52[3] = v14;
        v52[4] = (v30 - v13 + v14);
        v52[5] = v27;
        v52[6] = v13;
        v52[7] = v30;
        v52[8] = 0;
        v52[9] = 0;
        char v53 = 1;
        uint64_t v54 = v33;
        uint64_t v55 = v32;
        uint64_t v56 = v31;
        float32x4_t v22 = v57;
        sub_1B6C5BB70(v52, a4, a1);
        if (v22) {
          break;
        }
        v47[0] = v42;
        v47[1] = v43;
        uint64_t v48 = v44;
        sub_1B6345178(v11, (unsigned __int16 **)v47, (uint64_t)v51);
        long long v5 = 0;
        sub_1B634507C((char *)v18);
        ecs_stack_allocator_pop_snapshot(v8);
        int v9 = v25;
        if (v25)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
        }
        swift_release();
        v10 += 6;
        if (!--v7) {
          goto LABEL_12;
        }
      }

      v45[0] = v42;
      v45[1] = v43;
      uint64_t v46 = v44;
      sub_1B6345178(v11, (unsigned __int16 **)v45, (uint64_t)v51);
      sub_1B634507C((char *)v18);
      ecs_stack_allocator_pop_snapshot(v8);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
      __break(1u);
    }
    else
    {
LABEL_12:
      sub_1B632F170(v34);
    }
  }
}

void sub_1B6C5BB70(void *a1, uint64_t a2, void *a3)
{
  long long v5 = (uint64_t *)a1[11];
  uint64_t v6 = a1[12];
  uint64_t v7 = a1[13];
  uint64_t v8 = a1[2];
  uint64_t v111 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v5, v6, v7, v8);
  uint64_t v9 = sub_1B62C9024((uint64_t)&type metadata for Orientation, (uint64_t)&off_1F0F560A8, v5, v6, v7, v8);
  uint64_t v13 = v9;
  float v15 = *(float *)(a2 + 8);
  v14.i32[0] = *(_DWORD *)(a2 + 12);
  uint64_t v17 = a1[6];
  uint64_t v16 = a1[7];
  if (v15 == 0.0 && *(float *)v14.i32 == 0.0)
  {
    float v18 = *(float *)(a2 + 4);
    float v105 = *(float *)a2;
    if (*(float *)a2 == v18)
    {
      uint64_t v19 = v16 - v17;
      if (v19)
      {
        uint64_t v20 = *(unsigned __int8 *)(a2 + 16);
        v14.i32[0] = *(_DWORD *)(a2 + 20);
        float v102 = *(float *)v14.i32;
        float32x4_t v21 = (float32x4_t)vdupq_lane_s32(v14, 0);
        float32x2_t v98 = *(float32x2_t *)v21.f32;
        float32x4_t v22 = (float32x4_t *)(v111 + 16 * v17);
        float32x4_t v23 = (float32x4_t *)(v9 + 16 * v17);
        do
        {
          __int32 v112 = v21.i32[3];
          int v108 = v12;
          sub_1B6C1F89C(*v23);
          float32x4_t v24 = vmulq_n_f32(v25, v105);
          int v12 = v108;
          float32x4_t v26 = *v22;
          float32x4_t v21 = *v22;
          v21.i32[3] = v112;
          switch(v20)
          {
            case 1:
              float32x4_t v24 = vaddq_f32(v21, vmulq_n_f32(v24, v102));
              break;
            case 2:
              float32x4_t v24 = vmulq_f32(v21, vmulq_n_f32(v24, v102));
              break;
            case 3:
              *(float32x2_t *)v24.f32 = vadd_f32(*(float32x2_t *)v26.f32, vmul_f32(v98, vsub_f32(*(float32x2_t *)v24.f32, *(float32x2_t *)v26.f32)));
              v24.f32[2] = v26.f32[2] + (float)(v102 * (float)(v24.f32[2] - v26.f32[2]));
              break;
            default:
              float32x4_t v24 = vmulq_n_f32(v24, v102);
              break;
          }
          v24.i32[3] = 0;
          *v22++ = v24;
          ++v23;
          --v19;
        }
        while (v19);
      }
    }
    else
    {
      uint64_t v79 = v16 - v17;
      if (v79)
      {
        uint64_t v80 = a3[3];
        uint64_t v81 = a3[4];
        uint64_t v82 = a3[1];
        uint64_t v83 = a3[2];
        uint64_t v84 = *(unsigned __int8 *)(a2 + 16);
        v11.i32[0] = *(_DWORD *)(a2 + 20);
        float v85 = v18 - *(float *)a2;
        float v104 = *(float *)v11.i32;
        int32x4_t v86 = vdupq_lane_s32(v11, 0);
        float32x2_t v99 = *(float32x2_t *)v86.i8;
        uint64_t v87 = 16 * v17;
        float32x4_t v88 = (float32x4_t *)(v111 + 16 * v17);
        uint64_t v89 = (float32x4_t *)(v9 + v87);
        do
        {
          __int32 v114 = v10.i32[3];
          __int32 v110 = v86.i32[3];
          sub_1B6C1F89C(*v89);
          v86.i32[3] = v110;
          float32x4_t v90 = vmulq_n_f32(v93, v105+ (float)(v85* (float)((float)((9 * ((((unint64_t)(5 * v83) >> 32) >> 25) | (640 * v83))) & 0xFFFFFF)* 0.000000059605)));
          uint64_t v94 = v83 << 17;
          float32x4_t v95 = *v88;
          float32x4_t v10 = *v88;
          v10.i32[3] = v114;
          switch(v84)
          {
            case 1:
              float32x4_t v90 = vaddq_f32(v10, vmulq_n_f32(v90, v104));
              break;
            case 2:
              float32x4_t v90 = vmulq_f32(v10, vmulq_n_f32(v90, v104));
              break;
            case 3:
              *(float32x2_t *)v90.f32 = vadd_f32(*(float32x2_t *)v95.f32, vmul_f32(v99, vsub_f32(*(float32x2_t *)v90.f32, *(float32x2_t *)v95.f32)));
              v90.f32[2] = v95.f32[2] + (float)(v104 * (float)(v90.f32[2] - v95.f32[2]));
              break;
            default:
              float32x4_t v90 = vmulq_n_f32(v90, v104);
              break;
          }
          uint64_t v91 = v82 ^ v80;
          uint64_t v92 = v83 ^ v81;
          v83 ^= v82 ^ v80;
          v82 ^= v92;
          uint64_t v80 = v91 ^ v94;
          uint64_t v81 = __ROR8__(v92, 19);
          v90.i32[3] = 0;
          *v88++ = v90;
          ++v89;
          --v79;
        }
        while (v79);
        a3[1] = v82;
        a3[2] = v83;
        a3[3] = v80;
        a3[4] = v81;
      }
    }
  }
  else
  {
    float v27 = cosf(fminf(fmaxf(*(float *)v14.i32, 0.0), 3.1416));
    uint64_t v28 = v16 - v17;
    if (v28)
    {
      float v29 = 1.0 - v27;
      float v30 = cosf(fminf(fmaxf(v15, 0.0), 3.1416));
      float v32 = *(float *)a2;
      float v33 = *(float *)(a2 + 4);
      uint64_t v34 = *(unsigned __int8 *)(a2 + 16);
      v35.i32[0] = *(_DWORD *)(a2 + 20);
      uint64_t v36 = a3[3];
      uint64_t v37 = a3[4];
      uint64_t v39 = a3[1];
      uint64_t v38 = a3[2];
      float v40 = (float)(1.0 - v30) - v29;
      float v41 = v33 - *(float *)a2;
      float v100 = *(float *)v35.i32;
      float32x4_t v42 = (float32x4_t)vdupq_lane_s32(v35, 0);
      float32x2_t v97 = *(float32x2_t *)v42.f32;
      uint64_t v43 = 16 * v17;
      uint64_t v44 = (float32x4_t *)(v111 + 16 * v17);
      uint64_t v45 = (float32x4_t *)(v13 + v43);
      do
      {
        __int32 v109 = v31;
        __int32 v113 = v42.i32[3];
        uint64_t v47 = v39 ^ v36;
        uint64_t v48 = v38 ^ v37;
        uint64_t v49 = v47 ^ v38;
        uint64_t v50 = v39 ^ v48;
        float v51 = (float)((9 * ((((unint64_t)(5 * v38) >> 32) >> 25) | (640 * v38))) & 0xFFFFFF)
            * 0.000000059605;
        uint64_t v52 = v47 ^ (v38 << 17) ^ v50;
        uint64_t v53 = __ROR8__(v48, 19);
        uint64_t v54 = v52 ^ v49;
        uint64_t v55 = v49 ^ v53 ^ v50;
        uint64_t v56 = __ROR8__(v49 ^ v53, 19);
        uint64_t v57 = v52 ^ (v49 << 17);
        float v58 = (float)((9 * ((((unint64_t)(5 * v49) >> 32) >> 25) | (640 * v49))) & 0xFFFFFF)
            * 0.000000059605;
        sub_1B6C1F89C(*v45);
        v60.i32[0] = v59.i32[2];
        v61.i32[0] = 1.0;
        v62.i64[0] = 0x8000000080000000;
        v62.i64[1] = 0x8000000080000000;
        float v63 = *(float *)vbslq_s8(v62, v61, v60).i32;
        *(float *)v62.i32 = v59.f32[1] / (float)(fabsf(v59.f32[2]) + 1.0);
        float v64 = vmuls_lane_f32(*(float *)v62.i32, *(float32x2_t *)v59.f32, 1);
        float32_t v65 = -v59.f32[0];
        v66.f32[0] = -(float)(v59.f32[0] * *(float *)v62.i32);
        float v67 = vmuls_lane_f32(-v63, *(float32x2_t *)v59.f32, 1);
        float32x4_t v68 = v59;
        v68.i32[3] = v109;
        v59.f32[0] = 1.0 - (float)(v29 + (float)(v40 * v51));
        float v69 = sqrtf(1.0 - (float)(v59.f32[0] * v59.f32[0]));
        v70.f32[0] = v59.f32[2] + (float)(v63 * v64);
        v70.f32[1] = v63 * v66.f32[0];
        v70.f32[2] = v65;
        v66.f32[1] = 1.0 - v64;
        v66.f32[2] = v67;
        float32x4_t v106 = v70;
        float32x4_t v107 = v66;
        __int32 v101 = v68.i32[3];
        float32x4_t v103 = vmulq_n_f32(v68, v59.f32[0]);
        __float2 v71 = __sincosf_stret(v58 * 6.2832);
        float32x4_t v72 = vmlaq_n_f32(vmlaq_n_f32(v103, v106, v69 * v71.__cosval), v107, v69 * v71.__sinval);
        uint64_t v73 = __ROR8__(v56 ^ v54, 19);
        float v74 = v32
            + (float)(v41
                    * (float)((float)((9 * ((((unint64_t)(5 * v54) >> 32) >> 25) | (640 * v54))) & 0xFFFFFF)
                            * 0.000000059605));
        if (v32 == v33)
        {
          float v74 = v32;
          uint64_t v36 = v57;
        }
        else
        {
          uint64_t v36 = v57 ^ v55 ^ (v54 << 17);
        }
        if (v32 == v33) {
          uint64_t v37 = v56;
        }
        else {
          uint64_t v37 = v73;
        }
        if (v32 == v33) {
          uint64_t v38 = v54;
        }
        else {
          uint64_t v38 = v57 ^ v55 ^ v54;
        }
        if (v32 == v33) {
          uint64_t v39 = v55;
        }
        else {
          uint64_t v39 = v56 ^ v54 ^ v55;
        }
        float32x2_t v75 = vmul_n_f32(*(float32x2_t *)v72.f32, v74);
        float v76 = vmuls_lane_f32(v74, v72, 2);
        *(float32x2_t *)v77.f32 = v75;
        v77.i64[1] = LODWORD(v76);
        float32x4_t v78 = *v44;
        float32x4_t v42 = *v44;
        v42.i32[3] = v113;
        switch(v34)
        {
          case 1:
            float32x4_t v46 = vaddq_f32(vmulq_n_f32(v77, v100), v42);
            break;
          case 2:
            float32x4_t v46 = vmulq_f32(vmulq_n_f32(v77, v100), v42);
            break;
          case 3:
            *(float32x2_t *)v46.f32 = vadd_f32(*(float32x2_t *)v78.f32, vmul_f32(v97, vsub_f32(v75, *(float32x2_t *)v78.f32)));
            v46.f32[2] = v78.f32[2] + (float)(v100 * (float)(v76 - v78.f32[2]));
            break;
          default:
            float32x4_t v46 = vmulq_n_f32(v77, v100);
            break;
        }
        __int32 v31 = v101;
        v46.i32[3] = 0;
        *v44++ = v46;
        ++v45;
        --v28;
      }
      while (v28);
      a3[1] = v39;
      a3[2] = v38;
      a3[3] = v36;
      a3[4] = v37;
    }
  }
}

uint64_t type metadata accessor for ParticleVelocityInit.System()
{
  return self;
}

uint64_t sub_1B6C5C28C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  swift_retain_n();
  unint64_t v4 = sub_1B695EFD8(v3);
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_release();
  unint64_t v9 = HIDWORD(v4);
  unint64_t v10 = HIDWORD(v6);
  if (v8 == 4) {
    int v11 = 1065353216;
  }
  else {
    int v11 = v4;
  }
  if (v8 == 4)
  {
    LODWORD(v9) = 1065353216;
    int v12 = 0;
  }
  else
  {
    int v12 = v6;
  }
  if (v8 == 4)
  {
    LODWORD(v10) = 0;
    char v13 = 0;
  }
  else
  {
    char v13 = v8;
  }
  if (v8 == 4) {
    int v14 = 1065353216;
  }
  else {
    int v14 = HIDWORD(v8);
  }
  v17[0] = v11;
  v17[1] = v9;
  v17[2] = v12;
  v17[3] = v10;
  char v18 = v13;
  int v19 = v14;
  uint64_t v15 = a1[4];
  swift_retain();
  sub_1B62F6B80((uint64_t)a1);
  sub_1B6C015B4(v15, v2, v2, (uint64_t)a1, (uint64_t)v17);
  sub_1B62F648C((uint64_t)a1);
  return swift_release_n();
}

const char *sub_1B6C5C374()
{
  return "ParticleVelocityInitSystem";
}

uint64_t type metadata accessor for ParticleVelocityInit.GPUSystem()
{
  return self;
}

const char *sub_1B6C5C3B0()
{
  return "SetVelocity.GPU";
}

uint64_t sub_1B6C5C3C4()
{
  return type metadata accessor for ParticleVelocityInit.GPUSystem();
}

uint64_t sub_1B6C5C3E4(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x65676E6172 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6E69646165727073 && a2 == 0xEE0065676E615267 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x7469736F706D6F63 && a2 == 0xEB000000006E6F69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1B6C5C570(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  swift_retain();
  unint64_t v5 = sub_1B695EFD8(v3);
  unint64_t v7 = v6;
  uint64_t v9 = v8;
  swift_release();
  unint64_t v10 = HIDWORD(v5);
  unint64_t v11 = HIDWORD(v7);
  if (v9 == 4) {
    int v12 = 1065353216;
  }
  else {
    int v12 = v5;
  }
  if (v9 == 4)
  {
    LODWORD(v10) = 1065353216;
    int v13 = 0;
  }
  else
  {
    int v13 = v7;
  }
  if (v9 == 4)
  {
    LODWORD(v11) = 0;
    char v14 = 0;
  }
  else
  {
    char v14 = v9;
  }
  if (v9 == 4) {
    int v15 = 1065353216;
  }
  else {
    int v15 = HIDWORD(v9);
  }
  v24[0] = v12;
  v24[1] = v10;
  v24[2] = v13;
  v24[3] = v11;
  void v24[4] = v15;
  char v25 = v14;
  uint64_t v16 = *a1;
  if (*a1)
  {
    uint64_t ObjectType = swift_getObjectType();
    type metadata accessor for particle_set_velocity_uniforms(0);
    sub_1B6B594A8((uint64_t)v24, 1, ObjectType, v18, v19, v20, v21, v22);
  }
  swift_retain();
  sub_1B6786A24((uint64_t)a1);
  sub_1B6BFF388(v4, v2, v16 == 0, 0, (uint64_t)a1, 0xD000000000000015, 0x80000001B6F4EC30, 0);
  sub_1B6786A7C((uint64_t)a1);
  return swift_release();
}

uint64_t getEnumTagSinglePayload for ParticleVelocityInit(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFD && *(unsigned char *)(a1 + 24)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 4;
  int v5 = v3 - 4;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleVelocityInit(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = a2 - 253;
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFD) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 3;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleVelocityInit()
{
  return &type metadata for ParticleVelocityInit;
}

uint64_t sub_1B6C5C740@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6C5CA04(0, &qword_1E9DD78E8, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)&v16 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C5C9B0();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B62AA858();
  HIBYTE(v16) = 0;
  sub_1B62AA5EC((unint64_t *)&qword_1EB980418);
  sub_1B6E32DF8();
  uint64_t v11 = v17;
  HIBYTE(v16) = 1;
  sub_1B6E32DF8();
  uint64_t v12 = v17;
  HIBYTE(v16) = 2;
  sub_1B63BD348();
  sub_1B6E32DF8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  char v13 = v17;
  int v14 = HIDWORD(v17);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(void *)a2 = v11;
  *(void *)(a2 + 8) = v12;
  *(unsigned char *)(a2 + 16) = v13;
  *(_DWORD *)(a2 + 20) = v14;
  return result;
}

unint64_t sub_1B6C5C9B0()
{
  unint64_t result = qword_1E9DD78F0;
  if (!qword_1E9DD78F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD78F0);
  }
  return result;
}

void sub_1B6C5CA04(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6C5C9B0();
    unint64_t v7 = a3(a1, &type metadata for ParticleVelocityInit.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ParticleVelocityInit.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C5CB34);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleVelocityInit.CodingKeys()
{
  return &type metadata for ParticleVelocityInit.CodingKeys;
}

unint64_t sub_1B6C5CB70()
{
  unint64_t result = qword_1E9DD7900;
  if (!qword_1E9DD7900)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7900);
  }
  return result;
}

unint64_t sub_1B6C5CBC8()
{
  unint64_t result = qword_1E9DD7908;
  if (!qword_1E9DD7908)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7908);
  }
  return result;
}

unint64_t sub_1B6C5CC20()
{
  unint64_t result = qword_1E9DD7910;
  if (!qword_1E9DD7910)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7910);
  }
  return result;
}

uint64_t sub_1B6C5CC74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, unint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v9 = v8;
  uint64_t v14 = (*(uint64_t (**)(void))(a2 + 8))();
  int v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(a2 + 32);
  uint64_t v16 = swift_retain();
  v15(v16, a1, a2);
  swift_release();
  uint64_t v17 = *(uint64_t (**)(uint64_t, uint64_t))(a2 + 24);
  if (v17(a1, a2) != qword_1E9DD3038) {
    a3 = v17(a1, a2);
  }
  uint64_t v18 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  uint64_t v20 = v19;
  char v22 = v21;
  float32x4_t v23 = (void *)swift_allocObject();
  void v23[2] = a7;
  v23[3] = a8;
  _OWORD v23[4] = v14;
  v23[5] = a2;
  uint64_t v24 = *(void *)(v9 + 24);
  swift_unknownObjectRetain_n();
  swift_retain();
  swift_retain();
  sub_1B6369AC4(v14, a6, v18, v20, v22, v14, a2, a3, (uint64_t)v39, a4, 1, 1, a5 & 1, (uint64_t)sub_1B6C5E5B8, (uint64_t)v23, v24);
  unint64_t v25 = v39[0];
  uint64_t v26 = v39[2];
  uint64_t v27 = v39[3];
  char v28 = v40;
  long long v37 = v41;
  uint64_t v29 = v42;
  uint64_t v30 = v43;
  LOBYTE(v23) = v44;
  char v35 = v45;
  LOBYTE(v18) = v46;
  int v33 = v47;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v9 + 56));
  unsigned long long v49 = __PAIR128__(v39[1], v25);
  uint64_t v50 = v26;
  uint64_t v51 = v27;
  char v52 = v28;
  long long v53 = v37;
  uint64_t v54 = v29;
  uint64_t v55 = v30;
  char v56 = (char)v23;
  char v57 = v35;
  char v58 = v18;
  int v59 = v33;
  long long v60 = v48;
  sub_1B62F6778((uint64_t)v39);
  sub_1B6369960(0, 0, &v49);
  sub_1B62F6778((uint64_t)v39);
  sub_1B6369960(0, 0, &v49);
  *(_WORD *)(v9 + 160) = 257;
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v9 + 56));
  sub_1B62F6BB8((uint64_t)v39);
  return swift_unknownObjectRelease();
}

uint64_t sub_1B6C5CF1C()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t result = swift_retain();
  if (!v1) {
    return result;
  }
  int v3 = *(os_unfair_lock_s **)(v0 + 56);
  os_unfair_lock_lock(v3);
  uint64_t v4 = sub_1B637B2D4();
  if (v5)
  {
    os_unfair_lock_unlock(v3);
  }
  else
  {
    uint64_t v6 = *(void *)(v0 + 96) + 96 * v4;
    uint64_t v29 = *(void *)(v6 + 32);
    uint64_t v24 = *(unsigned int *)(v6 + 40);
    uint64_t v22 = *(unsigned int *)(v6 + 44);
    uint64_t v7 = *(void *)(v6 + 56);
    uint64_t v31 = *(void *)(v6 + 48);
    uint64_t v32 = *(unsigned __int8 *)(v6 + 64);
    uint64_t v27 = *(void *)(v6 + 88);
    uint64_t v28 = *(void *)(v6 + 80);
    uint64_t v26 = *(void *)(v6 + 96);
    uint64_t v8 = *(unsigned __int8 *)(v6 + 104);
    int v9 = *(unsigned __int8 *)(v6 + 105);
    int v10 = *(unsigned __int8 *)(v6 + 106);
    uint64_t v11 = *(unsigned int *)(v6 + 108);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v6 + 112);
    uint64_t v30 = *(void *)(v6 + 72);
    swift_unknownObjectRetain();
    swift_retain();
    os_unfair_lock_unlock(v3);
    if (v12)
    {
      uint64_t v13 = 256;
      if (!v9) {
        uint64_t v13 = 0;
      }
      uint64_t v14 = v13 | v8;
      uint64_t v15 = 0x10000;
      if (!v10) {
        uint64_t v15 = 0;
      }
      uint64_t v16 = v14 | v15 | (v11 << 32);
      uint64_t v17 = v24 | (v22 << 32);
      long long v18 = *(_OWORD *)(v0 + 64);
      long long v25 = v18;
      uint64_t v23 = *(void *)(v0 + 80);
      char v20 = *(unsigned char *)(v0 + 89);
      char v21 = *(unsigned char *)(v0 + 88);
      *(void *)(v0 + 64) = v29;
      *(void *)(v0 + 72) = v31;
      *(void *)(v0 + 80) = v7;
      *(unsigned char *)(v0 + 88) = v32;
      *(unsigned char *)(v0 + 89) = 0;
      uint64_t v19 = *(void *)(*(void *)(*(void *)(v1 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                  + 8 * *(void *)thread_worker_index(&thread_worker_index, *(double *)&v18)
                                  + 8)
                      + 32);
      swift_unknownObjectRetain();
      swift_retain();
      ecs_stack_allocator_push_snapshot(v19);
      v12(v1, 3);
      ecs_stack_allocator_pop_snapshot(v19);
      sub_1B6C5E528(v29, v17, v31, v7, v32, v30, v28, v27, v26, v16, (uint64_t)v12);
      swift_release();
      uint64_t result = sub_1B6C5E528(v29, v17, v31, v7, v32, v30, v28, v27, v26, v16, (uint64_t)v12);
      *(_OWORD *)(v0 + 64) = v25;
      *(void *)(v0 + 80) = v23;
      *(unsigned char *)(v0 + 88) = v21;
      *(unsigned char *)(v0 + 89) = v20;
      return result;
    }
  }

  return swift_release();
}

void sub_1B6C5D1CC(uint64_t a1, char a2)
{
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v2 + 56));
  char v5 = *(void **)(v2 + 96);
  uint64_t v6 = v5[2];
  if (v6)
  {
    uint64_t v7 = 0;
    char v8 = a2 & 1;
    do
    {
      if (LODWORD(v5[v7 + 5]) == a1 && HIDWORD(v5[v7 + 5]) == HIDWORD(a1))
      {
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)(v2 + 96) = v5;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          char v5 = sub_1B62BDEA0(v5);
        }
        BYTE1(v5[v7 + 13]) = v8;
        *(void *)(v2 + 96) = v5;
      }
      v7 += 12;
      --v6;
    }
    while (v6);
  }
  *(_WORD *)(v2 + 160) = 257;
  uint64_t v11 = *(os_unfair_lock_s **)(v2 + 56);

  os_unfair_lock_unlock(v11);
}

uint64_t sub_1B6C5D294()
{
  MEMORY[0x1BA9B84C0](*(void *)(v0 + 56), -1, -1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B6C5D31C()
{
  sub_1B6C5D294();

  return swift_deallocClassInstance();
}

uint64_t sub_1B6C5D350()
{
  swift_unknownObjectRetain();

  return swift_retain();
}

uint64_t destroy for Scheduler.Event()
{
  return sub_1B6C5D3D0();
}

uint64_t sub_1B6C5D3D0()
{
  swift_release();

  return swift_unknownObjectRelease();
}

void *initializeWithCopy for Scheduler.Event(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  sub_1B6C5D350();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  return a1;
}

void *assignWithCopy for Scheduler.Event(void *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a2[6];
  uint64_t v10 = a2[7];
  uint64_t v11 = a2[8];
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  sub_1B6C5D350();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  a1[4] = v7;
  a1[5] = v8;
  a1[6] = v9;
  a1[7] = v10;
  a1[8] = v11;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  sub_1B6C5D3D0();
  return a1;
}

uint64_t assignWithTake for Scheduler.Event(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 96);
  long long v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + 16) = v4;
  long long v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  long long v6 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v6;
  *(void *)(a1 + 96) = v3;
  sub_1B6C5D3D0();
  return a1;
}

uint64_t getEnumTagSinglePayload for Scheduler.Event(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 104)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = *(_DWORD *)(a1 + 41);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

double storeEnumTagSinglePayload for Scheduler.Event(uint64_t a1, int a2, int a3)
{
  if (a2 < 0)
  {
    double result = 0.0;
    *(_OWORD *)(a1 + 72) = 0u;
    *(_OWORD *)(a1 + 88) = 0u;
    *(_OWORD *)(a1 + 56) = 0u;
    *(_OWORD *)(a1 + 40) = 0u;
    *(_OWORD *)(a1 + 24) = 0u;
    *(_OWORD *)(a1 + 8) = 0u;
    *(void *)a1 = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(a1 + 104) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      double result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      *(void *)(a1 + 32) = 0;
      *(void *)(a1 + 40) = (unint64_t)-a2 << 8;
      *(_OWORD *)(a1 + 48) = 0u;
      *(_OWORD *)(a1 + 64) = 0u;
      *(_OWORD *)(a1 + 80) = 0u;
      *(void *)(a1 + 96) = 0;
      return result;
    }
    *(unsigned char *)(a1 + 104) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

uint64_t sub_1B6C5D704(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 83) >> 7;
}

uint64_t sub_1B6C5D710(uint64_t result)
{
  *(void *)(result + 80) &= ~0x80000000uLL;
  return result;
}

uint64_t sub_1B6C5D720(uint64_t result, int a2)
{
  unint64_t v2 = *(void *)(result + 80) & 0xFFFFFFFF00010101 | (a2 << 31);
  *(void *)(result + 40) = *(unsigned __int8 *)(result + 40);
  *(void *)(result + 80) = v2;
  return result;
}

ValueMetadata *type metadata accessor for Scheduler.Event()
{
  return &type metadata for Scheduler.Event;
}

void *initializeBufferWithCopyOfBuffer for JobQueue(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for JobQueue(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

void *assignWithTake for JobQueue(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  return a1;
}

ValueMetadata *type metadata accessor for JobQueue()
{
  return &type metadata for JobQueue;
}

uint64_t assignWithCopy for Scheduler.Job(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  *(void *)(a1 + 48) = v4;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  uint64_t v5 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(void *)(a1 + 88) = v5;
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for Scheduler.Job(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  swift_unknownObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  *(unsigned char *)(a1 + 73) = *(unsigned char *)(a2 + 73);
  *(unsigned char *)(a1 + 74) = *(unsigned char *)(a2 + 74);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for Scheduler.Job(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 96)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 80);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Scheduler.Job(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 88) = 0;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 96) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 80) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 96) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Scheduler.Job()
{
  return &type metadata for Scheduler.Job;
}

ValueMetadata *type metadata accessor for Scheduler.SystemRegistrationOptions()
{
  return &type metadata for Scheduler.SystemRegistrationOptions;
}

unint64_t sub_1B6C5DA40()
{
  unint64_t result = qword_1E9DD7918;
  if (!qword_1E9DD7918)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7918);
  }
  return result;
}

unint64_t sub_1B6C5DA98()
{
  unint64_t result = qword_1E9DD7920;
  if (!qword_1E9DD7920)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7920);
  }
  return result;
}

unint64_t sub_1B6C5DAF0()
{
  unint64_t result = qword_1E9DD7928;
  if (!qword_1E9DD7928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7928);
  }
  return result;
}

unint64_t sub_1B6C5DB48()
{
  unint64_t result = qword_1E9DD7930;
  if (!qword_1E9DD7930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7930);
  }
  return result;
}

unint64_t sub_1B6C5DBCC(unint64_t result, uint64_t a2, uint64_t a3, void *a4, uint64_t *a5)
{
  unint64_t v30 = result;
  if (a3 != a2)
  {
    uint64_t v6 = a3;
    uint64_t v7 = (_OWORD *)(*a4 + 96 * a3 + 80);
    do
    {
      unint64_t v8 = v30;
      uint64_t v32 = v7;
      do
      {
        uint64_t v23 = *((void *)v7 - 22);
        uint64_t v24 = (uint64_t *)(v7 - 5);
        uint64_t v25 = *a5;
        if (*(void *)(*a5 + 16) && (unint64_t result = sub_1B62C19C8(*v24), (v26 & 1) != 0)) {
          uint64_t v27 = *(void *)(*(void *)(v25 + 56) + 8 * result);
        }
        else {
          uint64_t v27 = -1;
        }
        uint64_t v28 = *a5;
        if (!*(void *)(*a5 + 16) || (unint64_t result = sub_1B62C19C8(v23), (v29 & 1) == 0))
        {
          if (v27 >= -1) {
            break;
          }
          goto LABEL_7;
        }
        if (v27 >= *(void *)(*(void *)(v28 + 56) + 8 * result)) {
          break;
        }
LABEL_7:
        uint64_t v9 = *((void *)v7 - 10);
        char v10 = *((unsigned char *)v7 - 48);
        char v11 = *((unsigned char *)v7 - 8);
        char v12 = *((unsigned char *)v7 - 7);
        char v13 = *((unsigned char *)v7 - 6);
        int v14 = *((_DWORD *)v7 - 1);
        long long v15 = *(v7 - 4);
        long long v16 = *(_OWORD *)((char *)v7 - 40);
        long long v17 = *(_OWORD *)((char *)v7 - 24);
        uint64_t v18 = *((void *)v7 - 9);
        long long v19 = *v7;
        long long v20 = *(v7 - 8);
        *(v7 - 3) = *(v7 - 9);
        *(v7 - 2) = v20;
        long long v21 = *(v7 - 6);
        *(v7 - 1) = *(v7 - 7);
        *uint64_t v7 = v21;
        long long v22 = *(v7 - 10);
        *(_OWORD *)uint64_t v24 = *(v7 - 11);
        *(v7 - 4) = v22;
        *(v7 - 6) = v19;
        v7 -= 6;
        *((void *)v7 - 10) = v9;
        *((void *)v7 - 9) = v18;
        *(v7 - 4) = v15;
        *((unsigned char *)v7 - 48) = v10;
        *(_OWORD *)((char *)v7 - 40) = v16;
        *(_OWORD *)((char *)v7 - 24) = v17;
        *((unsigned char *)v7 - 8) = v11;
        *((unsigned char *)v7 - 7) = v12;
        *((unsigned char *)v7 - 6) = v13;
        ++v8;
        *((_DWORD *)v7 - 1) = v14;
      }
      while (v6 != v8);
      ++v6;
      uint64_t v7 = v32 + 6;
    }
    while (v6 != a2);
  }
  return result;
}

uint64_t sub_1B6C5DD44(uint64_t a1, uint64_t *a2)
{
  unint64_t v2 = *(void **)a1;
  uint64_t v3 = *(void *)(*(void *)a1 + 16);
  if (!v3) {
    return 0;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v5 = (uint64_t)&v2[12 * v4 + 4];
    int v6 = *(_DWORD *)(v5 + 8);
    int v7 = *(_DWORD *)(v5 + 12);
    if (v6 != -1 || v7 != 0)
    {
      uint64_t v9 = *a2;
      if (*(void *)(*a2 + 16))
      {
        sub_1B6E33918();
        sub_1B6E33958();
        sub_1B6E33958();
        uint64_t v10 = sub_1B6E33988();
        uint64_t v11 = -1 << *(unsigned char *)(v9 + 32);
        unint64_t v12 = v10 & ~v11;
        if ((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12)) {
          break;
        }
      }
    }
LABEL_3:
    if (++v4 == v3) {
      return v2[2];
    }
  }
  uint64_t v13 = ~v11;
  while (1)
  {
    int v14 = (int *)(*(void *)(v9 + 48) + 8 * v12);
    int v16 = *v14;
    int v15 = v14[1];
    if (v16 == v6 && v15 == v7) {
      break;
    }
    unint64_t v12 = (v12 + 1) & v13;
    if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v12) & 1) == 0) {
      goto LABEL_3;
    }
  }
  for (uint64_t i = v4 + 1; i != v2[2]; ++i)
  {
    uint64_t v23 = v2 + 4;
    uint64_t v24 = (uint64_t)&v2[12 * i + 4];
    int v25 = *(_DWORD *)(v24 + 8);
    int v26 = *(_DWORD *)(v24 + 12);
    BOOL v27 = v25 == -1 && v26 == 0;
    if (!v27
      && (uint64_t v28 = *a2, *(void *)(*a2 + 16))
      && (sub_1B6E33918(),
          sub_1B6E33958(),
          sub_1B6E33958(),
          uint64_t v29 = sub_1B6E33988(),
          uint64_t v30 = -1 << *(unsigned char *)(v28 + 32),
          unint64_t v31 = v29 & ~v30,
          ((*(void *)(v28 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) != 0))
    {
      uint64_t v32 = ~v30;
      while (1)
      {
        int v33 = (int *)(*(void *)(v28 + 48) + 8 * v31);
        int v35 = *v33;
        int v34 = v33[1];
        if (v35 == v25 && v34 == v26) {
          break;
        }
        unint64_t v31 = (v31 + 1) & v32;
        if (((*(void *)(v28 + 56 + ((v31 >> 3) & 0xFFFFFFFFFFFFFF8)) >> v31) & 1) == 0) {
          goto LABEL_34;
        }
      }
    }
    else
    {
LABEL_34:
      if (v4 != i)
      {
        long long v37 = &v23[12 * v4];
        uint64_t v38 = v37[1];
        uint64_t v69 = v37[2];
        uint64_t v70 = *v37;
        uint64_t v68 = v37[3];
        char v67 = *((unsigned char *)v37 + 32);
        uint64_t v39 = v37[5];
        uint64_t v65 = v37[7];
        uint64_t v66 = v37[6];
        uint64_t v64 = v37[8];
        char v62 = *((unsigned char *)v37 + 73);
        char v63 = *((unsigned char *)v37 + 72);
        int v60 = *((_DWORD *)v37 + 19);
        char v61 = *((unsigned char *)v37 + 74);
        uint64_t v40 = v37[11];
        uint64_t v58 = *(void *)v24;
        uint64_t v59 = v37[10];
        uint64_t v41 = *(void *)(v24 + 8);
        uint64_t v42 = &v23[12 * i];
        uint64_t v56 = v42[3];
        uint64_t v57 = v42[2];
        char v55 = *((unsigned char *)v42 + 32);
        uint64_t v44 = v42[5];
        uint64_t v43 = v42[6];
        uint64_t v53 = v42[8];
        uint64_t v54 = v42[7];
        char v51 = *((unsigned char *)v42 + 73);
        char v52 = *((unsigned char *)v42 + 72);
        int v49 = *((_DWORD *)v42 + 19);
        char v50 = *((unsigned char *)v42 + 74);
        uint64_t v45 = v42[11];
        uint64_t v48 = v42[10];
        swift_unknownObjectRetain();
        swift_retain();
        swift_unknownObjectRetain();
        swift_retain();
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          unint64_t v2 = sub_1B62BDEA0(v2);
        }
        long long v19 = v2;
        long long v20 = v2 + 4;
        long long v21 = &v20[12 * v4];
        void *v21 = v58;
        v21[1] = v41;
        void v21[2] = v57;
        uint64_t v21[3] = v56;
        *((unsigned char *)v21 + 32) = v55;
        v21[5] = v44;
        v21[6] = v43;
        v21[7] = v54;
        v21[8] = v53;
        *((unsigned char *)v21 + 72) = v52;
        *((unsigned char *)v21 + 73) = v51;
        *((unsigned char *)v21 + 74) = v50;
        *((_DWORD *)v21 + 19) = v49;
        v21[10] = v48;
        v21[11] = v45;
        swift_release();
        swift_unknownObjectRelease();
        long long v22 = &v20[12 * i];
        unint64_t v2 = v19;
        *long long v22 = v70;
        v22[1] = v38;
        v22[2] = v69;
        v22[3] = v68;
        *((unsigned char *)v22 + 32) = v67;
        v22[5] = v39;
        v22[6] = v66;
        v22[7] = v65;
        v22[8] = v64;
        *((unsigned char *)v22 + 72) = v63;
        *((unsigned char *)v22 + 73) = v62;
        *((unsigned char *)v22 + 74) = v61;
        *((_DWORD *)v22 + 19) = v60;
        v22[10] = v59;
        v22[11] = v40;
        swift_release();
        swift_unknownObjectRelease();
        *(void *)a1 = v19;
      }
      ++v4;
    }
  }
  return v4;
}

void sub_1B6C5E164()
{
  if (!qword_1E9DD7938)
  {
    sub_1B6C5E1CC();
    unint64_t v0 = sub_1B6E32B88();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD7938);
    }
  }
}

void sub_1B6C5E1CC()
{
  if (!qword_1E9DD0990)
  {
    sub_1B67FAEF4();
    unint64_t v0 = sub_1B6E31D18();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD0990);
    }
  }
}

uint64_t sub_1B6C5E224(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 24);
  uint64_t result = swift_retain();
  if (!v4) {
    return result;
  }
  int v6 = *(os_unfair_lock_s **)(a1 + 56);
  os_unfair_lock_lock(v6);
  type metadata accessor for HiddenSystem();
  uint64_t v7 = sub_1B637B2D4();
  if (v8)
  {
    os_unfair_lock_unlock(v6);
  }
  else
  {
    uint64_t v31 = a2;
    uint64_t v9 = *(void *)(a1 + 96) + 96 * v7;
    uint64_t v35 = *(void *)(v9 + 32);
    uint64_t v27 = *(unsigned int *)(v9 + 40);
    uint64_t v25 = *(unsigned int *)(v9 + 44);
    uint64_t v32 = *(void *)(v9 + 56);
    uint64_t v33 = *(void *)(v9 + 48);
    uint64_t v34 = *(unsigned __int8 *)(v9 + 64);
    uint64_t v10 = *(void *)(v9 + 72);
    uint64_t v36 = *(void *)(v9 + 80);
    uint64_t v29 = *(void *)(v9 + 96);
    uint64_t v30 = *(void *)(v9 + 88);
    uint64_t v11 = *(unsigned __int8 *)(v9 + 104);
    int v12 = *(unsigned __int8 *)(v9 + 105);
    int v13 = *(unsigned __int8 *)(v9 + 106);
    uint64_t v23 = *(unsigned int *)(v9 + 108);
    uint64_t v14 = *(void *)(v9 + 112);
    swift_unknownObjectRetain();
    swift_retain();
    os_unfair_lock_unlock(v6);
    if (v14)
    {
      uint64_t v15 = 256;
      if (!v12) {
        uint64_t v15 = 0;
      }
      uint64_t v16 = v15 | v11;
      uint64_t v17 = 0x10000;
      if (!v13) {
        uint64_t v17 = 0;
      }
      uint64_t v18 = v16 | v17 | (v23 << 32);
      uint64_t v19 = v27 | (v25 << 32);
      long long v20 = *(_OWORD *)(a1 + 64);
      long long v28 = v20;
      uint64_t v26 = *(void *)(a1 + 80);
      char v22 = *(unsigned char *)(a1 + 89);
      char v24 = *(unsigned char *)(a1 + 88);
      *(void *)(a1 + 64) = v35;
      *(void *)(a1 + 72) = v33;
      *(void *)(a1 + 80) = v32;
      *(unsigned char *)(a1 + 88) = v34;
      *(unsigned char *)(a1 + 89) = 0;
      uint64_t v21 = *(void *)(*(void *)(*(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                                  + 8 * *(void *)thread_worker_index(&thread_worker_index, *(double *)&v20)
                                  + 8)
                      + 32);
      swift_unknownObjectRetain();
      swift_retain();
      ecs_stack_allocator_push_snapshot(v21);
      sub_1B62C55B0(0, qword_1EB97FE08);
      swift_unknownObjectRetain();
      swift_dynamicCast();
      sub_1B63632EC(v31);
      swift_release();
      ecs_stack_allocator_pop_snapshot(v21);
      sub_1B6C5E528(v35, v19, v33, v32, v34, v10, v36, v30, v29, v18, v14);
      swift_release();
      uint64_t result = sub_1B6C5E528(v35, v19, v33, v32, v34, v10, v36, v30, v29, v18, v14);
      *(_OWORD *)(a1 + 64) = v28;
      *(void *)(a1 + 80) = v26;
      *(unsigned char *)(a1 + 88) = v24;
      *(unsigned char *)(a1 + 89) = v22;
      return result;
    }
  }

  return swift_release();
}

uint64_t sub_1B6C5E528(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
  {
    swift_release();
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B6C5E578()
{
  swift_release();
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

uint64_t sub_1B6C5E5B8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, void, void, uint64_t))(v2 + 16))(a1, *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

uint64_t sub_1B6C5E5EC()
{
  swift_unknownObjectRelease();

  return MEMORY[0x1F4186498](v0, 32, 7);
}

unsigned char *storeEnumTagSinglePayload for Scheduler.Tag(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C5E6F0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Scheduler.Tag()
{
  return &type metadata for Scheduler.Tag;
}

unsigned char *storeEnumTagSinglePayload for Scheduler.Action(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFA)
  {
    unsigned int v6 = ((a2 - 251) >> 8) + 1;
    *uint64_t result = a2 + 5;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C5E7F4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 5;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for Scheduler.Action()
{
  return &type metadata for Scheduler.Action;
}

unint64_t sub_1B6C5E830()
{
  unint64_t result = qword_1E9DD7940;
  if (!qword_1E9DD7940)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7940);
  }
  return result;
}

unint64_t sub_1B6C5E888()
{
  unint64_t result = qword_1E9DD7948;
  if (!qword_1E9DD7948)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7948);
  }
  return result;
}

uint64_t sub_1B6C5E8E0(void *a1)
{
  int v3 = v1;
  sub_1B6C5FA1C(0, &qword_1E9DD7950, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C5F9C8();
  sub_1B6E33A88();
  uint64_t v13 = *v3;
  HIBYTE(v12) = 0;
  sub_1B62AA858();
  sub_1B62AA5EC(qword_1E9DD02C8);
  sub_1B6E32FA8();
  if (!v2)
  {
    uint64_t v13 = v3[1];
    HIBYTE(v12) = 1;
    sub_1B6E32FA8();
    uint64_t v13 = v3[2];
    HIBYTE(v12) = 2;
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B6C5EAE4(uint64_t a1)
{
  unint64_t v2 = sub_1B6C5F9C8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C5EB20(uint64_t a1)
{
  unint64_t v2 = sub_1B6C5F9C8();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B6C5EB5C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6C5F768(a1, &v5);
  if (!v2)
  {
    double result = *(double *)&v5;
    *(_OWORD *)a2 = v5;
    *(void *)(a2 + 16) = v6;
  }
  return result;
}

uint64_t sub_1B6C5EBA0(void *a1)
{
  return sub_1B6C5E8E0(a1);
}

uint64_t sub_1B6C5EBB8()
{
  return type metadata accessor for ParticleAngularVelocityInit.System();
}

double sub_1B6C5EBD8()
{
  sub_1B62D2D24(0, (unint64_t *)&qword_1EB980BA0, (void (*)(uint64_t))sub_1B663C11C);
  uint64_t v0 = swift_allocObject();
  *(void *)&double result = 2;
  *(_OWORD *)(v0 + 16) = xmmword_1B6E76B30;
  *(void *)(v0 + 32) = &type metadata for Orientation;
  *(void *)(v0 + 40) = &off_1F0F560A8;
  *(void *)(v0 + 48) = &type metadata for AngularVelocity;
  *(void *)(v0 + 56) = &off_1F0F67CE8;
  return result;
}

void sub_1B6C5EC50(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  long long v5 = v4;
  long long v6 = *(_OWORD *)(a3 + 104);
  v54[0] = *(_OWORD *)(a3 + 88);
  v54[1] = v6;
  uint64_t v55 = *(void *)(a3 + 120);
  sub_1B62C9DA8(a2, (uint64_t)v54, 0x200000000, v39);
  sub_1B62D7910((uint64_t)v39, (uint64_t)v40, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (*(void *)&v40[0])
  {
    long long v47 = v40[0];
    long long v48 = v40[1];
    uint64_t v49 = v41;
    uint64_t v32 = v46;
    if (v46 >= 1 && (uint64_t v7 = v43) != 0)
    {
      uint64_t v8 = v45;
      uint64_t v62 = v45[4];
      uint64_t v31 = v44;
      int v9 = *(unsigned __int8 *)(v44 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v27 = v45 + 13;
      long long v28 = v45 + 8;
      uint64_t v29 = (uint64_t)(v45 + 6);
      uint64_t v10 = (uint64_t *)(v42 + 24);
      int v30 = v9;
      while (1)
      {
        uint64_t v11 = *((unsigned int *)v10 - 6);
        uint64_t v12 = *((unsigned int *)v10 - 5);
        uint64_t v13 = *((unsigned int *)v10 - 4);
        uint64_t v36 = *v10;
        uint64_t v37 = *(v10 - 1);
        uint64_t v14 = v10[2];
        uint64_t v35 = v10[1];
        uint64_t v38 = v7;
        uint64_t v15 = v5;
        if (v9)
        {
          uint64_t v16 = *(os_unfair_lock_s **)(v14 + 376);
          swift_retain();
          os_unfair_lock_lock(v16);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v62);
        sub_1B62D7910(v29, (uint64_t)v56, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
        uint64_t v17 = v8[4];
        uint64_t v18 = *(void *)(*(void *)(*(void *)(*(void *)(v14 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v8[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
        v8[7] = v18;
        v28[1] = 0;
        _OWORD v28[2] = 0;
        *long long v28 = 0;
        swift_release();
        v57[0] = v31;
        v57[1] = v14;
        _OWORD v57[2] = v8;
        v57[3] = v13;
        v57[4] = (v12 - v11 + v13);
        v57[5] = v32;
        v57[6] = v11;
        v57[7] = v12;
        v57[8] = 0;
        v57[9] = 0;
        char v58 = 1;
        uint64_t v59 = v37;
        uint64_t v60 = v36;
        uint64_t v61 = v35;
        sub_1B6C5F08C((uint64_t)v57, a4, a1);
        if (v15) {
          break;
        }
        v52[0] = v47;
        v52[1] = v48;
        uint64_t v53 = v49;
        sub_1B6345178(v8, (unsigned __int16 **)v52, (uint64_t)v56);
        long long v5 = 0;
        if (*(void *)(v8[13] + 16))
        {
          uint64_t v19 = swift_bridgeObjectRetain();
          sub_1B639147C(v19, v14);
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v21 = v8[13];
          if (isUniquelyReferenced_nonNull_native)
          {
            sub_1B6399BB8(0, *(void *)(v21 + 16));
          }
          else
          {
            char v22 = (void *)MEMORY[0x1E4FBC860];
            if (*(void *)(v21 + 24) >= 2uLL)
            {
              sub_1B62D2D24(0, (unint64_t *)&qword_1EB980C00, (void (*)(uint64_t))sub_1B63B29DC);
              char v22 = (void *)swift_allocObject();
              size_t v23 = j__malloc_size(v22);
              v22[2] = 0;
              v22[3] = 2 * ((uint64_t)(v23 - 32) / 72);
            }
            *uint64_t v27 = v22;
            swift_bridgeObjectRelease();
          }
          if (*(unsigned __int8 *)(v8[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
          {
            char v24 = *(char **)(v14 + 232);
            uint64_t v25 = *(char **)(v14 + 256);
            if (v24 == v25)
            {
              uint64_t v26 = *(char **)(v14 + 240);
            }
            else
            {
              sub_1B666018C(v25, v24);
              uint64_t v25 = *(char **)(v14 + 232);
              uint64_t v26 = *(char **)(v14 + 240);
              if (v26 == v25)
              {
                uint64_t v26 = 0;
                uint64_t v25 = 0;
                *(void *)(v14 + 232) = 0;
                *(void *)(v14 + 240) = 0;
              }
            }
            *(void *)(v14 + 248) = v26;
            *(void *)(v14 + 256) = v25;
          }
        }
        ecs_stack_allocator_pop_snapshot(v62);
        int v9 = v30;
        if (v30)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
        }
        swift_release();
        v10 += 6;
        uint64_t v7 = v38 - 1;
        if (v38 == 1) {
          goto LABEL_24;
        }
      }

      v50[0] = v47;
      v50[1] = v48;
      uint64_t v51 = v49;
      sub_1B6345178(v8, (unsigned __int16 **)v50, (uint64_t)v56);
      sub_1B634507C((char *)v14);
      ecs_stack_allocator_pop_snapshot(v62);
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
      __break(1u);
    }
    else
    {
LABEL_24:
      sub_1B632F170(v39);
    }
  }
}

void sub_1B6C5F08C(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = sub_1B62C9024((uint64_t)&type metadata for AngularVelocity, (uint64_t)&off_1F0F67CE8, *(uint64_t **)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 16));
  uint64_t v8 = v6;
  v10.i32[0] = *(_DWORD *)a2;
  v9.i32[0] = *(_DWORD *)(a2 + 4);
  if (*(float *)a2 == v9.f32[0]
    && *(float *)(a2 + 8) == *(float *)(a2 + 12)
    && *(float *)(a2 + 16) == *(float *)(a2 + 20))
  {
    v10.i32[1] = *(_DWORD *)(a2 + 8);
    v10.i32[2] = *(_DWORD *)(a2 + 16);
    float32x4_t v11 = vabsq_f32(v10);
    *(float *)v7.i32 = fmaxf(fmaxf(v11.f32[0], v11.f32[2]), v11.f32[1]);
    float32x4_t v12 = 0uLL;
    if (fabsf(*(float *)v7.i32) > 0.00000011921)
    {
      v13.i64[0] = 0x3F0000003F000000;
      v13.i64[1] = 0x3F0000003F000000;
      simd_float4 v14 = (simd_float4)vmulq_f32(vdivq_f32(v10, (float32x4_t)vdupq_lane_s32(v7, 0)), v13);
      v14.i32[3] = 0;
      simd_float4 x = v14;
      float v85 = *(float *)v7.i32;
      simd_float4 v81 = _simd_cos_f4(v14);
      _Q0 = _simd_sin_f4(x);
      _Q7 = v81;
      float v17 = vmuls_lane_f32(v81.f32[1], (float32x4_t)v81, 2);
      float v18 = vmuls_lane_f32(_Q0.f32[1], (float32x4_t)_Q0, 2);
      v19.f32[0] = vmlas_n_f32(-(float)(v81.f32[0] * v18), v17, _Q0.f32[0]);
      _S4 = vmuls_lane_f32(v81.f32[0], *(float32x2_t *)_Q0.f32, 1);
      __asm { FMLA            S5, S4, V7.S[2] }
      _S4 = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q7.f32, 1);
      __asm { FMLA            S6, S4, V0.S[2] }
      float v28 = vmlas_n_f32(v18 * _Q0.f32[0], v17, v81.f32[0]);
      v19.i32[1] = _S5;
      v19.i32[2] = _S6;
      float32x4_t v29 = vmulq_f32(v19, v19);
      LODWORD(v30) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v29, 2), vaddq_f32(v29, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v29.f32, 1))).u32[0];
      float32x2_t v31 = vrsqrte_f32((float32x2_t)LODWORD(v30));
      float32x2_t v32 = vmul_f32(v31, vrsqrts_f32((float32x2_t)LODWORD(v30), vmul_f32(v31, v31)));
      float32x4_t v82 = vmulq_n_f32(v19, vmul_f32(v32, vrsqrts_f32((float32x2_t)LODWORD(v30), vmul_f32(v32, v32))).f32[0]);
      float v33 = atan2f(sqrtf(v30), v28);
      float32x4_t v12 = v82;
      v12.f32[3] = v85 * (float)(v33 + v33);
    }
    uint64_t v34 = *(void *)(a1 + 48);
    uint64_t v35 = *(void *)(a1 + 56) - v34;
    if (v35)
    {
      uint64_t v36 = (float32x4_t *)(v8 + 16 * v34);
      do
      {
        *v36++ = v12;
        --v35;
      }
      while (v35);
    }
  }
  else
  {
    uint64_t v38 = *(void *)(a1 + 48);
    uint64_t v37 = *(void *)(a1 + 56);
    uint64_t v39 = v37 - v38;
    if (v37 != v38)
    {
      uint64_t v40 = a3[3];
      uint64_t v41 = a3[4];
      uint64_t v43 = a3[1];
      uint64_t v42 = a3[2];
      float v44 = v9.f32[0] - v10.f32[0];
      float v45 = *(float *)(a2 + 8);
      float v46 = *(float *)(a2 + 12) - v45;
      float v47 = *(float *)(a2 + 16);
      float v48 = *(float *)(a2 + 20) - v47;
      uint64_t v49 = (float32x4_t *)(v6 + 16 * v38);
      __int32 v78 = *(_DWORD *)a2;
      do
      {
        uint64_t v54 = v43 ^ v40;
        uint64_t v55 = v42 ^ v41;
        uint64_t v56 = v54 ^ v42;
        uint64_t v57 = v43 ^ v42 ^ v41;
        v9.f32[0] = v10.f32[0]
                  + (float)(v44
                          * (float)((float)((9
                                           * ((((unint64_t)(5 * v42) >> 32) >> 25) | (640 * v42))) & 0xFFFFFF)
                                  * 0.000000059605));
        uint64_t v58 = v54 ^ (v42 << 17) ^ v57;
        uint64_t v59 = v58 ^ v54 ^ v42;
        v9.f32[1] = v45
                  + (float)(v46
                          * (float)((float)((9
                                           * ((((unint64_t)(5 * v56) >> 32) >> 25) | (640 * v56))) & 0xFFFFFF)
                                  * 0.000000059605));
        v9.f32[2] = v47
                  + (float)(v48
                          * (float)((float)((9
                                           * ((((unint64_t)(5 * v59) >> 32) >> 25) | (640 * v59))) & 0xFFFFFF)
                                  * 0.000000059605));
        float32x4_t v60 = vabsq_f32(v9);
        *(float *)v7.i32 = fmaxf(fmaxf(v60.f32[0], v60.f32[2]), v60.f32[1]);
        float32x4_t v61 = 0uLL;
        if (fabsf(*(float *)v7.i32) > 0.00000011921)
        {
          v62.i64[0] = 0x3F0000003F000000;
          v62.i64[1] = 0x3F0000003F000000;
          simd_float4 v63 = (simd_float4)vmulq_f32(vdivq_f32(v9, (float32x4_t)vdupq_lane_s32(v7, 0)), v62);
          v63.i32[3] = 0;
          simd_float4 xa = v63;
          float v86 = *(float *)v7.i32;
          simd_float4 v83 = _simd_cos_f4(v63);
          _Q0 = _simd_sin_f4(xa);
          _Q7 = v83;
          float v66 = vmuls_lane_f32(v83.f32[1], (float32x4_t)v83, 2);
          float v67 = vmuls_lane_f32(_Q0.f32[1], (float32x4_t)_Q0, 2);
          v68.f32[0] = vmlas_n_f32(-(float)(v83.f32[0] * v67), v66, _Q0.f32[0]);
          _S4 = vmuls_lane_f32(v83.f32[0], *(float32x2_t *)_Q0.f32, 1);
          __asm { FMLA            S5, S4, V7.S[2] }
          _S4 = vmuls_lane_f32(_Q7.f32[0], *(float32x2_t *)_Q7.f32, 1);
          __asm { FMLA            S6, S4, V0.S[2] }
          float v73 = vmlas_n_f32(v67 * _Q0.f32[0], v66, v83.f32[0]);
          v68.i32[1] = _S5;
          v68.i32[2] = _S6;
          float32x4_t v74 = vmulq_f32(v68, v68);
          LODWORD(v75) = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v74, 2), vaddq_f32(v74, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v74.f32, 1))).u32[0];
          float32x2_t v76 = vrsqrte_f32((float32x2_t)LODWORD(v75));
          float32x2_t v77 = vmul_f32(v76, vrsqrts_f32((float32x2_t)LODWORD(v75), vmul_f32(v76, v76)));
          float32x4_t v84 = vmulq_n_f32(v68, vmul_f32(v77, vrsqrts_f32((float32x2_t)LODWORD(v75), vmul_f32(v77, v77))).f32[0]);
          v9.f32[0] = atan2f(sqrtf(v75), v73);
          float32x4_t v61 = v84;
          v10.i32[0] = v78;
          v61.f32[3] = v86 * (float)(v9.f32[0] + v9.f32[0]);
        }
        *v49++ = v61;
        uint64_t v50 = __ROR8__(v55, 19);
        uint64_t v51 = v56 ^ v50 ^ v57;
        uint64_t v52 = v58 ^ (v56 << 17) ^ v51;
        uint64_t v53 = v59 ^ __ROR8__(v56 ^ v50, 19);
        uint64_t v42 = v52 ^ v59;
        uint64_t v43 = v53 ^ v51;
        uint64_t v40 = v52 ^ (v59 << 17);
        uint64_t v41 = __ROR8__(v53, 19);
        --v39;
      }
      while (v39);
      a3[1] = v43;
      a3[2] = v42;
      a3[3] = v40;
      a3[4] = v41;
    }
  }
}

uint64_t type metadata accessor for ParticleAngularVelocityInit.System()
{
  return self;
}

uint64_t sub_1B6C5F4A8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  swift_retain_n();
  unint64_t v4 = sub_1B695F410(v3);
  unint64_t v6 = v5;
  uint64_t v8 = v7;
  char v10 = v9;
  swift_release();
  unint64_t v11 = HIDWORD(v4);
  unint64_t v12 = HIDWORD(v6);
  if (v10) {
    int v13 = -1068953638;
  }
  else {
    int v13 = v4;
  }
  if (v10)
  {
    LODWORD(v11) = 1078530010;
    int v14 = -1068953638;
  }
  else
  {
    int v14 = v6;
  }
  if (v10)
  {
    LODWORD(v12) = 1078530010;
    int v15 = -1068953638;
  }
  else
  {
    int v15 = v8;
  }
  if (v10) {
    int v16 = 1078530010;
  }
  else {
    int v16 = HIDWORD(v8);
  }
  v19[0] = v13;
  v19[1] = v11;
  _OWORD v19[2] = v14;
  double v19[3] = v12;
  v19[4] = v15;
  v19[5] = v16;
  uint64_t v17 = a1[4];
  swift_retain();
  sub_1B62F6B80((uint64_t)a1);
  sub_1B6C01C54(v17, v2, v2, (uint64_t)a1, (uint64_t)v19);
  sub_1B62F648C((uint64_t)a1);
  return swift_release_n();
}

const char *sub_1B6C5F59C()
{
  return "SetAngularVelocity.CPU";
}

uint64_t type metadata accessor for ParticleAngularVelocityInit.GPUSystem()
{
  return self;
}

const char *sub_1B6C5F5D8()
{
  return "SetAngularVelocity.GPU";
}

uint64_t sub_1B6C5F5EC()
{
  return type metadata accessor for ParticleAngularVelocityInit.GPUSystem();
}

uint64_t sub_1B6C5F60C(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  swift_retain();
  unint64_t v5 = sub_1B695F410(v3);
  unint64_t v7 = v6;
  uint64_t v9 = v8;
  char v11 = v10;
  swift_release();
  unint64_t v12 = HIDWORD(v5);
  unint64_t v13 = HIDWORD(v7);
  if (v11) {
    int v14 = -1068953638;
  }
  else {
    int v14 = v5;
  }
  if (v11)
  {
    LODWORD(v12) = 1078530010;
    int v15 = -1068953638;
  }
  else
  {
    int v15 = v7;
  }
  if (v11)
  {
    LODWORD(v13) = 1078530010;
    int v16 = -1068953638;
  }
  else
  {
    int v16 = v9;
  }
  if (v11) {
    int v17 = 1078530010;
  }
  else {
    int v17 = HIDWORD(v9);
  }
  v26[0] = v14;
  v26[1] = v12;
  v26[2] = v15;
  v26[3] = v13;
  void v26[4] = v16;
  v26[5] = v17;
  uint64_t v18 = *a1;
  if (*a1)
  {
    uint64_t ObjectType = swift_getObjectType();
    type metadata accessor for particle_set_angular_velocity_uniforms(0);
    sub_1B6B594A8((uint64_t)v26, 1, ObjectType, v20, v21, v22, v23, v24);
  }
  swift_retain();
  sub_1B6786A24((uint64_t)a1);
  sub_1B6BFF388(v4, v2, v18 == 0, 0, (uint64_t)a1, 0xD00000000000001DLL, 0x80000001B6F4EF80, 0);
  sub_1B6786A7C((uint64_t)a1);
  return swift_release();
}

ValueMetadata *type metadata accessor for ParticleAngularVelocityInit()
{
  return &type metadata for ParticleAngularVelocityInit;
}

uint64_t sub_1B6C5F768@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_1B6C5FA1C(0, &qword_1EB980A68, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  char v10 = (char *)&v15 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C5F9C8();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B62AA858();
  HIBYTE(v15) = 0;
  sub_1B62AA5EC((unint64_t *)&qword_1EB980418);
  sub_1B6E32DF8();
  uint64_t v11 = v16;
  HIBYTE(v15) = 1;
  sub_1B6E32DF8();
  uint64_t v12 = v16;
  HIBYTE(v15) = 2;
  sub_1B6E32DF8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v13 = v16;
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v11;
  a2[1] = v12;
  a2[2] = v13;
  return result;
}

unint64_t sub_1B6C5F9C8()
{
  unint64_t result = qword_1EB97F9F8;
  if (!qword_1EB97F9F8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F9F8);
  }
  return result;
}

void sub_1B6C5FA1C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6C5F9C8();
    unint64_t v7 = a3(a1, &type metadata for ParticleAngularVelocityInit.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ParticleAngularVelocityInit.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C5FB4CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleAngularVelocityInit.CodingKeys()
{
  return &type metadata for ParticleAngularVelocityInit.CodingKeys;
}

unint64_t sub_1B6C5FB88()
{
  unint64_t result = qword_1E9DD7958;
  if (!qword_1E9DD7958)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7958);
  }
  return result;
}

unint64_t sub_1B6C5FBE0()
{
  unint64_t result = qword_1EB97FA08[0];
  if (!qword_1EB97FA08[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1EB97FA08);
  }
  return result;
}

unint64_t sub_1B6C5FC38()
{
  unint64_t result = qword_1EB97FA00;
  if (!qword_1EB97FA00)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97FA00);
  }
  return result;
}

void sub_1B6C5FC8C()
{
  qword_1E9E497A8 = (uint64_t)&unk_1F0F5F288;
}

uint64_t sub_1B6C5FCA0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = *a2;
  int v4 = *((unsigned __int8 *)a2 + 8);
  if (!*((unsigned char *)a1 + 8)) {
    return !*((unsigned char *)a2 + 8) && *(float *)&v2 == *(float *)&v3;
  }
  if (*((unsigned char *)a1 + 8) != 1) {
    return v4 == 2 && v3 == 0;
  }
  if (v4 != 1) {
    return 0;
  }
  LODWORD(v3) = *(float *)&v2 == *(float *)&v3;
  if (*((float *)&v2 + 1) == *((float *)&v3 + 1)) {
    return v3;
  }
  else {
    return 0;
  }
}

uint64_t sub_1B6C5FD20@<X0>(void *a1@<X8>)
{
  if (qword_1E9DCC6E8 != -1) {
    swift_once();
  }
  *a1 = qword_1E9E497A8;

  return swift_bridgeObjectRetain();
}

uint64_t sub_1B6C5FD8C(void *a1, uint64_t a2, char a3)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  if (a3)
  {
    if (a3 == 1)
    {
      sub_1B62C550C((uint64_t)v7, v8);
      sub_1B6E332A8();
      if (!v3)
      {
        uint64_t v9 = a2;
        sub_1B62C550C((uint64_t)v7, v8);
        sub_1B6C61954(0, (unint64_t *)&qword_1EB980410, MEMORY[0x1E4FBB498], MEMORY[0x1E4FBB6A0]);
        sub_1B62AA7D4(qword_1E9DD02C8);
        sub_1B6E332B8();
      }
    }
    else
    {
      sub_1B62C550C((uint64_t)v7, v8);
      sub_1B6E332A8();
    }
  }
  else
  {
    sub_1B62C550C((uint64_t)v7, v8);
    sub_1B6E332A8();
    if (!v3)
    {
      sub_1B62C550C((uint64_t)v7, v8);
      sub_1B6E33298();
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
}

unint64_t sub_1B6C5FF5C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1B6C610EC(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5;
  }
  return result;
}

uint64_t sub_1B6C5FF8C(void *a1)
{
  return sub_1B6C5FD8C(a1, *(void *)v1, *(unsigned char *)(v1 + 8));
}

uint64_t sub_1B6C5FFAC(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6C619A4(0, &qword_1E9DD7980, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  char v10 = &v12[-v9];
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C61900();
  sub_1B6E33A88();
  sub_1B6776AB8(v3, (uint64_t)v14);
  sub_1B6776AB8((uint64_t)v14, (uint64_t)v12);
  char v13 = 0;
  sub_1B66C6568();
  sub_1B6E32FA8();
  if (!v2)
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)(v3 + 16);
    *(_OWORD *)&v12[9] = *(_OWORD *)(v3 + 25);
    char v13 = 1;
    sub_1B6C61954(0, (unint64_t *)&qword_1EB97FDA0, (uint64_t)&off_1F0FAB230, (uint64_t (*)(void, void))type metadata accessor for Curve);
    sub_1B6C61A08((unint64_t *)&qword_1E9DD85D0);
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(unsigned char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B6C601B0(char *a1, char *a2)
{
  return sub_1B6BB7E2C(*a1, *a2);
}

uint64_t sub_1B6C601BC()
{
  if (*v0) {
    return 0x6576727563;
  }
  else {
    return 1701080941;
  }
}

uint64_t sub_1B6C601EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6C603B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6C60214(uint64_t a1)
{
  unint64_t v2 = sub_1B6C61900();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C60250(uint64_t a1)
{
  unint64_t v2 = sub_1B6C61900();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B6C6028C@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1B6C616A8(a1, (uint64_t)&v6);
  if (!v2)
  {
    long long v5 = v7[0];
    *a2 = v6;
    a2[1] = v5;
    double result = *(double *)((char *)v7 + 9);
    *(_OWORD *)((char *)a2 + 25) = *(_OWORD *)((char *)v7 + 9);
  }
  return result;
}

uint64_t sub_1B6C602D0(void *a1)
{
  return sub_1B6C5FFAC(a1);
}

uint64_t sub_1B6C6030C()
{
  return type metadata accessor for ParticleOpacityEvolutionSystem();
}

char *sub_1B6C6032C@<X0>(uint64_t a1@<X8>)
{
  double result = sub_1B6D3EC54((uint64_t)&unk_1F0F935D0);
  *(void *)a1 = 0;
  *(unsigned char *)(a1 + 8) = 2;
  *(void *)(a1 + 16) = result;
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = 0;
  *(unsigned char *)(a1 + 40) = 1;
  return result;
}

uint64_t type metadata accessor for ParticleOpacityEvolutionSystem()
{
  return self;
}

const char *sub_1B6C6039C()
{
  return "ParticleOpacityEvolution";
}

uint64_t sub_1B6C603B0(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 1701080941 && a2 == 0xE400000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x6576727563 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1B6C6048C(uint64_t a1)
{
  uint64_t j = 0;
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  uint64_t v3 = *(void *)a1;
  swift_retain();
  sub_1B67D21EC((uint64_t)v114);
  uint64_t v5 = v115;
  uint64_t v4 = v116;
  uint64_t v6 = v117;
  char v7 = v118;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  sub_1B6319E94(v5, v4, v6, v7, 32, (uint64_t)v101);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_1B6776AB8((uint64_t)v114, (uint64_t)v128);
  sub_1B6776AB8((uint64_t)v128, (uint64_t)v130);
  if (!v131)
  {
    float v35 = *(float *)v130;
    double v36 = *(double *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_clock + 48);
    long long v37 = *(_OWORD *)(a1 + 104);
    long long v111 = *(_OWORD *)(a1 + 88);
    long long v112 = v37;
    uint64_t v113 = *(void *)(a1 + 120);
    sub_1B67CFEBC((uint64_t)&v102);
    long long v108 = v102;
    long long v109 = v103;
    uint64_t v110 = v104;
    sub_1B62C9DA8(v3, (uint64_t)&v108, 0x200000000, v119);
    sub_1B62CA3FC((uint64_t)v119, (uint64_t)&v120, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
    if ((void)v120)
    {
      if (v127 > 0)
      {
        uint64_t v94 = v124;
        if (v124)
        {
          float v38 = v36;
          uint64_t v39 = v126;
          uint64_t v40 = v126[4];
          char i = *(unsigned char *)(v125 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          long long v105 = v120;
          long long v106 = v121;
          uint64_t v107 = v122;
          uint64_t v82 = (uint64_t)(v126 + 6);
          uint64_t v85 = v123;
          uint64_t v79 = v126 + 8;
          float v42 = fminf((float)((float)(1.0 / v35) * v38) - floorf((float)(1.0 / v35) * v38), 1.0);
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v43 = 0;
          char v91 = i;
          uint64_t v88 = v40;
          do
          {
            float v44 = (unsigned int *)(v85 + 48 * v43);
            uint64_t v45 = *v44;
            uint64_t v97 = v44[1];
            float v47 = (uint64_t *)*((void *)v44 + 2);
            uint64_t v46 = *((void *)v44 + 3);
            uint64_t v48 = *((void *)v44 + 4);
            uint64_t v49 = *((void *)v44 + 5);
            if (i)
            {
              uint64_t v50 = *(os_unfair_lock_s **)(v49 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v50);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v49 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v40);
            sub_1B62CA3FC(v82, (uint64_t)v129, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
            uint64_t v51 = v39[4];
            uint64_t v52 = *(void *)(*(void *)(*(void *)(*(void *)(v49 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v39[6] = ecs_stack_allocator_allocate(v51, 48 * v52, 8);
            v39[7] = v52;
            v79[1] = 0;
            v79[2] = 0;
            *uint64_t v79 = 0;
            swift_release();
            uint64_t v53 = sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v47, v46, v48, (uint64_t)v39);
            uint64_t v54 = (float32x4_t *)v53;
            if (v47)
            {
              for (char i = v91; v48; --v48)
              {
                *uint64_t v54 = vmulq_n_f32(*v54, fminf(fmaxf(sample_curve((uint64_t)v101, v42), 0.0), 1.0));
                ++v54;
              }
            }
            else
            {
              char i = v91;
              if (v45 != v97)
              {
                uint64_t v55 = v97 - v45;
                uint64_t v56 = (float32x4_t *)(v53 + 16 * v45);
                do
                {
                  float32x4_t *v56 = vmulq_n_f32(*v56, fminf(fmaxf(sample_curve((uint64_t)v101, v42), 0.0), 1.0));
                  ++v56;
                  --v55;
                }
                while (v55);
              }
            }
            sub_1B6345178(v39, (unsigned __int16 **)&v105, (uint64_t)v129);
            sub_1B634507C((char *)v49);
            uint64_t v40 = v88;
            ecs_stack_allocator_pop_snapshot(v88);
            if (i)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v49 + 376));
            }
            swift_release();
            ++v43;
          }
          while (v43 != v94);
          goto LABEL_57;
        }
LABEL_64:
        sub_1B62CA064((uint64_t)&v102);
        sub_1B632F170(v119);
        swift_bridgeObjectRelease();
        swift_release();
        goto LABEL_65;
      }
      goto LABEL_61;
    }
LABEL_56:
    sub_1B62CA064((uint64_t)&v102);
LABEL_62:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    return swift_bridgeObjectRelease();
  }
  if (v131 == 1)
  {
    float v9 = *(float *)v130;
    float v8 = *(float *)&v130[1];
    long long v10 = *(_OWORD *)(a1 + 104);
    long long v111 = *(_OWORD *)(a1 + 88);
    long long v112 = v10;
    uint64_t v113 = *(void *)(a1 + 120);
    sub_1B663F318((uint64_t)&v102);
    long long v108 = v102;
    long long v109 = v103;
    uint64_t v110 = v104;
    sub_1B62C9DA8(v3, (uint64_t)&v108, 0x200000000, v119);
    sub_1B62CA3FC((uint64_t)v119, (uint64_t)&v120, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
    if ((void)v120)
    {
      if (v127 > 0)
      {
        uint64_t v90 = v124;
        if (v124)
        {
          float v11 = 1.0 / (float)(v8 - v9);
          float v12 = -(float)(v9 * v11);
          char v13 = v126;
          uint64_t v14 = v126[4];
          char v96 = *(unsigned char *)(v125 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          long long v105 = v120;
          long long v106 = v121;
          uint64_t v107 = v122;
          uint64_t v81 = (uint64_t)(v126 + 6);
          uint64_t v84 = v123;
          __int32 v78 = v126 + 8;
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v15 = 0;
          uint64_t v87 = v14;
          do
          {
            uint64_t v16 = (unsigned int *)(v84 + 48 * v15);
            uint64_t v17 = *v16;
            uint64_t v93 = v16[1];
            float32x4_t v19 = (uint64_t *)*((void *)v16 + 2);
            uint64_t v18 = *((void *)v16 + 3);
            uint64_t v21 = *((void *)v16 + 4);
            uint64_t v20 = *((void *)v16 + 5);
            uint64_t v99 = j;
            if (v96)
            {
              uint64_t v22 = *(os_unfair_lock_s **)(v20 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v22);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v20 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v14);
            sub_1B62CA3FC(v81, (uint64_t)v129, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
            uint64_t v23 = v13[4];
            uint64_t v24 = *(void *)(*(void *)(*(void *)(*(void *)(v20 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v13[6] = ecs_stack_allocator_allocate(v23, 48 * v24, 8);
            v13[7] = v24;
            v78[1] = 0;
            v78[2] = 0;
            *__int32 v78 = 0;
            swift_release();
            uint64_t v25 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v19, v18, v21, (uint64_t)v13);
            uint64_t v26 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, v19, v18, v21, (uint64_t)v13);
            uint64_t v27 = (float32x4_t *)v26;
            if (v19)
            {
              for (; v21; --v21)
              {
                float32x4_t v28 = *v27++;
                int8x16_t v29 = (int8x16_t)vmulq_f32(v28, v28);
                *uint64_t v25 = vmulq_n_f32(*v25, fminf(fmaxf(sample_curve((uint64_t)v101, v12+ (float)(v11* sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v29.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v29, v29, 8uLL)))))), 0.0), 1.0));
                ++v25;
              }
            }
            else if (v17 != v93)
            {
              uint64_t v30 = v93 - v17;
              float32x2_t v31 = (float32x4_t *)(v26 + 16 * v17);
              float32x2_t v32 = &v25[v17];
              do
              {
                float32x4_t v33 = *v31++;
                int8x16_t v34 = (int8x16_t)vmulq_f32(v33, v33);
                *float32x2_t v32 = vmulq_n_f32(*v32, fminf(fmaxf(sample_curve((uint64_t)v101, v12+ (float)(v11* sqrtf(vaddv_f32(vadd_f32(*(float32x2_t *)v34.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v34, v34, 8uLL)))))), 0.0), 1.0));
                ++v32;
                --v30;
              }
              while (v30);
            }
            uint64_t j = v99;
            sub_1B6345178(v13, (unsigned __int16 **)&v105, (uint64_t)v129);
            sub_1B634507C((char *)v20);
            uint64_t v14 = v87;
            ecs_stack_allocator_pop_snapshot(v87);
            if (v96)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v20 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v20 + 376));
            }
            swift_release();
            ++v15;
          }
          while (v15 != v90);
LABEL_57:
          sub_1B62CA064((uint64_t)&v102);
          sub_1B632F170(v119);
          sub_1B632F170(v119);
          swift_bridgeObjectRelease();
          swift_release();
LABEL_65:
          swift_bridgeObjectRelease();
          return swift_bridgeObjectRelease();
        }
        goto LABEL_64;
      }
LABEL_61:
      sub_1B62CA064((uint64_t)&v102);
      sub_1B632F170(v119);
      goto LABEL_62;
    }
    goto LABEL_56;
  }
  long long v57 = *(_OWORD *)(a1 + 104);
  long long v111 = *(_OWORD *)(a1 + 88);
  long long v112 = v57;
  uint64_t v113 = *(void *)(a1 + 120);
  sub_1B663DFF8((uint64_t)&v102);
  long long v108 = v102;
  long long v109 = v103;
  uint64_t v110 = v104;
  sub_1B62C9DA8(v3, (uint64_t)&v108, 0x200000000, v119);
  sub_1B62CA3FC((uint64_t)v119, (uint64_t)&v120, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (!(void)v120) {
    goto LABEL_56;
  }
  if (v127 > 0 && (uint64_t v89 = v124) != 0)
  {
    uint64_t v58 = v126;
    uint64_t v100 = v126[4];
    char v98 = *(unsigned char *)(v125 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    long long v105 = v120;
    long long v106 = v121;
    uint64_t v107 = v122;
    uint64_t v83 = (uint64_t)(v126 + 6);
    uint64_t v86 = v123;
    uint64_t v80 = v126 + 8;
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v59 = 0;
    do
    {
      uint64_t v60 = j;
      float32x4_t v61 = (unsigned int *)(v86 + 48 * v59);
      uint64_t v95 = *v61;
      uint64_t v92 = v61[1];
      float32x4_t v62 = (uint64_t *)*((void *)v61 + 2);
      uint64_t v63 = *((void *)v61 + 3);
      uint64_t v65 = *((void *)v61 + 4);
      uint64_t v64 = *((void *)v61 + 5);
      if (v98)
      {
        float v66 = *(os_unfair_lock_s **)(v64 + 376);
        swift_retain_n();
        os_unfair_lock_lock(v66);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v64 + 344));
        swift_release();
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v100);
      sub_1B62CA3FC(v83, (uint64_t)v129, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
      uint64_t v67 = v58[4];
      uint64_t v68 = *(void *)(*(void *)(*(void *)(*(void *)(v64 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      v58[6] = ecs_stack_allocator_allocate(v67, 48 * v68, 8);
      v58[7] = v68;
      v80[1] = 0;
      v80[2] = 0;
      *uint64_t v80 = 0;
      swift_release();
      uint64_t v69 = (float32x4_t *)sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v62, v63, v65, (uint64_t)v58);
      uint64_t v70 = sub_1B62C9024((uint64_t)&type metadata for ParticleAge, (uint64_t)&off_1F0F56330, v62, v63, v65, (uint64_t)v58);
      __float2 v71 = (float *)v70;
      if (v62)
      {
        for (uint64_t j = v60; v65; --v65)
        {
          float v72 = *v71++;
          float32x4_t *v69 = vmulq_n_f32(*v69, fminf(fmaxf(sample_curve((uint64_t)v101, v72), 0.0), 1.0));
          ++v69;
        }
      }
      else
      {
        uint64_t j = v60;
        if (v95 != v92)
        {
          uint64_t v73 = v92 - v95;
          float32x4_t v74 = (float *)(v70 + 4 * v95);
          float v75 = &v69[v95];
          do
          {
            float v76 = *v74++;
            *float v75 = vmulq_n_f32(*v75, fminf(fmaxf(sample_curve((uint64_t)v101, v76), 0.0), 1.0));
            ++v75;
            --v73;
          }
          while (v73);
        }
      }
      sub_1B6345178(v58, (unsigned __int16 **)&v105, (uint64_t)v129);
      sub_1B634507C((char *)v64);
      ecs_stack_allocator_pop_snapshot(v100);
      if (v98)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v64 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v64 + 376));
      }
      swift_release();
      ++v59;
    }
    while (v59 != v89);
    sub_1B62CA064((uint64_t)&v102);
    swift_release();
  }
  else
  {
    swift_retain();
    swift_retain();
    swift_retain();
    sub_1B62CA064((uint64_t)&v102);
    swift_release();
  }
  sub_1B632F170(v119);
  sub_1B632F170(v119);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

unint64_t sub_1B6C610EC(void *a1)
{
  unint64_t v3 = (unint64_t)sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A18();
  if (!v1)
  {
    sub_1B62C550C((uint64_t)v8, v9);
    uint64_t v4 = sub_1B6E33148();
    unint64_t v3 = v4;
    switch(v4)
    {
      case 0:
        goto LABEL_11;
      case 2:
        sub_1B6C61954(0, (unint64_t *)&qword_1EB980410, MEMORY[0x1E4FBB498], MEMORY[0x1E4FBB6A0]);
        sub_1B62C550C((uint64_t)v8, v9);
        sub_1B62AA7D4((unint64_t *)&qword_1EB980418);
        sub_1B6E33168();
        unint64_t v3 = v7[0];
        goto LABEL_11;
      case 1:
        sub_1B62C550C((uint64_t)v8, v9);
        sub_1B6E33138();
        unint64_t v3 = v6;
LABEL_11:
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
        return v3;
    }
    sub_1B62C1550((uint64_t)v8, (uint64_t)v7);
    sub_1B6E32998();
    swift_allocError();
    sub_1B6E32958();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
    swift_willThrow();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v3;
}

uint64_t destroy for ParticleOpacityEvolution()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for ParticleOpacityEvolution(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for ParticleOpacityEvolution(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 16) = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  return a1;
}

uint64_t assignWithTake for ParticleOpacityEvolution(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  return a1;
}

uint64_t getEnumTagSinglePayload for ParticleOpacityEvolution(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 41)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleOpacityEvolution(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(unsigned char *)(result + 40) = 0;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 41) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 16) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 41) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleOpacityEvolution()
{
  return &type metadata for ParticleOpacityEvolution;
}

uint64_t getEnumTagSinglePayload for EvolutionMode(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 8);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for EvolutionMode(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(unsigned char *)(result + 8) = 0;
    *(void *)double result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 9) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 8) = -(char)a2;
    }
  }
  return result;
}

uint64_t sub_1B6C615E8(uint64_t a1)
{
  if (*(unsigned __int8 *)(a1 + 8) <= 1u) {
    return *(unsigned __int8 *)(a1 + 8);
  }
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1B6C61600(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(void *)double result = a2 - 2;
    LOBYTE(a2) = 2;
  }
  *(unsigned char *)(result + 8) = a2;
  return result;
}

ValueMetadata *type metadata accessor for EvolutionMode()
{
  return &type metadata for EvolutionMode;
}

unint64_t sub_1B6C6162C()
{
  unint64_t result = qword_1E9DD7960;
  if (!qword_1E9DD7960)
  {
    sub_1B62D83C0(255, &qword_1E9DD7968, (uint64_t)&type metadata for EvolutionMode, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7960);
  }
  return result;
}

uint64_t sub_1B6C616A8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6C619A4(0, &qword_1E9DD7970, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  long long v10 = (char *)&v16 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C61900();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  char v20 = 0;
  sub_1B66C6514();
  sub_1B6E32DF8();
  uint64_t v11 = v17;
  char v12 = BYTE8(v17);
  sub_1B6C61954(0, (unint64_t *)&qword_1EB97FDA0, (uint64_t)&off_1F0FAB230, (uint64_t (*)(void, void))type metadata accessor for Curve);
  char v20 = 1;
  sub_1B6C61A08((unint64_t *)&qword_1EB97FD90);
  sub_1B6E32DF8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v13 = v18;
  char v14 = v19;
  long long v16 = v17;
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(void *)a2 = v11;
  *(unsigned char *)(a2 + 8) = v12;
  *(_OWORD *)(a2 + 16) = v16;
  *(void *)(a2 + 32) = v13;
  *(unsigned char *)(a2 + 40) = v14;
  return result;
}

unint64_t sub_1B6C61900()
{
  unint64_t result = qword_1E9DD7978;
  if (!qword_1E9DD7978)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7978);
  }
  return result;
}

void sub_1B6C61954(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, void))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, MEMORY[0x1E4FBB470]);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

void sub_1B6C619A4(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6C61900();
    unint64_t v7 = a3(a1, &type metadata for ParticleOpacityEvolution.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1B6C61A08(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6C61954(255, (unint64_t *)&qword_1EB97FDA0, (uint64_t)&off_1F0FAB230, (uint64_t (*)(void, void))type metadata accessor for Curve);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for ParticleOpacityEvolution.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C61B3CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleOpacityEvolution.CodingKeys()
{
  return &type metadata for ParticleOpacityEvolution.CodingKeys;
}

unint64_t sub_1B6C61B78()
{
  unint64_t result = qword_1E9DD7988;
  if (!qword_1E9DD7988)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7988);
  }
  return result;
}

unint64_t sub_1B6C61BD0()
{
  unint64_t result = qword_1E9DD7990;
  if (!qword_1E9DD7990)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7990);
  }
  return result;
}

unint64_t sub_1B6C61C28()
{
  unint64_t result = qword_1E9DD7998[0];
  if (!qword_1E9DD7998[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9DD7998);
  }
  return result;
}

uint64_t *sub_1B6C61C7C()
{
  sub_1B62F46E8();
  float v34 = v1;
  long long v2 = *(_OWORD *)(v0 + 32);
  v54[0] = *(_OWORD *)(v0 + 16);
  v54[1] = v2;
  uint64_t v55 = *(void *)(v0 + 48);
  uint64_t v3 = swift_retain();
  sub_1B62C9DA8(v3, (uint64_t)v54, 0x200000000, v43);
  swift_release();
  unint64_t result = (uint64_t *)sub_1B62CA210((uint64_t)v43, (uint64_t)v44, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v44[0])
  {
    if (v50 >= 1)
    {
      uint64_t v40 = v47;
      if (v47)
      {
        uint64_t v5 = 0;
        uint64_t v6 = 0;
        unint64_t v7 = v49;
        uint64_t v8 = v49[4];
        int v9 = *(unsigned __int8 *)(v48 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        v51[0] = v44[0];
        v51[1] = v44[1];
        uint64_t v52 = v45;
        uint64_t v36 = (uint64_t)(v49 + 6);
        uint64_t v37 = v46;
        float v35 = v49 + 8;
        int v38 = v9;
        uint64_t v39 = v8;
        while (1)
        {
          long long v10 = (unsigned int *)(v37 + 48 * v5);
          uint64_t v11 = *v10;
          char v12 = (uint64_t *)*((void *)v10 + 2);
          uint64_t v13 = *((void *)v10 + 3);
          uint64_t v15 = *((void *)v10 + 4);
          uint64_t v14 = *((void *)v10 + 5);
          uint64_t v41 = v6;
          uint64_t v42 = v10[1];
          if (v9)
          {
            long long v16 = *(os_unfair_lock_s **)(v14 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v16);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v8);
          sub_1B62CA210(v36, (uint64_t)v53, &qword_1EB97DE20);
          uint64_t v17 = v7[4];
          uint64_t v18 = *(void *)(*(void *)(*(void *)(*(void *)(v14 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v7[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
          v7[7] = v18;
          v35[1] = 0;
          _OWORD v35[2] = 0;
          *float v35 = 0;
          swift_release();
          uint64_t v19 = sub_1B62C9024((uint64_t)&type metadata for ParticleAngle, (uint64_t)&off_1F0F608D0, v12, v13, v15, (uint64_t)v7);
          uint64_t v20 = sub_1B62C9024((uint64_t)&type metadata for ParticleAngleVelocity, (uint64_t)&off_1F0F88960, v12, v13, v15, (uint64_t)v7);
          if (v11 == v42)
          {
            uint64_t v6 = v41;
            goto LABEL_24;
          }
          uint64_t v21 = v42 - v11;
          if ((unint64_t)(v42 - v11) < 8) {
            break;
          }
          unint64_t v22 = v19 + 4 * v11;
          unint64_t v23 = v20 + 4 * v11;
          if (v22 < v20 + 4 * v42 && v23 < v19 + 4 * v42) {
            break;
          }
          v11 += v21 & 0xFFFFFFFFFFFFFFF8;
          uint64_t v25 = (float32x4_t *)(v23 + 16);
          uint64_t v26 = (float32x4_t *)(v22 + 16);
          unint64_t v27 = v21 & 0xFFFFFFFFFFFFFFF8;
          float v28 = v34;
          do
          {
            float32x4_t v29 = vaddq_f32(*v26, vmulq_n_f32(*v25, v34));
            v26[-1] = vaddq_f32(v26[-1], vmulq_n_f32(v25[-1], v34));
            *uint64_t v26 = v29;
            v25 += 2;
            v26 += 2;
            v27 -= 8;
          }
          while (v27);
          uint64_t v6 = v41;
          if (v21 != (v21 & 0xFFFFFFFFFFFFFFF8)) {
            goto LABEL_22;
          }
LABEL_24:
          sub_1B6345178(v7, (unsigned __int16 **)v51, (uint64_t)v53);
          sub_1B634507C((char *)v14);
          uint64_t v8 = v39;
          ecs_stack_allocator_pop_snapshot(v39);
          int v9 = v38;
          if (v38)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v14 + 376));
          }
          swift_release();
          if (++v5 == v40) {
            return sub_1B632F170(v43);
          }
        }
        float v28 = v34;
        uint64_t v6 = v41;
LABEL_22:
        uint64_t v30 = v42 - v11;
        float32x2_t v31 = (float *)(v19 + 4 * v11);
        float32x2_t v32 = (float *)(v20 + 4 * v11);
        do
        {
          float v33 = *v32++;
          *float32x2_t v31 = *v31 + (float)(v28 * v33);
          ++v31;
          --v30;
        }
        while (v30);
        goto LABEL_24;
      }
    }
    return sub_1B632F170(v43);
  }
  return result;
}

uint64_t type metadata accessor for ParticleIntegrateAngle.System()
{
  return self;
}

uint64_t sub_1B6C62010(uint64_t a1)
{
  uint64_t v2 = swift_allocObject();
  long long v3 = *(_OWORD *)(a1 + 104);
  long long v8 = *(_OWORD *)(a1 + 88);
  long long v9 = v3;
  uint64_t v10 = *(void *)(a1 + 120);
  sub_1B663E218((uint64_t)v6);
  sub_1B62F648C(a1);
  long long v4 = v6[1];
  *(_OWORD *)(v2 + 16) = v6[0];
  *(_OWORD *)(v2 + 32) = v4;
  *(void *)(v2 + 48) = v7;
  return v2;
}

const char *sub_1B6C62098()
{
  return "ParticleIntegrateAngle.CPU";
}

uint64_t sub_1B6C620AC()
{
  return type metadata accessor for ParticleIntegrateAngle.System();
}

ValueMetadata *type metadata accessor for ParticleIntegrateAngle()
{
  return &type metadata for ParticleIntegrateAngle;
}

uint64_t sub_1B6C620DC()
{
  float v1 = v0;
  uint64_t v2 = sub_1B6E30F48();
  uint64_t v40 = *(void *)(v2 - 8);
  uint64_t v41 = v2;
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  swift_bridgeObjectRelease();
  v0[6] = MEMORY[0x1E4FBC860];
  uint64_t v7 = v0[2];
  uint64_t v6 = v0[3];
  long long v8 = (void *)v0[4];
  uint64_t v42 = v5;
  if (v8)
  {
    uint64_t v9 = v1[5];
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 8);
    swift_bridgeObjectRetain();
    id v12 = v8;
    v11(v7, v6, ObjectType, v9);
  }
  else
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    uint64_t v51 = 0;
    uint64_t v52 = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    uint64_t v13 = v51;
    uint64_t v14 = v52;
    int v15 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    uint64_t v51 = 0;
    swift_retain();
    sub_1B6B33E34(v15, &v51, v13, v14);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRetain();
    sub_1B6E30E48();
  }
  swift_bridgeObjectRelease();
  uint64_t v51 = sub_1B6E31748();
  uint64_t v52 = v16;
  uint64_t v49 = 10;
  unint64_t v50 = 0xE100000000000000;
  unint64_t v45 = sub_1B633AF88();
  uint64_t v17 = sub_1B6E325F8();
  swift_bridgeObjectRelease();
  uint64_t v44 = *(void *)(v17 + 16);
  if (v44)
  {
    uint64_t v18 = 0;
    v39[1] = v17;
    uint64_t v43 = v17 + 32;
    uint64_t v19 = MEMORY[0x1E4FBC860];
    while (1)
    {
      uint64_t v20 = (uint64_t *)(v43 + 16 * v18);
      uint64_t v22 = *v20;
      uint64_t v21 = v20[1];
      uint64_t v51 = v22;
      uint64_t v52 = v21;
      uint64_t v49 = 32;
      unint64_t v50 = 0xE100000000000000;
      uint64_t v47 = 0;
      unint64_t v48 = 0xE000000000000000;
      uint64_t v51 = sub_1B6E32618();
      uint64_t v52 = v23;
      uint64_t v49 = 44;
      unint64_t v50 = 0xE100000000000000;
      uint64_t v24 = sub_1B6E325F8();
      uint64_t isUniquelyReferenced_nonNull_native = swift_bridgeObjectRelease();
      uint64_t v27 = *(void *)(v24 + 16);
      uint64_t v46 = v24;
      if (v27) {
        break;
      }
LABEL_10:
      ++v18;
      swift_bridgeObjectRelease();
      if (v18 == v44)
      {
        swift_bridgeObjectRelease();
        goto LABEL_36;
      }
    }
    float v28 = (uint64_t *)(v24 + 40);
    while (1)
    {
      uint64_t v29 = *(v28 - 1);
      uint64_t v30 = *v28;
      LODWORD(v49) = 0;
      MEMORY[0x1F4188790](isUniquelyReferenced_nonNull_native, v26);
      if ((v30 & 0x1000000000000000) == 0)
      {
        if ((v30 & 0x2000000000000000) != 0)
        {
          uint64_t v51 = v29;
          uint64_t v52 = v30 & 0xFFFFFFFFFFFFFFLL;
          switch((char)v29)
          {
            case 0:
            case 9:
            case 10:
            case 11:
            case 12:
            case 13:
            case 32:
LABEL_20:
              swift_bridgeObjectRetain();
              goto LABEL_21;
            default:
              swift_bridgeObjectRetain();
              float32x2_t v31 = (unsigned char *)_swift_stdlib_strtof_clocale();
              if (v31) {
LABEL_32:
              }
                LOBYTE(v47) = *v31 == 0;
              else {
LABEL_21:
              }
                LOBYTE(v47) = 0;
              break;
          }
          goto LABEL_22;
        }
        if ((v29 & 0x1000000000000000) != 0)
        {
          switch(*(unsigned char *)((v30 & 0xFFFFFFFFFFFFFFFLL) + 0x20))
          {
            case 0:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
            case 0x20:
              goto LABEL_20;
            default:
              swift_bridgeObjectRetain();
              float32x2_t v31 = (unsigned char *)_swift_stdlib_strtof_clocale();
              if (!v31) {
                goto LABEL_21;
              }
              goto LABEL_32;
          }
        }
      }
      swift_bridgeObjectRetain();
      sub_1B6E32898();
LABEL_22:
      swift_bridgeObjectRelease();
      if ((_BYTE)v47) {
        float v32 = *(float *)&v49;
      }
      else {
        float v32 = 0.0;
      }
      uint64_t v19 = v1[6];
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1B6397840(0, *(void *)(v19 + 16) + 1, 1, (char *)v19);
        uint64_t v19 = isUniquelyReferenced_nonNull_native;
      }
      unint64_t v34 = *(void *)(v19 + 16);
      unint64_t v33 = *(void *)(v19 + 24);
      if (v34 >= v33 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1B6397840(v33 > 1, v34 + 1, 1, (char *)v19);
        uint64_t v19 = isUniquelyReferenced_nonNull_native;
      }
      v28 += 2;
      *(void *)(v19 + 16) = v34 + 1;
      *(float *)(v19 + 4 * v34 + 32) = v32;
      v1[6] = v19;
      if (!--v27) {
        goto LABEL_10;
      }
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v19 = MEMORY[0x1E4FBC860];
LABEL_36:
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  uint64_t v51 = 0x203A767363;
  uint64_t v52 = 0xE500000000000000;
  uint64_t v49 = *(void *)(v19 + 16);
  swift_retain();
  sub_1B6E33098();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  uint64_t v35 = v51;
  uint64_t v36 = v52;
  int v37 = sub_1B6E32168();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v51 = 0;
  swift_retain();
  sub_1B6B33E34(v37, &v51, v35, v36);
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v40 + 8))(v42, v41);
}

double sub_1B6C62910@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6C62AA0(a1, v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }
  return result;
}

void sub_1B6C62960(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = 0;
  a1[3] = 0xE000000000000000;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = MEMORY[0x1E4FBC860];
}

unsigned char *sub_1B6C62980@<X0>(unsigned char *result@<X0>, BOOL *a2@<X8>)
{
  unsigned int v3 = *result;
  BOOL v4 = v3 > 0x20;
  uint64_t v5 = (1 << v3) & 0x100003E01;
  BOOL v6 = v4 || v5 == 0;
  v7 = v6 && (double result = (unsigned char *)_swift_stdlib_strtof_clocale()) != 0 && *result == 0;
  *a2 = v7;
  return result;
}

void *assignWithCopy for CSVFileAsset(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[2] = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  BOOL v4 = (void *)a2[4];
  uint64_t v5 = a2[5];
  BOOL v6 = (void *)a1[4];
  a1[4] = v4;
  id v7 = v4;

  a1[5] = v5;
  a1[6] = a2[6];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for CSVFileAsset()
{
  return &type metadata for CSVFileAsset;
}

uint64_t sub_1B6C62AA0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A28();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B62C14BC(v14, v14[3]);
  sub_1B68111DC();
  sub_1B6E33518();
  uint64_t v15 = v13;
  id v5 = v12;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);

  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v8;
  a2[1] = v9;
  a2[2] = v10;
  a2[3] = v11;
  uint64_t v7 = v15;
  a2[4] = v12;
  a2[5] = v7;
  a2[6] = MEMORY[0x1E4FBC860];
  return result;
}

uint64_t sub_1B6C62BE0()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B6C62C7C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  BOOL v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  if ((v7 & 0x1000F8) != 0 || ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8 > 0x18)
  {
    uint64_t v9 = *a2;
    *BOOL v4 = *a2;
    BOOL v4 = (uint64_t *)(v9 + ((unsigned __int16)((v7 & 0xF8) + 23) & (unsigned __int16)~(v7 & 0xF8) & 0x1F8));
    swift_retain();
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    uint64_t v10 = *(void **)(((unint64_t)a2 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
    *(void *)(((unint64_t)v4 + v6 + 7) & 0xFFFFFFFFFFFFFFF8) = v10;
    id v11 = v10;
  }
  return v4;
}

void sub_1B6C62D78(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 16) - 8) + 8;
  (*(void (**)(void))v3)();
  BOOL v4 = *(void **)((a1 + *(void *)(v3 + 56) + 7) & 0xFFFFFFFFFFFFFFF8);
}

uint64_t sub_1B6C62DE8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 16;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 48) + 7;
  int v7 = (void *)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  *int v7 = v8;
  id v9 = v8;
  return a1;
}

uint64_t sub_1B6C62E68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 24;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 40) + 7;
  int v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *(void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);
  id v9 = *v7;
  *int v7 = v8;
  id v10 = v8;

  return a1;
}

uint64_t sub_1B6C62EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 32;
  (*(void (**)(void))v5)();
  *(void *)((*(void *)(v5 + 32) + 7 + a1) & 0xFFFFFFFFFFFFFFF8) = *(void *)((*(void *)(v5 + 32) + 7 + a2) & 0xFFFFFFFFFFFFFFF8);
  return a1;
}

uint64_t sub_1B6C62F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8) + 40;
  (*(void (**)(void))v5)();
  uint64_t v6 = *(void *)(v5 + 24) + 7;
  int v7 = (void **)((v6 + a1) & 0xFFFFFFFFFFFFFFF8);
  uint64_t v8 = *v7;
  *int v7 = *(void **)((v6 + a2) & 0xFFFFFFFFFFFFFFF8);

  return a1;
}

uint64_t sub_1B6C62FF0(_DWORD *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(void *)(v4 + 64);
  if (v5 <= 0x7FFFFFFF) {
    unsigned int v7 = 0x7FFFFFFF;
  }
  else {
    unsigned int v7 = *(_DWORD *)(v4 + 84);
  }
  if (!a2) {
    return 0;
  }
  if (v7 < a2)
  {
    unint64_t v8 = ((v6 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
    unsigned int v9 = a2 - v7;
    uint64_t v10 = v8 & 0xFFFFFFF8;
    if ((v8 & 0xFFFFFFF8) != 0) {
      unsigned int v11 = 2;
    }
    else {
      unsigned int v11 = v9 + 1;
    }
    if (v11 >= 0x10000) {
      unsigned int v12 = 4;
    }
    else {
      unsigned int v12 = 2;
    }
    if (v11 < 0x100) {
      unsigned int v12 = 1;
    }
    if (v11 >= 2) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = 0;
    }
    switch(v13)
    {
      case 1:
        int v14 = *((unsigned __int8 *)a1 + v8);
        if (!v14) {
          break;
        }
        goto LABEL_22;
      case 2:
        int v14 = *(unsigned __int16 *)((char *)a1 + v8);
        if (v14) {
          goto LABEL_22;
        }
        break;
      case 3:
        __break(1u);
        JUMPOUT(0x1B6C6313CLL);
      case 4:
        int v14 = *(_DWORD *)((char *)a1 + v8);
        if (!v14) {
          break;
        }
LABEL_22:
        int v16 = v14 - 1;
        if (v10)
        {
          int v16 = 0;
          LODWORD(v10) = *a1;
        }
        return v7 + (v10 | v16) + 1;
      default:
        break;
    }
  }
  if (v5 >= 0x7FFFFFFF) {
    return (*(uint64_t (**)(void))(v4 + 48))();
  }
  unint64_t v17 = *(void *)(((unint64_t)a1 + v6 + 7) & 0xFFFFFFFFFFFFFFF8);
  if (v17 >= 0xFFFFFFFF) {
    LODWORD(v17) = -1;
  }
  return (v17 + 1);
}

void sub_1B6C63150(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 <= 0x7FFFFFFF) {
    unsigned int v8 = 0x7FFFFFFF;
  }
  else {
    unsigned int v8 = *(_DWORD *)(v6 + 84);
  }
  uint64_t v9 = *(void *)(*(void *)(*(void *)(a4 + 16) - 8) + 64);
  unint64_t v10 = ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8;
  if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
    unsigned int v11 = a3 - v8 + 1;
  }
  else {
    unsigned int v11 = 2;
  }
  if (v11 >= 0x10000) {
    int v12 = 4;
  }
  else {
    int v12 = 2;
  }
  if (v11 < 0x100) {
    int v12 = 1;
  }
  if (v11 >= 2) {
    unsigned int v13 = v12;
  }
  else {
    unsigned int v13 = 0;
  }
  if (v8 < a3) {
    uint64_t v14 = v13;
  }
  else {
    uint64_t v14 = 0;
  }
  if (a2 > v8)
  {
    if (((v9 + 7) & 0xFFFFFFF8) == 0xFFFFFFF8) {
      int v15 = a2 - v8;
    }
    else {
      int v15 = 1;
    }
    if (((v9 + 7) & 0xFFFFFFF8) != 0xFFFFFFF8)
    {
      int v16 = ~v8 + a2;
      bzero(a1, ((v9 + 7) & 0xFFFFFFFFFFFFFFF8) + 8);
      *(_DWORD *)a1 = v16;
    }
    switch(v14)
    {
      case 1:
        a1[v10] = v15;
        return;
      case 2:
        *(_WORD *)&a1[v10] = v15;
        return;
      case 3:
        goto LABEL_44;
      case 4:
        *(_DWORD *)&a1[v10] = v15;
        return;
      default:
        return;
    }
  }
  switch(v14)
  {
    case 1:
      a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 2:
      *(_WORD *)&a1[v10] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_33;
    case 3:
LABEL_44:
      __break(1u);
      JUMPOUT(0x1B6C6332CLL);
    case 4:
      *(_DWORD *)&a1[v10] = 0;
      goto LABEL_32;
    default:
LABEL_32:
      if (a2)
      {
LABEL_33:
        if (v7 < 0x7FFFFFFF)
        {
          uint64_t v18 = (void *)((unint64_t)&a1[v9 + 7] & 0xFFFFFFFFFFFFFFF8);
          if ((a2 & 0x80000000) != 0) {
            uint64_t v19 = a2 ^ 0x80000000;
          }
          else {
            uint64_t v19 = a2 - 1;
          }
          *uint64_t v18 = v19;
        }
        else
        {
          unint64_t v17 = *(void (**)(void))(v6 + 56);
          v17();
        }
      }
      return;
  }
}

uint64_t type metadata accessor for Locked()
{
  return sub_1B62C36EC();
}

uint64_t sub_1B6C6336C(void *a1, __n128 a2, __n128 a3)
{
  __n128 v12 = a3;
  __n128 v13 = a2;
  sub_1B6C65C38(0, &qword_1E9DD7A30, (uint64_t (*)(void))sub_1B6C65834, (uint64_t)&type metadata for GrowEmitterRuntime.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C65834();
  sub_1B6E33A88();
  __n128 v14 = v13;
  char v15 = 0;
  sub_1B6C65C38(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  sub_1B62AF354((unint64_t *)&qword_1EB97D1D8);
  sub_1B6E32FA8();
  if (!v3)
  {
    v14.n128_u8[0] = 1;
    sub_1B6E32F88();
    __n128 v14 = v12;
    char v15 = 2;
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B6C635B8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BB36A4(*a1, *a2);
}

uint64_t sub_1B6C635C4()
{
  uint64_t v1 = 0x746E756F63;
  if (*v0 != 1) {
    uint64_t v1 = 0x614D6D6F646E6172;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 7498084;
  }
}

uint64_t sub_1B6C63620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6C64F2C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6C63648(uint64_t a1)
{
  unint64_t v2 = sub_1B6C65834();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C63684(uint64_t a1)
{
  unint64_t v2 = sub_1B6C65834();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C636C0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1B6C655A0(a1);
  if (!v2)
  {
    *(_OWORD *)a2 = v5;
    *(void *)(a2 + 16) = result;
    *(_OWORD *)(a2 + 32) = v6;
  }
  return result;
}

uint64_t sub_1B6C636F4(void *a1)
{
  return sub_1B6C6336C(a1, *v1, v1[2]);
}

double sub_1B6C63718@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  double result = 0.0078125;
  *(_OWORD *)(a1 + 32) = xmmword_1B6E4F320;
  return result;
}

uint64_t *sub_1B6C63730(void *a1, uint64_t a2, uint64_t a3, float *a4)
{
  uint64_t v132 = *MEMORY[0x1E4F143B8];
  long long v6 = *(_OWORD *)(a3 + 104);
  v106[0] = *(_OWORD *)(a3 + 88);
  v106[1] = v6;
  uint64_t v107 = *(void *)(a3 + 120);
  sub_1B62C9DA8(a2, (uint64_t)v106, 0x200000000, v121);
  double result = (uint64_t *)sub_1B62CA210((uint64_t)v121, (uint64_t)v122, (unint64_t *)&qword_1EB97DC50);
  if (v122[0])
  {
    uint64_t v88 = v126;
    uint64_t v98 = v4;
    if (v126 >= 1)
    {
      uint64_t v87 = v123;
      if (v123)
      {
        uint64_t v8 = 0;
        uint64_t v86 = v122[5];
        uint64_t v90 = v124;
        int v9 = *(unsigned __int8 *)(v124 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        unint64_t v10 = v125;
        uint64_t v84 = v125 + 8;
        uint64_t v103 = v122[0] + 41;
        uint64_t v104 = (unsigned __int16 *)v122[0];
        uint64_t v97 = v125[4];
        int v89 = *(unsigned __int8 *)a4;
        uint64_t v80 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
        unint64_t v81 = *(void *)(a3 + 8);
        int v85 = v9;
        long long v105 = v125;
        while (1)
        {
          uint64_t v96 = v8;
          unsigned int v11 = (unsigned int *)(v86 + 48 * v8);
          uint64_t v12 = v11[1];
          uint64_t v13 = v11[2];
          __n128 v14 = (uint64_t *)*((void *)v11 + 2);
          uint64_t v15 = *((void *)v11 + 3);
          uint64_t v17 = *((void *)v11 + 4);
          uint64_t v16 = *((void *)v11 + 5);
          uint64_t v101 = *v11;
          if (v9)
          {
            uint64_t v18 = *(os_unfair_lock_s **)(v16 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v18);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v97);
          uint64_t v94 = v10[7];
          uint64_t v95 = v10[6];
          uint64_t v92 = v10[9];
          uint64_t v93 = v10[8];
          uint64_t v91 = v10[10];
          uint64_t v19 = v10[4];
          uint64_t v20 = v16;
          uint64_t v21 = *(void *)(*(void *)(*(void *)(*(void *)(v16 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v10[6] = ecs_stack_allocator_allocate(v19, 48 * v21, 8);
          v10[7] = v21;
          v84[1] = 0;
          _OWORD v84[2] = 0;
          *uint64_t v84 = 0;
          swift_release();
          v127[0] = v90;
          v127[1] = v20;
          v127[2] = (uint64_t)v10;
          v127[3] = v13;
          v127[4] = (v12 - v101 + v13);
          v127[5] = v88;
          v127[6] = v101;
          v127[7] = v12;
          v127[8] = 0;
          v127[9] = 0;
          char v128 = 1;
          float32x4_t v129 = v14;
          uint64_t v130 = v15;
          uint64_t v131 = v17;
          uint64_t v22 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v14, v15, v17, (uint64_t)v10);
          uint64_t v102 = v20;
          uint64_t v23 = sub_1B62C9024((uint64_t)&type metadata for Orientation, (uint64_t)&off_1F0F560A8, v14, v15, v17, (uint64_t)v10);
          v24.i32[1] = 0;
          long long v116 = 0u;
          long long v117 = 0u;
          long long v114 = 0u;
          long long v115 = 0u;
          *(void *)&long long v118 = 0;
          *((void *)&v118 + 1) = 1;
          uint64_t v119 = 0;
          uint64_t v120 = 0;
          if (v89 == 2) {
            break;
          }
          uint64_t v27 = *(void *)(v90 + v80);
          if (v27)
          {
            uint64_t v28 = *(void *)(v27 + 240);
            swift_retain();
            swift_retain();
            swift_retain();
            sub_1B6BCB1C0(v89, 3, v28, v27, v89, 3, (uint64_t)v108);
            long long v29 = v108[0];
            unsigned int v73 = (unsigned __int16)v109;
            unsigned int v75 = WORD1(v109);
            unsigned int v77 = WORD2(v109);
            uint64_t v30 = v110;
            swift_release();
            swift_unknownObjectRelease();
            swift_release();
            swift_release();
            int v31 = 0;
            uint64_t v26 = v98;
            unint64_t v10 = v105;
            uint64_t v25 = v102;
            switch(v30)
            {
              case 10:
                int v31 = 4;
                if ((void)v29) {
                  goto LABEL_37;
                }
                goto LABEL_41;
              case 11:
                int v31 = 5;
                if (!(void)v29) {
                  goto LABEL_41;
                }
                goto LABEL_37;
              case 12:
              case 13:
              case 14:
              case 15:
              case 16:
              case 17:
              case 18:
              case 19:
              case 20:
              case 21:
              case 22:
              case 23:
              case 24:
              case 26:
              case 27:
              case 28:
              case 29:
              case 30:
              case 31:
              case 32:
              case 33:
              case 34:
              case 35:
              case 36:
              case 37:
              case 38:
              case 39:
              case 40:
              case 41:
              case 42:
              case 43:
              case 44:
              case 45:
              case 46:
              case 47:
              case 48:
              case 49:
              case 50:
              case 51:
              case 52:
              case 53:
              case 54:
              case 56:
              case 57:
              case 58:
              case 59:
              case 60:
              case 61:
              case 62:
              case 63:
              case 64:
              case 65:
              case 66:
              case 67:
              case 68:
              case 69:
              case 72:
              case 73:
              case 74:
              case 75:
              case 76:
              case 77:
              case 78:
              case 79:
                goto LABEL_20;
              case 25:
                goto LABEL_36;
              case 55:
                int v31 = 1;
                if (!(void)v29) {
                  goto LABEL_41;
                }
                goto LABEL_37;
              case 70:
                int v31 = 6;
                if (!(void)v29) {
                  goto LABEL_41;
                }
                goto LABEL_37;
              case 71:
                int v31 = 7;
                if (!(void)v29) {
                  goto LABEL_41;
                }
                goto LABEL_37;
              case 80:
                int v31 = 8;
                if (!(void)v29) {
                  goto LABEL_41;
                }
                goto LABEL_37;
              case 81:
                int v31 = 9;
LABEL_36:
                if ((void)v29) {
                  goto LABEL_37;
                }
                goto LABEL_41;
              default:
                if (v30 == 115)
                {
                  int v31 = 2;
                  uint64_t v26 = v102;
                  unint64_t v10 = v105;
                  uint64_t v25 = v102;
                  if (!(void)v29)
                  {
LABEL_41:
                    swift_bridgeObjectRelease();
                    goto LABEL_42;
                  }
                }
                else
                {
                  uint64_t v26 = v102;
                  unint64_t v10 = v105;
                  uint64_t v25 = v102;
                  if (v30 != 125)
                  {
LABEL_20:
                    if (qword_1EB9852D0 != -1) {
                      swift_once();
                    }
                    *(void *)&v108[0] = 0;
                    *((void *)&v108[0] + 1) = 0xE000000000000000;
                    swift_retain();
                    sub_1B6E328C8();
                    swift_bridgeObjectRelease();
                    *(void *)&v108[0] = 0xD00000000000001ALL;
                    *((void *)&v108[0] + 1) = 0x80000001B6F35710;
                    _sSo14MTLPixelFormatV3VFXE11descriptionSSvg_0(v30);
                    sub_1B6E31948();
                    swift_bridgeObjectRelease();
                    uint64_t v33 = *((void *)&v108[0] + 1);
                    uint64_t v78 = *(void *)&v108[0];
                    int v34 = sub_1B6E32148();
                    if (qword_1EB9854F8 != -1) {
                      swift_once();
                    }
                    *(void *)&v108[0] = 0;
                    swift_retain();
                    sub_1B6B33E34(v34, (uint64_t *)v108, v78, v33);
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_bridgeObjectRelease();
                    swift_release();
                    swift_unknownObjectRelease();
                    goto LABEL_42;
                  }
                  int v31 = 3;
                  if (!(void)v29) {
                    goto LABEL_41;
                  }
                }
LABEL_37:
                if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) != (id)2)
                {
                  id v35 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
                  id v36 = (id)v29;
                  swift_unknownObjectRelease();
                  v37.i64[0] = __PAIR64__(v75, v73);
                  v37.i64[1] = __PAIR64__(v72, v77);
                  int32x4_t v99 = v37;
                  vfx_sampler3d_make((uint64_t)v35 + *((void *)&v29 + 1), v31, 2, 1, (uint64_t)v108, v37);
                  long long v76 = v108[1];
                  long long v79 = v108[0];
                  long long v71 = v110;
                  long long v74 = v109;
                  long long v70 = v111;
                  uint64_t v39 = v112;
                  uint64_t v38 = v113;
                  swift_bridgeObjectRelease();
                  swift_unknownObjectRelease();
                  long long v114 = v79;
                  long long v115 = v76;
                  long long v116 = v74;
                  long long v117 = v71;
                  long long v118 = v70;
                  v24.i32[1] = v99.i32[1];
                  __int32 v72 = v99.i32[3];
                  uint64_t v119 = v39;
                  uint64_t v120 = v38;
                  goto LABEL_43;
                }
                swift_bridgeObjectRelease();
                swift_unknownObjectRelease_n();
LABEL_42:
                v24.i32[1] = 0;
                long long v116 = 0u;
                long long v117 = 0u;
                long long v114 = 0u;
                long long v115 = 0u;
                *(void *)&long long v118 = 0;
                *((void *)&v118 + 1) = 1;
                uint64_t v119 = 0;
                uint64_t v120 = 0;
                break;
            }
            goto LABEL_43;
          }
          unint64_t v10 = v105;
          uint64_t v25 = v102;
          uint64_t v32 = v98;
LABEL_44:
          unint64_t v41 = v10[6];
          uint64_t v42 = v10[8];
          uint64_t v98 = v32;
          if (!v42)
          {
            uint64_t v68 = v10[7];
            uint64_t v69 = (void *)v10[4];
            goto LABEL_81;
          }
          for (uint64_t i = 0; i != v42; ++i)
          {
            unint64_t v45 = (uint64_t *)(v41 + 48 * i);
            uint64_t v46 = *v45;
            uint64_t v47 = (void (*)(uint64_t))v45[4];
            uint64_t v48 = v10[9];
            if (v48) {
              BOOL v49 = v46 == v48;
            }
            else {
              BOOL v49 = 0;
            }
            if (v49 || !v104[11]) {
              goto LABEL_46;
            }
            unint64_t v50 = v104[9];
            uint64_t v51 = (void *)(v103 + v104[8]);
            uint64_t v52 = v45[2];
            uint64_t v53 = v51;
            unint64_t v54 = v50 >> 4;
            uint64_t v55 = v103;
            if (v50 >= 0x10)
            {
              while (*v53 != v46)
              {
                ++v55;
                v53 += 2;
                if (!--v54) {
                  goto LABEL_61;
                }
              }
              unsigned int v56 = *(unsigned __int8 *)(v55 + v104[10]);
              BOOL v57 = v56 > 5;
              int v58 = (1 << v56) & 0x23;
              if (v57 || v58 == 0)
              {
LABEL_46:
                uint64_t v44 = swift_retain();
                v47(v44);
                swift_release();
                goto LABEL_47;
              }
            }
LABEL_61:
            if (swift_conformsToProtocol2()) {
              uint64_t v60 = v52;
            }
            else {
              uint64_t v60 = 0;
            }
            if (v60)
            {
              if (v50 < 0x10) {
                goto LABEL_46;
              }
              float32x4_t v61 = v51;
              unint64_t v62 = v50 >> 4;
              uint64_t v63 = v103;
              while (*v61 != v60)
              {
                ++v63;
                v61 += 2;
                if (!--v62) {
                  goto LABEL_74;
                }
              }
              unsigned int v64 = *(unsigned __int8 *)(v63 + v104[10]);
              BOOL v57 = v64 > 5;
              int v65 = (1 << v64) & 0x23;
              if (v57 || v65 == 0) {
                goto LABEL_46;
              }
LABEL_74:
              uint64_t v67 = 16 * (v50 >> 4);
              while (*v51 != v60)
              {
                v51 += 2;
                v67 -= 16;
                if (!v67) {
                  goto LABEL_46;
                }
              }
            }
LABEL_47:
            unint64_t v10 = v105;
          }
          uint64_t v68 = v105[7];
          unint64_t v41 = v105[6];
          uint64_t v69 = (void *)v105[4];
          uint64_t v25 = v102;
          if ((uint64_t)v105[8] >= 1) {
            swift_arrayDestroy();
          }
LABEL_81:
          ecs_stack_allocator_deallocate(v69, v41, 48 * v68);
          v10[6] = v95;
          v10[7] = v94;
          v10[8] = v93;
          v10[9] = v92;
          v10[10] = v91;
          sub_1B634507C((char *)v25);
          ecs_stack_allocator_pop_snapshot(v97);
          int v9 = v85;
          if (v85)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v25 + 376));
          }
          swift_release();
          uint64_t v8 = v96 + 1;
          if (v96 + 1 == v87) {
            return sub_1B632F170(v121);
          }
        }
        unint64_t v10 = v105;
        uint64_t v25 = v20;
        uint64_t v26 = v98;
LABEL_43:
        *(float *)v24.i32 = a4[8] + 0.000000001;
        int32x4_t v40 = vdupq_lane_s32(v24, 0);
        v40.i32[3] = 0;
        float32x4_t v100 = (float32x4_t)v40;
        swift_retain();
        sub_1B6C011C0(v81, v90, v127, (unsigned __int8 *)a4, a1, (uint64_t)&v114, v22, v23, v100, v81);
        uint64_t v32 = v26;
        swift_release();
        goto LABEL_44;
      }
    }
    return sub_1B632F170(v121);
  }
  return result;
}

uint64_t type metadata accessor for ParticleGrowEmitter.System()
{
  return self;
}

unint64_t sub_1B6C64220(char a1)
{
  unint64_t result = 0x6573696F6ELL;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x7269446E69616DLL;
      break;
    case 2:
      unint64_t result = 0x537269446E69616DLL;
      break;
    case 3:
      unint64_t result = 0x746E496573696F6ELL;
      break;
    case 4:
      unint64_t result = 0x6163536573696F6ELL;
      break;
    case 5:
      unint64_t result = 0xD000000000000010;
      break;
    case 6:
      unint64_t result = 0x676E654C70657473;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6C6432C(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6C65C38(0, &qword_1E9DD7A48, (uint64_t (*)(void))sub_1B6C65BE4, (uint64_t)&type metadata for ParticleGrowEmitter.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C65BE4();
  sub_1B6E33A88();
  LOBYTE(v12) = *(unsigned char *)v3;
  char v13 = 0;
  sub_1B66C59A0();
  sub_1B6E32FA8();
  if (!v2)
  {
    long long v12 = *(_OWORD *)(v3 + 16);
    char v13 = 1;
    sub_1B6C65C38(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    sub_1B62AF354((unint64_t *)&qword_1EB97D1D8);
    sub_1B6E32FA8();
    LOBYTE(v12) = 2;
    sub_1B6E32F78();
    LOBYTE(v12) = 3;
    sub_1B6E32F78();
    LOBYTE(v12) = 4;
    sub_1B6E32F78();
    LOBYTE(v12) = 5;
    sub_1B6E32F88();
    LOBYTE(v12) = 6;
    sub_1B6E32F78();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

const char *sub_1B6C6461C()
{
  return "GrowEmitterSystem";
}

uint64_t sub_1B6C64630(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB3FFC(*a1, *a2);
}

unint64_t sub_1B6C6463C()
{
  return sub_1B6C64220(*v0);
}

uint64_t sub_1B6C64644@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6C65090(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6C6466C(uint64_t a1)
{
  unint64_t v2 = sub_1B6C65BE4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C646A8(uint64_t a1)
{
  unint64_t v2 = sub_1B6C65BE4();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B6C646E4@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1B6C65888(a1, (uint64_t)v6);
  if (!v2)
  {
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    a2[2] = v7[0];
    double result = *(double *)((char *)v7 + 12);
    *(_OWORD *)((char *)a2 + 44) = *(_OWORD *)((char *)v7 + 12);
  }
  return result;
}

uint64_t sub_1B6C64730(void *a1)
{
  return sub_1B6C6432C(a1);
}

uint64_t sub_1B6C64748()
{
  return type metadata accessor for ParticleGrowEmitter.System();
}

double sub_1B6C64768@<D0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E4F320;
  double result = 524288.124;
  *(void *)(a1 + 32) = 0x412000003F800000;
  *(_DWORD *)(a1 + 40) = 1065353216;
  *(void *)(a1 + 48) = 500;
  *(_DWORD *)(a1 + 56) = 1036831949;
  return result;
}

void sub_1B6C647A4(float32x4_t *a1, uint64_t *a2, unsigned __int8 *a3, void *a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, float32x4_t a9)
{
  uint64_t v14 = a2[6];
  uint64_t v15 = a2[7];
  if (v14 != v15)
  {
    unint64_t v19 = HIDWORD(a8);
    float32x4_t v20 = *a1;
    uint64_t v21 = a1[1].i64[0];
    int v141 = *a3;
    LODWORD(v133) = *(void *)(a3 + 36);
    uint64_t v22 = (const float *)(a3 + 56);
    uint64_t v132 = *((void *)a3 + 6);
    uint64_t v117 = *a2;
    uint64_t v23 = (uint64_t *)(*a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    float32x4_t v24 = vld1q_dup_f32(v22);
    float32x4_t v131 = v24;
    BOOL v26 = a8 == -1 && HIDWORD(a8) == 0;
    int64_t v118 = a8 << 32;
    uint64_t v122 = (int)a8;
    v9.i32[0] = 1.0;
    uint64_t v120 = *a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries;
    unint64_t v121 = HIDWORD(a8);
    uint64_t v112 = a6;
    uint64_t v113 = a7;
    uint64_t v111 = v15;
    while (1)
    {
      uint64_t v27 = 0;
      uint64_t v28 = v15 - v14;
      uint64_t v114 = v14;
      uint64_t v29 = a7 + 16 * v14;
      uint64_t v30 = a6 + 16 * v14;
      __int32 v31 = v12.i32[3];
      int v32 = HIDWORD(v13);
      __int32 v33 = v10.i32[3];
      float32x4_t v10 = v20;
      while (1)
      {
        if (v141 == 2)
        {
          uint64_t v35 = a4[1];
          uint64_t v34 = a4[2];
          uint64_t v36 = a4[3] ^ v35;
          uint64_t v37 = a4[4] ^ v34;
          uint64_t v38 = v36 ^ v34;
          uint64_t v39 = v37 ^ v35;
          v20.f32[0] = (float)((9 * ((((unint64_t)(5 * v34) >> 32) >> 25) | (640 * v34))) & 0xFFFFFF)
                     * 0.000000059605;
          uint64_t v40 = v39 ^ v36 ^ (v34 << 17);
          uint64_t v41 = __ROR8__(v37, 19);
          uint64_t v42 = v40 ^ v38;
          uint64_t v43 = v38 ^ v41 ^ v39;
          uint64_t v44 = v40 ^ (v38 << 17) ^ v43;
          uint64_t v45 = v42 ^ __ROR8__(v38 ^ v41, 19);
          a4[1] = v45 ^ v43;
          a4[2] = v44 ^ v42;
          a4[3] = v44 ^ (v42 << 17);
          a4[4] = __ROR8__(v45, 19);
          v20.f32[1] = (float)((9 * ((((unint64_t)(5 * v38) >> 32) >> 25) | (640 * v38))) & 0xFFFFFF)
                     * 0.000000059605;
          v20.f32[2] = (float)((9 * ((((unint64_t)(5 * v42) >> 32) >> 25) | (640 * v42))) & 0xFFFFFF)
                     * 0.000000059605;
          v46.i64[0] = 0xBF000000BF000000;
          v46.i64[1] = 0xBF000000BF000000;
          float32x4_t v47 = vaddq_f32(v20, v46);
          v47.i32[3] = v128;
        }
        else
        {
          float32x4_t v48 = vmulq_f32(vmulq_n_f32(v10, COERCE_FLOAT(*((void *)a3 + 5))), (float32x4_t)vdupq_n_s32(0x3DCCCCCDu));
          v48.i32[3] = v11.i32[3];
          float32x4_t v123 = v48;
          __int32 v124 = v31;
          int v134 = v32;
          float32x4_t v136 = v10;
          __int32 v127 = v33;
          float32x4_t v47 = (float32x4_t)((__n128 (*)(uint64_t))*(void *)(a5 + 72))(a5);
          __int32 v31 = v124;
          __int32 v33 = v127;
          int v32 = v134;
          float32x4_t v10 = v136;
          v9.i32[0] = 1.0;
          uint64_t v23 = (uint64_t *)v120;
          LODWORD(v19) = v121;
          v47.i32[3] = v130;
          float32x4_t v11 = v123;
        }
        int8x16_t v49 = (int8x16_t)vabsq_f32(v47);
        if (*(float *)v49.i32 <= 0.00000011921
          && (v49.i32[0] = vextq_s8(v49, v49, 8uLL).u32[0],
              *(int32x2_t *)v49.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v49.i8),
              (v49.i8[4] & 1) != 0)
          && (v49.i8[0] & 1) != 0)
        {
          float32x4_t v50 = (float32x4_t)xmmword_1B6E4F320;
        }
        else
        {
          int32x4_t v51 = (int32x4_t)vmulq_f32(v47, v47);
          v51.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v51, 2), vadd_f32(*(float32x2_t *)v51.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v51.i8, 1))).u32[0];
          float32x2_t v52 = vrsqrte_f32((float32x2_t)v51.u32[0]);
          float32x2_t v53 = vmul_f32(v52, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v52, v52)));
          float32x4_t v50 = vmulq_n_f32(v47, vmul_f32(v53, vrsqrts_f32((float32x2_t)v51.u32[0], vmul_f32(v53, v53))).f32[0]);
          v50.i32[3] = v129;
        }
        float32x4_t v12 = vmulq_n_f32(v50, v133);
        v12.i32[3] = v31;
        float32x4_t v54 = vaddq_f32(a1[2], v12);
        int32x4_t v55 = (int32x4_t)vmulq_f32(v54, v54);
        v55.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v55, 2), vadd_f32(*(float32x2_t *)v55.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v55.i8, 1))).u32[0];
        float32x2_t v56 = vrsqrte_f32((float32x2_t)v55.u32[0]);
        float32x2_t v57 = vmul_f32(v56, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v56, v56)));
        float32x4_t v10 = vaddq_f32(v10, vmulq_f32(v131, vmulq_n_f32(v54, vmul_f32(v57, vrsqrts_f32((float32x2_t)v55.u32[0], vmul_f32(v57, v57))).f32[0])));
        v10.i32[3] = v33;
        float32x4_t v58 = v10;
        v58.i32[3] = v9.i32[0];
        *(float32x4_t *)(v30 + 16 * v27) = v58;
        float32x4_t v59 = vmulq_f32(v50, v50);
        v59.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v59, 2), vaddq_f32(v59, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 1))).u64[0];
        float32x4_t v60 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v59.f32, 0);
        v60.i32[3] = 0;
        float32x4_t v61 = vrsqrteq_f32(v60);
        float32x4_t v62 = vmulq_f32(v61, vrsqrtsq_f32(v60, vmulq_f32(v61, v61)));
        int8x16_t v63 = (int8x16_t)vmulq_f32(v62, vrsqrtsq_f32(v60, vmulq_f32(v62, v62)));
        int32x4_t v64 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v59.f32[0] != 0.0)), 0x1FuLL));
        v64.i32[3] = 0;
        __asm { FMOV            V3.4S, #1.0 }
        float32x4_t v73 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v64), v63, _Q3);
        float32x4_t v68 = vmulq_f32(v50, v73);
        _Q3.i32[0] = v68.i32[2];
        v71.i64[0] = 0x8000000080000000;
        v71.i64[1] = 0x8000000080000000;
        float v69 = *(float *)vbslq_s8(v71, v9, _Q3).i32;
        *(float *)v71.i32 = v68.f32[1] / (float)(fabsf(v68.f32[2]) + *(float *)v9.i32);
        float v70 = vmuls_lane_f32(*(float *)v71.i32, *(float32x2_t *)v68.f32, 1);
        *(float *)v71.i32 = -(float)(v68.f32[0] * *(float *)v71.i32);
        float v72 = v68.f32[2] + (float)(v69 * v70);
        v73.f32[0] = v69 * *(float *)v71.i32;
        float v74 = *(float *)v9.i32 - v70;
        float v75 = vmuls_lane_f32(-v69, *(float32x2_t *)v68.f32, 1);
        float v76 = v68.f32[2] + (float)(v72 + v74);
        if (v76 > 0.0)
        {
          float32x2_t v77 = (float32x2_t)vrev64_s32(*(int32x2_t *)v68.f32);
          *(int32x2_t *)v81.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32), 0);
          v81.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v77.u32[1], LODWORD(v75)), v77).u32[0];
          float32x2_t v78 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v76 + *(float *)v9.i32)), v73.u32[0]);
          float32x2_t v79 = vmul_f32(v78, v78);
          v78.i32[0] = v71.i32[0];
          unsigned __int32 v80 = vsub_f32(*(float32x2_t *)v73.f32, v78).u32[0];
          v71.i32[1] = v79.i32[1];
          v81.i64[1] = v71.i64[0];
          *(float *)v71.i32 = 0.5 / v78.f32[1];
LABEL_29:
          float32x4_t v85 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v71.i8, 0);
          goto LABEL_30;
        }
        if (v72 < v74 || v72 < v68.f32[2])
        {
          if (v74 <= v68.f32[2])
          {
            float v87 = sqrtf((float)((float)(v68.f32[2] + *(float *)v9.i32) - v72) - v74);
            v68.i32[0] = vsubq_f32(v68, v68).u32[0];
            v81.f32[1] = v68.f32[1] + v75;
            v81.f32[2] = v87 * v87;
            v81.f32[3] = v73.f32[0] - *(float *)v71.i32;
            *(float *)v71.i32 = 0.5 / v87;
            goto LABEL_29;
          }
          float v84 = sqrtf((float)((float)(v74 + *(float *)v9.i32) - v72) - v68.f32[2]);
          v85.f32[0] = *(float *)v71.i32 + v73.f32[0];
          float32x2_t v83 = (float32x2_t)vrev64_s32(*(int32x2_t *)v68.f32);
          v85.f32[1] = v84 * v84;
          int32x2_t v86 = (int32x2_t)vadd_f32(v83, (float32x2_t)__PAIR64__(v83.u32[1], LODWORD(v75)));
        }
        else
        {
          float v84 = sqrtf((float)((float)(v72 + *(float *)v9.i32) - v74) - v68.f32[2]);
          v85.f32[0] = v84 * v84;
          v85.f32[1] = *(float *)v71.i32 + v73.f32[0];
          int32x2_t v86 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v75), v68.u32[0]), *(float32x2_t *)v68.f32);
        }
        *(int32x2_t *)&v85.u32[2] = v86;
        *(float *)v86.i32 = 0.5 / v84;
        float32x4_t v81 = (float32x4_t)vdupq_lane_s32(v86, 0);
LABEL_30:
        float32x4_t v20 = vmulq_f32(v81, v85);
        *(float32x4_t *)(v29 + 16 * v27) = v20;
        if (!v26 && v118 >= (uint64_t)0xFFFFFFFF00000001 && v122 < v23[1])
        {
          uint64_t v88 = *v23;
          if (v19 == -1 || *(_DWORD *)(v88 + 12 * (int)v122 + 8) == v19)
          {
            __int32 v125 = v31;
            int v135 = v32;
            float32x4_t v137 = v10;
            float32x4_t v126 = v11;
            sub_1B633C4F4(*(void *)(*(void *)(v117 + 136) + 8 * *(int *)(v88 + 12 * (int)v122) + 32), *(_DWORD *)(v88 + 12 * (int)v122), *(_WORD *)(v88 + 12 * (int)v122 + 4), 64, v117, (uint64_t)v138);
            sub_1B62CA210((uint64_t)v138, (uint64_t)v139, qword_1EB97EA20);
            if (v140)
            {
              uint64_t v23 = (uint64_t *)v120;
              LODWORD(v19) = v121;
              v9.i32[0] = 1.0;
            }
            else
            {
              float32x4_t v89 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(v139[3], v139[2], *(float32x4_t *)(v30 + 16 * v27), 2), v139[1], *(float32x2_t *)(v30 + 16 * v27), 1), v139[0], COERCE_FLOAT(*(_OWORD *)(v30 + 16 * v27)));
              v20.i32[3] = v116;
              v9.i32[0] = 1.0;
              v89.i32[3] = 1.0;
              *(float32x4_t *)(v30 + 16 * v27) = v89;
              uint64_t v23 = (uint64_t *)v120;
              LODWORD(v19) = v121;
            }
            int v32 = v135;
            float32x4_t v10 = v137;
            v12.i32[3] = v125;
            float32x4_t v11 = v126;
          }
        }
        HIDWORD(v13) = v32;
        if (v132 < v21 + v27 + 1) {
          break;
        }
        ++v27;
        __int32 v31 = v12.i32[3];
        __int32 v33 = v10.i32[3];
        if (v28 == v27)
        {
          uint64_t v109 = v21 + v27;
          float32x4_t v20 = v10;
          goto LABEL_43;
        }
      }
      uint64_t v21 = 0;
      uint64_t v109 = 0;
      uint64_t v91 = a4[1];
      uint64_t v90 = a4[2];
      uint64_t v92 = a4[3] ^ v91;
      uint64_t v93 = a4[4] ^ v90;
      uint64_t v94 = v92 ^ v90;
      uint64_t v95 = v93 ^ v91;
      v20.f32[0] = (float)((9 * ((((unint64_t)(5 * v90) >> 32) >> 25) | (640 * v90))) & 0xFFFFFF);
      uint64_t v96 = v95 ^ v92 ^ (v90 << 17);
      uint64_t v97 = __ROR8__(v93, 19);
      uint64_t v98 = v96 ^ v94;
      uint64_t v99 = v94 ^ v97 ^ v95;
      uint64_t v100 = v96 ^ (v94 << 17) ^ v99;
      uint64_t v101 = v98 ^ __ROR8__(v94 ^ v97, 19);
      a4[1] = v101 ^ v99;
      a4[2] = v100 ^ v98;
      v20.f32[0] = v20.f32[0] * 0.000000059605;
      v20.f32[1] = (float)((9 * ((((unint64_t)(5 * v94) >> 32) >> 25) | (640 * v94))) & 0xFFFFFF)
                 * 0.000000059605;
      v20.f32[2] = (float)((9 * ((((unint64_t)(5 * v98) >> 32) >> 25) | (640 * v98))) & 0xFFFFFF)
                 * 0.000000059605;
      __asm { FMOV            V1.4S, #-1.0 }
      v103.i64[0] = 0x4000000040000000;
      v103.i64[1] = 0x4000000040000000;
      float32x4_t v104 = vmlaq_f32(*((float32x4_t *)a3 + 1), a9, vsubq_f32(vmlaq_f32(_Q1, v103, v20), *((float32x4_t *)a3 + 1)));
      int32x4_t v105 = (int32x4_t)vmulq_f32(v104, v104);
      a4[3] = v100 ^ (v98 << 17);
      a4[4] = __ROR8__(v101, 19);
      v105.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v105, 2), vadd_f32(*(float32x2_t *)v105.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v105.i8, 1))).u32[0];
      float32x2_t v106 = vrsqrte_f32((float32x2_t)v105.u32[0]);
      float32x2_t v107 = vmul_f32(v106, vrsqrts_f32((float32x2_t)v105.u32[0], vmul_f32(v106, v106)));
      float32x4_t v108 = vmulq_n_f32(v104, vmul_f32(v107, vrsqrts_f32((float32x2_t)v105.u32[0], vmul_f32(v107, v107))).f32[0]);
      v108.i32[3] = v110;
      a1[2] = v108;
      a7 = v113;
      uint64_t v15 = v111;
      a6 = v112;
      uint64_t v14 = v114 + v27 + 1;
      float32x4_t v20 = 0uLL;
      if (~v114 + v111 == v27)
      {
LABEL_43:
        a1[1].i64[0] = v109;
        *a1 = v20;
        return;
      }
    }
  }
}

uint64_t sub_1B6C64F2C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 7498084 && a2 == 0xE300000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x746E756F63 && a2 == 0xE500000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x614D6D6F646E6172 && a2 == 0xED00007269446E69)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1B6C65090(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x6573696F6ELL && a2 == 0xE500000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x7269446E69616DLL && a2 == 0xE700000000000000 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x537269446E69616DLL && a2 == 0xED00006461657270 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x746E496573696F6ELL && a2 == 0xEE00797469736E65 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else if (a1 == 0x6163536573696F6ELL && a2 == 0xEA0000000000656CLL || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 4;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B6F32F50 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 5;
  }
  else if (a1 == 0x676E654C70657473 && a2 == 0xEA00000000006874)
  {
    swift_bridgeObjectRelease();
    return 6;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 6;
    }
    else {
      return 7;
    }
  }
}

uint64_t sub_1B6C653C0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_retain();
  uint64_t v3 = a1[1];
  swift_retain();
  sub_1B695FED8(v3, (uint64_t)v13);
  swift_release();
  char v4 = v13[0];
  if (v13[0] == 3)
  {
    char v4 = 0;
    long long v5 = xmmword_1B6E4F320;
    int v6 = 1092616192;
    int v7 = 1065353216;
    int v8 = 1036831949;
    uint64_t v9 = 500;
    int v10 = 1065353216;
  }
  else
  {
    int v8 = v19;
    uint64_t v9 = v18;
    int v6 = v16;
    int v10 = v17;
    int v7 = v15;
    long long v5 = v14;
  }
  LOBYTE(v20[0]) = v4;
  long long v21 = v5;
  int v22 = v7;
  int v23 = v6;
  int v24 = v10;
  uint64_t v25 = v9;
  int v26 = v8;
  uint64_t v11 = a1[4];
  swift_retain();
  sub_1B62F6B80((uint64_t)a1);
  sub_1B6C013E0(v11, v2, v2, (uint64_t)a1, v20);
  sub_1B62F648C((uint64_t)a1);
  return swift_release_n();
}

ValueMetadata *type metadata accessor for GrowEmitterRuntime()
{
  return &type metadata for GrowEmitterRuntime;
}

__n128 initializeWithCopy for ParticleGrowEmitter(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  long long v3 = *(_OWORD *)(a2 + 16);
  long long v4 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 44) = *(_OWORD *)(a2 + 44);
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t getEnumTagSinglePayload for ParticleGrowEmitter(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && a1[60]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for ParticleGrowEmitter(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_DWORD *)(result + 56) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 60) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 60) = 0;
    }
    if (a2) {
      *(unsigned char *)__n128 result = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleGrowEmitter()
{
  return &type metadata for ParticleGrowEmitter;
}

uint64_t sub_1B6C655A0(void *a1)
{
  sub_1B6C65C38(0, &qword_1E9DD7A20, (uint64_t (*)(void))sub_1B6C65834, (uint64_t)&type metadata for GrowEmitterRuntime.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  int v8 = (char *)v11 - v7;
  uint64_t v9 = a1[4];
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C65834();
  sub_1B6E33A48();
  if (!v1)
  {
    sub_1B6C65C38(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    char v13 = 0;
    sub_1B62AF354((unint64_t *)&qword_1EB97D1F0);
    sub_1B6E32DF8();
    v11[1] = v12;
    LOBYTE(v12) = 1;
    uint64_t v9 = sub_1B6E32DD8();
    char v13 = 2;
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    v11[0] = v12;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v9;
}

unint64_t sub_1B6C65834()
{
  unint64_t result = qword_1E9DD7A28;
  if (!qword_1E9DD7A28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7A28);
  }
  return result;
}

uint64_t sub_1B6C65888@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  sub_1B6C65C38(0, &qword_1E9DD7A38, (uint64_t (*)(void))sub_1B6C65BE4, (uint64_t)&type metadata for ParticleGrowEmitter.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v27 = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v6);
  int v8 = (char *)&v25 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C65BE4();
  uint64_t v9 = v8;
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v10 = (uint64_t)a1;
  uint64_t v11 = v5;
  uint64_t v12 = v26;
  char v29 = 0;
  sub_1B66C594C();
  uint64_t v13 = v27;
  sub_1B6E32DF8();
  char v14 = v28;
  sub_1B6C65C38(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
  char v29 = 1;
  sub_1B62AF354((unint64_t *)&qword_1EB97D1F0);
  sub_1B6E32DF8();
  long long v25 = v28;
  LOBYTE(v28) = 2;
  sub_1B6E32DC8();
  int v16 = v15;
  LOBYTE(v28) = 3;
  sub_1B6E32DC8();
  int v18 = v17;
  LOBYTE(v28) = 4;
  sub_1B6E32DC8();
  int v20 = v19;
  LOBYTE(v28) = 5;
  uint64_t v21 = sub_1B6E32DD8();
  LOBYTE(v28) = 6;
  sub_1B6E32DC8();
  int v23 = v22;
  (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v13);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(v10);
  *(unsigned char *)uint64_t v12 = v14;
  *(_OWORD *)(v12 + 16) = v25;
  *(_DWORD *)(v12 + 32) = v16;
  *(_DWORD *)(v12 + 36) = v18;
  *(_DWORD *)(v12 + 40) = v20;
  *(void *)(v12 + 48) = v21;
  *(_DWORD *)(v12 + 56) = v23;
  return result;
}

unint64_t sub_1B6C65BE4()
{
  unint64_t result = qword_1E9DD7A40;
  if (!qword_1E9DD7A40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7A40);
  }
  return result;
}

void sub_1B6C65C38(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for ParticleGrowEmitter.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF9)
  {
    unsigned int v6 = ((a2 - 250) >> 8) + 1;
    *unint64_t result = a2 + 6;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C65D6CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 6;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleGrowEmitter.CodingKeys()
{
  return &type metadata for ParticleGrowEmitter.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for GrowEmitterRuntime.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C65E70);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for GrowEmitterRuntime.CodingKeys()
{
  return &type metadata for GrowEmitterRuntime.CodingKeys;
}

unint64_t sub_1B6C65EAC()
{
  unint64_t result = qword_1E9DD7A50;
  if (!qword_1E9DD7A50)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7A50);
  }
  return result;
}

unint64_t sub_1B6C65F04()
{
  unint64_t result = qword_1E9DD7A58;
  if (!qword_1E9DD7A58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7A58);
  }
  return result;
}

unint64_t sub_1B6C65F5C()
{
  unint64_t result = qword_1E9DD7A60;
  if (!qword_1E9DD7A60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7A60);
  }
  return result;
}

unint64_t sub_1B6C65FB4()
{
  unint64_t result = qword_1E9DD7A68;
  if (!qword_1E9DD7A68)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7A68);
  }
  return result;
}

unint64_t sub_1B6C6600C()
{
  unint64_t result = qword_1E9DD7A70;
  if (!qword_1E9DD7A70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7A70);
  }
  return result;
}

unint64_t sub_1B6C66064()
{
  unint64_t result = qword_1E9DD7A78;
  if (!qword_1E9DD7A78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7A78);
  }
  return result;
}

uint64_t sub_1B6C660B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v21 = a2;
  sub_1B63BE100();
  MEMORY[0x1F4188790](v3 - 8, v4);
  int v23 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B6C6B360(0, &qword_1E9DD7AE0, (uint64_t (*)(void))sub_1B6C6B244, (uint64_t)&type metadata for SceneKitAsset.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v7 = v6;
  uint64_t v22 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v8);
  unint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = type metadata accessor for SceneKitAsset(0);
  MEMORY[0x1F4188790](v11 - 8, v12);
  char v14 = (char *)&v20 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v15 = sub_1B6E30F48();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56))(v14, 1, 1, v15);
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C6B244();
  uint64_t v16 = v24;
  sub_1B6E33A48();
  if (!v16)
  {
    uint64_t v17 = v22;
    sub_1B6C6B3C8((unint64_t *)&qword_1EB97D980, MEMORY[0x1E4F276F0]);
    uint64_t v18 = (uint64_t)v23;
    sub_1B6E32D78();
    (*(void (**)(char *, uint64_t))(v17 + 8))(v10, v7);
    sub_1B63BE06C(v18, (uint64_t)v14);
    sub_1B6C6B2F8((uint64_t)v14, v21, type metadata accessor for SceneKitAsset);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B6C6B298((uint64_t)v14, type metadata accessor for SceneKitAsset);
}

uint64_t sub_1B6C663B4()
{
  return 0x7465737361;
}

uint64_t sub_1B6C663C8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  if (a1 == 0x7465737361 && a2 == 0xE500000000000000)
  {
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = 0;
  }
  else
  {
    char v5 = sub_1B6E334B8();
    uint64_t result = swift_bridgeObjectRelease();
    char v7 = v5 ^ 1;
  }
  *a3 = v7 & 1;
  return result;
}

uint64_t sub_1B6C66458(uint64_t a1)
{
  unint64_t v2 = sub_1B6C6B244();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C66494(uint64_t a1)
{
  unint64_t v2 = sub_1B6C6B244();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C664D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1B6C660B8(a1, a2);
}

uint64_t sub_1B6C664E8(void *a1)
{
  sub_1B6C6B360(0, &qword_1E9DD7AF8, (uint64_t (*)(void))sub_1B6C6B244, (uint64_t)&type metadata for SceneKitAsset.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  char v7 = (char *)&v9 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C6B244();
  sub_1B6E33A88();
  sub_1B6E30F48();
  sub_1B6C6B3C8(&qword_1E9DD7B00, MEMORY[0x1E4F276F0]);
  sub_1B6E32F38();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B6C66694@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_1B6E30F48();
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56);

  return v3(a1, 1, 1, v2);
}

uint64_t sub_1B6C66700(char *a1, char *a2)
{
  return sub_1B6BB66C0(*a1, *a2);
}

uint64_t sub_1B6C6670C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C66798()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C66810()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C66898@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_1B6C668F8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x746E457465737361;
  if (*v1) {
    uint64_t v2 = 0x676E6979616C70;
  }
  unint64_t v3 = 0xEB00000000797469;
  if (*v1) {
    unint64_t v3 = 0xE700000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B6C66940()
{
  if (*v0) {
    return 0x676E6979616C70;
  }
  else {
    return 0x746E457465737361;
  }
}

uint64_t sub_1B6C66984@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1B6C669E8(uint64_t a1)
{
  unint64_t v2 = sub_1B6C6A708();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C66A24(uint64_t a1)
{
  unint64_t v2 = sub_1B6C6A708();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C66A60(void *a1, uint64_t a2, int a3)
{
  v13[2] = a3;
  sub_1B6C6B360(0, (unint64_t *)&unk_1E9DD7AB8, (uint64_t (*)(void))sub_1B6C6A708, (uint64_t)&type metadata for SceneKitAssetInstance.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)v13 - v10;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C6A708();
  sub_1B6E33A88();
  uint64_t v16 = a2;
  char v15 = 0;
  sub_1B6657A10();
  sub_1B6E32FA8();
  if (!v3)
  {
    char v14 = 1;
    sub_1B6E32F58();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

void *sub_1B6C66C14@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1B6C6A4FC(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5 & 1;
  }
  return result;
}

uint64_t sub_1B6C66C4C(void *a1)
{
  return sub_1B6C66A60(a1, *(void *)v1, *(unsigned __int8 *)(v1 + 8));
}

double sub_1B6C66C6C@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)a1 = 0xFFFFFFFFLL;
  *(unsigned char *)(a1 + 8) = 1;
  return result;
}

uint64_t sub_1B6C66C80@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  uint64_t v2 = (char *)a2 + *(int *)(a1 + 24);
  uint64_t v3 = sub_1B6E30F48();
  char v4 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56);

  return v4(v2, 1, 1, v3);
}

void *sub_1B6C66CF4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = 0;
  long long v5 = *(_OWORD *)(v1 + 32);
  v75[0] = *(_OWORD *)(v1 + 16);
  v75[1] = v5;
  uint64_t v76 = *(void *)(v1 + 48);
  sub_1B62C9DA8(a1, (uint64_t)v75, 0x200000000, v39);
  sub_1B62CA210((uint64_t)v39, (uint64_t)v52, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v52[0])
  {
    if (v58 >= 1)
    {
      uint64_t v34 = v55;
      if (v55)
      {
        uint64_t v29 = v1;
        uint64_t v33 = v54;
        uint64_t v6 = v57;
        uint64_t v38 = v57[4];
        int v7 = *(unsigned __int8 *)(v56 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        uint64_t v8 = type metadata accessor for SceneKitRenderer(0);
        v59[0] = v52[0];
        v59[1] = v52[1];
        uint64_t v60 = v53;
        uint64_t v31 = v8;
        uint64_t v30 = v8 - 8;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v9 = 0;
        int v32 = v7;
        while (1)
        {
          uint64_t v10 = (unsigned int *)(v33 + 48 * v9);
          uint64_t v36 = *v10;
          uint64_t v37 = v4;
          uint64_t v35 = v10[1];
          uint64_t v11 = (uint64_t *)*((void *)v10 + 2);
          uint64_t v12 = *((void *)v10 + 3);
          uint64_t v14 = *((void *)v10 + 4);
          uint64_t v13 = *((void *)v10 + 5);
          if (v7)
          {
            char v15 = *(os_unfair_lock_s **)(v13 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v13 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v38);
          sub_1B62CA210((uint64_t)(v6 + 6), (uint64_t)v74, &qword_1EB97DE20);
          uint64_t v16 = v6[4];
          uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(v13 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v6[6] = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
          v6[7] = v17;
          v6[9] = 0;
          v6[10] = 0;
          v6[8] = 0;
          swift_release();
          uint64_t v18 = sub_1B62C9024((uint64_t)&type metadata for SceneKitAssetInstance, (uint64_t)&off_1F0F8AC10, v11, v12, v14, (uint64_t)v6);
          uint64_t v19 = sub_1B62C9024(v31, (uint64_t)&off_1F0F6F3D0, v11, v12, v14, (uint64_t)v6);
          uint64_t v20 = (id *)v19;
          if (v11)
          {
            if (v14)
            {
              uint64_t v21 = *(void *)(*(void *)v30 + 72);
              uint64_t v22 = (unsigned __int8 *)(v18 + 8);
              uint64_t v4 = v37;
              do
              {
                sub_1B6C698DC(a1, *((void *)v22 - 1), *v22, v20);
                uint64_t v20 = (id *)((char *)v20 + v21);
                v22 += 12;
                --v14;
              }
              while (v14);
              goto LABEL_18;
            }
          }
          else if (v36 != v35)
          {
            uint64_t v23 = *(void *)(*(void *)v30 + 72);
            uint64_t v24 = v35 - v36;
            long long v25 = (id *)(v19 + v23 * v36);
            uint64_t v26 = (unsigned __int8 *)(v18 + 12 * v36 + 8);
            uint64_t v4 = v37;
            do
            {
              sub_1B6C698DC(a1, *((void *)v26 - 1), *v26, v25);
              long long v25 = (id *)((char *)v25 + v23);
              v26 += 12;
              --v24;
            }
            while (v24);
            goto LABEL_18;
          }
          uint64_t v4 = v37;
LABEL_18:
          sub_1B6345178(v6, (unsigned __int16 **)v59, (uint64_t)v74);
          sub_1B634507C((char *)v13);
          ecs_stack_allocator_pop_snapshot(v38);
          int v7 = v32;
          if (v32)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v13 + 376));
          }
          swift_release();
          if (++v9 == v34)
          {
            sub_1B632F1C4(v39, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
            uint64_t v2 = v29;
            break;
          }
        }
      }
    }
    sub_1B632F1C4(v39, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  }
  long long v27 = *(_OWORD *)(v2 + 72);
  v72[0] = *(_OWORD *)(v2 + 56);
  v72[1] = v27;
  uint64_t v73 = *(void *)(v2 + 88);
  sub_1B62C9DA8(a1, (uint64_t)v72, 0x200000000, v40);
  double result = (void *)sub_1B62CA210((uint64_t)v40, (uint64_t)&v41, (unint64_t *)&qword_1EB97DC50);
  if (v41)
  {
    uint64_t v61 = v41;
    int v62 = v42;
    char v63 = v43;
    uint64_t v64 = v44;
    char v65 = v45;
    uint64_t v66 = v46;
    uint64_t v67 = v47;
    long long v68 = v48;
    long long v69 = v49;
    uint64_t v70 = v50;
    uint64_t v71 = v51;
    swift_retain();
    swift_retain();
    sub_1B6D9DF18((uint64_t)&v61, v2, a1);
    swift_release();
    swift_release();
    return sub_1B632F1C4(v40, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  }
  return result;
}

id sub_1B6C67188(uint64_t a1, uint64_t a2)
{
  v14[1] = *(id *)MEMORY[0x1E4F143B8];
  uint64_t v4 = (void *)sub_1B6E30E78();
  if (a2)
  {
    type metadata accessor for LoadingOption(0);
    sub_1B6C6B3C8(&qword_1E9DCD728, type metadata accessor for LoadingOption);
    long long v5 = (void *)sub_1B6E314B8();
    swift_bridgeObjectRelease();
  }
  else
  {
    long long v5 = 0;
  }
  v14[0] = 0;
  id v6 = objc_msgSend((id)swift_getObjCClassFromMetadata(), sel_sceneWithURL_options_error_, v4, v5, v14);

  id v7 = v14[0];
  if (v6)
  {
    uint64_t v8 = sub_1B6E30F48();
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8);
    id v10 = v7;
    v9(a1, v8);
  }
  else
  {
    id v11 = v14[0];
    sub_1B6E30D78();

    swift_willThrow();
    uint64_t v12 = sub_1B6E30F48();
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8))(a1, v12);
  }
  return v6;
}

void *sub_1B6C67364(uint64_t a1)
{
  uint64_t v2 = a1;
  long long v3 = *(_OWORD *)(v1 + 32);
  v309[0] = *(_OWORD *)(v1 + 16);
  v309[1] = v3;
  uint64_t v310 = *(void *)(v1 + 48);
  sub_1B62C9DA8(a1, (uint64_t)v309, 0x200000000, v270);
  double result = (void *)sub_1B62CA210((uint64_t)v270, (uint64_t)v292, (unint64_t *)&qword_1EB97DC50);
  if (!*(void *)&v292[0]) {
    return result;
  }
  long long v299 = v292[0];
  long long v300 = v292[1];
  uint64_t v301 = v293;
  uint64_t v253 = OBJC_IVAR____TtC3VFX13EntityManager_renderer;
  if (!*(void *)(v2 + OBJC_IVAR____TtC3VFX13EntityManager_renderer)) {
    return sub_1B632F1C4(v270, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  }
  uint64_t v214 = v1;
  uint64_t v5 = 0;
  uint64_t v230 = v294;
  uint64_t v6 = v295;
  uint64_t v7 = v296;
  uint64_t v245 = v297;
  uint64_t v8 = v298;
  sub_1B6835598(v2);
  uint64_t v252 = v2;
  if (v8 < 1 || !v6) {
    goto LABEL_44;
  }
  uint64_t v239 = v245[4];
  int v9 = *(unsigned __int8 *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  uint64_t v10 = type metadata accessor for SceneKitRenderer(0);
  v302[0] = v299;
  v302[1] = v300;
  uint64_t v303 = v301;
  uint64_t v223 = v10;
  uint64_t v217 = v10 - 8;
  swift_retain();
  swift_retain();
  swift_retain();
  uint64_t v11 = 0;
  uint64_t v227 = v6;
  int v225 = v9;
  do
  {
    uint64_t v249 = v5;
    uint64_t v236 = v11;
    uint64_t v12 = (unsigned int *)(v230 + 48 * v11);
    uint64_t v13 = *v12;
    char v15 = (uint64_t *)*((void *)v12 + 2);
    uint64_t v14 = *((void *)v12 + 3);
    uint64_t v17 = *((void *)v12 + 4);
    uint64_t v16 = *((void *)v12 + 5);
    uint64_t v233 = v12[1];
    if (v9)
    {
      uint64_t v18 = *(os_unfair_lock_s **)(v16 + 376);
      swift_retain_n();
      os_unfair_lock_lock(v18);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v16 + 344));
      swift_release();
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v239);
    sub_1B62CA210((uint64_t)(v245 + 6), (uint64_t)v314, &qword_1EB97DE20);
    uint64_t v19 = v245[4];
    uint64_t v20 = *(void *)(*(void *)(*(void *)(*(void *)(v16 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v245[6] = ecs_stack_allocator_allocate(v19, 48 * v20, 8);
    v245[7] = v20;
    v245[9] = 0;
    v245[10] = 0;
    v245[8] = 0;
    swift_release();
    uint64_t v21 = sub_1B62C9024(v223, (uint64_t)&off_1F0F6F3D0, v15, v14, v17, (uint64_t)v245);
    if (!v15)
    {
      uint64_t v2 = v252;
      if (v13 == v233) {
        goto LABEL_27;
      }
      uint64_t v36 = *(void *)(*(void *)v217 + 72);
      uint64_t v37 = v233 - v13;
      uint64_t v38 = (id *)(v21 + v36 * v13 + 8);
      while (1)
      {
        if (!*v38) {
          goto LABEL_31;
        }
        id v45 = objc_msgSend(*v38, sel_scene);
        uint64_t v46 = *(v38 - 1);
        if (v45)
        {
          uint64_t v47 = v45;
          if (!v46)
          {

LABEL_31:
            uint64_t v39 = *(void *)(v2 + v253);
            if (v39)
            {
              uint64_t v40 = *(void *)(v39 + 16);
              swift_unknownObjectRetain();
            }
            else
            {
              uint64_t v40 = 0;
            }
            id v41 = objc_msgSend(self, sel_rendererWithDevice_options_, v40, 0);
            swift_unknownObjectRelease();
            objc_msgSend(v41, sel_setScene_, *(v38 - 1));
            id v42 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F3B228]), sel_init);
            id v43 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F3B1F0]), sel_init);
            objc_msgSend(v42, sel_setCamera_, v43);

            objc_msgSend(v41, sel_setPointOfView_, v42);
            objc_msgSend(v41, sel_setAutoenablesDefaultLighting_, 1);

            id v44 = *v38;
            *uint64_t v38 = v41;

            goto LABEL_34;
          }
          sub_1B6C6A3EC();
          id v48 = v46;
          id v49 = v47;
          char v50 = sub_1B6E32358();

          uint64_t v2 = v252;
          if ((v50 & 1) == 0) {
            goto LABEL_31;
          }
        }
        else if (v46)
        {
          goto LABEL_31;
        }
LABEL_34:
        uint64_t v38 = (id *)((char *)v38 + v36);
        if (!--v37) {
          goto LABEL_27;
        }
      }
    }
    uint64_t v2 = v252;
    if (v17)
    {
      uint64_t v22 = *(void *)(*(void *)v217 + 72);
      uint64_t v23 = (id *)(v21 + 8);
      do
      {
        if (!*v23) {
          goto LABEL_14;
        }
        id v30 = objc_msgSend(*v23, sel_scene);
        uint64_t v31 = *(v23 - 1);
        if (v30)
        {
          int v32 = v30;
          if (!v31)
          {

LABEL_14:
            uint64_t v24 = *(void *)(v2 + v253);
            if (v24)
            {
              uint64_t v25 = *(void *)(v24 + 16);
              swift_unknownObjectRetain();
            }
            else
            {
              uint64_t v25 = 0;
            }
            id v26 = objc_msgSend(self, sel_rendererWithDevice_options_, v25, 0);
            swift_unknownObjectRelease();
            objc_msgSend(v26, sel_setScene_, *(v23 - 1));
            id v27 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F3B228]), sel_init);
            id v28 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F3B1F0]), sel_init);
            objc_msgSend(v27, sel_setCamera_, v28);

            objc_msgSend(v26, sel_setPointOfView_, v27);
            objc_msgSend(v26, sel_setAutoenablesDefaultLighting_, 1);

            id v29 = *v23;
            *uint64_t v23 = v26;

            goto LABEL_17;
          }
          sub_1B6C6A3EC();
          id v33 = v31;
          id v34 = v32;
          char v35 = sub_1B6E32358();

          uint64_t v2 = v252;
          if ((v35 & 1) == 0) {
            goto LABEL_14;
          }
        }
        else if (v31)
        {
          goto LABEL_14;
        }
LABEL_17:
        uint64_t v23 = (id *)((char *)v23 + v22);
        --v17;
      }
      while (v17);
    }
LABEL_27:
    uint64_t v5 = v249;
    sub_1B6345178(v245, (unsigned __int16 **)v302, (uint64_t)v314);
    sub_1B634507C((char *)v16);
    ecs_stack_allocator_pop_snapshot(v239);
    int v9 = v225;
    if (v225)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v16 + 376));
    }
    swift_release();
    uint64_t v11 = v236 + 1;
  }
  while (v236 + 1 != v227);
  sub_1B632F1C4(v270, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
LABEL_44:
  long long v51 = *(_OWORD *)(v214 + 72);
  v312[0] = *(_OWORD *)(v214 + 56);
  v312[1] = v51;
  uint64_t v313 = *(void *)(v214 + 88);
  sub_1B62C9DA8(v2, (uint64_t)v312, 0x200000000, v271);
  sub_1B62CA210((uint64_t)v271, (uint64_t)v285, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v285[0])
  {
    if (v291 >= 1)
    {
      uint64_t v234 = v288;
      if (v288)
      {
        uint64_t v250 = v5;
        float32x2_t v52 = v290;
        uint64_t v231 = v287;
        uint64_t v53 = v290[4];
        int v54 = *(unsigned __int8 *)(v289 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        uint64_t v55 = type metadata accessor for SceneKitRenderer(0);
        v304[0] = v285[0];
        v304[1] = v285[1];
        uint64_t v305 = v286;
        uint64_t v222 = (uint64_t)(v52 + 6);
        uint64_t v246 = v52;
        uint64_t v221 = v52 + 8;
        uint64_t v224 = v55;
        uint64_t v218 = v55 - 8;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v56 = 0;
        int v226 = v54;
        uint64_t v228 = v53;
        do
        {
          float32x2_t v57 = (unsigned int *)(v231 + 48 * v56);
          uint64_t v240 = *v57;
          uint64_t v237 = v57[1];
          float32x4_t v59 = (uint64_t *)*((void *)v57 + 2);
          uint64_t v58 = *((void *)v57 + 3);
          uint64_t v60 = *((void *)v57 + 4);
          uint64_t v61 = *((void *)v57 + 5);
          if (v54)
          {
            int v62 = *(os_unfair_lock_s **)(v61 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v62);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v61 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v53);
          sub_1B62CA210(v222, (uint64_t)v311, &qword_1EB97DE20);
          uint64_t v63 = v246[4];
          uint64_t v64 = *(void *)(*(void *)(*(void *)(*(void *)(v61 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v246[6] = ecs_stack_allocator_allocate(v63, 48 * v64, 8);
          v246[7] = v64;
          v221[1] = 0;
          v221[2] = 0;
          void *v221 = 0;
          swift_release();
          uint64_t v65 = sub_1B62C9024(v224, (uint64_t)&off_1F0F6F3D0, v59, v58, v60, (uint64_t)v246);
          uint64_t v66 = sub_1B62C9024((uint64_t)&type metadata for WorldTransform, (uint64_t)&off_1F0F67720, v59, v58, v60, (uint64_t)v246);
          if (v59)
          {
            if (v60)
            {
              uint64_t v67 = *(void *)(*(void *)v218 + 72);
              long long v68 = (id *)(v65 + 8);
              long long v69 = (double *)(v66 + 32);
              do
              {
                id v70 = *v68;
                id v71 = objc_msgSend(v70, sel_scene);
                if (v71)
                {
                  float v72 = v71;
                  id v73 = objc_msgSend(v71, sel_rootNode);

                  objc_msgSend(v73, sel_setSimdTransform_, *(v69 - 4), *(v69 - 2), *v69, v69[2]);
                }
                long long v68 = (id *)((char *)v68 + v67);

                v69 += 8;
                --v60;
              }
              while (v60);
            }
          }
          else if (v240 != v237)
          {
            uint64_t v74 = *(void *)(*(void *)v218 + 72);
            uint64_t v75 = v237 - v240;
            uint64_t v76 = (double *)(v66 + (v240 << 6) + 32);
            float32x2_t v77 = (id *)(v65 + v74 * v240 + 8);
            do
            {
              id v78 = *v77;
              id v79 = objc_msgSend(v78, sel_scene);
              if (v79)
              {
                unsigned __int32 v80 = v79;
                id v81 = objc_msgSend(v79, sel_rootNode);

                objc_msgSend(v81, sel_setSimdTransform_, *(v76 - 4), *(v76 - 2), *v76, v76[2]);
              }
              float32x2_t v77 = (id *)((char *)v77 + v74);

              v76 += 8;
              --v75;
            }
            while (v75);
          }
          sub_1B6345178(v246, (unsigned __int16 **)v304, (uint64_t)v311);
          sub_1B634507C((char *)v61);
          uint64_t v53 = v228;
          ecs_stack_allocator_pop_snapshot(v228);
          int v54 = v226;
          if (v226)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v61 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v61 + 376));
          }
          swift_release();
          ++v56;
        }
        while (v56 != v234);
        sub_1B632F1C4(v271, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
        uint64_t v5 = v250;
        uint64_t v2 = v252;
      }
    }
    sub_1B632F1C4(v271, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
  }
  uint64_t v82 = *(void **)(v2 + v253);
  if (v82)
  {
    if (v82[47])
    {
      v269[21] = (uint64_t)&unk_1F1077230;
      uint64_t v232 = swift_dynamicCastObjCProtocolConditional();
      if (v232)
      {
        float32x2_t v83 = (void *)v82[49];
        if (v83)
        {
          swift_retain();
          swift_unknownObjectRetain();
          id v84 = v83;
          id v85 = objc_msgSend(v84, sel_colorAttachments);
          id v86 = objc_msgSend(v85, sel_objectAtIndexedSubscript_, 0);

          id v87 = objc_msgSend(v86, sel_texture);
          if (v87)
          {
            id v88 = objc_msgSend(v84, sel_depthAttachment);
            id v89 = objc_msgSend(v88, sel_texture);

            if (v89)
            {
              id v200 = v84;
              swift_unknownObjectRetain();
              uint64_t v90 = swift_unknownObjectRetain();
              uint64_t v91 = sub_1B633483C(v90, 1, (uint64_t)v89, 1, 1, 0);
              swift_unknownObjectRelease();
              swift_unknownObjectRelease();
              sub_1B62C9DA8(v2, (uint64_t)v309, 0x200000000, v272);
              sub_1B62CA210((uint64_t)v272, (uint64_t)v275, (unint64_t *)&qword_1EB97DC50);
              if (*(void *)&v275[0])
              {
                long long v282 = v275[0];
                long long v283 = v275[1];
                uint64_t v284 = v276;
                if (v281 <= 0)
                {
                  sub_1B632F1C4(v272, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F2C8);

                  swift_unknownObjectRelease();
                  swift_unknownObjectRelease();

                  swift_unknownObjectRelease();
                  swift_release();
                }
                else
                {
                  uint64_t v207 = v278;
                  if (v278)
                  {
                    uint64_t v206 = v277;
                    uint64_t v92 = v280[4];
                    char v210 = *(unsigned char *)(v279 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
                    uint64_t v235 = v82 + 78;
                    uint64_t v211 = v280;
                    uint64_t v202 = v280 + 8;
                    uint64_t v203 = (uint64_t)(v280 + 6);
                    uint64_t v204 = type metadata accessor for SceneKitRenderer(0);
                    uint64_t v201 = v204 - 8;
                    swift_retain();
                    swift_retain();
                    swift_retain();
                    uint64_t v93 = 0;
                    uint64_t v229 = v82;
                    uint64_t v238 = v91;
                    uint64_t v205 = v92;
                    do
                    {
                      uint64_t v209 = v93;
                      uint64_t v94 = (unsigned int *)(v206 + 48 * v93);
                      uint64_t v95 = *v94;
                      uint64_t v254 = v94[1];
                      uint64_t v97 = (uint64_t *)*((void *)v94 + 2);
                      uint64_t v96 = *((void *)v94 + 3);
                      uint64_t v99 = *((void *)v94 + 4);
                      uint64_t v98 = *((void *)v94 + 5);
                      uint64_t v251 = v5;
                      if (v210)
                      {
                        uint64_t v100 = *(os_unfair_lock_s **)(v98 + 376);
                        swift_retain();
                        os_unfair_lock_lock(v100);
                        os_unfair_lock_lock(*(os_unfair_lock_t *)(v98 + 344));
                      }
                      else
                      {
                        swift_retain();
                      }
                      ecs_stack_allocator_push_snapshot(v92);
                      sub_1B62CA210(v203, (uint64_t)v308, &qword_1EB97DE20);
                      uint64_t v101 = v211[4];
                      uint64_t v102 = *(void *)(*(void *)(*(void *)(*(void *)(v98 + 40) + 16) + 32) + 16) + 1;
                      swift_retain();
                      v211[6] = ecs_stack_allocator_allocate(v101, 48 * v102, 8);
                      v211[7] = v102;
                      v202[1] = 0;
                      v202[2] = 0;
                      *uint64_t v202 = 0;
                      swift_release();
                      uint64_t v208 = v98;
                      uint64_t v103 = sub_1B62C9024(v204, (uint64_t)&off_1F0F6F3D0, v97, v96, v99, (uint64_t)v211);
                      if (v97)
                      {
                        uint64_t v104 = (uint64_t)v235;
                        if (v99)
                        {
                          uint64_t v105 = *(void *)(*(void *)v201 + 72);
                          float32x2_t v106 = (id *)(v103 + 8);
                          uint64_t v212 = v105;
                          do
                          {
                            if (*v106)
                            {
                              id v107 = *v106;
                              objc_msgSend(v107, sel_updateAtTime_, CACurrentMediaTime());
                              sub_1B62CA210(v104, (uint64_t)v268, (unint64_t *)&unk_1EB9852B0);
                              sub_1B62CA210((uint64_t)v268, (uint64_t)v269, (unint64_t *)&unk_1EB9852B0);
                              if (sub_1B6388C10(v269) == 1)
                              {
                              }
                              else
                              {
                                float32x4_t v108 = (void *)v82[81];
                                swift_unknownObjectRetain();
                                id v109 = objc_msgSend(v107, sel_pointOfView);
                                uint64_t v110 = *(void *)(v252 + 176);
                                swift_retain();
                                os_unfair_recursive_lock_lock_with_options();
                                uint64_t v111 = sub_1B636E9A8((uint64_t)&type metadata for FrameConstantsStorage);
                                id v247 = v108;
                                if (v113)
                                {
                                  uint64_t v114 = *(void *)(v110 + 16) + v111;
                                  uint64_t v115 = 32 * v112;
                                  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)(v110 + 32) + 32 * v112 + 24));
                                  os_unfair_recursive_lock_unlock();
                                  float32x4_t v116 = *(float32x4_t *)(v114 + 48);
                                  float32x4_t v117 = *(float32x4_t *)(v114 + 64);
                                  float32x4_t v118 = *(float32x4_t *)(v114 + 80);
                                  float32x4_t v119 = *(float32x4_t *)(v114 + 96);
                                  long long v120 = *(_OWORD *)(v114 + 304);
                                  long long v121 = *(_OWORD *)(v114 + 320);
                                  long long v122 = *(_OWORD *)(v114 + 336);
                                  long long v123 = *(_OWORD *)(v114 + 352);
                                  float32x4_t v124 = vmulq_f32(v116, (float32x4_t)0);
                                  float32x4_t v125 = vmulq_n_f32(v116, 0.0 - *(float *)(v114 + 848));
                                  float32x4_t v126 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v116, (float32x4_t)0, v117), (float32x4_t)0, v118), (float32x4_t)0, v119);
                                  float32x4_t v127 = vmlaq_f32(vmlaq_f32(vaddq_f32(v117, v124), (float32x4_t)0, v118), (float32x4_t)0, v119);
                                  float32x4_t v128 = vmlaq_f32(vaddq_f32(v118, vmlaq_f32(v124, (float32x4_t)0, v117)), (float32x4_t)0, v119);
                                  float32x4_t v129 = vaddq_f32(v119, vmlaq_n_f32(vmlaq_n_f32(v125, v117, 0.0 - *(float *)(v114 + 852)), v118, 0.0 - *(float *)(v114 + 856)));
                                  v261.columns[0] = (simd_float4)v126;
                                  v261.columns[1] = (simd_float4)v127;
                                  v261.columns[2] = (simd_float4)v128;
                                  v261.columns[3] = (simd_float4)v129;
                                  long long v262 = v120;
                                  long long v263 = v121;
                                  long long v264 = v122;
                                  long long v265 = v123;
                                  sub_1B63607BC((uint64_t)&v261);
                                  os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)(v110 + 32) + v115 + 24));
                                  swift_release();
                                }
                                else
                                {
                                  os_unfair_recursive_lock_unlock();
                                  swift_release();
                                  sub_1B6B3BAA4((uint64_t)&v261);
                                }
                                sub_1B63605F4((uint64_t)&v261, (uint64_t)v267);
                                sub_1B63605F4((uint64_t)v267, (uint64_t)&v261);
                                sub_1B63605F4((uint64_t)v267, (uint64_t)v266);
                                int v130 = sub_1B6360688((uint64_t)v266);
                                v133.columns[0] = (simd_float4)xmmword_1B6E4F300;
                                v133.columns[1] = (simd_float4)xmmword_1B6E4F320;
                                uint64_t v131 = 1065353216;
                                double v132 = 0.0078125;
                                v133.columns[2] = (simd_float4)xmmword_1B6E4F2E0;
                                v133.columns[3] = (simd_float4)xmmword_1B6E4F370;
                                double v134 = 0.0;
                                double v135 = 0.0;
                                if (v130 != 1)
                                {
                                  simd_float4x4 v133 = v261;
                                  uint64_t v131 = v262;
                                  double v132 = *(double *)&v263;
                                  double v134 = *(double *)&v264;
                                  double v135 = *(double *)&v265;
                                }
                                if (v109)
                                {
                                  uint64_t v255 = v131;
                                  uint64_t v241 = *(void *)&v132;
                                  uint64_t v215 = *(void *)&v135;
                                  uint64_t v219 = *(void *)&v134;
                                  simd_float4x4 v315 = __invert_f4(v133);
                                  objc_msgSend(v109, sel_setSimdWorldTransform_, *(double *)v315.columns[0].i64, *(double *)v315.columns[1].i64, *(double *)v315.columns[2].i64, *(double *)v315.columns[3].i64);
                                  id v136 = objc_msgSend(v109, sel_camera);
                                  v133.columns[3].i64[0] = v215;
                                  v133.columns[2].i64[0] = v219;
                                  v133.columns[1].i64[0] = v241;
                                  v133.columns[0].i64[0] = v255;
                                  if (v136)
                                  {
                                    float32x4_t v137 = v136;
                                    sub_1B6E32118();
                                    simd_float4x4 v261 = v273;
                                    objc_msgSend(v137, sel_setProjectionTransform_, &v261);
                                    objc_msgSend(v137, sel_setVignettingIntensity_, 0.0);
                                    objc_msgSend(v137, sel_setBloomIntensity_, 0.0);
                                    objc_msgSend(v137, sel_setMotionBlurIntensity_, 0.0);
                                    objc_msgSend(v137, sel_setWantsHDR_, 0);
                                    objc_msgSend(v137, sel_setWantsExposureAdaptation_, 0);
                                    objc_msgSend(v137, sel_setSaturation_, 1.0);
                                    objc_msgSend(v137, sel_setWantsDepthOfField_, 0);
                                    objc_msgSend(v137, sel_setContrast_, 0.0);
                                    objc_msgSend(v137, sel_setColorFringeStrength_, 0.0);
                                    objc_msgSend(v137, sel_setGrainIntensity_, 0.0);
                                  }
                                }
                                id v138 = objc_msgSend(v107, sel_scene, *(double *)v133.columns[0].i64, *(double *)v133.columns[1].i64, *(double *)v133.columns[2].i64, *(double *)v133.columns[3].i64, *(double *)&v131, v132, v134, v135);
                                if (v138)
                                {
                                  float32x4_t v139 = v138;
                                  objc_msgSend(v138, sel_setWantsScreenSpaceReflection_, 0);
                                  id v140 = objc_msgSend(v139, sel_background);
                                  objc_msgSend(v140, sel_setContents_, 0);
                                }
                                uint64_t v242 = v109;
                                objc_msgSend(self, sel_flush);
                                double v141 = CACurrentMediaTime();
                                sub_1B62CA210(v104, (uint64_t)v260, (unint64_t *)&unk_1EB9852B0);
                                sub_1B62CA210((uint64_t)v260, (uint64_t)&v261, (unint64_t *)&unk_1EB9852B0);
                                if (sub_1B6388C10((uint64_t *)&v261) == 1) {
                                  goto LABEL_131;
                                }
                                uint64_t v142 = v261.columns[0].i64[1];
                                uint64_t ObjectType = swift_getObjectType();
                                float32x4_t v144 = *(double (**)(uint64_t, uint64_t))(v142 + 72);
                                swift_unknownObjectRetain();
                                double v145 = v144(ObjectType, v142);
                                swift_unknownObjectRelease();
                                sub_1B62CA210(v104, (uint64_t)v257, (unint64_t *)&unk_1EB9852B0);
                                sub_1B62CA210((uint64_t)v257, (uint64_t)&v258, (unint64_t *)&unk_1EB9852B0);
                                if (sub_1B6388C10(&v258) == 1) {
                                  goto LABEL_131;
                                }
                                uint64_t v146 = v259;
                                uint64_t v147 = swift_getObjectType();
                                float32x4_t v148 = *(void (**)(uint64_t, uint64_t))(v146 + 72);
                                swift_unknownObjectRetain();
                                v148(v147, v146);
                                double v150 = v149;
                                swift_unknownObjectRelease();
                                id v151 = objc_msgSend(v247, sel_commandQueue);
                                swift_unknownObjectRetain();
                                objc_msgSend(v107, sel_renderAtTime_viewport_encoder_passDescriptor_commandQueue_, v232, v238, v151, v141, 0.0, 0.0, v145, v150);
                                swift_unknownObjectRelease();

                                swift_unknownObjectRelease_n();
                                uint64_t v82 = v229;
                                uint64_t v104 = (uint64_t)v235;
                                uint64_t v105 = v212;
                              }
                            }
                            float32x2_t v106 = (id *)((char *)v106 + v105);
                            --v99;
                          }
                          while (v99);
                        }
                      }
                      else
                      {
                        uint64_t v152 = (uint64_t)v235;
                        if (v95 != v254)
                        {
                          uint64_t v153 = *(void *)(*(void *)v201 + 72);
                          uint64_t v154 = v254 - v95;
                          uint64_t v155 = (id *)(v103 + v153 * v95 + 8);
                          uint64_t v213 = v153;
                          do
                          {
                            if (*v155)
                            {
                              id v156 = *v155;
                              objc_msgSend(v156, sel_updateAtTime_, CACurrentMediaTime());
                              sub_1B62CA210(v152, (uint64_t)v268, (unint64_t *)&unk_1EB9852B0);
                              sub_1B62CA210((uint64_t)v268, (uint64_t)v269, (unint64_t *)&unk_1EB9852B0);
                              if (sub_1B6388C10(v269) == 1)
                              {
                              }
                              else
                              {
                                id v248 = (id)v82[81];
                                swift_unknownObjectRetain();
                                id v157 = objc_msgSend(v156, sel_pointOfView);
                                uint64_t v158 = *(void *)(v252 + 176);
                                swift_retain();
                                os_unfair_recursive_lock_lock_with_options();
                                uint64_t v159 = sub_1B636E9A8((uint64_t)&type metadata for FrameConstantsStorage);
                                if (v161)
                                {
                                  uint64_t v162 = *(void *)(v158 + 16) + v159;
                                  uint64_t v163 = 32 * v160;
                                  os_unfair_lock_lock(*(os_unfair_lock_t *)(*(void *)(v158 + 32) + 32 * v160 + 24));
                                  os_unfair_recursive_lock_unlock();
                                  float32x4_t v164 = *(float32x4_t *)(v162 + 48);
                                  float32x4_t v165 = *(float32x4_t *)(v162 + 64);
                                  float32x4_t v166 = *(float32x4_t *)(v162 + 80);
                                  float32x4_t v167 = *(float32x4_t *)(v162 + 96);
                                  long long v168 = *(_OWORD *)(v162 + 304);
                                  long long v169 = *(_OWORD *)(v162 + 320);
                                  long long v170 = *(_OWORD *)(v162 + 336);
                                  long long v171 = *(_OWORD *)(v162 + 352);
                                  float32x4_t v172 = vmulq_f32(v164, (float32x4_t)0);
                                  float32x4_t v173 = vmulq_n_f32(v164, 0.0 - *(float *)(v162 + 848));
                                  float32x4_t v174 = vmlaq_f32(vmlaq_f32(vmlaq_f32(v164, (float32x4_t)0, v165), (float32x4_t)0, v166), (float32x4_t)0, v167);
                                  float32x4_t v175 = vmlaq_f32(vmlaq_f32(vaddq_f32(v165, v172), (float32x4_t)0, v166), (float32x4_t)0, v167);
                                  float32x4_t v176 = vmlaq_f32(vaddq_f32(v166, vmlaq_f32(v172, (float32x4_t)0, v165)), (float32x4_t)0, v167);
                                  float32x4_t v177 = vaddq_f32(v167, vmlaq_n_f32(vmlaq_n_f32(v173, v165, 0.0 - *(float *)(v162 + 852)), v166, 0.0 - *(float *)(v162 + 856)));
                                  v261.columns[0] = (simd_float4)v174;
                                  v261.columns[1] = (simd_float4)v175;
                                  v261.columns[2] = (simd_float4)v176;
                                  v261.columns[3] = (simd_float4)v177;
                                  long long v262 = v168;
                                  long long v263 = v169;
                                  long long v264 = v170;
                                  long long v265 = v171;
                                  sub_1B63607BC((uint64_t)&v261);
                                  os_unfair_lock_unlock(*(os_unfair_lock_t *)(*(void *)(v158 + 32) + v163 + 24));
                                  swift_release();
                                }
                                else
                                {
                                  os_unfair_recursive_lock_unlock();
                                  swift_release();
                                  sub_1B6B3BAA4((uint64_t)&v261);
                                }
                                sub_1B63605F4((uint64_t)&v261, (uint64_t)v267);
                                sub_1B63605F4((uint64_t)v267, (uint64_t)&v261);
                                sub_1B63605F4((uint64_t)v267, (uint64_t)v266);
                                int v178 = sub_1B6360688((uint64_t)v266);
                                v181.columns[0] = (simd_float4)xmmword_1B6E4F300;
                                v181.columns[1] = (simd_float4)xmmword_1B6E4F320;
                                uint64_t v179 = 1065353216;
                                double v180 = 0.0078125;
                                v181.columns[2] = (simd_float4)xmmword_1B6E4F2E0;
                                v181.columns[3] = (simd_float4)xmmword_1B6E4F370;
                                double v182 = 0.0;
                                double v183 = 0.0;
                                if (v178 != 1)
                                {
                                  simd_float4x4 v181 = v261;
                                  uint64_t v179 = v262;
                                  double v180 = *(double *)&v263;
                                  double v182 = *(double *)&v264;
                                  double v183 = *(double *)&v265;
                                }
                                if (v157)
                                {
                                  uint64_t v256 = v179;
                                  uint64_t v243 = *(void *)&v180;
                                  uint64_t v216 = *(void *)&v183;
                                  uint64_t v220 = *(void *)&v182;
                                  simd_float4x4 v316 = __invert_f4(v181);
                                  objc_msgSend(v157, sel_setSimdWorldTransform_, *(double *)v316.columns[0].i64, *(double *)v316.columns[1].i64, *(double *)v316.columns[2].i64, *(double *)v316.columns[3].i64);
                                  id v184 = objc_msgSend(v157, sel_camera);
                                  v181.columns[3].i64[0] = v216;
                                  v181.columns[2].i64[0] = v220;
                                  v181.columns[1].i64[0] = v243;
                                  v181.columns[0].i64[0] = v256;
                                  if (v184)
                                  {
                                    id v185 = v184;
                                    sub_1B6E32118();
                                    simd_float4x4 v261 = v274;
                                    objc_msgSend(v185, sel_setProjectionTransform_, &v261);
                                    objc_msgSend(v185, sel_setVignettingIntensity_, 0.0);
                                    objc_msgSend(v185, sel_setBloomIntensity_, 0.0);
                                    objc_msgSend(v185, sel_setMotionBlurIntensity_, 0.0);
                                    objc_msgSend(v185, sel_setWantsHDR_, 0);
                                    objc_msgSend(v185, sel_setWantsExposureAdaptation_, 0);
                                    objc_msgSend(v185, sel_setSaturation_, 1.0);
                                    objc_msgSend(v185, sel_setWantsDepthOfField_, 0);
                                    objc_msgSend(v185, sel_setContrast_, 0.0);
                                    objc_msgSend(v185, sel_setColorFringeStrength_, 0.0);
                                    objc_msgSend(v185, sel_setGrainIntensity_, 0.0);
                                  }
                                }
                                id v186 = objc_msgSend(v156, sel_scene, *(double *)v181.columns[0].i64, *(double *)v181.columns[1].i64, *(double *)v181.columns[2].i64, *(double *)v181.columns[3].i64, *(double *)&v179, v180, v182, v183);
                                if (v186)
                                {
                                  uint64_t v187 = v186;
                                  objc_msgSend(v186, sel_setWantsScreenSpaceReflection_, 0);
                                  id v188 = objc_msgSend(v187, sel_background);
                                  objc_msgSend(v188, sel_setContents_, 0);
                                }
                                long long v244 = v157;
                                objc_msgSend(self, sel_flush);
                                double v189 = CACurrentMediaTime();
                                sub_1B62CA210(v152, (uint64_t)v260, (unint64_t *)&unk_1EB9852B0);
                                sub_1B62CA210((uint64_t)v260, (uint64_t)&v261, (unint64_t *)&unk_1EB9852B0);
                                if (sub_1B6388C10((uint64_t *)&v261) == 1) {
                                  goto LABEL_131;
                                }
                                uint64_t v190 = v261.columns[0].i64[1];
                                uint64_t v191 = swift_getObjectType();
                                id v192 = *(double (**)(uint64_t, uint64_t))(v190 + 72);
                                swift_unknownObjectRetain();
                                double v193 = v192(v191, v190);
                                swift_unknownObjectRelease();
                                sub_1B62CA210(v152, (uint64_t)v257, (unint64_t *)&unk_1EB9852B0);
                                sub_1B62CA210((uint64_t)v257, (uint64_t)&v258, (unint64_t *)&unk_1EB9852B0);
                                if (sub_1B6388C10(&v258) == 1)
                                {
LABEL_131:
                                  double result = (void *)sub_1B6E32BE8();
                                  __break(1u);
                                  return result;
                                }
                                uint64_t v194 = v259;
                                uint64_t v195 = swift_getObjectType();
                                uint64_t v196 = *(void (**)(uint64_t, uint64_t))(v194 + 72);
                                swift_unknownObjectRetain();
                                v196(v195, v194);
                                double v198 = v197;
                                swift_unknownObjectRelease();
                                id v199 = objc_msgSend(v248, sel_commandQueue);
                                swift_unknownObjectRetain();
                                objc_msgSend(v156, sel_renderAtTime_viewport_encoder_passDescriptor_commandQueue_, v232, v238, v199, v189, 0.0, 0.0, v193, v198);
                                swift_unknownObjectRelease();

                                swift_unknownObjectRelease_n();
                                uint64_t v82 = v229;
                                uint64_t v152 = (uint64_t)v235;
                                uint64_t v153 = v213;
                              }
                            }
                            uint64_t v155 = (id *)((char *)v155 + v153);
                            --v154;
                          }
                          while (v154);
                        }
                      }
                      v306[0] = v282;
                      v306[1] = v283;
                      uint64_t v307 = v284;
                      uint64_t v5 = v251;
                      sub_1B6345178(v211, (unsigned __int16 **)v306, (uint64_t)v308);
                      sub_1B634507C((char *)v208);
                      uint64_t v92 = v205;
                      ecs_stack_allocator_pop_snapshot(v205);
                      if (v210)
                      {
                        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v208 + 344));
                        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v208 + 376));
                      }
                      swift_release();
                      uint64_t v93 = v209 + 1;
                      uint64_t v91 = v238;
                    }
                    while (v209 + 1 != v207);
                  }
                  else
                  {
                    sub_1B632F1C4(v272, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F2C8);
                  }
                  swift_unknownObjectRelease();

                  swift_unknownObjectRelease();
                  swift_release();

                  swift_unknownObjectRelease();
                }
                sub_1B632F1C4(v272, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
                sub_1B632F1C4(v272, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
              }
              else
              {
                swift_release();

                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
                swift_unknownObjectRelease();
              }
            }
            else
            {
              swift_release();
              swift_unknownObjectRelease();

              swift_unknownObjectRelease();
            }
          }
          else
          {
            swift_release();
            swift_unknownObjectRelease();
          }
        }
      }
    }
  }
  return sub_1B632F1C4(v270, (void (*)(void, void, void, void, void, void, void, void, void, void, void, void))sub_1B632F27C);
}

char *sub_1B6C68EE8(char *a1, char **a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = &v4[(v3 + 16) & ~(unint64_t)v3];
    swift_retain();
  }
  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = a2[1];
    *((void *)a1 + 1) = v6;
    uint64_t v7 = *(int *)(a3 + 24);
    uint64_t v8 = &a1[v7];
    int v9 = (char *)a2 + v7;
    uint64_t v10 = sub_1B6E30F48();
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    uint64_t v13 = v4;
    uint64_t v14 = v6;
    if (v12(v9, 1, v10))
    {
      sub_1B63BE100();
      memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64));
    }
    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0, 1, v10);
    }
  }
  return v5;
}

uint64_t sub_1B6C69064(id *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 24);
  uint64_t v5 = sub_1B6E30F48();
  uint64_t v8 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v4, 1, v5);
  if (!result)
  {
    uint64_t v7 = *(uint64_t (**)(char *, uint64_t))(v8 + 8);
    return v7(v4, v5);
  }
  return result;
}

void *sub_1B6C6913C(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)a2;
  uint64_t v5 = *(void **)(a2 + 8);
  *a1 = *(void *)a2;
  a1[1] = v5;
  uint64_t v6 = *(int *)(a3 + 24);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = sub_1B6E30F48();
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  id v12 = v4;
  id v13 = v5;
  if (v11(v8, 1, v9))
  {
    sub_1B63BE100();
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0, 1, v9);
  }
  return a1;
}

uint64_t sub_1B6C69264(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  uint64_t v7 = *(void **)a2;
  *(void *)a1 = *(void *)a2;
  id v8 = v7;

  uint64_t v9 = *(void **)(a1 + 8);
  uint64_t v10 = *(void **)(a2 + 8);
  *(void *)(a1 + 8) = v10;
  id v11 = v10;

  uint64_t v12 = *(int *)(a3 + 24);
  id v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = sub_1B6E30F48();
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v16 + 48);
  int v18 = v17(v13, 1, v15);
  int v19 = v17(v14, 1, v15);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(void *, void *, uint64_t))(v16 + 24))(v13, v14, v15);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v16 + 8))(v13, v15);
    goto LABEL_6;
  }
  if (v19)
  {
LABEL_6:
    sub_1B63BE100();
    memcpy(v13, v14, *(void *)(*(void *)(v20 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v16 + 16))(v13, v14, v15);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0, 1, v15);
  return a1;
}

_OWORD *sub_1B6C69400(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = sub_1B6E30F48();
  uint64_t v8 = *(void *)(v7 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1, v7))
  {
    sub_1B63BE100();
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64));
  }
  else
  {
    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v5, v6, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v5, 0, 1, v7);
  }
  return a1;
}

uint64_t sub_1B6C69510(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = *(void **)a1;
  *(void *)a1 = *a2;

  uint64_t v7 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = a2[1];

  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = sub_1B6E30F48();
  uint64_t v12 = *(void *)(v11 - 8);
  id v13 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1, v11);
  int v15 = v13(v10, 1, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(void *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }
  if (v15)
  {
LABEL_6:
    sub_1B63BE100();
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0, 1, v11);
  return a1;
}

uint64_t sub_1B6C696A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B6C696B8);
}

uint64_t sub_1B6C696B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  if (a2 == 2147483646)
  {
    uint64_t v4 = *a1;
    if ((unint64_t)*a1 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }
  else
  {
    sub_1B63BE100();
    uint64_t v10 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48);
    uint64_t v11 = v9;
    uint64_t v12 = (char *)a1 + *(int *)(a3 + 24);
    return v10(v12, a2, v11);
  }
}

uint64_t sub_1B6C69774(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B6C69788);
}

void *sub_1B6C69788(void *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 2147483646)
  {
    *uint64_t result = a2;
  }
  else
  {
    sub_1B63BE100();
    uint64_t v8 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56);
    uint64_t v9 = v7;
    uint64_t v10 = (char *)v5 + *(int *)(a4 + 24);
    return (void *)v8(v10, a2, a2, v9);
  }
  return result;
}

void sub_1B6C69830()
{
  sub_1B63BE100();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

ValueMetadata *type metadata accessor for SceneKitAssetInstance()
{
  return &type metadata for SceneKitAssetInstance;
}

void sub_1B6C698DC(uint64_t a1, uint64_t a2, int a3, id *a4)
{
  int v89 = a3;
  sub_1B680FDB8();
  uint64_t v88 = v7;
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v10 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B63BE100();
  MEMORY[0x1F4188790](v11 - 8, v12);
  int v14 = (char *)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v15, v16);
  uint64_t v91 = (uint64_t)&v72 - v17;
  MEMORY[0x1F4188790](v18, v19);
  uint64_t v21 = (char *)&v72 - v20;
  uint64_t v22 = sub_1B6E30F48();
  uint64_t v23 = *(void *)(v22 - 8);
  MEMORY[0x1F4188790](v22, v24);
  id v26 = (char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v27, v28);
  id v78 = (char *)&v72 - v29;
  MEMORY[0x1F4188790](v30, v31);
  id v33 = (char *)&v72 - v32;
  sub_1B696054C(a2, &v93);
  if (*((void *)&v93 + 1))
  {
    float v72 = v14;
    float32x2_t v77 = v26;
    uint64_t v80 = v23;
    uint64_t v85 = *((void *)&v93 + 1);
    uint64_t v79 = v93;
    uint64_t v35 = v94;
    uint64_t v34 = v95;
    uint64_t v36 = v96;
    uint64_t v37 = v97;
    uint64_t v83 = v98;
    uint64_t v84 = v99;
    uint64_t v92 = v33;
    uint64_t v87 = v94;
    uint64_t v90 = a4;
    uint64_t v86 = a1;
    uint64_t v82 = v97;
    id v81 = v96;
    if (v96)
    {
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v37 + 8);
      id v40 = v36;
      uint64_t v41 = v37;
      id v42 = v40;
      swift_bridgeObjectRetain();
      v39(v35, v34, ObjectType, v41);
      id v43 = v92;

      uint64_t v44 = v34;
    }
    else
    {
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      *(void *)&long long v93 = 0;
      *((void *)&v93 + 1) = 0xE000000000000000;
      swift_retain();
      sub_1B6E328C8();
      sub_1B6E31948();
      uint64_t v44 = v34;
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      long long v45 = v93;
      int v46 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      *(void *)&long long v93 = 0;
      swift_retain();
      sub_1B6B33E34(v46, (uint64_t *)&v93, v45, *((uint64_t *)&v45 + 1));
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRetain();
      id v43 = v92;
      sub_1B6E30E48();
    }
    uint64_t v47 = v80;
    uint64_t v80 = v44;
    swift_bridgeObjectRelease();
    id v73 = *(void (**)(char *, char *, uint64_t))(v47 + 16);
    v73(v21, v43, v22);
    id v48 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56);
    uint64_t v76 = v47 + 56;
    uint64_t v75 = v48;
    v48((uint64_t)v21, 0, 1, v22);
    uint64_t v74 = (uint64_t)v90 + *(int *)(type metadata accessor for SceneKitRenderer(0) + 24);
    uint64_t v49 = v91;
    sub_1B6C6B2F8(v74, v91, (uint64_t (*)(void))sub_1B63BE100);
    uint64_t v50 = (uint64_t)&v10[*(int *)(v88 + 48)];
    sub_1B6C6B2F8((uint64_t)v21, (uint64_t)v10, (uint64_t (*)(void))sub_1B63BE100);
    sub_1B6C6B2F8(v49, v50, (uint64_t (*)(void))sub_1B63BE100);
    long long v51 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v47 + 48);
    if (v51((uint64_t)v10, 1, v22) == 1)
    {
      sub_1B6C6B298(v49, (uint64_t (*)(void))sub_1B63BE100);
      sub_1B6C6B298((uint64_t)v21, (uint64_t (*)(void))sub_1B63BE100);
      int v52 = v51(v50, 1, v22);
      uint64_t v53 = v92;
      if (v52 == 1)
      {
        sub_1B6C6B298((uint64_t)v10, (uint64_t (*)(void))sub_1B63BE100);
        (*(void (**)(char *, uint64_t))(v47 + 8))(v53, v22);
LABEL_17:
        sub_1B6C6A498(v79, v85, v87, v80, v81);
        a4 = v90;
        a1 = v86;
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v54 = (uint64_t)v72;
      sub_1B6C6B2F8((uint64_t)v10, (uint64_t)v72, (uint64_t (*)(void))sub_1B63BE100);
      if (v51(v50, 1, v22) != 1)
      {
        uint64_t v55 = v78;
        (*(void (**)(char *, uint64_t, uint64_t))(v47 + 32))(v78, v50, v22);
        sub_1B6C6B3C8((unint64_t *)&qword_1E9DD2A10, MEMORY[0x1E4F276F0]);
        LODWORD(v88) = sub_1B6E31708();
        uint64_t v56 = *(void (**)(char *, uint64_t))(v47 + 8);
        v56(v55, v22);
        sub_1B6C6B298(v91, (uint64_t (*)(void))sub_1B63BE100);
        sub_1B6C6B298((uint64_t)v21, (uint64_t (*)(void))sub_1B63BE100);
        v56((char *)v54, v22);
        sub_1B6C6B298((uint64_t)v10, (uint64_t (*)(void))sub_1B63BE100);
        uint64_t v53 = v92;
        if (v88)
        {
          v56(v92, v22);
          goto LABEL_17;
        }
LABEL_18:
        sub_1B6C6A3EC();
        uint64_t v57 = (uint64_t)v77;
        v73(v77, v53, v22);
        sub_1B638C154(0, (unint64_t *)&unk_1E9DD7A90, (uint64_t (*)(uint64_t))sub_1B6C6A42C, MEMORY[0x1E4FBBE00]);
        uint64_t inited = swift_initStackObject();
        *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
        float32x4_t v59 = (void *)*MEMORY[0x1E4F3B3B0];
        *(void *)(inited + 32) = *MEMORY[0x1E4F3B3B0];
        *(void *)(inited + 64) = MEMORY[0x1E4FBB390];
        *(unsigned char *)(inited + 40) = 0;
        id v60 = v59;
        uint64_t v61 = sub_1B67E0C20(inited);
        id v62 = sub_1B6C67188(v57, (uint64_t)v61);
        sub_1B6C6A498(v79, v85, v87, v80, v81);
        a4 = v90;
        a1 = v86;

        *a4 = v62;
        uint64_t v63 = v74;
        sub_1B6C6B298(v74, (uint64_t (*)(void))sub_1B63BE100);
        (*(void (**)(uint64_t, char *, uint64_t))(v47 + 32))(v63, v53, v22);
        v75(v63, 0, 1, v22);
        goto LABEL_19;
      }
      sub_1B6C6B298(v91, (uint64_t (*)(void))sub_1B63BE100);
      sub_1B6C6B298((uint64_t)v21, (uint64_t (*)(void))sub_1B63BE100);
      (*(void (**)(uint64_t, uint64_t))(v47 + 8))(v54, v22);
      uint64_t v53 = v92;
    }
    sub_1B6C6B298((uint64_t)v10, (uint64_t (*)(void))sub_1B680FDB8);
    goto LABEL_18;
  }
LABEL_19:
  id v64 = *a4;
  if (*a4 || (id v64 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F3B268]), sel_init), (*a4 = v64) != 0)) {
    objc_msgSend(v64, sel_setPaused_, (v89 & 1) == 0, v72);
  }
  id v65 = a4[1];
  if (!v65)
  {
    uint64_t v66 = *(void *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
    if (v66)
    {
      uint64_t v67 = *(void *)(v66 + 16);
      swift_unknownObjectRetain();
    }
    else
    {
      uint64_t v67 = 0;
    }
    id v65 = objc_msgSend(self, sel_rendererWithDevice_options_, v67, 0);
    swift_unknownObjectRelease();
    objc_msgSend(v65, sel_setAutoenablesDefaultLighting_, 1);
    a4[1] = v65;
  }
  id v68 = v65;
  objc_msgSend(v68, sel_setScene_, v64);
  id v69 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F3B228]), sel_init);
  objc_msgSend(v68, sel_setPointOfView_, v69);

  id v70 = objc_msgSend(v68, sel_pointOfView);
  id v71 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F3B1F0]), sel_init);
  objc_msgSend(v70, sel_setCamera_, v71);
}

unint64_t sub_1B6C6A3EC()
{
  unint64_t result = qword_1E9DD7A88;
  if (!qword_1E9DD7A88)
  {
    self;
    unint64_t result = swift_getObjCClassMetadata();
    atomic_store(result, (unint64_t *)&qword_1E9DD7A88);
  }
  return result;
}

void sub_1B6C6A42C()
{
  if (!qword_1E9DD0760)
  {
    type metadata accessor for LoadingOption(255);
    TupleTypeMetadata2 = swift_getTupleTypeMetadata2();
    if (!v1) {
      atomic_store(TupleTypeMetadata2, (unint64_t *)&qword_1E9DD0760);
    }
  }
}

void sub_1B6C6A498(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  if (a2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
}

void *sub_1B6C6A4FC(void *a1)
{
  sub_1B6C6B360(0, &qword_1E9DD7AA0, (uint64_t (*)(void))sub_1B6C6A708, (uint64_t)&type metadata for SceneKitAssetInstance.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v12 - v7;
  uint64_t v9 = sub_1B62C14BC(a1, a1[3]);
  sub_1B6C6A708();
  uint64_t v10 = v9;
  sub_1B6E33A48();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  else
  {
    char v15 = 1;
    if (sub_1B6E32E98())
    {
      char v13 = 1;
      sub_1B6E32DA8();
    }
    char v14 = 0;
    sub_1B62B1EA8();
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    uint64_t v10 = (void *)v12[1];
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return v10;
}

unint64_t sub_1B6C6A708()
{
  unint64_t result = qword_1E9DD7AA8;
  if (!qword_1E9DD7AA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7AA8);
  }
  return result;
}

uint64_t *sub_1B6C6A75C(uint64_t *a1, uint64_t *a2)
{
  sub_1B63BE100();
  int v5 = *(_DWORD *)(*(void *)(v4 - 8) + 80);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16) & ~(unint64_t)v5));
    swift_retain();
  }
  else
  {
    uint64_t v6 = *(void *)(v4 - 8);
    uint64_t v7 = sub_1B6E30F48();
    uint64_t v8 = *(void *)(v7 - 8);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v8 + 48))(a2, 1, v7))
    {
      memcpy(a1, a2, *(void *)(v6 + 64));
    }
    else
    {
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v8 + 16))(a1, a2, v7);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v8 + 56))(a1, 0, 1, v7);
    }
  }
  return a1;
}

uint64_t sub_1B6C6A8B0(uint64_t a1)
{
  uint64_t v2 = sub_1B6E30F48();
  uint64_t v5 = *(void *)(v2 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(a1, 1, v2);
  if (!result)
  {
    uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 8);
    return v4(a1, v2);
  }
  return result;
}

void *sub_1B6C6A980(void *a1, const void *a2)
{
  uint64_t v4 = sub_1B6E30F48();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    sub_1B63BE100();
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 16))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *sub_1B6C6AA8C(void *a1, void *a2)
{
  uint64_t v4 = sub_1B6E30F48();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 24))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    sub_1B63BE100();
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 16))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

void *sub_1B6C6AC04(void *a1, const void *a2)
{
  uint64_t v4 = sub_1B6E30F48();
  uint64_t v5 = *(void *)(v4 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v5 + 48))(a2, 1, v4))
  {
    sub_1B63BE100();
    memcpy(a1, a2, *(void *)(*(void *)(v6 - 8) + 64));
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v5 + 32))(a1, a2, v4);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  }
  return a1;
}

void *sub_1B6C6AD10(void *a1, void *a2)
{
  uint64_t v4 = sub_1B6E30F48();
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v5 + 48);
  int v7 = v6(a1, 1, v4);
  int v8 = v6(a2, 1, v4);
  if (!v7)
  {
    if (!v8)
    {
      (*(void (**)(void *, void *, uint64_t))(v5 + 40))(a1, a2, v4);
      return a1;
    }
    (*(void (**)(void *, uint64_t))(v5 + 8))(a1, v4);
    goto LABEL_6;
  }
  if (v8)
  {
LABEL_6:
    sub_1B63BE100();
    memcpy(a1, a2, *(void *)(*(void *)(v9 - 8) + 64));
    return a1;
  }
  (*(void (**)(void *, void *, uint64_t))(v5 + 32))(a1, a2, v4);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v5 + 56))(a1, 0, 1, v4);
  return a1;
}

uint64_t sub_1B6C6AE88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return MEMORY[0x1F4186578](a1, a2, a3, sub_1B6C6AE9C);
}

uint64_t sub_1B6C6AE9C(uint64_t a1, uint64_t a2)
{
  sub_1B63BE100();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48);

  return v5(a1, a2, v4);
}

uint64_t sub_1B6C6AF08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return MEMORY[0x1F41867C0](a1, a2, a3, a4, sub_1B6C6AF1C);
}

uint64_t sub_1B6C6AF1C(uint64_t a1, uint64_t a2)
{
  sub_1B63BE100();
  uint64_t v5 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56);

  return v5(a1, a2, a2, v4);
}

uint64_t type metadata accessor for SceneKitAsset(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1EB97E6E0);
}

void sub_1B6C6AFAC()
{
  sub_1B63BE100();
  if (v0 <= 0x3F) {
    swift_initStructMetadata();
  }
}

unsigned char *storeEnumTagSinglePayload for SceneKitAssetInstance.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C6B104);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneKitAssetInstance.CodingKeys()
{
  return &type metadata for SceneKitAssetInstance.CodingKeys;
}

unint64_t sub_1B6C6B140()
{
  unint64_t result = qword_1E9DD7AC8;
  if (!qword_1E9DD7AC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7AC8);
  }
  return result;
}

unint64_t sub_1B6C6B198()
{
  unint64_t result = qword_1E9DD7AD0;
  if (!qword_1E9DD7AD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7AD0);
  }
  return result;
}

unint64_t sub_1B6C6B1F0()
{
  unint64_t result = qword_1E9DD7AD8;
  if (!qword_1E9DD7AD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7AD8);
  }
  return result;
}

unint64_t sub_1B6C6B244()
{
  unint64_t result = qword_1E9DD7AE8;
  if (!qword_1E9DD7AE8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7AE8);
  }
  return result;
}

uint64_t sub_1B6C6B298(uint64_t a1, uint64_t (*a2)(void))
{
  uint64_t v3 = a2(0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(a1, v3);
  return a1;
}

uint64_t sub_1B6C6B2F8(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v5 = a3(0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16))(a2, a1, v5);
  return a2;
}

void sub_1B6C6B360(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_1B6C6B3C8(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for SceneKitAsset.CodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *uint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)uint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)uint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *uint64_t result = 0;
      break;
    case 2:
      *(_WORD *)uint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6C6B4ACLL);
    case 4:
      *(_DWORD *)uint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for SceneKitAsset.CodingKeys()
{
  return &type metadata for SceneKitAsset.CodingKeys;
}

unint64_t sub_1B6C6B4E8()
{
  unint64_t result = qword_1E9DD7B08;
  if (!qword_1E9DD7B08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7B08);
  }
  return result;
}

unint64_t sub_1B6C6B540()
{
  unint64_t result = qword_1E9DD7B10;
  if (!qword_1E9DD7B10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7B10);
  }
  return result;
}

unint64_t sub_1B6C6B598()
{
  unint64_t result = qword_1E9DD7B18;
  if (!qword_1E9DD7B18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7B18);
  }
  return result;
}

void sub_1B6C6B5EC(void *a1@<X8>)
{
  *a1 = &unk_1F0F6E598;
}

uint64_t sub_1B6C6B5FC()
{
  return sub_1B6E31B28();
}

unint64_t sub_1B6C6B64C()
{
  unint64_t v1 = *v0;
  if (!*v0) {
    return 7;
  }
  unint64_t result = __clz(__rbit64(v1));
  if (result > 6) {
    return 7;
  }
  if (((1 << result) & v1) != 0) {
    *unint64_t v0 = v1 & ~(1 << result);
  }
  return result;
}

unint64_t sub_1B6C6B688@<X0>(unsigned char *a1@<X8>)
{
  unint64_t result = sub_1B6C6B64C();
  *a1 = result;
  return result;
}

uint64_t sub_1B6C6B6B0(uint64_t a1, uint64_t a2)
{
  ecs_stack_allocator_push_snapshot(a2);
  uint64_t v4 = v2[10];
  uint64_t v5 = ecs_stack_allocator_allocate(a2, 4 * v4, 4);
  uint64_t v34 = a2;
  if (v4 < 1)
  {
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v39 = v2[7];
    uint64_t v6 = 0;
    if (v39)
    {
      uint64_t v7 = 0;
      uint64_t v8 = 0;
      uint64_t v9 = (void *)v2[9];
      uint64_t v10 = v9[4];
      int v11 = *(unsigned __int8 *)(v2[8] + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v35 = v2[5];
      uint64_t v38 = v2;
      int v37 = v11;
      uint64_t v36 = v10;
      do
      {
        uint64_t v44 = v8;
        uint64_t v12 = (unsigned int *)(v35 + 48 * v7);
        uint64_t v13 = *v12;
        unint64_t v14 = v12[2];
        uint64_t v15 = *((void *)v12 + 5);
        uint64_t v40 = v12[1];
        uint64_t v41 = *((void *)v12 + 4);
        uint64_t v42 = *((void *)v12 + 3);
        id v43 = (uint64_t *)*((void *)v12 + 2);
        if (v11)
        {
          uint64_t v16 = *(os_unfair_lock_s **)(v15 + 376);
          swift_retain();
          os_unfair_lock_lock(v16);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v15 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v10);
        sub_1B62D7F68((uint64_t)(v9 + 6), (uint64_t)v47, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
        uint64_t v17 = v9[4];
        uint64_t v18 = *(void *)(*(void *)(*(void *)(*(void *)(v15 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v9[6] = ecs_stack_allocator_allocate(v17, 48 * v18, 8);
        void v9[7] = v18;
        v9[9] = 0;
        v9[10] = 0;
        v9[8] = 0;
        swift_release();
        uint64_t v19 = sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, v43, v42, v41, (uint64_t)v9);
        if (v20)
        {
          uint64_t v21 = v38;
          uint64_t v10 = v36;
          int v11 = v37;
        }
        else
        {
          uint64_t v21 = v38;
          int v11 = v37;
          if (v13 != v40)
          {
            uint64_t v22 = (float *)(v19 + 16 * v13 + 12);
            uint64_t v23 = v40 - v13;
            uint64_t v10 = v36;
            while (1)
            {
              if (*v22 > 0.00000011921)
              {
                if ((v14 & 0x8000000000000000) != 0 || HIDWORD(v14))
                {
                  uint64_t result = sub_1B6E32BD8();
                  __break(1u);
                  return result;
                }
                *((_DWORD *)v5 + v6++) = v14;
              }
              v22 += 4;
              ++v14;
              if (!--v23) {
                goto LABEL_18;
              }
            }
          }
          uint64_t v10 = v36;
        }
LABEL_18:
        long long v24 = *((_OWORD *)v21 + 1);
        v45[0] = *(_OWORD *)v21;
        v45[1] = v24;
        uint64_t v46 = v21[4];
        uint64_t v8 = v44;
        sub_1B6345178(v9, (unsigned __int16 **)v45, (uint64_t)v47);
        sub_1B634507C((char *)v15);
        ecs_stack_allocator_pop_snapshot(v10);
        if (v11)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v15 + 376));
        }
        swift_release();
        ++v7;
      }
      while (v7 != v39);
    }
  }
  size_t v25 = 4 * v6;
  swift_retain();
  id v26 = (void *)sub_1B62F1868(0, 4 * v6);
  uint64_t v28 = v27;
  swift_unknownObjectRetain();
  swift_release();
  id v29 = objc_msgSend(v26, sel_storageMode);
  uint64_t v30 = 0;
  if (v29 != (id)2)
  {
    uint64_t v31 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v32 = v26;
    uint64_t v30 = &v31[v28];
  }
  memcpy(v30, v5, v25);
  ecs_stack_allocator_pop_snapshot(v34);
  return (uint64_t)v26;
}

void *sub_1B6C6BA78(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v10 = *(void *)(v5 + 80);
  swift_retain();
  uint64_t v62 = 8 * v10;
  int v11 = (void *)sub_1B62F1868(0, 8 * v10);
  uint64_t v13 = v12;
  swift_unknownObjectRetain();
  swift_release();
  id v65 = 0;
  if (objc_msgSend(v11, sel_storageMode) != (id)2)
  {
    unint64_t v14 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v15 = v11;
    id v65 = &v14[v13];
  }
  ecs_stack_allocator_push_snapshot(a5);
  uint64_t v66 = ecs_stack_allocator_allocate(a5, 4 * v10, 8);
  uint64_t v64 = a5;
  uint64_t v63 = v11;
  if (objc_msgSend(a1, sel_storageMode) == (id)2)
  {
    uint64_t v61 = 0;
  }
  else
  {
    uint64_t v16 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v17 = a1;
    uint64_t v61 = &v16[a2];
  }
  if (v10 >= 1)
  {
    uint64_t v69 = *(void *)(v6 + 56);
    if (v69)
    {
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      char v20 = *(void **)(v6 + 72);
      uint64_t v21 = v20[4];
      int v22 = *(unsigned __int8 *)(*(void *)(v6 + 64) + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      long long v23 = *(_OWORD *)(v6 + 16);
      v74[0] = *(_OWORD *)v6;
      v74[1] = v23;
      uint64_t v24 = *(void *)(v6 + 40);
      uint64_t v75 = *(void *)(v6 + 32);
      uint64_t v68 = v24;
      int v67 = v22;
      while (1)
      {
        size_t v25 = (unsigned int *)(v68 + 48 * v18);
        uint64_t v71 = *v25;
        uint64_t v72 = v25[1];
        uint64_t v73 = v19;
        uint64_t v70 = v25[2];
        id v26 = (uint64_t *)*((void *)v25 + 2);
        uint64_t v27 = *((void *)v25 + 3);
        uint64_t v29 = *((void *)v25 + 4);
        uint64_t v28 = *((void *)v25 + 5);
        if (v22)
        {
          uint64_t v30 = *(os_unfair_lock_s **)(v28 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v30);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v21);
        sub_1B62D7F68((uint64_t)(v20 + 6), (uint64_t)v76, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
        uint64_t v31 = v20[4];
        uint64_t v32 = *(void *)(*(void *)(*(void *)(*(void *)(v28 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v20[6] = ecs_stack_allocator_allocate(v31, 48 * v32, 8);
        v20[7] = v32;
        v20[9] = 0;
        v20[10] = 0;
        v20[8] = 0;
        swift_release();
        uint64_t v33 = sub_1B62C9024((uint64_t)&type metadata for ParticleParentID, (uint64_t)&off_1F0F6E0C8, v26, v27, v29, (uint64_t)v20);
        if (v34) {
          break;
        }
        uint64_t v19 = v73;
        if (v71 == v72) {
          goto LABEL_19;
        }
        uint64_t v35 = v72 - v71;
        if ((unint64_t)(v72 - v71) >= 0xC)
        {
          uint64_t v37 = v70;
          uint64_t v38 = v33 + 4 * v71;
          if ((unint64_t)v66 + 4 * v70 - v38 >= 0x20)
          {
            uint64_t v36 = (v35 & 0xFFFFFFFFFFFFFFF8) + v71;
            uint64_t v39 = (_OWORD *)((char *)v66 + 4 * v70 + 16);
            uint64_t v40 = (long long *)(v38 + 16);
            unint64_t v41 = v35 & 0xFFFFFFFFFFFFFFF8;
            do
            {
              long long v42 = *v40;
              *(v39 - 1) = *(v40 - 1);
              *uint64_t v39 = v42;
              v39 += 2;
              v40 += 2;
              v41 -= 8;
            }
            while (v41);
            int v22 = v67;
            if (v35 == (v35 & 0xFFFFFFFFFFFFFFF8)) {
              goto LABEL_27;
            }
          }
          else
          {
            uint64_t v36 = v71;
            int v22 = v67;
          }
        }
        else
        {
          uint64_t v36 = v71;
          int v22 = v67;
          uint64_t v37 = v70;
        }
        id v43 = (_DWORD *)v66 + v36 + v37 - v71;
        uint64_t v44 = v72 - v36;
        long long v45 = (int *)(v33 + 4 * v36);
        do
        {
          int v46 = *v45++;
          *v43++ = v46;
          --v44;
        }
        while (v44);
LABEL_27:
        sub_1B6345178(v20, (unsigned __int16 **)v74, (uint64_t)v76);
        sub_1B634507C((char *)v28);
        ecs_stack_allocator_pop_snapshot(v21);
        if (v22)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 376));
        }
        swift_release();
        if (++v18 == v69) {
          goto LABEL_29;
        }
      }
      uint64_t v19 = v73;
      if (v71 != v72) {
        bzero((char *)v66 + 4 * v70, 4 * (v72 - v71));
      }
LABEL_19:
      int v22 = v67;
      goto LABEL_27;
    }
    uint64_t v47 = v65;
    bzero(v65, v62);
    uint64_t v49 = v10;
    uint64_t v48 = a5;
    uint64_t v50 = v11;
    long long v51 = v66;
    uint64_t v53 = v10 - 1;
    int v52 = v61;
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v47 = v65;
  bzero(v65, v62);
  uint64_t v49 = v10;
  uint64_t v48 = v64;
  uint64_t v50 = v63;
  long long v51 = v66;
  uint64_t v53 = v10 - 1;
  int v52 = v61;
  if (v10)
  {
LABEL_32:
    uint64_t v55 = 0;
    do
    {
      uint64_t v58 = *(unsigned int *)&v52[4 * v55];
      int v59 = *((_DWORD *)v51 + v58);
      if (v55 < 1)
      {
        LODWORD(v60) = -1;
        LODWORD(v56) = -1;
        if (v55 < v53) {
          goto LABEL_33;
        }
      }
      else
      {
        uint64_t v60 = *(unsigned int *)&v52[4 * v55 - 4];
        if (*((_DWORD *)v51 + v60) != v59) {
          LODWORD(v60) = -1;
        }
        if (v55 < v53)
        {
LABEL_33:
          uint64_t v56 = *(unsigned int *)&v52[4 * v55 + 4];
          if (*((_DWORD *)v51 + v56) != v59) {
            LODWORD(v56) = -1;
          }
          goto LABEL_35;
        }
        LODWORD(v56) = -1;
      }
LABEL_35:
      ++v55;
      uint64_t v57 = &v47[8 * v58];
      *(_DWORD *)uint64_t v57 = v60;
      *((_DWORD *)v57 + 1) = v56;
    }
    while (v49 != v55);
  }
  ecs_stack_allocator_pop_snapshot(v48);
  return v50;
}

uint64_t sub_1B6C6BF48(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  uint64_t v10 = *(void *)(a2 + 640);
  if (v10)
  {
    uint64_t v16 = a9;
    uint64_t v17 = a10;
    sub_1B62D7F68(a2 + 360, (uint64_t)v34, (unint64_t *)&qword_1EB97DAB0, (uint64_t)&type metadata for BufferSlice);
    sub_1B62D7F68((uint64_t)v34, (uint64_t)v35, (unint64_t *)&qword_1EB97DAB0, (uint64_t)&type metadata for BufferSlice);
    uint64_t v18 = v35[0];
    if (v35[0])
    {
      uint64_t v29 = a6;
      uint64_t v19 = v35[1];
      uint64_t v20 = v35[2];
      uint64_t v21 = a8;
      if (*(unsigned char *)(a2 + 272)) {
        uint64_t v22 = *(void *)(a2 + 448);
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v24 = *(void *)(a2 + 288);
      uint64_t v25 = *(void *)(a2 + 304);
      uint64_t v26 = v24 + v25 * v22;
      swift_unknownObjectRetain();
      sub_1B63846D0((uint64_t)v34);
      uint64_t v27 = swift_unknownObjectRetain();
      sub_1B6D0E058(v27, v26, v25, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B6D0E058(v18, v19, v20, 0, 5, ObjectType);
      sub_1B62D8C10((uint64_t)v34);
      a8 = v21;
      uint64_t v16 = a9;
      a6 = v29;
      uint64_t v17 = a10;
    }
    else
    {
      swift_unknownObjectRetain();
    }
    swift_getObjectType();
    sub_1B6B59478(a3, a4, a5, 0);
    objc_msgSend(a1, sel_setBytes_length_atIndex_, a6, 48, 2);
    objc_msgSend(a1, sel_setComputePipelineState_, v10);
    sub_1B63895A4(v17, (uint64_t)v33);
    sub_1B6B59A20(a7, a8, v16, 0, v33[0], v33[1], v33[2]);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B6C6C168(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (*(void *)(a2 + 616))
  {
    uint64_t v22 = (void *)result;
    uint64_t v34 = *(void *)(a2 + 616);
    uint64_t ObjectType = swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B6B59478(a3, a4, a5, 0);
    sub_1B6B59478(a6, a7, a8, 0);
    sub_1B6B59478(a9, a10, a11, 0);
    sub_1B62D7F68(a2 + 360, (uint64_t)v36, (unint64_t *)&qword_1EB97DAB0, (uint64_t)&type metadata for BufferSlice);
    sub_1B62D7F68((uint64_t)v36, (uint64_t)v37, (unint64_t *)&qword_1EB97DAB0, (uint64_t)&type metadata for BufferSlice);
    uint64_t v24 = v37[0];
    if (v37[0])
    {
      uint64_t v26 = v37[1];
      uint64_t v25 = v37[2];
      if (*(unsigned char *)(a2 + 272)) {
        uint64_t v27 = *(void *)(a2 + 448);
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v28 = *(void *)(a2 + 304);
      uint64_t v29 = *(void *)(a2 + 288) + v28 * v27;
      sub_1B63846D0((uint64_t)v36);
      uint64_t v30 = swift_unknownObjectRetain();
      sub_1B6D0E058(v30, v29, v28, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B6D0E058(v24, v26, v25, 0, 5, ObjectType);
      sub_1B62D8C10((uint64_t)v36);
    }
    uint64_t v31 = 4 * a12 + 15;
    if (v31 <= 0) {
      uint64_t v32 = -(-v31 & 0xF);
    }
    else {
      uint64_t v32 = v31 & 0xF;
    }
    uint64_t v33 = v31 - v32;
    objc_msgSend(v22, sel_setThreadgroupMemoryLength_atIndex_, v31 - v32, 0);
    objc_msgSend(v22, sel_setThreadgroupMemoryLength_atIndex_, v33, 1);
    objc_msgSend(v22, sel_setComputePipelineState_, v34);
    sub_1B63895A4(a12, (uint64_t)v35);
    sub_1B6B59A20(a13, a14, a15, 0, v35[0], v35[1], v35[2]);
    return swift_unknownObjectRelease();
  }
  return result;
}

uint64_t sub_1B6C6C3BC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, _DWORD *a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  uint64_t v23 = *(void *)(a2 + 624);
  if (!v23) {
    return result;
  }
  uint64_t v25 = a4;
  uint64_t v27 = (void *)result;
  uint64_t v28 = 1;
  uint64_t v53 = 1 << -(char)__clz(a4 - 1);
  uint64_t v55 = a2 + 360;
  swift_unknownObjectRetain();
  uint64_t v29 = 2;
  uint64_t v60 = 12;
  uint64_t v30 = a3;
  uint64_t v51 = v23;
  uint64_t v52 = a3;
  uint64_t v49 = v25;
  uint64_t v50 = a5;
  while (1)
  {
    uint64_t v37 = v28;
    v30 *= 2;
    if (!v25) {
      break;
    }
    if (v53 < v30) {
      goto LABEL_15;
    }
LABEL_10:
    if (v30 < 0 || HIDWORD(v30))
    {
      uint64_t result = sub_1B6E32BD8();
      __break(1u);
      return result;
    }
    *a5 = v30;
    uint64_t ObjectType = swift_getObjectType();
    sub_1B6B59478(a6, a7, a8, 0);
    uint64_t v59 = v29;
    sub_1B6B59478(a9, a10, a11, 0);
    sub_1B6B59478(a12, a13, a14, 0);
    sub_1B6B59478(a15, a16, a17, 0);
    sub_1B62D7F68(v55, (uint64_t)v63, (unint64_t *)&qword_1EB97DAB0, (uint64_t)&type metadata for BufferSlice);
    sub_1B62D7F68((uint64_t)v63, (uint64_t)v64, (unint64_t *)&qword_1EB97DAB0, (uint64_t)&type metadata for BufferSlice);
    uint64_t v39 = v64[0];
    if (v64[0])
    {
      if (*(unsigned char *)(a2 + 272)) {
        uint64_t v31 = *(void *)(a2 + 448);
      }
      else {
        uint64_t v31 = 0;
      }
      uint64_t v33 = v64[1];
      uint64_t v32 = v64[2];
      uint64_t v34 = *(void *)(a2 + 304);
      uint64_t v35 = *(void *)(a2 + 288) + v34 * v31;
      sub_1B63846D0((uint64_t)v63);
      uint64_t v36 = swift_unknownObjectRetain();
      sub_1B6D0E058(v36, v35, v34, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B6D0E058(v39, v33, v32, 0, 5, ObjectType);
      sub_1B62D8C10((uint64_t)v63);
      uint64_t v23 = v51;
      a3 = v52;
      uint64_t v25 = v49;
      a5 = v50;
    }
    objc_msgSend(v27, sel_setBytes_length_atIndex_, a5, 4, 8);
    objc_msgSend(v27, sel_setComputePipelineState_, v23);
    sub_1B63895A4(a3, (uint64_t)&v65);
    sub_1B6B59A20(a18, a19, a20, v60, v65, v66, v67);
    v60 += 12;
    uint64_t v28 = v59;
    uint64_t v29 = v37;
  }
  if (v30 <= 1) {
    goto LABEL_10;
  }
LABEL_15:
  uint64_t v40 = *(void *)(a2 + 632);
  if (v40)
  {
    uint64_t v41 = swift_getObjectType();
    swift_unknownObjectRetain();
    sub_1B6B59478(a6, a7, a8, 0);
    sub_1B6B59478(a12, a13, a14, 0);
    sub_1B6B59478(a21, a22, a23, 0);
    sub_1B62D7F68(v55, (uint64_t)v62, (unint64_t *)&qword_1EB97DAB0, (uint64_t)&type metadata for BufferSlice);
    sub_1B62D7F68((uint64_t)v62, (uint64_t)&v65, (unint64_t *)&qword_1EB97DAB0, (uint64_t)&type metadata for BufferSlice);
    uint64_t v42 = v65;
    if (v65)
    {
      uint64_t v43 = v66;
      uint64_t v44 = v67;
      if (*(unsigned char *)(a2 + 272)) {
        uint64_t v45 = *(void *)(a2 + 448);
      }
      else {
        uint64_t v45 = 0;
      }
      uint64_t v46 = *(void *)(a2 + 304);
      uint64_t v47 = *(void *)(a2 + 288) + v46 * v45;
      sub_1B63846D0((uint64_t)v62);
      uint64_t v48 = swift_unknownObjectRetain();
      sub_1B6D0E058(v48, v47, v46, 0, 4, v41);
      swift_unknownObjectRelease();
      sub_1B6D0E058(v42, v43, v44, 0, 5, v41);
      sub_1B62D8C10((uint64_t)v62);
      a3 = v52;
    }
    objc_msgSend(v27, sel_setComputePipelineState_, v40);
    sub_1B63895A4(a3, (uint64_t)v61);
    sub_1B6B59A20(a18, a19, a20, 0, v61[0], v61[1], v61[2]);
    swift_unknownObjectRelease();
  }
  return swift_unknownObjectRelease();
}

uint64_t sub_1B6C6C8AC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12 = *(void *)(a2 + 648);
  if (v12)
  {
    uint64_t v16 = a11;
    uint64_t v17 = a12;
    uint64_t v18 = a10;
    sub_1B62D7F68(a2 + 360, (uint64_t)v36, (unint64_t *)&qword_1EB97DAB0, (uint64_t)&type metadata for BufferSlice);
    sub_1B62D7F68((uint64_t)v36, (uint64_t)v37, (unint64_t *)&qword_1EB97DAB0, (uint64_t)&type metadata for BufferSlice);
    uint64_t v19 = v37[0];
    if (v37[0])
    {
      uint64_t v29 = a8;
      uint64_t v20 = v37[1];
      uint64_t v21 = v37[2];
      if (*(unsigned char *)(a2 + 272)) {
        uint64_t v22 = *(void *)(a2 + 448);
      }
      else {
        uint64_t v22 = 0;
      }
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v24 = *(void *)(a2 + 288);
      uint64_t v25 = *(void *)(a2 + 304);
      uint64_t v26 = v24 + v25 * v22;
      swift_unknownObjectRetain();
      sub_1B63846D0((uint64_t)v36);
      uint64_t v27 = swift_unknownObjectRetain();
      sub_1B6D0E058(v27, v26, v25, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B6D0E058(v19, v20, v21, 0, 5, ObjectType);
      sub_1B62D8C10((uint64_t)v36);
      uint64_t v16 = a11;
      uint64_t v18 = a10;
      uint64_t v17 = a12;
      a8 = v29;
    }
    else
    {
      swift_unknownObjectRetain();
    }
    swift_getObjectType();
    sub_1B6B59478(a3, a4, a5, 0);
    sub_1B6B59478(a6, a7, a8, 0);
    objc_msgSend(a1, sel_setComputePipelineState_, v12);
    sub_1B63895A4(v17, (uint64_t)v35);
    sub_1B6B59A20(a9, v18, v16, 0, v35[0], v35[1], v35[2]);
    return swift_unknownObjectRelease();
  }
  else
  {
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B6C6CAC8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v129 = *MEMORY[0x1E4F143B8];
  uint64_t v6 = a2[76];
  float v7 = ceilf(log2f((float)a4));
  float v8 = v7 - log2f((float)a3);
  if ((uint64_t)v8 + 1 > 1) {
    unint64_t v9 = (uint64_t)v8 + 1;
  }
  else {
    unint64_t v9 = 1;
  }
  swift_unknownObjectRetain();
  swift_retain();
  uint64_t v10 = sub_1B62F1868(0, 12 * v9);
  uint64_t v12 = v11;
  uint64_t v14 = v13;
  swift_unknownObjectRetain();
  swift_release();
  if (a3 < 0 || HIDWORD(a3) || (uint64_t v63 = v14, v64 = v12, v66 = a3, HIDWORD(v9)))
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  else
  {
    int v65 = v9;
    id v15 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
    uint64_t ObjectType = swift_getObjectType();
    uint64_t v17 = (void *)sub_1B6E31768();
    objc_msgSend(v15, sel_pushDebugGroup_, v17);

    uint64_t v18 = a2[5];
    char v19 = *((unsigned char *)a2 + 48);
    char v20 = *((unsigned char *)a2 + 49);
    uint64_t v67 = *a2;
    char v21 = *((unsigned char *)a2 + 50);
    uint64_t v70 = v18;
    uint64_t v22 = a2[7];
    char v71 = v19;
    int v23 = *((_DWORD *)a2 + 16);
    char v72 = v20;
    char v24 = *((unsigned char *)a2 + 68);
    char v73 = v21;
    uint64_t v25 = a2[9];
    uint64_t v74 = v22;
    LOBYTE(v22) = *((unsigned char *)a2 + 80);
    int v75 = v23;
    uint64_t v26 = a2[11];
    int v27 = *((_DWORD *)a2 + 24);
    char v76 = v24;
    uint64_t v28 = a2[15];
    uint64_t v77 = v25;
    LOBYTE(v25) = *((unsigned char *)a2 + 128);
    char v78 = v22;
    LOBYTE(v22) = *((unsigned char *)a2 + 129);
    uint64_t v79 = v26;
    LOBYTE(v26) = *((unsigned char *)a2 + 130);
    uint64_t v82 = v28;
    uint64_t v29 = a2[19];
    char v83 = v25;
    LOBYTE(v25) = *((unsigned char *)a2 + 160);
    char v84 = v22;
    char v85 = v26;
    uint64_t v30 = a2[21];
    uint64_t v31 = a2[22];
    uint64_t v87 = v29;
    LOBYTE(v29) = *((unsigned char *)a2 + 184);
    char v88 = v25;
    uint64_t v32 = a2[26];
    uint64_t v89 = v30;
    uint64_t v90 = v31;
    LOBYTE(v30) = *((unsigned char *)a2 + 216);
    uint64_t v33 = a2[29];
    char v91 = v29;
    LOBYTE(v29) = *((unsigned char *)a2 + 240);
    uint64_t v93 = v32;
    uint64_t v34 = a2[33];
    char v94 = v30;
    int v35 = *((unsigned __int8 *)a2 + 272);
    uint64_t v96 = v33;
    uint64_t v36 = a2[35];
    char v97 = v29;
    uint64_t v99 = v34;
    uint64_t v37 = a2[44];
    uint64_t v38 = a2[45];
    uint64_t v101 = v36;
    uint64_t v106 = v37;
    int v115 = *((_DWORD *)a2 + 114);
    uint64_t v39 = a2[77];
    long long v86 = *(_OWORD *)(a2 + 17);
    long long v92 = *((_OWORD *)a2 + 12);
    uint64_t v95 = *(uint64_t *)((char *)a2 + 220);
    long long v98 = *(_OWORD *)(a2 + 31);
    long long v40 = *((_OWORD *)a2 + 18);
    long long v41 = *((_OWORD *)a2 + 19);
    long long v102 = v40;
    long long v103 = v41;
    long long v42 = *((_OWORD *)a2 + 21);
    long long v104 = *((_OWORD *)a2 + 20);
    long long v105 = v42;
    long long v43 = *((_OWORD *)a2 + 25);
    long long v110 = *((_OWORD *)a2 + 24);
    long long v111 = v43;
    long long v44 = *((_OWORD *)a2 + 27);
    long long v112 = *((_OWORD *)a2 + 26);
    long long v113 = v44;
    long long v45 = *((_OWORD *)a2 + 30);
    long long v116 = *((_OWORD *)a2 + 29);
    long long v117 = v45;
    long long v46 = *((_OWORD *)a2 + 32);
    long long v118 = *((_OWORD *)a2 + 31);
    long long v119 = v46;
    long long v47 = *((_OWORD *)a2 + 34);
    long long v48 = *((_OWORD *)a2 + 35);
    long long v49 = *((_OWORD *)a2 + 36);
    long long v50 = *((_OWORD *)a2 + 37);
    long long v51 = *((_OWORD *)a2 + 39);
    long long v52 = *((_OWORD *)a2 + 40);
    long long v120 = *((_OWORD *)a2 + 33);
    long long v121 = v47;
    long long v122 = v48;
    long long v123 = v49;
    long long v124 = v50;
    uint64_t v126 = v39;
    long long v127 = v51;
    long long v128 = v52;
    uint64_t v53 = a2[46];
    uint64_t v54 = a2[47];
    long long v55 = *(_OWORD *)(a2 + 3);
    long long v56 = *(_OWORD *)(a2 + 13);
    uint64_t v57 = a2[56];
    long long v68 = *(_OWORD *)(a2 + 1);
    long long v69 = v55;
    int v80 = v27;
    long long v81 = v56;
    char v100 = v35;
    uint64_t v107 = v38;
    uint64_t v108 = v53;
    uint64_t v109 = v54;
    uint64_t v114 = v57;
    uint64_t v125 = v6;
    if (v38)
    {
      if (v35) {
        uint64_t v58 = v57;
      }
      else {
        uint64_t v58 = 0;
      }
      uint64_t v59 = v41;
      uint64_t v60 = v40 + v58 * v41;
      sub_1B62EEA00((uint64_t)&v67);
      swift_unknownObjectRetain();
      uint64_t v61 = swift_unknownObjectRetain();
      sub_1B6D0E058(v61, v60, v59, 0, 4, ObjectType);
      swift_unknownObjectRelease();
      sub_1B6D0E058(v38, v53, v54, 0, 5, ObjectType);
      swift_unknownObjectRelease();
      sub_1B62E20E8((uint64_t)&v67);
    }
    sub_1B6B59478(v10, v64, v63, 0);
    objc_msgSend(v15, sel_setBytes_length_atIndex_, &v66, 4, 2);
    objc_msgSend(v15, sel_setBytes_length_atIndex_, &v65, 4, 3);
    sub_1B6B59510(v6);
    objc_msgSend(v15, sel_popDebugGroup);
    swift_unknownObjectRelease();
    swift_unknownObjectRelease();
    return v10;
  }
  return result;
}

uint64_t sub_1B6C6CF60(__n128 a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v12 = a4;
  uint64_t v28 = *MEMORY[0x1E4F143B8];
  uint64_t v13 = 4 * *(void *)(a3 + 464);
  swift_retain();
  uint64_t v14 = sub_1B62F1868(0, v13);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_unknownObjectRetain();
  swift_release();
  if (v12)
  {
    v25[0] = (char)a4;
    __n128 v26 = a1;
    char v27 = 0;
    char v19 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
    char v20 = (void *)sub_1B6E31768();
    objc_msgSend(v19, sel_pushDebugGroup_, v20);

    sub_1B6C6BF48(v19, a3, v14, v16, v18, (uint64_t)v25, a5, a6, a7, a8);
    objc_msgSend(v19, sel_popDebugGroup);
    swift_unknownObjectRelease();
    return v14;
  }
  else
  {
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B6C6D134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v47 = *MEMORY[0x1E4F143B8];
  uint64_t v40 = *(void *)(a2 + 464);
  swift_retain();
  uint64_t v10 = sub_1B62F1868(0, 4 * v40);
  uint64_t v35 = v11;
  uint64_t v36 = v10;
  uint64_t v41 = v12;
  swift_unknownObjectRetain();
  swift_release();
  swift_retain();
  uint64_t v37 = sub_1B62F1868(0, 4 * v40);
  uint64_t v38 = v13;
  uint64_t v39 = v14;
  swift_unknownObjectRetain();
  swift_release();
  swift_retain();
  uint64_t v15 = sub_1B62F1868(0, 4 * v40);
  uint64_t v17 = v16;
  uint64_t v32 = v18;
  swift_unknownObjectRetain();
  swift_release();
  swift_retain();
  uint64_t v19 = sub_1B62F1868(0, 4 * v40);
  uint64_t v21 = v20;
  uint64_t v29 = v22;
  uint64_t v30 = v20;
  uint64_t v23 = v22;
  swift_unknownObjectRetain();
  swift_release();
  int v46 = 0;
  char v24 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
  uint64_t v25 = (void *)sub_1B6E31768();
  objc_msgSend(v24, sel_pushDebugGroup_, v25);

  sub_1B6C6C168((uint64_t)v24, a2, a3, a4, a5, v15, v17, v32, v19, v21, v23, a9, a6, a7, a8);
  objc_msgSend(v24, sel_popDebugGroup);
  swift_unknownObjectRelease();
  __n128 v26 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
  char v27 = (void *)sub_1B6E31768();
  objc_msgSend(v26, sel_pushDebugGroup_, v27);

  sub_1B6C6C3BC((uint64_t)v26, a2, a9, v40, &v46, v37, v39, v38, a3, a4, a5, v15, v17, v32, v19, v30, v29, a6, a7,
    a8,
    v36,
    v35,
    v41);
  objc_msgSend(v26, sel_popDebugGroup);
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  swift_unknownObjectRelease();
  return v36;
}

uint64_t sub_1B6C6D45C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v13 = 8 * *(void *)(a5 + 464);
  swift_retain();
  uint64_t v14 = sub_1B62F1868(0, v13);
  uint64_t v16 = v15;
  uint64_t v18 = v17;
  swift_unknownObjectRetain();
  swift_release();
  uint64_t v19 = (void *)sub_1B6802298(0x657475706D6F43, 0xE700000000000000, 0);
  uint64_t v20 = (void *)sub_1B6E31768();
  objc_msgSend(v19, sel_pushDebugGroup_, v20);

  sub_1B6C6C8AC(v19, a5, a1, a2, a3, v14, v16, v18, a6, a7, a8, a9);
  objc_msgSend(v19, sel_popDebugGroup);
  swift_unknownObjectRelease();
  return v14;
}

uint64_t sub_1B6C6D5A4(uint64_t a1, char a2, uint64_t a3, uint64_t *a4, uint64_t a5, float a6, float32x4_t a7)
{
  unint64_t v13 = *(void *)(a1 + 24);
  uint64_t v15 = *(void *)(a1 + 48);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v16 = sub_1B67A819C();
  if (v17)
  {
LABEL_43:
    sub_1B6E32BE8();
    __break(1u);
    JUMPOUT(0x1B6C6D9B0);
  }
  uint64_t v18 = v16;
  switch(a2)
  {
    case 1:
    case 2:
      uint64_t result = sub_1B67A8624();
      uint64_t v20 = v14 - v15;
      if (v21)
      {
        if (v14 != v15)
        {
          for (uint64_t i = (float *)(v18 + 16 * v15 + 12); ; i += 4)
          {
            if (*i > 0.00000011921)
            {
              if ((v13 & 0x8000000000000000) != 0 || HIDWORD(v13)) {
                goto LABEL_42;
              }
              uint64_t v39 = *a4;
              uint64_t v40 = 4 * *a4;
              *(_DWORD *)(a3 + v40) = v13;
              *(float *)(a5 + v40) = (float)(uint64_t)v13 * a6;
              *a4 = v39 + 1;
            }
            ++v13;
            if (!--v20) {
              return result;
            }
          }
        }
      }
      else if (v14 != v15)
      {
        uint64_t v22 = (float *)(v18 + 16 * v15 + 12);
        for (uint64_t j = (float *)(result + 4 * v15); ; ++j)
        {
          if (*v22 > 0.00000011921)
          {
            if ((v13 & 0x8000000000000000) != 0 || HIDWORD(v13)) {
              goto LABEL_42;
            }
            uint64_t v24 = *a4;
            uint64_t v25 = 4 * *a4;
            *(_DWORD *)(a3 + v25) = v13;
            *(float *)(a5 + v25) = *j * a6;
            *a4 = v24 + 1;
          }
          v22 += 4;
          ++v13;
          if (!--v20) {
            return result;
          }
        }
      }
      return result;
    case 3:
    case 4:
      uint64_t result = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, *(uint64_t **)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 16));
      uint64_t v26 = v14 - v15;
      if (v14 == v15) {
        return result;
      }
      char v27 = (float *)(16 * v15 + v18 + 12);
      for (k = (float32x4_t *)(result + 16 * v15); ; ++k)
      {
        if (*v27 > 0.00000011921)
        {
          if ((v13 & 0x8000000000000000) != 0 || HIDWORD(v13)) {
            goto LABEL_42;
          }
          uint64_t v29 = *a4;
          uint64_t v30 = 4 * *a4;
          *(_DWORD *)(a3 + v30) = v13;
          int8x16_t v31 = (int8x16_t)vmulq_f32(*k, a7);
          *(float *)(a5 + v30) = vaddv_f32(vadd_f32(*(float32x2_t *)v31.i8, (float32x2_t)*(_OWORD *)&vextq_s8(v31, v31, 8uLL)))
                               * a6;
          *a4 = v29 + 1;
        }
        v27 += 4;
        ++v13;
        if (!--v26) {
          return result;
        }
      }
    case 5:
    case 6:
      uint64_t result = sub_1B67A8454();
      uint64_t v32 = v14 - v15;
      if (v33)
      {
        if (v14 != v15)
        {
          uint64_t v41 = (float *)(v18 + 16 * v15 + 12);
          do
          {
            if (*v41 > 0.00000011921)
            {
              if ((v13 & 0x8000000000000000) != 0 || HIDWORD(v13))
              {
LABEL_42:
                sub_1B6E32BD8();
                __break(1u);
                goto LABEL_43;
              }
              uint64_t v42 = *a4;
              uint64_t v43 = 4 * *a4;
              *(_DWORD *)(a3 + v43) = v13;
              *(float *)(a5 + v43) = (float)(uint64_t)v13 * a6;
              *a4 = v42 + 1;
            }
            v41 += 4;
            ++v13;
            --v32;
          }
          while (v32);
        }
      }
      else if (v14 != v15)
      {
        uint64_t v34 = (float *)(v18 + 16 * v15 + 12);
        uint64_t v35 = (unsigned int *)(result + 4 * v15);
        do
        {
          if (*v34 > 0.00000011921)
          {
            if ((v13 & 0x8000000000000000) != 0 || HIDWORD(v13)) {
              goto LABEL_42;
            }
            uint64_t v36 = *a4;
            uint64_t v37 = 4 * *a4;
            *(_DWORD *)(a3 + v37) = v13;
            *(float *)(a5 + v37) = (float)*v35 * a6;
            *a4 = v36 + 1;
          }
          v34 += 4;
          ++v13;
          ++v35;
          --v32;
        }
        while (v32);
      }
      return result;
    default:
      goto LABEL_43;
  }
}

void sub_1B6C6D9CC(char a1@<W0>, uint64_t a2@<X1>, void *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v40 = v4[10];
  uint64_t v8 = 4 * v40;
  uint64_t v42 = ecs_stack_allocator_allocate(a2, 4 * v40, 4);
  uint64_t v41 = ecs_stack_allocator_allocate(a2, 4 * v40, 4);
  uint64_t v47 = 0;
  char v37 = a1;
  float v9 = 1.0;
  if ((a1 - 2) <= 4u) {
    float v9 = flt_1B6EBB800[(char)(a1 - 2)];
  }
  if (v40 >= 1 && (uint64_t v10 = v4[7]) != 0)
  {
    char v33 = a3;
    __n128 v11 = a4;
    v11.n128_u32[3] = 0;
    float32x4_t v39 = (float32x4_t)v11;
    uint64_t v12 = (void *)v4[9];
    uint64_t v13 = v12[4];
    uint64_t v34 = v4[8];
    uint64_t v35 = v13;
    int v46 = *(unsigned __int8 *)(v34 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
    uint64_t v14 = (uint64_t *)(v4[5] + 24);
    uint64_t v36 = v4;
    do
    {
      uint64_t v45 = v10;
      uint64_t v16 = *((unsigned int *)v14 - 6);
      uint64_t v15 = *((unsigned int *)v14 - 5);
      uint64_t v17 = *((unsigned int *)v14 - 4);
      uint64_t v18 = *(v14 - 1);
      uint64_t v19 = v14[2];
      uint64_t v43 = v14[1];
      uint64_t v44 = *v14;
      if (v46)
      {
        uint64_t v20 = *(os_unfair_lock_s **)(v19 + 376);
        swift_retain();
        os_unfair_lock_lock(v20);
        os_unfair_lock_lock(*(os_unfair_lock_t *)(v19 + 344));
      }
      else
      {
        swift_retain();
      }
      ecs_stack_allocator_push_snapshot(v13);
      sub_1B62D7F68((uint64_t)(v12 + 6), (uint64_t)v50, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
      uint64_t v21 = v12[4];
      uint64_t v22 = *(void *)(*(void *)(*(void *)(*(void *)(v19 + 40) + 16) + 32) + 16) + 1;
      swift_retain();
      long long v12[6] = ecs_stack_allocator_allocate(v21, 48 * v22, 8);
      v12[7] = v22;
      v12[9] = 0;
      v12[10] = 0;
      v12[8] = 0;
      swift_release();
      v51[0] = v34;
      v51[1] = v19;
      _OWORD v51[2] = v12;
      v51[3] = v17;
      v51[4] = (v15 - v16 + v17);
      v51[5] = v40;
      v51[6] = v16;
      v51[7] = v15;
      v51[8] = 0;
      v51[9] = 0;
      char v52 = 1;
      uint64_t v53 = v18;
      uint64_t v54 = v44;
      uint64_t v55 = v43;
      sub_1B6C6D5A4((uint64_t)v51, v37, (uint64_t)v41, &v47, (uint64_t)v42, v9, v39);
      long long v23 = *((_OWORD *)v36 + 1);
      v48[0] = *(_OWORD *)v36;
      v48[1] = v23;
      uint64_t v49 = v36[4];
      sub_1B6345178(v12, (unsigned __int16 **)v48, (uint64_t)v50);
      if (*(void *)(v12[13] + 16))
      {
        uint64_t v24 = swift_bridgeObjectRetain();
        sub_1B639147C(v24, v19);
        swift_bridgeObjectRelease();
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        uint64_t v26 = v12[13];
        if (isUniquelyReferenced_nonNull_native)
        {
          sub_1B6399BB8(0, *(void *)(v26 + 16));
        }
        else
        {
          char v27 = (void *)MEMORY[0x1E4FBC860];
          if (*(void *)(v26 + 24) >= 2uLL)
          {
            sub_1B681C594();
            char v27 = (void *)swift_allocObject();
            size_t v28 = j__malloc_size(v27);
            v27[2] = 0;
            v27[3] = 2 * ((uint64_t)(v28 - 32) / 72);
          }
          v12[13] = v27;
          swift_bridgeObjectRelease();
        }
        if (*(unsigned __int8 *)(v12[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
        {
          uint64_t v29 = *(char **)(v19 + 232);
          uint64_t v30 = *(char **)(v19 + 256);
          if (v29 == v30)
          {
            int8x16_t v31 = *(char **)(v19 + 240);
          }
          else
          {
            sub_1B666018C(v30, v29);
            uint64_t v30 = *(char **)(v19 + 232);
            int8x16_t v31 = *(char **)(v19 + 240);
            if (v31 == v30)
            {
              int8x16_t v31 = 0;
              uint64_t v30 = 0;
              *(void *)(v19 + 232) = 0;
              *(void *)(v19 + 240) = 0;
            }
          }
          *(void *)(v19 + 248) = v31;
          *(void *)(v19 + 256) = v30;
        }
      }
      uint64_t v13 = v35;
      ecs_stack_allocator_pop_snapshot(v35);
      if (v46)
      {
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 344));
        os_unfair_lock_unlock(*(os_unfair_lock_t *)(v19 + 376));
      }
      swift_release();
      v14 += 6;
      uint64_t v10 = v45 - 1;
    }
    while (v45 != 1);
    uint64_t v32 = v47;
    uint64_t v8 = 4 * v40;
    a3 = v33;
  }
  else
  {
    uint64_t v32 = 0;
  }
  *a3 = v42;
  a3[1] = v8 >> 2;
  a3[2] = v41;
  a3[3] = v8 >> 2;
  a3[4] = v32;
}

uint64_t sub_1B6C6DE1C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v8 = 4 * a4;
  ecs_stack_allocator_push_snapshot(a5);
  ecs_stack_allocator_allocate(a5, v8, 8);
  swift_retain();
  float v9 = (void *)sub_1B62F1868(0, v8);
  uint64_t v11 = v10;
  swift_unknownObjectRetain();
  swift_release();
  id v12 = objc_msgSend(v9, sel_storageMode);
  uint64_t v13 = 0;
  if (v12 != (id)2)
  {
    id v14 = objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
    id v15 = v9;
    uint64_t v13 = (uint64_t)v14 + v11;
  }
  if ((a4 & 0x8000000000000000) != 0 || HIDWORD(a4))
  {
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  else
  {
    radix_sort_float_with_input_indices(a2, v13);
    ecs_stack_allocator_pop_snapshot(a5);
    return (uint64_t)v9;
  }
  return result;
}

uint64_t sub_1B6C6DFC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = sub_1B62C9024((uint64_t)&type metadata for ParticleParentID, (uint64_t)&off_1F0F6E0C8, *(uint64_t **)(a1 + 88), *(void *)(a1 + 96), *(void *)(a1 + 104), *(void *)(a1 + 16));
  if ((v7 & 1) == 0)
  {
    uint64_t v8 = *(void *)(a1 + 48);
    uint64_t v9 = *(void *)(a1 + 56);
    unint64_t v10 = v9 - v8;
    if (v9 != v8)
    {
      float v11 = (float)*(uint64_t *)(a1 + 40);
      if (v10 < 8) {
        goto LABEL_12;
      }
      unint64_t v12 = a2 + 4 * (v8 + a3);
      unint64_t v13 = result + 4 * v8;
      if (v12 < result + 4 * v9 && v13 < a2 + 4 * (v9 + a3)) {
        goto LABEL_12;
      }
      v8 += v10 & 0xFFFFFFFFFFFFFFF8;
      id v15 = (float32x4_t *)(v12 + 16);
      uint64_t v16 = (uint32x4_t *)(v13 + 16);
      unint64_t v17 = v10 & 0xFFFFFFFFFFFFFFF8;
      do
      {
        float32x4_t v18 = vaddq_f32(*v15, vmulq_n_f32(vcvtq_f32_u32(*v16), v11));
        v15[-1] = vaddq_f32(v15[-1], vmulq_n_f32(vcvtq_f32_u32(v16[-1]), v11));
        *id v15 = v18;
        v15 += 2;
        v16 += 2;
        v17 -= 8;
      }
      while (v17);
      if (v10 != (v10 & 0xFFFFFFFFFFFFFFF8))
      {
LABEL_12:
        uint64_t v19 = (float *)(a2 + 4 * (v8 + a3));
        uint64_t v20 = v9 - v8;
        uint64_t v21 = (unsigned int *)(result + 4 * v8);
        do
        {
          unsigned int v22 = *v21++;
          *uint64_t v19 = *v19 + (float)(v11 * (float)v22);
          ++v19;
          --v20;
        }
        while (v20);
      }
    }
  }
  return result;
}

id sub_1B6C6E0F0(void *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  id result = objc_msgSend(a1, sel_storageMode);
  if (result == (id)2)
  {
    float v11 = 0;
    if (!a3) {
      return result;
    }
    goto LABEL_5;
  }
  unint64_t v12 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id result = a1;
  float v11 = &v12[a2];
  if (a3)
  {
LABEL_5:
    unint64_t v13 = 0;
    uint64_t v14 = a3 - 1;
    while (1)
    {
      uint64_t v15 = *(unsigned int *)&v11[4 * v13];
      if (v15) {
        break;
      }
      if ((v13 & 0x8000000000000000) != 0 || HIDWORD(v13))
      {
LABEL_17:
        id result = (id)sub_1B6E32BD8();
        __break(1u);
        return result;
      }
      *a5 = v13;
      if (v14 == *(_DWORD *)&v11[4 * v13]) {
        goto LABEL_13;
      }
LABEL_6:
      if (a3 == ++v13) {
        return result;
      }
    }
    if (v14 != v15) {
      goto LABEL_6;
    }
LABEL_13:
    if ((v13 & 0x8000000000000000) != 0 || HIDWORD(v13)) {
      goto LABEL_17;
    }
    *a4 = v13;
    goto LABEL_6;
  }
  return result;
}

unint64_t sub_1B6C6E260()
{
  unint64_t result = qword_1EB94A178;
  if (!qword_1EB94A178)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB94A178);
  }
  return result;
}

ValueMetadata *type metadata accessor for ParticleSortModeSet.Iterator()
{
  return &type metadata for ParticleSortModeSet.Iterator;
}

ValueMetadata *type metadata accessor for ParticleSortModeSet()
{
  return &type metadata for ParticleSortModeSet;
}

ValueMetadata *type metadata accessor for ParticleSortMode()
{
  return &type metadata for ParticleSortMode;
}

unint64_t sub_1B6C6E310()
{
  unint64_t result = qword_1E9DD7B20;
  if (!qword_1E9DD7B20)
  {
    sub_1B62D8964(255, &qword_1E9DD7B28, (uint64_t)&type metadata for ParticleSortMode, MEMORY[0x1E4FBB320]);
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7B20);
  }
  return result;
}

unint64_t sub_1B6C6E390()
{
  unint64_t result = qword_1E9DD7B30;
  if (!qword_1E9DD7B30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7B30);
  }
  return result;
}

unint64_t sub_1B6C6E3E8()
{
  unint64_t result = qword_1E9DD7B38;
  if (!qword_1E9DD7B38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7B38);
  }
  return result;
}

unint64_t sub_1B6C6E440()
{
  unint64_t result = qword_1E9DD7B40;
  if (!qword_1E9DD7B40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7B40);
  }
  return result;
}

unint64_t sub_1B6C6E498()
{
  unint64_t result = qword_1E9DD7B48;
  if (!qword_1E9DD7B48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7B48);
  }
  return result;
}

unint64_t sub_1B6C6E4F0()
{
  unint64_t result = qword_1EB94A198;
  if (!qword_1EB94A198)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB94A198);
  }
  return result;
}

uint64_t sub_1B6C6E544(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6C6F9D0(0, &qword_1E9DD7B68, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C6F97C();
  sub_1B6E33A88();
  *(void *)&long long v12 = *(void *)v3;
  char v13 = 0;
  type metadata accessor for MTLPixelFormat(0);
  sub_1B6C6FA34(&qword_1E9DD8A10, type metadata accessor for MTLPixelFormat);
  sub_1B6E32FA8();
  if (!v2)
  {
    LOBYTE(v12) = 1;
    sub_1B6E32F78();
    LOBYTE(v12) = 2;
    sub_1B6E32F78();
    long long v12 = *(_OWORD *)(v3 + 16);
    char v13 = 3;
    type metadata accessor for CGSize(0);
    sub_1B6C6FA34(&qword_1E9DD7B70, type metadata accessor for CGSize);
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B6C6E7A8(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB0048(*a1, *a2);
}

unint64_t sub_1B6C6E7B4()
{
  unint64_t result = 0x74616D726F66;
  switch(*v0)
  {
    case 1:
      unint64_t result = 0x615265757161706FLL;
      break;
    case 2:
      unint64_t result = 0xD000000000000010;
      break;
    case 3:
      unint64_t result = 0x6F69736E656D6964;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6C6E850@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6C6F4D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6C6E878(uint64_t a1)
{
  unint64_t v2 = sub_1B6C6F97C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C6E8B4(uint64_t a1)
{
  unint64_t v2 = sub_1B6C6F97C();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B6C6E8F0@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  sub_1B6C6F6B8(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B6C6E92C(void *a1)
{
  return sub_1B6C6E544(a1);
}

double sub_1B6C6E944@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)(a1 + 8) = result;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  return result;
}

void sub_1B6C6E958()
{
  qword_1E9E497B0 = (uint64_t)&unk_1F0F56A30;
}

void *sub_1B6C6E96C(uint64_t a1)
{
  uint64_t v2 = v1;
  swift_retain();
  id v3 = (id)sub_1B6388608();
  if (!v3) {
    id v3 = objc_msgSend(objc_allocWithZone(MEMORY[0x1E4F352E0]), sel_init);
  }
  uint64_t v4 = v3;
  sub_1B6388228();
  swift_release();
  if (*(unsigned char *)(*(void *)(v1 + 16) + 536))
  {
    sub_1B6383E40((uint64_t)v64);
    uint64_t v5 = sub_1B6330D9C((uint64_t)v64, 1, 0, 2);
    id v6 = objc_msgSend(v4, sel_colorAttachments);
    id v7 = objc_msgSend(v6, sel_objectAtIndexedSubscript_, 0);

    double v9 = nullsub_1(v8);
    double v11 = v10;
    double v13 = v12;
    double v15 = v14;
    sub_1B62C7BF4((uint64_t)v64);
    objc_msgSend(v7, sel_setTexture_, v5);
    objc_msgSend(v7, sel_setLoadAction_, 2);
    objc_msgSend(v7, sel_setStoreAction_, 1);
    objc_msgSend(v7, sel_setClearColor_, v9, v11, v13, v15);
    objc_msgSend(v7, sel_setLevel_, 0);
    swift_unknownObjectRelease();
  }
  else
  {
    if (qword_1E9DCC6F0 != -1) {
      swift_once();
    }
    uint64_t v58 = *(void *)(qword_1E9E497B0 + 16);
    if (v58)
    {
      swift_bridgeObjectRetain();
      uint64_t v16 = 0;
      uint64_t v56 = v1;
      id v57 = v4;
      do
      {
        uint64_t v37 = *(void *)(v2 + 56);
        long long v38 = 0uLL;
        if (*(void *)(v37 + 16))
        {
          uint64_t v39 = sub_1B638403C((__n128)0);
          if (v40)
          {
            uint64_t v41 = *(void *)(v37 + 56) + 80 * v39;
            uint64_t v17 = *(void *)v41;
            uint64_t v18 = *(void *)(v41 + 8);
            long long v59 = *(_OWORD *)(v41 + 16);
            uint64_t v19 = *(void *)(v41 + 32);
            char v20 = *(unsigned char *)(v41 + 40);
            uint64_t v21 = *(void *)(v41 + 48);
            char v22 = *(unsigned char *)(v41 + 56);
            uint64_t v23 = *(void *)(v41 + 64);
            uint64_t v24 = *(void *)(v41 + 72);
            swift_bridgeObjectRetain();
            long long v38 = v59;
          }
          else
          {
            uint64_t v17 = 0;
            uint64_t v18 = 0;
            uint64_t v19 = 0;
            char v20 = 0;
            uint64_t v21 = 0;
            char v22 = 0;
            uint64_t v23 = 0;
            uint64_t v24 = 0;
            long long v38 = 0uLL;
          }
        }
        else
        {
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          uint64_t v19 = 0;
          char v20 = 0;
          uint64_t v21 = 0;
          char v22 = 0;
          uint64_t v23 = 0;
          uint64_t v24 = 0;
        }
        uint64_t v25 = v16 + 1;
        v64[0] = v17;
        v64[1] = v18;
        long long v65 = v38;
        uint64_t v66 = v19;
        char v67 = v20;
        uint64_t v68 = v21;
        char v69 = v22;
        uint64_t v70 = v23;
        uint64_t v71 = v24;
        uint64_t v2 = v56;
        uint64_t v26 = sub_1B6330D9C((uint64_t)v64, 1, 0, 2);
        uint64_t v4 = v57;
        id v27 = objc_msgSend(v57, sel_colorAttachments);
        id v28 = objc_msgSend(v27, sel_objectAtIndexedSubscript_, v16);
        swift_bridgeObjectRelease();

        double v30 = nullsub_1(v29);
        double v32 = v31;
        double v34 = v33;
        double v36 = v35;
        objc_msgSend(v28, sel_setTexture_, v26);
        objc_msgSend(v28, sel_setLoadAction_, 2);
        objc_msgSend(v28, sel_setStoreAction_, 1);
        objc_msgSend(v28, sel_setClearColor_, v30, v32, v34, v36);
        objc_msgSend(v28, sel_setLevel_, 0);
        swift_unknownObjectRelease();

        uint64_t v16 = v25;
      }
      while (v58 != v25);
      swift_bridgeObjectRelease();
    }
  }
  sub_1B6383E40((uint64_t)v63);
  uint64_t v42 = (void *)sub_1B6330D9C((uint64_t)v63, 1, 0, 2);
  sub_1B62C7BF4((uint64_t)v63);
  if (v42)
  {
    uint64_t v43 = *(void *)(v2 + 16);
    swift_retain();
    sub_1B62CA210(v43 + 624, (uint64_t)v61, (unint64_t *)&unk_1EB9852B0);
    sub_1B62CA210((uint64_t)v61, (uint64_t)v62, (unint64_t *)&unk_1EB9852B0);
    if (sub_1B6388C10(v62) == 1)
    {
      swift_release();
    }
    else
    {
      sub_1B62CA210((uint64_t)v61, (uint64_t)v60, (unint64_t *)&unk_1EB9852B0);
      uint64_t v44 = v60[1];
      double v45 = *(double *)&v60[2];
      uint64_t v46 = v60[3];
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v48 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, double))(v44 + 16))(v46, a1, ObjectType, v44, v45);
      swift_unknownObjectRetain();
      swift_release();
      swift_unknownObjectRelease();
      if (v48)
      {
        swift_unknownObjectRelease();
        if (v42 == (void *)v48) {
          uint64_t v49 = 1;
        }
        else {
          uint64_t v49 = 2;
        }
LABEL_24:
        id v50 = objc_msgSend(v42, sel_storageMode);
        BOOL v51 = v50 != (id)3;
        if (v50 == (id)3) {
          uint64_t v52 = 2;
        }
        else {
          uint64_t v52 = v49;
        }
        id v53 = objc_msgSend(v4, sel_depthAttachment);
        swift_unknownObjectRetain();
        objc_msgSend(v53, sel_setTexture_, v42);
        objc_msgSend(v53, sel_setLoadAction_, v52);
        objc_msgSend(v53, sel_setStoreAction_, v51);
        objc_msgSend(v53, sel_setClearDepth_, 0.0);
        objc_msgSend(v53, sel_setLevel_, 0);

        swift_unknownObjectRelease();
        sub_1B6331D0C();
        swift_unknownObjectRelease();
        return v4;
      }
    }
    uint64_t v49 = 2;
    goto LABEL_24;
  }
  return v4;
}

uint64_t sub_1B6C6EF84()
{
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B6C6EFBC()
{
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return v0;
}

uint64_t sub_1B6C6F014()
{
  sub_1B6C6EFBC();

  return swift_deallocClassInstance();
}

uint64_t initializeWithCopy for RenderGraph.RenderTargetDesc(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRetain();
  return a1;
}

uint64_t assignWithCopy for RenderGraph.RenderTargetDesc(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 32) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(void *)(a1 + 48) = v5;
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t assignWithTake for RenderGraph.RenderTargetDesc(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(unsigned char *)(a1 + 40) = *(unsigned char *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(unsigned char *)(a1 + 56) = *(unsigned char *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  return a1;
}

uint64_t getEnumTagSinglePayload for RenderGraph.RenderTargetDesc(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RenderGraph.RenderTargetDesc(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)double result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 80) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }
    *(unsigned char *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderGraph.RenderTargetDesc()
{
  return &type metadata for RenderGraph.RenderTargetDesc;
}

uint64_t getEnumTagSinglePayload for RenderGraph.RenderTarget(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0xED) {
    goto LABEL_17;
  }
  if (a2 + 19 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 19) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 19;
    }
    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 19;
    }
  }
LABEL_17:
  unsigned int v6 = *a1;
  BOOL v7 = v6 >= 0x14;
  int v8 = v6 - 20;
  if (!v7) {
    int v8 = -1;
  }
  return (v8 + 1);
}

unsigned char *storeEnumTagSinglePayload for RenderGraph.RenderTarget(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 19 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 19) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xED) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xEC)
  {
    unsigned int v6 = ((a2 - 237) >> 8) + 1;
    *double result = a2 + 19;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C6F3A0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *double result = a2 + 19;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderGraph.RenderTarget()
{
  return &type metadata for RenderGraph.RenderTarget;
}

uint64_t getEnumTagSinglePayload for RenderGraph.Features(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && a1[24]) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for RenderGraph.Features(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 8) = 0;
    *(void *)(result + 16) = 0;
    *(void *)double result = a2 - 255;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 24) = 0;
    }
    if (a2) {
      *(unsigned char *)double result = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderGraph.Features()
{
  return &type metadata for RenderGraph.Features;
}

unint64_t sub_1B6C6F484()
{
  unint64_t result = qword_1EB9852F0;
  if (!qword_1EB9852F0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB9852F0);
  }
  return result;
}

uint64_t sub_1B6C6F4D8(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x74616D726F66 && a2 == 0xE600000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x615265757161706FLL && a2 == 0xEB000000006F6974 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0xD000000000000010 && a2 == 0x80000001B6F32920 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x6F69736E656D6964 && a2 == 0xEA0000000000736ELL)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

ValueMetadata *type metadata accessor for RenderSettings()
{
  return &type metadata for RenderSettings;
}

uint64_t sub_1B6C6F6B8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6C6F9D0(0, &qword_1E9DD7B50, MEMORY[0x1E4FBBDC0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  double v10 = (char *)v19 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C6F97C();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  type metadata accessor for MTLPixelFormat(0);
  char v20 = 0;
  sub_1B6C6FA34(&qword_1E9DD89E0, type metadata accessor for MTLPixelFormat);
  sub_1B6E32DF8();
  uint64_t v11 = v19[0];
  LOBYTE(v19[0]) = 1;
  sub_1B6E32DC8();
  int v13 = v12;
  LOBYTE(v19[0]) = 2;
  sub_1B6E32DC8();
  int v15 = v14;
  type metadata accessor for CGSize(0);
  char v20 = 3;
  sub_1B6C6FA34(&qword_1E9DD7B60, type metadata accessor for CGSize);
  sub_1B6E32DF8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  uint64_t v16 = v19[0];
  uint64_t v17 = v19[1];
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *(void *)a2 = v11;
  *(_DWORD *)(a2 + 8) = v13;
  *(_DWORD *)(a2 + 12) = v15;
  *(void *)(a2 + 16) = v16;
  *(void *)(a2 + 24) = v17;
  return result;
}

unint64_t sub_1B6C6F97C()
{
  unint64_t result = qword_1E9DD7B58;
  if (!qword_1E9DD7B58)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7B58);
  }
  return result;
}

void sub_1B6C6F9D0(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6C6F97C();
    unint64_t v7 = a3(a1, &type metadata for RenderSettings.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1B6C6FA34(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RenderSettings.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *uint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C6FB48);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderSettings.CodingKeys()
{
  return &type metadata for RenderSettings.CodingKeys;
}

unint64_t sub_1B6C6FB84()
{
  unint64_t result = qword_1E9DD7B78;
  if (!qword_1E9DD7B78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7B78);
  }
  return result;
}

unint64_t sub_1B6C6FBDC()
{
  unint64_t result = qword_1E9DD7B80;
  if (!qword_1E9DD7B80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7B80);
  }
  return result;
}

unint64_t sub_1B6C6FC34()
{
  unint64_t result = qword_1E9DD7B88;
  if (!qword_1E9DD7B88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7B88);
  }
  return result;
}

uint64_t sub_1B6C6FC88@<X0>(void *a1@<X0>, unsigned char *a2@<X8>)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A28();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B62C14BC(v7, v7[3]);
  char v5 = sub_1B6E334D8();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v7);
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  *a2 = v5 & 1;
  return result;
}

uint64_t sub_1B6C6FD4C(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  sub_1B62C550C((uint64_t)v2, v3);
  sub_1B6E33588();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

uint64_t *sub_1B6C6FDE0(uint64_t a1)
{
  long long v2 = *(_OWORD *)(v1 + 32);
  v250[0] = *(_OWORD *)(v1 + 16);
  v250[1] = v2;
  uint64_t v251 = *(void *)(v1 + 48);
  sub_1B62C9DA8(a1, (uint64_t)v250, 0x200000000, v236);
  uint64_t result = (uint64_t *)sub_1B62CA210((uint64_t)v236, (uint64_t)v237, (unint64_t *)&qword_1EB97DC50);
  if (*(void *)&v237[0])
  {
    long long v244 = v237[0];
    long long v245 = v237[1];
    uint64_t v246 = v238;
    if (v243 >= 1)
    {
      uint64_t v228 = v240;
      if (v240)
      {
        uint64_t v226 = v239;
        unsigned int v4 = v242;
        int v232 = *(unsigned __int8 *)(v241 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        uint64_t v225 = (uint64_t)(v242 + 6);
        uint64_t v233 = v242[4];
        uint64_t v234 = (uint64_t *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
        uint64_t v224 = v242 + 8;
        swift_retain();
        swift_retain();
        swift_retain();
        uint64_t v5 = 0;
        uint64_t v6 = 0;
        uint64_t v227 = v4;
        while (1)
        {
          unint64_t v7 = (unsigned int *)(v226 + 48 * v5);
          uint64_t v9 = *v7;
          uint64_t v8 = v7[1];
          uint64_t v11 = (uint64_t *)*((void *)v7 + 2);
          uint64_t v10 = *((void *)v7 + 3);
          uint64_t v13 = *((void *)v7 + 4);
          uint64_t v12 = *((void *)v7 + 5);
          uint64_t v230 = v6;
          uint64_t v231 = v5;
          if (v232)
          {
            int v14 = *(os_unfair_lock_s **)(v12 + 376);
            swift_retain();
            os_unfair_lock_lock(v14);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v12 + 344));
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v233);
          sub_1B62CA210(v225, (uint64_t)v249, &qword_1EB97DE20);
          uint64_t v15 = v4[4];
          uint64_t v16 = *(void *)(*(void *)(*(void *)(*(void *)(v12 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          v4[6] = ecs_stack_allocator_allocate(v15, 48 * v16, 8);
          v4[7] = v16;
          v224[1] = 0;
          v224[2] = 0;
          *uint64_t v224 = 0;
          swift_release();
          uint64_t v17 = sub_1B62C9024((uint64_t)&type metadata for SetActive, (uint64_t)&off_1F0FA9800, v11, v10, v13, (uint64_t)v4);
          if (v11)
          {
            if (v13)
            {
              uint64_t v18 = 0;
              uint64_t v19 = (void *)&unk_1EB97E000;
              while (2)
              {
                if (*(unsigned __int8 *)(v12 + 120) == *(unsigned __int8 *)(v17 + v18)) {
                  goto LABEL_17;
                }
                uint64_t v21 = v11[v18];
                char v22 = *(unsigned char *)(v12 + 184);
                uint64_t v23 = swift_retain();
                if (v22) {
                  goto LABEL_193;
                }
                uint64_t v24 = *(int *)(*(void *)(v12 + 168) + 4 * v21);
                int v25 = *(_DWORD *)(*(void *)(v23 + v19[142]) + 12 * (int)v24 + 8);
                swift_release();
                BOOL v27 = v24 == -1 && v25 == 0;
                if (v27
                  || (v24 & 0x80000000) != 0
                  || v234[1] <= v24
                  || ((uint64_t v28 = *v234 + 12 * (int)v24, v25 != -1) ? (v29 = *(_DWORD *)(v28 + 8) == v25) : (v29 = 1), !v29))
                {
LABEL_17:
                  if (++v18 == v13) {
                    goto LABEL_13;
                  }
                  continue;
                }
                break;
              }
              uint64_t v30 = *(void *)(*(void *)(a1 + 136) + 8 * *(int *)(*v234 + 12 * (int)v24) + 32);
              if (*(unsigned __int8 *)(v17 + v18) == *(unsigned __int8 *)(v30 + 120)) {
                goto LABEL_79;
              }
              int v222 = *(unsigned __int8 *)(v17 + v18);
              if ((uint64_t)(*(void *)(v30 + 240) - *(void *)(v30 + 232)) >= 2)
              {
                uint64_t v216 = *(__int16 *)(v28 + 4);
                uint64_t v31 = *(unsigned int *)(v30 + 28);
                signed int v214 = *(_DWORD *)(v30 + 24);
                unsigned __int8 v32 = *(unsigned char *)(v30 + 32);
                swift_retain();
                LOBYTE(v235[0]) = v32;
                unint64_t v33 = v31 | ((unint64_t)v32 << 32);
                uint64_t v19 = (void *)&unk_1EB97E000;
                sub_1B6BF2E48(v216, v214, v222, v33, 0, 0, 0, 0);
                goto LABEL_78;
              }
              uint64_t v34 = *(void *)(v30 + 16);
              int v217 = *(_DWORD *)(v30 + 188);
              uint64_t v208 = *(int *)(v30 + 24);
              uint64_t v211 = *(void *)(*(void *)(a1 + 136) + 8 * *(int *)(*v234 + 12 * (int)v24) + 32);
              double v35 = *(os_unfair_lock_s **)(v34 + 128);
              swift_retain();
              swift_retain();
              os_unfair_lock_lock(v35);
              double v36 = *(void **)(v34 + 96);
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              *(void *)(v34 + 96) = v36;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                double v36 = sub_1B6C16694(v36);
                *(void *)(v34 + 96) = v36;
              }
              long long v38 = v36 + 4;
              uint64_t v39 = (uint64_t)&v36[5 * (int)v208 + 4];
              int v40 = v217;
              if (v222)
              {
                uint64_t v41 = &v38[5 * (int)v208];
                uint64_t v44 = v41[1];
                uint64_t v42 = v41 + 1;
                uint64_t v43 = v44;
                uint64_t v45 = v44 & 0x7FFFFFFFFFFFFFFFLL;
                if ((v44 & 0x7FFFFFFFFFFFFFFFLL) == 0)
                {
                  uint64_t v49 = 0;
                  uint64_t v48 = v34;
                  goto LABEL_66;
                }
                uint64_t v46 = *(void *)v39;
                BOOL v47 = v45 == 1 || *(_DWORD *)(*(void *)v39 + 32) == v217;
                uint64_t v48 = v34;
                if (!v47)
                {
                  if (*(_DWORD *)(v46 + 36) == v217)
                  {
                    uint64_t v49 = 1;
LABEL_66:
                    uint64_t v70 = v43 - 1;
                    *uint64_t v42 = v43 - 1;
                    if (v49 != v43 - 1)
                    {
                      uint64_t v197 = v49;
                      uint64_t v201 = v38;
                      uint64_t v71 = *(void *)v39;
                      uint64_t v72 = *(void *)v39 + 32;
                      int v194 = *(_DWORD *)(v72 + 4 * v49);
                      int v192 = *(_DWORD *)(v72 + 4 * v70);
                      uint64_t v205 = (char **)v39;
                      char v73 = swift_isUniquelyReferenced_nonNull_native();
                      uint64_t v74 = v205;
                      int32x4_t *v205 = (char *)v71;
                      if ((v73 & 1) == 0)
                      {
                        long long v103 = sub_1B6315450(v71);
                        uint64_t v74 = v205;
                        uint64_t v71 = (uint64_t)v103;
                        int32x4_t *v205 = v103;
                      }
                      *(_DWORD *)(v71 + 4 * v197 + 32) = v192;
                      int v75 = *v74;
                      char v76 = swift_isUniquelyReferenced_nonNull_native();
                      int32x4_t *v205 = v75;
                      if ((v76 & 1) == 0)
                      {
                        int v75 = sub_1B6315450((uint64_t)v75);
                        int32x4_t *v205 = v75;
                      }
                      *(_DWORD *)&v75[4 * v70 + 32] = v194;
                      uint64_t v48 = v34;
                      int v40 = v217;
                      long long v38 = v201;
                    }
                    uint64_t v77 = &v38[5 * (int)v208];
                    int v79 = *((_DWORD *)v77 + 9);
                    char v78 = (_DWORD *)v77 + 9;
                    if (v79 == v40)
                    {
                      *char v78 = -1;
                      LODWORD(v38[5 * (int)v208 + 4]) = v40;
                    }
                    uint64_t v19 = (void *)&unk_1EB97E000;
LABEL_75:
                    if (*(unsigned char *)(*(void *)(*(void *)(v48 + 80) + 8 * v208 + 32) + 200)) {
                      *(unsigned char *)(v48 + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 1;
                    }
                    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v48 + 128));
                    swift_release();
                    *(unsigned char *)(v211 + 120) = v222;
LABEL_78:
                    swift_release();
LABEL_79:
                    if (v234[1] > v24)
                    {
                      uint64_t v80 = *v234;
                      if (v25 == -1 || *(_DWORD *)(v80 + 12 * (int)v24 + 8) == v25)
                      {
                        long long v81 = (int *)(v80 + 12 * (int)v24);
                        uint64_t v82 = *((__int16 *)v81 + 2);
                        uint64_t v83 = *(void *)(*(void *)(a1 + 136) + 8 * *v81 + 32);
                        thread_worker_index(&thread_worker_index, v26);
                        uint64_t v84 = *(void *)(v83 + 192);
                        if (v84)
                        {
                          uint64_t v85 = *(void *)(v83 + 208);
                          uint64_t v86 = 8 * (v82 >> 6);
                          *(void *)(v84 + v86) |= 1 << v82;
                          *(void *)(v85 + v86) &= ~(1 << v82);
                        }
                        if (*(unsigned char *)(*(void *)(v83 + 40) + 213) == 1)
                        {
                          uint64_t v87 = *(void *)(v83 + 48);
                          uint64_t v88 = *(void *)(v87 + 16);
                          if (v88)
                          {
                            uint64_t v89 = (uint64_t *)(v87 + 56);
                            while ((ValueMetadata *)*(v89 - 3) != &type metadata for PropagateDirtiness)
                            {
                              v89 += 5;
                              if (!--v88) {
                                goto LABEL_89;
                              }
                            }
                            uint64_t v90 = *v89;
                          }
                          else
                          {
LABEL_89:
                            uint64_t v90 = 0;
                          }
                          uint64_t v91 = *(void *)(v83 + 128);
                          char v92 = *(unsigned char *)(v83 + 184);
                          uint64_t v93 = swift_retain();
                          if (v92) {
                            goto LABEL_193;
                          }
                          unsigned int v94 = *(_DWORD *)(*(void *)(v83 + 168) + 4 * v82);
                          uint64_t v95 = (unsigned int *)(v91 + v90 + 8 * v82);
                          uint64_t v96 = *(unsigned int *)(*(void *)(v93 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                                + 12 * (int)v94
                                                + 8);
                          swift_release();
                          uint64_t v97 = *v95;
                          uint64_t v98 = v95[1];
                          if (v97 != -1 || v98 != 0) {
                            sub_1B6398CA0(v235, v94 | (unint64_t)(v96 << 32), v97 | (v98 << 32));
                          }
                          uint64_t v19 = &unk_1EB97E000;
                        }
                      }
                    }
                    goto LABEL_17;
                  }
                  uint64_t v66 = 0;
                  uint64_t v67 = v45 - 2;
                  uint64_t v68 = v46 + 40;
                  while (v67 != v66)
                  {
                    int v69 = *(_DWORD *)(v68 + 4 * v66++);
                    if (v69 == v217)
                    {
                      uint64_t v49 = v66 + 1;
                      goto LABEL_66;
                    }
                  }
                }
                uint64_t v49 = 0;
                goto LABEL_66;
              }
              uint64_t v50 = *(void *)v39;
              BOOL v51 = &v38[5 * (int)v208];
              uint64_t v54 = v51[1];
              uint64_t v52 = v51 + 1;
              uint64_t v53 = v54;
              uint64_t v55 = *(void *)(*(void *)v39 + 16);
              if (v54 == v55)
              {
LABEL_45:
                uint64_t v56 = 0;
                goto LABEL_46;
              }
              int v57 = *(_DWORD *)(v50 + 32 + 4 * v53);
              if (v57 == v217)
              {
                uint64_t v19 = (void *)&unk_1EB97E000;
                goto LABEL_55;
              }
              uint64_t v56 = v53 + 1;
              if (v53 + 1 == v55)
              {
                uint64_t v56 = 0;
                uint64_t v19 = (void *)&unk_1EB97E000;
LABEL_46:
                if (v56 == v53)
                {
LABEL_55:
                  *uint64_t v52 = v53 + 1;
                  uint64_t v63 = &v38[5 * (int)v208];
                  int v65 = *((_DWORD *)v63 + 8);
                  uint64_t v64 = v63 + 4;
                  uint64_t v48 = v34;
                  if (v65 == v40)
                  {
                    HIDWORD(v38[5 * (int)v208 + 4]) = v40;
                    *uint64_t v64 = -1;
                  }
                  goto LABEL_75;
                }
                uint64_t v196 = v52;
                id v200 = v38;
                uint64_t v204 = (char **)v39;
                uint64_t v193 = v53;
                int v57 = *(_DWORD *)(v50 + 4 * v53 + 32);
              }
              else
              {
                if (*(_DWORD *)(v50 + 32 + 4 * v56) != v217)
                {
                  uint64_t v100 = v55 - 2;
                  uint64_t v101 = v53;
                  uint64_t v19 = (void *)&unk_1EB97E000;
                  while (v100 != v101)
                  {
                    int v102 = *(_DWORD *)(v50 + 40 + 4 * v101++);
                    if (v102 == v217)
                    {
                      uint64_t v56 = v101 + 1;
                      goto LABEL_46;
                    }
                  }
                  goto LABEL_45;
                }
                uint64_t v193 = v53;
                uint64_t v196 = v52;
                id v200 = v38;
                uint64_t v204 = (char **)v39;
              }
              uint64_t v191 = v56;
              int v190 = *(_DWORD *)(v50 + 4 * v56 + 32);
              char v58 = swift_isUniquelyReferenced_nonNull_native();
              long long v59 = v204;
              *uint64_t v204 = (char *)v50;
              if ((v58 & 1) == 0)
              {
                long long v104 = sub_1B6315450(v50);
                long long v59 = v204;
                uint64_t v50 = (uint64_t)v104;
                *uint64_t v204 = v104;
              }
              *(_DWORD *)(v50 + 4 * v191 + 32) = v57;
              uint64_t v60 = *v59;
              uint64_t v61 = v59;
              char v62 = swift_isUniquelyReferenced_nonNull_native();
              *uint64_t v61 = v60;
              if ((v62 & 1) == 0)
              {
                uint64_t v60 = sub_1B6315450((uint64_t)v60);
                *uint64_t v61 = v60;
              }
              uint64_t v19 = (void *)&unk_1EB97E000;
              uint64_t v53 = v193;
              uint64_t v52 = v196;
              *(_DWORD *)&v60[4 * v193 + 32] = v190;
              int v40 = v217;
              long long v38 = v200;
              goto LABEL_55;
            }
          }
          else if (v9 != v8)
          {
            char v20 = (void *)&unk_1EB97E000;
            while (2)
            {
              if (*(unsigned __int8 *)(v12 + 120) == *(unsigned __int8 *)(v17 + v9)) {
                goto LABEL_104;
              }
              char v105 = *(unsigned char *)(v12 + 184);
              uint64_t v106 = swift_retain();
              if (v105) {
                goto LABEL_193;
              }
              uint64_t v107 = *(int *)(*(void *)(v12 + 168) + 4 * v9);
              int v108 = *(_DWORD *)(*(void *)(v106 + v20[142]) + 12 * (int)v107 + 8);
              swift_release();
              BOOL v110 = v107 == -1 && v108 == 0;
              if (v110
                || (v107 & 0x80000000) != 0
                || v234[1] <= v107
                || ((uint64_t v111 = *v234 + 12 * (int)v107, v108 != -1) ? (v112 = *(_DWORD *)(v111 + 8) == v108) : (v112 = 1),
                    !v112))
              {
LABEL_104:
                if (++v9 == v8) {
                  goto LABEL_13;
                }
                continue;
              }
              break;
            }
            uint64_t v113 = *(void *)(*(void *)(a1 + 136) + 8 * *(int *)(*v234 + 12 * (int)v107) + 32);
            if (*(unsigned __int8 *)(v17 + v9) == *(unsigned __int8 *)(v113 + 120)) {
              goto LABEL_157;
            }
            int v223 = *(unsigned __int8 *)(v17 + v9);
            if ((uint64_t)(*(void *)(v113 + 240) - *(void *)(v113 + 232)) >= 2)
            {
              uint64_t v220 = *(__int16 *)(v111 + 4);
              uint64_t v114 = *(unsigned int *)(v113 + 28);
              signed int v218 = *(_DWORD *)(v113 + 24);
              char v115 = *(unsigned char *)(v113 + 32);
              swift_retain();
              LOBYTE(v235[0]) = v115;
              char v20 = (void *)&unk_1EB97E000;
              sub_1B6BF2E48(v220, v218, v223, v114 | ((unint64_t)LOBYTE(v235[0]) << 32), 0, 0, 0, 0);
              goto LABEL_156;
            }
            uint64_t v116 = *(void *)(v113 + 16);
            int v219 = *(_DWORD *)(v113 + 188);
            uint64_t v221 = *(int *)(v113 + 24);
            long long v117 = *(os_unfair_lock_s **)(v116 + 128);
            uint64_t v215 = *(void *)(*(void *)(a1 + 136) + 8 * *(int *)(*v234 + 12 * (int)v107) + 32);
            swift_retain();
            swift_retain();
            os_unfair_lock_lock(v117);
            long long v118 = *(void **)(v116 + 96);
            char v119 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)(v116 + 96) = v118;
            if ((v119 & 1) == 0)
            {
              long long v118 = sub_1B6C16694(v118);
              *(void *)(v116 + 96) = v118;
            }
            long long v120 = v118 + 4;
            uint64_t v121 = v221;
            uint64_t v122 = (uint64_t)&v118[5 * (int)v221 + 4];
            char v123 = v223;
            int v124 = v219;
            if (v223)
            {
              uint64_t v125 = &v120[5 * (int)v221];
              uint64_t v128 = v125[1];
              uint64_t v126 = v125 + 1;
              uint64_t v127 = v128;
              uint64_t v129 = v128 & 0x7FFFFFFFFFFFFFFFLL;
              if ((v128 & 0x7FFFFFFFFFFFFFFFLL) != 0)
              {
                uint64_t v130 = *(void *)v122;
                if (v129 != 1 && *(_DWORD *)(*(void *)v122 + 32) != v219)
                {
                  if (*(_DWORD *)(v130 + 36) == v219)
                  {
                    uint64_t v132 = 1;
LABEL_131:
                    uint64_t v133 = v127 - 1;
                    *uint64_t v126 = v127 - 1;
                    if (v132 != v127 - 1)
                    {
                      uint64_t v209 = v116;
                      uint64_t v212 = v120;
                      uint64_t v134 = *(void *)v122;
                      uint64_t v135 = *(void *)v122 + 32;
                      uint64_t v206 = v132;
                      int v202 = *(_DWORD *)(v135 + 4 * v132);
                      int v198 = *(_DWORD *)(v135 + 4 * v133);
                      id v136 = (char **)v122;
                      char v137 = swift_isUniquelyReferenced_nonNull_native();
                      *id v136 = (char *)v134;
                      if (v137)
                      {
                        id v138 = v136;
                      }
                      else
                      {
                        id v188 = sub_1B6315450(v134);
                        id v138 = v136;
                        uint64_t v134 = (uint64_t)v188;
                        *id v136 = v188;
                      }
                      *(_DWORD *)(v134 + 4 * v206 + 32) = v198;
                      float32x4_t v139 = *v138;
                      char v140 = swift_isUniquelyReferenced_nonNull_native();
                      *id v136 = v139;
                      if ((v140 & 1) == 0)
                      {
                        float32x4_t v139 = sub_1B6315450((uint64_t)v139);
                        *id v136 = v139;
                      }
                      *(_DWORD *)&v139[4 * v133 + 32] = v202;
                      char v123 = v223;
                      uint64_t v116 = v209;
                      long long v120 = v212;
                      uint64_t v121 = v221;
                      int v124 = v219;
                    }
                    double v141 = &v120[5 * (int)v121];
                    int v143 = *((_DWORD *)v141 + 9);
                    uint64_t v142 = (_DWORD *)v141 + 9;
                    if (v143 == v124)
                    {
                      *uint64_t v142 = -1;
                      LODWORD(v120[5 * (int)v121 + 4]) = v124;
                    }
                    char v20 = (void *)&unk_1EB97E000;
LABEL_153:
                    if (*(unsigned char *)(*(void *)(*(void *)(v116 + 80) + 8 * v121 + 32) + 200)) {
                      *(unsigned char *)(v116 + OBJC_IVAR____TtC3VFX13EntityManager_shouldNotifyEntityEvent) = 1;
                    }
                    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v116 + 128));
                    swift_release();
                    *(unsigned char *)(v215 + 120) = v123;
LABEL_156:
                    swift_release();
LABEL_157:
                    if (v234[1] > v107)
                    {
                      uint64_t v161 = *v234;
                      if (v108 == -1 || *(_DWORD *)(v161 + 12 * (int)v107 + 8) == v108)
                      {
                        uint64_t v162 = (int *)(v161 + 12 * (int)v107);
                        uint64_t v163 = *((__int16 *)v162 + 2);
                        uint64_t v164 = *(void *)(*(void *)(a1 + 136) + 8 * *v162 + 32);
                        thread_worker_index(&thread_worker_index, v109);
                        uint64_t v165 = *(void *)(v164 + 192);
                        if (v165)
                        {
                          uint64_t v166 = *(void *)(v164 + 208);
                          uint64_t v167 = 8 * (v163 >> 6);
                          *(void *)(v165 + v167) |= 1 << v163;
                          *(void *)(v166 + v167) &= ~(1 << v163);
                        }
                        if (*(unsigned char *)(*(void *)(v164 + 40) + 213) == 1)
                        {
                          uint64_t v168 = *(void *)(v164 + 48);
                          uint64_t v169 = *(void *)(v168 + 16);
                          if (v169)
                          {
                            long long v170 = (uint64_t *)(v168 + 56);
                            while ((ValueMetadata *)*(v170 - 3) != &type metadata for PropagateDirtiness)
                            {
                              v170 += 5;
                              if (!--v169) {
                                goto LABEL_167;
                              }
                            }
                            uint64_t v171 = *v170;
                          }
                          else
                          {
LABEL_167:
                            uint64_t v171 = 0;
                          }
                          uint64_t v172 = *(void *)(v164 + 128);
                          char v173 = *(unsigned char *)(v164 + 184);
                          uint64_t v174 = swift_retain();
                          if (v173)
                          {
LABEL_193:
                            uint64_t result = (uint64_t *)sub_1B6E32BE8();
                            __break(1u);
                            return result;
                          }
                          unsigned int v175 = *(_DWORD *)(*(void *)(v164 + 168) + 4 * v163);
                          float32x4_t v176 = (unsigned int *)(v172 + v171 + 8 * v163);
                          uint64_t v177 = *(unsigned int *)(*(void *)(v174 + OBJC_IVAR____TtC3VFX13EntityManager__entries)
                                                 + 12 * (int)v175
                                                 + 8);
                          swift_release();
                          uint64_t v178 = *v176;
                          uint64_t v179 = v176[1];
                          if (v178 != -1 || v179 != 0) {
                            sub_1B6398CA0(v235, v175 | (unint64_t)(v177 << 32), v178 | (v179 << 32));
                          }
                          char v20 = &unk_1EB97E000;
                        }
                      }
                    }
                    goto LABEL_104;
                  }
                  uint64_t v181 = 0;
                  uint64_t v182 = v129 - 2;
                  uint64_t v183 = v130 + 40;
                  while (v182 != v181)
                  {
                    int v184 = *(_DWORD *)(v183 + 4 * v181++);
                    if (v184 == v219)
                    {
                      uint64_t v132 = v181 + 1;
                      goto LABEL_131;
                    }
                  }
                }
              }
              uint64_t v132 = 0;
              goto LABEL_131;
            }
            uint64_t v144 = *(void *)v122;
            double v145 = &v120[5 * (int)v221];
            uint64_t v148 = v145[1];
            uint64_t v146 = v145 + 1;
            uint64_t v147 = v148;
            uint64_t v149 = *(void *)(*(void *)v122 + 16);
            if (v148 == v149)
            {
LABEL_141:
              uint64_t v150 = 0;
              goto LABEL_142;
            }
            int v151 = *(_DWORD *)(v144 + 32 + 4 * v147);
            if (v151 == v219)
            {
              char v20 = (void *)&unk_1EB97E000;
              goto LABEL_151;
            }
            uint64_t v150 = v147 + 1;
            if (v147 + 1 == v149)
            {
              uint64_t v150 = 0;
              char v20 = (void *)&unk_1EB97E000;
LABEL_142:
              if (v150 == v147)
              {
LABEL_151:
                void *v146 = v147 + 1;
                uint64_t v158 = &v120[5 * (int)v121];
                int v160 = *((_DWORD *)v158 + 8);
                uint64_t v159 = v158 + 4;
                char v123 = 0;
                if (v160 == v124)
                {
                  HIDWORD(v120[5 * (int)v121 + 4]) = v124;
                  *uint64_t v159 = -1;
                }
                goto LABEL_153;
              }
              uint64_t v203 = v146;
              uint64_t v207 = (char **)v122;
              uint64_t v210 = v116;
              uint64_t v213 = v120;
              uint64_t v199 = v147;
              int v151 = *(_DWORD *)(v144 + 4 * v147 + 32);
            }
            else
            {
              if (*(_DWORD *)(v144 + 32 + 4 * v150) != v219)
              {
                uint64_t v185 = v149 - 2;
                uint64_t v186 = v147;
                char v20 = (void *)&unk_1EB97E000;
                while (v185 != v186)
                {
                  int v187 = *(_DWORD *)(v144 + 40 + 4 * v186++);
                  if (v187 == v219)
                  {
                    uint64_t v150 = v186 + 1;
                    goto LABEL_142;
                  }
                }
                goto LABEL_141;
              }
              uint64_t v199 = v147;
              uint64_t v203 = v146;
              uint64_t v207 = (char **)v122;
              uint64_t v210 = v116;
              uint64_t v213 = v120;
            }
            uint64_t v152 = v150;
            int v195 = *(_DWORD *)(v144 + 4 * v150 + 32);
            char v153 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v154 = v207;
            char *v207 = (char *)v144;
            if ((v153 & 1) == 0)
            {
              double v189 = sub_1B6315450(v144);
              uint64_t v154 = v207;
              uint64_t v144 = (uint64_t)v189;
              char *v207 = v189;
            }
            *(_DWORD *)(v144 + 4 * v152 + 32) = v151;
            uint64_t v155 = *v154;
            id v156 = v154;
            char v157 = swift_isUniquelyReferenced_nonNull_native();
            float32x4_t *v156 = v155;
            if ((v157 & 1) == 0)
            {
              uint64_t v155 = sub_1B6315450((uint64_t)v155);
              float32x4_t *v156 = v155;
            }
            char v20 = (void *)&unk_1EB97E000;
            uint64_t v147 = v199;
            uint64_t v146 = v203;
            *(_DWORD *)&v155[4 * v199 + 32] = v195;
            uint64_t v116 = v210;
            long long v120 = v213;
            uint64_t v121 = v221;
            int v124 = v219;
            goto LABEL_151;
          }
LABEL_13:
          v247[0] = v244;
          v247[1] = v245;
          uint64_t v248 = v246;
          unsigned int v4 = v227;
          uint64_t v6 = v230;
          sub_1B6345178(v227, (unsigned __int16 **)v247, (uint64_t)v249);
          sub_1B634507C((char *)v12);
          ecs_stack_allocator_pop_snapshot(v233);
          if (v232)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v12 + 376));
          }
          swift_release();
          uint64_t v5 = v231 + 1;
          if (v231 + 1 == v228)
          {
            sub_1B632F170(v236);
            return sub_1B632F170(v236);
          }
        }
      }
    }
    return sub_1B632F170(v236);
  }
  return result;
}

ValueMetadata *type metadata accessor for EffectiveHiddenState()
{
  return &type metadata for EffectiveHiddenState;
}

unsigned char *storeEnumTagSinglePayload for SetActive(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C70E20);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SetActive()
{
  return &type metadata for SetActive;
}

uint64_t sub_1B6C70E58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = MEMORY[0x1E4FBC860];
  if (v4)
  {
    uint64_t v18 = MEMORY[0x1E4FBC860];
    sub_1B6C3D8D8(0, v4, 0);
    uint64_t v5 = v18;
    uint64_t v7 = a1 + 36;
    do
    {
      unint64_t v8 = *(void *)(v7 - 4);
      swift_unownedRetainStrong();
      uint64_t v9 = sub_1B6C77B50(v8, a3);
      char v11 = v10;
      uint64_t v13 = v12;
      unint64_t v15 = *(void *)(v18 + 16);
      unint64_t v14 = *(void *)(v18 + 24);
      if (v15 >= v14 >> 1) {
        sub_1B6C3D8D8(v14 > 1, v15 + 1, 1);
      }
      v7 += 8;
      *(void *)(v18 + 16) = v15 + 1;
      uint64_t v16 = v18 + 24 * v15;
      *(void *)(v16 + 32) = v9;
      *(unsigned char *)(v16 + 40) = v11 & 1;
      *(void *)(v16 + 48) = v13;
      --v4;
    }
    while (v4);
  }
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  return v5;
}

uint64_t sub_1B6C70F80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(sub_1B62BF634(a1, a2, MEMORY[0x1E4FBC5C0]) + 24);
  swift_release();
  return v2;
}

uint64_t sub_1B6C70FC4(char *a1, uint64_t a2, int a3)
{
  sub_1B62BF900(0, (unint64_t *)&qword_1EB9806A0, MEMORY[0x1E4FBBC50], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v7 - 8, v8);
  char v10 = (char *)v43 - v9;
  uint64_t v11 = sub_1B6E32B48();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  unint64_t v15 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = v3;
  if (a1)
  {
    swift_retain();
    uint64_t v16 = a1;
  }
  else
  {
    v43[1] = 0;
    int v44 = a3;
    unsigned int v45 = a2;
    uint64_t v46 = (char *)v43 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
    uint64_t v47 = v11;
    uint64_t v17 = *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_entityCount) & ~(*(uint64_t *)(v3
                                                                                           + OBJC_IVAR____TtC3VFX13EntityManager_entityCount) >> 63);
    swift_retain();
    uint64_t v16 = sub_1B633F784(0, v17, 0, MEMORY[0x1E4FBC860]);
    v43[0] = v3 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
    os_unfair_lock_lock(*(os_unfair_lock_t *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
    uint64_t v18 = (void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    uint64_t v19 = *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8);
    if (v19)
    {
      uint64_t v20 = 0;
      for (uint64_t i = 0; i != v19; ++i)
      {
        uint64_t v23 = *v18 + v20;
        if ((*(__int16 *)(v23 + 6) & 0x80000000) == 0)
        {
          int v24 = *(_DWORD *)(v23 + 8);
          unint64_t v26 = *((void *)v16 + 2);
          unint64_t v25 = *((void *)v16 + 3);
          if (v26 >= v25 >> 1) {
            uint64_t v16 = sub_1B633F784(v25 > 1, v26 + 1, 1, v16);
          }
          *((void *)v16 + 2) = v26 + 1;
          char v22 = &v16[8 * v26];
          *((_DWORD *)v22 + 8) = i;
          *((_DWORD *)v22 + 9) = v24;
        }
        v20 += 12;
      }
    }
    os_unfair_lock_unlock(*(os_unfair_lock_t *)(v43[0] + 24));
    uint64_t v11 = v47;
    unint64_t v15 = v46;
    LOBYTE(a3) = v44;
    a2 = v45;
  }
  swift_bridgeObjectRetain();
  swift_unownedRetain();
  swift_release();
  sub_1B6C71AEC(a2, a3 & 1, &v52);
  uint64_t v27 = v53;
  uint64_t v28 = v54;
  sub_1B62C14BC(&v52, v53);
  uint64_t v29 = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 8))(v27, v28);
  sub_1B6E32B38();
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1, v11);
  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v15, v10, v11);
  if (*(void *)(v29 + 16) && (unint64_t v30 = sub_1B62FECE4((uint64_t)v15), (v31 & 1) != 0)) {
    sub_1B62CAAD8(*(void *)(v29 + 56) + 32 * v30, (uint64_t)v50);
  }
  else {
    memset(v50, 0, sizeof(v50));
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
  sub_1B62B57A8(v50, v51);
  type metadata accessor for SerializationContext();
  swift_dynamicCast();
  uint64_t v32 = v49;
  unint64_t v33 = thread_serialization_context;
  double v35 = (uint64_t *)thread_serialization_context(v34);
  uint64_t v47 = *v35;
  *double v35 = v32;
  uint64_t v36 = v53;
  uint64_t v37 = v54;
  sub_1B62C14BC(&v52, v53);
  *(void *)&v51[0] = v16;
  *((void *)&v51[0] + 1) = v48;
  long long v38 = *(uint64_t (**)(_OWORD *, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v37 + 32);
  unint64_t v39 = sub_1B6C7895C();
  uint64_t v40 = v38(v51, &type metadata for EntityManagerCoder, v39, v36, v37);
  uint64_t v41 = (uint64_t *)((uint64_t (*)(uint64_t (**)(double)))v33)(&thread_serialization_context);
  *uint64_t v41 = v47;
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v52);
  return v40;
}

BOOL sub_1B6C714E8()
{
  uint64_t v0 = sub_1B6E33A78();
  uint64_t v1 = sub_1B62BF6D0(v0);
  swift_bridgeObjectRelease();
  if (v1) {
    swift_release();
  }
  return v1 != 0;
}

uint64_t sub_1B6C71530(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(sub_1B62BF634(a1, a2, MEMORY[0x1E4FBC5D8]) + 16);
  swift_retain();
  swift_release();
  return v2;
}

uint64_t sub_1B6C71584(uint64_t a1, uint64_t a2)
{
  return sub_1B62BF634(a1, a2, MEMORY[0x1E4FBC5D8]);
}

uint64_t sub_1B6C715A0@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W3>, int a4@<W4>, unint64_t a5@<X5>, uint64_t a6@<X6>, char a7@<W7>, uint64_t *a8@<X8>)
{
  uint64_t v50 = a6;
  uint64_t v51 = a1;
  int v52 = a4;
  int v53 = a3;
  int v48 = a2;
  uint64_t v56 = a8;
  char v9 = a7 & 1;
  sub_1B62BF900(0, (unint64_t *)&qword_1EB9806A0, MEMORY[0x1E4FBBC50], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v10 - 8, v11);
  uint64_t v49 = &v47[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v13, v14);
  uint64_t v16 = &v47[-v15];
  MEMORY[0x1F4188790](v17, v18);
  uint64_t v20 = &v47[-v19];
  uint64_t v55 = sub_1B6E32B48();
  uint64_t v21 = *(void *)(v55 - 8);
  MEMORY[0x1F4188790](v55, v22);
  int v24 = &v47[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0)];
  MEMORY[0x1F4188790](v25, v26);
  uint64_t v28 = &v47[-v27];
  MEMORY[0x1F4188790](v29, v30);
  uint64_t v32 = &v47[-v31];
  uint64_t v54 = type metadata accessor for SerializationContext();
  uint64_t v33 = swift_allocObject();
  uint64_t v34 = swift_retain();
  sub_1B62FF47C(v34, v50, v9, a5 | ((HIDWORD(a5) & 1) << 32));
  *(_WORD *)(v33 + 82) = 257;
  *(unsigned char *)(v33 + 80) = v52;
  *(unsigned char *)(v33 + 81) = v53;
  switch((char)v51)
  {
    case 1:
      uint64_t v35 = sub_1B6E30C88();
      swift_allocObject();
      uint64_t v36 = sub_1B6E30C78();
      sub_1B6E32B38();
      uint64_t v43 = v55;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48))(v16, 1, v55);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v21 + 32))(v28, v16, v43);
      uint64_t v59 = v54;
      v58[0] = v33;
      swift_retain();
      int v44 = (void (*)(unsigned char *, void))sub_1B6E30C58();
      sub_1B62FF1F0((uint64_t)v58, (uint64_t)v28);
      v44(v57, 0);
      unint64_t v39 = &off_1F0F51640;
      break;
    case 2:
    case 4:
      if (qword_1EB97F898 != -1) {
        swift_once();
      }
      uint64_t v40 = qword_1EB997DE8;
      uint64_t v35 = type metadata accessor for BinaryDecoder();
      uint64_t v36 = swift_allocObject();
      swift_retain();
      *(void *)(v36 + 48) = sub_1B67DF160(MEMORY[0x1E4FBC860]);
      *(void *)(v36 + 16) = v40;
      *(unsigned char *)(v36 + 24) = v48 & 1;
      *(void *)(v36 + 32) = sub_1B62FE7FC;
      *(void *)(v36 + 40) = 0;
      uint64_t v41 = v49;
      sub_1B6E32B38();
      uint64_t v42 = v55;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48))(v41, 1, v55);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v21 + 32))(v24, v41, v42);
      uint64_t v59 = v54;
      v58[0] = v33;
      swift_retain();
      sub_1B62FF1F0((uint64_t)v58, (uint64_t)v24);
      unint64_t v39 = &off_1F0F5E1F8;
      break;
    default:
      uint64_t v35 = sub_1B6E30978();
      swift_allocObject();
      uint64_t v36 = sub_1B6E30968();
      sub_1B6E32B38();
      uint64_t v37 = v55;
      (*(void (**)(unsigned char *, uint64_t, uint64_t))(v21 + 48))(v20, 1, v55);
      (*(void (**)(unsigned char *, unsigned char *, uint64_t))(v21 + 32))(v32, v20, v37);
      uint64_t v59 = v54;
      v58[0] = v33;
      swift_retain();
      long long v38 = (void (*)(unsigned char *, void))sub_1B6E30948();
      sub_1B62FF1F0((uint64_t)v58, (uint64_t)v32);
      v38(v57, 0);
      unint64_t v39 = &off_1F0F515F0;
      break;
  }
  unsigned int v45 = v56;
  v56[3] = v35;
  v45[4] = (uint64_t)v39;
  uint64_t result = swift_release();
  uint64_t *v45 = v36;
  return result;
}

uint64_t sub_1B6C71AEC@<X0>(uint64_t a1@<X0>, int a2@<W2>, uint64_t *a3@<X8>)
{
  LODWORD(v50) = a2;
  int v53 = a3;
  uint64_t v49 = sub_1B6E309A8();
  v48[1] = *(void *)(v49 - 8);
  MEMORY[0x1F4188790](v49, v4);
  _OWORD v48[2] = (char *)v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B62BF900(0, (unint64_t *)&qword_1EB9806A0, MEMORY[0x1E4FBBC50], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v6 - 8, v7);
  char v9 = (char *)v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v10, v11);
  uint64_t v13 = (char *)v48 - v12;
  MEMORY[0x1F4188790](v14, v15);
  uint64_t v17 = (char *)v48 - v16;
  uint64_t v52 = sub_1B6E32B48();
  uint64_t v18 = *(void *)(v52 - 8);
  MEMORY[0x1F4188790](v52, v19);
  uint64_t v21 = (char *)v48 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0);
  MEMORY[0x1F4188790](v22, v23);
  uint64_t v25 = (char *)v48 - v24;
  MEMORY[0x1F4188790](v26, v27);
  uint64_t v29 = (char *)v48 - v28;
  uint64_t v51 = type metadata accessor for SerializationContext();
  uint64_t v30 = swift_allocObject();
  uint64_t v31 = swift_retain();
  LOBYTE(v55[0]) = 1;
  sub_1B62FF47C(v31, 0, 1, 0x100000000);
  *(_WORD *)(v30 + 82) = 257;
  *(unsigned char *)(v30 + 81) = v50;
  uint64_t v50 = a1;
  switch((char)a1)
  {
    case 1:
      uint64_t v42 = sub_1B6E30CE8();
      swift_allocObject();
      uint64_t v33 = sub_1B6E30CD8();
      sub_1B6E30C98();
      sub_1B6E32B38();
      uint64_t v43 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 48))(v13, 1, v52);
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v25, v13, v43);
      uint64_t v56 = v51;
      v55[0] = v30;
      swift_retain();
      int v44 = (void (*)(unsigned char *, void))sub_1B6E30CB8();
      uint64_t v45 = (uint64_t)v25;
      uint64_t v32 = v42;
      sub_1B62FF1F0((uint64_t)v55, v45);
      v44(v54, 0);
      long long v38 = &off_1F0F51668;
      break;
    case 2:
    case 4:
      if (qword_1EB97F898 != -1) {
        swift_once();
      }
      BOOL v39 = v50 == 2;
      uint64_t v40 = qword_1EB997DE8;
      uint64_t v32 = type metadata accessor for BinaryEncoder();
      uint64_t v33 = swift_allocObject();
      swift_retain();
      *(void *)(v33 + 32) = sub_1B67DF160(MEMORY[0x1E4FBC860]);
      *(unsigned char *)(v33 + 16) = 0;
      *(unsigned char *)(v33 + 17) = v39;
      *(void *)(v33 + 24) = v40;
      sub_1B6E32B38();
      uint64_t v41 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 48))(v9, 1, v52);
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v9, v41);
      uint64_t v56 = v51;
      v55[0] = v30;
      swift_retain();
      sub_1B62FF1F0((uint64_t)v55, (uint64_t)v21);
      long long v38 = &off_1F0F5E2A8;
      break;
    default:
      uint64_t v32 = sub_1B6E30A08();
      swift_allocObject();
      uint64_t v33 = sub_1B6E309F8();
      sub_1B6E32B38();
      uint64_t v34 = v52;
      (*(void (**)(char *, uint64_t, uint64_t))(v18 + 48))(v17, 1, v52);
      (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v29, v17, v34);
      uint64_t v56 = v51;
      v55[0] = v30;
      swift_retain();
      uint64_t v35 = (void (*)(unsigned char *, void))sub_1B6E309D8();
      sub_1B62FF1F0((uint64_t)v55, (uint64_t)v29);
      v35(v54, 0);
      if (v50 == 3)
      {
        uint64_t v36 = (uint64_t (*)(uint64_t))MEMORY[0x1E4F26CD0];
        sub_1B62BF900(0, &qword_1E9DD04B0, MEMORY[0x1E4F26CD0], MEMORY[0x1E4FBBE00]);
        uint64_t v37 = swift_allocObject();
        *(_OWORD *)(v37 + 16) = xmmword_1B6E76B30;
        sub_1B6E30998();
        sub_1B6E30988();
        v55[0] = v37;
        sub_1B6C7B69C(&qword_1E9DD04B8, MEMORY[0x1E4F26CD0]);
        sub_1B62BF900(0, &qword_1E9DD04C0, v36, MEMORY[0x1E4FBB320]);
        sub_1B67E95A0();
        sub_1B6E327B8();
        sub_1B6E309B8();
      }
      long long v38 = &off_1F0F51618;
      break;
  }
  uint64_t v46 = v53;
  v53[3] = v32;
  v46[4] = (uint64_t)v38;
  uint64_t result = swift_release();
  *uint64_t v46 = v33;
  return result;
}

uint64_t sub_1B6C721C8@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B6C7221C@<X0>(BOOL *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v2 != 0;
  return result;
}

uint64_t sub_1B6C72274(uint64_t a1)
{
  unint64_t v2 = sub_1B6AAF8B4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C722B0(uint64_t a1)
{
  unint64_t v2 = sub_1B6AAF8B4();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B6C722EC@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  double result = 0.0;
  *(_OWORD *)a3 = xmmword_1B6E4F270;
  *(void *)(a3 + 16) = a1;
  *(void *)(a3 + 24) = a2;
  return result;
}

uint64_t sub_1B6C72300@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1B6E33098();
  *a2 = a1;
  a2[1] = 0;
  a2[2] = result;
  a2[3] = v5;
  return result;
}

uint64_t sub_1B6C72358(uint64_t a1)
{
  unint64_t v2 = sub_1B62B1B2C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C72394(uint64_t a1)
{
  unint64_t v2 = sub_1B62B1B2C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C723D0()
{
  uint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 == 1) {
    unsigned int v1 = 1;
  }
  else {
    unsigned int v1 = 2;
  }
  if (v0) {
    return v1;
  }
  else {
    return 0;
  }
}

uint64_t sub_1B6C72424(char a1)
{
  if (a1) {
    return 0x72656E6E69;
  }
  else {
    return 0x6E6F6973726576;
  }
}

uint64_t sub_1B6C72458()
{
  swift_getWitnessTable();

  return sub_1B6B37010();
}

uint64_t sub_1B6C724C4(uint64_t a1, uint64_t a2)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v5 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE0](a1, a2, WitnessTable, v5);
}

uint64_t sub_1B6C72530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DF0](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1B6C725A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t WitnessTable = swift_getWitnessTable();
  uint64_t v7 = MEMORY[0x1E4FBB1B0];

  return MEMORY[0x1F4183DE8](a1, a2, a3, WitnessTable, v7);
}

uint64_t sub_1B6C72610@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C723D0();
  *a1 = result;
  return result;
}

uint64_t sub_1B6C7264C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1B6C72424(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B6C72684()
{
  return sub_1B6C72424(*v0);
}

uint64_t sub_1B6C72698@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C723D0();
  *a1 = result;
  return result;
}

uint64_t sub_1B6C726CC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B66475D8();
  *a1 = result;
  return result;
}

uint64_t sub_1B6C72700(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862A8](a1, WitnessTable);
}

uint64_t sub_1B6C72754(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable();

  return MEMORY[0x1F41862B0](a1, WitnessTable);
}

uint64_t sub_1B6C727A8@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v42 = a4;
  uint64_t v41 = *(void *)(a2 - 8);
  MEMORY[0x1F4188790](a1, a2);
  int v44 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0);
  type metadata accessor for VersionedContainer.CodingKeys();
  swift_getWitnessTable();
  uint64_t v8 = sub_1B6E32EA8();
  uint64_t v45 = *(void *)(v8 - 8);
  uint64_t v46 = v8;
  MEMORY[0x1F4188790](v8, v9);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v43 = a3;
  uint64_t v12 = type metadata accessor for VersionedContainer();
  uint64_t v40 = *(void *)(v12 - 8);
  MEMORY[0x1F4188790](v12, v13);
  uint64_t v15 = (uint64_t *)((char *)&v37 - v14);
  uint64_t v16 = a1[3];
  int v48 = a1;
  sub_1B62C14BC(a1, v16);
  uint64_t v17 = v47;
  sub_1B6E33A48();
  if (v17)
  {
    uint64_t v36 = v48;
  }
  else
  {
    uint64_t v18 = v15;
    uint64_t v47 = v12;
    uint64_t v19 = v48;
    uint64_t v20 = v44;
    char v50 = 0;
    uint64_t v21 = sub_1B6E32DD8();
    long long v38 = v18;
    *uint64_t v18 = v21;
    uint64_t v22 = v19[3];
    uint64_t v23 = v19[4];
    sub_1B62C14BC(v19, v22);
    uint64_t v24 = (uint64_t (*)(void))MEMORY[0x1E4FBC5C0];
    uint64_t v39 = *(void *)(sub_1B62BF634(v22, v23, MEMORY[0x1E4FBC5C0]) + 24);
    swift_release();
    uint64_t v25 = v19[3];
    uint64_t v26 = v19[4];
    sub_1B62C14BC(v19, v25);
    uint64_t v27 = v24;
    uint64_t v28 = v46;
    *(void *)(sub_1B62BF634(v25, v26, v27) + 24) = v21;
    swift_release();
    char v49 = 1;
    sub_1B6E32DF8();
    uint64_t v30 = v47;
    uint64_t v31 = v38;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))((char *)v38 + *(int *)(v47 + 44), v20, a2);
    uint64_t v32 = v48;
    uint64_t v33 = v48[3];
    uint64_t v34 = v48[4];
    sub_1B62C14BC(v48, v33);
    uint64_t v35 = sub_1B62BF634(v33, v34, MEMORY[0x1E4FBC5C0]);
    *(void *)(v35 + 24) = v39;
    swift_release();
    (*(void (**)(char *, uint64_t))(v45 + 8))(v11, v28);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(v40 + 32))(v42, v31, v30);
    uint64_t v36 = v32;
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v36);
}

uint64_t sub_1B6C72C1C(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 16);
  v12[0] = *(void *)(a2 + 32);
  v12[1] = v4;
  type metadata accessor for VersionedContainer.CodingKeys();
  swift_getWitnessTable();
  uint64_t v5 = sub_1B6E33038();
  uint64_t v6 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v7);
  uint64_t v9 = (char *)v12 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A88();
  char v14 = 0;
  uint64_t v10 = v12[3];
  sub_1B6E32F88();
  if (!v10)
  {
    char v13 = 1;
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v9, v5);
}

uint64_t sub_1B6C72DC0@<X0>(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B6C727A8(a1, *(void *)(a2 + 16), *(void *)(a2 + 24), a3);
}

uint64_t sub_1B6C72DE4(void *a1, uint64_t a2)
{
  return sub_1B6C72C1C(a1, a2);
}

uint64_t sub_1B6C72DFC(uint64_t a1, uint64_t a2, char a3)
{
  sub_1B62E17B4();
  char v50 = v7;
  MEMORY[0x1F4188790](v7, v8);
  char v49 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v48 = sub_1B6E31098();
  uint64_t v10 = *(void *)(v48 - 8);
  MEMORY[0x1F4188790](v48, v11);
  uint64_t v47 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0);
  int64_t v13 = *(void *)(a1 + 16);
  uint64_t v14 = MEMORY[0x1E4FBC860];
  if (v13)
  {
    uint64_t v40 = v3;
    int v15 = a3 & 1;
    uint64_t v58 = MEMORY[0x1E4FBC860];
    sub_1B6C3D80C(0, v13, 0);
    uint64_t v16 = (void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v17 = (uint64_t *)(a1 + 40);
    char v18 = v15;
    uint64_t v19 = &unk_1EB97E000;
    unint64_t v43 = 0x80000001B6F4F770;
    int v44 = v16;
    unint64_t v42 = 0x80000001B6F4F790;
    long long v41 = xmmword_1B6E77050;
    uint64_t v46 = a2;
    int v45 = v15;
    while (v19[106])
    {
      uint64_t v20 = *(v17 - 1);
      uint64_t v21 = *v17;
      swift_bridgeObjectRetain();
      swift_retain();
      uint64_t v22 = sub_1B62B2184(v20, v21, a2, v18);
      swift_release();
      uint64_t v55 = v22;
      if (v22)
      {
        swift_bridgeObjectRelease();
      }
      else
      {
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        unint64_t v56 = 0;
        unint64_t v57 = 0xE000000000000000;
        uint64_t v54 = qword_1EB997FD0;
        swift_retain();
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        unint64_t v56 = 0xD000000000000015;
        unint64_t v57 = v43;
        sub_1B6E31948();
        sub_1B6E31948();
        unint64_t v23 = v56;
        unint64_t v24 = v57;
        char v25 = sub_1B6E32148();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        uint64_t v52 = v21;
        int64_t v53 = v13;
        uint64_t v26 = qword_1EB997FF0;
        uint64_t v27 = qword_1EB985528;
        swift_retain();
        if (v27 != -1) {
          swift_once();
        }
        sub_1B62BFAF8(0, (unint64_t *)&qword_1EB9855A0, (unint64_t *)&qword_1EB9852E0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
        uint64_t v28 = swift_allocObject();
        *(_OWORD *)(v28 + 16) = v41;
        *(void *)(v28 + 56) = MEMORY[0x1E4FBB1A0];
        *(void *)(v28 + 64) = sub_1B678615C();
        *(void *)(v28 + 32) = v23;
        *(void *)(v28 + 40) = v24;
        swift_bridgeObjectRetain();
        sub_1B6E31258();
        swift_bridgeObjectRelease();
        swift_retain();
        uint64_t v51 = v26;
        uint64_t v29 = v47;
        sub_1B6E31088();
        uint64_t v30 = v50[12];
        uint64_t v31 = v50[16];
        unint64_t v32 = v24;
        uint64_t v33 = (uint64_t)v49;
        unint64_t v34 = v23;
        uint64_t v35 = &v49[v50[20]];
        (*v44)(v49, v29, v48);
        *(unsigned char *)(v33 + v30) = v25;
        *(void *)(v33 + v31) = 0;
        *(void *)uint64_t v35 = v34;
        *((void *)v35 + 1) = v32;
        swift_bridgeObjectRetain();
        sub_1B6E31368();
        swift_release();
        sub_1B62BFFD4(v33, (uint64_t (*)(void))sub_1B62E17B4);
        swift_bridgeObjectRelease();
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
        a2 = v46;
        char v18 = v45;
        uint64_t v19 = (void *)&unk_1EB97E000;
        int64_t v13 = v53;
      }
      uint64_t v14 = v58;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B6C3D80C(0, *(void *)(v14 + 16) + 1, 1);
        uint64_t v14 = v58;
      }
      unint64_t v37 = *(void *)(v14 + 16);
      unint64_t v36 = *(void *)(v14 + 24);
      if (v37 >= v36 >> 1)
      {
        sub_1B6C3D80C(v36 > 1, v37 + 1, 1);
        uint64_t v14 = v58;
      }
      v17 += 2;
      *(void *)(v14 + 16) = v37 + 1;
      *(void *)(v14 + 8 * v37 + 32) = v55;
      if (!--v13)
      {
        uint64_t v3 = v40;
        goto LABEL_19;
      }
    }
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  else
  {
LABEL_19:
    *(void *)(v3 + 128) = v14;
    return swift_bridgeObjectRelease();
  }
  return result;
}

uint64_t sub_1B6C73344()
{
  uint64_t v1 = *(void *)(v0 + 128);
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = MEMORY[0x1E4FBC860];
  if (v2)
  {
    uint64_t v14 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1B6C3C3B8(0, v2, 0);
    uint64_t v4 = 0;
    uint64_t v3 = v14;
    do
    {
      if (*(void *)(v1 + 8 * v4 + 32))
      {
        uint64_t v5 = sub_1B6E33B48();
        unint64_t v7 = v6;
        unint64_t v13 = v6;
        swift_bridgeObjectRetain();
        char v8 = sub_1B6E319F8();
        swift_bridgeObjectRelease();
        if (v8)
        {
          sub_1B6E318F8();
          sub_1B6E31868();
          unint64_t v7 = v13;
        }
      }
      else
      {
        uint64_t v5 = 0;
        unint64_t v7 = 0xE000000000000000;
      }
      unint64_t v10 = *(void *)(v14 + 16);
      unint64_t v9 = *(void *)(v14 + 24);
      if (v10 >= v9 >> 1) {
        sub_1B6C3C3B8(v9 > 1, v10 + 1, 1);
      }
      ++v4;
      *(void *)(v14 + 16) = v10 + 1;
      uint64_t v11 = v14 + 16 * v10;
      *(void *)(v11 + 32) = v5;
      *(void *)(v11 + 40) = v7;
    }
    while (v2 != v4);
    swift_bridgeObjectRelease();
  }
  return v3;
}

uint64_t sub_1B6C734D0(uint64_t a1)
{
  uint64_t v3 = *(void **)(v1 + 128);
  uint64_t v4 = v3[2];
  if (v4)
  {
    uint64_t result = 0;
    while (1)
    {
      uint64_t v6 = v3[result + 4];
      if (v6 && v6 == a1) {
        break;
      }
      if (v4 == ++result) {
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v1 + 128) = v3;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v3 = sub_1B68C6470(0, v4 + 1, 1, v3);
      *(void *)(v1 + 128) = v3;
    }
    unint64_t v10 = v3[2];
    unint64_t v9 = v3[3];
    if (v10 >= v9 >> 1) {
      uint64_t v3 = sub_1B68C6470(v9 > 1, v10 + 1, 1, v3);
    }
    v3[2] = v10 + 1;
    v3[v10 + 4] = a1;
    *(void *)(v1 + 128) = v3;
    return v4;
  }
  return result;
}

uint64_t sub_1B6C735A4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *(void **)(v1 + 136);
  uint64_t v5 = v4[2];
  if (!v5)
  {
    uint64_t v6 = 0;
LABEL_18:
    swift_retain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *(void *)(v2 + 136) = v4;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      uint64_t v4 = sub_1B68C5E9C(0, v6 + 1, 1, v4);
      *(void *)(v2 + 136) = v4;
    }
    unint64_t v15 = v4[2];
    unint64_t v14 = v4[3];
    if (v15 >= v14 >> 1) {
      uint64_t v4 = sub_1B68C5E9C(v14 > 1, v15 + 1, 1, v4);
    }
    uint64_t v4[2] = v15 + 1;
    v4[v15 + 4] = a1;
    *(void *)(v2 + 136) = v4;
    return v6;
  }
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  while (1)
  {
    unint64_t v7 = (void *)v4[v6 + 4];
    if (!v7) {
      goto LABEL_4;
    }
    swift_retain();
    swift_retain();
    uint64_t v8 = sub_1B6E32738();
    uint64_t result = swift_conformsToProtocol2();
    if (!result) {
      break;
    }
    uint64_t v10 = sub_1B6E32738();
    uint64_t result = swift_conformsToProtocol2();
    if (!result) {
      goto LABEL_26;
    }
    if (v8 == v10 && v7[5] == a1[5])
    {
      if (v7[2] == a1[2] && v7[3] == a1[3])
      {
        swift_bridgeObjectRelease();
        swift_release();
        swift_release();
        return v6;
      }
      char v12 = sub_1B6E334B8();
      swift_release();
      swift_release();
      if (v12)
      {
        swift_bridgeObjectRelease();
        return v6;
      }
    }
    else
    {
      swift_release();
      swift_release();
    }
LABEL_4:
    if (v5 == ++v6)
    {
      swift_bridgeObjectRelease();
      uint64_t v4 = *(void **)(v2 + 136);
      uint64_t v6 = v4[2];
      goto LABEL_18;
    }
  }
  __break(1u);
LABEL_26:
  __break(1u);
  return result;
}

void sub_1B6C737E0()
{
}

uint64_t sub_1B6C7383C(void *a1, uint64_t a2)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  nullsub_1(a2);
  sub_1B6E31518();
  swift_bridgeObjectRetain();
  swift_getWitnessTable();
  uint64_t v7 = sub_1B6E31D58();
  sub_1B62C550C((uint64_t)v5, v6);
  sub_1B6E31D18();
  swift_getWitnessTable();
  sub_1B6E332B8();
  swift_bridgeObjectRelease();
  if (!v4)
  {
    uint64_t v7 = a2;
    sub_1B6E31538();
    swift_bridgeObjectRetain();
    swift_getWitnessTable();
    uint64_t v7 = sub_1B6E31D58();
    sub_1B62C550C((uint64_t)v5, v6);
    sub_1B6E31D18();
    swift_getWitnessTable();
    sub_1B6E332B8();
    swift_bridgeObjectRelease();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
}

uint64_t sub_1B6C73A84(void *a1)
{
  return sub_1B6C7383C(a1, *v1);
}

uint64_t sub_1B6C73ABC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1B6C7AB90(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1B6C73AE8()
{
  type metadata accessor for BinaryCodingTypeRegistry();
  uint64_t v0 = swift_allocObject();
  *(void *)(v0 + 16) = sub_1B67F56CC(MEMORY[0x1E4FBC860]);
  uint64_t result = sub_1B6C73B38();
  qword_1EB997DE8 = v0;
  return result;
}

uint64_t sub_1B6C73B38()
{
  sub_1B6C7888C(0, &qword_1EB97E658, (void (*)(void))sub_1B6C78414, (void (*)(void))sub_1B6C78468);
  uint64_t v2 = v1;
  unint64_t v3 = sub_1B6C78414();
  unint64_t v4 = sub_1B6C78468();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v36 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0x8000000000000000;
  sub_1B67E5A9C((uint64_t)&type metadata for EntityCoder, v3, v4, v2, isUniquelyReferenced_nonNull_native);
  *(void *)(v0 + 16) = v36;
  swift_bridgeObjectRelease();
  sub_1B6C7888C(0, &qword_1EB97E680, (void (*)(void))sub_1B62B1EFC, (void (*)(void))sub_1B68789A4);
  uint64_t v7 = v6;
  unint64_t v8 = sub_1B62B1EFC();
  unint64_t v9 = sub_1B68789A4();
  char v10 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v37 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0x8000000000000000;
  sub_1B67E5A9C((uint64_t)&type metadata for ComponentProperty, v8, v9, v7, v10);
  *(void *)(v0 + 16) = v37;
  swift_bridgeObjectRelease();
  sub_1B6C784BC();
  uint64_t v12 = v11;
  sub_1B62BFA00(0, &qword_1EB97DB78, (uint64_t (*)(void))sub_1B62B1EFC, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DecodeOrNil);
  uint64_t v14 = v13;
  uint64_t v15 = sub_1B6C785A4(&qword_1EB97DB70);
  uint64_t v16 = sub_1B6C785A4(&qword_1EB97DB68);
  char v17 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v38 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0x8000000000000000;
  sub_1B67E5A9C(v14, v15, v16, v12, v17);
  *(void *)(v0 + 16) = v38;
  swift_bridgeObjectRelease();
  sub_1B6C78620();
  uint64_t v19 = v18;
  sub_1B62F7FEC(0, &qword_1EB97ED60, (uint64_t)&type metadata for ComponentProperty, MEMORY[0x1E4FBB718]);
  uint64_t v21 = v20;
  unint64_t v22 = sub_1B6C786BC();
  unint64_t v23 = sub_1B6C78750();
  char v24 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v39 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0x8000000000000000;
  sub_1B67E5A9C(v21, v22, v23, v19, v24);
  *(void *)(v0 + 16) = v39;
  swift_bridgeObjectRelease();
  sub_1B6C7888C(0, &qword_1EB97E660, (void (*)(void))sub_1B6C787E4, (void (*)(void))sub_1B6C78838);
  uint64_t v26 = v25;
  unint64_t v27 = sub_1B6C787E4();
  unint64_t v28 = sub_1B6C78838();
  char v29 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v40 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0x8000000000000000;
  sub_1B67E5A9C((uint64_t)&type metadata for RelationsCoder, v27, v28, v26, v29);
  *(void *)(v0 + 16) = v40;
  swift_bridgeObjectRelease();
  sub_1B6C7888C(0, &qword_1EB97E678, (void (*)(void))sub_1B6C32284, (void (*)(void))sub_1B6C32344);
  uint64_t v31 = v30;
  unint64_t v32 = sub_1B6C32284();
  unint64_t v33 = sub_1B6C32344();
  char v34 = swift_isUniquelyReferenced_nonNull_native();
  uint64_t v41 = *(void *)(v0 + 16);
  *(void *)(v0 + 16) = 0x8000000000000000;
  sub_1B67E5A9C((uint64_t)&type metadata for RelationPair, v32, v33, v31, v34);
  *(void *)(v0 + 16) = v41;

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C73F44(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB3490(*a1, *a2);
}

uint64_t sub_1B6C73F50()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C7406C()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C74170()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C74288@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C783C8();
  *a1 = result;
  return result;
}

void sub_1B6C742B8(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEB00000000656C62;
  uint64_t v3 = 0x6154797469746E65;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE800000000000000;
      uint64_t v3 = 0x7365697469746E65;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6E6F6974616C6572;
      *(void *)(a1 + 8) = 0xE900000000000073;
      break;
    case 3:
      strcpy((char *)a1, "componentTable");
      *(unsigned char *)(a1 + 15) = -18;
      break;
    case 4:
      strcpy((char *)a1, "propertyTable");
      *(_WORD *)(a1 + 14) = -4864;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1B6C74398()
{
  uint64_t result = 0x6154797469746E65;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x7365697469746E65;
      break;
    case 2:
      uint64_t result = 0x6E6F6974616C6572;
      break;
    case 3:
      uint64_t result = 0x6E656E6F706D6F63;
      break;
    case 4:
      uint64_t result = 0x79747265706F7270;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6C74468@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C783C8();
  *a1 = result;
  return result;
}

uint64_t sub_1B6C74490(uint64_t a1)
{
  unint64_t v2 = sub_1B6C7B3A4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C744CC(uint64_t a1)
{
  unint64_t v2 = sub_1B6C7B3A4();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *sub_1B6C74508(void *result, char **a2, uint64_t a3, void *a4, void *a5)
{
  uint64_t v5 = result[3];
  uint64_t v6 = result[4];
  uint64_t v7 = v6 - v5;
  if (v6 == v5) {
    return result;
  }
  unint64_t v9 = a4;
  char v10 = a2;
  uint64_t v55 = a3 + 32;
  uint64_t v11 = 4 * result[6];
  uint64_t v12 = result[1];
  uint64_t v54 = v12;
  while (1)
  {
    uint64_t v14 = swift_retain();
    if (*(unsigned char *)(v12 + 184)) {
      break;
    }
    unsigned int v15 = *(_DWORD *)(*(void *)(v12 + 168) + v11);
    uint64_t v16 = *(unsigned int *)(*(void *)(v14 + OBJC_IVAR____TtC3VFX13EntityManager__entries) + 12 * (int)v15 + 8);
    swift_release();
    char v17 = *v10;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    *char v10 = v17;
    uint64_t v58 = v7;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      char v17 = sub_1B633F784(0, *((void *)v17 + 2) + 1, 1, v17);
      *char v10 = v17;
    }
    unint64_t v20 = *((void *)v17 + 2);
    unint64_t v19 = *((void *)v17 + 3);
    if (v20 >= v19 >> 1) {
      char v17 = sub_1B633F784(v19 > 1, v20 + 1, 1, v17);
    }
    *((void *)v17 + 2) = v20 + 1;
    uint64_t v21 = &v17[8 * v20];
    *((_DWORD *)v21 + 8) = v15;
    *((_DWORD *)v21 + 9) = v16;
    *char v10 = v17;
    uint64_t v59 = *(void *)(v55 + 8 * *v9);
    char v22 = swift_isUniquelyReferenced_nonNull_native();
    unint64_t v23 = (void *)a5[13];
    a5[13] = 0x8000000000000000;
    unint64_t v25 = sub_1B62C5AB0(v59);
    char v26 = v24;
    uint64_t v27 = v23[2] + ((v24 & 1) == 0);
    if (v23[3] >= v27)
    {
      if (v22)
      {
        uint64_t v30 = v23;
        if ((v24 & 1) == 0) {
          goto LABEL_14;
        }
      }
      else
      {
        sub_1B6AD6AF0();
        uint64_t v30 = v23;
        if ((v26 & 1) == 0) {
          goto LABEL_14;
        }
      }
    }
    else
    {
      sub_1B6AC6F9C(v27, v22);
      unint64_t v28 = sub_1B62C5AB0(v59);
      if ((v26 & 1) != (v29 & 1)) {
        goto LABEL_39;
      }
      unint64_t v25 = v28;
      uint64_t v30 = v23;
      if ((v26 & 1) == 0)
      {
LABEL_14:
        v30[(v25 >> 6) + 8] |= 1 << v25;
        *(_DWORD *)(v30[6] + 4 * v25) = v59;
        uint64_t v31 = (unsigned int *)(v30[7] + 8 * v25);
        *uint64_t v31 = v15;
        v31[1] = v16;
        ++v30[2];
        goto LABEL_18;
      }
    }
    unint64_t v32 = (unsigned int *)(v30[7] + 8 * v25);
    *unint64_t v32 = v15;
    v32[1] = v16;
LABEL_18:
    a5[13] = v30;
    swift_bridgeObjectRelease();
    char v33 = swift_isUniquelyReferenced_nonNull_native();
    char v34 = (void *)a5[14];
    a5[14] = 0x8000000000000000;
    unint64_t v36 = sub_1B62BE38C(v59 | ((unint64_t)HIDWORD(v59) << 32));
    char v37 = v35;
    uint64_t v38 = v34[2] + ((v35 & 1) == 0);
    if (v34[3] >= v38)
    {
      if (v33)
      {
        uint64_t v41 = v34;
        if ((v35 & 1) == 0) {
          goto LABEL_21;
        }
      }
      else
      {
        sub_1B6ACF9E4();
        uint64_t v41 = v34;
        if ((v37 & 1) == 0) {
          goto LABEL_21;
        }
      }
    }
    else
    {
      sub_1B6ABCA9C(v38, v33);
      uint64_t v39 = sub_1B62BE38C(v59 | ((unint64_t)HIDWORD(v59) << 32));
      if ((v37 & 1) != (v40 & 1)) {
        goto LABEL_37;
      }
      unint64_t v36 = v39;
      uint64_t v41 = v34;
      if ((v37 & 1) == 0)
      {
LABEL_21:
        v41[(v36 >> 6) + 8] |= 1 << v36;
        *(void *)(v41[6] + 8 * v36) = v59;
        unint64_t v42 = (unsigned int *)(v41[7] + 8 * v36);
        *unint64_t v42 = v15;
        v42[1] = v16;
        ++v41[2];
        goto LABEL_25;
      }
    }
    unint64_t v43 = (unsigned int *)(v41[7] + 8 * v36);
    *unint64_t v43 = v15;
    v43[1] = v16;
LABEL_25:
    a5[14] = v41;
    swift_bridgeObjectRelease();
    char v44 = swift_isUniquelyReferenced_nonNull_native();
    int v45 = (void *)a5[15];
    a5[15] = 0x8000000000000000;
    unint64_t v46 = v15 | (unint64_t)(v16 << 32);
    unint64_t v47 = sub_1B62BE38C(v46);
    char v49 = v48;
    uint64_t v50 = v45[2] + ((v48 & 1) == 0);
    if (v45[3] >= v50)
    {
      char v10 = a2;
      if ((v44 & 1) == 0) {
        sub_1B6ACF9E4();
      }
      unint64_t v9 = a4;
      int64_t v53 = v45;
      if (v49) {
        goto LABEL_32;
      }
    }
    else
    {
      sub_1B6ABCA9C(v50, v44);
      uint64_t v51 = sub_1B62BE38C(v46);
      if ((v49 & 1) != (v52 & 1))
      {
LABEL_37:
        sub_1B6E33838();
        __break(1u);
        break;
      }
      unint64_t v47 = v51;
      char v10 = a2;
      unint64_t v9 = a4;
      int64_t v53 = v45;
      if (v49)
      {
LABEL_32:
        *(void *)(v53[7] + 8 * v47) = v59;
        goto LABEL_5;
      }
    }
    v53[(v47 >> 6) + 8] |= 1 << v47;
    uint64_t v13 = (unsigned int *)(v53[6] + 8 * v47);
    *uint64_t v13 = v15;
    v13[1] = v16;
    *(void *)(v53[7] + 8 * v47) = v59;
    ++v53[2];
LABEL_5:
    uint64_t v12 = v54;
    a5[15] = v53;
    uint64_t result = (void *)swift_bridgeObjectRelease();
    ++*v9;
    v11 += 4;
    uint64_t v7 = v58 - 1;
    if (v58 == 1) {
      return result;
    }
  }
  sub_1B6E32BE8();
  __break(1u);
LABEL_39:
  uint64_t result = (void *)sub_1B6E33838();
  __break(1u);
  return result;
}

uint64_t sub_1B6C749DC(uint64_t a1, unint64_t a2, uint64_t a3, char a4, uint64_t a5, double a6)
{
  int64_t v7 = *(void *)(a5 + 16);
  uint64_t v8 = MEMORY[0x1E4FBC860];
  if (v7)
  {
    uint64_t v44 = MEMORY[0x1E4FBC860];
    swift_bridgeObjectRetain();
    sub_1B63977D8(0, v7, 0);
    uint64_t v10 = a5 + 32;
    uint64_t v8 = v44;
    int64_t v11 = v7;
    do
    {
      sub_1B62C1550(v10, (uint64_t)v41);
      sub_1B62C14BC(v41, v42);
      uint64_t DynamicType = swift_getDynamicType();
      uint64_t v13 = v43;
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        sub_1B63977D8(0, *(void *)(v8 + 16) + 1, 1);
        uint64_t v8 = v44;
      }
      unint64_t v15 = *(void *)(v8 + 16);
      unint64_t v14 = *(void *)(v8 + 24);
      if (v15 >= v14 >> 1)
      {
        sub_1B63977D8(v14 > 1, v15 + 1, 1);
        uint64_t v8 = v44;
      }
      *(void *)(v8 + 16) = v15 + 1;
      uint64_t v16 = v8 + 16 * v15;
      *(void *)(v16 + 32) = DynamicType;
      *(void *)(v16 + 40) = v13;
      v10 += 40;
      --v11;
    }
    while (v11);
    swift_bridgeObjectRelease();
  }
  thread_worker_index(&thread_worker_index, a6);
  uint64_t v17 = a1 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(a1 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
  uint64_t v18 = swift_bridgeObjectRetain();
  uint64_t v19 = sub_1B63B7CC4(v18, MEMORY[0x1E4FBC860]);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = sub_1B637FE60(v19);
  if ((v23 & 1) != 0 || (unint64_t v24 = sub_1B63581E4(v21, v22), v25 = v24, (v24 & 0x100000000) != 0))
  {
    swift_bridgeObjectRetain();
    signed int v25 = sub_1B637C7BC(v19, v21, v8, MEMORY[0x1E4FBC860]);
    swift_bridgeObjectRelease();
  }
  char v26 = *(os_unfair_lock_s **)(v17 + 24);
  swift_retain();
  os_unfair_lock_unlock(v26);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1B635AB28(a3);
  uint64_t v28 = *(void *)(*(void *)(a1 + 136) + 8 * (int)v27 + 32);
  char v29 = *(os_unfair_lock_s **)(v28 + 376);
  swift_retain();
  os_unfair_lock_lock(v29);
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v28 + 344));
  sub_1B62F7FEC(0, &qword_1EB980D48, MEMORY[0x1E4FBB550], MEMORY[0x1E4FBBE00]);
  uint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
  *(void *)(inited + 32) = v27 << 16 >> 48;
  sub_1B6BF31B8((void *)inited, v25, a4 & 1, a2 | ((HIDWORD(a2) & 1) << 32), 0, 0, 0, 0);
  swift_setDeallocating();
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 344));
  os_unfair_lock_unlock(*(os_unfair_lock_t *)(v28 + 376));
  if (!v7) {
    return swift_release();
  }
  uint64_t v31 = a5 + 32;
  swift_bridgeObjectRetain();
  do
  {
    sub_1B62C1550(v31, (uint64_t)v41);
    sub_1B62C14BC(v41, v42);
    uint64_t v32 = swift_getDynamicType();
    uint64_t v33 = v43;
    uint64_t v34 = sub_1B62CD84C(v32);
    if (v34 >= 1)
    {
      MEMORY[0x1F4188790](v34, v35);
      sub_1B6BFB680(v32, v33, a3, (void (*)(uint64_t))sub_1B6C7B6E4);
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v41);
    v31 += 40;
    --v7;
  }
  while (v7);
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C74DE0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v55 = a3;
  sub_1B62BFA00(0, &qword_1E9DD7C58, (uint64_t (*)(void))sub_1B6C7B3A4, (uint64_t)&type metadata for EntityManagerCoder.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  int64_t v11 = &v50[-v10];
  uint64_t v12 = a1[3];
  char v52 = a1;
  sub_1B62C14BC(a1, v12);
  sub_1B6C7B3A4();
  uint64_t v13 = v11;
  sub_1B6E33A88();
  LOBYTE(v57[0]) = 0;
  sub_1B6E32EC8();
  uint64_t v14 = a2[2];
  if (v14)
  {
    unint64_t v56 = v11;
    uint64_t v54 = v7;
    swift_bridgeObjectRetain();
    uint64_t v15 = 0;
    while (1)
    {
      v57[0] = a2[v15 + 4];
      sub_1B62C550C((uint64_t)v59, v60);
      sub_1B6C7B6F0();
      sub_1B6E332B8();
      if (v3) {
        break;
      }
      if (v14 == ++v15)
      {
        swift_bridgeObjectRelease();
        uint64_t v53 = v8;
        uint64_t v7 = v54;
        uint64_t v13 = v56;
        goto LABEL_7;
      }
    }
    swift_bridgeObjectRelease();
    (*(void (**)(unsigned char *, uint64_t))(v8 + 8))(v56, v54);
  }
  else
  {
    uint64_t v53 = v8;
LABEL_7:
    uint64_t v16 = v55;
    swift_bridgeObjectRetain_n();
    swift_unownedRetain();
    uint64_t v17 = sub_1B6C70E58((uint64_t)a2, (uint64_t)a2, v16);
    swift_bridgeObjectRelease();
    v57[0] = v17;
    char v58 = 1;
    sub_1B6C7888C(0, &qword_1EB97E658, (void (*)(void))sub_1B6C78414, (void (*)(void))sub_1B6C78468);
    sub_1B6C7B744(&qword_1E9DD7C68);
    sub_1B6E32FA8();
    if (v3)
    {
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v53 + 8))(v13, v7);
    }
    else
    {
      swift_bridgeObjectRelease();
      uint64_t v18 = v7;
      uint64_t v19 = v52;
      uint64_t v20 = v52[3];
      uint64_t v21 = v52[4];
      sub_1B62C14BC(v52, v20);
      unint64_t v56 = v13;
      uint64_t v22 = (uint64_t (*)(void))MEMORY[0x1E4FBC5D8];
      int v51 = *(unsigned __int8 *)(sub_1B62BF634(v20, v21, MEMORY[0x1E4FBC5D8]) + 86);
      swift_release();
      uint64_t v23 = v19[3];
      uint64_t v24 = v19[4];
      sub_1B62C14BC(v19, v23);
      *(unsigned char *)(sub_1B62BF634(v23, v24, v22) + 86) = 0;
      swift_release();
      uint64_t v25 = v19[3];
      uint64_t v26 = v19[4];
      sub_1B62C14BC(v19, v25);
      uint64_t v27 = *(void *)(sub_1B62BF634(v25, v26, v22) + 136);
      swift_bridgeObjectRetain();
      swift_release();
      v57[0] = v27;
      char v58 = 4;
      sub_1B6C78620();
      sub_1B6C7B69C(&qword_1E9DD7C70, (void (*)(uint64_t))sub_1B6C78620);
      sub_1B6E32FA8();
      uint64_t v54 = v18;
      swift_bridgeObjectRelease();
      uint64_t v28 = v19[3];
      uint64_t v29 = v19[4];
      sub_1B62C14BC(v19, v28);
      uint64_t v30 = (uint64_t (*)(void))MEMORY[0x1E4FBC5D8];
      uint64_t v31 = sub_1B62BF634(v28, v29, MEMORY[0x1E4FBC5D8]);
      *(unsigned char *)(v31 + 86) = v51;
      swift_release();
      uint64_t v32 = v19[3];
      uint64_t v33 = v19[4];
      sub_1B62C14BC(v19, v32);
      uint64_t v34 = sub_1B62BF634(v32, v33, v30);
      if (v14)
      {
        sub_1B67FB298();
        uint64_t v35 = sub_1B6E32C58();
      }
      else
      {
        uint64_t v35 = MEMORY[0x1E4FBC868];
      }
      uint64_t v36 = v53;
      v57[0] = v35;
      swift_bridgeObjectRetain_n();
      sub_1B6C777A4(a2, a2, 1, v57);
      swift_bridgeObjectRelease_n();
      *(void *)(v34 + 112) = v57[0];
      swift_release();
      swift_bridgeObjectRelease();
      swift_unownedRetainStrong();
      uint64_t v37 = swift_bridgeObjectRetain();
      uint64_t v38 = sub_1B6B1B784(v37);
      swift_release();
      uint64_t v39 = swift_bridgeObjectRelease();
      MEMORY[0x1F4188790](v39, v40);
      *(void *)&v50[-32] = a2;
      *(void *)&v50[-24] = v41;
      uint64_t v42 = v52;
      *(void *)&v50[-16] = v52;
      uint64_t v43 = sub_1B6804754((void (*)(long long *__return_ptr, long long *))sub_1B6C7B7C0, (uint64_t)&v50[-48], v38);
      swift_bridgeObjectRelease();
      v57[0] = v43;
      char v58 = 2;
      sub_1B62F7FEC(0, &qword_1EB980208, (uint64_t)&type metadata for RelationsCoder, MEMORY[0x1E4FBB320]);
      sub_1B6C7B7E4();
      sub_1B6E32FA8();
      swift_bridgeObjectRelease();
      char v58 = 3;
      sub_1B6E32EC8();
      uint64_t v44 = v42[3];
      uint64_t v45 = v42[4];
      sub_1B62C14BC(v42, v44);
      sub_1B62BF634(v44, v45, MEMORY[0x1E4FBC5D8]);
      uint64_t v46 = sub_1B6C73344();
      swift_release();
      uint64_t v47 = *(void *)(v46 + 16);
      uint64_t v55 = v46;
      if (v47)
      {
        uint64_t v48 = v46 + 40;
        do
        {
          sub_1B62C550C((uint64_t)v57, v57[3]);
          swift_bridgeObjectRetain();
          sub_1B6E33268();
          v48 += 16;
          swift_bridgeObjectRelease();
          --v47;
        }
        while (v47);
      }
      swift_bridgeObjectRelease();
      (*(void (**)(unsigned char *, uint64_t))(v36 + 8))(v56, v54);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v57);
    }
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v59);
}

uint64_t sub_1B6C75628@<X0>(uint64_t *a1@<X0>, void *a2@<X3>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  uint64_t v6 = a1[1];
  swift_unownedRetainStrong();
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  sub_1B62C14BC(a2, v7);
  uint64_t v9 = *(void *)(sub_1B62BF634(v7, v8, MEMORY[0x1E4FBC5D8]) + 112);
  swift_bridgeObjectRetain();
  swift_release();
  uint64_t v10 = sub_1B6C31490(v5);
  swift_bridgeObjectRetain();
  uint64_t v11 = sub_1B6C79C2C(v10, v9);
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease_n();
  *a3 = v5;
  a3[1] = v6;
  a3[2] = v11;
  return result;
}

char *sub_1B6C75728@<X0>(void *a1@<X0>, char **a2@<X8>)
{
  uint64_t result = sub_1B6C79D88(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B6C75754(void *a1)
{
  return sub_1B6C74DE0(a1, *(void **)v1, *(void *)(v1 + 8));
}

uint64_t sub_1B6C75770(void *a1)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  sub_1B62C1550(v1, (uint64_t)&v36);
  sub_1B62C14BC(&v36, v38);
  uint64_t DynamicType = swift_getDynamicType();
  uint64_t v7 = v39;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v36);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_1B62C14BC(a1, v8);
  uint64_t v10 = (uint64_t (*)(void))MEMORY[0x1E4FBC5D8];
  uint64_t v11 = sub_1B62BF634(v8, v9, MEMORY[0x1E4FBC5D8]);
  *(void *)(v11 + 56) = DynamicType;
  *(void *)(v11 + 64) = v7;
  swift_release();
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_1B62C14BC(a1, v12);
  LODWORD(v12) = *(unsigned __int8 *)(sub_1B62BF634(v12, v13, v10) + 84);
  swift_release();
  if (v12 == 1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    uint64_t v36 = 0x676E69646F636E65;
    unint64_t v37 = 0xE900000000000020;
    swift_retain();
    sub_1B6E33B48();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t v14 = v36;
    uint64_t v15 = v37;
    int v16 = sub_1B6E32138();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    uint64_t v36 = 0;
    swift_retain();
    sub_1B6B33E34(v16, &v36, v14, v15);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  sub_1B62C1550(v4, (uint64_t)v35);
  sub_1B62C5560(0, (unint64_t *)&qword_1EB97FFF0);
  sub_1B62C5560(0, &qword_1E9DD7010);
  if (swift_dynamicCast())
  {
    sub_1B62C15C4(v33, (uint64_t)&v36);
    v35[0] = DynamicType;
    sub_1B62C550C((uint64_t)v40, v41);
    sub_1B67CD420();
    sub_1B6E332B8();
    if (!v2)
    {
      sub_1B62C14BC(&v36, v38);
      sub_1B6AB3B8C((uint64_t)v40);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v36);
      goto LABEL_19;
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v36);
  }
  else
  {
    uint64_t v34 = 0;
    memset(v33, 0, sizeof(v33));
    sub_1B62BFB60((uint64_t)v33, &qword_1E9DD7D38, &qword_1E9DD7010, MEMORY[0x1E4FBAEE0]);
    uint64_t v36 = 0;
    unint64_t v37 = 0xE000000000000000;
    sub_1B6E328C8();
    uint64_t v17 = sub_1B6E33B48();
    unint64_t v19 = v18;
    swift_bridgeObjectRelease();
    uint64_t v36 = v17;
    unint64_t v37 = v19;
    sub_1B6E31948();
    uint64_t v20 = v36;
    unint64_t v21 = v37;
    sub_1B67CD358();
    uint64_t v3 = swift_allocError();
    *(void *)uint64_t v22 = v20;
    *(void *)(v22 + 8) = v21;
    *(unsigned char *)(v22 + 16) = 64;
    swift_willThrow();
  }
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  sub_1B62C14BC(a1, v23);
  LODWORD(v23) = *(unsigned __int8 *)(sub_1B62BF634(v23, v24, MEMORY[0x1E4FBC5D8]) + 83);
  swift_release();
  if (v23 == 1)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    uint64_t v36 = 0;
    unint64_t v37 = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    sub_1B6E33B48();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    v35[0] = v3;
    sub_1B62C5560(0, (unint64_t *)&qword_1EB980E40);
    sub_1B6E32B18();
    uint64_t v25 = v36;
    uint64_t v26 = v37;
    int v27 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    uint64_t v36 = 0;
    swift_retain();
    sub_1B6B33E34(v27, &v36, v25, v26);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1B67CD358();
    swift_allocError();
    *(void *)uint64_t v28 = v3;
    *(void *)(v28 + 8) = 0;
    *(unsigned char *)(v28 + 16) = -32;
  }
  swift_willThrow();
LABEL_19:
  uint64_t v29 = a1[3];
  uint64_t v30 = a1[4];
  sub_1B62C14BC(a1, v29);
  uint64_t v31 = sub_1B62BF634(v29, v30, MEMORY[0x1E4FBC5D8]);
  *(void *)(v31 + 56) = 0;
  *(void *)(v31 + 64) = 0;
  swift_release();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v40);
}

uint64_t sub_1B6C75D94(void *a1)
{
  return sub_1B6C75770(a1);
}

uint64_t sub_1B6C75DAC(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1B62C14BC(a1, v9);
  uint64_t v11 = sub_1B62BF634(v9, v10, MEMORY[0x1E4FBC5D8]);
  *(void *)(v11 + 40) = a2;
  *(unsigned char *)(v11 + 48) = 0;
  swift_release();
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  sub_1B62C550C((uint64_t)v25, v26);
  sub_1B6E332C8();
  if (!v4)
  {
    if ((a3 & 1) == 0)
    {
      sub_1B62C550C((uint64_t)v25, v26);
      sub_1B6E33278();
    }
    sub_1B62C550C((uint64_t)v25, v26);
    sub_1B6E33258();
    uint64_t v12 = *(void *)(a4 + 16);
    if (v12)
    {
      uint64_t v13 = (void *)(a4 + 32);
      swift_bridgeObjectRetain();
      do
      {
        uint64_t v14 = v13[3];
        uint64_t v15 = v13[4];
        int v16 = sub_1B62C14BC(v13, v14);
        v22[3] = v14;
        _OWORD v22[4] = *(void *)(v15 + 8);
        uint64_t v17 = sub_1B62C12C4(v22);
        (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v14 - 8) + 16))(v17, v16, v14);
        sub_1B62C550C((uint64_t)v23, v24);
        sub_1B6C7B350();
        sub_1B6E332B8();
        sub_1B62C0DD4((uint64_t)v22);
        v13 += 5;
        --v12;
      }
      while (v12);
      swift_bridgeObjectRelease();
    }
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v23);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v25);
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  sub_1B62C14BC(a1, v18);
  uint64_t v20 = sub_1B62BF634(v18, v19, MEMORY[0x1E4FBC5D8]);
  *(void *)(v20 + 40) = 0;
  *(unsigned char *)(v20 + 48) = 1;
  return swift_release();
}

uint64_t sub_1B6C760B0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v6 = a4[3];
  uint64_t v7 = a4[4];
  uint64_t v8 = sub_1B62C14BC(a4, v6);
  v11[3] = v6;
  v11[4] = *(void *)(v7 + 8);
  uint64_t v9 = sub_1B62C12C4(v11);
  (*(void (**)(uint64_t *, void *, uint64_t))(*(void *)(v6 - 8) + 16))(v9, v8, v6);
  sub_1B6B3F674((uint64_t)v11, a1, a2);
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v11);
}

uint64_t sub_1B6C76164(void *a1)
{
  return sub_1B6C75DAC(a1, *(void *)v1, *(unsigned char *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_1B6C76188()
{
  return sub_1B6E309E8();
}

void (*sub_1B6C761AC(void *a1))(void *)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = sub_1B6E309D8();
  return sub_1B6A85718;
}

uint64_t sub_1B6C76208()
{
  return sub_1B6E309C8();
}

uint64_t sub_1B6C7622C()
{
  return sub_1B6E30958();
}

void (*sub_1B6C76250(void *a1))(void *)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = sub_1B6E30948();
  return sub_1B6A85718;
}

uint64_t sub_1B6C762AC()
{
  return sub_1B6E30938();
}

uint64_t sub_1B6C762D0()
{
  return sub_1B6E30CC8();
}

void (*sub_1B6C762F4(void *a1))(void *)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = sub_1B6E30CB8();
  return sub_1B6A85718;
}

uint64_t sub_1B6C76350()
{
  return sub_1B6E30CA8();
}

uint64_t sub_1B6C76374()
{
  return sub_1B6E30C68();
}

void (*sub_1B6C76398(void *a1))(void *)
{
  uint64_t v2 = malloc(0x28uLL);
  *a1 = v2;
  void v2[4] = sub_1B6E30C58();
  return sub_1B6A85718;
}

uint64_t sub_1B6C763F4()
{
  return sub_1B6E30C48();
}

char *sub_1B6C76418(uint64_t a1, uint64_t a2, unsigned int a3, int a4, int a5, int a6, unint64_t a7, uint64_t a8, char a9)
{
  uint64_t v44 = a8;
  uint64_t v10 = v9;
  uint64_t v37 = a1;
  unint64_t v38 = a7;
  unsigned int v41 = a3;
  int v42 = a6;
  int v39 = a4;
  int v40 = a5;
  uint64_t v36 = a2;
  int v43 = a9 & 1;
  uint64_t v11 = sub_1B6E31288();
  uint64_t v12 = *(void *)(v11 - 8);
  MEMORY[0x1F4188790](v11, v13);
  uint64_t v15 = (char *)&v33 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v16 = sub_1B6E312C8();
  uint64_t v17 = *(void *)(v16 - 8);
  MEMORY[0x1F4188790](v16, v18);
  uint64_t v20 = (char *)&v33 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0);
  if (qword_1EB97FF40 != -1) {
    swift_once();
  }
  uint64_t v21 = sub_1B6385660(v16, (uint64_t)qword_1EB997E68);
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v20, v21, v16);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v15, v10 + OBJC_IVAR____TtC3VFX13EntityManager_signpostID, v11);
  uint64_t v22 = (uint8_t *)swift_slowAlloc();
  uint64_t v34 = v11;
  uint64_t v35 = v16;
  uint64_t v23 = v12;
  uint64_t v24 = v22;
  *(_WORD *)uint64_t v22 = 0;
  uint64_t v25 = sub_1B6E312A8();
  os_signpost_type_t v26 = sub_1B6E322B8();
  int v27 = v15;
  os_signpost_id_t v28 = sub_1B6E31278();
  _os_signpost_emit_with_name_impl(&dword_1B6287000, v25, v26, v28, "EntityManager.unserialize", "", v24, 2u);
  uint64_t v29 = v45;
  sub_1B6C76784(v41, v39 & 1, v40 & 1, v42 & 1, v38 | ((HIDWORD(v38) & 1) << 32), v44, v43, &v46, v37, v36);
  if (v29)
  {
  }
  else
  {
    os_signpost_type_t v30 = sub_1B6E322A8();
    os_signpost_id_t v31 = sub_1B6E31278();
    _os_signpost_emit_with_name_impl(&dword_1B6287000, v25, v30, v31, "EntityManager.unserialize", "", v24, 2u);

    int v27 = v46;
    MEMORY[0x1BA9B84C0](v24, -1, -1);
  }
  (*(void (**)(char *, uint64_t))(v23 + 8))(v15, v34);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v35);
  return v27;
}

uint64_t sub_1B6C76784@<X0>(uint64_t a1@<X0>, int a2@<W2>, int a3@<W3>, int a4@<W4>, unint64_t a5@<X5>, uint64_t a6@<X6>, char a7@<W7>, void *a8@<X8>, uint64_t a9, uint64_t a10)
{
  void (*v35)(_OWORD *__return_ptr, ValueMetadata *, uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t);
  unint64_t v36;
  uint64_t v37;
  uint64_t v39;
  void *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _OWORD v47[2];
  _OWORD v48[2];
  uint64_t v49[3];
  uint64_t v50;
  uint64_t v51;
  int v52;

  char v52 = a4;
  unsigned int v41 = a3;
  int v40 = a8;
  uint64_t v44 = a10;
  int v42 = a6;
  int v43 = a9;
  char v13 = a7 & 1;
  sub_1B62BF900(0, (unint64_t *)&qword_1EB9806A0, MEMORY[0x1E4FBBC50], MEMORY[0x1E4FBB718]);
  MEMORY[0x1F4188790](v14 - 8, v15);
  uint64_t v17 = (char *)&v39 - v16;
  uint64_t v18 = sub_1B6E32B48();
  uint64_t v19 = *(void *)(v18 - 8);
  MEMORY[0x1F4188790](v18, v20);
  uint64_t v22 = (char *)&v39 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B6C715A0(a1, a2, v41, v52, a5 | ((HIDWORD(a5) & 1) << 32), v42, v13, v49);
  uint64_t v23 = v50;
  uint64_t v24 = v51;
  sub_1B62C14BC(v49, v50);
  uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 8))(v23, v24);
  sub_1B6E32B38();
  (*(void (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1, v18);
  (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v22, v17, v18);
  if (*(void *)(v25 + 16) && (unint64_t v26 = sub_1B62FECE4((uint64_t)v22), (v27 & 1) != 0)) {
    sub_1B62CAAD8(*(void *)(v25 + 56) + 32 * v26, (uint64_t)v47);
  }
  else {
    memset(v47, 0, sizeof(v47));
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
  sub_1B62B57A8(v47, v48);
  type metadata accessor for SerializationContext();
  swift_dynamicCast();
  uint64_t v28 = v46;
  uint64_t v29 = thread_serialization_context;
  os_signpost_id_t v31 = (uint64_t *)thread_serialization_context(v30);
  uint64_t v32 = *v31;
  *os_signpost_id_t v31 = v28;
  uint64_t v33 = v50;
  uint64_t v34 = v51;
  sub_1B62C14BC(v49, v50);
  uint64_t v35 = *(void (**)(_OWORD *__return_ptr, ValueMetadata *, uint64_t, uint64_t, ValueMetadata *, unint64_t, uint64_t, uint64_t))(v34 + 32);
  uint64_t v36 = sub_1B6C78908();
  uint64_t v37 = v45;
  v35(v48, &type metadata for EntityManagerCoder, v43, v44, &type metadata for EntityManagerCoder, v36, v33, v34);
  if (v37)
  {
    *(void *)((uint64_t (*)(uint64_t (**)(double)))v29)(&thread_serialization_context) = v32;
    swift_release();
  }
  else
  {
    swift_bridgeObjectRelease();
    swift_unownedRelease();
    *int v40 = v28;
    *(void *)((uint64_t (*)(uint64_t (**)(double)))v29)(&thread_serialization_context) = v32;
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v49);
}

uint64_t sub_1B6C76AE4(char *a1, char *a2)
{
  return sub_1B6BB76F4(*a1, *a2);
}

uint64_t sub_1B6C76AF0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C76B68()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C76BCC()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C76C40@<X0>(char *a1@<X8>)
{
  return sub_1B6BE07F0(a1);
}

void sub_1B6C76C4C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701869940;
  if (!*v1) {
    uint64_t v2 = 0x797469746E65;
  }
  unint64_t v3 = 0xE600000000000000;
  if (*v1) {
    unint64_t v3 = 0xE400000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B6C76C80()
{
  if (*v0) {
    return 1701869940;
  }
  else {
    return 0x797469746E65;
  }
}

uint64_t sub_1B6C76CB0@<X0>(char *a1@<X8>)
{
  return sub_1B6BE08CC(a1);
}

uint64_t sub_1B6C76CBC(uint64_t a1)
{
  unint64_t v2 = sub_1B6C7B290();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C76CF8(uint64_t a1)
{
  unint64_t v2 = sub_1B6C7B290();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C76D34(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v13 = a2;
  sub_1B62BFA00(0, qword_1E9DD7C80, (uint64_t (*)(void))sub_1B6C7B290, (uint64_t)&type metadata for EntityComponentReference.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)&v13 - v10;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C7B290();
  sub_1B6E33A88();
  uint64_t v15 = a3;
  char v14 = 1;
  sub_1B67CD420();
  sub_1B6E32FA8();
  if (!v3)
  {
    uint64_t v15 = v13;
    char v14 = 0;
    sub_1B6657A10();
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1B6C76EFC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1B6C7AE9C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }
  return result;
}

uint64_t sub_1B6C76F30(void *a1)
{
  return sub_1B6C76D34(a1, *v1, v1[1]);
}

uint64_t sub_1B6C76F4C(char *a1, char *a2)
{
  return sub_1B6BB59D8(*a1, *a2);
}

uint64_t sub_1B6C76F58()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C76FDC()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C7704C()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C770CC@<X0>(char *a1@<X8>)
{
  return sub_1B6BE07F0(a1);
}

void sub_1B6C770D8(uint64_t *a1@<X8>)
{
  uint64_t v2 = 0x7865646E69;
  if (*v1) {
    uint64_t v2 = 0x69746172656E6567;
  }
  unint64_t v3 = 0xE500000000000000;
  if (*v1) {
    unint64_t v3 = 0xEA00000000006E6FLL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B6C77118()
{
  if (*v0) {
    return 0x69746172656E6567;
  }
  else {
    return 0x7865646E69;
  }
}

uint64_t sub_1B6C77154@<X0>(char *a1@<X8>)
{
  return sub_1B6BE08CC(a1);
}

uint64_t sub_1B6C77160(uint64_t a1)
{
  unint64_t v2 = sub_1B6C7BF94();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C7719C(uint64_t a1)
{
  unint64_t v2 = sub_1B6C7BF94();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C771D8(char *a1, char *a2)
{
  return sub_1B6BAFE50(*a1, *a2);
}

uint64_t sub_1B6C771E4()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C77260()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C772C8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C77340@<X0>(char *a1@<X8>)
{
  return sub_1B6BE07F0(a1);
}

void sub_1B6C7734C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1701869940;
  if (*v1) {
    uint64_t v2 = 0x73746E65746E6F63;
  }
  unint64_t v3 = 0xE400000000000000;
  if (*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B6C77384()
{
  if (*v0) {
    return 0x73746E65746E6F63;
  }
  else {
    return 1701869940;
  }
}

uint64_t sub_1B6C773B8@<X0>(char *a1@<X8>)
{
  return sub_1B6BE08CC(a1);
}

uint64_t sub_1B6C773C4(uint64_t a1)
{
  unint64_t v2 = sub_1B6C7BE78();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C77400(uint64_t a1)
{
  unint64_t v2 = sub_1B6C7BE78();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C7743C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BAD740(*a1, *a2);
}

uint64_t sub_1B6C77448()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C774E8()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C77574()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C77610@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C7837C();
  *a1 = result;
  return result;
}

void sub_1B6C77640(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xEA00000000007374;
  uint64_t v5 = 0x6E656E6F706D6F63;
  if (v2 != 1)
  {
    uint64_t v5 = 0x657669746361;
    unint64_t v4 = 0xE600000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x7865646E69;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B6C7769C()
{
  uint64_t v1 = 0x6E656E6F706D6F63;
  if (*v0 != 1) {
    uint64_t v1 = 0x657669746361;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7865646E69;
  }
}

uint64_t sub_1B6C776F4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C7837C();
  *a1 = result;
  return result;
}

uint64_t sub_1B6C7771C(uint64_t a1)
{
  unint64_t v2 = sub_1B6C7B2FC();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C77758(uint64_t a1)
{
  unint64_t v2 = sub_1B6C7B2FC();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C77794()
{
  return MEMORY[0x1F4186498](v0, 24, 7);
}

void sub_1B6C777A4(void *a1, void *a2, char a3, void *a4)
{
  uint64_t v5 = a1[2];
  if (!v5) {
    goto LABEL_6;
  }
  uint64_t v6 = a2[2];
  if (!v6) {
    goto LABEL_6;
  }
  uint64_t v9 = a1[4];
  uint64_t v10 = a2[4];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v12 = (void *)*a4;
  unint64_t v13 = sub_1B62BE38C(v9);
  char v15 = v14;
  uint64_t v16 = v12[2] + ((v14 & 1) == 0);
  if (v12[3] < v16)
  {
    sub_1B6ABCA9C(v16, a3 & 1);
    unint64_t v13 = sub_1B62BE38C(v9);
    if ((v15 & 1) != (v17 & 1))
    {
LABEL_5:
      sub_1B6E33838();
      __break(1u);
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return;
    }
LABEL_8:
    if (v15) {
      goto LABEL_9;
    }
    goto LABEL_12;
  }
  if (a3) {
    goto LABEL_8;
  }
  unint64_t v20 = v13;
  sub_1B6ACF9E4();
  unint64_t v13 = v20;
  if (v15)
  {
LABEL_9:
    uint64_t v18 = (void *)swift_allocError();
    swift_willThrow();
    id v19 = v18;
    sub_1B62C5560(0, (unint64_t *)&qword_1EB980E40);
    if (swift_dynamicCast())
    {
      sub_1B6E328C8();
      sub_1B6E31948();
      sub_1B6E32B18();
      sub_1B6E31948();
      sub_1B6E32BE8();
      __break(1u);
    }
    else
    {
      swift_bridgeObjectRelease_n();
      swift_bridgeObjectRelease_n();
    }
    return;
  }
LABEL_12:
  uint64_t v21 = (void *)*a4;
  *(void *)(*a4 + 8 * (v13 >> 6) + 64) |= 1 << v13;
  uint64_t v22 = 8 * v13;
  *(void *)(v21[6] + v22) = v9;
  *(void *)(v21[7] + v22) = v10;
  ++v21[2];
  if (v5 != 1 && v6 != 1)
  {
    uint64_t v23 = a1 + 5;
    uint64_t v24 = v6 - 2;
    uint64_t v25 = a2 + 5;
    for (uint64_t i = v5 - 2; ; --i)
    {
      uint64_t v27 = *v23;
      uint64_t v28 = *v25;
      uint64_t v29 = *v23;
      double v30 = (void *)*a4;
      unint64_t v31 = sub_1B62BE38C(*v23);
      char v33 = v32;
      if (v30[3] < (int64_t)(v30[2] + ((v32 & 1) == 0)))
      {
        sub_1B6ABCA9C(v30[2] + ((v32 & 1) == 0), 1);
        unint64_t v31 = sub_1B62BE38C(v29);
        if ((v33 & 1) != (v34 & 1)) {
          break;
        }
      }
      if (v33) {
        goto LABEL_9;
      }
      uint64_t v35 = (void *)*a4;
      *(void *)(*a4 + 8 * (v31 >> 6) + 64) |= 1 << v31;
      uint64_t v36 = 8 * v31;
      *(void *)(v35[6] + v36) = v27;
      *(void *)(v35[7] + v36) = v28;
      ++v35[2];
      if (!i || !v24) {
        goto LABEL_14;
      }
      --v24;
      ++v25;
      ++v23;
    }
    goto LABEL_5;
  }
LABEL_14:
  swift_bridgeObjectRelease_n();
  swift_bridgeObjectRelease_n();
}

uint64_t sub_1B6C77B50(unint64_t a1, uint64_t a2)
{
  sub_1B62E17B4();
  int v75 = v4;
  MEMORY[0x1F4188790](v4, v5);
  uint64_t v74 = (char *)v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v73 = sub_1B6E31098();
  uint64_t v7 = *(void *)(v73 - 8);
  MEMORY[0x1F4188790](v73, v8);
  uint64_t v72 = (char *)v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0);
  uint64_t v10 = MEMORY[0x1E4FBC860];
  uint64_t v83 = (void *)MEMORY[0x1E4FBC860];
  v63[1] = sub_1B69DE438(a1);
  unint64_t v64 = a1;
  uint64_t v77 = a2;
  uint64_t v11 = sub_1B6BFADC0(a1);
  uint64_t v12 = v11;
  *(void *)&long long v79 = v10;
  uint64_t v13 = *(void *)(v11 + 16);
  if (v13)
  {
    uint64_t v14 = 0;
    uint64_t v68 = (void (**)(char *, char *, uint64_t))(v7 + 32);
    unint64_t v67 = 0xD000000000000071;
    unint64_t v66 = 0x80000001B6F4F930;
    long long v65 = xmmword_1B6E77050;
    uint64_t v70 = v13;
    uint64_t v71 = v11;
    int v69 = &protocol descriptor for NotCodable;
    do
    {
      long long v78 = *(_OWORD *)(v12 + 16 * v14 + 32);
      uint64_t v18 = v78;
      if (swift_conformsToProtocol2()) {
        uint64_t v19 = v18;
      }
      else {
        uint64_t v19 = 0;
      }
      if (!v19)
      {
        if (sub_1B62B4740(v18))
        {
          uint64_t v32 = v79;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
          {
            sub_1B63977D8(0, *(void *)(v32 + 16) + 1, 1);
            uint64_t v32 = v79;
          }
          long long v15 = v78;
          unint64_t v17 = *(void *)(v32 + 16);
          unint64_t v16 = *(void *)(v32 + 24);
          if (v17 >= v16 >> 1)
          {
            sub_1B63977D8(v16 > 1, v17 + 1, 1);
            long long v15 = v78;
            uint64_t v32 = v79;
          }
          *(void *)(v32 + 16) = v17 + 1;
          *(_OWORD *)(v32 + 16 * v17 + 32) = v15;
        }
        else
        {
          if (qword_1EB9852D0 != -1) {
            swift_once();
          }
          uint64_t v81 = 0;
          unint64_t v82 = 0xE000000000000000;
          *(void *)&long long v78 = qword_1EB997FD0;
          swift_retain();
          sub_1B6E328C8();
          sub_1B6E33B48();
          sub_1B6E31948();
          swift_bridgeObjectRelease();
          sub_1B6E31948();
          uint64_t v21 = v81;
          unint64_t v20 = v82;
          char v22 = sub_1B6E32148();
          if (qword_1EB9854F8 != -1) {
            swift_once();
          }
          uint64_t v23 = qword_1EB997FF0;
          uint64_t v24 = qword_1EB985528;
          swift_retain();
          if (v24 != -1) {
            swift_once();
          }
          sub_1B62BFAF8(0, (unint64_t *)&qword_1EB9855A0, (unint64_t *)&qword_1EB9852E0, MEMORY[0x1E4FBC5A0], MEMORY[0x1E4FBBE00]);
          uint64_t v25 = swift_allocObject();
          *(_OWORD *)(v25 + 16) = v65;
          *(void *)(v25 + 56) = MEMORY[0x1E4FBB1A0];
          *(void *)(v25 + 64) = sub_1B678615C();
          *(void *)(v25 + 32) = v21;
          *(void *)(v25 + 40) = v20;
          swift_bridgeObjectRetain();
          sub_1B6E31258();
          swift_bridgeObjectRelease();
          swift_retain();
          unint64_t v26 = v72;
          sub_1B6E31088();
          uint64_t v27 = (uint64_t)v74;
          uint64_t v28 = v75[12];
          uint64_t v29 = v75[16];
          uint64_t v30 = v75[20];
          uint64_t v76 = v23;
          unint64_t v31 = &v74[v30];
          (*v68)(v74, v26, v73);
          *(unsigned char *)(v27 + v28) = v22;
          *(void *)(v27 + v29) = 0;
          *(void *)unint64_t v31 = v21;
          *((void *)v31 + 1) = v20;
          swift_bridgeObjectRetain();
          sub_1B6E31368();
          swift_release();
          sub_1B62BFFD4(v27, (uint64_t (*)(void))sub_1B62E17B4);
          swift_release();
          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v13 = v70;
          uint64_t v12 = v71;
        }
      }
      ++v14;
    }
    while (v13 != v14);
    swift_bridgeObjectRelease();
    uint64_t v33 = v79;
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v33 = MEMORY[0x1E4FBC860];
  }
  *(void *)&long long v78 = *(void *)(v33 + 16);
  if ((void)v78)
  {
    uint64_t v34 = 0;
    unint64_t v35 = HIDWORD(v64);
    uint64_t v36 = (void *)(v77 + OBJC_IVAR____TtC3VFX13EntityManager__entries);
    uint64_t v76 = v33 + 32;
    BOOL v38 = v64 == -1 && HIDWORD(v64) == 0;
    LODWORD(v75) = v38;
    uint64_t v73 = v33;
    uint64_t v74 = (char *)(v64 << 32);
    uint64_t v39 = (int)v64;
    while ((v75 & 1) == 0)
    {
      if ((uint64_t)v74 < (uint64_t)0xFFFFFFFF00000001) {
        break;
      }
      if (v39 >= v36[1]) {
        break;
      }
      long long v40 = *(_OWORD *)(v76 + 16 * v34);
      uint64_t v41 = *v36 + 12 * (int)v39;
      uint64_t v42 = *(__int16 *)(v41 + 4);
      if (v35 != -1 && *(_DWORD *)(v41 + 8) != v35) {
        break;
      }
      uint64_t v43 = *(void *)(*(void *)(v77 + 136) + 8 * *(int *)(*v36 + 12 * (int)v39) + 32);
      uint64_t v44 = *(void *)(v43 + 48);
      uint64_t v45 = *(void *)(v44 + 16);
      if (!v45) {
        break;
      }
      ++v34;
      uint64_t v46 = v40;
      uint64_t v47 = v44 + 56;
      while (*(void *)(v47 - 24) != (void)v40)
      {
        v47 += 40;
        if (!--v45) {
          goto LABEL_49;
        }
      }
      uint64_t v50 = v47 - 8;
      uint64_t v49 = *(void *)(v47 - 8);
      uint64_t v48 = *(void *)(v50 + 8);
      if (v49 <= 1) {
        uint64_t v49 = 1;
      }
      uint64_t v51 = *(void *)(v43 + 128) + v48 + v49 * v42;
      long long v80 = v40;
      char v52 = sub_1B62C12C4((uint64_t *)&v79);
      sub_1B62C5E18(v51, v46, (uint64_t)v52);
      sub_1B62C15C4(&v79, (uint64_t)&v81);
      sub_1B62C1550((uint64_t)&v81, (uint64_t)&v79);
      uint64_t v53 = v83;
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0)
      {
        uint64_t v53 = sub_1B62C5898(0, v53[2] + 1, 1, v53);
        uint64_t v83 = v53;
      }
      unint64_t v55 = v53[2];
      unint64_t v54 = v53[3];
      if (v55 >= v54 >> 1) {
        uint64_t v83 = sub_1B62C5898(v54 > 1, v55 + 1, 1, v53);
      }
      long long v56 = v80;
      uint64_t v57 = sub_1B62C550C((uint64_t)&v79, v80);
      double v58 = MEMORY[0x1F4188790](v57, v57);
      uint64_t v60 = (char *)v63 - ((v59 + 15) & 0xFFFFFFFFFFFFFFF0);
      (*(void (**)(char *, double))(v61 + 16))(v60, v58);
      sub_1B62C5608(v55, (uint64_t)v60, (uint64_t *)&v83, v56, *((uint64_t *)&v56 + 1));
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v79);
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)&v81);
      if (v34 == (void)v78) {
        goto LABEL_48;
      }
    }
LABEL_49:
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  else
  {
LABEL_48:
    swift_release();
    swift_release();
    return v64;
  }
  return result;
}

uint64_t sub_1B6C7837C()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6C783C8()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 5) {
    return 5;
  }
  else {
    return v0;
  }
}

unint64_t sub_1B6C78414()
{
  unint64_t result = qword_1EB97DBC8;
  if (!qword_1EB97DBC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DBC8);
  }
  return result;
}

unint64_t sub_1B6C78468()
{
  unint64_t result = qword_1EB97DBC0;
  if (!qword_1EB97DBC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DBC0);
  }
  return result;
}

void sub_1B6C784BC()
{
  if (!qword_1EB97E670)
  {
    sub_1B62BFA00(255, &qword_1EB97DB78, (uint64_t (*)(void))sub_1B62B1EFC, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DecodeOrNil);
    sub_1B6C785A4(&qword_1EB97DB70);
    sub_1B6C785A4(&qword_1EB97DB68);
    unint64_t v0 = type metadata accessor for ParallelCoder();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB97E670);
    }
  }
}

uint64_t sub_1B6C785A4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B62BFA00(255, &qword_1EB97DB78, (uint64_t (*)(void))sub_1B62B1EFC, (uint64_t)&type metadata for ComponentProperty, (uint64_t (*)(uint64_t, uint64_t, uint64_t))type metadata accessor for DecodeOrNil);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

void sub_1B6C78620()
{
  if (!qword_1EB97E688)
  {
    sub_1B62F7FEC(255, &qword_1EB97ED60, (uint64_t)&type metadata for ComponentProperty, MEMORY[0x1E4FBB718]);
    sub_1B6C786BC();
    sub_1B6C78750();
    unint64_t v0 = type metadata accessor for ParallelCoder();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1EB97E688);
    }
  }
}

unint64_t sub_1B6C786BC()
{
  unint64_t result = qword_1EB97ED70;
  if (!qword_1EB97ED70)
  {
    sub_1B62F7FEC(255, &qword_1EB97ED60, (uint64_t)&type metadata for ComponentProperty, MEMORY[0x1E4FBB718]);
    sub_1B62B1EFC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97ED70);
  }
  return result;
}

unint64_t sub_1B6C78750()
{
  unint64_t result = qword_1EB97ED68;
  if (!qword_1EB97ED68)
  {
    sub_1B62F7FEC(255, &qword_1EB97ED60, (uint64_t)&type metadata for ComponentProperty, MEMORY[0x1E4FBB718]);
    sub_1B68789A4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97ED68);
  }
  return result;
}

unint64_t sub_1B6C787E4()
{
  unint64_t result = qword_1EB97E930;
  if (!qword_1EB97E930)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97E930);
  }
  return result;
}

unint64_t sub_1B6C78838()
{
  unint64_t result = qword_1EB97E928;
  if (!qword_1EB97E928)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97E928);
  }
  return result;
}

void sub_1B6C7888C(uint64_t a1, unint64_t *a2, void (*a3)(void), void (*a4)(void))
{
  if (!*a2)
  {
    a3();
    a4();
    unint64_t v6 = type metadata accessor for ParallelCoder();
    if (!v7) {
      atomic_store(v6, a2);
    }
  }
}

unint64_t sub_1B6C78908()
{
  unint64_t result = qword_1EB97F0A0;
  if (!qword_1EB97F0A0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F0A0);
  }
  return result;
}

unint64_t sub_1B6C7895C()
{
  unint64_t result = qword_1E9DD7B90[0];
  if (!qword_1E9DD7B90[0])
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, qword_1E9DD7B90);
  }
  return result;
}

uint64_t destroy for EntityManagerCoder()
{
  swift_bridgeObjectRelease();

  return swift_unownedRelease();
}

void *_s3VFX18EntityManagerCoderVwCP_0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_unownedRetain();
  a1[1] = v3;
  return a1;
}

void *assignWithCopy for EntityManagerCoder(void *a1, void *a2)
{
  *a1 = *a2;
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[1] = swift_unownedRetain();
  swift_unownedRelease();
  return a1;
}

_OWORD *assignWithTake for EntityManagerCoder(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_unownedRelease();
  return a1;
}

ValueMetadata *type metadata accessor for EntityManagerCoder()
{
  return &type metadata for EntityManagerCoder;
}

unsigned char *storeEnumTagSinglePayload for ValueCodingKeys(unsigned char *result, int a2, int a3)
{
  if ((a3 + 1) >= 0x10000) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) < 0x100) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2)
  {
    switch(v5)
    {
      case 1:
        *unint64_t result = a2;
        return result;
      case 2:
        *(_WORD *)unint64_t result = a2;
        return result;
      case 3:
        goto LABEL_19;
      case 4:
        *(_DWORD *)unint64_t result = a2;
        return result;
      default:
        return result;
    }
  }
  switch(v5)
  {
    case 1:
      *unint64_t result = 0;
      break;
    case 2:
      *(_WORD *)unint64_t result = 0;
      break;
    case 3:
LABEL_19:
      __break(1u);
      JUMPOUT(0x1B6C78B78);
    case 4:
      *(_DWORD *)unint64_t result = 0;
      break;
    default:
      return result;
  }
  return result;
}

ValueMetadata *type metadata accessor for ValueCodingKeys()
{
  return &type metadata for ValueCodingKeys;
}

uint64_t sub_1B6C78BB0()
{
  uint64_t result = sub_1B6E324B8();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B6C78C40(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if (*(_DWORD *)(v6 + 84)) {
    size_t v7 = *(void *)(v6 + 64);
  }
  else {
    size_t v7 = *(void *)(v6 + 64) + 1;
  }
  uint64_t v8 = *(_DWORD *)(v6 + 80);
  if (v8 > 7 || (*(_DWORD *)(v6 + 80) & 0x100000) != 0 || v7 > 0x18)
  {
    uint64_t v11 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v11 + ((v8 + 16) & ~v8));
    swift_retain();
  }
  else if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1B6C78D7C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 16))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 24))(a1, a2, v5);
      return a1;
    }
    uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

void *sub_1B6C78EE8(void *a1, const void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v6 + 48))(a2, 1, v5))
  {
    if (*(_DWORD *)(v6 + 84)) {
      size_t v7 = *(void *)(v6 + 64);
    }
    else {
      size_t v7 = *(void *)(v6 + 64) + 1;
    }
    memcpy(a1, a2, v7);
  }
  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v6 + 32))(a1, a2, v5);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
  }
  return a1;
}

void *sub_1B6C78FE0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 16);
  uint64_t v6 = *(void *)(v5 - 8);
  size_t v7 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v6 + 48);
  int v8 = v7(a1, 1, v5);
  int v9 = v7(a2, 1, v5);
  if (v8)
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 32))(a1, a2, v5);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v6 + 56))(a1, 0, 1, v5);
      return a1;
    }
    int v10 = *(_DWORD *)(v6 + 84);
    size_t v11 = *(void *)(v6 + 64);
  }
  else
  {
    if (!v9)
    {
      (*(void (**)(void *, void *, uint64_t))(v6 + 40))(a1, a2, v5);
      return a1;
    }
    uint64_t v13 = *(void (**)(void *, uint64_t))(v6 + 8);
    uint64_t v12 = v6 + 8;
    v13(a1, v5);
    int v10 = *(_DWORD *)(v12 + 76);
    size_t v11 = *(void *)(v12 + 56);
  }
  if (v10) {
    size_t v14 = v11;
  }
  else {
    size_t v14 = v11 + 1;
  }
  memcpy(a1, a2, v14);
  return a1;
}

uint64_t assignWithCopy for EntityCoder(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for EntityCoder(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for EntityCoder()
{
  return &type metadata for EntityCoder;
}

uint64_t sub_1B6C7922C()
{
  uint64_t result = swift_checkMetadataState();
  if (v1 <= 0x3F)
  {
    swift_initStructMetadata();
    return 0;
  }
  return result;
}

uint64_t *sub_1B6C792CC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 > 7
    || (*(_DWORD *)(v4 + 80) & 0x100000) != 0
    || ((v5 + 8) & (unint64_t)~v5) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64) > 0x18)
  {
    uint64_t v8 = *a2;
    uint64_t *v3 = *a2;
    int v3 = (uint64_t *)(v8 + ((v5 & 0xF8 ^ 0x1F8) & (v5 + 16)));
    swift_retain();
  }
  else
  {
    *a1 = *a2;
    (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + v5 + 8) & ~v5, ((unint64_t)a2 + v5 + 8) & ~v5);
  }
  return v3;
}

uint64_t sub_1B6C793B8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(unint64_t))(*(void *)(*(void *)(a2 + 16) - 8) + 8))((a1 + *(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(*(void *)(a2 + 16) - 8) + 80));
}

void *sub_1B6C793F4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 16))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *sub_1B6C79464(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 24))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *sub_1B6C794D4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 32))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

void *sub_1B6C79544(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  (*(void (**)(unint64_t, unint64_t))(v4 + 40))(((unint64_t)a1 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80), ((unint64_t)a2 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
  return a1;
}

uint64_t sub_1B6C795B4(unsigned __int16 *a1, unsigned int a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  if (!a2) {
    return 0;
  }
  unsigned int v7 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_19;
  }
  uint64_t v8 = ((v6 + 8) & ~v6) + *(void *)(*(void *)(*(void *)(a3 + 16) - 8) + 64);
  char v9 = 8 * v8;
  if (v8 <= 3)
  {
    unsigned int v11 = ((v7 + ~(-1 << v9)) >> v9) + 1;
    if (HIWORD(v11))
    {
      int v10 = *(_DWORD *)((char *)a1 + v8);
      if (!v10) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 > 0xFF)
    {
      int v10 = *(unsigned __int16 *)((char *)a1 + v8);
      if (!*(unsigned __int16 *)((char *)a1 + v8)) {
        goto LABEL_19;
      }
      goto LABEL_11;
    }
    if (v11 < 2)
    {
LABEL_19:
      if (v5) {
        return (*(uint64_t (**)(unint64_t))(v4 + 48))(((unint64_t)a1 + v6 + 8) & ~v6);
      }
      return 0;
    }
  }
  int v10 = *((unsigned __int8 *)a1 + v8);
  if (!*((unsigned char *)a1 + v8)) {
    goto LABEL_19;
  }
LABEL_11:
  int v12 = (v10 - 1) << v9;
  if (v8 > 3) {
    int v12 = 0;
  }
  if (v8)
  {
    if (v8 > 3) {
      LODWORD(v8) = 4;
    }
    switch((int)v8)
    {
      case 2:
        LODWORD(v8) = *a1;
        break;
      case 3:
        LODWORD(v8) = *a1 | (*((unsigned __int8 *)a1 + 2) << 16);
        break;
      case 4:
        LODWORD(v8) = *(_DWORD *)a1;
        break;
      default:
        LODWORD(v8) = *(unsigned __int8 *)a1;
        break;
    }
  }
  return v5 + (v8 | v12) + 1;
}

void sub_1B6C79730(char *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  size_t v9 = ((v8 + 8) & ~v8) + *(void *)(v6 + 64);
  BOOL v10 = a3 >= v7;
  unsigned int v11 = a3 - v7;
  if (v11 != 0 && v10)
  {
    if (v9 <= 3)
    {
      unsigned int v15 = ((v11 + ~(-1 << (8 * v9))) >> (8 * v9)) + 1;
      if (HIWORD(v15))
      {
        int v12 = 4;
      }
      else if (v15 >= 0x100)
      {
        int v12 = 2;
      }
      else
      {
        int v12 = v15 > 1;
      }
    }
    else
    {
      int v12 = 1;
    }
  }
  else
  {
    int v12 = 0;
  }
  if (v7 < a2)
  {
    unsigned int v13 = ~v7 + a2;
    if (v9 < 4)
    {
      int v14 = (v13 >> (8 * v9)) + 1;
      if (v9)
      {
        int v16 = v13 & ~(-1 << (8 * v9));
        bzero(a1, v9);
        if (v9 == 3)
        {
          *(_WORD *)a1 = v16;
          a1[2] = BYTE2(v16);
        }
        else if (v9 == 2)
        {
          *(_WORD *)a1 = v16;
        }
        else
        {
          *a1 = v16;
        }
      }
    }
    else
    {
      bzero(a1, v9);
      *(_DWORD *)a1 = v13;
      int v14 = 1;
    }
    switch(v12)
    {
      case 1:
        a1[v9] = v14;
        return;
      case 2:
        *(_WORD *)&a1[v9] = v14;
        return;
      case 3:
        goto LABEL_34;
      case 4:
        *(_DWORD *)&a1[v9] = v14;
        return;
      default:
        return;
    }
  }
  switch(v12)
  {
    case 1:
      a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 2:
      *(_WORD *)&a1[v9] = 0;
      if (!a2) {
        return;
      }
      goto LABEL_21;
    case 3:
LABEL_34:
      __break(1u);
      JUMPOUT(0x1B6C79964);
    case 4:
      *(_DWORD *)&a1[v9] = 0;
      goto LABEL_20;
    default:
LABEL_20:
      if (a2)
      {
LABEL_21:
        unint64_t v17 = (unint64_t)&a1[v8 + 8] & ~v8;
        uint64_t v18 = *(void (**)(unint64_t))(v6 + 56);
        v18(v17);
      }
      return;
  }
}

uint64_t type metadata accessor for VersionedContainer()
{
  return sub_1B62C36EC();
}

ValueMetadata *type metadata accessor for EntityComponentReference()
{
  return &type metadata for EntityComponentReference;
}

uint64_t type metadata accessor for FastDictCoder()
{
  return swift_getGenericMetadata();
}

uint64_t assignWithCopy for StringCodingKeys(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(unsigned char *)(a1 + 8) = *((unsigned char *)a2 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 16) = a2[2];
  *(void *)(a1 + 24) = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for StringCodingKeys(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(unsigned char *)(a1 + 8) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for StringCodingKeys()
{
  return &type metadata for StringCodingKeys;
}

unint64_t sub_1B6C79A78()
{
  unint64_t result = qword_1E9DD7C18;
  if (!qword_1E9DD7C18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7C18);
  }
  return result;
}

unint64_t sub_1B6C79AD0()
{
  unint64_t result = qword_1EB97EBD8;
  if (!qword_1EB97EBD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97EBD8);
  }
  return result;
}

unint64_t sub_1B6C79B28()
{
  unint64_t result = qword_1EB97EBD0;
  if (!qword_1EB97EBD0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97EBD0);
  }
  return result;
}

unint64_t sub_1B6C79B80()
{
  unint64_t result = qword_1EB97ED10;
  if (!qword_1EB97ED10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97ED10);
  }
  return result;
}

unint64_t sub_1B6C79BD8()
{
  unint64_t result = qword_1EB97ED18;
  if (!qword_1EB97ED18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97ED18);
  }
  return result;
}

uint64_t sub_1B6C79C2C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2) {
    return MEMORY[0x1E4FBC860];
  }
  uint64_t v4 = 0;
  uint64_t v5 = a1 + 32;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  do
  {
    uint64_t v7 = v4;
    while (1)
    {
      if (*(void *)(a2 + 16))
      {
        long long v16 = *(_OWORD *)(v5 + 16 * v7);
        sub_1B62BE38C(*(void *)(v5 + 16 * v7));
        if (v8)
        {
          if (*(void *)(a2 + 16))
          {
            sub_1B62BE38C(DWORD2(v16) | ((unint64_t)HIDWORD(v16) << 32));
            if (v9) {
              break;
            }
          }
        }
      }
      if (v2 == ++v7) {
        return v6;
      }
    }
    uint64_t v17 = v6;
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      sub_1B6C3D988(0, *(void *)(v6 + 16) + 1, 1);
    }
    unint64_t v11 = *(void *)(v6 + 16);
    unint64_t v10 = *(void *)(v6 + 24);
    unint64_t v12 = v11 + 1;
    if (v11 >= v10 >> 1)
    {
      unint64_t v13 = v11 + 1;
      unint64_t v15 = v11;
      sub_1B6C3D988(v10 > 1, v11 + 1, 1);
      unint64_t v11 = v15;
      unint64_t v12 = v13;
      uint64_t v6 = v17;
    }
    uint64_t v4 = v7 + 1;
    *(void *)(v6 + 16) = v12;
    *(_OWORD *)(v6 + 16 * v11 + 32) = v16;
  }
  while (v2 - 1 != v7);
  return v6;
}

char *sub_1B6C79D88(void *a1)
{
  sub_1B62BFA00(0, &qword_1EB9809D0, (uint64_t (*)(void))sub_1B6C7B3A4, (uint64_t)&type metadata for EntityManagerCoder.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v121 = *(void *)(v2 - 8);
  uint64_t v122 = v2;
  MEMORY[0x1F4188790](v2, v3);
  uint64_t v5 = (char *)&v111 - v4;
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_1B62C14BC(a1, v6);
  uint64_t v8 = sub_1B62BF634(v6, v7, MEMORY[0x1E4FBC5C0]);
  uint64_t v9 = *(void *)(v8 + 16);
  swift_retain();
  swift_unownedRetain();
  swift_unownedRetain();
  swift_release();
  uint64_t v10 = *(unsigned int *)(v8 + 32);
  int v11 = *(unsigned __int8 *)(v8 + 36);
  uint64_t v12 = a1[3];
  int v124 = a1;
  sub_1B62C14BC(a1, v12);
  sub_1B6C7B3A4();
  unint64_t v13 = v123;
  sub_1B6E33A48();
  if (v13)
  {
    swift_release();
    swift_unownedRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v124);
LABEL_4:
    swift_unownedRelease();
    return v5;
  }
  int v117 = v11;
  uint64_t v118 = v10;
  uint64_t v120 = v9;
  char v123 = (void *)v8;
  sub_1B62F7FEC(0, &qword_1EB980270, (uint64_t)&type metadata for EntityTableEntryCoder, MEMORY[0x1E4FBB320]);
  LOBYTE(v127) = 0;
  sub_1B6C7B3F8();
  sub_1B6E32DF8();
  uint64_t v116 = v5;
  unint64_t v15 = v128;
  int64_t v16 = *((void *)v128 + 2);
  uint64_t v17 = v120;
  char v119 = 0;
  if (v16)
  {
    uint64_t v127 = MEMORY[0x1E4FBC860];
    sub_1B62E1D20(0, v16, 0);
    uint64_t v18 = 0;
    uint64_t v19 = v127;
    unint64_t v20 = *(void *)(v127 + 16);
    do
    {
      uint64_t v21 = *(void *)&v15[8 * v18 + 32];
      uint64_t v127 = v19;
      unint64_t v22 = *(void *)(v19 + 24);
      if (v20 >= v22 >> 1)
      {
        sub_1B62E1D20(v22 > 1, v20 + 1, 1);
        uint64_t v19 = v127;
      }
      ++v18;
      *(void *)(v19 + 16) = v20 + 1;
      *(void *)(v19 + 8 * v20++ + 32) = v21;
    }
    while (v16 != v18);
    swift_bridgeObjectRelease();
  }
  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = MEMORY[0x1E4FBC860];
  }
  char v115 = *(char **)(v19 + 16);
  swift_unownedRetainStrong();
  uint64_t v23 = v17 + OBJC_IVAR____TtC3VFX13EntityManager_lock;
  os_unfair_lock_lock(*(os_unfair_lock_t *)(v17 + OBJC_IVAR____TtC3VFX13EntityManager_lock + 24));
  uint64_t v24 = (char *)MEMORY[0x1E4FBC860];
  uint64_t v25 = sub_1B63B7CC4(MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860]);
  uint64_t v27 = v26;
  uint64_t v28 = sub_1B637FE60(v25);
  uint64_t v29 = v124;
  if ((v30 & 1) != 0 || (unint64_t v31 = sub_1B63581E4(v27, v28), (v31 & 0x100000000) != 0)) {
    LODWORD(v31) = sub_1B637C7BC(v25, v27, MEMORY[0x1E4FBC860], MEMORY[0x1E4FBC860]);
  }
  uint64_t v32 = *(void *)(*(void *)(v17 + 80) + 8 * (int)v31 + 32);
  uint64_t v33 = *(os_unfair_lock_s **)(v23 + 24);
  swift_retain();
  os_unfair_lock_unlock(v33);
  swift_release();
  uint64_t v127 = 0;
  uint64_t v128 = v24;
  swift_unownedRetainStrong();
  uint64_t v34 = **(void **)(v17 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues);
  swift_release();
  uint64_t v35 = v29[3];
  uint64_t v36 = v29[4];
  sub_1B62C14BC(v29, v35);
  uint64_t v37 = (uint64_t (*)(void))MEMORY[0x1E4FBC5C0];
  uint64_t v38 = sub_1B62BF634(v35, v36, MEMORY[0x1E4FBC5C0]);
  uint64_t v39 = *(unsigned int *)(v38 + 32);
  unsigned __int8 v40 = *(unsigned char *)(v38 + 36);
  swift_release();
  swift_bridgeObjectRetain();
  uint64_t v41 = v123;
  swift_retain();
  LOBYTE(v126) = v40;
  uint64_t v114 = v32;
  uint64_t v42 = v119;
  sub_1B6B27958(0, v32, 1, v39 | ((unint64_t)v40 << 32), (uint64_t)v115, v34, &v128, v19, &v127, v41);
  uint64_t v5 = v42;
  swift_bridgeObjectRelease_n();
  swift_release();
  uint64_t v43 = v128;
  uint64_t v44 = v29[3];
  uint64_t v45 = v29[4];
  sub_1B62C14BC(v29, v44);
  swift_bridgeObjectRetain_n();
  uint64_t v46 = *(void *)(sub_1B62BF634(v44, v45, v37) + 24);
  swift_release();
  if (v46 < 1107)
  {
    char v115 = v43;
    char v119 = v42;
  }
  else
  {
    sub_1B62F7FEC(0, (unint64_t *)&qword_1EB9802F0, MEMORY[0x1E4FBB1A0], MEMORY[0x1E4FBB320]);
    LOBYTE(v125) = 3;
    sub_1B6A4A8F4();
    uint64_t v47 = v122;
    uint64_t v48 = v116;
    sub_1B6E32DF8();
    if (v42)
    {
      (*(void (**)(char *, uint64_t))(v121 + 8))(v48, v47);
      swift_release();
      swift_release();
      swift_unownedRelease();
LABEL_47:
      swift_bridgeObjectRelease();
      goto LABEL_48;
    }
    char v115 = v43;
    char v119 = 0;
    uint64_t v49 = (uint64_t)v126;
    uint64_t v50 = v29[3];
    uint64_t v51 = v29[4];
    sub_1B62C14BC(v29, v50);
    char v52 = (uint64_t (*)(void))MEMORY[0x1E4FBC5C0];
    sub_1B62BF634(v50, v51, MEMORY[0x1E4FBC5C0]);
    uint64_t v53 = v29[3];
    uint64_t v54 = v29[4];
    sub_1B62C14BC(v29, v53);
    uint64_t v55 = *(void *)(sub_1B62BF634(v53, v54, v52) + 24);
    swift_release();
    sub_1B6C72DFC(v49, v55, 0);
    swift_bridgeObjectRelease();
    swift_release();
  }
  uint64_t v56 = v29[3];
  uint64_t v57 = v29[4];
  sub_1B62C14BC(v29, v56);
  uint64_t v58 = *(void *)(sub_1B62BF634(v56, v57, MEMORY[0x1E4FBC5C0]) + 24);
  swift_release();
  uint64_t v59 = v122;
  if (v58 < 2002)
  {
    uint64_t v68 = v120;
    uint64_t v79 = v121;
    goto LABEL_36;
  }
  uint64_t v60 = v29[3];
  uint64_t v61 = v29[4];
  sub_1B62C14BC(v29, v60);
  char v62 = (uint64_t (*)(void))MEMORY[0x1E4FBC5C0];
  int v113 = *(unsigned __int8 *)(sub_1B62BF634(v60, v61, MEMORY[0x1E4FBC5C0]) + 86);
  swift_release();
  uint64_t v63 = v29[3];
  uint64_t v64 = v29[4];
  sub_1B62C14BC(v29, v63);
  *(unsigned char *)(sub_1B62BF634(v63, v64, v62) + 86) = 0;
  swift_release();
  uint64_t v65 = v29[3];
  uint64_t v66 = v29[4];
  sub_1B62C14BC(v29, v65);
  uint64_t v67 = *(void *)(sub_1B62BF634(v65, v66, v62) + 24);
  swift_release();
  uint64_t v68 = v120;
  uint64_t v69 = v121;
  if (v67 >= 2012)
  {
    sub_1B6C784BC();
    LOBYTE(v125) = 4;
    sub_1B6C7B69C(&qword_1EB97E668, (void (*)(uint64_t))sub_1B6C784BC);
    uint64_t v5 = v116;
    uint64_t v70 = v119;
    sub_1B6E32DF8();
    if (!v70)
    {
      char v119 = 0;
      uint64_t v71 = (uint64_t)v126;
      int64_t v72 = v126[2];
      if (v72)
      {
        uint64_t v125 = MEMORY[0x1E4FBC860];
        int64_t v112 = v72;
        sub_1B6C3D848(0, v72, 0);
        int64_t v73 = v112;
        uint64_t v74 = 0;
        uint64_t v75 = v125;
        unint64_t v76 = *(void *)(v125 + 16);
        do
        {
          uint64_t v77 = *(void *)(v71 + 8 * v74 + 32);
          uint64_t v125 = v75;
          unint64_t v78 = *(void *)(v75 + 24);
          swift_retain();
          if (v76 >= v78 >> 1)
          {
            sub_1B6C3D848(v78 > 1, v76 + 1, 1);
            int64_t v73 = v112;
            uint64_t v75 = v125;
          }
          ++v74;
          *(void *)(v75 + 16) = v76 + 1;
          *(void *)(v75 + 8 * v76++ + 32) = v77;
        }
        while (v73 != v74);
        swift_bridgeObjectRelease();
        uint64_t v59 = v122;
      }
      else
      {
        swift_bridgeObjectRelease();
        uint64_t v75 = MEMORY[0x1E4FBC860];
      }
      goto LABEL_35;
    }
LABEL_32:
    swift_unownedRelease();
    swift_bridgeObjectRelease();
    uint64_t v81 = v29[3];
    uint64_t v82 = v29[4];
    sub_1B62C14BC(v29, v81);
    uint64_t v83 = sub_1B62BF634(v81, v82, MEMORY[0x1E4FBC5C0]);
    *(unsigned char *)(v83 + 86) = v113;
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(char *, uint64_t))(v69 + 8))(v5, v59);
LABEL_48:
    swift_bridgeObjectRelease();
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v29);
    swift_bridgeObjectRelease();
    goto LABEL_4;
  }
  sub_1B62F7FEC(0, &qword_1E9DD7C48, (uint64_t)&type metadata for ComponentProperty, MEMORY[0x1E4FBB320]);
  LOBYTE(v125) = 4;
  sub_1B6C7B608();
  uint64_t v5 = v116;
  long long v80 = v119;
  sub_1B6E32DF8();
  if (v80) {
    goto LABEL_32;
  }
  char v119 = 0;
  uint64_t v75 = sub_1B68AD438((uint64_t)v126);
  swift_bridgeObjectRelease();
LABEL_35:
  uint64_t v84 = v29[3];
  uint64_t v85 = v29[4];
  sub_1B62C14BC(v29, v84);
  uint64_t v86 = (uint64_t (*)(void))MEMORY[0x1E4FBC5C0];
  *(void *)(sub_1B62BF634(v84, v85, MEMORY[0x1E4FBC5C0]) + 136) = v75;
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v87 = v29[3];
  uint64_t v88 = v29[4];
  sub_1B62C14BC(v29, v87);
  uint64_t v89 = sub_1B62BF634(v87, v88, v86);
  *(unsigned char *)(v89 + 86) = v113;
  swift_release();
  uint64_t v79 = v121;
LABEL_36:
  uint64_t v90 = v29[3];
  uint64_t v91 = v29[4];
  sub_1B62C14BC(v29, v90);
  uint64_t v92 = *(void *)(sub_1B62BF634(v90, v91, MEMORY[0x1E4FBC5C0]) + 24);
  swift_release();
  uint64_t v93 = v116;
  uint64_t v5 = v119;
  if (v92 >= 2004)
  {
    sub_1B62F7FEC(0, &qword_1EB980208, (uint64_t)&type metadata for RelationsCoder, MEMORY[0x1E4FBB320]);
    LOBYTE(v125) = 2;
    sub_1B6C7B574();
    sub_1B6E32DF8();
    if (v5)
    {
LABEL_46:
      (*(void (**)(char *, uint64_t))(v79 + 8))(v93, v59);
      swift_release();
      swift_release();
      swift_unownedRelease();
      goto LABEL_47;
    }
    uint64_t v5 = 0;
    uint64_t v94 = v126[2];
    if (v94)
    {
      uint64_t v95 = v126 + 6;
      do
      {
        uint64_t v96 = *(v95 - 2);
        uint64_t v97 = *(v95 - 1);
        uint64_t v98 = *v95;
        v95 += 3;
        swift_unownedRetainStrong();
        swift_bridgeObjectRetain();
        sub_1B6C31A58(v68, v96, v97, v98);
        swift_bridgeObjectRelease();
        swift_release();
        --v94;
      }
      while (v94);
    }
    swift_bridgeObjectRelease();
    uint64_t v59 = v122;
    uint64_t v93 = v116;
    uint64_t v29 = v124;
  }
  uint64_t v99 = v29[3];
  uint64_t v100 = v29[4];
  sub_1B62C14BC(v29, v99);
  uint64_t v101 = *(void *)(sub_1B62BF634(v99, v100, MEMORY[0x1E4FBC5C0]) + 24);
  swift_release();
  if (v101 > 2011)
  {
    sub_1B6C7888C(0, &qword_1EB97E658, (void (*)(void))sub_1B6C78414, (void (*)(void))sub_1B6C78468);
    LOBYTE(v125) = 1;
    sub_1B6C7B744(&qword_1EB97E650);
  }
  else
  {
    sub_1B62F7FEC(0, &qword_1E9DD7C38, (uint64_t)&type metadata for EntityCoder, MEMORY[0x1E4FBB320]);
    LOBYTE(v125) = 1;
    sub_1B6C7B4E0();
  }
  int v102 = v5;
  sub_1B6E32DF8();
  uint64_t v5 = (char *)v123;
  if (v102) {
    goto LABEL_46;
  }
  int v124 = v126;
  char v119 = 0;
  uint64_t v103 = v126[2];
  if (v103)
  {
    long long v104 = v124 + 6;
    uint64_t v105 = v118;
    unsigned __int8 v106 = v117;
    do
    {
      uint64_t v107 = *(v104 - 2);
      char v108 = *((unsigned char *)v104 - 8);
      uint64_t v109 = *v104;
      v104 += 3;
      swift_unownedRetainStrong();
      swift_bridgeObjectRetain();
      LOBYTE(v126) = v106;
      sub_1B6C749DC(v68, v105 | ((unint64_t)v106 << 32), v107, v108, v109, v110);
      swift_bridgeObjectRelease();
      swift_release();
      --v103;
    }
    while (v103);
  }
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v79 + 8))(v116, v122);
  swift_bridgeObjectRelease();
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v29);
  uint64_t v5 = v115;
  swift_bridgeObjectRelease();
  swift_unownedRelease();
  return v5;
}

uint64_t sub_1B6C7AB90(void *a1)
{
  sub_1B62BFA00(0, &qword_1EB980A18, (uint64_t (*)(void))sub_1B6C7BF94, (uint64_t)&type metadata for EntityTableEntryCoder.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)&v20[-1] - v7;
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_1B62C14BC(a1, v9);
  uint64_t v11 = *(void *)(sub_1B62BF634(v9, v10, MEMORY[0x1E4FBC5C0]) + 24);
  swift_release();
  if (v11 >= 2000)
  {
    sub_1B62C14BC(a1, a1[3]);
    sub_1B6E33A28();
    if (!v1)
    {
      uint64_t v12 = a1[3];
      uint64_t v13 = a1[4];
      sub_1B62C14BC(a1, v12);
      uint64_t v14 = *(void *)(sub_1B62BF634(v12, v13, MEMORY[0x1E4FBC5C0]) + 24);
      swift_release();
      sub_1B62C14BC(v20, v20[3]);
      if (v14 > 2007)
      {
        unsigned int v16 = sub_1B6E33528();
        uint64_t v17 = 0xFFFFFFFFLL;
      }
      else
      {
        unint64_t v15 = sub_1B6E33548();
        unsigned int v16 = v15;
        uint64_t v17 = HIDWORD(v15);
      }
      _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v20);
      goto LABEL_10;
    }
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C7BF94();
  sub_1B6E33A48();
  if (v1) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  LOBYTE(v20[0]) = 0;
  unsigned int v16 = sub_1B6E32E28();
  LOBYTE(v20[0]) = 1;
  uint64_t v17 = sub_1B6E32E28();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
LABEL_10:
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v16 | (unint64_t)(v17 << 32);
}

uint64_t sub_1B6C7AE9C(void *a1)
{
  sub_1B62BFA00(0, &qword_1E9DD7C20, (uint64_t (*)(void))sub_1B6C7B290, (uint64_t)&type metadata for EntityComponentReference.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)v12 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C7B290();
  sub_1B6E33A48();
  if (v1) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  LOBYTE(v13) = 1;
  sub_1B62BFBD8();
  sub_1B6E32DF8();
  LOBYTE(v13) = 0;
  sub_1B62B1EA8();
  sub_1B6E32DF8();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v8, v4);
  uint64_t v9 = v12[0];
  unint64_t v10 = (unint64_t)v12[1] << 32;
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v10 | v9;
}

unint64_t sub_1B6C7B290()
{
  unint64_t result = qword_1E9DD7C28;
  if (!qword_1E9DD7C28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7C28);
  }
  return result;
}

uint64_t type metadata accessor for VersionedContainer.CodingKeys()
{
  return sub_1B62C36EC();
}

unint64_t sub_1B6C7B2FC()
{
  unint64_t result = qword_1EB97DBA8;
  if (!qword_1EB97DBA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DBA8);
  }
  return result;
}

unint64_t sub_1B6C7B350()
{
  unint64_t result = qword_1E9DD7C30;
  if (!qword_1E9DD7C30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7C30);
  }
  return result;
}

unint64_t sub_1B6C7B3A4()
{
  unint64_t result = qword_1EB97F088;
  if (!qword_1EB97F088)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F088);
  }
  return result;
}

unint64_t sub_1B6C7B3F8()
{
  unint64_t result = qword_1EB980278;
  if (!qword_1EB980278)
  {
    sub_1B62F7FEC(255, &qword_1EB980270, (uint64_t)&type metadata for EntityTableEntryCoder, MEMORY[0x1E4FBB320]);
    sub_1B6C7B48C();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB980278);
  }
  return result;
}

unint64_t sub_1B6C7B48C()
{
  unint64_t result = qword_1EB97F670;
  if (!qword_1EB97F670)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F670);
  }
  return result;
}

unint64_t sub_1B6C7B4E0()
{
  unint64_t result = qword_1E9DD7C40;
  if (!qword_1E9DD7C40)
  {
    sub_1B62F7FEC(255, &qword_1E9DD7C38, (uint64_t)&type metadata for EntityCoder, MEMORY[0x1E4FBB320]);
    sub_1B6C78414();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7C40);
  }
  return result;
}

unint64_t sub_1B6C7B574()
{
  unint64_t result = qword_1EB980210;
  if (!qword_1EB980210)
  {
    sub_1B62F7FEC(255, &qword_1EB980208, (uint64_t)&type metadata for RelationsCoder, MEMORY[0x1E4FBB320]);
    sub_1B6C787E4();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB980210);
  }
  return result;
}

unint64_t sub_1B6C7B608()
{
  unint64_t result = qword_1E9DD7C50;
  if (!qword_1E9DD7C50)
  {
    sub_1B62F7FEC(255, &qword_1E9DD7C48, (uint64_t)&type metadata for ComponentProperty, MEMORY[0x1E4FBB320]);
    sub_1B62B1EFC();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7C50);
  }
  return result;
}

uint64_t sub_1B6C7B69C(unint64_t *a1, void (*a2)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a2(255);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6C7B6E4(uint64_t a1)
{
  return sub_1B6C760B0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void **)(v1 + 32));
}

unint64_t sub_1B6C7B6F0()
{
  unint64_t result = qword_1E9DD7C60;
  if (!qword_1E9DD7C60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7C60);
  }
  return result;
}

uint64_t sub_1B6C7B744(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6C7888C(255, &qword_1EB97E658, (void (*)(void))sub_1B6C78414, (void (*)(void))sub_1B6C78468);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6C7B7C0@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1B6C75628(a1, *(void **)(v2 + 32), a2);
}

unint64_t sub_1B6C7B7E4()
{
  unint64_t result = qword_1E9DD7C78;
  if (!qword_1E9DD7C78)
  {
    sub_1B62F7FEC(255, &qword_1EB980208, (uint64_t)&type metadata for RelationsCoder, MEMORY[0x1E4FBB320]);
    sub_1B6C78838();
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7C78);
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityTableEntryCoder()
{
  return &type metadata for EntityTableEntryCoder;
}

unsigned char *storeEnumTagSinglePayload for EntityManagerCoder.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFB)
  {
    unsigned int v6 = ((a2 - 252) >> 8) + 1;
    *unint64_t result = a2 + 4;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C7B954);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 4;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityManagerCoder.CodingKeys()
{
  return &type metadata for EntityManagerCoder.CodingKeys;
}

ValueMetadata *type metadata accessor for ComponentCoder()
{
  return &type metadata for ComponentCoder;
}

unsigned char *storeEnumTagSinglePayload for EntityCoder.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C7BA68);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityCoder.CodingKeys()
{
  return &type metadata for EntityCoder.CodingKeys;
}

ValueMetadata *type metadata accessor for EntityComponentReference.CodingKeys()
{
  return &type metadata for EntityComponentReference.CodingKeys;
}

unint64_t sub_1B6C7BAB8()
{
  unint64_t result = qword_1E9DD7D08;
  if (!qword_1E9DD7D08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7D08);
  }
  return result;
}

uint64_t sub_1B6C7BB0C()
{
  return swift_getWitnessTable();
}

unint64_t sub_1B6C7BB2C()
{
  unint64_t result = qword_1E9DD7D10;
  if (!qword_1E9DD7D10)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7D10);
  }
  return result;
}

unint64_t sub_1B6C7BB84()
{
  unint64_t result = qword_1E9DD7D18;
  if (!qword_1E9DD7D18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7D18);
  }
  return result;
}

unint64_t sub_1B6C7BBDC()
{
  unint64_t result = qword_1E9DD7D20;
  if (!qword_1E9DD7D20)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7D20);
  }
  return result;
}

unint64_t sub_1B6C7BC34()
{
  unint64_t result = qword_1EB97F098;
  if (!qword_1EB97F098)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F098);
  }
  return result;
}

unint64_t sub_1B6C7BC8C()
{
  unint64_t result = qword_1EB97F090;
  if (!qword_1EB97F090)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F090);
  }
  return result;
}

unint64_t sub_1B6C7BCE4()
{
  unint64_t result = qword_1EB97DBB8;
  if (!qword_1EB97DBB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DBB8);
  }
  return result;
}

unint64_t sub_1B6C7BD3C()
{
  unint64_t result = qword_1EB97DBB0;
  if (!qword_1EB97DBB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97DBB0);
  }
  return result;
}

uint64_t sub_1B6C7BD90()
{
  return swift_getWitnessTable();
}

uint64_t sub_1B6C7BDAC()
{
  return swift_getWitnessTable();
}

unint64_t sub_1B6C7BDCC()
{
  unint64_t result = qword_1E9DD7D28;
  if (!qword_1E9DD7D28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7D28);
  }
  return result;
}

unint64_t sub_1B6C7BE24()
{
  unint64_t result = qword_1E9DD7D30;
  if (!qword_1E9DD7D30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7D30);
  }
  return result;
}

unint64_t sub_1B6C7BE78()
{
  unint64_t result = qword_1EB97E878;
  if (!qword_1EB97E878)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97E878);
  }
  return result;
}

uint64_t sub_1B6C7BECC(uint64_t a1, uint64_t a2)
{
  sub_1B62BF970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B6C7BF30(uint64_t a1, uint64_t a2)
{
  sub_1B62BF970();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

unint64_t sub_1B6C7BF94()
{
  unint64_t result = qword_1EB97F658;
  if (!qword_1EB97F658)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F658);
  }
  return result;
}

ValueMetadata *type metadata accessor for EntityTableEntryCoder.CodingKeys()
{
  return &type metadata for EntityTableEntryCoder.CodingKeys;
}

unsigned char *_s3VFX24EntityComponentReferenceV10CodingKeysOwst_0(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C7C0C4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for ComponentCoder.CodingKeys_pre2000()
{
  return &type metadata for ComponentCoder.CodingKeys_pre2000;
}

unint64_t sub_1B6C7C100()
{
  unint64_t result = qword_1E9DD7D40;
  if (!qword_1E9DD7D40)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7D40);
  }
  return result;
}

unint64_t sub_1B6C7C158()
{
  unint64_t result = qword_1E9DD7D48;
  if (!qword_1E9DD7D48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7D48);
  }
  return result;
}

unint64_t sub_1B6C7C1B0()
{
  unint64_t result = qword_1EB97F668;
  if (!qword_1EB97F668)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F668);
  }
  return result;
}

unint64_t sub_1B6C7C208()
{
  unint64_t result = qword_1EB97F660;
  if (!qword_1EB97F660)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97F660);
  }
  return result;
}

unint64_t sub_1B6C7C260()
{
  unint64_t result = qword_1EB97E888;
  if (!qword_1EB97E888)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97E888);
  }
  return result;
}

unint64_t sub_1B6C7C2B8()
{
  unint64_t result = qword_1EB97E880;
  if (!qword_1EB97E880)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1EB97E880);
  }
  return result;
}

void *sub_1B6C7C30C(void *a1)
{
  uint64_t v2 = swift_allocObject();
  uint64_t v3 = OBJC_IVAR____TtC3VFX15_WorldValueNode_target;
  uint64_t v4 = v2 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target;
  *(_OWORD *)uint64_t v4 = xmmword_1B6E4F270;
  uint64_t v5 = (uint64_t)a1 + v3;
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  swift_retain();
  swift_retain();
  sub_1B6C7E04C(v5, v4);
  unsigned int v6 = (char *)a1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath;
  uint64_t v7 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 8);
  uint64_t v8 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 32);
  char v9 = *((unsigned char *)a1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 40);
  __int16 v10 = *(_WORD *)((char *)a1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 42);
  uint64_t v11 = v2 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath;
  *(void *)uint64_t v11 = *(void *)((char *)a1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath);
  *(void *)(v11 + 8) = v7;
  *(_OWORD *)(v11 + 16) = *((_OWORD *)v6 + 1);
  *(void *)(v11 + 32) = v8;
  *(unsigned char *)(v11 + 40) = v9;
  *(_WORD *)(v11 + 42) = v10;
  swift_bridgeObjectRetain();
  swift_retain();
  swift_release();
  uint64_t v12 = sub_1B682A2AC(a1);
  swift_release();
  return v12;
}

uint64_t sub_1B6C7C3F4()
{
  sub_1B6BC3508(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target, (uint64_t)&v10);
  if (v10) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = v11 == 1;
  }
  if (v1)
  {
    sub_1B6BC35C4((uint64_t)&v10);
    unint64_t v7 = 0xE400000000000000;
    uint64_t v5 = 1718379859;
  }
  else
  {
    sub_1B6649008((uint64_t)&v10, (uint64_t)&v12);
    uint64_t v2 = MEMORY[0x1BA9B8670](&v12);
    swift_unknownObjectRelease();
    if (v2)
    {
      if (MEMORY[0x1BA9B8670](&v12)
        && (unint64_t v3 = v13,
            uint64_t ObjectType = swift_getObjectType(),
            uint64_t v5 = (*(uint64_t (**)(uint64_t, unint64_t))(v3 + 8))(ObjectType, v3),
            unint64_t v7 = v6,
            swift_unknownObjectRelease(),
            v7))
      {
        sub_1B66490B8((uint64_t)&v12);
      }
      else
      {
        sub_1B66490B8((uint64_t)&v12);
        swift_bridgeObjectRelease();
        unint64_t v7 = 0xE800000000000000;
        uint64_t v5 = 0x3E656D616E6F6E3CLL;
      }
    }
    else
    {
      sub_1B66490B8((uint64_t)&v12);
      unint64_t v7 = 0xEC0000003E646576;
      uint64_t v5 = 0x6C6F7365726E753CLL;
    }
  }
  uint64_t v12 = v5;
  unint64_t v13 = v7;
  sub_1B6E31948();
  uint64_t v10 = 0;
  unint64_t v11 = 0xE000000000000000;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B6E32738();
  uint64_t v10 = sub_1B6E33B48();
  unint64_t v11 = v8;
  sub_1B6E31948();
  swift_bridgeObjectRetain();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v12;
}

uint64_t sub_1B6C7C5EC()
{
  sub_1B6BC3508(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target, (uint64_t)v8);
  if (v8[0]) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = v8[1] == 1;
  }
  if (v1)
  {
    sub_1B6BC35C4((uint64_t)v8);
    return 1718379859;
  }
  else
  {
    sub_1B6649008((uint64_t)v8, (uint64_t)v9);
    if (MEMORY[0x1BA9B8670](v9))
    {
      uint64_t v2 = v10;
      uint64_t ObjectType = swift_getObjectType();
      uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(v2 + 8))(ObjectType, v2);
      uint64_t v6 = v5;
      swift_unknownObjectRelease();
      if (!v6) {
        uint64_t v4 = 0x3E656D616E6F6E3CLL;
      }
    }
    else
    {
      strcpy((char *)v8, "<unresolved:");
      BYTE5(v8[1]) = 0;
      HIWORD(v8[1]) = -5120;
      swift_bridgeObjectRetain();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      uint64_t v4 = v8[0];
    }
    sub_1B66490B8((uint64_t)v9);
  }
  return v4;
}

uint64_t sub_1B6C7C724()
{
  return 0;
}

uint64_t sub_1B6C7C8A8()
{
  sub_1B6BC3508(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target, (uint64_t)&v18);
  if (v18) {
    BOOL v1 = 0;
  }
  else {
    BOOL v1 = v19 == 1;
  }
  if (v1)
  {
    sub_1B6BC35C4((uint64_t)&v18);
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    swift_retain();
    int v12 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v20[0] = 0;
    swift_retain();
    sub_1B6B33E34(v12, v20, 0xD000000000000055, 0x80000001B6F4FC50);
    swift_release();
    swift_release();
    return MEMORY[0x1E4FBC860];
  }
  sub_1B6649008((uint64_t)&v18, (uint64_t)v20);
  uint64_t v2 = MEMORY[0x1BA9B8670](v20);
  swift_unknownObjectRelease();
  if (!v2)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    uint64_t v18 = 0;
    unint64_t v19 = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    uint64_t v18 = 0xD000000000000028;
    unint64_t v19 = 0x80000001B6F4FBE0;
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t v13 = v18;
    uint64_t v14 = v19;
    int v15 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    uint64_t v18 = 0;
    swift_retain();
    sub_1B6B33E34(v15, &v18, v13, v14);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_1B66490B8((uint64_t)v20);
    return MEMORY[0x1E4FBC860];
  }
  sub_1B6C7E3EC(0, &qword_1EB980BA8, (uint64_t)&type metadata for ScriptParameter, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B6E77050;
  uint64_t v4 = v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath;
  uint64_t v6 = *(void *)(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath);
  uint64_t v5 = *(void *)(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 8);
  uint64_t v7 = *(void *)(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 32);
  char v8 = *(unsigned char *)(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 40);
  __int16 v9 = *(_WORD *)(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 42);
  type metadata accessor for SetWorldValueNode(0);
  if (swift_dynamicCastClass()) {
    char v10 = 2;
  }
  else {
    char v10 = 1;
  }
  uint64_t v11 = swift_allocObject();
  long long v17 = *(_OWORD *)(v4 + 16);
  sub_1B664D9F0((uint64_t)v20, v11 + 16);
  *(void *)(v11 + 48) = v6;
  *(void *)(v11 + 56) = v5;
  *(_OWORD *)(v11 + 64) = v17;
  *(void *)(v11 + 80) = v7;
  *(unsigned char *)(v11 + 88) = v8;
  *(_WORD *)(v11 + 90) = v9;
  *(void *)(v3 + 32) = v11 | 0x1000000000000000;
  *(unsigned char *)(v3 + 40) = v10;
  *(void *)(v3 + 48) = 0;
  *(unsigned char *)(v3 + 56) = 1;
  swift_bridgeObjectRetain();
  swift_retain();
  sub_1B66490B8((uint64_t)v20);
  return v3;
}

void sub_1B6C7CC2C()
{
}

uint64_t sub_1B6C7CC78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target;
  sub_1B6BC3508(v2 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target, (uint64_t)v8);
  if (v8[0]) {
    BOOL v5 = 0;
  }
  else {
    BOOL v5 = v8[1] == 1;
  }
  if (v5) {
    return sub_1B6BC35C4((uint64_t)v8);
  }
  sub_1B6649008((uint64_t)v8, (uint64_t)v9);
  uint64_t ObjectType = swift_getObjectType();
  (*(void (**)(unsigned char *, uint64_t, uint64_t))(a2 + 16))(v9, ObjectType, a2);
  sub_1B6BC35C4(v4);
  return sub_1B6649008((uint64_t)v9, v4);
}

uint64_t sub_1B6C7CD28(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  sub_1B6BC3508(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target, (uint64_t)&v8);
  sub_1B62C550C((uint64_t)v14, v15);
  sub_1B6C7E3EC(0, (unint64_t *)&qword_1E9DD5CE0, (uint64_t)&type metadata for VFXBridgeableReference, MEMORY[0x1E4FBB718]);
  sub_1B6C7E470(&qword_1E9DD7DC8, (void (*)(void))sub_1B6649174);
  sub_1B6E332B8();
  sub_1B6BC35C4((uint64_t)&v8);
  if (!v2)
  {
    uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 24);
    uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 32);
    char v5 = *(unsigned char *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 40);
    __int16 v6 = *(_WORD *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 42);
    uint64_t v8 = *(void *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath);
    long long v9 = *(_OWORD *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 8);
    uint64_t v10 = v3;
    uint64_t v11 = v4;
    char v12 = v5;
    __int16 v13 = v6;
    sub_1B62C550C((uint64_t)v14, v15);
    sub_1B690622C();
    sub_1B6E332B8();
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v14);
}

uint64_t sub_1B6C7CEB8(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  uint64_t result = sub_1B6E33A18();
  if (!v2)
  {
    sub_1B6C7E3EC(0, (unint64_t *)&qword_1E9DD5CE0, (uint64_t)&type metadata for VFXBridgeableReference, MEMORY[0x1E4FBB718]);
    sub_1B62C550C((uint64_t)v15, v16);
    sub_1B6C7E470(&qword_1E9DD7DC0, (void (*)(void))sub_1B6648FB4);
    sub_1B6E33168();
    sub_1B6BC3620((uint64_t)&v9, v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target);
    sub_1B62C550C((uint64_t)v15, v16);
    sub_1B690601C();
    sub_1B6E33168();
    uint64_t v4 = v11;
    uint64_t v5 = v12;
    char v6 = v13;
    __int16 v7 = v14;
    uint64_t v8 = v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath;
    *(void *)uint64_t v8 = v9;
    *(_OWORD *)(v8 + 8) = v10;
    *(void *)(v8 + 24) = v4;
    *(void *)(v8 + 32) = v5;
    *(unsigned char *)(v8 + 40) = v6;
    *(_WORD *)(v8 + 42) = v7;
    swift_release();
    swift_bridgeObjectRelease();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v15);
  }
  return result;
}

void sub_1B6C7D06C()
{
}

uint64_t sub_1B6C7D09C()
{
  sub_1B6BC35C4(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target);
  swift_release();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C7D0F0()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1B6BC35C4(v0 + OBJC_IVAR____TtC3VFX15_WorldValueNode_target);
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t sub_1B6C7D1D0()
{
  return type metadata accessor for _WorldValueNode(0);
}

uint64_t type metadata accessor for _WorldValueNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7D50);
}

uint64_t sub_1B6C7D1F8()
{
  return sub_1B6C7DE14();
}

uint64_t sub_1B6C7D20C(void *a1)
{
  return sub_1B6C7CD28(a1);
}

uint64_t sub_1B6C7D224(void *a1)
{
  return sub_1B6C7CEB8(a1);
}

uint64_t sub_1B6C7D23C(char a1)
{
  return (*(uint64_t (**)(void))(*(void *)v1 + 368))(a1 & 1);
}

uint64_t sub_1B6C7D274@<X0>(uint64_t *a1@<X8>)
{
  sub_1B6C7E3EC(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B6E76B30;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0x8000000000000008;
  *(void *)(v3 + 32) = v4 | 0x6000000000000000;
  uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 24);
  if (swift_conformsToProtocol2()) {
    uint64_t v6 = v5;
  }
  else {
    uint64_t v6 = 0;
  }
  if (v6)
  {
    unint64_t v7 = 0x8000000000000020;
  }
  else
  {
    unint64_t v8 = sub_1B69B1CC4(v5);
    if ((~v8 & 0xF000000000000007) != 0) {
      unint64_t v7 = v8;
    }
    else {
      unint64_t v7 = 0x8000000000000000;
    }
  }
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = v7;
  *(void *)(v3 + 40) = v9 | 0x6000000000000000;
  sub_1B68CE434();
  uint64_t v10 = swift_allocObject();
  *(_OWORD *)(v10 + 16) = xmmword_1B6E76B30;
  *(void *)(v10 + 32) = 0;
  *(void *)(v10 + 40) = 0;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v11 = sub_1B67CCC98();
  uint64_t v13 = v12;
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v10 + 48) = v11;
  *(void *)(v10 + 56) = v13;
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B6E77050;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x8000000000000008;
  *(void *)(v14 + 32) = result | 0x6000000000000000;
  *a1 = v3;
  a1[1] = v14;
  a1[2] = (uint64_t)&unk_1F0F74708;
  a1[3] = v10;
  uint64_t v16 = MEMORY[0x1E4FBC860];
  a1[4] = MEMORY[0x1E4FBC860];
  a1[5] = v16;
  return result;
}

uint64_t sub_1B6C7D46C()
{
  return sub_1B6C7E0D4();
}

uint64_t sub_1B6C7D480()
{
  return type metadata accessor for SetWorldValueNode(0);
}

uint64_t type metadata accessor for SetWorldValueNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7D60);
}

uint64_t sub_1B6C7D4AC()
{
  return type metadata accessor for InspectorSetWorldValueNode(0);
}

uint64_t type metadata accessor for InspectorSetWorldValueNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7D70);
}

double sub_1B6C7D4D4@<D0>(uint64_t a1@<X8>)
{
  sub_1B6C7E3EC(0, &qword_1E9DD1FD0, (uint64_t)&type metadata for AnyType, MEMORY[0x1E4FBBE00]);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC3VFX15_WorldValueNode_scriptKeyPath + 24);
  if (swift_conformsToProtocol2()) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5)
  {
    unint64_t v6 = 0x8000000000000020;
  }
  else
  {
    unint64_t v7 = sub_1B69B1CC4(v4);
    unint64_t v6 = 0x8000000000000000;
    if ((~v7 & 0xF000000000000007) != 0) {
      unint64_t v6 = v7;
    }
  }
  *(void *)(inited + 32) = v6;
  sub_1B682AF48(inited, v15);
  swift_setDeallocating();
  swift_arrayDestroy();
  sub_1B68CE434();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B6E77050;
  swift_bridgeObjectRetain();
  swift_retain();
  uint64_t v9 = sub_1B67CCC98();
  uint64_t v11 = v10;
  swift_release();
  swift_bridgeObjectRelease();
  *(void *)(v8 + 32) = v9;
  *(void *)(v8 + 40) = v11;
  uint64_t v12 = v17;
  uint64_t v18 = v16;
  sub_1B62D8C3C((uint64_t)&v18);
  double result = *(double *)v15;
  long long v14 = v15[1];
  *(_OWORD *)a1 = v15[0];
  *(_OWORD *)(a1 + 16) = v14;
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v12;
  return result;
}

uint64_t sub_1B6C7D65C()
{
  return type metadata accessor for GetWorldValueNode(0);
}

uint64_t type metadata accessor for GetWorldValueNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7D80);
}

uint64_t sub_1B6C7D684()
{
  return swift_updateClassMetadata2();
}

double sub_1B6C7D6BC@<D0>(_OWORD *a1@<X8>)
{
  sub_1B6C7E3EC(0, &qword_1E9DD1FD0, (uint64_t)&type metadata for AnyType, MEMORY[0x1E4FBBE00]);
  unint64_t inited = swift_initStackObject();
  *(_OWORD *)(inited + 16) = xmmword_1B6E77050;
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = *(unsigned char *)(v1 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind);
  *(void *)(inited + 32) = v4 | 0x5000000000000000;
  sub_1B682AF48(inited, v7);
  swift_setDeallocating();
  swift_arrayDestroy();
  long long v5 = v7[1];
  *a1 = v7[0];
  a1[1] = v5;
  double result = *(double *)&v8;
  a1[2] = v8;
  return result;
}

uint64_t sub_1B6C7D79C()
{
  return 0x666552646C726F57;
}

void *sub_1B6C7D7C0(void *a1)
{
  uint64_t v2 = swift_allocObject();
  *(unsigned char *)(v2 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind) = *((unsigned char *)a1
                                                                   + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind);
  sub_1B664D9F0((uint64_t)a1 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, v2 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference);
  return sub_1B682A2AC(a1);
}

uint64_t sub_1B6C7D820()
{
  uint64_t v3 = 0;
  unint64_t v4 = 0xE000000000000000;
  sub_1B664D9F0(v0 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, (uint64_t)v2);
  sub_1B6E32B18();
  sub_1B66490B8((uint64_t)v2);
  return v3;
}

uint64_t sub_1B6C7D888(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A58();
  v4[0] = *(unsigned char *)(v1 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind);
  sub_1B62C550C((uint64_t)v5, v6);
  sub_1B6C7DFF8();
  sub_1B6E332B8();
  if (!v2)
  {
    sub_1B664D9F0(v1 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, (uint64_t)v4);
    sub_1B62C550C((uint64_t)v5, v6);
    sub_1B6649174();
    sub_1B6E332B8();
    sub_1B66490B8((uint64_t)v4);
  }
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
}

uint64_t sub_1B6C7D998(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  uint64_t result = sub_1B6E33A18();
  if (!v2)
  {
    sub_1B62C550C((uint64_t)v5, v6);
    sub_1B6C7DFA4();
    sub_1B6E33168();
    *(unsigned char *)(v1 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_kind) = v4[0];
    sub_1B62C550C((uint64_t)v5, v6);
    sub_1B6648FB4();
    sub_1B6E33168();
    sub_1B69CBCE8((uint64_t)v4, v1 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference);
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v5);
  }
  return result;
}

uint64_t sub_1B6C7DAB8()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference;
  sub_1B664D9F0(v0 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, (uint64_t)&v9);
  uint64_t v2 = MEMORY[0x1BA9B8670](&v9);
  sub_1B66490B8((uint64_t)&v9);
  swift_unknownObjectRelease();
  if (!v2)
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    uint64_t v9 = 0;
    unint64_t v10 = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    uint64_t v9 = 0xD000000000000028;
    unint64_t v10 = 0x80000001B6F4FBE0;
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t v3 = v9;
    uint64_t v4 = v10;
    int v5 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    uint64_t v9 = 0;
    swift_retain();
    sub_1B6B33E34(v5, &v9, v3, v4);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
  }
  sub_1B6C7E3EC(0, &qword_1EB980BA8, (uint64_t)&type metadata for ScriptParameter, MEMORY[0x1E4FBBE00]);
  uint64_t v6 = swift_allocObject();
  *(_OWORD *)(v6 + 16) = xmmword_1B6E77050;
  sub_1B664D9F0(v1, (uint64_t)&v9);
  uint64_t v7 = swift_allocObject();
  sub_1B6649008((uint64_t)&v9, v7 + 16);
  *(void *)(v6 + 32) = v7 | 0x2000000000000000;
  *(unsigned char *)(v6 + 40) = 1;
  *(void *)(v6 + 48) = 0;
  *(unsigned char *)(v6 + 56) = 1;
  return v6;
}

void sub_1B6C7DCD4()
{
}

uint64_t sub_1B6C7DD04()
{
  return sub_1B66490B8(v0 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference);
}

uint64_t sub_1B6C7DD14()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1B66490B8(v0 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference);

  return swift_deallocClassInstance();
}

uint64_t sub_1B6C7DDD8()
{
  return type metadata accessor for WorldReferenceNode(0);
}

uint64_t type metadata accessor for WorldReferenceNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7D90);
}

uint64_t sub_1B6C7DE00()
{
  return sub_1B6C7DE14();
}

uint64_t sub_1B6C7DE14()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B6C7DE54(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = v2 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference;
  sub_1B664D9F0(v2 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, (uint64_t)v7);
  sub_1B6B1BF04((uint64_t)v7, ObjectType, a2, (uint64_t)v8);
  sub_1B66490B8((uint64_t)v7);
  return sub_1B69CBCE8((uint64_t)v8, v5);
}

uint64_t sub_1B6C7DEE0(void *a1)
{
  return sub_1B6C7D888(a1);
}

uint64_t sub_1B6C7DEF8(void *a1)
{
  return sub_1B6C7D998(a1);
}

unint64_t sub_1B6C7DF10()
{
  return 0xD000000000000016;
}

uint64_t sub_1B6C7DF2C()
{
  return type metadata accessor for ImplicitWorldReferenceNode(0);
}

uint64_t type metadata accessor for ImplicitWorldReferenceNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7DA0);
}

uint64_t sub_1B6C7DF54()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B6C7DF64()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();

  return MEMORY[0x1F4186498](v0, 48, 7);
}

unint64_t sub_1B6C7DFA4()
{
  unint64_t result = qword_1E9DD7DB0;
  if (!qword_1E9DD7DB0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7DB0);
  }
  return result;
}

unint64_t sub_1B6C7DFF8()
{
  unint64_t result = qword_1E9DD7DB8;
  if (!qword_1E9DD7DB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7DB8);
  }
  return result;
}

uint64_t sub_1B6C7E04C(uint64_t a1, uint64_t a2)
{
  sub_1B6C7E3EC(0, (unint64_t *)&qword_1E9DD5CE0, (uint64_t)&type metadata for VFXBridgeableReference, MEMORY[0x1E4FBB718]);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24))(a2, a1, v4);
  return a2;
}

uint64_t sub_1B6C7E0D4()
{
  type metadata accessor for PartialComposeNode(0);
  uint64_t v0 = swift_dynamicCastClass();
  if (v0)
  {
    unint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
    if (v1 >> 60 == 1)
    {
      uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      if (v2)
      {
        type metadata accessor for NilNode(0);
        swift_retain();
        uint64_t v3 = 0;
        for (uint64_t i = 0; i != v2; ++i)
        {
          if (!swift_dynamicCastClass())
          {
            swift_retain();
            sub_1B6E328C8();
            swift_bridgeObjectRelease();
            sub_1B6E33098();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            swift_bridgeObjectRetain();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            sub_1B6E33098();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            sub_1B6E31948();
            swift_release();
            swift_bridgeObjectRelease();
          }
          v3 += 16;
        }
        swift_release();
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    swift_arrayDestroy();
  }
  else
  {
    sub_1B6E33098();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E33098();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    return 0x6D6172617025;
  }
  return v5;
}

void sub_1B6C7E3EC(uint64_t a1, unint64_t *a2, uint64_t a3, uint64_t (*a4)(void, uint64_t))
{
  if (!*a2)
  {
    unint64_t v5 = a4(0, a3);
    if (!v6) {
      atomic_store(v5, a2);
    }
  }
}

uint64_t sub_1B6C7E438()
{
  sub_1B678FC34(*(void *)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B6C7E470(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6C7E3EC(255, (unint64_t *)&qword_1E9DD5CE0, (uint64_t)&type metadata for VFXBridgeableReference, MEMORY[0x1E4FBB718]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6C7E500()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();

  return MEMORY[0x1F4186498](v0, 92, 7);
}

uint64_t sub_1B6C7E550()
{
  type metadata accessor for PartialComposeNode(0);
  uint64_t v0 = swift_dynamicCastClass();
  if (v0)
  {
    unint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
    if (v1 >> 60 == 1)
    {
      uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      if (v2)
      {
        type metadata accessor for NilNode(0);
        swift_retain();
        uint64_t v3 = 0;
        for (uint64_t i = 0; i != v2; ++i)
        {
          if (!swift_dynamicCastClass())
          {
            swift_retain();
            sub_1B6E328C8();
            swift_bridgeObjectRelease();
            sub_1B6E33098();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            swift_bridgeObjectRetain();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            sub_1B6E33098();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            sub_1B6E31948();
            swift_release();
            swift_bridgeObjectRelease();
          }
          v3 += 16;
        }
        swift_release();
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    swift_arrayDestroy();
  }
  else
  {
    sub_1B6E33098();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E33098();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    return 0x6D6172617025;
  }
  return v5;
}

uint64_t sub_1B6C7E868()
{
  type metadata accessor for PartialComposeNode(0);
  uint64_t v0 = swift_dynamicCastClass();
  if (v0)
  {
    unint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC3VFX12_ComposeNode_type);
    if (v1 >> 60 == 1)
    {
      uint64_t v2 = *(void *)((v1 & 0xFFFFFFFFFFFFFFFLL) + 0x10);
      if (v2)
      {
        type metadata accessor for NilNode(0);
        swift_retain();
        uint64_t v3 = 0;
        for (uint64_t i = 0; i != v2; ++i)
        {
          if (!swift_dynamicCastClass())
          {
            swift_retain();
            sub_1B6E328C8();
            swift_bridgeObjectRelease();
            sub_1B6E33098();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            swift_bridgeObjectRetain();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            sub_1B6E33098();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            sub_1B6E31948();
            sub_1B6E31948();
            swift_release();
            swift_bridgeObjectRelease();
          }
          v3 += 16;
        }
        swift_release();
        uint64_t v5 = 0;
      }
      else
      {
        uint64_t v5 = 0;
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    swift_arrayDestroy();
  }
  else
  {
    sub_1B6E33098();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    sub_1B6E33098();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    return 0x6D6172617025;
  }
  return v5;
}

uint64_t sub_1B6C7EB80()
{
  type metadata accessor for EntityAssetNode(0);
  uint64_t v0 = swift_dynamicCastClass();
  if (v0) {
    return *(void *)(v0 + OBJC_IVAR____TtC3VFX15EntityAssetNode_entity);
  }
  type metadata accessor for ConstantNode(0);
  uint64_t v2 = swift_dynamicCastClass();
  if (v2) {
    sub_1B62CAAD8(v2 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)v3);
  }
  else {
    memset(v3, 0, sizeof(v3));
  }
  sub_1B62F7F54(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  if (swift_dynamicCast()) {
    return v4;
  }
  else {
    return 0;
  }
}

uint64_t sub_1B6C7EC68()
{
  type metadata accessor for WorldReferenceNode(0);
  uint64_t v0 = swift_dynamicCastClass();
  if (v0)
  {
    sub_1B664D9F0(v0 + OBJC_IVAR____TtC3VFX18WorldReferenceNode_reference, (uint64_t)v3);
    MEMORY[0x1BA9B8670](v3);
    sub_1B66490B8((uint64_t)v3);
    self;
    uint64_t result = swift_dynamicCastObjCClass();
    if (!result)
    {
      swift_unknownObjectRelease();
      return 0;
    }
  }
  else
  {
    type metadata accessor for ConstantNode(0);
    uint64_t v2 = swift_dynamicCastClass();
    if (v2) {
      sub_1B62CAAD8(v2 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)v3);
    }
    else {
      memset(v3, 0, sizeof(v3));
    }
    sub_1B62F7F54(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
    sub_1B674F610();
    if (swift_dynamicCast()) {
      return v4;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B6C7ED98(uint64_t a1)
{
  uint64_t v3 = *(long long **)(*(void *)(*(void *)(v1 + 16) + 32) + OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor);
  if (!v3)
  {
    swift_retain();
    sub_1B6C80790();
  }
  swift_retain();
  RGContext.tryResolve(textureReference:)(v3, a1, (uint64_t)v8);
  swift_release();
  sub_1B6C82A6C((uint64_t)v8, (uint64_t)v9);
  if ((unint64_t)v10 << 16 == 0x20000) {
    return 0;
  }
  LOWORD(v4) = v9[0];
  LOWORD(v5) = v9[1];
  *(float *)&uint64_t v7 = (float)v4;
  *((float *)&v7 + 1) = (float)v5;
  return v7;
}

uint64_t sub_1B6C7EE78()
{
  unint64_t v1 = *(void *)(*(void *)(v0 + 24) + 88);
  sub_1B68289A0(*(void *)(v0 + 24));
  sub_1B67C52A4(v1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v2 = sub_1B69B18E4(v1, 0x8000000000000098);
  sub_1B678FC34(v1);
  if ((v2 & 1) == 0) {
    return 0;
  }
  uint64_t v3 = *(__objc2_class ***)(*(void *)(v0 + 16) + 144);
  if (*v3 != _TtC3VFX21TextureDescriptorNode) {
    return 0;
  }
  uint64_t v4 = *(uint64_t *)((char *)v3 + OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor);
  if (!v4)
  {
    swift_retain();
    sub_1B6C80790();
  }
  return v4;
}

unint64_t sub_1B6C7EF5C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 16) + 40);
  swift_retain();
  if (sub_1B68BD13C(v1) == 3)
  {
    swift_release();
    return 0;
  }
  else
  {
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    swift_release();
    swift_bridgeObjectRelease();
    return 0xD000000000000016;
  }
}

uint64_t sub_1B6C7F068()
{
  type metadata accessor for EntityAssetNode(0);
  uint64_t v0 = swift_dynamicCastClass();
  if (v0)
  {
    uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC3VFX15EntityAssetNode_entity);
    swift_retain_n();
  }
  else
  {
    type metadata accessor for ConstantNode(0);
    uint64_t v2 = swift_dynamicCastClass();
    if (v2) {
      sub_1B62CAAD8(v2 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)v4);
    }
    else {
      memset(v4, 0, sizeof(v4));
    }
    sub_1B62F7F54(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
    swift_retain_n();
    if ((swift_dynamicCast() & 1) == 0)
    {
      swift_release_n();
      return 0;
    }
    uint64_t v1 = v5;
  }
  *(void *)&v4[0] = 0;
  *((void *)&v4[0] + 1) = 0xE000000000000000;
  sub_1B6E328C8();
  swift_bridgeObjectRelease();
  *(void *)&v4[0] = 0xD000000000000016;
  *((void *)&v4[0] + 1) = 0x80000001B6F4FF50;
  uint64_t v5 = v1;
  sub_1B6E33098();
  sub_1B6E31948();
  swift_release_n();
  swift_bridgeObjectRelease();
  return *(void *)&v4[0];
}

uint64_t sub_1B6C7F204(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (int *)type metadata accessor for GraphError();
  sub_1B683DB30();
  uint64_t v6 = swift_allocError();
  long long v8 = v7;
  *uint64_t v7 = 0;
  uint64_t v9 = (char *)v7 + v5[5];
  uint64_t v10 = sub_1B6E31118();
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56))(v9, 1, 1, v10);
  uint64_t v11 = (char *)v8 + v5[6];
  *(void *)uint64_t v11 = 0;
  long long v11[8] = 97;
  uint64_t v12 = (void *)((char *)v8 + v5[7]);
  *uint64_t v12 = a1;
  v12[1] = a2;
  uint64_t v13 = OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics;
  long long v14 = *(void **)(v2 + OBJC_IVAR____TtC3VFX16GraphDiagnostics_diagnostics);
  swift_bridgeObjectRetain();
  uint64_t result = swift_isUniquelyReferenced_nonNull_native();
  *(void *)(v2 + v13) = v14;
  if ((result & 1) == 0)
  {
    uint64_t result = (uint64_t)sub_1B68C1084(0, v14[2] + 1, 1, v14);
    long long v14 = (void *)result;
    *(void *)(v2 + v13) = result;
  }
  unint64_t v17 = v14[2];
  unint64_t v16 = v14[3];
  if (v17 >= v16 >> 1)
  {
    uint64_t result = (uint64_t)sub_1B68C1084(v16 > 1, v17 + 1, 1, v14);
    long long v14 = (void *)result;
    *(void *)(v2 + v13) = result;
  }
  id v14[2] = v17 + 1;
  v14[v17 + 4] = v6;
  return result;
}

uint64_t sub_1B6C7F3FC()
{
  swift_unknownObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t type metadata accessor for RenderGraphDiagnostics()
{
  return self;
}

uint64_t sub_1B6C7F4AC(uint64_t a1)
{
  return sub_1B6C823E0(a1, (uint64_t (*)(uint64_t))sub_1B682A2AC);
}

uint64_t sub_1B6C7F4C4()
{
  return type metadata accessor for RenderGraphNode(0);
}

uint64_t type metadata accessor for RenderGraphNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7DE8);
}

uint64_t sub_1B6C7F4EC()
{
  return 0x6F577265646E6552;
}

uint64_t sub_1B6C7F50C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBBE00];
  sub_1B62F7F54(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B6E96DA0;
  uint64_t v4 = swift_allocObject();
  uint64_t v5 = swift_allocObject();
  *(unsigned char *)(v5 + 16) = 0;
  *(void *)(v4 + 16) = v5 | 0x5000000000000000;
  *(void *)(v3 + 32) = v4 | 0x6000000000000000;
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = swift_allocObject();
  uint64_t v8 = swift_allocObject();
  *(_OWORD *)(v8 + 16) = xmmword_1B6E8DAD0;
  *(void *)(v7 + 16) = v8 | 0x1000000000000000;
  *(void *)(v6 + 16) = v7;
  *(void *)(v3 + 40) = v6 | 0x6000000000000000;
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0x80000000000000B0;
  *(void *)(v3 + 48) = v9 | 0x6000000000000000;
  uint64_t v10 = swift_allocObject();
  *(void *)(v10 + 16) = 0x80000000000000B0;
  *(void *)(v3 + 56) = v10 | 0x6000000000000000;
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0x8000000000000010;
  *(void *)(v3 + 64) = v11 | 0x6000000000000000;
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0x80000000000000A0;
  *(void *)(v12 + 16) = v13;
  *(void *)(v3 + 72) = v12 | 0x6000000000000000;
  uint64_t v14 = swift_allocObject();
  uint64_t v15 = swift_allocObject();
  *(void *)(v15 + 16) = 0x80000000000000A0;
  *(void *)(v14 + 16) = v15;
  *(void *)(v3 + 80) = v14 | 0x6000000000000000;
  uint64_t v16 = swift_allocObject();
  uint64_t v17 = swift_allocObject();
  *(void *)(v17 + 16) = 0x8000000000000098;
  *(void *)(v16 + 16) = v17;
  *(void *)(v3 + 88) = v16 | 0x6000000000000000;
  sub_1B62F7F54(0, &qword_1E9DD1998, (uint64_t)&type metadata for AnyValue, v2);
  uint64_t v18 = swift_allocObject();
  uint64_t v19 = MEMORY[0x1E4FBB550];
  *(void *)(v18 + 64) = MEMORY[0x1E4FBB550];
  *(_OWORD *)(v18 + 16) = xmmword_1B6E96DA0;
  *(_OWORD *)(v18 + 32) = xmmword_1B6E8DAF0;
  *(void *)(v18 + 104) = v19;
  *(_OWORD *)(v18 + 72) = xmmword_1B6E8DAF0;
  *(void *)(v18 + 144) = MEMORY[0x1E4FBC538];
  *(_OWORD *)(v18 + 112) = xmmword_1B6EBCD10;
  *(void *)(v18 + 184) = v19;
  *(_OWORD *)(v18 + 152) = xmmword_1B6E8DAF0;
  v26[3] = MEMORY[0x1E4FBB390];
  LOBYTE(v26[0]) = 0;
  sub_1B62C14BC(v26, MEMORY[0x1E4FBB390]);
  uint64_t DynamicType = swift_getDynamicType();
  unint64_t v21 = sub_1B69B1CC4(DynamicType);
  if ((~v21 & 0xF000000000000007) != 0)
  {
    unint64_t v22 = v21;
    sub_1B62CAAD8((uint64_t)v26, v18 + 200);
    *(void *)(v18 + 192) = v22;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v26);
    *(void *)(v18 + 264) = v19;
    *(_OWORD *)(v18 + 232) = xmmword_1B6E8DAF0;
    *(_OWORD *)(v18 + 272) = xmmword_1B6E8DAF0;
    *(void *)(v18 + 344) = v19;
    *(void *)(v18 + 304) = v19;
    *(void *)(v18 + 312) = 0x8000000000000000;
    *(void *)(v18 + 320) = 0;
    uint64_t v23 = swift_allocObject();
    *(_OWORD *)(v23 + 16) = xmmword_1B6E76B30;
    uint64_t v24 = swift_allocObject();
    *(void *)(v24 + 16) = 0x80000000000000A0;
    *(void *)(v23 + 32) = v24 | 0x6000000000000000;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0x80000000000000A0;
    *(void *)(v23 + 40) = result | 0x6000000000000000;
    *a1 = v3;
    a1[1] = v23;
    a1[2] = (uint64_t)&unk_1F0F69F98;
    a1[3] = (uint64_t)&unk_1F0F69EB8;
    a1[4] = (uint64_t)&unk_1F0F69F58;
    a1[5] = v18;
  }
  else
  {
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    sub_1B6E33B48();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

void *sub_1B6C7F948()
{
  return &unk_1F0F69E90;
}

uint64_t sub_1B6C7F954()
{
  return type metadata accessor for RenderWorldNode(0);
}

uint64_t type metadata accessor for RenderWorldNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7DF8);
}

uint64_t sub_1B6C7F97C()
{
  return 0x6873696C627550;
}

uint64_t sub_1B6C7F994@<X0>(uint64_t *a1@<X8>)
{
  sub_1B62F7F54(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E76B30;
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = 2;
  *(void *)(v3 + 16) = v4 | 0x4000000000000000;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x80000000000000A0;
  *(void *)(v2 + 40) = result | 0x6000000000000000;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  *a1 = v2;
  a1[1] = v6;
  a1[2] = (uint64_t)&unk_1F0F7A758;
  a1[3] = (uint64_t)&unk_1F0F7A718;
  a1[4] = v6;
  a1[5] = v6;
  return result;
}

uint64_t sub_1B6C7FA94()
{
  return type metadata accessor for PublishTextureNode(0);
}

uint64_t type metadata accessor for PublishTextureNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7E08);
}

uint64_t sub_1B6C7FABC()
{
  return 0x746E6573657250;
}

uint64_t sub_1B6C7FAD4@<X0>(uint64_t *a1@<X8>)
{
  sub_1B62F7F54(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E77050;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x80000000000000A0;
  *(void *)(v2 + 32) = result | 0x6000000000000000;
  uint64_t v4 = MEMORY[0x1E4FBC860];
  *a1 = v2;
  a1[1] = v4;
  a1[2] = (uint64_t)&unk_1F0F566E0;
  a1[3] = (uint64_t)&unk_1F0F566B0;
  a1[4] = v4;
  a1[5] = v4;
  return result;
}

uint64_t sub_1B6C7FB88()
{
  return type metadata accessor for PresentNode(0);
}

uint64_t type metadata accessor for PresentNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7E18);
}

uint64_t sub_1B6C7FBB0()
{
  return 1920298050;
}

uint64_t sub_1B6C7FBC0@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBBE00];
  sub_1B62F7F54(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B6E76B30;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0x80000000000000A0;
  *(void *)(v3 + 32) = v4 | 0x6000000000000000;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0x8000000000000050;
  *(void *)(v3 + 40) = v5 | 0x6000000000000000;
  sub_1B62F7F54(0, &qword_1E9DD1998, (uint64_t)&type metadata for AnyValue, v2);
  uint64_t v6 = swift_allocObject();
  *(void *)(v6 + 64) = MEMORY[0x1E4FBB550];
  *(_OWORD *)(v6 + 16) = xmmword_1B6E76B30;
  *(_OWORD *)(v6 + 32) = xmmword_1B6E8DB00;
  void v12[3] = MEMORY[0x1E4FBB470];
  LODWORD(v12[0]) = 1092616192;
  sub_1B62C14BC(v12, MEMORY[0x1E4FBB470]);
  uint64_t DynamicType = swift_getDynamicType();
  unint64_t v8 = sub_1B69B1CC4(DynamicType);
  if ((~v8 & 0xF000000000000007) != 0)
  {
    unint64_t v9 = v8;
    sub_1B62CAAD8((uint64_t)v12, v6 + 80);
    *(void *)(v6 + 72) = v9;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v12);
    uint64_t v10 = swift_allocObject();
    *(_OWORD *)(v10 + 16) = xmmword_1B6E77050;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0x80000000000000A0;
    *(void *)(v10 + 32) = result | 0x6000000000000000;
    *a1 = v3;
    a1[1] = v10;
    a1[2] = (uint64_t)&unk_1F0FA36E0;
    a1[3] = (uint64_t)&unk_1F0FA3670;
    a1[4] = (uint64_t)&unk_1F0FA36B0;
    a1[5] = v6;
  }
  else
  {
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    sub_1B6E33B48();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

void *sub_1B6C7FE38()
{
  return &unk_1F0FA3640;
}

uint64_t sub_1B6C7FE44()
{
  return type metadata accessor for BlurNode(0);
}

uint64_t type metadata accessor for BlurNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7E28);
}

uint64_t sub_1B6C7FE6C@<X0>(uint64_t *a1@<X8>)
{
  sub_1B62F7F54(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E77050;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0x80000000000000A0;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B6E77050;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x80000000000000A0;
  *(void *)(v4 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v4;
  a1[2] = (uint64_t)&unk_1F0FA8288;
  a1[3] = (uint64_t)&unk_1F0FA8228;
  uint64_t v6 = MEMORY[0x1E4FBC860];
  a1[4] = (uint64_t)&unk_1F0FA8258;
  a1[5] = v6;
  return result;
}

void *sub_1B6C7FF84()
{
  return &unk_1F0FA81F8;
}

uint64_t sub_1B6C7FF90()
{
  return type metadata accessor for BloomNode(0);
}

uint64_t type metadata accessor for BloomNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7E38);
}

unint64_t sub_1B6C7FFB8()
{
  return 0xD000000000000011;
}

double sub_1B6C7FFD4@<D0>(uint64_t *a1@<X8>)
{
  sub_1B62F7F54(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E77050;
  uint64_t v3 = swift_allocObject();
  *(void *)(v3 + 16) = 0x8000000000000098;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t v4 = swift_allocObject();
  *(_OWORD *)(v4 + 16) = xmmword_1B6E77050;
  uint64_t v5 = swift_allocObject();
  uint64_t v6 = swift_allocObject();
  *(void *)&double result = 3;
  *(_OWORD *)(v6 + 16) = xmmword_1B6E8DAE0;
  *(void *)(v5 + 16) = v6 | 0x1000000000000000;
  *(void *)(v4 + 32) = v5 | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v4;
  a1[2] = (uint64_t)&unk_1F0F8AAB8;
  a1[3] = (uint64_t)&unk_1F0F8AA58;
  uint64_t v8 = MEMORY[0x1E4FBC860];
  a1[4] = (uint64_t)&unk_1F0F8AA88;
  a1[5] = v8;
  return result;
}

uint64_t sub_1B6C8010C()
{
  return type metadata accessor for ResolveResolutionNode(0);
}

uint64_t type metadata accessor for ResolveResolutionNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7E48);
}

uint64_t sub_1B6C80134()
{
  return 0x65727574786554;
}

uint64_t sub_1B6C8014C@<X0>(uint64_t *a1@<X8>)
{
  sub_1B62F7F54(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E77050;
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = swift_allocObject();
  *(unsigned char *)(v4 + 16) = 0;
  *(void *)(v3 + 16) = v4 | 0x4000000000000000;
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t v5 = swift_allocObject();
  *(_OWORD *)(v5 + 16) = xmmword_1B6E77050;
  uint64_t result = swift_allocObject();
  *(void *)(result + 16) = 0x80000000000000A0;
  *(void *)(v5 + 32) = result | 0x6000000000000000;
  *a1 = v2;
  a1[1] = v5;
  a1[2] = (uint64_t)&unk_1F0F8DF68;
  a1[3] = (uint64_t)&unk_1F0F8DF08;
  uint64_t v7 = MEMORY[0x1E4FBC860];
  a1[4] = (uint64_t)&unk_1F0F8DF38;
  a1[5] = v7;
  return result;
}

void *sub_1B6C80284()
{
  return &unk_1F0F8DED8;
}

uint64_t sub_1B6C80290()
{
  return type metadata accessor for RenderGraphTextureNode(0);
}

uint64_t type metadata accessor for RenderGraphTextureNode(uint64_t a1)
{
  return sub_1B633A29C(a1, qword_1E9DD7E58);
}

unint64_t sub_1B6C802B8()
{
  return 0xD000000000000011;
}

uint64_t sub_1B6C802D4@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = (uint64_t (*)(void, uint64_t))MEMORY[0x1E4FBBE00];
  sub_1B62F7F54(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v3 = swift_allocObject();
  *(_OWORD *)(v3 + 16) = xmmword_1B6E89D00;
  uint64_t v4 = swift_allocObject();
  *(void *)(v4 + 16) = 0x80000000000000B8;
  *(void *)(v3 + 32) = v4 | 0x6000000000000000;
  uint64_t v5 = swift_allocObject();
  *(void *)(v5 + 16) = 0x8000000000000050;
  *(void *)(v3 + 40) = v5 | 0x6000000000000000;
  uint64_t v6 = swift_allocObject();
  uint64_t v7 = swift_allocObject();
  *(void *)(v7 + 16) = 0x8000000000000030;
  *(void *)(v6 + 16) = v7;
  *(void *)(v3 + 48) = v6 | 0x6000000000000000;
  uint64_t v8 = swift_allocObject();
  uint64_t v9 = swift_allocObject();
  *(void *)(v9 + 16) = 0x8000000000000030;
  *(void *)(v8 + 16) = v9;
  *(void *)(v3 + 56) = v8 | 0x6000000000000000;
  uint64_t v10 = swift_allocObject();
  uint64_t v11 = swift_allocObject();
  *(void *)(v11 + 16) = 0x8000000000000030;
  *(void *)(v10 + 16) = v11;
  *(void *)(v3 + 64) = v10 | 0x6000000000000000;
  uint64_t v12 = swift_allocObject();
  uint64_t v13 = swift_allocObject();
  *(void *)(v13 + 16) = 0x8000000000000030;
  *(void *)(v12 + 16) = v13;
  *(void *)(v3 + 72) = v12 | 0x6000000000000000;
  sub_1B62F7F54(0, &qword_1E9DD1998, (uint64_t)&type metadata for AnyValue, v2);
  uint64_t v14 = swift_allocObject();
  *(_OWORD *)(v14 + 16) = xmmword_1B6E89D00;
  uint64_t v15 = RGResourceIdentifierFinalColor((CFX::RG::ResourceIdentifier *)v14);
  *(void *)(v14 + 64) = MEMORY[0x1E4FBC538];
  *(void *)(v14 + 32) = 0x80000000000000B8;
  *(void *)(v14 + 40) = v15;
  v22[3] = MEMORY[0x1E4FBB470];
  LODWORD(v22[0]) = 1065353216;
  sub_1B62C14BC(v22, MEMORY[0x1E4FBB470]);
  uint64_t DynamicType = swift_getDynamicType();
  unint64_t v17 = sub_1B69B1CC4(DynamicType);
  if ((~v17 & 0xF000000000000007) != 0)
  {
    unint64_t v18 = v17;
    sub_1B62CAAD8((uint64_t)v22, v14 + 80);
    *(void *)(v14 + 72) = v18;
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v22);
    uint64_t v19 = MEMORY[0x1E4FBB550];
    *(void *)(v14 + 144) = MEMORY[0x1E4FBB550];
    *(_OWORD *)(v14 + 112) = xmmword_1B6E8DAF0;
    *(void *)(v14 + 184) = v19;
    *(_OWORD *)(v14 + 152) = xmmword_1B6E8DAF0;
    *(void *)(v14 + 224) = v19;
    *(_OWORD *)(v14 + 192) = xmmword_1B6E8DAF0;
    *(void *)(v14 + 264) = v19;
    *(_OWORD *)(v14 + 232) = xmmword_1B6E8DAF0;
    uint64_t v20 = swift_allocObject();
    *(_OWORD *)(v20 + 16) = xmmword_1B6E77050;
    uint64_t result = swift_allocObject();
    *(void *)(result + 16) = 0x8000000000000098;
    *(void *)(v20 + 32) = result | 0x6000000000000000;
    *a1 = v3;
    a1[1] = v20;
    a1[2] = (uint64_t)&unk_1F0F8B6B8;
    a1[3] = (uint64_t)&unk_1F0F8B608;
    a1[4] = (uint64_t)&unk_1F0F8B688;
    a1[5] = v14;
  }
  else
  {
    sub_1B6E328C8();
    swift_bridgeObjectRelease();
    sub_1B6E33B48();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B6C80658()
{
  uint64_t v1 = *(void *)(v0 + OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor);
  if (v1) {
    RGTextureReferenceDescriptorDestroy(v1);
  }
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v2 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v3 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v3 - 8) + 8))(v2, v3);

  return swift_deallocClassInstance();
}

uint64_t sub_1B6C80720()
{
  return type metadata accessor for TextureDescriptorNode(0);
}

uint64_t type metadata accessor for TextureDescriptorNode(uint64_t a1)
{
  return sub_1B633A29C(a1, qword_1E9DD7E80);
}

uint64_t sub_1B6C80748()
{
  return swift_updateClassMetadata2();
}

void sub_1B6C80790()
{
  type metadata accessor for ConstantNode(0);
  uint64_t v0 = swift_dynamicCastClass();
  if (v0) {
    sub_1B62CAAD8(v0 + OBJC_IVAR____TtC3VFX12ConstantNode_holder + 8, (uint64_t)v6);
  }
  else {
    memset(v6, 0, sizeof(v6));
  }
  sub_1B62F7F54(0, (unint64_t *)&qword_1EB980F60, MEMORY[0x1E4FBC840] + 8, MEMORY[0x1E4FBB718]);
  swift_retain();
  float v1 = 0.0;
  if (swift_dynamicCast()) {
    float v1 = v5;
  }
  uint64_t v2 = (CFX::RG::ResourceIdentifier *)swift_release();
  if (v1 > 10.0) {
    float v1 = 10.0;
  }
  uint64_t v3 = RGResourceIdentifierFinalColor(v2);
  float v4 = 1.0;
  if (v1 > 0.0) {
    float v4 = v1;
  }
  RGTextureReferenceDescriptorCreate(v3, v4);
}

void *sub_1B6C80B24()
{
  uint64_t v0 = (void *)swift_allocObject();
  *(void *)((char *)v0 + OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor) = 0;
  uint64_t v1 = MEMORY[0x1E4FBC860];
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v1;
  sub_1B6E31108();
  return v0;
}

void *sub_1B6C80B88(void *a1)
{
  *(void *)(swift_allocObject() + OBJC_IVAR____TtC3VFX21TextureDescriptorNode__descriptor) = 0;
  return sub_1B682A2AC(a1);
}

uint64_t sub_1B6C80BD0@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputTypes);
  uint64_t v4 = *(void *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputTypes);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v5 = swift_bridgeObjectRetain();
  uint64_t v6 = sub_1B68ACC94(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = swift_bridgeObjectRetain();
  uint64_t v8 = sub_1B68ACC94(v7);
  uint64_t result = swift_bridgeObjectRelease();
  *a1 = v3;
  a1[1] = v4;
  a1[2] = &unk_1F0F75D38;
  a1[3] = v6;
  uint64_t v10 = MEMORY[0x1E4FBC860];
  a1[4] = v8;
  a1[5] = v10;
  return result;
}

uint64_t sub_1B6C80C8C()
{
  sub_1B6C80BD0(&v12);
  uint64_t v0 = v13;
  uint64_t v23 = v13;
  uint64_t v22 = v12;
  sub_1B62D8C3C((uint64_t)&v22);
  uint64_t v21 = v14;
  sub_1B62D8C3C((uint64_t)&v21);
  uint64_t v20 = v15;
  sub_1B62D8C3C((uint64_t)&v20);
  uint64_t v19 = v16;
  sub_1B62D8C3C((uint64_t)&v19);
  uint64_t v18 = v17;
  sub_1B62D8C3C((uint64_t)&v18);
  int64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    uint64_t v11 = MEMORY[0x1E4FBC860];
    sub_1B6C3D6AC(0, v1, 0);
    uint64_t v2 = v11;
    uint64_t v3 = (unint64_t *)(v0 + 32);
    do
    {
      unint64_t v4 = *v3++;
      uint64_t v5 = swift_allocObject();
      *(void *)(v5 + 16) = 0x80000000000000A0;
      unint64_t v6 = v5 | 0x6000000000000000;
      sub_1B66456F8(v4);
      LOBYTE(v6) = sub_1B697351C(v4, v6);
      swift_release();
      sub_1B6645740(v4);
      if (v6) {
        char v7 = 0;
      }
      else {
        char v7 = 3;
      }
      unint64_t v9 = *(void *)(v11 + 16);
      unint64_t v8 = *(void *)(v11 + 24);
      if (v9 >= v8 >> 1) {
        sub_1B6C3D6AC(v8 > 1, v9 + 1, 1);
      }
      *(void *)(v11 + 16) = v9 + 1;
      *(unsigned char *)(v11 + v9 + 32) = v7;
      --v1;
    }
    while (v1);
    sub_1B62D8C3C((uint64_t)&v23);
  }
  else
  {
    sub_1B62D8C3C((uint64_t)&v23);
    return MEMORY[0x1E4FBC860];
  }
  return v2;
}

uint64_t sub_1B6C80E2C()
{
  uint64_t v0 = swift_allocObject();
  sub_1B6C80E64();
  return v0;
}

void *sub_1B6C80E64()
{
  int64_t v1 = (_OWORD *)((char *)v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  *int64_t v1 = 0u;
  v1[1] = 0u;
  uint64_t v2 = MEMORY[0x1E4FBC860];
  *(void *)((char *)v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputTypes) = MEMORY[0x1E4FBC860];
  *(void *)((char *)v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputNames) = v2;
  *(void *)((char *)v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputTypes) = v2;
  *(void *)((char *)v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputNames) = v2;
  v0[3] = 0;
  v0[4] = 0;
  v0[2] = v2;
  sub_1B6E31108();
  swift_retain();
  sub_1B6C811C0();
  swift_release();
  return v0;
}

void *sub_1B6C80EF8(uint64_t a1)
{
  return sub_1B6C80F34(a1);
}

void *sub_1B6C80F34(uint64_t a1)
{
  uint64_t v2 = v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection;
  *(_OWORD *)uint64_t v2 = 0u;
  *(_OWORD *)(v2 + 16) = 0u;
  uint64_t v3 = MEMORY[0x1E4FBC860];
  *(void *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputTypes) = MEMORY[0x1E4FBC860];
  *(void *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputNames) = v3;
  *(void *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputTypes) = v3;
  *(void *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputNames) = v3;
  unint64_t v4 = (void *)(a1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  uint64_t v5 = *(void *)(a1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  uint64_t v6 = v4[1];
  uint64_t v7 = v4[2];
  uint64_t v8 = v4[3];
  *(void *)uint64_t v2 = v5;
  *(void *)(v2 + 8) = v6;
  *(void *)(v2 + 16) = v7;
  *(void *)(v2 + 24) = v8;
  sub_1B68D62B8(v5);
  unint64_t v9 = (void *)swift_retain();
  uint64_t v10 = sub_1B682A2AC(v9);
  swift_retain();
  sub_1B6C811C0();
  swift_release();
  swift_release();
  return v10;
}

unint64_t sub_1B6C80FE8()
{
  return 0x8000000000000000;
}

uint64_t sub_1B6C80FF0()
{
  uint64_t v1 = (void *)(v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  uint64_t v2 = *(void *)(v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  if (!v2) {
    goto LABEL_21;
  }
  uint64_t v3 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v5 = v1[1];
  swift_retain();
  sub_1B68D62B8(v2);
  uint64_t v6 = sub_1B6C7EB80();
  char v8 = v7;
  swift_release();
  if (v8) {
    uint64_t v9 = 0xFFFFFFFFLL;
  }
  else {
    uint64_t v9 = v6;
  }
  if (v8) {
    uint64_t v10 = 0;
  }
  else {
    uint64_t v10 = HIDWORD(v6);
  }
  if (v9 == -1 && v10 == 0) {
    goto LABEL_20;
  }
  unint64_t v12 = v9 | (v10 << 32);
  swift_retain();
  uint64_t v13 = sub_1B695E2FC(v12);
  swift_release();
  if (!v13) {
    goto LABEL_20;
  }
  uint64_t v14 = sub_1B6A02ED0(v13);
  if (!v15)
  {
    swift_bridgeObjectRelease();
    goto LABEL_20;
  }
  uint64_t v16 = sub_1B6AB4374(v14, v15, v13);
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v16)
  {
LABEL_20:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_21:
    char v23 = 0;
    return v23 & 1;
  }
  if (sub_1B6984CBC(v16, v2) & 1) != 0 && (sub_1B6918F70(v18, v5) & 1) != 0 && (sub_1B6918F70(v20, v3)) {
    char v23 = sub_1B6918F70(v22, v4);
  }
  else {
    char v23 = 0;
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v23 & 1;
}

uint64_t sub_1B6C811C0()
{
  uint64_t v1 = v0;
  sub_1B62F7F54(0, (unint64_t *)&qword_1E9DD1D50, (uint64_t)&type metadata for TypeConstraint, MEMORY[0x1E4FBBE00]);
  uint64_t v2 = swift_allocObject();
  *(_OWORD *)(v2 + 16) = xmmword_1B6E77050;
  uint64_t v3 = swift_allocObject();
  uint64_t v4 = (uint64_t (**)(void))(*v0 + 320);
  uint64_t v5 = *v4;
  *(void *)(v3 + 16) = (*v4)();
  *(void *)(v2 + 32) = v3 | 0x6000000000000000;
  uint64_t v122 = OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputTypes;
  *(void *)((char *)v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputTypes) = v2;
  swift_bridgeObjectRelease();
  uint64_t v121 = OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputNames;
  *(void *)((char *)v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_inputNames) = &unk_1F0F75D00;
  swift_bridgeObjectRelease();
  uint64_t v6 = MEMORY[0x1E4FBC860];
  uint64_t v120 = OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputTypes;
  *(void *)((char *)v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputTypes) = MEMORY[0x1E4FBC860];
  swift_bridgeObjectRelease();
  uint64_t v119 = OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputNames;
  *(void *)((char *)v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_outputNames) = v6;
  swift_bridgeObjectRelease();
  char v7 = (void *)((char *)v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  uint64_t result = *(void *)((char *)v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
  if (result)
  {
    uint64_t v9 = v7[1];
    uint64_t v10 = v7[2];
    uint64_t v11 = *(void *)(v9 + 16);
    uint64_t v117 = v10;
    uint64_t v118 = v9;
    uint64_t v116 = v7[3];
    if (v11)
    {
      sub_1B68D62B8(result);
      swift_bridgeObjectRetain();
      uint64_t v12 = 72;
      do
      {
        uint64_t v13 = *(void **)(v9 + v12);
        uint64_t v14 = (ValueMetadata *)v13[5];
        if (v14 == &type metadata for Entity
          && (sub_1B6E33918(),
              sub_1B6E33928(),
              uint64_t v15 = sub_1B6E33988(),
              sub_1B6E33918(),
              sub_1B6E33928(),
              v15 == sub_1B6E33988()))
        {
          swift_retain();
          unint64_t v16 = 0x80000000000000A0;
        }
        else
        {
          swift_retain();
          unint64_t v16 = sub_1B69B1CC4((uint64_t)v14);
          if ((~v16 & 0xF000000000000007) == 0) {
            goto LABEL_89;
          }
        }
        uint64_t v17 = swift_allocObject();
        *(void *)(v17 + 16) = v16;
        uint64_t v18 = *(void **)((char *)v1 + v122);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
        *(void *)((char *)v1 + v122) = v18;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          uint64_t v18 = sub_1B68C2A40(0, v18[2] + 1, 1, v18);
          *(void *)((char *)v1 + v122) = v18;
        }
        unint64_t v21 = v18[2];
        unint64_t v20 = v18[3];
        if (v21 >= v20 >> 1) {
          uint64_t v18 = sub_1B68C2A40(v20 > 1, v21 + 1, 1, v18);
        }
        _OWORD v18[2] = v21 + 1;
        v18[v21 + 4] = v17 | 0x6000000000000000;
        *(void *)((char *)v1 + v122) = v18;
        uint64_t v23 = v13[2];
        uint64_t v22 = v13[3];
        uint64_t v24 = *(void **)((char *)v1 + v121);
        swift_bridgeObjectRetain();
        char v25 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)((char *)v1 + v121) = v24;
        if ((v25 & 1) == 0)
        {
          uint64_t v24 = sub_1B6335858(0, v24[2] + 1, 1, v24);
          *(void *)((char *)v1 + v121) = v24;
        }
        unint64_t v27 = v24[2];
        unint64_t v26 = v24[3];
        if (v27 >= v26 >> 1)
        {
          uint64_t v24 = sub_1B6335858(v26 > 1, v27 + 1, 1, v24);
          *(void *)((char *)v1 + v121) = v24;
        }
        v24[2] = v27 + 1;
        uint64_t v28 = &v24[2 * v27];
        float32x4_t v28[4] = v23;
        v28[5] = v22;
        swift_release();
        v12 += 48;
        --v11;
        uint64_t v9 = v118;
      }
      while (v11);
      uint64_t v29 = swift_bridgeObjectRelease();
      uint64_t v10 = v117;
      uint64_t v30 = ((uint64_t (*)(uint64_t))v5)(v29);
    }
    else
    {
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      swift_bridgeObjectRetain();
      uint64_t v31 = swift_bridgeObjectRetain();
      uint64_t v30 = ((uint64_t (*)(uint64_t))v5)(v31);
    }
    unint64_t v32 = v30;
    uint64_t v33 = swift_allocObject();
    *(unsigned char *)(v33 + 16) = 3;
    char v34 = sub_1B69B18E4(v32, v33 | 0x4000000000000000);
    swift_release();
    sub_1B678FC34(v32);
    if (v34)
    {
      uint64_t v35 = swift_allocObject();
      uint64_t v36 = swift_allocObject();
      *(void *)(v36 + 16) = 0x8000000000000098;
      *(void *)(v35 + 16) = v36;
      uint64_t v37 = *(void **)((char *)v1 + v122);
      char v38 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)((char *)v1 + v122) = v37;
      if ((v38 & 1) == 0)
      {
        uint64_t v37 = sub_1B68C2A40(0, v37[2] + 1, 1, v37);
        *(void *)((char *)v1 + v122) = v37;
      }
      unint64_t v40 = v37[2];
      unint64_t v39 = v37[3];
      if (v40 >= v39 >> 1) {
        uint64_t v37 = sub_1B68C2A40(v39 > 1, v40 + 1, 1, v37);
      }
      v37[2] = v40 + 1;
      v37[v40 + 4] = v35 | 0x6000000000000000;
      *(void *)((char *)v1 + v122) = v37;
      uint64_t v41 = *(void **)((char *)v1 + v121);
      char v42 = swift_isUniquelyReferenced_nonNull_native();
      *(void *)((char *)v1 + v121) = v41;
      if ((v42 & 1) == 0)
      {
        uint64_t v41 = sub_1B6335858(0, v41[2] + 1, 1, v41);
        *(void *)((char *)v1 + v121) = v41;
      }
      unint64_t v44 = v41[2];
      unint64_t v43 = v41[3];
      if (v44 >= v43 >> 1)
      {
        uint64_t v41 = sub_1B6335858(v43 > 1, v44 + 1, 1, v41);
        *(void *)((char *)v1 + v121) = v41;
      }
      v41[2] = v44 + 1;
      uint64_t v45 = &v41[2 * v44];
      v45[4] = 0x7470697263736564;
      v45[5] = 0xEA0000000000726FLL;
    }
    uint64_t v46 = *(void *)(v10 + 16);
    if (v46)
    {
      swift_bridgeObjectRetain();
      uint64_t v47 = 72;
      while (1)
      {
        uint64_t v48 = *(void **)(v10 + v47);
        uint64_t v49 = swift_allocObject();
        uint64_t v50 = swift_allocObject();
        *(void *)(v50 + 16) = 0x8000000000000098;
        *(void *)(v49 + 16) = v50;
        uint64_t v51 = *(void **)((char *)v1 + v122);
        swift_retain();
        char v52 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)((char *)v1 + v122) = v51;
        if ((v52 & 1) == 0)
        {
          uint64_t v51 = sub_1B68C2A40(0, v51[2] + 1, 1, v51);
          *(void *)((char *)v1 + v122) = v51;
        }
        unint64_t v54 = v51[2];
        unint64_t v53 = v51[3];
        if (v54 >= v53 >> 1) {
          uint64_t v51 = sub_1B68C2A40(v53 > 1, v54 + 1, 1, v51);
        }
        _OWORD v51[2] = v54 + 1;
        v51[v54 + 4] = v49 | 0x6000000000000000;
        *(void *)((char *)v1 + v122) = v51;
        uint64_t v55 = v48[2];
        uint64_t v56 = v48[3];
        uint64_t v57 = *(void **)((char *)v1 + v121);
        swift_bridgeObjectRetain();
        char v58 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)((char *)v1 + v121) = v57;
        if ((v58 & 1) == 0)
        {
          uint64_t v57 = sub_1B6335858(0, v57[2] + 1, 1, v57);
          *(void *)((char *)v1 + v121) = v57;
        }
        unint64_t v60 = v57[2];
        unint64_t v59 = v57[3];
        if (v60 >= v59 >> 1)
        {
          uint64_t v57 = sub_1B6335858(v59 > 1, v60 + 1, 1, v57);
          *(void *)((char *)v1 + v121) = v57;
        }
        _OWORD v57[2] = v60 + 1;
        uint64_t v61 = &v57[2 * v60];
        float32x4_t v61[4] = v55;
        void v61[5] = v56;
        char v62 = (ValueMetadata *)v48[5];
        if (v62 != &type metadata for Entity
          || (sub_1B6E33918(),
              sub_1B6E33928(),
              uint64_t v63 = sub_1B6E33988(),
              sub_1B6E33918(),
              sub_1B6E33928(),
              unint64_t v64 = 0x80000000000000A0,
              v63 != sub_1B6E33988()))
        {
          unint64_t v64 = sub_1B69B1CC4((uint64_t)v62);
          if ((~v64 & 0xF000000000000007) == 0) {
            goto LABEL_89;
          }
        }
        uint64_t v65 = swift_allocObject();
        *(void *)(v65 + 16) = v64;
        uint64_t v66 = *(void **)((char *)v1 + v120);
        char v67 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)((char *)v1 + v120) = v66;
        if (v67)
        {
          uint64_t v68 = v120;
        }
        else
        {
          unint64_t v76 = sub_1B68C2A40(0, v66[2] + 1, 1, v66);
          uint64_t v68 = v120;
          uint64_t v66 = v76;
          *(void *)((char *)v1 + v120) = v76;
        }
        unint64_t v70 = v66[2];
        unint64_t v69 = v66[3];
        if (v70 >= v69 >> 1)
        {
          uint64_t v77 = sub_1B68C2A40(v69 > 1, v70 + 1, 1, v66);
          uint64_t v68 = v120;
          uint64_t v66 = v77;
        }
        v66[2] = v70 + 1;
        v66[v70 + 4] = v65 | 0x6000000000000000;
        *(void *)((char *)v1 + v68) = v66;
        uint64_t v71 = *(void **)((char *)v1 + v119);
        swift_bridgeObjectRetain();
        char v72 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)((char *)v1 + v119) = v71;
        if ((v72 & 1) == 0)
        {
          uint64_t v71 = sub_1B6335858(0, v71[2] + 1, 1, v71);
          *(void *)((char *)v1 + v119) = v71;
        }
        unint64_t v74 = v71[2];
        unint64_t v73 = v71[3];
        if (v74 >= v73 >> 1)
        {
          uint64_t v71 = sub_1B6335858(v73 > 1, v74 + 1, 1, v71);
          *(void *)((char *)v1 + v119) = v71;
        }
        v71[2] = v74 + 1;
        uint64_t v75 = &v71[2 * v74];
        v75[4] = v55;
        v75[5] = v56;
        swift_release();
        v47 += 48;
        --v46;
        uint64_t v10 = v117;
        if (!v46)
        {
          swift_bridgeObjectRelease();
          break;
        }
      }
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v78 = *(void *)(v116 + 16);
    if (v78)
    {
      uint64_t v79 = (uint64_t *)(v116 + 72);
      while (1)
      {
        uint64_t v80 = *v79;
        uint64_t v81 = *(ValueMetadata **)(*v79 + 40);
        if (v81 == &type metadata for Entity
          && (sub_1B6E33918(),
              sub_1B6E33928(),
              uint64_t v82 = sub_1B6E33988(),
              sub_1B6E33918(),
              sub_1B6E33928(),
              v82 == sub_1B6E33988()))
        {
          swift_retain();
          unint64_t v83 = 0x80000000000000A0;
        }
        else
        {
          swift_retain();
          unint64_t v83 = sub_1B69B1CC4((uint64_t)v81);
          if ((~v83 & 0xF000000000000007) == 0) {
            break;
          }
        }
        uint64_t v84 = swift_allocObject();
        *(void *)(v84 + 16) = v83;
        uint64_t v85 = *(void **)((char *)v1 + v122);
        char v86 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)((char *)v1 + v122) = v85;
        if ((v86 & 1) == 0)
        {
          uint64_t v85 = sub_1B68C2A40(0, v85[2] + 1, 1, v85);
          *(void *)((char *)v1 + v122) = v85;
        }
        unint64_t v88 = v85[2];
        unint64_t v87 = v85[3];
        if (v88 >= v87 >> 1) {
          uint64_t v85 = sub_1B68C2A40(v87 > 1, v88 + 1, 1, v85);
        }
        v85[2] = v88 + 1;
        v85[v88 + 4] = v84 | 0x6000000000000000;
        *(void *)((char *)v1 + v122) = v85;
        uint64_t v89 = *(void *)(v80 + 16);
        uint64_t v90 = *(void *)(v80 + 24);
        uint64_t v91 = *(void **)((char *)v1 + v121);
        swift_bridgeObjectRetain();
        char v92 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)((char *)v1 + v121) = v91;
        if ((v92 & 1) == 0)
        {
          uint64_t v91 = sub_1B6335858(0, v91[2] + 1, 1, v91);
          *(void *)((char *)v1 + v121) = v91;
        }
        unint64_t v94 = v91[2];
        unint64_t v93 = v91[3];
        if (v94 >= v93 >> 1)
        {
          uint64_t v91 = sub_1B6335858(v93 > 1, v94 + 1, 1, v91);
          *(void *)((char *)v1 + v121) = v91;
        }
        v91[2] = v94 + 1;
        uint64_t v95 = &v91[2 * v94];
        v95[4] = v89;
        v95[5] = v90;
        if (v81 != &type metadata for Entity
          || (sub_1B6E33918(),
              sub_1B6E33928(),
              uint64_t v96 = sub_1B6E33988(),
              sub_1B6E33918(),
              sub_1B6E33928(),
              unint64_t v97 = 0x80000000000000A0,
              v96 != sub_1B6E33988()))
        {
          unint64_t v97 = sub_1B69B1CC4((uint64_t)v81);
          if ((~v97 & 0xF000000000000007) == 0) {
            break;
          }
        }
        uint64_t v98 = swift_allocObject();
        *(void *)(v98 + 16) = v97;
        uint64_t v99 = *(void **)((char *)v1 + v120);
        char v100 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)((char *)v1 + v120) = v99;
        if (v100)
        {
          uint64_t v101 = v120;
        }
        else
        {
          uint64_t v109 = sub_1B68C2A40(0, v99[2] + 1, 1, v99);
          uint64_t v101 = v120;
          uint64_t v99 = v109;
          *(void *)((char *)v1 + v120) = v109;
        }
        unint64_t v103 = v99[2];
        unint64_t v102 = v99[3];
        if (v103 >= v102 >> 1)
        {
          double v110 = sub_1B68C2A40(v102 > 1, v103 + 1, 1, v99);
          uint64_t v101 = v120;
          uint64_t v99 = v110;
        }
        v99[2] = v103 + 1;
        v99[v103 + 4] = v98 | 0x6000000000000000;
        *(void *)((char *)v1 + v101) = v99;
        long long v104 = *(void **)((char *)v1 + v119);
        swift_bridgeObjectRetain();
        char v105 = swift_isUniquelyReferenced_nonNull_native();
        *(void *)((char *)v1 + v119) = v104;
        if ((v105 & 1) == 0)
        {
          long long v104 = sub_1B6335858(0, v104[2] + 1, 1, v104);
          *(void *)((char *)v1 + v119) = v104;
        }
        unint64_t v107 = v104[2];
        unint64_t v106 = v104[3];
        if (v107 >= v106 >> 1)
        {
          long long v104 = sub_1B6335858(v106 > 1, v107 + 1, 1, v104);
          *(void *)((char *)v1 + v119) = v104;
        }
        v104[2] = v107 + 1;
        char v108 = &v104[2 * v107];
        v108[4] = v89;
        v108[5] = v90;
        swift_release();
        v79 += 6;
        if (!--v78) {
          goto LABEL_81;
        }
      }
LABEL_89:
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      sub_1B6E33B48();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      uint64_t result = sub_1B6E32BE8();
      __break(1u);
      return result;
    }
LABEL_81:
    uint64_t result = swift_bridgeObjectRelease();
  }
  uint64_t v111 = *(void **)((char *)v1 + v120);
  if (!v111[2])
  {
    uint64_t v112 = swift_allocObject();
    *(void *)(v112 + 16) = 0x80000000000000A0;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v113 = v120;
    *(void *)((char *)v1 + v120) = v111;
    if ((result & 1) == 0)
    {
      uint64_t result = (uint64_t)sub_1B68C2A40(0, 1, 1, v111);
      uint64_t v113 = v120;
      uint64_t v111 = (void *)result;
      *(void *)((char *)v1 + v120) = result;
    }
    unint64_t v115 = v111[2];
    unint64_t v114 = v111[3];
    if (v115 >= v114 >> 1)
    {
      uint64_t result = (uint64_t)sub_1B68C2A40(v114 > 1, v115 + 1, 1, v111);
      uint64_t v113 = v120;
      uint64_t v111 = (void *)result;
    }
    v111[2] = v115 + 1;
    v111[v115 + 4] = v112 | 0x6000000000000000;
    *(void *)((char *)v1 + v113) = v111;
  }
  return result;
}

uint64_t sub_1B6C82094()
{
  sub_1B665066C(*(void *)(v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C8210C()
{
  swift_bridgeObjectRelease();
  sub_1B678FE58(*(void *)(v0 + 24));
  uint64_t v1 = v0 + OBJC_IVAR____TtC3VFX4Node_authoringID;
  uint64_t v2 = sub_1B6E31118();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8))(v1, v2);
  sub_1B665066C(*(void *)(v0 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1B6C821DC()
{
  sub_1B6C8210C();

  return swift_deallocClassInstance();
}

uint64_t sub_1B6C82234()
{
  return type metadata accessor for CustomFunctionNode(0);
}

uint64_t type metadata accessor for CustomFunctionNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7E98);
}

uint64_t sub_1B6C8225C()
{
  return swift_updateClassMetadata2();
}

uint64_t sub_1B6C822B4()
{
  return 0x53657475706D6F43;
}

uint64_t sub_1B6C822D8()
{
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 1;
  return v0 | 0x4000000000000000;
}

uint64_t sub_1B6C82310(uint64_t a1)
{
  return sub_1B6C823E0(a1, (uint64_t (*)(uint64_t))sub_1B6C80F34);
}

uint64_t sub_1B6C8232C()
{
  return type metadata accessor for ComputeShaderNode(0);
}

uint64_t type metadata accessor for ComputeShaderNode(uint64_t a1)
{
  return sub_1B633A29C(a1, (uint64_t *)&unk_1E9DD7EA8);
}

uint64_t sub_1B6C82358(void *a1)
{
  return sub_1B6C827A0(a1);
}

uint64_t sub_1B6C82370(void *a1)
{
  return sub_1B6C82660(a1);
}

uint64_t sub_1B6C82388()
{
  return 0x657263736C6C7546;
}

uint64_t sub_1B6C823AC()
{
  uint64_t v0 = swift_allocObject();
  *(unsigned char *)(v0 + 16) = 3;
  return v0 | 0x4000000000000000;
}

uint64_t sub_1B6C823E0(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  return a2(a1);
}

uint64_t sub_1B6C8242C()
{
  return type metadata accessor for FullscreenQuadNode(0);
}

uint64_t type metadata accessor for FullscreenQuadNode(uint64_t a1)
{
  return sub_1B633A29C(a1, qword_1E9DD7EB8);
}

uint64_t sub_1B6C82454()
{
  return swift_updateClassMetadata2();
}

uint64_t destroy for TexturePreview()
{
  swift_bridgeObjectRelease();

  return swift_unknownObjectRelease();
}

uint64_t initializeWithCopy for TexturePreview(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_unknownObjectRetain();
  return a1;
}

uint64_t assignWithCopy for TexturePreview(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

uint64_t assignWithTake for TexturePreview(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 16) = *(unsigned char *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for TexturePreview()
{
  return &type metadata for TexturePreview;
}

void *assignWithCopy for RenderGraphDiagnostics.RendererInfo(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRetain();
  swift_unknownObjectRelease();
  return a1;
}

void *assignWithTake for RenderGraphDiagnostics.RendererInfo(void *a1, void *a2)
{
  *a1 = *a2;
  swift_unknownObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for RenderGraphDiagnostics.RendererInfo()
{
  return &type metadata for RenderGraphDiagnostics.RendererInfo;
}

uint64_t sub_1B6C82660(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  uint64_t result = sub_1B6E33A28();
  if (!v2)
  {
    sub_1B62C14BC(v8, v8[3]);
    sub_1B62F7F54(0, &qword_1E9DD7ED0, (uint64_t)&type metadata for MetalFunctionReflection, MEMORY[0x1E4FBB718]);
    sub_1B6C82908(&qword_1E9DD7ED8, (void (*)(void))sub_1B6C828B4);
    sub_1B6E33518();
    uint64_t v4 = (_OWORD *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
    uint64_t v5 = *(void *)(v1 + OBJC_IVAR____TtC3VFX18CustomFunctionNode_reflection);
    *uint64_t v4 = v6;
    v4[1] = v7;
    sub_1B665066C(v5);
    sub_1B6C811C0();
    sub_1B6C811C0();
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v8);
  }
  return result;
}

uint64_t sub_1B6C827A0(void *a1)
{
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6E33A68();
  sub_1B62C550C((uint64_t)v2, v3);
  sub_1B62F7F54(0, &qword_1E9DD7ED0, (uint64_t)&type metadata for MetalFunctionReflection, MEMORY[0x1E4FBB718]);
  sub_1B6C82908(&qword_1E9DD7EE8, (void (*)(void))sub_1B6C82998);
  sub_1B6E335C8();
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v2);
}

unint64_t sub_1B6C828B4()
{
  unint64_t result = qword_1E9DD7EE0;
  if (!qword_1E9DD7EE0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7EE0);
  }
  return result;
}

uint64_t sub_1B6C82908(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B62F7F54(255, &qword_1E9DD7ED0, (uint64_t)&type metadata for MetalFunctionReflection, MEMORY[0x1E4FBB718]);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unint64_t sub_1B6C82998()
{
  unint64_t result = qword_1E9DD7EF0;
  if (!qword_1E9DD7EF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7EF0);
  }
  return result;
}

uint64_t sub_1B6C829EC()
{
  return MEMORY[0x1F4186498](v0, 17, 7);
}

uint64_t sub_1B6C829FC()
{
  sub_1B678FC34(*(void *)(v0 + 16));

  return MEMORY[0x1F4186498](v0, 24, 7);
}

uint64_t sub_1B6C82A34()
{
  sub_1B678FC34(*(void *)(v0 + 24));

  return MEMORY[0x1F4186498](v0, 32, 7);
}

uint64_t sub_1B6C82A6C(uint64_t a1, uint64_t a2)
{
  sub_1B6C82AD0();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B6C82AD0()
{
  if (!qword_1E9DD1FB0)
  {
    type metadata accessor for TextureDescriptor(255);
    unint64_t v0 = sub_1B6E324B8();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD1FB0);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for RenderGraphNode.ResourceSemantic(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C82BF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RenderGraphNode.ResourceSemantic()
{
  return &type metadata for RenderGraphNode.ResourceSemantic;
}

unint64_t sub_1B6C82C30()
{
  unint64_t result = qword_1E9DD7F08;
  if (!qword_1E9DD7F08)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7F08);
  }
  return result;
}

uint64_t sub_1B6C82C84()
{
  uint64_t v0 = sub_1B6E33B48();
  swift_bridgeObjectRetain();
  char v1 = sub_1B6E319F8();
  swift_bridgeObjectRelease();
  if (v1)
  {
    sub_1B6E318F8();
    sub_1B6E31868();
  }
  return v0;
}

uint64_t sub_1B6C82D50(char *a1, char *a2)
{
  return sub_1B6BB37C0(*a1, *a2);
}

uint64_t sub_1B6C82D5C()
{
  return sub_1B6BCF5EC();
}

uint64_t sub_1B6C82D64()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C82DD8()
{
  return sub_1B69EB62C();
}

uint64_t sub_1B6C82DE0@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_1B6C82E40(unint64_t *a1@<X8>)
{
  if (*v1) {
    unint64_t v2 = 0xD000000000000012;
  }
  else {
    unint64_t v2 = 0xD000000000000010;
  }
  unint64_t v3 = 0x80000001B6F2ECA0;
  if (*v1) {
    unint64_t v3 = 0x80000001B6F2ECC0;
  }
  *a1 = v2;
  a1[1] = v3;
}

unint64_t sub_1B6C82E84()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0xD000000000000010;
  }
}

uint64_t sub_1B6C82EC4@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1B6C82F28(uint64_t a1)
{
  unint64_t v2 = sub_1B6C83D2C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C82F64(uint64_t a1)
{
  unint64_t v2 = sub_1B6C83D2C();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *sub_1B6C82FA0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1B6C839C0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }
  return result;
}

uint64_t sub_1B6C82FD0(void *a1)
{
  return sub_1B6C83720(a1, *(void *)v1, *(void **)(v1 + 8));
}

uint64_t sub_1B6C82FEC@<X0>(void *a1@<X8>)
{
  type metadata accessor for CustomParameters();
  uint64_t v2 = (void *)swift_allocObject();
  uint64_t v3 = MEMORY[0x1E4FBC860];
  v2[2] = MEMORY[0x1E4FBC860];
  v2[3] = v3;
  void v2[4] = v3;
  char v4 = (void *)swift_allocObject();
  _OWORD v4[2] = v3;
  v4[3] = v3;
  void v4[4] = v3;
  uint64_t result = sub_1B6335620(v3);
  *a1 = v2;
  a1[1] = v4;
  a1[2] = result;
  a1[3] = v6;
  return result;
}

uint64_t sub_1B6C8306C(uint64_t a1, uint64_t a2, void *a3, void *a4)
{
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    swift_bridgeObjectRetain();
    uint64_t v28 = a1;
    for (uint64_t i = (uint64_t *)(a2 + 40); ; i += 2)
    {
      uint64_t v11 = *(i - 1);
      uint64_t v10 = *i;
      uint64_t v12 = *(void *)(a1 + 16);
      swift_bridgeObjectRetain();
      uint64_t v29 = a4;
      if (v12)
      {
        swift_bridgeObjectRetain();
        uint64_t v13 = sub_1B62B2CE0(v11, v10);
        if (v14)
        {
          uint64_t v15 = *(void *)(*(void *)(a1 + 56) + 8 * v13);
          swift_retain();
        }
        else
        {
          uint64_t v15 = 0;
        }
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v15 = 0;
      }
      swift_retain_n();
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
      unint64_t v18 = sub_1B62B2CE0(v11, v10);
      char v19 = v17;
      uint64_t v20 = a3[2] + ((v17 & 1) == 0);
      if (a3[3] >= v20)
      {
        if (isUniquelyReferenced_nonNull_native)
        {
          if ((v17 & 1) == 0) {
            goto LABEL_17;
          }
        }
        else
        {
          sub_1B6ACD41C();
          if ((v19 & 1) == 0) {
            goto LABEL_17;
          }
        }
      }
      else
      {
        sub_1B62B3CB0(v20, isUniquelyReferenced_nonNull_native);
        uint64_t v21 = sub_1B62B2CE0(v11, v10);
        if ((v19 & 1) != (v22 & 1))
        {
          uint64_t result = sub_1B6E33838();
          __break(1u);
          return result;
        }
        unint64_t v18 = v21;
        if ((v19 & 1) == 0)
        {
LABEL_17:
          a3[(v18 >> 6) + 8] |= 1 << v18;
          uint64_t v23 = (uint64_t *)(a3[6] + 16 * v18);
          *uint64_t v23 = v11;
          v23[1] = v10;
          *(void *)(a3[7] + 8 * v18) = v15;
          ++a3[2];
          swift_bridgeObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRetain();
          a4 = v29;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            a4 = sub_1B6335858(0, v29[2] + 1, 1, v29);
          }
          unint64_t v25 = a4[2];
          unint64_t v24 = a4[3];
          a1 = v28;
          if (v25 >= v24 >> 1) {
            a4 = sub_1B6335858(v24 > 1, v25 + 1, 1, a4);
          }
          a4[2] = v25 + 1;
          unint64_t v26 = &a4[2 * v25];
          void v26[4] = v11;
          v26[5] = v10;
          swift_release_n();
          swift_bridgeObjectRelease();
          goto LABEL_4;
        }
      }
      *(void *)(a3[7] + 8 * v18) = v15;
      swift_release();
      swift_release_n();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      a1 = v28;
      a4 = v29;
LABEL_4:
      if (!--v6)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        return (uint64_t)a3;
      }
    }
  }
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return (uint64_t)a3;
}

_OWORD *sub_1B6C8334C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  sub_1B6B98418(a1, a2, (uint64_t)&v7);
  if (v8)
  {
    sub_1B62B57A8(&v7, v9);
  }
  else
  {
    sub_1B6B98418(a1, a2, (uint64_t)v9);
    sub_1B62B32CC((uint64_t)&v7);
  }
  sub_1B62B31E8((uint64_t)v9, (uint64_t)&v7);
  if (v8)
  {
    sub_1B62B32CC((uint64_t)v9);
    return sub_1B62B57A8(&v7, (_OWORD *)a3);
  }
  else
  {
    *(void *)(a3 + 24) = MEMORY[0x1E4FBB550];
    *(void *)a3 = 0;
    sub_1B62B32CC((uint64_t)v9);
    return (_OWORD *)sub_1B62B32CC((uint64_t)&v7);
  }
}

_OWORD *sub_1B6C8341C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_1B6C8334C(a1, a2, a3);
}

uint64_t sub_1B6C83424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0(a1);
}

unint64_t sub_1B6C83498()
{
  return 0xD000000000000013;
}

void *sub_1B6C834B4()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  uint64_t v3 = sub_1B68C75F8(v1, v2, (void (*)(uint64_t *__return_ptr, uint64_t *))sub_1B6712824);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v3;
}

uint64_t sub_1B6C83528(uint64_t a1, uint64_t a2, ValueMetadata *a3)
{
  uint64_t result = sub_1B6B98D5C(a1, a2, a3);
  if (!result) {
    return sub_1B6B98D5C(a1, a2, a3);
  }
  return result;
}

uint64_t destroy for MaterialParameters()
{
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for MaterialParameters(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  swift_retain();
  swift_retain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for MaterialParameters(void *a1, void *a2)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  a1[2] = a2[2];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *assignWithTake for MaterialParameters(_OWORD *a1, _OWORD *a2)
{
  *a1 = *a2;
  swift_release();
  swift_bridgeObjectRelease();
  a1[1] = a2[1];
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for MaterialParameters()
{
  return &type metadata for MaterialParameters;
}

uint64_t sub_1B6C83720(void *a1, uint64_t a2, void *a3)
{
  uint64_t v7 = *a3;
  uint64_t v18 = v3;
  uint64_t v19 = v7;
  sub_1B6C83D80(0, &qword_1E9DD7F20, MEMORY[0x1E4FBBDE0]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v11);
  uint64_t v13 = (char *)&v17 - v12;
  if (qword_1EB9852D0 != -1) {
    swift_once();
  }
  swift_retain();
  int v14 = sub_1B6E32148();
  if (qword_1EB9854F8 != -1) {
    swift_once();
  }
  uint64_t v21 = 0;
  swift_retain();
  sub_1B6B33E34(v14, (uint64_t *)&v21, 0xD00000000000002ELL, 0x80000001B6F4FF90);
  swift_release();
  swift_release();
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C83D2C();
  sub_1B6E33A88();
  uint64_t v21 = (void *)a2;
  char v20 = 0;
  sub_1B6C83DE4(&qword_1EB97EBF8);
  uint64_t v15 = v18;
  sub_1B6E32FA8();
  if (!v15)
  {
    uint64_t v21 = a3;
    char v20 = 1;
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

void *sub_1B6C839C0(void *a1)
{
  sub_1B6C83D80(0, &qword_1E9DD7F10, MEMORY[0x1E4FBBDC0]);
  uint64_t v19 = *(void *)(v3 - 8);
  uint64_t v20 = v3;
  MEMORY[0x1F4188790](v3, v4);
  uint64_t v6 = (char *)v17 - v5;
  type metadata accessor for CustomParameters();
  unint64_t inited = (void *)swift_initStackObject();
  uint64_t v8 = MEMORY[0x1E4FBC860];
  inited[2] = MEMORY[0x1E4FBC860];
  inited[3] = v8;
  inited[4] = v8;
  uint64_t v9 = (void *)swift_initStackObject();
  _OWORD v9[2] = v8;
  v9[3] = v8;
  v9[4] = v8;
  uint64_t v10 = sub_1B6335620(v8);
  uint64_t v21 = v11;
  uint64_t v22 = v10;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C83D2C();
  sub_1B6E33A48();
  if (v1)
  {
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
    swift_release();
    swift_setDeallocating();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    char v23 = 0;
    sub_1B6C83DE4(&qword_1EB97EC00);
    sub_1B6E32DF8();
    swift_retain();
    swift_release();
    unint64_t inited = v24;
    swift_release();
    char v23 = 1;
    sub_1B6E32DF8();
    swift_release();
    uint64_t v13 = (void *)sub_1B6B98A6C();
    v17[1] = v13;
    uint64_t v15 = v14;
    uint64_t v18 = sub_1B6B98A6C();
    sub_1B6C8306C(v18, v16, v13, v15);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v20);
    _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  return inited;
}

unint64_t sub_1B6C83D2C()
{
  unint64_t result = qword_1E9DD7F18;
  if (!qword_1E9DD7F18)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7F18);
  }
  return result;
}

void sub_1B6C83D80(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6C83D2C();
    unint64_t v7 = a3(a1, &type metadata for MaterialParameters.CodingKeys, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1B6C83DE4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    type metadata accessor for CustomParameters();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for MaterialParameters.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C83EF4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for MaterialParameters.CodingKeys()
{
  return &type metadata for MaterialParameters.CodingKeys;
}

unint64_t sub_1B6C83F30()
{
  unint64_t result = qword_1E9DD7F28;
  if (!qword_1E9DD7F28)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7F28);
  }
  return result;
}

unint64_t sub_1B6C83F88()
{
  unint64_t result = qword_1E9DD7F30;
  if (!qword_1E9DD7F30)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7F30);
  }
  return result;
}

unint64_t sub_1B6C83FE0()
{
  unint64_t result = qword_1E9DD7F38;
  if (!qword_1E9DD7F38)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7F38);
  }
  return result;
}

ValueMetadata *type metadata accessor for SineMoveAction()
{
  return &type metadata for SineMoveAction;
}

ValueMetadata *type metadata accessor for RotateAction()
{
  return &type metadata for RotateAction;
}

uint64_t sub_1B6C84054(void *a1, double a2, __n128 a3)
{
  __n128 v12 = a3;
  sub_1B6C85B80(0, &qword_1E9DD7F68, (uint64_t (*)(void))sub_1B6C856B0, (uint64_t)&type metadata for RotateAction.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C856B0();
  sub_1B6E33A88();
  v13.n128_u8[0] = 0;
  sub_1B6E32F78();
  if (!v3)
  {
    __n128 v13 = v12;
    char v14 = 1;
    sub_1B6C85B80(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    sub_1B62AF3D0((unint64_t *)&qword_1EB97D1D8);
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

uint64_t sub_1B6C84264(char *a1, char *a2)
{
  return sub_1B6BAE5B8(*a1, *a2);
}

uint64_t sub_1B6C84270()
{
  if (*v0) {
    return 1936291937;
  }
  else {
    return 0x656C676E61;
  }
}

uint64_t sub_1B6C842A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6C84C80(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6C842C8(uint64_t a1)
{
  unint64_t v2 = sub_1B6C856B0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C84304(uint64_t a1)
{
  unint64_t v2 = sub_1B6C856B0();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B6C84340(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v4 = sub_1B6C85144(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_OWORD *)(a2 + 16) = v5;
  }
}

uint64_t sub_1B6C84370(void *a1, double a2)
{
  LODWORD(a2) = v2->n128_u32[0];
  return sub_1B6C84054(a1, a2, v2[1]);
}

double sub_1B6C84390@<D0>(uint64_t a1@<X8>)
{
  *(_DWORD *)a1 = 1078530010;
  double result = 0.0078125;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E4F320;
  return result;
}

uint64_t sub_1B6C843AC(void *a1, double a2, double a3, double a4, __n128 a5)
{
  __n128 v14 = a5;
  sub_1B6C85B80(0, &qword_1E9DD7F50, (uint64_t (*)(void))sub_1B6C8565C, (uint64_t)&type metadata for SineMoveAction.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(v7 - 8);
  MEMORY[0x1F4188790](v7, v10);
  __n128 v12 = (char *)&v14 - v11;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C8565C();
  sub_1B6E33A88();
  v15.n128_u8[0] = 0;
  sub_1B6E32F78();
  if (!v5)
  {
    v15.n128_u8[0] = 1;
    sub_1B6E32F78();
    v15.n128_u8[0] = 2;
    sub_1B6E32F78();
    __n128 v15 = v14;
    char v16 = 3;
    sub_1B6C85B80(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    sub_1B62AF3D0((unint64_t *)&qword_1EB97D1D8);
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
}

uint64_t sub_1B6C8461C(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB08CC(*a1, *a2);
}

uint64_t sub_1B6C84628()
{
  uint64_t result = 0x647574696C706D61;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x636E657571657266;
      break;
    case 2:
      uint64_t result = 0x6968536573616870;
      break;
    case 3:
      uint64_t result = 0x61746C6564;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6C846BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6C84D5C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6C846E4(uint64_t a1)
{
  unint64_t v2 = sub_1B6C8565C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C84720(uint64_t a1)
{
  unint64_t v2 = sub_1B6C8565C();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B6C8475C(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v4 = sub_1B6C853A0(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
    *(_OWORD *)(a2 + 16) = v7;
  }
}

uint64_t sub_1B6C84790(void *a1, double a2, double a3, double a4)
{
  LODWORD(a2) = v4->n128_u32[0];
  LODWORD(a3) = v4->n128_u32[1];
  LODWORD(a4) = v4->n128_u32[2];
  return sub_1B6C843AC(a1, a2, a3, a4, v4[1]);
}

double sub_1B6C847B4@<D0>(uint64_t a1@<X8>)
{
  __asm { FMOV            V0.2S, #1.0 }
  *(void *)a1 = _D0;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)&double result = 1065353216;
  *(_OWORD *)(a1 + 16) = xmmword_1B6E4F300;
  return result;
}

uint64_t sub_1B6C847D0(void *a1)
{
  sub_1B6C85B80(0, &qword_1E9DD7FB0, (uint64_t (*)(void))sub_1B6C85B2C, (uint64_t)&type metadata for SineYAction.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v4 = v3;
  uint64_t v5 = *(void *)(v3 - 8);
  MEMORY[0x1F4188790](v3, v6);
  uint64_t v8 = (char *)&v10 - v7;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C85B2C();
  sub_1B6E33A88();
  char v13 = 0;
  sub_1B6E32F78();
  if (!v1)
  {
    char v12 = 1;
    sub_1B6E32F78();
    char v11 = 2;
    sub_1B6E32F78();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
}

uint64_t sub_1B6C8499C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6BAE118(*a1, *a2);
}

uint64_t sub_1B6C849A8()
{
  uint64_t v1 = 0x636E657571657266;
  if (*v0 != 1) {
    uint64_t v1 = 0x6968536573616870;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x647574696C706D61;
  }
}

uint64_t sub_1B6C84A0C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6C84B0C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6C84A34(uint64_t a1)
{
  unint64_t v2 = sub_1B6C85B2C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C84A70(uint64_t a1)
{
  unint64_t v2 = sub_1B6C85B2C();

  return MEMORY[0x1F41862B0](a1, v2);
}

void sub_1B6C84AAC(void *a1@<X0>, uint64_t a2@<X8>)
{
  float v4 = sub_1B6C84F2C(a1);
  if (!v2)
  {
    *(float *)a2 = v4;
    *(_DWORD *)(a2 + 4) = v5;
    *(_DWORD *)(a2 + 8) = v6;
  }
}

uint64_t sub_1B6C84ADC(void *a1)
{
  return sub_1B6C847D0(a1);
}

double sub_1B6C84AFC@<D0>(uint64_t a1@<X8>)
{
  __asm { FMOV            V0.2S, #1.0 }
  *(double *)a1 = result;
  *(_DWORD *)(a1 + 8) = 0;
  return result;
}

uint64_t sub_1B6C84B0C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x647574696C706D61 && a2 == 0xE900000000000065;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636E657571657266 && a2 == 0xE900000000000079 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6968536573616870 && a2 == 0xEA00000000007466)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 2;
    }
    else {
      return 3;
    }
  }
}

uint64_t sub_1B6C84C80(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x656C676E61 && a2 == 0xE500000000000000;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 1936291937 && a2 == 0xE400000000000000)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 1;
    }
    else {
      return 2;
    }
  }
}

uint64_t sub_1B6C84D5C(uint64_t a1, uint64_t a2)
{
  BOOL v2 = a1 == 0x647574696C706D61 && a2 == 0xE900000000000065;
  if (v2 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 0;
  }
  else if (a1 == 0x636E657571657266 && a2 == 0xE900000000000079 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 1;
  }
  else if (a1 == 0x6968536573616870 && a2 == 0xEA00000000007466 || (sub_1B6E334B8() & 1) != 0)
  {
    swift_bridgeObjectRelease();
    return 2;
  }
  else if (a1 == 0x61746C6564 && a2 == 0xE500000000000000)
  {
    swift_bridgeObjectRelease();
    return 3;
  }
  else
  {
    char v6 = sub_1B6E334B8();
    swift_bridgeObjectRelease();
    if (v6) {
      return 3;
    }
    else {
      return 4;
    }
  }
}

float sub_1B6C84F2C(void *a1)
{
  sub_1B6C85B80(0, &qword_1E9DD7FA0, (uint64_t (*)(void))sub_1B6C85B2C, (uint64_t)&type metadata for SineYAction.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = &v12[-v8];
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C85B2C();
  sub_1B6E33A48();
  if (!v1)
  {
    v12[15] = 0;
    sub_1B6E32DC8();
    float v2 = v10;
    v12[14] = 1;
    sub_1B6E32DC8();
    v12[13] = 2;
    sub_1B6E32DC8();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

float sub_1B6C85144(void *a1)
{
  sub_1B6C85B80(0, &qword_1E9DD7F58, (uint64_t (*)(void))sub_1B6C856B0, (uint64_t)&type metadata for RotateAction.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v12 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C856B0();
  sub_1B6E33A48();
  if (!v1)
  {
    LOBYTE(v14) = 0;
    sub_1B6E32DC8();
    float v2 = v10;
    sub_1B6C85B80(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    char v13 = 1;
    sub_1B62AF3D0((unint64_t *)&qword_1EB97D1F0);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    long long v12 = v14;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

float sub_1B6C853A0(void *a1)
{
  sub_1B6C85B80(0, &qword_1E9DD7F40, (uint64_t (*)(void))sub_1B6C8565C, (uint64_t)&type metadata for SineMoveAction.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v12 - v8;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C8565C();
  sub_1B6E33A48();
  if (!v1)
  {
    LOBYTE(v14) = 0;
    sub_1B6E32DC8();
    float v2 = v10;
    LOBYTE(v14) = 1;
    sub_1B6E32DC8();
    LOBYTE(v14) = 2;
    sub_1B6E32DC8();
    sub_1B6C85B80(0, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    char v13 = 3;
    sub_1B62AF3D0((unint64_t *)&qword_1EB97D1F0);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    long long v12 = v14;
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v2;
}

unint64_t sub_1B6C8565C()
{
  unint64_t result = qword_1E9DD7F48;
  if (!qword_1E9DD7F48)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7F48);
  }
  return result;
}

unint64_t sub_1B6C856B0()
{
  unint64_t result = qword_1E9DD7F60;
  if (!qword_1E9DD7F60)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7F60);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for RotateAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *unint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C857D0);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for RotateAction.CodingKeys()
{
  return &type metadata for RotateAction.CodingKeys;
}

unsigned char *storeEnumTagSinglePayload for SineMoveAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFC)
  {
    unsigned int v6 = ((a2 - 253) >> 8) + 1;
    *unint64_t result = a2 + 3;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C858D4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 3;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SineMoveAction.CodingKeys()
{
  return &type metadata for SineMoveAction.CodingKeys;
}

ValueMetadata *type metadata accessor for SineYAction()
{
  return &type metadata for SineYAction;
}

unint64_t sub_1B6C85920()
{
  unint64_t result = qword_1E9DD7F70;
  if (!qword_1E9DD7F70)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7F70);
  }
  return result;
}

unint64_t sub_1B6C85978()
{
  unint64_t result = qword_1E9DD7F78;
  if (!qword_1E9DD7F78)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7F78);
  }
  return result;
}

unint64_t sub_1B6C859D0()
{
  unint64_t result = qword_1E9DD7F80;
  if (!qword_1E9DD7F80)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7F80);
  }
  return result;
}

unint64_t sub_1B6C85A28()
{
  unint64_t result = qword_1E9DD7F88;
  if (!qword_1E9DD7F88)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7F88);
  }
  return result;
}

unint64_t sub_1B6C85A80()
{
  unint64_t result = qword_1E9DD7F90;
  if (!qword_1E9DD7F90)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7F90);
  }
  return result;
}

unint64_t sub_1B6C85AD8()
{
  unint64_t result = qword_1E9DD7F98;
  if (!qword_1E9DD7F98)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7F98);
  }
  return result;
}

unint64_t sub_1B6C85B2C()
{
  unint64_t result = qword_1E9DD7FA8;
  if (!qword_1E9DD7FA8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7FA8);
  }
  return result;
}

void sub_1B6C85B80(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

unsigned char *storeEnumTagSinglePayload for SineYAction.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *unint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C85CB4);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *unint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for SineYAction.CodingKeys()
{
  return &type metadata for SineYAction.CodingKeys;
}

unint64_t sub_1B6C85CF0()
{
  unint64_t result = qword_1E9DD7FB8;
  if (!qword_1E9DD7FB8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7FB8);
  }
  return result;
}

unint64_t sub_1B6C85D48()
{
  unint64_t result = qword_1E9DD7FC0;
  if (!qword_1E9DD7FC0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7FC0);
  }
  return result;
}

unint64_t sub_1B6C85DA0()
{
  unint64_t result = qword_1E9DD7FC8;
  if (!qword_1E9DD7FC8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7FC8);
  }
  return result;
}

ValueMetadata *type metadata accessor for TransientOriginScale()
{
  return &type metadata for TransientOriginScale;
}

ValueMetadata *type metadata accessor for TransientOriginColor()
{
  return &type metadata for TransientOriginColor;
}

uint64_t sub_1B6C85E14(uint64_t a1, uint64_t a2)
{
  uint64_t v25 = a1 + 64;
  uint64_t v2 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v3 = -1;
  if (v2 < 64) {
    uint64_t v3 = ~(-1 << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v6 = 0;
  while (1)
  {
    if (v4)
    {
      unint64_t v7 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      uint64_t v28 = v6;
      unint64_t v8 = v7 | (v6 << 6);
      goto LABEL_22;
    }
    uint64_t v9 = v6 + 1;
    if (v6 + 1 >= v5) {
      return swift_release();
    }
    unint64_t v10 = *(void *)(v25 + 8 * v9);
    if (!v10)
    {
      uint64_t v9 = v6 + 2;
      if (v6 + 2 >= v5) {
        return swift_release();
      }
      unint64_t v10 = *(void *)(v25 + 8 * v9);
      if (!v10)
      {
        uint64_t v9 = v6 + 3;
        if (v6 + 3 >= v5) {
          return swift_release();
        }
        unint64_t v10 = *(void *)(v25 + 8 * v9);
        if (!v10)
        {
          uint64_t v9 = v6 + 4;
          if (v6 + 4 >= v5) {
            return swift_release();
          }
          unint64_t v10 = *(void *)(v25 + 8 * v9);
          if (!v10)
          {
            uint64_t v9 = v6 + 5;
            if (v6 + 5 >= v5) {
              return swift_release();
            }
            unint64_t v10 = *(void *)(v25 + 8 * v9);
            if (!v10) {
              break;
            }
          }
        }
      }
    }
LABEL_21:
    unint64_t v4 = (v10 - 1) & v10;
    unint64_t v8 = __clz(__rbit64(v10)) + (v9 << 6);
    uint64_t v28 = v9;
LABEL_22:
    uint64_t v11 = *(void *)(*(void *)(a1 + 56) + 8 * v8);
    uint64_t v13 = *(void *)(v11 + 24);
    uint64_t v12 = *(void *)(v11 + 32);
    long long v14 = *(void **)a2;
    uint64_t v15 = *(void *)(*(void *)a2 + 16);
    if (v15)
    {
      BOOL v16 = v14[4] == v13 && v14[5] == v12;
      if (v16 || (sub_1B6E334B8() & 1) != 0)
      {
LABEL_4:
        swift_retain();
        uint64_t v6 = v28;
        goto LABEL_5;
      }
      uint64_t v17 = v15 - 1;
      if (v15 != 1)
      {
        BOOL v21 = v14[6] == v13 && v14[7] == v12;
        if (v21 || (sub_1B6E334B8() & 1) != 0) {
          goto LABEL_4;
        }
        uint64_t v22 = v14 + 9;
        while (--v17)
        {
          if (*(v22 - 1) != v13 || *v22 != v12)
          {
            v22 += 2;
            if ((sub_1B6E334B8() & 1) == 0) {
              continue;
            }
          }
          goto LABEL_4;
        }
      }
    }
    swift_bridgeObjectRetain_n();
    swift_bridgeObjectRetain();
    swift_retain();
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      long long v14 = sub_1B6335858(0, v15 + 1, 1, v14);
    }
    unint64_t v19 = v14[2];
    unint64_t v18 = v14[3];
    if (v19 >= v18 >> 1) {
      long long v14 = sub_1B6335858(v18 > 1, v19 + 1, 1, v14);
    }
    uint64_t v6 = v28;
    id v14[2] = v19 + 1;
    uint64_t v20 = &v14[2 * v19];
    void v20[4] = v13;
    v20[5] = v12;
    *(void *)a2 = v14;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_release();
  }
  while (v5 - 6 != v6)
  {
    unint64_t v10 = *(void *)(a1 + 8 * v6++ + 112);
    if (v10)
    {
      uint64_t v9 = v6 + 5;
      goto LABEL_21;
    }
  }
  return swift_release();
}

uint64_t sub_1B6C86104()
{
  uint64_t v0 = swift_bridgeObjectRetain();
  sub_1B6C87618(v0, sub_1B6C87A08);
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  if (!v2) {
    return 0;
  }
  swift_bridgeObjectRelease();
  int64_t v5 = *(void (**)(uint64_t))(*(void *)v4 + 1024);
  uint64_t v6 = swift_bridgeObjectRetain();
  v5(v6);
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  sub_1B6E31948();
  sub_1B6E31948();
  sub_1B6E31948();
  sub_1B6E31948();
  sub_1B6E31948();
  sub_1B6E31948();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1B6C862D0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1B6B479DC(*a1, *a2);
}

uint64_t sub_1B6C862DC()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C86374()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C863F8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C8648C@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C877F4();
  *a1 = result;
  return result;
}

void sub_1B6C864BC(uint64_t *a1@<X8>)
{
  int v2 = *v1;
  unint64_t v3 = 0xE500000000000000;
  unint64_t v4 = 0xE700000000000000;
  uint64_t v5 = 0x6E69746C697542;
  if (v2 != 1)
  {
    uint64_t v5 = 1919251285;
    unint64_t v4 = 0xE400000000000000;
  }
  BOOL v6 = v2 == 0;
  if (*v1) {
    uint64_t v7 = v5;
  }
  else {
    uint64_t v7 = 0x6C61636F4CLL;
  }
  if (!v6) {
    unint64_t v3 = v4;
  }
  *a1 = v7;
  a1[1] = v3;
}

uint64_t sub_1B6C86510(uint64_t a1)
{
  uint64_t v2 = v1;
  *(void *)(v2 + 32) = *(void *)(a1 + 32);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(v2 + 40) = *(void *)(a1 + 40);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  uint64_t v8 = MEMORY[0x1E4FBC860];
  uint64_t v4 = swift_bridgeObjectRetain();
  sub_1B6C85E14(v4, (uint64_t)&v8);
  swift_bridgeObjectRelease();
  if (*(void *)(*(void *)(v2 + 40) + 16) != *(void *)(v8 + 16))
  {
    if (qword_1EB9852D0 != -1) {
      swift_once();
    }
    v7[1] = 0xE000000000000000;
    swift_retain();
    sub_1B6E328C8();
    sub_1B6E31948();
    swift_bridgeObjectRetain();
    sub_1B6E31948();
    swift_bridgeObjectRelease();
    sub_1B6E31948();
    int v5 = sub_1B6E32148();
    if (qword_1EB9854F8 != -1) {
      swift_once();
    }
    v7[0] = 0;
    swift_retain();
    sub_1B6B33E34(v5, v7, 0, 0xE000000000000000);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    swift_bridgeObjectRelease();
    *(void *)(v2 + 40) = MEMORY[0x1E4FBC868];
  }

  return swift_bridgeObjectRelease();
}

void *sub_1B6C86738(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_1B6E31808();
  MEMORY[0x1F4188790](v8 - 8, v9);
  _OWORD v4[2] = 0;
  v4[3] = 0;
  void v4[4] = 0;
  v4[5] = sub_1B67DE4B0(MEMORY[0x1E4FBC860]);
  _OWORD v4[2] = a1;
  v4[3] = a2;
  swift_bridgeObjectRelease();
  sub_1B6E317E8();
  sub_1B6E31738();
  uint64_t v12 = sub_1B6C87434();
  swift_bridgeObjectRelease();
  if (v12)
  {
    sub_1B6C86510(v12);
    swift_release();
  }
  uint64_t v10 = sub_1B6E30F48();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8))(a3, v10);
  return v4;
}

uint64_t sub_1B6C86A2C(char *a1, char *a2)
{
  return sub_1B6BB5E38(*a1, *a2);
}

uint64_t sub_1B6C86A38()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C86AC0()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C86B34()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C86BB8@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

void sub_1B6C86C18(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0x73747865746E6F63;
  if (*v1) {
    unint64_t v2 = 0xD000000000000012;
  }
  unint64_t v3 = 0x80000001B6F2F2E0;
  if (!*v1) {
    unint64_t v3 = 0xE800000000000000;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_1B6C86C5C()
{
  if (*v0) {
    return 0xD000000000000012;
  }
  else {
    return 0x73747865746E6F63;
  }
}

uint64_t sub_1B6C86C9C@<X0>(char *a1@<X8>)
{
  uint64_t v2 = sub_1B6E32CC8();
  uint64_t result = swift_bridgeObjectRelease();
  if (v2 == 1) {
    char v4 = 1;
  }
  else {
    char v4 = 2;
  }
  if (!v2) {
    char v4 = 0;
  }
  *a1 = v4;
  return result;
}

uint64_t sub_1B6C86D00(uint64_t a1)
{
  unint64_t v2 = sub_1B6C872B4();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C86D3C(uint64_t a1)
{
  unint64_t v2 = sub_1B6C872B4();

  return MEMORY[0x1F41862B0](a1, v2);
}

void *sub_1B6C86D78(void *a1)
{
  sub_1B6C87370(0, &qword_1E9DD7FD0, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = (char *)&v12 - v8;
  v1[2] = 0;
  v1[3] = 0;
  v1[4] = 0;
  v1[5] = sub_1B67DE4B0(MEMORY[0x1E4FBC860]);
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C872B4();
  sub_1B6E33A48();
  if (v2)
  {
    swift_release();
  }
  else
  {
    sub_1B6C87308();
    char v13 = 0;
    sub_1B6A35008();
    sub_1B6E32DF8();
    v1[5] = v14;
    swift_bridgeObjectRelease();
    sub_1B6A4A2D4();
    char v13 = 1;
    sub_1B6AFBCE8();
    sub_1B6E32D78();
    (*(void (**)(char *, uint64_t))(v6 + 8))(v9, v5);
    uint64_t v11 = v14;
    if (v14 == 1) {
      uint64_t v11 = swift_bridgeObjectRetain();
    }
    v1[4] = v11;
    swift_bridgeObjectRelease();
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return v1;
}

uint64_t sub_1B6C86FC0(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6C87370(0, &qword_1E9DD7FE0, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = (char *)&v13 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C872B4();
  sub_1B6E33A88();
  uint64_t v14 = *(void *)(v3 + 40);
  HIBYTE(v13) = 0;
  sub_1B6C87308();
  sub_1B6A3560C();
  sub_1B6E32FA8();
  if (v2) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v12 = *(void *)(v3 + 32);
  if (!v12) {
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  }
  uint64_t v14 = v12;
  HIBYTE(v13) = 1;
  sub_1B6646CE4();
  sub_1B6C873D4((unint64_t *)&qword_1E9DCFE00);
  swift_bridgeObjectRetain();
  sub_1B6E32FA8();
  (*(void (**)(char *, uint64_t))(v7 + 8))(v10, v6);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C871CC()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocClassInstance();
}

uint64_t _s11TemplateSetCMa()
{
  return self;
}

void *sub_1B6C87238@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = swift_allocObject();
  uint64_t result = sub_1B6C86D78(a1);
  if (!v2) {
    *a2 = v5;
  }
  return result;
}

uint64_t sub_1B6C87290(void *a1)
{
  return sub_1B6C86FC0(a1);
}

unint64_t sub_1B6C872B4()
{
  unint64_t result = qword_1E9DD7FD8;
  if (!qword_1E9DD7FD8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7FD8);
  }
  return result;
}

void sub_1B6C87308()
{
  if (!qword_1E9DD3BE8)
  {
    _s7ContextCMa();
    unint64_t v0 = sub_1B6E31568();
    if (!v1) {
      atomic_store(v0, (unint64_t *)&qword_1E9DD3BE8);
    }
  }
}

void sub_1B6C87370(uint64_t a1, unint64_t *a2, uint64_t (*a3)(uint64_t, ValueMetadata *, unint64_t))
{
  if (!*a2)
  {
    unint64_t v6 = sub_1B6C872B4();
    unint64_t v7 = a3(a1, &_s11TemplateSetC10CodingKeysON, v6);
    if (!v8) {
      atomic_store(v7, a2);
    }
  }
}

uint64_t sub_1B6C873D4(unint64_t *a1)
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B6646CE4();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

uint64_t sub_1B6C87434()
{
  uint64_t v1 = sub_1B6E31808();
  uint64_t v2 = *(void *)(v1 - 8);
  MEMORY[0x1F4188790](v1, v3);
  uint64_t v5 = (char *)v11 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0);
  sub_1B6E317E8();
  uint64_t v6 = sub_1B6E317A8();
  unint64_t v8 = v7;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v5, v1);
  sub_1B6E30978();
  swift_allocObject();
  sub_1B6E30968();
  if (v8 >> 60 == 15)
  {
    swift_release();
    return 0;
  }
  else
  {
    _s11TemplateSetCMa();
    sub_1B62FFBB0(v6, v8);
    sub_1B6C87A30(&qword_1E9DD7FE8, v10, (void (*)(uint64_t))_s11TemplateSetCMa);
    sub_1B6E30938();
    sub_1B665D488(v6, v8);
    if (v0)
    {
      swift_release();
      return sub_1B665D488(v6, v8);
    }
    else
    {
      sub_1B665D488(v6, v8);
      swift_release();
      return v11[1];
    }
  }
}

uint64_t sub_1B6C87618(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t, uint64_t))
{
  uint64_t v18 = a1 + 64;
  uint64_t v4 = 1 << *(unsigned char *)(a1 + 32);
  uint64_t v5 = -1;
  if (v4 < 64) {
    uint64_t v5 = ~(-1 << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain();
  uint64_t v8 = 0;
  if (!v6) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v9 = __clz(__rbit64(v6));
  v6 &= v6 - 1;
  unint64_t v10 = v9 | (v8 << 6);
  while (1)
  {
    uint64_t v13 = (uint64_t *)(*(void *)(a1 + 48) + 16 * v10);
    uint64_t v15 = *v13;
    uint64_t v14 = v13[1];
    uint64_t v16 = *(void *)(*(void *)(a1 + 56) + 8 * v10);
    swift_bridgeObjectRetain();
    swift_retain();
    if (a2(v15, v14, v16))
    {
      swift_release();
      return v15;
    }
    swift_release();
    swift_bridgeObjectRelease();
    if (v6) {
      goto LABEL_4;
    }
LABEL_5:
    uint64_t v11 = v8 + 1;
    if (v8 + 1 >= v7) {
      break;
    }
    unint64_t v12 = *(void *)(v18 + 8 * v11);
    if (!v12)
    {
      uint64_t v11 = v8 + 2;
      if (v8 + 2 >= v7) {
        break;
      }
      unint64_t v12 = *(void *)(v18 + 8 * v11);
      if (!v12)
      {
        uint64_t v11 = v8 + 3;
        if (v8 + 3 >= v7) {
          break;
        }
        unint64_t v12 = *(void *)(v18 + 8 * v11);
        if (!v12)
        {
          uint64_t v11 = v8 + 4;
          if (v8 + 4 >= v7) {
            break;
          }
          unint64_t v12 = *(void *)(v18 + 8 * v11);
          if (!v12)
          {
            uint64_t v11 = v8 + 5;
            if (v8 + 5 >= v7) {
              break;
            }
            unint64_t v12 = *(void *)(v18 + 8 * v11);
            if (!v12)
            {
              while (v7 - 6 != v8)
              {
                unint64_t v12 = *(void *)(a1 + 8 * v8++ + 112);
                if (v12)
                {
                  uint64_t v11 = v8 + 5;
                  goto LABEL_18;
                }
              }
              break;
            }
          }
        }
      }
    }
LABEL_18:
    unint64_t v6 = (v12 - 1) & v12;
    unint64_t v10 = __clz(__rbit64(v12)) + (v11 << 6);
    uint64_t v8 = v11;
  }
  swift_release();
  return 0;
}

uint64_t sub_1B6C877F4()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 3) {
    return 3;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6C87840@<X0>(uint64_t *a1@<X8>)
{
  sub_1B633AF88();
  uint64_t v2 = (void *)sub_1B6E32688();
  uint64_t v3 = v2;
  if (v2[2] == 4)
  {
    uint64_t v4 = v2[4];
    uint64_t v5 = v2[5];
    uint64_t v6 = v2[6];
    uint64_t v7 = v2[7];
    swift_bridgeObjectRetain();
    MEMORY[0x1BA9B34C0](v4, v5, v6, v7);
    swift_bridgeObjectRelease();
    unint64_t v8 = sub_1B6E32CC8();
    swift_bridgeObjectRelease();
    uint64_t v9 = 3;
    if (v8 < 3) {
      uint64_t v9 = v8;
    }
    uint64_t v33 = v9;
    uint64_t v10 = v3[8];
    uint64_t v11 = v3[9];
    uint64_t v12 = v3[10];
    uint64_t v13 = v3[11];
    swift_bridgeObjectRetain();
    uint64_t v14 = MEMORY[0x1BA9B34C0](v10, v11, v12, v13);
    uint64_t v16 = v15;
    swift_bridgeObjectRelease();
    uint64_t v17 = v3[12];
    uint64_t v18 = v3[13];
    uint64_t v19 = v3[14];
    uint64_t v20 = v3[15];
    swift_bridgeObjectRetain();
    uint64_t v21 = MEMORY[0x1BA9B34C0](v17, v18, v19, v20);
    uint64_t v23 = v22;
    swift_bridgeObjectRelease();
    uint64_t v24 = v3[16];
    uint64_t v25 = v3[17];
    uint64_t v26 = v3[18];
    uint64_t v27 = v3[19];
    swift_bridgeObjectRetain();
    swift_bridgeObjectRelease();
    uint64_t v28 = MEMORY[0x1BA9B34C0](v24, v25, v26, v27);
    uint64_t v30 = v29;
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v32 = v33;
  }
  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v32 = 0;
    uint64_t v14 = 0;
    uint64_t v16 = 0;
    uint64_t v21 = 0;
    uint64_t v23 = 0;
    uint64_t v28 = 0;
    uint64_t v30 = 0;
  }
  *a1 = v32;
  a1[1] = v14;
  a1[2] = v16;
  a1[3] = v21;
  a1[4] = v23;
  a1[5] = v28;
  a1[6] = v30;
  return result;
}

uint64_t sub_1B6C87A08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 24) == *(void *)(v3 + 16) && *(void *)(a3 + 32) == *(void *)(v3 + 24)) {
    return 1;
  }
  else {
    return sub_1B6E334B8();
  }
}

uint64_t sub_1B6C87A30(unint64_t *a1, uint64_t a2, void (*a3)(uint64_t))
{
  uint64_t result = *a1;
  if (!result)
  {
    a3(a2);
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *_s8TemplateV8CategoryOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFD)
  {
    unsigned int v6 = ((a2 - 254) >> 8) + 1;
    *uint64_t result = a2 + 2;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C87B44);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 2;
        break;
    }
  }
  return result;
}

ValueMetadata *_s8TemplateV8CategoryOMa()
{
  return &_s8TemplateV8CategoryON;
}

uint64_t _s8TemplateVwxx()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_release();
}

uint64_t _s8TemplateVwcp(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  swift_retain();
  return a1;
}

uint64_t _s8TemplateVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t _s8TemplateVwta(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease();
  uint64_t v5 = *(void *)(a2 + 24);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v5;
  swift_bridgeObjectRelease();
  *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v6;
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_release();
  return a1;
}

ValueMetadata *_s8TemplateVMa()
{
  return &_s8TemplateVN;
}

unsigned char *_s11TemplateSetC10CodingKeysOwst(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xFE)
  {
    unsigned int v6 = ((a2 - 255) >> 8) + 1;
    *uint64_t result = a2 + 1;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C87E84);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 1;
        break;
    }
  }
  return result;
}

ValueMetadata *_s11TemplateSetC10CodingKeysOMa()
{
  return &_s11TemplateSetC10CodingKeysON;
}

unint64_t sub_1B6C87EC0()
{
  unint64_t result = qword_1E9DD7FF0;
  if (!qword_1E9DD7FF0)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7FF0);
  }
  return result;
}

unint64_t sub_1B6C87F18()
{
  unint64_t result = qword_1E9DD7FF8;
  if (!qword_1E9DD7FF8)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD7FF8);
  }
  return result;
}

unint64_t sub_1B6C87F70()
{
  unint64_t result = qword_1E9DD8000;
  if (!qword_1E9DD8000)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8000);
  }
  return result;
}

unint64_t sub_1B6C87FC8()
{
  unint64_t result = qword_1E9DD8008;
  if (!qword_1E9DD8008)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8008);
  }
  return result;
}

uint64_t sub_1B6C8801C()
{
  return type metadata accessor for WrapAroundCamera.System();
}

double sub_1B6C8803C@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  double result = 524288.124;
  *(void *)(a1 + 16) = 0x412000003F800000;
  *(_WORD *)(a1 + 24) = 0;
  *(void *)(a1 + 28) = 0;
  *(unsigned char *)(a1 + 36) = 1;
  return result;
}

uint64_t type metadata accessor for WrapAroundCamera.System()
{
  return self;
}

uint64_t sub_1B6C88084(char a1)
{
  uint64_t result = 0x7366664F7466656CLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x66664F7468676972;
      break;
    case 2:
      uint64_t result = 0x657366664F706F74;
      break;
    case 3:
      uint64_t result = 0x664F6D6F74746F62;
      break;
    case 4:
      uint64_t result = 1918985582;
      break;
    case 5:
      uint64_t result = 7496038;
      break;
    case 6:
      uint64_t result = 0x7073726550657375;
      break;
    case 7:
      uint64_t result = 0x756C6F56776F6873;
      break;
    case 8:
      uint64_t result = 0x6172656D6163;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6C881BC(char a1)
{
  uint64_t result = 0x7366664F7466656CLL;
  switch(a1)
  {
    case 1:
      uint64_t result = 0x66664F7468676972;
      break;
    case 2:
      uint64_t result = 0x657366664F706F74;
      break;
    case 3:
      uint64_t result = 0x664F6D6F74746F62;
      break;
    case 4:
      uint64_t result = 1918985582;
      break;
    case 5:
      uint64_t result = 7496038;
      break;
    case 6:
      uint64_t result = 0x7073726550657375;
      break;
    case 7:
      uint64_t result = 0x756C6F56776F6873;
      break;
    case 8:
      uint64_t result = 0x6172656D6163;
      break;
    default:
      return result;
  }
  return result;
}

const char *sub_1B6C882F8()
{
  return "WrapAroundCamera.CPU";
}

uint64_t sub_1B6C8830C(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB1FB4(*a1, *a2);
}

uint64_t sub_1B6C88318()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C88360()
{
  return sub_1B69E9FF4();
}

uint64_t sub_1B6C88368()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C883AC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C888C8();
  *a1 = result;
  return result;
}

uint64_t sub_1B6C883DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1B6C88084(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1B6C88408()
{
  return sub_1B6C881BC(*v0);
}

uint64_t sub_1B6C88410@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C888C8();
  *a1 = result;
  return result;
}

uint64_t sub_1B6C88438(uint64_t a1)
{
  unint64_t v2 = sub_1B6C8A218();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C88474(uint64_t a1)
{
  unint64_t v2 = sub_1B6C8A218();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C884B0(void *a1)
{
  uint64_t v3 = v1;
  sub_1B6C8A26C(0, &qword_1E9DD8040, (uint64_t (*)(void))sub_1B6C8A218, (uint64_t)&type metadata for WrapAroundCamera.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  uint64_t v10 = &v13[-v9 - 8];
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C8A218();
  sub_1B6E33A88();
  v13[0] = 0;
  sub_1B6E32F78();
  if (!v2)
  {
    v13[0] = 1;
    sub_1B6E32F78();
    v13[0] = 2;
    sub_1B6E32F78();
    v13[0] = 3;
    sub_1B6E32F78();
    v13[0] = 4;
    sub_1B6E32F78();
    v13[0] = 5;
    sub_1B6E32F78();
    v13[0] = 6;
    sub_1B6E32F58();
    v13[0] = 7;
    sub_1B6E32F58();
    sub_1B62CA210(v3 + 28, (uint64_t)v14, &qword_1E9DD8030);
    sub_1B62CA210((uint64_t)v14, (uint64_t)v13, &qword_1E9DD8030);
    v14[27] = 8;
    sub_1B62D82E0(0, &qword_1E9DD8030);
    sub_1B6C8A2D4(&qword_1E9DD8048, (void (*)(void))sub_1B6657A10);
    sub_1B6E32FA8();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B6C887E8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6C89E00(a1, (uint64_t)&v6);
  if (!v2)
  {
    double result = *(double *)&v6;
    long long v5 = *(_OWORD *)v7;
    *(_OWORD *)a2 = v6;
    *(_OWORD *)(a2 + 16) = v5;
    *(void *)(a2 + 29) = *(void *)&v7[13];
  }
  return result;
}

uint64_t sub_1B6C88830(void *a1)
{
  return sub_1B6C884B0(a1);
}

uint64_t type metadata accessor for WrapAroundCamera.GPUSystem()
{
  return self;
}

const char *sub_1B6C88894()
{
  return "WrapAroundCamera.GPU";
}

uint64_t sub_1B6C888A8()
{
  return type metadata accessor for WrapAroundCamera.GPUSystem();
}

uint64_t sub_1B6C888C8()
{
  unint64_t v0 = sub_1B6E32CC8();
  swift_bridgeObjectRelease();
  if (v0 >= 9) {
    return 9;
  }
  else {
    return v0;
  }
}

uint64_t sub_1B6C88914@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = *a1;
  swift_retain();
  uint64_t v5 = a1[1];
  swift_retain();
  sub_1B695ED64(v5, (uint64_t)v73);
  swift_release();
  if (v74 == 2)
  {
    int v6 = 0;
    float v7 = 0.0;
    float v8 = 1.0;
    float v9 = 10.0;
    float v10 = 0.0;
    float v11 = 0.0;
    float v12 = 0.0;
  }
  else
  {
    float v12 = *(float *)v73;
    float v11 = *(float *)&v73[1];
    float v10 = *(float *)&v73[2];
    float v7 = *(float *)&v73[3];
    float v8 = *(float *)&v73[4];
    float v9 = *(float *)&v73[5];
    int v6 = v74 & 1;
    if (((v75 | ((unint64_t)v76 << 32)) & 0x100000000) == 0)
    {
      *((void *)&v14 + 1) = v75;
      *(void *)&long long v14 = v74;
      unint64_t v13 = v14 >> 32;
      goto LABEL_7;
    }
  }
  uint64_t v15 = sub_1B637BBB4();
  if (v16)
  {
LABEL_10:
    swift_release();
    sub_1B6C89DC4((uint64_t)v62);
    goto LABEL_29;
  }
  unint64_t v13 = v15;
LABEL_7:
  uint64_t v17 = *(void *)(v4 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v17) {
    goto LABEL_10;
  }
  uint64_t v18 = *(void *)(v17 + 224);
  if (*(void *)(v18 + 16))
  {
    uint64_t v19 = *(void *)(v18 + 40);
    uint64_t ObjectType = swift_getObjectType();
    swift_retain();
    swift_unknownObjectRetain();
    sub_1B6334048(ObjectType, v19);
    float v22 = v21;
    swift_unknownObjectRelease();
  }
  else
  {
    swift_retain();
    float v22 = 1.0;
  }
  sub_1B695EBC4(v13, v62);
  if (v63.u8[0] == 2)
  {
    uint64_t v23 = sub_1B695EC90(v13);
    if ((v23 & 0xFF00000000) == 0x200000000)
    {
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      swift_retain();
      int v24 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      *(void *)&v62[0] = 0;
      swift_retain();
      sub_1B6B33E34(v24, (uint64_t *)v62, 0xD00000000000001DLL, 0x80000001B6F501C0);
      swift_release();
      swift_release();
      swift_release();
      goto LABEL_10;
    }
    float v30 = (float)-*(float *)&v23 - v12;
    float v31 = v11 + *(float *)&v23;
    goto LABEL_24;
  }
  float v25 = tanf(*(float *)v62 * 0.5);
  float v27 = 1.0;
  if (!v6) {
    float v27 = v9;
  }
  float v28 = v27 * v25;
  float v29 = -(float)(v27 * v25);
  float v30 = (float)-(float)(v22 * (float)(v27 * v25)) - v12;
  float v31 = v11 + (float)(v22 * v28);
  *(float *)&double v26 = v29 - v7;
  float v32 = v10 + v28;
  if (!v6)
  {
LABEL_24:
    v33.f32[0] = sub_1B688D0B8(v30, v31);
    goto LABEL_25;
  }
  *(double *)v33.i64 = sub_1B688D02C(0, v30, v31, v26, v32, v8, v9);
LABEL_25:
  simd_float4 v60 = v34;
  simd_float4 v61 = v33;
  simd_float4 v58 = v36;
  simd_float4 v59 = v35;
  sub_1B62E9D50((void *)v13, (uint64_t)v77);
  sub_1B62CA210((uint64_t)v77, (uint64_t)&v78, qword_1EB97EA20);
  if (v79)
  {
    *(_OWORD *)&v57[48] = xmmword_1B6E4F370;
    *(_OWORD *)&unsigned char v57[32] = xmmword_1B6E4F2E0;
    *(_OWORD *)&v57[16] = xmmword_1B6E4F320;
    *(_OWORD *)uint64_t v57 = xmmword_1B6E4F300;
  }
  else
  {
    *(simd_float4x4 *)uint64_t v57 = __invert_f4(v78);
  }
  v80.columns[1] = v60;
  v80.columns[0] = v61;
  v80.columns[3] = v58;
  v80.columns[2] = v59;
  simd_float4x4 v81 = __invert_f4(v80);
  float32x4_t v37 = vaddq_f32((float32x4_t)v81.columns[2], (float32x4_t)v81.columns[3]);
  v81.columns[3] = (simd_float4)vmlaq_f32((float32x4_t)v81.columns[3], (float32x4_t)0, (float32x4_t)v81.columns[2]);
  __asm { FMOV            V2.4S, #-1.0 }
  v81.columns[3] = (simd_float4)vmlaq_f32(vmlaq_f32((float32x4_t)v81.columns[3], (float32x4_t)v81.columns[2], (float32x4_t)v81.columns[1]), (float32x4_t)v81.columns[2], (float32x4_t)v81.columns[0]);
  float32x4_t v42 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v81.columns[3], 3);
  v43.i64[0] = 0;
  int8x16_t v44 = (int8x16_t)vdupq_n_s32(0x322BCC77u);
  float32x4_t v45 = vmlaq_f32(vmlaq_f32(v37, (float32x4_t)v81.columns[2], (float32x4_t)v81.columns[1]), (float32x4_t)v81.columns[2], (float32x4_t)v81.columns[0]);
  v81.columns[0] = (simd_float4)vdupq_laneq_s32((int32x4_t)v45, 3);
  float32x4_t v55 = vdivq_f32(v45, (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32((float32x4_t)v81.columns[0], v43)), 0), (int8x16_t)v81.columns[0], v44));
  float32x4_t v56 = vdivq_f32((float32x4_t)v81.columns[3], (float32x4_t)vbslq_s8((int8x16_t)vdupq_lane_s32((int32x2_t)*(_OWORD *)&vmvnq_s8((int8x16_t)vceqq_f32(v42, v43)), 0), (int8x16_t)v42, v44));
  *(double *)v46.i64 = sub_1B62E9BFC();
  float32x4_t v51 = v46;
  float32x4_t v52 = v47;
  float32x4_t v53 = v48;
  float32x4_t v54 = v49;
  swift_release();
  swift_release();
  LOBYTE(v62[0]) = v6;
  v62[1] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v57, v51.f32[0]), *(float32x4_t *)&v57[16], *(float32x2_t *)v51.f32, 1), *(float32x4_t *)&v57[32], v51, 2), *(float32x4_t *)&v57[48], v51, 3);
  float32x4_t v63 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v57, v52.f32[0]), *(float32x4_t *)&v57[16], *(float32x2_t *)v52.f32, 1), *(float32x4_t *)&v57[32], v52, 2), *(float32x4_t *)&v57[48], v52, 3);
  float32x4_t v64 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v57, v53.f32[0]), *(float32x4_t *)&v57[16], *(float32x2_t *)v53.f32, 1), *(float32x4_t *)&v57[32], v53, 2), *(float32x4_t *)&v57[48], v53, 3);
  float32x4_t v65 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(*(float32x4_t *)v57, v54.f32[0]), *(float32x4_t *)&v57[16], *(float32x2_t *)v54.f32, 1), *(float32x4_t *)&v57[32], v54, 2), *(float32x4_t *)&v57[48], v54, 3);
  simd_float4 v66 = v61;
  simd_float4 v67 = v60;
  simd_float4 v68 = v59;
  simd_float4 v69 = v58;
  float32x4_t v70 = v56;
  float32x4_t v71 = v55;
  nullsub_1(v62);
LABEL_29:
  sub_1B6C89B94((uint64_t)v62, (uint64_t)v72);
  return sub_1B6C89B94((uint64_t)v72, a2);
}

uint64_t sub_1B6C88DE4(uint64_t a1)
{
  long long v2 = *(_OWORD *)(a1 + 96);
  long long v66 = *(_OWORD *)(a1 + 80);
  long long v67 = v2;
  long long v3 = *(_OWORD *)(a1 + 128);
  long long v68 = *(_OWORD *)(a1 + 112);
  long long v69 = v3;
  long long v4 = *(_OWORD *)(a1 + 32);
  v63[0] = *(_OWORD *)(a1 + 16);
  v63[1] = v4;
  long long v5 = *(_OWORD *)(a1 + 64);
  long long v64 = *(_OWORD *)(a1 + 48);
  long long v65 = v5;
  sub_1B6C88914((uint64_t *)v63, (uint64_t)v51);
  sub_1B6C89B94((uint64_t)v51, (uint64_t)v52);
  uint64_t result = sub_1B6C89DA8(v52);
  if (result != 1)
  {
    v7.columns[0] = (simd_float4)v53;
    v7.columns[1] = (simd_float4)v54;
    v7.columns[2] = (simd_float4)v55;
    v7.columns[3] = (simd_float4)v56;
    if (v52[0] == 1)
    {
      float32x4_t v39 = v62;
      float32x4_t v40 = v61;
      float v8 = v61.f32[2];
      float v9 = vmuls_lane_f32(v61.f32[2], v61, 2);
      float v10 = vmuls_lane_f32(v9, v61, 2);
      float v11 = v62.f32[2];
      float v12 = vmuls_lane_f32(vmuls_lane_f32(v62.f32[2], v62, 2), v62, 2) - v10;
      v41.columns[0] = (simd_float4)v53;
      v41.columns[1] = (simd_float4)v54;
      v41.columns[2] = (simd_float4)v55;
      v41.columns[3] = (simd_float4)v56;
      simd_float4x4 v42 = __invert_f4(v7);
      float32x4_t v43 = v40;
      float32x4_t v44 = v39;
      float v45 = 1.0 / (float)(v11 - v8);
      float v46 = (float)-v8 / (float)(v11 - v8);
      float v47 = 1.0 / v12;
      float v48 = (float)-(float)(v8 * v9) / v12;
      float v49 = v10;
      float v50 = v12;
      uint64_t v13 = *(void *)a1;
      if (*(void *)a1)
      {
        uint64_t ObjectType = swift_getObjectType();
        type metadata accessor for particle_wrap_around_camera_perspective_uniforms(0);
        sub_1B6B594A8((uint64_t)&v41, 1, ObjectType, v15, v16, v17, v18, v19);
      }
      BOOL v20 = v13 == 0;
      uint64_t v21 = *(void *)&v63[0];
      uint64_t v22 = v64;
      swift_retain();
      sub_1B6786A24(a1);
      uint64_t v23 = 0x80000001B6F50230;
      uint64_t v24 = v22;
      uint64_t v25 = v21;
      char v26 = v20;
      uint64_t v27 = a1;
      uint64_t v28 = 0xD000000000000027;
    }
    else
    {
      v70.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v54.f32[0]), v58, *(float32x2_t *)v54.f32, 1), v59, v54, 2), v60, v54, 3);
      v70.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v55.f32[0]), v58, *(float32x2_t *)v55.f32, 1), v59, v55, 2), v60, v55, 3);
      v70.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v53.f32[0]), v58, *(float32x2_t *)v53.f32, 1), v59, v53, 2), v60, v53, 3);
      v70.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v57, v56.f32[0]), v58, *(float32x2_t *)v56.f32, 1), v59, v56, 2), v60, v56, 3);
      simd_float4x4 v41 = v70;
      simd_float4x4 v42 = __invert_f4(v70);
      uint64_t v29 = *(void *)a1;
      if (*(void *)a1)
      {
        uint64_t v30 = swift_getObjectType();
        type metadata accessor for particle_wrap_around_camera_orthographic_uniforms(0);
        sub_1B6B594A8((uint64_t)&v41, 1, v30, v31, v32, v33, v34, v35);
      }
      BOOL v36 = v29 == 0;
      uint64_t v37 = *(void *)&v63[0];
      uint64_t v38 = v64;
      swift_retain();
      sub_1B6786A24(a1);
      uint64_t v28 = 0xD000000000000028;
      uint64_t v23 = 0x80000001B6F50200;
      uint64_t v24 = v38;
      uint64_t v25 = v37;
      char v26 = v36;
      uint64_t v27 = a1;
    }
    sub_1B6BFF388(v24, v25, v26, 0, v27, v28, v23, 0);
    sub_1B6786A7C(a1);
    return swift_release();
  }
  return result;
}

float sub_1B6C890C8(float32x4_t *a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, float a7, float a8, float a9, float a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, float a17, float a18, uint64_t a19, float32x4_t a20,float32x4_t a21,float32x4_t a22,float32x4_t a23)
{
  float32x4_t v26 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_laneq_f32(a6, a5, *a1, 2), a4, *(float32x2_t *)a1->f32, 1), a3, COERCE_FLOAT(*a1));
  long long v37 = *(_OWORD *)(a2 + 144);
  float32x2_t v27 = vsub_f32(*(float32x2_t *)(a2 + 160), *(float32x2_t *)&v37);
  *(float32x2_t *)a5.f32 = vmla_n_f32(*(float32x2_t *)&v37, v27, vmuls_lane_f32(a7, v26, 2) + a8);
  float32x2_t v28 = vdiv_f32(vsub_f32(*(float32x2_t *)v26.f32, *(float32x2_t *)a5.f32), vmul_f32(*(float32x2_t *)a5.f32, (float32x2_t)0xC0000000C0000000));
  *(int32x2_t *)a5.f32 = vdup_n_s32(0x3F7FFFFFu);
  float32x2_t v29 = vminnm_f32(vsub_f32(v28, vrndm_f32(v28)), *(float32x2_t *)a5.f32);
  a3.f32[0] = (float)(vmuls_lane_f32(vmuls_lane_f32(v26.f32[2], v26, 2), v26, 2) * a9) + a10;
  a3.f32[0] = a18 + (float)(fminf(a3.f32[0] - floorf(a3.f32[0]), 1.0) * a17);
  a5.i32[0] = 1.0;
  v30.i64[0] = 0x8000000080000000;
  v30.i64[1] = 0x8000000080000000;
  LODWORD(v31) = vbslq_s8(v30, (int8x16_t)a5, (int8x16_t)a3).u32[0];
  if (a3.f32[0] == 0.0) {
    float v31 = 0.0;
  }
  float v32 = powf(fabsf(a3.f32[0]), 0.33333) * v31;
  float32x2_t v33 = vmla_n_f32(*(float32x2_t *)&v37, v27, (float)(v32 * a7) + a8);
  float32x2_t v34 = vmla_f32(v33, v29, vsub_f32(vsub_f32(0, v33), v33));
  float32x4_t v35 = vmlaq_n_f32(vmlaq_lane_f32(vmlaq_n_f32(a23, a22, v32), a21, v34, 1), a20, v34.f32[0]);
  float result = 1.0;
  v35.i32[3] = 1.0;
  *a1 = v35;
  return result;
}

uint64_t *sub_1B6C89224(uint64_t a1)
{
  uint64_t v2 = *(void *)a1;
  swift_retain();
  sub_1B6C88914((uint64_t *)a1, (uint64_t)v135);
  sub_1B6C89B94((uint64_t)v135, (uint64_t)v148);
  if (sub_1B6C89DA8(v148) == 1) {
    return (uint64_t *)swift_release();
  }
  uint64_t v3 = 0;
  if (v148[0] == 1)
  {
    float32x4_t v97 = v150;
    float32x4_t v99 = v151;
    float32x4_t v103 = v152;
    float32x4_t v105 = v153;
    float32x4_t v111 = v154;
    float32x4_t v107 = (float32x4_t)v149.columns[3];
    float32x4_t v109 = v155;
    float32x4_t v93 = (float32x4_t)v149.columns[0];
    float32x4_t v95 = (float32x4_t)v149.columns[1];
    float32x4_t v101 = (float32x4_t)v149.columns[2];
    simd_float4x4 v166 = __invert_f4(v149);
    float32x4_t v89 = (float32x4_t)v166.columns[1];
    float32x4_t v91 = (float32x4_t)v166.columns[0];
    float32x4_t v85 = (float32x4_t)v166.columns[3];
    float32x4_t v87 = (float32x4_t)v166.columns[2];
    v166.columns[1] = *(simd_float4 *)(a1 + 104);
    long long v162 = *(_OWORD *)(a1 + 88);
    simd_float4 v163 = v166.columns[1];
    uint64_t v164 = *(void *)(a1 + 120);
    sub_1B6A6ED00(2, (uint64_t)&v136);
    long long v159 = v136;
    long long v160 = v137;
    uint64_t v161 = v138;
    sub_1B62C9DA8(v2, (uint64_t)&v159, 0x200000000, v139);
    sub_1B62CA210((uint64_t)v139, (uint64_t)&v140, (unint64_t *)&qword_1EB97DC50);
    if ((void)v140)
    {
      if (v147 > 0)
      {
        uint64_t v78 = v144;
        if (v144)
        {
          float v4 = 1.0 / (float)(v109.f32[2] - v111.f32[2]);
          float v5 = (float)-v111.f32[2] / (float)(v109.f32[2] - v111.f32[2]);
          float v6 = vmuls_lane_f32(v111.f32[2], v111, 2);
          float v7 = vmuls_lane_f32(v6, v111, 2);
          float v8 = vmuls_lane_f32(vmuls_lane_f32(v109.f32[2], v109, 2), v109, 2) - v7;
          float v9 = 1.0 / v8;
          float v10 = v146;
          uint64_t v11 = v146[4];
          char v12 = *(unsigned char *)(v145 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
          long long v156 = v140;
          long long v157 = v141;
          uint64_t v158 = v142;
          uint64_t v74 = (uint64_t)(v146 + 6);
          uint64_t v75 = v143;
          unint64_t v73 = v146 + 8;
          float v13 = (float)-(float)(v111.f32[2] * v6) / v8;
          swift_retain();
          swift_retain();
          swift_retain();
          uint64_t v14 = 0;
          char v72 = v12;
          uint64_t v76 = v11;
          while (1)
          {
            uint64_t v83 = v3;
            uint64_t v15 = (unsigned int *)(v75 + 48 * v14);
            uint64_t v81 = *v15;
            uint64_t v79 = v15[1];
            uint64_t v17 = (uint64_t *)*((void *)v15 + 2);
            uint64_t v16 = *((void *)v15 + 3);
            uint64_t v19 = *((void *)v15 + 4);
            uint64_t v18 = *((void *)v15 + 5);
            if (v12)
            {
              BOOL v20 = *(os_unfair_lock_s **)(v18 + 376);
              swift_retain_n();
              os_unfair_lock_lock(v20);
              os_unfair_lock_lock(*(os_unfair_lock_t *)(v18 + 344));
              swift_release();
            }
            else
            {
              swift_retain();
            }
            ecs_stack_allocator_push_snapshot(v11);
            sub_1B62CA210(v74, (uint64_t)v165, &qword_1EB97DE20);
            uint64_t v21 = v10[4];
            uint64_t v22 = *(void *)(*(void *)(*(void *)(*(void *)(v18 + 40) + 16) + 32) + 16) + 1;
            swift_retain();
            v10[6] = ecs_stack_allocator_allocate(v21, 48 * v22, 8);
            v10[7] = v22;
            v73[1] = 0;
            v73[2] = 0;
            *unint64_t v73 = 0;
            swift_release();
            uint64_t v23 = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v17, v16, v19, (uint64_t)v10);
            int8x16_t v30 = (float32x4_t *)v23;
            if (v17)
            {
              if (!v19) {
                goto LABEL_17;
              }
              uint64_t v3 = v83;
              char v12 = v72;
              do
              {
                v113[0] = 1;
                float32x4_t v114 = v93;
                float32x4_t v115 = v95;
                float32x4_t v116 = v101;
                float32x4_t v117 = v107;
                float32x4_t v118 = v97;
                float32x4_t v119 = v99;
                float32x4_t v120 = v103;
                float32x4_t v121 = v105;
                float32x4_t v122 = v111;
                float32x4_t v123 = v109;
                sub_1B6C890C8(v30++, (uint64_t)v113, v93, v95, v101, v107, v4, v5, v9, v13, v24, v25, v26, v27, v28, v29, v8, v7, v71,
                  v91,
                  v89,
                  v87,
                  v85);
                --v19;
              }
              while (v19);
            }
            else
            {
              if (v81 == v79)
              {
LABEL_17:
                uint64_t v3 = v83;
                char v12 = v72;
                goto LABEL_20;
              }
              uint64_t v31 = v79 - v81;
              float v32 = (float32x4_t *)(v23 + 16 * v81);
              uint64_t v3 = v83;
              char v12 = v72;
              do
              {
                v124[0] = 1;
                float32x4_t v125 = v93;
                float32x4_t v126 = v95;
                float32x4_t v127 = v101;
                float32x4_t v128 = v107;
                float32x4_t v129 = v97;
                float32x4_t v130 = v99;
                float32x4_t v131 = v103;
                float32x4_t v132 = v105;
                float32x4_t v133 = v111;
                float32x4_t v134 = v109;
                sub_1B6C890C8(v32++, (uint64_t)v124, v93, v95, v101, v107, v4, v5, v9, v13, v24, v25, v26, v27, v28, v29, v8, v7, v71,
                  v91,
                  v89,
                  v87,
                  v85);
                --v31;
              }
              while (v31);
            }
LABEL_20:
            sub_1B6345178(v10, (unsigned __int16 **)&v156, (uint64_t)v165);
            sub_1B634507C((char *)v18);
            uint64_t v11 = v76;
            ecs_stack_allocator_pop_snapshot(v76);
            if (v12)
            {
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 344));
              os_unfair_lock_unlock(*(os_unfair_lock_t *)(v18 + 376));
            }
            swift_release();
            if (++v14 == v78) {
              goto LABEL_44;
            }
          }
        }
      }
      goto LABEL_43;
    }
    goto LABEL_41;
  }
  v167.columns[0] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v150, v149.columns[0].f32[0]), v151, *(float32x2_t *)v149.columns[0].f32, 1), v152, (float32x4_t)v149.columns[0], 2), v153, (float32x4_t)v149.columns[0], 3);
  v167.columns[1] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v150, v149.columns[1].f32[0]), v151, *(float32x2_t *)v149.columns[1].f32, 1), v152, (float32x4_t)v149.columns[1], 2), v153, (float32x4_t)v149.columns[1], 3);
  v167.columns[2] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v150, v149.columns[2].f32[0]), v151, *(float32x2_t *)v149.columns[2].f32, 1), v152, (float32x4_t)v149.columns[2], 2), v153, (float32x4_t)v149.columns[2], 3);
  v167.columns[3] = (simd_float4)vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v150, v149.columns[3].f32[0]), v151, *(float32x2_t *)v149.columns[3].f32, 1), v152, (float32x4_t)v149.columns[3], 2), v153, (float32x4_t)v149.columns[3], 3);
  float32x4_t v94 = (float32x4_t)v167.columns[1];
  float32x4_t v96 = (float32x4_t)v167.columns[0];
  float32x4_t v90 = (float32x4_t)v167.columns[3];
  float32x4_t v92 = (float32x4_t)v167.columns[2];
  simd_float4x4 v168 = __invert_f4(v167);
  float32x4_t v86 = (float32x4_t)v168.columns[1];
  float32x4_t v88 = (float32x4_t)v168.columns[0];
  float32x4_t v80 = (float32x4_t)v168.columns[3];
  float32x4_t v82 = (float32x4_t)v168.columns[2];
  v168.columns[1] = *(simd_float4 *)(a1 + 104);
  long long v162 = *(_OWORD *)(a1 + 88);
  simd_float4 v163 = v168.columns[1];
  uint64_t v164 = *(void *)(a1 + 120);
  sub_1B6A6ED00(2, (uint64_t)&v136);
  long long v159 = v136;
  long long v160 = v137;
  uint64_t v161 = v138;
  sub_1B62C9DA8(v2, (uint64_t)&v159, 0x200000000, v139);
  sub_1B62CA210((uint64_t)v139, (uint64_t)&v140, (unint64_t *)&qword_1EB97DC50);
  if (!(void)v140)
  {
LABEL_41:
    sub_1B62CA064((uint64_t)&v136);
    return (uint64_t *)swift_release();
  }
  if (v147 > 0)
  {
    uint64_t v110 = v144;
    if (v144)
    {
      float32x2_t v33 = v146;
      uint64_t v34 = v146[4];
      char v35 = *(unsigned char *)(v145 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      long long v156 = v140;
      long long v157 = v141;
      uint64_t v108 = v143;
      uint64_t v158 = v142;
      uint64_t v106 = (uint64_t)(v146 + 6);
      long long v104 = v146 + 8;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v36 = 0;
      __asm { FMOV            V9.2S, #-1.0 }
      char v100 = v35;
      uint64_t v102 = v34;
      do
      {
        uint64_t v84 = v3;
        simd_float4x4 v42 = (unsigned int *)(v108 + 48 * v36);
        uint64_t v43 = *v42;
        uint64_t v112 = v42[1];
        float v45 = (uint64_t *)*((void *)v42 + 2);
        uint64_t v44 = *((void *)v42 + 3);
        uint64_t v47 = *((void *)v42 + 4);
        uint64_t v46 = *((void *)v42 + 5);
        if (v35)
        {
          float v48 = *(os_unfair_lock_s **)(v46 + 376);
          swift_retain_n();
          os_unfair_lock_lock(v48);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v46 + 344));
          swift_release();
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v34);
        sub_1B62CA210(v106, (uint64_t)v165, &qword_1EB97DE20);
        uint64_t v49 = v33[4];
        uint64_t v50 = *(void *)(*(void *)(*(void *)(*(void *)(v46 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        v33[6] = ecs_stack_allocator_allocate(v49, 48 * v50, 8);
        v33[7] = v50;
        v104[1] = 0;
        v104[2] = 0;
        *long long v104 = 0;
        swift_release();
        float32x4_t v51 = (float32x2_t *)sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, v45, v44, v47, (uint64_t)v33);
        if (v45)
        {
          if (v47)
          {
            v52.i32[3] = v98;
            do
            {
              __int32 v53 = v52.i32[3];
              float32x4_t v54 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, COERCE_FLOAT(*(_OWORD *)v51->f32)), v94, *v51, 1), v92, *(float32x4_t *)v51->f32, 2), v90, *(float32x4_t *)v51->f32, 3);
              *(float32x2_t *)v55.f32 = vadd_f32(vmul_f32(*(float32x2_t *)v54.f32, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000);
              v55.i64[1] = vextq_s8((int8x16_t)v54, (int8x16_t)v54, 8uLL).u64[0];
              float32x4_t v56 = v55;
              v56.i32[3] = 0;
              float32x4_t v57 = vsubq_f32(v55, vrndmq_f32(v56));
              v57.i32[3] = 0;
              float32x4_t v58 = vminnmq_f32(v57, (float32x4_t)xmmword_1B6E4F480);
              *(float32x2_t *)v56.f32 = vadd_f32(vadd_f32(*(float32x2_t *)v58.f32, *(float32x2_t *)v58.f32), _D9);
              float32x4_t v52 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v88, v56.f32[0]), v86, *(float32x2_t *)v56.f32, 1), v82, v58, 2), v80, v54, 3);
              v52.i32[3] = v53;
              float32x4_t v59 = v52;
              v59.i32[3] = 1.0;
              *(float32x4_t *)v51->f32 = v59;
              v51 += 2;
              --v47;
            }
            while (v47);
            __int32 v98 = v52.i32[3];
          }
        }
        else if (v43 != v112)
        {
          uint64_t v60 = v112 - v43;
          float32x4_t v61 = &v51[2 * v43];
          v62.i32[3] = v77;
          do
          {
            __int32 v63 = v62.i32[3];
            float32x4_t v64 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v96, COERCE_FLOAT(*(_OWORD *)v61->f32)), v94, *v61, 1), v92, *(float32x4_t *)v61->f32, 2), v90, *(float32x4_t *)v61->f32, 3);
            *(float32x2_t *)v65.f32 = vadd_f32(vmul_f32(*(float32x2_t *)v64.f32, (float32x2_t)0x3F0000003F000000), (float32x2_t)0x3F0000003F000000);
            v65.i64[1] = vextq_s8((int8x16_t)v64, (int8x16_t)v64, 8uLL).u64[0];
            float32x4_t v66 = v65;
            v66.i32[3] = 0;
            float32x4_t v67 = vsubq_f32(v65, vrndmq_f32(v66));
            v67.i32[3] = 0;
            float32x4_t v68 = vminnmq_f32(v67, (float32x4_t)xmmword_1B6E4F480);
            *(float32x2_t *)v66.f32 = vadd_f32(vadd_f32(*(float32x2_t *)v68.f32, *(float32x2_t *)v68.f32), _D9);
            float32x4_t v62 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v88, v66.f32[0]), v86, *(float32x2_t *)v66.f32, 1), v82, v68, 2), v80, v64, 3);
            v62.i32[3] = v63;
            float32x4_t v69 = v62;
            v69.i32[3] = 1.0;
            *(float32x4_t *)v61->f32 = v69;
            v61 += 2;
            --v60;
          }
          while (v60);
          __int32 v77 = v62.i32[3];
        }
        uint64_t v3 = v84;
        uint64_t v34 = v102;
        char v35 = v100;
        sub_1B6345178(v33, (unsigned __int16 **)&v156, (uint64_t)v165);
        sub_1B634507C((char *)v46);
        ecs_stack_allocator_pop_snapshot(v102);
        if (v100)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v46 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v46 + 376));
        }
        swift_release();
        ++v36;
      }
      while (v36 != v110);
LABEL_44:
      sub_1B62CA064((uint64_t)&v136);
      goto LABEL_45;
    }
  }
LABEL_43:
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1B62CA064((uint64_t)&v136);
LABEL_45:
  swift_release();
  sub_1B632F170(v139);
  return sub_1B632F170(v139);
}

uint64_t sub_1B6C89B94(uint64_t a1, uint64_t a2)
{
  sub_1B6C89BF8(0, a2);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32))(a2, a1, v4);
  return a2;
}

void sub_1B6C89BF8(uint64_t a1, uint64_t a2)
{
  if (!qword_1E9DD8010)
  {
    sub_1B6C89C50(255, a2);
    unint64_t v2 = sub_1B6E324B8();
    if (!v3) {
      atomic_store(v2, (unint64_t *)&qword_1E9DD8010);
    }
  }
}

void sub_1B6C89C50(uint64_t a1, uint64_t a2)
{
  if (!qword_1E9DD8018)
  {
    MEMORY[0x1F4188790](0, a2);
    type metadata accessor for simd_float4x4(255);
    sub_1B6C8A26C(255, (unint64_t *)&qword_1EB980EB0, (uint64_t (*)(void))sub_1B6645830, MEMORY[0x1E4FBB470], MEMORY[0x1E4FBC2A8]);
    unint64_t TupleTypeMetadata = swift_getTupleTypeMetadata();
    if (!v3) {
      atomic_store(TupleTypeMetadata, (unint64_t *)&qword_1E9DD8018);
    }
  }
}

uint64_t sub_1B6C89DA8(unsigned __int8 *a1)
{
  unsigned int v1 = *a1;
  BOOL v2 = v1 >= 2;
  int v3 = (v1 + 2147483646) & 0x7FFFFFFF;
  if (v2) {
    return (v3 + 1);
  }
  else {
    return 0;
  }
}

double sub_1B6C89DC4(uint64_t a1)
{
  *(void *)a1 = 2;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(void *)(a1 + 168) = 0;
  return result;
}

uint64_t sub_1B6C89E00@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v32 = a2;
  sub_1B6C8A26C(0, &qword_1E9DD8020, (uint64_t (*)(void))sub_1B6C8A218, (uint64_t)&type metadata for WrapAroundCamera.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  float v9 = (char *)&v31 - v8;
  char v36 = 1;
  float v10 = a1;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C8A218();
  sub_1B6E33A48();
  if (v2) {
    return _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  }
  uint64_t v11 = v6;
  uint64_t v12 = v32;
  LOBYTE(v33) = 0;
  sub_1B6E32DC8();
  int v14 = v13;
  LOBYTE(v33) = 1;
  sub_1B6E32DC8();
  int v16 = v15;
  LOBYTE(v33) = 2;
  sub_1B6E32DC8();
  int v18 = v17;
  LOBYTE(v33) = 3;
  sub_1B6E32DC8();
  int v20 = v19;
  LOBYTE(v33) = 4;
  sub_1B6E32DC8();
  int v22 = v21;
  LOBYTE(v33) = 5;
  sub_1B6E32DC8();
  int v24 = v23;
  LOBYTE(v33) = 6;
  char v25 = sub_1B6E32DA8();
  LOBYTE(v33) = 7;
  int v35 = sub_1B6E32DA8();
  uint64_t v27 = v10[3];
  uint64_t v28 = v10[4];
  sub_1B62C14BC(v10, v27);
  if (sub_1B62B8F14(1084, v27, v28))
  {
    sub_1B62D82E0(0, &qword_1E9DD8030);
    char v37 = 8;
    sub_1B6C8A2D4(&qword_1E9DD8038, (void (*)(void))sub_1B62B1EA8);
    sub_1B6E32DF8();
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v5);
    uint64_t v29 = v33;
    char v30 = v34;
  }
  else
  {
    (*(void (**)(char *, uint64_t))(v11 + 8))(v9, v5);
    uint64_t v29 = 0;
    char v30 = v36;
  }
  uint64_t result = _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v10);
  *(_DWORD *)uint64_t v12 = v14;
  *(_DWORD *)(v12 + 4) = v16;
  *(_DWORD *)(v12 + 8) = v18;
  *(_DWORD *)(v12 + 12) = v20;
  *(_DWORD *)(v12 + 16) = v22;
  *(_DWORD *)(v12 + 20) = v24;
  *(unsigned char *)(v12 + 24) = v25 & 1;
  *(unsigned char *)(v12 + 25) = v35 & 1;
  *(void *)(v12 + 28) = v29;
  *(unsigned char *)(v12 + 36) = v30;
  return result;
}

unint64_t sub_1B6C8A218()
{
  unint64_t result = qword_1E9DD8028;
  if (!qword_1E9DD8028)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8028);
  }
  return result;
}

void sub_1B6C8A26C(uint64_t a1, unint64_t *a2, uint64_t (*a3)(void), uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  if (!*a2)
  {
    uint64_t v9 = a3();
    unint64_t v10 = a5(a1, a4, v9);
    if (!v11) {
      atomic_store(v10, a2);
    }
  }
}

uint64_t sub_1B6C8A2D4(unint64_t *a1, void (*a2)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    sub_1B62D82E0(255, &qword_1E9DD8030);
    a2();
    uint64_t result = swift_getWitnessTable();
    atomic_store(result, a1);
  }
  return result;
}

unsigned char *storeEnumTagSinglePayload for WrapAroundCamera.CodingKeys(unsigned char *result, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    unsigned int v4 = 1;
  }
  else {
    unsigned int v4 = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v5 = v4;
  }
  else {
    uint64_t v5 = 0;
  }
  if (a2 > 0xF7)
  {
    unsigned int v6 = ((a2 - 248) >> 8) + 1;
    *uint64_t result = a2 + 8;
    switch(v5)
    {
      case 1:
        result[1] = v6;
        break;
      case 2:
        *(_WORD *)(result + 1) = v6;
        break;
      case 3:
LABEL_23:
        __break(1u);
        JUMPOUT(0x1B6C8A41CLL);
      case 4:
        *(_DWORD *)(result + 1) = v6;
        break;
      default:
        return result;
    }
  }
  else
  {
    switch(v5)
    {
      case 1:
        result[1] = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      case 2:
        *(_WORD *)(result + 1) = 0;
        goto LABEL_17;
      case 3:
        goto LABEL_23;
      case 4:
        *(_DWORD *)(result + 1) = 0;
        if (!a2) {
          return result;
        }
        goto LABEL_18;
      default:
LABEL_17:
        if (a2) {
LABEL_18:
        }
          *uint64_t result = a2 + 8;
        break;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WrapAroundCamera.CodingKeys()
{
  return &type metadata for WrapAroundCamera.CodingKeys;
}

uint64_t getEnumTagSinglePayload for WrapAroundCamera(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFF && *(unsigned char *)(a1 + 37)) {
    return (*(_DWORD *)a1 + 255);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 2;
  int v5 = (v3 + 2147483646) & 0x7FFFFFFF;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for WrapAroundCamera(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFE)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(unsigned char *)(result + 36) = 0;
    *(_DWORD *)(result + 32) = 0;
    *(void *)uint64_t result = a2 - 255;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 37) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFF) {
      *(unsigned char *)(result + 37) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 24) = a2 + 1;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for WrapAroundCamera()
{
  return &type metadata for WrapAroundCamera;
}

unint64_t sub_1B6C8A508()
{
  unint64_t result = qword_1E9DD8050;
  if (!qword_1E9DD8050)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8050);
  }
  return result;
}

unint64_t sub_1B6C8A560()
{
  unint64_t result = qword_1E9DD8058;
  if (!qword_1E9DD8058)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8058);
  }
  return result;
}

unint64_t sub_1B6C8A5B8()
{
  unint64_t result = qword_1E9DD8060;
  if (!qword_1E9DD8060)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8060);
  }
  return result;
}

uint64_t sub_1B6C8A60C()
{
  sub_1B664D9F0(v0, (uint64_t)v3);
  uint64_t v1 = MEMORY[0x1BA9B8670](v3);
  sub_1B66490B8((uint64_t)v3);
  if (v1)
  {
    self;
    uint64_t result = swift_dynamicCastObjCClass();
    if (result) {
      return result;
    }
    swift_unknownObjectRelease();
  }
  return 0;
}

void sub_1B6C8A67C(void *a1)
{
  if (a1)
  {
    swift_unknownObjectWeakInit();
    uint64_t v9 = &off_1F0FAFAB8;
    swift_unknownObjectWeakAssign();
    id v3 = a1;
    id v4 = objc_msgSend(v3, sel_identifier);
    uint64_t v5 = sub_1B6E31798();
    unint64_t v7 = v6;

    uint64_t v10 = v5;
    unint64_t v11 = v7;
    sub_1B66490B8(v1);
    sub_1B6649008((uint64_t)&v8, v1);
  }
  else
  {
    swift_unknownObjectWeakInit();
    uint64_t v9 = 0;
    swift_unknownObjectWeakAssign();
    uint64_t v10 = 0x3E6C6C756E3CLL;
    unint64_t v11 = 0xE600000000000000;
    sub_1B66490B8(v1);
    sub_1B6649008((uint64_t)&v8, v1);
  }
}

uint64_t sub_1B6C8A77C(uint64_t a1, float a2)
{
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 < 2) {
    return 0;
  }
  uint64_t v4 = v2 - 1;
  if (v2 != 2)
  {
    uint64_t v5 = 0;
    uint64_t result = v4;
    while (1)
    {
      uint64_t v7 = v5 + v4 / 2;
      if (*(float *)(a1 + 32 + 4 * v7) <= a2) {
        uint64_t v5 = v7;
      }
      else {
        uint64_t result = v7;
      }
      uint64_t v4 = result - v5;
      if (result <= v5) {
        return 0;
      }
      if (v4 == 1) {
        goto LABEL_10;
      }
    }
  }
  uint64_t v5 = 0;
  uint64_t result = 1;
LABEL_10:
  uint64_t v8 = a1 + 32;
  if (*(float *)(v8 + 4 * result) >= a2)
  {
    if (*(float *)(v8 + 4 * v5) <= a2) {
      return v5;
    }
    else {
      return 0;
    }
  }
  return result;
}

uint64_t sub_1B6C8A814(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 - 1;
  if (unint64_t)(a2 - 1) < 0x35 && ((0x1FF1FFFFFFFFFFuLL >> v2))
  {
    id v3 = sub_1B68007AC(qword_1B6EBEEC8[v2] * a1, 0);
    if (!v3)
    {
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      swift_retain();
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      v6[1] = 0x80000001B6F50460;
      sub_1B6E31948();
      sub_1B6E31948();
      sub_1B6E33098();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      int v4 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      v6[0] = 0;
      swift_retain();
      sub_1B6B33E34(v4, v6, 0xD000000000000010, 0x80000001B6F50460);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
    }
    return (uint64_t)v3;
  }
  else
  {
    uint64_t result = sub_1B6E32BE8();
    __break(1u);
  }
  return result;
}

char *sub_1B6C8AA54(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 28 || objc_msgSend(a1, sel_storageMode) == (id)2) {
    return 0;
  }
  uint64_t v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v8 = a1;
  return &v7[a2];
}

char *sub_1B6C8AAF4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 29 || objc_msgSend(a1, sel_storageMode) == (id)2) {
    return 0;
  }
  uint64_t v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v8 = a1;
  return &v7[a2];
}

char *sub_1B6C8AB94(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 30 || objc_msgSend(a1, sel_storageMode) == (id)2) {
    return 0;
  }
  uint64_t v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v8 = a1;
  return &v7[a2];
}

char *sub_1B6C8AC3C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 31 || objc_msgSend(a1, sel_storageMode) == (id)2) {
    return 0;
  }
  uint64_t v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v8 = a1;
  return &v7[a2];
}

char *sub_1B6C8ACDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 45 || objc_msgSend(a1, sel_storageMode) == (id)2) {
    return 0;
  }
  uint64_t v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v8 = a1;
  return &v7[a2];
}

char *sub_1B6C8AD70(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a4 != 18 || objc_msgSend(a1, sel_storageMode) == (id)2) {
    return 0;
  }
  uint64_t v7 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
  id v8 = a1;
  return &v7[a2];
}

uint64_t sub_1B6C8AE10(unsigned __int8 *a1, char *a2)
{
  return sub_1B6B47D14(*a1, *a2);
}

uint64_t sub_1B6C8AE1C()
{
  return sub_1B69EB3CC();
}

uint64_t sub_1B6C8AE28()
{
  return sub_1B69E9B74();
}

uint64_t sub_1B6C8AE30()
{
  return sub_1B69EB3CC();
}

uint64_t sub_1B6C8AE38@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C9CA5C();
  *a1 = result;
  return result;
}

void sub_1B6C8AE68(uint64_t a1@<X8>)
{
  uint64_t v2 = 0x6E6F697469736F70;
  switch(*v1)
  {
    case 1:
      uint64_t v2 = 0x797469636F6C6576;
      goto LABEL_3;
    case 2:
      *(void *)a1 = 0x6C616D726F6ELL;
      *(void *)(a1 + 8) = 0xE600000000000000;
      break;
    case 3:
      *(void *)a1 = 0x7461746E6569726FLL;
      *(void *)(a1 + 8) = 0xEB000000006E6F69;
      break;
    case 4:
      *(void *)a1 = 0x726F6C6F63;
      *(void *)(a1 + 8) = 0xE500000000000000;
      break;
    case 5:
      *(void *)a1 = 1702521203;
      *(void *)(a1 + 8) = 0xE400000000000000;
      break;
    case 6:
      strcpy((char *)a1, "jointIndices");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 7:
      strcpy((char *)a1, "jointWeights");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    default:
LABEL_3:
      *(void *)a1 = v2;
      *(void *)(a1 + 8) = 0xE800000000000000;
      break;
  }
}

void sub_1B6C8AF88(void *a1@<X8>)
{
  *a1 = &unk_1F0F79E38;
}

uint64_t sub_1B6C8AF98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a1)
  {
    swift_unknownObjectRetain();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
    uint64_t v15 = *v6;
    *unint64_t v6 = 0x8000000000000000;
    sub_1B67E9180(a1, a2, a3, a4, a5, a6, isUniquelyReferenced_nonNull_native);
    *unint64_t v6 = v15;
    swift_unknownObjectRelease();
    return swift_bridgeObjectRelease();
  }
  else
  {
    sub_1B67E381C(a5, a6);
    return swift_unknownObjectRelease();
  }
}

void *sub_1B6C8B098@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1B67DDA3C(MEMORY[0x1E4FBC860]);
  *a1 = result;
  a1[1] = 0x636143746E696F50;
  a1[2] = 0xEA00000000006568;
  a1[3] = 0;
  return result;
}

uint64_t sub_1B6C8B0E4()
{
  return sub_1B6E31BC8();
}

uint64_t sub_1B6C8B144()
{
  return sub_1B6E31B28();
}

void sub_1B6C8B194(void *a1@<X8>)
{
  *a1 = &unk_1F0F534B0;
}

uint64_t sub_1B6C8B1A4(__int16 a1)
{
  if (a1)
  {
    sub_1B6E31948();
    if ((a1 & 2) == 0)
    {
LABEL_3:
      if ((a1 & 4) == 0) {
        goto LABEL_4;
      }
      goto LABEL_11;
    }
  }
  else if ((a1 & 2) == 0)
  {
    goto LABEL_3;
  }
  sub_1B6E31948();
  if ((a1 & 4) == 0)
  {
LABEL_4:
    if ((a1 & 8) == 0) {
      goto LABEL_5;
    }
    goto LABEL_12;
  }
LABEL_11:
  sub_1B6E31948();
  if ((a1 & 8) == 0)
  {
LABEL_5:
    if ((a1 & 0x10) == 0) {
      goto LABEL_6;
    }
LABEL_13:
    sub_1B6E31948();
    if ((a1 & 0x400) == 0) {
      goto LABEL_8;
    }
    goto LABEL_7;
  }
LABEL_12:
  sub_1B6E31948();
  if ((a1 & 0x10) != 0) {
    goto LABEL_13;
  }
LABEL_6:
  if ((a1 & 0x400) != 0) {
LABEL_7:
  }
    sub_1B6E31948();
LABEL_8:
  uint64_t v2 = sub_1B6D48258();
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  uint64_t v8 = v7;
  swift_bridgeObjectRelease();
  uint64_t v9 = MEMORY[0x1BA9B34C0](v2, v4, v6, v8);
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1B6C8B310()
{
  return sub_1B6E31BE8();
}

uint64_t sub_1B6C8B370()
{
  return sub_1B6E31B48();
}

uint64_t sub_1B6C8B3C0()
{
  return sub_1B6C8B1A4(*v0);
}

double sub_1B6C8B3C8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)&long long v6 = 0;
  *((void *)&v6 + 1) = 0xE000000000000000;
  sub_1B628F3F4(a1);
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  if (v2)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }
  else
  {
    double result = *(double *)&v6;
    *(_OWORD *)a2 = v6;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0xE000000000000000;
    *(_OWORD *)(a2 + 32) = 0uLL;
  }
  return result;
}

uint64_t sub_1B6C8B45C()
{
  return sub_1B681573C();
}

uint64_t sub_1B6C8B478()
{
  return sub_1B6E318B8();
}

uint64_t sub_1B6C8B494()
{
  return sub_1B681578C();
}

uint64_t sub_1B6C8B4B0@<X0>(BOOL *a1@<X8>)
{
  return sub_1B68157E4(a1);
}

void sub_1B6C8B4BC(void *a1@<X8>)
{
  *a1 = 0x636E657265666572;
  a1[1] = 0xE900000000000065;
}

uint64_t sub_1B6C8B4DC()
{
  return 0x636E657265666572;
}

uint64_t sub_1B6C8B4F8@<X0>(BOOL *a1@<X8>)
{
  return sub_1B6815840(a1);
}

uint64_t sub_1B6C8B504(uint64_t a1)
{
  unint64_t v2 = sub_1B6C9B10C();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C8B540(uint64_t a1)
{
  unint64_t v2 = sub_1B6C9B10C();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C8B57C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  int v18 = a2;
  sub_1B63965F4(0, &qword_1E9DD8090, (uint64_t (*)(void))sub_1B6C9B10C, (uint64_t)&type metadata for PointCacheFromModel.CodingKeys, MEMORY[0x1E4FBBDC0]);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 - 8);
  MEMORY[0x1F4188790](v4, v7);
  uint64_t v9 = &v13[-v8];
  uint64_t v14 = 0;
  swift_unknownObjectWeakInit();
  uint64_t v14 = 0;
  uint64_t v10 = swift_unknownObjectWeakAssign();
  uint64_t v15 = 0x3E6C6C756E3CLL;
  unint64_t v16 = 0xE600000000000000;
  sub_1B6649008(v10, (uint64_t)v17);
  _DWORD v17[4] = 0;
  v17[5] = 0xE000000000000000;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C9B10C();
  sub_1B6E33A48();
  if (!v2)
  {
    unint64_t v11 = v18;
    sub_1B6648FB4();
    sub_1B6E32DF8();
    (*(void (**)(unsigned char *, uint64_t))(v6 + 8))(v9, v5);
    sub_1B69CBCE8((uint64_t)v13, (uint64_t)v17);
    sub_1B6C9B160(v17, v11);
  }
  _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)a1);
  return sub_1B6B45FB8((uint64_t)v17);
}

uint64_t sub_1B6C8B794@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1B6C8B57C(a1, a2);
}

uint64_t sub_1B6C8B7AC(void *a1)
{
  sub_1B63965F4(0, &qword_1E9DD80A0, (uint64_t (*)(void))sub_1B6C9B10C, (uint64_t)&type metadata for PointCacheFromModel.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  uint64_t v7 = (char *)&v9 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C9B10C();
  sub_1B6E33A88();
  sub_1B6649174();
  sub_1B6E32FA8();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

uint64_t sub_1B6C8B920@<X0>(uint64_t a1@<X8>)
{
  swift_unknownObjectWeakInit();
  v3[1] = 0;
  swift_unknownObjectWeakAssign();
  _OWORD v3[2] = 0x3E6C6C756E3CLL;
  v3[3] = 0xE600000000000000;
  uint64_t result = sub_1B6649008((uint64_t)v3, a1);
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0xE000000000000000;
  return result;
}

uint64_t sub_1B6C8B990@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1B6C9B434(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(unsigned char *)(a2 + 16) = v6;
    *(_WORD *)(a2 + 18) = v7;
    *(void *)(a2 + 24) = v8;
  }
  return result;
}

uint64_t sub_1B6C8B9D4(void *a1)
{
  return sub_1B6C8BA00(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 16) | (*(unsigned __int16 *)(v1 + 18) << 16), *(void *)(v1 + 24));
}

uint64_t sub_1B6C8BA00(void *a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  uint64_t v17 = a5;
  uint64_t v18 = a3;
  HIDWORD(v16) = a4;
  sub_1B63965F4(0, &qword_1E9DD80C0, (uint64_t (*)(void))sub_1B6C9B6F0, (uint64_t)&type metadata for PointCacheGenerator.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v9 = v8;
  uint64_t v10 = *(void *)(v8 - 8);
  MEMORY[0x1F4188790](v8, v11);
  int v13 = (char *)&v16 - v12;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C9B6F0();
  sub_1B6E33A88();
  uint64_t v20 = a2;
  char v19 = 0;
  sub_1B6657A10();
  sub_1B6E32FA8();
  if (!v5)
  {
    int v14 = HIDWORD(v16);
    LOBYTE(v20) = 1;
    sub_1B6E32F88();
    LOBYTE(v20) = v14;
    char v19 = 2;
    sub_1B66C51AC();
    sub_1B6E32FA8();
    LOWORD(v20) = HIWORD(v14);
    char v19 = 3;
    sub_1B6C9B798();
    sub_1B6E32FA8();
    LOBYTE(v20) = 4;
    sub_1B6E33028();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
}

double sub_1B6C8BC5C@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)a1 = 0xFFFFFFFFLL;
  *(void *)(a1 + 8) = 1000;
  *(unsigned char *)(a1 + 16) = 2;
  *(_WORD *)(a1 + 18) = 23;
  *(void *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1B6C8BC84()
{
  return sub_1B681573C();
}

uint64_t sub_1B6C8BCA0()
{
  return sub_1B6E318B8();
}

uint64_t sub_1B6C8BCBC()
{
  return sub_1B681578C();
}

uint64_t sub_1B6C8BCD8@<X0>(BOOL *a1@<X8>)
{
  return sub_1B68157E4(a1);
}

void sub_1B6C8BCE4(void *a1@<X8>)
{
  *a1 = 0x7461507465737361;
  a1[1] = 0xE900000000000068;
}

uint64_t sub_1B6C8BD04()
{
  return 0x7461507465737361;
}

uint64_t sub_1B6C8BD20@<X0>(BOOL *a1@<X8>)
{
  return sub_1B6815840(a1);
}

uint64_t sub_1B6C8BD2C(uint64_t a1)
{
  unint64_t v2 = sub_1B6C9B9B8();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C8BD68(uint64_t a1)
{
  unint64_t v2 = sub_1B6C9B9B8();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C8BDA4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1B6C9B7EC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }
  return result;
}

uint64_t sub_1B6C8BDD4(void *a1)
{
  sub_1B63965F4(0, &qword_1E9DD80E0, (uint64_t (*)(void))sub_1B6C9B9B8, (uint64_t)&type metadata for REMeshAssetPointCache.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v3 = v2;
  uint64_t v4 = *(void *)(v2 - 8);
  MEMORY[0x1F4188790](v2, v5);
  __int16 v7 = (char *)&v9 - v6;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C9B9B8();
  sub_1B6E33A88();
  sub_1B6E32F48();
  return (*(uint64_t (**)(char *, uint64_t))(v4 + 8))(v7, v3);
}

void *sub_1B6C8BF3C@<X0>(void *a1@<X8>)
{
  uint64_t result = sub_1B67DDCA0(MEMORY[0x1E4FBC860]);
  *a1 = 0;
  a1[1] = 0xE000000000000000;
  a1[2] = result;
  return result;
}

uint64_t *sub_1B6C8BF74(uint64_t a1)
{
  long long v3 = *(_OWORD *)(v1 + 32);
  v110[0] = *(_OWORD *)(v1 + 16);
  v110[1] = v3;
  uint64_t v111 = *(void *)(v1 + 48);
  sub_1B62C9DA8(a1, (uint64_t)v110, 0x200000000, v12);
  sub_1B62D7FE8((uint64_t)v12, (uint64_t)&v49, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (v49)
  {
    uint64_t v99 = v49;
    int v100 = v50;
    char v101 = v51;
    uint64_t v102 = v52;
    char v103 = v53;
    uint64_t v104 = v54;
    uint64_t v105 = v55;
    long long v106 = v56;
    long long v107 = v57;
    uint64_t v108 = v58;
    uint64_t v109 = v59;
    swift_retain();
    sub_1B6D9E540((uint64_t)&v99, a1);
    swift_release();
    sub_1B632F170(v12);
  }
  long long v4 = *(_OWORD *)(v1 + 112);
  v97[0] = *(_OWORD *)(v1 + 96);
  v97[1] = v4;
  uint64_t v98 = *(void *)(v1 + 128);
  sub_1B62C9DA8(a1, (uint64_t)v97, 0x200000000, v13);
  sub_1B62D7FE8((uint64_t)v13, (uint64_t)&v38, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (v38)
  {
    uint64_t v86 = v38;
    int v87 = v39;
    char v88 = v40;
    uint64_t v89 = v41;
    char v90 = v42;
    uint64_t v91 = v43;
    uint64_t v92 = v44;
    long long v93 = v45;
    long long v94 = v46;
    uint64_t v95 = v47;
    uint64_t v96 = v48;
    swift_retain();
    sub_1B6D9ED0C((uint64_t)&v86, a1);
    swift_release();
    sub_1B632F170(v13);
  }
  uint64_t v5 = (void *)MEMORY[0x1BA9B8670](a1 + 56);
  if (v5)
  {
    uint64_t v6 = v5;
    if (objc_msgSend(v5, sel_respondsToSelector_, sel_resourceManager))
    {
      id v7 = objc_msgSend(v6, sel_resourceManager);
      swift_unknownObjectRelease();
      long long v8 = *(_OWORD *)(v1 + 72);
      v84[0] = *(_OWORD *)(v1 + 56);
      v84[1] = v8;
      uint64_t v85 = *(void *)(v1 + 88);
      sub_1B62C9DA8(a1, (uint64_t)v84, 0x200000000, v14);
      sub_1B62D7FE8((uint64_t)v14, (uint64_t)&v27, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
      if (v27)
      {
        uint64_t v73 = v27;
        int v74 = v28;
        char v75 = v29;
        uint64_t v76 = v30;
        char v77 = v31;
        uint64_t v78 = v32;
        uint64_t v79 = v33;
        long long v80 = v34;
        long long v81 = v35;
        uint64_t v82 = v36;
        uint64_t v83 = v37;
        id v9 = v7;
        sub_1B6D9EFFC((uint64_t)&v73, v9);

        sub_1B632F170(v14);
      }
      else
      {
      }
    }
    else
    {
      swift_unknownObjectRelease();
    }
  }
  long long v10 = *(_OWORD *)(v1 + 152);
  v71[0] = *(_OWORD *)(v1 + 136);
  v71[1] = v10;
  uint64_t v72 = *(void *)(v1 + 168);
  sub_1B62C9DA8(a1, (uint64_t)v71, 0x200000000, v15);
  uint64_t result = (uint64_t *)sub_1B62D7FE8((uint64_t)v15, (uint64_t)&v16, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (v16)
  {
    uint64_t v60 = v16;
    int v61 = v17;
    char v62 = v18;
    uint64_t v63 = v19;
    char v64 = v20;
    uint64_t v65 = v21;
    uint64_t v66 = v22;
    long long v67 = v23;
    long long v68 = v24;
    uint64_t v69 = v25;
    uint64_t v70 = v26;
    sub_1B6D86A78((uint64_t)&v60);
    return sub_1B632F170(v15);
  }
  return result;
}

uint64_t sub_1B6C8C2EC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, char a5, __int16 a6, uint64_t a7)
{
  uint64_t v249 = *MEMORY[0x1E4F143B8];
  if (*(void *)(v7 + OBJC_IVAR____TtC3VFX13EntityManager_renderer)) {
    BOOL v8 = a4 < 1;
  }
  else {
    BOOL v8 = 1;
  }
  if (!v8)
  {
    if (!a2)
    {
      sub_1B6C99034();
      swift_allocError();
      *uint64_t v26 = 0;
      return swift_willThrow();
    }
    uint64_t v10 = v7;
    uint64_t v13 = result;
    *(void *)(result + 24) = a4;
    unint64_t v226 = a7 + 0x76E15D3EFEFDCBBFLL;
    unint64_t v227 = 0xC5004E441C522FB3 * a7 - 0x3AFFB1BBE3ADD04DLL;
    unint64_t v228 = 0x77710069854EE241 - a7;
    uint64_t v229 = 0x39109BB02ACBE635 * a7;
    swift_retain();
    swift_retain();
    char v220 = a5;
    __int16 v221 = a6;
    if (a6)
    {
      uint64_t v15 = sub_1B6C8A814(a4, 30);
      sub_1B6C8AF98(v15, v16, v17, v18, 0x6E6F697469736F70, 0xE800000000000000);
    }
    if ((a6 & 2) != 0)
    {
      uint64_t v19 = sub_1B6C8A814(a4, 30);
      sub_1B6C8AF98(v19, v20, v21, v22, 0x6C616D726F6ELL, 0xE600000000000000);
    }
    if ((a6 & 4) != 0)
    {
      uint64_t v27 = sub_1B6C8A814(a4, 31);
      long long v23 = (uint64_t *)v13;
      sub_1B6C8AF98(v27, v28, v29, v30, 0x726F6C6F63, 0xE500000000000000);
      uint64_t v24 = sub_1B6C97D9C(a3);
      char v25 = v31 & 1;
    }
    else
    {
      long long v23 = (uint64_t *)v13;
      uint64_t v24 = 0;
      char v25 = 1;
    }
    if ((a6 & 0x10) != 0)
    {
      uint64_t v32 = *(void *)(a2 + 24);
      if (v32)
      {
        if (*(_WORD *)(v32 + 172))
        {
          uint64_t v224 = v24;
          uint64_t v33 = sub_1B68007AC(8 * a4, 0);
          if (v33)
          {
            uint64_t v36 = (uint64_t)v33;
            uint64_t v37 = v34;
            uint64_t v38 = v35;
            swift_unknownObjectRetain();
            char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v236 = *v23;
            *long long v23 = 0x8000000000000000;
            sub_1B67E9180(v36, v37, v38, 18, 0x646E49746E696F6ALL, 0xEC00000073656369, isUniquelyReferenced_nonNull_native);
            *long long v23 = v236;
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            if (qword_1EB9852D0 != -1) {
              swift_once();
            }
            swift_retain();
            sub_1B6E328C8();
            swift_bridgeObjectRelease();
            unint64_t v237 = 0x80000001B6F50530;
            sub_1B6E33098();
            sub_1B6E31948();
            swift_bridgeObjectRelease();
            int v40 = sub_1B6E32148();
            if (qword_1EB9854F8 != -1) {
              swift_once();
            }
            uint64_t v236 = 0;
            swift_retain();
            sub_1B6B33E34(v40, &v236, 0xD000000000000036, 0x80000001B6F50530);
            swift_release();
            swift_bridgeObjectRelease();
            swift_release();
            sub_1B67E381C(0x646E49746E696F6ALL, 0xEC00000073656369);
            swift_unknownObjectRelease();
          }
          uint64_t v41 = sub_1B6C8A814(a4, 31);
          if (v41)
          {
            uint64_t v45 = v41;
            uint64_t v46 = v42;
            uint64_t v47 = v43;
            uint64_t v48 = v44;
            swift_unknownObjectRetain();
            char v49 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v236 = *v23;
            *long long v23 = 0x8000000000000000;
            sub_1B67E9180(v45, v46, v47, v48, 0x696557746E696F6ALL, 0xEC00000073746867, v49);
            *long long v23 = v236;
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            sub_1B67E381C(0x696557746E696F6ALL, 0xEC00000073746867);
            swift_unknownObjectRelease();
          }
          uint64_t v24 = v224;
        }
      }
    }
    int v50 = (void *)swift_retain();
    sub_1B6C98054(v50, &v230);
    swift_release();
    uint64_t v208 = v230;
    unint64_t v51 = *(void *)(v230 + 16);
    unint64_t v211 = *(void *)(v234 + 16);
    uint64_t v52 = swift_allocObject();
    *(_OWORD *)(v52 + 16) = 0u;
    uint64_t v53 = v52 + 16;
    *(_OWORD *)(v52 + 32) = 0u;
    *(void *)(v52 + 48) = 0;
    uint64_t v219 = v52;
    *(_OWORD *)(v52 + 56) = xmmword_1B6E50D30;
    if (v25 & 1) == 0 && (sub_1B631EA84(v24))
    {
      sub_1B6CEE8E8(v24, &v243);
      sub_1B62D7FE8((uint64_t)&v243, (uint64_t)v245, (unint64_t *)&unk_1EB97EFD0, (uint64_t)&type metadata for TextureCPURuntime);
      if (v246)
      {
        v247[4] = v245[4];
        v247[5] = v245[5];
        v247[6] = v245[6];
        uint64_t v248 = v246;
        v247[0] = v245[0];
        v247[1] = v245[1];
        _OWORD v247[2] = v245[2];
        v247[3] = v245[3];
        sub_1B6AFEFC8((uint64_t)v247, 1, 1, (uint64_t)v244);
        unint64_t v202 = v244[1];
        uint64_t v203 = v244[0];
        uint64_t v200 = v244[3];
        uint64_t v201 = v244[2];
        uint64_t v54 = v244[5];
        uint64_t v198 = v244[6];
        uint64_t v199 = v244[4];
        sub_1B66576EC(v243.i64);
        sub_1B62D0468((uint64_t)v244, v53, (unint64_t *)&qword_1E9DD6DC0, (uint64_t (*)(uint64_t))type metadata accessor for __vfx_sampler2d);
        goto LABEL_34;
      }
      uint64_t v55 = *(void *)(v10 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
      uint64_t v236 = 0;
      unint64_t v237 = 0xE000000000000000;
      swift_retain();
      sub_1B6E328C8();
      sub_1B6E31948();
      sub_1B6C0A280(v24);
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      uint64_t v56 = v236;
      unint64_t v57 = v237;
      uint64_t v58 = sub_1B6E32148();
      uint64_t v236 = 0;
      (*(void (**)(uint64_t, uint64_t *, uint64_t, unint64_t))(*(void *)v55 + 88))(v58, &v236, v56, v57);
      swift_release();
      swift_bridgeObjectRelease();
    }
    unint64_t v202 = 0;
    uint64_t v203 = 0;
    uint64_t v200 = 0;
    uint64_t v201 = 0;
    uint64_t v198 = 0;
    uint64_t v199 = 0;
    uint64_t v54 = 1;
LABEL_34:
    uint64_t v59 = v23;
    uint64_t v60 = *v23;
    if (*(void *)(*v23 + 16) && (uint64_t v61 = sub_1B62B2CE0(0x6E6F697469736F70, 0xE800000000000000), (v62 & 1) != 0))
    {
      uint64_t v63 = (void *)(*(void *)(v60 + 56) + 32 * v61);
      char v64 = v23;
      uint64_t v65 = v63[1];
      uint64_t v66 = v63[2];
      uint64_t v67 = v63[3];
      long long v68 = (void *)swift_unknownObjectRetain();
      uint64_t v69 = sub_1B6C8AB94(v68, v65, v66, v67);
      uint64_t v71 = v70;
      LOBYTE(v66) = v72;
      uint64_t v59 = v64;
      swift_unknownObjectRelease();
      char v73 = v66 & 1;
    }
    else
    {
      uint64_t v69 = 0;
      uint64_t v71 = 0;
      char v73 = 1;
    }
    uint64_t v74 = *v59;
    uint64_t v206 = (double (*)(void, __n128, __n128))v54;
    if (*(void *)(*v59 + 16) && (uint64_t v75 = sub_1B62B2CE0(0x6C616D726F6ELL, 0xE600000000000000), (v76 & 1) != 0))
    {
      char v77 = (void *)(*(void *)(v74 + 56) + 32 * v75);
      uint64_t v78 = v77[1];
      uint64_t v79 = v77[2];
      uint64_t v80 = v77[3];
      long long v81 = (void *)swift_unknownObjectRetain();
      uint64_t v82 = sub_1B6C8AB94(v81, v78, v79, v80);
      uint64_t v84 = v83;
      LOBYTE(v79) = v85;
      swift_unknownObjectRelease();
      char v86 = v79 & 1;
    }
    else
    {
      uint64_t v82 = 0;
      uint64_t v84 = 0;
      char v86 = 1;
    }
    uint64_t v87 = *v59;
    unint64_t v205 = v51;
    if (*(void *)(*v59 + 16) && (uint64_t v88 = sub_1B62B2CE0(0x726F6C6F63, 0xE500000000000000), (v89 & 1) != 0))
    {
      char v90 = (void *)(*(void *)(v87 + 56) + 32 * v88);
      uint64_t v91 = v90[1];
      char v92 = v86;
      uint64_t v93 = v84;
      char v94 = v73;
      uint64_t v95 = v82;
      uint64_t v96 = v90[2];
      uint64_t v97 = v90[3];
      uint64_t v98 = (void *)swift_unknownObjectRetain();
      uint64_t v99 = v97;
      uint64_t v82 = v95;
      char v73 = v94;
      uint64_t v84 = v93;
      char v86 = v92;
      unint64_t v51 = v205;
      int v222 = sub_1B6C8AC3C(v98, v91, v96, v99);
      uint64_t v218 = v100;
      LOBYTE(v96) = v101;
      swift_unknownObjectRelease();
      char v102 = v96 & 1;
    }
    else
    {
      int v222 = 0;
      uint64_t v218 = 0;
      char v102 = 1;
    }
    char v225 = v102;
    uint64_t v103 = *v59;
    if (*(void *)(*v59 + 16) && (uint64_t v104 = sub_1B62B2CE0(0x646E49746E696F6ALL, 0xEC00000073656369), (v105 & 1) != 0))
    {
      long long v106 = (void *)(*(void *)(v103 + 56) + 32 * v104);
      uint64_t v107 = v106[1];
      char v108 = v86;
      uint64_t v109 = v84;
      char v110 = v73;
      uint64_t v111 = v82;
      uint64_t v112 = v71;
      uint64_t v113 = v69;
      uint64_t v114 = v106[2];
      uint64_t v115 = v106[3];
      float32x4_t v116 = (void *)swift_unknownObjectRetain();
      uint64_t v117 = v115;
      uint64_t v69 = v113;
      uint64_t v71 = v112;
      uint64_t v82 = v111;
      char v73 = v110;
      uint64_t v84 = v109;
      char v86 = v108;
      unint64_t v51 = v205;
      float32x4_t v118 = sub_1B6C8AD70(v116, v107, v114, v117);
      uint64_t v216 = v119;
      uint64_t v217 = (uint64_t)v118;
      LOBYTE(v114) = v120;
      swift_unknownObjectRelease();
      char v121 = v114 & 1;
    }
    else
    {
      uint64_t v216 = 0;
      uint64_t v217 = 0;
      char v121 = 1;
    }
    char v215 = v121;
    uint64_t v122 = *v59;
    if (*(void *)(*v59 + 16) && (uint64_t v123 = sub_1B62B2CE0(0x696557746E696F6ALL, 0xEC00000073746867), (v124 & 1) != 0))
    {
      float32x4_t v125 = (void *)(*(void *)(v122 + 56) + 32 * v123);
      uint64_t v126 = v125[1];
      char v127 = v86;
      uint64_t v128 = v84;
      char v129 = v73;
      float32x4_t v130 = v82;
      uint64_t v131 = v71;
      float32x4_t v132 = v69;
      uint64_t v133 = v125[2];
      uint64_t v134 = v125[3];
      uint64_t v135 = (void *)swift_unknownObjectRetain();
      uint64_t v136 = v134;
      uint64_t v69 = v132;
      uint64_t v71 = v131;
      uint64_t v82 = v130;
      char v73 = v129;
      uint64_t v84 = v128;
      char v86 = v127;
      unint64_t v51 = v205;
      long long v137 = sub_1B6C8AC3C(v135, v126, v133, v136);
      uint64_t v213 = v138;
      uint64_t v214 = (uint64_t)v137;
      LOBYTE(v133) = v139;
      swift_unknownObjectRelease();
      char v140 = v133 & 1;
    }
    else
    {
      uint64_t v213 = 0;
      uint64_t v214 = 0;
      char v140 = 1;
    }
    char v212 = v140;
    uint64_t v141 = 0;
    unint64_t v204 = -(uint64_t)v51;
    uint64_t v207 = v208 + 32;
    v142.n128_u64[1] = 1052050675;
    uint64_t v209 = (uint64_t)v206;
    char v143 = v220;
    uint64_t v144 = a4;
    while (1)
    {
      if (v143)
      {
        if (v143 != 1)
        {
          uint64_t v173 = v235;
          uint64_t v174 = *(void *)(v235 + 16);
          if (v174) {
            float v175 = *(float *)(v235 + 4 * v174 + 28);
          }
          else {
            float v175 = 0.0;
          }
          sub_1B68AA078(0.0, v175);
          uint64_t v178 = sub_1B6C8A77C(v173, v177);
          unint64_t v179 = v228 ^ v226 ^ v227;
          unint64_t v180 = v229 ^ v227 ^ v226;
          float v181 = (float)((9 * ((((5 * v227) >> 32) >> 25) | (640 * v227))) & 0xFFFFFF) * 0.000000059605;
          unint64_t v182 = v180 ^ v228 ^ v226 ^ (v227 << 17);
          uint64_t v183 = __ROR8__(v229 ^ v227, 19);
          unint64_t v226 = v179 ^ v183 ^ v180;
          unint64_t v227 = v182 ^ v179;
          unint64_t v228 = v182 ^ (v179 << 17);
          uint64_t v229 = __ROR8__(v179 ^ v183, 19);
          float v184 = sqrtf((float)((9 * ((((5 * v179) >> 32) >> 25) | (640 * v179))) & 0xFFFFFF) * 0.000000059605);
          *(float *)&unsigned int v185 = 1.0 - v184;
          *(float *)&unsigned int v186 = (float)(1.0 - v181) * v184;
          *(float *)&unsigned int v187 = v181 * v184;
          v188.i64[0] = __PAIR64__(v186, v185);
          v188.i64[1] = v187;
          sub_1B6C8DFA0(v141, v178, &v230, (uint64_t)v69, v188, v71, v73, (uint64_t)v82, v84, v86, (uint64_t)v222, v218, v225, v219, v217, v216, v215, v214, v213,
            v212);
          char v143 = v220;
          goto LABEL_56;
        }
        if ((v221 & 0x400) != 0)
        {
          char v143 = v220;
          uint64_t v145 = sub_1B68E0DD8(v211);
          unint64_t v146 = v228 ^ v226 ^ v227;
          unint64_t v147 = v229 ^ v227 ^ v226;
          float v148 = (float)((9 * ((((5 * v227) >> 32) >> 25) | (640 * v227))) & 0xFFFFFF) * 0.000000059605;
          unint64_t v149 = v147 ^ v228 ^ v226 ^ (v227 << 17);
          unint64_t v150 = v146 ^ __ROR8__(v229 ^ v227, 19);
          unint64_t v226 = v150 ^ v147;
          unint64_t v227 = v149 ^ v146;
          unint64_t v228 = v149 ^ (v146 << 17);
          uint64_t v229 = __ROR8__(v150, 19);
          float v151 = sqrtf((float)((9 * ((((5 * v146) >> 32) >> 25) | (640 * v146))) & 0xFFFFFF) * 0.000000059605);
          *(float *)&unsigned int v152 = 1.0 - v151;
          *(float *)&unsigned int v153 = (float)(1.0 - v148) * v151;
          *(float *)&unsigned int v154 = v148 * v151;
          v155.i64[0] = __PAIR64__(v153, v152);
          v155.i64[1] = v154;
          sub_1B6C8DFA0(v141, v145, &v230, (uint64_t)v69, v155, v71, v73, (uint64_t)v82, v84, v86, (uint64_t)v222, v218, v225, v219, v217, v216, v215, v214, v213,
            v212);
LABEL_56:
          uint64_t v144 = a4;
          goto LABEL_57;
        }
        unint64_t v156 = v227;
        uint64_t v157 = 9 * __ROR8__(5 * v227, 57);
        unint64_t v158 = v228 ^ v226;
        unint64_t v159 = v229 ^ v227;
        unint64_t v160 = v228 ^ v226 ^ v227;
        unint64_t v161 = v229 ^ v227 ^ v226;
        unint64_t v226 = v161;
        unint64_t v227 = v160;
        uint64_t v162 = __ROR8__(v159, 19);
        unint64_t v163 = v158 ^ (v156 << 17);
        unint64_t v228 = v163;
        uint64_t v229 = v162;
        uint64_t v164 = ((unint64_t)v157 * (unsigned __int128)v51) >> 64;
        if (v51 > v157 * v51 && v204 % v51 > v157 * v51)
        {
          do
          {
            uint64_t v165 = 9 * __ROR8__(5 * v160, 57);
            unint64_t v166 = v161 ^ v163;
            unint64_t v167 = v160 ^ v162;
            v163 ^= v161 ^ (v160 << 17);
            v160 ^= v166;
            v161 ^= v167;
            uint64_t v162 = __ROR8__(v167, 19);
          }
          while (v204 % v51 > v165 * v51);
          unint64_t v226 = v161;
          unint64_t v227 = v160;
          uint64_t v164 = ((unint64_t)v165 * (unsigned __int128)v51) >> 64;
          unint64_t v228 = v163;
          uint64_t v229 = v162;
        }
        __n128 v168 = *(__n128 *)(v231 + 16 * v164 + 32);
        float32x4_t v169 = *(float32x4_t *)(v232 + 16 * v164 + 32);
        v142.n128_u64[0] = *(void *)(v233 + 8 * v164 + 32);
        if (v73)
        {
          if (v86) {
            goto LABEL_67;
          }
        }
        else
        {
          long long v189 = *(_OWORD *)(v207 + 16 * v164);
          int v190 = &v69[12 * v141];
          *(void *)int v190 = v189;
          *((_DWORD *)v190 + 2) = DWORD2(v189);
          if (v86)
          {
LABEL_67:
            if ((v225 & 1) == 0) {
              goto LABEL_81;
            }
            goto LABEL_57;
          }
        }
        uint64_t v191 = &v82[12 * v141];
        *(void *)uint64_t v191 = v168.n128_u64[0];
        *((_DWORD *)v191 + 2) = v168.n128_u32[2];
        if ((v225 & 1) == 0)
        {
LABEL_81:
          if (v209 == 1)
          {
            *(float32x4_t *)&v222[16 * v141] = v169;
            uint64_t v209 = 1;
          }
          else
          {
            uint64_t v236 = v203;
            unint64_t v237 = v202;
            uint64_t v238 = v201;
            uint64_t v239 = v200;
            uint64_t v240 = v199;
            uint64_t v241 = (double (*)(void, __n128, __n128))v209;
            uint64_t v242 = v198;
            float32x4_t v197 = v169;
            *(double *)v195.i64 = ((double (*)(uint64_t *, __n128, __n128))v209)(&v236, v142, v168);
            uint64_t v144 = a4;
            __n128 v142 = (__n128)vmulq_f32(v197, v195);
            *(__n128 *)&v222[16 * v141] = v142;
          }
        }
      }
      else
      {
        if ((v221 & 0x400) != 0)
        {
          char v143 = v220;
          uint64_t v176 = sub_1B68E0DD8(v211);
          sub_1B6C8DFA0(v141, v176, &v230, (uint64_t)v69, (float32x4_t)xmmword_1B6EBDCD0, v71, v73, (uint64_t)v82, v84, v86, (uint64_t)v222, v218, v225, v219, v217, v216, v215, v214, v213,
            v212);
          goto LABEL_56;
        }
        uint64_t v170 = 16 * (v141 % (uint64_t)v51);
        __n128 v171 = *(__n128 *)(v231 + v170 + 32);
        float32x4_t v172 = *(float32x4_t *)(v232 + v170 + 32);
        v142.n128_u64[0] = *(void *)(v233 + 8 * (v141 % (uint64_t)v51) + 32);
        if (v73)
        {
          if (v86) {
            goto LABEL_72;
          }
        }
        else
        {
          long long v192 = *(_OWORD *)(v207 + 16 * (v141 % (uint64_t)v51));
          uint64_t v193 = &v69[12 * v141];
          *(void *)uint64_t v193 = v192;
          *((_DWORD *)v193 + 2) = DWORD2(v192);
          if (v86)
          {
LABEL_72:
            if ((v225 & 1) == 0) {
              goto LABEL_85;
            }
            goto LABEL_57;
          }
        }
        int v194 = &v82[12 * v141];
        *(void *)int v194 = v171.n128_u64[0];
        *((_DWORD *)v194 + 2) = v171.n128_u32[2];
        if ((v225 & 1) == 0)
        {
LABEL_85:
          if (v206 == (double (*)(void, __n128, __n128))1)
          {
            *(float32x4_t *)&v222[16 * v141] = v172;
            uint64_t v209 = 1;
          }
          else
          {
            uint64_t v236 = v203;
            unint64_t v237 = v202;
            uint64_t v238 = v201;
            uint64_t v239 = v200;
            uint64_t v240 = v199;
            uint64_t v241 = v206;
            uint64_t v242 = v198;
            float32x4_t v210 = v172;
            *(double *)v196.i64 = v206(&v236, v142, v171);
            uint64_t v144 = a4;
            __n128 v142 = (__n128)vmulq_f32(v210, v196);
            *(__n128 *)&v222[16 * v141] = v142;
            uint64_t v209 = (uint64_t)v206;
          }
          unint64_t v51 = v205;
        }
      }
LABEL_57:
      if (++v141 == v144)
      {
        sub_1B6C99098((uint64_t)&v230);
        swift_release();
        swift_release();
        return swift_release();
      }
    }
  }
  return result;
}

uint64_t sub_1B6C8D3E4(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB4290(*a1, *a2);
}

uint64_t sub_1B6C8D3F0()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C8D4E8()
{
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C8D5C8()
{
  return sub_1B6E33988();
}

uint64_t sub_1B6C8D6BC@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C97364();
  *a1 = result;
  return result;
}

void sub_1B6C8D6EC(uint64_t a1@<X8>)
{
  unint64_t v2 = 0xEA00000000007974;
  uint64_t v3 = 0x69746E456873656DLL;
  switch(*v1)
  {
    case 1:
      unint64_t v2 = 0xE500000000000000;
      uint64_t v3 = 0x746E756F63;
      goto LABEL_3;
    case 2:
      strcpy((char *)a1, "distribution");
      *(unsigned char *)(a1 + 13) = 0;
      *(_WORD *)(a1 + 14) = -5120;
      break;
    case 3:
      *(void *)a1 = 0x736E6F6974706FLL;
      *(void *)(a1 + 8) = 0xE700000000000000;
      break;
    case 4:
      *(void *)a1 = 1684366707;
      *(void *)(a1 + 8) = 0xE400000000000000;
      break;
    default:
LABEL_3:
      *(void *)a1 = v3;
      *(void *)(a1 + 8) = v2;
      break;
  }
}

uint64_t sub_1B6C8D7A8()
{
  uint64_t result = 0x69746E456873656DLL;
  switch(*v0)
  {
    case 1:
      uint64_t result = 0x746E756F63;
      break;
    case 2:
      uint64_t result = 0x7562697274736964;
      break;
    case 3:
      uint64_t result = 0x736E6F6974706FLL;
      break;
    case 4:
      uint64_t result = 1684366707;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6C8D854@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C97364();
  *a1 = result;
  return result;
}

uint64_t sub_1B6C8D87C(uint64_t a1)
{
  unint64_t v2 = sub_1B6C9B6F0();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C8D8B8(uint64_t a1)
{
  unint64_t v2 = sub_1B6C9B6F0();

  return MEMORY[0x1F41862B0](a1, v2);
}

double sub_1B6C8D8F4(uint64_t a1, float32x4_t a2)
{
  float32x4_t v3 = vaddq_f32(vaddq_f32(vmulq_n_f32(*(float32x4_t *)(*(void *)(v2 + 8) + 32 + 16 * *(void *)(*(void *)(v2 + 48) + 24 * a1 + 32)), a2.f32[0]), vmulq_lane_f32(*(float32x4_t *)(*(void *)(v2 + 8) + 32 + 16 * *(void *)(*(void *)(v2 + 48) + 24 * a1 + 40)), *(float32x2_t *)a2.f32, 1)), vmulq_laneq_f32(*(float32x4_t *)(*(void *)(v2 + 8) + 32 + 16 * *(void *)(*(void *)(v2 + 48) + 24 * a1 + 48)), a2, 2));
  int8x16_t v4 = (int8x16_t)vabsq_f32(v3);
  if (*(float *)v4.i32 > 0.00000011921
    || (v4.i32[0] = vextq_s8(v4, v4, 8uLL).u32[0],
        *(int32x2_t *)v4.i8 = vcge_f32((float32x2_t)0x3400000034000000, *(float32x2_t *)v4.i8),
        (v4.i8[4] & 1) == 0)
    || (v5 = v4.i8[0], double result = 0.0, (v5 & 1) == 0))
  {
    int32x4_t v7 = (int32x4_t)vmulq_f32(v3, v3);
    v7.i32[0] = vadd_f32((float32x2_t)*(_OWORD *)&vdupq_laneq_s32(v7, 2), vadd_f32(*(float32x2_t *)v7.i8, (float32x2_t)vdup_lane_s32(*(int32x2_t *)v7.i8, 1))).u32[0];
    float32x2_t v8 = vrsqrte_f32((float32x2_t)v7.u32[0]);
    float32x2_t v9 = vmul_f32(v8, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v8, v8)));
    *(void *)&double result = vmulq_n_f32(v3, vmul_f32(v9, vrsqrts_f32((float32x2_t)v7.u32[0], vmul_f32(v9, v9))).f32[0]).u64[0];
  }
  return result;
}

__n128 sub_1B6C8D9A4(uint64_t a1, int32x4_t a2)
{
  uint64_t v3 = 0;
  int8x16_t v4 = (void *)(v2[6] + 24 * a1);
  uint64_t v5 = v4[4];
  uint64_t v6 = v4[5];
  uint64_t v7 = v4[6];
  uint64_t v8 = v2[4] + 32;
  uint64_t v9 = *(void *)(v8 + 8 * v5);
  uint64_t v10 = v2[5] + 32;
  long long v11 = *(_OWORD *)(v10 + 16 * v5);
  int32x4_t v12 = vdupq_lane_s32(*(int32x2_t *)a2.i8, 0);
  uint64_t v13 = (char *)MEMORY[0x1E4FBC860];
  int32x4_t v65 = v12;
  long long v68 = v11;
  do
  {
    int32x4_t v81 = v12;
    float v15 = *(float *)((unint64_t)&v81 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    long long v82 = v11;
    float v16 = v15 * *(float *)((unint64_t)&v82 & 0xFFFFFFFFFFFFFFF3 | (4 * (v3 & 3)));
    if (v16 > 0.0)
    {
      uint64_t v80 = v9;
      unsigned __int16 v17 = *(_WORD *)((unint64_t)&v80 & 0xFFFFFFFFFFFFFFF9 | (2 * (v3 & 3)));
      uint64_t v18 = *((void *)v13 + 2);
      if (v18)
      {
        if (*((unsigned __int16 *)v13 + 16) == v17)
        {
          uint64_t v14 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_23;
          }
          goto LABEL_3;
        }
        if (v18 != 1)
        {
          if (*((unsigned __int16 *)v13 + 20) == v17)
          {
            uint64_t v14 = 1;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              goto LABEL_23;
            }
            uint64_t v14 = 1;
            goto LABEL_3;
          }
          if (v18 != 2)
          {
            uint64_t v22 = 48;
            uint64_t v14 = 2;
            while (*(unsigned __int16 *)&v13[v22] != v17)
            {
              ++v14;
              v22 += 8;
              if (v18 == v14) {
                goto LABEL_9;
              }
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_23:
            }
              uint64_t v13 = sub_1B6C16A70((uint64_t)v13);
LABEL_3:
            int32x4_t v12 = v65;
            long long v11 = v68;
            *(float *)&v13[8 * v14 + 36] = v16 + *(float *)&v13[8 * v14 + 36];
            goto LABEL_4;
          }
        }
      }
LABEL_9:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v13 = sub_1B68C6B04(0, v18 + 1, 1, v13);
      }
      unint64_t v20 = *((void *)v13 + 2);
      unint64_t v19 = *((void *)v13 + 3);
      int32x4_t v12 = v65;
      long long v11 = v68;
      if (v20 >= v19 >> 1)
      {
        long long v23 = sub_1B68C6B04(v19 > 1, v20 + 1, 1, v13);
        int32x4_t v12 = v65;
        long long v11 = v68;
        uint64_t v13 = v23;
      }
      *((void *)v13 + 2) = v20 + 1;
      uint64_t v21 = &v13[8 * v20];
      *((_WORD *)v21 + 16) = v17;
      *((float *)v21 + 9) = v16;
    }
LABEL_4:
    ++v3;
  }
  while (v3 != 4);
  uint64_t v24 = 0;
  uint64_t v25 = *(void *)(v8 + 8 * v6);
  long long v26 = *(_OWORD *)(v10 + 16 * v6);
  int32x4_t v27 = vdupq_lane_s32(*(int32x2_t *)a2.i8, 1);
  int32x4_t v66 = v27;
  long long v69 = v26;
  do
  {
    int32x4_t v78 = v27;
    float v29 = *(float *)((unint64_t)&v78 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
    long long v79 = v26;
    float v30 = v29 * *(float *)((unint64_t)&v79 & 0xFFFFFFFFFFFFFFF3 | (4 * (v24 & 3)));
    if (v30 > 0.0)
    {
      uint64_t v77 = v25;
      unsigned __int16 v31 = *(_WORD *)((unint64_t)&v77 & 0xFFFFFFFFFFFFFFF9 | (2 * (v24 & 3)));
      uint64_t v32 = *((void *)v13 + 2);
      if (v32)
      {
        if (*((unsigned __int16 *)v13 + 16) == v31)
        {
          uint64_t v28 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_46;
          }
          goto LABEL_26;
        }
        if (v32 != 1)
        {
          if (*((unsigned __int16 *)v13 + 20) == v31)
          {
            uint64_t v28 = 1;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              goto LABEL_46;
            }
            uint64_t v28 = 1;
            goto LABEL_26;
          }
          if (v32 != 2)
          {
            uint64_t v36 = 48;
            uint64_t v28 = 2;
            while (*(unsigned __int16 *)&v13[v36] != v31)
            {
              ++v28;
              v36 += 8;
              if (v32 == v28) {
                goto LABEL_32;
              }
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_46:
            }
              uint64_t v13 = sub_1B6C16A70((uint64_t)v13);
LABEL_26:
            int32x4_t v27 = v66;
            long long v26 = v69;
            *(float *)&v13[8 * v28 + 36] = v30 + *(float *)&v13[8 * v28 + 36];
            goto LABEL_27;
          }
        }
      }
LABEL_32:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v13 = sub_1B68C6B04(0, v32 + 1, 1, v13);
      }
      unint64_t v34 = *((void *)v13 + 2);
      unint64_t v33 = *((void *)v13 + 3);
      int32x4_t v27 = v66;
      long long v26 = v69;
      if (v34 >= v33 >> 1)
      {
        uint64_t v37 = sub_1B68C6B04(v33 > 1, v34 + 1, 1, v13);
        int32x4_t v27 = v66;
        long long v26 = v69;
        uint64_t v13 = v37;
      }
      *((void *)v13 + 2) = v34 + 1;
      uint64_t v35 = &v13[8 * v34];
      *((_WORD *)v35 + 16) = v31;
      *((float *)v35 + 9) = v30;
    }
LABEL_27:
    ++v24;
  }
  while (v24 != 4);
  uint64_t v38 = 0;
  uint64_t v39 = *(void *)(v8 + 8 * v7);
  long long v40 = *(_OWORD *)(v10 + 16 * v7);
  int32x4_t v41 = vdupq_laneq_s32(a2, 2);
  int32x4_t v67 = v41;
  long long v70 = v40;
  do
  {
    int32x4_t v75 = v41;
    float v43 = *(float *)((unint64_t)&v75 & 0xFFFFFFFFFFFFFFF3 | (4 * (v38 & 3)));
    long long v76 = v40;
    float v44 = v43 * *(float *)((unint64_t)&v76 & 0xFFFFFFFFFFFFFFF3 | (4 * (v38 & 3)));
    if (v44 > 0.0)
    {
      uint64_t v74 = v39;
      unsigned __int16 v45 = *(_WORD *)((unint64_t)&v74 & 0xFFFFFFFFFFFFFFF9 | (2 * (v38 & 3)));
      uint64_t v46 = *((void *)v13 + 2);
      if (v46)
      {
        if (*((unsigned __int16 *)v13 + 16) == v45)
        {
          uint64_t v42 = 0;
          if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
            goto LABEL_69;
          }
          goto LABEL_49;
        }
        if (v46 != 1)
        {
          if (*((unsigned __int16 *)v13 + 20) == v45)
          {
            uint64_t v42 = 1;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              goto LABEL_69;
            }
            uint64_t v42 = 1;
            goto LABEL_49;
          }
          if (v46 != 2)
          {
            uint64_t v50 = 48;
            uint64_t v42 = 2;
            while (*(unsigned __int16 *)&v13[v50] != v45)
            {
              ++v42;
              v50 += 8;
              if (v46 == v42) {
                goto LABEL_55;
              }
            }
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
LABEL_69:
            }
              uint64_t v13 = sub_1B6C16A70((uint64_t)v13);
LABEL_49:
            int32x4_t v41 = v67;
            long long v40 = v70;
            *(float *)&v13[8 * v42 + 36] = v44 + *(float *)&v13[8 * v42 + 36];
            goto LABEL_50;
          }
        }
      }
LABEL_55:
      if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
        uint64_t v13 = sub_1B68C6B04(0, v46 + 1, 1, v13);
      }
      unint64_t v48 = *((void *)v13 + 2);
      unint64_t v47 = *((void *)v13 + 3);
      int32x4_t v41 = v67;
      long long v40 = v70;
      if (v48 >= v47 >> 1)
      {
        unint64_t v51 = sub_1B68C6B04(v47 > 1, v48 + 1, 1, v13);
        int32x4_t v41 = v67;
        long long v40 = v70;
        uint64_t v13 = v51;
      }
      *((void *)v13 + 2) = v48 + 1;
      char v49 = &v13[8 * v48];
      *((_WORD *)v49 + 16) = v45;
      *((float *)v49 + 9) = v44;
    }
LABEL_50:
    ++v38;
  }
  while (v38 != 4);
  if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
    uint64_t v13 = sub_1B6C16A70((uint64_t)v13);
  }
  uint64_t v52 = *((void *)v13 + 2);
  v83[0] = v13 + 32;
  v83[1] = v52;
  sub_1B6C942A4(v83);
  unint64_t v53 = *((void *)v13 + 2);
  if (v53 <= 4)
  {
    if (v53) {
      goto LABEL_75;
    }
    unint64_t v57 = 0;
  }
  else
  {
    unint64_t v53 = 4;
LABEL_75:
    uint64_t v54 = 0;
    long long v55 = 0uLL;
    uint64_t v56 = v13 + 36;
    unint64_t v57 = 0;
    do
    {
      uint64_t v58 = (_WORD *)((unint64_t)&v73 & 0xFFFFFFFFFFFFFFF9 | (2 * (v54 & 3)));
      uint64_t v59 = (_DWORD *)((unint64_t)&v72 & 0xFFFFFFFFFFFFFFF3 | (4 * (v54 & 3)));
      uint64_t v60 = v54 + 1;
      __int16 v61 = *((_WORD *)v56 - 2);
      int v62 = *v56;
      v56 += 2;
      unint64_t v73 = v57;
      *uint64_t v58 = v61;
      unint64_t v57 = v73;
      long long v72 = v55;
      _DWORD *v59 = v62;
      long long v55 = v72;
      uint64_t v54 = v60;
    }
    while (v53 != v60);
  }
  long long v71 = v57;
  swift_bridgeObjectRelease();
  return (__n128)v71;
}

void sub_1B6C8DFA0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, float32x4_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char a20)
{
  uint64_t v70 = *MEMORY[0x1E4F143B8];
  uint64_t v24 = (void *)(a3[6] + 24 * a2);
  uint64_t v25 = v24[4];
  uint64_t v26 = v24[5];
  uint64_t v27 = v24[6];
  uint64_t v28 = *a3 + 32;
  float32x4_t v53 = *(float32x4_t *)(v28 + 16 * v26);
  float32x4_t v54 = *(float32x4_t *)(v28 + 16 * v25);
  float32x4_t v52 = *(float32x4_t *)(v28 + 16 * v27);
  *(double *)&long long v29 = sub_1B6C8D8F4(a2, a5);
  long long v57 = v29;
  uint64_t v30 = a3[3];
  uint64_t v31 = a3[2] + 32;
  float32x4_t v55 = *(float32x4_t *)(v31 + 16 * v25);
  float32x4_t v56 = *(float32x4_t *)(v31 + 16 * v26);
  float32x4_t v58 = *(float32x4_t *)(v31 + 16 * v27);
  float32x2_t v32 = *(float32x2_t *)(v30 + 32 + 8 * v25);
  float32x2_t v33 = *(float32x2_t *)(v30 + 32 + 8 * v26);
  float32x2_t v34 = *(float32x2_t *)(v30 + 32 + 8 * v27);
  unint64_t v35 = sub_1B6C8D9A4(a2, (int32x4_t)a5).n128_u64[0];
  float32x4_t v37 = a5;
  unint64_t v38 = v35;
  if ((a7 & 1) == 0)
  {
    float32x4_t v39 = vaddq_f32(vaddq_f32(vmulq_n_f32(v54, a5.f32[0]), vmulq_lane_f32(v53, *(float32x2_t *)a5.f32, 1)), vmulq_laneq_f32(v52, a5, 2));
    uint64_t v40 = a4 + 12 * a1;
    *(void *)uint64_t v40 = v39.i64[0];
    *(_DWORD *)(v40 + 8) = v39.i32[2];
  }
  if (a10)
  {
    char v41 = a17;
    if (a13) {
      goto LABEL_5;
    }
  }
  else
  {
    uint64_t v43 = a8 + 12 * a1;
    *(void *)uint64_t v43 = v57;
    *(_DWORD *)(v43 + 8) = DWORD2(v57);
    char v41 = a17;
    if (a13)
    {
LABEL_5:
      char v42 = a20;
      if (v41) {
        goto LABEL_6;
      }
      goto LABEL_13;
    }
  }
  float32x4_t v44 = vaddq_f32(vaddq_f32(vmulq_n_f32(v55, a5.f32[0]), vmulq_lane_f32(v56, *(float32x2_t *)a5.f32, 1)), vmulq_laneq_f32(v58, a5, 2));
  unsigned __int16 v45 = *(double (**)(void, double))(a14 + 56);
  if (v45 != (double (*)(void, double))1)
  {
    float32x4_t v61 = v44;
    __n128 v63 = v36;
    uint64_t v46 = *(void *)(a14 + 64);
    double v47 = COERCE_DOUBLE(vadd_f32(vadd_f32(vmul_n_f32(v32, v37.f32[0]), vmul_lane_f32(v33, *(float32x2_t *)v37.f32, 1)), vmul_laneq_f32(v34, v37, 2)));
    uint64_t v48 = *(void *)(a14 + 48);
    uint64_t v49 = *(void *)(a14 + 40);
    long long v50 = *(_OWORD *)(a14 + 24);
    uint64_t v64 = *(void *)(a14 + 16);
    long long v65 = v50;
    uint64_t v66 = v49;
    uint64_t v67 = v48;
    long long v68 = v45;
    uint64_t v69 = v46;
    *(double *)v51.i64 = v45(&v64, v47);
    __n128 v36 = v63;
    float32x4_t v44 = vmulq_f32(v61, v51);
  }
  *(float32x4_t *)(a11 + 16 * a1) = v44;
  char v42 = a20;
  if (v41)
  {
LABEL_6:
    if (v42) {
      return;
    }
    goto LABEL_7;
  }
LABEL_13:
  *(void *)(a15 + 8 * a1) = v38;
  if (v42) {
    return;
  }
LABEL_7:
  *(__n128 *)(a18 + 16 * a1) = v36;
}

char *sub_1B6C8E1E0()
{
  uint64_t v1 = sub_1B62D1B88(0, 4, 0, MEMORY[0x1E4FBC860]);
  uint64_t v2 = v1;
  if (*(unsigned char *)(v0 + 24))
  {
    unint64_t v4 = *((void *)v1 + 2);
    unint64_t v3 = *((void *)v1 + 3);
    if (v4 >= v3 >> 1) {
      uint64_t v2 = sub_1B62D1B88(v3 > 1, v4 + 1, 1, v1);
    }
    *((void *)v2 + 2) = v4 + 1;
    uint64_t v5 = &v2[16 * v4];
    *((void *)v5 + 4) = &type metadata for Position;
    *((void *)v5 + 5) = &off_1F0FA6EE0;
    if ((*(unsigned char *)(v0 + 25) & 1) == 0)
    {
LABEL_3:
      if ((*(unsigned char *)(v0 + 26) & 1) == 0) {
        goto LABEL_4;
      }
      goto LABEL_13;
    }
  }
  else if ((*(unsigned char *)(v0 + 25) & 1) == 0)
  {
    goto LABEL_3;
  }
  unint64_t v7 = *((void *)v2 + 2);
  unint64_t v6 = *((void *)v2 + 3);
  if (v7 >= v6 >> 1) {
    uint64_t v2 = sub_1B62D1B88(v6 > 1, v7 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v7 + 1;
  uint64_t v8 = &v2[16 * v7];
  *((void *)v8 + 4) = &type metadata for Color;
  *((void *)v8 + 5) = &off_1F0F9ECD8;
  if ((*(unsigned char *)(v0 + 26) & 1) == 0)
  {
LABEL_4:
    if ((*(unsigned char *)(v0 + 27) & 1) == 0) {
      goto LABEL_5;
    }
    goto LABEL_16;
  }
LABEL_13:
  unint64_t v10 = *((void *)v2 + 2);
  unint64_t v9 = *((void *)v2 + 3);
  if (v10 >= v9 >> 1) {
    uint64_t v2 = sub_1B62D1B88(v9 > 1, v10 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v10 + 1;
  long long v11 = &v2[16 * v10];
  *((void *)v11 + 4) = &type metadata for Velocity;
  *((void *)v11 + 5) = &off_1F0FA7C08;
  if ((*(unsigned char *)(v0 + 27) & 1) == 0)
  {
LABEL_5:
    if ((*(unsigned char *)(v0 + 28) & 1) == 0) {
      return v2;
    }
LABEL_19:
    swift_retain();
    uint64_t v15 = sub_1B695E820(*(void *)v0);
    swift_release();
    if (v15)
    {
      if (*(void *)(v15 + 16) && (uint64_t v16 = sub_1B62B2CE0(1702521203, 0xE400000000000000), (v17 & 1) != 0))
      {
        uint64_t v18 = *(void *)(*(void *)(v15 + 56) + 32 * v16 + 24);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if (v18 == 30)
        {
          unint64_t v26 = *((void *)v2 + 2);
          unint64_t v25 = *((void *)v2 + 3);
          if (v26 >= v25 >> 1) {
            uint64_t v2 = sub_1B62D1B88(v25 > 1, v26 + 1, 1, v2);
          }
          *((void *)v2 + 2) = v26 + 1;
          uint64_t v21 = &v2[16 * v26];
          uint64_t v22 = &type metadata for Scale3;
          long long v23 = &off_1F0FA10A0;
          goto LABEL_30;
        }
        if (v18 == 29)
        {
          unint64_t v28 = *((void *)v2 + 2);
          unint64_t v27 = *((void *)v2 + 3);
          if (v28 >= v27 >> 1) {
            uint64_t v2 = sub_1B62D1B88(v27 > 1, v28 + 1, 1, v2);
          }
          *((void *)v2 + 2) = v28 + 1;
          uint64_t v21 = &v2[16 * v28];
          uint64_t v22 = &type metadata for Scale2;
          long long v23 = &off_1F0FA0F38;
          goto LABEL_30;
        }
        if (v18 != 28) {
          return v2;
        }
      }
      else
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
    }
    unint64_t v20 = *((void *)v2 + 2);
    unint64_t v19 = *((void *)v2 + 3);
    if (v20 >= v19 >> 1) {
      uint64_t v2 = sub_1B62D1B88(v19 > 1, v20 + 1, 1, v2);
    }
    *((void *)v2 + 2) = v20 + 1;
    uint64_t v21 = &v2[16 * v20];
    uint64_t v22 = &type metadata for Scale1;
    long long v23 = &off_1F0FA0DD0;
LABEL_30:
    *((void *)v21 + 4) = v22;
    *((void *)v21 + 5) = v23;
    return v2;
  }
LABEL_16:
  unint64_t v13 = *((void *)v2 + 2);
  unint64_t v12 = *((void *)v2 + 3);
  if (v13 >= v12 >> 1) {
    uint64_t v2 = sub_1B62D1B88(v12 > 1, v13 + 1, 1, v2);
  }
  *((void *)v2 + 2) = v13 + 1;
  uint64_t v14 = &v2[16 * v13];
  *((void *)v14 + 4) = &type metadata for Orientation;
  *((void *)v14 + 5) = &off_1F0F560A8;
  if (*(unsigned char *)(v0 + 28)) {
    goto LABEL_19;
  }
  return v2;
}

uint64_t sub_1B6C8E520()
{
  return type metadata accessor for PointCacheEmitter.System();
}

unint64_t sub_1B6C8E540(char a1)
{
  unint64_t result = 0x636143746E696F70;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x797469636F6C6576;
      break;
    case 2:
      unint64_t result = 0x5074697265686E69;
      break;
    case 3:
      unint64_t result = 0x4374697265686E69;
      break;
    case 4:
      unint64_t result = 0x5674697265686E69;
      break;
    case 5:
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x6E6F74656C656B73;
      break;
    case 8:
      unint64_t result = 0x72546E6F69746F6DLL;
      break;
    case 9:
      unint64_t result = 0x5374697265686E69;
      break;
    default:
      return result;
  }
  return result;
}

unint64_t sub_1B6C8E6B8(char a1)
{
  unint64_t result = 0x636143746E696F70;
  switch(a1)
  {
    case 1:
      unint64_t result = 0x797469636F6C6576;
      break;
    case 2:
      unint64_t result = 0x5074697265686E69;
      break;
    case 3:
      unint64_t result = 0x4374697265686E69;
      break;
    case 4:
      unint64_t result = 0x5674697265686E69;
      break;
    case 5:
    case 7:
      unint64_t result = 0xD000000000000012;
      break;
    case 6:
      unint64_t result = 0x6E6F74656C656B73;
      break;
    case 8:
      unint64_t result = 0x72546E6F69746F6DLL;
      break;
    case 9:
      unint64_t result = 0x5374697265686E69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6C8E830(uint64_t a1, uint64_t a2)
{
  uint64_t ObjectType = swift_getObjectType();
  uint64_t v5 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(a2 + 8);
  v5(v2, 0, ObjectType, a2);
  return v5(v2 + 8, 0, ObjectType, a2);
}

double sub_1B6C8E8B0@<D0>(uint64_t a1@<X8>)
{
  *(void *)&long long v1 = 0xFFFFFFFFLL;
  *((void *)&v1 + 1) = 0xFFFFFFFFLL;
  *(_OWORD *)a1 = v1;
  *(void *)(a1 + 16) = 0x400000003F800000;
  *(void *)&double result = 65793;
  *(_DWORD *)(a1 + 24) = 65793;
  *(_WORD *)(a1 + 28) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  return result;
}

uint64_t sub_1B6C8E8DC(char *a1, char *a2)
{
  char v2 = *a2;
  unint64_t v3 = sub_1B6C8E6B8(*a1);
  uint64_t v5 = v4;
  if (v3 == sub_1B6C8E6B8(v2) && v5 == v6) {
    char v8 = 1;
  }
  else {
    char v8 = sub_1B6E334B8();
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v8 & 1;
}

uint64_t sub_1B6C8E968()
{
  char v1 = *v0;
  sub_1B6E33918();
  sub_1B6C8E540(v1);
  sub_1B6E318B8();
  swift_bridgeObjectRelease();
  return sub_1B6E33988();
}

uint64_t sub_1B6C8E9CC()
{
  sub_1B6C8E540(*v0);
  sub_1B6E318B8();

  return swift_bridgeObjectRelease();
}

uint64_t sub_1B6C8EA20()
{
  char v1 = *v0;
  sub_1B6E33918();
  sub_1B6C8E540(v1);
  sub_1B6E318B8();
  swift_bridgeObjectRelease();
  return sub_1B6E33988();
}

uint64_t sub_1B6C8EA80@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C970CC();
  *a1 = result;
  return result;
}

unint64_t sub_1B6C8EAB0@<X0>(unint64_t *a1@<X8>)
{
  unint64_t result = sub_1B6C8E540(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1B6C8EADC()
{
  return sub_1B6C8E6B8(*v0);
}

uint64_t sub_1B6C8EAE4@<X0>(unsigned char *a1@<X8>)
{
  uint64_t result = sub_1B6C970CC();
  *a1 = result;
  return result;
}

uint64_t sub_1B6C8EB0C(uint64_t a1)
{
  unint64_t v2 = sub_1B6C9B060();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C8EB48(uint64_t a1)
{
  unint64_t v2 = sub_1B6C9B060();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C8EB84(void *a1)
{
  unint64_t v3 = v1;
  sub_1B63965F4(0, &qword_1E9DD8088, (uint64_t (*)(void))sub_1B6C9B060, (uint64_t)&type metadata for PointCacheEmitter.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v6 = v5;
  uint64_t v7 = *(void *)(v5 - 8);
  MEMORY[0x1F4188790](v5, v8);
  unint64_t v10 = (char *)&v12 - v9;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C9B060();
  sub_1B6E33A88();
  uint64_t v14 = *v3;
  char v13 = 0;
  sub_1B6657A10();
  sub_1B6E32FA8();
  if (!v2)
  {
    uint64_t v14 = v3[2];
    char v13 = 1;
    sub_1B62AA858();
    sub_1B62AA5EC(qword_1E9DD02C8);
    sub_1B6E32FA8();
    LOBYTE(v14) = 2;
    sub_1B6E32F58();
    LOBYTE(v14) = 3;
    sub_1B6E32F58();
    LOBYTE(v14) = 4;
    sub_1B6E32F58();
    LOBYTE(v14) = 5;
    sub_1B6E32F58();
    uint64_t v14 = v3[1];
    char v13 = 6;
    sub_1B6E32FA8();
    LOBYTE(v14) = *((unsigned char *)v3 + 29);
    char v13 = 7;
    sub_1B66C5E1C();
    sub_1B6E32FA8();
    LOBYTE(v14) = 8;
    sub_1B6E32F78();
    LOBYTE(v14) = 9;
    sub_1B6E32F58();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
}

double sub_1B6C8EEE8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  sub_1B6C9ABE4(a1, (uint64_t)v6);
  if (!v2)
  {
    double result = *(double *)v6;
    long long v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + 16) = v5;
    *(_DWORD *)(a2 + 32) = v7;
  }
  return result;
}

uint64_t sub_1B6C8EF30(void *a1)
{
  return sub_1B6C8EB84(a1);
}

uint64_t sub_1B6C8EF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v7 = a1;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(void *)(v8 + 32);
  ecs_stack_allocator_push_snapshot(v9);
  uint64_t v10 = sub_1B695E820(*(void *)v3);
  uint64_t v461 = v11;
  if (v10)
  {
    uint64_t v12 = v10;
    swift_retain();
    sub_1B62F46E8();
    if (v461 >= 1)
    {
      float v14 = v13;
      uint64_t v460 = v9;
      uint64_t v448 = *(unsigned int *)(a3 + 8);
      uint64_t v450 = v8;
      uint64_t v445 = *(unsigned int *)(a3 + 12);
      uint64_t v15 = a2;
      uint64_t v16 = *(void *)(v7 + 24);
      uint64_t v17 = *(void *)(v7 + 56);
      uint64_t v456 = *(void *)(v7 + 48);
      uint64_t v453 = v15;
      uint64_t v18 = *(void *)(v15 + 104);
      if (*(unsigned char *)(v3 + 25))
      {
        if (*(void *)(v12 + 16))
        {
          uint64_t v19 = sub_1B62B2CE0(0x726F6C6F63, 0xE500000000000000);
          if (v20)
          {
            uint64_t v21 = *(void *)(v12 + 56) + 32 * v19;
            uint64_t v22 = *(void **)v21;
            uint64_t v23 = *(void *)(v21 + 8);
            if (objc_msgSend((id)swift_unknownObjectRetain(), sel_storageMode) == (id)2)
            {
              swift_unknownObjectRelease();
              uint64_t v24 = 0;
            }
            else
            {
              unint64_t v26 = (char *)objc_msgSend((id)swift_unknownObjectRetain(), sel_contents);
              id v27 = v22;
              swift_unknownObjectRelease();
              uint64_t v24 = &v26[v23];
            }
            uint64_t v28 = sub_1B62C9024((uint64_t)&type metadata for Color, (uint64_t)&off_1F0F9ECD8, *(uint64_t **)(v7 + 88), *(void *)(v7 + 96), *(void *)(v7 + 104), v450);
            uint64_t v29 = v17 - v456;
            if (v17 != v456)
            {
              uint64_t v30 = v16 + v18;
              uint64_t v31 = (_OWORD *)(v28 + 16 * v456);
              do
              {
                *v31++ = *(_OWORD *)&v24[16 * (v30 % v461)];
                ++v30;
                --v29;
              }
              while (v29);
            }
          }
        }
      }
      if ((*(unsigned char *)(v4 + 28) & 1) != 0 && *(void *)(v12 + 16))
      {
        uint64_t v32 = sub_1B62B2CE0(1702521203, 0xE400000000000000);
        if (v33)
        {
          float32x2_t v34 = (void *)(*(void *)(v12 + 56) + 32 * v32);
          uint64_t v35 = v34[1];
          uint64_t v458 = v7;
          uint64_t v36 = v12;
          uint64_t v37 = v34[2];
          uint64_t v38 = v34[3];
          float32x4_t v39 = (void *)swift_unknownObjectRetain();
          uint64_t v40 = v38;
          uint64_t v12 = v36;
          uint64_t v7 = v458;
          char v41 = sub_1B6C8AA54(v39, v35, v37, v40);
          LOBYTE(v37) = v42;
          swift_unknownObjectRelease();
          if ((v37 & 1) == 0)
          {
            uint64_t v43 = sub_1B67A82F8();
            if (v44)
            {
              uint64_t v80 = sub_1B62C9024((uint64_t)&type metadata for Scale, (uint64_t)&off_1F0F9F508, *(uint64_t **)(v458 + 88), *(void *)(v458 + 96), *(void *)(v458 + 104), v450);
              uint64_t v81 = v17 - v456;
              if (v17 != v456)
              {
                uint64_t v82 = v16 + v18;
                uint64_t v83 = (float32x4_t *)(v80 + 16 * v456);
                do
                {
                  uint64_t v84 = (const float *)&v41[4 * (v82 % v461)];
                  float32x4_t v85 = vld1q_dup_f32(v84);
                  v85.i32[3] = 0;
                  *v83++ = v85;
                  ++v82;
                  --v81;
                }
                while (v81);
              }
            }
            else
            {
              uint64_t v45 = v17 - v456;
              if (v17 != v456)
              {
                uint64_t v46 = v16 + v18;
                double v47 = (_DWORD *)(v43 + 4 * v456);
                do
                {
                  *v47++ = *(_DWORD *)&v41[4 * (v46 % v461)];
                  ++v46;
                  --v45;
                }
                while (v45);
              }
            }
            goto LABEL_46;
          }
        }
        if (!*(void *)(v12 + 16)) {
          goto LABEL_46;
        }
        uint64_t v48 = sub_1B62B2CE0(1702521203, 0xE400000000000000);
        if (v49)
        {
          long long v50 = (void *)(*(void *)(v12 + 56) + 32 * v48);
          uint64_t v51 = v50[1];
          uint64_t v459 = v7;
          uint64_t v52 = v12;
          uint64_t v53 = v50[2];
          uint64_t v54 = v50[3];
          float32x4_t v55 = (void *)swift_unknownObjectRetain();
          uint64_t v56 = v54;
          uint64_t v12 = v52;
          uint64_t v7 = v459;
          long long v57 = sub_1B6C8AAF4(v55, v51, v53, v56);
          LOBYTE(v53) = v58;
          swift_unknownObjectRelease();
          if ((v53 & 1) == 0)
          {
            uint64_t v59 = sub_1B67A836C();
            if (v60)
            {
              uint64_t v86 = sub_1B62C9024((uint64_t)&type metadata for Scale, (uint64_t)&off_1F0F9F508, *(uint64_t **)(v459 + 88), *(void *)(v459 + 96), *(void *)(v459 + 104), v450);
              uint64_t v88 = v17 - v456;
              if (v17 != v456)
              {
                uint64_t v89 = v16 + v18;
                char v90 = (_OWORD *)(v86 + 16 * v456);
                do
                {
                  *(void *)&long long v87 = *(void *)&v57[8 * (v89 % v461)];
                  *v90++ = v87;
                  ++v89;
                  --v88;
                }
                while (v88);
              }
            }
            else
            {
              uint64_t v61 = v17 - v456;
              if (v17 != v456)
              {
                uint64_t v62 = v16 + v18;
                __n128 v63 = (void *)(v59 + 8 * v456);
                do
                {
                  *v63++ = *(void *)&v57[8 * (v62 % v461)];
                  ++v62;
                  --v61;
                }
                while (v61);
              }
            }
            goto LABEL_46;
          }
        }
        if (!*(void *)(v12 + 16)) {
          goto LABEL_46;
        }
        uint64_t v64 = sub_1B62B2CE0(1702521203, 0xE400000000000000);
        if ((v65 & 1) == 0) {
          goto LABEL_46;
        }
        uint64_t v441 = v17;
        uint64_t v66 = v18;
        uint64_t v67 = v16;
        uint64_t v68 = v12;
        uint64_t v69 = (void *)(*(void *)(v12 + 56) + 32 * v64);
        uint64_t v70 = v69[1];
        uint64_t v71 = v69[2];
        uint64_t v72 = v69[3];
        unint64_t v73 = (void *)swift_unknownObjectRetain();
        uint64_t v74 = sub_1B6C8AB94(v73, v70, v71, v72);
        LOBYTE(v71) = v75;
        swift_unknownObjectRelease();
        if (v71)
        {
          uint64_t v12 = v68;
          uint64_t v16 = v67;
          goto LABEL_72;
        }
        uint64_t v76 = sub_1B67A83E0();
        uint64_t v12 = v68;
        if ((v78 & 1) == 0)
        {
          uint64_t v79 = v441 - v456;
          uint64_t v16 = v67;
          if (v441 != v456)
          {
            uint64_t v18 = v66;
            uint64_t v239 = v16 + v66;
            uint64_t v240 = (_OWORD *)(v76 + 16 * v456);
            do
            {
              uint64_t v241 = &v74[12 * (v239 % v461)];
              *(void *)&long long v242 = *(void *)v241;
              DWORD2(v242) = *((_DWORD *)v241 + 2);
              HIDWORD(v242) = v77;
              *v240++ = v242;
              ++v239;
              --v79;
            }
            while (v79);
            goto LABEL_73;
          }
LABEL_72:
          uint64_t v18 = v66;
LABEL_73:
          uint64_t v17 = v441;
          goto LABEL_46;
        }
        uint64_t v142 = sub_1B6642D9C(*(void *)(v7 + 8), v7);
        uint64_t v144 = v441 - v456;
        uint64_t v16 = v67;
        uint64_t v18 = v66;
        uint64_t v17 = v441;
        if (v441 != v456)
        {
          uint64_t v145 = v16 + v18;
          unint64_t v146 = (_OWORD *)(v142 + 16 * v456);
          do
          {
            unint64_t v147 = &v74[12 * (v145 % v461)];
            *(void *)&long long v148 = *(void *)v147;
            DWORD2(v148) = *((_DWORD *)v147 + 2);
            HIDWORD(v148) = v143;
            *v146++ = v148;
            ++v145;
            --v144;
          }
          while (v144);
        }
      }
LABEL_46:
      if (*(void *)(v12 + 16) && (uint64_t v91 = sub_1B62B2CE0(0x797469636F6C6576, 0xE800000000000000), (v92 & 1) != 0))
      {
        uint64_t v93 = (void *)(*(void *)(v12 + 56) + 32 * v91);
        uint64_t v94 = v93[1];
        uint64_t v95 = v93[2];
        uint64_t v96 = v93[3];
        uint64_t v97 = swift_unknownObjectRetain();
      }
      else
      {
        uint64_t v97 = 0;
        uint64_t v94 = 0;
        uint64_t v95 = 0;
        uint64_t v96 = 0;
      }
      if ((*(unsigned char *)(v4 + 26) & 1) == 0) {
        goto LABEL_89;
      }
      if (v97)
      {
        uint64_t v98 = (void *)swift_unknownObjectRetain();
        uint64_t v99 = sub_1B6C8AB94(v98, v94, v95, v96);
        char v101 = v100;
        swift_unknownObjectRelease();
        if ((v101 & 1) == 0)
        {
          uint64_t v102 = sub_1B6642C74(*(void *)(v7 + 8), v7);
          if ((*(unsigned char *)(v453 + 49) & 1) != 0
            || (uint64_t v103 = v102,
                sub_1B62E9D50((void *)(v448 | (v445 << 32)), (uint64_t)v462),
                sub_1B62D7FE8((uint64_t)v462, (uint64_t)&v469, qword_1EB97EA20, (uint64_t)&type metadata for WorldTransform), uint64_t v102 = v103, (v472 & 1) != 0))
          {
            uint64_t v104 = v17 - v456;
            if (v17 != v456)
            {
              uint64_t v105 = v16 + v18;
              long long v106 = (_OWORD *)(v102 + 16 * v456);
              do
              {
                uint64_t v107 = &v99[12 * (v105 % v461)];
                *(void *)&long long v108 = *(void *)v107;
                *((void *)&v108 + 1) = *((unsigned int *)v107 + 2);
                *v106++ = v108;
                ++v105;
                --v104;
              }
              while (v104);
            }
            goto LABEL_88;
          }
          uint64_t v110 = v17 - v456;
          if (v17 == v456)
          {
LABEL_88:
            sub_1B6C94AA8(v102, v456, v17, (uint64_t *)(v453 + 8), *(float *)(v4 + 16), *(float *)(v4 + 20));
LABEL_89:
            int v109 = 0;
            goto LABEL_90;
          }
          int32x4_t v111 = (int32x4_t)vmulq_f32(v469, v469);
          int32x4_t v112 = (int32x4_t)vmulq_f32(v470, v470);
          int32x4_t v113 = (int32x4_t)vmulq_f32(v471, v471);
          int32x4_t v114 = vzip2q_s32(v111, v113);
          float32x4_t v115 = (float32x4_t)vzip1q_s32(vzip1q_s32(v111, v113), v112);
          float32x4_t v116 = (float32x4_t)vtrn2q_s32(v111, v112);
          v116.i32[2] = v113.i32[1];
          float32x4_t v117 = vaddq_f32((float32x4_t)vzip1q_s32(v114, vdupq_laneq_s32(v112, 2)), vaddq_f32(v115, v116));
          v116.i64[0] = 0x80000000800000;
          v116.i64[1] = 0x80000000800000;
          int8x16_t v118 = (int8x16_t)vcgeq_f32(v116, v117);
          v117.i32[3] = 0;
          float32x4_t v119 = vrsqrteq_f32(v117);
          float32x4_t v120 = vmulq_f32(v119, vrsqrtsq_f32(v117, vmulq_f32(v119, v119)));
          int32x4_t v121 = (int32x4_t)v118;
          v121.i32[3] = 0;
          float32x4_t v122 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v121), (int8x16_t)v117, (int8x16_t)vmulq_f32(v120, vrsqrtsq_f32(v117, vmulq_f32(v120, v120))));
          float32x4_t v123 = vmulq_n_f32(v469, v122.f32[0]);
          float32x4_t v124 = vmulq_lane_f32(v470, *(float32x2_t *)v122.f32, 1);
          float32x4_t v125 = vmulq_laneq_f32(v471, v122, 2);
          int8x16_t v126 = (int8x16_t)vuzp1q_s32((int32x4_t)v125, (int32x4_t)v125);
          float32x4_t v127 = (float32x4_t)vuzp1q_s32((int32x4_t)v124, (int32x4_t)v124);
          int32x4_t v128 = (int32x4_t)v123;
          if (v118.i32[0])
          {
            int8x16_t v129 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v126, (int8x16_t)v125, 0xCuLL), vnegq_f32(v124)), v125, (float32x4_t)vextq_s8((int8x16_t)v127, (int8x16_t)v124, 0xCuLL));
            int32x4_t v128 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v129, (int32x4_t)v129), v129, 0xCuLL);
          }
          float32x4_t v130 = (float32x4_t)vuzp1q_s32((int32x4_t)v123, (int32x4_t)v123);
          float32x4_t v131 = v124;
          if (v118.i32[1])
          {
            int8x16_t v126 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v130, (int8x16_t)v123, 0xCuLL), vnegq_f32(v125)), v123, (float32x4_t)vextq_s8(v126, (int8x16_t)v125, 0xCuLL));
            float32x4_t v131 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v126, (int32x4_t)v126), v126, 0xCuLL);
          }
          if (v118.i32[2])
          {
            int8x16_t v118 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)v127, (int8x16_t)v124, 0xCuLL), vnegq_f32(v123)), v124, (float32x4_t)vextq_s8((int8x16_t)v130, (int8x16_t)v123, 0xCuLL));
            float32x4_t v125 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v118, (int32x4_t)v118), v118, 0xCuLL);
          }
          float v132 = (float)(*(float *)v128.i32 + v131.f32[1]) + v125.f32[2];
          if (v132 > 0.0)
          {
            float32x4_t v133 = (float32x4_t)vzip2q_s32((int32x4_t)v131, vuzp1q_s32((int32x4_t)v131, (int32x4_t)v125));
            v133.i32[2] = v128.i32[1];
            float v134 = sqrtf(v132 + 1.0);
            float32x4_t v135 = (float32x4_t)vtrn2q_s32((int32x4_t)v125, vzip2q_s32((int32x4_t)v125, v128));
            v135.i32[2] = v131.i32[0];
            float32x4_t v137 = vsubq_f32(v133, v135);
            v133.f32[3] = v134;
            v135.f32[3] = v134;
            float32x4_t v136 = vmulq_f32(v133, v135);
            v137.i32[3] = v136.i32[3];
LABEL_70:
            v136.f32[0] = 0.5 / v134;
            float32x4_t v138 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v136.f32, 0);
            goto LABEL_86;
          }
          if (*(float *)v128.i32 < v131.f32[1] || *(float *)v128.i32 < v125.f32[2])
          {
            if (v131.f32[1] <= v125.f32[2])
            {
              float v134 = sqrtf((float)((float)(v125.f32[2] + 1.0) - *(float *)v128.i32) - v131.f32[1]);
              *(float32x2_t *)v137.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v128, (int32x4_t)v131), *(float32x2_t *)v125.f32);
              float32x2_t v243 = (float32x2_t)__PAIR64__(v128.u32[1], LODWORD(v134));
              float32x2_t v244 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v131.f32, 0);
              *(float32x2_t *)v136.f32 = vsub_f32(*(float32x2_t *)v128.i8, v244);
              v244.f32[0] = v134;
              v244.i32[0] = vmul_f32(v243, v244).u32[0];
              v244.i32[1] = v136.i32[1];
              *(float32x2_t *)&v137.u32[2] = v244;
              goto LABEL_70;
            }
            float v149 = sqrtf((float)((float)(v131.f32[1] + 1.0) - *(float *)v128.i32) - v125.f32[2]);
            *(int32x2_t *)v118.i8 = vdup_laneq_s32((int32x4_t)v131, 2);
            int8x16_t v140 = v118;
            *(float *)v140.i32 = v149;
            v140.i32[0] = vmul_f32(*(float32x2_t *)v140.i8, (float32x2_t)__PAIR64__(v125.u32[1], LODWORD(v149))).u32[0];
            float32x4_t v127 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v128.i8, 1);
            v140.i32[1] = vadd_f32(*(float32x2_t *)&v118, *(float32x2_t *)&v125).i32[1];
            int8x16_t v141 = (int8x16_t)vaddq_f32(v127, v131);
            int32x2_t v154 = (int32x2_t)vsubq_f32(v125, (float32x4_t)vdupq_laneq_s32(v128, 2)).u64[0];
            float32x4_t v138 = (float32x4_t)vextq_s8(vextq_s8(v141, v141, 4uLL), v140, 0xCuLL);
            v138.i32[3] = v154.i32[0];
          }
          else
          {
            float v149 = sqrtf((float)((float)(*(float *)v128.i32 + 1.0) - v131.f32[1]) - v125.f32[2]);
            float32x2_t v150 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v131.f32, 0);
            float32x2_t v151 = vadd_f32(*(float32x2_t *)v128.i8, v150);
            v150.f32[0] = v149;
            v138.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v128.u32[1], LODWORD(v149)), v150).u32[0];
            v138.i32[1] = v151.i32[1];
            float32x2_t v152 = (float32x2_t)vzip2q_s32(v128, (int32x4_t)v131).u64[0];
            LODWORD(v153) = vadd_f32(v152, *(float32x2_t *)v125.f32).u32[0];
            int32x2_t v154 = (int32x2_t)vsub_f32(v152, *(float32x2_t *)v125.f32);
            HIDWORD(v153) = v154.i32[1];
            v138.i64[1] = v153;
          }
          *(float *)v154.i32 = 0.5 / v149;
          float32x4_t v137 = (float32x4_t)vdupq_lane_s32(v154, 0);
LABEL_86:
          float32x4_t v155 = vmulq_f32(v137, v138);
          float32x4_t v156 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v155, (int32x4_t)v155), (int8x16_t)v155, 0xCuLL);
          float32x4_t v157 = vnegq_f32(v155);
          uint64_t v158 = v16 + v18;
          unint64_t v159 = (int8x16_t *)(v103 + 16 * v456);
          do
          {
            unint64_t v160 = &v99[12 * (v158 % v461)];
            v130.i64[0] = *(void *)v160;
            float32x4_t v161 = v130;
            v161.i32[2] = *((_DWORD *)v160 + 2);
            v130.i32[2] = v161.i32[2];
            float32x4_t v162 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v161, (int32x4_t)v161), (int8x16_t)v161, 0xCuLL), v157), v161, v156);
            int8x16_t v163 = (int8x16_t)vaddq_f32(v162, v162);
            float32x4_t v164 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v163, (int32x4_t)v163), v163, 0xCuLL);
            v161.i32[3] = v126.i32[3];
            int8x16_t v165 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v164, (int32x4_t)v164), (int8x16_t)v164, 0xCuLL), v157), v164, v156);
            int8x16_t v126 = (int8x16_t)vaddq_f32(vaddq_f32(v130, vmulq_laneq_f32(v164, v155, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v165, (int32x4_t)v165), v165, 0xCuLL));
            v130.i32[3] = v127.i32[3];
            v126.i32[3] = 0;
            ++v158;
            *v159++ = v126;
            v126.i32[3] = v161.i32[3];
            --v110;
          }
          while (v110);
          goto LABEL_88;
        }
        int v109 = 0;
      }
      else
      {
        int v109 = 1;
      }
LABEL_90:
      unint64_t v166 = (void *)sub_1B6C94B54(v12, 0x6E6F697469736F70, 0xE800000000000000);
      if (!v166
        || (uint64_t v439 = v18,
            uint64_t v170 = v16,
            __n128 v171 = sub_1B6C8AB94(v166, v167, v168, v169),
            char v173 = v172,
            swift_unknownObjectRelease(),
            (v173 & 1) != 0))
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }
      else
      {
        uint64_t v174 = (void *)sub_1B6C94B54(v12, 0x6C616D726F6ELL, 0xE600000000000000);
        if (v174)
        {
          int v436 = sub_1B6C8AB94(v174, v175, v176, v177);
          uint64_t v433 = v178;
          char v180 = v179;
          swift_unknownObjectRelease();
          char v181 = v180 & 1;
        }
        else
        {
          int v436 = 0;
          uint64_t v433 = 0;
          char v181 = 1;
        }
        char v434 = v181;
        uint64_t v437 = (uint64_t)v171;
        int v438 = v109;
        uint64_t v442 = v17;
        if (*(void *)(v12 + 16)
          && (uint64_t v183 = sub_1B62B2CE0(0x7461746E6569726FLL, 0xEB000000006E6F69), (v184 & 1) != 0))
        {
          uint64_t v185 = v12;
          unsigned int v186 = (void *)(*(void *)(v12 + 56) + 32 * v183);
          uint64_t v187 = v186[1];
          uint64_t v188 = v186[2];
          uint64_t v189 = v186[3];
          int v190 = (void *)swift_unknownObjectRetain();
          uint64_t v191 = sub_1B6C8AC3C(v190, v187, v188, v189);
          uint64_t v193 = v192;
          LOBYTE(v189) = v194;
          swift_unknownObjectRelease();
          char v195 = v189 & 1;
        }
        else
        {
          uint64_t v185 = v12;
          uint64_t v191 = 0;
          uint64_t v193 = 0;
          char v195 = 1;
        }
        sub_1B62E9D50((void *)(v448 | (v445 << 32)), (uint64_t)v463);
        uint64_t v449 = v4;
        sub_1B6960470(*(void *)(v4 + 8), (uint64_t)v464);
        sub_1B62D7FE8((uint64_t)v464, (uint64_t)v467, &qword_1E9DD78D8, (uint64_t)&type metadata for Skeleton);
        if (*((void *)&v467[0] + 1))
        {
          v479.i64[0] = v468;
          float32x4_t v477 = (float32x4_t)v467[0];
          float32x4_t v478 = (float32x4_t)v467[1];
          uint64_t v196 = *(void *)(v450 + 32);
          ecs_stack_allocator_push_snapshot(v196);
          uint64_t v473 = v478.i64[0];
          uint64_t v197 = *(void *)(v478.i64[0] + 16);
          uint64_t v198 = (float32x4_t *)ecs_stack_allocator_allocate(v196, v197 << 6, 16);
          uint64_t v199 = (float32x4_t *)ecs_stack_allocator_allocate(v196, v197 << 6, 16);
          uint64_t v200 = (uint64_t *)v199;
          if (v197)
          {
            uint64_t v201 = (float32x2_t *)(v478.i64[1] + 48);
            unint64_t v202 = v198 + 2;
            uint64_t v203 = (float32x2_t *)(v479.i64[0] + 48);
            unint64_t v204 = v199 + 2;
            uint64_t v182 = v460;
            do
            {
              float32x4_t v205 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, COERCE_FLOAT(*(_OWORD *)v201->f32)), (float32x4_t)xmmword_1B6E4F320, *v201, 1), (float32x4_t)xmmword_1B6E4F2E0, *(float32x4_t *)v201->f32, 2), (float32x4_t)xmmword_1B6E4F370, *(float32x4_t *)v201->f32, 3);
              float32x4_t v206 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, COERCE_FLOAT(*(_OWORD *)v201[2].f32)), (float32x4_t)xmmword_1B6E4F320, v201[2], 1), (float32x4_t)xmmword_1B6E4F2E0, *(float32x4_t *)v201[2].f32, 2), (float32x4_t)xmmword_1B6E4F370, *(float32x4_t *)v201[2].f32, 3);
              float32x4_t v207 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, COERCE_FLOAT(*(_OWORD *)v201[4].f32)), (float32x4_t)xmmword_1B6E4F320, v201[4], 1), (float32x4_t)xmmword_1B6E4F2E0, *(float32x4_t *)v201[4].f32, 2), (float32x4_t)xmmword_1B6E4F370, *(float32x4_t *)v201[4].f32, 3);
              v202[-2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, COERCE_FLOAT(*(_OWORD *)v201[-2].f32)), (float32x4_t)xmmword_1B6E4F320, v201[-2], 1), (float32x4_t)xmmword_1B6E4F2E0, *(float32x4_t *)v201[-2].f32, 2), (float32x4_t)xmmword_1B6E4F370, *(float32x4_t *)v201[-2].f32, 3);
              v202[-1] = v205;
              *unint64_t v202 = v206;
              v202[1] = v207;
              v202 += 4;
              float32x4_t v208 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, COERCE_FLOAT(*(_OWORD *)v203->f32)), (float32x4_t)xmmword_1B6E4F320, *v203, 1), (float32x4_t)xmmword_1B6E4F2E0, *(float32x4_t *)v203->f32, 2), (float32x4_t)xmmword_1B6E4F370, *(float32x4_t *)v203->f32, 3);
              float32x4_t v209 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, COERCE_FLOAT(*(_OWORD *)v203[2].f32)), (float32x4_t)xmmword_1B6E4F320, v203[2], 1), (float32x4_t)xmmword_1B6E4F2E0, *(float32x4_t *)v203[2].f32, 2), (float32x4_t)xmmword_1B6E4F370, *(float32x4_t *)v203[2].f32, 3);
              float32x4_t v210 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, COERCE_FLOAT(*(_OWORD *)v203[4].f32)), (float32x4_t)xmmword_1B6E4F320, v203[4], 1), (float32x4_t)xmmword_1B6E4F2E0, *(float32x4_t *)v203[4].f32, 2), (float32x4_t)xmmword_1B6E4F370, *(float32x4_t *)v203[4].f32, 3);
              v204[-2] = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32((float32x4_t)xmmword_1B6E4F300, COERCE_FLOAT(*(_OWORD *)v203[-2].f32)), (float32x4_t)xmmword_1B6E4F320, v203[-2], 1), (float32x4_t)xmmword_1B6E4F2E0, *(float32x4_t *)v203[-2].f32, 2), (float32x4_t)xmmword_1B6E4F370, *(float32x4_t *)v203[-2].f32, 3);
              v204[-1] = v208;
              v201 += 8;
              *unint64_t v204 = v209;
              v204[1] = v210;
              v204 += 4;
              v203 += 8;
              --v197;
            }
            while (v197);
            if (!*(void *)(v185 + 16)) {
              goto LABEL_118;
            }
          }
          else
          {
            uint64_t v182 = v460;
            if (!*(void *)(v185 + 16))
            {
LABEL_118:
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              goto LABEL_119;
            }
          }
          uint64_t v212 = sub_1B62B2CE0(0x646E49746E696F6ALL, 0xEC00000073656369);
          if ((v213 & 1) == 0) {
            goto LABEL_118;
          }
          __n128 v446 = v200;
          v451 = (uint64_t *)v198;
          uint64_t v214 = (void *)(*(void *)(v185 + 56) + 32 * v212);
          uint64_t v215 = v214[1];
          uint64_t v216 = v214[2];
          uint64_t v217 = v214[3];
          uint64_t v218 = (void *)swift_unknownObjectRetain();
          unsigned int v443 = sub_1B6C8AD70(v218, v215, v216, v217);
          LOBYTE(v215) = v219;
          swift_unknownObjectRelease();
          if (v215)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            uint64_t v182 = v460;
            goto LABEL_119;
          }
          uint64_t v182 = v460;
          if (!*(void *)(v185 + 16)) {
            goto LABEL_118;
          }
          uint64_t v220 = sub_1B62B2CE0(0x696557746E696F6ALL, 0xEC00000073746867);
          if ((v221 & 1) == 0) {
            goto LABEL_118;
          }
          uint64_t v222 = *(void *)(v185 + 56) + 32 * v220;
          int v223 = *(void **)v222;
          uint64_t v224 = *(void *)(v222 + 8);
          uint64_t v225 = *(void *)(v222 + 16);
          uint64_t v226 = *(void *)(v222 + 24);
          swift_unknownObjectRetain();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          uint64_t v454 = sub_1B6C8AC3C(v223, v224, v225, v226);
          LOBYTE(v224) = v227;
          uint64_t v182 = v460;
          swift_unknownObjectRelease();
          if (v224)
          {
LABEL_119:
            ecs_stack_allocator_pop_snapshot(v196);
            swift_release();
            swift_unknownObjectRelease();
            sub_1B62D0468((uint64_t)&v477, (uint64_t)v474, &qword_1E9DD6158, (uint64_t (*)(uint64_t))type metadata accessor for SkeletonData);
            sub_1B62CA064((uint64_t)v474);
            uint64_t v475 = v477.i64[1];
            sub_1B62D8C3C((uint64_t)&v475);
            sub_1B62D8C3C((uint64_t)&v473);
            uint64_t v476 = v478.i64[1];
            sub_1B62D8C3C((uint64_t)&v476);
            v465[0].i64[0] = v479.i64[0];
            sub_1B62D8C3C((uint64_t)v465);
            return ecs_stack_allocator_pop_snapshot(v182);
          }
          uint64_t v228 = *(void *)(v7 + 8);
          uint64_t v444 = sub_1B6642ACC(v228, v7);
          if (v438) {
            uint64_t v423 = sub_1B6642C74(v228, v7);
          }
          else {
            uint64_t v423 = 0;
          }
          char v245 = *(unsigned char *)(v449 + 27);
          if (v245) {
            uint64_t v246 = sub_1B6642A68(v228, v7);
          }
          else {
            uint64_t v246 = 0;
          }
          id v247 = v443;
          uint64_t v248 = v454;
          float v249 = *(float *)(v449 + 32) / v14;
          if ((v438 & 1) != 0 || (*(unsigned char *)(v449 + 24)) && v249 > 0.0)
          {
            uint64_t v250 = v17 - v456;
            if (v17 != v456)
            {
              char v251 = *(unsigned char *)(v449 + 24);
              int v252 = *(unsigned __int8 *)(v449 + 29);
              if (v245) {
                char v253 = v434;
              }
              else {
                char v253 = 1;
              }
              uint64_t v254 = v170 + v439;
              uint64_t v255 = (float32x4_t *)(v444 + 16 * v456);
              uint64_t v256 = (float32x4_t *)(v423 + 16 * v456);
              uint64_t v257 = (float32x4_t *)(v246 + 16 * v456);
              float32x4_t v258 = 0uLL;
              __asm { FMOV            V25.4S, #1.0 }
              v231.i32[0] = 1.0;
              v263.i64[0] = 0x8000000080000000;
              v263.i64[1] = 0x8000000080000000;
              uint64_t v264 = v456;
              float v422 = *(float *)(v449 + 32) / v14;
              char v421 = v253;
              float32x4_t v420 = _Q25;
              do
              {
                uint64_t v272 = v254 % v461;
                float32x4_t v273 = *(float32x4_t *)&v248[16 * (v254 % v461)];
                uint16x4_t v274 = *(uint16x4_t *)&v247[8 * (v254 % v461)];
                uint64_t v275 = (uint64_t)v274.i16[0] << 6;
                float32x4_t v276 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v451 + v275), v273.f32[0]), v258);
                float32x4_t v277 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v451 + v275 + 16), v273.f32[0]), v258);
                float32x4_t v278 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v451 + v275 + 32), v273.f32[0]), v258);
                float32x4_t v279 = vaddq_f32(vmulq_n_f32(*(float32x4_t *)((char *)v451 + v275 + 48), v273.f32[0]), v258);
                float32x4_t v280 = (float32x4_t *)((char *)v446 + v275);
                float32x4_t v281 = v280[3];
                float32x4_t v282 = vaddq_f32(vmulq_n_f32(*v280, v273.f32[0]), v258);
                float32x4_t v283 = vaddq_f32(vmulq_n_f32(v280[1], v273.f32[0]), v258);
                float32x4_t v284 = vaddq_f32(vmulq_n_f32(v280[2], v273.f32[0]), v258);
                uint64_t v285 = (uint64_t)v274.i16[1] << 6;
                float32x4_t v286 = vaddq_f32(v276, vmulq_lane_f32(*(float32x4_t *)((char *)v451 + v285), *(float32x2_t *)v273.f32, 1));
                float32x4_t v287 = vaddq_f32(v277, vmulq_lane_f32(*(float32x4_t *)((char *)v451 + v285 + 16), *(float32x2_t *)v273.f32, 1));
                float32x4_t v288 = vaddq_f32(v278, vmulq_lane_f32(*(float32x4_t *)((char *)v451 + v285 + 32), *(float32x2_t *)v273.f32, 1));
                float32x4_t v289 = vaddq_f32(v279, vmulq_lane_f32(*(float32x4_t *)((char *)v451 + v285 + 48), *(float32x2_t *)v273.f32, 1));
                char v290 = (float32x4_t *)((char *)v446 + v285);
                float32x4_t v291 = v290[3];
                float32x4_t v292 = vaddq_f32(v282, vmulq_lane_f32(*v290, *(float32x2_t *)v273.f32, 1));
                float32x4_t v293 = vaddq_f32(v283, vmulq_lane_f32(v290[1], *(float32x2_t *)v273.f32, 1));
                float32x4_t v294 = vaddq_f32(v284, vmulq_lane_f32(v290[2], *(float32x2_t *)v273.f32, 1));
                uint32x4_t v295 = vmovl_u16(v274);
                v296.i64[0] = v295.u32[2];
                v296.i64[1] = v295.u32[3];
                int64x2_t v297 = vshrq_n_s64(vshlq_n_s64(v296, 0x30uLL), 0x30uLL);
                uint64_t v298 = v297.i64[1];
                uint64_t v299 = v297.i64[0] << 6;
                long long v300 = (float32x4_t *)&v451[8 * v297.i64[0]];
                __int32 v301 = v233.i32[3];
                float32x4_t v302 = vaddq_f32(v286, vmulq_laneq_f32(*v300, v273, 2));
                uint64_t v303 = (float32x4_t *)((char *)v446 + v299);
                float32x4_t v304 = vaddq_f32(v292, vmulq_laneq_f32(*v303, v273, 2));
                float32x4_t v305 = vaddq_f32(v293, vmulq_laneq_f32(v303[1], v273, 2));
                float32x4_t v306 = vaddq_f32(v294, vmulq_laneq_f32(v303[2], v273, 2));
                float32x4_t v307 = vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v281, v273.f32[0]), v258), vmulq_lane_f32(v291, *(float32x2_t *)v273.f32, 1)), vmulq_laneq_f32(v303[3], v273, 2));
                v298 <<= 6;
                float32x4_t v308 = vaddq_f32(v302, vmulq_laneq_f32(*(float32x4_t *)((char *)v451 + v298), v273, 3));
                float32x4_t v309 = vaddq_f32(vaddq_f32(v287, vmulq_laneq_f32(v300[1], v273, 2)), vmulq_laneq_f32(*(float32x4_t *)((char *)v451 + v298 + 16), v273, 3));
                float32x4_t v310 = vaddq_f32(vaddq_f32(v288, vmulq_laneq_f32(v300[2], v273, 2)), vmulq_laneq_f32(*(float32x4_t *)((char *)v451 + v298 + 32), v273, 3));
                float32x4_t v311 = vaddq_f32(vaddq_f32(v289, vmulq_laneq_f32(v300[3], v273, 2)), vmulq_laneq_f32(*(float32x4_t *)((char *)v451 + v298 + 48), v273, 3));
                int v312 = (float32x4_t *)((char *)v446 + v298);
                float32x4_t v313 = vmulq_laneq_f32(*v312, v273, 3);
                float32x4_t v314 = vmulq_laneq_f32(v312[1], v273, 3);
                float32x4_t v315 = vmulq_laneq_f32(v312[2], v273, 3);
                float32x4_t v316 = vmulq_laneq_f32(v312[3], v273, 3);
                float32x4_t v317 = vaddq_f32(v304, v313);
                char v318 = (const float *)(v437 + 12 * (v254 % v461));
                float32x4_t v319 = vld1q_dup_f32(v318++);
                float32x4_t v320 = vaddq_f32(v307, v316);
                v307.i32[0] = *(_DWORD *)(v437 + 12 * (v254 % v461) + 8);
                float32x4_t v321 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v320, vaddq_f32(v306, v315), v307.f32[0]), vaddq_f32(v305, v314), *v318), v317, v319);
                float32x4_t v233 = v321;
                v233.i32[3] = v301;
                float32x4_t v322 = vmlaq_f32(vmlaq_n_f32(vmlaq_n_f32(v311, v310, v307.f32[0]), v309, *v318), v308, v319);
                if (v251)
                {
                  if (v252)
                  {
                    if (v252 == 1)
                    {
                      uint64_t v323 = v250;
                      uint64_t v324 = v255;
                      v440 = v256;
                      uint64_t v435 = v257;
                      uint64_t v432 = v264;
                      float32x4_t v431 = v232;
                      float32x4_t v429 = v322;
                      float32x4_t v430 = v233;
                      float32x4_t v427 = v310;
                      __int32 v428 = v234;
                      float32x4_t v425 = v308;
                      float32x4_t v426 = v309;
                      float32x4_t v424 = v321;
                      uint64_t v325 = sub_1B6D27950();
                      float32x4_t v308 = v425;
                      float32x4_t v309 = v426;
                      float32x4_t v310 = v427;
                      __int32 v234 = v428;
                      float32x4_t v322 = v429;
                      float32x4_t v233 = v430;
                      float32x4_t v232 = v431;
                      uint64_t v264 = v432;
                      v263.i64[0] = 0x8000000080000000;
                      v263.i64[1] = 0x8000000080000000;
                      v231.i32[0] = 1.0;
                      _Q25 = v420;
                      float32x4_t v258 = 0uLL;
                      uint64_t v256 = v440;
                      uint64_t v255 = v324;
                      char v253 = v421;
                      uint64_t v250 = v323;
                      float v249 = v422;
                      uint64_t v248 = v454;
                      uint64_t v326 = v325 & 0xFFFFFF;
                      uint64_t v257 = v435;
                      float v327 = (float)(unint64_t)v326 * 0.000000059605;
                      float32x4_t v328 = vsubq_f32(v429, v424);
                      float v329 = vmuls_lane_f32(v327, v328, 2);
                      *(float32x2_t *)v330.f32 = vadd_f32(*(float32x2_t *)v424.f32, vmul_n_f32(*(float32x2_t *)v328.f32, v327));
                      v330.f32[2] = v424.f32[2] + v329;
                      id v247 = v443;
                      uint64_t v331 = (float32x4_t *)(v444 + 16 * v432);
                      float32x4_t v332 = vaddq_f32(*v324, v330);
                    }
                    else
                    {
                      v316.f32[0] = (float)(1.0 / (float)v461) * (float)v272;
                      float32x4_t v333 = vsubq_f32(v322, v321);
                      float v334 = vmuls_lane_f32(v316.f32[0], v333, 2);
                      *(float32x2_t *)v316.f32 = vadd_f32(*(float32x2_t *)v321.f32, vmul_n_f32(*(float32x2_t *)v333.f32, v316.f32[0]));
                      v316.f32[2] = v321.f32[2] + v334;
                      uint64_t v331 = (float32x4_t *)(v444 + 16 * v264);
                      float32x4_t v332 = vaddq_f32(v316, *v255);
                    }
                  }
                  else
                  {
                    float32x4_t v332 = v233;
                    uint64_t v331 = v255;
                  }
                  v332.i32[3] = v231.i32[0];
                  *uint64_t v331 = v332;
                }
                v322.i32[3] = v234;
                if (v438)
                {
                  float32x4_t v335 = vmulq_n_f32(vsubq_f32(v322, v233), v249);
                  v335.i32[3] = v232.i32[3];
                  float32x4_t v232 = v335;
                  v335.i32[3] = 0;
                  *uint64_t v256 = v335;
                }
                if (v253) {
                  goto LABEL_143;
                }
                int32x4_t v336 = (int32x4_t)vmulq_f32(v308, v308);
                int32x4_t v337 = (int32x4_t)vmulq_f32(v309, v309);
                int32x4_t v338 = (int32x4_t)vmulq_f32(v310, v310);
                int32x4_t v339 = vzip2q_s32(v336, v338);
                float32x4_t v340 = (float32x4_t)vzip1q_s32(vzip1q_s32(v336, v338), v337);
                float32x4_t v341 = (float32x4_t)vtrn2q_s32(v336, v337);
                v341.i32[2] = v338.i32[1];
                float32x4_t v342 = vaddq_f32((float32x4_t)vzip1q_s32(v339, vdupq_laneq_s32(v337, 2)), vaddq_f32(v340, v341));
                int32x4_t v343 = vceqzq_f32(v342);
                v343.i32[3] = 0;
                float32x4_t v344 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v343), (int8x16_t)v342, (int8x16_t)vdivq_f32(_Q25, v342));
                float32x4_t v345 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(vmulq_laneq_f32(v310, v344, 2), *(float *)&v436[12 * v272 + 8]), vmulq_lane_f32(v309, *(float32x2_t *)v344.f32, 1), *(float *)&v436[12 * v272 + 4]), vmulq_n_f32(v308, v344.f32[0]), *(float *)&v436[12 * v272]);
                float32x4_t v346 = vmulq_f32(v345, v345);
                v346.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v346, 2), vaddq_f32(v346, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v346.f32, 1))).u64[0];
                float32x4_t v347 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v346.f32, 0);
                v347.i32[3] = 0;
                float32x4_t v348 = vrsqrteq_f32(v347);
                float32x4_t v349 = vmulq_f32(v348, vrsqrtsq_f32(v347, vmulq_f32(v348, v348)));
                int8x16_t v353 = (int8x16_t)vmulq_f32(v345, vmulq_f32(v349, vrsqrtsq_f32(v347, vmulq_f32(v349, v349))));
                int32x4_t v350 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v346.f32[0] != 0.0)), 0x1FuLL));
                v350.i32[3] = 0;
                int8x16_t v270 = (int8x16_t)vcltzq_s32(v350);
                float32x4_t v351 = (float32x4_t)vbslq_s8(v270, v353, (int8x16_t)v345);
                v349.i32[0] = v351.i32[2];
                v337.i32[0] = vbslq_s8(v263, v231, (int8x16_t)v349).i32[0];
                *(float *)v270.i32 = v351.f32[1] / (float)(fabsf(v351.f32[2]) + *(float *)v231.i32);
                *(float *)v339.i32 = vmuls_lane_f32(*(float *)v270.i32, *(float32x2_t *)v351.f32, 1);
                *(float *)v270.i32 = -(float)(v351.f32[0] * *(float *)v270.i32);
                float v352 = v351.f32[2] + (float)(*(float *)v337.i32 * *(float *)v339.i32);
                *(float *)v353.i32 = *(float *)v337.i32 * *(float *)v270.i32;
                float v354 = *(float *)v231.i32 - *(float *)v339.i32;
                float v355 = vmuls_lane_f32(-*(float *)v337.i32, *(float32x2_t *)v351.f32, 1);
                float v356 = v351.f32[2] + (float)(v352 + v354);
                if (v356 > 0.0)
                {
                  float32x2_t v265 = (float32x2_t)vrev64_s32(*(int32x2_t *)v351.f32);
                  *(int32x2_t *)v269.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v351.f32, *(float32x2_t *)v351.f32), 0);
                  v269.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v265.u32[1], LODWORD(v355)), v265).u32[0];
                  float32x2_t v266 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v356 + *(float *)v231.i32)), v353.u32[0]);
                  float32x2_t v267 = vmul_f32(v266, v266);
                  v266.i32[0] = v270.i32[0];
                  unsigned __int32 v268 = vsub_f32(*(float32x2_t *)v353.i8, v266).u32[0];
                  v270.i32[1] = v267.i32[1];
                  v269.i64[1] = v270.i64[0];
                  *(float *)v270.i32 = 0.5 / v266.f32[1];
                }
                else
                {
                  if (v352 >= v354 && v352 >= v351.f32[2])
                  {
                    float v359 = sqrtf((float)((float)(v352 + *(float *)v231.i32) - v354) - v351.f32[2]);
                    v271.f32[0] = v359 * v359;
                    v271.f32[1] = *(float *)v270.i32 + *(float *)v353.i32;
                    int32x2_t v360 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v355), v351.u32[0]), *(float32x2_t *)v351.f32);
LABEL_162:
                    *(int32x2_t *)&v271.u32[2] = v360;
                    *(float *)v360.i32 = 0.5 / v359;
                    float32x4_t v269 = (float32x4_t)vdupq_lane_s32(v360, 0);
                    goto LABEL_142;
                  }
                  if (v354 > v351.f32[2])
                  {
                    float v359 = sqrtf((float)((float)(v354 + *(float *)v231.i32) - v352) - v351.f32[2]);
                    v271.f32[0] = *(float *)v270.i32 + *(float *)v353.i32;
                    float32x2_t v358 = (float32x2_t)vrev64_s32(*(int32x2_t *)v351.f32);
                    v271.f32[1] = v359 * v359;
                    int32x2_t v360 = (int32x2_t)vadd_f32(v358, (float32x2_t)__PAIR64__(v358.u32[1], LODWORD(v355)));
                    goto LABEL_162;
                  }
                  float v361 = sqrtf((float)((float)(v351.f32[2] + *(float *)v231.i32) - v352) - v354);
                  v269.i32[0] = vsubq_f32(v351, v351).u32[0];
                  v269.f32[1] = v351.f32[1] + v355;
                  v269.f32[2] = v361 * v361;
                  v269.f32[3] = *(float *)v353.i32 - *(float *)v270.i32;
                  *(float *)v270.i32 = 0.5 / v361;
                }
                float32x4_t v271 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v270.i8, 0);
LABEL_142:
                *uint64_t v257 = vmulq_f32(v269, v271);
LABEL_143:
                ++v254;
                ++v255;
                ++v256;
                ++v257;
                ++v264;
                --v250;
              }
              while (v250);
            }
LABEL_165:
            uint64_t v182 = v460;
            if (v438) {
              sub_1B6C94AA8(v423, v456, v442, (uint64_t *)(v453 + 8), *(float *)(v449 + 16), *(float *)(v449 + 20));
            }
            goto LABEL_119;
          }
          uint64_t v362 = v17 - v456;
          if (v17 == v456) {
            goto LABEL_165;
          }
          char v363 = *(unsigned char *)(v449 + 24);
          uint64_t v364 = v170 + v439;
          v365 = (float32x4_t *)(v444 + 16 * v456);
          v366 = (float32x4_t *)(v423 + 16 * v456);
          uint64_t v367 = (float32x4_t *)(v246 + 16 * v456);
          __asm { FMOV            V1.4S, #1.0 }
          v229.i32[0] = 1.0;
          v369.i64[0] = 0x8000000080000000;
          v369.i64[1] = 0x8000000080000000;
          while (1)
          {
            uint64_t v371 = v364 % v461;
            float32x4_t v372 = *(float32x4_t *)&v454[16 * (v364 % v461)];
            uint16x4_t v373 = *(uint16x4_t *)&v443[8 * (v364 % v461)];
            v374 = (float32x4_t *)&v451[8 * (uint64_t)v373.i16[0]];
            __n128 v375 = (float32x4_t *)&v451[8 * (uint64_t)v373.i16[1]];
            uint32x4_t v376 = vmovl_u16(v373);
            v377.i64[0] = v376.u32[2];
            v377.i64[1] = v376.u32[3];
            int64x2_t v378 = vshrq_n_s64(vshlq_n_s64(v377, 0x30uLL), 0x30uLL);
            uint64_t v379 = (float32x4_t *)&v451[8 * v378.i64[0]];
            v380 = (float32x4_t *)&v451[8 * v378.i64[1]];
            float32x4_t v381 = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(*v374, v372.f32[0]), (float32x4_t)0), vmulq_lane_f32(*v375, *(float32x2_t *)v372.f32, 1)), vmulq_laneq_f32(*v379, v372, 2)), vmulq_laneq_f32(*v380, v372, 3));
            float32x4_t v382 = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v374[1], v372.f32[0]), (float32x4_t)0), vmulq_lane_f32(v375[1], *(float32x2_t *)v372.f32, 1)), vmulq_laneq_f32(v379[1], v372, 2)), vmulq_laneq_f32(v380[1], v372, 3));
            float32x4_t v383 = vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v374[2], v372.f32[0]), (float32x4_t)0), vmulq_lane_f32(v375[2], *(float32x2_t *)v372.f32, 1)), vmulq_laneq_f32(v379[2], v372, 2)), vmulq_laneq_f32(v380[2], v372, 3));
            if (v363)
            {
              float32x4_t v384 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(vaddq_f32(vaddq_f32(vaddq_f32(vaddq_f32(vmulq_n_f32(v374[3], v372.f32[0]), (float32x4_t)0), vmulq_lane_f32(v375[3], *(float32x2_t *)v372.f32, 1)), vmulq_laneq_f32(v379[3], v372, 2)), vmulq_laneq_f32(v380[3], v372, 3)), v383, *(float *)(v437 + 12 * v371 + 8)), v382, *(float *)(v437 + 12 * v371 + 4)), v381, *(float *)(v437 + 12 * v371));
              v384.i32[3] = 1.0;
              float32x4_t *v365 = v384;
            }
            if (!(((v245 & 1) == 0) & ~(_BYTE)v438 | v434 & 1)) {
              break;
            }
            float32x4_t v370 = v230;
LABEL_169:
            ++v364;
            ++v365;
            ++v366;
            ++v367;
            float32x4_t v230 = v370;
            if (!--v362) {
              goto LABEL_165;
            }
          }
          int32x4_t v385 = (int32x4_t)vmulq_f32(v381, v381);
          int32x4_t v386 = (int32x4_t)vmulq_f32(v382, v382);
          int32x4_t v387 = (int32x4_t)vmulq_f32(v383, v383);
          int32x4_t v388 = vzip2q_s32(v385, v387);
          float32x4_t v389 = (float32x4_t)vzip1q_s32(vzip1q_s32(v385, v387), v386);
          float32x4_t v390 = (float32x4_t)vtrn2q_s32(v385, v386);
          v390.i32[2] = v387.i32[1];
          float32x4_t v391 = vaddq_f32((float32x4_t)vzip1q_s32(v388, vdupq_laneq_s32(v386, 2)), vaddq_f32(v389, v390));
          int32x4_t v392 = vceqzq_f32(v391);
          v392.i32[3] = 0;
          float32x4_t v393 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v392), (int8x16_t)v391, (int8x16_t)vdivq_f32(_Q1, v391));
          float32x4_t v394 = vmlaq_n_f32(vmlaq_n_f32(vmulq_n_f32(vmulq_laneq_f32(v383, v393, 2), *(float *)&v436[12 * v371 + 8]), vmulq_lane_f32(v382, *(float32x2_t *)v393.f32, 1), *(float *)&v436[12 * v371 + 4]), vmulq_n_f32(v381, v393.f32[0]), *(float *)&v436[12 * v371]);
          float32x4_t v370 = v394;
          v370.i32[3] = v230.i32[3];
          if (v438)
          {
            float32x4_t v395 = v370;
            v395.i32[3] = 0;
            float32x4_t *v366 = v395;
          }
          if ((v245 & 1) == 0) {
            goto LABEL_169;
          }
          float32x4_t v396 = vmulq_f32(v394, v394);
          v396.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v396, 2), vaddq_f32(v396, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v396.f32, 1))).u64[0];
          float32x4_t v397 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v396.f32, 0);
          v397.i32[3] = 0;
          float32x4_t v398 = vrsqrteq_f32(v397);
          float32x4_t v399 = vmulq_f32(v398, vrsqrtsq_f32(v397, vmulq_f32(v398, v398)));
          int32x4_t v400 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v396.f32[0] != 0.0)), 0x1FuLL));
          v400.i32[3] = 0;
          int8x16_t v404 = (int8x16_t)vcltzq_s32(v400);
          float32x4_t v401 = (float32x4_t)vbslq_s8(v404, (int8x16_t)vmulq_f32(v394, vmulq_f32(v399, vrsqrtsq_f32(v397, vmulq_f32(v399, v399)))), (int8x16_t)v394);
          v399.i32[0] = v401.i32[2];
          float v402 = *(float *)vbslq_s8(v369, v229, (int8x16_t)v399).i32;
          *(float *)v404.i32 = v401.f32[1] / (float)(fabsf(v401.f32[2]) + 1.0);
          float v403 = vmuls_lane_f32(*(float *)v404.i32, *(float32x2_t *)v401.f32, 1);
          *(float *)v404.i32 = -(float)(v401.f32[0] * *(float *)v404.i32);
          float v405 = v401.f32[2] + (float)(v402 * v403);
          v394.f32[0] = v402 * *(float *)v404.i32;
          float v406 = 1.0 - v403;
          float v407 = vmuls_lane_f32(-v402, *(float32x2_t *)v401.f32, 1);
          float v408 = v401.f32[2] + (float)(v405 + v406);
          if (v408 > 0.0)
          {
            float32x2_t v409 = (float32x2_t)vrev64_s32(*(int32x2_t *)v401.f32);
            *(int32x2_t *)v413.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v401.f32, *(float32x2_t *)v401.f32), 0);
            v413.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v409.u32[1], LODWORD(v407)), v409).u32[0];
            float32x2_t v410 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v408 + 1.0)), v394.u32[0]);
            float32x2_t v411 = vmul_f32(v410, v410);
            v410.i32[0] = v404.i32[0];
            unsigned __int32 v412 = vsub_f32(*(float32x2_t *)v394.f32, v410).u32[0];
            v404.i32[1] = v411.i32[1];
            v413.i64[1] = v404.i64[0];
            *(float *)v404.i32 = 0.5 / v410.f32[1];
LABEL_187:
            float32x4_t v417 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v404.i8, 0);
            goto LABEL_188;
          }
          if (v405 < v406 || v405 < v401.f32[2])
          {
            if (v406 <= v401.f32[2])
            {
              float v419 = sqrtf((float)((float)(v401.f32[2] + 1.0) - v405) - v406);
              v401.i32[0] = vsubq_f32(v401, v401).u32[0];
              v413.f32[1] = v401.f32[1] + v407;
              v413.f32[2] = v419 * v419;
              v413.f32[3] = v394.f32[0] - *(float *)v404.i32;
              *(float *)v404.i32 = 0.5 / v419;
              goto LABEL_187;
            }
            float v416 = sqrtf((float)((float)(v406 + 1.0) - v405) - v401.f32[2]);
            v417.f32[0] = *(float *)v404.i32 + v394.f32[0];
            float32x2_t v415 = (float32x2_t)vrev64_s32(*(int32x2_t *)v401.f32);
            v417.f32[1] = v416 * v416;
            int32x2_t v418 = (int32x2_t)vadd_f32(v415, (float32x2_t)__PAIR64__(v415.u32[1], LODWORD(v407)));
          }
          else
          {
            float v416 = sqrtf((float)((float)(v405 + 1.0) - v406) - v401.f32[2]);
            v417.f32[0] = v416 * v416;
            v417.f32[1] = *(float *)v404.i32 + v394.f32[0];
            int32x2_t v418 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v407), v401.u32[0]), *(float32x2_t *)v401.f32);
          }
          *(int32x2_t *)&v417.u32[2] = v418;
          *(float *)v418.i32 = 0.5 / v416;
          float32x4_t v413 = (float32x4_t)vdupq_lane_s32(v418, 0);
LABEL_188:
          *uint64_t v367 = vmulq_f32(v413, v417);
          goto LABEL_169;
        }
        uint64_t v211 = v439 + v170 - v456;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1B62D7FE8((uint64_t)v463, (uint64_t)v465, qword_1EB97EA20, (uint64_t)&type metadata for WorldTransform);
        if (v466)
        {
          float32x4_t v479 = 0u;
          float32x4_t v480 = 0u;
          float32x4_t v477 = 0u;
          float32x4_t v478 = 0u;
          char v481 = 1;
        }
        else
        {
          float32x4_t v447 = v465[0];
          float32x4_t v452 = v465[1];
          float32x4_t v455 = v465[2];
          float32x4_t v457 = v465[3];
          *(double *)v235.i64 = sub_1B6335378();
          float32x4_t v477 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v235, v447.f32[0]), v236, *(float32x2_t *)v447.f32, 1), v237, v447, 2), v238, v447, 3);
          float32x4_t v478 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v235, v452.f32[0]), v236, *(float32x2_t *)v452.f32, 1), v237, v452, 2), v238, v452, 3);
          float32x4_t v479 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v235, v455.f32[0]), v236, *(float32x2_t *)v455.f32, 1), v237, v455, 2), v238, v455, 3);
          float32x4_t v480 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v235, v457.f32[0]), v236, *(float32x2_t *)v457.f32, 1), v237, v457, 2), v238, v457, 3);
          char v481 = 0;
        }
        sub_1B6C94BC8((uint64_t)&v477, v4, v7, v211, v461, v437, v438, (uint64_t)v436, v433, v434, v453, (uint64_t)v191, v193, v195);
      }
      swift_release();
      swift_unknownObjectRelease();
      uint64_t v182 = v460;
      return ecs_stack_allocator_pop_snapshot(v182);
    }
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return ecs_stack_allocator_pop_snapshot(v9);
}

uint64_t *sub_1B6C90A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  long long v3 = *(_OWORD *)(a3 + 104);
  v76[0] = *(_OWORD *)(a3 + 88);
  v76[1] = v3;
  uint64_t v77 = *(void *)(a3 + 120);
  sub_1B62C9DA8(a2, (uint64_t)v76, 0x200000000, v70);
  double result = (uint64_t *)sub_1B62D7FE8((uint64_t)v70, (uint64_t)v71, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  uint64_t v69 = (unsigned __int16 *)v71[0];
  if (v71[0])
  {
    uint64_t v56 = v75;
    if (v75 >= 1)
    {
      uint64_t v55 = v72;
      if (v72)
      {
        uint64_t v5 = 0;
        uint64_t v54 = v71[5];
        uint64_t v6 = v74;
        uint64_t v7 = v74[4];
        uint64_t v53 = v73;
        int v8 = *(unsigned __int8 *)(v73 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
        uint64_t v51 = v74 + 8;
        uint64_t v68 = v71[0] + 41;
        int v52 = v8;
        uint64_t v50 = v7;
        uint64_t v83 = v74;
        do
        {
          uint64_t v9 = (unsigned int *)(v54 + 48 * v5);
          uint64_t v10 = *v9;
          uint64_t v11 = v9[1];
          uint64_t v12 = v9[2];
          uint64_t v13 = *((void *)v9 + 2);
          uint64_t v14 = *((void *)v9 + 5);
          uint64_t v63 = *((void *)v9 + 4);
          uint64_t v64 = *((void *)v9 + 3);
          if (v8)
          {
            uint64_t v15 = *(os_unfair_lock_s **)(v14 + 376);
            swift_retain_n();
            os_unfair_lock_lock(v15);
            os_unfair_lock_lock(*(os_unfair_lock_t *)(v14 + 344));
            swift_release();
          }
          else
          {
            swift_retain();
          }
          ecs_stack_allocator_push_snapshot(v7);
          uint64_t v60 = v6[7];
          uint64_t v61 = v6[6];
          uint64_t v59 = v6[8];
          uint64_t v66 = v6[10];
          uint64_t v67 = v6[9];
          uint64_t v16 = v6[4];
          uint64_t v17 = *(void *)(*(void *)(*(void *)(*(void *)(v14 + 40) + 16) + 32) + 16) + 1;
          swift_retain();
          uint64_t v18 = ecs_stack_allocator_allocate(v16, 48 * v17, 8);
          v83[6] = v18;
          void v83[7] = v17;
          uint64_t v6 = v83;
          v51[1] = 0;
          _OWORD v51[2] = 0;
          void *v51 = 0;
          swift_release();
          v78[0] = v53;
          v78[1] = v14;
          uint64_t v62 = v14;
          v78[2] = v6;
          v78[3] = v12;
          v78[4] = (v11 - v10 + v12);
          v78[5] = v56;
          v78[6] = v10;
          v78[7] = v11;
          v78[8] = 0;
          v78[9] = 0;
          char v79 = 1;
          uint64_t v80 = v13;
          uint64_t v81 = v64;
          uint64_t v82 = v63;
          sub_1B6C8EF48((uint64_t)v78, a1, a3);
          unint64_t v19 = v6[6];
          uint64_t v20 = v6[8];
          if (!v20)
          {
            uint64_t v47 = v6[7];
            uint64_t v48 = (void *)v6[4];
            goto LABEL_47;
          }
          uint64_t v65 = v5;
          for (uint64_t i = 0; i != v20; ++i)
          {
            unint64_t v23 = v19;
            uint64_t v24 = (uint64_t *)(v19 + 48 * i);
            uint64_t v25 = *v24;
            unint64_t v26 = (void (*)(uint64_t))v24[4];
            uint64_t v27 = v6[9];
            if (v27) {
              BOOL v28 = v25 == v27;
            }
            else {
              BOOL v28 = 0;
            }
            if (v28 || !v69[11]) {
              goto LABEL_11;
            }
            unint64_t v29 = v69[9];
            uint64_t v30 = (void *)(v68 + v69[8]);
            uint64_t v31 = v24[2];
            uint64_t v32 = v30;
            unint64_t v33 = v29 >> 4;
            uint64_t v34 = v68;
            if (v29 >= 0x10)
            {
              while (*v32 != v25)
              {
                ++v34;
                v32 += 2;
                if (!--v33) {
                  goto LABEL_26;
                }
              }
              unsigned int v35 = *(unsigned __int8 *)(v34 + v69[10]);
              BOOL v36 = v35 > 5;
              int v37 = (1 << v35) & 0x23;
              if (v36 || v37 == 0)
              {
LABEL_11:
                uint64_t v22 = swift_retain();
                v26(v22);
                swift_release();
                goto LABEL_12;
              }
            }
LABEL_26:
            if (swift_conformsToProtocol2()) {
              uint64_t v39 = v31;
            }
            else {
              uint64_t v39 = 0;
            }
            if (v39)
            {
              if (v29 < 0x10) {
                goto LABEL_11;
              }
              uint64_t v40 = v30;
              unint64_t v41 = v29 >> 4;
              uint64_t v42 = v68;
              while (*v40 != v39)
              {
                ++v42;
                v40 += 2;
                if (!--v41) {
                  goto LABEL_39;
                }
              }
              unsigned int v43 = *(unsigned __int8 *)(v42 + v69[10]);
              BOOL v36 = v43 > 5;
              int v44 = (1 << v43) & 0x23;
              if (v36 || v44 == 0) {
                goto LABEL_11;
              }
LABEL_39:
              uint64_t v46 = 16 * (v29 >> 4);
              while (*v30 != v39)
              {
                v30 += 2;
                v46 -= 16;
                if (!v46) {
                  goto LABEL_11;
                }
              }
            }
LABEL_12:
            uint64_t v6 = v83;
            unint64_t v19 = v23;
          }
          uint64_t v47 = v83[7];
          unint64_t v19 = v83[6];
          uint64_t v48 = (void *)v83[4];
          if ((uint64_t)v83[8] >= 1)
          {
            unint64_t v49 = v83[6];
            swift_arrayDestroy();
            unint64_t v19 = v49;
          }
          uint64_t v5 = v65;
LABEL_47:
          uint64_t v7 = v50;
          ecs_stack_allocator_deallocate(v48, v19, 48 * v47);
          v6[6] = v61;
          v6[7] = v60;
          v6[8] = v59;
          v6[9] = v67;
          v6[10] = v66;
          sub_1B634507C((char *)v62);
          ecs_stack_allocator_pop_snapshot(v50);
          int v8 = v52;
          if (v52)
          {
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 344));
            os_unfair_lock_unlock(*(os_unfair_lock_t *)(v62 + 376));
          }
          swift_release();
          ++v5;
        }
        while (v5 != v55);
      }
    }
    return sub_1B632F170(v70);
  }
  return result;
}

uint64_t type metadata accessor for PointCacheEmitter.System()
{
  return self;
}

uint64_t sub_1B6C90F54(uint64_t *a1)
{
  uint64_t v2 = *a1;
  swift_retain();
  uint64_t v3 = a1[1];
  swift_retain();
  sub_1B695EE48(v3, &v17);
  swift_release();
  if (v20 == 2)
  {
    unsigned __int32 v5 = 0;
    unsigned __int32 v6 = 0;
    LOBYTE(v7) = 0;
    LOBYTE(v8) = 0;
    v4.i64[0] = 0x100010001;
    int v9 = 0;
    int v10 = 0x40000000;
    int v11 = 1065353216;
    unsigned __int32 v12 = -1;
    unsigned __int32 v13 = -1;
  }
  else
  {
    int v9 = v21;
    int v11 = v18;
    int v10 = v19;
    unsigned __int32 v13 = v17.n128_u32[2];
    unsigned __int32 v6 = v17.n128_u32[3];
    unsigned __int32 v12 = v17.n128_u32[0];
    unsigned __int32 v5 = v17.n128_u32[1];
    int8x16_t v14 = (int8x16_t)vdupq_n_s64(v20);
    unint64_t v7 = HIDWORD(v20) & 1;
    unint64_t v8 = v20 >> 40;
    int16x8_t v4 = (int16x8_t)vmvnq_s8((int8x16_t)vuzp1q_s32((int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v14, (int8x16_t)xmmword_1B6EBDCE0)), (int32x4_t)vceqzq_s64((int64x2_t)vandq_s8(v14, (int8x16_t)xmmword_1B6EBDCF0))));
    *(int8x8_t *)v4.i8 = vand_s8((int8x8_t)vmovn_s32((int32x4_t)v4), (int8x8_t)0x1000100010001);
  }
  unsigned __int32 v22 = v12;
  unsigned __int32 v23 = v5;
  unsigned __int32 v24 = v13;
  unsigned __int32 v25 = v6;
  int v26 = v11;
  int v27 = v10;
  unsigned __int32 v28 = vmovn_s16(v4).u32[0];
  char v29 = v7;
  char v30 = v8;
  int v31 = v9;
  uint64_t v15 = a1[4];
  swift_retain();
  sub_1B62F6B80((uint64_t)a1);
  sub_1B6C00CAC(v15, v2, v2, (uint64_t)a1);
  sub_1B62F648C((uint64_t)a1);
  return swift_release_n();
}

const char *sub_1B6C910A0()
{
  return "PointCacheEmitter.CPU";
}

uint64_t type metadata accessor for PointCacheEmitter.GPUSystem()
{
  return self;
}

const char *sub_1B6C910DC()
{
  return "PointCacheEmitter.GPU";
}

uint64_t sub_1B6C910F0()
{
  return type metadata accessor for PointCacheEmitter.GPUSystem();
}

unint64_t sub_1B6C91110()
{
  if (*(void *)(v0 + 8)) {
    return 0xD000000000000017;
  }
  else {
    return 0xD000000000000013;
  }
}

uint64_t sub_1B6C91150(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v257 = *MEMORY[0x1E4F143B8];
  sub_1B62E17B4();
  *(void *)&long long v244 = v7;
  MEMORY[0x1F4188790](v7, v8);
  uint64_t v243 = (uint64_t)&v224[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0)];
  long long v242 = (char *)sub_1B6E31098();
  uint64_t v240 = (char *)*((void *)v242 - 1);
  MEMORY[0x1F4188790](v242, v10);
  uint64_t v241 = &v224[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0)];
  uint64_t v251 = sub_1B6E323C8();
  uint64_t v12 = *(void *)(v251 - 8);
  MEMORY[0x1F4188790](v251, v13);
  float v249 = (uint64_t *)&v224[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0)];
  sub_1B62FFBB0(a1, a2);
  uint64_t v252 = a1;
  uint64_t v15 = sub_1B6AB35B0(0, a1, a2);
  if (!v16) {
    goto LABEL_72;
  }
  uint64_t v17 = v15;
  uint64_t v18 = v16;
  uint64_t v19 = sub_1B6E318C8();
  if (v17 == 0x656863616370 && v18 == 0xE600000000000000)
  {
    swift_bridgeObjectRelease();
    goto LABEL_6;
  }
  char v20 = sub_1B6E334B8();
  swift_bridgeObjectRelease();
  if ((v20 & 1) == 0)
  {
LABEL_72:
    sub_1B6BC7E64();
    swift_allocError();
    *uint64_t v80 = 0;
    v80[1] = 0;
    swift_willThrow();
LABEL_73:
    uint64_t v81 = v252;
    return sub_1B62C2360(v81, a2);
  }
LABEL_6:
  uint64_t v21 = v19 + 1;
  uint64_t v22 = sub_1B6AB35B0(v19 + 1, v252, a2);
  unint64_t v250 = a2;
  *(void *)&long long v253 = a3;
  if (!v23)
  {
    uint64_t v234 = 0;
    float32x4_t v235 = (char *)MEMORY[0x1E4FBC860];
    goto LABEL_82;
  }
  uint64_t v24 = v22;
  uint64_t v25 = v23;
  uint64_t v234 = 0;
  LODWORD(v248) = *MEMORY[0x1E4F280B8];
  uint64_t v246 = (uint64_t *)(v12 + 8);
  id v247 = (void (**)(uint64_t *, void, uint64_t))(v12 + 104);
  float32x4_t v235 = (char *)MEMORY[0x1E4FBC860];
  unint64_t v26 = 0x1E4F28000uLL;
  unint64_t v239 = v3;
  while (1)
  {
LABEL_8:
    v21 += sub_1B6E318C8() + 1;
    id v27 = objc_allocWithZone(*(Class *)(v26 + 4072));
    swift_bridgeObjectRetain();
    unsigned __int32 v28 = (void *)sub_1B6E31768();
    swift_bridgeObjectRelease();
    id v29 = objc_msgSend(v27, sel_initWithString_, v28);

    a2 = v250;
    sub_1B6E323A8();
    uint64_t v31 = v30;
    swift_bridgeObjectRelease();
    if (v31) {
      goto LABEL_13;
    }
    sub_1B6E323A8();
    uint64_t v33 = v32;
    swift_bridgeObjectRelease();
    if (v33)
    {
      sub_1B6E323A8();
      uint64_t v35 = v34;
      swift_bridgeObjectRelease();
      if (v35)
      {
        unint64_t v36 = v26;
        int v37 = v249;
        uint64_t v38 = v251;
        (*v247)(v249, v248, v251);
        uint64_t v39 = sub_1B6E323E8();
        uint64_t v40 = v37;
        unint64_t v26 = v36;
        uint64_t v41 = v38;
        a3 = (uint64_t *)v253;
        ((void (*)(uint64_t *, uint64_t))*v246)(v40, v41);
        if ((v39 & 0x100000000) == 0 && *(float *)&v39 == 1.0)
        {
LABEL_13:
          swift_bridgeObjectRelease();

          uint64_t v42 = v21;
          uint64_t v43 = v252;
          goto LABEL_14;
        }
        swift_bridgeObjectRelease();
        *(void *)&long long v256 = 0;
        *((void *)&v256 + 1) = 0xE000000000000000;
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        unint64_t v83 = 0xD000000000000010;
        uint64_t v84 = "version != 1.0 '";
      }
      else
      {
        swift_bridgeObjectRelease();
        *(void *)&long long v256 = 0;
        *((void *)&v256 + 1) = 0xE000000000000000;
        sub_1B6E328C8();
        swift_bridgeObjectRelease();
        unint64_t v83 = 0xD000000000000012;
        uint64_t v84 = "format != binary '";
      }
      *(void *)&long long v256 = v83;
      *((void *)&v256 + 1) = (unint64_t)(v84 - 32) | 0x8000000000000000;
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      sub_1B6E31948();
      long long v85 = v256;
      sub_1B6BC7E64();
      swift_allocError();
      *uint64_t v86 = v85;
      goto LABEL_79;
    }
    sub_1B6E323A8();
    uint64_t v46 = v45;
    swift_bridgeObjectRelease();
    if (v46) {
      break;
    }
    sub_1B6E323A8();
    uint64_t v48 = v47;
    swift_bridgeObjectRelease();
    float32x4_t v233 = (char *)v21;
    if (!v48)
    {
      swift_bridgeObjectRelease();
      sub_1B6E323A8();
      uint64_t v74 = v73;

      swift_bridgeObjectRelease();
      uint64_t v55 = v252;
      if (!v74) {
        goto LABEL_68;
      }
      uint64_t v21 = (uint64_t)v233;
      goto LABEL_81;
    }
    sub_1B6E323A8();
    uint64_t v50 = v49;
    swift_bridgeObjectRelease();
    if (!v50)
    {
      swift_bridgeObjectRelease();
      sub_1B6BC7E64();
      swift_allocError();
      *long long v87 = v24;
      v87[1] = v25;
      goto LABEL_79;
    }
    swift_bridgeObjectRelease();
    uint64_t v51 = qword_1F0F79E48;
    if (!qword_1F0F79E48)
    {
      uint64_t v55 = v252;
      goto LABEL_67;
    }
    int v52 = 0;
    float32x4_t v238 = (char *)qword_1F0F79E48;
LABEL_23:
    while (1)
    {
      int v56 = *((unsigned __int8 *)&unk_1F0F79E38 + (void)v52 + 32);
      char v245 = v52 + 1;
      sub_1B6E323A8();
      uint64_t v58 = v57;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (v58) {
        break;
      }
LABEL_22:
      uint64_t v55 = v252;
      int v52 = v245;
      if (v245 == (char *)v51) {
        goto LABEL_67;
      }
    }
    uint64_t v59 = *((void *)v235 + 2);
    if (!v59) {
      goto LABEL_60;
    }
    uint64_t v60 = v235;
    swift_bridgeObjectRetain();
    uint64_t v61 = 0;
    while (2)
    {
      unint64_t v62 = 0xE800000000000000;
      uint64_t v63 = 0x6E6F697469736F70;
      switch(v60[v61 + 32])
      {
        case 1:
          uint64_t v63 = 0x797469636F6C6576;
          break;
        case 2:
          unint64_t v62 = 0xE600000000000000;
          uint64_t v63 = 0x6C616D726F6ELL;
          break;
        case 3:
          uint64_t v63 = 0x7461746E6569726FLL;
          unint64_t v62 = 0xEB000000006E6F69;
          break;
        case 4:
          unint64_t v62 = 0xE500000000000000;
          uint64_t v63 = 0x726F6C6F63;
          break;
        case 5:
          unint64_t v62 = 0xE400000000000000;
          uint64_t v63 = 1702521203;
          break;
        case 6:
          uint64_t v63 = 0x646E49746E696F6ALL;
          uint64_t v64 = 1936024425;
          goto LABEL_34;
        case 7:
          uint64_t v63 = 0x696557746E696F6ALL;
          uint64_t v64 = 1937008743;
LABEL_34:
          unint64_t v62 = v64 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
          break;
        default:
          break;
      }
      unint64_t v65 = 0xE800000000000000;
      uint64_t v66 = 0x6E6F697469736F70;
      switch(v56)
      {
        case 1:
          if (v63 == 0x797469636F6C6576) {
            goto LABEL_47;
          }
          goto LABEL_48;
        case 2:
          unint64_t v65 = 0xE600000000000000;
          if (v63 != 0x6C616D726F6ELL) {
            goto LABEL_48;
          }
          goto LABEL_47;
        case 3:
          unint64_t v65 = 0xEB000000006E6F69;
          if (v63 != 0x7461746E6569726FLL) {
            goto LABEL_48;
          }
          goto LABEL_47;
        case 4:
          unint64_t v65 = 0xE500000000000000;
          if (v63 != 0x726F6C6F63) {
            goto LABEL_48;
          }
          goto LABEL_47;
        case 5:
          unint64_t v65 = 0xE400000000000000;
          uint64_t v66 = 1702521203;
          goto LABEL_46;
        case 6:
          uint64_t v67 = 0x646E49746E696F6ALL;
          uint64_t v68 = 1936024425;
          goto LABEL_52;
        case 7:
          uint64_t v67 = 0x696557746E696F6ALL;
          uint64_t v68 = 1937008743;
LABEL_52:
          unint64_t v65 = v68 & 0xFFFFFFFFFFFFLL | 0xEC00000000000000;
          if (v63 != v67) {
            goto LABEL_48;
          }
          goto LABEL_47;
        default:
LABEL_46:
          if (v63 != v66) {
            goto LABEL_48;
          }
LABEL_47:
          if (v62 == v65)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            goto LABEL_56;
          }
LABEL_48:
          char v69 = sub_1B6E334B8();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v69 & 1) == 0)
          {
            v61 += 16;
            --v59;
            a2 = v250;
            if (!v59)
            {
              swift_bridgeObjectRelease();
              a3 = (uint64_t *)v253;
              uint64_t v51 = (uint64_t)v238;
LABEL_60:
              if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
                float32x4_t v235 = sub_1B68C6810(0, *((void *)v235 + 2) + 1, 1, v235);
              }
              unint64_t v72 = *((void *)v235 + 2);
              unint64_t v71 = *((void *)v235 + 3);
              if (v72 >= v71 >> 1) {
                float32x4_t v235 = sub_1B68C6810(v71 > 1, v72 + 1, 1, v235);
              }
              uint64_t v53 = v235;
              *((void *)v235 + 2) = v72 + 1;
              uint64_t v54 = &v53[16 * v72];
              unsigned char v54[32] = v56;
              *((void *)v54 + 5) = 1;
              goto LABEL_22;
            }
            continue;
          }
          a2 = v250;
LABEL_56:
          swift_bridgeObjectRelease();
          char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
          uint64_t v55 = v252;
          if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
            uint64_t v60 = sub_1B6C16A48((uint64_t)v60);
          }
          int v52 = v245;
          float32x4_t v235 = v60;
          ++*(void *)&v60[v61 + 40];
          a3 = (uint64_t *)v253;
          uint64_t v51 = (uint64_t)v238;
          if (v52 != v238) {
            goto LABEL_23;
          }
LABEL_67:

LABEL_68:
          uint64_t v42 = (uint64_t)v233;
          uint64_t v43 = v55;
          uint64_t v21 = (uint64_t)v233;
LABEL_14:
          uint64_t v24 = sub_1B6AB35B0(v42, v43, a2);
          uint64_t v25 = v44;
          if (!v44)
          {
LABEL_81:
            unint64_t v3 = v239;
            goto LABEL_82;
          }
          break;
      }
      break;
    }
  }
  swift_bridgeObjectRelease();
  uint64_t v75 = v249;
  uint64_t v76 = v251;
  (*v247)(v249, v248, v251);
  uint64_t v234 = sub_1B6E323D8();
  char v78 = v77;
  ((void (*)(uint64_t *, uint64_t))*v246)(v75, v76);
  if (v78)
  {
    swift_bridgeObjectRelease();
    uint64_t v221 = *(void *)(v239 + OBJC_IVAR____TtC3VFX13EntityManager_logger);
    swift_retain();
    uint64_t v222 = sub_1B6E32148();
    *(void *)&long long v256 = 0;
    (*(void (**)(uint64_t, long long *, unint64_t, unint64_t))(*(void *)v221 + 88))(v222, &v256, 0xD000000000000016, 0x80000001B6F504A0);
    swift_release();
    sub_1B6BC7E64();
    swift_allocError();
    *int v223 = 0;
    v223[1] = 0;
LABEL_79:
    swift_willThrow();

    goto LABEL_73;
  }

  uint64_t v24 = sub_1B6AB35B0(v21, v252, a2);
  uint64_t v25 = v79;
  unint64_t v3 = v239;
  a3 = (uint64_t *)v253;
  if (v79) {
    goto LABEL_8;
  }
LABEL_82:
  uint64_t v225 = *(void *)(v3 + OBJC_IVAR____TtC3VFX13EntityManager_renderer);
  if (!v225)
  {
    swift_bridgeObjectRelease();
    uint64_t v89 = v252;
    return sub_1B62C2360(v89, a2);
  }
  uint64_t v88 = *((void *)v235 + 2);
  uint64_t v89 = v252;
  if (!v88)
  {
    swift_retain();
    goto LABEL_142;
  }
  float32x4_t v233 = (char *)v21;
  v240 += 32;
  swift_retain();
  char v90 = (uint64_t *)(swift_bridgeObjectRetain() + 40);
  float32x4_t v236 = (char *)0x80000001B6F37DD0;
  unint64_t v239 = 0x80000001B6F50460;
  float32x4_t v238 = (char *)0x80000001B6F50480;
  long long v237 = xmmword_1B6E77050;
  while (1)
  {
    uint64_t v94 = *((unsigned __int8 *)v90 - 8);
    uint64_t v95 = *v90;
    if (v94 < 3)
    {
      if (v95 != 3)
      {
        swift_bridgeObjectRelease_n();
        *(void *)&long long v256 = 0;
        *((void *)&v256 + 1) = 0xE000000000000000;
        sub_1B6E328C8();
        LOBYTE(v255) = v94;
        sub_1B6E32B18();
        sub_1B6E31948();
        uint64_t v255 = v95;
        sub_1B6E33098();
        uint64_t v218 = v89;
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        goto LABEL_210;
      }
      float v249 = v90;
      uint64_t v251 = v88;
      goto LABEL_92;
    }
    if (v94 == 4) {
      break;
    }
    if (v94 == 5)
    {
      if ((unint64_t)(v95 - 1) >= 3)
      {
        swift_bridgeObjectRelease_n();
        *(void *)&long long v256 = 0;
        *((void *)&v256 + 1) = 0xE000000000000000;
        sub_1B6E328C8();
        LOBYTE(v255) = 5;
        sub_1B6E32B18();
        sub_1B6E31948();
        uint64_t v255 = v95;
        sub_1B6E33098();
        uint64_t v218 = v89;
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        goto LABEL_210;
      }
      float v249 = v90;
      uint64_t v251 = v88;
      uint64_t v96 = v95 + 27;
LABEL_100:
      *(void *)&long long v256 = 0;
      *((void *)&v256 + 1) = 0xE000000000000000;
      sub_1B6E31948();
      LOBYTE(v255) = v94;
      sub_1B6E32B18();
      long long v97 = v256;
      uint64_t v98 = (4 * v96 - 108) * v234;
      if (v98 >= 1)
      {
        uint64_t v99 = a3;
        char v100 = *(void **)(v225 + 16);
        swift_bridgeObjectRetain();
        id v101 = objc_msgSend(v100, sel_newBufferWithLength_options_, v98, 0);
        if (v101)
        {
          uint64_t v102 = v101;
          uint64_t v103 = (void *)sub_1B6E31768();
          swift_bridgeObjectRelease();
          objc_msgSend(v102, sel_setLabel_, v103);
          swift_bridgeObjectRelease();

          goto LABEL_115;
        }
        if (qword_1EB9852D0 != -1) {
          swift_once();
        }
        *(void *)&long long v256 = 0;
        *((void *)&v256 + 1) = 0xE000000000000000;
        id v247 = (void (**)(uint64_t *, void, uint64_t))qword_1EB997FD0;
        swift_retain();
        sub_1B6E328C8();
        sub_1B6E31948();
        uint64_t v248 = v97;
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        uint64_t v255 = v98;
        sub_1B6E33098();
        sub_1B6E31948();
        swift_bridgeObjectRelease();
        sub_1B6E31948();
        uint64_t v255 = 0;
        type metadata accessor for MTLResourceOptions(0);
        sub_1B6E32B18();
        long long v104 = v256;
        int v105 = sub_1B6E32148();
        if (qword_1EB9854F8 != -1) {
          swift_once();
        }
        *(void *)&long long v256 = 0;
        swift_retain();
        sub_1B6B33E34(v105, (uint64_t *)&v256, v104, *((uint64_t *)&v104 + 1));
        swift_release();
        swift_bridgeObjectRelease();
        swift_release();
      }
      if (qword_1EB9852D0 != -1) {
        swift_once();
      }
      *(void *)&long long v256 = 0;
      *((void *)&v256 + 1) = 0xE000000000000000;
      uint64_t v246 = (uint64_t *)qword_1EB997FD0;
      swift_retain();
      sub_1B6E328C8();
      swift_bridgeObjectRelease();
      *(void *)&long long v256 = 0xD000000000000010;
      *((void *)&v256 + 1) = v239;
      sub_1B6E31948();
      sub_1B6E31948();
      uint64_t v255 = v98;
      sub_1B6E33098();
      sub_1B6E31948();
      swift_bridgeObjectRelease();
      long long v106 = v256;
      char v107 = sub_1B6E32148();
      if (qword_1EB9854F8 != -1) {
        swift_once();
      }
      id v247 = (void (**)(uint64_t *, void, uint64_t))*((void *)&v97 + 1);
      uint64_t v248 = v94;
      uint64_t v108 = qword_1EB997FF0;
      uint64_t v109 = qword_1EB985528;
      swift_retain();
      if (v109 != -1) {
        swift_once();
      }
      sub_1B6C9B0B4(0, (unint64_t *)&qword_1EB9855A0, (unint64_t *)&qword_1EB9852E0);
      uint64_t v110 = swift_allocObject();
      *(_OWORD *)(v110 + 16) = v237;
      *(void *)(v110 + 56) = MEMORY[0x1E4FBB1A0];
      *(void *)(v110 + 64) = sub_1B678615C();
      *(_OWORD *)(v110 + 32) = v106;
      swift_bridgeObjectRetain();
      sub_1B6E31258();
      swift_bridgeObjectRelease();
      swift_retain();
      int32x4_t v111 = v241;
      sub_1B6E31088();
      uint64_t v112 = v243;
      char v245 = (char *)v108;
      uint64_t v113 = *(int *)(v244 + 48);
      uint64_t v114 = *(int *)(v244 + 64);
      float32x4_t v115 = (_OWORD *)(v243 + *(int *)(v244 + 80));
      (*(void (**)(uint64_t, unsigned char *, char *))v240)(v243, v111, v242);
      *(unsigned char *)(v112 + v113) = v107;
      *(void *)(v112 + v114) = 0;
      *float32x4_t v115 = v106;
      swift_bridgeObjectRetain();
      sub_1B6E31368();
      swift_release();
      sub_1B62C0034(v112, (uint64_t (*)(void))sub_1B62E17B4);
      swift_bridgeObjectRelease();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v98 = 0;
      uint64_t v96 = 0;
      uint64_t v102 = 0;
      uint64_t v99 = (uint64_t *)v253;
      uint64_t v94 = v248;
LABEL_115:
      uint64_t v248 = v98;
      uint64_t v116 = 0xE600000000000000;
      uint64_t v117 = 0x6C616D726F6ELL;
      switch(v94)
      {
        case 1:
          uint64_t v116 = 0xE800000000000000;
          uint64_t v117 = 0x797469636F6C6576;
          if (!v102) {
            goto LABEL_119;
          }
          goto LABEL_129;
        case 2:
          goto LABEL_128;
        case 3:
          uint64_t v117 = 0x7461746E6569726FLL;
          uint64_t v116 = 0xEB000000006E6F69;
LABEL_128:
          if (v102) {
            goto LABEL_129;
          }
          goto LABEL_119;
        case 4:
          uint64_t v116 = 0xE500000000000000;
          uint64_t v117 = 0x726F6C6F63;
          if (!v102) {
            goto LABEL_119;
          }
          goto LABEL_129;
        case 5:
          uint64_t v116 = 0xE400000000000000;
          uint64_t v117 = 1702521203;
          if (!v102) {
            goto LABEL_119;
          }
          goto LABEL_129;
        default:
          uint64_t v116 = 0xE800000000000000;
          uint64_t v117 = 0x6E6F697469736F70;
          if (v102)
          {
LABEL_129:
            id v247 = (void (**)(uint64_t *, void, uint64_t))v96;
            swift_unknownObjectRetain();
            char v123 = swift_isUniquelyReferenced_nonNull_native();
            *(void *)&long long v256 = *v99;
            uint64_t v124 = v256;
            *uint64_t v99 = 0x8000000000000000;
            unint64_t v125 = sub_1B62B2CE0(v117, v116);
            char v127 = v126;
            uint64_t v128 = *(void *)(v124 + 16) + ((v126 & 1) == 0);
            if (*(void *)(v124 + 24) >= v128)
            {
              uint64_t v129 = v116;
              if (v123) {
                goto LABEL_133;
              }
              float v132 = (void (**)(void, void, void))v247;
              sub_1B6AD5EF0();
            }
            else
            {
              sub_1B6AC63EC(v128, v123);
              uint64_t v129 = v116;
              uint64_t v130 = sub_1B62B2CE0(v117, v116);
              if ((v127 & 1) != (v131 & 1))
              {
LABEL_213:
                sub_1B6E33838();
                __break(1u);
                JUMPOUT(0x1B6C93120);
              }
              unint64_t v125 = v130;
LABEL_133:
              float v132 = (void (**)(void, void, void))v247;
            }
            uint64_t v89 = v252;
            float32x4_t v133 = (void *)v256;
            if (v127)
            {
              float v134 = (void *)(*(void *)(v256 + 56) + 32 * v125);
              swift_unknownObjectRelease();
              void *v134 = v102;
              v134[1] = 0;
              v134[2] = v248;
              v134[3] = v132;
            }
            else
            {
              *(void *)(v256 + 8 * (v125 >> 6) + 64) |= 1 << v125;
              uint64_t v91 = (uint64_t *)(v133[6] + 16 * v125);
              *uint64_t v91 = v117;
              v91[1] = v129;
              char v92 = (void *)(v133[7] + 32 * v125);
              *char v92 = v102;
              v92[1] = 0;
              v92[2] = v248;
              v92[3] = v132;
              ++v133[2];
              swift_bridgeObjectRetain();
            }
            uint64_t v93 = (uint64_t *)v253;
            *(void *)long long v253 = v133;
            a3 = v93;
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            a2 = v250;
            goto LABEL_87;
          }
LABEL_119:
          a3 = v99;
          swift_bridgeObjectRetain();
          unint64_t v118 = sub_1B62B2CE0(v117, v116);
          char v120 = v119;
          swift_bridgeObjectRelease();
          if (v120)
          {
            char v121 = swift_isUniquelyReferenced_nonNull_native();
            uint64_t v122 = *a3;
            *(void *)&long long v256 = *a3;
            *a3 = 0x8000000000000000;
            a2 = v250;
            if ((v121 & 1) == 0)
            {
              sub_1B6AD5EF0();
              uint64_t v122 = v256;
            }
            swift_bridgeObjectRelease();
            sub_1B6ACADE0(v118, v122);
            *a3 = v122;
            swift_unknownObjectRelease();
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
          }
          else
          {
            swift_bridgeObjectRelease();
            a2 = v250;
          }
          uint64_t v89 = v252;
LABEL_87:
          uint64_t v88 = v251;
          char v90 = v249;
          break;
      }
    }
    v90 += 2;
    if (!--v88)
    {
      swift_bridgeObjectRelease();
      uint64_t v21 = (uint64_t)v233;
LABEL_142:
      a3[3] = v234;
      uint64_t v135 = *a3;
      if (*(void *)(*a3 + 16) && (uint64_t v136 = sub_1B62B2CE0(0x6E6F697469736F70, 0xE800000000000000), (v137 & 1) != 0))
      {
        float32x4_t v138 = (void *)(*(void *)(v135 + 56) + 32 * v136);
        uint64_t v139 = v138[1];
        uint64_t v140 = v138[2];
        uint64_t v141 = v138[3];
        uint64_t v142 = (void *)swift_unknownObjectRetain();
        uint64_t v143 = v140;
        uint64_t v89 = v252;
        int8x16_t v229 = sub_1B6C8AB94(v142, v139, v143, v141);
        swift_unknownObjectRelease();
      }
      else
      {
        int8x16_t v229 = 0;
      }
      uint64_t v144 = *a3;
      if (*(void *)(*a3 + 16) && (uint64_t v145 = sub_1B62B2CE0(0x797469636F6C6576, 0xE800000000000000), (v146 & 1) != 0))
      {
        unint64_t v147 = (void *)(*(void *)(v144 + 56) + 32 * v145);
        uint64_t v148 = v147[1];
        uint64_t v149 = v147[2];
        uint64_t v150 = v147[3];
        float32x2_t v151 = (void *)swift_unknownObjectRetain();
        uint64_t v152 = v149;
        uint64_t v89 = v252;
        uint64_t v228 = sub_1B6C8AB94(v151, v148, v152, v150);
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v228 = 0;
      }
      uint64_t v153 = *a3;
      if (*(void *)(*a3 + 16) && (uint64_t v154 = sub_1B62B2CE0(0x6C616D726F6ELL, 0xE600000000000000), (v155 & 1) != 0))
      {
        float32x4_t v156 = (void *)(*(void *)(v153 + 56) + 32 * v154);
        uint64_t v157 = v156[1];
        uint64_t v158 = v156[2];
        uint64_t v159 = v156[3];
        unint64_t v160 = (void *)swift_unknownObjectRetain();
        uint64_t v161 = v158;
        uint64_t v89 = v252;
        char v227 = sub_1B6C8AB94(v160, v157, v161, v159);
        swift_unknownObjectRelease();
      }
      else
      {
        char v227 = 0;
      }
      uint64_t v162 = *a3;
      if (*(void *)(*a3 + 16) && (uint64_t v163 = sub_1B62B2CE0(0x726F6C6F63, 0xE500000000000000), (v164 & 1) != 0))
      {
        int8x16_t v165 = (void *)(*(void *)(v162 + 56) + 32 * v163);
        uint64_t v166 = v165[1];
        uint64_t v167 = v165[2];
        uint64_t v168 = v165[3];
        uint64_t v169 = (void *)swift_unknownObjectRetain();
        uint64_t v170 = v167;
        uint64_t v89 = v252;
        float32x4_t v236 = sub_1B6C8AC3C(v169, v166, v170, v168);
        swift_unknownObjectRelease();
      }
      else
      {
        float32x4_t v236 = 0;
      }
      uint64_t v171 = *a3;
      if (*(void *)(*a3 + 16) && (uint64_t v172 = sub_1B62B2CE0(1702521203, 0xE400000000000000), (v173 & 1) != 0))
      {
        uint64_t v174 = (void *)(*(void *)(v171 + 56) + 32 * v172);
        uint64_t v175 = v174[1];
        uint64_t v176 = v174[2];
        uint64_t v177 = v174[3];
        uint64_t v178 = (void *)swift_unknownObjectRetain();
        uint64_t v179 = v176;
        uint64_t v89 = v252;
        int8x16_t v231 = sub_1B6C8AA54(v178, v175, v179, v177);
        swift_unknownObjectRelease();
      }
      else
      {
        int8x16_t v231 = 0;
      }
      uint64_t v180 = *a3;
      if (*(void *)(*a3 + 16) && (uint64_t v181 = sub_1B62B2CE0(1702521203, 0xE400000000000000), (v182 & 1) != 0))
      {
        uint64_t v183 = (void *)(*(void *)(v180 + 56) + 32 * v181);
        uint64_t v184 = v183[1];
        uint64_t v185 = v183[2];
        uint64_t v186 = v183[3];
        uint64_t v187 = (void *)swift_unknownObjectRetain();
        uint64_t v188 = v185;
        uint64_t v89 = v252;
        float32x4_t v230 = sub_1B6C8AAF4(v187, v184, v188, v186);
        swift_unknownObjectRelease();
      }
      else
      {
        float32x4_t v230 = 0;
      }
      uint64_t v189 = *a3;
      if (*(void *)(*a3 + 16) && (uint64_t v190 = sub_1B62B2CE0(1702521203, 0xE400000000000000), (v191 & 1) != 0))
      {
        uint64_t v192 = (void *)(*(void *)(v189 + 56) + 32 * v190);
        uint64_t v193 = v192[1];
        uint64_t v194 = v192[2];
        uint64_t v195 = v192[3];
        uint64_t v196 = (void *)swift_unknownObjectRetain();
        uint64_t v197 = v194;
        uint64_t v89 = v252;
        uint64_t v226 = sub_1B6C8AB94(v196, v193, v197, v195);
        swift_unknownObjectRelease();
      }
      else
      {
        uint64_t v226 = 0;
      }
      if (v234)
      {
        uint64_t v243 = 0;
        char v245 = v235 + 32;
        uint64_t v251 = (int)v89;
        __asm { FMOV            V0.4S, #1.0 }
        long long v244 = _Q0;
        unint64_t v203 = a2 >> 62;
        while (1)
        {
          uint64_t v246 = (uint64_t *)*((void *)v235 + 2);
          if (v246) {
            break;
          }
LABEL_173:
          if (++v243 == v234) {
            goto LABEL_205;
          }
        }
        float32x4_t v233 = &v226[12 * v243];
        float32x4_t v232 = v233 + 8;
        long long v242 = &v227[12 * v243];
        uint64_t v241 = v242 + 8;
        uint64_t v240 = &v228[12 * v243];
        unint64_t v239 = (unint64_t)(v240 + 8);
        float32x4_t v238 = &v229[12 * v243];
        *(void *)&long long v237 = v238 + 8;
        swift_bridgeObjectRetain();
        unint64_t v204 = 0;
        while (1)
        {
          float32x4_t v206 = &v245[16 * (void)v204];
          int v207 = *v206;
          uint64_t v208 = *((void *)v206 + 1);
          if (!v208) {
            break;
          }
          uint64_t v248 = *v206;
          float v249 = v204;
          uint64_t v209 = 0;
          float32x4_t v210 = (char *)&v256 + v21;
          long long v211 = v244;
          uint64_t v212 = v21;
          id v247 = (void (**)(uint64_t *, void, uint64_t))(v21 + 4 * v208);
          do
          {
            uint64_t v214 = v209++;
            switch(v203)
            {
              case 1uLL:
                long long v253 = v211;
                sub_1B62FFBB0(v89, a2);
                uint64_t v217 = sub_1B6E30B98();
                if (v217) {
                  v217 += v251 - sub_1B6E30BC8();
                }
                sub_1B6E30BB8();
                int v213 = *(_DWORD *)(v217 + v212 + 4 * v214);
                uint64_t v89 = v252;
                sub_1B62C2360(v252, a2);
                long long v211 = v253;
                break;
              case 2uLL:
                long long v253 = v211;
                uint64_t v215 = *(void *)(v89 + 16);
                swift_retain();
                swift_retain();
                uint64_t v216 = sub_1B6E30B98();
                if (v216) {
                  v216 += v215 - sub_1B6E30BC8();
                }
                sub_1B6E30BB8();
                int v213 = *(_DWORD *)(v216 + v212 + 4 * v214);
                swift_release();
                uint64_t v89 = v252;
                swift_release();
                a2 = v250;
                long long v211 = v253;
                break;
              case 3uLL:
                *(void *)((char *)&v256 + 6) = 0;
                *(void *)&long long v256 = 0;
                goto LABEL_182;
              default:
                LOBYTE(v256) = v251;
                BYTE1(v256) = BYTE1(v89);
                BYTE2(v256) = BYTE2(v89);
                BYTE3(v256) = BYTE3(v89);
                BYTE4(v256) = BYTE4(v89);
                BYTE5(v256) = BYTE5(v89);
                BYTE6(v256) = BYTE6(v89);
                BYTE7(v256) = HIBYTE(v89);
                WORD4(v256) = a2;
                BYTE10(v256) = BYTE2(a2);
                BYTE11(v256) = BYTE3(a2);
                BYTE12(v256) = BYTE4(a2);
                BYTE13(v256) = BYTE5(a2);
LABEL_182:
                int v213 = *(_DWORD *)&v210[4 * v214];
                break;
            }
            long long v254 = v211;
            *(_DWORD *)((unint64_t)&v254 & 0xFFFFFFFFFFFFFFF3 | (4 * (v214 & 3))) = v213;
            long long v211 = v254;
          }
          while (v208 != v209);
          uint64_t v21 = (uint64_t)v247;
          int v207 = v248;
          unint64_t v204 = v249;
          if (v248 <= 5) {
            goto LABEL_195;
          }
LABEL_178:
          unint64_t v204 = (uint64_t *)((char *)v204 + 1);
          if (v204 == v246)
          {
            swift_bridgeObjectRelease();
            goto LABEL_173;
          }
        }
        long long v211 = v244;
LABEL_195:
        switch(v207)
        {
          case 0:
            *(void *)float32x4_t v238 = v211;
            float32x4_t v205 = &v259;
            goto LABEL_177;
          case 1:
            *(void *)uint64_t v240 = v211;
            float32x4_t v205 = &v260;
            goto LABEL_177;
          case 2:
            *(void *)long long v242 = v211;
            float32x4_t v205 = &v261;
            goto LABEL_177;
          case 4:
            *(_OWORD *)&v236[16 * v243] = v211;
            goto LABEL_178;
          case 5:
            switch(v208)
            {
              case 3:
                *(void *)float32x4_t v233 = v211;
                float32x4_t v205 = (uint64_t *)&v258;
LABEL_177:
                *(_DWORD *)*(v205 - 32) = DWORD2(v211);
                break;
              case 2:
                *(void *)&v230[8 * v243] = v211;
                break;
              case 1:
                *(_DWORD *)&v231[4 * v243] = v211;
                break;
              default:
                sub_1B6E32BE8();
                __break(1u);
                goto LABEL_213;
            }
            break;
          default:
            goto LABEL_178;
        }
        goto LABEL_178;
      }
LABEL_205:
      swift_bridgeObjectRelease();
      swift_release();
      return sub_1B62C2360(v89, a2);
    }
  }
  uint64_t v251 = v88;
  float v249 = v90;
  if (v95 == 3)
  {
LABEL_92:
    uint64_t v96 = 30;
    goto LABEL_100;
  }
  if (v95 == 4)
  {
    uint64_t v96 = 31;
    goto LABEL_100;
  }
  swift_bridgeObjectRelease_n();
  *(void *)&long long v256 = 0;
  *((void *)&v256 + 1) = 0xE000000000000000;
  sub_1B6E328C8();
  LOBYTE(v255) = 4;
  sub_1B6E32B18();
  sub_1B6E31948();
  uint64_t v255 = v95;
  sub_1B6E33098();
  uint64_t v218 = v89;
  sub_1B6E31948();
  swift_bridgeObjectRelease();
LABEL_210:
  sub_1B6E31948();
  long long v219 = v256;
  sub_1B6BC7E64();
  swift_allocError();
  *uint64_t v220 = v219;
  swift_willThrow();
  swift_release();
  uint64_t v81 = v218;
  return sub_1B62C2360(v81, a2);
}

char *sub_1B6C931C0(uint64_t a1, uint64_t a2, unint64_t a3, int a4)
{
  int v5 = a3;
  unint64_t v7 = HIDWORD(a3);
  swift_retain();
  if (v5 == -1 && !v7
    || v5 < 0
    || v5 >= *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries + 8)
    || (uint64_t v8 = *(void *)(a2 + OBJC_IVAR____TtC3VFX13EntityManager__entries), v7 != -1)
    && *(_DWORD *)(v8 + 12 * v5 + 8) != v7)
  {
    swift_release();
    return (char *)MEMORY[0x1E4FBC860];
  }
  uint64_t v11 = sub_1B69651E8(*(void *)(*(void *)(a2 + 136) + 8 * *(int *)(v8 + 12 * v5) + 32), *(_DWORD *)(v8 + 12 * v5), *(_WORD *)(v8 + 12 * v5 + 4), 32, a2);
  swift_release();
  if (!v11) {
    return (char *)MEMORY[0x1E4FBC860];
  }
  if (*(void *)(v11 + 16) && (sub_1B62B2CE0(0x6E6F697469736F70, 0xE800000000000000), (v12 & 1) != 0))
  {
    uint64_t v9 = sub_1B62D1B88(0, 1, 1, MEMORY[0x1E4FBC860]);
    unint64_t v14 = *((void *)v9 + 2);
    unint64_t v13 = *((void *)v9 + 3);
    unint64_t v15 = v14 + 1;
    if (v14 >= v13 >> 1)
    {
      uint64_t v60 = sub_1B62D1B88(v13 > 1, v14 + 1, 1, v9);
      unint64_t v15 = v14 + 1;
      uint64_t v9 = v60;
    }
    *((void *)v9 + 2) = v15;
    uint64_t v16 = &v9[16 * v14];
    *((void *)v16 + 4) = &type metadata for Position;
    *((void *)v16 + 5) = &off_1F0FA6EE0;
  }
  else
  {
    uint64_t v9 = (char *)MEMORY[0x1E4FBC860];
  }
  if ((a4 & 0x100) != 0)
  {
    if (*(void *)(v11 + 16))
    {
      sub_1B62B2CE0(0x726F6C6F63, 0xE500000000000000);
      if (v17)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1B62D1B88(0, *((void *)v9 + 2) + 1, 1, v9);
        }
        unint64_t v19 = *((void *)v9 + 2);
        unint64_t v18 = *((void *)v9 + 3);
        unint64_t v20 = v19 + 1;
        if (v19 >= v18 >> 1)
        {
          uint64_t v61 = sub_1B62D1B88(v18 > 1, v19 + 1, 1, v9);
          unint64_t v20 = v19 + 1;
          uint64_t v9 = v61;
        }
        *((void *)v9 + 2) = v20;
        uint64_t v21 = &v9[16 * v19];
        *((void *)v21 + 4) = &type metadata for Color;
        *((void *)v21 + 5) = &off_1F0F9ECD8;
      }
    }
  }
  if ((a4 & 0x1000000) != 0)
  {
    if (!*(void *)(v11 + 16)) {
      goto LABEL_57;
    }
    uint64_t v27 = sub_1B62B2CE0(1702521203, 0xE400000000000000);
    if (v28)
    {
      id v29 = (void *)(*(void *)(v11 + 56) + 32 * v27);
      uint64_t v30 = v29[1];
      uint64_t v31 = v29[2];
      uint64_t v32 = v29[3];
      uint64_t v33 = (void *)swift_unknownObjectRetain();
      sub_1B6C8AA54(v33, v30, v31, v32);
      LOBYTE(v30) = v34;
      swift_unknownObjectRelease();
      if ((v30 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1B62D1B88(0, *((void *)v9 + 2) + 1, 1, v9);
        }
        unint64_t v36 = *((void *)v9 + 2);
        unint64_t v35 = *((void *)v9 + 3);
        if (v36 >= v35 >> 1) {
          uint64_t v9 = sub_1B62D1B88(v35 > 1, v36 + 1, 1, v9);
        }
        *((void *)v9 + 2) = v36 + 1;
        int v37 = &v9[16 * v36];
        *((void *)v37 + 4) = &type metadata for Scale1;
        *((void *)v37 + 5) = &off_1F0FA0DD0;
      }
    }
    if (!*(void *)(v11 + 16)) {
      goto LABEL_57;
    }
    uint64_t v38 = sub_1B62B2CE0(1702521203, 0xE400000000000000);
    if (v39)
    {
      uint64_t v40 = (void *)(*(void *)(v11 + 56) + 32 * v38);
      uint64_t v41 = v40[1];
      uint64_t v42 = v40[2];
      uint64_t v43 = v40[3];
      uint64_t v44 = (void *)swift_unknownObjectRetain();
      sub_1B6C8AAF4(v44, v41, v42, v43);
      LOBYTE(v41) = v45;
      swift_unknownObjectRelease();
      if ((v41 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1B62D1B88(0, *((void *)v9 + 2) + 1, 1, v9);
        }
        unint64_t v47 = *((void *)v9 + 2);
        unint64_t v46 = *((void *)v9 + 3);
        if (v47 >= v46 >> 1) {
          uint64_t v9 = sub_1B62D1B88(v46 > 1, v47 + 1, 1, v9);
        }
        *((void *)v9 + 2) = v47 + 1;
        uint64_t v48 = &v9[16 * v47];
        *((void *)v48 + 4) = &type metadata for Scale2;
        *((void *)v48 + 5) = &off_1F0FA0F38;
      }
    }
    if (!*(void *)(v11 + 16)) {
      goto LABEL_57;
    }
    uint64_t v49 = sub_1B62B2CE0(1702521203, 0xE400000000000000);
    if (v50)
    {
      uint64_t v51 = (void *)(*(void *)(v11 + 56) + 32 * v49);
      uint64_t v52 = v51[1];
      uint64_t v53 = v51[2];
      uint64_t v54 = v51[3];
      uint64_t v55 = (void *)swift_unknownObjectRetain();
      sub_1B6C8AB94(v55, v52, v53, v54);
      LOBYTE(v52) = v56;
      swift_unknownObjectRelease();
      if ((v52 & 1) == 0)
      {
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v9 = sub_1B62D1B88(0, *((void *)v9 + 2) + 1, 1, v9);
        }
        unint64_t v58 = *((void *)v9 + 2);
        unint64_t v57 = *((void *)v9 + 3);
        if (v58 >= v57 >> 1) {
          uint64_t v9 = sub_1B62D1B88(v57 > 1, v58 + 1, 1, v9);
        }
        *((void *)v9 + 2) = v58 + 1;
        uint64_t v59 = &v9[16 * v58];
        *((void *)v59 + 4) = &type metadata for Scale3;
        *((void *)v59 + 5) = &off_1F0FA10A0;
      }
    }
  }
  if (!*(void *)(v11 + 16))
  {
LABEL_57:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return v9;
  }
  sub_1B62B2CE0(0x7461746E6569726FLL, 0xEB000000006E6F69);
  char v23 = v22;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (v23)
  {
    if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
      uint64_t v9 = sub_1B62D1B88(0, *((void *)v9 + 2) + 1, 1, v9);
    }
    unint64_t v25 = *((void *)v9 + 2);
    unint64_t v24 = *((void *)v9 + 3);
    if (v25 >= v24 >> 1) {
      uint64_t v9 = sub_1B62D1B88(v24 > 1, v25 + 1, 1, v9);
    }
    *((void *)v9 + 2) = v25 + 1;
    unint64_t v26 = &v9[16 * v25];
    *((void *)v26 + 4) = &type metadata for Orientation;
    *((void *)v26 + 5) = &off_1F0F560A8;
  }
  return v9;
}

uint64_t sub_1B6C93734(void *a1, uint64_t a2, float32x4_t a3, float32x4_t a4, float32x4_t a5, float32x4_t a6, int32x4_t a7, float32x4_t a8, uint64_t a9, unsigned __int8 a10, uint64_t a11, uint64_t a12, unsigned __int8 a13, uint64_t a14, uint64_t a15, unsigned __int8 a16, uint64_t a17, uint64_t a18, unsigned __int8 a19, uint64_t a20,uint64_t a21,unsigned __int8 a22,uint64_t a23,uint64_t a24,char a25)
{
  uint64_t v73 = sub_1B6345984();
  unsigned __int8 v29 = v28;
  uint64_t v71 = sub_1B6345A6C();
  unsigned __int8 v31 = v30;
  uint64_t v69 = sub_1B67A819C();
  unsigned __int8 v33 = v32;
  uint64_t v68 = sub_1B67A82F8();
  unsigned __int8 v35 = v34;
  uint64_t v36 = sub_1B67A836C();
  unsigned __int8 v38 = v37;
  uint64_t result = sub_1B67A83E0();
  uint64_t v44 = a1[6];
  uint64_t v45 = a1[7] - v44;
  if (v45)
  {
    uint64_t v46 = 0;
    char v47 = (a25 | v40) & 1;
    uint64_t v48 = a1[3];
    _S0 = a7.u32[3];
    float32x4_t v50 = (float32x4_t)vdupq_laneq_s32(a7, 3);
    float32x4_t v51 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32(a7, a7), (int8x16_t)a7, 0xCuLL);
    float32x4_t v52 = vnegq_f32((float32x4_t)a7);
    uint64_t v53 = result + 16 * v44;
    uint64_t v54 = a11 + 16 * v48;
    uint64_t v55 = a14 + 16 * v48;
    uint64_t result = a17 + 4 * v48;
    uint64_t v56 = a20 + 8 * v48;
    uint64_t v57 = 12 * v48 + 8;
    unint64_t v58 = (_DWORD *)(a23 + v57);
    uint64_t v59 = (float *)(a2 + v57);
    do
    {
      if ((a10 | v29))
      {
        if ((a13 | v31)) {
          goto LABEL_7;
        }
      }
      else
      {
        float32x4_t v60 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(a6, a5, *v59), a4, *(v59 - 1)), a3, *(v59 - 2));
        v60.i32[3] = 1.0;
        *(float32x4_t *)(v73 + 16 * v44 + 16 * v46) = v60;
        if ((a13 | v31))
        {
LABEL_7:
          if ((a16 | v33)) {
            goto LABEL_8;
          }
          goto LABEL_14;
        }
      }
      _Q16 = *(float32x4_t *)(v54 + 16 * v46);
      _Q18 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q16, (int32x4_t)_Q16), (int8x16_t)_Q16, 0xCuLL), v52), _Q16, v51);
      float32x4_t v62 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32((float32x4_t)a7, _Q16, 3), v50, _Q16), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q18, (int32x4_t)_Q18), _Q18, 0xCuLL));
      __asm { FMLA            S18, S0, V16.S[3] }
      v62.i32[3] = _Q18.i32[0];
      *(float32x4_t *)(v71 + 16 * v44 + 16 * v46) = v62;
      if ((a16 | v33))
      {
LABEL_8:
        if ((a19 | v35)) {
          goto LABEL_9;
        }
        goto LABEL_15;
      }
LABEL_14:
      _Q16 = *(float32x4_t *)(v55 + 16 * v46);
      *(float32x4_t *)(v69 + 16 * v44 + 16 * v46) = _Q16;
      if ((a19 | v35))
      {
LABEL_9:
        if ((a22 | v38)) {
          goto LABEL_10;
        }
        goto LABEL_16;
      }
LABEL_15:
      *(float *)(v68 + 4 * v44 + 4 * v46) = a8.f32[0] * *(float *)(result + 4 * v46);
      if ((a22 | v38))
      {
LABEL_10:
        if ((v47 & 1) == 0) {
          goto LABEL_17;
        }
        goto LABEL_4;
      }
LABEL_16:
      *(float32x2_t *)(v36 + 8 * v44 + 8 * v46) = vmul_f32(*(float32x2_t *)a8.f32, *(float32x2_t *)(v56 + 8 * v46));
      if ((v47 & 1) == 0)
      {
LABEL_17:
        _Q16.i64[0] = *((void *)v58 - 1);
        _Q16.i32[2] = *v58;
        float32x4_t v67 = vmulq_f32(_Q16, a8);
        _Q16.i32[3] = v42;
        v67.i32[3] = v41;
        *(float32x4_t *)(v53 + 16 * v46) = v67;
      }
LABEL_4:
      ++v46;
      v58 += 3;
      v59 += 3;
    }
    while (v45 != v46);
  }
  return result;
}

uint64_t type metadata accessor for PointCacheSpawner.System()
{
  return self;
}

unint64_t sub_1B6C93A0C(char a1)
{
  unint64_t result = 0x636143746E696F70;
  switch(a1)
  {
    case 1:
      unint64_t result = 0xD000000000000013;
      break;
    case 2:
      unint64_t result = 0x4374697265686E69;
      break;
    case 3:
      unint64_t result = 0xD000000000000012;
      break;
    case 4:
      unint64_t result = 0x5374697265686E69;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t sub_1B6C93ADC(void *a1, uint64_t a2, int a3)
{
  v13[1] = a3;
  sub_1B63965F4(0, &qword_1E9DD81B0, (uint64_t (*)(void))sub_1B6C9CA08, (uint64_t)&type metadata for PointCacheSpawner.CodingKeys, MEMORY[0x1E4FBBDE0]);
  uint64_t v7 = v6;
  uint64_t v8 = *(void *)(v6 - 8);
  MEMORY[0x1F4188790](v6, v9);
  uint64_t v11 = (char *)v13 - v10;
  sub_1B62C14BC(a1, a1[3]);
  sub_1B6C9CA08();
  sub_1B6E33A88();
  uint64_t v19 = a2;
  char v18 = 0;
  sub_1B6657A10();
  sub_1B6E32FA8();
  if (!v3)
  {
    char v17 = 1;
    sub_1B6E32F58();
    char v16 = 2;
    sub_1B6E32F58();
    char v15 = 3;
    sub_1B6E32F58();
    char v14 = 4;
    sub_1B6E32F58();
  }
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

const char *sub_1B6C93D0C()
{
  return "PointCacheSpawner.CPU";
}

uint64_t sub_1B6C93D20(unsigned __int8 *a1, char *a2)
{
  return sub_1B6BB2E64(*a1, *a2);
}

unint64_t sub_1B6C93D2C()
{
  return sub_1B6C93A0C(*v0);
}

uint64_t sub_1B6C93D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t result = sub_1B6C97118(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1B6C93D5C(uint64_t a1)
{
  unint64_t v2 = sub_1B6C9CA08();

  return MEMORY[0x1F41862A8](a1, v2);
}

uint64_t sub_1B6C93D98(uint64_t a1)
{
  unint64_t v2 = sub_1B6C9CA08();

  return MEMORY[0x1F41862B0](a1, v2);
}

uint64_t sub_1B6C93DD4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1B6C9B198(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(unsigned char *)(a2 + 8) = v5 & 1;
    *(unsigned char *)(a2 + 9) = BYTE1(v5) & 1;
    *(unsigned char *)(a2 + 10) = BYTE2(v5) & 1;
    *(unsigned char *)(a2 + 11) = HIBYTE(v5) & 1;
  }
  return result;
}

uint64_t sub_1B6C93E24(void *a1)
{
  if (*(unsigned char *)(v1 + 9)) {
    int v2 = 256;
  }
  else {
    int v2 = 0;
  }
  int v3 = v2 | *(unsigned __int8 *)(v1 + 8);
  if (*(unsigned char *)(v1 + 10)) {
    int v4 = 0x10000;
  }
  else {
    int v4 = 0;
  }
  if (*(unsigned char *)(v1 + 11)) {
    int v5 = 0x1000000;
  }
  else {
    int v5 = 0;
  }
  return sub_1B6C93ADC(a1, *(void *)v1, v3 | v4 | v5);
}

char *sub_1B6C93E80(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(v2 + 9)) {
    int v3 = 256;
  }
  else {
    int v3 = 0;
  }
  int v4 = v3 | *(unsigned __int8 *)(v2 + 8);
  if (*(unsigned char *)(v2 + 10)) {
    int v5 = 0x10000;
  }
  else {
    int v5 = 0;
  }
  if (*(unsigned char *)(v2 + 11)) {
    int v6 = 0x1000000;
  }
  else {
    int v6 = 0;
  }
  return sub_1B6C931C0(a1, a2, *(void *)v2, v4 | v5 | v6);
}

uint64_t sub_1B6C93EC8()
{
  return type metadata accessor for PointCacheSpawner.System();
}

double sub_1B6C93EE8@<D0>(uint64_t a1@<X8>)
{
  *(void *)&double result = 0xFFFFFFFFLL;
  *(void *)a1 = 0xFFFFFFFFLL;
  *(_DWORD *)(a1 + 8) = 16843009;
  return result;
}

uint64_t type metadata accessor for PointCacheSpawner.GPUSystem()
{
  return self;
}

uint64_t destroy for PointCacheFromModel()
{
  swift_unknownObjectWeakDestroy();
  swift_bridgeObjectRelease();

  return swift_bridgeObjectRelease();
}

void *initializeWithCopy for PointCacheFromModel(void *a1, void *a2)
{
  uint64_t v4 = swift_unknownObjectWeakCopyInit();
  uint64_t v5 = a2[2];
  *(void *)(v4 + 8) = a2[1];
  *(void *)(v4 + 16) = v5;
  uint64_t v6 = a2[4];
  a1[3] = a2[3];
  a1[4] = v6;
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRetain();
  return a1;
}

void *assignWithCopy for PointCacheFromModel(void *a1, void *a2)
{
  uint64_t v4 = swift_unknownObjectWeakCopyAssign();
  *(void *)(v4 + 8) = a2[1];
  *(void *)(v4 + 16) = a2[2];
  a1[3] = a2[3];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  a1[4] = a2[4];
  a1[5] = a2[5];
  swift_bridgeObjectRetain();
  swift_bridgeObjectRelease();
  return a1;
}

__n128 initializeWithTake for PointCacheFromModel(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = swift_unknownObjectWeakTakeInit();
  *(void *)(v3 + 8) = *(void *)(a2 + 8);
  __n128 result = *(__n128 *)(a2 + 16);
  long long v5 = *(_OWORD *)(a2 + 32);
  *(__n128 *)(v3 + 16) = result;
  *(_OWORD *)(v3 + 32) = v5;
  return result;
}

void *assignWithTake for PointCacheFromModel(void *a1, uint64_t a2)
{
  *(_OWORD *)(swift_unknownObjectWeakTakeAssign() + 8) = *(_OWORD *)(a2 + 8);
  a1[3] = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  uint64_t v4 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v4;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for PointCacheFromModel(uint64_t a1, int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 < 0 && *(unsigned char *)(a1 + 48)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  if ((*(void *)(a1 + 8) & 0xF000000000000007) != 0) {
    int v2 = *(_DWORD *)a1 & 0x7FFFFFFF;
  }
  else {
    int v2 = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for PointCacheFromModel(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 40) = 0;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(unsigned char *)(result + 48) = 1;
    }
  }
  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      *(void *)(result + 8) = 1;
      return result;
    }
    *(unsigned char *)(result + 48) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PointCacheFromModel()
{
  return &type metadata for PointCacheFromModel;
}

ValueMetadata *type metadata accessor for PointCacheFileAsset()
{
  return &type metadata for PointCacheFileAsset;
}

uint64_t getEnumTagSinglePayload for PointCacheGenerator(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0;
  }
  if (a2 >= 0xFE && *(unsigned char *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for PointCacheGenerator(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 16) = 0;
    *(void *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    *(void *)(result + 8) = 0;
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 32) = 1;
    }
  }
  else
  {
    if (a3 >= 0xFE) {
      *(unsigned char *)(result + 32) = 0;
    }
    if (a2) {
      *(unsigned char *)(result + 16) = a2 + 2;
    }
  }
  return result;
}

ValueMetadata *type metadata accessor for PointCacheGenerator()
{
  return &type metadata for PointCacheGenerator;
}

ValueMetadata *type metadata accessor for REMeshAssetPointCache()
{
  return &type metadata for REMeshAssetPointCache;
}

const char *sub_1B6C9421C()
{
  return "PointCacheSpawner.GPU";
}

uint64_t sub_1B6C94230()
{
  return type metadata accessor for PointCacheSpawner.GPUSystem();
}

unint64_t sub_1B6C94250()
{
  unint64_t result = qword_1E9DD8068;
  if (!qword_1E9DD8068)
  {
    unint64_t result = swift_getWitnessTable();
    atomic_store(result, (unint64_t *)&qword_1E9DD8068);
  }
  return result;
}

uint64_t sub_1B6C942A4(void *a1)
{
  int v2 = a1;
  uint64_t v3 = a1[1];
  uint64_t result = sub_1B6E33068();
  if (result >= v3)
  {
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v9 = *v2;
      uint64_t v10 = *v2 + 4;
      uint64_t v11 = -1;
      for (uint64_t i = 1; i != v3; ++i)
      {
        float v13 = *(float *)(v9 + 8 * i + 4);
        uint64_t v14 = v11;
        uint64_t v15 = v10;
        do
        {
          if (*(float *)v15 >= v13) {
            break;
          }
          __int16 v16 = *(_WORD *)(v15 + 4);
          *(void *)(v15 + 4) = *(void *)(v15 - 4);
          *(_WORD *)(v15 - 4) = v16;
          *(float *)uint64_t v15 = v13;
          v15 -= 8;
        }
        while (!__CFADD__(v14++, 1));
        v10 += 8;
        --v11;
      }
    }
  }
  else
  {
    if (v3 >= 0) {
      uint64_t v5 = v3;
    }
    else {
      uint64_t v5 = v3 + 1;
    }
    if (v3 >= -1)
    {
      uint64_t v6 = result;
      if (v3 < 2)
      {
        uint64_t v18 = MEMORY[0x1E4FBC860];
        __dst = (float *)(MEMORY[0x1E4FBC860] + 32);
        if (v3 != 1)
        {
          unint64_t v22 = *(void *)(MEMORY[0x1E4FBC860] + 16);
          uint64_t v21 = (char *)MEMORY[0x1E4FBC860];
          if (v22 < 2)
          {
LABEL_69:
            swift_bridgeObjectRelease();
            *(void *)(v18 + 16) = 0;
            return swift_bridgeObjectRelease();
          }
LABEL_73:
          uint64_t v63 = *v2;
          do
          {
            uint64_t v64 = *(void *)&v21[16 * v22];
            unint64_t v65 = &v21[16 * v22 + 16];
            uint64_t v66 = *((void *)v65 + 1);
            sub_1B6C94820((float *)(v63 + 8 * v64), (float *)(v63 + 8 * *(void *)v65), v63 + 8 * v66, __dst);
            if (v1) {
              break;
            }
            float32x4_t v67 = v21;
            if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
              float32x4_t v67 = sub_1B6D671B8((uint64_t)v21);
            }
            uint64_t v68 = v67 + 32;
            uint64_t v69 = &v67[16 * v22];
            *(void *)uint64_t v69 = v64;
            *((void *)v69 + 1) = v66;
            uint64_t v21 = v67;
            unint64_t v70 = *((void *)v67 + 2);
            memmove(&v68[16 * v22 - 16], &v68[16 * v22], 16 * (v70 - v22));
            *((void *)v21 + 2) = v70 - 1;
            unint64_t v22 = v70 - 1;
          }
          while (v70 > 2);
          goto LABEL_69;
        }
        uint64_t v72 = MEMORY[0x1E4FBC860];
      }
      else
      {
        uint64_t v7 = v5 >> 1;
        sub_1B6C99120();
        uint64_t v8 = sub_1B6E31C98();
        *(void *)(v8 + 16) = v7;
        uint64_t v72 = v8;
        __dst = (float *)(v8 + 32);
      }
      uint64_t v19 = 0;
      uint64_t v71 = v2;
      uint64_t v20 = *v2;
      uint64_t v21 = (char *)MEMORY[0x1E4FBC860];
      uint64_t v73 = v6;
      uint64_t v74 = v3;
      do
      {
        uint64_t v23 = v19++;
        if (v19 < v3)
        {
          float v24 = *(float *)(v20 + 8 * v19 + 4);
          float v25 = *(float *)(v20 + 8 * v23 + 4);
          uint64_t v19 = v23 + 2;
          if (v23 + 2 < v3)
          {
            unint64_t v26 = (float *)(v20 + 20 + 8 * v23);
            float v27 = v24;
            while (1)
            {
              float v28 = v27;
              float v27 = *v26;
              if (v25 < v24 == v28 >= *v26) {
                break;
              }
              ++v19;
              v26 += 2;
              if (v3 == v19)
              {
                uint64_t v19 = v3;
                break;
              }
            }
          }
          if (v25 < v24 && v23 < v19)
          {
            uint64_t v36 = 8 * v19;
            uint64_t v37 = 8 * v23;
            uint64_t v38 = v19;
            uint64_t v39 = v23;
            do
            {
              if (v39 != --v38)
              {
                uint64_t v40 = v20 + v36;
                __int16 v41 = *(_WORD *)(v20 + v37);
                int v42 = *(_DWORD *)(v20 + v37 + 4);
                *(void *)(v20 + v37) = *(void *)(v20 + v36 - 8);
                *(_WORD *)(v40 - 8) = v41;
                *(_DWORD *)(v40 - 4) = v42;
              }
              ++v39;
              v36 -= 8;
              v37 += 8;
            }
            while (v39 < v38);
          }
        }
        if (v19 < v3 && v19 - v23 < v6)
        {
          uint64_t v30 = v23 + v6;
          if (v23 + v6 >= v3) {
            uint64_t v30 = v3;
          }
          if (v19 != v30)
          {
            unsigned __int8 v31 = (float *)(v20 + 8 * v19);
            do
            {
              float v32 = *(float *)(v20 + 8 * v19 + 4);
              uint64_t v33 = v23;
              unsigned __int8 v34 = v31;
              do
              {
                if (*(v34 - 1) >= v32) {
                  break;
                }
                __int16 v35 = *(_WORD *)v34;
                *(void *)unsigned __int8 v34 = *((void *)v34 - 1);
                *((_WORD *)v34 - 4) = v35;
                *(v34 - 1) = v32;
                ++v33;
                v34 -= 2;
              }
              while (v19 != v33);
              ++v19;
              v31 += 2;
            }
            while (v19 != v30);
            uint64_t v19 = v30;
          }
        }
        if ((swift_isUniquelyReferenced_nonNull_native() & 1) == 0) {
          uint64_t v21 = sub_1B62BD890(0, *((void *)v21 + 2) + 1, 1, v21);
        }
        unint64_t v44 = *((void *)v21 + 2);
        unint64_t v43 = *((void *)v21 + 3);
        unint64_t v22 = v44 + 1;
        if (v44 >= v43 >> 1) {
          uint64_t v21 = sub_1B62BD890(v43 > 1, v44 + 1, 1, v21);
        }
        *((void *)v21 + 2) = v22;
        uint64_t v45 = v21 + 32;
        uint64_t v46 = &v21[16 * v44 + 32];
        *(void *)uint64_t v46 = v23;
        *((void *)v46 + 1) = v19;
        if (v44)
        {
          while (1)
          {
            uint64_t v47 = v22 - 1;
            if (v22 >= 4)
            {
              float32x4_t v52 = &v45[16 * v22];
              uint64_t v53 = *((void *)v52 - 7) - *((void *)v52 - 8);
              uint64_t v50 = *((void *)v52 - 5) - *((void *)v52 - 6);
              uint64_t v51 = v22 - 2;
              uint64_t v54 = &v45[16 * v22 - 32];
              uint64_t v48 = *(void *)v54;
              uint64_t v49 = *((void *)v54 + 1);
              if (v50 - v48 + v49 >= v53)
              {
                BOOL v57 = v50 < *(void *)&v45[16 * v47 + 8] - *(void *)&v45[16 * v47];
LABEL_63:
                if (v57) {
                  uint64_t v47 = v51;
                }
                goto LABEL_65;
              }
            }
            else
            {
              if (v22 != 3)
              {
                uint64_t v55 = *(void *)&v45[16 * v22 - 24] - *(void *)&v21[16 * v22];
                uint64_t v56 = *(void *)&v45[16 * v47 + 8] - *(void *)&v45[16 * v47];
                goto LABEL_60;
              }
              uint64_t v48 = *((void *)v21 + 6);
              uint64_t v49 = *((void *)v21 + 7);
              uint64_t v50 = *((void *)v21 + 5) - *((void *)v21 + 4);
              uint64_t v51 = 1;
            }
            uint64_t v55 = v49 - v48;
            uint64_t v56 = *(void *)&v45[16 * v47 + 8] - *(void *)&v45[16 * v47];
            if (v55 + v56 >= v50)
            {
              BOOL v57 = v50 < v56;
              goto LABEL_63;
            }
LABEL_60:
            if (v56 < v55) {
              goto LABEL_21;
            }
LABEL_65:
            unint64_t v58 = &v45[16 * v47 - 16];
            uint64_t v59 = *(void *)v58;
            float32x4_t v60 = &v45[16 * v47];
            uint64_t v61 = *((void *)v60 + 1);
            sub_1B6C94820((float *)(v20 + 8 * *(void *)v58), (float *)(v20 + 8 * *(void *)v60), v20 + 8 * v61, __dst);
            if (v1)
            {
              uint64_t v18 = v72;
              goto LABEL_69;
            }
            *(void *)unint64_t v58 = v59;
            *((void *)v58 + 1) = v61;
            unint64_t v62 = *((void *)v21 + 2);
            unint64_t v22 = v62 - 1;
            memmove(&v45[16 * v47], v60 + 16, 16 * (v62 - 1 - v47));
            *((void *)v21 + 2) = v62 - 1;
            if (v62 <= 2) {
              goto LABEL_21;
            }
          }
        }
        unint64_t v22 = 1;
LABEL_21:
        uint64_t v6 = v73;
        uint64_t v3 = v74;
      }
      while (v19 < v74);
      uint64_t v18 = v72;
      int v2 = v71;
      if (v22 < 2) {
        goto LABEL_69;
      }
      goto LABEL_73;
    }
    uint64_t result = sub_1B6E32BD8();
    __break(1u);
  }
  return result;
}

uint64_t sub_1B6C94820(float *__src, float *a2, unint64_t a3, float *__dst)
{
  BOOL v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = (char *)a2 - (char *)__src;
  int64_t v9 = (char *)a2 - (char *)__src + 7;
  if ((char *)a2 - (char *)__src >= 0) {
    int64_t v9 = (char *)a2 - (char *)__src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  if ((uint64_t)(a3 - (void)a2) >= 0) {
    uint64_t v12 = a3 - (void)a2;
  }
  uint64_t v13 = v12 >> 3;
  uint64_t v23 = __src;
  unint64_t v22 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[2 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      __int16 v16 = (char *)&v4[2 * v13];
      uint64_t v21 = v16;
      uint64_t v23 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        char v17 = (float *)(a3 - 8);
        while (1)
        {
          uint64_t v18 = v17 + 2;
          if (*(v6 - 1) >= *((float *)v16 - 1))
          {
            uint64_t v21 = v16 - 8;
            if (v18 < (float *)v16 || v17 >= (float *)v16 || v18 != (float *)v16) {
              *(void *)char v17 = *((void *)v16 - 1);
            }
            uint64_t v19 = v6;
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_43;
            }
          }
          else
          {
            uint64_t v19 = v6 - 2;
            if (v18 != v6 || v17 >= v6) {
              *(void *)char v17 = *(void *)v19;
            }
            uint64_t v23 = v6 - 2;
            if (v19 <= v7) {
              goto LABEL_43;
            }
          }
          v17 -= 2;
          uint64_t v6 = v19;
          if (v16 <= (char *)v4) {
            goto LABEL_43;
          }
        }
      }
      goto LABEL_43;
    }
  }
  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[2 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = (char *)&v4[2 * v10];
    uint64_t v21 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (v4[1] >= v6[1])
        {
          if (v7 != v4 || v7 >= v4 + 2) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          unint64_t v22 = v4 + 2;
          uint64_t v15 = v6;
          v4 += 2;
        }
        else
        {
          uint64_t v15 = v6 + 2;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }
        v7 += 2;
        if (v4 >= (float *)v14) {
          break;
        }
        uint64_t v6 = v15;
      }
      while ((unint64_t)v15 < a3);
      uint64_t v23 = v7;
    }
LABEL_43:
    sub_1B6D66B7C((void **)&v23, (const void **)&v22, &v21);
    return 1;
  }
  uint64_t result = sub_1B6E32C88();
  __break(1u);
  return result;
}

uint64_t sub_1B6C94AA8(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4, float a5, float a6)
{
  if (a5 == a6)
  {
    uint64_t v6 = a3 - a2;
    if (a3 != a2)
    {
      uint64_t v7 = (float32x4_t *)(result + 16 * a2);
      do
      {
        *uint64_t v7 = vmulq_n_f32(*v7, a5);
        ++v7;
        --v6;
      }
      while (v6);
    }
  }
  else
  {
    uint64_t v8 = a3 - a2;
    if (a3 != a2)
    {
      uint64_t v9 = a4[2];
      uint64_t v10 = a4[3];
      float v11 = a6 - a5;
      uint64_t v12 = (float32x4_t *)(result + 16 * a2);
      uint64_t v13 = *a4;
      uint64_t v14 = a4[1];
      do
      {
        int v15 = 9 * ((((unint64_t)(5 * v14) >> 32) >> 25) | (640 * v14));
        uint64_t v16 = v13 ^ v9;
        uint64_t v17 = v14 ^ v10;
        v9 ^= v13 ^ (v14 << 17);
        v14 ^= v16;
        v13 ^= v17;
        uint64_t v10 = __ROR8__(v17, 19);
        *uint64_t v12 = vmulq_n_f32(*v12, (float)(v11 * (float)((float)(*(void *)&v15 & 0xFFFFFFLL) * 0.000000059605)) + a5);
        ++v12;
        --v8;
      }
      while (v8);
      *a4 = v13;
      a4[1] = v14;
      a4[2] = v9;
      a4[3] = v10;
    }
  }
  return result;
}

uint64_t sub_1B6C94B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a1 + 16) && (sub_1B62B2CE0(a2, a3), (v3 & 1) != 0)) {
    return swift_unknownObjectRetain();
  }
  else {
    return 0;
  }
}

uint64_t sub_1B6C94BC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, char a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  uint64_t result = sub_1B62D0468(a1, (uint64_t)&v204, (unint64_t *)&qword_1EB97D810, (uint64_t (*)(uint64_t))type metadata accessor for simd_float4x4);
  if ((v208 & 1) == 0)
  {
    int32x4_t v41 = (int32x4_t)vmulq_f32(v204, v204);
    float32x4_t v42 = vmulq_f32(v205, v205);
    int32x4_t v43 = (int32x4_t)vmulq_f32(v206, v206);
    int32x4_t v44 = vzip2q_s32(v41, v43);
    float32x4_t v45 = (float32x4_t)vzip1q_s32(vzip1q_s32(v41, v43), (int32x4_t)v42);
    float32x4_t v46 = (float32x4_t)vtrn2q_s32(v41, (int32x4_t)v42);
    v46.i32[2] = v43.i32[1];
    float32x4_t v47 = vaddq_f32((float32x4_t)vzip1q_s32(v44, vdupq_laneq_s32((int32x4_t)v42, 2)), vaddq_f32(v45, v46));
    v42.i64[0] = 0x80000000800000;
    v42.i64[1] = 0x80000000800000;
    int32x4_t v48 = vcgeq_f32(v42, v47);
    v47.i32[3] = 0;
    float32x4_t v49 = vrsqrteq_f32(v47);
    float32x4_t v50 = vmulq_f32(v49, vrsqrtsq_f32(v47, vmulq_f32(v49, v49)));
    int32x4_t v51 = v48;
    v51.i32[3] = 0;
    float32x4_t v52 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v51), (int8x16_t)v47, (int8x16_t)vmulq_f32(v50, vrsqrtsq_f32(v47, vmulq_f32(v50, v50))));
    float32x4_t v53 = vmulq_n_f32(v204, v52.f32[0]);
    float32x4_t v54 = vmulq_lane_f32(v205, *(float32x2_t *)v52.f32, 1);
    float32x4_t v55 = vmulq_laneq_f32(v206, v52, 2);
    int8x16_t v56 = (int8x16_t)vuzp1q_s32((int32x4_t)v55, (int32x4_t)v55);
    int8x16_t v57 = (int8x16_t)vuzp1q_s32((int32x4_t)v54, (int32x4_t)v54);
    int32x4_t v58 = (int32x4_t)v53;
    if (v48.i32[0])
    {
      int8x16_t v59 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v56, (int8x16_t)v55, 0xCuLL), vnegq_f32(v54)), v55, (float32x4_t)vextq_s8(v57, (int8x16_t)v54, 0xCuLL));
      int32x4_t v58 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v59, (int32x4_t)v59), v59, 0xCuLL);
    }
    int8x16_t v60 = (int8x16_t)vuzp1q_s32((int32x4_t)v53, (int32x4_t)v53);
    float32x4_t v61 = v54;
    if (v48.i32[1])
    {
      int8x16_t v62 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v60, (int8x16_t)v53, 0xCuLL), vnegq_f32(v55)), v53, (float32x4_t)vextq_s8(v56, (int8x16_t)v55, 0xCuLL));
      float32x4_t v61 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v62, (int32x4_t)v62), v62, 0xCuLL);
    }
    if (v48.i32[2])
    {
      int8x16_t v63 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v57, (int8x16_t)v54, 0xCuLL), vnegq_f32(v53)), v54, (float32x4_t)vextq_s8(v60, (int8x16_t)v53, 0xCuLL));
      float32x4_t v55 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v63, (int32x4_t)v63), v63, 0xCuLL);
    }
    float v64 = (float)(*(float *)v58.i32 + v61.f32[1]) + v55.f32[2];
    if (v64 > 0.0)
    {
      float32x4_t v65 = (float32x4_t)vzip2q_s32((int32x4_t)v61, vuzp1q_s32((int32x4_t)v61, (int32x4_t)v55));
      v65.i32[2] = v58.i32[1];
      float v66 = sqrtf(v64 + 1.0);
      float32x4_t v67 = (float32x4_t)vtrn2q_s32((int32x4_t)v55, vzip2q_s32((int32x4_t)v55, v58));
      v67.i32[2] = v61.i32[0];
      float32x4_t v69 = vsubq_f32(v65, v67);
      v65.f32[3] = v66;
      v67.f32[3] = v66;
      float32x4_t v68 = vmulq_f32(v65, v67);
      v69.i32[3] = v68.i32[3];
      goto LABEL_52;
    }
    if (*(float *)v58.i32 < v61.f32[1] || *(float *)v58.i32 < v55.f32[2])
    {
      if (v61.f32[1] <= v55.f32[2])
      {
        float v66 = sqrtf((float)((float)(v55.f32[2] + 1.0) - *(float *)v58.i32) - v61.f32[1]);
        *(float32x2_t *)v69.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v58, (int32x4_t)v61), *(float32x2_t *)v55.f32);
        float32x2_t v114 = (float32x2_t)__PAIR64__(v58.u32[1], LODWORD(v66));
        float32x2_t v115 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.f32, 0);
        *(float32x2_t *)v68.f32 = vsub_f32(*(float32x2_t *)v58.i8, v115);
        v115.f32[0] = v66;
        v114.i32[0] = vmul_f32(v114, v115).u32[0];
        v114.i32[1] = v68.i32[1];
        *(float32x2_t *)&v69.u32[2] = v114;
LABEL_52:
        v68.f32[0] = 0.5 / v66;
        float32x4_t v113 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v68.f32, 0);
        if (*(unsigned char *)(a2 + 24))
        {
LABEL_53:
          float32x4_t v196 = v207;
          float32x4_t v200 = v205;
          float32x4_t v201 = v204;
          float32x4_t v198 = v69;
          float32x4_t v199 = v206;
          float32x4_t v197 = v113;
          uint64_t result = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, *(uint64_t **)(a3 + 88), *(void *)(a3 + 96), *(void *)(a3 + 104), *(void *)(a3 + 16));
          float32x4_t v113 = v197;
          float32x4_t v69 = v198;
          uint64_t v116 = *(void *)(a3 + 48);
          uint64_t v117 = *(void *)(a3 + 56) - v116;
          if (v117)
          {
            uint64_t v118 = v116 + a4;
            char v119 = (float32x4_t *)(result + 16 * v116);
            do
            {
              float32x4_t v120 = vmlaq_n_f32(vmlaq_n_f32(vmlaq_n_f32(v196, v199, *(float *)(a6 + 12 * (v118 % a5) + 8)), v200, *(float *)(a6 + 12 * (v118 % a5) + 4)), v201, *(float *)(a6 + 12 * (v118 % a5)));
              v120.i32[3] = 1.0;
              *v119++ = v120;
              ++v118;
              --v117;
            }
            while (v117);
          }
        }
LABEL_56:
        float32x4_t v202 = vmulq_f32(v69, v113);
        if ((a7 & 1) != 0 && (a10 & 1) == 0)
        {
          uint64_t v121 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, *(uint64_t **)(a3 + 88), *(void *)(a3 + 96), *(void *)(a3 + 104), *(void *)(a3 + 16));
          uint64_t v125 = *(void *)(a3 + 48);
          uint64_t v126 = *(void *)(a3 + 56);
          uint64_t v127 = v126 - v125;
          if (v126 != v125)
          {
            float32x4_t v128 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v202, (int32x4_t)v202), (int8x16_t)v202, 0xCuLL);
            float32x4_t v129 = vnegq_f32(v202);
            uint64_t v130 = v125 + a4;
            char v131 = (float32x4_t *)(v121 + 16 * v125);
            do
            {
              uint64_t v132 = a8 + 12 * (v130 % a5);
              v124.i64[0] = *(void *)v132;
              float32x4_t v133 = v124;
              v133.i32[2] = *(_DWORD *)(v132 + 8);
              v124.i32[2] = v133.i32[2];
              float32x4_t v134 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v133, (int32x4_t)v133), (int8x16_t)v133, 0xCuLL), v129), v133, v128);
              int8x16_t v135 = (int8x16_t)vaddq_f32(v134, v134);
              float32x4_t v136 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v135, (int32x4_t)v135), v135, 0xCuLL);
              v133.i32[3] = v123;
              int8x16_t v137 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v136, (int32x4_t)v136), (int8x16_t)v136, 0xCuLL), v129), v136, v128);
              float32x4_t v138 = vaddq_f32(vaddq_f32(v124, vmulq_laneq_f32(v136, v202, 3)), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v137, (int32x4_t)v137), v137, 0xCuLL));
              v124.i32[3] = v122;
              v138.i32[3] = 0;
              ++v130;
              *v131++ = v138;
              __int32 v123 = v133.i32[3];
              --v127;
            }
            while (v127);
          }
          uint64_t result = sub_1B6C94AA8(v121, v125, v126, (uint64_t *)(a11 + 8), *(float *)(a2 + 16), *(float *)(a2 + 20));
        }
        if ((*(unsigned char *)(a2 + 27) & 1) == 0) {
          return result;
        }
        uint64_t result = sub_1B62C9024((uint64_t)&type metadata for Orientation, (uint64_t)&off_1F0F560A8, *(uint64_t **)(a3 + 88), *(void *)(a3 + 96), *(void *)(a3 + 104), *(void *)(a3 + 16));
        if ((a14 & 1) == 0)
        {
          uint64_t v144 = *(void *)(a3 + 48);
          uint64_t v145 = *(void *)(a3 + 56) - v144;
          if (v145)
          {
            float32x4_t v146 = (float32x4_t)vdupq_laneq_s32((int32x4_t)v202, 3);
            _S1 = v202.i32[3];
            float32x4_t v148 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v202, (int32x4_t)v202), (int8x16_t)v202, 0xCuLL);
            float32x4_t v149 = vnegq_f32(v202);
            uint64_t v150 = v144 + a4;
            float32x2_t v151 = (float32x4_t *)(result + 16 * v144);
            do
            {
              _Q4 = *(float32x4_t *)(a12 + 16 * (v150 % a5));
              _Q6 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q4, (int32x4_t)_Q4), (int8x16_t)_Q4, 0xCuLL), v149), _Q4, v148);
              float32x4_t v154 = vaddq_f32(vmlaq_f32(vmulq_laneq_f32(v202, _Q4, 3), v146, _Q4), (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)_Q6, (int32x4_t)_Q6), _Q6, 0xCuLL));
              __asm { FMLA            S6, S1, V4.S[3] }
              v154.i32[3] = _Q6.i32[0];
              *v151++ = v154;
              ++v150;
              --v145;
            }
            while (v145);
          }
          return result;
        }
        if (a10) {
          return result;
        }
        uint64_t v155 = *(void *)(a3 + 48);
        uint64_t v156 = *(void *)(a3 + 56) - v155;
        if (!v156) {
          return result;
        }
        float32x4_t v157 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v202, (int32x4_t)v202), (int8x16_t)v202, 0xCuLL);
        float32x4_t v158 = vnegq_f32(v202);
        uint64_t v159 = v155 + a4;
        unint64_t v160 = (float32x4_t *)(result + 16 * v155);
        __asm { FMOV            V2.4S, #1.0 }
        v139.i32[0] = 1.0;
        v162.i64[0] = 0x8000000080000000;
        v162.i64[1] = 0x8000000080000000;
        while (1)
        {
          __int32 v170 = v143.i32[3];
          __int32 v171 = v142.i32[3];
          uint64_t v172 = a8 + 12 * (v159 % a5);
          v140.i64[0] = *(void *)v172;
          float32x4_t v173 = v140;
          v173.i32[2] = *(_DWORD *)(v172 + 8);
          v140.i32[2] = v173.i32[2];
          float32x4_t v174 = vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v173, (int32x4_t)v173), (int8x16_t)v173, 0xCuLL), v158), v173, v157);
          int8x16_t v175 = (int8x16_t)vaddq_f32(v174, v174);
          float32x4_t v176 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v175, (int32x4_t)v175), v175, 0xCuLL);
          float32x4_t v142 = vaddq_f32(v140, vmulq_laneq_f32(v176, v202, 3));
          v142.i32[3] = v171;
          int8x16_t v177 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v176, (int32x4_t)v176), (int8x16_t)v176, 0xCuLL), v158), v176, v157);
          float32x4_t v143 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v177, (int32x4_t)v177), v177, 0xCuLL);
          v143.i32[3] = v170;
          float32x4_t v168 = vaddq_f32(v142, v143);
          float32x4_t v178 = vmulq_f32(v168, v168);
          v178.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v178, 2), vaddq_f32(v178, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v178.f32, 1))).u64[0];
          float32x4_t v179 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v178.f32, 0);
          v179.i32[3] = 0;
          float32x4_t v180 = vrsqrteq_f32(v179);
          float32x4_t v181 = vmulq_f32(v180, vrsqrtsq_f32(v179, vmulq_f32(v180, v180)));
          int32x4_t v182 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v178.f32[0] != 0.0)), 0x1FuLL));
          v182.i32[3] = 0;
          float32x4_t v187 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v182), (int8x16_t)vmulq_f32(v181, vrsqrtsq_f32(v179, vmulq_f32(v181, v181))), _Q2);
          float32x4_t v183 = vmulq_f32(v168, v187);
          v181.i32[0] = v183.i32[2];
          float v184 = *(float *)vbslq_s8(v162, v139, (int8x16_t)v181).i32;
          v168.f32[0] = v183.f32[1] / (float)(fabsf(v183.f32[2]) + 1.0);
          float v185 = vmuls_lane_f32(v168.f32[0], *(float32x2_t *)v183.f32, 1);
          v168.f32[0] = -(float)(v183.f32[0] * v168.f32[0]);
          float v186 = v183.f32[2] + (float)(v184 * v185);
          v187.f32[0] = v184 * v168.f32[0];
          float v188 = 1.0 - v185;
          float v189 = vmuls_lane_f32(-v184, *(float32x2_t *)v183.f32, 1);
          float v190 = v183.f32[2] + (float)(v186 + v188);
          if (v190 > 0.0)
          {
            float32x2_t v163 = (float32x2_t)vrev64_s32(*(int32x2_t *)v183.f32);
            *(int32x2_t *)v167.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v183.f32, *(float32x2_t *)v183.f32), 0);
            v167.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v163.u32[1], LODWORD(v189)), v163).u32[0];
            float32x2_t v164 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v190 + 1.0)), v187.u32[0]);
            float32x2_t v165 = vmul_f32(v164, v164);
            v164.i32[0] = v168.i32[0];
            unsigned __int32 v166 = vsub_f32(*(float32x2_t *)v187.f32, v164).u32[0];
            v168.i32[1] = v165.i32[1];
            v167.i64[1] = v168.i64[0];
            v168.f32[0] = 0.5 / v164.f32[1];
          }
          else
          {
            if (v186 >= v188 && v186 >= v183.f32[2])
            {
              float v193 = sqrtf((float)((float)(v186 + 1.0) - v188) - v183.f32[2]);
              v169.f32[0] = v193 * v193;
              v169.f32[1] = v168.f32[0] + v187.f32[0];
              int32x2_t v194 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v189), v183.u32[0]), *(float32x2_t *)v183.f32);
LABEL_83:
              *(int32x2_t *)&v169.u32[2] = v194;
              *(float *)v194.i32 = 0.5 / v193;
              float32x4_t v167 = (float32x4_t)vdupq_lane_s32(v194, 0);
              goto LABEL_74;
            }
            if (v188 > v183.f32[2])
            {
              float v193 = sqrtf((float)((float)(v188 + 1.0) - v186) - v183.f32[2]);
              v169.f32[0] = v168.f32[0] + v187.f32[0];
              float32x2_t v192 = (float32x2_t)vrev64_s32(*(int32x2_t *)v183.f32);
              v169.f32[1] = v193 * v193;
              int32x2_t v194 = (int32x2_t)vadd_f32(v192, (float32x2_t)__PAIR64__(v192.u32[1], LODWORD(v189)));
              goto LABEL_83;
            }
            float v195 = sqrtf((float)((float)(v183.f32[2] + 1.0) - v186) - v188);
            v167.i32[0] = vsubq_f32(v183, v183).u32[0];
            v167.f32[1] = v183.f32[1] + v189;
            v167.f32[2] = v195 * v195;
            v167.f32[3] = v187.f32[0] - v168.f32[0];
            v168.f32[0] = 0.5 / v195;
          }
          float32x4_t v169 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v168.f32, 0);
LABEL_74:
          v140.i32[3] = v141;
          *v160++ = vmulq_f32(v167, v169);
          ++v159;
          if (!--v156) {
            return result;
          }
        }
      }
      float v107 = sqrtf((float)((float)(v61.f32[1] + 1.0) - *(float *)v58.i32) - v55.f32[2]);
      *(int32x2_t *)v54.f32 = vdup_laneq_s32((int32x4_t)v61, 2);
      int8x16_t v71 = (int8x16_t)v54;
      *(float *)v71.i32 = v107;
      v71.i32[0] = vmul_f32(*(float32x2_t *)v71.i8, (float32x2_t)__PAIR64__(v55.u32[1], LODWORD(v107))).u32[0];
      v71.i32[1] = vadd_f32(*(float32x2_t *)&v54, *(float32x2_t *)&v55).i32[1];
      int8x16_t v72 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v58.i8, 1), v61);
      int32x2_t v112 = (int32x2_t)vsubq_f32(v55, (float32x4_t)vdupq_laneq_s32(v58, 2)).u64[0];
      float32x4_t v113 = (float32x4_t)vextq_s8(vextq_s8(v72, v72, 4uLL), v71, 0xCuLL);
      v113.i32[3] = v112.i32[0];
    }
    else
    {
      float v107 = sqrtf((float)((float)(*(float *)v58.i32 + 1.0) - v61.f32[1]) - v55.f32[2]);
      float32x2_t v108 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v61.f32, 0);
      float32x2_t v109 = vadd_f32(*(float32x2_t *)v58.i8, v108);
      v108.f32[0] = v107;
      v113.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v58.u32[1], LODWORD(v107)), v108).u32[0];
      v113.i32[1] = v109.i32[1];
      float32x2_t v110 = (float32x2_t)vzip2q_s32(v58, (int32x4_t)v61).u64[0];
      LODWORD(v111) = vadd_f32(v110, *(float32x2_t *)v55.f32).u32[0];
      int32x2_t v112 = (int32x2_t)vsub_f32(v110, *(float32x2_t *)v55.f32);
      HIDWORD(v111) = v112.i32[1];
      v113.i64[1] = v111;
    }
    *(float *)v112.i32 = 0.5 / v107;
    float32x4_t v69 = (float32x4_t)vdupq_lane_s32(v112, 0);
    if (*(unsigned char *)(a2 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_56;
  }
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t result = sub_1B62C9024((uint64_t)&type metadata for Position, (uint64_t)&off_1F0FA6EE0, *(uint64_t **)(a3 + 88), *(void *)(a3 + 96), *(void *)(a3 + 104), *(void *)(a3 + 16));
    uint64_t v21 = *(void *)(a3 + 48);
    uint64_t v22 = *(void *)(a3 + 56) - v21;
    if (v22)
    {
      uint64_t v23 = v21 + a4;
      float v24 = (_OWORD *)(result + 16 * v21);
      do
      {
        uint64_t v25 = a6 + 12 * (v23 % a5);
        *(void *)&long long v26 = *(void *)v25;
        DWORD2(v26) = *(_DWORD *)(v25 + 8);
        HIDWORD(v26) = 1.0;
        *v24++ = v26;
        ++v23;
        --v22;
      }
      while (v22);
    }
  }
  if ((a7 & 1) != 0 && (a10 & 1) == 0)
  {
    uint64_t v27 = sub_1B62C9024((uint64_t)&type metadata for Velocity, (uint64_t)&off_1F0FA7C08, *(uint64_t **)(a3 + 88), *(void *)(a3 + 96), *(void *)(a3 + 104), *(void *)(a3 + 16));
    uint64_t v28 = *(void *)(a3 + 48);
    uint64_t v29 = *(void *)(a3 + 56);
    uint64_t v30 = v29 - v28;
    if (v29 != v28)
    {
      uint64_t v31 = v28 + a4;
      float v32 = (_OWORD *)(v27 + 16 * v28);
      do
      {
        uint64_t v33 = a8 + 12 * (v31 % a5);
        *(void *)&long long v34 = *(void *)v33;
        *((void *)&v34 + 1) = *(unsigned int *)(v33 + 8);
        *v32++ = v34;
        ++v31;
        --v30;
      }
      while (v30);
    }
    uint64_t result = sub_1B6C94AA8(v27, v28, v29, (uint64_t *)(a11 + 8), *(float *)(a2 + 16), *(float *)(a2 + 20));
  }
  if (*(unsigned char *)(a2 + 27))
  {
    uint64_t result = sub_1B62C9024((uint64_t)&type metadata for Orientation, (uint64_t)&off_1F0F560A8, *(uint64_t **)(a3 + 88), *(void *)(a3 + 96), *(void *)(a3 + 104), *(void *)(a3 + 16));
    if ((a14 & 1) == 0)
    {
      uint64_t v37 = *(void *)(a3 + 48);
      uint64_t v38 = *(void *)(a3 + 56) - v37;
      if (v38)
      {
        uint64_t v39 = v37 + a4;
        uint64_t v40 = (_OWORD *)(result + 16 * v37);
        do
        {
          *v40++ = *(_OWORD *)(a12 + 16 * (v39 % a5));
          ++v39;
          --v38;
        }
        while (v38);
      }
      return result;
    }
    if (a10) {
      return result;
    }
    uint64_t v73 = *(void *)(a3 + 48);
    uint64_t v74 = *(void *)(a3 + 56) - v73;
    if (!v74) {
      return result;
    }
    uint64_t v75 = v73 + a4;
    uint64_t v76 = (float32x4_t *)(result + 16 * v73);
    __asm { FMOV            V0.4S, #1.0 }
    v35.i32[0] = 1.0;
    v81.i64[0] = 0x8000000080000000;
    v81.i64[1] = 0x8000000080000000;
    do
    {
      uint64_t v88 = a8 + 12 * (v75 % a5);
      v36.i64[0] = *(void *)v88;
      v36.i32[2] = *(_DWORD *)(v88 + 8);
      float32x4_t v89 = vmulq_f32(v36, v36);
      v89.i64[0] = vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v89, 2), vaddq_f32(v89, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 1))).u64[0];
      float32x4_t v90 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v89.f32, 0);
      v90.i32[3] = 0;
      float32x4_t v91 = vrsqrteq_f32(v90);
      float32x4_t v92 = vmulq_f32(v91, vrsqrtsq_f32(v90, vmulq_f32(v91, v91)));
      int32x4_t v93 = vcltzq_s32(vshlq_n_s32((int32x4_t)vmovl_u16((uint16x4_t)vdup_n_s16(v89.f32[0] != 0.0)), 0x1FuLL));
      v93.i32[3] = 0;
      float32x4_t v98 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v93), (int8x16_t)vmulq_f32(v92, vrsqrtsq_f32(v90, vmulq_f32(v92, v92))), _Q0);
      float32x4_t v94 = vmulq_f32(v36, v98);
      v92.i32[0] = v94.i32[2];
      float v95 = *(float *)vbslq_s8(v81, v35, (int8x16_t)v92).i32;
      v36.f32[0] = v94.f32[1] / (float)(fabsf(v94.f32[2]) + 1.0);
      float v96 = vmuls_lane_f32(v36.f32[0], *(float32x2_t *)v94.f32, 1);
      v36.f32[0] = -(float)(v94.f32[0] * v36.f32[0]);
      float v97 = v94.f32[2] + (float)(v95 * v96);
      v98.f32[0] = v95 * v36.f32[0];
      float v99 = 1.0 - v96;
      float v100 = vmuls_lane_f32(-v95, *(float32x2_t *)v94.f32, 1);
      float v101 = v94.f32[2] + (float)(v97 + v99);
      if (v101 > 0.0)
      {
        float32x2_t v82 = (float32x2_t)vrev64_s32(*(int32x2_t *)v94.f32);
        *(int32x2_t *)v86.f32 = vdup_lane_s32((int32x2_t)vadd_f32(*(float32x2_t *)v94.f32, *(float32x2_t *)v94.f32), 0);
        v86.i32[0] = vsub_f32((float32x2_t)__PAIR64__(v82.u32[1], LODWORD(v100)), v82).u32[0];
        float32x2_t v83 = (float32x2_t)__PAIR64__(COERCE_UNSIGNED_INT(sqrtf(v101 + 1.0)), v98.u32[0]);
        float32x2_t v84 = vmul_f32(v83, v83);
        v83.i32[0] = v36.i32[0];
        unsigned __int32 v85 = vsub_f32(*(float32x2_t *)v98.f32, v83).u32[0];
        v36.i32[1] = v84.i32[1];
        v86.i64[1] = v36.i64[0];
        v36.f32[0] = 0.5 / v83.f32[1];
      }
      else
      {
        if (v97 >= v99 && v97 >= v94.f32[2])
        {
          float v104 = sqrtf((float)((float)(v97 + 1.0) - v99) - v94.f32[2]);
          v87.f32[0] = v104 * v104;
          v87.f32[1] = v36.f32[0] + v98.f32[0];
          int32x2_t v105 = (int32x2_t)vsub_f32((float32x2_t)__PAIR64__(LODWORD(v100), v94.u32[0]), *(float32x2_t *)v94.f32);
LABEL_47:
          *(int32x2_t *)&v87.u32[2] = v105;
          *(float *)v105.i32 = 0.5 / v104;
          float32x4_t v86 = (float32x4_t)vdupq_lane_s32(v105, 0);
          goto LABEL_38;
        }
        if (v99 > v94.f32[2])
        {
          float v104 = sqrtf((float)((float)(v99 + 1.0) - v97) - v94.f32[2]);
          v87.f32[0] = v36.f32[0] + v98.f32[0];
          float32x2_t v103 = (float32x2_t)vrev64_s32(*(int32x2_t *)v94.f32);
          v87.f32[1] = v104 * v104;
          int32x2_t v105 = (int32x2_t)vadd_f32(v103, (float32x2_t)__PAIR64__(v103.u32[1], LODWORD(v100)));
          goto LABEL_47;
        }
        float v106 = sqrtf((float)((float)(v94.f32[2] + 1.0) - v97) - v99);
        v86.i32[0] = vsubq_f32(v94, v94).u32[0];
        v86.f32[1] = v94.f32[1] + v100;
        v86.f32[2] = v106 * v106;
        v86.f32[3] = v98.f32[0] - v36.f32[0];
        v36.f32[0] = 0.5 / v106;
      }
      float32x4_t v87 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v36.f32, 0);
LABEL_38:
      float32x4_t v36 = vmulq_f32(v86, v87);
      *v76++ = v36;
      ++v75;
      --v74;
    }
    while (v74);
  }
  return result;
}

uint64_t *sub_1B6C95700(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v7 = a5;
  uint64_t v10 = (uint64_t)result;
  uint64_t v371 = *MEMORY[0x1E4F143B8];
  if (*((unsigned char *)result + 272) == 1)
  {
    uint64_t v11 = result[58];
    if (v11 < a3)
    {
      uint64_t v12 = *(void *)(a5 + 8);
      sub_1B62F6B80(a5);
      sub_1B6C01DAC(v12, a4, v10, a3, v11, v7);
      return (uint64_t *)sub_1B62F648C(v7);
    }
    return result;
  }
  uint64_t result = (uint64_t *)sub_1B68E6474(*(_DWORD *)(*result + 204));
  if (result == (uint64_t *)a3) {
    return result;
  }
  uint64_t v14 = result;
  uint64_t v269 = v7;
  if (*(void *)(a2 + 16))
  {
    uint64_t v15 = sub_1B62B2CE0(0x6E6F697469736F70, 0xE800000000000000);
    if (v16)
    {
      uint64_t v17 = (void *)(*(void *)(a2 + 56) + 32 * v15);
      uint64_t v18 = v17[1];
      uint64_t v19 = v17[2];
      uint64_t v20 = v17[3];
      uint64_t v21 = (void *)swift_unknownObjectRetain();
      uint64_t v22 = v20;
      uint64_t v7 = v269;
      uint64_t v23 = sub_1B6C8AB94(v21, v18, v19, v22);
      uint64_t v287 = v24;
      uint64_t v288 = (uint64_t)v23;
      LOBYTE(v19) = v25;
      swift_unknownObjectRelease();
      char v26 = v19 & 1;
    }
    else
    {
      uint64_t v287 = 0;
      uint64_t v288 = 0;
      char v26 = 1;
    }
    unsigned __int8 v286 = v26;
    if (*(void *)(a2 + 16))
    {
      uint64_t v28 = sub_1B62B2CE0(0x7461746E6569726FLL, 0xEB000000006E6F69);
      if (v29)
      {
        uint64_t v30 = (void *)(*(void *)(a2 + 56) + 32 * v28);
        uint64_t v31 = v30[1];
        uint64_t v32 = v30[2];
        uint64_t v33 = v30[3];
        long long v34 = (void *)swift_unknownObjectRetain();
        uint64_t v35 = v33;
        uint64_t v7 = v269;
        float32x4_t v36 = sub_1B6C8AC3C(v34, v31, v32, v35);
        uint64_t v284 = v37;
        uint64_t v285 = (uint64_t)v36;
        LOBYTE(v32) = v38;
        swift_unknownObjectRelease();
        char v39 = v32 & 1;
      }
      else
      {
        uint64_t v284 = 0;
        uint64_t v285 = 0;
        char v39 = 1;
      }
      unsigned __int8 v283 = v39;
      if (*(void *)(a2 + 16) && (uint64_t v40 = sub_1B62B2CE0(0x726F6C6F63, 0xE500000000000000), (v41 & 1) != 0))
      {
        float32x4_t v42 = (void *)(*(void *)(a2 + 56) + 32 * v40);
        uint64_t v43 = v42[1];
        uint64_t v44 = v42[2];
        uint64_t v45 = v42[3];
        float32x4_t v46 = (void *)swift_unknownObjectRetain();
        uint64_t v47 = v45;
        uint64_t v7 = v269;
        int32x4_t v48 = sub_1B6C8AC3C(v46, v43, v44, v47);
        uint64_t v281 = v49;
        uint64_t v282 = (uint64_t)v48;
        LOBYTE(v44) = v50;
        swift_unknownObjectRelease();
        char v27 = v44 & 1;
      }
      else
      {
        uint64_t v281 = 0;
        uint64_t v282 = 0;
        char v27 = 1;
      }
    }
    else
    {
      uint64_t v284 = 0;
      uint64_t v285 = 0;
      uint64_t v281 = 0;
      uint64_t v282 = 0;
      char v27 = 1;
      unsigned __int8 v283 = 1;
    }
  }
  else
  {
    uint64_t v284 = 0;
    uint64_t v285 = 0;
    uint64_t v287 = 0;
    uint64_t v288 = 0;
    uint64_t v281 = 0;
    uint64_t v282 = 0;
    char v27 = 1;
    unsigned __int8 v283 = 1;
    unsigned __int8 v286 = 1;
  }
  unsigned __int8 v280 = v27;
  if (*(void *)(a2 + 16))
  {
    uint64_t v51 = sub_1B62B2CE0(1702521203, 0xE400000000000000);
    if (v52)
    {
      float32x4_t v53 = (void *)(*(void *)(a2 + 56) + 32 * v51);
      uint64_t v54 = v53[1];
      uint64_t v55 = v53[2];
      uint64_t v56 = v53[3];
      int8x16_t v57 = (void *)swift_unknownObjectRetain();
      uint64_t v58 = v56;
      uint64_t v7 = v269;
      int8x16_t v59 = sub_1B6C8AA54(v57, v54, v55, v58);
      uint64_t v278 = v60;
      uint64_t v279 = (uint64_t)v59;
      LOBYTE(v55) = v61;
      swift_unknownObjectRelease();
      char v62 = v55 & 1;
    }
    else
    {
      uint64_t v278 = 0;
      uint64_t v279 = 0;
      char v62 = 1;
    }
    unsigned __int8 v277 = v62;
    if (*(void *)(a2 + 16))
    {
      uint64_t v64 = sub_1B62B2CE0(1702521203, 0xE400000000000000);
      if (v65)
      {
        float v66 = (void *)(*(void *)(a2 + 56) + 32 * v64);
        uint64_t v67 = v66[1];
        uint64_t v68 = v66[2];
        uint64_t v69 = v66[3];
        unint64_t v70 = (void *)swift_unknownObjectRetain();
        uint64_t v71 = v69;
        uint64_t v7 = v269;
        int8x16_t v72 = sub_1B6C8AAF4(v70, v67, v68, v71);
        uint64_t v275 = v73;
        uint64_t v276 = (uint64_t)v72;
        LOBYTE(v68) = v74;
        swift_unknownObjectRelease();
        char v75 = v68 & 1;
      }
      else
      {
        uint64_t v275 = 0;
        uint64_t v276 = 0;
        char v75 = 1;
      }
      unsigned __int8 v274 = v75;
      if (*(void *)(a2 + 16) && (uint64_t v76 = sub_1B62B2CE0(1702521203, 0xE400000000000000), (v77 & 1) != 0))
      {
        char v78 = (void *)(*(void *)(a2 + 56) + 32 * v76);
        uint64_t v79 = v78[1];
        uint64_t v80 = v78[2];
        uint64_t v81 = v78[3];
        float32x2_t v82 = (void *)swift_unknownObjectRetain();
        uint64_t v83 = v81;
        uint64_t v7 = v269;
        float32x2_t v84 = sub_1B6C8AB94(v82, v79, v80, v83);
        uint64_t v272 = v85;
        uint64_t v273 = (uint64_t)v84;
        LOBYTE(v80) = v86;
        swift_unknownObjectRelease();
        char v63 = v80 & 1;
      }
      else
      {
        uint64_t v272 = 0;
        uint64_t v273 = 0;
        char v63 = 1;
      }
    }
    else
    {
      uint64_t v275 = 0;
      uint64_t v276 = 0;
      uint64_t v272 = 0;
      uint64_t v273 = 0;
      char v63 = 1;
      unsigned __int8 v274 = 1;
    }
  }
  else
  {
    uint64_t v275 = 0;
    uint64_t v276 = 0;
    uint64_t v278 = 0;
    uint64_t v279 = 0;
    uint64_t v272 = 0;
    uint64_t v273 = 0;
    char v63 = 1;
    unsigned __int8 v274 = 1;
    unsigned __int8 v277 = 1;
  }
  char v271 = v63;
  float32x4_t v302 = v6;
  uint64_t v87 = *(void *)(v7 + 32);
  if (qword_1EB97DC28 != -1) {
    swift_once();
  }
  uint64_t v88 = qword_1EB997A18;
  sub_1B62D2E40(0, (unint64_t *)&qword_1EB980C70, (uint64_t (*)(uint64_t))sub_1B6642FC0, MEMORY[0x1E4FBBE00]);
  uint64_t v89 = swift_allocObject();
  *(_OWORD *)(v89 + 16) = xmmword_1B6E77050;
  *(void *)(v89 + 32) = &type metadata for Particle;
  *(void *)(v89 + 40) = &off_1F0FA6CF0;
  uint64_t v331 = v88;
  int v332 = 0;
  char v333 = 2;
  uint64_t v334 = 0;
  char v335 = 2;
  uint64_t v336 = 0;
  swift_retain();
  sub_1B62F776C(v89, 1, (uint64_t)v312);
  swift_setDeallocating();
  swift_deallocClassInstance();
  swift_release();
  sub_1B6C9B0B4(0, (unint64_t *)&qword_1EB980B60, (unint64_t *)&qword_1EB97E840);
  uint64_t v90 = swift_allocObject();
  *(_OWORD *)(v90 + 16) = xmmword_1B6E77050;
  *(void *)(v90 + 56) = &type metadata for EmitterReference;
  *(void *)(v90 + 64) = &off_1F0F6BD40;
  *(void *)(v90 + 32) = v87;
  sub_1B62F7044(v90, (uint64_t)v313);
  swift_setDeallocating();
  sub_1B62C5560(0, (unint64_t *)&qword_1EB97E840);
  swift_arrayDestroy();
  swift_deallocClassInstance();
  sub_1B62CA064((uint64_t)v312);
  uint64_t v325 = v313[0];
  int v326 = 0;
  char v327 = 2;
  uint64_t v328 = v313[2];
  char v329 = v314;
  uint64_t v330 = v315;
  uint64_t v92 = (uint64_t)v14 - a3;
  if ((uint64_t)v14 < a3)
  {
    Swift::Int v93 = a3 - (void)v14;
    uint64_t v94 = a4;
    uint64_t v95 = *(void *)(*(void *)(a4 + OBJC_IVAR____TtC3VFX13EntityManager_commandQueues)
                    + 8 * *(void *)thread_worker_index(&thread_worker_index, v91)
                    + 8);
    uint64_t v96 = v269;
    uint64_t v97 = *(unsigned int *)(v269 + 40);
    unsigned __int8 v98 = *(unsigned char *)(v269 + 44);
    uint64_t v99 = swift_retain();
    LOBYTE(v362) = v98;
    sub_1B6B22AD4(v99, v97 | ((unint64_t)v98 << 32), v93, v95);
    swift_release();
    goto LABEL_147;
  }
  uint64_t v94 = a4;
  sub_1B62C9DA8(a4, (uint64_t)&v325, 0x200000000, v337);
  sub_1B62D7FE8((uint64_t)v337, (uint64_t)v354, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (!*(void *)&v354[0]) {
    goto LABEL_145;
  }
  if (v360 <= 0 || (uint64_t v266 = v357) == 0)
  {
    sub_1B632F170(v337);
LABEL_145:
    uint64_t v96 = v269;
    goto LABEL_147;
  }
  uint64_t v100 = 0;
  float v101 = v359;
  uint64_t v102 = v359[4];
  int v103 = *(unsigned __int8 *)(v358 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
  v319[0] = v354[0];
  v319[1] = v354[1];
  uint64_t v257 = v356;
  uint64_t v320 = v355;
  uint64_t v254 = (uint64_t)(v359 + 6);
  float v104 = v359 + 13;
  uint64_t v251 = v359 + 8;
  float32x4_t v293 = v359;
  uint64_t v263 = v102;
  int v260 = v103;
  float32x4_t v291 = v359 + 13;
  do
  {
    int32x2_t v105 = (unsigned int *)(v257 + 48 * v100);
    uint64_t v106 = *v105;
    uint64_t v303 = v105[1];
    uint64_t v107 = *((void *)v105 + 2);
    uint64_t v108 = *((void *)v105 + 5);
    uint64_t v298 = *((void *)v105 + 4);
    uint64_t v289 = v100;
    if (v103)
    {
      float32x2_t v109 = *(os_unfair_lock_s **)(v108 + 376);
      swift_retain();
      os_unfair_lock_lock(v109);
      os_unfair_lock_lock(*(os_unfair_lock_t *)(v108 + 344));
    }
    else
    {
      swift_retain();
    }
    ecs_stack_allocator_push_snapshot(v102);
    sub_1B62D7FE8(v254, (uint64_t)v370, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
    uint64_t v110 = v101[4];
    uint64_t v111 = *(void *)(*(void *)(*(void *)(*(void *)(v108 + 40) + 16) + 32) + 16) + 1;
    swift_retain();
    v101[6] = ecs_stack_allocator_allocate(v110, 48 * v111, 8);
    void v101[7] = v111;
    v251[1] = 0;
    v251[2] = 0;
    *uint64_t v251 = 0;
    swift_release();
    uint64_t v308 = v108;
    if (v107)
    {
      uint64_t v112 = v298;
      if (v298)
      {
        uint64_t v113 = 0;
        uint64_t v295 = v107;
        do
        {
          uint64_t v114 = v92 - 1;
          if (v92 >= 1)
          {
            uint64_t v115 = *(void *)(v107 + 8 * v113);
            uint64_t v116 = *(void *)(v108 + 232);
            if (v115 < *(void *)(v108 + 256) || v115 >= v116)
            {
              uint64_t v304 = v92 - 1;
              uint64_t v343 = 0;
              long long v342 = 0u;
              long long v341 = 0u;
              char v344 = 5;
              uint64_t v118 = *(void *)(*v104 + 16);
              if (v118)
              {
                uint64_t v119 = *v104 + 32;
                swift_retain();
                swift_bridgeObjectRetain();
                uint64_t v120 = 0;
                while (2)
                {
                  sub_1B63B2978(v119, (uint64_t)v345);
                  sub_1B639192C((uint64_t)v345, (uint64_t)&v362);
                  sub_1B639192C((uint64_t)&v341, (uint64_t)v365);
                  switch(BYTE8(v364))
                  {
                    case 1:
                      sub_1B639192C((uint64_t)&v362, (uint64_t)v352);
                      if (v367 != 1) {
                        goto LABEL_60;
                      }
                      goto LABEL_75;
                    case 2:
                      sub_1B639192C((uint64_t)&v362, (uint64_t)v352);
                      if (v367 != 2) {
                        goto LABEL_59;
                      }
                      sub_1B62C15C4(v352, (uint64_t)v338);
                      sub_1B62C15C4((long long *)v365, (uint64_t)v361);
                      uint64_t v123 = v339;
                      uint64_t v124 = v340;
                      sub_1B62C14BC(v338, v339);
                      uint64_t v125 = v123;
                      uint64_t v126 = v124;
                      goto LABEL_72;
                    case 3:
                      sub_1B639192C((uint64_t)&v362, (uint64_t)v352);
                      if (v367 == 3)
                      {
                        sub_1B62C15C4(v352, (uint64_t)v338);
                        sub_1B62C15C4((long long *)v365, (uint64_t)v361);
                        uint64_t v127 = v339;
                        uint64_t v128 = v340;
                        sub_1B62C14BC(v338, v339);
                        uint64_t v125 = v127;
                        uint64_t v126 = v128;
LABEL_72:
                        BOOL v129 = sub_1B6B3D86C(v361, v125, v126);
                        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v361);
                        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v338);
                        sub_1B6391400((uint64_t)&v362);
                        sub_1B62C0034((uint64_t)v345, (uint64_t (*)(void))sub_1B63B29DC);
                        if (v129)
                        {
LABEL_80:
                          swift_bridgeObjectRelease();
                          float v104 = v291;
                          float32x4_t v134 = sub_1B6B1B930();
                          uint64_t v135 = *(void *)(v133 + 48);
                          if (v135)
                          {
                            uint64_t v136 = *(void *)(v133 + 64);
                            *(void *)(v135 + 8 * v136) = v115;
                            *(void *)(v133 + 64) = v136 + 1;
                          }
                          ((void (*)(long long *, void))v134)(&v362, 0);
                          float v101 = v293;
                          uint64_t v108 = v308;
                          uint64_t v107 = v295;
                          goto LABEL_49;
                        }
                      }
                      else
                      {
LABEL_59:
                        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v352);
LABEL_60:
                        sub_1B62C0034((uint64_t)&v362, (uint64_t (*)(void))sub_1B691F560);
                        sub_1B62C0034((uint64_t)v345, (uint64_t (*)(void))sub_1B63B29DC);
                      }
LABEL_61:
                      ++v120;
                      v119 += 72;
                      if (v118 != v120) {
                        continue;
                      }
                      swift_bridgeObjectRelease();
                      uint64_t v137 = v308;
                      uint64_t v116 = *(void *)(v308 + 232);
                      float v101 = v293;
                      float v104 = v291;
                      break;
                    case 4:
                      sub_1B639192C((uint64_t)&v362, (uint64_t)v352);
                      if (v367 != 4) {
                        goto LABEL_60;
                      }
                      int v121 = LOBYTE(v352[0]);
                      int v122 = v365[0];
                      sub_1B6391400((uint64_t)&v362);
                      sub_1B62C0034((uint64_t)v345, (uint64_t (*)(void))sub_1B63B29DC);
                      if (v121 == v122) {
                        goto LABEL_80;
                      }
                      goto LABEL_61;
                    case 5:
                      if (v367 != 5) {
                        goto LABEL_60;
                      }
                      int8x16_t v132 = vorrq_s8(*(int8x16_t *)&v365[8], v366);
                      if (*(void *)&vorr_s8(*(int8x8_t *)v132.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v132, v132, 8uLL)) | *(void *)v365) {
                        goto LABEL_60;
                      }
                      sub_1B6391400((uint64_t)&v362);
                      sub_1B62C0034((uint64_t)v345, (uint64_t (*)(void))sub_1B63B29DC);
                      goto LABEL_80;
                    default:
                      sub_1B639192C((uint64_t)&v362, (uint64_t)v352);
                      if ((_BYTE)v367) {
                        goto LABEL_60;
                      }
LABEL_75:
                      uint64_t v130 = *(void *)&v352[0];
                      uint64_t v131 = *(void *)v365;
                      sub_1B6391400((uint64_t)&v362);
                      sub_1B62C0034((uint64_t)v345, (uint64_t (*)(void))sub_1B63B29DC);
                      if (v130 == v131) {
                        goto LABEL_80;
                      }
                      goto LABEL_61;
                  }
                  break;
                }
              }
              else
              {
                uint64_t v137 = swift_retain();
              }
              uint64_t v138 = *(void *)(v137 + 240) - v116;
              int8x16_t v139 = ecs_stack_allocator_allocate(v101[4], 8 * v138, 8);
              *int8x16_t v139 = v115;
              sub_1B639192C((uint64_t)&v341, (uint64_t)&v362);
              *(void *)v365 = v139;
              *(void *)&v365[8] = v138;
              *(void *)&v365[16] = 1;
              float32x4_t v140 = (void *)v101[13];
              char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native();
              v101[13] = v140;
              uint64_t v107 = v295;
              if ((isUniquelyReferenced_nonNull_native & 1) == 0)
              {
                float32x4_t v140 = sub_1B68C0C6C(0, v140[2] + 1, 1, v140);
                *float v104 = v140;
              }
              unint64_t v143 = v140[2];
              unint64_t v142 = v140[3];
              if (v143 >= v142 >> 1)
              {
                float32x4_t v140 = sub_1B68C0C6C(v142 > 1, v143 + 1, 1, v140);
                *float v104 = v140;
              }
              v140[2] = v143 + 1;
              uint64_t v144 = &v140[9 * v143];
              *((_OWORD *)v144 + 2) = v362;
              long long v145 = v363;
              long long v146 = v364;
              long long v147 = *(_OWORD *)v365;
              v144[12] = *(void *)&v365[16];
              *((_OWORD *)v144 + 4) = v146;
              *((_OWORD *)v144 + 5) = v147;
              *((_OWORD *)v144 + 3) = v145;
              uint64_t v108 = v308;
LABEL_49:
              sub_1B6391400((uint64_t)&v341);
              swift_release();
              uint64_t v112 = v298;
              uint64_t v114 = v304;
            }
            uint64_t v92 = v114;
          }
          ++v113;
        }
        while (v113 != v112);
      }
    }
    else
    {
      uint64_t v148 = v303;
      if (v106 != v303)
      {
        do
        {
          uint64_t v152 = v92 - 1;
          if (v92 >= 1)
          {
            uint64_t v153 = *(void *)(v108 + 232);
            if (v106 < *(void *)(v108 + 256) || v106 >= v153)
            {
              uint64_t v343 = 0;
              long long v342 = 0u;
              long long v341 = 0u;
              char v344 = 5;
              uint64_t v155 = *(void *)(*v104 + 16);
              if (v155)
              {
                uint64_t v156 = *v104 + 32;
                swift_retain();
                swift_bridgeObjectRetain();
                uint64_t v157 = 0;
                while (2)
                {
                  sub_1B63B2978(v156, (uint64_t)v345);
                  sub_1B639192C((uint64_t)v345, (uint64_t)&v362);
                  sub_1B639192C((uint64_t)&v341, (uint64_t)v365);
                  switch(BYTE8(v364))
                  {
                    case 1:
                      sub_1B639192C((uint64_t)&v362, (uint64_t)v352);
                      if (v367 != 1) {
                        goto LABEL_105;
                      }
                      goto LABEL_119;
                    case 2:
                      sub_1B639192C((uint64_t)&v362, (uint64_t)v352);
                      if (v367 == 2) {
                        goto LABEL_116;
                      }
                      goto LABEL_104;
                    case 3:
                      sub_1B639192C((uint64_t)&v362, (uint64_t)v352);
                      if (v367 == 3)
                      {
LABEL_116:
                        sub_1B62C15C4(v352, (uint64_t)v338);
                        sub_1B62C15C4((long long *)v365, (uint64_t)v361);
                        uint64_t v160 = v339;
                        uint64_t v161 = v340;
                        sub_1B62C14BC(v338, v339);
                        LOBYTE(v160) = sub_1B6B3D86C(v361, v160, v161);
                        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v361);
                        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v338);
                        sub_1B6391400((uint64_t)&v362);
                        sub_1B62C0034((uint64_t)v345, (uint64_t (*)(void))sub_1B63B29DC);
                        if (v160)
                        {
LABEL_124:
                          swift_bridgeObjectRelease();
                          float v104 = v291;
                          unsigned __int32 v166 = sub_1B6B1B930();
                          uint64_t v167 = *(void *)(v165 + 48);
                          if (v167)
                          {
                            uint64_t v168 = *(void *)(v165 + 64);
                            *(void *)(v167 + 8 * v168) = v106;
                            *(void *)(v165 + 64) = v168 + 1;
                          }
                          ((void (*)(long long *, void))v166)(&v362, 0);
                          float v101 = v293;
                          uint64_t v108 = v308;
                          uint64_t v148 = v303;
                          goto LABEL_94;
                        }
                      }
                      else
                      {
LABEL_104:
                        _s3VFX14_BinaryDecoderC16SingleValueStoreVwxx_0((uint64_t)v352);
LABEL_105:
                        sub_1B62C0034((uint64_t)&v362, (uint64_t (*)(void))sub_1B691F560);
                        sub_1B62C0034((uint64_t)v345, (uint64_t (*)(void))sub_1B63B29DC);
                      }
LABEL_106:
                      ++v157;
                      v156 += 72;
                      if (v155 != v157) {
                        continue;
                      }
                      swift_bridgeObjectRelease();
                      uint64_t v169 = v308;
                      uint64_t v153 = *(void *)(v308 + 232);
                      float v101 = v293;
                      float v104 = v291;
                      break;
                    case 4:
                      sub_1B639192C((uint64_t)&v362, (uint64_t)v352);
                      if (v367 != 4) {
                        goto LABEL_105;
                      }
                      int v158 = LOBYTE(v352[0]);
                      int v159 = v365[0];
                      sub_1B6391400((uint64_t)&v362);
                      sub_1B62C0034((uint64_t)v345, (uint64_t (*)(void))sub_1B63B29DC);
                      if (v158 == v159) {
                        goto LABEL_124;
                      }
                      goto LABEL_106;
                    case 5:
                      if (v367 != 5) {
                        goto LABEL_105;
                      }
                      int8x16_t v164 = vorrq_s8(*(int8x16_t *)&v365[8], v366);
                      if (*(void *)&vorr_s8(*(int8x8_t *)v164.i8, (int8x8_t)*(_OWORD *)&vextq_s8(v164, v164, 8uLL)) | *(void *)v365) {
                        goto LABEL_105;
                      }
                      sub_1B6391400((uint64_t)&v362);
                      sub_1B62C0034((uint64_t)v345, (uint64_t (*)(void))sub_1B63B29DC);
                      goto LABEL_124;
                    default:
                      sub_1B639192C((uint64_t)&v362, (uint64_t)v352);
                      if ((_BYTE)v367) {
                        goto LABEL_105;
                      }
LABEL_119:
                      uint64_t v162 = *(void *)&v352[0];
                      uint64_t v163 = *(void *)v365;
                      sub_1B6391400((uint64_t)&v362);
                      sub_1B62C0034((uint64_t)v345, (uint64_t (*)(void))sub_1B63B29DC);
                      if (v162 == v163) {
                        goto LABEL_124;
                      }
                      goto LABEL_106;
                  }
                  break;
                }
              }
              else
              {
                uint64_t v169 = swift_retain();
              }
              uint64_t v170 = *(void *)(v169 + 240) - v153;
              __int32 v171 = ecs_stack_allocator_allocate(v101[4], 8 * v170, 8);
              *__int32 v171 = v106;
              sub_1B639192C((uint64_t)&v341, (uint64_t)&v362);
              *(void *)v365 = v171;
              *(void *)&v365[8] = v170;
              *(void *)&v365[16] = 1;
              uint64_t v172 = (void *)v101[13];
              char v173 = swift_isUniquelyReferenced_nonNull_native();
              v101[13] = v172;
              uint64_t v148 = v303;
              if ((v173 & 1) == 0)
              {
                uint64_t v172 = sub_1B68C0C6C(0, v172[2] + 1, 1, v172);
                *float v104 = v172;
              }
              unint64_t v175 = v172[2];
              unint64_t v174 = v172[3];
              if (v175 >= v174 >> 1)
              {
                uint64_t v172 = sub_1B68C0C6C(v174 > 1, v175 + 1, 1, v172);
                *float v104 = v172;
              }
              v172[2] = v175 + 1;
              float32x4_t v176 = &v172[9 * v175];
              *((_OWORD *)v176 + 2) = v362;
              long long v177 = v363;
              long long v178 = v364;
              long long v179 = *(_OWORD *)v365;
              v176[12] = *(void *)&v365[16];
              *((_OWORD *)v176 + 4) = v178;
              *((_OWORD *)v176 + 5) = v179;
              *((_OWORD *)v176 + 3) = v177;
              uint64_t v108 = v308;
LABEL_94:
              sub_1B6391400((uint64_t)&v341);
              swift_release();
            }
            uint64_t v92 = v152;
          }
          ++v106;
        }
        while (v106 != v148);
      }
    }
    sub_1B6345178(v101, (unsigned __int16 **)v319, (uint64_t)v370);
    if (*(void *)(v101[13] + 16))
    {
      uint64_t v149 = swift_bridgeObjectRetain();
      sub_1B639147C(v149, v308);
      swift_bridgeObjectRelease();
      char v150 = swift_isUniquelyReferenced_nonNull_native();
      uint64_t v151 = v101[13];
      if (v150)
      {
        sub_1B6399BB8(0, *(void *)(v151 + 16));
      }
      else
      {
        float32x4_t v180 = (void *)MEMORY[0x1E4FBC860];
        if (*(void *)(v151 + 24) >= 2uLL)
        {
          sub_1B62D2E40(0, (unint64_t *)&qword_1EB980C00, (uint64_t (*)(uint64_t))sub_1B63B29DC, MEMORY[0x1E4FBBE00]);
          float32x4_t v180 = (void *)swift_allocObject();
          size_t v181 = j__malloc_size(v180);
          v180[2] = 0;
          v180[3] = 2 * ((uint64_t)(v181 - 32) / 72);
        }
        *float v104 = v180;
        swift_bridgeObjectRelease();
      }
      if (*(unsigned __int8 *)(v101[2] + OBJC_IVAR____TtC3VFX13EntityManager_currentState) - 1 >= 2)
      {
        int32x4_t v182 = *(char **)(v308 + 232);
        float32x4_t v183 = *(char **)(v308 + 256);
        if (v182 == v183)
        {
          float v184 = *(char **)(v308 + 240);
        }
        else
        {
          sub_1B666018C(v183, v182);
          float32x4_t v183 = *(char **)(v308 + 232);
          float v184 = *(char **)(v308 + 240);
          if (v184 == v183)
          {
            float v184 = 0;
            float32x4_t v183 = 0;
            *(void *)(v308 + 232) = 0;
            *(void *)(v308 + 240) = 0;
          }
        }
        *(void *)(v308 + 248) = v184;
        *(void *)(v308 + 256) = v183;
      }
    }
    uint64_t v102 = v263;
    ecs_stack_allocator_pop_snapshot(v263);
    int v103 = v260;
    if (v260)
    {
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v308 + 344));
      os_unfair_lock_unlock(*(os_unfair_lock_t *)(v308 + 376));
    }
    swift_release();
    uint64_t v100 = v289 + 1;
  }
  while (v289 + 1 != v266);
  sub_1B632F170(v337);
  uint64_t v94 = a4;
  uint64_t v96 = v269;
LABEL_147:
  sub_1B62E9D50(*(void **)(v96 + 8), (uint64_t)v338);
  sub_1B62D7FE8((uint64_t)v338, (uint64_t)v352, qword_1EB97EA20, (uint64_t)&type metadata for WorldTransform);
  float v185 = v302;
  if (v353)
  {
    float32x4_t v296 = (float32x4_t)xmmword_1B6E4F370;
    float32x4_t v309 = (float32x4_t)xmmword_1B6E4F2E0;
    float32x4_t v305 = (float32x4_t)xmmword_1B6E4F320;
    float32x4_t v299 = (float32x4_t)xmmword_1B6E4F300;
  }
  else
  {
    float32x4_t v305 = (float32x4_t)v352[1];
    float32x4_t v309 = (float32x4_t)v352[2];
    float32x4_t v296 = (float32x4_t)v352[3];
    float32x4_t v299 = (float32x4_t)v352[0];
  }
  *(double *)v186.i64 = sub_1B6335378();
  float32x4_t v190 = v189;
  float32x4_t v191 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v186, v299.f32[0]), v187, *(float32x2_t *)v299.f32, 1), v189, v299, 2), v188, v299, 3);
  float32x4_t v192 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v186, v305.f32[0]), v187, *(float32x2_t *)v305.f32, 1), v189, v305, 2), v188, v305, 3);
  float32x4_t v193 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v186, v309.f32[0]), v187, *(float32x2_t *)v309.f32, 1), v189, v309, 2), v188, v309, 3);
  int32x4_t v194 = (int32x4_t)vmulq_f32(v191, v191);
  int32x4_t v195 = (int32x4_t)vmulq_f32(v192, v192);
  int32x4_t v196 = (int32x4_t)vmulq_f32(v193, v193);
  int32x4_t v197 = vdupq_laneq_s32(v195, 2);
  float32x4_t v198 = (float32x4_t)vtrn2q_s32(v194, v195);
  v198.i32[2] = v196.i32[1];
  float32x4_t v199 = vaddq_f32((float32x4_t)vzip1q_s32(vzip2q_s32(v194, v196), v197), vaddq_f32((float32x4_t)vzip1q_s32(vzip1q_s32(v194, v196), v195), v198));
  v198.i64[0] = 0x80000000800000;
  v198.i64[1] = 0x80000000800000;
  int32x4_t v200 = vcgeq_f32(v198, v199);
  v199.i32[3] = 0;
  float32x4_t v201 = vrsqrteq_f32(v199);
  float32x4_t v202 = vmulq_f32(v201, vrsqrtsq_f32(v199, vmulq_f32(v201, v201)));
  int32x4_t v203 = v200;
  v203.i32[3] = 0;
  float32x4_t v204 = (float32x4_t)vbslq_s8((int8x16_t)vcltzq_s32(v203), (int8x16_t)v199, (int8x16_t)vmulq_f32(v202, vrsqrtsq_f32(v199, vmulq_f32(v202, v202))));
  float32x4_t v292 = v192;
  float32x4_t v294 = v191;
  float32x4_t v205 = vmulq_n_f32(v191, v204.f32[0]);
  float32x4_t v206 = vmulq_lane_f32(v192, *(float32x2_t *)v204.f32, 1);
  float32x4_t v290 = v193;
  float32x4_t v207 = vmulq_laneq_f32(v193, v204, 2);
  int8x16_t v208 = (int8x16_t)vuzp1q_s32((int32x4_t)v207, (int32x4_t)v207);
  int8x16_t v209 = (int8x16_t)vuzp1q_s32((int32x4_t)v206, (int32x4_t)v206);
  int32x4_t v210 = (int32x4_t)v205;
  if (v200.i32[0])
  {
    int8x16_t v211 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v208, (int8x16_t)v207, 0xCuLL), vnegq_f32(v206)), v207, (float32x4_t)vextq_s8(v209, (int8x16_t)v206, 0xCuLL));
    int32x4_t v210 = (int32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v211, (int32x4_t)v211), v211, 0xCuLL);
  }
  int8x16_t v212 = (int8x16_t)vuzp1q_s32((int32x4_t)v205, (int32x4_t)v205);
  float32x4_t v213 = v206;
  if (v200.i32[1])
  {
    int8x16_t v214 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v212, (int8x16_t)v205, 0xCuLL), vnegq_f32(v207)), v205, (float32x4_t)vextq_s8(v208, (int8x16_t)v207, 0xCuLL));
    float32x4_t v213 = (float32x4_t)vextq_s8((int8x16_t)vuzp1q_s32((int32x4_t)v214, (int32x4_t)v214), v214, 0xCuLL);
  }
  if (v200.i32[2])
  {
    int8x16_t v215 = (int8x16_t)vmlaq_f32(vmulq_f32((float32x4_t)vextq_s8(v209, (int8x16_t)v206, 0xCuLL), vnegq_f32(v205)), v206, (float32x4_t)vextq_s8(v212, (int8x16_t)v205, 0xCuLL));
    float32x4_t v206 = (float32x4_t)vuzp1q_s32((int32x4_t)v215, (int32x4_t)v215);
    float32x4_t v207 = (float32x4_t)vextq_s8((int8x16_t)v206, v215, 0xCuLL);
  }
  float v216 = (float)(*(float *)v210.i32 + v213.f32[1]) + v207.f32[2];
  float32x4_t v264 = v190;
  float32x4_t v267 = v188;
  float32x4_t v258 = v186;
  float32x4_t v261 = v187;
  float32x4_t v306 = (float32x4_t)v195;
  float32x4_t v310 = (float32x4_t)v196;
  float32x4_t v300 = (float32x4_t)v197;
  float32x4_t v255 = (float32x4_t)v194;
  if (v216 > 0.0)
  {
    float32x4_t v217 = (float32x4_t)vzip2q_s32((int32x4_t)v213, vuzp1q_s32((int32x4_t)v213, (int32x4_t)v207));
    v217.i32[2] = v210.i32[1];
    float v218 = sqrtf(v216 + 1.0);
    float32x4_t v219 = (float32x4_t)vtrn2q_s32((int32x4_t)v207, vzip2q_s32((int32x4_t)v207, v210));
    v219.i32[2] = v213.i32[0];
    float32x4_t v220 = vsubq_f32(v217, v219);
    v217.f32[3] = v218;
    v219.f32[3] = v218;
    float32x4_t v221 = vmulq_f32(v217, v219);
    v220.i32[3] = v221.i32[3];
    float32x4_t v252 = v220;
LABEL_158:
    v221.f32[0] = 0.5 / v218;
    float32x4_t v249 = (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v221.f32, 0);
    goto LABEL_167;
  }
  if (*(float *)v210.i32 < v213.f32[1] || *(float *)v210.i32 < v207.f32[2])
  {
    if (v213.f32[1] <= v207.f32[2])
    {
      float v218 = sqrtf((float)((float)(v207.f32[2] + 1.0) - *(float *)v210.i32) - v213.f32[1]);
      *(float32x2_t *)v246.f32 = vadd_f32((float32x2_t)*(_OWORD *)&vzip2q_s32(v210, (int32x4_t)v213), *(float32x2_t *)v207.f32);
      float32x2_t v247 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v213.f32, 0);
      *(float32x2_t *)v221.f32 = vsub_f32(*(float32x2_t *)v210.i8, v247);
      v247.f32[0] = v218;
      LODWORD(v248) = vmul_f32((float32x2_t)__PAIR64__(v210.u32[1], LODWORD(v218)), v247).u32[0];
      HIDWORD(v248) = v221.i32[1];
      v246.i64[1] = v248;
      float32x4_t v252 = v246;
      goto LABEL_158;
    }
    float v225 = sqrtf((float)((float)(v213.f32[1] + 1.0) - *(float *)v210.i32) - v207.f32[2]);
    *(int32x2_t *)v206.f32 = vdup_laneq_s32((int32x4_t)v213, 2);
    int8x16_t v223 = (int8x16_t)v206;
    *(float *)v223.i32 = v225;
    v223.i32[0] = vmul_f32(*(float32x2_t *)v223.i8, (float32x2_t)__PAIR64__(v207.u32[1], LODWORD(v225))).u32[0];
    v223.i32[1] = vadd_f32(*(float32x2_t *)&v206, *(float32x2_t *)&v207).i32[1];
    int8x16_t v224 = (int8x16_t)vaddq_f32((float32x4_t)vdupq_lane_s32(*(int32x2_t *)v210.i8, 1), v213);
    int32x2_t v230 = (int32x2_t)vsubq_f32(v207, (float32x4_t)vdupq_laneq_s32(v210, 2)).u64[0];
    int8x16_t v231 = vextq_s8(vextq_s8(v224, v224, 4uLL), v223, 0xCuLL);
    v231.i32[3] = v230.i32[0];
  }
  else
  {
    float v225 = sqrtf((float)((float)(*(float *)v210.i32 + 1.0) - v213.f32[1]) - v207.f32[2]);
    float32x2_t v226 = (float32x2_t)vdup_lane_s32(*(int32x2_t *)v213.f32, 0);
    float32x2_t v227 = vadd_f32(*(float32x2_t *)v210.i8, v226);
    v226.f32[0] = v225;
    v231.i32[0] = vmul_f32((float32x2_t)__PAIR64__(v210.u32[1], LODWORD(v225)), v226).u32[0];
    v231.i32[1] = v227.i32[1];
    float32x2_t v228 = (float32x2_t)vzip2q_s32(v210, (int32x4_t)v213).u64[0];
    LODWORD(v229) = vadd_f32(v228, *(float32x2_t *)v207.f32).u32[0];
    int32x2_t v230 = (int32x2_t)vsub_f32(v228, *(float32x2_t *)v207.f32);
    HIDWORD(v229) = v230.i32[1];
    v231.i64[1] = v229;
  }
  *(float *)v230.i32 = 0.5 / v225;
  float32x4_t v249 = (float32x4_t)v231;
  float32x4_t v252 = (float32x4_t)vdupq_lane_s32(v230, 0);
LABEL_167:
  sub_1B62C9DA8(v94, (uint64_t)&v325, 0x200000000, &v341);
  sub_1B62D7FE8((uint64_t)&v341, (uint64_t)v345, (unint64_t *)&qword_1EB97DC50, (uint64_t)&type metadata for QueryResult);
  if (!*(void *)&v345[0]) {
    return (uint64_t *)sub_1B62CA064((uint64_t)v313);
  }
  long long v316 = v345[0];
  long long v317 = v345[1];
  uint64_t v318 = v346;
  uint64_t v270 = v351;
  if (v351 > 0)
  {
    uint64_t v232 = v348;
    if (v348)
    {
      float32x4_t v233 = vmlaq_laneq_f32(vmlaq_laneq_f32(vmlaq_lane_f32(vmulq_n_f32(v258, v296.f32[0]), v261, *(float32x2_t *)v296.f32, 1), v264, v296, 2), v267, v296, 3);
      int32x4_t v265 = (int32x4_t)vmulq_f32(v252, v249);
      float32x4_t v268 = v233;
      v234.i64[0] = __PAIR64__(COERCE_UNSIGNED_INT(sqrtf(vaddq_f32(v300, vaddq_f32(v306, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v306.f32, 1))).f32[0])), COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v255, 2), vaddq_f32(v255, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v255.f32, 1))).f32[0])));
      v234.i64[1] = COERCE_UNSIGNED_INT(sqrtf(vaddq_f32((float32x4_t)vdupq_laneq_s32((int32x4_t)v310, 2), vaddq_f32(v310, (float32x4_t)vdupq_lane_s32(*(int32x2_t *)v310.f32, 1))).f32[0]));
      float32x4_t v262 = v234;
      float32x4_t v235 = v350;
      uint64_t v236 = v350[4];
      uint64_t v259 = v349;
      int v237 = *(unsigned __int8 *)(v349 + OBJC_IVAR____TtC3VFX13EntityManager_lockChunksOnQueryForEach);
      uint64_t v253 = (uint64_t)(v350 + 6);
      unint64_t v250 = v350 + 8;
      float32x4_t v238 = (uint64_t *)(v347 + 24);
      int v256 = v237;
      do
      {
        uint64_t v311 = v232;
        uint64_t v239 = *((unsigned int *)v238 - 6);
        uint64_t v240 = *((unsigned int *)v238 - 5);
        uint64_t v241 = *((unsigned int *)v238 - 4);
        uint64_t v307 = *(v238 - 1);
        uint64_t v301 = *v238;
        uint64_t v242 = v238[2];
        uint64_t v297 = v238[1];
        if (v237)
        {
          uint64_t v243 = *(os_unfair_lock_s **)(v242 + 376);
          swift_retain();
          os_unfair_lock_lock(v243);
          os_unfair_lock_lock(*(os_unfair_lock_t *)(v242 + 344));
        }
        else
        {
          swift_retain();
        }
        ecs_stack_allocator_push_snapshot(v236);
        sub_1B62D7FE8(v253, (uint64_t)v361, &qword_1EB97DE20, (uint64_t)&type metadata for CommandQueue.IterationContext);
        uint64_t v244 = v235[4];
        uint64_t v245 = *(void *)(*(void *)(*(void *)(*(void *)(v242 + 40) + 16) + 32) + 16) + 1;
        swift_retain();
        _DWORD v235[6] = ecs_stack_allocator_allocate(v244, 48 * v245, 8);
        v235[7] = v245;
        v250[1] = 0;
        _OWORD v250[2] = 0;
        *unint64_t v250 = 0;
        swift_release();
        *(void *)&long long v362 = v259;
        *((void *)&v362 + 1) = v242;
        *(void *)&long long v363 = v235;
        *((void *)&v363 + 1) = v241;
        *(void *)&long long v364 = (v240 - v239 + v241);
        *((void *)&v364 + 1) = v270;
        *(void *)v365 = v239;
        *(void *)&v365[8] = v240;
        *(void *)&v365[16] = 0;
        v366.i64[0] = 0;
        v366.i8[8] = 1;
        uint64_t v367 = v307;
        uint64_t v368 = v301;
        uint64_t v369 = v297;
        sub_1B6C93734(&v362, v288, v294, v292, v290, v268, v265, v262, v287, v286, v285, v284, v283, v282, v281, v280, v279, v278, v277,
          v276,
          v275,
          v274,
          v273,
          v272,
          v271);
        if (v185)
        {

          v321[0] = v316;
          v321[1] = v317;
          uint64_t v322 = v318;
          sub_1B6345178(v235, (unsigned __int16 **)v321, (uint64_t)v361);
          sub_1B634507C((char *)v242);
          ecs_stack_allocator_pop_snapshot(v236);
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v242 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v242 + 376));
          __break(1u);
          JUMPOUT(0x1B6C9709CLL);
        }
        v323[0] = v316;
        v323[1] = v317;
        uint64_t v324 = v318;
        sub_1B6345178(v235, (unsigned __int16 **)v323, (uint64_t)v361);
        float v185 = 0;
        sub_1B634507C((char *)v242);
        ecs_stack_allocator_pop_snapshot(v236);
        int v237 = v256;
        if (v256)
        {
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v242 + 344));
          os_unfair_lock_unlock(*(os_unfair_lock_t *)(v242 + 376));
        }
        swift_release();
        v238 += 6;
        uint64_t v232 = v311 - 1;
      }
      while (v311 != 1);
    }
  }
  sub_1B62CA064((uint64_t)v313);
  return sub_1B632F170((uint64_t *)&v341);
}